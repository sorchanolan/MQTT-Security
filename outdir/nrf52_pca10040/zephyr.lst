
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

#include <crc16.h>

u16_t crc16(const u8_t *src, size_t len, u16_t polynomial,
	    u16_t initial_value, bool pad)
{
       0:	2000aa20 	.word	0x2000aa20
       4:	00027089 	.word	0x00027089
	u16_t crc = initial_value;
	size_t padding = pad ? sizeof(crc) : 0;
       8:	000270e9 	.word	0x000270e9
	size_t i, b;

	/* src length + padding (if required) */
	for (i = 0; i < len + padding; i++) {
       c:	00026f1d 	.word	0x00026f1d
	size_t padding = pad ? sizeof(crc) : 0;
      10:	00026f1d 	.word	0x00026f1d
      14:	00026f1d 	.word	0x00026f1d
			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80 >> b));
			}

			if (divide) {
      18:	00026f1d 	.word	0x00026f1d
		for (b = 0; b < 8; b++) {
      1c:	00026f1d 	.word	0x00026f1d
      20:	00026f1d 	.word	0x00026f1d
			crc = (crc << 1);
      24:	00026f1d 	.word	0x00026f1d
			if (i < len) {
      28:	00026f1d 	.word	0x00026f1d
				crc |= !!(src[i] & (0x80 >> b));
      2c:	00026a6d 	.word	0x00026a6d
      30:	00026f1d 	.word	0x00026f1d
      34:	00026f1d 	.word	0x00026f1d
      38:	00026a29 	.word	0x00026a29
      3c:	00026f1d 	.word	0x00026f1d

00000040 <_irq_vector_table>:
				crc = crc ^ polynomial;
      40:	0002704d 00018795 0002704d 0002704d     Mp......Mp..Mp..
	for (i = 0; i < len + padding; i++) {
      50:	0002704d 0002704d 0002704d 0002704d     Mp..Mp..Mp..Mp..
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
      60:	0002704d 0002704d 0002704d 0002704d     Mp..Mp..Mp..Mp..
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
      70:	0002704d 0002704d 0002704d 0002704d     Mp..Mp..Mp..Mp..
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
      80:	0002704d 0002704d 0002704d 0002704d     Mp..Mp..Mp..Mp..
      90:	0002704d 0002704d 0002704d 0002704d     Mp..Mp..Mp..Mp..
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
      a0:	0002704d 0002704d 0002704d 0002704d     Mp..Mp..Mp..Mp..
      b0:	0002704d 0002704d 0002704d 0002704d     Mp..Mp..Mp..Mp..
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
      c0:	0002704d 0002704d 0002704d 0002704d     Mp..Mp..Mp..Mp..
      d0:	0002704d 0002704d 0002704d              Mp..Mp..Mp..

000000dc <_sw_isr_table>:
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
      dc:	00000000 00002935 00000000 00026e89     ....5).......n..
      ec:	2000ce4c 0000226f 00000000 00026e89     L.. o".......n..
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
      fc:	00000000 00026e89 00000000 00026e89     .....n.......n..

	(void)_copy(state, sizeof(state), in, sizeof(state));

	add_round_key(state, s->words + Nb*Nr);

	for (i = Nr - 1; i > 0; --i) {
     10c:	2000ce88 00002643 00000000 00026e89     ... C&.......n..
	for (i = 0; i < (Nb*Nk); ++i) {
     11c:	00000000 00026e89 00000000 00026e89     .....n.......n..
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     12c:	00000000 00026e89 00000000 000187b5     .....n..........
     13c:	00000000 00026e89 00000000 000187f7     .....n..........
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     14c:	00000000 00026e89 00000000 00026e89     .....n.......n..
     15c:	00000000 00026e89 00000000 000023b5     .....n.......#..
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     16c:	00000000 00026e89 00000000 00026e89     .....n.......n..
     17c:	00000000 00026e89 00000000 00026e89     .....n.......n..
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     18c:	00000000 00026e89 00000000 00026e89     .....n.......n..
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     19c:	00000000 000187ed 00000000 00026e89     .............n..
     1ac:	00000000 00026e89 00000000 00026e89     .....n.......n..
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     1bc:	00000000 00026e89 00000000 00026e89     .....n.......n..
     1cc:	00000000 00026e89 00000000 00026e89     .....n.......n..
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     1dc:	00000000 00026e89 00000000 00026e89     .....n.......n..
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     1ec:	00000000 00026e89 00000000 00026e89     .....n.......n..
     1fc:	00000000 00026e89 00000000 00026e89     .....n.......n..
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     20c:	00000000 00026e89                       .....n..

00000214 <_image_text_start>:
	...

00000220 <memchr>:
     220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     224:	2a10      	cmp	r2, #16
     226:	db2b      	blt.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     228:	f010 0f07 	tst.w	r0, #7
     22c:	d008      	beq.n	240 <memchr+0x20>
     22e:	f810 3b01 	ldrb.w	r3, [r0], #1
     232:	3a01      	subs	r2, #1
     234:	428b      	cmp	r3, r1
     236:	d02d      	beq.n	294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     238:	f010 0f07 	tst.w	r0, #7
     23c:	b342      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     23e:	d1f6      	bne.n	22e <memchr+0xe>
     240:	b4f0      	push	{r4, r5, r6, r7}
     242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     24a:	f022 0407 	bic.w	r4, r2, #7
     24e:	f07f 0700 	mvns.w	r7, #0
     252:	2300      	movs	r3, #0
     254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     258:	3c08      	subs	r4, #8
     25a:	ea85 0501 	eor.w	r5, r5, r1
     25e:	ea86 0601 	eor.w	r6, r6, r1
     262:	fa85 f547 	uadd8	r5, r5, r7
     266:	faa3 f587 	sel	r5, r3, r7
     26a:	fa86 f647 	uadd8	r6, r6, r7
     26e:	faa5 f687 	sel	r6, r5, r7
     272:	b98e      	cbnz	r6, 298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     274:	d1ee      	bne.n	254 <memchr+0x34>
     276:	bcf0      	pop	{r4, r5, r6, r7}
     278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     27c:	f002 0207 	and.w	r2, r2, #7
     280:	b132      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     282:	f810 3b01 	ldrb.w	r3, [r0], #1
     286:	3a01      	subs	r2, #1
     288:	ea83 0301 	eor.w	r3, r3, r1
     28c:	b113      	cbz	r3, 294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     28e:	d1f8      	bne.n	282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     290:	2000      	movs	r0, #0
     292:	4770      	bx	lr
     294:	3801      	subs	r0, #1
     296:	4770      	bx	lr
     298:	2d00      	cmp	r5, #0
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     29a:	bf06      	itte	eq
     29c:	4635      	moveq	r5, r6
     29e:	3803      	subeq	r0, #3
     2a0:	3807      	subne	r0, #7
     2a2:	f015 0f01 	tst.w	r5, #1
     2a6:	d107      	bne.n	2b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     2a8:	3001      	adds	r0, #1
     2aa:	f415 7f80 	tst.w	r5, #256	; 0x100
     2ae:	bf02      	ittt	eq
     2b0:	3001      	addeq	r0, #1
     2b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     2b6:	3001      	addeq	r0, #1
     2b8:	bcf0      	pop	{r4, r5, r6, r7}
     2ba:	3801      	subs	r0, #1
     2bc:	4770      	bx	lr
     2be:	bf00      	nop

000002c0 <memcpy>:
     2c0:	4684      	mov	ip, r0
     2c2:	ea41 0300 	orr.w	r3, r1, r0
     2c6:	f013 0303 	ands.w	r3, r3, #3
     2ca:	d16d      	bne.n	3a8 <memcpy+0xe8>
     2cc:	3a40      	subs	r2, #64	; 0x40
     2ce:	d341      	bcc.n	354 <memcpy+0x94>
     2d0:	f851 3b04 	ldr.w	r3, [r1], #4
     2d4:	f840 3b04 	str.w	r3, [r0], #4
     2d8:	f851 3b04 	ldr.w	r3, [r1], #4
     2dc:	f840 3b04 	str.w	r3, [r0], #4
     2e0:	f851 3b04 	ldr.w	r3, [r1], #4
     2e4:	f840 3b04 	str.w	r3, [r0], #4
     2e8:	f851 3b04 	ldr.w	r3, [r1], #4
     2ec:	f840 3b04 	str.w	r3, [r0], #4
     2f0:	f851 3b04 	ldr.w	r3, [r1], #4
     2f4:	f840 3b04 	str.w	r3, [r0], #4
     2f8:	f851 3b04 	ldr.w	r3, [r1], #4
     2fc:	f840 3b04 	str.w	r3, [r0], #4
     300:	f851 3b04 	ldr.w	r3, [r1], #4
     304:	f840 3b04 	str.w	r3, [r0], #4
     308:	f851 3b04 	ldr.w	r3, [r1], #4
     30c:	f840 3b04 	str.w	r3, [r0], #4
     310:	f851 3b04 	ldr.w	r3, [r1], #4
     314:	f840 3b04 	str.w	r3, [r0], #4
     318:	f851 3b04 	ldr.w	r3, [r1], #4
     31c:	f840 3b04 	str.w	r3, [r0], #4
     320:	f851 3b04 	ldr.w	r3, [r1], #4
     324:	f840 3b04 	str.w	r3, [r0], #4
     328:	f851 3b04 	ldr.w	r3, [r1], #4
     32c:	f840 3b04 	str.w	r3, [r0], #4
     330:	f851 3b04 	ldr.w	r3, [r1], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     334:	f840 3b04 	str.w	r3, [r0], #4
     338:	f851 3b04 	ldr.w	r3, [r1], #4
     33c:	f840 3b04 	str.w	r3, [r0], #4
     340:	f851 3b04 	ldr.w	r3, [r1], #4
     344:	f840 3b04 	str.w	r3, [r0], #4
     348:	f851 3b04 	ldr.w	r3, [r1], #4
     34c:	f840 3b04 	str.w	r3, [r0], #4
     350:	3a40      	subs	r2, #64	; 0x40
     352:	d2bd      	bcs.n	2d0 <memcpy+0x10>
     354:	3230      	adds	r2, #48	; 0x30
     356:	d311      	bcc.n	37c <memcpy+0xbc>
     358:	f851 3b04 	ldr.w	r3, [r1], #4
     35c:	f840 3b04 	str.w	r3, [r0], #4
     360:	f851 3b04 	ldr.w	r3, [r1], #4
     364:	f840 3b04 	str.w	r3, [r0], #4
     368:	f851 3b04 	ldr.w	r3, [r1], #4
     36c:	f840 3b04 	str.w	r3, [r0], #4
     370:	f851 3b04 	ldr.w	r3, [r1], #4
     374:	f840 3b04 	str.w	r3, [r0], #4
     378:	3a10      	subs	r2, #16
     37a:	d2ed      	bcs.n	358 <memcpy+0x98>
     37c:	320c      	adds	r2, #12
     37e:	d305      	bcc.n	38c <memcpy+0xcc>
     380:	f851 3b04 	ldr.w	r3, [r1], #4
     384:	f840 3b04 	str.w	r3, [r0], #4
     388:	3a04      	subs	r2, #4
     38a:	d2f9      	bcs.n	380 <memcpy+0xc0>
     38c:	3204      	adds	r2, #4
     38e:	d008      	beq.n	3a2 <memcpy+0xe2>
     390:	07d2      	lsls	r2, r2, #31
     392:	bf1c      	itt	ne
     394:	f811 3b01 	ldrbne.w	r3, [r1], #1
     398:	f800 3b01 	strbne.w	r3, [r0], #1
     39c:	d301      	bcc.n	3a2 <memcpy+0xe2>
     39e:	880b      	ldrh	r3, [r1, #0]
     3a0:	8003      	strh	r3, [r0, #0]
     3a2:	4660      	mov	r0, ip
     3a4:	4770      	bx	lr
     3a6:	bf00      	nop
     3a8:	2a08      	cmp	r2, #8
     3aa:	d313      	bcc.n	3d4 <memcpy+0x114>
     3ac:	078b      	lsls	r3, r1, #30
     3ae:	d08d      	beq.n	2cc <memcpy+0xc>
     3b0:	f010 0303 	ands.w	r3, r0, #3
     3b4:	d08a      	beq.n	2cc <memcpy+0xc>
     3b6:	f1c3 0304 	rsb	r3, r3, #4
     3ba:	1ad2      	subs	r2, r2, r3
     3bc:	07db      	lsls	r3, r3, #31
     3be:	bf1c      	itt	ne
     3c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
     3c4:	f800 3b01 	strbne.w	r3, [r0], #1
     3c8:	d380      	bcc.n	2cc <memcpy+0xc>
     3ca:	f831 3b02 	ldrh.w	r3, [r1], #2
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     3ce:	f820 3b02 	strh.w	r3, [r0], #2
     3d2:	e77b      	b.n	2cc <memcpy+0xc>
     3d4:	3a04      	subs	r2, #4
     3d6:	d3d9      	bcc.n	38c <memcpy+0xcc>
     3d8:	3a01      	subs	r2, #1
     3da:	f811 3b01 	ldrb.w	r3, [r1], #1
     3de:	f800 3b01 	strb.w	r3, [r0], #1
     3e2:	d2f9      	bcs.n	3d8 <memcpy+0x118>
     3e4:	780b      	ldrb	r3, [r1, #0]
     3e6:	7003      	strb	r3, [r0, #0]
     3e8:	784b      	ldrb	r3, [r1, #1]
     3ea:	7043      	strb	r3, [r0, #1]
     3ec:	788b      	ldrb	r3, [r1, #2]
     3ee:	7083      	strb	r3, [r0, #2]
     3f0:	4660      	mov	r0, ip
     3f2:	4770      	bx	lr
	...
     400:	eba2 0003 	sub.w	r0, r2, r3
     404:	4770      	bx	lr
     406:	bf00      	nop

00000408 <strcmp>:
     408:	7802      	ldrb	r2, [r0, #0]
     40a:	780b      	ldrb	r3, [r1, #0]
     40c:	2a01      	cmp	r2, #1
     40e:	bf28      	it	cs
     410:	429a      	cmpcs	r2, r3
     412:	d1f5      	bne.n	400 <CONFIG_BT_RX_STACK_SIZE>
     414:	e96d 4504 	strd	r4, r5, [sp, #-16]!
     418:	ea40 0401 	orr.w	r4, r0, r1
     41c:	e9cd 6702 	strd	r6, r7, [sp, #8]
     420:	f06f 0c00 	mvn.w	ip, #0
     424:	ea4f 7244 	mov.w	r2, r4, lsl #29
     428:	b312      	cbz	r2, 470 <strcmp+0x68>
     42a:	ea80 0401 	eor.w	r4, r0, r1
     42e:	f014 0f07 	tst.w	r4, #7
     432:	d16a      	bne.n	50a <CONFIG_NET_TX_STACK_SIZE+0x5a>
     434:	f000 0407 	and.w	r4, r0, #7
     438:	f020 0007 	bic.w	r0, r0, #7
     43c:	f004 0503 	and.w	r5, r4, #3
     440:	f021 0107 	bic.w	r1, r1, #7
     444:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     448:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     44c:	f014 0f04 	tst.w	r4, #4
     450:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     454:	fa0c f405 	lsl.w	r4, ip, r5
     458:	ea62 0204 	orn	r2, r2, r4
     45c:	ea66 0604 	orn	r6, r6, r4
     460:	d00a      	beq.n	478 <strcmp+0x70>
     462:	ea63 0304 	orn	r3, r3, r4
     466:	4662      	mov	r2, ip
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     468:	ea67 0704 	orn	r7, r7, r4
     46c:	4666      	mov	r6, ip
     46e:	e003      	b.n	478 <strcmp+0x70>
     470:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     474:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     478:	fa82 f54c 	uadd8	r5, r2, ip
     47c:	ea82 0406 	eor.w	r4, r2, r6
     480:	faa4 f48c 	sel	r4, r4, ip
     484:	bb6c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     486:	fa83 f54c 	uadd8	r5, r3, ip
     48a:	ea83 0507 	eor.w	r5, r3, r7
     48e:	faa5 f58c 	sel	r5, r5, ip
     492:	b995      	cbnz	r5, 4ba <CONFIG_NET_TX_STACK_SIZE+0xa>
     494:	e950 2302 	ldrd	r2, r3, [r0, #-8]
     498:	e951 6702 	ldrd	r6, r7, [r1, #-8]
     49c:	fa82 f54c 	uadd8	r5, r2, ip
     4a0:	ea82 0406 	eor.w	r4, r2, r6
     4a4:	faa4 f48c 	sel	r4, r4, ip
     4a8:	fa83 f54c 	uadd8	r5, r3, ip
     4ac:	ea83 0507 	eor.w	r5, r3, r7
     4b0:	faa5 f58c 	sel	r5, r5, ip
     4b4:	4325      	orrs	r5, r4
     4b6:	d0db      	beq.n	470 <strcmp+0x68>
     4b8:	b99c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     4ba:	ba2d      	rev	r5, r5
     4bc:	fab5 f485 	clz	r4, r5
     4c0:	f024 0407 	bic.w	r4, r4, #7
     4c4:	fa27 f104 	lsr.w	r1, r7, r4
     4c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4cc:	fa23 f304 	lsr.w	r3, r3, r4
     4d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
     4d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     4d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     4dc:	eba0 0001 	sub.w	r0, r0, r1
     4e0:	4770      	bx	lr
     4e2:	ba24      	rev	r4, r4
     4e4:	fab4 f484 	clz	r4, r4
     4e8:	f024 0407 	bic.w	r4, r4, #7
     4ec:	fa26 f104 	lsr.w	r1, r6, r4
     4f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4f4:	fa22 f204 	lsr.w	r2, r2, r4
     4f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     4fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     500:	e8fd 4504 	ldrd	r4, r5, [sp], #16
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     504:	eba0 0001 	sub.w	r0, r0, r1
     508:	4770      	bx	lr
     50a:	f014 0f03 	tst.w	r4, #3
     50e:	d13c      	bne.n	58a <CONFIG_NET_TX_STACK_SIZE+0xda>
     510:	f010 0403 	ands.w	r4, r0, #3
     514:	d128      	bne.n	568 <CONFIG_NET_TX_STACK_SIZE+0xb8>
     516:	f850 2b08 	ldr.w	r2, [r0], #8
     51a:	f851 3b08 	ldr.w	r3, [r1], #8
     51e:	fa82 f54c 	uadd8	r5, r2, ip
     522:	ea82 0503 	eor.w	r5, r2, r3
     526:	faa5 f58c 	sel	r5, r5, ip
     52a:	b95d      	cbnz	r5, 544 <CONFIG_NET_TX_STACK_SIZE+0x94>
     52c:	f850 2c04 	ldr.w	r2, [r0, #-4]
     530:	f851 3c04 	ldr.w	r3, [r1, #-4]
     534:	fa82 f54c 	uadd8	r5, r2, ip
     538:	ea82 0503 	eor.w	r5, r2, r3
     53c:	faa5 f58c 	sel	r5, r5, ip
     540:	2d00      	cmp	r5, #0
     542:	d0e8      	beq.n	516 <CONFIG_NET_TX_STACK_SIZE+0x66>
     544:	ba2d      	rev	r5, r5
     546:	fab5 f485 	clz	r4, r5
     54a:	f024 0407 	bic.w	r4, r4, #7
     54e:	fa23 f104 	lsr.w	r1, r3, r4
     552:	fa22 f204 	lsr.w	r2, r2, r4
     556:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     55a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     55e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     562:	eba0 0001 	sub.w	r0, r0, r1
     566:	4770      	bx	lr
     568:	ea4f 04c4 	mov.w	r4, r4, lsl #3
     56c:	f020 0003 	bic.w	r0, r0, #3
     570:	f850 2b08 	ldr.w	r2, [r0], #8
     574:	f021 0103 	bic.w	r1, r1, #3
     578:	f851 3b08 	ldr.w	r3, [r1], #8
     57c:	fa0c f404 	lsl.w	r4, ip, r4
     580:	ea62 0204 	orn	r2, r2, r4
     584:	ea63 0304 	orn	r3, r3, r4
     588:	e7c9      	b.n	51e <CONFIG_NET_TX_STACK_SIZE+0x6e>
     58a:	f010 0403 	ands.w	r4, r0, #3
     58e:	d01a      	beq.n	5c6 <CONFIG_NET_TX_STACK_SIZE+0x116>
     590:	eba1 0104 	sub.w	r1, r1, r4
     594:	f020 0003 	bic.w	r0, r0, #3
     598:	07e4      	lsls	r4, r4, #31
     59a:	f850 2b04 	ldr.w	r2, [r0], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     59e:	d006      	beq.n	5ae <CONFIG_NET_TX_STACK_SIZE+0xfe>
     5a0:	d20f      	bcs.n	5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5a2:	788b      	ldrb	r3, [r1, #2]
     5a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
     5a8:	1ae4      	subs	r4, r4, r3
     5aa:	d106      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ac:	b12b      	cbz	r3, 5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ae:	78cb      	ldrb	r3, [r1, #3]
     5b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
     5b4:	1ae4      	subs	r4, r4, r3
     5b6:	d100      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5b8:	b91b      	cbnz	r3, 5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5ba:	4620      	mov	r0, r4
     5bc:	f85d 4b10 	ldr.w	r4, [sp], #16
     5c0:	4770      	bx	lr
     5c2:	f101 0104 	add.w	r1, r1, #4
     5c6:	f850 2b04 	ldr.w	r2, [r0], #4
     5ca:	07cc      	lsls	r4, r1, #31
     5cc:	f021 0103 	bic.w	r1, r1, #3
     5d0:	f851 3b04 	ldr.w	r3, [r1], #4
     5d4:	d848      	bhi.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     5d6:	d224      	bcs.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     5d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
     5dc:	fa82 f54c 	uadd8	r5, r2, ip
     5e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
     5e4:	faa5 f58c 	sel	r5, r5, ip
     5e8:	d10a      	bne.n	600 <CONFIG_NET_RX_STACK_SIZE+0x24>
     5ea:	b965      	cbnz	r5, 606 <CONFIG_NET_RX_STACK_SIZE+0x2a>
     5ec:	f851 3b04 	ldr.w	r3, [r1], #4
     5f0:	ea84 0402 	eor.w	r4, r4, r2
     5f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
     5f8:	d10e      	bne.n	618 <CONFIG_NET_RX_STACK_SIZE+0x3c>
     5fa:	f850 2b04 	ldr.w	r2, [r0], #4
     5fe:	e7eb      	b.n	5d8 <CONFIG_NET_TX_STACK_SIZE+0x128>
     600:	ea4f 2313 	mov.w	r3, r3, lsr #8
     604:	e055      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     606:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
     60a:	d14d      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     60c:	7808      	ldrb	r0, [r1, #0]
     60e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     612:	f1c0 0000 	rsb	r0, r0, #0
     616:	4770      	bx	lr
     618:	ea4f 6212 	mov.w	r2, r2, lsr #24
     61c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
     620:	e047      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     622:	ea02 441c 	and.w	r4, r2, ip, lsr #16
     626:	fa82 f54c 	uadd8	r5, r2, ip
     62a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
     62e:	faa5 f58c 	sel	r5, r5, ip
     632:	d10a      	bne.n	64a <CONFIG_NET_RX_STACK_SIZE+0x6e>
     634:	b965      	cbnz	r5, 650 <CONFIG_NET_RX_STACK_SIZE+0x74>
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     636:	f851 3b04 	ldr.w	r3, [r1], #4
     63a:	ea84 0402 	eor.w	r4, r4, r2
     63e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
     642:	d10c      	bne.n	65e <CONFIG_NET_RX_STACK_SIZE+0x82>
     644:	f850 2b04 	ldr.w	r2, [r0], #4
     648:	e7eb      	b.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     64a:	ea4f 4313 	mov.w	r3, r3, lsr #16
     64e:	e030      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     650:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
     654:	d128      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     656:	880b      	ldrh	r3, [r1, #0]
     658:	ea4f 4212 	mov.w	r2, r2, lsr #16
     65c:	e029      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     65e:	ea4f 4212 	mov.w	r2, r2, lsr #16
     662:	ea03 431c 	and.w	r3, r3, ip, lsr #16
     666:	e024      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     668:	f002 04ff 	and.w	r4, r2, #255	; 0xff
     66c:	fa82 f54c 	uadd8	r5, r2, ip
     670:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
     674:	faa5 f58c 	sel	r5, r5, ip
     678:	d10a      	bne.n	690 <CONFIG_NET_RX_STACK_SIZE+0xb4>
     67a:	b965      	cbnz	r5, 696 <CONFIG_NET_RX_STACK_SIZE+0xba>
     67c:	f851 3b04 	ldr.w	r3, [r1], #4
     680:	ea84 0402 	eor.w	r4, r4, r2
     684:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
     688:	d109      	bne.n	69e <CONFIG_NET_RX_STACK_SIZE+0xc2>
     68a:	f850 2b04 	ldr.w	r2, [r0], #4
     68e:	e7eb      	b.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     690:	ea4f 6313 	mov.w	r3, r3, lsr #24
     694:	e00d      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     696:	f015 0fff 	tst.w	r5, #255	; 0xff
     69a:	d105      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     69c:	680b      	ldr	r3, [r1, #0]
     69e:	ea4f 2212 	mov.w	r2, r2, lsr #8
     6a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     6a6:	e004      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     6a8:	f04f 0000 	mov.w	r0, #0
     6ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6b0:	4770      	bx	lr
     6b2:	ba12      	rev	r2, r2
     6b4:	ba1b      	rev	r3, r3
     6b6:	fa82 f44c 	uadd8	r4, r2, ip
     6ba:	ea82 0403 	eor.w	r4, r2, r3
     6be:	faa4 f58c 	sel	r5, r4, ip
     6c2:	fab5 f485 	clz	r4, r5
     6c6:	fa02 f204 	lsl.w	r2, r2, r4
     6ca:	fa03 f304 	lsl.w	r3, r3, r4
     6ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     6d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
     6da:	4770      	bx	lr
	...

00000700 <strlen>:
     700:	f890 f000 	pld	[r0]
     704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
     708:	f020 0107 	bic.w	r1, r0, #7
     70c:	f06f 0c00 	mvn.w	ip, #0
     710:	f010 0407 	ands.w	r4, r0, #7
     714:	f891 f020 	pld	[r1, #32]
     718:	f040 8049 	bne.w	7ae <strlen+0xae>
     71c:	f04f 0400 	mov.w	r4, #0
     720:	f06f 0007 	mvn.w	r0, #7
     724:	e9d1 2300 	ldrd	r2, r3, [r1]
     728:	f891 f040 	pld	[r1, #64]	; 0x40
     72c:	f100 0008 	add.w	r0, r0, #8
     730:	fa82 f24c 	uadd8	r2, r2, ip
     734:	faa4 f28c 	sel	r2, r4, ip
     738:	fa83 f34c 	uadd8	r3, r3, ip
     73c:	faa2 f38c 	sel	r3, r2, ip
     740:	bb4b      	cbnz	r3, 796 <strlen+0x96>
     742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
     746:	fa82 f24c 	uadd8	r2, r2, ip
     74a:	f100 0008 	add.w	r0, r0, #8
     74e:	faa4 f28c 	sel	r2, r4, ip
     752:	fa83 f34c 	uadd8	r3, r3, ip
     756:	faa2 f38c 	sel	r3, r2, ip
     75a:	b9e3      	cbnz	r3, 796 <strlen+0x96>
     75c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     760:	fa82 f24c 	uadd8	r2, r2, ip
     764:	f100 0008 	add.w	r0, r0, #8
     768:	faa4 f28c 	sel	r2, r4, ip
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     76c:	fa83 f34c 	uadd8	r3, r3, ip
     770:	faa2 f38c 	sel	r3, r2, ip
     774:	b97b      	cbnz	r3, 796 <strlen+0x96>
     776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
     77a:	f101 0120 	add.w	r1, r1, #32
     77e:	fa82 f24c 	uadd8	r2, r2, ip
     782:	f100 0008 	add.w	r0, r0, #8
     786:	faa4 f28c 	sel	r2, r4, ip
     78a:	fa83 f34c 	uadd8	r3, r3, ip
     78e:	faa2 f38c 	sel	r3, r2, ip
     792:	2b00      	cmp	r3, #0
     794:	d0c6      	beq.n	724 <strlen+0x24>
     796:	2a00      	cmp	r2, #0
     798:	bf04      	itt	eq
     79a:	3004      	addeq	r0, #4
     79c:	461a      	moveq	r2, r3
     79e:	ba12      	rev	r2, r2
     7a0:	fab2 f282 	clz	r2, r2
     7a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
     7a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
     7ac:	4770      	bx	lr
     7ae:	e9d1 2300 	ldrd	r2, r3, [r1]
     7b2:	f004 0503 	and.w	r5, r4, #3
     7b6:	f1c4 0000 	rsb	r0, r4, #0
     7ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     7be:	f014 0f04 	tst.w	r4, #4
     7c2:	f891 f040 	pld	[r1, #64]	; 0x40
     7c6:	fa0c f505 	lsl.w	r5, ip, r5
     7ca:	ea62 0205 	orn	r2, r2, r5
     7ce:	bf1c      	itt	ne
     7d0:	ea63 0305 	ornne	r3, r3, r5
     7d4:	4662      	movne	r2, ip
     7d6:	f04f 0400 	mov.w	r4, #0
     7da:	e7a9      	b.n	730 <strlen+0x30>

000007dc <__aeabi_drsub>:
     7dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     7e0:	e002      	b.n	7e8 <__adddf3>
     7e2:	bf00      	nop

000007e4 <__aeabi_dsub>:
     7e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000007e8 <__adddf3>:
     7e8:	b530      	push	{r4, r5, lr}
     7ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
     7ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
     7f2:	ea94 0f05 	teq	r4, r5
     7f6:	bf08      	it	eq
     7f8:	ea90 0f02 	teqeq	r0, r2
     7fc:	bf1f      	itttt	ne
     7fe:	ea54 0c00 	orrsne.w	ip, r4, r0
     802:	ea55 0c02 	orrsne.w	ip, r5, r2
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     806:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     80a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     80e:	f000 80e2 	beq.w	9d6 <CONFIG_ISR_STACK_SIZE+0x1d6>
     812:	ea4f 5454 	mov.w	r4, r4, lsr #21
     816:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     81a:	bfb8      	it	lt
     81c:	426d      	neglt	r5, r5
     81e:	dd0c      	ble.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     820:	442c      	add	r4, r5
     822:	ea80 0202 	eor.w	r2, r0, r2
     826:	ea81 0303 	eor.w	r3, r1, r3
     82a:	ea82 0000 	eor.w	r0, r2, r0
     82e:	ea83 0101 	eor.w	r1, r3, r1
     832:	ea80 0202 	eor.w	r2, r0, r2
     836:	ea81 0303 	eor.w	r3, r1, r3
     83a:	2d36      	cmp	r5, #54	; 0x36
     83c:	bf88      	it	hi
     83e:	bd30      	pophi	{r4, r5, pc}
     840:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     844:	ea4f 3101 	mov.w	r1, r1, lsl #12
     848:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     84c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     850:	d002      	beq.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     852:	4240      	negs	r0, r0
     854:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     858:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     85c:	ea4f 3303 	mov.w	r3, r3, lsl #12
     860:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     864:	d002      	beq.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
     866:	4252      	negs	r2, r2
     868:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     86c:	ea94 0f05 	teq	r4, r5
     870:	f000 80a7 	beq.w	9c2 <CONFIG_ISR_STACK_SIZE+0x1c2>
     874:	f1a4 0401 	sub.w	r4, r4, #1
     878:	f1d5 0e20 	rsbs	lr, r5, #32
     87c:	db0d      	blt.n	89a <CONFIG_ISR_STACK_SIZE+0x9a>
     87e:	fa02 fc0e 	lsl.w	ip, r2, lr
     882:	fa22 f205 	lsr.w	r2, r2, r5
     886:	1880      	adds	r0, r0, r2
     888:	f141 0100 	adc.w	r1, r1, #0
     88c:	fa03 f20e 	lsl.w	r2, r3, lr
     890:	1880      	adds	r0, r0, r2
     892:	fa43 f305 	asr.w	r3, r3, r5
     896:	4159      	adcs	r1, r3
     898:	e00e      	b.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
     89a:	f1a5 0520 	sub.w	r5, r5, #32
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     89e:	f10e 0e20 	add.w	lr, lr, #32
     8a2:	2a01      	cmp	r2, #1
     8a4:	fa03 fc0e 	lsl.w	ip, r3, lr
     8a8:	bf28      	it	cs
     8aa:	f04c 0c02 	orrcs.w	ip, ip, #2
     8ae:	fa43 f305 	asr.w	r3, r3, r5
     8b2:	18c0      	adds	r0, r0, r3
     8b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     8b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     8bc:	d507      	bpl.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     8be:	f04f 0e00 	mov.w	lr, #0
     8c2:	f1dc 0c00 	rsbs	ip, ip, #0
     8c6:	eb7e 0000 	sbcs.w	r0, lr, r0
     8ca:	eb6e 0101 	sbc.w	r1, lr, r1
     8ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     8d2:	d31b      	bcc.n	90c <CONFIG_ISR_STACK_SIZE+0x10c>
     8d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     8d8:	d30c      	bcc.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8da:	0849      	lsrs	r1, r1, #1
     8dc:	ea5f 0030 	movs.w	r0, r0, rrx
     8e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
     8e4:	f104 0401 	add.w	r4, r4, #1
     8e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
     8ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     8f0:	f080 809a 	bcs.w	a28 <CONFIG_ISR_STACK_SIZE+0x228>
     8f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     8f8:	bf08      	it	eq
     8fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8fe:	f150 0000 	adcs.w	r0, r0, #0
     902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     906:	ea41 0105 	orr.w	r1, r1, r5
     90a:	bd30      	pop	{r4, r5, pc}
     90c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     910:	4140      	adcs	r0, r0
     912:	eb41 0101 	adc.w	r1, r1, r1
     916:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     91a:	f1a4 0401 	sub.w	r4, r4, #1
     91e:	d1e9      	bne.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     920:	f091 0f00 	teq	r1, #0
     924:	bf04      	itt	eq
     926:	4601      	moveq	r1, r0
     928:	2000      	moveq	r0, #0
     92a:	fab1 f381 	clz	r3, r1
     92e:	bf08      	it	eq
     930:	3320      	addeq	r3, #32
     932:	f1a3 030b 	sub.w	r3, r3, #11
     936:	f1b3 0220 	subs.w	r2, r3, #32
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     93a:	da0c      	bge.n	956 <CONFIG_ISR_STACK_SIZE+0x156>
     93c:	320c      	adds	r2, #12
     93e:	dd08      	ble.n	952 <CONFIG_ISR_STACK_SIZE+0x152>
     940:	f102 0c14 	add.w	ip, r2, #20
     944:	f1c2 020c 	rsb	r2, r2, #12
     948:	fa01 f00c 	lsl.w	r0, r1, ip
     94c:	fa21 f102 	lsr.w	r1, r1, r2
     950:	e00c      	b.n	96c <CONFIG_ISR_STACK_SIZE+0x16c>
     952:	f102 0214 	add.w	r2, r2, #20
     956:	bfd8      	it	le
     958:	f1c2 0c20 	rsble	ip, r2, #32
     95c:	fa01 f102 	lsl.w	r1, r1, r2
     960:	fa20 fc0c 	lsr.w	ip, r0, ip
     964:	bfdc      	itt	le
     966:	ea41 010c 	orrle.w	r1, r1, ip
     96a:	4090      	lslle	r0, r2
     96c:	1ae4      	subs	r4, r4, r3
     96e:	bfa2      	ittt	ge
     970:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     974:	4329      	orrge	r1, r5
     976:	bd30      	popge	{r4, r5, pc}
     978:	ea6f 0404 	mvn.w	r4, r4
     97c:	3c1f      	subs	r4, #31
     97e:	da1c      	bge.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
     980:	340c      	adds	r4, #12
     982:	dc0e      	bgt.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
     984:	f104 0414 	add.w	r4, r4, #20
     988:	f1c4 0220 	rsb	r2, r4, #32
     98c:	fa20 f004 	lsr.w	r0, r0, r4
     990:	fa01 f302 	lsl.w	r3, r1, r2
     994:	ea40 0003 	orr.w	r0, r0, r3
     998:	fa21 f304 	lsr.w	r3, r1, r4
     99c:	ea45 0103 	orr.w	r1, r5, r3
     9a0:	bd30      	pop	{r4, r5, pc}
     9a2:	f1c4 040c 	rsb	r4, r4, #12
     9a6:	f1c4 0220 	rsb	r2, r4, #32
     9aa:	fa20 f002 	lsr.w	r0, r0, r2
     9ae:	fa01 f304 	lsl.w	r3, r1, r4
     9b2:	ea40 0003 	orr.w	r0, r0, r3
     9b6:	4629      	mov	r1, r5
     9b8:	bd30      	pop	{r4, r5, pc}
     9ba:	fa21 f004 	lsr.w	r0, r1, r4
     9be:	4629      	mov	r1, r5
     9c0:	bd30      	pop	{r4, r5, pc}
     9c2:	f094 0f00 	teq	r4, #0
     9c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     9ca:	bf06      	itte	eq
     9cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     9d0:	3401      	addeq	r4, #1
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     9d2:	3d01      	subne	r5, #1
     9d4:	e74e      	b.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
     9d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     9da:	bf18      	it	ne
     9dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     9e0:	d029      	beq.n	a36 <CONFIG_ISR_STACK_SIZE+0x236>
     9e2:	ea94 0f05 	teq	r4, r5
     9e6:	bf08      	it	eq
     9e8:	ea90 0f02 	teqeq	r0, r2
     9ec:	d005      	beq.n	9fa <CONFIG_ISR_STACK_SIZE+0x1fa>
     9ee:	ea54 0c00 	orrs.w	ip, r4, r0
     9f2:	bf04      	itt	eq
     9f4:	4619      	moveq	r1, r3
     9f6:	4610      	moveq	r0, r2
     9f8:	bd30      	pop	{r4, r5, pc}
     9fa:	ea91 0f03 	teq	r1, r3
     9fe:	bf1e      	ittt	ne
     a00:	2100      	movne	r1, #0
     a02:	2000      	movne	r0, #0
     a04:	bd30      	popne	{r4, r5, pc}
     a06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     a0a:	d105      	bne.n	a18 <CONFIG_ISR_STACK_SIZE+0x218>
     a0c:	0040      	lsls	r0, r0, #1
     a0e:	4149      	adcs	r1, r1
     a10:	bf28      	it	cs
     a12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     a16:	bd30      	pop	{r4, r5, pc}
     a18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     a1c:	bf3c      	itt	cc
     a1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     a22:	bd30      	popcc	{r4, r5, pc}
     a24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     a28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     a2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     a30:	f04f 0000 	mov.w	r0, #0
     a34:	bd30      	pop	{r4, r5, pc}
     a36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     a3a:	bf1a      	itte	ne
     a3c:	4619      	movne	r1, r3
     a3e:	4610      	movne	r0, r2
     a40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     a44:	bf1c      	itt	ne
     a46:	460b      	movne	r3, r1
     a48:	4602      	movne	r2, r0
     a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     a4e:	bf06      	itte	eq
     a50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     a54:	ea91 0f03 	teqeq	r1, r3
     a58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     a5c:	bd30      	pop	{r4, r5, pc}
     a5e:	bf00      	nop

00000a60 <__aeabi_ui2d>:
     a60:	f090 0f00 	teq	r0, #0
     a64:	bf04      	itt	eq
     a66:	2100      	moveq	r1, #0
     a68:	4770      	bxeq	lr
     a6a:	b530      	push	{r4, r5, lr}
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     a6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a70:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a74:	f04f 0500 	mov.w	r5, #0
     a78:	f04f 0100 	mov.w	r1, #0
     a7c:	e750      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     a7e:	bf00      	nop

00000a80 <__aeabi_i2d>:
     a80:	f090 0f00 	teq	r0, #0
     a84:	bf04      	itt	eq
     a86:	2100      	moveq	r1, #0
     a88:	4770      	bxeq	lr
     a8a:	b530      	push	{r4, r5, lr}
     a8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a90:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     a98:	bf48      	it	mi
     a9a:	4240      	negmi	r0, r0
     a9c:	f04f 0100 	mov.w	r1, #0
     aa0:	e73e      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     aa2:	bf00      	nop

00000aa4 <__aeabi_f2d>:
     aa4:	0042      	lsls	r2, r0, #1
     aa6:	ea4f 01e2 	mov.w	r1, r2, asr #3
     aaa:	ea4f 0131 	mov.w	r1, r1, rrx
     aae:	ea4f 7002 	mov.w	r0, r2, lsl #28
     ab2:	bf1f      	itttt	ne
     ab4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     ab8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     abc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     ac0:	4770      	bxne	lr
     ac2:	f092 0f00 	teq	r2, #0
     ac6:	bf14      	ite	ne
     ac8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     acc:	4770      	bxeq	lr
     ace:	b530      	push	{r4, r5, lr}
     ad0:	f44f 7460 	mov.w	r4, #896	; 0x380
     ad4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     ad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     adc:	e720      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     ade:	bf00      	nop

00000ae0 <__aeabi_ul2d>:
     ae0:	ea50 0201 	orrs.w	r2, r0, r1
     ae4:	bf08      	it	eq
     ae6:	4770      	bxeq	lr
     ae8:	b530      	push	{r4, r5, lr}
     aea:	f04f 0500 	mov.w	r5, #0
     aee:	e00a      	b.n	b06 <__aeabi_l2d+0x16>

00000af0 <__aeabi_l2d>:
     af0:	ea50 0201 	orrs.w	r2, r0, r1
     af4:	bf08      	it	eq
     af6:	4770      	bxeq	lr
     af8:	b530      	push	{r4, r5, lr}
     afa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     afe:	d502      	bpl.n	b06 <__aeabi_l2d+0x16>
     b00:	4240      	negs	r0, r0
     b02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     b06:	f44f 6480 	mov.w	r4, #1024	; 0x400
     b0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
     b0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     b12:	f43f aedc 	beq.w	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b16:	f04f 0203 	mov.w	r2, #3
     b1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b1e:	bf18      	it	ne
     b20:	3203      	addne	r2, #3
     b22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b26:	bf18      	it	ne
     b28:	3203      	addne	r2, #3
     b2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     b2e:	f1c2 0320 	rsb	r3, r2, #32
     b32:	fa00 fc03 	lsl.w	ip, r0, r3
     b36:	fa20 f002 	lsr.w	r0, r0, r2
     b3a:	fa01 fe03 	lsl.w	lr, r1, r3
     b3e:	ea40 000e 	orr.w	r0, r0, lr
     b42:	fa21 f102 	lsr.w	r1, r1, r2
     b46:	4414      	add	r4, r2
     b48:	e6c1      	b.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b4a:	bf00      	nop

00000b4c <__aeabi_dmul>:
     b4c:	b570      	push	{r4, r5, r6, lr}
     b4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     b52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     b56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     b5a:	bf1d      	ittte	ne
     b5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     b60:	ea94 0f0c 	teqne	r4, ip
     b64:	ea95 0f0c 	teqne	r5, ip
     b68:	f000 f8de 	bleq	d28 <__aeabi_dmul+0x1dc>
     b6c:	442c      	add	r4, r5
     b6e:	ea81 0603 	eor.w	r6, r1, r3
     b72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     b76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     b7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     b7e:	bf18      	it	ne
     b80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     b84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     b8c:	d038      	beq.n	c00 <__aeabi_dmul+0xb4>
     b8e:	fba0 ce02 	umull	ip, lr, r0, r2
     b92:	f04f 0500 	mov.w	r5, #0
     b96:	fbe1 e502 	umlal	lr, r5, r1, r2
     b9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     b9e:	fbe0 e503 	umlal	lr, r5, r0, r3
	(void)_copy(s, sizeof(t), t, sizeof(t));
     ba2:	f04f 0600 	mov.w	r6, #0
     ba6:	fbe1 5603 	umlal	r5, r6, r1, r3
     baa:	f09c 0f00 	teq	ip, #0
	for (i = Nr - 1; i > 0; --i) {
     bae:	bf18      	it	ne
     bb0:	f04e 0e01 	orrne.w	lr, lr, #1
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     bb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     bb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     bbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     bc0:	d204      	bcs.n	bcc <__aeabi_dmul+0x80>
     bc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     bc6:	416d      	adcs	r5, r5
     bc8:	eb46 0606 	adc.w	r6, r6, r6
     bcc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     bd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     bd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     bd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     bdc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     be0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     be4:	bf88      	it	hi
     be6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     bea:	d81e      	bhi.n	c2a <__aeabi_dmul+0xde>
     bec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     bf0:	bf08      	it	eq
     bf2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     bf6:	f150 0000 	adcs.w	r0, r0, #0
     bfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     bfe:	bd70      	pop	{r4, r5, r6, pc}
     c00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     c04:	ea46 0101 	orr.w	r1, r6, r1
     c08:	ea40 0002 	orr.w	r0, r0, r2
     c0c:	ea81 0103 	eor.w	r1, r1, r3
     c10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     c14:	bfc2      	ittt	gt
     c16:	ebd4 050c 	rsbsgt	r5, r4, ip
     c1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     c1e:	bd70      	popgt	{r4, r5, r6, pc}
     c20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     c24:	f04f 0e00 	mov.w	lr, #0
     c28:	3c01      	subs	r4, #1
     c2a:	f300 80ab 	bgt.w	d84 <__aeabi_dmul+0x238>
     c2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
     c32:	bfde      	ittt	le
	(void)_copy(s, sizeof(t), t, sizeof(t));
     c34:	2000      	movle	r0, #0
     c36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     c3a:	bd70      	pople	{r4, r5, r6, pc}
     c3c:	f1c4 0400 	rsb	r4, r4, #0
     c40:	3c20      	subs	r4, #32
	for (i = 0; i < (Nb*Nk); ++i) {
     c42:	da35      	bge.n	cb0 <__aeabi_dmul+0x164>
     c44:	340c      	adds	r4, #12
     c46:	dc1b      	bgt.n	c80 <__aeabi_dmul+0x134>
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     c48:	f104 0414 	add.w	r4, r4, #20
     c4c:	f1c4 0520 	rsb	r5, r4, #32
     c50:	fa00 f305 	lsl.w	r3, r0, r5
     c54:	fa20 f004 	lsr.w	r0, r0, r4
     c58:	fa01 f205 	lsl.w	r2, r1, r5
     c5c:	ea40 0002 	orr.w	r0, r0, r2
     c60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     c64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     c68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     c6c:	fa21 f604 	lsr.w	r6, r1, r4
     c70:	eb42 0106 	adc.w	r1, r2, r6
     c74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     c78:	bf08      	it	eq
     c7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     c7e:	bd70      	pop	{r4, r5, r6, pc}
     c80:	f1c4 040c 	rsb	r4, r4, #12
     c84:	f1c4 0520 	rsb	r5, r4, #32
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     c88:	fa00 f304 	lsl.w	r3, r0, r4
     c8c:	fa20 f005 	lsr.w	r0, r0, r5
     c90:	fa01 f204 	lsl.w	r2, r1, r4
     c94:	ea40 0002 	orr.w	r0, r0, r2
     c98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     c9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     ca0:	f141 0100 	adc.w	r1, r1, #0
     ca4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     ca8:	bf08      	it	eq
     caa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     cae:	bd70      	pop	{r4, r5, r6, pc}
     cb0:	f1c4 0520 	rsb	r5, r4, #32
     cb4:	fa00 f205 	lsl.w	r2, r0, r5
     cb8:	ea4e 0e02 	orr.w	lr, lr, r2
     cbc:	fa20 f304 	lsr.w	r3, r0, r4
     cc0:	fa01 f205 	lsl.w	r2, r1, r5
     cc4:	ea43 0302 	orr.w	r3, r3, r2
	(void)_copy(s, sizeof(t), t, sizeof(t));
     cc8:	fa21 f004 	lsr.w	r0, r1, r4
     ccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     cd0:	fa21 f204 	lsr.w	r2, r1, r4
     cd4:	ea20 0002 	bic.w	r0, r0, r2
		s[i] = inv_sbox[s[i]];
     cd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     cdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     ce0:	bf08      	it	eq
	for (i = 0; i < (Nb*Nk); ++i) {
     ce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     ce6:	bd70      	pop	{r4, r5, r6, pc}
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     ce8:	f094 0f00 	teq	r4, #0
     cec:	d10f      	bne.n	d0e <__aeabi_dmul+0x1c2>
     cee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     cf2:	0040      	lsls	r0, r0, #1
     cf4:	eb41 0101 	adc.w	r1, r1, r1
     cf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     cfc:	bf08      	it	eq
     cfe:	3c01      	subeq	r4, #1
     d00:	d0f7      	beq.n	cf2 <__aeabi_dmul+0x1a6>
     d02:	ea41 0106 	orr.w	r1, r1, r6
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     d06:	f095 0f00 	teq	r5, #0
     d0a:	bf18      	it	ne
     d0c:	4770      	bxne	lr
     d0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     d12:	0052      	lsls	r2, r2, #1
     d14:	eb43 0303 	adc.w	r3, r3, r3
     d18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     d1c:	bf08      	it	eq
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     d1e:	3d01      	subeq	r5, #1
     d20:	d0f7      	beq.n	d12 <__aeabi_dmul+0x1c6>
     d22:	ea43 0306 	orr.w	r3, r3, r6
     d26:	4770      	bx	lr
     d28:	ea94 0f0c 	teq	r4, ip
     d2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     d30:	bf18      	it	ne
     d32:	ea95 0f0c 	teqne	r5, ip
     d36:	d00c      	beq.n	d52 <__aeabi_dmul+0x206>
     d38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     d3c:	bf18      	it	ne
     d3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d42:	d1d1      	bne.n	ce8 <__aeabi_dmul+0x19c>
     d44:	ea81 0103 	eor.w	r1, r1, r3
     d48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d4c:	f04f 0000 	mov.w	r0, #0
     d50:	bd70      	pop	{r4, r5, r6, pc}
     d52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     d56:	bf06      	itte	eq
     d58:	4610      	moveq	r0, r2
     d5a:	4619      	moveq	r1, r3
     d5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d60:	d019      	beq.n	d96 <__aeabi_dmul+0x24a>
     d62:	ea94 0f0c 	teq	r4, ip
     d66:	d102      	bne.n	d6e <__aeabi_dmul+0x222>
     d68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     d6c:	d113      	bne.n	d96 <__aeabi_dmul+0x24a>
     d6e:	ea95 0f0c 	teq	r5, ip
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     d72:	d105      	bne.n	d80 <__aeabi_dmul+0x234>
     d74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     d78:	bf1c      	itt	ne
     d7a:	4610      	movne	r0, r2
     d7c:	4619      	movne	r1, r3
     d7e:	d10a      	bne.n	d96 <__aeabi_dmul+0x24a>
     d80:	ea81 0103 	eor.w	r1, r1, r3
     d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     d8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     d90:	f04f 0000 	mov.w	r0, #0
     d94:	bd70      	pop	{r4, r5, r6, pc}
     d96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     d9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     d9e:	bd70      	pop	{r4, r5, r6, pc}

00000da0 <__aeabi_ddiv>:
     da0:	b570      	push	{r4, r5, r6, lr}
     da2:	f04f 0cff 	mov.w	ip, #255	; 0xff
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     da6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     daa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     dae:	bf1d      	ittte	ne
     db0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     db4:	ea94 0f0c 	teqne	r4, ip
     db8:	ea95 0f0c 	teqne	r5, ip
     dbc:	f000 f8a7 	bleq	f0e <__aeabi_ddiv+0x16e>

	inv_shift_rows(state);
	inv_sub_bytes(state);
	add_round_key(state, s->words);

	(void)_copy(out, sizeof(state), state, sizeof(state));
     dc0:	eba4 0405 	sub.w	r4, r4, r5
     dc4:	ea81 0e03 	eor.w	lr, r1, r3
     dc8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     dcc:	ea4f 3101 	mov.w	r1, r1, lsl #12

	/*zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
     dd0:	f000 8088 	beq.w	ee4 <__aeabi_ddiv+0x144>
     dd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
     dd8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000


	return TC_CRYPTO_SUCCESS;
}
     ddc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     de0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
		return TC_CRYPTO_FAIL;
     de4:	ea4f 2202 	mov.w	r2, r2, lsl #8
		return TC_CRYPTO_FAIL;
     de8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
		return TC_CRYPTO_FAIL;
     dec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     df0:	ea4f 2600 	mov.w	r6, r0, lsl #8
     df4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     df8:	429d      	cmp	r5, r3
     dfa:	bf08      	it	eq
     dfc:	4296      	cmpeq	r6, r2
     dfe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     e02:	f504 7440 	add.w	r4, r4, #768	; 0x300
     e06:	d202      	bcs.n	e0e <__aeabi_ddiv+0x6e>
     e08:	085b      	lsrs	r3, r3, #1
     e0a:	ea4f 0232 	mov.w	r2, r2, rrx
     e0e:	1ab6      	subs	r6, r6, r2
     e10:	eb65 0503 	sbc.w	r5, r5, r3
     e14:	085b      	lsrs	r3, r3, #1
     e16:	ea4f 0232 	mov.w	r2, r2, rrx
     e1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     e1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     e22:	ebb6 0e02 	subs.w	lr, r6, r2
     e26:	eb75 0e03 	sbcs.w	lr, r5, r3
     e2a:	bf22      	ittt	cs
     e2c:	1ab6      	subcs	r6, r6, r2
     e2e:	4675      	movcs	r5, lr
     e30:	ea40 000c 	orrcs.w	r0, r0, ip
     e34:	085b      	lsrs	r3, r3, #1
     e36:	ea4f 0232 	mov.w	r2, r2, rrx
     e3a:	ebb6 0e02 	subs.w	lr, r6, r2
     e3e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e42:	bf22      	ittt	cs
     e44:	1ab6      	subcs	r6, r6, r2
     e46:	4675      	movcs	r5, lr
     e48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     e4c:	085b      	lsrs	r3, r3, #1
     e4e:	ea4f 0232 	mov.w	r2, r2, rrx
     e52:	ebb6 0e02 	subs.w	lr, r6, r2
     e56:	eb75 0e03 	sbcs.w	lr, r5, r3
     e5a:	bf22      	ittt	cs
     e5c:	1ab6      	subcs	r6, r6, r2
     e5e:	4675      	movcs	r5, lr
     e60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     e64:	085b      	lsrs	r3, r3, #1
     e66:	ea4f 0232 	mov.w	r2, r2, rrx
     e6a:	ebb6 0e02 	subs.w	lr, r6, r2
     e6e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e72:	bf22      	ittt	cs
     e74:	1ab6      	subcs	r6, r6, r2
     e76:	4675      	movcs	r5, lr
     e78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     e7c:	ea55 0e06 	orrs.w	lr, r5, r6
     e80:	d018      	beq.n	eb4 <__aeabi_ddiv+0x114>
     e82:	ea4f 1505 	mov.w	r5, r5, lsl #4
     e86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     e8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
     e8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     e92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     e96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     e9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     e9e:	d1c0      	bne.n	e22 <__aeabi_ddiv+0x82>
     ea0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     ea4:	d10b      	bne.n	ebe <__aeabi_ddiv+0x11e>
     ea6:	ea41 0100 	orr.w	r1, r1, r0
     eaa:	f04f 0000 	mov.w	r0, #0
     eae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     eb2:	e7b6      	b.n	e22 <__aeabi_ddiv+0x82>
     eb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     eb8:	bf04      	itt	eq
     eba:	4301      	orreq	r1, r0
     ebc:	2000      	moveq	r0, #0
     ebe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     ec2:	bf88      	it	hi
     ec4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     ec8:	f63f aeaf 	bhi.w	c2a <__aeabi_dmul+0xde>
     ecc:	ebb5 0c03 	subs.w	ip, r5, r3
     ed0:	bf04      	itt	eq
     ed2:	ebb6 0c02 	subseq.w	ip, r6, r2
     ed6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     eda:	f150 0000 	adcs.w	r0, r0, #0
     ede:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     ee2:	bd70      	pop	{r4, r5, r6, pc}
     ee4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     ee8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     eec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     ef0:	bfc2      	ittt	gt
     ef2:	ebd4 050c 	rsbsgt	r5, r4, ip
     ef6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     efa:	bd70      	popgt	{r4, r5, r6, pc}
     efc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     f00:	f04f 0e00 	mov.w	lr, #0
     f04:	3c01      	subs	r4, #1
     f06:	e690      	b.n	c2a <__aeabi_dmul+0xde>
     f08:	ea45 0e06 	orr.w	lr, r5, r6
     f0c:	e68d      	b.n	c2a <__aeabi_dmul+0xde>
     f0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     f12:	ea94 0f0c 	teq	r4, ip
     f16:	bf08      	it	eq
     f18:	ea95 0f0c 	teqeq	r5, ip
     f1c:	f43f af3b 	beq.w	d96 <__aeabi_dmul+0x24a>
     f20:	ea94 0f0c 	teq	r4, ip
     f24:	d10a      	bne.n	f3c <__aeabi_ddiv+0x19c>
     f26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     f2a:	f47f af34 	bne.w	d96 <__aeabi_dmul+0x24a>
     f2e:	ea95 0f0c 	teq	r5, ip
     f32:	f47f af25 	bne.w	d80 <__aeabi_dmul+0x234>
     f36:	4610      	mov	r0, r2
     f38:	4619      	mov	r1, r3
     f3a:	e72c      	b.n	d96 <__aeabi_dmul+0x24a>
     f3c:	ea95 0f0c 	teq	r5, ip
     f40:	d106      	bne.n	f50 <__aeabi_ddiv+0x1b0>
     f42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     f46:	f43f aefd 	beq.w	d44 <__aeabi_dmul+0x1f8>
     f4a:	4610      	mov	r0, r2
     f4c:	4619      	mov	r1, r3
     f4e:	e722      	b.n	d96 <__aeabi_dmul+0x24a>
     f50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     f54:	bf18      	it	ne
     f56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     f5a:	f47f aec5 	bne.w	ce8 <__aeabi_dmul+0x19c>
     f5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     f62:	f47f af0d 	bne.w	d80 <__aeabi_dmul+0x234>
     f66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     f6a:	f47f aeeb 	bne.w	d44 <__aeabi_dmul+0x1f8>
     f6e:	e712      	b.n	d96 <__aeabi_dmul+0x24a>

00000f70 <__gedf2>:
     f70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     f74:	e006      	b.n	f84 <__cmpdf2+0x4>
     f76:	bf00      	nop

00000f78 <__ledf2>:
     f78:	f04f 0c01 	mov.w	ip, #1
     f7c:	e002      	b.n	f84 <__cmpdf2+0x4>
     f7e:	bf00      	nop

00000f80 <__cmpdf2>:
     f80:	f04f 0c01 	mov.w	ip, #1
     f84:	f84d cd04 	str.w	ip, [sp, #-4]!
     f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     f90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     f94:	bf18      	it	ne
     f96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     f9a:	d01b      	beq.n	fd4 <__cmpdf2+0x54>
     f9c:	b001      	add	sp, #4
     f9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     fa2:	bf0c      	ite	eq
     fa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     fa8:	ea91 0f03 	teqne	r1, r3
     fac:	bf02      	ittt	eq
     fae:	ea90 0f02 	teqeq	r0, r2
     fb2:	2000      	moveq	r0, #0
     fb4:	4770      	bxeq	lr
     fb6:	f110 0f00 	cmn.w	r0, #0
     fba:	ea91 0f03 	teq	r1, r3
     fbe:	bf58      	it	pl
     fc0:	4299      	cmppl	r1, r3
     fc2:	bf08      	it	eq
     fc4:	4290      	cmpeq	r0, r2
     fc6:	bf2c      	ite	cs
     fc8:	17d8      	asrcs	r0, r3, #31
     fca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     fce:	f040 0001 	orr.w	r0, r0, #1
     fd2:	4770      	bx	lr
     fd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fdc:	d102      	bne.n	fe4 <__cmpdf2+0x64>
     fde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     fe2:	d107      	bne.n	ff4 <__cmpdf2+0x74>
     fe4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fec:	d1d6      	bne.n	f9c <__cmpdf2+0x1c>
     fee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     ff2:	d0d3      	beq.n	f9c <__cmpdf2+0x1c>
     ff4:	f85d 0b04 	ldr.w	r0, [sp], #4
     ff8:	4770      	bx	lr
     ffa:	bf00      	nop

00000ffc <__aeabi_cdrcmple>:
     ffc:	4684      	mov	ip, r0
     ffe:	4610      	mov	r0, r2
    1000:	4662      	mov	r2, ip
    1002:	468c      	mov	ip, r1
    1004:	4619      	mov	r1, r3
    1006:	4663      	mov	r3, ip
    1008:	e000      	b.n	100c <__aeabi_cdcmpeq>
    100a:	bf00      	nop

0000100c <__aeabi_cdcmpeq>:
    100c:	b501      	push	{r0, lr}
    100e:	f7ff ffb7 	bl	f80 <__cmpdf2>
    1012:	2800      	cmp	r0, #0
    1014:	bf48      	it	mi
    1016:	f110 0f00 	cmnmi.w	r0, #0
    101a:	bd01      	pop	{r0, pc}

0000101c <__aeabi_dcmpeq>:
    101c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1020:	f7ff fff4 	bl	100c <__aeabi_cdcmpeq>
    1024:	bf0c      	ite	eq
    1026:	2001      	moveq	r0, #1
    1028:	2000      	movne	r0, #0
    102a:	f85d fb08 	ldr.w	pc, [sp], #8
    102e:	bf00      	nop

00001030 <__aeabi_dcmplt>:
    1030:	f84d ed08 	str.w	lr, [sp, #-8]!
    1034:	f7ff ffea 	bl	100c <__aeabi_cdcmpeq>
    1038:	bf34      	ite	cc
    103a:	2001      	movcc	r0, #1
    103c:	2000      	movcs	r0, #0
    103e:	f85d fb08 	ldr.w	pc, [sp], #8
    1042:	bf00      	nop

00001044 <__aeabi_dcmple>:
    1044:	f84d ed08 	str.w	lr, [sp, #-8]!
    1048:	f7ff ffe0 	bl	100c <__aeabi_cdcmpeq>
    104c:	bf94      	ite	ls
    104e:	2001      	movls	r0, #1
    1050:	2000      	movhi	r0, #0
    1052:	f85d fb08 	ldr.w	pc, [sp], #8
    1056:	bf00      	nop

00001058 <__aeabi_dcmpge>:
    1058:	f84d ed08 	str.w	lr, [sp, #-8]!
    105c:	f7ff ffce 	bl	ffc <__aeabi_cdrcmple>
    1060:	bf94      	ite	ls
    1062:	2001      	movls	r0, #1
    1064:	2000      	movhi	r0, #0
    1066:	f85d fb08 	ldr.w	pc, [sp], #8
    106a:	bf00      	nop

0000106c <__aeabi_dcmpgt>:
    106c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1070:	f7ff ffc4 	bl	ffc <__aeabi_cdrcmple>
    1074:	bf34      	ite	cc
    1076:	2001      	movcc	r0, #1
    1078:	2000      	movcs	r0, #0
    107a:	f85d fb08 	ldr.w	pc, [sp], #8
    107e:	bf00      	nop

00001080 <__aeabi_dcmpun>:
    1080:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1084:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1088:	d102      	bne.n	1090 <__aeabi_dcmpun+0x10>
    108a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    108e:	d10a      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    1090:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1098:	d102      	bne.n	10a0 <__aeabi_dcmpun+0x20>
    109a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    109e:	d102      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    10a0:	f04f 0000 	mov.w	r0, #0
    10a4:	4770      	bx	lr
    10a6:	f04f 0001 	mov.w	r0, #1
    10aa:	4770      	bx	lr

000010ac <__aeabi_d2iz>:
    10ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
    10b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    10b4:	d215      	bcs.n	10e2 <__aeabi_d2iz+0x36>
    10b6:	d511      	bpl.n	10dc <__aeabi_d2iz+0x30>
    10b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    10bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    10c0:	d912      	bls.n	10e8 <__aeabi_d2iz+0x3c>
    10c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    10c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    10ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    10ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    10d2:	fa23 f002 	lsr.w	r0, r3, r2
    10d6:	bf18      	it	ne
    10d8:	4240      	negne	r0, r0
    10da:	4770      	bx	lr
    10dc:	f04f 0000 	mov.w	r0, #0
    10e0:	4770      	bx	lr
    10e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    10e6:	d105      	bne.n	10f4 <__aeabi_d2iz+0x48>
    10e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    10ec:	bf08      	it	eq
    10ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    10f2:	4770      	bx	lr
    10f4:	f04f 0000 	mov.w	r0, #0
    10f8:	4770      	bx	lr
    10fa:	bf00      	nop

000010fc <__aeabi_uldivmod>:
    10fc:	b953      	cbnz	r3, 1114 <__aeabi_uldivmod+0x18>
    10fe:	b94a      	cbnz	r2, 1114 <__aeabi_uldivmod+0x18>
    1100:	2900      	cmp	r1, #0
    1102:	bf08      	it	eq
    1104:	2800      	cmpeq	r0, #0
    1106:	bf1c      	itt	ne
    1108:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    110c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1110:	f000 b98e 	b.w	1430 <__aeabi_idiv0>
    1114:	f1ad 0c08 	sub.w	ip, sp, #8
    1118:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    111c:	f000 f81a 	bl	1154 <__udivmoddi4>
    1120:	f8dd e004 	ldr.w	lr, [sp, #4]
    1124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1128:	b004      	add	sp, #16
    112a:	4770      	bx	lr

0000112c <__popcountsi2>:
    112c:	0843      	lsrs	r3, r0, #1
    112e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
    1132:	1ac0      	subs	r0, r0, r3
    1134:	0883      	lsrs	r3, r0, #2
    1136:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
    113a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
    113e:	4418      	add	r0, r3
    1140:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    1144:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
    1148:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    114c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
    1150:	0e00      	lsrs	r0, r0, #24
    1152:	4770      	bx	lr

00001154 <__udivmoddi4>:
    1154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1158:	468c      	mov	ip, r1
    115a:	460d      	mov	r5, r1
    115c:	4604      	mov	r4, r0
    115e:	9e08      	ldr	r6, [sp, #32]
    1160:	2b00      	cmp	r3, #0
    1162:	d151      	bne.n	1208 <__udivmoddi4+0xb4>
    1164:	428a      	cmp	r2, r1
    1166:	4617      	mov	r7, r2
    1168:	d96d      	bls.n	1246 <__udivmoddi4+0xf2>
    116a:	fab2 fe82 	clz	lr, r2
    116e:	f1be 0f00 	cmp.w	lr, #0
    1172:	d00b      	beq.n	118c <__udivmoddi4+0x38>
    1174:	f1ce 0c20 	rsb	ip, lr, #32
    1178:	fa01 f50e 	lsl.w	r5, r1, lr
    117c:	fa20 fc0c 	lsr.w	ip, r0, ip
    1180:	fa02 f70e 	lsl.w	r7, r2, lr
    1184:	ea4c 0c05 	orr.w	ip, ip, r5
    1188:	fa00 f40e 	lsl.w	r4, r0, lr
    118c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    1190:	0c25      	lsrs	r5, r4, #16
    1192:	fbbc f8fa 	udiv	r8, ip, sl
    1196:	fa1f f987 	uxth.w	r9, r7
    119a:	fb0a cc18 	mls	ip, sl, r8, ip
    119e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    11a2:	fb08 f309 	mul.w	r3, r8, r9
    11a6:	42ab      	cmp	r3, r5
    11a8:	d90a      	bls.n	11c0 <__udivmoddi4+0x6c>
    11aa:	19ed      	adds	r5, r5, r7
    11ac:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    11b0:	f080 8123 	bcs.w	13fa <__udivmoddi4+0x2a6>
    11b4:	42ab      	cmp	r3, r5
    11b6:	f240 8120 	bls.w	13fa <__udivmoddi4+0x2a6>
    11ba:	f1a8 0802 	sub.w	r8, r8, #2
    11be:	443d      	add	r5, r7
    11c0:	1aed      	subs	r5, r5, r3
    11c2:	b2a4      	uxth	r4, r4
    11c4:	fbb5 f0fa 	udiv	r0, r5, sl
    11c8:	fb0a 5510 	mls	r5, sl, r0, r5
    11cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    11d0:	fb00 f909 	mul.w	r9, r0, r9
    11d4:	45a1      	cmp	r9, r4
    11d6:	d909      	bls.n	11ec <__udivmoddi4+0x98>
    11d8:	19e4      	adds	r4, r4, r7
    11da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    11de:	f080 810a 	bcs.w	13f6 <__udivmoddi4+0x2a2>
    11e2:	45a1      	cmp	r9, r4
    11e4:	f240 8107 	bls.w	13f6 <__udivmoddi4+0x2a2>
    11e8:	3802      	subs	r0, #2
    11ea:	443c      	add	r4, r7
    11ec:	eba4 0409 	sub.w	r4, r4, r9
    11f0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    11f4:	2100      	movs	r1, #0
    11f6:	2e00      	cmp	r6, #0
    11f8:	d061      	beq.n	12be <__udivmoddi4+0x16a>
    11fa:	fa24 f40e 	lsr.w	r4, r4, lr
    11fe:	2300      	movs	r3, #0
    1200:	6034      	str	r4, [r6, #0]
    1202:	6073      	str	r3, [r6, #4]
    1204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1208:	428b      	cmp	r3, r1
    120a:	d907      	bls.n	121c <__udivmoddi4+0xc8>
    120c:	2e00      	cmp	r6, #0
    120e:	d054      	beq.n	12ba <__udivmoddi4+0x166>
    1210:	2100      	movs	r1, #0
    1212:	e886 0021 	stmia.w	r6, {r0, r5}
    1216:	4608      	mov	r0, r1
    1218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    121c:	fab3 f183 	clz	r1, r3
    1220:	2900      	cmp	r1, #0
    1222:	f040 808e 	bne.w	1342 <__udivmoddi4+0x1ee>
    1226:	42ab      	cmp	r3, r5
    1228:	d302      	bcc.n	1230 <__udivmoddi4+0xdc>
    122a:	4282      	cmp	r2, r0
    122c:	f200 80fa 	bhi.w	1424 <__udivmoddi4+0x2d0>
    1230:	1a84      	subs	r4, r0, r2
    1232:	eb65 0503 	sbc.w	r5, r5, r3
    1236:	2001      	movs	r0, #1
    1238:	46ac      	mov	ip, r5
    123a:	2e00      	cmp	r6, #0
    123c:	d03f      	beq.n	12be <__udivmoddi4+0x16a>
    123e:	e886 1010 	stmia.w	r6, {r4, ip}
    1242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1246:	b912      	cbnz	r2, 124e <__udivmoddi4+0xfa>
    1248:	2701      	movs	r7, #1
    124a:	fbb7 f7f2 	udiv	r7, r7, r2
    124e:	fab7 fe87 	clz	lr, r7
    1252:	f1be 0f00 	cmp.w	lr, #0
    1256:	d134      	bne.n	12c2 <__udivmoddi4+0x16e>
    1258:	1beb      	subs	r3, r5, r7
    125a:	0c3a      	lsrs	r2, r7, #16
    125c:	fa1f fc87 	uxth.w	ip, r7
    1260:	2101      	movs	r1, #1
    1262:	fbb3 f8f2 	udiv	r8, r3, r2
    1266:	0c25      	lsrs	r5, r4, #16
    1268:	fb02 3318 	mls	r3, r2, r8, r3
    126c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1270:	fb0c f308 	mul.w	r3, ip, r8
    1274:	42ab      	cmp	r3, r5
    1276:	d907      	bls.n	1288 <__udivmoddi4+0x134>
    1278:	19ed      	adds	r5, r5, r7
    127a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    127e:	d202      	bcs.n	1286 <__udivmoddi4+0x132>
    1280:	42ab      	cmp	r3, r5
    1282:	f200 80d1 	bhi.w	1428 <__udivmoddi4+0x2d4>
    1286:	4680      	mov	r8, r0
    1288:	1aed      	subs	r5, r5, r3
    128a:	b2a3      	uxth	r3, r4
    128c:	fbb5 f0f2 	udiv	r0, r5, r2
    1290:	fb02 5510 	mls	r5, r2, r0, r5
    1294:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    1298:	fb0c fc00 	mul.w	ip, ip, r0
    129c:	45a4      	cmp	ip, r4
    129e:	d907      	bls.n	12b0 <__udivmoddi4+0x15c>
    12a0:	19e4      	adds	r4, r4, r7
    12a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    12a6:	d202      	bcs.n	12ae <__udivmoddi4+0x15a>
    12a8:	45a4      	cmp	ip, r4
    12aa:	f200 80b8 	bhi.w	141e <__udivmoddi4+0x2ca>
    12ae:	4618      	mov	r0, r3
    12b0:	eba4 040c 	sub.w	r4, r4, ip
    12b4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    12b8:	e79d      	b.n	11f6 <__udivmoddi4+0xa2>
    12ba:	4631      	mov	r1, r6
    12bc:	4630      	mov	r0, r6
    12be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12c2:	f1ce 0420 	rsb	r4, lr, #32
    12c6:	fa05 f30e 	lsl.w	r3, r5, lr
    12ca:	fa07 f70e 	lsl.w	r7, r7, lr
    12ce:	fa20 f804 	lsr.w	r8, r0, r4
    12d2:	0c3a      	lsrs	r2, r7, #16
    12d4:	fa25 f404 	lsr.w	r4, r5, r4
    12d8:	ea48 0803 	orr.w	r8, r8, r3
    12dc:	fbb4 f1f2 	udiv	r1, r4, r2
    12e0:	ea4f 4518 	mov.w	r5, r8, lsr #16
    12e4:	fb02 4411 	mls	r4, r2, r1, r4
    12e8:	fa1f fc87 	uxth.w	ip, r7
    12ec:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    12f0:	fb01 f30c 	mul.w	r3, r1, ip
    12f4:	42ab      	cmp	r3, r5
    12f6:	fa00 f40e 	lsl.w	r4, r0, lr
    12fa:	d909      	bls.n	1310 <__udivmoddi4+0x1bc>
    12fc:	19ed      	adds	r5, r5, r7
    12fe:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
    1302:	f080 808a 	bcs.w	141a <__udivmoddi4+0x2c6>
    1306:	42ab      	cmp	r3, r5
    1308:	f240 8087 	bls.w	141a <__udivmoddi4+0x2c6>
    130c:	3902      	subs	r1, #2
    130e:	443d      	add	r5, r7
    1310:	1aeb      	subs	r3, r5, r3
    1312:	fa1f f588 	uxth.w	r5, r8
    1316:	fbb3 f0f2 	udiv	r0, r3, r2
    131a:	fb02 3310 	mls	r3, r2, r0, r3
    131e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1322:	fb00 f30c 	mul.w	r3, r0, ip
    1326:	42ab      	cmp	r3, r5
    1328:	d907      	bls.n	133a <__udivmoddi4+0x1e6>
    132a:	19ed      	adds	r5, r5, r7
    132c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    1330:	d26f      	bcs.n	1412 <__udivmoddi4+0x2be>
    1332:	42ab      	cmp	r3, r5
    1334:	d96d      	bls.n	1412 <__udivmoddi4+0x2be>
    1336:	3802      	subs	r0, #2
    1338:	443d      	add	r5, r7
    133a:	1aeb      	subs	r3, r5, r3
    133c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    1340:	e78f      	b.n	1262 <__udivmoddi4+0x10e>
    1342:	f1c1 0720 	rsb	r7, r1, #32
    1346:	fa22 f807 	lsr.w	r8, r2, r7
    134a:	408b      	lsls	r3, r1
    134c:	fa05 f401 	lsl.w	r4, r5, r1
    1350:	ea48 0303 	orr.w	r3, r8, r3
    1354:	fa20 fe07 	lsr.w	lr, r0, r7
    1358:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    135c:	40fd      	lsrs	r5, r7
    135e:	ea4e 0e04 	orr.w	lr, lr, r4
    1362:	fbb5 f9fc 	udiv	r9, r5, ip
    1366:	ea4f 441e 	mov.w	r4, lr, lsr #16
    136a:	fb0c 5519 	mls	r5, ip, r9, r5
    136e:	fa1f f883 	uxth.w	r8, r3
    1372:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    1376:	fb09 f408 	mul.w	r4, r9, r8
    137a:	42ac      	cmp	r4, r5
    137c:	fa02 f201 	lsl.w	r2, r2, r1
    1380:	fa00 fa01 	lsl.w	sl, r0, r1
    1384:	d908      	bls.n	1398 <__udivmoddi4+0x244>
    1386:	18ed      	adds	r5, r5, r3
    1388:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    138c:	d243      	bcs.n	1416 <__udivmoddi4+0x2c2>
    138e:	42ac      	cmp	r4, r5
    1390:	d941      	bls.n	1416 <__udivmoddi4+0x2c2>
    1392:	f1a9 0902 	sub.w	r9, r9, #2
    1396:	441d      	add	r5, r3
    1398:	1b2d      	subs	r5, r5, r4
    139a:	fa1f fe8e 	uxth.w	lr, lr
    139e:	fbb5 f0fc 	udiv	r0, r5, ip
    13a2:	fb0c 5510 	mls	r5, ip, r0, r5
    13a6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    13aa:	fb00 f808 	mul.w	r8, r0, r8
    13ae:	45a0      	cmp	r8, r4
    13b0:	d907      	bls.n	13c2 <__udivmoddi4+0x26e>
    13b2:	18e4      	adds	r4, r4, r3
    13b4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
    13b8:	d229      	bcs.n	140e <__udivmoddi4+0x2ba>
    13ba:	45a0      	cmp	r8, r4
    13bc:	d927      	bls.n	140e <__udivmoddi4+0x2ba>
    13be:	3802      	subs	r0, #2
    13c0:	441c      	add	r4, r3
    13c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    13c6:	eba4 0408 	sub.w	r4, r4, r8
    13ca:	fba0 8902 	umull	r8, r9, r0, r2
    13ce:	454c      	cmp	r4, r9
    13d0:	46c6      	mov	lr, r8
    13d2:	464d      	mov	r5, r9
    13d4:	d315      	bcc.n	1402 <__udivmoddi4+0x2ae>
    13d6:	d012      	beq.n	13fe <__udivmoddi4+0x2aa>
    13d8:	b156      	cbz	r6, 13f0 <__udivmoddi4+0x29c>
    13da:	ebba 030e 	subs.w	r3, sl, lr
    13de:	eb64 0405 	sbc.w	r4, r4, r5
    13e2:	fa04 f707 	lsl.w	r7, r4, r7
    13e6:	40cb      	lsrs	r3, r1
    13e8:	431f      	orrs	r7, r3
    13ea:	40cc      	lsrs	r4, r1
    13ec:	6037      	str	r7, [r6, #0]
    13ee:	6074      	str	r4, [r6, #4]
    13f0:	2100      	movs	r1, #0
    13f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13f6:	4618      	mov	r0, r3
    13f8:	e6f8      	b.n	11ec <__udivmoddi4+0x98>
    13fa:	4690      	mov	r8, r2
    13fc:	e6e0      	b.n	11c0 <__udivmoddi4+0x6c>
    13fe:	45c2      	cmp	sl, r8
    1400:	d2ea      	bcs.n	13d8 <__udivmoddi4+0x284>
    1402:	ebb8 0e02 	subs.w	lr, r8, r2
    1406:	eb69 0503 	sbc.w	r5, r9, r3
    140a:	3801      	subs	r0, #1
    140c:	e7e4      	b.n	13d8 <__udivmoddi4+0x284>
    140e:	4628      	mov	r0, r5
    1410:	e7d7      	b.n	13c2 <__udivmoddi4+0x26e>
    1412:	4640      	mov	r0, r8
    1414:	e791      	b.n	133a <__udivmoddi4+0x1e6>
    1416:	4681      	mov	r9, r0
    1418:	e7be      	b.n	1398 <__udivmoddi4+0x244>
    141a:	4601      	mov	r1, r0
    141c:	e778      	b.n	1310 <__udivmoddi4+0x1bc>
    141e:	3802      	subs	r0, #2
    1420:	443c      	add	r4, r7
    1422:	e745      	b.n	12b0 <__udivmoddi4+0x15c>
    1424:	4608      	mov	r0, r1
    1426:	e708      	b.n	123a <__udivmoddi4+0xe6>
    1428:	f1a8 0802 	sub.w	r8, r8, #2
    142c:	443d      	add	r5, r7
    142e:	e72b      	b.n	1288 <__udivmoddi4+0x134>

00001430 <__aeabi_idiv0>:
    1430:	4770      	bx	lr
    1432:	bf00      	nop

00001434 <publish_cb>:
 * unknown pkt_id, this routine must return an error, for example -EINVAL or
 * any negative value.
 */
static int publish_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_id,
		      enum mqtt_packet type)
{
    1434:	b530      	push	{r4, r5, lr}
    1436:	b083      	sub	sp, #12
    1438:	4605      	mov	r5, r0
	const char *str;
	int rc = 0;

	client_ctx = CONTAINER_OF(mqtt_ctx, struct mqtt_client_ctx, mqtt_ctx);

	switch (type) {
    143a:	2a05      	cmp	r2, #5
    143c:	d01b      	beq.n	1476 <publish_cb+0x42>
    143e:	2a07      	cmp	r2, #7
    1440:	d01c      	beq.n	147c <publish_cb+0x48>
    1442:	2a04      	cmp	r2, #4
    1444:	d003      	beq.n	144e <publish_cb+0x1a>
		break;
	case MQTT_PUBREC:
		str = "MQTT_PUBREC";
		break;
	default:
		rc = -EINVAL;
    1446:	f06f 0415 	mvn.w	r4, #21
		str = "Invalid MQTT packet";
    144a:	4b0e      	ldr	r3, [pc, #56]	; (1484 <publish_cb+0x50>)
    144c:	e001      	b.n	1452 <publish_cb+0x1e>
	int rc = 0;
    144e:	2400      	movs	r4, #0
		str = "MQTT_PUBACK";
    1450:	4b0d      	ldr	r3, [pc, #52]	; (1488 <publish_cb+0x54>)
	}

	printk("[%s:%d] <%s> packet id: %u", __func__, __LINE__, str, pkt_id);
    1452:	9100      	str	r1, [sp, #0]
    1454:	22c4      	movs	r2, #196	; 0xc4
    1456:	490d      	ldr	r1, [pc, #52]	; (148c <publish_cb+0x58>)
    1458:	480d      	ldr	r0, [pc, #52]	; (1490 <publish_cb+0x5c>)
    145a:	f001 fd41 	bl	2ee0 <printk>

	if (client_ctx->publish_data) {
    145e:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
    1462:	b111      	cbz	r1, 146a <publish_cb+0x36>
		printk(", user_data: %s",
    1464:	480b      	ldr	r0, [pc, #44]	; (1494 <publish_cb+0x60>)
    1466:	f001 fd3b 	bl	2ee0 <printk>
		       (const char *)client_ctx->publish_data);
	}

	printk("\n");
    146a:	480b      	ldr	r0, [pc, #44]	; (1498 <publish_cb+0x64>)
    146c:	f001 fd38 	bl	2ee0 <printk>

	return rc;
}
    1470:	4620      	mov	r0, r4
    1472:	b003      	add	sp, #12
    1474:	bd30      	pop	{r4, r5, pc}
	int rc = 0;
    1476:	2400      	movs	r4, #0
		str = "MQTT_PUBREC";
    1478:	4b08      	ldr	r3, [pc, #32]	; (149c <publish_cb+0x68>)
		break;
    147a:	e7ea      	b.n	1452 <publish_cb+0x1e>
	int rc = 0;
    147c:	2400      	movs	r4, #0
		str = "MQTT_PUBCOMP";
    147e:	4b08      	ldr	r3, [pc, #32]	; (14a0 <publish_cb+0x6c>)
    1480:	e7e7      	b.n	1452 <publish_cb+0x1e>
    1482:	bf00      	nop
    1484:	0002f304 	.word	0x0002f304
    1488:	0002f2dc 	.word	0x0002f2dc
    148c:	0002dae0 	.word	0x0002dae0
    1490:	0002f318 	.word	0x0002f318
    1494:	0002f334 	.word	0x0002f334
    1498:	00030654 	.word	0x00030654
    149c:	0002f2f8 	.word	0x0002f2f8
    14a0:	0002f2e8 	.word	0x0002f2e8

000014a4 <malformed_cb>:
/**
 * The signature of this routine must match the malformed callback declared at
 * the mqtt.h header.
 */
static void malformed_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_type)
{
    14a4:	b508      	push	{r3, lr}
	printk("[%s:%d] pkt_type: %u\n", __func__, __LINE__, pkt_type);
    14a6:	460b      	mov	r3, r1
    14a8:	22d6      	movs	r2, #214	; 0xd6
    14aa:	4902      	ldr	r1, [pc, #8]	; (14b4 <malformed_cb+0x10>)
    14ac:	4802      	ldr	r0, [pc, #8]	; (14b8 <malformed_cb+0x14>)
    14ae:	f001 fd17 	bl	2ee0 <printk>
    14b2:	bd08      	pop	{r3, pc}
    14b4:	0002daec 	.word	0x0002daec
    14b8:	0002db3c 	.word	0x0002db3c

000014bc <disconnect_cb>:
{
    14bc:	b510      	push	{r4, lr}
    14be:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    14c0:	2295      	movs	r2, #149	; 0x95
    14c2:	4907      	ldr	r1, [pc, #28]	; (14e0 <disconnect_cb+0x24>)
    14c4:	4807      	ldr	r0, [pc, #28]	; (14e4 <disconnect_cb+0x28>)
    14c6:	f001 fd0b 	bl	2ee0 <printk>
	if (client_ctx->disconnect_data) {
    14ca:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    14ce:	b111      	cbz	r1, 14d6 <disconnect_cb+0x1a>
		printk(" user_data: %s",
    14d0:	4805      	ldr	r0, [pc, #20]	; (14e8 <disconnect_cb+0x2c>)
    14d2:	f001 fd05 	bl	2ee0 <printk>
	printk("\n");
    14d6:	4805      	ldr	r0, [pc, #20]	; (14ec <disconnect_cb+0x30>)
    14d8:	f001 fd02 	bl	2ee0 <printk>
    14dc:	bd10      	pop	{r4, pc}
    14de:	bf00      	nop
    14e0:	0002dad0 	.word	0x0002dad0
    14e4:	0002db10 	.word	0x0002db10
    14e8:	0002db18 	.word	0x0002db18
    14ec:	00030654 	.word	0x00030654

000014f0 <connect_cb>:
{
    14f0:	b510      	push	{r4, lr}
    14f2:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    14f4:	2282      	movs	r2, #130	; 0x82
    14f6:	4907      	ldr	r1, [pc, #28]	; (1514 <connect_cb+0x24>)
    14f8:	4807      	ldr	r0, [pc, #28]	; (1518 <connect_cb+0x28>)
    14fa:	f001 fcf1 	bl	2ee0 <printk>
	if (client_ctx->connect_data) {
    14fe:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    1502:	b111      	cbz	r1, 150a <connect_cb+0x1a>
		printk(" user_data: %s",
    1504:	4805      	ldr	r0, [pc, #20]	; (151c <connect_cb+0x2c>)
    1506:	f001 fceb 	bl	2ee0 <printk>
	printk("\n");
    150a:	4805      	ldr	r0, [pc, #20]	; (1520 <connect_cb+0x30>)
    150c:	f001 fce8 	bl	2ee0 <printk>
    1510:	bd10      	pop	{r4, pc}
    1512:	bf00      	nop
    1514:	0002dac4 	.word	0x0002dac4
    1518:	0002db10 	.word	0x0002db10
    151c:	0002db18 	.word	0x0002db18
    1520:	00030654 	.word	0x00030654

00001524 <message_thread>:
{
    1524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (int arr_index = 0; arr_index < NUM_MESSAGES; arr_index++) {
    1526:	2400      	movs	r4, #0
	uint32_t nanoseconds_spent = 0;
    1528:	4625      	mov	r5, r4
	for (int arr_index = 0; arr_index < NUM_MESSAGES; arr_index++) {
    152a:	e041      	b.n	15b0 <message_thread+0x8c>

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_OBJECT_ACCESS_REVOKE, k_object_access_revoke, void *, object, struct k_thread *, thread);

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    152c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1530:	f026 ffc0 	bl	284b4 <_impl_k_sleep>
		start_time = k_cycle_get_32();
    1534:	f000 ffb0 	bl	2498 <_timer_cycle_get_32>
    1538:	4606      	mov	r6, r0

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex);

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    153a:	4f21      	ldr	r7, [pc, #132]	; (15c0 <message_thread+0x9c>)
    153c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1540:	4638      	mov	r0, r7
    1542:	f026 f8d3 	bl	276ec <_impl_k_mutex_lock>
		curr_msg = messages_5[arr_index];
    1546:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    154a:	005a      	lsls	r2, r3, #1
    154c:	4b1d      	ldr	r3, [pc, #116]	; (15c4 <message_thread+0xa0>)
    154e:	4413      	add	r3, r2
    1550:	4a1d      	ldr	r2, [pc, #116]	; (15c8 <message_thread+0xa4>)
    1552:	6013      	str	r3, [r2, #0]
		message_changed = true;
    1554:	2201      	movs	r2, #1
    1556:	4b1d      	ldr	r3, [pc, #116]	; (15cc <message_thread+0xa8>)
    1558:	701a      	strb	r2, [r3, #0]

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    155a:	4638      	mov	r0, r7
    155c:	f026 f930 	bl	277c0 <_impl_k_mutex_unlock>

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1560:	481b      	ldr	r0, [pc, #108]	; (15d0 <message_thread+0xac>)
    1562:	f027 f8e6 	bl	28732 <_impl_k_sem_give>
		stop_time = k_cycle_get_32();
    1566:	f000 ff97 	bl	2498 <_timer_cycle_get_32>
		cycles_spent = stop_time - start_time;
    156a:	1b81      	subs	r1, r0, r6
		nanoseconds_spent = nanoseconds_spent + SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent);
    156c:	4b19      	ldr	r3, [pc, #100]	; (15d4 <message_thread+0xb0>)
    156e:	681a      	ldr	r2, [r3, #0]
    1570:	17d7      	asrs	r7, r2, #31
    1572:	fba2 2301 	umull	r2, r3, r2, r1
    1576:	fb01 3307 	mla	r3, r1, r7, r3
    157a:	015e      	lsls	r6, r3, #5
    157c:	0150      	lsls	r0, r2, #5
    157e:	ea46 61d2 	orr.w	r1, r6, r2, lsr #27
    1582:	1a80      	subs	r0, r0, r2
    1584:	eb61 0103 	sbc.w	r1, r1, r3
    1588:	008e      	lsls	r6, r1, #2
    158a:	ea46 7690 	orr.w	r6, r6, r0, lsr #30
    158e:	0087      	lsls	r7, r0, #2
    1590:	18b8      	adds	r0, r7, r2
    1592:	eb46 0103 	adc.w	r1, r6, r3
    1596:	00cb      	lsls	r3, r1, #3
    1598:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    159c:	00c2      	lsls	r2, r0, #3
    159e:	4610      	mov	r0, r2
    15a0:	4619      	mov	r1, r3
    15a2:	4b0d      	ldr	r3, [pc, #52]	; (15d8 <message_thread+0xb4>)
    15a4:	681a      	ldr	r2, [r3, #0]
    15a6:	17d3      	asrs	r3, r2, #31
    15a8:	f7ff fda8 	bl	10fc <__aeabi_uldivmod>
    15ac:	4405      	add	r5, r0
	for (int arr_index = 0; arr_index < NUM_MESSAGES; arr_index++) {
    15ae:	3401      	adds	r4, #1
    15b0:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
    15b4:	dbba      	blt.n	152c <message_thread+0x8>
	printk("Time spent:%" PRIu32, nanoseconds_spent);
    15b6:	4629      	mov	r1, r5
    15b8:	4808      	ldr	r0, [pc, #32]	; (15dc <message_thread+0xb8>)
    15ba:	f001 fc91 	bl	2ee0 <printk>
    15be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15c0:	2000cfd0 	.word	0x2000cfd0
    15c4:	0002db64 	.word	0x0002db64
    15c8:	2000b760 	.word	0x2000b760
    15cc:	2000000c 	.word	0x2000000c
    15d0:	2000cf5c 	.word	0x2000cf5c
    15d4:	2000c478 	.word	0x2000c478
    15d8:	2000c474 	.word	0x2000c474
    15dc:	0002db54 	.word	0x0002db54

000015e0 <get_message_payload>:
}

static char *get_message_payload(enum mqtt_qos qos) 
{
    15e0:	b510      	push	{r4, lr}
	static char payload[128];
	snprintf(payload, sizeof(payload), "{\"message\":\"%s\"}", curr_msg);
    15e2:	4c05      	ldr	r4, [pc, #20]	; (15f8 <get_message_payload+0x18>)
    15e4:	4b05      	ldr	r3, [pc, #20]	; (15fc <get_message_payload+0x1c>)
    15e6:	681b      	ldr	r3, [r3, #0]
    15e8:	4a05      	ldr	r2, [pc, #20]	; (1600 <get_message_payload+0x20>)
    15ea:	2180      	movs	r1, #128	; 0x80
    15ec:	4620      	mov	r0, r4
    15ee:	f028 f8c1 	bl	29774 <snprintf>
	return payload;
}
    15f2:	4620      	mov	r0, r4
    15f4:	bd10      	pop	{r4, pc}
    15f6:	bf00      	nop
    15f8:	20000010 	.word	0x20000010
    15fc:	2000b760 	.word	0x2000b760
    1600:	0002db28 	.word	0x0002db28

00001604 <prepare_msg>:

static void prepare_msg(struct mqtt_publish_msg *pub_msg,
				     enum mqtt_qos qos)
{
    1604:	b538      	push	{r3, r4, r5, lr}
    1606:	4604      	mov	r4, r0
    1608:	460d      	mov	r5, r1
	/* MQTT message payload may be anything, we we use C strings */
	pub_msg->msg = get_message_payload(qos);
    160a:	4608      	mov	r0, r1
    160c:	f7ff ffe8 	bl	15e0 <get_message_payload>
    1610:	6120      	str	r0, [r4, #16]
	/* Payload's length */
	pub_msg->msg_len = strlen(pub_msg->msg);
    1612:	f7ff f875 	bl	700 <strlen>
    1616:	82a0      	strh	r0, [r4, #20]
	/* MQTT Quality of Service */
	pub_msg->qos = qos;
    1618:	7065      	strb	r5, [r4, #1]
	/* Message's topic */
	pub_msg->topic = TOPIC;
    161a:	4804      	ldr	r0, [pc, #16]	; (162c <prepare_msg+0x28>)
    161c:	60a0      	str	r0, [r4, #8]
	pub_msg->topic_len = strlen(pub_msg->topic);
    161e:	f7ff f86f 	bl	700 <strlen>
    1622:	81a0      	strh	r0, [r4, #12]
	/* Packet Identifier, always use different values */
	pub_msg->pkt_id = sys_rand32_get();
    1624:	f000 fcc2 	bl	1fac <sys_rand32_get>
    1628:	80a0      	strh	r0, [r4, #4]
    162a:	bd38      	pop	{r3, r4, r5, pc}
    162c:	0002f2d4 	.word	0x0002f2d4

00001630 <publisher_thread>:
K_THREAD_STACK_DEFINE(pub_stack_area, PUB_STACK_SIZE);
struct k_thread pub_thread;
static struct mqtt_client_ctx pub_ctx;

void publisher_thread(void * unused1, void * unused2, void * unused3)
{
    1630:	b530      	push	{r4, r5, lr}
    1632:	b083      	sub	sp, #12
	ARG_UNUSED(unused3);

	int i, rc;

	/* Set everything to 0 and later just assign the required fields. */
	memset(&pub_ctx, 0x00, sizeof(pub_ctx));
    1634:	4c7c      	ldr	r4, [pc, #496]	; (1828 <publisher_thread+0x1f8>)
    1636:	f44f 7280 	mov.w	r2, #256	; 0x100
    163a:	2100      	movs	r1, #0
    163c:	4620      	mov	r0, r4
    163e:	f028 f84b 	bl	296d8 <memset>

	/* connect, disconnect and malformed may be set to NULL */
	pub_ctx.mqtt_ctx.connect = connect_cb;
    1642:	4b7a      	ldr	r3, [pc, #488]	; (182c <publisher_thread+0x1fc>)
    1644:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

	pub_ctx.mqtt_ctx.disconnect = disconnect_cb;
    1648:	4b79      	ldr	r3, [pc, #484]	; (1830 <publisher_thread+0x200>)
    164a:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	pub_ctx.mqtt_ctx.malformed = malformed_cb;
    164e:	4b79      	ldr	r3, [pc, #484]	; (1834 <publisher_thread+0x204>)
    1650:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8

	pub_ctx.mqtt_ctx.net_init_timeout = APP_NET_INIT_TIMEOUT;
    1654:	f242 7310 	movw	r3, #10000	; 0x2710
    1658:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	pub_ctx.mqtt_ctx.net_timeout = APP_TX_RX_TIMEOUT;
    165c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    1660:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4

	pub_ctx.mqtt_ctx.peer_addr_str = SERVER_ADDR;
    1664:	4b74      	ldr	r3, [pc, #464]	; (1838 <publisher_thread+0x208>)
    1666:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	pub_ctx.mqtt_ctx.peer_port = SERVER_PORT;
    166a:	f240 735b 	movw	r3, #1883	; 0x75b
    166e:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc

	/* Publisher apps TX the MQTT PUBLISH msg */
	pub_ctx.mqtt_ctx.publish_tx = publish_cb;
    1672:	4b72      	ldr	r3, [pc, #456]	; (183c <publisher_thread+0x20c>)
    1674:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	/* The connect message will be sent to the MQTT server (broker).
	 * If clean_session here is 0, the mqtt_ctx clean_session variable
	 * will be set to 0 also. Please don't do that, set always to 1.
	 * Clean session = 0 is not yet supported.
	 */
	pub_ctx.connect_msg.user_name = TB_ACCESS_TOKEN;
    1678:	4871      	ldr	r0, [pc, #452]	; (1840 <publisher_thread+0x210>)
    167a:	6220      	str	r0, [r4, #32]
	pub_ctx.connect_msg.user_name_len = strlen(TB_ACCESS_TOKEN);
    167c:	f7ff f840 	bl	700 <strlen>
    1680:	84a0      	strh	r0, [r4, #36]	; 0x24
	pub_ctx.connect_msg.clean_session = 1;
    1682:	7823      	ldrb	r3, [r4, #0]
    1684:	f043 0301 	orr.w	r3, r3, #1
    1688:	7023      	strb	r3, [r4, #0]

	pub_ctx.connect_data = "CONNECTED";
    168a:	4b6e      	ldr	r3, [pc, #440]	; (1844 <publisher_thread+0x214>)
    168c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	pub_ctx.disconnect_data = "DISCONNECTED";
    1690:	4b6d      	ldr	r3, [pc, #436]	; (1848 <publisher_thread+0x218>)
    1692:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
	pub_ctx.publish_data = "PUBLISH";
    1696:	4b6d      	ldr	r3, [pc, #436]	; (184c <publisher_thread+0x21c>)
    1698:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc

	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    169c:	e0a0      	b.n	17e0 <publisher_thread+0x1b0>

		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
		PRINT_RESULT("mqtt_init", rc);
    169e:	4b6c      	ldr	r3, [pc, #432]	; (1850 <publisher_thread+0x220>)
    16a0:	e0ad      	b.n	17fe <publisher_thread+0x1ce>
		}

		i = 0;
		do {
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
			PRINT_RESULT("mqtt_connect", rc);
    16a2:	4b6b      	ldr	r3, [pc, #428]	; (1850 <publisher_thread+0x220>)
    16a4:	9301      	str	r3, [sp, #4]
    16a6:	9400      	str	r4, [sp, #0]
    16a8:	4b6a      	ldr	r3, [pc, #424]	; (1854 <publisher_thread+0x224>)
    16aa:	f44f 7298 	mov.w	r2, #304	; 0x130
    16ae:	496a      	ldr	r1, [pc, #424]	; (1858 <publisher_thread+0x228>)
    16b0:	486a      	ldr	r0, [pc, #424]	; (185c <publisher_thread+0x22c>)
    16b2:	f001 fc15 	bl	2ee0 <printk>
		} while (rc != 0 && i++ < APP_CONN_TRIES);
    16b6:	b15c      	cbz	r4, 16d0 <publisher_thread+0xa0>
    16b8:	1c6b      	adds	r3, r5, #1
    16ba:	2d63      	cmp	r5, #99	; 0x63
    16bc:	dc08      	bgt.n	16d0 <publisher_thread+0xa0>
    16be:	461d      	mov	r5, r3
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
    16c0:	4867      	ldr	r0, [pc, #412]	; (1860 <publisher_thread+0x230>)
    16c2:	f024 f827 	bl	25714 <mqtt_connect>
			PRINT_RESULT("mqtt_connect", rc);
    16c6:	4604      	mov	r4, r0
    16c8:	2800      	cmp	r0, #0
    16ca:	d1ea      	bne.n	16a2 <publisher_thread+0x72>
    16cc:	4b65      	ldr	r3, [pc, #404]	; (1864 <publisher_thread+0x234>)
    16ce:	e7e9      	b.n	16a4 <publisher_thread+0x74>

		if (rc != 0) {
    16d0:	b1cc      	cbz	r4, 1706 <publisher_thread+0xd6>
    16d2:	e0a0      	b.n	1816 <publisher_thread+0x1e6>
		}

		i = 0;
		do {
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
			PRINT_RESULT("mqtt_tx_connect", rc);
    16d4:	4b5e      	ldr	r3, [pc, #376]	; (1850 <publisher_thread+0x220>)
    16d6:	9301      	str	r3, [sp, #4]
    16d8:	9500      	str	r5, [sp, #0]
    16da:	4b63      	ldr	r3, [pc, #396]	; (1868 <publisher_thread+0x238>)
    16dc:	f44f 729d 	mov.w	r2, #314	; 0x13a
    16e0:	495d      	ldr	r1, [pc, #372]	; (1858 <publisher_thread+0x228>)
    16e2:	485e      	ldr	r0, [pc, #376]	; (185c <publisher_thread+0x22c>)
    16e4:	f001 fbfc 	bl	2ee0 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    16e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    16ec:	f026 fee2 	bl	284b4 <_impl_k_sleep>
			k_sleep(APP_TX_CONN_WAIT_MSECS);
		} while (rc == 0 && i++ < APP_TX_CONN_TRIES && !pub_ctx.mqtt_ctx.connected);
    16f0:	b99d      	cbnz	r5, 171a <publisher_thread+0xea>
    16f2:	1c63      	adds	r3, r4, #1
    16f4:	2c13      	cmp	r4, #19
    16f6:	dc10      	bgt.n	171a <publisher_thread+0xea>
    16f8:	4a4b      	ldr	r2, [pc, #300]	; (1828 <publisher_thread+0x1f8>)
    16fa:	f892 20f1 	ldrb.w	r2, [r2, #241]	; 0xf1
    16fe:	f012 0f02 	tst.w	r2, #2
    1702:	d10a      	bne.n	171a <publisher_thread+0xea>
    1704:	461c      	mov	r4, r3
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
    1706:	4848      	ldr	r0, [pc, #288]	; (1828 <publisher_thread+0x1f8>)
    1708:	4601      	mov	r1, r0
    170a:	3048      	adds	r0, #72	; 0x48
    170c:	f023 fe30 	bl	25370 <mqtt_tx_connect>
			PRINT_RESULT("mqtt_tx_connect", rc);
    1710:	4605      	mov	r5, r0
    1712:	2800      	cmp	r0, #0
    1714:	d1de      	bne.n	16d4 <publisher_thread+0xa4>
    1716:	4b53      	ldr	r3, [pc, #332]	; (1864 <publisher_thread+0x234>)
    1718:	e7dd      	b.n	16d6 <publisher_thread+0xa6>

		if (!pub_ctx.mqtt_ctx.connected) {
    171a:	4b43      	ldr	r3, [pc, #268]	; (1828 <publisher_thread+0x1f8>)
    171c:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
    1720:	f013 0f02 	tst.w	r3, #2
    1724:	d11b      	bne.n	175e <publisher_thread+0x12e>
			mqtt_close(&pub_ctx.mqtt_ctx);
    1726:	484e      	ldr	r0, [pc, #312]	; (1860 <publisher_thread+0x230>)
    1728:	f024 f83a 	bl	257a0 <mqtt_close>
			goto exit_pub;
    172c:	e073      	b.n	1816 <publisher_thread+0x1e6>
		do {
			bool data_changed = false;
			k_mutex_lock(&pub_data, K_FOREVER);

			if (message_changed) {
				prepare_msg(&pub_ctx.pub_msg, MQTT_QoS0);
    172e:	2100      	movs	r1, #0
    1730:	484e      	ldr	r0, [pc, #312]	; (186c <publisher_thread+0x23c>)
    1732:	f7ff ff67 	bl	1604 <prepare_msg>
				message_changed=false;
    1736:	2200      	movs	r2, #0
    1738:	4b4d      	ldr	r3, [pc, #308]	; (1870 <publisher_thread+0x240>)
    173a:	701a      	strb	r2, [r3, #0]
    173c:	e018      	b.n	1770 <publisher_thread+0x140>

			k_mutex_unlock(&pub_data);

			if (data_changed) {
				rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
				PRINT_RESULT("mqtt_tx_publish", rc);
    173e:	4a44      	ldr	r2, [pc, #272]	; (1850 <publisher_thread+0x220>)
    1740:	9201      	str	r2, [sp, #4]
    1742:	9300      	str	r3, [sp, #0]
    1744:	4b4b      	ldr	r3, [pc, #300]	; (1874 <publisher_thread+0x244>)
    1746:	f240 1251 	movw	r2, #337	; 0x151
    174a:	4943      	ldr	r1, [pc, #268]	; (1858 <publisher_thread+0x228>)
    174c:	4843      	ldr	r0, [pc, #268]	; (185c <publisher_thread+0x22c>)
    174e:	f001 fbc7 	bl	2ee0 <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1752:	f242 7110 	movw	r1, #10000	; 0x2710
    1756:	4848      	ldr	r0, [pc, #288]	; (1878 <publisher_thread+0x248>)
    1758:	f026 fffe 	bl	28758 <_impl_k_sem_take>
			}
		} while ((rc = k_sem_take(&pub_sem, APP_CONN_IDLE_TIMEOUT)) == 0);
    175c:	b9c0      	cbnz	r0, 1790 <publisher_thread+0x160>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    175e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1762:	4846      	ldr	r0, [pc, #280]	; (187c <publisher_thread+0x24c>)
    1764:	f025 ffc2 	bl	276ec <_impl_k_mutex_lock>
			if (message_changed) {
    1768:	4b41      	ldr	r3, [pc, #260]	; (1870 <publisher_thread+0x240>)
    176a:	781c      	ldrb	r4, [r3, #0]
    176c:	2c00      	cmp	r4, #0
    176e:	d1de      	bne.n	172e <publisher_thread+0xfe>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    1770:	4842      	ldr	r0, [pc, #264]	; (187c <publisher_thread+0x24c>)
    1772:	f026 f825 	bl	277c0 <_impl_k_mutex_unlock>
			if (data_changed) {
    1776:	2c00      	cmp	r4, #0
    1778:	d0eb      	beq.n	1752 <publisher_thread+0x122>
				rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
    177a:	482b      	ldr	r0, [pc, #172]	; (1828 <publisher_thread+0x1f8>)
    177c:	f100 0130 	add.w	r1, r0, #48	; 0x30
    1780:	3048      	adds	r0, #72	; 0x48
    1782:	f023 fe81 	bl	25488 <mqtt_tx_publish>
				PRINT_RESULT("mqtt_tx_publish", rc);
    1786:	4603      	mov	r3, r0
    1788:	2800      	cmp	r0, #0
    178a:	d1d8      	bne.n	173e <publisher_thread+0x10e>
    178c:	4a35      	ldr	r2, [pc, #212]	; (1864 <publisher_thread+0x234>)
    178e:	e7d7      	b.n	1740 <publisher_thread+0x110>

		rc = mqtt_tx_disconnect(&pub_ctx.mqtt_ctx);
    1790:	4833      	ldr	r0, [pc, #204]	; (1860 <publisher_thread+0x230>)
    1792:	f023 fe2f 	bl	253f4 <mqtt_tx_disconnect>
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    1796:	4603      	mov	r3, r0
    1798:	2800      	cmp	r0, #0
    179a:	d141      	bne.n	1820 <publisher_thread+0x1f0>
    179c:	4a31      	ldr	r2, [pc, #196]	; (1864 <publisher_thread+0x234>)
    179e:	9201      	str	r2, [sp, #4]
    17a0:	9300      	str	r3, [sp, #0]
    17a2:	4b37      	ldr	r3, [pc, #220]	; (1880 <publisher_thread+0x250>)
    17a4:	f44f 72ab 	mov.w	r2, #342	; 0x156
    17a8:	492b      	ldr	r1, [pc, #172]	; (1858 <publisher_thread+0x228>)
    17aa:	482c      	ldr	r0, [pc, #176]	; (185c <publisher_thread+0x22c>)
    17ac:	f001 fb98 	bl	2ee0 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    17b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    17b4:	f026 fe7e 	bl	284b4 <_impl_k_sleep>

		k_sleep(APP_TX_RX_TIMEOUT);

		rc = mqtt_close(&pub_ctx.mqtt_ctx);
    17b8:	4829      	ldr	r0, [pc, #164]	; (1860 <publisher_thread+0x230>)
    17ba:	f023 fff1 	bl	257a0 <mqtt_close>
		PRINT_RESULT("mqtt_close", rc);
    17be:	4603      	mov	r3, r0
    17c0:	2800      	cmp	r0, #0
    17c2:	d12f      	bne.n	1824 <publisher_thread+0x1f4>
    17c4:	4a27      	ldr	r2, [pc, #156]	; (1864 <publisher_thread+0x234>)
    17c6:	9201      	str	r2, [sp, #4]
    17c8:	9300      	str	r3, [sp, #0]
    17ca:	4b2e      	ldr	r3, [pc, #184]	; (1884 <publisher_thread+0x254>)
    17cc:	f240 125b 	movw	r2, #347	; 0x15b
    17d0:	4921      	ldr	r1, [pc, #132]	; (1858 <publisher_thread+0x228>)
    17d2:	4822      	ldr	r0, [pc, #136]	; (185c <publisher_thread+0x22c>)
    17d4:	f001 fb84 	bl	2ee0 <printk>
    17d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    17dc:	f026 fe6a 	bl	284b4 <_impl_k_sleep>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    17e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    17e4:	4824      	ldr	r0, [pc, #144]	; (1878 <publisher_thread+0x248>)
    17e6:	f026 ffb7 	bl	28758 <_impl_k_sem_take>
	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    17ea:	b9a0      	cbnz	r0, 1816 <publisher_thread+0x1e6>
		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
    17ec:	2101      	movs	r1, #1
    17ee:	481c      	ldr	r0, [pc, #112]	; (1860 <publisher_thread+0x230>)
    17f0:	f023 ffc4 	bl	2577c <mqtt_init>
		PRINT_RESULT("mqtt_init", rc);
    17f4:	4605      	mov	r5, r0
    17f6:	2800      	cmp	r0, #0
    17f8:	f47f af51 	bne.w	169e <publisher_thread+0x6e>
    17fc:	4b19      	ldr	r3, [pc, #100]	; (1864 <publisher_thread+0x234>)
    17fe:	9301      	str	r3, [sp, #4]
    1800:	9500      	str	r5, [sp, #0]
    1802:	4b21      	ldr	r3, [pc, #132]	; (1888 <publisher_thread+0x258>)
    1804:	f240 1227 	movw	r2, #295	; 0x127
    1808:	4913      	ldr	r1, [pc, #76]	; (1858 <publisher_thread+0x228>)
    180a:	4814      	ldr	r0, [pc, #80]	; (185c <publisher_thread+0x22c>)
    180c:	f001 fb68 	bl	2ee0 <printk>
		if (rc != 0) {
    1810:	2d00      	cmp	r5, #0
    1812:	f43f af55 	beq.w	16c0 <publisher_thread+0x90>
		k_sleep(APP_TX_RX_TIMEOUT);
	}

exit_pub:

	printk("\nPublisher terminated!!\n");
    1816:	481d      	ldr	r0, [pc, #116]	; (188c <publisher_thread+0x25c>)
    1818:	f001 fb62 	bl	2ee0 <printk>
}
    181c:	b003      	add	sp, #12
    181e:	bd30      	pop	{r4, r5, pc}
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    1820:	4a0b      	ldr	r2, [pc, #44]	; (1850 <publisher_thread+0x220>)
    1822:	e7bc      	b.n	179e <publisher_thread+0x16e>
		PRINT_RESULT("mqtt_close", rc);
    1824:	4a0a      	ldr	r2, [pc, #40]	; (1850 <publisher_thread+0x220>)
    1826:	e7ce      	b.n	17c6 <publisher_thread+0x196>
    1828:	20000090 	.word	0x20000090
    182c:	000014f1 	.word	0x000014f1
    1830:	000014bd 	.word	0x000014bd
    1834:	000014a5 	.word	0x000014a5
    1838:	0002f350 	.word	0x0002f350
    183c:	00001435 	.word	0x00001435
    1840:	0002f36c 	.word	0x0002f36c
    1844:	0002f384 	.word	0x0002f384
    1848:	0002f390 	.word	0x0002f390
    184c:	0002f3a0 	.word	0x0002f3a0
    1850:	0002f348 	.word	0x0002f348
    1854:	0002f3cc 	.word	0x0002f3cc
    1858:	0002dafc 	.word	0x0002dafc
    185c:	0002f3b4 	.word	0x0002f3b4
    1860:	200000d8 	.word	0x200000d8
    1864:	0002f344 	.word	0x0002f344
    1868:	0002f3dc 	.word	0x0002f3dc
    186c:	200000c0 	.word	0x200000c0
    1870:	2000000c 	.word	0x2000000c
    1874:	0002f3ec 	.word	0x0002f3ec
    1878:	2000cf5c 	.word	0x2000cf5c
    187c:	2000cfd0 	.word	0x2000cfd0
    1880:	0002f3fc 	.word	0x0002f3fc
    1884:	0002f410 	.word	0x0002f410
    1888:	0002f3a8 	.word	0x0002f3a8
    188c:	0002f41c 	.word	0x0002f41c

00001890 <start_publisher>:


static void start_publisher()
{
    1890:	b500      	push	{lr}
    1892:	b087      	sub	sp, #28
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    1894:	2300      	movs	r3, #0
    1896:	9305      	str	r3, [sp, #20]
    1898:	9304      	str	r3, [sp, #16]
    189a:	2205      	movs	r2, #5
    189c:	9203      	str	r2, [sp, #12]
    189e:	9302      	str	r3, [sp, #8]
    18a0:	9301      	str	r3, [sp, #4]
    18a2:	9300      	str	r3, [sp, #0]
    18a4:	4b04      	ldr	r3, [pc, #16]	; (18b8 <start_publisher+0x28>)
    18a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    18aa:	4904      	ldr	r1, [pc, #16]	; (18bc <start_publisher+0x2c>)
    18ac:	4804      	ldr	r0, [pc, #16]	; (18c0 <start_publisher+0x30>)
    18ae:	f027 f9bf 	bl	28c30 <_impl_k_thread_create>
	k_tid_t tt_tid = k_thread_create(&pub_thread, pub_stack_area,
                                 K_THREAD_STACK_SIZEOF(pub_stack_area),
                                 publisher_thread,
                                 NULL, NULL, NULL,
                                 PUB_PRIORITY, 0, K_NO_WAIT);
}
    18b2:	b007      	add	sp, #28
    18b4:	f85d fb04 	ldr.w	pc, [sp], #4
    18b8:	00001631 	.word	0x00001631
    18bc:	20003310 	.word	0x20003310
    18c0:	2000283c 	.word	0x2000283c

000018c4 <start_message_thread>:
{
    18c4:	b500      	push	{lr}
    18c6:	b087      	sub	sp, #28
    18c8:	2300      	movs	r3, #0
    18ca:	9305      	str	r3, [sp, #20]
    18cc:	9304      	str	r3, [sp, #16]
    18ce:	2205      	movs	r2, #5
    18d0:	9203      	str	r2, [sp, #12]
    18d2:	9302      	str	r3, [sp, #8]
    18d4:	9301      	str	r3, [sp, #4]
    18d6:	9300      	str	r3, [sp, #0]
    18d8:	4b04      	ldr	r3, [pc, #16]	; (18ec <start_message_thread+0x28>)
    18da:	f44f 6200 	mov.w	r2, #2048	; 0x800
    18de:	4904      	ldr	r1, [pc, #16]	; (18f0 <start_message_thread+0x2c>)
    18e0:	4804      	ldr	r0, [pc, #16]	; (18f4 <start_message_thread+0x30>)
    18e2:	f027 f9a5 	bl	28c30 <_impl_k_thread_create>
}
    18e6:	b007      	add	sp, #28
    18e8:	f85d fb04 	ldr.w	pc, [sp], #4
    18ec:	00001525 	.word	0x00001525
    18f0:	20002b10 	.word	0x20002b10
    18f4:	200027d4 	.word	0x200027d4

000018f8 <event_iface_up>:


static void event_iface_up(struct net_mgmt_event_callback *cb,
			   u32_t mgmt_event, struct net_if *iface)
{
    18f8:	b508      	push	{r3, lr}
	start_publisher();
    18fa:	f7ff ffc9 	bl	1890 <start_publisher>
	start_message_thread();
    18fe:	f7ff ffe1 	bl	18c4 <start_message_thread>
    1902:	bd08      	pop	{r3, pc}

00001904 <main>:
}


void main(void)
{
    1904:	b510      	push	{r4, lr}
	struct net_if *iface = net_if_get_default();
    1906:	f018 ff59 	bl	1a7bc <net_if_get_default>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    190a:	f3bf 8f5b 	dmb	ish
    190e:	68c3      	ldr	r3, [r0, #12]
    1910:	f3bf 8f5b 	dmb	ish

#if defined(CONFIG_NET_MGMT_EVENT)
	/* Subscribe to NET_IF_UP if interface is not ready */
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
    1914:	f013 0f01 	tst.w	r3, #1
    1918:	d010      	beq.n	193c <main+0x38>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    191a:	4c0c      	ldr	r4, [pc, #48]	; (194c <main+0x48>)
    191c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1920:	4620      	mov	r0, r4
    1922:	f025 fee3 	bl	276ec <_impl_k_mutex_lock>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    1926:	4620      	mov	r0, r4
    1928:	f025 ff4a 	bl	277c0 <_impl_k_mutex_unlock>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    192c:	4808      	ldr	r0, [pc, #32]	; (1950 <main+0x4c>)
    192e:	f026 ff00 	bl	28732 <_impl_k_sem_give>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1932:	f242 7010 	movw	r0, #10000	; 0x2710
    1936:	f026 fdbd 	bl	284b4 <_impl_k_sleep>
    193a:	e7ee      	b.n	191a <main+0x16>
				  u32_t mgmt_event_mask)
{
	__ASSERT(cb, "Callback pointer should not be NULL");
	__ASSERT(handler, "Handler pointer should not be NULL");

	cb->handler = handler;
    193c:	4805      	ldr	r0, [pc, #20]	; (1954 <main+0x50>)
    193e:	4b06      	ldr	r3, [pc, #24]	; (1958 <main+0x54>)
    1940:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
    1942:	4b06      	ldr	r3, [pc, #24]	; (195c <main+0x58>)
    1944:	6083      	str	r3, [r0, #8]
		net_mgmt_init_event_callback(&cb, event_iface_up, NET_EVENT_IF_UP);
		net_mgmt_add_event_callback(&cb);
    1946:	f020 fd77 	bl	22438 <net_mgmt_add_event_callback>
    194a:	e7e6      	b.n	191a <main+0x16>
    194c:	2000cfd0 	.word	0x2000cfd0
    1950:	2000cf5c 	.word	0x2000cf5c
    1954:	20000000 	.word	0x20000000
    1958:	000018f9 	.word	0x000018f9
    195c:	d0010002 	.word	0xd0010002

00001960 <_sbrk>:
}
FUNC_ALIAS(_lseek, lseek, int);

void *_sbrk(int count)
{
	void *ptr = heap_base + heap_sz;
    1960:	4b08      	ldr	r3, [pc, #32]	; (1984 <_sbrk+0x24>)
    1962:	681a      	ldr	r2, [r3, #0]
    1964:	4b08      	ldr	r3, [pc, #32]	; (1988 <_sbrk+0x28>)
    1966:	18d1      	adds	r1, r2, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    1968:	4410      	add	r0, r2
    196a:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    196e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    1972:	4298      	cmp	r0, r3
    1974:	d203      	bcs.n	197e <_sbrk+0x1e>
		heap_sz += count;
    1976:	4b03      	ldr	r3, [pc, #12]	; (1984 <_sbrk+0x24>)
    1978:	6018      	str	r0, [r3, #0]
		return ptr;
	} else {
		return (void *)-1;
	}
}
    197a:	4608      	mov	r0, r1
    197c:	4770      	bx	lr
		return (void *)-1;
    197e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1982:	e7fa      	b.n	197a <_sbrk+0x1a>
    1984:	20000190 	.word	0x20000190
    1988:	2000d3b4 	.word	0x2000d3b4

0000198c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    198c:	b510      	push	{r4, lr}
    198e:	4604      	mov	r4, r0
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1990:	280a      	cmp	r0, #10
    1992:	d007      	beq.n	19a4 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1994:	4b07      	ldr	r3, [pc, #28]	; (19b4 <console_out+0x28>)
    1996:	6818      	ldr	r0, [r3, #0]
 * @retval char Sent character.
 */
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;
    1998:	6843      	ldr	r3, [r0, #4]

	return api->poll_out(dev, out_char);
    199a:	685b      	ldr	r3, [r3, #4]
    199c:	b2e1      	uxtb	r1, r4
    199e:	4798      	blx	r3

	return c;
}
    19a0:	4620      	mov	r0, r4
    19a2:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    19a4:	4b03      	ldr	r3, [pc, #12]	; (19b4 <console_out+0x28>)
    19a6:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    19a8:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    19aa:	685b      	ldr	r3, [r3, #4]
    19ac:	210d      	movs	r1, #13
    19ae:	4798      	blx	r3
    19b0:	e7f0      	b.n	1994 <console_out+0x8>
    19b2:	bf00      	nop
    19b4:	200001b4 	.word	0x200001b4

000019b8 <read_uart>:
#define ANSI_END           'F'
#define ANSI_HOME          'H'
#define ANSI_DEL           '~'

static int read_uart(struct device *uart, u8_t *buf, unsigned int size)
{
    19b8:	b510      	push	{r4, lr}
    19ba:	4604      	mov	r4, r0
 * @return Number of bytes read.
 */
static inline int uart_fifo_read(struct device *dev, u8_t *rx_data,
				 const int size)
{
	const struct uart_driver_api *api = dev->driver_api;
    19bc:	6843      	ldr	r3, [r0, #4]

	if (api->fifo_read) {
    19be:	691b      	ldr	r3, [r3, #16]
    19c0:	b11b      	cbz	r3, 19ca <read_uart+0x12>
		return api->fifo_read(dev, rx_data, size);
    19c2:	4798      	blx	r3
	int rx;

	rx = uart_fifo_read(uart, buf, size);
	if (rx < 0) {
    19c4:	2800      	cmp	r0, #0
    19c6:	db02      	blt.n	19ce <read_uart+0x16>

		return -EIO;
	}

	return rx;
}
    19c8:	bd10      	pop	{r4, pc}
	}

	return 0;
    19ca:	2000      	movs	r0, #0
    19cc:	e7fa      	b.n	19c4 <read_uart+0xc>
 *
 * @return N/A
 */
static inline void uart_irq_rx_disable(struct device *dev)
{
	const struct uart_driver_api *api = dev->driver_api;
    19ce:	6863      	ldr	r3, [r4, #4]

	if (api->irq_rx_disable) {
    19d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    19d2:	b123      	cbz	r3, 19de <read_uart+0x26>
		api->irq_rx_disable(dev);
    19d4:	4620      	mov	r0, r4
    19d6:	4798      	blx	r3
		return -EIO;
    19d8:	f06f 0004 	mvn.w	r0, #4
    19dc:	bd10      	pop	{r4, pc}
    19de:	f06f 0004 	mvn.w	r0, #4
    19e2:	e7f1      	b.n	19c8 <read_uart+0x10>

000019e4 <console_input_init>:
		}
	}
}

static void console_input_init(void)
{
    19e4:	b500      	push	{lr}
    19e6:	b083      	sub	sp, #12
	u8_t c;

	uart_irq_rx_disable(uart_console_dev);
    19e8:	4b19      	ldr	r3, [pc, #100]	; (1a50 <console_input_init+0x6c>)
    19ea:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    19ec:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_disable) {
    19ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    19f0:	b103      	cbz	r3, 19f4 <console_input_init+0x10>
		api->irq_rx_disable(dev);
    19f2:	4798      	blx	r3
	uart_irq_tx_disable(uart_console_dev);
    19f4:	4b16      	ldr	r3, [pc, #88]	; (1a50 <console_input_init+0x6c>)
    19f6:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    19f8:	6843      	ldr	r3, [r0, #4]
	if (api->irq_tx_disable) {
    19fa:	699b      	ldr	r3, [r3, #24]
    19fc:	b103      	cbz	r3, 1a00 <console_input_init+0x1c>
		api->irq_tx_disable(dev);
    19fe:	4798      	blx	r3

	uart_irq_callback_set(uart_console_dev, uart_console_isr);
    1a00:	4b13      	ldr	r3, [pc, #76]	; (1a50 <console_input_init+0x6c>)
    1a02:	6818      	ldr	r0, [r3, #0]
 * @return N/A
 */
static inline void uart_irq_callback_set(struct device *dev,
					 uart_irq_callback_t cb)
{
	const struct uart_driver_api *api = dev->driver_api;
    1a04:	6843      	ldr	r3, [r0, #4]

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    1a06:	b18b      	cbz	r3, 1a2c <console_input_init+0x48>
    1a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1a0a:	b17b      	cbz	r3, 1a2c <console_input_init+0x48>
		api->irq_callback_set(dev, cb);
    1a0c:	4911      	ldr	r1, [pc, #68]	; (1a54 <console_input_init+0x70>)
    1a0e:	4798      	blx	r3
    1a10:	e00c      	b.n	1a2c <console_input_init+0x48>
		return api->fifo_read(dev, rx_data, size);
    1a12:	2201      	movs	r2, #1
    1a14:	f10d 0107 	add.w	r1, sp, #7
    1a18:	4798      	blx	r3
    1a1a:	e007      	b.n	1a2c <console_input_init+0x48>
	return 0;
    1a1c:	2000      	movs	r0, #0

	/* Drain the fifo */
	while (uart_irq_rx_ready(uart_console_dev)) {
    1a1e:	b168      	cbz	r0, 1a3c <console_input_init+0x58>
		uart_fifo_read(uart_console_dev, &c, 1);
    1a20:	4b0b      	ldr	r3, [pc, #44]	; (1a50 <console_input_init+0x6c>)
    1a22:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a24:	6843      	ldr	r3, [r0, #4]
	if (api->fifo_read) {
    1a26:	691b      	ldr	r3, [r3, #16]
    1a28:	2b00      	cmp	r3, #0
    1a2a:	d1f2      	bne.n	1a12 <console_input_init+0x2e>
	while (uart_irq_rx_ready(uart_console_dev)) {
    1a2c:	4b08      	ldr	r3, [pc, #32]	; (1a50 <console_input_init+0x6c>)
    1a2e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a30:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a34:	2b00      	cmp	r3, #0
    1a36:	d0f1      	beq.n	1a1c <console_input_init+0x38>
		return api->irq_rx_ready(dev);
    1a38:	4798      	blx	r3
    1a3a:	e7f0      	b.n	1a1e <console_input_init+0x3a>
	}

	uart_irq_rx_enable(uart_console_dev);
    1a3c:	4b04      	ldr	r3, [pc, #16]	; (1a50 <console_input_init+0x6c>)
    1a3e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a40:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_enable) {
    1a42:	6a1b      	ldr	r3, [r3, #32]
    1a44:	b103      	cbz	r3, 1a48 <console_input_init+0x64>
		api->irq_rx_enable(dev);
    1a46:	4798      	blx	r3
}
    1a48:	b003      	add	sp, #12
    1a4a:	f85d fb04 	ldr.w	pc, [sp], #4
    1a4e:	bf00      	nop
    1a50:	200001b4 	.word	0x200001b4
    1a54:	00001d51 	.word	0x00001d51

00001a58 <del_char>:
{
    1a58:	b570      	push	{r4, r5, r6, lr}
    1a5a:	4606      	mov	r6, r0
    1a5c:	460d      	mov	r5, r1
	uart_poll_out(uart_console_dev, '\b');
    1a5e:	4b17      	ldr	r3, [pc, #92]	; (1abc <del_char+0x64>)
    1a60:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a62:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1a64:	685b      	ldr	r3, [r3, #4]
    1a66:	2108      	movs	r1, #8
    1a68:	4798      	blx	r3
	if (end == 0) {
    1a6a:	b11d      	cbz	r5, 1a74 <del_char+0x1c>
	printk("\x1b[s");
    1a6c:	4814      	ldr	r0, [pc, #80]	; (1ac0 <del_char+0x68>)
    1a6e:	f001 fa37 	bl	2ee0 <printk>
    1a72:	e014      	b.n	1a9e <del_char+0x46>
		uart_poll_out(uart_console_dev, ' ');
    1a74:	4c11      	ldr	r4, [pc, #68]	; (1abc <del_char+0x64>)
    1a76:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a78:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1a7a:	685b      	ldr	r3, [r3, #4]
    1a7c:	2120      	movs	r1, #32
    1a7e:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\b');
    1a80:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a82:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1a84:	685b      	ldr	r3, [r3, #4]
    1a86:	2108      	movs	r1, #8
    1a88:	4798      	blx	r3
    1a8a:	bd70      	pop	{r4, r5, r6, pc}
		*pos = *(pos + 1);
    1a8c:	7871      	ldrb	r1, [r6, #1]
    1a8e:	f806 1b01 	strb.w	r1, [r6], #1
		uart_poll_out(uart_console_dev, *(pos++));
    1a92:	4b0a      	ldr	r3, [pc, #40]	; (1abc <del_char+0x64>)
    1a94:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a96:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1a98:	685b      	ldr	r3, [r3, #4]
    1a9a:	4798      	blx	r3
	while (end-- > 0) {
    1a9c:	4625      	mov	r5, r4
    1a9e:	1e6b      	subs	r3, r5, #1
    1aa0:	b2dc      	uxtb	r4, r3
    1aa2:	2d00      	cmp	r5, #0
    1aa4:	d1f2      	bne.n	1a8c <del_char+0x34>
	uart_poll_out(uart_console_dev, ' ');
    1aa6:	4b05      	ldr	r3, [pc, #20]	; (1abc <del_char+0x64>)
    1aa8:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1aaa:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1aac:	685b      	ldr	r3, [r3, #4]
    1aae:	2120      	movs	r1, #32
    1ab0:	4798      	blx	r3
	printk("\x1b[u");
    1ab2:	4804      	ldr	r0, [pc, #16]	; (1ac4 <del_char+0x6c>)
    1ab4:	f001 fa14 	bl	2ee0 <printk>
    1ab8:	bd70      	pop	{r4, r5, r6, pc}
    1aba:	bf00      	nop
    1abc:	200001b4 	.word	0x200001b4
    1ac0:	0002f438 	.word	0x0002f438
    1ac4:	0002f43c 	.word	0x0002f43c

00001ac8 <insert_char>:
{
    1ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1acc:	4605      	mov	r5, r0
    1ace:	4688      	mov	r8, r1
    1ad0:	4614      	mov	r4, r2
	uart_poll_out(uart_console_dev, c);
    1ad2:	4b14      	ldr	r3, [pc, #80]	; (1b24 <insert_char+0x5c>)
    1ad4:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1ad6:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1ad8:	685b      	ldr	r3, [r3, #4]
    1ada:	4798      	blx	r3
	if (end == 0) {
    1adc:	b91c      	cbnz	r4, 1ae6 <insert_char+0x1e>
		*pos = c;
    1ade:	f885 8000 	strb.w	r8, [r5]
		return;
    1ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tmp = *pos;
    1ae6:	462e      	mov	r6, r5
    1ae8:	f816 7b01 	ldrb.w	r7, [r6], #1
	*(pos++) = c;
    1aec:	f885 8000 	strb.w	r8, [r5]
	printk("\x1b[s");
    1af0:	480d      	ldr	r0, [pc, #52]	; (1b28 <insert_char+0x60>)
    1af2:	f001 f9f5 	bl	2ee0 <printk>
    1af6:	e00c      	b.n	1b12 <insert_char+0x4a>
		uart_poll_out(uart_console_dev, tmp);
    1af8:	4b0a      	ldr	r3, [pc, #40]	; (1b24 <insert_char+0x5c>)
    1afa:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1afc:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1afe:	685b      	ldr	r3, [r3, #4]
    1b00:	4639      	mov	r1, r7
    1b02:	4798      	blx	r3
		c = *pos;
    1b04:	4633      	mov	r3, r6
    1b06:	f813 2b01 	ldrb.w	r2, [r3], #1
		*(pos++) = tmp;
    1b0a:	7037      	strb	r7, [r6, #0]
		tmp = c;
    1b0c:	4617      	mov	r7, r2
	while (end-- > 0) {
    1b0e:	462c      	mov	r4, r5
		*(pos++) = tmp;
    1b10:	461e      	mov	r6, r3
	while (end-- > 0) {
    1b12:	1e63      	subs	r3, r4, #1
    1b14:	b2dd      	uxtb	r5, r3
    1b16:	2c00      	cmp	r4, #0
    1b18:	d1ee      	bne.n	1af8 <insert_char+0x30>
	printk("\x1b[u");
    1b1a:	4804      	ldr	r0, [pc, #16]	; (1b2c <insert_char+0x64>)
    1b1c:	f001 f9e0 	bl	2ee0 <printk>
    1b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b24:	200001b4 	.word	0x200001b4
    1b28:	0002f438 	.word	0x0002f438
    1b2c:	0002f43c 	.word	0x0002f43c

00001b30 <handle_ansi>:
{
    1b30:	b538      	push	{r3, r4, r5, lr}
    1b32:	4604      	mov	r4, r0
    1b34:	460d      	mov	r5, r1
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1b36:	4b7f      	ldr	r3, [pc, #508]	; (1d34 <handle_ansi+0x204>)
    1b38:	f3bf 8f5b 	dmb	ish
    1b3c:	e853 2f00 	ldrex	r2, [r3]
    1b40:	f022 0104 	bic.w	r1, r2, #4
    1b44:	e843 1000 	strex	r0, r1, [r3]
    1b48:	2800      	cmp	r0, #0
    1b4a:	d1f7      	bne.n	1b3c <handle_ansi+0xc>
    1b4c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(&esc_state, ESC_ANSI_FIRST)) {
    1b50:	f012 0f04 	tst.w	r2, #4
    1b54:	d03c      	beq.n	1bd0 <handle_ansi+0xa0>
		if (!isdigit(byte)) {
    1b56:	f027 fd07 	bl	29568 <__locale_ctype_ptr>
    1b5a:	4420      	add	r0, r4
    1b5c:	7843      	ldrb	r3, [r0, #1]
    1b5e:	f013 0f04 	tst.w	r3, #4
    1b62:	d121      	bne.n	1ba8 <handle_ansi+0x78>
			ansi_val = 1;
    1b64:	2201      	movs	r2, #1
    1b66:	4b74      	ldr	r3, [pc, #464]	; (1d38 <handle_ansi+0x208>)
    1b68:	601a      	str	r2, [r3, #0]
	switch (byte) {
    1b6a:	2c46      	cmp	r4, #70	; 0x46
    1b6c:	f000 80d0 	beq.w	1d10 <handle_ansi+0x1e0>
    1b70:	f200 8086 	bhi.w	1c80 <handle_ansi+0x150>
    1b74:	2c43      	cmp	r4, #67	; 0x43
    1b76:	f000 80a7 	beq.w	1cc8 <handle_ansi+0x198>
    1b7a:	2c44      	cmp	r4, #68	; 0x44
    1b7c:	d106      	bne.n	1b8c <handle_ansi+0x5c>
		if (ansi_val > cur) {
    1b7e:	4b6f      	ldr	r3, [pc, #444]	; (1d3c <handle_ansi+0x20c>)
    1b80:	781b      	ldrb	r3, [r3, #0]
    1b82:	4a6d      	ldr	r2, [pc, #436]	; (1d38 <handle_ansi+0x208>)
    1b84:	6811      	ldr	r1, [r2, #0]
    1b86:	428b      	cmp	r3, r1
    1b88:	f080 8092 	bcs.w	1cb0 <handle_ansi+0x180>
    1b8c:	4b69      	ldr	r3, [pc, #420]	; (1d34 <handle_ansi+0x204>)
    1b8e:	f3bf 8f5b 	dmb	ish
    1b92:	e853 2f00 	ldrex	r2, [r3]
    1b96:	f022 0202 	bic.w	r2, r2, #2
    1b9a:	e843 2100 	strex	r1, r2, [r3]
    1b9e:	2900      	cmp	r1, #0
    1ba0:	d1f7      	bne.n	1b92 <handle_ansi+0x62>
    1ba2:	f3bf 8f5b 	dmb	ish
    1ba6:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1ba8:	4b62      	ldr	r3, [pc, #392]	; (1d34 <handle_ansi+0x204>)
    1baa:	f3bf 8f5b 	dmb	ish
    1bae:	e853 2f00 	ldrex	r2, [r3]
    1bb2:	f042 0208 	orr.w	r2, r2, #8
    1bb6:	e843 2100 	strex	r1, r2, [r3]
    1bba:	2900      	cmp	r1, #0
    1bbc:	d1f7      	bne.n	1bae <handle_ansi+0x7e>
    1bbe:	f3bf 8f5b 	dmb	ish
		ansi_val = byte - '0';
    1bc2:	3c30      	subs	r4, #48	; 0x30
    1bc4:	4b5c      	ldr	r3, [pc, #368]	; (1d38 <handle_ansi+0x208>)
    1bc6:	601c      	str	r4, [r3, #0]
		ansi_val_2 = 0;
    1bc8:	2200      	movs	r2, #0
    1bca:	4b5d      	ldr	r3, [pc, #372]	; (1d40 <handle_ansi+0x210>)
    1bcc:	601a      	str	r2, [r3, #0]
		return;
    1bce:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1bd0:	f3bf 8f5b 	dmb	ish
    1bd4:	4b57      	ldr	r3, [pc, #348]	; (1d34 <handle_ansi+0x204>)
    1bd6:	681b      	ldr	r3, [r3, #0]
    1bd8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(&esc_state, ESC_ANSI_VAL)) {
    1bdc:	f013 0f08 	tst.w	r3, #8
    1be0:	d0c3      	beq.n	1b6a <handle_ansi+0x3a>
		if (isdigit(byte)) {
    1be2:	f027 fcc1 	bl	29568 <__locale_ctype_ptr>
    1be6:	4420      	add	r0, r4
    1be8:	7843      	ldrb	r3, [r0, #1]
    1bea:	f013 0f04 	tst.w	r3, #4
    1bee:	d11b      	bne.n	1c28 <handle_ansi+0xf8>
		if (byte == ';' &&
    1bf0:	2c3b      	cmp	r4, #59	; 0x3b
    1bf2:	d034      	beq.n	1c5e <handle_ansi+0x12e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1bf4:	4b4f      	ldr	r3, [pc, #316]	; (1d34 <handle_ansi+0x204>)
    1bf6:	f3bf 8f5b 	dmb	ish
    1bfa:	e853 2f00 	ldrex	r2, [r3]
    1bfe:	f022 0208 	bic.w	r2, r2, #8
    1c02:	e843 2100 	strex	r1, r2, [r3]
    1c06:	2900      	cmp	r1, #0
    1c08:	d1f7      	bne.n	1bfa <handle_ansi+0xca>
    1c0a:	f3bf 8f5b 	dmb	ish
    1c0e:	f3bf 8f5b 	dmb	ish
    1c12:	e853 2f00 	ldrex	r2, [r3]
    1c16:	f022 0210 	bic.w	r2, r2, #16
    1c1a:	e843 2100 	strex	r1, r2, [r3]
    1c1e:	2900      	cmp	r1, #0
    1c20:	d1f7      	bne.n	1c12 <handle_ansi+0xe2>
    1c22:	f3bf 8f5b 	dmb	ish
    1c26:	e7a0      	b.n	1b6a <handle_ansi+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1c28:	f3bf 8f5b 	dmb	ish
    1c2c:	4b41      	ldr	r3, [pc, #260]	; (1d34 <handle_ansi+0x204>)
    1c2e:	681b      	ldr	r3, [r3, #0]
    1c30:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(&esc_state, ESC_ANSI_VAL_2)) {
    1c34:	f013 0f10 	tst.w	r3, #16
    1c38:	d008      	beq.n	1c4c <handle_ansi+0x11c>
				ansi_val_2 *= 10;
    1c3a:	4941      	ldr	r1, [pc, #260]	; (1d40 <handle_ansi+0x210>)
    1c3c:	680a      	ldr	r2, [r1, #0]
    1c3e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1c42:	0053      	lsls	r3, r2, #1
				ansi_val_2 += byte - '0';
    1c44:	4423      	add	r3, r4
    1c46:	3b30      	subs	r3, #48	; 0x30
    1c48:	600b      	str	r3, [r1, #0]
    1c4a:	bd38      	pop	{r3, r4, r5, pc}
				ansi_val *= 10;
    1c4c:	493a      	ldr	r1, [pc, #232]	; (1d38 <handle_ansi+0x208>)
    1c4e:	680a      	ldr	r2, [r1, #0]
    1c50:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1c54:	0053      	lsls	r3, r2, #1
				ansi_val += byte - '0';
    1c56:	4423      	add	r3, r4
    1c58:	3b30      	subs	r3, #48	; 0x30
    1c5a:	600b      	str	r3, [r1, #0]
    1c5c:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1c5e:	4b35      	ldr	r3, [pc, #212]	; (1d34 <handle_ansi+0x204>)
    1c60:	f3bf 8f5b 	dmb	ish
    1c64:	e853 2f00 	ldrex	r2, [r3]
    1c68:	f042 0110 	orr.w	r1, r2, #16
    1c6c:	e843 1000 	strex	r0, r1, [r3]
    1c70:	2800      	cmp	r0, #0
    1c72:	d1f7      	bne.n	1c64 <handle_ansi+0x134>
    1c74:	f3bf 8f5b 	dmb	ish
		if (byte == ';' &&
    1c78:	f012 0f10 	tst.w	r2, #16
    1c7c:	d1ba      	bne.n	1bf4 <handle_ansi+0xc4>
    1c7e:	e792      	b.n	1ba6 <handle_ansi+0x76>
	switch (byte) {
    1c80:	2c48      	cmp	r4, #72	; 0x48
    1c82:	d034      	beq.n	1cee <handle_ansi+0x1be>
    1c84:	2c7e      	cmp	r4, #126	; 0x7e
    1c86:	d181      	bne.n	1b8c <handle_ansi+0x5c>
		if (!end) {
    1c88:	4b2e      	ldr	r3, [pc, #184]	; (1d44 <handle_ansi+0x214>)
    1c8a:	781b      	ldrb	r3, [r3, #0]
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	f43f af7d 	beq.w	1b8c <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1c92:	2101      	movs	r1, #1
    1c94:	482c      	ldr	r0, [pc, #176]	; (1d48 <handle_ansi+0x218>)
    1c96:	f001 f923 	bl	2ee0 <printk>
		del_char(&line[cur], --end);
    1c9a:	4b28      	ldr	r3, [pc, #160]	; (1d3c <handle_ansi+0x20c>)
    1c9c:	7818      	ldrb	r0, [r3, #0]
    1c9e:	4b29      	ldr	r3, [pc, #164]	; (1d44 <handle_ansi+0x214>)
    1ca0:	7819      	ldrb	r1, [r3, #0]
    1ca2:	3901      	subs	r1, #1
    1ca4:	b2c9      	uxtb	r1, r1
    1ca6:	7019      	strb	r1, [r3, #0]
    1ca8:	4428      	add	r0, r5
    1caa:	f7ff fed5 	bl	1a58 <del_char>
		break;
    1cae:	e76d      	b.n	1b8c <handle_ansi+0x5c>
		end += ansi_val;
    1cb0:	b2c8      	uxtb	r0, r1
    1cb2:	4c24      	ldr	r4, [pc, #144]	; (1d44 <handle_ansi+0x214>)
    1cb4:	7822      	ldrb	r2, [r4, #0]
    1cb6:	4402      	add	r2, r0
    1cb8:	7022      	strb	r2, [r4, #0]
		cur -= ansi_val;
    1cba:	1a1b      	subs	r3, r3, r0
    1cbc:	4a1f      	ldr	r2, [pc, #124]	; (1d3c <handle_ansi+0x20c>)
    1cbe:	7013      	strb	r3, [r2, #0]
	printk("\x1b[%uD", count);
    1cc0:	4822      	ldr	r0, [pc, #136]	; (1d4c <handle_ansi+0x21c>)
    1cc2:	f001 f90d 	bl	2ee0 <printk>
    1cc6:	e761      	b.n	1b8c <handle_ansi+0x5c>
		if (ansi_val > end) {
    1cc8:	4b1e      	ldr	r3, [pc, #120]	; (1d44 <handle_ansi+0x214>)
    1cca:	781b      	ldrb	r3, [r3, #0]
    1ccc:	4a1a      	ldr	r2, [pc, #104]	; (1d38 <handle_ansi+0x208>)
    1cce:	6811      	ldr	r1, [r2, #0]
    1cd0:	428b      	cmp	r3, r1
    1cd2:	f4ff af5b 	bcc.w	1b8c <handle_ansi+0x5c>
		end -= ansi_val;
    1cd6:	b2ca      	uxtb	r2, r1
    1cd8:	1a9b      	subs	r3, r3, r2
    1cda:	481a      	ldr	r0, [pc, #104]	; (1d44 <handle_ansi+0x214>)
    1cdc:	7003      	strb	r3, [r0, #0]
		cur += ansi_val;
    1cde:	4b17      	ldr	r3, [pc, #92]	; (1d3c <handle_ansi+0x20c>)
    1ce0:	7818      	ldrb	r0, [r3, #0]
    1ce2:	4402      	add	r2, r0
    1ce4:	701a      	strb	r2, [r3, #0]
	printk("\x1b[%uC", count);
    1ce6:	4818      	ldr	r0, [pc, #96]	; (1d48 <handle_ansi+0x218>)
    1ce8:	f001 f8fa 	bl	2ee0 <printk>
    1cec:	e74e      	b.n	1b8c <handle_ansi+0x5c>
		if (!cur) {
    1cee:	4b13      	ldr	r3, [pc, #76]	; (1d3c <handle_ansi+0x20c>)
    1cf0:	7819      	ldrb	r1, [r3, #0]
    1cf2:	2900      	cmp	r1, #0
    1cf4:	f43f af4a 	beq.w	1b8c <handle_ansi+0x5c>
	printk("\x1b[%uD", count);
    1cf8:	4814      	ldr	r0, [pc, #80]	; (1d4c <handle_ansi+0x21c>)
    1cfa:	f001 f8f1 	bl	2ee0 <printk>
		end += cur;
    1cfe:	4911      	ldr	r1, [pc, #68]	; (1d44 <handle_ansi+0x214>)
    1d00:	4a0e      	ldr	r2, [pc, #56]	; (1d3c <handle_ansi+0x20c>)
    1d02:	780b      	ldrb	r3, [r1, #0]
    1d04:	7810      	ldrb	r0, [r2, #0]
    1d06:	4403      	add	r3, r0
    1d08:	700b      	strb	r3, [r1, #0]
		cur = 0;
    1d0a:	2300      	movs	r3, #0
    1d0c:	7013      	strb	r3, [r2, #0]
		break;
    1d0e:	e73d      	b.n	1b8c <handle_ansi+0x5c>
		if (!end) {
    1d10:	4b0c      	ldr	r3, [pc, #48]	; (1d44 <handle_ansi+0x214>)
    1d12:	7819      	ldrb	r1, [r3, #0]
    1d14:	2900      	cmp	r1, #0
    1d16:	f43f af39 	beq.w	1b8c <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1d1a:	480b      	ldr	r0, [pc, #44]	; (1d48 <handle_ansi+0x218>)
    1d1c:	f001 f8e0 	bl	2ee0 <printk>
		cur += end;
    1d20:	4906      	ldr	r1, [pc, #24]	; (1d3c <handle_ansi+0x20c>)
    1d22:	4a08      	ldr	r2, [pc, #32]	; (1d44 <handle_ansi+0x214>)
    1d24:	780b      	ldrb	r3, [r1, #0]
    1d26:	7810      	ldrb	r0, [r2, #0]
    1d28:	4403      	add	r3, r0
    1d2a:	700b      	strb	r3, [r1, #0]
		end = 0;
    1d2c:	2300      	movs	r3, #0
    1d2e:	7013      	strb	r3, [r2, #0]
		break;
    1d30:	e72c      	b.n	1b8c <handle_ansi+0x5c>
    1d32:	bf00      	nop
    1d34:	200001ac 	.word	0x200001ac
    1d38:	20000194 	.word	0x20000194
    1d3c:	200001a8 	.word	0x200001a8
    1d40:	20000198 	.word	0x20000198
    1d44:	200001a9 	.word	0x200001a9
    1d48:	0002f448 	.word	0x0002f448
    1d4c:	0002f440 	.word	0x0002f440

00001d50 <uart_console_isr>:
{
    1d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d54:	b082      	sub	sp, #8
	while (uart_irq_update(uart_console_dev) &&
    1d56:	e001      	b.n	1d5c <uart_console_isr+0xc>
	return 0;
    1d58:	2000      	movs	r0, #0
		if (!uart_irq_rx_ready(uart_console_dev)) {
    1d5a:	b9d8      	cbnz	r0, 1d94 <uart_console_isr+0x44>
	while (uart_irq_update(uart_console_dev) &&
    1d5c:	4b78      	ldr	r3, [pc, #480]	; (1f40 <uart_console_isr+0x1f0>)
    1d5e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1d60:	6843      	ldr	r3, [r0, #4]
	if (api->irq_update) {
    1d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1d64:	2b00      	cmp	r3, #0
    1d66:	f000 80e7 	beq.w	1f38 <uart_console_isr+0x1e8>
		return api->irq_update(dev);
    1d6a:	4798      	blx	r3
    1d6c:	2800      	cmp	r0, #0
    1d6e:	d037      	beq.n	1de0 <uart_console_isr+0x90>
	       uart_irq_is_pending(uart_console_dev)) {
    1d70:	4b73      	ldr	r3, [pc, #460]	; (1f40 <uart_console_isr+0x1f0>)
    1d72:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1d74:	6843      	ldr	r3, [r0, #4]
	if (api->irq_is_pending)	{
    1d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1d78:	2b00      	cmp	r3, #0
    1d7a:	f000 80df 	beq.w	1f3c <uart_console_isr+0x1ec>
		return api->irq_is_pending(dev);
    1d7e:	4798      	blx	r3
	while (uart_irq_update(uart_console_dev) &&
    1d80:	2800      	cmp	r0, #0
    1d82:	d02d      	beq.n	1de0 <uart_console_isr+0x90>
		if (!uart_irq_rx_ready(uart_console_dev)) {
    1d84:	4b6e      	ldr	r3, [pc, #440]	; (1f40 <uart_console_isr+0x1f0>)
    1d86:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1d88:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1d8c:	2b00      	cmp	r3, #0
    1d8e:	d0e3      	beq.n	1d58 <uart_console_isr+0x8>
		return api->irq_rx_ready(dev);
    1d90:	4798      	blx	r3
    1d92:	e7e2      	b.n	1d5a <uart_console_isr+0xa>
		rx = read_uart(uart_console_dev, &byte, 1);
    1d94:	2201      	movs	r2, #1
    1d96:	f10d 0107 	add.w	r1, sp, #7
    1d9a:	4b69      	ldr	r3, [pc, #420]	; (1f40 <uart_console_isr+0x1f0>)
    1d9c:	6818      	ldr	r0, [r3, #0]
    1d9e:	f7ff fe0b 	bl	19b8 <read_uart>
		if (rx < 0) {
    1da2:	2800      	cmp	r0, #0
    1da4:	db1c      	blt.n	1de0 <uart_console_isr+0x90>
		if (!cmd) {
    1da6:	4b67      	ldr	r3, [pc, #412]	; (1f44 <uart_console_isr+0x1f4>)
    1da8:	681b      	ldr	r3, [r3, #0]
    1daa:	b183      	cbz	r3, 1dce <uart_console_isr+0x7e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1dac:	f3bf 8f5b 	dmb	ish
    1db0:	4b65      	ldr	r3, [pc, #404]	; (1f48 <uart_console_isr+0x1f8>)
    1db2:	681b      	ldr	r3, [r3, #0]
    1db4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(&esc_state, ESC_ANSI)) {
    1db8:	f013 0f02 	tst.w	r3, #2
    1dbc:	d013      	beq.n	1de6 <uart_console_isr+0x96>
			handle_ansi(byte, cmd->line);
    1dbe:	4b61      	ldr	r3, [pc, #388]	; (1f44 <uart_console_isr+0x1f4>)
    1dc0:	6819      	ldr	r1, [r3, #0]
    1dc2:	3104      	adds	r1, #4
    1dc4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1dc8:	f7ff feb2 	bl	1b30 <handle_ansi>
			continue;
    1dcc:	e7c6      	b.n	1d5c <uart_console_isr+0xc>
			cmd = k_fifo_get(avail_queue, K_NO_WAIT);
    1dce:	2100      	movs	r1, #0
    1dd0:	4b5e      	ldr	r3, [pc, #376]	; (1f4c <uart_console_isr+0x1fc>)
    1dd2:	6818      	ldr	r0, [r3, #0]
    1dd4:	f026 f93e 	bl	28054 <k_queue_get>
    1dd8:	4b5a      	ldr	r3, [pc, #360]	; (1f44 <uart_console_isr+0x1f4>)
    1dda:	6018      	str	r0, [r3, #0]
			if (!cmd) {
    1ddc:	2800      	cmp	r0, #0
    1dde:	d1e5      	bne.n	1dac <uart_console_isr+0x5c>
}
    1de0:	b002      	add	sp, #8
    1de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1de6:	4b58      	ldr	r3, [pc, #352]	; (1f48 <uart_console_isr+0x1f8>)
    1de8:	f3bf 8f5b 	dmb	ish
    1dec:	e853 2f00 	ldrex	r2, [r3]
    1df0:	f022 0101 	bic.w	r1, r2, #1
    1df4:	e843 1000 	strex	r0, r1, [r3]
    1df8:	2800      	cmp	r0, #0
    1dfa:	d1f7      	bne.n	1dec <uart_console_isr+0x9c>
    1dfc:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(&esc_state, ESC_ESC)) {
    1e00:	f012 0f01 	tst.w	r2, #1
    1e04:	d01d      	beq.n	1e42 <uart_console_isr+0xf2>
			if (byte == ANSI_ESC) {
    1e06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1e0a:	2b5b      	cmp	r3, #91	; 0x5b
    1e0c:	d1a6      	bne.n	1d5c <uart_console_isr+0xc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1e0e:	4b4e      	ldr	r3, [pc, #312]	; (1f48 <uart_console_isr+0x1f8>)
    1e10:	f3bf 8f5b 	dmb	ish
    1e14:	e853 2f00 	ldrex	r2, [r3]
    1e18:	f042 0202 	orr.w	r2, r2, #2
    1e1c:	e843 2100 	strex	r1, r2, [r3]
    1e20:	2900      	cmp	r1, #0
    1e22:	d1f7      	bne.n	1e14 <uart_console_isr+0xc4>
    1e24:	f3bf 8f5b 	dmb	ish
    1e28:	f3bf 8f5b 	dmb	ish
    1e2c:	e853 2f00 	ldrex	r2, [r3]
    1e30:	f042 0204 	orr.w	r2, r2, #4
    1e34:	e843 2100 	strex	r1, r2, [r3]
    1e38:	2900      	cmp	r1, #0
    1e3a:	d1f7      	bne.n	1e2c <uart_console_isr+0xdc>
    1e3c:	f3bf 8f5b 	dmb	ish
			continue;
    1e40:	e78c      	b.n	1d5c <uart_console_isr+0xc>
		if (!isprint(byte)) {
    1e42:	f027 fb91 	bl	29568 <__locale_ctype_ptr>
    1e46:	f89d 1007 	ldrb.w	r1, [sp, #7]
    1e4a:	4408      	add	r0, r1
    1e4c:	7843      	ldrb	r3, [r0, #1]
    1e4e:	f013 0f97 	tst.w	r3, #151	; 0x97
    1e52:	d15f      	bne.n	1f14 <uart_console_isr+0x1c4>
			switch (byte) {
    1e54:	290d      	cmp	r1, #13
    1e56:	d03c      	beq.n	1ed2 <uart_console_isr+0x182>
    1e58:	d916      	bls.n	1e88 <uart_console_isr+0x138>
    1e5a:	291b      	cmp	r1, #27
    1e5c:	d02b      	beq.n	1eb6 <uart_console_isr+0x166>
    1e5e:	297f      	cmp	r1, #127	; 0x7f
    1e60:	f47f af7c 	bne.w	1d5c <uart_console_isr+0xc>
				if (cur > 0) {
    1e64:	4b3a      	ldr	r3, [pc, #232]	; (1f50 <uart_console_isr+0x200>)
    1e66:	781b      	ldrb	r3, [r3, #0]
    1e68:	2b00      	cmp	r3, #0
    1e6a:	f43f af77 	beq.w	1d5c <uart_console_isr+0xc>
					del_char(&cmd->line[--cur], end);
    1e6e:	4a35      	ldr	r2, [pc, #212]	; (1f44 <uart_console_isr+0x1f4>)
    1e70:	6812      	ldr	r2, [r2, #0]
    1e72:	3b01      	subs	r3, #1
    1e74:	b2db      	uxtb	r3, r3
    1e76:	4936      	ldr	r1, [pc, #216]	; (1f50 <uart_console_isr+0x200>)
    1e78:	700b      	strb	r3, [r1, #0]
    1e7a:	4413      	add	r3, r2
    1e7c:	4a35      	ldr	r2, [pc, #212]	; (1f54 <uart_console_isr+0x204>)
    1e7e:	7811      	ldrb	r1, [r2, #0]
    1e80:	1d18      	adds	r0, r3, #4
    1e82:	f7ff fde9 	bl	1a58 <del_char>
    1e86:	e769      	b.n	1d5c <uart_console_isr+0xc>
			switch (byte) {
    1e88:	2909      	cmp	r1, #9
    1e8a:	f47f af67 	bne.w	1d5c <uart_console_isr+0xc>
				if (completion_cb && !end) {
    1e8e:	4b32      	ldr	r3, [pc, #200]	; (1f58 <uart_console_isr+0x208>)
    1e90:	681b      	ldr	r3, [r3, #0]
    1e92:	2b00      	cmp	r3, #0
    1e94:	f43f af62 	beq.w	1d5c <uart_console_isr+0xc>
    1e98:	4a2e      	ldr	r2, [pc, #184]	; (1f54 <uart_console_isr+0x204>)
    1e9a:	7812      	ldrb	r2, [r2, #0]
    1e9c:	2a00      	cmp	r2, #0
    1e9e:	f47f af5d 	bne.w	1d5c <uart_console_isr+0xc>
					cur += completion_cb(cmd->line, cur);
    1ea2:	4a28      	ldr	r2, [pc, #160]	; (1f44 <uart_console_isr+0x1f4>)
    1ea4:	6810      	ldr	r0, [r2, #0]
    1ea6:	4c2a      	ldr	r4, [pc, #168]	; (1f50 <uart_console_isr+0x200>)
    1ea8:	7821      	ldrb	r1, [r4, #0]
    1eaa:	3004      	adds	r0, #4
    1eac:	4798      	blx	r3
    1eae:	7823      	ldrb	r3, [r4, #0]
    1eb0:	4403      	add	r3, r0
    1eb2:	7023      	strb	r3, [r4, #0]
			continue;
    1eb4:	e752      	b.n	1d5c <uart_console_isr+0xc>
    1eb6:	4b24      	ldr	r3, [pc, #144]	; (1f48 <uart_console_isr+0x1f8>)
    1eb8:	f3bf 8f5b 	dmb	ish
    1ebc:	e853 2f00 	ldrex	r2, [r3]
    1ec0:	f042 0201 	orr.w	r2, r2, #1
    1ec4:	e843 2100 	strex	r1, r2, [r3]
    1ec8:	2900      	cmp	r1, #0
    1eca:	d1f7      	bne.n	1ebc <uart_console_isr+0x16c>
    1ecc:	f3bf 8f5b 	dmb	ish
    1ed0:	e744      	b.n	1d5c <uart_console_isr+0xc>
				cmd->line[cur + end] = '\0';
    1ed2:	4d1c      	ldr	r5, [pc, #112]	; (1f44 <uart_console_isr+0x1f4>)
    1ed4:	682b      	ldr	r3, [r5, #0]
    1ed6:	4f1e      	ldr	r7, [pc, #120]	; (1f50 <uart_console_isr+0x200>)
    1ed8:	783a      	ldrb	r2, [r7, #0]
    1eda:	4e1e      	ldr	r6, [pc, #120]	; (1f54 <uart_console_isr+0x204>)
    1edc:	7831      	ldrb	r1, [r6, #0]
    1ede:	440a      	add	r2, r1
    1ee0:	4413      	add	r3, r2
    1ee2:	2400      	movs	r4, #0
    1ee4:	711c      	strb	r4, [r3, #4]
				uart_poll_out(uart_console_dev, '\r');
    1ee6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1f40 <uart_console_isr+0x1f0>
    1eea:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    1eee:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1ef0:	685b      	ldr	r3, [r3, #4]
    1ef2:	210d      	movs	r1, #13
    1ef4:	4798      	blx	r3
				uart_poll_out(uart_console_dev, '\n');
    1ef6:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    1efa:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1efc:	685b      	ldr	r3, [r3, #4]
    1efe:	210a      	movs	r1, #10
    1f00:	4798      	blx	r3
				cur = 0;
    1f02:	703c      	strb	r4, [r7, #0]
				end = 0;
    1f04:	7034      	strb	r4, [r6, #0]
				k_fifo_put(lines_queue, cmd);
    1f06:	6829      	ldr	r1, [r5, #0]
    1f08:	4b14      	ldr	r3, [pc, #80]	; (1f5c <uart_console_isr+0x20c>)
    1f0a:	6818      	ldr	r0, [r3, #0]
    1f0c:	f026 f87a 	bl	28004 <k_queue_append>
				cmd = NULL;
    1f10:	602c      	str	r4, [r5, #0]
				break;
    1f12:	e723      	b.n	1d5c <uart_console_isr+0xc>
		if (cur + end < sizeof(cmd->line) - 1) {
    1f14:	4b0e      	ldr	r3, [pc, #56]	; (1f50 <uart_console_isr+0x200>)
    1f16:	781b      	ldrb	r3, [r3, #0]
    1f18:	4a0e      	ldr	r2, [pc, #56]	; (1f54 <uart_console_isr+0x204>)
    1f1a:	7812      	ldrb	r2, [r2, #0]
    1f1c:	18d0      	adds	r0, r2, r3
    1f1e:	287e      	cmp	r0, #126	; 0x7e
    1f20:	f63f af1c 	bhi.w	1d5c <uart_console_isr+0xc>
			insert_char(&cmd->line[cur++], byte, end);
    1f24:	4807      	ldr	r0, [pc, #28]	; (1f44 <uart_console_isr+0x1f4>)
    1f26:	6800      	ldr	r0, [r0, #0]
    1f28:	1c5d      	adds	r5, r3, #1
    1f2a:	4c09      	ldr	r4, [pc, #36]	; (1f50 <uart_console_isr+0x200>)
    1f2c:	7025      	strb	r5, [r4, #0]
    1f2e:	4418      	add	r0, r3
    1f30:	3004      	adds	r0, #4
    1f32:	f7ff fdc9 	bl	1ac8 <insert_char>
    1f36:	e711      	b.n	1d5c <uart_console_isr+0xc>
	return 0;
    1f38:	2000      	movs	r0, #0
    1f3a:	e717      	b.n	1d6c <uart_console_isr+0x1c>
	return 0;
    1f3c:	2000      	movs	r0, #0
    1f3e:	e71f      	b.n	1d80 <uart_console_isr+0x30>
    1f40:	200001b4 	.word	0x200001b4
    1f44:	200001a0 	.word	0x200001a0
    1f48:	200001ac 	.word	0x200001ac
    1f4c:	2000019c 	.word	0x2000019c
    1f50:	200001a8 	.word	0x200001a8
    1f54:	200001a9 	.word	0x200001a9
    1f58:	200001a4 	.word	0x200001a4
    1f5c:	200001b0 	.word	0x200001b0

00001f60 <uart_register_input>:

void uart_register_input(struct k_fifo *avail, struct k_fifo *lines,
			 u8_t (*completion)(char *str, u8_t len))
{
    1f60:	b508      	push	{r3, lr}
	avail_queue = avail;
    1f62:	4b04      	ldr	r3, [pc, #16]	; (1f74 <uart_register_input+0x14>)
    1f64:	6018      	str	r0, [r3, #0]
	lines_queue = lines;
    1f66:	4b04      	ldr	r3, [pc, #16]	; (1f78 <uart_register_input+0x18>)
    1f68:	6019      	str	r1, [r3, #0]
	completion_cb = completion;
    1f6a:	4b04      	ldr	r3, [pc, #16]	; (1f7c <uart_register_input+0x1c>)
    1f6c:	601a      	str	r2, [r3, #0]

	console_input_init();
    1f6e:	f7ff fd39 	bl	19e4 <console_input_init>
    1f72:	bd08      	pop	{r3, pc}
    1f74:	2000019c 	.word	0x2000019c
    1f78:	200001b0 	.word	0x200001b0
    1f7c:	200001a4 	.word	0x200001a4

00001f80 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    1f80:	b508      	push	{r3, lr}
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    1f82:	4802      	ldr	r0, [pc, #8]	; (1f8c <uart_console_hook_install+0xc>)
    1f84:	f000 fe70 	bl	2c68 <__printk_hook_install>
    1f88:	bd08      	pop	{r3, pc}
    1f8a:	bf00      	nop
    1f8c:	0000198d 	.word	0x0000198d

00001f90 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1f90:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1f92:	4804      	ldr	r0, [pc, #16]	; (1fa4 <uart_console_init+0x14>)
    1f94:	f025 f906 	bl	271a4 <device_get_binding>
    1f98:	4b03      	ldr	r3, [pc, #12]	; (1fa8 <uart_console_init+0x18>)
    1f9a:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1f9c:	f7ff fff0 	bl	1f80 <uart_console_hook_install>

	return 0;
}
    1fa0:	2000      	movs	r0, #0
    1fa2:	bd08      	pop	{r3, pc}
    1fa4:	0002f450 	.word	0x0002f450
    1fa8:	200001b4 	.word	0x200001b4

00001fac <sys_rand32_get>:
 *
 * @return a 32-bit number
 */

u32_t sys_rand32_get(void)
{
    1fac:	b508      	push	{r3, lr}
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
    1fae:	f000 fa73 	bl	2498 <_timer_cycle_get_32>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1fb2:	4b08      	ldr	r3, [pc, #32]	; (1fd4 <sys_rand32_get+0x28>)
    1fb4:	f3bf 8f5b 	dmb	ish
    1fb8:	e853 2f00 	ldrex	r2, [r3]
    1fbc:	4906      	ldr	r1, [pc, #24]	; (1fd8 <sys_rand32_get+0x2c>)
    1fbe:	1851      	adds	r1, r2, r1
    1fc0:	e843 1e00 	strex	lr, r1, [r3]
    1fc4:	f1be 0f00 	cmp.w	lr, #0
    1fc8:	d1f6      	bne.n	1fb8 <sys_rand32_get+0xc>
    1fca:	f3bf 8f5b 	dmb	ish
}
    1fce:	4410      	add	r0, r2
    1fd0:	bd08      	pop	{r3, pc}
    1fd2:	bf00      	nop
    1fd4:	200001b8 	.word	0x200001b8
    1fd8:	3b9aca0d 	.word	0x3b9aca0d

00001fdc <baudrate_set>:
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1fdc:	6803      	ldr	r3, [r0, #0]
    1fde:	689b      	ldr	r3, [r3, #8]
    1fe0:	681b      	ldr	r3, [r3, #0]

	u32_t divisor; /* baud rate divisor */

	/* Use the common nRF5 macros */
	switch (baudrate) {
    1fe2:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    1fe6:	d05b      	beq.n	20a0 <baudrate_set+0xc4>
    1fe8:	d910      	bls.n	200c <baudrate_set+0x30>
    1fea:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    1fee:	d05e      	beq.n	20ae <baudrate_set+0xd2>
    1ff0:	d833      	bhi.n	205a <baudrate_set+0x7e>
    1ff2:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    1ff6:	d055      	beq.n	20a4 <baudrate_set+0xc8>
    1ff8:	d929      	bls.n	204e <baudrate_set+0x72>
    1ffa:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    1ffe:	d054      	beq.n	20aa <baudrate_set+0xce>
    2000:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    2004:	d11b      	bne.n	203e <baudrate_set+0x62>
		break;
	case 76800:
		divisor = NRF5_UART_BAUDRATE_76800;
		break;
	case 115200:
		divisor = NRF5_UART_BAUDRATE_115200;
    2006:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
		break;
    200a:	e03b      	b.n	2084 <baudrate_set+0xa8>
	switch (baudrate) {
    200c:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    2010:	d03f      	beq.n	2092 <baudrate_set+0xb6>
    2012:	d90b      	bls.n	202c <baudrate_set+0x50>
    2014:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    2018:	d03e      	beq.n	2098 <baudrate_set+0xbc>
    201a:	d913      	bls.n	2044 <baudrate_set+0x68>
    201c:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    2020:	d03c      	beq.n	209c <baudrate_set+0xc0>
    2022:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    2026:	d10a      	bne.n	203e <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_19200;
    2028:	4a27      	ldr	r2, [pc, #156]	; (20c8 <baudrate_set+0xec>)
		break;
    202a:	e02b      	b.n	2084 <baudrate_set+0xa8>
	switch (baudrate) {
    202c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2030:	d046      	beq.n	20c0 <baudrate_set+0xe4>
    2032:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    2036:	d029      	beq.n	208c <baudrate_set+0xb0>
    2038:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    203c:	d020      	beq.n	2080 <baudrate_set+0xa4>
		break;
	case 1000000:
		divisor = NRF5_UART_BAUDRATE_1000000;
		break;
	default:
		return -EINVAL;
    203e:	f06f 0015 	mvn.w	r0, #21
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;

	return 0;
}
    2042:	4770      	bx	lr
	switch (baudrate) {
    2044:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    2048:	d1f9      	bne.n	203e <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_4800;
    204a:	4a20      	ldr	r2, [pc, #128]	; (20cc <baudrate_set+0xf0>)
		break;
    204c:	e01a      	b.n	2084 <baudrate_set+0xa8>
	switch (baudrate) {
    204e:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    2052:	d1f4      	bne.n	203e <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_38400;
    2054:	f44f 021d 	mov.w	r2, #10289152	; 0x9d0000
		break;
    2058:	e014      	b.n	2084 <baudrate_set+0xa8>
	switch (baudrate) {
    205a:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    205e:	d029      	beq.n	20b4 <baudrate_set+0xd8>
    2060:	d908      	bls.n	2074 <baudrate_set+0x98>
    2062:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    2066:	d028      	beq.n	20ba <baudrate_set+0xde>
    2068:	4a19      	ldr	r2, [pc, #100]	; (20d0 <baudrate_set+0xf4>)
    206a:	4291      	cmp	r1, r2
    206c:	d1e7      	bne.n	203e <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_1000000;
    206e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
		break;
    2072:	e007      	b.n	2084 <baudrate_set+0xa8>
	switch (baudrate) {
    2074:	4a17      	ldr	r2, [pc, #92]	; (20d4 <baudrate_set+0xf8>)
    2076:	4291      	cmp	r1, r2
    2078:	d1e1      	bne.n	203e <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_250000;
    207a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
		break;
    207e:	e001      	b.n	2084 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_300;
    2080:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    2084:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    2088:	2000      	movs	r0, #0
    208a:	4770      	bx	lr
		divisor = NRF5_UART_BAUDRATE_1200;
    208c:	f44f 229e 	mov.w	r2, #323584	; 0x4f000
		break;
    2090:	e7f8      	b.n	2084 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_2400;
    2092:	f44f 221d 	mov.w	r2, #643072	; 0x9d000
		break;
    2096:	e7f5      	b.n	2084 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_9600;
    2098:	4a0f      	ldr	r2, [pc, #60]	; (20d8 <baudrate_set+0xfc>)
		break;
    209a:	e7f3      	b.n	2084 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_14400;
    209c:	4a0f      	ldr	r2, [pc, #60]	; (20dc <baudrate_set+0x100>)
		break;
    209e:	e7f1      	b.n	2084 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_28800;
    20a0:	4a0f      	ldr	r2, [pc, #60]	; (20e0 <baudrate_set+0x104>)
		break;
    20a2:	e7ef      	b.n	2084 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_57600;
    20a4:	f44f 026b 	mov.w	r2, #15400960	; 0xeb0000
		break;
    20a8:	e7ec      	b.n	2084 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_76800;
    20aa:	4a0e      	ldr	r2, [pc, #56]	; (20e4 <baudrate_set+0x108>)
		break;
    20ac:	e7ea      	b.n	2084 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_230400;
    20ae:	f04f 726c 	mov.w	r2, #61865984	; 0x3b00000
		break;
    20b2:	e7e7      	b.n	2084 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_460800;
    20b4:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
		break;
    20b8:	e7e4      	b.n	2084 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_921600;
    20ba:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
		break;
    20be:	e7e1      	b.n	2084 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_600;
    20c0:	f44f 321c 	mov.w	r2, #159744	; 0x27000
    20c4:	e7de      	b.n	2084 <baudrate_set+0xa8>
    20c6:	bf00      	nop
    20c8:	004ea000 	.word	0x004ea000
    20cc:	0013b000 	.word	0x0013b000
    20d0:	000f4240 	.word	0x000f4240
    20d4:	0003d090 	.word	0x0003d090
    20d8:	00275000 	.word	0x00275000
    20dc:	003af000 	.word	0x003af000
    20e0:	0075c000 	.word	0x0075c000
    20e4:	013a9000 	.word	0x013a9000

000020e8 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    20e8:	6803      	ldr	r3, [r0, #0]
    20ea:	689b      	ldr	r3, [r3, #8]
    20ec:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    20ee:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    20f2:	b132      	cbz	r2, 2102 <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    20f4:	2000      	movs	r0, #0
    20f6:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    20fa:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    20fe:	700b      	strb	r3, [r1, #0]

	return 0;
    2100:	4770      	bx	lr
		return -1;
    2102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2106:	4770      	bx	lr

00002108 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2108:	6803      	ldr	r3, [r0, #0]
    210a:	689b      	ldr	r3, [r3, #8]
    210c:	681a      	ldr	r2, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    210e:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    2112:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    2116:	2b00      	cmp	r3, #0
    2118:	d0fb      	beq.n	2112 <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    211a:	2300      	movs	r3, #0
    211c:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c

	return c;
}
    2120:	4608      	mov	r0, r1
    2122:	4770      	bx	lr

00002124 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2124:	6803      	ldr	r3, [r0, #0]
    2126:	689b      	ldr	r3, [r3, #8]
    2128:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    212a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    212e:	b132      	cbz	r2, 213e <uart_nrf5_err_check+0x1a>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    2130:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    2134:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    2138:	f000 000f 	and.w	r0, r0, #15
    213c:	4770      	bx	lr
	u32_t error = 0;
    213e:	2000      	movs	r0, #0
    2140:	e7fa      	b.n	2138 <uart_nrf5_err_check+0x14>

00002142 <uart_nrf5_fifo_fill>:

#ifdef CONFIG_UART_INTERRUPT_DRIVEN

/** Interrupt driven FIFO fill function */
static int uart_nrf5_fifo_fill(struct device *dev, const u8_t *tx_data, int len)
{
    2142:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    2144:	6803      	ldr	r3, [r0, #0]
    2146:	689b      	ldr	r3, [r3, #8]
    2148:	681c      	ldr	r4, [r3, #0]
	u8_t num_tx = 0;
    214a:	2300      	movs	r3, #0

	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    214c:	e007      	b.n	215e <uart_nrf5_fifo_fill+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_TXDRDY = 0;
    214e:	2000      	movs	r0, #0
    2150:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c

		/* Send a character */
		uart->TXD = (u8_t)tx_data[num_tx++];
    2154:	1c58      	adds	r0, r3, #1
    2156:	5ccb      	ldrb	r3, [r1, r3]
    2158:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    215c:	b2c3      	uxtb	r3, r0
	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    215e:	4618      	mov	r0, r3
    2160:	1ad5      	subs	r5, r2, r3
    2162:	2d00      	cmp	r5, #0
    2164:	dd03      	ble.n	216e <uart_nrf5_fifo_fill+0x2c>
    2166:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
    216a:	2d00      	cmp	r5, #0
    216c:	d1ef      	bne.n	214e <uart_nrf5_fifo_fill+0xc>
	}

	return (int)num_tx;
}
    216e:	bc30      	pop	{r4, r5}
    2170:	4770      	bx	lr

00002172 <uart_nrf5_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrf5_fifo_read(struct device *dev, u8_t *rx_data, const int size)
{
    2172:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    2174:	6803      	ldr	r3, [r0, #0]
    2176:	689b      	ldr	r3, [r3, #8]
    2178:	681c      	ldr	r4, [r3, #0]
	u8_t num_rx = 0;
    217a:	2300      	movs	r3, #0

	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    217c:	e007      	b.n	218e <uart_nrf5_fifo_read+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_RXDRDY = 0;
    217e:	2000      	movs	r0, #0
    2180:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108

		/* Receive a character */
		rx_data[num_rx++] = (u8_t)uart->RXD;
    2184:	1c58      	adds	r0, r3, #1
    2186:	f8d4 5518 	ldr.w	r5, [r4, #1304]	; 0x518
    218a:	54cd      	strb	r5, [r1, r3]
    218c:	b2c3      	uxtb	r3, r0
	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    218e:	4618      	mov	r0, r3
    2190:	1ad5      	subs	r5, r2, r3
    2192:	2d00      	cmp	r5, #0
    2194:	dd03      	ble.n	219e <uart_nrf5_fifo_read+0x2c>
    2196:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    219a:	2d00      	cmp	r5, #0
    219c:	d1ef      	bne.n	217e <uart_nrf5_fifo_read+0xc>
	}

	return num_rx;
}
    219e:	bc30      	pop	{r4, r5}
    21a0:	4770      	bx	lr

000021a2 <uart_nrf5_irq_tx_enable>:

/** Interrupt driven transfer enabling function */
static void uart_nrf5_irq_tx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    21a2:	6803      	ldr	r3, [r0, #0]
    21a4:	689b      	ldr	r3, [r3, #8]
    21a6:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_TX;
    21a8:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    21ac:	f043 0308 	orr.w	r3, r3, #8
    21b0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    21b4:	4770      	bx	lr

000021b6 <uart_nrf5_irq_tx_disable>:
}

/** Interrupt driven transfer disabling function */
static void uart_nrf5_irq_tx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    21b6:	6803      	ldr	r3, [r0, #0]
    21b8:	689b      	ldr	r3, [r3, #8]
    21ba:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_TX;
    21bc:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    21c0:	f043 0308 	orr.w	r3, r3, #8
    21c4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    21c8:	4770      	bx	lr

000021ca <uart_nrf5_irq_tx_ready>:
}

/** Interrupt driven transfer ready function */
static int uart_nrf5_irq_tx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    21ca:	6803      	ldr	r3, [r0, #0]
    21cc:	689b      	ldr	r3, [r3, #8]
    21ce:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_TXDRDY;
    21d0:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    21d4:	4770      	bx	lr

000021d6 <uart_nrf5_irq_rx_enable>:

/** Interrupt driven receiver enabling function */
static void uart_nrf5_irq_rx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    21d6:	6803      	ldr	r3, [r0, #0]
    21d8:	689b      	ldr	r3, [r3, #8]
    21da:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_RX;
    21dc:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    21e0:	f043 0304 	orr.w	r3, r3, #4
    21e4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    21e8:	4770      	bx	lr

000021ea <uart_nrf5_irq_rx_disable>:
}

/** Interrupt driven receiver disabling function */
static void uart_nrf5_irq_rx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    21ea:	6803      	ldr	r3, [r0, #0]
    21ec:	689b      	ldr	r3, [r3, #8]
    21ee:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_RX;
    21f0:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    21f4:	f043 0304 	orr.w	r3, r3, #4
    21f8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    21fc:	4770      	bx	lr

000021fe <uart_nrf5_irq_tx_complete>:
}

/** Interrupt driven transfer empty function */
static int uart_nrf5_irq_tx_complete(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    21fe:	6803      	ldr	r3, [r0, #0]
    2200:	689b      	ldr	r3, [r3, #8]
    2202:	681b      	ldr	r3, [r3, #0]

	return !(uart->EVENTS_TXDRDY);
    2204:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    2208:	fab0 f080 	clz	r0, r0
    220c:	0940      	lsrs	r0, r0, #5
    220e:	4770      	bx	lr

00002210 <uart_nrf5_irq_rx_ready>:

/** Interrupt driven receiver ready function */
static int uart_nrf5_irq_rx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2210:	6803      	ldr	r3, [r0, #0]
    2212:	689b      	ldr	r3, [r3, #8]
    2214:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_RXDRDY;
    2216:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    221a:	4770      	bx	lr

0000221c <uart_nrf5_irq_err_enable>:

/** Interrupt driven error enabling function */
static void uart_nrf5_irq_err_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    221c:	6803      	ldr	r3, [r0, #0]
    221e:	689b      	ldr	r3, [r3, #8]
    2220:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_ERROR;
    2222:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    2226:	f043 0310 	orr.w	r3, r3, #16
    222a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    222e:	4770      	bx	lr

00002230 <uart_nrf5_irq_err_disable>:
}

/** Interrupt driven error disabling function */
static void uart_nrf5_irq_err_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2230:	6803      	ldr	r3, [r0, #0]
    2232:	689b      	ldr	r3, [r3, #8]
    2234:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_ERROR;
    2236:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    223a:	f043 0310 	orr.w	r3, r3, #16
    223e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2242:	4770      	bx	lr

00002244 <uart_nrf5_irq_is_pending>:
}

/** Interrupt driven pending status function */
static int uart_nrf5_irq_is_pending(struct device *dev)
{
    2244:	b510      	push	{r4, lr}
    2246:	4604      	mov	r4, r0
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    2248:	f7ff ffbf 	bl	21ca <uart_nrf5_irq_tx_ready>
    224c:	b110      	cbz	r0, 2254 <uart_nrf5_irq_is_pending+0x10>
    224e:	2301      	movs	r3, #1
}
    2250:	4618      	mov	r0, r3
    2252:	bd10      	pop	{r4, pc}
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    2254:	4620      	mov	r0, r4
    2256:	f7ff ffdb 	bl	2210 <uart_nrf5_irq_rx_ready>
    225a:	4603      	mov	r3, r0
    225c:	2800      	cmp	r0, #0
    225e:	d0f7      	beq.n	2250 <uart_nrf5_irq_is_pending+0xc>
    2260:	2301      	movs	r3, #1
    2262:	e7f5      	b.n	2250 <uart_nrf5_irq_is_pending+0xc>

00002264 <uart_nrf5_irq_update>:

/** Interrupt driven interrupt update function */
static int uart_nrf5_irq_update(struct device *dev)
{
	return 1;
}
    2264:	2001      	movs	r0, #1
    2266:	4770      	bx	lr

00002268 <uart_nrf5_irq_callback_set>:

/** Set the callback function */
static void uart_nrf5_irq_callback_set(struct device *dev, uart_irq_callback_t cb)
{
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    2268:	6883      	ldr	r3, [r0, #8]

	dev_data->cb = cb;
    226a:	6059      	str	r1, [r3, #4]
    226c:	4770      	bx	lr

0000226e <uart_nrf5_isr>:
 * @param arg Argument to ISR.
 *
 * @return N/A
 */
void uart_nrf5_isr(void *arg)
{
    226e:	b508      	push	{r3, lr}
	struct device *dev = arg;
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    2270:	6883      	ldr	r3, [r0, #8]

	if (dev_data->cb) {
    2272:	685b      	ldr	r3, [r3, #4]
    2274:	b103      	cbz	r3, 2278 <uart_nrf5_isr+0xa>
		dev_data->cb(dev);
    2276:	4798      	blx	r3
    2278:	bd08      	pop	{r3, pc}

0000227a <uart_nrf5_irq_config>:
	    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE);


#ifdef CONFIG_UART_INTERRUPT_DRIVEN
static void uart_nrf5_irq_config(struct device *port)
{
    227a:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_UART0_IRQn,
    227c:	2200      	movs	r2, #0
    227e:	2101      	movs	r1, #1
    2280:	2002      	movs	r0, #2
    2282:	f024 fdeb 	bl	26e5c <_irq_priority_set>
		    CONFIG_UART_NRF5_IRQ_PRI,
		    uart_nrf5_isr, DEVICE_GET(uart_nrf5_0),
		    0);
	irq_enable(NRF5_IRQ_UART0_IRQn);
    2286:	2002      	movs	r0, #2
    2288:	f024 fdbe 	bl	26e08 <_arch_irq_enable>
    228c:	bd08      	pop	{r3, pc}
	...

00002290 <uart_nrf5_init>:
{
    2290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2292:	4604      	mov	r4, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
    2294:	6803      	ldr	r3, [r0, #0]
    2296:	689b      	ldr	r3, [r3, #8]
    2298:	681d      	ldr	r5, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    229a:	481d      	ldr	r0, [pc, #116]	; (2310 <uart_nrf5_init+0x80>)
    229c:	f024 ff82 	bl	271a4 <device_get_binding>
    22a0:	4606      	mov	r6, r0
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_configure(struct device *port, u32_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;
    22a2:	6843      	ldr	r3, [r0, #4]

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    22a4:	681f      	ldr	r7, [r3, #0]
    22a6:	f240 1301 	movw	r3, #257	; 0x101
    22aa:	2206      	movs	r2, #6
    22ac:	2100      	movs	r1, #0
    22ae:	47b8      	blx	r7
	const struct gpio_driver_api *api = port->driver_api;
    22b0:	6873      	ldr	r3, [r6, #4]
	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    22b2:	681f      	ldr	r7, [r3, #0]
    22b4:	2300      	movs	r3, #0
    22b6:	2208      	movs	r2, #8
    22b8:	4619      	mov	r1, r3
    22ba:	4630      	mov	r0, r6
    22bc:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    22be:	2306      	movs	r3, #6
    22c0:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    22c4:	2308      	movs	r3, #8
    22c6:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    22ca:	68a3      	ldr	r3, [r4, #8]
    22cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    22d0:	601a      	str	r2, [r3, #0]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    22d2:	68a3      	ldr	r3, [r4, #8]
		     DEV_CFG(dev)->sys_clk_freq);
    22d4:	6822      	ldr	r2, [r4, #0]
    22d6:	6892      	ldr	r2, [r2, #8]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    22d8:	6852      	ldr	r2, [r2, #4]
    22da:	6819      	ldr	r1, [r3, #0]
    22dc:	4620      	mov	r0, r4
    22de:	f7ff fe7d 	bl	1fdc <baudrate_set>
	if (err) {
    22e2:	4606      	mov	r6, r0
    22e4:	b108      	cbz	r0, 22ea <uart_nrf5_init+0x5a>
}
    22e6:	4630      	mov	r0, r6
    22e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    22ea:	2304      	movs	r3, #4
    22ec:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    22f0:	2300      	movs	r3, #0
    22f2:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    22f6:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    22fa:	2301      	movs	r3, #1
    22fc:	60ab      	str	r3, [r5, #8]
	uart->TASKS_STARTRX = 1;
    22fe:	602b      	str	r3, [r5, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    2300:	4b04      	ldr	r3, [pc, #16]	; (2314 <uart_nrf5_init+0x84>)
    2302:	6063      	str	r3, [r4, #4]
	DEV_CFG(dev)->irq_config_func(dev);
    2304:	6823      	ldr	r3, [r4, #0]
    2306:	689b      	ldr	r3, [r3, #8]
    2308:	689b      	ldr	r3, [r3, #8]
    230a:	4620      	mov	r0, r4
    230c:	4798      	blx	r3
	return 0;
    230e:	e7ea      	b.n	22e6 <uart_nrf5_init+0x56>
    2310:	0002f464 	.word	0x0002f464
    2314:	0002f490 	.word	0x0002f490

00002318 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    2318:	4b08      	ldr	r3, [pc, #32]	; (233c <rtc_compare_set+0x24>)
    231a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    231e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    2322:	1ac0      	subs	r0, r0, r3
    2324:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2328:	3802      	subs	r0, #2
    232a:	4b05      	ldr	r3, [pc, #20]	; (2340 <rtc_compare_set+0x28>)
    232c:	4298      	cmp	r0, r3
    232e:	d904      	bls.n	233a <rtc_compare_set+0x22>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2330:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2334:	4b03      	ldr	r3, [pc, #12]	; (2344 <rtc_compare_set+0x2c>)
    2336:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    233a:	4770      	bx	lr
    233c:	40011000 	.word	0x40011000
    2340:	007ffffd 	.word	0x007ffffd
    2344:	e000e100 	.word	0xe000e100

00002348 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    2348:	b508      	push	{r3, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    234a:	4b15      	ldr	r3, [pc, #84]	; (23a0 <rtc_announce_set_next+0x58>)
    234c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    2350:	4a14      	ldr	r2, [pc, #80]	; (23a4 <rtc_announce_set_next+0x5c>)
    2352:	6811      	ldr	r1, [r2, #0]
    2354:	1a5b      	subs	r3, r3, r1
    2356:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    235a:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
    235e:	d917      	bls.n	2390 <rtc_announce_set_next+0x48>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    2360:	4a11      	ldr	r2, [pc, #68]	; (23a8 <rtc_announce_set_next+0x60>)
    2362:	fba2 0203 	umull	r0, r2, r2, r3
    2366:	1a9b      	subs	r3, r3, r2
    2368:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    236c:	0a1b      	lsrs	r3, r3, #8

		if (sys_elapsed > expected_sys_ticks) {
    236e:	4a0f      	ldr	r2, [pc, #60]	; (23ac <rtc_announce_set_next+0x64>)
    2370:	6810      	ldr	r0, [r2, #0]
    2372:	4283      	cmp	r3, r0
    2374:	d800      	bhi.n	2378 <rtc_announce_set_next+0x30>
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    2376:	4618      	mov	r0, r3

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    2378:	f240 1347 	movw	r3, #327	; 0x147
    237c:	fb03 1300 	mla	r3, r3, r0, r1
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    2380:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    2384:	4a07      	ldr	r2, [pc, #28]	; (23a4 <rtc_announce_set_next+0x5c>)
    2386:	6013      	str	r3, [r2, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    2388:	4b09      	ldr	r3, [pc, #36]	; (23b0 <rtc_announce_set_next+0x68>)
    238a:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    238c:	f026 fa52 	bl	28834 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    2390:	4b04      	ldr	r3, [pc, #16]	; (23a4 <rtc_announce_set_next+0x5c>)
    2392:	6818      	ldr	r0, [r3, #0]
    2394:	f200 1047 	addw	r0, r0, #327	; 0x147
    2398:	f7ff ffbe 	bl	2318 <rtc_compare_set>
    239c:	bd08      	pop	{r3, pc}
    239e:	bf00      	nop
    23a0:	40011000 	.word	0x40011000
    23a4:	200001c0 	.word	0x200001c0
    23a8:	90d4f121 	.word	0x90d4f121
    23ac:	200001bc 	.word	0x200001bc
    23b0:	2000c470 	.word	0x2000c470

000023b4 <rtc1_nrf5_isr>:
 * 400. However, the ISR is preempted for a number of sys ticks, until 450 in
 * this example. The ISR will then announce the number of sys ticks it was
 * delayed (2), and schedule the next sys tick (5) at 500.
 */
static void rtc1_nrf5_isr(void *arg)
{
    23b4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    23b6:	2200      	movs	r2, #0
    23b8:	4b02      	ldr	r3, [pc, #8]	; (23c4 <rtc1_nrf5_isr+0x10>)
    23ba:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    23be:	f7ff ffc3 	bl	2348 <rtc_announce_set_next>
    23c2:	bd08      	pop	{r3, pc}
    23c4:	40011000 	.word	0x40011000

000023c8 <_timer_idle_enter>:
{
    23c8:	b508      	push	{r3, lr}
	if ((sys_ticks < 0) ||
    23ca:	f246 4335 	movw	r3, #25653	; 0x6435
    23ce:	4298      	cmp	r0, r3
    23d0:	d900      	bls.n	23d4 <_timer_idle_enter+0xc>
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    23d2:	4618      	mov	r0, r3
	expected_sys_ticks = sys_ticks;
    23d4:	4b05      	ldr	r3, [pc, #20]	; (23ec <_timer_idle_enter+0x24>)
    23d6:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    23d8:	4b05      	ldr	r3, [pc, #20]	; (23f0 <_timer_idle_enter+0x28>)
    23da:	681b      	ldr	r3, [r3, #0]
    23dc:	f240 1247 	movw	r2, #327	; 0x147
    23e0:	fb02 3000 	mla	r0, r2, r0, r3
    23e4:	f7ff ff98 	bl	2318 <rtc_compare_set>
    23e8:	bd08      	pop	{r3, pc}
    23ea:	bf00      	nop
    23ec:	200001bc 	.word	0x200001bc
    23f0:	200001c0 	.word	0x200001c0

000023f4 <_timer_idle_exit>:
{
    23f4:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    23f6:	2200      	movs	r2, #0
    23f8:	4b06      	ldr	r3, [pc, #24]	; (2414 <_timer_idle_exit+0x20>)
    23fa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    23fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2402:	4b05      	ldr	r3, [pc, #20]	; (2418 <_timer_idle_exit+0x24>)
    2404:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    2408:	f7ff ff9e 	bl	2348 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    240c:	2201      	movs	r2, #1
    240e:	4b03      	ldr	r3, [pc, #12]	; (241c <_timer_idle_exit+0x28>)
    2410:	601a      	str	r2, [r3, #0]
    2412:	bd08      	pop	{r3, pc}
    2414:	40011000 	.word	0x40011000
    2418:	e000e100 	.word	0xe000e100
    241c:	200001bc 	.word	0x200001bc

00002420 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    2420:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    2422:	4818      	ldr	r0, [pc, #96]	; (2484 <_sys_clock_driver_init+0x64>)
    2424:	f024 febe 	bl	271a4 <device_get_binding>
	if (!clock) {
    2428:	b348      	cbz	r0, 247e <_sys_clock_driver_init+0x5e>
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
    242a:	6842      	ldr	r2, [r0, #4]

	return api->on(dev, sys);
    242c:	6812      	ldr	r2, [r2, #0]
    242e:	2101      	movs	r1, #1
    2430:	4790      	blx	r2
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
    2432:	2400      	movs	r4, #0
    2434:	4b14      	ldr	r3, [pc, #80]	; (2488 <_sys_clock_driver_init+0x68>)
    2436:	601c      	str	r4, [r3, #0]

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
    2438:	2601      	movs	r6, #1
    243a:	4b14      	ldr	r3, [pc, #80]	; (248c <_sys_clock_driver_init+0x6c>)
    243c:	601e      	str	r6, [r3, #0]
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    243e:	4d14      	ldr	r5, [pc, #80]	; (2490 <_sys_clock_driver_init+0x70>)
    2440:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    2444:	f240 1347 	movw	r3, #327	; 0x147
    2448:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    244c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2450:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    2454:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    2458:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    245c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2460:	4b0c      	ldr	r3, [pc, #48]	; (2494 <_sys_clock_driver_init+0x74>)
    2462:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    2466:	4622      	mov	r2, r4
    2468:	4631      	mov	r1, r6
    246a:	2011      	movs	r0, #17
    246c:	f024 fcf6 	bl	26e5c <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    2470:	2011      	movs	r0, #17
    2472:	f024 fcc9 	bl	26e08 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    2476:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;
    2478:	602e      	str	r6, [r5, #0]

	return 0;
    247a:	4620      	mov	r0, r4
    247c:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    247e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2482:	bd70      	pop	{r4, r5, r6, pc}
    2484:	0002f46c 	.word	0x0002f46c
    2488:	200001c0 	.word	0x200001c0
    248c:	200001bc 	.word	0x200001bc
    2490:	40011000 	.word	0x40011000
    2494:	e000e100 	.word	0xe000e100

00002498 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    2498:	b410      	push	{r4}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    249a:	4b0d      	ldr	r3, [pc, #52]	; (24d0 <_timer_cycle_get_32+0x38>)
    249c:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    24a0:	e000      	b.n	24a4 <_timer_cycle_get_32+0xc>
		sys_clock_tick_count = _sys_clock_tick_count;
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    24a2:	4619      	mov	r1, r3
		sys_clock_tick_count = _sys_clock_tick_count;
    24a4:	4b0b      	ldr	r3, [pc, #44]	; (24d4 <_timer_cycle_get_32+0x3c>)
    24a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    24aa:	4614      	mov	r4, r2
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    24ac:	f240 1047 	movw	r0, #327	; 0x147
    24b0:	fb00 1212 	mls	r2, r0, r2, r1
    24b4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		rtc_now = RTC_COUNTER;
    24b8:	4b05      	ldr	r3, [pc, #20]	; (24d0 <_timer_cycle_get_32+0x38>)
    24ba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    24be:	4299      	cmp	r1, r3
    24c0:	d1ef      	bne.n	24a2 <_timer_cycle_get_32+0xa>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    24c2:	4b05      	ldr	r3, [pc, #20]	; (24d8 <_timer_cycle_get_32+0x40>)
    24c4:	6818      	ldr	r0, [r3, #0]
	       elapsed_cycles;
}
    24c6:	fb00 2004 	mla	r0, r0, r4, r2
    24ca:	bc10      	pop	{r4}
    24cc:	4770      	bx	lr
    24ce:	bf00      	nop
    24d0:	40011000 	.word	0x40011000
    24d4:	20002a68 	.word	0x20002a68
    24d8:	2000c474 	.word	0x2000c474

000024dc <gpiote_find_channel>:
#define GPIOTE_CFG_PIN(pin) ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PSEL_Msk)
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
    24dc:	b410      	push	{r4}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    24de:	6803      	ldr	r3, [r0, #0]
    24e0:	689b      	ldr	r3, [r3, #8]
    24e2:	689c      	ldr	r4, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    24e4:	6882      	ldr	r2, [r0, #8]
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    24e6:	2000      	movs	r0, #0
    24e8:	e000      	b.n	24ec <gpiote_find_channel+0x10>
    24ea:	3001      	adds	r0, #1
    24ec:	2807      	cmp	r0, #7
    24ee:	dc0d      	bgt.n	250c <gpiote_find_channel+0x30>
		if ((data->gpiote_chan_mask & BIT(i)) &&
    24f0:	68d3      	ldr	r3, [r2, #12]
    24f2:	40c3      	lsrs	r3, r0
    24f4:	f013 0f01 	tst.w	r3, #1
    24f8:	d0f7      	beq.n	24ea <gpiote_find_channel+0xe>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    24fa:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    24fe:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    2502:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2506:	428b      	cmp	r3, r1
    2508:	d1ef      	bne.n	24ea <gpiote_find_channel+0xe>
    250a:	e001      	b.n	2510 <gpiote_find_channel+0x34>
			return i;
		}
	}

	return -ENODEV;
    250c:	f06f 0012 	mvn.w	r0, #18
}
    2510:	bc10      	pop	{r4}
    2512:	4770      	bx	lr

00002514 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2514:	6800      	ldr	r0, [r0, #0]
    2516:	6880      	ldr	r0, [r0, #8]
    2518:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    251a:	b121      	cbz	r1, 2526 <gpio_nrf5_read+0x12>
		*value = (gpio->IN >> pin) & 0x1;
	} else {
		*value = gpio->IN;
    251c:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    2520:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    2522:	2000      	movs	r0, #0
    2524:	4770      	bx	lr
		*value = (gpio->IN >> pin) & 0x1;
    2526:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    252a:	fa21 f202 	lsr.w	r2, r1, r2
    252e:	f002 0201 	and.w	r2, r2, #1
    2532:	601a      	str	r2, [r3, #0]
    2534:	e7f5      	b.n	2522 <gpio_nrf5_read+0xe>

00002536 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2536:	6800      	ldr	r0, [r0, #0]
    2538:	6880      	ldr	r0, [r0, #8]
    253a:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    253c:	b961      	cbnz	r1, 2558 <gpio_nrf5_write+0x22>
		if (value) { /* 1 */
    253e:	b12b      	cbz	r3, 254c <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    2540:	2301      	movs	r3, #1
    2542:	fa03 f202 	lsl.w	r2, r3, r2
    2546:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    254a:	e007      	b.n	255c <gpio_nrf5_write+0x26>
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
    254c:	2301      	movs	r3, #1
    254e:	fa03 f202 	lsl.w	r2, r3, r2
    2552:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    2556:	e001      	b.n	255c <gpio_nrf5_write+0x26>
		}
	} else {
		gpio->OUT = value;
    2558:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
	}
	return 0;
}
    255c:	2000      	movs	r0, #0
    255e:	4770      	bx	lr

00002560 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    2560:	b410      	push	{r4}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2562:	6884      	ldr	r4, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    2564:	b14a      	cbz	r2, 257a <gpio_nrf5_manage_callback+0x1a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    2566:	6823      	ldr	r3, [r4, #0]
    2568:	600b      	str	r3, [r1, #0]
	list->head = node;
    256a:	6021      	str	r1, [r4, #0]

	if (!list->tail) {
    256c:	6863      	ldr	r3, [r4, #4]
    256e:	b113      	cbz	r3, 2576 <gpio_nrf5_manage_callback+0x16>

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    2570:	2000      	movs	r0, #0
    2572:	bc10      	pop	{r4}
    2574:	4770      	bx	lr
		list->tail = list->head;
    2576:	6061      	str	r1, [r4, #4]
    2578:	e7fa      	b.n	2570 <gpio_nrf5_manage_callback+0x10>
		sys_slist_prepend(callbacks, &callback->node);
	} else {
		sys_slist_find_and_remove(callbacks, &callback->node);
    257a:	4608      	mov	r0, r1
	return list->head;
    257c:	6823      	ldr	r3, [r4, #0]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
    257e:	2200      	movs	r2, #0
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    2580:	2b00      	cmp	r3, #0
    2582:	d0f5      	beq.n	2570 <gpio_nrf5_manage_callback+0x10>
		if (test == node) {
    2584:	4298      	cmp	r0, r3
    2586:	d002      	beq.n	258e <gpio_nrf5_manage_callback+0x2e>
			sys_slist_remove(list, prev, node);
			return true;
		}

		prev = test;
    2588:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    258a:	681b      	ldr	r3, [r3, #0]
    258c:	e7f8      	b.n	2580 <gpio_nrf5_manage_callback+0x20>
	if (!prev_node) {
    258e:	b13a      	cbz	r2, 25a0 <gpio_nrf5_manage_callback+0x40>
		prev_node->next = node->next;
    2590:	680b      	ldr	r3, [r1, #0]
    2592:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    2594:	6863      	ldr	r3, [r4, #4]
    2596:	4299      	cmp	r1, r3
    2598:	d009      	beq.n	25ae <gpio_nrf5_manage_callback+0x4e>
	node->next = NULL;
    259a:	2300      	movs	r3, #0
    259c:	600b      	str	r3, [r1, #0]
    259e:	e7e7      	b.n	2570 <gpio_nrf5_manage_callback+0x10>
		list->head = node->next;
    25a0:	680b      	ldr	r3, [r1, #0]
    25a2:	6023      	str	r3, [r4, #0]
		if (list->tail == node) {
    25a4:	6862      	ldr	r2, [r4, #4]
    25a6:	4291      	cmp	r1, r2
    25a8:	d1f7      	bne.n	259a <gpio_nrf5_manage_callback+0x3a>
			list->tail = list->head;
    25aa:	6063      	str	r3, [r4, #4]
    25ac:	e7f5      	b.n	259a <gpio_nrf5_manage_callback+0x3a>
			list->tail = prev_node;
    25ae:	6062      	str	r2, [r4, #4]
    25b0:	e7f3      	b.n	259a <gpio_nrf5_manage_callback+0x3a>

000025b2 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    25b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    25b4:	6803      	ldr	r3, [r0, #0]
    25b6:	689b      	ldr	r3, [r3, #8]
    25b8:	689e      	ldr	r6, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    25ba:	6887      	ldr	r7, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    25bc:	b9b9      	cbnz	r1, 25ee <gpio_nrf5_enable_callback+0x3c>
    25be:	460d      	mov	r5, r1
    25c0:	4614      	mov	r4, r2

		i = gpiote_find_channel(dev, pin);
    25c2:	4611      	mov	r1, r2
    25c4:	f7ff ff8a 	bl	24dc <gpiote_find_channel>
		if (i < 0) {
    25c8:	2800      	cmp	r0, #0
    25ca:	db12      	blt.n	25f2 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    25cc:	2301      	movs	r3, #1
    25ce:	fa03 f404 	lsl.w	r4, r3, r4
    25d2:	68ba      	ldr	r2, [r7, #8]
    25d4:	4314      	orrs	r4, r2
    25d6:	60bc      	str	r4, [r7, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    25d8:	f100 0240 	add.w	r2, r0, #64	; 0x40
    25dc:	2100      	movs	r1, #0
    25de:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    25e2:	fa03 f000 	lsl.w	r0, r3, r0
    25e6:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    25ea:	4628      	mov	r0, r5
    25ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    25ee:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    25f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000025f4 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    25f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    25f6:	6803      	ldr	r3, [r0, #0]
    25f8:	689b      	ldr	r3, [r3, #8]
    25fa:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    25fc:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    25fe:	b991      	cbnz	r1, 2626 <gpio_nrf5_disable_callback+0x32>
    2600:	460d      	mov	r5, r1
    2602:	4614      	mov	r4, r2
		i = gpiote_find_channel(dev, pin);
    2604:	4611      	mov	r1, r2
    2606:	f7ff ff69 	bl	24dc <gpiote_find_channel>
		if (i < 0) {
    260a:	2800      	cmp	r0, #0
    260c:	db0d      	blt.n	262a <gpio_nrf5_disable_callback+0x36>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    260e:	2301      	movs	r3, #1
    2610:	fa03 f404 	lsl.w	r4, r3, r4
    2614:	68b2      	ldr	r2, [r6, #8]
    2616:	ea22 0404 	bic.w	r4, r2, r4
    261a:	60b4      	str	r4, [r6, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    261c:	4083      	lsls	r3, r0
    261e:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    2622:	4628      	mov	r0, r5
    2624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    2626:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    262a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000262c <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    262c:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    262e:	2200      	movs	r2, #0
    2630:	2101      	movs	r1, #1
    2632:	2006      	movs	r0, #6
    2634:	f024 fc12 	bl	26e5c <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2638:	2006      	movs	r0, #6
    263a:	f024 fbe5 	bl	26e08 <_arch_irq_enable>

	return 0;
}
    263e:	2000      	movs	r0, #0
    2640:	bd08      	pop	{r3, pc}

00002642 <gpio_nrf5_port_isr>:
{
    2642:	b570      	push	{r4, r5, r6, lr}
    2644:	4605      	mov	r5, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2646:	6803      	ldr	r3, [r0, #0]
    2648:	689b      	ldr	r3, [r3, #8]
    264a:	6899      	ldr	r1, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    264c:	6884      	ldr	r4, [r0, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    264e:	2300      	movs	r3, #0
	u32_t enabled_int, int_status = 0;
    2650:	461e      	mov	r6, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2652:	e000      	b.n	2656 <gpio_nrf5_port_isr+0x14>
    2654:	3301      	adds	r3, #1
    2656:	2b07      	cmp	r3, #7
    2658:	dc14      	bgt.n	2684 <gpio_nrf5_port_isr+0x42>
		if (gpiote->EVENTS_IN[i]) {
    265a:	f103 0240 	add.w	r2, r3, #64	; 0x40
    265e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2662:	2a00      	cmp	r2, #0
    2664:	d0f6      	beq.n	2654 <gpio_nrf5_port_isr+0x12>
			gpiote->EVENTS_IN[i] = 0;
    2666:	f103 0240 	add.w	r2, r3, #64	; 0x40
    266a:	2000      	movs	r0, #0
    266c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    2670:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    2674:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    2678:	f3c0 2004 	ubfx	r0, r0, #8, #5
    267c:	2201      	movs	r2, #1
    267e:	4082      	lsls	r2, r0
    2680:	4316      	orrs	r6, r2
    2682:	e7e7      	b.n	2654 <gpio_nrf5_port_isr+0x12>
	enabled_int = int_status & data->pin_callback_enables;
    2684:	68a3      	ldr	r3, [r4, #8]
    2686:	401e      	ands	r6, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    2688:	2006      	movs	r0, #6
    268a:	f024 fbcb 	bl	26e24 <_arch_irq_disable>
	return list->head;
    268e:	6824      	ldr	r4, [r4, #0]
    2690:	e005      	b.n	269e <gpio_nrf5_port_isr+0x5c>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    2692:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    2694:	b16c      	cbz	r4, 26b2 <gpio_nrf5_port_isr+0x70>
	return node->next;
    2696:	6823      	ldr	r3, [r4, #0]
    2698:	b16b      	cbz	r3, 26b6 <gpio_nrf5_port_isr+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    269a:	b172      	cbz	r2, 26ba <gpio_nrf5_port_isr+0x78>
	return node->next;
    269c:	6824      	ldr	r4, [r4, #0]
    269e:	b174      	cbz	r4, 26be <gpio_nrf5_port_isr+0x7c>
		if (cb->pin_mask & pins) {
    26a0:	68a3      	ldr	r3, [r4, #8]
    26a2:	421e      	tst	r6, r3
    26a4:	d0f5      	beq.n	2692 <gpio_nrf5_port_isr+0x50>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    26a6:	6863      	ldr	r3, [r4, #4]
    26a8:	4632      	mov	r2, r6
    26aa:	4621      	mov	r1, r4
    26ac:	4628      	mov	r0, r5
    26ae:	4798      	blx	r3
    26b0:	e7ef      	b.n	2692 <gpio_nrf5_port_isr+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    26b2:	4623      	mov	r3, r4
    26b4:	e7f0      	b.n	2698 <gpio_nrf5_port_isr+0x56>
	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    26b6:	2400      	movs	r4, #0
    26b8:	e7f1      	b.n	269e <gpio_nrf5_port_isr+0x5c>
    26ba:	2400      	movs	r4, #0
    26bc:	e7ef      	b.n	269e <gpio_nrf5_port_isr+0x5c>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    26be:	2006      	movs	r0, #6
    26c0:	f024 fba2 	bl	26e08 <_arch_irq_enable>
    26c4:	bd70      	pop	{r4, r5, r6, pc}
	...

000026c8 <gpio_nrf5_config>:
{
    26c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    26cc:	6804      	ldr	r4, [r0, #0]
    26ce:	68a5      	ldr	r5, [r4, #8]
    26d0:	68ae      	ldr	r6, [r5, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    26d2:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    26d4:	682d      	ldr	r5, [r5, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    26d6:	2900      	cmp	r1, #0
    26d8:	d17f      	bne.n	27da <gpio_nrf5_config+0x112>
    26da:	4688      	mov	r8, r1
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    26dc:	f3c3 3e01 	ubfx	lr, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    26e0:	f3c3 3181 	ubfx	r1, r3, #14, #2
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    26e4:	f403 7440 	and.w	r4, r3, #768	; 0x300
    26e8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    26ec:	d025      	beq.n	273a <gpio_nrf5_config+0x72>
		} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
    26ee:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    26f2:	d024      	beq.n	273e <gpio_nrf5_config+0x76>
		u8_t pull = GPIO_PULL_DISABLE;
    26f4:	2400      	movs	r4, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    26f6:	f013 0f01 	tst.w	r3, #1
    26fa:	d030      	beq.n	275e <gpio_nrf5_config+0x96>
			if (pull == GPIO_PULL_UP) {
    26fc:	2c0c      	cmp	r4, #12
    26fe:	d020      	beq.n	2742 <gpio_nrf5_config+0x7a>
			} else if (pull == GPIO_PULL_DOWN) {
    2700:	2c04      	cmp	r4, #4
    2702:	d025      	beq.n	2750 <gpio_nrf5_config+0x88>
					      drive_strength[ds_low][ds_high] |
    2704:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
    2708:	4938      	ldr	r1, [pc, #224]	; (27ec <gpio_nrf5_config+0x124>)
    270a:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
    270e:	4321      	orrs	r1, r4
					      GPIO_INPUT_DISCONNECT |
    2710:	f041 0103 	orr.w	r1, r1, #3
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    2714:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    2718:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
	if (flags & GPIO_INT) {
    271c:	f013 0102 	ands.w	r1, r3, #2
    2720:	d04a      	beq.n	27b8 <gpio_nrf5_config+0xf0>
		if (flags & GPIO_INT_EDGE) {
    2722:	f013 0f20 	tst.w	r3, #32
    2726:	d05b      	beq.n	27e0 <gpio_nrf5_config+0x118>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    2728:	f013 0f40 	tst.w	r3, #64	; 0x40
    272c:	d123      	bne.n	2776 <gpio_nrf5_config+0xae>
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
    272e:	f013 0f04 	tst.w	r3, #4
    2732:	d044      	beq.n	27be <gpio_nrf5_config+0xf6>
				config |= GPIOTE_CFG_POL_L2H;
    2734:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    2738:	e01f      	b.n	277a <gpio_nrf5_config+0xb2>
			pull = GPIO_PULL_UP;
    273a:	240c      	movs	r4, #12
    273c:	e7db      	b.n	26f6 <gpio_nrf5_config+0x2e>
			pull = GPIO_PULL_DOWN;
    273e:	2404      	movs	r4, #4
    2740:	e7d9      	b.n	26f6 <gpio_nrf5_config+0x2e>
				gpio->OUTSET = BIT(pin);
    2742:	f04f 0c01 	mov.w	ip, #1
    2746:	fa0c fc02 	lsl.w	ip, ip, r2
    274a:	f8c5 c508 	str.w	ip, [r5, #1288]	; 0x508
    274e:	e7d9      	b.n	2704 <gpio_nrf5_config+0x3c>
				gpio->OUTCLR = BIT(pin);
    2750:	f04f 0c01 	mov.w	ip, #1
    2754:	fa0c fc02 	lsl.w	ip, ip, r2
    2758:	f8c5 c50c 	str.w	ip, [r5, #1292]	; 0x50c
    275c:	e7d2      	b.n	2704 <gpio_nrf5_config+0x3c>
					      drive_strength[ds_low][ds_high] |
    275e:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    2762:	f8df e088 	ldr.w	lr, [pc, #136]	; 27ec <gpio_nrf5_config+0x124>
    2766:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
					      GPIO_INPUT_CONNECT |
    276a:	4321      	orrs	r1, r4
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    276c:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    2770:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    2774:	e7d2      	b.n	271c <gpio_nrf5_config+0x54>
				config |= GPIOTE_CFG_POL_TOGG;
    2776:	f44f 3940 	mov.w	r9, #196608	; 0x30000
    277a:	4614      	mov	r4, r2
    277c:	4605      	mov	r5, r0
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    277e:	68f8      	ldr	r0, [r7, #12]
    2780:	f7fe fcd4 	bl	112c <__popcountsi2>
    2784:	2808      	cmp	r0, #8
    2786:	d02e      	beq.n	27e6 <gpio_nrf5_config+0x11e>
		int i = gpiote_find_channel(dev, pin);
    2788:	4621      	mov	r1, r4
    278a:	4628      	mov	r0, r5
    278c:	f7ff fea6 	bl	24dc <gpiote_find_channel>
		if (i < 0) {
    2790:	2800      	cmp	r0, #0
    2792:	db17      	blt.n	27c4 <gpio_nrf5_config+0xfc>
		data->gpiote_chan_mask |= BIT(i);
    2794:	2301      	movs	r3, #1
    2796:	fa03 f200 	lsl.w	r2, r3, r0
    279a:	68fb      	ldr	r3, [r7, #12]
    279c:	4313      	orrs	r3, r2
    279e:	60fb      	str	r3, [r7, #12]
		config |= GPIOTE_CFG_EVT;
    27a0:	f049 0901 	orr.w	r9, r9, #1
		config |= GPIOTE_CFG_PIN(pin);
    27a4:	0224      	lsls	r4, r4, #8
    27a6:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    27aa:	ea49 0404 	orr.w	r4, r9, r4
		gpiote->CONFIG[i] = config;
    27ae:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    27b2:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
	return 0;
    27b6:	4641      	mov	r1, r8
}
    27b8:	4608      	mov	r0, r1
    27ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				config |= GPIOTE_CFG_POL_H2L;
    27be:	f44f 3900 	mov.w	r9, #131072	; 0x20000
    27c2:	e7da      	b.n	277a <gpio_nrf5_config+0xb2>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    27c4:	68fb      	ldr	r3, [r7, #12]
    27c6:	43db      	mvns	r3, r3
    27c8:	fa93 f0a3 	rbit	r0, r3
    27cc:	fab0 f080 	clz	r0, r0
    27d0:	2b00      	cmp	r3, #0
    27d2:	d1df      	bne.n	2794 <gpio_nrf5_config+0xcc>
    27d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    27d8:	e7dc      	b.n	2794 <gpio_nrf5_config+0xcc>
		return -ENOTSUP;
    27da:	f06f 0185 	mvn.w	r1, #133	; 0x85
    27de:	e7eb      	b.n	27b8 <gpio_nrf5_config+0xf0>
			return -ENOTSUP;
    27e0:	f06f 0185 	mvn.w	r1, #133	; 0x85
    27e4:	e7e8      	b.n	27b8 <gpio_nrf5_config+0xf0>
			return -EIO;
    27e6:	f06f 0104 	mvn.w	r1, #4
    27ea:	e7e5      	b.n	27b8 <gpio_nrf5_config+0xf0>
    27ec:	0002f4d4 	.word	0x0002f4d4

000027f0 <_m16src_stop>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    27f0:	f04f 0320 	mov.w	r3, #32
    27f4:	f3ef 8111 	mrs	r1, BASEPRI
    27f8:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    27fc:	4b12      	ldr	r3, [pc, #72]	; (2848 <_m16src_stop+0x58>)
    27fe:	781a      	ldrb	r2, [r3, #0]
    2800:	b192      	cbz	r2, 2828 <_m16src_stop+0x38>
		irq_unlock(imask);
		return -EALREADY;
	}

	if (--m16src_ref) {
    2802:	1e53      	subs	r3, r2, #1
    2804:	b2db      	uxtb	r3, r3
    2806:	4810      	ldr	r0, [pc, #64]	; (2848 <_m16src_stop+0x58>)
    2808:	7003      	strb	r3, [r0, #0]
    280a:	b993      	cbnz	r3, 2832 <_m16src_stop+0x42>
		irq_unlock(imask);
		return 0;
	}

	if (m16src_grd) {
    280c:	4b0f      	ldr	r3, [pc, #60]	; (284c <_m16src_stop+0x5c>)
    280e:	781b      	ldrb	r3, [r3, #0]
    2810:	b99b      	cbnz	r3, 283a <_m16src_stop+0x4a>
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
    2812:	4b0e      	ldr	r3, [pc, #56]	; (284c <_m16src_stop+0x5c>)
    2814:	2201      	movs	r2, #1
    2816:	701a      	strb	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2818:	f381 8811 	msr	BASEPRI, r1

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    281c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2820:	604a      	str	r2, [r1, #4]

	/* release resource guard */
	m16src_grd = 0;
    2822:	2000      	movs	r0, #0
    2824:	7018      	strb	r0, [r3, #0]

	return 0;
}
    2826:	4770      	bx	lr
    2828:	f381 8811 	msr	BASEPRI, r1
		return -EALREADY;
    282c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    2830:	4770      	bx	lr
    2832:	f381 8811 	msr	BASEPRI, r1
		return 0;
    2836:	2000      	movs	r0, #0
    2838:	4770      	bx	lr
		m16src_ref++;
    283a:	4b03      	ldr	r3, [pc, #12]	; (2848 <_m16src_stop+0x58>)
    283c:	701a      	strb	r2, [r3, #0]
    283e:	f381 8811 	msr	BASEPRI, r1
		return -EAGAIN;
    2842:	f06f 000a 	mvn.w	r0, #10
    2846:	4770      	bx	lr
    2848:	200001d6 	.word	0x200001d6
    284c:	200001d5 	.word	0x200001d5

00002850 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    2850:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    2852:	2200      	movs	r2, #0
    2854:	2101      	movs	r1, #1
    2856:	4610      	mov	r0, r2
    2858:	f024 fb00 	bl	26e5c <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    285c:	2000      	movs	r0, #0
    285e:	f024 fad3 	bl	26e08 <_arch_irq_enable>

	return 0;
}
    2862:	2000      	movs	r0, #0
    2864:	bd08      	pop	{r3, pc}
	...

00002868 <_m16src_start>:
{
    2868:	b510      	push	{r4, lr}
	__asm__ volatile(
    286a:	f04f 0320 	mov.w	r3, #32
    286e:	f3ef 8411 	mrs	r4, BASEPRI
    2872:	f383 8811 	msr	BASEPRI, r3
	if (m16src_ref++) {
    2876:	4a2c      	ldr	r2, [pc, #176]	; (2928 <_m16src_start+0xc0>)
    2878:	7813      	ldrb	r3, [r2, #0]
    287a:	1c58      	adds	r0, r3, #1
    287c:	7010      	strb	r0, [r2, #0]
    287e:	b153      	cbz	r3, 2896 <_m16src_start+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2880:	f384 8811 	msr	BASEPRI, r4
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    2884:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2888:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    288c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2890:	d047      	beq.n	2922 <_m16src_start+0xba>
		return 0;
    2892:	2000      	movs	r0, #0
    2894:	bd10      	pop	{r4, pc}
	if (m16src_grd) {
    2896:	4a25      	ldr	r2, [pc, #148]	; (292c <_m16src_start+0xc4>)
    2898:	7812      	ldrb	r2, [r2, #0]
    289a:	b9a2      	cbnz	r2, 28c6 <_m16src_start+0x5e>
	m16src_grd = 1;
    289c:	2201      	movs	r2, #1
    289e:	4b23      	ldr	r3, [pc, #140]	; (292c <_m16src_start+0xc4>)
    28a0:	701a      	strb	r2, [r3, #0]
    28a2:	f384 8811 	msr	BASEPRI, r4
	if (blocking) {
    28a6:	b3a1      	cbz	r1, 2912 <_m16src_start+0xaa>
		irq_disable(POWER_CLOCK_IRQn);
    28a8:	2000      	movs	r0, #0
    28aa:	f024 fabb 	bl	26e24 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    28ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    28b2:	2200      	movs	r2, #0
    28b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    28b8:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    28bc:	2201      	movs	r2, #1
    28be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    28c2:	601a      	str	r2, [r3, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    28c4:	e009      	b.n	28da <_m16src_start+0x72>
		m16src_ref--;
    28c6:	4a18      	ldr	r2, [pc, #96]	; (2928 <_m16src_start+0xc0>)
    28c8:	7013      	strb	r3, [r2, #0]
    28ca:	f384 8811 	msr	BASEPRI, r4
		return -EAGAIN;
    28ce:	f06f 000a 	mvn.w	r0, #10
    28d2:	bd10      	pop	{r4, pc}
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    28d4:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    28d6:	bf40      	sev
  __ASM volatile ("wfe");
    28d8:	bf20      	wfe
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    28da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    28de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    28e2:	2b00      	cmp	r3, #0
    28e4:	d0f6      	beq.n	28d4 <_m16src_start+0x6c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    28e6:	2200      	movs	r2, #0
    28e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    28ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    28f0:	f011 0f01 	tst.w	r1, #1
    28f4:	d102      	bne.n	28fc <_m16src_start+0x94>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    28f6:	2201      	movs	r2, #1
    28f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    28fc:	2201      	movs	r2, #1
    28fe:	4b0c      	ldr	r3, [pc, #48]	; (2930 <_m16src_start+0xc8>)
    2900:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq_enable(POWER_CLOCK_IRQn);
    2904:	2000      	movs	r0, #0
    2906:	f024 fa7f 	bl	26e08 <_arch_irq_enable>
	m16src_grd = 0;
    290a:	2200      	movs	r2, #0
    290c:	4b07      	ldr	r3, [pc, #28]	; (292c <_m16src_start+0xc4>)
    290e:	701a      	strb	r2, [r3, #0]
    2910:	e7b8      	b.n	2884 <_m16src_start+0x1c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2912:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2916:	2200      	movs	r2, #0
    2918:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    291c:	2201      	movs	r2, #1
    291e:	601a      	str	r2, [r3, #0]
    2920:	e7f3      	b.n	290a <_m16src_start+0xa2>
		return -EINPROGRESS;
    2922:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    2926:	bd10      	pop	{r4, pc}
    2928:	200001d6 	.word	0x200001d6
    292c:	200001d5 	.word	0x200001d5
    2930:	e000e100 	.word	0xe000e100

00002934 <_power_clock_isr>:
{
    2934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2938:	4680      	mov	r8, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    293a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    293e:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2942:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    2946:	f002 0201 	and.w	r2, r2, #1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    294a:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    294e:	f401 3180 	and.w	r1, r1, #65536	; 0x10000
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    2952:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    2956:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    295a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    295e:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (pof) {
    2962:	b11d      	cbz	r5, 296c <_power_clock_isr+0x38>
		NRF_POWER->EVENTS_POFWARN = 0;
    2964:	f04f 0e00 	mov.w	lr, #0
    2968:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    296c:	b127      	cbz	r7, 2978 <_power_clock_isr+0x44>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    296e:	2700      	movs	r7, #0
    2970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2974:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    2978:	b132      	cbz	r2, 2988 <_power_clock_isr+0x54>
    297a:	b129      	cbz	r1, 2988 <_power_clock_isr+0x54>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    297c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2980:	2201      	movs	r2, #1
    2982:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    2986:	611a      	str	r2, [r3, #16]
	if (lf) {
    2988:	b126      	cbz	r6, 2994 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    298a:	2200      	movs	r2, #0
    298c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2990:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    2994:	b910      	cbnz	r0, 299c <_power_clock_isr+0x68>
	if (ctto) {
    2996:	b964      	cbnz	r4, 29b2 <_power_clock_isr+0x7e>
    2998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		NRF_CLOCK->EVENTS_DONE = 0;
    299c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    29a0:	2100      	movs	r1, #0
    29a2:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    29a6:	4640      	mov	r0, r8
    29a8:	f7ff ff22 	bl	27f0 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    29ac:	2301      	movs	r3, #1
    29ae:	6173      	str	r3, [r6, #20]
    29b0:	e7f1      	b.n	2996 <_power_clock_isr+0x62>
		NRF_CLOCK->EVENTS_CTTO = 0;
    29b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29b6:	2100      	movs	r1, #0
    29b8:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    29bc:	2201      	movs	r2, #1
    29be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    29c2:	4640      	mov	r0, r8
    29c4:	f7ff ff50 	bl	2868 <_m16src_start>
		if (!err) {
    29c8:	2800      	cmp	r0, #0
    29ca:	d1e5      	bne.n	2998 <_power_clock_isr+0x64>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    29cc:	2201      	movs	r2, #1
    29ce:	4b02      	ldr	r3, [pc, #8]	; (29d8 <_power_clock_isr+0xa4>)
    29d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    29d4:	e7e0      	b.n	2998 <_power_clock_isr+0x64>
    29d6:	bf00      	nop
    29d8:	e000e100 	.word	0xe000e100

000029dc <_k32src_start>:
	__asm__ volatile(
    29dc:	f04f 0220 	mov.w	r2, #32
    29e0:	f3ef 8311 	mrs	r3, BASEPRI
    29e4:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    29e8:	4a38      	ldr	r2, [pc, #224]	; (2acc <_k32src_start+0xf0>)
    29ea:	7812      	ldrb	r2, [r2, #0]
    29ec:	b152      	cbz	r2, 2a04 <_k32src_start+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    29ee:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    29f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29f6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    29fa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    29fe:	d062      	beq.n	2ac6 <_k32src_start+0xea>
		return 0;
    2a00:	2000      	movs	r0, #0
    2a02:	4770      	bx	lr
{
    2a04:	b570      	push	{r4, r5, r6, lr}
    2a06:	460d      	mov	r5, r1
    2a08:	4604      	mov	r4, r0
	k32src_initialized = 1;
    2a0a:	2601      	movs	r6, #1
    2a0c:	4a2f      	ldr	r2, [pc, #188]	; (2acc <_k32src_start+0xf0>)
    2a0e:	7016      	strb	r6, [r2, #0]
    2a10:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    2a14:	2000      	movs	r0, #0
    2a16:	f024 fa05 	bl	26e24 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2a1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a1e:	2200      	movs	r2, #0
    2a20:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    2a24:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2a28:	2102      	movs	r1, #2
    2a2a:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    2a2e:	f8c3 5518 	str.w	r5, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    2a32:	609e      	str	r6, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    2a34:	e002      	b.n	2a3c <_k32src_start+0x60>
    2a36:	bf20      	wfe
  __ASM volatile ("sev");
    2a38:	bf40      	sev
  __ASM volatile ("wfe");
    2a3a:	bf20      	wfe
    2a3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a40:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2a44:	2b00      	cmp	r3, #0
    2a46:	d0f6      	beq.n	2a36 <_k32src_start+0x5a>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2a48:	2100      	movs	r1, #0
    2a4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a4e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    2a52:	f012 0f02 	tst.w	r2, #2
    2a56:	d102      	bne.n	2a5e <_k32src_start+0x82>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2a58:	2202      	movs	r2, #2
    2a5a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a5e:	2201      	movs	r2, #1
    2a60:	4b1b      	ldr	r3, [pc, #108]	; (2ad0 <_k32src_start+0xf4>)
    2a62:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    2a66:	2000      	movs	r0, #0
    2a68:	f024 f9ce 	bl	26e08 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a70:	2218      	movs	r2, #24
    2a72:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    2a76:	2200      	movs	r2, #0
    2a78:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    2a7c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2a80:	f015 0f03 	tst.w	r5, #3
    2a84:	d008      	beq.n	2a98 <_k32src_start+0xbc>
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2a86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a8a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2a8e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a92:	d015      	beq.n	2ac0 <_k32src_start+0xe4>
		return 0;
    2a94:	2000      	movs	r0, #0
    2a96:	bd70      	pop	{r4, r5, r6, pc}
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    2a98:	2210      	movs	r2, #16
    2a9a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    2a9e:	2218      	movs	r2, #24
    2aa0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2aa4:	2201      	movs	r2, #1
    2aa6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2aaa:	2100      	movs	r1, #0
    2aac:	4620      	mov	r0, r4
    2aae:	f7ff fedb 	bl	2868 <_m16src_start>
		if (!err) {
    2ab2:	2800      	cmp	r0, #0
    2ab4:	d1e7      	bne.n	2a86 <_k32src_start+0xaa>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2ab6:	2201      	movs	r2, #1
    2ab8:	4b05      	ldr	r3, [pc, #20]	; (2ad0 <_k32src_start+0xf4>)
    2aba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2abe:	e7e2      	b.n	2a86 <_k32src_start+0xaa>
		return -EINPROGRESS;
    2ac0:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    2ac4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINPROGRESS;
    2ac6:	f06f 0076 	mvn.w	r0, #118	; 0x76
    2aca:	4770      	bx	lr
    2acc:	200001d4 	.word	0x200001d4
    2ad0:	e000e100 	.word	0xe000e100

00002ad4 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    2ad4:	2000      	movs	r0, #0
    2ad6:	4770      	bx	lr

00002ad8 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    2ad8:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2ada:	680b      	ldr	r3, [r1, #0]
    2adc:	3301      	adds	r3, #1
    2ade:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2ae0:	4b01      	ldr	r3, [pc, #4]	; (2ae8 <char_out+0x10>)
    2ae2:	681b      	ldr	r3, [r3, #0]
    2ae4:	4798      	blx	r3
}
    2ae6:	bd08      	pop	{r3, pc}
    2ae8:	2000b76c 	.word	0x2000b76c

00002aec <_printk_hex_ulong>:
 * @return N/A
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2af0:	b083      	sub	sp, #12
    2af2:	4606      	mov	r6, r0
    2af4:	9101      	str	r1, [sp, #4]
    2af6:	4691      	mov	r9, r2
    2af8:	461f      	mov	r7, r3
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;
    2afa:	2400      	movs	r4, #0
	int remaining = 8; /* 8 digits max */
    2afc:	f04f 0a08 	mov.w	sl, #8
	int found_largest_digit = 0;
    2b00:	46a0      	mov	r8, r4
	int size = sizeof(num) * 2;
    2b02:	4653      	mov	r3, sl

	for (; size; size--) {
    2b04:	e009      	b.n	2b1a <_printk_hex_ulong+0x2e>
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
    2b06:	2809      	cmp	r0, #9
    2b08:	d91f      	bls.n	2b4a <_printk_hex_ulong+0x5e>
    2b0a:	2357      	movs	r3, #87	; 0x57
			out((int)nibble, ctx);
    2b0c:	9901      	ldr	r1, [sp, #4]
    2b0e:	4418      	add	r0, r3
    2b10:	47b0      	blx	r6
			digits++;
    2b12:	3401      	adds	r4, #1
			found_largest_digit = 1;
    2b14:	f04f 0801 	mov.w	r8, #1
			continue;
		}

		if (remaining-- <= min_width) {
    2b18:	462b      	mov	r3, r5
	for (; size; size--) {
    2b1a:	b323      	cbz	r3, 2b66 <_printk_hex_ulong+0x7a>
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    2b1c:	1e5d      	subs	r5, r3, #1
    2b1e:	00a8      	lsls	r0, r5, #2
    2b20:	fa29 f000 	lsr.w	r0, r9, r0
		if (nibble || found_largest_digit || size == 1) {
    2b24:	f010 000f 	ands.w	r0, r0, #15
    2b28:	d1ed      	bne.n	2b06 <_printk_hex_ulong+0x1a>
    2b2a:	f1b8 0f00 	cmp.w	r8, #0
    2b2e:	d1ea      	bne.n	2b06 <_printk_hex_ulong+0x1a>
    2b30:	2b01      	cmp	r3, #1
    2b32:	d0e8      	beq.n	2b06 <_printk_hex_ulong+0x1a>
		if (remaining-- <= min_width) {
    2b34:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
    2b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2b3a:	459a      	cmp	sl, r3
    2b3c:	dc11      	bgt.n	2b62 <_printk_hex_ulong+0x76>
			if (padding == PAD_ZERO_BEFORE) {
    2b3e:	2f01      	cmp	r7, #1
    2b40:	d005      	beq.n	2b4e <_printk_hex_ulong+0x62>
				out('0', ctx);
			} else if (padding == PAD_SPACE_BEFORE) {
    2b42:	2f02      	cmp	r7, #2
    2b44:	d008      	beq.n	2b58 <_printk_hex_ulong+0x6c>
		if (remaining-- <= min_width) {
    2b46:	46da      	mov	sl, fp
    2b48:	e7e6      	b.n	2b18 <_printk_hex_ulong+0x2c>
			nibble += nibble > 9 ? 87 : 48;
    2b4a:	2330      	movs	r3, #48	; 0x30
    2b4c:	e7de      	b.n	2b0c <_printk_hex_ulong+0x20>
				out('0', ctx);
    2b4e:	9901      	ldr	r1, [sp, #4]
    2b50:	2030      	movs	r0, #48	; 0x30
    2b52:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2b54:	46da      	mov	sl, fp
    2b56:	e7df      	b.n	2b18 <_printk_hex_ulong+0x2c>
				out(' ', ctx);
    2b58:	9901      	ldr	r1, [sp, #4]
    2b5a:	2020      	movs	r0, #32
    2b5c:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2b5e:	46da      	mov	sl, fp
    2b60:	e7da      	b.n	2b18 <_printk_hex_ulong+0x2c>
    2b62:	46da      	mov	sl, fp
    2b64:	e7d8      	b.n	2b18 <_printk_hex_ulong+0x2c>
			}
		}
	}

	if (padding == PAD_SPACE_AFTER) {
    2b66:	2f03      	cmp	r7, #3
    2b68:	d002      	beq.n	2b70 <_printk_hex_ulong+0x84>
		remaining = min_width * 2 - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2b6a:	b003      	add	sp, #12
    2b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width * 2 - digits;
    2b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2b72:	ebc4 0443 	rsb	r4, r4, r3, lsl #1
		while (remaining-- > 0) {
    2b76:	1e65      	subs	r5, r4, #1
    2b78:	2c00      	cmp	r4, #0
    2b7a:	ddf6      	ble.n	2b6a <_printk_hex_ulong+0x7e>
			out(' ', ctx);
    2b7c:	9901      	ldr	r1, [sp, #4]
    2b7e:	2020      	movs	r0, #32
    2b80:	47b0      	blx	r6
		while (remaining-- > 0) {
    2b82:	462c      	mov	r4, r5
    2b84:	e7f7      	b.n	2b76 <_printk_hex_ulong+0x8a>
	...

00002b88 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b8c:	b083      	sub	sp, #12
    2b8e:	4682      	mov	sl, r0
    2b90:	9101      	str	r1, [sp, #4]
    2b92:	469b      	mov	fp, r3
    2b94:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    2b96:	2f00      	cmp	r7, #0
    2b98:	dd07      	ble.n	2baa <_printk_dec_ulong+0x22>
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    2b9a:	4615      	mov	r5, r2
    2b9c:	f04f 0901 	mov.w	r9, #1
    2ba0:	260a      	movs	r6, #10
    2ba2:	f04f 0800 	mov.w	r8, #0
    2ba6:	4c22      	ldr	r4, [pc, #136]	; (2c30 <_printk_dec_ulong+0xa8>)
    2ba8:	e015      	b.n	2bd6 <_printk_dec_ulong+0x4e>
		min_width = 1;
    2baa:	2701      	movs	r7, #1
    2bac:	e7f5      	b.n	2b9a <_printk_dec_ulong+0x12>
			out((int)((remainder / (pos + 1)) + 48), ctx);
    2bae:	1c60      	adds	r0, r4, #1
    2bb0:	fbb5 f0f0 	udiv	r0, r5, r0
    2bb4:	9901      	ldr	r1, [sp, #4]
    2bb6:	3030      	adds	r0, #48	; 0x30
    2bb8:	47d0      	blx	sl
			digits++;
    2bba:	f109 0901 	add.w	r9, r9, #1
			found_largest_digit = 1;
    2bbe:	f04f 0801 	mov.w	r8, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    2bc2:	3e01      	subs	r6, #1
		remainder %= (pos + 1);
    2bc4:	1c63      	adds	r3, r4, #1
    2bc6:	fbb5 f2f3 	udiv	r2, r5, r3
    2bca:	fb03 5512 	mls	r5, r3, r2, r5
		pos /= 10;
    2bce:	4b19      	ldr	r3, [pc, #100]	; (2c34 <_printk_dec_ulong+0xac>)
    2bd0:	fba3 3404 	umull	r3, r4, r3, r4
    2bd4:	08e4      	lsrs	r4, r4, #3
	while (pos >= 9) {
    2bd6:	2c08      	cmp	r4, #8
    2bd8:	d914      	bls.n	2c04 <_printk_dec_ulong+0x7c>
		if (found_largest_digit || remainder > pos) {
    2bda:	f1b8 0f00 	cmp.w	r8, #0
    2bde:	d1e6      	bne.n	2bae <_printk_dec_ulong+0x26>
    2be0:	42ac      	cmp	r4, r5
    2be2:	d3e4      	bcc.n	2bae <_printk_dec_ulong+0x26>
		} else if (remaining <= min_width
    2be4:	42be      	cmp	r6, r7
    2be6:	dcec      	bgt.n	2bc2 <_printk_dec_ulong+0x3a>
				&& padding < PAD_SPACE_AFTER) {
    2be8:	f1bb 0f02 	cmp.w	fp, #2
    2bec:	d8e9      	bhi.n	2bc2 <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2bee:	f1bb 0f01 	cmp.w	fp, #1
    2bf2:	d005      	beq.n	2c00 <_printk_dec_ulong+0x78>
    2bf4:	2020      	movs	r0, #32
    2bf6:	9901      	ldr	r1, [sp, #4]
    2bf8:	47d0      	blx	sl
			digits++;
    2bfa:	f109 0901 	add.w	r9, r9, #1
    2bfe:	e7e0      	b.n	2bc2 <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2c00:	2030      	movs	r0, #48	; 0x30
    2c02:	e7f8      	b.n	2bf6 <_printk_dec_ulong+0x6e>
	}
	out((int)(remainder + 48), ctx);
    2c04:	9901      	ldr	r1, [sp, #4]
    2c06:	f105 0030 	add.w	r0, r5, #48	; 0x30
    2c0a:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    2c0c:	f1bb 0f03 	cmp.w	fp, #3
    2c10:	d002      	beq.n	2c18 <_printk_dec_ulong+0x90>
		remaining = min_width - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2c12:	b003      	add	sp, #12
    2c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width - digits;
    2c18:	eba7 0709 	sub.w	r7, r7, r9
		while (remaining-- > 0) {
    2c1c:	e003      	b.n	2c26 <_printk_dec_ulong+0x9e>
			out(' ', ctx);
    2c1e:	9901      	ldr	r1, [sp, #4]
    2c20:	2020      	movs	r0, #32
    2c22:	47d0      	blx	sl
		while (remaining-- > 0) {
    2c24:	4627      	mov	r7, r4
    2c26:	1e7c      	subs	r4, r7, #1
    2c28:	2f00      	cmp	r7, #0
    2c2a:	dcf8      	bgt.n	2c1e <_printk_dec_ulong+0x96>
    2c2c:	e7f1      	b.n	2c12 <_printk_dec_ulong+0x8a>
    2c2e:	bf00      	nop
    2c30:	3b9ac9ff 	.word	0x3b9ac9ff
    2c34:	cccccccd 	.word	0xcccccccd

00002c38 <str_out>:
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
    2c38:	b410      	push	{r4}
	if (!ctx->str || ctx->count >= ctx->max) {
    2c3a:	680c      	ldr	r4, [r1, #0]
    2c3c:	b154      	cbz	r4, 2c54 <str_out+0x1c>
    2c3e:	688b      	ldr	r3, [r1, #8]
    2c40:	684a      	ldr	r2, [r1, #4]
    2c42:	4293      	cmp	r3, r2
    2c44:	da06      	bge.n	2c54 <str_out+0x1c>
		ctx->count++;
		return c;
	}

	if (ctx->count == ctx->max - 1) {
    2c46:	3a01      	subs	r2, #1
    2c48:	4293      	cmp	r3, r2
    2c4a:	d008      	beq.n	2c5e <str_out+0x26>
		ctx->str[ctx->count++] = '\0';
	} else {
		ctx->str[ctx->count++] = c;
    2c4c:	1c5a      	adds	r2, r3, #1
    2c4e:	608a      	str	r2, [r1, #8]
    2c50:	54e0      	strb	r0, [r4, r3]
    2c52:	e002      	b.n	2c5a <str_out+0x22>
		ctx->count++;
    2c54:	688b      	ldr	r3, [r1, #8]
    2c56:	3301      	adds	r3, #1
    2c58:	608b      	str	r3, [r1, #8]
	}

	return c;
}
    2c5a:	bc10      	pop	{r4}
    2c5c:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    2c5e:	1c5a      	adds	r2, r3, #1
    2c60:	608a      	str	r2, [r1, #8]
    2c62:	2200      	movs	r2, #0
    2c64:	54e2      	strb	r2, [r4, r3]
    2c66:	e7f8      	b.n	2c5a <str_out+0x22>

00002c68 <__printk_hook_install>:
	_char_out = fn;
    2c68:	4b01      	ldr	r3, [pc, #4]	; (2c70 <__printk_hook_install+0x8>)
    2c6a:	6018      	str	r0, [r3, #0]
    2c6c:	4770      	bx	lr
    2c6e:	bf00      	nop
    2c70:	2000b76c 	.word	0x2000b76c

00002c74 <_vprintk>:
{
    2c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c78:	b084      	sub	sp, #16
    2c7a:	4607      	mov	r7, r0
    2c7c:	460e      	mov	r6, r1
    2c7e:	4614      	mov	r4, r2
    2c80:	9303      	str	r3, [sp, #12]
	int long_ctr = 0;
    2c82:	f04f 0800 	mov.w	r8, #0
	int min_width = -1;
    2c86:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    2c8a:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
    2c8c:	4645      	mov	r5, r8
	while (*fmt) {
    2c8e:	e104      	b.n	2e9a <_vprintk+0x226>
			switch (*fmt) {
    2c90:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    2c94:	2b55      	cmp	r3, #85	; 0x55
    2c96:	f200 80f1 	bhi.w	2e7c <_vprintk+0x208>
    2c9a:	e8df f013 	tbh	[pc, r3, lsl #1]
    2c9e:	00ea      	.short	0x00ea
    2ca0:	00ef00ef 	.word	0x00ef00ef
    2ca4:	00ef00ef 	.word	0x00ef00ef
    2ca8:	00ef00ef 	.word	0x00ef00ef
    2cac:	010800ef 	.word	0x010800ef
    2cb0:	00ef00ef 	.word	0x00ef00ef
    2cb4:	00590056 	.word	0x00590056
    2cb8:	00590059 	.word	0x00590059
    2cbc:	00590059 	.word	0x00590059
    2cc0:	00590059 	.word	0x00590059
    2cc4:	00590059 	.word	0x00590059
    2cc8:	00ef00ef 	.word	0x00ef00ef
    2ccc:	00ef00ef 	.word	0x00ef00ef
    2cd0:	00ef00ef 	.word	0x00ef00ef
    2cd4:	00ef00ef 	.word	0x00ef00ef
    2cd8:	00ef00ef 	.word	0x00ef00ef
    2cdc:	00ef00ef 	.word	0x00ef00ef
    2ce0:	00ef00ef 	.word	0x00ef00ef
    2ce4:	00ef00ef 	.word	0x00ef00ef
    2ce8:	00ef00ef 	.word	0x00ef00ef
    2cec:	00ef00ef 	.word	0x00ef00ef
    2cf0:	00ef00ef 	.word	0x00ef00ef
    2cf4:	00ef00ef 	.word	0x00ef00ef
    2cf8:	00ef00ef 	.word	0x00ef00ef
    2cfc:	00ef00ef 	.word	0x00ef00ef
    2d00:	00ef00ef 	.word	0x00ef00ef
    2d04:	00ef00bc 	.word	0x00ef00bc
    2d08:	00ef00ef 	.word	0x00ef00ef
    2d0c:	00ef00ef 	.word	0x00ef00ef
    2d10:	00ef00ef 	.word	0x00ef00ef
    2d14:	00ef00ef 	.word	0x00ef00ef
    2d18:	00e200ef 	.word	0x00e200ef
    2d1c:	00ef0076 	.word	0x00ef0076
    2d20:	00ef00ef 	.word	0x00ef00ef
    2d24:	007600fd 	.word	0x007600fd
    2d28:	00ef00ef 	.word	0x00ef00ef
    2d2c:	00ef0073 	.word	0x00ef0073
    2d30:	00ef00ef 	.word	0x00ef00ef
    2d34:	00ef00b2 	.word	0x00ef00b2
    2d38:	00d500ef 	.word	0x00d500ef
    2d3c:	009900ef 	.word	0x009900ef
    2d40:	00ef00ef 	.word	0x00ef00ef
    2d44:	00ef00bc 	.word	0x00ef00bc
    2d48:	00fd      	.short	0x00fd
				if (min_width < 0 && padding == PAD_NONE) {
    2d4a:	f1ba 0f00 	cmp.w	sl, #0
    2d4e:	db10      	blt.n	2d72 <_vprintk+0xfe>
				if (min_width < 0) {
    2d50:	f1ba 0f00 	cmp.w	sl, #0
    2d54:	db13      	blt.n	2d7e <_vprintk+0x10a>
					min_width = 10 * min_width + *fmt - '0';
    2d56:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    2d5a:	ea4f 034a 	mov.w	r3, sl, lsl #1
    2d5e:	4418      	add	r0, r3
    2d60:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
				if (padding == PAD_NONE) {
    2d64:	f1b9 0f00 	cmp.w	r9, #0
    2d68:	f040 8096 	bne.w	2e98 <_vprintk+0x224>
					padding = PAD_SPACE_BEFORE;
    2d6c:	f04f 0902 	mov.w	r9, #2
    2d70:	e092      	b.n	2e98 <_vprintk+0x224>
				if (min_width < 0 && padding == PAD_NONE) {
    2d72:	f1b9 0f00 	cmp.w	r9, #0
    2d76:	d1eb      	bne.n	2d50 <_vprintk+0xdc>
					padding = PAD_ZERO_BEFORE;
    2d78:	f04f 0901 	mov.w	r9, #1
    2d7c:	e08c      	b.n	2e98 <_vprintk+0x224>
					min_width = *fmt - '0';
    2d7e:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
    2d82:	e7ef      	b.n	2d64 <_vprintk+0xf0>
				long_ctr++;
    2d84:	f108 0801 	add.w	r8, r8, #1
    2d88:	e086      	b.n	2e98 <_vprintk+0x224>
				if (long_ctr < 2) {
    2d8a:	f1b8 0f01 	cmp.w	r8, #1
    2d8e:	dd13      	ble.n	2db8 <_vprintk+0x144>
					d = (long)va_arg(ap, long long);
    2d90:	9b03      	ldr	r3, [sp, #12]
    2d92:	3307      	adds	r3, #7
    2d94:	f023 0307 	bic.w	r3, r3, #7
    2d98:	f103 0208 	add.w	r2, r3, #8
    2d9c:	9203      	str	r2, [sp, #12]
    2d9e:	681d      	ldr	r5, [r3, #0]
				if (d < 0) {
    2da0:	2d00      	cmp	r5, #0
    2da2:	db0e      	blt.n	2dc2 <_vprintk+0x14e>
				_printk_dec_ulong(out, ctx, d, padding,
    2da4:	f8cd a000 	str.w	sl, [sp]
    2da8:	464b      	mov	r3, r9
    2daa:	462a      	mov	r2, r5
    2dac:	4631      	mov	r1, r6
    2dae:	4638      	mov	r0, r7
    2db0:	f7ff feea 	bl	2b88 <_printk_dec_ulong>
			might_format = 0;
    2db4:	2500      	movs	r5, #0
				break;
    2db6:	e06f      	b.n	2e98 <_vprintk+0x224>
					d = va_arg(ap, long);
    2db8:	9b03      	ldr	r3, [sp, #12]
    2dba:	1d1a      	adds	r2, r3, #4
    2dbc:	9203      	str	r2, [sp, #12]
    2dbe:	681d      	ldr	r5, [r3, #0]
    2dc0:	e7ee      	b.n	2da0 <_vprintk+0x12c>
					out((int)'-', ctx);
    2dc2:	4631      	mov	r1, r6
    2dc4:	202d      	movs	r0, #45	; 0x2d
    2dc6:	47b8      	blx	r7
					d = -d;
    2dc8:	426d      	negs	r5, r5
					min_width--;
    2dca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2dce:	e7e9      	b.n	2da4 <_vprintk+0x130>
				if (long_ctr < 2) {
    2dd0:	f1b8 0f01 	cmp.w	r8, #1
    2dd4:	dd10      	ble.n	2df8 <_vprintk+0x184>
					u = (unsigned long)va_arg(ap,
    2dd6:	9b03      	ldr	r3, [sp, #12]
    2dd8:	3307      	adds	r3, #7
    2dda:	f023 0307 	bic.w	r3, r3, #7
    2dde:	f103 0208 	add.w	r2, r3, #8
    2de2:	9203      	str	r2, [sp, #12]
    2de4:	681a      	ldr	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    2de6:	f8cd a000 	str.w	sl, [sp]
    2dea:	464b      	mov	r3, r9
    2dec:	4631      	mov	r1, r6
    2dee:	4638      	mov	r0, r7
    2df0:	f7ff feca 	bl	2b88 <_printk_dec_ulong>
			might_format = 0;
    2df4:	2500      	movs	r5, #0
				break;
    2df6:	e04f      	b.n	2e98 <_vprintk+0x224>
					u = va_arg(ap, unsigned long);
    2df8:	9b03      	ldr	r3, [sp, #12]
    2dfa:	1d1a      	adds	r2, r3, #4
    2dfc:	9203      	str	r2, [sp, #12]
    2dfe:	681a      	ldr	r2, [r3, #0]
    2e00:	e7f1      	b.n	2de6 <_vprintk+0x172>
				  out('0', ctx);
    2e02:	4631      	mov	r1, r6
    2e04:	2030      	movs	r0, #48	; 0x30
    2e06:	47b8      	blx	r7
				  out('x', ctx);
    2e08:	4631      	mov	r1, r6
    2e0a:	2078      	movs	r0, #120	; 0x78
    2e0c:	47b8      	blx	r7
				  min_width = 8;
    2e0e:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
    2e12:	f04f 0901 	mov.w	r9, #1
				if (long_ctr < 2) {
    2e16:	f1b8 0f01 	cmp.w	r8, #1
    2e1a:	dd10      	ble.n	2e3e <_vprintk+0x1ca>
					x = (unsigned long)va_arg(ap,
    2e1c:	9b03      	ldr	r3, [sp, #12]
    2e1e:	3307      	adds	r3, #7
    2e20:	f023 0307 	bic.w	r3, r3, #7
    2e24:	f103 0208 	add.w	r2, r3, #8
    2e28:	9203      	str	r2, [sp, #12]
    2e2a:	681a      	ldr	r2, [r3, #0]
				_printk_hex_ulong(out, ctx, x, padding,
    2e2c:	f8cd a000 	str.w	sl, [sp]
    2e30:	464b      	mov	r3, r9
    2e32:	4631      	mov	r1, r6
    2e34:	4638      	mov	r0, r7
    2e36:	f7ff fe59 	bl	2aec <_printk_hex_ulong>
			might_format = 0;
    2e3a:	2500      	movs	r5, #0
				break;
    2e3c:	e02c      	b.n	2e98 <_vprintk+0x224>
					x = va_arg(ap, unsigned long);
    2e3e:	9b03      	ldr	r3, [sp, #12]
    2e40:	1d1a      	adds	r2, r3, #4
    2e42:	9203      	str	r2, [sp, #12]
    2e44:	681a      	ldr	r2, [r3, #0]
    2e46:	e7f1      	b.n	2e2c <_vprintk+0x1b8>
				char *s = va_arg(ap, char *);
    2e48:	9b03      	ldr	r3, [sp, #12]
    2e4a:	1d1a      	adds	r2, r3, #4
    2e4c:	9203      	str	r2, [sp, #12]
    2e4e:	681d      	ldr	r5, [r3, #0]
				while (*s)
    2e50:	e002      	b.n	2e58 <_vprintk+0x1e4>
					out((int)(*s++), ctx);
    2e52:	3501      	adds	r5, #1
    2e54:	4631      	mov	r1, r6
    2e56:	47b8      	blx	r7
				while (*s)
    2e58:	7828      	ldrb	r0, [r5, #0]
    2e5a:	2800      	cmp	r0, #0
    2e5c:	d1f9      	bne.n	2e52 <_vprintk+0x1de>
			might_format = 0;
    2e5e:	2500      	movs	r5, #0
    2e60:	e01a      	b.n	2e98 <_vprintk+0x224>
				int c = va_arg(ap, int);
    2e62:	9b03      	ldr	r3, [sp, #12]
    2e64:	1d1a      	adds	r2, r3, #4
    2e66:	9203      	str	r2, [sp, #12]
				out(c, ctx);
    2e68:	4631      	mov	r1, r6
    2e6a:	6818      	ldr	r0, [r3, #0]
    2e6c:	47b8      	blx	r7
			might_format = 0;
    2e6e:	2500      	movs	r5, #0
				break;
    2e70:	e012      	b.n	2e98 <_vprintk+0x224>
				out((int)'%', ctx);
    2e72:	4631      	mov	r1, r6
    2e74:	2025      	movs	r0, #37	; 0x25
    2e76:	47b8      	blx	r7
			might_format = 0;
    2e78:	2500      	movs	r5, #0
				break;
    2e7a:	e00d      	b.n	2e98 <_vprintk+0x224>
				out((int)'%', ctx);
    2e7c:	4631      	mov	r1, r6
    2e7e:	2025      	movs	r0, #37	; 0x25
    2e80:	47b8      	blx	r7
				out((int)*fmt, ctx);
    2e82:	4631      	mov	r1, r6
    2e84:	7820      	ldrb	r0, [r4, #0]
    2e86:	47b8      	blx	r7
			might_format = 0;
    2e88:	2500      	movs	r5, #0
				break;
    2e8a:	e005      	b.n	2e98 <_vprintk+0x224>
				long_ctr = 0;
    2e8c:	46a8      	mov	r8, r5
				min_width = -1;
    2e8e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				padding = PAD_NONE;
    2e92:	f04f 0900 	mov.w	r9, #0
				might_format = 1;
    2e96:	2501      	movs	r5, #1
		++fmt;
    2e98:	3401      	adds	r4, #1
	while (*fmt) {
    2e9a:	7820      	ldrb	r0, [r4, #0]
    2e9c:	b150      	cbz	r0, 2eb4 <_vprintk+0x240>
		if (!might_format) {
    2e9e:	2d00      	cmp	r5, #0
    2ea0:	f47f aef6 	bne.w	2c90 <_vprintk+0x1c>
			if (*fmt != '%') {
    2ea4:	2825      	cmp	r0, #37	; 0x25
    2ea6:	d0f1      	beq.n	2e8c <_vprintk+0x218>
				out((int)*fmt, ctx);
    2ea8:	4631      	mov	r1, r6
    2eaa:	47b8      	blx	r7
    2eac:	e7f4      	b.n	2e98 <_vprintk+0x224>
				padding = PAD_SPACE_AFTER;
    2eae:	f04f 0903 	mov.w	r9, #3
    2eb2:	e7f1      	b.n	2e98 <_vprintk+0x224>
}
    2eb4:	b004      	add	sp, #16
    2eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00002ebc <vprintk>:
{
    2ebc:	b510      	push	{r4, lr}
    2ebe:	b082      	sub	sp, #8
	struct out_context ctx = { 0 };
    2ec0:	ac02      	add	r4, sp, #8
    2ec2:	2300      	movs	r3, #0
    2ec4:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    2ec8:	460b      	mov	r3, r1
    2eca:	4602      	mov	r2, r0
    2ecc:	4621      	mov	r1, r4
    2ece:	4803      	ldr	r0, [pc, #12]	; (2edc <vprintk+0x20>)
    2ed0:	f7ff fed0 	bl	2c74 <_vprintk>
}
    2ed4:	9801      	ldr	r0, [sp, #4]
    2ed6:	b002      	add	sp, #8
    2ed8:	bd10      	pop	{r4, pc}
    2eda:	bf00      	nop
    2edc:	00002ad9 	.word	0x00002ad9

00002ee0 <printk>:
{
    2ee0:	b40f      	push	{r0, r1, r2, r3}
    2ee2:	b500      	push	{lr}
    2ee4:	b083      	sub	sp, #12
    2ee6:	a904      	add	r1, sp, #16
    2ee8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    2eec:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    2eee:	f7ff ffe5 	bl	2ebc <vprintk>
}
    2ef2:	b003      	add	sp, #12
    2ef4:	f85d eb04 	ldr.w	lr, [sp], #4
    2ef8:	b004      	add	sp, #16
    2efa:	4770      	bx	lr

00002efc <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    2efc:	b40c      	push	{r2, r3}
    2efe:	b510      	push	{r4, lr}
    2f00:	b084      	sub	sp, #16
    2f02:	4604      	mov	r4, r0
    2f04:	ab06      	add	r3, sp, #24
    2f06:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    2f0a:	9001      	str	r0, [sp, #4]
    2f0c:	9102      	str	r1, [sp, #8]
    2f0e:	2100      	movs	r1, #0
    2f10:	9103      	str	r1, [sp, #12]
	va_list ap;

	va_start(ap, fmt);
    2f12:	9300      	str	r3, [sp, #0]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    2f14:	a901      	add	r1, sp, #4
    2f16:	4807      	ldr	r0, [pc, #28]	; (2f34 <snprintk+0x38>)
    2f18:	f7ff feac 	bl	2c74 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    2f1c:	9b03      	ldr	r3, [sp, #12]
    2f1e:	9a02      	ldr	r2, [sp, #8]
    2f20:	4293      	cmp	r3, r2
    2f22:	da01      	bge.n	2f28 <snprintk+0x2c>
		str[ctx.count] = '\0';
    2f24:	2200      	movs	r2, #0
    2f26:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    2f28:	9803      	ldr	r0, [sp, #12]
    2f2a:	b004      	add	sp, #16
    2f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2f30:	b002      	add	sp, #8
    2f32:	4770      	bx	lr
    2f34:	00002c39 	.word	0x00002c39

00002f38 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_IPV6_NBR_CACHE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_HCI_VS_BUILD_INFO, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_SHOW_TAGS, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_CHAN_SEL_2, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_UDP_CHECKSUM, 1);
    2f38:	4770      	bx	lr

00002f3a <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    2f3a:	428b      	cmp	r3, r1
    2f3c:	d901      	bls.n	2f42 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
    2f3e:	2000      	movs	r0, #0
    2f40:	4770      	bx	lr
{
    2f42:	b510      	push	{r4, lr}
    2f44:	461c      	mov	r4, r3
    2f46:	4611      	mov	r1, r2
		(void)memcpy(to, from, from_len);
    2f48:	461a      	mov	r2, r3
    2f4a:	f7fd f9b9 	bl	2c0 <memcpy>
		return from_len;
    2f4e:	4620      	mov	r0, r4
    2f50:	bd10      	pop	{r4, pc}

00002f52 <_set>:
	}
}

void _set(void *to, uint8_t val, unsigned int len)
{
    2f52:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
    2f54:	f026 fbc0 	bl	296d8 <memset>
    2f58:	bd08      	pop	{r3, pc}

00002f5a <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    2f5a:	09c3      	lsrs	r3, r0, #7
    2f5c:	005a      	lsls	r2, r3, #1
    2f5e:	4413      	add	r3, r2
    2f60:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    2f64:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    2f68:	b2c0      	uxtb	r0, r0
    2f6a:	4770      	bx	lr

00002f6c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    2f6c:	b4f0      	push	{r4, r5, r6, r7}
    2f6e:	b08c      	sub	sp, #48	; 0x30
    2f70:	4604      	mov	r4, r0
    2f72:	460f      	mov	r7, r1
	const unsigned int rconst[11] = {
    2f74:	ad01      	add	r5, sp, #4
    2f76:	4e2a      	ldr	r6, [pc, #168]	; (3020 <tc_aes128_set_encrypt_key+0xb4>)
    2f78:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2f7c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2f7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2f80:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2f84:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    2f88:	2c00      	cmp	r4, #0
    2f8a:	d044      	beq.n	3016 <tc_aes128_set_encrypt_key+0xaa>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    2f8c:	2f00      	cmp	r7, #0
    2f8e:	d044      	beq.n	301a <tc_aes128_set_encrypt_key+0xae>
    2f90:	2200      	movs	r2, #0
    2f92:	e00f      	b.n	2fb4 <tc_aes128_set_encrypt_key+0x48>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    2f94:	f817 0022 	ldrb.w	r0, [r7, r2, lsl #2]
    2f98:	eb07 0182 	add.w	r1, r7, r2, lsl #2
    2f9c:	784b      	ldrb	r3, [r1, #1]
    2f9e:	041b      	lsls	r3, r3, #16
    2fa0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    2fa4:	7888      	ldrb	r0, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    2fa6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    2faa:	78c9      	ldrb	r1, [r1, #3]
    2fac:	430b      	orrs	r3, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    2fae:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (i = 0; i < Nk; ++i) {
    2fb2:	3201      	adds	r2, #1
    2fb4:	2a03      	cmp	r2, #3
    2fb6:	d9ed      	bls.n	2f94 <tc_aes128_set_encrypt_key+0x28>
    2fb8:	e006      	b.n	2fc8 <tc_aes128_set_encrypt_key+0x5c>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
    2fba:	1f11      	subs	r1, r2, #4
    2fbc:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    2fc0:	404b      	eors	r3, r1
    2fc2:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
    2fc6:	3201      	adds	r2, #1
    2fc8:	2a2b      	cmp	r2, #43	; 0x2b
    2fca:	d820      	bhi.n	300e <tc_aes128_set_encrypt_key+0xa2>
		t = s->words[i-1];
    2fcc:	1e53      	subs	r3, r2, #1
    2fce:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
		if ((i % Nk) == 0) {
    2fd2:	f012 0f03 	tst.w	r2, #3
    2fd6:	d1f0      	bne.n	2fba <tc_aes128_set_encrypt_key+0x4e>
	return (((a) >> 24)|((a) << 8));
    2fd8:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    2fdc:	0e19      	lsrs	r1, r3, #24
    2fde:	4811      	ldr	r0, [pc, #68]	; (3024 <tc_aes128_set_encrypt_key+0xb8>)
    2fe0:	5c45      	ldrb	r5, [r0, r1]
    2fe2:	f3c3 4107 	ubfx	r1, r3, #16, #8
    2fe6:	5c41      	ldrb	r1, [r0, r1]
    2fe8:	0409      	lsls	r1, r1, #16
    2fea:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
    2fee:	f3c3 2507 	ubfx	r5, r3, #8, #8
    2ff2:	5d45      	ldrb	r5, [r0, r5]
    2ff4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    2ff8:	b2db      	uxtb	r3, r3
    2ffa:	5cc3      	ldrb	r3, [r0, r3]
    2ffc:	4319      	orrs	r1, r3
    2ffe:	f022 0303 	bic.w	r3, r2, #3
    3002:	a80c      	add	r0, sp, #48	; 0x30
    3004:	4403      	add	r3, r0
    3006:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    300a:	404b      	eors	r3, r1
    300c:	e7d5      	b.n	2fba <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    300e:	2001      	movs	r0, #1
}
    3010:	b00c      	add	sp, #48	; 0x30
    3012:	bcf0      	pop	{r4, r5, r6, r7}
    3014:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    3016:	2000      	movs	r0, #0
    3018:	e7fa      	b.n	3010 <tc_aes128_set_encrypt_key+0xa4>
		return TC_CRYPTO_FAIL;
    301a:	2000      	movs	r0, #0
    301c:	e7f8      	b.n	3010 <tc_aes128_set_encrypt_key+0xa4>
    301e:	bf00      	nop
    3020:	0002da48 	.word	0x0002da48
    3024:	0002f554 	.word	0x0002f554

00003028 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    3028:	2800      	cmp	r0, #0
    302a:	f000 8367 	beq.w	36fc <tc_aes_encrypt+0x6d4>
{
    302e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3032:	b088      	sub	sp, #32
    3034:	4680      	mov	r8, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    3036:	2900      	cmp	r1, #0
    3038:	f000 8362 	beq.w	3700 <tc_aes_encrypt+0x6d8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    303c:	2a00      	cmp	r2, #0
    303e:	f000 8361 	beq.w	3704 <tc_aes_encrypt+0x6dc>
    3042:	4617      	mov	r7, r2
    3044:	460a      	mov	r2, r1
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    3046:	2310      	movs	r3, #16
    3048:	4619      	mov	r1, r3
    304a:	eb0d 0003 	add.w	r0, sp, r3
    304e:	f7ff ff74 	bl	2f3a <_copy>
	add_round_key(state, s->words);
    3052:	463e      	mov	r6, r7
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    3054:	683b      	ldr	r3, [r7, #0]
    3056:	f89d 2010 	ldrb.w	r2, [sp, #16]
    305a:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    305e:	f88d 2010 	strb.w	r2, [sp, #16]
    3062:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3066:	f89d 1011 	ldrb.w	r1, [sp, #17]
    306a:	404a      	eors	r2, r1
    306c:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    3070:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3074:	f89d 1012 	ldrb.w	r1, [sp, #18]
    3078:	404a      	eors	r2, r1
    307a:	f88d 2012 	strb.w	r2, [sp, #18]
    307e:	b2db      	uxtb	r3, r3
    3080:	f89d 2013 	ldrb.w	r2, [sp, #19]
    3084:	4053      	eors	r3, r2
    3086:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    308a:	687b      	ldr	r3, [r7, #4]
    308c:	f89d 2014 	ldrb.w	r2, [sp, #20]
    3090:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3094:	f88d 2014 	strb.w	r2, [sp, #20]
    3098:	f3c3 4207 	ubfx	r2, r3, #16, #8
    309c:	f89d 1015 	ldrb.w	r1, [sp, #21]
    30a0:	404a      	eors	r2, r1
    30a2:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    30a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
    30aa:	f89d 1016 	ldrb.w	r1, [sp, #22]
    30ae:	404a      	eors	r2, r1
    30b0:	f88d 2016 	strb.w	r2, [sp, #22]
    30b4:	b2db      	uxtb	r3, r3
    30b6:	f89d 2017 	ldrb.w	r2, [sp, #23]
    30ba:	4053      	eors	r3, r2
    30bc:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    30c0:	68bb      	ldr	r3, [r7, #8]
    30c2:	f89d 2018 	ldrb.w	r2, [sp, #24]
    30c6:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    30ca:	f88d 2018 	strb.w	r2, [sp, #24]
    30ce:	f3c3 4207 	ubfx	r2, r3, #16, #8
    30d2:	f89d 1019 	ldrb.w	r1, [sp, #25]
    30d6:	404a      	eors	r2, r1
    30d8:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    30dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
    30e0:	f89d 101a 	ldrb.w	r1, [sp, #26]
    30e4:	404a      	eors	r2, r1
    30e6:	f88d 201a 	strb.w	r2, [sp, #26]
    30ea:	b2db      	uxtb	r3, r3
    30ec:	f89d 201b 	ldrb.w	r2, [sp, #27]
    30f0:	4053      	eors	r3, r2
    30f2:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    30f6:	68fb      	ldr	r3, [r7, #12]
    30f8:	f89d 201c 	ldrb.w	r2, [sp, #28]
    30fc:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3100:	f88d 201c 	strb.w	r2, [sp, #28]
    3104:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3108:	f89d 101d 	ldrb.w	r1, [sp, #29]
    310c:	404a      	eors	r2, r1
    310e:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    3112:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3116:	f89d 101e 	ldrb.w	r1, [sp, #30]
    311a:	404a      	eors	r2, r1
    311c:	f88d 201e 	strb.w	r2, [sp, #30]
    3120:	b2db      	uxtb	r3, r3
    3122:	f89d 201f 	ldrb.w	r2, [sp, #31]
    3126:	4053      	eors	r3, r2
    3128:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
    312c:	2500      	movs	r5, #0
    312e:	e210      	b.n	3552 <tc_aes_encrypt+0x52a>
		s[i] = sbox[s[i]];
    3130:	a904      	add	r1, sp, #16
    3132:	5ccc      	ldrb	r4, [r1, r3]
    3134:	4a02      	ldr	r2, [pc, #8]	; (3140 <tc_aes_encrypt+0x118>)
    3136:	5d14      	ldrb	r4, [r2, r4]
    3138:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    313a:	3301      	adds	r3, #1
    313c:	e002      	b.n	3144 <tc_aes_encrypt+0x11c>
    313e:	bf00      	nop
    3140:	0002f554 	.word	0x0002f554
    3144:	2b0f      	cmp	r3, #15
    3146:	d9f3      	bls.n	3130 <tc_aes_encrypt+0x108>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    3148:	f89d 3010 	ldrb.w	r3, [sp, #16]
    314c:	f88d 3000 	strb.w	r3, [sp]
    3150:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3154:	f88d 3001 	strb.w	r3, [sp, #1]
    3158:	f89d 301a 	ldrb.w	r3, [sp, #26]
    315c:	f88d 3002 	strb.w	r3, [sp, #2]
    3160:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3164:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    3168:	f89d 3014 	ldrb.w	r3, [sp, #20]
    316c:	f88d 3004 	strb.w	r3, [sp, #4]
    3170:	f89d 3019 	ldrb.w	r3, [sp, #25]
    3174:	f88d 3005 	strb.w	r3, [sp, #5]
    3178:	f89d 301e 	ldrb.w	r3, [sp, #30]
    317c:	f88d 3006 	strb.w	r3, [sp, #6]
    3180:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3184:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    3188:	f89d 3018 	ldrb.w	r3, [sp, #24]
    318c:	f88d 3008 	strb.w	r3, [sp, #8]
    3190:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3194:	f88d 3009 	strb.w	r3, [sp, #9]
    3198:	f89d 3012 	ldrb.w	r3, [sp, #18]
    319c:	f88d 300a 	strb.w	r3, [sp, #10]
    31a0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    31a4:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    31a8:	f89d 301c 	ldrb.w	r3, [sp, #28]
    31ac:	f88d 300c 	strb.w	r3, [sp, #12]
    31b0:	f89d 3011 	ldrb.w	r3, [sp, #17]
    31b4:	f88d 300d 	strb.w	r3, [sp, #13]
    31b8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    31bc:	f88d 300e 	strb.w	r3, [sp, #14]
    31c0:	f89d 301b 	ldrb.w	r3, [sp, #27]
    31c4:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    31c8:	2310      	movs	r3, #16
    31ca:	466a      	mov	r2, sp
    31cc:	4619      	mov	r1, r3
    31ce:	eb0d 0003 	add.w	r0, sp, r3
    31d2:	f7ff feb2 	bl	2f3a <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    31d6:	f89d 0010 	ldrb.w	r0, [sp, #16]
    31da:	f7ff febe 	bl	2f5a <_double_byte>
    31de:	4604      	mov	r4, r0
    31e0:	f89d 0011 	ldrb.w	r0, [sp, #17]
    31e4:	f7ff feb9 	bl	2f5a <_double_byte>
    31e8:	f89d 1011 	ldrb.w	r1, [sp, #17]
    31ec:	f89d 2012 	ldrb.w	r2, [sp, #18]
    31f0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    31f4:	4048      	eors	r0, r1
    31f6:	4044      	eors	r4, r0
    31f8:	4062      	eors	r2, r4
    31fa:	4053      	eors	r3, r2
    31fc:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    3200:	f89d 4010 	ldrb.w	r4, [sp, #16]
    3204:	4608      	mov	r0, r1
    3206:	f7ff fea8 	bl	2f5a <_double_byte>
    320a:	4044      	eors	r4, r0
    320c:	b2e4      	uxtb	r4, r4
    320e:	f89d 0012 	ldrb.w	r0, [sp, #18]
    3212:	f7ff fea2 	bl	2f5a <_double_byte>
    3216:	f89d 2012 	ldrb.w	r2, [sp, #18]
    321a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    321e:	4050      	eors	r0, r2
    3220:	4044      	eors	r4, r0
    3222:	405c      	eors	r4, r3
    3224:	f88d 4001 	strb.w	r4, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    3228:	f89d 4010 	ldrb.w	r4, [sp, #16]
    322c:	f89d 0011 	ldrb.w	r0, [sp, #17]
    3230:	4044      	eors	r4, r0
    3232:	4610      	mov	r0, r2
    3234:	f7ff fe91 	bl	2f5a <_double_byte>
    3238:	4044      	eors	r4, r0
    323a:	b2e4      	uxtb	r4, r4
    323c:	f89d 0013 	ldrb.w	r0, [sp, #19]
    3240:	f7ff fe8b 	bl	2f5a <_double_byte>
    3244:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3248:	4058      	eors	r0, r3
    324a:	4044      	eors	r4, r0
    324c:	f88d 4002 	strb.w	r4, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    3250:	f89d 0010 	ldrb.w	r0, [sp, #16]
    3254:	f7ff fe81 	bl	2f5a <_double_byte>
    3258:	f89d 2010 	ldrb.w	r2, [sp, #16]
    325c:	f89d 3011 	ldrb.w	r3, [sp, #17]
    3260:	f89d 4012 	ldrb.w	r4, [sp, #18]
    3264:	4050      	eors	r0, r2
    3266:	4043      	eors	r3, r0
    3268:	405c      	eors	r4, r3
    326a:	b2e4      	uxtb	r4, r4
    326c:	f89d 0013 	ldrb.w	r0, [sp, #19]
    3270:	f7ff fe73 	bl	2f5a <_double_byte>
    3274:	4060      	eors	r0, r4
    3276:	f88d 0003 	strb.w	r0, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    327a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    327e:	f7ff fe6c 	bl	2f5a <_double_byte>
    3282:	4604      	mov	r4, r0
    3284:	f89d 0015 	ldrb.w	r0, [sp, #21]
    3288:	f7ff fe67 	bl	2f5a <_double_byte>
    328c:	f89d 1015 	ldrb.w	r1, [sp, #21]
    3290:	f89d 2016 	ldrb.w	r2, [sp, #22]
    3294:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3298:	4048      	eors	r0, r1
    329a:	4044      	eors	r4, r0
    329c:	4062      	eors	r2, r4
    329e:	4053      	eors	r3, r2
    32a0:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    32a4:	f89d 4014 	ldrb.w	r4, [sp, #20]
    32a8:	4608      	mov	r0, r1
    32aa:	f7ff fe56 	bl	2f5a <_double_byte>
    32ae:	4044      	eors	r4, r0
    32b0:	b2e4      	uxtb	r4, r4
    32b2:	f89d 0016 	ldrb.w	r0, [sp, #22]
    32b6:	f7ff fe50 	bl	2f5a <_double_byte>
    32ba:	f89d 2016 	ldrb.w	r2, [sp, #22]
    32be:	f89d 3017 	ldrb.w	r3, [sp, #23]
    32c2:	4050      	eors	r0, r2
    32c4:	4044      	eors	r4, r0
    32c6:	405c      	eors	r4, r3
    32c8:	f88d 4005 	strb.w	r4, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    32cc:	f89d 4014 	ldrb.w	r4, [sp, #20]
    32d0:	f89d 0015 	ldrb.w	r0, [sp, #21]
    32d4:	4044      	eors	r4, r0
    32d6:	4610      	mov	r0, r2
    32d8:	f7ff fe3f 	bl	2f5a <_double_byte>
    32dc:	4044      	eors	r4, r0
    32de:	b2e4      	uxtb	r4, r4
    32e0:	f89d 0017 	ldrb.w	r0, [sp, #23]
    32e4:	f7ff fe39 	bl	2f5a <_double_byte>
    32e8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    32ec:	4058      	eors	r0, r3
    32ee:	4044      	eors	r4, r0
    32f0:	f88d 4006 	strb.w	r4, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    32f4:	f89d 0014 	ldrb.w	r0, [sp, #20]
    32f8:	f7ff fe2f 	bl	2f5a <_double_byte>
    32fc:	f89d 2014 	ldrb.w	r2, [sp, #20]
    3300:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3304:	f89d 4016 	ldrb.w	r4, [sp, #22]
    3308:	4050      	eors	r0, r2
    330a:	4043      	eors	r3, r0
    330c:	405c      	eors	r4, r3
    330e:	b2e4      	uxtb	r4, r4
    3310:	f89d 0017 	ldrb.w	r0, [sp, #23]
    3314:	f7ff fe21 	bl	2f5a <_double_byte>
    3318:	4060      	eors	r0, r4
    331a:	f88d 0007 	strb.w	r0, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    331e:	f89d 0018 	ldrb.w	r0, [sp, #24]
    3322:	f7ff fe1a 	bl	2f5a <_double_byte>
    3326:	4604      	mov	r4, r0
    3328:	f89d 0019 	ldrb.w	r0, [sp, #25]
    332c:	f7ff fe15 	bl	2f5a <_double_byte>
    3330:	f89d 1019 	ldrb.w	r1, [sp, #25]
    3334:	f89d 201a 	ldrb.w	r2, [sp, #26]
    3338:	f89d 301b 	ldrb.w	r3, [sp, #27]
    333c:	4048      	eors	r0, r1
    333e:	4044      	eors	r4, r0
    3340:	4062      	eors	r2, r4
    3342:	4053      	eors	r3, r2
    3344:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    3348:	f89d 4018 	ldrb.w	r4, [sp, #24]
    334c:	4608      	mov	r0, r1
    334e:	f7ff fe04 	bl	2f5a <_double_byte>
    3352:	4044      	eors	r4, r0
    3354:	b2e4      	uxtb	r4, r4
    3356:	f89d 001a 	ldrb.w	r0, [sp, #26]
    335a:	f7ff fdfe 	bl	2f5a <_double_byte>
    335e:	f89d 201a 	ldrb.w	r2, [sp, #26]
    3362:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3366:	4050      	eors	r0, r2
    3368:	4044      	eors	r4, r0
    336a:	405c      	eors	r4, r3
    336c:	f88d 4009 	strb.w	r4, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    3370:	f89d 4018 	ldrb.w	r4, [sp, #24]
    3374:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3378:	4044      	eors	r4, r0
    337a:	4610      	mov	r0, r2
    337c:	f7ff fded 	bl	2f5a <_double_byte>
    3380:	4044      	eors	r4, r0
    3382:	b2e4      	uxtb	r4, r4
    3384:	f89d 001b 	ldrb.w	r0, [sp, #27]
    3388:	f7ff fde7 	bl	2f5a <_double_byte>
    338c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3390:	4058      	eors	r0, r3
    3392:	4044      	eors	r4, r0
    3394:	f88d 400a 	strb.w	r4, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    3398:	f89d 0018 	ldrb.w	r0, [sp, #24]
    339c:	f7ff fddd 	bl	2f5a <_double_byte>
    33a0:	f89d 2018 	ldrb.w	r2, [sp, #24]
    33a4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    33a8:	f89d 401a 	ldrb.w	r4, [sp, #26]
    33ac:	4050      	eors	r0, r2
    33ae:	4043      	eors	r3, r0
    33b0:	405c      	eors	r4, r3
    33b2:	b2e4      	uxtb	r4, r4
    33b4:	f89d 001b 	ldrb.w	r0, [sp, #27]
    33b8:	f7ff fdcf 	bl	2f5a <_double_byte>
    33bc:	4060      	eors	r0, r4
    33be:	f88d 000b 	strb.w	r0, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    33c2:	f89d 001c 	ldrb.w	r0, [sp, #28]
    33c6:	f7ff fdc8 	bl	2f5a <_double_byte>
    33ca:	4604      	mov	r4, r0
    33cc:	f89d 001d 	ldrb.w	r0, [sp, #29]
    33d0:	f7ff fdc3 	bl	2f5a <_double_byte>
    33d4:	f89d 101d 	ldrb.w	r1, [sp, #29]
    33d8:	f89d 201e 	ldrb.w	r2, [sp, #30]
    33dc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33e0:	4048      	eors	r0, r1
    33e2:	4044      	eors	r4, r0
    33e4:	4062      	eors	r2, r4
    33e6:	4053      	eors	r3, r2
    33e8:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    33ec:	f89d 401c 	ldrb.w	r4, [sp, #28]
    33f0:	4608      	mov	r0, r1
    33f2:	f7ff fdb2 	bl	2f5a <_double_byte>
    33f6:	4044      	eors	r4, r0
    33f8:	b2e4      	uxtb	r4, r4
    33fa:	f89d 001e 	ldrb.w	r0, [sp, #30]
    33fe:	f7ff fdac 	bl	2f5a <_double_byte>
    3402:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3406:	f89d 301f 	ldrb.w	r3, [sp, #31]
    340a:	4050      	eors	r0, r2
    340c:	4044      	eors	r4, r0
    340e:	405c      	eors	r4, r3
    3410:	f88d 400d 	strb.w	r4, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    3414:	f89d 401c 	ldrb.w	r4, [sp, #28]
    3418:	f89d 001d 	ldrb.w	r0, [sp, #29]
    341c:	4044      	eors	r4, r0
    341e:	4610      	mov	r0, r2
    3420:	f7ff fd9b 	bl	2f5a <_double_byte>
    3424:	4044      	eors	r4, r0
    3426:	b2e4      	uxtb	r4, r4
    3428:	f89d 001f 	ldrb.w	r0, [sp, #31]
    342c:	f7ff fd95 	bl	2f5a <_double_byte>
    3430:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3434:	4058      	eors	r0, r3
    3436:	4044      	eors	r4, r0
    3438:	f88d 400e 	strb.w	r4, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    343c:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3440:	f7ff fd8b 	bl	2f5a <_double_byte>
    3444:	f89d 201c 	ldrb.w	r2, [sp, #28]
    3448:	f89d 301d 	ldrb.w	r3, [sp, #29]
    344c:	f89d 401e 	ldrb.w	r4, [sp, #30]
    3450:	4050      	eors	r0, r2
    3452:	4043      	eors	r3, r0
    3454:	405c      	eors	r4, r3
    3456:	b2e4      	uxtb	r4, r4
    3458:	f89d 001f 	ldrb.w	r0, [sp, #31]
    345c:	f7ff fd7d 	bl	2f5a <_double_byte>
    3460:	4060      	eors	r0, r4
    3462:	f88d 000f 	strb.w	r0, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    3466:	2310      	movs	r3, #16
    3468:	466a      	mov	r2, sp
    346a:	4619      	mov	r1, r3
    346c:	eb0d 0003 	add.w	r0, sp, r3
    3470:	f7ff fd63 	bl	2f3a <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    3474:	3501      	adds	r5, #1
    3476:	012b      	lsls	r3, r5, #4
    3478:	18f2      	adds	r2, r6, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    347a:	58f3      	ldr	r3, [r6, r3]
    347c:	f89d 1010 	ldrb.w	r1, [sp, #16]
    3480:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3484:	f88d 1010 	strb.w	r1, [sp, #16]
    3488:	f3c3 4107 	ubfx	r1, r3, #16, #8
    348c:	f89d 0011 	ldrb.w	r0, [sp, #17]
    3490:	4041      	eors	r1, r0
    3492:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    3496:	f3c3 2107 	ubfx	r1, r3, #8, #8
    349a:	f89d 0012 	ldrb.w	r0, [sp, #18]
    349e:	4041      	eors	r1, r0
    34a0:	f88d 1012 	strb.w	r1, [sp, #18]
    34a4:	b2db      	uxtb	r3, r3
    34a6:	f89d 1013 	ldrb.w	r1, [sp, #19]
    34aa:	404b      	eors	r3, r1
    34ac:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    34b0:	6853      	ldr	r3, [r2, #4]
    34b2:	f89d 1014 	ldrb.w	r1, [sp, #20]
    34b6:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    34ba:	f88d 1014 	strb.w	r1, [sp, #20]
    34be:	f3c3 4107 	ubfx	r1, r3, #16, #8
    34c2:	f89d 0015 	ldrb.w	r0, [sp, #21]
    34c6:	4041      	eors	r1, r0
    34c8:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    34cc:	f3c3 2107 	ubfx	r1, r3, #8, #8
    34d0:	f89d 0016 	ldrb.w	r0, [sp, #22]
    34d4:	4041      	eors	r1, r0
    34d6:	f88d 1016 	strb.w	r1, [sp, #22]
    34da:	b2db      	uxtb	r3, r3
    34dc:	f89d 1017 	ldrb.w	r1, [sp, #23]
    34e0:	404b      	eors	r3, r1
    34e2:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    34e6:	6893      	ldr	r3, [r2, #8]
    34e8:	f89d 1018 	ldrb.w	r1, [sp, #24]
    34ec:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    34f0:	f88d 1018 	strb.w	r1, [sp, #24]
    34f4:	f3c3 4107 	ubfx	r1, r3, #16, #8
    34f8:	f89d 0019 	ldrb.w	r0, [sp, #25]
    34fc:	4041      	eors	r1, r0
    34fe:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    3502:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3506:	f89d 001a 	ldrb.w	r0, [sp, #26]
    350a:	4041      	eors	r1, r0
    350c:	f88d 101a 	strb.w	r1, [sp, #26]
    3510:	b2db      	uxtb	r3, r3
    3512:	f89d 101b 	ldrb.w	r1, [sp, #27]
    3516:	404b      	eors	r3, r1
    3518:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    351c:	68d3      	ldr	r3, [r2, #12]
    351e:	f89d 201c 	ldrb.w	r2, [sp, #28]
    3522:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3526:	f88d 201c 	strb.w	r2, [sp, #28]
    352a:	f3c3 4207 	ubfx	r2, r3, #16, #8
    352e:	f89d 101d 	ldrb.w	r1, [sp, #29]
    3532:	404a      	eors	r2, r1
    3534:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    3538:	f3c3 2207 	ubfx	r2, r3, #8, #8
    353c:	f89d 101e 	ldrb.w	r1, [sp, #30]
    3540:	404a      	eors	r2, r1
    3542:	f88d 201e 	strb.w	r2, [sp, #30]
    3546:	b2db      	uxtb	r3, r3
    3548:	f89d 201f 	ldrb.w	r2, [sp, #31]
    354c:	4053      	eors	r3, r2
    354e:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
    3552:	2d08      	cmp	r5, #8
    3554:	d801      	bhi.n	355a <tc_aes_encrypt+0x532>
    3556:	2300      	movs	r3, #0
    3558:	e5f4      	b.n	3144 <tc_aes_encrypt+0x11c>
    355a:	2300      	movs	r3, #0
    355c:	e005      	b.n	356a <tc_aes_encrypt+0x542>
		s[i] = sbox[s[i]];
    355e:	aa04      	add	r2, sp, #16
    3560:	5cd1      	ldrb	r1, [r2, r3]
    3562:	4869      	ldr	r0, [pc, #420]	; (3708 <tc_aes_encrypt+0x6e0>)
    3564:	5c41      	ldrb	r1, [r0, r1]
    3566:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    3568:	3301      	adds	r3, #1
    356a:	2b0f      	cmp	r3, #15
    356c:	d9f7      	bls.n	355e <tc_aes_encrypt+0x536>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    356e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3572:	f88d 3000 	strb.w	r3, [sp]
    3576:	f89d 3015 	ldrb.w	r3, [sp, #21]
    357a:	f88d 3001 	strb.w	r3, [sp, #1]
    357e:	f89d 301a 	ldrb.w	r3, [sp, #26]
    3582:	f88d 3002 	strb.w	r3, [sp, #2]
    3586:	f89d 301f 	ldrb.w	r3, [sp, #31]
    358a:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    358e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3592:	f88d 3004 	strb.w	r3, [sp, #4]
    3596:	f89d 3019 	ldrb.w	r3, [sp, #25]
    359a:	f88d 3005 	strb.w	r3, [sp, #5]
    359e:	f89d 301e 	ldrb.w	r3, [sp, #30]
    35a2:	f88d 3006 	strb.w	r3, [sp, #6]
    35a6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    35aa:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    35ae:	f89d 3018 	ldrb.w	r3, [sp, #24]
    35b2:	f88d 3008 	strb.w	r3, [sp, #8]
    35b6:	f89d 301d 	ldrb.w	r3, [sp, #29]
    35ba:	f88d 3009 	strb.w	r3, [sp, #9]
    35be:	f89d 3012 	ldrb.w	r3, [sp, #18]
    35c2:	f88d 300a 	strb.w	r3, [sp, #10]
    35c6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    35ca:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    35ce:	f89d 301c 	ldrb.w	r3, [sp, #28]
    35d2:	f88d 300c 	strb.w	r3, [sp, #12]
    35d6:	f89d 3011 	ldrb.w	r3, [sp, #17]
    35da:	f88d 300d 	strb.w	r3, [sp, #13]
    35de:	f89d 3016 	ldrb.w	r3, [sp, #22]
    35e2:	f88d 300e 	strb.w	r3, [sp, #14]
    35e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    35ea:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    35ee:	2310      	movs	r3, #16
    35f0:	466a      	mov	r2, sp
    35f2:	4619      	mov	r1, r3
    35f4:	eb0d 0003 	add.w	r0, sp, r3
    35f8:	f7ff fc9f 	bl	2f3a <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
    35fc:	1c6b      	adds	r3, r5, #1
    35fe:	011b      	lsls	r3, r3, #4
    3600:	18fa      	adds	r2, r7, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    3602:	58fb      	ldr	r3, [r7, r3]
    3604:	f89d 1010 	ldrb.w	r1, [sp, #16]
    3608:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    360c:	f88d 1010 	strb.w	r1, [sp, #16]
    3610:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3614:	f89d 0011 	ldrb.w	r0, [sp, #17]
    3618:	4041      	eors	r1, r0
    361a:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    361e:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3622:	f89d 0012 	ldrb.w	r0, [sp, #18]
    3626:	4041      	eors	r1, r0
    3628:	f88d 1012 	strb.w	r1, [sp, #18]
    362c:	b2db      	uxtb	r3, r3
    362e:	f89d 1013 	ldrb.w	r1, [sp, #19]
    3632:	404b      	eors	r3, r1
    3634:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    3638:	6853      	ldr	r3, [r2, #4]
    363a:	f89d 1014 	ldrb.w	r1, [sp, #20]
    363e:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3642:	f88d 1014 	strb.w	r1, [sp, #20]
    3646:	f3c3 4107 	ubfx	r1, r3, #16, #8
    364a:	f89d 0015 	ldrb.w	r0, [sp, #21]
    364e:	4041      	eors	r1, r0
    3650:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    3654:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3658:	f89d 0016 	ldrb.w	r0, [sp, #22]
    365c:	4041      	eors	r1, r0
    365e:	f88d 1016 	strb.w	r1, [sp, #22]
    3662:	b2db      	uxtb	r3, r3
    3664:	f89d 1017 	ldrb.w	r1, [sp, #23]
    3668:	404b      	eors	r3, r1
    366a:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    366e:	6893      	ldr	r3, [r2, #8]
    3670:	f89d 1018 	ldrb.w	r1, [sp, #24]
    3674:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3678:	f88d 1018 	strb.w	r1, [sp, #24]
    367c:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3680:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3684:	4041      	eors	r1, r0
    3686:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    368a:	f3c3 2107 	ubfx	r1, r3, #8, #8
    368e:	f89d 001a 	ldrb.w	r0, [sp, #26]
    3692:	4041      	eors	r1, r0
    3694:	f88d 101a 	strb.w	r1, [sp, #26]
    3698:	b2db      	uxtb	r3, r3
    369a:	f89d 101b 	ldrb.w	r1, [sp, #27]
    369e:	404b      	eors	r3, r1
    36a0:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    36a4:	68d3      	ldr	r3, [r2, #12]
    36a6:	f89d 201c 	ldrb.w	r2, [sp, #28]
    36aa:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    36ae:	f88d 201c 	strb.w	r2, [sp, #28]
    36b2:	f3c3 4207 	ubfx	r2, r3, #16, #8
    36b6:	f89d 101d 	ldrb.w	r1, [sp, #29]
    36ba:	404a      	eors	r2, r1
    36bc:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    36c0:	f3c3 2207 	ubfx	r2, r3, #8, #8
    36c4:	f89d 101e 	ldrb.w	r1, [sp, #30]
    36c8:	404a      	eors	r2, r1
    36ca:	f88d 201e 	strb.w	r2, [sp, #30]
    36ce:	b2db      	uxtb	r3, r3
    36d0:	f89d 201f 	ldrb.w	r2, [sp, #31]
    36d4:	4053      	eors	r3, r2
    36d6:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
    36da:	2310      	movs	r3, #16
    36dc:	eb0d 0203 	add.w	r2, sp, r3
    36e0:	4619      	mov	r1, r3
    36e2:	4640      	mov	r0, r8
    36e4:	f7ff fc29 	bl	2f3a <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    36e8:	2210      	movs	r2, #16
    36ea:	2100      	movs	r1, #0
    36ec:	eb0d 0002 	add.w	r0, sp, r2
    36f0:	f7ff fc2f 	bl	2f52 <_set>

	return TC_CRYPTO_SUCCESS;
    36f4:	2001      	movs	r0, #1
}
    36f6:	b008      	add	sp, #32
    36f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
    36fc:	2000      	movs	r0, #0
    36fe:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    3700:	2000      	movs	r0, #0
    3702:	e7f8      	b.n	36f6 <tc_aes_encrypt+0x6ce>
		return TC_CRYPTO_FAIL;
    3704:	2000      	movs	r0, #0
    3706:	e7f6      	b.n	36f6 <tc_aes_encrypt+0x6ce>
    3708:	0002f554 	.word	0x0002f554

0000370c <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    370c:	b430      	push	{r4, r5}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
    370e:	f101 020f 	add.w	r2, r1, #15

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    3712:	f991 3000 	ldrsb.w	r3, [r1]
    3716:	2b00      	cmp	r3, #0
    3718:	db0d      	blt.n	3736 <gf_double+0x2a>
    371a:	2300      	movs	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
    371c:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    371e:	1e45      	subs	r5, r0, #1
    3720:	7814      	ldrb	r4, [r2, #0]
    3722:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
    3726:	7003      	strb	r3, [r0, #0]
		if (x == in) {
    3728:	428a      	cmp	r2, r1
    372a:	d006      	beq.n	373a <gf_double+0x2e>
			break;
		}
		carry = *x-- >> 7;
    372c:	7813      	ldrb	r3, [r2, #0]
    372e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    3730:	4628      	mov	r0, r5
		carry = *x-- >> 7;
    3732:	3a01      	subs	r2, #1
		*out-- = (*x << 1) ^ carry;
    3734:	e7f3      	b.n	371e <gf_double+0x12>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    3736:	2387      	movs	r3, #135	; 0x87
    3738:	e7f0      	b.n	371c <gf_double+0x10>
	}
}
    373a:	bc30      	pop	{r4, r5}
    373c:	4770      	bx	lr

0000373e <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
    373e:	b130      	cbz	r0, 374e <tc_cmac_erase+0x10>
{
    3740:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    3742:	2258      	movs	r2, #88	; 0x58
    3744:	2100      	movs	r1, #0
    3746:	f7ff fc04 	bl	2f52 <_set>

	return TC_CRYPTO_SUCCESS;
    374a:	2001      	movs	r0, #1
    374c:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
    374e:	2000      	movs	r0, #0
    3750:	4770      	bx	lr

00003752 <tc_cmac_init>:
}

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    3752:	b1a0      	cbz	r0, 377e <tc_cmac_init+0x2c>
{
    3754:	b510      	push	{r4, lr}
    3756:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    3758:	2210      	movs	r2, #16
    375a:	2100      	movs	r1, #0
    375c:	f7ff fbf9 	bl	2f52 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    3760:	2210      	movs	r2, #16
    3762:	2100      	movs	r1, #0
    3764:	f104 0030 	add.w	r0, r4, #48	; 0x30
    3768:	f7ff fbf3 	bl	2f52 <_set>
	s->leftover_offset = 0;
    376c:	2300      	movs	r3, #0
    376e:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    3770:	2200      	movs	r2, #0
    3772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3776:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
    377a:	2001      	movs	r0, #1
    377c:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
    377e:	2000      	movs	r0, #0
    3780:	4770      	bx	lr

00003782 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
    3782:	b338      	cbz	r0, 37d4 <tc_cmac_setup+0x52>
{
    3784:	b570      	push	{r4, r5, r6, lr}
    3786:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
    3788:	b331      	cbz	r1, 37d8 <tc_cmac_setup+0x56>
    378a:	4616      	mov	r6, r2
    378c:	460d      	mov	r5, r1
	_set(s, 0, sizeof(*s));
    378e:	2258      	movs	r2, #88	; 0x58
    3790:	2100      	movs	r1, #0
    3792:	f7ff fbde 	bl	2f52 <_set>
	s->sched = sched;
    3796:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    3798:	4629      	mov	r1, r5
    379a:	4630      	mov	r0, r6
    379c:	f7ff fbe6 	bl	2f6c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    37a0:	2210      	movs	r2, #16
    37a2:	2100      	movs	r1, #0
    37a4:	4620      	mov	r0, r4
    37a6:	f7ff fbd4 	bl	2f52 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    37aa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    37ac:	4621      	mov	r1, r4
    37ae:	4620      	mov	r0, r4
    37b0:	f7ff fc3a 	bl	3028 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    37b4:	f104 0510 	add.w	r5, r4, #16
    37b8:	4621      	mov	r1, r4
    37ba:	4628      	mov	r0, r5
    37bc:	f7ff ffa6 	bl	370c <gf_double>
	gf_double (s->K2, s->K1);
    37c0:	4629      	mov	r1, r5
    37c2:	f104 0020 	add.w	r0, r4, #32
    37c6:	f7ff ffa1 	bl	370c <gf_double>
	tc_cmac_init(s);
    37ca:	4620      	mov	r0, r4
    37cc:	f7ff ffc1 	bl	3752 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    37d0:	2001      	movs	r0, #1
    37d2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    37d4:	2000      	movs	r0, #0
    37d6:	4770      	bx	lr
    37d8:	2000      	movs	r0, #0
}
    37da:	bd70      	pop	{r4, r5, r6, pc}

000037dc <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    37dc:	2800      	cmp	r0, #0
    37de:	d05f      	beq.n	38a0 <tc_cmac_update+0xc4>
{
    37e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37e2:	460d      	mov	r5, r1
    37e4:	4616      	mov	r6, r2
    37e6:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    37e8:	2a00      	cmp	r2, #0
    37ea:	d05b      	beq.n	38a4 <tc_cmac_update+0xc8>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
    37ec:	2900      	cmp	r1, #0
    37ee:	d05b      	beq.n	38a8 <tc_cmac_update+0xcc>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
    37f0:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    37f4:	ea52 0103 	orrs.w	r1, r2, r3
    37f8:	d058      	beq.n	38ac <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
    37fa:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    37fe:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    3802:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50

	if (s->leftover_offset > 0) {
    3806:	6c40      	ldr	r0, [r0, #68]	; 0x44
    3808:	2800      	cmp	r0, #0
    380a:	d038      	beq.n	387e <tc_cmac_update+0xa2>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    380c:	f1c0 0710 	rsb	r7, r0, #16

		if (data_length < remaining_space) {
    3810:	42be      	cmp	r6, r7
    3812:	d30b      	bcc.n	382c <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
    3814:	3030      	adds	r0, #48	; 0x30
    3816:	463b      	mov	r3, r7
    3818:	462a      	mov	r2, r5
    381a:	4639      	mov	r1, r7
    381c:	4420      	add	r0, r4
    381e:	f7ff fb8c 	bl	2f3a <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
    3822:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    3824:	443d      	add	r5, r7
		s->leftover_offset = 0;
    3826:	2300      	movs	r3, #0
    3828:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    382a:	e012      	b.n	3852 <tc_cmac_update+0x76>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    382c:	3030      	adds	r0, #48	; 0x30
    382e:	4633      	mov	r3, r6
    3830:	462a      	mov	r2, r5
    3832:	4631      	mov	r1, r6
    3834:	4420      	add	r0, r4
    3836:	f7ff fb80 	bl	2f3a <_copy>
			s->leftover_offset += data_length;
    383a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    383c:	4433      	add	r3, r6
    383e:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
    3840:	2001      	movs	r0, #1
    3842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->iv[i] ^= s->leftover[i];
    3844:	18e2      	adds	r2, r4, r3
    3846:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    384a:	5ce1      	ldrb	r1, [r4, r3]
    384c:	404a      	eors	r2, r1
    384e:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3850:	3301      	adds	r3, #1
    3852:	2b0f      	cmp	r3, #15
    3854:	d9f6      	bls.n	3844 <tc_cmac_update+0x68>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    3856:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    3858:	4621      	mov	r1, r4
    385a:	4620      	mov	r0, r4
    385c:	f7ff fbe4 	bl	3028 <tc_aes_encrypt>
    3860:	e00d      	b.n	387e <tc_cmac_update+0xa2>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
    3862:	5cea      	ldrb	r2, [r5, r3]
    3864:	5ce1      	ldrb	r1, [r4, r3]
    3866:	404a      	eors	r2, r1
    3868:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    386a:	3301      	adds	r3, #1
    386c:	2b0f      	cmp	r3, #15
    386e:	d9f8      	bls.n	3862 <tc_cmac_update+0x86>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    3870:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    3872:	4621      	mov	r1, r4
    3874:	4620      	mov	r0, r4
    3876:	f7ff fbd7 	bl	3028 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    387a:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    387c:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
    387e:	2e10      	cmp	r6, #16
    3880:	d901      	bls.n	3886 <tc_cmac_update+0xaa>
    3882:	2300      	movs	r3, #0
    3884:	e7f2      	b.n	386c <tc_cmac_update+0x90>
	}

	if (data_length > 0) {
    3886:	b90e      	cbnz	r6, 388c <tc_cmac_update+0xb0>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    3888:	2001      	movs	r0, #1
}
    388a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_copy(s->leftover, data_length, data, data_length);
    388c:	4633      	mov	r3, r6
    388e:	462a      	mov	r2, r5
    3890:	4631      	mov	r1, r6
    3892:	f104 0030 	add.w	r0, r4, #48	; 0x30
    3896:	f7ff fb50 	bl	2f3a <_copy>
		s->leftover_offset = data_length;
    389a:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
    389c:	2001      	movs	r0, #1
    389e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    38a0:	2000      	movs	r0, #0
    38a2:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
    38a4:	2001      	movs	r0, #1
    38a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    38a8:	2000      	movs	r0, #0
    38aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    38ac:	2000      	movs	r0, #0
    38ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000038b0 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    38b0:	b370      	cbz	r0, 3910 <tc_cmac_final+0x60>
{
    38b2:	b570      	push	{r4, r5, r6, lr}
    38b4:	4606      	mov	r6, r0
	if (tag == (uint8_t *) 0 ||
    38b6:	b369      	cbz	r1, 3914 <tc_cmac_final+0x64>
    38b8:	460d      	mov	r5, r1
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    38ba:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    38bc:	2a10      	cmp	r2, #16
    38be:	d010      	beq.n	38e2 <tc_cmac_final+0x32>
		k = (uint8_t *) s->K1;
	} else {
		/* the final message block is not a full-sized  block */
		size_t remaining = TC_AES_BLOCK_SIZE - s->leftover_offset;

		_set(&s->leftover[s->leftover_offset], 0, remaining);
    38c0:	f102 0030 	add.w	r0, r2, #48	; 0x30
    38c4:	f1c2 0210 	rsb	r2, r2, #16
    38c8:	2100      	movs	r1, #0
    38ca:	4428      	add	r0, r5
    38cc:	f7ff fb41 	bl	2f52 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    38d0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    38d2:	442b      	add	r3, r5
    38d4:	2280      	movs	r2, #128	; 0x80
    38d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    38da:	f105 0120 	add.w	r1, r5, #32
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    38de:	2300      	movs	r3, #0
    38e0:	e00a      	b.n	38f8 <tc_cmac_final+0x48>
		k = (uint8_t *) s->K1;
    38e2:	3110      	adds	r1, #16
    38e4:	e7fb      	b.n	38de <tc_cmac_final+0x2e>
		s->iv[i] ^= s->leftover[i] ^ k[i];
    38e6:	18ea      	adds	r2, r5, r3
    38e8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    38ec:	5ccc      	ldrb	r4, [r1, r3]
    38ee:	4054      	eors	r4, r2
    38f0:	5cea      	ldrb	r2, [r5, r3]
    38f2:	4062      	eors	r2, r4
    38f4:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    38f6:	3301      	adds	r3, #1
    38f8:	2b0f      	cmp	r3, #15
    38fa:	d9f4      	bls.n	38e6 <tc_cmac_final+0x36>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    38fc:	6caa      	ldr	r2, [r5, #72]	; 0x48
    38fe:	4629      	mov	r1, r5
    3900:	4630      	mov	r0, r6
    3902:	f7ff fb91 	bl	3028 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    3906:	4628      	mov	r0, r5
    3908:	f7ff ff19 	bl	373e <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    390c:	2001      	movs	r0, #1
    390e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    3910:	2000      	movs	r0, #0
    3912:	4770      	bx	lr
    3914:	2000      	movs	r0, #0
}
    3916:	bd70      	pop	{r4, r5, r6, pc}

00003918 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    3918:	2000      	movs	r0, #0
    391a:	4770      	bx	lr

0000391c <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    391c:	b530      	push	{r4, r5, lr}
    391e:	b085      	sub	sp, #20
    3920:	4604      	mov	r4, r0
    3922:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    3924:	2203      	movs	r2, #3
    3926:	4668      	mov	r0, sp
    3928:	f7fc fcca 	bl	2c0 <memcpy>
	memset(res + 3, 0, 13);
    392c:	220d      	movs	r2, #13
    392e:	2100      	movs	r1, #0
    3930:	f10d 0003 	add.w	r0, sp, #3
    3934:	f025 fed0 	bl	296d8 <memset>

	err = bt_encrypt_le(irk, res, res);
    3938:	466a      	mov	r2, sp
    393a:	4669      	mov	r1, sp
    393c:	4620      	mov	r0, r4
    393e:	f00d f89f 	bl	10a80 <bt_encrypt_le>
	if (err) {
    3942:	4604      	mov	r4, r0
    3944:	b110      	cbz	r0, 394c <ah+0x30>
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
    3946:	4620      	mov	r0, r4
    3948:	b005      	add	sp, #20
    394a:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
    394c:	2203      	movs	r2, #3
    394e:	4669      	mov	r1, sp
    3950:	4628      	mov	r0, r5
    3952:	f7fc fcb5 	bl	2c0 <memcpy>
	return 0;
    3956:	e7f6      	b.n	3946 <ah+0x2a>

00003958 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    3958:	b510      	push	{r4, lr}
    395a:	b082      	sub	sp, #8
    395c:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    395e:	aa01      	add	r2, sp, #4
    3960:	3103      	adds	r1, #3
    3962:	f7ff ffdb 	bl	391c <ah>
	if (err) {
    3966:	b110      	cbz	r0, 396e <bt_rpa_irk_matches+0x16>
		return false;
    3968:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
    396a:	b002      	add	sp, #8
    396c:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
    396e:	2203      	movs	r2, #3
    3970:	a901      	add	r1, sp, #4
    3972:	4620      	mov	r0, r4
    3974:	f025 fe1c 	bl	295b0 <memcmp>
    3978:	fab0 f080 	clz	r0, r0
    397c:	0940      	lsrs	r0, r0, #5
    397e:	e7f4      	b.n	396a <bt_rpa_irk_matches+0x12>

00003980 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    3980:	b570      	push	{r4, r5, r6, lr}
    3982:	4606      	mov	r6, r0
    3984:	460c      	mov	r4, r1
	int err;

	err = bt_rand(rpa->val + 3, 3);
    3986:	1ccd      	adds	r5, r1, #3
    3988:	2103      	movs	r1, #3
    398a:	4628      	mov	r0, r5
    398c:	f00d f85c 	bl	10a48 <bt_rand>
	if (err) {
    3990:	4603      	mov	r3, r0
    3992:	b108      	cbz	r0, 3998 <bt_rpa_create+0x18>
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    3994:	4618      	mov	r0, r3
    3996:	bd70      	pop	{r4, r5, r6, pc}
	BT_ADDR_SET_RPA(rpa);
    3998:	f994 3005 	ldrsb.w	r3, [r4, #5]
    399c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    39a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    39a4:	7163      	strb	r3, [r4, #5]
	err = ah(irk, rpa->val + 3, rpa->val);
    39a6:	4622      	mov	r2, r4
    39a8:	4629      	mov	r1, r5
    39aa:	4630      	mov	r0, r6
    39ac:	f7ff ffb6 	bl	391c <ah>
    39b0:	4603      	mov	r3, r0
    39b2:	e7ef      	b.n	3994 <bt_rpa_create+0x14>

000039b4 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    39b4:	b570      	push	{r4, r5, r6, lr}
    39b6:	4605      	mov	r5, r0
    39b8:	460c      	mov	r4, r1
	switch (src->type) {
    39ba:	7803      	ldrb	r3, [r0, #0]
    39bc:	2b01      	cmp	r3, #1
    39be:	d010      	beq.n	39e2 <uuid_to_uuid128+0x2e>
    39c0:	b113      	cbz	r3, 39c8 <uuid_to_uuid128+0x14>
    39c2:	2b02      	cmp	r3, #2
    39c4:	d01f      	beq.n	3a06 <uuid_to_uuid128+0x52>
    39c6:	bd70      	pop	{r4, r5, r6, pc}
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    39c8:	4e12      	ldr	r6, [pc, #72]	; (3a14 <uuid_to_uuid128+0x60>)
    39ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    39cc:	6020      	str	r0, [r4, #0]
    39ce:	6061      	str	r1, [r4, #4]
    39d0:	60a2      	str	r2, [r4, #8]
    39d2:	60e3      	str	r3, [r4, #12]
    39d4:	7833      	ldrb	r3, [r6, #0]
    39d6:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
    39d8:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    39da:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    39dc:	0a1b      	lsrs	r3, r3, #8
    39de:	73a3      	strb	r3, [r4, #14]
    39e0:	bd70      	pop	{r4, r5, r6, pc}
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_32:
		*dst = uuid128_base;
    39e2:	4e0c      	ldr	r6, [pc, #48]	; (3a14 <uuid_to_uuid128+0x60>)
    39e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    39e6:	6020      	str	r0, [r4, #0]
    39e8:	6061      	str	r1, [r4, #4]
    39ea:	60a2      	str	r2, [r4, #8]
    39ec:	60e3      	str	r3, [r4, #12]
    39ee:	7833      	ldrb	r3, [r6, #0]
    39f0:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
    39f2:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
    39f4:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    39f6:	f3c3 2207 	ubfx	r2, r3, #8, #8
    39fa:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    39fc:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    39fe:	73e3      	strb	r3, [r4, #15]
	dst[1] = val >> 8;
    3a00:	0a1b      	lsrs	r3, r3, #8
    3a02:	7423      	strb	r3, [r4, #16]
    3a04:	bd70      	pop	{r4, r5, r6, pc}
    3a06:	4608      	mov	r0, r1
    3a08:	4629      	mov	r1, r5
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
    3a0a:	2211      	movs	r2, #17
    3a0c:	f7fc fc58 	bl	2c0 <memcpy>
    3a10:	bd70      	pop	{r4, r5, r6, pc}
    3a12:	bf00      	nop
    3a14:	0002f7ec 	.word	0x0002f7ec

00003a18 <uuid128_cmp>:
		return;
	}
}

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    3a18:	b510      	push	{r4, lr}
    3a1a:	b08a      	sub	sp, #40	; 0x28
    3a1c:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
    3a1e:	a905      	add	r1, sp, #20
    3a20:	f7ff ffc8 	bl	39b4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    3a24:	4669      	mov	r1, sp
    3a26:	4620      	mov	r0, r4
    3a28:	f7ff ffc4 	bl	39b4 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
    3a2c:	2210      	movs	r2, #16
    3a2e:	f10d 0101 	add.w	r1, sp, #1
    3a32:	f10d 0015 	add.w	r0, sp, #21
    3a36:	f025 fdbb 	bl	295b0 <memcmp>
}
    3a3a:	b00a      	add	sp, #40	; 0x28
    3a3c:	bd10      	pop	{r4, pc}

00003a3e <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    3a3e:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    3a40:	7803      	ldrb	r3, [r0, #0]
    3a42:	780a      	ldrb	r2, [r1, #0]
    3a44:	4293      	cmp	r3, r2
    3a46:	d107      	bne.n	3a58 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
    3a48:	2b01      	cmp	r3, #1
    3a4a:	d00c      	beq.n	3a66 <bt_uuid_cmp+0x28>
    3a4c:	b13b      	cbz	r3, 3a5e <bt_uuid_cmp+0x20>
    3a4e:	2b02      	cmp	r3, #2
    3a50:	d00d      	beq.n	3a6e <bt_uuid_cmp+0x30>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
    3a52:	f06f 0015 	mvn.w	r0, #21
}
    3a56:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
    3a58:	f7ff ffde 	bl	3a18 <uuid128_cmp>
    3a5c:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    3a5e:	8840      	ldrh	r0, [r0, #2]
    3a60:	884b      	ldrh	r3, [r1, #2]
    3a62:	1ac0      	subs	r0, r0, r3
    3a64:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    3a66:	6840      	ldr	r0, [r0, #4]
    3a68:	684b      	ldr	r3, [r1, #4]
    3a6a:	1ac0      	subs	r0, r0, r3
    3a6c:	bd08      	pop	{r3, pc}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    3a6e:	2210      	movs	r2, #16
    3a70:	3101      	adds	r1, #1
    3a72:	3001      	adds	r0, #1
    3a74:	f025 fd9c 	bl	295b0 <memcmp>
    3a78:	bd08      	pop	{r3, pc}
	...

00003a7c <le_dhkey_complete>:
		cb->func(evt->status ? NULL : evt->key);
	}
}

static void le_dhkey_complete(struct net_buf *buf)
{
    3a7c:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    3a7e:	6880      	ldr	r0, [r0, #8]

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    3a80:	4b06      	ldr	r3, [pc, #24]	; (3a9c <le_dhkey_complete+0x20>)
    3a82:	681b      	ldr	r3, [r3, #0]
    3a84:	b133      	cbz	r3, 3a94 <le_dhkey_complete+0x18>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3a86:	7802      	ldrb	r2, [r0, #0]
    3a88:	b92a      	cbnz	r2, 3a96 <le_dhkey_complete+0x1a>
    3a8a:	3001      	adds	r0, #1
    3a8c:	4798      	blx	r3
		dh_key_cb = NULL;
    3a8e:	2200      	movs	r2, #0
    3a90:	4b02      	ldr	r3, [pc, #8]	; (3a9c <le_dhkey_complete+0x20>)
    3a92:	601a      	str	r2, [r3, #0]
    3a94:	bd08      	pop	{r3, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3a96:	2000      	movs	r0, #0
    3a98:	e7f8      	b.n	3a8c <le_dhkey_complete+0x10>
    3a9a:	bf00      	nop
    3a9c:	200001d8 	.word	0x200001d8

00003aa0 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    3aa0:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status %u", rp->status);

	bt_dev.hci_version = rp->hci_version;
    3aa2:	7851      	ldrb	r1, [r2, #1]
    3aa4:	4b06      	ldr	r3, [pc, #24]	; (3ac0 <read_local_ver_complete+0x20>)
    3aa6:	7399      	strb	r1, [r3, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    3aa8:	8851      	ldrh	r1, [r2, #2]
    3aaa:	8219      	strh	r1, [r3, #16]
	bt_dev.lmp_version = rp->lmp_version;
    3aac:	7911      	ldrb	r1, [r2, #4]
    3aae:	73d9      	strb	r1, [r3, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    3ab0:	f8b2 1007 	ldrh.w	r1, [r2, #7]
    3ab4:	8259      	strh	r1, [r3, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    3ab6:	f8b2 2005 	ldrh.w	r2, [r2, #5]
    3aba:	829a      	strh	r2, [r3, #20]
    3abc:	4770      	bx	lr
    3abe:	bf00      	nop
    3ac0:	2000b770 	.word	0x2000b770

00003ac4 <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
    3ac4:	b410      	push	{r4}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
    3ac6:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_le16(const u8_t src[2])
{
	return ((u16_t)src[1] << 8) | src[0];
    3ac8:	7a1a      	ldrb	r2, [r3, #8]
    3aca:	79dc      	ldrb	r4, [r3, #7]
    3acc:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
    3ad0:	7999      	ldrb	r1, [r3, #6]
    3ad2:	795a      	ldrb	r2, [r3, #5]
    3ad4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    3ad8:	2000      	movs	r0, #0
    3ada:	ea42 4104 	orr.w	r1, r2, r4, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    3ade:	791c      	ldrb	r4, [r3, #4]
    3ae0:	78da      	ldrb	r2, [r3, #3]
    3ae2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    3ae6:	789c      	ldrb	r4, [r3, #2]
    3ae8:	785b      	ldrb	r3, [r3, #1]
    3aea:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    3aee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    3af2:	4318      	orrs	r0, r3

	BT_DBG("status %u", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    3af4:	4b02      	ldr	r3, [pc, #8]	; (3b00 <le_read_supp_states_complete+0x3c>)
    3af6:	e9c3 0120 	strd	r0, r1, [r3, #128]	; 0x80
}
    3afa:	bc10      	pop	{r4}
    3afc:	4770      	bx	lr
    3afe:	bf00      	nop
    3b00:	2000b770 	.word	0x2000b770

00003b04 <valid_adv_param>:
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3b04:	7803      	ldrb	r3, [r0, #0]
    3b06:	f013 0f01 	tst.w	r3, #1
    3b0a:	d106      	bne.n	3b1a <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    3b0c:	4b0c      	ldr	r3, [pc, #48]	; (3b40 <valid_adv_param+0x3c>)
    3b0e:	7b9b      	ldrb	r3, [r3, #14]
    3b10:	2b08      	cmp	r3, #8
    3b12:	d802      	bhi.n	3b1a <valid_adv_param+0x16>
		    param->interval_min < 0x00a0) {
    3b14:	8843      	ldrh	r3, [r0, #2]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    3b16:	2b9f      	cmp	r3, #159	; 0x9f
    3b18:	d90c      	bls.n	3b34 <valid_adv_param+0x30>
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    3b1a:	8843      	ldrh	r3, [r0, #2]
    3b1c:	8882      	ldrh	r2, [r0, #4]
    3b1e:	4293      	cmp	r3, r2
    3b20:	d80a      	bhi.n	3b38 <valid_adv_param+0x34>
    3b22:	2b1f      	cmp	r3, #31
    3b24:	d90a      	bls.n	3b3c <valid_adv_param+0x38>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    3b26:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    3b2a:	d801      	bhi.n	3b30 <valid_adv_param+0x2c>
		return false;
	}

	return true;
    3b2c:	2001      	movs	r0, #1
}
    3b2e:	4770      	bx	lr
		return false;
    3b30:	2000      	movs	r0, #0
    3b32:	4770      	bx	lr
			return false;
    3b34:	2000      	movs	r0, #0
    3b36:	4770      	bx	lr
		return false;
    3b38:	2000      	movs	r0, #0
    3b3a:	4770      	bx	lr
    3b3c:	2000      	movs	r0, #0
    3b3e:	4770      	bx	lr
    3b40:	2000b770 	.word	0x2000b770

00003b44 <hci_reset_complete>:
	u8_t status = buf->data[0];
    3b44:	6883      	ldr	r3, [r0, #8]
    3b46:	781b      	ldrb	r3, [r3, #0]
	if (status) {
    3b48:	b103      	cbz	r3, 3b4c <hci_reset_complete+0x8>
    3b4a:	4770      	bx	lr
	scan_dev_found_cb = NULL;
    3b4c:	2200      	movs	r2, #0
    3b4e:	4b07      	ldr	r3, [pc, #28]	; (3b6c <hci_reset_complete+0x28>)
    3b50:	601a      	str	r2, [r3, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3b52:	4b07      	ldr	r3, [pc, #28]	; (3b70 <hci_reset_complete+0x2c>)
    3b54:	2201      	movs	r2, #1
    3b56:	f3bf 8f5b 	dmb	ish
    3b5a:	e853 1f00 	ldrex	r1, [r3]
    3b5e:	e843 2000 	strex	r0, r2, [r3]
    3b62:	2800      	cmp	r0, #0
    3b64:	d1f9      	bne.n	3b5a <hci_reset_complete+0x16>
    3b66:	f3bf 8f5b 	dmb	ish
    3b6a:	e7ee      	b.n	3b4a <hci_reset_complete+0x6>
    3b6c:	20000224 	.word	0x20000224
    3b70:	2000b7e0 	.word	0x2000b7e0

00003b74 <read_local_features_complete>:
{
    3b74:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    3b76:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    3b78:	2208      	movs	r2, #8
    3b7a:	3101      	adds	r1, #1
    3b7c:	4801      	ldr	r0, [pc, #4]	; (3b84 <read_local_features_complete+0x10>)
    3b7e:	f7fc fb9f 	bl	2c0 <memcpy>
    3b82:	bd08      	pop	{r3, pc}
    3b84:	2000b786 	.word	0x2000b786

00003b88 <read_bdaddr_complete>:
{
    3b88:	b510      	push	{r4, lr}
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;
    3b8a:	6881      	ldr	r1, [r0, #8]
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    3b8c:	4c04      	ldr	r4, [pc, #16]	; (3ba0 <read_bdaddr_complete+0x18>)
    3b8e:	2206      	movs	r2, #6
    3b90:	3101      	adds	r1, #1
    3b92:	1c60      	adds	r0, r4, #1
    3b94:	f7fc fb94 	bl	2c0 <memcpy>
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    3b98:	2300      	movs	r3, #0
    3b9a:	7023      	strb	r3, [r4, #0]
    3b9c:	bd10      	pop	{r4, pc}
    3b9e:	bf00      	nop
    3ba0:	2000b770 	.word	0x2000b770

00003ba4 <read_supported_commands_complete>:
{
    3ba4:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    3ba6:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    3ba8:	2240      	movs	r2, #64	; 0x40
    3baa:	3101      	adds	r1, #1
    3bac:	4801      	ldr	r0, [pc, #4]	; (3bb4 <read_supported_commands_complete+0x10>)
    3bae:	f7fc fb87 	bl	2c0 <memcpy>
    3bb2:	bd08      	pop	{r3, pc}
    3bb4:	2000b78e 	.word	0x2000b78e

00003bb8 <read_le_features_complete>:
{
    3bb8:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    3bba:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    3bbc:	2208      	movs	r2, #8
    3bbe:	3101      	adds	r1, #1
    3bc0:	4801      	ldr	r0, [pc, #4]	; (3bc8 <read_le_features_complete+0x10>)
    3bc2:	f7fc fb7d 	bl	2c0 <memcpy>
    3bc6:	bd08      	pop	{r3, pc}
    3bc8:	2000b7e8 	.word	0x2000b7e8

00003bcc <le_read_buffer_size_complete>:
{
    3bcc:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    3bce:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    3bd0:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    3bd4:	b299      	uxth	r1, r3
    3bd6:	4807      	ldr	r0, [pc, #28]	; (3bf4 <le_read_buffer_size_complete+0x28>)
    3bd8:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    3bdc:	b901      	cbnz	r1, 3be0 <le_read_buffer_size_complete+0x14>
    3bde:	bd08      	pop	{r3, pc}
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    3be0:	78d1      	ldrb	r1, [r2, #3]
    3be2:	2902      	cmp	r1, #2
    3be4:	bf28      	it	cs
    3be6:	2102      	movcs	r1, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    3be8:	460a      	mov	r2, r1
    3bea:	308c      	adds	r0, #140	; 0x8c
    3bec:	f024 fd98 	bl	28720 <_impl_k_sem_init>
    3bf0:	e7f5      	b.n	3bde <le_read_buffer_size_complete+0x12>
    3bf2:	bf00      	nop
    3bf4:	2000b770 	.word	0x2000b770

00003bf8 <read_buffer_size_complete>:
{
    3bf8:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    3bfa:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.mtu) {
    3bfc:	4b09      	ldr	r3, [pc, #36]	; (3c24 <read_buffer_size_complete+0x2c>)
    3bfe:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    3c02:	b103      	cbz	r3, 3c06 <read_buffer_size_complete+0xe>
    3c04:	bd08      	pop	{r3, pc}
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    3c06:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    3c0a:	4806      	ldr	r0, [pc, #24]	; (3c24 <read_buffer_size_complete+0x2c>)
    3c0c:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    3c10:	8891      	ldrh	r1, [r2, #4]
	pkts = min(pkts, CONFIG_BT_CONN_TX_MAX);
    3c12:	2902      	cmp	r1, #2
    3c14:	bf28      	it	cs
    3c16:	2102      	movcs	r1, #2
    3c18:	460a      	mov	r2, r1
    3c1a:	308c      	adds	r0, #140	; 0x8c
    3c1c:	f024 fd80 	bl	28720 <_impl_k_sem_init>
    3c20:	e7f0      	b.n	3c04 <read_buffer_size_complete+0xc>
    3c22:	bf00      	nop
    3c24:	2000b770 	.word	0x2000b770

00003c28 <le_pkey_complete>:
{
    3c28:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    3c2a:	6885      	ldr	r5, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3c2c:	4b17      	ldr	r3, [pc, #92]	; (3c8c <le_pkey_complete+0x64>)
    3c2e:	f3bf 8f5b 	dmb	ish
    3c32:	e853 2f00 	ldrex	r2, [r3]
    3c36:	f022 0210 	bic.w	r2, r2, #16
    3c3a:	e843 2100 	strex	r1, r2, [r3]
    3c3e:	2900      	cmp	r1, #0
    3c40:	d1f7      	bne.n	3c32 <le_pkey_complete+0xa>
    3c42:	f3bf 8f5b 	dmb	ish
	if (!evt->status) {
    3c46:	782b      	ldrb	r3, [r5, #0]
    3c48:	b113      	cbz	r3, 3c50 <le_pkey_complete+0x28>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3c4a:	4b11      	ldr	r3, [pc, #68]	; (3c90 <le_pkey_complete+0x68>)
    3c4c:	681c      	ldr	r4, [r3, #0]
    3c4e:	e015      	b.n	3c7c <le_pkey_complete+0x54>
		memcpy(pub_key, evt->key, 64);
    3c50:	2240      	movs	r2, #64	; 0x40
    3c52:	1c69      	adds	r1, r5, #1
    3c54:	480f      	ldr	r0, [pc, #60]	; (3c94 <le_pkey_complete+0x6c>)
    3c56:	f7fc fb33 	bl	2c0 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3c5a:	4b0c      	ldr	r3, [pc, #48]	; (3c8c <le_pkey_complete+0x64>)
    3c5c:	f3bf 8f5b 	dmb	ish
    3c60:	e853 2f00 	ldrex	r2, [r3]
    3c64:	f042 0208 	orr.w	r2, r2, #8
    3c68:	e843 2100 	strex	r1, r2, [r3]
    3c6c:	2900      	cmp	r1, #0
    3c6e:	d1f7      	bne.n	3c60 <le_pkey_complete+0x38>
    3c70:	f3bf 8f5b 	dmb	ish
    3c74:	e7e9      	b.n	3c4a <le_pkey_complete+0x22>
		cb->func(evt->status ? NULL : evt->key);
    3c76:	2000      	movs	r0, #0
    3c78:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3c7a:	6864      	ldr	r4, [r4, #4]
    3c7c:	b12c      	cbz	r4, 3c8a <le_pkey_complete+0x62>
		cb->func(evt->status ? NULL : evt->key);
    3c7e:	6823      	ldr	r3, [r4, #0]
    3c80:	782a      	ldrb	r2, [r5, #0]
    3c82:	2a00      	cmp	r2, #0
    3c84:	d1f7      	bne.n	3c76 <le_pkey_complete+0x4e>
    3c86:	1c68      	adds	r0, r5, #1
    3c88:	e7f6      	b.n	3c78 <le_pkey_complete+0x50>
}
    3c8a:	bd38      	pop	{r3, r4, r5, pc}
    3c8c:	2000b7e0 	.word	0x2000b7e0
    3c90:	2000021c 	.word	0x2000021c
    3c94:	200001dc 	.word	0x200001dc

00003c98 <hci_acl>:
{
    3c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c9a:	4604      	mov	r4, r0
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    3c9c:	6883      	ldr	r3, [r0, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    3c9e:	885e      	ldrh	r6, [r3, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    3ca0:	881a      	ldrh	r2, [r3, #0]
	flags = bt_acl_flags(handle);
    3ca2:	0b17      	lsrs	r7, r2, #12
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    3ca4:	f100 0510 	add.w	r5, r0, #16
    3ca8:	89c3      	ldrh	r3, [r0, #14]
    3caa:	442b      	add	r3, r5
    3cac:	3303      	adds	r3, #3
    3cae:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->handle = bt_acl_handle(handle);
    3cb2:	f3c2 020b 	ubfx	r2, r2, #0, #12
    3cb6:	805a      	strh	r2, [r3, #2]
    3cb8:	89c3      	ldrh	r3, [r0, #14]
    3cba:	442b      	add	r3, r5
    3cbc:	3303      	adds	r3, #3
    3cbe:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->id = BT_CONN_ID_INVALID;
    3cc2:	22ff      	movs	r2, #255	; 0xff
    3cc4:	705a      	strb	r2, [r3, #1]
	net_buf_pull(buf, sizeof(*hdr));
    3cc6:	2104      	movs	r1, #4
    3cc8:	3008      	adds	r0, #8
    3cca:	f016 fa80 	bl	1a1ce <net_buf_simple_pull>
	if (buf->len != len) {
    3cce:	89a3      	ldrh	r3, [r4, #12]
    3cd0:	429e      	cmp	r6, r3
    3cd2:	d003      	beq.n	3cdc <hci_acl+0x44>
		net_buf_unref(buf);
    3cd4:	4620      	mov	r0, r4
    3cd6:	f016 f9e1 	bl	1a09c <net_buf_unref>
		return;
    3cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3cdc:	89e3      	ldrh	r3, [r4, #14]
    3cde:	442b      	add	r3, r5
    3ce0:	3303      	adds	r3, #3
    3ce2:	f023 0303 	bic.w	r3, r3, #3
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    3ce6:	8858      	ldrh	r0, [r3, #2]
    3ce8:	f002 fc7e 	bl	65e8 <bt_conn_lookup_handle>
	if (!conn) {
    3cec:	4606      	mov	r6, r0
    3cee:	b180      	cbz	r0, 3d12 <hci_acl+0x7a>
    3cf0:	89e3      	ldrh	r3, [r4, #14]
    3cf2:	441d      	add	r5, r3
    3cf4:	3503      	adds	r5, #3
    3cf6:	f025 0503 	bic.w	r5, r5, #3
	acl(buf)->id = bt_conn_get_id(conn);
    3cfa:	f003 f83b 	bl	6d74 <bt_conn_get_id>
    3cfe:	7068      	strb	r0, [r5, #1]
	bt_conn_recv(conn, buf, flags);
    3d00:	463a      	mov	r2, r7
    3d02:	4621      	mov	r1, r4
    3d04:	4630      	mov	r0, r6
    3d06:	f002 fb23 	bl	6350 <bt_conn_recv>
	bt_conn_unref(conn);
    3d0a:	4630      	mov	r0, r6
    3d0c:	f002 fcf0 	bl	66f0 <bt_conn_unref>
    3d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    3d12:	4620      	mov	r0, r4
    3d14:	f016 f9c2 	bl	1a09c <net_buf_unref>
		return;
    3d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003d1a <update_sec_level>:
{
    3d1a:	b508      	push	{r3, lr}
	if (!conn->encrypt) {
    3d1c:	7a83      	ldrb	r3, [r0, #10]
    3d1e:	b18b      	cbz	r3, 3d44 <update_sec_level+0x2a>
	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    3d20:	6f03      	ldr	r3, [r0, #112]	; 0x70
    3d22:	b1ab      	cbz	r3, 3d50 <update_sec_level+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3d24:	f3bf 8f5b 	dmb	ish
    3d28:	689b      	ldr	r3, [r3, #8]
    3d2a:	f3bf 8f5b 	dmb	ish
    3d2e:	f013 0f01 	tst.w	r3, #1
    3d32:	d00d      	beq.n	3d50 <update_sec_level+0x36>
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    3d34:	6f03      	ldr	r3, [r0, #112]	; 0x70
    3d36:	899b      	ldrh	r3, [r3, #12]
    3d38:	f013 0f20 	tst.w	r3, #32
    3d3c:	d005      	beq.n	3d4a <update_sec_level+0x30>
			conn->sec_level = BT_SECURITY_FIPS;
    3d3e:	2304      	movs	r3, #4
    3d40:	7203      	strb	r3, [r0, #8]
    3d42:	e007      	b.n	3d54 <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_LOW;
    3d44:	2301      	movs	r3, #1
    3d46:	7203      	strb	r3, [r0, #8]
		return;
    3d48:	bd08      	pop	{r3, pc}
			conn->sec_level = BT_SECURITY_HIGH;
    3d4a:	2303      	movs	r3, #3
    3d4c:	7203      	strb	r3, [r0, #8]
    3d4e:	e001      	b.n	3d54 <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_MEDIUM;
    3d50:	2302      	movs	r3, #2
    3d52:	7203      	strb	r3, [r0, #8]
	if (conn->required_sec_level > conn->sec_level) {
    3d54:	7a42      	ldrb	r2, [r0, #9]
    3d56:	7a03      	ldrb	r3, [r0, #8]
    3d58:	429a      	cmp	r2, r3
    3d5a:	d800      	bhi.n	3d5e <update_sec_level+0x44>
    3d5c:	bd08      	pop	{r3, pc}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    3d5e:	2105      	movs	r1, #5
    3d60:	f002 fe8a 	bl	6a78 <bt_conn_disconnect>
    3d64:	e7fa      	b.n	3d5c <update_sec_level+0x42>

00003d66 <hci_encrypt_change>:
{
    3d66:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    3d68:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    3d6a:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    3d6e:	f002 fc3b 	bl	65e8 <bt_conn_lookup_handle>
	if (!conn) {
    3d72:	b1e0      	cbz	r0, 3dae <hci_encrypt_change+0x48>
    3d74:	4604      	mov	r4, r0
	if (evt->status) {
    3d76:	782b      	ldrb	r3, [r5, #0]
    3d78:	b13b      	cbz	r3, 3d8a <hci_encrypt_change+0x24>
		if (conn->type == BT_CONN_TYPE_LE) {
    3d7a:	7883      	ldrb	r3, [r0, #2]
    3d7c:	b90b      	cbnz	r3, 3d82 <hci_encrypt_change+0x1c>
			conn->required_sec_level = conn->sec_level;
    3d7e:	7a03      	ldrb	r3, [r0, #8]
    3d80:	7243      	strb	r3, [r0, #9]
		bt_conn_unref(conn);
    3d82:	4620      	mov	r0, r4
    3d84:	f002 fcb4 	bl	66f0 <bt_conn_unref>
		return;
    3d88:	bd38      	pop	{r3, r4, r5, pc}
	conn->encrypt = evt->encrypt;
    3d8a:	78eb      	ldrb	r3, [r5, #3]
    3d8c:	7283      	strb	r3, [r0, #10]
	if (conn->type == BT_CONN_TYPE_LE) {
    3d8e:	7882      	ldrb	r2, [r0, #2]
    3d90:	b91a      	cbnz	r2, 3d9a <hci_encrypt_change+0x34>
		if (conn->encrypt) {
    3d92:	b96b      	cbnz	r3, 3db0 <hci_encrypt_change+0x4a>
		update_sec_level(conn);
    3d94:	4620      	mov	r0, r4
    3d96:	f7ff ffc0 	bl	3d1a <update_sec_level>
	bt_l2cap_encrypt_change(conn, evt->status);
    3d9a:	7829      	ldrb	r1, [r5, #0]
    3d9c:	4620      	mov	r0, r4
    3d9e:	f003 fbcb 	bl	7538 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    3da2:	4620      	mov	r0, r4
    3da4:	f002 fa9e 	bl	62e4 <bt_conn_security_changed>
	bt_conn_unref(conn);
    3da8:	4620      	mov	r0, r4
    3daa:	f002 fca1 	bl	66f0 <bt_conn_unref>
    3dae:	bd38      	pop	{r3, r4, r5, pc}
			bt_smp_update_keys(conn);
    3db0:	f008 fafe 	bl	c3b0 <bt_smp_update_keys>
    3db4:	e7ee      	b.n	3d94 <hci_encrypt_change+0x2e>

00003db6 <hci_encrypt_key_refresh_complete>:
{
    3db6:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    3db8:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    3dba:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    3dbe:	f002 fc13 	bl	65e8 <bt_conn_lookup_handle>
	if (!conn) {
    3dc2:	b170      	cbz	r0, 3de2 <hci_encrypt_key_refresh_complete+0x2c>
    3dc4:	4604      	mov	r4, r0
	if (evt->status) {
    3dc6:	7829      	ldrb	r1, [r5, #0]
    3dc8:	b961      	cbnz	r1, 3de4 <hci_encrypt_key_refresh_complete+0x2e>
	if (conn->type == BT_CONN_TYPE_LE) {
    3dca:	7883      	ldrb	r3, [r0, #2]
    3dcc:	b16b      	cbz	r3, 3dea <hci_encrypt_key_refresh_complete+0x34>
	bt_l2cap_encrypt_change(conn, evt->status);
    3dce:	7829      	ldrb	r1, [r5, #0]
    3dd0:	4620      	mov	r0, r4
    3dd2:	f003 fbb1 	bl	7538 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    3dd6:	4620      	mov	r0, r4
    3dd8:	f002 fa84 	bl	62e4 <bt_conn_security_changed>
	bt_conn_unref(conn);
    3ddc:	4620      	mov	r0, r4
    3dde:	f002 fc87 	bl	66f0 <bt_conn_unref>
    3de2:	bd38      	pop	{r3, r4, r5, pc}
		bt_l2cap_encrypt_change(conn, evt->status);
    3de4:	f003 fba8 	bl	7538 <bt_l2cap_encrypt_change>
		return;
    3de8:	bd38      	pop	{r3, r4, r5, pc}
		bt_smp_update_keys(conn);
    3dea:	f008 fae1 	bl	c3b0 <bt_smp_update_keys>
		update_sec_level(conn);
    3dee:	4620      	mov	r0, r4
    3df0:	f7ff ff93 	bl	3d1a <update_sec_level>
    3df4:	e7eb      	b.n	3dce <hci_encrypt_key_refresh_complete+0x18>

00003df6 <find_id_addr>:
{
    3df6:	b510      	push	{r4, lr}
    3df8:	4604      	mov	r4, r0
		keys = bt_keys_find_irk(addr);
    3dfa:	f008 fbe3 	bl	c5c4 <bt_keys_find_irk>
		if (keys) {
    3dfe:	b100      	cbz	r0, 3e02 <find_id_addr+0xc>
			return &keys->addr;
    3e00:	bd10      	pop	{r4, pc}
	return addr;
    3e02:	4620      	mov	r0, r4
}
    3e04:	bd10      	pop	{r4, pc}
	...

00003e08 <update_conn_param>:
{
    3e08:	b508      	push	{r3, lr}
	k_delayed_work_submit(&conn->le.update_work,
    3e0a:	f100 0174 	add.w	r1, r0, #116	; 0x74
				 conn->role == BT_HCI_ROLE_MASTER ? K_NO_WAIT :
    3e0e:	78c3      	ldrb	r3, [r0, #3]
	k_delayed_work_submit(&conn->le.update_work,
    3e10:	b12b      	cbz	r3, 3e1e <update_conn_param+0x16>
    3e12:	f241 3288 	movw	r2, #5000	; 0x1388
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    3e16:	4803      	ldr	r0, [pc, #12]	; (3e24 <update_conn_param+0x1c>)
    3e18:	f025 fad4 	bl	293c4 <k_delayed_work_submit_to_queue>
    3e1c:	bd08      	pop	{r3, pc}
    3e1e:	2200      	movs	r2, #0
    3e20:	e7f9      	b.n	3e16 <update_conn_param+0xe>
    3e22:	bf00      	nop
    3e24:	20002a70 	.word	0x20002a70

00003e28 <le_data_len_change>:
{
    3e28:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
    3e2a:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    3e2c:	8818      	ldrh	r0, [r3, #0]
    3e2e:	f002 fbdb 	bl	65e8 <bt_conn_lookup_handle>
	if (!conn) {
    3e32:	b198      	cbz	r0, 3e5c <le_data_len_change+0x34>
    3e34:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    3e36:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3e38:	f3bf 8f5b 	dmb	ish
    3e3c:	e853 2f00 	ldrex	r2, [r3]
    3e40:	f422 7180 	bic.w	r1, r2, #256	; 0x100
    3e44:	e843 1000 	strex	r0, r1, [r3]
    3e48:	2800      	cmp	r0, #0
    3e4a:	d1f7      	bne.n	3e3c <le_data_len_change+0x14>
    3e4c:	f3bf 8f5b 	dmb	ish
    3e50:	f412 7f80 	tst.w	r2, #256	; 0x100
    3e54:	d103      	bne.n	3e5e <le_data_len_change+0x36>
	bt_conn_unref(conn);
    3e56:	4620      	mov	r0, r4
    3e58:	f002 fc4a 	bl	66f0 <bt_conn_unref>
    3e5c:	bd10      	pop	{r4, pc}
	update_conn_param(conn);
    3e5e:	4620      	mov	r0, r4
    3e60:	f7ff ffd2 	bl	3e08 <update_conn_param>
    3e64:	e7f7      	b.n	3e56 <le_data_len_change+0x2e>
	...

00003e68 <le_data_len_change>:
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
}

static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
    3e68:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3e6a:	4b12      	ldr	r3, [pc, #72]	; (3eb4 <le_data_len_change+0x4c>)
    3e6c:	e9d3 4500 	ldrd	r4, r5, [r3]
    3e70:	2400      	movs	r4, #0
    3e72:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    3e76:	ea54 0305 	orrs.w	r3, r4, r5
    3e7a:	d008      	beq.n	3e8e <le_data_len_change+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    3e7c:	4b0e      	ldr	r3, [pc, #56]	; (3eb8 <le_data_len_change+0x50>)
    3e7e:	e9d3 4500 	ldrd	r4, r5, [r3]
    3e82:	f004 0440 	and.w	r4, r4, #64	; 0x40
    3e86:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3e88:	ea54 0305 	orrs.w	r3, r4, r5
    3e8c:	d100      	bne.n	3e90 <le_data_len_change+0x28>
    3e8e:	bd38      	pop	{r3, r4, r5, pc}
    3e90:	4613      	mov	r3, r2
    3e92:	460d      	mov	r5, r1
    3e94:	4604      	mov	r4, r0
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    3e96:	220a      	movs	r2, #10
    3e98:	2107      	movs	r1, #7
    3e9a:	4618      	mov	r0, r3
    3e9c:	f008 fcf0 	bl	c880 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    3ea0:	8005      	strh	r5, [r0, #0]
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
    3ea2:	8923      	ldrh	r3, [r4, #8]
	sep->max_tx_octets =
    3ea4:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
    3ea6:	8963      	ldrh	r3, [r4, #10]
	sep->max_tx_time =
    3ea8:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
    3eaa:	88a3      	ldrh	r3, [r4, #4]
	sep->max_rx_octets =
    3eac:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_time;
    3eae:	88e3      	ldrh	r3, [r4, #6]
	sep->max_rx_time =
    3eb0:	8103      	strh	r3, [r0, #8]
    3eb2:	e7ec      	b.n	3e8e <le_data_len_change+0x26>
    3eb4:	2000ba60 	.word	0x2000ba60
    3eb8:	2000ba68 	.word	0x2000ba68

00003ebc <le_conn_update_complete>:
{
    3ebc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    3ebe:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    3ec0:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    3ec4:	f002 fb90 	bl	65e8 <bt_conn_lookup_handle>
	if (!conn) {
    3ec8:	b128      	cbz	r0, 3ed6 <le_conn_update_complete+0x1a>
    3eca:	4605      	mov	r5, r0
	if (!evt->status) {
    3ecc:	7823      	ldrb	r3, [r4, #0]
    3ece:	b11b      	cbz	r3, 3ed8 <le_conn_update_complete+0x1c>
	bt_conn_unref(conn);
    3ed0:	4628      	mov	r0, r5
    3ed2:	f002 fc0d 	bl	66f0 <bt_conn_unref>
    3ed6:	bd38      	pop	{r3, r4, r5, pc}
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    3ed8:	f8b4 3003 	ldrh.w	r3, [r4, #3]
    3edc:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    3ee0:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    3ee4:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3ee8:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    3eec:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    3ef0:	f002 f912 	bl	6118 <notify_le_param_updated>
    3ef4:	e7ec      	b.n	3ed0 <le_conn_update_complete+0x14>
	...

00003ef8 <le_conn_update_complete>:
{
    3ef8:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3efa:	4b14      	ldr	r3, [pc, #80]	; (3f4c <le_conn_update_complete+0x54>)
    3efc:	e9d3 4500 	ldrd	r4, r5, [r3]
    3f00:	2400      	movs	r4, #0
    3f02:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    3f06:	ea54 0305 	orrs.w	r3, r4, r5
    3f0a:	d008      	beq.n	3f1e <le_conn_update_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    3f0c:	4b10      	ldr	r3, [pc, #64]	; (3f50 <le_conn_update_complete+0x58>)
    3f0e:	e9d3 4500 	ldrd	r4, r5, [r3]
    3f12:	f004 0404 	and.w	r4, r4, #4
    3f16:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3f18:	ea54 0305 	orrs.w	r3, r4, r5
    3f1c:	d100      	bne.n	3f20 <le_conn_update_complete+0x28>
    3f1e:	bd38      	pop	{r3, r4, r5, pc}
    3f20:	4613      	mov	r3, r2
    3f22:	460d      	mov	r5, r1
    3f24:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    3f26:	2209      	movs	r2, #9
    3f28:	2103      	movs	r1, #3
    3f2a:	4618      	mov	r0, r3
    3f2c:	f008 fca8 	bl	c880 <meta_evt>
	sep->status = radio_cu->status;
    3f30:	78e3      	ldrb	r3, [r4, #3]
    3f32:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    3f34:	f8a0 5001 	strh.w	r5, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    3f38:	88a3      	ldrh	r3, [r4, #4]
    3f3a:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    3f3e:	88e3      	ldrh	r3, [r4, #6]
    3f40:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    3f44:	8923      	ldrh	r3, [r4, #8]
    3f46:	f8a0 3007 	strh.w	r3, [r0, #7]
    3f4a:	e7e8      	b.n	3f1e <le_conn_update_complete+0x26>
    3f4c:	2000ba60 	.word	0x2000ba60
    3f50:	2000ba68 	.word	0x2000ba68

00003f54 <hci_cmd_done>:
{
    3f54:	b538      	push	{r3, r4, r5, lr}
    3f56:	460d      	mov	r5, r1
    3f58:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    3f5a:	7990      	ldrb	r0, [r2, #6]
    3f5c:	f016 f824 	bl	19fa8 <net_buf_pool_get>
    3f60:	4b0b      	ldr	r3, [pc, #44]	; (3f90 <hci_cmd_done+0x3c>)
    3f62:	4283      	cmp	r3, r0
    3f64:	d000      	beq.n	3f68 <hci_cmd_done+0x14>
    3f66:	bd38      	pop	{r3, r4, r5, pc}
    3f68:	f104 0210 	add.w	r2, r4, #16
    3f6c:	89e3      	ldrh	r3, [r4, #14]
    3f6e:	4413      	add	r3, r2
    3f70:	3303      	adds	r3, #3
    3f72:	f023 0303 	bic.w	r3, r3, #3
	if (cmd(buf)->sync) {
    3f76:	6859      	ldr	r1, [r3, #4]
    3f78:	2900      	cmp	r1, #0
    3f7a:	d0f4      	beq.n	3f66 <hci_cmd_done+0x12>
		cmd(buf)->status = status;
    3f7c:	705d      	strb	r5, [r3, #1]
    3f7e:	89e3      	ldrh	r3, [r4, #14]
    3f80:	441a      	add	r2, r3
    3f82:	3203      	adds	r2, #3
    3f84:	f022 0203 	bic.w	r2, r2, #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3f88:	6850      	ldr	r0, [r2, #4]
    3f8a:	f024 fbd2 	bl	28732 <_impl_k_sem_give>
    3f8e:	e7ea      	b.n	3f66 <hci_cmd_done+0x12>
    3f90:	2000d014 	.word	0x2000d014

00003f94 <hci_cmd_complete>:
{
    3f94:	b570      	push	{r4, r5, r6, lr}
    3f96:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    3f98:	f850 3f08 	ldr.w	r3, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3f9c:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    3fa0:	781d      	ldrb	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    3fa2:	2103      	movs	r1, #3
    3fa4:	f016 f913 	bl	1a1ce <net_buf_simple_pull>
	status = buf->data[0];
    3fa8:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    3faa:	4622      	mov	r2, r4
    3fac:	7819      	ldrb	r1, [r3, #0]
    3fae:	4630      	mov	r0, r6
    3fb0:	f7ff ffd0 	bl	3f54 <hci_cmd_done>
	if (ncmd) {
    3fb4:	b905      	cbnz	r5, 3fb8 <hci_cmd_complete+0x24>
    3fb6:	bd70      	pop	{r4, r5, r6, pc}
    3fb8:	4801      	ldr	r0, [pc, #4]	; (3fc0 <hci_cmd_complete+0x2c>)
    3fba:	f024 fbba 	bl	28732 <_impl_k_sem_give>
}
    3fbe:	e7fa      	b.n	3fb6 <hci_cmd_complete+0x22>
    3fc0:	2000b818 	.word	0x2000b818

00003fc4 <hci_cmd_status>:
{
    3fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fc6:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    3fc8:	f850 4f08 	ldr.w	r4, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3fcc:	8867      	ldrh	r7, [r4, #2]
	u8_t ncmd = evt->ncmd;
    3fce:	7866      	ldrb	r6, [r4, #1]
	net_buf_pull(buf, sizeof(*evt));
    3fd0:	2104      	movs	r1, #4
    3fd2:	f016 f8fc 	bl	1a1ce <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    3fd6:	462a      	mov	r2, r5
    3fd8:	7821      	ldrb	r1, [r4, #0]
    3fda:	4638      	mov	r0, r7
    3fdc:	f7ff ffba 	bl	3f54 <hci_cmd_done>
	if (ncmd) {
    3fe0:	b906      	cbnz	r6, 3fe4 <hci_cmd_status+0x20>
    3fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fe4:	4801      	ldr	r0, [pc, #4]	; (3fec <hci_cmd_status+0x28>)
    3fe6:	f024 fba4 	bl	28732 <_impl_k_sem_give>
}
    3fea:	e7fa      	b.n	3fe2 <hci_cmd_status+0x1e>
    3fec:	2000b818 	.word	0x2000b818

00003ff0 <hci_num_completed_packets>:
{
    3ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    3ff4:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
    3ff8:	2700      	movs	r7, #0
    3ffa:	e026      	b.n	404a <hci_num_completed_packets+0x5a>
    3ffc:	f386 8811 	msr	BASEPRI, r6
			continue;
    4000:	e022      	b.n	4048 <hci_num_completed_packets+0x58>
    4002:	f383 8811 	msr	BASEPRI, r3
			if (!node) {
    4006:	b1e1      	cbz	r1, 4042 <hci_num_completed_packets+0x52>
			k_fifo_put(&conn->tx_notify, node);
    4008:	f104 001c 	add.w	r0, r4, #28
    400c:	f023 fffa 	bl	28004 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    4010:	4620      	mov	r0, r4
    4012:	f002 f85f 	bl	60d4 <bt_conn_get_pkts>
    4016:	f024 fb8c 	bl	28732 <_impl_k_sem_give>
		while (count--) {
    401a:	4635      	mov	r5, r6
    401c:	1e6b      	subs	r3, r5, #1
    401e:	b29e      	uxth	r6, r3
    4020:	b17d      	cbz	r5, 4042 <hci_num_completed_packets+0x52>
	__asm__ volatile(
    4022:	f04f 0220 	mov.w	r2, #32
    4026:	f3ef 8311 	mrs	r3, BASEPRI
    402a:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    402e:	6961      	ldr	r1, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    4030:	2900      	cmp	r1, #0
    4032:	d0e6      	beq.n	4002 <hci_num_completed_packets+0x12>
	list->head = node->next;
    4034:	680a      	ldr	r2, [r1, #0]
    4036:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    4038:	69a0      	ldr	r0, [r4, #24]
    403a:	4281      	cmp	r1, r0
    403c:	d1e1      	bne.n	4002 <hci_num_completed_packets+0x12>
		list->tail = list->head;
    403e:	61a2      	str	r2, [r4, #24]
    4040:	e7df      	b.n	4002 <hci_num_completed_packets+0x12>
		bt_conn_unref(conn);
    4042:	4620      	mov	r0, r4
    4044:	f002 fb54 	bl	66f0 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
    4048:	3701      	adds	r7, #1
    404a:	f898 3000 	ldrb.w	r3, [r8]
    404e:	429f      	cmp	r7, r3
    4050:	da13      	bge.n	407a <hci_num_completed_packets+0x8a>
		handle = sys_le16_to_cpu(evt->h[i].handle);
    4052:	eb08 0387 	add.w	r3, r8, r7, lsl #2
    4056:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    405a:	f8b3 5003 	ldrh.w	r5, [r3, #3]
    405e:	f04f 0320 	mov.w	r3, #32
    4062:	f3ef 8611 	mrs	r6, BASEPRI
    4066:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    406a:	f002 fabd 	bl	65e8 <bt_conn_lookup_handle>
		if (!conn) {
    406e:	4604      	mov	r4, r0
    4070:	2800      	cmp	r0, #0
    4072:	d0c3      	beq.n	3ffc <hci_num_completed_packets+0xc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4074:	f386 8811 	msr	BASEPRI, r6
    4078:	e7d0      	b.n	401c <hci_num_completed_packets+0x2c>
}
    407a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00004080 <bt_hci_cmd_create>:
{
    4080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4082:	4607      	mov	r7, r0
    4084:	460d      	mov	r5, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    4086:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    408a:	4812      	ldr	r0, [pc, #72]	; (40d4 <bt_hci_cmd_create+0x54>)
    408c:	f015 ff98 	bl	19fc0 <net_buf_alloc>
    4090:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4092:	2100      	movs	r1, #0
    4094:	f015 ffef 	bl	1a076 <net_buf_reserve>
    4098:	f104 0310 	add.w	r3, r4, #16
    409c:	89e2      	ldrh	r2, [r4, #14]
    409e:	441a      	add	r2, r3
    40a0:	3203      	adds	r2, #3
    40a2:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->type = BT_BUF_CMD;
    40a6:	2100      	movs	r1, #0
    40a8:	7011      	strb	r1, [r2, #0]
    40aa:	89e2      	ldrh	r2, [r4, #14]
    40ac:	441a      	add	r2, r3
    40ae:	3203      	adds	r2, #3
    40b0:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->opcode = opcode;
    40b4:	8057      	strh	r7, [r2, #2]
    40b6:	89e2      	ldrh	r2, [r4, #14]
    40b8:	4413      	add	r3, r2
    40ba:	3303      	adds	r3, #3
    40bc:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = NULL;
    40c0:	6059      	str	r1, [r3, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    40c2:	2103      	movs	r1, #3
    40c4:	f104 0008 	add.w	r0, r4, #8
    40c8:	f016 f834 	bl	1a134 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    40cc:	8007      	strh	r7, [r0, #0]
	hdr->param_len = param_len;
    40ce:	7085      	strb	r5, [r0, #2]
}
    40d0:	4620      	mov	r0, r4
    40d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40d4:	2000d014 	.word	0x2000d014

000040d8 <bt_hci_cmd_send_sync>:
{
    40d8:	b570      	push	{r4, r5, r6, lr}
    40da:	b086      	sub	sp, #24
    40dc:	4616      	mov	r6, r2
	if (!buf) {
    40de:	460d      	mov	r5, r1
    40e0:	b329      	cbz	r1, 412e <bt_hci_cmd_send_sync+0x56>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    40e2:	2201      	movs	r2, #1
    40e4:	2100      	movs	r1, #0
    40e6:	4668      	mov	r0, sp
    40e8:	f024 fb1a 	bl	28720 <_impl_k_sem_init>
    40ec:	f105 0410 	add.w	r4, r5, #16
    40f0:	89eb      	ldrh	r3, [r5, #14]
    40f2:	4423      	add	r3, r4
    40f4:	3303      	adds	r3, #3
    40f6:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = &sync_sem;
    40fa:	f8c3 d004 	str.w	sp, [r3, #4]
	net_buf_ref(buf);
    40fe:	4628      	mov	r0, r5
    4100:	f015 ffe8 	bl	1a0d4 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    4104:	4629      	mov	r1, r5
    4106:	4813      	ldr	r0, [pc, #76]	; (4154 <bt_hci_cmd_send_sync+0x7c>)
    4108:	f015 ffba 	bl	1a080 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    410c:	f242 7110 	movw	r1, #10000	; 0x2710
    4110:	4668      	mov	r0, sp
    4112:	f024 fb21 	bl	28758 <_impl_k_sem_take>
    4116:	89eb      	ldrh	r3, [r5, #14]
    4118:	441c      	add	r4, r3
    411a:	3403      	adds	r4, #3
    411c:	f024 0403 	bic.w	r4, r4, #3
	if (cmd(buf)->status) {
    4120:	7863      	ldrb	r3, [r4, #1]
    4122:	b963      	cbnz	r3, 413e <bt_hci_cmd_send_sync+0x66>
		if (rsp) {
    4124:	b18e      	cbz	r6, 414a <bt_hci_cmd_send_sync+0x72>
			*rsp = buf;
    4126:	6035      	str	r5, [r6, #0]
		err = 0;
    4128:	2000      	movs	r0, #0
}
    412a:	b006      	add	sp, #24
    412c:	bd70      	pop	{r4, r5, r6, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    412e:	f7ff ffa7 	bl	4080 <bt_hci_cmd_create>
		if (!buf) {
    4132:	4605      	mov	r5, r0
    4134:	2800      	cmp	r0, #0
    4136:	d1d4      	bne.n	40e2 <bt_hci_cmd_send_sync+0xa>
			return -ENOBUFS;
    4138:	f06f 0068 	mvn.w	r0, #104	; 0x68
    413c:	e7f5      	b.n	412a <bt_hci_cmd_send_sync+0x52>
		net_buf_unref(buf);
    413e:	4628      	mov	r0, r5
    4140:	f015 ffac 	bl	1a09c <net_buf_unref>
		err = -EIO;
    4144:	f06f 0004 	mvn.w	r0, #4
    4148:	e7ef      	b.n	412a <bt_hci_cmd_send_sync+0x52>
			net_buf_unref(buf);
    414a:	4628      	mov	r0, r5
    414c:	f015 ffa6 	bl	1a09c <net_buf_unref>
		err = 0;
    4150:	2000      	movs	r0, #0
    4152:	e7ea      	b.n	412a <bt_hci_cmd_send_sync+0x52>
    4154:	2000b844 	.word	0x2000b844

00004158 <common_init>:
{
    4158:	b510      	push	{r4, lr}
    415a:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    415c:	aa01      	add	r2, sp, #4
    415e:	2100      	movs	r1, #0
    4160:	f640 4003 	movw	r0, #3075	; 0xc03
    4164:	f7ff ffb8 	bl	40d8 <bt_hci_cmd_send_sync>
	if (err) {
    4168:	4604      	mov	r4, r0
    416a:	b110      	cbz	r0, 4172 <common_init+0x1a>
}
    416c:	4620      	mov	r0, r4
    416e:	b002      	add	sp, #8
    4170:	bd10      	pop	{r4, pc}
	hci_reset_complete(rsp);
    4172:	9801      	ldr	r0, [sp, #4]
    4174:	f7ff fce6 	bl	3b44 <hci_reset_complete>
	net_buf_unref(rsp);
    4178:	ac02      	add	r4, sp, #8
    417a:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    417e:	f015 ff8d 	bl	1a09c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    4182:	4622      	mov	r2, r4
    4184:	2100      	movs	r1, #0
    4186:	f241 0003 	movw	r0, #4099	; 0x1003
    418a:	f7ff ffa5 	bl	40d8 <bt_hci_cmd_send_sync>
	if (err) {
    418e:	4604      	mov	r4, r0
    4190:	2800      	cmp	r0, #0
    4192:	d1eb      	bne.n	416c <common_init+0x14>
	read_local_features_complete(rsp);
    4194:	9801      	ldr	r0, [sp, #4]
    4196:	f7ff fced 	bl	3b74 <read_local_features_complete>
	net_buf_unref(rsp);
    419a:	ac02      	add	r4, sp, #8
    419c:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    41a0:	f015 ff7c 	bl	1a09c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    41a4:	4622      	mov	r2, r4
    41a6:	2100      	movs	r1, #0
    41a8:	f241 0001 	movw	r0, #4097	; 0x1001
    41ac:	f7ff ff94 	bl	40d8 <bt_hci_cmd_send_sync>
	if (err) {
    41b0:	4604      	mov	r4, r0
    41b2:	2800      	cmp	r0, #0
    41b4:	d1da      	bne.n	416c <common_init+0x14>
	read_local_ver_complete(rsp);
    41b6:	9801      	ldr	r0, [sp, #4]
    41b8:	f7ff fc72 	bl	3aa0 <read_local_ver_complete>
	net_buf_unref(rsp);
    41bc:	ac02      	add	r4, sp, #8
    41be:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    41c2:	f015 ff6b 	bl	1a09c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    41c6:	4622      	mov	r2, r4
    41c8:	2100      	movs	r1, #0
    41ca:	f241 0009 	movw	r0, #4105	; 0x1009
    41ce:	f7ff ff83 	bl	40d8 <bt_hci_cmd_send_sync>
	if (err) {
    41d2:	4604      	mov	r4, r0
    41d4:	2800      	cmp	r0, #0
    41d6:	d1c9      	bne.n	416c <common_init+0x14>
	read_bdaddr_complete(rsp);
    41d8:	9801      	ldr	r0, [sp, #4]
    41da:	f7ff fcd5 	bl	3b88 <read_bdaddr_complete>
	net_buf_unref(rsp);
    41de:	ac02      	add	r4, sp, #8
    41e0:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    41e4:	f015 ff5a 	bl	1a09c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    41e8:	4622      	mov	r2, r4
    41ea:	2100      	movs	r1, #0
    41ec:	f241 0002 	movw	r0, #4098	; 0x1002
    41f0:	f7ff ff72 	bl	40d8 <bt_hci_cmd_send_sync>
	if (err) {
    41f4:	4604      	mov	r4, r0
    41f6:	2800      	cmp	r0, #0
    41f8:	d1b8      	bne.n	416c <common_init+0x14>
	read_supported_commands_complete(rsp);
    41fa:	9801      	ldr	r0, [sp, #4]
    41fc:	f7ff fcd2 	bl	3ba4 <read_supported_commands_complete>
	net_buf_unref(rsp);
    4200:	9801      	ldr	r0, [sp, #4]
    4202:	f015 ff4b 	bl	1a09c <net_buf_unref>
	return 0;
    4206:	e7b1      	b.n	416c <common_init+0x14>

00004208 <common_init>:
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    4208:	b538      	push	{r3, r4, r5, lr}
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    420a:	4b3a      	ldr	r3, [pc, #232]	; (42f4 <common_init+0xec>)
    420c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
    4210:	2a00      	cmp	r2, #0
    4212:	d15e      	bne.n	42d2 <common_init+0xca>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
			 _radio.connection_count,
			 &_radio.conn_free);
	} else {
		_radio.conn_free = NULL;
    4214:	2200      	movs	r2, #0
    4216:	4b37      	ldr	r3, [pc, #220]	; (42f4 <common_init+0xec>)
    4218:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}

	/* initialise rx pool. */
	mem_init(_radio.pkt_rx_data_pool,
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
    421c:	4c35      	ldr	r4, [pc, #212]	; (42f4 <common_init+0xec>)
	mem_init(_radio.pkt_rx_data_pool,
    421e:	f504 7396 	add.w	r3, r4, #300	; 0x12c
    4222:	f894 2136 	ldrb.w	r2, [r4, #310]	; 0x136
    4226:	f8b4 1134 	ldrh.w	r1, [r4, #308]	; 0x134
    422a:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    422e:	f00a fa47 	bl	e6c0 <mem_init>
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
		 (_radio.packet_rx_count + _radio.connection_count),
    4232:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    4236:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    423a:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    423e:	462b      	mov	r3, r5
    4240:	440a      	add	r2, r1
    4242:	2108      	movs	r1, #8
    4244:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    4248:	f00a fa3a 	bl	e6c0 <mem_init>
		 &_radio.link_rx_free);

	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    424c:	f504 73ac 	add.w	r3, r4, #344	; 0x158
    4250:	2202      	movs	r2, #2
    4252:	2124      	movs	r1, #36	; 0x24
    4254:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    4258:	f00a fa32 	bl	e6c0 <mem_init>
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    425c:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    4260:	3a01      	subs	r2, #1
    4262:	f504 73b0 	add.w	r3, r4, #352	; 0x160
    4266:	b292      	uxth	r2, r2
    4268:	f8b4 1164 	ldrh.w	r1, [r4, #356]	; 0x164
    426c:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    4270:	f00a fa26 	bl	e6c0 <mem_init>

	/* initialise the event-cum-data memq */
	link = mem_acquire(&_radio.link_rx_free);
    4274:	4628      	mov	r0, r5
    4276:	f00a fa48 	bl	e70a <mem_acquire>
	LL_ASSERT(link);
    427a:	b3a0      	cbz	r0, 42e6 <common_init+0xde>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    427c:	4c1d      	ldr	r4, [pc, #116]	; (42f4 <common_init+0xec>)
    427e:	f504 72a6 	add.w	r2, r4, #332	; 0x14c
    4282:	f504 71a4 	add.w	r1, r4, #328	; 0x148
    4286:	f00a faa5 	bl	e7d4 <memq_init>

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;
    428a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    428e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    4292:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    4296:	20ff      	movs	r0, #255	; 0xff
    4298:	f884 0116 	strb.w	r0, [r4, #278]	; 0x116
	_radio.data_chan_map[1] = 0xFF;
    429c:	f884 0117 	strb.w	r0, [r4, #279]	; 0x117
	_radio.data_chan_map[2] = 0xFF;
    42a0:	f884 0118 	strb.w	r0, [r4, #280]	; 0x118
	_radio.data_chan_map[3] = 0xFF;
    42a4:	f884 0119 	strb.w	r0, [r4, #281]	; 0x119
	_radio.data_chan_map[4] = 0x1F;
    42a8:	231f      	movs	r3, #31
    42aa:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_count = 37;
    42ae:	2325      	movs	r3, #37	; 0x25
    42b0:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    42b4:	231b      	movs	r3, #27
    42b6:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    42ba:	f44f 73a4 	mov.w	r3, #328	; 0x148
    42be:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
	/* Initialize the PHY defaults */
	_radio.default_phy_tx = BIT(0);
	_radio.default_phy_rx = BIT(0);

#if defined(CONFIG_BT_CTLR_PHY_2M)
	_radio.default_phy_tx |= BIT(1);
    42c2:	2303      	movs	r3, #3
    42c4:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_phy_rx |= BIT(1);
    42c8:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_rx |= BIT(2);
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#endif /* CONFIG_BT_CTLR_PHY */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
    42cc:	f00c ff58 	bl	11180 <packet_rx_allocate>
    42d0:	bd38      	pop	{r3, r4, r5, pc}
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    42d2:	4618      	mov	r0, r3
    42d4:	f503 7384 	add.w	r3, r3, #264	; 0x108
    42d8:	f44f 71aa 	mov.w	r1, #340	; 0x154
    42dc:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    42e0:	f00a f9ee 	bl	e6c0 <mem_init>
    42e4:	e79a      	b.n	421c <common_init+0x14>
	LL_ASSERT(link);
    42e6:	4040      	eors	r0, r0
    42e8:	f380 8811 	msr	BASEPRI, r0
    42ec:	f04f 0004 	mov.w	r0, #4
    42f0:	df02      	svc	2
    42f2:	bf00      	nop
    42f4:	20000dec 	.word	0x20000dec

000042f8 <le_set_event_mask>:
{
    42f8:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    42fa:	2108      	movs	r1, #8
    42fc:	f242 0001 	movw	r0, #8193	; 0x2001
    4300:	f7ff febe 	bl	4080 <bt_hci_cmd_create>
	if (!buf) {
    4304:	2800      	cmp	r0, #0
    4306:	d042      	beq.n	438e <le_set_event_mask+0x96>
    4308:	4604      	mov	r4, r0
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    430a:	2108      	movs	r1, #8
    430c:	4408      	add	r0, r1
    430e:	f015 ff11 	bl	1a134 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    4312:	4b20      	ldr	r3, [pc, #128]	; (4394 <le_set_event_mask+0x9c>)
    4314:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
    4318:	f011 0f02 	tst.w	r1, #2
    431c:	d131      	bne.n	4382 <le_set_event_mask+0x8a>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    431e:	220f      	movs	r2, #15
    4320:	2300      	movs	r3, #0
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    4322:	f011 0f20 	tst.w	r1, #32
    4326:	d001      	beq.n	432c <le_set_event_mask+0x34>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    4328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    432c:	4d19      	ldr	r5, [pc, #100]	; (4394 <le_set_event_mask+0x9c>)
    432e:	f895 5079 	ldrb.w	r5, [r5, #121]	; 0x79
    4332:	f015 0f09 	tst.w	r5, #9
    4336:	d001      	beq.n	433c <le_set_event_mask+0x44>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    4338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    433c:	f011 0f01 	tst.w	r1, #1
    4340:	d001      	beq.n	4346 <le_set_event_mask+0x4e>
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    4342:	f042 0210 	orr.w	r2, r2, #16
	if ((bt_dev.supported_commands[34] & 0x02) &&
    4346:	4913      	ldr	r1, [pc, #76]	; (4394 <le_set_event_mask+0x9c>)
    4348:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    434c:	f001 0106 	and.w	r1, r1, #6
    4350:	2906      	cmp	r1, #6
    4352:	d019      	beq.n	4388 <le_set_event_mask+0x90>
	dst[0] = val;
    4354:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    4356:	f3c2 2107 	ubfx	r1, r2, #8, #8
    435a:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    435c:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    435e:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    4360:	0a12      	lsrs	r2, r2, #8
    4362:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    4364:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    4366:	f3c3 2207 	ubfx	r2, r3, #8, #8
    436a:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    436c:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    436e:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    4370:	0a1b      	lsrs	r3, r3, #8
    4372:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    4374:	2200      	movs	r2, #0
    4376:	4621      	mov	r1, r4
    4378:	f242 0001 	movw	r0, #8193	; 0x2001
    437c:	f7ff feac 	bl	40d8 <bt_hci_cmd_send_sync>
    4380:	bd38      	pop	{r3, r4, r5, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    4382:	222f      	movs	r2, #47	; 0x2f
    4384:	2300      	movs	r3, #0
    4386:	e7cc      	b.n	4322 <le_set_event_mask+0x2a>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    4388:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
    438c:	e7e2      	b.n	4354 <le_set_event_mask+0x5c>
		return -ENOBUFS;
    438e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    4392:	bd38      	pop	{r3, r4, r5, pc}
    4394:	2000b770 	.word	0x2000b770

00004398 <le_set_event_mask>:
{
    4398:	b570      	push	{r4, r5, r6, lr}
    439a:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    439c:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    439e:	79da      	ldrb	r2, [r3, #7]
    43a0:	7999      	ldrb	r1, [r3, #6]
    43a2:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    43a6:	7958      	ldrb	r0, [r3, #5]
    43a8:	791a      	ldrb	r2, [r3, #4]
    43aa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    43ae:	2400      	movs	r4, #0
    43b0:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    43b4:	78d9      	ldrb	r1, [r3, #3]
    43b6:	789a      	ldrb	r2, [r3, #2]
    43b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    43bc:	7859      	ldrb	r1, [r3, #1]
    43be:	781b      	ldrb	r3, [r3, #0]
    43c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    43c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    43c8:	ea44 0003 	orr.w	r0, r4, r3
    43cc:	4629      	mov	r1, r5
	le_event_mask = sys_get_le64(cmd->events);
    43ce:	4b04      	ldr	r3, [pc, #16]	; (43e0 <le_set_event_mask+0x48>)
    43d0:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    43d4:	2101      	movs	r1, #1
    43d6:	4630      	mov	r0, r6
    43d8:	f008 f9b8 	bl	c74c <cmd_complete>
	ccst->status = 0x00;
    43dc:	7004      	strb	r4, [r0, #0]
    43de:	bd70      	pop	{r4, r5, r6, pc}
    43e0:	2000ba68 	.word	0x2000ba68

000043e4 <le_init>:
	if (!BT_FEAT_LE(bt_dev.features)) {
    43e4:	4b4c      	ldr	r3, [pc, #304]	; (4518 <le_init+0x134>)
    43e6:	7e9b      	ldrb	r3, [r3, #26]
    43e8:	f013 0f40 	tst.w	r3, #64	; 0x40
    43ec:	f000 808c 	beq.w	4508 <le_init+0x124>
{
    43f0:	b570      	push	{r4, r5, r6, lr}
    43f2:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    43f4:	aa01      	add	r2, sp, #4
    43f6:	2100      	movs	r1, #0
    43f8:	f242 0003 	movw	r0, #8195	; 0x2003
    43fc:	f7ff fe6c 	bl	40d8 <bt_hci_cmd_send_sync>
	if (err) {
    4400:	4603      	mov	r3, r0
    4402:	b110      	cbz	r0, 440a <le_init+0x26>
}
    4404:	4618      	mov	r0, r3
    4406:	b002      	add	sp, #8
    4408:	bd70      	pop	{r4, r5, r6, pc}
	read_le_features_complete(rsp);
    440a:	9801      	ldr	r0, [sp, #4]
    440c:	f7ff fbd4 	bl	3bb8 <read_le_features_complete>
	net_buf_unref(rsp);
    4410:	ac02      	add	r4, sp, #8
    4412:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4416:	f015 fe41 	bl	1a09c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    441a:	4622      	mov	r2, r4
    441c:	2100      	movs	r1, #0
    441e:	f242 0002 	movw	r0, #8194	; 0x2002
    4422:	f7ff fe59 	bl	40d8 <bt_hci_cmd_send_sync>
	if (err) {
    4426:	4603      	mov	r3, r0
    4428:	2800      	cmp	r0, #0
    442a:	d1eb      	bne.n	4404 <le_init+0x20>
	le_read_buffer_size_complete(rsp);
    442c:	9801      	ldr	r0, [sp, #4]
    442e:	f7ff fbcd 	bl	3bcc <le_read_buffer_size_complete>
	net_buf_unref(rsp);
    4432:	9801      	ldr	r0, [sp, #4]
    4434:	f015 fe32 	bl	1a09c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4438:	4b37      	ldr	r3, [pc, #220]	; (4518 <le_init+0x134>)
    443a:	7e9b      	ldrb	r3, [r3, #26]
    443c:	f013 0f20 	tst.w	r3, #32
    4440:	d037      	beq.n	44b2 <le_init+0xce>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    4442:	4b35      	ldr	r3, [pc, #212]	; (4518 <le_init+0x134>)
    4444:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    4448:	f013 0f08 	tst.w	r3, #8
    444c:	d149      	bne.n	44e2 <le_init+0xfe>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
    444e:	4b32      	ldr	r3, [pc, #200]	; (4518 <le_init+0x134>)
    4450:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    4454:	f013 0f20 	tst.w	r3, #32
    4458:	d027      	beq.n	44aa <le_init+0xc6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    445a:	466a      	mov	r2, sp
    445c:	2100      	movs	r1, #0
    445e:	f242 002f 	movw	r0, #8239	; 0x202f
    4462:	f7ff fe39 	bl	40d8 <bt_hci_cmd_send_sync>
		if (err) {
    4466:	4603      	mov	r3, r0
    4468:	2800      	cmp	r0, #0
    446a:	d1cb      	bne.n	4404 <le_init+0x20>
		rp = (void *)rsp->data;
    446c:	9800      	ldr	r0, [sp, #0]
    446e:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    4470:	f8b3 6001 	ldrh.w	r6, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    4474:	f8b3 5003 	ldrh.w	r5, [r3, #3]
		net_buf_unref(rsp);
    4478:	f015 fe10 	bl	1a09c <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    447c:	2104      	movs	r1, #4
    447e:	f242 0024 	movw	r0, #8228	; 0x2024
    4482:	f7ff fdfd 	bl	4080 <bt_hci_cmd_create>
		if (!buf) {
    4486:	4604      	mov	r4, r0
    4488:	2800      	cmp	r0, #0
    448a:	d03a      	beq.n	4502 <le_init+0x11e>
		cp = net_buf_add(buf, sizeof(*cp));
    448c:	2104      	movs	r1, #4
    448e:	3008      	adds	r0, #8
    4490:	f015 fe50 	bl	1a134 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    4494:	8006      	strh	r6, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    4496:	8045      	strh	r5, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    4498:	2200      	movs	r2, #0
    449a:	4621      	mov	r1, r4
    449c:	f242 0024 	movw	r0, #8228	; 0x2024
    44a0:	f7ff fe1a 	bl	40d8 <bt_hci_cmd_send_sync>
		if (err) {
    44a4:	4603      	mov	r3, r0
    44a6:	2800      	cmp	r0, #0
    44a8:	d1ac      	bne.n	4404 <le_init+0x20>
	return  le_set_event_mask();
    44aa:	f7ff ff25 	bl	42f8 <le_set_event_mask>
    44ae:	4603      	mov	r3, r0
    44b0:	e7a8      	b.n	4404 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    44b2:	2102      	movs	r1, #2
    44b4:	f640 406d 	movw	r0, #3181	; 0xc6d
    44b8:	f7ff fde2 	bl	4080 <bt_hci_cmd_create>
		if (!buf) {
    44bc:	4604      	mov	r4, r0
    44be:	b338      	cbz	r0, 4510 <le_init+0x12c>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    44c0:	2102      	movs	r1, #2
    44c2:	3008      	adds	r0, #8
    44c4:	f015 fe36 	bl	1a134 <net_buf_simple_add>
		cp_le->le = 0x01;
    44c8:	2301      	movs	r3, #1
    44ca:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    44cc:	2200      	movs	r2, #0
    44ce:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    44d0:	4621      	mov	r1, r4
    44d2:	f640 406d 	movw	r0, #3181	; 0xc6d
    44d6:	f7ff fdff 	bl	40d8 <bt_hci_cmd_send_sync>
		if (err) {
    44da:	4603      	mov	r3, r0
    44dc:	2800      	cmp	r0, #0
    44de:	d0b0      	beq.n	4442 <le_init+0x5e>
    44e0:	e790      	b.n	4404 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    44e2:	aa01      	add	r2, sp, #4
    44e4:	2100      	movs	r1, #0
    44e6:	f242 001c 	movw	r0, #8220	; 0x201c
    44ea:	f7ff fdf5 	bl	40d8 <bt_hci_cmd_send_sync>
		if (err) {
    44ee:	4603      	mov	r3, r0
    44f0:	2800      	cmp	r0, #0
    44f2:	d187      	bne.n	4404 <le_init+0x20>
		le_read_supp_states_complete(rsp);
    44f4:	9801      	ldr	r0, [sp, #4]
    44f6:	f7ff fae5 	bl	3ac4 <le_read_supp_states_complete>
		net_buf_unref(rsp);
    44fa:	9801      	ldr	r0, [sp, #4]
    44fc:	f015 fdce 	bl	1a09c <net_buf_unref>
    4500:	e7a5      	b.n	444e <le_init+0x6a>
			return -ENOBUFS;
    4502:	f06f 0368 	mvn.w	r3, #104	; 0x68
    4506:	e77d      	b.n	4404 <le_init+0x20>
		return -ENODEV;
    4508:	f06f 0312 	mvn.w	r3, #18
}
    450c:	4618      	mov	r0, r3
    450e:	4770      	bx	lr
			return -ENOBUFS;
    4510:	f06f 0368 	mvn.w	r3, #104	; 0x68
    4514:	e776      	b.n	4404 <le_init+0x20>
    4516:	bf00      	nop
    4518:	2000b770 	.word	0x2000b770

0000451c <br_init>:
{
    451c:	b510      	push	{r4, lr}
    451e:	b082      	sub	sp, #8
	if (bt_dev.le.mtu) {
    4520:	4b0b      	ldr	r3, [pc, #44]	; (4550 <br_init+0x34>)
    4522:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    4526:	b11b      	cbz	r3, 4530 <br_init+0x14>
		return 0;
    4528:	2400      	movs	r4, #0
}
    452a:	4620      	mov	r0, r4
    452c:	b002      	add	sp, #8
    452e:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    4530:	aa01      	add	r2, sp, #4
    4532:	2100      	movs	r1, #0
    4534:	f241 0005 	movw	r0, #4101	; 0x1005
    4538:	f7ff fdce 	bl	40d8 <bt_hci_cmd_send_sync>
	if (err) {
    453c:	4604      	mov	r4, r0
    453e:	2800      	cmp	r0, #0
    4540:	d1f3      	bne.n	452a <br_init+0xe>
	read_buffer_size_complete(rsp);
    4542:	9801      	ldr	r0, [sp, #4]
    4544:	f7ff fb58 	bl	3bf8 <read_buffer_size_complete>
	net_buf_unref(rsp);
    4548:	9801      	ldr	r0, [sp, #4]
    454a:	f015 fda7 	bl	1a09c <net_buf_unref>
	return 0;
    454e:	e7ec      	b.n	452a <br_init+0xe>
    4550:	2000b770 	.word	0x2000b770

00004554 <set_event_mask>:
{
    4554:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    4556:	2108      	movs	r1, #8
    4558:	f640 4001 	movw	r0, #3073	; 0xc01
    455c:	f7ff fd90 	bl	4080 <bt_hci_cmd_create>
	if (!buf) {
    4560:	b348      	cbz	r0, 45b6 <set_event_mask+0x62>
    4562:	4604      	mov	r4, r0
	ev = net_buf_add(buf, sizeof(*ev));
    4564:	2108      	movs	r1, #8
    4566:	4408      	add	r0, r1
    4568:	f015 fde4 	bl	1a134 <net_buf_simple_add>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
    456c:	4b13      	ldr	r3, [pc, #76]	; (45bc <set_event_mask+0x68>)
    456e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    4572:	f013 0f01 	tst.w	r3, #1
    4576:	d11b      	bne.n	45b0 <set_event_mask+0x5c>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    4578:	4a11      	ldr	r2, [pc, #68]	; (45c0 <set_event_mask+0x6c>)
    457a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	sys_put_le16(val, dst);
    457e:	b291      	uxth	r1, r2
	dst[0] = val;
    4580:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    4582:	0a09      	lsrs	r1, r1, #8
    4584:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    4586:	0c12      	lsrs	r2, r2, #16
    4588:	b291      	uxth	r1, r2
	dst[0] = val;
    458a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    458c:	0a0a      	lsrs	r2, r1, #8
    458e:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
    4590:	b29a      	uxth	r2, r3
	dst[0] = val;
    4592:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    4594:	0a12      	lsrs	r2, r2, #8
    4596:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    4598:	0c1b      	lsrs	r3, r3, #16
    459a:	b29a      	uxth	r2, r3
	dst[0] = val;
    459c:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    459e:	0a13      	lsrs	r3, r2, #8
    45a0:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    45a2:	2200      	movs	r2, #0
    45a4:	4621      	mov	r1, r4
    45a6:	f640 4001 	movw	r0, #3073	; 0xc01
    45aa:	f7ff fd95 	bl	40d8 <bt_hci_cmd_send_sync>
    45ae:	bd10      	pop	{r4, pc}
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    45b0:	4a04      	ldr	r2, [pc, #16]	; (45c4 <set_event_mask+0x70>)
    45b2:	4b05      	ldr	r3, [pc, #20]	; (45c8 <set_event_mask+0x74>)
    45b4:	e7e3      	b.n	457e <set_event_mask+0x2a>
		return -ENOBUFS;
    45b6:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    45ba:	bd10      	pop	{r4, pc}
    45bc:	2000b770 	.word	0x2000b770
    45c0:	02008810 	.word	0x02008810
    45c4:	02008890 	.word	0x02008890
    45c8:	20008000 	.word	0x20008000

000045cc <set_event_mask>:
{
    45cc:	b570      	push	{r4, r5, r6, lr}
    45ce:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    45d0:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    45d2:	79da      	ldrb	r2, [r3, #7]
    45d4:	7999      	ldrb	r1, [r3, #6]
    45d6:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    45da:	7958      	ldrb	r0, [r3, #5]
    45dc:	791a      	ldrb	r2, [r3, #4]
    45de:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    45e2:	2400      	movs	r4, #0
    45e4:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    45e8:	78d9      	ldrb	r1, [r3, #3]
    45ea:	789a      	ldrb	r2, [r3, #2]
    45ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    45f0:	7859      	ldrb	r1, [r3, #1]
    45f2:	781b      	ldrb	r3, [r3, #0]
    45f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    45f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    45fc:	ea44 0003 	orr.w	r0, r4, r3
    4600:	4629      	mov	r1, r5
	event_mask = sys_get_le64(cmd->events);
    4602:	4b04      	ldr	r3, [pc, #16]	; (4614 <set_event_mask+0x48>)
    4604:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    4608:	2101      	movs	r1, #1
    460a:	4630      	mov	r0, r6
    460c:	f008 f89e 	bl	c74c <cmd_complete>
	ccst->status = 0x00;
    4610:	7004      	strb	r4, [r0, #0]
    4612:	bd70      	pop	{r4, r5, r6, pc}
    4614:	2000ba60 	.word	0x2000ba60

00004618 <hci_vs_init>:
{
    4618:	b510      	push	{r4, lr}
    461a:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    461c:	aa01      	add	r2, sp, #4
    461e:	2100      	movs	r1, #0
    4620:	f64f 4001 	movw	r0, #64513	; 0xfc01
    4624:	f7ff fd58 	bl	40d8 <bt_hci_cmd_send_sync>
	if (err) {
    4628:	b108      	cbz	r0, 462e <hci_vs_init+0x16>
}
    462a:	b002      	add	sp, #8
    462c:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
    462e:	ac02      	add	r4, sp, #8
    4630:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4634:	f015 fd32 	bl	1a09c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    4638:	4622      	mov	r2, r4
    463a:	2100      	movs	r1, #0
    463c:	f64f 4002 	movw	r0, #64514	; 0xfc02
    4640:	f7ff fd4a 	bl	40d8 <bt_hci_cmd_send_sync>
	if (err) {
    4644:	2800      	cmp	r0, #0
    4646:	d1f0      	bne.n	462a <hci_vs_init+0x12>
	rp.cmds = (void *)rsp->data;
    4648:	9b01      	ldr	r3, [sp, #4]
    464a:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    464c:	2202      	movs	r2, #2
    464e:	3101      	adds	r1, #1
    4650:	480d      	ldr	r0, [pc, #52]	; (4688 <hci_vs_init+0x70>)
    4652:	f7fb fe35 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    4656:	ac02      	add	r4, sp, #8
    4658:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    465c:	f015 fd1e 	bl	1a09c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    4660:	4622      	mov	r2, r4
    4662:	2100      	movs	r1, #0
    4664:	f64f 4003 	movw	r0, #64515	; 0xfc03
    4668:	f7ff fd36 	bl	40d8 <bt_hci_cmd_send_sync>
	if (err) {
    466c:	2800      	cmp	r0, #0
    466e:	d1dc      	bne.n	462a <hci_vs_init+0x12>
	rp.feat = (void *)rsp->data;
    4670:	9b01      	ldr	r3, [sp, #4]
    4672:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    4674:	2201      	movs	r2, #1
    4676:	4411      	add	r1, r2
    4678:	4804      	ldr	r0, [pc, #16]	; (468c <hci_vs_init+0x74>)
    467a:	f7fb fe21 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    467e:	9801      	ldr	r0, [sp, #4]
    4680:	f015 fd0c 	bl	1a09c <net_buf_unref>
    4684:	e7d1      	b.n	462a <hci_vs_init+0x12>
    4686:	bf00      	nop
    4688:	2000b7cf 	.word	0x2000b7cf
    468c:	2000b7ce 	.word	0x2000b7ce

00004690 <set_random_address>:
{
    4690:	b570      	push	{r4, r5, r6, lr}
    4692:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    4694:	2206      	movs	r2, #6
    4696:	4914      	ldr	r1, [pc, #80]	; (46e8 <set_random_address+0x58>)
    4698:	f024 ff8a 	bl	295b0 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    469c:	4604      	mov	r4, r0
    469e:	b908      	cbnz	r0, 46a4 <set_random_address+0x14>
}
    46a0:	4620      	mov	r0, r4
    46a2:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    46a4:	2106      	movs	r1, #6
    46a6:	f242 0005 	movw	r0, #8197	; 0x2005
    46aa:	f7ff fce9 	bl	4080 <bt_hci_cmd_create>
	if (!buf) {
    46ae:	4604      	mov	r4, r0
    46b0:	b1b8      	cbz	r0, 46e2 <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    46b2:	2206      	movs	r2, #6
    46b4:	4629      	mov	r1, r5
    46b6:	3008      	adds	r0, #8
    46b8:	f015 fd42 	bl	1a140 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    46bc:	2200      	movs	r2, #0
    46be:	4621      	mov	r1, r4
    46c0:	f242 0005 	movw	r0, #8197	; 0x2005
    46c4:	f7ff fd08 	bl	40d8 <bt_hci_cmd_send_sync>
	if (err) {
    46c8:	4604      	mov	r4, r0
    46ca:	2800      	cmp	r0, #0
    46cc:	d1e8      	bne.n	46a0 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
    46ce:	4e07      	ldr	r6, [pc, #28]	; (46ec <set_random_address+0x5c>)
    46d0:	2206      	movs	r2, #6
    46d2:	4629      	mov	r1, r5
    46d4:	f106 0008 	add.w	r0, r6, #8
    46d8:	f7fb fdf2 	bl	2c0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    46dc:	2301      	movs	r3, #1
    46de:	71f3      	strb	r3, [r6, #7]
	return 0;
    46e0:	e7de      	b.n	46a0 <set_random_address+0x10>
		return -ENOBUFS;
    46e2:	f06f 0468 	mvn.w	r4, #104	; 0x68
    46e6:	e7db      	b.n	46a0 <set_random_address+0x10>
    46e8:	2000b778 	.word	0x2000b778
    46ec:	2000b770 	.word	0x2000b770

000046f0 <le_set_private_addr>:
{
    46f0:	b500      	push	{lr}
    46f2:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    46f4:	2106      	movs	r1, #6
    46f6:	4668      	mov	r0, sp
    46f8:	f00c f9a6 	bl	10a48 <bt_rand>
	if (err) {
    46fc:	4603      	mov	r3, r0
    46fe:	b118      	cbz	r0, 4708 <le_set_private_addr+0x18>
}
    4700:	4618      	mov	r0, r3
    4702:	b003      	add	sp, #12
    4704:	f85d fb04 	ldr.w	pc, [sp], #4
	nrpa.val[5] &= 0x3f;
    4708:	f89d 3005 	ldrb.w	r3, [sp, #5]
    470c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4710:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    4714:	4668      	mov	r0, sp
    4716:	f7ff ffbb 	bl	4690 <set_random_address>
    471a:	4603      	mov	r3, r0
    471c:	e7f0      	b.n	4700 <le_set_private_addr+0x10>
	...

00004720 <bt_hci_stop_scanning>:
{
    4720:	b530      	push	{r4, r5, lr}
    4722:	b083      	sub	sp, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4724:	f3bf 8f5b 	dmb	ish
    4728:	4b26      	ldr	r3, [pc, #152]	; (47c4 <bt_hci_stop_scanning+0xa4>)
    472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    472c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    4730:	f013 0f80 	tst.w	r3, #128	; 0x80
    4734:	d03f      	beq.n	47b6 <bt_hci_stop_scanning+0x96>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    4736:	2102      	movs	r1, #2
    4738:	f242 000c 	movw	r0, #8204	; 0x200c
    473c:	f7ff fca0 	bl	4080 <bt_hci_cmd_create>
	if (!buf) {
    4740:	4604      	mov	r4, r0
    4742:	2800      	cmp	r0, #0
    4744:	d03a      	beq.n	47bc <bt_hci_stop_scanning+0x9c>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    4746:	2102      	movs	r1, #2
    4748:	3008      	adds	r0, #8
    474a:	f015 fcf3 	bl	1a134 <net_buf_simple_add>
    474e:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    4750:	2202      	movs	r2, #2
    4752:	2100      	movs	r1, #0
    4754:	f024 ffc0 	bl	296d8 <memset>
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    4758:	2300      	movs	r3, #0
    475a:	706b      	strb	r3, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;
    475c:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    475e:	aa01      	add	r2, sp, #4
    4760:	4621      	mov	r1, r4
    4762:	f242 000c 	movw	r0, #8204	; 0x200c
    4766:	f7ff fcb7 	bl	40d8 <bt_hci_cmd_send_sync>
	if (err) {
    476a:	4604      	mov	r4, r0
    476c:	b930      	cbnz	r0, 477c <bt_hci_stop_scanning+0x5c>
	err = rsp->data[0];
    476e:	9b01      	ldr	r3, [sp, #4]
    4770:	689b      	ldr	r3, [r3, #8]
    4772:	781c      	ldrb	r4, [r3, #0]
	if (!err) {
    4774:	b12c      	cbz	r4, 4782 <bt_hci_stop_scanning+0x62>
	net_buf_unref(rsp);
    4776:	9801      	ldr	r0, [sp, #4]
    4778:	f015 fc90 	bl	1a09c <net_buf_unref>
}
    477c:	4620      	mov	r0, r4
    477e:	b003      	add	sp, #12
    4780:	bd30      	pop	{r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4782:	4b11      	ldr	r3, [pc, #68]	; (47c8 <bt_hci_stop_scanning+0xa8>)
    4784:	f3bf 8f5b 	dmb	ish
    4788:	e853 2f00 	ldrex	r2, [r3]
    478c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    4790:	e843 2100 	strex	r1, r2, [r3]
    4794:	2900      	cmp	r1, #0
    4796:	d1f7      	bne.n	4788 <bt_hci_stop_scanning+0x68>
    4798:	f3bf 8f5b 	dmb	ish
    479c:	f3bf 8f5b 	dmb	ish
    47a0:	e853 2f00 	ldrex	r2, [r3]
    47a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    47a8:	e843 2100 	strex	r1, r2, [r3]
    47ac:	2900      	cmp	r1, #0
    47ae:	d1f7      	bne.n	47a0 <bt_hci_stop_scanning+0x80>
    47b0:	f3bf 8f5b 	dmb	ish
    47b4:	e7df      	b.n	4776 <bt_hci_stop_scanning+0x56>
		return -EALREADY;
    47b6:	f06f 0477 	mvn.w	r4, #119	; 0x77
    47ba:	e7df      	b.n	477c <bt_hci_stop_scanning+0x5c>
		return -ENOBUFS;
    47bc:	f06f 0468 	mvn.w	r4, #104	; 0x68
    47c0:	e7dc      	b.n	477c <bt_hci_stop_scanning+0x5c>
    47c2:	bf00      	nop
    47c4:	2000b770 	.word	0x2000b770
    47c8:	2000b7e0 	.word	0x2000b7e0

000047cc <set_advertise_enable>:
{
    47cc:	b538      	push	{r3, r4, r5, lr}
    47ce:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    47d0:	2101      	movs	r1, #1
    47d2:	f242 000a 	movw	r0, #8202	; 0x200a
    47d6:	f7ff fc53 	bl	4080 <bt_hci_cmd_create>
	if (!buf) {
    47da:	b380      	cbz	r0, 483e <set_advertise_enable+0x72>
    47dc:	4604      	mov	r4, r0
	if (enable) {
    47de:	b1dd      	cbz	r5, 4818 <set_advertise_enable+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    47e0:	2101      	movs	r1, #1
    47e2:	3008      	adds	r0, #8
    47e4:	f015 fcb7 	bl	1a156 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    47e8:	2200      	movs	r2, #0
    47ea:	4621      	mov	r1, r4
    47ec:	f242 000a 	movw	r0, #8202	; 0x200a
    47f0:	f7ff fc72 	bl	40d8 <bt_hci_cmd_send_sync>
	if (err) {
    47f4:	4603      	mov	r3, r0
    47f6:	b968      	cbnz	r0, 4814 <set_advertise_enable+0x48>
	if (enable) {
    47f8:	b99d      	cbnz	r5, 4822 <set_advertise_enable+0x56>
    47fa:	4a12      	ldr	r2, [pc, #72]	; (4844 <set_advertise_enable+0x78>)
    47fc:	f3bf 8f5b 	dmb	ish
    4800:	e852 1f00 	ldrex	r1, [r2]
    4804:	f021 0120 	bic.w	r1, r1, #32
    4808:	e842 1000 	strex	r0, r1, [r2]
    480c:	2800      	cmp	r0, #0
    480e:	d1f7      	bne.n	4800 <set_advertise_enable+0x34>
    4810:	f3bf 8f5b 	dmb	ish
}
    4814:	4618      	mov	r0, r3
    4816:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    4818:	2100      	movs	r1, #0
    481a:	3008      	adds	r0, #8
    481c:	f015 fc9b 	bl	1a156 <net_buf_simple_add_u8>
    4820:	e7e2      	b.n	47e8 <set_advertise_enable+0x1c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4822:	4a08      	ldr	r2, [pc, #32]	; (4844 <set_advertise_enable+0x78>)
    4824:	f3bf 8f5b 	dmb	ish
    4828:	e852 1f00 	ldrex	r1, [r2]
    482c:	f041 0120 	orr.w	r1, r1, #32
    4830:	e842 1000 	strex	r0, r1, [r2]
    4834:	2800      	cmp	r0, #0
    4836:	d1f7      	bne.n	4828 <set_advertise_enable+0x5c>
    4838:	f3bf 8f5b 	dmb	ish
    483c:	e7ea      	b.n	4814 <set_advertise_enable+0x48>
		return -ENOBUFS;
    483e:	f06f 0368 	mvn.w	r3, #104	; 0x68
    4842:	e7e7      	b.n	4814 <set_advertise_enable+0x48>
    4844:	2000b7e0 	.word	0x2000b7e0

00004848 <hci_le_create_conn>:
{
    4848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    484a:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    484c:	2119      	movs	r1, #25
    484e:	f242 000d 	movw	r0, #8205	; 0x200d
    4852:	f7ff fc15 	bl	4080 <bt_hci_cmd_create>
	if (!buf) {
    4856:	b378      	cbz	r0, 48b8 <hci_le_create_conn+0x70>
    4858:	4607      	mov	r7, r0
	cp = net_buf_add(buf, sizeof(*cp));
    485a:	2119      	movs	r1, #25
    485c:	3008      	adds	r0, #8
    485e:	f015 fc69 	bl	1a134 <net_buf_simple_add>
    4862:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    4864:	2219      	movs	r2, #25
    4866:	2100      	movs	r1, #0
    4868:	f024 ff36 	bl	296d8 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    486c:	2600      	movs	r6, #0
    486e:	2360      	movs	r3, #96	; 0x60
    4870:	7023      	strb	r3, [r4, #0]
    4872:	7066      	strb	r6, [r4, #1]
	cp->scan_window = cp->scan_interval;
    4874:	70a3      	strb	r3, [r4, #2]
    4876:	70e6      	strb	r6, [r4, #3]
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    4878:	2207      	movs	r2, #7
    487a:	f105 0156 	add.w	r1, r5, #86	; 0x56
    487e:	1d60      	adds	r0, r4, #5
    4880:	f7fb fd1e 	bl	2c0 <memcpy>
	cp->own_addr_type = conn->le.init_addr.type;
    4884:	f895 304f 	ldrb.w	r3, [r5, #79]	; 0x4f
    4888:	7323      	strb	r3, [r4, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    488a:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
    488e:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    4892:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    4896:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    489a:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
    489e:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    48a2:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    48a6:	f8a4 3013 	strh.w	r3, [r4, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    48aa:	4632      	mov	r2, r6
    48ac:	4639      	mov	r1, r7
    48ae:	f242 000d 	movw	r0, #8205	; 0x200d
    48b2:	f7ff fc11 	bl	40d8 <bt_hci_cmd_send_sync>
    48b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    48b8:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    48bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000048be <set_ad>:

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    48be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    48c2:	4682      	mov	sl, r0
    48c4:	460f      	mov	r7, r1
    48c6:	4690      	mov	r8, r2
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    48c8:	2120      	movs	r1, #32
    48ca:	f7ff fbd9 	bl	4080 <bt_hci_cmd_create>
	if (!buf) {
    48ce:	2800      	cmp	r0, #0
    48d0:	d03c      	beq.n	494c <set_ad+0x8e>
    48d2:	4681      	mov	r9, r0
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    48d4:	2120      	movs	r1, #32
    48d6:	3008      	adds	r0, #8
    48d8:	f015 fc2c 	bl	1a134 <net_buf_simple_add>
    48dc:	4604      	mov	r4, r0

	memset(set_data, 0, sizeof(*set_data));
    48de:	2220      	movs	r2, #32
    48e0:	2100      	movs	r1, #0
    48e2:	f024 fef9 	bl	296d8 <memset>

	for (i = 0; i < ad_len; i++) {
    48e6:	2600      	movs	r6, #0
    48e8:	4546      	cmp	r6, r8
    48ea:	d228      	bcs.n	493e <set_ad+0x80>
		/* Check if ad fit in the remaining buffer */
		if (set_data->len + ad[i].data_len + 2 > 31) {
    48ec:	7822      	ldrb	r2, [r4, #0]
    48ee:	eb07 05c6 	add.w	r5, r7, r6, lsl #3
    48f2:	786b      	ldrb	r3, [r5, #1]
    48f4:	4413      	add	r3, r2
    48f6:	3302      	adds	r3, #2
    48f8:	2b1f      	cmp	r3, #31
    48fa:	dc19      	bgt.n	4930 <set_ad+0x72>
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    48fc:	1c53      	adds	r3, r2, #1
    48fe:	b2db      	uxtb	r3, r3
    4900:	7023      	strb	r3, [r4, #0]
    4902:	7869      	ldrb	r1, [r5, #1]
    4904:	3101      	adds	r1, #1
    4906:	4422      	add	r2, r4
    4908:	7051      	strb	r1, [r2, #1]
		set_data->data[set_data->len++] = ad[i].type;
    490a:	1c58      	adds	r0, r3, #1
    490c:	b2c0      	uxtb	r0, r0
    490e:	7020      	strb	r0, [r4, #0]
    4910:	f817 2036 	ldrb.w	r2, [r7, r6, lsl #3]
    4914:	4423      	add	r3, r4
    4916:	705a      	strb	r2, [r3, #1]

		memcpy(&set_data->data[set_data->len], ad[i].data,
    4918:	4420      	add	r0, r4
    491a:	786a      	ldrb	r2, [r5, #1]
    491c:	6869      	ldr	r1, [r5, #4]
    491e:	3001      	adds	r0, #1
    4920:	f7fb fcce 	bl	2c0 <memcpy>
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    4924:	786b      	ldrb	r3, [r5, #1]
    4926:	7822      	ldrb	r2, [r4, #0]
    4928:	4413      	add	r3, r2
    492a:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < ad_len; i++) {
    492c:	3601      	adds	r6, #1
    492e:	e7db      	b.n	48e8 <set_ad+0x2a>
			net_buf_unref(buf);
    4930:	4648      	mov	r0, r9
    4932:	f015 fbb3 	bl	1a09c <net_buf_unref>
			return -EINVAL;
    4936:	f06f 0015 	mvn.w	r0, #21
    493a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    493e:	2200      	movs	r2, #0
    4940:	4649      	mov	r1, r9
    4942:	4650      	mov	r0, sl
    4944:	f7ff fbc8 	bl	40d8 <bt_hci_cmd_send_sync>
    4948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
    494c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    4950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00004954 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    4954:	8802      	ldrh	r2, [r0, #0]
    4956:	8843      	ldrh	r3, [r0, #2]
    4958:	429a      	cmp	r2, r3
    495a:	d81a      	bhi.n	4992 <bt_le_conn_params_valid+0x3e>
    495c:	2a05      	cmp	r2, #5
    495e:	d91a      	bls.n	4996 <bt_le_conn_params_valid+0x42>
	    param->interval_min < 6 || param->interval_max > 3200) {
    4960:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    4964:	d819      	bhi.n	499a <bt_le_conn_params_valid+0x46>
	if (param->latency > 499) {
    4966:	8881      	ldrh	r1, [r0, #4]
    4968:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    496c:	d217      	bcs.n	499e <bt_le_conn_params_valid+0x4a>
{
    496e:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
    4970:	88c0      	ldrh	r0, [r0, #6]
    4972:	f1a0 020a 	sub.w	r2, r0, #10
    4976:	b292      	uxth	r2, r2
    4978:	f640 4476 	movw	r4, #3190	; 0xc76
    497c:	42a2      	cmp	r2, r4
    497e:	d810      	bhi.n	49a2 <bt_le_conn_params_valid+0x4e>
	     ((1 + param->latency) * param->interval_max))) {
    4980:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    4984:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
    4988:	da01      	bge.n	498e <bt_le_conn_params_valid+0x3a>
	return true;
    498a:	2001      	movs	r0, #1
    498c:	e00a      	b.n	49a4 <bt_le_conn_params_valid+0x50>
		return false;
    498e:	2000      	movs	r0, #0
    4990:	e008      	b.n	49a4 <bt_le_conn_params_valid+0x50>
		return false;
    4992:	2000      	movs	r0, #0
    4994:	4770      	bx	lr
    4996:	2000      	movs	r0, #0
    4998:	4770      	bx	lr
    499a:	2000      	movs	r0, #0
    499c:	4770      	bx	lr
		return false;
    499e:	2000      	movs	r0, #0
    49a0:	4770      	bx	lr
		return false;
    49a2:	2000      	movs	r0, #0
}
    49a4:	bc10      	pop	{r4}
    49a6:	4770      	bx	lr

000049a8 <bt_addr_le_create_static>:
{
    49a8:	b510      	push	{r4, lr}
    49aa:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    49ac:	2301      	movs	r3, #1
    49ae:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    49b2:	2106      	movs	r1, #6
    49b4:	f00c f848 	bl	10a48 <bt_rand>
	if (err) {
    49b8:	4602      	mov	r2, r0
    49ba:	b918      	cbnz	r0, 49c4 <bt_addr_le_create_static+0x1c>
	BT_ADDR_SET_STATIC(&addr->a);
    49bc:	79a3      	ldrb	r3, [r4, #6]
    49be:	f063 033f 	orn	r3, r3, #63	; 0x3f
    49c2:	71a3      	strb	r3, [r4, #6]
}
    49c4:	4610      	mov	r0, r2
    49c6:	bd10      	pop	{r4, pc}

000049c8 <set_static_addr>:
{
    49c8:	b510      	push	{r4, lr}
    49ca:	b082      	sub	sp, #8
	if (bt_storage) {
    49cc:	4b2e      	ldr	r3, [pc, #184]	; (4a88 <set_static_addr+0xc0>)
    49ce:	681b      	ldr	r3, [r3, #0]
    49d0:	b13b      	cbz	r3, 49e2 <set_static_addr+0x1a>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    49d2:	681c      	ldr	r4, [r3, #0]
    49d4:	2307      	movs	r3, #7
    49d6:	4a2d      	ldr	r2, [pc, #180]	; (4a8c <set_static_addr+0xc4>)
    49d8:	2100      	movs	r1, #0
    49da:	4608      	mov	r0, r1
    49dc:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    49de:	2807      	cmp	r0, #7
    49e0:	d02c      	beq.n	4a3c <set_static_addr+0x74>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    49e2:	4b2a      	ldr	r3, [pc, #168]	; (4a8c <set_static_addr+0xc4>)
    49e4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    49e8:	f013 0f01 	tst.w	r3, #1
    49ec:	d018      	beq.n	4a20 <set_static_addr+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    49ee:	aa01      	add	r2, sp, #4
    49f0:	2100      	movs	r1, #0
    49f2:	f64f 4009 	movw	r0, #64521	; 0xfc09
    49f6:	f7ff fb6f 	bl	40d8 <bt_hci_cmd_send_sync>
		if (err) {
    49fa:	b988      	cbnz	r0, 4a20 <set_static_addr+0x58>
		rp = (void *)rsp->data;
    49fc:	9801      	ldr	r0, [sp, #4]
    49fe:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    4a00:	784b      	ldrb	r3, [r1, #1]
    4a02:	b15b      	cbz	r3, 4a1c <set_static_addr+0x54>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    4a04:	4821      	ldr	r0, [pc, #132]	; (4a8c <set_static_addr+0xc4>)
    4a06:	2301      	movs	r3, #1
    4a08:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(dst, src, sizeof(*dst));
    4a0c:	2206      	movs	r2, #6
    4a0e:	3102      	adds	r1, #2
    4a10:	f7fb fc56 	bl	2c0 <memcpy>
			net_buf_unref(rsp);
    4a14:	9801      	ldr	r0, [sp, #4]
    4a16:	f015 fb41 	bl	1a09c <net_buf_unref>
    4a1a:	e00f      	b.n	4a3c <set_static_addr+0x74>
		net_buf_unref(rsp);
    4a1c:	f015 fb3e 	bl	1a09c <net_buf_unref>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    4a20:	481a      	ldr	r0, [pc, #104]	; (4a8c <set_static_addr+0xc4>)
    4a22:	f7ff ffc1 	bl	49a8 <bt_addr_le_create_static>
	if (err) {
    4a26:	4603      	mov	r3, r0
    4a28:	b9b8      	cbnz	r0, 4a5a <set_static_addr+0x92>
	if (bt_storage) {
    4a2a:	4b17      	ldr	r3, [pc, #92]	; (4a88 <set_static_addr+0xc0>)
    4a2c:	681b      	ldr	r3, [r3, #0]
    4a2e:	b12b      	cbz	r3, 4a3c <set_static_addr+0x74>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    4a30:	685c      	ldr	r4, [r3, #4]
    4a32:	2307      	movs	r3, #7
    4a34:	4a15      	ldr	r2, [pc, #84]	; (4a8c <set_static_addr+0xc4>)
    4a36:	2100      	movs	r1, #0
    4a38:	4608      	mov	r0, r1
    4a3a:	47a0      	blx	r4
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    4a3c:	4b13      	ldr	r3, [pc, #76]	; (4a8c <set_static_addr+0xc4>)
    4a3e:	781b      	ldrb	r3, [r3, #0]
    4a40:	2b01      	cmp	r3, #1
    4a42:	d11b      	bne.n	4a7c <set_static_addr+0xb4>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
    4a44:	4b11      	ldr	r3, [pc, #68]	; (4a8c <set_static_addr+0xc4>)
    4a46:	799b      	ldrb	r3, [r3, #6]
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    4a48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4a4c:	2bc0      	cmp	r3, #192	; 0xc0
    4a4e:	d118      	bne.n	4a82 <set_static_addr+0xba>
	err = set_random_address(&bt_dev.id_addr.a);
    4a50:	480f      	ldr	r0, [pc, #60]	; (4a90 <set_static_addr+0xc8>)
    4a52:	f7ff fe1d 	bl	4690 <set_random_address>
	if (err) {
    4a56:	4603      	mov	r3, r0
    4a58:	b110      	cbz	r0, 4a60 <set_static_addr+0x98>
}
    4a5a:	4618      	mov	r0, r3
    4a5c:	b002      	add	sp, #8
    4a5e:	bd10      	pop	{r4, pc}
    4a60:	4a0c      	ldr	r2, [pc, #48]	; (4a94 <set_static_addr+0xcc>)
    4a62:	f3bf 8f5b 	dmb	ish
    4a66:	e852 1f00 	ldrex	r1, [r2]
    4a6a:	f041 0104 	orr.w	r1, r1, #4
    4a6e:	e842 1000 	strex	r0, r1, [r2]
    4a72:	2800      	cmp	r0, #0
    4a74:	d1f7      	bne.n	4a66 <set_static_addr+0x9e>
    4a76:	f3bf 8f5b 	dmb	ish
	return 0;
    4a7a:	e7ee      	b.n	4a5a <set_static_addr+0x92>
		return -EINVAL;
    4a7c:	f06f 0315 	mvn.w	r3, #21
    4a80:	e7eb      	b.n	4a5a <set_static_addr+0x92>
    4a82:	f06f 0315 	mvn.w	r3, #21
    4a86:	e7e8      	b.n	4a5a <set_static_addr+0x92>
    4a88:	200028bc 	.word	0x200028bc
    4a8c:	2000b770 	.word	0x2000b770
    4a90:	2000b771 	.word	0x2000b771
    4a94:	2000b7e0 	.word	0x2000b7e0

00004a98 <hci_init>:
{
    4a98:	b510      	push	{r4, lr}
    4a9a:	b084      	sub	sp, #16
	err = common_init();
    4a9c:	f7ff fb5c 	bl	4158 <common_init>
	if (err) {
    4aa0:	4604      	mov	r4, r0
    4aa2:	b110      	cbz	r0, 4aaa <hci_init+0x12>
}
    4aa4:	4620      	mov	r0, r4
    4aa6:	b004      	add	sp, #16
    4aa8:	bd10      	pop	{r4, pc}
	err = le_init();
    4aaa:	f7ff fc9b 	bl	43e4 <le_init>
	if (err) {
    4aae:	4604      	mov	r4, r0
    4ab0:	2800      	cmp	r0, #0
    4ab2:	d1f7      	bne.n	4aa4 <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4ab4:	4b17      	ldr	r3, [pc, #92]	; (4b14 <hci_init+0x7c>)
    4ab6:	7e9b      	ldrb	r3, [r3, #26]
    4ab8:	f013 0f20 	tst.w	r3, #32
    4abc:	d104      	bne.n	4ac8 <hci_init+0x30>
		err = br_init();
    4abe:	f7ff fd2d 	bl	451c <br_init>
		if (err) {
    4ac2:	4604      	mov	r4, r0
    4ac4:	2800      	cmp	r0, #0
    4ac6:	d1ed      	bne.n	4aa4 <hci_init+0xc>
	err = set_event_mask();
    4ac8:	f7ff fd44 	bl	4554 <set_event_mask>
	if (err) {
    4acc:	4604      	mov	r4, r0
    4ace:	2800      	cmp	r0, #0
    4ad0:	d1e8      	bne.n	4aa4 <hci_init+0xc>
	hci_vs_init();
    4ad2:	f7ff fda1 	bl	4618 <hci_vs_init>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    4ad6:	2300      	movs	r3, #0
    4ad8:	9300      	str	r3, [sp, #0]
    4ada:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
    4ade:	2207      	movs	r2, #7
    4ae0:	4669      	mov	r1, sp
    4ae2:	480c      	ldr	r0, [pc, #48]	; (4b14 <hci_init+0x7c>)
    4ae4:	f024 fd64 	bl	295b0 <memcmp>
    4ae8:	b178      	cbz	r0, 4b0a <hci_init+0x72>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    4aea:	4b0b      	ldr	r3, [pc, #44]	; (4b18 <hci_init+0x80>)
    4aec:	e893 0003 	ldmia.w	r3, {r0, r1}
    4af0:	9002      	str	r0, [sp, #8]
    4af2:	f8ad 100c 	strh.w	r1, [sp, #12]
    4af6:	0c09      	lsrs	r1, r1, #16
    4af8:	f88d 100e 	strb.w	r1, [sp, #14]
    4afc:	2207      	movs	r2, #7
    4afe:	a902      	add	r1, sp, #8
    4b00:	4804      	ldr	r0, [pc, #16]	; (4b14 <hci_init+0x7c>)
    4b02:	f024 fd55 	bl	295b0 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    4b06:	2800      	cmp	r0, #0
    4b08:	d1cc      	bne.n	4aa4 <hci_init+0xc>
		err = set_static_addr();
    4b0a:	f7ff ff5d 	bl	49c8 <set_static_addr>
    4b0e:	4604      	mov	r4, r0
    4b10:	e7c8      	b.n	4aa4 <hci_init+0xc>
    4b12:	bf00      	nop
    4b14:	2000b770 	.word	0x2000b770
    4b18:	0002da78 	.word	0x0002da78

00004b1c <hci_init>:
		return HCI_CLASS_ACL_DATA;
	}
}

void hci_init(struct k_poll_signal *signal_host_buf)
{
    4b1c:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
    4b1e:	2100      	movs	r1, #0
    4b20:	4608      	mov	r0, r1
    4b22:	f007 ffb1 	bl	ca88 <reset>
    4b26:	bd08      	pop	{r3, pc}

00004b28 <bt_send>:
{
    4b28:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
    4b2a:	4b03      	ldr	r3, [pc, #12]	; (4b38 <bt_send+0x10>)
    4b2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    4b30:	68db      	ldr	r3, [r3, #12]
    4b32:	4798      	blx	r3
}
    4b34:	bd08      	pop	{r3, pc}
    4b36:	bf00      	nop
    4b38:	2000b770 	.word	0x2000b770

00004b3c <bt_hci_cmd_send>:
{
    4b3c:	b538      	push	{r3, r4, r5, lr}
    4b3e:	4605      	mov	r5, r0
	if (!buf) {
    4b40:	460c      	mov	r4, r1
    4b42:	b151      	cbz	r1, 4b5a <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    4b44:	f640 4335 	movw	r3, #3125	; 0xc35
    4b48:	429d      	cmp	r5, r3
    4b4a:	d00e      	beq.n	4b6a <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    4b4c:	4621      	mov	r1, r4
    4b4e:	480c      	ldr	r0, [pc, #48]	; (4b80 <bt_hci_cmd_send+0x44>)
    4b50:	f015 fa96 	bl	1a080 <net_buf_put>
	return 0;
    4b54:	2500      	movs	r5, #0
}
    4b56:	4628      	mov	r0, r5
    4b58:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    4b5a:	f7ff fa91 	bl	4080 <bt_hci_cmd_create>
		if (!buf) {
    4b5e:	4604      	mov	r4, r0
    4b60:	2800      	cmp	r0, #0
    4b62:	d1ef      	bne.n	4b44 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
    4b64:	f06f 0568 	mvn.w	r5, #104	; 0x68
    4b68:	e7f5      	b.n	4b56 <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
    4b6a:	4620      	mov	r0, r4
    4b6c:	f7ff ffdc 	bl	4b28 <bt_send>
		if (err) {
    4b70:	4605      	mov	r5, r0
    4b72:	2800      	cmp	r0, #0
    4b74:	d0ef      	beq.n	4b56 <bt_hci_cmd_send+0x1a>
			net_buf_unref(buf);
    4b76:	4620      	mov	r0, r4
    4b78:	f015 fa90 	bl	1a09c <net_buf_unref>
    4b7c:	e7eb      	b.n	4b56 <bt_hci_cmd_send+0x1a>
    4b7e:	bf00      	nop
    4b80:	2000b844 	.word	0x2000b844

00004b84 <start_le_scan>:
{
    4b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4b88:	b083      	sub	sp, #12
    4b8a:	4606      	mov	r6, r0
    4b8c:	4689      	mov	r9, r1
    4b8e:	4615      	mov	r5, r2
    4b90:	4698      	mov	r8, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM,
    4b92:	2107      	movs	r1, #7
    4b94:	f242 000b 	movw	r0, #8203	; 0x200b
    4b98:	f7ff fa72 	bl	4080 <bt_hci_cmd_create>
	if (!buf) {
    4b9c:	2800      	cmp	r0, #0
    4b9e:	d072      	beq.n	4c86 <start_le_scan+0x102>
    4ba0:	4607      	mov	r7, r0
	set_param = net_buf_add(buf, sizeof(*set_param));
    4ba2:	2107      	movs	r1, #7
    4ba4:	3008      	adds	r0, #8
    4ba6:	f015 fac5 	bl	1a134 <net_buf_simple_add>
    4baa:	4604      	mov	r4, r0
	memset(set_param, 0, sizeof(*set_param));
    4bac:	2207      	movs	r2, #7
    4bae:	2100      	movs	r1, #0
    4bb0:	f024 fd92 	bl	296d8 <memset>
	set_param->scan_type = scan_type;
    4bb4:	7026      	strb	r6, [r4, #0]
	set_param->interval = sys_cpu_to_le16(interval);
    4bb6:	f8a4 9001 	strh.w	r9, [r4, #1]
	set_param->window = sys_cpu_to_le16(window);
    4bba:	f8a4 5003 	strh.w	r5, [r4, #3]
	set_param->filter_policy = 0x00;
    4bbe:	2300      	movs	r3, #0
    4bc0:	71a3      	strb	r3, [r4, #6]
		set_param->addr_type =  bt_dev.id_addr.type;
    4bc2:	4b34      	ldr	r3, [pc, #208]	; (4c94 <start_le_scan+0x110>)
    4bc4:	781b      	ldrb	r3, [r3, #0]
    4bc6:	7163      	strb	r3, [r4, #5]
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    4bc8:	2e01      	cmp	r6, #1
    4bca:	d02c      	beq.n	4c26 <start_le_scan+0xa2>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    4bcc:	4639      	mov	r1, r7
    4bce:	f242 000b 	movw	r0, #8203	; 0x200b
    4bd2:	f7ff ffb3 	bl	4b3c <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    4bd6:	2102      	movs	r1, #2
    4bd8:	f242 000c 	movw	r0, #8204	; 0x200c
    4bdc:	f7ff fa50 	bl	4080 <bt_hci_cmd_create>
	if (!buf) {
    4be0:	4604      	mov	r4, r0
    4be2:	2800      	cmp	r0, #0
    4be4:	d052      	beq.n	4c8c <start_le_scan+0x108>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    4be6:	2102      	movs	r1, #2
    4be8:	3008      	adds	r0, #8
    4bea:	f015 faa3 	bl	1a134 <net_buf_simple_add>
    4bee:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    4bf0:	2202      	movs	r2, #2
    4bf2:	2100      	movs	r1, #0
    4bf4:	f024 fd70 	bl	296d8 <memset>
	scan_enable->filter_dup = filter_dup;
    4bf8:	f885 8001 	strb.w	r8, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_ENABLE;
    4bfc:	2301      	movs	r3, #1
    4bfe:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    4c00:	aa01      	add	r2, sp, #4
    4c02:	4621      	mov	r1, r4
    4c04:	f242 000c 	movw	r0, #8204	; 0x200c
    4c08:	f7ff fa66 	bl	40d8 <bt_hci_cmd_send_sync>
	if (err) {
    4c0c:	4605      	mov	r5, r0
    4c0e:	b930      	cbnz	r0, 4c1e <start_le_scan+0x9a>
	err = rsp->data[0];
    4c10:	9b01      	ldr	r3, [sp, #4]
    4c12:	689b      	ldr	r3, [r3, #8]
    4c14:	781d      	ldrb	r5, [r3, #0]
	if (!err) {
    4c16:	b1d5      	cbz	r5, 4c4e <start_le_scan+0xca>
	net_buf_unref(rsp);
    4c18:	9801      	ldr	r0, [sp, #4]
    4c1a:	f015 fa3f 	bl	1a09c <net_buf_unref>
}
    4c1e:	4628      	mov	r0, r5
    4c20:	b003      	add	sp, #12
    4c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4c26:	f3bf 8f5b 	dmb	ish
    4c2a:	4b1a      	ldr	r3, [pc, #104]	; (4c94 <start_le_scan+0x110>)
    4c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4c2e:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    4c32:	f013 0f20 	tst.w	r3, #32
    4c36:	d1c9      	bne.n	4bcc <start_le_scan+0x48>
			err = le_set_private_addr();
    4c38:	f7ff fd5a 	bl	46f0 <le_set_private_addr>
			if (err) {
    4c3c:	4605      	mov	r5, r0
    4c3e:	b910      	cbnz	r0, 4c46 <start_le_scan+0xc2>
			set_param->addr_type = BT_ADDR_LE_RANDOM;
    4c40:	2301      	movs	r3, #1
    4c42:	7163      	strb	r3, [r4, #5]
    4c44:	e7c2      	b.n	4bcc <start_le_scan+0x48>
				net_buf_unref(buf);
    4c46:	4638      	mov	r0, r7
    4c48:	f015 fa28 	bl	1a09c <net_buf_unref>
				return err;
    4c4c:	e7e7      	b.n	4c1e <start_le_scan+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4c4e:	4b12      	ldr	r3, [pc, #72]	; (4c98 <start_le_scan+0x114>)
    4c50:	f3bf 8f5b 	dmb	ish
    4c54:	e853 2f00 	ldrex	r2, [r3]
    4c58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    4c5c:	e843 2100 	strex	r1, r2, [r3]
    4c60:	2900      	cmp	r1, #0
    4c62:	d1f7      	bne.n	4c54 <start_le_scan+0xd0>
    4c64:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    4c68:	2e01      	cmp	r6, #1
    4c6a:	d1d5      	bne.n	4c18 <start_le_scan+0x94>
    4c6c:	f3bf 8f5b 	dmb	ish
    4c70:	e853 2f00 	ldrex	r2, [r3]
    4c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    4c78:	e843 2100 	strex	r1, r2, [r3]
    4c7c:	2900      	cmp	r1, #0
    4c7e:	d1f7      	bne.n	4c70 <start_le_scan+0xec>
    4c80:	f3bf 8f5b 	dmb	ish
    4c84:	e7c8      	b.n	4c18 <start_le_scan+0x94>
		return -ENOBUFS;
    4c86:	f06f 0568 	mvn.w	r5, #104	; 0x68
    4c8a:	e7c8      	b.n	4c1e <start_le_scan+0x9a>
		return -ENOBUFS;
    4c8c:	f06f 0568 	mvn.w	r5, #104	; 0x68
    4c90:	e7c5      	b.n	4c1e <start_le_scan+0x9a>
    4c92:	bf00      	nop
    4c94:	2000b770 	.word	0x2000b770
    4c98:	2000b7e0 	.word	0x2000b7e0

00004c9c <bt_le_scan_update>:
{
    4c9c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4c9e:	f3bf 8f5b 	dmb	ish
    4ca2:	4b17      	ldr	r3, [pc, #92]	; (4d00 <bt_le_scan_update+0x64>)
    4ca4:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    4ca6:	f3bf 8f5b 	dmb	ish
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    4caa:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4cae:	b114      	cbz	r4, 4cb6 <bt_le_scan_update+0x1a>
		return 0;
    4cb0:	2300      	movs	r3, #0
}
    4cb2:	4618      	mov	r0, r3
    4cb4:	bd38      	pop	{r3, r4, r5, pc}
    4cb6:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4cb8:	f3bf 8f5b 	dmb	ish
    4cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4cbe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    4cc2:	f013 0f80 	tst.w	r3, #128	; 0x80
    4cc6:	d004      	beq.n	4cd2 <bt_le_scan_update+0x36>
		err = bt_hci_stop_scanning();
    4cc8:	f7ff fd2a 	bl	4720 <bt_hci_stop_scanning>
		if (err) {
    4ccc:	4603      	mov	r3, r0
    4cce:	2800      	cmp	r0, #0
    4cd0:	d1ef      	bne.n	4cb2 <bt_le_scan_update+0x16>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    4cd2:	2101      	movs	r1, #1
    4cd4:	2000      	movs	r0, #0
    4cd6:	f001 fcd9 	bl	668c <bt_conn_lookup_state_le>
		if (!conn) {
    4cda:	b170      	cbz	r0, 4cfa <bt_le_scan_update+0x5e>
		bt_conn_unref(conn);
    4cdc:	f001 fd08 	bl	66f0 <bt_conn_unref>
		if (fast_scan) {
    4ce0:	b13d      	cbz	r5, 4cf2 <bt_le_scan_update+0x56>
			window = BT_GAP_SCAN_FAST_WINDOW;
    4ce2:	2230      	movs	r2, #48	; 0x30
			interval = BT_GAP_SCAN_FAST_INTERVAL;
    4ce4:	2160      	movs	r1, #96	; 0x60
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window,
    4ce6:	2301      	movs	r3, #1
    4ce8:	2000      	movs	r0, #0
    4cea:	f7ff ff4b 	bl	4b84 <start_le_scan>
    4cee:	4603      	mov	r3, r0
    4cf0:	e7df      	b.n	4cb2 <bt_le_scan_update+0x16>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    4cf2:	2212      	movs	r2, #18
			interval = BT_GAP_SCAN_SLOW_INTERVAL_1;
    4cf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    4cf8:	e7f5      	b.n	4ce6 <bt_le_scan_update+0x4a>
			return 0;
    4cfa:	4623      	mov	r3, r4
    4cfc:	e7d9      	b.n	4cb2 <bt_le_scan_update+0x16>
    4cfe:	bf00      	nop
    4d00:	2000b770 	.word	0x2000b770

00004d04 <bt_init>:
{
    4d04:	b510      	push	{r4, lr}
	err = hci_init();
    4d06:	f7ff fec7 	bl	4a98 <hci_init>
	if (err) {
    4d0a:	4604      	mov	r4, r0
    4d0c:	b108      	cbz	r0, 4d12 <bt_init+0xe>
}
    4d0e:	4620      	mov	r0, r4
    4d10:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
    4d12:	f002 f83b 	bl	6d8c <bt_conn_init>
		if (err) {
    4d16:	4604      	mov	r4, r0
    4d18:	2800      	cmp	r0, #0
    4d1a:	d1f8      	bne.n	4d0e <bt_init+0xa>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4d1c:	4b07      	ldr	r3, [pc, #28]	; (4d3c <bt_init+0x38>)
    4d1e:	f3bf 8f5b 	dmb	ish
    4d22:	e853 2f00 	ldrex	r2, [r3]
    4d26:	f042 0202 	orr.w	r2, r2, #2
    4d2a:	e843 2100 	strex	r1, r2, [r3]
    4d2e:	2900      	cmp	r1, #0
    4d30:	d1f7      	bne.n	4d22 <bt_init+0x1e>
    4d32:	f3bf 8f5b 	dmb	ish
	bt_le_scan_update(false);
    4d36:	f7ff ffb1 	bl	4c9c <bt_le_scan_update>
	return 0;
    4d3a:	e7e8      	b.n	4d0e <bt_init+0xa>
    4d3c:	2000b7e0 	.word	0x2000b7e0

00004d40 <init_work>:
{
    4d40:	b508      	push	{r3, lr}
	err = bt_init();
    4d42:	f7ff ffdf 	bl	4d04 <bt_init>
	if (ready_cb) {
    4d46:	4b02      	ldr	r3, [pc, #8]	; (4d50 <init_work+0x10>)
    4d48:	681b      	ldr	r3, [r3, #0]
    4d4a:	b103      	cbz	r3, 4d4e <init_work+0xe>
		ready_cb(err);
    4d4c:	4798      	blx	r3
    4d4e:	bd08      	pop	{r3, pc}
    4d50:	20000220 	.word	0x20000220

00004d54 <hci_disconn_complete>:
{
    4d54:	b530      	push	{r4, r5, lr}
    4d56:	b085      	sub	sp, #20
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    4d58:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4d5a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
	if (evt->status) {
    4d5e:	7823      	ldrb	r3, [r4, #0]
    4d60:	b10b      	cbz	r3, 4d66 <hci_disconn_complete+0x12>
}
    4d62:	b005      	add	sp, #20
    4d64:	bd30      	pop	{r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
    4d66:	f001 fc3f 	bl	65e8 <bt_conn_lookup_handle>
	if (!conn) {
    4d6a:	4605      	mov	r5, r0
    4d6c:	2800      	cmp	r0, #0
    4d6e:	d034      	beq.n	4dda <hci_disconn_complete+0x86>
	conn->err = evt->reason;
    4d70:	78e3      	ldrb	r3, [r4, #3]
    4d72:	72c3      	strb	r3, [r0, #11]
	k_call_stacks_analyze();
    4d74:	f022 faf8 	bl	27368 <k_call_stacks_analyze>
		} else {
			break;
		}
	}
#else
	for (i = 0; i < size; i++) {
    4d78:	2200      	movs	r2, #0
	size_t unused = 0;
    4d7a:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    4d7c:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
    4d80:	d206      	bcs.n	4d90 <hci_disconn_complete+0x3c>
		if ((unsigned char)stack[i] == 0xaa) {
    4d82:	4927      	ldr	r1, [pc, #156]	; (4e20 <hci_disconn_complete+0xcc>)
    4d84:	5c89      	ldrb	r1, [r1, r2]
    4d86:	29aa      	cmp	r1, #170	; 0xaa
    4d88:	d102      	bne.n	4d90 <hci_disconn_complete+0x3c>
			unused++;
    4d8a:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    4d8c:	3201      	adds	r2, #1
    4d8e:	e7f5      	b.n	4d7c <hci_disconn_complete+0x28>
	unsigned int pcnt, unused = 0;

	unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	pcnt = ((size - unused) * 100) / size;
    4d90:	f5c3 7120 	rsb	r1, r3, #640	; 0x280
    4d94:	2264      	movs	r2, #100	; 0x64
    4d96:	fb02 f201 	mul.w	r2, r2, r1
    4d9a:	4822      	ldr	r0, [pc, #136]	; (4e24 <hci_disconn_complete+0xd0>)
    4d9c:	fba0 0202 	umull	r0, r2, r0, r2
    4da0:	0a52      	lsrs	r2, r2, #9

	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    4da2:	9202      	str	r2, [sp, #8]
    4da4:	f44f 7220 	mov.w	r2, #640	; 0x280
    4da8:	9201      	str	r2, [sp, #4]
    4daa:	9100      	str	r1, [sp, #0]
    4dac:	491e      	ldr	r1, [pc, #120]	; (4e28 <hci_disconn_complete+0xd4>)
    4dae:	481f      	ldr	r0, [pc, #124]	; (4e2c <hci_disconn_complete+0xd8>)
    4db0:	f7fe f896 	bl	2ee0 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4db4:	2100      	movs	r1, #0
    4db6:	4628      	mov	r0, r5
    4db8:	f001 fd28 	bl	680c <bt_conn_set_state>
	conn->handle = 0;
    4dbc:	2300      	movs	r3, #0
    4dbe:	802b      	strh	r3, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    4dc0:	78ab      	ldrb	r3, [r5, #2]
    4dc2:	bb03      	cbnz	r3, 4e06 <hci_disconn_complete+0xb2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4dc4:	f3bf 8f5b 	dmb	ish
    4dc8:	686b      	ldr	r3, [r5, #4]
    4dca:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    4dce:	f013 0f01 	tst.w	r3, #1
    4dd2:	d11c      	bne.n	4e0e <hci_disconn_complete+0xba>
	bt_conn_unref(conn);
    4dd4:	4628      	mov	r0, r5
    4dd6:	f001 fc8b 	bl	66f0 <bt_conn_unref>
    4dda:	f3bf 8f5b 	dmb	ish
    4dde:	4b14      	ldr	r3, [pc, #80]	; (4e30 <hci_disconn_complete+0xdc>)
    4de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4de2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    4de6:	f013 0f40 	tst.w	r3, #64	; 0x40
    4dea:	d0ba      	beq.n	4d62 <hci_disconn_complete+0xe>
    4dec:	f3bf 8f5b 	dmb	ish
    4df0:	4b0f      	ldr	r3, [pc, #60]	; (4e30 <hci_disconn_complete+0xdc>)
    4df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4df4:	f3bf 8f5b 	dmb	ish
    4df8:	f013 0f20 	tst.w	r3, #32
    4dfc:	d1b1      	bne.n	4d62 <hci_disconn_complete+0xe>
		set_advertise_enable(true);
    4dfe:	2001      	movs	r0, #1
    4e00:	f7ff fce4 	bl	47cc <set_advertise_enable>
    4e04:	e7ad      	b.n	4d62 <hci_disconn_complete+0xe>
		bt_conn_unref(conn);
    4e06:	4628      	mov	r0, r5
    4e08:	f001 fc72 	bl	66f0 <bt_conn_unref>
		return;
    4e0c:	e7a9      	b.n	4d62 <hci_disconn_complete+0xe>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4e0e:	2101      	movs	r1, #1
    4e10:	4628      	mov	r0, r5
    4e12:	f001 fcfb 	bl	680c <bt_conn_set_state>
		bt_le_scan_update(false);
    4e16:	2000      	movs	r0, #0
    4e18:	f7ff ff40 	bl	4c9c <bt_le_scan_update>
    4e1c:	e7da      	b.n	4dd4 <hci_disconn_complete+0x80>
    4e1e:	bf00      	nop
    4e20:	20003b10 	.word	0x20003b10
    4e24:	cccccccd 	.word	0xcccccccd
    4e28:	0002f800 	.word	0x0002f800
    4e2c:	0002f80c 	.word	0x0002f80c
    4e30:	2000b770 	.word	0x2000b770

00004e34 <check_pending_conn>:
{
    4e34:	b538      	push	{r3, r4, r5, lr}
    4e36:	f3bf 8f5b 	dmb	ish
    4e3a:	4b23      	ldr	r3, [pc, #140]	; (4ec8 <check_pending_conn+0x94>)
    4e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4e3e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4e42:	f413 7f80 	tst.w	r3, #256	; 0x100
    4e46:	d101      	bne.n	4e4c <check_pending_conn+0x18>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    4e48:	2a01      	cmp	r2, #1
    4e4a:	d900      	bls.n	4e4e <check_pending_conn+0x1a>
    4e4c:	bd38      	pop	{r3, r4, r5, pc}
    4e4e:	460c      	mov	r4, r1
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    4e50:	2101      	movs	r1, #1
    4e52:	f001 fc1b 	bl	668c <bt_conn_lookup_state_le>
	if (!conn) {
    4e56:	4605      	mov	r5, r0
    4e58:	2800      	cmp	r0, #0
    4e5a:	d0f7      	beq.n	4e4c <check_pending_conn+0x18>
	if (bt_hci_stop_scanning()) {
    4e5c:	f7ff fc60 	bl	4720 <bt_hci_stop_scanning>
    4e60:	b9c0      	cbnz	r0, 4e94 <check_pending_conn+0x60>
    4e62:	f3bf 8f5b 	dmb	ish
    4e66:	4b18      	ldr	r3, [pc, #96]	; (4ec8 <check_pending_conn+0x94>)
    4e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4e6a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    4e6e:	f013 0f04 	tst.w	r3, #4
    4e72:	d11c      	bne.n	4eae <check_pending_conn+0x7a>
	memcpy(dst, src, sizeof(*dst));
    4e74:	2207      	movs	r2, #7
    4e76:	4914      	ldr	r1, [pc, #80]	; (4ec8 <check_pending_conn+0x94>)
    4e78:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    4e7c:	f7fb fa20 	bl	2c0 <memcpy>
    4e80:	2207      	movs	r2, #7
    4e82:	4621      	mov	r1, r4
    4e84:	f105 0056 	add.w	r0, r5, #86	; 0x56
    4e88:	f7fb fa1a 	bl	2c0 <memcpy>
	if (hci_le_create_conn(conn)) {
    4e8c:	4628      	mov	r0, r5
    4e8e:	f7ff fcdb 	bl	4848 <hci_le_create_conn>
    4e92:	b180      	cbz	r0, 4eb6 <check_pending_conn+0x82>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    4e94:	231f      	movs	r3, #31
    4e96:	72eb      	strb	r3, [r5, #11]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4e98:	2100      	movs	r1, #0
    4e9a:	4628      	mov	r0, r5
    4e9c:	f001 fcb6 	bl	680c <bt_conn_set_state>
	bt_conn_unref(conn);
    4ea0:	4628      	mov	r0, r5
    4ea2:	f001 fc25 	bl	66f0 <bt_conn_unref>
	bt_le_scan_update(false);
    4ea6:	2000      	movs	r0, #0
    4ea8:	f7ff fef8 	bl	4c9c <bt_le_scan_update>
    4eac:	e7ce      	b.n	4e4c <check_pending_conn+0x18>
			set_random_address(&bt_dev.id_addr.a);
    4eae:	4807      	ldr	r0, [pc, #28]	; (4ecc <check_pending_conn+0x98>)
    4eb0:	f7ff fbee 	bl	4690 <set_random_address>
    4eb4:	e7de      	b.n	4e74 <check_pending_conn+0x40>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    4eb6:	2102      	movs	r1, #2
    4eb8:	4628      	mov	r0, r5
    4eba:	f001 fca7 	bl	680c <bt_conn_set_state>
	bt_conn_unref(conn);
    4ebe:	4628      	mov	r0, r5
    4ec0:	f001 fc16 	bl	66f0 <bt_conn_unref>
	return;
    4ec4:	bd38      	pop	{r3, r4, r5, pc}
    4ec6:	bf00      	nop
    4ec8:	2000b770 	.word	0x2000b770
    4ecc:	2000b771 	.word	0x2000b771

00004ed0 <le_adv_report>:
{
    4ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ed4:	b083      	sub	sp, #12
    4ed6:	4605      	mov	r5, r0
	u8_t num_reports = net_buf_pull_u8(buf);
    4ed8:	f100 0308 	add.w	r3, r0, #8
    4edc:	9300      	str	r3, [sp, #0]
    4ede:	4618      	mov	r0, r3
    4ee0:	f015 f97d 	bl	1a1de <net_buf_simple_pull_u8>
	while (num_reports--) {
    4ee4:	e00a      	b.n	4efc <le_adv_report+0x2c>
		check_pending_conn(addr, &info->addr, info->evt_type);
    4ee6:	7822      	ldrb	r2, [r4, #0]
    4ee8:	4631      	mov	r1, r6
    4eea:	9801      	ldr	r0, [sp, #4]
    4eec:	f7ff ffa2 	bl	4e34 <check_pending_conn>
		net_buf_pull(buf, info->length + sizeof(rssi));
    4ef0:	7a21      	ldrb	r1, [r4, #8]
    4ef2:	3101      	adds	r1, #1
    4ef4:	9800      	ldr	r0, [sp, #0]
    4ef6:	f015 f96a 	bl	1a1ce <net_buf_simple_pull>
	while (num_reports--) {
    4efa:	4638      	mov	r0, r7
    4efc:	1e43      	subs	r3, r0, #1
    4efe:	b2df      	uxtb	r7, r3
    4f00:	b368      	cbz	r0, 4f5e <le_adv_report+0x8e>
		info = (void *)buf->data;
    4f02:	68ac      	ldr	r4, [r5, #8]
		net_buf_pull(buf, sizeof(*info));
    4f04:	2109      	movs	r1, #9
    4f06:	f8dd 9000 	ldr.w	r9, [sp]
    4f0a:	4648      	mov	r0, r9
    4f0c:	f015 f95f 	bl	1a1ce <net_buf_simple_pull>
		rssi = info->data[info->length];
    4f10:	7a23      	ldrb	r3, [r4, #8]
    4f12:	4423      	add	r3, r4
    4f14:	f993 8009 	ldrsb.w	r8, [r3, #9]
		addr = find_id_addr(&info->addr);
    4f18:	1c66      	adds	r6, r4, #1
    4f1a:	4630      	mov	r0, r6
    4f1c:	f7fe ff6b 	bl	3df6 <find_id_addr>
    4f20:	9001      	str	r0, [sp, #4]
		if (scan_dev_found_cb) {
    4f22:	4b10      	ldr	r3, [pc, #64]	; (4f64 <le_adv_report+0x94>)
    4f24:	681b      	ldr	r3, [r3, #0]
    4f26:	2b00      	cmp	r3, #0
    4f28:	d0dd      	beq.n	4ee6 <le_adv_report+0x16>
	state->offset = net_buf_simple_headroom(buf);
    4f2a:	f8cd 9000 	str.w	r9, [sp]
    4f2e:	4648      	mov	r0, r9
    4f30:	f015 f965 	bl	1a1fe <net_buf_simple_headroom>
    4f34:	fa1f fa80 	uxth.w	sl, r0
	state->len = buf->len;
    4f38:	f8b5 900c 	ldrh.w	r9, [r5, #12]
			buf->len = info->length;
    4f3c:	7a23      	ldrb	r3, [r4, #8]
    4f3e:	81ab      	strh	r3, [r5, #12]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    4f40:	4b08      	ldr	r3, [pc, #32]	; (4f64 <le_adv_report+0x94>)
    4f42:	f8d3 b000 	ldr.w	fp, [r3]
    4f46:	9b00      	ldr	r3, [sp, #0]
    4f48:	7822      	ldrb	r2, [r4, #0]
    4f4a:	4641      	mov	r1, r8
    4f4c:	9801      	ldr	r0, [sp, #4]
    4f4e:	47d8      	blx	fp
	buf->data = buf->__buf + state->offset;
    4f50:	f105 0310 	add.w	r3, r5, #16
    4f54:	4453      	add	r3, sl
    4f56:	60ab      	str	r3, [r5, #8]
	buf->len = state->len;
    4f58:	f8a5 900c 	strh.w	r9, [r5, #12]
    4f5c:	e7c3      	b.n	4ee6 <le_adv_report+0x16>
}
    4f5e:	b003      	add	sp, #12
    4f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f64:	20000224 	.word	0x20000224

00004f68 <hci_le_read_remote_features>:
{
    4f68:	b538      	push	{r3, r4, r5, lr}
    4f6a:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    4f6c:	2102      	movs	r1, #2
    4f6e:	f242 0016 	movw	r0, #8214	; 0x2016
    4f72:	f7ff f885 	bl	4080 <bt_hci_cmd_create>
	if (!buf) {
    4f76:	b168      	cbz	r0, 4f94 <hci_le_read_remote_features+0x2c>
    4f78:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    4f7a:	2102      	movs	r1, #2
    4f7c:	3008      	adds	r0, #8
    4f7e:	f015 f8d9 	bl	1a134 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    4f82:	882b      	ldrh	r3, [r5, #0]
    4f84:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    4f86:	4621      	mov	r1, r4
    4f88:	f242 0016 	movw	r0, #8214	; 0x2016
    4f8c:	f7ff fdd6 	bl	4b3c <bt_hci_cmd_send>
	return 0;
    4f90:	2000      	movs	r0, #0
    4f92:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    4f94:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    4f98:	bd38      	pop	{r3, r4, r5, pc}

00004f9a <hci_le_set_phy>:
{
    4f9a:	b538      	push	{r3, r4, r5, lr}
    4f9c:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    4f9e:	2107      	movs	r1, #7
    4fa0:	f242 0032 	movw	r0, #8242	; 0x2032
    4fa4:	f7ff f86c 	bl	4080 <bt_hci_cmd_create>
	if (!buf) {
    4fa8:	b1a0      	cbz	r0, 4fd4 <hci_le_set_phy+0x3a>
    4faa:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
    4fac:	2107      	movs	r1, #7
    4fae:	3008      	adds	r0, #8
    4fb0:	f015 f8c0 	bl	1a134 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    4fb4:	8823      	ldrh	r3, [r4, #0]
    4fb6:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    4fb8:	2400      	movs	r4, #0
    4fba:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    4fbc:	2302      	movs	r3, #2
    4fbe:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    4fc0:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    4fc2:	7144      	strb	r4, [r0, #5]
    4fc4:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    4fc6:	4629      	mov	r1, r5
    4fc8:	f242 0032 	movw	r0, #8242	; 0x2032
    4fcc:	f7ff fdb6 	bl	4b3c <bt_hci_cmd_send>
	return 0;
    4fd0:	4620      	mov	r0, r4
    4fd2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    4fd4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    4fd8:	bd38      	pop	{r3, r4, r5, pc}

00004fda <hci_le_set_data_len>:
{
    4fda:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fdc:	b083      	sub	sp, #12
    4fde:	4604      	mov	r4, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    4fe0:	aa01      	add	r2, sp, #4
    4fe2:	2100      	movs	r1, #0
    4fe4:	f242 002f 	movw	r0, #8239	; 0x202f
    4fe8:	f7ff f876 	bl	40d8 <bt_hci_cmd_send_sync>
	if (err) {
    4fec:	4603      	mov	r3, r0
    4fee:	b110      	cbz	r0, 4ff6 <hci_le_set_data_len+0x1c>
}
    4ff0:	4618      	mov	r0, r3
    4ff2:	b003      	add	sp, #12
    4ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    4ff6:	9801      	ldr	r0, [sp, #4]
    4ff8:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    4ffa:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    4ffe:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	net_buf_unref(rsp);
    5002:	f015 f84b 	bl	1a09c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    5006:	2106      	movs	r1, #6
    5008:	f242 0022 	movw	r0, #8226	; 0x2022
    500c:	f7ff f838 	bl	4080 <bt_hci_cmd_create>
	if (!buf) {
    5010:	4605      	mov	r5, r0
    5012:	b170      	cbz	r0, 5032 <hci_le_set_data_len+0x58>
	cp = net_buf_add(buf, sizeof(*cp));
    5014:	2106      	movs	r1, #6
    5016:	3008      	adds	r0, #8
    5018:	f015 f88c 	bl	1a134 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    501c:	8823      	ldrh	r3, [r4, #0]
    501e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    5020:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    5022:	8086      	strh	r6, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    5024:	4629      	mov	r1, r5
    5026:	f242 0022 	movw	r0, #8226	; 0x2022
    502a:	f7ff fd87 	bl	4b3c <bt_hci_cmd_send>
    502e:	4603      	mov	r3, r0
    5030:	e7de      	b.n	4ff0 <hci_le_set_data_len+0x16>
		return -ENOBUFS;
    5032:	f06f 0368 	mvn.w	r3, #104	; 0x68
    5036:	e7db      	b.n	4ff0 <hci_le_set_data_len+0x16>

00005038 <le_conn_complete>:
{
    5038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    503c:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    503e:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
    5042:	7823      	ldrb	r3, [r4, #0]
    5044:	b17b      	cbz	r3, 5066 <le_conn_complete+0x2e>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    5046:	2102      	movs	r1, #2
    5048:	2000      	movs	r0, #0
    504a:	f001 fb1f 	bl	668c <bt_conn_lookup_state_le>
		if (!conn) {
    504e:	4605      	mov	r5, r0
    5050:	b3d0      	cbz	r0, 50c8 <le_conn_complete+0x90>
		conn->err = evt->status;
    5052:	7823      	ldrb	r3, [r4, #0]
    5054:	72c3      	strb	r3, [r0, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5056:	2100      	movs	r1, #0
    5058:	f001 fbd8 	bl	680c <bt_conn_set_state>
		bt_conn_unref(conn);
    505c:	4628      	mov	r0, r5
    505e:	f001 fb47 	bl	66f0 <bt_conn_unref>
		return;
    5062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	id_addr = find_id_addr(&evt->peer_addr);
    5066:	1d27      	adds	r7, r4, #4
    5068:	4638      	mov	r0, r7
    506a:	f7fe fec4 	bl	3df6 <find_id_addr>
    506e:	4680      	mov	r8, r0
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    5070:	2102      	movs	r1, #2
    5072:	f001 fb0b 	bl	668c <bt_conn_lookup_state_le>
    5076:	4605      	mov	r5, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    5078:	78e3      	ldrb	r3, [r4, #3]
    507a:	2b01      	cmp	r3, #1
    507c:	d026      	beq.n	50cc <le_conn_complete+0x94>
	if (!conn) {
    507e:	b31d      	cbz	r5, 50c8 <le_conn_complete+0x90>
	conn->handle   = handle;
    5080:	4628      	mov	r0, r5
    5082:	f820 6b48 	strh.w	r6, [r0], #72
    5086:	2207      	movs	r2, #7
    5088:	4641      	mov	r1, r8
    508a:	f7fb f919 	bl	2c0 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    508e:	f8b4 300b 	ldrh.w	r3, [r4, #11]
    5092:	f8a5 305e 	strh.w	r3, [r5, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    5096:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    509a:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    509e:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    50a2:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
	conn->role = evt->role;
    50a6:	78e3      	ldrb	r3, [r4, #3]
    50a8:	70eb      	strb	r3, [r5, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    50aa:	2b01      	cmp	r3, #1
    50ac:	d022      	beq.n	50f4 <le_conn_complete+0xbc>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    50ae:	2103      	movs	r1, #3
    50b0:	4628      	mov	r0, r5
    50b2:	f001 fbab 	bl	680c <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    50b6:	7b2b      	ldrb	r3, [r5, #12]
    50b8:	2b03      	cmp	r3, #3
    50ba:	d03b      	beq.n	5134 <le_conn_complete+0xfc>
	bt_conn_unref(conn);
    50bc:	4628      	mov	r0, r5
    50be:	f001 fb17 	bl	66f0 <bt_conn_unref>
	bt_le_scan_update(false);
    50c2:	2000      	movs	r0, #0
    50c4:	f7ff fdea 	bl	4c9c <bt_le_scan_update>
    50c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    50cc:	4b3a      	ldr	r3, [pc, #232]	; (51b8 <le_conn_complete+0x180>)
    50ce:	f3bf 8f5b 	dmb	ish
    50d2:	e853 2f00 	ldrex	r2, [r3]
    50d6:	f022 0220 	bic.w	r2, r2, #32
    50da:	e843 2100 	strex	r1, r2, [r3]
    50de:	2900      	cmp	r1, #0
    50e0:	d1f7      	bne.n	50d2 <le_conn_complete+0x9a>
    50e2:	f3bf 8f5b 	dmb	ish
		if (!conn) {
    50e6:	2d00      	cmp	r5, #0
    50e8:	d1c9      	bne.n	507e <le_conn_complete+0x46>
			conn = bt_conn_add_le(id_addr);
    50ea:	4640      	mov	r0, r8
    50ec:	f001 fa30 	bl	6550 <bt_conn_add_le>
    50f0:	4605      	mov	r5, r0
    50f2:	e7c4      	b.n	507e <le_conn_complete+0x46>
    50f4:	2207      	movs	r2, #7
    50f6:	4639      	mov	r1, r7
    50f8:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    50fc:	f7fb f8e0 	bl	2c0 <memcpy>
    5100:	4e2e      	ldr	r6, [pc, #184]	; (51bc <le_conn_complete+0x184>)
    5102:	2207      	movs	r2, #7
    5104:	4631      	mov	r1, r6
    5106:	f105 0056 	add.w	r0, r5, #86	; 0x56
    510a:	f7fb f8d9 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    510e:	f3bf 8f5b 	dmb	ish
    5112:	6f33      	ldr	r3, [r6, #112]	; 0x70
    5114:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5118:	f013 0f40 	tst.w	r3, #64	; 0x40
    511c:	d0c7      	beq.n	50ae <le_conn_complete+0x76>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    511e:	e9d6 2320 	ldrd	r2, r3, [r6, #128]	; 0x80
    5122:	2200      	movs	r2, #0
    5124:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5128:	4313      	orrs	r3, r2
    512a:	d0c0      	beq.n	50ae <le_conn_complete+0x76>
			set_advertise_enable(true);
    512c:	2001      	movs	r0, #1
    512e:	f7ff fb4d 	bl	47cc <set_advertise_enable>
    5132:	e7bc      	b.n	50ae <le_conn_complete+0x76>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    5134:	78e3      	ldrb	r3, [r4, #3]
    5136:	b12b      	cbz	r3, 5144 <le_conn_complete+0x10c>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    5138:	4b20      	ldr	r3, [pc, #128]	; (51bc <le_conn_complete+0x184>)
    513a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    513e:	f013 0f08 	tst.w	r3, #8
    5142:	d004      	beq.n	514e <le_conn_complete+0x116>
		err = hci_le_read_remote_features(conn);
    5144:	4628      	mov	r0, r5
    5146:	f7ff ff0f 	bl	4f68 <hci_le_read_remote_features>
		if (!err) {
    514a:	2800      	cmp	r0, #0
    514c:	d0b6      	beq.n	50bc <le_conn_complete+0x84>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    514e:	4b1b      	ldr	r3, [pc, #108]	; (51bc <le_conn_complete+0x184>)
    5150:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    5154:	f013 0f01 	tst.w	r3, #1
    5158:	d10d      	bne.n	5176 <le_conn_complete+0x13e>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    515a:	4b18      	ldr	r3, [pc, #96]	; (51bc <le_conn_complete+0x184>)
    515c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5160:	f013 0f20 	tst.w	r3, #32
    5164:	d003      	beq.n	516e <le_conn_complete+0x136>
		err = hci_le_set_data_len(conn);
    5166:	4628      	mov	r0, r5
    5168:	f7ff ff37 	bl	4fda <hci_le_set_data_len>
		if (!err) {
    516c:	b1b0      	cbz	r0, 519c <le_conn_complete+0x164>
	update_conn_param(conn);
    516e:	4628      	mov	r0, r5
    5170:	f7fe fe4a 	bl	3e08 <update_conn_param>
    5174:	e7a2      	b.n	50bc <le_conn_complete+0x84>
		err = hci_le_set_phy(conn);
    5176:	4628      	mov	r0, r5
    5178:	f7ff ff0f 	bl	4f9a <hci_le_set_phy>
		if (!err) {
    517c:	2800      	cmp	r0, #0
    517e:	d1ec      	bne.n	515a <le_conn_complete+0x122>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    5180:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5182:	f3bf 8f5b 	dmb	ish
    5186:	e853 2f00 	ldrex	r2, [r3]
    518a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    518e:	e843 2100 	strex	r1, r2, [r3]
    5192:	2900      	cmp	r1, #0
    5194:	d1f7      	bne.n	5186 <le_conn_complete+0x14e>
    5196:	f3bf 8f5b 	dmb	ish
    519a:	e78f      	b.n	50bc <le_conn_complete+0x84>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    519c:	1d2b      	adds	r3, r5, #4
    519e:	f3bf 8f5b 	dmb	ish
    51a2:	e853 2f00 	ldrex	r2, [r3]
    51a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    51aa:	e843 2100 	strex	r1, r2, [r3]
    51ae:	2900      	cmp	r1, #0
    51b0:	d1f7      	bne.n	51a2 <le_conn_complete+0x16a>
    51b2:	f3bf 8f5b 	dmb	ish
    51b6:	e781      	b.n	50bc <le_conn_complete+0x84>
    51b8:	2000b7e0 	.word	0x2000b7e0
    51bc:	2000b770 	.word	0x2000b770

000051c0 <le_conn_complete>:
{
    51c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51c4:	4604      	mov	r4, r0
    51c6:	460f      	mov	r7, r1
    51c8:	4690      	mov	r8, r2
	ll_rl_crpa_set(radio_cc->peer_addr_type, &radio_cc->peer_addr[0],
    51ca:	1d85      	adds	r5, r0, #6
    51cc:	f100 060c 	add.w	r6, r0, #12
    51d0:	4633      	mov	r3, r6
    51d2:	22ff      	movs	r2, #255	; 0xff
    51d4:	4629      	mov	r1, r5
    51d6:	7940      	ldrb	r0, [r0, #5]
    51d8:	f014 faf8 	bl	197cc <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    51dc:	4b40      	ldr	r3, [pc, #256]	; (52e0 <le_conn_complete+0x120>)
    51de:	e9d3 2300 	ldrd	r2, r3, [r3]
    51e2:	2200      	movs	r2, #0
    51e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    51e8:	4313      	orrs	r3, r2
    51ea:	d077      	beq.n	52dc <le_conn_complete+0x11c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    51ec:	4b3d      	ldr	r3, [pc, #244]	; (52e4 <le_conn_complete+0x124>)
    51ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    51f2:	f002 0001 	and.w	r0, r2, #1
    51f6:	2100      	movs	r1, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    51f8:	4301      	orrs	r1, r0
    51fa:	d104      	bne.n	5206 <le_conn_complete+0x46>
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    51fc:	f402 7000 	and.w	r0, r2, #512	; 0x200
    5200:	2100      	movs	r1, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    5202:	4301      	orrs	r1, r0
    5204:	d06a      	beq.n	52dc <le_conn_complete+0x11c>
	if (!radio_cc->status) {
    5206:	78e1      	ldrb	r1, [r4, #3]
    5208:	b919      	cbnz	r1, 5212 <le_conn_complete+0x52>
		conn_count++;
    520a:	4837      	ldr	r0, [pc, #220]	; (52e8 <le_conn_complete+0x128>)
    520c:	6801      	ldr	r1, [r0, #0]
    520e:	3101      	adds	r1, #1
    5210:	6001      	str	r1, [r0, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    5212:	f402 7200 	and.w	r2, r2, #512	; 0x200
    5216:	2300      	movs	r3, #0
    5218:	4313      	orrs	r3, r2
    521a:	d03e      	beq.n	529a <le_conn_complete+0xda>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    521c:	221e      	movs	r2, #30
    521e:	210a      	movs	r1, #10
    5220:	4640      	mov	r0, r8
    5222:	f007 fb2d 	bl	c880 <meta_evt>
    5226:	4680      	mov	r8, r0
		leecc->status = radio_cc->status;
    5228:	78e3      	ldrb	r3, [r4, #3]
    522a:	7003      	strb	r3, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    522c:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = radio_cc->role;
    5230:	7923      	ldrb	r3, [r4, #4]
    5232:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    5234:	7963      	ldrb	r3, [r4, #5]
    5236:	7103      	strb	r3, [r0, #4]
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    5238:	2206      	movs	r2, #6
    523a:	4629      	mov	r1, r5
    523c:	3005      	adds	r0, #5
    523e:	f7fb f83f 	bl	2c0 <memcpy>
		if ((radio_cc->own_addr_type) &&
    5242:	7ca3      	ldrb	r3, [r4, #18]
    5244:	b123      	cbz	r3, 5250 <le_conn_complete+0x90>
		    ((radio_cc->own_addr[5] & 0xc0) == 0x40)) {
    5246:	7e23      	ldrb	r3, [r4, #24]
		if ((radio_cc->own_addr_type) &&
    5248:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    524c:	2b40      	cmp	r3, #64	; 0x40
    524e:	d01c      	beq.n	528a <le_conn_complete+0xca>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    5250:	2206      	movs	r2, #6
    5252:	2100      	movs	r1, #0
    5254:	f108 000b 	add.w	r0, r8, #11
    5258:	f024 fa3e 	bl	296d8 <memset>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    525c:	2206      	movs	r2, #6
    525e:	4631      	mov	r1, r6
    5260:	f108 0011 	add.w	r0, r8, #17
    5264:	f7fb f82c 	bl	2c0 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    5268:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    526c:	f8a8 3017 	strh.w	r3, [r8, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    5270:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    5274:	f8a8 3019 	strh.w	r3, [r8, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    5278:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    527c:	f8a8 301b 	strh.w	r3, [r8, #27]
		leecc->clock_accuracy = radio_cc->mca;
    5280:	7fe3      	ldrb	r3, [r4, #31]
    5282:	f888 301d 	strb.w	r3, [r8, #29]
		return;
    5286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    528a:	2206      	movs	r2, #6
    528c:	f104 0113 	add.w	r1, r4, #19
    5290:	f108 000b 	add.w	r0, r8, #11
    5294:	f7fb f814 	bl	2c0 <memcpy>
    5298:	e7e0      	b.n	525c <le_conn_complete+0x9c>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    529a:	2212      	movs	r2, #18
    529c:	2101      	movs	r1, #1
    529e:	4640      	mov	r0, r8
    52a0:	f007 faee 	bl	c880 <meta_evt>
    52a4:	4606      	mov	r6, r0
	lecc->status = radio_cc->status;
    52a6:	78e3      	ldrb	r3, [r4, #3]
    52a8:	7003      	strb	r3, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    52aa:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = radio_cc->role;
    52ae:	7923      	ldrb	r3, [r4, #4]
    52b0:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    52b2:	7963      	ldrb	r3, [r4, #5]
    52b4:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    52b6:	2206      	movs	r2, #6
    52b8:	4629      	mov	r1, r5
    52ba:	3005      	adds	r0, #5
    52bc:	f7fb f800 	bl	2c0 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    52c0:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    52c4:	f8a6 300b 	strh.w	r3, [r6, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    52c8:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    52cc:	f8a6 300d 	strh.w	r3, [r6, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    52d0:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    52d4:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = radio_cc->mca;
    52d8:	7fe3      	ldrb	r3, [r4, #31]
    52da:	7473      	strb	r3, [r6, #17]
    52dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52e0:	2000ba60 	.word	0x2000ba60
    52e4:	2000ba68 	.word	0x2000ba68
    52e8:	2000093c 	.word	0x2000093c

000052ec <le_remote_feat_complete>:
{
    52ec:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    52ee:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    52f0:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    52f4:	f001 f978 	bl	65e8 <bt_conn_lookup_handle>
	if (!conn) {
    52f8:	b1f0      	cbz	r0, 5338 <le_remote_feat_complete+0x4c>
    52fa:	4604      	mov	r4, r0
	if (!evt->status) {
    52fc:	782b      	ldrb	r3, [r5, #0]
    52fe:	b1e3      	cbz	r3, 533a <le_remote_feat_complete+0x4e>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    5300:	4b24      	ldr	r3, [pc, #144]	; (5394 <le_remote_feat_complete+0xa8>)
    5302:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    5306:	f013 0f01 	tst.w	r3, #1
    530a:	d004      	beq.n	5316 <le_remote_feat_complete+0x2a>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
    530c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    5310:	f013 0f01 	tst.w	r3, #1
    5314:	d117      	bne.n	5346 <le_remote_feat_complete+0x5a>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    5316:	4b1f      	ldr	r3, [pc, #124]	; (5394 <le_remote_feat_complete+0xa8>)
    5318:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    531c:	f013 0f20 	tst.w	r3, #32
    5320:	d004      	beq.n	532c <le_remote_feat_complete+0x40>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    5322:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    5326:	f013 0f20 	tst.w	r3, #32
    532a:	d11f      	bne.n	536c <le_remote_feat_complete+0x80>
	update_conn_param(conn);
    532c:	4620      	mov	r0, r4
    532e:	f7fe fd6b 	bl	3e08 <update_conn_param>
	bt_conn_unref(conn);
    5332:	4620      	mov	r0, r4
    5334:	f001 f9dc 	bl	66f0 <bt_conn_unref>
    5338:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(conn->le.features, evt->features,
    533a:	2208      	movs	r2, #8
    533c:	1ce9      	adds	r1, r5, #3
    533e:	3068      	adds	r0, #104	; 0x68
    5340:	f7fa ffbe 	bl	2c0 <memcpy>
    5344:	e7dc      	b.n	5300 <le_remote_feat_complete+0x14>
		err = hci_le_set_phy(conn);
    5346:	4620      	mov	r0, r4
    5348:	f7ff fe27 	bl	4f9a <hci_le_set_phy>
		if (!err) {
    534c:	2800      	cmp	r0, #0
    534e:	d1e2      	bne.n	5316 <le_remote_feat_complete+0x2a>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    5350:	1d23      	adds	r3, r4, #4
    5352:	f3bf 8f5b 	dmb	ish
    5356:	e853 2f00 	ldrex	r2, [r3]
    535a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    535e:	e843 2100 	strex	r1, r2, [r3]
    5362:	2900      	cmp	r1, #0
    5364:	d1f7      	bne.n	5356 <le_remote_feat_complete+0x6a>
    5366:	f3bf 8f5b 	dmb	ish
    536a:	e7e2      	b.n	5332 <le_remote_feat_complete+0x46>
		err = hci_le_set_data_len(conn);
    536c:	4620      	mov	r0, r4
    536e:	f7ff fe34 	bl	4fda <hci_le_set_data_len>
		if (!err) {
    5372:	2800      	cmp	r0, #0
    5374:	d1da      	bne.n	532c <le_remote_feat_complete+0x40>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    5376:	1d23      	adds	r3, r4, #4
    5378:	f3bf 8f5b 	dmb	ish
    537c:	e853 2f00 	ldrex	r2, [r3]
    5380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5384:	e843 2100 	strex	r1, r2, [r3]
    5388:	2900      	cmp	r1, #0
    538a:	d1f7      	bne.n	537c <le_remote_feat_complete+0x90>
    538c:	f3bf 8f5b 	dmb	ish
    5390:	e7cf      	b.n	5332 <le_remote_feat_complete+0x46>
    5392:	bf00      	nop
    5394:	2000b770 	.word	0x2000b770

00005398 <le_remote_feat_complete>:
{
    5398:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    539a:	4c14      	ldr	r4, [pc, #80]	; (53ec <le_remote_feat_complete+0x54>)
    539c:	e9d4 4500 	ldrd	r4, r5, [r4]
    53a0:	2400      	movs	r4, #0
    53a2:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    53a6:	432c      	orrs	r4, r5
    53a8:	d007      	beq.n	53ba <le_remote_feat_complete+0x22>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    53aa:	4c11      	ldr	r4, [pc, #68]	; (53f0 <le_remote_feat_complete+0x58>)
    53ac:	e9d4 4500 	ldrd	r4, r5, [r4]
    53b0:	f004 0408 	and.w	r4, r4, #8
    53b4:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    53b6:	432c      	orrs	r4, r5
    53b8:	d100      	bne.n	53bc <le_remote_feat_complete+0x24>
    53ba:	bd70      	pop	{r4, r5, r6, pc}
    53bc:	4615      	mov	r5, r2
    53be:	460e      	mov	r6, r1
    53c0:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    53c2:	220b      	movs	r2, #11
    53c4:	2104      	movs	r1, #4
    53c6:	4618      	mov	r0, r3
    53c8:	f007 fa5a 	bl	c880 <meta_evt>
	sep->status = status;
    53cc:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    53ce:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    53d2:	b12c      	cbz	r4, 53e0 <le_remote_feat_complete+0x48>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    53d4:	2208      	movs	r2, #8
    53d6:	2100      	movs	r1, #0
    53d8:	3003      	adds	r0, #3
    53da:	f024 f97d 	bl	296d8 <memset>
    53de:	e7ec      	b.n	53ba <le_remote_feat_complete+0x22>
		memcpy(&sep->features[0],
    53e0:	2208      	movs	r2, #8
    53e2:	1d31      	adds	r1, r6, #4
    53e4:	3003      	adds	r0, #3
    53e6:	f7fa ff6b 	bl	2c0 <memcpy>
    53ea:	bd70      	pop	{r4, r5, r6, pc}
    53ec:	2000ba60 	.word	0x2000ba60
    53f0:	2000ba68 	.word	0x2000ba68

000053f4 <le_phy_update_complete>:
{
    53f4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
    53f6:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    53f8:	f8b3 0001 	ldrh.w	r0, [r3, #1]
    53fc:	f001 f8f4 	bl	65e8 <bt_conn_lookup_handle>
	if (!conn) {
    5400:	b308      	cbz	r0, 5446 <le_phy_update_complete+0x52>
    5402:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    5404:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5406:	f3bf 8f5b 	dmb	ish
    540a:	e855 3f00 	ldrex	r3, [r5]
    540e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    5412:	e845 2100 	strex	r1, r2, [r5]
    5416:	2900      	cmp	r1, #0
    5418:	d1f7      	bne.n	540a <le_phy_update_complete+0x16>
    541a:	f3bf 8f5b 	dmb	ish
    541e:	f013 0f80 	tst.w	r3, #128	; 0x80
    5422:	d00d      	beq.n	5440 <le_phy_update_complete+0x4c>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    5424:	4b11      	ldr	r3, [pc, #68]	; (546c <le_phy_update_complete+0x78>)
    5426:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    542a:	f013 0f20 	tst.w	r3, #32
    542e:	d004      	beq.n	543a <le_phy_update_complete+0x46>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    5430:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    5434:	f013 0f20 	tst.w	r3, #32
    5438:	d106      	bne.n	5448 <le_phy_update_complete+0x54>
	update_conn_param(conn);
    543a:	4620      	mov	r0, r4
    543c:	f7fe fce4 	bl	3e08 <update_conn_param>
	bt_conn_unref(conn);
    5440:	4620      	mov	r0, r4
    5442:	f001 f955 	bl	66f0 <bt_conn_unref>
    5446:	bd38      	pop	{r3, r4, r5, pc}
		err = hci_le_set_data_len(conn);
    5448:	4620      	mov	r0, r4
    544a:	f7ff fdc6 	bl	4fda <hci_le_set_data_len>
		if (!err) {
    544e:	2800      	cmp	r0, #0
    5450:	d1f3      	bne.n	543a <le_phy_update_complete+0x46>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5452:	f3bf 8f5b 	dmb	ish
    5456:	e855 3f00 	ldrex	r3, [r5]
    545a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    545e:	e845 3200 	strex	r2, r3, [r5]
    5462:	2a00      	cmp	r2, #0
    5464:	d1f7      	bne.n	5456 <le_phy_update_complete+0x62>
    5466:	f3bf 8f5b 	dmb	ish
    546a:	e7e9      	b.n	5440 <le_phy_update_complete+0x4c>
    546c:	2000b770 	.word	0x2000b770

00005470 <le_conn_param_neg_reply>:
{
    5470:	b570      	push	{r4, r5, r6, lr}
    5472:	4606      	mov	r6, r0
    5474:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    5476:	2103      	movs	r1, #3
    5478:	f242 0021 	movw	r0, #8225	; 0x2021
    547c:	f7fe fe00 	bl	4080 <bt_hci_cmd_create>
	if (!buf) {
    5480:	b160      	cbz	r0, 549c <le_conn_param_neg_reply+0x2c>
    5482:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5484:	2103      	movs	r1, #3
    5486:	3008      	adds	r0, #8
    5488:	f014 fe54 	bl	1a134 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    548c:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
    548e:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    5490:	4621      	mov	r1, r4
    5492:	f242 0021 	movw	r0, #8225	; 0x2021
    5496:	f7ff fb51 	bl	4b3c <bt_hci_cmd_send>
    549a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    549c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    54a0:	bd70      	pop	{r4, r5, r6, pc}

000054a2 <le_conn_param_req_reply>:
{
    54a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54a4:	4607      	mov	r7, r0
    54a6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    54a8:	210e      	movs	r1, #14
    54aa:	f242 0020 	movw	r0, #8224	; 0x2020
    54ae:	f7fe fde7 	bl	4080 <bt_hci_cmd_create>
	if (!buf) {
    54b2:	b1c0      	cbz	r0, 54e6 <le_conn_param_req_reply+0x44>
    54b4:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    54b6:	210e      	movs	r1, #14
    54b8:	3008      	adds	r0, #8
    54ba:	f014 fe3b 	bl	1a134 <net_buf_simple_add>
    54be:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    54c0:	220e      	movs	r2, #14
    54c2:	2100      	movs	r1, #0
    54c4:	f024 f908 	bl	296d8 <memset>
	cp->handle = sys_cpu_to_le16(handle);
    54c8:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    54ca:	882b      	ldrh	r3, [r5, #0]
    54cc:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    54ce:	886b      	ldrh	r3, [r5, #2]
    54d0:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    54d2:	88ab      	ldrh	r3, [r5, #4]
    54d4:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    54d6:	88eb      	ldrh	r3, [r5, #6]
    54d8:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    54da:	4631      	mov	r1, r6
    54dc:	f242 0020 	movw	r0, #8224	; 0x2020
    54e0:	f7ff fb2c 	bl	4b3c <bt_hci_cmd_send>
    54e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    54e6:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    54ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000054ec <le_conn_param_req_reply>:
{
    54ec:	b570      	push	{r4, r5, r6, lr}
    54ee:	b082      	sub	sp, #8
    54f0:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    54f2:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    54f4:	8814      	ldrh	r4, [r2, #0]
	interval_max = sys_le16_to_cpu(cmd->interval_max);
    54f6:	8893      	ldrh	r3, [r2, #4]
	latency = sys_le16_to_cpu(cmd->latency);
    54f8:	88d1      	ldrh	r1, [r2, #6]
	timeout = sys_le16_to_cpu(cmd->timeout);
    54fa:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    54fc:	9201      	str	r2, [sp, #4]
    54fe:	9100      	str	r1, [sp, #0]
    5500:	2200      	movs	r2, #0
    5502:	2102      	movs	r1, #2
    5504:	b2a0      	uxth	r0, r4
    5506:	f012 f927 	bl	17758 <ll_conn_update>
    550a:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    550c:	2103      	movs	r1, #3
    550e:	4630      	mov	r0, r6
    5510:	f007 f91c 	bl	c74c <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    5514:	b12d      	cbz	r5, 5522 <le_conn_param_req_reply+0x36>
    5516:	230c      	movs	r3, #12
    5518:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    551a:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    551e:	b002      	add	sp, #8
    5520:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    5522:	2300      	movs	r3, #0
    5524:	e7f8      	b.n	5518 <le_conn_param_req_reply+0x2c>
	...

00005528 <le_conn_param_req>:
{
    5528:	b530      	push	{r4, r5, lr}
    552a:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    552c:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    552e:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    5530:	885a      	ldrh	r2, [r3, #2]
    5532:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    5536:	889a      	ldrh	r2, [r3, #4]
    5538:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    553c:	88da      	ldrh	r2, [r3, #6]
    553e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    5542:	891b      	ldrh	r3, [r3, #8]
    5544:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    5548:	4620      	mov	r0, r4
    554a:	f001 f84d 	bl	65e8 <bt_conn_lookup_handle>
	if (!conn) {
    554e:	b178      	cbz	r0, 5570 <le_conn_param_req+0x48>
    5550:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
    5552:	4669      	mov	r1, sp
    5554:	f000 fdf6 	bl	6144 <le_param_req>
    5558:	b980      	cbnz	r0, 557c <le_conn_param_req+0x54>
		err = le_conn_param_neg_reply(handle,
    555a:	211e      	movs	r1, #30
    555c:	4620      	mov	r0, r4
    555e:	f7ff ff87 	bl	5470 <le_conn_param_neg_reply>
    5562:	4604      	mov	r4, r0
	bt_conn_unref(conn);
    5564:	4628      	mov	r0, r5
    5566:	f001 f8c3 	bl	66f0 <bt_conn_unref>
}
    556a:	4620      	mov	r0, r4
    556c:	b003      	add	sp, #12
    556e:	bd30      	pop	{r4, r5, pc}
		return le_conn_param_neg_reply(handle,
    5570:	2102      	movs	r1, #2
    5572:	4620      	mov	r0, r4
    5574:	f7ff ff7c 	bl	5470 <le_conn_param_neg_reply>
    5578:	4604      	mov	r4, r0
    557a:	e7f6      	b.n	556a <le_conn_param_req+0x42>
		err = le_conn_param_req_reply(handle, &param);
    557c:	4669      	mov	r1, sp
    557e:	4620      	mov	r0, r4
    5580:	f7ff ff8f 	bl	54a2 <le_conn_param_req_reply>
    5584:	4604      	mov	r4, r0
    5586:	e7ed      	b.n	5564 <le_conn_param_req+0x3c>

00005588 <le_conn_param_req>:
{
    5588:	b530      	push	{r4, r5, lr}
    558a:	b083      	sub	sp, #12
    558c:	4604      	mov	r4, r0
    558e:	460d      	mov	r5, r1
    5590:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5592:	4b14      	ldr	r3, [pc, #80]	; (55e4 <le_conn_param_req+0x5c>)
    5594:	e9d3 2300 	ldrd	r2, r3, [r3]
    5598:	2200      	movs	r2, #0
    559a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    559e:	4313      	orrs	r3, r2
    55a0:	d007      	beq.n	55b2 <le_conn_param_req+0x2a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    55a2:	4b11      	ldr	r3, [pc, #68]	; (55e8 <le_conn_param_req+0x60>)
    55a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    55a8:	f002 0220 	and.w	r2, r2, #32
    55ac:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    55ae:	4313      	orrs	r3, r2
    55b0:	d109      	bne.n	55c6 <le_conn_param_req+0x3e>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    55b2:	2300      	movs	r3, #0
    55b4:	9301      	str	r3, [sp, #4]
    55b6:	9300      	str	r3, [sp, #0]
    55b8:	221a      	movs	r2, #26
    55ba:	2102      	movs	r1, #2
    55bc:	4628      	mov	r0, r5
    55be:	f012 f8cb 	bl	17758 <ll_conn_update>
}
    55c2:	b003      	add	sp, #12
    55c4:	bd30      	pop	{r4, r5, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    55c6:	220a      	movs	r2, #10
    55c8:	2106      	movs	r1, #6
    55ca:	f007 f959 	bl	c880 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    55ce:	8005      	strh	r5, [r0, #0]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
    55d0:	88a3      	ldrh	r3, [r4, #4]
	sep->interval_min =
    55d2:	8043      	strh	r3, [r0, #2]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
    55d4:	88e3      	ldrh	r3, [r4, #6]
	sep->interval_max =
    55d6:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->payload.llctrl.ctrldata.conn_param_req.latency;
    55d8:	8923      	ldrh	r3, [r4, #8]
    55da:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
    55dc:	8963      	ldrh	r3, [r4, #10]
    55de:	8103      	strh	r3, [r0, #8]
    55e0:	e7ef      	b.n	55c2 <le_conn_param_req+0x3a>
    55e2:	bf00      	nop
    55e4:	2000ba60 	.word	0x2000ba60
    55e8:	2000ba68 	.word	0x2000ba68

000055ec <le_ltk_request>:
{
    55ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    55ee:	b085      	sub	sp, #20
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    55f0:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    55f2:	8820      	ldrh	r0, [r4, #0]
    55f4:	f000 fff8 	bl	65e8 <bt_conn_lookup_handle>
	if (!conn) {
    55f8:	2800      	cmp	r0, #0
    55fa:	d040      	beq.n	567e <le_ltk_request+0x92>
    55fc:	4605      	mov	r5, r0
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    55fe:	f8d4 2002 	ldr.w	r2, [r4, #2]
    5602:	f8d4 3006 	ldr.w	r3, [r4, #6]
    5606:	4313      	orrs	r3, r2
    5608:	d102      	bne.n	5610 <le_ltk_request+0x24>
    560a:	8963      	ldrh	r3, [r4, #10]
    560c:	2b00      	cmp	r3, #0
    560e:	d038      	beq.n	5682 <le_ltk_request+0x96>
	if (!conn->le.keys) {
    5610:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    5612:	2b00      	cmp	r3, #0
    5614:	d053      	beq.n	56be <le_ltk_request+0xd2>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    5616:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    5618:	b16b      	cbz	r3, 5636 <le_ltk_request+0x4a>
    561a:	899a      	ldrh	r2, [r3, #12]
    561c:	f012 0f20 	tst.w	r2, #32
    5620:	d009      	beq.n	5636 <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    5622:	f8d4 0002 	ldr.w	r0, [r4, #2]
    5626:	f8d4 1006 	ldr.w	r1, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    562a:	ea50 0201 	orrs.w	r2, r0, r1
    562e:	d102      	bne.n	5636 <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    5630:	8962      	ldrh	r2, [r4, #10]
    5632:	2a00      	cmp	r2, #0
    5634:	d052      	beq.n	56dc <le_ltk_request+0xf0>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    5636:	b16b      	cbz	r3, 5654 <le_ltk_request+0x68>
    5638:	899a      	ldrh	r2, [r3, #12]
    563a:	f012 0f01 	tst.w	r2, #1
    563e:	d009      	beq.n	5654 <le_ltk_request+0x68>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    5640:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
    5644:	f8d4 6002 	ldr.w	r6, [r4, #2]
    5648:	f8d4 7006 	ldr.w	r7, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    564c:	42b9      	cmp	r1, r7
    564e:	bf08      	it	eq
    5650:	42b0      	cmpeq	r0, r6
    5652:	d06a      	beq.n	572a <le_ltk_request+0x13e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    5654:	2102      	movs	r1, #2
    5656:	f242 001b 	movw	r0, #8219	; 0x201b
    565a:	f7fe fd11 	bl	4080 <bt_hci_cmd_create>
	if (!buf) {
    565e:	4606      	mov	r6, r0
    5660:	b150      	cbz	r0, 5678 <le_ltk_request+0x8c>
	cp = net_buf_add(buf, sizeof(*cp));
    5662:	2102      	movs	r1, #2
    5664:	3008      	adds	r0, #8
    5666:	f014 fd65 	bl	1a134 <net_buf_simple_add>
	cp->handle = evt->handle;
    566a:	8823      	ldrh	r3, [r4, #0]
    566c:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    566e:	4631      	mov	r1, r6
    5670:	f242 001b 	movw	r0, #8219	; 0x201b
    5674:	f7ff fa62 	bl	4b3c <bt_hci_cmd_send>
	bt_conn_unref(conn);
    5678:	4628      	mov	r0, r5
    567a:	f001 f839 	bl	66f0 <bt_conn_unref>
}
    567e:	b005      	add	sp, #20
    5680:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    5682:	4669      	mov	r1, sp
    5684:	f006 ff14 	bl	c4b0 <bt_smp_get_tk>
    5688:	2800      	cmp	r0, #0
    568a:	d0c1      	beq.n	5610 <le_ltk_request+0x24>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    568c:	2112      	movs	r1, #18
    568e:	f242 001a 	movw	r0, #8218	; 0x201a
    5692:	f7fe fcf5 	bl	4080 <bt_hci_cmd_create>
		if (!buf) {
    5696:	4606      	mov	r6, r0
    5698:	2800      	cmp	r0, #0
    569a:	d0ed      	beq.n	5678 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    569c:	2112      	movs	r1, #18
    569e:	3008      	adds	r0, #8
    56a0:	f014 fd48 	bl	1a134 <net_buf_simple_add>
		cp->handle = evt->handle;
    56a4:	8823      	ldrh	r3, [r4, #0]
    56a6:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    56aa:	2210      	movs	r2, #16
    56ac:	4669      	mov	r1, sp
    56ae:	f7fa fe07 	bl	2c0 <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    56b2:	4631      	mov	r1, r6
    56b4:	f242 001a 	movw	r0, #8218	; 0x201a
    56b8:	f7ff fa40 	bl	4b3c <bt_hci_cmd_send>
		goto done;
    56bc:	e7dc      	b.n	5678 <le_ltk_request+0x8c>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    56be:	f105 0648 	add.w	r6, r5, #72	; 0x48
    56c2:	4631      	mov	r1, r6
    56c4:	2020      	movs	r0, #32
    56c6:	f006 ff59 	bl	c57c <bt_keys_find>
    56ca:	6728      	str	r0, [r5, #112]	; 0x70
		if (!conn->le.keys) {
    56cc:	2800      	cmp	r0, #0
    56ce:	d1a2      	bne.n	5616 <le_ltk_request+0x2a>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    56d0:	4631      	mov	r1, r6
    56d2:	2001      	movs	r0, #1
    56d4:	f006 ff52 	bl	c57c <bt_keys_find>
    56d8:	6728      	str	r0, [r5, #112]	; 0x70
    56da:	e79c      	b.n	5616 <le_ltk_request+0x2a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    56dc:	2112      	movs	r1, #18
    56de:	f242 001a 	movw	r0, #8218	; 0x201a
    56e2:	f7fe fccd 	bl	4080 <bt_hci_cmd_create>
		if (!buf) {
    56e6:	4606      	mov	r6, r0
    56e8:	2800      	cmp	r0, #0
    56ea:	d0c5      	beq.n	5678 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    56ec:	2112      	movs	r1, #18
    56ee:	3008      	adds	r0, #8
    56f0:	f014 fd20 	bl	1a134 <net_buf_simple_add>
		cp->handle = evt->handle;
    56f4:	8823      	ldrh	r3, [r4, #0]
    56f6:	4604      	mov	r4, r0
    56f8:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    56fc:	6f29      	ldr	r1, [r5, #112]	; 0x70
    56fe:	79ca      	ldrb	r2, [r1, #7]
    5700:	311a      	adds	r1, #26
    5702:	4620      	mov	r0, r4
    5704:	f7fa fddc 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    5708:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    570a:	79d8      	ldrb	r0, [r3, #7]
    570c:	280f      	cmp	r0, #15
    570e:	d905      	bls.n	571c <le_ltk_request+0x130>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    5710:	4631      	mov	r1, r6
    5712:	f242 001a 	movw	r0, #8218	; 0x201a
    5716:	f7ff fa11 	bl	4b3c <bt_hci_cmd_send>
		goto done;
    571a:	e7ad      	b.n	5678 <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    571c:	f1c0 0210 	rsb	r2, r0, #16
    5720:	2100      	movs	r1, #0
    5722:	4420      	add	r0, r4
    5724:	f023 ffd8 	bl	296d8 <memset>
    5728:	e7f2      	b.n	5710 <le_ltk_request+0x124>
	    conn->le.keys->slave_ltk.ediv == evt->ediv) {
    572a:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
    572e:	8963      	ldrh	r3, [r4, #10]
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    5730:	429a      	cmp	r2, r3
    5732:	d18f      	bne.n	5654 <le_ltk_request+0x68>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    5734:	2112      	movs	r1, #18
    5736:	f242 001a 	movw	r0, #8218	; 0x201a
    573a:	f7fe fca1 	bl	4080 <bt_hci_cmd_create>
		if (!buf) {
    573e:	4606      	mov	r6, r0
    5740:	2800      	cmp	r0, #0
    5742:	d099      	beq.n	5678 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    5744:	2112      	movs	r1, #18
    5746:	3008      	adds	r0, #8
    5748:	f014 fcf4 	bl	1a134 <net_buf_simple_add>
		cp->handle = evt->handle;
    574c:	8823      	ldrh	r3, [r4, #0]
    574e:	4604      	mov	r4, r0
    5750:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    5754:	6f29      	ldr	r1, [r5, #112]	; 0x70
    5756:	79ca      	ldrb	r2, [r1, #7]
    5758:	317a      	adds	r1, #122	; 0x7a
    575a:	4620      	mov	r0, r4
    575c:	f7fa fdb0 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    5760:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    5762:	79d8      	ldrb	r0, [r3, #7]
    5764:	280f      	cmp	r0, #15
    5766:	d905      	bls.n	5774 <le_ltk_request+0x188>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    5768:	4631      	mov	r1, r6
    576a:	f242 001a 	movw	r0, #8218	; 0x201a
    576e:	f7ff f9e5 	bl	4b3c <bt_hci_cmd_send>
		goto done;
    5772:	e781      	b.n	5678 <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    5774:	f1c0 0210 	rsb	r2, r0, #16
    5778:	2100      	movs	r1, #0
    577a:	4420      	add	r0, r4
    577c:	f023 ffac 	bl	296d8 <memset>
    5780:	e7f2      	b.n	5768 <le_ltk_request+0x17c>
	...

00005784 <le_ltk_request>:
{
    5784:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5786:	4b15      	ldr	r3, [pc, #84]	; (57dc <le_ltk_request+0x58>)
    5788:	e9d3 4500 	ldrd	r4, r5, [r3]
    578c:	2400      	movs	r4, #0
    578e:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    5792:	ea54 0305 	orrs.w	r3, r4, r5
    5796:	d008      	beq.n	57aa <le_ltk_request+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    5798:	4b11      	ldr	r3, [pc, #68]	; (57e0 <le_ltk_request+0x5c>)
    579a:	e9d3 4500 	ldrd	r4, r5, [r3]
    579e:	f004 0410 	and.w	r4, r4, #16
    57a2:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    57a4:	ea54 0305 	orrs.w	r3, r4, r5
    57a8:	d100      	bne.n	57ac <le_ltk_request+0x28>
    57aa:	bd70      	pop	{r4, r5, r6, pc}
    57ac:	4613      	mov	r3, r2
    57ae:	460d      	mov	r5, r1
    57b0:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    57b2:	220c      	movs	r2, #12
    57b4:	2105      	movs	r1, #5
    57b6:	4618      	mov	r0, r3
    57b8:	f007 f862 	bl	c880 <meta_evt>
    57bc:	4606      	mov	r6, r0
	sep->handle = sys_cpu_to_le16(handle);
    57be:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    57c2:	2208      	movs	r2, #8
    57c4:	1d21      	adds	r1, r4, #4
    57c6:	f7fa fd7b 	bl	2c0 <memcpy>
	memcpy(&sep->ediv, pdu_data->payload.llctrl.ctrldata.enc_req.ediv,
    57ca:	2202      	movs	r2, #2
    57cc:	f104 010c 	add.w	r1, r4, #12
    57d0:	f106 000a 	add.w	r0, r6, #10
    57d4:	f7fa fd74 	bl	2c0 <memcpy>
    57d8:	e7e7      	b.n	57aa <le_ltk_request+0x26>
    57da:	bf00      	nop
    57dc:	2000ba60 	.word	0x2000ba60
    57e0:	2000ba68 	.word	0x2000ba68

000057e4 <hci_le_meta_event>:
{
    57e4:	b538      	push	{r3, r4, r5, lr}
    57e6:	4604      	mov	r4, r0
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    57e8:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*evt));
    57ec:	2101      	movs	r1, #1
    57ee:	f014 fcee 	bl	1a1ce <net_buf_simple_pull>
	switch (evt->subevent) {
    57f2:	782b      	ldrb	r3, [r5, #0]
    57f4:	3b01      	subs	r3, #1
    57f6:	2b0b      	cmp	r3, #11
    57f8:	d82e      	bhi.n	5858 <hci_le_meta_event+0x74>
    57fa:	e8df f003 	tbb	[pc, r3]
    57fe:	2a06      	.short	0x2a06
    5800:	121e0e0a 	.word	0x121e0e0a
    5804:	2d262216 	.word	0x2d262216
    5808:	1a2d      	.short	0x1a2d
		le_conn_complete(buf);
    580a:	4620      	mov	r0, r4
    580c:	f7ff fc14 	bl	5038 <le_conn_complete>
		break;
    5810:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_update_complete(buf);
    5812:	4620      	mov	r0, r4
    5814:	f7fe fb52 	bl	3ebc <le_conn_update_complete>
		break;
    5818:	bd38      	pop	{r3, r4, r5, pc}
		le_remote_feat_complete(buf);
    581a:	4620      	mov	r0, r4
    581c:	f7ff fd66 	bl	52ec <le_remote_feat_complete>
		break;
    5820:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_param_req(buf);
    5822:	4620      	mov	r0, r4
    5824:	f7ff fe80 	bl	5528 <le_conn_param_req>
		break;
    5828:	bd38      	pop	{r3, r4, r5, pc}
		le_data_len_change(buf);
    582a:	4620      	mov	r0, r4
    582c:	f7fe fafc 	bl	3e28 <le_data_len_change>
		break;
    5830:	bd38      	pop	{r3, r4, r5, pc}
		le_phy_update_complete(buf);
    5832:	4620      	mov	r0, r4
    5834:	f7ff fdde 	bl	53f4 <le_phy_update_complete>
		break;
    5838:	bd38      	pop	{r3, r4, r5, pc}
		le_ltk_request(buf);
    583a:	4620      	mov	r0, r4
    583c:	f7ff fed6 	bl	55ec <le_ltk_request>
		break;
    5840:	bd38      	pop	{r3, r4, r5, pc}
		le_pkey_complete(buf);
    5842:	4620      	mov	r0, r4
    5844:	f7fe f9f0 	bl	3c28 <le_pkey_complete>
		break;
    5848:	bd38      	pop	{r3, r4, r5, pc}
		le_dhkey_complete(buf);
    584a:	4620      	mov	r0, r4
    584c:	f7fe f916 	bl	3a7c <le_dhkey_complete>
		break;
    5850:	bd38      	pop	{r3, r4, r5, pc}
		le_adv_report(buf);
    5852:	4620      	mov	r0, r4
    5854:	f7ff fb3c 	bl	4ed0 <le_adv_report>
    5858:	bd38      	pop	{r3, r4, r5, pc}

0000585a <hci_event>:
{
    585a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    585c:	6885      	ldr	r5, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    585e:	782b      	ldrb	r3, [r5, #0]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    5860:	2b0e      	cmp	r3, #14
    5862:	d316      	bcc.n	5892 <hci_event+0x38>
    5864:	2b0f      	cmp	r3, #15
    5866:	d901      	bls.n	586c <hci_event+0x12>
    5868:	2b13      	cmp	r3, #19
    586a:	d112      	bne.n	5892 <hci_event+0x38>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
#if defined(CONFIG_BT_CONN)
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
#endif
		return true;
    586c:	2301      	movs	r3, #1
    586e:	b993      	cbnz	r3, 5896 <hci_event+0x3c>
    5870:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    5872:	2102      	movs	r1, #2
    5874:	3008      	adds	r0, #8
    5876:	f014 fcaa 	bl	1a1ce <net_buf_simple_pull>
	switch (hdr->evt) {
    587a:	782b      	ldrb	r3, [r5, #0]
    587c:	2b08      	cmp	r3, #8
    587e:	d019      	beq.n	58b4 <hci_event+0x5a>
    5880:	d90f      	bls.n	58a2 <hci_event+0x48>
    5882:	2b30      	cmp	r3, #48	; 0x30
    5884:	d01a      	beq.n	58bc <hci_event+0x62>
    5886:	2b3e      	cmp	r3, #62	; 0x3e
    5888:	d110      	bne.n	58ac <hci_event+0x52>
		hci_le_meta_event(buf);
    588a:	4620      	mov	r0, r4
    588c:	f7ff ffaa 	bl	57e4 <hci_le_meta_event>
		break;
    5890:	e00c      	b.n	58ac <hci_event+0x52>
	default:
		return false;
    5892:	2300      	movs	r3, #0
    5894:	e7eb      	b.n	586e <hci_event+0x14>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    5896:	4040      	eors	r0, r0
    5898:	f380 8811 	msr	BASEPRI, r0
    589c:	f04f 0004 	mov.w	r0, #4
    58a0:	df02      	svc	2
	switch (hdr->evt) {
    58a2:	2b05      	cmp	r3, #5
    58a4:	d102      	bne.n	58ac <hci_event+0x52>
		hci_disconn_complete(buf);
    58a6:	4620      	mov	r0, r4
    58a8:	f7ff fa54 	bl	4d54 <hci_disconn_complete>
	net_buf_unref(buf);
    58ac:	4620      	mov	r0, r4
    58ae:	f014 fbf5 	bl	1a09c <net_buf_unref>
    58b2:	bd38      	pop	{r3, r4, r5, pc}
		hci_encrypt_change(buf);
    58b4:	4620      	mov	r0, r4
    58b6:	f7fe fa56 	bl	3d66 <hci_encrypt_change>
		break;
    58ba:	e7f7      	b.n	58ac <hci_event+0x52>
		hci_encrypt_key_refresh_complete(buf);
    58bc:	4620      	mov	r0, r4
    58be:	f7fe fa7a 	bl	3db6 <hci_encrypt_key_refresh_complete>
		break;
    58c2:	e7f3      	b.n	58ac <hci_event+0x52>

000058c4 <send_cmd>:
{
    58c4:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    58c6:	2100      	movs	r1, #0
    58c8:	4820      	ldr	r0, [pc, #128]	; (594c <send_cmd+0x88>)
    58ca:	f014 fbba 	bl	1a042 <net_buf_get>
	BT_ASSERT(buf);
    58ce:	b1d0      	cbz	r0, 5906 <send_cmd+0x42>
    58d0:	4604      	mov	r4, r0
    58d2:	4d1f      	ldr	r5, [pc, #124]	; (5950 <send_cmd+0x8c>)
    58d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    58d8:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    58dc:	f022 ff3c 	bl	28758 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    58e0:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    58e4:	b120      	cbz	r0, 58f0 <send_cmd+0x2c>
		net_buf_unref(bt_dev.sent_cmd);
    58e6:	f014 fbd9 	bl	1a09c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    58ea:	2200      	movs	r2, #0
    58ec:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    58f0:	4620      	mov	r0, r4
    58f2:	f014 fbef 	bl	1a0d4 <net_buf_ref>
    58f6:	4b16      	ldr	r3, [pc, #88]	; (5950 <send_cmd+0x8c>)
    58f8:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
	err = bt_send(buf);
    58fc:	4620      	mov	r0, r4
    58fe:	f7ff f913 	bl	4b28 <bt_send>
	if (err) {
    5902:	b930      	cbnz	r0, 5912 <send_cmd+0x4e>
    5904:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    5906:	4040      	eors	r0, r0
    5908:	f380 8811 	msr	BASEPRI, r0
    590c:	f04f 0004 	mov.w	r0, #4
    5910:	df02      	svc	2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5912:	4d0f      	ldr	r5, [pc, #60]	; (5950 <send_cmd+0x8c>)
    5914:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    5918:	f022 ff0b 	bl	28732 <_impl_k_sem_give>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    591c:	f104 0310 	add.w	r3, r4, #16
    5920:	89e2      	ldrh	r2, [r4, #14]
    5922:	4413      	add	r3, r2
    5924:	3303      	adds	r3, #3
    5926:	f023 0303 	bic.w	r3, r3, #3
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    592a:	2200      	movs	r2, #0
    592c:	211f      	movs	r1, #31
    592e:	8858      	ldrh	r0, [r3, #2]
    5930:	f7fe fb10 	bl	3f54 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    5934:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    5938:	f014 fbb0 	bl	1a09c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    593c:	2300      	movs	r3, #0
    593e:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(buf);
    5942:	4620      	mov	r0, r4
    5944:	f014 fbaa 	bl	1a09c <net_buf_unref>
}
    5948:	e7dc      	b.n	5904 <send_cmd+0x40>
    594a:	bf00      	nop
    594c:	2000b844 	.word	0x2000b844
    5950:	2000b770 	.word	0x2000b770

00005954 <process_events>:
{
    5954:	b538      	push	{r3, r4, r5, lr}
    5956:	4604      	mov	r4, r0
    5958:	460d      	mov	r5, r1
	for (; count; ev++, count--) {
    595a:	e003      	b.n	5964 <process_events+0x10>
				send_cmd();
    595c:	f7ff ffb2 	bl	58c4 <send_cmd>
	for (; count; ev++, count--) {
    5960:	3414      	adds	r4, #20
    5962:	3d01      	subs	r5, #1
    5964:	b1a5      	cbz	r5, 5990 <process_events+0x3c>
		switch (ev->state) {
    5966:	7b63      	ldrb	r3, [r4, #13]
    5968:	091b      	lsrs	r3, r3, #4
    596a:	2b04      	cmp	r3, #4
    596c:	d1f8      	bne.n	5960 <process_events+0xc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    596e:	7b23      	ldrb	r3, [r4, #12]
    5970:	2b00      	cmp	r3, #0
    5972:	d0f3      	beq.n	595c <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    5974:	2b01      	cmp	r3, #1
    5976:	d006      	beq.n	5986 <process_events+0x32>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    5978:	2b02      	cmp	r3, #2
    597a:	d1f1      	bne.n	5960 <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    597c:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
    597e:	382c      	subs	r0, #44	; 0x2c
    5980:	f001 f9c8 	bl	6d14 <bt_conn_process_tx>
    5984:	e7ec      	b.n	5960 <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    5986:	6920      	ldr	r0, [r4, #16]
					bt_conn_notify_tx(conn);
    5988:	381c      	subs	r0, #28
    598a:	f000 fd65 	bl	6458 <bt_conn_notify_tx>
    598e:	e7e7      	b.n	5960 <process_events+0xc>
}
    5990:	bd38      	pop	{r3, r4, r5, pc}
	...

00005994 <hci_tx_thread>:
{
    5994:	b538      	push	{r3, r4, r5, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    5996:	4c0f      	ldr	r4, [pc, #60]	; (59d4 <hci_tx_thread+0x40>)
    5998:	7b63      	ldrb	r3, [r4, #13]
    599a:	f36f 1307 	bfc	r3, #4, #4
    599e:	7363      	strb	r3, [r4, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    59a0:	f104 0014 	add.w	r0, r4, #20
    59a4:	f000 feca 	bl	673c <bt_conn_prepare_events>
    59a8:	1c45      	adds	r5, r0, #1
		err = k_poll(events, ev_count, K_FOREVER);
    59aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    59ae:	4629      	mov	r1, r5
    59b0:	4620      	mov	r0, r4
    59b2:	f022 f81d 	bl	279f0 <k_poll>
		BT_ASSERT(err == 0);
    59b6:	b930      	cbnz	r0, 59c6 <hci_tx_thread+0x32>
		process_events(events, ev_count);
    59b8:	4629      	mov	r1, r5
    59ba:	4806      	ldr	r0, [pc, #24]	; (59d4 <hci_tx_thread+0x40>)
    59bc:	f7ff ffca 	bl	5954 <process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    59c0:	f022 fd5e 	bl	28480 <_impl_k_yield>
    59c4:	e7e7      	b.n	5996 <hci_tx_thread+0x2>
		BT_ASSERT(err == 0);
    59c6:	4040      	eors	r0, r0
    59c8:	f380 8811 	msr	BASEPRI, r0
    59cc:	f04f 0004 	mov.w	r0, #4
    59d0:	df02      	svc	2
    59d2:	bf00      	nop
    59d4:	2000b858 	.word	0x2000b858

000059d8 <bt_recv>:
{
    59d8:	b510      	push	{r4, lr}
    59da:	4604      	mov	r4, r0
	pool = net_buf_pool_get(buf->pool_id);
    59dc:	7980      	ldrb	r0, [r0, #6]
    59de:	f014 fae3 	bl	19fa8 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    59e2:	8ac3      	ldrh	r3, [r0, #22]
    59e4:	2b03      	cmp	r3, #3
    59e6:	d910      	bls.n	5a0a <bt_recv+0x32>
    59e8:	f104 0310 	add.w	r3, r4, #16
    59ec:	89e2      	ldrh	r2, [r4, #14]
    59ee:	4413      	add	r3, r2
    59f0:	3303      	adds	r3, #3
    59f2:	f023 0303 	bic.w	r3, r3, #3
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    59f6:	781b      	ldrb	r3, [r3, #0]
	switch (bt_buf_get_type(buf)) {
    59f8:	2b01      	cmp	r3, #1
    59fa:	d00c      	beq.n	5a16 <bt_recv+0x3e>
    59fc:	2b03      	cmp	r3, #3
    59fe:	d10f      	bne.n	5a20 <bt_recv+0x48>
		hci_acl(buf);
    5a00:	4620      	mov	r0, r4
    5a02:	f7fe f949 	bl	3c98 <hci_acl>
		return 0;
    5a06:	2000      	movs	r0, #0
    5a08:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    5a0a:	4620      	mov	r0, r4
    5a0c:	f014 fb46 	bl	1a09c <net_buf_unref>
		return -EINVAL;
    5a10:	f06f 0015 	mvn.w	r0, #21
    5a14:	bd10      	pop	{r4, pc}
		hci_event(buf);
    5a16:	4620      	mov	r0, r4
    5a18:	f7ff ff1f 	bl	585a <hci_event>
		return 0;
    5a1c:	2000      	movs	r0, #0
    5a1e:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    5a20:	4620      	mov	r0, r4
    5a22:	f014 fb3b 	bl	1a09c <net_buf_unref>
		return -EINVAL;
    5a26:	f06f 0015 	mvn.w	r0, #21
}
    5a2a:	bd10      	pop	{r4, pc}

00005a2c <bt_recv_prio>:
{
    5a2c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    5a2e:	6885      	ldr	r5, [r0, #8]
    5a30:	f100 0310 	add.w	r3, r0, #16
    5a34:	89c2      	ldrh	r2, [r0, #14]
    5a36:	4413      	add	r3, r2
    5a38:	3303      	adds	r3, #3
    5a3a:	f023 0303 	bic.w	r3, r3, #3
    5a3e:	781b      	ldrb	r3, [r3, #0]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5a40:	2b01      	cmp	r3, #1
    5a42:	d120      	bne.n	5a86 <bt_recv_prio+0x5a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5a44:	8983      	ldrh	r3, [r0, #12]
    5a46:	2b01      	cmp	r3, #1
    5a48:	d923      	bls.n	5a92 <bt_recv_prio+0x66>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    5a4a:	782b      	ldrb	r3, [r5, #0]
	switch (evt) {
    5a4c:	2b0e      	cmp	r3, #14
    5a4e:	d326      	bcc.n	5a9e <bt_recv_prio+0x72>
    5a50:	2b0f      	cmp	r3, #15
    5a52:	d901      	bls.n	5a58 <bt_recv_prio+0x2c>
    5a54:	2b13      	cmp	r3, #19
    5a56:	d122      	bne.n	5a9e <bt_recv_prio+0x72>
		return true;
    5a58:	2301      	movs	r3, #1
    5a5a:	b313      	cbz	r3, 5aa2 <bt_recv_prio+0x76>
    5a5c:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    5a5e:	2102      	movs	r1, #2
    5a60:	3008      	adds	r0, #8
    5a62:	f014 fbb4 	bl	1a1ce <net_buf_simple_pull>
	switch (hdr->evt) {
    5a66:	782b      	ldrb	r3, [r5, #0]
    5a68:	2b0f      	cmp	r3, #15
    5a6a:	d028      	beq.n	5abe <bt_recv_prio+0x92>
    5a6c:	2b13      	cmp	r3, #19
    5a6e:	d02a      	beq.n	5ac6 <bt_recv_prio+0x9a>
    5a70:	2b0e      	cmp	r3, #14
    5a72:	d01c      	beq.n	5aae <bt_recv_prio+0x82>
		net_buf_unref(buf);
    5a74:	4620      	mov	r0, r4
    5a76:	f014 fb11 	bl	1a09c <net_buf_unref>
		BT_ASSERT(0);
    5a7a:	4040      	eors	r0, r0
    5a7c:	f380 8811 	msr	BASEPRI, r0
    5a80:	f04f 0004 	mov.w	r0, #4
    5a84:	df02      	svc	2
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5a86:	4040      	eors	r0, r0
    5a88:	f380 8811 	msr	BASEPRI, r0
    5a8c:	f04f 0004 	mov.w	r0, #4
    5a90:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5a92:	4040      	eors	r0, r0
    5a94:	f380 8811 	msr	BASEPRI, r0
    5a98:	f04f 0004 	mov.w	r0, #4
    5a9c:	df02      	svc	2
		return false;
    5a9e:	2300      	movs	r3, #0
    5aa0:	e7db      	b.n	5a5a <bt_recv_prio+0x2e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    5aa2:	4040      	eors	r0, r0
    5aa4:	f380 8811 	msr	BASEPRI, r0
    5aa8:	f04f 0004 	mov.w	r0, #4
    5aac:	df02      	svc	2
		hci_cmd_complete(buf);
    5aae:	4620      	mov	r0, r4
    5ab0:	f7fe fa70 	bl	3f94 <hci_cmd_complete>
	net_buf_unref(buf);
    5ab4:	4620      	mov	r0, r4
    5ab6:	f014 faf1 	bl	1a09c <net_buf_unref>
}
    5aba:	2000      	movs	r0, #0
    5abc:	bd38      	pop	{r3, r4, r5, pc}
		hci_cmd_status(buf);
    5abe:	4620      	mov	r0, r4
    5ac0:	f7fe fa80 	bl	3fc4 <hci_cmd_status>
		break;
    5ac4:	e7f6      	b.n	5ab4 <bt_recv_prio+0x88>
		hci_num_completed_packets(buf);
    5ac6:	4620      	mov	r0, r4
    5ac8:	f7fe fa92 	bl	3ff0 <hci_num_completed_packets>
		break;
    5acc:	e7f2      	b.n	5ab4 <bt_recv_prio+0x88>
	...

00005ad0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    5ad0:	4b0a      	ldr	r3, [pc, #40]	; (5afc <bt_hci_driver_register+0x2c>)
    5ad2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    5ad6:	b943      	cbnz	r3, 5aea <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
    5ad8:	6883      	ldr	r3, [r0, #8]
    5ada:	b14b      	cbz	r3, 5af0 <bt_hci_driver_register+0x20>
    5adc:	68c3      	ldr	r3, [r0, #12]
    5ade:	b153      	cbz	r3, 5af6 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
    5ae0:	4b06      	ldr	r3, [pc, #24]	; (5afc <bt_hci_driver_register+0x2c>)
    5ae2:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
	return 0;
    5ae6:	2000      	movs	r0, #0
    5ae8:	4770      	bx	lr
		return -EALREADY;
    5aea:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5aee:	4770      	bx	lr
		return -EINVAL;
    5af0:	f06f 0015 	mvn.w	r0, #21
    5af4:	4770      	bx	lr
    5af6:	f06f 0015 	mvn.w	r0, #21
}
    5afa:	4770      	bx	lr
    5afc:	2000b770 	.word	0x2000b770

00005b00 <bt_enable>:
{
    5b00:	b530      	push	{r4, r5, lr}
    5b02:	b087      	sub	sp, #28
	if (!bt_dev.drv) {
    5b04:	4b29      	ldr	r3, [pc, #164]	; (5bac <bt_enable+0xac>)
    5b06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    5b0a:	2b00      	cmp	r3, #0
    5b0c:	d047      	beq.n	5b9e <bt_enable+0x9e>
    5b0e:	4b28      	ldr	r3, [pc, #160]	; (5bb0 <bt_enable+0xb0>)
    5b10:	f3bf 8f5b 	dmb	ish
    5b14:	e853 2f00 	ldrex	r2, [r3]
    5b18:	f042 0101 	orr.w	r1, r2, #1
    5b1c:	e843 1400 	strex	r4, r1, [r3]
    5b20:	2c00      	cmp	r4, #0
    5b22:	d1f7      	bne.n	5b14 <bt_enable+0x14>
    5b24:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    5b28:	f012 0f01 	tst.w	r2, #1
    5b2c:	d13a      	bne.n	5ba4 <bt_enable+0xa4>
    5b2e:	4604      	mov	r4, r0
	ready_cb = cb;
    5b30:	4b20      	ldr	r3, [pc, #128]	; (5bb4 <bt_enable+0xb4>)
    5b32:	6018      	str	r0, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    5b34:	2300      	movs	r3, #0
    5b36:	9305      	str	r3, [sp, #20]
    5b38:	9304      	str	r3, [sp, #16]
    5b3a:	f06f 0208 	mvn.w	r2, #8
    5b3e:	9203      	str	r2, [sp, #12]
    5b40:	9302      	str	r3, [sp, #8]
    5b42:	9301      	str	r3, [sp, #4]
    5b44:	9300      	str	r3, [sp, #0]
    5b46:	4b1c      	ldr	r3, [pc, #112]	; (5bb8 <bt_enable+0xb8>)
    5b48:	f44f 7220 	mov.w	r2, #640	; 0x280
    5b4c:	491b      	ldr	r1, [pc, #108]	; (5bbc <bt_enable+0xbc>)
    5b4e:	481c      	ldr	r0, [pc, #112]	; (5bc0 <bt_enable+0xc0>)
    5b50:	f023 f86e 	bl	28c30 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    5b54:	4b15      	ldr	r3, [pc, #84]	; (5bac <bt_enable+0xac>)
    5b56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    5b5a:	689b      	ldr	r3, [r3, #8]
    5b5c:	4798      	blx	r3
	if (err) {
    5b5e:	4605      	mov	r5, r0
    5b60:	b980      	cbnz	r0, 5b84 <bt_enable+0x84>
	if (!cb) {
    5b62:	b194      	cbz	r4, 5b8a <bt_enable+0x8a>
    5b64:	4b17      	ldr	r3, [pc, #92]	; (5bc4 <bt_enable+0xc4>)
    5b66:	f3bf 8f5b 	dmb	ish
    5b6a:	e853 2f00 	ldrex	r2, [r3]
    5b6e:	f042 0101 	orr.w	r1, r2, #1
    5b72:	e843 1000 	strex	r0, r1, [r3]
    5b76:	2800      	cmp	r0, #0
    5b78:	d1f7      	bne.n	5b6a <bt_enable+0x6a>
    5b7a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5b7e:	f012 0f01 	tst.w	r2, #1
    5b82:	d006      	beq.n	5b92 <bt_enable+0x92>
}
    5b84:	4628      	mov	r0, r5
    5b86:	b007      	add	sp, #28
    5b88:	bd30      	pop	{r4, r5, pc}
		return bt_init();
    5b8a:	f7ff f8bb 	bl	4d04 <bt_init>
    5b8e:	4605      	mov	r5, r0
    5b90:	e7f8      	b.n	5b84 <bt_enable+0x84>
		k_queue_append(&work_q->queue, work);
    5b92:	f1a3 0108 	sub.w	r1, r3, #8
    5b96:	480c      	ldr	r0, [pc, #48]	; (5bc8 <bt_enable+0xc8>)
    5b98:	f022 fa34 	bl	28004 <k_queue_append>
    5b9c:	e7f2      	b.n	5b84 <bt_enable+0x84>
		return -ENODEV;
    5b9e:	f06f 0512 	mvn.w	r5, #18
    5ba2:	e7ef      	b.n	5b84 <bt_enable+0x84>
		return -EALREADY;
    5ba4:	f06f 0577 	mvn.w	r5, #119	; 0x77
    5ba8:	e7ec      	b.n	5b84 <bt_enable+0x84>
    5baa:	bf00      	nop
    5bac:	2000b770 	.word	0x2000b770
    5bb0:	2000b7e0 	.word	0x2000b7e0
    5bb4:	20000220 	.word	0x20000220
    5bb8:	00005995 	.word	0x00005995
    5bbc:	20003b10 	.word	0x20003b10
    5bc0:	20000228 	.word	0x20000228
    5bc4:	2000b7dc 	.word	0x2000b7dc
    5bc8:	20002a70 	.word	0x20002a70

00005bcc <bt_addr_le_is_bonded>:
{
    5bcc:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(addr);
    5bce:	f006 fd51 	bl	c674 <bt_keys_find_addr>
		return keys && keys->keys;
    5bd2:	b118      	cbz	r0, 5bdc <bt_addr_le_is_bonded+0x10>
    5bd4:	8983      	ldrh	r3, [r0, #12]
    5bd6:	b91b      	cbnz	r3, 5be0 <bt_addr_le_is_bonded+0x14>
    5bd8:	2000      	movs	r0, #0
    5bda:	bd08      	pop	{r3, pc}
    5bdc:	2000      	movs	r0, #0
    5bde:	bd08      	pop	{r3, pc}
    5be0:	2001      	movs	r0, #1
}
    5be2:	bd08      	pop	{r3, pc}

00005be4 <bt_le_adv_start>:

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    5be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5be8:	4605      	mov	r5, r0
    5bea:	460c      	mov	r4, r1
    5bec:	4617      	mov	r7, r2
    5bee:	461e      	mov	r6, r3
	struct net_buf *buf;
	struct bt_hci_cp_le_set_adv_param *set_param;
	int err;

	if (!valid_adv_param(param)) {
    5bf0:	f7fd ff88 	bl	3b04 <valid_adv_param>
    5bf4:	2800      	cmp	r0, #0
    5bf6:	f000 808d 	beq.w	5d14 <bt_le_adv_start+0x130>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5bfa:	f3bf 8f5b 	dmb	ish
    5bfe:	4b4b      	ldr	r3, [pc, #300]	; (5d2c <bt_le_adv_start+0x148>)
    5c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5c02:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    5c06:	f013 0f20 	tst.w	r3, #32
    5c0a:	f040 8086 	bne.w	5d1a <bt_le_adv_start+0x136>
		return -EALREADY;
	}

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    5c0e:	463a      	mov	r2, r7
    5c10:	4621      	mov	r1, r4
    5c12:	f242 0008 	movw	r0, #8200	; 0x2008
    5c16:	f7fe fe52 	bl	48be <set_ad>
	if (err) {
    5c1a:	4604      	mov	r4, r0
    5c1c:	2800      	cmp	r0, #0
    5c1e:	d13b      	bne.n	5c98 <bt_le_adv_start+0xb4>
	 * If sd was not provided but we enable connectable undirected
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5c20:	2e00      	cmp	r6, #0
    5c22:	d03c      	beq.n	5c9e <bt_le_adv_start+0xba>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    5c24:	9a06      	ldr	r2, [sp, #24]
    5c26:	4631      	mov	r1, r6
    5c28:	f242 0009 	movw	r0, #8201	; 0x2009
    5c2c:	f7fe fe47 	bl	48be <set_ad>
		if (err) {
    5c30:	4604      	mov	r4, r0
    5c32:	bb88      	cbnz	r0, 5c98 <bt_le_adv_start+0xb4>
			return err;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM,
    5c34:	210f      	movs	r1, #15
    5c36:	f242 0006 	movw	r0, #8198	; 0x2006
    5c3a:	f7fe fa21 	bl	4080 <bt_hci_cmd_create>
				sizeof(*set_param));
	if (!buf) {
    5c3e:	4680      	mov	r8, r0
    5c40:	2800      	cmp	r0, #0
    5c42:	d06d      	beq.n	5d20 <bt_le_adv_start+0x13c>
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
    5c44:	210f      	movs	r1, #15
    5c46:	3008      	adds	r0, #8
    5c48:	f014 fa74 	bl	1a134 <net_buf_simple_add>
    5c4c:	4607      	mov	r7, r0

	memset(set_param, 0, sizeof(*set_param));
    5c4e:	220f      	movs	r2, #15
    5c50:	2100      	movs	r1, #0
    5c52:	f023 fd41 	bl	296d8 <memset>
	set_param->min_interval = sys_cpu_to_le16(param->interval_min);
    5c56:	886b      	ldrh	r3, [r5, #2]
    5c58:	803b      	strh	r3, [r7, #0]
	set_param->max_interval = sys_cpu_to_le16(param->interval_max);
    5c5a:	88ab      	ldrh	r3, [r5, #4]
    5c5c:	807b      	strh	r3, [r7, #2]
	set_param->channel_map  = 0x07;
    5c5e:	2307      	movs	r3, #7
    5c60:	737b      	strb	r3, [r7, #13]

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    5c62:	782b      	ldrb	r3, [r5, #0]
    5c64:	f013 0f01 	tst.w	r3, #1
    5c68:	d11e      	bne.n	5ca8 <bt_le_adv_start+0xc4>
			set_param->own_addr_type = bt_dev.id_addr.type;
		}

		set_param->type = BT_LE_ADV_IND;
	} else {
		if (param->own_addr) {
    5c6a:	68a8      	ldr	r0, [r5, #8]
    5c6c:	b378      	cbz	r0, 5cce <bt_le_adv_start+0xea>
			/* Only NRPA is allowed */
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    5c6e:	7943      	ldrb	r3, [r0, #5]
    5c70:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    5c74:	d157      	bne.n	5d26 <bt_le_adv_start+0x142>
				return -EINVAL;
			}

			err = set_random_address(param->own_addr);
    5c76:	f7fe fd0b 	bl	4690 <set_random_address>
    5c7a:	4604      	mov	r4, r0
		} else {
			err = le_set_private_addr();
		}

		if (err) {
    5c7c:	bb5c      	cbnz	r4, 5cd6 <bt_le_adv_start+0xf2>
			net_buf_unref(buf);
			return err;
		}

		set_param->own_addr_type = BT_ADDR_LE_RANDOM;
    5c7e:	2301      	movs	r3, #1
    5c80:	717b      	strb	r3, [r7, #5]

		if (sd) {
    5c82:	b366      	cbz	r6, 5cde <bt_le_adv_start+0xfa>
			set_param->type = BT_LE_ADV_SCAN_IND;
    5c84:	2302      	movs	r3, #2
    5c86:	713b      	strb	r3, [r7, #4]
		} else {
			set_param->type = BT_LE_ADV_NONCONN_IND;
		}
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    5c88:	2200      	movs	r2, #0
    5c8a:	4641      	mov	r1, r8
    5c8c:	f242 0006 	movw	r0, #8198	; 0x2006
    5c90:	f7fe fa22 	bl	40d8 <bt_hci_cmd_send_sync>
	if (err) {
    5c94:	4604      	mov	r4, r0
    5c96:	b328      	cbz	r0, 5ce4 <bt_le_adv_start+0x100>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    5c98:	4620      	mov	r0, r4
    5c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5c9e:	782b      	ldrb	r3, [r5, #0]
    5ca0:	f013 0f01 	tst.w	r3, #1
    5ca4:	d0c6      	beq.n	5c34 <bt_le_adv_start+0x50>
    5ca6:	e7bd      	b.n	5c24 <bt_le_adv_start+0x40>
    5ca8:	f3bf 8f5b 	dmb	ish
    5cac:	4b1f      	ldr	r3, [pc, #124]	; (5d2c <bt_le_adv_start+0x148>)
    5cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5cb0:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(bt_dev.flags,
    5cb4:	f013 0f04 	tst.w	r3, #4
    5cb8:	d105      	bne.n	5cc6 <bt_le_adv_start+0xe2>
			set_param->own_addr_type = bt_dev.id_addr.type;
    5cba:	4b1c      	ldr	r3, [pc, #112]	; (5d2c <bt_le_adv_start+0x148>)
    5cbc:	781b      	ldrb	r3, [r3, #0]
    5cbe:	717b      	strb	r3, [r7, #5]
		set_param->type = BT_LE_ADV_IND;
    5cc0:	2300      	movs	r3, #0
    5cc2:	713b      	strb	r3, [r7, #4]
    5cc4:	e7e0      	b.n	5c88 <bt_le_adv_start+0xa4>
				set_random_address(&bt_dev.id_addr.a);
    5cc6:	481a      	ldr	r0, [pc, #104]	; (5d30 <bt_le_adv_start+0x14c>)
    5cc8:	f7fe fce2 	bl	4690 <set_random_address>
    5ccc:	e7f5      	b.n	5cba <bt_le_adv_start+0xd6>
			err = le_set_private_addr();
    5cce:	f7fe fd0f 	bl	46f0 <le_set_private_addr>
    5cd2:	4604      	mov	r4, r0
    5cd4:	e7d2      	b.n	5c7c <bt_le_adv_start+0x98>
			net_buf_unref(buf);
    5cd6:	4640      	mov	r0, r8
    5cd8:	f014 f9e0 	bl	1a09c <net_buf_unref>
			return err;
    5cdc:	e7dc      	b.n	5c98 <bt_le_adv_start+0xb4>
			set_param->type = BT_LE_ADV_NONCONN_IND;
    5cde:	2303      	movs	r3, #3
    5ce0:	713b      	strb	r3, [r7, #4]
    5ce2:	e7d1      	b.n	5c88 <bt_le_adv_start+0xa4>
	err = set_advertise_enable(true);
    5ce4:	2001      	movs	r0, #1
    5ce6:	f7fe fd71 	bl	47cc <set_advertise_enable>
	if (err) {
    5cea:	4604      	mov	r4, r0
    5cec:	2800      	cmp	r0, #0
    5cee:	d1d3      	bne.n	5c98 <bt_le_adv_start+0xb4>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    5cf0:	782b      	ldrb	r3, [r5, #0]
    5cf2:	f013 0f02 	tst.w	r3, #2
    5cf6:	d1cf      	bne.n	5c98 <bt_le_adv_start+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5cf8:	4b0e      	ldr	r3, [pc, #56]	; (5d34 <bt_le_adv_start+0x150>)
    5cfa:	f3bf 8f5b 	dmb	ish
    5cfe:	e853 2f00 	ldrex	r2, [r3]
    5d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    5d06:	e843 2100 	strex	r1, r2, [r3]
    5d0a:	2900      	cmp	r1, #0
    5d0c:	d1f7      	bne.n	5cfe <bt_le_adv_start+0x11a>
    5d0e:	f3bf 8f5b 	dmb	ish
    5d12:	e7c1      	b.n	5c98 <bt_le_adv_start+0xb4>
		return -EINVAL;
    5d14:	f06f 0415 	mvn.w	r4, #21
    5d18:	e7be      	b.n	5c98 <bt_le_adv_start+0xb4>
		return -EALREADY;
    5d1a:	f06f 0477 	mvn.w	r4, #119	; 0x77
    5d1e:	e7bb      	b.n	5c98 <bt_le_adv_start+0xb4>
		return -ENOBUFS;
    5d20:	f06f 0468 	mvn.w	r4, #104	; 0x68
    5d24:	e7b8      	b.n	5c98 <bt_le_adv_start+0xb4>
				return -EINVAL;
    5d26:	f06f 0415 	mvn.w	r4, #21
    5d2a:	e7b5      	b.n	5c98 <bt_le_adv_start+0xb4>
    5d2c:	2000b770 	.word	0x2000b770
    5d30:	2000b771 	.word	0x2000b771
    5d34:	2000b7e0 	.word	0x2000b7e0

00005d38 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    5d38:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5d3a:	4b16      	ldr	r3, [pc, #88]	; (5d94 <bt_le_adv_stop+0x5c>)
    5d3c:	f103 0270 	add.w	r2, r3, #112	; 0x70
    5d40:	f3bf 8f5b 	dmb	ish
    5d44:	e852 1f00 	ldrex	r1, [r2]
    5d48:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    5d4c:	e842 1000 	strex	r0, r1, [r2]
    5d50:	2800      	cmp	r0, #0
    5d52:	d1f7      	bne.n	5d44 <bt_le_adv_stop+0xc>
    5d54:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5d58:	f3bf 8f5b 	dmb	ish
    5d5c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    5d5e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    5d62:	f3c4 1440 	ubfx	r4, r4, #5, #1
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    5d66:	b90c      	cbnz	r4, 5d6c <bt_le_adv_stop+0x34>
			le_set_private_addr();
		}
	}

	return 0;
}
    5d68:	4620      	mov	r0, r4
    5d6a:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    5d6c:	2000      	movs	r0, #0
    5d6e:	f7fe fd2d 	bl	47cc <set_advertise_enable>
	if (err) {
    5d72:	4604      	mov	r4, r0
    5d74:	2800      	cmp	r0, #0
    5d76:	d1f7      	bne.n	5d68 <bt_le_adv_stop+0x30>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5d78:	f3bf 8f5b 	dmb	ish
    5d7c:	4b05      	ldr	r3, [pc, #20]	; (5d94 <bt_le_adv_stop+0x5c>)
    5d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5d80:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    5d84:	f3c3 2340 	ubfx	r3, r3, #9, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    5d88:	b90b      	cbnz	r3, 5d8e <bt_le_adv_stop+0x56>
	return 0;
    5d8a:	461c      	mov	r4, r3
    5d8c:	e7ec      	b.n	5d68 <bt_le_adv_stop+0x30>
			le_set_private_addr();
    5d8e:	f7fe fcaf 	bl	46f0 <le_set_private_addr>
    5d92:	e7e9      	b.n	5d68 <bt_le_adv_stop+0x30>
    5d94:	2000b770 	.word	0x2000b770

00005d98 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    5d98:	b538      	push	{r3, r4, r5, lr}
    5d9a:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    5d9c:	4808      	ldr	r0, [pc, #32]	; (5dc0 <bt_buf_get_rx+0x28>)
    5d9e:	f014 f90f 	bl	19fc0 <net_buf_alloc>
#endif

	if (buf) {
    5da2:	4604      	mov	r4, r0
    5da4:	b150      	cbz	r0, 5dbc <bt_buf_get_rx+0x24>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    5da6:	2100      	movs	r1, #0
    5da8:	f014 f965 	bl	1a076 <net_buf_reserve>
    5dac:	f104 0310 	add.w	r3, r4, #16
    5db0:	89e2      	ldrh	r2, [r4, #14]
    5db2:	4413      	add	r3, r2
    5db4:	3303      	adds	r3, #3
    5db6:	f023 0303 	bic.w	r3, r3, #3
	*(u8_t *)net_buf_user_data(buf) = type;
    5dba:	701d      	strb	r5, [r3, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    5dbc:	4620      	mov	r0, r4
    5dbe:	bd38      	pop	{r3, r4, r5, pc}
    5dc0:	2000d034 	.word	0x2000d034

00005dc4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    5dc4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5dc6:	f04f 0320 	mov.w	r3, #32
    5dca:	f3ef 8211 	mrs	r2, BASEPRI
    5dce:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    5dd2:	4b0f      	ldr	r3, [pc, #60]	; (5e10 <bt_buf_get_cmd_complete+0x4c>)
    5dd4:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    5dd8:	2500      	movs	r5, #0
    5dda:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5dde:	f382 8811 	msr	BASEPRI, r2
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    5de2:	b17c      	cbz	r4, 5e04 <bt_buf_get_cmd_complete+0x40>
    5de4:	f104 0310 	add.w	r3, r4, #16
    5de8:	89e2      	ldrh	r2, [r4, #14]
    5dea:	4413      	add	r3, r2
    5dec:	3303      	adds	r3, #3
    5dee:	f023 0303 	bic.w	r3, r3, #3
    5df2:	2201      	movs	r2, #1
    5df4:	701a      	strb	r2, [r3, #0]
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    5df6:	4629      	mov	r1, r5
    5df8:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    5dfa:	4620      	mov	r0, r4
    5dfc:	f014 f93b 	bl	1a076 <net_buf_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    5e00:	4620      	mov	r0, r4
    5e02:	bd38      	pop	{r3, r4, r5, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    5e04:	4601      	mov	r1, r0
    5e06:	2001      	movs	r0, #1
    5e08:	f7ff ffc6 	bl	5d98 <bt_buf_get_rx>
    5e0c:	4604      	mov	r4, r0
    5e0e:	e7f7      	b.n	5e00 <bt_buf_get_cmd_complete+0x3c>
    5e10:	2000b770 	.word	0x2000b770

00005e14 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    5e14:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    5e16:	4b29      	ldr	r3, [pc, #164]	; (5ebc <bt_pub_key_gen+0xa8>)
    5e18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    5e1c:	f003 0306 	and.w	r3, r3, #6
    5e20:	2b06      	cmp	r3, #6
    5e22:	d148      	bne.n	5eb6 <bt_pub_key_gen+0xa2>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
    5e24:	4b26      	ldr	r3, [pc, #152]	; (5ec0 <bt_pub_key_gen+0xac>)
    5e26:	681a      	ldr	r2, [r3, #0]
    5e28:	6042      	str	r2, [r0, #4]
	pub_key_cb = new_cb;
    5e2a:	6018      	str	r0, [r3, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5e2c:	4b25      	ldr	r3, [pc, #148]	; (5ec4 <bt_pub_key_gen+0xb0>)
    5e2e:	f3bf 8f5b 	dmb	ish
    5e32:	e853 2f00 	ldrex	r2, [r3]
    5e36:	f042 0110 	orr.w	r1, r2, #16
    5e3a:	e843 1400 	strex	r4, r1, [r3]
    5e3e:	2c00      	cmp	r4, #0
    5e40:	d1f7      	bne.n	5e32 <bt_pub_key_gen+0x1e>
    5e42:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5e46:	f012 0f10 	tst.w	r2, #16
    5e4a:	d002      	beq.n	5e52 <bt_pub_key_gen+0x3e>
		return 0;
    5e4c:	2600      	movs	r6, #0
			cb->func(NULL);
		}
	}

	return 0;
}
    5e4e:	4630      	mov	r0, r6
    5e50:	bd70      	pop	{r4, r5, r6, pc}
    5e52:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5e54:	f3bf 8f5b 	dmb	ish
    5e58:	e853 2f00 	ldrex	r2, [r3]
    5e5c:	f022 0208 	bic.w	r2, r2, #8
    5e60:	e843 2100 	strex	r1, r2, [r3]
    5e64:	2900      	cmp	r1, #0
    5e66:	d1f7      	bne.n	5e58 <bt_pub_key_gen+0x44>
    5e68:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    5e6c:	2200      	movs	r2, #0
    5e6e:	4611      	mov	r1, r2
    5e70:	f242 0025 	movw	r0, #8229	; 0x2025
    5e74:	f7fe f930 	bl	40d8 <bt_hci_cmd_send_sync>
	if (err) {
    5e78:	4606      	mov	r6, r0
    5e7a:	b910      	cbnz	r0, 5e82 <bt_pub_key_gen+0x6e>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5e7c:	4b10      	ldr	r3, [pc, #64]	; (5ec0 <bt_pub_key_gen+0xac>)
    5e7e:	681c      	ldr	r4, [r3, #0]
    5e80:	e011      	b.n	5ea6 <bt_pub_key_gen+0x92>
    5e82:	4b10      	ldr	r3, [pc, #64]	; (5ec4 <bt_pub_key_gen+0xb0>)
    5e84:	f3bf 8f5b 	dmb	ish
    5e88:	e853 2f00 	ldrex	r2, [r3]
    5e8c:	f022 0210 	bic.w	r2, r2, #16
    5e90:	e843 2100 	strex	r1, r2, [r3]
    5e94:	2900      	cmp	r1, #0
    5e96:	d1f7      	bne.n	5e88 <bt_pub_key_gen+0x74>
    5e98:	f3bf 8f5b 	dmb	ish
		pub_key_cb = NULL;
    5e9c:	2200      	movs	r2, #0
    5e9e:	4b08      	ldr	r3, [pc, #32]	; (5ec0 <bt_pub_key_gen+0xac>)
    5ea0:	601a      	str	r2, [r3, #0]
		return err;
    5ea2:	e7d4      	b.n	5e4e <bt_pub_key_gen+0x3a>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5ea4:	6864      	ldr	r4, [r4, #4]
    5ea6:	2c00      	cmp	r4, #0
    5ea8:	d0d1      	beq.n	5e4e <bt_pub_key_gen+0x3a>
		if (cb != new_cb) {
    5eaa:	42ac      	cmp	r4, r5
    5eac:	d0fa      	beq.n	5ea4 <bt_pub_key_gen+0x90>
			cb->func(NULL);
    5eae:	6823      	ldr	r3, [r4, #0]
    5eb0:	2000      	movs	r0, #0
    5eb2:	4798      	blx	r3
    5eb4:	e7f6      	b.n	5ea4 <bt_pub_key_gen+0x90>
		return -ENOTSUP;
    5eb6:	f06f 0685 	mvn.w	r6, #133	; 0x85
    5eba:	e7c8      	b.n	5e4e <bt_pub_key_gen+0x3a>
    5ebc:	2000b770 	.word	0x2000b770
    5ec0:	2000021c 	.word	0x2000021c
    5ec4:	2000b7e0 	.word	0x2000b7e0

00005ec8 <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    5ec8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5eca:	4b21      	ldr	r3, [pc, #132]	; (5f50 <bt_dh_key_gen+0x88>)
    5ecc:	681b      	ldr	r3, [r3, #0]
    5ece:	bbab      	cbnz	r3, 5f3c <bt_dh_key_gen+0x74>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5ed0:	f3bf 8f5b 	dmb	ish
    5ed4:	4b1f      	ldr	r3, [pc, #124]	; (5f54 <bt_dh_key_gen+0x8c>)
    5ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5ed8:	f3bf 8f5b 	dmb	ish
    5edc:	f013 0f10 	tst.w	r3, #16
    5ee0:	d130      	bne.n	5f44 <bt_dh_key_gen+0x7c>
    5ee2:	f3bf 8f5b 	dmb	ish
    5ee6:	4b1b      	ldr	r3, [pc, #108]	; (5f54 <bt_dh_key_gen+0x8c>)
    5ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5eea:	f3bf 8f5b 	dmb	ish
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    5eee:	f013 0f08 	tst.w	r3, #8
    5ef2:	d02a      	beq.n	5f4a <bt_dh_key_gen+0x82>
    5ef4:	4604      	mov	r4, r0
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
    5ef6:	4b16      	ldr	r3, [pc, #88]	; (5f50 <bt_dh_key_gen+0x88>)
    5ef8:	6019      	str	r1, [r3, #0]

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    5efa:	2140      	movs	r1, #64	; 0x40
    5efc:	f242 0026 	movw	r0, #8230	; 0x2026
    5f00:	f7fe f8be 	bl	4080 <bt_hci_cmd_create>
	if (!buf) {
    5f04:	4605      	mov	r5, r0
    5f06:	b198      	cbz	r0, 5f30 <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    5f08:	2140      	movs	r1, #64	; 0x40
    5f0a:	3008      	adds	r0, #8
    5f0c:	f014 f912 	bl	1a134 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    5f10:	2240      	movs	r2, #64	; 0x40
    5f12:	4621      	mov	r1, r4
    5f14:	f7fa f9d4 	bl	2c0 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    5f18:	2200      	movs	r2, #0
    5f1a:	4629      	mov	r1, r5
    5f1c:	f242 0026 	movw	r0, #8230	; 0x2026
    5f20:	f7fe f8da 	bl	40d8 <bt_hci_cmd_send_sync>
	if (err) {
    5f24:	4603      	mov	r3, r0
    5f26:	b158      	cbz	r0, 5f40 <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    5f28:	2100      	movs	r1, #0
    5f2a:	4a09      	ldr	r2, [pc, #36]	; (5f50 <bt_dh_key_gen+0x88>)
    5f2c:	6011      	str	r1, [r2, #0]
		return err;
    5f2e:	e007      	b.n	5f40 <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    5f30:	2200      	movs	r2, #0
    5f32:	4b07      	ldr	r3, [pc, #28]	; (5f50 <bt_dh_key_gen+0x88>)
    5f34:	601a      	str	r2, [r3, #0]
		return -ENOBUFS;
    5f36:	f06f 0368 	mvn.w	r3, #104	; 0x68
    5f3a:	e001      	b.n	5f40 <bt_dh_key_gen+0x78>
		return -EBUSY;
    5f3c:	f06f 030f 	mvn.w	r3, #15
	}

	return 0;
}
    5f40:	4618      	mov	r0, r3
    5f42:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    5f44:	f06f 030f 	mvn.w	r3, #15
    5f48:	e7fa      	b.n	5f40 <bt_dh_key_gen+0x78>
		return -EADDRNOTAVAIL;
    5f4a:	f06f 037c 	mvn.w	r3, #124	; 0x7c
    5f4e:	e7f7      	b.n	5f40 <bt_dh_key_gen+0x78>
    5f50:	200001d8 	.word	0x200001d8
    5f54:	2000b770 	.word	0x2000b770

00005f58 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    5f58:	b538      	push	{r3, r4, r5, lr}
    5f5a:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    5f5c:	4b06      	ldr	r3, [pc, #24]	; (5f78 <notify_connected+0x20>)
    5f5e:	681c      	ldr	r4, [r3, #0]
    5f60:	e000      	b.n	5f64 <notify_connected+0xc>
    5f62:	69a4      	ldr	r4, [r4, #24]
    5f64:	b134      	cbz	r4, 5f74 <notify_connected+0x1c>
		if (cb->connected) {
    5f66:	6823      	ldr	r3, [r4, #0]
    5f68:	2b00      	cmp	r3, #0
    5f6a:	d0fa      	beq.n	5f62 <notify_connected+0xa>
			cb->connected(conn, conn->err);
    5f6c:	7ae9      	ldrb	r1, [r5, #11]
    5f6e:	4628      	mov	r0, r5
    5f70:	4798      	blx	r3
    5f72:	e7f6      	b.n	5f62 <notify_connected+0xa>
		}
	}
}
    5f74:	bd38      	pop	{r3, r4, r5, pc}
    5f76:	bf00      	nop
    5f78:	200002f8 	.word	0x200002f8

00005f7c <notify_disconnected>:

static void notify_disconnected(struct bt_conn *conn)
{
    5f7c:	b538      	push	{r3, r4, r5, lr}
    5f7e:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    5f80:	4b06      	ldr	r3, [pc, #24]	; (5f9c <notify_disconnected+0x20>)
    5f82:	681c      	ldr	r4, [r3, #0]
    5f84:	e000      	b.n	5f88 <notify_disconnected+0xc>
    5f86:	69a4      	ldr	r4, [r4, #24]
    5f88:	b134      	cbz	r4, 5f98 <notify_disconnected+0x1c>
		if (cb->disconnected) {
    5f8a:	6863      	ldr	r3, [r4, #4]
    5f8c:	2b00      	cmp	r3, #0
    5f8e:	d0fa      	beq.n	5f86 <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
    5f90:	7ae9      	ldrb	r1, [r5, #11]
    5f92:	4628      	mov	r0, r5
    5f94:	4798      	blx	r3
    5f96:	e7f6      	b.n	5f86 <notify_disconnected+0xa>
		}
	}
}
    5f98:	bd38      	pop	{r3, r4, r5, pc}
    5f9a:	bf00      	nop
    5f9c:	200002f8 	.word	0x200002f8

00005fa0 <tx_free>:
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    5fa0:	2300      	movs	r3, #0
    5fa2:	6043      	str	r3, [r0, #4]
	node->next = list->head;
    5fa4:	4b04      	ldr	r3, [pc, #16]	; (5fb8 <tx_free+0x18>)
    5fa6:	681a      	ldr	r2, [r3, #0]
    5fa8:	6002      	str	r2, [r0, #0]
	list->head = node;
    5faa:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
    5fac:	685b      	ldr	r3, [r3, #4]
    5fae:	b103      	cbz	r3, 5fb2 <tx_free+0x12>
    5fb0:	4770      	bx	lr
		list->tail = list->head;
    5fb2:	4b01      	ldr	r3, [pc, #4]	; (5fb8 <tx_free+0x18>)
    5fb4:	6058      	str	r0, [r3, #4]
	sys_slist_prepend(&free_tx, &tx->node);
}
    5fb6:	e7fb      	b.n	5fb0 <tx_free+0x10>
    5fb8:	20000498 	.word	0x20000498

00005fbc <add_pending_tx>:
		}
	}
}

static sys_snode_t *add_pending_tx(struct bt_conn *conn, bt_conn_tx_cb_t cb)
{
    5fbc:	b410      	push	{r4}
	sys_snode_t *node = list->head;
    5fbe:	4a0f      	ldr	r2, [pc, #60]	; (5ffc <add_pending_tx+0x40>)
    5fc0:	6813      	ldr	r3, [r2, #0]
	list->head = node->next;
    5fc2:	681c      	ldr	r4, [r3, #0]
    5fc4:	6014      	str	r4, [r2, #0]
	if (list->tail == node) {
    5fc6:	6852      	ldr	r2, [r2, #4]
    5fc8:	4293      	cmp	r3, r2
    5fca:	d011      	beq.n	5ff0 <add_pending_tx+0x34>
	BT_DBG("conn %p cb %p", conn, cb);

	__ASSERT(!sys_slist_is_empty(&free_tx), "No free conn TX contexts");

	node = sys_slist_get_not_empty(&free_tx);
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    5fcc:	6059      	str	r1, [r3, #4]
	__asm__ volatile(
    5fce:	f04f 0220 	mov.w	r2, #32
    5fd2:	f3ef 8111 	mrs	r1, BASEPRI
    5fd6:	f382 8811 	msr	BASEPRI, r2
	node->next = NULL;
    5fda:	2200      	movs	r2, #0
    5fdc:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    5fde:	6982      	ldr	r2, [r0, #24]
    5fe0:	b14a      	cbz	r2, 5ff6 <add_pending_tx+0x3a>
		list->tail->next = node;
    5fe2:	6013      	str	r3, [r2, #0]
		list->tail = node;
    5fe4:	6183      	str	r3, [r0, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5fe6:	f381 8811 	msr	BASEPRI, r1
	key = irq_lock();
	sys_slist_append(&conn->tx_pending, node);
	irq_unlock(key);

	return node;
}
    5fea:	4618      	mov	r0, r3
    5fec:	bc10      	pop	{r4}
    5fee:	4770      	bx	lr
		list->tail = list->head;
    5ff0:	4a02      	ldr	r2, [pc, #8]	; (5ffc <add_pending_tx+0x40>)
    5ff2:	6054      	str	r4, [r2, #4]
    5ff4:	e7ea      	b.n	5fcc <add_pending_tx+0x10>
		list->tail = node;
    5ff6:	6183      	str	r3, [r0, #24]
		list->head = node;
    5ff8:	6143      	str	r3, [r0, #20]
    5ffa:	e7f4      	b.n	5fe6 <add_pending_tx+0x2a>
    5ffc:	20000498 	.word	0x20000498

00006000 <remove_pending_tx>:

static void remove_pending_tx(struct bt_conn *conn, sys_snode_t *node)
{
    6000:	b510      	push	{r4, lr}
	__asm__ volatile(
    6002:	f04f 0320 	mov.w	r3, #32
    6006:	f3ef 8411 	mrs	r4, BASEPRI
    600a:	f383 8811 	msr	BASEPRI, r3
	return list->head;
    600e:	6943      	ldr	r3, [r0, #20]
	sys_snode_t *prev = NULL;
    6010:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    6012:	b163      	cbz	r3, 602e <remove_pending_tx+0x2e>
		if (test == node) {
    6014:	4299      	cmp	r1, r3
    6016:	d002      	beq.n	601e <remove_pending_tx+0x1e>
		prev = test;
    6018:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    601a:	681b      	ldr	r3, [r3, #0]
    601c:	e7f9      	b.n	6012 <remove_pending_tx+0x12>
	if (!prev_node) {
    601e:	b162      	cbz	r2, 603a <remove_pending_tx+0x3a>
		prev_node->next = node->next;
    6020:	680b      	ldr	r3, [r1, #0]
    6022:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    6024:	6983      	ldr	r3, [r0, #24]
    6026:	4299      	cmp	r1, r3
    6028:	d00e      	beq.n	6048 <remove_pending_tx+0x48>
	node->next = NULL;
    602a:	2300      	movs	r3, #0
    602c:	600b      	str	r3, [r1, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    602e:	f384 8811 	msr	BASEPRI, r4

	key = irq_lock();
	sys_slist_find_and_remove(&conn->tx_pending, node);
	irq_unlock(key);

	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    6032:	4608      	mov	r0, r1
    6034:	f7ff ffb4 	bl	5fa0 <tx_free>
    6038:	bd10      	pop	{r4, pc}
		list->head = node->next;
    603a:	680b      	ldr	r3, [r1, #0]
    603c:	6143      	str	r3, [r0, #20]
		if (list->tail == node) {
    603e:	6982      	ldr	r2, [r0, #24]
    6040:	4291      	cmp	r1, r2
    6042:	d1f2      	bne.n	602a <remove_pending_tx+0x2a>
			list->tail = list->head;
    6044:	6183      	str	r3, [r0, #24]
    6046:	e7f0      	b.n	602a <remove_pending_tx+0x2a>
			list->tail = prev_node;
    6048:	6182      	str	r2, [r0, #24]
    604a:	e7ee      	b.n	602a <remove_pending_tx+0x2a>

0000604c <bt_conn_set_param_le>:

#if defined(CONFIG_BT_CENTRAL)
static void bt_conn_set_param_le(struct bt_conn *conn,
				 const struct bt_le_conn_param *param)
{
	conn->le.interval_max = param->interval_max;
    604c:	884b      	ldrh	r3, [r1, #2]
    604e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	conn->le.latency = param->latency;
    6052:	888b      	ldrh	r3, [r1, #4]
    6054:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
	conn->le.timeout = param->timeout;
    6058:	88cb      	ldrh	r3, [r1, #6]
    605a:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    605e:	4770      	bx	lr

00006060 <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
    6060:	89c3      	ldrh	r3, [r0, #14]
    6062:	b903      	cbnz	r3, 6066 <bt_conn_reset_rx_state+0x6>
    6064:	4770      	bx	lr
{
    6066:	b510      	push	{r4, lr}
    6068:	4604      	mov	r4, r0
	net_buf_unref(conn->rx);
    606a:	6900      	ldr	r0, [r0, #16]
    606c:	f014 f816 	bl	1a09c <net_buf_unref>
	conn->rx = NULL;
    6070:	2300      	movs	r3, #0
    6072:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    6074:	81e3      	strh	r3, [r4, #14]
    6076:	bd10      	pop	{r4, pc}

00006078 <conn_new>:
{
    6078:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    607a:	2300      	movs	r3, #0
    607c:	b1ab      	cbz	r3, 60aa <conn_new+0x32>
	struct bt_conn *conn = NULL;
    607e:	2400      	movs	r4, #0
	if (!conn) {
    6080:	b18c      	cbz	r4, 60a6 <conn_new+0x2e>
	memset(conn, 0, sizeof(*conn));
    6082:	229c      	movs	r2, #156	; 0x9c
    6084:	2100      	movs	r1, #0
    6086:	4620      	mov	r0, r4
    6088:	f023 fb26 	bl	296d8 <memset>
	atomic_set(&conn->ref, 1);
    608c:	f104 0344 	add.w	r3, r4, #68	; 0x44
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6090:	2201      	movs	r2, #1
    6092:	f3bf 8f5b 	dmb	ish
    6096:	e853 1f00 	ldrex	r1, [r3]
    609a:	e843 2000 	strex	r0, r2, [r3]
    609e:	2800      	cmp	r0, #0
    60a0:	d1f9      	bne.n	6096 <conn_new+0x1e>
    60a2:	f3bf 8f5b 	dmb	ish
}
    60a6:	4620      	mov	r0, r4
    60a8:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    60aa:	229c      	movs	r2, #156	; 0x9c
    60ac:	fb02 f203 	mul.w	r2, r2, r3
    60b0:	3240      	adds	r2, #64	; 0x40
    60b2:	4907      	ldr	r1, [pc, #28]	; (60d0 <conn_new+0x58>)
    60b4:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    60b6:	f3bf 8f5b 	dmb	ish
    60ba:	6852      	ldr	r2, [r2, #4]
    60bc:	f3bf 8f5b 	dmb	ish
    60c0:	b10a      	cbz	r2, 60c6 <conn_new+0x4e>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    60c2:	3301      	adds	r3, #1
    60c4:	e7da      	b.n	607c <conn_new+0x4>
			conn = &conns[i];
    60c6:	229c      	movs	r2, #156	; 0x9c
    60c8:	fb02 1403 	mla	r4, r2, r3, r1
			break;
    60cc:	e7d8      	b.n	6080 <conn_new+0x8>
    60ce:	bf00      	nop
    60d0:	2000030c 	.word	0x2000030c

000060d4 <bt_conn_get_pkts>:
}
    60d4:	4800      	ldr	r0, [pc, #0]	; (60d8 <bt_conn_get_pkts+0x4>)
    60d6:	4770      	bx	lr
    60d8:	2000b7fc 	.word	0x2000b7fc

000060dc <process_unack_tx>:
{
    60dc:	b510      	push	{r4, lr}
    60de:	4604      	mov	r4, r0
    60e0:	e009      	b.n	60f6 <process_unack_tx+0x1a>
    60e2:	f383 8811 	msr	BASEPRI, r3
		if (!node) {
    60e6:	b1b0      	cbz	r0, 6116 <process_unack_tx+0x3a>
		tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    60e8:	f7ff ff5a 	bl	5fa0 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
    60ec:	4620      	mov	r0, r4
    60ee:	f7ff fff1 	bl	60d4 <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    60f2:	f022 fb1e 	bl	28732 <_impl_k_sem_give>
	__asm__ volatile(
    60f6:	f04f 0220 	mov.w	r2, #32
    60fa:	f3ef 8311 	mrs	r3, BASEPRI
    60fe:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    6102:	6960      	ldr	r0, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    6104:	2800      	cmp	r0, #0
    6106:	d0ec      	beq.n	60e2 <process_unack_tx+0x6>
	list->head = node->next;
    6108:	6802      	ldr	r2, [r0, #0]
    610a:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    610c:	69a1      	ldr	r1, [r4, #24]
    610e:	4288      	cmp	r0, r1
    6110:	d1e7      	bne.n	60e2 <process_unack_tx+0x6>
		list->tail = list->head;
    6112:	61a2      	str	r2, [r4, #24]
    6114:	e7e5      	b.n	60e2 <process_unack_tx+0x6>
    6116:	bd10      	pop	{r4, pc}

00006118 <notify_le_param_updated>:
{
    6118:	b570      	push	{r4, r5, r6, lr}
    611a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    611c:	4b08      	ldr	r3, [pc, #32]	; (6140 <notify_le_param_updated+0x28>)
    611e:	681c      	ldr	r4, [r3, #0]
    6120:	e000      	b.n	6124 <notify_le_param_updated+0xc>
    6122:	69a4      	ldr	r4, [r4, #24]
    6124:	b15c      	cbz	r4, 613e <notify_le_param_updated+0x26>
		if (cb->le_param_updated) {
    6126:	68e6      	ldr	r6, [r4, #12]
    6128:	2e00      	cmp	r6, #0
    612a:	d0fa      	beq.n	6122 <notify_le_param_updated+0xa>
			cb->le_param_updated(conn, conn->le.interval,
    612c:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    6130:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    6134:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    6138:	4628      	mov	r0, r5
    613a:	47b0      	blx	r6
    613c:	e7f1      	b.n	6122 <notify_le_param_updated+0xa>
}
    613e:	bd70      	pop	{r4, r5, r6, pc}
    6140:	200002f8 	.word	0x200002f8

00006144 <le_param_req>:
{
    6144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6146:	4606      	mov	r6, r0
    6148:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    614a:	4608      	mov	r0, r1
    614c:	f7fe fc02 	bl	4954 <bt_le_conn_params_valid>
    6150:	4607      	mov	r7, r0
    6152:	b198      	cbz	r0, 617c <le_param_req+0x38>
	for (cb = callback_list; cb; cb = cb->_next) {
    6154:	4b0a      	ldr	r3, [pc, #40]	; (6180 <le_param_req+0x3c>)
    6156:	681c      	ldr	r4, [r3, #0]
    6158:	e000      	b.n	615c <le_param_req+0x18>
    615a:	69a4      	ldr	r4, [r4, #24]
    615c:	b174      	cbz	r4, 617c <le_param_req+0x38>
		if (!cb->le_param_req) {
    615e:	68a3      	ldr	r3, [r4, #8]
    6160:	2b00      	cmp	r3, #0
    6162:	d0fa      	beq.n	615a <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
    6164:	4629      	mov	r1, r5
    6166:	4630      	mov	r0, r6
    6168:	4798      	blx	r3
    616a:	b130      	cbz	r0, 617a <le_param_req+0x36>
		if (!bt_le_conn_params_valid(param)) {
    616c:	4628      	mov	r0, r5
    616e:	f7fe fbf1 	bl	4954 <bt_le_conn_params_valid>
    6172:	2800      	cmp	r0, #0
    6174:	d1f1      	bne.n	615a <le_param_req+0x16>
			return false;
    6176:	4607      	mov	r7, r0
    6178:	e000      	b.n	617c <le_param_req+0x38>
			return false;
    617a:	4607      	mov	r7, r0
}
    617c:	4638      	mov	r0, r7
    617e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6180:	200002f8 	.word	0x200002f8

00006184 <bt_conn_identity_resolved>:
{
    6184:	b570      	push	{r4, r5, r6, lr}
    6186:	4605      	mov	r5, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6188:	78c3      	ldrb	r3, [r0, #3]
    618a:	b923      	cbnz	r3, 6196 <bt_conn_identity_resolved+0x12>
		rpa = &conn->le.resp_addr;
    618c:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    6190:	4b08      	ldr	r3, [pc, #32]	; (61b4 <bt_conn_identity_resolved+0x30>)
    6192:	681c      	ldr	r4, [r3, #0]
    6194:	e003      	b.n	619e <bt_conn_identity_resolved+0x1a>
		rpa = &conn->le.init_addr;
    6196:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    619a:	e7f9      	b.n	6190 <bt_conn_identity_resolved+0xc>
	for (cb = callback_list; cb; cb = cb->_next) {
    619c:	69a4      	ldr	r4, [r4, #24]
    619e:	b144      	cbz	r4, 61b2 <bt_conn_identity_resolved+0x2e>
		if (cb->identity_resolved) {
    61a0:	6923      	ldr	r3, [r4, #16]
    61a2:	2b00      	cmp	r3, #0
    61a4:	d0fa      	beq.n	619c <bt_conn_identity_resolved+0x18>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    61a6:	f105 0248 	add.w	r2, r5, #72	; 0x48
    61aa:	4631      	mov	r1, r6
    61ac:	4628      	mov	r0, r5
    61ae:	4798      	blx	r3
    61b0:	e7f4      	b.n	619c <bt_conn_identity_resolved+0x18>
}
    61b2:	bd70      	pop	{r4, r5, r6, pc}
    61b4:	200002f8 	.word	0x200002f8

000061b8 <bt_conn_le_start_encryption>:
{
    61b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61bc:	4680      	mov	r8, r0
    61be:	4617      	mov	r7, r2
    61c0:	461c      	mov	r4, r3
    61c2:	9d08      	ldr	r5, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    61c4:	211c      	movs	r1, #28
    61c6:	f242 0019 	movw	r0, #8217	; 0x2019
    61ca:	f7fd ff59 	bl	4080 <bt_hci_cmd_create>
	if (!buf) {
    61ce:	b338      	cbz	r0, 6220 <bt_conn_le_start_encryption+0x68>
    61d0:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    61d2:	211c      	movs	r1, #28
    61d4:	3008      	adds	r0, #8
    61d6:	f013 ffad 	bl	1a134 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    61da:	f8b8 2000 	ldrh.w	r2, [r8]
    61de:	4603      	mov	r3, r0
    61e0:	f823 2b02 	strh.w	r2, [r3], #2
	cp->rand = rand;
    61e4:	f8c0 7002 	str.w	r7, [r0, #2]
    61e8:	605c      	str	r4, [r3, #4]
	cp->ediv = ediv;
    61ea:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    61ee:	8143      	strh	r3, [r0, #10]
	memcpy(cp->ltk, ltk, len);
    61f0:	f100 040c 	add.w	r4, r0, #12
    61f4:	462a      	mov	r2, r5
    61f6:	9907      	ldr	r1, [sp, #28]
    61f8:	4620      	mov	r0, r4
    61fa:	f7fa f861 	bl	2c0 <memcpy>
	if (len < sizeof(cp->ltk)) {
    61fe:	2d0f      	cmp	r5, #15
    6200:	d907      	bls.n	6212 <bt_conn_le_start_encryption+0x5a>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    6202:	2200      	movs	r2, #0
    6204:	4631      	mov	r1, r6
    6206:	f242 0019 	movw	r0, #8217	; 0x2019
    620a:	f7fd ff65 	bl	40d8 <bt_hci_cmd_send_sync>
    620e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
    6212:	f1c5 0210 	rsb	r2, r5, #16
    6216:	2100      	movs	r1, #0
    6218:	1960      	adds	r0, r4, r5
    621a:	f023 fa5d 	bl	296d8 <memset>
    621e:	e7f0      	b.n	6202 <bt_conn_le_start_encryption+0x4a>
		return -ENOBUFS;
    6220:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006228 <start_security>:
{
    6228:	b530      	push	{r4, r5, lr}
    622a:	b085      	sub	sp, #20
    622c:	4604      	mov	r4, r0
	switch (conn->role) {
    622e:	78c3      	ldrb	r3, [r0, #3]
    6230:	b123      	cbz	r3, 623c <start_security+0x14>
    6232:	2b01      	cmp	r3, #1
    6234:	d052      	beq.n	62dc <start_security+0xb4>
		return -EINVAL;
    6236:	f06f 0015 	mvn.w	r0, #21
    623a:	e051      	b.n	62e0 <start_security+0xb8>
		if (!conn->le.keys) {
    623c:	6f03      	ldr	r3, [r0, #112]	; 0x70
    623e:	b353      	cbz	r3, 6296 <start_security+0x6e>
		if (!conn->le.keys ||
    6240:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6242:	2b00      	cmp	r3, #0
    6244:	d036      	beq.n	62b4 <start_security+0x8c>
		    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
    6246:	899a      	ldrh	r2, [r3, #12]
		if (!conn->le.keys ||
    6248:	f012 0f24 	tst.w	r2, #36	; 0x24
    624c:	d032      	beq.n	62b4 <start_security+0x8c>
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    624e:	7a62      	ldrb	r2, [r4, #9]
    6250:	2a02      	cmp	r2, #2
    6252:	d833      	bhi.n	62bc <start_security+0x94>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    6254:	7a63      	ldrb	r3, [r4, #9]
    6256:	2b03      	cmp	r3, #3
    6258:	d90d      	bls.n	6276 <start_security+0x4e>
		    !atomic_test_bit(conn->le.keys->flags,
    625a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    625c:	f3bf 8f5b 	dmb	ish
    6260:	689b      	ldr	r3, [r3, #8]
    6262:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    6266:	f013 0f01 	tst.w	r3, #1
    626a:	d104      	bne.n	6276 <start_security+0x4e>
		    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    626c:	6f23      	ldr	r3, [r4, #112]	; 0x70
    626e:	899b      	ldrh	r3, [r3, #12]
				     BT_KEYS_AUTHENTICATED) &&
    6270:	f013 0f20 	tst.w	r3, #32
    6274:	d02e      	beq.n	62d4 <start_security+0xac>
						   conn->le.keys->ltk.rand,
    6276:	6f23      	ldr	r3, [r4, #112]	; 0x70
						   conn->le.keys->ltk.val,
    6278:	f103 021a 	add.w	r2, r3, #26
						   conn->le.keys->enc_size);
    627c:	79dd      	ldrb	r5, [r3, #7]
		return bt_conn_le_start_encryption(conn,
    627e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    6282:	9502      	str	r5, [sp, #8]
    6284:	9201      	str	r2, [sp, #4]
    6286:	8b1b      	ldrh	r3, [r3, #24]
    6288:	9300      	str	r3, [sp, #0]
    628a:	4602      	mov	r2, r0
    628c:	460b      	mov	r3, r1
    628e:	4620      	mov	r0, r4
    6290:	f7ff ff92 	bl	61b8 <bt_conn_le_start_encryption>
    6294:	e024      	b.n	62e0 <start_security+0xb8>
						     &conn->le.dst);
    6296:	f100 0548 	add.w	r5, r0, #72	; 0x48
			conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    629a:	4629      	mov	r1, r5
    629c:	2020      	movs	r0, #32
    629e:	f006 f96d 	bl	c57c <bt_keys_find>
    62a2:	6720      	str	r0, [r4, #112]	; 0x70
			if (!conn->le.keys) {
    62a4:	2800      	cmp	r0, #0
    62a6:	d1cb      	bne.n	6240 <start_security+0x18>
				conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    62a8:	4629      	mov	r1, r5
    62aa:	2004      	movs	r0, #4
    62ac:	f006 f966 	bl	c57c <bt_keys_find>
    62b0:	6720      	str	r0, [r4, #112]	; 0x70
    62b2:	e7c5      	b.n	6240 <start_security+0x18>
			return bt_smp_send_pairing_req(conn);
    62b4:	4620      	mov	r0, r4
    62b6:	f005 ff14 	bl	c0e2 <bt_smp_send_pairing_req>
    62ba:	e011      	b.n	62e0 <start_security+0xb8>
    62bc:	f3bf 8f5b 	dmb	ish
    62c0:	689b      	ldr	r3, [r3, #8]
    62c2:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    62c6:	f013 0f01 	tst.w	r3, #1
    62ca:	d1c3      	bne.n	6254 <start_security+0x2c>
			return bt_smp_send_pairing_req(conn);
    62cc:	4620      	mov	r0, r4
    62ce:	f005 ff08 	bl	c0e2 <bt_smp_send_pairing_req>
    62d2:	e005      	b.n	62e0 <start_security+0xb8>
			return bt_smp_send_pairing_req(conn);
    62d4:	4620      	mov	r0, r4
    62d6:	f005 ff04 	bl	c0e2 <bt_smp_send_pairing_req>
    62da:	e001      	b.n	62e0 <start_security+0xb8>
		return bt_smp_send_security_req(conn);
    62dc:	f005 feae 	bl	c03c <bt_smp_send_security_req>
}
    62e0:	b005      	add	sp, #20
    62e2:	bd30      	pop	{r4, r5, pc}

000062e4 <bt_conn_security_changed>:
{
    62e4:	b538      	push	{r3, r4, r5, lr}
    62e6:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    62e8:	4b06      	ldr	r3, [pc, #24]	; (6304 <bt_conn_security_changed+0x20>)
    62ea:	681c      	ldr	r4, [r3, #0]
    62ec:	e000      	b.n	62f0 <bt_conn_security_changed+0xc>
    62ee:	69a4      	ldr	r4, [r4, #24]
    62f0:	b134      	cbz	r4, 6300 <bt_conn_security_changed+0x1c>
		if (cb->security_changed) {
    62f2:	6963      	ldr	r3, [r4, #20]
    62f4:	2b00      	cmp	r3, #0
    62f6:	d0fa      	beq.n	62ee <bt_conn_security_changed+0xa>
			cb->security_changed(conn, conn->sec_level);
    62f8:	7a29      	ldrb	r1, [r5, #8]
    62fa:	4628      	mov	r0, r5
    62fc:	4798      	blx	r3
    62fe:	e7f6      	b.n	62ee <bt_conn_security_changed+0xa>
}
    6300:	bd38      	pop	{r3, r4, r5, pc}
    6302:	bf00      	nop
    6304:	200002f8 	.word	0x200002f8

00006308 <bt_conn_security>:
	if (conn->state != BT_CONN_CONNECTED) {
    6308:	7b03      	ldrb	r3, [r0, #12]
    630a:	2b03      	cmp	r3, #3
    630c:	d112      	bne.n	6334 <bt_conn_security+0x2c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    630e:	7a03      	ldrb	r3, [r0, #8]
    6310:	428b      	cmp	r3, r1
    6312:	d212      	bcs.n	633a <bt_conn_security+0x32>
    6314:	7a43      	ldrb	r3, [r0, #9]
    6316:	4299      	cmp	r1, r3
    6318:	d801      	bhi.n	631e <bt_conn_security+0x16>
		return 0;
    631a:	2300      	movs	r3, #0
    631c:	e00e      	b.n	633c <bt_conn_security+0x34>
{
    631e:	b510      	push	{r4, lr}
    6320:	4604      	mov	r4, r0
	conn->required_sec_level = sec;
    6322:	7241      	strb	r1, [r0, #9]
	err = start_security(conn);
    6324:	f7ff ff80 	bl	6228 <start_security>
	if (err) {
    6328:	4603      	mov	r3, r0
    632a:	b108      	cbz	r0, 6330 <bt_conn_security+0x28>
		conn->required_sec_level = conn->sec_level;
    632c:	7a22      	ldrb	r2, [r4, #8]
    632e:	7262      	strb	r2, [r4, #9]
}
    6330:	4618      	mov	r0, r3
    6332:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    6334:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    6338:	e000      	b.n	633c <bt_conn_security+0x34>
		return 0;
    633a:	2300      	movs	r3, #0
}
    633c:	4618      	mov	r0, r3
    633e:	4770      	bx	lr

00006340 <bt_conn_cb_register>:
	cb->_next = callback_list;
    6340:	4b02      	ldr	r3, [pc, #8]	; (634c <bt_conn_cb_register+0xc>)
    6342:	681a      	ldr	r2, [r3, #0]
    6344:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    6346:	6018      	str	r0, [r3, #0]
    6348:	4770      	bx	lr
    634a:	bf00      	nop
    634c:	200002f8 	.word	0x200002f8

00006350 <bt_conn_recv>:
{
    6350:	b570      	push	{r4, r5, r6, lr}
    6352:	4605      	mov	r5, r0
    6354:	460c      	mov	r4, r1
	switch (flags) {
    6356:	2a01      	cmp	r2, #1
    6358:	d01a      	beq.n	6390 <bt_conn_recv+0x40>
    635a:	2a02      	cmp	r2, #2
    635c:	d149      	bne.n	63f2 <bt_conn_recv+0xa2>
		hdr = (void *)buf->data;
    635e:	688b      	ldr	r3, [r1, #8]
		len = sys_le16_to_cpu(hdr->len);
    6360:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    6362:	89c3      	ldrh	r3, [r0, #14]
    6364:	b97b      	cbnz	r3, 6386 <bt_conn_recv+0x36>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    6366:	89a3      	ldrh	r3, [r4, #12]
    6368:	1af3      	subs	r3, r6, r3
    636a:	3304      	adds	r3, #4
    636c:	b29b      	uxth	r3, r3
    636e:	81eb      	strh	r3, [r5, #14]
		if (conn->rx_len) {
    6370:	b963      	cbnz	r3, 638c <bt_conn_recv+0x3c>
	hdr = (void *)buf->data;
    6372:	68a3      	ldr	r3, [r4, #8]
	len = sys_le16_to_cpu(hdr->len);
    6374:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    6376:	3304      	adds	r3, #4
    6378:	89a2      	ldrh	r2, [r4, #12]
    637a:	4293      	cmp	r3, r2
    637c:	d03f      	beq.n	63fe <bt_conn_recv+0xae>
		net_buf_unref(buf);
    637e:	4620      	mov	r0, r4
    6380:	f013 fe8c 	bl	1a09c <net_buf_unref>
		return;
    6384:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    6386:	f7ff fe6b 	bl	6060 <bt_conn_reset_rx_state>
    638a:	e7ec      	b.n	6366 <bt_conn_recv+0x16>
			conn->rx = buf;
    638c:	612c      	str	r4, [r5, #16]
			return;
    638e:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    6390:	89c3      	ldrh	r3, [r0, #14]
    6392:	b1db      	cbz	r3, 63cc <bt_conn_recv+0x7c>
		if (buf->len > conn->rx_len) {
    6394:	898e      	ldrh	r6, [r1, #12]
    6396:	42b3      	cmp	r3, r6
    6398:	d31e      	bcc.n	63d8 <bt_conn_recv+0x88>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    639a:	6900      	ldr	r0, [r0, #16]
    639c:	3008      	adds	r0, #8
    639e:	f013 ff32 	bl	1a206 <net_buf_simple_tailroom>
    63a2:	4286      	cmp	r6, r0
    63a4:	d81e      	bhi.n	63e4 <bt_conn_recv+0x94>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    63a6:	6928      	ldr	r0, [r5, #16]
    63a8:	89a2      	ldrh	r2, [r4, #12]
    63aa:	68a1      	ldr	r1, [r4, #8]
    63ac:	3008      	adds	r0, #8
    63ae:	f013 fec7 	bl	1a140 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    63b2:	89a2      	ldrh	r2, [r4, #12]
    63b4:	89eb      	ldrh	r3, [r5, #14]
    63b6:	1a9b      	subs	r3, r3, r2
    63b8:	81eb      	strh	r3, [r5, #14]
		net_buf_unref(buf);
    63ba:	4620      	mov	r0, r4
    63bc:	f013 fe6e 	bl	1a09c <net_buf_unref>
		if (conn->rx_len) {
    63c0:	89eb      	ldrh	r3, [r5, #14]
    63c2:	bb03      	cbnz	r3, 6406 <bt_conn_recv+0xb6>
		buf = conn->rx;
    63c4:	692c      	ldr	r4, [r5, #16]
		conn->rx = NULL;
    63c6:	612b      	str	r3, [r5, #16]
		conn->rx_len = 0;
    63c8:	81eb      	strh	r3, [r5, #14]
		break;
    63ca:	e7d2      	b.n	6372 <bt_conn_recv+0x22>
			bt_conn_reset_rx_state(conn);
    63cc:	f7ff fe48 	bl	6060 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    63d0:	4620      	mov	r0, r4
    63d2:	f013 fe63 	bl	1a09c <net_buf_unref>
			return;
    63d6:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    63d8:	f7ff fe42 	bl	6060 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    63dc:	4620      	mov	r0, r4
    63de:	f013 fe5d 	bl	1a09c <net_buf_unref>
			return;
    63e2:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    63e4:	4628      	mov	r0, r5
    63e6:	f7ff fe3b 	bl	6060 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    63ea:	4620      	mov	r0, r4
    63ec:	f013 fe56 	bl	1a09c <net_buf_unref>
			return;
    63f0:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_reset_rx_state(conn);
    63f2:	f7ff fe35 	bl	6060 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
    63f6:	4620      	mov	r0, r4
    63f8:	f013 fe50 	bl	1a09c <net_buf_unref>
		return;
    63fc:	bd70      	pop	{r4, r5, r6, pc}
	bt_l2cap_recv(conn, buf);
    63fe:	4621      	mov	r1, r4
    6400:	4628      	mov	r0, r5
    6402:	f001 fd06 	bl	7e12 <bt_l2cap_recv>
    6406:	bd70      	pop	{r4, r5, r6, pc}

00006408 <bt_conn_send_cb>:
{
    6408:	b570      	push	{r4, r5, r6, lr}
    640a:	4605      	mov	r5, r0
    640c:	460c      	mov	r4, r1
    640e:	4616      	mov	r6, r2
	pool = net_buf_pool_get(buf->pool_id);
    6410:	7988      	ldrb	r0, [r1, #6]
    6412:	f013 fdc9 	bl	19fa8 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    6416:	8ac3      	ldrh	r3, [r0, #22]
    6418:	2b03      	cmp	r3, #3
    641a:	d911      	bls.n	6440 <bt_conn_send_cb+0x38>
	if (conn->state != BT_CONN_CONNECTED) {
    641c:	7b2b      	ldrb	r3, [r5, #12]
    641e:	2b03      	cmp	r3, #3
    6420:	d114      	bne.n	644c <bt_conn_send_cb+0x44>
    6422:	f104 0310 	add.w	r3, r4, #16
    6426:	89e2      	ldrh	r2, [r4, #14]
    6428:	4413      	add	r3, r2
    642a:	3303      	adds	r3, #3
    642c:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(buf)->cb = cb;
    6430:	601e      	str	r6, [r3, #0]
	net_buf_put(&conn->tx_queue, buf);
    6432:	4621      	mov	r1, r4
    6434:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    6438:	f013 fe22 	bl	1a080 <net_buf_put>
	return 0;
    643c:	2000      	movs	r0, #0
}
    643e:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    6440:	4620      	mov	r0, r4
    6442:	f013 fe2b 	bl	1a09c <net_buf_unref>
		return -EINVAL;
    6446:	f06f 0015 	mvn.w	r0, #21
    644a:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    644c:	4620      	mov	r0, r4
    644e:	f013 fe25 	bl	1a09c <net_buf_unref>
		return -ENOTCONN;
    6452:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    6456:	bd70      	pop	{r4, r5, r6, pc}

00006458 <bt_conn_notify_tx>:
{
    6458:	b538      	push	{r3, r4, r5, lr}
    645a:	4605      	mov	r5, r0
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    645c:	e002      	b.n	6464 <bt_conn_notify_tx+0xc>
		tx_free(tx);
    645e:	4620      	mov	r0, r4
    6460:	f7ff fd9e 	bl	5fa0 <tx_free>
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    6464:	2100      	movs	r1, #0
    6466:	f105 001c 	add.w	r0, r5, #28
    646a:	f021 fdf3 	bl	28054 <k_queue_get>
    646e:	4604      	mov	r4, r0
    6470:	b128      	cbz	r0, 647e <bt_conn_notify_tx+0x26>
		if (tx->cb) {
    6472:	6863      	ldr	r3, [r4, #4]
    6474:	2b00      	cmp	r3, #0
    6476:	d0f2      	beq.n	645e <bt_conn_notify_tx+0x6>
			tx->cb(conn);
    6478:	4628      	mov	r0, r5
    647a:	4798      	blx	r3
    647c:	e7ef      	b.n	645e <bt_conn_notify_tx+0x6>
}
    647e:	bd38      	pop	{r3, r4, r5, pc}

00006480 <notify_tx>:
{
    6480:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6482:	2400      	movs	r4, #0
    6484:	b104      	cbz	r4, 6488 <notify_tx+0x8>
}
    6486:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    6488:	239c      	movs	r3, #156	; 0x9c
    648a:	fb03 f304 	mul.w	r3, r3, r4
    648e:	3340      	adds	r3, #64	; 0x40
    6490:	4a0b      	ldr	r2, [pc, #44]	; (64c0 <notify_tx+0x40>)
    6492:	4413      	add	r3, r2
    6494:	f3bf 8f5b 	dmb	ish
    6498:	685b      	ldr	r3, [r3, #4]
    649a:	f3bf 8f5b 	dmb	ish
    649e:	b13b      	cbz	r3, 64b0 <notify_tx+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    64a0:	239c      	movs	r3, #156	; 0x9c
    64a2:	fb03 2304 	mla	r3, r3, r4, r2
    64a6:	7b1b      	ldrb	r3, [r3, #12]
    64a8:	3b03      	subs	r3, #3
    64aa:	b2db      	uxtb	r3, r3
    64ac:	2b01      	cmp	r3, #1
    64ae:	d901      	bls.n	64b4 <notify_tx+0x34>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    64b0:	3401      	adds	r4, #1
    64b2:	e7e7      	b.n	6484 <notify_tx+0x4>
			bt_conn_notify_tx(&conns[i]);
    64b4:	209c      	movs	r0, #156	; 0x9c
    64b6:	fb00 2004 	mla	r0, r0, r4, r2
    64ba:	f7ff ffcd 	bl	6458 <bt_conn_notify_tx>
    64be:	e7f7      	b.n	64b0 <notify_tx+0x30>
    64c0:	2000030c 	.word	0x2000030c

000064c4 <send_frag>:
{
    64c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64c8:	4606      	mov	r6, r0
    64ca:	460d      	mov	r5, r1
    64cc:	4690      	mov	r8, r2
    64ce:	461c      	mov	r4, r3
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    64d0:	f7ff fe00 	bl	60d4 <bt_conn_get_pkts>
    64d4:	4607      	mov	r7, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    64d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    64da:	f022 f93d 	bl	28758 <_impl_k_sem_take>
	notify_tx();
    64de:	f7ff ffcf 	bl	6480 <notify_tx>
	if (conn->state != BT_CONN_CONNECTED) {
    64e2:	7b33      	ldrb	r3, [r6, #12]
    64e4:	2b03      	cmp	r3, #3
    64e6:	d006      	beq.n	64f6 <send_frag+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    64e8:	4638      	mov	r0, r7
    64ea:	f022 f922 	bl	28732 <_impl_k_sem_give>
	if (always_consume) {
    64ee:	bb4c      	cbnz	r4, 6544 <send_frag+0x80>
}
    64f0:	4620      	mov	r0, r4
    64f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_push(buf, sizeof(*hdr));
    64f6:	2104      	movs	r1, #4
    64f8:	f105 0008 	add.w	r0, r5, #8
    64fc:	f013 fe51 	bl	1a1a2 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6500:	f9b6 3000 	ldrsh.w	r3, [r6]
    6504:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
    6508:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    650c:	89ab      	ldrh	r3, [r5, #12]
    650e:	3b04      	subs	r3, #4
    6510:	8043      	strh	r3, [r0, #2]
    6512:	f105 0310 	add.w	r3, r5, #16
    6516:	89ea      	ldrh	r2, [r5, #14]
    6518:	4413      	add	r3, r2
    651a:	3303      	adds	r3, #3
    651c:	f023 0303 	bic.w	r3, r3, #3
	cb = conn_tx(buf)->cb;
    6520:	6819      	ldr	r1, [r3, #0]
    6522:	2202      	movs	r2, #2
    6524:	701a      	strb	r2, [r3, #0]
	node = add_pending_tx(conn, cb);
    6526:	4630      	mov	r0, r6
    6528:	f7ff fd48 	bl	5fbc <add_pending_tx>
    652c:	4680      	mov	r8, r0
	err = bt_send(buf);
    652e:	4628      	mov	r0, r5
    6530:	f7fe fafa 	bl	4b28 <bt_send>
	if (err) {
    6534:	b908      	cbnz	r0, 653a <send_frag+0x76>
	return true;
    6536:	2401      	movs	r4, #1
    6538:	e7da      	b.n	64f0 <send_frag+0x2c>
		remove_pending_tx(conn, node);
    653a:	4641      	mov	r1, r8
    653c:	4630      	mov	r0, r6
    653e:	f7ff fd5f 	bl	6000 <remove_pending_tx>
		goto fail;
    6542:	e7d1      	b.n	64e8 <send_frag+0x24>
		net_buf_unref(buf);
    6544:	4628      	mov	r0, r5
    6546:	f013 fda9 	bl	1a09c <net_buf_unref>
	return false;
    654a:	2400      	movs	r4, #0
    654c:	e7d0      	b.n	64f0 <send_frag+0x2c>
	...

00006550 <bt_conn_add_le>:
{
    6550:	b538      	push	{r3, r4, r5, lr}
    6552:	4605      	mov	r5, r0
	struct bt_conn *conn = conn_new();
    6554:	f7ff fd90 	bl	6078 <conn_new>
	if (!conn) {
    6558:	4604      	mov	r4, r0
    655a:	b1a0      	cbz	r0, 6586 <bt_conn_add_le+0x36>
    655c:	2207      	movs	r2, #7
    655e:	4629      	mov	r1, r5
    6560:	3048      	adds	r0, #72	; 0x48
    6562:	f7f9 fead 	bl	2c0 <memcpy>
	conn->sec_level = BT_SECURITY_LOW;
    6566:	2301      	movs	r3, #1
    6568:	7223      	strb	r3, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    656a:	7263      	strb	r3, [r4, #9]
	conn->type = BT_CONN_TYPE_LE;
    656c:	2300      	movs	r3, #0
    656e:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    6570:	2318      	movs	r3, #24
    6572:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    6576:	2328      	movs	r3, #40	; 0x28
    6578:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    657c:	4903      	ldr	r1, [pc, #12]	; (658c <bt_conn_add_le+0x3c>)
    657e:	f104 0074 	add.w	r0, r4, #116	; 0x74
    6582:	f022 fea7 	bl	292d4 <k_delayed_work_init>
}
    6586:	4620      	mov	r0, r4
    6588:	bd38      	pop	{r3, r4, r5, pc}
    658a:	bf00      	nop
    658c:	00006b8d 	.word	0x00006b8d

00006590 <bt_conn_addr_le_cmp>:
{
    6590:	b538      	push	{r3, r4, r5, lr}
    6592:	4604      	mov	r4, r0
    6594:	460d      	mov	r5, r1
	return memcmp(a, b, sizeof(*a));
    6596:	2207      	movs	r2, #7
    6598:	f100 0148 	add.w	r1, r0, #72	; 0x48
    659c:	4628      	mov	r0, r5
    659e:	f023 f807 	bl	295b0 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    65a2:	4603      	mov	r3, r0
    65a4:	b140      	cbz	r0, 65b8 <bt_conn_addr_le_cmp+0x28>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    65a6:	78e3      	ldrb	r3, [r4, #3]
    65a8:	b143      	cbz	r3, 65bc <bt_conn_addr_le_cmp+0x2c>
    65aa:	2207      	movs	r2, #7
    65ac:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    65b0:	4628      	mov	r0, r5
    65b2:	f022 fffd 	bl	295b0 <memcmp>
    65b6:	4603      	mov	r3, r0
}
    65b8:	4618      	mov	r0, r3
    65ba:	bd38      	pop	{r3, r4, r5, pc}
    65bc:	2207      	movs	r2, #7
    65be:	f104 0156 	add.w	r1, r4, #86	; 0x56
    65c2:	4628      	mov	r0, r5
    65c4:	f022 fff4 	bl	295b0 <memcmp>
    65c8:	4603      	mov	r3, r0
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
    65ca:	e7f5      	b.n	65b8 <bt_conn_addr_le_cmp+0x28>

000065cc <bt_conn_ref>:
	atomic_inc(&conn->ref);
    65cc:	f100 0344 	add.w	r3, r0, #68	; 0x44
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    65d0:	f3bf 8f5b 	dmb	ish
    65d4:	e853 2f00 	ldrex	r2, [r3]
    65d8:	3201      	adds	r2, #1
    65da:	e843 2100 	strex	r1, r2, [r3]
    65de:	2900      	cmp	r1, #0
    65e0:	d1f8      	bne.n	65d4 <bt_conn_ref+0x8>
    65e2:	f3bf 8f5b 	dmb	ish
}
    65e6:	4770      	bx	lr

000065e8 <bt_conn_lookup_handle>:
{
    65e8:	b508      	push	{r3, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    65ea:	2300      	movs	r3, #0
    65ec:	b10b      	cbz	r3, 65f2 <bt_conn_lookup_handle+0xa>
	return NULL;
    65ee:	2000      	movs	r0, #0
}
    65f0:	bd08      	pop	{r3, pc}
		if (!atomic_get(&conns[i].ref)) {
    65f2:	229c      	movs	r2, #156	; 0x9c
    65f4:	fb02 f203 	mul.w	r2, r2, r3
    65f8:	3240      	adds	r2, #64	; 0x40
    65fa:	490f      	ldr	r1, [pc, #60]	; (6638 <bt_conn_lookup_handle+0x50>)
    65fc:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    65fe:	f3bf 8f5b 	dmb	ish
    6602:	6852      	ldr	r2, [r2, #4]
    6604:	f3bf 8f5b 	dmb	ish
    6608:	b13a      	cbz	r2, 661a <bt_conn_lookup_handle+0x32>
		if (conns[i].state != BT_CONN_CONNECTED &&
    660a:	229c      	movs	r2, #156	; 0x9c
    660c:	fb02 1203 	mla	r2, r2, r3, r1
    6610:	7b12      	ldrb	r2, [r2, #12]
    6612:	3a03      	subs	r2, #3
    6614:	b2d2      	uxtb	r2, r2
    6616:	2a01      	cmp	r2, #1
    6618:	d901      	bls.n	661e <bt_conn_lookup_handle+0x36>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    661a:	3301      	adds	r3, #1
    661c:	e7e6      	b.n	65ec <bt_conn_lookup_handle+0x4>
		if (conns[i].handle == handle) {
    661e:	229c      	movs	r2, #156	; 0x9c
    6620:	fb02 f203 	mul.w	r2, r2, r3
    6624:	5a8a      	ldrh	r2, [r1, r2]
    6626:	4282      	cmp	r2, r0
    6628:	d1f7      	bne.n	661a <bt_conn_lookup_handle+0x32>
			return bt_conn_ref(&conns[i]);
    662a:	209c      	movs	r0, #156	; 0x9c
    662c:	fb00 1003 	mla	r0, r0, r3, r1
    6630:	f7ff ffcc 	bl	65cc <bt_conn_ref>
    6634:	bd08      	pop	{r3, pc}
    6636:	bf00      	nop
    6638:	2000030c 	.word	0x2000030c

0000663c <bt_conn_lookup_addr_le>:
{
    663c:	b570      	push	{r4, r5, r6, lr}
    663e:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6640:	2400      	movs	r4, #0
    6642:	b10c      	cbz	r4, 6648 <bt_conn_lookup_addr_le+0xc>
	return NULL;
    6644:	2000      	movs	r0, #0
}
    6646:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    6648:	239c      	movs	r3, #156	; 0x9c
    664a:	fb03 f304 	mul.w	r3, r3, r4
    664e:	3340      	adds	r3, #64	; 0x40
    6650:	4a0d      	ldr	r2, [pc, #52]	; (6688 <bt_conn_lookup_addr_le+0x4c>)
    6652:	4413      	add	r3, r2
    6654:	f3bf 8f5b 	dmb	ish
    6658:	685b      	ldr	r3, [r3, #4]
    665a:	f3bf 8f5b 	dmb	ish
    665e:	b123      	cbz	r3, 666a <bt_conn_lookup_addr_le+0x2e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    6660:	239c      	movs	r3, #156	; 0x9c
    6662:	fb03 2304 	mla	r3, r3, r4, r2
    6666:	789b      	ldrb	r3, [r3, #2]
    6668:	b10b      	cbz	r3, 666e <bt_conn_lookup_addr_le+0x32>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    666a:	3401      	adds	r4, #1
    666c:	e7e9      	b.n	6642 <bt_conn_lookup_addr_le+0x6>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    666e:	269c      	movs	r6, #156	; 0x9c
    6670:	fb06 2604 	mla	r6, r6, r4, r2
    6674:	4629      	mov	r1, r5
    6676:	4630      	mov	r0, r6
    6678:	f7ff ff8a 	bl	6590 <bt_conn_addr_le_cmp>
    667c:	2800      	cmp	r0, #0
    667e:	d1f4      	bne.n	666a <bt_conn_lookup_addr_le+0x2e>
			return bt_conn_ref(&conns[i]);
    6680:	4630      	mov	r0, r6
    6682:	f7ff ffa3 	bl	65cc <bt_conn_ref>
    6686:	bd70      	pop	{r4, r5, r6, pc}
    6688:	2000030c 	.word	0x2000030c

0000668c <bt_conn_lookup_state_le>:
{
    668c:	b570      	push	{r4, r5, r6, lr}
    668e:	4605      	mov	r5, r0
    6690:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6692:	2400      	movs	r4, #0
    6694:	b10c      	cbz	r4, 669a <bt_conn_lookup_state_le+0xe>
	return NULL;
    6696:	2000      	movs	r0, #0
}
    6698:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    669a:	239c      	movs	r3, #156	; 0x9c
    669c:	fb03 f304 	mul.w	r3, r3, r4
    66a0:	3340      	adds	r3, #64	; 0x40
    66a2:	4a12      	ldr	r2, [pc, #72]	; (66ec <bt_conn_lookup_state_le+0x60>)
    66a4:	4413      	add	r3, r2
    66a6:	f3bf 8f5b 	dmb	ish
    66aa:	685b      	ldr	r3, [r3, #4]
    66ac:	f3bf 8f5b 	dmb	ish
    66b0:	b19b      	cbz	r3, 66da <bt_conn_lookup_state_le+0x4e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    66b2:	239c      	movs	r3, #156	; 0x9c
    66b4:	fb03 2304 	mla	r3, r3, r4, r2
    66b8:	789b      	ldrb	r3, [r3, #2]
    66ba:	b973      	cbnz	r3, 66da <bt_conn_lookup_state_le+0x4e>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    66bc:	b135      	cbz	r5, 66cc <bt_conn_lookup_state_le+0x40>
    66be:	4629      	mov	r1, r5
    66c0:	209c      	movs	r0, #156	; 0x9c
    66c2:	fb00 2004 	mla	r0, r0, r4, r2
    66c6:	f7ff ff63 	bl	6590 <bt_conn_addr_le_cmp>
    66ca:	b930      	cbnz	r0, 66da <bt_conn_lookup_state_le+0x4e>
		if (conns[i].state == state) {
    66cc:	239c      	movs	r3, #156	; 0x9c
    66ce:	4a07      	ldr	r2, [pc, #28]	; (66ec <bt_conn_lookup_state_le+0x60>)
    66d0:	fb03 2304 	mla	r3, r3, r4, r2
    66d4:	7b1b      	ldrb	r3, [r3, #12]
    66d6:	42b3      	cmp	r3, r6
    66d8:	d001      	beq.n	66de <bt_conn_lookup_state_le+0x52>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    66da:	3401      	adds	r4, #1
    66dc:	e7da      	b.n	6694 <bt_conn_lookup_state_le+0x8>
			return bt_conn_ref(&conns[i]);
    66de:	209c      	movs	r0, #156	; 0x9c
    66e0:	fb00 2004 	mla	r0, r0, r4, r2
    66e4:	f7ff ff72 	bl	65cc <bt_conn_ref>
    66e8:	bd70      	pop	{r4, r5, r6, pc}
    66ea:	bf00      	nop
    66ec:	2000030c 	.word	0x2000030c

000066f0 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    66f0:	3044      	adds	r0, #68	; 0x44
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    66f2:	f3bf 8f5b 	dmb	ish
    66f6:	e850 3f00 	ldrex	r3, [r0]
    66fa:	3b01      	subs	r3, #1
    66fc:	e840 3200 	strex	r2, r3, [r0]
    6700:	2a00      	cmp	r2, #0
    6702:	d1f8      	bne.n	66f6 <bt_conn_unref+0x6>
    6704:	f3bf 8f5b 	dmb	ish
    6708:	4770      	bx	lr

0000670a <conn_cleanup>:
{
    670a:	b510      	push	{r4, lr}
    670c:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    670e:	e002      	b.n	6716 <conn_cleanup+0xc>
		net_buf_unref(buf);
    6710:	4618      	mov	r0, r3
    6712:	f013 fcc3 	bl	1a09c <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    6716:	2100      	movs	r1, #0
    6718:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    671c:	f013 fc91 	bl	1a042 <net_buf_get>
    6720:	4603      	mov	r3, r0
    6722:	2800      	cmp	r0, #0
    6724:	d1f4      	bne.n	6710 <conn_cleanup+0x6>
	bt_conn_notify_tx(conn);
    6726:	4620      	mov	r0, r4
    6728:	f7ff fe96 	bl	6458 <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    672c:	4620      	mov	r0, r4
    672e:	f7ff fc97 	bl	6060 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    6732:	4620      	mov	r0, r4
    6734:	f7ff ffdc 	bl	66f0 <bt_conn_unref>
    6738:	bd10      	pop	{r4, pc}
	...

0000673c <bt_conn_prepare_events>:
{
    673c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6740:	4606      	mov	r6, r0
	conn_change.signaled = 0;
    6742:	4b30      	ldr	r3, [pc, #192]	; (6804 <bt_conn_prepare_events+0xc8>)
    6744:	2400      	movs	r4, #0
    6746:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    6748:	4622      	mov	r2, r4
    674a:	2101      	movs	r1, #1
    674c:	f021 f93c 	bl	279c8 <k_poll_event_init>
    6750:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6752:	b114      	cbz	r4, 675a <bt_conn_prepare_events+0x1e>
}
    6754:	4628      	mov	r0, r5
    6756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = &conns[i];
    675a:	4a2b      	ldr	r2, [pc, #172]	; (6808 <bt_conn_prepare_events+0xcc>)
    675c:	239c      	movs	r3, #156	; 0x9c
    675e:	fb03 f304 	mul.w	r3, r3, r4
    6762:	18d0      	adds	r0, r2, r3
		if (!atomic_get(&conn->ref)) {
    6764:	3340      	adds	r3, #64	; 0x40
    6766:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6768:	f3bf 8f5b 	dmb	ish
    676c:	685b      	ldr	r3, [r3, #4]
    676e:	f3bf 8f5b 	dmb	ish
    6772:	b143      	cbz	r3, 6786 <bt_conn_prepare_events+0x4a>
		if (conn->state == BT_CONN_DISCONNECTED &&
    6774:	7b03      	ldrb	r3, [r0, #12]
    6776:	b143      	cbz	r3, 678a <bt_conn_prepare_events+0x4e>
		if (conn->state != BT_CONN_CONNECTED) {
    6778:	239c      	movs	r3, #156	; 0x9c
    677a:	4a23      	ldr	r2, [pc, #140]	; (6808 <bt_conn_prepare_events+0xcc>)
    677c:	fb03 2304 	mla	r3, r3, r4, r2
    6780:	7b1b      	ldrb	r3, [r3, #12]
    6782:	2b03      	cmp	r3, #3
    6784:	d015      	beq.n	67b2 <bt_conn_prepare_events+0x76>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6786:	3401      	adds	r4, #1
    6788:	e7e3      	b.n	6752 <bt_conn_prepare_events+0x16>
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    678a:	4603      	mov	r3, r0
    678c:	3304      	adds	r3, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    678e:	f3bf 8f5b 	dmb	ish
    6792:	e853 2f00 	ldrex	r2, [r3]
    6796:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    679a:	e843 1700 	strex	r7, r1, [r3]
    679e:	2f00      	cmp	r7, #0
    67a0:	d1f7      	bne.n	6792 <bt_conn_prepare_events+0x56>
    67a2:	f3bf 8f5b 	dmb	ish
		if (conn->state == BT_CONN_DISCONNECTED &&
    67a6:	f012 0f40 	tst.w	r2, #64	; 0x40
    67aa:	d0e5      	beq.n	6778 <bt_conn_prepare_events+0x3c>
			conn_cleanup(conn);
    67ac:	f7ff ffad 	bl	670a <conn_cleanup>
			continue;
    67b0:	e7e9      	b.n	6786 <bt_conn_prepare_events+0x4a>
		k_poll_event_init(&events[ev_count],
    67b2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    67b6:	ea4f 0883 	mov.w	r8, r3, lsl #2
    67ba:	44b0      	add	r8, r6
				  &conn->tx_notify);
    67bc:	4691      	mov	r9, r2
    67be:	279c      	movs	r7, #156	; 0x9c
    67c0:	fb07 f704 	mul.w	r7, r7, r4
    67c4:	f107 0318 	add.w	r3, r7, #24
    67c8:	4413      	add	r3, r2
		k_poll_event_init(&events[ev_count],
    67ca:	3304      	adds	r3, #4
    67cc:	2200      	movs	r2, #0
    67ce:	2104      	movs	r1, #4
    67d0:	4640      	mov	r0, r8
    67d2:	f021 f8f9 	bl	279c8 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    67d6:	1c6b      	adds	r3, r5, #1
    67d8:	2201      	movs	r2, #1
    67da:	f888 200c 	strb.w	r2, [r8, #12]
		k_poll_event_init(&events[ev_count],
    67de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    67e2:	ea4f 0883 	mov.w	r8, r3, lsl #2
    67e6:	44b0      	add	r8, r6
				  &conn->tx_queue);
    67e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
    67ec:	444b      	add	r3, r9
		k_poll_event_init(&events[ev_count],
    67ee:	3304      	adds	r3, #4
    67f0:	2200      	movs	r2, #0
    67f2:	2104      	movs	r1, #4
    67f4:	4640      	mov	r0, r8
    67f6:	f021 f8e7 	bl	279c8 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    67fa:	3502      	adds	r5, #2
    67fc:	2302      	movs	r3, #2
    67fe:	f888 300c 	strb.w	r3, [r8, #12]
    6802:	e7c0      	b.n	6786 <bt_conn_prepare_events+0x4a>
    6804:	2000b8a8 	.word	0x2000b8a8
    6808:	2000030c 	.word	0x2000030c

0000680c <bt_conn_set_state>:
{
    680c:	b538      	push	{r3, r4, r5, lr}
	if (conn->state == state) {
    680e:	7b05      	ldrb	r5, [r0, #12]
    6810:	428d      	cmp	r5, r1
    6812:	d00a      	beq.n	682a <bt_conn_set_state+0x1e>
    6814:	4604      	mov	r4, r0
	conn->state = state;
    6816:	7301      	strb	r1, [r0, #12]
	switch (old_state) {
    6818:	b145      	cbz	r5, 682c <bt_conn_set_state+0x20>
    681a:	2d02      	cmp	r5, #2
    681c:	d009      	beq.n	6832 <bt_conn_set_state+0x26>
	switch (conn->state) {
    681e:	7b23      	ldrb	r3, [r4, #12]
    6820:	2b02      	cmp	r3, #2
    6822:	d068      	beq.n	68f6 <bt_conn_set_state+0xea>
    6824:	2b03      	cmp	r3, #3
    6826:	d00b      	beq.n	6840 <bt_conn_set_state+0x34>
    6828:	b31b      	cbz	r3, 6872 <bt_conn_set_state+0x66>
    682a:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_ref(conn);
    682c:	f7ff fece 	bl	65cc <bt_conn_ref>
		break;
    6830:	e7f5      	b.n	681e <bt_conn_set_state+0x12>
		    conn->type == BT_CONN_TYPE_LE) {
    6832:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6834:	2b00      	cmp	r3, #0
    6836:	d1f2      	bne.n	681e <bt_conn_set_state+0x12>
			k_delayed_work_cancel(&conn->le.update_work);
    6838:	3074      	adds	r0, #116	; 0x74
    683a:	f022 fd69 	bl	29310 <k_delayed_work_cancel>
    683e:	e7ee      	b.n	681e <bt_conn_set_state+0x12>
		if (conn->type == BT_CONN_TYPE_SCO) {
    6840:	78a3      	ldrb	r3, [r4, #2]
    6842:	2b02      	cmp	r3, #2
    6844:	d0f1      	beq.n	682a <bt_conn_set_state+0x1e>
		k_fifo_init(&conn->tx_queue);
    6846:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    684a:	f021 fba8 	bl	27f9e <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    684e:	f104 001c 	add.w	r0, r4, #28
    6852:	f021 fba4 	bl	27f9e <k_queue_init>
		k_poll_signal(&conn_change, 0);
    6856:	2100      	movs	r1, #0
    6858:	482d      	ldr	r0, [pc, #180]	; (6910 <bt_conn_set_state+0x104>)
    685a:	f021 fb41 	bl	27ee0 <k_poll_signal>
	list->head = NULL;
    685e:	2300      	movs	r3, #0
    6860:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
    6862:	6423      	str	r3, [r4, #64]	; 0x40
		bt_l2cap_connected(conn);
    6864:	4620      	mov	r0, r4
    6866:	f001 f87d 	bl	7964 <bt_l2cap_connected>
		notify_connected(conn);
    686a:	4620      	mov	r0, r4
    686c:	f7ff fb74 	bl	5f58 <notify_connected>
		break;
    6870:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
    6872:	78a3      	ldrb	r3, [r4, #2]
    6874:	2b02      	cmp	r3, #2
    6876:	d00d      	beq.n	6894 <bt_conn_set_state+0x88>
		if (old_state == BT_CONN_CONNECTED ||
    6878:	1eeb      	subs	r3, r5, #3
    687a:	b2db      	uxtb	r3, r3
    687c:	2b01      	cmp	r3, #1
    687e:	d90d      	bls.n	689c <bt_conn_set_state+0x90>
		} else if (old_state == BT_CONN_CONNECT) {
    6880:	2d02      	cmp	r5, #2
    6882:	d02d      	beq.n	68e0 <bt_conn_set_state+0xd4>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    6884:	2d01      	cmp	r5, #1
    6886:	d1d0      	bne.n	682a <bt_conn_set_state+0x1e>
			if (conn->err) {
    6888:	7ae3      	ldrb	r3, [r4, #11]
    688a:	bb83      	cbnz	r3, 68ee <bt_conn_set_state+0xe2>
			bt_conn_unref(conn);
    688c:	4620      	mov	r0, r4
    688e:	f7ff ff2f 	bl	66f0 <bt_conn_unref>
    6892:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    6894:	4620      	mov	r0, r4
    6896:	f7ff ff2b 	bl	66f0 <bt_conn_unref>
			break;
    689a:	bd38      	pop	{r3, r4, r5, pc}
			bt_l2cap_disconnected(conn);
    689c:	4620      	mov	r0, r4
    689e:	f000 fd21 	bl	72e4 <bt_l2cap_disconnected>
			notify_disconnected(conn);
    68a2:	4620      	mov	r0, r4
    68a4:	f7ff fb6a 	bl	5f7c <notify_disconnected>
			process_unack_tx(conn);
    68a8:	4620      	mov	r0, r4
    68aa:	f7ff fc17 	bl	60dc <process_unack_tx>
			if (conn->type == BT_CONN_TYPE_LE) {
    68ae:	78a3      	ldrb	r3, [r4, #2]
    68b0:	b18b      	cbz	r3, 68d6 <bt_conn_set_state+0xca>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
    68b2:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    68b4:	f3bf 8f5b 	dmb	ish
    68b8:	e854 3f00 	ldrex	r3, [r4]
    68bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    68c0:	e844 3200 	strex	r2, r3, [r4]
    68c4:	2a00      	cmp	r2, #0
    68c6:	d1f7      	bne.n	68b8 <bt_conn_set_state+0xac>
    68c8:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
    68cc:	2100      	movs	r1, #0
    68ce:	4810      	ldr	r0, [pc, #64]	; (6910 <bt_conn_set_state+0x104>)
    68d0:	f021 fb06 	bl	27ee0 <k_poll_signal>
    68d4:	bd38      	pop	{r3, r4, r5, pc}
				k_delayed_work_cancel(&conn->le.update_work);
    68d6:	f104 0074 	add.w	r0, r4, #116	; 0x74
    68da:	f022 fd19 	bl	29310 <k_delayed_work_cancel>
    68de:	e7e8      	b.n	68b2 <bt_conn_set_state+0xa6>
			notify_connected(conn);
    68e0:	4620      	mov	r0, r4
    68e2:	f7ff fb39 	bl	5f58 <notify_connected>
			bt_conn_unref(conn);
    68e6:	4620      	mov	r0, r4
    68e8:	f7ff ff02 	bl	66f0 <bt_conn_unref>
    68ec:	bd38      	pop	{r3, r4, r5, pc}
				notify_connected(conn);
    68ee:	4620      	mov	r0, r4
    68f0:	f7ff fb32 	bl	5f58 <notify_connected>
    68f4:	e7ca      	b.n	688c <bt_conn_set_state+0x80>
		if (conn->type == BT_CONN_TYPE_SCO) {
    68f6:	78a3      	ldrb	r3, [r4, #2]
    68f8:	2b02      	cmp	r3, #2
    68fa:	d096      	beq.n	682a <bt_conn_set_state+0x1e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    68fc:	2b00      	cmp	r3, #0
    68fe:	d194      	bne.n	682a <bt_conn_set_state+0x1e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    6900:	f640 32b8 	movw	r2, #3000	; 0xbb8
    6904:	f104 0174 	add.w	r1, r4, #116	; 0x74
    6908:	4802      	ldr	r0, [pc, #8]	; (6914 <bt_conn_set_state+0x108>)
    690a:	f022 fd5b 	bl	293c4 <k_delayed_work_submit_to_queue>
    690e:	e78c      	b.n	682a <bt_conn_set_state+0x1e>
    6910:	2000b8a8 	.word	0x2000b8a8
    6914:	20002a70 	.word	0x20002a70

00006918 <bt_hci_disconnect>:
{
    6918:	b570      	push	{r4, r5, r6, lr}
    691a:	4605      	mov	r5, r0
    691c:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    691e:	2103      	movs	r1, #3
    6920:	f240 4006 	movw	r0, #1030	; 0x406
    6924:	f7fd fbac 	bl	4080 <bt_hci_cmd_create>
	if (!buf) {
    6928:	b1a8      	cbz	r0, 6956 <bt_hci_disconnect+0x3e>
    692a:	4604      	mov	r4, r0
	disconn = net_buf_add(buf, sizeof(*disconn));
    692c:	2103      	movs	r1, #3
    692e:	3008      	adds	r0, #8
    6930:	f013 fc00 	bl	1a134 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    6934:	882b      	ldrh	r3, [r5, #0]
    6936:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    6938:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    693a:	4621      	mov	r1, r4
    693c:	f240 4006 	movw	r0, #1030	; 0x406
    6940:	f7fe f8fc 	bl	4b3c <bt_hci_cmd_send>
	if (err) {
    6944:	4604      	mov	r4, r0
    6946:	b108      	cbz	r0, 694c <bt_hci_disconnect+0x34>
}
    6948:	4620      	mov	r0, r4
    694a:	bd70      	pop	{r4, r5, r6, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    694c:	2104      	movs	r1, #4
    694e:	4628      	mov	r0, r5
    6950:	f7ff ff5c 	bl	680c <bt_conn_set_state>
	return 0;
    6954:	e7f8      	b.n	6948 <bt_hci_disconnect+0x30>
		return -ENOBUFS;
    6956:	f06f 0468 	mvn.w	r4, #104	; 0x68
    695a:	e7f5      	b.n	6948 <bt_hci_disconnect+0x30>

0000695c <bt_conn_get_info>:
	info->type = conn->type;
    695c:	7883      	ldrb	r3, [r0, #2]
    695e:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
    6960:	78c3      	ldrb	r3, [r0, #3]
    6962:	704b      	strb	r3, [r1, #1]
	switch (conn->type) {
    6964:	7883      	ldrb	r3, [r0, #2]
    6966:	b9cb      	cbnz	r3, 699c <bt_conn_get_info+0x40>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    6968:	78c3      	ldrb	r3, [r0, #3]
    696a:	b983      	cbnz	r3, 698e <bt_conn_get_info+0x32>
			info->le.src = &conn->le.init_addr;
    696c:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    6970:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.resp_addr;
    6972:	f100 0356 	add.w	r3, r0, #86	; 0x56
    6976:	608b      	str	r3, [r1, #8]
		info->le.interval = conn->le.interval;
    6978:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    697c:	818b      	strh	r3, [r1, #12]
		info->le.latency = conn->le.latency;
    697e:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    6982:	81cb      	strh	r3, [r1, #14]
		info->le.timeout = conn->le.timeout;
    6984:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    6988:	820b      	strh	r3, [r1, #16]
		return 0;
    698a:	2000      	movs	r0, #0
    698c:	4770      	bx	lr
			info->le.src = &conn->le.resp_addr;
    698e:	f100 0356 	add.w	r3, r0, #86	; 0x56
    6992:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.init_addr;
    6994:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    6998:	608b      	str	r3, [r1, #8]
    699a:	e7ed      	b.n	6978 <bt_conn_get_info+0x1c>
	return -EINVAL;
    699c:	f06f 0015 	mvn.w	r0, #21
}
    69a0:	4770      	bx	lr
	...

000069a4 <bt_le_set_auto_conn>:
	return conn;
}

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    69a4:	b570      	push	{r4, r5, r6, lr}
    69a6:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    69a8:	460d      	mov	r5, r1
    69aa:	b121      	cbz	r1, 69b6 <bt_le_set_auto_conn+0x12>
    69ac:	4608      	mov	r0, r1
    69ae:	f7fd ffd1 	bl	4954 <bt_le_conn_params_valid>
    69b2:	2800      	cmp	r0, #0
    69b4:	d05a      	beq.n	6a6c <bt_le_set_auto_conn+0xc8>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    69b6:	4630      	mov	r0, r6
    69b8:	f7ff fe40 	bl	663c <bt_conn_lookup_addr_le>
	if (!conn) {
    69bc:	4604      	mov	r4, r0
    69be:	b1d8      	cbz	r0, 69f8 <bt_le_set_auto_conn+0x54>
		if (!conn) {
			return -ENOMEM;
		}
	}

	if (param) {
    69c0:	b33d      	cbz	r5, 6a12 <bt_le_set_auto_conn+0x6e>
		bt_conn_set_param_le(conn, param);
    69c2:	4629      	mov	r1, r5
    69c4:	4620      	mov	r0, r4
    69c6:	f7ff fb41 	bl	604c <bt_conn_set_param_le>

		if (!atomic_test_and_set_bit(conn->flags,
    69ca:	1d23      	adds	r3, r4, #4
    69cc:	f3bf 8f5b 	dmb	ish
    69d0:	e853 2f00 	ldrex	r2, [r3]
    69d4:	f042 0101 	orr.w	r1, r2, #1
    69d8:	e843 1000 	strex	r0, r1, [r3]
    69dc:	2800      	cmp	r0, #0
    69de:	d1f7      	bne.n	69d0 <bt_le_set_auto_conn+0x2c>
    69e0:	f3bf 8f5b 	dmb	ish
    69e4:	f012 0f01 	tst.w	r2, #1
    69e8:	d00f      	beq.n	6a0a <bt_le_set_auto_conn+0x66>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    69ea:	7b23      	ldrb	r3, [r4, #12]
    69ec:	b363      	cbz	r3, 6a48 <bt_le_set_auto_conn+0xa4>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
		}
		bt_le_scan_update(false);
	}

	bt_conn_unref(conn);
    69ee:	4620      	mov	r0, r4
    69f0:	f7ff fe7e 	bl	66f0 <bt_conn_unref>

	return 0;
    69f4:	2000      	movs	r0, #0
    69f6:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_add_le(addr);
    69f8:	4630      	mov	r0, r6
    69fa:	f7ff fda9 	bl	6550 <bt_conn_add_le>
		if (!conn) {
    69fe:	4604      	mov	r4, r0
    6a00:	2800      	cmp	r0, #0
    6a02:	d1dd      	bne.n	69c0 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    6a04:	f06f 000b 	mvn.w	r0, #11
}
    6a08:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_ref(conn);
    6a0a:	4620      	mov	r0, r4
    6a0c:	f7ff fdde 	bl	65cc <bt_conn_ref>
    6a10:	e7eb      	b.n	69ea <bt_le_set_auto_conn+0x46>
		if (atomic_test_and_clear_bit(conn->flags,
    6a12:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6a14:	f3bf 8f5b 	dmb	ish
    6a18:	e853 2f00 	ldrex	r2, [r3]
    6a1c:	f022 0101 	bic.w	r1, r2, #1
    6a20:	e843 1000 	strex	r0, r1, [r3]
    6a24:	2800      	cmp	r0, #0
    6a26:	d1f7      	bne.n	6a18 <bt_le_set_auto_conn+0x74>
    6a28:	f3bf 8f5b 	dmb	ish
    6a2c:	f012 0f01 	tst.w	r2, #1
    6a30:	d0db      	beq.n	69ea <bt_le_set_auto_conn+0x46>
			bt_conn_unref(conn);
    6a32:	4620      	mov	r0, r4
    6a34:	f7ff fe5c 	bl	66f0 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    6a38:	7b23      	ldrb	r3, [r4, #12]
    6a3a:	2b01      	cmp	r3, #1
    6a3c:	d1d5      	bne.n	69ea <bt_le_set_auto_conn+0x46>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6a3e:	2100      	movs	r1, #0
    6a40:	4620      	mov	r0, r4
    6a42:	f7ff fee3 	bl	680c <bt_conn_set_state>
    6a46:	e7d0      	b.n	69ea <bt_le_set_auto_conn+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6a48:	f3bf 8f5b 	dmb	ish
    6a4c:	4b09      	ldr	r3, [pc, #36]	; (6a74 <bt_le_set_auto_conn+0xd0>)
    6a4e:	681b      	ldr	r3, [r3, #0]
    6a50:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    6a54:	f013 0f02 	tst.w	r3, #2
    6a58:	d0c9      	beq.n	69ee <bt_le_set_auto_conn+0x4a>
		if (param) {
    6a5a:	b11d      	cbz	r5, 6a64 <bt_le_set_auto_conn+0xc0>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    6a5c:	2101      	movs	r1, #1
    6a5e:	4620      	mov	r0, r4
    6a60:	f7ff fed4 	bl	680c <bt_conn_set_state>
		bt_le_scan_update(false);
    6a64:	2000      	movs	r0, #0
    6a66:	f7fe f919 	bl	4c9c <bt_le_scan_update>
    6a6a:	e7c0      	b.n	69ee <bt_le_set_auto_conn+0x4a>
		return -EINVAL;
    6a6c:	f06f 0015 	mvn.w	r0, #21
    6a70:	bd70      	pop	{r4, r5, r6, pc}
    6a72:	bf00      	nop
    6a74:	2000b7e0 	.word	0x2000b7e0

00006a78 <bt_conn_disconnect>:
{
    6a78:	b538      	push	{r3, r4, r5, lr}
    6a7a:	4604      	mov	r4, r0
    6a7c:	460d      	mov	r5, r1
	    conn->type == BT_CONN_TYPE_LE) {
    6a7e:	7883      	ldrb	r3, [r0, #2]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6a80:	b13b      	cbz	r3, 6a92 <bt_conn_disconnect+0x1a>
	switch (conn->state) {
    6a82:	7b23      	ldrb	r3, [r4, #12]
    6a84:	3b01      	subs	r3, #1
    6a86:	2b03      	cmp	r3, #3
    6a88:	d823      	bhi.n	6ad2 <bt_conn_disconnect+0x5a>
    6a8a:	e8df f003 	tbb	[pc, r3]
    6a8e:	1309      	.short	0x1309
    6a90:	071d      	.short	0x071d
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    6a92:	2100      	movs	r1, #0
    6a94:	3048      	adds	r0, #72	; 0x48
    6a96:	f7ff ff85 	bl	69a4 <bt_le_set_auto_conn>
    6a9a:	e7f2      	b.n	6a82 <bt_conn_disconnect+0xa>
		return 0;
    6a9c:	2000      	movs	r0, #0
    6a9e:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
    6aa0:	72e5      	strb	r5, [r4, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6aa2:	2100      	movs	r1, #0
    6aa4:	4620      	mov	r0, r4
    6aa6:	f7ff feb1 	bl	680c <bt_conn_set_state>
		bt_le_scan_update(false);
    6aaa:	2000      	movs	r0, #0
    6aac:	f7fe f8f6 	bl	4c9c <bt_le_scan_update>
		return 0;
    6ab0:	2000      	movs	r0, #0
    6ab2:	bd38      	pop	{r3, r4, r5, pc}
			k_delayed_work_cancel(&conn->le.update_work);
    6ab4:	f104 0074 	add.w	r0, r4, #116	; 0x74
    6ab8:	f022 fc2a 	bl	29310 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    6abc:	2100      	movs	r1, #0
    6abe:	f242 000e 	movw	r0, #8206	; 0x200e
    6ac2:	f7fe f83b 	bl	4b3c <bt_hci_cmd_send>
    6ac6:	bd38      	pop	{r3, r4, r5, pc}
		return bt_hci_disconnect(conn, reason);
    6ac8:	4629      	mov	r1, r5
    6aca:	4620      	mov	r0, r4
    6acc:	f7ff ff24 	bl	6918 <bt_hci_disconnect>
    6ad0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    6ad2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    6ad6:	bd38      	pop	{r3, r4, r5, pc}

00006ad8 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    6ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ada:	4607      	mov	r7, r0
    6adc:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    6ade:	210e      	movs	r1, #14
    6ae0:	f242 0013 	movw	r0, #8211	; 0x2013
    6ae4:	f7fd facc 	bl	4080 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    6ae8:	b1c8      	cbz	r0, 6b1e <bt_conn_le_conn_update+0x46>
    6aea:	4606      	mov	r6, r0
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    6aec:	210e      	movs	r1, #14
    6aee:	3008      	adds	r0, #8
    6af0:	f013 fb20 	bl	1a134 <net_buf_simple_add>
    6af4:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    6af6:	220e      	movs	r2, #14
    6af8:	2100      	movs	r1, #0
    6afa:	f022 fded 	bl	296d8 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    6afe:	883b      	ldrh	r3, [r7, #0]
    6b00:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    6b02:	882b      	ldrh	r3, [r5, #0]
    6b04:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    6b06:	886b      	ldrh	r3, [r5, #2]
    6b08:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    6b0a:	88ab      	ldrh	r3, [r5, #4]
    6b0c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    6b0e:	88eb      	ldrh	r3, [r5, #6]
    6b10:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    6b12:	4631      	mov	r1, r6
    6b14:	f242 0013 	movw	r0, #8211	; 0x2013
    6b18:	f7fe f810 	bl	4b3c <bt_hci_cmd_send>
    6b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    6b1e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006b24 <bt_conn_le_param_update>:
{
    6b24:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    6b26:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    6b2a:	880a      	ldrh	r2, [r1, #0]
    6b2c:	4293      	cmp	r3, r2
    6b2e:	d307      	bcc.n	6b40 <bt_conn_le_param_update+0x1c>
	    conn->le.interval <= param->interval_max &&
    6b30:	884a      	ldrh	r2, [r1, #2]
	if (conn->le.interval >= param->interval_min &&
    6b32:	4293      	cmp	r3, r2
    6b34:	d804      	bhi.n	6b40 <bt_conn_le_param_update+0x1c>
	    conn->le.latency == param->latency &&
    6b36:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    6b3a:	888b      	ldrh	r3, [r1, #4]
	    conn->le.interval <= param->interval_max &&
    6b3c:	429a      	cmp	r2, r3
    6b3e:	d016      	beq.n	6b6e <bt_conn_le_param_update+0x4a>
    6b40:	460d      	mov	r5, r1
    6b42:	4604      	mov	r4, r0
	k_delayed_work_cancel(&conn->le.update_work);
    6b44:	3074      	adds	r0, #116	; 0x74
    6b46:	f022 fbe3 	bl	29310 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6b4a:	4b0f      	ldr	r3, [pc, #60]	; (6b88 <bt_conn_le_param_update+0x64>)
    6b4c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    6b50:	f013 0f02 	tst.w	r3, #2
    6b54:	d004      	beq.n	6b60 <bt_conn_le_param_update+0x3c>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    6b56:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6b5a:	f013 0f02 	tst.w	r3, #2
    6b5e:	d101      	bne.n	6b64 <bt_conn_le_param_update+0x40>
	    (conn->role == BT_HCI_ROLE_MASTER)) {
    6b60:	78e3      	ldrb	r3, [r4, #3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    6b62:	b963      	cbnz	r3, 6b7e <bt_conn_le_param_update+0x5a>
		return bt_conn_le_conn_update(conn, param);
    6b64:	4629      	mov	r1, r5
    6b66:	4620      	mov	r0, r4
    6b68:	f7ff ffb6 	bl	6ad8 <bt_conn_le_conn_update>
    6b6c:	bd38      	pop	{r3, r4, r5, pc}
	    conn->le.timeout == param->timeout) {
    6b6e:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    6b72:	88cb      	ldrh	r3, [r1, #6]
	    conn->le.latency == param->latency &&
    6b74:	429a      	cmp	r2, r3
    6b76:	d1e3      	bne.n	6b40 <bt_conn_le_param_update+0x1c>
		return -EALREADY;
    6b78:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    6b7c:	bd38      	pop	{r3, r4, r5, pc}
	return bt_l2cap_update_conn_param(conn, param);
    6b7e:	4629      	mov	r1, r5
    6b80:	4620      	mov	r0, r4
    6b82:	f001 f821 	bl	7bc8 <bt_l2cap_update_conn_param>
    6b86:	bd38      	pop	{r3, r4, r5, pc}
    6b88:	2000b770 	.word	0x2000b770

00006b8c <le_conn_update>:
{
    6b8c:	b500      	push	{lr}
    6b8e:	b083      	sub	sp, #12
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    6b90:	f1a0 0274 	sub.w	r2, r0, #116	; 0x74
	    conn->state == BT_CONN_CONNECT) {
    6b94:	f810 3c68 	ldrb.w	r3, [r0, #-104]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6b98:	2b02      	cmp	r3, #2
    6b9a:	d016      	beq.n	6bca <le_conn_update+0x3e>
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    6b9c:	f830 3c14 	ldrh.w	r3, [r0, #-20]
    6ba0:	f8ad 3000 	strh.w	r3, [sp]
    6ba4:	f830 3c12 	ldrh.w	r3, [r0, #-18]
    6ba8:	f8ad 3002 	strh.w	r3, [sp, #2]
    6bac:	f830 3c10 	ldrh.w	r3, [r0, #-16]
    6bb0:	f8ad 3004 	strh.w	r3, [sp, #4]
    6bb4:	f830 3c0e 	ldrh.w	r3, [r0, #-14]
    6bb8:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    6bbc:	4669      	mov	r1, sp
    6bbe:	4610      	mov	r0, r2
    6bc0:	f7ff ffb0 	bl	6b24 <bt_conn_le_param_update>
}
    6bc4:	b003      	add	sp, #12
    6bc6:	f85d fb04 	ldr.w	pc, [sp], #4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    6bca:	2113      	movs	r1, #19
    6bcc:	4610      	mov	r0, r2
    6bce:	f7ff ff53 	bl	6a78 <bt_conn_disconnect>
		return;
    6bd2:	e7f7      	b.n	6bc4 <le_conn_update+0x38>

00006bd4 <le_conn_update>:
{
    6bd4:	b510      	push	{r4, lr}
    6bd6:	b082      	sub	sp, #8
    6bd8:	460c      	mov	r4, r1
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    6bda:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    6bdc:	8810      	ldrh	r0, [r2, #0]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    6bde:	8893      	ldrh	r3, [r2, #4]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    6be0:	88d1      	ldrh	r1, [r2, #6]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    6be2:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    6be4:	9201      	str	r2, [sp, #4]
    6be6:	9100      	str	r1, [sp, #0]
    6be8:	2200      	movs	r2, #0
    6bea:	4611      	mov	r1, r2
    6bec:	f010 fdb4 	bl	17758 <ll_conn_update>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    6bf0:	b100      	cbz	r0, 6bf4 <le_conn_update+0x20>
    6bf2:	200c      	movs	r0, #12
    6bf4:	f005 fd82 	bl	c6fc <cmd_status>
    6bf8:	6020      	str	r0, [r4, #0]
}
    6bfa:	b002      	add	sp, #8
    6bfc:	bd10      	pop	{r4, pc}
	...

00006c00 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    6c00:	b538      	push	{r3, r4, r5, lr}
    6c02:	460d      	mov	r5, r1
	struct net_buf *buf;

	if (!pool) {
    6c04:	4603      	mov	r3, r0
    6c06:	b150      	cbz	r0, 6c1e <bt_conn_create_pdu+0x1e>
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    6c08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6c0c:	4618      	mov	r0, r3
    6c0e:	f013 f9d7 	bl	19fc0 <net_buf_alloc>
    6c12:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    6c14:	1d29      	adds	r1, r5, #4
    6c16:	f013 fa2e 	bl	1a076 <net_buf_reserve>

	return buf;
}
    6c1a:	4620      	mov	r0, r4
    6c1c:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
    6c1e:	4b01      	ldr	r3, [pc, #4]	; (6c24 <bt_conn_create_pdu+0x24>)
    6c20:	e7f2      	b.n	6c08 <bt_conn_create_pdu+0x8>
    6c22:	bf00      	nop
    6c24:	2000cff4 	.word	0x2000cff4

00006c28 <create_frag>:
{
    6c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c2a:	4606      	mov	r6, r0
    6c2c:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(NULL, 0);
    6c2e:	2100      	movs	r1, #0
    6c30:	4608      	mov	r0, r1
    6c32:	f7ff ffe5 	bl	6c00 <bt_conn_create_pdu>
    6c36:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    6c38:	7b33      	ldrb	r3, [r6, #12]
    6c3a:	2b03      	cmp	r3, #3
    6c3c:	d121      	bne.n	6c82 <create_frag+0x5a>
    6c3e:	f100 0310 	add.w	r3, r0, #16
    6c42:	89c2      	ldrh	r2, [r0, #14]
    6c44:	4413      	add	r3, r2
    6c46:	3303      	adds	r3, #3
    6c48:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(frag)->cb = NULL;
    6c4c:	2200      	movs	r2, #0
    6c4e:	601a      	str	r2, [r3, #0]
	return bt_dev.le.mtu;
    6c50:	4b10      	ldr	r3, [pc, #64]	; (6c94 <create_frag+0x6c>)
    6c52:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    6c56:	f100 0608 	add.w	r6, r0, #8
    6c5a:	4630      	mov	r0, r6
    6c5c:	f013 fad3 	bl	1a206 <net_buf_simple_tailroom>
    6c60:	4287      	cmp	r7, r0
    6c62:	d212      	bcs.n	6c8a <create_frag+0x62>
	return bt_dev.le.mtu;
    6c64:	4b0b      	ldr	r3, [pc, #44]	; (6c94 <create_frag+0x6c>)
    6c66:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    6c6a:	463a      	mov	r2, r7
    6c6c:	f854 1f08 	ldr.w	r1, [r4, #8]!
    6c70:	4630      	mov	r0, r6
    6c72:	f013 fa65 	bl	1a140 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    6c76:	4639      	mov	r1, r7
    6c78:	4620      	mov	r0, r4
    6c7a:	f013 faa8 	bl	1a1ce <net_buf_simple_pull>
}
    6c7e:	4628      	mov	r0, r5
    6c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
    6c82:	f013 fa0b 	bl	1a09c <net_buf_unref>
		return NULL;
    6c86:	2500      	movs	r5, #0
    6c88:	e7f9      	b.n	6c7e <create_frag+0x56>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    6c8a:	4630      	mov	r0, r6
    6c8c:	f013 fabb 	bl	1a206 <net_buf_simple_tailroom>
    6c90:	b287      	uxth	r7, r0
    6c92:	e7ea      	b.n	6c6a <create_frag+0x42>
    6c94:	2000b770 	.word	0x2000b770

00006c98 <send_buf>:
{
    6c98:	b538      	push	{r3, r4, r5, lr}
    6c9a:	4605      	mov	r5, r0
    6c9c:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
    6c9e:	898a      	ldrh	r2, [r1, #12]
	return bt_dev.le.mtu;
    6ca0:	4b1b      	ldr	r3, [pc, #108]	; (6d10 <send_buf+0x78>)
    6ca2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
	if (buf->len <= conn_mtu(conn)) {
    6ca6:	429a      	cmp	r2, r3
    6ca8:	d91f      	bls.n	6cea <send_buf+0x52>
	frag = create_frag(conn, buf);
    6caa:	f7ff ffbd 	bl	6c28 <create_frag>
	if (!frag) {
    6cae:	4601      	mov	r1, r0
    6cb0:	b350      	cbz	r0, 6d08 <send_buf+0x70>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    6cb2:	2301      	movs	r3, #1
    6cb4:	2200      	movs	r2, #0
    6cb6:	4628      	mov	r0, r5
    6cb8:	f7ff fc04 	bl	64c4 <send_frag>
    6cbc:	4603      	mov	r3, r0
    6cbe:	b1c8      	cbz	r0, 6cf4 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
    6cc0:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.mtu;
    6cc2:	4a13      	ldr	r2, [pc, #76]	; (6d10 <send_buf+0x78>)
    6cc4:	f8b2 2088 	ldrh.w	r2, [r2, #136]	; 0x88
	while (buf->len > conn_mtu(conn)) {
    6cc8:	429a      	cmp	r2, r3
    6cca:	d215      	bcs.n	6cf8 <send_buf+0x60>
		frag = create_frag(conn, buf);
    6ccc:	4621      	mov	r1, r4
    6cce:	4628      	mov	r0, r5
    6cd0:	f7ff ffaa 	bl	6c28 <create_frag>
		if (!frag) {
    6cd4:	4601      	mov	r1, r0
    6cd6:	b1c8      	cbz	r0, 6d0c <send_buf+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    6cd8:	2301      	movs	r3, #1
    6cda:	461a      	mov	r2, r3
    6cdc:	4628      	mov	r0, r5
    6cde:	f7ff fbf1 	bl	64c4 <send_frag>
    6ce2:	4603      	mov	r3, r0
    6ce4:	2800      	cmp	r0, #0
    6ce6:	d1eb      	bne.n	6cc0 <send_buf+0x28>
    6ce8:	e004      	b.n	6cf4 <send_buf+0x5c>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    6cea:	2300      	movs	r3, #0
    6cec:	461a      	mov	r2, r3
    6cee:	f7ff fbe9 	bl	64c4 <send_frag>
    6cf2:	4603      	mov	r3, r0
}
    6cf4:	4618      	mov	r0, r3
    6cf6:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, BT_ACL_CONT, false);
    6cf8:	2300      	movs	r3, #0
    6cfa:	2201      	movs	r2, #1
    6cfc:	4621      	mov	r1, r4
    6cfe:	4628      	mov	r0, r5
    6d00:	f7ff fbe0 	bl	64c4 <send_frag>
    6d04:	4603      	mov	r3, r0
    6d06:	e7f5      	b.n	6cf4 <send_buf+0x5c>
		return false;
    6d08:	2300      	movs	r3, #0
    6d0a:	e7f3      	b.n	6cf4 <send_buf+0x5c>
			return false;
    6d0c:	2300      	movs	r3, #0
    6d0e:	e7f1      	b.n	6cf4 <send_buf+0x5c>
    6d10:	2000b770 	.word	0x2000b770

00006d14 <bt_conn_process_tx>:
{
    6d14:	b538      	push	{r3, r4, r5, lr}
    6d16:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    6d18:	7b03      	ldrb	r3, [r0, #12]
    6d1a:	b97b      	cbnz	r3, 6d3c <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    6d1c:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6d1e:	f3bf 8f5b 	dmb	ish
    6d22:	e853 2f00 	ldrex	r2, [r3]
    6d26:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    6d2a:	e843 1000 	strex	r0, r1, [r3]
    6d2e:	2800      	cmp	r0, #0
    6d30:	d1f7      	bne.n	6d22 <bt_conn_process_tx+0xe>
    6d32:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    6d36:	f012 0f40 	tst.w	r2, #64	; 0x40
    6d3a:	d10c      	bne.n	6d56 <bt_conn_process_tx+0x42>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    6d3c:	2100      	movs	r1, #0
    6d3e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    6d42:	f013 f97e 	bl	1a042 <net_buf_get>
	BT_ASSERT(buf);
    6d46:	4605      	mov	r5, r0
    6d48:	b148      	cbz	r0, 6d5e <bt_conn_process_tx+0x4a>
	if (!send_buf(conn, buf)) {
    6d4a:	4601      	mov	r1, r0
    6d4c:	4620      	mov	r0, r4
    6d4e:	f7ff ffa3 	bl	6c98 <send_buf>
    6d52:	b150      	cbz	r0, 6d6a <bt_conn_process_tx+0x56>
    6d54:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
    6d56:	4620      	mov	r0, r4
    6d58:	f7ff fcd7 	bl	670a <conn_cleanup>
		return;
    6d5c:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    6d5e:	4040      	eors	r0, r0
    6d60:	f380 8811 	msr	BASEPRI, r0
    6d64:	f04f 0004 	mov.w	r0, #4
    6d68:	df02      	svc	2
		net_buf_unref(buf);
    6d6a:	4628      	mov	r0, r5
    6d6c:	f013 f996 	bl	1a09c <net_buf_unref>
    6d70:	e7f0      	b.n	6d54 <bt_conn_process_tx+0x40>
	...

00006d74 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    6d74:	4b03      	ldr	r3, [pc, #12]	; (6d84 <bt_conn_get_id+0x10>)
    6d76:	1ac0      	subs	r0, r0, r3
    6d78:	1080      	asrs	r0, r0, #2
    6d7a:	4b03      	ldr	r3, [pc, #12]	; (6d88 <bt_conn_get_id+0x14>)
    6d7c:	fb03 f000 	mul.w	r0, r3, r0
}
    6d80:	b2c0      	uxtb	r0, r0
    6d82:	4770      	bx	lr
    6d84:	2000030c 	.word	0x2000030c
    6d88:	96f96f97 	.word	0x96f96f97

00006d8c <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    6d8c:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    6d8e:	2300      	movs	r3, #0
    6d90:	e000      	b.n	6d94 <bt_conn_init+0x8>
    6d92:	3301      	adds	r3, #1
    6d94:	2b01      	cmp	r3, #1
    6d96:	d80d      	bhi.n	6db4 <bt_conn_init+0x28>
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    6d98:	491a      	ldr	r1, [pc, #104]	; (6e04 <bt_conn_init+0x78>)
    6d9a:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
	node->next = list->head;
    6d9e:	4a1a      	ldr	r2, [pc, #104]	; (6e08 <bt_conn_init+0x7c>)
    6da0:	6814      	ldr	r4, [r2, #0]
    6da2:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
	list->head = node;
    6da6:	6010      	str	r0, [r2, #0]
	if (!list->tail) {
    6da8:	6852      	ldr	r2, [r2, #4]
    6daa:	2a00      	cmp	r2, #0
    6dac:	d1f1      	bne.n	6d92 <bt_conn_init+0x6>
		list->tail = list->head;
    6dae:	4a16      	ldr	r2, [pc, #88]	; (6e08 <bt_conn_init+0x7c>)
    6db0:	6050      	str	r0, [r2, #4]
    6db2:	e7ee      	b.n	6d92 <bt_conn_init+0x6>
	}

	bt_att_init();
    6db4:	f002 fa68 	bl	9288 <bt_att_init>

	err = bt_smp_init();
    6db8:	f005 fba2 	bl	c500 <bt_smp_init>
	if (err) {
    6dbc:	4605      	mov	r5, r0
    6dbe:	b108      	cbz	r0, 6dc4 <bt_conn_init+0x38>
			}
		}
	}

	return 0;
}
    6dc0:	4628      	mov	r0, r5
    6dc2:	bd38      	pop	{r3, r4, r5, pc}
	bt_l2cap_init();
    6dc4:	f000 ff20 	bl	7c08 <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6dc8:	462c      	mov	r4, r5
    6dca:	2c00      	cmp	r4, #0
    6dcc:	d1f8      	bne.n	6dc0 <bt_conn_init+0x34>
			struct bt_conn *conn = &conns[i];
    6dce:	4a0f      	ldr	r2, [pc, #60]	; (6e0c <bt_conn_init+0x80>)
    6dd0:	239c      	movs	r3, #156	; 0x9c
    6dd2:	fb03 f304 	mul.w	r3, r3, r4
    6dd6:	18d0      	adds	r0, r2, r3
			if (!atomic_get(&conn->ref)) {
    6dd8:	3340      	adds	r3, #64	; 0x40
    6dda:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6ddc:	f3bf 8f5b 	dmb	ish
    6de0:	685b      	ldr	r3, [r3, #4]
    6de2:	f3bf 8f5b 	dmb	ish
    6de6:	b90b      	cbnz	r3, 6dec <bt_conn_init+0x60>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6de8:	3401      	adds	r4, #1
    6dea:	e7ee      	b.n	6dca <bt_conn_init+0x3e>
    6dec:	f3bf 8f5b 	dmb	ish
    6df0:	6843      	ldr	r3, [r0, #4]
    6df2:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(conn->flags,
    6df6:	f013 0f01 	tst.w	r3, #1
    6dfa:	d0f5      	beq.n	6de8 <bt_conn_init+0x5c>
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    6dfc:	2101      	movs	r1, #1
    6dfe:	f7ff fd05 	bl	680c <bt_conn_set_state>
    6e02:	e7f1      	b.n	6de8 <bt_conn_init+0x5c>
    6e04:	200002fc 	.word	0x200002fc
    6e08:	20000498 	.word	0x20000498
    6e0c:	2000030c 	.word	0x2000030c

00006e10 <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    6e10:	4a05      	ldr	r2, [pc, #20]	; (6e28 <get_ident+0x18>)
    6e12:	7813      	ldrb	r3, [r2, #0]
    6e14:	3301      	adds	r3, #1
    6e16:	b2db      	uxtb	r3, r3
    6e18:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    6e1a:	b90b      	cbnz	r3, 6e20 <get_ident+0x10>
		ident++;
    6e1c:	3301      	adds	r3, #1
    6e1e:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
    6e20:	4b01      	ldr	r3, [pc, #4]	; (6e28 <get_ident+0x18>)
    6e22:	7818      	ldrb	r0, [r3, #0]
    6e24:	4770      	bx	lr
    6e26:	bf00      	nop
    6e28:	2000053c 	.word	0x2000053c

00006e2c <__l2cap_lookup_ident>:
	return NULL;
}

static struct bt_l2cap_le_chan *
__l2cap_lookup_ident(struct bt_conn *conn, u16_t ident, bool remove)
{
    6e2c:	b430      	push	{r4, r5}
	return list->head;
    6e2e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6e30:	b113      	cbz	r3, 6e38 <__l2cap_lookup_ident+0xc>
    6e32:	3b08      	subs	r3, #8
    6e34:	2400      	movs	r4, #0
    6e36:	e01b      	b.n	6e70 <__l2cap_lookup_ident+0x44>
    6e38:	2300      	movs	r3, #0
    6e3a:	e7fb      	b.n	6e34 <__l2cap_lookup_ident+0x8>
		if (chan->ident == ident) {
			if (remove) {
    6e3c:	b35a      	cbz	r2, 6e96 <__l2cap_lookup_ident+0x6a>
				sys_slist_remove(&conn->channels, prev,
    6e3e:	f103 0208 	add.w	r2, r3, #8
	if (!prev_node) {
    6e42:	b144      	cbz	r4, 6e56 <__l2cap_lookup_ident+0x2a>
		prev_node->next = node->next;
    6e44:	6899      	ldr	r1, [r3, #8]
    6e46:	6021      	str	r1, [r4, #0]
		if (list->tail == node) {
    6e48:	6c01      	ldr	r1, [r0, #64]	; 0x40
    6e4a:	428a      	cmp	r2, r1
    6e4c:	d00a      	beq.n	6e64 <__l2cap_lookup_ident+0x38>
	node->next = NULL;
    6e4e:	2200      	movs	r2, #0
    6e50:	609a      	str	r2, [r3, #8]
						 &chan->node);
			}
			return BT_L2CAP_LE_CHAN(chan);
    6e52:	4618      	mov	r0, r3
    6e54:	e01d      	b.n	6e92 <__l2cap_lookup_ident+0x66>
		list->head = node->next;
    6e56:	6899      	ldr	r1, [r3, #8]
    6e58:	63c1      	str	r1, [r0, #60]	; 0x3c
		if (list->tail == node) {
    6e5a:	6c04      	ldr	r4, [r0, #64]	; 0x40
    6e5c:	4294      	cmp	r4, r2
    6e5e:	d1f6      	bne.n	6e4e <__l2cap_lookup_ident+0x22>
			list->tail = list->head;
    6e60:	6401      	str	r1, [r0, #64]	; 0x40
    6e62:	e7f4      	b.n	6e4e <__l2cap_lookup_ident+0x22>
			list->tail = prev_node;
    6e64:	6404      	str	r4, [r0, #64]	; 0x40
    6e66:	e7f2      	b.n	6e4e <__l2cap_lookup_ident+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6e68:	4625      	mov	r5, r4
    6e6a:	e00a      	b.n	6e82 <__l2cap_lookup_ident+0x56>
    6e6c:	4623      	mov	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6e6e:	3b08      	subs	r3, #8
    6e70:	b173      	cbz	r3, 6e90 <__l2cap_lookup_ident+0x64>
		if (chan->ident == ident) {
    6e72:	f893 503c 	ldrb.w	r5, [r3, #60]	; 0x3c
    6e76:	428d      	cmp	r5, r1
    6e78:	d0e0      	beq.n	6e3c <__l2cap_lookup_ident+0x10>
    6e7a:	f113 0408 	adds.w	r4, r3, #8
    6e7e:	d0f3      	beq.n	6e68 <__l2cap_lookup_ident+0x3c>
	return node->next;
    6e80:	689d      	ldr	r5, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6e82:	b11d      	cbz	r5, 6e8c <__l2cap_lookup_ident+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6e84:	2c00      	cmp	r4, #0
    6e86:	d0f1      	beq.n	6e6c <__l2cap_lookup_ident+0x40>
	return node->next;
    6e88:	689b      	ldr	r3, [r3, #8]
    6e8a:	e7f0      	b.n	6e6e <__l2cap_lookup_ident+0x42>
    6e8c:	2300      	movs	r3, #0
    6e8e:	e7ef      	b.n	6e70 <__l2cap_lookup_ident+0x44>
		}

		prev = &chan->node;
	}

	return NULL;
    6e90:	2000      	movs	r0, #0
}
    6e92:	bc30      	pop	{r4, r5}
    6e94:	4770      	bx	lr
			return BT_L2CAP_LE_CHAN(chan);
    6e96:	4618      	mov	r0, r3
    6e98:	e7fb      	b.n	6e92 <__l2cap_lookup_ident+0x66>
	...

00006e9c <l2cap_server_lookup_psm>:
	return list->head;
    6e9c:	4b0d      	ldr	r3, [pc, #52]	; (6ed4 <l2cap_server_lookup_psm+0x38>)
    6e9e:	681b      	ldr	r3, [r3, #0]
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    6ea0:	b10b      	cbz	r3, 6ea6 <l2cap_server_lookup_psm+0xa>
    6ea2:	3b08      	subs	r3, #8
    6ea4:	e006      	b.n	6eb4 <l2cap_server_lookup_psm+0x18>
    6ea6:	2300      	movs	r3, #0
    6ea8:	e004      	b.n	6eb4 <l2cap_server_lookup_psm+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6eaa:	4611      	mov	r1, r2
    6eac:	e00a      	b.n	6ec4 <l2cap_server_lookup_psm+0x28>
	return node->next;
    6eae:	689a      	ldr	r2, [r3, #8]
    6eb0:	f1a2 0308 	sub.w	r3, r2, #8
    6eb4:	b163      	cbz	r3, 6ed0 <l2cap_server_lookup_psm+0x34>
		if (server->psm == psm) {
    6eb6:	881a      	ldrh	r2, [r3, #0]
    6eb8:	4282      	cmp	r2, r0
    6eba:	d009      	beq.n	6ed0 <l2cap_server_lookup_psm+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6ebc:	f113 0208 	adds.w	r2, r3, #8
    6ec0:	d0f3      	beq.n	6eaa <l2cap_server_lookup_psm+0xe>
	return node->next;
    6ec2:	6899      	ldr	r1, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    6ec4:	b111      	cbz	r1, 6ecc <l2cap_server_lookup_psm+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6ec6:	2a00      	cmp	r2, #0
    6ec8:	d1f1      	bne.n	6eae <l2cap_server_lookup_psm+0x12>
    6eca:	e7f1      	b.n	6eb0 <l2cap_server_lookup_psm+0x14>
    6ecc:	2300      	movs	r3, #0
    6ece:	e7f1      	b.n	6eb4 <l2cap_server_lookup_psm+0x18>
			return server;
		}
	}

	return NULL;
}
    6ed0:	4618      	mov	r0, r3
    6ed2:	4770      	bx	lr
    6ed4:	20000548 	.word	0x20000548

00006ed8 <l2cap_remove_tx_cid>:
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	/* Protect fixed channels against accidental removal */
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    6ed8:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
    6edc:	b29b      	uxth	r3, r3
    6ede:	2b3f      	cmp	r3, #63	; 0x3f
    6ee0:	d835      	bhi.n	6f4e <l2cap_remove_tx_cid+0x76>
	return list->head;
    6ee2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6ee4:	b12b      	cbz	r3, 6ef2 <l2cap_remove_tx_cid+0x1a>
    6ee6:	3b08      	subs	r3, #8
    6ee8:	2200      	movs	r2, #0
    6eea:	2b00      	cmp	r3, #0
    6eec:	d031      	beq.n	6f52 <l2cap_remove_tx_cid+0x7a>
{
    6eee:	b410      	push	{r4}
    6ef0:	e01c      	b.n	6f2c <l2cap_remove_tx_cid+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6ef2:	2300      	movs	r3, #0
    6ef4:	e7f8      	b.n	6ee8 <l2cap_remove_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
			sys_slist_remove(&conn->channels, prev, &chan->node);
    6ef6:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    6efa:	b14a      	cbz	r2, 6f10 <l2cap_remove_tx_cid+0x38>
		prev_node->next = node->next;
    6efc:	689c      	ldr	r4, [r3, #8]
    6efe:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    6f00:	6c04      	ldr	r4, [r0, #64]	; 0x40
    6f02:	42a1      	cmp	r1, r4
    6f04:	d00b      	beq.n	6f1e <l2cap_remove_tx_cid+0x46>
	node->next = NULL;
    6f06:	2200      	movs	r2, #0
    6f08:	609a      	str	r2, [r3, #8]
			return BT_L2CAP_LE_CHAN(chan);
    6f0a:	4618      	mov	r0, r3

		prev = &chan->node;
	}

	return NULL;
}
    6f0c:	bc10      	pop	{r4}
    6f0e:	4770      	bx	lr
		list->head = node->next;
    6f10:	689a      	ldr	r2, [r3, #8]
    6f12:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    6f14:	6c04      	ldr	r4, [r0, #64]	; 0x40
    6f16:	428c      	cmp	r4, r1
    6f18:	d1f5      	bne.n	6f06 <l2cap_remove_tx_cid+0x2e>
			list->tail = list->head;
    6f1a:	6402      	str	r2, [r0, #64]	; 0x40
    6f1c:	e7f3      	b.n	6f06 <l2cap_remove_tx_cid+0x2e>
			list->tail = prev_node;
    6f1e:	6402      	str	r2, [r0, #64]	; 0x40
    6f20:	e7f1      	b.n	6f06 <l2cap_remove_tx_cid+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6f22:	4614      	mov	r4, r2
    6f24:	e00a      	b.n	6f3c <l2cap_remove_tx_cid+0x64>
    6f26:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6f28:	3b08      	subs	r3, #8
    6f2a:	b173      	cbz	r3, 6f4a <l2cap_remove_tx_cid+0x72>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    6f2c:	f8b3 4040 	ldrh.w	r4, [r3, #64]	; 0x40
    6f30:	42a1      	cmp	r1, r4
    6f32:	d0e0      	beq.n	6ef6 <l2cap_remove_tx_cid+0x1e>
    6f34:	f113 0208 	adds.w	r2, r3, #8
    6f38:	d0f3      	beq.n	6f22 <l2cap_remove_tx_cid+0x4a>
	return node->next;
    6f3a:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6f3c:	b11c      	cbz	r4, 6f46 <l2cap_remove_tx_cid+0x6e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6f3e:	2a00      	cmp	r2, #0
    6f40:	d0f1      	beq.n	6f26 <l2cap_remove_tx_cid+0x4e>
	return node->next;
    6f42:	689b      	ldr	r3, [r3, #8]
    6f44:	e7f0      	b.n	6f28 <l2cap_remove_tx_cid+0x50>
    6f46:	2300      	movs	r3, #0
    6f48:	e7ef      	b.n	6f2a <l2cap_remove_tx_cid+0x52>
	return NULL;
    6f4a:	2000      	movs	r0, #0
    6f4c:	e7de      	b.n	6f0c <l2cap_remove_tx_cid+0x34>
		return NULL;
    6f4e:	2000      	movs	r0, #0
    6f50:	4770      	bx	lr
	return NULL;
    6f52:	2000      	movs	r0, #0
}
    6f54:	4770      	bx	lr

00006f56 <l2cap_connected>:

	return 0;
}

static void l2cap_connected(struct bt_l2cap_chan *chan)
{
    6f56:	4770      	bx	lr

00006f58 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    6f58:	4770      	bx	lr
	...

00006f5c <l2cap_accept>:
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    6f5c:	2000      	movs	r0, #0
    6f5e:	b110      	cbz	r0, 6f66 <l2cap_accept+0xa>
		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    6f60:	f06f 000b 	mvn.w	r0, #11
}
    6f64:	4770      	bx	lr
		if (l2cap->chan.chan.conn) {
    6f66:	239c      	movs	r3, #156	; 0x9c
    6f68:	fb03 f300 	mul.w	r3, r3, r0
    6f6c:	4a06      	ldr	r2, [pc, #24]	; (6f88 <l2cap_accept+0x2c>)
    6f6e:	58d3      	ldr	r3, [r2, r3]
    6f70:	b10b      	cbz	r3, 6f76 <l2cap_accept+0x1a>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    6f72:	3001      	adds	r0, #1
    6f74:	e7f3      	b.n	6f5e <l2cap_accept+0x2>
		l2cap->chan.chan.ops = &ops;
    6f76:	239c      	movs	r3, #156	; 0x9c
    6f78:	4a03      	ldr	r2, [pc, #12]	; (6f88 <l2cap_accept+0x2c>)
    6f7a:	fb03 2300 	mla	r3, r3, r0, r2
    6f7e:	4a03      	ldr	r2, [pc, #12]	; (6f8c <l2cap_accept+0x30>)
    6f80:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    6f82:	600b      	str	r3, [r1, #0]
		return 0;
    6f84:	4770      	bx	lr
    6f86:	bf00      	nop
    6f88:	200004a0 	.word	0x200004a0
    6f8c:	2000b8c4 	.word	0x2000b8c4

00006f90 <l2cap_alloc_frag>:
{
    6f90:	b538      	push	{r3, r4, r5, lr}
    6f92:	4605      	mov	r5, r0
	frag = chan->chan.ops->alloc_buf(&chan->chan);
    6f94:	6843      	ldr	r3, [r0, #4]
    6f96:	68db      	ldr	r3, [r3, #12]
    6f98:	4798      	blx	r3
	if (!frag) {
    6f9a:	4604      	mov	r4, r0
    6f9c:	b120      	cbz	r0, 6fa8 <l2cap_alloc_frag+0x18>
	net_buf_frag_add(chan->_sdu, frag);
    6f9e:	4601      	mov	r1, r0
    6fa0:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    6fa4:	f013 f8ab 	bl	1a0fe <net_buf_frag_add>
}
    6fa8:	4620      	mov	r0, r4
    6faa:	bd38      	pop	{r3, r4, r5, pc}

00006fac <l2cap_chan_rx_give_credits>:
{
    6fac:	b538      	push	{r3, r4, r5, lr}
    6fae:	4605      	mov	r5, r0
	while (credits--) {
    6fb0:	e004      	b.n	6fbc <l2cap_chan_rx_give_credits+0x10>
    6fb2:	f105 0048 	add.w	r0, r5, #72	; 0x48
    6fb6:	f021 fbbc 	bl	28732 <_impl_k_sem_give>
    6fba:	4621      	mov	r1, r4
    6fbc:	1e4b      	subs	r3, r1, #1
    6fbe:	b29c      	uxth	r4, r3
    6fc0:	2900      	cmp	r1, #0
    6fc2:	d1f6      	bne.n	6fb2 <l2cap_chan_rx_give_credits+0x6>
}
    6fc4:	bd38      	pop	{r3, r4, r5, pc}

00006fc6 <l2cap_chan_tx_give_credits>:
{
    6fc6:	b538      	push	{r3, r4, r5, lr}
    6fc8:	4605      	mov	r5, r0
	while (credits--) {
    6fca:	e004      	b.n	6fd6 <l2cap_chan_tx_give_credits+0x10>
    6fcc:	f105 0068 	add.w	r0, r5, #104	; 0x68
    6fd0:	f021 fbaf 	bl	28732 <_impl_k_sem_give>
    6fd4:	4621      	mov	r1, r4
    6fd6:	1e4b      	subs	r3, r1, #1
    6fd8:	b29c      	uxth	r4, r3
    6fda:	2900      	cmp	r1, #0
    6fdc:	d1f6      	bne.n	6fcc <l2cap_chan_tx_give_credits+0x6>
}
    6fde:	bd38      	pop	{r3, r4, r5, pc}

00006fe0 <l2cap_chan_destroy>:
{
    6fe0:	b510      	push	{r4, lr}
    6fe2:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
    6fe4:	3010      	adds	r0, #16
    6fe6:	f022 f993 	bl	29310 <k_delayed_work_cancel>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    6fea:	e002      	b.n	6ff2 <l2cap_chan_destroy+0x12>
		net_buf_unref(buf);
    6fec:	4618      	mov	r0, r3
    6fee:	f013 f855 	bl	1a09c <net_buf_unref>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    6ff2:	2100      	movs	r1, #0
    6ff4:	f104 0080 	add.w	r0, r4, #128	; 0x80
    6ff8:	f013 f823 	bl	1a042 <net_buf_get>
    6ffc:	4603      	mov	r3, r0
    6ffe:	2800      	cmp	r0, #0
    7000:	d1f4      	bne.n	6fec <l2cap_chan_destroy+0xc>
	if (ch->_sdu) {
    7002:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    7006:	b130      	cbz	r0, 7016 <l2cap_chan_destroy+0x36>
		net_buf_unref(ch->_sdu);
    7008:	f013 f848 	bl	1a09c <net_buf_unref>
		ch->_sdu = NULL;
    700c:	2300      	movs	r3, #0
    700e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		ch->_sdu_len = 0;
    7012:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    7016:	bd10      	pop	{r4, pc}

00007018 <l2cap_chan_le_get_tx_buf>:
{
    7018:	b508      	push	{r3, lr}
    701a:	4603      	mov	r3, r0
	if (ch->tx_buf) {
    701c:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    7020:	b118      	cbz	r0, 702a <l2cap_chan_le_get_tx_buf+0x12>
		ch->tx_buf = NULL;
    7022:	2200      	movs	r2, #0
    7024:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		return buf;
    7028:	bd08      	pop	{r3, pc}
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    702a:	2100      	movs	r1, #0
    702c:	f103 0080 	add.w	r0, r3, #128	; 0x80
    7030:	f013 f807 	bl	1a042 <net_buf_get>
}
    7034:	bd08      	pop	{r3, pc}

00007036 <l2cap_chan_tx_init>:
{
    7036:	b510      	push	{r4, lr}
    7038:	4604      	mov	r4, r0
	memset(&chan->tx, 0, sizeof(chan->tx));
    703a:	2220      	movs	r2, #32
    703c:	2100      	movs	r1, #0
    703e:	3060      	adds	r0, #96	; 0x60
    7040:	f022 fb4a 	bl	296d8 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    7044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7048:	2100      	movs	r1, #0
    704a:	f104 0068 	add.w	r0, r4, #104	; 0x68
    704e:	f021 fb67 	bl	28720 <_impl_k_sem_init>
	k_fifo_init(&chan->tx_queue);
    7052:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7056:	f020 ffa2 	bl	27f9e <k_queue_init>
    705a:	bd10      	pop	{r4, pc}

0000705c <l2cap_chan_rx_init>:
{
    705c:	b508      	push	{r3, lr}
	if (!chan->rx.mtu) {
    705e:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7062:	b913      	cbnz	r3, 706a <l2cap_chan_rx_init+0xe>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
    7064:	2342      	movs	r3, #66	; 0x42
    7066:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	if (!chan->rx.init_credits) {
    706a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    706e:	b96b      	cbnz	r3, 708c <l2cap_chan_rx_init+0x30>
		if (chan->chan.ops->alloc_buf) {
    7070:	6843      	ldr	r3, [r0, #4]
    7072:	68db      	ldr	r3, [r3, #12]
    7074:	b1cb      	cbz	r3, 70aa <l2cap_chan_rx_init+0x4e>
			chan->rx.init_credits = (chan->rx.mtu +
    7076:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    707a:	3343      	adds	r3, #67	; 0x43
						 (L2CAP_MAX_LE_MPS - 1)) /
    707c:	4a0d      	ldr	r2, [pc, #52]	; (70b4 <l2cap_chan_rx_init+0x58>)
    707e:	fb82 1203 	smull	r1, r2, r2, r3
    7082:	17db      	asrs	r3, r3, #31
    7084:	ebc3 1362 	rsb	r3, r3, r2, asr #5
			chan->rx.init_credits = (chan->rx.mtu +
    7088:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	chan->rx.mps = min(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
    708c:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7090:	3302      	adds	r3, #2
    7092:	2b44      	cmp	r3, #68	; 0x44
    7094:	bfa8      	it	ge
    7096:	2344      	movge	r3, #68	; 0x44
    7098:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    709c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    70a0:	2100      	movs	r1, #0
    70a2:	3048      	adds	r0, #72	; 0x48
    70a4:	f021 fb3c 	bl	28720 <_impl_k_sem_init>
    70a8:	bd08      	pop	{r3, pc}
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    70aa:	2302      	movs	r3, #2
    70ac:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    70b0:	e7ec      	b.n	708c <l2cap_chan_rx_init+0x30>
    70b2:	bf00      	nop
    70b4:	78787879 	.word	0x78787879

000070b8 <l2cap_change_security>:
{
    70b8:	b508      	push	{r3, lr}
	switch (err) {
    70ba:	2905      	cmp	r1, #5
    70bc:	d00e      	beq.n	70dc <l2cap_change_security+0x24>
    70be:	2908      	cmp	r1, #8
    70c0:	d120      	bne.n	7104 <l2cap_change_security+0x4c>
		if (chan->chan.required_sec_level >= BT_SECURITY_MEDIUM) {
    70c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    70c6:	2b01      	cmp	r3, #1
    70c8:	d81f      	bhi.n	710a <l2cap_change_security+0x52>
		chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    70ca:	2302      	movs	r3, #2
    70cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
	return bt_conn_security(chan->chan.conn, chan->chan.required_sec_level);
    70d0:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
    70d4:	6800      	ldr	r0, [r0, #0]
    70d6:	f7ff f917 	bl	6308 <bt_conn_security>
    70da:	bd08      	pop	{r3, pc}
		if (chan->chan.required_sec_level < BT_SECURITY_MEDIUM) {
    70dc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    70e0:	2b01      	cmp	r3, #1
    70e2:	d905      	bls.n	70f0 <l2cap_change_security+0x38>
		} else if (chan->chan.required_sec_level < BT_SECURITY_HIGH) {
    70e4:	2b02      	cmp	r3, #2
    70e6:	d807      	bhi.n	70f8 <l2cap_change_security+0x40>
			chan->chan.required_sec_level = BT_SECURITY_HIGH;
    70e8:	2303      	movs	r3, #3
    70ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    70ee:	e7ef      	b.n	70d0 <l2cap_change_security+0x18>
			chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    70f0:	2302      	movs	r3, #2
    70f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    70f6:	e7eb      	b.n	70d0 <l2cap_change_security+0x18>
		} else if (chan->chan.required_sec_level < BT_SECURITY_FIPS) {
    70f8:	2b03      	cmp	r3, #3
    70fa:	d809      	bhi.n	7110 <l2cap_change_security+0x58>
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    70fc:	2304      	movs	r3, #4
    70fe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    7102:	e7e5      	b.n	70d0 <l2cap_change_security+0x18>
		return -EINVAL;
    7104:	f06f 0015 	mvn.w	r0, #21
    7108:	bd08      	pop	{r3, pc}
			return -EALREADY;
    710a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    710e:	bd08      	pop	{r3, pc}
			return -EALREADY;
    7110:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    7114:	bd08      	pop	{r3, pc}
	...

00007118 <bt_l2cap_le_fixed_chan_register>:
	sys_slist_append(&le_channels, &chan->node);
    7118:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    711c:	2200      	movs	r2, #0
    711e:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    7120:	4a05      	ldr	r2, [pc, #20]	; (7138 <bt_l2cap_le_fixed_chan_register+0x20>)
    7122:	6852      	ldr	r2, [r2, #4]
    7124:	b11a      	cbz	r2, 712e <bt_l2cap_le_fixed_chan_register+0x16>
		list->tail->next = node;
    7126:	6013      	str	r3, [r2, #0]
		list->tail = node;
    7128:	4a03      	ldr	r2, [pc, #12]	; (7138 <bt_l2cap_le_fixed_chan_register+0x20>)
    712a:	6053      	str	r3, [r2, #4]
    712c:	4770      	bx	lr
		list->tail = node;
    712e:	4a02      	ldr	r2, [pc, #8]	; (7138 <bt_l2cap_le_fixed_chan_register+0x20>)
    7130:	6053      	str	r3, [r2, #4]
		list->head = node;
    7132:	6013      	str	r3, [r2, #0]
    7134:	4770      	bx	lr
    7136:	bf00      	nop
    7138:	20000540 	.word	0x20000540

0000713c <bt_l2cap_chan_remove>:
	return list->head;
    713c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    713e:	b123      	cbz	r3, 714a <bt_l2cap_chan_remove+0xe>
    7140:	3b08      	subs	r3, #8
    7142:	2200      	movs	r2, #0
    7144:	b35b      	cbz	r3, 719e <bt_l2cap_chan_remove+0x62>
{
    7146:	b410      	push	{r4}
    7148:	e01c      	b.n	7184 <bt_l2cap_chan_remove+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    714a:	2300      	movs	r3, #0
    714c:	e7f9      	b.n	7142 <bt_l2cap_chan_remove+0x6>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    714e:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    7152:	b142      	cbz	r2, 7166 <bt_l2cap_chan_remove+0x2a>
		prev_node->next = node->next;
    7154:	689c      	ldr	r4, [r3, #8]
    7156:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    7158:	6c04      	ldr	r4, [r0, #64]	; 0x40
    715a:	42a1      	cmp	r1, r4
    715c:	d00a      	beq.n	7174 <bt_l2cap_chan_remove+0x38>
	node->next = NULL;
    715e:	2200      	movs	r2, #0
    7160:	609a      	str	r2, [r3, #8]
}
    7162:	bc10      	pop	{r4}
    7164:	4770      	bx	lr
		list->head = node->next;
    7166:	689a      	ldr	r2, [r3, #8]
    7168:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    716a:	6c04      	ldr	r4, [r0, #64]	; 0x40
    716c:	428c      	cmp	r4, r1
    716e:	d1f6      	bne.n	715e <bt_l2cap_chan_remove+0x22>
			list->tail = list->head;
    7170:	6402      	str	r2, [r0, #64]	; 0x40
    7172:	e7f4      	b.n	715e <bt_l2cap_chan_remove+0x22>
			list->tail = prev_node;
    7174:	6402      	str	r2, [r0, #64]	; 0x40
    7176:	e7f2      	b.n	715e <bt_l2cap_chan_remove+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7178:	4614      	mov	r4, r2
    717a:	e009      	b.n	7190 <bt_l2cap_chan_remove+0x54>
    717c:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    717e:	3b08      	subs	r3, #8
    7180:	2b00      	cmp	r3, #0
    7182:	d0ee      	beq.n	7162 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
    7184:	428b      	cmp	r3, r1
    7186:	d0e2      	beq.n	714e <bt_l2cap_chan_remove+0x12>
    7188:	f113 0208 	adds.w	r2, r3, #8
    718c:	d0f4      	beq.n	7178 <bt_l2cap_chan_remove+0x3c>
	return node->next;
    718e:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7190:	b11c      	cbz	r4, 719a <bt_l2cap_chan_remove+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7192:	2a00      	cmp	r2, #0
    7194:	d0f2      	beq.n	717c <bt_l2cap_chan_remove+0x40>
	return node->next;
    7196:	689b      	ldr	r3, [r3, #8]
    7198:	e7f1      	b.n	717e <bt_l2cap_chan_remove+0x42>
    719a:	2300      	movs	r3, #0
    719c:	e7f0      	b.n	7180 <bt_l2cap_chan_remove+0x44>
    719e:	4770      	bx	lr

000071a0 <bt_l2cap_chan_set_state>:
	chan->state = state;
    71a0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    71a4:	4770      	bx	lr

000071a6 <bt_l2cap_chan_del>:
{
    71a6:	b510      	push	{r4, lr}
    71a8:	4604      	mov	r4, r0
	if (!chan->conn) {
    71aa:	6803      	ldr	r3, [r0, #0]
    71ac:	b12b      	cbz	r3, 71ba <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    71ae:	6843      	ldr	r3, [r0, #4]
    71b0:	685b      	ldr	r3, [r3, #4]
    71b2:	b103      	cbz	r3, 71b6 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    71b4:	4798      	blx	r3
	chan->conn = NULL;
    71b6:	2300      	movs	r3, #0
    71b8:	6023      	str	r3, [r4, #0]
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECTED);
    71ba:	2100      	movs	r1, #0
    71bc:	4620      	mov	r0, r4
    71be:	f7ff ffef 	bl	71a0 <bt_l2cap_chan_set_state>
	chan->psm = 0;
    71c2:	2300      	movs	r3, #0
    71c4:	8763      	strh	r3, [r4, #58]	; 0x3a
	if (chan->destroy) {
    71c6:	68e3      	ldr	r3, [r4, #12]
    71c8:	b10b      	cbz	r3, 71ce <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
    71ca:	4620      	mov	r0, r4
    71cc:	4798      	blx	r3
    71ce:	bd10      	pop	{r4, pc}

000071d0 <l2cap_rtx_timeout>:
{
    71d0:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    71d2:	f1a0 0410 	sub.w	r4, r0, #16
    71d6:	4621      	mov	r1, r4
    71d8:	f850 0c10 	ldr.w	r0, [r0, #-16]
    71dc:	f7ff ffae 	bl	713c <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    71e0:	4620      	mov	r0, r4
    71e2:	f7ff ffe0 	bl	71a6 <bt_l2cap_chan_del>
    71e6:	bd10      	pop	{r4, pc}

000071e8 <le_conn_rsp>:
{
    71e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    71ec:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    71ee:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    71f0:	8992      	ldrh	r2, [r2, #12]
    71f2:	2a09      	cmp	r2, #9
    71f4:	d927      	bls.n	7246 <le_conn_rsp+0x5e>
	dcid = sys_le16_to_cpu(rsp->dcid);
    71f6:	f8b3 a000 	ldrh.w	sl, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    71fa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    71fe:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    7202:	88df      	ldrh	r7, [r3, #6]
	result = sys_le16_to_cpu(rsp->result);
    7204:	891d      	ldrh	r5, [r3, #8]
	if (result == BT_L2CAP_SUCCESS ||
    7206:	b14d      	cbz	r5, 721c <le_conn_rsp+0x34>
    7208:	2d05      	cmp	r5, #5
    720a:	d007      	beq.n	721c <le_conn_rsp+0x34>
	    result == BT_L2CAP_ERR_AUTHENTICATION ||
    720c:	2d08      	cmp	r5, #8
    720e:	d005      	beq.n	721c <le_conn_rsp+0x34>
		chan = l2cap_remove_ident(conn, ident);
    7210:	2201      	movs	r2, #1
    7212:	4630      	mov	r0, r6
    7214:	f7ff fe0a 	bl	6e2c <__l2cap_lookup_ident>
    7218:	4604      	mov	r4, r0
    721a:	e004      	b.n	7226 <le_conn_rsp+0x3e>
		chan = l2cap_lookup_ident(conn, ident);
    721c:	2200      	movs	r2, #0
    721e:	4630      	mov	r0, r6
    7220:	f7ff fe04 	bl	6e2c <__l2cap_lookup_ident>
    7224:	4604      	mov	r4, r0
	if (!chan) {
    7226:	b174      	cbz	r4, 7246 <le_conn_rsp+0x5e>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    7228:	f104 0010 	add.w	r0, r4, #16
    722c:	f022 f870 	bl	29310 <k_delayed_work_cancel>
	chan->chan.ident = 0;
    7230:	2300      	movs	r3, #0
    7232:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	switch (result) {
    7236:	2d05      	cmp	r5, #5
    7238:	d021      	beq.n	727e <le_conn_rsp+0x96>
    723a:	2d08      	cmp	r5, #8
    723c:	d01f      	beq.n	727e <le_conn_rsp+0x96>
    723e:	b125      	cbz	r5, 724a <le_conn_rsp+0x62>
		bt_l2cap_chan_del(&chan->chan);
    7240:	4620      	mov	r0, r4
    7242:	f7ff ffb0 	bl	71a6 <bt_l2cap_chan_del>
    7246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chan->tx.cid = dcid;
    724a:	f8a4 a060 	strh.w	sl, [r4, #96]	; 0x60
		chan->tx.mtu = mtu;
    724e:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
		chan->tx.mps = mps;
    7252:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
		bt_l2cap_chan_set_state(&chan->chan, BT_L2CAP_CONNECTED);
    7256:	2103      	movs	r1, #3
    7258:	4620      	mov	r0, r4
    725a:	f7ff ffa1 	bl	71a0 <bt_l2cap_chan_set_state>
		if (chan->chan.ops->connected) {
    725e:	6863      	ldr	r3, [r4, #4]
    7260:	681b      	ldr	r3, [r3, #0]
    7262:	b10b      	cbz	r3, 7268 <le_conn_rsp+0x80>
			chan->chan.ops->connected(&chan->chan);
    7264:	4620      	mov	r0, r4
    7266:	4798      	blx	r3
		l2cap_chan_tx_give_credits(chan, credits);
    7268:	4639      	mov	r1, r7
    726a:	4620      	mov	r0, r4
    726c:	f7ff feab 	bl	6fc6 <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_give_credits(chan, chan->rx.init_credits);
    7270:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
    7274:	4620      	mov	r0, r4
    7276:	f7ff fe99 	bl	6fac <l2cap_chan_rx_give_credits>
		break;
    727a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (l2cap_change_security(chan, result) == 0) {
    727e:	4629      	mov	r1, r5
    7280:	4620      	mov	r0, r4
    7282:	f7ff ff19 	bl	70b8 <l2cap_change_security>
    7286:	2800      	cmp	r0, #0
    7288:	d0dd      	beq.n	7246 <le_conn_rsp+0x5e>
		bt_l2cap_chan_remove(conn, &chan->chan);
    728a:	4621      	mov	r1, r4
    728c:	4630      	mov	r0, r6
    728e:	f7ff ff55 	bl	713c <bt_l2cap_chan_remove>
    7292:	e7d5      	b.n	7240 <le_conn_rsp+0x58>

00007294 <le_disconn_rsp>:
{
    7294:	b508      	push	{r3, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7296:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_disconn_rsp *rsp = (void *)buf->data;
    7298:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    729a:	8993      	ldrh	r3, [r2, #12]
    729c:	2b03      	cmp	r3, #3
    729e:	d800      	bhi.n	72a2 <le_disconn_rsp+0xe>
    72a0:	bd08      	pop	{r3, pc}
	chan = l2cap_remove_tx_cid(conn, dcid);
    72a2:	8809      	ldrh	r1, [r1, #0]
    72a4:	f7ff fe18 	bl	6ed8 <l2cap_remove_tx_cid>
	if (!chan) {
    72a8:	2800      	cmp	r0, #0
    72aa:	d0f9      	beq.n	72a0 <le_disconn_rsp+0xc>
	bt_l2cap_chan_del(&chan->chan);
    72ac:	f7ff ff7b 	bl	71a6 <bt_l2cap_chan_del>
    72b0:	e7f6      	b.n	72a0 <le_disconn_rsp+0xc>

000072b2 <reject_cmd>:
{
    72b2:	b508      	push	{r3, lr}
	chan = l2cap_remove_ident(conn, ident);
    72b4:	2201      	movs	r2, #1
    72b6:	6800      	ldr	r0, [r0, #0]
    72b8:	f7ff fdb8 	bl	6e2c <__l2cap_lookup_ident>
	if (!chan) {
    72bc:	b108      	cbz	r0, 72c2 <reject_cmd+0x10>
	bt_l2cap_chan_del(&chan->chan);
    72be:	f7ff ff72 	bl	71a6 <bt_l2cap_chan_del>
    72c2:	bd08      	pop	{r3, pc}

000072c4 <bt_l2cap_chan_add>:
{
    72c4:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
    72c6:	f101 0308 	add.w	r3, r1, #8
	node->next = NULL;
    72ca:	2400      	movs	r4, #0
    72cc:	608c      	str	r4, [r1, #8]
	if (!list->tail) {
    72ce:	6c04      	ldr	r4, [r0, #64]	; 0x40
    72d0:	b12c      	cbz	r4, 72de <bt_l2cap_chan_add+0x1a>
		list->tail->next = node;
    72d2:	6023      	str	r3, [r4, #0]
		list->tail = node;
    72d4:	6403      	str	r3, [r0, #64]	; 0x40
	chan->conn = conn;
    72d6:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
    72d8:	60ca      	str	r2, [r1, #12]
}
    72da:	bc10      	pop	{r4}
    72dc:	4770      	bx	lr
		list->tail = node;
    72de:	6403      	str	r3, [r0, #64]	; 0x40
		list->head = node;
    72e0:	63c3      	str	r3, [r0, #60]	; 0x3c
    72e2:	e7f8      	b.n	72d6 <bt_l2cap_chan_add+0x12>

000072e4 <bt_l2cap_disconnected>:
{
    72e4:	b510      	push	{r4, lr}
	return list->head;
    72e6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    72e8:	b140      	cbz	r0, 72fc <bt_l2cap_disconnected+0x18>
    72ea:	3808      	subs	r0, #8
    72ec:	b140      	cbz	r0, 7300 <bt_l2cap_disconnected+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    72ee:	f110 0408 	adds.w	r4, r0, #8
    72f2:	d000      	beq.n	72f6 <bt_l2cap_disconnected+0x12>
	return node->next;
    72f4:	6884      	ldr	r4, [r0, #8]
    72f6:	b12c      	cbz	r4, 7304 <bt_l2cap_disconnected+0x20>
    72f8:	3c08      	subs	r4, #8
    72fa:	e00a      	b.n	7312 <bt_l2cap_disconnected+0x2e>
    72fc:	2000      	movs	r0, #0
    72fe:	e7f5      	b.n	72ec <bt_l2cap_disconnected+0x8>
    7300:	4604      	mov	r4, r0
    7302:	e006      	b.n	7312 <bt_l2cap_disconnected+0x2e>
    7304:	2400      	movs	r4, #0
    7306:	e004      	b.n	7312 <bt_l2cap_disconnected+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7308:	461a      	mov	r2, r3
    730a:	e00a      	b.n	7322 <bt_l2cap_disconnected+0x3e>
    730c:	3b08      	subs	r3, #8
    730e:	4620      	mov	r0, r4
    7310:	461c      	mov	r4, r3
    7312:	b178      	cbz	r0, 7334 <bt_l2cap_disconnected+0x50>
		bt_l2cap_chan_del(chan);
    7314:	f7ff ff47 	bl	71a6 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    7318:	b144      	cbz	r4, 732c <bt_l2cap_disconnected+0x48>
    731a:	f114 0308 	adds.w	r3, r4, #8
    731e:	d0f3      	beq.n	7308 <bt_l2cap_disconnected+0x24>
	return node->next;
    7320:	68a2      	ldr	r2, [r4, #8]
    7322:	b12a      	cbz	r2, 7330 <bt_l2cap_disconnected+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7324:	2b00      	cmp	r3, #0
    7326:	d0f1      	beq.n	730c <bt_l2cap_disconnected+0x28>
	return node->next;
    7328:	68a3      	ldr	r3, [r4, #8]
    732a:	e7ef      	b.n	730c <bt_l2cap_disconnected+0x28>
    732c:	4623      	mov	r3, r4
    732e:	e7ee      	b.n	730e <bt_l2cap_disconnected+0x2a>
    7330:	2300      	movs	r3, #0
    7332:	e7ec      	b.n	730e <bt_l2cap_disconnected+0x2a>
}
    7334:	bd10      	pop	{r4, pc}

00007336 <bt_l2cap_create_pdu>:
{
    7336:	b508      	push	{r3, lr}
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    7338:	3104      	adds	r1, #4
    733a:	f7ff fc61 	bl	6c00 <bt_conn_create_pdu>
}
    733e:	bd08      	pop	{r3, pc}

00007340 <l2cap_create_le_sig_pdu>:
{
    7340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7342:	460f      	mov	r7, r1
    7344:	4616      	mov	r6, r2
    7346:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu(NULL, 0);
    7348:	2100      	movs	r1, #0
    734a:	4608      	mov	r0, r1
    734c:	f7ff fff3 	bl	7336 <bt_l2cap_create_pdu>
    7350:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7352:	2104      	movs	r1, #4
    7354:	3008      	adds	r0, #8
    7356:	f012 feed 	bl	1a134 <net_buf_simple_add>
	hdr->code = code;
    735a:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    735c:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    735e:	8045      	strh	r5, [r0, #2]
}
    7360:	4620      	mov	r0, r4
    7362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007364 <l2cap_chan_create_seg>:
{
    7364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7368:	4605      	mov	r5, r0
    736a:	460c      	mov	r4, r1
    736c:	4690      	mov	r8, r2
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    736e:	7988      	ldrb	r0, [r1, #6]
    7370:	f012 fe1a 	bl	19fa8 <net_buf_pool_get>
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    7374:	89a3      	ldrh	r3, [r4, #12]
    7376:	4443      	add	r3, r8
    7378:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    737c:	4293      	cmp	r3, r2
    737e:	d802      	bhi.n	7386 <l2cap_chan_create_seg+0x22>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    7380:	8ac3      	ldrh	r3, [r0, #22]
    7382:	2b03      	cmp	r3, #3
    7384:	d815      	bhi.n	73b2 <l2cap_chan_create_seg+0x4e>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    7386:	79a0      	ldrb	r0, [r4, #6]
    7388:	f012 fe0e 	bl	19fa8 <net_buf_pool_get>
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    738c:	8ac3      	ldrh	r3, [r0, #22]
    738e:	2b03      	cmp	r3, #3
    7390:	d902      	bls.n	7398 <l2cap_chan_create_seg+0x34>
	    pool->buf_size >= BT_L2CAP_BUF_SIZE(L2CAP_MAX_LE_MPS)) {
    7392:	8a83      	ldrh	r3, [r0, #20]
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    7394:	2b4b      	cmp	r3, #75	; 0x4b
    7396:	d82e      	bhi.n	73f6 <l2cap_chan_create_seg+0x92>
	return bt_l2cap_create_pdu(NULL, 0);
    7398:	2100      	movs	r1, #0
    739a:	4608      	mov	r0, r1
    739c:	f7ff ffcb 	bl	7336 <bt_l2cap_create_pdu>
    73a0:	4606      	mov	r6, r0
	if (sdu_hdr_len) {
    73a2:	f1b8 0f00 	cmp.w	r8, #0
    73a6:	d038      	beq.n	741a <l2cap_chan_create_seg+0xb6>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    73a8:	f106 0008 	add.w	r0, r6, #8
    73ac:	4623      	mov	r3, r4
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
    73ae:	2100      	movs	r1, #0
    73b0:	e02e      	b.n	7410 <l2cap_chan_create_seg+0xac>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    73b2:	fa1f f688 	uxth.w	r6, r8
    73b6:	3608      	adds	r6, #8
    73b8:	b2b6      	uxth	r6, r6
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    73ba:	f104 0708 	add.w	r7, r4, #8
    73be:	4638      	mov	r0, r7
    73c0:	f012 ff1d 	bl	1a1fe <net_buf_simple_headroom>
    73c4:	42b0      	cmp	r0, r6
    73c6:	d3de      	bcc.n	7386 <l2cap_chan_create_seg+0x22>
    73c8:	6823      	ldr	r3, [r4, #0]
    73ca:	2b00      	cmp	r3, #0
    73cc:	d1db      	bne.n	7386 <l2cap_chan_create_seg+0x22>
		if (sdu_hdr_len) {
    73ce:	f1b8 0f00 	cmp.w	r8, #0
    73d2:	d00b      	beq.n	73ec <l2cap_chan_create_seg+0x88>
    73d4:	4623      	mov	r3, r4
    73d6:	2100      	movs	r1, #0
    73d8:	e002      	b.n	73e0 <l2cap_chan_create_seg+0x7c>

	while (buf) {
		bytes += buf->len;
    73da:	899a      	ldrh	r2, [r3, #12]
    73dc:	4411      	add	r1, r2
		buf = buf->frags;
    73de:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    73e0:	2b00      	cmp	r3, #0
    73e2:	d1fa      	bne.n	73da <l2cap_chan_create_seg+0x76>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    73e4:	b289      	uxth	r1, r1
    73e6:	4638      	mov	r0, r7
    73e8:	f012 fee3 	bl	1a1b2 <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    73ec:	4620      	mov	r0, r4
    73ee:	f012 fe71 	bl	1a0d4 <net_buf_ref>
    73f2:	4606      	mov	r6, r0
    73f4:	e02f      	b.n	7456 <l2cap_chan_create_seg+0xf2>
		seg = net_buf_alloc(pool, K_NO_WAIT);
    73f6:	2100      	movs	r1, #0
    73f8:	f012 fde2 	bl	19fc0 <net_buf_alloc>
		if (seg) {
    73fc:	4606      	mov	r6, r0
    73fe:	2800      	cmp	r0, #0
    7400:	d0ca      	beq.n	7398 <l2cap_chan_create_seg+0x34>
			net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    7402:	2108      	movs	r1, #8
    7404:	f012 fe37 	bl	1a076 <net_buf_reserve>
    7408:	e7cb      	b.n	73a2 <l2cap_chan_create_seg+0x3e>
		bytes += buf->len;
    740a:	899a      	ldrh	r2, [r3, #12]
    740c:	4411      	add	r1, r2
		buf = buf->frags;
    740e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    7410:	2b00      	cmp	r3, #0
    7412:	d1fa      	bne.n	740a <l2cap_chan_create_seg+0xa6>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    7414:	b289      	uxth	r1, r1
    7416:	f012 fea5 	bl	1a164 <net_buf_simple_add_le16>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    741a:	f106 0708 	add.w	r7, r6, #8
    741e:	4638      	mov	r0, r7
    7420:	f012 fef1 	bl	1a206 <net_buf_simple_tailroom>
    7424:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
    7428:	eba5 0308 	sub.w	r3, r5, r8
    742c:	4298      	cmp	r0, r3
    742e:	d315      	bcc.n	745c <l2cap_chan_create_seg+0xf8>
    7430:	fa1f f888 	uxth.w	r8, r8
    7434:	eba5 0508 	sub.w	r5, r5, r8
    7438:	b2ad      	uxth	r5, r5
	len = min(buf->len, len);
    743a:	89a0      	ldrh	r0, [r4, #12]
    743c:	4285      	cmp	r5, r0
    743e:	bf28      	it	cs
    7440:	4605      	movcs	r5, r0
	net_buf_add_mem(seg, buf->data, len);
    7442:	462a      	mov	r2, r5
    7444:	f854 1f08 	ldr.w	r1, [r4, #8]!
    7448:	4638      	mov	r0, r7
    744a:	f012 fe79 	bl	1a140 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    744e:	4629      	mov	r1, r5
    7450:	4620      	mov	r0, r4
    7452:	f012 febc 	bl	1a1ce <net_buf_simple_pull>
}
    7456:	4630      	mov	r0, r6
    7458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    745c:	4638      	mov	r0, r7
    745e:	f012 fed2 	bl	1a206 <net_buf_simple_tailroom>
    7462:	b285      	uxth	r5, r0
    7464:	e7e9      	b.n	743a <l2cap_chan_create_seg+0xd6>

00007466 <bt_l2cap_send_cb>:
{
    7466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7468:	4605      	mov	r5, r0
    746a:	460f      	mov	r7, r1
    746c:	4614      	mov	r4, r2
    746e:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    7470:	2104      	movs	r1, #4
    7472:	f102 0008 	add.w	r0, r2, #8
    7476:	f012 fe94 	bl	1a1a2 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    747a:	89a3      	ldrh	r3, [r4, #12]
    747c:	3b04      	subs	r3, #4
    747e:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
    7480:	8047      	strh	r7, [r0, #2]
	bt_conn_send_cb(conn, buf, cb);
    7482:	4632      	mov	r2, r6
    7484:	4621      	mov	r1, r4
    7486:	4628      	mov	r0, r5
    7488:	f7fe ffbe 	bl	6408 <bt_conn_send_cb>
    748c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00007490 <l2cap_chan_send_req>:
{
    7490:	b538      	push	{r3, r4, r5, lr}
    7492:	4604      	mov	r4, r0
    7494:	460d      	mov	r5, r1
	if (timeout) {
    7496:	b94a      	cbnz	r2, 74ac <l2cap_chan_send_req+0x1c>
		k_delayed_work_cancel(&chan->chan.rtx_work);
    7498:	3010      	adds	r0, #16
    749a:	f021 ff39 	bl	29310 <k_delayed_work_cancel>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    749e:	2300      	movs	r3, #0
    74a0:	462a      	mov	r2, r5
    74a2:	2105      	movs	r1, #5
    74a4:	6820      	ldr	r0, [r4, #0]
    74a6:	f7ff ffde 	bl	7466 <bt_l2cap_send_cb>
    74aa:	bd38      	pop	{r3, r4, r5, pc}
    74ac:	f100 0110 	add.w	r1, r0, #16
    74b0:	4801      	ldr	r0, [pc, #4]	; (74b8 <l2cap_chan_send_req+0x28>)
    74b2:	f021 ff87 	bl	293c4 <k_delayed_work_submit_to_queue>
    74b6:	e7f2      	b.n	749e <l2cap_chan_send_req+0xe>
    74b8:	20002a70 	.word	0x20002a70

000074bc <l2cap_le_conn_req>:
{
    74bc:	b538      	push	{r3, r4, r5, lr}
    74be:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    74c0:	f7ff fca6 	bl	6e10 <get_ident>
    74c4:	4602      	mov	r2, r0
    74c6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    74ca:	230a      	movs	r3, #10
    74cc:	2114      	movs	r1, #20
    74ce:	2000      	movs	r0, #0
    74d0:	f7ff ff36 	bl	7340 <l2cap_create_le_sig_pdu>
    74d4:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    74d6:	210a      	movs	r1, #10
    74d8:	3008      	adds	r0, #8
    74da:	f012 fe2b 	bl	1a134 <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    74de:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    74e0:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    74e2:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    74e6:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    74e8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    74ec:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    74ee:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    74f2:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    74f4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    74f8:	8103      	strh	r3, [r0, #8]
	l2cap_chan_send_req(ch, buf, L2CAP_CONN_TIMEOUT);
    74fa:	f649 4240 	movw	r2, #40000	; 0x9c40
    74fe:	4629      	mov	r1, r5
    7500:	4620      	mov	r0, r4
    7502:	f7ff ffc5 	bl	7490 <l2cap_chan_send_req>
}
    7506:	2000      	movs	r0, #0
    7508:	bd38      	pop	{r3, r4, r5, pc}

0000750a <l2cap_le_encrypt_change>:
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
    750a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    750e:	2b01      	cmp	r3, #1
    7510:	d000      	beq.n	7514 <l2cap_le_encrypt_change+0xa>
    7512:	4770      	bx	lr
    7514:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    7518:	2b00      	cmp	r3, #0
    751a:	d1fa      	bne.n	7512 <l2cap_le_encrypt_change+0x8>
{
    751c:	b510      	push	{r4, lr}
    751e:	4604      	mov	r4, r0
	if (status) {
    7520:	b911      	cbnz	r1, 7528 <l2cap_le_encrypt_change+0x1e>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
    7522:	f7ff ffcb 	bl	74bc <l2cap_le_conn_req>
    7526:	bd10      	pop	{r4, pc}
		bt_l2cap_chan_remove(chan->conn, chan);
    7528:	4601      	mov	r1, r0
    752a:	6800      	ldr	r0, [r0, #0]
    752c:	f7ff fe06 	bl	713c <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
    7530:	4620      	mov	r0, r4
    7532:	f7ff fe38 	bl	71a6 <bt_l2cap_chan_del>
		return;
    7536:	bd10      	pop	{r4, pc}

00007538 <bt_l2cap_encrypt_change>:
{
    7538:	b538      	push	{r3, r4, r5, lr}
    753a:	460d      	mov	r5, r1
	return list->head;
    753c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    753e:	b10c      	cbz	r4, 7544 <bt_l2cap_encrypt_change+0xc>
    7540:	3c08      	subs	r4, #8
    7542:	e00a      	b.n	755a <bt_l2cap_encrypt_change+0x22>
    7544:	2400      	movs	r4, #0
    7546:	e008      	b.n	755a <bt_l2cap_encrypt_change+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7548:	f114 0308 	adds.w	r3, r4, #8
    754c:	d012      	beq.n	7574 <bt_l2cap_encrypt_change+0x3c>
	return node->next;
    754e:	68a2      	ldr	r2, [r4, #8]
    7550:	b192      	cbz	r2, 7578 <bt_l2cap_encrypt_change+0x40>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7552:	b103      	cbz	r3, 7556 <bt_l2cap_encrypt_change+0x1e>
	return node->next;
    7554:	68a3      	ldr	r3, [r4, #8]
    7556:	f1a3 0408 	sub.w	r4, r3, #8
    755a:	b17c      	cbz	r4, 757c <bt_l2cap_encrypt_change+0x44>
		l2cap_le_encrypt_change(chan, hci_status);
    755c:	4629      	mov	r1, r5
    755e:	4620      	mov	r0, r4
    7560:	f7ff ffd3 	bl	750a <l2cap_le_encrypt_change>
		if (chan->ops->encrypt_change) {
    7564:	6863      	ldr	r3, [r4, #4]
    7566:	689b      	ldr	r3, [r3, #8]
    7568:	2b00      	cmp	r3, #0
    756a:	d0ed      	beq.n	7548 <bt_l2cap_encrypt_change+0x10>
			chan->ops->encrypt_change(chan, hci_status);
    756c:	4629      	mov	r1, r5
    756e:	4620      	mov	r0, r4
    7570:	4798      	blx	r3
    7572:	e7e9      	b.n	7548 <bt_l2cap_encrypt_change+0x10>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7574:	461a      	mov	r2, r3
    7576:	e7eb      	b.n	7550 <bt_l2cap_encrypt_change+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7578:	2400      	movs	r4, #0
    757a:	e7ee      	b.n	755a <bt_l2cap_encrypt_change+0x22>
}
    757c:	bd38      	pop	{r3, r4, r5, pc}

0000757e <l2cap_chan_update_credits>:
{
    757e:	b570      	push	{r4, r5, r6, lr}
 */
__syscall unsigned int k_sem_count_get(struct k_sem *sem);

static inline unsigned int _impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    7580:	6d04      	ldr	r4, [r0, #80]	; 0x50
	    L2CAP_LE_CREDITS_THRESHOLD(chan->rx.init_credits)) {
    7582:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	if (k_sem_count_get(&chan->rx.credits) >
    7586:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    758a:	d900      	bls.n	758e <l2cap_chan_update_credits+0x10>
    758c:	bd70      	pop	{r4, r5, r6, pc}
    758e:	460e      	mov	r6, r1
    7590:	4605      	mov	r5, r0
	credits = chan->rx.init_credits - k_sem_count_get(&chan->rx.credits);
    7592:	b2a4      	uxth	r4, r4
    7594:	1b1b      	subs	r3, r3, r4
    7596:	b29c      	uxth	r4, r3
	l2cap_chan_rx_give_credits(chan, credits);
    7598:	4621      	mov	r1, r4
    759a:	f7ff fd07 	bl	6fac <l2cap_chan_rx_give_credits>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    759e:	f7ff fc37 	bl	6e10 <get_ident>
    75a2:	2304      	movs	r3, #4
    75a4:	4602      	mov	r2, r0
    75a6:	2116      	movs	r1, #22
    75a8:	4630      	mov	r0, r6
    75aa:	f7ff fec9 	bl	7340 <l2cap_create_le_sig_pdu>
    75ae:	4606      	mov	r6, r0
	ev = net_buf_add(buf, sizeof(*ev));
    75b0:	2104      	movs	r1, #4
    75b2:	3008      	adds	r0, #8
    75b4:	f012 fdbe 	bl	1a134 <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    75b8:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    75bc:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    75be:	8044      	strh	r4, [r0, #2]
    75c0:	2300      	movs	r3, #0
    75c2:	4632      	mov	r2, r6
    75c4:	2105      	movs	r1, #5
    75c6:	6828      	ldr	r0, [r5, #0]
    75c8:	f7ff ff4d 	bl	7466 <bt_l2cap_send_cb>
}
    75cc:	e7de      	b.n	758c <l2cap_chan_update_credits+0xe>

000075ce <l2cap_chan_le_send>:
{
    75ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75d0:	4604      	mov	r4, r0
    75d2:	460d      	mov	r5, r1
    75d4:	4616      	mov	r6, r2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    75d6:	2100      	movs	r1, #0
    75d8:	3068      	adds	r0, #104	; 0x68
    75da:	f021 f8bd 	bl	28758 <_impl_k_sem_take>
	if (k_sem_take(&ch->tx.credits, K_NO_WAIT)) {
    75de:	b9b0      	cbnz	r0, 760e <l2cap_chan_le_send+0x40>
	buf = l2cap_chan_create_seg(ch, buf, sdu_hdr_len);
    75e0:	4632      	mov	r2, r6
    75e2:	4629      	mov	r1, r5
    75e4:	4620      	mov	r0, r4
    75e6:	f7ff febd 	bl	7364 <l2cap_chan_create_seg>
	if (!ch->chan.conn) {
    75ea:	6827      	ldr	r7, [r4, #0]
    75ec:	b157      	cbz	r7, 7604 <l2cap_chan_le_send+0x36>
	len = buf->len - sdu_hdr_len;
    75ee:	8985      	ldrh	r5, [r0, #12]
    75f0:	1bad      	subs	r5, r5, r6
    75f2:	2300      	movs	r3, #0
    75f4:	4602      	mov	r2, r0
    75f6:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    75fa:	4638      	mov	r0, r7
    75fc:	f7ff ff33 	bl	7466 <bt_l2cap_send_cb>
}
    7600:	4628      	mov	r0, r5
    7602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    7604:	f012 fd4a 	bl	1a09c <net_buf_unref>
		return -ECONNRESET;
    7608:	f06f 0567 	mvn.w	r5, #103	; 0x67
    760c:	e7f8      	b.n	7600 <l2cap_chan_le_send+0x32>
		return -EAGAIN;
    760e:	f06f 050a 	mvn.w	r5, #10
    7612:	e7f5      	b.n	7600 <l2cap_chan_le_send+0x32>

00007614 <l2cap_chan_le_send_sdu>:
{
    7614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7618:	b082      	sub	sp, #8
    761a:	9201      	str	r2, [sp, #4]
	total_len = net_buf_frags_len(*buf) + sent;
    761c:	680d      	ldr	r5, [r1, #0]
    761e:	462b      	mov	r3, r5
	size_t bytes = 0;
    7620:	2200      	movs	r2, #0
    7622:	e002      	b.n	762a <l2cap_chan_le_send_sdu+0x16>
		bytes += buf->len;
    7624:	899c      	ldrh	r4, [r3, #12]
    7626:	4422      	add	r2, r4
		buf = buf->frags;
    7628:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    762a:	2b00      	cmp	r3, #0
    762c:	d1fa      	bne.n	7624 <l2cap_chan_le_send_sdu+0x10>
    762e:	9b01      	ldr	r3, [sp, #4]
    7630:	189c      	adds	r4, r3, r2
	if (total_len > ch->tx.mtu) {
    7632:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    7636:	4294      	cmp	r4, r2
    7638:	dc54      	bgt.n	76e4 <l2cap_chan_le_send_sdu+0xd0>
	if (!frag->len && frag->frags) {
    763a:	89aa      	ldrh	r2, [r5, #12]
    763c:	b912      	cbnz	r2, 7644 <l2cap_chan_le_send_sdu+0x30>
    763e:	682a      	ldr	r2, [r5, #0]
    7640:	b102      	cbz	r2, 7644 <l2cap_chan_le_send_sdu+0x30>
		frag = frag->frags;
    7642:	4615      	mov	r5, r2
    7644:	4688      	mov	r8, r1
    7646:	4607      	mov	r7, r0
	if (!sent) {
    7648:	b10b      	cbz	r3, 764e <l2cap_chan_le_send_sdu+0x3a>
		frag = frag->frags;
    764a:	2600      	movs	r6, #0
    764c:	e024      	b.n	7698 <l2cap_chan_le_send_sdu+0x84>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
    764e:	2202      	movs	r2, #2
    7650:	4629      	mov	r1, r5
    7652:	f7ff ffbc 	bl	75ce <l2cap_chan_le_send>
		if (ret < 0) {
    7656:	1e06      	subs	r6, r0, #0
    7658:	db01      	blt.n	765e <l2cap_chan_le_send_sdu+0x4a>
		sent = ret;
    765a:	9601      	str	r6, [sp, #4]
    765c:	e7f5      	b.n	764a <l2cap_chan_le_send_sdu+0x36>
			if (ret == -EAGAIN) {
    765e:	f116 0f0b 	cmn.w	r6, #11
    7662:	d002      	beq.n	766a <l2cap_chan_le_send_sdu+0x56>
			*buf = frag;
    7664:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    7668:	e038      	b.n	76dc <l2cap_chan_le_send_sdu+0xc8>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    766a:	f105 0010 	add.w	r0, r5, #16
    766e:	89eb      	ldrh	r3, [r5, #14]
    7670:	4418      	add	r0, r3
    7672:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    7674:	2204      	movs	r2, #4
    7676:	eb0d 0102 	add.w	r1, sp, r2
    767a:	f020 0003 	bic.w	r0, r0, #3
    767e:	f7f8 fe1f 	bl	2c0 <memcpy>
    7682:	e7ef      	b.n	7664 <l2cap_chan_le_send_sdu+0x50>
		ret = l2cap_chan_le_send(ch, frag, 0);
    7684:	2200      	movs	r2, #0
    7686:	4629      	mov	r1, r5
    7688:	4638      	mov	r0, r7
    768a:	f7ff ffa0 	bl	75ce <l2cap_chan_le_send>
		if (ret < 0) {
    768e:	1e06      	subs	r6, r0, #0
    7690:	db0e      	blt.n	76b0 <l2cap_chan_le_send_sdu+0x9c>
	for (ret = 0; sent < total_len; sent += ret) {
    7692:	9b01      	ldr	r3, [sp, #4]
    7694:	4433      	add	r3, r6
    7696:	9301      	str	r3, [sp, #4]
    7698:	9b01      	ldr	r3, [sp, #4]
    769a:	429c      	cmp	r4, r3
    769c:	dd1b      	ble.n	76d6 <l2cap_chan_le_send_sdu+0xc2>
		if (!frag->len) {
    769e:	89ab      	ldrh	r3, [r5, #12]
    76a0:	2b00      	cmp	r3, #0
    76a2:	d1ef      	bne.n	7684 <l2cap_chan_le_send_sdu+0x70>
			frag = net_buf_frag_del(NULL, frag);
    76a4:	4629      	mov	r1, r5
    76a6:	2000      	movs	r0, #0
    76a8:	f012 fd38 	bl	1a11c <net_buf_frag_del>
    76ac:	4605      	mov	r5, r0
    76ae:	e7e9      	b.n	7684 <l2cap_chan_le_send_sdu+0x70>
			if (ret == -EAGAIN) {
    76b0:	f116 0f0b 	cmn.w	r6, #11
    76b4:	d002      	beq.n	76bc <l2cap_chan_le_send_sdu+0xa8>
			*buf = frag;
    76b6:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    76ba:	e00f      	b.n	76dc <l2cap_chan_le_send_sdu+0xc8>
    76bc:	f105 0010 	add.w	r0, r5, #16
    76c0:	89eb      	ldrh	r3, [r5, #14]
    76c2:	4418      	add	r0, r3
    76c4:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    76c6:	2204      	movs	r2, #4
    76c8:	eb0d 0102 	add.w	r1, sp, r2
    76cc:	f020 0003 	bic.w	r0, r0, #3
    76d0:	f7f8 fdf6 	bl	2c0 <memcpy>
    76d4:	e7ef      	b.n	76b6 <l2cap_chan_le_send_sdu+0xa2>
	net_buf_unref(frag);
    76d6:	4628      	mov	r0, r5
    76d8:	f012 fce0 	bl	1a09c <net_buf_unref>
}
    76dc:	4630      	mov	r0, r6
    76de:	b002      	add	sp, #8
    76e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
    76e4:	f06f 0679 	mvn.w	r6, #121	; 0x79
    76e8:	e7f8      	b.n	76dc <l2cap_chan_le_send_sdu+0xc8>

000076ea <l2cap_chan_le_send_resume>:
{
    76ea:	b510      	push	{r4, lr}
    76ec:	b082      	sub	sp, #8
    76ee:	4604      	mov	r4, r0
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
    76f0:	4620      	mov	r0, r4
    76f2:	f7ff fc91 	bl	7018 <l2cap_chan_le_get_tx_buf>
    76f6:	9001      	str	r0, [sp, #4]
    76f8:	b180      	cbz	r0, 771c <l2cap_chan_le_send_resume+0x32>
    76fa:	f100 0310 	add.w	r3, r0, #16
    76fe:	89c2      	ldrh	r2, [r0, #14]
    7700:	4413      	add	r3, r2
    7702:	3303      	adds	r3, #3
    7704:	f023 0303 	bic.w	r3, r3, #3
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
    7708:	681a      	ldr	r2, [r3, #0]
    770a:	a901      	add	r1, sp, #4
    770c:	4620      	mov	r0, r4
    770e:	f7ff ff81 	bl	7614 <l2cap_chan_le_send_sdu>
		if (sent < 0) {
    7712:	2800      	cmp	r0, #0
    7714:	daec      	bge.n	76f0 <l2cap_chan_le_send_resume+0x6>
			if (sent == -EAGAIN) {
    7716:	f110 0f0b 	cmn.w	r0, #11
    771a:	d001      	beq.n	7720 <l2cap_chan_le_send_resume+0x36>
}
    771c:	b002      	add	sp, #8
    771e:	bd10      	pop	{r4, pc}
				ch->tx_buf = buf;
    7720:	9b01      	ldr	r3, [sp, #4]
    7722:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    7726:	e7f9      	b.n	771c <l2cap_chan_le_send_resume+0x32>

00007728 <l2cap_send_reject>:
{
    7728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    772c:	4680      	mov	r8, r0
    772e:	4691      	mov	r9, r2
    7730:	461e      	mov	r6, r3
    7732:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    7736:	1cbb      	adds	r3, r7, #2
    7738:	460a      	mov	r2, r1
    773a:	2101      	movs	r1, #1
    773c:	2000      	movs	r0, #0
    773e:	f7ff fdff 	bl	7340 <l2cap_create_le_sig_pdu>
    7742:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    7744:	f100 0508 	add.w	r5, r0, #8
    7748:	2102      	movs	r1, #2
    774a:	4628      	mov	r0, r5
    774c:	f012 fcf2 	bl	1a134 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    7750:	f8a0 9000 	strh.w	r9, [r0]
	if (data) {
    7754:	b126      	cbz	r6, 7760 <l2cap_send_reject+0x38>
		net_buf_add_mem(buf, data, data_len);
    7756:	463a      	mov	r2, r7
    7758:	4631      	mov	r1, r6
    775a:	4628      	mov	r0, r5
    775c:	f012 fcf0 	bl	1a140 <net_buf_simple_add_mem>
    7760:	2300      	movs	r3, #0
    7762:	4622      	mov	r2, r4
    7764:	2105      	movs	r1, #5
    7766:	4640      	mov	r0, r8
    7768:	f7ff fe7d 	bl	7466 <bt_l2cap_send_cb>
    776c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007770 <le_conn_param_update_req>:
{
    7770:	b570      	push	{r4, r5, r6, lr}
    7772:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7774:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    7776:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    7778:	8990      	ldrh	r0, [r2, #12]
    777a:	2807      	cmp	r0, #7
    777c:	d908      	bls.n	7790 <le_conn_param_update_req+0x20>
    777e:	4610      	mov	r0, r2
	if (conn->role != BT_HCI_ROLE_MASTER) {
    7780:	78e2      	ldrb	r2, [r4, #3]
    7782:	b13a      	cbz	r2, 7794 <le_conn_param_update_req+0x24>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    7784:	2200      	movs	r2, #0
    7786:	9200      	str	r2, [sp, #0]
    7788:	4613      	mov	r3, r2
    778a:	4620      	mov	r0, r4
    778c:	f7ff ffcc 	bl	7728 <l2cap_send_reject>
}
    7790:	b004      	add	sp, #16
    7792:	bd70      	pop	{r4, r5, r6, pc}
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    7794:	881a      	ldrh	r2, [r3, #0]
    7796:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    779a:	885a      	ldrh	r2, [r3, #2]
    779c:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    77a0:	889a      	ldrh	r2, [r3, #4]
    77a2:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    77a6:	88db      	ldrh	r3, [r3, #6]
    77a8:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    77ac:	2302      	movs	r3, #2
    77ae:	460a      	mov	r2, r1
    77b0:	2113      	movs	r1, #19
    77b2:	f7ff fdc5 	bl	7340 <l2cap_create_le_sig_pdu>
    77b6:	4606      	mov	r6, r0
	accepted = le_param_req(conn, &param);
    77b8:	a902      	add	r1, sp, #8
    77ba:	4620      	mov	r0, r4
    77bc:	f7fe fcc2 	bl	6144 <le_param_req>
    77c0:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    77c2:	2102      	movs	r1, #2
    77c4:	f106 0008 	add.w	r0, r6, #8
    77c8:	f012 fcb4 	bl	1a134 <net_buf_simple_add>
	if (accepted) {
    77cc:	b17d      	cbz	r5, 77ee <le_conn_param_update_req+0x7e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    77ce:	2300      	movs	r3, #0
    77d0:	7003      	strb	r3, [r0, #0]
    77d2:	7043      	strb	r3, [r0, #1]
    77d4:	2300      	movs	r3, #0
    77d6:	4632      	mov	r2, r6
    77d8:	2105      	movs	r1, #5
    77da:	4620      	mov	r0, r4
    77dc:	f7ff fe43 	bl	7466 <bt_l2cap_send_cb>
	if (accepted) {
    77e0:	2d00      	cmp	r5, #0
    77e2:	d0d5      	beq.n	7790 <le_conn_param_update_req+0x20>
		bt_conn_le_conn_update(conn, &param);
    77e4:	a902      	add	r1, sp, #8
    77e6:	4620      	mov	r0, r4
    77e8:	f7ff f976 	bl	6ad8 <bt_conn_le_conn_update>
    77ec:	e7d0      	b.n	7790 <le_conn_param_update_req+0x20>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    77ee:	2301      	movs	r3, #1
    77f0:	7003      	strb	r3, [r0, #0]
    77f2:	2300      	movs	r3, #0
    77f4:	7043      	strb	r3, [r0, #1]
    77f6:	e7ed      	b.n	77d4 <le_conn_param_update_req+0x64>

000077f8 <le_disconn_req>:
{
    77f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77fc:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    77fe:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    7800:	6897      	ldr	r7, [r2, #8]
	if (buf->len < sizeof(*req)) {
    7802:	8993      	ldrh	r3, [r2, #12]
    7804:	2b03      	cmp	r3, #3
    7806:	d802      	bhi.n	780e <le_disconn_req+0x16>
}
    7808:	b004      	add	sp, #16
    780a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    780e:	4614      	mov	r4, r2
    7810:	460d      	mov	r5, r1
	chan = l2cap_remove_tx_cid(conn, scid);
    7812:	8879      	ldrh	r1, [r7, #2]
    7814:	4630      	mov	r0, r6
    7816:	f7ff fb5f 	bl	6ed8 <l2cap_remove_tx_cid>
	if (!chan) {
    781a:	4680      	mov	r8, r0
    781c:	b1d0      	cbz	r0, 7854 <le_disconn_req+0x5c>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    781e:	2304      	movs	r3, #4
    7820:	462a      	mov	r2, r5
    7822:	2107      	movs	r1, #7
    7824:	4620      	mov	r0, r4
    7826:	f7ff fd8b 	bl	7340 <l2cap_create_le_sig_pdu>
    782a:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    782c:	2104      	movs	r1, #4
    782e:	3008      	adds	r0, #8
    7830:	f012 fc80 	bl	1a134 <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    7834:	f8b8 3040 	ldrh.w	r3, [r8, #64]	; 0x40
    7838:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    783a:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
    783e:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    7840:	4640      	mov	r0, r8
    7842:	f7ff fcb0 	bl	71a6 <bt_l2cap_chan_del>
    7846:	2300      	movs	r3, #0
    7848:	4622      	mov	r2, r4
    784a:	2105      	movs	r1, #5
    784c:	4630      	mov	r0, r6
    784e:	f7ff fe0a 	bl	7466 <bt_l2cap_send_cb>
    7852:	e7d9      	b.n	7808 <le_disconn_req+0x10>
		data.scid = req->scid;
    7854:	887b      	ldrh	r3, [r7, #2]
    7856:	f8ad 300c 	strh.w	r3, [sp, #12]
		data.dcid = req->dcid;
    785a:	883b      	ldrh	r3, [r7, #0]
    785c:	f8ad 300e 	strh.w	r3, [sp, #14]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    7860:	2304      	movs	r3, #4
    7862:	9300      	str	r3, [sp, #0]
    7864:	ab03      	add	r3, sp, #12
    7866:	2202      	movs	r2, #2
    7868:	4629      	mov	r1, r5
    786a:	4630      	mov	r0, r6
    786c:	f7ff ff5c 	bl	7728 <l2cap_send_reject>
    7870:	e7ca      	b.n	7808 <le_disconn_req+0x10>

00007872 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
    7872:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7874:	b108      	cbz	r0, 787a <bt_l2cap_le_lookup_tx_cid+0x8>
    7876:	3808      	subs	r0, #8
    7878:	e006      	b.n	7888 <bt_l2cap_le_lookup_tx_cid+0x16>
    787a:	2000      	movs	r0, #0
    787c:	e004      	b.n	7888 <bt_l2cap_le_lookup_tx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    787e:	461a      	mov	r2, r3
    7880:	e00b      	b.n	789a <bt_l2cap_le_lookup_tx_cid+0x28>
	return node->next;
    7882:	6883      	ldr	r3, [r0, #8]
    7884:	f1a3 0008 	sub.w	r0, r3, #8
    7888:	b168      	cbz	r0, 78a6 <bt_l2cap_le_lookup_tx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    788a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    788e:	428b      	cmp	r3, r1
    7890:	d009      	beq.n	78a6 <bt_l2cap_le_lookup_tx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7892:	f110 0308 	adds.w	r3, r0, #8
    7896:	d0f2      	beq.n	787e <bt_l2cap_le_lookup_tx_cid+0xc>
	return node->next;
    7898:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    789a:	b112      	cbz	r2, 78a2 <bt_l2cap_le_lookup_tx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    789c:	2b00      	cmp	r3, #0
    789e:	d1f0      	bne.n	7882 <bt_l2cap_le_lookup_tx_cid+0x10>
    78a0:	e7f0      	b.n	7884 <bt_l2cap_le_lookup_tx_cid+0x12>
    78a2:	2000      	movs	r0, #0
    78a4:	e7f0      	b.n	7888 <bt_l2cap_le_lookup_tx_cid+0x16>
}
    78a6:	4770      	bx	lr

000078a8 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
    78a8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    78aa:	b108      	cbz	r0, 78b0 <bt_l2cap_le_lookup_rx_cid+0x8>
    78ac:	3808      	subs	r0, #8
    78ae:	e006      	b.n	78be <bt_l2cap_le_lookup_rx_cid+0x16>
    78b0:	2000      	movs	r0, #0
    78b2:	e004      	b.n	78be <bt_l2cap_le_lookup_rx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    78b4:	461a      	mov	r2, r3
    78b6:	e00b      	b.n	78d0 <bt_l2cap_le_lookup_rx_cid+0x28>
	return node->next;
    78b8:	6883      	ldr	r3, [r0, #8]
    78ba:	f1a3 0008 	sub.w	r0, r3, #8
    78be:	b168      	cbz	r0, 78dc <bt_l2cap_le_lookup_rx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    78c0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    78c4:	428b      	cmp	r3, r1
    78c6:	d009      	beq.n	78dc <bt_l2cap_le_lookup_rx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    78c8:	f110 0308 	adds.w	r3, r0, #8
    78cc:	d0f2      	beq.n	78b4 <bt_l2cap_le_lookup_rx_cid+0xc>
	return node->next;
    78ce:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    78d0:	b112      	cbz	r2, 78d8 <bt_l2cap_le_lookup_rx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    78d2:	2b00      	cmp	r3, #0
    78d4:	d1f0      	bne.n	78b8 <bt_l2cap_le_lookup_rx_cid+0x10>
    78d6:	e7f0      	b.n	78ba <bt_l2cap_le_lookup_rx_cid+0x12>
    78d8:	2000      	movs	r0, #0
    78da:	e7f0      	b.n	78be <bt_l2cap_le_lookup_rx_cid+0x16>
}
    78dc:	4770      	bx	lr

000078de <l2cap_chan_alloc_cid>:
{
    78de:	b570      	push	{r4, r5, r6, lr}
    78e0:	4606      	mov	r6, r0
	if (ch && ch->rx.cid > 0) {
    78e2:	460d      	mov	r5, r1
    78e4:	b1a1      	cbz	r1, 7910 <l2cap_chan_alloc_cid+0x32>
    78e6:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
    78ea:	b9ab      	cbnz	r3, 7918 <l2cap_chan_alloc_cid+0x3a>
    78ec:	2440      	movs	r4, #64	; 0x40
    78ee:	e001      	b.n	78f4 <l2cap_chan_alloc_cid+0x16>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    78f0:	3401      	adds	r4, #1
    78f2:	b2a4      	uxth	r4, r4
    78f4:	2c7f      	cmp	r4, #127	; 0x7f
    78f6:	d80d      	bhi.n	7914 <l2cap_chan_alloc_cid+0x36>
		if (ch && !bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    78f8:	2d00      	cmp	r5, #0
    78fa:	d0f9      	beq.n	78f0 <l2cap_chan_alloc_cid+0x12>
    78fc:	4621      	mov	r1, r4
    78fe:	4630      	mov	r0, r6
    7900:	f7ff ffd2 	bl	78a8 <bt_l2cap_le_lookup_rx_cid>
    7904:	2800      	cmp	r0, #0
    7906:	d1f3      	bne.n	78f0 <l2cap_chan_alloc_cid+0x12>
			ch->rx.cid = cid;
    7908:	f8a5 4040 	strh.w	r4, [r5, #64]	; 0x40
			return ch;
    790c:	4628      	mov	r0, r5
    790e:	bd70      	pop	{r4, r5, r6, pc}
    7910:	2440      	movs	r4, #64	; 0x40
    7912:	e7ef      	b.n	78f4 <l2cap_chan_alloc_cid+0x16>
	return NULL;
    7914:	2000      	movs	r0, #0
    7916:	bd70      	pop	{r4, r5, r6, pc}
		return ch;
    7918:	4608      	mov	r0, r1
}
    791a:	bd70      	pop	{r4, r5, r6, pc}

0000791c <l2cap_chan_add>:
{
    791c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    791e:	4606      	mov	r6, r0
    7920:	460c      	mov	r4, r1
    7922:	4617      	mov	r7, r2
	ch = l2cap_chan_alloc_cid(conn, chan);
    7924:	f7ff ffdb 	bl	78de <l2cap_chan_alloc_cid>
	if (!ch) {
    7928:	b1c0      	cbz	r0, 795c <l2cap_chan_add+0x40>
    792a:	4605      	mov	r5, r0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    792c:	490c      	ldr	r1, [pc, #48]	; (7960 <l2cap_chan_add+0x44>)
    792e:	f104 0010 	add.w	r0, r4, #16
    7932:	f021 fccf 	bl	292d4 <k_delayed_work_init>
	bt_l2cap_chan_add(conn, chan, destroy);
    7936:	463a      	mov	r2, r7
    7938:	4621      	mov	r1, r4
    793a:	4630      	mov	r0, r6
    793c:	f7ff fcc2 	bl	72c4 <bt_l2cap_chan_add>
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    7940:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    7944:	3b40      	subs	r3, #64	; 0x40
    7946:	b29b      	uxth	r3, r3
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    7948:	2b3f      	cmp	r3, #63	; 0x3f
    794a:	d901      	bls.n	7950 <l2cap_chan_add+0x34>
	return true;
    794c:	2001      	movs	r0, #1
}
    794e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECT);
    7950:	2101      	movs	r1, #1
    7952:	4620      	mov	r0, r4
    7954:	f7ff fc24 	bl	71a0 <bt_l2cap_chan_set_state>
	return true;
    7958:	2001      	movs	r0, #1
    795a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
    795c:	2000      	movs	r0, #0
    795e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7960:	000071d1 	.word	0x000071d1

00007964 <bt_l2cap_connected>:
{
    7964:	b530      	push	{r4, r5, lr}
    7966:	b083      	sub	sp, #12
    7968:	4605      	mov	r5, r0
	return list->head;
    796a:	4b18      	ldr	r3, [pc, #96]	; (79cc <bt_l2cap_connected+0x68>)
    796c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    796e:	b10c      	cbz	r4, 7974 <bt_l2cap_connected+0x10>
    7970:	3c08      	subs	r4, #8
    7972:	e00a      	b.n	798a <bt_l2cap_connected+0x26>
    7974:	2400      	movs	r4, #0
    7976:	e008      	b.n	798a <bt_l2cap_connected+0x26>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7978:	f114 0308 	adds.w	r3, r4, #8
    797c:	d01f      	beq.n	79be <bt_l2cap_connected+0x5a>
	return node->next;
    797e:	68a2      	ldr	r2, [r4, #8]
    7980:	b1fa      	cbz	r2, 79c2 <bt_l2cap_connected+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7982:	b103      	cbz	r3, 7986 <bt_l2cap_connected+0x22>
	return node->next;
    7984:	68a3      	ldr	r3, [r4, #8]
    7986:	f1a3 0408 	sub.w	r4, r3, #8
    798a:	b1e4      	cbz	r4, 79c6 <bt_l2cap_connected+0x62>
		if (fchan->accept(conn, &chan) < 0) {
    798c:	6863      	ldr	r3, [r4, #4]
    798e:	a901      	add	r1, sp, #4
    7990:	4628      	mov	r0, r5
    7992:	4798      	blx	r3
    7994:	2800      	cmp	r0, #0
    7996:	dbef      	blt.n	7978 <bt_l2cap_connected+0x14>
		ch = BT_L2CAP_LE_CHAN(chan);
    7998:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    799a:	8823      	ldrh	r3, [r4, #0]
    799c:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
		ch->tx.cid = fchan->cid;
    79a0:	8823      	ldrh	r3, [r4, #0]
    79a2:	f8a1 3060 	strh.w	r3, [r1, #96]	; 0x60
		if (!l2cap_chan_add(conn, chan, NULL)) {
    79a6:	2200      	movs	r2, #0
    79a8:	4628      	mov	r0, r5
    79aa:	f7ff ffb7 	bl	791c <l2cap_chan_add>
    79ae:	b150      	cbz	r0, 79c6 <bt_l2cap_connected+0x62>
		if (chan->ops->connected) {
    79b0:	9801      	ldr	r0, [sp, #4]
    79b2:	6843      	ldr	r3, [r0, #4]
    79b4:	681b      	ldr	r3, [r3, #0]
    79b6:	2b00      	cmp	r3, #0
    79b8:	d0de      	beq.n	7978 <bt_l2cap_connected+0x14>
			chan->ops->connected(chan);
    79ba:	4798      	blx	r3
    79bc:	e7dc      	b.n	7978 <bt_l2cap_connected+0x14>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    79be:	461a      	mov	r2, r3
    79c0:	e7de      	b.n	7980 <bt_l2cap_connected+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    79c2:	2400      	movs	r4, #0
    79c4:	e7e1      	b.n	798a <bt_l2cap_connected+0x26>
}
    79c6:	b003      	add	sp, #12
    79c8:	bd30      	pop	{r4, r5, pc}
    79ca:	bf00      	nop
    79cc:	20000540 	.word	0x20000540

000079d0 <le_conn_req>:
{
    79d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    79d4:	b085      	sub	sp, #20
	struct bt_conn *conn = l2cap->chan.chan.conn;
    79d6:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    79d8:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    79da:	8990      	ldrh	r0, [r2, #12]
    79dc:	2809      	cmp	r0, #9
    79de:	d912      	bls.n	7a06 <le_conn_req+0x36>
	psm = sys_le16_to_cpu(req->psm);
    79e0:	f8b3 9000 	ldrh.w	r9, [r3]
	scid = sys_le16_to_cpu(req->scid);
    79e4:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    79e8:	fa1f fa88 	uxth.w	sl, r8
	mtu = sys_le16_to_cpu(req->mtu);
    79ec:	889e      	ldrh	r6, [r3, #4]
    79ee:	b2b0      	uxth	r0, r6
	mps = sys_le16_to_cpu(req->mps);
    79f0:	88df      	ldrh	r7, [r3, #6]
    79f2:	fa1f fe87 	uxth.w	lr, r7
	credits = sys_le16_to_cpu(req->credits);
    79f6:	891d      	ldrh	r5, [r3, #8]
    79f8:	fa1f fb85 	uxth.w	fp, r5
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    79fc:	2816      	cmp	r0, #22
    79fe:	d902      	bls.n	7a06 <le_conn_req+0x36>
    7a00:	f1be 0f16 	cmp.w	lr, #22
    7a04:	d802      	bhi.n	7a0c <le_conn_req+0x3c>
}
    7a06:	b005      	add	sp, #20
    7a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7a0c:	4610      	mov	r0, r2
    7a0e:	460a      	mov	r2, r1
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    7a10:	230a      	movs	r3, #10
    7a12:	2115      	movs	r1, #21
    7a14:	f7ff fc94 	bl	7340 <l2cap_create_le_sig_pdu>
    7a18:	9000      	str	r0, [sp, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    7a1a:	210a      	movs	r1, #10
    7a1c:	3008      	adds	r0, #8
    7a1e:	f012 fb89 	bl	1a134 <net_buf_simple_add>
    7a22:	9001      	str	r0, [sp, #4]
	memset(rsp, 0, sizeof(*rsp));
    7a24:	220a      	movs	r2, #10
    7a26:	2100      	movs	r1, #0
    7a28:	f021 fe56 	bl	296d8 <memset>
	server = l2cap_server_lookup_psm(psm);
    7a2c:	4648      	mov	r0, r9
    7a2e:	f7ff fa35 	bl	6e9c <l2cap_server_lookup_psm>
	if (!server) {
    7a32:	4681      	mov	r9, r0
    7a34:	b168      	cbz	r0, 7a52 <le_conn_req+0x82>
	if (conn->sec_level < server->sec_level) {
    7a36:	7a22      	ldrb	r2, [r4, #8]
    7a38:	7883      	ldrb	r3, [r0, #2]
    7a3a:	429a      	cmp	r2, r3
    7a3c:	d20d      	bcs.n	7a5a <le_conn_req+0x8a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_AUTHENTICATION);
    7a3e:	2305      	movs	r3, #5
    7a40:	9a01      	ldr	r2, [sp, #4]
    7a42:	8113      	strh	r3, [r2, #8]
    7a44:	2300      	movs	r3, #0
    7a46:	9a00      	ldr	r2, [sp, #0]
    7a48:	2105      	movs	r1, #5
    7a4a:	4620      	mov	r0, r4
    7a4c:	f7ff fd0b 	bl	7466 <bt_l2cap_send_cb>
    7a50:	e7d9      	b.n	7a06 <le_conn_req+0x36>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_PSM_NOT_SUPP);
    7a52:	2302      	movs	r3, #2
    7a54:	9a01      	ldr	r2, [sp, #4]
    7a56:	8113      	strh	r3, [r2, #8]
		goto rsp;
    7a58:	e7f4      	b.n	7a44 <le_conn_req+0x74>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    7a5a:	f1aa 0340 	sub.w	r3, sl, #64	; 0x40
    7a5e:	b29b      	uxth	r3, r3
    7a60:	2b3f      	cmp	r3, #63	; 0x3f
    7a62:	d903      	bls.n	7a6c <le_conn_req+0x9c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_INVALID_SCID);
    7a64:	2309      	movs	r3, #9
    7a66:	9a01      	ldr	r2, [sp, #4]
    7a68:	8113      	strh	r3, [r2, #8]
		goto rsp;
    7a6a:	e7eb      	b.n	7a44 <le_conn_req+0x74>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    7a6c:	4651      	mov	r1, sl
    7a6e:	4620      	mov	r0, r4
    7a70:	f7ff feff 	bl	7872 <bt_l2cap_le_lookup_tx_cid>
    7a74:	9003      	str	r0, [sp, #12]
	if (chan) {
    7a76:	b118      	cbz	r0, 7a80 <le_conn_req+0xb0>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_SCID_IN_USE);
    7a78:	230a      	movs	r3, #10
    7a7a:	9a01      	ldr	r2, [sp, #4]
    7a7c:	8113      	strh	r3, [r2, #8]
		goto rsp;
    7a7e:	e7e1      	b.n	7a44 <le_conn_req+0x74>
	if (server->accept(conn, &chan) < 0) {
    7a80:	f8d9 3004 	ldr.w	r3, [r9, #4]
    7a84:	a903      	add	r1, sp, #12
    7a86:	4620      	mov	r0, r4
    7a88:	4798      	blx	r3
    7a8a:	2800      	cmp	r0, #0
    7a8c:	da03      	bge.n	7a96 <le_conn_req+0xc6>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    7a8e:	2304      	movs	r3, #4
    7a90:	9a01      	ldr	r2, [sp, #4]
    7a92:	8113      	strh	r3, [r2, #8]
		goto rsp;
    7a94:	e7d6      	b.n	7a44 <le_conn_req+0x74>
	chan->required_sec_level = server->sec_level;
    7a96:	9903      	ldr	r1, [sp, #12]
    7a98:	f899 3002 	ldrb.w	r3, [r9, #2]
    7a9c:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    7aa0:	4a1e      	ldr	r2, [pc, #120]	; (7b1c <le_conn_req+0x14c>)
    7aa2:	4620      	mov	r0, r4
    7aa4:	f7ff ff3a 	bl	791c <l2cap_chan_add>
    7aa8:	b918      	cbnz	r0, 7ab2 <le_conn_req+0xe2>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    7aaa:	2304      	movs	r3, #4
    7aac:	9a01      	ldr	r2, [sp, #4]
    7aae:	8113      	strh	r3, [r2, #8]
    7ab0:	e7c8      	b.n	7a44 <le_conn_req+0x74>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    7ab2:	f8dd a00c 	ldr.w	sl, [sp, #12]
		l2cap_chan_tx_init(ch);
    7ab6:	4650      	mov	r0, sl
    7ab8:	f7ff fabd 	bl	7036 <l2cap_chan_tx_init>
		ch->tx.cid = scid;
    7abc:	f8aa 8060 	strh.w	r8, [sl, #96]	; 0x60
		ch->tx.mps = mps;
    7ac0:	f8aa 7064 	strh.w	r7, [sl, #100]	; 0x64
		ch->tx.mtu = mtu;
    7ac4:	f8aa 6062 	strh.w	r6, [sl, #98]	; 0x62
		ch->tx.init_credits = credits;
    7ac8:	f8aa 5066 	strh.w	r5, [sl, #102]	; 0x66
		l2cap_chan_tx_give_credits(ch, credits);
    7acc:	4659      	mov	r1, fp
    7ace:	4650      	mov	r0, sl
    7ad0:	f7ff fa79 	bl	6fc6 <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_init(ch);
    7ad4:	4650      	mov	r0, sl
    7ad6:	f7ff fac1 	bl	705c <l2cap_chan_rx_init>
		l2cap_chan_rx_give_credits(ch, ch->rx.init_credits);
    7ada:	f8ba 1046 	ldrh.w	r1, [sl, #70]	; 0x46
    7ade:	4650      	mov	r0, sl
    7ae0:	f7ff fa64 	bl	6fac <l2cap_chan_rx_give_credits>
		chan->psm = server->psm;
    7ae4:	9803      	ldr	r0, [sp, #12]
    7ae6:	f8b9 3000 	ldrh.w	r3, [r9]
    7aea:	8743      	strh	r3, [r0, #58]	; 0x3a
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECTED);
    7aec:	2103      	movs	r1, #3
    7aee:	f7ff fb57 	bl	71a0 <bt_l2cap_chan_set_state>
		if (chan->ops->connected) {
    7af2:	9803      	ldr	r0, [sp, #12]
    7af4:	6843      	ldr	r3, [r0, #4]
    7af6:	681b      	ldr	r3, [r3, #0]
    7af8:	b103      	cbz	r3, 7afc <le_conn_req+0x12c>
			chan->ops->connected(chan);
    7afa:	4798      	blx	r3
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    7afc:	f8ba 3040 	ldrh.w	r3, [sl, #64]	; 0x40
    7b00:	9901      	ldr	r1, [sp, #4]
    7b02:	800b      	strh	r3, [r1, #0]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    7b04:	f8ba 3044 	ldrh.w	r3, [sl, #68]	; 0x44
    7b08:	808b      	strh	r3, [r1, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    7b0a:	f8ba 3042 	ldrh.w	r3, [sl, #66]	; 0x42
    7b0e:	804b      	strh	r3, [r1, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    7b10:	f8ba 3046 	ldrh.w	r3, [sl, #70]	; 0x46
    7b14:	80cb      	strh	r3, [r1, #6]
		rsp->result = BT_L2CAP_SUCCESS;
    7b16:	2300      	movs	r3, #0
    7b18:	810b      	strh	r3, [r1, #8]
    7b1a:	e793      	b.n	7a44 <le_conn_req+0x74>
    7b1c:	00006fe1 	.word	0x00006fe1

00007b20 <l2cap_le_connect>:

#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static int l2cap_le_connect(struct bt_conn *conn, struct bt_l2cap_le_chan *ch,
			    u16_t psm)
{
	if (psm < L2CAP_LE_PSM_START || psm > L2CAP_LE_PSM_END) {
    7b20:	1e53      	subs	r3, r2, #1
    7b22:	b29b      	uxth	r3, r3
    7b24:	2bfe      	cmp	r3, #254	; 0xfe
    7b26:	d814      	bhi.n	7b52 <l2cap_le_connect+0x32>
{
    7b28:	b570      	push	{r4, r5, r6, lr}
    7b2a:	4615      	mov	r5, r2
    7b2c:	460c      	mov	r4, r1
    7b2e:	4606      	mov	r6, r0
		return -EINVAL;
	}

	l2cap_chan_tx_init(ch);
    7b30:	4608      	mov	r0, r1
    7b32:	f7ff fa80 	bl	7036 <l2cap_chan_tx_init>
	l2cap_chan_rx_init(ch);
    7b36:	4620      	mov	r0, r4
    7b38:	f7ff fa90 	bl	705c <l2cap_chan_rx_init>

	if (!l2cap_chan_add(conn, &ch->chan, l2cap_chan_destroy)) {
    7b3c:	4a08      	ldr	r2, [pc, #32]	; (7b60 <l2cap_le_connect+0x40>)
    7b3e:	4621      	mov	r1, r4
    7b40:	4630      	mov	r0, r6
    7b42:	f7ff feeb 	bl	791c <l2cap_chan_add>
    7b46:	b138      	cbz	r0, 7b58 <l2cap_le_connect+0x38>
		return -ENOMEM;
	}

	ch->chan.psm = psm;
    7b48:	8765      	strh	r5, [r4, #58]	; 0x3a

	return l2cap_le_conn_req(ch);
    7b4a:	4620      	mov	r0, r4
    7b4c:	f7ff fcb6 	bl	74bc <l2cap_le_conn_req>
    7b50:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    7b52:	f06f 0015 	mvn.w	r0, #21
    7b56:	4770      	bx	lr
		return -ENOMEM;
    7b58:	f06f 000b 	mvn.w	r0, #11
}
    7b5c:	bd70      	pop	{r4, r5, r6, pc}
    7b5e:	bf00      	nop
    7b60:	00006fe1 	.word	0x00006fe1

00007b64 <bt_l2cap_server_register>:
	if (server->psm < L2CAP_LE_PSM_START ||
    7b64:	8802      	ldrh	r2, [r0, #0]
    7b66:	1e53      	subs	r3, r2, #1
    7b68:	b29b      	uxth	r3, r3
    7b6a:	2bfe      	cmp	r3, #254	; 0xfe
    7b6c:	d81d      	bhi.n	7baa <bt_l2cap_server_register+0x46>
	    server->psm > L2CAP_LE_PSM_END || !server->accept) {
    7b6e:	6843      	ldr	r3, [r0, #4]
    7b70:	b1f3      	cbz	r3, 7bb0 <bt_l2cap_server_register+0x4c>
	if (server->sec_level > BT_SECURITY_FIPS) {
    7b72:	7883      	ldrb	r3, [r0, #2]
    7b74:	2b04      	cmp	r3, #4
    7b76:	d81e      	bhi.n	7bb6 <bt_l2cap_server_register+0x52>
{
    7b78:	b510      	push	{r4, lr}
	} else if (server->sec_level < BT_SECURITY_LOW) {
    7b7a:	b90b      	cbnz	r3, 7b80 <bt_l2cap_server_register+0x1c>
		server->sec_level = BT_SECURITY_LOW;
    7b7c:	2301      	movs	r3, #1
    7b7e:	7083      	strb	r3, [r0, #2]
    7b80:	4604      	mov	r4, r0
	if (l2cap_server_lookup_psm(server->psm)) {
    7b82:	4610      	mov	r0, r2
    7b84:	f7ff f98a 	bl	6e9c <l2cap_server_lookup_psm>
    7b88:	b9c0      	cbnz	r0, 7bbc <bt_l2cap_server_register+0x58>
	sys_slist_append(&servers, &server->node);
    7b8a:	f104 0308 	add.w	r3, r4, #8
	node->next = NULL;
    7b8e:	2200      	movs	r2, #0
    7b90:	60a2      	str	r2, [r4, #8]
	if (!list->tail) {
    7b92:	4a0c      	ldr	r2, [pc, #48]	; (7bc4 <bt_l2cap_server_register+0x60>)
    7b94:	6852      	ldr	r2, [r2, #4]
    7b96:	b122      	cbz	r2, 7ba2 <bt_l2cap_server_register+0x3e>
		list->tail->next = node;
    7b98:	6013      	str	r3, [r2, #0]
		list->tail = node;
    7b9a:	4a0a      	ldr	r2, [pc, #40]	; (7bc4 <bt_l2cap_server_register+0x60>)
    7b9c:	6053      	str	r3, [r2, #4]
	return 0;
    7b9e:	2000      	movs	r0, #0
    7ba0:	bd10      	pop	{r4, pc}
		list->tail = node;
    7ba2:	4a08      	ldr	r2, [pc, #32]	; (7bc4 <bt_l2cap_server_register+0x60>)
    7ba4:	6053      	str	r3, [r2, #4]
		list->head = node;
    7ba6:	6013      	str	r3, [r2, #0]
    7ba8:	bd10      	pop	{r4, pc}
		return -EINVAL;
    7baa:	f06f 0015 	mvn.w	r0, #21
    7bae:	4770      	bx	lr
    7bb0:	f06f 0015 	mvn.w	r0, #21
    7bb4:	4770      	bx	lr
		return -EINVAL;
    7bb6:	f06f 0015 	mvn.w	r0, #21
    7bba:	4770      	bx	lr
		return -EADDRINUSE;
    7bbc:	f06f 006f 	mvn.w	r0, #111	; 0x6f
}
    7bc0:	bd10      	pop	{r4, pc}
    7bc2:	bf00      	nop
    7bc4:	20000548 	.word	0x20000548

00007bc8 <bt_l2cap_update_conn_param>:
{
    7bc8:	b570      	push	{r4, r5, r6, lr}
    7bca:	4606      	mov	r6, r0
    7bcc:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    7bce:	f7ff f91f 	bl	6e10 <get_ident>
    7bd2:	2308      	movs	r3, #8
    7bd4:	4602      	mov	r2, r0
    7bd6:	2112      	movs	r1, #18
    7bd8:	2000      	movs	r0, #0
    7bda:	f7ff fbb1 	bl	7340 <l2cap_create_le_sig_pdu>
    7bde:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    7be0:	2108      	movs	r1, #8
    7be2:	4408      	add	r0, r1
    7be4:	f012 faa6 	bl	1a134 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    7be8:	8823      	ldrh	r3, [r4, #0]
    7bea:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    7bec:	8863      	ldrh	r3, [r4, #2]
    7bee:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    7bf0:	88a3      	ldrh	r3, [r4, #4]
    7bf2:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    7bf4:	88e3      	ldrh	r3, [r4, #6]
    7bf6:	80c3      	strh	r3, [r0, #6]
    7bf8:	2300      	movs	r3, #0
    7bfa:	462a      	mov	r2, r5
    7bfc:	2105      	movs	r1, #5
    7bfe:	4630      	mov	r0, r6
    7c00:	f7ff fc31 	bl	7466 <bt_l2cap_send_cb>
}
    7c04:	2000      	movs	r0, #0
    7c06:	bd70      	pop	{r4, r5, r6, pc}

00007c08 <bt_l2cap_init>:
{
    7c08:	b508      	push	{r3, lr}
	bt_l2cap_le_fixed_chan_register(&chan);
    7c0a:	4802      	ldr	r0, [pc, #8]	; (7c14 <bt_l2cap_init+0xc>)
    7c0c:	f7ff fa84 	bl	7118 <bt_l2cap_le_fixed_chan_register>
    7c10:	bd08      	pop	{r3, pc}
    7c12:	bf00      	nop
    7c14:	2000b8b8 	.word	0x2000b8b8

00007c18 <bt_l2cap_chan_connect>:
int bt_l2cap_chan_connect(struct bt_conn *conn, struct bt_l2cap_chan *chan,
			  u16_t psm)
{
	BT_DBG("conn %p chan %p psm 0x%04x", conn, chan, psm);

	if (!conn || conn->state != BT_CONN_CONNECTED) {
    7c18:	b188      	cbz	r0, 7c3e <bt_l2cap_chan_connect+0x26>
{
    7c1a:	b508      	push	{r3, lr}
    7c1c:	4603      	mov	r3, r0
	if (!conn || conn->state != BT_CONN_CONNECTED) {
    7c1e:	7b00      	ldrb	r0, [r0, #12]
    7c20:	2803      	cmp	r0, #3
    7c22:	d10f      	bne.n	7c44 <bt_l2cap_chan_connect+0x2c>
		return -ENOTCONN;
	}

	if (!chan) {
    7c24:	b189      	cbz	r1, 7c4a <bt_l2cap_chan_connect+0x32>
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_connect(conn, chan, psm);
	}

	if (chan->required_sec_level > BT_SECURITY_FIPS) {
    7c26:	f891 003d 	ldrb.w	r0, [r1, #61]	; 0x3d
    7c2a:	2804      	cmp	r0, #4
    7c2c:	d810      	bhi.n	7c50 <bt_l2cap_chan_connect+0x38>
		return -EINVAL;
	} else if (chan->required_sec_level == BT_SECURITY_NONE) {
    7c2e:	b910      	cbnz	r0, 7c36 <bt_l2cap_chan_connect+0x1e>
		chan->required_sec_level = BT_SECURITY_LOW;
    7c30:	2001      	movs	r0, #1
    7c32:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
    7c36:	4618      	mov	r0, r3
	}

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
    7c38:	f7ff ff72 	bl	7b20 <l2cap_le_connect>
    7c3c:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
    7c3e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    7c42:	4770      	bx	lr
    7c44:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    7c48:	bd08      	pop	{r3, pc}
		return -EINVAL;
    7c4a:	f06f 0015 	mvn.w	r0, #21
    7c4e:	bd08      	pop	{r3, pc}
		return -EINVAL;
    7c50:	f06f 0015 	mvn.w	r0, #21
}
    7c54:	bd08      	pop	{r3, pc}

00007c56 <bt_l2cap_chan_disconnect>:

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    7c56:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
    7c58:	6803      	ldr	r3, [r0, #0]
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    7c5a:	b30b      	cbz	r3, 7ca0 <bt_l2cap_chan_disconnect+0x4a>
    7c5c:	4604      	mov	r4, r0
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    7c5e:	f7ff f8d7 	bl	6e10 <get_ident>
    7c62:	4602      	mov	r2, r0
    7c64:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    7c68:	2304      	movs	r3, #4
    7c6a:	2106      	movs	r1, #6
    7c6c:	2000      	movs	r0, #0
    7c6e:	f7ff fb67 	bl	7340 <l2cap_create_le_sig_pdu>
    7c72:	4605      	mov	r5, r0
				      ch->chan.ident, sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    7c74:	2104      	movs	r1, #4
    7c76:	3008      	adds	r0, #8
    7c78:	f012 fa5c 	bl	1a134 <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->tx.cid);
    7c7c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    7c80:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    7c82:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    7c86:	8043      	strh	r3, [r0, #2]

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
    7c88:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    7c8c:	4629      	mov	r1, r5
    7c8e:	4620      	mov	r0, r4
    7c90:	f7ff fbfe 	bl	7490 <l2cap_chan_send_req>
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);
    7c94:	2104      	movs	r1, #4
    7c96:	4620      	mov	r0, r4
    7c98:	f7ff fa82 	bl	71a0 <bt_l2cap_chan_set_state>

	return 0;
    7c9c:	2000      	movs	r0, #0
    7c9e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    7ca0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    7ca4:	bd38      	pop	{r3, r4, r5, pc}

00007ca6 <l2cap_chan_le_recv_sdu>:
{
    7ca6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7caa:	4681      	mov	r9, r0
    7cac:	460e      	mov	r6, r1
	if (net_buf_frags_len(chan->_sdu) + buf->len > chan->_sdu_len) {
    7cae:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    7cb2:	4603      	mov	r3, r0
	size_t bytes = 0;
    7cb4:	2200      	movs	r2, #0
    7cb6:	e002      	b.n	7cbe <l2cap_chan_le_recv_sdu+0x18>
		bytes += buf->len;
    7cb8:	8999      	ldrh	r1, [r3, #12]
    7cba:	440a      	add	r2, r1
		buf = buf->frags;
    7cbc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    7cbe:	2b00      	cmp	r3, #0
    7cc0:	d1fa      	bne.n	7cb8 <l2cap_chan_le_recv_sdu+0x12>
    7cc2:	89b3      	ldrh	r3, [r6, #12]
    7cc4:	441a      	add	r2, r3
    7cc6:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    7cca:	429a      	cmp	r2, r3
    7ccc:	d803      	bhi.n	7cd6 <l2cap_chan_le_recv_sdu+0x30>
	frag = net_buf_frag_last(chan->_sdu);
    7cce:	f012 fa05 	bl	1a0dc <net_buf_frag_last>
    7cd2:	4680      	mov	r8, r0
	while (buf->len) {
    7cd4:	e017      	b.n	7d06 <l2cap_chan_le_recv_sdu+0x60>
		bt_l2cap_chan_disconnect(&chan->chan);
    7cd6:	4648      	mov	r0, r9
    7cd8:	f7ff ffbd 	bl	7c56 <bt_l2cap_chan_disconnect>
		return;
    7cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    7ce0:	f108 0708 	add.w	r7, r8, #8
    7ce4:	4638      	mov	r0, r7
    7ce6:	f012 fa8e 	bl	1a206 <net_buf_simple_tailroom>
    7cea:	89b4      	ldrh	r4, [r6, #12]
    7cec:	42a0      	cmp	r0, r4
    7cee:	d31d      	bcc.n	7d2c <l2cap_chan_le_recv_sdu+0x86>
		net_buf_add_mem(frag, buf->data, len);
    7cf0:	4635      	mov	r5, r6
    7cf2:	4622      	mov	r2, r4
    7cf4:	f855 1f08 	ldr.w	r1, [r5, #8]!
    7cf8:	4638      	mov	r0, r7
    7cfa:	f012 fa21 	bl	1a140 <net_buf_simple_add_mem>
		net_buf_pull(buf, len);
    7cfe:	4621      	mov	r1, r4
    7d00:	4628      	mov	r0, r5
    7d02:	f012 fa64 	bl	1a1ce <net_buf_simple_pull>
	while (buf->len) {
    7d06:	89b3      	ldrh	r3, [r6, #12]
    7d08:	b1ab      	cbz	r3, 7d36 <l2cap_chan_le_recv_sdu+0x90>
		if (!net_buf_tailroom(frag)) {
    7d0a:	f108 0008 	add.w	r0, r8, #8
    7d0e:	f012 fa7a 	bl	1a206 <net_buf_simple_tailroom>
    7d12:	2800      	cmp	r0, #0
    7d14:	d1e4      	bne.n	7ce0 <l2cap_chan_le_recv_sdu+0x3a>
			frag = l2cap_alloc_frag(chan);
    7d16:	4648      	mov	r0, r9
    7d18:	f7ff f93a 	bl	6f90 <l2cap_alloc_frag>
			if (!frag) {
    7d1c:	4680      	mov	r8, r0
    7d1e:	2800      	cmp	r0, #0
    7d20:	d1de      	bne.n	7ce0 <l2cap_chan_le_recv_sdu+0x3a>
				bt_l2cap_chan_disconnect(&chan->chan);
    7d22:	4648      	mov	r0, r9
    7d24:	f7ff ff97 	bl	7c56 <bt_l2cap_chan_disconnect>
				return;
    7d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    7d2c:	4638      	mov	r0, r7
    7d2e:	f012 fa6a 	bl	1a206 <net_buf_simple_tailroom>
    7d32:	b284      	uxth	r4, r0
    7d34:	e7dc      	b.n	7cf0 <l2cap_chan_le_recv_sdu+0x4a>
	if (net_buf_frags_len(chan->_sdu) == chan->_sdu_len) {
    7d36:	f8d9 1094 	ldr.w	r1, [r9, #148]	; 0x94
    7d3a:	460b      	mov	r3, r1
	size_t bytes = 0;
    7d3c:	2200      	movs	r2, #0
    7d3e:	e002      	b.n	7d46 <l2cap_chan_le_recv_sdu+0xa0>
		bytes += buf->len;
    7d40:	8998      	ldrh	r0, [r3, #12]
    7d42:	4402      	add	r2, r0
		buf = buf->frags;
    7d44:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    7d46:	2b00      	cmp	r3, #0
    7d48:	d1fa      	bne.n	7d40 <l2cap_chan_le_recv_sdu+0x9a>
    7d4a:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    7d4e:	4293      	cmp	r3, r2
    7d50:	d005      	beq.n	7d5e <l2cap_chan_le_recv_sdu+0xb8>
	l2cap_chan_update_credits(chan, buf);
    7d52:	4631      	mov	r1, r6
    7d54:	4648      	mov	r0, r9
    7d56:	f7ff fc12 	bl	757e <l2cap_chan_update_credits>
    7d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chan->chan.ops->recv(&chan->chan, chan->_sdu);
    7d5e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    7d62:	691b      	ldr	r3, [r3, #16]
    7d64:	4648      	mov	r0, r9
    7d66:	4798      	blx	r3
		net_buf_unref(chan->_sdu);
    7d68:	f8d9 0094 	ldr.w	r0, [r9, #148]	; 0x94
    7d6c:	f012 f996 	bl	1a09c <net_buf_unref>
		chan->_sdu = NULL;
    7d70:	2300      	movs	r3, #0
    7d72:	f8c9 3094 	str.w	r3, [r9, #148]	; 0x94
		chan->_sdu_len = 0;
    7d76:	f8a9 3098 	strh.w	r3, [r9, #152]	; 0x98
    7d7a:	e7ea      	b.n	7d52 <l2cap_chan_le_recv_sdu+0xac>

00007d7c <l2cap_chan_le_recv>:
{
    7d7c:	b570      	push	{r4, r5, r6, lr}
    7d7e:	4604      	mov	r4, r0
    7d80:	460d      	mov	r5, r1
    7d82:	2100      	movs	r1, #0
    7d84:	3048      	adds	r0, #72	; 0x48
    7d86:	f020 fce7 	bl	28758 <_impl_k_sem_take>
	if (k_sem_take(&chan->rx.credits, K_NO_WAIT)) {
    7d8a:	b938      	cbnz	r0, 7d9c <l2cap_chan_le_recv+0x20>
	if (chan->_sdu) {
    7d8c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    7d90:	b143      	cbz	r3, 7da4 <l2cap_chan_le_recv+0x28>
		l2cap_chan_le_recv_sdu(chan, buf);
    7d92:	4629      	mov	r1, r5
    7d94:	4620      	mov	r0, r4
    7d96:	f7ff ff86 	bl	7ca6 <l2cap_chan_le_recv_sdu>
		return;
    7d9a:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    7d9c:	4620      	mov	r0, r4
    7d9e:	f7ff ff5a 	bl	7c56 <bt_l2cap_chan_disconnect>
		return;
    7da2:	bd70      	pop	{r4, r5, r6, pc}
	sdu_len = net_buf_pull_le16(buf);
    7da4:	f105 0008 	add.w	r0, r5, #8
    7da8:	f012 fa21 	bl	1a1ee <net_buf_simple_pull_le16>
    7dac:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    7dae:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    7db2:	4298      	cmp	r0, r3
    7db4:	d80e      	bhi.n	7dd4 <l2cap_chan_le_recv+0x58>
	if (chan->chan.ops->alloc_buf) {
    7db6:	6862      	ldr	r2, [r4, #4]
    7db8:	68d3      	ldr	r3, [r2, #12]
    7dba:	b19b      	cbz	r3, 7de4 <l2cap_chan_le_recv+0x68>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    7dbc:	4620      	mov	r0, r4
    7dbe:	4798      	blx	r3
    7dc0:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
		if (!chan->_sdu) {
    7dc4:	b150      	cbz	r0, 7ddc <l2cap_chan_le_recv+0x60>
		chan->_sdu_len = sdu_len;
    7dc6:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98
		l2cap_chan_le_recv_sdu(chan, buf);
    7dca:	4629      	mov	r1, r5
    7dcc:	4620      	mov	r0, r4
    7dce:	f7ff ff6a 	bl	7ca6 <l2cap_chan_le_recv_sdu>
		return;
    7dd2:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    7dd4:	4620      	mov	r0, r4
    7dd6:	f7ff ff3e 	bl	7c56 <bt_l2cap_chan_disconnect>
		return;
    7dda:	bd70      	pop	{r4, r5, r6, pc}
			bt_l2cap_chan_disconnect(&chan->chan);
    7ddc:	4620      	mov	r0, r4
    7dde:	f7ff ff3a 	bl	7c56 <bt_l2cap_chan_disconnect>
			return;
    7de2:	bd70      	pop	{r4, r5, r6, pc}
	chan->chan.ops->recv(&chan->chan, buf);
    7de4:	6913      	ldr	r3, [r2, #16]
    7de6:	4629      	mov	r1, r5
    7de8:	4620      	mov	r0, r4
    7dea:	4798      	blx	r3
	l2cap_chan_update_credits(chan, buf);
    7dec:	4629      	mov	r1, r5
    7dee:	4620      	mov	r0, r4
    7df0:	f7ff fbc5 	bl	757e <l2cap_chan_update_credits>
    7df4:	bd70      	pop	{r4, r5, r6, pc}

00007df6 <l2cap_chan_recv>:
{
    7df6:	b508      	push	{r3, lr}
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    7df8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    7dfc:	3b40      	subs	r3, #64	; 0x40
    7dfe:	b29b      	uxth	r3, r3
    7e00:	2b3f      	cmp	r3, #63	; 0x3f
    7e02:	d903      	bls.n	7e0c <l2cap_chan_recv+0x16>
	chan->ops->recv(chan, buf);
    7e04:	6843      	ldr	r3, [r0, #4]
    7e06:	691b      	ldr	r3, [r3, #16]
    7e08:	4798      	blx	r3
    7e0a:	bd08      	pop	{r3, pc}
		l2cap_chan_le_recv(ch, buf);
    7e0c:	f7ff ffb6 	bl	7d7c <l2cap_chan_le_recv>
		return;
    7e10:	bd08      	pop	{r3, pc}

00007e12 <bt_l2cap_recv>:
{
    7e12:	b570      	push	{r4, r5, r6, lr}
    7e14:	460c      	mov	r4, r1
	struct bt_l2cap_hdr *hdr = (void *)buf->data;
    7e16:	688a      	ldr	r2, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    7e18:	898b      	ldrh	r3, [r1, #12]
    7e1a:	2b03      	cmp	r3, #3
    7e1c:	d912      	bls.n	7e44 <bt_l2cap_recv+0x32>
    7e1e:	4605      	mov	r5, r0
	cid = sys_le16_to_cpu(hdr->cid);
    7e20:	8856      	ldrh	r6, [r2, #2]
	net_buf_pull(buf, sizeof(*hdr));
    7e22:	2104      	movs	r1, #4
    7e24:	f104 0008 	add.w	r0, r4, #8
    7e28:	f012 f9d1 	bl	1a1ce <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    7e2c:	4631      	mov	r1, r6
    7e2e:	4628      	mov	r0, r5
    7e30:	f7ff fd3a 	bl	78a8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    7e34:	b150      	cbz	r0, 7e4c <bt_l2cap_recv+0x3a>
	l2cap_chan_recv(chan, buf);
    7e36:	4621      	mov	r1, r4
    7e38:	f7ff ffdd 	bl	7df6 <l2cap_chan_recv>
	net_buf_unref(buf);
    7e3c:	4620      	mov	r0, r4
    7e3e:	f012 f92d 	bl	1a09c <net_buf_unref>
    7e42:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    7e44:	4608      	mov	r0, r1
    7e46:	f012 f929 	bl	1a09c <net_buf_unref>
		return;
    7e4a:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    7e4c:	4620      	mov	r0, r4
    7e4e:	f012 f925 	bl	1a09c <net_buf_unref>
		return;
    7e52:	bd70      	pop	{r4, r5, r6, pc}

00007e54 <le_credits>:
{
    7e54:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7e56:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    7e58:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*ev)) {
    7e5a:	8993      	ldrh	r3, [r2, #12]
    7e5c:	2b03      	cmp	r3, #3
    7e5e:	d800      	bhi.n	7e62 <le_credits+0xe>
    7e60:	bd38      	pop	{r3, r4, r5, pc}
	credits = sys_le16_to_cpu(ev->credits);
    7e62:	884d      	ldrh	r5, [r1, #2]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    7e64:	8809      	ldrh	r1, [r1, #0]
    7e66:	f7ff fd04 	bl	7872 <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    7e6a:	4604      	mov	r4, r0
    7e6c:	2800      	cmp	r0, #0
    7e6e:	d0f7      	beq.n	7e60 <le_credits+0xc>
    7e70:	6f03      	ldr	r3, [r0, #112]	; 0x70
	if (k_sem_count_get(&ch->tx.credits) + credits > UINT16_MAX) {
    7e72:	442b      	add	r3, r5
    7e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    7e78:	d206      	bcs.n	7e88 <le_credits+0x34>
	l2cap_chan_tx_give_credits(ch, credits);
    7e7a:	4629      	mov	r1, r5
    7e7c:	f7ff f8a3 	bl	6fc6 <l2cap_chan_tx_give_credits>
	l2cap_chan_le_send_resume(ch);
    7e80:	4620      	mov	r0, r4
    7e82:	f7ff fc32 	bl	76ea <l2cap_chan_le_send_resume>
    7e86:	e7eb      	b.n	7e60 <le_credits+0xc>
		bt_l2cap_chan_disconnect(chan);
    7e88:	f7ff fee5 	bl	7c56 <bt_l2cap_chan_disconnect>
		return;
    7e8c:	bd38      	pop	{r3, r4, r5, pc}
	...

00007e90 <l2cap_recv>:
{
    7e90:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e92:	b083      	sub	sp, #12
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    7e94:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    7e96:	898b      	ldrh	r3, [r1, #12]
    7e98:	2b03      	cmp	r3, #3
    7e9a:	d801      	bhi.n	7ea0 <l2cap_recv+0x10>
}
    7e9c:	b003      	add	sp, #12
    7e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ea0:	460c      	mov	r4, r1
    7ea2:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
    7ea4:	8877      	ldrh	r7, [r6, #2]
	net_buf_pull(buf, sizeof(*hdr));
    7ea6:	2104      	movs	r1, #4
    7ea8:	f104 0008 	add.w	r0, r4, #8
    7eac:	f012 f98f 	bl	1a1ce <net_buf_simple_pull>
	if (buf->len != len) {
    7eb0:	89a3      	ldrh	r3, [r4, #12]
    7eb2:	429f      	cmp	r7, r3
    7eb4:	d1f2      	bne.n	7e9c <l2cap_recv+0xc>
	if (!hdr->ident) {
    7eb6:	7871      	ldrb	r1, [r6, #1]
    7eb8:	2900      	cmp	r1, #0
    7eba:	d0ef      	beq.n	7e9c <l2cap_recv+0xc>
	switch (hdr->code) {
    7ebc:	7833      	ldrb	r3, [r6, #0]
    7ebe:	3b01      	subs	r3, #1
    7ec0:	2b15      	cmp	r3, #21
    7ec2:	d852      	bhi.n	7f6a <l2cap_recv+0xda>
    7ec4:	a201      	add	r2, pc, #4	; (adr r2, 7ecc <l2cap_recv+0x3c>)
    7ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7eca:	bf00      	nop
    7ecc:	00007f61 	.word	0x00007f61
    7ed0:	00007f6b 	.word	0x00007f6b
    7ed4:	00007f6b 	.word	0x00007f6b
    7ed8:	00007f6b 	.word	0x00007f6b
    7edc:	00007f6b 	.word	0x00007f6b
    7ee0:	00007f43 	.word	0x00007f43
    7ee4:	00007f4d 	.word	0x00007f4d
    7ee8:	00007f6b 	.word	0x00007f6b
    7eec:	00007f6b 	.word	0x00007f6b
    7ef0:	00007f6b 	.word	0x00007f6b
    7ef4:	00007f6b 	.word	0x00007f6b
    7ef8:	00007f6b 	.word	0x00007f6b
    7efc:	00007f6b 	.word	0x00007f6b
    7f00:	00007f6b 	.word	0x00007f6b
    7f04:	00007f6b 	.word	0x00007f6b
    7f08:	00007f6b 	.word	0x00007f6b
    7f0c:	00007f6b 	.word	0x00007f6b
    7f10:	00007f25 	.word	0x00007f25
    7f14:	00007e9d 	.word	0x00007e9d
    7f18:	00007f2f 	.word	0x00007f2f
    7f1c:	00007f39 	.word	0x00007f39
    7f20:	00007f57 	.word	0x00007f57
		le_conn_param_update_req(l2cap, hdr->ident, buf);
    7f24:	4622      	mov	r2, r4
    7f26:	4628      	mov	r0, r5
    7f28:	f7ff fc22 	bl	7770 <le_conn_param_update_req>
		break;
    7f2c:	e7b6      	b.n	7e9c <l2cap_recv+0xc>
		le_conn_req(l2cap, hdr->ident, buf);
    7f2e:	4622      	mov	r2, r4
    7f30:	4628      	mov	r0, r5
    7f32:	f7ff fd4d 	bl	79d0 <le_conn_req>
		break;
    7f36:	e7b1      	b.n	7e9c <l2cap_recv+0xc>
		le_conn_rsp(l2cap, hdr->ident, buf);
    7f38:	4622      	mov	r2, r4
    7f3a:	4628      	mov	r0, r5
    7f3c:	f7ff f954 	bl	71e8 <le_conn_rsp>
		break;
    7f40:	e7ac      	b.n	7e9c <l2cap_recv+0xc>
		le_disconn_req(l2cap, hdr->ident, buf);
    7f42:	4622      	mov	r2, r4
    7f44:	4628      	mov	r0, r5
    7f46:	f7ff fc57 	bl	77f8 <le_disconn_req>
		break;
    7f4a:	e7a7      	b.n	7e9c <l2cap_recv+0xc>
		le_disconn_rsp(l2cap, hdr->ident, buf);
    7f4c:	4622      	mov	r2, r4
    7f4e:	4628      	mov	r0, r5
    7f50:	f7ff f9a0 	bl	7294 <le_disconn_rsp>
		break;
    7f54:	e7a2      	b.n	7e9c <l2cap_recv+0xc>
		le_credits(l2cap, hdr->ident, buf);
    7f56:	4622      	mov	r2, r4
    7f58:	4628      	mov	r0, r5
    7f5a:	f7ff ff7b 	bl	7e54 <le_credits>
		break;
    7f5e:	e79d      	b.n	7e9c <l2cap_recv+0xc>
		reject_cmd(l2cap, hdr->ident, buf);
    7f60:	4622      	mov	r2, r4
    7f62:	4628      	mov	r0, r5
    7f64:	f7ff f9a5 	bl	72b2 <reject_cmd>
		break;
    7f68:	e798      	b.n	7e9c <l2cap_recv+0xc>
		l2cap_send_reject(chan->conn, hdr->ident,
    7f6a:	6828      	ldr	r0, [r5, #0]
    7f6c:	2200      	movs	r2, #0
    7f6e:	9200      	str	r2, [sp, #0]
    7f70:	4613      	mov	r3, r2
    7f72:	f7ff fbd9 	bl	7728 <l2cap_send_reject>
		break;
    7f76:	e791      	b.n	7e9c <l2cap_recv+0xc>

00007f78 <bt_l2cap_chan_send>:

int bt_l2cap_chan_send(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    7f78:	b510      	push	{r4, lr}
    7f7a:	b082      	sub	sp, #8
    7f7c:	9101      	str	r1, [sp, #4]
	int err;

	if (!buf) {
    7f7e:	b1f9      	cbz	r1, 7fc0 <bt_l2cap_chan_send+0x48>
		return -EINVAL;
	}

	BT_DBG("chan %p buf %p len %zu", chan, buf, net_buf_frags_len(buf));

	if (!chan->conn || chan->conn->state != BT_CONN_CONNECTED) {
    7f80:	6803      	ldr	r3, [r0, #0]
    7f82:	b303      	cbz	r3, 7fc6 <bt_l2cap_chan_send+0x4e>
    7f84:	7b1b      	ldrb	r3, [r3, #12]
    7f86:	2b03      	cmp	r3, #3
    7f88:	d120      	bne.n	7fcc <bt_l2cap_chan_send+0x54>
    7f8a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    chan->conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_send(chan, buf);
	}

	err = l2cap_chan_le_send_sdu(BT_L2CAP_LE_CHAN(chan), &buf, 0);
    7f8c:	2200      	movs	r2, #0
    7f8e:	a901      	add	r1, sp, #4
    7f90:	f7ff fb40 	bl	7614 <l2cap_chan_le_send_sdu>
	if (err < 0) {
    7f94:	2800      	cmp	r0, #0
    7f96:	db01      	blt.n	7f9c <bt_l2cap_chan_send+0x24>
		}
		BT_ERR("failed to send message %d", err);
	}

	return err;
}
    7f98:	b002      	add	sp, #8
    7f9a:	bd10      	pop	{r4, pc}
		if (err == -EAGAIN) {
    7f9c:	f110 0f0b 	cmn.w	r0, #11
    7fa0:	d1fa      	bne.n	7f98 <bt_l2cap_chan_send+0x20>
			net_buf_put(&(BT_L2CAP_LE_CHAN(chan))->tx_queue, buf);
    7fa2:	9901      	ldr	r1, [sp, #4]
    7fa4:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7fa8:	f012 f86a 	bl	1a080 <net_buf_put>
			return *((int *)net_buf_user_data(buf));
    7fac:	9a01      	ldr	r2, [sp, #4]
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    7fae:	f102 0310 	add.w	r3, r2, #16
    7fb2:	89d2      	ldrh	r2, [r2, #14]
    7fb4:	4413      	add	r3, r2
    7fb6:	3303      	adds	r3, #3
    7fb8:	f023 0303 	bic.w	r3, r3, #3
    7fbc:	6818      	ldr	r0, [r3, #0]
    7fbe:	e7eb      	b.n	7f98 <bt_l2cap_chan_send+0x20>
		return -EINVAL;
    7fc0:	f06f 0015 	mvn.w	r0, #21
    7fc4:	e7e8      	b.n	7f98 <bt_l2cap_chan_send+0x20>
		return -ENOTCONN;
    7fc6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    7fca:	e7e5      	b.n	7f98 <bt_l2cap_chan_send+0x20>
    7fcc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    7fd0:	e7e2      	b.n	7f98 <bt_l2cap_chan_send+0x20>

00007fd2 <range_is_valid>:
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    7fd2:	b100      	cbz	r0, 7fd6 <range_is_valid+0x4>
    7fd4:	b919      	cbnz	r1, 7fde <range_is_valid+0xc>
		if (err) {
    7fd6:	b142      	cbz	r2, 7fea <range_is_valid+0x18>
			*err = 0;
    7fd8:	2000      	movs	r0, #0
    7fda:	8010      	strh	r0, [r2, #0]
    7fdc:	4770      	bx	lr
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    7fde:	4288      	cmp	r0, r1
    7fe0:	d905      	bls.n	7fee <range_is_valid+0x1c>
		if (err) {
    7fe2:	b132      	cbz	r2, 7ff2 <range_is_valid+0x20>
			*err = start;
    7fe4:	8010      	strh	r0, [r2, #0]
		}
		return false;
    7fe6:	2000      	movs	r0, #0
    7fe8:	4770      	bx	lr
		return false;
    7fea:	2000      	movs	r0, #0
    7fec:	4770      	bx	lr
	}

	return true;
    7fee:	2001      	movs	r0, #1
    7ff0:	4770      	bx	lr
		return false;
    7ff2:	2000      	movs	r0, #0
}
    7ff4:	4770      	bx	lr

00007ff6 <check_perm>:
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       u8_t mask)
{
	if ((mask & BT_GATT_PERM_READ) &&
    7ff6:	f012 0f01 	tst.w	r2, #1
    7ffa:	d007      	beq.n	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    7ffc:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
    7ffe:	f013 0f15 	tst.w	r3, #21
    8002:	d101      	bne.n	8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    8004:	2002      	movs	r0, #2
    8006:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    8008:	684b      	ldr	r3, [r1, #4]
    800a:	b1eb      	cbz	r3, 8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    800c:	f012 0f02 	tst.w	r2, #2
    8010:	d007      	beq.n	8022 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    8012:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
    8014:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    8018:	d101      	bne.n	801e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    801a:	2003      	movs	r0, #3
    801c:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    801e:	688b      	ldr	r3, [r1, #8]
    8020:	b1a3      	cbz	r3, 804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>
	}

	mask &= attr->perm;
    8022:	7c8b      	ldrb	r3, [r1, #18]
    8024:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    8026:	f012 0f30 	tst.w	r2, #48	; 0x30
    802a:	d004      	beq.n	8036 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36>
#if defined(CONFIG_BT_SMP)
		if (conn->sec_level < BT_SECURITY_HIGH) {
    802c:	7a03      	ldrb	r3, [r0, #8]
    802e:	2b02      	cmp	r3, #2
    8030:	d801      	bhi.n	8036 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
    8032:	2005      	movs	r0, #5
    8034:	4770      	bx	lr
#else
		return BT_ATT_ERR_AUTHENTICATION;
#endif /* CONFIG_BT_SMP */
	}

	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    8036:	f012 0f0c 	tst.w	r2, #12
    803a:	d009      	beq.n	8050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50>
#if defined(CONFIG_BT_SMP)
		if (!conn->encrypt) {
    803c:	7a83      	ldrb	r3, [r0, #10]
    803e:	b90b      	cbnz	r3, 8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    8040:	200f      	movs	r0, #15
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
#endif /* CONFIG_BT_SMP */
	}

	return 0;
}
    8042:	4770      	bx	lr
	return 0;
    8044:	2000      	movs	r0, #0
    8046:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    8048:	2002      	movs	r0, #2
    804a:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    804c:	2003      	movs	r0, #3
    804e:	4770      	bx	lr
	return 0;
    8050:	2000      	movs	r0, #0
    8052:	4770      	bx	lr

00008054 <err_to_att>:

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    8054:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    8058:	2bfe      	cmp	r3, #254	; 0xfe
    805a:	d901      	bls.n	8060 <err_to_att+0xc>
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    805c:	200e      	movs	r0, #14
}
    805e:	4770      	bx	lr
		return -err;
    8060:	4240      	negs	r0, r0
    8062:	b2c0      	uxtb	r0, r0
    8064:	4770      	bx	lr

00008066 <write_cb>:
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    8066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    806a:	b082      	sub	sp, #8
    806c:	4606      	mov	r6, r0
    806e:	460c      	mov	r4, r1
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    8070:	680f      	ldr	r7, [r1, #0]
    8072:	222a      	movs	r2, #42	; 0x2a
    8074:	4601      	mov	r1, r0
    8076:	4638      	mov	r0, r7
    8078:	f7ff ffbd 	bl	7ff6 <check_perm>
    807c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    807e:	b120      	cbz	r0, 808a <write_cb+0x24>
		return BT_GATT_ITER_STOP;
    8080:	2500      	movs	r5, #0
	}

	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}
    8082:	4628      	mov	r0, r5
    8084:	b002      	add	sp, #8
    8086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    808a:	4605      	mov	r5, r0
	write = attr->write(data->conn, attr, data->value, data->len,
    808c:	f8d6 8008 	ldr.w	r8, [r6, #8]
    8090:	7c23      	ldrb	r3, [r4, #16]
    8092:	8a62      	ldrh	r2, [r4, #18]
    8094:	2100      	movs	r1, #0
    8096:	9101      	str	r1, [sp, #4]
    8098:	9200      	str	r2, [sp, #0]
    809a:	68e2      	ldr	r2, [r4, #12]
    809c:	4631      	mov	r1, r6
    809e:	4638      	mov	r0, r7
    80a0:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
    80a2:	2800      	cmp	r0, #0
    80a4:	db02      	blt.n	80ac <write_cb+0x46>
    80a6:	7c23      	ldrb	r3, [r4, #16]
    80a8:	4298      	cmp	r0, r3
    80aa:	d003      	beq.n	80b4 <write_cb+0x4e>
		data->err = err_to_att(write);
    80ac:	f7ff ffd2 	bl	8054 <err_to_att>
    80b0:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    80b2:	e7e6      	b.n	8082 <write_cb+0x1c>
	data->err = 0;
    80b4:	2300      	movs	r3, #0
    80b6:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    80b8:	2501      	movs	r5, #1
    80ba:	e7e2      	b.n	8082 <write_cb+0x1c>

000080bc <att_prepare_write_req>:

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    80bc:	2006      	movs	r0, #6
    80be:	4770      	bx	lr

000080c0 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    80c0:	2006      	movs	r0, #6
    80c2:	4770      	bx	lr

000080c4 <att_op_get_type>:
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    80c4:	2300      	movs	r3, #0
    80c6:	2b1a      	cmp	r3, #26
    80c8:	d80b      	bhi.n	80e2 <att_op_get_type+0x1e>
		if (op == handlers[i].op) {
    80ca:	4a09      	ldr	r2, [pc, #36]	; (80f0 <att_op_get_type+0x2c>)
    80cc:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    80d0:	4282      	cmp	r2, r0
    80d2:	d001      	beq.n	80d8 <att_op_get_type+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    80d4:	3301      	adds	r3, #1
    80d6:	e7f6      	b.n	80c6 <att_op_get_type+0x2>
			return handlers[i].type;
    80d8:	4a05      	ldr	r2, [pc, #20]	; (80f0 <att_op_get_type+0x2c>)
    80da:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    80de:	7898      	ldrb	r0, [r3, #2]
    80e0:	4770      	bx	lr
		}
	}

	if (op & ATT_CMD_MASK) {
    80e2:	f010 0f40 	tst.w	r0, #64	; 0x40
    80e6:	d101      	bne.n	80ec <att_op_get_type+0x28>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    80e8:	2006      	movs	r0, #6
}
    80ea:	4770      	bx	lr
		return ATT_COMMAND;
    80ec:	2000      	movs	r0, #0
    80ee:	4770      	bx	lr
    80f0:	0002f840 	.word	0x0002f840

000080f4 <att_cb>:
{
    80f4:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    80f6:	6883      	ldr	r3, [r0, #8]
    80f8:	7818      	ldrb	r0, [r3, #0]
    80fa:	f7ff ffe3 	bl	80c4 <att_op_get_type>
    80fe:	3801      	subs	r0, #1
    8100:	2804      	cmp	r0, #4
    8102:	d808      	bhi.n	8116 <att_cb+0x22>
    8104:	e8df f000 	tbb	[pc, r0]
    8108:	09070305 	.word	0x09070305
    810c:	05          	.byte	0x05
    810d:	00          	.byte	0x00
		return att_rsp_sent;
    810e:	4804      	ldr	r0, [pc, #16]	; (8120 <att_cb+0x2c>)
    8110:	bd08      	pop	{r3, pc}
		return att_req_sent;
    8112:	4804      	ldr	r0, [pc, #16]	; (8124 <att_cb+0x30>)
    8114:	bd08      	pop	{r3, pc}
		return att_pdu_sent;
    8116:	4804      	ldr	r0, [pc, #16]	; (8128 <att_cb+0x34>)
    8118:	bd08      	pop	{r3, pc}
		return att_cfm_sent;
    811a:	4804      	ldr	r0, [pc, #16]	; (812c <att_cb+0x38>)
}
    811c:	bd08      	pop	{r3, pc}
    811e:	bf00      	nop
    8120:	00008267 	.word	0x00008267
    8124:	000082d9 	.word	0x000082d9
    8128:	00008291 	.word	0x00008291
    812c:	0000829f 	.word	0x0000829f

00008130 <read_cb>:
{
    8130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8134:	b083      	sub	sp, #12
    8136:	4606      	mov	r6, r0
    8138:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    813a:	f8d1 8000 	ldr.w	r8, [r1]
	struct bt_conn *conn = att->chan.chan.conn;
    813e:	f8d8 7000 	ldr.w	r7, [r8]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    8142:	6888      	ldr	r0, [r1, #8]
    8144:	2100      	movs	r1, #0
    8146:	3008      	adds	r0, #8
    8148:	f011 fff4 	bl	1a134 <net_buf_simple_add>
    814c:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    814e:	2300      	movs	r3, #0
    8150:	7423      	strb	r3, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    8152:	2215      	movs	r2, #21
    8154:	4631      	mov	r1, r6
    8156:	4638      	mov	r0, r7
    8158:	f7ff ff4d 	bl	7ff6 <check_perm>
    815c:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    815e:	b120      	cbz	r0, 816a <read_cb+0x3a>
		return BT_GATT_ITER_STOP;
    8160:	2500      	movs	r5, #0
}
    8162:	4628      	mov	r0, r5
    8164:	b003      	add	sp, #12
    8166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    816a:	4605      	mov	r5, r0
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    816c:	f8d6 9004 	ldr.w	r9, [r6, #4]
    8170:	68a3      	ldr	r3, [r4, #8]
    8172:	6899      	ldr	r1, [r3, #8]
    8174:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, data->offset);
    8176:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    817a:	1a9b      	subs	r3, r3, r2
    817c:	88a0      	ldrh	r0, [r4, #4]
    817e:	9000      	str	r0, [sp, #0]
    8180:	b29b      	uxth	r3, r3
    8182:	440a      	add	r2, r1
    8184:	4631      	mov	r1, r6
    8186:	4638      	mov	r0, r7
    8188:	47c8      	blx	r9
	if (read < 0) {
    818a:	1e01      	subs	r1, r0, #0
    818c:	db05      	blt.n	819a <read_cb+0x6a>
	net_buf_add(data->buf, read);
    818e:	68a0      	ldr	r0, [r4, #8]
    8190:	3008      	adds	r0, #8
    8192:	f011 ffcf 	bl	1a134 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    8196:	2501      	movs	r5, #1
    8198:	e7e3      	b.n	8162 <read_cb+0x32>
		data->err = err_to_att(read);
    819a:	4608      	mov	r0, r1
    819c:	f7ff ff5a 	bl	8054 <err_to_att>
    81a0:	7420      	strb	r0, [r4, #16]
		return BT_GATT_ITER_STOP;
    81a2:	e7de      	b.n	8162 <read_cb+0x32>

000081a4 <att_chan_get>:
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}

static struct bt_att *att_chan_get(struct bt_conn *conn)
{
    81a4:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    81a6:	7b03      	ldrb	r3, [r0, #12]
    81a8:	2b03      	cmp	r3, #3
    81aa:	d10f      	bne.n	81cc <att_chan_get+0x28>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    81ac:	2104      	movs	r1, #4
    81ae:	f7ff fb7b 	bl	78a8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    81b2:	b168      	cbz	r0, 81d0 <att_chan_get+0x2c>
    81b4:	f3bf 8f5b 	dmb	ish
    81b8:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    81bc:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att = ATT_CHAN(chan);
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    81c0:	f012 0f04 	tst.w	r2, #4
    81c4:	d100      	bne.n	81c8 <att_chan_get+0x24>
		BT_WARN("ATT context flagged as disconnected");
		return NULL;
	}

	return att;
}
    81c6:	bd08      	pop	{r3, pc}
		return NULL;
    81c8:	2000      	movs	r0, #0
    81ca:	bd08      	pop	{r3, pc}
		return NULL;
    81cc:	2000      	movs	r0, #0
    81ce:	bd08      	pop	{r3, pc}
		return NULL;
    81d0:	2000      	movs	r0, #0
    81d2:	bd08      	pop	{r3, pc}

000081d4 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    81d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CONFIG_BT_SMP */
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    81d6:	2400      	movs	r4, #0
    81d8:	b11c      	cbz	r4, 81e2 <bt_att_accept+0xe>
		return 0;
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    81da:	f06f 040b 	mvn.w	r4, #11
}
    81de:	4620      	mov	r0, r4
    81e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (att->chan.chan.conn) {
    81e2:	23ec      	movs	r3, #236	; 0xec
    81e4:	fb03 f304 	mul.w	r3, r3, r4
    81e8:	4a12      	ldr	r2, [pc, #72]	; (8234 <bt_att_accept+0x60>)
    81ea:	58d3      	ldr	r3, [r2, r3]
    81ec:	b10b      	cbz	r3, 81f2 <bt_att_accept+0x1e>
	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    81ee:	3401      	adds	r4, #1
    81f0:	e7f2      	b.n	81d8 <bt_att_accept+0x4>
    81f2:	460d      	mov	r5, r1
		att->chan.chan.ops = &ops;
    81f4:	480f      	ldr	r0, [pc, #60]	; (8234 <bt_att_accept+0x60>)
    81f6:	23ec      	movs	r3, #236	; 0xec
    81f8:	fb03 f304 	mul.w	r3, r3, r4
    81fc:	18c6      	adds	r6, r0, r3
    81fe:	4a0e      	ldr	r2, [pc, #56]	; (8238 <bt_att_accept+0x64>)
    8200:	6072      	str	r2, [r6, #4]
		atomic_set(att->flags, 0);
    8202:	f103 0298 	add.w	r2, r3, #152	; 0x98
    8206:	4402      	add	r2, r0
    8208:	3204      	adds	r2, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    820a:	2100      	movs	r1, #0
    820c:	f3bf 8f5b 	dmb	ish
    8210:	e852 7f00 	ldrex	r7, [r2]
    8214:	e842 1e00 	strex	lr, r1, [r2]
    8218:	f1be 0f00 	cmp.w	lr, #0
    821c:	d1f8      	bne.n	8210 <bt_att_accept+0x3c>
    821e:	f3bf 8f5b 	dmb	ish
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
    8222:	33d0      	adds	r3, #208	; 0xd0
    8224:	4418      	add	r0, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    8226:	2202      	movs	r2, #2
    8228:	4611      	mov	r1, r2
    822a:	3004      	adds	r0, #4
    822c:	f020 fa78 	bl	28720 <_impl_k_sem_init>
		*chan = &att->chan.chan;
    8230:	602e      	str	r6, [r5, #0]
		return 0;
    8232:	e7d4      	b.n	81de <bt_att_accept+0xa>
    8234:	20000550 	.word	0x20000550
    8238:	2000b8e4 	.word	0x2000b8e4

0000823c <att_req_destroy>:
{
    823c:	b510      	push	{r4, lr}
    823e:	4604      	mov	r4, r0
	if (req->buf) {
    8240:	6900      	ldr	r0, [r0, #16]
    8242:	b108      	cbz	r0, 8248 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    8244:	f011 ff2a 	bl	1a09c <net_buf_unref>
	if (req->destroy) {
    8248:	68a3      	ldr	r3, [r4, #8]
    824a:	b10b      	cbz	r3, 8250 <att_req_destroy+0x14>
		req->destroy(req);
    824c:	4620      	mov	r0, r4
    824e:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    8250:	2218      	movs	r2, #24
    8252:	2100      	movs	r1, #0
    8254:	4620      	mov	r0, r4
    8256:	f021 fa3f 	bl	296d8 <memset>
    825a:	bd10      	pop	{r4, pc}

0000825c <att_get>:
{
    825c:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    825e:	2104      	movs	r1, #4
    8260:	f7ff fb07 	bl	7872 <bt_l2cap_le_lookup_tx_cid>
}
    8264:	bd08      	pop	{r3, pc}

00008266 <att_rsp_sent>:
{
    8266:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8268:	f7ff fff8 	bl	825c <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_RSP);
    826c:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8270:	f3bf 8f5b 	dmb	ish
    8274:	e853 2f00 	ldrex	r2, [r3]
    8278:	f022 0201 	bic.w	r2, r2, #1
    827c:	e843 2100 	strex	r1, r2, [r3]
    8280:	2900      	cmp	r1, #0
    8282:	d1f7      	bne.n	8274 <att_rsp_sent+0xe>
    8284:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    8288:	30d4      	adds	r0, #212	; 0xd4
    828a:	f020 fa52 	bl	28732 <_impl_k_sem_give>
    828e:	bd08      	pop	{r3, pc}

00008290 <att_pdu_sent>:
{
    8290:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8292:	f7ff ffe3 	bl	825c <att_get>
    8296:	30d4      	adds	r0, #212	; 0xd4
    8298:	f020 fa4b 	bl	28732 <_impl_k_sem_give>
    829c:	bd08      	pop	{r3, pc}

0000829e <att_cfm_sent>:
{
    829e:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    82a0:	f7ff ffdc 	bl	825c <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_CFM);
    82a4:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    82a8:	f3bf 8f5b 	dmb	ish
    82ac:	e853 2f00 	ldrex	r2, [r3]
    82b0:	f022 0202 	bic.w	r2, r2, #2
    82b4:	e843 2100 	strex	r1, r2, [r3]
    82b8:	2900      	cmp	r1, #0
    82ba:	d1f7      	bne.n	82ac <att_cfm_sent+0xe>
    82bc:	f3bf 8f5b 	dmb	ish
    82c0:	30d4      	adds	r0, #212	; 0xd4
    82c2:	f020 fa36 	bl	28732 <_impl_k_sem_give>
    82c6:	bd08      	pop	{r3, pc}

000082c8 <att_notify>:
{
    82c8:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    82ca:	f101 0008 	add.w	r0, r1, #8
    82ce:	f011 ff8e 	bl	1a1ee <net_buf_simple_pull_le16>
}
    82d2:	2000      	movs	r0, #0
    82d4:	bd08      	pop	{r3, pc}
	...

000082d8 <att_req_sent>:
{
    82d8:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
    82da:	f7ff ffbf 	bl	825c <att_get>
    82de:	4604      	mov	r4, r0
    82e0:	30d4      	adds	r0, #212	; 0xd4
    82e2:	f020 fa26 	bl	28732 <_impl_k_sem_give>
	if (att->req) {
    82e6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    82ea:	b133      	cbz	r3, 82fa <att_req_sent+0x22>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    82ec:	f247 5230 	movw	r2, #30000	; 0x7530
    82f0:	f104 01ac 	add.w	r1, r4, #172	; 0xac
    82f4:	4801      	ldr	r0, [pc, #4]	; (82fc <att_req_sent+0x24>)
    82f6:	f021 f865 	bl	293c4 <k_delayed_work_submit_to_queue>
    82fa:	bd10      	pop	{r4, pc}
    82fc:	20002a70 	.word	0x20002a70

00008300 <read_group_cb>:
{
    8300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8304:	b084      	sub	sp, #16
    8306:	4605      	mov	r5, r0
    8308:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    830a:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    830c:	6837      	ldr	r7, [r6, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    830e:	2300      	movs	r3, #0
    8310:	f88d 3008 	strb.w	r3, [sp, #8]
    8314:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8318:	f8ad 300a 	strh.w	r3, [sp, #10]
    831c:	a902      	add	r1, sp, #8
    831e:	6800      	ldr	r0, [r0, #0]
    8320:	f7fb fb8d 	bl	3a3e <bt_uuid_cmp>
    8324:	b1a8      	cbz	r0, 8352 <read_group_cb+0x52>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8326:	2300      	movs	r3, #0
    8328:	f88d 300c 	strb.w	r3, [sp, #12]
    832c:	f642 0301 	movw	r3, #10241	; 0x2801
    8330:	f8ad 300e 	strh.w	r3, [sp, #14]
    8334:	a903      	add	r1, sp, #12
    8336:	6828      	ldr	r0, [r5, #0]
    8338:	f7fb fb81 	bl	3a3e <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    833c:	b148      	cbz	r0, 8352 <read_group_cb+0x52>
		if (data->group && attr->handle > data->group->end_handle) {
    833e:	6923      	ldr	r3, [r4, #16]
    8340:	2b00      	cmp	r3, #0
    8342:	d04c      	beq.n	83de <read_group_cb+0xde>
    8344:	8a2a      	ldrh	r2, [r5, #16]
    8346:	8859      	ldrh	r1, [r3, #2]
    8348:	428a      	cmp	r2, r1
    834a:	d94a      	bls.n	83e2 <read_group_cb+0xe2>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    834c:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    834e:	2001      	movs	r0, #1
    8350:	e039      	b.n	83c6 <read_group_cb+0xc6>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8352:	6861      	ldr	r1, [r4, #4]
    8354:	6828      	ldr	r0, [r5, #0]
    8356:	f7fb fb72 	bl	3a3e <bt_uuid_cmp>
    835a:	2800      	cmp	r0, #0
    835c:	d130      	bne.n	83c0 <read_group_cb+0xc0>
	if (data->rsp->len &&
    835e:	68e3      	ldr	r3, [r4, #12]
    8360:	781a      	ldrb	r2, [r3, #0]
    8362:	b132      	cbz	r2, 8372 <read_group_cb+0x72>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8364:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    8368:	68a1      	ldr	r1, [r4, #8]
    836a:	8989      	ldrh	r1, [r1, #12]
    836c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    836e:	4293      	cmp	r3, r2
    8370:	db39      	blt.n	83e6 <read_group_cb+0xe6>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    8372:	68a0      	ldr	r0, [r4, #8]
    8374:	2104      	movs	r1, #4
    8376:	3008      	adds	r0, #8
    8378:	f011 fedc 	bl	1a134 <net_buf_simple_add>
    837c:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    837e:	8a2b      	ldrh	r3, [r5, #16]
    8380:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    8382:	6923      	ldr	r3, [r4, #16]
    8384:	8a2a      	ldrh	r2, [r5, #16]
    8386:	805a      	strh	r2, [r3, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8388:	f8d5 8004 	ldr.w	r8, [r5, #4]
    838c:	68a3      	ldr	r3, [r4, #8]
    838e:	6899      	ldr	r1, [r3, #8]
    8390:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    8392:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8396:	1a9b      	subs	r3, r3, r2
    8398:	2000      	movs	r0, #0
    839a:	9000      	str	r0, [sp, #0]
    839c:	b29b      	uxth	r3, r3
    839e:	440a      	add	r2, r1
    83a0:	4629      	mov	r1, r5
    83a2:	4638      	mov	r0, r7
    83a4:	47c0      	blx	r8
	if (read < 0) {
    83a6:	1e01      	subs	r1, r0, #0
    83a8:	db1f      	blt.n	83ea <read_group_cb+0xea>
	if (!data->rsp->len) {
    83aa:	68e2      	ldr	r2, [r4, #12]
    83ac:	7813      	ldrb	r3, [r2, #0]
    83ae:	b96b      	cbnz	r3, 83cc <read_group_cb+0xcc>
		data->rsp->len = read + sizeof(*data->group);
    83b0:	1d0b      	adds	r3, r1, #4
    83b2:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    83b4:	68a0      	ldr	r0, [r4, #8]
    83b6:	3008      	adds	r0, #8
    83b8:	f011 febc 	bl	1a134 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    83bc:	2001      	movs	r0, #1
    83be:	e002      	b.n	83c6 <read_group_cb+0xc6>
		data->group = NULL;
    83c0:	2300      	movs	r3, #0
    83c2:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    83c4:	2001      	movs	r0, #1
}
    83c6:	b004      	add	sp, #16
    83c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    83cc:	1d0a      	adds	r2, r1, #4
    83ce:	4293      	cmp	r3, r2
    83d0:	d0f0      	beq.n	83b4 <read_group_cb+0xb4>
		data->buf->len -= sizeof(*data->group);
    83d2:	68a2      	ldr	r2, [r4, #8]
    83d4:	8993      	ldrh	r3, [r2, #12]
    83d6:	3b04      	subs	r3, #4
    83d8:	8193      	strh	r3, [r2, #12]
		return false;
    83da:	2000      	movs	r0, #0
    83dc:	e7f3      	b.n	83c6 <read_group_cb+0xc6>
		return BT_GATT_ITER_CONTINUE;
    83de:	2001      	movs	r0, #1
    83e0:	e7f1      	b.n	83c6 <read_group_cb+0xc6>
    83e2:	2001      	movs	r0, #1
    83e4:	e7ef      	b.n	83c6 <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    83e6:	2000      	movs	r0, #0
    83e8:	e7ed      	b.n	83c6 <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    83ea:	2000      	movs	r0, #0
    83ec:	e7eb      	b.n	83c6 <read_group_cb+0xc6>

000083ee <read_type_cb>:
{
    83ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    83f2:	b082      	sub	sp, #8
    83f4:	4606      	mov	r6, r0
    83f6:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    83f8:	680f      	ldr	r7, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    83fa:	f8d7 8000 	ldr.w	r8, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    83fe:	6849      	ldr	r1, [r1, #4]
    8400:	6800      	ldr	r0, [r0, #0]
    8402:	f7fb fb1c 	bl	3a3e <bt_uuid_cmp>
    8406:	2800      	cmp	r0, #0
    8408:	d14d      	bne.n	84a6 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    840a:	2215      	movs	r2, #21
    840c:	4631      	mov	r1, r6
    840e:	4640      	mov	r0, r8
    8410:	f7ff fdf1 	bl	7ff6 <check_perm>
    8414:	4605      	mov	r5, r0
    8416:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    8418:	b130      	cbz	r0, 8428 <read_type_cb+0x3a>
		if (data->rsp->len) {
    841a:	68e3      	ldr	r3, [r4, #12]
    841c:	781d      	ldrb	r5, [r3, #0]
    841e:	2d00      	cmp	r5, #0
    8420:	d042      	beq.n	84a8 <read_type_cb+0xba>
			data->err = 0x00;
    8422:	2500      	movs	r5, #0
    8424:	7525      	strb	r5, [r4, #20]
    8426:	e03f      	b.n	84a8 <read_type_cb+0xba>
	data->err = 0x00;
    8428:	f04f 0900 	mov.w	r9, #0
    842c:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    8430:	68a0      	ldr	r0, [r4, #8]
    8432:	2102      	movs	r1, #2
    8434:	3008      	adds	r0, #8
    8436:	f011 fe7d 	bl	1a134 <net_buf_simple_add>
    843a:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    843c:	8a33      	ldrh	r3, [r6, #16]
    843e:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8440:	f8d6 a004 	ldr.w	sl, [r6, #4]
    8444:	68a3      	ldr	r3, [r4, #8]
    8446:	6899      	ldr	r1, [r3, #8]
    8448:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    844a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    844e:	1a9b      	subs	r3, r3, r2
    8450:	f8cd 9000 	str.w	r9, [sp]
    8454:	b29b      	uxth	r3, r3
    8456:	440a      	add	r2, r1
    8458:	4631      	mov	r1, r6
    845a:	4640      	mov	r0, r8
    845c:	47d0      	blx	sl
	if (read < 0) {
    845e:	1e01      	subs	r1, r0, #0
    8460:	db14      	blt.n	848c <read_type_cb+0x9e>
	if (!data->rsp->len) {
    8462:	68e2      	ldr	r2, [r4, #12]
    8464:	7813      	ldrb	r3, [r2, #0]
    8466:	b9b3      	cbnz	r3, 8496 <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
    8468:	1c8b      	adds	r3, r1, #2
    846a:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    846c:	68a0      	ldr	r0, [r4, #8]
    846e:	3008      	adds	r0, #8
    8470:	f011 fe60 	bl	1a134 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    8474:	f8b7 5062 	ldrh.w	r5, [r7, #98]	; 0x62
    8478:	68a3      	ldr	r3, [r4, #8]
    847a:	899b      	ldrh	r3, [r3, #12]
    847c:	1aed      	subs	r5, r5, r3
    847e:	68e3      	ldr	r3, [r4, #12]
    8480:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8482:	429d      	cmp	r5, r3
    8484:	bfd4      	ite	le
    8486:	2500      	movle	r5, #0
    8488:	2501      	movgt	r5, #1
    848a:	e00d      	b.n	84a8 <read_type_cb+0xba>
		data->err = err_to_att(read);
    848c:	4608      	mov	r0, r1
    848e:	f7ff fde1 	bl	8054 <err_to_att>
    8492:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    8494:	e008      	b.n	84a8 <read_type_cb+0xba>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    8496:	1c8a      	adds	r2, r1, #2
    8498:	4293      	cmp	r3, r2
    849a:	d0e7      	beq.n	846c <read_type_cb+0x7e>
		data->buf->len -= sizeof(*data->item);
    849c:	68a2      	ldr	r2, [r4, #8]
    849e:	8993      	ldrh	r3, [r2, #12]
    84a0:	3b02      	subs	r3, #2
    84a2:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    84a4:	e000      	b.n	84a8 <read_type_cb+0xba>
		return BT_GATT_ITER_CONTINUE;
    84a6:	2501      	movs	r5, #1
}
    84a8:	4628      	mov	r0, r5
    84aa:	b002      	add	sp, #8
    84ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000084b0 <uuid_create>:
{
    84b0:	b510      	push	{r4, lr}
    84b2:	4604      	mov	r4, r0
	switch (buf->len) {
    84b4:	898b      	ldrh	r3, [r1, #12]
    84b6:	2b02      	cmp	r3, #2
    84b8:	d003      	beq.n	84c2 <uuid_create+0x12>
    84ba:	2b10      	cmp	r3, #16
    84bc:	d00a      	beq.n	84d4 <uuid_create+0x24>
	return false;
    84be:	2000      	movs	r0, #0
}
    84c0:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    84c2:	2300      	movs	r3, #0
    84c4:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    84c6:	f101 0008 	add.w	r0, r1, #8
    84ca:	f011 fe90 	bl	1a1ee <net_buf_simple_pull_le16>
    84ce:	8060      	strh	r0, [r4, #2]
		return true;
    84d0:	2001      	movs	r0, #1
    84d2:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    84d4:	2302      	movs	r3, #2
    84d6:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    84da:	898a      	ldrh	r2, [r1, #12]
    84dc:	6889      	ldr	r1, [r1, #8]
    84de:	f7f7 feef 	bl	2c0 <memcpy>
		return true;
    84e2:	2001      	movs	r0, #1
    84e4:	bd10      	pop	{r4, pc}

000084e6 <find_info_cb>:
{
    84e6:	b570      	push	{r4, r5, r6, lr}
    84e8:	4605      	mov	r5, r0
    84ea:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    84ec:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    84ee:	688b      	ldr	r3, [r1, #8]
    84f0:	b13b      	cbz	r3, 8502 <find_info_cb+0x1c>
	switch (data->rsp->format) {
    84f2:	68a3      	ldr	r3, [r4, #8]
    84f4:	781b      	ldrb	r3, [r3, #0]
    84f6:	2b01      	cmp	r3, #1
    84f8:	d011      	beq.n	851e <find_info_cb+0x38>
    84fa:	2b02      	cmp	r3, #2
    84fc:	d02b      	beq.n	8556 <find_info_cb+0x70>
	return BT_GATT_ITER_STOP;
    84fe:	2000      	movs	r0, #0
    8500:	bd70      	pop	{r4, r5, r6, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    8502:	6848      	ldr	r0, [r1, #4]
    8504:	2101      	movs	r1, #1
    8506:	3008      	adds	r0, #8
    8508:	f011 fe14 	bl	1a134 <net_buf_simple_add>
    850c:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    850e:	682b      	ldr	r3, [r5, #0]
    8510:	781b      	ldrb	r3, [r3, #0]
    8512:	b913      	cbnz	r3, 851a <find_info_cb+0x34>
    8514:	2301      	movs	r3, #1
    8516:	7003      	strb	r3, [r0, #0]
    8518:	e7eb      	b.n	84f2 <find_info_cb+0xc>
    851a:	2302      	movs	r3, #2
    851c:	e7fb      	b.n	8516 <find_info_cb+0x30>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    851e:	682b      	ldr	r3, [r5, #0]
    8520:	781b      	ldrb	r3, [r3, #0]
    8522:	b10b      	cbz	r3, 8528 <find_info_cb+0x42>
			return BT_GATT_ITER_STOP;
    8524:	2000      	movs	r0, #0
    8526:	bd70      	pop	{r4, r5, r6, pc}
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    8528:	6860      	ldr	r0, [r4, #4]
    852a:	2104      	movs	r1, #4
    852c:	3008      	adds	r0, #8
    852e:	f011 fe01 	bl	1a134 <net_buf_simple_add>
    8532:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    8534:	8a2b      	ldrh	r3, [r5, #16]
    8536:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    8538:	68e3      	ldr	r3, [r4, #12]
    853a:	682a      	ldr	r2, [r5, #0]
    853c:	8852      	ldrh	r2, [r2, #2]
    853e:	805a      	strh	r2, [r3, #2]
		if (att->chan.tx.mtu - data->buf->len >
    8540:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    8544:	6862      	ldr	r2, [r4, #4]
    8546:	8992      	ldrh	r2, [r2, #12]
    8548:	1a9b      	subs	r3, r3, r2
    854a:	2b04      	cmp	r3, #4
    854c:	d801      	bhi.n	8552 <find_info_cb+0x6c>
	return BT_GATT_ITER_STOP;
    854e:	2000      	movs	r0, #0
    8550:	bd70      	pop	{r4, r5, r6, pc}
			return BT_GATT_ITER_CONTINUE;
    8552:	2001      	movs	r0, #1
    8554:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    8556:	682b      	ldr	r3, [r5, #0]
    8558:	781b      	ldrb	r3, [r3, #0]
    855a:	2b02      	cmp	r3, #2
    855c:	d001      	beq.n	8562 <find_info_cb+0x7c>
			return BT_GATT_ITER_STOP;
    855e:	2000      	movs	r0, #0
    8560:	bd70      	pop	{r4, r5, r6, pc}
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    8562:	6860      	ldr	r0, [r4, #4]
    8564:	2112      	movs	r1, #18
    8566:	3008      	adds	r0, #8
    8568:	f011 fde4 	bl	1a134 <net_buf_simple_add>
    856c:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    856e:	8a2b      	ldrh	r3, [r5, #16]
    8570:	8003      	strh	r3, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    8572:	68e0      	ldr	r0, [r4, #12]
    8574:	6829      	ldr	r1, [r5, #0]
    8576:	2210      	movs	r2, #16
    8578:	3101      	adds	r1, #1
    857a:	3002      	adds	r0, #2
    857c:	f7f7 fea0 	bl	2c0 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    8580:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    8584:	6862      	ldr	r2, [r4, #4]
    8586:	8992      	ldrh	r2, [r2, #12]
    8588:	1a9b      	subs	r3, r3, r2
    858a:	2b12      	cmp	r3, #18
    858c:	d901      	bls.n	8592 <find_info_cb+0xac>
			return BT_GATT_ITER_CONTINUE;
    858e:	2001      	movs	r0, #1
    8590:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_STOP;
    8592:	2000      	movs	r0, #0
}
    8594:	bd70      	pop	{r4, r5, r6, pc}

00008596 <find_type_cb>:
{
    8596:	b5f0      	push	{r4, r5, r6, r7, lr}
    8598:	b089      	sub	sp, #36	; 0x24
    859a:	4605      	mov	r5, r0
    859c:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    859e:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    85a0:	6837      	ldr	r7, [r6, #0]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    85a2:	2300      	movs	r3, #0
    85a4:	f88d 3018 	strb.w	r3, [sp, #24]
    85a8:	f642 0301 	movw	r3, #10241	; 0x2801
    85ac:	f8ad 301a 	strh.w	r3, [sp, #26]
    85b0:	a906      	add	r1, sp, #24
    85b2:	6800      	ldr	r0, [r0, #0]
    85b4:	f7fb fa43 	bl	3a3e <bt_uuid_cmp>
    85b8:	b920      	cbnz	r0, 85c4 <find_type_cb+0x2e>
		data->group = NULL;
    85ba:	2300      	movs	r3, #0
    85bc:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    85be:	2001      	movs	r0, #1
}
    85c0:	b009      	add	sp, #36	; 0x24
    85c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    85c4:	2300      	movs	r3, #0
    85c6:	f88d 301c 	strb.w	r3, [sp, #28]
    85ca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    85ce:	f8ad 301e 	strh.w	r3, [sp, #30]
    85d2:	a907      	add	r1, sp, #28
    85d4:	6828      	ldr	r0, [r5, #0]
    85d6:	f7fb fa32 	bl	3a3e <bt_uuid_cmp>
    85da:	b148      	cbz	r0, 85f0 <find_type_cb+0x5a>
		if (data->group && attr->handle > data->group->end_handle) {
    85dc:	68a3      	ldr	r3, [r4, #8]
    85de:	2b00      	cmp	r3, #0
    85e0:	d039      	beq.n	8656 <find_type_cb+0xc0>
    85e2:	8a2a      	ldrh	r2, [r5, #16]
    85e4:	8859      	ldrh	r1, [r3, #2]
    85e6:	428a      	cmp	r2, r1
    85e8:	d937      	bls.n	865a <find_type_cb+0xc4>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    85ea:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    85ec:	2001      	movs	r0, #1
    85ee:	e7e7      	b.n	85c0 <find_type_cb+0x2a>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    85f0:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    85f4:	6862      	ldr	r2, [r4, #4]
    85f6:	8992      	ldrh	r2, [r2, #12]
    85f8:	1a9b      	subs	r3, r3, r2
    85fa:	2b03      	cmp	r3, #3
    85fc:	d801      	bhi.n	8602 <find_type_cb+0x6c>
		return BT_GATT_ITER_STOP;
    85fe:	2000      	movs	r0, #0
    8600:	e7de      	b.n	85c0 <find_type_cb+0x2a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    8602:	686e      	ldr	r6, [r5, #4]
    8604:	2300      	movs	r3, #0
    8606:	9300      	str	r3, [sp, #0]
    8608:	2310      	movs	r3, #16
    860a:	aa02      	add	r2, sp, #8
    860c:	4629      	mov	r1, r5
    860e:	4638      	mov	r0, r7
    8610:	47b0      	blx	r6
	if (read < 0) {
    8612:	1e02      	subs	r2, r0, #0
    8614:	db06      	blt.n	8624 <find_type_cb+0x8e>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    8616:	7c23      	ldrb	r3, [r4, #16]
    8618:	429a      	cmp	r2, r3
    861a:	d007      	beq.n	862c <find_type_cb+0x96>
		data->group = NULL;
    861c:	2300      	movs	r3, #0
    861e:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    8620:	2001      	movs	r0, #1
    8622:	e7cd      	b.n	85c0 <find_type_cb+0x2a>
		data->group = NULL;
    8624:	2300      	movs	r3, #0
    8626:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    8628:	2001      	movs	r0, #1
    862a:	e7c9      	b.n	85c0 <find_type_cb+0x2a>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    862c:	a902      	add	r1, sp, #8
    862e:	68e0      	ldr	r0, [r4, #12]
    8630:	f020 ffbe 	bl	295b0 <memcmp>
    8634:	2800      	cmp	r0, #0
    8636:	d1f1      	bne.n	861c <find_type_cb+0x86>
	data->err = 0x00;
    8638:	2300      	movs	r3, #0
    863a:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    863c:	6860      	ldr	r0, [r4, #4]
    863e:	2104      	movs	r1, #4
    8640:	3008      	adds	r0, #8
    8642:	f011 fd77 	bl	1a134 <net_buf_simple_add>
    8646:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    8648:	8a2b      	ldrh	r3, [r5, #16]
    864a:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    864c:	68a3      	ldr	r3, [r4, #8]
    864e:	8a2a      	ldrh	r2, [r5, #16]
    8650:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    8652:	2001      	movs	r0, #1
    8654:	e7b4      	b.n	85c0 <find_type_cb+0x2a>
		return BT_GATT_ITER_CONTINUE;
    8656:	2001      	movs	r0, #1
    8658:	e7b2      	b.n	85c0 <find_type_cb+0x2a>
    865a:	2001      	movs	r0, #1
    865c:	e7b0      	b.n	85c0 <find_type_cb+0x2a>

0000865e <att_change_security>:
{
    865e:	b508      	push	{r3, lr}
	switch (err) {
    8660:	2905      	cmp	r1, #5
    8662:	d008      	beq.n	8676 <att_change_security+0x18>
    8664:	290f      	cmp	r1, #15
    8666:	d113      	bne.n	8690 <att_change_security+0x32>
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    8668:	7a03      	ldrb	r3, [r0, #8]
    866a:	2b01      	cmp	r3, #1
    866c:	d813      	bhi.n	8696 <att_change_security+0x38>
		sec = BT_SECURITY_MEDIUM;
    866e:	2102      	movs	r1, #2
	return bt_conn_security(conn, sec);
    8670:	f7fd fe4a 	bl	6308 <bt_conn_security>
    8674:	bd08      	pop	{r3, pc}
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    8676:	7a03      	ldrb	r3, [r0, #8]
    8678:	2b01      	cmp	r3, #1
    867a:	d905      	bls.n	8688 <att_change_security+0x2a>
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    867c:	2b02      	cmp	r3, #2
    867e:	d905      	bls.n	868c <att_change_security+0x2e>
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    8680:	2b03      	cmp	r3, #3
    8682:	d80b      	bhi.n	869c <att_change_security+0x3e>
			sec = BT_SECURITY_FIPS;
    8684:	2104      	movs	r1, #4
    8686:	e7f3      	b.n	8670 <att_change_security+0x12>
			sec = BT_SECURITY_MEDIUM;
    8688:	2102      	movs	r1, #2
    868a:	e7f1      	b.n	8670 <att_change_security+0x12>
			sec = BT_SECURITY_HIGH;
    868c:	2103      	movs	r1, #3
    868e:	e7ef      	b.n	8670 <att_change_security+0x12>
		return -EINVAL;
    8690:	f06f 0015 	mvn.w	r0, #21
    8694:	bd08      	pop	{r3, pc}
			return -EALREADY;
    8696:	f06f 0077 	mvn.w	r0, #119	; 0x77
    869a:	bd08      	pop	{r3, pc}
			return -EALREADY;
    869c:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    86a0:	bd08      	pop	{r3, pc}
	...

000086a4 <bt_att_connected>:
{
    86a4:	b510      	push	{r4, lr}
    86a6:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    86a8:	2317      	movs	r3, #23
    86aa:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    86ae:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	k_delayed_work_init(&att->timeout_work, att_timeout);
    86b2:	4906      	ldr	r1, [pc, #24]	; (86cc <bt_att_connected+0x28>)
    86b4:	30ac      	adds	r0, #172	; 0xac
    86b6:	f020 fe0d 	bl	292d4 <k_delayed_work_init>
	list->head = NULL;
    86ba:	2300      	movs	r3, #0
    86bc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	list->tail = NULL;
    86c0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	bt_gatt_connected(ch->chan.conn);
    86c4:	6820      	ldr	r0, [r4, #0]
    86c6:	f001 fadd 	bl	9c84 <bt_gatt_connected>
    86ca:	bd10      	pop	{r4, pc}
    86cc:	00008a2b 	.word	0x00008a2b

000086d0 <att_send_req>:
{
    86d0:	b570      	push	{r4, r5, r6, lr}
    86d2:	4605      	mov	r5, r0
    86d4:	460c      	mov	r4, r1
	att->req = req;
    86d6:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
	k_sem_take(&att->tx_sem, K_FOREVER);
    86da:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    86de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    86e2:	4630      	mov	r0, r6
    86e4:	f020 f838 	bl	28758 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    86e8:	682b      	ldr	r3, [r5, #0]
    86ea:	7b1b      	ldrb	r3, [r3, #12]
    86ec:	2b03      	cmp	r3, #3
    86ee:	d019      	beq.n	8724 <att_send_req+0x54>
    86f0:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    86f2:	b323      	cbz	r3, 873e <att_send_req+0x6e>
	net_buf_simple_save(&req->buf->b, &req->state);
    86f4:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    86f6:	f106 0008 	add.w	r0, r6, #8
    86fa:	f011 fd80 	bl	1a1fe <net_buf_simple_headroom>
    86fe:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    8700:	89b3      	ldrh	r3, [r6, #12]
    8702:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    8704:	682d      	ldr	r5, [r5, #0]
    8706:	6920      	ldr	r0, [r4, #16]
    8708:	f011 fce4 	bl	1a0d4 <net_buf_ref>
    870c:	4606      	mov	r6, r0
    870e:	6920      	ldr	r0, [r4, #16]
    8710:	f7ff fcf0 	bl	80f4 <att_cb>
    8714:	4603      	mov	r3, r0
    8716:	4632      	mov	r2, r6
    8718:	2104      	movs	r1, #4
    871a:	4628      	mov	r0, r5
    871c:	f7fe fea3 	bl	7466 <bt_l2cap_send_cb>
	return 0;
    8720:	2000      	movs	r0, #0
}
    8722:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8724:	f3bf 8f5b 	dmb	ish
    8728:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    872c:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    8730:	f013 0f04 	tst.w	r3, #4
    8734:	d101      	bne.n	873a <att_send_req+0x6a>
    8736:	2301      	movs	r3, #1
    8738:	e7db      	b.n	86f2 <att_send_req+0x22>
    873a:	2300      	movs	r3, #0
    873c:	e7d9      	b.n	86f2 <att_send_req+0x22>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    873e:	4630      	mov	r0, r6
    8740:	f01f fff7 	bl	28732 <_impl_k_sem_give>
		return -ENOTCONN;
    8744:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8748:	bd70      	pop	{r4, r5, r6, pc}

0000874a <att_process>:
{
    874a:	b508      	push	{r3, lr}
	return (!list->head);
    874c:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    8750:	b131      	cbz	r1, 8760 <att_process+0x16>
	list->head = node->next;
    8752:	680b      	ldr	r3, [r1, #0]
    8754:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
	if (list->tail == node) {
    8758:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    875c:	4291      	cmp	r1, r2
    875e:	d003      	beq.n	8768 <att_process+0x1e>
	if (!node) {
    8760:	b109      	cbz	r1, 8766 <att_process+0x1c>
	att_send_req(att, ATT_REQ(node));
    8762:	f7ff ffb5 	bl	86d0 <att_send_req>
    8766:	bd08      	pop	{r3, pc}
		list->tail = list->head;
    8768:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
    876c:	e7f8      	b.n	8760 <att_process+0x16>

0000876e <att_handle_rsp>:
{
    876e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8772:	b082      	sub	sp, #8
    8774:	4604      	mov	r4, r0
    8776:	460e      	mov	r6, r1
    8778:	4617      	mov	r7, r2
    877a:	461d      	mov	r5, r3
	k_delayed_work_cancel(&att->timeout_work);
    877c:	30ac      	adds	r0, #172	; 0xac
    877e:	f020 fdc7 	bl	29310 <k_delayed_work_cancel>
	if (!att->req) {
    8782:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8786:	b1e3      	cbz	r3, 87c2 <att_handle_rsp+0x54>
	if (att->req->buf) {
    8788:	6918      	ldr	r0, [r3, #16]
    878a:	b128      	cbz	r0, 8798 <att_handle_rsp+0x2a>
		net_buf_unref(att->req->buf);
    878c:	f011 fc86 	bl	1a09c <net_buf_unref>
		att->req->buf = NULL;
    8790:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8794:	2200      	movs	r2, #0
    8796:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    8798:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    879c:	f8d3 8004 	ldr.w	r8, [r3, #4]
	att->req->func = NULL;
    87a0:	2200      	movs	r2, #0
    87a2:	605a      	str	r2, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    87a4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    87a8:	9300      	str	r3, [sp, #0]
    87aa:	463b      	mov	r3, r7
    87ac:	4632      	mov	r2, r6
    87ae:	4629      	mov	r1, r5
    87b0:	6820      	ldr	r0, [r4, #0]
    87b2:	47c0      	blx	r8
	if (!att->req->func) {
    87b4:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    87b8:	6843      	ldr	r3, [r0, #4]
    87ba:	b14b      	cbz	r3, 87d0 <att_handle_rsp+0x62>
	att->req = NULL;
    87bc:	2300      	movs	r3, #0
    87be:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	att_process(att);
    87c2:	4620      	mov	r0, r4
    87c4:	f7ff ffc1 	bl	874a <att_process>
}
    87c8:	2000      	movs	r0, #0
    87ca:	b002      	add	sp, #8
    87cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		att_req_destroy(att->req);
    87d0:	f7ff fd34 	bl	823c <att_req_destroy>
    87d4:	e7f2      	b.n	87bc <att_handle_rsp+0x4e>

000087d6 <att_confirm>:
{
    87d6:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    87d8:	2300      	movs	r3, #0
    87da:	898a      	ldrh	r2, [r1, #12]
    87dc:	6889      	ldr	r1, [r1, #8]
    87de:	f7ff ffc6 	bl	876e <att_handle_rsp>
}
    87e2:	bd08      	pop	{r3, pc}

000087e4 <att_handle_exec_write_rsp>:
{
    87e4:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    87e6:	2300      	movs	r3, #0
    87e8:	898a      	ldrh	r2, [r1, #12]
    87ea:	6889      	ldr	r1, [r1, #8]
    87ec:	f7ff ffbf 	bl	876e <att_handle_rsp>
}
    87f0:	bd08      	pop	{r3, pc}

000087f2 <att_handle_prepare_write_rsp>:
{
    87f2:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    87f4:	2300      	movs	r3, #0
    87f6:	898a      	ldrh	r2, [r1, #12]
    87f8:	6889      	ldr	r1, [r1, #8]
    87fa:	f7ff ffb8 	bl	876e <att_handle_rsp>
}
    87fe:	bd08      	pop	{r3, pc}

00008800 <att_handle_write_rsp>:
{
    8800:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8802:	2300      	movs	r3, #0
    8804:	898a      	ldrh	r2, [r1, #12]
    8806:	6889      	ldr	r1, [r1, #8]
    8808:	f7ff ffb1 	bl	876e <att_handle_rsp>
}
    880c:	bd08      	pop	{r3, pc}

0000880e <att_handle_read_mult_rsp>:
{
    880e:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8810:	2300      	movs	r3, #0
    8812:	898a      	ldrh	r2, [r1, #12]
    8814:	6889      	ldr	r1, [r1, #8]
    8816:	f7ff ffaa 	bl	876e <att_handle_rsp>
}
    881a:	bd08      	pop	{r3, pc}

0000881c <att_handle_read_blob_rsp>:
{
    881c:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    881e:	2300      	movs	r3, #0
    8820:	898a      	ldrh	r2, [r1, #12]
    8822:	6889      	ldr	r1, [r1, #8]
    8824:	f7ff ffa3 	bl	876e <att_handle_rsp>
}
    8828:	bd08      	pop	{r3, pc}

0000882a <att_handle_read_rsp>:
{
    882a:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    882c:	2300      	movs	r3, #0
    882e:	898a      	ldrh	r2, [r1, #12]
    8830:	6889      	ldr	r1, [r1, #8]
    8832:	f7ff ff9c 	bl	876e <att_handle_rsp>
}
    8836:	bd08      	pop	{r3, pc}

00008838 <att_handle_read_type_rsp>:
{
    8838:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    883a:	2300      	movs	r3, #0
    883c:	898a      	ldrh	r2, [r1, #12]
    883e:	6889      	ldr	r1, [r1, #8]
    8840:	f7ff ff95 	bl	876e <att_handle_rsp>
}
    8844:	bd08      	pop	{r3, pc}

00008846 <att_handle_find_type_rsp>:
{
    8846:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8848:	2300      	movs	r3, #0
    884a:	898a      	ldrh	r2, [r1, #12]
    884c:	6889      	ldr	r1, [r1, #8]
    884e:	f7ff ff8e 	bl	876e <att_handle_rsp>
}
    8852:	bd08      	pop	{r3, pc}

00008854 <att_handle_find_info_rsp>:
{
    8854:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8856:	2300      	movs	r3, #0
    8858:	898a      	ldrh	r2, [r1, #12]
    885a:	6889      	ldr	r1, [r1, #8]
    885c:	f7ff ff87 	bl	876e <att_handle_rsp>
}
    8860:	bd08      	pop	{r3, pc}

00008862 <att_mtu_rsp>:
	if (!att) {
    8862:	b1b8      	cbz	r0, 8894 <att_mtu_rsp+0x32>
{
    8864:	b508      	push	{r3, lr}
    8866:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
    8868:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    886a:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    886c:	2b16      	cmp	r3, #22
    886e:	d90b      	bls.n	8888 <att_mtu_rsp+0x26>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    8870:	2b41      	cmp	r3, #65	; 0x41
    8872:	bf28      	it	cs
    8874:	2341      	movcs	r3, #65	; 0x41
    8876:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    887a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	return att_handle_rsp(att, rsp, buf->len, 0);
    887e:	2300      	movs	r3, #0
    8880:	8992      	ldrh	r2, [r2, #12]
    8882:	f7ff ff74 	bl	876e <att_handle_rsp>
    8886:	bd08      	pop	{r3, pc}
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    8888:	2304      	movs	r3, #4
    888a:	2200      	movs	r2, #0
    888c:	4611      	mov	r1, r2
    888e:	f7ff ff6e 	bl	876e <att_handle_rsp>
    8892:	bd08      	pop	{r3, pc}
		return 0;
    8894:	2000      	movs	r0, #0
    8896:	4770      	bx	lr

00008898 <bt_att_encrypt_change>:
{
    8898:	b570      	push	{r4, r5, r6, lr}
    889a:	4604      	mov	r4, r0
	struct bt_conn *conn = ch->chan.conn;
    889c:	6805      	ldr	r5, [r0, #0]
	if (hci_status) {
    889e:	b941      	cbnz	r1, 88b2 <bt_att_encrypt_change+0x1a>
	if (conn->sec_level == BT_SECURITY_LOW) {
    88a0:	7a2b      	ldrb	r3, [r5, #8]
    88a2:	2b01      	cmp	r3, #1
    88a4:	d004      	beq.n	88b0 <bt_att_encrypt_change+0x18>
	if (!att->req || !att->req->retrying) {
    88a6:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    88aa:	b10b      	cbz	r3, 88b0 <bt_att_encrypt_change+0x18>
    88ac:	7d1b      	ldrb	r3, [r3, #20]
    88ae:	b933      	cbnz	r3, 88be <bt_att_encrypt_change+0x26>
    88b0:	bd70      	pop	{r4, r5, r6, pc}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    88b2:	2305      	movs	r3, #5
    88b4:	2200      	movs	r2, #0
    88b6:	4611      	mov	r1, r2
    88b8:	f7ff ff59 	bl	876e <att_handle_rsp>
		return;
    88bc:	bd70      	pop	{r4, r5, r6, pc}
	k_sem_take(&att->tx_sem, K_FOREVER);
    88be:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    88c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    88c6:	4630      	mov	r0, r6
    88c8:	f01f ff46 	bl	28758 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    88cc:	6823      	ldr	r3, [r4, #0]
    88ce:	7b1b      	ldrb	r3, [r3, #12]
    88d0:	2b03      	cmp	r3, #3
    88d2:	d012      	beq.n	88fa <bt_att_encrypt_change+0x62>
    88d4:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    88d6:	b1eb      	cbz	r3, 8914 <bt_att_encrypt_change+0x7c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    88d8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    88dc:	691e      	ldr	r6, [r3, #16]
    88de:	4630      	mov	r0, r6
    88e0:	f7ff fc08 	bl	80f4 <att_cb>
    88e4:	4603      	mov	r3, r0
    88e6:	4632      	mov	r2, r6
    88e8:	2104      	movs	r1, #4
    88ea:	4628      	mov	r0, r5
    88ec:	f7fe fdbb 	bl	7466 <bt_l2cap_send_cb>
	att->req->buf = NULL;
    88f0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    88f4:	2200      	movs	r2, #0
    88f6:	611a      	str	r2, [r3, #16]
    88f8:	e7da      	b.n	88b0 <bt_att_encrypt_change+0x18>
    88fa:	f3bf 8f5b 	dmb	ish
    88fe:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    8902:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    8906:	f013 0f04 	tst.w	r3, #4
    890a:	d101      	bne.n	8910 <bt_att_encrypt_change+0x78>
    890c:	2301      	movs	r3, #1
    890e:	e7e2      	b.n	88d6 <bt_att_encrypt_change+0x3e>
    8910:	2300      	movs	r3, #0
    8912:	e7e0      	b.n	88d6 <bt_att_encrypt_change+0x3e>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    8914:	4630      	mov	r0, r6
    8916:	f01f ff0c 	bl	28732 <_impl_k_sem_give>
    891a:	bd70      	pop	{r4, r5, r6, pc}

0000891c <att_error_rsp>:
{
    891c:	b538      	push	{r3, r4, r5, lr}
    891e:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
    8920:	6888      	ldr	r0, [r1, #8]
	if (!att->req) {
    8922:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8926:	b1fb      	cbz	r3, 8968 <att_error_rsp+0x4c>
	if (att->req->buf) {
    8928:	691a      	ldr	r2, [r3, #16]
    892a:	b132      	cbz	r2, 893a <att_error_rsp+0x1e>
	buf->data = buf->__buf + state->offset;
    892c:	f102 0110 	add.w	r1, r2, #16
    8930:	899d      	ldrh	r5, [r3, #12]
    8932:	4429      	add	r1, r5
    8934:	6091      	str	r1, [r2, #8]
	buf->len = state->len;
    8936:	89db      	ldrh	r3, [r3, #14]
    8938:	8193      	strh	r3, [r2, #12]
	err = rsp->error;
    893a:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    893c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8940:	7d1b      	ldrb	r3, [r3, #20]
    8942:	b133      	cbz	r3, 8952 <att_error_rsp+0x36>
	return att_handle_rsp(att, NULL, 0, err);
    8944:	462b      	mov	r3, r5
    8946:	2200      	movs	r2, #0
    8948:	4611      	mov	r1, r2
    894a:	4620      	mov	r0, r4
    894c:	f7ff ff0f 	bl	876e <att_handle_rsp>
}
    8950:	bd38      	pop	{r3, r4, r5, pc}
	if (!att_change_security(att->chan.chan.conn, err)) {
    8952:	4629      	mov	r1, r5
    8954:	6820      	ldr	r0, [r4, #0]
    8956:	f7ff fe82 	bl	865e <att_change_security>
    895a:	2800      	cmp	r0, #0
    895c:	d1f2      	bne.n	8944 <att_error_rsp+0x28>
		att->req->retrying = true;
    895e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8962:	2201      	movs	r2, #1
    8964:	751a      	strb	r2, [r3, #20]
		return 0;
    8966:	bd38      	pop	{r3, r4, r5, pc}
		err = BT_ATT_ERR_UNLIKELY;
    8968:	250e      	movs	r5, #14
    896a:	e7eb      	b.n	8944 <att_error_rsp+0x28>

0000896c <att_reset>:
{
    896c:	b5f0      	push	{r4, r5, r6, r7, lr}
    896e:	b083      	sub	sp, #12
    8970:	4607      	mov	r7, r0
	atomic_set_bit(att->flags, ATT_DISCONNECTED);
    8972:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8976:	f3bf 8f5b 	dmb	ish
    897a:	e853 2f00 	ldrex	r2, [r3]
    897e:	f042 0204 	orr.w	r2, r2, #4
    8982:	e843 2100 	strex	r1, r2, [r3]
    8986:	2900      	cmp	r1, #0
    8988:	d1f7      	bne.n	897a <att_reset+0xe>
    898a:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
    898e:	2400      	movs	r4, #0
    8990:	e004      	b.n	899c <att_reset+0x30>
    8992:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
    8996:	f01f fecc 	bl	28732 <_impl_k_sem_give>
    899a:	3401      	adds	r4, #1
    899c:	2c01      	cmp	r4, #1
    899e:	ddf8      	ble.n	8992 <att_reset+0x26>
	return list->head;
    89a0:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    89a4:	b11d      	cbz	r5, 89ae <att_reset+0x42>
    89a6:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    89a8:	b145      	cbz	r5, 89bc <att_reset+0x50>
	return node->next;
    89aa:	682c      	ldr	r4, [r5, #0]
    89ac:	e006      	b.n	89bc <att_reset+0x50>
    89ae:	462c      	mov	r4, r5
    89b0:	e004      	b.n	89bc <att_reset+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    89b2:	4623      	mov	r3, r4
    89b4:	e014      	b.n	89e0 <att_reset+0x74>
    89b6:	4623      	mov	r3, r4
    89b8:	4625      	mov	r5, r4
    89ba:	461c      	mov	r4, r3
    89bc:	b1c5      	cbz	r5, 89f0 <att_reset+0x84>
		if (req->func) {
    89be:	686e      	ldr	r6, [r5, #4]
    89c0:	b12e      	cbz	r6, 89ce <att_reset+0x62>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    89c2:	9500      	str	r5, [sp, #0]
    89c4:	2300      	movs	r3, #0
    89c6:	461a      	mov	r2, r3
    89c8:	210e      	movs	r1, #14
    89ca:	4618      	mov	r0, r3
    89cc:	47b0      	blx	r6
		att_req_destroy(req);
    89ce:	4628      	mov	r0, r5
    89d0:	f7ff fc34 	bl	823c <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    89d4:	2c00      	cmp	r4, #0
    89d6:	d0ee      	beq.n	89b6 <att_reset+0x4a>
    89d8:	4622      	mov	r2, r4
    89da:	2c00      	cmp	r4, #0
    89dc:	d0e9      	beq.n	89b2 <att_reset+0x46>
	return node->next;
    89de:	6823      	ldr	r3, [r4, #0]
    89e0:	b113      	cbz	r3, 89e8 <att_reset+0x7c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    89e2:	b11a      	cbz	r2, 89ec <att_reset+0x80>
	return node->next;
    89e4:	6823      	ldr	r3, [r4, #0]
    89e6:	e7e7      	b.n	89b8 <att_reset+0x4c>
    89e8:	2300      	movs	r3, #0
    89ea:	e7e5      	b.n	89b8 <att_reset+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    89ec:	2300      	movs	r3, #0
    89ee:	e7e3      	b.n	89b8 <att_reset+0x4c>
	list->head = NULL;
    89f0:	2300      	movs	r3, #0
    89f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	list->tail = NULL;
    89f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	if (!att->req) {
    89fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    89fe:	b12b      	cbz	r3, 8a0c <att_reset+0xa0>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    8a00:	230e      	movs	r3, #14
    8a02:	2200      	movs	r2, #0
    8a04:	4611      	mov	r1, r2
    8a06:	4638      	mov	r0, r7
    8a08:	f7ff feb1 	bl	876e <att_handle_rsp>
}
    8a0c:	b003      	add	sp, #12
    8a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008a10 <bt_att_disconnected>:
{
    8a10:	b510      	push	{r4, lr}
    8a12:	4604      	mov	r4, r0
	att_reset(att);
    8a14:	f7ff ffaa 	bl	896c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    8a18:	6820      	ldr	r0, [r4, #0]
    8a1a:	f001 f93f 	bl	9c9c <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    8a1e:	22ec      	movs	r2, #236	; 0xec
    8a20:	2100      	movs	r1, #0
    8a22:	4620      	mov	r0, r4
    8a24:	f020 fe58 	bl	296d8 <memset>
    8a28:	bd10      	pop	{r4, pc}

00008a2a <att_timeout>:
{
    8a2a:	b510      	push	{r4, lr}
    8a2c:	4604      	mov	r4, r0
	att_reset(att);
    8a2e:	38ac      	subs	r0, #172	; 0xac
    8a30:	f7ff ff9c 	bl	896c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    8a34:	f854 0cac 	ldr.w	r0, [r4, #-172]
    8a38:	f001 f930 	bl	9c9c <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    8a3c:	2300      	movs	r3, #0
    8a3e:	f844 3cac 	str.w	r3, [r4, #-172]
    8a42:	bd10      	pop	{r4, pc}

00008a44 <bt_att_create_pdu>:
{
    8a44:	b538      	push	{r3, r4, r5, lr}
    8a46:	460d      	mov	r5, r1
    8a48:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    8a4a:	f7ff fbab 	bl	81a4 <att_chan_get>
	if (!att) {
    8a4e:	b180      	cbz	r0, 8a72 <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    8a50:	3401      	adds	r4, #1
    8a52:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
    8a56:	429c      	cmp	r4, r3
    8a58:	d80d      	bhi.n	8a76 <bt_att_create_pdu+0x32>
	buf = bt_l2cap_create_pdu(NULL, 0);
    8a5a:	2100      	movs	r1, #0
    8a5c:	4608      	mov	r0, r1
    8a5e:	f7fe fc6a 	bl	7336 <bt_l2cap_create_pdu>
    8a62:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    8a64:	2101      	movs	r1, #1
    8a66:	3008      	adds	r0, #8
    8a68:	f011 fb64 	bl	1a134 <net_buf_simple_add>
	hdr->code = op;
    8a6c:	7005      	strb	r5, [r0, #0]
}
    8a6e:	4620      	mov	r0, r4
    8a70:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    8a72:	2400      	movs	r4, #0
    8a74:	e7fb      	b.n	8a6e <bt_att_create_pdu+0x2a>
		return NULL;
    8a76:	2400      	movs	r4, #0
    8a78:	e7f9      	b.n	8a6e <bt_att_create_pdu+0x2a>
	...

00008a7c <att_indicate>:
{
    8a7c:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8a7e:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    8a80:	f101 0008 	add.w	r0, r1, #8
    8a84:	f011 fbb3 	bl	1a1ee <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    8a88:	2200      	movs	r2, #0
    8a8a:	211e      	movs	r1, #30
    8a8c:	4620      	mov	r0, r4
    8a8e:	f7ff ffd9 	bl	8a44 <bt_att_create_pdu>
	if (!buf) {
    8a92:	b128      	cbz	r0, 8aa0 <att_indicate+0x24>
    8a94:	4602      	mov	r2, r0
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    8a96:	4b03      	ldr	r3, [pc, #12]	; (8aa4 <att_indicate+0x28>)
    8a98:	2104      	movs	r1, #4
    8a9a:	4620      	mov	r0, r4
    8a9c:	f7fe fce3 	bl	7466 <bt_l2cap_send_cb>
}
    8aa0:	2000      	movs	r0, #0
    8aa2:	bd10      	pop	{r4, pc}
    8aa4:	0000829f 	.word	0x0000829f

00008aa8 <att_mtu_req>:
{
    8aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8aac:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    8aae:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
    8ab0:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    8ab2:	2d16      	cmp	r5, #22
    8ab4:	d802      	bhi.n	8abc <att_mtu_req+0x14>
		return BT_ATT_ERR_INVALID_PDU;
    8ab6:	2004      	movs	r0, #4
    8ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8abc:	4604      	mov	r4, r0
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    8abe:	2202      	movs	r2, #2
    8ac0:	2103      	movs	r1, #3
    8ac2:	4638      	mov	r0, r7
    8ac4:	f7ff ffbe 	bl	8a44 <bt_att_create_pdu>
	if (!pdu) {
    8ac8:	4680      	mov	r8, r0
    8aca:	b1b8      	cbz	r0, 8afc <att_mtu_req+0x54>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    8acc:	2102      	movs	r1, #2
    8ace:	3008      	adds	r0, #8
    8ad0:	f011 fb30 	bl	1a134 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    8ad4:	2600      	movs	r6, #0
    8ad6:	2341      	movs	r3, #65	; 0x41
    8ad8:	7003      	strb	r3, [r0, #0]
    8ada:	7046      	strb	r6, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    8adc:	4b09      	ldr	r3, [pc, #36]	; (8b04 <att_mtu_req+0x5c>)
    8ade:	4642      	mov	r2, r8
    8ae0:	2104      	movs	r1, #4
    8ae2:	4638      	mov	r0, r7
    8ae4:	f7fe fcbf 	bl	7466 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    8ae8:	2d41      	cmp	r5, #65	; 0x41
    8aea:	bf28      	it	cs
    8aec:	2541      	movcs	r5, #65	; 0x41
    8aee:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    8af2:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	return 0;
    8af6:	4630      	mov	r0, r6
    8af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    8afc:	200e      	movs	r0, #14
}
    8afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b02:	bf00      	nop
    8b04:	00008267 	.word	0x00008267

00008b08 <send_err_rsp>:
	if (!req) {
    8b08:	b901      	cbnz	r1, 8b0c <send_err_rsp+0x4>
    8b0a:	4770      	bx	lr
{
    8b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b10:	460f      	mov	r7, r1
    8b12:	461d      	mov	r5, r3
    8b14:	4616      	mov	r6, r2
    8b16:	4604      	mov	r4, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    8b18:	2204      	movs	r2, #4
    8b1a:	2101      	movs	r1, #1
    8b1c:	f7ff ff92 	bl	8a44 <bt_att_create_pdu>
	if (!buf) {
    8b20:	4680      	mov	r8, r0
    8b22:	b168      	cbz	r0, 8b40 <send_err_rsp+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    8b24:	2104      	movs	r1, #4
    8b26:	3008      	adds	r0, #8
    8b28:	f011 fb04 	bl	1a134 <net_buf_simple_add>
	rsp->request = req;
    8b2c:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
    8b2e:	f8a0 6001 	strh.w	r6, [r0, #1]
	rsp->error = err;
    8b32:	70c5      	strb	r5, [r0, #3]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    8b34:	4b03      	ldr	r3, [pc, #12]	; (8b44 <send_err_rsp+0x3c>)
    8b36:	4642      	mov	r2, r8
    8b38:	2104      	movs	r1, #4
    8b3a:	4620      	mov	r0, r4
    8b3c:	f7fe fc93 	bl	7466 <bt_l2cap_send_cb>
    8b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b44:	00008267 	.word	0x00008267

00008b48 <bt_att_recv>:
{
    8b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att_hdr *hdr = (void *)buf->data;
    8b4a:	688d      	ldr	r5, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    8b4c:	898b      	ldrh	r3, [r1, #12]
    8b4e:	b903      	cbnz	r3, 8b52 <bt_att_recv+0xa>
    8b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8b52:	460e      	mov	r6, r1
    8b54:	4607      	mov	r7, r0
	net_buf_pull(buf, sizeof(*hdr));
    8b56:	2101      	movs	r1, #1
    8b58:	f106 0008 	add.w	r0, r6, #8
    8b5c:	f011 fb37 	bl	1a1ce <net_buf_simple_pull>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8b60:	2300      	movs	r3, #0
    8b62:	2b1a      	cmp	r3, #26
    8b64:	d822      	bhi.n	8bac <bt_att_recv+0x64>
		if (hdr->code == handlers[i].op) {
    8b66:	782c      	ldrb	r4, [r5, #0]
    8b68:	4a2c      	ldr	r2, [pc, #176]	; (8c1c <bt_att_recv+0xd4>)
    8b6a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    8b6e:	4294      	cmp	r4, r2
    8b70:	d001      	beq.n	8b76 <bt_att_recv+0x2e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8b72:	3301      	adds	r3, #1
    8b74:	e7f5      	b.n	8b62 <bt_att_recv+0x1a>
			handler = &handlers[i];
    8b76:	4c29      	ldr	r4, [pc, #164]	; (8c1c <bt_att_recv+0xd4>)
    8b78:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (!handler) {
    8b7c:	b1c4      	cbz	r4, 8bb0 <bt_att_recv+0x68>
		if (handler->type == ATT_REQUEST &&
    8b7e:	78a3      	ldrb	r3, [r4, #2]
    8b80:	2b01      	cmp	r3, #1
    8b82:	d022      	beq.n	8bca <bt_att_recv+0x82>
		} else if (handler->type == ATT_INDICATION &&
    8b84:	78a3      	ldrb	r3, [r4, #2]
    8b86:	2b05      	cmp	r3, #5
    8b88:	d031      	beq.n	8bee <bt_att_recv+0xa6>
	if (buf->len < handler->expect_len) {
    8b8a:	89b2      	ldrh	r2, [r6, #12]
    8b8c:	7863      	ldrb	r3, [r4, #1]
    8b8e:	429a      	cmp	r2, r3
    8b90:	d23f      	bcs.n	8c12 <bt_att_recv+0xca>
		err = BT_ATT_ERR_INVALID_PDU;
    8b92:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
    8b94:	78a2      	ldrb	r2, [r4, #2]
    8b96:	2a01      	cmp	r2, #1
    8b98:	d1da      	bne.n	8b50 <bt_att_recv+0x8>
    8b9a:	2800      	cmp	r0, #0
    8b9c:	d0d8      	beq.n	8b50 <bt_att_recv+0x8>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    8b9e:	4603      	mov	r3, r0
    8ba0:	2200      	movs	r2, #0
    8ba2:	7829      	ldrb	r1, [r5, #0]
    8ba4:	6838      	ldr	r0, [r7, #0]
    8ba6:	f7ff ffaf 	bl	8b08 <send_err_rsp>
    8baa:	e7d1      	b.n	8b50 <bt_att_recv+0x8>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8bac:	2400      	movs	r4, #0
    8bae:	e7e5      	b.n	8b7c <bt_att_recv+0x34>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    8bb0:	782c      	ldrb	r4, [r5, #0]
    8bb2:	4620      	mov	r0, r4
    8bb4:	f7ff fa86 	bl	80c4 <att_op_get_type>
    8bb8:	2800      	cmp	r0, #0
    8bba:	d0c9      	beq.n	8b50 <bt_att_recv+0x8>
			send_err_rsp(chan->conn, hdr->code, 0,
    8bbc:	2306      	movs	r3, #6
    8bbe:	2200      	movs	r2, #0
    8bc0:	4621      	mov	r1, r4
    8bc2:	6838      	ldr	r0, [r7, #0]
    8bc4:	f7ff ffa0 	bl	8b08 <send_err_rsp>
    8bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    atomic_test_and_set_bit(att->flags, ATT_PENDING_RSP)) {
    8bca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    8bce:	f3bf 8f5b 	dmb	ish
    8bd2:	e853 2f00 	ldrex	r2, [r3]
    8bd6:	f042 0101 	orr.w	r1, r2, #1
    8bda:	e843 1000 	strex	r0, r1, [r3]
    8bde:	2800      	cmp	r0, #0
    8be0:	d1f7      	bne.n	8bd2 <bt_att_recv+0x8a>
    8be2:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    8be6:	f012 0f01 	tst.w	r2, #1
    8bea:	d0cb      	beq.n	8b84 <bt_att_recv+0x3c>
    8bec:	e7b0      	b.n	8b50 <bt_att_recv+0x8>
			   atomic_test_and_set_bit(att->flags,
    8bee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    8bf2:	f3bf 8f5b 	dmb	ish
    8bf6:	e853 2f00 	ldrex	r2, [r3]
    8bfa:	f042 0102 	orr.w	r1, r2, #2
    8bfe:	e843 1000 	strex	r0, r1, [r3]
    8c02:	2800      	cmp	r0, #0
    8c04:	d1f7      	bne.n	8bf6 <bt_att_recv+0xae>
    8c06:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
    8c0a:	f012 0f02 	tst.w	r2, #2
    8c0e:	d0bc      	beq.n	8b8a <bt_att_recv+0x42>
    8c10:	e79e      	b.n	8b50 <bt_att_recv+0x8>
		err = handler->func(att, buf);
    8c12:	6863      	ldr	r3, [r4, #4]
    8c14:	4631      	mov	r1, r6
    8c16:	4638      	mov	r0, r7
    8c18:	4798      	blx	r3
    8c1a:	e7bb      	b.n	8b94 <bt_att_recv+0x4c>
    8c1c:	0002f840 	.word	0x0002f840

00008c20 <att_write_rsp>:
{
    8c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c24:	b086      	sub	sp, #24
	if (!handle) {
    8c26:	b923      	cbnz	r3, 8c32 <att_write_rsp+0x12>
		return BT_ATT_ERR_INVALID_HANDLE;
    8c28:	2401      	movs	r4, #1
}
    8c2a:	4620      	mov	r0, r4
    8c2c:	b006      	add	sp, #24
    8c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c32:	4698      	mov	r8, r3
    8c34:	4617      	mov	r7, r2
    8c36:	460e      	mov	r6, r1
    8c38:	4605      	mov	r5, r0
	memset(&data, 0, sizeof(data));
    8c3a:	2218      	movs	r2, #24
    8c3c:	2100      	movs	r1, #0
    8c3e:	4668      	mov	r0, sp
    8c40:	f020 fd4a 	bl	296d8 <memset>
	if (rsp) {
    8c44:	b137      	cbz	r7, 8c54 <att_write_rsp+0x34>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    8c46:	2200      	movs	r2, #0
    8c48:	4639      	mov	r1, r7
    8c4a:	4628      	mov	r0, r5
    8c4c:	f7ff fefa 	bl	8a44 <bt_att_create_pdu>
    8c50:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    8c52:	b3a0      	cbz	r0, 8cbe <att_write_rsp+0x9e>
	data.conn = conn;
    8c54:	9500      	str	r5, [sp, #0]
	data.op = op;
    8c56:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    8c5a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    8c5e:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    8c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8c64:	9303      	str	r3, [sp, #12]
	data.len = len;
    8c66:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    8c6a:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8c6e:	2301      	movs	r3, #1
    8c70:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8c74:	466b      	mov	r3, sp
    8c76:	4a13      	ldr	r2, [pc, #76]	; (8cc4 <att_write_rsp+0xa4>)
    8c78:	4641      	mov	r1, r8
    8c7a:	4640      	mov	r0, r8
    8c7c:	f000 ff26 	bl	9acc <bt_gatt_foreach_attr>
	if (data.err) {
    8c80:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8c84:	b194      	cbz	r4, 8cac <att_write_rsp+0x8c>
		if (rsp) {
    8c86:	b91f      	cbnz	r7, 8c90 <att_write_rsp+0x70>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8c88:	2e18      	cmp	r6, #24
    8c8a:	d00c      	beq.n	8ca6 <att_write_rsp+0x86>
    8c8c:	2400      	movs	r4, #0
    8c8e:	e7cc      	b.n	8c2a <att_write_rsp+0xa>
			net_buf_unref(data.buf);
    8c90:	9801      	ldr	r0, [sp, #4]
    8c92:	f011 fa03 	bl	1a09c <net_buf_unref>
			send_err_rsp(conn, op, handle, data.err);
    8c96:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8c9a:	4642      	mov	r2, r8
    8c9c:	4631      	mov	r1, r6
    8c9e:	4628      	mov	r0, r5
    8ca0:	f7ff ff32 	bl	8b08 <send_err_rsp>
    8ca4:	e7f0      	b.n	8c88 <att_write_rsp+0x68>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8ca6:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8caa:	e7be      	b.n	8c2a <att_write_rsp+0xa>
	if (data.buf) {
    8cac:	9a01      	ldr	r2, [sp, #4]
    8cae:	2a00      	cmp	r2, #0
    8cb0:	d0bb      	beq.n	8c2a <att_write_rsp+0xa>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    8cb2:	4b05      	ldr	r3, [pc, #20]	; (8cc8 <att_write_rsp+0xa8>)
    8cb4:	2104      	movs	r1, #4
    8cb6:	4628      	mov	r0, r5
    8cb8:	f7fe fbd5 	bl	7466 <bt_l2cap_send_cb>
    8cbc:	e7b5      	b.n	8c2a <att_write_rsp+0xa>
			return BT_ATT_ERR_UNLIKELY;
    8cbe:	240e      	movs	r4, #14
    8cc0:	e7b3      	b.n	8c2a <att_write_rsp+0xa>
    8cc2:	bf00      	nop
    8cc4:	00008067 	.word	0x00008067
    8cc8:	00008267 	.word	0x00008267

00008ccc <att_signed_write_cmd>:
{
    8ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8cce:	b085      	sub	sp, #20
    8cd0:	460d      	mov	r5, r1
	struct bt_conn *conn = att->chan.chan.conn;
    8cd2:	6806      	ldr	r6, [r0, #0]
	req = (void *)buf->data;
    8cd4:	460c      	mov	r4, r1
    8cd6:	f854 3f08 	ldr.w	r3, [r4, #8]!
	handle = sys_le16_to_cpu(req->handle);
    8cda:	881f      	ldrh	r7, [r3, #0]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    8cdc:	2101      	movs	r1, #1
    8cde:	4620      	mov	r0, r4
    8ce0:	f011 fa5f 	bl	1a1a2 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    8ce4:	4629      	mov	r1, r5
    8ce6:	4630      	mov	r0, r6
    8ce8:	f003 faf2 	bl	c2d0 <bt_smp_sign_verify>
	if (err) {
    8cec:	b110      	cbz	r0, 8cf4 <att_signed_write_cmd+0x28>
		return 0;
    8cee:	2000      	movs	r0, #0
}
    8cf0:	b005      	add	sp, #20
    8cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    8cf4:	2101      	movs	r1, #1
    8cf6:	4620      	mov	r0, r4
    8cf8:	f011 fa69 	bl	1a1ce <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    8cfc:	2102      	movs	r1, #2
    8cfe:	4620      	mov	r0, r4
    8d00:	f011 fa65 	bl	1a1ce <net_buf_simple_pull>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    8d04:	68aa      	ldr	r2, [r5, #8]
			     buf->len - sizeof(struct bt_att_signature));
    8d06:	89ab      	ldrh	r3, [r5, #12]
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    8d08:	3b0c      	subs	r3, #12
    8d0a:	b2db      	uxtb	r3, r3
    8d0c:	9302      	str	r3, [sp, #8]
    8d0e:	9201      	str	r2, [sp, #4]
    8d10:	2100      	movs	r1, #0
    8d12:	9100      	str	r1, [sp, #0]
    8d14:	463b      	mov	r3, r7
    8d16:	460a      	mov	r2, r1
    8d18:	4630      	mov	r0, r6
    8d1a:	f7ff ff81 	bl	8c20 <att_write_rsp>
    8d1e:	e7e7      	b.n	8cf0 <att_signed_write_cmd+0x24>

00008d20 <att_write_cmd>:
{
    8d20:	b530      	push	{r4, r5, lr}
    8d22:	b085      	sub	sp, #20
    8d24:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    8d26:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    8d28:	f101 0008 	add.w	r0, r1, #8
    8d2c:	f011 fa5f 	bl	1a1ee <net_buf_simple_pull_le16>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    8d30:	68a3      	ldr	r3, [r4, #8]
    8d32:	7b22      	ldrb	r2, [r4, #12]
    8d34:	9202      	str	r2, [sp, #8]
    8d36:	9301      	str	r3, [sp, #4]
    8d38:	2100      	movs	r1, #0
    8d3a:	9100      	str	r1, [sp, #0]
    8d3c:	4603      	mov	r3, r0
    8d3e:	460a      	mov	r2, r1
    8d40:	4628      	mov	r0, r5
    8d42:	f7ff ff6d 	bl	8c20 <att_write_rsp>
}
    8d46:	b005      	add	sp, #20
    8d48:	bd30      	pop	{r4, r5, pc}

00008d4a <att_write_req>:
{
    8d4a:	b530      	push	{r4, r5, lr}
    8d4c:	b085      	sub	sp, #20
    8d4e:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    8d50:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    8d52:	f101 0008 	add.w	r0, r1, #8
    8d56:	f011 fa4a 	bl	1a1ee <net_buf_simple_pull_le16>
			     handle, 0, buf->data, buf->len);
    8d5a:	68a3      	ldr	r3, [r4, #8]
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    8d5c:	7b22      	ldrb	r2, [r4, #12]
    8d5e:	9202      	str	r2, [sp, #8]
    8d60:	9301      	str	r3, [sp, #4]
    8d62:	2300      	movs	r3, #0
    8d64:	9300      	str	r3, [sp, #0]
    8d66:	4603      	mov	r3, r0
    8d68:	2213      	movs	r2, #19
    8d6a:	2112      	movs	r1, #18
    8d6c:	4628      	mov	r0, r5
    8d6e:	f7ff ff57 	bl	8c20 <att_write_rsp>
}
    8d72:	b005      	add	sp, #20
    8d74:	bd30      	pop	{r4, r5, pc}
	...

00008d78 <att_read_group_rsp>:
{
    8d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d7c:	b086      	sub	sp, #24
    8d7e:	4604      	mov	r4, r0
    8d80:	4688      	mov	r8, r1
    8d82:	4616      	mov	r6, r2
    8d84:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    8d86:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    8d88:	2214      	movs	r2, #20
    8d8a:	2100      	movs	r1, #0
    8d8c:	a801      	add	r0, sp, #4
    8d8e:	f020 fca3 	bl	296d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    8d92:	2201      	movs	r2, #1
    8d94:	2111      	movs	r1, #17
    8d96:	4628      	mov	r0, r5
    8d98:	f7ff fe54 	bl	8a44 <bt_att_create_pdu>
    8d9c:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    8d9e:	b328      	cbz	r0, 8dec <att_read_group_rsp+0x74>
	data.att = att;
    8da0:	9401      	str	r4, [sp, #4]
	data.uuid = uuid;
    8da2:	f8cd 8008 	str.w	r8, [sp, #8]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8da6:	2101      	movs	r1, #1
    8da8:	3008      	adds	r0, #8
    8daa:	f011 f9c3 	bl	1a134 <net_buf_simple_add>
    8dae:	9004      	str	r0, [sp, #16]
	data.rsp->len = 0;
    8db0:	2300      	movs	r3, #0
    8db2:	7003      	strb	r3, [r0, #0]
	data.group = NULL;
    8db4:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8db6:	ab01      	add	r3, sp, #4
    8db8:	4a0f      	ldr	r2, [pc, #60]	; (8df8 <att_read_group_rsp+0x80>)
    8dba:	4639      	mov	r1, r7
    8dbc:	4630      	mov	r0, r6
    8dbe:	f000 fe85 	bl	9acc <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    8dc2:	9b04      	ldr	r3, [sp, #16]
    8dc4:	781c      	ldrb	r4, [r3, #0]
    8dc6:	b13c      	cbz	r4, 8dd8 <att_read_group_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    8dc8:	4b0c      	ldr	r3, [pc, #48]	; (8dfc <att_read_group_rsp+0x84>)
    8dca:	9a03      	ldr	r2, [sp, #12]
    8dcc:	2104      	movs	r1, #4
    8dce:	4628      	mov	r0, r5
    8dd0:	f7fe fb49 	bl	7466 <bt_l2cap_send_cb>
	return 0;
    8dd4:	2400      	movs	r4, #0
    8dd6:	e00a      	b.n	8dee <att_read_group_rsp+0x76>
		net_buf_unref(data.buf);
    8dd8:	9803      	ldr	r0, [sp, #12]
    8dda:	f011 f95f 	bl	1a09c <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    8dde:	230a      	movs	r3, #10
    8de0:	4632      	mov	r2, r6
    8de2:	2110      	movs	r1, #16
    8de4:	4628      	mov	r0, r5
    8de6:	f7ff fe8f 	bl	8b08 <send_err_rsp>
		return 0;
    8dea:	e000      	b.n	8dee <att_read_group_rsp+0x76>
		return BT_ATT_ERR_UNLIKELY;
    8dec:	240e      	movs	r4, #14
}
    8dee:	4620      	mov	r0, r4
    8df0:	b006      	add	sp, #24
    8df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8df6:	bf00      	nop
    8df8:	00008301 	.word	0x00008301
    8dfc:	00008267 	.word	0x00008267

00008e00 <att_read_group_req>:
{
    8e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e04:	b088      	sub	sp, #32
	struct bt_conn *conn = att->chan.chan.conn;
    8e06:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    8e08:	898b      	ldrh	r3, [r1, #12]
    8e0a:	2b06      	cmp	r3, #6
    8e0c:	d005      	beq.n	8e1a <att_read_group_req+0x1a>
    8e0e:	2b14      	cmp	r3, #20
    8e10:	d003      	beq.n	8e1a <att_read_group_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    8e12:	2004      	movs	r0, #4
}
    8e14:	b008      	add	sp, #32
    8e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e1a:	460c      	mov	r4, r1
    8e1c:	4605      	mov	r5, r0
	req = (void *)buf->data;
    8e1e:	4608      	mov	r0, r1
    8e20:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    8e24:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    8e26:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    8e2a:	2104      	movs	r1, #4
    8e2c:	f011 f9cf 	bl	1a1ce <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    8e30:	4621      	mov	r1, r4
    8e32:	a801      	add	r0, sp, #4
    8e34:	f7ff fb3c 	bl	84b0 <uuid_create>
    8e38:	b908      	cbnz	r0, 8e3e <att_read_group_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    8e3a:	200e      	movs	r0, #14
    8e3c:	e7ea      	b.n	8e14 <att_read_group_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    8e3e:	f10d 0216 	add.w	r2, sp, #22
    8e42:	4641      	mov	r1, r8
    8e44:	4638      	mov	r0, r7
    8e46:	f7ff f8c4 	bl	7fd2 <range_is_valid>
    8e4a:	b1f0      	cbz	r0, 8e8a <att_read_group_req+0x8a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    8e4c:	2300      	movs	r3, #0
    8e4e:	f88d 3018 	strb.w	r3, [sp, #24]
    8e52:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8e56:	f8ad 301a 	strh.w	r3, [sp, #26]
    8e5a:	a906      	add	r1, sp, #24
    8e5c:	a801      	add	r0, sp, #4
    8e5e:	f7fa fdee 	bl	3a3e <bt_uuid_cmp>
    8e62:	b158      	cbz	r0, 8e7c <att_read_group_req+0x7c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    8e64:	2300      	movs	r3, #0
    8e66:	f88d 301c 	strb.w	r3, [sp, #28]
    8e6a:	f642 0301 	movw	r3, #10241	; 0x2801
    8e6e:	f8ad 301e 	strh.w	r3, [sp, #30]
    8e72:	a907      	add	r1, sp, #28
    8e74:	a801      	add	r0, sp, #4
    8e76:	f7fa fde2 	bl	3a3e <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    8e7a:	b978      	cbnz	r0, 8e9c <att_read_group_req+0x9c>
	return att_read_group_rsp(att, &u.uuid, start_handle, end_handle);
    8e7c:	4643      	mov	r3, r8
    8e7e:	463a      	mov	r2, r7
    8e80:	a901      	add	r1, sp, #4
    8e82:	4628      	mov	r0, r5
    8e84:	f7ff ff78 	bl	8d78 <att_read_group_rsp>
    8e88:	e7c4      	b.n	8e14 <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, err_handle,
    8e8a:	2301      	movs	r3, #1
    8e8c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    8e90:	2110      	movs	r1, #16
    8e92:	4630      	mov	r0, r6
    8e94:	f7ff fe38 	bl	8b08 <send_err_rsp>
		return 0;
    8e98:	2000      	movs	r0, #0
    8e9a:	e7bb      	b.n	8e14 <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    8e9c:	2310      	movs	r3, #16
    8e9e:	463a      	mov	r2, r7
    8ea0:	4619      	mov	r1, r3
    8ea2:	4630      	mov	r0, r6
    8ea4:	f7ff fe30 	bl	8b08 <send_err_rsp>
		return 0;
    8ea8:	2000      	movs	r0, #0
    8eaa:	e7b3      	b.n	8e14 <att_read_group_req+0x14>

00008eac <att_read_mult_req>:
{
    8eac:	b570      	push	{r4, r5, r6, lr}
    8eae:	b086      	sub	sp, #24
    8eb0:	4605      	mov	r5, r0
    8eb2:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    8eb4:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    8eb6:	2214      	movs	r2, #20
    8eb8:	2100      	movs	r1, #0
    8eba:	a801      	add	r0, sp, #4
    8ebc:	f020 fc0c 	bl	296d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    8ec0:	2200      	movs	r2, #0
    8ec2:	210f      	movs	r1, #15
    8ec4:	4630      	mov	r0, r6
    8ec6:	f7ff fdbd 	bl	8a44 <bt_att_create_pdu>
    8eca:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    8ecc:	b348      	cbz	r0, 8f22 <att_read_mult_req+0x76>
	data.att = att;
    8ece:	9501      	str	r5, [sp, #4]
	while (buf->len >= sizeof(u16_t)) {
    8ed0:	89a3      	ldrh	r3, [r4, #12]
    8ed2:	2b01      	cmp	r3, #1
    8ed4:	d91c      	bls.n	8f10 <att_read_mult_req+0x64>
		handle = net_buf_pull_le16(buf);
    8ed6:	f104 0008 	add.w	r0, r4, #8
    8eda:	f011 f988 	bl	1a1ee <net_buf_simple_pull_le16>
    8ede:	4605      	mov	r5, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    8ee0:	2301      	movs	r3, #1
    8ee2:	f88d 3014 	strb.w	r3, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8ee6:	ab01      	add	r3, sp, #4
    8ee8:	4a0f      	ldr	r2, [pc, #60]	; (8f28 <att_read_mult_req+0x7c>)
    8eea:	4601      	mov	r1, r0
    8eec:	f000 fdee 	bl	9acc <bt_gatt_foreach_attr>
		if (data.err) {
    8ef0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8ef4:	2b00      	cmp	r3, #0
    8ef6:	d0eb      	beq.n	8ed0 <att_read_mult_req+0x24>
			net_buf_unref(data.buf);
    8ef8:	9803      	ldr	r0, [sp, #12]
    8efa:	f011 f8cf 	bl	1a09c <net_buf_unref>
			send_err_rsp(conn, BT_ATT_OP_READ_MULT_REQ, handle,
    8efe:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8f02:	462a      	mov	r2, r5
    8f04:	210e      	movs	r1, #14
    8f06:	4630      	mov	r0, r6
    8f08:	f7ff fdfe 	bl	8b08 <send_err_rsp>
			return 0;
    8f0c:	2000      	movs	r0, #0
    8f0e:	e006      	b.n	8f1e <att_read_mult_req+0x72>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    8f10:	4b06      	ldr	r3, [pc, #24]	; (8f2c <att_read_mult_req+0x80>)
    8f12:	9a03      	ldr	r2, [sp, #12]
    8f14:	2104      	movs	r1, #4
    8f16:	4630      	mov	r0, r6
    8f18:	f7fe faa5 	bl	7466 <bt_l2cap_send_cb>
	return 0;
    8f1c:	2000      	movs	r0, #0
}
    8f1e:	b006      	add	sp, #24
    8f20:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
    8f22:	200e      	movs	r0, #14
    8f24:	e7fb      	b.n	8f1e <att_read_mult_req+0x72>
    8f26:	bf00      	nop
    8f28:	00008131 	.word	0x00008131
    8f2c:	00008267 	.word	0x00008267

00008f30 <att_read_rsp>:
{
    8f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f34:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    8f36:	6807      	ldr	r7, [r0, #0]
	if (!handle) {
    8f38:	b923      	cbnz	r3, 8f44 <att_read_rsp+0x14>
		return BT_ATT_ERR_INVALID_HANDLE;
    8f3a:	2401      	movs	r4, #1
}
    8f3c:	4620      	mov	r0, r4
    8f3e:	b006      	add	sp, #24
    8f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8f44:	461d      	mov	r5, r3
    8f46:	4616      	mov	r6, r2
    8f48:	4688      	mov	r8, r1
    8f4a:	4604      	mov	r4, r0
	memset(&data, 0, sizeof(data));
    8f4c:	2214      	movs	r2, #20
    8f4e:	2100      	movs	r1, #0
    8f50:	a801      	add	r0, sp, #4
    8f52:	f020 fbc1 	bl	296d8 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    8f56:	2200      	movs	r2, #0
    8f58:	4631      	mov	r1, r6
    8f5a:	4638      	mov	r0, r7
    8f5c:	f7ff fd72 	bl	8a44 <bt_att_create_pdu>
    8f60:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    8f62:	b318      	cbz	r0, 8fac <att_read_rsp+0x7c>
	data.att = att;
    8f64:	9401      	str	r4, [sp, #4]
	data.offset = offset;
    8f66:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    8f6a:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8f6e:	2301      	movs	r3, #1
    8f70:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8f74:	ab01      	add	r3, sp, #4
    8f76:	4a0e      	ldr	r2, [pc, #56]	; (8fb0 <att_read_rsp+0x80>)
    8f78:	4629      	mov	r1, r5
    8f7a:	4628      	mov	r0, r5
    8f7c:	f000 fda6 	bl	9acc <bt_gatt_foreach_attr>
	if (data.err) {
    8f80:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8f84:	b934      	cbnz	r4, 8f94 <att_read_rsp+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    8f86:	4b0b      	ldr	r3, [pc, #44]	; (8fb4 <att_read_rsp+0x84>)
    8f88:	9a03      	ldr	r2, [sp, #12]
    8f8a:	2104      	movs	r1, #4
    8f8c:	4638      	mov	r0, r7
    8f8e:	f7fe fa6a 	bl	7466 <bt_l2cap_send_cb>
	return 0;
    8f92:	e7d3      	b.n	8f3c <att_read_rsp+0xc>
		net_buf_unref(data.buf);
    8f94:	9803      	ldr	r0, [sp, #12]
    8f96:	f011 f881 	bl	1a09c <net_buf_unref>
		send_err_rsp(conn, op, handle, data.err);
    8f9a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8f9e:	462a      	mov	r2, r5
    8fa0:	4641      	mov	r1, r8
    8fa2:	4638      	mov	r0, r7
    8fa4:	f7ff fdb0 	bl	8b08 <send_err_rsp>
		return 0;
    8fa8:	2400      	movs	r4, #0
    8faa:	e7c7      	b.n	8f3c <att_read_rsp+0xc>
		return BT_ATT_ERR_UNLIKELY;
    8fac:	240e      	movs	r4, #14
    8fae:	e7c5      	b.n	8f3c <att_read_rsp+0xc>
    8fb0:	00008131 	.word	0x00008131
    8fb4:	00008267 	.word	0x00008267

00008fb8 <att_read_blob_req>:
{
    8fb8:	b500      	push	{lr}
    8fba:	b083      	sub	sp, #12
	req = (void *)buf->data;
    8fbc:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    8fbe:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
    8fc0:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    8fc2:	9200      	str	r2, [sp, #0]
    8fc4:	220d      	movs	r2, #13
    8fc6:	210c      	movs	r1, #12
    8fc8:	f7ff ffb2 	bl	8f30 <att_read_rsp>
}
    8fcc:	b003      	add	sp, #12
    8fce:	f85d fb04 	ldr.w	pc, [sp], #4

00008fd2 <att_read_req>:
{
    8fd2:	b500      	push	{lr}
    8fd4:	b083      	sub	sp, #12
	req = (void *)buf->data;
    8fd6:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    8fd8:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    8fda:	2200      	movs	r2, #0
    8fdc:	9200      	str	r2, [sp, #0]
    8fde:	220b      	movs	r2, #11
    8fe0:	210a      	movs	r1, #10
    8fe2:	f7ff ffa5 	bl	8f30 <att_read_rsp>
}
    8fe6:	b003      	add	sp, #12
    8fe8:	f85d fb04 	ldr.w	pc, [sp], #4

00008fec <att_read_type_rsp>:
{
    8fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ff0:	b086      	sub	sp, #24
    8ff2:	4604      	mov	r4, r0
    8ff4:	4688      	mov	r8, r1
    8ff6:	4616      	mov	r6, r2
    8ff8:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    8ffa:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    8ffc:	2218      	movs	r2, #24
    8ffe:	2100      	movs	r1, #0
    9000:	4668      	mov	r0, sp
    9002:	f020 fb69 	bl	296d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    9006:	2201      	movs	r2, #1
    9008:	2109      	movs	r1, #9
    900a:	4628      	mov	r0, r5
    900c:	f7ff fd1a 	bl	8a44 <bt_att_create_pdu>
    9010:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9012:	b340      	cbz	r0, 9066 <att_read_type_rsp+0x7a>
	data.att = att;
    9014:	9400      	str	r4, [sp, #0]
	data.uuid = uuid;
    9016:	f8cd 8004 	str.w	r8, [sp, #4]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    901a:	2101      	movs	r1, #1
    901c:	3008      	adds	r0, #8
    901e:	f011 f889 	bl	1a134 <net_buf_simple_add>
    9022:	9003      	str	r0, [sp, #12]
	data.rsp->len = 0;
    9024:	2300      	movs	r3, #0
    9026:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9028:	230a      	movs	r3, #10
    902a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    902e:	466b      	mov	r3, sp
    9030:	4a0f      	ldr	r2, [pc, #60]	; (9070 <att_read_type_rsp+0x84>)
    9032:	4639      	mov	r1, r7
    9034:	4630      	mov	r0, r6
    9036:	f000 fd49 	bl	9acc <bt_gatt_foreach_attr>
	if (data.err) {
    903a:	f89d 4014 	ldrb.w	r4, [sp, #20]
    903e:	b934      	cbnz	r4, 904e <att_read_type_rsp+0x62>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9040:	4b0c      	ldr	r3, [pc, #48]	; (9074 <att_read_type_rsp+0x88>)
    9042:	9a02      	ldr	r2, [sp, #8]
    9044:	2104      	movs	r1, #4
    9046:	4628      	mov	r0, r5
    9048:	f7fe fa0d 	bl	7466 <bt_l2cap_send_cb>
	return 0;
    904c:	e00c      	b.n	9068 <att_read_type_rsp+0x7c>
		net_buf_unref(data.buf);
    904e:	9802      	ldr	r0, [sp, #8]
    9050:	f011 f824 	bl	1a09c <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, start_handle,
    9054:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9058:	4632      	mov	r2, r6
    905a:	2108      	movs	r1, #8
    905c:	4628      	mov	r0, r5
    905e:	f7ff fd53 	bl	8b08 <send_err_rsp>
		return 0;
    9062:	2400      	movs	r4, #0
    9064:	e000      	b.n	9068 <att_read_type_rsp+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    9066:	240e      	movs	r4, #14
}
    9068:	4620      	mov	r0, r4
    906a:	b006      	add	sp, #24
    906c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9070:	000083ef 	.word	0x000083ef
    9074:	00008267 	.word	0x00008267

00009078 <att_read_type_req>:
{
    9078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    907c:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    907e:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    9080:	898b      	ldrh	r3, [r1, #12]
    9082:	2b06      	cmp	r3, #6
    9084:	d005      	beq.n	9092 <att_read_type_req+0x1a>
    9086:	2b14      	cmp	r3, #20
    9088:	d003      	beq.n	9092 <att_read_type_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    908a:	2004      	movs	r0, #4
}
    908c:	b006      	add	sp, #24
    908e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9092:	460c      	mov	r4, r1
    9094:	4605      	mov	r5, r0
	req = (void *)buf->data;
    9096:	4608      	mov	r0, r1
    9098:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    909c:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    909e:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    90a2:	2104      	movs	r1, #4
    90a4:	f011 f893 	bl	1a1ce <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    90a8:	4621      	mov	r1, r4
    90aa:	a801      	add	r0, sp, #4
    90ac:	f7ff fa00 	bl	84b0 <uuid_create>
    90b0:	b908      	cbnz	r0, 90b6 <att_read_type_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    90b2:	200e      	movs	r0, #14
    90b4:	e7ea      	b.n	908c <att_read_type_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    90b6:	f10d 0216 	add.w	r2, sp, #22
    90ba:	4641      	mov	r1, r8
    90bc:	4638      	mov	r0, r7
    90be:	f7fe ff88 	bl	7fd2 <range_is_valid>
    90c2:	b130      	cbz	r0, 90d2 <att_read_type_req+0x5a>
	return att_read_type_rsp(att, &u.uuid, start_handle, end_handle);
    90c4:	4643      	mov	r3, r8
    90c6:	463a      	mov	r2, r7
    90c8:	a901      	add	r1, sp, #4
    90ca:	4628      	mov	r0, r5
    90cc:	f7ff ff8e 	bl	8fec <att_read_type_rsp>
    90d0:	e7dc      	b.n	908c <att_read_type_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, err_handle,
    90d2:	2301      	movs	r3, #1
    90d4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    90d8:	2108      	movs	r1, #8
    90da:	4630      	mov	r0, r6
    90dc:	f7ff fd14 	bl	8b08 <send_err_rsp>
		return 0;
    90e0:	2000      	movs	r0, #0
    90e2:	e7d3      	b.n	908c <att_read_type_req+0x14>

000090e4 <att_find_type_rsp>:
{
    90e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    90e8:	b086      	sub	sp, #24
    90ea:	4604      	mov	r4, r0
    90ec:	460e      	mov	r6, r1
    90ee:	4617      	mov	r7, r2
    90f0:	4698      	mov	r8, r3
	struct bt_conn *conn = att->chan.chan.conn;
    90f2:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    90f4:	2214      	movs	r2, #20
    90f6:	2100      	movs	r1, #0
    90f8:	a801      	add	r0, sp, #4
    90fa:	f020 faed 	bl	296d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    90fe:	2200      	movs	r2, #0
    9100:	2107      	movs	r1, #7
    9102:	4628      	mov	r0, r5
    9104:	f7ff fc9e 	bl	8a44 <bt_att_create_pdu>
    9108:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    910a:	b338      	cbz	r0, 915c <att_find_type_rsp+0x78>
	data.att = att;
    910c:	9401      	str	r4, [sp, #4]
	data.group = NULL;
    910e:	2300      	movs	r3, #0
    9110:	9303      	str	r3, [sp, #12]
	data.value = value;
    9112:	f8cd 8010 	str.w	r8, [sp, #16]
	data.value_len = value_len;
    9116:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    911a:	f88d 3014 	strb.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    911e:	230a      	movs	r3, #10
    9120:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9124:	ab01      	add	r3, sp, #4
    9126:	4a10      	ldr	r2, [pc, #64]	; (9168 <att_find_type_rsp+0x84>)
    9128:	4639      	mov	r1, r7
    912a:	4630      	mov	r0, r6
    912c:	f000 fcce 	bl	9acc <bt_gatt_foreach_attr>
	if (data.err) {
    9130:	f89d 4015 	ldrb.w	r4, [sp, #21]
    9134:	b934      	cbnz	r4, 9144 <att_find_type_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9136:	4b0d      	ldr	r3, [pc, #52]	; (916c <att_find_type_rsp+0x88>)
    9138:	9a02      	ldr	r2, [sp, #8]
    913a:	2104      	movs	r1, #4
    913c:	4628      	mov	r0, r5
    913e:	f7fe f992 	bl	7466 <bt_l2cap_send_cb>
	return 0;
    9142:	e00c      	b.n	915e <att_find_type_rsp+0x7a>
		net_buf_unref(data.buf);
    9144:	9802      	ldr	r0, [sp, #8]
    9146:	f010 ffa9 	bl	1a09c <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    914a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    914e:	4632      	mov	r2, r6
    9150:	2106      	movs	r1, #6
    9152:	4628      	mov	r0, r5
    9154:	f7ff fcd8 	bl	8b08 <send_err_rsp>
		return 0;
    9158:	2400      	movs	r4, #0
    915a:	e000      	b.n	915e <att_find_type_rsp+0x7a>
		return BT_ATT_ERR_UNLIKELY;
    915c:	240e      	movs	r4, #14
}
    915e:	4620      	mov	r0, r4
    9160:	b006      	add	sp, #24
    9162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9166:	bf00      	nop
    9168:	00008597 	.word	0x00008597
    916c:	00008267 	.word	0x00008267

00009170 <att_find_type_req>:
{
    9170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9174:	b084      	sub	sp, #16
    9176:	4605      	mov	r5, r0
    9178:	460f      	mov	r7, r1
	struct bt_conn *conn = att->chan.chan.conn;
    917a:	f8d0 9000 	ldr.w	r9, [r0]
	req = (void *)buf->data;
    917e:	4608      	mov	r0, r1
    9180:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    9184:	881c      	ldrh	r4, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9186:	885e      	ldrh	r6, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    9188:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    918c:	2106      	movs	r1, #6
    918e:	f011 f81e 	bl	1a1ce <net_buf_simple_pull>
    9192:	4682      	mov	sl, r0
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9194:	f10d 020e 	add.w	r2, sp, #14
    9198:	4631      	mov	r1, r6
    919a:	4620      	mov	r0, r4
    919c:	f7fe ff19 	bl	7fd2 <range_is_valid>
    91a0:	b160      	cbz	r0, 91bc <att_find_type_req+0x4c>
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
    91a2:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
    91a6:	d012      	beq.n	91ce <att_find_type_req+0x5e>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    91a8:	230a      	movs	r3, #10
    91aa:	4622      	mov	r2, r4
    91ac:	2106      	movs	r1, #6
    91ae:	4648      	mov	r0, r9
    91b0:	f7ff fcaa 	bl	8b08 <send_err_rsp>
		return 0;
    91b4:	2000      	movs	r0, #0
}
    91b6:	b004      	add	sp, #16
    91b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
    91bc:	2301      	movs	r3, #1
    91be:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    91c2:	2106      	movs	r1, #6
    91c4:	4648      	mov	r0, r9
    91c6:	f7ff fc9f 	bl	8b08 <send_err_rsp>
		return 0;
    91ca:	2000      	movs	r0, #0
    91cc:	e7f3      	b.n	91b6 <att_find_type_req+0x46>
	return att_find_type_rsp(att, start_handle, end_handle, value,
    91ce:	7b3b      	ldrb	r3, [r7, #12]
    91d0:	9300      	str	r3, [sp, #0]
    91d2:	4653      	mov	r3, sl
    91d4:	4632      	mov	r2, r6
    91d6:	4621      	mov	r1, r4
    91d8:	4628      	mov	r0, r5
    91da:	f7ff ff83 	bl	90e4 <att_find_type_rsp>
    91de:	e7ea      	b.n	91b6 <att_find_type_req+0x46>

000091e0 <att_find_info_rsp>:
{
    91e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    91e2:	b085      	sub	sp, #20
    91e4:	4605      	mov	r5, r0
    91e6:	460e      	mov	r6, r1
    91e8:	4617      	mov	r7, r2
	struct bt_conn *conn = att->chan.chan.conn;
    91ea:	6804      	ldr	r4, [r0, #0]
	memset(&data, 0, sizeof(data));
    91ec:	2210      	movs	r2, #16
    91ee:	2100      	movs	r1, #0
    91f0:	4668      	mov	r0, sp
    91f2:	f020 fa71 	bl	296d8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    91f6:	2200      	movs	r2, #0
    91f8:	2105      	movs	r1, #5
    91fa:	4620      	mov	r0, r4
    91fc:	f7ff fc22 	bl	8a44 <bt_att_create_pdu>
    9200:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    9202:	b1e8      	cbz	r0, 9240 <att_find_info_rsp+0x60>
	data.att = att;
    9204:	ab04      	add	r3, sp, #16
    9206:	f843 5d10 	str.w	r5, [r3, #-16]!
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    920a:	4a0e      	ldr	r2, [pc, #56]	; (9244 <att_find_info_rsp+0x64>)
    920c:	4639      	mov	r1, r7
    920e:	4630      	mov	r0, r6
    9210:	f000 fc5c 	bl	9acc <bt_gatt_foreach_attr>
	if (!data.rsp) {
    9214:	9b02      	ldr	r3, [sp, #8]
    9216:	b143      	cbz	r3, 922a <att_find_info_rsp+0x4a>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9218:	4b0b      	ldr	r3, [pc, #44]	; (9248 <att_find_info_rsp+0x68>)
    921a:	9a01      	ldr	r2, [sp, #4]
    921c:	2104      	movs	r1, #4
    921e:	4620      	mov	r0, r4
    9220:	f7fe f921 	bl	7466 <bt_l2cap_send_cb>
	return 0;
    9224:	2000      	movs	r0, #0
}
    9226:	b005      	add	sp, #20
    9228:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
    922a:	9801      	ldr	r0, [sp, #4]
    922c:	f010 ff36 	bl	1a09c <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, start_handle,
    9230:	230a      	movs	r3, #10
    9232:	4632      	mov	r2, r6
    9234:	2104      	movs	r1, #4
    9236:	4620      	mov	r0, r4
    9238:	f7ff fc66 	bl	8b08 <send_err_rsp>
		return 0;
    923c:	2000      	movs	r0, #0
    923e:	e7f2      	b.n	9226 <att_find_info_rsp+0x46>
		return BT_ATT_ERR_UNLIKELY;
    9240:	200e      	movs	r0, #14
    9242:	e7f0      	b.n	9226 <att_find_info_rsp+0x46>
    9244:	000084e7 	.word	0x000084e7
    9248:	00008267 	.word	0x00008267

0000924c <att_find_info_req>:
{
    924c:	b5f0      	push	{r4, r5, r6, r7, lr}
    924e:	b083      	sub	sp, #12
    9250:	4604      	mov	r4, r0
	struct bt_conn *conn = att->chan.chan.conn;
    9252:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    9254:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    9256:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9258:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    925a:	f10d 0206 	add.w	r2, sp, #6
    925e:	4631      	mov	r1, r6
    9260:	4628      	mov	r0, r5
    9262:	f7fe feb6 	bl	7fd2 <range_is_valid>
    9266:	b130      	cbz	r0, 9276 <att_find_info_req+0x2a>
	return att_find_info_rsp(att, start_handle, end_handle);
    9268:	4632      	mov	r2, r6
    926a:	4629      	mov	r1, r5
    926c:	4620      	mov	r0, r4
    926e:	f7ff ffb7 	bl	91e0 <att_find_info_rsp>
}
    9272:	b003      	add	sp, #12
    9274:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, err_handle,
    9276:	2301      	movs	r3, #1
    9278:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    927c:	2104      	movs	r1, #4
    927e:	4638      	mov	r0, r7
    9280:	f7ff fc42 	bl	8b08 <send_err_rsp>
		return 0;
    9284:	2000      	movs	r0, #0
    9286:	e7f4      	b.n	9272 <att_find_info_req+0x26>

00009288 <bt_att_init>:

void bt_att_init(void)
{
    9288:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    928a:	4803      	ldr	r0, [pc, #12]	; (9298 <bt_att_init+0x10>)
    928c:	f7fd ff44 	bl	7118 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
    9290:	f000 fb3c 	bl	990c <bt_gatt_init>
    9294:	bd08      	pop	{r3, pc}
    9296:	bf00      	nop
    9298:	2000b8d8 	.word	0x2000b8d8

0000929c <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    929e:	2800      	cmp	r0, #0
    92a0:	d043      	beq.n	932a <bt_att_send+0x8e>
    92a2:	4606      	mov	r6, r0
    92a4:	2900      	cmp	r1, #0
    92a6:	d043      	beq.n	9330 <bt_att_send+0x94>
    92a8:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    92aa:	f7fe ff7b 	bl	81a4 <att_chan_get>
	if (!att) {
    92ae:	4605      	mov	r5, r0
    92b0:	2800      	cmp	r0, #0
    92b2:	d040      	beq.n	9336 <bt_att_send+0x9a>
		return -ENOTCONN;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    92b4:	f100 07d4 	add.w	r7, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    92b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    92bc:	4638      	mov	r0, r7
    92be:	f01f fa4b 	bl	28758 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    92c2:	682b      	ldr	r3, [r5, #0]
    92c4:	7b1b      	ldrb	r3, [r3, #12]
    92c6:	2b03      	cmp	r3, #3
    92c8:	d011      	beq.n	92ee <bt_att_send+0x52>
    92ca:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    92cc:	b1e3      	cbz	r3, 9308 <bt_att_send+0x6c>
		BT_WARN("Disconnected");
		k_sem_give(&att->tx_sem);
		return -ENOTCONN;
	}

	hdr = (void *)buf->data;
    92ce:	68a3      	ldr	r3, [r4, #8]

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    92d0:	781b      	ldrb	r3, [r3, #0]
    92d2:	2bd2      	cmp	r3, #210	; 0xd2
    92d4:	d01e      	beq.n	9314 <bt_att_send+0x78>
			k_sem_give(&att->tx_sem);
			return err;
		}
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));
    92d6:	4620      	mov	r0, r4
    92d8:	f7fe ff0c 	bl	80f4 <att_cb>
    92dc:	4603      	mov	r3, r0
    92de:	4622      	mov	r2, r4
    92e0:	2104      	movs	r1, #4
    92e2:	4630      	mov	r0, r6
    92e4:	f7fe f8bf 	bl	7466 <bt_l2cap_send_cb>

	return 0;
    92e8:	2500      	movs	r5, #0
}
    92ea:	4628      	mov	r0, r5
    92ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    92ee:	f3bf 8f5b 	dmb	ish
    92f2:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    92f6:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    92fa:	f013 0f04 	tst.w	r3, #4
    92fe:	d101      	bne.n	9304 <bt_att_send+0x68>
    9300:	2301      	movs	r3, #1
    9302:	e7e3      	b.n	92cc <bt_att_send+0x30>
    9304:	2300      	movs	r3, #0
    9306:	e7e1      	b.n	92cc <bt_att_send+0x30>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    9308:	4638      	mov	r0, r7
    930a:	f01f fa12 	bl	28732 <_impl_k_sem_give>
		return -ENOTCONN;
    930e:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    9312:	e7ea      	b.n	92ea <bt_att_send+0x4e>
		err = bt_smp_sign(conn, buf);
    9314:	4621      	mov	r1, r4
    9316:	4630      	mov	r0, r6
    9318:	f003 f81a 	bl	c350 <bt_smp_sign>
		if (err) {
    931c:	4605      	mov	r5, r0
    931e:	2800      	cmp	r0, #0
    9320:	d0d9      	beq.n	92d6 <bt_att_send+0x3a>
    9322:	4638      	mov	r0, r7
    9324:	f01f fa05 	bl	28732 <_impl_k_sem_give>
			return err;
    9328:	e7df      	b.n	92ea <bt_att_send+0x4e>
		return -EINVAL;
    932a:	f06f 0515 	mvn.w	r5, #21
    932e:	e7dc      	b.n	92ea <bt_att_send+0x4e>
    9330:	f06f 0515 	mvn.w	r5, #21
    9334:	e7d9      	b.n	92ea <bt_att_send+0x4e>
		return -ENOTCONN;
    9336:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    933a:	e7d6      	b.n	92ea <bt_att_send+0x4e>

0000933c <bt_att_req_send>:
{
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    933c:	b1e0      	cbz	r0, 9378 <bt_att_req_send+0x3c>
    933e:	b1f1      	cbz	r1, 937e <bt_att_req_send+0x42>
{
    9340:	b510      	push	{r4, lr}
    9342:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    9344:	f7fe ff2e 	bl	81a4 <att_chan_get>
	if (!att) {
    9348:	b1e0      	cbz	r0, 9384 <bt_att_req_send+0x48>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    934a:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    934e:	b17a      	cbz	r2, 9370 <bt_att_req_send+0x34>
	node->next = NULL;
    9350:	2200      	movs	r2, #0
    9352:	6022      	str	r2, [r4, #0]
	if (!list->tail) {
    9354:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    9358:	b122      	cbz	r2, 9364 <bt_att_req_send+0x28>
		list->tail->next = node;
    935a:	6014      	str	r4, [r2, #0]
		list->tail = node;
    935c:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    9360:	2000      	movs	r0, #0
    9362:	bd10      	pop	{r4, pc}
		list->tail = node;
    9364:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		list->head = node;
    9368:	f8c0 40a4 	str.w	r4, [r0, #164]	; 0xa4
    936c:	2000      	movs	r0, #0
    936e:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    9370:	4621      	mov	r1, r4
    9372:	f7ff f9ad 	bl	86d0 <att_send_req>
    9376:	bd10      	pop	{r4, pc}
		return -EINVAL;
    9378:	f06f 0015 	mvn.w	r0, #21
    937c:	4770      	bx	lr
    937e:	f06f 0015 	mvn.w	r0, #21
    9382:	4770      	bx	lr
		return -ENOTCONN;
    9384:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    9388:	bd10      	pop	{r4, pc}

0000938a <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    938a:	4770      	bx	lr

0000938c <gatt_register>:
};

static struct bt_gatt_service gatt_svc = BT_GATT_SERVICE(gatt_attrs);

static int gatt_register(struct bt_gatt_service *svc)
{
    938c:	b430      	push	{r4, r5}
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
    938e:	6804      	ldr	r4, [r0, #0]
	u16_t count = svc->attr_count;
    9390:	8883      	ldrh	r3, [r0, #4]
	return (!list->head);
    9392:	4a1c      	ldr	r2, [pc, #112]	; (9404 <gatt_register+0x78>)
    9394:	6812      	ldr	r2, [r2, #0]

	if (sys_slist_is_empty(&db)) {
    9396:	b172      	cbz	r2, 93b6 <gatt_register+0x2a>
	return list->tail;
    9398:	4a1a      	ldr	r2, [pc, #104]	; (9404 <gatt_register+0x78>)
    939a:	6852      	ldr	r2, [r2, #4]
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    939c:	b14a      	cbz	r2, 93b2 <gatt_register+0x26>
    939e:	3a08      	subs	r2, #8
	handle = last->attrs[last->attr_count - 1].handle;
    93a0:	6815      	ldr	r5, [r2, #0]
    93a2:	8892      	ldrh	r2, [r2, #4]
    93a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    93a8:	0091      	lsls	r1, r2, #2
    93aa:	3914      	subs	r1, #20
    93ac:	4429      	add	r1, r5
    93ae:	8a0a      	ldrh	r2, [r1, #16]
    93b0:	e009      	b.n	93c6 <gatt_register+0x3a>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    93b2:	2200      	movs	r2, #0
    93b4:	e7f4      	b.n	93a0 <gatt_register+0x14>
		handle = 0;
    93b6:	2200      	movs	r2, #0
    93b8:	e005      	b.n	93c6 <gatt_register+0x3a>
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
		if (!attrs->handle) {
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
		} else if (attrs->handle > handle) {
    93ba:	428a      	cmp	r2, r1
    93bc:	d21e      	bcs.n	93fc <gatt_register+0x70>
			/* Use existing handle if valid */
			handle = attrs->handle;
    93be:	460a      	mov	r2, r1
	for (; attrs && count; attrs++, count--) {
    93c0:	3414      	adds	r4, #20
    93c2:	3b01      	subs	r3, #1
    93c4:	b29b      	uxth	r3, r3
    93c6:	b13c      	cbz	r4, 93d8 <gatt_register+0x4c>
    93c8:	b133      	cbz	r3, 93d8 <gatt_register+0x4c>
		if (!attrs->handle) {
    93ca:	8a21      	ldrh	r1, [r4, #16]
    93cc:	2900      	cmp	r1, #0
    93ce:	d1f4      	bne.n	93ba <gatt_register+0x2e>
			attrs->handle = ++handle;
    93d0:	3201      	adds	r2, #1
    93d2:	b292      	uxth	r2, r2
    93d4:	8222      	strh	r2, [r4, #16]
    93d6:	e7f3      	b.n	93c0 <gatt_register+0x34>
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
		       attrs, attrs->handle, bt_uuid_str(attrs->uuid),
		       attrs->perm);
	}

	sys_slist_append(&db, &svc->node);
    93d8:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    93dc:	2200      	movs	r2, #0
    93de:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    93e0:	4a08      	ldr	r2, [pc, #32]	; (9404 <gatt_register+0x78>)
    93e2:	6852      	ldr	r2, [r2, #4]
    93e4:	b12a      	cbz	r2, 93f2 <gatt_register+0x66>
		list->tail->next = node;
    93e6:	6013      	str	r3, [r2, #0]
		list->tail = node;
    93e8:	4a06      	ldr	r2, [pc, #24]	; (9404 <gatt_register+0x78>)
    93ea:	6053      	str	r3, [r2, #4]

	return 0;
    93ec:	2000      	movs	r0, #0
}
    93ee:	bc30      	pop	{r4, r5}
    93f0:	4770      	bx	lr
		list->tail = node;
    93f2:	4a04      	ldr	r2, [pc, #16]	; (9404 <gatt_register+0x78>)
    93f4:	6053      	str	r3, [r2, #4]
		list->head = node;
    93f6:	6013      	str	r3, [r2, #0]
	return 0;
    93f8:	2000      	movs	r0, #0
    93fa:	e7f8      	b.n	93ee <gatt_register+0x62>
			return -EINVAL;
    93fc:	f06f 0015 	mvn.w	r0, #21
    9400:	e7f5      	b.n	93ee <gatt_register+0x62>
    9402:	bf00      	nop
    9404:	2000063c 	.word	0x2000063c

00009408 <update_range>:
	k_delayed_work_init(&gatt_sc.work, sc_process);
}

static bool update_range(u16_t *start, u16_t *end, u16_t new_start,
			 u16_t new_end)
{
    9408:	b430      	push	{r4, r5}
	BT_DBG("start 0x%04x end 0x%04x new_start 0x%04x new_end 0x%04x",
	       *start, *end, new_start, new_end);

	/* Check if inside existing range */
	if (new_start >= *start && new_end <= *end) {
    940a:	8804      	ldrh	r4, [r0, #0]
    940c:	4294      	cmp	r4, r2
    940e:	d802      	bhi.n	9416 <update_range+0xe>
    9410:	880d      	ldrh	r5, [r1, #0]
    9412:	429d      	cmp	r5, r3
    9414:	d209      	bcs.n	942a <update_range+0x22>
		return false;
	}

	/* Update range */
	if (*start > new_start) {
    9416:	4294      	cmp	r4, r2
    9418:	d900      	bls.n	941c <update_range+0x14>
		*start = new_start;
    941a:	8002      	strh	r2, [r0, #0]
	}

	if (*end < new_end) {
    941c:	880a      	ldrh	r2, [r1, #0]
    941e:	4293      	cmp	r3, r2
    9420:	d905      	bls.n	942e <update_range+0x26>
		*end = new_end;
    9422:	800b      	strh	r3, [r1, #0]
	}

	return true;
    9424:	2001      	movs	r0, #1
}
    9426:	bc30      	pop	{r4, r5}
    9428:	4770      	bx	lr
		return false;
    942a:	2000      	movs	r0, #0
    942c:	e7fb      	b.n	9426 <update_range+0x1e>
	return true;
    942e:	2001      	movs	r0, #1
    9430:	e7f9      	b.n	9426 <update_range+0x1e>

00009432 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    9432:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    9434:	2000      	movs	r0, #0
    9436:	4770      	bx	lr

00009438 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    9438:	b510      	push	{r4, lr}
	int i;
	u16_t value = 0x0000;
    943a:	2400      	movs	r4, #0

	for (i = 0; i < ccc->cfg_len; i++) {
    943c:	4623      	mov	r3, r4
    943e:	e000      	b.n	9442 <gatt_ccc_changed+0xa>
    9440:	3301      	adds	r3, #1
    9442:	684a      	ldr	r2, [r1, #4]
    9444:	429a      	cmp	r2, r3
    9446:	d907      	bls.n	9458 <gatt_ccc_changed+0x20>
		if (ccc->cfg[i].value > value) {
    9448:	680a      	ldr	r2, [r1, #0]
    944a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    944e:	8912      	ldrh	r2, [r2, #8]
    9450:	4294      	cmp	r4, r2
    9452:	d2f5      	bcs.n	9440 <gatt_ccc_changed+0x8>
			value = ccc->cfg[i].value;
    9454:	4614      	mov	r4, r2
    9456:	e7f3      	b.n	9440 <gatt_ccc_changed+0x8>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    9458:	890b      	ldrh	r3, [r1, #8]
    945a:	429c      	cmp	r4, r3
    945c:	d003      	beq.n	9466 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    945e:	810c      	strh	r4, [r1, #8]
		ccc->cfg_changed(attr, value);
    9460:	68cb      	ldr	r3, [r1, #12]
    9462:	4621      	mov	r1, r4
    9464:	4798      	blx	r3
    9466:	bd10      	pop	{r4, pc}

00009468 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    9468:	b510      	push	{r4, lr}
    946a:	9b02      	ldr	r3, [sp, #8]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    946c:	69dc      	ldr	r4, [r3, #28]
    946e:	460a      	mov	r2, r1
    9470:	6999      	ldr	r1, [r3, #24]
    9472:	47a0      	blx	r4
    9474:	bd10      	pop	{r4, pc}
	...

00009478 <sc_indicate_rsp>:
{
    9478:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    947a:	4b0f      	ldr	r3, [pc, #60]	; (94b8 <sc_indicate_rsp+0x40>)
    947c:	f103 0254 	add.w	r2, r3, #84	; 0x54
    9480:	f3bf 8f5b 	dmb	ish
    9484:	e852 1f00 	ldrex	r1, [r2]
    9488:	f021 0102 	bic.w	r1, r1, #2
    948c:	e842 1000 	strex	r0, r1, [r2]
    9490:	2800      	cmp	r0, #0
    9492:	d1f7      	bne.n	9484 <sc_indicate_rsp+0xc>
    9494:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9498:	f3bf 8f5b 	dmb	ish
    949c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    949e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    94a2:	f013 0f01 	tst.w	r3, #1
    94a6:	d100      	bne.n	94aa <sc_indicate_rsp+0x32>
    94a8:	bd08      	pop	{r3, pc}
    94aa:	2200      	movs	r2, #0
    94ac:	4903      	ldr	r1, [pc, #12]	; (94bc <sc_indicate_rsp+0x44>)
    94ae:	4804      	ldr	r0, [pc, #16]	; (94c0 <sc_indicate_rsp+0x48>)
    94b0:	f01f ff88 	bl	293c4 <k_delayed_work_submit_to_queue>
}
    94b4:	e7f8      	b.n	94a8 <sc_indicate_rsp+0x30>
    94b6:	bf00      	nop
    94b8:	20000644 	.word	0x20000644
    94bc:	20000670 	.word	0x20000670
    94c0:	20002a70 	.word	0x20002a70

000094c4 <sc_indicate>:
{
    94c4:	b510      	push	{r4, lr}
    94c6:	4604      	mov	r4, r0
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    94c8:	3054      	adds	r0, #84	; 0x54
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    94ca:	f3bf 8f5b 	dmb	ish
    94ce:	e850 3f00 	ldrex	r3, [r0]
    94d2:	f043 0e01 	orr.w	lr, r3, #1
    94d6:	e840 ec00 	strex	ip, lr, [r0]
    94da:	f1bc 0f00 	cmp.w	ip, #0
    94de:	d1f6      	bne.n	94ce <sc_indicate+0xa>
    94e0:	f3bf 8f5b 	dmb	ish
    94e4:	f013 0f01 	tst.w	r3, #1
    94e8:	d10a      	bne.n	9500 <sc_indicate+0x3c>
		sc->start = start;
    94ea:	8521      	strh	r1, [r4, #40]	; 0x28
		sc->end = end;
    94ec:	8562      	strh	r2, [r4, #42]	; 0x2a
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    94ee:	f3bf 8f5b 	dmb	ish
    94f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    94f4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    94f8:	f013 0f02 	tst.w	r3, #2
    94fc:	d00b      	beq.n	9516 <sc_indicate+0x52>
    94fe:	bd10      	pop	{r4, pc}
	if (!update_range(&sc->start, &sc->end, start, end)) {
    9500:	4613      	mov	r3, r2
    9502:	460a      	mov	r2, r1
    9504:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    9508:	f104 0028 	add.w	r0, r4, #40	; 0x28
    950c:	f7ff ff7c 	bl	9408 <update_range>
    9510:	2800      	cmp	r0, #0
    9512:	d1ec      	bne.n	94ee <sc_indicate+0x2a>
    9514:	e7f3      	b.n	94fe <sc_indicate+0x3a>
    9516:	220a      	movs	r2, #10
    9518:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    951c:	4801      	ldr	r0, [pc, #4]	; (9524 <sc_indicate+0x60>)
    951e:	f01f ff51 	bl	293c4 <k_delayed_work_submit_to_queue>
    9522:	e7ec      	b.n	94fe <sc_indicate+0x3a>
    9524:	20002a70 	.word	0x20002a70

00009528 <sc_save>:
	u16_t end;
};

static void sc_save(struct bt_gatt_ccc_cfg *cfg,
		    struct bt_gatt_indicate_params *params)
{
    9528:	b510      	push	{r4, lr}
    952a:	b082      	sub	sp, #8
    952c:	4604      	mov	r4, r0
	struct sc_data data;
	struct sc_data *stored;

	memcpy(&data, params->data, params->len);
    952e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    9530:	6a09      	ldr	r1, [r1, #32]
    9532:	a801      	add	r0, sp, #4
    9534:	f7f6 fec4 	bl	2c0 <memcpy>

	data.start = sys_le16_to_cpu(data.start);
    9538:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	data.end = sys_le16_to_cpu(data.end);
    953c:	f8bd 3006 	ldrh.w	r3, [sp, #6]

	/* Load data stored */
	stored = (struct sc_data *)cfg->data;

	/* Check if there is any change stored */
	if (!stored->start && !stored->end) {
    9540:	89a1      	ldrh	r1, [r4, #12]
    9542:	b909      	cbnz	r1, 9548 <sc_save+0x20>
    9544:	89e1      	ldrh	r1, [r4, #14]
    9546:	b139      	cbz	r1, 9558 <sc_save+0x30>
		*stored = data;
		goto done;
	}

	update_range(&stored->start, &stored->end,
    9548:	f104 010e 	add.w	r1, r4, #14
    954c:	f104 000c 	add.w	r0, r4, #12
    9550:	f7ff ff5a 	bl	9408 <update_range>
		     data.start, data.end);

done:
	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       stored->start, stored->end);
}
    9554:	b002      	add	sp, #8
    9556:	bd10      	pop	{r4, pc}
		*stored = data;
    9558:	9801      	ldr	r0, [sp, #4]
    955a:	60e0      	str	r0, [r4, #12]
		goto done;
    955c:	e7fa      	b.n	9554 <sc_save+0x2c>

0000955e <bt_gatt_attr_write_ccc>:
{
    955e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9562:	f8bd 4020 	ldrh.w	r4, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    9566:	68cd      	ldr	r5, [r1, #12]
	if (offset > sizeof(u16_t)) {
    9568:	2c02      	cmp	r4, #2
    956a:	d84f      	bhi.n	960c <bt_gatt_attr_write_ccc+0xae>
	if (offset + len > sizeof(u16_t)) {
    956c:	4698      	mov	r8, r3
    956e:	441c      	add	r4, r3
    9570:	2c02      	cmp	r4, #2
    9572:	d84e      	bhi.n	9612 <bt_gatt_attr_write_ccc+0xb4>
    9574:	460f      	mov	r7, r1
    9576:	4681      	mov	r9, r0
	return ((u16_t)src[1] << 8) | src[0];
    9578:	7853      	ldrb	r3, [r2, #1]
    957a:	7816      	ldrb	r6, [r2, #0]
    957c:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	for (i = 0; i < ccc->cfg_len; i++) {
    9580:	2400      	movs	r4, #0
    9582:	686b      	ldr	r3, [r5, #4]
    9584:	429c      	cmp	r4, r3
    9586:	d209      	bcs.n	959c <bt_gatt_attr_write_ccc+0x3e>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    9588:	6829      	ldr	r1, [r5, #0]
    958a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    958e:	3101      	adds	r1, #1
    9590:	4648      	mov	r0, r9
    9592:	f7fc fffd 	bl	6590 <bt_conn_addr_le_cmp>
    9596:	b108      	cbz	r0, 959c <bt_gatt_attr_write_ccc+0x3e>
	for (i = 0; i < ccc->cfg_len; i++) {
    9598:	3401      	adds	r4, #1
    959a:	e7f2      	b.n	9582 <bt_gatt_attr_write_ccc+0x24>
	if (i == ccc->cfg_len) {
    959c:	686b      	ldr	r3, [r5, #4]
    959e:	429c      	cmp	r4, r3
    95a0:	d026      	beq.n	95f0 <bt_gatt_attr_write_ccc+0x92>
	} else if (!value) {
    95a2:	b91e      	cbnz	r6, 95ac <bt_gatt_attr_write_ccc+0x4e>
		ccc->cfg[i].valid = false;
    95a4:	682a      	ldr	r2, [r5, #0]
    95a6:	0123      	lsls	r3, r4, #4
    95a8:	2100      	movs	r1, #0
    95aa:	54d1      	strb	r1, [r2, r3]
	ccc->cfg[i].value = value;
    95ac:	682b      	ldr	r3, [r5, #0]
    95ae:	0124      	lsls	r4, r4, #4
    95b0:	4423      	add	r3, r4
    95b2:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    95b4:	682b      	ldr	r3, [r5, #0]
    95b6:	441c      	add	r4, r3
    95b8:	8922      	ldrh	r2, [r4, #8]
    95ba:	892b      	ldrh	r3, [r5, #8]
    95bc:	429a      	cmp	r2, r3
    95be:	d003      	beq.n	95c8 <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
    95c0:	4629      	mov	r1, r5
    95c2:	4638      	mov	r0, r7
    95c4:	f7ff ff38 	bl	9438 <gatt_ccc_changed>
}
    95c8:	4640      	mov	r0, r8
    95ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	memcpy(dst, src, sizeof(*dst));
    95ce:	2207      	movs	r2, #7
    95d0:	f109 0148 	add.w	r1, r9, #72	; 0x48
    95d4:	3001      	adds	r0, #1
    95d6:	f7f6 fe73 	bl	2c0 <memcpy>
			if (value) {
    95da:	b11e      	cbz	r6, 95e4 <bt_gatt_attr_write_ccc+0x86>
				ccc->cfg[i].valid = true;
    95dc:	682b      	ldr	r3, [r5, #0]
    95de:	2201      	movs	r2, #1
    95e0:	f803 200a 	strb.w	r2, [r3, sl]
		if (i == ccc->cfg_len) {
    95e4:	686b      	ldr	r3, [r5, #4]
    95e6:	429c      	cmp	r4, r3
    95e8:	d1e0      	bne.n	95ac <bt_gatt_attr_write_ccc+0x4e>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    95ea:	f06f 0810 	mvn.w	r8, #16
    95ee:	e7eb      	b.n	95c8 <bt_gatt_attr_write_ccc+0x6a>
    95f0:	2400      	movs	r4, #0
		for (i = 0; i < ccc->cfg_len; i++) {
    95f2:	429c      	cmp	r4, r3
    95f4:	d2f6      	bcs.n	95e4 <bt_gatt_attr_write_ccc+0x86>
			if (ccc->cfg[i].valid) {
    95f6:	682a      	ldr	r2, [r5, #0]
    95f8:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    95fc:	eb02 000a 	add.w	r0, r2, sl
    9600:	f812 200a 	ldrb.w	r2, [r2, sl]
    9604:	2a00      	cmp	r2, #0
    9606:	d0e2      	beq.n	95ce <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    9608:	3401      	adds	r4, #1
    960a:	e7f2      	b.n	95f2 <bt_gatt_attr_write_ccc+0x94>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    960c:	f06f 0806 	mvn.w	r8, #6
    9610:	e7da      	b.n	95c8 <bt_gatt_attr_write_ccc+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    9612:	f06f 080c 	mvn.w	r8, #12
    9616:	e7d7      	b.n	95c8 <bt_gatt_attr_write_ccc+0x6a>

00009618 <gatt_send>:
{
    9618:	b538      	push	{r3, r4, r5, lr}
    961a:	460d      	mov	r5, r1
	if (params) {
    961c:	b153      	cbz	r3, 9634 <gatt_send+0x1c>
    961e:	4619      	mov	r1, r3
		req->buf = buf;
    9620:	611d      	str	r5, [r3, #16]
		req->func = func;
    9622:	605a      	str	r2, [r3, #4]
		req->destroy = destroy;
    9624:	9b04      	ldr	r3, [sp, #16]
    9626:	608b      	str	r3, [r1, #8]
		err = bt_att_req_send(conn, req);
    9628:	f7ff fe88 	bl	933c <bt_att_req_send>
    962c:	4604      	mov	r4, r0
	if (err) {
    962e:	b92c      	cbnz	r4, 963c <gatt_send+0x24>
}
    9630:	4620      	mov	r0, r4
    9632:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_att_send(conn, buf);
    9634:	f7ff fe32 	bl	929c <bt_att_send>
    9638:	4604      	mov	r4, r0
    963a:	e7f8      	b.n	962e <gatt_send+0x16>
		net_buf_unref(buf);
    963c:	4628      	mov	r0, r5
    963e:	f010 fd2d 	bl	1a09c <net_buf_unref>
	return err;
    9642:	e7f5      	b.n	9630 <gatt_send+0x18>

00009644 <gatt_indicate>:
{
    9644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9648:	b082      	sub	sp, #8
    964a:	4680      	mov	r8, r0
    964c:	460c      	mov	r4, r1
				sizeof(*ind) + params->len);
    964e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    9650:	3202      	adds	r2, #2
    9652:	211d      	movs	r1, #29
    9654:	f7ff f9f6 	bl	8a44 <bt_att_create_pdu>
	if (!buf) {
    9658:	b1f8      	cbz	r0, 969a <gatt_indicate+0x56>
    965a:	4606      	mov	r6, r0
	ind = net_buf_add(buf, sizeof(*ind));
    965c:	f100 0708 	add.w	r7, r0, #8
    9660:	2102      	movs	r1, #2
    9662:	4638      	mov	r0, r7
    9664:	f010 fd66 	bl	1a134 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    9668:	69a3      	ldr	r3, [r4, #24]
    966a:	8a1b      	ldrh	r3, [r3, #16]
    966c:	4605      	mov	r5, r0
    966e:	f825 3b02 	strh.w	r3, [r5], #2
	net_buf_add(buf, params->len);
    9672:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    9674:	4638      	mov	r0, r7
    9676:	f010 fd5d 	bl	1a134 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    967a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    967c:	6a21      	ldr	r1, [r4, #32]
    967e:	4628      	mov	r0, r5
    9680:	f7f6 fe1e 	bl	2c0 <memcpy>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    9684:	2300      	movs	r3, #0
    9686:	9300      	str	r3, [sp, #0]
    9688:	4623      	mov	r3, r4
    968a:	4a05      	ldr	r2, [pc, #20]	; (96a0 <gatt_indicate+0x5c>)
    968c:	4631      	mov	r1, r6
    968e:	4640      	mov	r0, r8
    9690:	f7ff ffc2 	bl	9618 <gatt_send>
}
    9694:	b002      	add	sp, #8
    9696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOMEM;
    969a:	f06f 000b 	mvn.w	r0, #11
    969e:	e7f9      	b.n	9694 <gatt_indicate+0x50>
    96a0:	00009469 	.word	0x00009469

000096a4 <gatt_notify>:
{
    96a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    96a8:	4680      	mov	r8, r0
    96aa:	468a      	mov	sl, r1
    96ac:	4691      	mov	r9, r2
    96ae:	461c      	mov	r4, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    96b0:	1c9a      	adds	r2, r3, #2
    96b2:	211b      	movs	r1, #27
    96b4:	f7ff f9c6 	bl	8a44 <bt_att_create_pdu>
	if (!buf) {
    96b8:	b1d8      	cbz	r0, 96f2 <gatt_notify+0x4e>
    96ba:	4606      	mov	r6, r0
	nfy = net_buf_add(buf, sizeof(*nfy));
    96bc:	f100 0708 	add.w	r7, r0, #8
    96c0:	2102      	movs	r1, #2
    96c2:	4638      	mov	r0, r7
    96c4:	f010 fd36 	bl	1a134 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    96c8:	4605      	mov	r5, r0
    96ca:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    96ce:	4621      	mov	r1, r4
    96d0:	4638      	mov	r0, r7
    96d2:	f010 fd2f 	bl	1a134 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    96d6:	4622      	mov	r2, r4
    96d8:	4649      	mov	r1, r9
    96da:	4628      	mov	r0, r5
    96dc:	f7f6 fdf0 	bl	2c0 <memcpy>
    96e0:	2300      	movs	r3, #0
    96e2:	4632      	mov	r2, r6
    96e4:	2104      	movs	r1, #4
    96e6:	4640      	mov	r0, r8
    96e8:	f7fd febd 	bl	7466 <bt_l2cap_send_cb>
	return 0;
    96ec:	2000      	movs	r0, #0
    96ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
    96f2:	f06f 000b 	mvn.w	r0, #11
}
    96f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000096fc <notify_cb>:

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    96fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9700:	b082      	sub	sp, #8
    9702:	4604      	mov	r4, r0
    9704:	460f      	mov	r7, r1
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    9706:	2300      	movs	r3, #0
    9708:	f88d 3000 	strb.w	r3, [sp]
    970c:	f642 1302 	movw	r3, #10498	; 0x2902
    9710:	f8ad 3002 	strh.w	r3, [sp, #2]
    9714:	4669      	mov	r1, sp
    9716:	6800      	ldr	r0, [r0, #0]
    9718:	f7fa f991 	bl	3a3e <bt_uuid_cmp>
    971c:	b938      	cbnz	r0, 972e <notify_cb+0x32>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    971e:	68a2      	ldr	r2, [r4, #8]
    9720:	4b29      	ldr	r3, [pc, #164]	; (97c8 <notify_cb+0xcc>)
    9722:	429a      	cmp	r2, r3
    9724:	d012      	beq.n	974c <notify_cb+0x50>
		return BT_GATT_ITER_CONTINUE;
    9726:	2001      	movs	r0, #1

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    9728:	b002      	add	sp, #8
    972a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    972e:	6820      	ldr	r0, [r4, #0]
    9730:	2300      	movs	r3, #0
    9732:	f88d 3004 	strb.w	r3, [sp, #4]
    9736:	f642 0303 	movw	r3, #10243	; 0x2803
    973a:	f8ad 3006 	strh.w	r3, [sp, #6]
    973e:	a901      	add	r1, sp, #4
    9740:	f7fa f97d 	bl	3a3e <bt_uuid_cmp>
    9744:	2800      	cmp	r0, #0
    9746:	d0ef      	beq.n	9728 <notify_cb+0x2c>
		return BT_GATT_ITER_CONTINUE;
    9748:	2001      	movs	r0, #1
    974a:	e7ed      	b.n	9728 <notify_cb+0x2c>
	ccc = attr->user_data;
    974c:	68e5      	ldr	r5, [r4, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    974e:	2400      	movs	r4, #0
    9750:	e01a      	b.n	9788 <notify_cb+0x8c>
			if (ccc->cfg == sc_ccc_cfg) {
    9752:	6828      	ldr	r0, [r5, #0]
    9754:	4b1d      	ldr	r3, [pc, #116]	; (97cc <notify_cb+0xd0>)
    9756:	4298      	cmp	r0, r3
    9758:	d115      	bne.n	9786 <notify_cb+0x8a>
				sc_save(&ccc->cfg[i], data->params);
    975a:	6979      	ldr	r1, [r7, #20]
    975c:	4430      	add	r0, r6
    975e:	f7ff fee3 	bl	9528 <sc_save>
			continue;
    9762:	e010      	b.n	9786 <notify_cb+0x8a>
		if (data->type == BT_GATT_CCC_INDICATE) {
    9764:	88bb      	ldrh	r3, [r7, #4]
    9766:	2b02      	cmp	r3, #2
    9768:	d024      	beq.n	97b4 <notify_cb+0xb8>
			err = gatt_notify(conn, data->attr->handle, data->data,
    976a:	68b9      	ldr	r1, [r7, #8]
    976c:	8a3b      	ldrh	r3, [r7, #16]
    976e:	68fa      	ldr	r2, [r7, #12]
    9770:	8a09      	ldrh	r1, [r1, #16]
    9772:	f7ff ff97 	bl	96a4 <gatt_notify>
    9776:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    9778:	4640      	mov	r0, r8
    977a:	f7fc ffb9 	bl	66f0 <bt_conn_unref>
		if (err < 0) {
    977e:	2e00      	cmp	r6, #0
    9780:	db1f      	blt.n	97c2 <notify_cb+0xc6>
		data->err = 0;
    9782:	2300      	movs	r3, #0
    9784:	603b      	str	r3, [r7, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    9786:	3401      	adds	r4, #1
    9788:	686b      	ldr	r3, [r5, #4]
    978a:	429c      	cmp	r4, r3
    978c:	d217      	bcs.n	97be <notify_cb+0xc2>
		if (ccc->cfg[i].value != data->type) {
    978e:	6828      	ldr	r0, [r5, #0]
    9790:	0126      	lsls	r6, r4, #4
    9792:	4430      	add	r0, r6
    9794:	8902      	ldrh	r2, [r0, #8]
    9796:	88bb      	ldrh	r3, [r7, #4]
    9798:	429a      	cmp	r2, r3
    979a:	d1f4      	bne.n	9786 <notify_cb+0x8a>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    979c:	3001      	adds	r0, #1
    979e:	f7fc ff4d 	bl	663c <bt_conn_lookup_addr_le>
		if (!conn) {
    97a2:	4680      	mov	r8, r0
    97a4:	2800      	cmp	r0, #0
    97a6:	d0d4      	beq.n	9752 <notify_cb+0x56>
		if (conn->state != BT_CONN_CONNECTED) {
    97a8:	7b03      	ldrb	r3, [r0, #12]
    97aa:	2b03      	cmp	r3, #3
    97ac:	d0da      	beq.n	9764 <notify_cb+0x68>
			bt_conn_unref(conn);
    97ae:	f7fc ff9f 	bl	66f0 <bt_conn_unref>
			continue;
    97b2:	e7e8      	b.n	9786 <notify_cb+0x8a>
			err = gatt_indicate(conn, data->params);
    97b4:	6979      	ldr	r1, [r7, #20]
    97b6:	f7ff ff45 	bl	9644 <gatt_indicate>
    97ba:	4606      	mov	r6, r0
    97bc:	e7dc      	b.n	9778 <notify_cb+0x7c>
	return BT_GATT_ITER_CONTINUE;
    97be:	2001      	movs	r0, #1
    97c0:	e7b2      	b.n	9728 <notify_cb+0x2c>
			return BT_GATT_ITER_STOP;
    97c2:	2000      	movs	r0, #0
    97c4:	e7b0      	b.n	9728 <notify_cb+0x2c>
    97c6:	bf00      	nop
    97c8:	0000955f 	.word	0x0000955f
    97cc:	2000069c 	.word	0x2000069c

000097d0 <sc_restore>:

static void sc_restore(struct bt_gatt_ccc_cfg *cfg)
{
	struct sc_data *data = (struct sc_data *)cfg->data;

	if (!data->start && !data->end) {
    97d0:	8981      	ldrh	r1, [r0, #12]
    97d2:	b909      	cbnz	r1, 97d8 <sc_restore+0x8>
    97d4:	89c3      	ldrh	r3, [r0, #14]
    97d6:	b163      	cbz	r3, 97f2 <sc_restore+0x22>
{
    97d8:	b510      	push	{r4, lr}
    97da:	4604      	mov	r4, r0
	}

	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       data->start, data->end);

	sc_indicate(&gatt_sc, data->start, data->end);
    97dc:	89c2      	ldrh	r2, [r0, #14]
    97de:	4805      	ldr	r0, [pc, #20]	; (97f4 <sc_restore+0x24>)
    97e0:	f7ff fe70 	bl	94c4 <sc_indicate>

	/* Reset config data */
	memset(cfg->data, 0, sizeof(cfg->data));
    97e4:	2204      	movs	r2, #4
    97e6:	2100      	movs	r1, #0
    97e8:	f104 000c 	add.w	r0, r4, #12
    97ec:	f01f ff74 	bl	296d8 <memset>
    97f0:	bd10      	pop	{r4, pc}
    97f2:	4770      	bx	lr
    97f4:	20000644 	.word	0x20000644

000097f8 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    97f8:	6882      	ldr	r2, [r0, #8]
    97fa:	4b16      	ldr	r3, [pc, #88]	; (9854 <connected_cb+0x5c>)
    97fc:	429a      	cmp	r2, r3
    97fe:	d001      	beq.n	9804 <connected_cb+0xc>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    9800:	2001      	movs	r0, #1
    9802:	4770      	bx	lr
{
    9804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9808:	460f      	mov	r7, r1
    980a:	4680      	mov	r8, r0
	ccc = attr->user_data;
    980c:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    980e:	2400      	movs	r4, #0
    9810:	e004      	b.n	981c <connected_cb+0x24>
				sc_restore(&ccc->cfg[i]);
    9812:	4430      	add	r0, r6
    9814:	f7ff ffdc 	bl	97d0 <sc_restore>
    9818:	e019      	b.n	984e <connected_cb+0x56>
	for (i = 0; i < ccc->cfg_len; i++) {
    981a:	3401      	adds	r4, #1
    981c:	686b      	ldr	r3, [r5, #4]
    981e:	429c      	cmp	r4, r3
    9820:	d215      	bcs.n	984e <connected_cb+0x56>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    9822:	6829      	ldr	r1, [r5, #0]
    9824:	0126      	lsls	r6, r4, #4
    9826:	4431      	add	r1, r6
    9828:	3101      	adds	r1, #1
    982a:	4638      	mov	r0, r7
    982c:	f7fc feb0 	bl	6590 <bt_conn_addr_le_cmp>
    9830:	2800      	cmp	r0, #0
    9832:	d1f2      	bne.n	981a <connected_cb+0x22>
		if (ccc->cfg[i].value) {
    9834:	682b      	ldr	r3, [r5, #0]
    9836:	4433      	add	r3, r6
    9838:	891b      	ldrh	r3, [r3, #8]
    983a:	2b00      	cmp	r3, #0
    983c:	d0ed      	beq.n	981a <connected_cb+0x22>
			gatt_ccc_changed(attr, ccc);
    983e:	4629      	mov	r1, r5
    9840:	4640      	mov	r0, r8
    9842:	f7ff fdf9 	bl	9438 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    9846:	6828      	ldr	r0, [r5, #0]
    9848:	4b03      	ldr	r3, [pc, #12]	; (9858 <connected_cb+0x60>)
    984a:	4298      	cmp	r0, r3
    984c:	d0e1      	beq.n	9812 <connected_cb+0x1a>
}
    984e:	2001      	movs	r0, #1
    9850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9854:	0000955f 	.word	0x0000955f
    9858:	2000069c 	.word	0x2000069c

0000985c <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    985c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    9860:	6882      	ldr	r2, [r0, #8]
    9862:	4b29      	ldr	r3, [pc, #164]	; (9908 <disconnected_cb+0xac>)
    9864:	429a      	cmp	r2, r3
    9866:	d002      	beq.n	986e <disconnected_cb+0x12>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    9868:	2001      	movs	r0, #1
    986a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
    986e:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    9870:	892b      	ldrh	r3, [r5, #8]
    9872:	2b00      	cmp	r3, #0
    9874:	d0f8      	beq.n	9868 <disconnected_cb+0xc>
    9876:	4688      	mov	r8, r1
    9878:	4607      	mov	r7, r0
    987a:	2400      	movs	r4, #0
    987c:	e012      	b.n	98a4 <disconnected_cb+0x48>
					bt_conn_unref(tmp);
    987e:	f7fc ff37 	bl	66f0 <bt_conn_unref>
					return BT_GATT_ITER_CONTINUE;
    9882:	e7f1      	b.n	9868 <disconnected_cb+0xc>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    9884:	f108 0948 	add.w	r9, r8, #72	; 0x48
    9888:	4648      	mov	r0, r9
    988a:	f7fc f99f 	bl	5bcc <bt_addr_le_is_bonded>
    988e:	bb28      	cbnz	r0, 98dc <disconnected_cb+0x80>
				ccc->cfg[i].valid = false;
    9890:	682b      	ldr	r3, [r5, #0]
    9892:	2100      	movs	r1, #0
    9894:	5599      	strb	r1, [r3, r6]
				memset(&ccc->cfg[i].value, 0,
    9896:	6828      	ldr	r0, [r5, #0]
    9898:	4430      	add	r0, r6
    989a:	2202      	movs	r2, #2
    989c:	3008      	adds	r0, #8
    989e:	f01f ff1b 	bl	296d8 <memset>
	for (i = 0; i < ccc->cfg_len; i++) {
    98a2:	3401      	adds	r4, #1
    98a4:	686b      	ldr	r3, [r5, #4]
    98a6:	429c      	cmp	r4, r3
    98a8:	d220      	bcs.n	98ec <disconnected_cb+0x90>
		if (!ccc->cfg[i].value) {
    98aa:	6829      	ldr	r1, [r5, #0]
    98ac:	0126      	lsls	r6, r4, #4
    98ae:	4431      	add	r1, r6
    98b0:	890b      	ldrh	r3, [r1, #8]
    98b2:	2b00      	cmp	r3, #0
    98b4:	d0f5      	beq.n	98a2 <disconnected_cb+0x46>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    98b6:	3101      	adds	r1, #1
    98b8:	4640      	mov	r0, r8
    98ba:	f7fc fe69 	bl	6590 <bt_conn_addr_le_cmp>
    98be:	2800      	cmp	r0, #0
    98c0:	d0e0      	beq.n	9884 <disconnected_cb+0x28>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    98c2:	6828      	ldr	r0, [r5, #0]
    98c4:	4430      	add	r0, r6
    98c6:	3001      	adds	r0, #1
    98c8:	f7fc feb8 	bl	663c <bt_conn_lookup_addr_le>
			if (tmp) {
    98cc:	2800      	cmp	r0, #0
    98ce:	d0e8      	beq.n	98a2 <disconnected_cb+0x46>
				if (tmp->state == BT_CONN_CONNECTED) {
    98d0:	7b02      	ldrb	r2, [r0, #12]
    98d2:	2a03      	cmp	r2, #3
    98d4:	d0d3      	beq.n	987e <disconnected_cb+0x22>
				bt_conn_unref(tmp);
    98d6:	f7fc ff0b 	bl	66f0 <bt_conn_unref>
    98da:	e7e2      	b.n	98a2 <disconnected_cb+0x46>
				bt_addr_le_copy(&ccc->cfg[i].peer,
    98dc:	6828      	ldr	r0, [r5, #0]
    98de:	4430      	add	r0, r6
    98e0:	2207      	movs	r2, #7
    98e2:	4649      	mov	r1, r9
    98e4:	3001      	adds	r0, #1
    98e6:	f7f6 fceb 	bl	2c0 <memcpy>
    98ea:	e7da      	b.n	98a2 <disconnected_cb+0x46>
	memset(&ccc->value, 0, sizeof(ccc->value));
    98ec:	2202      	movs	r2, #2
    98ee:	2100      	movs	r1, #0
    98f0:	f105 0008 	add.w	r0, r5, #8
    98f4:	f01f fef0 	bl	296d8 <memset>
	if (ccc->cfg_changed) {
    98f8:	68eb      	ldr	r3, [r5, #12]
    98fa:	2b00      	cmp	r3, #0
    98fc:	d0b4      	beq.n	9868 <disconnected_cb+0xc>
		ccc->cfg_changed(attr, ccc->value);
    98fe:	8929      	ldrh	r1, [r5, #8]
    9900:	4638      	mov	r0, r7
    9902:	4798      	blx	r3
    9904:	e7b0      	b.n	9868 <disconnected_cb+0xc>
    9906:	bf00      	nop
    9908:	0000955f 	.word	0x0000955f

0000990c <bt_gatt_init>:
{
    990c:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    990e:	4805      	ldr	r0, [pc, #20]	; (9924 <bt_gatt_init+0x18>)
    9910:	f7ff fd3c 	bl	938c <gatt_register>
	gatt_register(&gatt_svc);
    9914:	4804      	ldr	r0, [pc, #16]	; (9928 <bt_gatt_init+0x1c>)
    9916:	f7ff fd39 	bl	938c <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    991a:	4904      	ldr	r1, [pc, #16]	; (992c <bt_gatt_init+0x20>)
    991c:	4804      	ldr	r0, [pc, #16]	; (9930 <bt_gatt_init+0x24>)
    991e:	f01f fcd9 	bl	292d4 <k_delayed_work_init>
    9922:	bd08      	pop	{r3, pc}
    9924:	2000b9cc 	.word	0x2000b9cc
    9928:	2000ba28 	.word	0x2000ba28
    992c:	00009c01 	.word	0x00009c01
    9930:	20000670 	.word	0x20000670

00009934 <bt_gatt_service_register>:
{
    9934:	b510      	push	{r4, lr}
    9936:	b082      	sub	sp, #8
    9938:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    993a:	6803      	ldr	r3, [r0, #0]
    993c:	6818      	ldr	r0, [r3, #0]
    993e:	2300      	movs	r3, #0
    9940:	f88d 3000 	strb.w	r3, [sp]
    9944:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    9948:	f8ad 3002 	strh.w	r3, [sp, #2]
    994c:	4669      	mov	r1, sp
    994e:	f7fa f876 	bl	3a3e <bt_uuid_cmp>
    9952:	b300      	cbz	r0, 9996 <bt_gatt_service_register+0x62>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    9954:	6823      	ldr	r3, [r4, #0]
    9956:	6818      	ldr	r0, [r3, #0]
    9958:	2300      	movs	r3, #0
    995a:	f88d 3004 	strb.w	r3, [sp, #4]
    995e:	f641 0301 	movw	r3, #6145	; 0x1801
    9962:	f8ad 3006 	strh.w	r3, [sp, #6]
    9966:	a901      	add	r1, sp, #4
    9968:	f7fa f869 	bl	3a3e <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    996c:	b1b0      	cbz	r0, 999c <bt_gatt_service_register+0x68>
	err = gatt_register(svc);
    996e:	4620      	mov	r0, r4
    9970:	f7ff fd0c 	bl	938c <gatt_register>
	if (err < 0) {
    9974:	2800      	cmp	r0, #0
    9976:	db0c      	blt.n	9992 <bt_gatt_service_register+0x5e>
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    9978:	6821      	ldr	r1, [r4, #0]
		    svc->attrs[svc->attr_count - 1].handle);
    997a:	88a2      	ldrh	r2, [r4, #4]
    997c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9980:	0093      	lsls	r3, r2, #2
    9982:	3b14      	subs	r3, #20
    9984:	440b      	add	r3, r1
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    9986:	8a1a      	ldrh	r2, [r3, #16]
    9988:	8a09      	ldrh	r1, [r1, #16]
    998a:	4806      	ldr	r0, [pc, #24]	; (99a4 <bt_gatt_service_register+0x70>)
    998c:	f7ff fd9a 	bl	94c4 <sc_indicate>
	return 0;
    9990:	2000      	movs	r0, #0
}
    9992:	b002      	add	sp, #8
    9994:	bd10      	pop	{r4, pc}
		return -EALREADY;
    9996:	f06f 0077 	mvn.w	r0, #119	; 0x77
    999a:	e7fa      	b.n	9992 <bt_gatt_service_register+0x5e>
    999c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    99a0:	e7f7      	b.n	9992 <bt_gatt_service_register+0x5e>
    99a2:	bf00      	nop
    99a4:	20000644 	.word	0x20000644

000099a8 <bt_gatt_attr_read>:
{
    99a8:	b510      	push	{r4, lr}
    99aa:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    99ae:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
    99b2:	42a1      	cmp	r1, r4
    99b4:	d80c      	bhi.n	99d0 <bt_gatt_attr_read+0x28>
    99b6:	4610      	mov	r0, r2
	len = min(buf_len, value_len - offset);
    99b8:	1a64      	subs	r4, r4, r1
    99ba:	42a3      	cmp	r3, r4
    99bc:	bfa8      	it	ge
    99be:	4623      	movge	r3, r4
    99c0:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    99c2:	4622      	mov	r2, r4
    99c4:	9b03      	ldr	r3, [sp, #12]
    99c6:	4419      	add	r1, r3
    99c8:	f7f6 fc7a 	bl	2c0 <memcpy>
}
    99cc:	4620      	mov	r0, r4
    99ce:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    99d0:	f06f 0406 	mvn.w	r4, #6
    99d4:	e7fa      	b.n	99cc <bt_gatt_attr_read+0x24>

000099d6 <read_appearance>:
{
    99d6:	b530      	push	{r4, r5, lr}
    99d8:	b087      	sub	sp, #28
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    99da:	ac06      	add	r4, sp, #24
    99dc:	2500      	movs	r5, #0
    99de:	f824 5d02 	strh.w	r5, [r4, #-2]!
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    99e2:	2502      	movs	r5, #2
    99e4:	9502      	str	r5, [sp, #8]
    99e6:	9401      	str	r4, [sp, #4]
    99e8:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    99ec:	9400      	str	r4, [sp, #0]
    99ee:	f7ff ffdb 	bl	99a8 <bt_gatt_attr_read>
}
    99f2:	b007      	add	sp, #28
    99f4:	bd30      	pop	{r4, r5, pc}
	...

000099f8 <read_name>:
{
    99f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99fc:	b084      	sub	sp, #16
    99fe:	4605      	mov	r5, r0
    9a00:	460e      	mov	r6, r1
    9a02:	4617      	mov	r7, r2
    9a04:	4698      	mov	r8, r3
				 strlen(gap_name));
    9a06:	4c09      	ldr	r4, [pc, #36]	; (9a2c <read_name+0x34>)
    9a08:	4620      	mov	r0, r4
    9a0a:	f7f6 fe79 	bl	700 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    9a0e:	b280      	uxth	r0, r0
    9a10:	9002      	str	r0, [sp, #8]
    9a12:	9401      	str	r4, [sp, #4]
    9a14:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    9a18:	9300      	str	r3, [sp, #0]
    9a1a:	4643      	mov	r3, r8
    9a1c:	463a      	mov	r2, r7
    9a1e:	4631      	mov	r1, r6
    9a20:	4628      	mov	r0, r5
    9a22:	f7ff ffc1 	bl	99a8 <bt_gatt_attr_read>
}
    9a26:	b004      	add	sp, #16
    9a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a2c:	0002f988 	.word	0x0002f988

00009a30 <bt_gatt_attr_read_service>:
{
    9a30:	b570      	push	{r4, r5, r6, lr}
    9a32:	b086      	sub	sp, #24
    9a34:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
    9a38:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
    9a3a:	7826      	ldrb	r6, [r4, #0]
    9a3c:	b146      	cbz	r6, 9a50 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
    9a3e:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    9a40:	2610      	movs	r6, #16
    9a42:	9602      	str	r6, [sp, #8]
    9a44:	9401      	str	r4, [sp, #4]
    9a46:	9500      	str	r5, [sp, #0]
    9a48:	f7ff ffae 	bl	99a8 <bt_gatt_attr_read>
}
    9a4c:	b006      	add	sp, #24
    9a4e:	bd70      	pop	{r4, r5, r6, pc}
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    9a50:	8866      	ldrh	r6, [r4, #2]
    9a52:	ac06      	add	r4, sp, #24
    9a54:	f824 6d02 	strh.w	r6, [r4, #-2]!
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
    9a58:	2602      	movs	r6, #2
    9a5a:	9602      	str	r6, [sp, #8]
    9a5c:	9401      	str	r4, [sp, #4]
    9a5e:	9500      	str	r5, [sp, #0]
    9a60:	f7ff ffa2 	bl	99a8 <bt_gatt_attr_read>
    9a64:	e7f2      	b.n	9a4c <bt_gatt_attr_read_service+0x1c>

00009a66 <bt_gatt_attr_read_ccc>:
{
    9a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9a6a:	b086      	sub	sp, #24
    9a6c:	4607      	mov	r7, r0
    9a6e:	4688      	mov	r8, r1
    9a70:	4691      	mov	r9, r2
    9a72:	469a      	mov	sl, r3
	struct _bt_gatt_ccc *ccc = attr->user_data;
    9a74:	68cd      	ldr	r5, [r1, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    9a76:	2400      	movs	r4, #0
    9a78:	686b      	ldr	r3, [r5, #4]
    9a7a:	429c      	cmp	r4, r3
    9a7c:	d20e      	bcs.n	9a9c <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    9a7e:	6829      	ldr	r1, [r5, #0]
    9a80:	0126      	lsls	r6, r4, #4
    9a82:	4431      	add	r1, r6
    9a84:	3101      	adds	r1, #1
    9a86:	4638      	mov	r0, r7
    9a88:	f7fc fd82 	bl	6590 <bt_conn_addr_le_cmp>
    9a8c:	b108      	cbz	r0, 9a92 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    9a8e:	3401      	adds	r4, #1
    9a90:	e7f2      	b.n	9a78 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    9a92:	682b      	ldr	r3, [r5, #0]
    9a94:	441e      	add	r6, r3
    9a96:	8933      	ldrh	r3, [r6, #8]
    9a98:	f8ad 3016 	strh.w	r3, [sp, #22]
	if (i == ccc->cfg_len) {
    9a9c:	686b      	ldr	r3, [r5, #4]
    9a9e:	429c      	cmp	r4, r3
    9aa0:	d010      	beq.n	9ac4 <bt_gatt_attr_read_ccc+0x5e>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    9aa2:	2302      	movs	r3, #2
    9aa4:	9302      	str	r3, [sp, #8]
    9aa6:	f10d 0316 	add.w	r3, sp, #22
    9aaa:	9301      	str	r3, [sp, #4]
    9aac:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    9ab0:	9300      	str	r3, [sp, #0]
    9ab2:	4653      	mov	r3, sl
    9ab4:	464a      	mov	r2, r9
    9ab6:	4641      	mov	r1, r8
    9ab8:	4638      	mov	r0, r7
    9aba:	f7ff ff75 	bl	99a8 <bt_gatt_attr_read>
}
    9abe:	b006      	add	sp, #24
    9ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		value = 0x0000;
    9ac4:	2300      	movs	r3, #0
    9ac6:	f8ad 3016 	strh.w	r3, [sp, #22]
    9aca:	e7ea      	b.n	9aa2 <bt_gatt_attr_read_ccc+0x3c>

00009acc <bt_gatt_foreach_attr>:
{
    9acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9ad0:	4606      	mov	r6, r0
    9ad2:	460f      	mov	r7, r1
    9ad4:	4690      	mov	r8, r2
    9ad6:	4699      	mov	r9, r3
	return list->head;
    9ad8:	4b15      	ldr	r3, [pc, #84]	; (9b30 <bt_gatt_foreach_attr+0x64>)
    9ada:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    9adc:	b10d      	cbz	r5, 9ae2 <bt_gatt_foreach_attr+0x16>
    9ade:	3d08      	subs	r5, #8
    9ae0:	e01e      	b.n	9b20 <bt_gatt_foreach_attr+0x54>
    9ae2:	2500      	movs	r5, #0
    9ae4:	e01c      	b.n	9b20 <bt_gatt_foreach_attr+0x54>
		for (i = 0; i < svc->attr_count; i++) {
    9ae6:	3401      	adds	r4, #1
    9ae8:	88ab      	ldrh	r3, [r5, #4]
    9aea:	429c      	cmp	r4, r3
    9aec:	da0f      	bge.n	9b0e <bt_gatt_foreach_attr+0x42>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    9aee:	6828      	ldr	r0, [r5, #0]
    9af0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    9af4:	0093      	lsls	r3, r2, #2
    9af6:	4418      	add	r0, r3
			if (attr->handle < start_handle ||
    9af8:	8a03      	ldrh	r3, [r0, #16]
    9afa:	42b3      	cmp	r3, r6
    9afc:	d3f3      	bcc.n	9ae6 <bt_gatt_foreach_attr+0x1a>
    9afe:	42bb      	cmp	r3, r7
    9b00:	d8f1      	bhi.n	9ae6 <bt_gatt_foreach_attr+0x1a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    9b02:	4649      	mov	r1, r9
    9b04:	47c0      	blx	r8
    9b06:	2800      	cmp	r0, #0
    9b08:	d1ed      	bne.n	9ae6 <bt_gatt_foreach_attr+0x1a>
    9b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9b0e:	f115 0308 	adds.w	r3, r5, #8
    9b12:	d009      	beq.n	9b28 <bt_gatt_foreach_attr+0x5c>
	return node->next;
    9b14:	68aa      	ldr	r2, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    9b16:	b14a      	cbz	r2, 9b2c <bt_gatt_foreach_attr+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9b18:	b103      	cbz	r3, 9b1c <bt_gatt_foreach_attr+0x50>
	return node->next;
    9b1a:	68ab      	ldr	r3, [r5, #8]
    9b1c:	f1a3 0508 	sub.w	r5, r3, #8
    9b20:	2d00      	cmp	r5, #0
    9b22:	d0f2      	beq.n	9b0a <bt_gatt_foreach_attr+0x3e>
    9b24:	2400      	movs	r4, #0
    9b26:	e7df      	b.n	9ae8 <bt_gatt_foreach_attr+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9b28:	461a      	mov	r2, r3
    9b2a:	e7f4      	b.n	9b16 <bt_gatt_foreach_attr+0x4a>
    9b2c:	2500      	movs	r5, #0
    9b2e:	e7f7      	b.n	9b20 <bt_gatt_foreach_attr+0x54>
    9b30:	2000063c 	.word	0x2000063c

00009b34 <bt_gatt_attr_next>:
{
    9b34:	b500      	push	{lr}
    9b36:	b083      	sub	sp, #12
	struct bt_gatt_attr *next = NULL;
    9b38:	ab02      	add	r3, sp, #8
    9b3a:	2200      	movs	r2, #0
    9b3c:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    9b40:	8a00      	ldrh	r0, [r0, #16]
    9b42:	3001      	adds	r0, #1
    9b44:	b280      	uxth	r0, r0
    9b46:	4a04      	ldr	r2, [pc, #16]	; (9b58 <bt_gatt_attr_next+0x24>)
    9b48:	4601      	mov	r1, r0
    9b4a:	f7ff ffbf 	bl	9acc <bt_gatt_foreach_attr>
}
    9b4e:	9801      	ldr	r0, [sp, #4]
    9b50:	b003      	add	sp, #12
    9b52:	f85d fb04 	ldr.w	pc, [sp], #4
    9b56:	bf00      	nop
    9b58:	00009433 	.word	0x00009433

00009b5c <bt_gatt_attr_read_chrc>:
{
    9b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b60:	b08a      	sub	sp, #40	; 0x28
    9b62:	4606      	mov	r6, r0
    9b64:	460c      	mov	r4, r1
    9b66:	4617      	mov	r7, r2
    9b68:	4698      	mov	r8, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
    9b6a:	68cd      	ldr	r5, [r1, #12]
	pdu.properties = chrc->properties;
    9b6c:	792b      	ldrb	r3, [r5, #4]
    9b6e:	f88d 3014 	strb.w	r3, [sp, #20]
	next = bt_gatt_attr_next(attr);
    9b72:	4608      	mov	r0, r1
    9b74:	f7ff ffde 	bl	9b34 <bt_gatt_attr_next>
	if (!next) {
    9b78:	b1c0      	cbz	r0, 9bac <bt_gatt_attr_read_chrc+0x50>
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    9b7a:	8a03      	ldrh	r3, [r0, #16]
    9b7c:	f8ad 3015 	strh.w	r3, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    9b80:	6829      	ldr	r1, [r5, #0]
    9b82:	780b      	ldrb	r3, [r1, #0]
    9b84:	b9c3      	cbnz	r3, 9bb8 <bt_gatt_attr_read_chrc+0x5c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    9b86:	884b      	ldrh	r3, [r1, #2]
    9b88:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    9b8c:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    9b8e:	9302      	str	r3, [sp, #8]
    9b90:	ab05      	add	r3, sp, #20
    9b92:	9301      	str	r3, [sp, #4]
    9b94:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    9b98:	9300      	str	r3, [sp, #0]
    9b9a:	4643      	mov	r3, r8
    9b9c:	463a      	mov	r2, r7
    9b9e:	4621      	mov	r1, r4
    9ba0:	4630      	mov	r0, r6
    9ba2:	f7ff ff01 	bl	99a8 <bt_gatt_attr_read>
}
    9ba6:	b00a      	add	sp, #40	; 0x28
    9ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu.value_handle = 0x0000;
    9bac:	2300      	movs	r3, #0
    9bae:	f88d 3015 	strb.w	r3, [sp, #21]
    9bb2:	f88d 3016 	strb.w	r3, [sp, #22]
    9bb6:	e7e3      	b.n	9b80 <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    9bb8:	2210      	movs	r2, #16
    9bba:	3101      	adds	r1, #1
    9bbc:	f10d 0017 	add.w	r0, sp, #23
    9bc0:	f7f6 fb7e 	bl	2c0 <memcpy>
		value_len += 16;
    9bc4:	2313      	movs	r3, #19
    9bc6:	e7e2      	b.n	9b8e <bt_gatt_attr_read_chrc+0x32>

00009bc8 <bt_gatt_indicate>:
{
    9bc8:	b500      	push	{lr}
    9bca:	b087      	sub	sp, #28
	if (conn) {
    9bcc:	b120      	cbz	r0, 9bd8 <bt_gatt_indicate+0x10>
		return gatt_indicate(conn, params);
    9bce:	f7ff fd39 	bl	9644 <gatt_indicate>
}
    9bd2:	b007      	add	sp, #28
    9bd4:	f85d fb04 	ldr.w	pc, [sp], #4
	nfy.err = -ENOTCONN;
    9bd8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    9bdc:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    9bde:	2302      	movs	r3, #2
    9be0:	f8ad 3004 	strh.w	r3, [sp, #4]
	nfy.params = params;
    9be4:	9105      	str	r1, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    9be6:	6988      	ldr	r0, [r1, #24]
    9be8:	466b      	mov	r3, sp
    9bea:	4a04      	ldr	r2, [pc, #16]	; (9bfc <bt_gatt_indicate+0x34>)
    9bec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9bf0:	8a00      	ldrh	r0, [r0, #16]
    9bf2:	f7ff ff6b 	bl	9acc <bt_gatt_foreach_attr>
	return nfy.err;
    9bf6:	9800      	ldr	r0, [sp, #0]
    9bf8:	e7eb      	b.n	9bd2 <bt_gatt_indicate+0xa>
    9bfa:	bf00      	nop
    9bfc:	000096fd 	.word	0x000096fd

00009c00 <sc_process>:
{
    9c00:	b510      	push	{r4, lr}
    9c02:	b082      	sub	sp, #8
    9c04:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    9c06:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    9c0a:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    9c0e:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    9c12:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    9c16:	f1a0 012c 	sub.w	r1, r0, #44	; 0x2c
    9c1a:	f100 0428 	add.w	r4, r0, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9c1e:	f3bf 8f5b 	dmb	ish
    9c22:	e854 2f00 	ldrex	r2, [r4]
    9c26:	f022 0201 	bic.w	r2, r2, #1
    9c2a:	e844 2000 	strex	r0, r2, [r4]
    9c2e:	2800      	cmp	r0, #0
    9c30:	d1f7      	bne.n	9c22 <sc_process+0x22>
    9c32:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    9c36:	2000      	movs	r0, #0
    9c38:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0;
    9c3c:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    9c40:	4a0e      	ldr	r2, [pc, #56]	; (9c7c <sc_process+0x7c>)
    9c42:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    9c46:	4a0e      	ldr	r2, [pc, #56]	; (9c80 <sc_process+0x80>)
    9c48:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    9c4c:	aa01      	add	r2, sp, #4
    9c4e:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    9c52:	2204      	movs	r2, #4
    9c54:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    9c58:	f7ff ffb6 	bl	9bc8 <bt_gatt_indicate>
    9c5c:	b108      	cbz	r0, 9c62 <sc_process+0x62>
}
    9c5e:	b002      	add	sp, #8
    9c60:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9c62:	f3bf 8f5b 	dmb	ish
    9c66:	e854 3f00 	ldrex	r3, [r4]
    9c6a:	f043 0302 	orr.w	r3, r3, #2
    9c6e:	e844 3200 	strex	r2, r3, [r4]
    9c72:	2a00      	cmp	r2, #0
    9c74:	d1f7      	bne.n	9c66 <sc_process+0x66>
    9c76:	f3bf 8f5b 	dmb	ish
    9c7a:	e7f0      	b.n	9c5e <sc_process+0x5e>
    9c7c:	2000ba00 	.word	0x2000ba00
    9c80:	00009479 	.word	0x00009479

00009c84 <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    9c84:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    9c86:	4603      	mov	r3, r0
    9c88:	4a03      	ldr	r2, [pc, #12]	; (9c98 <bt_gatt_connected+0x14>)
    9c8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9c8e:	2001      	movs	r0, #1
    9c90:	f7ff ff1c 	bl	9acc <bt_gatt_foreach_attr>
    9c94:	bd08      	pop	{r3, pc}
    9c96:	bf00      	nop
    9c98:	000097f9 	.word	0x000097f9

00009c9c <bt_gatt_disconnected>:
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    9c9c:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    9c9e:	4603      	mov	r3, r0
    9ca0:	4a03      	ldr	r2, [pc, #12]	; (9cb0 <bt_gatt_disconnected+0x14>)
    9ca2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9ca6:	2001      	movs	r0, #1
    9ca8:	f7ff ff10 	bl	9acc <bt_gatt_foreach_attr>
    9cac:	bd08      	pop	{r3, pc}
    9cae:	bf00      	nop
    9cb0:	0000985d 	.word	0x0000985d

00009cb4 <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    9cb4:	4b11      	ldr	r3, [pc, #68]	; (9cfc <get_io_capa+0x48>)
    9cb6:	681b      	ldr	r3, [r3, #0]
    9cb8:	b1db      	cbz	r3, 9cf2 <get_io_capa+0x3e>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    9cba:	681a      	ldr	r2, [r3, #0]
    9cbc:	b152      	cbz	r2, 9cd4 <get_io_capa+0x20>
    9cbe:	6859      	ldr	r1, [r3, #4]
    9cc0:	b141      	cbz	r1, 9cd4 <get_io_capa+0x20>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    9cc2:	6899      	ldr	r1, [r3, #8]
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    9cc4:	b109      	cbz	r1, 9cca <get_io_capa+0x16>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    9cc6:	2004      	movs	r0, #4
    9cc8:	4770      	bx	lr
	    (bt_auth->passkey_confirm || !sc_supported)) {
    9cca:	490d      	ldr	r1, [pc, #52]	; (9d00 <get_io_capa+0x4c>)
    9ccc:	7809      	ldrb	r1, [r1, #0]
    9cce:	b909      	cbnz	r1, 9cd4 <get_io_capa+0x20>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    9cd0:	2004      	movs	r0, #4
    9cd2:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    9cd4:	490a      	ldr	r1, [pc, #40]	; (9d00 <get_io_capa+0x4c>)
    9cd6:	7809      	ldrb	r1, [r1, #0]
    9cd8:	b121      	cbz	r1, 9ce4 <get_io_capa+0x30>
    9cda:	b11a      	cbz	r2, 9ce4 <get_io_capa+0x30>
	    bt_auth->passkey_confirm) {
    9cdc:	6899      	ldr	r1, [r3, #8]
	if (sc_supported && bt_auth->passkey_display &&
    9cde:	b109      	cbz	r1, 9ce4 <get_io_capa+0x30>
		return BT_SMP_IO_DISPLAY_YESNO;
    9ce0:	2001      	movs	r0, #1
    9ce2:	4770      	bx	lr
	}

	if (bt_auth->passkey_entry) {
    9ce4:	685b      	ldr	r3, [r3, #4]
    9ce6:	b10b      	cbz	r3, 9cec <get_io_capa+0x38>
		return BT_SMP_IO_KEYBOARD_ONLY;
    9ce8:	2002      	movs	r0, #2
    9cea:	4770      	bx	lr
	}

	if (bt_auth->passkey_display) {
    9cec:	b11a      	cbz	r2, 9cf6 <get_io_capa+0x42>
		return BT_SMP_IO_DISPLAY_ONLY;
    9cee:	2000      	movs	r0, #0
    9cf0:	4770      	bx	lr
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    9cf2:	2003      	movs	r0, #3
    9cf4:	4770      	bx	lr
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    9cf6:	2003      	movs	r0, #3
}
    9cf8:	4770      	bx	lr
    9cfa:	bf00      	nop
    9cfc:	200028a8 	.word	0x200028a8
    9d00:	200008a4 	.word	0x200008a4

00009d04 <get_pair_method>:

static u8_t get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    9d04:	2904      	cmp	r1, #4
    9d06:	d811      	bhi.n	9d2c <get_pair_method+0x28>

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    9d08:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    9d0c:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    9d10:	4313      	orrs	r3, r2
    9d12:	f013 0f04 	tst.w	r3, #4
    9d16:	d00b      	beq.n	9d30 <get_pair_method+0x2c>
{
    9d18:	b510      	push	{r4, lr}
    9d1a:	460c      	mov	r4, r1
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
    9d1c:	f7ff ffca 	bl	9cb4 <get_io_capa>
    9d20:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    9d24:	4c03      	ldr	r4, [pc, #12]	; (9d34 <get_pair_method+0x30>)
    9d26:	4421      	add	r1, r4
    9d28:	5c08      	ldrb	r0, [r1, r0]
    9d2a:	bd10      	pop	{r4, pc}
		return JUST_WORKS;
    9d2c:	2000      	movs	r0, #0
    9d2e:	4770      	bx	lr
		return JUST_WORKS;
    9d30:	2000      	movs	r0, #0
    9d32:	4770      	bx	lr
    9d34:	0002f9ac 	.word	0x0002f9ac

00009d38 <get_encryption_key_size>:
	/*
	 * The smaller value of the initiating and responding devices maximum
	 * encryption key length parameters shall be used as the encryption key
	 * size.
	 */
	return min(req->max_key_size, rsp->max_key_size);
    9d38:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    9d3c:	f890 00a9 	ldrb.w	r0, [r0, #169]	; 0xa9
}
    9d40:	4290      	cmp	r0, r2
    9d42:	bf28      	it	cs
    9d44:	4610      	movcs	r0, r2
    9d46:	4770      	bx	lr

00009d48 <xor_128>:
	return 0;
}

#if !defined(CONFIG_BT_SMP_SC_ONLY)
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
    9d48:	b430      	push	{r4, r5}
	size_t len = 16;
    9d4a:	2310      	movs	r3, #16

	while (len--) {
    9d4c:	e007      	b.n	9d5e <xor_128+0x16>
		*r++ = *p++ ^ *q++;
    9d4e:	7803      	ldrb	r3, [r0, #0]
    9d50:	780d      	ldrb	r5, [r1, #0]
    9d52:	406b      	eors	r3, r5
    9d54:	7013      	strb	r3, [r2, #0]
	while (len--) {
    9d56:	4623      	mov	r3, r4
		*r++ = *p++ ^ *q++;
    9d58:	3201      	adds	r2, #1
    9d5a:	3101      	adds	r1, #1
    9d5c:	3001      	adds	r0, #1
	while (len--) {
    9d5e:	1e5c      	subs	r4, r3, #1
    9d60:	2b00      	cmp	r3, #0
    9d62:	d1f4      	bne.n	9d4e <xor_128+0x6>
	}
}
    9d64:	bc30      	pop	{r4, r5}
    9d66:	4770      	bx	lr

00009d68 <legacy_get_pair_method>:
static u8_t legacy_get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;
	u8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    9d68:	2904      	cmp	r1, #4
    9d6a:	d819      	bhi.n	9da0 <legacy_get_pair_method+0x38>
{
    9d6c:	b538      	push	{r3, r4, r5, lr}

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    9d6e:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    9d72:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    9d76:	4313      	orrs	r3, r2
    9d78:	f013 0f04 	tst.w	r3, #4
    9d7c:	d012      	beq.n	9da4 <legacy_get_pair_method+0x3c>
    9d7e:	460c      	mov	r4, r1
    9d80:	4605      	mov	r5, r0
		return JUST_WORKS;
	}

	method = gen_method_legacy[remote_io][get_io_capa()];
    9d82:	f7ff ff97 	bl	9cb4 <get_io_capa>
    9d86:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    9d8a:	4c08      	ldr	r4, [pc, #32]	; (9dac <legacy_get_pair_method+0x44>)
    9d8c:	4421      	add	r1, r4
    9d8e:	5c08      	ldrb	r0, [r1, r0]

	/* if both sides have KeyboardDisplay capabilities, initiator displays
	 * and responder inputs
	 */
	if (method == PASSKEY_ROLE) {
    9d90:	2804      	cmp	r0, #4
    9d92:	d000      	beq.n	9d96 <legacy_get_pair_method+0x2e>
			method = PASSKEY_INPUT;
		}
	}

	return method;
}
    9d94:	bd38      	pop	{r3, r4, r5, pc}
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9d96:	682b      	ldr	r3, [r5, #0]
    9d98:	78db      	ldrb	r3, [r3, #3]
    9d9a:	b92b      	cbnz	r3, 9da8 <legacy_get_pair_method+0x40>
			method = PASSKEY_DISPLAY;
    9d9c:	2002      	movs	r0, #2
    9d9e:	bd38      	pop	{r3, r4, r5, pc}
		return JUST_WORKS;
    9da0:	2000      	movs	r0, #0
    9da2:	4770      	bx	lr
		return JUST_WORKS;
    9da4:	2000      	movs	r0, #0
    9da6:	bd38      	pop	{r3, r4, r5, pc}
			method = PASSKEY_INPUT;
    9da8:	2001      	movs	r0, #1
    9daa:	e7f3      	b.n	9d94 <legacy_get_pair_method+0x2c>
    9dac:	0002f990 	.word	0x0002f990

00009db0 <get_auth>:

	return 0;
}

static u8_t get_auth(u8_t auth)
{
    9db0:	b510      	push	{r4, lr}
	if (sc_supported) {
    9db2:	4b09      	ldr	r3, [pc, #36]	; (9dd8 <get_auth+0x28>)
    9db4:	781b      	ldrb	r3, [r3, #0]
    9db6:	b143      	cbz	r3, 9dca <get_auth+0x1a>
		auth &= BT_SMP_AUTH_MASK_SC;
    9db8:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    9dbc:	f7ff ff7a 	bl	9cb4 <get_io_capa>
    9dc0:	2803      	cmp	r0, #3
    9dc2:	d005      	beq.n	9dd0 <get_auth+0x20>
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
    9dc4:	f044 0004 	orr.w	r0, r4, #4
	}

	return auth;
}
    9dc8:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    9dca:	f000 0407 	and.w	r4, r0, #7
    9dce:	e7f5      	b.n	9dbc <get_auth+0xc>
		auth &= ~(BT_SMP_AUTH_MITM);
    9dd0:	f004 000b 	and.w	r0, r4, #11
    9dd4:	bd10      	pop	{r4, pc}
    9dd6:	bf00      	nop
    9dd8:	200008a4 	.word	0x200008a4

00009ddc <sec_level_reachable>:

static bool sec_level_reachable(struct bt_conn *conn)
{
    9ddc:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    9dde:	7a43      	ldrb	r3, [r0, #9]
    9de0:	3b01      	subs	r3, #1
    9de2:	2b03      	cmp	r3, #3
    9de4:	d818      	bhi.n	9e18 <sec_level_reachable+0x3c>
    9de6:	e8df f003 	tbb	[pc, r3]
    9dea:	0202      	.short	0x0202
    9dec:	0a04      	.short	0x0a04
	case BT_SECURITY_LOW:
	case BT_SECURITY_MEDIUM:
		return true;
    9dee:	2001      	movs	r0, #1
    9df0:	bd08      	pop	{r3, pc}
	case BT_SECURITY_HIGH:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    9df2:	f7ff ff5f 	bl	9cb4 <get_io_capa>
    9df6:	3803      	subs	r0, #3
    9df8:	bf18      	it	ne
    9dfa:	2001      	movne	r0, #1
    9dfc:	bd08      	pop	{r3, pc}
	case BT_SECURITY_FIPS:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    9dfe:	f7ff ff59 	bl	9cb4 <get_io_capa>
    9e02:	2803      	cmp	r0, #3
    9e04:	d004      	beq.n	9e10 <sec_level_reachable+0x34>
    9e06:	4b05      	ldr	r3, [pc, #20]	; (9e1c <sec_level_reachable+0x40>)
    9e08:	781b      	ldrb	r3, [r3, #0]
    9e0a:	b91b      	cbnz	r3, 9e14 <sec_level_reachable+0x38>
    9e0c:	2000      	movs	r0, #0
    9e0e:	bd08      	pop	{r3, pc}
    9e10:	2000      	movs	r0, #0
    9e12:	bd08      	pop	{r3, pc}
    9e14:	2001      	movs	r0, #1
    9e16:	bd08      	pop	{r3, pc}
		       sc_supported;
	default:
		return false;
    9e18:	2000      	movs	r0, #0
	}
}
    9e1a:	bd08      	pop	{r3, pc}
    9e1c:	200008a4 	.word	0x200008a4

00009e20 <bt_smp_accept>:
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    9e20:	2000      	movs	r0, #0
    9e22:	b110      	cbz	r0, 9e2a <bt_smp_accept+0xa>
		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    9e24:	f06f 000b 	mvn.w	r0, #11
}
    9e28:	4770      	bx	lr
		if (smp->chan.chan.conn) {
    9e2a:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    9e2e:	fb03 f300 	mul.w	r3, r3, r0
    9e32:	4a07      	ldr	r2, [pc, #28]	; (9e50 <bt_smp_accept+0x30>)
    9e34:	58d3      	ldr	r3, [r2, r3]
    9e36:	b10b      	cbz	r3, 9e3c <bt_smp_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    9e38:	3001      	adds	r0, #1
    9e3a:	e7f2      	b.n	9e22 <bt_smp_accept+0x2>
		smp->chan.chan.ops = &ops;
    9e3c:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    9e40:	4a03      	ldr	r2, [pc, #12]	; (9e50 <bt_smp_accept+0x30>)
    9e42:	fb03 2300 	mla	r3, r3, r0, r2
    9e46:	4a03      	ldr	r2, [pc, #12]	; (9e54 <bt_smp_accept+0x34>)
    9e48:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
    9e4a:	600b      	str	r3, [r1, #0]
		return 0;
    9e4c:	4770      	bx	lr
    9e4e:	bf00      	nop
    9e50:	200006bc 	.word	0x200006bc
    9e54:	2000ba40 	.word	0x2000ba40

00009e58 <le_sc_supported>:
	/*
	 * If controller based ECC is to be used it must support
	 * "LE Read Local P-256 Public Key" and "LE Generate DH Key" commands.
	 * Otherwise LE SC are not supported.
	 */
	return (bt_dev.supported_commands[34] & 0x02) &&
    9e58:	4b04      	ldr	r3, [pc, #16]	; (9e6c <le_sc_supported+0x14>)
    9e5a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    9e5e:	f000 0006 	and.w	r0, r0, #6
	       (bt_dev.supported_commands[34] & 0x04);
}
    9e62:	2806      	cmp	r0, #6
    9e64:	bf14      	ite	ne
    9e66:	2000      	movne	r0, #0
    9e68:	2001      	moveq	r0, #1
    9e6a:	4770      	bx	lr
    9e6c:	2000b770 	.word	0x2000b770

00009e70 <smp_chan_get>:
{
    9e70:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    9e72:	2106      	movs	r1, #6
    9e74:	f7fd fd18 	bl	78a8 <bt_l2cap_le_lookup_rx_cid>
}
    9e78:	bd08      	pop	{r3, pc}

00009e7a <smp_create_pdu>:
{
    9e7a:	b538      	push	{r3, r4, r5, lr}
    9e7c:	460d      	mov	r5, r1
	buf = bt_l2cap_create_pdu(NULL, 0);
    9e7e:	2100      	movs	r1, #0
    9e80:	4608      	mov	r0, r1
    9e82:	f7fd fa58 	bl	7336 <bt_l2cap_create_pdu>
    9e86:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    9e88:	2101      	movs	r1, #1
    9e8a:	3008      	adds	r0, #8
    9e8c:	f010 f952 	bl	1a134 <net_buf_simple_add>
	hdr->code = op;
    9e90:	7005      	strb	r5, [r0, #0]
}
    9e92:	4620      	mov	r0, r4
    9e94:	bd38      	pop	{r3, r4, r5, pc}

00009e96 <smp_init>:
{
    9e96:	b510      	push	{r4, lr}
    9e98:	4604      	mov	r4, r0
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    9e9a:	22e0      	movs	r2, #224	; 0xe0
    9e9c:	2100      	movs	r1, #0
    9e9e:	309c      	adds	r0, #156	; 0x9c
    9ea0:	f01f fc1a 	bl	296d8 <memset>
	if (bt_rand(smp->prnd, 16)) {
    9ea4:	2110      	movs	r1, #16
    9ea6:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    9eaa:	f006 fdcd 	bl	10a48 <bt_rand>
    9eae:	b110      	cbz	r0, 9eb6 <smp_init+0x20>
		return BT_SMP_ERR_UNSPECIFIED;
    9eb0:	2308      	movs	r3, #8
}
    9eb2:	4618      	mov	r0, r3
    9eb4:	bd10      	pop	{r4, pc}
    9eb6:	4603      	mov	r3, r0
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    9eb8:	349c      	adds	r4, #156	; 0x9c
    9eba:	f3bf 8f5b 	dmb	ish
    9ebe:	e854 2f00 	ldrex	r2, [r4]
    9ec2:	f042 0220 	orr.w	r2, r2, #32
    9ec6:	e844 2100 	strex	r1, r2, [r4]
    9eca:	2900      	cmp	r1, #0
    9ecc:	d1f7      	bne.n	9ebe <smp_init+0x28>
    9ece:	f3bf 8f5b 	dmb	ish
	return 0;
    9ed2:	e7ee      	b.n	9eb2 <smp_init+0x1c>

00009ed4 <display_passkey>:
{
    9ed4:	b538      	push	{r3, r4, r5, lr}
    9ed6:	4604      	mov	r4, r0
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    9ed8:	2104      	movs	r1, #4
    9eda:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    9ede:	f006 fdb3 	bl	10a48 <bt_rand>
    9ee2:	b108      	cbz	r0, 9ee8 <display_passkey+0x14>
		return BT_SMP_ERR_UNSPECIFIED;
    9ee4:	2008      	movs	r0, #8
}
    9ee6:	bd38      	pop	{r3, r4, r5, pc}
	smp->passkey %= 1000000;
    9ee8:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
    9eec:	4909      	ldr	r1, [pc, #36]	; (9f14 <display_passkey+0x40>)
    9eee:	fba1 2103 	umull	r2, r1, r1, r3
    9ef2:	0c89      	lsrs	r1, r1, #18
    9ef4:	4a08      	ldr	r2, [pc, #32]	; (9f18 <display_passkey+0x44>)
    9ef6:	fb02 3111 	mls	r1, r2, r1, r3
    9efa:	f8c4 1174 	str.w	r1, [r4, #372]	; 0x174
	smp->passkey_round = 0;
    9efe:	2500      	movs	r5, #0
    9f00:	f884 5178 	strb.w	r5, [r4, #376]	; 0x178
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    9f04:	4b05      	ldr	r3, [pc, #20]	; (9f1c <display_passkey+0x48>)
    9f06:	681b      	ldr	r3, [r3, #0]
    9f08:	681b      	ldr	r3, [r3, #0]
    9f0a:	6820      	ldr	r0, [r4, #0]
    9f0c:	4798      	blx	r3
	return 0;
    9f0e:	4628      	mov	r0, r5
    9f10:	bd38      	pop	{r3, r4, r5, pc}
    9f12:	bf00      	nop
    9f14:	431bde83 	.word	0x431bde83
    9f18:	000f4240 	.word	0x000f4240
    9f1c:	200028a8 	.word	0x200028a8

00009f20 <smp_send>:
{
    9f20:	b510      	push	{r4, lr}
    9f22:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    9f24:	4613      	mov	r3, r2
    9f26:	460a      	mov	r2, r1
    9f28:	2106      	movs	r1, #6
    9f2a:	6800      	ldr	r0, [r0, #0]
    9f2c:	f7fd fa9b 	bl	7466 <bt_l2cap_send_cb>
    9f30:	f247 5230 	movw	r2, #30000	; 0x7530
    9f34:	f504 71be 	add.w	r1, r4, #380	; 0x17c
    9f38:	4801      	ldr	r0, [pc, #4]	; (9f40 <smp_send+0x20>)
    9f3a:	f01f fa43 	bl	293c4 <k_delayed_work_submit_to_queue>
    9f3e:	bd10      	pop	{r4, pc}
    9f40:	20002a70 	.word	0x20002a70

00009f44 <sc_smp_send_dhkey_check>:
{
    9f44:	b570      	push	{r4, r5, r6, lr}
    9f46:	4604      	mov	r4, r0
    9f48:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    9f4a:	2210      	movs	r2, #16
    9f4c:	210d      	movs	r1, #13
    9f4e:	6800      	ldr	r0, [r0, #0]
    9f50:	f7ff ff93 	bl	9e7a <smp_create_pdu>
	if (!buf) {
    9f54:	b178      	cbz	r0, 9f76 <sc_smp_send_dhkey_check+0x32>
    9f56:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    9f58:	2110      	movs	r1, #16
    9f5a:	3008      	adds	r0, #8
    9f5c:	f010 f8ea 	bl	1a134 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    9f60:	2210      	movs	r2, #16
    9f62:	4631      	mov	r1, r6
    9f64:	f7f6 f9ac 	bl	2c0 <memcpy>
	smp_send(smp, buf, NULL);
    9f68:	2200      	movs	r2, #0
    9f6a:	4629      	mov	r1, r5
    9f6c:	4620      	mov	r0, r4
    9f6e:	f7ff ffd7 	bl	9f20 <smp_send>
	return 0;
    9f72:	2000      	movs	r0, #0
    9f74:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    9f76:	2008      	movs	r0, #8
}
    9f78:	bd70      	pop	{r4, r5, r6, pc}
	...

00009f7c <sc_send_public_key>:
{
    9f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f7e:	4604      	mov	r4, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    9f80:	2240      	movs	r2, #64	; 0x40
    9f82:	210c      	movs	r1, #12
    9f84:	6800      	ldr	r0, [r0, #0]
    9f86:	f7ff ff78 	bl	9e7a <smp_create_pdu>
	if (!req_buf) {
    9f8a:	b1b0      	cbz	r0, 9fba <sc_send_public_key+0x3e>
    9f8c:	4605      	mov	r5, r0
	req = net_buf_add(req_buf, sizeof(*req));
    9f8e:	2140      	movs	r1, #64	; 0x40
    9f90:	3008      	adds	r0, #8
    9f92:	f010 f8cf 	bl	1a134 <net_buf_simple_add>
    9f96:	4607      	mov	r7, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    9f98:	4e09      	ldr	r6, [pc, #36]	; (9fc0 <sc_send_public_key+0x44>)
    9f9a:	2220      	movs	r2, #32
    9f9c:	4631      	mov	r1, r6
    9f9e:	f7f6 f98f 	bl	2c0 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    9fa2:	2220      	movs	r2, #32
    9fa4:	18b1      	adds	r1, r6, r2
    9fa6:	18b8      	adds	r0, r7, r2
    9fa8:	f7f6 f98a 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    9fac:	2200      	movs	r2, #0
    9fae:	4629      	mov	r1, r5
    9fb0:	4620      	mov	r0, r4
    9fb2:	f7ff ffb5 	bl	9f20 <smp_send>
	return 0;
    9fb6:	2000      	movs	r0, #0
    9fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    9fba:	2008      	movs	r0, #8
}
    9fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9fbe:	bf00      	nop
    9fc0:	20000864 	.word	0x20000864

00009fc4 <send_pairing_rsp>:
{
    9fc4:	b538      	push	{r3, r4, r5, lr}
    9fc6:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    9fc8:	2206      	movs	r2, #6
    9fca:	2102      	movs	r1, #2
    9fcc:	6800      	ldr	r0, [r0, #0]
    9fce:	f7ff ff54 	bl	9e7a <smp_create_pdu>
	if (!rsp_buf) {
    9fd2:	b180      	cbz	r0, 9ff6 <send_pairing_rsp+0x32>
    9fd4:	4605      	mov	r5, r0
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    9fd6:	2106      	movs	r1, #6
    9fd8:	3008      	adds	r0, #8
    9fda:	f010 f8ab 	bl	1a134 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    9fde:	2206      	movs	r2, #6
    9fe0:	f104 01ad 	add.w	r1, r4, #173	; 0xad
    9fe4:	f7f6 f96c 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    9fe8:	2200      	movs	r2, #0
    9fea:	4629      	mov	r1, r5
    9fec:	4620      	mov	r0, r4
    9fee:	f7ff ff97 	bl	9f20 <smp_send>
	return 0;
    9ff2:	2000      	movs	r0, #0
    9ff4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    9ff6:	2008      	movs	r0, #8
}
    9ff8:	bd38      	pop	{r3, r4, r5, pc}

00009ffa <smp_send_pairing_random>:
{
    9ffa:	b538      	push	{r3, r4, r5, lr}
    9ffc:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    9ffe:	2210      	movs	r2, #16
    a000:	2104      	movs	r1, #4
    a002:	6800      	ldr	r0, [r0, #0]
    a004:	f7ff ff39 	bl	9e7a <smp_create_pdu>
	if (!rsp_buf) {
    a008:	b180      	cbz	r0, a02c <smp_send_pairing_random+0x32>
    a00a:	4605      	mov	r5, r0
	req = net_buf_add(rsp_buf, sizeof(*req));
    a00c:	2110      	movs	r1, #16
    a00e:	3008      	adds	r0, #8
    a010:	f010 f890 	bl	1a134 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    a014:	2210      	movs	r2, #16
    a016:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    a01a:	f7f6 f951 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    a01e:	2200      	movs	r2, #0
    a020:	4629      	mov	r1, r5
    a022:	4620      	mov	r0, r4
    a024:	f7ff ff7c 	bl	9f20 <smp_send>
	return 0;
    a028:	2000      	movs	r0, #0
    a02a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a02c:	2008      	movs	r0, #8
}
    a02e:	bd38      	pop	{r3, r4, r5, pc}

0000a030 <bt_smp_aes_cmac>:
{
    a030:	b570      	push	{r4, r5, r6, lr}
    a032:	b0c2      	sub	sp, #264	; 0x108
    a034:	460c      	mov	r4, r1
    a036:	4615      	mov	r5, r2
    a038:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    a03a:	aa16      	add	r2, sp, #88	; 0x58
    a03c:	4601      	mov	r1, r0
    a03e:	4668      	mov	r0, sp
    a040:	f7f9 fb9f 	bl	3782 <tc_cmac_setup>
    a044:	b180      	cbz	r0, a068 <bt_smp_aes_cmac+0x38>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    a046:	462a      	mov	r2, r5
    a048:	4621      	mov	r1, r4
    a04a:	4668      	mov	r0, sp
    a04c:	f7f9 fbc6 	bl	37dc <tc_cmac_update>
    a050:	b168      	cbz	r0, a06e <bt_smp_aes_cmac+0x3e>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    a052:	4669      	mov	r1, sp
    a054:	4630      	mov	r0, r6
    a056:	f7f9 fc2b 	bl	38b0 <tc_cmac_final>
    a05a:	b110      	cbz	r0, a062 <bt_smp_aes_cmac+0x32>
	return 0;
    a05c:	2000      	movs	r0, #0
}
    a05e:	b042      	add	sp, #264	; 0x108
    a060:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    a062:	f06f 0004 	mvn.w	r0, #4
    a066:	e7fa      	b.n	a05e <bt_smp_aes_cmac+0x2e>
		return -EIO;
    a068:	f06f 0004 	mvn.w	r0, #4
    a06c:	e7f7      	b.n	a05e <bt_smp_aes_cmac+0x2e>
		return -EIO;
    a06e:	f06f 0004 	mvn.w	r0, #4
    a072:	e7f4      	b.n	a05e <bt_smp_aes_cmac+0x2e>

0000a074 <smp_sign_buf>:
{
    a074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a078:	b08b      	sub	sp, #44	; 0x2c
    a07a:	460d      	mov	r5, r1
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    a07c:	188f      	adds	r7, r1, r2
    a07e:	683b      	ldr	r3, [r7, #0]
    a080:	9309      	str	r3, [sp, #36]	; 0x24
	sys_mem_swap(m, len + sizeof(cnt));
    a082:	1d16      	adds	r6, r2, #4
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    a084:	2300      	movs	r3, #0
    a086:	e006      	b.n	a096 <smp_sign_buf+0x22>
		u8_t tmp = ((u8_t *)buf)[i];
    a088:	5cea      	ldrb	r2, [r5, r3]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a08a:	1af1      	subs	r1, r6, r3
    a08c:	3901      	subs	r1, #1
    a08e:	5c6c      	ldrb	r4, [r5, r1]
    a090:	54ec      	strb	r4, [r5, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a092:	546a      	strb	r2, [r5, r1]
	for (i = 0; i < (length/2); i++) {
    a094:	3301      	adds	r3, #1
    a096:	ea4f 0856 	mov.w	r8, r6, lsr #1
    a09a:	4543      	cmp	r3, r8
    a09c:	d3f4      	bcc.n	a088 <smp_sign_buf+0x14>
	src += length - 1;
    a09e:	300f      	adds	r0, #15
    a0a0:	2410      	movs	r4, #16
    a0a2:	ab05      	add	r3, sp, #20
    a0a4:	e004      	b.n	a0b0 <smp_sign_buf+0x3c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a0a6:	7802      	ldrb	r2, [r0, #0]
    a0a8:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    a0aa:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a0ac:	3801      	subs	r0, #1
    a0ae:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    a0b0:	2c00      	cmp	r4, #0
    a0b2:	d1f8      	bne.n	a0a6 <smp_sign_buf+0x32>
	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    a0b4:	ab01      	add	r3, sp, #4
    a0b6:	4632      	mov	r2, r6
    a0b8:	4629      	mov	r1, r5
    a0ba:	a805      	add	r0, sp, #20
    a0bc:	f7ff ffb8 	bl	a030 <bt_smp_aes_cmac>
	if (err) {
    a0c0:	4681      	mov	r9, r0
    a0c2:	bb08      	cbnz	r0, a108 <smp_sign_buf+0x94>
    a0c4:	4623      	mov	r3, r4
    a0c6:	e009      	b.n	a0dc <smp_sign_buf+0x68>
		u8_t tmp = ((u8_t *)buf)[i];
    a0c8:	aa01      	add	r2, sp, #4
    a0ca:	5cd0      	ldrb	r0, [r2, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a0cc:	f1c3 010f 	rsb	r1, r3, #15
    a0d0:	f812 e001 	ldrb.w	lr, [r2, r1]
    a0d4:	f802 e003 	strb.w	lr, [r2, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a0d8:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
    a0da:	3301      	adds	r3, #1
    a0dc:	2b07      	cmp	r3, #7
    a0de:	d9f3      	bls.n	a0c8 <smp_sign_buf+0x54>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    a0e0:	2204      	movs	r2, #4
    a0e2:	a909      	add	r1, sp, #36	; 0x24
    a0e4:	a802      	add	r0, sp, #8
    a0e6:	f7f6 f8eb 	bl	2c0 <memcpy>
    a0ea:	e006      	b.n	a0fa <smp_sign_buf+0x86>
		u8_t tmp = ((u8_t *)buf)[i];
    a0ec:	5d2a      	ldrb	r2, [r5, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a0ee:	1b33      	subs	r3, r6, r4
    a0f0:	3b01      	subs	r3, #1
    a0f2:	5ce9      	ldrb	r1, [r5, r3]
    a0f4:	5529      	strb	r1, [r5, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a0f6:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
    a0f8:	3401      	adds	r4, #1
    a0fa:	45a0      	cmp	r8, r4
    a0fc:	d8f6      	bhi.n	a0ec <smp_sign_buf+0x78>
	memcpy(sig, tmp + 4, 12);
    a0fe:	220c      	movs	r2, #12
    a100:	a902      	add	r1, sp, #8
    a102:	4638      	mov	r0, r7
    a104:	f7f6 f8dc 	bl	2c0 <memcpy>
}
    a108:	4648      	mov	r0, r9
    a10a:	b00b      	add	sp, #44	; 0x2c
    a10c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000a110 <smp_f4>:
{
    a110:	b5f0      	push	{r4, r5, r6, r7, lr}
    a112:	b097      	sub	sp, #92	; 0x5c
    a114:	9e1c      	ldr	r6, [sp, #112]	; 0x70
	src += length - 1;
    a116:	301f      	adds	r0, #31
    a118:	2420      	movs	r4, #32
    a11a:	ad01      	add	r5, sp, #4
    a11c:	e004      	b.n	a128 <smp_f4+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a11e:	7807      	ldrb	r7, [r0, #0]
    a120:	702f      	strb	r7, [r5, #0]
	for (; length > 0; length--) {
    a122:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a124:	3801      	subs	r0, #1
    a126:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    a128:	2c00      	cmp	r4, #0
    a12a:	d1f8      	bne.n	a11e <smp_f4+0xe>
	src += length - 1;
    a12c:	311f      	adds	r1, #31
    a12e:	2020      	movs	r0, #32
    a130:	ac09      	add	r4, sp, #36	; 0x24
    a132:	e004      	b.n	a13e <smp_f4+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a134:	780d      	ldrb	r5, [r1, #0]
    a136:	7025      	strb	r5, [r4, #0]
	for (; length > 0; length--) {
    a138:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a13a:	3901      	subs	r1, #1
    a13c:	3401      	adds	r4, #1
	for (; length > 0; length--) {
    a13e:	2800      	cmp	r0, #0
    a140:	d1f8      	bne.n	a134 <smp_f4+0x24>
	m[64] = z;
    a142:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	src += length - 1;
    a146:	320f      	adds	r2, #15
    a148:	2410      	movs	r4, #16
    a14a:	ab12      	add	r3, sp, #72	; 0x48
    a14c:	e004      	b.n	a158 <smp_f4+0x48>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a14e:	7811      	ldrb	r1, [r2, #0]
    a150:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
    a152:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a154:	3a01      	subs	r2, #1
    a156:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    a158:	2c00      	cmp	r4, #0
    a15a:	d1f8      	bne.n	a14e <smp_f4+0x3e>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    a15c:	4633      	mov	r3, r6
    a15e:	2241      	movs	r2, #65	; 0x41
    a160:	a901      	add	r1, sp, #4
    a162:	a812      	add	r0, sp, #72	; 0x48
    a164:	f7ff ff64 	bl	a030 <bt_smp_aes_cmac>
	if (err) {
    a168:	4605      	mov	r5, r0
    a16a:	b138      	cbz	r0, a17c <smp_f4+0x6c>
    a16c:	e008      	b.n	a180 <smp_f4+0x70>
		u8_t tmp = ((u8_t *)buf)[i];
    a16e:	5d32      	ldrb	r2, [r6, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a170:	f1c4 030f 	rsb	r3, r4, #15
    a174:	5cf1      	ldrb	r1, [r6, r3]
    a176:	5531      	strb	r1, [r6, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a178:	54f2      	strb	r2, [r6, r3]
	for (i = 0; i < (length/2); i++) {
    a17a:	3401      	adds	r4, #1
    a17c:	2c07      	cmp	r4, #7
    a17e:	d9f6      	bls.n	a16e <smp_f4+0x5e>
}
    a180:	4628      	mov	r0, r5
    a182:	b017      	add	sp, #92	; 0x5c
    a184:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000a188 <sc_smp_check_confirm>:
	switch (smp->method) {
    a188:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    a18c:	2b03      	cmp	r3, #3
    a18e:	d827      	bhi.n	a1e0 <sc_smp_check_confirm+0x58>
    a190:	e8df f003 	tbb	[pc, r3]
    a194:	0d02020d 	.word	0x0d02020d
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    a198:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
    a19c:	f890 2178 	ldrb.w	r2, [r0, #376]	; 0x178
    a1a0:	40d3      	lsrs	r3, r2
    a1a2:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    a1a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a1aa:	b2db      	uxtb	r3, r3
		break;
    a1ac:	e000      	b.n	a1b0 <sc_smp_check_confirm+0x28>
		r = 0;
    a1ae:	2300      	movs	r3, #0
{
    a1b0:	b510      	push	{r4, lr}
    a1b2:	b086      	sub	sp, #24
    a1b4:	4604      	mov	r4, r0
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    a1b6:	aa02      	add	r2, sp, #8
    a1b8:	9200      	str	r2, [sp, #0]
    a1ba:	f100 02d3 	add.w	r2, r0, #211	; 0xd3
    a1be:	490a      	ldr	r1, [pc, #40]	; (a1e8 <sc_smp_check_confirm+0x60>)
    a1c0:	30f3      	adds	r0, #243	; 0xf3
    a1c2:	f7ff ffa5 	bl	a110 <smp_f4>
    a1c6:	b110      	cbz	r0, a1ce <sc_smp_check_confirm+0x46>
		return BT_SMP_ERR_UNSPECIFIED;
    a1c8:	2008      	movs	r0, #8
}
    a1ca:	b006      	add	sp, #24
    a1cc:	bd10      	pop	{r4, pc}
	if (memcmp(smp->pcnf, cfm, 16)) {
    a1ce:	2210      	movs	r2, #16
    a1d0:	a902      	add	r1, sp, #8
    a1d2:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    a1d6:	f01f f9eb 	bl	295b0 <memcmp>
    a1da:	b118      	cbz	r0, a1e4 <sc_smp_check_confirm+0x5c>
		return BT_SMP_ERR_CONFIRM_FAILED;
    a1dc:	2004      	movs	r0, #4
    a1de:	e7f4      	b.n	a1ca <sc_smp_check_confirm+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    a1e0:	2008      	movs	r0, #8
    a1e2:	4770      	bx	lr
	return 0;
    a1e4:	2000      	movs	r0, #0
    a1e6:	e7f0      	b.n	a1ca <sc_smp_check_confirm+0x42>
    a1e8:	20000864 	.word	0x20000864

0000a1ec <smp_f5>:
{
    a1ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a1f0:	b09b      	sub	sp, #108	; 0x6c
    a1f2:	4604      	mov	r4, r0
    a1f4:	460e      	mov	r6, r1
    a1f6:	4615      	mov	r5, r2
    a1f8:	461f      	mov	r7, r3
    a1fa:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
    a1fe:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	u8_t m[53] = { 0x00, /* counter */
    a202:	2235      	movs	r2, #53	; 0x35
    a204:	2100      	movs	r1, #0
    a206:	a80c      	add	r0, sp, #48	; 0x30
    a208:	f01f fa66 	bl	296d8 <memset>
    a20c:	2362      	movs	r3, #98	; 0x62
    a20e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    a212:	2374      	movs	r3, #116	; 0x74
    a214:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    a218:	236c      	movs	r3, #108	; 0x6c
    a21a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    a21e:	2365      	movs	r3, #101	; 0x65
    a220:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    a224:	2301      	movs	r3, #1
    a226:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
	src += length - 1;
    a22a:	f104 001f 	add.w	r0, r4, #31
    a22e:	2320      	movs	r3, #32
    a230:	466a      	mov	r2, sp
    a232:	e004      	b.n	a23e <smp_f5+0x52>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a234:	7801      	ldrb	r1, [r0, #0]
    a236:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a238:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a23a:	3801      	subs	r0, #1
    a23c:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a23e:	2b00      	cmp	r3, #0
    a240:	d1f8      	bne.n	a234 <smp_f5+0x48>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    a242:	ab08      	add	r3, sp, #32
    a244:	2220      	movs	r2, #32
    a246:	4669      	mov	r1, sp
    a248:	4838      	ldr	r0, [pc, #224]	; (a32c <smp_f5+0x140>)
    a24a:	f7ff fef1 	bl	a030 <bt_smp_aes_cmac>
	if (err) {
    a24e:	4686      	mov	lr, r0
    a250:	2800      	cmp	r0, #0
    a252:	d166      	bne.n	a322 <smp_f5+0x136>
	src += length - 1;
    a254:	360f      	adds	r6, #15
    a256:	2310      	movs	r3, #16
    a258:	f10d 0235 	add.w	r2, sp, #53	; 0x35
    a25c:	e004      	b.n	a268 <smp_f5+0x7c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a25e:	7831      	ldrb	r1, [r6, #0]
    a260:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a262:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a264:	3e01      	subs	r6, #1
    a266:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a268:	2b00      	cmp	r3, #0
    a26a:	d1f8      	bne.n	a25e <smp_f5+0x72>
	src += length - 1;
    a26c:	350f      	adds	r5, #15
    a26e:	2310      	movs	r3, #16
    a270:	f10d 0245 	add.w	r2, sp, #69	; 0x45
    a274:	e004      	b.n	a280 <smp_f5+0x94>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a276:	7829      	ldrb	r1, [r5, #0]
    a278:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a27a:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a27c:	3d01      	subs	r5, #1
    a27e:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a280:	2b00      	cmp	r3, #0
    a282:	d1f8      	bne.n	a276 <smp_f5+0x8a>
	m[37] = a1->type;
    a284:	f817 3b06 	ldrb.w	r3, [r7], #6
    a288:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	src += length - 1;
    a28c:	2306      	movs	r3, #6
    a28e:	f10d 0256 	add.w	r2, sp, #86	; 0x56
    a292:	e004      	b.n	a29e <smp_f5+0xb2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a294:	7839      	ldrb	r1, [r7, #0]
    a296:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a298:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a29a:	3f01      	subs	r7, #1
    a29c:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a29e:	2b00      	cmp	r3, #0
    a2a0:	d1f8      	bne.n	a294 <smp_f5+0xa8>
	m[44] = a2->type;
    a2a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a2a4:	f813 2b06 	ldrb.w	r2, [r3], #6
    a2a8:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
	src += length - 1;
    a2ac:	2406      	movs	r4, #6
    a2ae:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
    a2b2:	e004      	b.n	a2be <smp_f5+0xd2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a2b4:	7819      	ldrb	r1, [r3, #0]
    a2b6:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a2b8:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a2ba:	3b01      	subs	r3, #1
    a2bc:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a2be:	2c00      	cmp	r4, #0
    a2c0:	d1f8      	bne.n	a2b4 <smp_f5+0xc8>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    a2c2:	4643      	mov	r3, r8
    a2c4:	2235      	movs	r2, #53	; 0x35
    a2c6:	a90c      	add	r1, sp, #48	; 0x30
    a2c8:	a808      	add	r0, sp, #32
    a2ca:	f7ff feb1 	bl	a030 <bt_smp_aes_cmac>
	if (err) {
    a2ce:	4686      	mov	lr, r0
    a2d0:	bb38      	cbnz	r0, a322 <smp_f5+0x136>
    a2d2:	4623      	mov	r3, r4
    a2d4:	e00a      	b.n	a2ec <smp_f5+0x100>
		u8_t tmp = ((u8_t *)buf)[i];
    a2d6:	f818 1003 	ldrb.w	r1, [r8, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a2da:	f1c3 020f 	rsb	r2, r3, #15
    a2de:	f818 0002 	ldrb.w	r0, [r8, r2]
    a2e2:	f808 0003 	strb.w	r0, [r8, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a2e6:	f808 1002 	strb.w	r1, [r8, r2]
	for (i = 0; i < (length/2); i++) {
    a2ea:	3301      	adds	r3, #1
    a2ec:	2b07      	cmp	r3, #7
    a2ee:	d9f2      	bls.n	a2d6 <smp_f5+0xea>
	m[0] = 0x01;
    a2f0:	a91a      	add	r1, sp, #104	; 0x68
    a2f2:	2301      	movs	r3, #1
    a2f4:	f801 3d38 	strb.w	r3, [r1, #-56]!
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    a2f8:	464b      	mov	r3, r9
    a2fa:	2235      	movs	r2, #53	; 0x35
    a2fc:	a808      	add	r0, sp, #32
    a2fe:	f7ff fe97 	bl	a030 <bt_smp_aes_cmac>
	if (err) {
    a302:	4686      	mov	lr, r0
    a304:	b158      	cbz	r0, a31e <smp_f5+0x132>
    a306:	e00c      	b.n	a322 <smp_f5+0x136>
		u8_t tmp = ((u8_t *)buf)[i];
    a308:	f819 2004 	ldrb.w	r2, [r9, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a30c:	f1c4 030f 	rsb	r3, r4, #15
    a310:	f819 1003 	ldrb.w	r1, [r9, r3]
    a314:	f809 1004 	strb.w	r1, [r9, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a318:	f809 2003 	strb.w	r2, [r9, r3]
	for (i = 0; i < (length/2); i++) {
    a31c:	3401      	adds	r4, #1
    a31e:	2c07      	cmp	r4, #7
    a320:	d9f2      	bls.n	a308 <smp_f5+0x11c>
}
    a322:	4670      	mov	r0, lr
    a324:	b01b      	add	sp, #108	; 0x6c
    a326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a32a:	bf00      	nop
    a32c:	0002f9c8 	.word	0x0002f9c8

0000a330 <smp_f6>:
{
    a330:	b5f0      	push	{r4, r5, r6, r7, lr}
    a332:	b097      	sub	sp, #92	; 0x5c
    a334:	4604      	mov	r4, r0
    a336:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    a338:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    a33a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	src += length - 1;
    a33c:	310f      	adds	r1, #15
    a33e:	2010      	movs	r0, #16
    a340:	f10d 0e04 	add.w	lr, sp, #4
    a344:	e007      	b.n	a356 <smp_f6+0x26>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a346:	f891 c000 	ldrb.w	ip, [r1]
    a34a:	f88e c000 	strb.w	ip, [lr]
	for (; length > 0; length--) {
    a34e:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a350:	3901      	subs	r1, #1
    a352:	f10e 0e01 	add.w	lr, lr, #1
	for (; length > 0; length--) {
    a356:	2800      	cmp	r0, #0
    a358:	d1f5      	bne.n	a346 <smp_f6+0x16>
	src += length - 1;
    a35a:	320f      	adds	r2, #15
    a35c:	2110      	movs	r1, #16
    a35e:	a805      	add	r0, sp, #20
    a360:	e006      	b.n	a370 <smp_f6+0x40>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a362:	f892 e000 	ldrb.w	lr, [r2]
    a366:	f880 e000 	strb.w	lr, [r0]
	for (; length > 0; length--) {
    a36a:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a36c:	3a01      	subs	r2, #1
    a36e:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    a370:	2900      	cmp	r1, #0
    a372:	d1f6      	bne.n	a362 <smp_f6+0x32>
	src += length - 1;
    a374:	330f      	adds	r3, #15
    a376:	2210      	movs	r2, #16
    a378:	a909      	add	r1, sp, #36	; 0x24
    a37a:	e004      	b.n	a386 <smp_f6+0x56>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a37c:	7818      	ldrb	r0, [r3, #0]
    a37e:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    a380:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a382:	3b01      	subs	r3, #1
    a384:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    a386:	2a00      	cmp	r2, #0
    a388:	d1f8      	bne.n	a37c <smp_f6+0x4c>
	src += length - 1;
    a38a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    a38c:	3302      	adds	r3, #2
    a38e:	2203      	movs	r2, #3
    a390:	a90d      	add	r1, sp, #52	; 0x34
    a392:	e004      	b.n	a39e <smp_f6+0x6e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a394:	7818      	ldrb	r0, [r3, #0]
    a396:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    a398:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a39a:	3b01      	subs	r3, #1
    a39c:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    a39e:	2a00      	cmp	r2, #0
    a3a0:	d1f8      	bne.n	a394 <smp_f6+0x64>
	m[51] = a1->type;
    a3a2:	4631      	mov	r1, r6
    a3a4:	f811 3b01 	ldrb.w	r3, [r1], #1
    a3a8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(m + 52, a1->a.val, 6);
    a3ac:	2206      	movs	r2, #6
    a3ae:	a80e      	add	r0, sp, #56	; 0x38
    a3b0:	f7f5 ff86 	bl	2c0 <memcpy>
	src += length - 1;
    a3b4:	3606      	adds	r6, #6
    a3b6:	2306      	movs	r3, #6
    a3b8:	aa0e      	add	r2, sp, #56	; 0x38
    a3ba:	e004      	b.n	a3c6 <smp_f6+0x96>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a3bc:	7831      	ldrb	r1, [r6, #0]
    a3be:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a3c0:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a3c2:	3e01      	subs	r6, #1
    a3c4:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a3c6:	2b00      	cmp	r3, #0
    a3c8:	d1f8      	bne.n	a3bc <smp_f6+0x8c>
	m[58] = a2->type;
    a3ca:	4629      	mov	r1, r5
    a3cc:	f811 3b01 	ldrb.w	r3, [r1], #1
    a3d0:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	memcpy(m + 59, a2->a.val, 6);
    a3d4:	2206      	movs	r2, #6
    a3d6:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
    a3da:	f7f5 ff71 	bl	2c0 <memcpy>
	src += length - 1;
    a3de:	3506      	adds	r5, #6
    a3e0:	2306      	movs	r3, #6
    a3e2:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
    a3e6:	e004      	b.n	a3f2 <smp_f6+0xc2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a3e8:	7829      	ldrb	r1, [r5, #0]
    a3ea:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a3ec:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a3ee:	3d01      	subs	r5, #1
    a3f0:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a3f2:	2b00      	cmp	r3, #0
    a3f4:	d1f8      	bne.n	a3e8 <smp_f6+0xb8>
	src += length - 1;
    a3f6:	f104 000f 	add.w	r0, r4, #15
    a3fa:	2410      	movs	r4, #16
    a3fc:	ab12      	add	r3, sp, #72	; 0x48
    a3fe:	e004      	b.n	a40a <smp_f6+0xda>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a400:	7802      	ldrb	r2, [r0, #0]
    a402:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    a404:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a406:	3801      	subs	r0, #1
    a408:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    a40a:	2c00      	cmp	r4, #0
    a40c:	d1f8      	bne.n	a400 <smp_f6+0xd0>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    a40e:	463b      	mov	r3, r7
    a410:	2241      	movs	r2, #65	; 0x41
    a412:	a901      	add	r1, sp, #4
    a414:	a812      	add	r0, sp, #72	; 0x48
    a416:	f7ff fe0b 	bl	a030 <bt_smp_aes_cmac>
	if (err) {
    a41a:	4605      	mov	r5, r0
    a41c:	b138      	cbz	r0, a42e <smp_f6+0xfe>
    a41e:	e008      	b.n	a432 <smp_f6+0x102>
		u8_t tmp = ((u8_t *)buf)[i];
    a420:	5d3a      	ldrb	r2, [r7, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a422:	f1c4 030f 	rsb	r3, r4, #15
    a426:	5cf9      	ldrb	r1, [r7, r3]
    a428:	5539      	strb	r1, [r7, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a42a:	54fa      	strb	r2, [r7, r3]
	for (i = 0; i < (length/2); i++) {
    a42c:	3401      	adds	r4, #1
    a42e:	2c07      	cmp	r4, #7
    a430:	d9f6      	bls.n	a420 <smp_f6+0xf0>
}
    a432:	4628      	mov	r0, r5
    a434:	b017      	add	sp, #92	; 0x5c
    a436:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a438 <compute_and_send_master_dhcheck>:
{
    a438:	b5f0      	push	{r4, r5, r6, r7, lr}
    a43a:	b08d      	sub	sp, #52	; 0x34
    a43c:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    a43e:	2210      	movs	r2, #16
    a440:	2100      	movs	r1, #0
    a442:	eb0d 0002 	add.w	r0, sp, r2
    a446:	f01f f947 	bl	296d8 <memset>
	switch (smp->method) {
    a44a:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    a44e:	2b03      	cmp	r3, #3
    a450:	d84a      	bhi.n	a4e8 <compute_and_send_master_dhcheck+0xb0>
    a452:	e8df f003 	tbb	[pc, r3]
    a456:	0208      	.short	0x0208
    a458:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    a45a:	2204      	movs	r2, #4
    a45c:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    a460:	a804      	add	r0, sp, #16
    a462:	f7f5 ff2d 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    a466:	f104 06c3 	add.w	r6, r4, #195	; 0xc3
    a46a:	f104 07d3 	add.w	r7, r4, #211	; 0xd3
		   &smp->chan.chan.conn->le.init_addr,
    a46e:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    a470:	f103 0256 	add.w	r2, r3, #86	; 0x56
    a474:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    a478:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    a47c:	9102      	str	r1, [sp, #8]
    a47e:	9501      	str	r5, [sp, #4]
    a480:	9200      	str	r2, [sp, #0]
    a482:	334f      	adds	r3, #79	; 0x4f
    a484:	463a      	mov	r2, r7
    a486:	4631      	mov	r1, r6
    a488:	f204 1033 	addw	r0, r4, #307	; 0x133
    a48c:	f7ff feae 	bl	a1ec <smp_f5>
    a490:	b110      	cbz	r0, a498 <compute_and_send_master_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    a492:	2008      	movs	r0, #8
}
    a494:	b00d      	add	sp, #52	; 0x34
    a496:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    a498:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    a49c:	6823      	ldr	r3, [r4, #0]
    a49e:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    a4a2:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    a4a4:	a808      	add	r0, sp, #32
    a4a6:	9003      	str	r0, [sp, #12]
    a4a8:	9302      	str	r3, [sp, #8]
    a4aa:	9101      	str	r1, [sp, #4]
    a4ac:	9200      	str	r2, [sp, #0]
    a4ae:	ab04      	add	r3, sp, #16
    a4b0:	463a      	mov	r2, r7
    a4b2:	4631      	mov	r1, r6
    a4b4:	4628      	mov	r0, r5
    a4b6:	f7ff ff3b 	bl	a330 <smp_f6>
    a4ba:	b108      	cbz	r0, a4c0 <compute_and_send_master_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    a4bc:	2008      	movs	r0, #8
    a4be:	e7e9      	b.n	a494 <compute_and_send_master_dhcheck+0x5c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    a4c0:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    a4c4:	f3bf 8f5b 	dmb	ish
    a4c8:	e853 2f00 	ldrex	r2, [r3]
    a4cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    a4d0:	e843 2100 	strex	r1, r2, [r3]
    a4d4:	2900      	cmp	r1, #0
    a4d6:	d1f7      	bne.n	a4c8 <compute_and_send_master_dhcheck+0x90>
    a4d8:	f3bf 8f5b 	dmb	ish
	sc_smp_send_dhkey_check(smp, e);
    a4dc:	a908      	add	r1, sp, #32
    a4de:	4620      	mov	r0, r4
    a4e0:	f7ff fd30 	bl	9f44 <sc_smp_send_dhkey_check>
	return 0;
    a4e4:	2000      	movs	r0, #0
    a4e6:	e7d5      	b.n	a494 <compute_and_send_master_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    a4e8:	2008      	movs	r0, #8
    a4ea:	e7d3      	b.n	a494 <compute_and_send_master_dhcheck+0x5c>

0000a4ec <compute_and_check_and_send_slave_dhcheck>:
{
    a4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4ee:	b091      	sub	sp, #68	; 0x44
    a4f0:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    a4f2:	2210      	movs	r2, #16
    a4f4:	2100      	movs	r1, #0
    a4f6:	eb0d 0002 	add.w	r0, sp, r2
    a4fa:	f01f f8ed 	bl	296d8 <memset>
	switch (smp->method) {
    a4fe:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    a502:	2b03      	cmp	r3, #3
    a504:	d866      	bhi.n	a5d4 <compute_and_check_and_send_slave_dhcheck+0xe8>
    a506:	e8df f003 	tbb	[pc, r3]
    a50a:	0208      	.short	0x0208
    a50c:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    a50e:	2204      	movs	r2, #4
    a510:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    a514:	a804      	add	r0, sp, #16
    a516:	f7f5 fed3 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    a51a:	f104 06d3 	add.w	r6, r4, #211	; 0xd3
    a51e:	f104 07c3 	add.w	r7, r4, #195	; 0xc3
		   &smp->chan.chan.conn->le.init_addr,
    a522:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    a524:	f103 0256 	add.w	r2, r3, #86	; 0x56
    a528:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    a52c:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    a530:	9102      	str	r1, [sp, #8]
    a532:	9501      	str	r5, [sp, #4]
    a534:	9200      	str	r2, [sp, #0]
    a536:	334f      	adds	r3, #79	; 0x4f
    a538:	463a      	mov	r2, r7
    a53a:	4631      	mov	r1, r6
    a53c:	f204 1033 	addw	r0, r4, #307	; 0x133
    a540:	f7ff fe54 	bl	a1ec <smp_f5>
    a544:	b110      	cbz	r0, a54c <compute_and_check_and_send_slave_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    a546:	2008      	movs	r0, #8
}
    a548:	b011      	add	sp, #68	; 0x44
    a54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    a54c:	f104 02ad 	add.w	r2, r4, #173	; 0xad
		   &smp->chan.chan.conn->le.resp_addr,
    a550:	6823      	ldr	r3, [r4, #0]
    a552:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr, e)) {
    a556:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    a558:	a808      	add	r0, sp, #32
    a55a:	9003      	str	r0, [sp, #12]
    a55c:	9302      	str	r3, [sp, #8]
    a55e:	9101      	str	r1, [sp, #4]
    a560:	9200      	str	r2, [sp, #0]
    a562:	ab04      	add	r3, sp, #16
    a564:	4632      	mov	r2, r6
    a566:	4639      	mov	r1, r7
    a568:	4628      	mov	r0, r5
    a56a:	f7ff fee1 	bl	a330 <smp_f6>
    a56e:	b108      	cbz	r0, a574 <compute_and_check_and_send_slave_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    a570:	2008      	movs	r0, #8
    a572:	e7e9      	b.n	a548 <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    a574:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    a578:	6823      	ldr	r3, [r4, #0]
    a57a:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    a57e:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    a580:	a80c      	add	r0, sp, #48	; 0x30
    a582:	9003      	str	r0, [sp, #12]
    a584:	9302      	str	r3, [sp, #8]
    a586:	9101      	str	r1, [sp, #4]
    a588:	9200      	str	r2, [sp, #0]
    a58a:	ab04      	add	r3, sp, #16
    a58c:	463a      	mov	r2, r7
    a58e:	4631      	mov	r1, r6
    a590:	4628      	mov	r0, r5
    a592:	f7ff fecd 	bl	a330 <smp_f6>
    a596:	b108      	cbz	r0, a59c <compute_and_check_and_send_slave_dhcheck+0xb0>
		return BT_SMP_ERR_UNSPECIFIED;
    a598:	2008      	movs	r0, #8
    a59a:	e7d5      	b.n	a548 <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (memcmp(smp->e, re, 16)) {
    a59c:	2210      	movs	r2, #16
    a59e:	a90c      	add	r1, sp, #48	; 0x30
    a5a0:	f204 1053 	addw	r0, r4, #339	; 0x153
    a5a4:	f01f f804 	bl	295b0 <memcmp>
    a5a8:	b108      	cbz	r0, a5ae <compute_and_check_and_send_slave_dhcheck+0xc2>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    a5aa:	200b      	movs	r0, #11
    a5ac:	e7cc      	b.n	a548 <compute_and_check_and_send_slave_dhcheck+0x5c>
	sc_smp_send_dhkey_check(smp, e);
    a5ae:	a908      	add	r1, sp, #32
    a5b0:	4620      	mov	r0, r4
    a5b2:	f7ff fcc7 	bl	9f44 <sc_smp_send_dhkey_check>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    a5b6:	34a0      	adds	r4, #160	; 0xa0
    a5b8:	f3bf 8f5b 	dmb	ish
    a5bc:	e854 3f00 	ldrex	r3, [r4]
    a5c0:	f043 0302 	orr.w	r3, r3, #2
    a5c4:	e844 3200 	strex	r2, r3, [r4]
    a5c8:	2a00      	cmp	r2, #0
    a5ca:	d1f7      	bne.n	a5bc <compute_and_check_and_send_slave_dhcheck+0xd0>
    a5cc:	f3bf 8f5b 	dmb	ish
	return 0;
    a5d0:	2000      	movs	r0, #0
    a5d2:	e7b9      	b.n	a548 <compute_and_check_and_send_slave_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    a5d4:	2008      	movs	r0, #8
    a5d6:	e7b7      	b.n	a548 <compute_and_check_and_send_slave_dhcheck+0x5c>

0000a5d8 <smp_g2>:
{
    a5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5da:	b099      	sub	sp, #100	; 0x64
    a5dc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	src += length - 1;
    a5de:	301f      	adds	r0, #31
    a5e0:	2520      	movs	r5, #32
    a5e2:	ae04      	add	r6, sp, #16
    a5e4:	e004      	b.n	a5f0 <smp_g2+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a5e6:	7807      	ldrb	r7, [r0, #0]
    a5e8:	7037      	strb	r7, [r6, #0]
	for (; length > 0; length--) {
    a5ea:	3d01      	subs	r5, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a5ec:	3801      	subs	r0, #1
    a5ee:	3601      	adds	r6, #1
	for (; length > 0; length--) {
    a5f0:	2d00      	cmp	r5, #0
    a5f2:	d1f8      	bne.n	a5e6 <smp_g2+0xe>
	src += length - 1;
    a5f4:	311f      	adds	r1, #31
    a5f6:	2020      	movs	r0, #32
    a5f8:	ad0c      	add	r5, sp, #48	; 0x30
    a5fa:	e004      	b.n	a606 <smp_g2+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a5fc:	780e      	ldrb	r6, [r1, #0]
    a5fe:	702e      	strb	r6, [r5, #0]
	for (; length > 0; length--) {
    a600:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a602:	3901      	subs	r1, #1
    a604:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    a606:	2800      	cmp	r0, #0
    a608:	d1f8      	bne.n	a5fc <smp_g2+0x24>
	src += length - 1;
    a60a:	330f      	adds	r3, #15
    a60c:	2110      	movs	r1, #16
    a60e:	a814      	add	r0, sp, #80	; 0x50
    a610:	e004      	b.n	a61c <smp_g2+0x44>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a612:	781d      	ldrb	r5, [r3, #0]
    a614:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
    a616:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a618:	3b01      	subs	r3, #1
    a61a:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    a61c:	2900      	cmp	r1, #0
    a61e:	d1f8      	bne.n	a612 <smp_g2+0x3a>
	src += length - 1;
    a620:	320f      	adds	r2, #15
    a622:	2310      	movs	r3, #16
    a624:	4669      	mov	r1, sp
    a626:	e004      	b.n	a632 <smp_g2+0x5a>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a628:	7810      	ldrb	r0, [r2, #0]
    a62a:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    a62c:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a62e:	3a01      	subs	r2, #1
    a630:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    a632:	2b00      	cmp	r3, #0
    a634:	d1f8      	bne.n	a628 <smp_g2+0x50>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    a636:	466b      	mov	r3, sp
    a638:	2250      	movs	r2, #80	; 0x50
    a63a:	a904      	add	r1, sp, #16
    a63c:	4668      	mov	r0, sp
    a63e:	f7ff fcf7 	bl	a030 <bt_smp_aes_cmac>
	if (err) {
    a642:	4605      	mov	r5, r0
    a644:	b110      	cbz	r0, a64c <smp_g2+0x74>
}
    a646:	4628      	mov	r0, r5
    a648:	b019      	add	sp, #100	; 0x64
    a64a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(passkey, xs + 12, 4);
    a64c:	2204      	movs	r2, #4
    a64e:	a903      	add	r1, sp, #12
    a650:	4620      	mov	r0, r4
    a652:	f7f5 fe35 	bl	2c0 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    a656:	6822      	ldr	r2, [r4, #0]
    a658:	0a13      	lsrs	r3, r2, #8
    a65a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    a65e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    a662:	0211      	lsls	r1, r2, #8
    a664:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    a668:	430b      	orrs	r3, r1
    a66a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    a66e:	4a04      	ldr	r2, [pc, #16]	; (a680 <smp_g2+0xa8>)
    a670:	fba2 1203 	umull	r1, r2, r2, r3
    a674:	0c92      	lsrs	r2, r2, #18
    a676:	4903      	ldr	r1, [pc, #12]	; (a684 <smp_g2+0xac>)
    a678:	fb01 3212 	mls	r2, r1, r2, r3
    a67c:	6022      	str	r2, [r4, #0]
	return 0;
    a67e:	e7e2      	b.n	a646 <smp_g2+0x6e>
    a680:	431bde83 	.word	0x431bde83
    a684:	000f4240 	.word	0x000f4240

0000a688 <smp_send_pairing_confirm>:
{
    a688:	b570      	push	{r4, r5, r6, lr}
    a68a:	b082      	sub	sp, #8
	struct bt_conn *conn = smp->chan.chan.conn;
    a68c:	6806      	ldr	r6, [r0, #0]
	switch (smp->method) {
    a68e:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    a692:	2b03      	cmp	r3, #3
    a694:	d83f      	bhi.n	a716 <smp_send_pairing_confirm+0x8e>
    a696:	e8df f003 	tbb	[pc, r3]
    a69a:	020d      	.short	0x020d
    a69c:	0d02      	.short	0x0d02
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    a69e:	f8d0 5174 	ldr.w	r5, [r0, #372]	; 0x174
    a6a2:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    a6a6:	40dd      	lsrs	r5, r3
    a6a8:	f005 0501 	and.w	r5, r5, #1
		r |= 0x80;
    a6ac:	f065 057f 	orn	r5, r5, #127	; 0x7f
    a6b0:	b2ed      	uxtb	r5, r5
		break;
    a6b2:	e000      	b.n	a6b6 <smp_send_pairing_confirm+0x2e>
		r = 0;
    a6b4:	2500      	movs	r5, #0
    a6b6:	4604      	mov	r4, r0
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    a6b8:	2210      	movs	r2, #16
    a6ba:	2103      	movs	r1, #3
    a6bc:	4630      	mov	r0, r6
    a6be:	f7ff fbdc 	bl	9e7a <smp_create_pdu>
	if (!buf) {
    a6c2:	4606      	mov	r6, r0
    a6c4:	b348      	cbz	r0, a71a <smp_send_pairing_confirm+0x92>
	req = net_buf_add(buf, sizeof(*req));
    a6c6:	2110      	movs	r1, #16
    a6c8:	3008      	adds	r0, #8
    a6ca:	f00f fd33 	bl	1a134 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    a6ce:	9000      	str	r0, [sp, #0]
    a6d0:	462b      	mov	r3, r5
    a6d2:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    a6d6:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    a6da:	4811      	ldr	r0, [pc, #68]	; (a720 <smp_send_pairing_confirm+0x98>)
    a6dc:	f7ff fd18 	bl	a110 <smp_f4>
    a6e0:	b120      	cbz	r0, a6ec <smp_send_pairing_confirm+0x64>
		net_buf_unref(buf);
    a6e2:	4630      	mov	r0, r6
    a6e4:	f00f fcda 	bl	1a09c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    a6e8:	2008      	movs	r0, #8
    a6ea:	e017      	b.n	a71c <smp_send_pairing_confirm+0x94>
	smp_send(smp, buf, NULL);
    a6ec:	2200      	movs	r2, #0
    a6ee:	4631      	mov	r1, r6
    a6f0:	4620      	mov	r0, r4
    a6f2:	f7ff fc15 	bl	9f20 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    a6f6:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a6fa:	f3bf 8f5b 	dmb	ish
    a6fe:	e850 3f00 	ldrex	r3, [r0]
    a702:	f023 0301 	bic.w	r3, r3, #1
    a706:	e840 3200 	strex	r2, r3, [r0]
    a70a:	2a00      	cmp	r2, #0
    a70c:	d1f7      	bne.n	a6fe <smp_send_pairing_confirm+0x76>
    a70e:	f3bf 8f5b 	dmb	ish
	return 0;
    a712:	2000      	movs	r0, #0
    a714:	e002      	b.n	a71c <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    a716:	2008      	movs	r0, #8
    a718:	e000      	b.n	a71c <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    a71a:	2008      	movs	r0, #8
}
    a71c:	b002      	add	sp, #8
    a71e:	bd70      	pop	{r4, r5, r6, pc}
    a720:	20000864 	.word	0x20000864

0000a724 <smp_c1>:
{
    a724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a728:	b088      	sub	sp, #32
    a72a:	4604      	mov	r4, r0
    a72c:	460f      	mov	r7, r1
    a72e:	4611      	mov	r1, r2
    a730:	4698      	mov	r8, r3
    a732:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    a734:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	p1[0] = ia->type;
    a736:	782b      	ldrb	r3, [r5, #0]
    a738:	f88d 3010 	strb.w	r3, [sp, #16]
	p1[1] = ra->type;
    a73c:	7833      	ldrb	r3, [r6, #0]
    a73e:	f88d 3011 	strb.w	r3, [sp, #17]
	memcpy(p1 + 2, preq, 7);
    a742:	2207      	movs	r2, #7
    a744:	f10d 0012 	add.w	r0, sp, #18
    a748:	f7f5 fdba 	bl	2c0 <memcpy>
	memcpy(p1 + 9, pres, 7);
    a74c:	2207      	movs	r2, #7
    a74e:	4641      	mov	r1, r8
    a750:	f10d 0019 	add.w	r0, sp, #25
    a754:	f7f5 fdb4 	bl	2c0 <memcpy>
	xor_128(r, p1, enc_data);
    a758:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a75a:	a904      	add	r1, sp, #16
    a75c:	4638      	mov	r0, r7
    a75e:	f7ff faf3 	bl	9d48 <xor_128>
	err = bt_encrypt_le(k, enc_data, enc_data);
    a762:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a764:	4611      	mov	r1, r2
    a766:	4620      	mov	r0, r4
    a768:	f006 f98a 	bl	10a80 <bt_encrypt_le>
	if (err) {
    a76c:	4603      	mov	r3, r0
    a76e:	b118      	cbz	r0, a778 <smp_c1+0x54>
}
    a770:	4618      	mov	r0, r3
    a772:	b008      	add	sp, #32
    a774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(p2, ra->a.val, 6);
    a778:	2206      	movs	r2, #6
    a77a:	1c71      	adds	r1, r6, #1
    a77c:	4668      	mov	r0, sp
    a77e:	f7f5 fd9f 	bl	2c0 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    a782:	2206      	movs	r2, #6
    a784:	1c69      	adds	r1, r5, #1
    a786:	eb0d 0002 	add.w	r0, sp, r2
    a78a:	f7f5 fd99 	bl	2c0 <memcpy>
	memset(p2 + 12, 0, 4);
    a78e:	2204      	movs	r2, #4
    a790:	2100      	movs	r1, #0
    a792:	a803      	add	r0, sp, #12
    a794:	f01e ffa0 	bl	296d8 <memset>
	xor_128(enc_data, p2, enc_data);
    a798:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a79a:	4669      	mov	r1, sp
    a79c:	4610      	mov	r0, r2
    a79e:	f7ff fad3 	bl	9d48 <xor_128>
	return bt_encrypt_le(k, enc_data, enc_data);
    a7a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a7a4:	4611      	mov	r1, r2
    a7a6:	4620      	mov	r0, r4
    a7a8:	f006 f96a 	bl	10a80 <bt_encrypt_le>
    a7ac:	4603      	mov	r3, r0
    a7ae:	e7df      	b.n	a770 <smp_c1+0x4c>

0000a7b0 <legacy_send_pairing_confirm>:
{
    a7b0:	b570      	push	{r4, r5, r6, lr}
    a7b2:	b084      	sub	sp, #16
    a7b4:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    a7b6:	6805      	ldr	r5, [r0, #0]
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    a7b8:	2210      	movs	r2, #16
    a7ba:	2103      	movs	r1, #3
    a7bc:	4628      	mov	r0, r5
    a7be:	f7ff fb5c 	bl	9e7a <smp_create_pdu>
	if (!buf) {
    a7c2:	b370      	cbz	r0, a822 <legacy_send_pairing_confirm+0x72>
    a7c4:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    a7c6:	2110      	movs	r1, #16
    a7c8:	3008      	adds	r0, #8
    a7ca:	f00f fcb3 	bl	1a134 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    a7ce:	f105 034f 	add.w	r3, r5, #79	; 0x4f
    a7d2:	3556      	adds	r5, #86	; 0x56
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    a7d4:	9002      	str	r0, [sp, #8]
    a7d6:	9501      	str	r5, [sp, #4]
    a7d8:	9300      	str	r3, [sp, #0]
    a7da:	f104 03ac 	add.w	r3, r4, #172	; 0xac
    a7de:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
    a7e2:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    a7e6:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    a7ea:	f7ff ff9b 	bl	a724 <smp_c1>
    a7ee:	b120      	cbz	r0, a7fa <legacy_send_pairing_confirm+0x4a>
		net_buf_unref(buf);
    a7f0:	4630      	mov	r0, r6
    a7f2:	f00f fc53 	bl	1a09c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    a7f6:	2008      	movs	r0, #8
    a7f8:	e014      	b.n	a824 <legacy_send_pairing_confirm+0x74>
	smp_send(smp, buf, NULL);
    a7fa:	2200      	movs	r2, #0
    a7fc:	4631      	mov	r1, r6
    a7fe:	4620      	mov	r0, r4
    a800:	f7ff fb8e 	bl	9f20 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    a804:	34a0      	adds	r4, #160	; 0xa0
    a806:	f3bf 8f5b 	dmb	ish
    a80a:	e854 3f00 	ldrex	r3, [r4]
    a80e:	f023 0301 	bic.w	r3, r3, #1
    a812:	e844 3200 	strex	r2, r3, [r4]
    a816:	2a00      	cmp	r2, #0
    a818:	d1f7      	bne.n	a80a <legacy_send_pairing_confirm+0x5a>
    a81a:	f3bf 8f5b 	dmb	ish
	return 0;
    a81e:	2000      	movs	r0, #0
    a820:	e000      	b.n	a824 <legacy_send_pairing_confirm+0x74>
		return BT_SMP_ERR_UNSPECIFIED;
    a822:	2008      	movs	r0, #8
}
    a824:	b004      	add	sp, #16
    a826:	bd70      	pop	{r4, r5, r6, pc}

0000a828 <legacy_pairing_confirm>:
{
    a828:	b508      	push	{r3, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a82a:	6803      	ldr	r3, [r0, #0]
    a82c:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a82e:	b1c3      	cbz	r3, a862 <legacy_pairing_confirm+0x3a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    a830:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a834:	f3bf 8f5b 	dmb	ish
    a838:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    a83c:	f3bf 8f5b 	dmb	ish
    a840:	f412 7f00 	tst.w	r2, #512	; 0x200
    a844:	d01e      	beq.n	a884 <legacy_pairing_confirm+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a846:	f3bf 8f5b 	dmb	ish
    a84a:	e853 2f00 	ldrex	r2, [r3]
    a84e:	f042 0201 	orr.w	r2, r2, #1
    a852:	e843 2100 	strex	r1, r2, [r3]
    a856:	2900      	cmp	r1, #0
    a858:	d1f7      	bne.n	a84a <legacy_pairing_confirm+0x22>
    a85a:	f3bf 8f5b 	dmb	ish
	return 0;
    a85e:	2000      	movs	r0, #0
}
    a860:	bd08      	pop	{r3, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    a862:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    a866:	f3bf 8f5b 	dmb	ish
    a86a:	e853 2f00 	ldrex	r2, [r3]
    a86e:	f042 0208 	orr.w	r2, r2, #8
    a872:	e843 2100 	strex	r1, r2, [r3]
    a876:	2900      	cmp	r1, #0
    a878:	d1f7      	bne.n	a86a <legacy_pairing_confirm+0x42>
    a87a:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    a87e:	f7ff ff97 	bl	a7b0 <legacy_send_pairing_confirm>
    a882:	bd08      	pop	{r3, pc}
			atomic_set_bit(&smp->allowed_cmds,
    a884:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    a888:	f3bf 8f5b 	dmb	ish
    a88c:	e853 2f00 	ldrex	r2, [r3]
    a890:	f042 0210 	orr.w	r2, r2, #16
    a894:	e843 2100 	strex	r1, r2, [r3]
    a898:	2900      	cmp	r1, #0
    a89a:	d1f7      	bne.n	a88c <legacy_pairing_confirm+0x64>
    a89c:	f3bf 8f5b 	dmb	ish
			return legacy_send_pairing_confirm(smp);
    a8a0:	f7ff ff86 	bl	a7b0 <legacy_send_pairing_confirm>
    a8a4:	bd08      	pop	{r3, pc}

0000a8a6 <smp_pairing_confirm>:
{
    a8a6:	b510      	push	{r4, lr}
    a8a8:	4604      	mov	r4, r0
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    a8aa:	2210      	movs	r2, #16
    a8ac:	6889      	ldr	r1, [r1, #8]
    a8ae:	30b3      	adds	r0, #179	; 0xb3
    a8b0:	f7f5 fd06 	bl	2c0 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a8b4:	6823      	ldr	r3, [r4, #0]
    a8b6:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a8b8:	b313      	cbz	r3, a900 <smp_pairing_confirm+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a8ba:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a8be:	f3bf 8f5b 	dmb	ish
    a8c2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    a8c6:	f3bf 8f5b 	dmb	ish
    a8ca:	f013 0f20 	tst.w	r3, #32
    a8ce:	d029      	beq.n	a924 <smp_pairing_confirm+0x7e>
	switch (smp->method) {
    a8d0:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    a8d4:	2b01      	cmp	r3, #1
    a8d6:	d029      	beq.n	a92c <smp_pairing_confirm+0x86>
    a8d8:	2b02      	cmp	r3, #2
    a8da:	d150      	bne.n	a97e <smp_pairing_confirm+0xd8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a8dc:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a8e0:	f3bf 8f5b 	dmb	ish
    a8e4:	e853 2f00 	ldrex	r2, [r3]
    a8e8:	f042 0210 	orr.w	r2, r2, #16
    a8ec:	e843 2100 	strex	r1, r2, [r3]
    a8f0:	2900      	cmp	r1, #0
    a8f2:	d1f7      	bne.n	a8e4 <smp_pairing_confirm+0x3e>
    a8f4:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    a8f8:	4620      	mov	r0, r4
    a8fa:	f7ff fec5 	bl	a688 <smp_send_pairing_confirm>
    a8fe:	bd10      	pop	{r4, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a900:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    a904:	f3bf 8f5b 	dmb	ish
    a908:	e853 2f00 	ldrex	r2, [r3]
    a90c:	f042 0210 	orr.w	r2, r2, #16
    a910:	e843 2100 	strex	r1, r2, [r3]
    a914:	2900      	cmp	r1, #0
    a916:	d1f7      	bne.n	a908 <smp_pairing_confirm+0x62>
    a918:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_random(smp);
    a91c:	4620      	mov	r0, r4
    a91e:	f7ff fb6c 	bl	9ffa <smp_send_pairing_random>
    a922:	bd10      	pop	{r4, pc}
		return legacy_pairing_confirm(smp);
    a924:	4620      	mov	r0, r4
    a926:	f7ff ff7f 	bl	a828 <legacy_pairing_confirm>
    a92a:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a92c:	f3bf 8f5b 	dmb	ish
    a930:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    a934:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    a938:	f413 7f00 	tst.w	r3, #512	; 0x200
    a93c:	d111      	bne.n	a962 <smp_pairing_confirm+0xbc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a93e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a942:	f3bf 8f5b 	dmb	ish
    a946:	e853 2f00 	ldrex	r2, [r3]
    a94a:	f042 0210 	orr.w	r2, r2, #16
    a94e:	e843 2100 	strex	r1, r2, [r3]
    a952:	2900      	cmp	r1, #0
    a954:	d1f7      	bne.n	a946 <smp_pairing_confirm+0xa0>
    a956:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    a95a:	4620      	mov	r0, r4
    a95c:	f7ff fe94 	bl	a688 <smp_send_pairing_confirm>
    a960:	bd10      	pop	{r4, pc}
    a962:	f3bf 8f5b 	dmb	ish
    a966:	e852 3f00 	ldrex	r3, [r2]
    a96a:	f043 0301 	orr.w	r3, r3, #1
    a96e:	e842 3100 	strex	r1, r3, [r2]
    a972:	2900      	cmp	r1, #0
    a974:	d1f7      	bne.n	a966 <smp_pairing_confirm+0xc0>
    a976:	f3bf 8f5b 	dmb	ish
			return 0;
    a97a:	2000      	movs	r0, #0
    a97c:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a97e:	2008      	movs	r0, #8
}
    a980:	bd10      	pop	{r4, pc}

0000a982 <smp_s1>:
{
    a982:	b570      	push	{r4, r5, r6, lr}
    a984:	4605      	mov	r5, r0
    a986:	460e      	mov	r6, r1
    a988:	4611      	mov	r1, r2
    a98a:	461c      	mov	r4, r3
	memcpy(out, r2, 8);
    a98c:	2208      	movs	r2, #8
    a98e:	4618      	mov	r0, r3
    a990:	f7f5 fc96 	bl	2c0 <memcpy>
	memcpy(out + 8, r1, 8);
    a994:	2208      	movs	r2, #8
    a996:	4631      	mov	r1, r6
    a998:	18a0      	adds	r0, r4, r2
    a99a:	f7f5 fc91 	bl	2c0 <memcpy>
	return bt_encrypt_le(k, out, out);
    a99e:	4622      	mov	r2, r4
    a9a0:	4621      	mov	r1, r4
    a9a2:	4628      	mov	r0, r5
    a9a4:	f006 f86c 	bl	10a80 <bt_encrypt_le>
}
    a9a8:	bd70      	pop	{r4, r5, r6, pc}

0000a9aa <smp_reset>:
{
    a9aa:	b538      	push	{r3, r4, r5, lr}
    a9ac:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    a9ae:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
    a9b0:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    a9b4:	f01e fcac 	bl	29310 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
    a9b8:	2200      	movs	r2, #0
    a9ba:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
	atomic_set(&smp->allowed_cmds, 0);
    a9be:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a9c2:	f3bf 8f5b 	dmb	ish
    a9c6:	e853 1f00 	ldrex	r1, [r3]
    a9ca:	e843 2000 	strex	r0, r2, [r3]
    a9ce:	2800      	cmp	r0, #0
    a9d0:	d1f9      	bne.n	a9c6 <smp_reset+0x1c>
    a9d2:	f3bf 8f5b 	dmb	ish
	atomic_set(smp->flags, 0);
    a9d6:	34a0      	adds	r4, #160	; 0xa0
    a9d8:	f3bf 8f5b 	dmb	ish
    a9dc:	e854 1f00 	ldrex	r1, [r4]
    a9e0:	e844 2000 	strex	r0, r2, [r4]
    a9e4:	2800      	cmp	r0, #0
    a9e6:	d1f9      	bne.n	a9dc <smp_reset+0x32>
    a9e8:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
    a9ec:	7a69      	ldrb	r1, [r5, #9]
    a9ee:	7a2a      	ldrb	r2, [r5, #8]
    a9f0:	4291      	cmp	r1, r2
    a9f2:	d000      	beq.n	a9f6 <smp_reset+0x4c>
		conn->required_sec_level = conn->sec_level;
    a9f4:	726a      	strb	r2, [r5, #9]
	    conn->role == BT_HCI_ROLE_MASTER) {
    a9f6:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a9f8:	b162      	cbz	r2, aa14 <smp_reset+0x6a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a9fa:	f3bf 8f5b 	dmb	ish
    a9fe:	e853 2f00 	ldrex	r2, [r3]
    aa02:	f042 0202 	orr.w	r2, r2, #2
    aa06:	e843 2100 	strex	r1, r2, [r3]
    aa0a:	2900      	cmp	r1, #0
    aa0c:	d1f7      	bne.n	a9fe <smp_reset+0x54>
    aa0e:	f3bf 8f5b 	dmb	ish
    aa12:	bd38      	pop	{r3, r4, r5, pc}
    aa14:	f3bf 8f5b 	dmb	ish
    aa18:	e853 2f00 	ldrex	r2, [r3]
    aa1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    aa20:	e843 2100 	strex	r1, r2, [r3]
    aa24:	2900      	cmp	r1, #0
    aa26:	d1f7      	bne.n	aa18 <smp_reset+0x6e>
    aa28:	f3bf 8f5b 	dmb	ish
    aa2c:	bd38      	pop	{r3, r4, r5, pc}

0000aa2e <smp_pairing_complete>:
{
    aa2e:	b508      	push	{r3, lr}
	smp_reset(smp);
    aa30:	f7ff ffbb 	bl	a9aa <smp_reset>
    aa34:	bd08      	pop	{r3, pc}

0000aa36 <smp_error>:
{
    aa36:	b570      	push	{r4, r5, r6, lr}
    aa38:	4604      	mov	r4, r0
    aa3a:	460e      	mov	r6, r1
	smp_pairing_complete(smp, reason);
    aa3c:	f7ff fff7 	bl	aa2e <smp_pairing_complete>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    aa40:	2201      	movs	r2, #1
    aa42:	2105      	movs	r1, #5
    aa44:	6820      	ldr	r0, [r4, #0]
    aa46:	f7ff fa18 	bl	9e7a <smp_create_pdu>
	if (!buf) {
    aa4a:	b168      	cbz	r0, aa68 <smp_error+0x32>
    aa4c:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    aa4e:	2101      	movs	r1, #1
    aa50:	3008      	adds	r0, #8
    aa52:	f00f fb6f 	bl	1a134 <net_buf_simple_add>
	rsp->reason = reason;
    aa56:	7006      	strb	r6, [r0, #0]
    aa58:	2300      	movs	r3, #0
    aa5a:	462a      	mov	r2, r5
    aa5c:	2106      	movs	r1, #6
    aa5e:	6820      	ldr	r0, [r4, #0]
    aa60:	f7fc fd01 	bl	7466 <bt_l2cap_send_cb>
	return 0;
    aa64:	2000      	movs	r0, #0
    aa66:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    aa68:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    aa6c:	bd70      	pop	{r4, r5, r6, pc}
	...

0000aa70 <bt_smp_dhkey_ready>:
{
    aa70:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    aa72:	2400      	movs	r4, #0
    aa74:	b384      	cbz	r4, aad8 <bt_smp_dhkey_ready+0x68>
	struct bt_smp *smp = NULL;
    aa76:	2400      	movs	r4, #0
	if (!smp) {
    aa78:	b36c      	cbz	r4, aad6 <bt_smp_dhkey_ready+0x66>
    aa7a:	4601      	mov	r1, r0
	if (!dhkey) {
    aa7c:	2800      	cmp	r0, #0
    aa7e:	d04b      	beq.n	ab18 <bt_smp_dhkey_ready+0xa8>
	memcpy(smp->dhkey, dhkey, 32);
    aa80:	2220      	movs	r2, #32
    aa82:	f204 1033 	addw	r0, r4, #307	; 0x133
    aa86:	f7f5 fc1b 	bl	2c0 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    aa8a:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    aa8e:	f3bf 8f5b 	dmb	ish
    aa92:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    aa96:	f3bf 8f5b 	dmb	ish
    aa9a:	f412 7f00 	tst.w	r2, #512	; 0x200
    aa9e:	d140      	bne.n	ab22 <bt_smp_dhkey_ready+0xb2>
    aaa0:	f3bf 8f5b 	dmb	ish
    aaa4:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    aaa8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    aaac:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    aab0:	d144      	bne.n	ab3c <bt_smp_dhkey_ready+0xcc>
    aab2:	f3bf 8f5b 	dmb	ish
    aab6:	681b      	ldr	r3, [r3, #0]
    aab8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    aabc:	f413 7f80 	tst.w	r3, #256	; 0x100
    aac0:	d009      	beq.n	aad6 <bt_smp_dhkey_ready+0x66>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    aac2:	6823      	ldr	r3, [r4, #0]
    aac4:	78db      	ldrb	r3, [r3, #3]
    aac6:	2b00      	cmp	r3, #0
    aac8:	d149      	bne.n	ab5e <bt_smp_dhkey_ready+0xee>
			err = compute_and_send_master_dhcheck(smp);
    aaca:	4620      	mov	r0, r4
    aacc:	f7ff fcb4 	bl	a438 <compute_and_send_master_dhcheck>
			if (err) {
    aad0:	4601      	mov	r1, r0
    aad2:	2800      	cmp	r0, #0
    aad4:	d13f      	bne.n	ab56 <bt_smp_dhkey_ready+0xe6>
    aad6:	bd10      	pop	{r4, pc}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    aad8:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    aadc:	fb03 f304 	mul.w	r3, r3, r4
    aae0:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
    aae4:	4b23      	ldr	r3, [pc, #140]	; (ab74 <bt_smp_dhkey_ready+0x104>)
    aae6:	4413      	add	r3, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    aae8:	f3bf 8f5b 	dmb	ish
    aaec:	e853 2f00 	ldrex	r2, [r3]
    aaf0:	f022 0180 	bic.w	r1, r2, #128	; 0x80
    aaf4:	e843 1e00 	strex	lr, r1, [r3]
    aaf8:	f1be 0f00 	cmp.w	lr, #0
    aafc:	d1f6      	bne.n	aaec <bt_smp_dhkey_ready+0x7c>
    aafe:	f3bf 8f5b 	dmb	ish
    ab02:	f012 0f80 	tst.w	r2, #128	; 0x80
    ab06:	d101      	bne.n	ab0c <bt_smp_dhkey_ready+0x9c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    ab08:	3401      	adds	r4, #1
    ab0a:	e7b3      	b.n	aa74 <bt_smp_dhkey_ready+0x4>
			smp = &bt_smp_pool[i];
    ab0c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    ab10:	4b18      	ldr	r3, [pc, #96]	; (ab74 <bt_smp_dhkey_ready+0x104>)
    ab12:	fb02 3404 	mla	r4, r2, r4, r3
			break;
    ab16:	e7af      	b.n	aa78 <bt_smp_dhkey_ready+0x8>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    ab18:	210b      	movs	r1, #11
    ab1a:	4620      	mov	r0, r4
    ab1c:	f7ff ff8b 	bl	aa36 <smp_error>
		return;
    ab20:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ab22:	f3bf 8f5b 	dmb	ish
    ab26:	e853 2f00 	ldrex	r2, [r3]
    ab2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    ab2e:	e843 2100 	strex	r1, r2, [r3]
    ab32:	2900      	cmp	r1, #0
    ab34:	d1f7      	bne.n	ab26 <bt_smp_dhkey_ready+0xb6>
    ab36:	f3bf 8f5b 	dmb	ish
    ab3a:	bd10      	pop	{r4, pc}
    ab3c:	f3bf 8f5b 	dmb	ish
    ab40:	e853 2f00 	ldrex	r2, [r3]
    ab44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    ab48:	e843 2100 	strex	r1, r2, [r3]
    ab4c:	2900      	cmp	r1, #0
    ab4e:	d1f7      	bne.n	ab40 <bt_smp_dhkey_ready+0xd0>
    ab50:	f3bf 8f5b 	dmb	ish
    ab54:	bd10      	pop	{r4, pc}
				smp_error(smp, err);
    ab56:	4620      	mov	r0, r4
    ab58:	f7ff ff6d 	bl	aa36 <smp_error>
    ab5c:	bd10      	pop	{r4, pc}
		err = compute_and_check_and_send_slave_dhcheck(smp);
    ab5e:	4620      	mov	r0, r4
    ab60:	f7ff fcc4 	bl	a4ec <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    ab64:	4601      	mov	r1, r0
    ab66:	2800      	cmp	r0, #0
    ab68:	d0b5      	beq.n	aad6 <bt_smp_dhkey_ready+0x66>
			smp_error(smp, err);
    ab6a:	4620      	mov	r0, r4
    ab6c:	f7ff ff63 	bl	aa36 <smp_error>
    ab70:	e7b1      	b.n	aad6 <bt_smp_dhkey_ready+0x66>
    ab72:	bf00      	nop
    ab74:	200006bc 	.word	0x200006bc

0000ab78 <smp_pairing_failed>:
{
    ab78:	b538      	push	{r3, r4, r5, lr}
    ab7a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    ab7c:	6800      	ldr	r0, [r0, #0]
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    ab7e:	688d      	ldr	r5, [r1, #8]
	switch (smp->method) {
    ab80:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    ab84:	3b01      	subs	r3, #1
    ab86:	2b02      	cmp	r3, #2
    ab88:	d913      	bls.n	abb2 <smp_pairing_failed+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ab8a:	f3bf 8f5b 	dmb	ish
    ab8e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ab92:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    ab96:	f013 0f04 	tst.w	r3, #4
    ab9a:	d004      	beq.n	aba6 <smp_pairing_failed+0x2e>
	    smp->chan.chan.conn->le.keys) {
    ab9c:	6823      	ldr	r3, [r4, #0]
    ab9e:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    aba0:	b108      	cbz	r0, aba6 <smp_pairing_failed+0x2e>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    aba2:	f001 fd98 	bl	c6d6 <bt_keys_clear>
	smp_pairing_complete(smp, req->reason);
    aba6:	7829      	ldrb	r1, [r5, #0]
    aba8:	4620      	mov	r0, r4
    abaa:	f7ff ff40 	bl	aa2e <smp_pairing_complete>
}
    abae:	2000      	movs	r0, #0
    abb0:	bd38      	pop	{r3, r4, r5, pc}
		bt_auth->cancel(conn);
    abb2:	4b02      	ldr	r3, [pc, #8]	; (abbc <smp_pairing_failed+0x44>)
    abb4:	681b      	ldr	r3, [r3, #0]
    abb6:	68db      	ldr	r3, [r3, #12]
    abb8:	4798      	blx	r3
		break;
    abba:	e7e6      	b.n	ab8a <smp_pairing_failed+0x12>
    abbc:	200028a8 	.word	0x200028a8

0000abc0 <bt_smp_disconnected>:
{
    abc0:	b538      	push	{r3, r4, r5, lr}
    abc2:	4605      	mov	r5, r0
	struct bt_keys *keys = chan->conn->le.keys;
    abc4:	6803      	ldr	r3, [r0, #0]
    abc6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	k_delayed_work_cancel(&smp->work);
    abc8:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    abcc:	f01e fba0 	bl	29310 <k_delayed_work_cancel>
	if (keys) {
    abd0:	b164      	cbz	r4, abec <bt_smp_disconnected+0x2c>
		if (!keys->keys ||
    abd2:	89a3      	ldrh	r3, [r4, #12]
    abd4:	b13b      	cbz	r3, abe6 <bt_smp_disconnected+0x26>
    abd6:	f3bf 8f5b 	dmb	ish
    abda:	68a3      	ldr	r3, [r4, #8]
    abdc:	f3bf 8f5b 	dmb	ish
    abe0:	f013 0f02 	tst.w	r3, #2
    abe4:	d002      	beq.n	abec <bt_smp_disconnected+0x2c>
			bt_keys_clear(keys);
    abe6:	4620      	mov	r0, r4
    abe8:	f001 fd75 	bl	c6d6 <bt_keys_clear>
	memset(smp, 0, sizeof(*smp));
    abec:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    abf0:	2100      	movs	r1, #0
    abf2:	4628      	mov	r0, r5
    abf4:	f01e fd70 	bl	296d8 <memset>
    abf8:	bd38      	pop	{r3, r4, r5, pc}

0000abfa <smp_timeout>:
{
    abfa:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    abfc:	f5a0 75be 	sub.w	r5, r0, #380	; 0x17c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    ac00:	f1a0 04dc 	sub.w	r4, r0, #220	; 0xdc
    ac04:	f3bf 8f5b 	dmb	ish
    ac08:	f850 3cdc 	ldr.w	r3, [r0, #-220]
    ac0c:	f3bf 8f5b 	dmb	ish
    ac10:	f013 0f04 	tst.w	r3, #4
    ac14:	d004      	beq.n	ac20 <smp_timeout+0x26>
	    smp->chan.chan.conn->le.keys) {
    ac16:	682b      	ldr	r3, [r5, #0]
    ac18:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    ac1a:	b108      	cbz	r0, ac20 <smp_timeout+0x26>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    ac1c:	f001 fd5b 	bl	c6d6 <bt_keys_clear>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    ac20:	2108      	movs	r1, #8
    ac22:	4628      	mov	r0, r5
    ac24:	f7ff ff03 	bl	aa2e <smp_pairing_complete>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ac28:	f3bf 8f5b 	dmb	ish
    ac2c:	e854 3f00 	ldrex	r3, [r4]
    ac30:	f043 0310 	orr.w	r3, r3, #16
    ac34:	e844 3200 	strex	r2, r3, [r4]
    ac38:	2a00      	cmp	r2, #0
    ac3a:	d1f7      	bne.n	ac2c <smp_timeout+0x32>
    ac3c:	f3bf 8f5b 	dmb	ish
    ac40:	bd38      	pop	{r3, r4, r5, pc}
	...

0000ac44 <legacy_distribute_keys>:
{
    ac44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac48:	b088      	sub	sp, #32
	struct bt_conn *conn = smp->chan.chan.conn;
    ac4a:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    ac4c:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    ac4e:	f890 3179 	ldrb.w	r3, [r0, #377]	; 0x179
    ac52:	f013 0f01 	tst.w	r3, #1
    ac56:	d102      	bne.n	ac5e <legacy_distribute_keys+0x1a>
}
    ac58:	b008      	add	sp, #32
    ac5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ac5e:	4604      	mov	r4, r0
		bt_rand(key, sizeof(key));
    ac60:	2110      	movs	r1, #16
    ac62:	eb0d 0001 	add.w	r0, sp, r1
    ac66:	f005 feef 	bl	10a48 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    ac6a:	2108      	movs	r1, #8
    ac6c:	eb0d 0001 	add.w	r0, sp, r1
    ac70:	f005 feea 	bl	10a48 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    ac74:	2102      	movs	r1, #2
    ac76:	f10d 0006 	add.w	r0, sp, #6
    ac7a:	f005 fee5 	bl	10a48 <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    ac7e:	2210      	movs	r2, #16
    ac80:	2106      	movs	r1, #6
    ac82:	4628      	mov	r0, r5
    ac84:	f7ff f8f9 	bl	9e7a <smp_create_pdu>
		if (!buf) {
    ac88:	4607      	mov	r7, r0
    ac8a:	2800      	cmp	r0, #0
    ac8c:	d0e4      	beq.n	ac58 <legacy_distribute_keys+0x14>
		info = net_buf_add(buf, sizeof(*info));
    ac8e:	2110      	movs	r1, #16
    ac90:	3008      	adds	r0, #8
    ac92:	f00f fa4f 	bl	1a134 <net_buf_simple_add>
    ac96:	4680      	mov	r8, r0
		memcpy(info->ltk, key, keys->enc_size);
    ac98:	79f2      	ldrb	r2, [r6, #7]
    ac9a:	a904      	add	r1, sp, #16
    ac9c:	f7f5 fb10 	bl	2c0 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    aca0:	79f0      	ldrb	r0, [r6, #7]
    aca2:	280f      	cmp	r0, #15
    aca4:	d93b      	bls.n	ad1e <legacy_distribute_keys+0xda>
		smp_send(smp, buf, NULL);
    aca6:	2200      	movs	r2, #0
    aca8:	4639      	mov	r1, r7
    acaa:	4620      	mov	r0, r4
    acac:	f7ff f938 	bl	9f20 <smp_send>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    acb0:	220a      	movs	r2, #10
    acb2:	2107      	movs	r1, #7
    acb4:	4628      	mov	r0, r5
    acb6:	f7ff f8e0 	bl	9e7a <smp_create_pdu>
		if (!buf) {
    acba:	4605      	mov	r5, r0
    acbc:	2800      	cmp	r0, #0
    acbe:	d0cb      	beq.n	ac58 <legacy_distribute_keys+0x14>
		ident = net_buf_add(buf, sizeof(*ident));
    acc0:	210a      	movs	r1, #10
    acc2:	3008      	adds	r0, #8
    acc4:	f00f fa36 	bl	1a134 <net_buf_simple_add>
		ident->rand = rand;
    acc8:	9b03      	ldr	r3, [sp, #12]
    acca:	9a02      	ldr	r2, [sp, #8]
    accc:	f8c0 2002 	str.w	r2, [r0, #2]
    acd0:	f8c0 3006 	str.w	r3, [r0, #6]
		ident->ediv = ediv;
    acd4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    acd8:	8003      	strh	r3, [r0, #0]
		smp_send(smp, buf, ident_sent);
    acda:	4a14      	ldr	r2, [pc, #80]	; (ad2c <legacy_distribute_keys+0xe8>)
    acdc:	4629      	mov	r1, r5
    acde:	4620      	mov	r0, r4
    ace0:	f7ff f91e 	bl	9f20 <smp_send>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ace4:	f3bf 8f5b 	dmb	ish
    ace8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    acec:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    acf0:	f413 6f80 	tst.w	r3, #1024	; 0x400
    acf4:	d0b0      	beq.n	ac58 <legacy_distribute_keys+0x14>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    acf6:	2101      	movs	r1, #1
    acf8:	4630      	mov	r0, r6
    acfa:	f001 fcd5 	bl	c6a8 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    acfe:	2210      	movs	r2, #16
    ad00:	eb0d 0102 	add.w	r1, sp, r2
    ad04:	f106 007a 	add.w	r0, r6, #122	; 0x7a
    ad08:	f7f5 fada 	bl	2c0 <memcpy>
			keys->slave_ltk.rand = rand;
    ad0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ad10:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
			keys->slave_ltk.ediv = ediv;
    ad14:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ad18:	f8a6 3078 	strh.w	r3, [r6, #120]	; 0x78
    ad1c:	e79c      	b.n	ac58 <legacy_distribute_keys+0x14>
			memset(info->ltk + keys->enc_size, 0,
    ad1e:	f1c0 0210 	rsb	r2, r0, #16
    ad22:	2100      	movs	r1, #0
    ad24:	4440      	add	r0, r8
    ad26:	f01e fcd7 	bl	296d8 <memset>
    ad2a:	e7bc      	b.n	aca6 <legacy_distribute_keys+0x62>
    ad2c:	0000b95f 	.word	0x0000b95f

0000ad30 <bt_smp_distribute_keys>:
{
    ad30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    ad32:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    ad34:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (!keys) {
    ad36:	b176      	cbz	r6, ad56 <bt_smp_distribute_keys+0x26>
    ad38:	4604      	mov	r4, r0
    ad3a:	f3bf 8f5b 	dmb	ish
    ad3e:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    ad42:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ad46:	f013 0f20 	tst.w	r3, #32
    ad4a:	d005      	beq.n	ad58 <bt_smp_distribute_keys+0x28>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    ad4c:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    ad50:	f013 0f04 	tst.w	r3, #4
    ad54:	d103      	bne.n	ad5e <bt_smp_distribute_keys+0x2e>
    ad56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		legacy_distribute_keys(smp);
    ad58:	f7ff ff74 	bl	ac44 <legacy_distribute_keys>
    ad5c:	e7f6      	b.n	ad4c <bt_smp_distribute_keys+0x1c>
		buf = smp_create_pdu(conn, BT_SMP_CMD_SIGNING_INFO,
    ad5e:	2210      	movs	r2, #16
    ad60:	210a      	movs	r1, #10
    ad62:	4628      	mov	r0, r5
    ad64:	f7ff f889 	bl	9e7a <smp_create_pdu>
		if (!buf) {
    ad68:	4605      	mov	r5, r0
    ad6a:	2800      	cmp	r0, #0
    ad6c:	d0f3      	beq.n	ad56 <bt_smp_distribute_keys+0x26>
		info = net_buf_add(buf, sizeof(*info));
    ad6e:	2110      	movs	r1, #16
    ad70:	3008      	adds	r0, #8
    ad72:	f00f f9df 	bl	1a134 <net_buf_simple_add>
    ad76:	4607      	mov	r7, r0
		bt_rand(info->csrk, sizeof(info->csrk));
    ad78:	2110      	movs	r1, #16
    ad7a:	f005 fe65 	bl	10a48 <bt_rand>
    ad7e:	f3bf 8f5b 	dmb	ish
    ad82:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ad86:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ad8a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    ad8e:	d105      	bne.n	ad9c <bt_smp_distribute_keys+0x6c>
		smp_send(smp, buf, sign_info_sent);
    ad90:	4a09      	ldr	r2, [pc, #36]	; (adb8 <bt_smp_distribute_keys+0x88>)
    ad92:	4629      	mov	r1, r5
    ad94:	4620      	mov	r0, r4
    ad96:	f7ff f8c3 	bl	9f20 <smp_send>
    ad9a:	e7dc      	b.n	ad56 <bt_smp_distribute_keys+0x26>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    ad9c:	2108      	movs	r1, #8
    ad9e:	4630      	mov	r0, r6
    ada0:	f001 fc82 	bl	c6a8 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    ada4:	2210      	movs	r2, #16
    ada6:	4639      	mov	r1, r7
    ada8:	f106 0048 	add.w	r0, r6, #72	; 0x48
    adac:	f7f5 fa88 	bl	2c0 <memcpy>
			keys->local_csrk.cnt = 0;
    adb0:	2300      	movs	r3, #0
    adb2:	65b3      	str	r3, [r6, #88]	; 0x58
    adb4:	e7ec      	b.n	ad90 <bt_smp_distribute_keys+0x60>
    adb6:	bf00      	nop
    adb8:	0000b955 	.word	0x0000b955

0000adbc <bt_smp_encrypt_change>:
	struct bt_conn *conn = chan->conn;
    adbc:	6803      	ldr	r3, [r0, #0]
	if (hci_status) {
    adbe:	b911      	cbnz	r1, adc6 <bt_smp_encrypt_change+0xa>
	if (!smp || !conn->encrypt) {
    adc0:	b108      	cbz	r0, adc6 <bt_smp_encrypt_change+0xa>
    adc2:	7a9a      	ldrb	r2, [r3, #10]
    adc4:	b902      	cbnz	r2, adc8 <bt_smp_encrypt_change+0xc>
    adc6:	4770      	bx	lr
{
    adc8:	b510      	push	{r4, lr}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    adca:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    adce:	f3bf 8f5b 	dmb	ish
    add2:	e852 1f00 	ldrex	r1, [r2]
    add6:	f021 0402 	bic.w	r4, r1, #2
    adda:	e842 4e00 	strex	lr, r4, [r2]
    adde:	f1be 0f00 	cmp.w	lr, #0
    ade2:	d1f6      	bne.n	add2 <bt_smp_encrypt_change+0x16>
    ade4:	f3bf 8f5b 	dmb	ish
    ade8:	f011 0f02 	tst.w	r1, #2
    adec:	d100      	bne.n	adf0 <bt_smp_encrypt_change+0x34>
    adee:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    adf0:	f3bf 8f5b 	dmb	ish
    adf4:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    adf8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    adfc:	f011 0f08 	tst.w	r1, #8
    ae00:	d04b      	beq.n	ae9a <bt_smp_encrypt_change+0xde>
    ae02:	f3bf 8f5b 	dmb	ish
    ae06:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    ae0a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ae0e:	f011 0f20 	tst.w	r1, #32
    ae12:	d015      	beq.n	ae40 <bt_smp_encrypt_change+0x84>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    ae14:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    ae18:	f011 0f08 	tst.w	r1, #8
    ae1c:	d004      	beq.n	ae28 <bt_smp_encrypt_change+0x6c>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
    ae1e:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    ae22:	f011 0f08 	tst.w	r1, #8
    ae26:	d146      	bne.n	aeb6 <bt_smp_encrypt_change+0xfa>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    ae28:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    ae2c:	f021 0108 	bic.w	r1, r1, #8
    ae30:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    ae34:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    ae38:	f021 0108 	bic.w	r1, r1, #8
    ae3c:	f880 117a 	strb.w	r1, [r0, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    ae40:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    ae44:	f011 0f01 	tst.w	r1, #1
    ae48:	d142      	bne.n	aed0 <bt_smp_encrypt_change+0x114>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    ae4a:	f011 0f02 	tst.w	r1, #2
    ae4e:	d14f      	bne.n	aef0 <bt_smp_encrypt_change+0x134>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    ae50:	f011 0f04 	tst.w	r1, #4
    ae54:	d15c      	bne.n	af10 <bt_smp_encrypt_change+0x154>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ae56:	f3bf 8f5b 	dmb	ish
    ae5a:	e852 1f00 	ldrex	r1, [r2]
    ae5e:	f041 0104 	orr.w	r1, r1, #4
    ae62:	e842 1400 	strex	r4, r1, [r2]
    ae66:	2c00      	cmp	r4, #0
    ae68:	d1f7      	bne.n	ae5a <bt_smp_encrypt_change+0x9e>
    ae6a:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    ae6e:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ae70:	b91b      	cbnz	r3, ae7a <bt_smp_encrypt_change+0xbe>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    ae72:	f890 317a 	ldrb.w	r3, [r0, #378]	; 0x17a
    ae76:	2b00      	cmp	r3, #0
    ae78:	d1b9      	bne.n	adee <bt_smp_encrypt_change+0x32>
    ae7a:	4604      	mov	r4, r0
	bt_smp_distribute_keys(smp);
    ae7c:	f7ff ff58 	bl	ad30 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    ae80:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    ae84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ae88:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    ae8c:	2b00      	cmp	r3, #0
    ae8e:	d1ae      	bne.n	adee <bt_smp_encrypt_change+0x32>
		smp_pairing_complete(smp, 0);
    ae90:	2100      	movs	r1, #0
    ae92:	4620      	mov	r0, r4
    ae94:	f7ff fdcb 	bl	aa2e <smp_pairing_complete>
    ae98:	e7a9      	b.n	adee <bt_smp_encrypt_change+0x32>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    ae9a:	309c      	adds	r0, #156	; 0x9c
    ae9c:	f3bf 8f5b 	dmb	ish
    aea0:	e850 3f00 	ldrex	r3, [r0]
    aea4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    aea8:	e840 3200 	strex	r2, r3, [r0]
    aeac:	2a00      	cmp	r2, #0
    aeae:	d1f7      	bne.n	aea0 <bt_smp_encrypt_change+0xe4>
    aeb0:	f3bf 8f5b 	dmb	ish
    aeb4:	bd10      	pop	{r4, pc}
    aeb6:	f3bf 8f5b 	dmb	ish
    aeba:	e852 1f00 	ldrex	r1, [r2]
    aebe:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
    aec2:	e842 1400 	strex	r4, r1, [r2]
    aec6:	2c00      	cmp	r4, #0
    aec8:	d1f7      	bne.n	aeba <bt_smp_encrypt_change+0xfe>
    aeca:	f3bf 8f5b 	dmb	ish
    aece:	e7ab      	b.n	ae28 <bt_smp_encrypt_change+0x6c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    aed0:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    aed4:	f3bf 8f5b 	dmb	ish
    aed8:	e851 4f00 	ldrex	r4, [r1]
    aedc:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    aee0:	e841 4e00 	strex	lr, r4, [r1]
    aee4:	f1be 0f00 	cmp.w	lr, #0
    aee8:	d1f6      	bne.n	aed8 <bt_smp_encrypt_change+0x11c>
    aeea:	f3bf 8f5b 	dmb	ish
    aeee:	e7b2      	b.n	ae56 <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    aef0:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    aef4:	f3bf 8f5b 	dmb	ish
    aef8:	e851 4f00 	ldrex	r4, [r1]
    aefc:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    af00:	e841 4e00 	strex	lr, r4, [r1]
    af04:	f1be 0f00 	cmp.w	lr, #0
    af08:	d1f6      	bne.n	aef8 <bt_smp_encrypt_change+0x13c>
    af0a:	f3bf 8f5b 	dmb	ish
    af0e:	e7a2      	b.n	ae56 <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    af10:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    af14:	f3bf 8f5b 	dmb	ish
    af18:	e851 4f00 	ldrex	r4, [r1]
    af1c:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    af20:	e841 4e00 	strex	lr, r4, [r1]
    af24:	f1be 0f00 	cmp.w	lr, #0
    af28:	d1f6      	bne.n	af18 <bt_smp_encrypt_change+0x15c>
    af2a:	f3bf 8f5b 	dmb	ish
    af2e:	e792      	b.n	ae56 <bt_smp_encrypt_change+0x9a>

0000af30 <bt_smp_recv>:
{
    af30:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_hdr *hdr = (void *)buf->data;
    af32:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    af34:	898b      	ldrh	r3, [r1, #12]
    af36:	b903      	cbnz	r3, af3a <bt_smp_recv+0xa>
    af38:	bd70      	pop	{r4, r5, r6, pc}
    af3a:	460c      	mov	r4, r1
    af3c:	4605      	mov	r5, r0
	net_buf_pull(buf, sizeof(*hdr));
    af3e:	2101      	movs	r1, #1
    af40:	f104 0008 	add.w	r0, r4, #8
    af44:	f00f f943 	bl	1a1ce <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    af48:	f3bf 8f5b 	dmb	ish
    af4c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    af50:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    af54:	f013 0f10 	tst.w	r3, #16
    af58:	d1ee      	bne.n	af38 <bt_smp_recv+0x8>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    af5a:	7833      	ldrb	r3, [r6, #0]
    af5c:	2b0d      	cmp	r3, #13
    af5e:	d824      	bhi.n	afaa <bt_smp_recv+0x7a>
    af60:	4a21      	ldr	r2, [pc, #132]	; (afe8 <bt_smp_recv+0xb8>)
    af62:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    af66:	b302      	cbz	r2, afaa <bt_smp_recv+0x7a>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    af68:	f105 029c 	add.w	r2, r5, #156	; 0x9c
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    af6c:	f003 001f 	and.w	r0, r3, #31
    af70:	2101      	movs	r1, #1
    af72:	4081      	lsls	r1, r0
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    af74:	095b      	lsrs	r3, r3, #5
    af76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    af7a:	43c8      	mvns	r0, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    af7c:	f3bf 8f5b 	dmb	ish
    af80:	e853 2f00 	ldrex	r2, [r3]
    af84:	ea02 0e00 	and.w	lr, r2, r0
    af88:	e843 ec00 	strex	ip, lr, [r3]
    af8c:	f1bc 0f00 	cmp.w	ip, #0
    af90:	d1f6      	bne.n	af80 <bt_smp_recv+0x50>
    af92:	f3bf 8f5b 	dmb	ish
    af96:	4211      	tst	r1, r2
    af98:	d10c      	bne.n	afb4 <bt_smp_recv+0x84>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    af9a:	7833      	ldrb	r3, [r6, #0]
    af9c:	2b05      	cmp	r3, #5
    af9e:	d0cb      	beq.n	af38 <bt_smp_recv+0x8>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    afa0:	2108      	movs	r1, #8
    afa2:	4628      	mov	r0, r5
    afa4:	f7ff fd47 	bl	aa36 <smp_error>
    afa8:	bd70      	pop	{r4, r5, r6, pc}
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    afaa:	2107      	movs	r1, #7
    afac:	4628      	mov	r0, r5
    afae:	f7ff fd42 	bl	aa36 <smp_error>
		return;
    afb2:	bd70      	pop	{r4, r5, r6, pc}
	if (buf->len != handlers[hdr->code].expect_len) {
    afb4:	89a1      	ldrh	r1, [r4, #12]
    afb6:	7832      	ldrb	r2, [r6, #0]
    afb8:	4b0b      	ldr	r3, [pc, #44]	; (afe8 <bt_smp_recv+0xb8>)
    afba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    afbe:	791b      	ldrb	r3, [r3, #4]
    afc0:	4299      	cmp	r1, r3
    afc2:	d004      	beq.n	afce <bt_smp_recv+0x9e>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    afc4:	210a      	movs	r1, #10
    afc6:	4628      	mov	r0, r5
    afc8:	f7ff fd35 	bl	aa36 <smp_error>
		return;
    afcc:	bd70      	pop	{r4, r5, r6, pc}
	err = handlers[hdr->code].func(smp, buf);
    afce:	4b06      	ldr	r3, [pc, #24]	; (afe8 <bt_smp_recv+0xb8>)
    afd0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    afd4:	4621      	mov	r1, r4
    afd6:	4628      	mov	r0, r5
    afd8:	4798      	blx	r3
	if (err) {
    afda:	4601      	mov	r1, r0
    afdc:	2800      	cmp	r0, #0
    afde:	d0ab      	beq.n	af38 <bt_smp_recv+0x8>
		smp_error(smp, err);
    afe0:	4628      	mov	r0, r5
    afe2:	f7ff fd28 	bl	aa36 <smp_error>
    afe6:	e7a7      	b.n	af38 <bt_smp_recv+0x8>
    afe8:	0002f918 	.word	0x0002f918

0000afec <smp_dhkey_check>:
{
    afec:	b570      	push	{r4, r5, r6, lr}
    afee:	b08c      	sub	sp, #48	; 0x30
    aff0:	4605      	mov	r5, r0
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    aff2:	688e      	ldr	r6, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    aff4:	6803      	ldr	r3, [r0, #0]
    aff6:	78dc      	ldrb	r4, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    aff8:	b12c      	cbz	r4, b006 <smp_dhkey_check+0x1a>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    affa:	2c01      	cmp	r4, #1
    affc:	d058      	beq.n	b0b0 <smp_dhkey_check+0xc4>
	return 0;
    affe:	2400      	movs	r4, #0
}
    b000:	4620      	mov	r0, r4
    b002:	b00c      	add	sp, #48	; 0x30
    b004:	bd70      	pop	{r4, r5, r6, pc}
		memset(r, 0, sizeof(r));
    b006:	2210      	movs	r2, #16
    b008:	2100      	movs	r1, #0
    b00a:	a808      	add	r0, sp, #32
    b00c:	f01e fb64 	bl	296d8 <memset>
		switch (smp->method) {
    b010:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    b014:	2b03      	cmp	r3, #3
    b016:	d847      	bhi.n	b0a8 <smp_dhkey_check+0xbc>
    b018:	e8df f003 	tbb	[pc, r3]
    b01c:	08020208 	.word	0x08020208
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    b020:	2204      	movs	r2, #4
    b022:	f505 71ba 	add.w	r1, r5, #372	; 0x174
    b026:	a808      	add	r0, sp, #32
    b028:	f7f5 f94a 	bl	2c0 <memcpy>
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    b02c:	f105 02ad 	add.w	r2, r5, #173	; 0xad
			   &smp->chan.chan.conn->le.resp_addr,
    b030:	682b      	ldr	r3, [r5, #0]
    b032:	f103 0156 	add.w	r1, r3, #86	; 0x56
			   &smp->chan.chan.conn->le.init_addr, e)) {
    b036:	334f      	adds	r3, #79	; 0x4f
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    b038:	a804      	add	r0, sp, #16
    b03a:	9003      	str	r0, [sp, #12]
    b03c:	9302      	str	r3, [sp, #8]
    b03e:	9101      	str	r1, [sp, #4]
    b040:	9200      	str	r2, [sp, #0]
    b042:	ab08      	add	r3, sp, #32
    b044:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
    b048:	f105 01d3 	add.w	r1, r5, #211	; 0xd3
    b04c:	f205 1063 	addw	r0, r5, #355	; 0x163
    b050:	f7ff f96e 	bl	a330 <smp_f6>
    b054:	b108      	cbz	r0, b05a <smp_dhkey_check+0x6e>
			return BT_SMP_ERR_UNSPECIFIED;
    b056:	2408      	movs	r4, #8
    b058:	e7d2      	b.n	b000 <smp_dhkey_check+0x14>
		if (memcmp(e, req->e, 16)) {
    b05a:	2210      	movs	r2, #16
    b05c:	4631      	mov	r1, r6
    b05e:	eb0d 0002 	add.w	r0, sp, r2
    b062:	f01e faa5 	bl	295b0 <memcmp>
    b066:	b108      	cbz	r0, b06c <smp_dhkey_check+0x80>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    b068:	240b      	movs	r4, #11
    b06a:	e7c9      	b.n	b000 <smp_dhkey_check+0x14>
		enc_size = get_encryption_key_size(smp);
    b06c:	4628      	mov	r0, r5
    b06e:	f7fe fe63 	bl	9d38 <get_encryption_key_size>
						smp->tk, enc_size) < 0) {
    b072:	f105 03e3 	add.w	r3, r5, #227	; 0xe3
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    b076:	9002      	str	r0, [sp, #8]
    b078:	9301      	str	r3, [sp, #4]
    b07a:	2300      	movs	r3, #0
    b07c:	9300      	str	r3, [sp, #0]
    b07e:	2200      	movs	r2, #0
    b080:	2300      	movs	r3, #0
    b082:	6828      	ldr	r0, [r5, #0]
    b084:	f7fb f898 	bl	61b8 <bt_conn_le_start_encryption>
    b088:	2800      	cmp	r0, #0
    b08a:	db0f      	blt.n	b0ac <smp_dhkey_check+0xc0>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b08c:	35a0      	adds	r5, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b08e:	f3bf 8f5b 	dmb	ish
    b092:	e855 3f00 	ldrex	r3, [r5]
    b096:	f043 0302 	orr.w	r3, r3, #2
    b09a:	e845 3200 	strex	r2, r3, [r5]
    b09e:	2a00      	cmp	r2, #0
    b0a0:	d1f7      	bne.n	b092 <smp_dhkey_check+0xa6>
    b0a2:	f3bf 8f5b 	dmb	ish
		return 0;
    b0a6:	e7ab      	b.n	b000 <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    b0a8:	2408      	movs	r4, #8
    b0aa:	e7a9      	b.n	b000 <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    b0ac:	2408      	movs	r4, #8
    b0ae:	e7a7      	b.n	b000 <smp_dhkey_check+0x14>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    b0b0:	f100 04a0 	add.w	r4, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b0b4:	f3bf 8f5b 	dmb	ish
    b0b8:	e854 3f00 	ldrex	r3, [r4]
    b0bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    b0c0:	e844 3200 	strex	r2, r3, [r4]
    b0c4:	2a00      	cmp	r2, #0
    b0c6:	d1f7      	bne.n	b0b8 <smp_dhkey_check+0xcc>
    b0c8:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
    b0cc:	2210      	movs	r2, #16
    b0ce:	4631      	mov	r1, r6
    b0d0:	f205 1053 	addw	r0, r5, #339	; 0x153
    b0d4:	f7f5 f8f4 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b0d8:	f3bf 8f5b 	dmb	ish
    b0dc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    b0e0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    b0e4:	f013 0f80 	tst.w	r3, #128	; 0x80
    b0e8:	d10d      	bne.n	b106 <smp_dhkey_check+0x11a>
    b0ea:	f3bf 8f5b 	dmb	ish
    b0ee:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    b0f2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    b0f6:	f413 7f00 	tst.w	r3, #512	; 0x200
    b0fa:	d112      	bne.n	b122 <smp_dhkey_check+0x136>
		return compute_and_check_and_send_slave_dhcheck(smp);
    b0fc:	4628      	mov	r0, r5
    b0fe:	f7ff f9f5 	bl	a4ec <compute_and_check_and_send_slave_dhcheck>
    b102:	4604      	mov	r4, r0
    b104:	e77c      	b.n	b000 <smp_dhkey_check+0x14>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b106:	f3bf 8f5b 	dmb	ish
    b10a:	e854 3f00 	ldrex	r3, [r4]
    b10e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b112:	e844 3200 	strex	r2, r3, [r4]
    b116:	2a00      	cmp	r2, #0
    b118:	d1f7      	bne.n	b10a <smp_dhkey_check+0x11e>
    b11a:	f3bf 8f5b 	dmb	ish
			return 0;
    b11e:	2400      	movs	r4, #0
    b120:	e76e      	b.n	b000 <smp_dhkey_check+0x14>
    b122:	f3bf 8f5b 	dmb	ish
    b126:	e854 3f00 	ldrex	r3, [r4]
    b12a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b12e:	e844 3200 	strex	r2, r3, [r4]
    b132:	2a00      	cmp	r2, #0
    b134:	d1f7      	bne.n	b126 <smp_dhkey_check+0x13a>
    b136:	f3bf 8f5b 	dmb	ish
			return 0;
    b13a:	2400      	movs	r4, #0
    b13c:	e760      	b.n	b000 <smp_dhkey_check+0x14>

0000b13e <legacy_pairing_random>:
{
    b13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b142:	b088      	sub	sp, #32
    b144:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b146:	4605      	mov	r5, r0
    b148:	f855 6be3 	ldr.w	r6, [r5], #227
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    b14c:	f100 08d3 	add.w	r8, r0, #211	; 0xd3
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    b150:	f106 034f 	add.w	r3, r6, #79	; 0x4f
    b154:	f106 0256 	add.w	r2, r6, #86	; 0x56
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    b158:	a904      	add	r1, sp, #16
    b15a:	9102      	str	r1, [sp, #8]
    b15c:	9201      	str	r2, [sp, #4]
    b15e:	9300      	str	r3, [sp, #0]
    b160:	f100 03ac 	add.w	r3, r0, #172	; 0xac
    b164:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
    b168:	4641      	mov	r1, r8
    b16a:	4628      	mov	r0, r5
    b16c:	f7ff fada 	bl	a724 <smp_c1>
	if (err) {
    b170:	b120      	cbz	r0, b17c <legacy_pairing_random+0x3e>
		return BT_SMP_ERR_UNSPECIFIED;
    b172:	2708      	movs	r7, #8
}
    b174:	4638      	mov	r0, r7
    b176:	b008      	add	sp, #32
    b178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    b17c:	2210      	movs	r2, #16
    b17e:	eb0d 0102 	add.w	r1, sp, r2
    b182:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    b186:	f01e fa13 	bl	295b0 <memcmp>
    b18a:	b108      	cbz	r0, b190 <legacy_pairing_random+0x52>
		return BT_SMP_ERR_CONFIRM_FAILED;
    b18c:	2704      	movs	r7, #4
    b18e:	e7f1      	b.n	b174 <legacy_pairing_random+0x36>
	    conn->role == BT_HCI_ROLE_MASTER) {
    b190:	78f7      	ldrb	r7, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b192:	bb3f      	cbnz	r7, b1e4 <legacy_pairing_random+0xa6>
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
    b194:	ab04      	add	r3, sp, #16
    b196:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    b19a:	4641      	mov	r1, r8
    b19c:	4628      	mov	r0, r5
    b19e:	f7ff fbf0 	bl	a982 <smp_s1>
		if (err) {
    b1a2:	b108      	cbz	r0, b1a8 <legacy_pairing_random+0x6a>
			return BT_SMP_ERR_UNSPECIFIED;
    b1a4:	2708      	movs	r7, #8
    b1a6:	e7e5      	b.n	b174 <legacy_pairing_random+0x36>
						get_encryption_key_size(smp))) {
    b1a8:	4620      	mov	r0, r4
    b1aa:	f7fe fdc5 	bl	9d38 <get_encryption_key_size>
		if (bt_conn_le_start_encryption(conn, 0, 0, tmp,
    b1ae:	9002      	str	r0, [sp, #8]
    b1b0:	ab04      	add	r3, sp, #16
    b1b2:	9301      	str	r3, [sp, #4]
    b1b4:	2300      	movs	r3, #0
    b1b6:	9300      	str	r3, [sp, #0]
    b1b8:	2200      	movs	r2, #0
    b1ba:	2300      	movs	r3, #0
    b1bc:	4630      	mov	r0, r6
    b1be:	f7fa fffb 	bl	61b8 <bt_conn_le_start_encryption>
    b1c2:	b108      	cbz	r0, b1c8 <legacy_pairing_random+0x8a>
			return BT_SMP_ERR_UNSPECIFIED;
    b1c4:	2708      	movs	r7, #8
    b1c6:	e7d5      	b.n	b174 <legacy_pairing_random+0x36>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b1c8:	34a0      	adds	r4, #160	; 0xa0
    b1ca:	f3bf 8f5b 	dmb	ish
    b1ce:	e854 3f00 	ldrex	r3, [r4]
    b1d2:	f043 0302 	orr.w	r3, r3, #2
    b1d6:	e844 3200 	strex	r2, r3, [r4]
    b1da:	2a00      	cmp	r2, #0
    b1dc:	d1f7      	bne.n	b1ce <legacy_pairing_random+0x90>
    b1de:	f3bf 8f5b 	dmb	ish
		return 0;
    b1e2:	e7c7      	b.n	b174 <legacy_pairing_random+0x36>
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
    b1e4:	ab04      	add	r3, sp, #16
    b1e6:	4642      	mov	r2, r8
    b1e8:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    b1ec:	4628      	mov	r0, r5
    b1ee:	f7ff fbc8 	bl	a982 <smp_s1>
		if (err) {
    b1f2:	b108      	cbz	r0, b1f8 <legacy_pairing_random+0xba>
			return BT_SMP_ERR_UNSPECIFIED;
    b1f4:	2708      	movs	r7, #8
    b1f6:	e7bd      	b.n	b174 <legacy_pairing_random+0x36>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    b1f8:	2210      	movs	r2, #16
    b1fa:	eb0d 0102 	add.w	r1, sp, r2
    b1fe:	4628      	mov	r0, r5
    b200:	f7f5 f85e 	bl	2c0 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b204:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    b208:	f3bf 8f5b 	dmb	ish
    b20c:	e853 2f00 	ldrex	r2, [r3]
    b210:	f042 0202 	orr.w	r2, r2, #2
    b214:	e843 2100 	strex	r1, r2, [r3]
    b218:	2900      	cmp	r1, #0
    b21a:	d1f7      	bne.n	b20c <legacy_pairing_random+0xce>
    b21c:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    b220:	4620      	mov	r0, r4
    b222:	f7fe feea 	bl	9ffa <smp_send_pairing_random>
	return 0;
    b226:	2700      	movs	r7, #0
    b228:	e7a4      	b.n	b174 <legacy_pairing_random+0x36>
	...

0000b22c <smp_pairing_random>:
{
    b22c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b22e:	b085      	sub	sp, #20
    b230:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    b232:	f100 05d3 	add.w	r5, r0, #211	; 0xd3
    b236:	2210      	movs	r2, #16
    b238:	6889      	ldr	r1, [r1, #8]
    b23a:	4628      	mov	r0, r5
    b23c:	f7f5 f840 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b240:	f3bf 8f5b 	dmb	ish
    b244:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b248:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b24c:	f013 0f20 	tst.w	r3, #32
    b250:	d00d      	beq.n	b26e <smp_pairing_random+0x42>
    b252:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b256:	6823      	ldr	r3, [r4, #0]
    b258:	78db      	ldrb	r3, [r3, #3]
    b25a:	b17b      	cbz	r3, b27c <smp_pairing_random+0x50>
	switch (smp->method) {
    b25c:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b260:	2b03      	cmp	r3, #3
    b262:	f200 8106 	bhi.w	b472 <smp_pairing_random+0x246>
    b266:	e8df f003 	tbb	[pc, r3]
    b26a:	bfa0      	.short	0xbfa0
    b26c:	81bf      	.short	0x81bf
		return legacy_pairing_random(smp);
    b26e:	4620      	mov	r0, r4
    b270:	f7ff ff65 	bl	b13e <legacy_pairing_random>
    b274:	4606      	mov	r6, r0
}
    b276:	4630      	mov	r0, r6
    b278:	b005      	add	sp, #20
    b27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sc_smp_check_confirm(smp);
    b27c:	4620      	mov	r0, r4
    b27e:	f7fe ff83 	bl	a188 <sc_smp_check_confirm>
		if (err) {
    b282:	4606      	mov	r6, r0
    b284:	2800      	cmp	r0, #0
    b286:	d1f6      	bne.n	b276 <smp_pairing_random+0x4a>
		switch (smp->method) {
    b288:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b28c:	2b03      	cmp	r3, #3
    b28e:	f200 80ee 	bhi.w	b46e <smp_pairing_random+0x242>
    b292:	e8df f003 	tbb	[pc, r3]
    b296:	2e50      	.short	0x2e50
    b298:	022e      	.short	0x022e
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
    b29a:	ab03      	add	r3, sp, #12
    b29c:	9300      	str	r3, [sp, #0]
    b29e:	462b      	mov	r3, r5
    b2a0:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    b2a4:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    b2a8:	4873      	ldr	r0, [pc, #460]	; (b478 <smp_pairing_random+0x24c>)
    b2aa:	f7ff f995 	bl	a5d8 <smp_g2>
    b2ae:	b108      	cbz	r0, b2b4 <smp_pairing_random+0x88>
				return BT_SMP_ERR_UNSPECIFIED;
    b2b0:	2608      	movs	r6, #8
    b2b2:	e7e0      	b.n	b276 <smp_pairing_random+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b2b4:	f3bf 8f5b 	dmb	ish
    b2b8:	e857 3f00 	ldrex	r3, [r7]
    b2bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b2c0:	e847 3200 	strex	r2, r3, [r7]
    b2c4:	2a00      	cmp	r2, #0
    b2c6:	d1f7      	bne.n	b2b8 <smp_pairing_random+0x8c>
    b2c8:	f3bf 8f5b 	dmb	ish
    b2cc:	f3bf 8f5b 	dmb	ish
    b2d0:	e857 3f00 	ldrex	r3, [r7]
    b2d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b2d8:	e847 3200 	strex	r2, r3, [r7]
    b2dc:	2a00      	cmp	r2, #0
    b2de:	d1f7      	bne.n	b2d0 <smp_pairing_random+0xa4>
    b2e0:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    b2e4:	4b65      	ldr	r3, [pc, #404]	; (b47c <smp_pairing_random+0x250>)
    b2e6:	681b      	ldr	r3, [r3, #0]
    b2e8:	689b      	ldr	r3, [r3, #8]
    b2ea:	9903      	ldr	r1, [sp, #12]
    b2ec:	6820      	ldr	r0, [r4, #0]
    b2ee:	4798      	blx	r3
			return 0;
    b2f0:	e7c1      	b.n	b276 <smp_pairing_random+0x4a>
			smp->passkey_round++;
    b2f2:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    b2f6:	3301      	adds	r3, #1
    b2f8:	b2db      	uxtb	r3, r3
    b2fa:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			if (smp->passkey_round == 20) {
    b2fe:	2b14      	cmp	r3, #20
    b300:	d019      	beq.n	b336 <smp_pairing_random+0x10a>
			if (bt_rand(smp->prnd, 16)) {
    b302:	2110      	movs	r1, #16
    b304:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    b308:	f005 fb9e 	bl	10a48 <bt_rand>
    b30c:	b108      	cbz	r0, b312 <smp_pairing_random+0xe6>
				return BT_SMP_ERR_UNSPECIFIED;
    b30e:	2608      	movs	r6, #8
    b310:	e7b1      	b.n	b276 <smp_pairing_random+0x4a>
			atomic_set_bit(&smp->allowed_cmds,
    b312:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b316:	f3bf 8f5b 	dmb	ish
    b31a:	e853 2f00 	ldrex	r2, [r3]
    b31e:	f042 0208 	orr.w	r2, r2, #8
    b322:	e843 2100 	strex	r1, r2, [r3]
    b326:	2900      	cmp	r1, #0
    b328:	d1f7      	bne.n	b31a <smp_pairing_random+0xee>
    b32a:	f3bf 8f5b 	dmb	ish
			smp_send_pairing_confirm(smp);
    b32e:	4620      	mov	r0, r4
    b330:	f7ff f9aa 	bl	a688 <smp_send_pairing_confirm>
			return 0;
    b334:	e79f      	b.n	b276 <smp_pairing_random+0x4a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b336:	f3bf 8f5b 	dmb	ish
    b33a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b33e:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    b342:	f013 0f80 	tst.w	r3, #128	; 0x80
    b346:	d00c      	beq.n	b362 <smp_pairing_random+0x136>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b348:	f3bf 8f5b 	dmb	ish
    b34c:	e857 3f00 	ldrex	r3, [r7]
    b350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b354:	e847 3200 	strex	r2, r3, [r7]
    b358:	2a00      	cmp	r2, #0
    b35a:	d1f7      	bne.n	b34c <smp_pairing_random+0x120>
    b35c:	f3bf 8f5b 	dmb	ish
			return 0;
    b360:	e789      	b.n	b276 <smp_pairing_random+0x4a>
		return compute_and_send_master_dhcheck(smp);
    b362:	4620      	mov	r0, r4
    b364:	f7ff f868 	bl	a438 <compute_and_send_master_dhcheck>
    b368:	4606      	mov	r6, r0
    b36a:	e784      	b.n	b276 <smp_pairing_random+0x4a>
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    b36c:	ab03      	add	r3, sp, #12
    b36e:	9300      	str	r3, [sp, #0]
    b370:	f104 03c3 	add.w	r3, r4, #195	; 0xc3
    b374:	462a      	mov	r2, r5
    b376:	4940      	ldr	r1, [pc, #256]	; (b478 <smp_pairing_random+0x24c>)
    b378:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    b37c:	f7ff f92c 	bl	a5d8 <smp_g2>
    b380:	b108      	cbz	r0, b386 <smp_pairing_random+0x15a>
			return BT_SMP_ERR_UNSPECIFIED;
    b382:	2608      	movs	r6, #8
    b384:	e777      	b.n	b276 <smp_pairing_random+0x4a>
    b386:	f3bf 8f5b 	dmb	ish
    b38a:	e857 3f00 	ldrex	r3, [r7]
    b38e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b392:	e847 3200 	strex	r2, r3, [r7]
    b396:	2a00      	cmp	r2, #0
    b398:	d1f7      	bne.n	b38a <smp_pairing_random+0x15e>
    b39a:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    b39e:	4b37      	ldr	r3, [pc, #220]	; (b47c <smp_pairing_random+0x250>)
    b3a0:	681b      	ldr	r3, [r3, #0]
    b3a2:	689b      	ldr	r3, [r3, #8]
    b3a4:	9903      	ldr	r1, [sp, #12]
    b3a6:	6820      	ldr	r0, [r4, #0]
    b3a8:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    b3aa:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b3ae:	f3bf 8f5b 	dmb	ish
    b3b2:	e853 2f00 	ldrex	r2, [r3]
    b3b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    b3ba:	e843 2100 	strex	r1, r2, [r3]
    b3be:	2900      	cmp	r1, #0
    b3c0:	d1f7      	bne.n	b3b2 <smp_pairing_random+0x186>
    b3c2:	f3bf 8f5b 	dmb	ish
    b3c6:	f3bf 8f5b 	dmb	ish
    b3ca:	e857 3f00 	ldrex	r3, [r7]
    b3ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    b3d2:	e847 3200 	strex	r2, r3, [r7]
    b3d6:	2a00      	cmp	r2, #0
    b3d8:	d1f7      	bne.n	b3ca <smp_pairing_random+0x19e>
    b3da:	f3bf 8f5b 	dmb	ish
	smp_send_pairing_random(smp);
    b3de:	4620      	mov	r0, r4
    b3e0:	f7fe fe0b 	bl	9ffa <smp_send_pairing_random>
	return 0;
    b3e4:	2600      	movs	r6, #0
    b3e6:	e746      	b.n	b276 <smp_pairing_random+0x4a>
		err = sc_smp_check_confirm(smp);
    b3e8:	4620      	mov	r0, r4
    b3ea:	f7fe fecd 	bl	a188 <sc_smp_check_confirm>
		if (err) {
    b3ee:	4606      	mov	r6, r0
    b3f0:	2800      	cmp	r0, #0
    b3f2:	f47f af40 	bne.w	b276 <smp_pairing_random+0x4a>
		atomic_set_bit(&smp->allowed_cmds,
    b3f6:	f104 059c 	add.w	r5, r4, #156	; 0x9c
    b3fa:	f3bf 8f5b 	dmb	ish
    b3fe:	e855 3f00 	ldrex	r3, [r5]
    b402:	f043 0308 	orr.w	r3, r3, #8
    b406:	e845 3200 	strex	r2, r3, [r5]
    b40a:	2a00      	cmp	r2, #0
    b40c:	d1f7      	bne.n	b3fe <smp_pairing_random+0x1d2>
    b40e:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    b412:	4620      	mov	r0, r4
    b414:	f7fe fdf1 	bl	9ffa <smp_send_pairing_random>
		smp->passkey_round++;
    b418:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    b41c:	3301      	adds	r3, #1
    b41e:	b2db      	uxtb	r3, r3
    b420:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		if (smp->passkey_round == 20) {
    b424:	2b14      	cmp	r3, #20
    b426:	d009      	beq.n	b43c <smp_pairing_random+0x210>
		if (bt_rand(smp->prnd, 16)) {
    b428:	2110      	movs	r1, #16
    b42a:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    b42e:	f005 fb0b 	bl	10a48 <bt_rand>
    b432:	2800      	cmp	r0, #0
    b434:	f43f af1f 	beq.w	b276 <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    b438:	2608      	movs	r6, #8
    b43a:	e71c      	b.n	b276 <smp_pairing_random+0x4a>
    b43c:	f3bf 8f5b 	dmb	ish
    b440:	e855 3f00 	ldrex	r3, [r5]
    b444:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    b448:	e845 3200 	strex	r2, r3, [r5]
    b44c:	2a00      	cmp	r2, #0
    b44e:	d1f7      	bne.n	b440 <smp_pairing_random+0x214>
    b450:	f3bf 8f5b 	dmb	ish
    b454:	f3bf 8f5b 	dmb	ish
    b458:	e857 3f00 	ldrex	r3, [r7]
    b45c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    b460:	e847 3200 	strex	r2, r3, [r7]
    b464:	2a00      	cmp	r2, #0
    b466:	d1f7      	bne.n	b458 <smp_pairing_random+0x22c>
    b468:	f3bf 8f5b 	dmb	ish
			return 0;
    b46c:	e703      	b.n	b276 <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    b46e:	2608      	movs	r6, #8
    b470:	e701      	b.n	b276 <smp_pairing_random+0x4a>
		return BT_SMP_ERR_UNSPECIFIED;
    b472:	2608      	movs	r6, #8
    b474:	e6ff      	b.n	b276 <smp_pairing_random+0x4a>
    b476:	bf00      	nop
    b478:	20000864 	.word	0x20000864
    b47c:	200028a8 	.word	0x200028a8

0000b480 <generate_dhkey>:
{
    b480:	b510      	push	{r4, lr}
    b482:	4604      	mov	r4, r0
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    b484:	490a      	ldr	r1, [pc, #40]	; (b4b0 <generate_dhkey+0x30>)
    b486:	30f3      	adds	r0, #243	; 0xf3
    b488:	f7fa fd1e 	bl	5ec8 <bt_dh_key_gen>
    b48c:	b108      	cbz	r0, b492 <generate_dhkey+0x12>
		return BT_SMP_ERR_UNSPECIFIED;
    b48e:	2008      	movs	r0, #8
}
    b490:	bd10      	pop	{r4, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    b492:	34a0      	adds	r4, #160	; 0xa0
    b494:	f3bf 8f5b 	dmb	ish
    b498:	e854 3f00 	ldrex	r3, [r4]
    b49c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b4a0:	e844 3200 	strex	r2, r3, [r4]
    b4a4:	2a00      	cmp	r2, #0
    b4a6:	d1f7      	bne.n	b498 <generate_dhkey+0x18>
    b4a8:	f3bf 8f5b 	dmb	ish
	return 0;
    b4ac:	bd10      	pop	{r4, pc}
    b4ae:	bf00      	nop
    b4b0:	0000aa71 	.word	0x0000aa71

0000b4b4 <smp_public_key_slave>:
{
    b4b4:	b510      	push	{r4, lr}
    b4b6:	4604      	mov	r4, r0
	err = sc_send_public_key(smp);
    b4b8:	f7fe fd60 	bl	9f7c <sc_send_public_key>
	if (err) {
    b4bc:	4603      	mov	r3, r0
    b4be:	2800      	cmp	r0, #0
    b4c0:	d154      	bne.n	b56c <smp_public_key_slave+0xb8>
	switch (smp->method) {
    b4c2:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b4c6:	2b03      	cmp	r3, #3
    b4c8:	d852      	bhi.n	b570 <smp_public_key_slave+0xbc>
    b4ca:	e8df f003 	tbb	[pc, r3]
    b4ce:	2a02      	.short	0x2a02
    b4d0:	0216      	.short	0x0216
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b4d2:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b4d6:	f3bf 8f5b 	dmb	ish
    b4da:	e853 2f00 	ldrex	r2, [r3]
    b4de:	f042 0210 	orr.w	r2, r2, #16
    b4e2:	e843 2100 	strex	r1, r2, [r3]
    b4e6:	2900      	cmp	r1, #0
    b4e8:	d1f7      	bne.n	b4da <smp_public_key_slave+0x26>
    b4ea:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_confirm(smp);
    b4ee:	4620      	mov	r0, r4
    b4f0:	f7ff f8ca 	bl	a688 <smp_send_pairing_confirm>
		if (err) {
    b4f4:	4603      	mov	r3, r0
    b4f6:	b3a8      	cbz	r0, b564 <smp_public_key_slave+0xb0>
    b4f8:	e038      	b.n	b56c <smp_public_key_slave+0xb8>
		err = display_passkey(smp);
    b4fa:	4620      	mov	r0, r4
    b4fc:	f7fe fcea 	bl	9ed4 <display_passkey>
		if (err) {
    b500:	4603      	mov	r3, r0
    b502:	bb98      	cbnz	r0, b56c <smp_public_key_slave+0xb8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    b504:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b508:	f3bf 8f5b 	dmb	ish
    b50c:	e853 2f00 	ldrex	r2, [r3]
    b510:	f042 0208 	orr.w	r2, r2, #8
    b514:	e843 2100 	strex	r1, r2, [r3]
    b518:	2900      	cmp	r1, #0
    b51a:	d1f7      	bne.n	b50c <smp_public_key_slave+0x58>
    b51c:	f3bf 8f5b 	dmb	ish
    b520:	e020      	b.n	b564 <smp_public_key_slave+0xb0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    b522:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b526:	f3bf 8f5b 	dmb	ish
    b52a:	e853 2f00 	ldrex	r2, [r3]
    b52e:	f042 0208 	orr.w	r2, r2, #8
    b532:	e843 2100 	strex	r1, r2, [r3]
    b536:	2900      	cmp	r1, #0
    b538:	d1f7      	bne.n	b52a <smp_public_key_slave+0x76>
    b53a:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    b53e:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    b542:	f3bf 8f5b 	dmb	ish
    b546:	e853 2f00 	ldrex	r2, [r3]
    b54a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    b54e:	e843 2100 	strex	r1, r2, [r3]
    b552:	2900      	cmp	r1, #0
    b554:	d1f7      	bne.n	b546 <smp_public_key_slave+0x92>
    b556:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(smp->chan.chan.conn);
    b55a:	4b06      	ldr	r3, [pc, #24]	; (b574 <smp_public_key_slave+0xc0>)
    b55c:	681b      	ldr	r3, [r3, #0]
    b55e:	685b      	ldr	r3, [r3, #4]
    b560:	6820      	ldr	r0, [r4, #0]
    b562:	4798      	blx	r3
	return generate_dhkey(smp);
    b564:	4620      	mov	r0, r4
    b566:	f7ff ff8b 	bl	b480 <generate_dhkey>
    b56a:	4603      	mov	r3, r0
}
    b56c:	4618      	mov	r0, r3
    b56e:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    b570:	2308      	movs	r3, #8
    b572:	e7fb      	b.n	b56c <smp_public_key_slave+0xb8>
    b574:	200028a8 	.word	0x200028a8

0000b578 <bt_smp_pkey_ready>:
{
    b578:	b538      	push	{r3, r4, r5, lr}
	if (!pkey) {
    b57a:	b150      	cbz	r0, b592 <bt_smp_pkey_ready+0x1a>
    b57c:	4601      	mov	r1, r0
	memcpy(sc_public_key, pkey, 64);
    b57e:	2240      	movs	r2, #64	; 0x40
    b580:	4826      	ldr	r0, [pc, #152]	; (b61c <bt_smp_pkey_ready+0xa4>)
    b582:	f7f4 fe9d 	bl	2c0 <memcpy>
	sc_local_pkey_valid = true;
    b586:	2201      	movs	r2, #1
    b588:	4b25      	ldr	r3, [pc, #148]	; (b620 <bt_smp_pkey_ready+0xa8>)
    b58a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b58c:	2400      	movs	r4, #0
    b58e:	b124      	cbz	r4, b59a <bt_smp_pkey_ready+0x22>
    b590:	bd38      	pop	{r3, r4, r5, pc}
		sc_local_pkey_valid = false;
    b592:	2200      	movs	r2, #0
    b594:	4b22      	ldr	r3, [pc, #136]	; (b620 <bt_smp_pkey_ready+0xa8>)
    b596:	701a      	strb	r2, [r3, #0]
		return;
    b598:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_smp *smp = &bt_smp_pool[i];
    b59a:	4a22      	ldr	r2, [pc, #136]	; (b624 <bt_smp_pkey_ready+0xac>)
    b59c:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    b5a0:	fb03 f304 	mul.w	r3, r3, r4
    b5a4:	18d5      	adds	r5, r2, r3
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    b5a6:	33a0      	adds	r3, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b5a8:	f3bf 8f5b 	dmb	ish
    b5ac:	58d3      	ldr	r3, [r2, r3]
    b5ae:	f3bf 8f5b 	dmb	ish
    b5b2:	f013 0f40 	tst.w	r3, #64	; 0x40
    b5b6:	d020      	beq.n	b5fa <bt_smp_pkey_ready+0x82>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b5b8:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    b5bc:	fb03 f304 	mul.w	r3, r3, r4
    b5c0:	58d3      	ldr	r3, [r2, r3]
    b5c2:	78db      	ldrb	r3, [r3, #3]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b5c4:	b9fb      	cbnz	r3, b606 <bt_smp_pkey_ready+0x8e>
			err = sc_send_public_key(smp);
    b5c6:	4628      	mov	r0, r5
    b5c8:	f7fe fcd8 	bl	9f7c <sc_send_public_key>
			if (err) {
    b5cc:	4601      	mov	r1, r0
    b5ce:	b9b0      	cbnz	r0, b5fe <bt_smp_pkey_ready+0x86>
			atomic_set_bit(&smp->allowed_cmds,
    b5d0:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    b5d4:	fb03 f304 	mul.w	r3, r3, r4
    b5d8:	f103 0298 	add.w	r2, r3, #152	; 0x98
    b5dc:	4b11      	ldr	r3, [pc, #68]	; (b624 <bt_smp_pkey_ready+0xac>)
    b5de:	4413      	add	r3, r2
    b5e0:	3304      	adds	r3, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b5e2:	f3bf 8f5b 	dmb	ish
    b5e6:	e853 2f00 	ldrex	r2, [r3]
    b5ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    b5ee:	e843 2100 	strex	r1, r2, [r3]
    b5f2:	2900      	cmp	r1, #0
    b5f4:	d1f7      	bne.n	b5e6 <bt_smp_pkey_ready+0x6e>
    b5f6:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b5fa:	3401      	adds	r4, #1
    b5fc:	e7c7      	b.n	b58e <bt_smp_pkey_ready+0x16>
				smp_error(smp, err);
    b5fe:	4628      	mov	r0, r5
    b600:	f7ff fa19 	bl	aa36 <smp_error>
    b604:	e7e4      	b.n	b5d0 <bt_smp_pkey_ready+0x58>
		err = smp_public_key_slave(smp);
    b606:	4628      	mov	r0, r5
    b608:	f7ff ff54 	bl	b4b4 <smp_public_key_slave>
		if (err) {
    b60c:	4601      	mov	r1, r0
    b60e:	2800      	cmp	r0, #0
    b610:	d0f3      	beq.n	b5fa <bt_smp_pkey_ready+0x82>
			smp_error(smp, err);
    b612:	4628      	mov	r0, r5
    b614:	f7ff fa0f 	bl	aa36 <smp_error>
    b618:	e7ef      	b.n	b5fa <bt_smp_pkey_ready+0x82>
    b61a:	bf00      	nop
    b61c:	20000864 	.word	0x20000864
    b620:	20000860 	.word	0x20000860
    b624:	200006bc 	.word	0x200006bc

0000b628 <smp_public_key>:
{
    b628:	b570      	push	{r4, r5, r6, lr}
    b62a:	4604      	mov	r4, r0
	struct bt_smp_public_key *req = (void *)buf->data;
    b62c:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    b62e:	f100 05f3 	add.w	r5, r0, #243	; 0xf3
    b632:	2220      	movs	r2, #32
    b634:	4631      	mov	r1, r6
    b636:	4628      	mov	r0, r5
    b638:	f7f4 fe42 	bl	2c0 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    b63c:	2220      	movs	r2, #32
    b63e:	18b1      	adds	r1, r6, r2
    b640:	f204 1013 	addw	r0, r4, #275	; 0x113
    b644:	f7f4 fe3c 	bl	2c0 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    b648:	2240      	movs	r2, #64	; 0x40
    b64a:	493d      	ldr	r1, [pc, #244]	; (b740 <smp_public_key+0x118>)
    b64c:	4628      	mov	r0, r5
    b64e:	f01d ffaf 	bl	295b0 <memcmp>
    b652:	b158      	cbz	r0, b66c <smp_public_key+0x44>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b654:	6823      	ldr	r3, [r4, #0]
    b656:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b658:	2b00      	cmp	r3, #0
    b65a:	d156      	bne.n	b70a <smp_public_key+0xe2>
		switch (smp->method) {
    b65c:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b660:	2b03      	cmp	r3, #3
    b662:	d86a      	bhi.n	b73a <smp_public_key+0x112>
    b664:	e8df f003 	tbb	[pc, r3]
    b668:	11243d11 	.word	0x11243d11
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    b66c:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    b670:	f3bf 8f5b 	dmb	ish
    b674:	e853 2f00 	ldrex	r2, [r3]
    b678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b67c:	e843 2100 	strex	r1, r2, [r3]
    b680:	2900      	cmp	r1, #0
    b682:	d1f7      	bne.n	b674 <smp_public_key+0x4c>
    b684:	f3bf 8f5b 	dmb	ish
    b688:	e7e4      	b.n	b654 <smp_public_key+0x2c>
			atomic_set_bit(&smp->allowed_cmds,
    b68a:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b68e:	f3bf 8f5b 	dmb	ish
    b692:	e853 2f00 	ldrex	r2, [r3]
    b696:	f042 0208 	orr.w	r2, r2, #8
    b69a:	e843 2100 	strex	r1, r2, [r3]
    b69e:	2900      	cmp	r1, #0
    b6a0:	d1f7      	bne.n	b692 <smp_public_key+0x6a>
    b6a2:	f3bf 8f5b 	dmb	ish
		return generate_dhkey(smp);
    b6a6:	4620      	mov	r0, r4
    b6a8:	f7ff feea 	bl	b480 <generate_dhkey>
    b6ac:	4603      	mov	r3, r0
    b6ae:	e033      	b.n	b718 <smp_public_key+0xf0>
			err = display_passkey(smp);
    b6b0:	4620      	mov	r0, r4
    b6b2:	f7fe fc0f 	bl	9ed4 <display_passkey>
			if (err) {
    b6b6:	4603      	mov	r3, r0
    b6b8:	bb70      	cbnz	r0, b718 <smp_public_key+0xf0>
			atomic_set_bit(&smp->allowed_cmds,
    b6ba:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b6be:	f3bf 8f5b 	dmb	ish
    b6c2:	e853 2f00 	ldrex	r2, [r3]
    b6c6:	f042 0208 	orr.w	r2, r2, #8
    b6ca:	e843 2100 	strex	r1, r2, [r3]
    b6ce:	2900      	cmp	r1, #0
    b6d0:	d1f7      	bne.n	b6c2 <smp_public_key+0x9a>
    b6d2:	f3bf 8f5b 	dmb	ish
			err = smp_send_pairing_confirm(smp);
    b6d6:	4620      	mov	r0, r4
    b6d8:	f7fe ffd6 	bl	a688 <smp_send_pairing_confirm>
			if (err) {
    b6dc:	4603      	mov	r3, r0
    b6de:	b9d8      	cbnz	r0, b718 <smp_public_key+0xf0>
    b6e0:	e7e1      	b.n	b6a6 <smp_public_key+0x7e>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    b6e2:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    b6e6:	f3bf 8f5b 	dmb	ish
    b6ea:	e853 2f00 	ldrex	r2, [r3]
    b6ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    b6f2:	e843 2100 	strex	r1, r2, [r3]
    b6f6:	2900      	cmp	r1, #0
    b6f8:	d1f7      	bne.n	b6ea <smp_public_key+0xc2>
    b6fa:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_entry(smp->chan.chan.conn);
    b6fe:	4b11      	ldr	r3, [pc, #68]	; (b744 <smp_public_key+0x11c>)
    b700:	681b      	ldr	r3, [r3, #0]
    b702:	685b      	ldr	r3, [r3, #4]
    b704:	6820      	ldr	r0, [r4, #0]
    b706:	4798      	blx	r3
			break;
    b708:	e7cd      	b.n	b6a6 <smp_public_key+0x7e>
	if (!sc_local_pkey_valid) {
    b70a:	4b0f      	ldr	r3, [pc, #60]	; (b748 <smp_public_key+0x120>)
    b70c:	781b      	ldrb	r3, [r3, #0]
    b70e:	b12b      	cbz	r3, b71c <smp_public_key+0xf4>
	err = smp_public_key_slave(smp);
    b710:	4620      	mov	r0, r4
    b712:	f7ff fecf 	bl	b4b4 <smp_public_key_slave>
    b716:	4603      	mov	r3, r0
}
    b718:	4618      	mov	r0, r3
    b71a:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    b71c:	34a0      	adds	r4, #160	; 0xa0
    b71e:	f3bf 8f5b 	dmb	ish
    b722:	e854 3f00 	ldrex	r3, [r4]
    b726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b72a:	e844 3200 	strex	r2, r3, [r4]
    b72e:	2a00      	cmp	r2, #0
    b730:	d1f7      	bne.n	b722 <smp_public_key+0xfa>
    b732:	f3bf 8f5b 	dmb	ish
		return 0;
    b736:	2300      	movs	r3, #0
    b738:	e7ee      	b.n	b718 <smp_public_key+0xf0>
			return BT_SMP_ERR_UNSPECIFIED;
    b73a:	2308      	movs	r3, #8
    b73c:	e7ec      	b.n	b718 <smp_public_key+0xf0>
    b73e:	bf00      	nop
    b740:	0002f9d8 	.word	0x0002f9d8
    b744:	200028a8 	.word	0x200028a8
    b748:	20000860 	.word	0x20000860

0000b74c <smp_signing_info>:
{
    b74c:	b570      	push	{r4, r5, r6, lr}
    b74e:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b750:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b752:	f3bf 8f5b 	dmb	ish
    b756:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    b75a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b75e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b762:	d111      	bne.n	b788 <smp_signing_info+0x3c>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    b764:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    b768:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    b76c:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    b770:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b772:	b902      	cbnz	r2, b776 <smp_signing_info+0x2a>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    b774:	b1ab      	cbz	r3, b7a2 <smp_signing_info+0x56>
	if (!smp->local_dist && !smp->remote_dist) {
    b776:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    b77a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b77e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b782:	b193      	cbz	r3, b7aa <smp_signing_info+0x5e>
	return 0;
    b784:	2000      	movs	r0, #0
}
    b786:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_signing_info *req = (void *)buf->data;
    b788:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    b78a:	f105 0148 	add.w	r1, r5, #72	; 0x48
    b78e:	2010      	movs	r0, #16
    b790:	f000 ff8e 	bl	c6b0 <bt_keys_get_type>
		if (!keys) {
    b794:	b178      	cbz	r0, b7b6 <smp_signing_info+0x6a>
		memcpy(keys->remote_csrk.val, req->csrk,
    b796:	2210      	movs	r2, #16
    b798:	4631      	mov	r1, r6
    b79a:	305c      	adds	r0, #92	; 0x5c
    b79c:	f7f4 fd90 	bl	2c0 <memcpy>
    b7a0:	e7e0      	b.n	b764 <smp_signing_info+0x18>
		bt_smp_distribute_keys(smp);
    b7a2:	4620      	mov	r0, r4
    b7a4:	f7ff fac4 	bl	ad30 <bt_smp_distribute_keys>
    b7a8:	e7e5      	b.n	b776 <smp_signing_info+0x2a>
		smp_pairing_complete(smp, 0);
    b7aa:	2100      	movs	r1, #0
    b7ac:	4620      	mov	r0, r4
    b7ae:	f7ff f93e 	bl	aa2e <smp_pairing_complete>
	return 0;
    b7b2:	2000      	movs	r0, #0
    b7b4:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    b7b6:	2008      	movs	r0, #8
    b7b8:	bd70      	pop	{r4, r5, r6, pc}

0000b7ba <smp_ident_info>:
{
    b7ba:	b538      	push	{r3, r4, r5, lr}
    b7bc:	4604      	mov	r4, r0
    b7be:	f3bf 8f5b 	dmb	ish
    b7c2:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    b7c6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b7ca:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b7ce:	d00b      	beq.n	b7e8 <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
    b7d0:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    b7d2:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    b7d4:	3148      	adds	r1, #72	; 0x48
    b7d6:	2002      	movs	r0, #2
    b7d8:	f000 ff6a 	bl	c6b0 <bt_keys_get_type>
		if (!keys) {
    b7dc:	b198      	cbz	r0, b806 <smp_ident_info+0x4c>
		memcpy(keys->irk.val, req->irk, 16);
    b7de:	2210      	movs	r2, #16
    b7e0:	4629      	mov	r1, r5
    b7e2:	3030      	adds	r0, #48	; 0x30
    b7e4:	f7f4 fd6c 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    b7e8:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b7ea:	f3bf 8f5b 	dmb	ish
    b7ee:	e854 3f00 	ldrex	r3, [r4]
    b7f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b7f6:	e844 3200 	strex	r2, r3, [r4]
    b7fa:	2a00      	cmp	r2, #0
    b7fc:	d1f7      	bne.n	b7ee <smp_ident_info+0x34>
    b7fe:	f3bf 8f5b 	dmb	ish
	return 0;
    b802:	2000      	movs	r0, #0
    b804:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    b806:	2008      	movs	r0, #8
}
    b808:	bd38      	pop	{r3, r4, r5, pc}

0000b80a <smp_master_ident>:
{
    b80a:	b570      	push	{r4, r5, r6, lr}
    b80c:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b80e:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b810:	f3bf 8f5b 	dmb	ish
    b814:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    b818:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b81c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b820:	d116      	bne.n	b850 <smp_master_ident+0x46>
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    b822:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    b826:	f013 0f02 	tst.w	r3, #2
    b82a:	d127      	bne.n	b87c <smp_master_ident+0x72>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    b82c:	f013 0f04 	tst.w	r3, #4
    b830:	d133      	bne.n	b89a <smp_master_ident+0x90>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    b832:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b834:	b91b      	cbnz	r3, b83e <smp_master_ident+0x34>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    b836:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    b83a:	2b00      	cmp	r3, #0
    b83c:	d03c      	beq.n	b8b8 <smp_master_ident+0xae>
	if (!smp->local_dist && !smp->remote_dist) {
    b83e:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    b842:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b846:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b84a:	b3cb      	cbz	r3, b8c0 <smp_master_ident+0xb6>
	return 0;
    b84c:	2000      	movs	r0, #0
}
    b84e:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_master_ident *req = (void *)buf->data;
    b850:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    b852:	f105 0148 	add.w	r1, r5, #72	; 0x48
    b856:	2004      	movs	r0, #4
    b858:	f000 ff2a 	bl	c6b0 <bt_keys_get_type>
		if (!keys) {
    b85c:	b3b0      	cbz	r0, b8cc <smp_master_ident+0xc2>
		keys->ltk.ediv = req->ediv;
    b85e:	8832      	ldrh	r2, [r6, #0]
    b860:	8302      	strh	r2, [r0, #24]
		keys->ltk.rand = req->rand;
    b862:	f8d6 1002 	ldr.w	r1, [r6, #2]
    b866:	f8d6 2006 	ldr.w	r2, [r6, #6]
    b86a:	6101      	str	r1, [r0, #16]
    b86c:	6142      	str	r2, [r0, #20]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    b86e:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    b872:	f023 0301 	bic.w	r3, r3, #1
    b876:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
    b87a:	e7d2      	b.n	b822 <smp_master_ident+0x18>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    b87c:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b880:	f3bf 8f5b 	dmb	ish
    b884:	e853 2f00 	ldrex	r2, [r3]
    b888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    b88c:	e843 2100 	strex	r1, r2, [r3]
    b890:	2900      	cmp	r1, #0
    b892:	d1f7      	bne.n	b884 <smp_master_ident+0x7a>
    b894:	f3bf 8f5b 	dmb	ish
    b898:	e7cb      	b.n	b832 <smp_master_ident+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    b89a:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b89e:	f3bf 8f5b 	dmb	ish
    b8a2:	e853 2f00 	ldrex	r2, [r3]
    b8a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    b8aa:	e843 2100 	strex	r1, r2, [r3]
    b8ae:	2900      	cmp	r1, #0
    b8b0:	d1f7      	bne.n	b8a2 <smp_master_ident+0x98>
    b8b2:	f3bf 8f5b 	dmb	ish
    b8b6:	e7bc      	b.n	b832 <smp_master_ident+0x28>
		bt_smp_distribute_keys(smp);
    b8b8:	4620      	mov	r0, r4
    b8ba:	f7ff fa39 	bl	ad30 <bt_smp_distribute_keys>
    b8be:	e7be      	b.n	b83e <smp_master_ident+0x34>
		smp_pairing_complete(smp, 0);
    b8c0:	2100      	movs	r1, #0
    b8c2:	4620      	mov	r0, r4
    b8c4:	f7ff f8b3 	bl	aa2e <smp_pairing_complete>
	return 0;
    b8c8:	2000      	movs	r0, #0
    b8ca:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    b8cc:	2008      	movs	r0, #8
    b8ce:	bd70      	pop	{r4, r5, r6, pc}

0000b8d0 <smp_encrypt_info>:
{
    b8d0:	b538      	push	{r3, r4, r5, lr}
    b8d2:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b8d4:	f3bf 8f5b 	dmb	ish
    b8d8:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    b8dc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b8e0:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b8e4:	d00b      	beq.n	b8fe <smp_encrypt_info+0x2e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    b8e6:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    b8e8:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    b8ea:	3148      	adds	r1, #72	; 0x48
    b8ec:	2004      	movs	r0, #4
    b8ee:	f000 fedf 	bl	c6b0 <bt_keys_get_type>
		if (!keys) {
    b8f2:	b198      	cbz	r0, b91c <smp_encrypt_info+0x4c>
		memcpy(keys->ltk.val, req->ltk, 16);
    b8f4:	2210      	movs	r2, #16
    b8f6:	4629      	mov	r1, r5
    b8f8:	301a      	adds	r0, #26
    b8fa:	f7f4 fce1 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    b8fe:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b900:	f3bf 8f5b 	dmb	ish
    b904:	e854 3f00 	ldrex	r3, [r4]
    b908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b90c:	e844 3200 	strex	r2, r3, [r4]
    b910:	2a00      	cmp	r2, #0
    b912:	d1f7      	bne.n	b904 <smp_encrypt_info+0x34>
    b914:	f3bf 8f5b 	dmb	ish
	return 0;
    b918:	2000      	movs	r0, #0
    b91a:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    b91c:	2008      	movs	r0, #8
}
    b91e:	bd38      	pop	{r3, r4, r5, pc}

0000b920 <smp_check_complete>:
	if (conn->type == BT_CONN_TYPE_LE) {
    b920:	7883      	ldrb	r3, [r0, #2]
    b922:	b103      	cbz	r3, b926 <smp_check_complete+0x6>
    b924:	4770      	bx	lr
{
    b926:	b510      	push	{r4, lr}
    b928:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    b92a:	2106      	movs	r1, #6
    b92c:	f7fb ffa1 	bl	7872 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
    b930:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    b934:	ea21 0104 	bic.w	r1, r1, r4
    b938:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		if (!smp->local_dist && !smp->remote_dist) {
    b93c:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
    b940:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b944:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b948:	b103      	cbz	r3, b94c <smp_check_complete+0x2c>
    b94a:	bd10      	pop	{r4, pc}
			smp_pairing_complete(smp, 0);
    b94c:	2100      	movs	r1, #0
    b94e:	f7ff f86e 	bl	aa2e <smp_pairing_complete>
    b952:	e7fa      	b.n	b94a <smp_check_complete+0x2a>

0000b954 <sign_info_sent>:
{
    b954:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_SIGN);
    b956:	2104      	movs	r1, #4
    b958:	f7ff ffe2 	bl	b920 <smp_check_complete>
    b95c:	bd08      	pop	{r3, pc}

0000b95e <ident_sent>:
{
    b95e:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
    b960:	2101      	movs	r1, #1
    b962:	f7ff ffdd 	bl	b920 <smp_check_complete>
    b966:	bd08      	pop	{r3, pc}

0000b968 <smp_ident_addr_info>:
{
    b968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    b96c:	6806      	ldr	r6, [r0, #0]
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    b96e:	688d      	ldr	r5, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    b970:	782b      	ldrb	r3, [r5, #0]
    b972:	b153      	cbz	r3, b98a <smp_ident_addr_info+0x22>
		return true;
	}

	return BT_ADDR_IS_STATIC(&addr->a);
    b974:	79ab      	ldrb	r3, [r5, #6]
    b976:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b97a:	2bc0      	cmp	r3, #192	; 0xc0
    b97c:	bf14      	ite	ne
    b97e:	2300      	movne	r3, #0
    b980:	2301      	moveq	r3, #1
	if (!bt_addr_le_is_identity(&req->addr)) {
    b982:	b923      	cbnz	r3, b98e <smp_ident_addr_info+0x26>
		return BT_SMP_ERR_INVALID_PARAMS;
    b984:	200a      	movs	r0, #10
    b986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    b98a:	2301      	movs	r3, #1
    b98c:	e7f9      	b.n	b982 <smp_ident_addr_info+0x1a>
    b98e:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b990:	f3bf 8f5b 	dmb	ish
    b994:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    b998:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b99c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b9a0:	d119      	bne.n	b9d6 <smp_ident_addr_info+0x6e>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    b9a2:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    b9a6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    b9aa:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    b9ae:	f013 0f04 	tst.w	r3, #4
    b9b2:	d14f      	bne.n	ba54 <smp_ident_addr_info+0xec>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    b9b4:	78f3      	ldrb	r3, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b9b6:	b91b      	cbnz	r3, b9c0 <smp_ident_addr_info+0x58>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    b9b8:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    b9bc:	2b00      	cmp	r3, #0
    b9be:	d058      	beq.n	ba72 <smp_ident_addr_info+0x10a>
	if (!smp->local_dist && !smp->remote_dist) {
    b9c0:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    b9c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b9c8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b9cc:	2b00      	cmp	r3, #0
    b9ce:	d054      	beq.n	ba7a <smp_ident_addr_info+0x112>
	return 0;
    b9d0:	2000      	movs	r0, #0
}
    b9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    b9d6:	f106 0848 	add.w	r8, r6, #72	; 0x48
    b9da:	4641      	mov	r1, r8
    b9dc:	2002      	movs	r0, #2
    b9de:	f000 fe67 	bl	c6b0 <bt_keys_get_type>
		if (!keys) {
    b9e2:	4681      	mov	r9, r0
    b9e4:	2800      	cmp	r0, #0
    b9e6:	d04f      	beq.n	ba88 <smp_ident_addr_info+0x120>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    b9e8:	78f3      	ldrb	r3, [r6, #3]
    b9ea:	bb43      	cbnz	r3, ba3e <smp_ident_addr_info+0xd6>
			dst = &conn->le.resp_addr;
    b9ec:	f106 0156 	add.w	r1, r6, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
    b9f0:	780b      	ldrb	r3, [r1, #0]
    b9f2:	2b01      	cmp	r3, #1
    b9f4:	d026      	beq.n	ba44 <smp_ident_addr_info+0xdc>
		return false;
    b9f6:	2700      	movs	r7, #0
		if (bt_addr_le_is_rpa(dst)) {
    b9f8:	2f00      	cmp	r7, #0
    b9fa:	d0d2      	beq.n	b9a2 <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    b9fc:	2206      	movs	r2, #6
    b9fe:	3101      	adds	r1, #1
    ba00:	f109 0040 	add.w	r0, r9, #64	; 0x40
    ba04:	f7f4 fc5c 	bl	2c0 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    ba08:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
    ba0c:	b13b      	cbz	r3, ba1e <smp_ident_addr_info+0xb6>
	return BT_ADDR_IS_STATIC(&addr->a);
    ba0e:	f896 704e 	ldrb.w	r7, [r6, #78]	; 0x4e
    ba12:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    ba16:	2fc0      	cmp	r7, #192	; 0xc0
    ba18:	bf14      	ite	ne
    ba1a:	2700      	movne	r7, #0
    ba1c:	2701      	moveq	r7, #1
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    ba1e:	2f00      	cmp	r7, #0
    ba20:	d1bf      	bne.n	b9a2 <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    ba22:	2207      	movs	r2, #7
    ba24:	4629      	mov	r1, r5
    ba26:	4648      	mov	r0, r9
    ba28:	f7f4 fc4a 	bl	2c0 <memcpy>
    ba2c:	2207      	movs	r2, #7
    ba2e:	4629      	mov	r1, r5
    ba30:	4640      	mov	r0, r8
    ba32:	f7f4 fc45 	bl	2c0 <memcpy>
				bt_conn_identity_resolved(conn);
    ba36:	4630      	mov	r0, r6
    ba38:	f7fa fba4 	bl	6184 <bt_conn_identity_resolved>
    ba3c:	e7b1      	b.n	b9a2 <smp_ident_addr_info+0x3a>
			dst = &conn->le.init_addr;
    ba3e:	f106 014f 	add.w	r1, r6, #79	; 0x4f
    ba42:	e7d5      	b.n	b9f0 <smp_ident_addr_info+0x88>
	return BT_ADDR_IS_RPA(&addr->a);
    ba44:	798f      	ldrb	r7, [r1, #6]
    ba46:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    ba4a:	2f40      	cmp	r7, #64	; 0x40
    ba4c:	bf14      	ite	ne
    ba4e:	2700      	movne	r7, #0
    ba50:	2701      	moveq	r7, #1
    ba52:	e7d1      	b.n	b9f8 <smp_ident_addr_info+0x90>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    ba54:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ba58:	f3bf 8f5b 	dmb	ish
    ba5c:	e853 2f00 	ldrex	r2, [r3]
    ba60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    ba64:	e843 2100 	strex	r1, r2, [r3]
    ba68:	2900      	cmp	r1, #0
    ba6a:	d1f7      	bne.n	ba5c <smp_ident_addr_info+0xf4>
    ba6c:	f3bf 8f5b 	dmb	ish
    ba70:	e7a0      	b.n	b9b4 <smp_ident_addr_info+0x4c>
		bt_smp_distribute_keys(smp);
    ba72:	4620      	mov	r0, r4
    ba74:	f7ff f95c 	bl	ad30 <bt_smp_distribute_keys>
    ba78:	e7a2      	b.n	b9c0 <smp_ident_addr_info+0x58>
		smp_pairing_complete(smp, 0);
    ba7a:	2100      	movs	r1, #0
    ba7c:	4620      	mov	r0, r4
    ba7e:	f7fe ffd6 	bl	aa2e <smp_pairing_complete>
	return 0;
    ba82:	2000      	movs	r0, #0
    ba84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    ba88:	2008      	movs	r0, #8
    ba8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000ba90 <legacy_request_tk>:
{
    ba90:	b570      	push	{r4, r5, r6, lr}
    ba92:	b082      	sub	sp, #8
    ba94:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    ba96:	6805      	ldr	r5, [r0, #0]
	keys = bt_keys_find_addr(&conn->le.dst);
    ba98:	f105 0048 	add.w	r0, r5, #72	; 0x48
    ba9c:	f000 fdea 	bl	c674 <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    baa0:	b168      	cbz	r0, babe <legacy_request_tk+0x2e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    baa2:	f3bf 8f5b 	dmb	ish
    baa6:	6883      	ldr	r3, [r0, #8]
    baa8:	f3bf 8f5b 	dmb	ish
    baac:	f013 0f01 	tst.w	r3, #1
    bab0:	d005      	beq.n	babe <legacy_request_tk+0x2e>
	    smp->method == JUST_WORKS) {
    bab2:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    bab6:	b913      	cbnz	r3, babe <legacy_request_tk+0x2e>
		return BT_SMP_ERR_UNSPECIFIED;
    bab8:	2008      	movs	r0, #8
}
    baba:	b002      	add	sp, #8
    babc:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
    babe:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    bac2:	2b01      	cmp	r3, #1
    bac4:	d025      	beq.n	bb12 <legacy_request_tk+0x82>
    bac6:	2b00      	cmp	r3, #0
    bac8:	d037      	beq.n	bb3a <legacy_request_tk+0xaa>
    baca:	2b02      	cmp	r3, #2
    bacc:	d001      	beq.n	bad2 <legacy_request_tk+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    bace:	2008      	movs	r0, #8
    bad0:	e7f3      	b.n	baba <legacy_request_tk+0x2a>
		if (bt_rand(&passkey, sizeof(passkey))) {
    bad2:	2104      	movs	r1, #4
    bad4:	eb0d 0001 	add.w	r0, sp, r1
    bad8:	f004 ffb6 	bl	10a48 <bt_rand>
    badc:	b108      	cbz	r0, bae2 <legacy_request_tk+0x52>
			return BT_SMP_ERR_UNSPECIFIED;
    bade:	2008      	movs	r0, #8
    bae0:	e7eb      	b.n	baba <legacy_request_tk+0x2a>
		passkey %= 1000000;
    bae2:	9b01      	ldr	r3, [sp, #4]
    bae4:	4916      	ldr	r1, [pc, #88]	; (bb40 <legacy_request_tk+0xb0>)
    bae6:	fba1 2103 	umull	r2, r1, r1, r3
    baea:	0c89      	lsrs	r1, r1, #18
    baec:	4a15      	ldr	r2, [pc, #84]	; (bb44 <legacy_request_tk+0xb4>)
    baee:	fb02 3111 	mls	r1, r2, r1, r3
    baf2:	ae02      	add	r6, sp, #8
    baf4:	f846 1d04 	str.w	r1, [r6, #-4]!
		bt_auth->passkey_display(conn, passkey);
    baf8:	4b13      	ldr	r3, [pc, #76]	; (bb48 <legacy_request_tk+0xb8>)
    bafa:	681b      	ldr	r3, [r3, #0]
    bafc:	681b      	ldr	r3, [r3, #0]
    bafe:	4628      	mov	r0, r5
    bb00:	4798      	blx	r3
		memcpy(smp->tk, &passkey, sizeof(passkey));
    bb02:	2204      	movs	r2, #4
    bb04:	4631      	mov	r1, r6
    bb06:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    bb0a:	f7f4 fbd9 	bl	2c0 <memcpy>
	return 0;
    bb0e:	2000      	movs	r0, #0
		break;
    bb10:	e7d3      	b.n	baba <legacy_request_tk+0x2a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bb12:	34a0      	adds	r4, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bb14:	f3bf 8f5b 	dmb	ish
    bb18:	e854 3f00 	ldrex	r3, [r4]
    bb1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bb20:	e844 3200 	strex	r2, r3, [r4]
    bb24:	2a00      	cmp	r2, #0
    bb26:	d1f7      	bne.n	bb18 <legacy_request_tk+0x88>
    bb28:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(conn);
    bb2c:	4b06      	ldr	r3, [pc, #24]	; (bb48 <legacy_request_tk+0xb8>)
    bb2e:	681b      	ldr	r3, [r3, #0]
    bb30:	685b      	ldr	r3, [r3, #4]
    bb32:	4628      	mov	r0, r5
    bb34:	4798      	blx	r3
	return 0;
    bb36:	2000      	movs	r0, #0
		break;
    bb38:	e7bf      	b.n	baba <legacy_request_tk+0x2a>
	return 0;
    bb3a:	2000      	movs	r0, #0
    bb3c:	e7bd      	b.n	baba <legacy_request_tk+0x2a>
    bb3e:	bf00      	nop
    bb40:	431bde83 	.word	0x431bde83
    bb44:	000f4240 	.word	0x000f4240
    bb48:	200028a8 	.word	0x200028a8

0000bb4c <legacy_pairing_rsp>:
{
    bb4c:	b538      	push	{r3, r4, r5, lr}
    bb4e:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    bb50:	f7fe f90a 	bl	9d68 <legacy_get_pair_method>
    bb54:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    bb58:	bb10      	cbnz	r0, bba0 <legacy_pairing_rsp+0x54>
    bb5a:	4604      	mov	r4, r0
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bb5c:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bb60:	f3bf 8f5b 	dmb	ish
    bb64:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    bb68:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    bb6c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    bb70:	d016      	beq.n	bba0 <legacy_pairing_rsp+0x54>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bb72:	4b24      	ldr	r3, [pc, #144]	; (bc04 <legacy_pairing_rsp+0xb8>)
    bb74:	681b      	ldr	r3, [r3, #0]
    bb76:	b19b      	cbz	r3, bba0 <legacy_pairing_rsp+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    bb78:	691b      	ldr	r3, [r3, #16]
    bb7a:	b18b      	cbz	r3, bba0 <legacy_pairing_rsp+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bb7c:	f3bf 8f5b 	dmb	ish
    bb80:	e852 3f00 	ldrex	r3, [r2]
    bb84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bb88:	e842 3100 	strex	r1, r3, [r2]
    bb8c:	2900      	cmp	r1, #0
    bb8e:	d1f7      	bne.n	bb80 <legacy_pairing_rsp+0x34>
    bb90:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    bb94:	4b1b      	ldr	r3, [pc, #108]	; (bc04 <legacy_pairing_rsp+0xb8>)
    bb96:	681b      	ldr	r3, [r3, #0]
    bb98:	691b      	ldr	r3, [r3, #16]
    bb9a:	6828      	ldr	r0, [r5, #0]
    bb9c:	4798      	blx	r3
		return 0;
    bb9e:	e004      	b.n	bbaa <legacy_pairing_rsp+0x5e>
	ret = legacy_request_tk(smp);
    bba0:	4628      	mov	r0, r5
    bba2:	f7ff ff75 	bl	ba90 <legacy_request_tk>
	if (ret) {
    bba6:	4604      	mov	r4, r0
    bba8:	b108      	cbz	r0, bbae <legacy_pairing_rsp+0x62>
}
    bbaa:	4620      	mov	r0, r4
    bbac:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    bbae:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bbb2:	f3bf 8f5b 	dmb	ish
    bbb6:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
    bbba:	f3bf 8f5b 	dmb	ish
    bbbe:	f412 7f00 	tst.w	r2, #512	; 0x200
    bbc2:	d00c      	beq.n	bbde <legacy_pairing_rsp+0x92>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bbc4:	f3bf 8f5b 	dmb	ish
    bbc8:	e853 2f00 	ldrex	r2, [r3]
    bbcc:	f042 0201 	orr.w	r2, r2, #1
    bbd0:	e843 2100 	strex	r1, r2, [r3]
    bbd4:	2900      	cmp	r1, #0
    bbd6:	d1f7      	bne.n	bbc8 <legacy_pairing_rsp+0x7c>
    bbd8:	f3bf 8f5b 	dmb	ish
	return 0;
    bbdc:	e7e5      	b.n	bbaa <legacy_pairing_rsp+0x5e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    bbde:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    bbe2:	f3bf 8f5b 	dmb	ish
    bbe6:	e853 2f00 	ldrex	r2, [r3]
    bbea:	f042 0208 	orr.w	r2, r2, #8
    bbee:	e843 2100 	strex	r1, r2, [r3]
    bbf2:	2900      	cmp	r1, #0
    bbf4:	d1f7      	bne.n	bbe6 <legacy_pairing_rsp+0x9a>
    bbf6:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    bbfa:	4628      	mov	r0, r5
    bbfc:	f7fe fdd8 	bl	a7b0 <legacy_send_pairing_confirm>
    bc00:	4604      	mov	r4, r0
    bc02:	e7d2      	b.n	bbaa <legacy_pairing_rsp+0x5e>
    bc04:	200028a8 	.word	0x200028a8

0000bc08 <smp_pairing_rsp>:
{
    bc08:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    bc0a:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    bc0c:	78eb      	ldrb	r3, [r5, #3]
    bc0e:	3b07      	subs	r3, #7
    bc10:	b2db      	uxtb	r3, r3
    bc12:	2b09      	cmp	r3, #9
    bc14:	d902      	bls.n	bc1c <smp_pairing_rsp+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    bc16:	2506      	movs	r5, #6
}
    bc18:	4628      	mov	r0, r5
    bc1a:	bd70      	pop	{r4, r5, r6, pc}
    bc1c:	4604      	mov	r4, r0
	smp->local_dist &= rsp->init_key_dist;
    bc1e:	792b      	ldrb	r3, [r5, #4]
    bc20:	f890 2179 	ldrb.w	r2, [r0, #377]	; 0x179
    bc24:	4013      	ands	r3, r2
    bc26:	f880 3179 	strb.w	r3, [r0, #377]	; 0x179
	smp->remote_dist &= rsp->resp_key_dist;
    bc2a:	796b      	ldrb	r3, [r5, #5]
    bc2c:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    bc30:	4013      	ands	r3, r2
    bc32:	f880 317a 	strb.w	r3, [r0, #378]	; 0x17a
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    bc36:	2302      	movs	r3, #2
    bc38:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    bc3c:	2206      	movs	r2, #6
    bc3e:	4629      	mov	r1, r5
    bc40:	30ad      	adds	r0, #173	; 0xad
    bc42:	f7f4 fb3d 	bl	2c0 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    bc46:	78ab      	ldrb	r3, [r5, #2]
    bc48:	f013 0f08 	tst.w	r3, #8
    bc4c:	d004      	beq.n	bc58 <smp_pairing_rsp+0x50>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    bc4e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    bc52:	f013 0f08 	tst.w	r3, #8
    bc56:	d148      	bne.n	bcea <smp_pairing_rsp+0xe2>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    bc58:	78ab      	ldrb	r3, [r5, #2]
    bc5a:	f013 0f20 	tst.w	r3, #32
    bc5e:	d004      	beq.n	bc6a <smp_pairing_rsp+0x62>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    bc60:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    bc64:	f013 0f20 	tst.w	r3, #32
    bc68:	d14e      	bne.n	bd08 <smp_pairing_rsp+0x100>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    bc6a:	78ab      	ldrb	r3, [r5, #2]
    bc6c:	f013 0f01 	tst.w	r3, #1
    bc70:	d004      	beq.n	bc7c <smp_pairing_rsp+0x74>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    bc72:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    bc76:	f013 0f01 	tst.w	r3, #1
    bc7a:	d154      	bne.n	bd26 <smp_pairing_rsp+0x11e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bc7c:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bc80:	f3bf 8f5b 	dmb	ish
    bc84:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bc88:	f3bf 8f5b 	dmb	ish
    bc8c:	f013 0f20 	tst.w	r3, #32
    bc90:	d058      	beq.n	bd44 <smp_pairing_rsp+0x13c>
	smp->method = get_pair_method(smp, rsp->io_capability);
    bc92:	7829      	ldrb	r1, [r5, #0]
    bc94:	4620      	mov	r0, r4
    bc96:	f7fe f835 	bl	9d04 <get_pair_method>
    bc9a:	4605      	mov	r5, r0
    bc9c:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	smp->local_dist &= SEND_KEYS_SC;
    bca0:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    bca4:	f003 0304 	and.w	r3, r3, #4
    bca8:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist &= RECV_KEYS_SC;
    bcac:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    bcb0:	f003 0306 	and.w	r3, r3, #6
    bcb4:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->method == JUST_WORKS) {
    bcb8:	2800      	cmp	r0, #0
    bcba:	d049      	beq.n	bd50 <smp_pairing_rsp+0x148>
	if (!sc_local_pkey_valid) {
    bcbc:	4b3c      	ldr	r3, [pc, #240]	; (bdb0 <smp_pairing_rsp+0x1a8>)
    bcbe:	781b      	ldrb	r3, [r3, #0]
    bcc0:	2b00      	cmp	r3, #0
    bcc2:	d067      	beq.n	bd94 <smp_pairing_rsp+0x18c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    bcc4:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bcc8:	f3bf 8f5b 	dmb	ish
    bccc:	e853 2f00 	ldrex	r2, [r3]
    bcd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    bcd4:	e843 2100 	strex	r1, r2, [r3]
    bcd8:	2900      	cmp	r1, #0
    bcda:	d1f7      	bne.n	bccc <smp_pairing_rsp+0xc4>
    bcdc:	f3bf 8f5b 	dmb	ish
	return sc_send_public_key(smp);
    bce0:	4620      	mov	r0, r4
    bce2:	f7fe f94b 	bl	9f7c <sc_send_public_key>
    bce6:	4605      	mov	r5, r0
    bce8:	e796      	b.n	bc18 <smp_pairing_rsp+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    bcea:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bcee:	f3bf 8f5b 	dmb	ish
    bcf2:	e853 2f00 	ldrex	r2, [r3]
    bcf6:	f042 0220 	orr.w	r2, r2, #32
    bcfa:	e843 2100 	strex	r1, r2, [r3]
    bcfe:	2900      	cmp	r1, #0
    bd00:	d1f7      	bne.n	bcf2 <smp_pairing_rsp+0xea>
    bd02:	f3bf 8f5b 	dmb	ish
    bd06:	e7a7      	b.n	bc58 <smp_pairing_rsp+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    bd08:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bd0c:	f3bf 8f5b 	dmb	ish
    bd10:	e853 2f00 	ldrex	r2, [r3]
    bd14:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    bd18:	e843 2100 	strex	r1, r2, [r3]
    bd1c:	2900      	cmp	r1, #0
    bd1e:	d1f7      	bne.n	bd10 <smp_pairing_rsp+0x108>
    bd20:	f3bf 8f5b 	dmb	ish
    bd24:	e7a1      	b.n	bc6a <smp_pairing_rsp+0x62>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    bd26:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bd2a:	f3bf 8f5b 	dmb	ish
    bd2e:	e853 2f00 	ldrex	r2, [r3]
    bd32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    bd36:	e843 2100 	strex	r1, r2, [r3]
    bd3a:	2900      	cmp	r1, #0
    bd3c:	d1f7      	bne.n	bd2e <smp_pairing_rsp+0x126>
    bd3e:	f3bf 8f5b 	dmb	ish
    bd42:	e79b      	b.n	bc7c <smp_pairing_rsp+0x74>
		return legacy_pairing_rsp(smp, rsp->io_capability);
    bd44:	7829      	ldrb	r1, [r5, #0]
    bd46:	4620      	mov	r0, r4
    bd48:	f7ff ff00 	bl	bb4c <legacy_pairing_rsp>
    bd4c:	4605      	mov	r5, r0
    bd4e:	e763      	b.n	bc18 <smp_pairing_rsp+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bd50:	f3bf 8f5b 	dmb	ish
    bd54:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bd58:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bd5c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    bd60:	d0ac      	beq.n	bcbc <smp_pairing_rsp+0xb4>
    bd62:	4b14      	ldr	r3, [pc, #80]	; (bdb4 <smp_pairing_rsp+0x1ac>)
    bd64:	681b      	ldr	r3, [r3, #0]
    bd66:	2b00      	cmp	r3, #0
    bd68:	d0a8      	beq.n	bcbc <smp_pairing_rsp+0xb4>
		    bt_auth && bt_auth->pairing_confirm) {
    bd6a:	691b      	ldr	r3, [r3, #16]
    bd6c:	2b00      	cmp	r3, #0
    bd6e:	d0a5      	beq.n	bcbc <smp_pairing_rsp+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bd70:	f3bf 8f5b 	dmb	ish
    bd74:	e856 3f00 	ldrex	r3, [r6]
    bd78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bd7c:	e846 3200 	strex	r2, r3, [r6]
    bd80:	2a00      	cmp	r2, #0
    bd82:	d1f7      	bne.n	bd74 <smp_pairing_rsp+0x16c>
    bd84:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    bd88:	4b0a      	ldr	r3, [pc, #40]	; (bdb4 <smp_pairing_rsp+0x1ac>)
    bd8a:	681b      	ldr	r3, [r3, #0]
    bd8c:	691b      	ldr	r3, [r3, #16]
    bd8e:	6820      	ldr	r0, [r4, #0]
    bd90:	4798      	blx	r3
			return 0;
    bd92:	e741      	b.n	bc18 <smp_pairing_rsp+0x10>
    bd94:	f3bf 8f5b 	dmb	ish
    bd98:	e856 3f00 	ldrex	r3, [r6]
    bd9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bda0:	e846 3200 	strex	r2, r3, [r6]
    bda4:	2a00      	cmp	r2, #0
    bda6:	d1f7      	bne.n	bd98 <smp_pairing_rsp+0x190>
    bda8:	f3bf 8f5b 	dmb	ish
		return 0;
    bdac:	2500      	movs	r5, #0
    bdae:	e733      	b.n	bc18 <smp_pairing_rsp+0x10>
    bdb0:	20000860 	.word	0x20000860
    bdb4:	200028a8 	.word	0x200028a8

0000bdb8 <legacy_pairing_req>:
{
    bdb8:	b538      	push	{r3, r4, r5, lr}
    bdba:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    bdbc:	f7fd ffd4 	bl	9d68 <legacy_get_pair_method>
    bdc0:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    bdc4:	bb10      	cbnz	r0, be0c <legacy_pairing_req+0x54>
    bdc6:	4604      	mov	r4, r0
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bdc8:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bdcc:	f3bf 8f5b 	dmb	ish
    bdd0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    bdd4:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    bdd8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    bddc:	d116      	bne.n	be0c <legacy_pairing_req+0x54>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bdde:	4b18      	ldr	r3, [pc, #96]	; (be40 <legacy_pairing_req+0x88>)
    bde0:	681b      	ldr	r3, [r3, #0]
    bde2:	b19b      	cbz	r3, be0c <legacy_pairing_req+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    bde4:	691b      	ldr	r3, [r3, #16]
    bde6:	b18b      	cbz	r3, be0c <legacy_pairing_req+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bde8:	f3bf 8f5b 	dmb	ish
    bdec:	e852 3f00 	ldrex	r3, [r2]
    bdf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bdf4:	e842 3100 	strex	r1, r3, [r2]
    bdf8:	2900      	cmp	r1, #0
    bdfa:	d1f7      	bne.n	bdec <legacy_pairing_req+0x34>
    bdfc:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    be00:	4b0f      	ldr	r3, [pc, #60]	; (be40 <legacy_pairing_req+0x88>)
    be02:	681b      	ldr	r3, [r3, #0]
    be04:	691b      	ldr	r3, [r3, #16]
    be06:	6828      	ldr	r0, [r5, #0]
    be08:	4798      	blx	r3
		return 0;
    be0a:	e004      	b.n	be16 <legacy_pairing_req+0x5e>
	ret = send_pairing_rsp(smp);
    be0c:	4628      	mov	r0, r5
    be0e:	f7fe f8d9 	bl	9fc4 <send_pairing_rsp>
	if (ret) {
    be12:	4604      	mov	r4, r0
    be14:	b108      	cbz	r0, be1a <legacy_pairing_req+0x62>
}
    be16:	4620      	mov	r0, r4
    be18:	bd38      	pop	{r3, r4, r5, pc}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    be1a:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    be1e:	f3bf 8f5b 	dmb	ish
    be22:	e853 2f00 	ldrex	r2, [r3]
    be26:	f042 0208 	orr.w	r2, r2, #8
    be2a:	e843 2100 	strex	r1, r2, [r3]
    be2e:	2900      	cmp	r1, #0
    be30:	d1f7      	bne.n	be22 <legacy_pairing_req+0x6a>
    be32:	f3bf 8f5b 	dmb	ish
	return legacy_request_tk(smp);
    be36:	4628      	mov	r0, r5
    be38:	f7ff fe2a 	bl	ba90 <legacy_request_tk>
    be3c:	4604      	mov	r4, r0
    be3e:	e7ea      	b.n	be16 <legacy_pairing_req+0x5e>
    be40:	200028a8 	.word	0x200028a8

0000be44 <smp_pairing_req>:
{
    be44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    be46:	688e      	ldr	r6, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    be48:	78f3      	ldrb	r3, [r6, #3]
    be4a:	3b07      	subs	r3, #7
    be4c:	b2db      	uxtb	r3, r3
    be4e:	2b09      	cmp	r3, #9
    be50:	d902      	bls.n	be58 <smp_pairing_req+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    be52:	2506      	movs	r5, #6
}
    be54:	4628      	mov	r0, r5
    be56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    be58:	4604      	mov	r4, r0
	ret = smp_init(smp);
    be5a:	f7fe f81c 	bl	9e96 <smp_init>
	if (ret) {
    be5e:	b108      	cbz	r0, be64 <smp_pairing_req+0x20>
		return ret;
    be60:	b2c5      	uxtb	r5, r0
    be62:	e7f7      	b.n	be54 <smp_pairing_req+0x10>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    be64:	2301      	movs	r3, #1
    be66:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    be6a:	2206      	movs	r2, #6
    be6c:	4631      	mov	r1, r6
    be6e:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    be72:	f7f4 fa25 	bl	2c0 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    be76:	2302      	movs	r3, #2
    be78:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
	rsp->auth_req = get_auth(req->auth_req);
    be7c:	78b0      	ldrb	r0, [r6, #2]
    be7e:	f7fd ff97 	bl	9db0 <get_auth>
    be82:	4605      	mov	r5, r0
    be84:	f884 00af 	strb.w	r0, [r4, #175]	; 0xaf
	rsp->io_capability = get_io_capa();
    be88:	f7fd ff14 	bl	9cb4 <get_io_capa>
    be8c:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    be90:	2300      	movs	r3, #0
    be92:	f884 30ae 	strb.w	r3, [r4, #174]	; 0xae
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    be96:	2310      	movs	r3, #16
    be98:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    be9c:	7933      	ldrb	r3, [r6, #4]
    be9e:	f003 0307 	and.w	r3, r3, #7
    bea2:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    bea6:	7973      	ldrb	r3, [r6, #5]
    bea8:	f003 0305 	and.w	r3, r3, #5
    beac:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    beb0:	f015 0f08 	tst.w	r5, #8
    beb4:	d003      	beq.n	bebe <smp_pairing_req+0x7a>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    beb6:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    beb8:	f013 0f08 	tst.w	r3, #8
    bebc:	d15b      	bne.n	bf76 <smp_pairing_req+0x132>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    bebe:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    bec2:	f013 0f20 	tst.w	r3, #32
    bec6:	d003      	beq.n	bed0 <smp_pairing_req+0x8c>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    bec8:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    beca:	f013 0f20 	tst.w	r3, #32
    bece:	d16d      	bne.n	bfac <smp_pairing_req+0x168>
	smp->local_dist = rsp->resp_key_dist;
    bed0:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    bed4:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist = rsp->init_key_dist;
    bed8:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    bedc:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    bee0:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    bee4:	f013 0f01 	tst.w	r3, #1
    bee8:	d003      	beq.n	bef2 <smp_pairing_req+0xae>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    beea:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    beec:	f013 0f01 	tst.w	r3, #1
    bef0:	d16b      	bne.n	bfca <smp_pairing_req+0x186>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    bef2:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
    bef6:	f3bf 8f5b 	dmb	ish
    befa:	e857 3f00 	ldrex	r3, [r7]
    befe:	f043 0308 	orr.w	r3, r3, #8
    bf02:	e847 3200 	strex	r2, r3, [r7]
    bf06:	2a00      	cmp	r2, #0
    bf08:	d1f7      	bne.n	befa <smp_pairing_req+0xb6>
    bf0a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bf0e:	f3bf 8f5b 	dmb	ish
    bf12:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bf16:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bf1a:	f013 0f20 	tst.w	r3, #32
    bf1e:	d063      	beq.n	bfe8 <smp_pairing_req+0x1a4>
	smp->method = get_pair_method(smp, req->io_capability);
    bf20:	7831      	ldrb	r1, [r6, #0]
    bf22:	4620      	mov	r0, r4
    bf24:	f7fd feee 	bl	9d04 <get_pair_method>
    bf28:	4605      	mov	r5, r0
    bf2a:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS) {
    bf2e:	2800      	cmp	r0, #0
    bf30:	d160      	bne.n	bff4 <smp_pairing_req+0x1b0>
    bf32:	f3bf 8f5b 	dmb	ish
    bf36:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bf3a:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bf3e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    bf42:	d157      	bne.n	bff4 <smp_pairing_req+0x1b0>
    bf44:	4b35      	ldr	r3, [pc, #212]	; (c01c <smp_pairing_req+0x1d8>)
    bf46:	681b      	ldr	r3, [r3, #0]
    bf48:	2b00      	cmp	r3, #0
    bf4a:	d053      	beq.n	bff4 <smp_pairing_req+0x1b0>
		    bt_auth && bt_auth->pairing_confirm) {
    bf4c:	691b      	ldr	r3, [r3, #16]
    bf4e:	2b00      	cmp	r3, #0
    bf50:	d050      	beq.n	bff4 <smp_pairing_req+0x1b0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bf52:	f3bf 8f5b 	dmb	ish
    bf56:	e857 3f00 	ldrex	r3, [r7]
    bf5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bf5e:	e847 3200 	strex	r2, r3, [r7]
    bf62:	2a00      	cmp	r2, #0
    bf64:	d1f7      	bne.n	bf56 <smp_pairing_req+0x112>
    bf66:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    bf6a:	4b2c      	ldr	r3, [pc, #176]	; (c01c <smp_pairing_req+0x1d8>)
    bf6c:	681b      	ldr	r3, [r3, #0]
    bf6e:	691b      	ldr	r3, [r3, #16]
    bf70:	6820      	ldr	r0, [r4, #0]
    bf72:	4798      	blx	r3
			return 0;
    bf74:	e76e      	b.n	be54 <smp_pairing_req+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    bf76:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bf7a:	f3bf 8f5b 	dmb	ish
    bf7e:	e853 2f00 	ldrex	r2, [r3]
    bf82:	f042 0220 	orr.w	r2, r2, #32
    bf86:	e843 2100 	strex	r1, r2, [r3]
    bf8a:	2900      	cmp	r1, #0
    bf8c:	d1f7      	bne.n	bf7e <smp_pairing_req+0x13a>
    bf8e:	f3bf 8f5b 	dmb	ish
		rsp->init_key_dist &= RECV_KEYS_SC;
    bf92:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    bf96:	f003 0306 	and.w	r3, r3, #6
    bf9a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		rsp->resp_key_dist &= SEND_KEYS_SC;
    bf9e:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    bfa2:	f003 0304 	and.w	r3, r3, #4
    bfa6:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    bfaa:	e788      	b.n	bebe <smp_pairing_req+0x7a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    bfac:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bfb0:	f3bf 8f5b 	dmb	ish
    bfb4:	e853 2f00 	ldrex	r2, [r3]
    bfb8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    bfbc:	e843 2100 	strex	r1, r2, [r3]
    bfc0:	2900      	cmp	r1, #0
    bfc2:	d1f7      	bne.n	bfb4 <smp_pairing_req+0x170>
    bfc4:	f3bf 8f5b 	dmb	ish
    bfc8:	e782      	b.n	bed0 <smp_pairing_req+0x8c>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    bfca:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bfce:	f3bf 8f5b 	dmb	ish
    bfd2:	e853 2f00 	ldrex	r2, [r3]
    bfd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    bfda:	e843 2100 	strex	r1, r2, [r3]
    bfde:	2900      	cmp	r1, #0
    bfe0:	d1f7      	bne.n	bfd2 <smp_pairing_req+0x18e>
    bfe2:	f3bf 8f5b 	dmb	ish
    bfe6:	e784      	b.n	bef2 <smp_pairing_req+0xae>
		return legacy_pairing_req(smp, req->io_capability);
    bfe8:	7831      	ldrb	r1, [r6, #0]
    bfea:	4620      	mov	r0, r4
    bfec:	f7ff fee4 	bl	bdb8 <legacy_pairing_req>
    bff0:	4605      	mov	r5, r0
    bff2:	e72f      	b.n	be54 <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    bff4:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    bff8:	f3bf 8f5b 	dmb	ish
    bffc:	e853 2f00 	ldrex	r2, [r3]
    c000:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    c004:	e843 2100 	strex	r1, r2, [r3]
    c008:	2900      	cmp	r1, #0
    c00a:	d1f7      	bne.n	bffc <smp_pairing_req+0x1b8>
    c00c:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
    c010:	4620      	mov	r0, r4
    c012:	f7fd ffd7 	bl	9fc4 <send_pairing_rsp>
    c016:	4605      	mov	r5, r0
    c018:	e71c      	b.n	be54 <smp_pairing_req+0x10>
    c01a:	bf00      	nop
    c01c:	200028a8 	.word	0x200028a8

0000c020 <bt_smp_connected>:
{
    c020:	b510      	push	{r4, lr}
    c022:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    c024:	4904      	ldr	r1, [pc, #16]	; (c038 <bt_smp_connected+0x18>)
    c026:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    c02a:	f01d f953 	bl	292d4 <k_delayed_work_init>
	smp_reset(smp);
    c02e:	4620      	mov	r0, r4
    c030:	f7fe fcbb 	bl	a9aa <smp_reset>
    c034:	bd10      	pop	{r4, pc}
    c036:	bf00      	nop
    c038:	0000abfb 	.word	0x0000abfb

0000c03c <bt_smp_send_security_req>:
{
    c03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c040:	4606      	mov	r6, r0
	smp = smp_chan_get(conn);
    c042:	f7fd ff15 	bl	9e70 <smp_chan_get>
	if (!smp) {
    c046:	b3e8      	cbz	r0, c0c4 <bt_smp_send_security_req+0x88>
    c048:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c04a:	f3bf 8f5b 	dmb	ish
    c04e:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c052:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    c056:	f013 0f10 	tst.w	r3, #16
    c05a:	d136      	bne.n	c0ca <bt_smp_send_security_req+0x8e>
    c05c:	f3bf 8f5b 	dmb	ish
    c060:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    c064:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    c068:	f3c5 05c0 	ubfx	r5, r5, #3, #1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c06c:	bb85      	cbnz	r5, c0d0 <bt_smp_send_security_req+0x94>
	if (!sec_level_reachable(conn)) {
    c06e:	4630      	mov	r0, r6
    c070:	f7fd feb4 	bl	9ddc <sec_level_reachable>
    c074:	b378      	cbz	r0, c0d6 <bt_smp_send_security_req+0x9a>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    c076:	2201      	movs	r2, #1
    c078:	210b      	movs	r1, #11
    c07a:	4630      	mov	r0, r6
    c07c:	f7fd fefd 	bl	9e7a <smp_create_pdu>
	if (!req_buf) {
    c080:	4607      	mov	r7, r0
    c082:	b358      	cbz	r0, c0dc <bt_smp_send_security_req+0xa0>
	req = net_buf_add(req_buf, sizeof(*req));
    c084:	2101      	movs	r1, #1
    c086:	3008      	adds	r0, #8
    c088:	f00e f854 	bl	1a134 <net_buf_simple_add>
    c08c:	4680      	mov	r8, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    c08e:	2009      	movs	r0, #9
    c090:	f7fd fe8e 	bl	9db0 <get_auth>
    c094:	f888 0000 	strb.w	r0, [r8]
    c098:	2300      	movs	r3, #0
    c09a:	463a      	mov	r2, r7
    c09c:	2106      	movs	r1, #6
    c09e:	4630      	mov	r0, r6
    c0a0:	f7fb f9e1 	bl	7466 <bt_l2cap_send_cb>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    c0a4:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c0a6:	f3bf 8f5b 	dmb	ish
    c0aa:	e854 3f00 	ldrex	r3, [r4]
    c0ae:	f043 0320 	orr.w	r3, r3, #32
    c0b2:	e844 3200 	strex	r2, r3, [r4]
    c0b6:	2a00      	cmp	r2, #0
    c0b8:	d1f7      	bne.n	c0aa <bt_smp_send_security_req+0x6e>
    c0ba:	f3bf 8f5b 	dmb	ish
}
    c0be:	4628      	mov	r0, r5
    c0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTCONN;
    c0c4:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    c0c8:	e7f9      	b.n	c0be <bt_smp_send_security_req+0x82>
		return -EIO;
    c0ca:	f06f 0504 	mvn.w	r5, #4
    c0ce:	e7f6      	b.n	c0be <bt_smp_send_security_req+0x82>
		return -EBUSY;
    c0d0:	f06f 050f 	mvn.w	r5, #15
    c0d4:	e7f3      	b.n	c0be <bt_smp_send_security_req+0x82>
		return -EINVAL;
    c0d6:	f06f 0515 	mvn.w	r5, #21
    c0da:	e7f0      	b.n	c0be <bt_smp_send_security_req+0x82>
		return -ENOBUFS;
    c0dc:	f06f 0568 	mvn.w	r5, #104	; 0x68
    c0e0:	e7ed      	b.n	c0be <bt_smp_send_security_req+0x82>

0000c0e2 <bt_smp_send_pairing_req>:
{
    c0e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c0e6:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    c0e8:	f7fd fec2 	bl	9e70 <smp_chan_get>
	if (!smp) {
    c0ec:	2800      	cmp	r0, #0
    c0ee:	d06b      	beq.n	c1c8 <bt_smp_send_pairing_req+0xe6>
    c0f0:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    c0f2:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c0f6:	f3bf 8f5b 	dmb	ish
    c0fa:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c0fe:	f3bf 8f5b 	dmb	ish
    c102:	f013 0f10 	tst.w	r3, #16
    c106:	d162      	bne.n	c1ce <bt_smp_send_pairing_req+0xec>
    c108:	f3bf 8f5b 	dmb	ish
    c10c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c110:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c114:	f013 0f08 	tst.w	r3, #8
    c118:	d15c      	bne.n	c1d4 <bt_smp_send_pairing_req+0xf2>
	if (!sec_level_reachable(conn)) {
    c11a:	4628      	mov	r0, r5
    c11c:	f7fd fe5e 	bl	9ddc <sec_level_reachable>
    c120:	2800      	cmp	r0, #0
    c122:	d05a      	beq.n	c1da <bt_smp_send_pairing_req+0xf8>
	if (smp_init(smp)) {
    c124:	4620      	mov	r0, r4
    c126:	f7fd feb6 	bl	9e96 <smp_init>
    c12a:	4680      	mov	r8, r0
    c12c:	2800      	cmp	r0, #0
    c12e:	d157      	bne.n	c1e0 <bt_smp_send_pairing_req+0xfe>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    c130:	2206      	movs	r2, #6
    c132:	2101      	movs	r1, #1
    c134:	4628      	mov	r0, r5
    c136:	f7fd fea0 	bl	9e7a <smp_create_pdu>
	if (!req_buf) {
    c13a:	4607      	mov	r7, r0
    c13c:	2800      	cmp	r0, #0
    c13e:	d052      	beq.n	c1e6 <bt_smp_send_pairing_req+0x104>
	req = net_buf_add(req_buf, sizeof(*req));
    c140:	2106      	movs	r1, #6
    c142:	3008      	adds	r0, #8
    c144:	f00d fff6 	bl	1a134 <net_buf_simple_add>
    c148:	4605      	mov	r5, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    c14a:	2009      	movs	r0, #9
    c14c:	f7fd fe30 	bl	9db0 <get_auth>
    c150:	70a8      	strb	r0, [r5, #2]
	req->io_capability = get_io_capa();
    c152:	f7fd fdaf 	bl	9cb4 <get_io_capa>
    c156:	7028      	strb	r0, [r5, #0]
	req->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    c158:	f04f 0900 	mov.w	r9, #0
    c15c:	f885 9001 	strb.w	r9, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    c160:	2310      	movs	r3, #16
    c162:	70eb      	strb	r3, [r5, #3]
	req->init_key_dist = SEND_KEYS;
    c164:	2205      	movs	r2, #5
    c166:	712a      	strb	r2, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
    c168:	2307      	movs	r3, #7
    c16a:	716b      	strb	r3, [r5, #5]
	smp->local_dist = SEND_KEYS;
    c16c:	f884 2179 	strb.w	r2, [r4, #377]	; 0x179
	smp->remote_dist = RECV_KEYS;
    c170:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    c174:	2301      	movs	r3, #1
    c176:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    c17a:	2206      	movs	r2, #6
    c17c:	4629      	mov	r1, r5
    c17e:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    c182:	f7f4 f89d 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    c186:	464a      	mov	r2, r9
    c188:	4639      	mov	r1, r7
    c18a:	4620      	mov	r0, r4
    c18c:	f7fd fec8 	bl	9f20 <smp_send>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    c190:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c192:	f3bf 8f5b 	dmb	ish
    c196:	e854 3f00 	ldrex	r3, [r4]
    c19a:	f043 0304 	orr.w	r3, r3, #4
    c19e:	e844 3200 	strex	r2, r3, [r4]
    c1a2:	2a00      	cmp	r2, #0
    c1a4:	d1f7      	bne.n	c196 <bt_smp_send_pairing_req+0xb4>
    c1a6:	f3bf 8f5b 	dmb	ish
    c1aa:	f3bf 8f5b 	dmb	ish
    c1ae:	e856 3f00 	ldrex	r3, [r6]
    c1b2:	f043 0308 	orr.w	r3, r3, #8
    c1b6:	e846 3200 	strex	r2, r3, [r6]
    c1ba:	2a00      	cmp	r2, #0
    c1bc:	d1f7      	bne.n	c1ae <bt_smp_send_pairing_req+0xcc>
    c1be:	f3bf 8f5b 	dmb	ish
}
    c1c2:	4640      	mov	r0, r8
    c1c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOTCONN;
    c1c8:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    c1cc:	e7f9      	b.n	c1c2 <bt_smp_send_pairing_req+0xe0>
		return -EIO;
    c1ce:	f06f 0804 	mvn.w	r8, #4
    c1d2:	e7f6      	b.n	c1c2 <bt_smp_send_pairing_req+0xe0>
		return -EBUSY;
    c1d4:	f06f 080f 	mvn.w	r8, #15
    c1d8:	e7f3      	b.n	c1c2 <bt_smp_send_pairing_req+0xe0>
		return -EINVAL;
    c1da:	f06f 0815 	mvn.w	r8, #21
    c1de:	e7f0      	b.n	c1c2 <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    c1e0:	f06f 0868 	mvn.w	r8, #104	; 0x68
    c1e4:	e7ed      	b.n	c1c2 <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    c1e6:	f06f 0868 	mvn.w	r8, #104	; 0x68
    c1ea:	e7ea      	b.n	c1c2 <bt_smp_send_pairing_req+0xe0>

0000c1ec <smp_security_request>:
{
    c1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1ee:	b085      	sub	sp, #20
    c1f0:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c1f2:	6804      	ldr	r4, [r0, #0]
	struct bt_smp_security_request *req = (void *)buf->data;
    c1f4:	688b      	ldr	r3, [r1, #8]
	if (sc_supported) {
    c1f6:	4a35      	ldr	r2, [pc, #212]	; (c2cc <smp_security_request+0xe0>)
    c1f8:	7812      	ldrb	r2, [r2, #0]
    c1fa:	b332      	cbz	r2, c24a <smp_security_request+0x5e>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    c1fc:	781d      	ldrb	r5, [r3, #0]
    c1fe:	f005 050f 	and.w	r5, r5, #15
	if (!conn->le.keys) {
    c202:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c204:	b32b      	cbz	r3, c252 <smp_security_request+0x66>
	if (!conn->le.keys) {
    c206:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c208:	2b00      	cmp	r3, #0
    c20a:	d039      	beq.n	c280 <smp_security_request+0x94>
	if ((auth & BT_SMP_AUTH_MITM) &&
    c20c:	f015 0f04 	tst.w	r5, #4
    c210:	d12e      	bne.n	c270 <smp_security_request+0x84>
	if ((auth & BT_SMP_AUTH_SC) &&
    c212:	f015 0f08 	tst.w	r5, #8
    c216:	d004      	beq.n	c222 <smp_security_request+0x36>
	    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    c218:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c21a:	899b      	ldrh	r3, [r3, #12]
	if ((auth & BT_SMP_AUTH_SC) &&
    c21c:	f013 0f20 	tst.w	r3, #32
    c220:	d02e      	beq.n	c280 <smp_security_request+0x94>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    c222:	6f23      	ldr	r3, [r4, #112]	; 0x70
					conn->le.keys->ltk.val,
    c224:	f103 021a 	add.w	r2, r3, #26
					conn->le.keys->enc_size) < 0) {
    c228:	79dd      	ldrb	r5, [r3, #7]
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    c22a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    c22e:	9502      	str	r5, [sp, #8]
    c230:	9201      	str	r2, [sp, #4]
    c232:	8b1b      	ldrh	r3, [r3, #24]
    c234:	9300      	str	r3, [sp, #0]
    c236:	4602      	mov	r2, r0
    c238:	460b      	mov	r3, r1
    c23a:	4620      	mov	r0, r4
    c23c:	f7f9 ffbc 	bl	61b8 <bt_conn_le_start_encryption>
    c240:	2800      	cmp	r0, #0
    c242:	da24      	bge.n	c28e <smp_security_request+0xa2>
		return BT_SMP_ERR_UNSPECIFIED;
    c244:	2008      	movs	r0, #8
}
    c246:	b005      	add	sp, #20
    c248:	bdf0      	pop	{r4, r5, r6, r7, pc}
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    c24a:	781d      	ldrb	r5, [r3, #0]
    c24c:	f005 0507 	and.w	r5, r5, #7
    c250:	e7d7      	b.n	c202 <smp_security_request+0x16>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    c252:	f104 0748 	add.w	r7, r4, #72	; 0x48
    c256:	4639      	mov	r1, r7
    c258:	2020      	movs	r0, #32
    c25a:	f000 f98f 	bl	c57c <bt_keys_find>
    c25e:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys) {
    c260:	2800      	cmp	r0, #0
    c262:	d1d0      	bne.n	c206 <smp_security_request+0x1a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    c264:	4639      	mov	r1, r7
    c266:	2004      	movs	r0, #4
    c268:	f000 f988 	bl	c57c <bt_keys_find>
    c26c:	6720      	str	r0, [r4, #112]	; 0x70
    c26e:	e7ca      	b.n	c206 <smp_security_request+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c270:	f3bf 8f5b 	dmb	ish
    c274:	689b      	ldr	r3, [r3, #8]
    c276:	f3bf 8f5b 	dmb	ish
	if ((auth & BT_SMP_AUTH_MITM) &&
    c27a:	f013 0f01 	tst.w	r3, #1
    c27e:	d1c8      	bne.n	c212 <smp_security_request+0x26>
	if (bt_smp_send_pairing_req(conn) < 0) {
    c280:	4620      	mov	r0, r4
    c282:	f7ff ff2e 	bl	c0e2 <bt_smp_send_pairing_req>
    c286:	2800      	cmp	r0, #0
    c288:	da10      	bge.n	c2ac <smp_security_request+0xc0>
		return BT_SMP_ERR_UNSPECIFIED;
    c28a:	2008      	movs	r0, #8
    c28c:	e7db      	b.n	c246 <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    c28e:	36a0      	adds	r6, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c290:	f3bf 8f5b 	dmb	ish
    c294:	e856 3f00 	ldrex	r3, [r6]
    c298:	f043 0302 	orr.w	r3, r3, #2
    c29c:	e846 3200 	strex	r2, r3, [r6]
    c2a0:	2a00      	cmp	r2, #0
    c2a2:	d1f7      	bne.n	c294 <smp_security_request+0xa8>
    c2a4:	f3bf 8f5b 	dmb	ish
	return 0;
    c2a8:	2000      	movs	r0, #0
    c2aa:	e7cc      	b.n	c246 <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    c2ac:	36a0      	adds	r6, #160	; 0xa0
    c2ae:	f3bf 8f5b 	dmb	ish
    c2b2:	e856 3f00 	ldrex	r3, [r6]
    c2b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    c2ba:	e846 3200 	strex	r2, r3, [r6]
    c2be:	2a00      	cmp	r2, #0
    c2c0:	d1f7      	bne.n	c2b2 <smp_security_request+0xc6>
    c2c2:	f3bf 8f5b 	dmb	ish
	return 0;
    c2c6:	2000      	movs	r0, #0
    c2c8:	e7bd      	b.n	c246 <smp_security_request+0x5a>
    c2ca:	bf00      	nop
    c2cc:	200008a4 	.word	0x200008a4

0000c2d0 <bt_smp_sign_verify>:
{
    c2d0:	b530      	push	{r4, r5, lr}
    c2d2:	b085      	sub	sp, #20
    c2d4:	4605      	mov	r5, r0
    c2d6:	460c      	mov	r4, r1
	return buf->data + buf->len;
    c2d8:	6889      	ldr	r1, [r1, #8]
    c2da:	89a3      	ldrh	r3, [r4, #12]
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    c2dc:	3b0c      	subs	r3, #12
    c2de:	220c      	movs	r2, #12
    c2e0:	4419      	add	r1, r3
    c2e2:	a801      	add	r0, sp, #4
    c2e4:	f7f3 ffec 	bl	2c0 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    c2e8:	f105 0148 	add.w	r1, r5, #72	; 0x48
    c2ec:	2010      	movs	r0, #16
    c2ee:	f000 f945 	bl	c57c <bt_keys_find>
	if (!keys) {
    c2f2:	b320      	cbz	r0, c33e <bt_smp_sign_verify+0x6e>
    c2f4:	4605      	mov	r5, r0
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    c2f6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    c2f8:	a904      	add	r1, sp, #16
    c2fa:	f841 3d10 	str.w	r3, [r1, #-16]!
    c2fe:	68a0      	ldr	r0, [r4, #8]
    c300:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    c302:	3b0c      	subs	r3, #12
    c304:	2204      	movs	r2, #4
    c306:	4418      	add	r0, r3
    c308:	f7f3 ffda 	bl	2c0 <memcpy>
			   buf->len - sizeof(sig));
    c30c:	89a2      	ldrh	r2, [r4, #12]
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    c30e:	3a0c      	subs	r2, #12
    c310:	b292      	uxth	r2, r2
    c312:	68a1      	ldr	r1, [r4, #8]
    c314:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    c318:	f7fd feac 	bl	a074 <smp_sign_buf>
	if (err) {
    c31c:	b990      	cbnz	r0, c344 <bt_smp_sign_verify+0x74>
    c31e:	68a1      	ldr	r1, [r4, #8]
    c320:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    c322:	3b0c      	subs	r3, #12
    c324:	220c      	movs	r2, #12
    c326:	4419      	add	r1, r3
    c328:	a801      	add	r0, sp, #4
    c32a:	f01d f941 	bl	295b0 <memcmp>
    c32e:	4602      	mov	r2, r0
    c330:	b958      	cbnz	r0, c34a <bt_smp_sign_verify+0x7a>
	keys->remote_csrk.cnt++;
    c332:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    c334:	3301      	adds	r3, #1
    c336:	66eb      	str	r3, [r5, #108]	; 0x6c
}
    c338:	4610      	mov	r0, r2
    c33a:	b005      	add	sp, #20
    c33c:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    c33e:	f06f 0201 	mvn.w	r2, #1
    c342:	e7f9      	b.n	c338 <bt_smp_sign_verify+0x68>
		return -EIO;
    c344:	f06f 0204 	mvn.w	r2, #4
    c348:	e7f6      	b.n	c338 <bt_smp_sign_verify+0x68>
		return -EBADMSG;
    c34a:	f06f 024c 	mvn.w	r2, #76	; 0x4c
    c34e:	e7f3      	b.n	c338 <bt_smp_sign_verify+0x68>

0000c350 <bt_smp_sign>:
{
    c350:	b530      	push	{r4, r5, lr}
    c352:	b083      	sub	sp, #12
    c354:	460c      	mov	r4, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, &conn->le.dst);
    c356:	f100 0148 	add.w	r1, r0, #72	; 0x48
    c35a:	2008      	movs	r0, #8
    c35c:	f000 f90e 	bl	c57c <bt_keys_find>
	if (!keys) {
    c360:	b300      	cbz	r0, c3a4 <bt_smp_sign+0x54>
    c362:	4605      	mov	r5, r0
	net_buf_add(buf, 12);
    c364:	210c      	movs	r1, #12
    c366:	f104 0008 	add.w	r0, r4, #8
    c36a:	f00d fee3 	bl	1a134 <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    c36e:	6dab      	ldr	r3, [r5, #88]	; 0x58
    c370:	a902      	add	r1, sp, #8
    c372:	f841 3d04 	str.w	r3, [r1, #-4]!
    c376:	68a0      	ldr	r0, [r4, #8]
    c378:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    c37a:	3b0c      	subs	r3, #12
    c37c:	2204      	movs	r2, #4
    c37e:	4418      	add	r0, r3
    c380:	f7f3 ff9e 	bl	2c0 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    c384:	89a2      	ldrh	r2, [r4, #12]
    c386:	3a0c      	subs	r2, #12
    c388:	b292      	uxth	r2, r2
    c38a:	68a1      	ldr	r1, [r4, #8]
    c38c:	f105 0048 	add.w	r0, r5, #72	; 0x48
    c390:	f7fd fe70 	bl	a074 <smp_sign_buf>
	if (err) {
    c394:	4602      	mov	r2, r0
    c396:	b940      	cbnz	r0, c3aa <bt_smp_sign+0x5a>
	keys->local_csrk.cnt++;
    c398:	6dab      	ldr	r3, [r5, #88]	; 0x58
    c39a:	3301      	adds	r3, #1
    c39c:	65ab      	str	r3, [r5, #88]	; 0x58
}
    c39e:	4610      	mov	r0, r2
    c3a0:	b003      	add	sp, #12
    c3a2:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    c3a4:	f06f 0201 	mvn.w	r2, #1
    c3a8:	e7f9      	b.n	c39e <bt_smp_sign+0x4e>
		return -EIO;
    c3aa:	f06f 0204 	mvn.w	r2, #4
    c3ae:	e7f6      	b.n	c39e <bt_smp_sign+0x4e>

0000c3b0 <bt_smp_update_keys>:
{
    c3b0:	b570      	push	{r4, r5, r6, lr}
    c3b2:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    c3b4:	f7fd fd5c 	bl	9e70 <smp_chan_get>
	if (!smp) {
    c3b8:	2800      	cmp	r0, #0
    c3ba:	d03d      	beq.n	c438 <bt_smp_update_keys+0x88>
    c3bc:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c3be:	f3bf 8f5b 	dmb	ish
    c3c2:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c3c6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c3ca:	f013 0f08 	tst.w	r3, #8
    c3ce:	d033      	beq.n	c438 <bt_smp_update_keys+0x88>
	if (conn->le.keys) {
    c3d0:	6f20      	ldr	r0, [r4, #112]	; 0x70
    c3d2:	b108      	cbz	r0, c3d8 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    c3d4:	f000 f97f 	bl	c6d6 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    c3d8:	f104 0048 	add.w	r0, r4, #72	; 0x48
    c3dc:	f000 f8a4 	bl	c528 <bt_keys_get_addr>
    c3e0:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    c3e2:	b348      	cbz	r0, c438 <bt_smp_update_keys+0x88>
    c3e4:	f3bf 8f5b 	dmb	ish
    c3e8:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c3ec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    c3f0:	f413 6f00 	tst.w	r3, #2048	; 0x800
    c3f4:	d121      	bne.n	c43a <bt_smp_update_keys+0x8a>
	switch (smp->method) {
    c3f6:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    c3fa:	3b01      	subs	r3, #1
    c3fc:	2b02      	cmp	r3, #2
    c3fe:	d82b      	bhi.n	c458 <bt_smp_update_keys+0xa8>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    c400:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c402:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c404:	f3bf 8f5b 	dmb	ish
    c408:	e853 2f00 	ldrex	r2, [r3]
    c40c:	f042 0201 	orr.w	r2, r2, #1
    c410:	e843 2100 	strex	r1, r2, [r3]
    c414:	2900      	cmp	r1, #0
    c416:	d1f7      	bne.n	c408 <bt_smp_update_keys+0x58>
    c418:	f3bf 8f5b 	dmb	ish
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    c41c:	6f26      	ldr	r6, [r4, #112]	; 0x70
    c41e:	4628      	mov	r0, r5
    c420:	f7fd fc8a 	bl	9d38 <get_encryption_key_size>
    c424:	71f0      	strb	r0, [r6, #7]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c426:	f3bf 8f5b 	dmb	ish
    c42a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c42e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    c432:	f013 0f20 	tst.w	r3, #32
    c436:	d11e      	bne.n	c476 <bt_smp_update_keys+0xc6>
    c438:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    c43a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c43c:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c43e:	f3bf 8f5b 	dmb	ish
    c442:	e853 2f00 	ldrex	r2, [r3]
    c446:	f042 0202 	orr.w	r2, r2, #2
    c44a:	e843 2100 	strex	r1, r2, [r3]
    c44e:	2900      	cmp	r1, #0
    c450:	d1f7      	bne.n	c442 <bt_smp_update_keys+0x92>
    c452:	f3bf 8f5b 	dmb	ish
    c456:	e7ce      	b.n	c3f6 <bt_smp_update_keys+0x46>
		atomic_clear_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    c458:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c45a:	3308      	adds	r3, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c45c:	f3bf 8f5b 	dmb	ish
    c460:	e853 2f00 	ldrex	r2, [r3]
    c464:	f022 0201 	bic.w	r2, r2, #1
    c468:	e843 2100 	strex	r1, r2, [r3]
    c46c:	2900      	cmp	r1, #0
    c46e:	d1f7      	bne.n	c460 <bt_smp_update_keys+0xb0>
    c470:	f3bf 8f5b 	dmb	ish
    c474:	e7d2      	b.n	c41c <bt_smp_update_keys+0x6c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c476:	f3bf 8f5b 	dmb	ish
    c47a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c47e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    c482:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c486:	d0d7      	beq.n	c438 <bt_smp_update_keys+0x88>
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    c488:	2120      	movs	r1, #32
    c48a:	6f20      	ldr	r0, [r4, #112]	; 0x70
    c48c:	f000 f90c 	bl	c6a8 <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    c490:	6f20      	ldr	r0, [r4, #112]	; 0x70
    c492:	2210      	movs	r2, #16
    c494:	f105 01e3 	add.w	r1, r5, #227	; 0xe3
    c498:	301a      	adds	r0, #26
    c49a:	f7f3 ff11 	bl	2c0 <memcpy>
		conn->le.keys->ltk.rand = 0;
    c49e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c4a0:	2000      	movs	r0, #0
    c4a2:	2100      	movs	r1, #0
    c4a4:	e9c3 0104 	strd	r0, r1, [r3, #16]
		conn->le.keys->ltk.ediv = 0;
    c4a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c4aa:	2200      	movs	r2, #0
    c4ac:	831a      	strh	r2, [r3, #24]
    c4ae:	e7c3      	b.n	c438 <bt_smp_update_keys+0x88>

0000c4b0 <bt_smp_get_tk>:
{
    c4b0:	b570      	push	{r4, r5, r6, lr}
    c4b2:	460d      	mov	r5, r1
	smp = smp_chan_get(conn);
    c4b4:	f7fd fcdc 	bl	9e70 <smp_chan_get>
	if (!smp) {
    c4b8:	b300      	cbz	r0, c4fc <bt_smp_get_tk+0x4c>
    c4ba:	4604      	mov	r4, r0
    c4bc:	f3bf 8f5b 	dmb	ish
    c4c0:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c4c4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c4c8:	f013 0f08 	tst.w	r3, #8
    c4cc:	d101      	bne.n	c4d2 <bt_smp_get_tk+0x22>
		return false;
    c4ce:	2000      	movs	r0, #0
    c4d0:	bd70      	pop	{r4, r5, r6, pc}
	enc_size = get_encryption_key_size(smp);
    c4d2:	f7fd fc31 	bl	9d38 <get_encryption_key_size>
    c4d6:	4606      	mov	r6, r0
	memcpy(tk, smp->tk, enc_size);
    c4d8:	4602      	mov	r2, r0
    c4da:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
    c4de:	4628      	mov	r0, r5
    c4e0:	f7f3 feee 	bl	2c0 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
    c4e4:	2e0f      	cmp	r6, #15
    c4e6:	d901      	bls.n	c4ec <bt_smp_get_tk+0x3c>
	return true;
    c4e8:	2001      	movs	r0, #1
}
    c4ea:	bd70      	pop	{r4, r5, r6, pc}
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    c4ec:	f1c6 0210 	rsb	r2, r6, #16
    c4f0:	2100      	movs	r1, #0
    c4f2:	19a8      	adds	r0, r5, r6
    c4f4:	f01d f8f0 	bl	296d8 <memset>
	return true;
    c4f8:	2001      	movs	r0, #1
    c4fa:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    c4fc:	2000      	movs	r0, #0
    c4fe:	bd70      	pop	{r4, r5, r6, pc}

0000c500 <bt_smp_init>:

int bt_smp_init(void)
{
    c500:	b508      	push	{r3, lr}
	};
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
    c502:	f7fd fca9 	bl	9e58 <le_sc_supported>
    c506:	4b05      	ldr	r3, [pc, #20]	; (c51c <bt_smp_init+0x1c>)
    c508:	7018      	strb	r0, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    c50a:	4805      	ldr	r0, [pc, #20]	; (c520 <bt_smp_init+0x20>)
    c50c:	f7fa fe04 	bl	7118 <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    c510:	4804      	ldr	r0, [pc, #16]	; (c524 <bt_smp_init+0x24>)
    c512:	f7f9 fc7f 	bl	5e14 <bt_pub_key_gen>

	return smp_self_test();
}
    c516:	2000      	movs	r0, #0
    c518:	bd08      	pop	{r3, pc}
    c51a:	bf00      	nop
    c51c:	200008a4 	.word	0x200008a4
    c520:	2000ba34 	.word	0x2000ba34
    c524:	2000ba54 	.word	0x2000ba54

0000c528 <bt_keys_get_addr>:
#include "keys.h"

static struct bt_keys key_pool[CONFIG_BT_MAX_PAIRED];

struct bt_keys *bt_keys_get_addr(const bt_addr_le_t *addr)
{
    c528:	b5f0      	push	{r4, r5, r6, r7, lr}
    c52a:	b083      	sub	sp, #12
    c52c:	4606      	mov	r6, r0
	struct bt_keys *keys;
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c52e:	2500      	movs	r5, #0
    c530:	b11d      	cbz	r5, c53a <bt_keys_get_addr+0x12>
		}
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    c532:	2400      	movs	r4, #0
}
    c534:	4620      	mov	r0, r4
    c536:	b003      	add	sp, #12
    c538:	bdf0      	pop	{r4, r5, r6, r7, pc}
		keys = &key_pool[i];
    c53a:	00eb      	lsls	r3, r5, #3
    c53c:	442b      	add	r3, r5
    c53e:	011a      	lsls	r2, r3, #4
    c540:	4c0d      	ldr	r4, [pc, #52]	; (c578 <bt_keys_get_addr+0x50>)
    c542:	4414      	add	r4, r2
	return memcmp(a, b, sizeof(*a));
    c544:	2207      	movs	r2, #7
    c546:	4631      	mov	r1, r6
    c548:	4620      	mov	r0, r4
    c54a:	f01d f831 	bl	295b0 <memcmp>
		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    c54e:	2800      	cmp	r0, #0
    c550:	d0f0      	beq.n	c534 <bt_keys_get_addr+0xc>
		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    c552:	2300      	movs	r3, #0
    c554:	9300      	str	r3, [sp, #0]
    c556:	f8cd 3003 	str.w	r3, [sp, #3]
    c55a:	2207      	movs	r2, #7
    c55c:	4669      	mov	r1, sp
    c55e:	4620      	mov	r0, r4
    c560:	f01d f826 	bl	295b0 <memcmp>
    c564:	b108      	cbz	r0, c56a <bt_keys_get_addr+0x42>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c566:	3501      	adds	r5, #1
    c568:	e7e2      	b.n	c530 <bt_keys_get_addr+0x8>
	memcpy(dst, src, sizeof(*dst));
    c56a:	2207      	movs	r2, #7
    c56c:	4631      	mov	r1, r6
    c56e:	4620      	mov	r0, r4
    c570:	f7f3 fea6 	bl	2c0 <memcpy>
			return keys;
    c574:	e7de      	b.n	c534 <bt_keys_get_addr+0xc>
    c576:	bf00      	nop
    c578:	200008a8 	.word	0x200008a8

0000c57c <bt_keys_find>:
		}
	}
}

struct bt_keys *bt_keys_find(int type, const bt_addr_le_t *addr)
{
    c57c:	b570      	push	{r4, r5, r6, lr}
    c57e:	4605      	mov	r5, r0
    c580:	460e      	mov	r6, r1
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c582:	2400      	movs	r4, #0
    c584:	b10c      	cbz	r4, c58a <bt_keys_find+0xe>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    c586:	2000      	movs	r0, #0
}
    c588:	bd70      	pop	{r4, r5, r6, pc}
		if ((key_pool[i].keys & type) &&
    c58a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    c58e:	011a      	lsls	r2, r3, #4
    c590:	4b0b      	ldr	r3, [pc, #44]	; (c5c0 <bt_keys_find+0x44>)
    c592:	4413      	add	r3, r2
    c594:	899b      	ldrh	r3, [r3, #12]
    c596:	422b      	tst	r3, r5
    c598:	d101      	bne.n	c59e <bt_keys_find+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c59a:	3401      	adds	r4, #1
    c59c:	e7f2      	b.n	c584 <bt_keys_find+0x8>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    c59e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    c5a2:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    c5a4:	2207      	movs	r2, #7
    c5a6:	4631      	mov	r1, r6
    c5a8:	4805      	ldr	r0, [pc, #20]	; (c5c0 <bt_keys_find+0x44>)
    c5aa:	4418      	add	r0, r3
    c5ac:	f01d f800 	bl	295b0 <memcmp>
		if ((key_pool[i].keys & type) &&
    c5b0:	2800      	cmp	r0, #0
    c5b2:	d1f2      	bne.n	c59a <bt_keys_find+0x1e>
			return &key_pool[i];
    c5b4:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    c5b8:	0123      	lsls	r3, r4, #4
    c5ba:	4801      	ldr	r0, [pc, #4]	; (c5c0 <bt_keys_find+0x44>)
    c5bc:	4418      	add	r0, r3
    c5be:	bd70      	pop	{r4, r5, r6, pc}
    c5c0:	200008a8 	.word	0x200008a8

0000c5c4 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(const bt_addr_le_t *addr)
{
    c5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    c5c6:	7803      	ldrb	r3, [r0, #0]
    c5c8:	2b01      	cmp	r3, #1
    c5ca:	d004      	beq.n	c5d6 <bt_keys_find_irk+0x12>
		return false;
    c5cc:	2300      	movs	r3, #0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
    c5ce:	b153      	cbz	r3, c5e6 <bt_keys_find_irk+0x22>
    c5d0:	4605      	mov	r5, r0
    c5d2:	2400      	movs	r4, #0
    c5d4:	e00a      	b.n	c5ec <bt_keys_find_irk+0x28>
	return BT_ADDR_IS_RPA(&addr->a);
    c5d6:	7983      	ldrb	r3, [r0, #6]
    c5d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c5dc:	2b40      	cmp	r3, #64	; 0x40
    c5de:	bf14      	ite	ne
    c5e0:	2300      	movne	r3, #0
    c5e2:	2301      	moveq	r3, #1
    c5e4:	e7f3      	b.n	c5ce <bt_keys_find_irk+0xa>
		return NULL;
    c5e6:	2000      	movs	r0, #0
    c5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c5ea:	3401      	adds	r4, #1
    c5ec:	b9c4      	cbnz	r4, c620 <bt_keys_find_irk+0x5c>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    c5ee:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    c5f2:	011a      	lsls	r2, r3, #4
    c5f4:	4b1e      	ldr	r3, [pc, #120]	; (c670 <bt_keys_find_irk+0xac>)
    c5f6:	4413      	add	r3, r2
    c5f8:	899b      	ldrh	r3, [r3, #12]
    c5fa:	f013 0f02 	tst.w	r3, #2
    c5fe:	d0f4      	beq.n	c5ea <bt_keys_find_irk+0x26>
			continue;
		}

		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    c600:	4611      	mov	r1, r2
    c602:	3140      	adds	r1, #64	; 0x40
	return memcmp(a, b, sizeof(*a));
    c604:	2206      	movs	r2, #6
    c606:	4b1a      	ldr	r3, [pc, #104]	; (c670 <bt_keys_find_irk+0xac>)
    c608:	4419      	add	r1, r3
    c60a:	1c68      	adds	r0, r5, #1
    c60c:	f01c ffd0 	bl	295b0 <memcmp>
    c610:	2800      	cmp	r0, #0
    c612:	d1ea      	bne.n	c5ea <bt_keys_find_irk+0x26>
			BT_DBG("cached RPA %s for %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));
			return &key_pool[i];
    c614:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    c618:	0123      	lsls	r3, r4, #4
    c61a:	4815      	ldr	r0, [pc, #84]	; (c670 <bt_keys_find_irk+0xac>)
    c61c:	4418      	add	r0, r3
    c61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c620:	2400      	movs	r4, #0
    c622:	e000      	b.n	c626 <bt_keys_find_irk+0x62>
		}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c624:	3401      	adds	r4, #1
    c626:	bb04      	cbnz	r4, c66a <bt_keys_find_irk+0xa6>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    c628:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    c62c:	011a      	lsls	r2, r3, #4
    c62e:	4b10      	ldr	r3, [pc, #64]	; (c670 <bt_keys_find_irk+0xac>)
    c630:	4413      	add	r3, r2
    c632:	899b      	ldrh	r3, [r3, #12]
    c634:	f013 0f02 	tst.w	r3, #2
    c638:	d0f4      	beq.n	c624 <bt_keys_find_irk+0x60>
			continue;
		}

		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    c63a:	4610      	mov	r0, r2
    c63c:	3030      	adds	r0, #48	; 0x30
    c63e:	1c6e      	adds	r6, r5, #1
    c640:	4631      	mov	r1, r6
    c642:	4b0b      	ldr	r3, [pc, #44]	; (c670 <bt_keys_find_irk+0xac>)
    c644:	4418      	add	r0, r3
    c646:	f7f7 f987 	bl	3958 <bt_rpa_irk_matches>
    c64a:	2800      	cmp	r0, #0
    c64c:	d0ea      	beq.n	c624 <bt_keys_find_irk+0x60>
			BT_DBG("RPA %s matches %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));

			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
    c64e:	4d08      	ldr	r5, [pc, #32]	; (c670 <bt_keys_find_irk+0xac>)
    c650:	00e7      	lsls	r7, r4, #3
    c652:	193a      	adds	r2, r7, r4
    c654:	0113      	lsls	r3, r2, #4
    c656:	3340      	adds	r3, #64	; 0x40
	memcpy(dst, src, sizeof(*dst));
    c658:	2206      	movs	r2, #6
    c65a:	4631      	mov	r1, r6
    c65c:	18e8      	adds	r0, r5, r3
    c65e:	f7f3 fe2f 	bl	2c0 <memcpy>

			return &key_pool[i];
    c662:	443c      	add	r4, r7
    c664:	0120      	lsls	r0, r4, #4
    c666:	4428      	add	r0, r5
    c668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
    c66a:	2000      	movs	r0, #0
}
    c66c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c66e:	bf00      	nop
    c670:	200008a8 	.word	0x200008a8

0000c674 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(const bt_addr_le_t *addr)
{
    c674:	b538      	push	{r3, r4, r5, lr}
    c676:	4605      	mov	r5, r0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c678:	2400      	movs	r4, #0
    c67a:	b10c      	cbz	r4, c680 <bt_keys_find_addr+0xc>
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    c67c:	2000      	movs	r0, #0
}
    c67e:	bd38      	pop	{r3, r4, r5, pc}
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    c680:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    c684:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    c686:	2207      	movs	r2, #7
    c688:	4629      	mov	r1, r5
    c68a:	4806      	ldr	r0, [pc, #24]	; (c6a4 <bt_keys_find_addr+0x30>)
    c68c:	4418      	add	r0, r3
    c68e:	f01c ff8f 	bl	295b0 <memcmp>
    c692:	b108      	cbz	r0, c698 <bt_keys_find_addr+0x24>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c694:	3401      	adds	r4, #1
    c696:	e7f0      	b.n	c67a <bt_keys_find_addr+0x6>
			return &key_pool[i];
    c698:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    c69c:	0123      	lsls	r3, r4, #4
    c69e:	4801      	ldr	r0, [pc, #4]	; (c6a4 <bt_keys_find_addr+0x30>)
    c6a0:	4418      	add	r0, r3
    c6a2:	bd38      	pop	{r3, r4, r5, pc}
    c6a4:	200008a8 	.word	0x200008a8

0000c6a8 <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
    c6a8:	8983      	ldrh	r3, [r0, #12]
    c6aa:	4319      	orrs	r1, r3
    c6ac:	8181      	strh	r1, [r0, #12]
    c6ae:	4770      	bx	lr

0000c6b0 <bt_keys_get_type>:
{
    c6b0:	b570      	push	{r4, r5, r6, lr}
    c6b2:	4606      	mov	r6, r0
    c6b4:	460d      	mov	r5, r1
	keys = bt_keys_find(type, addr);
    c6b6:	f7ff ff61 	bl	c57c <bt_keys_find>
	if (keys) {
    c6ba:	4604      	mov	r4, r0
    c6bc:	b108      	cbz	r0, c6c2 <bt_keys_get_type+0x12>
}
    c6be:	4620      	mov	r0, r4
    c6c0:	bd70      	pop	{r4, r5, r6, pc}
	keys = bt_keys_get_addr(addr);
    c6c2:	4628      	mov	r0, r5
    c6c4:	f7ff ff30 	bl	c528 <bt_keys_get_addr>
	if (!keys) {
    c6c8:	4604      	mov	r4, r0
    c6ca:	2800      	cmp	r0, #0
    c6cc:	d0f7      	beq.n	c6be <bt_keys_get_type+0xe>
	bt_keys_add_type(keys, type);
    c6ce:	4631      	mov	r1, r6
    c6d0:	f7ff ffea 	bl	c6a8 <bt_keys_add_type>
	return keys;
    c6d4:	e7f3      	b.n	c6be <bt_keys_get_type+0xe>

0000c6d6 <bt_keys_clear>:
}

void bt_keys_clear(struct bt_keys *keys)
{
    c6d6:	b508      	push	{r3, lr}
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	memset(keys, 0, sizeof(*keys));
    c6d8:	2290      	movs	r2, #144	; 0x90
    c6da:	2100      	movs	r1, #0
    c6dc:	f01c fffc 	bl	296d8 <memset>
    c6e0:	bd08      	pop	{r3, pc}

0000c6e2 <status_cmd_handle>:
}
    c6e2:	f06f 0015 	mvn.w	r0, #21
    c6e6:	4770      	bx	lr

0000c6e8 <evt_create>:
{
    c6e8:	b538      	push	{r3, r4, r5, lr}
    c6ea:	460d      	mov	r5, r1
    c6ec:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    c6ee:	2102      	movs	r1, #2
    c6f0:	3008      	adds	r0, #8
    c6f2:	f00d fd1f 	bl	1a134 <net_buf_simple_add>
	hdr->evt = evt;
    c6f6:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    c6f8:	7044      	strb	r4, [r0, #1]
    c6fa:	bd38      	pop	{r3, r4, r5, pc}

0000c6fc <cmd_status>:
{
    c6fc:	b538      	push	{r3, r4, r5, lr}
    c6fe:	4605      	mov	r5, r0
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    c700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c704:	f7f9 fb5e 	bl	5dc4 <bt_buf_get_cmd_complete>
    c708:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    c70a:	2204      	movs	r2, #4
    c70c:	210f      	movs	r1, #15
    c70e:	f7ff ffeb 	bl	c6e8 <evt_create>
	cs = net_buf_add(buf, sizeof(*cs));
    c712:	2104      	movs	r1, #4
    c714:	f104 0008 	add.w	r0, r4, #8
    c718:	f00d fd0c 	bl	1a134 <net_buf_simple_add>
	cs->status = status;
    c71c:	7005      	strb	r5, [r0, #0]
	cs->ncmd = 1;
    c71e:	2301      	movs	r3, #1
    c720:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    c722:	4b02      	ldr	r3, [pc, #8]	; (c72c <cmd_status+0x30>)
    c724:	881b      	ldrh	r3, [r3, #0]
    c726:	8043      	strh	r3, [r0, #2]
}
    c728:	4620      	mov	r0, r4
    c72a:	bd38      	pop	{r3, r4, r5, pc}
    c72c:	20000938 	.word	0x20000938

0000c730 <disconnect>:
{
    c730:	b510      	push	{r4, lr}
    c732:	460c      	mov	r4, r1
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    c734:	6883      	ldr	r3, [r0, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    c736:	7899      	ldrb	r1, [r3, #2]
    c738:	8818      	ldrh	r0, [r3, #0]
    c73a:	f00b f964 	bl	17a06 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    c73e:	b100      	cbz	r0, c742 <disconnect+0x12>
    c740:	200c      	movs	r0, #12
    c742:	f7ff ffdb 	bl	c6fc <cmd_status>
    c746:	6020      	str	r0, [r4, #0]
    c748:	bd10      	pop	{r4, pc}
	...

0000c74c <cmd_complete>:
{
    c74c:	b538      	push	{r3, r4, r5, lr}
    c74e:	4604      	mov	r4, r0
    c750:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    c752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c756:	f7f9 fb35 	bl	5dc4 <bt_buf_get_cmd_complete>
    c75a:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    c75c:	1cea      	adds	r2, r5, #3
    c75e:	b2d2      	uxtb	r2, r2
    c760:	210e      	movs	r1, #14
    c762:	f7ff ffc1 	bl	c6e8 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    c766:	6820      	ldr	r0, [r4, #0]
    c768:	2103      	movs	r1, #3
    c76a:	3008      	adds	r0, #8
    c76c:	f00d fce2 	bl	1a134 <net_buf_simple_add>
	cc->ncmd = 1;
    c770:	2301      	movs	r3, #1
    c772:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    c774:	4b04      	ldr	r3, [pc, #16]	; (c788 <cmd_complete+0x3c>)
    c776:	881b      	ldrh	r3, [r3, #0]
    c778:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    c77c:	6820      	ldr	r0, [r4, #0]
    c77e:	4629      	mov	r1, r5
    c780:	3008      	adds	r0, #8
    c782:	f00d fcd7 	bl	1a134 <net_buf_simple_add>
}
    c786:	bd38      	pop	{r3, r4, r5, pc}
    c788:	20000938 	.word	0x20000938

0000c78c <set_event_mask_page_2>:
{
    c78c:	b570      	push	{r4, r5, r6, lr}
    c78e:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask_page_2 *cmd = (void *)buf->data;
    c790:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    c792:	79da      	ldrb	r2, [r3, #7]
    c794:	7999      	ldrb	r1, [r3, #6]
    c796:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    c79a:	7958      	ldrb	r0, [r3, #5]
    c79c:	791a      	ldrb	r2, [r3, #4]
    c79e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    c7a2:	2400      	movs	r4, #0
    c7a4:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    c7a8:	78d9      	ldrb	r1, [r3, #3]
    c7aa:	789a      	ldrb	r2, [r3, #2]
    c7ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c7b0:	7859      	ldrb	r1, [r3, #1]
    c7b2:	781b      	ldrb	r3, [r3, #0]
    c7b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    c7b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    c7bc:	ea44 0003 	orr.w	r0, r4, r3
    c7c0:	4629      	mov	r1, r5
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    c7c2:	4b04      	ldr	r3, [pc, #16]	; (c7d4 <set_event_mask_page_2+0x48>)
    c7c4:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    c7c8:	2101      	movs	r1, #1
    c7ca:	4630      	mov	r0, r6
    c7cc:	f7ff ffbe 	bl	c74c <cmd_complete>
	ccst->status = 0x00;
    c7d0:	7004      	strb	r4, [r0, #0]
    c7d2:	bd70      	pop	{r4, r5, r6, pc}
    c7d4:	200009c8 	.word	0x200009c8

0000c7d8 <read_local_version_info>:
{
    c7d8:	b508      	push	{r3, lr}
    c7da:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    c7dc:	2109      	movs	r1, #9
    c7de:	f7ff ffb5 	bl	c74c <cmd_complete>
	rp->status = 0x00;
    c7e2:	2300      	movs	r3, #0
    c7e4:	7003      	strb	r3, [r0, #0]
	rp->hci_version = BT_HCI_VERSION_5_0;
    c7e6:	2209      	movs	r2, #9
    c7e8:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
    c7ea:	7083      	strb	r3, [r0, #2]
    c7ec:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    c7ee:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    c7f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c7f4:	7143      	strb	r3, [r0, #5]
    c7f6:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    c7f8:	71c3      	strb	r3, [r0, #7]
    c7fa:	7203      	strb	r3, [r0, #8]
    c7fc:	bd08      	pop	{r3, pc}

0000c7fe <le_read_buffer_size>:
{
    c7fe:	b508      	push	{r3, lr}
    c800:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    c802:	2104      	movs	r1, #4
    c804:	f7ff ffa2 	bl	c74c <cmd_complete>
	rp->status = 0x00;
    c808:	2300      	movs	r3, #0
    c80a:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    c80c:	221b      	movs	r2, #27
    c80e:	7042      	strb	r2, [r0, #1]
    c810:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    c812:	2302      	movs	r3, #2
    c814:	70c3      	strb	r3, [r0, #3]
    c816:	bd08      	pop	{r3, pc}

0000c818 <le_read_supp_states>:
{
    c818:	b508      	push	{r3, lr}
    c81a:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    c81c:	2109      	movs	r1, #9
    c81e:	f7ff ff95 	bl	c74c <cmd_complete>
	rp->status = 0x00;
    c822:	2200      	movs	r2, #0
    c824:	7002      	strb	r2, [r0, #0]
	dst[0] = val;
    c826:	23ff      	movs	r3, #255	; 0xff
    c828:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    c82a:	7083      	strb	r3, [r0, #2]
	dst[0] = val;
    c82c:	213f      	movs	r1, #63	; 0x3f
    c82e:	70c1      	strb	r1, [r0, #3]
	dst[1] = val >> 8;
    c830:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
    c832:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    c834:	2303      	movs	r3, #3
    c836:	7183      	strb	r3, [r0, #6]
	dst[0] = val;
    c838:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
    c83a:	7202      	strb	r2, [r0, #8]
    c83c:	bd08      	pop	{r3, pc}

0000c83e <le_read_adv_chan_tx_power>:
{
    c83e:	b508      	push	{r3, lr}
    c840:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    c842:	2102      	movs	r1, #2
    c844:	f7ff ff82 	bl	c74c <cmd_complete>
	rp->status = 0x00;
    c848:	2300      	movs	r3, #0
    c84a:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    c84c:	7043      	strb	r3, [r0, #1]
    c84e:	bd08      	pop	{r3, pc}

0000c850 <vs_read_version_info>:
{
    c850:	b508      	push	{r3, lr}
    c852:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    c854:	210d      	movs	r1, #13
    c856:	f7ff ff79 	bl	c74c <cmd_complete>
	rp->status = 0x00;
    c85a:	2300      	movs	r3, #0
    c85c:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    c85e:	2202      	movs	r2, #2
    c860:	7042      	strb	r2, [r0, #1]
    c862:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    c864:	70c2      	strb	r2, [r0, #3]
    c866:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    c868:	7143      	strb	r3, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    c86a:	2201      	movs	r2, #1
    c86c:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    c86e:	2209      	movs	r2, #9
    c870:	71c2      	strb	r2, [r0, #7]
    c872:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    c874:	2263      	movs	r2, #99	; 0x63
    c876:	7242      	strb	r2, [r0, #9]
    c878:	7283      	strb	r3, [r0, #10]
    c87a:	72c3      	strb	r3, [r0, #11]
    c87c:	7303      	strb	r3, [r0, #12]
    c87e:	bd08      	pop	{r3, pc}

0000c880 <meta_evt>:
{
    c880:	b570      	push	{r4, r5, r6, lr}
    c882:	4604      	mov	r4, r0
    c884:	460e      	mov	r6, r1
    c886:	4615      	mov	r5, r2
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    c888:	3201      	adds	r2, #1
    c88a:	b2d2      	uxtb	r2, r2
    c88c:	213e      	movs	r1, #62	; 0x3e
    c88e:	f7ff ff2b 	bl	c6e8 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    c892:	3408      	adds	r4, #8
    c894:	2101      	movs	r1, #1
    c896:	4620      	mov	r0, r4
    c898:	f00d fc4c 	bl	1a134 <net_buf_simple_add>
	me->subevent = subevt;
    c89c:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
    c89e:	4629      	mov	r1, r5
    c8a0:	4620      	mov	r0, r4
    c8a2:	f00d fc47 	bl	1a134 <net_buf_simple_add>
}
    c8a6:	bd70      	pop	{r4, r5, r6, pc}

0000c8a8 <le_chan_sel_algo>:
{
    c8a8:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c8aa:	4b0f      	ldr	r3, [pc, #60]	; (c8e8 <le_chan_sel_algo+0x40>)
    c8ac:	e9d3 4500 	ldrd	r4, r5, [r3]
    c8b0:	2400      	movs	r4, #0
    c8b2:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    c8b6:	ea54 0305 	orrs.w	r3, r4, r5
    c8ba:	d008      	beq.n	c8ce <le_chan_sel_algo+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    c8bc:	4b0b      	ldr	r3, [pc, #44]	; (c8ec <le_chan_sel_algo+0x44>)
    c8be:	e9d3 4500 	ldrd	r4, r5, [r3]
    c8c2:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
    c8c6:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c8c8:	ea54 0305 	orrs.w	r3, r4, r5
    c8cc:	d100      	bne.n	c8d0 <le_chan_sel_algo+0x28>
    c8ce:	bd38      	pop	{r3, r4, r5, pc}
    c8d0:	4613      	mov	r3, r2
    c8d2:	460d      	mov	r5, r1
    c8d4:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    c8d6:	2203      	movs	r2, #3
    c8d8:	2114      	movs	r1, #20
    c8da:	4618      	mov	r0, r3
    c8dc:	f7ff ffd0 	bl	c880 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    c8e0:	8005      	strh	r5, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    c8e2:	78e3      	ldrb	r3, [r4, #3]
    c8e4:	7083      	strb	r3, [r0, #2]
    c8e6:	e7f2      	b.n	c8ce <le_chan_sel_algo+0x26>
    c8e8:	2000ba60 	.word	0x2000ba60
    c8ec:	2000ba68 	.word	0x2000ba68

0000c8f0 <disconn_complete>:
{
    c8f0:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    c8f2:	4b11      	ldr	r3, [pc, #68]	; (c938 <disconn_complete+0x48>)
    c8f4:	e9d3 4500 	ldrd	r4, r5, [r3]
    c8f8:	f004 0410 	and.w	r4, r4, #16
    c8fc:	2500      	movs	r5, #0
    c8fe:	ea54 0305 	orrs.w	r3, r4, r5
    c902:	d100      	bne.n	c906 <disconn_complete+0x16>
    c904:	bd70      	pop	{r4, r5, r6, pc}
    c906:	4614      	mov	r4, r2
    c908:	460e      	mov	r6, r1
    c90a:	4605      	mov	r5, r0
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    c90c:	2204      	movs	r2, #4
    c90e:	2105      	movs	r1, #5
    c910:	4620      	mov	r0, r4
    c912:	f7ff fee9 	bl	c6e8 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    c916:	2104      	movs	r1, #4
    c918:	f104 0008 	add.w	r0, r4, #8
    c91c:	f00d fc0a 	bl	1a134 <net_buf_simple_add>
	ep->status = 0x00;
    c920:	2300      	movs	r3, #0
    c922:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    c924:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    c928:	782b      	ldrb	r3, [r5, #0]
    c92a:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    c92c:	4a03      	ldr	r2, [pc, #12]	; (c93c <disconn_complete+0x4c>)
    c92e:	6813      	ldr	r3, [r2, #0]
    c930:	3b01      	subs	r3, #1
    c932:	6013      	str	r3, [r2, #0]
    c934:	e7e6      	b.n	c904 <disconn_complete+0x14>
    c936:	bf00      	nop
    c938:	2000ba60 	.word	0x2000ba60
    c93c:	2000093c 	.word	0x2000093c

0000c940 <enc_refresh_complete>:
{
    c940:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    c942:	4b0d      	ldr	r3, [pc, #52]	; (c978 <enc_refresh_complete+0x38>)
    c944:	e9d3 4500 	ldrd	r4, r5, [r3]
    c948:	2400      	movs	r4, #0
    c94a:	f405 4500 	and.w	r5, r5, #32768	; 0x8000
    c94e:	ea54 0305 	orrs.w	r3, r4, r5
    c952:	d100      	bne.n	c956 <enc_refresh_complete+0x16>
    c954:	bd38      	pop	{r3, r4, r5, pc}
    c956:	4614      	mov	r4, r2
    c958:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    c95a:	2203      	movs	r2, #3
    c95c:	2130      	movs	r1, #48	; 0x30
    c95e:	4620      	mov	r0, r4
    c960:	f7ff fec2 	bl	c6e8 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    c964:	2103      	movs	r1, #3
    c966:	f104 0008 	add.w	r0, r4, #8
    c96a:	f00d fbe3 	bl	1a134 <net_buf_simple_add>
	ep->status = 0x00;
    c96e:	2300      	movs	r3, #0
    c970:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    c972:	f8a0 5001 	strh.w	r5, [r0, #1]
    c976:	e7ed      	b.n	c954 <enc_refresh_complete+0x14>
    c978:	2000ba60 	.word	0x2000ba60

0000c97c <auth_payload_timeout_exp>:
{
    c97c:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    c97e:	4b0c      	ldr	r3, [pc, #48]	; (c9b0 <auth_payload_timeout_exp+0x34>)
    c980:	e9d3 4500 	ldrd	r4, r5, [r3]
    c984:	f404 0400 	and.w	r4, r4, #8388608	; 0x800000
    c988:	2500      	movs	r5, #0
    c98a:	ea54 0305 	orrs.w	r3, r4, r5
    c98e:	d100      	bne.n	c992 <auth_payload_timeout_exp+0x16>
    c990:	bd38      	pop	{r3, r4, r5, pc}
    c992:	4614      	mov	r4, r2
    c994:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    c996:	2202      	movs	r2, #2
    c998:	2157      	movs	r1, #87	; 0x57
    c99a:	4620      	mov	r0, r4
    c99c:	f7ff fea4 	bl	c6e8 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    c9a0:	2102      	movs	r1, #2
    c9a2:	f104 0008 	add.w	r0, r4, #8
    c9a6:	f00d fbc5 	bl	1a134 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    c9aa:	8005      	strh	r5, [r0, #0]
    c9ac:	e7f0      	b.n	c990 <auth_payload_timeout_exp+0x14>
    c9ae:	bf00      	nop
    c9b0:	200009c8 	.word	0x200009c8

0000c9b4 <remote_version_info>:
{
    c9b4:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    c9b6:	4b11      	ldr	r3, [pc, #68]	; (c9fc <remote_version_info+0x48>)
    c9b8:	e9d3 4500 	ldrd	r4, r5, [r3]
    c9bc:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    c9c0:	2500      	movs	r5, #0
    c9c2:	ea54 0305 	orrs.w	r3, r4, r5
    c9c6:	d100      	bne.n	c9ca <remote_version_info+0x16>
    c9c8:	bd70      	pop	{r4, r5, r6, pc}
    c9ca:	4615      	mov	r5, r2
    c9cc:	460e      	mov	r6, r1
    c9ce:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    c9d0:	2208      	movs	r2, #8
    c9d2:	210c      	movs	r1, #12
    c9d4:	4628      	mov	r0, r5
    c9d6:	f7ff fe87 	bl	c6e8 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    c9da:	2108      	movs	r1, #8
    c9dc:	1868      	adds	r0, r5, r1
    c9de:	f00d fba9 	bl	1a134 <net_buf_simple_add>
	ep->status = 0x00;
    c9e2:	2300      	movs	r3, #0
    c9e4:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    c9e6:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    c9ea:	7923      	ldrb	r3, [r4, #4]
    c9ec:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    c9ee:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    c9f2:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    c9f4:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    c9f8:	80c3      	strh	r3, [r0, #6]
    c9fa:	e7e5      	b.n	c9c8 <remote_version_info+0x14>
    c9fc:	2000ba60 	.word	0x2000ba60

0000ca00 <encrypt_change>:
{
    ca00:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    ca02:	4b0f      	ldr	r3, [pc, #60]	; (ca40 <encrypt_change+0x40>)
    ca04:	e9d3 4500 	ldrd	r4, r5, [r3]
    ca08:	f004 0480 	and.w	r4, r4, #128	; 0x80
    ca0c:	2500      	movs	r5, #0
    ca0e:	ea54 0305 	orrs.w	r3, r4, r5
    ca12:	d100      	bne.n	ca16 <encrypt_change+0x16>
    ca14:	bd70      	pop	{r4, r5, r6, pc}
    ca16:	4615      	mov	r5, r2
    ca18:	460e      	mov	r6, r1
    ca1a:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    ca1c:	2204      	movs	r2, #4
    ca1e:	2108      	movs	r1, #8
    ca20:	4628      	mov	r0, r5
    ca22:	f7ff fe61 	bl	c6e8 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    ca26:	2104      	movs	r1, #4
    ca28:	f105 0008 	add.w	r0, r5, #8
    ca2c:	f00d fb82 	bl	1a134 <net_buf_simple_add>
	ep->status = err;
    ca30:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    ca32:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    ca36:	fab4 f384 	clz	r3, r4
    ca3a:	095b      	lsrs	r3, r3, #5
    ca3c:	70c3      	strb	r3, [r0, #3]
    ca3e:	e7e9      	b.n	ca14 <encrypt_change+0x14>
    ca40:	2000ba60 	.word	0x2000ba60

0000ca44 <read_remote_ver_info>:
{
    ca44:	b510      	push	{r4, lr}
    ca46:	460c      	mov	r4, r1
	struct bt_hci_cp_read_remote_version_info *cmd = (void *)buf->data;
    ca48:	6883      	ldr	r3, [r0, #8]
	status = ll_version_ind_send(handle);
    ca4a:	8818      	ldrh	r0, [r3, #0]
    ca4c:	f00a ffc5 	bl	179da <ll_version_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    ca50:	b100      	cbz	r0, ca54 <read_remote_ver_info+0x10>
    ca52:	200c      	movs	r0, #12
    ca54:	f7ff fe52 	bl	c6fc <cmd_status>
    ca58:	6020      	str	r0, [r4, #0]
    ca5a:	bd10      	pop	{r4, pc}

0000ca5c <link_control_cmd_handle>:
{
    ca5c:	b508      	push	{r3, lr}
    ca5e:	460b      	mov	r3, r1
	switch (ocf) {
    ca60:	2806      	cmp	r0, #6
    ca62:	d004      	beq.n	ca6e <link_control_cmd_handle+0x12>
    ca64:	281d      	cmp	r0, #29
    ca66:	d008      	beq.n	ca7a <link_control_cmd_handle+0x1e>
		return -EINVAL;
    ca68:	f06f 0015 	mvn.w	r0, #21
}
    ca6c:	bd08      	pop	{r3, pc}
		disconnect(cmd, evt);
    ca6e:	4611      	mov	r1, r2
    ca70:	4618      	mov	r0, r3
    ca72:	f7ff fe5d 	bl	c730 <disconnect>
	return 0;
    ca76:	2000      	movs	r0, #0
		break;
    ca78:	bd08      	pop	{r3, pc}
		read_remote_ver_info(cmd, evt);
    ca7a:	4611      	mov	r1, r2
    ca7c:	4618      	mov	r0, r3
    ca7e:	f7ff ffe1 	bl	ca44 <read_remote_ver_info>
	return 0;
    ca82:	2000      	movs	r0, #0
		break;
    ca84:	bd08      	pop	{r3, pc}
	...

0000ca88 <reset>:
{
    ca88:	b538      	push	{r3, r4, r5, lr}
	dup_count = -1;
    ca8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ca8e:	4b0f      	ldr	r3, [pc, #60]	; (cacc <reset+0x44>)
    ca90:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    ca92:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    ca96:	f641 75ff 	movw	r5, #8191	; 0x1fff
    ca9a:	4b0d      	ldr	r3, [pc, #52]	; (cad0 <reset+0x48>)
    ca9c:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    caa0:	2400      	movs	r4, #0
    caa2:	2500      	movs	r5, #0
    caa4:	4b0b      	ldr	r3, [pc, #44]	; (cad4 <reset+0x4c>)
    caa6:	e9c3 4500 	strd	r4, r5, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    caaa:	241f      	movs	r4, #31
    caac:	2500      	movs	r5, #0
    caae:	4b0a      	ldr	r3, [pc, #40]	; (cad8 <reset+0x50>)
    cab0:	e9c3 4500 	strd	r4, r5, [r3]
	if (buf) {
    cab4:	b140      	cbz	r0, cac8 <reset+0x40>
    cab6:	460c      	mov	r4, r1
		ll_reset();
    cab8:	f00a fc8a 	bl	173d0 <ll_reset>
		ccst = cmd_complete(evt, sizeof(*ccst));
    cabc:	2101      	movs	r1, #1
    cabe:	4620      	mov	r0, r4
    cac0:	f7ff fe44 	bl	c74c <cmd_complete>
		ccst->status = 0x00;
    cac4:	2300      	movs	r3, #0
    cac6:	7003      	strb	r3, [r0, #0]
    cac8:	bd38      	pop	{r3, r4, r5, pc}
    caca:	bf00      	nop
    cacc:	20000940 	.word	0x20000940
    cad0:	2000ba60 	.word	0x2000ba60
    cad4:	200009c8 	.word	0x200009c8
    cad8:	2000ba68 	.word	0x2000ba68

0000cadc <read_tx_power_level>:
{
    cadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cade:	460a      	mov	r2, r1
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    cae0:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    cae2:	881d      	ldrh	r5, [r3, #0]
    cae4:	b2ae      	uxth	r6, r5
	type = cmd->type;
    cae6:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    cae8:	2104      	movs	r1, #4
    caea:	4610      	mov	r0, r2
    caec:	f7ff fe2e 	bl	c74c <cmd_complete>
    caf0:	4604      	mov	r4, r0
	status = ll_tx_power_level_get(handle, type, &rp->tx_power_level);
    caf2:	1cc2      	adds	r2, r0, #3
    caf4:	4639      	mov	r1, r7
    caf6:	4630      	mov	r0, r6
    caf8:	f00a ff9b 	bl	17a32 <ll_tx_power_level_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    cafc:	b120      	cbz	r0, cb08 <read_tx_power_level+0x2c>
    cafe:	2302      	movs	r3, #2
    cb00:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    cb02:	f8a4 5001 	strh.w	r5, [r4, #1]
    cb06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    cb08:	2300      	movs	r3, #0
    cb0a:	e7f9      	b.n	cb00 <read_tx_power_level+0x24>

0000cb0c <read_auth_payload_timeout>:
{
    cb0c:	b570      	push	{r4, r5, r6, lr}
    cb0e:	b082      	sub	sp, #8
    cb10:	460e      	mov	r6, r1
	struct bt_hci_cp_read_auth_payload_timeout *cmd = (void *)buf->data;
    cb12:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    cb14:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    cb16:	f10d 0106 	add.w	r1, sp, #6
    cb1a:	b2a0      	uxth	r0, r4
    cb1c:	f00a ff98 	bl	17a50 <ll_apto_get>
    cb20:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    cb22:	2105      	movs	r1, #5
    cb24:	4630      	mov	r0, r6
    cb26:	f7ff fe11 	bl	c74c <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    cb2a:	b14d      	cbz	r5, cb40 <read_auth_payload_timeout+0x34>
    cb2c:	230c      	movs	r3, #12
    cb2e:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    cb30:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    cb34:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    cb38:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    cb3c:	b002      	add	sp, #8
    cb3e:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    cb40:	2300      	movs	r3, #0
    cb42:	e7f4      	b.n	cb2e <read_auth_payload_timeout+0x22>

0000cb44 <write_auth_payload_timeout>:
{
    cb44:	b570      	push	{r4, r5, r6, lr}
    cb46:	460e      	mov	r6, r1
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    cb48:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    cb4a:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    cb4c:	8859      	ldrh	r1, [r3, #2]
    cb4e:	b2a0      	uxth	r0, r4
    cb50:	f00a ff9a 	bl	17a88 <ll_apto_set>
    cb54:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    cb56:	2103      	movs	r1, #3
    cb58:	4630      	mov	r0, r6
    cb5a:	f7ff fdf7 	bl	c74c <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    cb5e:	b125      	cbz	r5, cb6a <write_auth_payload_timeout+0x26>
    cb60:	230c      	movs	r3, #12
    cb62:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    cb64:	f8a0 4001 	strh.w	r4, [r0, #1]
    cb68:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    cb6a:	2300      	movs	r3, #0
    cb6c:	e7f9      	b.n	cb62 <write_auth_payload_timeout+0x1e>

0000cb6e <ctrl_bb_cmd_handle>:
{
    cb6e:	b508      	push	{r3, lr}
    cb70:	460b      	mov	r3, r1
	switch (ocf) {
    cb72:	282d      	cmp	r0, #45	; 0x2d
    cb74:	d01f      	beq.n	cbb6 <ctrl_bb_cmd_handle+0x48>
    cb76:	d908      	bls.n	cb8a <ctrl_bb_cmd_handle+0x1c>
    cb78:	287b      	cmp	r0, #123	; 0x7b
    cb7a:	d022      	beq.n	cbc2 <ctrl_bb_cmd_handle+0x54>
    cb7c:	287c      	cmp	r0, #124	; 0x7c
    cb7e:	d026      	beq.n	cbce <ctrl_bb_cmd_handle+0x60>
    cb80:	2863      	cmp	r0, #99	; 0x63
    cb82:	d012      	beq.n	cbaa <ctrl_bb_cmd_handle+0x3c>
		return -EINVAL;
    cb84:	f06f 0015 	mvn.w	r0, #21
}
    cb88:	bd08      	pop	{r3, pc}
	switch (ocf) {
    cb8a:	2801      	cmp	r0, #1
    cb8c:	d007      	beq.n	cb9e <ctrl_bb_cmd_handle+0x30>
    cb8e:	2803      	cmp	r0, #3
    cb90:	d1f8      	bne.n	cb84 <ctrl_bb_cmd_handle+0x16>
		reset(cmd, evt);
    cb92:	4611      	mov	r1, r2
    cb94:	4618      	mov	r0, r3
    cb96:	f7ff ff77 	bl	ca88 <reset>
	return 0;
    cb9a:	2000      	movs	r0, #0
		break;
    cb9c:	bd08      	pop	{r3, pc}
		set_event_mask(cmd, evt);
    cb9e:	4611      	mov	r1, r2
    cba0:	4618      	mov	r0, r3
    cba2:	f7f7 fd13 	bl	45cc <set_event_mask>
	return 0;
    cba6:	2000      	movs	r0, #0
		break;
    cba8:	bd08      	pop	{r3, pc}
		set_event_mask_page_2(cmd, evt);
    cbaa:	4611      	mov	r1, r2
    cbac:	4618      	mov	r0, r3
    cbae:	f7ff fded 	bl	c78c <set_event_mask_page_2>
	return 0;
    cbb2:	2000      	movs	r0, #0
		break;
    cbb4:	bd08      	pop	{r3, pc}
		read_tx_power_level(cmd, evt);
    cbb6:	4611      	mov	r1, r2
    cbb8:	4618      	mov	r0, r3
    cbba:	f7ff ff8f 	bl	cadc <read_tx_power_level>
	return 0;
    cbbe:	2000      	movs	r0, #0
		break;
    cbc0:	bd08      	pop	{r3, pc}
		read_auth_payload_timeout(cmd, evt);
    cbc2:	4611      	mov	r1, r2
    cbc4:	4618      	mov	r0, r3
    cbc6:	f7ff ffa1 	bl	cb0c <read_auth_payload_timeout>
	return 0;
    cbca:	2000      	movs	r0, #0
		break;
    cbcc:	bd08      	pop	{r3, pc}
		write_auth_payload_timeout(cmd, evt);
    cbce:	4611      	mov	r1, r2
    cbd0:	4618      	mov	r0, r3
    cbd2:	f7ff ffb7 	bl	cb44 <write_auth_payload_timeout>
	return 0;
    cbd6:	2000      	movs	r0, #0
		break;
    cbd8:	bd08      	pop	{r3, pc}

0000cbda <read_supported_commands>:
{
    cbda:	b510      	push	{r4, lr}
    cbdc:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cbde:	2141      	movs	r1, #65	; 0x41
    cbe0:	f7ff fdb4 	bl	c74c <cmd_complete>
    cbe4:	4604      	mov	r4, r0
	rp->status = 0x00;
    cbe6:	2100      	movs	r1, #0
    cbe8:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    cbec:	2240      	movs	r2, #64	; 0x40
    cbee:	f01c fd73 	bl	296d8 <memset>
	rp->commands[2] |= BIT(7);
    cbf2:	78e3      	ldrb	r3, [r4, #3]
    cbf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    cbf8:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    cbfa:	79a3      	ldrb	r3, [r4, #6]
    cbfc:	f063 033f 	orn	r3, r3, #63	; 0x3f
    cc00:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    cc02:	7ae3      	ldrb	r3, [r4, #11]
    cc04:	f043 0304 	orr.w	r3, r3, #4
    cc08:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    cc0a:	7be3      	ldrb	r3, [r4, #15]
    cc0c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    cc10:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    cc12:	7c23      	ldrb	r3, [r4, #16]
    cc14:	f043 0302 	orr.w	r3, r3, #2
    cc18:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    cc1a:	7de3      	ldrb	r3, [r4, #23]
    cc1c:	f043 0304 	orr.w	r3, r3, #4
    cc20:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    cc22:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[28] |= BIT(3);
    cc24:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    cc26:	f062 0208 	orn	r2, r2, #8
    cc2a:	76a2      	strb	r2, [r4, #26]
	rp->commands[26] |= BIT(4) | BIT(5);
    cc2c:	22ff      	movs	r2, #255	; 0xff
    cc2e:	76e2      	strb	r2, [r4, #27]
	rp->commands[28] |= BIT(1) | BIT(2);
    cc30:	f043 030f 	orr.w	r3, r3, #15
    cc34:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    cc36:	7863      	ldrb	r3, [r4, #1]
    cc38:	f043 0320 	orr.w	r3, r3, #32
    cc3c:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    cc3e:	7722      	strb	r2, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    cc40:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
	rp->commands[32] |= BIT(4) | BIT(5);
    cc44:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    cc48:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    cc4c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    cc50:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    cc54:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    cc58:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    cc5c:	f040 0004 	orr.w	r0, r0, #4
    cc60:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	rp->commands[33] |= BIT(6) | BIT(7);
    cc64:	f061 010f 	orn	r1, r1, #15
    cc68:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(0);
    cc6c:	f042 02f9 	orr.w	r2, r2, #249	; 0xf9
    cc70:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(3);
    cc74:	f043 030f 	orr.w	r3, r3, #15
    cc78:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[38] |= BIT(7);
    cc7c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    cc80:	f063 037f 	orn	r3, r3, #127	; 0x7f
    cc84:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    cc88:	bd10      	pop	{r4, pc}

0000cc8a <read_local_features>:
{
    cc8a:	b510      	push	{r4, lr}
    cc8c:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cc8e:	2109      	movs	r1, #9
    cc90:	f7ff fd5c 	bl	c74c <cmd_complete>
    cc94:	4604      	mov	r4, r0
	rp->status = 0x00;
    cc96:	2100      	movs	r1, #0
    cc98:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    cc9c:	2208      	movs	r2, #8
    cc9e:	f01c fd1b 	bl	296d8 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    cca2:	2360      	movs	r3, #96	; 0x60
    cca4:	7163      	strb	r3, [r4, #5]
    cca6:	bd10      	pop	{r4, pc}

0000cca8 <le_read_local_features>:
{
    cca8:	b510      	push	{r4, lr}
    ccaa:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    ccac:	2109      	movs	r1, #9
    ccae:	f7ff fd4d 	bl	c74c <cmd_complete>
    ccb2:	4604      	mov	r4, r0
	rp->status = 0x00;
    ccb4:	2100      	movs	r1, #0
    ccb6:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    ccba:	2208      	movs	r2, #8
    ccbc:	f01c fd0c 	bl	296d8 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    ccc0:	23ff      	movs	r3, #255	; 0xff
    ccc2:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    ccc4:	2341      	movs	r3, #65	; 0x41
    ccc6:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    ccc8:	2301      	movs	r3, #1
    ccca:	70e3      	strb	r3, [r4, #3]
    cccc:	bd10      	pop	{r4, pc}

0000ccce <vs_read_supported_commands>:
{
    ccce:	b510      	push	{r4, lr}
    ccd0:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    ccd2:	2141      	movs	r1, #65	; 0x41
    ccd4:	f7ff fd3a 	bl	c74c <cmd_complete>
    ccd8:	4604      	mov	r4, r0
	rp->status = 0x00;
    ccda:	2100      	movs	r1, #0
    ccdc:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    cce0:	2240      	movs	r2, #64	; 0x40
    cce2:	f01c fcf9 	bl	296d8 <memset>
	rp->commands[0] |= BIT(0) | BIT(1) | BIT(2);
    cce6:	7863      	ldrb	r3, [r4, #1]
	rp->commands[0] |= BIT(5) | BIT(7);
    cce8:	f063 0358 	orn	r3, r3, #88	; 0x58
    ccec:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    ccee:	78a3      	ldrb	r3, [r4, #2]
    ccf0:	f043 0303 	orr.w	r3, r3, #3
    ccf4:	70a3      	strb	r3, [r4, #2]
    ccf6:	bd10      	pop	{r4, pc}

0000ccf8 <vs_read_supported_features>:
{
    ccf8:	b508      	push	{r3, lr}
    ccfa:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    ccfc:	2109      	movs	r1, #9
    ccfe:	f7ff fd25 	bl	c74c <cmd_complete>
	rp->status = 0x00;
    cd02:	2100      	movs	r1, #0
    cd04:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    cd08:	2208      	movs	r2, #8
    cd0a:	f01c fce5 	bl	296d8 <memset>
    cd0e:	bd08      	pop	{r3, pc}

0000cd10 <vs_read_static_addrs>:
{
    cd10:	b510      	push	{r4, lr}
    cd12:	4608      	mov	r0, r1
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    cd14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cd18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    cd1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    cd20:	d00d      	beq.n	cd3e <vs_read_static_addrs+0x2e>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    cd22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cd26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    cd2a:	f013 0f01 	tst.w	r3, #1
    cd2e:	d110      	bne.n	cd52 <vs_read_static_addrs+0x42>
	rp = cmd_complete(evt, sizeof(*rp));
    cd30:	2102      	movs	r1, #2
    cd32:	f7ff fd0b 	bl	c74c <cmd_complete>
	rp->status = 0x00;
    cd36:	2300      	movs	r3, #0
    cd38:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    cd3a:	7043      	strb	r3, [r0, #1]
    cd3c:	bd10      	pop	{r4, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    cd3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cd42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    cd46:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    cd48:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cd4c:	4293      	cmp	r3, r2
    cd4e:	d1e8      	bne.n	cd22 <vs_read_static_addrs+0x12>
    cd50:	e7ee      	b.n	cd30 <vs_read_static_addrs+0x20>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    cd52:	2118      	movs	r1, #24
    cd54:	f7ff fcfa 	bl	c74c <cmd_complete>
		rp->status = 0x00;
    cd58:	2100      	movs	r1, #0
    cd5a:	7001      	strb	r1, [r0, #0]
		rp->num_addrs = 1;
    cd5c:	2301      	movs	r3, #1
    cd5e:	7043      	strb	r3, [r0, #1]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    cd60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    cd64:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
    cd68:	7083      	strb	r3, [r0, #2]
	dst[1] = val >> 8;
    cd6a:	f3c3 2407 	ubfx	r4, r3, #8, #8
    cd6e:	70c4      	strb	r4, [r0, #3]
	sys_put_le16(val >> 16, &dst[2]);
    cd70:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    cd72:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    cd74:	0a1b      	lsrs	r3, r3, #8
    cd76:	7143      	strb	r3, [r0, #5]
		sys_put_le16(NRF_FICR->DEVICEADDR[1] | 0x0200, &addr->bdaddr.val[4]);
    cd78:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    cd7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    cd80:	b29b      	uxth	r3, r3
	dst[0] = val;
    cd82:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    cd84:	0a1b      	lsrs	r3, r3, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    cd86:	f063 033f 	orn	r3, r3, #63	; 0x3f
    cd8a:	71c3      	strb	r3, [r0, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    cd8c:	2210      	movs	r2, #16
    cd8e:	3008      	adds	r0, #8
    cd90:	f01c fca2 	bl	296d8 <memset>
		return;
    cd94:	bd10      	pop	{r4, pc}

0000cd96 <vs_read_key_hierarchy_roots>:
{
    cd96:	b510      	push	{r4, lr}
    cd98:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cd9a:	2121      	movs	r1, #33	; 0x21
    cd9c:	f7ff fcd6 	bl	c74c <cmd_complete>
    cda0:	4604      	mov	r4, r0
	rp->status = 0x00;
    cda2:	2300      	movs	r3, #0
    cda4:	7003      	strb	r3, [r0, #0]
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    cda6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cdaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    cdae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    cdb2:	d03f      	beq.n	ce34 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    cdb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cdb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    cdbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    cdc0:	d038      	beq.n	ce34 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    cdc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cdc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    cdca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    cdce:	d031      	beq.n	ce34 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    cdd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cdd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    cdd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    cddc:	d02a      	beq.n	ce34 <vs_read_key_hierarchy_roots+0x9e>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    cdde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    cde2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
    cde6:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    cde8:	f3c3 2107 	ubfx	r1, r3, #8, #8
    cdec:	7081      	strb	r1, [r0, #2]
	sys_put_le16(val >> 16, &dst[2]);
    cdee:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    cdf0:	70c3      	strb	r3, [r0, #3]
	dst[1] = val >> 8;
    cdf2:	0a1b      	lsrs	r3, r3, #8
    cdf4:	7103      	strb	r3, [r0, #4]
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    cdf6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
    cdfa:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    cdfc:	f3c3 2107 	ubfx	r1, r3, #8, #8
    ce00:	7181      	strb	r1, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
    ce02:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    ce04:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    ce06:	0a1b      	lsrs	r3, r3, #8
    ce08:	7203      	strb	r3, [r0, #8]
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    ce0a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
    ce0e:	7243      	strb	r3, [r0, #9]
	dst[1] = val >> 8;
    ce10:	f3c3 2107 	ubfx	r1, r3, #8, #8
    ce14:	7281      	strb	r1, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
    ce16:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    ce18:	72c3      	strb	r3, [r0, #11]
	dst[1] = val >> 8;
    ce1a:	0a1b      	lsrs	r3, r3, #8
    ce1c:	7303      	strb	r3, [r0, #12]
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    ce1e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
    ce22:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    ce24:	f3c3 2207 	ubfx	r2, r3, #8, #8
    ce28:	7382      	strb	r2, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
    ce2a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    ce2c:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    ce2e:	0a1b      	lsrs	r3, r3, #8
    ce30:	7403      	strb	r3, [r0, #16]
    ce32:	e004      	b.n	ce3e <vs_read_key_hierarchy_roots+0xa8>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    ce34:	2210      	movs	r2, #16
    ce36:	2100      	movs	r1, #0
    ce38:	1c60      	adds	r0, r4, #1
    ce3a:	f01c fc4d 	bl	296d8 <memset>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    ce3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ce42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    ce46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ce4a:	d040      	beq.n	cece <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    ce4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ce50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    ce54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ce58:	d039      	beq.n	cece <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    ce5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ce5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    ce62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ce66:	d032      	beq.n	cece <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    ce68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ce6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    ce70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ce74:	d02b      	beq.n	cece <vs_read_key_hierarchy_roots+0x138>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    ce76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ce7a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
    ce7e:	7463      	strb	r3, [r4, #17]
	dst[1] = val >> 8;
    ce80:	f3c3 2107 	ubfx	r1, r3, #8, #8
    ce84:	74a1      	strb	r1, [r4, #18]
	sys_put_le16(val >> 16, &dst[2]);
    ce86:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    ce88:	74e3      	strb	r3, [r4, #19]
	dst[1] = val >> 8;
    ce8a:	0a1b      	lsrs	r3, r3, #8
    ce8c:	7523      	strb	r3, [r4, #20]
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    ce8e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
    ce92:	7563      	strb	r3, [r4, #21]
	dst[1] = val >> 8;
    ce94:	f3c3 2107 	ubfx	r1, r3, #8, #8
    ce98:	75a1      	strb	r1, [r4, #22]
	sys_put_le16(val >> 16, &dst[2]);
    ce9a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    ce9c:	75e3      	strb	r3, [r4, #23]
	dst[1] = val >> 8;
    ce9e:	0a1b      	lsrs	r3, r3, #8
    cea0:	7623      	strb	r3, [r4, #24]
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    cea2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
    cea6:	7663      	strb	r3, [r4, #25]
	dst[1] = val >> 8;
    cea8:	f3c3 2107 	ubfx	r1, r3, #8, #8
    ceac:	76a1      	strb	r1, [r4, #26]
	sys_put_le16(val >> 16, &dst[2]);
    ceae:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    ceb0:	76e3      	strb	r3, [r4, #27]
	dst[1] = val >> 8;
    ceb2:	0a1b      	lsrs	r3, r3, #8
    ceb4:	7723      	strb	r3, [r4, #28]
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    ceb6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
    ceba:	7763      	strb	r3, [r4, #29]
	dst[1] = val >> 8;
    cebc:	f3c3 2207 	ubfx	r2, r3, #8, #8
    cec0:	77a2      	strb	r2, [r4, #30]
	sys_put_le16(val >> 16, &dst[2]);
    cec2:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    cec4:	77e3      	strb	r3, [r4, #31]
	dst[1] = val >> 8;
    cec6:	0a1b      	lsrs	r3, r3, #8
    cec8:	f884 3020 	strb.w	r3, [r4, #32]
    cecc:	bd10      	pop	{r4, pc}
		memset(rp->er, 0x00, sizeof(rp->er));
    cece:	2210      	movs	r2, #16
    ced0:	2100      	movs	r1, #0
    ced2:	f104 0011 	add.w	r0, r4, #17
    ced6:	f01c fbff 	bl	296d8 <memset>
    ceda:	bd10      	pop	{r4, pc}

0000cedc <read_bd_addr>:
{
    cedc:	b508      	push	{r3, lr}
    cede:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cee0:	2107      	movs	r1, #7
    cee2:	f7ff fc33 	bl	c74c <cmd_complete>
	rp->status = 0x00;
    cee6:	2300      	movs	r3, #0
    cee8:	4601      	mov	r1, r0
    ceea:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    ceee:	4618      	mov	r0, r3
    cef0:	f00b fd62 	bl	189b8 <ll_addr_get>
    cef4:	bd08      	pop	{r3, pc}

0000cef6 <info_cmd_handle>:
{
    cef6:	b508      	push	{r3, lr}
    cef8:	460b      	mov	r3, r1
	switch (ocf) {
    cefa:	3801      	subs	r0, #1
    cefc:	2808      	cmp	r0, #8
    cefe:	d81e      	bhi.n	cf3e <info_cmd_handle+0x48>
    cf00:	e8df f000 	tbb	[pc, r0]
    cf04:	1d110b05 	.word	0x1d110b05
    cf08:	1d1d1d1d 	.word	0x1d1d1d1d
    cf0c:	17          	.byte	0x17
    cf0d:	00          	.byte	0x00
		read_local_version_info(cmd, evt);
    cf0e:	4611      	mov	r1, r2
    cf10:	4618      	mov	r0, r3
    cf12:	f7ff fc61 	bl	c7d8 <read_local_version_info>
	return 0;
    cf16:	2000      	movs	r0, #0
		break;
    cf18:	bd08      	pop	{r3, pc}
		read_supported_commands(cmd, evt);
    cf1a:	4611      	mov	r1, r2
    cf1c:	4618      	mov	r0, r3
    cf1e:	f7ff fe5c 	bl	cbda <read_supported_commands>
	return 0;
    cf22:	2000      	movs	r0, #0
		break;
    cf24:	bd08      	pop	{r3, pc}
		read_local_features(cmd, evt);
    cf26:	4611      	mov	r1, r2
    cf28:	4618      	mov	r0, r3
    cf2a:	f7ff feae 	bl	cc8a <read_local_features>
	return 0;
    cf2e:	2000      	movs	r0, #0
		break;
    cf30:	bd08      	pop	{r3, pc}
		read_bd_addr(cmd, evt);
    cf32:	4611      	mov	r1, r2
    cf34:	4618      	mov	r0, r3
    cf36:	f7ff ffd1 	bl	cedc <read_bd_addr>
	return 0;
    cf3a:	2000      	movs	r0, #0
		break;
    cf3c:	bd08      	pop	{r3, pc}
		return -EINVAL;
    cf3e:	f06f 0015 	mvn.w	r0, #21
}
    cf42:	bd08      	pop	{r3, pc}

0000cf44 <le_set_random_address>:
{
    cf44:	b510      	push	{r4, lr}
    cf46:	460c      	mov	r4, r1
	ll_addr_set(1, &cmd->bdaddr.val[0]);
    cf48:	6881      	ldr	r1, [r0, #8]
    cf4a:	2001      	movs	r0, #1
    cf4c:	f00b fd56 	bl	189fc <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    cf50:	2101      	movs	r1, #1
    cf52:	4620      	mov	r0, r4
    cf54:	f7ff fbfa 	bl	c74c <cmd_complete>
	ccst->status = 0x00;
    cf58:	2300      	movs	r3, #0
    cf5a:	7003      	strb	r3, [r0, #0]
    cf5c:	bd10      	pop	{r4, pc}

0000cf5e <vs_write_bd_addr>:
{
    cf5e:	b510      	push	{r4, lr}
    cf60:	460c      	mov	r4, r1
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    cf62:	6881      	ldr	r1, [r0, #8]
    cf64:	2000      	movs	r0, #0
    cf66:	f00b fd49 	bl	189fc <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    cf6a:	2101      	movs	r1, #1
    cf6c:	4620      	mov	r0, r4
    cf6e:	f7ff fbed 	bl	c74c <cmd_complete>
	ccst->status = 0x00;
    cf72:	2300      	movs	r3, #0
    cf74:	7003      	strb	r3, [r0, #0]
    cf76:	bd10      	pop	{r4, pc}

0000cf78 <le_read_wl_size>:
{
    cf78:	b510      	push	{r4, lr}
    cf7a:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cf7c:	2102      	movs	r1, #2
    cf7e:	f7ff fbe5 	bl	c74c <cmd_complete>
    cf82:	4604      	mov	r4, r0
	rp->status = 0x00;
    cf84:	2300      	movs	r3, #0
    cf86:	7003      	strb	r3, [r0, #0]
	rp->wl_size = ll_wl_size_get();
    cf88:	f00b ff38 	bl	18dfc <ll_wl_size_get>
    cf8c:	7060      	strb	r0, [r4, #1]
    cf8e:	bd10      	pop	{r4, pc}

0000cf90 <le_clear_wl>:
{
    cf90:	b510      	push	{r4, lr}
    cf92:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    cf94:	2101      	movs	r1, #1
    cf96:	f7ff fbd9 	bl	c74c <cmd_complete>
    cf9a:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    cf9c:	f00b ff30 	bl	18e00 <ll_wl_clear>
    cfa0:	7020      	strb	r0, [r4, #0]
    cfa2:	bd10      	pop	{r4, pc}

0000cfa4 <le_add_dev_to_wl>:
{
    cfa4:	b538      	push	{r3, r4, r5, lr}
    cfa6:	460d      	mov	r5, r1
	status = ll_wl_add(&cmd->addr);
    cfa8:	6880      	ldr	r0, [r0, #8]
    cfaa:	f00c f81b 	bl	18fe4 <ll_wl_add>
    cfae:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    cfb0:	2101      	movs	r1, #1
    cfb2:	4628      	mov	r0, r5
    cfb4:	f7ff fbca 	bl	c74c <cmd_complete>
	ccst->status = status;
    cfb8:	7004      	strb	r4, [r0, #0]
    cfba:	bd38      	pop	{r3, r4, r5, pc}

0000cfbc <le_rem_dev_from_wl>:
{
    cfbc:	b538      	push	{r3, r4, r5, lr}
    cfbe:	460d      	mov	r5, r1
	status = ll_wl_remove(&cmd->addr);
    cfc0:	6880      	ldr	r0, [r0, #8]
    cfc2:	f00b ff33 	bl	18e2c <ll_wl_remove>
    cfc6:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    cfc8:	2101      	movs	r1, #1
    cfca:	4628      	mov	r0, r5
    cfcc:	f7ff fbbe 	bl	c74c <cmd_complete>
	ccst->status = status;
    cfd0:	7004      	strb	r4, [r0, #0]
    cfd2:	bd38      	pop	{r3, r4, r5, pc}

0000cfd4 <le_encrypt>:
{
    cfd4:	b510      	push	{r4, lr}
    cfd6:	b084      	sub	sp, #16
    cfd8:	460c      	mov	r4, r1
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    cfda:	6880      	ldr	r0, [r0, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    cfdc:	2300      	movs	r3, #0
    cfde:	466a      	mov	r2, sp
    cfe0:	f100 0110 	add.w	r1, r0, #16
    cfe4:	f001 fc9e 	bl	e924 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    cfe8:	2111      	movs	r1, #17
    cfea:	4620      	mov	r0, r4
    cfec:	f7ff fbae 	bl	c74c <cmd_complete>
	rp->status = 0x00;
    cff0:	2300      	movs	r3, #0
    cff2:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    cff6:	2210      	movs	r2, #16
    cff8:	4669      	mov	r1, sp
    cffa:	f7f3 f961 	bl	2c0 <memcpy>
}
    cffe:	b004      	add	sp, #16
    d000:	bd10      	pop	{r4, pc}
	...

0000d004 <vs_read_build_info>:
{
    d004:	b570      	push	{r4, r5, r6, lr}
    d006:	b08a      	sub	sp, #40	; 0x28
    d008:	460e      	mov	r6, r1
	const char build_info[] = HCI_VS_BUILD_INFO;
    d00a:	466c      	mov	r4, sp
    d00c:	4d0c      	ldr	r5, [pc, #48]	; (d040 <vs_read_build_info+0x3c>)
    d00e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d010:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d016:	e895 0003 	ldmia.w	r5, {r0, r1}
    d01a:	f844 0b04 	str.w	r0, [r4], #4
    d01e:	f824 1b02 	strh.w	r1, [r4], #2
    d022:	0c09      	lsrs	r1, r1, #16
    d024:	7021      	strb	r1, [r4, #0]
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    d026:	2128      	movs	r1, #40	; 0x28
    d028:	4630      	mov	r0, r6
    d02a:	f7ff fb8f 	bl	c74c <cmd_complete>
	rp->status = 0x00;
    d02e:	2300      	movs	r3, #0
    d030:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    d034:	2227      	movs	r2, #39	; 0x27
    d036:	4669      	mov	r1, sp
    d038:	f7f3 f942 	bl	2c0 <memcpy>
}
    d03c:	b00a      	add	sp, #40	; 0x28
    d03e:	bd70      	pop	{r4, r5, r6, pc}
    d040:	0002fa6c 	.word	0x0002fa6c

0000d044 <vendor_cmd_handle>:
{
    d044:	b508      	push	{r3, lr}
    d046:	460b      	mov	r3, r1
	switch (ocf) {
    d048:	3801      	subs	r0, #1
    d04a:	2809      	cmp	r0, #9
    d04c:	d830      	bhi.n	d0b0 <vendor_cmd_handle+0x6c>
    d04e:	e8df f000 	tbb	[pc, r0]
    d052:	0b05      	.short	0x0b05
    d054:	1d2f2f11 	.word	0x1d2f2f11
    d058:	2923172f 	.word	0x2923172f
		vs_read_version_info(cmd, evt);
    d05c:	4611      	mov	r1, r2
    d05e:	4618      	mov	r0, r3
    d060:	f7ff fbf6 	bl	c850 <vs_read_version_info>
	return 0;
    d064:	2000      	movs	r0, #0
		break;
    d066:	bd08      	pop	{r3, pc}
		vs_read_supported_commands(cmd, evt);
    d068:	4611      	mov	r1, r2
    d06a:	4618      	mov	r0, r3
    d06c:	f7ff fe2f 	bl	ccce <vs_read_supported_commands>
	return 0;
    d070:	2000      	movs	r0, #0
		break;
    d072:	bd08      	pop	{r3, pc}
		vs_read_supported_features(cmd, evt);
    d074:	4611      	mov	r1, r2
    d076:	4618      	mov	r0, r3
    d078:	f7ff fe3e 	bl	ccf8 <vs_read_supported_features>
	return 0;
    d07c:	2000      	movs	r0, #0
		break;
    d07e:	bd08      	pop	{r3, pc}
		vs_read_build_info(cmd, evt);
    d080:	4611      	mov	r1, r2
    d082:	4618      	mov	r0, r3
    d084:	f7ff ffbe 	bl	d004 <vs_read_build_info>
	return 0;
    d088:	2000      	movs	r0, #0
		break;
    d08a:	bd08      	pop	{r3, pc}
		vs_write_bd_addr(cmd, evt);
    d08c:	4611      	mov	r1, r2
    d08e:	4618      	mov	r0, r3
    d090:	f7ff ff65 	bl	cf5e <vs_write_bd_addr>
	return 0;
    d094:	2000      	movs	r0, #0
		break;
    d096:	bd08      	pop	{r3, pc}
		vs_read_static_addrs(cmd, evt);
    d098:	4611      	mov	r1, r2
    d09a:	4618      	mov	r0, r3
    d09c:	f7ff fe38 	bl	cd10 <vs_read_static_addrs>
	return 0;
    d0a0:	2000      	movs	r0, #0
		break;
    d0a2:	bd08      	pop	{r3, pc}
		vs_read_key_hierarchy_roots(cmd, evt);
    d0a4:	4611      	mov	r1, r2
    d0a6:	4618      	mov	r0, r3
    d0a8:	f7ff fe75 	bl	cd96 <vs_read_key_hierarchy_roots>
	return 0;
    d0ac:	2000      	movs	r0, #0
		break;
    d0ae:	bd08      	pop	{r3, pc}
		return -EINVAL;
    d0b0:	f06f 0015 	mvn.w	r0, #21
}
    d0b4:	bd08      	pop	{r3, pc}

0000d0b6 <le_unknown_rsp>:
{
    d0b6:	b508      	push	{r3, lr}
	switch (pdu_data->payload.llctrl.ctrldata.unknown_rsp.type) {
    d0b8:	7903      	ldrb	r3, [r0, #4]
    d0ba:	2b0e      	cmp	r3, #14
    d0bc:	d000      	beq.n	d0c0 <le_unknown_rsp+0xa>
    d0be:	bd08      	pop	{r3, pc}
    d0c0:	4613      	mov	r3, r2
    d0c2:	460a      	mov	r2, r1
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    d0c4:	2100      	movs	r1, #0
    d0c6:	201a      	movs	r0, #26
    d0c8:	f7f8 f966 	bl	5398 <le_remote_feat_complete>
}
    d0cc:	e7f7      	b.n	d0be <le_unknown_rsp+0x8>

0000d0ce <le_rand>:
{
    d0ce:	b508      	push	{r3, lr}
    d0d0:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d0d2:	2109      	movs	r1, #9
    d0d4:	f7ff fb3a 	bl	c74c <cmd_complete>
	rp->status = 0x00;
    d0d8:	2300      	movs	r3, #0
    d0da:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    d0de:	2108      	movs	r1, #8
    d0e0:	f003 fcb2 	bl	10a48 <bt_rand>
    d0e4:	bd08      	pop	{r3, pc}

0000d0e6 <le_set_adv_param>:
{
    d0e6:	b570      	push	{r4, r5, r6, lr}
    d0e8:	b08c      	sub	sp, #48	; 0x30
    d0ea:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
    d0ec:	6881      	ldr	r1, [r0, #8]
	min_interval = sys_le16_to_cpu(cmd->min_interval);
    d0ee:	460c      	mov	r4, r1
    d0f0:	f834 2b07 	ldrh.w	r2, [r4], #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    d0f4:	790b      	ldrb	r3, [r1, #4]
    d0f6:	2000      	movs	r0, #0
    d0f8:	900a      	str	r0, [sp, #40]	; 0x28
    d0fa:	9009      	str	r0, [sp, #36]	; 0x24
    d0fc:	9008      	str	r0, [sp, #32]
    d0fe:	9007      	str	r0, [sp, #28]
    d100:	9006      	str	r0, [sp, #24]
    d102:	9005      	str	r0, [sp, #20]
    d104:	7b8e      	ldrb	r6, [r1, #14]
    d106:	9604      	str	r6, [sp, #16]
    d108:	7b4e      	ldrb	r6, [r1, #13]
    d10a:	9603      	str	r6, [sp, #12]
    d10c:	9402      	str	r4, [sp, #8]
    d10e:	798c      	ldrb	r4, [r1, #6]
    d110:	9401      	str	r4, [sp, #4]
    d112:	7949      	ldrb	r1, [r1, #5]
    d114:	9100      	str	r1, [sp, #0]
    d116:	4601      	mov	r1, r0
    d118:	f00c fc40 	bl	1999c <ll_adv_params_set>
    d11c:	b2c4      	uxtb	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d11e:	2101      	movs	r1, #1
    d120:	4628      	mov	r0, r5
    d122:	f7ff fb13 	bl	c74c <cmd_complete>
	ccst->status = status;
    d126:	7004      	strb	r4, [r0, #0]
}
    d128:	b00c      	add	sp, #48	; 0x30
    d12a:	bd70      	pop	{r4, r5, r6, pc}

0000d12c <le_set_adv_data>:
{
    d12c:	b510      	push	{r4, lr}
    d12e:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *cmd = (void *)buf->data;
    d130:	6883      	ldr	r3, [r0, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    d132:	1c59      	adds	r1, r3, #1
    d134:	7818      	ldrb	r0, [r3, #0]
    d136:	f00c fd55 	bl	19be4 <ll_adv_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d13a:	2101      	movs	r1, #1
    d13c:	4620      	mov	r0, r4
    d13e:	f7ff fb05 	bl	c74c <cmd_complete>
	ccst->status = 0x00;
    d142:	2300      	movs	r3, #0
    d144:	7003      	strb	r3, [r0, #0]
    d146:	bd10      	pop	{r4, pc}

0000d148 <le_set_scan_rsp_data>:
{
    d148:	b510      	push	{r4, lr}
    d14a:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_scan_rsp_data *cmd = (void *)buf->data;
    d14c:	6883      	ldr	r3, [r0, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    d14e:	1c59      	adds	r1, r3, #1
    d150:	7818      	ldrb	r0, [r3, #0]
    d152:	f00c fda0 	bl	19c96 <ll_scan_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d156:	2101      	movs	r1, #1
    d158:	4620      	mov	r0, r4
    d15a:	f7ff faf7 	bl	c74c <cmd_complete>
	ccst->status = 0x00;
    d15e:	2300      	movs	r3, #0
    d160:	7003      	strb	r3, [r0, #0]
    d162:	bd10      	pop	{r4, pc}

0000d164 <le_set_adv_enable>:
{
    d164:	b538      	push	{r3, r4, r5, lr}
    d166:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
    d168:	6883      	ldr	r3, [r0, #8]
	status = ll_adv_enable(cmd->enable);
    d16a:	7818      	ldrb	r0, [r3, #0]
    d16c:	f00c fdd8 	bl	19d20 <ll_adv_enable>
    d170:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d172:	2101      	movs	r1, #1
    d174:	4628      	mov	r0, r5
    d176:	f7ff fae9 	bl	c74c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d17a:	b114      	cbz	r4, d182 <le_set_adv_enable+0x1e>
    d17c:	230c      	movs	r3, #12
    d17e:	7003      	strb	r3, [r0, #0]
    d180:	bd38      	pop	{r3, r4, r5, pc}
    d182:	2300      	movs	r3, #0
    d184:	e7fb      	b.n	d17e <le_set_adv_enable+0x1a>

0000d186 <le_set_scan_param>:
{
    d186:	b530      	push	{r4, r5, lr}
    d188:	b083      	sub	sp, #12
    d18a:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
    d18c:	6884      	ldr	r4, [r0, #8]
	interval = sys_le16_to_cpu(cmd->interval);
    d18e:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	window = sys_le16_to_cpu(cmd->window);
    d192:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    d196:	7820      	ldrb	r0, [r4, #0]
    d198:	7963      	ldrb	r3, [r4, #5]
    d19a:	79a4      	ldrb	r4, [r4, #6]
    d19c:	9400      	str	r4, [sp, #0]
    d19e:	f00c fe51 	bl	19e44 <ll_scan_params_set>
    d1a2:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d1a4:	2101      	movs	r1, #1
    d1a6:	4628      	mov	r0, r5
    d1a8:	f7ff fad0 	bl	c74c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d1ac:	b11c      	cbz	r4, d1b6 <le_set_scan_param+0x30>
    d1ae:	230c      	movs	r3, #12
    d1b0:	7003      	strb	r3, [r0, #0]
}
    d1b2:	b003      	add	sp, #12
    d1b4:	bd30      	pop	{r4, r5, pc}
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d1b6:	2300      	movs	r3, #0
    d1b8:	e7fa      	b.n	d1b0 <le_set_scan_param+0x2a>
	...

0000d1bc <le_set_scan_enable>:
{
    d1bc:	b538      	push	{r3, r4, r5, lr}
    d1be:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
    d1c0:	6883      	ldr	r3, [r0, #8]
	if (cmd->enable && cmd->filter_dup) {
    d1c2:	781a      	ldrb	r2, [r3, #0]
    d1c4:	b13a      	cbz	r2, d1d6 <le_set_scan_enable+0x1a>
    d1c6:	785a      	ldrb	r2, [r3, #1]
    d1c8:	b12a      	cbz	r2, d1d6 <le_set_scan_enable+0x1a>
		dup_count = 0;
    d1ca:	2200      	movs	r2, #0
    d1cc:	490b      	ldr	r1, [pc, #44]	; (d1fc <le_set_scan_enable+0x40>)
    d1ce:	600a      	str	r2, [r1, #0]
		dup_curr = 0;
    d1d0:	490b      	ldr	r1, [pc, #44]	; (d200 <le_set_scan_enable+0x44>)
    d1d2:	600a      	str	r2, [r1, #0]
    d1d4:	e003      	b.n	d1de <le_set_scan_enable+0x22>
		dup_count = -1;
    d1d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d1da:	4a08      	ldr	r2, [pc, #32]	; (d1fc <le_set_scan_enable+0x40>)
    d1dc:	6011      	str	r1, [r2, #0]
	status = ll_scan_enable(cmd->enable);
    d1de:	7818      	ldrb	r0, [r3, #0]
    d1e0:	f00c fe4c 	bl	19e7c <ll_scan_enable>
    d1e4:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d1e6:	2101      	movs	r1, #1
    d1e8:	4628      	mov	r0, r5
    d1ea:	f7ff faaf 	bl	c74c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d1ee:	b114      	cbz	r4, d1f6 <le_set_scan_enable+0x3a>
    d1f0:	230c      	movs	r3, #12
    d1f2:	7003      	strb	r3, [r0, #0]
    d1f4:	bd38      	pop	{r3, r4, r5, pc}
    d1f6:	2300      	movs	r3, #0
    d1f8:	e7fb      	b.n	d1f2 <le_set_scan_enable+0x36>
    d1fa:	bf00      	nop
    d1fc:	20000940 	.word	0x20000940
    d200:	20000944 	.word	0x20000944

0000d204 <le_create_connection>:
{
    d204:	b5f0      	push	{r4, r5, r6, r7, lr}
    d206:	b087      	sub	sp, #28
    d208:	460d      	mov	r5, r1
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
    d20a:	6884      	ldr	r4, [r0, #8]
	scan_interval = sys_le16_to_cpu(cmd->scan_interval);
    d20c:	8820      	ldrh	r0, [r4, #0]
	scan_window = sys_le16_to_cpu(cmd->scan_window);
    d20e:	8861      	ldrh	r1, [r4, #2]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    d210:	f8b4 700f 	ldrh.w	r7, [r4, #15]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    d214:	f8b4 e011 	ldrh.w	lr, [r4, #17]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    d218:	f8b4 c013 	ldrh.w	ip, [r4, #19]
	status = ll_create_connection(scan_interval, scan_window,
    d21c:	7922      	ldrb	r2, [r4, #4]
    d21e:	7963      	ldrb	r3, [r4, #5]
    d220:	1da6      	adds	r6, r4, #6
    d222:	7b24      	ldrb	r4, [r4, #12]
    d224:	f8cd c010 	str.w	ip, [sp, #16]
    d228:	f8cd e00c 	str.w	lr, [sp, #12]
    d22c:	9702      	str	r7, [sp, #8]
    d22e:	9401      	str	r4, [sp, #4]
    d230:	9600      	str	r6, [sp, #0]
    d232:	f00c fe63 	bl	19efc <ll_create_connection>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d236:	b100      	cbz	r0, d23a <le_create_connection+0x36>
    d238:	200c      	movs	r0, #12
    d23a:	f7ff fa5f 	bl	c6fc <cmd_status>
    d23e:	6028      	str	r0, [r5, #0]
}
    d240:	b007      	add	sp, #28
    d242:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d244 <le_create_conn_cancel>:
{
    d244:	b538      	push	{r3, r4, r5, lr}
    d246:	460d      	mov	r5, r1
	status = ll_connect_disable();
    d248:	f00b f9fe 	bl	18648 <ll_connect_disable>
    d24c:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d24e:	2101      	movs	r1, #1
    d250:	4628      	mov	r0, r5
    d252:	f7ff fa7b 	bl	c74c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d256:	b114      	cbz	r4, d25e <le_create_conn_cancel+0x1a>
    d258:	230c      	movs	r3, #12
    d25a:	7003      	strb	r3, [r0, #0]
    d25c:	bd38      	pop	{r3, r4, r5, pc}
    d25e:	2300      	movs	r3, #0
    d260:	e7fb      	b.n	d25a <le_create_conn_cancel+0x16>

0000d262 <le_set_host_chan_classif>:
{
    d262:	b538      	push	{r3, r4, r5, lr}
    d264:	460d      	mov	r5, r1
	status = ll_chm_update(&cmd->ch_map[0]);
    d266:	6880      	ldr	r0, [r0, #8]
    d268:	f00a fb06 	bl	17878 <ll_chm_update>
    d26c:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d26e:	2101      	movs	r1, #1
    d270:	4628      	mov	r0, r5
    d272:	f7ff fa6b 	bl	c74c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d276:	b114      	cbz	r4, d27e <le_set_host_chan_classif+0x1c>
    d278:	230c      	movs	r3, #12
    d27a:	7003      	strb	r3, [r0, #0]
    d27c:	bd38      	pop	{r3, r4, r5, pc}
    d27e:	2300      	movs	r3, #0
    d280:	e7fb      	b.n	d27a <le_set_host_chan_classif+0x18>

0000d282 <le_start_encryption>:
{
    d282:	b510      	push	{r4, lr}
    d284:	460c      	mov	r4, r1
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
    d286:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d288:	4611      	mov	r1, r2
    d28a:	f831 0b02 	ldrh.w	r0, [r1], #2
	status = ll_enc_req_send(handle,
    d28e:	f102 030c 	add.w	r3, r2, #12
    d292:	320a      	adds	r2, #10
    d294:	f00a fe2a 	bl	17eec <ll_enc_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d298:	b100      	cbz	r0, d29c <le_start_encryption+0x1a>
    d29a:	200c      	movs	r0, #12
    d29c:	f7ff fa2e 	bl	c6fc <cmd_status>
    d2a0:	6020      	str	r0, [r4, #0]
    d2a2:	bd10      	pop	{r4, pc}

0000d2a4 <le_ltk_req_reply>:
{
    d2a4:	b570      	push	{r4, r5, r6, lr}
    d2a6:	460e      	mov	r6, r1
	handle = sys_le16_to_cpu(cmd->handle);
    d2a8:	6882      	ldr	r2, [r0, #8]
    d2aa:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    d2ae:	2100      	movs	r1, #0
    d2b0:	b2a0      	uxth	r0, r4
    d2b2:	f00a fb34 	bl	1791e <ll_start_enc_req_send>
    d2b6:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d2b8:	2103      	movs	r1, #3
    d2ba:	4630      	mov	r0, r6
    d2bc:	f7ff fa46 	bl	c74c <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d2c0:	b125      	cbz	r5, d2cc <le_ltk_req_reply+0x28>
    d2c2:	230c      	movs	r3, #12
    d2c4:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d2c6:	f8a0 4001 	strh.w	r4, [r0, #1]
    d2ca:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d2cc:	2300      	movs	r3, #0
    d2ce:	e7f9      	b.n	d2c4 <le_ltk_req_reply+0x20>

0000d2d0 <le_ltk_req_neg_reply>:
{
    d2d0:	b570      	push	{r4, r5, r6, lr}
    d2d2:	460e      	mov	r6, r1
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
    d2d4:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d2d6:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    d2d8:	2200      	movs	r2, #0
    d2da:	2106      	movs	r1, #6
    d2dc:	b2a0      	uxth	r0, r4
    d2de:	f00a fb1e 	bl	1791e <ll_start_enc_req_send>
    d2e2:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d2e4:	2103      	movs	r1, #3
    d2e6:	4630      	mov	r0, r6
    d2e8:	f7ff fa30 	bl	c74c <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d2ec:	b125      	cbz	r5, d2f8 <le_ltk_req_neg_reply+0x28>
    d2ee:	230c      	movs	r3, #12
    d2f0:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_le16_to_cpu(handle);
    d2f2:	f8a0 4001 	strh.w	r4, [r0, #1]
    d2f6:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d2f8:	2300      	movs	r3, #0
    d2fa:	e7f9      	b.n	d2f0 <le_ltk_req_neg_reply+0x20>

0000d2fc <le_read_chan_map>:
{
    d2fc:	b570      	push	{r4, r5, r6, lr}
    d2fe:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_chan_map *cmd = (void *)buf->data;
    d300:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d302:	8815      	ldrh	r5, [r2, #0]
    d304:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    d306:	2108      	movs	r1, #8
    d308:	4618      	mov	r0, r3
    d30a:	f7ff fa1f 	bl	c74c <cmd_complete>
    d30e:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    d310:	1cc1      	adds	r1, r0, #3
    d312:	4630      	mov	r0, r6
    d314:	f00a faee 	bl	178f4 <ll_chm_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d318:	b120      	cbz	r0, d324 <le_read_chan_map+0x28>
    d31a:	2302      	movs	r3, #2
    d31c:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    d31e:	f8a4 5001 	strh.w	r5, [r4, #1]
    d322:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d324:	2300      	movs	r3, #0
    d326:	e7f9      	b.n	d31c <le_read_chan_map+0x20>

0000d328 <le_read_remote_features>:
{
    d328:	b510      	push	{r4, lr}
    d32a:	460c      	mov	r4, r1
	struct bt_hci_cp_le_read_remote_features *cmd = (void *)buf->data;
    d32c:	6883      	ldr	r3, [r0, #8]
	status = ll_feature_req_send(handle);
    d32e:	8818      	ldrh	r0, [r3, #0]
    d330:	f00a fb3d 	bl	179ae <ll_feature_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d334:	b100      	cbz	r0, d338 <le_read_remote_features+0x10>
    d336:	200c      	movs	r0, #12
    d338:	f7ff f9e0 	bl	c6fc <cmd_status>
    d33c:	6020      	str	r0, [r4, #0]
    d33e:	bd10      	pop	{r4, pc}

0000d340 <le_conn_param_req_neg_reply>:
{
    d340:	b570      	push	{r4, r5, r6, lr}
    d342:	b082      	sub	sp, #8
    d344:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    d346:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d348:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    d34a:	789a      	ldrb	r2, [r3, #2]
    d34c:	2300      	movs	r3, #0
    d34e:	9301      	str	r3, [sp, #4]
    d350:	9300      	str	r3, [sp, #0]
    d352:	2102      	movs	r1, #2
    d354:	b2a0      	uxth	r0, r4
    d356:	f00a f9ff 	bl	17758 <ll_conn_update>
    d35a:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d35c:	2103      	movs	r1, #3
    d35e:	4630      	mov	r0, r6
    d360:	f7ff f9f4 	bl	c74c <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d364:	b12d      	cbz	r5, d372 <le_conn_param_req_neg_reply+0x32>
    d366:	230c      	movs	r3, #12
    d368:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d36a:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    d36e:	b002      	add	sp, #8
    d370:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d372:	2300      	movs	r3, #0
    d374:	e7f8      	b.n	d368 <le_conn_param_req_neg_reply+0x28>

0000d376 <le_set_data_len>:
{
    d376:	b570      	push	{r4, r5, r6, lr}
    d378:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
    d37a:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d37c:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    d37e:	889a      	ldrh	r2, [r3, #4]
    d380:	8859      	ldrh	r1, [r3, #2]
    d382:	b2a0      	uxth	r0, r4
    d384:	f00a fb97 	bl	17ab6 <ll_length_req_send>
    d388:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d38a:	2103      	movs	r1, #3
    d38c:	4630      	mov	r0, r6
    d38e:	f7ff f9dd 	bl	c74c <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d392:	b125      	cbz	r5, d39e <le_set_data_len+0x28>
    d394:	230c      	movs	r3, #12
    d396:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d398:	f8a0 4001 	strh.w	r4, [r0, #1]
    d39c:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d39e:	2300      	movs	r3, #0
    d3a0:	e7f9      	b.n	d396 <le_set_data_len+0x20>

0000d3a2 <le_read_default_data_len>:
{
    d3a2:	b510      	push	{r4, lr}
    d3a4:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d3a6:	2105      	movs	r1, #5
    d3a8:	f7ff f9d0 	bl	c74c <cmd_complete>
    d3ac:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    d3ae:	1cc1      	adds	r1, r0, #3
    d3b0:	3001      	adds	r0, #1
    d3b2:	f00a fba7 	bl	17b04 <ll_length_default_get>
	rp->status = 0x00;
    d3b6:	2300      	movs	r3, #0
    d3b8:	7023      	strb	r3, [r4, #0]
    d3ba:	bd10      	pop	{r4, pc}

0000d3bc <le_write_default_data_len>:
{
    d3bc:	b538      	push	{r3, r4, r5, lr}
    d3be:	460d      	mov	r5, r1
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
    d3c0:	6883      	ldr	r3, [r0, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    d3c2:	8859      	ldrh	r1, [r3, #2]
    d3c4:	8818      	ldrh	r0, [r3, #0]
    d3c6:	f00a fba7 	bl	17b18 <ll_length_default_set>
    d3ca:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d3cc:	2101      	movs	r1, #1
    d3ce:	4628      	mov	r0, r5
    d3d0:	f7ff f9bc 	bl	c74c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    d3d4:	b114      	cbz	r4, d3dc <le_write_default_data_len+0x20>
    d3d6:	231e      	movs	r3, #30
    d3d8:	7003      	strb	r3, [r0, #0]
    d3da:	bd38      	pop	{r3, r4, r5, pc}
    d3dc:	2300      	movs	r3, #0
    d3de:	e7fb      	b.n	d3d8 <le_write_default_data_len+0x1c>

0000d3e0 <le_read_max_data_len>:
{
    d3e0:	b510      	push	{r4, lr}
    d3e2:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d3e4:	2109      	movs	r1, #9
    d3e6:	f7ff f9b1 	bl	c74c <cmd_complete>
    d3ea:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    d3ec:	1dc3      	adds	r3, r0, #7
    d3ee:	1d42      	adds	r2, r0, #5
    d3f0:	1cc1      	adds	r1, r0, #3
    d3f2:	3001      	adds	r0, #1
    d3f4:	f00a fb9a 	bl	17b2c <ll_length_max_get>
	rp->status = 0x00;
    d3f8:	2300      	movs	r3, #0
    d3fa:	7023      	strb	r3, [r4, #0]
    d3fc:	bd10      	pop	{r4, pc}
	...

0000d400 <le_phy_upd_complete>:
{
    d400:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d402:	4b1a      	ldr	r3, [pc, #104]	; (d46c <le_phy_upd_complete+0x6c>)
    d404:	e9d3 4500 	ldrd	r4, r5, [r3]
    d408:	2400      	movs	r4, #0
    d40a:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    d40e:	ea54 0305 	orrs.w	r3, r4, r5
    d412:	d008      	beq.n	d426 <le_phy_upd_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    d414:	4b16      	ldr	r3, [pc, #88]	; (d470 <le_phy_upd_complete+0x70>)
    d416:	e9d3 4500 	ldrd	r4, r5, [r3]
    d41a:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    d41e:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d420:	ea54 0305 	orrs.w	r3, r4, r5
    d424:	d100      	bne.n	d428 <le_phy_upd_complete+0x28>
    d426:	bd38      	pop	{r3, r4, r5, pc}
    d428:	4613      	mov	r3, r2
    d42a:	460c      	mov	r4, r1
    d42c:	4605      	mov	r5, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    d42e:	2205      	movs	r2, #5
    d430:	210c      	movs	r1, #12
    d432:	4618      	mov	r0, r3
    d434:	f7ff fa24 	bl	c880 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    d438:	78eb      	ldrb	r3, [r5, #3]
    d43a:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    d43c:	f8a0 4001 	strh.w	r4, [r0, #1]
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    d440:	792a      	ldrb	r2, [r5, #4]
	return __builtin_ffs(op);
    d442:	fa92 f3a2 	rbit	r3, r2
    d446:	fab3 f383 	clz	r3, r3
    d44a:	b90a      	cbnz	r2, d450 <le_phy_upd_complete+0x50>
    d44c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d450:	3301      	adds	r3, #1
    d452:	70c3      	strb	r3, [r0, #3]
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    d454:	796a      	ldrb	r2, [r5, #5]
    d456:	fa92 f3a2 	rbit	r3, r2
    d45a:	fab3 f383 	clz	r3, r3
    d45e:	b90a      	cbnz	r2, d464 <le_phy_upd_complete+0x64>
    d460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d464:	3301      	adds	r3, #1
    d466:	7103      	strb	r3, [r0, #4]
    d468:	e7dd      	b.n	d426 <le_phy_upd_complete+0x26>
    d46a:	bf00      	nop
    d46c:	2000ba60 	.word	0x2000ba60
    d470:	2000ba68 	.word	0x2000ba68

0000d474 <le_read_phy>:
{
    d474:	b570      	push	{r4, r5, r6, lr}
    d476:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
    d478:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d47a:	8815      	ldrh	r5, [r2, #0]
    d47c:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    d47e:	2105      	movs	r1, #5
    d480:	4618      	mov	r0, r3
    d482:	f7ff f963 	bl	c74c <cmd_complete>
    d486:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    d488:	1d02      	adds	r2, r0, #4
    d48a:	1cc1      	adds	r1, r0, #3
    d48c:	4630      	mov	r0, r6
    d48e:	f00a fb57 	bl	17b40 <ll_phy_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d492:	b1c0      	cbz	r0, d4c6 <le_read_phy+0x52>
    d494:	230c      	movs	r3, #12
    d496:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d498:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    d49c:	78e2      	ldrb	r2, [r4, #3]
    d49e:	fa92 f3a2 	rbit	r3, r2
    d4a2:	fab3 f383 	clz	r3, r3
    d4a6:	b90a      	cbnz	r2, d4ac <le_read_phy+0x38>
    d4a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d4ac:	3301      	adds	r3, #1
    d4ae:	70e3      	strb	r3, [r4, #3]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    d4b0:	7922      	ldrb	r2, [r4, #4]
    d4b2:	fa92 f3a2 	rbit	r3, r2
    d4b6:	fab3 f383 	clz	r3, r3
    d4ba:	b90a      	cbnz	r2, d4c0 <le_read_phy+0x4c>
    d4bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d4c0:	3301      	adds	r3, #1
    d4c2:	7123      	strb	r3, [r4, #4]
    d4c4:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d4c6:	2300      	movs	r3, #0
    d4c8:	e7e5      	b.n	d496 <le_read_phy+0x22>

0000d4ca <le_set_default_phy>:
{
    d4ca:	b538      	push	{r3, r4, r5, lr}
    d4cc:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    d4ce:	6883      	ldr	r3, [r0, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d4d0:	781a      	ldrb	r2, [r3, #0]
    d4d2:	f012 0f01 	tst.w	r2, #1
    d4d6:	d001      	beq.n	d4dc <le_set_default_phy+0x12>
		cmd->tx_phys = 0x07;
    d4d8:	2107      	movs	r1, #7
    d4da:	7059      	strb	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    d4dc:	f012 0f02 	tst.w	r2, #2
    d4e0:	d001      	beq.n	d4e6 <le_set_default_phy+0x1c>
		cmd->rx_phys = 0x07;
    d4e2:	2207      	movs	r2, #7
    d4e4:	709a      	strb	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    d4e6:	7899      	ldrb	r1, [r3, #2]
    d4e8:	7858      	ldrb	r0, [r3, #1]
    d4ea:	f00a fb3d 	bl	17b68 <ll_phy_default_set>
    d4ee:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d4f0:	2101      	movs	r1, #1
    d4f2:	4628      	mov	r0, r5
    d4f4:	f7ff f92a 	bl	c74c <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    d4f8:	b114      	cbz	r4, d500 <le_set_default_phy+0x36>
    d4fa:	231e      	movs	r3, #30
    d4fc:	7003      	strb	r3, [r0, #0]
    d4fe:	bd38      	pop	{r3, r4, r5, pc}
    d500:	2300      	movs	r3, #0
    d502:	e7fb      	b.n	d4fc <le_set_default_phy+0x32>

0000d504 <le_set_phy>:
{
    d504:	b538      	push	{r3, r4, r5, lr}
    d506:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    d508:	6881      	ldr	r1, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d50a:	8808      	ldrh	r0, [r1, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    d50c:	f8b1 2005 	ldrh.w	r2, [r1, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d510:	788b      	ldrb	r3, [r1, #2]
    d512:	f013 0f01 	tst.w	r3, #1
    d516:	d001      	beq.n	d51c <le_set_phy+0x18>
		cmd->tx_phys = 0x07;
    d518:	2507      	movs	r5, #7
    d51a:	70cd      	strb	r5, [r1, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    d51c:	f013 0f02 	tst.w	r3, #2
    d520:	d001      	beq.n	d526 <le_set_phy+0x22>
		cmd->rx_phys = 0x07;
    d522:	2307      	movs	r3, #7
    d524:	710b      	strb	r3, [r1, #4]
	if (phy_opts & 0x03) {
    d526:	f012 0f03 	tst.w	r2, #3
    d52a:	d00c      	beq.n	d546 <le_set_phy+0x42>
		phy_opts -= 1;
    d52c:	3a01      	subs	r2, #1
		phy_opts &= 1;
    d52e:	f002 0201 	and.w	r2, r2, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    d532:	790b      	ldrb	r3, [r1, #4]
    d534:	78c9      	ldrb	r1, [r1, #3]
    d536:	f00a fb21 	bl	17b7c <ll_phy_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d53a:	b100      	cbz	r0, d53e <le_set_phy+0x3a>
    d53c:	200c      	movs	r0, #12
    d53e:	f7ff f8dd 	bl	c6fc <cmd_status>
    d542:	6020      	str	r0, [r4, #0]
    d544:	bd38      	pop	{r3, r4, r5, pc}
		phy_opts = 0;
    d546:	2200      	movs	r2, #0
    d548:	e7f3      	b.n	d532 <le_set_phy+0x2e>

0000d54a <le_add_dev_to_rl>:
{
    d54a:	b538      	push	{r3, r4, r5, lr}
    d54c:	460d      	mov	r5, r1
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
    d54e:	6880      	ldr	r0, [r0, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    d550:	f100 0217 	add.w	r2, r0, #23
    d554:	1dc1      	adds	r1, r0, #7
    d556:	f00b fffb 	bl	19550 <ll_rl_add>
    d55a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d55c:	2101      	movs	r1, #1
    d55e:	4628      	mov	r0, r5
    d560:	f7ff f8f4 	bl	c74c <cmd_complete>
	ccst->status = status;
    d564:	7004      	strb	r4, [r0, #0]
    d566:	bd38      	pop	{r3, r4, r5, pc}

0000d568 <le_rem_dev_from_rl>:
{
    d568:	b538      	push	{r3, r4, r5, lr}
    d56a:	460d      	mov	r5, r1
	status = ll_rl_remove(&cmd->peer_id_addr);
    d56c:	6880      	ldr	r0, [r0, #8]
    d56e:	f00c f8ad 	bl	196cc <ll_rl_remove>
    d572:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d574:	2101      	movs	r1, #1
    d576:	4628      	mov	r0, r5
    d578:	f7ff f8e8 	bl	c74c <cmd_complete>
	ccst->status = status;
    d57c:	7004      	strb	r4, [r0, #0]
    d57e:	bd38      	pop	{r3, r4, r5, pc}

0000d580 <le_clear_rl>:
{
    d580:	b510      	push	{r4, lr}
    d582:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    d584:	2101      	movs	r1, #1
    d586:	f7ff f8e1 	bl	c74c <cmd_complete>
    d58a:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    d58c:	f00b ffd4 	bl	19538 <ll_rl_clear>
    d590:	7020      	strb	r0, [r4, #0]
    d592:	bd10      	pop	{r4, pc}

0000d594 <le_read_rl_size>:
{
    d594:	b510      	push	{r4, lr}
    d596:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d598:	2102      	movs	r1, #2
    d59a:	f7ff f8d7 	bl	c74c <cmd_complete>
    d59e:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    d5a0:	f00b ffc8 	bl	19534 <ll_rl_size_get>
    d5a4:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    d5a6:	2300      	movs	r3, #0
    d5a8:	7023      	strb	r3, [r4, #0]
    d5aa:	bd10      	pop	{r4, pc}

0000d5ac <le_read_peer_rpa>:
{
    d5ac:	b510      	push	{r4, lr}
    d5ae:	b082      	sub	sp, #8
    d5b0:	460c      	mov	r4, r1
	memcpy(dst, src, sizeof(*dst));
    d5b2:	2207      	movs	r2, #7
    d5b4:	6881      	ldr	r1, [r0, #8]
    d5b6:	4668      	mov	r0, sp
    d5b8:	f7f2 fe82 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    d5bc:	2107      	movs	r1, #7
    d5be:	4620      	mov	r0, r4
    d5c0:	f7ff f8c4 	bl	c74c <cmd_complete>
    d5c4:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    d5c6:	1c41      	adds	r1, r0, #1
    d5c8:	4668      	mov	r0, sp
    d5ca:	f00c f923 	bl	19814 <ll_rl_crpa_get>
    d5ce:	7020      	strb	r0, [r4, #0]
}
    d5d0:	b002      	add	sp, #8
    d5d2:	bd10      	pop	{r4, pc}

0000d5d4 <le_read_local_rpa>:
{
    d5d4:	b510      	push	{r4, lr}
    d5d6:	b082      	sub	sp, #8
    d5d8:	460c      	mov	r4, r1
    d5da:	2207      	movs	r2, #7
    d5dc:	6881      	ldr	r1, [r0, #8]
    d5de:	4668      	mov	r0, sp
    d5e0:	f7f2 fe6e 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    d5e4:	2107      	movs	r1, #7
    d5e6:	4620      	mov	r0, r4
    d5e8:	f7ff f8b0 	bl	c74c <cmd_complete>
    d5ec:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    d5ee:	1c41      	adds	r1, r0, #1
    d5f0:	4668      	mov	r0, sp
    d5f2:	f00c f937 	bl	19864 <ll_rl_lrpa_get>
    d5f6:	7020      	strb	r0, [r4, #0]
}
    d5f8:	b002      	add	sp, #8
    d5fa:	bd10      	pop	{r4, pc}

0000d5fc <le_set_addr_res_enable>:
{
    d5fc:	b538      	push	{r3, r4, r5, lr}
    d5fe:	460b      	mov	r3, r1
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
    d600:	6882      	ldr	r2, [r0, #8]
	u8_t enable = cmd->enable;
    d602:	7815      	ldrb	r5, [r2, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    d604:	2101      	movs	r1, #1
    d606:	4618      	mov	r0, r3
    d608:	f7ff f8a0 	bl	c74c <cmd_complete>
    d60c:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    d60e:	4628      	mov	r0, r5
    d610:	f00c f942 	bl	19898 <ll_rl_enable>
    d614:	7020      	strb	r0, [r4, #0]
    d616:	bd38      	pop	{r3, r4, r5, pc}

0000d618 <le_set_rpa_timeout>:
{
    d618:	b510      	push	{r4, lr}
    d61a:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_rpa_timeout *cmd = (void *)buf->data;
    d61c:	6883      	ldr	r3, [r0, #8]
	ll_rl_timeout_set(timeout);
    d61e:	8818      	ldrh	r0, [r3, #0]
    d620:	f00c f952 	bl	198c8 <ll_rl_timeout_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d624:	2101      	movs	r1, #1
    d626:	4620      	mov	r0, r4
    d628:	f7ff f890 	bl	c74c <cmd_complete>
	ccst->status = 0x00;
    d62c:	2300      	movs	r3, #0
    d62e:	7003      	strb	r3, [r0, #0]
    d630:	bd10      	pop	{r4, pc}

0000d632 <le_set_privacy_mode>:
{
    d632:	b538      	push	{r3, r4, r5, lr}
    d634:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
    d636:	6880      	ldr	r0, [r0, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    d638:	79c1      	ldrb	r1, [r0, #7]
    d63a:	f00c f94f 	bl	198dc <ll_priv_mode_set>
    d63e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d640:	2101      	movs	r1, #1
    d642:	4628      	mov	r0, r5
    d644:	f7ff f882 	bl	c74c <cmd_complete>
	ccst->status = status;
    d648:	7004      	strb	r4, [r0, #0]
    d64a:	bd38      	pop	{r3, r4, r5, pc}

0000d64c <le_read_tx_power>:
{
    d64c:	b508      	push	{r3, lr}
    d64e:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d650:	2103      	movs	r1, #3
    d652:	f7ff f87b 	bl	c74c <cmd_complete>
	rp->status = 0x00;
    d656:	4601      	mov	r1, r0
    d658:	2300      	movs	r3, #0
    d65a:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_power_get(&rp->min_tx_power, &rp->max_tx_power);
    d65e:	3001      	adds	r0, #1
    d660:	f00a f9f1 	bl	17a46 <ll_tx_power_get>
    d664:	bd08      	pop	{r3, pc}

0000d666 <controller_cmd_handle>:
{
    d666:	b508      	push	{r3, lr}
    d668:	460b      	mov	r3, r1
	switch (ocf) {
    d66a:	3801      	subs	r0, #1
    d66c:	284d      	cmp	r0, #77	; 0x4d
    d66e:	f200 8164 	bhi.w	d93a <controller_cmd_handle+0x2d4>
    d672:	e8df f010 	tbh	[pc, r0, lsl #1]
    d676:	004e      	.short	0x004e
    d678:	005a0054 	.word	0x005a0054
    d67c:	00600162 	.word	0x00600162
    d680:	00960090 	.word	0x00960090
    d684:	00a2009c 	.word	0x00a2009c
    d688:	00ae00a8 	.word	0x00ae00a8
    d68c:	00ba00b4 	.word	0x00ba00b4
    d690:	006600c0 	.word	0x006600c0
    d694:	0072006c 	.word	0x0072006c
    d698:	00ea0078 	.word	0x00ea0078
    d69c:	00de00c6 	.word	0x00de00c6
    d6a0:	007e00e4 	.word	0x007e00e4
    d6a4:	00cc0084 	.word	0x00cc0084
    d6a8:	00d800d2 	.word	0x00d800d2
    d6ac:	0162008a 	.word	0x0162008a
    d6b0:	01620162 	.word	0x01620162
    d6b4:	00f600f0 	.word	0x00f600f0
    d6b8:	010200fc 	.word	0x010200fc
    d6bc:	01620108 	.word	0x01620108
    d6c0:	01260162 	.word	0x01260162
    d6c4:	0132012c 	.word	0x0132012c
    d6c8:	013e0138 	.word	0x013e0138
    d6cc:	014a0144 	.word	0x014a0144
    d6d0:	010e0150 	.word	0x010e0150
    d6d4:	011a0114 	.word	0x011a0114
    d6d8:	01620120 	.word	0x01620120
    d6dc:	01620162 	.word	0x01620162
    d6e0:	01620162 	.word	0x01620162
    d6e4:	01620162 	.word	0x01620162
    d6e8:	01620162 	.word	0x01620162
    d6ec:	01620162 	.word	0x01620162
    d6f0:	01620162 	.word	0x01620162
    d6f4:	01620162 	.word	0x01620162
    d6f8:	01620162 	.word	0x01620162
    d6fc:	01620162 	.word	0x01620162
    d700:	01620162 	.word	0x01620162
    d704:	01620162 	.word	0x01620162
    d708:	015c0162 	.word	0x015c0162
    d70c:	01620162 	.word	0x01620162
    d710:	0156      	.short	0x0156
		le_set_event_mask(cmd, evt);
    d712:	4611      	mov	r1, r2
    d714:	4618      	mov	r0, r3
    d716:	f7f6 fe3f 	bl	4398 <le_set_event_mask>
	return 0;
    d71a:	2000      	movs	r0, #0
		break;
    d71c:	bd08      	pop	{r3, pc}
		le_read_buffer_size(cmd, evt);
    d71e:	4611      	mov	r1, r2
    d720:	4618      	mov	r0, r3
    d722:	f7ff f86c 	bl	c7fe <le_read_buffer_size>
	return 0;
    d726:	2000      	movs	r0, #0
		break;
    d728:	bd08      	pop	{r3, pc}
		le_read_local_features(cmd, evt);
    d72a:	4611      	mov	r1, r2
    d72c:	4618      	mov	r0, r3
    d72e:	f7ff fabb 	bl	cca8 <le_read_local_features>
	return 0;
    d732:	2000      	movs	r0, #0
		break;
    d734:	bd08      	pop	{r3, pc}
		le_set_random_address(cmd, evt);
    d736:	4611      	mov	r1, r2
    d738:	4618      	mov	r0, r3
    d73a:	f7ff fc03 	bl	cf44 <le_set_random_address>
	return 0;
    d73e:	2000      	movs	r0, #0
		break;
    d740:	bd08      	pop	{r3, pc}
		le_read_wl_size(cmd, evt);
    d742:	4611      	mov	r1, r2
    d744:	4618      	mov	r0, r3
    d746:	f7ff fc17 	bl	cf78 <le_read_wl_size>
	return 0;
    d74a:	2000      	movs	r0, #0
		break;
    d74c:	bd08      	pop	{r3, pc}
		le_clear_wl(cmd, evt);
    d74e:	4611      	mov	r1, r2
    d750:	4618      	mov	r0, r3
    d752:	f7ff fc1d 	bl	cf90 <le_clear_wl>
	return 0;
    d756:	2000      	movs	r0, #0
		break;
    d758:	bd08      	pop	{r3, pc}
		le_add_dev_to_wl(cmd, evt);
    d75a:	4611      	mov	r1, r2
    d75c:	4618      	mov	r0, r3
    d75e:	f7ff fc21 	bl	cfa4 <le_add_dev_to_wl>
	return 0;
    d762:	2000      	movs	r0, #0
		break;
    d764:	bd08      	pop	{r3, pc}
		le_rem_dev_from_wl(cmd, evt);
    d766:	4611      	mov	r1, r2
    d768:	4618      	mov	r0, r3
    d76a:	f7ff fc27 	bl	cfbc <le_rem_dev_from_wl>
	return 0;
    d76e:	2000      	movs	r0, #0
		break;
    d770:	bd08      	pop	{r3, pc}
		le_encrypt(cmd, evt);
    d772:	4611      	mov	r1, r2
    d774:	4618      	mov	r0, r3
    d776:	f7ff fc2d 	bl	cfd4 <le_encrypt>
	return 0;
    d77a:	2000      	movs	r0, #0
		break;
    d77c:	bd08      	pop	{r3, pc}
		le_rand(cmd, evt);
    d77e:	4611      	mov	r1, r2
    d780:	4618      	mov	r0, r3
    d782:	f7ff fca4 	bl	d0ce <le_rand>
	return 0;
    d786:	2000      	movs	r0, #0
		break;
    d788:	bd08      	pop	{r3, pc}
		le_read_supp_states(cmd, evt);
    d78a:	4611      	mov	r1, r2
    d78c:	4618      	mov	r0, r3
    d78e:	f7ff f843 	bl	c818 <le_read_supp_states>
	return 0;
    d792:	2000      	movs	r0, #0
		break;
    d794:	bd08      	pop	{r3, pc}
		le_set_adv_param(cmd, evt);
    d796:	4611      	mov	r1, r2
    d798:	4618      	mov	r0, r3
    d79a:	f7ff fca4 	bl	d0e6 <le_set_adv_param>
	return 0;
    d79e:	2000      	movs	r0, #0
		break;
    d7a0:	bd08      	pop	{r3, pc}
		le_read_adv_chan_tx_power(cmd, evt);
    d7a2:	4611      	mov	r1, r2
    d7a4:	4618      	mov	r0, r3
    d7a6:	f7ff f84a 	bl	c83e <le_read_adv_chan_tx_power>
	return 0;
    d7aa:	2000      	movs	r0, #0
		break;
    d7ac:	bd08      	pop	{r3, pc}
		le_set_adv_data(cmd, evt);
    d7ae:	4611      	mov	r1, r2
    d7b0:	4618      	mov	r0, r3
    d7b2:	f7ff fcbb 	bl	d12c <le_set_adv_data>
	return 0;
    d7b6:	2000      	movs	r0, #0
		break;
    d7b8:	bd08      	pop	{r3, pc}
		le_set_scan_rsp_data(cmd, evt);
    d7ba:	4611      	mov	r1, r2
    d7bc:	4618      	mov	r0, r3
    d7be:	f7ff fcc3 	bl	d148 <le_set_scan_rsp_data>
	return 0;
    d7c2:	2000      	movs	r0, #0
		break;
    d7c4:	bd08      	pop	{r3, pc}
		le_set_adv_enable(cmd, evt);
    d7c6:	4611      	mov	r1, r2
    d7c8:	4618      	mov	r0, r3
    d7ca:	f7ff fccb 	bl	d164 <le_set_adv_enable>
	return 0;
    d7ce:	2000      	movs	r0, #0
		break;
    d7d0:	bd08      	pop	{r3, pc}
		le_set_scan_param(cmd, evt);
    d7d2:	4611      	mov	r1, r2
    d7d4:	4618      	mov	r0, r3
    d7d6:	f7ff fcd6 	bl	d186 <le_set_scan_param>
	return 0;
    d7da:	2000      	movs	r0, #0
		break;
    d7dc:	bd08      	pop	{r3, pc}
		le_set_scan_enable(cmd, evt);
    d7de:	4611      	mov	r1, r2
    d7e0:	4618      	mov	r0, r3
    d7e2:	f7ff fceb 	bl	d1bc <le_set_scan_enable>
	return 0;
    d7e6:	2000      	movs	r0, #0
		break;
    d7e8:	bd08      	pop	{r3, pc}
		le_create_connection(cmd, evt);
    d7ea:	4611      	mov	r1, r2
    d7ec:	4618      	mov	r0, r3
    d7ee:	f7ff fd09 	bl	d204 <le_create_connection>
	return 0;
    d7f2:	2000      	movs	r0, #0
		break;
    d7f4:	bd08      	pop	{r3, pc}
		le_create_conn_cancel(cmd, evt);
    d7f6:	4611      	mov	r1, r2
    d7f8:	4618      	mov	r0, r3
    d7fa:	f7ff fd23 	bl	d244 <le_create_conn_cancel>
	return 0;
    d7fe:	2000      	movs	r0, #0
		break;
    d800:	bd08      	pop	{r3, pc}
		le_set_host_chan_classif(cmd, evt);
    d802:	4611      	mov	r1, r2
    d804:	4618      	mov	r0, r3
    d806:	f7ff fd2c 	bl	d262 <le_set_host_chan_classif>
	return 0;
    d80a:	2000      	movs	r0, #0
		break;
    d80c:	bd08      	pop	{r3, pc}
		le_start_encryption(cmd, evt);
    d80e:	4611      	mov	r1, r2
    d810:	4618      	mov	r0, r3
    d812:	f7ff fd36 	bl	d282 <le_start_encryption>
	return 0;
    d816:	2000      	movs	r0, #0
		break;
    d818:	bd08      	pop	{r3, pc}
		le_ltk_req_reply(cmd, evt);
    d81a:	4611      	mov	r1, r2
    d81c:	4618      	mov	r0, r3
    d81e:	f7ff fd41 	bl	d2a4 <le_ltk_req_reply>
	return 0;
    d822:	2000      	movs	r0, #0
		break;
    d824:	bd08      	pop	{r3, pc}
		le_ltk_req_neg_reply(cmd, evt);
    d826:	4611      	mov	r1, r2
    d828:	4618      	mov	r0, r3
    d82a:	f7ff fd51 	bl	d2d0 <le_ltk_req_neg_reply>
	return 0;
    d82e:	2000      	movs	r0, #0
		break;
    d830:	bd08      	pop	{r3, pc}
		le_read_chan_map(cmd, evt);
    d832:	4611      	mov	r1, r2
    d834:	4618      	mov	r0, r3
    d836:	f7ff fd61 	bl	d2fc <le_read_chan_map>
	return 0;
    d83a:	2000      	movs	r0, #0
		break;
    d83c:	bd08      	pop	{r3, pc}
		le_read_remote_features(cmd, evt);
    d83e:	4611      	mov	r1, r2
    d840:	4618      	mov	r0, r3
    d842:	f7ff fd71 	bl	d328 <le_read_remote_features>
	return 0;
    d846:	2000      	movs	r0, #0
		break;
    d848:	bd08      	pop	{r3, pc}
		le_conn_update(cmd, evt);
    d84a:	4611      	mov	r1, r2
    d84c:	4618      	mov	r0, r3
    d84e:	f7f9 f9c1 	bl	6bd4 <le_conn_update>
	return 0;
    d852:	2000      	movs	r0, #0
		break;
    d854:	bd08      	pop	{r3, pc}
		le_conn_param_req_reply(cmd, evt);
    d856:	4611      	mov	r1, r2
    d858:	4618      	mov	r0, r3
    d85a:	f7f7 fe47 	bl	54ec <le_conn_param_req_reply>
	return 0;
    d85e:	2000      	movs	r0, #0
		break;
    d860:	bd08      	pop	{r3, pc}
		le_conn_param_req_neg_reply(cmd, evt);
    d862:	4611      	mov	r1, r2
    d864:	4618      	mov	r0, r3
    d866:	f7ff fd6b 	bl	d340 <le_conn_param_req_neg_reply>
	return 0;
    d86a:	2000      	movs	r0, #0
		break;
    d86c:	bd08      	pop	{r3, pc}
		le_set_data_len(cmd, evt);
    d86e:	4611      	mov	r1, r2
    d870:	4618      	mov	r0, r3
    d872:	f7ff fd80 	bl	d376 <le_set_data_len>
	return 0;
    d876:	2000      	movs	r0, #0
		break;
    d878:	bd08      	pop	{r3, pc}
		le_read_default_data_len(cmd, evt);
    d87a:	4611      	mov	r1, r2
    d87c:	4618      	mov	r0, r3
    d87e:	f7ff fd90 	bl	d3a2 <le_read_default_data_len>
	return 0;
    d882:	2000      	movs	r0, #0
		break;
    d884:	bd08      	pop	{r3, pc}
		le_write_default_data_len(cmd, evt);
    d886:	4611      	mov	r1, r2
    d888:	4618      	mov	r0, r3
    d88a:	f7ff fd97 	bl	d3bc <le_write_default_data_len>
	return 0;
    d88e:	2000      	movs	r0, #0
		break;
    d890:	bd08      	pop	{r3, pc}
		le_read_max_data_len(cmd, evt);
    d892:	4611      	mov	r1, r2
    d894:	4618      	mov	r0, r3
    d896:	f7ff fda3 	bl	d3e0 <le_read_max_data_len>
	return 0;
    d89a:	2000      	movs	r0, #0
		break;
    d89c:	bd08      	pop	{r3, pc}
		le_read_phy(cmd, evt);
    d89e:	4611      	mov	r1, r2
    d8a0:	4618      	mov	r0, r3
    d8a2:	f7ff fde7 	bl	d474 <le_read_phy>
	return 0;
    d8a6:	2000      	movs	r0, #0
		break;
    d8a8:	bd08      	pop	{r3, pc}
		le_set_default_phy(cmd, evt);
    d8aa:	4611      	mov	r1, r2
    d8ac:	4618      	mov	r0, r3
    d8ae:	f7ff fe0c 	bl	d4ca <le_set_default_phy>
	return 0;
    d8b2:	2000      	movs	r0, #0
		break;
    d8b4:	bd08      	pop	{r3, pc}
		le_set_phy(cmd, evt);
    d8b6:	4611      	mov	r1, r2
    d8b8:	4618      	mov	r0, r3
    d8ba:	f7ff fe23 	bl	d504 <le_set_phy>
	return 0;
    d8be:	2000      	movs	r0, #0
		break;
    d8c0:	bd08      	pop	{r3, pc}
		le_add_dev_to_rl(cmd, evt);
    d8c2:	4611      	mov	r1, r2
    d8c4:	4618      	mov	r0, r3
    d8c6:	f7ff fe40 	bl	d54a <le_add_dev_to_rl>
	return 0;
    d8ca:	2000      	movs	r0, #0
		break;
    d8cc:	bd08      	pop	{r3, pc}
		le_rem_dev_from_rl(cmd, evt);
    d8ce:	4611      	mov	r1, r2
    d8d0:	4618      	mov	r0, r3
    d8d2:	f7ff fe49 	bl	d568 <le_rem_dev_from_rl>
	return 0;
    d8d6:	2000      	movs	r0, #0
		break;
    d8d8:	bd08      	pop	{r3, pc}
		le_clear_rl(cmd, evt);
    d8da:	4611      	mov	r1, r2
    d8dc:	4618      	mov	r0, r3
    d8de:	f7ff fe4f 	bl	d580 <le_clear_rl>
	return 0;
    d8e2:	2000      	movs	r0, #0
		break;
    d8e4:	bd08      	pop	{r3, pc}
		le_read_rl_size(cmd, evt);
    d8e6:	4611      	mov	r1, r2
    d8e8:	4618      	mov	r0, r3
    d8ea:	f7ff fe53 	bl	d594 <le_read_rl_size>
	return 0;
    d8ee:	2000      	movs	r0, #0
		break;
    d8f0:	bd08      	pop	{r3, pc}
		le_read_peer_rpa(cmd, evt);
    d8f2:	4611      	mov	r1, r2
    d8f4:	4618      	mov	r0, r3
    d8f6:	f7ff fe59 	bl	d5ac <le_read_peer_rpa>
	return 0;
    d8fa:	2000      	movs	r0, #0
		break;
    d8fc:	bd08      	pop	{r3, pc}
		le_read_local_rpa(cmd, evt);
    d8fe:	4611      	mov	r1, r2
    d900:	4618      	mov	r0, r3
    d902:	f7ff fe67 	bl	d5d4 <le_read_local_rpa>
	return 0;
    d906:	2000      	movs	r0, #0
		break;
    d908:	bd08      	pop	{r3, pc}
		le_set_addr_res_enable(cmd, evt);
    d90a:	4611      	mov	r1, r2
    d90c:	4618      	mov	r0, r3
    d90e:	f7ff fe75 	bl	d5fc <le_set_addr_res_enable>
	return 0;
    d912:	2000      	movs	r0, #0
		break;
    d914:	bd08      	pop	{r3, pc}
		le_set_rpa_timeout(cmd, evt);
    d916:	4611      	mov	r1, r2
    d918:	4618      	mov	r0, r3
    d91a:	f7ff fe7d 	bl	d618 <le_set_rpa_timeout>
	return 0;
    d91e:	2000      	movs	r0, #0
		break;
    d920:	bd08      	pop	{r3, pc}
		le_set_privacy_mode(cmd, evt);
    d922:	4611      	mov	r1, r2
    d924:	4618      	mov	r0, r3
    d926:	f7ff fe84 	bl	d632 <le_set_privacy_mode>
	return 0;
    d92a:	2000      	movs	r0, #0
		break;
    d92c:	bd08      	pop	{r3, pc}
		le_read_tx_power(cmd, evt);
    d92e:	4611      	mov	r1, r2
    d930:	4618      	mov	r0, r3
    d932:	f7ff fe8b 	bl	d64c <le_read_tx_power>
	return 0;
    d936:	2000      	movs	r0, #0
		break;
    d938:	bd08      	pop	{r3, pc}
		return -EINVAL;
    d93a:	f06f 0015 	mvn.w	r0, #21
}
    d93e:	bd08      	pop	{r3, pc}

0000d940 <data_buf_overflow>:
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    d940:	4b0e      	ldr	r3, [pc, #56]	; (d97c <data_buf_overflow+0x3c>)
    d942:	e9d3 2300 	ldrd	r2, r3, [r3]
    d946:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    d94a:	2300      	movs	r3, #0
    d94c:	4313      	orrs	r3, r2
    d94e:	d100      	bne.n	d952 <data_buf_overflow+0x12>
    d950:	4770      	bx	lr
{
    d952:	b510      	push	{r4, lr}
    d954:	4604      	mov	r4, r0
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    d956:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d95a:	2001      	movs	r0, #1
    d95c:	f7f8 fa1c 	bl	5d98 <bt_buf_get_rx>
    d960:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    d962:	2201      	movs	r2, #1
    d964:	211a      	movs	r1, #26
    d966:	f7fe febf 	bl	c6e8 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    d96a:	6820      	ldr	r0, [r4, #0]
    d96c:	2101      	movs	r1, #1
    d96e:	3008      	adds	r0, #8
    d970:	f00c fbe0 	bl	1a134 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    d974:	2301      	movs	r3, #1
    d976:	7003      	strb	r3, [r0, #0]
    d978:	bd10      	pop	{r4, pc}
    d97a:	bf00      	nop
    d97c:	2000ba60 	.word	0x2000ba60

0000d980 <encode_data_ctrl>:
{
    d980:	b510      	push	{r4, lr}
    d982:	460c      	mov	r4, r1
	u16_t handle = node_rx->hdr.handle;
    d984:	88c1      	ldrh	r1, [r0, #6]
	switch (pdu_data->payload.llctrl.opcode) {
    d986:	78e0      	ldrb	r0, [r4, #3]
    d988:	3803      	subs	r0, #3
    d98a:	2812      	cmp	r0, #18
    d98c:	d82e      	bhi.n	d9ec <encode_data_ctrl+0x6c>
    d98e:	e8df f000 	tbb	[pc, r0]
    d992:	2d0a      	.short	0x2d0a
    d994:	2d290e2d 	.word	0x2d290e2d
    d998:	192d2d12 	.word	0x192d2d12
    d99c:	2d212d1d 	.word	0x2d212d1d
    d9a0:	252d2d2d 	.word	0x252d2d2d
    d9a4:	25          	.byte	0x25
    d9a5:	00          	.byte	0x00
		le_ltk_request(pdu_data, handle, buf);
    d9a6:	4620      	mov	r0, r4
    d9a8:	f7f7 feec 	bl	5784 <le_ltk_request>
		break;
    d9ac:	bd10      	pop	{r4, pc}
		encrypt_change(0x00, handle, buf);
    d9ae:	2000      	movs	r0, #0
    d9b0:	f7ff f826 	bl	ca00 <encrypt_change>
		break;
    d9b4:	bd10      	pop	{r4, pc}
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    d9b6:	4613      	mov	r3, r2
    d9b8:	460a      	mov	r2, r1
    d9ba:	4621      	mov	r1, r4
    d9bc:	2000      	movs	r0, #0
    d9be:	f7f7 fceb 	bl	5398 <le_remote_feat_complete>
		break;
    d9c2:	bd10      	pop	{r4, pc}
		remote_version_info(pdu_data, handle, buf);
    d9c4:	4620      	mov	r0, r4
    d9c6:	f7fe fff5 	bl	c9b4 <remote_version_info>
		break;
    d9ca:	bd10      	pop	{r4, pc}
		encrypt_change(pdu_data->payload.llctrl.ctrldata.reject_ind.
    d9cc:	7920      	ldrb	r0, [r4, #4]
    d9ce:	f7ff f817 	bl	ca00 <encrypt_change>
		break;
    d9d2:	bd10      	pop	{r4, pc}
		le_conn_param_req(pdu_data, handle, buf);
    d9d4:	4620      	mov	r0, r4
    d9d6:	f7f7 fdd7 	bl	5588 <le_conn_param_req>
		break;
    d9da:	bd10      	pop	{r4, pc}
		le_data_len_change(pdu_data, handle, buf);
    d9dc:	4620      	mov	r0, r4
    d9de:	f7f6 fa43 	bl	3e68 <le_data_len_change>
		break;
    d9e2:	bd10      	pop	{r4, pc}
		le_unknown_rsp(pdu_data, handle, buf);
    d9e4:	4620      	mov	r0, r4
    d9e6:	f7ff fb66 	bl	d0b6 <le_unknown_rsp>
		break;
    d9ea:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    d9ec:	4040      	eors	r0, r0
    d9ee:	f380 8811 	msr	BASEPRI, r0
    d9f2:	f04f 0004 	mov.w	r0, #4
    d9f6:	df02      	svc	2

0000d9f8 <le_advertising_report>:
{
    d9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d9fc:	b082      	sub	sp, #8
    d9fe:	4605      	mov	r5, r0
    da00:	460e      	mov	r6, r1
    da02:	4691      	mov	r9, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    da04:	4b90      	ldr	r3, [pc, #576]	; (dc48 <le_advertising_report+0x250>)
    da06:	e893 0003 	ldmia.w	r3, {r0, r1}
    da0a:	9000      	str	r0, [sp, #0]
    da0c:	f8ad 1004 	strh.w	r1, [sp, #4]
    da10:	0c09      	lsrs	r1, r1, #16
    da12:	f88d 1006 	strb.w	r1, [sp, #6]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    da16:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    da18:	330b      	adds	r3, #11
    da1a:	f816 8003 	ldrb.w	r8, [r6, r3]
	if (adv->tx_addr) {
    da1e:	782b      	ldrb	r3, [r5, #0]
    da20:	f013 0f40 	tst.w	r3, #64	; 0x40
    da24:	d125      	bne.n	da72 <le_advertising_report+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    da26:	4b89      	ldr	r3, [pc, #548]	; (dc4c <le_advertising_report+0x254>)
    da28:	e9d3 2300 	ldrd	r2, r3, [r3]
    da2c:	2200      	movs	r2, #0
    da2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    da32:	4313      	orrs	r3, r2
    da34:	f000 80b0 	beq.w	db98 <le_advertising_report+0x1a0>
		   offsetof(struct pdu_adv, payload) + adv->len + 2];
    da38:	786b      	ldrb	r3, [r5, #1]
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    da3a:	330c      	adds	r3, #12
    da3c:	5cf7      	ldrb	r7, [r6, r3]
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    da3e:	b947      	cbnz	r7, da52 <le_advertising_report+0x5a>
    da40:	4b83      	ldr	r3, [pc, #524]	; (dc50 <le_advertising_report+0x258>)
    da42:	e9d3 2300 	ldrd	r2, r3, [r3]
    da46:	f002 0202 	and.w	r2, r2, #2
    da4a:	2300      	movs	r3, #0
    da4c:	4313      	orrs	r3, r2
    da4e:	f000 80a3 	beq.w	db98 <le_advertising_report+0x1a0>
    da52:	b147      	cbz	r7, da66 <le_advertising_report+0x6e>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    da54:	4b7e      	ldr	r3, [pc, #504]	; (dc50 <le_advertising_report+0x258>)
    da56:	e9d3 2300 	ldrd	r2, r3, [r3]
    da5a:	f002 020b 	and.w	r2, r2, #11
    da5e:	2300      	movs	r3, #0
    da60:	4313      	orrs	r3, r2
    da62:	f000 8099 	beq.w	db98 <le_advertising_report+0x1a0>
	if (dup_count >= 0) {
    da66:	4b7b      	ldr	r3, [pc, #492]	; (dc54 <le_advertising_report+0x25c>)
    da68:	681b      	ldr	r3, [r3, #0]
    da6a:	2b00      	cmp	r3, #0
    da6c:	db08      	blt.n	da80 <le_advertising_report+0x88>
    da6e:	2400      	movs	r4, #0
    da70:	e009      	b.n	da86 <le_advertising_report+0x8e>
		ll_rl_crpa_set(0x00, NULL, rl_idx,
    da72:	1cab      	adds	r3, r5, #2
    da74:	4642      	mov	r2, r8
    da76:	2100      	movs	r1, #0
    da78:	4608      	mov	r0, r1
    da7a:	f00b fea7 	bl	197cc <ll_rl_crpa_set>
    da7e:	e7d2      	b.n	da26 <le_advertising_report+0x2e>
	return false;
    da80:	2300      	movs	r3, #0
    da82:	e054      	b.n	db2e <le_advertising_report+0x136>
		for (i = 0; i < dup_count; i++) {
    da84:	3401      	adds	r4, #1
    da86:	4b73      	ldr	r3, [pc, #460]	; (dc54 <le_advertising_report+0x25c>)
    da88:	681b      	ldr	r3, [r3, #0]
    da8a:	429c      	cmp	r4, r3
    da8c:	da26      	bge.n	dadc <le_advertising_report+0xe4>
				    &dup_filter[i].addr.a.val[0],
    da8e:	4972      	ldr	r1, [pc, #456]	; (dc58 <le_advertising_report+0x260>)
    da90:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
			if (!memcmp(&adv->payload.adv_ind.addr[0],
    da94:	2206      	movs	r2, #6
    da96:	3102      	adds	r1, #2
    da98:	1ca8      	adds	r0, r5, #2
    da9a:	f01b fd89 	bl	295b0 <memcmp>
    da9e:	2800      	cmp	r0, #0
    daa0:	d1f0      	bne.n	da84 <le_advertising_report+0x8c>
			    adv->tx_addr == dup_filter[i].addr.type) {
    daa2:	782b      	ldrb	r3, [r5, #0]
    daa4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    daa8:	4a6b      	ldr	r2, [pc, #428]	; (dc58 <le_advertising_report+0x260>)
    daaa:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    daae:	7852      	ldrb	r2, [r2, #1]
				    sizeof(bt_addr_t)) &&
    dab0:	4293      	cmp	r3, r2
    dab2:	d1e7      	bne.n	da84 <le_advertising_report+0x8c>
				if (dup_filter[i].mask & BIT(adv->type)) {
    dab4:	4b68      	ldr	r3, [pc, #416]	; (dc58 <le_advertising_report+0x260>)
    dab6:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
    daba:	782b      	ldrb	r3, [r5, #0]
    dabc:	f003 030f 	and.w	r3, r3, #15
    dac0:	fa22 f103 	lsr.w	r1, r2, r3
    dac4:	f011 0f01 	tst.w	r1, #1
    dac8:	d171      	bne.n	dbae <le_advertising_report+0x1b6>
				dup_filter[i].mask |= BIT(adv->type);
    daca:	2101      	movs	r1, #1
    dacc:	fa01 f303 	lsl.w	r3, r1, r3
    dad0:	431a      	orrs	r2, r3
    dad2:	4b61      	ldr	r3, [pc, #388]	; (dc58 <le_advertising_report+0x260>)
    dad4:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
				return false;
    dad8:	2300      	movs	r3, #0
    dada:	e028      	b.n	db2e <le_advertising_report+0x136>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    dadc:	f8df a17c 	ldr.w	sl, [pc, #380]	; dc5c <le_advertising_report+0x264>
    dae0:	f8da 0000 	ldr.w	r0, [sl]
    dae4:	4c5c      	ldr	r4, [pc, #368]	; (dc58 <le_advertising_report+0x260>)
    dae6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    daea:	2206      	movs	r2, #6
    daec:	1ca9      	adds	r1, r5, #2
    daee:	3002      	adds	r0, #2
    daf0:	f7f2 fbe6 	bl	2c0 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    daf4:	f8da 3000 	ldr.w	r3, [sl]
    daf8:	782a      	ldrb	r2, [r5, #0]
    dafa:	f3c2 1280 	ubfx	r2, r2, #6, #1
    dafe:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    db02:	704a      	strb	r2, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    db04:	782a      	ldrb	r2, [r5, #0]
    db06:	f002 010f 	and.w	r1, r2, #15
    db0a:	2201      	movs	r2, #1
    db0c:	408a      	lsls	r2, r1
    db0e:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    db12:	4a50      	ldr	r2, [pc, #320]	; (dc54 <le_advertising_report+0x25c>)
    db14:	6812      	ldr	r2, [r2, #0]
    db16:	2a0f      	cmp	r2, #15
    db18:	dc41      	bgt.n	db9e <le_advertising_report+0x1a6>
			dup_count++;
    db1a:	3201      	adds	r2, #1
    db1c:	4b4d      	ldr	r3, [pc, #308]	; (dc54 <le_advertising_report+0x25c>)
    db1e:	601a      	str	r2, [r3, #0]
			dup_curr = dup_count;
    db20:	f8ca 2000 	str.w	r2, [sl]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    db24:	4b4d      	ldr	r3, [pc, #308]	; (dc5c <le_advertising_report+0x264>)
    db26:	681b      	ldr	r3, [r3, #0]
    db28:	2b10      	cmp	r3, #16
    db2a:	d03c      	beq.n	dba6 <le_advertising_report+0x1ae>
	return false;
    db2c:	2300      	movs	r3, #0
	if (dup_found(adv)) {
    db2e:	bb9b      	cbnz	r3, db98 <le_advertising_report+0x1a0>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    db30:	782b      	ldrb	r3, [r5, #0]
    db32:	f003 030f 	and.w	r3, r3, #15
    db36:	2b01      	cmp	r3, #1
    db38:	d03b      	beq.n	dbb2 <le_advertising_report+0x1ba>
		data_len = (adv->len - BDADDR_SIZE);
    db3a:	786c      	ldrb	r4, [r5, #1]
    db3c:	3c06      	subs	r4, #6
    db3e:	b2e4      	uxtb	r4, r4
		  offsetof(struct pdu_adv, payload) + adv->len];
    db40:	786a      	ldrb	r2, [r5, #1]
    db42:	320a      	adds	r2, #10
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    db44:	f816 a002 	ldrb.w	sl, [r6, r2]
    db48:	f1ca 0a00 	rsb	sl, sl, #0
    db4c:	fa4f fa8a 	sxtb.w	sl, sl
	if (direct) {
    db50:	2f00      	cmp	r7, #0
    db52:	d041      	beq.n	dbd8 <le_advertising_report+0x1e0>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    db54:	2b01      	cmp	r3, #1
    db56:	d12e      	bne.n	dbb6 <le_advertising_report+0x1be>
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    db58:	2211      	movs	r2, #17
    db5a:	210b      	movs	r1, #11
    db5c:	4648      	mov	r0, r9
    db5e:	f7fe fe8f 	bl	c880 <meta_evt>
    db62:	4604      	mov	r4, r0
		drp->num_reports = 1;
    db64:	2301      	movs	r3, #1
    db66:	7003      	strb	r3, [r0, #0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    db68:	7043      	strb	r3, [r0, #1]
		if (rl_idx < ll_rl_size_get()) {
    db6a:	f00b fce3 	bl	19534 <ll_rl_size_get>
    db6e:	4580      	cmp	r8, r0
    db70:	d227      	bcs.n	dbc2 <le_advertising_report+0x1ca>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    db72:	1ce2      	adds	r2, r4, #3
    db74:	1ca1      	adds	r1, r4, #2
    db76:	4640      	mov	r0, r8
    db78:	f00b fa84 	bl	19084 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    db7c:	78a3      	ldrb	r3, [r4, #2]
    db7e:	3302      	adds	r3, #2
    db80:	70a3      	strb	r3, [r4, #2]
		dir_info->dir_addr.type = 0x1;
    db82:	2301      	movs	r3, #1
    db84:	7263      	strb	r3, [r4, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    db86:	2206      	movs	r2, #6
    db88:	f105 0108 	add.w	r1, r5, #8
    db8c:	f104 000a 	add.w	r0, r4, #10
    db90:	f7f2 fb96 	bl	2c0 <memcpy>
		dir_info->rssi = rssi;
    db94:	f884 a010 	strb.w	sl, [r4, #16]
}
    db98:	b002      	add	sp, #8
    db9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
    db9e:	3301      	adds	r3, #1
    dba0:	4a2e      	ldr	r2, [pc, #184]	; (dc5c <le_advertising_report+0x264>)
    dba2:	6013      	str	r3, [r2, #0]
    dba4:	e7be      	b.n	db24 <le_advertising_report+0x12c>
			dup_curr = 0;
    dba6:	2300      	movs	r3, #0
    dba8:	4a2c      	ldr	r2, [pc, #176]	; (dc5c <le_advertising_report+0x264>)
    dbaa:	6013      	str	r3, [r2, #0]
    dbac:	e7bf      	b.n	db2e <le_advertising_report+0x136>
					return true;
    dbae:	2301      	movs	r3, #1
    dbb0:	e7bd      	b.n	db2e <le_advertising_report+0x136>
		data_len = 0;
    dbb2:	2400      	movs	r4, #0
    dbb4:	e7c4      	b.n	db40 <le_advertising_report+0x148>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    dbb6:	4040      	eors	r0, r0
    dbb8:	f380 8811 	msr	BASEPRI, r0
    dbbc:	f04f 0004 	mov.w	r0, #4
    dbc0:	df02      	svc	2
			dir_info->addr.type = adv->tx_addr;
    dbc2:	4629      	mov	r1, r5
    dbc4:	f811 3b02 	ldrb.w	r3, [r1], #2
    dbc8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    dbcc:	70a3      	strb	r3, [r4, #2]
			memcpy(&dir_info->addr.a.val[0],
    dbce:	2206      	movs	r2, #6
    dbd0:	1ce0      	adds	r0, r4, #3
    dbd2:	f7f2 fb75 	bl	2c0 <memcpy>
    dbd6:	e7d4      	b.n	db82 <le_advertising_report+0x18a>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    dbd8:	f104 020b 	add.w	r2, r4, #11
    dbdc:	b2d2      	uxtb	r2, r2
    dbde:	2102      	movs	r1, #2
    dbe0:	4648      	mov	r0, r9
    dbe2:	f7fe fe4d 	bl	c880 <meta_evt>
    dbe6:	4607      	mov	r7, r0
	sep->num_reports = 1;
    dbe8:	2301      	movs	r3, #1
    dbea:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    dbec:	782b      	ldrb	r3, [r5, #0]
    dbee:	f003 030f 	and.w	r3, r3, #15
    dbf2:	aa02      	add	r2, sp, #8
    dbf4:	4413      	add	r3, r2
    dbf6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    dbfa:	7043      	strb	r3, [r0, #1]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    dbfc:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    dbfe:	330b      	adds	r3, #11
    dc00:	5cf6      	ldrb	r6, [r6, r3]
	if (rl_idx < ll_rl_size_get()) {
    dc02:	f00b fc97 	bl	19534 <ll_rl_size_get>
    dc06:	4286      	cmp	r6, r0
    dc08:	d212      	bcs.n	dc30 <le_advertising_report+0x238>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    dc0a:	1cfa      	adds	r2, r7, #3
    dc0c:	1cb9      	adds	r1, r7, #2
    dc0e:	4630      	mov	r0, r6
    dc10:	f00b fa38 	bl	19084 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    dc14:	78bb      	ldrb	r3, [r7, #2]
    dc16:	3302      	adds	r3, #2
    dc18:	70bb      	strb	r3, [r7, #2]
	adv_info->length = data_len;
    dc1a:	727c      	strb	r4, [r7, #9]
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    dc1c:	370a      	adds	r7, #10
    dc1e:	4622      	mov	r2, r4
    dc20:	f105 0108 	add.w	r1, r5, #8
    dc24:	4638      	mov	r0, r7
    dc26:	f7f2 fb4b 	bl	2c0 <memcpy>
	*prssi = rssi;
    dc2a:	f807 a004 	strb.w	sl, [r7, r4]
    dc2e:	e7b3      	b.n	db98 <le_advertising_report+0x1a0>
		adv_info->addr.type = adv->tx_addr;
    dc30:	4629      	mov	r1, r5
    dc32:	f811 3b02 	ldrb.w	r3, [r1], #2
    dc36:	f3c3 1380 	ubfx	r3, r3, #6, #1
    dc3a:	70bb      	strb	r3, [r7, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    dc3c:	2206      	movs	r2, #6
    dc3e:	1cf8      	adds	r0, r7, #3
    dc40:	f7f2 fb3e 	bl	2c0 <memcpy>
    dc44:	e7e9      	b.n	dc1a <le_advertising_report+0x222>
    dc46:	bf00      	nop
    dc48:	0002da80 	.word	0x0002da80
    dc4c:	2000ba60 	.word	0x2000ba60
    dc50:	2000ba68 	.word	0x2000ba68
    dc54:	20000940 	.word	0x20000940
    dc58:	20000948 	.word	0x20000948
    dc5c:	20000944 	.word	0x20000944

0000dc60 <le_adv_ext_report>:
		  offsetof(struct pdu_adv, payload) + adv->len];
    dc60:	7842      	ldrb	r2, [r0, #1]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    dc62:	7803      	ldrb	r3, [r0, #0]
    dc64:	f003 030f 	and.w	r3, r3, #15
    dc68:	2b07      	cmp	r3, #7
    dc6a:	d000      	beq.n	dc6e <le_adv_ext_report+0xe>
    dc6c:	4770      	bx	lr
    dc6e:	2a00      	cmp	r2, #0
    dc70:	d0fc      	beq.n	dc6c <le_adv_ext_report+0xc>
		ptr = (u8_t *)h + sizeof(*h);
    dc72:	1d01      	adds	r1, r0, #4
		if (!p->ext_hdr_len) {
    dc74:	7883      	ldrb	r3, [r0, #2]
    dc76:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    dc7a:	d0f7      	beq.n	dc6c <le_adv_ext_report+0xc>
		if (h->adv_addr) {
    dc7c:	78c3      	ldrb	r3, [r0, #3]
    dc7e:	f013 0f01 	tst.w	r3, #1
    dc82:	d0f3      	beq.n	dc6c <le_adv_ext_report+0xc>
{
    dc84:	b570      	push	{r4, r5, r6, lr}
    dc86:	b092      	sub	sp, #72	; 0x48
			addr.type = adv->tx_addr;
    dc88:	7803      	ldrb	r3, [r0, #0]
    dc8a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    dc8e:	f88d 3018 	strb.w	r3, [sp, #24]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    dc92:	2206      	movs	r2, #6
    dc94:	f10d 0019 	add.w	r0, sp, #25
    dc98:	f7f2 fb12 	bl	2c0 <memcpy>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    dc9c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    dca0:	2b03      	cmp	r3, #3
    dca2:	d830      	bhi.n	dd06 <le_adv_ext_report+0xa6>
    dca4:	e8df f003 	tbb	[pc, r3]
    dca8:	2a252002 	.word	0x2a252002
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    dcac:	4919      	ldr	r1, [pc, #100]	; (dd14 <le_adv_ext_report+0xb4>)
    dcae:	a808      	add	r0, sp, #32
    dcb0:	f01b fe40 	bl	29934 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    dcb4:	f89d 301e 	ldrb.w	r3, [sp, #30]
    dcb8:	f89d 201d 	ldrb.w	r2, [sp, #29]
    dcbc:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    dcc0:	f89d 001b 	ldrb.w	r0, [sp, #27]
    dcc4:	f89d 401a 	ldrb.w	r4, [sp, #26]
    dcc8:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    dccc:	ae08      	add	r6, sp, #32
    dcce:	9605      	str	r6, [sp, #20]
    dcd0:	9504      	str	r5, [sp, #16]
    dcd2:	9403      	str	r4, [sp, #12]
    dcd4:	9002      	str	r0, [sp, #8]
    dcd6:	9101      	str	r1, [sp, #4]
    dcd8:	9200      	str	r2, [sp, #0]
    dcda:	4a0f      	ldr	r2, [pc, #60]	; (dd18 <le_adv_ext_report+0xb8>)
    dcdc:	211b      	movs	r1, #27
    dcde:	a80b      	add	r0, sp, #44	; 0x2c
    dce0:	f7f5 f90c 	bl	2efc <snprintk>
}
    dce4:	b012      	add	sp, #72	; 0x48
    dce6:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    dce8:	490c      	ldr	r1, [pc, #48]	; (dd1c <le_adv_ext_report+0xbc>)
    dcea:	a808      	add	r0, sp, #32
    dcec:	f01b fe22 	bl	29934 <strcpy>
    dcf0:	e7e0      	b.n	dcb4 <le_adv_ext_report+0x54>
		strcpy(type, "public id");
    dcf2:	490b      	ldr	r1, [pc, #44]	; (dd20 <le_adv_ext_report+0xc0>)
    dcf4:	a808      	add	r0, sp, #32
    dcf6:	f01b fe1d 	bl	29934 <strcpy>
    dcfa:	e7db      	b.n	dcb4 <le_adv_ext_report+0x54>
		strcpy(type, "random id");
    dcfc:	4909      	ldr	r1, [pc, #36]	; (dd24 <le_adv_ext_report+0xc4>)
    dcfe:	a808      	add	r0, sp, #32
    dd00:	f01b fe18 	bl	29934 <strcpy>
    dd04:	e7d6      	b.n	dcb4 <le_adv_ext_report+0x54>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    dd06:	4a08      	ldr	r2, [pc, #32]	; (dd28 <le_adv_ext_report+0xc8>)
    dd08:	210a      	movs	r1, #10
    dd0a:	a808      	add	r0, sp, #32
    dd0c:	f7f5 f8f6 	bl	2efc <snprintk>
    dd10:	e7d0      	b.n	dcb4 <le_adv_ext_report+0x54>
    dd12:	bf00      	nop
    dd14:	0002fa18 	.word	0x0002fa18
    dd18:	0002fa48 	.word	0x0002fa48
    dd1c:	0002fa20 	.word	0x0002fa20
    dd20:	0002fa28 	.word	0x0002fa28
    dd24:	0002fa34 	.word	0x0002fa34
    dd28:	0002fa40 	.word	0x0002fa40

0000dd2c <le_adv_ext_1M_report>:
{
    dd2c:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    dd2e:	2301      	movs	r3, #1
    dd30:	f7ff ff96 	bl	dc60 <le_adv_ext_report>
    dd34:	bd08      	pop	{r3, pc}

0000dd36 <le_adv_ext_coded_report>:
{
    dd36:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    dd38:	2304      	movs	r3, #4
    dd3a:	f7ff ff91 	bl	dc60 <le_adv_ext_report>
    dd3e:	bd08      	pop	{r3, pc}

0000dd40 <le_scan_req_received>:
{
    dd40:	b570      	push	{r4, r5, r6, lr}
    dd42:	b092      	sub	sp, #72	; 0x48
    dd44:	4604      	mov	r4, r0
    dd46:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dd48:	4b33      	ldr	r3, [pc, #204]	; (de18 <le_scan_req_received+0xd8>)
    dd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
    dd4e:	2200      	movs	r2, #0
    dd50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    dd54:	4313      	orrs	r3, r2
    dd56:	d007      	beq.n	dd68 <le_scan_req_received+0x28>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    dd58:	4b30      	ldr	r3, [pc, #192]	; (de1c <le_scan_req_received+0xdc>)
    dd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
    dd5e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    dd62:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dd64:	4313      	orrs	r3, r2
    dd66:	d146      	bne.n	ddf6 <le_scan_req_received+0xb6>
		addr.type = adv->tx_addr;
    dd68:	4621      	mov	r1, r4
    dd6a:	f811 3b02 	ldrb.w	r3, [r1], #2
    dd6e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    dd72:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    dd76:	2206      	movs	r2, #6
    dd78:	f10d 0019 	add.w	r0, sp, #25
    dd7c:	f7f2 faa0 	bl	2c0 <memcpy>
	switch (addr->type) {
    dd80:	f89d 3018 	ldrb.w	r3, [sp, #24]
    dd84:	2b03      	cmp	r3, #3
    dd86:	d830      	bhi.n	ddea <le_scan_req_received+0xaa>
    dd88:	e8df f003 	tbb	[pc, r3]
    dd8c:	2a252002 	.word	0x2a252002
		strcpy(type, "public");
    dd90:	4923      	ldr	r1, [pc, #140]	; (de20 <le_scan_req_received+0xe0>)
    dd92:	a808      	add	r0, sp, #32
    dd94:	f01b fdce 	bl	29934 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    dd98:	f89d 301e 	ldrb.w	r3, [sp, #30]
    dd9c:	f89d 201d 	ldrb.w	r2, [sp, #29]
    dda0:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    dda4:	f89d 001b 	ldrb.w	r0, [sp, #27]
    dda8:	f89d 401a 	ldrb.w	r4, [sp, #26]
    ddac:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    ddb0:	ae08      	add	r6, sp, #32
    ddb2:	9605      	str	r6, [sp, #20]
    ddb4:	9504      	str	r5, [sp, #16]
    ddb6:	9403      	str	r4, [sp, #12]
    ddb8:	9002      	str	r0, [sp, #8]
    ddba:	9101      	str	r1, [sp, #4]
    ddbc:	9200      	str	r2, [sp, #0]
    ddbe:	4a19      	ldr	r2, [pc, #100]	; (de24 <le_scan_req_received+0xe4>)
    ddc0:	211b      	movs	r1, #27
    ddc2:	a80b      	add	r0, sp, #44	; 0x2c
    ddc4:	f7f5 f89a 	bl	2efc <snprintk>
}
    ddc8:	b012      	add	sp, #72	; 0x48
    ddca:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    ddcc:	4916      	ldr	r1, [pc, #88]	; (de28 <le_scan_req_received+0xe8>)
    ddce:	a808      	add	r0, sp, #32
    ddd0:	f01b fdb0 	bl	29934 <strcpy>
    ddd4:	e7e0      	b.n	dd98 <le_scan_req_received+0x58>
		strcpy(type, "public id");
    ddd6:	4915      	ldr	r1, [pc, #84]	; (de2c <le_scan_req_received+0xec>)
    ddd8:	a808      	add	r0, sp, #32
    ddda:	f01b fdab 	bl	29934 <strcpy>
    ddde:	e7db      	b.n	dd98 <le_scan_req_received+0x58>
		strcpy(type, "random id");
    dde0:	4913      	ldr	r1, [pc, #76]	; (de30 <le_scan_req_received+0xf0>)
    dde2:	a808      	add	r0, sp, #32
    dde4:	f01b fda6 	bl	29934 <strcpy>
    dde8:	e7d6      	b.n	dd98 <le_scan_req_received+0x58>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    ddea:	4a12      	ldr	r2, [pc, #72]	; (de34 <le_scan_req_received+0xf4>)
    ddec:	210a      	movs	r1, #10
    ddee:	a808      	add	r0, sp, #32
    ddf0:	f7f5 f884 	bl	2efc <snprintk>
    ddf4:	e7d0      	b.n	dd98 <le_scan_req_received+0x58>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    ddf6:	2208      	movs	r2, #8
    ddf8:	2113      	movs	r1, #19
    ddfa:	f7fe fd41 	bl	c880 <meta_evt>
	sep->handle = 0;
    ddfe:	2300      	movs	r3, #0
    de00:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    de02:	4621      	mov	r1, r4
    de04:	f811 3b02 	ldrb.w	r3, [r1], #2
    de08:	f3c3 1380 	ubfx	r3, r3, #6, #1
    de0c:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    de0e:	2206      	movs	r2, #6
    de10:	3002      	adds	r0, #2
    de12:	f7f2 fa55 	bl	2c0 <memcpy>
    de16:	e7d7      	b.n	ddc8 <le_scan_req_received+0x88>
    de18:	2000ba60 	.word	0x2000ba60
    de1c:	2000ba68 	.word	0x2000ba68
    de20:	0002fa18 	.word	0x0002fa18
    de24:	0002fa48 	.word	0x0002fa48
    de28:	0002fa20 	.word	0x0002fa20
    de2c:	0002fa28 	.word	0x0002fa28
    de30:	0002fa34 	.word	0x0002fa34
    de34:	0002fa40 	.word	0x0002fa40

0000de38 <encode_control>:
{
    de38:	b510      	push	{r4, lr}
    de3a:	460c      	mov	r4, r1
	handle = node_rx->hdr.handle;
    de3c:	88c1      	ldrh	r1, [r0, #6]
	switch (node_rx->hdr.type) {
    de3e:	7903      	ldrb	r3, [r0, #4]
    de40:	3b02      	subs	r3, #2
    de42:	2b0a      	cmp	r3, #10
    de44:	d837      	bhi.n	deb6 <encode_control+0x7e>
    de46:	e8df f003 	tbb	[pc, r3]
    de4a:	0b06      	.short	0x0b06
    de4c:	1e1a1510 	.word	0x1e1a1510
    de50:	2e2a2622 	.word	0x2e2a2622
    de54:	32          	.byte	0x32
    de55:	00          	.byte	0x00
		le_advertising_report(pdu_data, b, buf);
    de56:	4601      	mov	r1, r0
    de58:	4620      	mov	r0, r4
    de5a:	f7ff fdcd 	bl	d9f8 <le_advertising_report>
		break;
    de5e:	bd10      	pop	{r4, pc}
		le_adv_ext_1M_report(pdu_data, b, buf);
    de60:	4601      	mov	r1, r0
    de62:	4620      	mov	r0, r4
    de64:	f7ff ff62 	bl	dd2c <le_adv_ext_1M_report>
		break;
    de68:	bd10      	pop	{r4, pc}
		le_adv_ext_coded_report(pdu_data, b, buf);
    de6a:	4601      	mov	r1, r0
    de6c:	4620      	mov	r0, r4
    de6e:	f7ff ff62 	bl	dd36 <le_adv_ext_coded_report>
		break;
    de72:	bd10      	pop	{r4, pc}
		le_scan_req_received(pdu_data, b, buf);
    de74:	4601      	mov	r1, r0
    de76:	4620      	mov	r0, r4
    de78:	f7ff ff62 	bl	dd40 <le_scan_req_received>
		break;
    de7c:	bd10      	pop	{r4, pc}
		le_conn_complete(pdu_data, handle, buf);
    de7e:	4620      	mov	r0, r4
    de80:	f7f7 f99e 	bl	51c0 <le_conn_complete>
		break;
    de84:	bd10      	pop	{r4, pc}
		disconn_complete(pdu_data, handle, buf);
    de86:	4620      	mov	r0, r4
    de88:	f7fe fd32 	bl	c8f0 <disconn_complete>
		break;
    de8c:	bd10      	pop	{r4, pc}
		le_conn_update_complete(pdu_data, handle, buf);
    de8e:	4620      	mov	r0, r4
    de90:	f7f6 f832 	bl	3ef8 <le_conn_update_complete>
		break;
    de94:	bd10      	pop	{r4, pc}
		enc_refresh_complete(pdu_data, handle, buf);
    de96:	4620      	mov	r0, r4
    de98:	f7fe fd52 	bl	c940 <enc_refresh_complete>
		break;
    de9c:	bd10      	pop	{r4, pc}
		auth_payload_timeout_exp(pdu_data, handle, buf);
    de9e:	4620      	mov	r0, r4
    dea0:	f7fe fd6c 	bl	c97c <auth_payload_timeout_exp>
		break;
    dea4:	bd10      	pop	{r4, pc}
		le_chan_sel_algo(pdu_data, handle, buf);
    dea6:	4620      	mov	r0, r4
    dea8:	f7fe fcfe 	bl	c8a8 <le_chan_sel_algo>
		break;
    deac:	bd10      	pop	{r4, pc}
		le_phy_upd_complete(pdu_data, handle, buf);
    deae:	4620      	mov	r0, r4
    deb0:	f7ff faa6 	bl	d400 <le_phy_upd_complete>
		return;
    deb4:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    deb6:	4040      	eors	r0, r0
    deb8:	f380 8811 	msr	BASEPRI, r0
    debc:	f04f 0004 	mov.w	r0, #4
    dec0:	df02      	svc	2
	...

0000dec4 <hci_cmd_handle>:
{
    dec4:	b510      	push	{r4, lr}
    dec6:	b082      	sub	sp, #8
	struct net_buf *evt = NULL;
    dec8:	2300      	movs	r3, #0
    deca:	9301      	str	r3, [sp, #4]
	if (cmd->len < sizeof(*chdr)) {
    decc:	8983      	ldrh	r3, [r0, #12]
    dece:	2b02      	cmp	r3, #2
    ded0:	d94a      	bls.n	df68 <hci_cmd_handle+0xa4>
	chdr = (void *)cmd->data;
    ded2:	6882      	ldr	r2, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    ded4:	8814      	ldrh	r4, [r2, #0]
    ded6:	4926      	ldr	r1, [pc, #152]	; (df70 <hci_cmd_handle+0xac>)
    ded8:	800c      	strh	r4, [r1, #0]
	if (cmd->len < chdr->param_len) {
    deda:	7892      	ldrb	r2, [r2, #2]
    dedc:	4293      	cmp	r3, r2
    dede:	d345      	bcc.n	df6c <hci_cmd_handle+0xa8>
    dee0:	4604      	mov	r4, r0
	net_buf_pull(cmd, sizeof(*chdr));
    dee2:	2103      	movs	r1, #3
    dee4:	3008      	adds	r0, #8
    dee6:	f00c f972 	bl	1a1ce <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    deea:	4b21      	ldr	r3, [pc, #132]	; (df70 <hci_cmd_handle+0xac>)
    deec:	881b      	ldrh	r3, [r3, #0]
    deee:	f3c3 0009 	ubfx	r0, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    def2:	0a9b      	lsrs	r3, r3, #10
    def4:	2b04      	cmp	r3, #4
    def6:	d01c      	beq.n	df32 <hci_cmd_handle+0x6e>
    def8:	d908      	bls.n	df0c <hci_cmd_handle+0x48>
    defa:	2b08      	cmp	r3, #8
    defc:	d023      	beq.n	df46 <hci_cmd_handle+0x82>
    defe:	2b3f      	cmp	r3, #63	; 0x3f
    df00:	d026      	beq.n	df50 <hci_cmd_handle+0x8c>
    df02:	2b05      	cmp	r3, #5
    df04:	d01a      	beq.n	df3c <hci_cmd_handle+0x78>
		err = -EINVAL;
    df06:	f06f 0015 	mvn.w	r0, #21
    df0a:	e00c      	b.n	df26 <hci_cmd_handle+0x62>
	switch (BT_OGF(_opcode)) {
    df0c:	2b01      	cmp	r3, #1
    df0e:	d006      	beq.n	df1e <hci_cmd_handle+0x5a>
    df10:	2b03      	cmp	r3, #3
    df12:	d1f8      	bne.n	df06 <hci_cmd_handle+0x42>
		err = ctrl_bb_cmd_handle(ocf, cmd, &evt);
    df14:	aa01      	add	r2, sp, #4
    df16:	4621      	mov	r1, r4
    df18:	f7fe fe29 	bl	cb6e <ctrl_bb_cmd_handle>
		break;
    df1c:	e003      	b.n	df26 <hci_cmd_handle+0x62>
		err = link_control_cmd_handle(ocf, cmd, &evt);
    df1e:	aa01      	add	r2, sp, #4
    df20:	4621      	mov	r1, r4
    df22:	f7fe fd9b 	bl	ca5c <link_control_cmd_handle>
	if (err == -EINVAL) {
    df26:	f110 0f16 	cmn.w	r0, #22
    df2a:	d016      	beq.n	df5a <hci_cmd_handle+0x96>
	return evt;
    df2c:	9801      	ldr	r0, [sp, #4]
}
    df2e:	b002      	add	sp, #8
    df30:	bd10      	pop	{r4, pc}
		err = info_cmd_handle(ocf, cmd, &evt);
    df32:	aa01      	add	r2, sp, #4
    df34:	4621      	mov	r1, r4
    df36:	f7fe ffde 	bl	cef6 <info_cmd_handle>
		break;
    df3a:	e7f4      	b.n	df26 <hci_cmd_handle+0x62>
		err = status_cmd_handle(ocf, cmd, &evt);
    df3c:	aa01      	add	r2, sp, #4
    df3e:	4621      	mov	r1, r4
    df40:	f7fe fbcf 	bl	c6e2 <status_cmd_handle>
		break;
    df44:	e7ef      	b.n	df26 <hci_cmd_handle+0x62>
		err = controller_cmd_handle(ocf, cmd, &evt);
    df46:	aa01      	add	r2, sp, #4
    df48:	4621      	mov	r1, r4
    df4a:	f7ff fb8c 	bl	d666 <controller_cmd_handle>
		break;
    df4e:	e7ea      	b.n	df26 <hci_cmd_handle+0x62>
		err = vendor_cmd_handle(ocf, cmd, &evt);
    df50:	aa01      	add	r2, sp, #4
    df52:	4621      	mov	r1, r4
    df54:	f7ff f876 	bl	d044 <vendor_cmd_handle>
		break;
    df58:	e7e5      	b.n	df26 <hci_cmd_handle+0x62>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    df5a:	2101      	movs	r1, #1
    df5c:	a801      	add	r0, sp, #4
    df5e:	f7fe fbf5 	bl	c74c <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    df62:	2301      	movs	r3, #1
    df64:	7003      	strb	r3, [r0, #0]
    df66:	e7e1      	b.n	df2c <hci_cmd_handle+0x68>
		return NULL;
    df68:	2000      	movs	r0, #0
    df6a:	e7e0      	b.n	df2e <hci_cmd_handle+0x6a>
		return NULL;
    df6c:	2000      	movs	r0, #0
    df6e:	e7de      	b.n	df2e <hci_cmd_handle+0x6a>
    df70:	20000938 	.word	0x20000938

0000df74 <hci_acl_handle>:
{
    df74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    df78:	2300      	movs	r3, #0
    df7a:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    df7c:	8983      	ldrh	r3, [r0, #12]
    df7e:	2b03      	cmp	r3, #3
    df80:	d93e      	bls.n	e000 <hci_acl_handle+0x8c>
    df82:	4689      	mov	r9, r1
    df84:	4604      	mov	r4, r0
	acl = (void *)buf->data;
    df86:	f850 3f08 	ldr.w	r3, [r0, #8]!
	len = sys_le16_to_cpu(acl->len);
    df8a:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    df8e:	881e      	ldrh	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    df90:	2104      	movs	r1, #4
    df92:	f00c f91c 	bl	1a1ce <net_buf_simple_pull>
	if (buf->len < len) {
    df96:	89a3      	ldrh	r3, [r4, #12]
    df98:	4598      	cmp	r8, r3
    df9a:	d835      	bhi.n	e008 <hci_acl_handle+0x94>
	flags = bt_acl_flags(handle);
    df9c:	0b37      	lsrs	r7, r6, #12
	handle = bt_acl_handle(handle);
    df9e:	f3c6 060b 	ubfx	r6, r6, #0, #12
	radio_pdu_node_tx = radio_tx_mem_acquire();
    dfa2:	f009 ff1d 	bl	17de0 <radio_tx_mem_acquire>
	if (!radio_pdu_node_tx) {
    dfa6:	4605      	mov	r5, r0
    dfa8:	b140      	cbz	r0, dfbc <hci_acl_handle+0x48>
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    dfaa:	b177      	cbz	r7, dfca <hci_acl_handle+0x56>
    dfac:	2f02      	cmp	r7, #2
    dfae:	d00c      	beq.n	dfca <hci_acl_handle+0x56>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    dfb0:	7903      	ldrb	r3, [r0, #4]
    dfb2:	2201      	movs	r2, #1
    dfb4:	f362 0301 	bfi	r3, r2, #0, #2
    dfb8:	7103      	strb	r3, [r0, #4]
    dfba:	e00b      	b.n	dfd4 <hci_acl_handle+0x60>
		data_buf_overflow(evt);
    dfbc:	4648      	mov	r0, r9
    dfbe:	f7ff fcbf 	bl	d940 <data_buf_overflow>
		return -ENOBUFS;
    dfc2:	f06f 0068 	mvn.w	r0, #104	; 0x68
    dfc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    dfca:	792b      	ldrb	r3, [r5, #4]
    dfcc:	2202      	movs	r2, #2
    dfce:	f362 0301 	bfi	r3, r2, #0, #2
    dfd2:	712b      	strb	r3, [r5, #4]
	pdu_data->len = len;
    dfd4:	f885 8005 	strb.w	r8, [r5, #5]
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);
    dfd8:	4642      	mov	r2, r8
    dfda:	68a1      	ldr	r1, [r4, #8]
    dfdc:	1de8      	adds	r0, r5, #7
    dfde:	f7f2 f96f 	bl	2c0 <memcpy>
	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    dfe2:	4629      	mov	r1, r5
    dfe4:	4630      	mov	r0, r6
    dfe6:	f009 ff0b 	bl	17e00 <radio_tx_mem_enqueue>
    dfea:	b910      	cbnz	r0, dff2 <hci_acl_handle+0x7e>
	return 0;
    dfec:	2000      	movs	r0, #0
}
    dfee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		radio_tx_mem_release(radio_pdu_node_tx);
    dff2:	4628      	mov	r0, r5
    dff4:	f009 fefc 	bl	17df0 <radio_tx_mem_release>
		return -EINVAL;
    dff8:	f06f 0015 	mvn.w	r0, #21
    dffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    e000:	f06f 0015 	mvn.w	r0, #21
    e004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    e008:	f06f 0015 	mvn.w	r0, #21
    e00c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e010 <hci_acl_encode>:
{
    e010:	b570      	push	{r4, r5, r6, lr}
	handle = node_rx->hdr.handle;
    e012:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
    e014:	7a03      	ldrb	r3, [r0, #8]
    e016:	f003 0303 	and.w	r3, r3, #3
    e01a:	3b01      	subs	r3, #1
    e01c:	2b01      	cmp	r3, #1
    e01e:	d81d      	bhi.n	e05c <hci_acl_encode+0x4c>
    e020:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    e022:	f101 0508 	add.w	r5, r1, #8
    e026:	2104      	movs	r1, #4
    e028:	4628      	mov	r0, r5
    e02a:	f00c f883 	bl	1a134 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    e02e:	7a23      	ldrb	r3, [r4, #8]
    e030:	f003 0303 	and.w	r3, r3, #3
    e034:	2b02      	cmp	r3, #2
    e036:	d00e      	beq.n	e056 <hci_acl_encode+0x46>
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    e038:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    e03c:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    e03e:	7a63      	ldrb	r3, [r4, #9]
    e040:	8043      	strh	r3, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
    e042:	7a61      	ldrb	r1, [r4, #9]
    e044:	4628      	mov	r0, r5
    e046:	f00c f875 	bl	1a134 <net_buf_simple_add>
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
    e04a:	7a62      	ldrb	r2, [r4, #9]
    e04c:	f104 010b 	add.w	r1, r4, #11
    e050:	f7f2 f936 	bl	2c0 <memcpy>
}
    e054:	bd70      	pop	{r4, r5, r6, pc}
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    e056:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    e05a:	e7ef      	b.n	e03c <hci_acl_encode+0x2c>
		LL_ASSERT(0);
    e05c:	4040      	eors	r0, r0
    e05e:	f380 8811 	msr	BASEPRI, r0
    e062:	f04f 0004 	mov.w	r0, #4
    e066:	df02      	svc	2

0000e068 <hci_evt_encode>:
{
    e068:	b510      	push	{r4, lr}
	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    e06a:	f100 0408 	add.w	r4, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    e06e:	7903      	ldrb	r3, [r0, #4]
    e070:	2b01      	cmp	r3, #1
    e072:	d004      	beq.n	e07e <hci_evt_encode+0x16>
		encode_control(node_rx, pdu_data, buf);
    e074:	460a      	mov	r2, r1
    e076:	4621      	mov	r1, r4
    e078:	f7ff fede 	bl	de38 <encode_control>
    e07c:	bd10      	pop	{r4, pc}
		encode_data_ctrl(node_rx, pdu_data, buf);
    e07e:	460a      	mov	r2, r1
    e080:	4621      	mov	r1, r4
    e082:	f7ff fc7d 	bl	d980 <encode_data_ctrl>
    e086:	bd10      	pop	{r4, pc}

0000e088 <hci_num_cmplt_encode>:
{
    e088:	b570      	push	{r4, r5, r6, lr}
    e08a:	4606      	mov	r6, r0
    e08c:	460d      	mov	r5, r1
    e08e:	4614      	mov	r4, r2
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    e090:	2205      	movs	r2, #5
    e092:	2113      	movs	r1, #19
    e094:	f7fe fb28 	bl	c6e8 <evt_create>
	ep = net_buf_add(buf, len);
    e098:	2105      	movs	r1, #5
    e09a:	f106 0008 	add.w	r0, r6, #8
    e09e:	f00c f849 	bl	1a134 <net_buf_simple_add>
	ep->num_handles = num_handles;
    e0a2:	2301      	movs	r3, #1
    e0a4:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
    e0a6:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    e0aa:	f8a0 4003 	strh.w	r4, [r0, #3]
    e0ae:	bd70      	pop	{r4, r5, r6, pc}

0000e0b0 <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    e0b0:	7903      	ldrb	r3, [r0, #4]
    e0b2:	2b01      	cmp	r3, #1
    e0b4:	d011      	beq.n	e0da <hci_get_class+0x2a>
		switch (node_rx->hdr.type) {
    e0b6:	3b02      	subs	r3, #2
    e0b8:	2b0a      	cmp	r3, #10
    e0ba:	d80b      	bhi.n	e0d4 <hci_get_class+0x24>
    e0bc:	e8df f003 	tbb	[pc, r3]
    e0c0:	06060606 	.word	0x06060606
    e0c4:	08080816 	.word	0x08080816
    e0c8:	0808      	.short	0x0808
    e0ca:	08          	.byte	0x08
    e0cb:	00          	.byte	0x00
			return HCI_CLASS_EVT_DISCARDABLE;
    e0cc:	2001      	movs	r0, #1
    e0ce:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    e0d0:	2002      	movs	r0, #2
    e0d2:	4770      	bx	lr
			return -1;
    e0d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e0d8:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    e0da:	7a03      	ldrb	r3, [r0, #8]
    e0dc:	f003 0303 	and.w	r3, r3, #3
    e0e0:	2b03      	cmp	r3, #3
    e0e2:	d001      	beq.n	e0e8 <hci_get_class+0x38>
		return HCI_CLASS_ACL_DATA;
    e0e4:	2003      	movs	r0, #3
}
    e0e6:	4770      	bx	lr
		return HCI_CLASS_EVT_CONNECTION;
    e0e8:	2002      	movs	r0, #2
    e0ea:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
    e0ec:	2000      	movs	r0, #0
    e0ee:	4770      	bx	lr

0000e0f0 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    e0f0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    e0f2:	4802      	ldr	r0, [pc, #8]	; (e0fc <_hci_driver_init+0xc>)
    e0f4:	f7f7 fcec 	bl	5ad0 <bt_hci_driver_register>

	return 0;
}
    e0f8:	2000      	movs	r0, #0
    e0fa:	bd08      	pop	{r3, pc}
    e0fc:	0002fa94 	.word	0x0002fa94

0000e100 <acl_handle>:
{
    e100:	b510      	push	{r4, lr}
    e102:	b082      	sub	sp, #8
	err = hci_acl_handle(buf, &evt);
    e104:	a901      	add	r1, sp, #4
    e106:	f7ff ff35 	bl	df74 <hci_acl_handle>
    e10a:	4604      	mov	r4, r0
	if (evt) {
    e10c:	9801      	ldr	r0, [sp, #4]
    e10e:	b108      	cbz	r0, e114 <acl_handle+0x14>
		bt_recv_prio(evt);
    e110:	f7f7 fc8c 	bl	5a2c <bt_recv_prio>
}
    e114:	4620      	mov	r0, r4
    e116:	b002      	add	sp, #8
    e118:	bd10      	pop	{r4, pc}

0000e11a <cmd_handle>:
{
    e11a:	b508      	push	{r3, lr}
	evt = hci_cmd_handle(buf);
    e11c:	f7ff fed2 	bl	dec4 <hci_cmd_handle>
	if (evt) {
    e120:	b108      	cbz	r0, e126 <cmd_handle+0xc>
		bt_recv_prio(evt);
    e122:	f7f7 fc83 	bl	5a2c <bt_recv_prio>
}
    e126:	2000      	movs	r0, #0
    e128:	bd08      	pop	{r3, pc}

0000e12a <hci_driver_send>:
{
    e12a:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
    e12c:	8983      	ldrh	r3, [r0, #12]
    e12e:	b1cb      	cbz	r3, e164 <hci_driver_send+0x3a>
    e130:	4604      	mov	r4, r0
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    e132:	f100 0310 	add.w	r3, r0, #16
    e136:	89c2      	ldrh	r2, [r0, #14]
    e138:	4413      	add	r3, r2
    e13a:	3303      	adds	r3, #3
    e13c:	f023 0303 	bic.w	r3, r3, #3
	return *(u8_t *)net_buf_user_data(buf);
    e140:	781b      	ldrb	r3, [r3, #0]
	switch (type) {
    e142:	b13b      	cbz	r3, e154 <hci_driver_send+0x2a>
    e144:	2b02      	cmp	r3, #2
    e146:	d110      	bne.n	e16a <hci_driver_send+0x40>
		err = acl_handle(buf);
    e148:	f7ff ffda 	bl	e100 <acl_handle>
    e14c:	4605      	mov	r5, r0
	if (!err) {
    e14e:	b12d      	cbz	r5, e15c <hci_driver_send+0x32>
}
    e150:	4628      	mov	r0, r5
    e152:	bd38      	pop	{r3, r4, r5, pc}
		err = cmd_handle(buf);
    e154:	f7ff ffe1 	bl	e11a <cmd_handle>
    e158:	4605      	mov	r5, r0
		break;
    e15a:	e7f8      	b.n	e14e <hci_driver_send+0x24>
		net_buf_unref(buf);
    e15c:	4620      	mov	r0, r4
    e15e:	f00b ff9d 	bl	1a09c <net_buf_unref>
    e162:	e7f5      	b.n	e150 <hci_driver_send+0x26>
		return -EINVAL;
    e164:	f06f 0515 	mvn.w	r5, #21
    e168:	e7f2      	b.n	e150 <hci_driver_send+0x26>
		return -EINVAL;
    e16a:	f06f 0515 	mvn.w	r5, #21
    e16e:	e7ef      	b.n	e150 <hci_driver_send+0x26>

0000e170 <prio_recv_thread>:
{
    e170:	b530      	push	{r4, r5, lr}
    e172:	b087      	sub	sp, #28
    e174:	e00f      	b.n	e196 <prio_recv_thread+0x26>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    e176:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e17a:	2001      	movs	r0, #1
    e17c:	f7f7 fe0c 	bl	5d98 <bt_buf_get_rx>
    e180:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    e182:	4622      	mov	r2, r4
    e184:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    e188:	f7ff ff7e 	bl	e088 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    e18c:	4628      	mov	r0, r5
    e18e:	f7f7 fc4d 	bl	5a2c <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    e192:	f01a f975 	bl	28480 <_impl_k_yield>
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    e196:	f10d 0112 	add.w	r1, sp, #18
    e19a:	a805      	add	r0, sp, #20
    e19c:	f009 fd20 	bl	17be0 <radio_rx_get>
    e1a0:	4604      	mov	r4, r0
    e1a2:	2800      	cmp	r0, #0
    e1a4:	d1e7      	bne.n	e176 <prio_recv_thread+0x6>
		if (node_rx) {
    e1a6:	9b05      	ldr	r3, [sp, #20]
    e1a8:	b133      	cbz	r3, e1b8 <prio_recv_thread+0x48>
			radio_rx_dequeue();
    e1aa:	f00a fa59 	bl	18660 <radio_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    e1ae:	9905      	ldr	r1, [sp, #20]
    e1b0:	481a      	ldr	r0, [pc, #104]	; (e21c <prio_recv_thread+0xac>)
    e1b2:	f019 ff27 	bl	28004 <k_queue_append>
    e1b6:	e7ee      	b.n	e196 <prio_recv_thread+0x26>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    e1b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e1bc:	4818      	ldr	r0, [pc, #96]	; (e220 <prio_recv_thread+0xb0>)
    e1be:	f01a facb 	bl	28758 <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    e1c2:	f01a fb15 	bl	287f0 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
    e1c6:	4b17      	ldr	r3, [pc, #92]	; (e224 <prio_recv_thread+0xb4>)
    e1c8:	681b      	ldr	r3, [r3, #0]
    e1ca:	1ac3      	subs	r3, r0, r3
    e1cc:	f241 3288 	movw	r2, #5000	; 0x1388
    e1d0:	4293      	cmp	r3, r2
    e1d2:	d9e0      	bls.n	e196 <prio_recv_thread+0x26>
	for (i = 0; i < size; i++) {
    e1d4:	2200      	movs	r2, #0
	size_t unused = 0;
    e1d6:	4613      	mov	r3, r2
    e1d8:	e001      	b.n	e1de <prio_recv_thread+0x6e>
			unused++;
    e1da:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    e1dc:	3201      	adds	r2, #1
    e1de:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
    e1e2:	d203      	bcs.n	e1ec <prio_recv_thread+0x7c>
		if ((unsigned char)stack[i] == 0xaa) {
    e1e4:	4910      	ldr	r1, [pc, #64]	; (e228 <prio_recv_thread+0xb8>)
    e1e6:	5c89      	ldrb	r1, [r1, r2]
    e1e8:	29aa      	cmp	r1, #170	; 0xaa
    e1ea:	d0f6      	beq.n	e1da <prio_recv_thread+0x6a>
	pcnt = ((size - unused) * 100) / size;
    e1ec:	f5c3 71e0 	rsb	r1, r3, #448	; 0x1c0
    e1f0:	2264      	movs	r2, #100	; 0x64
    e1f2:	fb02 f201 	mul.w	r2, r2, r1
    e1f6:	0992      	lsrs	r2, r2, #6
    e1f8:	480c      	ldr	r0, [pc, #48]	; (e22c <prio_recv_thread+0xbc>)
    e1fa:	fba0 0202 	umull	r0, r2, r0, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    e1fe:	9202      	str	r2, [sp, #8]
    e200:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    e204:	9201      	str	r2, [sp, #4]
    e206:	9100      	str	r1, [sp, #0]
    e208:	4909      	ldr	r1, [pc, #36]	; (e230 <prio_recv_thread+0xc0>)
    e20a:	480a      	ldr	r0, [pc, #40]	; (e234 <prio_recv_thread+0xc4>)
    e20c:	f7f4 fe68 	bl	2ee0 <printk>
    e210:	f01a faee 	bl	287f0 <_impl_k_uptime_get_32>
			prio_ts = k_uptime_get_32();
    e214:	4b03      	ldr	r3, [pc, #12]	; (e224 <prio_recv_thread+0xb4>)
    e216:	6018      	str	r0, [r3, #0]
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    e218:	e7bd      	b.n	e196 <prio_recv_thread+0x26>
    e21a:	bf00      	nop
    e21c:	2000cfe4 	.word	0x2000cfe4
    e220:	2000cf74 	.word	0x2000cf74
    e224:	200009d0 	.word	0x200009d0
    e228:	20004098 	.word	0x20004098
    e22c:	2492492d 	.word	0x2492492d
    e230:	0002faa4 	.word	0x0002faa4
    e234:	0002f80c 	.word	0x0002f80c

0000e238 <hci_driver_open>:
{
    e238:	b530      	push	{r4, r5, lr}
    e23a:	b087      	sub	sp, #28
	err = ll_init(&sem_prio_recv);
    e23c:	4814      	ldr	r0, [pc, #80]	; (e290 <hci_driver_open+0x58>)
    e23e:	f00a fb37 	bl	188b0 <ll_init>
	if (err) {
    e242:	4605      	mov	r5, r0
    e244:	b110      	cbz	r0, e24c <hci_driver_open+0x14>
}
    e246:	4628      	mov	r0, r5
    e248:	b007      	add	sp, #28
    e24a:	bd30      	pop	{r4, r5, pc}
	hci_init(NULL);
    e24c:	f7f6 fc66 	bl	4b1c <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    e250:	2400      	movs	r4, #0
    e252:	9405      	str	r4, [sp, #20]
    e254:	9404      	str	r4, [sp, #16]
    e256:	f06f 0309 	mvn.w	r3, #9
    e25a:	9303      	str	r3, [sp, #12]
    e25c:	9402      	str	r4, [sp, #8]
    e25e:	9401      	str	r4, [sp, #4]
    e260:	9400      	str	r4, [sp, #0]
    e262:	4b0c      	ldr	r3, [pc, #48]	; (e294 <hci_driver_open+0x5c>)
    e264:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    e268:	490b      	ldr	r1, [pc, #44]	; (e298 <hci_driver_open+0x60>)
    e26a:	480c      	ldr	r0, [pc, #48]	; (e29c <hci_driver_open+0x64>)
    e26c:	f01a fce0 	bl	28c30 <_impl_k_thread_create>
    e270:	9405      	str	r4, [sp, #20]
    e272:	9404      	str	r4, [sp, #16]
    e274:	f06f 0307 	mvn.w	r3, #7
    e278:	9303      	str	r3, [sp, #12]
    e27a:	9402      	str	r4, [sp, #8]
    e27c:	9401      	str	r4, [sp, #4]
    e27e:	9400      	str	r4, [sp, #0]
    e280:	4b07      	ldr	r3, [pc, #28]	; (e2a0 <hci_driver_open+0x68>)
    e282:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e286:	4907      	ldr	r1, [pc, #28]	; (e2a4 <hci_driver_open+0x6c>)
    e288:	4807      	ldr	r0, [pc, #28]	; (e2a8 <hci_driver_open+0x70>)
    e28a:	f01a fcd1 	bl	28c30 <_impl_k_thread_create>
	return 0;
    e28e:	e7da      	b.n	e246 <hci_driver_open+0xe>
    e290:	2000cf74 	.word	0x2000cf74
    e294:	0000e171 	.word	0x0000e171
    e298:	20004098 	.word	0x20004098
    e29c:	200029f4 	.word	0x200029f4
    e2a0:	0000e2ad 	.word	0x0000e2ad
    e2a4:	20004258 	.word	0x20004258
    e2a8:	200028c0 	.word	0x200028c0

0000e2ac <recv_thread>:
{
    e2ac:	b510      	push	{r4, lr}
    e2ae:	b086      	sub	sp, #24
    e2b0:	e029      	b.n	e306 <recv_thread+0x5a>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    e2b2:	2801      	cmp	r0, #1
    e2b4:	d042      	beq.n	e33c <recv_thread+0x90>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    e2b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e2ba:	2001      	movs	r0, #1
    e2bc:	f7f7 fd6c 	bl	5d98 <bt_buf_get_rx>
    e2c0:	4604      	mov	r4, r0
		if (buf) {
    e2c2:	b11c      	cbz	r4, e2cc <recv_thread+0x20>
			hci_evt_encode(node_rx, buf);
    e2c4:	4621      	mov	r1, r4
    e2c6:	9805      	ldr	r0, [sp, #20]
    e2c8:	f7ff fece 	bl	e068 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    e2cc:	2100      	movs	r1, #0
    e2ce:	9b05      	ldr	r3, [sp, #20]
    e2d0:	88d8      	ldrh	r0, [r3, #6]
    e2d2:	f009 fd49 	bl	17d68 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    e2d6:	a806      	add	r0, sp, #24
    e2d8:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    e2dc:	2200      	movs	r2, #0
    e2de:	601a      	str	r2, [r3, #0]
	radio_rx_mem_release(&node_rx);
    e2e0:	f009 fcbe 	bl	17c60 <radio_rx_mem_release>
		if (buf) {
    e2e4:	b124      	cbz	r4, e2f0 <recv_thread+0x44>
			if (buf->len) {
    e2e6:	89a3      	ldrh	r3, [r4, #12]
    e2e8:	b3ab      	cbz	r3, e356 <recv_thread+0xaa>
				bt_recv(buf);
    e2ea:	4620      	mov	r0, r4
    e2ec:	f7f7 fb74 	bl	59d8 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    e2f0:	f01a f8c6 	bl	28480 <_impl_k_yield>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    e2f4:	f01a fa7c 	bl	287f0 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
    e2f8:	4b29      	ldr	r3, [pc, #164]	; (e3a0 <recv_thread+0xf4>)
    e2fa:	681b      	ldr	r3, [r3, #0]
    e2fc:	1ac0      	subs	r0, r0, r3
    e2fe:	f241 3388 	movw	r3, #5000	; 0x1388
    e302:	4298      	cmp	r0, r3
    e304:	d82b      	bhi.n	e35e <recv_thread+0xb2>
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    e306:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e30a:	4826      	ldr	r0, [pc, #152]	; (e3a4 <recv_thread+0xf8>)
    e30c:	f019 fea2 	bl	28054 <k_queue_get>
		if (node_rx && !buf) {
    e310:	b1f8      	cbz	r0, e352 <recv_thread+0xa6>
    e312:	4604      	mov	r4, r0
	s8_t class = hci_get_class(node_rx);
    e314:	f7ff fecc 	bl	e0b0 <hci_get_class>
    e318:	9405      	str	r4, [sp, #20]
	switch (class) {
    e31a:	2800      	cmp	r0, #0
    e31c:	db13      	blt.n	e346 <recv_thread+0x9a>
    e31e:	2802      	cmp	r0, #2
    e320:	ddc7      	ble.n	e2b2 <recv_thread+0x6>
    e322:	2803      	cmp	r0, #3
    e324:	d10f      	bne.n	e346 <recv_thread+0x9a>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    e326:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e32a:	2003      	movs	r0, #3
    e32c:	f7f7 fd34 	bl	5d98 <bt_buf_get_rx>
    e330:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    e332:	4601      	mov	r1, r0
    e334:	9805      	ldr	r0, [sp, #20]
    e336:	f7ff fe6b 	bl	e010 <hci_acl_encode>
    e33a:	e7c7      	b.n	e2cc <recv_thread+0x20>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    e33c:	2100      	movs	r1, #0
    e33e:	f7f7 fd2b 	bl	5d98 <bt_buf_get_rx>
    e342:	4604      	mov	r4, r0
    e344:	e7bd      	b.n	e2c2 <recv_thread+0x16>
		LL_ASSERT(0);
    e346:	4040      	eors	r0, r0
    e348:	f380 8811 	msr	BASEPRI, r0
    e34c:	f04f 0004 	mov.w	r0, #4
    e350:	df02      	svc	2
		struct net_buf *buf = NULL;
    e352:	2400      	movs	r4, #0
    e354:	e7c6      	b.n	e2e4 <recv_thread+0x38>
				net_buf_unref(buf);
    e356:	4620      	mov	r0, r4
    e358:	f00b fea0 	bl	1a09c <net_buf_unref>
    e35c:	e7c8      	b.n	e2f0 <recv_thread+0x44>
	for (i = 0; i < size; i++) {
    e35e:	2200      	movs	r2, #0
	size_t unused = 0;
    e360:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    e362:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    e366:	d206      	bcs.n	e376 <recv_thread+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
    e368:	490f      	ldr	r1, [pc, #60]	; (e3a8 <recv_thread+0xfc>)
    e36a:	5c89      	ldrb	r1, [r1, r2]
    e36c:	29aa      	cmp	r1, #170	; 0xaa
    e36e:	d102      	bne.n	e376 <recv_thread+0xca>
			unused++;
    e370:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    e372:	3201      	adds	r2, #1
    e374:	e7f5      	b.n	e362 <recv_thread+0xb6>
	pcnt = ((size - unused) * 100) / size;
    e376:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
    e37a:	2264      	movs	r2, #100	; 0x64
    e37c:	fb02 f201 	mul.w	r2, r2, r1
    e380:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    e382:	9202      	str	r2, [sp, #8]
    e384:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e388:	9201      	str	r2, [sp, #4]
    e38a:	9100      	str	r1, [sp, #0]
    e38c:	4907      	ldr	r1, [pc, #28]	; (e3ac <recv_thread+0x100>)
    e38e:	4808      	ldr	r0, [pc, #32]	; (e3b0 <recv_thread+0x104>)
    e390:	f7f4 fda6 	bl	2ee0 <printk>
    e394:	f01a fa2c 	bl	287f0 <_impl_k_uptime_get_32>
			rx_ts = k_uptime_get_32();
    e398:	4b01      	ldr	r3, [pc, #4]	; (e3a0 <recv_thread+0xf4>)
    e39a:	6018      	str	r0, [r3, #0]
    e39c:	e7b3      	b.n	e306 <recv_thread+0x5a>
    e39e:	bf00      	nop
    e3a0:	200009d4 	.word	0x200009d4
    e3a4:	2000cfe4 	.word	0x2000cfe4
    e3a8:	20004258 	.word	0x20004258
    e3ac:	0002fabc 	.word	0x0002fabc
    e3b0:	0002f80c 	.word	0x0002f80c

0000e3b4 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static void *mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT][2];

void mayfly_init(void)
{
    e3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    e3b6:	2304      	movs	r3, #4
	while (callee_id--) {
    e3b8:	e01d      	b.n	e3f6 <mayfly_init+0x42>
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    e3ba:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    e3be:	4911      	ldr	r1, [pc, #68]	; (e404 <mayfly_init+0x50>)
    e3c0:	0065      	lsls	r5, r4, #1
    e3c2:	192b      	adds	r3, r5, r4
    e3c4:	009a      	lsls	r2, r3, #2
    e3c6:	0073      	lsls	r3, r6, #1
    e3c8:	eb03 0e06 	add.w	lr, r3, r6
    e3cc:	ea4f 170e 	mov.w	r7, lr, lsl #4
    e3d0:	46be      	mov	lr, r7
    e3d2:	443a      	add	r2, r7
    e3d4:	440a      	add	r2, r1
    e3d6:	4425      	add	r5, r4
    e3d8:	00af      	lsls	r7, r5, #2
    e3da:	4477      	add	r7, lr
    e3dc:	3204      	adds	r2, #4
    e3de:	4439      	add	r1, r7
    e3e0:	4b09      	ldr	r3, [pc, #36]	; (e408 <mayfly_init+0x54>)
    e3e2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    e3e6:	f000 f9f5 	bl	e7d4 <memq_init>
		while (caller_id--) {
    e3ea:	4623      	mov	r3, r4
    e3ec:	1e5c      	subs	r4, r3, #1
    e3ee:	b2e4      	uxtb	r4, r4
    e3f0:	2b00      	cmp	r3, #0
    e3f2:	d1e2      	bne.n	e3ba <mayfly_init+0x6>
	while (callee_id--) {
    e3f4:	4633      	mov	r3, r6
    e3f6:	1e5e      	subs	r6, r3, #1
    e3f8:	b2f6      	uxtb	r6, r6
    e3fa:	b10b      	cbz	r3, e400 <mayfly_init+0x4c>
    e3fc:	2304      	movs	r3, #4
    e3fe:	e7f5      	b.n	e3ec <mayfly_init+0x38>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    e400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e402:	bf00      	nop
    e404:	20000a58 	.word	0x20000a58
    e408:	200009d8 	.word	0x200009d8

0000e40c <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    e40c:	b570      	push	{r4, r5, r6, lr}
	if (enable) {
    e40e:	b1ea      	cbz	r2, e44c <mayfly_enable+0x40>
    e410:	4615      	mov	r5, r2
		if (mft[callee_id][caller_id].enable_req ==
    e412:	0042      	lsls	r2, r0, #1
    e414:	4402      	add	r2, r0
    e416:	0093      	lsls	r3, r2, #2
    e418:	004c      	lsls	r4, r1, #1
    e41a:	440c      	add	r4, r1
    e41c:	0122      	lsls	r2, r4, #4
    e41e:	441a      	add	r2, r3
    e420:	4b18      	ldr	r3, [pc, #96]	; (e484 <mayfly_enable+0x78>)
    e422:	4413      	add	r3, r2
    e424:	7a1a      	ldrb	r2, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    e426:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req ==
    e428:	429a      	cmp	r2, r3
    e42a:	d003      	beq.n	e434 <mayfly_enable+0x28>
			mft[callee_id][caller_id].enable_req++;
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    e42c:	462a      	mov	r2, r5
    e42e:	f00a f9e6 	bl	187fe <mayfly_enable_cb>
    e432:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].enable_req++;
    e434:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    e438:	00a3      	lsls	r3, r4, #2
    e43a:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    e43e:	0134      	lsls	r4, r6, #4
    e440:	4423      	add	r3, r4
    e442:	4c10      	ldr	r4, [pc, #64]	; (e484 <mayfly_enable+0x78>)
    e444:	4423      	add	r3, r4
    e446:	3201      	adds	r2, #1
    e448:	721a      	strb	r2, [r3, #8]
    e44a:	e7ef      	b.n	e42c <mayfly_enable+0x20>
	} else {
		if (mft[callee_id][caller_id].disable_req ==
    e44c:	0042      	lsls	r2, r0, #1
    e44e:	4402      	add	r2, r0
    e450:	0093      	lsls	r3, r2, #2
    e452:	004c      	lsls	r4, r1, #1
    e454:	440c      	add	r4, r1
    e456:	0122      	lsls	r2, r4, #4
    e458:	441a      	add	r2, r3
    e45a:	4b0a      	ldr	r3, [pc, #40]	; (e484 <mayfly_enable+0x78>)
    e45c:	4413      	add	r3, r2
    e45e:	7a9a      	ldrb	r2, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    e460:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req ==
    e462:	429a      	cmp	r2, r3
    e464:	d000      	beq.n	e468 <mayfly_enable+0x5c>
    e466:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].disable_req++;
    e468:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    e46c:	00a3      	lsls	r3, r4, #2
    e46e:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    e472:	012c      	lsls	r4, r5, #4
    e474:	4423      	add	r3, r4
    e476:	4c03      	ldr	r4, [pc, #12]	; (e484 <mayfly_enable+0x78>)
    e478:	4423      	add	r3, r4
    e47a:	3201      	adds	r2, #1
    e47c:	729a      	strb	r2, [r3, #10]

			mayfly_pend(caller_id, callee_id);
    e47e:	f00a f9f5 	bl	1886c <mayfly_pend>
		}
	}
}
    e482:	e7f0      	b.n	e466 <mayfly_enable+0x5a>
    e484:	20000a58 	.word	0x20000a58

0000e488 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    e488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e48a:	4605      	mov	r5, r0
    e48c:	460e      	mov	r6, r1
    e48e:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    e490:	b19a      	cbz	r2, e4ba <mayfly_enqueue+0x32>
    e492:	2101      	movs	r1, #1
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e494:	b2c9      	uxtb	r1, r1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    e496:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    e498:	7823      	ldrb	r3, [r4, #0]
    e49a:	1a9b      	subs	r3, r3, r2
	if (state != 0) {
    e49c:	f013 0303 	ands.w	r3, r3, #3
    e4a0:	d032      	beq.n	e508 <mayfly_enqueue+0x80>
		if (chain) {
    e4a2:	b371      	cbz	r1, e502 <mayfly_enqueue+0x7a>
			if (state != 1) {
    e4a4:	2b01      	cmp	r3, #1
    e4a6:	d04c      	beq.n	e542 <mayfly_enqueue+0xba>
				/* mark as ready in queue */
				m->_req = ack + 1;
    e4a8:	3201      	adds	r2, #1
    e4aa:	b2d2      	uxtb	r2, r2
    e4ac:	7022      	strb	r2, [r4, #0]

				/* pend the callee for execution */
				mayfly_pend(caller_id, callee_id);
    e4ae:	4631      	mov	r1, r6
    e4b0:	4628      	mov	r0, r5
    e4b2:	f00a f9db 	bl	1886c <mayfly_pend>

				return 0;
    e4b6:	2000      	movs	r0, #0
    e4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e4ba:	f00a f9c4 	bl	18846 <mayfly_prio_is_equal>
    e4be:	b908      	cbnz	r0, e4c4 <mayfly_enqueue+0x3c>
		!mayfly_is_enabled(caller_id, callee_id) ||
    e4c0:	2101      	movs	r1, #1
    e4c2:	e7e7      	b.n	e494 <mayfly_enqueue+0xc>
    e4c4:	4631      	mov	r1, r6
    e4c6:	4628      	mov	r0, r5
    e4c8:	f00a f9ab 	bl	18822 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e4cc:	b1b8      	cbz	r0, e4fe <mayfly_enqueue+0x76>
		(mft[callee_id][caller_id].disable_req !=
    e4ce:	481e      	ldr	r0, [pc, #120]	; (e548 <mayfly_enqueue+0xc0>)
    e4d0:	0069      	lsls	r1, r5, #1
    e4d2:	194a      	adds	r2, r1, r5
    e4d4:	0093      	lsls	r3, r2, #2
    e4d6:	0072      	lsls	r2, r6, #1
    e4d8:	eb02 0e06 	add.w	lr, r2, r6
    e4dc:	ea4f 170e 	mov.w	r7, lr, lsl #4
    e4e0:	46be      	mov	lr, r7
    e4e2:	443b      	add	r3, r7
    e4e4:	4403      	add	r3, r0
    e4e6:	7a9f      	ldrb	r7, [r3, #10]
		 mft[callee_id][caller_id].disable_ack);
    e4e8:	194b      	adds	r3, r1, r5
    e4ea:	0099      	lsls	r1, r3, #2
    e4ec:	4471      	add	r1, lr
    e4ee:	4408      	add	r0, r1
    e4f0:	7ac3      	ldrb	r3, [r0, #11]
		!mayfly_is_enabled(caller_id, callee_id) ||
    e4f2:	429f      	cmp	r7, r3
    e4f4:	d001      	beq.n	e4fa <mayfly_enqueue+0x72>
    e4f6:	2101      	movs	r1, #1
    e4f8:	e7cc      	b.n	e494 <mayfly_enqueue+0xc>
    e4fa:	2100      	movs	r1, #0
    e4fc:	e7ca      	b.n	e494 <mayfly_enqueue+0xc>
    e4fe:	2101      	movs	r1, #1
    e500:	e7c8      	b.n	e494 <mayfly_enqueue+0xc>
			/* already ready */
			return 1;
		}

		/* mark as done in queue, and fall thru */
		m->_req = ack + 2;
    e502:	1c93      	adds	r3, r2, #2
    e504:	b2db      	uxtb	r3, r3
    e506:	7023      	strb	r3, [r4, #0]
	}

	/* handle mayfly(s) that can be inline */
	if (!chain) {
    e508:	b1b1      	cbz	r1, e538 <mayfly_enqueue+0xb0>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    e50a:	3201      	adds	r2, #1
    e50c:	b2d2      	uxtb	r2, r2
    e50e:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m, m->_link, &mft[callee_id][caller_id].tail);
    e510:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    e514:	009a      	lsls	r2, r3, #2
    e516:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    e51a:	010b      	lsls	r3, r1, #4
    e51c:	441a      	add	r2, r3
    e51e:	4b0a      	ldr	r3, [pc, #40]	; (e548 <mayfly_enqueue+0xc0>)
    e520:	441a      	add	r2, r3
    e522:	3204      	adds	r2, #4
    e524:	6861      	ldr	r1, [r4, #4]
    e526:	4620      	mov	r0, r4
    e528:	f000 f957 	bl	e7da <memq_enqueue>

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    e52c:	4631      	mov	r1, r6
    e52e:	4628      	mov	r0, r5
    e530:	f00a f99c 	bl	1886c <mayfly_pend>

	return 0;
    e534:	2000      	movs	r0, #0
    e536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		m->fp(m->param);
    e538:	68e3      	ldr	r3, [r4, #12]
    e53a:	68a0      	ldr	r0, [r4, #8]
    e53c:	4798      	blx	r3
		return 0;
    e53e:	2000      	movs	r0, #0
    e540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return 1;
    e542:	2001      	movs	r0, #1
}
    e544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e546:	bf00      	nop
    e548:	20000a58 	.word	0x20000a58

0000e54c <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    e54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e550:	b085      	sub	sp, #20
    e552:	4682      	mov	sl, r0
	u8_t disable = 0;
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    e554:	2304      	movs	r3, #4
	u8_t enable = 0;
    e556:	f04f 0b00 	mov.w	fp, #0
	u8_t disable = 0;
    e55a:	f8cd b004 	str.w	fp, [sp, #4]
	while (caller_id--) {
    e55e:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    e562:	fa5f f989 	uxtb.w	r9, r9
    e566:	2b00      	cmp	r3, #0
    e568:	f000 809b 	beq.w	e6a2 <mayfly_run+0x156>
		void *link;
		struct mayfly *m = 0;
    e56c:	aa04      	add	r2, sp, #16
    e56e:	2300      	movs	r3, #0
    e570:	f842 3d04 	str.w	r3, [r2, #-4]!

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    e574:	4657      	mov	r7, sl
    e576:	464e      	mov	r6, r9
    e578:	4850      	ldr	r0, [pc, #320]	; (e6bc <mayfly_run+0x170>)
    e57a:	ea4f 0149 	mov.w	r1, r9, lsl #1
    e57e:	4449      	add	r1, r9
    e580:	008b      	lsls	r3, r1, #2
    e582:	ea4f 014a 	mov.w	r1, sl, lsl #1
    e586:	4451      	add	r1, sl
    e588:	010c      	lsls	r4, r1, #4
    e58a:	4423      	add	r3, r4
    e58c:	18c4      	adds	r4, r0, r3
    e58e:	58c1      	ldr	r1, [r0, r3]
    e590:	6860      	ldr	r0, [r4, #4]
    e592:	f000 f929 	bl	e7e8 <memq_peek>
    e596:	4680      	mov	r8, r0
				 mft[callee_id][caller_id].head,
				 (void **)&m);
		while (link) {
    e598:	e017      	b.n	e5ca <mayfly_run+0x7e>
			/* execute work if ready */
			req = m->_req;
			state = (req - m->_ack) & 0x03;
			if (state == 1) {
				/* mark mayfly as ran */
				m->_ack--;
    e59a:	3a01      	subs	r2, #1
    e59c:	705a      	strb	r2, [r3, #1]

				/* call the mayfly function */
				m->fp(m->param);
    e59e:	9b03      	ldr	r3, [sp, #12]
    e5a0:	68da      	ldr	r2, [r3, #12]
    e5a2:	6898      	ldr	r0, [r3, #8]
    e5a4:	4790      	blx	r2
    e5a6:	e01b      	b.n	e5e0 <mayfly_run+0x94>
				/* reset mayfly state to idle */
				m->_ack = req;
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    e5a8:	4944      	ldr	r1, [pc, #272]	; (e6bc <mayfly_run+0x170>)
    e5aa:	0072      	lsls	r2, r6, #1
    e5ac:	4432      	add	r2, r6
    e5ae:	0093      	lsls	r3, r2, #2
    e5b0:	007a      	lsls	r2, r7, #1
    e5b2:	443a      	add	r2, r7
    e5b4:	0110      	lsls	r0, r2, #4
    e5b6:	4403      	add	r3, r0
    e5b8:	18c8      	adds	r0, r1, r3
    e5ba:	aa03      	add	r2, sp, #12
    e5bc:	58c9      	ldr	r1, [r1, r3]
    e5be:	6840      	ldr	r0, [r0, #4]
    e5c0:	f000 f912 	bl	e7e8 <memq_peek>
    e5c4:	4680      	mov	r8, r0
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    e5c6:	2c01      	cmp	r4, #1
    e5c8:	d026      	beq.n	e618 <mayfly_run+0xcc>
		while (link) {
    e5ca:	f1b8 0f00 	cmp.w	r8, #0
    e5ce:	d030      	beq.n	e632 <mayfly_run+0xe6>
			req = m->_req;
    e5d0:	9b03      	ldr	r3, [sp, #12]
    e5d2:	781c      	ldrb	r4, [r3, #0]
			state = (req - m->_ack) & 0x03;
    e5d4:	785a      	ldrb	r2, [r3, #1]
    e5d6:	1aa4      	subs	r4, r4, r2
    e5d8:	f004 0403 	and.w	r4, r4, #3
			if (state == 1) {
    e5dc:	2c01      	cmp	r4, #1
    e5de:	d0dc      	beq.n	e59a <mayfly_run+0x4e>
			req = m->_req;
    e5e0:	9b03      	ldr	r3, [sp, #12]
    e5e2:	781d      	ldrb	r5, [r3, #0]
    e5e4:	b2ed      	uxtb	r5, r5
			if (((req - m->_ack) & 0x03) != 1) {
    e5e6:	785b      	ldrb	r3, [r3, #1]
    e5e8:	1aeb      	subs	r3, r5, r3
    e5ea:	f003 0303 	and.w	r3, r3, #3
    e5ee:	2b01      	cmp	r3, #1
    e5f0:	d0da      	beq.n	e5a8 <mayfly_run+0x5c>
				memq_dequeue(mft[callee_id][caller_id].tail,
    e5f2:	0072      	lsls	r2, r6, #1
    e5f4:	4432      	add	r2, r6
    e5f6:	0093      	lsls	r3, r2, #2
    e5f8:	0079      	lsls	r1, r7, #1
    e5fa:	4439      	add	r1, r7
    e5fc:	010a      	lsls	r2, r1, #4
    e5fe:	441a      	add	r2, r3
    e600:	4b2e      	ldr	r3, [pc, #184]	; (e6bc <mayfly_run+0x170>)
    e602:	4413      	add	r3, r2
    e604:	2200      	movs	r2, #0
    e606:	4619      	mov	r1, r3
    e608:	6858      	ldr	r0, [r3, #4]
    e60a:	f000 f8f6 	bl	e7fa <memq_dequeue>
				m->_link = link;
    e60e:	9b03      	ldr	r3, [sp, #12]
    e610:	f8c3 8004 	str.w	r8, [r3, #4]
				m->_ack = req;
    e614:	705d      	strb	r5, [r3, #1]
    e616:	e7c7      	b.n	e5a8 <mayfly_run+0x5c>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    e618:	f1b9 0f00 	cmp.w	r9, #0
    e61c:	d006      	beq.n	e62c <mayfly_run+0xe0>
					mayfly_pend(callee_id, callee_id);
    e61e:	4651      	mov	r1, sl
    e620:	4650      	mov	r0, sl
    e622:	f00a f923 	bl	1886c <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
    e626:	b005      	add	sp, #20
    e628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (caller_id || link) {
    e62c:	2800      	cmp	r0, #0
    e62e:	d0cc      	beq.n	e5ca <mayfly_run+0x7e>
    e630:	e7f5      	b.n	e61e <mayfly_run+0xd2>
		if (mft[callee_id][caller_id].disable_req !=
    e632:	ea4f 0249 	mov.w	r2, r9, lsl #1
    e636:	444a      	add	r2, r9
    e638:	0093      	lsls	r3, r2, #2
    e63a:	ea4f 014a 	mov.w	r1, sl, lsl #1
    e63e:	4451      	add	r1, sl
    e640:	010a      	lsls	r2, r1, #4
    e642:	441a      	add	r2, r3
    e644:	4b1d      	ldr	r3, [pc, #116]	; (e6bc <mayfly_run+0x170>)
    e646:	4413      	add	r3, r2
    e648:	7a99      	ldrb	r1, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    e64a:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req !=
    e64c:	4299      	cmp	r1, r3
    e64e:	d00b      	beq.n	e668 <mayfly_run+0x11c>
			mft[callee_id][caller_id].disable_ack =
    e650:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    e654:	0093      	lsls	r3, r2, #2
    e656:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    e65a:	0102      	lsls	r2, r0, #4
    e65c:	4413      	add	r3, r2
    e65e:	4a17      	ldr	r2, [pc, #92]	; (e6bc <mayfly_run+0x170>)
    e660:	4413      	add	r3, r2
    e662:	72d9      	strb	r1, [r3, #11]
			disable = 1;
    e664:	2301      	movs	r3, #1
    e666:	9301      	str	r3, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    e668:	ea4f 0249 	mov.w	r2, r9, lsl #1
    e66c:	444a      	add	r2, r9
    e66e:	0093      	lsls	r3, r2, #2
    e670:	ea4f 014a 	mov.w	r1, sl, lsl #1
    e674:	4451      	add	r1, sl
    e676:	010a      	lsls	r2, r1, #4
    e678:	441a      	add	r2, r3
    e67a:	4b10      	ldr	r3, [pc, #64]	; (e6bc <mayfly_run+0x170>)
    e67c:	4413      	add	r3, r2
    e67e:	7a19      	ldrb	r1, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    e680:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req !=
    e682:	4299      	cmp	r1, r3
    e684:	d00b      	beq.n	e69e <mayfly_run+0x152>
			mft[callee_id][caller_id].enable_ack =
    e686:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    e68a:	0093      	lsls	r3, r2, #2
    e68c:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    e690:	0102      	lsls	r2, r0, #4
    e692:	4413      	add	r3, r2
    e694:	4a09      	ldr	r2, [pc, #36]	; (e6bc <mayfly_run+0x170>)
    e696:	4413      	add	r3, r2
    e698:	7259      	strb	r1, [r3, #9]
			enable = 1;
    e69a:	f04f 0b01 	mov.w	fp, #1
	while (caller_id--) {
    e69e:	464b      	mov	r3, r9
    e6a0:	e75d      	b.n	e55e <mayfly_run+0x12>
	if (disable && !enable) {
    e6a2:	9b01      	ldr	r3, [sp, #4]
    e6a4:	2b00      	cmp	r3, #0
    e6a6:	d0be      	beq.n	e626 <mayfly_run+0xda>
    e6a8:	f1bb 0f00 	cmp.w	fp, #0
    e6ac:	d1bb      	bne.n	e626 <mayfly_run+0xda>
		mayfly_enable_cb(callee_id, callee_id, 0);
    e6ae:	2200      	movs	r2, #0
    e6b0:	4651      	mov	r1, sl
    e6b2:	4650      	mov	r0, sl
    e6b4:	f00a f8a3 	bl	187fe <mayfly_enable_cb>
    e6b8:	e7b5      	b.n	e626 <mayfly_run+0xda>
    e6ba:	bf00      	nop
    e6bc:	20000a58 	.word	0x20000a58

0000e6c0 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    e6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e6c2:	b083      	sub	sp, #12
    e6c4:	4607      	mov	r7, r0
    e6c6:	4608      	mov	r0, r1
	*mem_head = mem_pool;
    e6c8:	601f      	str	r7, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    e6ca:	1dfb      	adds	r3, r7, #7
    e6cc:	f023 0303 	bic.w	r3, r3, #3
    e6d0:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    e6d2:	460e      	mov	r6, r1
    e6d4:	3a01      	subs	r2, #1
    e6d6:	b295      	uxth	r5, r2
    e6d8:	2204      	movs	r2, #4
    e6da:	2100      	movs	r1, #0
    e6dc:	fb05 7000 	mla	r0, r5, r0, r7
    e6e0:	f01a fffa 	bl	296d8 <memset>
	       sizeof(mem_pool));
	while (mem_count--) {
    e6e4:	e00b      	b.n	e6fe <mem_init+0x3e>
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
    e6e6:	fb04 6306 	mla	r3, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    e6ea:	443b      	add	r3, r7
    e6ec:	a902      	add	r1, sp, #8
    e6ee:	f841 3d04 	str.w	r3, [r1, #-4]!
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    e6f2:	2204      	movs	r2, #4
    e6f4:	fb04 7006 	mla	r0, r4, r6, r7
    e6f8:	f7f1 fde2 	bl	2c0 <memcpy>
	while (mem_count--) {
    e6fc:	4625      	mov	r5, r4
    e6fe:	1e6c      	subs	r4, r5, #1
    e700:	b2a4      	uxth	r4, r4
    e702:	2d00      	cmp	r5, #0
    e704:	d1ef      	bne.n	e6e6 <mem_init+0x26>
		       (void *)&next, sizeof(next));
	}
}
    e706:	b003      	add	sp, #12
    e708:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e70a <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    e70a:	b570      	push	{r4, r5, r6, lr}
    e70c:	b082      	sub	sp, #8
	if (*mem_head) {
    e70e:	6805      	ldr	r5, [r0, #0]
    e710:	b1a5      	cbz	r5, e73c <mem_acquire+0x32>
    e712:	4606      	mov	r6, r0
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    e714:	1deb      	adds	r3, r5, #7
    e716:	f023 0303 	bic.w	r3, r3, #3
    e71a:	881b      	ldrh	r3, [r3, #0]
					       sizeof(mem_head)));
		free_count--;
    e71c:	3b01      	subs	r3, #1
    e71e:	b29c      	uxth	r4, r3

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    e720:	2204      	movs	r2, #4
    e722:	4629      	mov	r1, r5
    e724:	eb0d 0002 	add.w	r0, sp, r2
    e728:	f7f1 fdca 	bl	2c0 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    e72c:	9b01      	ldr	r3, [sp, #4]
    e72e:	b11b      	cbz	r3, e738 <mem_acquire+0x2e>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    e730:	3307      	adds	r3, #7
    e732:	f023 0303 	bic.w	r3, r3, #3
    e736:	801c      	strh	r4, [r3, #0]
				free_count;
		}

		*mem_head = head;
    e738:	9b01      	ldr	r3, [sp, #4]
    e73a:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    e73c:	4628      	mov	r0, r5
    e73e:	b002      	add	sp, #8
    e740:	bd70      	pop	{r4, r5, r6, pc}

0000e742 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    e742:	b570      	push	{r4, r5, r6, lr}
    e744:	4606      	mov	r6, r0
    e746:	460d      	mov	r5, r1
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    e748:	680b      	ldr	r3, [r1, #0]
    e74a:	b183      	cbz	r3, e76e <mem_release+0x2c>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    e74c:	3307      	adds	r3, #7
    e74e:	f023 0303 	bic.w	r3, r3, #3
    e752:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;
    e754:	3401      	adds	r4, #1
    e756:	b2a4      	uxth	r4, r4

	memcpy(mem, mem_head, sizeof(mem));
    e758:	2204      	movs	r2, #4
    e75a:	4629      	mov	r1, r5
    e75c:	4630      	mov	r0, r6
    e75e:	f7f1 fdaf 	bl	2c0 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    e762:	1df3      	adds	r3, r6, #7
    e764:	f023 0303 	bic.w	r3, r3, #3
    e768:	801c      	strh	r4, [r3, #0]

	*mem_head = mem;
    e76a:	602e      	str	r6, [r5, #0]
    e76c:	bd70      	pop	{r4, r5, r6, pc}
	u16_t free_count = 0;
    e76e:	2400      	movs	r4, #0
    e770:	e7f0      	b.n	e754 <mem_release+0x12>

0000e772 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    e772:	4603      	mov	r3, r0
    e774:	b120      	cbz	r0, e780 <mem_free_count_get+0xe>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    e776:	3307      	adds	r3, #7
    e778:	f023 0303 	bic.w	r3, r3, #3
    e77c:	8818      	ldrh	r0, [r3, #0]
    e77e:	4770      	bx	lr
	u16_t free_count = 0;
    e780:	2000      	movs	r0, #0
					       sizeof(mem_head)));
	}

	return free_count;
}
    e782:	4770      	bx	lr

0000e784 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    e784:	fb02 0001 	mla	r0, r2, r1, r0
    e788:	4770      	bx	lr

0000e78a <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    e78a:	1a40      	subs	r0, r0, r1
    e78c:	b280      	uxth	r0, r0
}
    e78e:	fbb0 f0f2 	udiv	r0, r0, r2
    e792:	4770      	bx	lr

0000e794 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
	src += len;
    e794:	4411      	add	r1, r2
	while (len--) {
    e796:	e004      	b.n	e7a2 <mem_rcopy+0xe>
		*dst++ = *--src;
    e798:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    e79c:	7002      	strb	r2, [r0, #0]
	while (len--) {
    e79e:	461a      	mov	r2, r3
		*dst++ = *--src;
    e7a0:	3001      	adds	r0, #1
	while (len--) {
    e7a2:	1e53      	subs	r3, r2, #1
    e7a4:	b29b      	uxth	r3, r3
    e7a6:	2a00      	cmp	r2, #0
    e7a8:	d1f6      	bne.n	e798 <mem_rcopy+0x4>
	}
}
    e7aa:	4770      	bx	lr

0000e7ac <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
	while (len--) {
    e7ac:	1e4b      	subs	r3, r1, #1
    e7ae:	b29b      	uxth	r3, r3
    e7b0:	b171      	cbz	r1, e7d0 <mem_nz+0x24>
{
    e7b2:	b410      	push	{r4}
		if (*src++) {
    e7b4:	1c44      	adds	r4, r0, #1
    e7b6:	7802      	ldrb	r2, [r0, #0]
	while (len--) {
    e7b8:	4619      	mov	r1, r3
		if (*src++) {
    e7ba:	b93a      	cbnz	r2, e7cc <mem_nz+0x20>
    e7bc:	4620      	mov	r0, r4
	while (len--) {
    e7be:	3b01      	subs	r3, #1
    e7c0:	b29b      	uxth	r3, r3
    e7c2:	2900      	cmp	r1, #0
    e7c4:	d1f6      	bne.n	e7b4 <mem_nz+0x8>
			return 1;
		}
	}

	return 0;
    e7c6:	2000      	movs	r0, #0
}
    e7c8:	bc10      	pop	{r4}
    e7ca:	4770      	bx	lr
			return 1;
    e7cc:	2001      	movs	r0, #1
    e7ce:	e7fb      	b.n	e7c8 <mem_nz+0x1c>
	return 0;
    e7d0:	2000      	movs	r0, #0
}
    e7d2:	4770      	bx	lr

0000e7d4 <memq_init>:
inline void *memq_peek(void *tail, void *head, void **mem);

void *memq_init(void *link, void **head, void **tail)
{
	/* head and tail pointer to the initial link node */
	*head = *tail = link;
    e7d4:	6010      	str	r0, [r2, #0]
    e7d6:	6008      	str	r0, [r1, #0]

	return link;
}
    e7d8:	4770      	bx	lr

0000e7da <memq_enqueue>:

void *memq_enqueue(void *mem, void *link, void **tail)
{
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;
    e7da:	6813      	ldr	r3, [r2, #0]
    e7dc:	6019      	str	r1, [r3, #0]

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;
    e7de:	6813      	ldr	r3, [r2, #0]
    e7e0:	6058      	str	r0, [r3, #4]

	/* increment the tail! */
	*tail = link;
    e7e2:	6011      	str	r1, [r2, #0]

	return link;
}
    e7e4:	4608      	mov	r0, r1
    e7e6:	4770      	bx	lr

0000e7e8 <memq_peek>:
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    e7e8:	4281      	cmp	r1, r0
    e7ea:	d004      	beq.n	e7f6 <memq_peek+0xe>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    e7ec:	b10a      	cbz	r2, e7f2 <memq_peek+0xa>
		*mem = *((void **)link + 1);
    e7ee:	684b      	ldr	r3, [r1, #4]
    e7f0:	6013      	str	r3, [r2, #0]
	}

	return link;
}
    e7f2:	4608      	mov	r0, r1
    e7f4:	4770      	bx	lr
		return 0;
    e7f6:	2100      	movs	r1, #0
    e7f8:	e7fb      	b.n	e7f2 <memq_peek+0xa>

0000e7fa <memq_dequeue>:
void *memq_dequeue(void *tail, void **head, void **mem)
{
	void *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);
    e7fa:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    e7fc:	4283      	cmp	r3, r0
    e7fe:	d006      	beq.n	e80e <memq_dequeue+0x14>
	if (mem) {
    e800:	b10a      	cbz	r2, e806 <memq_dequeue+0xc>
		*mem = *((void **)link + 1);
    e802:	6858      	ldr	r0, [r3, #4]
    e804:	6010      	str	r0, [r2, #0]

	/* increment the head to next link node */
	*head = *((void **)link);
    e806:	681a      	ldr	r2, [r3, #0]
    e808:	600a      	str	r2, [r1, #0]

	return link;
}
    e80a:	4618      	mov	r0, r3
    e80c:	4770      	bx	lr
		return 0;
    e80e:	2300      	movs	r3, #0
    e810:	e7f9      	b.n	e806 <memq_dequeue+0xc>

0000e812 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    e812:	b410      	push	{r4}
	u8_t one_count = 0;
    e814:	2200      	movs	r2, #0

	while (octets_len--) {
    e816:	e008      	b.n	e82a <util_ones_count_get+0x18>
		u8_t bite;

		bite = *octets;
		while (bite) {
			bite &= (bite - 1);
    e818:	1e59      	subs	r1, r3, #1
    e81a:	b249      	sxtb	r1, r1
    e81c:	400b      	ands	r3, r1
			one_count++;
    e81e:	3201      	adds	r2, #1
    e820:	b2d2      	uxtb	r2, r2
		while (bite) {
    e822:	2b00      	cmp	r3, #0
    e824:	d1f8      	bne.n	e818 <util_ones_count_get+0x6>
		}
		octets++;
    e826:	3001      	adds	r0, #1
	while (octets_len--) {
    e828:	4621      	mov	r1, r4
    e82a:	1e4b      	subs	r3, r1, #1
    e82c:	b2dc      	uxtb	r4, r3
    e82e:	b109      	cbz	r1, e834 <util_ones_count_get+0x22>
		bite = *octets;
    e830:	7803      	ldrb	r3, [r0, #0]
		while (bite) {
    e832:	e7f6      	b.n	e822 <util_ones_count_get+0x10>
	}

	return one_count;
}
    e834:	4610      	mov	r0, r2
    e836:	bc10      	pop	{r4}
    e838:	4770      	bx	lr
	...

0000e83c <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    e83c:	4b05      	ldr	r3, [pc, #20]	; (e854 <cntr_init+0x18>)
    e83e:	2200      	movs	r2, #0
    e840:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    e844:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    e848:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    e84c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e850:	4770      	bx	lr
    e852:	bf00      	nop
    e854:	4000b000 	.word	0x4000b000

0000e858 <cntr_start>:
			     RTC_INTENSET_COMPARE1_Msk);
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    e858:	4a05      	ldr	r2, [pc, #20]	; (e870 <cntr_start+0x18>)
    e85a:	7813      	ldrb	r3, [r2, #0]
    e85c:	1c59      	adds	r1, r3, #1
    e85e:	7011      	strb	r1, [r2, #0]
    e860:	b923      	cbnz	r3, e86c <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    e862:	2201      	movs	r2, #1
    e864:	4b03      	ldr	r3, [pc, #12]	; (e874 <cntr_start+0x1c>)
    e866:	601a      	str	r2, [r3, #0]

	return 0;
    e868:	2000      	movs	r0, #0
    e86a:	4770      	bx	lr
		return 1;
    e86c:	2001      	movs	r0, #1
}
    e86e:	4770      	bx	lr
    e870:	20000b18 	.word	0x20000b18
    e874:	4000b000 	.word	0x4000b000

0000e878 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    e878:	4b0a      	ldr	r3, [pc, #40]	; (e8a4 <cntr_stop+0x2c>)
    e87a:	781b      	ldrb	r3, [r3, #0]
    e87c:	b14b      	cbz	r3, e892 <cntr_stop+0x1a>

	if (--_refcount) {
    e87e:	3b01      	subs	r3, #1
    e880:	b2db      	uxtb	r3, r3
    e882:	4a08      	ldr	r2, [pc, #32]	; (e8a4 <cntr_stop+0x2c>)
    e884:	7013      	strb	r3, [r2, #0]
    e886:	b953      	cbnz	r3, e89e <cntr_stop+0x26>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    e888:	2201      	movs	r2, #1
    e88a:	4b07      	ldr	r3, [pc, #28]	; (e8a8 <cntr_stop+0x30>)
    e88c:	605a      	str	r2, [r3, #4]

	return 0;
    e88e:	2000      	movs	r0, #0
    e890:	4770      	bx	lr
	LL_ASSERT(_refcount);
    e892:	4040      	eors	r0, r0
    e894:	f380 8811 	msr	BASEPRI, r0
    e898:	f04f 0004 	mov.w	r0, #4
    e89c:	df02      	svc	2
		return 1;
    e89e:	2001      	movs	r0, #1
}
    e8a0:	4770      	bx	lr
    e8a2:	bf00      	nop
    e8a4:	20000b18 	.word	0x20000b18
    e8a8:	4000b000 	.word	0x4000b000

0000e8ac <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    e8ac:	4b01      	ldr	r3, [pc, #4]	; (e8b4 <cntr_cnt_get+0x8>)
    e8ae:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    e8b2:	4770      	bx	lr
    e8b4:	4000b000 	.word	0x4000b000

0000e8b8 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    e8b8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    e8bc:	4b01      	ldr	r3, [pc, #4]	; (e8c4 <cntr_cmp_set+0xc>)
    e8be:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    e8c2:	4770      	bx	lr
    e8c4:	4000b000 	.word	0x4000b000

0000e8c8 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    e8c8:	e009      	b.n	e8de <do_ecb+0x16>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
		       (NRF_ECB->ECBDATAPTR != 0)) {
			/*__WFE();*/
		}
		NRF_ECB->TASKS_STOPECB = 1;
    e8ca:	4b15      	ldr	r3, [pc, #84]	; (e920 <do_ecb+0x58>)
    e8cc:	2201      	movs	r2, #1
    e8ce:	605a      	str	r2, [r3, #4]
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    e8d0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    e8d4:	b91b      	cbnz	r3, e8de <do_ecb+0x16>
    e8d6:	4b12      	ldr	r3, [pc, #72]	; (e920 <do_ecb+0x58>)
    e8d8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    e8dc:	b9d3      	cbnz	r3, e914 <do_ecb+0x4c>
		NRF_ECB->TASKS_STOPECB = 1;
    e8de:	4b10      	ldr	r3, [pc, #64]	; (e920 <do_ecb+0x58>)
    e8e0:	2201      	movs	r2, #1
    e8e2:	605a      	str	r2, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    e8e4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    e8e8:	2100      	movs	r1, #0
    e8ea:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    e8ee:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    e8f2:	601a      	str	r2, [r3, #0]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    e8f4:	4b0a      	ldr	r3, [pc, #40]	; (e920 <do_ecb+0x58>)
    e8f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    e8fa:	2b00      	cmp	r3, #0
    e8fc:	d1e5      	bne.n	e8ca <do_ecb+0x2>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    e8fe:	4b08      	ldr	r3, [pc, #32]	; (e920 <do_ecb+0x58>)
    e900:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    e904:	2b00      	cmp	r3, #0
    e906:	d1e0      	bne.n	e8ca <do_ecb+0x2>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    e908:	4b05      	ldr	r3, [pc, #20]	; (e920 <do_ecb+0x58>)
    e90a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    e90e:	2b00      	cmp	r3, #0
    e910:	d1f0      	bne.n	e8f4 <do_ecb+0x2c>
    e912:	e7da      	b.n	e8ca <do_ecb+0x2>

	NRF_ECB->ECBDATAPTR = 0;
    e914:	2200      	movs	r2, #0
    e916:	4b02      	ldr	r3, [pc, #8]	; (e920 <do_ecb+0x58>)
    e918:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    e91c:	4770      	bx	lr
    e91e:	bf00      	nop
    e920:	4000e000 	.word	0x4000e000

0000e924 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    e924:	b570      	push	{r4, r5, r6, lr}
    e926:	b08c      	sub	sp, #48	; 0x30
    e928:	460e      	mov	r6, r1
    e92a:	4615      	mov	r5, r2
    e92c:	461c      	mov	r4, r3
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    e92e:	2210      	movs	r2, #16
    e930:	4601      	mov	r1, r0
    e932:	4668      	mov	r0, sp
    e934:	f7ff ff2e 	bl	e794 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    e938:	2210      	movs	r2, #16
    e93a:	4631      	mov	r1, r6
    e93c:	eb0d 0002 	add.w	r0, sp, r2
    e940:	f7ff ff28 	bl	e794 <mem_rcopy>

	do_ecb(&ecb);
    e944:	4668      	mov	r0, sp
    e946:	f7ff ffbf 	bl	e8c8 <do_ecb>

	if (cipher_text_le) {
    e94a:	b125      	cbz	r5, e956 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    e94c:	2210      	movs	r2, #16
    e94e:	a908      	add	r1, sp, #32
    e950:	4628      	mov	r0, r5
    e952:	f7ff ff1f 	bl	e794 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    e956:	b124      	cbz	r4, e962 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    e958:	2210      	movs	r2, #16
    e95a:	a908      	add	r1, sp, #32
    e95c:	4620      	mov	r0, r4
    e95e:	f7f1 fcaf 	bl	2c0 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    e962:	b00c      	add	sp, #48	; 0x30
    e964:	bd70      	pop	{r4, r5, r6, pc}
	...

0000e968 <isr_radio>:
#endif

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
    e968:	b508      	push	{r3, lr}
	if (sfp_radio_isr) {
    e96a:	4b02      	ldr	r3, [pc, #8]	; (e974 <isr_radio+0xc>)
    e96c:	681b      	ldr	r3, [r3, #0]
    e96e:	b103      	cbz	r3, e972 <isr_radio+0xa>
		sfp_radio_isr();
    e970:	4798      	blx	r3
    e972:	bd08      	pop	{r3, pc}
    e974:	20000d38 	.word	0x20000d38

0000e978 <radio_isr_set>:
	}
}

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
    e978:	b508      	push	{r3, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    e97a:	4b07      	ldr	r3, [pc, #28]	; (e998 <radio_isr_set+0x20>)
    e97c:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    e97e:	2210      	movs	r2, #16
    e980:	4b06      	ldr	r3, [pc, #24]	; (e99c <radio_isr_set+0x24>)
    e982:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    e986:	2202      	movs	r2, #2
    e988:	4b05      	ldr	r3, [pc, #20]	; (e9a0 <radio_isr_set+0x28>)
    e98a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    e98e:	2001      	movs	r0, #1
    e990:	f018 fa3a 	bl	26e08 <_arch_irq_enable>
    e994:	bd08      	pop	{r3, pc}
    e996:	bf00      	nop
    e998:	20000d38 	.word	0x20000d38
    e99c:	40001000 	.word	0x40001000
    e9a0:	e000e100 	.word	0xe000e100

0000e9a4 <radio_setup>:
			u32_t volatile PDM;
			u32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    e9a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e9a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e9ac:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    e9b0:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    e9b4:	2100      	movs	r1, #0
    e9b6:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    e9ba:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    e9be:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    e9c2:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    e9c6:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    e9ca:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    e9ce:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    e9d2:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    e9d6:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    e9da:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    e9de:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    e9e2:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    e9e6:	4770      	bx	lr

0000e9e8 <radio_reset>:
#endif /* CONFIG_SOC_SERIES_NRF52X */
}

void radio_reset(void)
{
    e9e8:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    e9ea:	2001      	movs	r0, #1
    e9ec:	f018 fa1a 	bl	26e24 <_arch_irq_disable>

	NRF_RADIO->POWER =
    e9f0:	4b03      	ldr	r3, [pc, #12]	; (ea00 <radio_reset+0x18>)
    e9f2:	2200      	movs	r2, #0
    e9f4:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
	NRF_RADIO->POWER =
    e9f8:	2201      	movs	r2, #1
    e9fa:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
    e9fe:	bd08      	pop	{r3, pc}
    ea00:	40001000 	.word	0x40001000

0000ea04 <radio_phy_set>:

void radio_phy_set(u8_t phy, u8_t flags)
{
	u32_t mode;

	switch (phy) {
    ea04:	2802      	cmp	r0, #2
    ea06:	d106      	bne.n	ea16 <radio_phy_set+0x12>
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
		break;

#elif defined(CONFIG_SOC_SERIES_NRF52X)
	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
    ea08:	2304      	movs	r3, #4
		break;
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
	}

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    ea0a:	f003 030f 	and.w	r3, r3, #15
    ea0e:	4a03      	ldr	r2, [pc, #12]	; (ea1c <radio_phy_set+0x18>)
    ea10:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    ea14:	4770      	bx	lr
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    ea16:	2303      	movs	r3, #3
    ea18:	e7f7      	b.n	ea0a <radio_phy_set+0x6>
    ea1a:	bf00      	nop
    ea1c:	40001000 	.word	0x40001000

0000ea20 <radio_tx_power_set>:
}

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    ea20:	4b01      	ldr	r3, [pc, #4]	; (ea28 <radio_tx_power_set+0x8>)
    ea22:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    ea26:	4770      	bx	lr
    ea28:	40001000 	.word	0x40001000

0000ea2c <radio_freq_chan_set>:
}

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    ea2c:	4b01      	ldr	r3, [pc, #4]	; (ea34 <radio_freq_chan_set+0x8>)
    ea2e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    ea32:	4770      	bx	lr
    ea34:	40001000 	.word	0x40001000

0000ea38 <radio_whiten_iv_set>:
}

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    ea38:	4b07      	ldr	r3, [pc, #28]	; (ea58 <radio_whiten_iv_set+0x20>)
    ea3a:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554

	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    ea3e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    ea42:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    ea46:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    ea4a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    ea4e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    ea52:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    ea56:	4770      	bx	lr
    ea58:	40001000 	.word	0x40001000

0000ea5c <radio_aa_set>:
			    RADIO_PCNF1_WHITEEN_Msk;
}

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    ea5c:	4a0a      	ldr	r2, [pc, #40]	; (ea88 <radio_aa_set+0x2c>)
    ea5e:	2300      	movs	r3, #0
    ea60:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    ea64:	2301      	movs	r3, #1
    ea66:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    ea6a:	78c3      	ldrb	r3, [r0, #3]
    ea6c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    ea70:	7881      	ldrb	r1, [r0, #2]
    ea72:	7843      	ldrb	r3, [r0, #1]
    ea74:	041b      	lsls	r3, r3, #16
    ea76:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    ea7a:	7801      	ldrb	r1, [r0, #0]
    ea7c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    ea80:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    ea84:	4770      	bx	lr
    ea86:	bf00      	nop
    ea88:	40001000 	.word	0x40001000

0000ea8c <radio_pkt_configure>:
}

void radio_pkt_configure(u8_t bits_len, u8_t max_len, u8_t flags)
{
    ea8c:	b410      	push	{r4}
	u8_t dc = flags & 0x01; /* Adv or Data channel */
    ea8e:	f002 0401 	and.w	r4, r2, #1
		bits_len = 5;
	}
#elif defined(CONFIG_SOC_SERIES_NRF52X)
	extra = 0;

	phy = (flags >> 1) & 0x07; /* phy */
    ea92:	f3c2 0242 	ubfx	r2, r2, #1, #3
	switch (phy) {
    ea96:	2a02      	cmp	r2, #2
    ea98:	d020      	beq.n	eadc <radio_pkt_configure+0x50>
	case BIT(0):
	default:
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    ea9a:	2300      	movs	r3, #0
	}

	/* To use same Data Channel PDU structure with nRF5 specific overhead
	 * byte, include the S1 field in radio packet configuration.
	 */
	if (dc) {
    ea9c:	b10c      	cbz	r4, eaa2 <radio_pkt_configure+0x16>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    ea9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    eaa2:	f000 020f 	and.w	r2, r0, #15
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    eaa6:	f1c0 0008 	rsb	r0, r0, #8
    eaaa:	0400      	lsls	r0, r0, #16
    eaac:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
			    RADIO_PCNF0_LFLEN_Msk) |
    eab0:	4310      	orrs	r0, r2
			    RADIO_PCNF0_S1LEN_Msk) |
    eab2:	4303      	orrs	r3, r0
    eab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    eab8:	4a0a      	ldr	r2, [pc, #40]	; (eae4 <radio_pkt_configure+0x58>)
    eaba:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			   extra;

	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    eabe:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    eac2:	4b09      	ldr	r3, [pc, #36]	; (eae8 <radio_pkt_configure+0x5c>)
    eac4:	4003      	ands	r3, r0
    eac6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
			      RADIO_PCNF1_BALEN_Msk | RADIO_PCNF1_ENDIAN_Msk);
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    eaca:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    eace:	4319      	orrs	r1, r3
    ead0:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
    ead4:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
			    (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			     RADIO_PCNF1_BALEN_Msk) |
			    (((RADIO_PCNF1_ENDIAN_Little) <<
			      RADIO_PCNF1_ENDIAN_Pos) &
			     RADIO_PCNF1_ENDIAN_Msk);
}
    ead8:	bc10      	pop	{r4}
    eada:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
    eadc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    eae0:	e7dc      	b.n	ea9c <radio_pkt_configure+0x10>
    eae2:	bf00      	nop
    eae4:	40001000 	.word	0x40001000
    eae8:	fef80000 	.word	0xfef80000

0000eaec <radio_pkt_rx_set>:

void radio_pkt_rx_set(void *rx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
    eaec:	4b01      	ldr	r3, [pc, #4]	; (eaf4 <radio_pkt_rx_set+0x8>)
    eaee:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    eaf2:	4770      	bx	lr
    eaf4:	40001000 	.word	0x40001000

0000eaf8 <radio_pkt_tx_set>:
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    eaf8:	4b01      	ldr	r3, [pc, #4]	; (eb00 <radio_pkt_tx_set+0x8>)
    eafa:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    eafe:	4770      	bx	lr
    eb00:	40001000 	.word	0x40001000

0000eb04 <radio_tx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 131; /* floor(129.5 + 1.6) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    eb04:	208c      	movs	r0, #140	; 0x8c
    eb06:	4770      	bx	lr

0000eb08 <radio_tx_chain_delay_get>:
	}
#else /* !CONFIG_SOC_NRF52840 */
	return 1; /* ceil(0.6) */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    eb08:	2001      	movs	r0, #1
    eb0a:	4770      	bx	lr

0000eb0c <radio_rx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 130; /* ceil(129.5 + 0.2) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    eb0c:	208c      	movs	r0, #140	; 0x8c
    eb0e:	4770      	bx	lr

0000eb10 <radio_rx_chain_delay_get>:
		} else {
			return 20; /* ciel(19.6) */
		}
	}
#else /* !CONFIG_SOC_NRF52840 */
	switch (phy) {
    eb10:	2802      	cmp	r0, #2
    eb12:	d101      	bne.n	eb18 <radio_rx_chain_delay_get+0x8>
	default:
	case BIT(0):
		return 10; /* ceil(9.4) */
	case BIT(1):
		return 5; /* ceil(5) */
    eb14:	2005      	movs	r0, #5
	}
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    eb16:	4770      	bx	lr
		return 10; /* ceil(9.4) */
    eb18:	200a      	movs	r0, #10
    eb1a:	4770      	bx	lr

0000eb1c <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    eb1c:	2201      	movs	r2, #1
    eb1e:	4b01      	ldr	r3, [pc, #4]	; (eb24 <radio_rx_enable+0x8>)
    eb20:	605a      	str	r2, [r3, #4]
    eb22:	4770      	bx	lr
    eb24:	40001000 	.word	0x40001000

0000eb28 <radio_tx_enable>:
}

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    eb28:	2201      	movs	r2, #1
    eb2a:	4b01      	ldr	r3, [pc, #4]	; (eb30 <radio_tx_enable+0x8>)
    eb2c:	601a      	str	r2, [r3, #0]
    eb2e:	4770      	bx	lr
    eb30:	40001000 	.word	0x40001000

0000eb34 <radio_disable>:
	NRF_PPI->CHENCLR = PPI_CHEN_CH9_Msk | PPI_CHEN_CH12_Msk;
	NRF_PPI->TASKS_CHG[0].DIS = 1;
	NRF_PPI->TASKS_CHG[1].DIS = 1;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    eb34:	4b03      	ldr	r3, [pc, #12]	; (eb44 <radio_disable+0x10>)
    eb36:	2200      	movs	r2, #0
    eb38:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    eb3c:	2201      	movs	r2, #1
    eb3e:	611a      	str	r2, [r3, #16]
    eb40:	4770      	bx	lr
    eb42:	bf00      	nop
    eb44:	40001000 	.word	0x40001000

0000eb48 <radio_status_reset>:
}

void radio_status_reset(void)
{
	NRF_RADIO->EVENTS_READY = 0;
    eb48:	4b06      	ldr	r3, [pc, #24]	; (eb64 <radio_status_reset+0x1c>)
    eb4a:	2200      	movs	r2, #0
    eb4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_ADDRESS = 0;
    eb50:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    eb54:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NRF_RADIO->EVENTS_END = 0;
    eb58:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    eb5c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    eb60:	4770      	bx	lr
    eb62:	bf00      	nop
    eb64:	40001000 	.word	0x40001000

0000eb68 <radio_is_ready>:
}

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    eb68:	4b03      	ldr	r3, [pc, #12]	; (eb78 <radio_is_ready+0x10>)
    eb6a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    eb6e:	3000      	adds	r0, #0
    eb70:	bf18      	it	ne
    eb72:	2001      	movne	r0, #1
    eb74:	4770      	bx	lr
    eb76:	bf00      	nop
    eb78:	40001000 	.word	0x40001000

0000eb7c <radio_is_done>:

u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    eb7c:	4b03      	ldr	r3, [pc, #12]	; (eb8c <radio_is_done+0x10>)
    eb7e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    eb82:	3000      	adds	r0, #0
    eb84:	bf18      	it	ne
    eb86:	2001      	movne	r0, #1
    eb88:	4770      	bx	lr
    eb8a:	bf00      	nop
    eb8c:	40001000 	.word	0x40001000

0000eb90 <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    eb90:	4b03      	ldr	r3, [pc, #12]	; (eba0 <radio_is_idle+0x10>)
    eb92:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    eb96:	fab0 f080 	clz	r0, r0
    eb9a:	0940      	lsrs	r0, r0, #5
    eb9c:	4770      	bx	lr
    eb9e:	bf00      	nop
    eba0:	40001000 	.word	0x40001000

0000eba4 <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
	NRF_RADIO->CRCCNF =
    eba4:	4b04      	ldr	r3, [pc, #16]	; (ebb8 <radio_crc_configure+0x14>)
    eba6:	f240 1203 	movw	r2, #259	; 0x103
    ebaa:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    ebae:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    ebb2:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    ebb6:	4770      	bx	lr
    ebb8:	40001000 	.word	0x40001000

0000ebbc <radio_crc_is_valid>:
}

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    ebbc:	4b03      	ldr	r3, [pc, #12]	; (ebcc <radio_crc_is_valid+0x10>)
    ebbe:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    ebc2:	3000      	adds	r0, #0
    ebc4:	bf18      	it	ne
    ebc6:	2001      	movne	r0, #1
    ebc8:	4770      	bx	lr
    ebca:	bf00      	nop
    ebcc:	40001000 	.word	0x40001000

0000ebd0 <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    ebd0:	4800      	ldr	r0, [pc, #0]	; (ebd4 <radio_pkt_empty_get+0x4>)
    ebd2:	4770      	bx	lr
    ebd4:	20000c2c 	.word	0x20000c2c

0000ebd8 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    ebd8:	4800      	ldr	r0, [pc, #0]	; (ebdc <radio_pkt_scratch_get+0x4>)
    ebda:	4770      	bx	lr
    ebdc:	20000c30 	.word	0x20000c30

0000ebe0 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy_rx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    ebe0:	220b      	movs	r2, #11
    ebe2:	4b02      	ldr	r3, [pc, #8]	; (ebec <radio_switch_complete_and_rx+0xc>)
    ebe4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ebe8:	4770      	bx	lr
    ebea:	bf00      	nop
    ebec:	40001000 	.word	0x40001000

0000ebf0 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy_rx, u8_t flags_rx, u8_t phy_tx,
				  u8_t flags_tx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    ebf0:	2207      	movs	r2, #7
    ebf2:	4b02      	ldr	r3, [pc, #8]	; (ebfc <radio_switch_complete_and_tx+0xc>)
    ebf4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ebf8:	4770      	bx	lr
    ebfa:	bf00      	nop
    ebfc:	40001000 	.word	0x40001000

0000ec00 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    ec00:	2203      	movs	r2, #3
    ec02:	4b02      	ldr	r3, [pc, #8]	; (ec0c <radio_switch_complete_and_disable+0xc>)
    ec04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ec08:	4770      	bx	lr
    ec0a:	bf00      	nop
    ec0c:	40001000 	.word	0x40001000

0000ec10 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    ec10:	4a03      	ldr	r2, [pc, #12]	; (ec20 <radio_rssi_measure+0x10>)
    ec12:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    ec16:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    ec1a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    ec1e:	4770      	bx	lr
    ec20:	40001000 	.word	0x40001000

0000ec24 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    ec24:	4b01      	ldr	r3, [pc, #4]	; (ec2c <radio_rssi_get+0x8>)
    ec26:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    ec2a:	4770      	bx	lr
    ec2c:	40001000 	.word	0x40001000

0000ec30 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    ec30:	2200      	movs	r2, #0
    ec32:	4b02      	ldr	r3, [pc, #8]	; (ec3c <radio_rssi_status_reset+0xc>)
    ec34:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    ec38:	4770      	bx	lr
    ec3a:	bf00      	nop
    ec3c:	40001000 	.word	0x40001000

0000ec40 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    ec40:	4b03      	ldr	r3, [pc, #12]	; (ec50 <radio_rssi_is_ready+0x10>)
    ec42:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    ec46:	3000      	adds	r0, #0
    ec48:	bf18      	it	ne
    ec4a:	2001      	movne	r0, #1
    ec4c:	4770      	bx	lr
    ec4e:	bf00      	nop
    ec50:	40001000 	.word	0x40001000

0000ec54 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    ec54:	b470      	push	{r4, r5, r6}
	u8_t index;

	for (index = 0; index < 8; index++) {
    ec56:	2400      	movs	r4, #0
    ec58:	e019      	b.n	ec8e <radio_filter_configure+0x3a>
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ec5a:	78d5      	ldrb	r5, [r2, #3]
			((u32_t)bdaddr[2] << 16) |
    ec5c:	7893      	ldrb	r3, [r2, #2]
    ec5e:	041b      	lsls	r3, r3, #16
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ec60:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
			((u32_t)bdaddr[1] << 8) |
    ec64:	7855      	ldrb	r5, [r2, #1]
			((u32_t)bdaddr[2] << 16) |
    ec66:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
			bdaddr[0];
    ec6a:	7815      	ldrb	r5, [r2, #0]
			((u32_t)bdaddr[1] << 8) |
    ec6c:	432b      	orrs	r3, r5
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ec6e:	4d0c      	ldr	r5, [pc, #48]	; (eca0 <radio_filter_configure+0x4c>)
    ec70:	f504 76c0 	add.w	r6, r4, #384	; 0x180
    ec74:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    ec78:	7956      	ldrb	r6, [r2, #5]
    ec7a:	7913      	ldrb	r3, [r2, #4]
    ec7c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    ec80:	f504 76c4 	add.w	r6, r4, #392	; 0x188
    ec84:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		bdaddr += 6;
    ec88:	3206      	adds	r2, #6
	for (index = 0; index < 8; index++) {
    ec8a:	3401      	adds	r4, #1
    ec8c:	b2e4      	uxtb	r4, r4
    ec8e:	2c07      	cmp	r4, #7
    ec90:	d9e3      	bls.n	ec5a <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    ec92:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    ec96:	4b02      	ldr	r3, [pc, #8]	; (eca0 <radio_filter_configure+0x4c>)
    ec98:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
    ec9c:	bc70      	pop	{r4, r5, r6}
    ec9e:	4770      	bx	lr
    eca0:	40001000 	.word	0x40001000

0000eca4 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    eca4:	4a03      	ldr	r2, [pc, #12]	; (ecb4 <radio_filter_disable+0x10>)
    eca6:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    ecaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    ecae:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    ecb2:	4770      	bx	lr
    ecb4:	40001000 	.word	0x40001000

0000ecb8 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    ecb8:	4b03      	ldr	r3, [pc, #12]	; (ecc8 <radio_filter_status_reset+0x10>)
    ecba:	2200      	movs	r2, #0
    ecbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	NRF_RADIO->EVENTS_DEVMISS = 0;
    ecc0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    ecc4:	4770      	bx	lr
    ecc6:	bf00      	nop
    ecc8:	40001000 	.word	0x40001000

0000eccc <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    eccc:	4b03      	ldr	r3, [pc, #12]	; (ecdc <radio_filter_has_match+0x10>)
    ecce:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    ecd2:	3000      	adds	r0, #0
    ecd4:	bf18      	it	ne
    ecd6:	2001      	movne	r0, #1
    ecd8:	4770      	bx	lr
    ecda:	bf00      	nop
    ecdc:	40001000 	.word	0x40001000

0000ece0 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    ece0:	4b01      	ldr	r3, [pc, #4]	; (ece8 <radio_filter_match_get+0x8>)
    ece2:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    ece6:	4770      	bx	lr
    ece8:	40001000 	.word	0x40001000

0000ecec <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    ecec:	4b04      	ldr	r3, [pc, #16]	; (ed00 <radio_bc_configure+0x14>)
    ecee:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    ecf2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    ecf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    ecfa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ecfe:	4770      	bx	lr
    ed00:	40001000 	.word	0x40001000

0000ed04 <radio_bc_status_reset>:
}

void radio_bc_status_reset(void)
{
	NRF_RADIO->EVENTS_BCMATCH = 0;
    ed04:	2200      	movs	r2, #0
    ed06:	4b02      	ldr	r3, [pc, #8]	; (ed10 <radio_bc_status_reset+0xc>)
    ed08:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    ed0c:	4770      	bx	lr
    ed0e:	bf00      	nop
    ed10:	40001000 	.word	0x40001000

0000ed14 <radio_bc_has_match>:
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    ed14:	4b03      	ldr	r3, [pc, #12]	; (ed24 <radio_bc_has_match+0x10>)
    ed16:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
}
    ed1a:	3000      	adds	r0, #0
    ed1c:	bf18      	it	ne
    ed1e:	2001      	movne	r0, #1
    ed20:	4770      	bx	lr
    ed22:	bf00      	nop
    ed24:	40001000 	.word	0x40001000

0000ed28 <radio_tmr_status_reset>:

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    ed28:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    ed2c:	4b04      	ldr	r3, [pc, #16]	; (ed40 <radio_tmr_status_reset+0x18>)
    ed2e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	NRF_PPI->CHENCLR =
    ed32:	f248 027f 	movw	r2, #32895	; 0x807f
    ed36:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    ed3a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    ed3e:	4770      	bx	lr
    ed40:	4000b000 	.word	0x4000b000

0000ed44 <radio_tmr_tifs_set>:
}

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
    ed44:	4b01      	ldr	r3, [pc, #4]	; (ed4c <radio_tmr_tifs_set+0x8>)
    ed46:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    ed4a:	4770      	bx	lr
    ed4c:	40001000 	.word	0x40001000

0000ed50 <radio_tmr_start>:
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    ed50:	b470      	push	{r4, r5, r6}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    ed52:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    ed56:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    ed5a:	4c21      	ldr	r4, [pc, #132]	; (ede0 <radio_tmr_start+0x90>)
    ed5c:	42a3      	cmp	r3, r4
    ed5e:	d906      	bls.n	ed6e <radio_tmr_start+0x1e>
		ticks_start--;
    ed60:	3901      	subs	r1, #1
		remainder += 30517578UL;
    ed62:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
    ed66:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
    ed6a:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
	}
	remainder /= 1000000UL;
    ed6e:	4b1d      	ldr	r3, [pc, #116]	; (ede4 <radio_tmr_start+0x94>)
    ed70:	fba3 3202 	umull	r3, r2, r3, r2
    ed74:	0c92      	lsrs	r2, r2, #18

	NRF_TIMER0->TASKS_CLEAR = 1;
    ed76:	4b1c      	ldr	r3, [pc, #112]	; (ede8 <radio_tmr_start+0x98>)
    ed78:	2401      	movs	r4, #1
    ed7a:	60dc      	str	r4, [r3, #12]
	NRF_TIMER0->MODE = 0;
    ed7c:	2500      	movs	r5, #0
    ed7e:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	NRF_TIMER0->PRESCALER = 4;
    ed82:	2404      	movs	r4, #4
    ed84:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    ed88:	2602      	movs	r6, #2
    ed8a:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508

	NRF_TIMER0->CC[0] = remainder;
    ed8e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    ed92:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140

	NRF_RTC0->CC[2] = ticks_start;
    ed96:	4c15      	ldr	r4, [pc, #84]	; (edec <radio_tmr_start+0x9c>)
    ed98:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    ed9c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    eda0:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    eda4:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    eda8:	4911      	ldr	r1, [pc, #68]	; (edf0 <radio_tmr_start+0xa0>)
    edaa:	f504 74a4 	add.w	r4, r4, #328	; 0x148
    edae:	f8c1 4518 	str.w	r4, [r1, #1304]	; 0x518
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    edb2:	f8c1 351c 	str.w	r3, [r1, #1308]	; 0x51c
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;
    edb6:	f8c1 6504 	str.w	r6, [r1, #1284]	; 0x504

	NRF_PPI->CH[0].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
    edba:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    edbe:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
    edc2:	b948      	cbnz	r0, edd8 <radio_tmr_start+0x88>
    edc4:	490b      	ldr	r1, [pc, #44]	; (edf4 <radio_tmr_start+0xa4>)
    edc6:	4b0a      	ldr	r3, [pc, #40]	; (edf0 <radio_tmr_start+0xa0>)
    edc8:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
				     (u32_t)&(NRF_RADIO->TASKS_RXEN);
	NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
    edcc:	2101      	movs	r1, #1
    edce:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_PPI->CHG[0] = PPI_CHG_CH10_Msk | PPI_CHG_CH13_Msk;
	NRF_PPI->CHG[1] = PPI_CHG_CH11_Msk | PPI_CHG_CH14_Msk;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
    edd2:	4610      	mov	r0, r2
    edd4:	bc70      	pop	{r4, r5, r6}
    edd6:	4770      	bx	lr
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
    edd8:	f5a1 31f0 	sub.w	r1, r1, #122880	; 0x1e000
    eddc:	e7f3      	b.n	edc6 <radio_tmr_start+0x76>
    edde:	bf00      	nop
    ede0:	7ff0bdbf 	.word	0x7ff0bdbf
    ede4:	431bde83 	.word	0x431bde83
    ede8:	40008000 	.word	0x40008000
    edec:	4000b000 	.word	0x4000b000
    edf0:	4001f000 	.word	0x4001f000
    edf4:	40001004 	.word	0x40001004

0000edf8 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	NRF_TIMER0->TASKS_STOP = 1;
    edf8:	4b02      	ldr	r3, [pc, #8]	; (ee04 <radio_tmr_stop+0xc>)
    edfa:	2201      	movs	r2, #1
    edfc:	605a      	str	r2, [r3, #4]
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
    edfe:	611a      	str	r2, [r3, #16]
    ee00:	4770      	bx	lr
    ee02:	bf00      	nop
    ee04:	40008000 	.word	0x40008000

0000ee08 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	NRF_TIMER0->CC[1] = hcto;
    ee08:	4b0e      	ldr	r3, [pc, #56]	; (ee44 <radio_tmr_hcto_configure+0x3c>)
    ee0a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	NRF_TIMER0->EVENTS_COMPARE[1] = 0;
    ee0e:	2200      	movs	r2, #0
    ee10:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    ee14:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    ee18:	4a0b      	ldr	r2, [pc, #44]	; (ee48 <radio_tmr_hcto_configure+0x40>)
    ee1a:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    ee1e:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    ee22:	3240      	adds	r2, #64	; 0x40
    ee24:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CH[4].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[1]);
    ee28:	f502 7280 	add.w	r2, r2, #256	; 0x100
    ee2c:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
	NRF_PPI->CH[4].TEP = (u32_t)&(NRF_RADIO->TASKS_DISABLE);
    ee30:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    ee34:	3a34      	subs	r2, #52	; 0x34
    ee36:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_PPI->CHENSET = (PPI_CHEN_CH3_Msk | PPI_CHEN_CH4_Msk);
    ee3a:	2218      	movs	r2, #24
    ee3c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    ee40:	4770      	bx	lr
    ee42:	bf00      	nop
    ee44:	40008000 	.word	0x40008000
    ee48:	40001104 	.word	0x40001104

0000ee4c <radio_tmr_aa_capture>:
}

void radio_tmr_aa_capture(void)
{
	NRF_PPI->CH[2].EEP = (u32_t)&(NRF_RADIO->EVENTS_READY);
    ee4c:	4b0b      	ldr	r3, [pc, #44]	; (ee7c <radio_tmr_aa_capture+0x30>)
    ee4e:	4a0c      	ldr	r2, [pc, #48]	; (ee80 <radio_tmr_aa_capture+0x34>)
    ee50:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	NRF_PPI->CH[2].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[0]);
    ee54:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    ee58:	3240      	adds	r2, #64	; 0x40
    ee5a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    ee5e:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    ee62:	3a3c      	subs	r2, #60	; 0x3c
    ee64:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    ee68:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    ee6c:	3240      	adds	r2, #64	; 0x40
    ee6e:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
    ee72:	220c      	movs	r2, #12
    ee74:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    ee78:	4770      	bx	lr
    ee7a:	bf00      	nop
    ee7c:	4001f000 	.word	0x4001f000
    ee80:	40001100 	.word	0x40001100

0000ee84 <radio_tmr_aa_get>:
}

u32_t radio_tmr_aa_get(void)
{
	return NRF_TIMER0->CC[1];
    ee84:	4b01      	ldr	r3, [pc, #4]	; (ee8c <radio_tmr_aa_get+0x8>)
    ee86:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    ee8a:	4770      	bx	lr
    ee8c:	40008000 	.word	0x40008000

0000ee90 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    ee90:	4b01      	ldr	r3, [pc, #4]	; (ee98 <radio_tmr_aa_save+0x8>)
    ee92:	6018      	str	r0, [r3, #0]
    ee94:	4770      	bx	lr
    ee96:	bf00      	nop
    ee98:	20000d34 	.word	0x20000d34

0000ee9c <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    ee9c:	4b01      	ldr	r3, [pc, #4]	; (eea4 <radio_tmr_aa_restore+0x8>)
    ee9e:	6818      	ldr	r0, [r3, #0]
    eea0:	4770      	bx	lr
    eea2:	bf00      	nop
    eea4:	20000d34 	.word	0x20000d34

0000eea8 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return NRF_TIMER0->CC[0];
    eea8:	4b01      	ldr	r3, [pc, #4]	; (eeb0 <radio_tmr_ready_get+0x8>)
    eeaa:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    eeae:	4770      	bx	lr
    eeb0:	40008000 	.word	0x40008000

0000eeb4 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	NRF_PPI->CH[5].EEP = (u32_t)&(NRF_RADIO->EVENTS_END);
    eeb4:	4b06      	ldr	r3, [pc, #24]	; (eed0 <radio_tmr_end_capture+0x1c>)
    eeb6:	4a07      	ldr	r2, [pc, #28]	; (eed4 <radio_tmr_end_capture+0x20>)
    eeb8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	NRF_PPI->CH[5].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    eebc:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    eec0:	323c      	adds	r2, #60	; 0x3c
    eec2:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
	NRF_PPI->CHENSET = PPI_CHEN_CH5_Msk;
    eec6:	2220      	movs	r2, #32
    eec8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    eecc:	4770      	bx	lr
    eece:	bf00      	nop
    eed0:	4001f000 	.word	0x4001f000
    eed4:	4000110c 	.word	0x4000110c

0000eed8 <radio_tmr_end_get>:
}

u32_t radio_tmr_end_get(void)
{
	return NRF_TIMER0->CC[2];
    eed8:	4b01      	ldr	r3, [pc, #4]	; (eee0 <radio_tmr_end_get+0x8>)
    eeda:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    eede:	4770      	bx	lr
    eee0:	40008000 	.word	0x40008000

0000eee4 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{
    eee4:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    eee6:	4b18      	ldr	r3, [pc, #96]	; (ef48 <radio_ccm_rx_pkt_set+0x64>)
    eee8:	2400      	movs	r4, #0
    eeea:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    eeee:	2402      	movs	r4, #2
    eef0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
    eef4:	42a1      	cmp	r1, r4
    eef6:	d125      	bne.n	ef44 <radio_ccm_rx_pkt_set+0x60>
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
    eef8:	4914      	ldr	r1, [pc, #80]	; (ef4c <radio_ccm_rx_pkt_set+0x68>)
		NRF_PPI->CHENSET = PPI_CHEN_CH15_Msk;
		break;
#endif /* CONFIG_SOC_NRF52840 */
	}
#endif
	NRF_CCM->MODE = mode;
    eefa:	4b13      	ldr	r3, [pc, #76]	; (ef48 <radio_ccm_rx_pkt_set+0x64>)
    eefc:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    ef00:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    ef04:	4812      	ldr	r0, [pc, #72]	; (ef50 <radio_ccm_rx_pkt_set+0x6c>)
    ef06:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    ef0a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    ef0e:	4a11      	ldr	r2, [pc, #68]	; (ef54 <radio_ccm_rx_pkt_set+0x70>)
    ef10:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
    ef14:	2200      	movs	r2, #0
    ef16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    ef1a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    ef1e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    ef22:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    ef26:	4a0c      	ldr	r2, [pc, #48]	; (ef58 <radio_ccm_rx_pkt_set+0x74>)
    ef28:	490c      	ldr	r1, [pc, #48]	; (ef5c <radio_ccm_rx_pkt_set+0x78>)
    ef2a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_CCM->TASKS_CRYPT);
    ef2e:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    ef32:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    ef36:	2140      	movs	r1, #64	; 0x40
    ef38:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504

	NRF_CCM->TASKS_KSGEN = 1;
    ef3c:	2201      	movs	r2, #1
    ef3e:	601a      	str	r2, [r3, #0]

	return _pkt_scratch;
}
    ef40:	bc10      	pop	{r4}
    ef42:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    ef44:	4906      	ldr	r1, [pc, #24]	; (ef60 <radio_ccm_rx_pkt_set+0x7c>)
    ef46:	e7d8      	b.n	eefa <radio_ccm_rx_pkt_set+0x16>
    ef48:	4000f000 	.word	0x4000f000
    ef4c:	01010001 	.word	0x01010001
    ef50:	20000c30 	.word	0x20000c30
    ef54:	20000b20 	.word	0x20000b20
    ef58:	4001f000 	.word	0x4001f000
    ef5c:	40001104 	.word	0x40001104
    ef60:	01000001 	.word	0x01000001

0000ef64 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    ef64:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    ef66:	4b10      	ldr	r3, [pc, #64]	; (efa8 <radio_ccm_tx_pkt_set+0x44>)
    ef68:	2200      	movs	r2, #0
    ef6a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    ef6e:	2402      	movs	r4, #2
    ef70:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    ef74:	4c0d      	ldr	r4, [pc, #52]	; (efac <radio_ccm_tx_pkt_set+0x48>)
    ef76:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    ef7a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    ef7e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    ef82:	480b      	ldr	r0, [pc, #44]	; (efb0 <radio_ccm_tx_pkt_set+0x4c>)
    ef84:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    ef88:	490a      	ldr	r1, [pc, #40]	; (efb4 <radio_ccm_tx_pkt_set+0x50>)
    ef8a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    ef8e:	2101      	movs	r1, #1
    ef90:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    ef94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    ef98:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    ef9c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    efa0:	6019      	str	r1, [r3, #0]

	return _pkt_scratch;
}
    efa2:	bc10      	pop	{r4}
    efa4:	4770      	bx	lr
    efa6:	bf00      	nop
    efa8:	4000f000 	.word	0x4000f000
    efac:	01010000 	.word	0x01010000
    efb0:	20000c30 	.word	0x20000c30
    efb4:	20000b20 	.word	0x20000b20

0000efb8 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    efb8:	2202      	movs	r2, #2
    efba:	4b0d      	ldr	r3, [pc, #52]	; (eff0 <radio_ccm_is_done+0x38>)
    efbc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    efc0:	e002      	b.n	efc8 <radio_ccm_is_done+0x10>
    efc2:	bf20      	wfe
  __ASM volatile ("sev");
    efc4:	bf40      	sev
  __ASM volatile ("wfe");
    efc6:	bf20      	wfe
    efc8:	4b09      	ldr	r3, [pc, #36]	; (eff0 <radio_ccm_is_done+0x38>)
    efca:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    efce:	2b00      	cmp	r3, #0
    efd0:	d0f7      	beq.n	efc2 <radio_ccm_is_done+0xa>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    efd2:	4b07      	ldr	r3, [pc, #28]	; (eff0 <radio_ccm_is_done+0x38>)
    efd4:	2202      	movs	r2, #2
    efd6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    efda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    efde:	4a05      	ldr	r2, [pc, #20]	; (eff4 <radio_ccm_is_done+0x3c>)
    efe0:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    efe4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    efe8:	fab0 f080 	clz	r0, r0
    efec:	0940      	lsrs	r0, r0, #5
    efee:	4770      	bx	lr
    eff0:	4000f000 	.word	0x4000f000
    eff4:	e000e100 	.word	0xe000e100

0000eff8 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    eff8:	4b03      	ldr	r3, [pc, #12]	; (f008 <radio_ccm_mic_is_valid+0x10>)
    effa:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    effe:	3000      	adds	r0, #0
    f000:	bf18      	it	ne
    f002:	2001      	movne	r0, #1
    f004:	4770      	bx	lr
    f006:	bf00      	nop
    f008:	4000f000 	.word	0x4000f000

0000f00c <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
    f00c:	b510      	push	{r4, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
    f00e:	4c13      	ldr	r4, [pc, #76]	; (f05c <radio_ar_configure+0x50>)
    f010:	2303      	movs	r3, #3
    f012:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
    f016:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
    f01a:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
    f01e:	4b10      	ldr	r3, [pc, #64]	; (f060 <radio_ar_configure+0x54>)
    f020:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    f024:	3b01      	subs	r3, #1
    f026:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
    f02a:	4b0e      	ldr	r3, [pc, #56]	; (f064 <radio_ar_configure+0x58>)
    f02c:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	NRF_AAR->EVENTS_END = 0;
    f030:	2300      	movs	r3, #0
    f032:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
    f036:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
    f03a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108

	radio_bc_configure(64);
    f03e:	2040      	movs	r0, #64	; 0x40
    f040:	f7ff fe54 	bl	ecec <radio_bc_configure>
	radio_bc_status_reset();
    f044:	f7ff fe5e 	bl	ed04 <radio_bc_status_reset>

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_BCMATCH);
    f048:	4b07      	ldr	r3, [pc, #28]	; (f068 <radio_ar_configure+0x5c>)
    f04a:	4a08      	ldr	r2, [pc, #32]	; (f06c <radio_ar_configure+0x60>)
    f04c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_AAR->TASKS_START);
    f050:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    f054:	2240      	movs	r2, #64	; 0x40
    f056:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    f05a:	bd10      	pop	{r4, pc}
    f05c:	4000f000 	.word	0x4000f000
    f060:	40001000 	.word	0x40001000
    f064:	20000b1c 	.word	0x20000b1c
    f068:	4001f000 	.word	0x4001f000
    f06c:	40001128 	.word	0x40001128

0000f070 <radio_ar_match_get>:
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    f070:	4b01      	ldr	r3, [pc, #4]	; (f078 <radio_ar_match_get+0x8>)
    f072:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    f076:	4770      	bx	lr
    f078:	4000f000 	.word	0x4000f000

0000f07c <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
    f07c:	b508      	push	{r3, lr}
	radio_bc_status_reset();
    f07e:	f7ff fe41 	bl	ed04 <radio_bc_status_reset>

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    f082:	2200      	movs	r2, #0
    f084:	4b01      	ldr	r3, [pc, #4]	; (f08c <radio_ar_status_reset+0x10>)
    f086:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    f08a:	bd08      	pop	{r3, pc}
    f08c:	4000f000 	.word	0x4000f000

0000f090 <radio_ar_has_match>:
			  AAR_ENABLE_ENABLE_Msk;
}

u32_t radio_ar_has_match(void)
{
    f090:	b508      	push	{r3, lr}
	return (radio_bc_has_match() &&
    f092:	f7ff fe3f 	bl	ed14 <radio_bc_has_match>
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    f096:	b168      	cbz	r0, f0b4 <radio_ar_has_match+0x24>
		NRF_AAR->EVENTS_END &&
    f098:	4b0a      	ldr	r3, [pc, #40]	; (f0c4 <radio_ar_has_match+0x34>)
    f09a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    f09e:	b15b      	cbz	r3, f0b8 <radio_ar_has_match+0x28>
		NRF_AAR->EVENTS_RESOLVED &&
    f0a0:	4b08      	ldr	r3, [pc, #32]	; (f0c4 <radio_ar_has_match+0x34>)
    f0a2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    f0a6:	b14b      	cbz	r3, f0bc <radio_ar_has_match+0x2c>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    f0a8:	4b06      	ldr	r3, [pc, #24]	; (f0c4 <radio_ar_has_match+0x34>)
    f0aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    f0ae:	b13b      	cbz	r3, f0c0 <radio_ar_has_match+0x30>
    f0b0:	2000      	movs	r0, #0
    f0b2:	bd08      	pop	{r3, pc}
    f0b4:	2000      	movs	r0, #0
    f0b6:	bd08      	pop	{r3, pc}
    f0b8:	2000      	movs	r0, #0
    f0ba:	bd08      	pop	{r3, pc}
    f0bc:	2000      	movs	r0, #0
    f0be:	bd08      	pop	{r3, pc}
    f0c0:	2001      	movs	r0, #1
}
    f0c2:	bd08      	pop	{r3, pc}
    f0c4:	4000f000 	.word	0x4000f000

0000f0c8 <isr>:

static int isr(struct rand *rng, bool store)
{
	u8_t last;

	if (!rng) {
    f0c8:	b1f0      	cbz	r0, f108 <isr+0x40>
{
    f0ca:	b430      	push	{r4, r5}
    f0cc:	4602      	mov	r2, r0
		return -ENOBUFS;
	}

	last = rng->last + 1;
    f0ce:	78c0      	ldrb	r0, [r0, #3]
    f0d0:	1c43      	adds	r3, r0, #1
    f0d2:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    f0d4:	7815      	ldrb	r5, [r2, #0]
    f0d6:	42ab      	cmp	r3, r5
    f0d8:	d012      	beq.n	f100 <isr+0x38>
		last = 0;
	}

	if (last == rng->first) {
    f0da:	7894      	ldrb	r4, [r2, #2]
    f0dc:	42a3      	cmp	r3, r4
    f0de:	d016      	beq.n	f10e <isr+0x46>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    f0e0:	b1c1      	cbz	r1, f114 <isr+0x4c>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    f0e2:	490f      	ldr	r1, [pc, #60]	; (f120 <isr+0x58>)
    f0e4:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    f0e8:	4410      	add	r0, r2
    f0ea:	7101      	strb	r1, [r0, #4]
	rng->last = last;
    f0ec:	70d3      	strb	r3, [r2, #3]

	last = rng->last + 1;
    f0ee:	3301      	adds	r3, #1
    f0f0:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    f0f2:	429d      	cmp	r5, r3
    f0f4:	d006      	beq.n	f104 <isr+0x3c>
		last = 0;
	}

	if (last == rng->first) {
    f0f6:	42a3      	cmp	r3, r4
    f0f8:	d10f      	bne.n	f11a <isr+0x52>
		return 0;
    f0fa:	2000      	movs	r0, #0
	}

	return -EBUSY;
}
    f0fc:	bc30      	pop	{r4, r5}
    f0fe:	4770      	bx	lr
		last = 0;
    f100:	2300      	movs	r3, #0
    f102:	e7ea      	b.n	f0da <isr+0x12>
		last = 0;
    f104:	2300      	movs	r3, #0
    f106:	e7f6      	b.n	f0f6 <isr+0x2e>
		return -ENOBUFS;
    f108:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f10c:	4770      	bx	lr
		return -ENOBUFS;
    f10e:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f112:	e7f3      	b.n	f0fc <isr+0x34>
		return -EBUSY;
    f114:	f06f 000f 	mvn.w	r0, #15
    f118:	e7f0      	b.n	f0fc <isr+0x34>
	return -EBUSY;
    f11a:	f06f 000f 	mvn.w	r0, #15
    f11e:	e7ed      	b.n	f0fc <isr+0x34>
    f120:	4000d000 	.word	0x4000d000
    f124:	00000000 	.word	0x00000000

0000f128 <isr>:

	DEBUG_RADIO_CLOSE(0);
}

static void isr(void)
{
    f128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f12c:	b08a      	sub	sp, #40	; 0x28
	u8_t rssi_ready;

	DEBUG_RADIO_ISR(1);

	/* Read radio status and events */
	trx_done = radio_is_done();
    f12e:	f7ff fd25 	bl	eb7c <radio_is_done>
    f132:	b2c4      	uxtb	r4, r0
	if (trx_done) {
    f134:	b9e4      	cbnz	r4, f170 <isr+0x48>
		devmatch_id = radio_filter_match_get();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    f136:	46a0      	mov	r8, r4
    f138:	46a1      	mov	r9, r4
    f13a:	4627      	mov	r7, r4
    f13c:	4626      	mov	r6, r4
		devmatch_id = irkmatch_id = 0xFF;
    f13e:	25ff      	movs	r5, #255	; 0xff
    f140:	46aa      	mov	sl, r5
	}

	/* Clear radio status and events */
	radio_status_reset();
    f142:	f7ff fd01 	bl	eb48 <radio_status_reset>
	radio_tmr_status_reset();
    f146:	f7ff fdef 	bl	ed28 <radio_tmr_status_reset>
	radio_filter_status_reset();
    f14a:	f7ff fdb5 	bl	ecb8 <radio_filter_status_reset>
	radio_ar_status_reset();
    f14e:	f7ff ff95 	bl	f07c <radio_ar_status_reset>
	radio_rssi_status_reset();
    f152:	f7ff fd6d 	bl	ec30 <radio_rssi_status_reset>
#if defined(CONFIG_BT_CTLR_GPIO_PA_PIN) || \
    defined(CONFIG_BT_CTLR_GPIO_LNA_PIN)
	radio_gpio_pa_lna_disable();
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

	switch (_radio.state) {
    f156:	4bb6      	ldr	r3, [pc, #728]	; (f430 <isr+0x308>)
    f158:	7c1b      	ldrb	r3, [r3, #16]
    f15a:	2b05      	cmp	r3, #5
    f15c:	f200 8456 	bhi.w	fa0c <isr+0x8e4>
    f160:	e8df f013 	tbh	[pc, r3, lsl #1]
    f164:	00e801f3 	.word	0x00e801f3
    f168:	016e001c 	.word	0x016e001c
    f16c:	016e016e 	.word	0x016e016e
		crc_ok = radio_crc_is_valid();
    f170:	f7ff fd24 	bl	ebbc <radio_crc_is_valid>
    f174:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
    f176:	f7ff fda9 	bl	eccc <radio_filter_has_match>
    f17a:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
    f17c:	f7ff fdb0 	bl	ece0 <radio_filter_match_get>
    f180:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_ok = radio_ar_has_match();
    f184:	f7ff ff84 	bl	f090 <radio_ar_has_match>
    f188:	fa5f f980 	uxtb.w	r9, r0
		irkmatch_id = radio_ar_match_get();
    f18c:	f7ff ff70 	bl	f070 <radio_ar_match_get>
    f190:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
    f192:	f7ff fd55 	bl	ec40 <radio_rssi_is_ready>
    f196:	fa5f f880 	uxtb.w	r8, r0
    f19a:	e7d2      	b.n	f142 <isr+0x1a>
	_radio.state = STATE_RX;
    f19c:	4da4      	ldr	r5, [pc, #656]	; (f430 <isr+0x308>)
    f19e:	2301      	movs	r3, #1
    f1a0:	742b      	strb	r3, [r5, #16]
	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    f1a2:	f7ff fe99 	bl	eed8 <radio_tmr_end_get>
    f1a6:	f100 049b 	add.w	r4, r0, #155	; 0x9b
	radio_tmr_tifs_set(RADIO_TIFS);
    f1aa:	2096      	movs	r0, #150	; 0x96
    f1ac:	f7ff fdca 	bl	ed44 <radio_tmr_tifs_set>
	switch (_radio.role) {
    f1b0:	7beb      	ldrb	r3, [r5, #15]
    f1b2:	3b01      	subs	r3, #1
    f1b4:	2b03      	cmp	r3, #3
    f1b6:	f200 80b7 	bhi.w	f328 <isr+0x200>
    f1ba:	e8df f003 	tbb	[pc, r3]
    f1be:	3202      	.short	0x3202
    f1c0:	6868      	.short	0x6868
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f1c2:	2300      	movs	r3, #0
    f1c4:	461a      	mov	r2, r3
    f1c6:	4619      	mov	r1, r3
    f1c8:	4618      	mov	r0, r3
    f1ca:	f7ff fd11 	bl	ebf0 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    f1ce:	f7ff fd03 	bl	ebd8 <radio_pkt_scratch_get>
    f1d2:	f7ff fc8b 	bl	eaec <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    f1d6:	f7ff fcc7 	bl	eb68 <radio_is_ready>
    f1da:	b990      	cbnz	r0, f202 <isr+0xda>
		if (ctrl_rl_enabled()) {
    f1dc:	f00a f802 	bl	191e4 <ctrl_rl_enabled>
    f1e0:	b9a8      	cbnz	r0, f20e <isr+0xe6>
		hcto += radio_rx_chain_delay_get(0, 0);
    f1e2:	2100      	movs	r1, #0
    f1e4:	4608      	mov	r0, r1
    f1e6:	f7ff fc93 	bl	eb10 <radio_rx_chain_delay_get>
    f1ea:	4404      	add	r4, r0
		hcto += addr_us_get(0);
    f1ec:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
    f1ee:	2100      	movs	r1, #0
    f1f0:	4608      	mov	r0, r1
    f1f2:	f7ff fc89 	bl	eb08 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f1f6:	1a20      	subs	r0, r4, r0
    f1f8:	f7ff fe06 	bl	ee08 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    f1fc:	f7ff fe5a 	bl	eeb4 <radio_tmr_end_capture>
    f200:	e1a3      	b.n	f54a <isr+0x422>
		LL_ASSERT(!radio_is_ready());
    f202:	4040      	eors	r0, r0
    f204:	f380 8811 	msr	BASEPRI, r0
    f208:	f04f 0004 	mov.w	r0, #4
    f20c:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
    f20e:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    f212:	f009 fd63 	bl	18cdc <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f216:	4601      	mov	r1, r0
    f218:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    f21c:	f7ff fef6 	bl	f00c <radio_ar_configure>
    f220:	e7df      	b.n	f1e2 <isr+0xba>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f222:	2300      	movs	r3, #0
    f224:	461a      	mov	r2, r3
    f226:	4619      	mov	r1, r3
    f228:	4618      	mov	r0, r3
    f22a:	f7ff fce1 	bl	ebf0 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    f22e:	4b80      	ldr	r3, [pc, #512]	; (f430 <isr+0x308>)
    f230:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    f234:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    f238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    f23c:	3008      	adds	r0, #8
    f23e:	f7ff fc55 	bl	eaec <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    f242:	f7ff fc91 	bl	eb68 <radio_is_ready>
    f246:	b990      	cbnz	r0, f26e <isr+0x146>
		if (ctrl_rl_enabled()) {
    f248:	f009 ffcc 	bl	191e4 <ctrl_rl_enabled>
    f24c:	b9a8      	cbnz	r0, f27a <isr+0x152>
		hcto += radio_rx_chain_delay_get(0, 0);
    f24e:	2100      	movs	r1, #0
    f250:	4608      	mov	r0, r1
    f252:	f7ff fc5d 	bl	eb10 <radio_rx_chain_delay_get>
    f256:	4404      	add	r4, r0
		hcto += addr_us_get(0);
    f258:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
    f25a:	2100      	movs	r1, #0
    f25c:	4608      	mov	r0, r1
    f25e:	f7ff fc53 	bl	eb08 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f262:	1a20      	subs	r0, r4, r0
    f264:	f7ff fdd0 	bl	ee08 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    f268:	f7ff fcd2 	bl	ec10 <radio_rssi_measure>
    f26c:	e16d      	b.n	f54a <isr+0x422>
		LL_ASSERT(!radio_is_ready());
    f26e:	4040      	eors	r0, r0
    f270:	f380 8811 	msr	BASEPRI, r0
    f274:	f04f 0004 	mov.w	r0, #4
    f278:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
    f27a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    f27e:	f009 fd2d 	bl	18cdc <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f282:	4601      	mov	r1, r0
    f284:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    f288:	f7ff fec0 	bl	f00c <radio_ar_configure>
    f28c:	e7df      	b.n	f24e <isr+0x126>
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    f28e:	4d68      	ldr	r5, [pc, #416]	; (f430 <isr+0x308>)
    f290:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    f294:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
					     _radio.conn_curr->phy_tx,
    f298:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    f29c:	09d3      	lsrs	r3, r2, #7
    f29e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    f2a2:	2100      	movs	r1, #0
    f2a4:	f000 0007 	and.w	r0, r0, #7
    f2a8:	f7ff fca2 	bl	ebf0 <radio_switch_complete_and_tx>
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    f2ac:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
			      packet_rx[_radio.packet_rx_last]->pdu_data);
    f2b0:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
    f2b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    f2b8:	3108      	adds	r1, #8
    f2ba:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    f2be:	f002 fad3 	bl	11868 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    f2c2:	f7ff fc51 	bl	eb68 <radio_is_ready>
    f2c6:	bb20      	cbnz	r0, f312 <isr+0x1ea>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    f2c8:	4d59      	ldr	r5, [pc, #356]	; (f430 <isr+0x308>)
    f2ca:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    f2ce:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f2d2:	2101      	movs	r1, #1
    f2d4:	f000 0007 	and.w	r0, r0, #7
    f2d8:	f7ff fc1a 	bl	eb10 <radio_rx_chain_delay_get>
    f2dc:	4420      	add	r0, r4
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f2de:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    f2e2:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
    f2e6:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
    f2ea:	2b02      	cmp	r3, #2
    f2ec:	d01a      	beq.n	f324 <isr+0x1fc>
    f2ee:	2b04      	cmp	r3, #4
    f2f0:	d015      	beq.n	f31e <isr+0x1f6>
		return 40;
    f2f2:	2428      	movs	r4, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f2f4:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    f2f6:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
    f2fa:	09c1      	lsrs	r1, r0, #7
    f2fc:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    f300:	f7ff fc02 	bl	eb08 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f304:	1a20      	subs	r0, r4, r0
    f306:	f7ff fd7f 	bl	ee08 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    f30a:	2001      	movs	r0, #1
    f30c:	f002 fb0a 	bl	11924 <packet_tx_enqueue>
    f310:	e11b      	b.n	f54a <isr+0x422>
		LL_ASSERT(!radio_is_ready());
    f312:	4040      	eors	r0, r0
    f314:	f380 8811 	msr	BASEPRI, r0
    f318:	f04f 0004 	mov.w	r0, #4
    f31c:	df02      	svc	2
		return 376;
    f31e:	f44f 74bc 	mov.w	r4, #376	; 0x178
    f322:	e7e7      	b.n	f2f4 <isr+0x1cc>
		return 24;
    f324:	2418      	movs	r4, #24
    f326:	e7e5      	b.n	f2f4 <isr+0x1cc>
		LL_ASSERT(0);
    f328:	4040      	eors	r0, r0
    f32a:	f380 8811 	msr	BASEPRI, r0
    f32e:	f04f 0004 	mov.w	r0, #4
    f332:	df02      	svc	2
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    f334:	b144      	cbz	r4, f348 <isr+0x220>
	switch (_radio.role) {
    f336:	4b3e      	ldr	r3, [pc, #248]	; (f430 <isr+0x308>)
    f338:	7bdb      	ldrb	r3, [r3, #15]
    f33a:	3b01      	subs	r3, #1
    f33c:	2b03      	cmp	r3, #3
    f33e:	d879      	bhi.n	f434 <isr+0x30c>
    f340:	e8df f003 	tbb	[pc, r3]
    f344:	70701c08 	.word	0x70701c08
		_radio.state = STATE_CLOSE;
    f348:	2203      	movs	r2, #3
    f34a:	4b39      	ldr	r3, [pc, #228]	; (f430 <isr+0x308>)
    f34c:	741a      	strb	r2, [r3, #16]
		radio_disable();
    f34e:	f7ff fbf1 	bl	eb34 <radio_disable>
    f352:	e0fa      	b.n	f54a <isr+0x422>
		if (crc_ok) {
    f354:	b94e      	cbnz	r6, f36a <isr+0x242>
			err = 1;
    f356:	2001      	movs	r0, #1
		if (err) {
    f358:	2800      	cmp	r0, #0
    f35a:	f000 80f6 	beq.w	f54a <isr+0x422>
			_radio.state = STATE_CLOSE;
    f35e:	2203      	movs	r2, #3
    f360:	4b33      	ldr	r3, [pc, #204]	; (f430 <isr+0x308>)
    f362:	741a      	strb	r2, [r3, #16]
			radio_disable();
    f364:	f7ff fbe6 	bl	eb34 <radio_disable>
    f368:	e0ef      	b.n	f54a <isr+0x422>
			err = isr_rx_adv(devmatch_ok, devmatch_id, irkmatch_ok,
    f36a:	f8cd 8000 	str.w	r8, [sp]
    f36e:	462b      	mov	r3, r5
    f370:	464a      	mov	r2, r9
    f372:	4651      	mov	r1, sl
    f374:	4638      	mov	r0, r7
    f376:	f007 fc37 	bl	16be8 <isr_rx_adv>
    f37a:	e7ed      	b.n	f358 <isr+0x230>
		rl_idx = devmatch_ok ?
    f37c:	b9a7      	cbnz	r7, f3a8 <isr+0x280>
    f37e:	f1b9 0f00 	cmp.w	r9, #0
    f382:	d11b      	bne.n	f3bc <isr+0x294>
    f384:	24ff      	movs	r4, #255	; 0xff
		if (crc_ok &&
    f386:	b9f6      	cbnz	r6, f3c6 <isr+0x29e>
			err = 1;
    f388:	2001      	movs	r0, #1
		if (err) {
    f38a:	2800      	cmp	r0, #0
    f38c:	f000 80dd 	beq.w	f54a <isr+0x422>
			_radio.state = STATE_CLOSE;
    f390:	4c27      	ldr	r4, [pc, #156]	; (f430 <isr+0x308>)
    f392:	2303      	movs	r3, #3
    f394:	7423      	strb	r3, [r4, #16]
			radio_disable();
    f396:	f7ff fbcd 	bl	eb34 <radio_disable>
			_radio.scanner.state = 0;
    f39a:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    f39e:	f36f 0341 	bfc	r3, #1, #1
    f3a2:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
    f3a6:	e0d0      	b.n	f54a <isr+0x422>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    f3a8:	4b21      	ldr	r3, [pc, #132]	; (f430 <isr+0x308>)
    f3aa:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		rl_idx = devmatch_ok ?
    f3ae:	4651      	mov	r1, sl
    f3b0:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f3b4:	f009 fc9c 	bl	18cf0 <ctrl_rl_idx>
    f3b8:	4604      	mov	r4, r0
    f3ba:	e7e4      	b.n	f386 <isr+0x25e>
    f3bc:	4628      	mov	r0, r5
    f3be:	f009 fccd 	bl	18d5c <ctrl_rl_irk_idx>
    f3c2:	4604      	mov	r4, r0
    f3c4:	e7df      	b.n	f386 <isr+0x25e>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    f3c6:	4b1a      	ldr	r3, [pc, #104]	; (f430 <isr+0x308>)
    f3c8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f3cc:	f013 0f10 	tst.w	r3, #16
    f3d0:	d109      	bne.n	f3e6 <isr+0x2be>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    f3d2:	b91f      	cbnz	r7, f3dc <isr+0x2b4>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f3d4:	2301      	movs	r3, #1
		if (crc_ok &&
    f3d6:	b9db      	cbnz	r3, f410 <isr+0x2e8>
			err = 1;
    f3d8:	2001      	movs	r0, #1
    f3da:	e7d6      	b.n	f38a <isr+0x262>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f3dc:	4621      	mov	r1, r4
    f3de:	4648      	mov	r0, r9
    f3e0:	f009 fe1c 	bl	1901c <ctrl_rl_idx_allowed>
    f3e4:	b980      	cbnz	r0, f408 <isr+0x2e0>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    f3e6:	4b12      	ldr	r3, [pc, #72]	; (f430 <isr+0x308>)
    f3e8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f3ec:	f013 0f10 	tst.w	r3, #16
    f3f0:	d00c      	beq.n	f40c <isr+0x2e4>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    f3f2:	b10f      	cbz	r7, f3f8 <isr+0x2d0>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f3f4:	2301      	movs	r3, #1
    f3f6:	e7ee      	b.n	f3d6 <isr+0x2ae>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    f3f8:	4620      	mov	r0, r4
    f3fa:	f009 fcd9 	bl	18db0 <ctrl_irk_whitelisted>
    f3fe:	b108      	cbz	r0, f404 <isr+0x2dc>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f400:	2301      	movs	r3, #1
    f402:	e7e8      	b.n	f3d6 <isr+0x2ae>
    f404:	2300      	movs	r3, #0
    f406:	e7e6      	b.n	f3d6 <isr+0x2ae>
    f408:	2301      	movs	r3, #1
    f40a:	e7e4      	b.n	f3d6 <isr+0x2ae>
    f40c:	2300      	movs	r3, #0
    f40e:	e7e2      	b.n	f3d6 <isr+0x2ae>
			err = isr_rx_scan(devmatch_ok, devmatch_id, irkmatch_ok,
    f410:	f8cd 8004 	str.w	r8, [sp, #4]
    f414:	9400      	str	r4, [sp, #0]
    f416:	462b      	mov	r3, r5
    f418:	464a      	mov	r2, r9
    f41a:	4651      	mov	r1, sl
    f41c:	4638      	mov	r0, r7
    f41e:	f006 ffb7 	bl	16390 <isr_rx_scan>
    f422:	e7b2      	b.n	f38a <isr+0x262>
		isr_rx_conn(crc_ok, trx_done, rssi_ready);
    f424:	4642      	mov	r2, r8
    f426:	4621      	mov	r1, r4
    f428:	4630      	mov	r0, r6
    f42a:	f004 fabb 	bl	139a4 <isr_rx_conn>
    f42e:	e08c      	b.n	f54a <isr+0x422>
    f430:	20000dec 	.word	0x20000dec
		LL_ASSERT(0);
    f434:	4040      	eors	r0, r0
    f436:	f380 8811 	msr	BASEPRI, r0
    f43a:	f04f 0004 	mov.w	r0, #4
    f43e:	df02      	svc	2
	switch (_radio.role) {
    f440:	4bb3      	ldr	r3, [pc, #716]	; (f710 <isr+0x5e8>)
    f442:	7bdb      	ldrb	r3, [r3, #15]
    f444:	b2db      	uxtb	r3, r3
    f446:	2b04      	cmp	r3, #4
    f448:	f200 82b2 	bhi.w	f9b0 <isr+0x888>
    f44c:	e8df f013 	tbh	[pc, r3, lsl #1]
    f450:	000502a0 	.word	0x000502a0
    f454:	00b5006f 	.word	0x00b5006f
    f458:	00b5      	.short	0x00b5
	if ((_radio.state == STATE_CLOSE) &&
    f45a:	4bad      	ldr	r3, [pc, #692]	; (f710 <isr+0x5e8>)
    f45c:	7c1b      	ldrb	r3, [r3, #16]
    f45e:	2b03      	cmp	r3, #3
    f460:	d00f      	beq.n	f482 <isr+0x35a>
		radio_filter_disable();
    f462:	f7ff fc1f 	bl	eca4 <radio_filter_disable>
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
    f466:	4aaa      	ldr	r2, [pc, #680]	; (f710 <isr+0x5e8>)
    f468:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
		pdu_adv = (struct pdu_adv *)
    f46c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    f470:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
    f474:	3320      	adds	r3, #32
    f476:	4413      	add	r3, r2
		if ((_radio.state == STATE_CLOSE) &&
    f478:	7c12      	ldrb	r2, [r2, #16]
    f47a:	2a03      	cmp	r2, #3
    f47c:	d00f      	beq.n	f49e <isr+0x376>
	u32_t dont_close = 0;
    f47e:	2300      	movs	r3, #0
    f480:	e060      	b.n	f544 <isr+0x41c>
	    (_radio.advertiser.chan_map_current != 0)) {
    f482:	4ba3      	ldr	r3, [pc, #652]	; (f710 <isr+0x5e8>)
    f484:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if ((_radio.state == STATE_CLOSE) &&
    f488:	f013 0f0e 	tst.w	r3, #14
    f48c:	d0e9      	beq.n	f462 <isr+0x33a>
		adv_setup();
    f48e:	f002 fca5 	bl	11ddc <adv_setup>
		radio_tx_enable();
    f492:	f7ff fb49 	bl	eb28 <radio_tx_enable>
		radio_tmr_end_capture();
    f496:	f7ff fd0d 	bl	eeb4 <radio_tmr_end_capture>
		dont_close = 1;
    f49a:	2301      	movs	r3, #1
    f49c:	e052      	b.n	f544 <isr+0x41c>
		    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND)) {
    f49e:	79db      	ldrb	r3, [r3, #7]
    f4a0:	f003 030f 	and.w	r3, r3, #15
		if ((_radio.state == STATE_CLOSE) &&
    f4a4:	2b01      	cmp	r3, #1
    f4a6:	d040      	beq.n	f52a <isr+0x402>
			rand_isr_get(sizeof(random_delay), &random_delay);
    f4a8:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    f4ac:	2001      	movs	r0, #1
    f4ae:	f000 fb7d 	bl	fbac <rand_isr_get>
			random_delay %= 10;
    f4b2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    f4b6:	4a97      	ldr	r2, [pc, #604]	; (f714 <isr+0x5ec>)
    f4b8:	fba2 1203 	umull	r1, r2, r2, r3
    f4bc:	08d2      	lsrs	r2, r2, #3
    f4be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    f4c2:	0051      	lsls	r1, r2, #1
    f4c4:	1a5a      	subs	r2, r3, r1
    f4c6:	b2d2      	uxtb	r2, r2
			random_delay += 1;
    f4c8:	3201      	adds	r2, #1
    f4ca:	b2d2      	uxtb	r2, r2
    f4cc:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
					      TICKER_US_TO_TICKS(random_delay *
    f4d0:	b2d2      	uxtb	r2, r2
    f4d2:	4891      	ldr	r0, [pc, #580]	; (f718 <isr+0x5f0>)
    f4d4:	fba2 0100 	umull	r0, r1, r2, r0
    f4d8:	23e8      	movs	r3, #232	; 0xe8
    f4da:	fb03 1102 	mla	r1, r3, r2, r1
    f4de:	a38a      	add	r3, pc, #552	; (adr r3, f708 <isr+0x5e0>)
    f4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    f4e4:	f7f1 fe0a 	bl	10fc <__aeabi_uldivmod>
			ticker_status =
    f4e8:	f640 63a2 	movw	r3, #3746	; 0xea2
    f4ec:	9306      	str	r3, [sp, #24]
    f4ee:	4b8b      	ldr	r3, [pc, #556]	; (f71c <isr+0x5f4>)
    f4f0:	9305      	str	r3, [sp, #20]
    f4f2:	2400      	movs	r4, #0
    f4f4:	9404      	str	r4, [sp, #16]
    f4f6:	9403      	str	r4, [sp, #12]
    f4f8:	9402      	str	r4, [sp, #8]
    f4fa:	9401      	str	r4, [sp, #4]
    f4fc:	9400      	str	r4, [sp, #0]
    f4fe:	b283      	uxth	r3, r0
    f500:	2205      	movs	r2, #5
    f502:	4621      	mov	r1, r4
    f504:	4620      	mov	r0, r4
    f506:	f000 fe1d 	bl	10144 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f50a:	b130      	cbz	r0, f51a <isr+0x3f2>
    f50c:	2802      	cmp	r0, #2
    f50e:	d004      	beq.n	f51a <isr+0x3f2>
    f510:	4b7f      	ldr	r3, [pc, #508]	; (f710 <isr+0x5e8>)
    f512:	7b9b      	ldrb	r3, [r3, #14]
    f514:	b2db      	uxtb	r3, r3
    f516:	2b05      	cmp	r3, #5
    f518:	d101      	bne.n	f51e <isr+0x3f6>
	u32_t dont_close = 0;
    f51a:	2300      	movs	r3, #0
    f51c:	e012      	b.n	f544 <isr+0x41c>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f51e:	4040      	eors	r0, r0
    f520:	f380 8811 	msr	BASEPRI, r0
    f524:	f04f 0004 	mov.w	r0, #4
    f528:	df02      	svc	2
	u32_t dont_close = 0;
    f52a:	2300      	movs	r3, #0
    f52c:	e00a      	b.n	f544 <isr+0x41c>
	if (_radio.state == STATE_CLOSE) {
    f52e:	4b78      	ldr	r3, [pc, #480]	; (f710 <isr+0x5e8>)
    f530:	7c1b      	ldrb	r3, [r3, #16]
    f532:	2b03      	cmp	r3, #3
    f534:	d00c      	beq.n	f550 <isr+0x428>
		radio_filter_disable();
    f536:	f7ff fbb5 	bl	eca4 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    f53a:	4b75      	ldr	r3, [pc, #468]	; (f710 <isr+0x5e8>)
    f53c:	7c1b      	ldrb	r3, [r3, #16]
    f53e:	2b05      	cmp	r3, #5
    f540:	d031      	beq.n	f5a6 <isr+0x47e>
	u32_t dont_close = 0;
    f542:	2300      	movs	r3, #0
	if (dont_close) {
    f544:	2b00      	cmp	r3, #0
    f546:	f000 8249 	beq.w	f9dc <isr+0x8b4>
		LL_ASSERT(0);
		break;
	}

	DEBUG_RADIO_ISR(0);
}
    f54a:	b00a      	add	sp, #40	; 0x28
    f54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		radio_tmr_tifs_set(RADIO_TIFS);
    f550:	2096      	movs	r0, #150	; 0x96
    f552:	f7ff fbf7 	bl	ed44 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f556:	2300      	movs	r3, #0
    f558:	461a      	mov	r2, r3
    f55a:	4619      	mov	r1, r3
    f55c:	4618      	mov	r0, r3
    f55e:	f7ff fb47 	bl	ebf0 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    f562:	4b6b      	ldr	r3, [pc, #428]	; (f710 <isr+0x5e8>)
    f564:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    f568:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    f56c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    f570:	3008      	adds	r0, #8
    f572:	f7ff fabb 	bl	eaec <radio_pkt_rx_set>
		radio_rssi_measure();
    f576:	f7ff fb4b 	bl	ec10 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
    f57a:	f009 fe33 	bl	191e4 <ctrl_rl_enabled>
    f57e:	b940      	cbnz	r0, f592 <isr+0x46a>
		_radio.state = STATE_RX;
    f580:	2401      	movs	r4, #1
    f582:	4b63      	ldr	r3, [pc, #396]	; (f710 <isr+0x5e8>)
    f584:	741c      	strb	r4, [r3, #16]
		radio_rx_enable();
    f586:	f7ff fac9 	bl	eb1c <radio_rx_enable>
		radio_tmr_end_capture();
    f58a:	f7ff fc93 	bl	eeb4 <radio_tmr_end_capture>
		dont_close = 1;
    f58e:	4623      	mov	r3, r4
    f590:	e7d8      	b.n	f544 <isr+0x41c>
			u8_t count, *irks = ctrl_irks_get(&count);
    f592:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    f596:	f009 fba1 	bl	18cdc <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f59a:	4601      	mov	r1, r0
    f59c:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    f5a0:	f7ff fd34 	bl	f00c <radio_ar_configure>
    f5a4:	e7ec      	b.n	f580 <isr+0x458>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f5a6:	2400      	movs	r4, #0
    f5a8:	9400      	str	r4, [sp, #0]
    f5aa:	4623      	mov	r3, r4
    f5ac:	2204      	movs	r2, #4
    f5ae:	4621      	mov	r1, r4
    f5b0:	4620      	mov	r0, r4
    f5b2:	f000 fe15 	bl	101e0 <ticker_stop>
	u32_t dont_close = 0;
    f5b6:	4623      	mov	r3, r4
    f5b8:	e7c4      	b.n	f544 <isr+0x41c>
	if (_radio.conn_curr == 0) {
    f5ba:	4b55      	ldr	r3, [pc, #340]	; (f710 <isr+0x5e8>)
    f5bc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    f5c0:	2800      	cmp	r0, #0
    f5c2:	f000 81fb 	beq.w	f9bc <isr+0x894>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    f5c6:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    f5ca:	b141      	cbz	r1, f5de <isr+0x4b6>
    f5cc:	7bdb      	ldrb	r3, [r3, #15]
    f5ce:	b2db      	uxtb	r3, r3
    f5d0:	2b03      	cmp	r3, #3
    f5d2:	d046      	beq.n	f662 <isr+0x53a>
    f5d4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    f5d8:	f013 0f01 	tst.w	r3, #1
    f5dc:	d141      	bne.n	f662 <isr+0x53a>
	latency_event = _radio.conn_curr->latency_event;
    f5de:	f8b0 802a 	ldrh.w	r8, [r0, #42]	; 0x2a
	elapsed_event = latency_event + 1;
    f5e2:	f108 0401 	add.w	r4, r8, #1
    f5e6:	b2a4      	uxth	r4, r4
	if (_radio.packet_counter &&
    f5e8:	4b49      	ldr	r3, [pc, #292]	; (f710 <isr+0x5e8>)
    f5ea:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
    f5ee:	2b00      	cmp	r3, #0
    f5f0:	f000 80b8 	beq.w	f764 <isr+0x63c>
		if (_radio.role == ROLE_SLAVE) {
    f5f4:	4b46      	ldr	r3, [pc, #280]	; (f710 <isr+0x5e8>)
    f5f6:	7bdb      	ldrb	r3, [r3, #15]
    f5f8:	b2db      	uxtb	r3, r3
    f5fa:	2b03      	cmp	r3, #3
    f5fc:	d03c      	beq.n	f678 <isr+0x550>
		} else if (reason_peer) {
    f5fe:	2900      	cmp	r1, #0
    f600:	f000 80ad 	beq.w	f75e <isr+0x636>
			_radio.conn_curr->master.terminate_ack = 1;
    f604:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    f608:	f043 0301 	orr.w	r3, r3, #1
    f60c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
    f610:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
    f612:	4635      	mov	r5, r6
		_radio.conn_curr->connect_expire = 0;
    f614:	4b3e      	ldr	r3, [pc, #248]	; (f710 <isr+0x5e8>)
    f616:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f61a:	2200      	movs	r2, #0
    f61c:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
    f61e:	4b3c      	ldr	r3, [pc, #240]	; (f710 <isr+0x5e8>)
    f620:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    f624:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    f628:	2b00      	cmp	r3, #0
    f62a:	f000 80d8 	beq.w	f7de <isr+0x6b6>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    f62e:	429c      	cmp	r4, r3
    f630:	f080 80c9 	bcs.w	f7c6 <isr+0x69e>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    f634:	1b1b      	subs	r3, r3, r4
    f636:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
    f63a:	4b35      	ldr	r3, [pc, #212]	; (f710 <isr+0x5e8>)
    f63c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    f640:	2100      	movs	r1, #0
    f642:	8551      	strh	r1, [r2, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    f644:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f648:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    f64c:	2a06      	cmp	r2, #6
    f64e:	f240 8130 	bls.w	f8b2 <isr+0x78a>
			else if (_radio.role == ROLE_SLAVE) {
    f652:	4a2f      	ldr	r2, [pc, #188]	; (f710 <isr+0x5e8>)
    f654:	7bd2      	ldrb	r2, [r2, #15]
    f656:	b2d2      	uxtb	r2, r2
    f658:	2a03      	cmp	r2, #3
    f65a:	f000 80a2 	beq.w	f7a2 <isr+0x67a>
	force = 0;
    f65e:	2700      	movs	r7, #0
    f660:	e0be      	b.n	f7e0 <isr+0x6b8>
		terminate_ind_rx_enqueue(_radio.conn_curr, reason_peer);
    f662:	f004 f90b 	bl	1387c <terminate_ind_rx_enqueue>
		connection_release(_radio.conn_curr);
    f666:	4c2a      	ldr	r4, [pc, #168]	; (f710 <isr+0x5e8>)
    f668:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    f66c:	f002 f9b2 	bl	119d4 <connection_release>
		_radio.conn_curr = NULL;
    f670:	2300      	movs	r3, #0
    f672:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f676:	e765      	b.n	f544 <isr+0x41c>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    f678:	f7ff fc10 	bl	ee9c <radio_tmr_aa_restore>
    f67c:	4682      	mov	sl, r0
						     radio_tmr_ready_get();
    f67e:	f7ff fc13 	bl	eea8 <radio_tmr_ready_get>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    f682:	ebaa 0a00 	sub.w	sl, sl, r0
				_radio.conn_curr->slave.window_widening_event_us;
    f686:	4b22      	ldr	r3, [pc, #136]	; (f710 <isr+0x5e8>)
    f688:	f8d3 9110 	ldr.w	r9, [r3, #272]	; 0x110
			window_widening_event_us =
    f68c:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
				addr_us_get(_radio.conn_curr->phy_rx);
    f690:	f899 303a 	ldrb.w	r3, [r9, #58]	; 0x3a
    f694:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
    f698:	2b02      	cmp	r3, #2
    f69a:	d031      	beq.n	f700 <isr+0x5d8>
    f69c:	2b04      	cmp	r3, #4
    f69e:	d02c      	beq.n	f6fa <isr+0x5d2>
		return 40;
    f6a0:	2628      	movs	r6, #40	; 0x28
				preamble_to_addr_us +
    f6a2:	1987      	adds	r7, r0, r6
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    f6a4:	3730      	adds	r7, #48	; 0x30
			if (start_to_address_actual_us <=
    f6a6:	45ba      	cmp	sl, r7
    f6a8:	d83c      	bhi.n	f724 <isr+0x5fc>
					TICKER_US_TO_TICKS(window_widening_event_us);
    f6aa:	4e1d      	ldr	r6, [pc, #116]	; (f720 <isr+0x5f8>)
    f6ac:	a316      	add	r3, pc, #88	; (adr r3, f708 <isr+0x5e0>)
    f6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    f6b2:	fba0 0106 	umull	r0, r1, r0, r6
    f6b6:	f7f1 fd21 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
    f6ba:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
    f6bc:	eba7 000a 	sub.w	r0, r7, sl
    f6c0:	a311      	add	r3, pc, #68	; (adr r3, f708 <isr+0x5e0>)
    f6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    f6c6:	fba0 0106 	umull	r0, r1, r0, r6
    f6ca:	f7f1 fd17 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
    f6ce:	b286      	uxth	r6, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    f6d0:	2200      	movs	r2, #0
    f6d2:	f8c9 2060 	str.w	r2, [r9, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
    f6d6:	4b0e      	ldr	r3, [pc, #56]	; (f710 <isr+0x5e8>)
    f6d8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    f6dc:	668a      	str	r2, [r1, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
    f6de:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f6e2:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    f6e6:	b38a      	cbz	r2, f74c <isr+0x624>
				if (pdu_data_tx->len ||
    f6e8:	7952      	ldrb	r2, [r2, #5]
    f6ea:	b91a      	cbnz	r2, f6f4 <isr+0x5cc>
				    _radio.conn_curr->packet_tx_head_offset) {
    f6ec:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
				if (pdu_data_tx->len ||
    f6f0:	2a00      	cmp	r2, #0
    f6f2:	d08f      	beq.n	f614 <isr+0x4ec>
					_radio.conn_curr->latency_event = 0;
    f6f4:	2200      	movs	r2, #0
    f6f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    f6f8:	e78c      	b.n	f614 <isr+0x4ec>
		return 376;
    f6fa:	f44f 76bc 	mov.w	r6, #376	; 0x178
    f6fe:	e7d0      	b.n	f6a2 <isr+0x57a>
		return 24;
    f700:	2618      	movs	r6, #24
    f702:	e7ce      	b.n	f6a2 <isr+0x57a>
    f704:	f3af 8000 	nop.w
    f708:	1afd498d 	.word	0x1afd498d
    f70c:	00000007 	.word	0x00000007
    f710:	20000dec 	.word	0x20000dec
    f714:	cccccccd 	.word	0xcccccccd
    f718:	d4a51000 	.word	0xd4a51000
    f71c:	00011125 	.word	0x00011125
    f720:	3b9aca00 	.word	0x3b9aca00
					TICKER_US_TO_TICKS(start_to_address_actual_us);
    f724:	4faa      	ldr	r7, [pc, #680]	; (f9d0 <isr+0x8a8>)
    f726:	a3a8      	add	r3, pc, #672	; (adr r3, f9c8 <isr+0x8a0>)
    f728:	e9d3 2300 	ldrd	r2, r3, [r3]
    f72c:	fbaa 0107 	umull	r0, r1, sl, r7
    f730:	f7f1 fce4 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
    f734:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US +
    f736:	f106 0030 	add.w	r0, r6, #48	; 0x30
    f73a:	a3a3      	add	r3, pc, #652	; (adr r3, f9c8 <isr+0x8a0>)
    f73c:	e9d3 2300 	ldrd	r2, r3, [r3]
    f740:	fba0 0107 	umull	r0, r1, r0, r7
    f744:	f7f1 fcda 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
    f748:	b286      	uxth	r6, r0
    f74a:	e7c1      	b.n	f6d0 <isr+0x5a8>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    f74c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
    f750:	f012 0f01 	tst.w	r2, #1
    f754:	f43f af5e 	beq.w	f614 <isr+0x4ec>
					_radio.conn_curr->latency;
    f758:	8cda      	ldrh	r2, [r3, #38]	; 0x26
				_radio.conn_curr->latency_event =
    f75a:	855a      	strh	r2, [r3, #42]	; 0x2a
    f75c:	e75a      	b.n	f614 <isr+0x4ec>
	ticks_drift_minus = 0;
    f75e:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
    f760:	4635      	mov	r5, r6
    f762:	e757      	b.n	f614 <isr+0x4ec>
	else if (_radio.conn_curr->connect_expire) {
    f764:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
    f766:	b195      	cbz	r5, f78e <isr+0x666>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    f768:	42ac      	cmp	r4, r5
    f76a:	d204      	bcs.n	f776 <isr+0x64e>
			_radio.conn_curr->connect_expire -= elapsed_event;
    f76c:	1b2d      	subs	r5, r5, r4
    f76e:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
    f770:	2500      	movs	r5, #0
	ticks_drift_plus = 0;
    f772:	462e      	mov	r6, r5
    f774:	e753      	b.n	f61e <isr+0x4f6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    f776:	213e      	movs	r1, #62	; 0x3e
    f778:	f004 f880 	bl	1387c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    f77c:	4c95      	ldr	r4, [pc, #596]	; (f9d4 <isr+0x8ac>)
    f77e:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    f782:	f002 f927 	bl	119d4 <connection_release>
			_radio.conn_curr = NULL;
    f786:	2300      	movs	r3, #0
    f788:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f78c:	e6da      	b.n	f544 <isr+0x41c>
		if (!_radio.conn_curr->supervision_expire) {
    f78e:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
    f792:	b926      	cbnz	r6, f79e <isr+0x676>
				_radio.conn_curr->supervision_reload;
    f794:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
    f796:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
    f79a:	4635      	mov	r5, r6
    f79c:	e73f      	b.n	f61e <isr+0x4f6>
	ticks_drift_minus = 0;
    f79e:	462e      	mov	r6, r5
    f7a0:	e73d      	b.n	f61e <isr+0x4f6>
				if (latency_event != 0) {
    f7a2:	f1b8 0f00 	cmp.w	r8, #0
    f7a6:	f040 8086 	bne.w	f8b6 <isr+0x78e>
					force = _radio.conn_curr->slave.force & 0x01;
    f7aa:	6edf      	ldr	r7, [r3, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
    f7ac:	087a      	lsrs	r2, r7, #1
    f7ae:	66da      	str	r2, [r3, #108]	; 0x6c
					if (force) {
    f7b0:	f017 0701 	ands.w	r7, r7, #1
    f7b4:	d014      	beq.n	f7e0 <isr+0x6b8>
						_radio.conn_curr->slave.force |=
    f7b6:	4b87      	ldr	r3, [pc, #540]	; (f9d4 <isr+0x8ac>)
    f7b8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    f7bc:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    f7be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f7c2:	66d3      	str	r3, [r2, #108]	; 0x6c
    f7c4:	e00c      	b.n	f7e0 <isr+0x6b8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    f7c6:	2108      	movs	r1, #8
    f7c8:	f004 f858 	bl	1387c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    f7cc:	4c81      	ldr	r4, [pc, #516]	; (f9d4 <isr+0x8ac>)
    f7ce:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    f7d2:	f002 f8ff 	bl	119d4 <connection_release>
			_radio.conn_curr = NULL;
    f7d6:	2300      	movs	r3, #0
    f7d8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f7dc:	e6b2      	b.n	f544 <isr+0x41c>
	force = 0;
    f7de:	2700      	movs	r7, #0
	if (_radio.conn_curr->procedure_expire != 0) {
    f7e0:	4b7c      	ldr	r3, [pc, #496]	; (f9d4 <isr+0x8ac>)
    f7e2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    f7e6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    f7ea:	b123      	cbz	r3, f7f6 <isr+0x6ce>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    f7ec:	429c      	cmp	r4, r3
    f7ee:	d264      	bcs.n	f8ba <isr+0x792>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    f7f0:	1b1b      	subs	r3, r3, r4
    f7f2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
    f7f6:	4b77      	ldr	r3, [pc, #476]	; (f9d4 <isr+0x8ac>)
    f7f8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    f7fc:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    f800:	b123      	cbz	r3, f80c <isr+0x6e4>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    f802:	429c      	cmp	r4, r3
    f804:	d265      	bcs.n	f8d2 <isr+0x7aa>
			_radio.conn_curr->apto_expire -= elapsed_event;
    f806:	1b1b      	subs	r3, r3, r4
    f808:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
    f80c:	4b71      	ldr	r3, [pc, #452]	; (f9d4 <isr+0x8ac>)
    f80e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    f812:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
    f816:	b12b      	cbz	r3, f824 <isr+0x6fc>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    f818:	429c      	cmp	r4, r3
    f81a:	f080 8090 	bcs.w	f93e <isr+0x816>
			_radio.conn_curr->appto_expire -= elapsed_event;
    f81e:	1b1b      	subs	r3, r3, r4
    f820:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    f824:	4b6b      	ldr	r3, [pc, #428]	; (f9d4 <isr+0x8ac>)
    f826:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    f82a:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
    f82e:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
    f832:	4299      	cmp	r1, r3
    f834:	d006      	beq.n	f844 <isr+0x71c>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    f836:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
    f83a:	3b01      	subs	r3, #1
    f83c:	b2db      	uxtb	r3, r3
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    f83e:	2b01      	cmp	r3, #1
    f840:	f240 809b 	bls.w	f97a <isr+0x852>
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    f844:	b937      	cbnz	r7, f854 <isr+0x72c>
    f846:	4b63      	ldr	r3, [pc, #396]	; (f9d4 <isr+0x8ac>)
    f848:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f84c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    f84e:	4598      	cmp	r8, r3
    f850:	f000 8096 	beq.w	f980 <isr+0x858>
		lazy = _radio.conn_curr->latency_event + 1;
    f854:	4b5f      	ldr	r3, [pc, #380]	; (f9d4 <isr+0x8ac>)
    f856:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f85a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    f85c:	3301      	adds	r3, #1
    f85e:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    f860:	b925      	cbnz	r5, f86c <isr+0x744>
    f862:	b91e      	cbnz	r6, f86c <isr+0x744>
    f864:	b913      	cbnz	r3, f86c <isr+0x744>
	    (lazy != 0) || (force != 0)) {
    f866:	2f00      	cmp	r7, #0
    f868:	f000 80aa 	beq.w	f9c0 <isr+0x898>
				    _radio.conn_curr->handle;
    f86c:	4a59      	ldr	r2, [pc, #356]	; (f9d4 <isr+0x8ac>)
    f86e:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    f872:	f892 4020 	ldrb.w	r4, [r2, #32]
    f876:	3407      	adds	r4, #7
    f878:	b2e4      	uxtb	r4, r4
		ticker_status =
    f87a:	9406      	str	r4, [sp, #24]
    f87c:	4a56      	ldr	r2, [pc, #344]	; (f9d8 <isr+0x8b0>)
    f87e:	9205      	str	r2, [sp, #20]
    f880:	9704      	str	r7, [sp, #16]
    f882:	9303      	str	r3, [sp, #12]
    f884:	2000      	movs	r0, #0
    f886:	9002      	str	r0, [sp, #8]
    f888:	9001      	str	r0, [sp, #4]
    f88a:	9600      	str	r6, [sp, #0]
    f88c:	462b      	mov	r3, r5
    f88e:	4622      	mov	r2, r4
    f890:	4601      	mov	r1, r0
    f892:	f000 fc57 	bl	10144 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f896:	4603      	mov	r3, r0
    f898:	2800      	cmp	r0, #0
    f89a:	f43f ae53 	beq.w	f544 <isr+0x41c>
    f89e:	2802      	cmp	r0, #2
    f8a0:	f000 8090 	beq.w	f9c4 <isr+0x89c>
    f8a4:	4b4b      	ldr	r3, [pc, #300]	; (f9d4 <isr+0x8ac>)
    f8a6:	7b9b      	ldrb	r3, [r3, #14]
    f8a8:	b2db      	uxtb	r3, r3
    f8aa:	429c      	cmp	r4, r3
    f8ac:	d16a      	bne.n	f984 <isr+0x85c>
	u32_t dont_close = 0;
    f8ae:	2300      	movs	r3, #0
    f8b0:	e648      	b.n	f544 <isr+0x41c>
				force = 1;
    f8b2:	2701      	movs	r7, #1
    f8b4:	e794      	b.n	f7e0 <isr+0x6b8>
					force = 1;
    f8b6:	2701      	movs	r7, #1
    f8b8:	e792      	b.n	f7e0 <isr+0x6b8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    f8ba:	2122      	movs	r1, #34	; 0x22
    f8bc:	f003 ffde 	bl	1387c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    f8c0:	4c44      	ldr	r4, [pc, #272]	; (f9d4 <isr+0x8ac>)
    f8c2:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    f8c6:	f002 f885 	bl	119d4 <connection_release>
			_radio.conn_curr = NULL;
    f8ca:	2300      	movs	r3, #0
    f8cc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f8d0:	e638      	b.n	f544 <isr+0x41c>
			_radio.conn_curr->apto_expire = 0;
    f8d2:	2300      	movs	r3, #0
    f8d4:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    f8d8:	4b3e      	ldr	r3, [pc, #248]	; (f9d4 <isr+0x8ac>)
    f8da:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
    f8de:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    f8e2:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
    f8e4:	429a      	cmp	r2, r3
    f8e6:	d318      	bcc.n	f91a <isr+0x7f2>
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
    f8e8:	4b3a      	ldr	r3, [pc, #232]	; (f9d4 <isr+0x8ac>)
    f8ea:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
    f8ee:	1ad3      	subs	r3, r2, r3
    f8f0:	b2db      	uxtb	r3, r3
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
	if (count > packet_rx_acquired_count_get()) {
    f8f2:	2b01      	cmp	r3, #1
    f8f4:	d91b      	bls.n	f92e <isr+0x806>
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    f8f6:	4b37      	ldr	r3, [pc, #220]	; (f9d4 <isr+0x8ac>)
    f8f8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    f8fc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    f900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
    f904:	b1ab      	cbz	r3, f932 <isr+0x80a>
			radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
    f906:	4a33      	ldr	r2, [pc, #204]	; (f9d4 <isr+0x8ac>)
    f908:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
    f90c:	8c12      	ldrh	r2, [r2, #32]
    f90e:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_APTO;
    f910:	220a      	movs	r2, #10
    f912:	711a      	strb	r2, [r3, #4]
			packet_rx_enqueue();
    f914:	f003 ff3e 	bl	13794 <packet_rx_enqueue>
    f918:	e778      	b.n	f80c <isr+0x6e4>
		return (_radio.packet_rx_count -
    f91a:	492e      	ldr	r1, [pc, #184]	; (f9d4 <isr+0x8ac>)
    f91c:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
    f920:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
    f924:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
    f926:	fa52 f383 	uxtab	r3, r2, r3
    f92a:	b2db      	uxtb	r3, r3
    f92c:	e7e1      	b.n	f8f2 <isr+0x7ca>
		return 0;
    f92e:	2300      	movs	r3, #0
    f930:	e7e8      	b.n	f904 <isr+0x7dc>
			LL_ASSERT(radio_pdu_node_rx);
    f932:	4040      	eors	r0, r0
    f934:	f380 8811 	msr	BASEPRI, r0
    f938:	f04f 0004 	mov.w	r0, #4
    f93c:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
    f93e:	2300      	movs	r3, #0
    f940:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
    f944:	4b23      	ldr	r3, [pc, #140]	; (f9d4 <isr+0x8ac>)
    f946:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f94a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    f94e:	2a00      	cmp	r2, #0
    f950:	f47f af68 	bne.w	f824 <isr+0x6fc>
			    (_radio.conn_curr->llcp_req ==
    f954:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
			     _radio.conn_curr->llcp_ack)) {
    f958:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
			if ((_radio.conn_curr->procedure_expire == 0) &&
    f95c:	4291      	cmp	r1, r2
    f95e:	f47f af61 	bne.w	f824 <isr+0x6fc>
				_radio.conn_curr->llcp_type = LLCP_PING;
    f962:	2207      	movs	r2, #7
    f964:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
    f968:	4b1a      	ldr	r3, [pc, #104]	; (f9d4 <isr+0x8ac>)
    f96a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    f96e:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    f972:	3b01      	subs	r3, #1
    f974:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
    f978:	e754      	b.n	f824 <isr+0x6fc>
		_radio.conn_curr->latency_event = 0;
    f97a:	2300      	movs	r3, #0
    f97c:	8553      	strh	r3, [r2, #42]	; 0x2a
    f97e:	e761      	b.n	f844 <isr+0x71c>
	lazy = 0;
    f980:	2300      	movs	r3, #0
    f982:	e76d      	b.n	f860 <isr+0x738>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f984:	4040      	eors	r0, r0
    f986:	f380 8811 	msr	BASEPRI, r0
    f98a:	f04f 0004 	mov.w	r0, #4
    f98e:	df02      	svc	2
		LL_ASSERT((_radio.state == STATE_STOP) ||
    f990:	4b10      	ldr	r3, [pc, #64]	; (f9d4 <isr+0x8ac>)
    f992:	7c1b      	ldrb	r3, [r3, #16]
    f994:	3b04      	subs	r3, #4
    f996:	b2db      	uxtb	r3, r3
    f998:	2b01      	cmp	r3, #1
    f99a:	d803      	bhi.n	f9a4 <isr+0x87c>
		_radio.state = STATE_NONE;
    f99c:	2200      	movs	r2, #0
    f99e:	4b0d      	ldr	r3, [pc, #52]	; (f9d4 <isr+0x8ac>)
    f9a0:	741a      	strb	r2, [r3, #16]
    f9a2:	e5d2      	b.n	f54a <isr+0x422>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    f9a4:	4040      	eors	r0, r0
    f9a6:	f380 8811 	msr	BASEPRI, r0
    f9aa:	f04f 0004 	mov.w	r0, #4
    f9ae:	df02      	svc	2
		LL_ASSERT(0);
    f9b0:	4040      	eors	r0, r0
    f9b2:	f380 8811 	msr	BASEPRI, r0
    f9b6:	f04f 0004 	mov.w	r0, #4
    f9ba:	df02      	svc	2
	u32_t dont_close = 0;
    f9bc:	2300      	movs	r3, #0
    f9be:	e5c1      	b.n	f544 <isr+0x41c>
    f9c0:	2300      	movs	r3, #0
    f9c2:	e5bf      	b.n	f544 <isr+0x41c>
    f9c4:	2300      	movs	r3, #0
    f9c6:	e5bd      	b.n	f544 <isr+0x41c>
    f9c8:	1afd498d 	.word	0x1afd498d
    f9cc:	00000007 	.word	0x00000007
    f9d0:	3b9aca00 	.word	0x3b9aca00
    f9d4:	20000dec 	.word	0x20000dec
    f9d8:	00011145 	.word	0x00011145
	_radio.role = ROLE_NONE;
    f9dc:	4d0e      	ldr	r5, [pc, #56]	; (fa18 <isr+0x8f0>)
    f9de:	2400      	movs	r4, #0
    f9e0:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
    f9e2:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
    f9e4:	736c      	strb	r4, [r5, #13]
	radio_tmr_stop();
    f9e6:	f7ff fa07 	bl	edf8 <radio_tmr_stop>
	event_inactive(0, 0, 0, NULL);
    f9ea:	4623      	mov	r3, r4
    f9ec:	4622      	mov	r2, r4
    f9ee:	4621      	mov	r1, r4
    f9f0:	4620      	mov	r0, r4
    f9f2:	f001 fe29 	bl	11648 <event_inactive>
	clock_control_off(_radio.hf_clock, NULL);
    f9f6:	6828      	ldr	r0, [r5, #0]
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
    f9f8:	6843      	ldr	r3, [r0, #4]

	return api->off(dev, sys);
    f9fa:	685b      	ldr	r3, [r3, #4]
    f9fc:	4621      	mov	r1, r4
    f9fe:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    fa00:	2201      	movs	r2, #1
    fa02:	4611      	mov	r1, r2
    fa04:	4620      	mov	r0, r4
    fa06:	f7fe fd01 	bl	e40c <mayfly_enable>
    fa0a:	e59e      	b.n	f54a <isr+0x422>
		LL_ASSERT(0);
    fa0c:	4040      	eors	r0, r0
    fa0e:	f380 8811 	msr	BASEPRI, r0
    fa12:	f04f 0004 	mov.w	r0, #4
    fa16:	df02      	svc	2
    fa18:	20000dec 	.word	0x20000dec

0000fa1c <init>:
{
    fa1c:	b410      	push	{r4}
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
    fa1e:	1d1c      	adds	r4, r3, #4
    fa20:	42a2      	cmp	r2, r4
    fa22:	d90e      	bls.n	fa42 <init+0x26>
	*rng = (struct rand *)context;
    fa24:	6001      	str	r1, [r0, #0]
	p->count = len - offsetof(struct rand, rand);
    fa26:	3a04      	subs	r2, #4
    fa28:	700a      	strb	r2, [r1, #0]
	p->threshold = threshold;
    fa2a:	704b      	strb	r3, [r1, #1]
	p->first = p->last = 0;
    fa2c:	2300      	movs	r3, #0
    fa2e:	70cb      	strb	r3, [r1, #3]
    fa30:	708b      	strb	r3, [r1, #2]
	if (!rng_isr || !rng_thr) {
    fa32:	4b0c      	ldr	r3, [pc, #48]	; (fa64 <init+0x48>)
    fa34:	681b      	ldr	r3, [r3, #0]
    fa36:	b153      	cbz	r3, fa4e <init+0x32>
    fa38:	4b0b      	ldr	r3, [pc, #44]	; (fa68 <init+0x4c>)
    fa3a:	681b      	ldr	r3, [r3, #0]
    fa3c:	b13b      	cbz	r3, fa4e <init+0x32>
}
    fa3e:	bc10      	pop	{r4}
    fa40:	4770      	bx	lr
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
    fa42:	4040      	eors	r0, r0
    fa44:	f380 8811 	msr	BASEPRI, r0
    fa48:	f04f 0004 	mov.w	r0, #4
    fa4c:	df02      	svc	2
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    fa4e:	4b07      	ldr	r3, [pc, #28]	; (fa6c <init+0x50>)
    fa50:	2201      	movs	r2, #1
    fa52:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_RNG->EVENTS_VALRDY = 0;
    fa56:	2100      	movs	r1, #0
    fa58:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    fa5c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_RNG->TASKS_START = 1;
    fa60:	601a      	str	r2, [r3, #0]
}
    fa62:	e7ec      	b.n	fa3e <init+0x22>
    fa64:	20000d3c 	.word	0x20000d3c
    fa68:	20000d40 	.word	0x20000d40
    fa6c:	4000d000 	.word	0x4000d000

0000fa70 <get>:
	LL_ASSERT(rng);
    fa70:	b1d0      	cbz	r0, faa8 <get+0x38>
{
    fa72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa76:	4607      	mov	r7, r0
	first = rng->first;
    fa78:	f890 e002 	ldrb.w	lr, [r0, #2]
	last = rng->last;
    fa7c:	78c5      	ldrb	r5, [r0, #3]
	if (first <= last) {
    fa7e:	45ae      	cmp	lr, r5
    fa80:	d82e      	bhi.n	fae0 <get+0x70>
		d = &rand[octets];
    fa82:	440a      	add	r2, r1
		s = &rng->rand[first];
    fa84:	eb00 060e 	add.w	r6, r0, lr
    fa88:	3604      	adds	r6, #4
		avail = last - first;
    fa8a:	eba5 040e 	sub.w	r4, r5, lr
    fa8e:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    fa90:	42a1      	cmp	r1, r4
    fa92:	d20f      	bcs.n	fab4 <get+0x44>
			remaining = avail - octets;
    fa94:	b2cb      	uxtb	r3, r1
    fa96:	1ae4      	subs	r4, r4, r3
    fa98:	fa5f fc84 	uxtb.w	ip, r4
			avail = octets;
    fa9c:	461c      	mov	r4, r3
		first += avail;
    fa9e:	44a6      	add	lr, r4
    faa0:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
    faa4:	1b08      	subs	r0, r1, r4
		while (avail--) {
    faa6:	e00d      	b.n	fac4 <get+0x54>
	LL_ASSERT(rng);
    faa8:	4040      	eors	r0, r0
    faaa:	f380 8811 	msr	BASEPRI, r0
    faae:	f04f 0004 	mov.w	r0, #4
    fab2:	df02      	svc	2
			remaining = 0;
    fab4:	f04f 0c00 	mov.w	ip, #0
    fab8:	e7f1      	b.n	fa9e <get+0x2e>
			*(--d) = *s++;
    faba:	7835      	ldrb	r5, [r6, #0]
    fabc:	f802 5d01 	strb.w	r5, [r2, #-1]!
		while (avail--) {
    fac0:	461c      	mov	r4, r3
			*(--d) = *s++;
    fac2:	3601      	adds	r6, #1
		while (avail--) {
    fac4:	1e63      	subs	r3, r4, #1
    fac6:	b2db      	uxtb	r3, r3
    fac8:	2c00      	cmp	r4, #0
    faca:	d1f6      	bne.n	faba <get+0x4a>
		rng->first = first;
    facc:	f887 e002 	strb.w	lr, [r7, #2]
	if (remaining < rng->threshold) {
    fad0:	787b      	ldrb	r3, [r7, #1]
    fad2:	459c      	cmp	ip, r3
    fad4:	d202      	bcs.n	fadc <get+0x6c>
		NRF_RNG->TASKS_START = 1;
    fad6:	2201      	movs	r2, #1
    fad8:	4b24      	ldr	r3, [pc, #144]	; (fb6c <get+0xfc>)
    fada:	601a      	str	r2, [r3, #0]
}
    fadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		d = &rand[octets];
    fae0:	440a      	add	r2, r1
		s = &rng->rand[first];
    fae2:	eb00 080e 	add.w	r8, r0, lr
    fae6:	f108 0804 	add.w	r8, r8, #4
		avail = rng->count - first;
    faea:	7804      	ldrb	r4, [r0, #0]
    faec:	eba4 040e 	sub.w	r4, r4, lr
    faf0:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    faf2:	42a1      	cmp	r1, r4
    faf4:	d20d      	bcs.n	fb12 <get+0xa2>
			remaining = avail + last - octets;
    faf6:	eb05 0c04 	add.w	ip, r5, r4
    fafa:	fa5f fc8c 	uxtb.w	ip, ip
    fafe:	b2cc      	uxtb	r4, r1
    fb00:	ebac 0c04 	sub.w	ip, ip, r4
    fb04:	fa5f fc8c 	uxtb.w	ip, ip
			first += avail;
    fb08:	44a6      	add	lr, r4
    fb0a:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
    fb0e:	1b08      	subs	r0, r1, r4
		while (avail--) {
    fb10:	e00a      	b.n	fb28 <get+0xb8>
			remaining = last;
    fb12:	46ac      	mov	ip, r5
			first = 0;
    fb14:	f04f 0e00 	mov.w	lr, #0
    fb18:	e7f9      	b.n	fb0e <get+0x9e>
			*(--d) = *s++;
    fb1a:	f898 6000 	ldrb.w	r6, [r8]
    fb1e:	f802 6d01 	strb.w	r6, [r2, #-1]!
		while (avail--) {
    fb22:	461c      	mov	r4, r3
			*(--d) = *s++;
    fb24:	f108 0801 	add.w	r8, r8, #1
		while (avail--) {
    fb28:	1e63      	subs	r3, r4, #1
    fb2a:	b2db      	uxtb	r3, r3
    fb2c:	2c00      	cmp	r4, #0
    fb2e:	d1f4      	bne.n	fb1a <get+0xaa>
		if (octets && last) {
    fb30:	b1c8      	cbz	r0, fb66 <get+0xf6>
    fb32:	b1c5      	cbz	r5, fb66 <get+0xf6>
			s = &rng->rand[0];
    fb34:	1d3e      	adds	r6, r7, #4
			if (octets < last) {
    fb36:	42a8      	cmp	r0, r5
    fb38:	d206      	bcs.n	fb48 <get+0xd8>
				remaining = last - octets;
    fb3a:	fa5f fe80 	uxtb.w	lr, r0
    fb3e:	eba5 040e 	sub.w	r4, r5, lr
    fb42:	fa5f fc84 	uxtb.w	ip, r4
    fb46:	e001      	b.n	fb4c <get+0xdc>
				remaining = 0;
    fb48:	46a4      	mov	ip, r4
	last = rng->last;
    fb4a:	46ae      	mov	lr, r5
			octets -= last;
    fb4c:	eba0 000e 	sub.w	r0, r0, lr
			while (last--) {
    fb50:	4671      	mov	r1, lr
    fb52:	e004      	b.n	fb5e <get+0xee>
				*(--d) = *s++;
    fb54:	7831      	ldrb	r1, [r6, #0]
    fb56:	f802 1d01 	strb.w	r1, [r2, #-1]!
    fb5a:	3601      	adds	r6, #1
			while (last--) {
    fb5c:	4619      	mov	r1, r3
    fb5e:	1e4b      	subs	r3, r1, #1
    fb60:	b2db      	uxtb	r3, r3
    fb62:	2900      	cmp	r1, #0
    fb64:	d1f6      	bne.n	fb54 <get+0xe4>
		rng->first = first;
    fb66:	f887 e002 	strb.w	lr, [r7, #2]
    fb6a:	e7b1      	b.n	fad0 <get+0x60>
    fb6c:	4000d000 	.word	0x4000d000

0000fb70 <rand_init>:
{
    fb70:	b508      	push	{r3, lr}
	init(&rng_thr, context, context_len, threshold);
    fb72:	4613      	mov	r3, r2
    fb74:	460a      	mov	r2, r1
    fb76:	4601      	mov	r1, r0
    fb78:	4801      	ldr	r0, [pc, #4]	; (fb80 <rand_init+0x10>)
    fb7a:	f7ff ff4f 	bl	fa1c <init>
    fb7e:	bd08      	pop	{r3, pc}
    fb80:	20000d40 	.word	0x20000d40

0000fb84 <rand_isr_init>:
{
    fb84:	b508      	push	{r3, lr}
	init(&rng_isr, context, context_len, threshold);
    fb86:	4613      	mov	r3, r2
    fb88:	460a      	mov	r2, r1
    fb8a:	4601      	mov	r1, r0
    fb8c:	4801      	ldr	r0, [pc, #4]	; (fb94 <rand_isr_init+0x10>)
    fb8e:	f7ff ff45 	bl	fa1c <init>
    fb92:	bd08      	pop	{r3, pc}
    fb94:	20000d3c 	.word	0x20000d3c

0000fb98 <rand_get>:
{
    fb98:	b508      	push	{r3, lr}
	return get(rng_thr, octets, rand);
    fb9a:	460a      	mov	r2, r1
    fb9c:	4601      	mov	r1, r0
    fb9e:	4b02      	ldr	r3, [pc, #8]	; (fba8 <rand_get+0x10>)
    fba0:	6818      	ldr	r0, [r3, #0]
    fba2:	f7ff ff65 	bl	fa70 <get>
}
    fba6:	bd08      	pop	{r3, pc}
    fba8:	20000d40 	.word	0x20000d40

0000fbac <rand_isr_get>:
{
    fbac:	b508      	push	{r3, lr}
	return get(rng_isr, octets, rand);
    fbae:	460a      	mov	r2, r1
    fbb0:	4601      	mov	r1, r0
    fbb2:	4b02      	ldr	r3, [pc, #8]	; (fbbc <rand_isr_get+0x10>)
    fbb4:	6818      	ldr	r0, [r3, #0]
    fbb6:	f7ff ff5b 	bl	fa70 <get>
}
    fbba:	bd08      	pop	{r3, pc}
    fbbc:	20000d3c 	.word	0x20000d3c

0000fbc0 <isr_rand>:

void isr_rand(void *param)
{
    fbc0:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    fbc2:	4b10      	ldr	r3, [pc, #64]	; (fc04 <isr_rand+0x44>)
    fbc4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    fbc8:	b903      	cbnz	r3, fbcc <isr_rand+0xc>
    fbca:	bd08      	pop	{r3, pc}
		int ret;

		ret = isr(rng_isr, true);
    fbcc:	2101      	movs	r1, #1
    fbce:	4b0e      	ldr	r3, [pc, #56]	; (fc08 <isr_rand+0x48>)
    fbd0:	6818      	ldr	r0, [r3, #0]
    fbd2:	f7ff fa79 	bl	f0c8 <isr>
		if (ret != -EBUSY) {
    fbd6:	f110 0f10 	cmn.w	r0, #16
    fbda:	d008      	beq.n	fbee <isr_rand+0x2e>
			ret = isr(rng_thr, (ret == -ENOBUFS));
    fbdc:	f110 0f69 	cmn.w	r0, #105	; 0x69
    fbe0:	bf14      	ite	ne
    fbe2:	2100      	movne	r1, #0
    fbe4:	2101      	moveq	r1, #1
    fbe6:	4b09      	ldr	r3, [pc, #36]	; (fc0c <isr_rand+0x4c>)
    fbe8:	6818      	ldr	r0, [r3, #0]
    fbea:	f7ff fa6d 	bl	f0c8 <isr>
		}

		NRF_RNG->EVENTS_VALRDY = 0;
    fbee:	2200      	movs	r2, #0
    fbf0:	4b04      	ldr	r3, [pc, #16]	; (fc04 <isr_rand+0x44>)
    fbf2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (ret != -EBUSY) {
    fbf6:	f110 0f10 	cmn.w	r0, #16
    fbfa:	d0e6      	beq.n	fbca <isr_rand+0xa>
			NRF_RNG->TASKS_STOP = 1;
    fbfc:	2201      	movs	r2, #1
    fbfe:	605a      	str	r2, [r3, #4]
		}
	}
}
    fc00:	e7e3      	b.n	fbca <isr_rand+0xa>
    fc02:	bf00      	nop
    fc04:	4000d000 	.word	0x4000d000
    fc08:	20000d3c 	.word	0x20000d3c
    fc0c:	20000d40 	.word	0x20000d40

0000fc10 <ticker_by_slot_get>:
 * Static Functions
 ****************************************************************************/
static u8_t ticker_by_slot_get(struct ticker_node *node, u8_t ticker_id_head,
			       u32_t ticks_slot)
{
	while (ticker_id_head != TICKER_NULL) {
    fc10:	29ff      	cmp	r1, #255	; 0xff
    fc12:	d012      	beq.n	fc3a <ticker_by_slot_get+0x2a>
{
    fc14:	b430      	push	{r4, r5}
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		ticker = &node[ticker_id_head];
    fc16:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
    fc1a:	00a3      	lsls	r3, r4, #2
    fc1c:	18c4      	adds	r4, r0, r3
		ticks_to_expire = ticker->ticks_to_expire;
    fc1e:	68a5      	ldr	r5, [r4, #8]

		if (ticks_slot <= ticks_to_expire) {
    fc20:	42aa      	cmp	r2, r5
    fc22:	d906      	bls.n	fc32 <ticker_by_slot_get+0x22>
			return TICKER_NULL;
		}

		if (ticker->ticks_slot) {
    fc24:	8ae4      	ldrh	r4, [r4, #22]
    fc26:	b92c      	cbnz	r4, fc34 <ticker_by_slot_get+0x24>
			break;
		}

		ticks_slot -= ticks_to_expire;
    fc28:	1b52      	subs	r2, r2, r5
		ticker_id_head = ticker->next;
    fc2a:	5cc1      	ldrb	r1, [r0, r3]
	while (ticker_id_head != TICKER_NULL) {
    fc2c:	29ff      	cmp	r1, #255	; 0xff
    fc2e:	d1f2      	bne.n	fc16 <ticker_by_slot_get+0x6>
    fc30:	e000      	b.n	fc34 <ticker_by_slot_get+0x24>
			return TICKER_NULL;
    fc32:	21ff      	movs	r1, #255	; 0xff
	}

	return ticker_id_head;
}
    fc34:	4608      	mov	r0, r1
    fc36:	bc30      	pop	{r4, r5}
    fc38:	4770      	bx	lr
    fc3a:	4608      	mov	r0, r1
    fc3c:	4770      	bx	lr

0000fc3e <ticker_by_next_slot_get>:

static void ticker_by_next_slot_get(struct ticker_instance *instance,
				    u8_t *ticker_id_head, u32_t *ticks_current,
				    u32_t *ticks_to_expire)
{
    fc3e:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc40:	4694      	mov	ip, r2
	struct ticker_node *ticker;
	struct ticker_node *node;
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;
    fc42:	6807      	ldr	r7, [r0, #0]

	_ticker_id_head = *ticker_id_head;
    fc44:	f891 e000 	ldrb.w	lr, [r1]
	_ticks_to_expire = *ticks_to_expire;
    fc48:	681e      	ldr	r6, [r3, #0]
	if ((_ticker_id_head == TICKER_NULL) ||
    fc4a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    fc4e:	d004      	beq.n	fc5a <ticker_by_next_slot_get+0x1c>
	    (*ticks_current != instance->ticks_current)) {
    fc50:	6942      	ldr	r2, [r0, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
    fc52:	f8dc 4000 	ldr.w	r4, [ip]
    fc56:	4294      	cmp	r4, r2
    fc58:	d005      	beq.n	fc66 <ticker_by_next_slot_get+0x28>
		_ticker_id_head = instance->ticker_id_head;
    fc5a:	7e04      	ldrb	r4, [r0, #24]
		*ticks_current = instance->ticks_current;
    fc5c:	6940      	ldr	r0, [r0, #20]
    fc5e:	f8cc 0000 	str.w	r0, [ip]
		_ticks_to_expire = 0;
    fc62:	2600      	movs	r6, #0
    fc64:	e00a      	b.n	fc7c <ticker_by_next_slot_get+0x3e>
	} else {
		ticker = &node[_ticker_id_head];
    fc66:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
    fc6a:	ea4f 028e 	mov.w	r2, lr, lsl #2
    fc6e:	4696      	mov	lr, r2
    fc70:	18bd      	adds	r5, r7, r2
		_ticker_id_head = ticker->next;
    fc72:	5cbc      	ldrb	r4, [r7, r2]
    fc74:	e002      	b.n	fc7c <ticker_by_next_slot_get+0x3e>
	}

	while ((_ticker_id_head != TICKER_NULL) &&
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
		_ticks_to_expire += ticker->ticks_to_expire;
    fc76:	68a8      	ldr	r0, [r5, #8]
    fc78:	4406      	add	r6, r0
		_ticker_id_head = ticker->next;
    fc7a:	5cbc      	ldrb	r4, [r7, r2]
	while ((_ticker_id_head != TICKER_NULL) &&
    fc7c:	2cff      	cmp	r4, #255	; 0xff
    fc7e:	d006      	beq.n	fc8e <ticker_by_next_slot_get+0x50>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    fc80:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
    fc84:	0082      	lsls	r2, r0, #2
    fc86:	18bd      	adds	r5, r7, r2
    fc88:	8ae8      	ldrh	r0, [r5, #22]
	while ((_ticker_id_head != TICKER_NULL) &&
    fc8a:	2800      	cmp	r0, #0
    fc8c:	d0f3      	beq.n	fc76 <ticker_by_next_slot_get+0x38>
	}

	if (_ticker_id_head != TICKER_NULL) {
    fc8e:	2cff      	cmp	r4, #255	; 0xff
    fc90:	d001      	beq.n	fc96 <ticker_by_next_slot_get+0x58>
		_ticks_to_expire += ticker->ticks_to_expire;
    fc92:	68aa      	ldr	r2, [r5, #8]
    fc94:	4416      	add	r6, r2
	}

	*ticker_id_head = _ticker_id_head;
    fc96:	700c      	strb	r4, [r1, #0]
	*ticks_to_expire = _ticks_to_expire;
    fc98:	601e      	str	r6, [r3, #0]
    fc9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000fc9c <ticker_enqueue>:
}

static u8_t ticker_enqueue(struct ticker_instance *instance, u8_t id)
{
    fc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fca0:	b085      	sub	sp, #20
    fca2:	4681      	mov	r9, r0
    fca4:	9102      	str	r1, [sp, #8]
	u32_t ticks_to_expire;
	u8_t previous;
	u8_t current;
	u8_t collide;

	node = &instance->node[0];
    fca6:	6806      	ldr	r6, [r0, #0]
	ticker_new = &node[id];
    fca8:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    fcac:	009b      	lsls	r3, r3, #2
    fcae:	9303      	str	r3, [sp, #12]
    fcb0:	eb06 0a03 	add.w	sl, r6, r3
	ticks_to_expire = ticker_new->ticks_to_expire;
    fcb4:	f8da 5008 	ldr.w	r5, [sl, #8]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
    fcb8:	f890 8018 	ldrb.w	r8, [r0, #24]
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
    fcbc:	8b47      	ldrh	r7, [r0, #26]
	current = instance->ticker_id_head;
    fcbe:	4644      	mov	r4, r8
	collide = ticker_id_slot_previous = TICKER_NULL;
    fcc0:	23ff      	movs	r3, #255	; 0xff
    fcc2:	9301      	str	r3, [sp, #4]
	while ((current != TICKER_NULL) &&
    fcc4:	e004      	b.n	fcd0 <ticker_enqueue+0x34>

		if (ticker_current->ticks_slot != 0) {
			ticks_slot_previous = ticker_current->ticks_slot;
			ticker_id_slot_previous = current;
		} else {
			if (ticks_slot_previous > ticks_to_expire_current) {
    fcc6:	4297      	cmp	r7, r2
    fcc8:	d912      	bls.n	fcf0 <ticker_enqueue+0x54>
				ticks_slot_previous -= ticks_to_expire_current;
    fcca:	1abf      	subs	r7, r7, r2
			} else {
				ticks_slot_previous = 0;
			}
		}
		previous = current;
    fccc:	46a0      	mov	r8, r4
		current = ticker_current->next;
    fcce:	5cf4      	ldrb	r4, [r6, r3]
	while ((current != TICKER_NULL) &&
    fcd0:	2cff      	cmp	r4, #255	; 0xff
    fcd2:	d00f      	beq.n	fcf4 <ticker_enqueue+0x58>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    fcd4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    fcd8:	0093      	lsls	r3, r2, #2
    fcda:	18f1      	adds	r1, r6, r3
		(ticks_to_expire_current =
    fcdc:	688a      	ldr	r2, [r1, #8]
	while ((current != TICKER_NULL) &&
    fcde:	4295      	cmp	r5, r2
    fce0:	d908      	bls.n	fcf4 <ticker_enqueue+0x58>
		ticks_to_expire -= ticks_to_expire_current;
    fce2:	1aad      	subs	r5, r5, r2
		if (ticker_current->ticks_slot != 0) {
    fce4:	8ac9      	ldrh	r1, [r1, #22]
    fce6:	2900      	cmp	r1, #0
    fce8:	d0ed      	beq.n	fcc6 <ticker_enqueue+0x2a>
			ticks_slot_previous = ticker_current->ticks_slot;
    fcea:	460f      	mov	r7, r1
			ticker_id_slot_previous = current;
    fcec:	9401      	str	r4, [sp, #4]
    fcee:	e7ed      	b.n	fccc <ticker_enqueue+0x30>
				ticks_slot_previous = 0;
    fcf0:	2700      	movs	r7, #0
    fcf2:	e7eb      	b.n	fccc <ticker_enqueue+0x30>
	}

	collide = ticker_by_slot_get(&node[0], current,
				     ticks_to_expire + ticker_new->ticks_slot);
    fcf4:	f8ba b016 	ldrh.w	fp, [sl, #22]
	collide = ticker_by_slot_get(&node[0], current,
    fcf8:	eb05 020b 	add.w	r2, r5, fp
    fcfc:	4621      	mov	r1, r4
    fcfe:	4630      	mov	r0, r6
    fd00:	f7ff ff86 	bl	fc10 <ticker_by_slot_get>

	if ((ticker_new->ticks_slot == 0) ||
    fd04:	f1bb 0f00 	cmp.w	fp, #0
    fd08:	d007      	beq.n	fd1a <ticker_enqueue+0x7e>
    fd0a:	42af      	cmp	r7, r5
    fd0c:	d801      	bhi.n	fd12 <ticker_enqueue+0x76>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    fd0e:	28ff      	cmp	r0, #255	; 0xff
    fd10:	d003      	beq.n	fd1a <ticker_enqueue+0x7e>

		if (current != TICKER_NULL) {
			node[current].ticks_to_expire -= ticks_to_expire;
		}
	} else {
		if (ticks_slot_previous > ticks_to_expire) {
    fd12:	42af      	cmp	r7, r5
    fd14:	d918      	bls.n	fd48 <ticker_enqueue+0xac>
			id = ticker_id_slot_previous;
    fd16:	9801      	ldr	r0, [sp, #4]
    fd18:	e016      	b.n	fd48 <ticker_enqueue+0xac>
		ticker_new->ticks_to_expire = ticks_to_expire;
    fd1a:	f8ca 5008 	str.w	r5, [sl, #8]
		ticker_new->next = current;
    fd1e:	9b03      	ldr	r3, [sp, #12]
    fd20:	54f4      	strb	r4, [r6, r3]
		if (previous == current) {
    fd22:	45a0      	cmp	r8, r4
    fd24:	d013      	beq.n	fd4e <ticker_enqueue+0xb2>
			node[previous].next = id;
    fd26:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
    fd2a:	ea4f 0388 	mov.w	r3, r8, lsl #2
    fd2e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    fd32:	54f2      	strb	r2, [r6, r3]
		if (current != TICKER_NULL) {
    fd34:	2cff      	cmp	r4, #255	; 0xff
    fd36:	d00f      	beq.n	fd58 <ticker_enqueue+0xbc>
			node[current].ticks_to_expire -= ticks_to_expire;
    fd38:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    fd3c:	00a3      	lsls	r3, r4, #2
    fd3e:	441e      	add	r6, r3
    fd40:	68b3      	ldr	r3, [r6, #8]
    fd42:	1b5d      	subs	r5, r3, r5
    fd44:	60b5      	str	r5, [r6, #8]
    fd46:	9802      	ldr	r0, [sp, #8]
			id = collide;
		}
	}

	return id;
}
    fd48:	b005      	add	sp, #20
    fd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			instance->ticker_id_head = id;
    fd4e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    fd52:	f889 3018 	strb.w	r3, [r9, #24]
    fd56:	e7ed      	b.n	fd34 <ticker_enqueue+0x98>
    fd58:	9802      	ldr	r0, [sp, #8]
    fd5a:	e7f5      	b.n	fd48 <ticker_enqueue+0xac>

0000fd5c <ticker_dequeue>:

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    fd5c:	b4f0      	push	{r4, r5, r6, r7}
	u32_t timeout;
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
    fd5e:	6806      	ldr	r6, [r0, #0]
	previous = instance->ticker_id_head;
    fd60:	7e07      	ldrb	r7, [r0, #24]
	current = previous;
    fd62:	463b      	mov	r3, r7
	total = 0;
    fd64:	2500      	movs	r5, #0
	ticker_current = 0;
    fd66:	462c      	mov	r4, r5
	while (current != TICKER_NULL) {
    fd68:	2bff      	cmp	r3, #255	; 0xff
    fd6a:	d00a      	beq.n	fd82 <ticker_dequeue+0x26>

		ticker_current = &node[current];
    fd6c:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
    fd70:	00a2      	lsls	r2, r4, #2
    fd72:	18b4      	adds	r4, r6, r2

		if (current == id) {
    fd74:	428b      	cmp	r3, r1
    fd76:	d004      	beq.n	fd82 <ticker_dequeue+0x26>
			break;
		}

		total += ticker_current->ticks_to_expire;
    fd78:	68a7      	ldr	r7, [r4, #8]
    fd7a:	443d      	add	r5, r7
		previous = current;
    fd7c:	461f      	mov	r7, r3
		current = ticker_current->next;
    fd7e:	5cb3      	ldrb	r3, [r6, r2]
    fd80:	e7f2      	b.n	fd68 <ticker_dequeue+0xc>
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
    fd82:	2bff      	cmp	r3, #255	; 0xff
    fd84:	d017      	beq.n	fdb6 <ticker_dequeue+0x5a>
		return 0;
	}

	/* ticker is the first in the list */
	if (previous == current) {
    fd86:	429f      	cmp	r7, r3
    fd88:	d012      	beq.n	fdb0 <ticker_dequeue+0x54>
		instance->ticker_id_head = ticker_current->next;
	}

	/* remaining timeout between next timeout */
	timeout = ticker_current->ticks_to_expire;
    fd8a:	68a0      	ldr	r0, [r4, #8]

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    fd8c:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
    fd90:	00bb      	lsls	r3, r7, #2
    fd92:	7822      	ldrb	r2, [r4, #0]
    fd94:	54f2      	strb	r2, [r6, r3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    fd96:	7823      	ldrb	r3, [r4, #0]
    fd98:	2bff      	cmp	r3, #255	; 0xff
    fd9a:	d006      	beq.n	fdaa <ticker_dequeue+0x4e>
		node[ticker_current->next].ticks_to_expire += timeout;
    fd9c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    fda0:	009a      	lsls	r2, r3, #2
    fda2:	4416      	add	r6, r2
    fda4:	68b3      	ldr	r3, [r6, #8]
    fda6:	4403      	add	r3, r0
    fda8:	60b3      	str	r3, [r6, #8]
	}

	return (total + timeout);
    fdaa:	4428      	add	r0, r5
}
    fdac:	bcf0      	pop	{r4, r5, r6, r7}
    fdae:	4770      	bx	lr
		instance->ticker_id_head = ticker_current->next;
    fdb0:	7823      	ldrb	r3, [r4, #0]
    fdb2:	7603      	strb	r3, [r0, #24]
    fdb4:	e7e9      	b.n	fd8a <ticker_dequeue+0x2e>
		return 0;
    fdb6:	2000      	movs	r0, #0
    fdb8:	e7f8      	b.n	fdac <ticker_dequeue+0x50>
	...

0000fdbc <ticker_remainder_inc>:
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    fdbc:	69c3      	ldr	r3, [r0, #28]
    fdbe:	6a02      	ldr	r2, [r0, #32]
    fdc0:	4413      	add	r3, r2
    fdc2:	6203      	str	r3, [r0, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    fdc4:	4a05      	ldr	r2, [pc, #20]	; (fddc <ticker_remainder_inc+0x20>)
    fdc6:	441a      	add	r2, r3
    fdc8:	4905      	ldr	r1, [pc, #20]	; (fde0 <ticker_remainder_inc+0x24>)
    fdca:	428a      	cmp	r2, r1
    fdcc:	d804      	bhi.n	fdd8 <ticker_remainder_inc+0x1c>
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    fdce:	4a05      	ldr	r2, [pc, #20]	; (fde4 <ticker_remainder_inc+0x28>)
    fdd0:	441a      	add	r2, r3
    fdd2:	6202      	str	r2, [r0, #32]
		return 1;
    fdd4:	2001      	movs	r0, #1
    fdd6:	4770      	bx	lr
	}
	return 0;
    fdd8:	2000      	movs	r0, #0
}
    fdda:	4770      	bx	lr
    fddc:	ff172b5a 	.word	0xff172b5a
    fde0:	7f172b59 	.word	0x7f172b59
    fde4:	fe2e56b6 	.word	0xfe2e56b6

0000fde8 <ticker_remainder_dec>:

static u8_t ticker_remainder_dec(struct ticker_node *ticker)
{
    fde8:	4603      	mov	r3, r0
	u8_t decrement = 0;

	if ((ticker->remainder_current >= BIT(31)) ||
    fdea:	6a01      	ldr	r1, [r0, #32]
    fdec:	4a07      	ldr	r2, [pc, #28]	; (fe0c <ticker_remainder_dec+0x24>)
    fdee:	440a      	add	r2, r1
    fdf0:	4807      	ldr	r0, [pc, #28]	; (fe10 <ticker_remainder_dec+0x28>)
    fdf2:	4282      	cmp	r2, r0
    fdf4:	d908      	bls.n	fe08 <ticker_remainder_dec+0x20>
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
    fdf6:	4a07      	ldr	r2, [pc, #28]	; (fe14 <ticker_remainder_dec+0x2c>)
    fdf8:	440a      	add	r2, r1
    fdfa:	621a      	str	r2, [r3, #32]
		decrement++;
    fdfc:	2001      	movs	r0, #1
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    fdfe:	69d9      	ldr	r1, [r3, #28]
    fe00:	6a1a      	ldr	r2, [r3, #32]
    fe02:	1a52      	subs	r2, r2, r1
    fe04:	621a      	str	r2, [r3, #32]

	return decrement;
}
    fe06:	4770      	bx	lr
	u8_t decrement = 0;
    fe08:	2000      	movs	r0, #0
    fe0a:	e7f8      	b.n	fdfe <ticker_remainder_dec+0x16>
    fe0c:	ff172b5a 	.word	0xff172b5a
    fe10:	7f172b59 	.word	0x7f172b59
    fe14:	01d1a94a 	.word	0x01d1a94a

0000fe18 <ticker_job_op_cb>:

static void ticker_job_op_cb(struct ticker_user_op *user_op, u32_t status)
{
    fe18:	b510      	push	{r4, lr}
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    fe1a:	2300      	movs	r3, #0
    fe1c:	7003      	strb	r3, [r0, #0]
	user_op->status = status;
    fe1e:	6201      	str	r1, [r0, #32]
	if (user_op->fp_op_func) {
    fe20:	6a44      	ldr	r4, [r0, #36]	; 0x24
    fe22:	b11c      	cbz	r4, fe2c <ticker_job_op_cb+0x14>
    fe24:	460a      	mov	r2, r1
		user_op->fp_op_func(user_op->status, user_op->op_context);
    fe26:	6a81      	ldr	r1, [r0, #40]	; 0x28
    fe28:	4610      	mov	r0, r2
    fe2a:	47a0      	blx	r4
    fe2c:	bd10      	pop	{r4, pc}

0000fe2e <ticker_instance1_cmp_set>:
{
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(u32_t value)
{
    fe2e:	b508      	push	{r3, lr}
	cntr_cmp_set(1, value);
    fe30:	4601      	mov	r1, r0
    fe32:	2001      	movs	r0, #1
    fe34:	f7fe fd40 	bl	e8b8 <cntr_cmp_set>
    fe38:	bd08      	pop	{r3, pc}

0000fe3a <ticker_instance0_cmp_set>:
{
    fe3a:	b508      	push	{r3, lr}
	cntr_cmp_set(0, value);
    fe3c:	4601      	mov	r1, r0
    fe3e:	2000      	movs	r0, #0
    fe40:	f7fe fd3a 	bl	e8b8 <cntr_cmp_set>
    fe44:	bd08      	pop	{r3, pc}
	...

0000fe48 <ticker_instance1_sched>:
{
    fe48:	b508      	push	{r3, lr}
	switch (caller_id) {
    fe4a:	2803      	cmp	r0, #3
    fe4c:	d841      	bhi.n	fed2 <ticker_instance1_sched+0x8a>
    fe4e:	e8df f000 	tbb	[pc, r0]
    fe52:	1002      	.short	0x1002
    fe54:	331d      	.short	0x331d
		switch (callee_id) {
    fe56:	2901      	cmp	r1, #1
    fe58:	d105      	bne.n	fe66 <ticker_instance1_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
    fe5a:	4b21      	ldr	r3, [pc, #132]	; (fee0 <ticker_instance1_sched+0x98>)
    fe5c:	2102      	movs	r1, #2
    fe5e:	2000      	movs	r0, #0
    fe60:	f7fe fb12 	bl	e488 <mayfly_enqueue>
		break;
    fe64:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    fe66:	4040      	eors	r0, r0
    fe68:	f380 8811 	msr	BASEPRI, r0
    fe6c:	f04f 0004 	mov.w	r0, #4
    fe70:	df02      	svc	2
		switch (callee_id) {
    fe72:	2902      	cmp	r1, #2
    fe74:	d104      	bne.n	fe80 <ticker_instance1_sched+0x38>
			mayfly_enqueue(MAYFLY_CALL_ID_2,
    fe76:	4b1b      	ldr	r3, [pc, #108]	; (fee4 <ticker_instance1_sched+0x9c>)
    fe78:	4608      	mov	r0, r1
    fe7a:	f7fe fb05 	bl	e488 <mayfly_enqueue>
		break;
    fe7e:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    fe80:	4040      	eors	r0, r0
    fe82:	f380 8811 	msr	BASEPRI, r0
    fe86:	f04f 0004 	mov.w	r0, #4
    fe8a:	df02      	svc	2
		switch (callee_id) {
    fe8c:	2901      	cmp	r1, #1
    fe8e:	d007      	beq.n	fea0 <ticker_instance1_sched+0x58>
    fe90:	2902      	cmp	r1, #2
    fe92:	d00b      	beq.n	feac <ticker_instance1_sched+0x64>
			LL_ASSERT(0);
    fe94:	4040      	eors	r0, r0
    fe96:	f380 8811 	msr	BASEPRI, r0
    fe9a:	f04f 0004 	mov.w	r0, #4
    fe9e:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_2,
    fea0:	4b11      	ldr	r3, [pc, #68]	; (fee8 <ticker_instance1_sched+0xa0>)
    fea2:	2102      	movs	r1, #2
    fea4:	4608      	mov	r0, r1
    fea6:	f7fe faef 	bl	e488 <mayfly_enqueue>
		break;
    feaa:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_2,
    feac:	4b0f      	ldr	r3, [pc, #60]	; (feec <ticker_instance1_sched+0xa4>)
    feae:	2102      	movs	r1, #2
    feb0:	4608      	mov	r0, r1
    feb2:	f7fe fae9 	bl	e488 <mayfly_enqueue>
		break;
    feb6:	bd08      	pop	{r3, pc}
		switch (callee_id) {
    feb8:	2902      	cmp	r1, #2
    feba:	d104      	bne.n	fec6 <ticker_instance1_sched+0x7e>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
    febc:	4b0c      	ldr	r3, [pc, #48]	; (fef0 <ticker_instance1_sched+0xa8>)
    febe:	2003      	movs	r0, #3
    fec0:	f7fe fae2 	bl	e488 <mayfly_enqueue>
		break;
    fec4:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    fec6:	4040      	eors	r0, r0
    fec8:	f380 8811 	msr	BASEPRI, r0
    fecc:	f04f 0004 	mov.w	r0, #4
    fed0:	df02      	svc	2
		LL_ASSERT(0);
    fed2:	4040      	eors	r0, r0
    fed4:	f380 8811 	msr	BASEPRI, r0
    fed8:	f04f 0004 	mov.w	r0, #4
    fedc:	df02      	svc	2
    fede:	bf00      	nop
    fee0:	2000bac0 	.word	0x2000bac0
    fee4:	2000bad0 	.word	0x2000bad0
    fee8:	2000bae0 	.word	0x2000bae0
    feec:	2000baf0 	.word	0x2000baf0
    fef0:	2000bb00 	.word	0x2000bb00

0000fef4 <ticker_instance1_caller_id_get>:
	switch (user_id) {
    fef4:	1e83      	subs	r3, r0, #2
    fef6:	2b01      	cmp	r3, #1
    fef8:	d800      	bhi.n	fefc <ticker_instance1_caller_id_get+0x8>
}
    fefa:	4770      	bx	lr
		LL_ASSERT(0);
    fefc:	4040      	eors	r0, r0
    fefe:	f380 8811 	msr	BASEPRI, r0
    ff02:	f04f 0004 	mov.w	r0, #4
    ff06:	df02      	svc	2

0000ff08 <ticker_instance0_sched>:
{
    ff08:	b508      	push	{r3, lr}
	switch (caller_id) {
    ff0a:	2803      	cmp	r0, #3
    ff0c:	d843      	bhi.n	ff96 <ticker_instance0_sched+0x8e>
    ff0e:	e8df f000 	tbb	[pc, r0]
    ff12:	1002      	.short	0x1002
    ff14:	341e      	.short	0x341e
		switch (callee_id) {
    ff16:	2901      	cmp	r1, #1
    ff18:	d105      	bne.n	ff26 <ticker_instance0_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
    ff1a:	4b22      	ldr	r3, [pc, #136]	; (ffa4 <ticker_instance0_sched+0x9c>)
    ff1c:	2100      	movs	r1, #0
    ff1e:	4608      	mov	r0, r1
    ff20:	f7fe fab2 	bl	e488 <mayfly_enqueue>
		break;
    ff24:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    ff26:	4040      	eors	r0, r0
    ff28:	f380 8811 	msr	BASEPRI, r0
    ff2c:	f04f 0004 	mov.w	r0, #4
    ff30:	df02      	svc	2
		switch (callee_id) {
    ff32:	2902      	cmp	r1, #2
    ff34:	d105      	bne.n	ff42 <ticker_instance0_sched+0x3a>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
    ff36:	4b1c      	ldr	r3, [pc, #112]	; (ffa8 <ticker_instance0_sched+0xa0>)
    ff38:	2101      	movs	r1, #1
    ff3a:	2000      	movs	r0, #0
    ff3c:	f7fe faa4 	bl	e488 <mayfly_enqueue>
		break;
    ff40:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    ff42:	4040      	eors	r0, r0
    ff44:	f380 8811 	msr	BASEPRI, r0
    ff48:	f04f 0004 	mov.w	r0, #4
    ff4c:	df02      	svc	2
		switch (callee_id) {
    ff4e:	2901      	cmp	r1, #1
    ff50:	d007      	beq.n	ff62 <ticker_instance0_sched+0x5a>
    ff52:	2902      	cmp	r1, #2
    ff54:	d00b      	beq.n	ff6e <ticker_instance0_sched+0x66>
			LL_ASSERT(0);
    ff56:	4040      	eors	r0, r0
    ff58:	f380 8811 	msr	BASEPRI, r0
    ff5c:	f04f 0004 	mov.w	r0, #4
    ff60:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_1,
    ff62:	4b12      	ldr	r3, [pc, #72]	; (ffac <ticker_instance0_sched+0xa4>)
    ff64:	2100      	movs	r1, #0
    ff66:	2001      	movs	r0, #1
    ff68:	f7fe fa8e 	bl	e488 <mayfly_enqueue>
		break;
    ff6c:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_1,
    ff6e:	4b10      	ldr	r3, [pc, #64]	; (ffb0 <ticker_instance0_sched+0xa8>)
    ff70:	2101      	movs	r1, #1
    ff72:	4608      	mov	r0, r1
    ff74:	f7fe fa88 	bl	e488 <mayfly_enqueue>
		break;
    ff78:	bd08      	pop	{r3, pc}
		switch (callee_id) {
    ff7a:	2902      	cmp	r1, #2
    ff7c:	d105      	bne.n	ff8a <ticker_instance0_sched+0x82>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
    ff7e:	4b0d      	ldr	r3, [pc, #52]	; (ffb4 <ticker_instance0_sched+0xac>)
    ff80:	2101      	movs	r1, #1
    ff82:	2003      	movs	r0, #3
    ff84:	f7fe fa80 	bl	e488 <mayfly_enqueue>
		break;
    ff88:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    ff8a:	4040      	eors	r0, r0
    ff8c:	f380 8811 	msr	BASEPRI, r0
    ff90:	f04f 0004 	mov.w	r0, #4
    ff94:	df02      	svc	2
		LL_ASSERT(0);
    ff96:	4040      	eors	r0, r0
    ff98:	f380 8811 	msr	BASEPRI, r0
    ff9c:	f04f 0004 	mov.w	r0, #4
    ffa0:	df02      	svc	2
    ffa2:	bf00      	nop
    ffa4:	2000ba70 	.word	0x2000ba70
    ffa8:	2000ba80 	.word	0x2000ba80
    ffac:	2000ba90 	.word	0x2000ba90
    ffb0:	2000baa0 	.word	0x2000baa0
    ffb4:	2000bab0 	.word	0x2000bab0

0000ffb8 <ticker_instance0_caller_id_get>:
	switch (user_id) {
    ffb8:	2801      	cmp	r0, #1
    ffba:	d00a      	beq.n	ffd2 <ticker_instance0_caller_id_get+0x1a>
    ffbc:	b138      	cbz	r0, ffce <ticker_instance0_caller_id_get+0x16>
    ffbe:	2803      	cmp	r0, #3
    ffc0:	d008      	beq.n	ffd4 <ticker_instance0_caller_id_get+0x1c>
		LL_ASSERT(0);
    ffc2:	4040      	eors	r0, r0
    ffc4:	f380 8811 	msr	BASEPRI, r0
    ffc8:	f04f 0004 	mov.w	r0, #4
    ffcc:	df02      	svc	2
		return CALL_ID_WORKER;
    ffce:	2001      	movs	r0, #1
    ffd0:	4770      	bx	lr
		return CALL_ID_JOB;
    ffd2:	2002      	movs	r0, #2
}
    ffd4:	4770      	bx	lr
	...

0000ffd8 <ticker_init>:
/*****************************************************************************
 * Public Interface
 ****************************************************************************/
u32_t ticker_init(u8_t instance_index, u8_t count_node, void *node,
		  u8_t count_user, void *user, u8_t count_op, void *user_op)
{
    ffd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ffda:	9d05      	ldr	r5, [sp, #20]
    ffdc:	f89d 4018 	ldrb.w	r4, [sp, #24]
	    (sizeof(struct ticker_user) != TICKER_USER_T_SIZE) ||
	    (sizeof(struct ticker_user_op) != TICKER_USER_OP_T_SIZE)) {
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
    ffe0:	4606      	mov	r6, r0
    ffe2:	b118      	cbz	r0, ffec <ticker_init+0x14>
    ffe4:	2801      	cmp	r0, #1
    ffe6:	d019      	beq.n	1001c <__kernel_ram_size+0x1c>
		instance->fp_sched = ticker_instance1_sched;
		instance->fp_cmp_set = ticker_instance1_cmp_set;
		break;

	default:
		return TICKER_STATUS_FAILURE;
    ffe8:	2001      	movs	r0, #1
    ffea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		instance->fp_caller_id_get = ticker_instance0_caller_id_get;
    ffec:	202c      	movs	r0, #44	; 0x2c
    ffee:	4f20      	ldr	r7, [pc, #128]	; (10070 <__kernel_ram_size+0x70>)
    fff0:	fb00 7006 	mla	r0, r0, r6, r7
    fff4:	4f1f      	ldr	r7, [pc, #124]	; (10074 <__kernel_ram_size+0x74>)
    fff6:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance0_sched;
    fff8:	4f1f      	ldr	r7, [pc, #124]	; (10078 <__kernel_ram_size+0x78>)
    fffa:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance0_cmp_set;
    fffc:	4f1f      	ldr	r7, [pc, #124]	; (1007c <__kernel_ram_size+0x7c>)
    fffe:	6287      	str	r7, [r0, #40]	; 0x28
	}

	instance->count_node = count_node;
   10000:	f8df e06c 	ldr.w	lr, [pc, #108]	; 10070 <__kernel_ram_size+0x70>
   10004:	202c      	movs	r0, #44	; 0x2c
   10006:	fb00 f006 	mul.w	r0, r0, r6
   1000a:	eb0e 0700 	add.w	r7, lr, r0
   1000e:	7239      	strb	r1, [r7, #8]
	instance->node = node;
   10010:	f84e 2000 	str.w	r2, [lr, r0]

	instance->count_user = count_user;
   10014:	727b      	strb	r3, [r7, #9]
	instance->user = user;
   10016:	607d      	str	r5, [r7, #4]
	struct ticker_user_op *user_op_ = (void *)user_op;
   10018:	9907      	ldr	r1, [sp, #28]

	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
   1001a:	e015      	b.n	10048 <__kernel_ram_size+0x48>
		instance->fp_caller_id_get = ticker_instance1_caller_id_get;
   1001c:	202c      	movs	r0, #44	; 0x2c
   1001e:	4f14      	ldr	r7, [pc, #80]	; (10070 <__kernel_ram_size+0x70>)
   10020:	fb00 7006 	mla	r0, r0, r6, r7
   10024:	4f16      	ldr	r7, [pc, #88]	; (10080 <__kernel_ram_size+0x80>)
   10026:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance1_sched;
   10028:	4f16      	ldr	r7, [pc, #88]	; (10084 <__kernel_ram_size+0x84>)
   1002a:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance1_cmp_set;
   1002c:	4f16      	ldr	r7, [pc, #88]	; (10088 <__kernel_ram_size+0x88>)
   1002e:	6287      	str	r7, [r0, #40]	; 0x28
		break;
   10030:	e7e6      	b.n	10000 <__kernel_ram_size>
		users[count_user].user_op = user_op_;
   10032:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   10036:	6059      	str	r1, [r3, #4]
		user_op_ += users[count_user].count_user_op;
   10038:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   1003c:	202c      	movs	r0, #44	; 0x2c
   1003e:	fb00 1103 	mla	r1, r0, r3, r1
		count_op -= users[count_user].count_user_op;
   10042:	1ae3      	subs	r3, r4, r3
   10044:	b2dc      	uxtb	r4, r3
	while (count_user--) {
   10046:	4613      	mov	r3, r2
   10048:	1e5a      	subs	r2, r3, #1
   1004a:	b2d2      	uxtb	r2, r2
   1004c:	2b00      	cmp	r3, #0
   1004e:	d1f0      	bne.n	10032 <__kernel_ram_size+0x32>
	}

	if (count_op) {
   10050:	b964      	cbnz	r4, 1006c <__kernel_ram_size+0x6c>
		return TICKER_STATUS_FAILURE;
	}

	instance->ticker_id_head = TICKER_NULL;
   10052:	222c      	movs	r2, #44	; 0x2c
   10054:	4b06      	ldr	r3, [pc, #24]	; (10070 <__kernel_ram_size+0x70>)
   10056:	fb02 3606 	mla	r6, r2, r6, r3
   1005a:	23ff      	movs	r3, #255	; 0xff
   1005c:	7633      	strb	r3, [r6, #24]
	instance->ticker_id_slot_previous = TICKER_NULL;
   1005e:	7673      	strb	r3, [r6, #25]
	instance->ticks_slot_previous = 0;
   10060:	2000      	movs	r0, #0
   10062:	8370      	strh	r0, [r6, #26]
	instance->ticks_current = 0;
   10064:	6170      	str	r0, [r6, #20]
	instance->ticks_elapsed_first = 0;
   10066:	72b0      	strb	r0, [r6, #10]
	instance->ticks_elapsed_last = 0;
   10068:	72f0      	strb	r0, [r6, #11]

	return TICKER_STATUS_SUCCESS;
   1006a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TICKER_STATUS_FAILURE;
   1006c:	2001      	movs	r0, #1
}
   1006e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10070:	20000d44 	.word	0x20000d44
   10074:	0000ffb9 	.word	0x0000ffb9
   10078:	0000ff09 	.word	0x0000ff09
   1007c:	0000fe3b 	.word	0x0000fe3b
   10080:	0000fef5 	.word	0x0000fef5
   10084:	0000fe49 	.word	0x0000fe49
   10088:	0000fe2f 	.word	0x0000fe2f

0001008c <ticker_trigger>:
{
	return !!(_instance[instance_index].count_node);
}

void ticker_trigger(u8_t instance_index)
{
   1008c:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
   1008e:	232c      	movs	r3, #44	; 0x2c
   10090:	4a04      	ldr	r2, [pc, #16]	; (100a4 <ticker_trigger+0x18>)
   10092:	fb03 2000 	mla	r0, r3, r0, r2
   10096:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10098:	b11b      	cbz	r3, 100a2 <ticker_trigger+0x16>
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
   1009a:	2201      	movs	r2, #1
   1009c:	4611      	mov	r1, r2
   1009e:	2000      	movs	r0, #0
   100a0:	4798      	blx	r3
   100a2:	bd08      	pop	{r3, pc}
   100a4:	20000d44 	.word	0x20000d44

000100a8 <ticker_start>:
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
   100a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   100ac:	242c      	movs	r4, #44	; 0x2c
   100ae:	4d24      	ldr	r5, [pc, #144]	; (10140 <ticker_start+0x98>)
   100b0:	fb04 5400 	mla	r4, r4, r0, r5
   100b4:	6866      	ldr	r6, [r4, #4]
   100b6:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   100ba:	f89e 4003 	ldrb.w	r4, [lr, #3]
   100be:	1c65      	adds	r5, r4, #1
   100c0:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   100c2:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   100c6:	42b5      	cmp	r5, r6
   100c8:	d300      	bcc.n	100cc <ticker_start+0x24>
		last = 0;
   100ca:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   100cc:	f89e 6001 	ldrb.w	r6, [lr, #1]
   100d0:	42b5      	cmp	r5, r6
   100d2:	d032      	beq.n	1013a <ticker_start+0x92>
   100d4:	469c      	mov	ip, r3
   100d6:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   100d8:	f8de 3004 	ldr.w	r3, [lr, #4]
   100dc:	f04f 082c 	mov.w	r8, #44	; 0x2c
   100e0:	fb08 f604 	mul.w	r6, r8, r4
   100e4:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_START;
   100e6:	2003      	movs	r0, #3
   100e8:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   100ea:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
   100ec:	f8c4 c004 	str.w	ip, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   100f0:	9b06      	ldr	r3, [sp, #24]
   100f2:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   100f4:	9b07      	ldr	r3, [sp, #28]
   100f6:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   100f8:	9b08      	ldr	r3, [sp, #32]
   100fa:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   100fc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   10100:	82e3      	strh	r3, [r4, #22]
	user_op->params.start.lazy = lazy;
   10102:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   10106:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
   10108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1010a:	61a3      	str	r3, [r4, #24]
	user_op->params.start.context = context;
   1010c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1010e:	61e3      	str	r3, [r4, #28]
	user_op->status = TICKER_STATUS_BUSY;
   10110:	2602      	movs	r6, #2
   10112:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   10114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10116:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   10118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1011a:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   1011c:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10120:	4b07      	ldr	r3, [pc, #28]	; (10140 <ticker_start+0x98>)
   10122:	fb08 3307 	mla	r3, r8, r7, r3
   10126:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   10128:	6a1b      	ldr	r3, [r3, #32]
   1012a:	4608      	mov	r0, r1
   1012c:	4798      	blx	r3
   1012e:	2200      	movs	r2, #0
   10130:	4631      	mov	r1, r6
   10132:	47a8      	blx	r5

	return user_op->status;
   10134:	6a20      	ldr	r0, [r4, #32]
   10136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1013a:	2001      	movs	r0, #1
}
   1013c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10140:	20000d44 	.word	0x20000d44

00010144 <ticker_update>:

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
   10144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10148:	242c      	movs	r4, #44	; 0x2c
   1014a:	4d24      	ldr	r5, [pc, #144]	; (101dc <ticker_update+0x98>)
   1014c:	fb04 5400 	mla	r4, r4, r0, r5
   10150:	6866      	ldr	r6, [r4, #4]
   10152:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10156:	f89e 4003 	ldrb.w	r4, [lr, #3]
   1015a:	1c65      	adds	r5, r4, #1
   1015c:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   1015e:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10162:	42b5      	cmp	r5, r6
   10164:	d300      	bcc.n	10168 <ticker_update+0x24>
		last = 0;
   10166:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   10168:	f89e 6001 	ldrb.w	r6, [lr, #1]
   1016c:	42b5      	cmp	r5, r6
   1016e:	d031      	beq.n	101d4 <ticker_update+0x90>
   10170:	469c      	mov	ip, r3
   10172:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10174:	f8de 3004 	ldr.w	r3, [lr, #4]
   10178:	f04f 082c 	mov.w	r8, #44	; 0x2c
   1017c:	fb08 f604 	mul.w	r6, r8, r4
   10180:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   10182:	2004      	movs	r0, #4
   10184:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   10186:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   10188:	f8a4 c004 	strh.w	ip, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   1018c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   10190:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   10192:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   10196:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   10198:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1019c:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
   1019e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   101a2:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
   101a4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   101a8:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
   101aa:	2602      	movs	r6, #2
   101ac:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   101ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   101b0:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   101b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   101b4:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   101b6:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   101ba:	4b08      	ldr	r3, [pc, #32]	; (101dc <ticker_update+0x98>)
   101bc:	fb08 3307 	mla	r3, r8, r7, r3
   101c0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   101c2:	6a1b      	ldr	r3, [r3, #32]
   101c4:	4608      	mov	r0, r1
   101c6:	4798      	blx	r3
   101c8:	2200      	movs	r2, #0
   101ca:	4631      	mov	r1, r6
   101cc:	47a8      	blx	r5

	return user_op->status;
   101ce:	6a20      	ldr	r0, [r4, #32]
   101d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   101d4:	2001      	movs	r0, #1
}
   101d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   101da:	bf00      	nop
   101dc:	20000d44 	.word	0x20000d44

000101e0 <ticker_stop>:

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
   101e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   101e4:	242c      	movs	r4, #44	; 0x2c
   101e6:	4d1b      	ldr	r5, [pc, #108]	; (10254 <ticker_stop+0x74>)
   101e8:	fb04 5400 	mla	r4, r4, r0, r5
   101ec:	6866      	ldr	r6, [r4, #4]
   101ee:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   101f2:	f89e 5003 	ldrb.w	r5, [lr, #3]
   101f6:	1c6c      	adds	r4, r5, #1
   101f8:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   101fa:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   101fe:	42b4      	cmp	r4, r6
   10200:	d300      	bcc.n	10204 <ticker_stop+0x24>
		last = 0;
   10202:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   10204:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10208:	42b4      	cmp	r4, r6
   1020a:	d020      	beq.n	1024e <ticker_stop+0x6e>
   1020c:	4698      	mov	r8, r3
   1020e:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10210:	f8de 3004 	ldr.w	r3, [lr, #4]
   10214:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   10218:	fb0c f505 	mul.w	r5, ip, r5
   1021c:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   1021e:	2005      	movs	r0, #5
   10220:	5558      	strb	r0, [r3, r5]
	user_op->id = ticker_id;
   10222:	7072      	strb	r2, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   10224:	2502      	movs	r5, #2
   10226:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   10228:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   1022c:	9b06      	ldr	r3, [sp, #24]
   1022e:	62b3      	str	r3, [r6, #40]	; 0x28

	user->last = last;
   10230:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10234:	4b07      	ldr	r3, [pc, #28]	; (10254 <ticker_stop+0x74>)
   10236:	fb0c 3307 	mla	r3, ip, r7, r3
   1023a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1023c:	6a1b      	ldr	r3, [r3, #32]
   1023e:	4608      	mov	r0, r1
   10240:	4798      	blx	r3
   10242:	2200      	movs	r2, #0
   10244:	4629      	mov	r1, r5
   10246:	47a0      	blx	r4

	return user_op->status;
   10248:	6a30      	ldr	r0, [r6, #32]
   1024a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1024e:	2001      	movs	r0, #1
}
   10250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10254:	20000d44 	.word	0x20000d44

00010258 <ticker_next_slot_get>:

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
   10258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   1025c:	242c      	movs	r4, #44	; 0x2c
   1025e:	4d1f      	ldr	r5, [pc, #124]	; (102dc <ticker_next_slot_get+0x84>)
   10260:	fb04 5400 	mla	r4, r4, r0, r5
   10264:	6866      	ldr	r6, [r4, #4]
   10266:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   1026a:	f89e 5003 	ldrb.w	r5, [lr, #3]
   1026e:	1c6c      	adds	r4, r5, #1
   10270:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10272:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10276:	42b4      	cmp	r4, r6
   10278:	d300      	bcc.n	1027c <ticker_next_slot_get+0x24>
		last = 0;
   1027a:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   1027c:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10280:	42b4      	cmp	r4, r6
   10282:	d027      	beq.n	102d4 <ticker_next_slot_get+0x7c>
   10284:	469c      	mov	ip, r3
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10286:	f8de 3004 	ldr.w	r3, [lr, #4]
   1028a:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1028e:	fb09 f605 	mul.w	r6, r9, r5
   10292:	199d      	adds	r5, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   10294:	f04f 0802 	mov.w	r8, #2
   10298:	f803 8006 	strb.w	r8, [r3, r6]
	user_op->id = TICKER_NULL;
   1029c:	23ff      	movs	r3, #255	; 0xff
   1029e:	706b      	strb	r3, [r5, #1]
	user_op->params.slot_get.ticker_id = ticker_id;
   102a0:	606a      	str	r2, [r5, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
   102a2:	f8c5 c008 	str.w	ip, [r5, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   102a6:	9b08      	ldr	r3, [sp, #32]
   102a8:	60eb      	str	r3, [r5, #12]
	user_op->status = TICKER_STATUS_BUSY;
   102aa:	f8c5 8020 	str.w	r8, [r5, #32]
	user_op->fp_op_func = fp_op_func;
   102ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   102b0:	626b      	str	r3, [r5, #36]	; 0x24
	user_op->op_context = op_context;
   102b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   102b4:	62ab      	str	r3, [r5, #40]	; 0x28

	user->last = last;
   102b6:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   102ba:	4b08      	ldr	r3, [pc, #32]	; (102dc <ticker_next_slot_get+0x84>)
   102bc:	fb09 3300 	mla	r3, r9, r0, r3
   102c0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   102c2:	6a1b      	ldr	r3, [r3, #32]
   102c4:	4608      	mov	r0, r1
   102c6:	4798      	blx	r3
   102c8:	2200      	movs	r2, #0
   102ca:	4641      	mov	r1, r8
   102cc:	47a0      	blx	r4

	return user_op->status;
   102ce:	6a28      	ldr	r0, [r5, #32]
   102d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   102d4:	2001      	movs	r0, #1
}
   102d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   102da:	bf00      	nop
   102dc:	20000d44 	.word	0x20000d44

000102e0 <ticker_job_idle_get>:

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
   102e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   102e4:	242c      	movs	r4, #44	; 0x2c
   102e6:	4d1b      	ldr	r5, [pc, #108]	; (10354 <ticker_job_idle_get+0x74>)
   102e8:	fb04 5400 	mla	r4, r4, r0, r5
   102ec:	6866      	ldr	r6, [r4, #4]
   102ee:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   102f2:	f89e 5003 	ldrb.w	r5, [lr, #3]
   102f6:	1c6c      	adds	r4, r5, #1
   102f8:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   102fa:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   102fe:	42b4      	cmp	r4, r6
   10300:	d300      	bcc.n	10304 <ticker_job_idle_get+0x24>
		last = 0;
   10302:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   10304:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10308:	42b4      	cmp	r4, r6
   1030a:	d020      	beq.n	1034e <ticker_job_idle_get+0x6e>
   1030c:	4698      	mov	r8, r3
   1030e:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10310:	f8de 3004 	ldr.w	r3, [lr, #4]
   10314:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   10318:	fb0c f505 	mul.w	r5, ip, r5
   1031c:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
   1031e:	2001      	movs	r0, #1
   10320:	5558      	strb	r0, [r3, r5]
	user_op->id = TICKER_NULL;
   10322:	23ff      	movs	r3, #255	; 0xff
   10324:	7073      	strb	r3, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   10326:	2502      	movs	r5, #2
   10328:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   1032a:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   1032c:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28

	user->last = last;
   10330:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10334:	4b07      	ldr	r3, [pc, #28]	; (10354 <ticker_job_idle_get+0x74>)
   10336:	fb0c 3307 	mla	r3, ip, r7, r3
   1033a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1033c:	6a1b      	ldr	r3, [r3, #32]
   1033e:	4608      	mov	r0, r1
   10340:	4798      	blx	r3
   10342:	2200      	movs	r2, #0
   10344:	4629      	mov	r1, r5
   10346:	47a0      	blx	r4

	return user_op->status;
   10348:	6a30      	ldr	r0, [r6, #32]
   1034a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1034e:	2001      	movs	r0, #1
}
   10350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10354:	20000d44 	.word	0x20000d44

00010358 <ticker_job_sched>:

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
   10358:	b510      	push	{r4, lr}
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   1035a:	232c      	movs	r3, #44	; 0x2c
   1035c:	4a05      	ldr	r2, [pc, #20]	; (10374 <ticker_job_sched+0x1c>)
   1035e:	fb03 2000 	mla	r0, r3, r0, r2
   10362:	6a44      	ldr	r4, [r0, #36]	; 0x24
   10364:	6a03      	ldr	r3, [r0, #32]
   10366:	4608      	mov	r0, r1
   10368:	4798      	blx	r3
   1036a:	2200      	movs	r2, #0
   1036c:	2102      	movs	r1, #2
   1036e:	47a0      	blx	r4
   10370:	bd10      	pop	{r4, pc}
   10372:	bf00      	nop
   10374:	20000d44 	.word	0x20000d44

00010378 <ticker_ticks_now_get>:
}

u32_t ticker_ticks_now_get(void)
{
   10378:	b508      	push	{r3, lr}
	return cntr_cnt_get();
   1037a:	f7fe fa97 	bl	e8ac <cntr_cnt_get>
}
   1037e:	bd08      	pop	{r3, pc}

00010380 <ticker_ticks_diff_get>:

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   10380:	1a40      	subs	r0, r0, r1
}
   10382:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10386:	4770      	bx	lr

00010388 <ticker_worker>:
{
   10388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->worker_trigger = 1;
   1038c:	2301      	movs	r3, #1
   1038e:	7743      	strb	r3, [r0, #29]
	if (instance->job_guard) {
   10390:	f890 901c 	ldrb.w	r9, [r0, #28]
   10394:	f1b9 0f00 	cmp.w	r9, #0
   10398:	d147      	bne.n	1042a <ticker_worker+0xa2>
	if (instance->ticker_id_head == TICKER_NULL) {
   1039a:	7e03      	ldrb	r3, [r0, #24]
   1039c:	2bff      	cmp	r3, #255	; 0xff
   1039e:	d030      	beq.n	10402 <ticker_worker+0x7a>
   103a0:	4607      	mov	r7, r0
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   103a2:	f7fe fa83 	bl	e8ac <cntr_cnt_get>
   103a6:	6979      	ldr	r1, [r7, #20]
   103a8:	f7ff ffea 	bl	10380 <ticker_ticks_diff_get>
   103ac:	4605      	mov	r5, r0
	ticker_id_head = instance->ticker_id_head;
   103ae:	7e3c      	ldrb	r4, [r7, #24]
	node = &instance->node[0];
   103b0:	f8d7 8000 	ldr.w	r8, [r7]
	ticks_expired = 0;
   103b4:	2600      	movs	r6, #0
	while (ticker_id_head != TICKER_NULL) {
   103b6:	2cff      	cmp	r4, #255	; 0xff
   103b8:	d027      	beq.n	1040a <ticker_worker+0x82>
		ticker = &node[ticker_id_head];
   103ba:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   103be:	00a3      	lsls	r3, r4, #2
   103c0:	eb08 0103 	add.w	r1, r8, r3
		ticks_to_expire = ticker->ticks_to_expire;
   103c4:	688a      	ldr	r2, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
   103c6:	4295      	cmp	r5, r2
   103c8:	d31f      	bcc.n	1040a <ticker_worker+0x82>
		ticks_elapsed -= ticks_to_expire;
   103ca:	1aad      	subs	r5, r5, r2
		ticks_expired += ticks_to_expire;
   103cc:	4416      	add	r6, r2
		ticker_id_head = ticker->next;
   103ce:	f818 4003 	ldrb.w	r4, [r8, r3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   103d2:	784b      	ldrb	r3, [r1, #1]
   103d4:	788a      	ldrb	r2, [r1, #2]
   103d6:	1a9b      	subs	r3, r3, r2
   103d8:	b2db      	uxtb	r3, r3
   103da:	2b01      	cmp	r3, #1
   103dc:	d1eb      	bne.n	103b6 <ticker_worker+0x2e>
		ticker->ack--;
   103de:	3a01      	subs	r2, #1
   103e0:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
   103e2:	f8d1 a00c 	ldr.w	sl, [r1, #12]
   103e6:	f1ba 0f00 	cmp.w	sl, #0
   103ea:	d0e4      	beq.n	103b6 <ticker_worker+0x2e>
			ticks_at_expire = (instance->ticks_current +
   103ec:	6978      	ldr	r0, [r7, #20]
   103ee:	4430      	add	r0, r6
					   ticker->ticks_to_expire_minus) &
   103f0:	8a8b      	ldrh	r3, [r1, #20]
					   ticks_expired -
   103f2:	1ac0      	subs	r0, r0, r3
			ticker->timeout_func(ticks_at_expire,
   103f4:	690b      	ldr	r3, [r1, #16]
   103f6:	8b4a      	ldrh	r2, [r1, #26]
   103f8:	6a09      	ldr	r1, [r1, #32]
   103fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   103fe:	47d0      	blx	sl
   10400:	e7d9      	b.n	103b6 <ticker_worker+0x2e>
		instance->worker_trigger = 0;
   10402:	2300      	movs	r3, #0
   10404:	7743      	strb	r3, [r0, #29]
		return;
   10406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   1040a:	7aba      	ldrb	r2, [r7, #10]
   1040c:	7afb      	ldrb	r3, [r7, #11]
   1040e:	429a      	cmp	r2, r3
   10410:	d00d      	beq.n	1042e <ticker_worker+0xa6>
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   10412:	7afb      	ldrb	r3, [r7, #11]
   10414:	3302      	adds	r3, #2
   10416:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   1041a:	605e      	str	r6, [r3, #4]
	instance->worker_trigger = 0;
   1041c:	2300      	movs	r3, #0
   1041e:	777b      	strb	r3, [r7, #29]
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
   10420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10422:	2201      	movs	r2, #1
   10424:	2102      	movs	r1, #2
   10426:	4610      	mov	r0, r2
   10428:	4798      	blx	r3
   1042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		last = instance->ticks_elapsed_last + 1;
   1042e:	3301      	adds	r3, #1
   10430:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   10432:	2b02      	cmp	r3, #2
   10434:	d001      	beq.n	1043a <ticker_worker+0xb2>
		instance->ticks_elapsed_last = last;
   10436:	72fb      	strb	r3, [r7, #11]
   10438:	e7eb      	b.n	10412 <ticker_worker+0x8a>
			last = 0;
   1043a:	464b      	mov	r3, r9
   1043c:	e7fb      	b.n	10436 <ticker_worker+0xae>

0001043e <ticks_to_expire_prep>:
{
   1043e:	b570      	push	{r4, r5, r6, lr}
   10440:	4606      	mov	r6, r0
   10442:	4608      	mov	r0, r1
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   10444:	68b4      	ldr	r4, [r6, #8]
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   10446:	8ab5      	ldrh	r5, [r6, #20]
	if (((ticks_at_start - ticks_current) & BIT(23)) == 0) {
   10448:	1a51      	subs	r1, r2, r1
   1044a:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
   1044e:	d10c      	bne.n	1046a <ticks_to_expire_prep+0x2c>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   10450:	4601      	mov	r1, r0
   10452:	4610      	mov	r0, r2
   10454:	f7ff ff94 	bl	10380 <ticker_ticks_diff_get>
   10458:	4420      	add	r0, r4
	if (ticks_to_expire > ticks_to_expire_minus) {
   1045a:	42a8      	cmp	r0, r5
   1045c:	d812      	bhi.n	10484 <ticks_to_expire_prep+0x46>
		ticks_to_expire_minus -= ticks_to_expire;
   1045e:	1a28      	subs	r0, r5, r0
   10460:	b285      	uxth	r5, r0
		ticks_to_expire = 0;
   10462:	2000      	movs	r0, #0
	ticker->ticks_to_expire = ticks_to_expire;
   10464:	60b0      	str	r0, [r6, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   10466:	82b5      	strh	r5, [r6, #20]
   10468:	bd70      	pop	{r4, r5, r6, pc}
		delta_current_start = ticker_ticks_diff_get(ticks_current,
   1046a:	4611      	mov	r1, r2
   1046c:	f7ff ff88 	bl	10380 <ticker_ticks_diff_get>
		if (ticks_to_expire > delta_current_start) {
   10470:	4284      	cmp	r4, r0
   10472:	d901      	bls.n	10478 <ticks_to_expire_prep+0x3a>
			ticks_to_expire -= delta_current_start;
   10474:	1a20      	subs	r0, r4, r0
   10476:	e7f0      	b.n	1045a <ticks_to_expire_prep+0x1c>
			    (delta_current_start - ticks_to_expire);
   10478:	1b00      	subs	r0, r0, r4
			ticks_to_expire_minus +=
   1047a:	fa15 f080 	uxtah	r0, r5, r0
   1047e:	b285      	uxth	r5, r0
			ticks_to_expire = 0;
   10480:	2000      	movs	r0, #0
   10482:	e7ea      	b.n	1045a <ticks_to_expire_prep+0x1c>
		ticks_to_expire -= ticks_to_expire_minus;
   10484:	1b40      	subs	r0, r0, r5
		ticks_to_expire_minus = 0;
   10486:	2500      	movs	r5, #0
   10488:	e7ec      	b.n	10464 <ticks_to_expire_prep+0x26>

0001048a <ticker_job>:
{
   1048a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1048e:	b08d      	sub	sp, #52	; 0x34
	if (instance->worker_trigger) {
   10490:	7f43      	ldrb	r3, [r0, #29]
   10492:	9301      	str	r3, [sp, #4]
   10494:	2b00      	cmp	r3, #0
   10496:	f040 8254 	bne.w	10942 <ticker_job+0x4b8>
	instance->job_guard = 1;
   1049a:	2301      	movs	r3, #1
   1049c:	7703      	strb	r3, [r0, #28]
	ticks_previous = instance->ticks_current;
   1049e:	6943      	ldr	r3, [r0, #20]
   104a0:	930b      	str	r3, [sp, #44]	; 0x2c
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   104a2:	7a83      	ldrb	r3, [r0, #10]
   104a4:	7ac2      	ldrb	r2, [r0, #11]
   104a6:	4293      	cmp	r3, r2
   104a8:	d021      	beq.n	104ee <ticker_job+0x64>
		first = instance->ticks_elapsed_first + 1;
   104aa:	3301      	adds	r3, #1
   104ac:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   104ae:	2b02      	cmp	r3, #2
   104b0:	d100      	bne.n	104b4 <ticker_job+0x2a>
			first = 0;
   104b2:	9b01      	ldr	r3, [sp, #4]
		instance->ticks_elapsed_first = first;
   104b4:	7283      	strb	r3, [r0, #10]
		ticks_elapsed =
   104b6:	3302      	adds	r3, #2
   104b8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   104bc:	685b      	ldr	r3, [r3, #4]
   104be:	9303      	str	r3, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   104c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   104c2:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= 0x00FFFFFF;
   104c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   104c8:	6143      	str	r3, [r0, #20]
		flag_elapsed = 1;
   104ca:	2301      	movs	r3, #1
   104cc:	9304      	str	r3, [sp, #16]
   104ce:	9000      	str	r0, [sp, #0]
	ticker_id_old_head = instance->ticker_id_head;
   104d0:	7e03      	ldrb	r3, [r0, #24]
   104d2:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->node[0];
   104d4:	6803      	ldr	r3, [r0, #0]
   104d6:	4619      	mov	r1, r3
	users = &instance->user[0];
   104d8:	6843      	ldr	r3, [r0, #4]
   104da:	9305      	str	r3, [sp, #20]
	count_user = instance->count_user;
   104dc:	7a43      	ldrb	r3, [r0, #9]
	pending = 0;
   104de:	9a01      	ldr	r2, [sp, #4]
   104e0:	920a      	str	r2, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   104e2:	f04f 0bff 	mov.w	fp, #255	; 0xff
   104e6:	f8cd b01c 	str.w	fp, [sp, #28]
   104ea:	468b      	mov	fp, r1
   104ec:	e0cc      	b.n	10688 <ticker_job+0x1fe>
		flag_elapsed = 0;
   104ee:	9b01      	ldr	r3, [sp, #4]
   104f0:	9304      	str	r3, [sp, #16]
		ticks_elapsed = 0;
   104f2:	2300      	movs	r3, #0
   104f4:	9303      	str	r3, [sp, #12]
   104f6:	e7ea      	b.n	104ce <ticker_job+0x44>
				middle = 0;
   104f8:	9b01      	ldr	r3, [sp, #4]
   104fa:	e01d      	b.n	10538 <ticker_job+0xae>
			     (user_op->params.update.ticks_drift_plus == 0) &&
   104fc:	6872      	ldr	r2, [r6, #4]
   104fe:	bb82      	cbnz	r2, 10562 <ticker_job+0xd8>
			     (user_op->params.update.ticks_slot_plus == 0) &&
   10500:	68b2      	ldr	r2, [r6, #8]
   10502:	bb72      	cbnz	r2, 10562 <ticker_job+0xd8>
			     (user_op->params.update.lazy == 0) &&
   10504:	68f2      	ldr	r2, [r6, #12]
   10506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1050a:	d12a      	bne.n	10562 <ticker_job+0xd8>
				ticker_job_op_cb(user_op,
   1050c:	2101      	movs	r1, #1
   1050e:	4630      	mov	r0, r6
   10510:	f7ff fc82 	bl	fe18 <ticker_job_op_cb>
		while (user->middle != user->last) {
   10514:	f894 a002 	ldrb.w	sl, [r4, #2]
   10518:	78e3      	ldrb	r3, [r4, #3]
   1051a:	459a      	cmp	sl, r3
   1051c:	f000 80b3 	beq.w	10686 <ticker_job+0x1fc>
			user_op = &user_ops[user->middle];
   10520:	f04f 092c 	mov.w	r9, #44	; 0x2c
   10524:	fb09 f90a 	mul.w	r9, r9, sl
   10528:	eb08 0609 	add.w	r6, r8, r9
			middle = user->middle + 1;
   1052c:	f10a 0301 	add.w	r3, sl, #1
   10530:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
   10532:	7822      	ldrb	r2, [r4, #0]
   10534:	4293      	cmp	r3, r2
   10536:	d0df      	beq.n	104f8 <ticker_job+0x6e>
			user->middle = middle;
   10538:	70a3      	strb	r3, [r4, #2]
			ticker = &node[user_op->id];
   1053a:	7873      	ldrb	r3, [r6, #1]
   1053c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   10540:	009f      	lsls	r7, r3, #2
   10542:	eb0b 0507 	add.w	r5, fp, r7
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   10546:	f818 2009 	ldrb.w	r2, [r8, r9]
   1054a:	2a03      	cmp	r2, #3
   1054c:	d9e2      	bls.n	10514 <ticker_job+0x8a>
			state = (ticker->req - ticker->ack) & 0xff;
   1054e:	786b      	ldrb	r3, [r5, #1]
   10550:	78a9      	ldrb	r1, [r5, #2]
   10552:	1a5b      	subs	r3, r3, r1
   10554:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   10556:	2a05      	cmp	r2, #5
   10558:	d8d8      	bhi.n	1050c <ticker_job+0x82>
   1055a:	2b00      	cmp	r3, #0
   1055c:	d0d6      	beq.n	1050c <ticker_job+0x82>
			    (state == 0) ||
   1055e:	2a04      	cmp	r2, #4
   10560:	d0cc      	beq.n	104fc <ticker_job+0x72>
			if (state == 1) {
   10562:	2b01      	cmp	r3, #1
   10564:	f040 8085 	bne.w	10672 <ticker_job+0x1e8>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10568:	7871      	ldrb	r1, [r6, #1]
   1056a:	9800      	ldr	r0, [sp, #0]
   1056c:	f7ff fbf6 	bl	fd5c <ticker_dequeue>
   10570:	60a8      	str	r0, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10572:	f818 3009 	ldrb.w	r3, [r8, r9]
   10576:	2b04      	cmp	r3, #4
   10578:	d00b      	beq.n	10592 <ticker_job+0x108>
		ticker->req = ticker->ack;
   1057a:	78ab      	ldrb	r3, [r5, #2]
   1057c:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   1057e:	9b00      	ldr	r3, [sp, #0]
   10580:	7e5a      	ldrb	r2, [r3, #25]
   10582:	7873      	ldrb	r3, [r6, #1]
   10584:	429a      	cmp	r2, r3
   10586:	d06e      	beq.n	10666 <ticker_job+0x1dc>
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   10588:	2100      	movs	r1, #0
   1058a:	4630      	mov	r0, r6
   1058c:	f7ff fc44 	bl	fe18 <ticker_job_op_cb>
   10590:	e7c0      	b.n	10514 <ticker_job+0x8a>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   10592:	9b00      	ldr	r3, [sp, #0]
   10594:	695b      	ldr	r3, [r3, #20]
   10596:	9306      	str	r3, [sp, #24]
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   10598:	4681      	mov	r9, r0
	ticks_now = cntr_cnt_get();
   1059a:	f7fe f987 	bl	e8ac <cntr_cnt_get>
   1059e:	9008      	str	r0, [sp, #32]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   105a0:	9906      	ldr	r1, [sp, #24]
   105a2:	f7ff feed 	bl	10380 <ticker_ticks_diff_get>
   105a6:	9b03      	ldr	r3, [sp, #12]
   105a8:	4418      	add	r0, r3
	if (ticks_to_expire > ticks_elapsed) {
   105aa:	4581      	cmp	r9, r0
   105ac:	d909      	bls.n	105c2 <ticker_job+0x138>
		ticks_to_expire -= ticks_elapsed;
   105ae:	eba9 0900 	sub.w	r9, r9, r0
	if ((ticker->ticks_periodic != 0) &&
   105b2:	686b      	ldr	r3, [r5, #4]
   105b4:	b37b      	cbz	r3, 10616 <ticker_job+0x18c>
	    (user_op->params.update.lazy != 0)) {
   105b6:	89b3      	ldrh	r3, [r6, #12]
	if ((ticker->ticks_periodic != 0) &&
   105b8:	b36b      	cbz	r3, 10616 <ticker_job+0x18c>
		user_op->params.update.lazy--;
   105ba:	3b01      	subs	r3, #1
   105bc:	81b3      	strh	r3, [r6, #12]
   105be:	46a2      	mov	sl, r4
   105c0:	e011      	b.n	105e6 <ticker_job+0x15c>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   105c2:	eba0 0909 	sub.w	r9, r0, r9
   105c6:	8aab      	ldrh	r3, [r5, #20]
   105c8:	fa13 f389 	uxtah	r3, r3, r9
   105cc:	82ab      	strh	r3, [r5, #20]
		ticks_to_expire = 0;
   105ce:	f04f 0900 	mov.w	r9, #0
   105d2:	e7ee      	b.n	105b2 <ticker_job+0x128>
					   ticker_remainder_dec(ticker);
   105d4:	4628      	mov	r0, r5
   105d6:	f7ff fc07 	bl	fde8 <ticker_remainder_dec>
			ticks_to_expire -= ticker->ticks_periodic +
   105da:	4420      	add	r0, r4
   105dc:	eba9 0900 	sub.w	r9, r9, r0
			ticker->lazy_current--;
   105e0:	8b6b      	ldrh	r3, [r5, #26]
   105e2:	3b01      	subs	r3, #1
   105e4:	836b      	strh	r3, [r5, #26]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   105e6:	686c      	ldr	r4, [r5, #4]
   105e8:	454c      	cmp	r4, r9
   105ea:	d237      	bcs.n	1065c <ticker_job+0x1d2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   105ec:	8b6a      	ldrh	r2, [r5, #26]
   105ee:	89b3      	ldrh	r3, [r6, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   105f0:	429a      	cmp	r2, r3
   105f2:	d8ef      	bhi.n	105d4 <ticker_job+0x14a>
   105f4:	4654      	mov	r4, sl
   105f6:	e009      	b.n	1060c <ticker_job+0x182>
			ticks_to_expire += ticker->ticks_periodic +
   105f8:	f8d5 a004 	ldr.w	sl, [r5, #4]
					   ticker_remainder_inc(ticker);
   105fc:	4628      	mov	r0, r5
   105fe:	f7ff fbdd 	bl	fdbc <ticker_remainder_inc>
			ticks_to_expire += ticker->ticks_periodic +
   10602:	4450      	add	r0, sl
   10604:	4481      	add	r9, r0
			ticker->lazy_current++;
   10606:	8b6b      	ldrh	r3, [r5, #26]
   10608:	3301      	adds	r3, #1
   1060a:	836b      	strh	r3, [r5, #26]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1060c:	8b6a      	ldrh	r2, [r5, #26]
   1060e:	89b3      	ldrh	r3, [r6, #12]
   10610:	429a      	cmp	r2, r3
   10612:	d3f1      	bcc.n	105f8 <ticker_job+0x16e>
		ticker->lazy_periodic = user_op->params.update.lazy;
   10614:	832b      	strh	r3, [r5, #24]
				  user_op->params.update.ticks_drift_plus;
   10616:	88b3      	ldrh	r3, [r6, #4]
	ticker->ticks_to_expire = ticks_to_expire +
   10618:	444b      	add	r3, r9
   1061a:	60ab      	str	r3, [r5, #8]
				user_op->params.update.ticks_drift_minus;
   1061c:	88f3      	ldrh	r3, [r6, #6]
	ticker->ticks_to_expire_minus +=
   1061e:	8aaa      	ldrh	r2, [r5, #20]
   10620:	4413      	add	r3, r2
   10622:	82ab      	strh	r3, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   10624:	9a08      	ldr	r2, [sp, #32]
   10626:	9906      	ldr	r1, [sp, #24]
   10628:	4628      	mov	r0, r5
   1062a:	f7ff ff08 	bl	1043e <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   1062e:	8933      	ldrh	r3, [r6, #8]
   10630:	8aea      	ldrh	r2, [r5, #22]
   10632:	4413      	add	r3, r2
   10634:	b29b      	uxth	r3, r3
   10636:	82eb      	strh	r3, [r5, #22]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   10638:	8972      	ldrh	r2, [r6, #10]
   1063a:	4293      	cmp	r3, r2
   1063c:	d910      	bls.n	10660 <ticker_job+0x1d6>
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   1063e:	1a9b      	subs	r3, r3, r2
   10640:	82eb      	strh	r3, [r5, #22]
	if (user_op->params.update.force != 0) {
   10642:	7bb3      	ldrb	r3, [r6, #14]
   10644:	b103      	cbz	r3, 10648 <ticker_job+0x1be>
		ticker->force = user_op->params.update.force;
   10646:	70eb      	strb	r3, [r5, #3]
	ticker->next = *insert_head;
   10648:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1064c:	f80b 3007 	strb.w	r3, [fp, r7]
	*insert_head = user_op->id;
   10650:	7873      	ldrb	r3, [r6, #1]
   10652:	9307      	str	r3, [sp, #28]
		ticker->req++;
   10654:	786b      	ldrb	r3, [r5, #1]
   10656:	3301      	adds	r3, #1
   10658:	706b      	strb	r3, [r5, #1]
   1065a:	e795      	b.n	10588 <ticker_job+0xfe>
   1065c:	4654      	mov	r4, sl
   1065e:	e7d5      	b.n	1060c <ticker_job+0x182>
		ticker->ticks_slot = 0;
   10660:	2300      	movs	r3, #0
   10662:	82eb      	strh	r3, [r5, #22]
   10664:	e7ed      	b.n	10642 <ticker_job+0x1b8>
			instance->ticker_id_slot_previous = TICKER_NULL;
   10666:	23ff      	movs	r3, #255	; 0xff
   10668:	9900      	ldr	r1, [sp, #0]
   1066a:	764b      	strb	r3, [r1, #25]
			instance->ticks_slot_previous = 0;
   1066c:	2300      	movs	r3, #0
   1066e:	834b      	strh	r3, [r1, #26]
   10670:	e78a      	b.n	10588 <ticker_job+0xfe>
				instance->fp_sched(CALL_ID_JOB, CALL_ID_JOB, 1);
   10672:	9b00      	ldr	r3, [sp, #0]
   10674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10676:	2201      	movs	r2, #1
   10678:	2102      	movs	r1, #2
   1067a:	4608      	mov	r0, r1
   1067c:	4798      	blx	r3
				user->middle = prev;
   1067e:	f884 a002 	strb.w	sl, [r4, #2]
				pending = 1;
   10682:	2301      	movs	r3, #1
   10684:	930a      	str	r3, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   10686:	9b02      	ldr	r3, [sp, #8]
	while (count_user--) {
   10688:	1e5a      	subs	r2, r3, #1
   1068a:	b2d2      	uxtb	r2, r2
   1068c:	9202      	str	r2, [sp, #8]
   1068e:	b133      	cbz	r3, 1069e <ticker_job+0x214>
		user = &users[count_user];
   10690:	9b05      	ldr	r3, [sp, #20]
   10692:	9a02      	ldr	r2, [sp, #8]
   10694:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
		user_ops = &user->user_op[0];
   10698:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1069c:	e73a      	b.n	10514 <ticker_job+0x8a>
   1069e:	9306      	str	r3, [sp, #24]
   106a0:	f8dd b01c 	ldr.w	fp, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
   106a4:	9b00      	ldr	r3, [sp, #0]
   106a6:	7e1b      	ldrb	r3, [r3, #24]
   106a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   106aa:	429a      	cmp	r2, r3
   106ac:	d00a      	beq.n	106c4 <ticker_job+0x23a>
		flag_compare_update = 1;
   106ae:	2301      	movs	r3, #1
   106b0:	9308      	str	r3, [sp, #32]
	if (flag_elapsed) {
   106b2:	9b04      	ldr	r3, [sp, #16]
   106b4:	b94b      	cbnz	r3, 106ca <ticker_job+0x240>
	node = &instance->node[0];
   106b6:	9a00      	ldr	r2, [sp, #0]
   106b8:	6813      	ldr	r3, [r2, #0]
   106ba:	9302      	str	r3, [sp, #8]
	users = &instance->user[0];
   106bc:	6853      	ldr	r3, [r2, #4]
   106be:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
   106c0:	7a53      	ldrb	r3, [r2, #9]
   106c2:	e117      	b.n	108f4 <ticker_job+0x46a>
	flag_compare_update = 0;
   106c4:	9b06      	ldr	r3, [sp, #24]
   106c6:	9308      	str	r3, [sp, #32]
   106c8:	e7f3      	b.n	106b2 <ticker_job+0x228>
	node = &instance->node[0];
   106ca:	9e00      	ldr	r6, [sp, #0]
   106cc:	f8d6 9000 	ldr.w	r9, [r6]
	ticks_expired = 0;
   106d0:	f04f 0a00 	mov.w	sl, #0
   106d4:	f8cd b004 	str.w	fp, [sp, #4]
   106d8:	e02f      	b.n	1073a <ticker_job+0x2b0>
   106da:	f8dd b004 	ldr.w	fp, [sp, #4]
			ticker->ticks_to_expire -= ticks_elapsed;
   106de:	1a9b      	subs	r3, r3, r2
   106e0:	60ab      	str	r3, [r5, #8]
		if (instance->ticker_id_head != ticker_id_old_head) {
   106e2:	9b00      	ldr	r3, [sp, #0]
   106e4:	7e1b      	ldrb	r3, [r3, #24]
   106e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   106e8:	429a      	cmp	r2, r3
   106ea:	d0e4      	beq.n	106b6 <ticker_job+0x22c>
			flag_compare_update = 1;
   106ec:	9b04      	ldr	r3, [sp, #16]
   106ee:	9308      	str	r3, [sp, #32]
   106f0:	e7e1      	b.n	106b6 <ticker_job+0x22c>
			instance->ticker_id_slot_previous = TICKER_NULL;
   106f2:	23ff      	movs	r3, #255	; 0xff
   106f4:	7673      	strb	r3, [r6, #25]
			instance->ticks_slot_previous = 0;
   106f6:	2300      	movs	r3, #0
   106f8:	8373      	strh	r3, [r6, #26]
   106fa:	e036      	b.n	1076a <ticker_job+0x2e0>
				ticks_to_expire += ticker->ticks_periodic;
   106fc:	686c      	ldr	r4, [r5, #4]
   106fe:	4404      	add	r4, r0
				ticks_to_expire += ticker_remainder_inc(ticker);
   10700:	4628      	mov	r0, r5
   10702:	f7ff fb5b 	bl	fdbc <ticker_remainder_inc>
   10706:	4420      	add	r0, r4
			while (count--) {
   10708:	463b      	mov	r3, r7
   1070a:	1e5f      	subs	r7, r3, #1
   1070c:	2b00      	cmp	r3, #0
   1070e:	d1f5      	bne.n	106fc <ticker_job+0x272>
			ticker->ticks_to_expire = ticks_to_expire;
   10710:	60a8      	str	r0, [r5, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   10712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10714:	eb03 020a 	add.w	r2, r3, sl
   10718:	6971      	ldr	r1, [r6, #20]
   1071a:	4628      	mov	r0, r5
   1071c:	f7ff fe8f 	bl	1043e <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
   10720:	8b2b      	ldrh	r3, [r5, #24]
   10722:	836b      	strh	r3, [r5, #26]
			ticker->force = 0;
   10724:	2300      	movs	r3, #0
   10726:	70eb      	strb	r3, [r5, #3]
			ticker->next = *insert_head;
   10728:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1072c:	f809 300b 	strb.w	r3, [r9, fp]
			ticker->req++;
   10730:	786b      	ldrb	r3, [r5, #1]
   10732:	3301      	adds	r3, #1
   10734:	706b      	strb	r3, [r5, #1]
			*insert_head = id_expired;
   10736:	f8cd 8004 	str.w	r8, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
   1073a:	f896 8018 	ldrb.w	r8, [r6, #24]
   1073e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   10742:	d026      	beq.n	10792 <ticker_job+0x308>
		ticker = &node[id_expired];
   10744:	eb08 03c8 	add.w	r3, r8, r8, lsl #3
   10748:	ea4f 0b83 	mov.w	fp, r3, lsl #2
   1074c:	eb09 050b 	add.w	r5, r9, fp
		ticks_to_expire = ticker->ticks_to_expire;
   10750:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10752:	9a03      	ldr	r2, [sp, #12]
   10754:	4293      	cmp	r3, r2
   10756:	d8c0      	bhi.n	106da <ticker_job+0x250>
		ticks_elapsed -= ticks_to_expire;
   10758:	9a03      	ldr	r2, [sp, #12]
   1075a:	1ad2      	subs	r2, r2, r3
   1075c:	9203      	str	r2, [sp, #12]
		ticks_expired += ticks_to_expire;
   1075e:	449a      	add	sl, r3
		if (instance->ticks_slot_previous > ticks_to_expire) {
   10760:	8b72      	ldrh	r2, [r6, #26]
   10762:	4293      	cmp	r3, r2
   10764:	d2c5      	bcs.n	106f2 <ticker_job+0x268>
			instance->ticks_slot_previous -= ticks_to_expire;
   10766:	1ad3      	subs	r3, r2, r3
   10768:	8373      	strh	r3, [r6, #26]
		if (ticker->ticks_slot != 0) {
   1076a:	8aeb      	ldrh	r3, [r5, #22]
   1076c:	b11b      	cbz	r3, 10776 <ticker_job+0x2ec>
			instance->ticker_id_slot_previous = id_expired;
   1076e:	f886 8019 	strb.w	r8, [r6, #25]
			instance->ticks_slot_previous = ticker->ticks_slot;
   10772:	8aeb      	ldrh	r3, [r5, #22]
   10774:	8373      	strh	r3, [r6, #26]
		ticker->ticks_to_expire = 0;
   10776:	2300      	movs	r3, #0
   10778:	60ab      	str	r3, [r5, #8]
		instance->ticker_id_head = ticker->next;
   1077a:	f819 300b 	ldrb.w	r3, [r9, fp]
   1077e:	7633      	strb	r3, [r6, #24]
		if (ticker->ticks_periodic != 0) {
   10780:	686b      	ldr	r3, [r5, #4]
   10782:	b11b      	cbz	r3, 1078c <ticker_job+0x302>
			count = 1 + ticker->lazy_periodic;
   10784:	8b2b      	ldrh	r3, [r5, #24]
   10786:	3301      	adds	r3, #1
			ticks_to_expire = 0;
   10788:	2000      	movs	r0, #0
   1078a:	e7be      	b.n	1070a <ticker_job+0x280>
			ticker->req = ticker->ack;
   1078c:	78ab      	ldrb	r3, [r5, #2]
   1078e:	706b      	strb	r3, [r5, #1]
   10790:	e7d3      	b.n	1073a <ticker_job+0x2b0>
   10792:	f8dd b004 	ldr.w	fp, [sp, #4]
   10796:	e7a4      	b.n	106e2 <ticker_job+0x258>
				user_op = &user_ops[user_ops_first];
   10798:	232c      	movs	r3, #44	; 0x2c
   1079a:	9a03      	ldr	r2, [sp, #12]
   1079c:	fb03 f302 	mul.w	r3, r3, r2
   107a0:	9905      	ldr	r1, [sp, #20]
   107a2:	4419      	add	r1, r3
   107a4:	9101      	str	r1, [sp, #4]
				first = user_ops_first + 1;
   107a6:	3201      	adds	r2, #1
   107a8:	b2d2      	uxtb	r2, r2
   107aa:	4611      	mov	r1, r2
   107ac:	9203      	str	r2, [sp, #12]
				if (first == user->count_user_op) {
   107ae:	9a04      	ldr	r2, [sp, #16]
   107b0:	7812      	ldrb	r2, [r2, #0]
   107b2:	4291      	cmp	r1, r2
   107b4:	d013      	beq.n	107de <ticker_job+0x354>
				id_insert = user_op->id;
   107b6:	9a01      	ldr	r2, [sp, #4]
   107b8:	7857      	ldrb	r7, [r2, #1]
				ticker = &node[id_insert];
   107ba:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
   107be:	0094      	lsls	r4, r2, #2
   107c0:	9a02      	ldr	r2, [sp, #8]
   107c2:	4414      	add	r4, r2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   107c4:	9a05      	ldr	r2, [sp, #20]
   107c6:	5cd3      	ldrb	r3, [r2, r3]
   107c8:	2b03      	cmp	r3, #3
   107ca:	d16b      	bne.n	108a4 <ticker_job+0x41a>
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
   107cc:	7862      	ldrb	r2, [r4, #1]
   107ce:	78a3      	ldrb	r3, [r4, #2]
   107d0:	429a      	cmp	r2, r3
   107d2:	d007      	beq.n	107e4 <ticker_job+0x35a>
					ticker_job_op_cb(user_op,
   107d4:	2101      	movs	r1, #1
   107d6:	9801      	ldr	r0, [sp, #4]
   107d8:	f7ff fb1e 	bl	fe18 <ticker_job_op_cb>
   107dc:	e062      	b.n	108a4 <ticker_job+0x41a>
					first = 0;
   107de:	9a06      	ldr	r2, [sp, #24]
   107e0:	9203      	str	r2, [sp, #12]
   107e2:	e7e8      	b.n	107b6 <ticker_job+0x32c>
				ticker_job_op_start(ticker, user_op,
   107e4:	9b00      	ldr	r3, [sp, #0]
   107e6:	6959      	ldr	r1, [r3, #20]
	ticker->ticks_periodic = start->ticks_periodic;
   107e8:	9801      	ldr	r0, [sp, #4]
   107ea:	68c3      	ldr	r3, [r0, #12]
   107ec:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   107ee:	6903      	ldr	r3, [r0, #16]
   107f0:	61e3      	str	r3, [r4, #28]
	ticker->lazy_periodic = start->lazy;
   107f2:	8a83      	ldrh	r3, [r0, #20]
   107f4:	8323      	strh	r3, [r4, #24]
	ticker->ticks_slot = start->ticks_slot;
   107f6:	8ac3      	ldrh	r3, [r0, #22]
   107f8:	82e3      	strh	r3, [r4, #22]
	ticker->timeout_func = start->fp_timeout_func;
   107fa:	6983      	ldr	r3, [r0, #24]
   107fc:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   107fe:	69c3      	ldr	r3, [r0, #28]
   10800:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   10802:	6883      	ldr	r3, [r0, #8]
   10804:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
   10806:	2500      	movs	r5, #0
   10808:	82a5      	strh	r5, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   1080a:	6842      	ldr	r2, [r0, #4]
   1080c:	4620      	mov	r0, r4
   1080e:	f7ff fe16 	bl	1043e <ticks_to_expire_prep>
	ticker->remainder_current = 0;
   10812:	6225      	str	r5, [r4, #32]
	ticker->lazy_current = 0;
   10814:	8365      	strh	r5, [r4, #26]
	ticker->force = 1;
   10816:	2301      	movs	r3, #1
   10818:	70e3      	strb	r3, [r4, #3]
   1081a:	e054      	b.n	108c6 <ticker_job+0x43c>
		skip = 0;
   1081c:	f04f 0a00 	mov.w	sl, #0
   10820:	e00e      	b.n	10840 <ticker_job+0x3b6>
				skip_collide = 0;
   10822:	2300      	movs	r3, #0
   10824:	e021      	b.n	1086a <ticker_job+0x3e0>
		if (ticker->ticks_periodic != 0) {
   10826:	6865      	ldr	r5, [r4, #4]
   10828:	2d00      	cmp	r5, #0
   1082a:	d05b      	beq.n	108e4 <ticker_job+0x45a>
						   ticker_remainder_inc(ticker);
   1082c:	4620      	mov	r0, r4
   1082e:	f7ff fac5 	bl	fdbc <ticker_remainder_inc>
			ticker->ticks_to_expire += ticker->ticks_periodic +
   10832:	4428      	add	r0, r5
   10834:	68a5      	ldr	r5, [r4, #8]
   10836:	4405      	add	r5, r0
   10838:	60a5      	str	r5, [r4, #8]
			ticker->lazy_current++;
   1083a:	8b63      	ldrh	r3, [r4, #26]
   1083c:	3301      	adds	r3, #1
   1083e:	8363      	strh	r3, [r4, #26]
	while (id_insert !=
   10840:	4639      	mov	r1, r7
   10842:	9800      	ldr	r0, [sp, #0]
   10844:	f7ff fa2a 	bl	fc9c <ticker_enqueue>
   10848:	4605      	mov	r5, r0
   1084a:	4287      	cmp	r7, r0
   1084c:	d021      	beq.n	10892 <ticker_job+0x408>
		if (id_collide != TICKER_NULL) {
   1084e:	2dff      	cmp	r5, #255	; 0xff
   10850:	d0e9      	beq.n	10826 <ticker_job+0x39c>
			struct ticker_node *ticker_collide = &node[id_collide];
   10852:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   10856:	ea4f 0883 	mov.w	r8, r3, lsl #2
   1085a:	eb09 0608 	add.w	r6, r9, r8
			if (ticker_collide->lazy_current >
   1085e:	8b73      	ldrh	r3, [r6, #26]
			    ticker_collide->lazy_periodic) {
   10860:	8b32      	ldrh	r2, [r6, #24]
			if (ticker_collide->lazy_current >
   10862:	4293      	cmp	r3, r2
   10864:	d9dd      	bls.n	10822 <ticker_job+0x398>
				skip_collide = ticker_collide->lazy_current -
   10866:	1a9b      	subs	r3, r3, r2
   10868:	b29b      	uxth	r3, r3
			if (ticker_collide->ticks_periodic &&
   1086a:	6872      	ldr	r2, [r6, #4]
   1086c:	2a00      	cmp	r2, #0
   1086e:	d0da      	beq.n	10826 <ticker_job+0x39c>
   10870:	4553      	cmp	r3, sl
   10872:	d8d8      	bhi.n	10826 <ticker_job+0x39c>
			    ticker_collide->force < ticker->force) {
   10874:	78f2      	ldrb	r2, [r6, #3]
   10876:	78e3      	ldrb	r3, [r4, #3]
			    skip_collide <= skip &&
   10878:	429a      	cmp	r2, r3
   1087a:	d2d4      	bcs.n	10826 <ticker_job+0x39c>
					ticker_dequeue(instance, id_collide);
   1087c:	4629      	mov	r1, r5
   1087e:	9800      	ldr	r0, [sp, #0]
   10880:	f7ff fa6c 	bl	fd5c <ticker_dequeue>
				ticker_collide->ticks_to_expire =
   10884:	60b0      	str	r0, [r6, #8]
				ticker_collide->req = ticker_collide->ack;
   10886:	78b3      	ldrb	r3, [r6, #2]
   10888:	7073      	strb	r3, [r6, #1]
				ticker_collide->next = *insert_head;
   1088a:	f809 b008 	strb.w	fp, [r9, r8]
				*insert_head = id_collide;
   1088e:	46ab      	mov	fp, r5
   10890:	e7d6      	b.n	10840 <ticker_job+0x3b6>
	ticker->req = ticker->ack + 1;
   10892:	78a3      	ldrb	r3, [r4, #2]
   10894:	3301      	adds	r3, #1
   10896:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
   10898:	2100      	movs	r1, #0
			if (user_op) {
   1089a:	9b01      	ldr	r3, [sp, #4]
   1089c:	b113      	cbz	r3, 108a4 <ticker_job+0x41a>
				ticker_job_op_cb(user_op, status);
   1089e:	4618      	mov	r0, r3
   108a0:	f7ff faba 	bl	fe18 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   108a4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   108a8:	d01e      	beq.n	108e8 <ticker_job+0x45e>
			if (insert_head != TICKER_NULL) {
   108aa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   108ae:	f43f af73 	beq.w	10798 <ticker_job+0x30e>
				ticker = &node[id_insert];
   108b2:	eb0b 02cb 	add.w	r2, fp, fp, lsl #3
   108b6:	0093      	lsls	r3, r2, #2
   108b8:	9a02      	ldr	r2, [sp, #8]
   108ba:	18d4      	adds	r4, r2, r3
				id_insert = insert_head;
   108bc:	465f      	mov	r7, fp
				insert_head = ticker->next;
   108be:	f812 b003 	ldrb.w	fp, [r2, r3]
				user_op = NULL;
   108c2:	2300      	movs	r3, #0
   108c4:	9301      	str	r3, [sp, #4]
	struct ticker_node *node = &instance->node[0];
   108c6:	9b00      	ldr	r3, [sp, #0]
   108c8:	f8d3 9000 	ldr.w	r9, [r3]
	ticker->next = TICKER_NULL;
   108cc:	23ff      	movs	r3, #255	; 0xff
   108ce:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
   108d0:	f8b4 a01a 	ldrh.w	sl, [r4, #26]
   108d4:	8b23      	ldrh	r3, [r4, #24]
   108d6:	459a      	cmp	sl, r3
   108d8:	d9a0      	bls.n	1081c <ticker_job+0x392>
		skip = ticker->lazy_current -
   108da:	ebaa 0a03 	sub.w	sl, sl, r3
   108de:	fa1f fa8a 	uxth.w	sl, sl
   108e2:	e7ad      	b.n	10840 <ticker_job+0x3b6>
			return TICKER_STATUS_FAILURE;
   108e4:	2101      	movs	r1, #1
   108e6:	e7d8      	b.n	1089a <ticker_job+0x410>
		       (user_ops_first != user->middle)) {
   108e8:	9b04      	ldr	r3, [sp, #16]
   108ea:	789b      	ldrb	r3, [r3, #2]
		while ((insert_head != TICKER_NULL) ||
   108ec:	9a03      	ldr	r2, [sp, #12]
   108ee:	429a      	cmp	r2, r3
   108f0:	d1db      	bne.n	108aa <ticker_job+0x420>
	while (count_user--) {
   108f2:	9b07      	ldr	r3, [sp, #28]
   108f4:	1e5a      	subs	r2, r3, #1
   108f6:	b2d2      	uxtb	r2, r2
   108f8:	9207      	str	r2, [sp, #28]
   108fa:	b153      	cbz	r3, 10912 <ticker_job+0x488>
		user = &users[count_user];
   108fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   108fe:	9a07      	ldr	r2, [sp, #28]
   10900:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10904:	461a      	mov	r2, r3
   10906:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
   10908:	685b      	ldr	r3, [r3, #4]
   1090a:	9305      	str	r3, [sp, #20]
		user_ops_first = user->first;
   1090c:	7853      	ldrb	r3, [r2, #1]
   1090e:	9303      	str	r3, [sp, #12]
   10910:	e7c8      	b.n	108a4 <ticker_job+0x41a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   10912:	9b00      	ldr	r3, [sp, #0]
   10914:	7e1b      	ldrb	r3, [r3, #24]
   10916:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10918:	429a      	cmp	r2, r3
   1091a:	d001      	beq.n	10920 <ticker_job+0x496>
		flag_compare_update = 1;
   1091c:	2301      	movs	r3, #1
   1091e:	9308      	str	r3, [sp, #32]
	if (!pending) {
   10920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10922:	b18b      	cbz	r3, 10948 <ticker_job+0x4be>
	instance->job_guard = 0;
   10924:	2300      	movs	r3, #0
   10926:	9a00      	ldr	r2, [sp, #0]
   10928:	7713      	strb	r3, [r2, #28]
	if (flag_compare_update) {
   1092a:	9b08      	ldr	r3, [sp, #32]
   1092c:	2b00      	cmp	r3, #0
   1092e:	d13f      	bne.n	109b0 <ticker_job+0x526>
	if (instance->worker_trigger) {
   10930:	9b00      	ldr	r3, [sp, #0]
   10932:	7f5b      	ldrb	r3, [r3, #29]
   10934:	b12b      	cbz	r3, 10942 <ticker_job+0x4b8>
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
   10936:	9b00      	ldr	r3, [sp, #0]
   10938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1093a:	2201      	movs	r2, #1
   1093c:	4611      	mov	r1, r2
   1093e:	2002      	movs	r0, #2
   10940:	4798      	blx	r3
}
   10942:	b00d      	add	sp, #52	; 0x34
   10944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	users = &instance->user[0];
   10948:	9a00      	ldr	r2, [sp, #0]
   1094a:	f8d2 8004 	ldr.w	r8, [r2, #4]
	count_user = instance->count_user;
   1094e:	7a53      	ldrb	r3, [r2, #9]
   10950:	e026      	b.n	109a0 <ticker_job+0x516>
		uop->status = TICKER_STATUS_SUCCESS;
   10952:	2300      	movs	r3, #0
   10954:	623b      	str	r3, [r7, #32]
		fp_op_func = uop->fp_op_func;
   10956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (fp_op_func) {
   10958:	b113      	cbz	r3, 10960 <ticker_job+0x4d6>
		fp_op_func(uop->status, uop->op_context);
   1095a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1095c:	6a38      	ldr	r0, [r7, #32]
   1095e:	4798      	blx	r3
			first = user->first + 1;
   10960:	7863      	ldrb	r3, [r4, #1]
   10962:	3301      	adds	r3, #1
   10964:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
   10966:	7822      	ldrb	r2, [r4, #0]
   10968:	4293      	cmp	r3, r2
   1096a:	d016      	beq.n	1099a <ticker_job+0x510>
			user->first = first;
   1096c:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   1096e:	7862      	ldrb	r2, [r4, #1]
   10970:	78e3      	ldrb	r3, [r4, #3]
   10972:	429a      	cmp	r2, r3
   10974:	d013      	beq.n	1099e <ticker_job+0x514>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   10976:	232c      	movs	r3, #44	; 0x2c
   10978:	fb03 f302 	mul.w	r3, r3, r2
   1097c:	18ef      	adds	r7, r5, r3
	switch (uop->op) {
   1097e:	5ceb      	ldrb	r3, [r5, r3]
   10980:	2b01      	cmp	r3, #1
   10982:	d0e6      	beq.n	10952 <ticker_job+0x4c8>
   10984:	2b02      	cmp	r3, #2
   10986:	d106      	bne.n	10996 <ticker_job+0x50c>
		ticker_by_next_slot_get(instance,
   10988:	68fb      	ldr	r3, [r7, #12]
   1098a:	68ba      	ldr	r2, [r7, #8]
   1098c:	6879      	ldr	r1, [r7, #4]
   1098e:	9800      	ldr	r0, [sp, #0]
   10990:	f7ff f955 	bl	fc3e <ticker_by_next_slot_get>
   10994:	e7dd      	b.n	10952 <ticker_job+0x4c8>
	fp_op_func = NULL;
   10996:	2300      	movs	r3, #0
   10998:	e7de      	b.n	10958 <ticker_job+0x4ce>
				first = 0;
   1099a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1099c:	e7e6      	b.n	1096c <ticker_job+0x4e2>
	while (count_user--) {
   1099e:	4633      	mov	r3, r6
   109a0:	1e5e      	subs	r6, r3, #1
   109a2:	b2f6      	uxtb	r6, r6
   109a4:	2b00      	cmp	r3, #0
   109a6:	d0bd      	beq.n	10924 <ticker_job+0x49a>
		user = &users[count_user];
   109a8:	eb08 04c6 	add.w	r4, r8, r6, lsl #3
		user_op = &user->user_op[0];
   109ac:	6865      	ldr	r5, [r4, #4]
   109ae:	e7de      	b.n	1096e <ticker_job+0x4e4>
	if (instance->ticker_id_head == TICKER_NULL) {
   109b0:	7e13      	ldrb	r3, [r2, #24]
   109b2:	2bff      	cmp	r3, #255	; 0xff
   109b4:	d02f      	beq.n	10a16 <ticker_job+0x58c>
	if (ticker_id_old_head == TICKER_NULL) {
   109b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   109b8:	2bff      	cmp	r3, #255	; 0xff
   109ba:	d034      	beq.n	10a26 <ticker_job+0x59c>
	ticker = &instance->node[instance->ticker_id_head];
   109bc:	9800      	ldr	r0, [sp, #0]
   109be:	6802      	ldr	r2, [r0, #0]
   109c0:	7e03      	ldrb	r3, [r0, #24]
   109c2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   109c6:	0099      	lsls	r1, r3, #2
   109c8:	440a      	add	r2, r1
	ticks_to_expire = ticker->ticks_to_expire;
   109ca:	6897      	ldr	r7, [r2, #8]
	i = 10;
   109cc:	250a      	movs	r5, #10
   109ce:	4680      	mov	r8, r0
		LL_ASSERT(i);
   109d0:	b39d      	cbz	r5, 10a3a <ticker_job+0x5b0>
		i--;
   109d2:	3d01      	subs	r5, #1
		ctr = cntr_cnt_get();
   109d4:	f7fd ff6a 	bl	e8ac <cntr_cnt_get>
   109d8:	4606      	mov	r6, r0
		cc = instance->ticks_current;
   109da:	f8d8 4014 	ldr.w	r4, [r8, #20]
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   109de:	4621      	mov	r1, r4
   109e0:	f7ff fcce 	bl	10380 <ticker_ticks_diff_get>
   109e4:	3003      	adds	r0, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
   109e6:	4287      	cmp	r7, r0
   109e8:	bf2c      	ite	cs
   109ea:	19e4      	addcs	r4, r4, r7
   109ec:	1824      	addcc	r4, r4, r0
		cc &= 0x00FFFFFF;
   109ee:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->fp_cmp_set(cc);
   109f2:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   109f6:	4620      	mov	r0, r4
   109f8:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   109fa:	f7fd ff57 	bl	e8ac <cntr_cnt_get>
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   109fe:	4631      	mov	r1, r6
   10a00:	f7ff fcbe 	bl	10380 <ticker_ticks_diff_get>
   10a04:	f100 0903 	add.w	r9, r0, #3
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
   10a08:	4631      	mov	r1, r6
   10a0a:	4620      	mov	r0, r4
   10a0c:	f7ff fcb8 	bl	10380 <ticker_ticks_diff_get>
   10a10:	4581      	cmp	r9, r0
   10a12:	d8dd      	bhi.n	109d0 <ticker_job+0x546>
   10a14:	e78c      	b.n	10930 <ticker_job+0x4a6>
		if (cntr_stop() == 0) {
   10a16:	f7fd ff2f 	bl	e878 <cntr_stop>
   10a1a:	2800      	cmp	r0, #0
   10a1c:	d188      	bne.n	10930 <ticker_job+0x4a6>
			instance->ticks_slot_previous = 0;
   10a1e:	2300      	movs	r3, #0
   10a20:	9a00      	ldr	r2, [sp, #0]
   10a22:	8353      	strh	r3, [r2, #26]
   10a24:	e784      	b.n	10930 <ticker_job+0x4a6>
		ticks_current = cntr_cnt_get();
   10a26:	f7fd ff41 	bl	e8ac <cntr_cnt_get>
   10a2a:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   10a2c:	f7fd ff14 	bl	e858 <cntr_start>
   10a30:	2800      	cmp	r0, #0
   10a32:	d1c3      	bne.n	109bc <ticker_job+0x532>
			instance->ticks_current = ticks_current;
   10a34:	9b00      	ldr	r3, [sp, #0]
   10a36:	615c      	str	r4, [r3, #20]
   10a38:	e7c0      	b.n	109bc <ticker_job+0x532>
		LL_ASSERT(i);
   10a3a:	4040      	eors	r0, r0
   10a3c:	f380 8811 	msr	BASEPRI, r0
   10a40:	f04f 0004 	mov.w	r0, #4
   10a44:	df02      	svc	2
	...

00010a48 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
   10a48:	b570      	push	{r4, r5, r6, lr}
   10a4a:	4606      	mov	r6, r0
   10a4c:	460c      	mov	r4, r1
	while (len) {
   10a4e:	b19c      	cbz	r4, 10a78 <bt_rand+0x30>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
   10a50:	4d0a      	ldr	r5, [pc, #40]	; (10a7c <bt_rand+0x34>)
   10a52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10a56:	4628      	mov	r0, r5
   10a58:	f016 fe48 	bl	276ec <_impl_k_mutex_lock>
		k_mutex_lock(&mutex_rand, K_FOREVER);
		len = rand_get(len, buf);
   10a5c:	4631      	mov	r1, r6
   10a5e:	4620      	mov	r0, r4
   10a60:	f7ff f89a 	bl	fb98 <rand_get>
   10a64:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
   10a66:	4628      	mov	r0, r5
   10a68:	f016 feaa 	bl	277c0 <_impl_k_mutex_unlock>
		k_mutex_unlock(&mutex_rand);
		if (len) {
   10a6c:	2c00      	cmp	r4, #0
   10a6e:	d0ee      	beq.n	10a4e <bt_rand+0x6>
   10a70:	bf20      	wfe
  __ASM volatile ("sev");
   10a72:	bf40      	sev
  __ASM volatile ("wfe");
   10a74:	bf20      	wfe
   10a76:	e7ea      	b.n	10a4e <bt_rand+0x6>
			cpu_sleep();
		}
	}

	return 0;
}
   10a78:	2000      	movs	r0, #0
   10a7a:	bd70      	pop	{r4, r5, r6, pc}
   10a7c:	2000cfbc 	.word	0x2000cfbc

00010a80 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   10a80:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   10a82:	2300      	movs	r3, #0
   10a84:	f7fd ff4e 	bl	e924 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   10a88:	2000      	movs	r0, #0
   10a8a:	bd08      	pop	{r3, pc}

00010a8c <ticker_if_done>:
	*((u32_t volatile *)ops_context) = status;
   10a8c:	6008      	str	r0, [r1, #0]
   10a8e:	4770      	bx	lr

00010a90 <mayfly_xtal_start>:
{
   10a90:	b508      	push	{r3, lr}
	clock_control_on(_radio.hf_clock, NULL);
   10a92:	4b03      	ldr	r3, [pc, #12]	; (10aa0 <mayfly_xtal_start+0x10>)
   10a94:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   10a96:	6843      	ldr	r3, [r0, #4]
	return api->on(dev, sys);
   10a98:	681b      	ldr	r3, [r3, #0]
   10a9a:	2100      	movs	r1, #0
   10a9c:	4798      	blx	r3
   10a9e:	bd08      	pop	{r3, pc}
   10aa0:	20000dec 	.word	0x20000dec

00010aa4 <mayfly_xtal_stop>:
{
   10aa4:	b508      	push	{r3, lr}
	clock_control_off(_radio.hf_clock, NULL);
   10aa6:	4b03      	ldr	r3, [pc, #12]	; (10ab4 <mayfly_xtal_stop+0x10>)
   10aa8:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   10aaa:	6843      	ldr	r3, [r0, #4]
	return api->off(dev, sys);
   10aac:	685b      	ldr	r3, [r3, #4]
   10aae:	2100      	movs	r1, #0
   10ab0:	4798      	blx	r3
   10ab2:	bd08      	pop	{r3, pc}
   10ab4:	20000dec 	.word	0x20000dec

00010ab8 <prepare_reduced>:
	if (status == 0) {
   10ab8:	b918      	cbnz	r0, 10ac2 <prepare_reduced+0xa>
		hdr->ticks_xtal_to_start |= ((u32_t)1 << 31);
   10aba:	680b      	ldr	r3, [r1, #0]
   10abc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10ac0:	600b      	str	r3, [r1, #0]
   10ac2:	4770      	bx	lr

00010ac4 <prepare_normal>:
	if (status == 0) {
   10ac4:	b918      	cbnz	r0, 10ace <prepare_normal+0xa>
		hdr->ticks_xtal_to_start &= ~((u32_t)1 << 31);
   10ac6:	680b      	ldr	r3, [r1, #0]
   10ac8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   10acc:	600b      	str	r3, [r1, #0]
   10ace:	4770      	bx	lr

00010ad0 <chan_sel_remap>:
{
   10ad0:	b470      	push	{r4, r5, r6}
	byte_count = 5;
   10ad2:	2405      	movs	r4, #5
	chan_next = 0;
   10ad4:	2200      	movs	r2, #0
	while (byte_count--) {
   10ad6:	e011      	b.n	10afc <chan_sel_remap+0x2c>
			chan_next++;
   10ad8:	3201      	adds	r2, #1
   10ada:	b2d2      	uxtb	r2, r2
			bite >>= 1;
   10adc:	086d      	lsrs	r5, r5, #1
		while (bit_count--) {
   10ade:	461c      	mov	r4, r3
   10ae0:	1e63      	subs	r3, r4, #1
   10ae2:	b2db      	uxtb	r3, r3
   10ae4:	b134      	cbz	r4, 10af4 <chan_sel_remap+0x24>
			if (bite & 0x01) {
   10ae6:	f015 0f01 	tst.w	r5, #1
   10aea:	d0f5      	beq.n	10ad8 <chan_sel_remap+0x8>
				if (chan_index == 0) {
   10aec:	b111      	cbz	r1, 10af4 <chan_sel_remap+0x24>
				chan_index--;
   10aee:	3901      	subs	r1, #1
   10af0:	b2c9      	uxtb	r1, r1
   10af2:	e7f1      	b.n	10ad8 <chan_sel_remap+0x8>
		if (bit_count < 8) {
   10af4:	2b07      	cmp	r3, #7
   10af6:	d907      	bls.n	10b08 <chan_sel_remap+0x38>
		chan_map++;
   10af8:	3001      	adds	r0, #1
	while (byte_count--) {
   10afa:	4634      	mov	r4, r6
   10afc:	1e63      	subs	r3, r4, #1
   10afe:	b2de      	uxtb	r6, r3
   10b00:	b114      	cbz	r4, 10b08 <chan_sel_remap+0x38>
		bite = *chan_map;
   10b02:	7805      	ldrb	r5, [r0, #0]
		bit_count = 8;
   10b04:	2408      	movs	r4, #8
		while (bit_count--) {
   10b06:	e7eb      	b.n	10ae0 <chan_sel_remap+0x10>
}
   10b08:	4610      	mov	r0, r2
   10b0a:	bc70      	pop	{r4, r5, r6}
   10b0c:	4770      	bx	lr
	...

00010b10 <chan_sel_1>:
{
   10b10:	b570      	push	{r4, r5, r6, lr}
   10b12:	4605      	mov	r5, r0
   10b14:	f89d 6010 	ldrb.w	r6, [sp, #16]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   10b18:	7804      	ldrb	r4, [r0, #0]
   10b1a:	fb02 1101 	mla	r1, r2, r1, r1
   10b1e:	4421      	add	r1, r4
   10b20:	4c0f      	ldr	r4, [pc, #60]	; (10b60 <chan_sel_1+0x50>)
   10b22:	fb84 2401 	smull	r2, r4, r4, r1
   10b26:	1862      	adds	r2, r4, r1
   10b28:	17cc      	asrs	r4, r1, #31
   10b2a:	ebc4 1462 	rsb	r4, r4, r2, asr #5
   10b2e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   10b32:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   10b36:	1b0c      	subs	r4, r1, r4
   10b38:	b2e0      	uxtb	r0, r4
	*chan_use = chan_next;
   10b3a:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10b3c:	08c2      	lsrs	r2, r0, #3
   10b3e:	5c9a      	ldrb	r2, [r3, r2]
   10b40:	f004 0407 	and.w	r4, r4, #7
   10b44:	fa42 f404 	asr.w	r4, r2, r4
   10b48:	f014 0f01 	tst.w	r4, #1
   10b4c:	d107      	bne.n	10b5e <chan_sel_1+0x4e>
		chan_index = chan_next % chan_count;
   10b4e:	fbb0 f1f6 	udiv	r1, r0, r6
   10b52:	fb06 0111 	mls	r1, r6, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   10b56:	b2c9      	uxtb	r1, r1
   10b58:	4618      	mov	r0, r3
   10b5a:	f7ff ffb9 	bl	10ad0 <chan_sel_remap>
}
   10b5e:	bd70      	pop	{r4, r5, r6, pc}
   10b60:	dd67c8a7 	.word	0xdd67c8a7

00010b64 <chan_rev_8>:
	o = 0;
   10b64:	2300      	movs	r3, #0
	for (iterate = 0; iterate < 8; iterate++) {
   10b66:	461a      	mov	r2, r3
   10b68:	e007      	b.n	10b7a <chan_rev_8+0x16>
		o <<= 1;
   10b6a:	005b      	lsls	r3, r3, #1
   10b6c:	b2db      	uxtb	r3, r3
		o |= (i & 1);
   10b6e:	f000 0101 	and.w	r1, r0, #1
   10b72:	430b      	orrs	r3, r1
		i >>= 1;
   10b74:	0840      	lsrs	r0, r0, #1
	for (iterate = 0; iterate < 8; iterate++) {
   10b76:	3201      	adds	r2, #1
   10b78:	b2d2      	uxtb	r2, r2
   10b7a:	2a07      	cmp	r2, #7
   10b7c:	d9f5      	bls.n	10b6a <chan_rev_8+0x6>
}
   10b7e:	4618      	mov	r0, r3
   10b80:	4770      	bx	lr

00010b82 <chan_perm>:
{
   10b82:	b538      	push	{r3, r4, r5, lr}
   10b84:	4604      	mov	r4, r0
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   10b86:	0a00      	lsrs	r0, r0, #8
   10b88:	f7ff ffec 	bl	10b64 <chan_rev_8>
   10b8c:	0205      	lsls	r5, r0, #8
   10b8e:	b2e0      	uxtb	r0, r4
   10b90:	f7ff ffe8 	bl	10b64 <chan_rev_8>
   10b94:	b200      	sxth	r0, r0
   10b96:	4328      	orrs	r0, r5
}
   10b98:	b280      	uxth	r0, r0
   10b9a:	bd38      	pop	{r3, r4, r5, pc}

00010b9c <chan_mam>:
	return ((u32_t)a * 17 + b) & 0xFFFF;
   10b9c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   10ba0:	fa11 f080 	uxtah	r0, r1, r0
}
   10ba4:	b280      	uxth	r0, r0
   10ba6:	4770      	bx	lr

00010ba8 <chan_prn>:
{
   10ba8:	b538      	push	{r3, r4, r5, lr}
   10baa:	460d      	mov	r5, r1
	prn_e = counter ^ chan_id;
   10bac:	4048      	eors	r0, r1
	for (iterate = 0; iterate < 3; iterate++) {
   10bae:	2400      	movs	r4, #0
   10bb0:	e006      	b.n	10bc0 <chan_prn+0x18>
		prn_e = chan_perm(prn_e);
   10bb2:	f7ff ffe6 	bl	10b82 <chan_perm>
		prn_e = chan_mam(prn_e, chan_id);
   10bb6:	4629      	mov	r1, r5
   10bb8:	f7ff fff0 	bl	10b9c <chan_mam>
	for (iterate = 0; iterate < 3; iterate++) {
   10bbc:	3401      	adds	r4, #1
   10bbe:	b2e4      	uxtb	r4, r4
   10bc0:	2c02      	cmp	r4, #2
   10bc2:	d9f6      	bls.n	10bb2 <chan_prn+0xa>
	prn_e ^= chan_id;
   10bc4:	4068      	eors	r0, r5
}
   10bc6:	b280      	uxth	r0, r0
   10bc8:	bd38      	pop	{r3, r4, r5, pc}
	...

00010bcc <chan_sel_2>:
{
   10bcc:	b538      	push	{r3, r4, r5, lr}
   10bce:	4615      	mov	r5, r2
   10bd0:	461c      	mov	r4, r3
	prn_e = chan_prn(counter, chan_id);
   10bd2:	f7ff ffe9 	bl	10ba8 <chan_prn>
   10bd6:	4601      	mov	r1, r0
	chan_next = prn_e % 37;
   10bd8:	4a0e      	ldr	r2, [pc, #56]	; (10c14 <chan_sel_2+0x48>)
   10bda:	fba2 3200 	umull	r3, r2, r2, r0
   10bde:	1a80      	subs	r0, r0, r2
   10be0:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   10be4:	0952      	lsrs	r2, r2, #5
   10be6:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   10bea:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   10bee:	1a8a      	subs	r2, r1, r2
   10bf0:	b2d0      	uxtb	r0, r2
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10bf2:	08c3      	lsrs	r3, r0, #3
   10bf4:	5ceb      	ldrb	r3, [r5, r3]
   10bf6:	f000 0207 	and.w	r2, r0, #7
   10bfa:	4113      	asrs	r3, r2
   10bfc:	f013 0f01 	tst.w	r3, #1
   10c00:	d106      	bne.n	10c10 <chan_sel_2+0x44>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
   10c02:	fb04 f101 	mul.w	r1, r4, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
   10c06:	f3c1 4107 	ubfx	r1, r1, #16, #8
   10c0a:	4628      	mov	r0, r5
   10c0c:	f7ff ff60 	bl	10ad0 <chan_sel_remap>
}
   10c10:	bd38      	pop	{r3, r4, r5, pc}
   10c12:	bf00      	nop
   10c14:	bacf914d 	.word	0xbacf914d

00010c18 <ctrl_tx_last_enqueue>:
}

static void ctrl_tx_last_enqueue(struct connection *conn,
				 struct radio_pdu_node_tx *node_tx)
{
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   10c18:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   10c1c:	681b      	ldr	r3, [r3, #0]
   10c1e:	600b      	str	r3, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   10c20:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   10c24:	6019      	str	r1, [r3, #0]
	conn->pkt_tx_ctrl_last = node_tx;
   10c26:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   10c2a:	4770      	bx	lr

00010c2c <ctrl_tx_enqueue>:
}

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
   10c2c:	b538      	push	{r3, r4, r5, lr}
   10c2e:	4604      	mov	r4, r0
   10c30:	460d      	mov	r5, r1
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    !conn->empty &&
   10c32:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
	if (
   10c36:	f013 0f80 	tst.w	r3, #128	; 0x80
   10c3a:	d11f      	bne.n	10c7c <ctrl_tx_enqueue+0x50>
	    /* and data/ctrl packet is in the head */
	    conn->pkt_tx_head &&
   10c3c:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
	    !conn->empty &&
   10c40:	b1e2      	cbz	r2, 10c7c <ctrl_tx_enqueue+0x50>
	    conn->pkt_tx_head &&
   10c42:	f013 0f08 	tst.w	r3, #8
   10c46:	d119      	bne.n	10c7c <ctrl_tx_enqueue+0x50>

		/* if data transmited once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   10c48:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   10c4c:	429a      	cmp	r2, r3
   10c4e:	d007      	beq.n	10c60 <ctrl_tx_enqueue+0x34>
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->pkt_tx_ctrl) {
   10c50:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   10c54:	b143      	cbz	r3, 10c68 <ctrl_tx_enqueue+0x3c>
			node_tx->next = conn->pkt_tx_head->next;
			conn->pkt_tx_head->next = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   10c56:	4629      	mov	r1, r5
   10c58:	4620      	mov	r0, r4
   10c5a:	f7ff ffdd 	bl	10c18 <ctrl_tx_last_enqueue>
   10c5e:	e014      	b.n	10c8a <ctrl_tx_enqueue+0x5e>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   10c60:	681b      	ldr	r3, [r3, #0]
   10c62:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
   10c66:	e7f3      	b.n	10c50 <ctrl_tx_enqueue+0x24>
			node_tx->next = conn->pkt_tx_head->next;
   10c68:	6813      	ldr	r3, [r2, #0]
   10c6a:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head->next = node_tx;
   10c6c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   10c70:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   10c72:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   10c76:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   10c7a:	e006      	b.n	10c8a <ctrl_tx_enqueue+0x5e>
		/* No packet needing ACK. */

		/* If first ctrl packet then add it as head else add it to the
		 * tail of the ctrl packets.
		 */
		if (!conn->pkt_tx_ctrl) {
   10c7c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   10c80:	b133      	cbz	r3, 10c90 <ctrl_tx_enqueue+0x64>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   10c82:	4629      	mov	r1, r5
   10c84:	4620      	mov	r0, r4
   10c86:	f7ff ffc7 	bl	10c18 <ctrl_tx_last_enqueue>
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (node_tx->next == 0) {
   10c8a:	682b      	ldr	r3, [r5, #0]
   10c8c:	b153      	cbz	r3, 10ca4 <ctrl_tx_enqueue+0x78>
   10c8e:	bd38      	pop	{r3, r4, r5, pc}
			node_tx->next = conn->pkt_tx_head;
   10c90:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   10c94:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head = node_tx;
   10c96:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
			conn->pkt_tx_ctrl = node_tx;
   10c9a:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   10c9e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   10ca2:	e7f2      	b.n	10c8a <ctrl_tx_enqueue+0x5e>
		conn->pkt_tx_last = node_tx;
   10ca4:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
	}
}
   10ca8:	e7f1      	b.n	10c8e <ctrl_tx_enqueue+0x62>

00010caa <ctrl_tx_sec_enqueue>:

static void ctrl_tx_sec_enqueue(struct connection *conn,
				  struct radio_pdu_node_tx *node_tx)
{
   10caa:	b508      	push	{r3, lr}
	if (conn->pause_tx) {
   10cac:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   10cb0:	f013 0f08 	tst.w	r3, #8
   10cb4:	d010      	beq.n	10cd8 <ctrl_tx_sec_enqueue+0x2e>
		if (!conn->pkt_tx_ctrl) {
   10cb6:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   10cba:	b13b      	cbz	r3, 10ccc <ctrl_tx_sec_enqueue+0x22>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
		} else {
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   10cbc:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   10cc0:	681b      	ldr	r3, [r3, #0]
   10cc2:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   10cc4:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   10cc8:	6019      	str	r1, [r3, #0]
   10cca:	bd08      	pop	{r3, pc}
			node_tx->next = conn->pkt_tx_head;
   10ccc:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   10cd0:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   10cd2:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
   10cd6:	bd08      	pop	{r3, pc}
		}
	} else {
		ctrl_tx_enqueue(conn, node_tx);
   10cd8:	f7ff ffa8 	bl	10c2c <ctrl_tx_enqueue>
   10cdc:	bd08      	pop	{r3, pc}
	...

00010ce0 <conn_update_req>:
}

#if defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
	if (conn->llcp_req != conn->llcp_ack) {
   10ce0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   10ce4:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   10ce8:	428b      	cmp	r3, r1
   10cea:	d001      	beq.n	10cf0 <conn_update_req+0x10>
		return 1;
   10cec:	2001      	movs	r0, #1
   10cee:	4770      	bx	lr
{
   10cf0:	b530      	push	{r4, r5, lr}
	}

	if (!conn->role) {
   10cf2:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10cf6:	2b00      	cmp	r3, #0
   10cf8:	db2a      	blt.n	10d50 <conn_update_req+0x70>
		conn->llcp.conn_upd.win_size = 1;
   10cfa:	2401      	movs	r4, #1
   10cfc:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   10d00:	2200      	movs	r2, #0
   10d02:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->conn_interval;
   10d06:	8c85      	ldrh	r5, [r0, #36]	; 0x24
   10d08:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->latency;
   10d0c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   10d0e:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
   10d12:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   10d14:	fb03 f305 	mul.w	r3, r3, r5
					      conn->supervision_reload *
   10d18:	ebc3 1543 	rsb	r5, r3, r3, lsl #5
   10d1c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
					      125 / 1000;
   10d20:	4d26      	ldr	r5, [pc, #152]	; (10dbc <conn_update_req+0xdc>)
   10d22:	fb85 e503 	smull	lr, r5, r5, r3
   10d26:	17db      	asrs	r3, r3, #31
   10d28:	ebc3 13a5 	rsb	r3, r3, r5, asr #6
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   10d2c:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   10d30:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   10d34:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
   10d38:	b2db      	uxtb	r3, r3
   10d3a:	f043 0304 	orr.w	r3, r3, #4
   10d3e:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78

		conn->llcp_type = LLCP_CONN_UPD;
   10d42:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_ack--;
   10d46:	3901      	subs	r1, #1
   10d48:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75

		return 0;
   10d4c:	4610      	mov	r0, r2
   10d4e:	bd30      	pop	{r4, r5, pc}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	} else if (conn->common.fex_valid &&
   10d50:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   10d54:	f013 0f20 	tst.w	r3, #32
   10d58:	d101      	bne.n	10d5e <conn_update_req+0x7e>
		return 0;
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
   10d5a:	2002      	movs	r0, #2
   10d5c:	bd30      	pop	{r4, r5, pc}
		   (conn->llcp_features &
   10d5e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
	} else if (conn->common.fex_valid &&
   10d62:	f013 0f02 	tst.w	r3, #2
   10d66:	d101      	bne.n	10d6c <conn_update_req+0x8c>
	return 2;
   10d68:	2002      	movs	r0, #2
}
   10d6a:	bd30      	pop	{r4, r5, pc}
		conn->llcp_conn_param.status = 0;
   10d6c:	2300      	movs	r3, #0
   10d6e:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.interval = conn->conn_interval;
   10d72:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   10d74:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
		conn->llcp_conn_param.latency = conn->latency;
   10d78:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
   10d7a:	f8a0 20c6 	strh.w	r2, [r0, #198]	; 0xc6
						conn->supervision_reload *
   10d7e:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
		conn->llcp_conn_param.timeout = conn->conn_interval *
   10d80:	fb02 f201 	mul.w	r2, r2, r1
						conn->supervision_reload *
   10d84:	ebc2 1142 	rsb	r1, r2, r2, lsl #5
   10d88:	eb02 0281 	add.w	r2, r2, r1, lsl #2
						125 / 1000;
   10d8c:	490b      	ldr	r1, [pc, #44]	; (10dbc <conn_update_req+0xdc>)
   10d8e:	fb81 4102 	smull	r4, r1, r1, r2
   10d92:	17d2      	asrs	r2, r2, #31
   10d94:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
		conn->llcp_conn_param.timeout = conn->conn_interval *
   10d98:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   10d9c:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.cmd = 0;
   10da0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
   10da4:	f363 02c3 	bfi	r2, r3, #3, #1
   10da8:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
   10dac:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   10db0:	3a01      	subs	r2, #1
   10db2:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
		return 0;
   10db6:	4618      	mov	r0, r3
   10db8:	bd30      	pop	{r4, r5, pc}
   10dba:	bf00      	nop
   10dbc:	10624dd3 	.word	0x10624dd3

00010dc0 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
   10dc0:	4a0d      	ldr	r2, [pc, #52]	; (10df8 <rx_fc_lock+0x38>)
   10dc2:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   10dc6:	b2db      	uxtb	r3, r3
   10dc8:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   10dcc:	4293      	cmp	r3, r2
   10dce:	d000      	beq.n	10dd2 <rx_fc_lock+0x12>
   10dd0:	4770      	bx	lr
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
   10dd2:	4a09      	ldr	r2, [pc, #36]	; (10df8 <rx_fc_lock+0x38>)
   10dd4:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   10dd8:	33b8      	adds	r3, #184	; 0xb8
   10dda:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   10dde:	80d8      	strh	r0, [r3, #6]
		req = _radio.fc_req + 1;
   10de0:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   10de4:	3301      	adds	r3, #1
   10de6:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
   10de8:	2b03      	cmp	r3, #3
   10dea:	d003      	beq.n	10df4 <rx_fc_lock+0x34>
			req = 0;
		}
		_radio.fc_req = req;
   10dec:	4a02      	ldr	r2, [pc, #8]	; (10df8 <rx_fc_lock+0x38>)
   10dee:	f882 317c 	strb.w	r3, [r2, #380]	; 0x17c
	}
}
   10df2:	e7ed      	b.n	10dd0 <rx_fc_lock+0x10>
			req = 0;
   10df4:	2300      	movs	r3, #0
   10df6:	e7f9      	b.n	10dec <rx_fc_lock+0x2c>
   10df8:	20000dec 	.word	0x20000dec

00010dfc <ticker_success_assert>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   10dfc:	b900      	cbnz	r0, 10e00 <ticker_success_assert+0x4>
   10dfe:	4770      	bx	lr
   10e00:	4040      	eors	r0, r0
   10e02:	f380 8811 	msr	BASEPRI, r0
   10e06:	f04f 0004 	mov.w	r0, #4
   10e0a:	df02      	svc	2

00010e0c <start_enc_rsp_send>:
{
   10e0c:	b510      	push	{r4, lr}
   10e0e:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   10e10:	b171      	cbz	r1, 10e30 <start_enc_rsp_send+0x24>
   10e12:	460b      	mov	r3, r1
	struct radio_pdu_node_tx *node_tx = NULL;
   10e14:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10e16:	781a      	ldrb	r2, [r3, #0]
   10e18:	f042 0203 	orr.w	r2, r2, #3
   10e1c:	701a      	strb	r2, [r3, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   10e1e:	2201      	movs	r2, #1
   10e20:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   10e22:	2206      	movs	r2, #6
   10e24:	70da      	strb	r2, [r3, #3]
	if (node_tx) {
   10e26:	b111      	cbz	r1, 10e2e <start_enc_rsp_send+0x22>
		ctrl_tx_enqueue(conn, node_tx);
   10e28:	4620      	mov	r0, r4
   10e2a:	f7ff feff 	bl	10c2c <ctrl_tx_enqueue>
   10e2e:	bd10      	pop	{r4, pc}
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10e30:	4806      	ldr	r0, [pc, #24]	; (10e4c <start_enc_rsp_send+0x40>)
   10e32:	f7fd fc6a 	bl	e70a <mem_acquire>
		LL_ASSERT(node_tx);
   10e36:	4601      	mov	r1, r0
   10e38:	b108      	cbz	r0, 10e3e <start_enc_rsp_send+0x32>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   10e3a:	1d03      	adds	r3, r0, #4
   10e3c:	e7eb      	b.n	10e16 <start_enc_rsp_send+0xa>
		LL_ASSERT(node_tx);
   10e3e:	4040      	eors	r0, r0
   10e40:	f380 8811 	msr	BASEPRI, r0
   10e44:	f04f 0004 	mov.w	r0, #4
   10e48:	df02      	svc	2
   10e4a:	bf00      	nop
   10e4c:	20000f44 	.word	0x20000f44

00010e50 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   10e50:	2801      	cmp	r0, #1
   10e52:	d005      	beq.n	10e60 <ticker_stop_adv_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   10e54:	4b0d      	ldr	r3, [pc, #52]	; (10e8c <ticker_stop_adv_assert+0x3c>)
   10e56:	7b1b      	ldrb	r3, [r3, #12]
   10e58:	b2db      	uxtb	r3, r3
   10e5a:	2b05      	cmp	r3, #5
   10e5c:	d00f      	beq.n	10e7e <ticker_stop_adv_assert+0x2e>
   10e5e:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
   10e60:	4b0a      	ldr	r3, [pc, #40]	; (10e8c <ticker_stop_adv_assert+0x3c>)
   10e62:	7b9b      	ldrb	r3, [r3, #14]
   10e64:	b2db      	uxtb	r3, r3
   10e66:	2b05      	cmp	r3, #5
   10e68:	d103      	bne.n	10e72 <ticker_stop_adv_assert+0x22>
			_radio.ticker_id_stop = 0;
   10e6a:	2200      	movs	r2, #0
   10e6c:	4b07      	ldr	r3, [pc, #28]	; (10e8c <ticker_stop_adv_assert+0x3c>)
   10e6e:	739a      	strb	r2, [r3, #14]
   10e70:	4770      	bx	lr
			LL_ASSERT(0);
   10e72:	4040      	eors	r0, r0
   10e74:	f380 8811 	msr	BASEPRI, r0
   10e78:	f04f 0004 	mov.w	r0, #4
   10e7c:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   10e7e:	4040      	eors	r0, r0
   10e80:	f380 8811 	msr	BASEPRI, r0
   10e84:	f04f 0004 	mov.w	r0, #4
   10e88:	df02      	svc	2
   10e8a:	bf00      	nop
   10e8c:	20000dec 	.word	0x20000dec

00010e90 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   10e90:	2801      	cmp	r0, #1
   10e92:	d005      	beq.n	10ea0 <ticker_stop_scan_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   10e94:	4b0d      	ldr	r3, [pc, #52]	; (10ecc <ticker_stop_scan_assert+0x3c>)
   10e96:	7b1b      	ldrb	r3, [r3, #12]
   10e98:	b2db      	uxtb	r3, r3
   10e9a:	2b06      	cmp	r3, #6
   10e9c:	d00f      	beq.n	10ebe <ticker_stop_scan_assert+0x2e>
   10e9e:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
   10ea0:	4b0a      	ldr	r3, [pc, #40]	; (10ecc <ticker_stop_scan_assert+0x3c>)
   10ea2:	7b9b      	ldrb	r3, [r3, #14]
   10ea4:	b2db      	uxtb	r3, r3
   10ea6:	2b06      	cmp	r3, #6
   10ea8:	d103      	bne.n	10eb2 <ticker_stop_scan_assert+0x22>
			_radio.ticker_id_stop = 0;
   10eaa:	2200      	movs	r2, #0
   10eac:	4b07      	ldr	r3, [pc, #28]	; (10ecc <ticker_stop_scan_assert+0x3c>)
   10eae:	739a      	strb	r2, [r3, #14]
   10eb0:	4770      	bx	lr
			LL_ASSERT(0);
   10eb2:	4040      	eors	r0, r0
   10eb4:	f380 8811 	msr	BASEPRI, r0
   10eb8:	f04f 0004 	mov.w	r0, #4
   10ebc:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   10ebe:	4040      	eors	r0, r0
   10ec0:	f380 8811 	msr	BASEPRI, r0
   10ec4:	f04f 0004 	mov.w	r0, #4
   10ec8:	df02      	svc	2
   10eca:	bf00      	nop
   10ecc:	20000dec 	.word	0x20000dec

00010ed0 <conn_update>:
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   10ed0:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
   10ed4:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   10ed6:	1a9b      	subs	r3, r3, r2
   10ed8:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   10eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10ede:	da5b      	bge.n	10f98 <conn_update+0xc8>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   10ee0:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10ee4:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10ee8:	429a      	cmp	r2, r3
   10eea:	d13d      	bne.n	10f68 <conn_update+0x98>
	if (_radio.conn_upd == 0) {
   10eec:	4b2c      	ldr	r3, [pc, #176]	; (10fa0 <conn_update+0xd0>)
   10eee:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   10ef2:	2b00      	cmp	r3, #0
   10ef4:	d03e      	beq.n	10f74 <conn_update+0xa4>
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
   10ef6:	790b      	ldrb	r3, [r1, #4]
	conn->llcp.conn_upd.win_size =
   10ef8:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
   10efc:	f8b1 2005 	ldrh.w	r2, [r1, #5]
   10f00:	f240 43e2 	movw	r3, #1250	; 0x4e2
   10f04:	fb03 f302 	mul.w	r3, r3, r2
	conn->llcp.conn_upd.win_offset_us =
   10f08:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
   10f0c:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	conn->llcp.conn_upd.interval =
   10f10:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
   10f14:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	conn->llcp.conn_upd.latency =
   10f18:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
   10f1c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
	conn->llcp.conn_upd.timeout =
   10f20:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
   10f24:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	conn->llcp.conn_upd.instant =
   10f28:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   10f2c:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
   10f30:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   10f34:	f36f 0382 	bfc	r3, #2, #1
   10f38:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
   10f3c:	2301      	movs	r3, #1
   10f3e:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
	conn->llcp_ack--;
   10f42:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10f46:	3b01      	subs	r3, #1
   10f48:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   10f4c:	f890 20c0 	ldrb.w	r2, [r0, #192]	; 0xc0
   10f50:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   10f54:	429a      	cmp	r2, r3
   10f56:	d021      	beq.n	10f9c <conn_update+0xcc>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   10f58:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   10f5c:	f003 0307 	and.w	r3, r3, #7
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   10f60:	2b04      	cmp	r3, #4
   10f62:	d015      	beq.n	10f90 <conn_update+0xc0>
	return 0;
   10f64:	2000      	movs	r0, #0
}
   10f66:	4770      	bx	lr
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   10f68:	4040      	eors	r0, r0
   10f6a:	f380 8811 	msr	BASEPRI, r0
   10f6e:	f04f 0004 	mov.w	r0, #4
   10f72:	df02      	svc	2
		LL_ASSERT(conn->role);
   10f74:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10f78:	2b00      	cmp	r3, #0
   10f7a:	da03      	bge.n	10f84 <conn_update+0xb4>
		_radio.conn_upd = conn;
   10f7c:	4b08      	ldr	r3, [pc, #32]	; (10fa0 <conn_update+0xd0>)
   10f7e:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
   10f82:	e7b8      	b.n	10ef6 <conn_update+0x26>
		LL_ASSERT(conn->role);
   10f84:	4040      	eors	r0, r0
   10f86:	f380 8811 	msr	BASEPRI, r0
   10f8a:	f04f 0004 	mov.w	r0, #4
   10f8e:	df02      	svc	2
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   10f90:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
	return 0;
   10f94:	2000      	movs	r0, #0
   10f96:	4770      	bx	lr
		return 1;
   10f98:	2001      	movs	r0, #1
   10f9a:	4770      	bx	lr
	return 0;
   10f9c:	2000      	movs	r0, #0
   10f9e:	4770      	bx	lr
   10fa0:	20000dec 	.word	0x20000dec

00010fa4 <pause_enc_rsp_send>:
{
   10fa4:	b510      	push	{r4, lr}
   10fa6:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10fa8:	480b      	ldr	r0, [pc, #44]	; (10fd8 <pause_enc_rsp_send+0x34>)
   10faa:	f7fd fbae 	bl	e70a <mem_acquire>
	LL_ASSERT(node_tx);
   10fae:	b160      	cbz	r0, 10fca <pause_enc_rsp_send+0x26>
   10fb0:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10fb2:	7903      	ldrb	r3, [r0, #4]
   10fb4:	f043 0303 	orr.w	r3, r3, #3
   10fb8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   10fba:	2301      	movs	r3, #1
   10fbc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   10fbe:	230b      	movs	r3, #11
   10fc0:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   10fc2:	4620      	mov	r0, r4
   10fc4:	f7ff fe32 	bl	10c2c <ctrl_tx_enqueue>
   10fc8:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   10fca:	4040      	eors	r0, r0
   10fcc:	f380 8811 	msr	BASEPRI, r0
   10fd0:	f04f 0004 	mov.w	r0, #4
   10fd4:	df02      	svc	2
   10fd6:	bf00      	nop
   10fd8:	20000f44 	.word	0x20000f44

00010fdc <ping_resp_send>:
{
   10fdc:	b510      	push	{r4, lr}
   10fde:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10fe0:	480b      	ldr	r0, [pc, #44]	; (11010 <ping_resp_send+0x34>)
   10fe2:	f7fd fb92 	bl	e70a <mem_acquire>
	LL_ASSERT(node_tx);
   10fe6:	b160      	cbz	r0, 11002 <ping_resp_send+0x26>
   10fe8:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10fea:	7903      	ldrb	r3, [r0, #4]
   10fec:	f043 0303 	orr.w	r3, r3, #3
   10ff0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   10ff2:	2301      	movs	r3, #1
   10ff4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   10ff6:	2313      	movs	r3, #19
   10ff8:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   10ffa:	4620      	mov	r0, r4
   10ffc:	f7ff fe16 	bl	10c2c <ctrl_tx_enqueue>
   11000:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11002:	4040      	eors	r0, r0
   11004:	f380 8811 	msr	BASEPRI, r0
   11008:	f04f 0004 	mov.w	r0, #4
   1100c:	df02      	svc	2
   1100e:	bf00      	nop
   11010:	20000f44 	.word	0x20000f44

00011014 <length_resp_send>:
{
   11014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11016:	4604      	mov	r4, r0
   11018:	460f      	mov	r7, r1
   1101a:	4615      	mov	r5, r2
   1101c:	461e      	mov	r6, r3
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1101e:	480e      	ldr	r0, [pc, #56]	; (11058 <length_resp_send+0x44>)
   11020:	f7fd fb73 	bl	e70a <mem_acquire>
	LL_ASSERT(node_tx);
   11024:	b190      	cbz	r0, 1104c <length_resp_send+0x38>
   11026:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11028:	7903      	ldrb	r3, [r0, #4]
   1102a:	f043 0303 	orr.w	r3, r3, #3
   1102e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11030:	2309      	movs	r3, #9
   11032:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11034:	2315      	movs	r3, #21
   11036:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
   11038:	8107      	strh	r7, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
   1103a:	8186      	strh	r6, [r0, #12]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
   1103c:	8145      	strh	r5, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
   1103e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   11042:	81c3      	strh	r3, [r0, #14]
	ctrl_tx_enqueue(conn, node_tx);
   11044:	4620      	mov	r0, r4
   11046:	f7ff fdf1 	bl	10c2c <ctrl_tx_enqueue>
   1104a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(node_tx);
   1104c:	4040      	eors	r0, r0
   1104e:	f380 8811 	msr	BASEPRI, r0
   11052:	f04f 0004 	mov.w	r0, #4
   11056:	df02      	svc	2
   11058:	20000f44 	.word	0x20000f44

0001105c <reject_ext_ind_send>:
{
   1105c:	b570      	push	{r4, r5, r6, lr}
   1105e:	4604      	mov	r4, r0
   11060:	460e      	mov	r6, r1
   11062:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11064:	480c      	ldr	r0, [pc, #48]	; (11098 <reject_ext_ind_send+0x3c>)
   11066:	f7fd fb50 	bl	e70a <mem_acquire>
	LL_ASSERT(node_tx);
   1106a:	b170      	cbz	r0, 1108a <reject_ext_ind_send+0x2e>
   1106c:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1106e:	7903      	ldrb	r3, [r0, #4]
   11070:	f043 0303 	orr.w	r3, r3, #3
   11074:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11076:	2303      	movs	r3, #3
   11078:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   1107a:	2311      	movs	r3, #17
   1107c:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
   1107e:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
   11080:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   11082:	4620      	mov	r0, r4
   11084:	f7ff fdd2 	bl	10c2c <ctrl_tx_enqueue>
   11088:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(node_tx);
   1108a:	4040      	eors	r0, r0
   1108c:	f380 8811 	msr	BASEPRI, r0
   11090:	f04f 0004 	mov.w	r0, #4
   11094:	df02      	svc	2
   11096:	bf00      	nop
   11098:	20000f44 	.word	0x20000f44

0001109c <phy_rsp_send>:
{
   1109c:	b510      	push	{r4, lr}
   1109e:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   110a0:	4810      	ldr	r0, [pc, #64]	; (110e4 <phy_rsp_send+0x48>)
   110a2:	f7fd fb32 	bl	e70a <mem_acquire>
	LL_ASSERT(node_tx);
   110a6:	b1b0      	cbz	r0, 110d6 <phy_rsp_send+0x3a>
   110a8:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   110aa:	7903      	ldrb	r3, [r0, #4]
   110ac:	f043 0303 	orr.w	r3, r3, #3
   110b0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   110b2:	2303      	movs	r3, #3
   110b4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   110b6:	2317      	movs	r3, #23
   110b8:	71c3      	strb	r3, [r0, #7]
		conn->phy_pref_tx;
   110ba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   110be:	f3c3 0302 	ubfx	r3, r3, #0, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
   110c2:	7203      	strb	r3, [r0, #8]
		conn->phy_pref_rx;
   110c4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   110c8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
   110cc:	7243      	strb	r3, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   110ce:	4620      	mov	r0, r4
   110d0:	f7ff fdac 	bl	10c2c <ctrl_tx_enqueue>
   110d4:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   110d6:	4040      	eors	r0, r0
   110d8:	f380 8811 	msr	BASEPRI, r0
   110dc:	f04f 0004 	mov.w	r0, #4
   110e0:	df02      	svc	2
   110e2:	bf00      	nop
   110e4:	20000f44 	.word	0x20000f44

000110e8 <unknown_rsp_send>:
{
   110e8:	b538      	push	{r3, r4, r5, lr}
   110ea:	4604      	mov	r4, r0
   110ec:	460d      	mov	r5, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   110ee:	480c      	ldr	r0, [pc, #48]	; (11120 <unknown_rsp_send+0x38>)
   110f0:	f7fd fb0b 	bl	e70a <mem_acquire>
	LL_ASSERT(node_tx);
   110f4:	b168      	cbz	r0, 11112 <unknown_rsp_send+0x2a>
   110f6:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   110f8:	7903      	ldrb	r3, [r0, #4]
   110fa:	f043 0303 	orr.w	r3, r3, #3
   110fe:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   11100:	2302      	movs	r3, #2
   11102:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   11104:	2307      	movs	r3, #7
   11106:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;
   11108:	7205      	strb	r5, [r0, #8]
	ctrl_tx_enqueue(conn, node_tx);
   1110a:	4620      	mov	r0, r4
   1110c:	f7ff fd8e 	bl	10c2c <ctrl_tx_enqueue>
   11110:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   11112:	4040      	eors	r0, r0
   11114:	f380 8811 	msr	BASEPRI, r0
   11118:	f04f 0004 	mov.w	r0, #4
   1111c:	df02      	svc	2
   1111e:	bf00      	nop
   11120:	20000f44 	.word	0x20000f44

00011124 <ticker_update_adv_assert>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   11124:	b120      	cbz	r0, 11130 <ticker_update_adv_assert+0xc>
   11126:	4b06      	ldr	r3, [pc, #24]	; (11140 <ticker_update_adv_assert+0x1c>)
   11128:	7b9b      	ldrb	r3, [r3, #14]
   1112a:	b2db      	uxtb	r3, r3
   1112c:	2b05      	cmp	r3, #5
   1112e:	d100      	bne.n	11132 <ticker_update_adv_assert+0xe>
   11130:	4770      	bx	lr
   11132:	4040      	eors	r0, r0
   11134:	f380 8811 	msr	BASEPRI, r0
   11138:	f04f 0004 	mov.w	r0, #4
   1113c:	df02      	svc	2
   1113e:	bf00      	nop
   11140:	20000dec 	.word	0x20000dec

00011144 <ticker_update_slave_assert>:
	u8_t ticker_id = (u32_t)params & 0xFF;
   11144:	b2c9      	uxtb	r1, r1
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   11146:	b120      	cbz	r0, 11152 <ticker_update_slave_assert+0xe>
   11148:	4b05      	ldr	r3, [pc, #20]	; (11160 <ticker_update_slave_assert+0x1c>)
   1114a:	7b9b      	ldrb	r3, [r3, #14]
   1114c:	b2db      	uxtb	r3, r3
   1114e:	4299      	cmp	r1, r3
   11150:	d100      	bne.n	11154 <ticker_update_slave_assert+0x10>
   11152:	4770      	bx	lr
   11154:	4040      	eors	r0, r0
   11156:	f380 8811 	msr	BASEPRI, r0
   1115a:	f04f 0004 	mov.w	r0, #4
   1115e:	df02      	svc	2
   11160:	20000dec 	.word	0x20000dec

00011164 <ticker_op_latency_cancelled>:

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
	struct connection *conn;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   11164:	b930      	cbnz	r0, 11174 <ticker_op_latency_cancelled+0x10>

	conn = (struct connection *)params;
	conn->slave.latency_cancel = 0;
   11166:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   1116a:	f36f 0341 	bfc	r3, #1, #1
   1116e:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
   11172:	4770      	bx	lr
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   11174:	4040      	eors	r0, r0
   11176:	f380 8811 	msr	BASEPRI, r0
   1117a:	f04f 0004 	mov.w	r0, #4
   1117e:	df02      	svc	2

00011180 <packet_rx_allocate>:
{
   11180:	b570      	push	{r4, r5, r6, lr}
	if (max > _radio.link_rx_data_quota) {
   11182:	4b22      	ldr	r3, [pc, #136]	; (1120c <packet_rx_allocate+0x8c>)
   11184:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
   11188:	4283      	cmp	r3, r0
   1118a:	d300      	bcc.n	1118e <packet_rx_allocate+0xe>
   1118c:	4603      	mov	r3, r0
	acquire = _radio.packet_rx_acquire + 1;
   1118e:	4a1f      	ldr	r2, [pc, #124]	; (1120c <packet_rx_allocate+0x8c>)
   11190:	f892 413e 	ldrb.w	r4, [r2, #318]	; 0x13e
   11194:	3401      	adds	r4, #1
   11196:	b2e4      	uxtb	r4, r4
	if (acquire == _radio.packet_rx_count) {
   11198:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   1119c:	4294      	cmp	r4, r2
   1119e:	d10d      	bne.n	111bc <packet_rx_allocate+0x3c>
		acquire = 0;
   111a0:	2400      	movs	r4, #0
   111a2:	e00b      	b.n	111bc <packet_rx_allocate+0x3c>
			mem_release(link, &_radio.link_rx_free);
   111a4:	491a      	ldr	r1, [pc, #104]	; (11210 <packet_rx_allocate+0x90>)
   111a6:	4630      	mov	r0, r6
   111a8:	f7fd facb 	bl	e742 <mem_release>
			break;
   111ac:	bd70      	pop	{r4, r5, r6, pc}
		_radio.link_rx_data_quota--;
   111ae:	4a17      	ldr	r2, [pc, #92]	; (1120c <packet_rx_allocate+0x8c>)
   111b0:	f892 3150 	ldrb.w	r3, [r2, #336]	; 0x150
   111b4:	3b01      	subs	r3, #1
   111b6:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
	while ((max--) && (acquire != _radio.packet_rx_last)) {
   111ba:	462b      	mov	r3, r5
   111bc:	1e5d      	subs	r5, r3, #1
   111be:	b2ed      	uxtb	r5, r5
   111c0:	b313      	cbz	r3, 11208 <packet_rx_allocate+0x88>
   111c2:	4b12      	ldr	r3, [pc, #72]	; (1120c <packet_rx_allocate+0x8c>)
   111c4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   111c8:	b2db      	uxtb	r3, r3
   111ca:	429c      	cmp	r4, r3
   111cc:	d01c      	beq.n	11208 <packet_rx_allocate+0x88>
		link = mem_acquire(&_radio.link_rx_free);
   111ce:	4810      	ldr	r0, [pc, #64]	; (11210 <packet_rx_allocate+0x90>)
   111d0:	f7fd fa9b 	bl	e70a <mem_acquire>
		if (!link) {
   111d4:	4606      	mov	r6, r0
   111d6:	b1b8      	cbz	r0, 11208 <packet_rx_allocate+0x88>
		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   111d8:	480e      	ldr	r0, [pc, #56]	; (11214 <packet_rx_allocate+0x94>)
   111da:	f7fd fa96 	bl	e70a <mem_acquire>
		if (!radio_pdu_node_rx) {
   111de:	4602      	mov	r2, r0
   111e0:	2800      	cmp	r0, #0
   111e2:	d0df      	beq.n	111a4 <packet_rx_allocate+0x24>
		radio_pdu_node_rx->hdr.onion.link = link;
   111e4:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
   111e6:	4b09      	ldr	r3, [pc, #36]	; (1120c <packet_rx_allocate+0x8c>)
   111e8:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   111ec:	f893 013e 	ldrb.w	r0, [r3, #318]	; 0x13e
   111f0:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		_radio.packet_rx_acquire = acquire;
   111f4:	f883 413e 	strb.w	r4, [r3, #318]	; 0x13e
		acquire = _radio.packet_rx_acquire + 1;
   111f8:	3401      	adds	r4, #1
   111fa:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
   111fc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
   11200:	429c      	cmp	r4, r3
   11202:	d1d4      	bne.n	111ae <packet_rx_allocate+0x2e>
			acquire = 0;
   11204:	2400      	movs	r4, #0
   11206:	e7d2      	b.n	111ae <packet_rx_allocate+0x2e>
   11208:	bd70      	pop	{r4, r5, r6, pc}
   1120a:	bf00      	nop
   1120c:	20000dec 	.word	0x20000dec
   11210:	20000f30 	.word	0x20000f30
   11214:	20000f18 	.word	0x20000f18

00011218 <tx_cmplt_get>:
{
   11218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_first = *first;
   1121c:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
   1121e:	4294      	cmp	r4, r2
   11220:	d043      	beq.n	112aa <tx_cmplt_get+0x92>
   11222:	4690      	mov	r8, r2
   11224:	4689      	mov	r9, r1
   11226:	4607      	mov	r7, r0
	*handle = _radio.pkt_release[_first].handle;
   11228:	4b21      	ldr	r3, [pc, #132]	; (112b0 <tx_cmplt_get+0x98>)
   1122a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   1122e:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   11232:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
   11234:	2600      	movs	r6, #0
   11236:	e00f      	b.n	11258 <tx_cmplt_get+0x40>
			_radio.pkt_release[_first].node_tx =
   11238:	2301      	movs	r3, #1
   1123a:	606b      	str	r3, [r5, #4]
			cmplt++;
   1123c:	441e      	add	r6, r3
   1123e:	b2f6      	uxtb	r6, r6
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
   11240:	f030 0303 	bics.w	r3, r0, #3
   11244:	d126      	bne.n	11294 <tx_cmplt_get+0x7c>
		_first = _first + 1;
   11246:	3401      	adds	r4, #1
   11248:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
   1124a:	4b19      	ldr	r3, [pc, #100]	; (112b0 <tx_cmplt_get+0x98>)
   1124c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   11250:	429c      	cmp	r4, r3
   11252:	d023      	beq.n	1129c <tx_cmplt_get+0x84>
	} while (_first != last);
   11254:	4544      	cmp	r4, r8
   11256:	d023      	beq.n	112a0 <tx_cmplt_get+0x88>
		if (*handle != _radio.pkt_release[_first].handle) {
   11258:	883a      	ldrh	r2, [r7, #0]
   1125a:	4b15      	ldr	r3, [pc, #84]	; (112b0 <tx_cmplt_get+0x98>)
   1125c:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   11260:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   11264:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   11268:	429a      	cmp	r2, r3
   1126a:	d119      	bne.n	112a0 <tx_cmplt_get+0x88>
		node_tx = _radio.pkt_release[_first].node_tx;
   1126c:	6868      	ldr	r0, [r5, #4]
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
   1126e:	1d03      	adds	r3, r0, #4
		if ((!node_tx) || (node_tx == (struct radio_pdu_node_tx *)1) ||
   11270:	2801      	cmp	r0, #1
   11272:	d9e1      	bls.n	11238 <tx_cmplt_get+0x20>
   11274:	f030 0203 	bics.w	r2, r0, #3
   11278:	d009      	beq.n	1128e <tx_cmplt_get+0x76>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
   1127a:	b143      	cbz	r3, 1128e <tx_cmplt_get+0x76>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   1127c:	7943      	ldrb	r3, [r0, #5]
   1127e:	b133      	cbz	r3, 1128e <tx_cmplt_get+0x76>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
   11280:	7903      	ldrb	r3, [r0, #4]
   11282:	f003 0303 	and.w	r3, r3, #3
   11286:	3b01      	subs	r3, #1
   11288:	b2db      	uxtb	r3, r3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   1128a:	2b01      	cmp	r3, #1
   1128c:	d9d4      	bls.n	11238 <tx_cmplt_get+0x20>
			_radio.pkt_release[_first].node_tx =
   1128e:	2302      	movs	r3, #2
   11290:	606b      	str	r3, [r5, #4]
   11292:	e7d5      	b.n	11240 <tx_cmplt_get+0x28>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   11294:	4907      	ldr	r1, [pc, #28]	; (112b4 <tx_cmplt_get+0x9c>)
   11296:	f7fd fa54 	bl	e742 <mem_release>
   1129a:	e7d4      	b.n	11246 <tx_cmplt_get+0x2e>
			_first = 0;
   1129c:	2400      	movs	r4, #0
   1129e:	e7d9      	b.n	11254 <tx_cmplt_get+0x3c>
	*first = _first;
   112a0:	f889 4000 	strb.w	r4, [r9]
}
   112a4:	4630      	mov	r0, r6
   112a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
   112aa:	2600      	movs	r6, #0
   112ac:	e7fa      	b.n	112a4 <tx_cmplt_get+0x8c>
   112ae:	bf00      	nop
   112b0:	20000dec 	.word	0x20000dec
   112b4:	20000f4c 	.word	0x20000f4c

000112b8 <ticker_job_disable>:
{
   112b8:	b508      	push	{r3, lr}
	if (_radio.state != STATE_NONE) {
   112ba:	4b05      	ldr	r3, [pc, #20]	; (112d0 <ticker_job_disable+0x18>)
   112bc:	7c1b      	ldrb	r3, [r3, #16]
   112be:	b903      	cbnz	r3, 112c2 <ticker_job_disable+0xa>
   112c0:	bd08      	pop	{r3, pc}
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   112c2:	2200      	movs	r2, #0
   112c4:	2101      	movs	r1, #1
   112c6:	4608      	mov	r0, r1
   112c8:	f7fd f8a0 	bl	e40c <mayfly_enable>
}
   112cc:	e7f8      	b.n	112c0 <ticker_job_disable+0x8>
   112ce:	bf00      	nop
   112d0:	20000dec 	.word	0x20000dec

000112d4 <connection_get>:
	if (handle < _radio.connection_count) {
   112d4:	4b0d      	ldr	r3, [pc, #52]	; (1130c <connection_get+0x38>)
   112d6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   112da:	4283      	cmp	r3, r0
   112dc:	d910      	bls.n	11300 <connection_get+0x2c>
{
   112de:	b510      	push	{r4, lr}
   112e0:	4604      	mov	r4, r0
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
   112e2:	4602      	mov	r2, r0
   112e4:	f44f 71aa 	mov.w	r1, #340	; 0x154
   112e8:	4b08      	ldr	r3, [pc, #32]	; (1130c <connection_get+0x38>)
   112ea:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   112ee:	f7fd fa49 	bl	e784 <mem_get>
		if ((conn) && (conn->handle == handle)) {
   112f2:	4603      	mov	r3, r0
   112f4:	b110      	cbz	r0, 112fc <connection_get+0x28>
   112f6:	8c02      	ldrh	r2, [r0, #32]
   112f8:	4294      	cmp	r4, r2
   112fa:	d104      	bne.n	11306 <connection_get+0x32>
}
   112fc:	4618      	mov	r0, r3
   112fe:	bd10      	pop	{r4, pc}
	return 0;
   11300:	2300      	movs	r3, #0
}
   11302:	4618      	mov	r0, r3
   11304:	4770      	bx	lr
	return 0;
   11306:	2300      	movs	r3, #0
   11308:	e7f8      	b.n	112fc <connection_get+0x28>
   1130a:	bf00      	nop
   1130c:	20000dec 	.word	0x20000dec

00011310 <role_disable>:
{
   11310:	b5f0      	push	{r4, r5, r6, r7, lr}
   11312:	b087      	sub	sp, #28
   11314:	4604      	mov	r4, r0
   11316:	460d      	mov	r5, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11318:	2302      	movs	r3, #2
   1131a:	9305      	str	r3, [sp, #20]
	switch (ticker_id_primary) {
   1131c:	2805      	cmp	r0, #5
   1131e:	d00d      	beq.n	1133c <role_disable+0x2c>
   11320:	2806      	cmp	r0, #6
   11322:	d02a      	beq.n	1137a <role_disable+0x6a>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   11324:	2806      	cmp	r0, #6
   11326:	d957      	bls.n	113d8 <role_disable+0xc8>
			conn_handle = ticker_id_primary -
   11328:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
   1132a:	b280      	uxth	r0, r0
   1132c:	f7ff ffd2 	bl	112d4 <connection_get>
			if (!conn) {
   11330:	2800      	cmp	r0, #0
   11332:	f000 8153 	beq.w	115dc <role_disable+0x2cc>
			ticks_xtal_to_start =
   11336:	6806      	ldr	r6, [r0, #0]
			ticks_active_to_start =
   11338:	6847      	ldr	r7, [r0, #4]
		break;
   1133a:	e023      	b.n	11384 <role_disable+0x74>
		ticks_xtal_to_start =
   1133c:	4b9f      	ldr	r3, [pc, #636]	; (115bc <role_disable+0x2ac>)
   1133e:	695e      	ldr	r6, [r3, #20]
		ticks_active_to_start =
   11340:	699f      	ldr	r7, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11342:	ab05      	add	r3, sp, #20
   11344:	9300      	str	r3, [sp, #0]
   11346:	4b9e      	ldr	r3, [pc, #632]	; (115c0 <role_disable+0x2b0>)
   11348:	460a      	mov	r2, r1
   1134a:	2103      	movs	r1, #3
   1134c:	2000      	movs	r0, #0
   1134e:	f7fe ff47 	bl	101e0 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   11352:	2802      	cmp	r0, #2
   11354:	d00d      	beq.n	11372 <role_disable+0x62>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   11356:	9b05      	ldr	r3, [sp, #20]
   11358:	b1a3      	cbz	r3, 11384 <role_disable+0x74>
   1135a:	9b05      	ldr	r3, [sp, #20]
   1135c:	2b01      	cmp	r3, #1
   1135e:	d011      	beq.n	11384 <role_disable+0x74>
   11360:	4040      	eors	r0, r0
   11362:	f380 8811 	msr	BASEPRI, r0
   11366:	f04f 0004 	mov.w	r0, #4
   1136a:	df02      	svc	2
   1136c:	bf20      	wfe
  __ASM volatile ("sev");
   1136e:	bf40      	sev
  __ASM volatile ("wfe");
   11370:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   11372:	9b05      	ldr	r3, [sp, #20]
   11374:	2b02      	cmp	r3, #2
   11376:	d0f9      	beq.n	1136c <role_disable+0x5c>
   11378:	e7ed      	b.n	11356 <role_disable+0x46>
		ticks_xtal_to_start =
   1137a:	4b90      	ldr	r3, [pc, #576]	; (115bc <role_disable+0x2ac>)
   1137c:	f8d3 60cc 	ldr.w	r6, [r3, #204]	; 0xcc
		ticks_active_to_start =
   11380:	f8d3 70d0 	ldr.w	r7, [r3, #208]	; 0xd0
	LL_ASSERT(!_radio.ticker_id_stop);
   11384:	4b8d      	ldr	r3, [pc, #564]	; (115bc <role_disable+0x2ac>)
   11386:	7b9b      	ldrb	r3, [r3, #14]
   11388:	2b00      	cmp	r3, #0
   1138a:	d12b      	bne.n	113e4 <role_disable+0xd4>
	_radio.ticker_id_stop = ticker_id_primary;
   1138c:	4b8b      	ldr	r3, [pc, #556]	; (115bc <role_disable+0x2ac>)
   1138e:	739c      	strb	r4, [r3, #14]
	ret_cb = TICKER_STATUS_BUSY;
   11390:	ab06      	add	r3, sp, #24
   11392:	2202      	movs	r2, #2
   11394:	f843 2d04 	str.w	r2, [r3, #-4]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11398:	9300      	str	r3, [sp, #0]
   1139a:	4b89      	ldr	r3, [pc, #548]	; (115c0 <role_disable+0x2b0>)
   1139c:	4622      	mov	r2, r4
   1139e:	2103      	movs	r1, #3
   113a0:	2000      	movs	r0, #0
   113a2:	f7fe ff1d 	bl	101e0 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   113a6:	2802      	cmp	r0, #2
   113a8:	d022      	beq.n	113f0 <role_disable+0xe0>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   113aa:	9b05      	ldr	r3, [sp, #20]
   113ac:	b973      	cbnz	r3, 113cc <role_disable+0xbc>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
   113ae:	4b83      	ldr	r3, [pc, #524]	; (115bc <role_disable+0x2ac>)
   113b0:	7b1b      	ldrb	r3, [r3, #12]
   113b2:	b2db      	uxtb	r3, r3
   113b4:	429c      	cmp	r4, r3
   113b6:	d02d      	beq.n	11414 <role_disable+0x104>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
   113b8:	4b80      	ldr	r3, [pc, #512]	; (115bc <role_disable+0x2ac>)
   113ba:	7b5b      	ldrb	r3, [r3, #13]
   113bc:	b2db      	uxtb	r3, r3
   113be:	429c      	cmp	r4, r3
   113c0:	d028      	beq.n	11414 <role_disable+0x104>
	if (!_radio.ticker_id_stop) {
   113c2:	4b7e      	ldr	r3, [pc, #504]	; (115bc <role_disable+0x2ac>)
   113c4:	7b9b      	ldrb	r3, [r3, #14]
   113c6:	b90b      	cbnz	r3, 113cc <role_disable+0xbc>
		ret_cb = TICKER_STATUS_FAILURE;
   113c8:	2301      	movs	r3, #1
   113ca:	9305      	str	r3, [sp, #20]
	_radio.ticker_id_stop = 0;
   113cc:	2200      	movs	r2, #0
   113ce:	4b7b      	ldr	r3, [pc, #492]	; (115bc <role_disable+0x2ac>)
   113d0:	739a      	strb	r2, [r3, #14]
	return ret_cb;
   113d2:	9805      	ldr	r0, [sp, #20]
}
   113d4:	b007      	add	sp, #28
   113d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LL_ASSERT(0);
   113d8:	4040      	eors	r0, r0
   113da:	f380 8811 	msr	BASEPRI, r0
   113de:	f04f 0004 	mov.w	r0, #4
   113e2:	df02      	svc	2
	LL_ASSERT(!_radio.ticker_id_stop);
   113e4:	4040      	eors	r0, r0
   113e6:	f380 8811 	msr	BASEPRI, r0
   113ea:	f04f 0004 	mov.w	r0, #4
   113ee:	df02      	svc	2
		if (_radio.ticker_id_event == ticker_id_primary) {
   113f0:	4b72      	ldr	r3, [pc, #456]	; (115bc <role_disable+0x2ac>)
   113f2:	7b5b      	ldrb	r3, [r3, #13]
   113f4:	b2db      	uxtb	r3, r3
   113f6:	429c      	cmp	r4, r3
   113f8:	d108      	bne.n	1140c <role_disable+0xfc>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   113fa:	2201      	movs	r2, #1
   113fc:	4611      	mov	r1, r2
   113fe:	2003      	movs	r0, #3
   11400:	f7fd f804 	bl	e40c <mayfly_enable>
   11404:	e002      	b.n	1140c <role_disable+0xfc>
   11406:	bf20      	wfe
  __ASM volatile ("sev");
   11408:	bf40      	sev
  __ASM volatile ("wfe");
   1140a:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   1140c:	9b05      	ldr	r3, [sp, #20]
   1140e:	2b02      	cmp	r3, #2
   11410:	d0f9      	beq.n	11406 <role_disable+0xf6>
   11412:	e7ca      	b.n	113aa <role_disable+0x9a>
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11414:	ab06      	add	r3, sp, #24
   11416:	2202      	movs	r2, #2
   11418:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1141c:	9300      	str	r3, [sp, #0]
   1141e:	4b68      	ldr	r3, [pc, #416]	; (115c0 <role_disable+0x2b0>)
   11420:	2200      	movs	r2, #0
   11422:	2103      	movs	r1, #3
   11424:	4610      	mov	r0, r2
   11426:	f7fe fedb 	bl	101e0 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   1142a:	2802      	cmp	r0, #2
   1142c:	d029      	beq.n	11482 <role_disable+0x172>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   1142e:	9b02      	ldr	r3, [sp, #8]
   11430:	2b00      	cmp	r3, #0
   11432:	d17c      	bne.n	1152e <role_disable+0x21e>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11434:	2302      	movs	r3, #2
   11436:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   11438:	4b60      	ldr	r3, [pc, #384]	; (115bc <role_disable+0x2ac>)
   1143a:	7b1b      	ldrb	r3, [r3, #12]
   1143c:	2b00      	cmp	r3, #0
   1143e:	d02e      	beq.n	1149e <role_disable+0x18e>
		_radio.ticker_id_prepare = 0;
   11440:	2000      	movs	r0, #0
   11442:	4b5e      	ldr	r3, [pc, #376]	; (115bc <role_disable+0x2ac>)
   11444:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11446:	ab03      	add	r3, sp, #12
   11448:	9300      	str	r3, [sp, #0]
   1144a:	4b5d      	ldr	r3, [pc, #372]	; (115c0 <role_disable+0x2b0>)
   1144c:	2201      	movs	r2, #1
   1144e:	2103      	movs	r1, #3
   11450:	f7fe fec6 	bl	101e0 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   11454:	2802      	cmp	r0, #2
   11456:	d028      	beq.n	114aa <role_disable+0x19a>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   11458:	9b03      	ldr	r3, [sp, #12]
   1145a:	2b00      	cmp	r3, #0
   1145c:	d142      	bne.n	114e4 <role_disable+0x1d4>
			ticks_xtal_to_start &= ~BIT(31);
   1145e:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
   11462:	42b7      	cmp	r7, r6
   11464:	d92f      	bls.n	114c6 <role_disable+0x1b6>
				retval = mayfly_enqueue(
   11466:	4b57      	ldr	r3, [pc, #348]	; (115c4 <role_disable+0x2b4>)
   11468:	2200      	movs	r2, #0
   1146a:	4611      	mov	r1, r2
   1146c:	2003      	movs	r0, #3
   1146e:	f7fd f80b 	bl	e488 <mayfly_enqueue>
				LL_ASSERT(!retval);
   11472:	2800      	cmp	r0, #0
   11474:	d0a5      	beq.n	113c2 <role_disable+0xb2>
   11476:	4040      	eors	r0, r0
   11478:	f380 8811 	msr	BASEPRI, r0
   1147c:	f04f 0004 	mov.w	r0, #4
   11480:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11482:	2201      	movs	r2, #1
   11484:	4611      	mov	r1, r2
   11486:	2003      	movs	r0, #3
   11488:	f7fc ffc0 	bl	e40c <mayfly_enable>
		LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   1148c:	9b02      	ldr	r3, [sp, #8]
   1148e:	2b02      	cmp	r3, #2
   11490:	d1cd      	bne.n	1142e <role_disable+0x11e>
   11492:	4040      	eors	r0, r0
   11494:	f380 8811 	msr	BASEPRI, r0
   11498:	f04f 0004 	mov.w	r0, #4
   1149c:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare);
   1149e:	4040      	eors	r0, r0
   114a0:	f380 8811 	msr	BASEPRI, r0
   114a4:	f04f 0004 	mov.w	r0, #4
   114a8:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   114aa:	2201      	movs	r2, #1
   114ac:	4611      	mov	r1, r2
   114ae:	2003      	movs	r0, #3
   114b0:	f7fc ffac 	bl	e40c <mayfly_enable>
			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   114b4:	9b03      	ldr	r3, [sp, #12]
   114b6:	2b02      	cmp	r3, #2
   114b8:	d1ce      	bne.n	11458 <role_disable+0x148>
   114ba:	4040      	eors	r0, r0
   114bc:	f380 8811 	msr	BASEPRI, r0
   114c0:	f04f 0004 	mov.w	r0, #4
   114c4:	df02      	svc	2
				retval = mayfly_enqueue(
   114c6:	4b40      	ldr	r3, [pc, #256]	; (115c8 <role_disable+0x2b8>)
   114c8:	2200      	movs	r2, #0
   114ca:	4611      	mov	r1, r2
   114cc:	2003      	movs	r0, #3
   114ce:	f7fc ffdb 	bl	e488 <mayfly_enqueue>
				LL_ASSERT(!retval);
   114d2:	2800      	cmp	r0, #0
   114d4:	f43f af75 	beq.w	113c2 <role_disable+0xb2>
   114d8:	4040      	eors	r0, r0
   114da:	f380 8811 	msr	BASEPRI, r0
   114de:	f04f 0004 	mov.w	r0, #4
   114e2:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   114e4:	9b03      	ldr	r3, [sp, #12]
   114e6:	2b01      	cmp	r3, #1
   114e8:	d11b      	bne.n	11522 <role_disable+0x212>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   114ea:	4b36      	ldr	r3, [pc, #216]	; (115c4 <role_disable+0x2b4>)
   114ec:	2200      	movs	r2, #0
   114ee:	4611      	mov	r1, r2
   114f0:	2003      	movs	r0, #3
   114f2:	f7fc ffc9 	bl	e488 <mayfly_enqueue>
			LL_ASSERT(!retval);
   114f6:	b970      	cbnz	r0, 11516 <role_disable+0x206>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   114f8:	4b33      	ldr	r3, [pc, #204]	; (115c8 <role_disable+0x2b8>)
   114fa:	2200      	movs	r2, #0
   114fc:	4611      	mov	r1, r2
   114fe:	2003      	movs	r0, #3
   11500:	f7fc ffc2 	bl	e488 <mayfly_enqueue>
			LL_ASSERT(!retval);
   11504:	2800      	cmp	r0, #0
   11506:	f43f af5c 	beq.w	113c2 <role_disable+0xb2>
   1150a:	4040      	eors	r0, r0
   1150c:	f380 8811 	msr	BASEPRI, r0
   11510:	f04f 0004 	mov.w	r0, #4
   11514:	df02      	svc	2
			LL_ASSERT(!retval);
   11516:	4040      	eors	r0, r0
   11518:	f380 8811 	msr	BASEPRI, r0
   1151c:	f04f 0004 	mov.w	r0, #4
   11520:	df02      	svc	2
			LL_ASSERT(0);
   11522:	4040      	eors	r0, r0
   11524:	f380 8811 	msr	BASEPRI, r0
   11528:	f04f 0004 	mov.w	r0, #4
   1152c:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   1152e:	9b02      	ldr	r3, [sp, #8]
   11530:	2b01      	cmp	r3, #1
   11532:	d14d      	bne.n	115d0 <role_disable+0x2c0>
		if (ticker_id_stop != TICKER_NULL) {
   11534:	2dff      	cmp	r5, #255	; 0xff
   11536:	d011      	beq.n	1155c <role_disable+0x24c>
			u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11538:	ab06      	add	r3, sp, #24
   1153a:	2202      	movs	r2, #2
   1153c:	f843 2d08 	str.w	r2, [r3, #-8]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11540:	9300      	str	r3, [sp, #0]
   11542:	4b1f      	ldr	r3, [pc, #124]	; (115c0 <role_disable+0x2b0>)
   11544:	462a      	mov	r2, r5
   11546:	2103      	movs	r1, #3
   11548:	2000      	movs	r0, #0
   1154a:	f7fe fe49 	bl	101e0 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
   1154e:	2802      	cmp	r0, #2
   11550:	d018      	beq.n	11584 <role_disable+0x274>
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   11552:	9b04      	ldr	r3, [sp, #16]
   11554:	b113      	cbz	r3, 1155c <role_disable+0x24c>
   11556:	9b04      	ldr	r3, [sp, #16]
   11558:	2b01      	cmp	r3, #1
   1155a:	d121      	bne.n	115a0 <role_disable+0x290>
		if (_radio.role != ROLE_NONE) {
   1155c:	4b17      	ldr	r3, [pc, #92]	; (115bc <role_disable+0x2ac>)
   1155e:	7bdb      	ldrb	r3, [r3, #15]
   11560:	2b00      	cmp	r3, #0
   11562:	f43f af2e 	beq.w	113c2 <role_disable+0xb2>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   11566:	4b19      	ldr	r3, [pc, #100]	; (115cc <role_disable+0x2bc>)
   11568:	2204      	movs	r2, #4
   1156a:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   1156c:	2200      	movs	r2, #0
   1156e:	4611      	mov	r1, r2
   11570:	2003      	movs	r0, #3
   11572:	f7fc ff89 	bl	e488 <mayfly_enqueue>
			LL_ASSERT(!retval);
   11576:	b1e0      	cbz	r0, 115b2 <role_disable+0x2a2>
   11578:	4040      	eors	r0, r0
   1157a:	f380 8811 	msr	BASEPRI, r0
   1157e:	f04f 0004 	mov.w	r0, #4
   11582:	df02      	svc	2
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11584:	2201      	movs	r2, #1
   11586:	4611      	mov	r1, r2
   11588:	2003      	movs	r0, #3
   1158a:	f7fc ff3f 	bl	e40c <mayfly_enable>
				LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   1158e:	9b04      	ldr	r3, [sp, #16]
   11590:	2b02      	cmp	r3, #2
   11592:	d1de      	bne.n	11552 <role_disable+0x242>
   11594:	4040      	eors	r0, r0
   11596:	f380 8811 	msr	BASEPRI, r0
   1159a:	f04f 0004 	mov.w	r0, #4
   1159e:	df02      	svc	2
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   115a0:	4040      	eors	r0, r0
   115a2:	f380 8811 	msr	BASEPRI, r0
   115a6:	f04f 0004 	mov.w	r0, #4
   115aa:	df02      	svc	2
   115ac:	bf20      	wfe
  __ASM volatile ("sev");
   115ae:	bf40      	sev
  __ASM volatile ("wfe");
   115b0:	bf20      	wfe
			while (_radio.role != ROLE_NONE) {
   115b2:	4b02      	ldr	r3, [pc, #8]	; (115bc <role_disable+0x2ac>)
   115b4:	7bdb      	ldrb	r3, [r3, #15]
   115b6:	2b00      	cmp	r3, #0
   115b8:	d1f8      	bne.n	115ac <role_disable+0x29c>
   115ba:	e702      	b.n	113c2 <role_disable+0xb2>
   115bc:	20000dec 	.word	0x20000dec
   115c0:	00010a8d 	.word	0x00010a8d
   115c4:	2000bb50 	.word	0x2000bb50
   115c8:	2000bc10 	.word	0x2000bc10
   115cc:	2000bb80 	.word	0x2000bb80
		LL_ASSERT(0);
   115d0:	4040      	eors	r0, r0
   115d2:	f380 8811 	msr	BASEPRI, r0
   115d6:	f04f 0004 	mov.w	r0, #4
   115da:	df02      	svc	2
				return 1;
   115dc:	2001      	movs	r0, #1
   115de:	e6f9      	b.n	113d4 <role_disable+0xc4>

000115e0 <event_stop>:
{
   115e0:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   115e2:	4a08      	ldr	r2, [pc, #32]	; (11604 <event_stop+0x24>)
   115e4:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   115e6:	4613      	mov	r3, r2
   115e8:	2200      	movs	r2, #0
   115ea:	4611      	mov	r1, r2
   115ec:	4610      	mov	r0, r2
   115ee:	f7fc ff4b 	bl	e488 <mayfly_enqueue>
	LL_ASSERT(!retval);
   115f2:	b900      	cbnz	r0, 115f6 <event_stop+0x16>
   115f4:	bd08      	pop	{r3, pc}
   115f6:	4040      	eors	r0, r0
   115f8:	f380 8811 	msr	BASEPRI, r0
   115fc:	f04f 0004 	mov.w	r0, #4
   11600:	df02      	svc	2
   11602:	bf00      	nop
   11604:	2000bb60 	.word	0x2000bb60

00011608 <event_adv_stop>:
{
   11608:	b500      	push	{lr}
   1160a:	b083      	sub	sp, #12
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   1160c:	2305      	movs	r3, #5
   1160e:	2200      	movs	r2, #0
   11610:	4611      	mov	r1, r2
   11612:	4610      	mov	r0, r2
   11614:	f7ff ffe4 	bl	115e0 <event_stop>
	ticker_status =
   11618:	f241 73e4 	movw	r3, #6116	; 0x17e4
   1161c:	9300      	str	r3, [sp, #0]
   1161e:	4b09      	ldr	r3, [pc, #36]	; (11644 <event_adv_stop+0x3c>)
   11620:	2205      	movs	r2, #5
   11622:	2100      	movs	r1, #0
   11624:	4608      	mov	r0, r1
   11626:	f7fe fddb 	bl	101e0 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1162a:	b108      	cbz	r0, 11630 <event_adv_stop+0x28>
   1162c:	2802      	cmp	r0, #2
   1162e:	d102      	bne.n	11636 <event_adv_stop+0x2e>
}
   11630:	b003      	add	sp, #12
   11632:	f85d fb04 	ldr.w	pc, [sp], #4
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11636:	4040      	eors	r0, r0
   11638:	f380 8811 	msr	BASEPRI, r0
   1163c:	f04f 0004 	mov.w	r0, #4
   11640:	df02      	svc	2
   11642:	bf00      	nop
   11644:	00011ec9 	.word	0x00011ec9

00011648 <event_inactive>:
{
   11648:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1164a:	4b07      	ldr	r3, [pc, #28]	; (11668 <event_inactive+0x20>)
   1164c:	2200      	movs	r2, #0
   1164e:	4611      	mov	r1, r2
   11650:	4610      	mov	r0, r2
   11652:	f7fc ff19 	bl	e488 <mayfly_enqueue>
	LL_ASSERT(!retval);
   11656:	b900      	cbnz	r0, 1165a <event_inactive+0x12>
   11658:	bd08      	pop	{r3, pc}
   1165a:	4040      	eors	r0, r0
   1165c:	f380 8811 	msr	BASEPRI, r0
   11660:	f04f 0004 	mov.w	r0, #4
   11664:	df02      	svc	2
   11666:	bf00      	nop
   11668:	2000bb30 	.word	0x2000bb30

0001166c <mayfly_xtal_retain>:
{
   1166c:	b508      	push	{r3, lr}
	if (retain) {
   1166e:	b1d1      	cbz	r1, 116a6 <mayfly_xtal_retain+0x3a>
		if (!s_xtal_retained) {
   11670:	4b1c      	ldr	r3, [pc, #112]	; (116e4 <mayfly_xtal_retain+0x78>)
   11672:	781b      	ldrb	r3, [r3, #0]
   11674:	b953      	cbnz	r3, 1168c <mayfly_xtal_retain+0x20>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   11676:	2801      	cmp	r0, #1
   11678:	d109      	bne.n	1168e <mayfly_xtal_retain+0x22>
			s_xtal_retained = 1;
   1167a:	2201      	movs	r2, #1
   1167c:	4b19      	ldr	r3, [pc, #100]	; (116e4 <mayfly_xtal_retain+0x78>)
   1167e:	701a      	strb	r2, [r3, #0]
			retval = mayfly_enqueue(caller_id,
   11680:	4b19      	ldr	r3, [pc, #100]	; (116e8 <mayfly_xtal_retain+0x7c>)
   11682:	2200      	movs	r2, #0
   11684:	4611      	mov	r1, r2
   11686:	f7fc feff 	bl	e488 <mayfly_enqueue>
			LL_ASSERT(!retval);
   1168a:	b930      	cbnz	r0, 1169a <mayfly_xtal_retain+0x2e>
   1168c:	bd08      	pop	{r3, pc}
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   1168e:	4040      	eors	r0, r0
   11690:	f380 8811 	msr	BASEPRI, r0
   11694:	f04f 0004 	mov.w	r0, #4
   11698:	df02      	svc	2
			LL_ASSERT(!retval);
   1169a:	4040      	eors	r0, r0
   1169c:	f380 8811 	msr	BASEPRI, r0
   116a0:	f04f 0004 	mov.w	r0, #4
   116a4:	df02      	svc	2
		if (s_xtal_retained) {
   116a6:	4b0f      	ldr	r3, [pc, #60]	; (116e4 <mayfly_xtal_retain+0x78>)
   116a8:	781b      	ldrb	r3, [r3, #0]
   116aa:	2b00      	cmp	r3, #0
   116ac:	d0ee      	beq.n	1168c <mayfly_xtal_retain+0x20>
			s_xtal_retained = 0;
   116ae:	2200      	movs	r2, #0
   116b0:	4b0c      	ldr	r3, [pc, #48]	; (116e4 <mayfly_xtal_retain+0x78>)
   116b2:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
   116b4:	b138      	cbz	r0, 116c6 <mayfly_xtal_retain+0x5a>
   116b6:	2801      	cmp	r0, #1
   116b8:	d012      	beq.n	116e0 <mayfly_xtal_retain+0x74>
				LL_ASSERT(0);
   116ba:	4040      	eors	r0, r0
   116bc:	f380 8811 	msr	BASEPRI, r0
   116c0:	f04f 0004 	mov.w	r0, #4
   116c4:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
   116c6:	4b09      	ldr	r3, [pc, #36]	; (116ec <mayfly_xtal_retain+0x80>)
			retval = mayfly_enqueue(caller_id,
   116c8:	2200      	movs	r2, #0
   116ca:	4611      	mov	r1, r2
   116cc:	f7fc fedc 	bl	e488 <mayfly_enqueue>
			LL_ASSERT(!retval);
   116d0:	2800      	cmp	r0, #0
   116d2:	d0db      	beq.n	1168c <mayfly_xtal_retain+0x20>
   116d4:	4040      	eors	r0, r0
   116d6:	f380 8811 	msr	BASEPRI, r0
   116da:	f04f 0004 	mov.w	r0, #4
   116de:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
   116e0:	4b03      	ldr	r3, [pc, #12]	; (116f0 <mayfly_xtal_retain+0x84>)
   116e2:	e7f1      	b.n	116c8 <mayfly_xtal_retain+0x5c>
   116e4:	20001364 	.word	0x20001364
   116e8:	2000bbd0 	.word	0x2000bbd0
   116ec:	2000bbe0 	.word	0x2000bbe0
   116f0:	2000bbf0 	.word	0x2000bbf0

000116f4 <event_active>:
{
   116f4:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   116f6:	4b07      	ldr	r3, [pc, #28]	; (11714 <event_active+0x20>)
   116f8:	2200      	movs	r2, #0
   116fa:	4611      	mov	r1, r2
   116fc:	4610      	mov	r0, r2
   116fe:	f7fc fec3 	bl	e488 <mayfly_enqueue>
	LL_ASSERT(!retval);
   11702:	b900      	cbnz	r0, 11706 <event_active+0x12>
   11704:	bd08      	pop	{r3, pc}
   11706:	4040      	eors	r0, r0
   11708:	f380 8811 	msr	BASEPRI, r0
   1170c:	f04f 0004 	mov.w	r0, #4
   11710:	df02      	svc	2
   11712:	bf00      	nop
   11714:	2000bb20 	.word	0x2000bb20

00011718 <event_xtal>:
{
   11718:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1171a:	4b07      	ldr	r3, [pc, #28]	; (11738 <event_xtal+0x20>)
   1171c:	2200      	movs	r2, #0
   1171e:	4611      	mov	r1, r2
   11720:	4610      	mov	r0, r2
   11722:	f7fc feb1 	bl	e488 <mayfly_enqueue>
	LL_ASSERT(!retval);
   11726:	b900      	cbnz	r0, 1172a <event_xtal+0x12>
   11728:	bd08      	pop	{r3, pc}
   1172a:	4040      	eors	r0, r0
   1172c:	f380 8811 	msr	BASEPRI, r0
   11730:	f04f 0004 	mov.w	r0, #4
   11734:	df02      	svc	2
   11736:	bf00      	nop
   11738:	2000bbc0 	.word	0x2000bbc0

0001173c <mayfly_radio_active>:
{
   1173c:	b508      	push	{r3, lr}
	if ((u32_t)params) {
   1173e:	b148      	cbz	r0, 11754 <mayfly_radio_active+0x18>
		if (s_active++) {
   11740:	4a0e      	ldr	r2, [pc, #56]	; (1177c <mayfly_radio_active+0x40>)
   11742:	7813      	ldrb	r3, [r2, #0]
   11744:	1c59      	adds	r1, r3, #1
   11746:	7011      	strb	r1, [r2, #0]
   11748:	b103      	cbz	r3, 1174c <mayfly_radio_active+0x10>
   1174a:	bd08      	pop	{r3, pc}
		radio_active_callback(1);
   1174c:	2001      	movs	r0, #1
   1174e:	f007 f8a5 	bl	1889c <radio_active_callback>
   11752:	bd08      	pop	{r3, pc}
		LL_ASSERT(s_active);
   11754:	4b09      	ldr	r3, [pc, #36]	; (1177c <mayfly_radio_active+0x40>)
   11756:	781b      	ldrb	r3, [r3, #0]
   11758:	b14b      	cbz	r3, 1176e <mayfly_radio_active+0x32>
		if (--s_active) {
   1175a:	3b01      	subs	r3, #1
   1175c:	b2db      	uxtb	r3, r3
   1175e:	4a07      	ldr	r2, [pc, #28]	; (1177c <mayfly_radio_active+0x40>)
   11760:	7013      	strb	r3, [r2, #0]
   11762:	2b00      	cmp	r3, #0
   11764:	d1f1      	bne.n	1174a <mayfly_radio_active+0xe>
		radio_active_callback(0);
   11766:	2000      	movs	r0, #0
   11768:	f007 f898 	bl	1889c <radio_active_callback>
   1176c:	e7ed      	b.n	1174a <mayfly_radio_active+0xe>
		LL_ASSERT(s_active);
   1176e:	4040      	eors	r0, r0
   11770:	f380 8811 	msr	BASEPRI, r0
   11774:	f04f 0004 	mov.w	r0, #4
   11778:	df02      	svc	2
   1177a:	bf00      	nop
   1177c:	200012d0 	.word	0x200012d0

00011780 <mayfly_radio_inactive>:
{
   11780:	b508      	push	{r3, lr}
	mayfly_radio_active(0);
   11782:	2000      	movs	r0, #0
   11784:	f7ff ffda 	bl	1173c <mayfly_radio_active>
   11788:	bd08      	pop	{r3, pc}
	...

0001178c <mayfly_radio_stop>:
{
   1178c:	b538      	push	{r3, r4, r5, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
   1178e:	b2c4      	uxtb	r4, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   11790:	1f23      	subs	r3, r4, #4
   11792:	b2db      	uxtb	r3, r3
   11794:	2b01      	cmp	r3, #1
   11796:	d808      	bhi.n	117aa <mayfly_radio_stop+0x1e>
	radio_used = ((_radio.state != STATE_NONE) &&
   11798:	4b10      	ldr	r3, [pc, #64]	; (117dc <mayfly_radio_stop+0x50>)
   1179a:	7c1b      	ldrb	r3, [r3, #16]
		      (_radio.state != STATE_STOP) &&
   1179c:	b16b      	cbz	r3, 117ba <mayfly_radio_stop+0x2e>
	radio_used = ((_radio.state != STATE_NONE) &&
   1179e:	2b04      	cmp	r3, #4
   117a0:	d014      	beq.n	117cc <mayfly_radio_stop+0x40>
		      (_radio.state != STATE_STOP) &&
   117a2:	2b05      	cmp	r3, #5
   117a4:	d007      	beq.n	117b6 <mayfly_radio_stop+0x2a>
   117a6:	2301      	movs	r3, #1
   117a8:	e008      	b.n	117bc <mayfly_radio_stop+0x30>
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   117aa:	4040      	eors	r0, r0
   117ac:	f380 8811 	msr	BASEPRI, r0
   117b0:	f04f 0004 	mov.w	r0, #4
   117b4:	df02      	svc	2
		      (_radio.state != STATE_STOP) &&
   117b6:	2300      	movs	r3, #0
   117b8:	e000      	b.n	117bc <mayfly_radio_stop+0x30>
   117ba:	2300      	movs	r3, #0
	radio_used = ((_radio.state != STATE_NONE) &&
   117bc:	461d      	mov	r5, r3
	if (radio_used || !radio_is_idle()) {
   117be:	b13b      	cbz	r3, 117d0 <mayfly_radio_stop+0x44>
		if (radio_used) {
   117c0:	b10d      	cbz	r5, 117c6 <mayfly_radio_stop+0x3a>
			_radio.state = state;
   117c2:	4b06      	ldr	r3, [pc, #24]	; (117dc <mayfly_radio_stop+0x50>)
   117c4:	741c      	strb	r4, [r3, #16]
		radio_disable();
   117c6:	f7fd f9b5 	bl	eb34 <radio_disable>
   117ca:	bd38      	pop	{r3, r4, r5, pc}
		      (_radio.state != STATE_STOP) &&
   117cc:	2300      	movs	r3, #0
   117ce:	e7f5      	b.n	117bc <mayfly_radio_stop+0x30>
	if (radio_used || !radio_is_idle()) {
   117d0:	f7fd f9de 	bl	eb90 <radio_is_idle>
   117d4:	2800      	cmp	r0, #0
   117d6:	d0f3      	beq.n	117c0 <mayfly_radio_stop+0x34>
   117d8:	e7f7      	b.n	117ca <mayfly_radio_stop+0x3e>
   117da:	bf00      	nop
   117dc:	20000dec 	.word	0x20000dec

000117e0 <adv_scan_conn_configure>:
{
   117e0:	b508      	push	{r3, lr}
	radio_reset();
   117e2:	f7fd f901 	bl	e9e8 <radio_reset>
	radio_tx_power_set(0);
   117e6:	2000      	movs	r0, #0
   117e8:	f7fd f91a 	bl	ea20 <radio_tx_power_set>
	radio_isr_set(isr);
   117ec:	4801      	ldr	r0, [pc, #4]	; (117f4 <adv_scan_conn_configure+0x14>)
   117ee:	f7fd f8c3 	bl	e978 <radio_isr_set>
   117f2:	bd08      	pop	{r3, pc}
   117f4:	0000f129 	.word	0x0000f129

000117f8 <adv_scan_configure>:
{
   117f8:	b570      	push	{r4, r5, r6, lr}
   117fa:	b082      	sub	sp, #8
   117fc:	4604      	mov	r4, r0
   117fe:	460e      	mov	r6, r1
	u32_t aa = 0x8e89bed6;
   11800:	ad02      	add	r5, sp, #8
   11802:	4b0d      	ldr	r3, [pc, #52]	; (11838 <adv_scan_configure+0x40>)
   11804:	f845 3d04 	str.w	r3, [r5, #-4]!
	adv_scan_conn_configure();
   11808:	f7ff ffea 	bl	117e0 <adv_scan_conn_configure>
	radio_phy_set(phy, flags);
   1180c:	4631      	mov	r1, r6
   1180e:	4620      	mov	r0, r4
   11810:	f7fd f8f8 	bl	ea04 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
   11814:	4628      	mov	r0, r5
   11816:	f7fd f921 	bl	ea5c <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
   1181a:	0062      	lsls	r2, r4, #1
   1181c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   11820:	2125      	movs	r1, #37	; 0x25
   11822:	2008      	movs	r0, #8
   11824:	f7fd f932 	bl	ea8c <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   11828:	4904      	ldr	r1, [pc, #16]	; (1183c <adv_scan_configure+0x44>)
   1182a:	f240 605b 	movw	r0, #1627	; 0x65b
   1182e:	f7fd f9b9 	bl	eba4 <radio_crc_configure>
}
   11832:	b002      	add	sp, #8
   11834:	bd70      	pop	{r4, r5, r6, pc}
   11836:	bf00      	nop
   11838:	8e89bed6 	.word	0x8e89bed6
   1183c:	00555555 	.word	0x00555555

00011840 <connection_configure>:
{
   11840:	b510      	push	{r4, lr}
   11842:	4604      	mov	r4, r0
	adv_scan_conn_configure();
   11844:	f7ff ffcc 	bl	117e0 <adv_scan_conn_configure>
	radio_aa_set(conn->access_addr);
   11848:	f104 0010 	add.w	r0, r4, #16
   1184c:	f7fd f906 	bl	ea5c <radio_aa_set>
			    (((u32_t)conn->crc_init[2] << 16) |
   11850:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   11852:	7d63      	ldrb	r3, [r4, #21]
   11854:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   11856:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   1185a:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1185c:	4319      	orrs	r1, r3
   1185e:	f240 605b 	movw	r0, #1627	; 0x65b
   11862:	f7fd f99f 	bl	eba4 <radio_crc_configure>
   11866:	bd10      	pop	{r4, pc}

00011868 <rx_packet_set>:
{
   11868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1186a:	4605      	mov	r5, r0
   1186c:	460f      	mov	r7, r1
	max_rx_octets = conn->max_rx_octets;
   1186e:	8e06      	ldrh	r6, [r0, #48]	; 0x30
	phy = conn->phy_rx;
   11870:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
   11874:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   11878:	2100      	movs	r1, #0
   1187a:	4620      	mov	r0, r4
   1187c:	f7fd f8c2 	bl	ea04 <radio_phy_set>
	if (conn->enc_rx) {
   11880:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   11884:	f013 0f10 	tst.w	r3, #16
   11888:	d10a      	bne.n	118a0 <rx_packet_set+0x38>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1188a:	0062      	lsls	r2, r4, #1
   1188c:	f042 0201 	orr.w	r2, r2, #1
   11890:	b2f1      	uxtb	r1, r6
   11892:	2008      	movs	r0, #8
   11894:	f7fd f8fa 	bl	ea8c <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
   11898:	4638      	mov	r0, r7
   1189a:	f7fd f927 	bl	eaec <radio_pkt_rx_set>
   1189e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   118a0:	0062      	lsls	r2, r4, #1
   118a2:	1d31      	adds	r1, r6, #4
   118a4:	f042 0201 	orr.w	r2, r2, #1
   118a8:	b2c9      	uxtb	r1, r1
   118aa:	2008      	movs	r0, #8
   118ac:	f7fd f8ee 	bl	ea8c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
   118b0:	463a      	mov	r2, r7
   118b2:	4621      	mov	r1, r4
   118b4:	f105 00f9 	add.w	r0, r5, #249	; 0xf9
   118b8:	f7fd fb14 	bl	eee4 <radio_ccm_rx_pkt_set>
   118bc:	f7fd f916 	bl	eaec <radio_pkt_rx_set>
   118c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000118c2 <packet_rx_callback>:
{
   118c2:	b508      	push	{r3, lr}
	radio_event_callback();
   118c4:	f006 ffec 	bl	188a0 <radio_event_callback>
   118c8:	bd08      	pop	{r3, pc}
	...

000118cc <pdu_node_tx_release>:
{
   118cc:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
   118ce:	4a14      	ldr	r2, [pc, #80]	; (11920 <pdu_node_tx_release+0x54>)
   118d0:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
   118d4:	3301      	adds	r3, #1
   118d6:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_tx_count) {
   118d8:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   118dc:	4293      	cmp	r3, r2
   118de:	d017      	beq.n	11910 <pdu_node_tx_release+0x44>
	LL_ASSERT(last != _radio.packet_release_first);
   118e0:	4a0f      	ldr	r2, [pc, #60]	; (11920 <pdu_node_tx_release+0x54>)
   118e2:	f892 2173 	ldrb.w	r2, [r2, #371]	; 0x173
   118e6:	4293      	cmp	r3, r2
   118e8:	d014      	beq.n	11914 <pdu_node_tx_release+0x48>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
   118ea:	4a0d      	ldr	r2, [pc, #52]	; (11920 <pdu_node_tx_release+0x54>)
   118ec:	f8d2 416c 	ldr.w	r4, [r2, #364]	; 0x16c
   118f0:	f892 5174 	ldrb.w	r5, [r2, #372]	; 0x174
   118f4:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
   118f8:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   118fc:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
   11900:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   11904:	6041      	str	r1, [r0, #4]
	_radio.packet_release_last = last;
   11906:	f882 3174 	strb.w	r3, [r2, #372]	; 0x174
	packet_rx_callback();
   1190a:	f7ff ffda 	bl	118c2 <packet_rx_callback>
   1190e:	bd38      	pop	{r3, r4, r5, pc}
		last = 0;
   11910:	2300      	movs	r3, #0
   11912:	e7e5      	b.n	118e0 <pdu_node_tx_release+0x14>
	LL_ASSERT(last != _radio.packet_release_first);
   11914:	4040      	eors	r0, r0
   11916:	f380 8811 	msr	BASEPRI, r0
   1191a:	f04f 0004 	mov.w	r0, #4
   1191e:	df02      	svc	2
   11920:	20000dec 	.word	0x20000dec

00011924 <packet_tx_enqueue>:
{
   11924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   11926:	e016      	b.n	11956 <packet_tx_enqueue+0x32>
			if (conn->pkt_tx_data == 0) {
   11928:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   1192c:	2b00      	cmp	r3, #0
   1192e:	d040      	beq.n	119b2 <packet_tx_enqueue+0x8e>
			if (conn->pkt_tx_last) {
   11930:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
   11934:	b103      	cbz	r3, 11938 <packet_tx_enqueue+0x14>
				conn->pkt_tx_last->next = node_tx_new;
   11936:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_last = node_tx_new;
   11938:	f8c0 514c 	str.w	r5, [r0, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
   1193c:	4a24      	ldr	r2, [pc, #144]	; (119d0 <packet_tx_enqueue+0xac>)
   1193e:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   11942:	3301      	adds	r3, #1
   11944:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
   11946:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   1194a:	4293      	cmp	r3, r2
   1194c:	d03c      	beq.n	119c8 <packet_tx_enqueue+0xa4>
		_radio.packet_tx_first = first;
   1194e:	4a20      	ldr	r2, [pc, #128]	; (119d0 <packet_tx_enqueue+0xac>)
   11950:	f882 3171 	strb.w	r3, [r2, #369]	; 0x171
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   11954:	4638      	mov	r0, r7
   11956:	1e47      	subs	r7, r0, #1
   11958:	b2ff      	uxtb	r7, r7
   1195a:	2800      	cmp	r0, #0
   1195c:	d036      	beq.n	119cc <packet_tx_enqueue+0xa8>
   1195e:	4a1c      	ldr	r2, [pc, #112]	; (119d0 <packet_tx_enqueue+0xac>)
   11960:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   11964:	b2db      	uxtb	r3, r3
   11966:	f892 2172 	ldrb.w	r2, [r2, #370]	; 0x172
   1196a:	4293      	cmp	r3, r2
   1196c:	d02e      	beq.n	119cc <packet_tx_enqueue+0xa8>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   1196e:	4b18      	ldr	r3, [pc, #96]	; (119d0 <packet_tx_enqueue+0xac>)
   11970:	f8d3 6168 	ldr.w	r6, [r3, #360]	; 0x168
   11974:	f893 4171 	ldrb.w	r4, [r3, #369]	; 0x171
   11978:	b2e4      	uxtb	r4, r4
   1197a:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
		node_tx_new = pdu_data_q_tx->node_tx;
   1197e:	6855      	ldr	r5, [r2, #4]
		node_tx_new->next = NULL;
   11980:	2200      	movs	r2, #0
   11982:	602a      	str	r2, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   11984:	f836 2034 	ldrh.w	r2, [r6, r4, lsl #3]
   11988:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1198c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   11990:	f7fc fef8 	bl	e784 <mem_get>
		if (conn->handle == pdu_data_q_tx->handle) {
   11994:	8c02      	ldrh	r2, [r0, #32]
   11996:	f836 3034 	ldrh.w	r3, [r6, r4, lsl #3]
   1199a:	429a      	cmp	r2, r3
   1199c:	d0c4      	beq.n	11928 <packet_tx_enqueue+0x4>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   1199e:	792b      	ldrb	r3, [r5, #4]
   119a0:	f36f 0301 	bfc	r3, #0, #2
   119a4:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
   119a6:	4629      	mov	r1, r5
   119a8:	f836 0034 	ldrh.w	r0, [r6, r4, lsl #3]
   119ac:	f7ff ff8e 	bl	118cc <pdu_node_tx_release>
   119b0:	e7c4      	b.n	1193c <packet_tx_enqueue+0x18>
				conn->pkt_tx_data = node_tx_new;
   119b2:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
   119b6:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   119ba:	2b00      	cmp	r3, #0
   119bc:	d1b8      	bne.n	11930 <packet_tx_enqueue+0xc>
					conn->pkt_tx_head = node_tx_new;
   119be:	f8c0 513c 	str.w	r5, [r0, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
   119c2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
   119c6:	e7b3      	b.n	11930 <packet_tx_enqueue+0xc>
			first = 0;
   119c8:	2300      	movs	r3, #0
   119ca:	e7c0      	b.n	1194e <packet_tx_enqueue+0x2a>
   119cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   119ce:	bf00      	nop
   119d0:	20000dec 	.word	0x20000dec

000119d4 <connection_release>:
{
   119d4:	b510      	push	{r4, lr}
   119d6:	b082      	sub	sp, #8
   119d8:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   119da:	2201      	movs	r2, #1
   119dc:	4611      	mov	r1, r2
   119de:	2000      	movs	r0, #0
   119e0:	f7fc fd14 	bl	e40c <mayfly_enable>
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   119e4:	8c22      	ldrh	r2, [r4, #32]
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   119e6:	3207      	adds	r2, #7
	ticker_status =
   119e8:	f242 2345 	movw	r3, #8773	; 0x2245
   119ec:	9300      	str	r3, [sp, #0]
   119ee:	4b46      	ldr	r3, [pc, #280]	; (11b08 <connection_release+0x134>)
   119f0:	b2d2      	uxtb	r2, r2
   119f2:	2100      	movs	r1, #0
   119f4:	4608      	mov	r0, r1
   119f6:	f7fe fbf3 	bl	101e0 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   119fa:	b108      	cbz	r0, 11a00 <connection_release+0x2c>
   119fc:	2802      	cmp	r0, #2
   119fe:	d12a      	bne.n	11a56 <connection_release+0x82>
	if ((_radio.state == STATE_ABORT) &&
   11a00:	4b42      	ldr	r3, [pc, #264]	; (11b0c <connection_release+0x138>)
   11a02:	7c1b      	ldrb	r3, [r3, #16]
   11a04:	2b05      	cmp	r3, #5
   11a06:	d13e      	bne.n	11a86 <connection_release+0xb2>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   11a08:	4b40      	ldr	r3, [pc, #256]	; (11b0c <connection_release+0x138>)
   11a0a:	7b1a      	ldrb	r2, [r3, #12]
   11a0c:	b2d2      	uxtb	r2, r2
					  conn->handle))) {
   11a0e:	8c23      	ldrh	r3, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   11a10:	3307      	adds	r3, #7
	if ((_radio.state == STATE_ABORT) &&
   11a12:	429a      	cmp	r2, r3
   11a14:	d137      	bne.n	11a86 <connection_release+0xb2>
		_radio.ticker_id_prepare = 0;
   11a16:	2000      	movs	r0, #0
   11a18:	4b3c      	ldr	r3, [pc, #240]	; (11b0c <connection_release+0x138>)
   11a1a:	7318      	strb	r0, [r3, #12]
		ticker_status =
   11a1c:	f242 2356 	movw	r3, #8790	; 0x2256
   11a20:	9300      	str	r3, [sp, #0]
   11a22:	4b39      	ldr	r3, [pc, #228]	; (11b08 <connection_release+0x134>)
   11a24:	2201      	movs	r2, #1
   11a26:	4601      	mov	r1, r0
   11a28:	f7fe fbda 	bl	101e0 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11a2c:	b108      	cbz	r0, 11a32 <connection_release+0x5e>
   11a2e:	2802      	cmp	r0, #2
   11a30:	d117      	bne.n	11a62 <connection_release+0x8e>
		ticker_status =
   11a32:	f242 235d 	movw	r3, #8797	; 0x225d
   11a36:	9300      	str	r3, [sp, #0]
   11a38:	4b33      	ldr	r3, [pc, #204]	; (11b08 <connection_release+0x134>)
   11a3a:	2200      	movs	r2, #0
   11a3c:	4611      	mov	r1, r2
   11a3e:	4610      	mov	r0, r2
   11a40:	f7fe fbce 	bl	101e0 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11a44:	b1f8      	cbz	r0, 11a86 <connection_release+0xb2>
   11a46:	2802      	cmp	r0, #2
   11a48:	d01d      	beq.n	11a86 <connection_release+0xb2>
   11a4a:	4040      	eors	r0, r0
   11a4c:	f380 8811 	msr	BASEPRI, r0
   11a50:	f04f 0004 	mov.w	r0, #4
   11a54:	df02      	svc	2
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11a56:	4040      	eors	r0, r0
   11a58:	f380 8811 	msr	BASEPRI, r0
   11a5c:	f04f 0004 	mov.w	r0, #4
   11a60:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11a62:	4040      	eors	r0, r0
   11a64:	f380 8811 	msr	BASEPRI, r0
   11a68:	f04f 0004 	mov.w	r0, #4
   11a6c:	df02      	svc	2
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   11a6e:	790b      	ldrb	r3, [r1, #4]
   11a70:	f36f 0301 	bfc	r3, #0, #2
   11a74:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   11a76:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   11a7a:	681b      	ldr	r3, [r3, #0]
   11a7c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
   11a80:	8c20      	ldrh	r0, [r4, #32]
   11a82:	f7ff ff23 	bl	118cc <pdu_node_tx_release>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   11a86:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   11a8a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   11a8e:	4299      	cmp	r1, r3
   11a90:	d00c      	beq.n	11aac <connection_release+0xd8>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   11a92:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   11a96:	4299      	cmp	r1, r3
   11a98:	d1e9      	bne.n	11a6e <connection_release+0x9a>
   11a9a:	e007      	b.n	11aac <connection_release+0xd8>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   11a9c:	6803      	ldr	r3, [r0, #0]
   11a9e:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
   11aa2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   11aa6:	491a      	ldr	r1, [pc, #104]	; (11b10 <connection_release+0x13c>)
   11aa8:	f7fc fe4b 	bl	e742 <mem_release>
	while ((conn->pkt_tx_head) &&
   11aac:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   11ab0:	b118      	cbz	r0, 11aba <connection_release+0xe6>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   11ab2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head) &&
   11ab6:	4298      	cmp	r0, r3
   11ab8:	d1f0      	bne.n	11a9c <connection_release+0xc8>
	conn->pkt_tx_ctrl = NULL;
   11aba:	2300      	movs	r3, #0
   11abc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   11ac0:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
   11ac4:	e00d      	b.n	11ae2 <connection_release+0x10e>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   11ac6:	790b      	ldrb	r3, [r1, #4]
   11ac8:	f36f 0301 	bfc	r3, #0, #2
   11acc:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   11ace:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   11ad2:	681b      	ldr	r3, [r3, #0]
   11ad4:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
   11ad8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
   11adc:	8c20      	ldrh	r0, [r4, #32]
   11ade:	f7ff fef5 	bl	118cc <pdu_node_tx_release>
	while (conn->pkt_tx_head) {
   11ae2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   11ae6:	2900      	cmp	r1, #0
   11ae8:	d1ed      	bne.n	11ac6 <connection_release+0xf2>
	conn->handle = 0xffff;
   11aea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11aee:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
   11af0:	4b06      	ldr	r3, [pc, #24]	; (11b0c <connection_release+0x138>)
   11af2:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   11af6:	429c      	cmp	r4, r3
   11af8:	d001      	beq.n	11afe <connection_release+0x12a>
}
   11afa:	b002      	add	sp, #8
   11afc:	bd10      	pop	{r4, pc}
		_radio.conn_upd = NULL;
   11afe:	2200      	movs	r2, #0
   11b00:	4b02      	ldr	r3, [pc, #8]	; (11b0c <connection_release+0x138>)
   11b02:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
}
   11b06:	e7f8      	b.n	11afa <connection_release+0x126>
   11b08:	00010dfd 	.word	0x00010dfd
   11b0c:	20000dec 	.word	0x20000dec
   11b10:	20000f44 	.word	0x20000f44

00011b14 <chan_map_update>:
{
   11b14:	b538      	push	{r3, r4, r5, lr}
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   11b16:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	      conn->event_counter) & 0xffff) > 0x7fff) {
   11b1a:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   11b1c:	1a9b      	subs	r3, r3, r2
   11b1e:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   11b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11b24:	da22      	bge.n	11b6c <chan_map_update+0x58>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11b26:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11b2a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11b2e:	429a      	cmp	r2, r3
   11b30:	d116      	bne.n	11b60 <chan_map_update+0x4c>
   11b32:	460d      	mov	r5, r1
   11b34:	4604      	mov	r4, r0
	memcpy(&conn->llcp.chan_map.chm[0],
   11b36:	2205      	movs	r2, #5
   11b38:	3104      	adds	r1, #4
   11b3a:	3079      	adds	r0, #121	; 0x79
   11b3c:	f7ee fbc0 	bl	2c0 <memcpy>
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
   11b40:	f8b5 3009 	ldrh.w	r3, [r5, #9]
	conn->llcp.chan_map.instant =
   11b44:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
	conn->llcp.chan_map.initiate = 0;
   11b48:	2000      	movs	r0, #0
   11b4a:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
	conn->llcp_type = LLCP_CHAN_MAP;
   11b4e:	2302      	movs	r3, #2
   11b50:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	conn->llcp_ack--;
   11b54:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   11b58:	3b01      	subs	r3, #1
   11b5a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	return 0;
   11b5e:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11b60:	4040      	eors	r0, r0
   11b62:	f380 8811 	msr	BASEPRI, r0
   11b66:	f04f 0004 	mov.w	r0, #4
   11b6a:	df02      	svc	2
		return 1;
   11b6c:	2001      	movs	r0, #1
}
   11b6e:	bd38      	pop	{r3, r4, r5, pc}

00011b70 <feature_rsp_send>:
{
   11b70:	b538      	push	{r3, r4, r5, lr}
   11b72:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11b74:	4812      	ldr	r0, [pc, #72]	; (11bc0 <feature_rsp_send+0x50>)
   11b76:	f7fc fdc8 	bl	e70a <mem_acquire>
	LL_ASSERT(node_tx);
   11b7a:	b1d8      	cbz	r0, 11bb4 <feature_rsp_send+0x44>
   11b7c:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11b7e:	7903      	ldrb	r3, [r0, #4]
   11b80:	f043 0303 	orr.w	r3, r3, #3
   11b84:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11b86:	2309      	movs	r3, #9
   11b88:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   11b8a:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
   11b8c:	2208      	movs	r2, #8
   11b8e:	2100      	movs	r1, #0
   11b90:	4410      	add	r0, r2
   11b92:	f017 fda1 	bl	296d8 <memset>
		conn->llcp_features & 0xFF;
   11b96:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   11b9a:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
   11b9c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   11ba0:	0a1b      	lsrs	r3, r3, #8
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   11ba2:	7263      	strb	r3, [r4, #9]
		(conn->llcp_features >> 16) & 0xFF;
   11ba4:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   11ba8:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
   11baa:	4621      	mov	r1, r4
   11bac:	4628      	mov	r0, r5
   11bae:	f7ff f87c 	bl	10caa <ctrl_tx_sec_enqueue>
   11bb2:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   11bb4:	4040      	eors	r0, r0
   11bb6:	f380 8811 	msr	BASEPRI, r0
   11bba:	f04f 0004 	mov.w	r0, #4
   11bbe:	df02      	svc	2
   11bc0:	20000f44 	.word	0x20000f44

00011bc4 <empty_tx_enqueue>:
{
   11bc4:	b510      	push	{r4, lr}
   11bc6:	4604      	mov	r4, r0
	conn->empty = 1;
   11bc8:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   11bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11bd0:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
   11bd4:	f7fc fffc 	bl	ebd0 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11bd8:	7803      	ldrb	r3, [r0, #0]
   11bda:	2201      	movs	r2, #1
   11bdc:	f362 0301 	bfi	r3, r2, #0, #2
   11be0:	7003      	strb	r3, [r0, #0]
	pdu_data_tx->len = 0;
   11be2:	2300      	movs	r3, #0
   11be4:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
   11be6:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   11bea:	b123      	cbz	r3, 11bf6 <empty_tx_enqueue+0x32>
		pdu_data_tx->md = 1;
   11bec:	7803      	ldrb	r3, [r0, #0]
   11bee:	f043 0310 	orr.w	r3, r3, #16
   11bf2:	7003      	strb	r3, [r0, #0]
   11bf4:	bd10      	pop	{r4, pc}
		pdu_data_tx->md = 0;
   11bf6:	7803      	ldrb	r3, [r0, #0]
   11bf8:	f36f 1304 	bfc	r3, #4, #1
   11bfc:	7003      	strb	r3, [r0, #0]
}
   11bfe:	bd10      	pop	{r4, pc}

00011c00 <prepare_pdu_data_tx>:
{
   11c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c02:	460c      	mov	r4, r1
	    conn->empty ||
   11c04:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
	if (/* empty packet */
   11c08:	f012 0f80 	tst.w	r2, #128	; 0x80
   11c0c:	d109      	bne.n	11c22 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   11c0e:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    conn->empty ||
   11c12:	b133      	cbz	r3, 11c22 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   11c14:	f012 0f08 	tst.w	r2, #8
   11c18:	d00e      	beq.n	11c38 <prepare_pdu_data_tx+0x38>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
   11c1a:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
   11c1e:	4293      	cmp	r3, r2
   11c20:	d00a      	beq.n	11c38 <prepare_pdu_data_tx+0x38>
			_pdu_data_tx = empty_tx_enqueue(conn);
   11c22:	f7ff ffcf 	bl	11bc4 <empty_tx_enqueue>
   11c26:	4602      	mov	r2, r0
	_pdu_data_tx->rfu = 0;
   11c28:	7813      	ldrb	r3, [r2, #0]
   11c2a:	f36f 1347 	bfc	r3, #5, #3
   11c2e:	7013      	strb	r3, [r2, #0]
	_pdu_data_tx->resv = 0;
   11c30:	2300      	movs	r3, #0
   11c32:	7093      	strb	r3, [r2, #2]
	*pdu_data_tx = _pdu_data_tx;
   11c34:	6022      	str	r2, [r4, #0]
   11c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   11c38:	3304      	adds	r3, #4
					conn->packet_tx_head_offset);
   11c3a:	f890 6151 	ldrb.w	r6, [r0, #337]	; 0x151
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   11c3e:	199a      	adds	r2, r3, r6
		if (!conn->packet_tx_head_len) {
   11c40:	f890 1150 	ldrb.w	r1, [r0, #336]	; 0x150
   11c44:	b911      	cbnz	r1, 11c4c <prepare_pdu_data_tx+0x4c>
			conn->packet_tx_head_len = _pdu_data_tx->len;
   11c46:	7851      	ldrb	r1, [r2, #1]
   11c48:	f880 1150 	strb.w	r1, [r0, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
   11c4c:	b126      	cbz	r6, 11c58 <prepare_pdu_data_tx+0x58>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11c4e:	5d99      	ldrb	r1, [r3, r6]
   11c50:	2501      	movs	r5, #1
   11c52:	f365 0101 	bfi	r1, r5, #0, #2
   11c56:	5599      	strb	r1, [r3, r6]
		_pdu_data_tx->len = conn->packet_tx_head_len -
   11c58:	f890 5150 	ldrb.w	r5, [r0, #336]	; 0x150
				    conn->packet_tx_head_offset;
   11c5c:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
		_pdu_data_tx->len = conn->packet_tx_head_len -
   11c60:	1a6d      	subs	r5, r5, r1
   11c62:	b2ed      	uxtb	r5, r5
   11c64:	7055      	strb	r5, [r2, #1]
		_pdu_data_tx->md = 0;
   11c66:	5d99      	ldrb	r1, [r3, r6]
   11c68:	f36f 1104 	bfc	r1, #4, #1
   11c6c:	5599      	strb	r1, [r3, r6]
		switch (conn->phy_tx_time) {
   11c6e:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
   11c72:	f001 0107 	and.w	r1, r1, #7
   11c76:	2902      	cmp	r1, #2
   11c78:	d02d      	beq.n	11cd6 <prepare_pdu_data_tx+0xd6>
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   11c7a:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   11c7c:	08c9      	lsrs	r1, r1, #3
   11c7e:	390a      	subs	r1, #10
   11c80:	b289      	uxth	r1, r1
		if (conn->enc_tx) {
   11c82:	f890 70f8 	ldrb.w	r7, [r0, #248]	; 0xf8
   11c86:	f017 0f20 	tst.w	r7, #32
   11c8a:	d001      	beq.n	11c90 <prepare_pdu_data_tx+0x90>
			max_tx_octets -= 4;
   11c8c:	3904      	subs	r1, #4
   11c8e:	b289      	uxth	r1, r1
		if (max_tx_octets > conn->max_tx_octets) {
   11c90:	8dc7      	ldrh	r7, [r0, #46]	; 0x2e
   11c92:	42b9      	cmp	r1, r7
   11c94:	d800      	bhi.n	11c98 <prepare_pdu_data_tx+0x98>
   11c96:	460f      	mov	r7, r1
		if (_pdu_data_tx->len > max_tx_octets) {
   11c98:	b2ad      	uxth	r5, r5
   11c9a:	42af      	cmp	r7, r5
   11c9c:	d204      	bcs.n	11ca8 <prepare_pdu_data_tx+0xa8>
			_pdu_data_tx->len = max_tx_octets;
   11c9e:	7057      	strb	r7, [r2, #1]
			_pdu_data_tx->md = 1;
   11ca0:	5d99      	ldrb	r1, [r3, r6]
   11ca2:	f041 0110 	orr.w	r1, r1, #16
   11ca6:	5599      	strb	r1, [r3, r6]
		if (conn->pkt_tx_head->next) {
   11ca8:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
   11cac:	6809      	ldr	r1, [r1, #0]
   11cae:	b119      	cbz	r1, 11cb8 <prepare_pdu_data_tx+0xb8>
			_pdu_data_tx->md = 1;
   11cb0:	5d99      	ldrb	r1, [r3, r6]
   11cb2:	f041 0110 	orr.w	r1, r1, #16
   11cb6:	5599      	strb	r1, [r3, r6]
		if (!conn->pkt_tx_ctrl &&
   11cb8:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   11cbc:	2b00      	cmp	r3, #0
   11cbe:	d1b3      	bne.n	11c28 <prepare_pdu_data_tx+0x28>
		    (conn->pkt_tx_head != conn->pkt_tx_data)) {
   11cc0:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   11cc4:	f8d0 1148 	ldr.w	r1, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl &&
   11cc8:	428b      	cmp	r3, r1
   11cca:	d0ad      	beq.n	11c28 <prepare_pdu_data_tx+0x28>
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
   11ccc:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   11cd0:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
   11cd4:	e7a8      	b.n	11c28 <prepare_pdu_data_tx+0x28>
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   11cd6:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   11cd8:	0889      	lsrs	r1, r1, #2
   11cda:	390b      	subs	r1, #11
   11cdc:	b289      	uxth	r1, r1
			break;
   11cde:	e7d0      	b.n	11c82 <prepare_pdu_data_tx+0x82>

00011ce0 <version_ind_send>:
{
   11ce0:	b510      	push	{r4, lr}
   11ce2:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11ce4:	4810      	ldr	r0, [pc, #64]	; (11d28 <version_ind_send+0x48>)
   11ce6:	f7fc fd10 	bl	e70a <mem_acquire>
	LL_ASSERT(node_tx);
   11cea:	b1b8      	cbz	r0, 11d1c <version_ind_send+0x3c>
   11cec:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11cee:	7903      	ldrb	r3, [r0, #4]
   11cf0:	f043 0303 	orr.w	r3, r3, #3
   11cf4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11cf6:	2306      	movs	r3, #6
   11cf8:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   11cfa:	230c      	movs	r3, #12
   11cfc:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   11cfe:	2309      	movs	r3, #9
   11d00:	7203      	strb	r3, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   11d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11d06:	7243      	strb	r3, [r0, #9]
   11d08:	7283      	strb	r3, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   11d0a:	72c3      	strb	r3, [r0, #11]
   11d0c:	7303      	strb	r3, [r0, #12]
	ctrl_tx_sec_enqueue(conn, node_tx);
   11d0e:	4620      	mov	r0, r4
   11d10:	f7fe ffcb 	bl	10caa <ctrl_tx_sec_enqueue>
	empty_tx_enqueue(conn);
   11d14:	4620      	mov	r0, r4
   11d16:	f7ff ff55 	bl	11bc4 <empty_tx_enqueue>
   11d1a:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11d1c:	4040      	eors	r0, r0
   11d1e:	f380 8811 	msr	BASEPRI, r0
   11d22:	f04f 0004 	mov.w	r0, #4
   11d26:	df02      	svc	2
   11d28:	20000f44 	.word	0x20000f44

00011d2c <tx_packet_set>:
{
   11d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d2e:	4605      	mov	r5, r0
   11d30:	460f      	mov	r7, r1
	max_tx_octets = conn->max_tx_octets;
   11d32:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
   11d34:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
   11d38:	f3c1 04c2 	ubfx	r4, r1, #3, #3
	radio_phy_set(phy, flags);
   11d3c:	09c9      	lsrs	r1, r1, #7
   11d3e:	4620      	mov	r0, r4
   11d40:	f7fc fe60 	bl	ea04 <radio_phy_set>
	if (conn->enc_tx) {
   11d44:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   11d48:	f013 0f20 	tst.w	r3, #32
   11d4c:	d10a      	bne.n	11d64 <tx_packet_set+0x38>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   11d4e:	0062      	lsls	r2, r4, #1
   11d50:	f042 0201 	orr.w	r2, r2, #1
   11d54:	b2f1      	uxtb	r1, r6
   11d56:	2008      	movs	r0, #8
   11d58:	f7fc fe98 	bl	ea8c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   11d5c:	4638      	mov	r0, r7
   11d5e:	f7fc fecb 	bl	eaf8 <radio_pkt_tx_set>
   11d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
   11d64:	0062      	lsls	r2, r4, #1
   11d66:	1d31      	adds	r1, r6, #4
   11d68:	f042 0201 	orr.w	r2, r2, #1
   11d6c:	b2c9      	uxtb	r1, r1
   11d6e:	2008      	movs	r0, #8
   11d70:	f7fc fe8c 	bl	ea8c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
   11d74:	4639      	mov	r1, r7
   11d76:	f505 708d 	add.w	r0, r5, #282	; 0x11a
   11d7a:	f7fd f8f3 	bl	ef64 <radio_ccm_tx_pkt_set>
   11d7e:	f7fc febb 	bl	eaf8 <radio_pkt_tx_set>
   11d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011d84 <chan_set>:
{
   11d84:	b510      	push	{r4, lr}
   11d86:	4604      	mov	r4, r0
	switch (chan) {
   11d88:	2826      	cmp	r0, #38	; 0x26
   11d8a:	d013      	beq.n	11db4 <chan_set+0x30>
   11d8c:	2827      	cmp	r0, #39	; 0x27
   11d8e:	d015      	beq.n	11dbc <chan_set+0x38>
   11d90:	2825      	cmp	r0, #37	; 0x25
   11d92:	d008      	beq.n	11da6 <chan_set+0x22>
		if (chan < 11) {
   11d94:	280a      	cmp	r0, #10
   11d96:	d915      	bls.n	11dc4 <chan_set+0x40>
		} else if (chan < 40) {
   11d98:	2827      	cmp	r0, #39	; 0x27
   11d9a:	d818      	bhi.n	11dce <chan_set+0x4a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
   11d9c:	3003      	adds	r0, #3
   11d9e:	0040      	lsls	r0, r0, #1
   11da0:	f7fc fe44 	bl	ea2c <radio_freq_chan_set>
   11da4:	e002      	b.n	11dac <chan_set+0x28>
		radio_freq_chan_set(2);
   11da6:	2002      	movs	r0, #2
   11da8:	f7fc fe40 	bl	ea2c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   11dac:	4620      	mov	r0, r4
   11dae:	f7fc fe43 	bl	ea38 <radio_whiten_iv_set>
   11db2:	bd10      	pop	{r4, pc}
		radio_freq_chan_set(26);
   11db4:	201a      	movs	r0, #26
   11db6:	f7fc fe39 	bl	ea2c <radio_freq_chan_set>
		break;
   11dba:	e7f7      	b.n	11dac <chan_set+0x28>
		radio_freq_chan_set(80);
   11dbc:	2050      	movs	r0, #80	; 0x50
   11dbe:	f7fc fe35 	bl	ea2c <radio_freq_chan_set>
		break;
   11dc2:	e7f3      	b.n	11dac <chan_set+0x28>
			radio_freq_chan_set(4 + (2 * chan));
   11dc4:	3002      	adds	r0, #2
   11dc6:	0040      	lsls	r0, r0, #1
   11dc8:	f7fc fe30 	bl	ea2c <radio_freq_chan_set>
   11dcc:	e7ee      	b.n	11dac <chan_set+0x28>
			LL_ASSERT(0);
   11dce:	4040      	eors	r0, r0
   11dd0:	f380 8811 	msr	BASEPRI, r0
   11dd4:	f04f 0004 	mov.w	r0, #4
   11dd8:	df02      	svc	2
	...

00011ddc <adv_setup>:
{
   11ddc:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
   11dde:	4a39      	ldr	r2, [pc, #228]	; (11ec4 <adv_setup+0xe8>)
   11de0:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
	    _radio.advertiser.adv_data.last) {
   11de4:	f892 2076 	ldrb.w	r2, [r2, #118]	; 0x76
	if (_radio.advertiser.adv_data.first !=
   11de8:	4293      	cmp	r3, r2
   11dea:	d037      	beq.n	11e5c <adv_setup+0x80>
		first = _radio.advertiser.adv_data.first + 1;
   11dec:	3301      	adds	r3, #1
   11dee:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   11df0:	2b02      	cmp	r3, #2
   11df2:	d031      	beq.n	11e58 <adv_setup+0x7c>
		_radio.advertiser.adv_data.first = first;
   11df4:	4a33      	ldr	r2, [pc, #204]	; (11ec4 <adv_setup+0xe8>)
   11df6:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
		upd = 1;
   11dfa:	2101      	movs	r1, #1
	if (_radio.advertiser.scan_data.first != _radio.
   11dfc:	4a31      	ldr	r2, [pc, #196]	; (11ec4 <adv_setup+0xe8>)
   11dfe:	f892 30c5 	ldrb.w	r3, [r2, #197]	; 0xc5
	    advertiser.scan_data.last) {
   11e02:	f892 20c6 	ldrb.w	r2, [r2, #198]	; 0xc6
	if (_radio.advertiser.scan_data.first != _radio.
   11e06:	4293      	cmp	r3, r2
   11e08:	d007      	beq.n	11e1a <adv_setup+0x3e>
		first = _radio.advertiser.scan_data.first + 1;
   11e0a:	3301      	adds	r3, #1
   11e0c:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   11e0e:	2b02      	cmp	r3, #2
   11e10:	d026      	beq.n	11e60 <adv_setup+0x84>
		_radio.advertiser.scan_data.first = first;
   11e12:	4a2c      	ldr	r2, [pc, #176]	; (11ec4 <adv_setup+0xe8>)
   11e14:	f882 30c5 	strb.w	r3, [r2, #197]	; 0xc5
		upd = 1;
   11e18:	2101      	movs	r1, #1
			_radio.advertiser.adv_data.first];
   11e1a:	4c2a      	ldr	r4, [pc, #168]	; (11ec4 <adv_setup+0xe8>)
   11e1c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
	pdu = (struct pdu_adv *)
   11e20:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   11e24:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   11e28:	3320      	adds	r3, #32
   11e2a:	441c      	add	r4, r3
   11e2c:	1de5      	adds	r5, r4, #7
	if (upd) {
   11e2e:	b9c9      	cbnz	r1, 11e64 <adv_setup+0x88>
	radio_pkt_tx_set(pdu);
   11e30:	4628      	mov	r0, r5
   11e32:	f7fc fe61 	bl	eaf8 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   11e36:	79e3      	ldrb	r3, [r4, #7]
   11e38:	f003 030f 	and.w	r3, r3, #15
   11e3c:	2b02      	cmp	r3, #2
   11e3e:	d020      	beq.n	11e82 <adv_setup+0xa6>
   11e40:	2b07      	cmp	r3, #7
   11e42:	d01e      	beq.n	11e82 <adv_setup+0xa6>
		_radio.state = STATE_TX;
   11e44:	2202      	movs	r2, #2
   11e46:	4b1f      	ldr	r3, [pc, #124]	; (11ec4 <adv_setup+0xe8>)
   11e48:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   11e4a:	2096      	movs	r0, #150	; 0x96
   11e4c:	f7fc ff7a 	bl	ed44 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   11e50:	2000      	movs	r0, #0
   11e52:	f7fc fec5 	bl	ebe0 <radio_switch_complete_and_rx>
   11e56:	e019      	b.n	11e8c <adv_setup+0xb0>
			first = 0;
   11e58:	2300      	movs	r3, #0
   11e5a:	e7cb      	b.n	11df4 <adv_setup+0x18>
	u8_t upd = 0;
   11e5c:	2100      	movs	r1, #0
   11e5e:	e7cd      	b.n	11dfc <adv_setup+0x20>
			first = 0;
   11e60:	2300      	movs	r3, #0
   11e62:	e7d6      	b.n	11e12 <adv_setup+0x36>
			_radio.advertiser.scan_data.first];
   11e64:	4817      	ldr	r0, [pc, #92]	; (11ec4 <adv_setup+0xe8>)
   11e66:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
   11e6a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   11e6e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   11e72:	3370      	adds	r3, #112	; 0x70
   11e74:	4418      	add	r0, r3
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
   11e76:	2206      	movs	r2, #6
   11e78:	1ca9      	adds	r1, r5, #2
   11e7a:	3009      	adds	r0, #9
   11e7c:	f7ee fa20 	bl	2c0 <memcpy>
   11e80:	e7d6      	b.n	11e30 <adv_setup+0x54>
		_radio.state = STATE_CLOSE;
   11e82:	2203      	movs	r2, #3
   11e84:	4b0f      	ldr	r3, [pc, #60]	; (11ec4 <adv_setup+0xe8>)
   11e86:	741a      	strb	r2, [r3, #16]
		radio_switch_complete_and_disable();
   11e88:	f7fc feba 	bl	ec00 <radio_switch_complete_and_disable>
	bitmap = _radio.advertiser.chan_map_current;
   11e8c:	4b0d      	ldr	r3, [pc, #52]	; (11ec4 <adv_setup+0xe8>)
   11e8e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   11e92:	f3c2 0142 	ubfx	r1, r2, #1, #3
   11e96:	b2ca      	uxtb	r2, r1
   11e98:	4613      	mov	r3, r2
	chan = 0;
   11e9a:	2000      	movs	r0, #0
	while ((bitmap & 0x01) == 0) {
   11e9c:	e002      	b.n	11ea4 <adv_setup+0xc8>
		chan++;
   11e9e:	3001      	adds	r0, #1
   11ea0:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
   11ea2:	085b      	lsrs	r3, r3, #1
	while ((bitmap & 0x01) == 0) {
   11ea4:	f013 0f01 	tst.w	r3, #1
   11ea8:	d0f9      	beq.n	11e9e <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
   11eaa:	3a01      	subs	r2, #1
	_radio.advertiser.chan_map_current &=
   11eac:	4b05      	ldr	r3, [pc, #20]	; (11ec4 <adv_setup+0xe8>)
   11eae:	400a      	ands	r2, r1
   11eb0:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   11eb4:	f362 0143 	bfi	r1, r2, #1, #3
   11eb8:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	chan_set(37 + chan);
   11ebc:	3025      	adds	r0, #37	; 0x25
   11ebe:	f7ff ff61 	bl	11d84 <chan_set>
   11ec2:	bd38      	pop	{r3, r4, r5, pc}
   11ec4:	20000dec 	.word	0x20000dec

00011ec8 <ticker_stop_adv_stop>:
	if (status != TICKER_STATUS_SUCCESS) {
   11ec8:	b158      	cbz	r0, 11ee2 <ticker_stop_adv_stop+0x1a>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   11eca:	4b6c      	ldr	r3, [pc, #432]	; (1207c <ticker_stop_adv_stop+0x1b4>)
   11ecc:	7b9b      	ldrb	r3, [r3, #14]
   11ece:	b2db      	uxtb	r3, r3
   11ed0:	2b05      	cmp	r3, #5
   11ed2:	d100      	bne.n	11ed6 <ticker_stop_adv_stop+0xe>
   11ed4:	4770      	bx	lr
   11ed6:	4040      	eors	r0, r0
   11ed8:	f380 8811 	msr	BASEPRI, r0
   11edc:	f04f 0004 	mov.w	r0, #4
   11ee0:	df02      	svc	2
{
   11ee2:	b500      	push	{lr}
   11ee4:	b085      	sub	sp, #20
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   11ee6:	4b65      	ldr	r3, [pc, #404]	; (1207c <ticker_stop_adv_stop+0x1b4>)
   11ee8:	7b1b      	ldrb	r3, [r3, #12]
   11eea:	b2db      	uxtb	r3, r3
   11eec:	2b05      	cmp	r3, #5
   11eee:	d010      	beq.n	11f12 <ticker_stop_adv_stop+0x4a>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
   11ef0:	4b62      	ldr	r3, [pc, #392]	; (1207c <ticker_stop_adv_stop+0x1b4>)
   11ef2:	7b5b      	ldrb	r3, [r3, #13]
   11ef4:	b2db      	uxtb	r3, r3
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   11ef6:	2b05      	cmp	r3, #5
   11ef8:	d00b      	beq.n	11f12 <ticker_stop_adv_stop+0x4a>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   11efa:	4b61      	ldr	r3, [pc, #388]	; (12080 <ticker_stop_adv_stop+0x1b8>)
   11efc:	2200      	movs	r2, #0
   11efe:	4611      	mov	r1, r2
   11f00:	2001      	movs	r0, #1
   11f02:	f7fc fac1 	bl	e488 <mayfly_enqueue>
	LL_ASSERT(!retval);
   11f06:	2800      	cmp	r0, #0
   11f08:	f040 80b1 	bne.w	1206e <ticker_stop_adv_stop+0x1a6>
}
   11f0c:	b005      	add	sp, #20
   11f0e:	f85d fb04 	ldr.w	pc, [sp], #4
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11f12:	ab04      	add	r3, sp, #16
   11f14:	2202      	movs	r2, #2
   11f16:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11f1a:	9300      	str	r3, [sp, #0]
   11f1c:	4b59      	ldr	r3, [pc, #356]	; (12084 <ticker_stop_adv_stop+0x1bc>)
   11f1e:	2200      	movs	r2, #0
   11f20:	2101      	movs	r1, #1
   11f22:	4610      	mov	r0, r2
   11f24:	f7fe f95c 	bl	101e0 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   11f28:	2802      	cmp	r0, #2
   11f2a:	d02c      	beq.n	11f86 <ticker_stop_adv_stop+0xbe>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   11f2c:	9b02      	ldr	r3, [sp, #8]
   11f2e:	2b00      	cmp	r3, #0
   11f30:	d17e      	bne.n	12030 <ticker_stop_adv_stop+0x168>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11f32:	2302      	movs	r3, #2
   11f34:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   11f36:	4b51      	ldr	r3, [pc, #324]	; (1207c <ticker_stop_adv_stop+0x1b4>)
   11f38:	7b1b      	ldrb	r3, [r3, #12]
   11f3a:	2b00      	cmp	r3, #0
   11f3c:	d031      	beq.n	11fa2 <ticker_stop_adv_stop+0xda>
		_radio.ticker_id_prepare = 0;
   11f3e:	2000      	movs	r0, #0
   11f40:	4b4e      	ldr	r3, [pc, #312]	; (1207c <ticker_stop_adv_stop+0x1b4>)
   11f42:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11f44:	ab03      	add	r3, sp, #12
   11f46:	9300      	str	r3, [sp, #0]
   11f48:	4b4e      	ldr	r3, [pc, #312]	; (12084 <ticker_stop_adv_stop+0x1bc>)
   11f4a:	2201      	movs	r2, #1
   11f4c:	4611      	mov	r1, r2
   11f4e:	f7fe f947 	bl	101e0 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   11f52:	2802      	cmp	r0, #2
   11f54:	d02b      	beq.n	11fae <ticker_stop_adv_stop+0xe6>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   11f56:	9b03      	ldr	r3, [sp, #12]
   11f58:	2b00      	cmp	r3, #0
   11f5a:	d144      	bne.n	11fe6 <ticker_stop_adv_stop+0x11e>
			if (_radio.advertiser.hdr.ticks_active_to_start >
   11f5c:	4b47      	ldr	r3, [pc, #284]	; (1207c <ticker_stop_adv_stop+0x1b4>)
   11f5e:	699a      	ldr	r2, [r3, #24]
			    (_radio.advertiser.hdr.ticks_xtal_to_start &
   11f60:	695b      	ldr	r3, [r3, #20]
   11f62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
   11f66:	429a      	cmp	r2, r3
   11f68:	d92f      	bls.n	11fca <ticker_stop_adv_stop+0x102>
				retval = mayfly_enqueue(
   11f6a:	4b47      	ldr	r3, [pc, #284]	; (12088 <ticker_stop_adv_stop+0x1c0>)
   11f6c:	2200      	movs	r2, #0
   11f6e:	4611      	mov	r1, r2
   11f70:	2001      	movs	r0, #1
   11f72:	f7fc fa89 	bl	e488 <mayfly_enqueue>
				LL_ASSERT(!retval);
   11f76:	2800      	cmp	r0, #0
   11f78:	d0bf      	beq.n	11efa <ticker_stop_adv_stop+0x32>
   11f7a:	4040      	eors	r0, r0
   11f7c:	f380 8811 	msr	BASEPRI, r0
   11f80:	f04f 0004 	mov.w	r0, #4
   11f84:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   11f86:	2201      	movs	r2, #1
   11f88:	4611      	mov	r1, r2
   11f8a:	4610      	mov	r0, r2
   11f8c:	f7fc fa3e 	bl	e40c <mayfly_enable>
   11f90:	e003      	b.n	11f9a <ticker_stop_adv_stop+0xd2>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   11f92:	2101      	movs	r1, #1
   11f94:	2000      	movs	r0, #0
   11f96:	f7fe f9df 	bl	10358 <ticker_job_sched>
		while (ret_cb == TICKER_STATUS_BUSY) {
   11f9a:	9b02      	ldr	r3, [sp, #8]
   11f9c:	2b02      	cmp	r3, #2
   11f9e:	d0f8      	beq.n	11f92 <ticker_stop_adv_stop+0xca>
   11fa0:	e7c4      	b.n	11f2c <ticker_stop_adv_stop+0x64>
		LL_ASSERT(_radio.ticker_id_prepare);
   11fa2:	4040      	eors	r0, r0
   11fa4:	f380 8811 	msr	BASEPRI, r0
   11fa8:	f04f 0004 	mov.w	r0, #4
   11fac:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   11fae:	2201      	movs	r2, #1
   11fb0:	4611      	mov	r1, r2
   11fb2:	4610      	mov	r0, r2
   11fb4:	f7fc fa2a 	bl	e40c <mayfly_enable>
   11fb8:	e003      	b.n	11fc2 <ticker_stop_adv_stop+0xfa>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   11fba:	2101      	movs	r1, #1
   11fbc:	2000      	movs	r0, #0
   11fbe:	f7fe f9cb 	bl	10358 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   11fc2:	9b03      	ldr	r3, [sp, #12]
   11fc4:	2b02      	cmp	r3, #2
   11fc6:	d0f8      	beq.n	11fba <ticker_stop_adv_stop+0xf2>
   11fc8:	e7c5      	b.n	11f56 <ticker_stop_adv_stop+0x8e>
				retval = mayfly_enqueue(
   11fca:	4b30      	ldr	r3, [pc, #192]	; (1208c <ticker_stop_adv_stop+0x1c4>)
   11fcc:	2200      	movs	r2, #0
   11fce:	4611      	mov	r1, r2
   11fd0:	2001      	movs	r0, #1
   11fd2:	f7fc fa59 	bl	e488 <mayfly_enqueue>
				LL_ASSERT(!retval);
   11fd6:	2800      	cmp	r0, #0
   11fd8:	d08f      	beq.n	11efa <ticker_stop_adv_stop+0x32>
   11fda:	4040      	eors	r0, r0
   11fdc:	f380 8811 	msr	BASEPRI, r0
   11fe0:	f04f 0004 	mov.w	r0, #4
   11fe4:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   11fe6:	9b03      	ldr	r3, [sp, #12]
   11fe8:	2b01      	cmp	r3, #1
   11fea:	d11b      	bne.n	12024 <ticker_stop_adv_stop+0x15c>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   11fec:	4b26      	ldr	r3, [pc, #152]	; (12088 <ticker_stop_adv_stop+0x1c0>)
   11fee:	2200      	movs	r2, #0
   11ff0:	4611      	mov	r1, r2
   11ff2:	2001      	movs	r0, #1
   11ff4:	f7fc fa48 	bl	e488 <mayfly_enqueue>
			LL_ASSERT(!retval);
   11ff8:	b970      	cbnz	r0, 12018 <ticker_stop_adv_stop+0x150>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   11ffa:	4b24      	ldr	r3, [pc, #144]	; (1208c <ticker_stop_adv_stop+0x1c4>)
   11ffc:	2200      	movs	r2, #0
   11ffe:	4611      	mov	r1, r2
   12000:	2001      	movs	r0, #1
   12002:	f7fc fa41 	bl	e488 <mayfly_enqueue>
			LL_ASSERT(!retval);
   12006:	2800      	cmp	r0, #0
   12008:	f43f af77 	beq.w	11efa <ticker_stop_adv_stop+0x32>
   1200c:	4040      	eors	r0, r0
   1200e:	f380 8811 	msr	BASEPRI, r0
   12012:	f04f 0004 	mov.w	r0, #4
   12016:	df02      	svc	2
			LL_ASSERT(!retval);
   12018:	4040      	eors	r0, r0
   1201a:	f380 8811 	msr	BASEPRI, r0
   1201e:	f04f 0004 	mov.w	r0, #4
   12022:	df02      	svc	2
			LL_ASSERT(0);
   12024:	4040      	eors	r0, r0
   12026:	f380 8811 	msr	BASEPRI, r0
   1202a:	f04f 0004 	mov.w	r0, #4
   1202e:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   12030:	9b02      	ldr	r3, [sp, #8]
   12032:	2b01      	cmp	r3, #1
   12034:	d115      	bne.n	12062 <ticker_stop_adv_stop+0x19a>
		if (_radio.role != ROLE_NONE) {
   12036:	4b11      	ldr	r3, [pc, #68]	; (1207c <ticker_stop_adv_stop+0x1b4>)
   12038:	7bdb      	ldrb	r3, [r3, #15]
   1203a:	2b00      	cmp	r3, #0
   1203c:	f43f af5d 	beq.w	11efa <ticker_stop_adv_stop+0x32>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   12040:	4b13      	ldr	r3, [pc, #76]	; (12090 <ticker_stop_adv_stop+0x1c8>)
   12042:	2204      	movs	r2, #4
   12044:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12046:	2200      	movs	r2, #0
   12048:	4611      	mov	r1, r2
   1204a:	2001      	movs	r0, #1
   1204c:	f7fc fa1c 	bl	e488 <mayfly_enqueue>
			LL_ASSERT(!retval);
   12050:	2800      	cmp	r0, #0
   12052:	f43f af52 	beq.w	11efa <ticker_stop_adv_stop+0x32>
   12056:	4040      	eors	r0, r0
   12058:	f380 8811 	msr	BASEPRI, r0
   1205c:	f04f 0004 	mov.w	r0, #4
   12060:	df02      	svc	2
		LL_ASSERT(0);
   12062:	4040      	eors	r0, r0
   12064:	f380 8811 	msr	BASEPRI, r0
   12068:	f04f 0004 	mov.w	r0, #4
   1206c:	df02      	svc	2
	LL_ASSERT(!retval);
   1206e:	4040      	eors	r0, r0
   12070:	f380 8811 	msr	BASEPRI, r0
   12074:	f04f 0004 	mov.w	r0, #4
   12078:	df02      	svc	2
   1207a:	bf00      	nop
   1207c:	20000dec 	.word	0x20000dec
   12080:	2000bb10 	.word	0x2000bb10
   12084:	00010a8d 	.word	0x00010a8d
   12088:	2000bb40 	.word	0x2000bb40
   1208c:	2000bc00 	.word	0x2000bc00
   12090:	2000bb70 	.word	0x2000bb70
   12094:	00000000 	.word	0x00000000

00012098 <sched_free_win_offset_calc>:
{
   12098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1209c:	b091      	sub	sp, #68	; 0x44
   1209e:	9009      	str	r0, [sp, #36]	; 0x24
   120a0:	910a      	str	r1, [sp, #40]	; 0x28
   120a2:	9207      	str	r2, [sp, #28]
   120a4:	469b      	mov	fp, r3
   120a6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   120a8:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
	if (conn_curr->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   120ac:	6803      	ldr	r3, [r0, #0]
   120ae:	2b00      	cmp	r3, #0
   120b0:	db0f      	blt.n	120d2 <sched_free_win_offset_calc+0x3a>
	u32_t ticks_prepare_reduced = 0;
   120b2:	2300      	movs	r3, #0
   120b4:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   120b6:	27ff      	movs	r7, #255	; 0xff
   120b8:	f88d 7037 	strb.w	r7, [sp, #55]	; 0x37
		ticks_anchor_prev = offset_index = _win_offset = 0;
   120bc:	2300      	movs	r3, #0
   120be:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   120c2:	930f      	str	r3, [sp, #60]	; 0x3c
   120c4:	930e      	str	r3, [sp, #56]	; 0x38
		ticks_anchor_prev = offset_index = _win_offset = 0;
   120c6:	461c      	mov	r4, r3
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   120c8:	9706      	str	r7, [sp, #24]
	ticks_slot_prev_abs = 0;
   120ca:	461e      	mov	r6, r3
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   120cc:	9308      	str	r3, [sp, #32]
		ticks_anchor_prev = offset_index = _win_offset = 0;
   120ce:	4698      	mov	r8, r3
   120d0:	e06d      	b.n	121ae <sched_free_win_offset_calc+0x116>
				conn_curr->hdr.ticks_preempt_to_start;
   120d2:	6881      	ldr	r1, [r0, #8]
				conn_curr->hdr.ticks_active_to_start :
   120d4:	6842      	ldr	r2, [r0, #4]
		ticks_prepare_reduced = ((conn_curr->hdr.ticks_xtal_to_start &
   120d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   120da:	4291      	cmp	r1, r2
   120dc:	bf2c      	ite	cs
   120de:	1a5b      	subcs	r3, r3, r1
   120e0:	1a9b      	subcc	r3, r3, r2
   120e2:	930b      	str	r3, [sp, #44]	; 0x2c
   120e4:	e7e7      	b.n	120b6 <sched_free_win_offset_calc+0x1e>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   120e6:	2101      	movs	r1, #1
   120e8:	2000      	movs	r0, #0
   120ea:	f7fe f935 	bl	10358 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   120ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   120f0:	2b02      	cmp	r3, #2
   120f2:	d0f8      	beq.n	120e6 <sched_free_win_offset_calc+0x4e>
   120f4:	e06c      	b.n	121d0 <sched_free_win_offset_calc+0x138>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   120f6:	4040      	eors	r0, r0
   120f8:	f380 8811 	msr	BASEPRI, r0
   120fc:	f04f 0004 	mov.w	r0, #4
   12100:	df02      	svc	2
			LL_ASSERT(0);
   12102:	4040      	eors	r0, r0
   12104:	f380 8811 	msr	BASEPRI, r0
   12108:	f04f 0004 	mov.w	r0, #4
   1210c:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   1210e:	f8d9 1008 	ldr.w	r1, [r9, #8]
					conn->hdr.ticks_active_to_start :
   12112:	f8d9 2004 	ldr.w	r2, [r9, #4]
					((conn->hdr.ticks_xtal_to_start &
   12116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   1211a:	4291      	cmp	r1, r2
   1211c:	bf2c      	ite	cs
   1211e:	ebc3 0301 	rsbcs	r3, r3, r1
   12122:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   12126:	9a05      	ldr	r2, [sp, #20]
   12128:	441a      	add	r2, r3
   1212a:	9205      	str	r2, [sp, #20]
   1212c:	e085      	b.n	1223a <sched_free_win_offset_calc+0x1a2>
					memcpy(win_offset +
   1212e:	2202      	movs	r2, #2
   12130:	a90d      	add	r1, sp, #52	; 0x34
   12132:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   12136:	f7ee f8c3 	bl	2c0 <memcpy>
					offset_index++;
   1213a:	3401      	adds	r4, #1
   1213c:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
   1213e:	3728      	adds	r7, #40	; 0x28
				while ((offset_index < *offset_max) &&
   12140:	782b      	ldrb	r3, [r5, #0]
   12142:	429c      	cmp	r4, r3
   12144:	d21f      	bcs.n	12186 <sched_free_win_offset_calc+0xee>
				       (ticker_ticks_diff_get(ticks_to_expire_normal,
   12146:	4639      	mov	r1, r7
   12148:	9805      	ldr	r0, [sp, #20]
   1214a:	f7fe f919 	bl	10380 <ticker_ticks_diff_get>
					 conn->hdr.ticks_slot))) {
   1214e:	f8d9 300c 	ldr.w	r3, [r9, #12]
							    625 + 1250) +
   12152:	4433      	add	r3, r6
   12154:	3364      	adds	r3, #100	; 0x64
				while ((offset_index < *offset_max) &&
   12156:	4298      	cmp	r0, r3
   12158:	d315      	bcc.n	12186 <sched_free_win_offset_calc+0xee>
						TICKER_TICKS_TO_US(ticks_to_expire_prev +
   1215a:	19bb      	adds	r3, r7, r6
   1215c:	485a      	ldr	r0, [pc, #360]	; (122c8 <sched_free_win_offset_calc+0x230>)
   1215e:	fba3 0100 	umull	r0, r1, r3, r0
   12162:	2207      	movs	r2, #7
   12164:	fb02 1103 	mla	r1, r2, r3, r1
   12168:	a355      	add	r3, pc, #340	; (adr r3, 122c0 <sched_free_win_offset_calc+0x228>)
   1216a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1216e:	f7ee ffc5 	bl	10fc <__aeabi_uldivmod>
								   ticks_slot_prev_abs) / 1250;
   12172:	4b56      	ldr	r3, [pc, #344]	; (122cc <sched_free_win_offset_calc+0x234>)
   12174:	fba3 3000 	umull	r3, r0, r3, r0
					_win_offset =
   12178:	f3c0 208f 	ubfx	r0, r0, #10, #16
   1217c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
					if (_win_offset >= conn_interval) {
   12180:	4558      	cmp	r0, fp
   12182:	d3d4      	bcc.n	1212e <sched_free_win_offset_calc+0x96>
						ticks_to_expire_prev = 0;
   12184:	2700      	movs	r7, #0
				*ticks_to_offset_next = ticks_to_expire_prev;
   12186:	9b07      	ldr	r3, [sp, #28]
   12188:	601f      	str	r7, [r3, #0]
				if (_win_offset >= conn_interval) {
   1218a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1218e:	459b      	cmp	fp, r3
   12190:	d95e      	bls.n	12250 <sched_free_win_offset_calc+0x1b8>
			ticks_anchor_prev = ticks_anchor;
   12192:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
			ticker_id_prev = ticker_id;
   12196:	f89d 7037 	ldrb.w	r7, [sp, #55]	; 0x37
				conn->hdr.ticks_slot;
   1219a:	f8d9 600c 	ldr.w	r6, [r9, #12]
			ticks_slot_prev_abs =
   1219e:	3664      	adds	r6, #100	; 0x64
			ticks_to_expire_prev = ticks_to_expire_normal;
   121a0:	9b05      	ldr	r3, [sp, #20]
   121a2:	9308      	str	r3, [sp, #32]
   121a4:	e000      	b.n	121a8 <sched_free_win_offset_calc+0x110>
			ticker_id_other = ticker_id;
   121a6:	9206      	str	r2, [sp, #24]
	} while (offset_index < *offset_max);
   121a8:	782b      	ldrb	r3, [r5, #0]
   121aa:	429c      	cmp	r4, r3
   121ac:	d251      	bcs.n	12252 <sched_free_win_offset_calc+0x1ba>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   121ae:	2302      	movs	r3, #2
   121b0:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   121b2:	ab0c      	add	r3, sp, #48	; 0x30
   121b4:	9302      	str	r3, [sp, #8]
   121b6:	4b46      	ldr	r3, [pc, #280]	; (122d0 <sched_free_win_offset_calc+0x238>)
   121b8:	9301      	str	r3, [sp, #4]
   121ba:	ab0e      	add	r3, sp, #56	; 0x38
   121bc:	9300      	str	r3, [sp, #0]
   121be:	ab0f      	add	r3, sp, #60	; 0x3c
   121c0:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   121c4:	2101      	movs	r1, #1
   121c6:	2000      	movs	r0, #0
   121c8:	f7fe f846 	bl	10258 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   121cc:	2802      	cmp	r0, #2
   121ce:	d08e      	beq.n	120ee <sched_free_win_offset_calc+0x56>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   121d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   121d2:	2b00      	cmp	r3, #0
   121d4:	d18f      	bne.n	120f6 <sched_free_win_offset_calc+0x5e>
		if (ticker_id == 0xff) {
   121d6:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   121da:	2aff      	cmp	r2, #255	; 0xff
   121dc:	d039      	beq.n	12252 <sched_free_win_offset_calc+0x1ba>
		if ((ticker_id_prev != 0xff) &&
   121de:	2fff      	cmp	r7, #255	; 0xff
   121e0:	d002      	beq.n	121e8 <sched_free_win_offset_calc+0x150>
		    (ticks_anchor != ticks_anchor_prev)) {
   121e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		if ((ticker_id_prev != 0xff) &&
   121e4:	4598      	cmp	r8, r3
   121e6:	d18c      	bne.n	12102 <sched_free_win_offset_calc+0x6a>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   121e8:	2a05      	cmp	r2, #5
   121ea:	d9dd      	bls.n	121a8 <sched_free_win_offset_calc+0x110>
				  _radio.connection_count)) {
   121ec:	4b39      	ldr	r3, [pc, #228]	; (122d4 <sched_free_win_offset_calc+0x23c>)
   121ee:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   121f2:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   121f4:	429a      	cmp	r2, r3
   121f6:	dad7      	bge.n	121a8 <sched_free_win_offset_calc+0x110>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
   121f8:	2a06      	cmp	r2, #6
   121fa:	d9d4      	bls.n	121a6 <sched_free_win_offset_calc+0x10e>
		if (ticker_id_other != 0xFF) {
   121fc:	9b06      	ldr	r3, [sp, #24]
   121fe:	2bff      	cmp	r3, #255	; 0xff
   12200:	d127      	bne.n	12252 <sched_free_win_offset_calc+0x1ba>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   12202:	3a07      	subs	r2, #7
   12204:	b292      	uxth	r2, r2
   12206:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1220a:	4b32      	ldr	r3, [pc, #200]	; (122d4 <sched_free_win_offset_calc+0x23c>)
   1220c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   12210:	f7fc fab8 	bl	e784 <mem_get>
   12214:	4681      	mov	r9, r0
		if ((conn != conn_curr) && (is_select || !conn->role)) {
   12216:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12218:	4283      	cmp	r3, r0
   1221a:	d0c5      	beq.n	121a8 <sched_free_win_offset_calc+0x110>
   1221c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1221e:	b91b      	cbnz	r3, 12228 <sched_free_win_offset_calc+0x190>
   12220:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12224:	2b00      	cmp	r3, #0
   12226:	dbbf      	blt.n	121a8 <sched_free_win_offset_calc+0x110>
				ticks_to_expire + ticks_prepare_reduced;
   12228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			u32_t ticks_to_expire_normal =
   1222a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1222c:	18d3      	adds	r3, r2, r3
   1222e:	9305      	str	r3, [sp, #20]
			if (conn->hdr.ticks_xtal_to_start &
   12230:	f8d9 3000 	ldr.w	r3, [r9]
   12234:	2b00      	cmp	r3, #0
   12236:	f6ff af6a 	blt.w	1210e <sched_free_win_offset_calc+0x76>
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1223a:	9b07      	ldr	r3, [sp, #28]
   1223c:	681f      	ldr	r7, [r3, #0]
   1223e:	9b05      	ldr	r3, [sp, #20]
   12240:	42bb      	cmp	r3, r7
   12242:	d9a6      	bls.n	12192 <sched_free_win_offset_calc+0xfa>
				if (ticks_to_expire_prev < *ticks_to_offset_next) {
   12244:	9a08      	ldr	r2, [sp, #32]
   12246:	42ba      	cmp	r2, r7
   12248:	f4ff af7a 	bcc.w	12140 <sched_free_win_offset_calc+0xa8>
   1224c:	4617      	mov	r7, r2
   1224e:	e777      	b.n	12140 <sched_free_win_offset_calc+0xa8>
   12250:	9708      	str	r7, [sp, #32]
	if (ticker_id == 0xFF) {
   12252:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   12256:	2bff      	cmp	r3, #255	; 0xff
   12258:	d003      	beq.n	12262 <sched_free_win_offset_calc+0x1ca>
	*offset_max = offset_index;
   1225a:	702c      	strb	r4, [r5, #0]
}
   1225c:	b011      	add	sp, #68	; 0x44
   1225e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   12262:	9b07      	ldr	r3, [sp, #28]
   12264:	681f      	ldr	r7, [r3, #0]
   12266:	9a08      	ldr	r2, [sp, #32]
   12268:	42ba      	cmp	r2, r7
   1226a:	d300      	bcc.n	1226e <sched_free_win_offset_calc+0x1d6>
   1226c:	4617      	mov	r7, r2
		while (offset_index < *offset_max) {
   1226e:	782b      	ldrb	r3, [r5, #0]
   12270:	429c      	cmp	r4, r3
   12272:	d21f      	bcs.n	122b4 <sched_free_win_offset_calc+0x21c>
				TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12274:	19bb      	adds	r3, r7, r6
   12276:	4814      	ldr	r0, [pc, #80]	; (122c8 <sched_free_win_offset_calc+0x230>)
   12278:	fba3 0100 	umull	r0, r1, r3, r0
   1227c:	2207      	movs	r2, #7
   1227e:	fb02 1103 	mla	r1, r2, r3, r1
   12282:	a30f      	add	r3, pc, #60	; (adr r3, 122c0 <sched_free_win_offset_calc+0x228>)
   12284:	e9d3 2300 	ldrd	r2, r3, [r3]
   12288:	f7ee ff38 	bl	10fc <__aeabi_uldivmod>
						   ticks_slot_prev_abs) / 1250;
   1228c:	4b0f      	ldr	r3, [pc, #60]	; (122cc <sched_free_win_offset_calc+0x234>)
   1228e:	fba3 2300 	umull	r2, r3, r3, r0
			_win_offset =
   12292:	f3c3 238f 	ubfx	r3, r3, #10, #16
   12296:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			if (_win_offset >= conn_interval) {
   1229a:	459b      	cmp	fp, r3
   1229c:	d909      	bls.n	122b2 <sched_free_win_offset_calc+0x21a>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
   1229e:	2202      	movs	r2, #2
   122a0:	a90d      	add	r1, sp, #52	; 0x34
   122a2:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   122a6:	f7ee f80b 	bl	2c0 <memcpy>
			offset_index++;
   122aa:	3401      	adds	r4, #1
   122ac:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += TICKER_US_TO_TICKS(1250);
   122ae:	3728      	adds	r7, #40	; 0x28
   122b0:	e7dd      	b.n	1226e <sched_free_win_offset_calc+0x1d6>
				ticks_to_expire_prev = 0;
   122b2:	2700      	movs	r7, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   122b4:	9b07      	ldr	r3, [sp, #28]
   122b6:	601f      	str	r7, [r3, #0]
   122b8:	e7cf      	b.n	1225a <sched_free_win_offset_calc+0x1c2>
   122ba:	bf00      	nop
   122bc:	f3af 8000 	nop.w
   122c0:	3b9aca00 	.word	0x3b9aca00
   122c4:	00000000 	.word	0x00000000
   122c8:	1afd498d 	.word	0x1afd498d
   122cc:	d1b71759 	.word	0xd1b71759
   122d0:	00010a8d 	.word	0x00010a8d
   122d4:	20000dec 	.word	0x20000dec

000122d8 <mayfly_sched_free_win_offset_calc>:
{
   122d8:	b500      	push	{lr}
   122da:	b085      	sub	sp, #20
	u32_t ticks_to_offset_default = 0;
   122dc:	2300      	movs	r3, #0
   122de:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
   122e0:	2306      	movs	r3, #6
   122e2:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
   122e6:	f990 301d 	ldrsb.w	r3, [r0, #29]
   122ea:	2b00      	cmp	r3, #0
   122ec:	db0e      	blt.n	1230c <mayfly_sched_free_win_offset_calc+0x34>
	ticks_to_offset_next = &ticks_to_offset_default;
   122ee:	aa03      	add	r2, sp, #12
				   (u8_t *)conn->llcp_conn_param.pdu_win_offset0);
   122f0:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
   122f4:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
   122f8:	9101      	str	r1, [sp, #4]
   122fa:	f10d 010b 	add.w	r1, sp, #11
   122fe:	9100      	str	r1, [sp, #0]
   12300:	2100      	movs	r1, #0
   12302:	f7ff fec9 	bl	12098 <sched_free_win_offset_calc>
}
   12306:	b005      	add	sp, #20
   12308:	f85d fb04 	ldr.w	pc, [sp], #4
			conn->slave.ticks_to_offset;
   1230c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		conn->llcp_conn_param.ticks_to_offset_next =
   1230e:	4602      	mov	r2, r0
   12310:	f842 3fe4 	str.w	r3, [r2, #228]!
   12314:	e7ec      	b.n	122f0 <mayfly_sched_free_win_offset_calc+0x18>
	...

00012318 <mayfly_sched_win_offset_select>:
{
   12318:	b570      	push	{r4, r5, r6, lr}
   1231a:	b088      	sub	sp, #32
   1231c:	4606      	mov	r6, r0
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
   1231e:	ac05      	add	r4, sp, #20
   12320:	2500      	movs	r5, #0
   12322:	9505      	str	r5, [sp, #20]
   12324:	9506      	str	r5, [sp, #24]
   12326:	9507      	str	r5, [sp, #28]
	u8_t offset_m_max = OFFSET_M_MAX;
   12328:	2306      	movs	r3, #6
   1232a:	f88d 3013 	strb.w	r3, [sp, #19]
		TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 * 1250);
   1232e:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
   12332:	4843      	ldr	r0, [pc, #268]	; (12440 <mayfly_sched_win_offset_select+0x128>)
   12334:	fba2 0100 	umull	r0, r1, r2, r0
   12338:	f240 1323 	movw	r3, #291	; 0x123
   1233c:	fb03 1102 	mla	r1, r3, r2, r1
   12340:	a33d      	add	r3, pc, #244	; (adr r3, 12438 <mayfly_sched_win_offset_select+0x120>)
   12342:	e9d3 2300 	ldrd	r2, r3, [r3]
   12346:	f7ee fed9 	bl	10fc <__aeabi_uldivmod>
   1234a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ticks_to_offset =
   1234e:	aa08      	add	r2, sp, #32
   12350:	f842 0d14 	str.w	r0, [r2, #-20]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
   12354:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   12358:	9401      	str	r4, [sp, #4]
   1235a:	f10d 0113 	add.w	r1, sp, #19
   1235e:	9100      	str	r1, [sp, #0]
   12360:	2101      	movs	r1, #1
   12362:	4630      	mov	r0, r6
   12364:	f7ff fe98 	bl	12098 <sched_free_win_offset_calc>
	u8_t has_offset_s = 0;
   12368:	462c      	mov	r4, r5
	while (offset_index_s < OFFSET_S_MAX) {
   1236a:	e018      	b.n	1239e <mayfly_sched_win_offset_select+0x86>
			offset_index_m++;
   1236c:	3301      	adds	r3, #1
   1236e:	b2db      	uxtb	r3, r3
		while (offset_index_m < offset_m_max) {
   12370:	f89d 1013 	ldrb.w	r1, [sp, #19]
   12374:	428b      	cmp	r3, r1
   12376:	d20e      	bcs.n	12396 <mayfly_sched_win_offset_select+0x7e>
			if (win_offset_s != 0xffff) {
   12378:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1237c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   12380:	4282      	cmp	r2, r0
   12382:	d0f3      	beq.n	1236c <mayfly_sched_win_offset_select+0x54>
				    win_offset_m[offset_index_m]) {
   12384:	a808      	add	r0, sp, #32
   12386:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   1238a:	f830 0c0c 	ldrh.w	r0, [r0, #-12]
				if (win_offset_s ==
   1238e:	4282      	cmp	r2, r0
   12390:	d001      	beq.n	12396 <mayfly_sched_win_offset_select+0x7e>
				has_offset_s = 1;
   12392:	2401      	movs	r4, #1
   12394:	e7ea      	b.n	1236c <mayfly_sched_win_offset_select+0x54>
		if (offset_index_m < offset_m_max) {
   12396:	428b      	cmp	r3, r1
   12398:	d30e      	bcc.n	123b8 <mayfly_sched_win_offset_select+0xa0>
		offset_index_s++;
   1239a:	3501      	adds	r5, #1
   1239c:	b2ed      	uxtb	r5, r5
	while (offset_index_s < OFFSET_S_MAX) {
   1239e:	2d05      	cmp	r5, #5
   123a0:	d80a      	bhi.n	123b8 <mayfly_sched_win_offset_select+0xa0>
		       ((u8_t *)&conn->llcp_conn_param.offset0 +
   123a2:	f106 01ce 	add.w	r1, r6, #206	; 0xce
		memcpy((u8_t *)&win_offset_s,
   123a6:	2202      	movs	r2, #2
   123a8:	eb01 0145 	add.w	r1, r1, r5, lsl #1
   123ac:	f10d 000a 	add.w	r0, sp, #10
   123b0:	f7ed ff86 	bl	2c0 <memcpy>
		u8_t offset_index_m = 0;
   123b4:	2300      	movs	r3, #0
		while (offset_index_m < offset_m_max) {
   123b6:	e7db      	b.n	12370 <mayfly_sched_win_offset_select+0x58>
	if (offset_index_s < OFFSET_S_MAX) {
   123b8:	2d05      	cmp	r5, #5
   123ba:	d91d      	bls.n	123f8 <mayfly_sched_win_offset_select+0xe0>
	} else if (!has_offset_s) {
   123bc:	b35c      	cbz	r4, 12416 <mayfly_sched_win_offset_select+0xfe>
		conn->llcp_ack = conn->llcp_req;
   123be:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
   123c2:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		_radio.conn_upd = NULL;
   123c6:	2200      	movs	r2, #0
   123c8:	4b1e      	ldr	r3, [pc, #120]	; (12444 <mayfly_sched_win_offset_select+0x12c>)
   123ca:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
   123ce:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   123d2:	f813 2c05 	ldrb.w	r2, [r3, #-5]
   123d6:	f042 0203 	orr.w	r2, r2, #3
   123da:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
   123de:	2203      	movs	r2, #3
   123e0:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->payload.llctrl.opcode =
   123e4:	2211      	movs	r2, #17
   123e6:	f803 2c02 	strb.w	r2, [r3, #-2]
			reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   123ea:	220f      	movs	r2, #15
   123ec:	f803 2c01 	strb.w	r2, [r3, #-1]
			error_code = 0x20; /* Unsupported parameter value */
   123f0:	2220      	movs	r2, #32
   123f2:	701a      	strb	r2, [r3, #0]
}
   123f4:	b008      	add	sp, #32
   123f6:	bd70      	pop	{r4, r5, r6, pc}
			win_offset_s * 1250;
   123f8:	a908      	add	r1, sp, #32
   123fa:	f831 2d16 	ldrh.w	r2, [r1, #-22]!
   123fe:	f240 43e2 	movw	r3, #1250	; 0x4e2
   12402:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   12406:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   1240a:	2202      	movs	r2, #2
   1240c:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   12410:	f7ed ff56 	bl	2c0 <memcpy>
   12414:	e7ee      	b.n	123f4 <mayfly_sched_win_offset_select+0xdc>
			win_offset_m[0] * 1250;
   12416:	a908      	add	r1, sp, #32
   12418:	f831 2d0c 	ldrh.w	r2, [r1, #-12]!
   1241c:	f240 43e2 	movw	r3, #1250	; 0x4e2
   12420:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   12424:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   12428:	2202      	movs	r2, #2
   1242a:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   1242e:	f7ed ff47 	bl	2c0 <memcpy>
   12432:	e7df      	b.n	123f4 <mayfly_sched_win_offset_select+0xdc>
   12434:	f3af 8000 	nop.w
   12438:	1afd498d 	.word	0x1afd498d
   1243c:	00000007 	.word	0x00000007
   12440:	09ce5400 	.word	0x09ce5400
   12444:	20000dec 	.word	0x20000dec

00012448 <sched_after_mstr_free_slot_get>:
{
   12448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1244c:	b08b      	sub	sp, #44	; 0x2c
   1244e:	4604      	mov	r4, r0
   12450:	468b      	mov	fp, r1
   12452:	4615      	mov	r5, r2
   12454:	469a      	mov	sl, r3
	ticker_id = ticker_id_prev = 0xff;
   12456:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1245a:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   1245e:	2300      	movs	r3, #0
   12460:	f8ca 3000 	str.w	r3, [sl]
   12464:	9308      	str	r3, [sp, #32]
	ticks_slot_prev_abs = 0;
   12466:	461f      	mov	r7, r3
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   12468:	9305      	str	r3, [sp, #20]
   1246a:	e01f      	b.n	124ac <sched_after_mstr_free_slot_get+0x64>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   1246c:	4621      	mov	r1, r4
   1246e:	2000      	movs	r0, #0
   12470:	f7fd ff72 	bl	10358 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12474:	9b07      	ldr	r3, [sp, #28]
   12476:	2b02      	cmp	r3, #2
   12478:	d0f8      	beq.n	1246c <sched_after_mstr_free_slot_get+0x24>
   1247a:	e028      	b.n	124ce <sched_after_mstr_free_slot_get+0x86>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   1247c:	4040      	eors	r0, r0
   1247e:	f380 8811 	msr	BASEPRI, r0
   12482:	f04f 0004 	mov.w	r0, #4
   12486:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   12488:	6881      	ldr	r1, [r0, #8]
					conn->hdr.ticks_active_to_start :
   1248a:	6842      	ldr	r2, [r0, #4]
					((conn->hdr.ticks_xtal_to_start &
   1248c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   12490:	4291      	cmp	r1, r2
   12492:	bf2c      	ite	cs
   12494:	ebc3 0301 	rsbcs	r3, r3, r1
   12498:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   1249c:	4499      	add	r9, r3
   1249e:	e03a      	b.n	12516 <sched_after_mstr_free_slot_get+0xce>
			ticker_id_prev = ticker_id;
   124a0:	f89d 8027 	ldrb.w	r8, [sp, #39]	; 0x27
				conn->hdr.ticks_slot;
   124a4:	68f7      	ldr	r7, [r6, #12]
			ticks_slot_prev_abs =
   124a6:	3727      	adds	r7, #39	; 0x27
			ticks_to_expire_prev = ticks_to_expire_normal;
   124a8:	f8cd 9014 	str.w	r9, [sp, #20]
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   124ac:	2302      	movs	r3, #2
   124ae:	9307      	str	r3, [sp, #28]
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   124b0:	ab07      	add	r3, sp, #28
   124b2:	9302      	str	r3, [sp, #8]
   124b4:	4b2c      	ldr	r3, [pc, #176]	; (12568 <sched_after_mstr_free_slot_get+0x120>)
   124b6:	9301      	str	r3, [sp, #4]
   124b8:	ab08      	add	r3, sp, #32
   124ba:	9300      	str	r3, [sp, #0]
   124bc:	462b      	mov	r3, r5
   124be:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   124c2:	4621      	mov	r1, r4
   124c4:	2000      	movs	r0, #0
   124c6:	f7fd fec7 	bl	10258 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   124ca:	2802      	cmp	r0, #2
   124cc:	d0d2      	beq.n	12474 <sched_after_mstr_free_slot_get+0x2c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   124ce:	9b07      	ldr	r3, [sp, #28]
   124d0:	2b00      	cmp	r3, #0
   124d2:	d1d3      	bne.n	1247c <sched_after_mstr_free_slot_get+0x34>
		if (ticker_id == 0xff) {
   124d4:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   124d8:	2aff      	cmp	r2, #255	; 0xff
   124da:	d028      	beq.n	1252e <sched_after_mstr_free_slot_get+0xe6>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   124dc:	2a06      	cmp	r2, #6
   124de:	d9e5      	bls.n	124ac <sched_after_mstr_free_slot_get+0x64>
				  _radio.connection_count)) {
   124e0:	4b22      	ldr	r3, [pc, #136]	; (1256c <sched_after_mstr_free_slot_get+0x124>)
   124e2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   124e6:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   124e8:	429a      	cmp	r2, r3
   124ea:	dadf      	bge.n	124ac <sched_after_mstr_free_slot_get+0x64>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   124ec:	3a07      	subs	r2, #7
   124ee:	b292      	uxth	r2, r2
   124f0:	f44f 71aa 	mov.w	r1, #340	; 0x154
   124f4:	4b1d      	ldr	r3, [pc, #116]	; (1256c <sched_after_mstr_free_slot_get+0x124>)
   124f6:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   124fa:	f7fc f943 	bl	e784 <mem_get>
		if (conn && !conn->role) {
   124fe:	4606      	mov	r6, r0
   12500:	2800      	cmp	r0, #0
   12502:	d0d3      	beq.n	124ac <sched_after_mstr_free_slot_get+0x64>
   12504:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12508:	2b00      	cmp	r3, #0
   1250a:	dbcf      	blt.n	124ac <sched_after_mstr_free_slot_get+0x64>
			u32_t ticks_to_expire_normal = ticks_to_expire;
   1250c:	f8dd 9020 	ldr.w	r9, [sp, #32]
			if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   12510:	6803      	ldr	r3, [r0, #0]
   12512:	2b00      	cmp	r3, #0
   12514:	dbb8      	blt.n	12488 <sched_after_mstr_free_slot_get+0x40>
			if ((ticker_id_prev != 0xFF) &&
   12516:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1251a:	d0c1      	beq.n	124a0 <sched_after_mstr_free_slot_get+0x58>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
   1251c:	9905      	ldr	r1, [sp, #20]
   1251e:	4648      	mov	r0, r9
   12520:	f7fd ff2e 	bl	10380 <ticker_ticks_diff_get>
			     (ticks_slot_prev_abs + ticks_slot_abs +
   12524:	eb07 030b 	add.w	r3, r7, fp
   12528:	3302      	adds	r3, #2
			if ((ticker_id_prev != 0xFF) &&
   1252a:	4298      	cmp	r0, r3
   1252c:	d9b8      	bls.n	124a0 <sched_after_mstr_free_slot_get+0x58>
	if (ticker_id_prev != 0xff) {
   1252e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   12532:	d010      	beq.n	12556 <sched_after_mstr_free_slot_get+0x10e>
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12534:	9b05      	ldr	r3, [sp, #20]
   12536:	443b      	add	r3, r7
   12538:	461f      	mov	r7, r3
   1253a:	480d      	ldr	r0, [pc, #52]	; (12570 <sched_after_mstr_free_slot_get+0x128>)
   1253c:	fba3 0100 	umull	r0, r1, r3, r0
   12540:	2307      	movs	r3, #7
   12542:	fb03 1107 	mla	r1, r3, r7, r1
   12546:	a306      	add	r3, pc, #24	; (adr r3, 12560 <sched_after_mstr_free_slot_get+0x118>)
   12548:	e9d3 2300 	ldrd	r2, r3, [r3]
   1254c:	f7ee fdd6 	bl	10fc <__aeabi_uldivmod>
						ticks_slot_prev_abs) +
   12550:	3020      	adds	r0, #32
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12552:	f8ca 0000 	str.w	r0, [sl]
}
   12556:	b00b      	add	sp, #44	; 0x2c
   12558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1255c:	f3af 8000 	nop.w
   12560:	3b9aca00 	.word	0x3b9aca00
   12564:	00000000 	.word	0x00000000
   12568:	00010a8d 	.word	0x00010a8d
   1256c:	20000dec 	.word	0x20000dec
   12570:	1afd498d 	.word	0x1afd498d
   12574:	00000000 	.word	0x00000000

00012578 <sched_after_mstr_free_offset_get>:
{
   12578:	b570      	push	{r4, r5, r6, lr}
   1257a:	b082      	sub	sp, #8
   1257c:	4606      	mov	r6, r0
   1257e:	4615      	mov	r5, r2
   12580:	461c      	mov	r4, r3
	u32_t ticks_anchor_offset = ticks_anchor;
   12582:	aa02      	add	r2, sp, #8
   12584:	f842 5d04 	str.w	r5, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
   12588:	3127      	adds	r1, #39	; 0x27
   1258a:	2001      	movs	r0, #1
   1258c:	f7ff ff5c 	bl	12448 <sched_after_mstr_free_slot_get>
	if (ticks_anchor_offset != ticks_anchor) {
   12590:	9801      	ldr	r0, [sp, #4]
   12592:	4285      	cmp	r5, r0
   12594:	d011      	beq.n	125ba <sched_after_mstr_free_offset_get+0x42>
			TICKER_TICKS_TO_US(ticker_ticks_diff_get(ticks_anchor_offset,
   12596:	4629      	mov	r1, r5
   12598:	f7fd fef2 	bl	10380 <ticker_ticks_diff_get>
   1259c:	4602      	mov	r2, r0
   1259e:	4810      	ldr	r0, [pc, #64]	; (125e0 <sched_after_mstr_free_offset_get+0x68>)
   125a0:	fba2 0100 	umull	r0, r1, r2, r0
   125a4:	2307      	movs	r3, #7
   125a6:	fb03 1102 	mla	r1, r3, r2, r1
   125aa:	a30b      	add	r3, pc, #44	; (adr r3, 125d8 <sched_after_mstr_free_offset_get+0x60>)
   125ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   125b0:	f7ee fda4 	bl	10fc <__aeabi_uldivmod>
		*win_offset_us +=
   125b4:	6823      	ldr	r3, [r4, #0]
   125b6:	4418      	add	r0, r3
   125b8:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & ((u32_t)1 << 31)) == 0) {
   125ba:	6823      	ldr	r3, [r4, #0]
   125bc:	2b00      	cmp	r3, #0
   125be:	db09      	blt.n	125d4 <sched_after_mstr_free_offset_get+0x5c>
		u32_t conn_interval_us = conn_interval * 1250;
   125c0:	f240 40e2 	movw	r0, #1250	; 0x4e2
   125c4:	fb00 f006 	mul.w	r0, r0, r6
		while (*win_offset_us > conn_interval_us) {
   125c8:	e001      	b.n	125ce <sched_after_mstr_free_offset_get+0x56>
			*win_offset_us -= conn_interval_us;
   125ca:	1a1b      	subs	r3, r3, r0
   125cc:	6023      	str	r3, [r4, #0]
		while (*win_offset_us > conn_interval_us) {
   125ce:	6823      	ldr	r3, [r4, #0]
   125d0:	4298      	cmp	r0, r3
   125d2:	d3fa      	bcc.n	125ca <sched_after_mstr_free_offset_get+0x52>
}
   125d4:	b002      	add	sp, #8
   125d6:	bd70      	pop	{r4, r5, r6, pc}
   125d8:	3b9aca00 	.word	0x3b9aca00
   125dc:	00000000 	.word	0x00000000
   125e0:	1afd498d 	.word	0x1afd498d

000125e4 <mayfly_sched_win_offset_use>:
{
   125e4:	b510      	push	{r4, lr}
   125e6:	b082      	sub	sp, #8
   125e8:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
   125ea:	f100 0384 	add.w	r3, r0, #132	; 0x84
   125ee:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   125f2:	68c1      	ldr	r1, [r0, #12]
   125f4:	8c80      	ldrh	r0, [r0, #36]	; 0x24
   125f6:	f7ff ffbf 	bl	12578 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   125fa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   125fe:	4a07      	ldr	r2, [pc, #28]	; (1261c <mayfly_sched_win_offset_use+0x38>)
   12600:	fba2 2303 	umull	r2, r3, r2, r3
   12604:	0a9b      	lsrs	r3, r3, #10
   12606:	a902      	add	r1, sp, #8
   12608:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   1260c:	2202      	movs	r2, #2
   1260e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   12612:	f7ed fe55 	bl	2c0 <memcpy>
}
   12616:	b002      	add	sp, #8
   12618:	bd10      	pop	{r4, pc}
   1261a:	bf00      	nop
   1261c:	d1b71759 	.word	0xd1b71759

00012620 <mayfly_sched_after_mstr_free_offset_get>:
{
   12620:	b510      	push	{r4, lr}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
   12622:	4c05      	ldr	r4, [pc, #20]	; (12638 <mayfly_sched_after_mstr_free_offset_get+0x18>)
   12624:	f504 7380 	add.w	r3, r4, #256	; 0x100
   12628:	4602      	mov	r2, r0
   1262a:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
   1262e:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
   12632:	f7ff ffa1 	bl	12578 <sched_after_mstr_free_offset_get>
   12636:	bd10      	pop	{r4, pc}
   12638:	20000dec 	.word	0x20000dec

0001263c <enc_rsp_send>:
{
   1263c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12640:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12642:	4818      	ldr	r0, [pc, #96]	; (126a4 <enc_rsp_send+0x68>)
   12644:	f7fc f861 	bl	e70a <mem_acquire>
	LL_ASSERT(node_tx);
   12648:	b330      	cbz	r0, 12698 <enc_rsp_send+0x5c>
   1264a:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1264c:	7903      	ldrb	r3, [r0, #4]
   1264e:	f043 0303 	orr.w	r3, r3, #3
   12652:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   12654:	230d      	movs	r3, #13
   12656:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   12658:	2604      	movs	r6, #4
   1265a:	71c6      	strb	r6, [r0, #7]
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds);
   1265c:	f100 0808 	add.w	r8, r0, #8
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds),
   12660:	4641      	mov	r1, r8
   12662:	2008      	movs	r0, #8
   12664:	f7fd faa2 	bl	fbac <rand_isr_get>
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs);
   12668:	f104 0710 	add.w	r7, r4, #16
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs),
   1266c:	4639      	mov	r1, r7
   1266e:	4630      	mov	r0, r6
   12670:	f7fd fa9c 	bl	fbac <rand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   12674:	2208      	movs	r2, #8
   12676:	4641      	mov	r1, r8
   12678:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   1267c:	f7ed fe20 	bl	2c0 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
   12680:	4632      	mov	r2, r6
   12682:	4639      	mov	r1, r7
   12684:	f505 708b 	add.w	r0, r5, #278	; 0x116
   12688:	f7ed fe1a 	bl	2c0 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
   1268c:	4621      	mov	r1, r4
   1268e:	4628      	mov	r0, r5
   12690:	f7fe facc 	bl	10c2c <ctrl_tx_enqueue>
   12694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(node_tx);
   12698:	4040      	eors	r0, r0
   1269a:	f380 8811 	msr	BASEPRI, r0
   1269e:	f04f 0004 	mov.w	r0, #4
   126a2:	df02      	svc	2
   126a4:	20000f44 	.word	0x20000f44

000126a8 <enc_req_reused_send>:
{
   126a8:	b538      	push	{r3, r4, r5, lr}
   126aa:	4605      	mov	r5, r0
   126ac:	460c      	mov	r4, r1
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   126ae:	790b      	ldrb	r3, [r1, #4]
   126b0:	f043 0303 	orr.w	r3, r3, #3
   126b4:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   126b6:	2317      	movs	r3, #23
   126b8:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   126ba:	2303      	movs	r3, #3
   126bc:	71cb      	strb	r3, [r1, #7]
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
   126be:	2208      	movs	r2, #8
   126c0:	f100 0179 	add.w	r1, r0, #121	; 0x79
   126c4:	18a0      	adds	r0, r4, r2
   126c6:	f7ed fdfb 	bl	2c0 <memcpy>
		conn->llcp.encryption.ediv[0];
   126ca:	f895 3081 	ldrb.w	r3, [r5, #129]	; 0x81
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
   126ce:	7423      	strb	r3, [r4, #16]
		conn->llcp.encryption.ediv[1];
   126d0:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
   126d4:	7463      	strb	r3, [r4, #17]
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm),
   126d6:	f104 0112 	add.w	r1, r4, #18
   126da:	2008      	movs	r0, #8
   126dc:	f7fd fa66 	bl	fbac <rand_isr_get>
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm),
   126e0:	f104 011a 	add.w	r1, r4, #26
   126e4:	2004      	movs	r0, #4
   126e6:	f7fd fa61 	bl	fbac <rand_isr_get>
   126ea:	bd38      	pop	{r3, r4, r5, pc}

000126ec <isr_rx_conn_pkt_ctrl>:
{
   126ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   126f0:	b082      	sub	sp, #8
   126f2:	4604      	mov	r4, r0
   126f4:	460f      	mov	r7, r1
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   126f6:	f100 0608 	add.w	r6, r0, #8
	if (_radio.conn_curr->role) {
   126fa:	4ba0      	ldr	r3, [pc, #640]	; (1297c <isr_rx_conn_pkt_ctrl+0x290>)
   126fc:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
   12700:	f995 301d 	ldrsb.w	r3, [r5, #29]
   12704:	2b00      	cmp	r3, #0
   12706:	db11      	blt.n	1272c <isr_rx_conn_pkt_ctrl+0x40>
		switch (pdu_data_rx->payload.llctrl.opcode) {
   12708:	7ac1      	ldrb	r1, [r0, #11]
   1270a:	2918      	cmp	r1, #24
   1270c:	d82c      	bhi.n	12768 <isr_rx_conn_pkt_ctrl+0x7c>
   1270e:	e8df f001 	tbb	[pc, r1]
   12712:	2323      	.short	0x2323
   12714:	2b2b232b 	.word	0x2b2b232b
   12718:	2b232b2b 	.word	0x2b232b2b
   1271c:	2b2b2b23 	.word	0x2b2b2b23
   12720:	2b2b2b2b 	.word	0x2b2b2b2b
   12724:	2b2b2b2b 	.word	0x2b2b2b2b
   12728:	2b2b      	.short	0x2b2b
   1272a:	23          	.byte	0x23
   1272b:	00          	.byte	0x00
		switch (pdu_data_rx->payload.llctrl.opcode) {
   1272c:	7ac1      	ldrb	r1, [r0, #11]
   1272e:	1f0a      	subs	r2, r1, #4
   12730:	2a15      	cmp	r2, #21
   12732:	d819      	bhi.n	12768 <isr_rx_conn_pkt_ctrl+0x7c>
   12734:	e8df f002 	tbb	[pc, r2]
   12738:	18180b0b 	.word	0x18180b0b
   1273c:	18181818 	.word	0x18181818
   12740:	180b1818 	.word	0x180b1818
   12744:	1818180b 	.word	0x1818180b
   12748:	0b181818 	.word	0x0b181818
   1274c:	0b18      	.short	0x0b18
			unknown_rsp_send(_radio.conn_curr,
   1274e:	4628      	mov	r0, r5
   12750:	f7fe fcca 	bl	110e8 <unknown_rsp_send>
			return 0;
   12754:	2400      	movs	r4, #0
   12756:	e003      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
			unknown_rsp_send(_radio.conn_curr,
   12758:	4628      	mov	r0, r5
   1275a:	f7fe fcc5 	bl	110e8 <unknown_rsp_send>
			return 0;
   1275e:	2400      	movs	r4, #0
}
   12760:	4620      	mov	r0, r4
   12762:	b002      	add	sp, #8
   12764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (pdu_data_rx->payload.llctrl.opcode) {
   12768:	7ae1      	ldrb	r1, [r4, #11]
   1276a:	2919      	cmp	r1, #25
   1276c:	f200 87e6 	bhi.w	1373c <isr_rx_conn_pkt_ctrl+0x1050>
   12770:	e8df f011 	tbh	[pc, r1, lsl #1]
   12774:	002e001a 	.word	0x002e001a
   12778:	0042003d 	.word	0x0042003d
   1277c:	00800065 	.word	0x00800065
   12780:	04c60099 	.word	0x04c60099
   12784:	010600de 	.word	0x010600de
   12788:	014b012d 	.word	0x014b012d
   1278c:	01ad0170 	.word	0x01ad0170
   12790:	01c400de 	.word	0x01c400de
   12794:	0395032d 	.word	0x0395032d
   12798:	04c104bb 	.word	0x04c104bb
   1279c:	05180518 	.word	0x05180518
   127a0:	06de0606 	.word	0x06de0606
   127a4:	07b9071b 	.word	0x07b9071b
		if (conn_update(_radio.conn_curr, pdu_data_rx) == 0) {
   127a8:	4631      	mov	r1, r6
   127aa:	4628      	mov	r0, r5
   127ac:	f7fe fb90 	bl	10ed0 <conn_update>
   127b0:	b930      	cbnz	r0, 127c0 <isr_rx_conn_pkt_ctrl+0xd4>
			_radio.conn_curr->procedure_expire = 0;
   127b2:	4b72      	ldr	r3, [pc, #456]	; (1297c <isr_rx_conn_pkt_ctrl+0x290>)
   127b4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   127b8:	2400      	movs	r4, #0
   127ba:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   127be:	e7cf      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   127c0:	4b6e      	ldr	r3, [pc, #440]	; (1297c <isr_rx_conn_pkt_ctrl+0x290>)
   127c2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   127c6:	2228      	movs	r2, #40	; 0x28
   127c8:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   127cc:	2400      	movs	r4, #0
   127ce:	e7c7      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
		if (chan_map_update(_radio.conn_curr, pdu_data_rx)) {
   127d0:	4631      	mov	r1, r6
   127d2:	4628      	mov	r0, r5
   127d4:	f7ff f99e 	bl	11b14 <chan_map_update>
   127d8:	2800      	cmp	r0, #0
   127da:	f000 87b5 	beq.w	13748 <isr_rx_conn_pkt_ctrl+0x105c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   127de:	4b67      	ldr	r3, [pc, #412]	; (1297c <isr_rx_conn_pkt_ctrl+0x290>)
   127e0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   127e4:	2228      	movs	r2, #40	; 0x28
   127e6:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   127ea:	2400      	movs	r4, #0
   127ec:	e7b8      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
			pdu_data_rx->payload.llctrl.ctrldata.terminate_ind.error_code;
   127ee:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_terminate.reason_peer =
   127f0:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
	u8_t nack = 0;
   127f4:	2400      	movs	r4, #0
		break;
   127f6:	e7b3      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   127f8:	2208      	movs	r2, #8
   127fa:	f104 0116 	add.w	r1, r4, #22
   127fe:	f105 0093 	add.w	r0, r5, #147	; 0x93
   12802:	f7ed fd5d 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   12806:	4d5d      	ldr	r5, [pc, #372]	; (1297c <isr_rx_conn_pkt_ctrl+0x290>)
   12808:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   1280c:	2204      	movs	r2, #4
   1280e:	f104 011e 	add.w	r1, r4, #30
   12812:	f500 7089 	add.w	r0, r0, #274	; 0x112
   12816:	f7ed fd53 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   1281a:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   1281e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   12822:	f043 0304 	orr.w	r3, r3, #4
   12826:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   1282a:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   1282e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   12832:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   12836:	2301      	movs	r3, #1
   12838:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   1283a:	2400      	movs	r4, #0
		break;
   1283c:	e790      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   1283e:	2208      	movs	r2, #8
   12840:	f104 010c 	add.w	r1, r4, #12
   12844:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   12848:	f7ed fd3a 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   1284c:	4d4b      	ldr	r5, [pc, #300]	; (1297c <isr_rx_conn_pkt_ctrl+0x290>)
   1284e:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   12852:	2204      	movs	r2, #4
   12854:	f104 0114 	add.w	r1, r4, #20
   12858:	f500 708b 	add.w	r0, r0, #278	; 0x116
   1285c:	f7ed fd30 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   12860:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   12864:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   12868:	f043 0304 	orr.w	r3, r3, #4
   1286c:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t nack = 0;
   12870:	2400      	movs	r4, #0
		break;
   12872:	e775      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   12874:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   12878:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   1287c:	429a      	cmp	r2, r3
   1287e:	d10c      	bne.n	1289a <isr_rx_conn_pkt_ctrl+0x1ae>
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   12880:	2303      	movs	r3, #3
   12882:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
   12886:	4b3d      	ldr	r3, [pc, #244]	; (1297c <isr_rx_conn_pkt_ctrl+0x290>)
   12888:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1288c:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   12890:	3b01      	subs	r3, #1
   12892:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
	u8_t nack = 0;
   12896:	2400      	movs	r4, #0
		break;
   12898:	e762      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   1289a:	4040      	eors	r0, r0
   1289c:	f380 8811 	msr	BASEPRI, r0
   128a0:	f04f 0004 	mov.w	r0, #4
   128a4:	df02      	svc	2
		if (_radio.role == ROLE_SLAVE) {
   128a6:	4b35      	ldr	r3, [pc, #212]	; (1297c <isr_rx_conn_pkt_ctrl+0x290>)
   128a8:	7bdb      	ldrb	r3, [r3, #15]
   128aa:	b2db      	uxtb	r3, r3
   128ac:	2b03      	cmp	r3, #3
   128ae:	d027      	beq.n	12900 <isr_rx_conn_pkt_ctrl+0x214>
			_radio.conn_curr->pause_rx = 0;
   128b0:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   128b4:	f36f 0382 	bfc	r3, #2, #1
   128b8:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   128bc:	4b2f      	ldr	r3, [pc, #188]	; (1297c <isr_rx_conn_pkt_ctrl+0x290>)
   128be:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   128c2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   128c6:	f36f 02c3 	bfc	r2, #3, #1
   128ca:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		if (_radio.conn_curr->refresh) {
   128ce:	4b2b      	ldr	r3, [pc, #172]	; (1297c <isr_rx_conn_pkt_ctrl+0x290>)
   128d0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   128d4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   128d8:	f012 0f40 	tst.w	r2, #64	; 0x40
   128dc:	d007      	beq.n	128ee <isr_rx_conn_pkt_ctrl+0x202>
			_radio.conn_curr->refresh = 0;
   128de:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   128e2:	f36f 1286 	bfc	r2, #6, #1
   128e6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   128ea:	2309      	movs	r3, #9
   128ec:	7123      	strb	r3, [r4, #4]
		*rx_enqueue = 1;
   128ee:	2301      	movs	r3, #1
   128f0:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   128f2:	4b22      	ldr	r3, [pc, #136]	; (1297c <isr_rx_conn_pkt_ctrl+0x290>)
   128f4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   128f8:	2400      	movs	r4, #0
   128fa:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   128fe:	e72f      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   12900:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   12904:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   12908:	429a      	cmp	r2, r3
   1290a:	d10b      	bne.n	12924 <isr_rx_conn_pkt_ctrl+0x238>
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   1290c:	2303      	movs	r3, #3
   1290e:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
   12912:	4b1a      	ldr	r3, [pc, #104]	; (1297c <isr_rx_conn_pkt_ctrl+0x290>)
   12914:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   12918:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   1291c:	3b01      	subs	r3, #1
   1291e:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   12922:	e7d4      	b.n	128ce <isr_rx_conn_pkt_ctrl+0x1e2>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   12924:	4040      	eors	r0, r0
   12926:	f380 8811 	msr	BASEPRI, r0
   1292a:	f04f 0004 	mov.w	r0, #4
   1292e:	df02      	svc	2
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   12930:	7b23      	ldrb	r3, [r4, #12]
   12932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   12936:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   1293a:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   1293e:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   12942:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   12944:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   12948:	7ba2      	ldrb	r2, [r4, #14]
   1294a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   1294e:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   12952:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   12956:	4013      	ands	r3, r2
   12958:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   1295c:	4a07      	ldr	r2, [pc, #28]	; (1297c <isr_rx_conn_pkt_ctrl+0x290>)
   1295e:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   12962:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   12966:	f043 0320 	orr.w	r3, r3, #32
   1296a:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		feature_rsp_send(_radio.conn_curr);
   1296e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   12972:	f7ff f8fd 	bl	11b70 <feature_rsp_send>
	u8_t nack = 0;
   12976:	2400      	movs	r4, #0
	break;
   12978:	e6f2      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
   1297a:	bf00      	nop
   1297c:	20000dec 	.word	0x20000dec
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   12980:	7b23      	ldrb	r3, [r4, #12]
   12982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   12986:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   1298a:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   1298e:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   12992:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   12994:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   12998:	7ba2      	ldrb	r2, [r4, #14]
   1299a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   1299e:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   129a2:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   129a6:	4013      	ands	r3, r2
   129a8:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   129ac:	4ad2      	ldr	r2, [pc, #840]	; (12cf8 <isr_rx_conn_pkt_ctrl+0x60c>)
   129ae:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   129b2:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   129b6:	f043 0320 	orr.w	r3, r3, #32
   129ba:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		*rx_enqueue = 1;
   129be:	2301      	movs	r3, #1
   129c0:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   129c2:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   129c6:	2400      	movs	r4, #0
   129c8:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	break;
   129cc:	e6c8      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
		pause_enc_rsp_send(_radio.conn_curr);
   129ce:	4628      	mov	r0, r5
   129d0:	f7fe fae8 	bl	10fa4 <pause_enc_rsp_send>
		_radio.conn_curr->pause_rx = 1;
   129d4:	4bc8      	ldr	r3, [pc, #800]	; (12cf8 <isr_rx_conn_pkt_ctrl+0x60c>)
   129d6:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   129da:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   129de:	f042 0204 	orr.w	r2, r2, #4
   129e2:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   129e6:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   129ea:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   129ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   129f2:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->enc_rx = 0;
   129f6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   129fa:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   129fe:	f36f 1204 	bfc	r2, #4, #1
   12a02:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   12a06:	2400      	movs	r4, #0
		break;
   12a08:	e6aa      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.role == ROLE_MASTER) {
   12a0a:	4bbb      	ldr	r3, [pc, #748]	; (12cf8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12a0c:	7bdb      	ldrb	r3, [r3, #15]
   12a0e:	b2db      	uxtb	r3, r3
   12a10:	2b04      	cmp	r3, #4
   12a12:	d00a      	beq.n	12a2a <isr_rx_conn_pkt_ctrl+0x33e>
		_radio.conn_curr->enc_tx = 0;
   12a14:	4bb8      	ldr	r3, [pc, #736]	; (12cf8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12a16:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12a1a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12a1e:	f36f 1245 	bfc	r2, #5, #1
   12a22:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   12a26:	2400      	movs	r4, #0
		break;
   12a28:	e69a      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
			pause_enc_rsp_send(_radio.conn_curr);
   12a2a:	4628      	mov	r0, r5
   12a2c:	f7fe faba 	bl	10fa4 <pause_enc_rsp_send>
			_radio.conn_curr->pause_rx = 1;
   12a30:	4ab1      	ldr	r2, [pc, #708]	; (12cf8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12a32:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   12a36:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   12a3a:	f043 0304 	orr.w	r3, r3, #4
   12a3e:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			_radio.conn_curr->enc_rx = 0;
   12a42:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   12a46:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12a4a:	f36f 1204 	bfc	r2, #4, #1
   12a4e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   12a52:	e7df      	b.n	12a14 <isr_rx_conn_pkt_ctrl+0x328>
			version_ind.version_number;
   12a54:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_version.version_number =
   12a56:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
		_radio.conn_curr->llcp_version. company_id =
   12a5a:	4ba7      	ldr	r3, [pc, #668]	; (12cf8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12a5c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
   12a60:	f8b4 100d 	ldrh.w	r1, [r4, #13]
		_radio.conn_curr->llcp_version. company_id =
   12a64:	f8a2 10aa 	strh.w	r1, [r2, #170]	; 0xaa
		_radio.conn_curr->llcp_version.sub_version_number =
   12a68:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;
   12a6c:	f8b4 100f 	ldrh.w	r1, [r4, #15]
		_radio.conn_curr->llcp_version.sub_version_number =
   12a70:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
		if ((_radio.conn_curr->llcp_version.tx != 0) &&
   12a74:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12a78:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
   12a7c:	f003 0303 	and.w	r3, r3, #3
   12a80:	2b01      	cmp	r3, #1
   12a82:	d011      	beq.n	12aa8 <isr_rx_conn_pkt_ctrl+0x3bc>
		_radio.conn_curr->llcp_version.rx = 1;
   12a84:	4a9c      	ldr	r2, [pc, #624]	; (12cf8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12a86:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   12a8a:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
   12a8e:	f043 0302 	orr.w	r3, r3, #2
   12a92:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
		if (_radio.conn_curr->llcp_version.tx == 0) {
   12a96:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   12a9a:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
   12a9e:	f012 0f01 	tst.w	r2, #1
   12aa2:	d009      	beq.n	12ab8 <isr_rx_conn_pkt_ctrl+0x3cc>
	u8_t nack = 0;
   12aa4:	2400      	movs	r4, #0
   12aa6:	e65b      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
			*rx_enqueue = 1;
   12aa8:	703b      	strb	r3, [r7, #0]
			_radio.conn_curr->procedure_expire = 0;
   12aaa:	4b93      	ldr	r3, [pc, #588]	; (12cf8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12aac:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12ab0:	2200      	movs	r2, #0
   12ab2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   12ab6:	e7e5      	b.n	12a84 <isr_rx_conn_pkt_ctrl+0x398>
			_radio.conn_curr->llcp_version.tx = 1;
   12ab8:	f042 0201 	orr.w	r2, r2, #1
   12abc:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			version_ind_send(_radio.conn_curr);
   12ac0:	4b8d      	ldr	r3, [pc, #564]	; (12cf8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12ac2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   12ac6:	f7ff f90b 	bl	11ce0 <version_ind_send>
	u8_t nack = 0;
   12aca:	2400      	movs	r4, #0
   12acc:	e648      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->pause_rx = 0;
   12ace:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   12ad2:	f36f 0382 	bfc	r3, #2, #1
   12ad6:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   12ada:	4b87      	ldr	r3, [pc, #540]	; (12cf8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12adc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   12ae0:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   12ae4:	f36f 01c3 	bfc	r1, #3, #1
   12ae8:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   12aec:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12af0:	2400      	movs	r4, #0
   12af2:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   12af6:	2301      	movs	r3, #1
   12af8:	703b      	strb	r3, [r7, #0]
		break;
   12afa:	e631      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
   12afc:	4a7e      	ldr	r2, [pc, #504]	; (12cf8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12afe:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   12b02:	b142      	cbz	r2, 12b16 <isr_rx_conn_pkt_ctrl+0x42a>
   12b04:	4295      	cmp	r5, r2
   12b06:	d006      	beq.n	12b16 <isr_rx_conn_pkt_ctrl+0x42a>
			reject_ext_ind_send(_radio.conn_curr,
   12b08:	2220      	movs	r2, #32
   12b0a:	210f      	movs	r1, #15
   12b0c:	4628      	mov	r0, r5
   12b0e:	f7fe faa5 	bl	1105c <reject_ext_ind_send>
	u8_t nack = 0;
   12b12:	2400      	movs	r4, #0
			break;
   12b14:	e624      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
		if (!_radio.conn_curr->role) {
   12b16:	2b00      	cmp	r3, #0
   12b18:	f2c0 80bc 	blt.w	12c94 <isr_rx_conn_pkt_ctrl+0x5a8>
			if ((conn->llcp_conn_param.req !=
   12b1c:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
					conn->llcp_conn_param.ack) &&
   12b20:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
			if ((conn->llcp_conn_param.req !=
   12b24:	429a      	cmp	r2, r3
   12b26:	d008      	beq.n	12b3a <isr_rx_conn_pkt_ctrl+0x44e>
			    ((conn->llcp_conn_param.state ==
   12b28:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
   12b2c:	f013 0307 	ands.w	r3, r3, #7
   12b30:	d016      	beq.n	12b60 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_REQ) ||
   12b32:	2b04      	cmp	r3, #4
   12b34:	d014      	beq.n	12b60 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   12b36:	2b05      	cmp	r3, #5
   12b38:	d012      	beq.n	12b60 <isr_rx_conn_pkt_ctrl+0x474>
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   12b3a:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   12b3e:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   12b42:	429a      	cmp	r2, r3
   12b44:	d105      	bne.n	12b52 <isr_rx_conn_pkt_ctrl+0x466>
				   (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   12b46:	f895 20f4 	ldrb.w	r2, [r5, #244]	; 0xf4
   12b4a:	f895 30f5 	ldrb.w	r3, [r5, #245]	; 0xf5
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   12b4e:	429a      	cmp	r2, r3
   12b50:	d00d      	beq.n	12b6e <isr_rx_conn_pkt_ctrl+0x482>
				reject_ext_ind_send(_radio.conn_curr,
   12b52:	222a      	movs	r2, #42	; 0x2a
   12b54:	210f      	movs	r1, #15
   12b56:	4628      	mov	r0, r5
   12b58:	f7fe fa80 	bl	1105c <reject_ext_ind_send>
	u8_t nack = 0;
   12b5c:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   12b5e:	e5ff      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   12b60:	2223      	movs	r2, #35	; 0x23
   12b62:	210f      	movs	r1, #15
   12b64:	4628      	mov	r0, r5
   12b66:	f7fe fa79 	bl	1105c <reject_ext_ind_send>
	u8_t nack = 0;
   12b6a:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   12b6c:	e5f8      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
				if ((cpr->interval_min < 6) ||
   12b6e:	89a0      	ldrh	r0, [r4, #12]
   12b70:	b282      	uxth	r2, r0
   12b72:	2a05      	cmp	r2, #5
   12b74:	d970      	bls.n	12c58 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   12b76:	89e3      	ldrh	r3, [r4, #14]
				if ((cpr->interval_min < 6) ||
   12b78:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   12b7c:	d86c      	bhi.n	12c58 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   12b7e:	429a      	cmp	r2, r3
   12b80:	d86a      	bhi.n	12c58 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->latency > 499) ||
   12b82:	8a22      	ldrh	r2, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
   12b84:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   12b88:	d266      	bcs.n	12c58 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   12b8a:	8a61      	ldrh	r1, [r4, #18]
				    (cpr->latency > 499) ||
   12b8c:	2909      	cmp	r1, #9
   12b8e:	d963      	bls.n	12c58 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   12b90:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   12b94:	d860      	bhi.n	12c58 <isr_rx_conn_pkt_ctrl+0x56c>
				     ((cpr->latency + 1) *
   12b96:	fb02 3203 	mla	r2, r2, r3, r3
				    (cpr->timeout > 3200) ||
   12b9a:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   12b9e:	da5b      	bge.n	12c58 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->preferred_periodicity >
   12ba0:	7d22      	ldrb	r2, [r4, #20]
				      cpr->interval_max)) ||
   12ba2:	4293      	cmp	r3, r2
   12ba4:	d358      	bcc.n	12c58 <isr_rx_conn_pkt_ctrl+0x56c>
				conn->llcp_conn_param.interval = cpr->interval_min;
   12ba6:	f8a5 00c4 	strh.w	r0, [r5, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
   12baa:	8a23      	ldrh	r3, [r4, #16]
   12bac:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
   12bb0:	8a62      	ldrh	r2, [r4, #18]
   12bb2:	b293      	uxth	r3, r2
   12bb4:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
					cpr->preferred_periodicity;
   12bb8:	7d22      	ldrb	r2, [r4, #20]
				conn->llcp_conn_param.preferred_periodicity =
   12bba:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
					cpr->reference_conn_event_count;
   12bbe:	f8b4 2015 	ldrh.w	r2, [r4, #21]
				conn->llcp_conn_param.reference_conn_event_count =
   12bc2:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
   12bc6:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   12bca:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
   12bce:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   12bd2:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
   12bd6:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   12bda:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
   12bde:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   12be2:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
   12be6:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   12bea:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
   12bee:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   12bf2:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
				     conn->conn_interval) ||
   12bf6:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   12bfa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
				if ((conn->llcp_conn_param.interval !=
   12bfc:	4291      	cmp	r1, r2
   12bfe:	d10f      	bne.n	12c20 <isr_rx_conn_pkt_ctrl+0x534>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12c00:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   12c02:	f240 42e2 	movw	r2, #1250	; 0x4e2
   12c06:	fb02 f201 	mul.w	r2, r2, r1
   12c0a:	f242 7110 	movw	r1, #10000	; 0x2710
   12c0e:	fb01 2303 	mla	r3, r1, r3, r2
   12c12:	3b01      	subs	r3, #1
   12c14:	fb93 f3f2 	sdiv	r3, r3, r2
   12c18:	b29b      	uxth	r3, r3
				     conn->supervision_reload)) {
   12c1a:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
				     conn->latency) ||
   12c1c:	4293      	cmp	r3, r2
   12c1e:	d02c      	beq.n	12c7a <isr_rx_conn_pkt_ctrl+0x58e>
					if (conn->pause_tx) {
   12c20:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   12c24:	f013 0f08 	tst.w	r3, #8
   12c28:	d01d      	beq.n	12c66 <isr_rx_conn_pkt_ctrl+0x57a>
						conn->llcp_conn_param.state =
   12c2a:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   12c2e:	2202      	movs	r2, #2
   12c30:	f362 0302 	bfi	r3, r2, #0, #3
   12c34:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.ack--;
   12c38:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   12c3c:	3b01      	subs	r3, #1
   12c3e:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
				if (_radio.conn_upd == 0) {
   12c42:	4b2d      	ldr	r3, [pc, #180]	; (12cf8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12c44:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   12c48:	2b00      	cmp	r3, #0
   12c4a:	f040 8580 	bne.w	1374e <isr_rx_conn_pkt_ctrl+0x1062>
					_radio.conn_upd = conn;
   12c4e:	4b2a      	ldr	r3, [pc, #168]	; (12cf8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12c50:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   12c54:	2400      	movs	r4, #0
   12c56:	e583      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
					reject_ext_ind_send(conn,
   12c58:	221e      	movs	r2, #30
   12c5a:	210f      	movs	r1, #15
   12c5c:	4628      	mov	r0, r5
   12c5e:	f7fe f9fd 	bl	1105c <reject_ext_ind_send>
	u8_t nack = 0;
   12c62:	2400      	movs	r4, #0
					break;
   12c64:	e57c      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
						*rx_enqueue = 1;
   12c66:	2301      	movs	r3, #1
   12c68:	703b      	strb	r3, [r7, #0]
						conn->llcp_conn_param.state =
   12c6a:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   12c6e:	2203      	movs	r2, #3
   12c70:	f362 0302 	bfi	r3, r2, #0, #3
   12c74:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   12c78:	e7de      	b.n	12c38 <isr_rx_conn_pkt_ctrl+0x54c>
					conn->llcp_conn_param.status = 0;
   12c7a:	2300      	movs	r3, #0
   12c7c:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
					conn->llcp_conn_param.cmd = 0;
   12c80:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.state =
   12c84:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   12c88:	2201      	movs	r2, #1
   12c8a:	f362 0302 	bfi	r3, r2, #0, #3
   12c8e:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   12c92:	e7d1      	b.n	12c38 <isr_rx_conn_pkt_ctrl+0x54c>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   12c94:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
			    _radio.conn_curr->llcp_conn_param.ack) ||
   12c98:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   12c9c:	429a      	cmp	r2, r3
   12c9e:	d007      	beq.n	12cb0 <isr_rx_conn_pkt_ctrl+0x5c4>
			   (_radio.conn_curr->llcp_conn_param.state ==
   12ca0:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
			    _radio.conn_curr->llcp_conn_param.ack) ||
   12ca4:	f013 0307 	ands.w	r3, r3, #7
   12ca8:	d002      	beq.n	12cb0 <isr_rx_conn_pkt_ctrl+0x5c4>
			    LLCP_CPR_STATE_REQ) ||
   12caa:	2b04      	cmp	r3, #4
   12cac:	f040 8089 	bne.w	12dc2 <isr_rx_conn_pkt_ctrl+0x6d6>
			if ((cpr->interval_min < 6) ||
   12cb0:	89a1      	ldrh	r1, [r4, #12]
   12cb2:	b28a      	uxth	r2, r1
   12cb4:	2a05      	cmp	r2, #5
   12cb6:	d917      	bls.n	12ce8 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   12cb8:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   12cba:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   12cbe:	d813      	bhi.n	12ce8 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   12cc0:	429a      	cmp	r2, r3
   12cc2:	d811      	bhi.n	12ce8 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->latency > 499) ||
   12cc4:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   12cc6:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   12cca:	d20d      	bcs.n	12ce8 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12ccc:	8a60      	ldrh	r0, [r4, #18]
			    (cpr->latency > 499) ||
   12cce:	2809      	cmp	r0, #9
   12cd0:	d90a      	bls.n	12ce8 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12cd2:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   12cd6:	d807      	bhi.n	12ce8 <isr_rx_conn_pkt_ctrl+0x5fc>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   12cd8:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12cdc:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
   12ce0:	da02      	bge.n	12ce8 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   12ce2:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   12ce4:	4293      	cmp	r3, r2
   12ce6:	d209      	bcs.n	12cfc <isr_rx_conn_pkt_ctrl+0x610>
				reject_ext_ind_send(conn,
   12ce8:	221e      	movs	r2, #30
   12cea:	210f      	movs	r1, #15
   12cec:	4628      	mov	r0, r5
   12cee:	f7fe f9b5 	bl	1105c <reject_ext_ind_send>
	u8_t nack = 0;
   12cf2:	2400      	movs	r4, #0
				break;
   12cf4:	e534      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
   12cf6:	bf00      	nop
   12cf8:	20000dec 	.word	0x20000dec
			conn->llcp_conn_param.interval = cpr->interval_min;
   12cfc:	f8a5 10c4 	strh.w	r1, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   12d00:	8a23      	ldrh	r3, [r4, #16]
   12d02:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   12d06:	8a62      	ldrh	r2, [r4, #18]
   12d08:	b293      	uxth	r3, r2
   12d0a:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   12d0e:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   12d10:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   12d14:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   12d18:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   12d1c:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   12d20:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   12d24:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   12d28:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   12d2c:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   12d30:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   12d34:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   12d38:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   12d3c:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   12d40:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   12d44:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   12d48:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			     conn->conn_interval) ||
   12d4c:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   12d50:	6a6a      	ldr	r2, [r5, #36]	; 0x24
			if ((conn->llcp_conn_param.interval !=
   12d52:	4291      	cmp	r1, r2
   12d54:	d013      	beq.n	12d7e <isr_rx_conn_pkt_ctrl+0x692>
				*rx_enqueue = 1;
   12d56:	2301      	movs	r3, #1
   12d58:	703b      	strb	r3, [r7, #0]
				conn->llcp_conn_param.state =
   12d5a:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   12d5e:	2203      	movs	r2, #3
   12d60:	f362 0302 	bfi	r3, r2, #0, #3
   12d64:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
   12d68:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   12d6c:	3b01      	subs	r3, #1
   12d6e:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
   12d72:	4bcb      	ldr	r3, [pc, #812]	; (130a0 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12d74:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   12d78:	b1f3      	cbz	r3, 12db8 <isr_rx_conn_pkt_ctrl+0x6cc>
	u8_t nack = 0;
   12d7a:	2400      	movs	r4, #0
   12d7c:	e4f0      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12d7e:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   12d80:	f240 42e2 	movw	r2, #1250	; 0x4e2
   12d84:	fb02 f201 	mul.w	r2, r2, r1
   12d88:	f242 7110 	movw	r1, #10000	; 0x2710
   12d8c:	fb01 2303 	mla	r3, r1, r3, r2
   12d90:	3b01      	subs	r3, #1
   12d92:	fb93 f3f2 	sdiv	r3, r3, r2
   12d96:	b29b      	uxth	r3, r3
			     conn->supervision_reload)) {
   12d98:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
			    (conn->llcp_conn_param.latency != conn->latency) ||
   12d9a:	4293      	cmp	r3, r2
   12d9c:	d1db      	bne.n	12d56 <isr_rx_conn_pkt_ctrl+0x66a>
				conn->llcp_conn_param.status = 0;
   12d9e:	2300      	movs	r3, #0
   12da0:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
   12da4:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.state =
   12da8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   12dac:	2201      	movs	r2, #1
   12dae:	f362 0302 	bfi	r3, r2, #0, #3
   12db2:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   12db6:	e7d7      	b.n	12d68 <isr_rx_conn_pkt_ctrl+0x67c>
				_radio.conn_upd = conn;
   12db8:	4bb9      	ldr	r3, [pc, #740]	; (130a0 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12dba:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   12dbe:	2400      	movs	r4, #0
   12dc0:	e4ce      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(0);
   12dc2:	4040      	eors	r0, r0
   12dc4:	f380 8811 	msr	BASEPRI, r0
   12dc8:	f04f 0004 	mov.w	r0, #4
   12dcc:	df02      	svc	2
		if (!_radio.conn_curr->role &&
   12dce:	2b00      	cmp	r3, #0
   12dd0:	f2c0 84c0 	blt.w	13754 <isr_rx_conn_pkt_ctrl+0x1068>
		    (_radio.conn_curr->llcp_conn_param.req !=
   12dd4:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
		     _radio.conn_curr->llcp_conn_param.ack) &&
   12dd8:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		if (!_radio.conn_curr->role &&
   12ddc:	429a      	cmp	r2, r3
   12dde:	f000 84bc 	beq.w	1375a <isr_rx_conn_pkt_ctrl+0x106e>
		    (_radio.conn_curr->llcp_conn_param.state ==
   12de2:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   12de6:	f003 0307 	and.w	r3, r3, #7
		     _radio.conn_curr->llcp_conn_param.ack) &&
   12dea:	2b04      	cmp	r3, #4
   12dec:	d001      	beq.n	12df2 <isr_rx_conn_pkt_ctrl+0x706>
	u8_t nack = 0;
   12dee:	2400      	movs	r4, #0
   12df0:	e4b6      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
			if ((cpr->interval_min < 6) ||
   12df2:	89a2      	ldrh	r2, [r4, #12]
   12df4:	2a05      	cmp	r2, #5
   12df6:	d917      	bls.n	12e28 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   12df8:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   12dfa:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   12dfe:	d813      	bhi.n	12e28 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   12e00:	429a      	cmp	r2, r3
   12e02:	d811      	bhi.n	12e28 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->latency > 499) ||
   12e04:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   12e06:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   12e0a:	d20d      	bcs.n	12e28 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12e0c:	8a61      	ldrh	r1, [r4, #18]
			    (cpr->latency > 499) ||
   12e0e:	2909      	cmp	r1, #9
   12e10:	d90a      	bls.n	12e28 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12e12:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   12e16:	d807      	bhi.n	12e28 <isr_rx_conn_pkt_ctrl+0x73c>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   12e18:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12e1c:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   12e20:	da02      	bge.n	12e28 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   12e22:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   12e24:	4293      	cmp	r3, r2
   12e26:	d206      	bcs.n	12e36 <isr_rx_conn_pkt_ctrl+0x74a>
				reject_ext_ind_send(conn,
   12e28:	221e      	movs	r2, #30
   12e2a:	2110      	movs	r1, #16
   12e2c:	4628      	mov	r0, r5
   12e2e:	f7fe f915 	bl	1105c <reject_ext_ind_send>
	u8_t nack = 0;
   12e32:	2400      	movs	r4, #0
				break;
   12e34:	e494      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->procedure_expire = 0;
   12e36:	2300      	movs	r3, #0
   12e38:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
   12e3c:	89a2      	ldrh	r2, [r4, #12]
   12e3e:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   12e42:	8a22      	ldrh	r2, [r4, #16]
   12e44:	f8a5 20c6 	strh.w	r2, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   12e48:	8a62      	ldrh	r2, [r4, #18]
   12e4a:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   12e4e:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   12e50:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   12e54:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   12e58:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   12e5c:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   12e60:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   12e64:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   12e68:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   12e6c:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   12e70:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   12e74:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   12e78:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   12e7c:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   12e80:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   12e84:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   12e88:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   12e8c:	f895 20c2 	ldrb.w	r2, [r5, #194]	; 0xc2
   12e90:	2101      	movs	r1, #1
   12e92:	f361 0202 	bfi	r2, r1, #0, #3
   12e96:	f885 20c2 	strb.w	r2, [r5, #194]	; 0xc2
	u8_t nack = 0;
   12e9a:	461c      	mov	r4, r3
   12e9c:	e460      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
	} else if (_radio.conn_curr->llcp_phy.ack !=
   12e9e:	4b80      	ldr	r3, [pc, #512]	; (130a0 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12ea0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12ea4:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
   12ea8:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
   12eac:	4291      	cmp	r1, r2
   12eae:	d112      	bne.n	12ed6 <isr_rx_conn_pkt_ctrl+0x7ea>
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   12eb0:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
		   _radio.conn_curr->llcp_conn_param.req) {
   12eb4:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   12eb8:	4291      	cmp	r1, r2
   12eba:	d14c      	bne.n	12f56 <isr_rx_conn_pkt_ctrl+0x86a>
	} else if (_radio.conn_curr->llcp_length.ack !=
   12ebc:	f893 10e9 	ldrb.w	r1, [r3, #233]	; 0xe9
		   _radio.conn_curr->llcp_length.req) {
   12ec0:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
   12ec4:	4291      	cmp	r1, r2
   12ec6:	f000 80ef 	beq.w	130a8 <isr_rx_conn_pkt_ctrl+0x9bc>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   12eca:	7b21      	ldrb	r1, [r4, #12]
   12ecc:	2914      	cmp	r1, #20
   12ece:	f000 80cb 	beq.w	13068 <isr_rx_conn_pkt_ctrl+0x97c>
	u8_t nack = 0;
   12ed2:	2400      	movs	r4, #0
   12ed4:	e444      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   12ed6:	7b23      	ldrb	r3, [r4, #12]
   12ed8:	2b16      	cmp	r3, #22
   12eda:	d001      	beq.n	12ee0 <isr_rx_conn_pkt_ctrl+0x7f4>
	u8_t nack = 0;
   12edc:	2400      	movs	r4, #0
   12ede:	e43f      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
		if (rej_ext_ind->error_code != 0x23) {
   12ee0:	7b63      	ldrb	r3, [r4, #13]
   12ee2:	2b23      	cmp	r3, #35	; 0x23
   12ee4:	d017      	beq.n	12f16 <isr_rx_conn_pkt_ctrl+0x82a>
			_radio.conn_curr->llcp_phy.ack =
   12ee6:	4b6e      	ldr	r3, [pc, #440]	; (130a0 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12ee8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_phy.req;
   12eec:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
			_radio.conn_curr->llcp_phy.ack =
   12ef0:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   12ef4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   12ef8:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   12efc:	f3c1 01c2 	ubfx	r1, r1, #3, #3
			_radio.conn_curr->phy_tx_time =
   12f00:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
   12f04:	f361 0002 	bfi	r0, r1, #0, #3
   12f08:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
   12f0c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12f10:	2200      	movs	r2, #0
   12f12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
   12f16:	4b62      	ldr	r3, [pc, #392]	; (130a0 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12f18:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12f1c:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   12f20:	f013 0f02 	tst.w	r3, #2
   12f24:	f000 841c 	beq.w	13760 <isr_rx_conn_pkt_ctrl+0x1074>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12f28:	230c      	movs	r3, #12
   12f2a:	7123      	strb	r3, [r4, #4]
		p->status = rej_ext_ind->error_code;
   12f2c:	7b63      	ldrb	r3, [r4, #13]
   12f2e:	72e3      	strb	r3, [r4, #11]
		p->tx = _radio.conn_curr->phy_tx;
   12f30:	4a5b      	ldr	r2, [pc, #364]	; (130a0 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12f32:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   12f36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   12f3a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   12f3e:	7323      	strb	r3, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
   12f40:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   12f44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   12f48:	f3c3 0302 	ubfx	r3, r3, #0, #3
   12f4c:	7363      	strb	r3, [r4, #13]
		*rx_enqueue = 1;
   12f4e:	2301      	movs	r3, #1
   12f50:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   12f52:	2400      	movs	r4, #0
   12f54:	e404      	b.n	12760 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   12f56:	7b23      	ldrb	r3, [r4, #12]
   12f58:	2b0f      	cmp	r3, #15
   12f5a:	d002      	beq.n	12f62 <isr_rx_conn_pkt_ctrl+0x876>
	u8_t nack = 0;
   12f5c:	2400      	movs	r4, #0
   12f5e:	f7ff bbff 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
	conn = _radio.conn_curr;
   12f62:	4b4f      	ldr	r3, [pc, #316]	; (130a0 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12f64:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
   12f68:	f993 201d 	ldrsb.w	r2, [r3, #29]
   12f6c:	2a00      	cmp	r2, #0
   12f6e:	db02      	blt.n	12f76 <isr_rx_conn_pkt_ctrl+0x88a>
   12f70:	7b62      	ldrb	r2, [r4, #13]
   12f72:	2a1a      	cmp	r2, #26
   12f74:	d037      	beq.n	12fe6 <isr_rx_conn_pkt_ctrl+0x8fa>
	else if (rej_ext_ind->error_code != 0x23) {
   12f76:	7b62      	ldrb	r2, [r4, #13]
   12f78:	2a23      	cmp	r2, #35	; 0x23
   12f7a:	d012      	beq.n	12fa2 <isr_rx_conn_pkt_ctrl+0x8b6>
		LL_ASSERT(_radio.conn_upd == conn);
   12f7c:	4a48      	ldr	r2, [pc, #288]	; (130a0 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12f7e:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   12f82:	4293      	cmp	r3, r2
   12f84:	d166      	bne.n	13054 <isr_rx_conn_pkt_ctrl+0x968>
		_radio.conn_upd = NULL;
   12f86:	2200      	movs	r2, #0
   12f88:	4945      	ldr	r1, [pc, #276]	; (130a0 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12f8a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			conn->llcp_conn_param.req;
   12f8e:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
		conn->llcp_conn_param.ack =
   12f92:	f883 10c1 	strb.w	r1, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
   12f96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (conn->role) {
   12f9a:	f993 201d 	ldrsb.w	r2, [r3, #29]
   12f9e:	2a00      	cmp	r2, #0
   12fa0:	db5e      	blt.n	13060 <isr_rx_conn_pkt_ctrl+0x974>
	if (!conn->llcp_conn_param.cmd) {
   12fa2:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   12fa6:	f012 0f08 	tst.w	r2, #8
   12faa:	f000 83dc 	beq.w	13766 <isr_rx_conn_pkt_ctrl+0x107a>
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   12fae:	2208      	movs	r2, #8
   12fb0:	7122      	strb	r2, [r4, #4]
	cp->status = rej_ext_ind->error_code;
   12fb2:	7b62      	ldrb	r2, [r4, #13]
   12fb4:	72e2      	strb	r2, [r4, #11]
	cp->interval = conn->conn_interval;
   12fb6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   12fb8:	81a2      	strh	r2, [r4, #12]
	cp->latency = conn->latency;
   12fba:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   12fbc:	81e2      	strh	r2, [r4, #14]
	cp->timeout = conn->supervision_reload *
   12fbe:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
		      conn->conn_interval * 125 / 1000;
   12fc0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
   12fc2:	fb03 f302 	mul.w	r3, r3, r2
		      conn->conn_interval * 125 / 1000;
   12fc6:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   12fca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   12fce:	4a35      	ldr	r2, [pc, #212]	; (130a4 <isr_rx_conn_pkt_ctrl+0x9b8>)
   12fd0:	fb82 1203 	smull	r1, r2, r2, r3
   12fd4:	17db      	asrs	r3, r3, #31
	cp->timeout = conn->supervision_reload *
   12fd6:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
   12fda:	8223      	strh	r3, [r4, #16]
	*rx_enqueue = 1;
   12fdc:	2301      	movs	r3, #1
   12fde:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   12fe0:	2400      	movs	r4, #0
   12fe2:	f7ff bbbd 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   12fe6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   12fea:	f893 0075 	ldrb.w	r0, [r3, #117]	; 0x75
   12fee:	4282      	cmp	r2, r0
   12ff0:	d12a      	bne.n	13048 <isr_rx_conn_pkt_ctrl+0x95c>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   12ff2:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   12ff6:	2105      	movs	r1, #5
   12ff8:	f361 0202 	bfi	r2, r1, #0, #3
   12ffc:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   13000:	2501      	movs	r5, #1
   13002:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   13006:	2400      	movs	r4, #0
   13008:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   1300c:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
   13010:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   13014:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
   13018:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   1301c:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
   13020:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   13024:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   13028:	f365 0101 	bfi	r1, r5, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   1302c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   13030:	406a      	eors	r2, r5
   13032:	f362 0182 	bfi	r1, r2, #2, #1
   13036:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   1303a:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
		conn->llcp_ack--;
   1303e:	3801      	subs	r0, #1
   13040:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
   13044:	f7ff bb8c 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13048:	4040      	eors	r0, r0
   1304a:	f380 8811 	msr	BASEPRI, r0
   1304e:	f04f 0004 	mov.w	r0, #4
   13052:	df02      	svc	2
		LL_ASSERT(_radio.conn_upd == conn);
   13054:	4040      	eors	r0, r0
   13056:	f380 8811 	msr	BASEPRI, r0
   1305a:	f04f 0004 	mov.w	r0, #4
   1305e:	df02      	svc	2
			    conn->llcp_conn_param.ticks_to_offset_next;
   13060:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
			conn->slave.ticks_to_offset =
   13064:	671a      	str	r2, [r3, #112]	; 0x70
   13066:	e79c      	b.n	12fa2 <isr_rx_conn_pkt_ctrl+0x8b6>
		conn->llcp_length.ack = conn->llcp_length.req;
   13068:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->procedure_expire = 0;
   1306c:	2200      	movs	r2, #0
   1306e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		conn->pause_tx = 0;
   13072:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
   13076:	f362 01c3 	bfi	r1, r2, #3, #1
   1307a:	f883 10f8 	strb.w	r1, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   1307e:	2109      	movs	r1, #9
   13080:	7261      	strb	r1, [r4, #9]
		pdu_data_rx->payload.llctrl.opcode =
   13082:	2115      	movs	r1, #21
   13084:	72e1      	strb	r1, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   13086:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   13088:	81a1      	strh	r1, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   1308a:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
   1308c:	8221      	strh	r1, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
   1308e:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   13090:	81e1      	strh	r1, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
   13092:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   13094:	8263      	strh	r3, [r4, #18]
		*rx_enqueue = 1;
   13096:	2301      	movs	r3, #1
   13098:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   1309a:	4614      	mov	r4, r2
   1309c:	f7ff bb60 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
   130a0:	20000dec 	.word	0x20000dec
   130a4:	10624dd3 	.word	0x10624dd3
		switch (rej_ext_ind->reject_opcode) {
   130a8:	7b22      	ldrb	r2, [r4, #12]
   130aa:	2a03      	cmp	r2, #3
   130ac:	f040 835e 	bne.w	1376c <isr_rx_conn_pkt_ctrl+0x1080>
			_radio.conn_curr->pause_rx = 0;
   130b0:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   130b4:	f36f 0282 	bfc	r2, #2, #1
   130b8:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   130bc:	4bcb      	ldr	r3, [pc, #812]	; (133ec <isr_rx_conn_pkt_ctrl+0xd00>)
   130be:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   130c2:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   130c6:	f36f 01c3 	bfc	r1, #3, #1
   130ca:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   130ce:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   130d2:	2300      	movs	r3, #0
   130d4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
			pdu_rx->payload.llctrl.opcode =
   130d8:	220d      	movs	r2, #13
   130da:	72e2      	strb	r2, [r4, #11]
				rej_ext_ind->error_code;
   130dc:	7b62      	ldrb	r2, [r4, #13]
			pdu_rx->payload.llctrl.ctrldata.reject_ind.error_code =
   130de:	7322      	strb	r2, [r4, #12]
			*rx_enqueue = 1;
   130e0:	2201      	movs	r2, #1
   130e2:	703a      	strb	r2, [r7, #0]
	u8_t nack = 0;
   130e4:	461c      	mov	r4, r3
   130e6:	f7ff bb3b 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
		ping_resp_send(_radio.conn_curr);
   130ea:	4628      	mov	r0, r5
   130ec:	f7fd ff76 	bl	10fdc <ping_resp_send>
	u8_t nack = 0;
   130f0:	2400      	movs	r4, #0
		break;
   130f2:	f7ff bb35 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->procedure_expire = 0;
   130f6:	2400      	movs	r4, #0
   130f8:	f8a5 4044 	strh.w	r4, [r5, #68]	; 0x44
		break;
   130fc:	f7ff bb30 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_length.req !=
   13100:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
			   _radio.conn_curr->llcp_length.ack) {
   13104:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
		} else if (_radio.conn_curr->llcp_length.req !=
   13108:	4293      	cmp	r3, r2
   1310a:	d014      	beq.n	13136 <isr_rx_conn_pkt_ctrl+0xa4a>
			_radio.conn_curr->llcp_length.ack =
   1310c:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
   13110:	4bb6      	ldr	r3, [pc, #728]	; (133ec <isr_rx_conn_pkt_ctrl+0xd00>)
   13112:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13116:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1311a:	f36f 02c3 	bfc	r2, #3, #1
   1311e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			*rx_enqueue = 1;
   13122:	2301      	movs	r3, #1
   13124:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   13126:	4bb1      	ldr	r3, [pc, #708]	; (133ec <isr_rx_conn_pkt_ctrl+0xd00>)
   13128:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1312c:	2400      	movs	r4, #0
   1312e:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   13132:	f7ff bb15 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_phy.req !=
   13136:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			   _radio.conn_curr->llcp_phy.ack) {
   1313a:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		} else if (_radio.conn_curr->llcp_phy.req !=
   1313e:	4293      	cmp	r3, r2
   13140:	d02a      	beq.n	13198 <isr_rx_conn_pkt_ctrl+0xaac>
			_radio.conn_curr->llcp_phy.ack =
   13142:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   13146:	49a9      	ldr	r1, [pc, #676]	; (133ec <isr_rx_conn_pkt_ctrl+0xd00>)
   13148:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   1314c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   13150:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   13154:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
   13158:	f362 0002 	bfi	r0, r2, #0, #3
   1315c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
   13160:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13164:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   13168:	f013 0f02 	tst.w	r3, #2
   1316c:	d0db      	beq.n	13126 <isr_rx_conn_pkt_ctrl+0xa3a>
				radio_pdu_node_rx->hdr.type =
   1316e:	230c      	movs	r3, #12
   13170:	7123      	strb	r3, [r4, #4]
				p->status = 0;
   13172:	2300      	movs	r3, #0
   13174:	72e3      	strb	r3, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
   13176:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   1317a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1317e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13182:	7323      	strb	r3, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
   13184:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13188:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1318c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13190:	7363      	strb	r3, [r4, #13]
				*rx_enqueue = 1;
   13192:	2301      	movs	r3, #1
   13194:	703b      	strb	r3, [r7, #0]
   13196:	e7c6      	b.n	13126 <isr_rx_conn_pkt_ctrl+0xa3a>
			switch (llctrl->ctrldata.unknown_rsp.type) {
   13198:	7b23      	ldrb	r3, [r4, #12]
   1319a:	2b12      	cmp	r3, #18
   1319c:	d0c3      	beq.n	13126 <isr_rx_conn_pkt_ctrl+0xa3a>
				*rx_enqueue = 1;
   1319e:	2301      	movs	r3, #1
   131a0:	703b      	strb	r3, [r7, #0]
				break;
   131a2:	e7c0      	b.n	13126 <isr_rx_conn_pkt_ctrl+0xa3a>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   131a4:	4b91      	ldr	r3, [pc, #580]	; (133ec <isr_rx_conn_pkt_ctrl+0xd00>)
   131a6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   131aa:	8e01      	ldrh	r1, [r0, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   131ac:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
   131ae:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
   131b2:	f8b0 8034 	ldrh.w	r8, [r0, #52]	; 0x34
	    ((_radio.conn_curr->llcp_length.req ==
   131b6:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	      _radio.conn_curr->llcp_length.ack) &&
   131ba:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	if (/* Local idle, and Peer request then complete the Peer procedure
   131be:	429a      	cmp	r2, r3
   131c0:	d020      	beq.n	13204 <isr_rx_conn_pkt_ctrl+0xb18>
	      PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   131c2:	429a      	cmp	r2, r3
   131c4:	d007      	beq.n	131d6 <isr_rx_conn_pkt_ctrl+0xaea>
	     ((((_radio.conn_curr->llcp_length.state ==
   131c6:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
		 LLCP_LENGTH_STATE_REQ) ||
   131ca:	f003 0303 	and.w	r3, r3, #3
	      _radio.conn_curr->llcp_length.ack) &&
   131ce:	2b01      	cmp	r3, #1
   131d0:	d960      	bls.n	13294 <isr_rx_conn_pkt_ctrl+0xba8>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   131d2:	2b02      	cmp	r3, #2
   131d4:	d062      	beq.n	1329c <isr_rx_conn_pkt_ctrl+0xbb0>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   131d6:	78f3      	ldrb	r3, [r6, #3]
   131d8:	2b15      	cmp	r3, #21
   131da:	f040 80cb 	bne.w	13374 <isr_rx_conn_pkt_ctrl+0xc88>
	u8_t nack = 0;
   131de:	2400      	movs	r4, #0
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   131e0:	78f3      	ldrb	r3, [r6, #3]
	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
   131e2:	2b14      	cmp	r3, #20
   131e4:	f47f aabc 	bne.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   131e8:	2c00      	cmp	r4, #0
   131ea:	f47f aab9 	bne.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
		length_resp_send(_radio.conn_curr, eff_rx_octets, eff_rx_time,
   131ee:	4b7f      	ldr	r3, [pc, #508]	; (133ec <isr_rx_conn_pkt_ctrl+0xd00>)
   131f0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   131f4:	f8cd 8000 	str.w	r8, [sp]
   131f8:	462b      	mov	r3, r5
   131fa:	464a      	mov	r2, r9
   131fc:	f7fd ff0a 	bl	11014 <length_resp_send>
		break;
   13200:	f7ff baae 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
	     (pdu_data_rx->payload.llctrl.opcode ==
   13204:	78f4      	ldrb	r4, [r6, #3]
	      _radio.conn_curr->llcp_length.ack) &&
   13206:	2c14      	cmp	r4, #20
   13208:	d1db      	bne.n	131c2 <isr_rx_conn_pkt_ctrl+0xad6>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   1320a:	88b3      	ldrh	r3, [r6, #4]
   1320c:	2b1a      	cmp	r3, #26
   1320e:	d903      	bls.n	13218 <isr_rx_conn_pkt_ctrl+0xb2c>
			eff_tx_octets = min(lr->max_rx_octets,
   13210:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   13212:	429d      	cmp	r5, r3
   13214:	bf28      	it	cs
   13216:	461d      	movcs	r5, r3
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   13218:	f8b6 a008 	ldrh.w	sl, [r6, #8]
   1321c:	f1ba 0f1a 	cmp.w	sl, #26
   13220:	d942      	bls.n	132a8 <isr_rx_conn_pkt_ctrl+0xbbc>
			eff_rx_octets = min(lr->max_tx_octets,
   13222:	f1ba 0f1b 	cmp.w	sl, #27
   13226:	bf28      	it	cs
   13228:	f04f 0a1b 	movcs.w	sl, #27
		if (lr->max_rx_time >=
   1322c:	88f3      	ldrh	r3, [r6, #6]
   1322e:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13232:	d304      	bcc.n	1323e <isr_rx_conn_pkt_ctrl+0xb52>
			eff_tx_time = min(lr->max_rx_time,
   13234:	f8b0 8032 	ldrh.w	r8, [r0, #50]	; 0x32
   13238:	4598      	cmp	r8, r3
   1323a:	bf28      	it	cs
   1323c:	4698      	movcs	r8, r3
		if (lr->max_tx_time >=
   1323e:	8973      	ldrh	r3, [r6, #10]
   13240:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13244:	d305      	bcc.n	13252 <isr_rx_conn_pkt_ctrl+0xb66>
			eff_rx_time = min(lr->max_tx_time,
   13246:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1324a:	bf28      	it	cs
   1324c:	f44f 73a4 	movcs.w	r3, #328	; 0x148
   13250:	4699      	mov	r9, r3
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
   13252:	4551      	cmp	r1, sl
   13254:	d066      	beq.n	13324 <isr_rx_conn_pkt_ctrl+0xc38>
	if (_radio.packet_rx_acquire >=
   13256:	4b65      	ldr	r3, [pc, #404]	; (133ec <isr_rx_conn_pkt_ctrl+0xd00>)
   13258:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1325c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13260:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   13262:	429a      	cmp	r2, r3
   13264:	d322      	bcc.n	132ac <isr_rx_conn_pkt_ctrl+0xbc0>
			_radio.packet_rx_last);
   13266:	4b61      	ldr	r3, [pc, #388]	; (133ec <isr_rx_conn_pkt_ctrl+0xd00>)
   13268:	f893 413d 	ldrb.w	r4, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1326c:	1b14      	subs	r4, r2, r4
   1326e:	b2e4      	uxtb	r4, r4
			free_count_rx = packet_rx_acquired_count_get()
   13270:	b2a4      	uxth	r4, r4
				+ mem_free_count_get(_radio.pkt_rx_data_free);
   13272:	4b5e      	ldr	r3, [pc, #376]	; (133ec <isr_rx_conn_pkt_ctrl+0xd00>)
   13274:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   13278:	f7fb fa7b 	bl	e772 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get()
   1327c:	1823      	adds	r3, r4, r0
   1327e:	b29b      	uxth	r3, r3
			LL_ASSERT(free_count_rx <= 0xFF);
   13280:	2bff      	cmp	r3, #255	; 0xff
   13282:	d81d      	bhi.n	132c0 <isr_rx_conn_pkt_ctrl+0xbd4>
			if (_radio.packet_rx_data_count == free_count_rx) {
   13284:	4a59      	ldr	r2, [pc, #356]	; (133ec <isr_rx_conn_pkt_ctrl+0xd00>)
   13286:	f892 2136 	ldrb.w	r2, [r2, #310]	; 0x136
   1328a:	4293      	cmp	r3, r2
   1328c:	d01e      	beq.n	132cc <isr_rx_conn_pkt_ctrl+0xbe0>
   1328e:	4651      	mov	r1, sl
				nack = 1;
   13290:	2401      	movs	r4, #1
   13292:	e7a5      	b.n	131e0 <isr_rx_conn_pkt_ctrl+0xaf4>
	       (pdu_data_rx->payload.llctrl.opcode ==
   13294:	78f2      	ldrb	r2, [r6, #3]
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
   13296:	2a14      	cmp	r2, #20
   13298:	d19b      	bne.n	131d2 <isr_rx_conn_pkt_ctrl+0xae6>
   1329a:	e7b6      	b.n	1320a <isr_rx_conn_pkt_ctrl+0xb1e>
	       ((pdu_data_rx->payload.llctrl.opcode ==
   1329c:	78f3      	ldrb	r3, [r6, #3]
		 PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) ||
   1329e:	3b14      	subs	r3, #20
   132a0:	b2db      	uxtb	r3, r3
		LLCP_LENGTH_STATE_RSP_WAIT) &&
   132a2:	2b01      	cmp	r3, #1
   132a4:	d897      	bhi.n	131d6 <isr_rx_conn_pkt_ctrl+0xaea>
   132a6:	e7b0      	b.n	1320a <isr_rx_conn_pkt_ctrl+0xb1e>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   132a8:	468a      	mov	sl, r1
   132aa:	e7bf      	b.n	1322c <isr_rx_conn_pkt_ctrl+0xb40>
		return (_radio.packet_rx_count -
   132ac:	4b4f      	ldr	r3, [pc, #316]	; (133ec <isr_rx_conn_pkt_ctrl+0xd00>)
   132ae:	f893 413c 	ldrb.w	r4, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   132b2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   132b6:	1ae4      	subs	r4, r4, r3
			_radio.packet_rx_last +
   132b8:	fa52 f484 	uxtab	r4, r2, r4
   132bc:	b2e4      	uxtb	r4, r4
   132be:	e7d7      	b.n	13270 <isr_rx_conn_pkt_ctrl+0xb84>
			LL_ASSERT(free_count_rx <= 0xFF);
   132c0:	4040      	eors	r0, r0
   132c2:	f380 8811 	msr	BASEPRI, r0
   132c6:	f04f 0004 	mov.w	r0, #4
   132ca:	df02      	svc	2
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   132cc:	4b47      	ldr	r3, [pc, #284]	; (133ec <isr_rx_conn_pkt_ctrl+0xd00>)
   132ce:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   132d2:	85d5      	strh	r5, [r2, #46]	; 0x2e
				_radio.conn_curr->llcp_length.rx_octets =
   132d4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   132d8:	f8a2 a0ec 	strh.w	sl, [r2, #236]	; 0xec
				_radio.conn_curr->llcp_length.tx_octets =
   132dc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   132e0:	f8a2 50ee 	strh.w	r5, [r2, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
   132e4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   132e8:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
   132ec:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   132f0:	f8a2 90f0 	strh.w	r9, [r2, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
   132f4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   132f8:	f8a2 80f2 	strh.w	r8, [r2, #242]	; 0xf2
				_radio.conn_curr->llcp_length.ack =
   132fc:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
					(_radio.conn_curr->llcp_length.req - 1);
   13300:	f891 20e8 	ldrb.w	r2, [r1, #232]	; 0xe8
   13304:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
   13306:	f881 20e9 	strb.w	r2, [r1, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
   1330a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1330e:	f891 20ea 	ldrb.w	r2, [r1, #234]	; 0xea
   13312:	f042 0203 	orr.w	r2, r2, #3
   13316:	f881 20ea 	strb.w	r2, [r1, #234]	; 0xea
				_radio.state = STATE_CLOSE;
   1331a:	2203      	movs	r2, #3
   1331c:	741a      	strb	r2, [r3, #16]
   1331e:	4651      	mov	r1, sl
	u8_t nack = 0;
   13320:	2400      	movs	r4, #0
   13322:	e75d      	b.n	131e0 <isr_rx_conn_pkt_ctrl+0xaf4>
			_radio.conn_curr->pause_tx = 0;
   13324:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   13328:	f36f 03c3 	bfc	r3, #3, #1
   1332c:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   13330:	4b2e      	ldr	r3, [pc, #184]	; (133ec <isr_rx_conn_pkt_ctrl+0xd00>)
   13332:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13336:	85d5      	strh	r5, [r2, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
   13338:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1333c:	f8a2 9036 	strh.w	r9, [r2, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
   13340:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13344:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
			_radio.conn_curr->llcp_length.ack =
   13348:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_length.req;
   1334c:	f892 10e8 	ldrb.w	r1, [r2, #232]	; 0xe8
			_radio.conn_curr->llcp_length.ack =
   13350:	f882 10e9 	strb.w	r1, [r2, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
   13354:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13358:	2400      	movs	r4, #0
   1335a:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
			lr->max_rx_octets = eff_rx_octets;
   1335e:	f8a6 a004 	strh.w	sl, [r6, #4]
			lr->max_tx_octets = eff_tx_octets;
   13362:	8135      	strh	r5, [r6, #8]
			lr->max_rx_time = eff_rx_time;
   13364:	f8a6 9006 	strh.w	r9, [r6, #6]
			lr->max_tx_time = eff_tx_time;
   13368:	f8a6 800a 	strh.w	r8, [r6, #10]
			*rx_enqueue = 1;
   1336c:	2301      	movs	r3, #1
   1336e:	703b      	strb	r3, [r7, #0]
   13370:	4651      	mov	r1, sl
   13372:	e735      	b.n	131e0 <isr_rx_conn_pkt_ctrl+0xaf4>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   13374:	4040      	eors	r0, r0
   13376:	f380 8811 	msr	BASEPRI, r0
   1337a:	f04f 0004 	mov.w	r0, #4
   1337e:	df02      	svc	2
		if (_radio.role == ROLE_MASTER) {
   13380:	4b1a      	ldr	r3, [pc, #104]	; (133ec <isr_rx_conn_pkt_ctrl+0xd00>)
   13382:	7bdb      	ldrb	r3, [r3, #15]
   13384:	b2db      	uxtb	r3, r3
   13386:	2b04      	cmp	r3, #4
   13388:	d032      	beq.n	133f0 <isr_rx_conn_pkt_ctrl+0xd04>
			_radio.conn_curr->llcp_phy.state =
   1338a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   1338e:	2202      	movs	r2, #2
   13390:	f362 0301 	bfi	r3, r2, #0, #2
   13394:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			if (_radio.conn_curr->llcp_phy.ack ==
   13398:	4b14      	ldr	r3, [pc, #80]	; (133ec <isr_rx_conn_pkt_ctrl+0xd00>)
   1339a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1339e:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
			    _radio.conn_curr->llcp_phy.req) {
   133a2:	f893 10f4 	ldrb.w	r1, [r3, #244]	; 0xf4
			if (_radio.conn_curr->llcp_phy.ack ==
   133a6:	428a      	cmp	r2, r1
   133a8:	f000 8099 	beq.w	134de <isr_rx_conn_pkt_ctrl+0xdf2>
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   133ac:	4a0f      	ldr	r2, [pc, #60]	; (133ec <isr_rx_conn_pkt_ctrl+0xd00>)
   133ae:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   133b2:	7b61      	ldrb	r1, [r4, #13]
   133b4:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   133b8:	f3c3 0582 	ubfx	r5, r3, #2, #3
   133bc:	4029      	ands	r1, r5
   133be:	f361 0384 	bfi	r3, r1, #2, #3
   133c2:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   133c6:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   133ca:	7b21      	ldrb	r1, [r4, #12]
   133cc:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   133d0:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   133d4:	f361 1347 	bfi	r3, r1, #5, #3
   133d8:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			phy_rsp_send(_radio.conn_curr);
   133dc:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   133e0:	f7fd fe5c 	bl	1109c <phy_rsp_send>
	u8_t nack = 0;
   133e4:	2400      	movs	r4, #0
   133e6:	f7ff b9bb 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
   133ea:	bf00      	nop
   133ec:	20000dec 	.word	0x20000dec
			if ((_radio.conn_curr->llcp_phy.ack !=
   133f0:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
   133f4:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
   133f8:	429a      	cmp	r2, r3
   133fa:	d007      	beq.n	1340c <isr_rx_conn_pkt_ctrl+0xd20>
			    ((_radio.conn_curr->llcp_phy.state ==
   133fc:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
			      LLCP_PHY_STATE_RSP_WAIT) ||
   13400:	f003 0303 	and.w	r3, r3, #3
   13404:	3b01      	subs	r3, #1
   13406:	b2db      	uxtb	r3, r3
			     _radio.conn_curr->llcp_phy.req) &&
   13408:	2b02      	cmp	r3, #2
   1340a:	d913      	bls.n	13434 <isr_rx_conn_pkt_ctrl+0xd48>
			} else if ((_radio.conn_curr->llcp_req !=
   1340c:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
				    _radio.conn_curr->llcp_ack) ||
   13410:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
			} else if ((_radio.conn_curr->llcp_req !=
   13414:	429a      	cmp	r2, r3
   13416:	d105      	bne.n	13424 <isr_rx_conn_pkt_ctrl+0xd38>
				   (_radio.conn_curr->llcp_conn_param.req !=
   13418:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
				    _radio.conn_curr->llcp_conn_param.ack)) {
   1341c:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
				    _radio.conn_curr->llcp_ack) ||
   13420:	429a      	cmp	r2, r3
   13422:	d00f      	beq.n	13444 <isr_rx_conn_pkt_ctrl+0xd58>
				reject_ext_ind_send(_radio.conn_curr,
   13424:	222a      	movs	r2, #42	; 0x2a
   13426:	2116      	movs	r1, #22
   13428:	4628      	mov	r0, r5
   1342a:	f7fd fe17 	bl	1105c <reject_ext_ind_send>
	u8_t nack = 0;
   1342e:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   13430:	f7ff b996 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   13434:	2223      	movs	r2, #35	; 0x23
   13436:	2116      	movs	r1, #22
   13438:	4628      	mov	r0, r5
   1343a:	f7fd fe0f 	bl	1105c <reject_ext_ind_send>
	u8_t nack = 0;
   1343e:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   13440:	f7ff b98e 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
				_radio.conn_curr->llcp_phy.state =
   13444:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   13448:	f043 0303 	orr.w	r3, r3, #3
   1344c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   13450:	4bce      	ldr	r3, [pc, #824]	; (1378c <isr_rx_conn_pkt_ctrl+0x10a0>)
   13452:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13456:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
				    _radio.conn_curr->llcp_phy.req) {
   1345a:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
				if (_radio.conn_curr->llcp_phy.ack ==
   1345e:	428b      	cmp	r3, r1
   13460:	d01a      	beq.n	13498 <isr_rx_conn_pkt_ctrl+0xdac>
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   13462:	49ca      	ldr	r1, [pc, #808]	; (1378c <isr_rx_conn_pkt_ctrl+0x10a0>)
   13464:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
   13468:	7b62      	ldrb	r2, [r4, #13]
   1346a:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   1346e:	f3c3 0582 	ubfx	r5, r3, #2, #3
   13472:	402a      	ands	r2, r5
   13474:	f362 0384 	bfi	r3, r2, #2, #3
   13478:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   1347c:	f8d1 1110 	ldr.w	r1, [r1, #272]	; 0x110
   13480:	7b22      	ldrb	r2, [r4, #12]
   13482:	f891 30f6 	ldrb.w	r3, [r1, #246]	; 0xf6
   13486:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   1348a:	f362 1347 	bfi	r3, r2, #5, #3
   1348e:	f881 30f6 	strb.w	r3, [r1, #246]	; 0xf6
	u8_t nack = 0;
   13492:	2400      	movs	r4, #0
   13494:	f7ff b964 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
					_radio.conn_curr->llcp_phy.ack--;
   13498:	3b01      	subs	r3, #1
   1349a:	f882 30f5 	strb.w	r3, [r2, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
   1349e:	4bbb      	ldr	r3, [pc, #748]	; (1378c <isr_rx_conn_pkt_ctrl+0x10a0>)
   134a0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   134a4:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   134a8:	f36f 0141 	bfc	r1, #1, #1
   134ac:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
   134b0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_tx;
   134b4:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
					_radio.conn_curr->llcp_phy.tx =
   134b8:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   134bc:	f360 0184 	bfi	r1, r0, #2, #3
   134c0:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
					_radio.conn_curr->llcp_phy.rx =
   134c4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_rx;
   134c8:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   134cc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
					_radio.conn_curr->llcp_phy.rx =
   134d0:	f893 10f6 	ldrb.w	r1, [r3, #246]	; 0xf6
   134d4:	f362 1147 	bfi	r1, r2, #5, #3
   134d8:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
   134dc:	e7c1      	b.n	13462 <isr_rx_conn_pkt_ctrl+0xd76>
				_radio.conn_curr->llcp_phy.ack--;
   134de:	3a01      	subs	r2, #1
   134e0:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->llcp_phy.cmd = 0;
   134e4:	4ba9      	ldr	r3, [pc, #676]	; (1378c <isr_rx_conn_pkt_ctrl+0x10a0>)
   134e6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   134ea:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   134ee:	f36f 0141 	bfc	r1, #1, #1
   134f2:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
				_radio.conn_curr->llcp_phy.tx =
   134f6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_tx;
   134fa:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
				_radio.conn_curr->llcp_phy.tx =
   134fe:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   13502:	f360 0184 	bfi	r1, r0, #2, #3
   13506:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx =
   1350a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_rx;
   1350e:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
   13512:	f3c1 01c2 	ubfx	r1, r1, #3, #3
				_radio.conn_curr->llcp_phy.rx =
   13516:	f892 00f6 	ldrb.w	r0, [r2, #246]	; 0xf6
   1351a:	f361 1047 	bfi	r0, r1, #5, #3
   1351e:	f882 00f6 	strb.w	r0, [r2, #246]	; 0xf6
				_radio.conn_curr->procedure_expire =
   13522:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
					_radio.conn_curr->procedure_reload;
   13526:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
				_radio.conn_curr->procedure_expire =
   1352a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   1352e:	e73d      	b.n	133ac <isr_rx_conn_pkt_ctrl+0xcc0>
		if ((_radio.role == ROLE_MASTER) &&
   13530:	4b96      	ldr	r3, [pc, #600]	; (1378c <isr_rx_conn_pkt_ctrl+0x10a0>)
   13532:	7bdb      	ldrb	r3, [r3, #15]
   13534:	b2db      	uxtb	r3, r3
   13536:	2b04      	cmp	r3, #4
   13538:	d002      	beq.n	13540 <isr_rx_conn_pkt_ctrl+0xe54>
	u8_t nack = 0;
   1353a:	2400      	movs	r4, #0
   1353c:	f7ff b910 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
		    (_radio.conn_curr->llcp_phy.ack !=
   13540:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		     _radio.conn_curr->llcp_phy.req) &&
   13544:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
		if ((_radio.role == ROLE_MASTER) &&
   13548:	429a      	cmp	r2, r3
   1354a:	f000 8112 	beq.w	13772 <isr_rx_conn_pkt_ctrl+0x1086>
		    (_radio.conn_curr->llcp_phy.state ==
   1354e:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   13552:	f003 0303 	and.w	r3, r3, #3
		     _radio.conn_curr->llcp_phy.req) &&
   13556:	2b02      	cmp	r3, #2
   13558:	d002      	beq.n	13560 <isr_rx_conn_pkt_ctrl+0xe74>
	u8_t nack = 0;
   1355a:	2400      	movs	r4, #0
   1355c:	f7ff b900 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   13560:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   13564:	f043 0303 	orr.w	r3, r3, #3
   13568:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   1356c:	4a87      	ldr	r2, [pc, #540]	; (1378c <isr_rx_conn_pkt_ctrl+0x10a0>)
   1356e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   13572:	7b61      	ldrb	r1, [r4, #13]
   13574:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13578:	f3c3 0582 	ubfx	r5, r3, #2, #3
   1357c:	4029      	ands	r1, r5
   1357e:	f361 0384 	bfi	r3, r1, #2, #3
   13582:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   13586:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   1358a:	7b21      	ldrb	r1, [r4, #12]
   1358c:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13590:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   13594:	f361 1347 	bfi	r3, r1, #5, #3
   13598:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->procedure_expire = 0;
   1359c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   135a0:	2400      	movs	r4, #0
   135a2:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   135a6:	f7ff b8db 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
	struct connection *conn = _radio.conn_curr;
   135aa:	4b78      	ldr	r3, [pc, #480]	; (1378c <isr_rx_conn_pkt_ctrl+0x10a0>)
   135ac:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
   135b0:	7b23      	ldrb	r3, [r4, #12]
   135b2:	7b61      	ldrb	r1, [r4, #13]
   135b4:	430b      	orrs	r3, r1
   135b6:	f013 0f07 	tst.w	r3, #7
   135ba:	d134      	bne.n	13626 <isr_rx_conn_pkt_ctrl+0xf3a>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   135bc:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   135c0:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
   135c4:	428b      	cmp	r3, r1
   135c6:	f000 8086 	beq.w	136d6 <isr_rx_conn_pkt_ctrl+0xfea>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   135ca:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   135ce:	f003 0303 	and.w	r3, r3, #3
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   135d2:	2b02      	cmp	r3, #2
   135d4:	d00c      	beq.n	135f0 <isr_rx_conn_pkt_ctrl+0xf04>
			return 0;
   135d6:	2300      	movs	r3, #0
		if (phy_upd_ind(radio_pdu_node_rx, rx_enqueue)) {
   135d8:	2b00      	cmp	r3, #0
   135da:	f000 80cd 	beq.w	13778 <isr_rx_conn_pkt_ctrl+0x108c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   135de:	4b6b      	ldr	r3, [pc, #428]	; (1378c <isr_rx_conn_pkt_ctrl+0x10a0>)
   135e0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   135e4:	2228      	movs	r2, #40	; 0x28
   135e6:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   135ea:	2400      	movs	r4, #0
   135ec:	f7ff b8b8 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   135f0:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
		conn->procedure_expire = 0;
   135f4:	2300      	movs	r3, #0
   135f6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
   135fa:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   135fe:	f013 0f02 	tst.w	r3, #2
   13602:	d06a      	beq.n	136da <isr_rx_conn_pkt_ctrl+0xfee>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13604:	230c      	movs	r3, #12
   13606:	7123      	strb	r3, [r4, #4]
		p->status = 0;
   13608:	2300      	movs	r3, #0
   1360a:	72e3      	strb	r3, [r4, #11]
		p->tx = conn->phy_tx;
   1360c:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   13610:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   13614:	7321      	strb	r1, [r4, #12]
		p->rx = conn->phy_rx;
   13616:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
   1361a:	f3c2 0202 	ubfx	r2, r2, #0, #3
   1361e:	7362      	strb	r2, [r4, #13]
		*rx_enqueue = 1;
   13620:	2201      	movs	r2, #1
   13622:	703a      	strb	r2, [r7, #0]
   13624:	e7d8      	b.n	135d8 <isr_rx_conn_pkt_ctrl+0xeec>
	if (((p->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   13626:	89e3      	ldrh	r3, [r4, #14]
   13628:	8c51      	ldrh	r1, [r2, #34]	; 0x22
   1362a:	1a5b      	subs	r3, r3, r1
   1362c:	b29b      	uxth	r3, r3
   1362e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   13632:	da54      	bge.n	136de <isr_rx_conn_pkt_ctrl+0xff2>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13634:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
   13638:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
   1363c:	428b      	cmp	r3, r1
   1363e:	d134      	bne.n	136aa <isr_rx_conn_pkt_ctrl+0xfbe>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   13640:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   13644:	f892 00f4 	ldrb.w	r0, [r2, #244]	; 0xf4
   13648:	4283      	cmp	r3, r0
   1364a:	d005      	beq.n	13658 <isr_rx_conn_pkt_ctrl+0xf6c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   1364c:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   13650:	f003 0303 	and.w	r3, r3, #3
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   13654:	2b02      	cmp	r3, #2
   13656:	d02e      	beq.n	136b6 <isr_rx_conn_pkt_ctrl+0xfca>
	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
   13658:	7b60      	ldrb	r0, [r4, #13]
   1365a:	f000 0007 	and.w	r0, r0, #7
   1365e:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   13662:	f360 0384 	bfi	r3, r0, #2, #3
   13666:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
   1366a:	7b25      	ldrb	r5, [r4, #12]
   1366c:	b2db      	uxtb	r3, r3
   1366e:	f365 1347 	bfi	r3, r5, #5, #3
   13672:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = p->instant;
   13676:	89e3      	ldrh	r3, [r4, #14]
   13678:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
	conn->llcp.phy_upd_ind.initiate = 0;
   1367c:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   13680:	f36f 0300 	bfc	r3, #0, #1
   13684:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
   13688:	2408      	movs	r4, #8
   1368a:	f882 4076 	strb.w	r4, [r2, #118]	; 0x76
	conn->llcp_ack--;
   1368e:	3901      	subs	r1, #1
   13690:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
   13694:	f003 031c 	and.w	r3, r3, #28
   13698:	b31b      	cbz	r3, 136e2 <isr_rx_conn_pkt_ctrl+0xff6>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1369a:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   1369e:	f360 0302 	bfi	r3, r0, #0, #3
   136a2:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	return 0;
   136a6:	2300      	movs	r3, #0
   136a8:	e796      	b.n	135d8 <isr_rx_conn_pkt_ctrl+0xeec>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   136aa:	4040      	eors	r0, r0
   136ac:	f380 8811 	msr	BASEPRI, r0
   136b0:	f04f 0004 	mov.w	r0, #4
   136b4:	df02      	svc	2
		conn->llcp_phy.ack = conn->llcp_phy.req;
   136b6:	f882 00f5 	strb.w	r0, [r2, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   136ba:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   136be:	f3c3 0340 	ubfx	r3, r3, #1, #1
   136c2:	f892 0078 	ldrb.w	r0, [r2, #120]	; 0x78
   136c6:	f363 0041 	bfi	r0, r3, #1, #1
   136ca:	f882 0078 	strb.w	r0, [r2, #120]	; 0x78
		conn->procedure_expire = 0;
   136ce:	2300      	movs	r3, #0
   136d0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
   136d4:	e7c0      	b.n	13658 <isr_rx_conn_pkt_ctrl+0xf6c>
			return 0;
   136d6:	2300      	movs	r3, #0
   136d8:	e77e      	b.n	135d8 <isr_rx_conn_pkt_ctrl+0xeec>
			return 0;
   136da:	2300      	movs	r3, #0
   136dc:	e77c      	b.n	135d8 <isr_rx_conn_pkt_ctrl+0xeec>
		return 1;
   136de:	2301      	movs	r3, #1
   136e0:	e77a      	b.n	135d8 <isr_rx_conn_pkt_ctrl+0xeec>
	return 0;
   136e2:	2300      	movs	r3, #0
   136e4:	e778      	b.n	135d8 <isr_rx_conn_pkt_ctrl+0xeec>
		if (!_radio.conn_curr->role) {
   136e6:	2b00      	cmp	r3, #0
   136e8:	db49      	blt.n	1377e <isr_rx_conn_pkt_ctrl+0x1092>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
   136ea:	7b21      	ldrb	r1, [r4, #12]
   136ec:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   136f0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   136f4:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   136f8:	f002 0207 	and.w	r2, r2, #7
   136fc:	4313      	orrs	r3, r2
   136fe:	4219      	tst	r1, r3
   13700:	d040      	beq.n	13784 <isr_rx_conn_pkt_ctrl+0x1098>
			if (conn->llcp_req != conn->llcp_ack) {
   13702:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   13706:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   1370a:	429a      	cmp	r2, r3
   1370c:	d002      	beq.n	13714 <isr_rx_conn_pkt_ctrl+0x1028>
	u8_t nack = 0;
   1370e:	2400      	movs	r4, #0
   13710:	f7ff b826 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
			memcpy(&conn->llcp.chan_map.chm[0],
   13714:	2205      	movs	r2, #5
   13716:	491e      	ldr	r1, [pc, #120]	; (13790 <isr_rx_conn_pkt_ctrl+0x10a4>)
   13718:	f105 0079 	add.w	r0, r5, #121	; 0x79
   1371c:	f7ec fdd0 	bl	2c0 <memcpy>
			conn->llcp.chan_map.initiate = 1;
   13720:	2301      	movs	r3, #1
   13722:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
   13726:	2302      	movs	r3, #2
   13728:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
   1372c:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   13730:	3b01      	subs	r3, #1
   13732:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	u8_t nack = 0;
   13736:	2400      	movs	r4, #0
   13738:	f7ff b812 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
		unknown_rsp_send(_radio.conn_curr,
   1373c:	4628      	mov	r0, r5
   1373e:	f7fd fcd3 	bl	110e8 <unknown_rsp_send>
	u8_t nack = 0;
   13742:	2400      	movs	r4, #0
		break;
   13744:	f7ff b80c 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
	u8_t nack = 0;
   13748:	2400      	movs	r4, #0
   1374a:	f7ff b809 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
   1374e:	2400      	movs	r4, #0
   13750:	f7ff b806 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
   13754:	2400      	movs	r4, #0
   13756:	f7ff b803 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
   1375a:	2400      	movs	r4, #0
   1375c:	f7ff b800 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
   13760:	2400      	movs	r4, #0
   13762:	f7fe bffd 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
   13766:	2400      	movs	r4, #0
   13768:	f7fe bffa 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
   1376c:	2400      	movs	r4, #0
   1376e:	f7fe bff7 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
   13772:	2400      	movs	r4, #0
   13774:	f7fe bff4 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
   13778:	2400      	movs	r4, #0
   1377a:	f7fe bff1 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
   1377e:	2400      	movs	r4, #0
   13780:	f7fe bfee 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
   13784:	2400      	movs	r4, #0
   13786:	f7fe bfeb 	b.w	12760 <isr_rx_conn_pkt_ctrl+0x74>
   1378a:	bf00      	nop
   1378c:	20000dec 	.word	0x20000dec
   13790:	20000f02 	.word	0x20000f02

00013794 <packet_rx_enqueue>:
{
   13794:	b508      	push	{r3, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   13796:	4a1a      	ldr	r2, [pc, #104]	; (13800 <packet_rx_enqueue+0x6c>)
   13798:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   1379c:	b2db      	uxtb	r3, r3
   1379e:	f892 213e 	ldrb.w	r2, [r2, #318]	; 0x13e
   137a2:	4293      	cmp	r3, r2
   137a4:	d01d      	beq.n	137e2 <packet_rx_enqueue+0x4e>
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   137a6:	4a16      	ldr	r2, [pc, #88]	; (13800 <packet_rx_enqueue+0x6c>)
   137a8:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
   137ac:	f892 113d 	ldrb.w	r1, [r2, #317]	; 0x13d
   137b0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	link = radio_pdu_node_rx->hdr.onion.link;
   137b4:	6801      	ldr	r1, [r0, #0]
	    _radio.packet_release_last;
   137b6:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   137ba:	7003      	strb	r3, [r0, #0]
	last = _radio.packet_rx_last + 1;
   137bc:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   137c0:	3301      	adds	r3, #1
   137c2:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
   137c4:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   137c8:	4293      	cmp	r3, r2
   137ca:	d010      	beq.n	137ee <packet_rx_enqueue+0x5a>
	_radio.packet_rx_last = last;
   137cc:	4a0c      	ldr	r2, [pc, #48]	; (13800 <packet_rx_enqueue+0x6c>)
   137ce:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	link = memq_enqueue(radio_pdu_node_rx, link,
   137d2:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   137d6:	f7fb f800 	bl	e7da <memq_enqueue>
	LL_ASSERT(link);
   137da:	b150      	cbz	r0, 137f2 <packet_rx_enqueue+0x5e>
	packet_rx_callback();
   137dc:	f7fe f871 	bl	118c2 <packet_rx_callback>
   137e0:	bd08      	pop	{r3, pc}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   137e2:	4040      	eors	r0, r0
   137e4:	f380 8811 	msr	BASEPRI, r0
   137e8:	f04f 0004 	mov.w	r0, #4
   137ec:	df02      	svc	2
		last = 0;
   137ee:	2300      	movs	r3, #0
   137f0:	e7ec      	b.n	137cc <packet_rx_enqueue+0x38>
	LL_ASSERT(link);
   137f2:	4040      	eors	r0, r0
   137f4:	f380 8811 	msr	BASEPRI, r0
   137f8:	f04f 0004 	mov.w	r0, #4
   137fc:	df02      	svc	2
   137fe:	bf00      	nop
   13800:	20000dec 	.word	0x20000dec

00013804 <mayfly_adv_stop>:
{
   13804:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
   13806:	4b1c      	ldr	r3, [pc, #112]	; (13878 <mayfly_adv_stop+0x74>)
   13808:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1380c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13810:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   13812:	429a      	cmp	r2, r3
   13814:	d31d      	bcc.n	13852 <mayfly_adv_stop+0x4e>
			_radio.packet_rx_last);
   13816:	4b18      	ldr	r3, [pc, #96]	; (13878 <mayfly_adv_stop+0x74>)
   13818:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1381c:	1ad3      	subs	r3, r2, r3
   1381e:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   13820:	b30b      	cbz	r3, 13866 <mayfly_adv_stop+0x62>
	return _radio.packet_rx[_radio.packet_rx_last];
   13822:	4b15      	ldr	r3, [pc, #84]	; (13878 <mayfly_adv_stop+0x74>)
   13824:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   13828:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1382c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
	LL_ASSERT(radio_pdu_node_rx);
   13830:	b1dc      	cbz	r4, 1386a <mayfly_adv_stop+0x66>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   13832:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13836:	80e3      	strh	r3, [r4, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   13838:	2306      	movs	r3, #6
   1383a:	7123      	strb	r3, [r4, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
   1383c:	221d      	movs	r2, #29
   1383e:	2100      	movs	r1, #0
   13840:	f104 000b 	add.w	r0, r4, #11
   13844:	f015 ff48 	bl	296d8 <memset>
	radio_le_conn_cmplt->status = 0x3c;
   13848:	233c      	movs	r3, #60	; 0x3c
   1384a:	72e3      	strb	r3, [r4, #11]
	packet_rx_enqueue();
   1384c:	f7ff ffa2 	bl	13794 <packet_rx_enqueue>
   13850:	bd10      	pop	{r4, pc}
		return (_radio.packet_rx_count -
   13852:	4909      	ldr	r1, [pc, #36]	; (13878 <mayfly_adv_stop+0x74>)
   13854:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   13858:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1385c:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1385e:	fa52 f383 	uxtab	r3, r2, r3
   13862:	b2db      	uxtb	r3, r3
   13864:	e7dc      	b.n	13820 <mayfly_adv_stop+0x1c>
		return 0;
   13866:	2400      	movs	r4, #0
   13868:	e7e2      	b.n	13830 <mayfly_adv_stop+0x2c>
	LL_ASSERT(radio_pdu_node_rx);
   1386a:	4040      	eors	r0, r0
   1386c:	f380 8811 	msr	BASEPRI, r0
   13870:	f04f 0004 	mov.w	r0, #4
   13874:	df02      	svc	2
   13876:	bf00      	nop
   13878:	20000dec 	.word	0x20000dec

0001387c <terminate_ind_rx_enqueue>:
{
   1387c:	b510      	push	{r4, lr}
   1387e:	4603      	mov	r3, r0
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   13880:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
   13884:	b1bc      	cbz	r4, 138b6 <terminate_ind_rx_enqueue+0x3a>
   13886:	30b4      	adds	r0, #180	; 0xb4
   13888:	460a      	mov	r2, r1
	radio_pdu_node_rx->hdr.handle = conn->handle;
   1388a:	8c19      	ldrh	r1, [r3, #32]
   1388c:	f8a3 10ba 	strh.w	r1, [r3, #186]	; 0xba
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   13890:	2107      	movs	r1, #7
   13892:	f883 10b8 	strb.w	r1, [r3, #184]	; 0xb8
	*((u8_t *)radio_pdu_node_rx->pdu_data) = reason;
   13896:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	    _radio.packet_release_last;
   1389a:	4a0d      	ldr	r2, [pc, #52]	; (138d0 <terminate_ind_rx_enqueue+0x54>)
   1389c:	f892 1174 	ldrb.w	r1, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   138a0:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	link = memq_enqueue(radio_pdu_node_rx, link,
   138a4:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   138a8:	4621      	mov	r1, r4
   138aa:	f7fa ff96 	bl	e7da <memq_enqueue>
	LL_ASSERT(link);
   138ae:	b140      	cbz	r0, 138c2 <terminate_ind_rx_enqueue+0x46>
	packet_rx_callback();
   138b0:	f7fe f807 	bl	118c2 <packet_rx_callback>
   138b4:	bd10      	pop	{r4, pc}
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   138b6:	4040      	eors	r0, r0
   138b8:	f380 8811 	msr	BASEPRI, r0
   138bc:	f04f 0004 	mov.w	r0, #4
   138c0:	df02      	svc	2
	LL_ASSERT(link);
   138c2:	4040      	eors	r0, r0
   138c4:	f380 8811 	msr	BASEPRI, r0
   138c8:	f04f 0004 	mov.w	r0, #4
   138cc:	df02      	svc	2
   138ce:	bf00      	nop
   138d0:	20000dec 	.word	0x20000dec

000138d4 <isr_rx_scan_report>:
{
   138d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (_radio.packet_rx_acquire >=
   138d8:	4b31      	ldr	r3, [pc, #196]	; (139a0 <isr_rx_scan_report+0xcc>)
   138da:	f893 413e 	ldrb.w	r4, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   138de:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   138e2:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   138e4:	429c      	cmp	r4, r3
   138e6:	d327      	bcc.n	13938 <isr_rx_scan_report+0x64>
			_radio.packet_rx_last);
   138e8:	4b2d      	ldr	r3, [pc, #180]	; (139a0 <isr_rx_scan_report+0xcc>)
   138ea:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   138ee:	1ae3      	subs	r3, r4, r3
   138f0:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   138f2:	2b02      	cmp	r3, #2
   138f4:	d92a      	bls.n	1394c <isr_rx_scan_report+0x78>
	return _radio.packet_rx[_radio.packet_rx_last];
   138f6:	4b2a      	ldr	r3, [pc, #168]	; (139a0 <isr_rx_scan_report+0xcc>)
   138f8:	f8d3 4138 	ldr.w	r4, [r3, #312]	; 0x138
   138fc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13900:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
	if (radio_pdu_node_rx == 0) {
   13904:	2c00      	cmp	r4, #0
   13906:	d047      	beq.n	13998 <isr_rx_scan_report+0xc4>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   13908:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1390c:	80e3      	strh	r3, [r4, #6]
	} else if (_radio.scanner.phy) {
   1390e:	4b24      	ldr	r3, [pc, #144]	; (139a0 <isr_rx_scan_report+0xcc>)
   13910:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   13914:	f013 0f07 	tst.w	r3, #7
   13918:	d020      	beq.n	1395c <isr_rx_scan_report+0x88>
		switch (_radio.scanner.phy) {
   1391a:	4b21      	ldr	r3, [pc, #132]	; (139a0 <isr_rx_scan_report+0xcc>)
   1391c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   13920:	f003 0307 	and.w	r3, r3, #7
   13924:	2b01      	cmp	r3, #1
   13926:	d013      	beq.n	13950 <isr_rx_scan_report+0x7c>
   13928:	2b04      	cmp	r3, #4
   1392a:	d014      	beq.n	13956 <isr_rx_scan_report+0x82>
			LL_ASSERT(0);
   1392c:	4040      	eors	r0, r0
   1392e:	f380 8811 	msr	BASEPRI, r0
   13932:	f04f 0004 	mov.w	r0, #4
   13936:	df02      	svc	2
		return (_radio.packet_rx_count -
   13938:	4d19      	ldr	r5, [pc, #100]	; (139a0 <isr_rx_scan_report+0xcc>)
   1393a:	f895 313c 	ldrb.w	r3, [r5, #316]	; 0x13c
			_radio.packet_rx_last +
   1393e:	f895 513d 	ldrb.w	r5, [r5, #317]	; 0x13d
		return (_radio.packet_rx_count -
   13942:	1b5b      	subs	r3, r3, r5
			_radio.packet_rx_last +
   13944:	fa54 f383 	uxtab	r3, r4, r3
   13948:	b2db      	uxtb	r3, r3
   1394a:	e7d2      	b.n	138f2 <isr_rx_scan_report+0x1e>
		return 0;
   1394c:	2400      	movs	r4, #0
   1394e:	e7d9      	b.n	13904 <isr_rx_scan_report+0x30>
			radio_pdu_node_rx->hdr.type =
   13950:	2303      	movs	r3, #3
   13952:	7123      	strb	r3, [r4, #4]
			break;
   13954:	e004      	b.n	13960 <isr_rx_scan_report+0x8c>
			radio_pdu_node_rx->hdr.type =
   13956:	2304      	movs	r3, #4
   13958:	7123      	strb	r3, [r4, #4]
			break;
   1395a:	e001      	b.n	13960 <isr_rx_scan_report+0x8c>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1395c:	2302      	movs	r3, #2
   1395e:	7123      	strb	r3, [r4, #4]
   13960:	4615      	mov	r5, r2
   13962:	460e      	mov	r6, r1
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
   13964:	f104 0708 	add.w	r7, r4, #8
			     pdu_adv_rx->len] =
   13968:	f894 8009 	ldrb.w	r8, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   1396c:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
   13970:	b968      	cbnz	r0, 1398e <isr_rx_scan_report+0xba>
   13972:	207f      	movs	r0, #127	; 0x7f
   13974:	f807 0008 	strb.w	r0, [r7, r8]
			     pdu_adv_rx->len + 1] = rl_idx;
   13978:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   1397a:	3303      	adds	r3, #3
			     pdu_adv_rx->len + 1] = rl_idx;
   1397c:	54fe      	strb	r6, [r7, r3]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   1397e:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   13980:	3304      	adds	r3, #4
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   13982:	54fd      	strb	r5, [r7, r3]
	packet_rx_enqueue();
   13984:	f7ff ff06 	bl	13794 <packet_rx_enqueue>
	return 0;
   13988:	2000      	movs	r0, #0
   1398a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   1398e:	f7fb f949 	bl	ec24 <radio_rssi_get>
			     pdu_adv_rx->len] =
   13992:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   13996:	e7ed      	b.n	13974 <isr_rx_scan_report+0xa0>
		return 1;
   13998:	2001      	movs	r0, #1
}
   1399a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1399e:	bf00      	nop
   139a0:	20000dec 	.word	0x20000dec

000139a4 <isr_rx_conn>:
{
   139a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   139a8:	b084      	sub	sp, #16
	u8_t rx_enqueue = 0;
   139aa:	2300      	movs	r3, #0
   139ac:	f88d 300b 	strb.w	r3, [sp, #11]
	_radio.packet_counter++;
   139b0:	4bc1      	ldr	r3, [pc, #772]	; (13cb8 <isr_rx_conn+0x314>)
   139b2:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
   139b6:	3201      	adds	r2, #1
   139b8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   139bc:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   139c0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   139c4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   139c8:	2301      	movs	r3, #1
   139ca:	712b      	strb	r3, [r5, #4]
	if (crc_ok) {
   139cc:	4607      	mov	r7, r0
   139ce:	2800      	cmp	r0, #0
   139d0:	d143      	bne.n	13a5a <isr_rx_conn+0xb6>
		if (_radio.crc_expire == 0) {
   139d2:	4bb9      	ldr	r3, [pc, #740]	; (13cb8 <isr_rx_conn+0x314>)
   139d4:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
   139d8:	b91b      	cbnz	r3, 139e2 <isr_rx_conn+0x3e>
			_radio.crc_expire = 2;
   139da:	2202      	movs	r2, #2
   139dc:	4bb6      	ldr	r3, [pc, #728]	; (13cb8 <isr_rx_conn+0x314>)
   139de:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		_radio.crc_expire--;
   139e2:	4bb5      	ldr	r3, [pc, #724]	; (13cb8 <isr_rx_conn+0x314>)
   139e4:	f893 4115 	ldrb.w	r4, [r3, #277]	; 0x115
   139e8:	3c01      	subs	r4, #1
   139ea:	b2e4      	uxtb	r4, r4
   139ec:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		crc_close = (_radio.crc_expire == 0);
   139f0:	fab4 f484 	clz	r4, r4
   139f4:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
   139f6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   139fa:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   139fe:	2a00      	cmp	r2, #0
   13a00:	f040 8387 	bne.w	14112 <isr_rx_conn+0x76e>
				_radio.conn_curr->supervision_reload;
   13a04:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
   13a06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	struct radio_pdu_node_tx *tx_release = NULL;
   13a0a:	2600      	movs	r6, #0
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   13a0c:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 13cb8 <isr_rx_conn+0x314>
   13a10:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   13a14:	f890 80f8 	ldrb.w	r8, [r0, #248]	; 0xf8
   13a18:	ea4f 18d8 	mov.w	r8, r8, lsr #7
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   13a1c:	a903      	add	r1, sp, #12
   13a1e:	f7fe f8ef 	bl	11c00 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   13a22:	f899 3010 	ldrb.w	r3, [r9, #16]
			STATE_CLOSE : STATE_TX;
   13a26:	2b03      	cmp	r3, #3
   13a28:	f000 8376 	beq.w	14118 <isr_rx_conn+0x774>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   13a2c:	2c00      	cmp	r4, #0
   13a2e:	f040 8372 	bne.w	14116 <isr_rx_conn+0x772>
   13a32:	b147      	cbz	r7, 13a46 <isr_rx_conn+0xa2>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   13a34:	7a2b      	ldrb	r3, [r5, #8]
   13a36:	f013 0f10 	tst.w	r3, #16
   13a3a:	d104      	bne.n	13a46 <isr_rx_conn+0xa2>
			 (pdu_data_tx->len == 0)) ||
   13a3c:	9b03      	ldr	r3, [sp, #12]
   13a3e:	785b      	ldrb	r3, [r3, #1]
			((crc_ok) && (pdu_data_rx->md == 0) &&
   13a40:	2b00      	cmp	r3, #0
   13a42:	f000 83aa 	beq.w	1419a <isr_rx_conn+0x7f6>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   13a46:	4b9c      	ldr	r3, [pc, #624]	; (13cb8 <isr_rx_conn+0x314>)
   13a48:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13a4c:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
			 (pdu_data_tx->len == 0)) ||
   13a50:	2b00      	cmp	r3, #0
   13a52:	f000 83a4 	beq.w	1419e <isr_rx_conn+0x7fa>
			STATE_CLOSE : STATE_TX;
   13a56:	2303      	movs	r3, #3
   13a58:	e35e      	b.n	14118 <isr_rx_conn+0x774>
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   13a5a:	f105 0808 	add.w	r8, r5, #8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   13a5e:	7a2a      	ldrb	r2, [r5, #8]
   13a60:	f3c2 0280 	ubfx	r2, r2, #2, #1
   13a64:	4b94      	ldr	r3, [pc, #592]	; (13cb8 <isr_rx_conn+0x314>)
   13a66:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13a6a:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   13a6e:	f003 0301 	and.w	r3, r3, #1
   13a72:	429a      	cmp	r2, r3
   13a74:	f000 81cd 	beq.w	13e12 <isr_rx_conn+0x46e>
		_radio.conn_curr->sn++;
   13a78:	f083 0301 	eor.w	r3, r3, #1
   13a7c:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   13a80:	f363 0200 	bfi	r2, r3, #0, #1
   13a84:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   13a88:	4b8b      	ldr	r3, [pc, #556]	; (13cb8 <isr_rx_conn+0x314>)
   13a8a:	7bdb      	ldrb	r3, [r3, #15]
   13a8c:	b2db      	uxtb	r3, r3
   13a8e:	2b03      	cmp	r3, #3
   13a90:	d02c      	beq.n	13aec <isr_rx_conn+0x148>
		if (_radio.conn_curr->empty == 0) {
   13a92:	4b89      	ldr	r3, [pc, #548]	; (13cb8 <isr_rx_conn+0x314>)
   13a94:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13a98:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13a9c:	f012 0f80 	tst.w	r2, #128	; 0x80
   13aa0:	f040 81ae 	bne.w	13e00 <isr_rx_conn+0x45c>
			node_tx = _radio.conn_curr->pkt_tx_head;
   13aa4:	f8d3 613c 	ldr.w	r6, [r3, #316]	; 0x13c
				(node_tx->pdu_data +
   13aa8:	f106 0c04 	add.w	ip, r6, #4
				 _radio.conn_curr->packet_tx_head_offset);
   13aac:	f893 e151 	ldrb.w	lr, [r3, #337]	; 0x151
			pdu_data_tx = (struct pdu_data *)
   13ab0:	eb0c 090e 	add.w	r9, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
   13ab4:	f899 4001 	ldrb.w	r4, [r9, #1]
			if (pdu_data_tx_len != 0) {
   13ab8:	2c00      	cmp	r4, #0
   13aba:	f000 8145 	beq.w	13d48 <isr_rx_conn+0x3a4>
				if (_radio.conn_curr->enc_tx) {
   13abe:	f012 0f20 	tst.w	r2, #32
   13ac2:	d00a      	beq.n	13ada <isr_rx_conn+0x136>
					_radio.conn_curr->ccm_tx.counter++;
   13ac4:	f8d3 012a 	ldr.w	r0, [r3, #298]	; 0x12a
   13ac8:	f8d3 112e 	ldr.w	r1, [r3, #302]	; 0x12e
   13acc:	3001      	adds	r0, #1
   13ace:	f141 0100 	adc.w	r1, r1, #0
   13ad2:	f8c3 012a 	str.w	r0, [r3, #298]	; 0x12a
   13ad6:	f8c3 112e 	str.w	r1, [r3, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   13ada:	f81c 300e 	ldrb.w	r3, [ip, lr]
   13ade:	f003 0303 	and.w	r3, r3, #3
   13ae2:	2b03      	cmp	r3, #3
   13ae4:	d00c      	beq.n	13b00 <isr_rx_conn+0x15c>
	u8_t terminate = 0;
   13ae6:	f04f 0900 	mov.w	r9, #0
   13aea:	e12e      	b.n	13d4a <isr_rx_conn+0x3a6>
			_radio.conn_curr->slave.latency_enabled = 1;
   13aec:	4b72      	ldr	r3, [pc, #456]	; (13cb8 <isr_rx_conn+0x314>)
   13aee:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13af2:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   13af6:	f043 0301 	orr.w	r3, r3, #1
   13afa:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   13afe:	e7c8      	b.n	13a92 <isr_rx_conn+0xee>
	switch (pdu_data_tx->payload.llctrl.opcode) {
   13b00:	f899 3003 	ldrb.w	r3, [r9, #3]
   13b04:	3b02      	subs	r3, #2
   13b06:	2b16      	cmp	r3, #22
   13b08:	f200 8118 	bhi.w	13d3c <isr_rx_conn+0x398>
   13b0c:	e8df f013 	tbh	[pc, r3, lsl #1]
   13b10:	00330017 	.word	0x00330017
   13b14:	01160057 	.word	0x01160057
   13b18:	01160116 	.word	0x01160116
   13b1c:	01160116 	.word	0x01160116
   13b20:	007d0063 	.word	0x007d0063
   13b24:	00970116 	.word	0x00970116
   13b28:	01160116 	.word	0x01160116
   13b2c:	01160116 	.word	0x01160116
   13b30:	01160116 	.word	0x01160116
   13b34:	011600af 	.word	0x011600af
   13b38:	00e000d6 	.word	0x00e000d6
   13b3c:	0106      	.short	0x0106
		_radio.state = STATE_CLOSE;
   13b3e:	2203      	movs	r2, #3
   13b40:	4b5d      	ldr	r3, [pc, #372]	; (13cb8 <isr_rx_conn+0x314>)
   13b42:	741a      	strb	r2, [r3, #16]
		radio_disable();
   13b44:	f7fa fff6 	bl	eb34 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   13b48:	f7fb f80e 	bl	eb68 <radio_is_ready>
   13b4c:	b958      	cbnz	r0, 13b66 <isr_rx_conn+0x1c2>
		terminate_ind_rx_enqueue(_radio.conn_curr,
   13b4e:	4b5a      	ldr	r3, [pc, #360]	; (13cb8 <isr_rx_conn+0x314>)
   13b50:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
   13b54:	f899 1004 	ldrb.w	r1, [r9, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   13b58:	2913      	cmp	r1, #19
   13b5a:	d00a      	beq.n	13b72 <isr_rx_conn+0x1ce>
   13b5c:	f7ff fe8e 	bl	1387c <terminate_ind_rx_enqueue>
		terminate = 1;
   13b60:	f04f 0901 	mov.w	r9, #1
   13b64:	e0f1      	b.n	13d4a <isr_rx_conn+0x3a6>
		LL_ASSERT(!radio_is_ready());
   13b66:	4040      	eors	r0, r0
   13b68:	f380 8811 	msr	BASEPRI, r0
   13b6c:	f04f 0004 	mov.w	r0, #4
   13b70:	df02      	svc	2
		terminate_ind_rx_enqueue(_radio.conn_curr,
   13b72:	2116      	movs	r1, #22
   13b74:	e7f2      	b.n	13b5c <isr_rx_conn+0x1b8>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   13b76:	f8df a140 	ldr.w	sl, [pc, #320]	; 13cb8 <isr_rx_conn+0x314>
   13b7a:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   13b7e:	2208      	movs	r2, #8
   13b80:	f109 010e 	add.w	r1, r9, #14
   13b84:	3093      	adds	r0, #147	; 0x93
   13b86:	f7ec fb9b 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   13b8a:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   13b8e:	2204      	movs	r2, #4
   13b90:	f109 0116 	add.w	r1, r9, #22
   13b94:	f500 7089 	add.w	r0, r0, #274	; 0x112
   13b98:	f7ec fb92 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_tx = 1;
   13b9c:	f8da 2110 	ldr.w	r2, [sl, #272]	; 0x110
   13ba0:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13ba4:	f043 0308 	orr.w	r3, r3, #8
   13ba8:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   13bac:	f8da 3110 	ldr.w	r3, [sl, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   13bb0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   13bb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   13bb8:	f04f 0900 	mov.w	r9, #0
   13bbc:	e0c5      	b.n	13d4a <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   13bbe:	4b3e      	ldr	r3, [pc, #248]	; (13cb8 <isr_rx_conn+0x314>)
   13bc0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13bc4:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13bc8:	f043 0308 	orr.w	r3, r3, #8
   13bcc:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   13bd0:	f04f 0900 	mov.w	r9, #0
   13bd4:	e0b9      	b.n	13d4a <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   13bd6:	4b38      	ldr	r3, [pc, #224]	; (13cb8 <isr_rx_conn+0x314>)
   13bd8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13bdc:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   13be0:	f042 0208 	orr.w	r2, r2, #8
   13be4:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   13be8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13bec:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   13bf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   13bf4:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   13bf8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   13bfc:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   13c00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   13c04:	f04f 0900 	mov.w	r9, #0
   13c08:	e09f      	b.n	13d4a <isr_rx_conn+0x3a6>
		if (_radio.role == ROLE_MASTER) {
   13c0a:	4b2b      	ldr	r3, [pc, #172]	; (13cb8 <isr_rx_conn+0x314>)
   13c0c:	7bdb      	ldrb	r3, [r3, #15]
   13c0e:	b2db      	uxtb	r3, r3
   13c10:	2b04      	cmp	r3, #4
   13c12:	d00b      	beq.n	13c2c <isr_rx_conn+0x288>
			_radio.conn_curr->pause_tx = 1;
   13c14:	4b28      	ldr	r3, [pc, #160]	; (13cb8 <isr_rx_conn+0x314>)
   13c16:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13c1a:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13c1e:	f043 0308 	orr.w	r3, r3, #8
   13c22:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   13c26:	f04f 0900 	mov.w	r9, #0
   13c2a:	e08e      	b.n	13d4a <isr_rx_conn+0x3a6>
			enc_req_reused_send(_radio.conn_curr, *node_tx);
   13c2c:	4631      	mov	r1, r6
   13c2e:	4b22      	ldr	r3, [pc, #136]	; (13cb8 <isr_rx_conn+0x314>)
   13c30:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   13c34:	f7fe fd38 	bl	126a8 <enc_req_reused_send>
			*node_tx = NULL;
   13c38:	2600      	movs	r6, #0
	u8_t terminate = 0;
   13c3a:	46b1      	mov	r9, r6
   13c3c:	e085      	b.n	13d4a <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_rx = 0;
   13c3e:	4b1e      	ldr	r3, [pc, #120]	; (13cb8 <isr_rx_conn+0x314>)
   13c40:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13c44:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   13c48:	f36f 0182 	bfc	r1, #2, #1
   13c4c:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   13c50:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13c54:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   13c58:	f36f 01c3 	bfc	r1, #3, #1
   13c5c:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   13c60:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13c64:	f04f 0900 	mov.w	r9, #0
   13c68:	f8a3 9044 	strh.w	r9, [r3, #68]	; 0x44
   13c6c:	e06d      	b.n	13d4a <isr_rx_conn+0x3a6>
		if ((_radio.conn_curr->llcp_length.req !=
   13c6e:	4b12      	ldr	r3, [pc, #72]	; (13cb8 <isr_rx_conn+0x314>)
   13c70:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13c74:	f893 10e8 	ldrb.w	r1, [r3, #232]	; 0xe8
		     _radio.conn_curr->llcp_length.ack) &&
   13c78:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
		if ((_radio.conn_curr->llcp_length.req !=
   13c7c:	4291      	cmp	r1, r2
   13c7e:	d060      	beq.n	13d42 <isr_rx_conn+0x39e>
		    (_radio.conn_curr->llcp_length.state ==
   13c80:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   13c84:	f002 0203 	and.w	r2, r2, #3
		     _radio.conn_curr->llcp_length.ack) &&
   13c88:	2a01      	cmp	r2, #1
   13c8a:	d002      	beq.n	13c92 <isr_rx_conn+0x2ee>
	u8_t terminate = 0;
   13c8c:	f04f 0900 	mov.w	r9, #0
   13c90:	e05b      	b.n	13d4a <isr_rx_conn+0x3a6>
			_radio.conn_curr->pause_tx = 1;
   13c92:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13c96:	f042 0208 	orr.w	r2, r2, #8
   13c9a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   13c9e:	4b06      	ldr	r3, [pc, #24]	; (13cb8 <isr_rx_conn+0x314>)
   13ca0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13ca4:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   13ca8:	2102      	movs	r1, #2
   13caa:	f361 0201 	bfi	r2, r1, #0, #2
   13cae:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	u8_t terminate = 0;
   13cb2:	f04f 0900 	mov.w	r9, #0
   13cb6:	e048      	b.n	13d4a <isr_rx_conn+0x3a6>
   13cb8:	20000dec 	.word	0x20000dec
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   13cbc:	4bbe      	ldr	r3, [pc, #760]	; (13fb8 <isr_rx_conn+0x614>)
   13cbe:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13cc2:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
   13cc6:	2102      	movs	r1, #2
   13cc8:	f361 0201 	bfi	r2, r1, #0, #2
   13ccc:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   13cd0:	4bb9      	ldr	r3, [pc, #740]	; (13fb8 <isr_rx_conn+0x614>)
   13cd2:	7bdb      	ldrb	r3, [r3, #15]
   13cd4:	b2db      	uxtb	r3, r3
   13cd6:	2b03      	cmp	r3, #3
   13cd8:	d002      	beq.n	13ce0 <isr_rx_conn+0x33c>
	u8_t terminate = 0;
   13cda:	f04f 0900 	mov.w	r9, #0
   13cde:	e034      	b.n	13d4a <isr_rx_conn+0x3a6>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   13ce0:	4ab6      	ldr	r2, [pc, #728]	; (13fbc <isr_rx_conn+0x618>)
   13ce2:	e892 0003 	ldmia.w	r2, {r0, r1}
   13ce6:	e88d 0003 	stmia.w	sp, {r0, r1}
	struct connection *conn = _radio.conn_curr;
   13cea:	4bb3      	ldr	r3, [pc, #716]	; (13fb8 <isr_rx_conn+0x614>)
   13cec:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   13cf0:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   13cf4:	f3c3 0382 	ubfx	r3, r3, #2, #3
   13cf8:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   13cfc:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   13d00:	430b      	orrs	r3, r1
	conn->phy_tx_time = phy_tx_time[phys];
   13d02:	a904      	add	r1, sp, #16
   13d04:	440b      	add	r3, r1
   13d06:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   13d0a:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   13d0e:	f361 0302 	bfi	r3, r1, #0, #3
   13d12:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	u8_t terminate = 0;
   13d16:	f04f 0900 	mov.w	r9, #0
   13d1a:	e016      	b.n	13d4a <isr_rx_conn+0x3a6>
		_radio.conn_curr->phy_tx_time =
   13d1c:	4ba6      	ldr	r3, [pc, #664]	; (13fb8 <isr_rx_conn+0x614>)
   13d1e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   13d22:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   13d26:	f3c2 0282 	ubfx	r2, r2, #2, #3
		_radio.conn_curr->phy_tx_time =
   13d2a:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
   13d2e:	f362 0102 	bfi	r1, r2, #0, #3
   13d32:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
	u8_t terminate = 0;
   13d36:	f04f 0900 	mov.w	r9, #0
   13d3a:	e006      	b.n	13d4a <isr_rx_conn+0x3a6>
   13d3c:	f04f 0900 	mov.w	r9, #0
   13d40:	e003      	b.n	13d4a <isr_rx_conn+0x3a6>
   13d42:	f04f 0900 	mov.w	r9, #0
   13d46:	e000      	b.n	13d4a <isr_rx_conn+0x3a6>
	u8_t terminate = 0;
   13d48:	46a1      	mov	r9, r4
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   13d4a:	4b9b      	ldr	r3, [pc, #620]	; (13fb8 <isr_rx_conn+0x614>)
   13d4c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13d50:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
   13d54:	4414      	add	r4, r2
   13d56:	b2e4      	uxtb	r4, r4
   13d58:	f883 4151 	strb.w	r4, [r3, #337]	; 0x151
			    _radio.conn_curr->packet_tx_head_len) {
   13d5c:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
			if (_radio.conn_curr->packet_tx_head_offset ==
   13d60:	429c      	cmp	r4, r3
   13d62:	d01c      	beq.n	13d9e <isr_rx_conn+0x3fa>
	struct radio_pdu_node_tx *tx_release = NULL;
   13d64:	2600      	movs	r6, #0
	if (terminate) {
   13d66:	f1b9 0f00 	cmp.w	r9, #0
   13d6a:	d155      	bne.n	13e18 <isr_rx_conn+0x474>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   13d6c:	7a2a      	ldrb	r2, [r5, #8]
   13d6e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   13d72:	4b91      	ldr	r3, [pc, #580]	; (13fb8 <isr_rx_conn+0x614>)
   13d74:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13d78:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   13d7c:	f3c3 0340 	ubfx	r3, r3, #1, #1
   13d80:	429a      	cmp	r2, r3
   13d82:	d053      	beq.n	13e2c <isr_rx_conn+0x488>
	return 0;
   13d84:	2300      	movs	r3, #0
		if (terminate) {
   13d86:	2b00      	cmp	r3, #0
   13d88:	f040 81f5 	bne.w	14176 <isr_rx_conn+0x7d2>
		_radio.crc_expire = 0;
   13d8c:	4b8a      	ldr	r3, [pc, #552]	; (13fb8 <isr_rx_conn+0x614>)
   13d8e:	2400      	movs	r4, #0
   13d90:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		_radio.conn_curr->supervision_expire = 0;
   13d94:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13d98:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
   13d9c:	e636      	b.n	13a0c <isr_rx_conn+0x68>
	struct connection *conn = _radio.conn_curr;
   13d9e:	4b86      	ldr	r3, [pc, #536]	; (13fb8 <isr_rx_conn+0x614>)
   13da0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	conn->packet_tx_head_len = 0;
   13da4:	2200      	movs	r2, #0
   13da6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   13daa:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   13dae:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   13db2:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   13db6:	428a      	cmp	r2, r1
   13db8:	d007      	beq.n	13dca <isr_rx_conn+0x426>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   13dba:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
   13dbe:	428a      	cmp	r2, r1
   13dc0:	d01a      	beq.n	13df8 <isr_rx_conn+0x454>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   13dc2:	6812      	ldr	r2, [r2, #0]
   13dc4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
   13dc8:	e7cd      	b.n	13d66 <isr_rx_conn+0x3c2>
		if (node_tx) {
   13dca:	2e00      	cmp	r6, #0
   13dcc:	d0cb      	beq.n	13d66 <isr_rx_conn+0x3c2>
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   13dce:	6812      	ldr	r2, [r2, #0]
   13dd0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   13dd4:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   13dd8:	4281      	cmp	r1, r0
   13dda:	d007      	beq.n	13dec <isr_rx_conn+0x448>
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   13ddc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
   13de0:	4977      	ldr	r1, [pc, #476]	; (13fc0 <isr_rx_conn+0x61c>)
   13de2:	4630      	mov	r0, r6
   13de4:	f7fa fcad 	bl	e742 <mem_release>
	return NULL;
   13de8:	2600      	movs	r6, #0
   13dea:	e7bc      	b.n	13d66 <isr_rx_conn+0x3c2>
				conn->pkt_tx_ctrl = NULL;
   13dec:	2200      	movs	r2, #0
   13dee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   13df2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   13df6:	e7f3      	b.n	13de0 <isr_rx_conn+0x43c>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   13df8:	6809      	ldr	r1, [r1, #0]
   13dfa:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
   13dfe:	e7e0      	b.n	13dc2 <isr_rx_conn+0x41e>
			_radio.conn_curr->empty = 0;
   13e00:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13e04:	f36f 12c7 	bfc	r2, #7, #1
   13e08:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	struct radio_pdu_node_tx *tx_release = NULL;
   13e0c:	2600      	movs	r6, #0
	u8_t terminate = 0;
   13e0e:	46b1      	mov	r9, r6
   13e10:	e7a9      	b.n	13d66 <isr_rx_conn+0x3c2>
	struct radio_pdu_node_tx *tx_release = NULL;
   13e12:	2600      	movs	r6, #0
	u8_t terminate = 0;
   13e14:	46b1      	mov	r9, r6
   13e16:	e7a6      	b.n	13d66 <isr_rx_conn+0x3c2>
		connection_release(_radio.conn_curr);
   13e18:	4c67      	ldr	r4, [pc, #412]	; (13fb8 <isr_rx_conn+0x614>)
   13e1a:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   13e1e:	f7fd fdd9 	bl	119d4 <connection_release>
		_radio.conn_curr = NULL;
   13e22:	2300      	movs	r3, #0
   13e24:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
		return terminate;
   13e28:	464b      	mov	r3, r9
   13e2a:	e7ac      	b.n	13d86 <isr_rx_conn+0x3e2>
	if (_radio.packet_rx_acquire >=
   13e2c:	4a62      	ldr	r2, [pc, #392]	; (13fb8 <isr_rx_conn+0x614>)
   13e2e:	f892 013e 	ldrb.w	r0, [r2, #318]	; 0x13e
	    _radio.packet_rx_last) {
   13e32:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   13e36:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   13e38:	4290      	cmp	r0, r2
   13e3a:	d347      	bcc.n	13ecc <isr_rx_conn+0x528>
			_radio.packet_rx_last);
   13e3c:	4b5e      	ldr	r3, [pc, #376]	; (13fb8 <isr_rx_conn+0x614>)
   13e3e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   13e42:	1ac3      	subs	r3, r0, r3
   13e44:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   13e46:	2b02      	cmp	r3, #2
   13e48:	d94a      	bls.n	13ee0 <isr_rx_conn+0x53c>
	return _radio.packet_rx[_radio.packet_rx_last];
   13e4a:	4b5b      	ldr	r3, [pc, #364]	; (13fb8 <isr_rx_conn+0x614>)
   13e4c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   13e50:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   13e58:	2b00      	cmp	r3, #0
   13e5a:	f000 814e 	beq.w	140fa <isr_rx_conn+0x756>
	    ((_radio.fc_ena == 0) ||
   13e5e:	4b56      	ldr	r3, [pc, #344]	; (13fb8 <isr_rx_conn+0x614>)
   13e60:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
	    (packet_rx_reserve_get(3) != 0) &&
   13e64:	2b00      	cmp	r3, #0
   13e66:	d045      	beq.n	13ef4 <isr_rx_conn+0x550>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   13e68:	4b53      	ldr	r3, [pc, #332]	; (13fb8 <isr_rx_conn+0x614>)
   13e6a:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   13e6e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	    ((_radio.fc_ena == 0) ||
   13e72:	429a      	cmp	r2, r3
   13e74:	d036      	beq.n	13ee4 <isr_rx_conn+0x540>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   13e76:	4b50      	ldr	r3, [pc, #320]	; (13fb8 <isr_rx_conn+0x614>)
   13e78:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	      (_radio.fc_req == _radio.fc_ack)) ||
   13e7c:	429a      	cmp	r2, r3
   13e7e:	f000 813e 	beq.w	140fe <isr_rx_conn+0x75a>
	      (_radio.fc_req != _radio.fc_ack) &&
   13e82:	4a4d      	ldr	r2, [pc, #308]	; (13fb8 <isr_rx_conn+0x614>)
   13e84:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   13e88:	b2db      	uxtb	r3, r3
   13e8a:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   13e8e:	4293      	cmp	r3, r2
   13e90:	f000 8137 	beq.w	14102 <isr_rx_conn+0x75e>
		(((_radio.fc_req == 0) &&
   13e94:	4b48      	ldr	r3, [pc, #288]	; (13fb8 <isr_rx_conn+0x614>)
   13e96:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	      (_radio.fc_req != _radio.fc_ack) &&
   13e9a:	b92b      	cbnz	r3, 13ea8 <isr_rx_conn+0x504>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
   13e9c:	4b46      	ldr	r3, [pc, #280]	; (13fb8 <isr_rx_conn+0x614>)
   13e9e:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
		   _radio.conn_curr->handle)) ||
   13ea2:	8c0b      	ldrh	r3, [r1, #32]
		(((_radio.fc_req == 0) &&
   13ea4:	429a      	cmp	r2, r3
   13ea6:	d025      	beq.n	13ef4 <isr_rx_conn+0x550>
		 ((_radio.fc_req != 0) &&
   13ea8:	4b43      	ldr	r3, [pc, #268]	; (13fb8 <isr_rx_conn+0x614>)
   13eaa:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		   _radio.conn_curr->handle)) ||
   13eae:	2b00      	cmp	r3, #0
   13eb0:	f000 8129 	beq.w	14106 <isr_rx_conn+0x762>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   13eb4:	4b40      	ldr	r3, [pc, #256]	; (13fb8 <isr_rx_conn+0x614>)
   13eb6:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   13eba:	32b7      	adds	r2, #183	; 0xb7
   13ebc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   13ec0:	88da      	ldrh	r2, [r3, #6]
		   _radio.conn_curr->handle)))))) {
   13ec2:	8c0b      	ldrh	r3, [r1, #32]
		 ((_radio.fc_req != 0) &&
   13ec4:	429a      	cmp	r2, r3
   13ec6:	d015      	beq.n	13ef4 <isr_rx_conn+0x550>
	return 0;
   13ec8:	2300      	movs	r3, #0
   13eca:	e75c      	b.n	13d86 <isr_rx_conn+0x3e2>
		return (_radio.packet_rx_count -
   13ecc:	4a3a      	ldr	r2, [pc, #232]	; (13fb8 <isr_rx_conn+0x614>)
   13ece:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   13ed2:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   13ed6:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   13ed8:	fa50 f383 	uxtab	r3, r0, r3
   13edc:	b2db      	uxtb	r3, r3
   13ede:	e7b2      	b.n	13e46 <isr_rx_conn+0x4a2>
		return 0;
   13ee0:	2300      	movs	r3, #0
   13ee2:	e7b9      	b.n	13e58 <isr_rx_conn+0x4b4>
	      (_radio.fc_req == _radio.fc_ack)) ||
   13ee4:	4834      	ldr	r0, [pc, #208]	; (13fb8 <isr_rx_conn+0x614>)
   13ee6:	f890 317c 	ldrb.w	r3, [r0, #380]	; 0x17c
   13eea:	b2db      	uxtb	r3, r3
   13eec:	f890 017d 	ldrb.w	r0, [r0, #381]	; 0x17d
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   13ef0:	4283      	cmp	r3, r0
   13ef2:	d1c0      	bne.n	13e76 <isr_rx_conn+0x4d2>
		if (pdu_data_rx->len != 0) {
   13ef4:	7a68      	ldrb	r0, [r5, #9]
   13ef6:	2800      	cmp	r0, #0
   13ef8:	f000 80b8 	beq.w	1406c <isr_rx_conn+0x6c8>
			if (_radio.conn_curr->enc_rx) {
   13efc:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   13f00:	f013 0f10 	tst.w	r3, #16
   13f04:	d133      	bne.n	13f6e <isr_rx_conn+0x5ca>
		u8_t ccm_rx_increment = 0;
   13f06:	464c      	mov	r4, r9
			if ((_radio.conn_curr->enc_rx &&
   13f08:	4b2b      	ldr	r3, [pc, #172]	; (13fb8 <isr_rx_conn+0x614>)
   13f0a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13f0e:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   13f12:	f013 0f10 	tst.w	r3, #16
   13f16:	d135      	bne.n	13f84 <isr_rx_conn+0x5e0>
			    (_radio.conn_curr->pause_rx &&
   13f18:	4b27      	ldr	r3, [pc, #156]	; (13fb8 <isr_rx_conn+0x614>)
   13f1a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13f1e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   13f22:	f012 0f04 	tst.w	r2, #4
   13f26:	f000 8082 	beq.w	1402e <isr_rx_conn+0x68a>
	u8_t opcode = pdu_data->payload.llctrl.opcode;
   13f2a:	f898 1003 	ldrb.w	r1, [r8, #3]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   13f2e:	7a2a      	ldrb	r2, [r5, #8]
   13f30:	f002 0203 	and.w	r2, r2, #3
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   13f34:	2a03      	cmp	r2, #3
   13f36:	d02a      	beq.n	13f8e <isr_rx_conn+0x5ea>
   13f38:	2201      	movs	r2, #1
			    (_radio.conn_curr->pause_rx &&
   13f3a:	2a00      	cmp	r2, #0
   13f3c:	d077      	beq.n	1402e <isr_rx_conn+0x68a>
				_radio.state = STATE_CLOSE;
   13f3e:	2203      	movs	r2, #3
   13f40:	4b1d      	ldr	r3, [pc, #116]	; (13fb8 <isr_rx_conn+0x614>)
   13f42:	741a      	strb	r2, [r3, #16]
				radio_disable();
   13f44:	f7fa fdf6 	bl	eb34 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   13f48:	f7fa fe0e 	bl	eb68 <radio_is_ready>
   13f4c:	2800      	cmp	r0, #0
   13f4e:	d168      	bne.n	14022 <isr_rx_conn+0x67e>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   13f50:	4c19      	ldr	r4, [pc, #100]	; (13fb8 <isr_rx_conn+0x614>)
   13f52:	213d      	movs	r1, #61	; 0x3d
   13f54:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   13f58:	f7ff fc90 	bl	1387c <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   13f5c:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   13f60:	f7fd fd38 	bl	119d4 <connection_release>
				_radio.conn_curr = NULL;
   13f64:	2300      	movs	r3, #0
   13f66:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
				return 1; /* terminated */
   13f6a:	2301      	movs	r3, #1
   13f6c:	e70b      	b.n	13d86 <isr_rx_conn+0x3e2>
				done = radio_ccm_is_done();
   13f6e:	f7fb f823 	bl	efb8 <radio_ccm_is_done>
				LL_ASSERT(done);
   13f72:	b108      	cbz	r0, 13f78 <isr_rx_conn+0x5d4>
				ccm_rx_increment = 1;
   13f74:	2401      	movs	r4, #1
   13f76:	e7c7      	b.n	13f08 <isr_rx_conn+0x564>
				LL_ASSERT(done);
   13f78:	4040      	eors	r0, r0
   13f7a:	f380 8811 	msr	BASEPRI, r0
   13f7e:	f04f 0004 	mov.w	r0, #4
   13f82:	df02      	svc	2
			     !radio_ccm_mic_is_valid()) ||
   13f84:	f7fb f838 	bl	eff8 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   13f88:	2800      	cmp	r0, #0
   13f8a:	d0d8      	beq.n	13f3e <isr_rx_conn+0x59a>
   13f8c:	e7c4      	b.n	13f18 <isr_rx_conn+0x574>
   13f8e:	f993 201d 	ldrsb.w	r2, [r3, #29]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   13f92:	2a00      	cmp	r2, #0
   13f94:	db1d      	blt.n	13fd2 <isr_rx_conn+0x62e>
		((!conn->refresh &&
   13f96:	f893 00f8 	ldrb.w	r0, [r3, #248]	; 0xf8
	       (!conn->role &&
   13f9a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   13f9e:	d111      	bne.n	13fc4 <isr_rx_conn+0x620>
		((!conn->refresh &&
   13fa0:	2902      	cmp	r1, #2
   13fa2:	d00f      	beq.n	13fc4 <isr_rx_conn+0x620>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   13fa4:	2905      	cmp	r1, #5
   13fa6:	d014      	beq.n	13fd2 <isr_rx_conn+0x62e>
   13fa8:	2906      	cmp	r1, #6
   13faa:	d012      	beq.n	13fd2 <isr_rx_conn+0x62e>
   13fac:	290d      	cmp	r1, #13
   13fae:	d010      	beq.n	13fd2 <isr_rx_conn+0x62e>
   13fb0:	2911      	cmp	r1, #17
   13fb2:	d00e      	beq.n	13fd2 <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   13fb4:	2201      	movs	r2, #1
   13fb6:	e7c0      	b.n	13f3a <isr_rx_conn+0x596>
   13fb8:	20000dec 	.word	0x20000dec
   13fbc:	0002da98 	.word	0x0002da98
   13fc0:	20000f44 	.word	0x20000f44
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   13fc4:	b128      	cbz	r0, 13fd2 <isr_rx_conn+0x62e>
		 (conn->refresh &&
   13fc6:	2902      	cmp	r1, #2
   13fc8:	d003      	beq.n	13fd2 <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   13fca:	290b      	cmp	r1, #11
   13fcc:	d001      	beq.n	13fd2 <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   13fce:	2904      	cmp	r1, #4
   13fd0:	d1e8      	bne.n	13fa4 <isr_rx_conn+0x600>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   13fd2:	2a00      	cmp	r2, #0
   13fd4:	db01      	blt.n	13fda <isr_rx_conn+0x636>
   13fd6:	2200      	movs	r2, #0
   13fd8:	e7af      	b.n	13f3a <isr_rx_conn+0x596>
		((!conn->refresh &&
   13fda:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	       (conn->role &&
   13fde:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   13fe2:	d109      	bne.n	13ff8 <isr_rx_conn+0x654>
		((!conn->refresh &&
   13fe4:	2902      	cmp	r1, #2
   13fe6:	d007      	beq.n	13ff8 <isr_rx_conn+0x654>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   13fe8:	2906      	cmp	r1, #6
   13fea:	d014      	beq.n	14016 <isr_rx_conn+0x672>
   13fec:	290d      	cmp	r1, #13
   13fee:	d014      	beq.n	1401a <isr_rx_conn+0x676>
   13ff0:	2911      	cmp	r1, #17
   13ff2:	d114      	bne.n	1401e <isr_rx_conn+0x67a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   13ff4:	2200      	movs	r2, #0
   13ff6:	e7a0      	b.n	13f3a <isr_rx_conn+0x596>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   13ff8:	b13a      	cbz	r2, 1400a <isr_rx_conn+0x666>
		 (conn->refresh &&
   13ffa:	2902      	cmp	r1, #2
   13ffc:	d007      	beq.n	1400e <isr_rx_conn+0x66a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   13ffe:	290b      	cmp	r1, #11
   14000:	d007      	beq.n	14012 <isr_rx_conn+0x66e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   14002:	2903      	cmp	r1, #3
   14004:	d1f0      	bne.n	13fe8 <isr_rx_conn+0x644>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14006:	2200      	movs	r2, #0
   14008:	e797      	b.n	13f3a <isr_rx_conn+0x596>
   1400a:	2200      	movs	r2, #0
   1400c:	e795      	b.n	13f3a <isr_rx_conn+0x596>
   1400e:	2200      	movs	r2, #0
   14010:	e793      	b.n	13f3a <isr_rx_conn+0x596>
   14012:	2200      	movs	r2, #0
   14014:	e791      	b.n	13f3a <isr_rx_conn+0x596>
   14016:	2200      	movs	r2, #0
   14018:	e78f      	b.n	13f3a <isr_rx_conn+0x596>
   1401a:	2200      	movs	r2, #0
   1401c:	e78d      	b.n	13f3a <isr_rx_conn+0x596>
   1401e:	2201      	movs	r2, #1
   14020:	e78b      	b.n	13f3a <isr_rx_conn+0x596>
				LL_ASSERT(!radio_is_ready());
   14022:	4040      	eors	r0, r0
   14024:	f380 8811 	msr	BASEPRI, r0
   14028:	f04f 0004 	mov.w	r0, #4
   1402c:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
   1402e:	2200      	movs	r2, #0
   14030:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   14034:	4b70      	ldr	r3, [pc, #448]	; (141f8 <isr_rx_conn+0x854>)
   14036:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1403a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   1403e:	7a2b      	ldrb	r3, [r5, #8]
   14040:	f013 0303 	ands.w	r3, r3, #3
   14044:	d00c      	beq.n	14060 <isr_rx_conn+0x6bc>
   14046:	2b02      	cmp	r3, #2
   14048:	d905      	bls.n	14056 <isr_rx_conn+0x6b2>
				nack = isr_rx_conn_pkt_ctrl(radio_pdu_node_rx,
   1404a:	f10d 010b 	add.w	r1, sp, #11
   1404e:	4628      	mov	r0, r5
   14050:	f7fe fb4c 	bl	126ec <isr_rx_conn_pkt_ctrl>
   14054:	e030      	b.n	140b8 <isr_rx_conn+0x714>
				*rx_enqueue = 1;
   14056:	2301      	movs	r3, #1
   14058:	f88d 300b 	strb.w	r3, [sp, #11]
	u8_t nack = 0;
   1405c:	4648      	mov	r0, r9
   1405e:	e02b      	b.n	140b8 <isr_rx_conn+0x714>
				LL_ASSERT(0);
   14060:	4040      	eors	r0, r0
   14062:	f380 8811 	msr	BASEPRI, r0
   14066:	f04f 0004 	mov.w	r0, #4
   1406a:	df02      	svc	2
		} else if ((_radio.conn_curr->enc_rx) ||
   1406c:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14070:	f013 0f14 	tst.w	r3, #20
   14074:	d01f      	beq.n	140b6 <isr_rx_conn+0x712>
			appto_reload_new = (conn->apto_reload >
   14076:	f8b1 204a 	ldrh.w	r2, [r1, #74]	; 0x4a
					    (conn->latency + 6)) ?
   1407a:	8ccb      	ldrh	r3, [r1, #38]	; 0x26
   1407c:	1d9c      	adds	r4, r3, #6
			appto_reload_new = (conn->apto_reload >
   1407e:	42a2      	cmp	r2, r4
   14080:	dd04      	ble.n	1408c <isr_rx_conn+0x6e8>
					   (conn->apto_reload -
   14082:	1ad3      	subs	r3, r2, r3
   14084:	b29b      	uxth	r3, r3
			appto_reload_new = (conn->apto_reload >
   14086:	3b06      	subs	r3, #6
   14088:	b29b      	uxth	r3, r3
   1408a:	e000      	b.n	1408e <isr_rx_conn+0x6ea>
   1408c:	4613      	mov	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   1408e:	f8b1 4046 	ldrh.w	r4, [r1, #70]	; 0x46
   14092:	429c      	cmp	r4, r3
   14094:	d004      	beq.n	140a0 <isr_rx_conn+0x6fc>
				conn->appto_reload = appto_reload_new;
   14096:	f8a1 3046 	strh.w	r3, [r1, #70]	; 0x46
				conn->apto_expire = 0;
   1409a:	2300      	movs	r3, #0
   1409c:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   140a0:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
   140a4:	bb3b      	cbnz	r3, 140f6 <isr_rx_conn+0x752>
				conn->appto_expire = conn->appto_reload;
   140a6:	f8b1 3046 	ldrh.w	r3, [r1, #70]	; 0x46
   140aa:	f8a1 3048 	strh.w	r3, [r1, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   140ae:	f8a1 204c 	strh.w	r2, [r1, #76]	; 0x4c
		u8_t ccm_rx_increment = 0;
   140b2:	4604      	mov	r4, r0
   140b4:	e000      	b.n	140b8 <isr_rx_conn+0x714>
   140b6:	4604      	mov	r4, r0
		if (!nack) {
   140b8:	bb38      	cbnz	r0, 1410a <isr_rx_conn+0x766>
			_radio.conn_curr->nesn++;
   140ba:	4b4f      	ldr	r3, [pc, #316]	; (141f8 <isr_rx_conn+0x854>)
   140bc:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   140c0:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   140c4:	f3c3 0240 	ubfx	r2, r3, #1, #1
   140c8:	f082 0201 	eor.w	r2, r2, #1
   140cc:	f362 0341 	bfi	r3, r2, #1, #1
   140d0:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			if (ccm_rx_increment) {
   140d4:	b1dc      	cbz	r4, 1410e <isr_rx_conn+0x76a>
				_radio.conn_curr->ccm_rx.counter++;
   140d6:	4b48      	ldr	r3, [pc, #288]	; (141f8 <isr_rx_conn+0x854>)
   140d8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   140dc:	f8d1 2109 	ldr.w	r2, [r1, #265]	; 0x109
   140e0:	f8d1 310d 	ldr.w	r3, [r1, #269]	; 0x10d
   140e4:	3201      	adds	r2, #1
   140e6:	f143 0300 	adc.w	r3, r3, #0
   140ea:	f8c1 2109 	str.w	r2, [r1, #265]	; 0x109
   140ee:	f8c1 310d 	str.w	r3, [r1, #269]	; 0x10d
	return 0;
   140f2:	2300      	movs	r3, #0
   140f4:	e647      	b.n	13d86 <isr_rx_conn+0x3e2>
		u8_t ccm_rx_increment = 0;
   140f6:	4604      	mov	r4, r0
   140f8:	e7de      	b.n	140b8 <isr_rx_conn+0x714>
	return 0;
   140fa:	2300      	movs	r3, #0
   140fc:	e643      	b.n	13d86 <isr_rx_conn+0x3e2>
   140fe:	2300      	movs	r3, #0
   14100:	e641      	b.n	13d86 <isr_rx_conn+0x3e2>
   14102:	2300      	movs	r3, #0
   14104:	e63f      	b.n	13d86 <isr_rx_conn+0x3e2>
   14106:	2300      	movs	r3, #0
   14108:	e63d      	b.n	13d86 <isr_rx_conn+0x3e2>
   1410a:	2300      	movs	r3, #0
   1410c:	e63b      	b.n	13d86 <isr_rx_conn+0x3e2>
   1410e:	2300      	movs	r3, #0
   14110:	e639      	b.n	13d86 <isr_rx_conn+0x3e2>
	struct radio_pdu_node_tx *tx_release = NULL;
   14112:	2600      	movs	r6, #0
   14114:	e47a      	b.n	13a0c <isr_rx_conn+0x68>
			STATE_CLOSE : STATE_TX;
   14116:	2303      	movs	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   14118:	4a37      	ldr	r2, [pc, #220]	; (141f8 <isr_rx_conn+0x854>)
   1411a:	7413      	strb	r3, [r2, #16]
	if (_radio.state == STATE_CLOSE) {
   1411c:	2b03      	cmp	r3, #3
   1411e:	d040      	beq.n	141a2 <isr_rx_conn+0x7fe>
		radio_tmr_tifs_set(RADIO_TIFS);
   14120:	2096      	movs	r0, #150	; 0x96
   14122:	f7fa fe0f 	bl	ed44 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   14126:	4b34      	ldr	r3, [pc, #208]	; (141f8 <isr_rx_conn+0x854>)
   14128:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1412c:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   14130:	f000 0007 	and.w	r0, r0, #7
   14134:	f7fa fd54 	bl	ebe0 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   14138:	f7fa febc 	bl	eeb4 <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   1413c:	9a03      	ldr	r2, [sp, #12]
   1413e:	4b2e      	ldr	r3, [pc, #184]	; (141f8 <isr_rx_conn+0x854>)
   14140:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14144:	f891 00f8 	ldrb.w	r0, [r1, #248]	; 0xf8
   14148:	7811      	ldrb	r1, [r2, #0]
   1414a:	f360 01c3 	bfi	r1, r0, #3, #1
   1414e:	7011      	strb	r1, [r2, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   14150:	9903      	ldr	r1, [sp, #12]
   14152:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14156:	f892 20f8 	ldrb.w	r2, [r2, #248]	; 0xf8
   1415a:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1415e:	7808      	ldrb	r0, [r1, #0]
   14160:	f362 0082 	bfi	r0, r2, #2, #1
   14164:	7008      	strb	r0, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   14166:	9903      	ldr	r1, [sp, #12]
   14168:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   1416c:	f7fd fdde 	bl	11d2c <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   14170:	f7fa fcfa 	bl	eb68 <radio_is_ready>
   14174:	bb38      	cbnz	r0, 141c6 <isr_rx_conn+0x822>
	if (!radio_tmr_aa_restore()) {
   14176:	f7fa fe91 	bl	ee9c <radio_tmr_aa_restore>
   1417a:	b350      	cbz	r0, 141d2 <isr_rx_conn+0x82e>
	if (!_radio.conn_curr) {
   1417c:	4b1e      	ldr	r3, [pc, #120]	; (141f8 <isr_rx_conn+0x854>)
   1417e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14182:	b13b      	cbz	r3, 14194 <isr_rx_conn+0x7f0>
	if (tx_release) {
   14184:	b11e      	cbz	r6, 1418e <isr_rx_conn+0x7ea>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   14186:	4631      	mov	r1, r6
   14188:	8c18      	ldrh	r0, [r3, #32]
   1418a:	f7fd fb9f 	bl	118cc <pdu_node_tx_release>
	if (rx_enqueue) {
   1418e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14192:	bb1b      	cbnz	r3, 141dc <isr_rx_conn+0x838>
}
   14194:	b004      	add	sp, #16
   14196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			STATE_CLOSE : STATE_TX;
   1419a:	2303      	movs	r3, #3
   1419c:	e7bc      	b.n	14118 <isr_rx_conn+0x774>
   1419e:	2302      	movs	r3, #2
   141a0:	e7ba      	b.n	14118 <isr_rx_conn+0x774>
		if (_radio.role == ROLE_MASTER) {
   141a2:	7bd3      	ldrb	r3, [r2, #15]
   141a4:	b2db      	uxtb	r3, r3
   141a6:	2b04      	cmp	r3, #4
   141a8:	d002      	beq.n	141b0 <isr_rx_conn+0x80c>
			radio_switch_complete_and_disable();
   141aa:	f7fa fd29 	bl	ec00 <radio_switch_complete_and_disable>
   141ae:	e7c5      	b.n	1413c <isr_rx_conn+0x798>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   141b0:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   141b4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   141b8:	f368 12c7 	bfi	r2, r8, #7, #1
   141bc:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   141c0:	f7fa fcb8 	bl	eb34 <radio_disable>
			goto isr_rx_conn_exit;
   141c4:	e7d7      	b.n	14176 <isr_rx_conn+0x7d2>
	LL_ASSERT(!radio_is_ready());
   141c6:	4040      	eors	r0, r0
   141c8:	f380 8811 	msr	BASEPRI, r0
   141cc:	f04f 0004 	mov.w	r0, #4
   141d0:	df02      	svc	2
		radio_tmr_aa_save(radio_tmr_aa_get());
   141d2:	f7fa fe57 	bl	ee84 <radio_tmr_aa_get>
   141d6:	f7fa fe5b 	bl	ee90 <radio_tmr_aa_save>
   141da:	e7cf      	b.n	1417c <isr_rx_conn+0x7d8>
		rx_fc_lock(_radio.conn_curr->handle);
   141dc:	4c06      	ldr	r4, [pc, #24]	; (141f8 <isr_rx_conn+0x854>)
   141de:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   141e2:	8c18      	ldrh	r0, [r3, #32]
   141e4:	f7fc fdec 	bl	10dc0 <rx_fc_lock>
		radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   141e8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   141ec:	8c1b      	ldrh	r3, [r3, #32]
   141ee:	80eb      	strh	r3, [r5, #6]
		packet_rx_enqueue();
   141f0:	f7ff fad0 	bl	13794 <packet_rx_enqueue>
	return;
   141f4:	e7ce      	b.n	14194 <isr_rx_conn+0x7f0>
   141f6:	bf00      	nop
   141f8:	20000dec 	.word	0x20000dec

000141fc <prepare_normal_set>:
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
   141fc:	6803      	ldr	r3, [r0, #0]
   141fe:	2b00      	cmp	r3, #0
   14200:	db00      	blt.n	14204 <prepare_normal_set+0x8>
   14202:	4770      	bx	lr
{
   14204:	b530      	push	{r4, r5, lr}
   14206:	b089      	sub	sp, #36	; 0x24
			ticks_active_to_start : hdr->ticks_preempt_to_start;
   14208:	6885      	ldr	r5, [r0, #8]
			 hdr->ticks_preempt_to_start) ? hdr->
   1420a:	6844      	ldr	r4, [r0, #4]
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
   1420c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		u32_t ticks_drift_minus =
   14210:	42a5      	cmp	r5, r4
   14212:	bf2c      	ite	cs
   14214:	1b5b      	subcs	r3, r3, r5
   14216:	1b1b      	subcc	r3, r3, r4
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   14218:	b29b      	uxth	r3, r3
		ticker_status =
   1421a:	9006      	str	r0, [sp, #24]
   1421c:	480a      	ldr	r0, [pc, #40]	; (14248 <prepare_normal_set+0x4c>)
   1421e:	9005      	str	r0, [sp, #20]
   14220:	2000      	movs	r0, #0
   14222:	9004      	str	r0, [sp, #16]
   14224:	9003      	str	r0, [sp, #12]
   14226:	9002      	str	r0, [sp, #8]
   14228:	9301      	str	r3, [sp, #4]
   1422a:	9300      	str	r3, [sp, #0]
   1422c:	4603      	mov	r3, r0
   1422e:	f7fb ff89 	bl	10144 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14232:	b108      	cbz	r0, 14238 <prepare_normal_set+0x3c>
   14234:	2802      	cmp	r0, #2
   14236:	d101      	bne.n	1423c <prepare_normal_set+0x40>
}
   14238:	b009      	add	sp, #36	; 0x24
   1423a:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1423c:	4040      	eors	r0, r0
   1423e:	f380 8811 	msr	BASEPRI, r0
   14242:	f04f 0004 	mov.w	r0, #4
   14246:	df02      	svc	2
   14248:	00010ac5 	.word	0x00010ac5

0001424c <event_common_prepare>:
{
   1424c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14250:	b08a      	sub	sp, #40	; 0x28
   14252:	4681      	mov	r9, r0
   14254:	468a      	mov	sl, r1
   14256:	4616      	mov	r6, r2
   14258:	461f      	mov	r7, r3
   1425a:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
   1425e:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
   14260:	f8d3 8000 	ldr.w	r8, [r3]
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14264:	2c00      	cmp	r4, #0
   14266:	db25      	blt.n	142b4 <event_common_prepare+0x68>
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
   14268:	4544      	cmp	r4, r8
   1426a:	d828      	bhi.n	142be <event_common_prepare+0x72>
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
   1426c:	4544      	cmp	r4, r8
   1426e:	d251      	bcs.n	14314 <event_common_prepare+0xc8>
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
   14270:	eba8 0404 	sub.w	r4, r8, r4
		event_active(0, 0, 0, NULL);
   14274:	2300      	movs	r3, #0
   14276:	461a      	mov	r2, r3
   14278:	4619      	mov	r1, r3
   1427a:	4618      	mov	r0, r3
   1427c:	f7fd fa3a 	bl	116f4 <event_active>
		ticker_status =
   14280:	f241 43d1 	movw	r3, #5329	; 0x14d1
   14284:	9308      	str	r3, [sp, #32]
   14286:	4b5e      	ldr	r3, [pc, #376]	; (14400 <event_common_prepare+0x1b4>)
   14288:	9307      	str	r3, [sp, #28]
   1428a:	2000      	movs	r0, #0
   1428c:	9006      	str	r0, [sp, #24]
   1428e:	4b5d      	ldr	r3, [pc, #372]	; (14404 <event_common_prepare+0x1b8>)
   14290:	9305      	str	r3, [sp, #20]
   14292:	9004      	str	r0, [sp, #16]
   14294:	9003      	str	r0, [sp, #12]
   14296:	9002      	str	r0, [sp, #8]
   14298:	9001      	str	r0, [sp, #4]
   1429a:	9400      	str	r4, [sp, #0]
   1429c:	464b      	mov	r3, r9
   1429e:	2201      	movs	r2, #1
   142a0:	4601      	mov	r1, r0
   142a2:	f7fb ff01 	bl	100a8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   142a6:	2800      	cmp	r0, #0
   142a8:	f000 8091 	beq.w	143ce <event_common_prepare+0x182>
   142ac:	2802      	cmp	r0, #2
   142ae:	d12b      	bne.n	14308 <event_common_prepare+0xbc>
		ticks_to_start = _ticks_active_to_start;
   142b0:	4644      	mov	r4, r8
   142b2:	e03b      	b.n	1432c <event_common_prepare+0xe0>
		_ticks_xtal_to_start =
   142b4:	9c12      	ldr	r4, [sp, #72]	; 0x48
   142b6:	4544      	cmp	r4, r8
   142b8:	bf38      	it	cc
   142ba:	4644      	movcc	r4, r8
   142bc:	e7d4      	b.n	14268 <event_common_prepare+0x1c>
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
   142be:	eba4 0308 	sub.w	r3, r4, r8
		ticker_status =
   142c2:	f241 42bc 	movw	r2, #5308	; 0x14bc
   142c6:	9208      	str	r2, [sp, #32]
   142c8:	4a4d      	ldr	r2, [pc, #308]	; (14400 <event_common_prepare+0x1b4>)
   142ca:	9207      	str	r2, [sp, #28]
   142cc:	2000      	movs	r0, #0
   142ce:	9006      	str	r0, [sp, #24]
   142d0:	4a4d      	ldr	r2, [pc, #308]	; (14408 <event_common_prepare+0x1bc>)
   142d2:	9205      	str	r2, [sp, #20]
   142d4:	9004      	str	r0, [sp, #16]
   142d6:	9003      	str	r0, [sp, #12]
   142d8:	9002      	str	r0, [sp, #8]
   142da:	9001      	str	r0, [sp, #4]
   142dc:	9300      	str	r3, [sp, #0]
   142de:	464b      	mov	r3, r9
   142e0:	2201      	movs	r2, #1
   142e2:	4601      	mov	r1, r0
   142e4:	f7fb fee0 	bl	100a8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   142e8:	b108      	cbz	r0, 142ee <event_common_prepare+0xa2>
   142ea:	2802      	cmp	r0, #2
   142ec:	d106      	bne.n	142fc <event_common_prepare+0xb0>
		event_xtal(0, 0, 0, NULL);
   142ee:	2300      	movs	r3, #0
   142f0:	461a      	mov	r2, r3
   142f2:	4619      	mov	r1, r3
   142f4:	4618      	mov	r0, r3
   142f6:	f7fd fa0f 	bl	11718 <event_xtal>
   142fa:	e017      	b.n	1432c <event_common_prepare+0xe0>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   142fc:	4040      	eors	r0, r0
   142fe:	f380 8811 	msr	BASEPRI, r0
   14302:	f04f 0004 	mov.w	r0, #4
   14306:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14308:	4040      	eors	r0, r0
   1430a:	f380 8811 	msr	BASEPRI, r0
   1430e:	f04f 0004 	mov.w	r0, #4
   14312:	df02      	svc	2
		event_active(0, 0, 0, NULL);
   14314:	2300      	movs	r3, #0
   14316:	461a      	mov	r2, r3
   14318:	4619      	mov	r1, r3
   1431a:	4618      	mov	r0, r3
   1431c:	f7fd f9ea 	bl	116f4 <event_active>
		event_xtal(0, 0, 0, NULL);
   14320:	2300      	movs	r3, #0
   14322:	461a      	mov	r2, r3
   14324:	4619      	mov	r1, r3
   14326:	4618      	mov	r0, r3
   14328:	f7fd f9f6 	bl	11718 <event_xtal>
	_radio.remainder_anchor = remainder;
   1432c:	4b37      	ldr	r3, [pc, #220]	; (1440c <event_common_prepare+0x1c0>)
   1432e:	f8c3 a008 	str.w	sl, [r3, #8]
	ticker_status =
   14332:	f241 43e9 	movw	r3, #5353	; 0x14e9
   14336:	9308      	str	r3, [sp, #32]
   14338:	4b31      	ldr	r3, [pc, #196]	; (14400 <event_common_prepare+0x1b4>)
   1433a:	9307      	str	r3, [sp, #28]
   1433c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1433e:	9306      	str	r3, [sp, #24]
   14340:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14342:	9305      	str	r3, [sp, #20]
   14344:	2000      	movs	r0, #0
   14346:	9004      	str	r0, [sp, #16]
   14348:	9003      	str	r0, [sp, #12]
   1434a:	9002      	str	r0, [sp, #8]
   1434c:	9001      	str	r0, [sp, #4]
   1434e:	9400      	str	r4, [sp, #0]
   14350:	464b      	mov	r3, r9
   14352:	4602      	mov	r2, r0
   14354:	4601      	mov	r1, r0
   14356:	f7fb fea7 	bl	100a8 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1435a:	b108      	cbz	r0, 14360 <event_common_prepare+0x114>
   1435c:	2802      	cmp	r0, #2
   1435e:	d138      	bne.n	143d2 <event_common_prepare+0x186>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   14360:	2305      	movs	r3, #5
   14362:	2200      	movs	r2, #0
   14364:	4611      	mov	r1, r2
   14366:	4610      	mov	r0, r2
   14368:	f7fd f93a 	bl	115e0 <event_stop>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
   1436c:	4b27      	ldr	r3, [pc, #156]	; (1440c <event_common_prepare+0x1c0>)
   1436e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
   14372:	4598      	cmp	r8, r3
   14374:	d01d      	beq.n	143b2 <event_common_prepare+0x166>
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
   14376:	6832      	ldr	r2, [r6, #0]
   14378:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		u32_t ticks_to_start_new =
   1437c:	429a      	cmp	r2, r3
   1437e:	bf38      	it	cc
   14380:	461a      	movcc	r2, r3
		*ticks_active_to_start = _radio.ticks_active_to_start;
   14382:	603b      	str	r3, [r7, #0]
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
   14384:	6833      	ldr	r3, [r6, #0]
   14386:	2b00      	cmp	r3, #0
   14388:	db29      	blt.n	143de <event_common_prepare+0x192>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1438a:	b2a3      	uxth	r3, r4
   1438c:	b292      	uxth	r2, r2
		ticker_status =
   1438e:	f241 5116 	movw	r1, #5398	; 0x1516
   14392:	9106      	str	r1, [sp, #24]
   14394:	491a      	ldr	r1, [pc, #104]	; (14400 <event_common_prepare+0x1b4>)
   14396:	9105      	str	r1, [sp, #20]
   14398:	2000      	movs	r0, #0
   1439a:	9004      	str	r0, [sp, #16]
   1439c:	9003      	str	r0, [sp, #12]
   1439e:	9302      	str	r3, [sp, #8]
   143a0:	9201      	str	r2, [sp, #4]
   143a2:	9200      	str	r2, [sp, #0]
   143a4:	462a      	mov	r2, r5
   143a6:	4601      	mov	r1, r0
   143a8:	f7fb fecc 	bl	10144 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   143ac:	b108      	cbz	r0, 143b2 <event_common_prepare+0x166>
   143ae:	2802      	cmp	r0, #2
   143b0:	d119      	bne.n	143e6 <event_common_prepare+0x19a>
	packet_tx_enqueue(0xFF);
   143b2:	20ff      	movs	r0, #255	; 0xff
   143b4:	f7fd fab6 	bl	11924 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   143b8:	4b15      	ldr	r3, [pc, #84]	; (14410 <event_common_prepare+0x1c4>)
   143ba:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   143bc:	2201      	movs	r2, #1
   143be:	4611      	mov	r1, r2
   143c0:	2000      	movs	r0, #0
   143c2:	f7fa f861 	bl	e488 <mayfly_enqueue>
		LL_ASSERT(!retval);
   143c6:	b9a0      	cbnz	r0, 143f2 <event_common_prepare+0x1a6>
}
   143c8:	b00a      	add	sp, #40	; 0x28
   143ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ticks_to_start = _ticks_active_to_start;
   143ce:	4644      	mov	r4, r8
   143d0:	e7ac      	b.n	1432c <event_common_prepare+0xe0>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   143d2:	4040      	eors	r0, r0
   143d4:	f380 8811 	msr	BASEPRI, r0
   143d8:	f04f 0004 	mov.w	r0, #4
   143dc:	df02      	svc	2
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
   143de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   143e2:	6033      	str	r3, [r6, #0]
   143e4:	e7d1      	b.n	1438a <event_common_prepare+0x13e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   143e6:	4040      	eors	r0, r0
   143e8:	f380 8811 	msr	BASEPRI, r0
   143ec:	f04f 0004 	mov.w	r0, #4
   143f0:	df02      	svc	2
		LL_ASSERT(!retval);
   143f2:	4040      	eors	r0, r0
   143f4:	f380 8811 	msr	BASEPRI, r0
   143f8:	f04f 0004 	mov.w	r0, #4
   143fc:	df02      	svc	2
   143fe:	bf00      	nop
   14400:	00010dfd 	.word	0x00010dfd
   14404:	00011719 	.word	0x00011719
   14408:	000116f5 	.word	0x000116f5
   1440c:	20000dec 	.word	0x20000dec
   14410:	2000bc20 	.word	0x2000bc20

00014414 <radio_event_adv_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   14414:	4b0d      	ldr	r3, [pc, #52]	; (1444c <radio_event_adv_prepare+0x38>)
   14416:	7b1b      	ldrb	r3, [r3, #12]
   14418:	b993      	cbnz	r3, 14440 <radio_event_adv_prepare+0x2c>
{
   1441a:	b510      	push	{r4, lr}
   1441c:	b084      	sub	sp, #16
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
   1441e:	4a0b      	ldr	r2, [pc, #44]	; (1444c <radio_event_adv_prepare+0x38>)
   14420:	2305      	movs	r3, #5
   14422:	7313      	strb	r3, [r2, #12]
	event_common_prepare(ticks_at_expire, remainder,
   14424:	2400      	movs	r4, #0
   14426:	9403      	str	r4, [sp, #12]
   14428:	4c09      	ldr	r4, [pc, #36]	; (14450 <radio_event_adv_prepare+0x3c>)
   1442a:	9402      	str	r4, [sp, #8]
   1442c:	9301      	str	r3, [sp, #4]
   1442e:	69d3      	ldr	r3, [r2, #28]
   14430:	9300      	str	r3, [sp, #0]
   14432:	f102 0318 	add.w	r3, r2, #24
   14436:	3214      	adds	r2, #20
   14438:	f7ff ff08 	bl	1424c <event_common_prepare>
}
   1443c:	b004      	add	sp, #16
   1443e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   14440:	4040      	eors	r0, r0
   14442:	f380 8811 	msr	BASEPRI, r0
   14446:	f04f 0004 	mov.w	r0, #4
   1444a:	df02      	svc	2
   1444c:	20000dec 	.word	0x20000dec
   14450:	00015d11 	.word	0x00015d11
   14454:	00000000 	.word	0x00000000

00014458 <event_connection_prepare>:
{
   14458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1445c:	b08f      	sub	sp, #60	; 0x3c
	LL_ASSERT(!_radio.ticker_id_prepare);
   1445e:	4ccb      	ldr	r4, [pc, #812]	; (1478c <event_connection_prepare+0x334>)
   14460:	7b24      	ldrb	r4, [r4, #12]
   14462:	2c00      	cmp	r4, #0
   14464:	d135      	bne.n	144d2 <event_connection_prepare+0x7a>
				   conn->handle;
   14466:	8c1d      	ldrh	r5, [r3, #32]
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
   14468:	3507      	adds	r5, #7
   1446a:	b2ed      	uxtb	r5, r5
   1446c:	4cc7      	ldr	r4, [pc, #796]	; (1478c <event_connection_prepare+0x334>)
   1446e:	7325      	strb	r5, [r4, #12]
	if (conn->role) {
   14470:	f993 401d 	ldrsb.w	r4, [r3, #29]
   14474:	2c00      	cmp	r4, #0
   14476:	db32      	blt.n	144de <event_connection_prepare+0x86>
   14478:	461c      	mov	r4, r3
   1447a:	910a      	str	r1, [sp, #40]	; 0x28
   1447c:	4606      	mov	r6, r0
	conn->latency_prepare += lazy;
   1447e:	8d1d      	ldrh	r5, [r3, #40]	; 0x28
   14480:	4415      	add	r5, r2
   14482:	b2ad      	uxth	r5, r5
   14484:	851d      	strh	r5, [r3, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
   14486:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   14488:	441d      	add	r5, r3
   1448a:	b2ad      	uxth	r5, r5
	if (conn->llcp_ack == conn->llcp_req) {
   1448c:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   14490:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   14494:	429a      	cmp	r2, r3
   14496:	d02d      	beq.n	144f4 <event_connection_prepare+0x9c>
	if (conn->llcp_ack != conn->llcp_req) {
   14498:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   1449c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   144a0:	429a      	cmp	r2, r3
   144a2:	f000 861a 	beq.w	150da <event_connection_prepare+0xc82>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   144a6:	2305      	movs	r3, #5
   144a8:	2200      	movs	r2, #0
   144aa:	4611      	mov	r1, r2
   144ac:	4610      	mov	r0, r2
   144ae:	f7fd f897 	bl	115e0 <event_stop>
		switch (conn->llcp_type) {
   144b2:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   144b6:	3b01      	subs	r3, #1
   144b8:	2b07      	cmp	r3, #7
   144ba:	f201 80d6 	bhi.w	1566a <event_connection_prepare+0x1212>
   144be:	e8df f013 	tbh	[pc, r3, lsl #1]
   144c2:	029f      	.short	0x029f
   144c4:	05b1054e 	.word	0x05b1054e
   144c8:	072706ee 	.word	0x072706ee
   144cc:	07ac08d4 	.word	0x07ac08d4
   144d0:	07c7      	.short	0x07c7
	LL_ASSERT(!_radio.ticker_id_prepare);
   144d2:	4040      	eors	r0, r0
   144d4:	f380 8811 	msr	BASEPRI, r0
   144d8:	f04f 0004 	mov.w	r0, #4
   144dc:	df02      	svc	2
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   144de:	6d5c      	ldr	r4, [r3, #84]	; 0x54
   144e0:	fb02 4404 	mla	r4, r2, r4, r4
		conn->slave.window_widening_prepare_us +=
   144e4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
   144e6:	442c      	add	r4, r5
   144e8:	65dc      	str	r4, [r3, #92]	; 0x5c
		    conn->slave.window_widening_max_us) {
   144ea:	6d9d      	ldr	r5, [r3, #88]	; 0x58
		if (conn->slave.window_widening_prepare_us >
   144ec:	42ac      	cmp	r4, r5
   144ee:	d9c3      	bls.n	14478 <event_connection_prepare+0x20>
			conn->slave.window_widening_prepare_us =
   144f0:	65dd      	str	r5, [r3, #92]	; 0x5c
   144f2:	e7c1      	b.n	14478 <event_connection_prepare+0x20>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   144f4:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   144f8:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   144fc:	429a      	cmp	r2, r3
   144fe:	d00b      	beq.n	14518 <event_connection_prepare+0xc0>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   14500:	2305      	movs	r3, #5
   14502:	2200      	movs	r2, #0
   14504:	4611      	mov	r1, r2
   14506:	4610      	mov	r0, r2
   14508:	f7fd f86a 	bl	115e0 <event_stop>
	conn_upd = _radio.conn_upd;
   1450c:	4b9f      	ldr	r3, [pc, #636]	; (1478c <event_connection_prepare+0x334>)
   1450e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (conn_upd && (conn_upd != conn)) {
   14512:	b1fb      	cbz	r3, 14554 <event_connection_prepare+0xfc>
   14514:	429c      	cmp	r4, r3
   14516:	d01d      	beq.n	14554 <event_connection_prepare+0xfc>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   14518:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
   1451c:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   14520:	429a      	cmp	r2, r3
   14522:	d0b9      	beq.n	14498 <event_connection_prepare+0x40>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   14524:	2305      	movs	r3, #5
   14526:	2200      	movs	r2, #0
   14528:	4611      	mov	r1, r2
   1452a:	4610      	mov	r0, r2
   1452c:	f7fd f858 	bl	115e0 <event_stop>
	switch (conn->llcp_phy.state) {
   14530:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14534:	f003 0303 	and.w	r3, r3, #3
   14538:	2b03      	cmp	r3, #3
   1453a:	f200 8257 	bhi.w	149ec <event_connection_prepare+0x594>
   1453e:	a201      	add	r2, pc, #4	; (adr r2, 14544 <event_connection_prepare+0xec>)
   14540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14544:	0001483d 	.word	0x0001483d
   14548:	00014499 	.word	0x00014499
   1454c:	00014499 	.word	0x00014499
   14550:	000148b7 	.word	0x000148b7
	switch (conn->llcp_conn_param.state) {
   14554:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   14558:	f003 0307 	and.w	r3, r3, #7
   1455c:	2b05      	cmp	r3, #5
   1455e:	f200 8167 	bhi.w	14830 <event_connection_prepare+0x3d8>
   14562:	a201      	add	r2, pc, #4	; (adr r2, 14568 <event_connection_prepare+0x110>)
   14564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14568:	00014581 	.word	0x00014581
   1456c:	0001464b 	.word	0x0001464b
   14570:	00014799 	.word	0x00014799
   14574:	00014519 	.word	0x00014519
   14578:	00014519 	.word	0x00014519
   1457c:	00014519 	.word	0x00014519
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   14580:	4883      	ldr	r0, [pc, #524]	; (14790 <event_connection_prepare+0x338>)
   14582:	f7fa f8c2 	bl	e70a <mem_acquire>
	if (!node_tx) {
   14586:	4680      	mov	r8, r0
   14588:	2800      	cmp	r0, #0
   1458a:	d0c5      	beq.n	14518 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   1458c:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   14590:	2204      	movs	r2, #4
   14592:	f362 0302 	bfi	r3, r2, #0, #3
   14596:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1459a:	7903      	ldrb	r3, [r0, #4]
   1459c:	f043 0303 	orr.w	r3, r3, #3
   145a0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   145a2:	2318      	movs	r3, #24
   145a4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   145a6:	230f      	movs	r3, #15
   145a8:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   145aa:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   145ae:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   145b0:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   145b4:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   145b6:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   145ba:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   145bc:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   145c0:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
   145c2:	2300      	movs	r3, #0
   145c4:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count = event_counter;
   145c6:	f8a0 5011 	strh.w	r5, [r0, #17]
	p->offset0 = 0x0000;
   145ca:	74c3      	strb	r3, [r0, #19]
   145cc:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
   145ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   145d2:	7543      	strb	r3, [r0, #21]
   145d4:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
   145d6:	75c3      	strb	r3, [r0, #23]
   145d8:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
   145da:	7643      	strb	r3, [r0, #25]
   145dc:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
   145de:	76c3      	strb	r3, [r0, #27]
   145e0:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
   145e2:	7743      	strb	r3, [r0, #29]
   145e4:	7783      	strb	r3, [r0, #30]
	ctrl_tx_enqueue(conn, node_tx);
   145e6:	4601      	mov	r1, r0
   145e8:	4620      	mov	r0, r4
   145ea:	f7fc fb1f 	bl	10c2c <ctrl_tx_enqueue>
	_radio.conn_upd = conn;
   145ee:	4b67      	ldr	r3, [pc, #412]	; (1478c <event_connection_prepare+0x334>)
   145f0:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
	conn->procedure_expire = conn->procedure_reload;
   145f4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   145f8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   145fc:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14600:	6823      	ldr	r3, [r4, #0]
   14602:	2b00      	cmp	r3, #0
   14604:	db13      	blt.n	1462e <event_connection_prepare+0x1d6>
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
   14606:	f108 0313 	add.w	r3, r8, #19
   1460a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		s_mfy_sched_offset.param = (void *)conn;
   1460e:	4b61      	ldr	r3, [pc, #388]	; (14794 <event_connection_prepare+0x33c>)
   14610:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   14612:	2201      	movs	r2, #1
   14614:	4611      	mov	r1, r2
   14616:	2000      	movs	r0, #0
   14618:	f7f9 ff36 	bl	e488 <mayfly_enqueue>
		LL_ASSERT(!retval);
   1461c:	2800      	cmp	r0, #0
   1461e:	f43f af7b 	beq.w	14518 <event_connection_prepare+0xc0>
   14622:	4040      	eors	r0, r0
   14624:	f380 8811 	msr	BASEPRI, r0
   14628:	f04f 0004 	mov.w	r0, #4
   1462c:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   1462e:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   14630:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   14632:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   14636:	4291      	cmp	r1, r2
   14638:	bf2c      	ite	cs
   1463a:	ebc3 0301 	rsbcs	r3, r3, r1
   1463e:	ebc3 0302 	rsbcc	r3, r3, r2
			conn->llcp_conn_param.ticks_ref -=
   14642:	4433      	add	r3, r6
   14644:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   14648:	e7dd      	b.n	14606 <event_connection_prepare+0x1ae>
	if (conn->llcp_conn_param.status) {
   1464a:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   1464e:	bbb3      	cbnz	r3, 146be <event_connection_prepare+0x266>
	if (!conn->role) {
   14650:	f994 301d 	ldrsb.w	r3, [r4, #29]
   14654:	2b00      	cmp	r3, #0
   14656:	db52      	blt.n	146fe <event_connection_prepare+0x2a6>
		if (conn->llcp_req != conn->llcp_ack) {
   14658:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   1465c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   14660:	429a      	cmp	r2, r3
   14662:	f47f af59 	bne.w	14518 <event_connection_prepare+0xc0>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   14666:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   1466a:	2105      	movs	r1, #5
   1466c:	f361 0202 	bfi	r2, r1, #0, #3
   14670:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   14674:	2001      	movs	r0, #1
   14676:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   1467a:	2100      	movs	r1, #0
   1467c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   14680:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
   14684:	f8a4 107a 	strh.w	r1, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   14688:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
   1468c:	f8a4 107c 	strh.w	r1, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   14690:	f8b4 10c8 	ldrh.w	r1, [r4, #200]	; 0xc8
   14694:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
   14698:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   1469c:	f04f 0e02 	mov.w	lr, #2
   146a0:	f36e 0101 	bfi	r1, lr, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   146a4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   146a8:	4042      	eors	r2, r0
   146aa:	f362 0182 	bfi	r1, r2, #2, #1
   146ae:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   146b2:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
		conn->llcp_ack--;
   146b6:	3b01      	subs	r3, #1
   146b8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   146bc:	e72c      	b.n	14518 <event_connection_prepare+0xc0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   146be:	4834      	ldr	r0, [pc, #208]	; (14790 <event_connection_prepare+0x338>)
   146c0:	f7fa f823 	bl	e70a <mem_acquire>
		if (!node_tx) {
   146c4:	4601      	mov	r1, r0
   146c6:	2800      	cmp	r0, #0
   146c8:	f43f af26 	beq.w	14518 <event_connection_prepare+0xc0>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   146cc:	7903      	ldrb	r3, [r0, #4]
   146ce:	f043 0303 	orr.w	r3, r3, #3
   146d2:	7103      	strb	r3, [r0, #4]
		pdu->payload.llctrl.opcode =
   146d4:	2311      	movs	r3, #17
   146d6:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   146d8:	2303      	movs	r3, #3
   146da:	7143      	strb	r3, [r0, #5]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   146dc:	230f      	movs	r3, #15
   146de:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp_conn_param.status;
   146e0:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   146e4:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
   146e6:	4620      	mov	r0, r4
   146e8:	f7fc faa0 	bl	10c2c <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   146ec:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   146f0:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
   146f4:	2200      	movs	r2, #0
   146f6:	4b25      	ldr	r3, [pc, #148]	; (1478c <event_connection_prepare+0x334>)
   146f8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   146fc:	e70c      	b.n	14518 <event_connection_prepare+0xc0>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   146fe:	4824      	ldr	r0, [pc, #144]	; (14790 <event_connection_prepare+0x338>)
   14700:	f7fa f803 	bl	e70a <mem_acquire>
	if (!node_tx) {
   14704:	4601      	mov	r1, r0
   14706:	2800      	cmp	r0, #0
   14708:	f43f af06 	beq.w	14518 <event_connection_prepare+0xc0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1470c:	7903      	ldrb	r3, [r0, #4]
   1470e:	f043 0303 	orr.w	r3, r3, #3
   14712:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   14714:	2318      	movs	r3, #24
   14716:	7143      	strb	r3, [r0, #5]
	pdu->payload.llctrl.opcode =
   14718:	2310      	movs	r3, #16
   1471a:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   1471c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   14720:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   14722:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   14726:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   14728:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1472c:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   1472e:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   14732:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   14734:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   14738:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count =
   1473a:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   1473e:	f8a0 3011 	strh.w	r3, [r0, #17]
	p->offset0 = conn->llcp_conn_param.offset0;
   14742:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
   14746:	f8a0 3013 	strh.w	r3, [r0, #19]
	p->offset1 = conn->llcp_conn_param.offset1;
   1474a:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   1474e:	f8a0 3015 	strh.w	r3, [r0, #21]
	p->offset2 = conn->llcp_conn_param.offset2;
   14752:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
   14756:	f8a0 3017 	strh.w	r3, [r0, #23]
	p->offset3 = conn->llcp_conn_param.offset3;
   1475a:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   1475e:	f8a0 3019 	strh.w	r3, [r0, #25]
	p->offset4 = conn->llcp_conn_param.offset4;
   14762:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
   14766:	f8a0 301b 	strh.w	r3, [r0, #27]
	p->offset5 = conn->llcp_conn_param.offset5;
   1476a:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
   1476e:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
   14772:	4620      	mov	r0, r4
   14774:	f7fc fa5a 	bl	10c2c <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   14778:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   1477c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
   14780:	2200      	movs	r2, #0
   14782:	4b02      	ldr	r3, [pc, #8]	; (1478c <event_connection_prepare+0x334>)
   14784:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   14788:	e6c6      	b.n	14518 <event_connection_prepare+0xc0>
   1478a:	bf00      	nop
   1478c:	20000dec 	.word	0x20000dec
   14790:	20000f44 	.word	0x20000f44
   14794:	2000bbb0 	.word	0x2000bbb0
	if (conn->pause_tx) {
   14798:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   1479c:	f013 0f08 	tst.w	r3, #8
   147a0:	f47f aeba 	bne.w	14518 <event_connection_prepare+0xc0>
	if (_radio.packet_rx_acquire >=
   147a4:	4b94      	ldr	r3, [pc, #592]	; (149f8 <event_connection_prepare+0x5a0>)
   147a6:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   147aa:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   147ae:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   147b0:	429a      	cmp	r2, r3
   147b2:	d331      	bcc.n	14818 <event_connection_prepare+0x3c0>
			_radio.packet_rx_last);
   147b4:	4b90      	ldr	r3, [pc, #576]	; (149f8 <event_connection_prepare+0x5a0>)
   147b6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   147ba:	1ad3      	subs	r3, r2, r3
   147bc:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   147be:	2b01      	cmp	r3, #1
   147c0:	d934      	bls.n	1482c <event_connection_prepare+0x3d4>
	return _radio.packet_rx[_radio.packet_rx_last];
   147c2:	4b8d      	ldr	r3, [pc, #564]	; (149f8 <event_connection_prepare+0x5a0>)
   147c4:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   147c8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   147cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (!node_rx) {
   147d0:	2b00      	cmp	r3, #0
   147d2:	f43f aea1 	beq.w	14518 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   147d6:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   147da:	2103      	movs	r1, #3
   147dc:	f361 0202 	bfi	r2, r1, #0, #3
   147e0:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
   147e4:	8c22      	ldrh	r2, [r4, #32]
   147e6:	80da      	strh	r2, [r3, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   147e8:	2201      	movs	r2, #1
   147ea:	711a      	strb	r2, [r3, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   147ec:	7a1a      	ldrb	r2, [r3, #8]
   147ee:	430a      	orrs	r2, r1
   147f0:	721a      	strb	r2, [r3, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   147f2:	2218      	movs	r2, #24
   147f4:	725a      	strb	r2, [r3, #9]
	pdu->payload.llctrl.opcode =
   147f6:	220f      	movs	r2, #15
   147f8:	72da      	strb	r2, [r3, #11]
	p->interval_min = conn->llcp_conn_param.interval;
   147fa:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   147fe:	819a      	strh	r2, [r3, #12]
	p->interval_max = conn->llcp_conn_param.interval;
   14800:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   14804:	81da      	strh	r2, [r3, #14]
	p->latency = conn->llcp_conn_param.latency;
   14806:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   1480a:	821a      	strh	r2, [r3, #16]
	p->timeout = conn->llcp_conn_param.timeout;
   1480c:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
   14810:	825a      	strh	r2, [r3, #18]
	packet_rx_enqueue();
   14812:	f7fe ffbf 	bl	13794 <packet_rx_enqueue>
   14816:	e67f      	b.n	14518 <event_connection_prepare+0xc0>
		return (_radio.packet_rx_count -
   14818:	4977      	ldr	r1, [pc, #476]	; (149f8 <event_connection_prepare+0x5a0>)
   1481a:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   1481e:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   14822:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   14824:	fa52 f383 	uxtab	r3, r2, r3
   14828:	b2db      	uxtb	r3, r3
   1482a:	e7c8      	b.n	147be <event_connection_prepare+0x366>
		return 0;
   1482c:	2300      	movs	r3, #0
   1482e:	e7cf      	b.n	147d0 <event_connection_prepare+0x378>
		LL_ASSERT(0);
   14830:	4040      	eors	r0, r0
   14832:	f380 8811 	msr	BASEPRI, r0
   14836:	f04f 0004 	mov.w	r0, #4
   1483a:	df02      	svc	2
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1483c:	486f      	ldr	r0, [pc, #444]	; (149fc <event_connection_prepare+0x5a4>)
   1483e:	f7f9 ff64 	bl	e70a <mem_acquire>
		if (!node_tx) {
   14842:	4601      	mov	r1, r0
   14844:	2800      	cmp	r0, #0
   14846:	f43f ae27 	beq.w	14498 <event_connection_prepare+0x40>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   1484a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1484e:	2201      	movs	r2, #1
   14850:	f362 0301 	bfi	r3, r2, #0, #2
   14854:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   14858:	b2db      	uxtb	r3, r3
   1485a:	f3c3 0082 	ubfx	r0, r3, #2, #3
   1485e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   14862:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   14866:	095b      	lsrs	r3, r3, #5
   14868:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
   1486c:	f363 00c5 	bfi	r0, r3, #3, #3
   14870:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
   14874:	f894 00f7 	ldrb.w	r0, [r4, #247]	; 0xf7
   14878:	4613      	mov	r3, r2
   1487a:	f360 1386 	bfi	r3, r0, #6, #1
   1487e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14882:	790b      	ldrb	r3, [r1, #4]
   14884:	f043 0303 	orr.w	r3, r3, #3
   14888:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1488a:	2303      	movs	r3, #3
   1488c:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   1488e:	2316      	movs	r3, #22
   14890:	71cb      	strb	r3, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
   14892:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14896:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1489a:	720b      	strb	r3, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   1489c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   148a0:	f3c3 1342 	ubfx	r3, r3, #5, #3
   148a4:	724b      	strb	r3, [r1, #9]
		ctrl_tx_enqueue(conn, node_tx);
   148a6:	4620      	mov	r0, r4
   148a8:	f7fc f9c0 	bl	10c2c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   148ac:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   148b0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   148b4:	e5f0      	b.n	14498 <event_connection_prepare+0x40>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   148b6:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   148ba:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
   148be:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   148c2:	f3c3 0382 	ubfx	r3, r3, #2, #3
   148c6:	f013 0f02 	tst.w	r3, #2
   148ca:	d047      	beq.n	1495c <event_connection_prepare+0x504>
			conn->llcp_phy.tx = BIT(1);
   148cc:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   148d0:	2202      	movs	r2, #2
   148d2:	f362 0384 	bfi	r3, r2, #2, #3
   148d6:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
   148da:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   148de:	095b      	lsrs	r3, r3, #5
   148e0:	f013 0f02 	tst.w	r3, #2
   148e4:	d057      	beq.n	14996 <event_connection_prepare+0x53e>
			conn->llcp_phy.rx = BIT(1);
   148e6:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   148ea:	2202      	movs	r2, #2
   148ec:	f362 1347 	bfi	r3, r2, #5, #3
   148f0:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
   148f4:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   148f8:	f3c3 0382 	ubfx	r3, r3, #2, #3
   148fc:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   14900:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   14904:	4293      	cmp	r3, r2
   14906:	d063      	beq.n	149d0 <event_connection_prepare+0x578>
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
   14908:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   1490c:	f363 0284 	bfi	r2, r3, #2, #3
   14910:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
   14914:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14918:	095b      	lsrs	r3, r3, #5
   1491a:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   1491e:	f002 0207 	and.w	r2, r2, #7
   14922:	4293      	cmp	r3, r2
   14924:	d05b      	beq.n	149de <event_connection_prepare+0x586>
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
   14926:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   1492a:	f363 1247 	bfi	r2, r3, #5, #3
   1492e:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
   14932:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   14936:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
   1493a:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1493e:	f043 0301 	orr.w	r3, r3, #1
   14942:	f362 0341 	bfi	r3, r2, #1, #1
   14946:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
   1494a:	2308      	movs	r3, #8
   1494c:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   14950:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   14954:	3b01      	subs	r3, #1
   14956:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   1495a:	e59d      	b.n	14498 <event_connection_prepare+0x40>
		} else if (conn->llcp_phy.tx & BIT(0)) {
   1495c:	f013 0f01 	tst.w	r3, #1
   14960:	d007      	beq.n	14972 <event_connection_prepare+0x51a>
			conn->llcp_phy.tx = BIT(0);
   14962:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14966:	2201      	movs	r2, #1
   14968:	f362 0384 	bfi	r3, r2, #2, #3
   1496c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   14970:	e7b3      	b.n	148da <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.tx & BIT(2)) {
   14972:	f013 0f04 	tst.w	r3, #4
   14976:	d007      	beq.n	14988 <event_connection_prepare+0x530>
			conn->llcp_phy.tx = BIT(2);
   14978:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1497c:	2204      	movs	r2, #4
   1497e:	f362 0384 	bfi	r3, r2, #2, #3
   14982:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   14986:	e7a8      	b.n	148da <event_connection_prepare+0x482>
			conn->llcp_phy.tx = 0;
   14988:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1498c:	f36f 0384 	bfc	r3, #2, #3
   14990:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   14994:	e7a1      	b.n	148da <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.rx & BIT(0)) {
   14996:	f013 0f01 	tst.w	r3, #1
   1499a:	d007      	beq.n	149ac <event_connection_prepare+0x554>
			conn->llcp_phy.rx = BIT(0);
   1499c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   149a0:	2201      	movs	r2, #1
   149a2:	f362 1347 	bfi	r3, r2, #5, #3
   149a6:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   149aa:	e7a3      	b.n	148f4 <event_connection_prepare+0x49c>
		} else if (conn->llcp_phy.rx & BIT(2)) {
   149ac:	f013 0f04 	tst.w	r3, #4
   149b0:	d007      	beq.n	149c2 <event_connection_prepare+0x56a>
			conn->llcp_phy.rx = BIT(2);
   149b2:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   149b6:	2204      	movs	r2, #4
   149b8:	f362 1347 	bfi	r3, r2, #5, #3
   149bc:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   149c0:	e798      	b.n	148f4 <event_connection_prepare+0x49c>
			conn->llcp_phy.rx = 0;
   149c2:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   149c6:	f36f 1347 	bfc	r3, #5, #3
   149ca:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   149ce:	e791      	b.n	148f4 <event_connection_prepare+0x49c>
			conn->llcp.phy_upd_ind.tx = 0;
   149d0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   149d4:	f36f 0384 	bfc	r3, #2, #3
   149d8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   149dc:	e79a      	b.n	14914 <event_connection_prepare+0x4bc>
			conn->llcp.phy_upd_ind.rx = 0;
   149de:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   149e2:	f36f 1347 	bfc	r3, #5, #3
   149e6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   149ea:	e7a2      	b.n	14932 <event_connection_prepare+0x4da>
		LL_ASSERT(0);
   149ec:	4040      	eors	r0, r0
   149ee:	f380 8811 	msr	BASEPRI, r0
   149f2:	f04f 0004 	mov.w	r0, #4
   149f6:	df02      	svc	2
   149f8:	20000dec 	.word	0x20000dec
   149fc:	20000f44 	.word	0x20000f44
	conn_upd = _radio.conn_upd;
   14a00:	4bb7      	ldr	r3, [pc, #732]	; (14ce0 <event_connection_prepare+0x888>)
   14a02:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (!conn_upd) {
   14a06:	2b00      	cmp	r3, #0
   14a08:	f000 814b 	beq.w	14ca2 <event_connection_prepare+0x84a>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   14a0c:	f8b4 8080 	ldrh.w	r8, [r4, #128]	; 0x80
   14a10:	eba5 0808 	sub.w	r8, r5, r8
   14a14:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
   14a18:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   14a1c:	f013 0f03 	tst.w	r3, #3
   14a20:	f040 8143 	bne.w	14caa <event_connection_prepare+0x852>
	} else if (instant_latency <= 0x7FFF) {
   14a24:	f418 4f00 	tst.w	r8, #32768	; 0x8000
   14a28:	f040 8296 	bne.w	14f58 <event_connection_prepare+0xb00>
		conn->llcp_ack = conn->llcp_req;
   14a2c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   14a30:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   14a34:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
   14a38:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
   14a3c:	429a      	cmp	r2, r3
   14a3e:	d006      	beq.n	14a4e <event_connection_prepare+0x5f6>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   14a40:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   14a44:	f003 0307 	and.w	r3, r3, #7
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   14a48:	2b05      	cmp	r3, #5
   14a4a:	f000 81bb 	beq.w	14dc4 <event_connection_prepare+0x96c>
		_radio.ticker_id_prepare = 0;
   14a4e:	4ba4      	ldr	r3, [pc, #656]	; (14ce0 <event_connection_prepare+0x888>)
   14a50:	2200      	movs	r2, #0
   14a52:	731a      	strb	r2, [r3, #12]
		if (_radio.conn_upd == conn) {
   14a54:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   14a58:	429c      	cmp	r4, r3
   14a5a:	f000 81b9 	beq.w	14dd0 <event_connection_prepare+0x978>
		if ((conn->llcp.conn_upd.interval !=
   14a5e:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
		     conn->conn_interval) ||
   14a62:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		if ((conn->llcp.conn_upd.interval !=
   14a64:	429a      	cmp	r2, r3
   14a66:	f000 81b7 	beq.w	14dd8 <event_connection_prepare+0x980>
	if (_radio.packet_rx_acquire >=
   14a6a:	4b9d      	ldr	r3, [pc, #628]	; (14ce0 <event_connection_prepare+0x888>)
   14a6c:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   14a70:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14a74:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   14a76:	429a      	cmp	r2, r3
   14a78:	f0c0 81c7 	bcc.w	14e0a <event_connection_prepare+0x9b2>
			_radio.packet_rx_last);
   14a7c:	4b98      	ldr	r3, [pc, #608]	; (14ce0 <event_connection_prepare+0x888>)
   14a7e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   14a82:	1ad3      	subs	r3, r2, r3
   14a84:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   14a86:	2b01      	cmp	r3, #1
   14a88:	f240 81c9 	bls.w	14e1e <event_connection_prepare+0x9c6>
	return _radio.packet_rx[_radio.packet_rx_last];
   14a8c:	4b94      	ldr	r3, [pc, #592]	; (14ce0 <event_connection_prepare+0x888>)
   14a8e:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14a92:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   14a9a:	2b00      	cmp	r3, #0
   14a9c:	f000 81c1 	beq.w	14e22 <event_connection_prepare+0x9ca>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   14aa0:	8c22      	ldrh	r2, [r4, #32]
   14aa2:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   14aa4:	2208      	movs	r2, #8
   14aa6:	711a      	strb	r2, [r3, #4]
			radio_le_conn_update_cmplt->status = 0x00;
   14aa8:	2200      	movs	r2, #0
   14aaa:	72da      	strb	r2, [r3, #11]
			radio_le_conn_update_cmplt->interval =
   14aac:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   14ab0:	819a      	strh	r2, [r3, #12]
			radio_le_conn_update_cmplt->latency =
   14ab2:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   14ab6:	81da      	strh	r2, [r3, #14]
			radio_le_conn_update_cmplt->timeout =
   14ab8:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   14abc:	821a      	strh	r2, [r3, #16]
			packet_rx_enqueue();
   14abe:	f7fe fe69 	bl	13794 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14ac2:	6823      	ldr	r3, [r4, #0]
   14ac4:	2b00      	cmp	r3, #0
   14ac6:	f2c0 81b2 	blt.w	14e2e <event_connection_prepare+0x9d6>
   14aca:	46b1      	mov	r9, r6
		conn_interval_old = instant_latency * conn->conn_interval;
   14acc:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   14ace:	fb18 f303 	smulbb	r3, r8, r3
   14ad2:	b29b      	uxth	r3, r3
			conn->llcp.conn_upd.interval;
   14ad4:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
		latency = conn_interval_old /
   14ad8:	fbb3 fbfa 	udiv	fp, r3, sl
		conn_interval_new = latency *
   14adc:	fb1a f00b 	smulbb	r0, sl, fp
   14ae0:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   14ae2:	4283      	cmp	r3, r0
   14ae4:	f080 81b1 	bcs.w	14e4a <event_connection_prepare+0x9f2>
				TICKER_US_TO_TICKS((conn_interval_new -
   14ae8:	1ac3      	subs	r3, r0, r3
   14aea:	17d9      	asrs	r1, r3, #31
   14aec:	487d      	ldr	r0, [pc, #500]	; (14ce4 <event_connection_prepare+0x88c>)
   14aee:	f240 1223 	movw	r2, #291	; 0x123
   14af2:	fb02 f203 	mul.w	r2, r2, r3
   14af6:	fb00 2201 	mla	r2, r0, r1, r2
   14afa:	fba3 0100 	umull	r0, r1, r3, r0
   14afe:	4411      	add	r1, r2
   14b00:	a375      	add	r3, pc, #468	; (adr r3, 14cd8 <event_connection_prepare+0x880>)
   14b02:	e9d3 2300 	ldrd	r2, r3, [r3]
   14b06:	f7ec faf9 	bl	10fc <__aeabi_uldivmod>
   14b0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire +=
   14b0e:	eb00 0309 	add.w	r3, r0, r9
   14b12:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
   14b14:	ebab 0308 	sub.w	r3, fp, r8
   14b18:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   14b1a:	fa12 f383 	uxtah	r3, r2, r3
   14b1e:	8523      	strh	r3, [r4, #40]	; 0x28
			conn->hdr.ticks_active_to_start;
   14b20:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start :
   14b22:	6823      	ldr	r3, [r4, #0]
		ticks_slot_offset =
   14b24:	429a      	cmp	r2, r3
   14b26:	bf38      	it	cc
   14b28:	461a      	movcc	r2, r3
   14b2a:	920c      	str	r2, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   14b2c:	f240 49e2 	movw	r9, #1250	; 0x4e2
   14b30:	fb09 f90a 	mul.w	r9, r9, sl
		if (conn->role) {
   14b34:	f994 301d 	ldrsb.w	r3, [r4, #29]
   14b38:	2b00      	cmp	r3, #0
   14b3a:	f2c0 819d 	blt.w	14e78 <event_connection_prepare+0xa20>
				TICKER_US_TO_TICKS(conn->llcp.conn_upd.win_offset_us);
   14b3e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   14b42:	a365      	add	r3, pc, #404	; (adr r3, 14cd8 <event_connection_prepare+0x880>)
   14b44:	e9d3 2300 	ldrd	r2, r3, [r3]
   14b48:	4967      	ldr	r1, [pc, #412]	; (14ce8 <event_connection_prepare+0x890>)
   14b4a:	fba0 0101 	umull	r0, r1, r0, r1
   14b4e:	f7ec fad5 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   14b52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
   14b56:	f100 0b01 	add.w	fp, r0, #1
		periodic_us = conn_interval_us;
   14b5a:	46c8      	mov	r8, r9
		conn->conn_interval = conn->llcp.conn_upd.interval;
   14b5c:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
		conn->latency = conn->llcp.conn_upd.latency;
   14b60:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   14b64:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   14b66:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   14b6a:	f242 7110 	movw	r1, #10000	; 0x2710
   14b6e:	fb01 9303 	mla	r3, r1, r3, r9
   14b72:	3b01      	subs	r3, #1
   14b74:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->supervision_reload =
   14b78:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   14b7a:	4b5c      	ldr	r3, [pc, #368]	; (14cec <event_connection_prepare+0x894>)
   14b7c:	444b      	add	r3, r9
   14b7e:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->procedure_reload =
   14b82:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   14b86:	4b5a      	ldr	r3, [pc, #360]	; (14cf0 <event_connection_prepare+0x898>)
   14b88:	444b      	add	r3, r9
   14b8a:	fbb3 f9f9 	udiv	r9, r3, r9
   14b8e:	fa1f f989 	uxth.w	r9, r9
   14b92:	f8a4 904a 	strh.w	r9, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14b96:	1d93      	adds	r3, r2, #6
   14b98:	4599      	cmp	r9, r3
   14b9a:	dd07      	ble.n	14bac <event_connection_prepare+0x754>
				     (conn->apto_reload - (conn->latency + 6)) :
   14b9c:	eba9 0902 	sub.w	r9, r9, r2
   14ba0:	fa1f f989 	uxth.w	r9, r9
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14ba4:	f1a9 0906 	sub.w	r9, r9, #6
   14ba8:	fa1f f989 	uxth.w	r9, r9
   14bac:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
		if (!conn->llcp.conn_upd.is_internal) {
   14bb0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   14bb4:	f013 0f04 	tst.w	r3, #4
   14bb8:	d102      	bne.n	14bc0 <event_connection_prepare+0x768>
			conn->supervision_expire = 0;
   14bba:	2300      	movs	r3, #0
   14bbc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		mayfly_was_enabled =
   14bc0:	2101      	movs	r1, #1
   14bc2:	2000      	movs	r0, #0
   14bc4:	f003 fe2d 	bl	18822 <mayfly_is_enabled>
   14bc8:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   14bca:	2200      	movs	r2, #0
   14bcc:	2101      	movs	r1, #1
   14bce:	4610      	mov	r0, r2
   14bd0:	f7f9 fc1c 	bl	e40c <mayfly_enable>
				    conn->handle, ticker_success_assert,
   14bd4:	8c22      	ldrh	r2, [r4, #32]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   14bd6:	3207      	adds	r2, #7
		ticker_status =
   14bd8:	f641 13e3 	movw	r3, #6627	; 0x19e3
   14bdc:	9300      	str	r3, [sp, #0]
   14bde:	4b45      	ldr	r3, [pc, #276]	; (14cf4 <event_connection_prepare+0x89c>)
   14be0:	b2d2      	uxtb	r2, r2
   14be2:	2100      	movs	r1, #0
   14be4:	4608      	mov	r0, r1
   14be6:	f7fb fafb 	bl	101e0 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14bea:	b110      	cbz	r0, 14bf2 <event_connection_prepare+0x79a>
   14bec:	2802      	cmp	r0, #2
   14bee:	f040 819a 	bne.w	14f26 <event_connection_prepare+0xace>
				     conn->handle,
   14bf2:	f8b4 a020 	ldrh.w	sl, [r4, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14bf6:	f10a 0a07 	add.w	sl, sl, #7
   14bfa:	fa5f fa8a 	uxtb.w	sl, sl
				     TICKER_US_TO_TICKS(periodic_us),
   14bfe:	4b3a      	ldr	r3, [pc, #232]	; (14ce8 <event_connection_prepare+0x890>)
   14c00:	fba8 2303 	umull	r2, r3, r8, r3
   14c04:	4617      	mov	r7, r2
   14c06:	4698      	mov	r8, r3
   14c08:	a333      	add	r3, pc, #204	; (adr r3, 14cd8 <event_connection_prepare+0x880>)
   14c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c0e:	4638      	mov	r0, r7
   14c10:	4641      	mov	r1, r8
   14c12:	f7ec fa73 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14c16:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   14c1a:	930d      	str	r3, [sp, #52]	; 0x34
				     TICKER_REMAINDER(periodic_us),
   14c1c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   14c20:	2100      	movs	r1, #0
   14c22:	4a35      	ldr	r2, [pc, #212]	; (14cf8 <event_connection_prepare+0x8a0>)
   14c24:	2307      	movs	r3, #7
   14c26:	fb03 f300 	mul.w	r3, r3, r0
   14c2a:	fb02 3301 	mla	r3, r2, r1, r3
   14c2e:	fba0 0102 	umull	r0, r1, r0, r2
   14c32:	4419      	add	r1, r3
   14c34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14c38:	2300      	movs	r3, #0
   14c3a:	1a3f      	subs	r7, r7, r0
   14c3c:	eb68 0801 	sbc.w	r8, r8, r1
   14c40:	4638      	mov	r0, r7
   14c42:	4641      	mov	r1, r8
   14c44:	f7ec fa5a 	bl	10fc <__aeabi_uldivmod>
   14c48:	4602      	mov	r2, r0
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   14c4a:	68e3      	ldr	r3, [r4, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14c4c:	990c      	ldr	r1, [sp, #48]	; 0x30
   14c4e:	440b      	add	r3, r1
   14c50:	b29b      	uxth	r3, r3
   14c52:	f994 101d 	ldrsb.w	r1, [r4, #29]
   14c56:	2900      	cmp	r1, #0
   14c58:	f2c0 816b 	blt.w	14f32 <event_connection_prepare+0xada>
   14c5c:	4927      	ldr	r1, [pc, #156]	; (14cfc <event_connection_prepare+0x8a4>)
		ticker_status =
   14c5e:	f641 10f3 	movw	r0, #6643	; 0x19f3
   14c62:	9008      	str	r0, [sp, #32]
   14c64:	4823      	ldr	r0, [pc, #140]	; (14cf4 <event_connection_prepare+0x89c>)
   14c66:	9007      	str	r0, [sp, #28]
   14c68:	9406      	str	r4, [sp, #24]
   14c6a:	9105      	str	r1, [sp, #20]
   14c6c:	9304      	str	r3, [sp, #16]
   14c6e:	2000      	movs	r0, #0
   14c70:	9003      	str	r0, [sp, #12]
   14c72:	9202      	str	r2, [sp, #8]
   14c74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14c76:	9301      	str	r3, [sp, #4]
   14c78:	f8cd b000 	str.w	fp, [sp]
   14c7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14c7e:	4652      	mov	r2, sl
   14c80:	4601      	mov	r1, r0
   14c82:	f7fb fa11 	bl	100a8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14c86:	b110      	cbz	r0, 14c8e <event_connection_prepare+0x836>
   14c88:	2802      	cmp	r0, #2
   14c8a:	f040 8154 	bne.w	14f36 <event_connection_prepare+0xade>
		if (mayfly_was_enabled) {
   14c8e:	f1b9 0f00 	cmp.w	r9, #0
   14c92:	f040 8156 	bne.w	14f42 <event_connection_prepare+0xaea>
			if (event_conn_upd_prep(conn, event_counter,
   14c96:	f1b9 0f00 	cmp.w	r9, #0
   14c9a:	f040 821e 	bne.w	150da <event_connection_prepare+0xc82>
   14c9e:	f000 be59 	b.w	15954 <event_connection_prepare+0x14fc>
		_radio.conn_upd = conn;
   14ca2:	4b0f      	ldr	r3, [pc, #60]	; (14ce0 <event_connection_prepare+0x888>)
   14ca4:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
   14ca8:	e6b0      	b.n	14a0c <event_connection_prepare+0x5b4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   14caa:	4815      	ldr	r0, [pc, #84]	; (14d00 <event_connection_prepare+0x8a8>)
   14cac:	f7f9 fd2d 	bl	e70a <mem_acquire>
		if (!node_tx) {
   14cb0:	4680      	mov	r8, r0
   14cb2:	2800      	cmp	r0, #0
   14cb4:	f000 814d 	beq.w	14f52 <event_connection_prepare+0xafa>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   14cb8:	1d03      	adds	r3, r0, #4
		switch (conn->llcp.conn_upd.state) {
   14cba:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   14cbe:	f002 0203 	and.w	r2, r2, #3
   14cc2:	2a01      	cmp	r2, #1
   14cc4:	d01e      	beq.n	14d04 <event_connection_prepare+0x8ac>
   14cc6:	2a02      	cmp	r2, #2
   14cc8:	d066      	beq.n	14d98 <event_connection_prepare+0x940>
			LL_ASSERT(0);
   14cca:	4040      	eors	r0, r0
   14ccc:	f380 8811 	msr	BASEPRI, r0
   14cd0:	f04f 0004 	mov.w	r0, #4
   14cd4:	df02      	svc	2
   14cd6:	bf00      	nop
   14cd8:	1afd498d 	.word	0x1afd498d
   14cdc:	00000007 	.word	0x00000007
   14ce0:	20000dec 	.word	0x20000dec
   14ce4:	09ce5400 	.word	0x09ce5400
   14ce8:	3b9aca00 	.word	0x3b9aca00
   14cec:	026259ff 	.word	0x026259ff
   14cf0:	01c9c37f 	.word	0x01c9c37f
   14cf4:	00010dfd 	.word	0x00010dfd
   14cf8:	1afd498d 	.word	0x1afd498d
   14cfc:	000159bd 	.word	0x000159bd
   14d00:	20000f44 	.word	0x20000f44
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
   14d04:	49bc      	ldr	r1, [pc, #752]	; (14ff8 <event_connection_prepare+0xba0>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   14d06:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   14d0a:	f36f 0201 	bfc	r2, #0, #2
   14d0e:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
   14d12:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   14d14:	442a      	add	r2, r5
   14d16:	b292      	uxth	r2, r2
   14d18:	3206      	adds	r2, #6
	conn->llcp.conn_upd.instant =
   14d1a:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14d1e:	f898 2004 	ldrb.w	r2, [r8, #4]
   14d22:	f042 0203 	orr.w	r2, r2, #3
   14d26:	f888 2004 	strb.w	r2, [r8, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   14d2a:	220c      	movs	r2, #12
   14d2c:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   14d2e:	2200      	movs	r2, #0
   14d30:	70da      	strb	r2, [r3, #3]
		conn->llcp.conn_upd.win_size;
   14d32:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
   14d36:	711a      	strb	r2, [r3, #4]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   14d38:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   14d3c:	48af      	ldr	r0, [pc, #700]	; (14ffc <event_connection_prepare+0xba4>)
   14d3e:	fba0 0202 	umull	r0, r2, r0, r2
   14d42:	0a92      	lsrs	r2, r2, #10
   14d44:	f8a3 2005 	strh.w	r2, [r3, #5]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
   14d48:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   14d4c:	f8a3 2007 	strh.w	r2, [r3, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
   14d50:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   14d54:	f8a3 2009 	strh.w	r2, [r3, #9]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
   14d58:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   14d5c:	f8a3 200b 	strh.w	r2, [r3, #11]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
   14d60:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
   14d64:	f8a3 200d 	strh.w	r2, [r3, #13]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   14d68:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14d6c:	6820      	ldr	r0, [r4, #0]
   14d6e:	2800      	cmp	r0, #0
   14d70:	db14      	blt.n	14d9c <event_connection_prepare+0x944>
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
   14d72:	3305      	adds	r3, #5
   14d74:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
   14d78:	4ba1      	ldr	r3, [pc, #644]	; (15000 <event_connection_prepare+0xba8>)
   14d7a:	60d9      	str	r1, [r3, #12]
		mayfly_sched_offset->param = (void *)conn;
   14d7c:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   14d7e:	2201      	movs	r2, #1
   14d80:	4611      	mov	r1, r2
   14d82:	2000      	movs	r0, #0
   14d84:	f7f9 fb80 	bl	e488 <mayfly_enqueue>
		LL_ASSERT(!retval);
   14d88:	b9b0      	cbnz	r0, 14db8 <event_connection_prepare+0x960>
		ctrl_tx_enqueue(conn, node_tx);
   14d8a:	4641      	mov	r1, r8
   14d8c:	4620      	mov	r0, r4
   14d8e:	f7fb ff4d 	bl	10c2c <ctrl_tx_enqueue>
	return 1;
   14d92:	f04f 0901 	mov.w	r9, #1
   14d96:	e77e      	b.n	14c96 <event_connection_prepare+0x83e>
			fp_mayfly_select_or_use =
   14d98:	499a      	ldr	r1, [pc, #616]	; (15004 <event_connection_prepare+0xbac>)
   14d9a:	e7b4      	b.n	14d06 <event_connection_prepare+0x8ae>
				conn->hdr.ticks_preempt_to_start;
   14d9c:	68a7      	ldr	r7, [r4, #8]
				conn->hdr.ticks_active_to_start :
   14d9e:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   14da0:	f020 4e00 	bic.w	lr, r0, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   14da4:	4297      	cmp	r7, r2
   14da6:	bf2c      	ite	cs
   14da8:	ebce 0207 	rsbcs	r2, lr, r7
   14dac:	ebce 0202 	rsbcc	r2, lr, r2
			conn->llcp.conn_upd.ticks_anchor -=
   14db0:	4432      	add	r2, r6
   14db2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
   14db6:	e7dc      	b.n	14d72 <event_connection_prepare+0x91a>
		LL_ASSERT(!retval);
   14db8:	4040      	eors	r0, r0
   14dba:	f380 8811 	msr	BASEPRI, r0
   14dbe:	f04f 0004 	mov.w	r0, #4
   14dc2:	df02      	svc	2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   14dc4:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
   14dc8:	2300      	movs	r3, #0
   14dca:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   14dce:	e63e      	b.n	14a4e <event_connection_prepare+0x5f6>
			_radio.conn_upd = NULL;
   14dd0:	4b8d      	ldr	r3, [pc, #564]	; (15008 <event_connection_prepare+0xbb0>)
   14dd2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   14dd6:	e642      	b.n	14a5e <event_connection_prepare+0x606>
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   14dd8:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   14ddc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
		     conn->conn_interval) ||
   14dde:	4291      	cmp	r1, r2
   14de0:	f47f ae43 	bne.w	14a6a <event_connection_prepare+0x612>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
   14de4:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   14de8:	f240 41e2 	movw	r1, #1250	; 0x4e2
   14dec:	fb01 f103 	mul.w	r1, r1, r3
   14df0:	f242 7310 	movw	r3, #10000	; 0x2710
   14df4:	fb03 1302 	mla	r3, r3, r2, r1
   14df8:	3b01      	subs	r3, #1
   14dfa:	fb93 f3f1 	sdiv	r3, r3, r1
   14dfe:	b29b      	uxth	r3, r3
		     conn->supervision_reload)) {
   14e00:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   14e02:	4293      	cmp	r3, r2
   14e04:	f47f ae31 	bne.w	14a6a <event_connection_prepare+0x612>
   14e08:	e65b      	b.n	14ac2 <event_connection_prepare+0x66a>
		return (_radio.packet_rx_count -
   14e0a:	497f      	ldr	r1, [pc, #508]	; (15008 <event_connection_prepare+0xbb0>)
   14e0c:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   14e10:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   14e14:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   14e16:	fa52 f383 	uxtab	r3, r2, r3
   14e1a:	b2db      	uxtb	r3, r3
   14e1c:	e633      	b.n	14a86 <event_connection_prepare+0x62e>
		return 0;
   14e1e:	2300      	movs	r3, #0
   14e20:	e63b      	b.n	14a9a <event_connection_prepare+0x642>
			LL_ASSERT(radio_pdu_node_rx);
   14e22:	4040      	eors	r0, r0
   14e24:	f380 8811 	msr	BASEPRI, r0
   14e28:	f04f 0004 	mov.w	r0, #4
   14e2c:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   14e2e:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   14e30:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start &= ~((u32_t)1 << 31);
   14e32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   14e36:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   14e38:	4291      	cmp	r1, r2
   14e3a:	bf2c      	ite	cs
   14e3c:	ebc3 0301 	rsbcs	r3, r3, r1
   14e40:	ebc3 0302 	rsbcc	r3, r3, r2
   14e44:	eb06 0903 	add.w	r9, r6, r3
   14e48:	e640      	b.n	14acc <event_connection_prepare+0x674>
				TICKER_US_TO_TICKS((conn_interval_old -
   14e4a:	1a1b      	subs	r3, r3, r0
   14e4c:	17d9      	asrs	r1, r3, #31
   14e4e:	486f      	ldr	r0, [pc, #444]	; (1500c <event_connection_prepare+0xbb4>)
   14e50:	f240 1223 	movw	r2, #291	; 0x123
   14e54:	fb02 f203 	mul.w	r2, r2, r3
   14e58:	fb00 2201 	mla	r2, r0, r1, r2
   14e5c:	fba3 0100 	umull	r0, r1, r3, r0
   14e60:	4411      	add	r1, r2
   14e62:	a363      	add	r3, pc, #396	; (adr r3, 14ff0 <event_connection_prepare+0xb98>)
   14e64:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e68:	f7ec f948 	bl	10fc <__aeabi_uldivmod>
   14e6c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   14e70:	eba9 0300 	sub.w	r3, r9, r0
   14e74:	930b      	str	r3, [sp, #44]	; 0x2c
   14e76:	e64d      	b.n	14b14 <event_connection_prepare+0x6bc>
				conn->slave.window_widening_periodic_us *
   14e78:	6d62      	ldr	r2, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
   14e7a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   14e7c:	fb02 3218 	mls	r2, r2, r8, r3
   14e80:	65e2      	str	r2, [r4, #92]	; 0x5c
				(((gc_lookup_ppm[_radio.sca] +
   14e82:	4b61      	ldr	r3, [pc, #388]	; (15008 <event_connection_prepare+0xbb0>)
   14e84:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
   14e88:	4861      	ldr	r0, [pc, #388]	; (15010 <event_connection_prepare+0xbb8>)
   14e8a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
   14e8e:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   14e92:	f3c1 0182 	ubfx	r1, r1, #2, #3
   14e96:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
				(((gc_lookup_ppm[_radio.sca] +
   14e9a:	440b      	add	r3, r1
				   gc_lookup_ppm[conn->slave.sca]) *
   14e9c:	fb03 f309 	mul.w	r3, r3, r9
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   14ea0:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   14ea4:	f203 233f 	addw	r3, r3, #575	; 0x23f
   14ea8:	495a      	ldr	r1, [pc, #360]	; (15014 <event_connection_prepare+0xbbc>)
   14eaa:	fba1 1303 	umull	r1, r3, r1, r3
   14eae:	ea4f 4893 	mov.w	r8, r3, lsr #18
			conn->slave.window_widening_periodic_us =
   14eb2:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
				(conn_interval_us >> 1) - RADIO_TIFS;
   14eb6:	ea4f 0359 	mov.w	r3, r9, lsr #1
   14eba:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_max_us =
   14ebc:	65a3      	str	r3, [r4, #88]	; 0x58
				conn->llcp.conn_upd.win_size * 1250;
   14ebe:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
   14ec2:	f240 41e2 	movw	r1, #1250	; 0x4e2
   14ec6:	fb01 f100 	mul.w	r1, r1, r0
			conn->slave.window_size_prepare_us =
   14eca:	6661      	str	r1, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
   14ecc:	2100      	movs	r1, #0
   14ece:	6721      	str	r1, [r4, #112]	; 0x70
				conn->slave.window_widening_periodic_us *
   14ed0:	fb08 f00b 	mul.w	r0, r8, fp
			conn->slave.window_widening_prepare_us +=
   14ed4:	4402      	add	r2, r0
   14ed6:	65e2      	str	r2, [r4, #92]	; 0x5c
			if (conn->slave.window_widening_prepare_us >
   14ed8:	4293      	cmp	r3, r2
   14eda:	d200      	bcs.n	14ede <event_connection_prepare+0xa86>
				conn->slave.window_widening_prepare_us =
   14edc:	65e3      	str	r3, [r4, #92]	; 0x5c
				TICKER_US_TO_TICKS(conn->slave.window_widening_periodic_us *
   14ede:	f8df b140 	ldr.w	fp, [pc, #320]	; 15020 <event_connection_prepare+0xbc8>
   14ee2:	a343      	add	r3, pc, #268	; (adr r3, 14ff0 <event_connection_prepare+0xb98>)
   14ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
   14ee8:	fba0 010b 	umull	r0, r1, r0, fp
   14eec:	f7ec f906 	bl	10fc <__aeabi_uldivmod>
   14ef0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   14ef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14ef6:	1a1b      	subs	r3, r3, r0
   14ef8:	930b      	str	r3, [sp, #44]	; 0x2c
				TICKER_US_TO_TICKS((conn->llcp.conn_upd.win_offset_us /
   14efa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   14efe:	4a3f      	ldr	r2, [pc, #252]	; (14ffc <event_connection_prepare+0xba4>)
   14f00:	fba2 2303 	umull	r2, r3, r2, r3
   14f04:	0a9b      	lsrs	r3, r3, #10
   14f06:	f240 40e2 	movw	r0, #1250	; 0x4e2
   14f0a:	fb00 f003 	mul.w	r0, r0, r3
   14f0e:	a338      	add	r3, pc, #224	; (adr r3, 14ff0 <event_connection_prepare+0xb98>)
   14f10:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f14:	fba0 010b 	umull	r0, r1, r0, fp
   14f18:	f7ec f8f0 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   14f1c:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
			periodic_us -=
   14f20:	eba9 0808 	sub.w	r8, r9, r8
   14f24:	e61a      	b.n	14b5c <event_connection_prepare+0x704>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14f26:	4040      	eors	r0, r0
   14f28:	f380 8811 	msr	BASEPRI, r0
   14f2c:	f04f 0004 	mov.w	r0, #4
   14f30:	df02      	svc	2
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14f32:	4939      	ldr	r1, [pc, #228]	; (15018 <event_connection_prepare+0xbc0>)
   14f34:	e693      	b.n	14c5e <event_connection_prepare+0x806>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14f36:	4040      	eors	r0, r0
   14f38:	f380 8811 	msr	BASEPRI, r0
   14f3c:	f04f 0004 	mov.w	r0, #4
   14f40:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   14f42:	2201      	movs	r2, #1
   14f44:	4611      	mov	r1, r2
   14f46:	2000      	movs	r0, #0
   14f48:	f7f9 fa60 	bl	e40c <mayfly_enable>
		return 0;
   14f4c:	f04f 0900 	mov.w	r9, #0
   14f50:	e6a1      	b.n	14c96 <event_connection_prepare+0x83e>
			return 1;
   14f52:	f04f 0901 	mov.w	r9, #1
   14f56:	e69e      	b.n	14c96 <event_connection_prepare+0x83e>
	return 1;
   14f58:	f04f 0901 	mov.w	r9, #1
   14f5c:	e69b      	b.n	14c96 <event_connection_prepare+0x83e>
	if (conn->llcp.chan_map.initiate) {
   14f5e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   14f62:	b9f3      	cbnz	r3, 14fa2 <event_connection_prepare+0xb4a>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   14f64:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   14f68:	1aeb      	subs	r3, r5, r3
   14f6a:	b29b      	uxth	r3, r3
   14f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   14f70:	f280 80b3 	bge.w	150da <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   14f74:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   14f78:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
   14f7c:	f104 0817 	add.w	r8, r4, #23
   14f80:	2205      	movs	r2, #5
   14f82:	f104 0179 	add.w	r1, r4, #121	; 0x79
   14f86:	4640      	mov	r0, r8
   14f88:	f7eb f99a 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   14f8c:	2105      	movs	r1, #5
   14f8e:	4640      	mov	r0, r8
   14f90:	f7f9 fc3f 	bl	e812 <util_ones_count_get>
		conn->data_chan_count =
   14f94:	7f63      	ldrb	r3, [r4, #29]
   14f96:	f360 0305 	bfi	r3, r0, #0, #6
   14f9a:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
   14f9c:	2301      	movs	r3, #1
   14f9e:	7723      	strb	r3, [r4, #28]
   14fa0:	e09b      	b.n	150da <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   14fa2:	481e      	ldr	r0, [pc, #120]	; (1501c <event_connection_prepare+0xbc4>)
   14fa4:	f7f9 fbb1 	bl	e70a <mem_acquire>
		if (node_tx) {
   14fa8:	4680      	mov	r8, r0
   14faa:	2800      	cmp	r0, #0
   14fac:	f000 8095 	beq.w	150da <event_connection_prepare+0xc82>
			conn->llcp.chan_map.initiate = 0;
   14fb0:	2300      	movs	r3, #0
   14fb2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
   14fb6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   14fb8:	442b      	add	r3, r5
   14fba:	b29b      	uxth	r3, r3
   14fbc:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant =
   14fbe:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14fc2:	7903      	ldrb	r3, [r0, #4]
   14fc4:	f043 0303 	orr.w	r3, r3, #3
   14fc8:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   14fca:	2308      	movs	r3, #8
   14fcc:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   14fce:	2301      	movs	r3, #1
   14fd0:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->payload.llctrl.
   14fd2:	2205      	movs	r2, #5
   14fd4:	f104 0179 	add.w	r1, r4, #121	; 0x79
   14fd8:	3008      	adds	r0, #8
   14fda:	f7eb f971 	bl	2c0 <memcpy>
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
   14fde:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   14fe2:	f8a8 300d 	strh.w	r3, [r8, #13]
			ctrl_tx_enqueue(conn, node_tx);
   14fe6:	4641      	mov	r1, r8
   14fe8:	4620      	mov	r0, r4
   14fea:	f7fb fe1f 	bl	10c2c <ctrl_tx_enqueue>
   14fee:	e074      	b.n	150da <event_connection_prepare+0xc82>
   14ff0:	1afd498d 	.word	0x1afd498d
   14ff4:	00000007 	.word	0x00000007
   14ff8:	000125e5 	.word	0x000125e5
   14ffc:	d1b71759 	.word	0xd1b71759
   15000:	2000bba0 	.word	0x2000bba0
   15004:	00012319 	.word	0x00012319
   15008:	20000dec 	.word	0x20000dec
   1500c:	09ce5400 	.word	0x09ce5400
   15010:	0002ff04 	.word	0x0002ff04
   15014:	431bde83 	.word	0x431bde83
   15018:	000159b5 	.word	0x000159b5
   1501c:	20000f44 	.word	0x20000f44
   15020:	3b9aca00 	.word	0x3b9aca00
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15024:	48d9      	ldr	r0, [pc, #868]	; (1538c <event_connection_prepare+0xf34>)
   15026:	f7f9 fb70 	bl	e70a <mem_acquire>
	if (node_tx) {
   1502a:	4680      	mov	r8, r0
   1502c:	2800      	cmp	r0, #0
   1502e:	d054      	beq.n	150da <event_connection_prepare+0xc82>
		struct pdu_data *pdu_ctrl_tx =
   15030:	f100 0904 	add.w	r9, r0, #4
		conn->llcp_ack = conn->llcp_req;
   15034:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15038:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (!conn->role) {
   1503c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15040:	2b00      	cmp	r3, #0
   15042:	f2c0 808c 	blt.w	1515e <event_connection_prepare+0xd06>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   15046:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
   1504a:	4653      	mov	r3, sl
   1504c:	2200      	movs	r2, #0
   1504e:	f104 0193 	add.w	r1, r4, #147	; 0x93
   15052:	f104 0083 	add.w	r0, r4, #131	; 0x83
   15056:	f7f9 fc65 	bl	e924 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
   1505a:	2210      	movs	r2, #16
   1505c:	4651      	mov	r1, sl
   1505e:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   15062:	f7eb f92d 	bl	2c0 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   15066:	2208      	movs	r2, #8
   15068:	f504 7189 	add.w	r1, r4, #274	; 0x112
   1506c:	f204 1033 	addw	r0, r4, #307	; 0x133
   15070:	f7eb f926 	bl	2c0 <memcpy>
			conn->ccm_rx.counter = 0;
   15074:	2300      	movs	r3, #0
   15076:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   1507a:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   1507e:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   15082:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   15086:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   1508a:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   1508e:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   15092:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
   15096:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   1509a:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   1509e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   150a2:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
			conn->ccm_rx.direction = 0;
   150a6:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   150aa:	f363 0200 	bfi	r2, r3, #0, #1
   150ae:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 1;
   150b2:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   150b6:	f043 0301 	orr.w	r3, r3, #1
   150ba:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
   150be:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->enc_tx = 1;
   150c2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   150c6:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			start_enc_rsp_send(conn, pdu_ctrl_tx);
   150ca:	4649      	mov	r1, r9
   150cc:	4620      	mov	r0, r4
   150ce:	f7fb fe9d 	bl	10e0c <start_enc_rsp_send>
		ctrl_tx_enqueue(conn, node_tx);
   150d2:	4641      	mov	r1, r8
   150d4:	4620      	mov	r0, r4
   150d6:	f7fb fda9 	bl	10c2c <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   150da:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   150de:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   150e2:	429a      	cmp	r2, r3
   150e4:	d021      	beq.n	1512a <event_connection_prepare+0xcd2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   150e6:	2305      	movs	r3, #5
   150e8:	2200      	movs	r2, #0
   150ea:	4611      	mov	r1, r2
   150ec:	4610      	mov	r0, r2
   150ee:	f7fc fa77 	bl	115e0 <event_stop>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   150f2:	48a6      	ldr	r0, [pc, #664]	; (1538c <event_connection_prepare+0xf34>)
   150f4:	f7f9 fb09 	bl	e70a <mem_acquire>
		if (node_tx) {
   150f8:	4601      	mov	r1, r0
   150fa:	b1b0      	cbz	r0, 1512a <event_connection_prepare+0xcd2>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   150fc:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   15100:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15104:	7903      	ldrb	r3, [r0, #4]
   15106:	f043 0303 	orr.w	r3, r3, #3
   1510a:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
   1510c:	2302      	movs	r3, #2
   1510e:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   15110:	71c3      	strb	r3, [r0, #7]
				error_code = conn->llcp_terminate.reason_own;
   15112:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   15116:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
   15118:	4620      	mov	r0, r4
   1511a:	f7fb fd87 	bl	10c2c <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
   1511e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   15120:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
			if (conn->procedure_expire <= 1) {
   15124:	2b01      	cmp	r3, #1
   15126:	f240 82a6 	bls.w	15676 <event_connection_prepare+0x121e>
	if (conn->llcp_length.ack != conn->llcp_length.req) {
   1512a:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   1512e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15132:	429a      	cmp	r2, r3
   15134:	f000 83f9 	beq.w	1592a <event_connection_prepare+0x14d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   15138:	2305      	movs	r3, #5
   1513a:	2200      	movs	r2, #0
   1513c:	4611      	mov	r1, r2
   1513e:	4610      	mov	r0, r2
   15140:	f7fc fa4e 	bl	115e0 <event_stop>
	switch (conn->llcp_length.state) {
   15144:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   15148:	f003 0303 	and.w	r3, r3, #3
   1514c:	2b03      	cmp	r3, #3
   1514e:	f200 8427 	bhi.w	159a0 <event_connection_prepare+0x1548>
   15152:	e8df f013 	tbh	[pc, r3, lsl #1]
   15156:	0299      	.short	0x0299
   15158:	03ea03ea 	.word	0x03ea03ea
   1515c:	02fa      	.short	0x02fa
		else if (!conn->pause_tx || conn->refresh) {
   1515e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15162:	f003 0348 	and.w	r3, r3, #72	; 0x48
   15166:	2b08      	cmp	r3, #8
   15168:	d079      	beq.n	1525e <event_connection_prepare+0xe06>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1516a:	7903      	ldrb	r3, [r0, #4]
   1516c:	f043 0303 	orr.w	r3, r3, #3
   15170:	7103      	strb	r3, [r0, #4]
			if (conn->llcp.encryption.error_code) {
   15172:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15176:	b333      	cbz	r3, 151c6 <event_connection_prepare+0xd6e>
	if (conn->common.fex_valid &&
   15178:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   1517c:	f013 0f20 	tst.w	r3, #32
   15180:	d00e      	beq.n	151a0 <event_connection_prepare+0xd48>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
   15182:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
   15186:	f013 0f04 	tst.w	r3, #4
   1518a:	d009      	beq.n	151a0 <event_connection_prepare+0xd48>
		pdu->payload.llctrl.opcode =
   1518c:	2311      	movs	r3, #17
   1518e:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   15190:	2303      	movs	r3, #3
   15192:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
   15194:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15198:	7243      	strb	r3, [r0, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
   1519a:	2302      	movs	r3, #2
   1519c:	7143      	strb	r3, [r0, #5]
   1519e:	e009      	b.n	151b4 <event_connection_prepare+0xd5c>
		pdu->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   151a0:	230d      	movs	r3, #13
   151a2:	f888 3007 	strb.w	r3, [r8, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   151a6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   151aa:	f888 3008 	strb.w	r3, [r8, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   151ae:	2301      	movs	r3, #1
   151b0:	f888 3005 	strb.w	r3, [r8, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, ctrldata);
   151b4:	f898 3005 	ldrb.w	r3, [r8, #5]
   151b8:	3301      	adds	r3, #1
   151ba:	f888 3005 	strb.w	r3, [r8, #5]
	conn->llcp.encryption.error_code = 0;
   151be:	2300      	movs	r3, #0
   151c0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   151c4:	e785      	b.n	150d2 <event_connection_prepare+0xc7a>
				enc_rsp_send(conn);
   151c6:	4620      	mov	r0, r4
   151c8:	f7fd fa38 	bl	1263c <enc_rsp_send>
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
   151cc:	f104 09f9 	add.w	r9, r4, #249	; 0xf9
   151d0:	464b      	mov	r3, r9
   151d2:	2200      	movs	r2, #0
   151d4:	f104 0193 	add.w	r1, r4, #147	; 0x93
   151d8:	f104 0083 	add.w	r0, r4, #131	; 0x83
   151dc:	f7f9 fba2 	bl	e924 <ecb_encrypt>
				memcpy(&conn->ccm_tx.key[0],
   151e0:	2210      	movs	r2, #16
   151e2:	4649      	mov	r1, r9
   151e4:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   151e8:	f7eb f86a 	bl	2c0 <memcpy>
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   151ec:	2208      	movs	r2, #8
   151ee:	f504 7189 	add.w	r1, r4, #274	; 0x112
   151f2:	f204 1033 	addw	r0, r4, #307	; 0x133
   151f6:	f7eb f863 	bl	2c0 <memcpy>
				conn->ccm_rx.counter = 0;
   151fa:	2300      	movs	r3, #0
   151fc:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   15200:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   15204:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   15208:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   1520c:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   15210:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   15214:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   15218:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
				conn->ccm_tx.counter = 0;
   1521c:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   15220:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   15224:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   15228:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
				conn->ccm_rx.direction = 1;
   1522c:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   15230:	f042 0201 	orr.w	r2, r2, #1
   15234:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
				conn->ccm_tx.direction = 0;
   15238:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
   1523c:	f363 0200 	bfi	r2, r3, #0, #1
   15240:	f884 2132 	strb.w	r2, [r4, #306]	; 0x132
				conn->enc_rx = 1;
   15244:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15248:	f043 0310 	orr.w	r3, r3, #16
   1524c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				pdu_ctrl_tx->len =
   15250:	2301      	movs	r3, #1
   15252:	f888 3005 	strb.w	r3, [r8, #5]
				pdu_ctrl_tx->payload.llctrl.opcode =
   15256:	2305      	movs	r3, #5
   15258:	f888 3007 	strb.w	r3, [r8, #7]
   1525c:	e739      	b.n	150d2 <event_connection_prepare+0xc7a>
			_radio.conn_curr->enc_tx = 1;
   1525e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 15394 <event_connection_prepare+0xf3c>
   15262:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   15266:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   1526a:	f043 0320 	orr.w	r3, r3, #32
   1526e:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			start_enc_rsp_send(_radio.conn_curr, NULL);
   15272:	2100      	movs	r1, #0
   15274:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   15278:	f7fb fdc8 	bl	10e0c <start_enc_rsp_send>
			_radio.conn_curr->pause_rx = 0;
   1527c:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   15280:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15284:	f36f 0282 	bfc	r2, #2, #1
   15288:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   1528c:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   15290:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15294:	f36f 02c3 	bfc	r2, #3, #1
   15298:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   1529c:	e719      	b.n	150d2 <event_connection_prepare+0xc7a>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1529e:	483b      	ldr	r0, [pc, #236]	; (1538c <event_connection_prepare+0xf34>)
   152a0:	f7f9 fa33 	bl	e70a <mem_acquire>
	if (node_tx) {
   152a4:	4680      	mov	r8, r0
   152a6:	2800      	cmp	r0, #0
   152a8:	f43f af17 	beq.w	150da <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   152ac:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   152b0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
   152b4:	4b36      	ldr	r3, [pc, #216]	; (15390 <event_connection_prepare+0xf38>)
   152b6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   152ba:	7903      	ldrb	r3, [r0, #4]
   152bc:	f043 0303 	orr.w	r3, r3, #3
   152c0:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   152c2:	2309      	movs	r3, #9
   152c4:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   152c6:	f994 301d 	ldrsb.w	r3, [r4, #29]
   152ca:	2b00      	cmp	r3, #0
   152cc:	db1e      	blt.n	1530c <event_connection_prepare+0xeb4>
   152ce:	2308      	movs	r3, #8
   152d0:	f888 3007 	strb.w	r3, [r8, #7]
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
   152d4:	2208      	movs	r2, #8
   152d6:	2100      	movs	r1, #0
   152d8:	eb08 0002 	add.w	r0, r8, r2
   152dc:	f014 f9fc 	bl	296d8 <memset>
			conn->llcp_features & 0xFF;
   152e0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   152e4:	f888 3008 	strb.w	r3, [r8, #8]
			(conn->llcp_features >> 8) & 0xFF;
   152e8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   152ec:	0a1b      	lsrs	r3, r3, #8
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   152ee:	f888 3009 	strb.w	r3, [r8, #9]
			(conn->llcp_features >> 16) & 0xFF;
   152f2:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   152f6:	f888 300a 	strb.w	r3, [r8, #10]
		ctrl_tx_enqueue(conn, node_tx);
   152fa:	4641      	mov	r1, r8
   152fc:	4620      	mov	r0, r4
   152fe:	f7fb fc95 	bl	10c2c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   15302:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15306:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   1530a:	e6e6      	b.n	150da <event_connection_prepare+0xc82>
		pdu_ctrl_tx->payload.llctrl.opcode =
   1530c:	230e      	movs	r3, #14
   1530e:	e7df      	b.n	152d0 <event_connection_prepare+0xe78>
	if (conn->llcp_version.tx == 0) {
   15310:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   15314:	f013 0f01 	tst.w	r3, #1
   15318:	d03e      	beq.n	15398 <event_connection_prepare+0xf40>
	} else if (conn->llcp_version.rx != 0) {
   1531a:	f013 0f02 	tst.w	r3, #2
   1531e:	d076      	beq.n	1540e <event_connection_prepare+0xfb6>
		conn->llcp_ack = conn->llcp_req;
   15320:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15324:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	if (_radio.packet_rx_acquire >=
   15328:	4b1a      	ldr	r3, [pc, #104]	; (15394 <event_connection_prepare+0xf3c>)
   1532a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1532e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15332:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15334:	429a      	cmp	r2, r3
   15336:	d358      	bcc.n	153ea <event_connection_prepare+0xf92>
			_radio.packet_rx_last);
   15338:	4b16      	ldr	r3, [pc, #88]	; (15394 <event_connection_prepare+0xf3c>)
   1533a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1533e:	1ad3      	subs	r3, r2, r3
   15340:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   15342:	2b01      	cmp	r3, #1
   15344:	d95b      	bls.n	153fe <event_connection_prepare+0xfa6>
	return _radio.packet_rx[_radio.packet_rx_last];
   15346:	4b13      	ldr	r3, [pc, #76]	; (15394 <event_connection_prepare+0xf3c>)
   15348:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1534c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(radio_pdu_node_rx);
   15354:	2b00      	cmp	r3, #0
   15356:	d054      	beq.n	15402 <event_connection_prepare+0xfaa>
		radio_pdu_node_rx->hdr.handle = conn->handle;
   15358:	8c22      	ldrh	r2, [r4, #32]
   1535a:	80da      	strh	r2, [r3, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1535c:	2201      	movs	r2, #1
   1535e:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   15360:	7a1a      	ldrb	r2, [r3, #8]
   15362:	f042 0203 	orr.w	r2, r2, #3
   15366:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15368:	2206      	movs	r2, #6
   1536a:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   1536c:	220c      	movs	r2, #12
   1536e:	72da      	strb	r2, [r3, #11]
			conn->llcp_version.version_number;
   15370:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
   15374:	731a      	strb	r2, [r3, #12]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
   15376:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   1537a:	f8a3 200d 	strh.w	r2, [r3, #13]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   1537e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   15382:	f8a3 200f 	strh.w	r2, [r3, #15]
		packet_rx_enqueue();
   15386:	f7fe fa05 	bl	13794 <packet_rx_enqueue>
   1538a:	e6a6      	b.n	150da <event_connection_prepare+0xc82>
   1538c:	20000f44 	.word	0x20000f44
   15390:	000141ff 	.word	0x000141ff
   15394:	20000dec 	.word	0x20000dec
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15398:	48b9      	ldr	r0, [pc, #740]	; (15680 <event_connection_prepare+0x1228>)
   1539a:	f7f9 f9b6 	bl	e70a <mem_acquire>
		if (node_tx) {
   1539e:	4601      	mov	r1, r0
   153a0:	2800      	cmp	r0, #0
   153a2:	f43f ae9a 	beq.w	150da <event_connection_prepare+0xc82>
			conn->llcp_ack = conn->llcp_req;
   153a6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   153aa:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
   153ae:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   153b2:	f043 0301 	orr.w	r3, r3, #1
   153b6:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   153ba:	7903      	ldrb	r3, [r0, #4]
   153bc:	f043 0303 	orr.w	r3, r3, #3
   153c0:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   153c2:	2306      	movs	r3, #6
   153c4:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   153c6:	230c      	movs	r3, #12
   153c8:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   153ca:	2309      	movs	r3, #9
   153cc:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   153ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   153d2:	7243      	strb	r3, [r0, #9]
   153d4:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   153d6:	72c3      	strb	r3, [r0, #11]
   153d8:	7303      	strb	r3, [r0, #12]
			ctrl_tx_enqueue(conn, node_tx);
   153da:	4620      	mov	r0, r4
   153dc:	f7fb fc26 	bl	10c2c <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
   153e0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   153e4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   153e8:	e677      	b.n	150da <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   153ea:	49a6      	ldr	r1, [pc, #664]	; (15684 <event_connection_prepare+0x122c>)
   153ec:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   153f0:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   153f4:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   153f6:	fa52 f383 	uxtab	r3, r2, r3
   153fa:	b2db      	uxtb	r3, r3
   153fc:	e7a1      	b.n	15342 <event_connection_prepare+0xeea>
		return 0;
   153fe:	2300      	movs	r3, #0
   15400:	e7a8      	b.n	15354 <event_connection_prepare+0xefc>
		LL_ASSERT(radio_pdu_node_rx);
   15402:	4040      	eors	r0, r0
   15404:	f380 8811 	msr	BASEPRI, r0
   15408:	f04f 0004 	mov.w	r0, #4
   1540c:	df02      	svc	2
		LL_ASSERT(0);
   1540e:	4040      	eors	r0, r0
   15410:	f380 8811 	msr	BASEPRI, r0
   15414:	f04f 0004 	mov.w	r0, #4
   15418:	df02      	svc	2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1541a:	4899      	ldr	r0, [pc, #612]	; (15680 <event_connection_prepare+0x1228>)
   1541c:	f7f9 f975 	bl	e70a <mem_acquire>
	if (node_tx) {
   15420:	4601      	mov	r1, r0
   15422:	2800      	cmp	r0, #0
   15424:	f43f ae59 	beq.w	150da <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   15428:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1542c:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15430:	7903      	ldrb	r3, [r0, #4]
   15432:	f043 0303 	orr.w	r3, r3, #3
   15436:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   15438:	2301      	movs	r3, #1
   1543a:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   1543c:	2312      	movs	r3, #18
   1543e:	71c3      	strb	r3, [r0, #7]
		ctrl_tx_enqueue(conn, node_tx);
   15440:	4620      	mov	r0, r4
   15442:	f7fb fbf3 	bl	10c2c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   15446:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   1544a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   1544e:	e644      	b.n	150da <event_connection_prepare+0xc82>
	if (conn->llcp.phy_upd_ind.initiate) {
   15450:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   15454:	f012 0f01 	tst.w	r2, #1
   15458:	d16b      	bne.n	15532 <event_connection_prepare+0x10da>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
   1545a:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   1545e:	1aeb      	subs	r3, r5, r3
   15460:	b29b      	uxth	r3, r3
   15462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15466:	f6bf ae38 	bge.w	150da <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   1546a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1546e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		old_tx = conn->phy_tx;
   15472:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   15476:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		old_rx = conn->phy_rx;
   1547a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   1547e:	f000 0007 	and.w	r0, r0, #7
		if (conn->llcp.phy_upd_ind.tx) {
   15482:	f012 0f1c 	tst.w	r2, #28
   15486:	d009      	beq.n	1549c <event_connection_prepare+0x1044>
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   15488:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1548c:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15490:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
   15494:	f363 0ec5 	bfi	lr, r3, #3, #3
   15498:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
   1549c:	f012 0fe0 	tst.w	r2, #224	; 0xe0
   154a0:	d008      	beq.n	154b4 <event_connection_prepare+0x105c>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
   154a2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   154a6:	095b      	lsrs	r3, r3, #5
   154a8:	f894 e03a 	ldrb.w	lr, [r4, #58]	; 0x3a
   154ac:	f363 0e02 	bfi	lr, r3, #0, #3
   154b0:	f884 e03a 	strb.w	lr, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
   154b4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   154b8:	f3c3 1e80 	ubfx	lr, r3, #6, #1
   154bc:	f36e 13c7 	bfi	r3, lr, #7, #1
   154c0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   154c4:	f012 0f02 	tst.w	r2, #2
   154c8:	d105      	bne.n	154d6 <event_connection_prepare+0x107e>
   154ca:	b2db      	uxtb	r3, r3
   154cc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   154d0:	4299      	cmp	r1, r3
   154d2:	f000 80b0 	beq.w	15636 <event_connection_prepare+0x11de>
	if (_radio.packet_rx_acquire >=
   154d6:	4b6b      	ldr	r3, [pc, #428]	; (15684 <event_connection_prepare+0x122c>)
   154d8:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   154dc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   154e0:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   154e2:	429a      	cmp	r2, r3
   154e4:	f0c0 80af 	bcc.w	15646 <event_connection_prepare+0x11ee>
			_radio.packet_rx_last);
   154e8:	4b66      	ldr	r3, [pc, #408]	; (15684 <event_connection_prepare+0x122c>)
   154ea:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   154ee:	1ad3      	subs	r3, r2, r3
   154f0:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   154f2:	2b01      	cmp	r3, #1
   154f4:	f240 80b1 	bls.w	1565a <event_connection_prepare+0x1202>
	return _radio.packet_rx[_radio.packet_rx_last];
   154f8:	4b62      	ldr	r3, [pc, #392]	; (15684 <event_connection_prepare+0x122c>)
   154fa:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   154fe:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   15506:	2b00      	cmp	r3, #0
   15508:	f000 80a9 	beq.w	1565e <event_connection_prepare+0x1206>
		node_rx->hdr.handle = conn->handle;
   1550c:	8c22      	ldrh	r2, [r4, #32]
   1550e:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15510:	220c      	movs	r2, #12
   15512:	711a      	strb	r2, [r3, #4]
		p->status = 0;
   15514:	2200      	movs	r2, #0
   15516:	72da      	strb	r2, [r3, #11]
		p->tx = conn->phy_tx;
   15518:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1551c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   15520:	731a      	strb	r2, [r3, #12]
		p->rx = conn->phy_rx;
   15522:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   15526:	f3c2 0202 	ubfx	r2, r2, #0, #3
   1552a:	735a      	strb	r2, [r3, #13]
		packet_rx_enqueue();
   1552c:	f7fe f932 	bl	13794 <packet_rx_enqueue>
   15530:	e5d3      	b.n	150da <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15532:	4853      	ldr	r0, [pc, #332]	; (15680 <event_connection_prepare+0x1228>)
   15534:	f7f9 f8e9 	bl	e70a <mem_acquire>
		if (node_tx) {
   15538:	4680      	mov	r8, r0
   1553a:	2800      	cmp	r0, #0
   1553c:	f43f adcd 	beq.w	150da <event_connection_prepare+0xc82>
			conn->llcp.phy_upd_ind.initiate = 0;
   15540:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15544:	f36f 0300 	bfc	r3, #0, #1
   15548:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
   1554c:	b2db      	uxtb	r3, r3
   1554e:	f3c3 0282 	ubfx	r2, r3, #2, #3
   15552:	ea52 1353 	orrs.w	r3, r2, r3, lsr #5
   15556:	d147      	bne.n	155e8 <event_connection_prepare+0x1190>
				conn->llcp_ack = conn->llcp_req;
   15558:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1555c:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
				conn->llcp.phy_upd_ind.instant = 0;
   15560:	2300      	movs	r3, #0
   15562:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
   15566:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1556a:	f013 0f02 	tst.w	r3, #2
   1556e:	d041      	beq.n	155f4 <event_connection_prepare+0x119c>
	if (_radio.packet_rx_acquire >=
   15570:	4b44      	ldr	r3, [pc, #272]	; (15684 <event_connection_prepare+0x122c>)
   15572:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15576:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1557a:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1557c:	429a      	cmp	r2, r3
   1557e:	d321      	bcc.n	155c4 <event_connection_prepare+0x116c>
			_radio.packet_rx_last);
   15580:	4b40      	ldr	r3, [pc, #256]	; (15684 <event_connection_prepare+0x122c>)
   15582:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15586:	1ad3      	subs	r3, r2, r3
   15588:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1558a:	2b01      	cmp	r3, #1
   1558c:	d924      	bls.n	155d8 <event_connection_prepare+0x1180>
	return _radio.packet_rx[_radio.packet_rx_last];
   1558e:	4b3d      	ldr	r3, [pc, #244]	; (15684 <event_connection_prepare+0x122c>)
   15590:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   15594:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
					LL_ASSERT(node_rx);
   1559c:	b1f3      	cbz	r3, 155dc <event_connection_prepare+0x1184>
					node_rx->hdr.handle = conn->handle;
   1559e:	8c22      	ldrh	r2, [r4, #32]
   155a0:	80da      	strh	r2, [r3, #6]
					node_rx->hdr.type =
   155a2:	220c      	movs	r2, #12
   155a4:	711a      	strb	r2, [r3, #4]
					p->status = 0;
   155a6:	2200      	movs	r2, #0
   155a8:	72da      	strb	r2, [r3, #11]
					p->tx = conn->phy_tx;
   155aa:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   155ae:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   155b2:	731a      	strb	r2, [r3, #12]
					p->rx = conn->phy_rx;
   155b4:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   155b8:	f3c2 0202 	ubfx	r2, r2, #0, #3
   155bc:	735a      	strb	r2, [r3, #13]
					packet_rx_enqueue();
   155be:	f7fe f8e9 	bl	13794 <packet_rx_enqueue>
   155c2:	e017      	b.n	155f4 <event_connection_prepare+0x119c>
		return (_radio.packet_rx_count -
   155c4:	492f      	ldr	r1, [pc, #188]	; (15684 <event_connection_prepare+0x122c>)
   155c6:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   155ca:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   155ce:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   155d0:	fa52 f383 	uxtab	r3, r2, r3
   155d4:	b2db      	uxtb	r3, r3
   155d6:	e7d8      	b.n	1558a <event_connection_prepare+0x1132>
		return 0;
   155d8:	2300      	movs	r3, #0
   155da:	e7df      	b.n	1559c <event_connection_prepare+0x1144>
					LL_ASSERT(node_rx);
   155dc:	4040      	eors	r0, r0
   155de:	f380 8811 	msr	BASEPRI, r0
   155e2:	f04f 0004 	mov.w	r0, #4
   155e6:	df02      	svc	2
								 conn->latency +
   155e8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
				conn->llcp.phy_upd_ind.instant = event_counter +
   155ea:	442b      	add	r3, r5
   155ec:	b29b      	uxth	r3, r3
								 conn->latency +
   155ee:	3306      	adds	r3, #6
				conn->llcp.phy_upd_ind.instant = event_counter +
   155f0:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   155f4:	f898 3004 	ldrb.w	r3, [r8, #4]
   155f8:	f043 0303 	orr.w	r3, r3, #3
   155fc:	f888 3004 	strb.w	r3, [r8, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   15600:	2305      	movs	r3, #5
   15602:	f888 3005 	strb.w	r3, [r8, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   15606:	2318      	movs	r3, #24
   15608:	f888 3007 	strb.w	r3, [r8, #7]
			p->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   1560c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15610:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15614:	f888 3008 	strb.w	r3, [r8, #8]
			p->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   15618:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1561c:	f3c3 1342 	ubfx	r3, r3, #5, #3
   15620:	f888 3009 	strb.w	r3, [r8, #9]
			p->instant = conn->llcp.phy_upd_ind.instant;
   15624:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   15628:	f8a8 300a 	strh.w	r3, [r8, #10]
			ctrl_tx_enqueue(conn, node_tx);
   1562c:	4641      	mov	r1, r8
   1562e:	4620      	mov	r0, r4
   15630:	f7fb fafc 	bl	10c2c <ctrl_tx_enqueue>
   15634:	e551      	b.n	150da <event_connection_prepare+0xc82>
		    (conn->phy_rx == old_rx)) {
   15636:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   1563a:	f003 0307 	and.w	r3, r3, #7
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   1563e:	4298      	cmp	r0, r3
   15640:	f47f af49 	bne.w	154d6 <event_connection_prepare+0x107e>
   15644:	e549      	b.n	150da <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   15646:	490f      	ldr	r1, [pc, #60]	; (15684 <event_connection_prepare+0x122c>)
   15648:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   1564c:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15650:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   15652:	fa52 f383 	uxtab	r3, r2, r3
   15656:	b2db      	uxtb	r3, r3
   15658:	e74b      	b.n	154f2 <event_connection_prepare+0x109a>
		return 0;
   1565a:	2300      	movs	r3, #0
   1565c:	e753      	b.n	15506 <event_connection_prepare+0x10ae>
		LL_ASSERT(node_rx);
   1565e:	4040      	eors	r0, r0
   15660:	f380 8811 	msr	BASEPRI, r0
   15664:	f04f 0004 	mov.w	r0, #4
   15668:	df02      	svc	2
			LL_ASSERT(0);
   1566a:	4040      	eors	r0, r0
   1566c:	f380 8811 	msr	BASEPRI, r0
   15670:	f04f 0004 	mov.w	r0, #4
   15674:	df02      	svc	2
				conn->procedure_expire++;
   15676:	3301      	adds	r3, #1
   15678:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   1567c:	e555      	b.n	1512a <event_connection_prepare+0xcd2>
   1567e:	bf00      	nop
   15680:	20000f44 	.word	0x20000f44
   15684:	20000dec 	.word	0x20000dec
	if (_radio.packet_rx_acquire >=
   15688:	4bbf      	ldr	r3, [pc, #764]	; (15988 <event_connection_prepare+0x1530>)
   1568a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1568e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15692:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15694:	429a      	cmp	r2, r3
   15696:	d346      	bcc.n	15726 <event_connection_prepare+0x12ce>
			_radio.packet_rx_last);
   15698:	4bbb      	ldr	r3, [pc, #748]	; (15988 <event_connection_prepare+0x1530>)
   1569a:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1569e:	eba2 0808 	sub.w	r8, r2, r8
   156a2:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   156a6:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   156aa:	4bb7      	ldr	r3, [pc, #732]	; (15988 <event_connection_prepare+0x1530>)
   156ac:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   156b0:	f7f9 f85f 	bl	e772 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   156b4:	4440      	add	r0, r8
   156b6:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   156b8:	28ff      	cmp	r0, #255	; 0xff
   156ba:	d840      	bhi.n	1573e <event_connection_prepare+0x12e6>
		if (_radio.packet_rx_data_count != free_count_rx) {
   156bc:	4bb2      	ldr	r3, [pc, #712]	; (15988 <event_connection_prepare+0x1530>)
   156be:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   156c2:	4298      	cmp	r0, r3
   156c4:	f040 8131 	bne.w	1592a <event_connection_prepare+0x14d2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   156c8:	48b0      	ldr	r0, [pc, #704]	; (1598c <event_connection_prepare+0x1534>)
   156ca:	f7f9 f81e 	bl	e70a <mem_acquire>
		if (!node_tx) {
   156ce:	4601      	mov	r1, r0
   156d0:	2800      	cmp	r0, #0
   156d2:	f000 812a 	beq.w	1592a <event_connection_prepare+0x14d2>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   156d6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   156da:	2201      	movs	r2, #1
   156dc:	f362 0301 	bfi	r3, r2, #0, #2
   156e0:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   156e4:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   156e8:	85a3      	strh	r3, [r4, #44]	; 0x2c
		conn->default_tx_time = conn->llcp_length.tx_time;
   156ea:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   156ee:	8663      	strh	r3, [r4, #50]	; 0x32
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   156f0:	7903      	ldrb	r3, [r0, #4]
   156f2:	f043 0303 	orr.w	r3, r3, #3
   156f6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   156f8:	2309      	movs	r3, #9
   156fa:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   156fc:	2314      	movs	r3, #20
   156fe:	71c3      	strb	r3, [r0, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   15700:	231b      	movs	r3, #27
   15702:	7203      	strb	r3, [r0, #8]
   15704:	2300      	movs	r3, #0
   15706:	7243      	strb	r3, [r0, #9]
		lr->max_tx_octets = conn->default_tx_octets;
   15708:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1570a:	8183      	strh	r3, [r0, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   1570c:	2348      	movs	r3, #72	; 0x48
   1570e:	7283      	strb	r3, [r0, #10]
   15710:	72ca      	strb	r2, [r1, #11]
		lr->max_tx_time = conn->default_tx_time;
   15712:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   15714:	81c3      	strh	r3, [r0, #14]
		ctrl_tx_enqueue(conn, node_tx);
   15716:	4620      	mov	r0, r4
   15718:	f7fb fa88 	bl	10c2c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   1571c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15720:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   15724:	e101      	b.n	1592a <event_connection_prepare+0x14d2>
		return (_radio.packet_rx_count -
   15726:	4b98      	ldr	r3, [pc, #608]	; (15988 <event_connection_prepare+0x1530>)
   15728:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   1572c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15730:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   15734:	fa52 f888 	uxtab	r8, r2, r8
   15738:	fa5f f888 	uxtb.w	r8, r8
   1573c:	e7b3      	b.n	156a6 <event_connection_prepare+0x124e>
		LL_ASSERT(free_count_rx <= 0xFF);
   1573e:	4040      	eors	r0, r0
   15740:	f380 8811 	msr	BASEPRI, r0
   15744:	f04f 0004 	mov.w	r0, #4
   15748:	df02      	svc	2
	if (_radio.packet_rx_acquire >=
   1574a:	4b8f      	ldr	r3, [pc, #572]	; (15988 <event_connection_prepare+0x1530>)
   1574c:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15750:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15754:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15756:	429a      	cmp	r2, r3
   15758:	d352      	bcc.n	15800 <event_connection_prepare+0x13a8>
			_radio.packet_rx_last);
   1575a:	4b8b      	ldr	r3, [pc, #556]	; (15988 <event_connection_prepare+0x1530>)
   1575c:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15760:	eba2 0808 	sub.w	r8, r2, r8
   15764:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   15768:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   1576c:	4b86      	ldr	r3, [pc, #536]	; (15988 <event_connection_prepare+0x1530>)
   1576e:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   15772:	f7f8 fffe 	bl	e772 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   15776:	4440      	add	r0, r8
   15778:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   1577a:	28ff      	cmp	r0, #255	; 0xff
   1577c:	d84c      	bhi.n	15818 <event_connection_prepare+0x13c0>
		if (_radio.packet_rx_data_count != free_count_rx) {
   1577e:	4b82      	ldr	r3, [pc, #520]	; (15988 <event_connection_prepare+0x1530>)
   15780:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   15784:	4298      	cmp	r0, r3
   15786:	d14d      	bne.n	15824 <event_connection_prepare+0x13cc>
		conn->llcp_length.ack = conn->llcp_length.req;
   15788:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1578c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->procedure_expire = 0;
   15790:	2100      	movs	r1, #0
   15792:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
   15796:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 15988 <event_connection_prepare+0x1530>
   1579a:	f8d8 3110 	ldr.w	r3, [r8, #272]	; 0x110
   1579e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   157a2:	f361 02c3 	bfi	r2, r1, #3, #1
   157a6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
   157aa:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   157ae:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
   157b0:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
   157b4:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
   157b6:	f8d8 0108 	ldr.w	r0, [r8, #264]	; 0x108
   157ba:	f7f8 ffda 	bl	e772 <mem_free_count_get>
		if (_radio.advertiser.conn) {
   157be:	f8d8 30c8 	ldr.w	r3, [r8, #200]	; 0xc8
   157c2:	b10b      	cbz	r3, 157c8 <event_connection_prepare+0x1370>
			free_count_conn++;
   157c4:	3001      	adds	r0, #1
   157c6:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
   157c8:	4b6f      	ldr	r3, [pc, #444]	; (15988 <event_connection_prepare+0x1530>)
   157ca:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   157ce:	b10b      	cbz	r3, 157d4 <event_connection_prepare+0x137c>
			free_count_conn++;
   157d0:	3001      	adds	r0, #1
   157d2:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   157d4:	f8b4 9030 	ldrh.w	r9, [r4, #48]	; 0x30
   157d8:	f109 090e 	add.w	r9, r9, #14
   157dc:	fa1f f989 	uxth.w	r9, r9
   157e0:	f029 0903 	bic.w	r9, r9, #3
   157e4:	fa1f f989 	uxth.w	r9, r9
		if (((free_count_conn + 1) == _radio.connection_count) ||
   157e8:	3001      	adds	r0, #1
   157ea:	4b67      	ldr	r3, [pc, #412]	; (15988 <event_connection_prepare+0x1530>)
   157ec:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   157f0:	4298      	cmp	r0, r3
   157f2:	d038      	beq.n	15866 <event_connection_prepare+0x140e>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
   157f4:	4b64      	ldr	r3, [pc, #400]	; (15988 <event_connection_prepare+0x1530>)
   157f6:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
		if (((free_count_conn + 1) == _radio.connection_count) ||
   157fa:	4599      	cmp	r9, r3
   157fc:	d833      	bhi.n	15866 <event_connection_prepare+0x140e>
   157fe:	e066      	b.n	158ce <event_connection_prepare+0x1476>
		return (_radio.packet_rx_count -
   15800:	4b61      	ldr	r3, [pc, #388]	; (15988 <event_connection_prepare+0x1530>)
   15802:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   15806:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1580a:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   1580e:	fa52 f888 	uxtab	r8, r2, r8
   15812:	fa5f f888 	uxtb.w	r8, r8
   15816:	e7a7      	b.n	15768 <event_connection_prepare+0x1310>
		LL_ASSERT(free_count_rx <= 0xFF);
   15818:	4040      	eors	r0, r0
   1581a:	f380 8811 	msr	BASEPRI, r0
   1581e:	f04f 0004 	mov.w	r0, #4
   15822:	df02      	svc	2
			LL_ASSERT(0);
   15824:	4040      	eors	r0, r0
   15826:	f380 8811 	msr	BASEPRI, r0
   1582a:	f04f 0004 	mov.w	r0, #4
   1582e:	df02      	svc	2
					_radio.packet_rx_acquire -= 1;
   15830:	3b01      	subs	r3, #1
   15832:	4a55      	ldr	r2, [pc, #340]	; (15988 <event_connection_prepare+0x1530>)
   15834:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   15838:	4f53      	ldr	r7, [pc, #332]	; (15988 <event_connection_prepare+0x1530>)
   1583a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
						_radio.packet_rx_acquire];
   1583e:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   15842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
				mem_release(node_rx->hdr.onion.link,
   15846:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   1584a:	6818      	ldr	r0, [r3, #0]
   1584c:	f7f8 ff79 	bl	e742 <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
   15850:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
   15854:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
   15858:	3a01      	subs	r2, #1
   1585a:	4293      	cmp	r3, r2
   1585c:	da14      	bge.n	15888 <event_connection_prepare+0x1430>
				_radio.link_rx_data_quota++;
   1585e:	3301      	adds	r3, #1
   15860:	4a49      	ldr	r2, [pc, #292]	; (15988 <event_connection_prepare+0x1530>)
   15862:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
			while (_radio.packet_rx_acquire !=
   15866:	4a48      	ldr	r2, [pc, #288]	; (15988 <event_connection_prepare+0x1530>)
   15868:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
				_radio.packet_rx_last) {
   1586c:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   15870:	b2d2      	uxtb	r2, r2
			while (_radio.packet_rx_acquire !=
   15872:	4293      	cmp	r3, r2
   15874:	d00e      	beq.n	15894 <event_connection_prepare+0x143c>
				if (_radio.packet_rx_acquire == 0) {
   15876:	2b00      	cmp	r3, #0
   15878:	d1da      	bne.n	15830 <event_connection_prepare+0x13d8>
						_radio.packet_rx_count - 1;
   1587a:	4a43      	ldr	r2, [pc, #268]	; (15988 <event_connection_prepare+0x1530>)
   1587c:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
   15880:	3b01      	subs	r3, #1
					_radio.packet_rx_acquire =
   15882:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
   15886:	e7d7      	b.n	15838 <event_connection_prepare+0x13e0>
				LL_ASSERT(_radio.link_rx_data_quota <
   15888:	4040      	eors	r0, r0
   1588a:	f380 8811 	msr	BASEPRI, r0
   1588e:	f04f 0004 	mov.w	r0, #4
   15892:	df02      	svc	2
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   15894:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   15896:	2b29      	cmp	r3, #41	; 0x29
   15898:	d85f      	bhi.n	1595a <event_connection_prepare+0x1502>
				_radio.packet_rx_data_size =
   1589a:	2234      	movs	r2, #52	; 0x34
   1589c:	4b3a      	ldr	r3, [pc, #232]	; (15988 <event_connection_prepare+0x1530>)
   1589e:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				_radio.packet_rx_data_pool_size /
   158a2:	4b39      	ldr	r3, [pc, #228]	; (15988 <event_connection_prepare+0x1530>)
   158a4:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
				_radio.packet_rx_data_size;
   158a8:	f8b3 1134 	ldrh.w	r1, [r3, #308]	; 0x134
			_radio.packet_rx_data_count =
   158ac:	fbb2 f2f1 	udiv	r2, r2, r1
   158b0:	b2d2      	uxtb	r2, r2
   158b2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
			LL_ASSERT(_radio.packet_rx_data_count);
   158b6:	2a00      	cmp	r2, #0
   158b8:	d053      	beq.n	15962 <event_connection_prepare+0x150a>
			mem_init(_radio.pkt_rx_data_pool,
   158ba:	4833      	ldr	r0, [pc, #204]	; (15988 <event_connection_prepare+0x1530>)
   158bc:	f500 7396 	add.w	r3, r0, #300	; 0x12c
   158c0:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
   158c4:	f7f8 fefc 	bl	e6c0 <mem_init>
			packet_rx_allocate(4);
   158c8:	2004      	movs	r0, #4
   158ca:	f7fb fc59 	bl	11180 <packet_rx_allocate>
	if (_radio.packet_rx_acquire >=
   158ce:	4b2e      	ldr	r3, [pc, #184]	; (15988 <event_connection_prepare+0x1530>)
   158d0:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   158d4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   158d8:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   158da:	429a      	cmp	r2, r3
   158dc:	d347      	bcc.n	1596e <event_connection_prepare+0x1516>
			_radio.packet_rx_last);
   158de:	4b2a      	ldr	r3, [pc, #168]	; (15988 <event_connection_prepare+0x1530>)
   158e0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   158e4:	1ad3      	subs	r3, r2, r3
   158e6:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   158e8:	2b01      	cmp	r3, #1
   158ea:	d94a      	bls.n	15982 <event_connection_prepare+0x152a>
	return _radio.packet_rx[_radio.packet_rx_last];
   158ec:	4b26      	ldr	r3, [pc, #152]	; (15988 <event_connection_prepare+0x1530>)
   158ee:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   158f2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   158f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   158fa:	2b00      	cmp	r3, #0
   158fc:	d04a      	beq.n	15994 <event_connection_prepare+0x153c>
		node_rx->hdr.handle = conn->handle;
   158fe:	8c22      	ldrh	r2, [r4, #32]
   15900:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15902:	2201      	movs	r2, #1
   15904:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   15906:	7a1a      	ldrb	r2, [r3, #8]
   15908:	f042 0203 	orr.w	r2, r2, #3
   1590c:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
   1590e:	2209      	movs	r2, #9
   15910:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   15912:	2215      	movs	r2, #21
   15914:	72da      	strb	r2, [r3, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   15916:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   15918:	819a      	strh	r2, [r3, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   1591a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   1591c:	821a      	strh	r2, [r3, #16]
		lr->max_rx_time = conn->max_rx_time;
   1591e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   15920:	81da      	strh	r2, [r3, #14]
		lr->max_tx_time = conn->max_tx_time;
   15922:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   15924:	825a      	strh	r2, [r3, #18]
		packet_rx_enqueue();
   15926:	f7fd ff35 	bl	13794 <packet_rx_enqueue>
	event_common_prepare(ticks_at_expire, remainder,
   1592a:	1d23      	adds	r3, r4, #4
   1592c:	68a1      	ldr	r1, [r4, #8]
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   1592e:	8c22      	ldrh	r2, [r4, #32]
	event_common_prepare(ticks_at_expire, remainder,
   15930:	3207      	adds	r2, #7
   15932:	b2d2      	uxtb	r2, r2
   15934:	f994 001d 	ldrsb.w	r0, [r4, #29]
   15938:	2800      	cmp	r0, #0
   1593a:	db37      	blt.n	159ac <event_connection_prepare+0x1554>
   1593c:	4814      	ldr	r0, [pc, #80]	; (15990 <event_connection_prepare+0x1538>)
   1593e:	9403      	str	r4, [sp, #12]
   15940:	9002      	str	r0, [sp, #8]
   15942:	9201      	str	r2, [sp, #4]
   15944:	9100      	str	r1, [sp, #0]
   15946:	4622      	mov	r2, r4
   15948:	990a      	ldr	r1, [sp, #40]	; 0x28
   1594a:	4630      	mov	r0, r6
   1594c:	f7fe fc7e 	bl	1424c <event_common_prepare>
	conn->event_counter = event_counter + 1;
   15950:	3501      	adds	r5, #1
   15952:	8465      	strh	r5, [r4, #34]	; 0x22
}
   15954:	b00f      	add	sp, #60	; 0x3c
   15956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				_radio.packet_rx_data_size =
   1595a:	4b0b      	ldr	r3, [pc, #44]	; (15988 <event_connection_prepare+0x1530>)
   1595c:	f8a3 9134 	strh.w	r9, [r3, #308]	; 0x134
   15960:	e79f      	b.n	158a2 <event_connection_prepare+0x144a>
			LL_ASSERT(_radio.packet_rx_data_count);
   15962:	4040      	eors	r0, r0
   15964:	f380 8811 	msr	BASEPRI, r0
   15968:	f04f 0004 	mov.w	r0, #4
   1596c:	df02      	svc	2
		return (_radio.packet_rx_count -
   1596e:	4906      	ldr	r1, [pc, #24]	; (15988 <event_connection_prepare+0x1530>)
   15970:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   15974:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15978:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1597a:	fa52 f383 	uxtab	r3, r2, r3
   1597e:	b2db      	uxtb	r3, r3
   15980:	e7b2      	b.n	158e8 <event_connection_prepare+0x1490>
		return 0;
   15982:	2300      	movs	r3, #0
   15984:	e7b9      	b.n	158fa <event_connection_prepare+0x14a2>
   15986:	bf00      	nop
   15988:	20000dec 	.word	0x20000dec
   1598c:	20000f44 	.word	0x20000f44
   15990:	00015e09 	.word	0x00015e09
		LL_ASSERT(node_rx);
   15994:	4040      	eors	r0, r0
   15996:	f380 8811 	msr	BASEPRI, r0
   1599a:	f04f 0004 	mov.w	r0, #4
   1599e:	df02      	svc	2
		LL_ASSERT(0);
   159a0:	4040      	eors	r0, r0
   159a2:	f380 8811 	msr	BASEPRI, r0
   159a6:	f04f 0004 	mov.w	r0, #4
   159aa:	df02      	svc	2
	event_common_prepare(ticks_at_expire, remainder,
   159ac:	4800      	ldr	r0, [pc, #0]	; (159b0 <event_connection_prepare+0x1558>)
   159ae:	e7c6      	b.n	1593e <event_connection_prepare+0x14e6>
   159b0:	00015f45 	.word	0x00015f45

000159b4 <event_slave_prepare>:
{
   159b4:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   159b6:	f7fe fd4f 	bl	14458 <event_connection_prepare>
   159ba:	bd08      	pop	{r3, pc}

000159bc <event_master_prepare>:
{
   159bc:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   159be:	f7fe fd4b 	bl	14458 <event_connection_prepare>
   159c2:	bd08      	pop	{r3, pc}

000159c4 <event_scan_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   159c4:	4b20      	ldr	r3, [pc, #128]	; (15a48 <event_scan_prepare+0x84>)
   159c6:	7b1b      	ldrb	r3, [r3, #12]
   159c8:	bb23      	cbnz	r3, 15a14 <event_scan_prepare+0x50>
{
   159ca:	b530      	push	{r4, r5, lr}
   159cc:	b085      	sub	sp, #20
   159ce:	4605      	mov	r5, r0
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   159d0:	4c1d      	ldr	r4, [pc, #116]	; (15a48 <event_scan_prepare+0x84>)
   159d2:	2306      	movs	r3, #6
   159d4:	7323      	strb	r3, [r4, #12]
	event_common_prepare(ticks_at_expire, remainder,
   159d6:	2200      	movs	r2, #0
   159d8:	9203      	str	r2, [sp, #12]
   159da:	4a1c      	ldr	r2, [pc, #112]	; (15a4c <event_scan_prepare+0x88>)
   159dc:	9202      	str	r2, [sp, #8]
   159de:	9301      	str	r3, [sp, #4]
   159e0:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   159e4:	9300      	str	r3, [sp, #0]
   159e6:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   159ea:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
   159ee:	f7fe fc2d 	bl	1424c <event_common_prepare>
	if (_radio.scanner.conn) {
   159f2:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   159f6:	b15b      	cbz	r3, 15a10 <event_scan_prepare+0x4c>
		if (_radio.scanner.hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   159f8:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   159fc:	2b00      	cmp	r3, #0
   159fe:	db0f      	blt.n	15a20 <event_scan_prepare+0x5c>
		s_mfy_sched_after_mstr_free_offset_get.param =
   15a00:	4b13      	ldr	r3, [pc, #76]	; (15a50 <event_scan_prepare+0x8c>)
   15a02:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   15a04:	2201      	movs	r2, #1
   15a06:	4611      	mov	r1, r2
   15a08:	2000      	movs	r0, #0
   15a0a:	f7f8 fd3d 	bl	e488 <mayfly_enqueue>
		LL_ASSERT(!retval);
   15a0e:	b9a8      	cbnz	r0, 15a3c <event_scan_prepare+0x78>
}
   15a10:	b005      	add	sp, #20
   15a12:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   15a14:	4040      	eors	r0, r0
   15a16:	f380 8811 	msr	BASEPRI, r0
   15a1a:	f04f 0004 	mov.w	r0, #4
   15a1e:	df02      	svc	2
				_radio.scanner.hdr.ticks_preempt_to_start;
   15a20:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
				_radio.scanner.hdr.ticks_active_to_start :
   15a24:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
				((_radio.scanner.hdr.ticks_xtal_to_start &
   15a28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   15a2c:	4291      	cmp	r1, r2
   15a2e:	bf2c      	ite	cs
   15a30:	ebc3 0301 	rsbcs	r3, r3, r1
   15a34:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
   15a38:	441d      	add	r5, r3
   15a3a:	e7e1      	b.n	15a00 <event_scan_prepare+0x3c>
		LL_ASSERT(!retval);
   15a3c:	4040      	eors	r0, r0
   15a3e:	f380 8811 	msr	BASEPRI, r0
   15a42:	f04f 0004 	mov.w	r0, #4
   15a46:	df02      	svc	2
   15a48:	20000dec 	.word	0x20000dec
   15a4c:	000160e1 	.word	0x000160e1
   15a50:	2000bb90 	.word	0x2000bb90
   15a54:	00000000 	.word	0x00000000

00015a58 <mayfly_xtal_stop_calc>:
{
   15a58:	b530      	push	{r4, r5, lr}
   15a5a:	b08d      	sub	sp, #52	; 0x34
   15a5c:	4604      	mov	r4, r0
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   15a5e:	2302      	movs	r3, #2
   15a60:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = 0xff;
   15a62:	23ff      	movs	r3, #255	; 0xff
   15a64:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	ticks_to_expire = 0;
   15a68:	2300      	movs	r3, #0
   15a6a:	930a      	str	r3, [sp, #40]	; 0x28
   15a6c:	e012      	b.n	15a94 <mayfly_xtal_stop_calc+0x3c>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   15a6e:	2101      	movs	r1, #1
   15a70:	2000      	movs	r0, #0
   15a72:	f7fa fc71 	bl	10358 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   15a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15a78:	2b02      	cmp	r3, #2
   15a7a:	d0f8      	beq.n	15a6e <mayfly_xtal_stop_calc+0x16>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   15a7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15a7e:	b9cb      	cbnz	r3, 15ab4 <mayfly_xtal_stop_calc+0x5c>
	} while (ticker_id != 0xff &&
   15a80:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
			       _radio.connection_count));
   15a84:	2aff      	cmp	r2, #255	; 0xff
   15a86:	d01b      	beq.n	15ac0 <mayfly_xtal_stop_calc+0x68>
   15a88:	4b8b      	ldr	r3, [pc, #556]	; (15cb8 <mayfly_xtal_stop_calc+0x260>)
   15a8a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		 ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   15a8e:	3307      	adds	r3, #7
	} while (ticker_id != 0xff &&
   15a90:	429a      	cmp	r2, r3
   15a92:	db15      	blt.n	15ac0 <mayfly_xtal_stop_calc+0x68>
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   15a94:	ab0b      	add	r3, sp, #44	; 0x2c
   15a96:	9302      	str	r3, [sp, #8]
   15a98:	4b88      	ldr	r3, [pc, #544]	; (15cbc <mayfly_xtal_stop_calc+0x264>)
   15a9a:	9301      	str	r3, [sp, #4]
   15a9c:	ab0a      	add	r3, sp, #40	; 0x28
   15a9e:	9300      	str	r3, [sp, #0]
   15aa0:	ab09      	add	r3, sp, #36	; 0x24
   15aa2:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   15aa6:	2101      	movs	r1, #1
   15aa8:	2000      	movs	r0, #0
   15aaa:	f7fa fbd5 	bl	10258 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   15aae:	2802      	cmp	r0, #2
   15ab0:	d1e4      	bne.n	15a7c <mayfly_xtal_stop_calc+0x24>
   15ab2:	e7e0      	b.n	15a76 <mayfly_xtal_stop_calc+0x1e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   15ab4:	4040      	eors	r0, r0
   15ab6:	f380 8811 	msr	BASEPRI, r0
   15aba:	f04f 0004 	mov.w	r0, #4
   15abe:	df02      	svc	2
	if ((ticker_id != 0xff) &&
   15ac0:	2aff      	cmp	r2, #255	; 0xff
   15ac2:	d002      	beq.n	15aca <mayfly_xtal_stop_calc+0x72>
	    (ticks_to_expire <
   15ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	if ((ticker_id != 0xff) &&
   15ac6:	2ba8      	cmp	r3, #168	; 0xa8
   15ac8:	d91a      	bls.n	15b00 <mayfly_xtal_stop_calc+0xa8>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   15aca:	2100      	movs	r1, #0
   15acc:	2001      	movs	r0, #1
   15ace:	f7fb fdcd 	bl	1166c <mayfly_xtal_retain>
		if ((ticker_id != 0xff) && (ticker_id >= RADIO_TICKER_ID_ADV)) {
   15ad2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   15ad6:	1f53      	subs	r3, r2, #5
   15ad8:	b2db      	uxtb	r3, r3
   15ada:	2bf9      	cmp	r3, #249	; 0xf9
   15adc:	d80e      	bhi.n	15afc <mayfly_xtal_stop_calc+0xa4>
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   15ade:	2a06      	cmp	r2, #6
   15ae0:	f200 80d1 	bhi.w	15c86 <mayfly_xtal_stop_calc+0x22e>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   15ae4:	2a05      	cmp	r2, #5
   15ae6:	f000 80de 	beq.w	15ca6 <mayfly_xtal_stop_calc+0x24e>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   15aea:	2a06      	cmp	r2, #6
   15aec:	f040 80d5 	bne.w	15c9a <mayfly_xtal_stop_calc+0x242>
				hdr = &_radio.scanner.hdr;
   15af0:	4873      	ldr	r0, [pc, #460]	; (15cc0 <mayfly_xtal_stop_calc+0x268>)
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
   15af2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   15af6:	2101      	movs	r1, #1
   15af8:	f7fe fb80 	bl	141fc <prepare_normal_set>
}
   15afc:	b00d      	add	sp, #52	; 0x34
   15afe:	bd30      	pop	{r4, r5, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
   15b00:	2101      	movs	r1, #1
   15b02:	4608      	mov	r0, r1
   15b04:	f7fb fdb2 	bl	1166c <mayfly_xtal_retain>
		if (ticker_id >= RADIO_TICKER_ID_ADV) {
   15b08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   15b0c:	2b04      	cmp	r3, #4
   15b0e:	d9f5      	bls.n	15afc <mayfly_xtal_stop_calc+0xa4>
			u8_t ticker_id_current = ((u32_t)params & 0xff);
   15b10:	b2e4      	uxtb	r4, r4
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   15b12:	2b06      	cmp	r3, #6
   15b14:	d82a      	bhi.n	15b6c <mayfly_xtal_stop_calc+0x114>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   15b16:	2b05      	cmp	r3, #5
   15b18:	d03a      	beq.n	15b90 <mayfly_xtal_stop_calc+0x138>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   15b1a:	2b06      	cmp	r3, #6
   15b1c:	d132      	bne.n	15b84 <mayfly_xtal_stop_calc+0x12c>
				hdr = &_radio.scanner.hdr;
   15b1e:	4968      	ldr	r1, [pc, #416]	; (15cc0 <mayfly_xtal_stop_calc+0x268>)
			struct connection *conn = NULL;
   15b20:	2500      	movs	r5, #0
				hdr->ticks_preempt_to_start;
   15b22:	688b      	ldr	r3, [r1, #8]
				hdr->ticks_active_to_start :
   15b24:	684a      	ldr	r2, [r1, #4]
			ticks_prepare_to_start =
   15b26:	429a      	cmp	r2, r3
   15b28:	bf38      	it	cc
   15b2a:	461a      	movcc	r2, r3
			if ((hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) != 0) {
   15b2c:	680b      	ldr	r3, [r1, #0]
   15b2e:	2b00      	cmp	r3, #0
   15b30:	db31      	blt.n	15b96 <mayfly_xtal_stop_calc+0x13e>
				if (hdr->ticks_xtal_to_start >
   15b32:	429a      	cmp	r2, r3
   15b34:	d336      	bcc.n	15ba4 <mayfly_xtal_stop_calc+0x14c>
			if (ticker_id_current >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   15b36:	2c06      	cmp	r4, #6
   15b38:	d84e      	bhi.n	15bd8 <mayfly_xtal_stop_calc+0x180>
			struct connection *conn_curr = NULL;
   15b3a:	2400      	movs	r4, #0
			if ((conn) && (conn_curr) &&
   15b3c:	2d00      	cmp	r5, #0
   15b3e:	d0dd      	beq.n	15afc <mayfly_xtal_stop_calc+0xa4>
   15b40:	2c00      	cmp	r4, #0
   15b42:	d0db      	beq.n	15afc <mayfly_xtal_stop_calc+0xa4>
			    (conn_curr->conn_interval == conn->conn_interval)) {
   15b44:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   15b46:	8caa      	ldrh	r2, [r5, #36]	; 0x24
			if ((conn) && (conn_curr) &&
   15b48:	4293      	cmp	r3, r2
   15b4a:	d1d7      	bne.n	15afc <mayfly_xtal_stop_calc+0xa4>
					TICKER_US_TO_TICKS(conn->conn_interval * 1250);
   15b4c:	b292      	uxth	r2, r2
   15b4e:	485d      	ldr	r0, [pc, #372]	; (15cc4 <mayfly_xtal_stop_calc+0x26c>)
   15b50:	fba2 0100 	umull	r0, r1, r2, r0
   15b54:	f240 1323 	movw	r3, #291	; 0x123
   15b58:	fb03 1102 	mla	r1, r3, r2, r1
   15b5c:	a354      	add	r3, pc, #336	; (adr r3, 15cb0 <mayfly_xtal_stop_calc+0x258>)
   15b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b62:	f7eb facb 	bl	10fc <__aeabi_uldivmod>
				u32_t ticks_conn_interval =
   15b66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				while (ticks_to_expire > ticks_conn_interval) {
   15b6a:	e050      	b.n	15c0e <mayfly_xtal_stop_calc+0x1b6>
				conn = mem_get(_radio.conn_pool,
   15b6c:	3b07      	subs	r3, #7
   15b6e:	b29a      	uxth	r2, r3
   15b70:	f44f 71aa 	mov.w	r1, #340	; 0x154
   15b74:	4b50      	ldr	r3, [pc, #320]	; (15cb8 <mayfly_xtal_stop_calc+0x260>)
   15b76:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   15b7a:	f7f8 fe03 	bl	e784 <mem_get>
   15b7e:	4605      	mov	r5, r0
				hdr = &conn->hdr;
   15b80:	4601      	mov	r1, r0
   15b82:	e7ce      	b.n	15b22 <mayfly_xtal_stop_calc+0xca>
				LL_ASSERT(0);
   15b84:	4040      	eors	r0, r0
   15b86:	f380 8811 	msr	BASEPRI, r0
   15b8a:	f04f 0004 	mov.w	r0, #4
   15b8e:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   15b90:	494d      	ldr	r1, [pc, #308]	; (15cc8 <mayfly_xtal_stop_calc+0x270>)
			struct connection *conn = NULL;
   15b92:	2500      	movs	r5, #0
   15b94:	e7c5      	b.n	15b22 <mayfly_xtal_stop_calc+0xca>
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   15b96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						     (~((u32_t)1 << 31))) -
   15b9a:	1ad3      	subs	r3, r2, r3
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   15b9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15b9e:	4413      	add	r3, r2
   15ba0:	930a      	str	r3, [sp, #40]	; 0x28
   15ba2:	e7c8      	b.n	15b36 <mayfly_xtal_stop_calc+0xde>
					u32_t ticks_drift_plus =
   15ba4:	1a9b      	subs	r3, r3, r2
						ticker_update(
   15ba6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   15baa:	b29b      	uxth	r3, r3
					ticker_status =
   15bac:	9106      	str	r1, [sp, #24]
   15bae:	4947      	ldr	r1, [pc, #284]	; (15ccc <mayfly_xtal_stop_calc+0x274>)
   15bb0:	9105      	str	r1, [sp, #20]
   15bb2:	2000      	movs	r0, #0
   15bb4:	9004      	str	r0, [sp, #16]
   15bb6:	9003      	str	r0, [sp, #12]
   15bb8:	9302      	str	r3, [sp, #8]
   15bba:	9001      	str	r0, [sp, #4]
   15bbc:	9000      	str	r0, [sp, #0]
   15bbe:	2101      	movs	r1, #1
   15bc0:	f7fa fac0 	bl	10144 <ticker_update>
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
   15bc4:	2800      	cmp	r0, #0
   15bc6:	d0b6      	beq.n	15b36 <mayfly_xtal_stop_calc+0xde>
   15bc8:	2802      	cmp	r0, #2
   15bca:	d0b4      	beq.n	15b36 <mayfly_xtal_stop_calc+0xde>
   15bcc:	4040      	eors	r0, r0
   15bce:	f380 8811 	msr	BASEPRI, r0
   15bd2:	f04f 0004 	mov.w	r0, #4
   15bd6:	df02      	svc	2
					mem_get(_radio.conn_pool,
   15bd8:	3c07      	subs	r4, #7
				conn_curr =
   15bda:	b2a2      	uxth	r2, r4
   15bdc:	f44f 71aa 	mov.w	r1, #340	; 0x154
   15be0:	4b35      	ldr	r3, [pc, #212]	; (15cb8 <mayfly_xtal_stop_calc+0x260>)
   15be2:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   15be6:	f7f8 fdcd 	bl	e784 <mem_get>
   15bea:	4604      	mov	r4, r0
					conn_curr->hdr.ticks_preempt_to_start;
   15bec:	6883      	ldr	r3, [r0, #8]
					conn_curr->hdr.ticks_active_to_start :
   15bee:	6842      	ldr	r2, [r0, #4]
				ticks_prepare_to_start =
   15bf0:	429a      	cmp	r2, r3
   15bf2:	bf38      	it	cc
   15bf4:	461a      	movcc	r2, r3
				if ((conn_curr->hdr.ticks_xtal_to_start &
   15bf6:	6803      	ldr	r3, [r0, #0]
   15bf8:	2b00      	cmp	r3, #0
   15bfa:	da9f      	bge.n	15b3c <mayfly_xtal_stop_calc+0xe4>
						((conn_curr->hdr.ticks_xtal_to_start &
   15bfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						  (~((u32_t)1 << 31))) -
   15c00:	1a9b      	subs	r3, r3, r2
					ticks_to_expire +=
   15c02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15c04:	4413      	add	r3, r2
   15c06:	930a      	str	r3, [sp, #40]	; 0x28
   15c08:	e798      	b.n	15b3c <mayfly_xtal_stop_calc+0xe4>
					ticks_to_expire -= ticks_conn_interval;
   15c0a:	1a1b      	subs	r3, r3, r0
   15c0c:	930a      	str	r3, [sp, #40]	; 0x28
				while (ticks_to_expire > ticks_conn_interval) {
   15c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15c10:	4298      	cmp	r0, r3
   15c12:	d3fa      	bcc.n	15c0a <mayfly_xtal_stop_calc+0x1b2>
   15c14:	f994 101d 	ldrsb.w	r1, [r4, #29]
				if (conn_curr->role && !conn->role &&
   15c18:	2900      	cmp	r1, #0
   15c1a:	db1c      	blt.n	15c56 <mayfly_xtal_stop_calc+0x1fe>
				} else if (!conn_curr->role && conn->role &&
   15c1c:	2900      	cmp	r1, #0
   15c1e:	f6ff af6d 	blt.w	15afc <mayfly_xtal_stop_calc+0xa4>
   15c22:	f995 201d 	ldrsb.w	r2, [r5, #29]
   15c26:	2a00      	cmp	r2, #0
   15c28:	f6bf af68 	bge.w	15afc <mayfly_xtal_stop_calc+0xa4>
					     conn_curr->hdr.ticks_slot))) {
   15c2c:	68e2      	ldr	r2, [r4, #12]
								625) +
   15c2e:	323b      	adds	r2, #59	; 0x3b
				} else if (!conn_curr->role && conn->role &&
   15c30:	4293      	cmp	r3, r2
   15c32:	f4bf af63 	bcs.w	15afc <mayfly_xtal_stop_calc+0xa4>
					status = conn_update_req(conn);
   15c36:	4628      	mov	r0, r5
   15c38:	f7fb f852 	bl	10ce0 <conn_update_req>
					if ((status == 2) &&
   15c3c:	2802      	cmp	r0, #2
   15c3e:	f47f af5d 	bne.w	15afc <mayfly_xtal_stop_calc+0xa4>
   15c42:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   15c46:	f013 0f02 	tst.w	r3, #2
   15c4a:	f43f af57 	beq.w	15afc <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn_curr);
   15c4e:	4620      	mov	r0, r4
   15c50:	f7fb f846 	bl	10ce0 <conn_update_req>
   15c54:	e752      	b.n	15afc <mayfly_xtal_stop_calc+0xa4>
				if (conn_curr->role && !conn->role &&
   15c56:	f995 201d 	ldrsb.w	r2, [r5, #29]
   15c5a:	2a00      	cmp	r2, #0
   15c5c:	dbde      	blt.n	15c1c <mayfly_xtal_stop_calc+0x1c4>
				      conn_curr->hdr.ticks_slot))) {
   15c5e:	68e2      	ldr	r2, [r4, #12]
							 625) +
   15c60:	323b      	adds	r2, #59	; 0x3b
				if (conn_curr->role && !conn->role &&
   15c62:	4293      	cmp	r3, r2
   15c64:	d2da      	bcs.n	15c1c <mayfly_xtal_stop_calc+0x1c4>
					status = conn_update_req(conn_curr);
   15c66:	4620      	mov	r0, r4
   15c68:	f7fb f83a 	bl	10ce0 <conn_update_req>
					if ((status == 2) &&
   15c6c:	2802      	cmp	r0, #2
   15c6e:	f47f af45 	bne.w	15afc <mayfly_xtal_stop_calc+0xa4>
   15c72:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   15c76:	f013 0f02 	tst.w	r3, #2
   15c7a:	f43f af3f 	beq.w	15afc <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn);
   15c7e:	4628      	mov	r0, r5
   15c80:	f7fb f82e 	bl	10ce0 <conn_update_req>
   15c84:	e73a      	b.n	15afc <mayfly_xtal_stop_calc+0xa4>
				conn = mem_get(_radio.conn_pool,
   15c86:	3a07      	subs	r2, #7
   15c88:	b292      	uxth	r2, r2
   15c8a:	f44f 71aa 	mov.w	r1, #340	; 0x154
   15c8e:	4b0a      	ldr	r3, [pc, #40]	; (15cb8 <mayfly_xtal_stop_calc+0x260>)
   15c90:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   15c94:	f7f8 fd76 	bl	e784 <mem_get>
   15c98:	e72b      	b.n	15af2 <mayfly_xtal_stop_calc+0x9a>
				LL_ASSERT(0);
   15c9a:	4040      	eors	r0, r0
   15c9c:	f380 8811 	msr	BASEPRI, r0
   15ca0:	f04f 0004 	mov.w	r0, #4
   15ca4:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   15ca6:	4808      	ldr	r0, [pc, #32]	; (15cc8 <mayfly_xtal_stop_calc+0x270>)
   15ca8:	e723      	b.n	15af2 <mayfly_xtal_stop_calc+0x9a>
   15caa:	bf00      	nop
   15cac:	f3af 8000 	nop.w
   15cb0:	1afd498d 	.word	0x1afd498d
   15cb4:	00000007 	.word	0x00000007
   15cb8:	20000dec 	.word	0x20000dec
   15cbc:	00010a8d 	.word	0x00010a8d
   15cc0:	20000eb8 	.word	0x20000eb8
   15cc4:	09ce5400 	.word	0x09ce5400
   15cc8:	20000e00 	.word	0x20000e00
   15ccc:	00010ab9 	.word	0x00010ab9

00015cd0 <preempt_calc>:
{
   15cd0:	b570      	push	{r4, r5, r6, lr}
   15cd2:	4605      	mov	r5, r0
   15cd4:	460e      	mov	r6, r1
   15cd6:	4614      	mov	r4, r2
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
   15cd8:	f7fa fb4e 	bl	10378 <ticker_ticks_now_get>
	u32_t diff =
   15cdc:	4621      	mov	r1, r4
   15cde:	f7fa fb4f 	bl	10380 <ticker_ticks_diff_get>
	diff += 3;
   15ce2:	1cc4      	adds	r4, r0, #3
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
   15ce4:	2c09      	cmp	r4, #9
   15ce6:	d801      	bhi.n	15cec <preempt_calc+0x1c>
	return 0;
   15ce8:	2000      	movs	r0, #0
   15cea:	bd70      	pop	{r4, r5, r6, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
   15cec:	2100      	movs	r1, #0
   15cee:	4608      	mov	r0, r1
   15cf0:	f7fb fcbc 	bl	1166c <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
   15cf4:	4632      	mov	r2, r6
   15cf6:	2100      	movs	r1, #0
   15cf8:	4628      	mov	r0, r5
   15cfa:	f7fe fa7f 	bl	141fc <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
   15cfe:	68ab      	ldr	r3, [r5, #8]
   15d00:	441c      	add	r4, r3
		if (diff <
   15d02:	2c26      	cmp	r4, #38	; 0x26
   15d04:	d802      	bhi.n	15d0c <preempt_calc+0x3c>
			hdr->ticks_preempt_to_start = diff;
   15d06:	60ac      	str	r4, [r5, #8]
		return 1;
   15d08:	2001      	movs	r0, #1
   15d0a:	bd70      	pop	{r4, r5, r6, pc}
   15d0c:	2001      	movs	r0, #1
}
   15d0e:	bd70      	pop	{r4, r5, r6, pc}

00015d10 <event_adv>:
{
   15d10:	b538      	push	{r3, r4, r5, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   15d12:	4b3b      	ldr	r3, [pc, #236]	; (15e00 <event_adv+0xf0>)
   15d14:	7bdb      	ldrb	r3, [r3, #15]
   15d16:	2b00      	cmp	r3, #0
   15d18:	d142      	bne.n	15da0 <event_adv+0x90>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   15d1a:	4b39      	ldr	r3, [pc, #228]	; (15e00 <event_adv+0xf0>)
   15d1c:	7b1b      	ldrb	r3, [r3, #12]
   15d1e:	b2db      	uxtb	r3, r3
   15d20:	2b05      	cmp	r3, #5
   15d22:	d143      	bne.n	15dac <event_adv+0x9c>
   15d24:	4605      	mov	r5, r0
	_radio.role = ROLE_ADV;
   15d26:	4c36      	ldr	r4, [pc, #216]	; (15e00 <event_adv+0xf0>)
   15d28:	2101      	movs	r1, #1
   15d2a:	73e1      	strb	r1, [r4, #15]
	_radio.ticker_id_prepare = 0;
   15d2c:	2300      	movs	r3, #0
   15d2e:	7323      	strb	r3, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
   15d30:	2305      	movs	r3, #5
   15d32:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   15d34:	6060      	str	r0, [r4, #4]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   15d36:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   15d3a:	f000 0007 	and.w	r0, r0, #7
   15d3e:	f7fb fd5b 	bl	117f8 <adv_scan_configure>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
   15d42:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   15d46:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   15d4a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   15d4e:	f363 0243 	bfi	r2, r3, #1, #3
   15d52:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	adv_setup();
   15d56:	f7fc f841 	bl	11ddc <adv_setup>
	if (ctrl_rl_enabled()) {
   15d5a:	f003 fa43 	bl	191e4 <ctrl_rl_enabled>
   15d5e:	bb58      	cbnz	r0, 15db8 <event_adv+0xa8>
	if (_radio.advertiser.filter_policy) {
   15d60:	4b27      	ldr	r3, [pc, #156]	; (15e00 <event_adv+0xf0>)
   15d62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   15d66:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   15d6a:	d134      	bne.n	15dd6 <event_adv+0xc6>
	remainder_us = radio_tmr_start(1,
   15d6c:	4c24      	ldr	r4, [pc, #144]	; (15e00 <event_adv+0xf0>)
   15d6e:	68a2      	ldr	r2, [r4, #8]
   15d70:	f105 0109 	add.w	r1, r5, #9
   15d74:	2001      	movs	r0, #1
   15d76:	f7f8 ffeb 	bl	ed50 <radio_tmr_start>
	radio_tmr_end_capture();
   15d7a:	f7f9 f89b 	bl	eeb4 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   15d7e:	462a      	mov	r2, r5
   15d80:	2105      	movs	r1, #5
   15d82:	f104 0014 	add.w	r0, r4, #20
   15d86:	f7ff ffa3 	bl	15cd0 <preempt_calc>
   15d8a:	bb68      	cbnz	r0, 15de8 <event_adv+0xd8>
		ticker_status =
   15d8c:	2300      	movs	r3, #0
   15d8e:	4a1d      	ldr	r2, [pc, #116]	; (15e04 <event_adv+0xf4>)
   15d90:	4619      	mov	r1, r3
   15d92:	4618      	mov	r0, r3
   15d94:	f7fa faa4 	bl	102e0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15d98:	b108      	cbz	r0, 15d9e <event_adv+0x8e>
   15d9a:	2802      	cmp	r0, #2
   15d9c:	d129      	bne.n	15df2 <event_adv+0xe2>
   15d9e:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(_radio.role == ROLE_NONE);
   15da0:	4040      	eors	r0, r0
   15da2:	f380 8811 	msr	BASEPRI, r0
   15da6:	f04f 0004 	mov.w	r0, #4
   15daa:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   15dac:	4040      	eors	r0, r0
   15dae:	f380 8811 	msr	BASEPRI, r0
   15db2:	f04f 0004 	mov.w	r0, #4
   15db6:	df02      	svc	2
			ctrl_filter_get(!!(_radio.advertiser.filter_policy));
   15db8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   15dbc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
		struct ll_filter *filter =
   15dc0:	bf14      	ite	ne
   15dc2:	2001      	movne	r0, #1
   15dc4:	2000      	moveq	r0, #0
   15dc6:	f003 f80f 	bl	18de8 <ctrl_filter_get>
		radio_filter_configure(filter->enable_bitmask,
   15dca:	1c82      	adds	r2, r0, #2
   15dcc:	7841      	ldrb	r1, [r0, #1]
   15dce:	7800      	ldrb	r0, [r0, #0]
   15dd0:	f7f8 ff40 	bl	ec54 <radio_filter_configure>
   15dd4:	e7ca      	b.n	15d6c <event_adv+0x5c>
		struct ll_filter *wl = ctrl_filter_get(true);
   15dd6:	2001      	movs	r0, #1
   15dd8:	f003 f806 	bl	18de8 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   15ddc:	1c82      	adds	r2, r0, #2
   15dde:	7841      	ldrb	r1, [r0, #1]
   15de0:	7800      	ldrb	r0, [r0, #0]
   15de2:	f7f8 ff37 	bl	ec54 <radio_filter_configure>
   15de6:	e7c1      	b.n	15d6c <event_adv+0x5c>
		_radio.state = STATE_STOP;
   15de8:	2204      	movs	r2, #4
   15dea:	7422      	strb	r2, [r4, #16]
		radio_disable();
   15dec:	f7f8 fea2 	bl	eb34 <radio_disable>
   15df0:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15df2:	4040      	eors	r0, r0
   15df4:	f380 8811 	msr	BASEPRI, r0
   15df8:	f04f 0004 	mov.w	r0, #4
   15dfc:	df02      	svc	2
   15dfe:	bf00      	nop
   15e00:	20000dec 	.word	0x20000dec
   15e04:	000112b9 	.word	0x000112b9

00015e08 <event_master>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   15e08:	4a4c      	ldr	r2, [pc, #304]	; (15f3c <event_master+0x134>)
   15e0a:	7bd2      	ldrb	r2, [r2, #15]
   15e0c:	2a00      	cmp	r2, #0
   15e0e:	d174      	bne.n	15efa <event_master+0xf2>
{
   15e10:	b530      	push	{r4, r5, lr}
   15e12:	b085      	sub	sp, #20
	LL_ASSERT(_radio.ticker_id_prepare ==
   15e14:	4a49      	ldr	r2, [pc, #292]	; (15f3c <event_master+0x134>)
   15e16:	7b12      	ldrb	r2, [r2, #12]
   15e18:	b2d2      	uxtb	r2, r2
   15e1a:	8c19      	ldrh	r1, [r3, #32]
   15e1c:	1dcc      	adds	r4, r1, #7
   15e1e:	42a2      	cmp	r2, r4
   15e20:	d171      	bne.n	15f06 <event_master+0xfe>
   15e22:	461c      	mov	r4, r3
   15e24:	4605      	mov	r5, r0
	_radio.role = ROLE_MASTER;
   15e26:	4b45      	ldr	r3, [pc, #276]	; (15f3c <event_master+0x134>)
   15e28:	2204      	movs	r2, #4
   15e2a:	73da      	strb	r2, [r3, #15]
	_radio.state = STATE_TX;
   15e2c:	2002      	movs	r0, #2
   15e2e:	7418      	strb	r0, [r3, #16]
	_radio.ticker_id_prepare = 0;
   15e30:	2200      	movs	r2, #0
   15e32:	731a      	strb	r2, [r3, #12]
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   15e34:	3107      	adds	r1, #7
   15e36:	b2c9      	uxtb	r1, r1
	_radio.ticker_id_event =
   15e38:	7359      	strb	r1, [r3, #13]
	_radio.ticks_anchor = ticks_at_expire;
   15e3a:	605d      	str	r5, [r3, #4]
	_radio.packet_counter = 0;
   15e3c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	_radio.crc_expire = 0;
   15e40:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
	_radio.conn_curr = conn;
   15e44:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   15e48:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   15e4a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   15e4c:	8522      	strh	r2, [r4, #40]	; 0x28
	packet_tx_enqueue(2);
   15e4e:	f7fb fd69 	bl	11924 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
   15e52:	a903      	add	r1, sp, #12
   15e54:	4620      	mov	r0, r4
   15e56:	f7fb fed3 	bl	11c00 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
   15e5a:	9b03      	ldr	r3, [sp, #12]
   15e5c:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
   15e60:	781a      	ldrb	r2, [r3, #0]
   15e62:	f361 02c3 	bfi	r2, r1, #3, #1
   15e66:	701a      	strb	r2, [r3, #0]
	pdu_data_tx->nesn = conn->nesn;
   15e68:	9a03      	ldr	r2, [sp, #12]
   15e6a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15e6e:	f3c3 0340 	ubfx	r3, r3, #1, #1
   15e72:	7811      	ldrb	r1, [r2, #0]
   15e74:	f363 0182 	bfi	r1, r3, #2, #1
   15e78:	7011      	strb	r1, [r2, #0]
	connection_configure(conn);
   15e7a:	4620      	mov	r0, r4
   15e7c:	f7fb fce0 	bl	11840 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   15e80:	2096      	movs	r0, #150	; 0x96
   15e82:	f7f8 ff5f 	bl	ed44 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
   15e86:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   15e8a:	f000 0007 	and.w	r0, r0, #7
   15e8e:	f7f8 fea7 	bl	ebe0 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
   15e92:	9903      	ldr	r1, [sp, #12]
   15e94:	4620      	mov	r0, r4
   15e96:	f7fb ff49 	bl	11d2c <tx_packet_set>
	if (conn->data_chan_sel) {
   15e9a:	7f63      	ldrb	r3, [r4, #29]
   15e9c:	f013 0f40 	tst.w	r3, #64	; 0x40
   15ea0:	d037      	beq.n	15f12 <event_master+0x10a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   15ea2:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   15ea4:	3801      	subs	r0, #1
   15ea6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15eaa:	f104 0217 	add.w	r2, r4, #23
   15eae:	8be1      	ldrh	r1, [r4, #30]
   15eb0:	b280      	uxth	r0, r0
   15eb2:	f7fa fe8b 	bl	10bcc <chan_sel_2>
	chan_set(data_chan_use);
   15eb6:	f7fb ff65 	bl	11d84 <chan_set>
		remainder_us = radio_tmr_start(1,
   15eba:	4b20      	ldr	r3, [pc, #128]	; (15f3c <event_master+0x134>)
   15ebc:	689a      	ldr	r2, [r3, #8]
   15ebe:	f105 0109 	add.w	r1, r5, #9
   15ec2:	2001      	movs	r0, #1
   15ec4:	f7f8 ff44 	bl	ed50 <radio_tmr_start>
		radio_tmr_end_capture();
   15ec8:	f7f8 fff4 	bl	eeb4 <radio_tmr_end_capture>
				      conn->handle), ticks_at_expire)) {
   15ecc:	8c21      	ldrh	r1, [r4, #32]
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   15ece:	3107      	adds	r1, #7
   15ed0:	462a      	mov	r2, r5
   15ed2:	b2c9      	uxtb	r1, r1
   15ed4:	4620      	mov	r0, r4
   15ed6:	f7ff fefb 	bl	15cd0 <preempt_calc>
	if (0 !=
   15eda:	bb38      	cbnz	r0, 15f2c <event_master+0x124>
		ticker_status =
   15edc:	2300      	movs	r3, #0
   15ede:	4a18      	ldr	r2, [pc, #96]	; (15f40 <event_master+0x138>)
   15ee0:	4619      	mov	r1, r3
   15ee2:	4618      	mov	r0, r3
   15ee4:	f7fa f9fc 	bl	102e0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15ee8:	b328      	cbz	r0, 15f36 <event_master+0x12e>
   15eea:	2802      	cmp	r0, #2
   15eec:	d023      	beq.n	15f36 <event_master+0x12e>
   15eee:	4040      	eors	r0, r0
   15ef0:	f380 8811 	msr	BASEPRI, r0
   15ef4:	f04f 0004 	mov.w	r0, #4
   15ef8:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   15efa:	4040      	eors	r0, r0
   15efc:	f380 8811 	msr	BASEPRI, r0
   15f00:	f04f 0004 	mov.w	r0, #4
   15f04:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   15f06:	4040      	eors	r0, r0
   15f08:	f380 8811 	msr	BASEPRI, r0
   15f0c:	f04f 0004 	mov.w	r0, #4
   15f10:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   15f12:	7fa1      	ldrb	r1, [r4, #30]
   15f14:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   15f16:	7f63      	ldrb	r3, [r4, #29]
   15f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   15f1c:	9300      	str	r3, [sp, #0]
   15f1e:	f104 0317 	add.w	r3, r4, #23
   15f22:	f104 001f 	add.w	r0, r4, #31
   15f26:	f7fa fdf3 	bl	10b10 <chan_sel_1>
   15f2a:	e7c4      	b.n	15eb6 <event_master+0xae>
		_radio.state = STATE_STOP;
   15f2c:	2204      	movs	r2, #4
   15f2e:	4b03      	ldr	r3, [pc, #12]	; (15f3c <event_master+0x134>)
   15f30:	741a      	strb	r2, [r3, #16]
		radio_disable();
   15f32:	f7f8 fdff 	bl	eb34 <radio_disable>
}
   15f36:	b005      	add	sp, #20
   15f38:	bd30      	pop	{r4, r5, pc}
   15f3a:	bf00      	nop
   15f3c:	20000dec 	.word	0x20000dec
   15f40:	000112b9 	.word	0x000112b9

00015f44 <event_slave>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   15f44:	4a64      	ldr	r2, [pc, #400]	; (160d8 <event_slave+0x194>)
   15f46:	7bd2      	ldrb	r2, [r2, #15]
   15f48:	2a00      	cmp	r2, #0
   15f4a:	f040 809d 	bne.w	16088 <event_slave+0x144>
{
   15f4e:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f50:	b083      	sub	sp, #12
	LL_ASSERT(_radio.ticker_id_prepare ==
   15f52:	4a61      	ldr	r2, [pc, #388]	; (160d8 <event_slave+0x194>)
   15f54:	7b11      	ldrb	r1, [r2, #12]
   15f56:	b2c9      	uxtb	r1, r1
   15f58:	8c1a      	ldrh	r2, [r3, #32]
   15f5a:	1dd4      	adds	r4, r2, #7
   15f5c:	42a1      	cmp	r1, r4
   15f5e:	f040 8099 	bne.w	16094 <event_slave+0x150>
   15f62:	461c      	mov	r4, r3
   15f64:	4606      	mov	r6, r0
	_radio.role = ROLE_SLAVE;
   15f66:	4d5c      	ldr	r5, [pc, #368]	; (160d8 <event_slave+0x194>)
   15f68:	2303      	movs	r3, #3
   15f6a:	73eb      	strb	r3, [r5, #15]
	_radio.state = STATE_RX;
   15f6c:	2301      	movs	r3, #1
   15f6e:	742b      	strb	r3, [r5, #16]
	_radio.ticker_id_prepare = 0;
   15f70:	2700      	movs	r7, #0
   15f72:	732f      	strb	r7, [r5, #12]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   15f74:	3207      	adds	r2, #7
   15f76:	b2d2      	uxtb	r2, r2
	_radio.ticker_id_event =
   15f78:	736a      	strb	r2, [r5, #13]
	_radio.ticks_anchor = ticks_at_expire;
   15f7a:	6068      	str	r0, [r5, #4]
	_radio.packet_counter = 0;
   15f7c:	f885 7114 	strb.w	r7, [r5, #276]	; 0x114
	_radio.crc_expire = 0;
   15f80:	f885 7115 	strb.w	r7, [r5, #277]	; 0x115
	_radio.conn_curr = conn;
   15f84:	f8c5 4110 	str.w	r4, [r5, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   15f88:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   15f8a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   15f8c:	8527      	strh	r7, [r4, #40]	; 0x28
	connection_configure(conn);
   15f8e:	4620      	mov	r0, r4
   15f90:	f7fb fc56 	bl	11840 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   15f94:	2096      	movs	r0, #150	; 0x96
   15f96:	f7f8 fed5 	bl	ed44 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
   15f9a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   15f9e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   15fa2:	09d3      	lsrs	r3, r2, #7
   15fa4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   15fa8:	4639      	mov	r1, r7
   15faa:	f000 0007 	and.w	r0, r0, #7
   15fae:	f7f8 fe1f 	bl	ebf0 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   15fb2:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   15fb6:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   15fba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (struct pdu_data *)
   15fbe:	3108      	adds	r1, #8
   15fc0:	4620      	mov	r0, r4
   15fc2:	f7fb fc51 	bl	11868 <rx_packet_set>
	if (conn->data_chan_sel) {
   15fc6:	7f63      	ldrb	r3, [r4, #29]
   15fc8:	f013 0f40 	tst.w	r3, #64	; 0x40
   15fcc:	d068      	beq.n	160a0 <event_slave+0x15c>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   15fce:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   15fd0:	3801      	subs	r0, #1
   15fd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15fd6:	f104 0217 	add.w	r2, r4, #23
   15fda:	8be1      	ldrh	r1, [r4, #30]
   15fdc:	b280      	uxth	r0, r0
   15fde:	f7fa fdf5 	bl	10bcc <chan_sel_2>
	chan_set(data_chan_use);
   15fe2:	f7fb fecf 	bl	11d84 <chan_set>
		conn->slave.window_widening_prepare_us;
   15fe6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
	conn->slave.window_widening_event_us +=
   15fe8:	6e22      	ldr	r2, [r4, #96]	; 0x60
   15fea:	4413      	add	r3, r2
   15fec:	6623      	str	r3, [r4, #96]	; 0x60
	conn->slave.window_widening_prepare_us = 0;
   15fee:	2200      	movs	r2, #0
   15ff0:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
   15ff2:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (conn->slave.window_widening_event_us >
   15ff4:	4293      	cmp	r3, r2
   15ff6:	d900      	bls.n	15ffa <event_slave+0xb6>
		conn->slave.window_widening_event_us =
   15ff8:	6622      	str	r2, [r4, #96]	; 0x60
		conn->slave.window_size_prepare_us;
   15ffa:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_event_us +=
   15ffc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   15ffe:	4413      	add	r3, r2
   16000:	66a3      	str	r3, [r4, #104]	; 0x68
	conn->slave.window_size_prepare_us = 0;
   16002:	2700      	movs	r7, #0
   16004:	6667      	str	r7, [r4, #100]	; 0x64
	remainder_us =
   16006:	4b34      	ldr	r3, [pc, #208]	; (160d8 <event_slave+0x194>)
   16008:	689a      	ldr	r2, [r3, #8]
   1600a:	f106 0109 	add.w	r1, r6, #9
   1600e:	4638      	mov	r0, r7
   16010:	f7f8 fe9e 	bl	ed50 <radio_tmr_start>
   16014:	4605      	mov	r5, r0
	radio_tmr_aa_capture();
   16016:	f7f8 ff19 	bl	ee4c <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1601a:	4638      	mov	r0, r7
   1601c:	f7f8 ff38 	bl	ee90 <radio_tmr_aa_save>
	       (conn->slave.window_widening_event_us << 1) +
   16020:	6e20      	ldr	r0, [r4, #96]	; 0x60
	       (RADIO_TICKER_JITTER_US << 2) +
   16022:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	       conn->slave.window_size_event_us;
   16026:	6ea0      	ldr	r0, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
   16028:	4405      	add	r5, r0
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   1602a:	3550      	adds	r5, #80	; 0x50
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
   1602c:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16030:	f000 0007 	and.w	r0, r0, #7
   16034:	f7f8 fd6a 	bl	eb0c <radio_rx_ready_delay_get>
   16038:	4405      	add	r5, r0
	hcto += addr_us_get(conn->phy_rx);
   1603a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   1603e:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   16042:	2802      	cmp	r0, #2
   16044:	d03c      	beq.n	160c0 <event_slave+0x17c>
   16046:	2804      	cmp	r0, #4
   16048:	d037      	beq.n	160ba <event_slave+0x176>
		return 40;
   1604a:	2328      	movs	r3, #40	; 0x28
	hcto += addr_us_get(conn->phy_rx);
   1604c:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   1604e:	2101      	movs	r1, #1
   16050:	f7f8 fd5e 	bl	eb10 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   16054:	4428      	add	r0, r5
   16056:	f7f8 fed7 	bl	ee08 <radio_tmr_hcto_configure>
				      conn->handle), ticks_at_expire) != 0) {
   1605a:	8c21      	ldrh	r1, [r4, #32]
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   1605c:	3107      	adds	r1, #7
   1605e:	4632      	mov	r2, r6
   16060:	b2c9      	uxtb	r1, r1
   16062:	4620      	mov	r0, r4
   16064:	f7ff fe34 	bl	15cd0 <preempt_calc>
   16068:	bb60      	cbnz	r0, 160c4 <event_slave+0x180>
		ticker_status =
   1606a:	2300      	movs	r3, #0
   1606c:	4a1b      	ldr	r2, [pc, #108]	; (160dc <event_slave+0x198>)
   1606e:	4619      	mov	r1, r3
   16070:	4618      	mov	r0, r3
   16072:	f7fa f935 	bl	102e0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16076:	b350      	cbz	r0, 160ce <event_slave+0x18a>
   16078:	2802      	cmp	r0, #2
   1607a:	d028      	beq.n	160ce <event_slave+0x18a>
   1607c:	4040      	eors	r0, r0
   1607e:	f380 8811 	msr	BASEPRI, r0
   16082:	f04f 0004 	mov.w	r0, #4
   16086:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   16088:	4040      	eors	r0, r0
   1608a:	f380 8811 	msr	BASEPRI, r0
   1608e:	f04f 0004 	mov.w	r0, #4
   16092:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   16094:	4040      	eors	r0, r0
   16096:	f380 8811 	msr	BASEPRI, r0
   1609a:	f04f 0004 	mov.w	r0, #4
   1609e:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   160a0:	7fa1      	ldrb	r1, [r4, #30]
   160a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   160a4:	7f63      	ldrb	r3, [r4, #29]
   160a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   160aa:	9300      	str	r3, [sp, #0]
   160ac:	f104 0317 	add.w	r3, r4, #23
   160b0:	f104 001f 	add.w	r0, r4, #31
   160b4:	f7fa fd2c 	bl	10b10 <chan_sel_1>
   160b8:	e793      	b.n	15fe2 <event_slave+0x9e>
		return 376;
   160ba:	f44f 73bc 	mov.w	r3, #376	; 0x178
   160be:	e7c5      	b.n	1604c <event_slave+0x108>
		return 24;
   160c0:	2318      	movs	r3, #24
   160c2:	e7c3      	b.n	1604c <event_slave+0x108>
		_radio.state = STATE_STOP;
   160c4:	2204      	movs	r2, #4
   160c6:	4b04      	ldr	r3, [pc, #16]	; (160d8 <event_slave+0x194>)
   160c8:	741a      	strb	r2, [r3, #16]
		radio_disable();
   160ca:	f7f8 fd33 	bl	eb34 <radio_disable>
	packet_tx_enqueue(2);
   160ce:	2002      	movs	r0, #2
   160d0:	f7fb fc28 	bl	11924 <packet_tx_enqueue>
}
   160d4:	b003      	add	sp, #12
   160d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   160d8:	20000dec 	.word	0x20000dec
   160dc:	000112b9 	.word	0x000112b9

000160e0 <event_scan>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   160e0:	4b67      	ldr	r3, [pc, #412]	; (16280 <event_scan+0x1a0>)
   160e2:	7bdb      	ldrb	r3, [r3, #15]
   160e4:	2b00      	cmp	r3, #0
   160e6:	f040 808b 	bne.w	16200 <event_scan+0x120>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   160ea:	4b65      	ldr	r3, [pc, #404]	; (16280 <event_scan+0x1a0>)
   160ec:	7b1b      	ldrb	r3, [r3, #12]
   160ee:	b2db      	uxtb	r3, r3
   160f0:	2b06      	cmp	r3, #6
   160f2:	f040 808b 	bne.w	1620c <event_scan+0x12c>
{
   160f6:	b570      	push	{r4, r5, r6, lr}
   160f8:	b08c      	sub	sp, #48	; 0x30
   160fa:	4605      	mov	r5, r0
	_radio.role = ROLE_SCAN;
   160fc:	4c60      	ldr	r4, [pc, #384]	; (16280 <event_scan+0x1a0>)
   160fe:	2302      	movs	r3, #2
   16100:	73e3      	strb	r3, [r4, #15]
	_radio.state = STATE_RX;
   16102:	2101      	movs	r1, #1
   16104:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_prepare = 0;
   16106:	2200      	movs	r2, #0
   16108:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
   1610a:	2306      	movs	r3, #6
   1610c:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   1610e:	6060      	str	r0, [r4, #4]
	_radio.scanner.state = 0;
   16110:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16114:	f362 0341 	bfi	r3, r2, #1, #1
   16118:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   1611c:	f894 00dd 	ldrb.w	r0, [r4, #221]	; 0xdd
   16120:	f000 0007 	and.w	r0, r0, #7
   16124:	f7fb fb68 	bl	117f8 <adv_scan_configure>
	chan_set(37 + _radio.scanner.chan++);
   16128:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1612c:	f3c3 0081 	ubfx	r0, r3, #2, #2
   16130:	1c42      	adds	r2, r0, #1
   16132:	f362 0383 	bfi	r3, r2, #2, #2
   16136:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
   1613a:	3025      	adds	r0, #37	; 0x25
   1613c:	f7fb fe22 	bl	11d84 <chan_set>
	if (_radio.scanner.chan == 3) {
   16140:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16144:	f003 030c 	and.w	r3, r3, #12
   16148:	2b0c      	cmp	r3, #12
   1614a:	d065      	beq.n	16218 <event_scan+0x138>
	radio_tmr_tifs_set(RADIO_TIFS);
   1614c:	2096      	movs	r0, #150	; 0x96
   1614e:	f7f8 fdf9 	bl	ed44 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   16152:	2300      	movs	r3, #0
   16154:	461a      	mov	r2, r3
   16156:	4619      	mov	r1, r3
   16158:	4618      	mov	r0, r3
   1615a:	f7f8 fd49 	bl	ebf0 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   1615e:	4b48      	ldr	r3, [pc, #288]	; (16280 <event_scan+0x1a0>)
   16160:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16164:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16168:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   1616c:	3008      	adds	r0, #8
   1616e:	f7f8 fcbd 	bl	eaec <radio_pkt_rx_set>
	radio_rssi_measure();
   16172:	f7f8 fd4d 	bl	ec10 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
   16176:	f003 f835 	bl	191e4 <ctrl_rl_enabled>
   1617a:	2800      	cmp	r0, #0
   1617c:	d153      	bne.n	16226 <event_scan+0x146>
	if (_radio.scanner.filter_policy) {
   1617e:	4b40      	ldr	r3, [pc, #256]	; (16280 <event_scan+0x1a0>)
   16180:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   16184:	f013 0f30 	tst.w	r3, #48	; 0x30
   16188:	d165      	bne.n	16256 <event_scan+0x176>
	remainder_us = radio_tmr_start(0,
   1618a:	4c3d      	ldr	r4, [pc, #244]	; (16280 <event_scan+0x1a0>)
   1618c:	68a2      	ldr	r2, [r4, #8]
   1618e:	f105 0109 	add.w	r1, r5, #9
   16192:	2000      	movs	r0, #0
   16194:	f7f8 fddc 	bl	ed50 <radio_tmr_start>
	radio_tmr_end_capture();
   16198:	f7f8 fe8c 	bl	eeb4 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
   1619c:	462a      	mov	r2, r5
   1619e:	2106      	movs	r1, #6
   161a0:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   161a4:	f7ff fd94 	bl	15cd0 <preempt_calc>
   161a8:	2800      	cmp	r0, #0
   161aa:	d15d      	bne.n	16268 <event_scan+0x188>
				     _radio.scanner.ticks_window +
   161ac:	4b34      	ldr	r3, [pc, #208]	; (16280 <event_scan+0x1a0>)
   161ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   161b2:	3309      	adds	r3, #9
		ticker_status =
   161b4:	f641 0287 	movw	r2, #6279	; 0x1887
   161b8:	9208      	str	r2, [sp, #32]
   161ba:	4a32      	ldr	r2, [pc, #200]	; (16284 <event_scan+0x1a4>)
   161bc:	9207      	str	r2, [sp, #28]
   161be:	2204      	movs	r2, #4
   161c0:	9206      	str	r2, [sp, #24]
   161c2:	4931      	ldr	r1, [pc, #196]	; (16288 <event_scan+0x1a8>)
   161c4:	9105      	str	r1, [sp, #20]
   161c6:	2000      	movs	r0, #0
   161c8:	9004      	str	r0, [sp, #16]
   161ca:	9003      	str	r0, [sp, #12]
   161cc:	9002      	str	r0, [sp, #8]
   161ce:	9001      	str	r0, [sp, #4]
   161d0:	9300      	str	r3, [sp, #0]
   161d2:	462b      	mov	r3, r5
   161d4:	4601      	mov	r1, r0
   161d6:	f7f9 ff67 	bl	100a8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   161da:	b108      	cbz	r0, 161e0 <event_scan+0x100>
   161dc:	2802      	cmp	r0, #2
   161de:	d149      	bne.n	16274 <event_scan+0x194>
			ticker_status =
   161e0:	2300      	movs	r3, #0
   161e2:	4a2a      	ldr	r2, [pc, #168]	; (1628c <event_scan+0x1ac>)
   161e4:	4619      	mov	r1, r3
   161e6:	4618      	mov	r0, r3
   161e8:	f7fa f87a 	bl	102e0 <ticker_job_idle_get>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   161ec:	2800      	cmp	r0, #0
   161ee:	d03f      	beq.n	16270 <event_scan+0x190>
   161f0:	2802      	cmp	r0, #2
   161f2:	d03d      	beq.n	16270 <event_scan+0x190>
   161f4:	4040      	eors	r0, r0
   161f6:	f380 8811 	msr	BASEPRI, r0
   161fa:	f04f 0004 	mov.w	r0, #4
   161fe:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   16200:	4040      	eors	r0, r0
   16202:	f380 8811 	msr	BASEPRI, r0
   16206:	f04f 0004 	mov.w	r0, #4
   1620a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   1620c:	4040      	eors	r0, r0
   1620e:	f380 8811 	msr	BASEPRI, r0
   16212:	f04f 0004 	mov.w	r0, #4
   16216:	df02      	svc	2
		_radio.scanner.chan = 0;
   16218:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1621c:	f36f 0283 	bfc	r2, #2, #2
   16220:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
   16224:	e792      	b.n	1614c <event_scan+0x6c>
			ctrl_filter_get(!!(_radio.scanner.filter_policy & 0x1));
   16226:	4b16      	ldr	r3, [pc, #88]	; (16280 <event_scan+0x1a0>)
   16228:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		struct ll_filter *filter =
   1622c:	f3c0 1000 	ubfx	r0, r0, #4, #1
   16230:	f002 fdda 	bl	18de8 <ctrl_filter_get>
   16234:	4604      	mov	r4, r0
		u8_t count, *irks = ctrl_irks_get(&count);
   16236:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   1623a:	f002 fd4f 	bl	18cdc <ctrl_irks_get>
   1623e:	4606      	mov	r6, r0
		radio_filter_configure(filter->enable_bitmask,
   16240:	1ca2      	adds	r2, r4, #2
   16242:	7861      	ldrb	r1, [r4, #1]
   16244:	7820      	ldrb	r0, [r4, #0]
   16246:	f7f8 fd05 	bl	ec54 <radio_filter_configure>
		radio_ar_configure(count, irks);
   1624a:	4631      	mov	r1, r6
   1624c:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   16250:	f7f8 fedc 	bl	f00c <radio_ar_configure>
   16254:	e799      	b.n	1618a <event_scan+0xaa>
		struct ll_filter *wl = ctrl_filter_get(true);
   16256:	2001      	movs	r0, #1
   16258:	f002 fdc6 	bl	18de8 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   1625c:	1c82      	adds	r2, r0, #2
   1625e:	7841      	ldrb	r1, [r0, #1]
   16260:	7800      	ldrb	r0, [r0, #0]
   16262:	f7f8 fcf7 	bl	ec54 <radio_filter_configure>
   16266:	e790      	b.n	1618a <event_scan+0xaa>
		_radio.state = STATE_STOP;
   16268:	2204      	movs	r2, #4
   1626a:	7422      	strb	r2, [r4, #16]
		radio_disable();
   1626c:	f7f8 fc62 	bl	eb34 <radio_disable>
}
   16270:	b00c      	add	sp, #48	; 0x30
   16272:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16274:	4040      	eors	r0, r0
   16276:	f380 8811 	msr	BASEPRI, r0
   1627a:	f04f 0004 	mov.w	r0, #4
   1627e:	df02      	svc	2
   16280:	20000dec 	.word	0x20000dec
   16284:	00010dfd 	.word	0x00010dfd
   16288:	000115e1 	.word	0x000115e1
   1628c:	000112b9 	.word	0x000112b9

00016290 <access_addr_get>:
{
   16290:	b5f0      	push	{r4, r5, r6, r7, lr}
   16292:	b083      	sub	sp, #12
	retry = 3;
   16294:	2403      	movs	r4, #3
   16296:	e059      	b.n	1634c <access_addr_get+0xbc>
	LL_ASSERT(retry);
   16298:	4040      	eors	r0, r0
   1629a:	f380 8811 	msr	BASEPRI, r0
   1629e:	f04f 0004 	mov.w	r0, #4
   162a2:	df02      	svc	2
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   162a4:	9900      	ldr	r1, [sp, #0]
   162a6:	0fc9      	lsrs	r1, r1, #31
	transitions = 0;
   162a8:	4607      	mov	r7, r0
	bit_idx = 31;
   162aa:	221f      	movs	r2, #31
	consecutive_cnt = 1;
   162ac:	2501      	movs	r5, #1
	while (bit_idx--) {
   162ae:	e010      	b.n	162d2 <access_addr_get+0x42>
			consecutive_cnt++;
   162b0:	3501      	adds	r5, #1
   162b2:	b2ed      	uxtb	r5, r5
   162b4:	e01c      	b.n	162f0 <access_addr_get+0x60>
		    ((bit_idx < 28) && (transitions < 1)) ||
   162b6:	b9ff      	cbnz	r7, 162f8 <access_addr_get+0x68>
			if (consecutive_bit) {
   162b8:	b319      	cbz	r1, 16302 <access_addr_get+0x72>
				access_addr &= ~BIT(bit_idx);
   162ba:	2201      	movs	r2, #1
   162bc:	409a      	lsls	r2, r3
   162be:	ea26 0602 	bic.w	r6, r6, r2
   162c2:	9600      	str	r6, [sp, #0]
				consecutive_bit = 0;
   162c4:	4601      	mov	r1, r0
			transitions++;
   162c6:	3701      	adds	r7, #1
   162c8:	b2ff      	uxtb	r7, r7
			consecutive_cnt = 1;
   162ca:	2501      	movs	r5, #1
	while (bit_idx--) {
   162cc:	461a      	mov	r2, r3
		if (transitions > 24) {
   162ce:	2f18      	cmp	r7, #24
   162d0:	d81d      	bhi.n	1630e <access_addr_get+0x7e>
	while (bit_idx--) {
   162d2:	1e53      	subs	r3, r2, #1
   162d4:	b2db      	uxtb	r3, r3
   162d6:	b32a      	cbz	r2, 16324 <access_addr_get+0x94>
		bit = (access_addr >> bit_idx) & 0x01;
   162d8:	9e00      	ldr	r6, [sp, #0]
   162da:	469e      	mov	lr, r3
   162dc:	fa26 f203 	lsr.w	r2, r6, r3
   162e0:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   162e4:	4291      	cmp	r1, r2
   162e6:	d0e3      	beq.n	162b0 <access_addr_get+0x20>
			transitions++;
   162e8:	3701      	adds	r7, #1
   162ea:	b2ff      	uxtb	r7, r7
			consecutive_bit = bit;
   162ec:	4611      	mov	r1, r2
			consecutive_cnt = 1;
   162ee:	2501      	movs	r5, #1
		if ((consecutive_cnt > 6) ||
   162f0:	2d06      	cmp	r5, #6
   162f2:	d8e1      	bhi.n	162b8 <access_addr_get+0x28>
   162f4:	2b1b      	cmp	r3, #27
   162f6:	d9de      	bls.n	162b6 <access_addr_get+0x26>
		    ((bit_idx < 28) && (transitions < 1)) ||
   162f8:	2b1a      	cmp	r3, #26
   162fa:	d8e7      	bhi.n	162cc <access_addr_get+0x3c>
		    ((bit_idx < 27) && (transitions < 2))) {
   162fc:	2f01      	cmp	r7, #1
   162fe:	d8e5      	bhi.n	162cc <access_addr_get+0x3c>
   16300:	e7da      	b.n	162b8 <access_addr_get+0x28>
				access_addr |= BIT(bit_idx);
   16302:	2101      	movs	r1, #1
   16304:	fa01 f203 	lsl.w	r2, r1, r3
   16308:	4316      	orrs	r6, r2
   1630a:	9600      	str	r6, [sp, #0]
   1630c:	e7db      	b.n	162c6 <access_addr_get+0x36>
			if (consecutive_bit) {
   1630e:	2900      	cmp	r1, #0
   16310:	d02d      	beq.n	1636e <access_addr_get+0xde>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   16312:	f10e 0e01 	add.w	lr, lr, #1
   16316:	2301      	movs	r3, #1
   16318:	fa03 f30e 	lsl.w	r3, r3, lr
   1631c:	425b      	negs	r3, r3
   1631e:	9a00      	ldr	r2, [sp, #0]
   16320:	4013      	ands	r3, r2
   16322:	9300      	str	r3, [sp, #0]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   16324:	4b19      	ldr	r3, [pc, #100]	; (1638c <access_addr_get+0xfc>)
   16326:	9a00      	ldr	r2, [sp, #0]
   16328:	4053      	eors	r3, r2
   1632a:	a802      	add	r0, sp, #8
   1632c:	f840 3d04 	str.w	r3, [r0, #-4]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   16330:	2104      	movs	r1, #4
   16332:	f7f8 fa6e 	bl	e812 <util_ones_count_get>
   16336:	2801      	cmp	r0, #1
   16338:	d908      	bls.n	1634c <access_addr_get+0xbc>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   1633a:	9800      	ldr	r0, [sp, #0]
   1633c:	b283      	uxth	r3, r0
   1633e:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   16342:	d120      	bne.n	16386 <access_addr_get+0xf6>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   16344:	b2c3      	uxtb	r3, r0
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   16346:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   1634a:	d11c      	bne.n	16386 <access_addr_get+0xf6>
	LL_ASSERT(retry);
   1634c:	2c00      	cmp	r4, #0
   1634e:	d0a3      	beq.n	16298 <access_addr_get+0x8>
	retry--;
   16350:	3c01      	subs	r4, #1
   16352:	b2e4      	uxtb	r4, r4
	len = sizeof(u32_t);
   16354:	2004      	movs	r0, #4
	while (len) {
   16356:	2800      	cmp	r0, #0
   16358:	d0a4      	beq.n	162a4 <access_addr_get+0x14>
		len = rand_get(len, (u8_t *)&access_addr);
   1635a:	4669      	mov	r1, sp
   1635c:	f7f9 fc1c 	bl	fb98 <rand_get>
   16360:	b2c0      	uxtb	r0, r0
		if (len) {
   16362:	2800      	cmp	r0, #0
   16364:	d0f7      	beq.n	16356 <access_addr_get+0xc6>
   16366:	bf20      	wfe
  __ASM volatile ("sev");
   16368:	bf40      	sev
  __ASM volatile ("wfe");
   1636a:	bf20      	wfe
   1636c:	e7f3      	b.n	16356 <access_addr_get+0xc6>
				access_addr |= (BIT(bit_idx + 1) - 1);
   1636e:	f10e 0e01 	add.w	lr, lr, #1
   16372:	2301      	movs	r3, #1
   16374:	fa03 fe0e 	lsl.w	lr, r3, lr
   16378:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   1637c:	9b00      	ldr	r3, [sp, #0]
   1637e:	ea43 030e 	orr.w	r3, r3, lr
   16382:	9300      	str	r3, [sp, #0]
   16384:	e7ce      	b.n	16324 <access_addr_get+0x94>
}
   16386:	b003      	add	sp, #12
   16388:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1638a:	bf00      	nop
   1638c:	8e89bed6 	.word	0x8e89bed6

00016390 <isr_rx_scan>:
{
   16390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16394:	b08f      	sub	sp, #60	; 0x3c
   16396:	4617      	mov	r7, r2
   16398:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
   1639c:	f89d 6064 	ldrb.w	r6, [sp, #100]	; 0x64
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   163a0:	4b99      	ldr	r3, [pc, #612]	; (16608 <isr_rx_scan+0x278>)
   163a2:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   163a6:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
   163aa:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
	pdu_adv_rx = (struct pdu_adv *)
   163ae:	f104 0808 	add.w	r8, r4, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   163b2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   163b6:	b15b      	cbz	r3, 163d0 <isr_rx_scan+0x40>
   163b8:	4b93      	ldr	r3, [pc, #588]	; (16608 <isr_rx_scan+0x278>)
   163ba:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   163be:	b34b      	cbz	r3, 16414 <isr_rx_scan+0x84>
				      (_radio.fc_req == _radio.fc_ack)) &&
   163c0:	4a91      	ldr	r2, [pc, #580]	; (16608 <isr_rx_scan+0x278>)
   163c2:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   163c6:	b2db      	uxtb	r3, r3
   163c8:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   163cc:	4293      	cmp	r3, r2
   163ce:	d021      	beq.n	16414 <isr_rx_scan+0x84>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   163d0:	7a23      	ldrb	r3, [r4, #8]
   163d2:	f013 030f 	ands.w	r3, r3, #15
   163d6:	f000 82e9 	beq.w	169ac <isr_rx_scan+0x61c>
   163da:	2b06      	cmp	r3, #6
   163dc:	f000 82e6 	beq.w	169ac <isr_rx_scan+0x61c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   163e0:	2b00      	cmp	r3, #0
   163e2:	f000 83d9 	beq.w	16b98 <isr_rx_scan+0x808>
   163e6:	2b01      	cmp	r3, #1
   163e8:	f000 8355 	beq.w	16a96 <isr_rx_scan+0x706>
	bool dir_report = false;
   163ec:	f04f 0900 	mov.w	r9, #0
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   163f0:	7a23      	ldrb	r3, [r4, #8]
   163f2:	f003 030f 	and.w	r3, r3, #15
					&dir_report))) ||
   163f6:	2b02      	cmp	r3, #2
   163f8:	f000 83d0 	beq.w	16b9c <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   163fc:	2b06      	cmp	r3, #6
   163fe:	f000 83cd 	beq.w	16b9c <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   16402:	2b07      	cmp	r3, #7
   16404:	f000 839f 	beq.w	16b46 <isr_rx_scan+0x7b6>
		   (_radio.scanner.phy)) ||
   16408:	2b04      	cmp	r3, #4
   1640a:	f000 83a3 	beq.w	16b54 <isr_rx_scan+0x7c4>
		return 1;
   1640e:	f04f 0a01 	mov.w	sl, #1
   16412:	e3cb      	b.n	16bac <isr_rx_scan+0x81c>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   16414:	4b7c      	ldr	r3, [pc, #496]	; (16608 <isr_rx_scan+0x278>)
   16416:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   1641a:	f013 0f10 	tst.w	r3, #16
   1641e:	d072      	beq.n	16506 <isr_rx_scan+0x176>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   16420:	7a23      	ldrb	r3, [r4, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   16422:	f013 030f 	ands.w	r3, r3, #15
   16426:	f000 80da 	beq.w	165de <isr_rx_scan+0x24e>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   1642a:	2b01      	cmp	r3, #1
   1642c:	f000 808f 	beq.w	1654e <isr_rx_scan+0x1be>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   16430:	2300      	movs	r3, #0
				      (_radio.fc_req == _radio.fc_ack)) &&
   16432:	2b00      	cmp	r3, #0
   16434:	d0cc      	beq.n	163d0 <isr_rx_scan+0x40>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   16436:	f7f8 fd4f 	bl	eed8 <radio_tmr_end_get>
   1643a:	f200 2916 	addw	r9, r0, #534	; 0x216
	     (TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   1643e:	4b72      	ldr	r3, [pc, #456]	; (16608 <isr_rx_scan+0x278>)
   16440:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   16444:	4871      	ldr	r0, [pc, #452]	; (1660c <isr_rx_scan+0x27c>)
   16446:	fba3 0100 	umull	r0, r1, r3, r0
   1644a:	2207      	movs	r2, #7
   1644c:	fb02 1103 	mla	r1, r2, r3, r1
   16450:	a36b      	add	r3, pc, #428	; (adr r3, 16600 <isr_rx_scan+0x270>)
   16452:	e9d3 2300 	ldrd	r2, r3, [r3]
   16456:	f7ea fe51 	bl	10fc <__aeabi_uldivmod>
   1645a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   1645e:	4581      	cmp	r9, r0
   16460:	d2b6      	bcs.n	163d0 <isr_rx_scan+0x40>
	if (_radio.packet_rx_acquire >=
   16462:	4b69      	ldr	r3, [pc, #420]	; (16608 <isr_rx_scan+0x278>)
   16464:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16468:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1646c:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1646e:	429a      	cmp	r2, r3
   16470:	f0c0 80b7 	bcc.w	165e2 <isr_rx_scan+0x252>
			_radio.packet_rx_last);
   16474:	4b64      	ldr	r3, [pc, #400]	; (16608 <isr_rx_scan+0x278>)
   16476:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1647a:	1ad3      	subs	r3, r2, r3
   1647c:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1647e:	2b03      	cmp	r3, #3
   16480:	f240 80b9 	bls.w	165f6 <isr_rx_scan+0x266>
	return _radio.packet_rx[_radio.packet_rx_last];
   16484:	4b60      	ldr	r3, [pc, #384]	; (16608 <isr_rx_scan+0x278>)
   16486:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1648a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1648e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   16492:	f1b9 0f00 	cmp.w	r9, #0
   16496:	f000 839a 	beq.w	16bce <isr_rx_scan+0x83e>
		_radio.state = STATE_STOP;
   1649a:	f8df a16c 	ldr.w	sl, [pc, #364]	; 16608 <isr_rx_scan+0x278>
   1649e:	2304      	movs	r3, #4
   164a0:	f88a 3010 	strb.w	r3, [sl, #16]
		conn = _radio.scanner.conn;
   164a4:	f8da 80fc 	ldr.w	r8, [sl, #252]	; 0xfc
		_radio.scanner.conn = NULL;
   164a8:	2300      	movs	r3, #0
   164aa:	f8ca 30fc 	str.w	r3, [sl, #252]	; 0xfc
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   164ae:	f7f8 fb93 	bl	ebd8 <radio_pkt_scratch_get>
   164b2:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   164b4:	7803      	ldrb	r3, [r0, #0]
   164b6:	2205      	movs	r2, #5
   164b8:	f362 0303 	bfi	r3, r2, #0, #4
			pdu_adv_tx->chan_sel = 1;
   164bc:	b2db      	uxtb	r3, r3
   164be:	f043 0320 	orr.w	r3, r3, #32
   164c2:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   164c4:	7a23      	ldrb	r3, [r4, #8]
   164c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   164ca:	7802      	ldrb	r2, [r0, #0]
   164cc:	f363 12c7 	bfi	r2, r3, #7, #1
   164d0:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
   164d2:	2322      	movs	r3, #34	; 0x22
   164d4:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   164d6:	4628      	mov	r0, r5
   164d8:	f002 fbde 	bl	18c98 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   164dc:	f89a 30de 	ldrb.w	r3, [sl, #222]	; 0xde
   164e0:	f013 0f01 	tst.w	r3, #1
   164e4:	f000 8098 	beq.w	16618 <isr_rx_scan+0x288>
   164e8:	2800      	cmp	r0, #0
   164ea:	f000 8095 	beq.w	16618 <isr_rx_scan+0x288>
			pdu_adv_tx->tx_addr = 1;
   164ee:	7832      	ldrb	r2, [r6, #0]
   164f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   164f4:	4633      	mov	r3, r6
   164f6:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   164fa:	2206      	movs	r2, #6
   164fc:	4601      	mov	r1, r0
   164fe:	4618      	mov	r0, r3
   16500:	f7e9 fede 	bl	2c0 <memcpy>
   16504:	e096      	b.n	16634 <isr_rx_scan+0x2a4>
	if (rl_idx != FILTER_IDX_NONE) {
   16506:	2dff      	cmp	r5, #255	; 0xff
   16508:	d00a      	beq.n	16520 <isr_rx_scan+0x190>
		return (rl_idx == _radio.scanner.rl_idx);
   1650a:	4b3f      	ldr	r3, [pc, #252]	; (16608 <isr_rx_scan+0x278>)
   1650c:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
   16510:	429d      	cmp	r5, r3
   16512:	bf14      	ite	ne
   16514:	2300      	movne	r3, #0
   16516:	2301      	moveq	r3, #1
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   16518:	2b00      	cmp	r3, #0
   1651a:	d181      	bne.n	16420 <isr_rx_scan+0x90>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   1651c:	2300      	movs	r3, #0
   1651e:	e788      	b.n	16432 <isr_rx_scan+0xa2>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   16520:	4b39      	ldr	r3, [pc, #228]	; (16608 <isr_rx_scan+0x278>)
   16522:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   16526:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1652a:	7a23      	ldrb	r3, [r4, #8]
   1652c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16530:	429a      	cmp	r2, r3
   16532:	d001      	beq.n	16538 <isr_rx_scan+0x1a8>
   16534:	2300      	movs	r3, #0
   16536:	e7ef      	b.n	16518 <isr_rx_scan+0x188>
		(memcmp(&_radio.scanner.adv_addr[0],
   16538:	2206      	movs	r2, #6
   1653a:	f108 0102 	add.w	r1, r8, #2
   1653e:	4834      	ldr	r0, [pc, #208]	; (16610 <isr_rx_scan+0x280>)
   16540:	f013 f836 	bl	295b0 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   16544:	b908      	cbnz	r0, 1654a <isr_rx_scan+0x1ba>
   16546:	2301      	movs	r3, #1
   16548:	e7e6      	b.n	16518 <isr_rx_scan+0x188>
   1654a:	2300      	movs	r3, #0
   1654c:	e7e4      	b.n	16518 <isr_rx_scan+0x188>
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   1654e:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   16550:	f108 0a08 	add.w	sl, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   16554:	462a      	mov	r2, r5
   16556:	4651      	mov	r1, sl
   16558:	09c0      	lsrs	r0, r0, #7
   1655a:	f002 fe17 	bl	1918c <ctrl_rl_addr_resolve>
   1655e:	4681      	mov	r9, r0
   16560:	b9d0      	cbnz	r0, 16598 <isr_rx_scan+0x208>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   16562:	4b29      	ldr	r3, [pc, #164]	; (16608 <isr_rx_scan+0x278>)
   16564:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   16568:	f013 0f01 	tst.w	r3, #1
   1656c:	d119      	bne.n	165a2 <isr_rx_scan+0x212>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   1656e:	4b26      	ldr	r3, [pc, #152]	; (16608 <isr_rx_scan+0x278>)
   16570:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   16574:	7a23      	ldrb	r3, [r4, #8]
   16576:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   16578:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1657c:	d017      	beq.n	165ae <isr_rx_scan+0x21e>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   1657e:	4b22      	ldr	r3, [pc, #136]	; (16608 <isr_rx_scan+0x278>)
   16580:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   16584:	f013 0f20 	tst.w	r3, #32
   16588:	d003      	beq.n	16592 <isr_rx_scan+0x202>
   1658a:	f994 3008 	ldrsb.w	r3, [r4, #8]
   1658e:	2b00      	cmp	r3, #0
   16590:	db17      	blt.n	165c2 <isr_rx_scan+0x232>
			BDADDR_SIZE) == 0))) ||
   16592:	f1b9 0f00 	cmp.w	r9, #0
   16596:	d11d      	bne.n	165d4 <isr_rx_scan+0x244>
		((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16598:	f1b9 0f00 	cmp.w	r9, #0
   1659c:	d01d      	beq.n	165da <isr_rx_scan+0x24a>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   1659e:	2301      	movs	r3, #1
   165a0:	e747      	b.n	16432 <isr_rx_scan+0xa2>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   165a2:	4628      	mov	r0, r5
   165a4:	f002 fb78 	bl	18c98 <ctrl_lrpa_get>
   165a8:	2800      	cmp	r0, #0
   165aa:	d1f5      	bne.n	16598 <isr_rx_scan+0x208>
   165ac:	e7df      	b.n	1656e <isr_rx_scan+0x1de>
		(memcmp(&_radio.scanner.init_addr[0],
   165ae:	2206      	movs	r2, #6
   165b0:	4651      	mov	r1, sl
   165b2:	4818      	ldr	r0, [pc, #96]	; (16614 <isr_rx_scan+0x284>)
   165b4:	f012 fffc 	bl	295b0 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   165b8:	2800      	cmp	r0, #0
   165ba:	d1e0      	bne.n	1657e <isr_rx_scan+0x1ee>
			BDADDR_SIZE) == 0))) ||
   165bc:	f04f 0901 	mov.w	r9, #1
   165c0:	e7ea      	b.n	16598 <isr_rx_scan+0x208>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   165c2:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   165c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   165ca:	2b40      	cmp	r3, #64	; 0x40
   165cc:	d1e1      	bne.n	16592 <isr_rx_scan+0x202>
		return true;
   165ce:	f04f 0901 	mov.w	r9, #1
   165d2:	e7de      	b.n	16592 <isr_rx_scan+0x202>
			BDADDR_SIZE) == 0))) ||
   165d4:	f04f 0901 	mov.w	r9, #1
   165d8:	e7de      	b.n	16598 <isr_rx_scan+0x208>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   165da:	2300      	movs	r3, #0
   165dc:	e729      	b.n	16432 <isr_rx_scan+0xa2>
   165de:	2301      	movs	r3, #1
   165e0:	e727      	b.n	16432 <isr_rx_scan+0xa2>
		return (_radio.packet_rx_count -
   165e2:	4909      	ldr	r1, [pc, #36]	; (16608 <isr_rx_scan+0x278>)
   165e4:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   165e8:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   165ec:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   165ee:	fa52 f383 	uxtab	r3, r2, r3
   165f2:	b2db      	uxtb	r3, r3
   165f4:	e743      	b.n	1647e <isr_rx_scan+0xee>
		return 0;
   165f6:	f04f 0900 	mov.w	r9, #0
   165fa:	e74a      	b.n	16492 <isr_rx_scan+0x102>
   165fc:	f3af 8000 	nop.w
   16600:	3b9aca00 	.word	0x3b9aca00
   16604:	00000000 	.word	0x00000000
   16608:	20000dec 	.word	0x20000dec
   1660c:	1afd498d 	.word	0x1afd498d
   16610:	20000ed2 	.word	0x20000ed2
   16614:	20000ecc 	.word	0x20000ecc
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   16618:	4962      	ldr	r1, [pc, #392]	; (167a4 <isr_rx_scan+0x414>)
   1661a:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   1661e:	09db      	lsrs	r3, r3, #7
   16620:	7832      	ldrb	r2, [r6, #0]
   16622:	f363 1286 	bfi	r2, r3, #6, #1
   16626:	4630      	mov	r0, r6
   16628:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   1662c:	2206      	movs	r2, #6
   1662e:	31e0      	adds	r1, #224	; 0xe0
   16630:	f7e9 fe46 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
   16634:	f106 0308 	add.w	r3, r6, #8
   16638:	930b      	str	r3, [sp, #44]	; 0x2c
   1663a:	2206      	movs	r2, #6
   1663c:	f104 010a 	add.w	r1, r4, #10
   16640:	4618      	mov	r0, r3
   16642:	f7e9 fe3d 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
   16646:	2204      	movs	r2, #4
   16648:	f108 0110 	add.w	r1, r8, #16
   1664c:	f106 000e 	add.w	r0, r6, #14
   16650:	f7e9 fe36 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
   16654:	2203      	movs	r2, #3
   16656:	f108 0114 	add.w	r1, r8, #20
   1665a:	f106 0012 	add.w	r0, r6, #18
   1665e:	f7e9 fe2f 	bl	2c0 <memcpy>
		pdu_adv_tx->payload.connect_ind.lldata.win_size = 1;
   16662:	2301      	movs	r3, #1
   16664:	7573      	strb	r3, [r6, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   16666:	4b4f      	ldr	r3, [pc, #316]	; (167a4 <isr_rx_scan+0x414>)
   16668:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
		conn_interval_us =
   1666c:	f240 42e2 	movw	r2, #1250	; 0x4e2
   16670:	fb02 fb03 	mul.w	fp, r2, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   16674:	f7f8 fc30 	bl	eed8 <radio_tmr_end_get>
   16678:	f500 6adb 	add.w	sl, r0, #1752	; 0x6d8
		if (!_radio.remainder_anchor ||
   1667c:	4b49      	ldr	r3, [pc, #292]	; (167a4 <isr_rx_scan+0x414>)
   1667e:	689b      	ldr	r3, [r3, #8]
   16680:	2b00      	cmp	r3, #0
   16682:	dd75      	ble.n	16770 <isr_rx_scan+0x3e0>
		if (_radio.scanner.win_offset_us == 0) {
   16684:	4b47      	ldr	r3, [pc, #284]	; (167a4 <isr_rx_scan+0x414>)
   16686:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1668a:	2b00      	cmp	r3, #0
   1668c:	d174      	bne.n	16778 <isr_rx_scan+0x3e8>
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
   1668e:	75b3      	strb	r3, [r6, #22]
   16690:	75f3      	strb	r3, [r6, #23]
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   16692:	2100      	movs	r1, #0
   16694:	4608      	mov	r0, r1
   16696:	f7f8 fa35 	bl	eb04 <radio_tx_ready_delay_get>
   1669a:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   1669e:	2100      	movs	r1, #0
   166a0:	4608      	mov	r0, r1
   166a2:	f7f8 fa31 	bl	eb08 <radio_tx_chain_delay_get>
   166a6:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us += TICKER_TICKS_TO_US(1);
   166aa:	f10a 031e 	add.w	r3, sl, #30
   166ae:	930c      	str	r3, [sp, #48]	; 0x30
			_radio.scanner.conn_interval;
   166b0:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 167a4 <isr_rx_scan+0x414>
		pdu_adv_tx->payload.connect_ind.lldata.interval =
   166b4:	f8ba 30f0 	ldrh.w	r3, [sl, #240]	; 0xf0
   166b8:	8333      	strh	r3, [r6, #24]
		pdu_adv_tx->payload.connect_ind.lldata.latency =
   166ba:	f8ba 30f2 	ldrh.w	r3, [sl, #242]	; 0xf2
   166be:	8373      	strh	r3, [r6, #26]
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
   166c0:	f8ba 30f4 	ldrh.w	r3, [sl, #244]	; 0xf4
   166c4:	83b3      	strh	r3, [r6, #28]
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
   166c6:	2205      	movs	r2, #5
   166c8:	f108 0117 	add.w	r1, r8, #23
   166cc:	f106 001e 	add.w	r0, r6, #30
   166d0:	f7e9 fdf6 	bl	2c0 <memcpy>
			conn->data_chan_hop;
   166d4:	f898 201e 	ldrb.w	r2, [r8, #30]
		pdu_adv_tx->payload.connect_ind.lldata.hop =
   166d8:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   166dc:	f362 0304 	bfi	r3, r2, #0, #5
   166e0:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		pdu_adv_tx->payload.connect_ind.lldata.sca = _radio.sca;
   166e4:	f89a 211c 	ldrb.w	r2, [sl, #284]	; 0x11c
   166e8:	b2db      	uxtb	r3, r3
   166ea:	f362 1347 	bfi	r3, r2, #5, #3
   166ee:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		radio_switch_complete_and_disable();
   166f2:	f7f8 fa85 	bl	ec00 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   166f6:	4630      	mov	r0, r6
   166f8:	f7f8 f9fe 	bl	eaf8 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   166fc:	f7f8 fa34 	bl	eb68 <radio_is_ready>
   16700:	4682      	mov	sl, r0
   16702:	2800      	cmp	r0, #0
   16704:	d148      	bne.n	16798 <isr_rx_scan+0x408>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   16706:	f44f 72aa 	mov.w	r2, #340	; 0x154
   1670a:	4b26      	ldr	r3, [pc, #152]	; (167a4 <isr_rx_scan+0x414>)
   1670c:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   16710:	4640      	mov	r0, r8
   16712:	f7f8 f83a 	bl	e78a <mem_index_get>
   16716:	f8a8 0020 	strh.w	r0, [r8, #32]
		radio_pdu_node_rx->hdr.handle = conn->handle;
   1671a:	f8a9 0006 	strh.w	r0, [r9, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1671e:	2206      	movs	r2, #6
   16720:	f889 2004 	strb.w	r2, [r9, #4]
		radio_le_conn_cmplt->status = 0x00;
   16724:	2300      	movs	r3, #0
   16726:	f889 300b 	strb.w	r3, [r9, #11]
		radio_le_conn_cmplt->role = 0x00;
   1672a:	f889 300c 	strb.w	r3, [r9, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   1672e:	4631      	mov	r1, r6
   16730:	f811 3b02 	ldrb.w	r3, [r1], #2
   16734:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16738:	f889 301a 	strb.w	r3, [r9, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   1673c:	f109 001b 	add.w	r0, r9, #27
   16740:	f7e9 fdbe 	bl	2c0 <memcpy>
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   16744:	b397      	cbz	r7, 167ac <isr_rx_scan+0x41c>
   16746:	2dff      	cmp	r5, #255	; 0xff
   16748:	d030      	beq.n	167ac <isr_rx_scan+0x41c>
			ll_rl_id_addr_get(rl_idx,
   1674a:	f109 020e 	add.w	r2, r9, #14
   1674e:	f109 010d 	add.w	r1, r9, #13
   16752:	4628      	mov	r0, r5
   16754:	f002 fc96 	bl	19084 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   16758:	f899 300d 	ldrb.w	r3, [r9, #13]
   1675c:	3302      	adds	r3, #2
   1675e:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   16762:	2206      	movs	r2, #6
   16764:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16766:	f109 0014 	add.w	r0, r9, #20
   1676a:	f7e9 fda9 	bl	2c0 <memcpy>
   1676e:	e02e      	b.n	167ce <isr_rx_scan+0x43e>
			conn_offset_us -= TICKER_TICKS_TO_US(1);
   16770:	f200 6aba 	addw	sl, r0, #1722	; 0x6ba
   16774:	e786      	b.n	16684 <isr_rx_scan+0x2f4>
				conn_space_us += conn_interval_us;
   16776:	445b      	add	r3, fp
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   16778:	2b00      	cmp	r3, #0
   1677a:	dbfc      	blt.n	16776 <isr_rx_scan+0x3e6>
   1677c:	459a      	cmp	sl, r3
   1677e:	d8fa      	bhi.n	16776 <isr_rx_scan+0x3e6>
				(conn_space_us - conn_offset_us) / 1250;
   16780:	eba3 020a 	sub.w	r2, r3, sl
   16784:	4908      	ldr	r1, [pc, #32]	; (167a8 <isr_rx_scan+0x418>)
   16786:	fba1 1202 	umull	r1, r2, r1, r2
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
   1678a:	0a92      	lsrs	r2, r2, #10
   1678c:	82f2      	strh	r2, [r6, #22]
			pdu_adv_tx->payload.connect_ind.lldata.win_size++;
   1678e:	7d72      	ldrb	r2, [r6, #21]
   16790:	3201      	adds	r2, #1
   16792:	7572      	strb	r2, [r6, #21]
   16794:	469a      	mov	sl, r3
   16796:	e77c      	b.n	16692 <isr_rx_scan+0x302>
		LL_ASSERT(!radio_is_ready());
   16798:	4040      	eors	r0, r0
   1679a:	f380 8811 	msr	BASEPRI, r0
   1679e:	f04f 0004 	mov.w	r0, #4
   167a2:	df02      	svc	2
   167a4:	20000dec 	.word	0x20000dec
   167a8:	d1b71759 	.word	0xd1b71759
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   167ac:	2206      	movs	r2, #6
   167ae:	2100      	movs	r1, #0
   167b0:	f109 0014 	add.w	r0, r9, #20
   167b4:	f012 ff90 	bl	296d8 <memset>
				pdu_adv_tx->rx_addr;
   167b8:	7833      	ldrb	r3, [r6, #0]
   167ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   167be:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   167c2:	2206      	movs	r2, #6
   167c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   167c6:	f109 000e 	add.w	r0, r9, #14
   167ca:	f7e9 fd79 	bl	2c0 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   167ce:	4dce      	ldr	r5, [pc, #824]	; (16b08 <isr_rx_scan+0x778>)
   167d0:	f8b5 30f0 	ldrh.w	r3, [r5, #240]	; 0xf0
   167d4:	f8a9 3021 	strh.w	r3, [r9, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
   167d8:	f8b5 30f2 	ldrh.w	r3, [r5, #242]	; 0xf2
   167dc:	f8a9 3023 	strh.w	r3, [r9, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   167e0:	f8b5 30f4 	ldrh.w	r3, [r5, #244]	; 0xf4
   167e4:	f8a9 3025 	strh.w	r3, [r9, #37]	; 0x25
			pdu_adv_tx->payload.connect_ind.lldata.sca;
   167e8:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   167ec:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   167f0:	f889 3027 	strb.w	r3, [r9, #39]	; 0x27
		rx_fc_lock(conn->handle);
   167f4:	f8b8 0020 	ldrh.w	r0, [r8, #32]
   167f8:	f7fa fae2 	bl	10dc0 <rx_fc_lock>
		packet_rx_enqueue();
   167fc:	f7fc ffca 	bl	13794 <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   16800:	f895 113e 	ldrb.w	r1, [r5, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16804:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   16808:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   1680a:	4291      	cmp	r1, r2
   1680c:	f0c0 80b9 	bcc.w	16982 <isr_rx_scan+0x5f2>
			_radio.packet_rx_last);
   16810:	f895 313d 	ldrb.w	r3, [r5, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16814:	1acb      	subs	r3, r1, r3
   16816:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   16818:	2b02      	cmp	r3, #2
   1681a:	f240 80bc 	bls.w	16996 <isr_rx_scan+0x606>
	return _radio.packet_rx[_radio.packet_rx_last];
   1681e:	4bba      	ldr	r3, [pc, #744]	; (16b08 <isr_rx_scan+0x778>)
   16820:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16824:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   1682c:	2b00      	cmp	r3, #0
   1682e:	f000 80b4 	beq.w	1699a <isr_rx_scan+0x60a>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   16832:	f8b8 2020 	ldrh.w	r2, [r8, #32]
   16836:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   16838:	220b      	movs	r2, #11
   1683a:	711a      	strb	r2, [r3, #4]
			if (pdu_adv_rx->chan_sel) {
   1683c:	7a22      	ldrb	r2, [r4, #8]
   1683e:	f012 0f20 	tst.w	r2, #32
   16842:	f000 80b0 	beq.w	169a6 <isr_rx_scan+0x616>
					((u16_t)conn->access_addr[1] << 8) |
   16846:	f898 1011 	ldrb.w	r1, [r8, #17]
					conn->access_addr[0];
   1684a:	f898 2010 	ldrb.w	r2, [r8, #16]
				u16_t aa_ls =
   1684e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   16852:	f898 0013 	ldrb.w	r0, [r8, #19]
					 conn->access_addr[2];
   16856:	f898 1012 	ldrb.w	r1, [r8, #18]
				u16_t aa_ms =
   1685a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   1685e:	f898 001d 	ldrb.w	r0, [r8, #29]
   16862:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   16866:	f888 001d 	strb.w	r0, [r8, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   1686a:	404a      	eors	r2, r1
   1686c:	f8a8 201e 	strh.w	r2, [r8, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   16870:	2201      	movs	r2, #1
   16872:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   16874:	f7fc ff8e 	bl	13794 <packet_rx_enqueue>
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   16878:	4ea3      	ldr	r6, [pc, #652]	; (16b08 <isr_rx_scan+0x778>)
   1687a:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   1687e:	f8c8 300c 	str.w	r3, [r8, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   16882:	f8d6 5180 	ldr.w	r5, [r6, #384]	; 0x180
   16886:	f8c8 5004 	str.w	r5, [r8, #4]
		conn->hdr.ticks_xtal_to_start =
   1688a:	2327      	movs	r3, #39	; 0x27
   1688c:	f8c8 3000 	str.w	r3, [r8]
		conn->hdr.ticks_preempt_to_start =
   16890:	2400      	movs	r4, #0
   16892:	f8c8 4008 	str.w	r4, [r8, #8]
		ticks_slot_offset =
   16896:	429d      	cmp	r5, r3
   16898:	bf38      	it	cc
   1689a:	461d      	movcc	r5, r3
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1689c:	f44f 63c6 	mov.w	r3, #1584	; 0x630
   168a0:	9300      	str	r3, [sp, #0]
   168a2:	4b9a      	ldr	r3, [pc, #616]	; (16b0c <isr_rx_scan+0x77c>)
   168a4:	2206      	movs	r2, #6
   168a6:	4621      	mov	r1, r4
   168a8:	4620      	mov	r0, r4
   168aa:	f7f9 fc99 	bl	101e0 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   168ae:	f240 6131 	movw	r1, #1585	; 0x631
   168b2:	f7fa faed 	bl	10e90 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   168b6:	9400      	str	r4, [sp, #0]
   168b8:	4623      	mov	r3, r4
   168ba:	2204      	movs	r2, #4
   168bc:	4621      	mov	r1, r4
   168be:	4620      	mov	r0, r4
   168c0:	f7f9 fc8e 	bl	101e0 <ticker_stop>
				     conn->handle,
   168c4:	f8b8 3020 	ldrh.w	r3, [r8, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   168c8:	3307      	adds	r3, #7
   168ca:	b2db      	uxtb	r3, r3
   168cc:	930b      	str	r3, [sp, #44]	; 0x2c
				     (_radio.ticks_anchor - ticks_slot_offset),
   168ce:	6876      	ldr	r6, [r6, #4]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   168d0:	1b76      	subs	r6, r6, r5
				     TICKER_US_TO_TICKS(conn_space_us),
   168d2:	4f8f      	ldr	r7, [pc, #572]	; (16b10 <isr_rx_scan+0x780>)
   168d4:	a38a      	add	r3, pc, #552	; (adr r3, 16b00 <isr_rx_scan+0x770>)
   168d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   168da:	990c      	ldr	r1, [sp, #48]	; 0x30
   168dc:	fba1 0107 	umull	r0, r1, r1, r7
   168e0:	f7ea fc0c 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   168e4:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
				     TICKER_US_TO_TICKS(conn_interval_us),
   168e8:	fbab 1207 	umull	r1, r2, fp, r7
   168ec:	468b      	mov	fp, r1
   168ee:	4694      	mov	ip, r2
   168f0:	a383      	add	r3, pc, #524	; (adr r3, 16b00 <isr_rx_scan+0x770>)
   168f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   168f6:	e9cd bc0c 	strd	fp, ip, [sp, #48]	; 0x30
   168fa:	4658      	mov	r0, fp
   168fc:	4661      	mov	r1, ip
   168fe:	f7ea fbfd 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16902:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
				     TICKER_REMAINDER(conn_interval_us),
   16906:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1690a:	2100      	movs	r1, #0
   1690c:	4a81      	ldr	r2, [pc, #516]	; (16b14 <isr_rx_scan+0x784>)
   1690e:	2307      	movs	r3, #7
   16910:	fb03 f300 	mul.w	r3, r3, r0
   16914:	fb02 3301 	mla	r3, r2, r1, r3
   16918:	fba0 0102 	umull	r0, r1, r0, r2
   1691c:	4419      	add	r1, r3
   1691e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16922:	2300      	movs	r3, #0
   16924:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	; 0x30
   16928:	ebbb 0b00 	subs.w	fp, fp, r0
   1692c:	eb6c 0c01 	sbc.w	ip, ip, r1
   16930:	4658      	mov	r0, fp
   16932:	4661      	mov	r1, ip
   16934:	f7ea fbe2 	bl	10fc <__aeabi_uldivmod>
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   16938:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1693c:	442b      	add	r3, r5
   1693e:	b29b      	uxth	r3, r3
		ticker_status =
   16940:	f44f 62c9 	mov.w	r2, #1608	; 0x648
   16944:	9208      	str	r2, [sp, #32]
   16946:	4a74      	ldr	r2, [pc, #464]	; (16b18 <isr_rx_scan+0x788>)
   16948:	9207      	str	r2, [sp, #28]
   1694a:	f8cd 8018 	str.w	r8, [sp, #24]
   1694e:	4a73      	ldr	r2, [pc, #460]	; (16b1c <isr_rx_scan+0x78c>)
   16950:	9205      	str	r2, [sp, #20]
   16952:	9304      	str	r3, [sp, #16]
   16954:	9403      	str	r4, [sp, #12]
   16956:	9002      	str	r0, [sp, #8]
   16958:	9701      	str	r7, [sp, #4]
   1695a:	f8cd 9000 	str.w	r9, [sp]
   1695e:	4633      	mov	r3, r6
   16960:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16962:	4621      	mov	r1, r4
   16964:	4620      	mov	r0, r4
   16966:	f7f9 fb9f 	bl	100a8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1696a:	2800      	cmp	r0, #0
   1696c:	f000 8132 	beq.w	16bd4 <isr_rx_scan+0x844>
   16970:	2802      	cmp	r0, #2
   16972:	f000 811b 	beq.w	16bac <isr_rx_scan+0x81c>
   16976:	4040      	eors	r0, r0
   16978:	f380 8811 	msr	BASEPRI, r0
   1697c:	f04f 0004 	mov.w	r0, #4
   16980:	df02      	svc	2
		return (_radio.packet_rx_count -
   16982:	4a61      	ldr	r2, [pc, #388]	; (16b08 <isr_rx_scan+0x778>)
   16984:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   16988:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1698c:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   1698e:	fa51 f383 	uxtab	r3, r1, r3
   16992:	b2db      	uxtb	r3, r3
   16994:	e740      	b.n	16818 <isr_rx_scan+0x488>
		return 0;
   16996:	2300      	movs	r3, #0
   16998:	e748      	b.n	1682c <isr_rx_scan+0x49c>
			LL_ASSERT(radio_pdu_node_rx);
   1699a:	4040      	eors	r0, r0
   1699c:	f380 8811 	msr	BASEPRI, r0
   169a0:	f04f 0004 	mov.w	r0, #4
   169a4:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   169a6:	2200      	movs	r2, #0
   169a8:	72da      	strb	r2, [r3, #11]
   169aa:	e763      	b.n	16874 <isr_rx_scan+0x4e4>
		 (_radio.scanner.type != 0) &&
   169ac:	4a56      	ldr	r2, [pc, #344]	; (16b08 <isr_rx_scan+0x778>)
   169ae:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   169b2:	f012 0f08 	tst.w	r2, #8
   169b6:	f43f ad13 	beq.w	163e0 <isr_rx_scan+0x50>
		 (_radio.scanner.conn == 0)) {
   169ba:	4a53      	ldr	r2, [pc, #332]	; (16b08 <isr_rx_scan+0x778>)
   169bc:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
		 (_radio.scanner.type != 0) &&
   169c0:	2a00      	cmp	r2, #0
   169c2:	f47f ad0d 	bne.w	163e0 <isr_rx_scan+0x50>
		err = isr_rx_scan_report(rssi_ready,
   169c6:	b37f      	cbz	r7, 16a28 <isr_rx_scan+0x698>
   169c8:	4629      	mov	r1, r5
   169ca:	2200      	movs	r2, #0
   169cc:	4630      	mov	r0, r6
   169ce:	f7fc ff81 	bl	138d4 <isr_rx_scan_report>
		if (err) {
   169d2:	4682      	mov	sl, r0
   169d4:	2800      	cmp	r0, #0
   169d6:	f040 80e9 	bne.w	16bac <isr_rx_scan+0x81c>
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   169da:	f7f8 f8fd 	bl	ebd8 <radio_pkt_scratch_get>
   169de:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   169e0:	7803      	ldrb	r3, [r0, #0]
   169e2:	2203      	movs	r2, #3
   169e4:	f362 0303 	bfi	r3, r2, #0, #4
   169e8:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   169ea:	7a23      	ldrb	r3, [r4, #8]
   169ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
   169f0:	7802      	ldrb	r2, [r0, #0]
   169f2:	f363 12c7 	bfi	r2, r3, #7, #1
   169f6:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
   169f8:	230c      	movs	r3, #12
   169fa:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   169fc:	4628      	mov	r0, r5
   169fe:	f002 f94b 	bl	18c98 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   16a02:	4b41      	ldr	r3, [pc, #260]	; (16b08 <isr_rx_scan+0x778>)
   16a04:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   16a08:	f013 0f01 	tst.w	r3, #1
   16a0c:	d00e      	beq.n	16a2c <isr_rx_scan+0x69c>
   16a0e:	b168      	cbz	r0, 16a2c <isr_rx_scan+0x69c>
			pdu_adv_tx->tx_addr = 1;
   16a10:	7832      	ldrb	r2, [r6, #0]
   16a12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16a16:	4633      	mov	r3, r6
   16a18:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   16a1c:	2206      	movs	r2, #6
   16a1e:	4601      	mov	r1, r0
   16a20:	4618      	mov	r0, r3
   16a22:	f7e9 fc4d 	bl	2c0 <memcpy>
   16a26:	e00f      	b.n	16a48 <isr_rx_scan+0x6b8>
		err = isr_rx_scan_report(rssi_ready,
   16a28:	21ff      	movs	r1, #255	; 0xff
   16a2a:	e7ce      	b.n	169ca <isr_rx_scan+0x63a>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   16a2c:	4936      	ldr	r1, [pc, #216]	; (16b08 <isr_rx_scan+0x778>)
   16a2e:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   16a32:	09db      	lsrs	r3, r3, #7
   16a34:	7832      	ldrb	r2, [r6, #0]
   16a36:	f363 1286 	bfi	r2, r3, #6, #1
   16a3a:	4630      	mov	r0, r6
   16a3c:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   16a40:	2206      	movs	r2, #6
   16a42:	31e0      	adds	r1, #224	; 0xe0
   16a44:	f7e9 fc3c 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
   16a48:	2206      	movs	r2, #6
   16a4a:	f104 010a 	add.w	r1, r4, #10
   16a4e:	f106 0008 	add.w	r0, r6, #8
   16a52:	f7e9 fc35 	bl	2c0 <memcpy>
		_radio.scanner.state = 1;
   16a56:	4b2c      	ldr	r3, [pc, #176]	; (16b08 <isr_rx_scan+0x778>)
   16a58:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   16a5c:	f042 0202 	orr.w	r2, r2, #2
   16a60:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		_radio.state = STATE_TX;
   16a64:	2202      	movs	r2, #2
   16a66:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   16a68:	2096      	movs	r0, #150	; 0x96
   16a6a:	f7f8 f96b 	bl	ed44 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   16a6e:	2000      	movs	r0, #0
   16a70:	f7f8 f8b6 	bl	ebe0 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   16a74:	4630      	mov	r0, r6
   16a76:	f7f8 f83f 	bl	eaf8 <radio_pkt_tx_set>
		radio_tmr_end_capture();
   16a7a:	f7f8 fa1b 	bl	eeb4 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
   16a7e:	f7f8 f873 	bl	eb68 <radio_is_ready>
   16a82:	4682      	mov	sl, r0
   16a84:	2800      	cmp	r0, #0
   16a86:	f000 8091 	beq.w	16bac <isr_rx_scan+0x81c>
   16a8a:	4040      	eors	r0, r0
   16a8c:	f380 8811 	msr	BASEPRI, r0
   16a90:	f04f 0004 	mov.w	r0, #4
   16a94:	df02      	svc	2
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   16a96:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   16a98:	f108 0908 	add.w	r9, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   16a9c:	462a      	mov	r2, r5
   16a9e:	4649      	mov	r1, r9
   16aa0:	09c0      	lsrs	r0, r0, #7
   16aa2:	f002 fb73 	bl	1918c <ctrl_rl_addr_resolve>
   16aa6:	4682      	mov	sl, r0
   16aa8:	2800      	cmp	r0, #0
   16aaa:	d146      	bne.n	16b3a <isr_rx_scan+0x7aa>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   16aac:	4b16      	ldr	r3, [pc, #88]	; (16b08 <isr_rx_scan+0x778>)
   16aae:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   16ab2:	7a23      	ldrb	r3, [r4, #8]
   16ab4:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   16ab6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16aba:	d00b      	beq.n	16ad4 <isr_rx_scan+0x744>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   16abc:	4b12      	ldr	r3, [pc, #72]	; (16b08 <isr_rx_scan+0x778>)
   16abe:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   16ac2:	f013 0f20 	tst.w	r3, #32
   16ac6:	d02d      	beq.n	16b24 <isr_rx_scan+0x794>
   16ac8:	f994 3008 	ldrsb.w	r3, [r4, #8]
   16acc:	2b00      	cmp	r3, #0
   16ace:	db0c      	blt.n	16aea <isr_rx_scan+0x75a>
	bool dir_report = false;
   16ad0:	46d1      	mov	r9, sl
   16ad2:	e028      	b.n	16b26 <isr_rx_scan+0x796>
		(memcmp(&_radio.scanner.init_addr[0],
   16ad4:	2206      	movs	r2, #6
   16ad6:	4649      	mov	r1, r9
   16ad8:	4811      	ldr	r0, [pc, #68]	; (16b20 <isr_rx_scan+0x790>)
   16ada:	f012 fd69 	bl	295b0 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   16ade:	2800      	cmp	r0, #0
   16ae0:	d1ec      	bne.n	16abc <isr_rx_scan+0x72c>
	bool dir_report = false;
   16ae2:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   16ae4:	f04f 0a01 	mov.w	sl, #1
   16ae8:	e029      	b.n	16b3e <isr_rx_scan+0x7ae>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   16aea:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   16aee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16af2:	2b40      	cmp	r3, #64	; 0x40
   16af4:	d01d      	beq.n	16b32 <isr_rx_scan+0x7a2>
	bool dir_report = false;
   16af6:	46d1      	mov	r9, sl
   16af8:	e015      	b.n	16b26 <isr_rx_scan+0x796>
   16afa:	bf00      	nop
   16afc:	f3af 8000 	nop.w
   16b00:	1afd498d 	.word	0x1afd498d
   16b04:	00000007 	.word	0x00000007
   16b08:	20000dec 	.word	0x20000dec
   16b0c:	00010e91 	.word	0x00010e91
   16b10:	3b9aca00 	.word	0x3b9aca00
   16b14:	1afd498d 	.word	0x1afd498d
   16b18:	00010dfd 	.word	0x00010dfd
   16b1c:	000159bd 	.word	0x000159bd
   16b20:	20000ecc 	.word	0x20000ecc
   16b24:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   16b26:	f1ba 0f00 	cmp.w	sl, #0
   16b2a:	d008      	beq.n	16b3e <isr_rx_scan+0x7ae>
   16b2c:	f04f 0a01 	mov.w	sl, #1
   16b30:	e005      	b.n	16b3e <isr_rx_scan+0x7ae>
			*dir_report = true;
   16b32:	f04f 0901 	mov.w	r9, #1
		return true;
   16b36:	46ca      	mov	sl, r9
   16b38:	e7f5      	b.n	16b26 <isr_rx_scan+0x796>
	bool dir_report = false;
   16b3a:	f04f 0900 	mov.w	r9, #0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16b3e:	f1ba 0f00 	cmp.w	sl, #0
   16b42:	d12b      	bne.n	16b9c <isr_rx_scan+0x80c>
   16b44:	e454      	b.n	163f0 <isr_rx_scan+0x60>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   16b46:	4a26      	ldr	r2, [pc, #152]	; (16be0 <isr_rx_scan+0x850>)
   16b48:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
   16b4c:	f012 0f07 	tst.w	r2, #7
   16b50:	d124      	bne.n	16b9c <isr_rx_scan+0x80c>
   16b52:	e459      	b.n	16408 <isr_rx_scan+0x78>
		   (_radio.scanner.state != 0) &&
   16b54:	4b22      	ldr	r3, [pc, #136]	; (16be0 <isr_rx_scan+0x850>)
   16b56:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   16b5a:	f013 0f02 	tst.w	r3, #2
   16b5e:	d102      	bne.n	16b66 <isr_rx_scan+0x7d6>
		return 1;
   16b60:	f04f 0a01 	mov.w	sl, #1
   16b64:	e022      	b.n	16bac <isr_rx_scan+0x81c>
	struct pdu_adv *sreq = (struct pdu_adv *)radio_pkt_scratch_get();
   16b66:	f7f8 f837 	bl	ebd8 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   16b6a:	7802      	ldrb	r2, [r0, #0]
   16b6c:	7a23      	ldrb	r3, [r4, #8]
   16b6e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16b72:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16b76:	d004      	beq.n	16b82 <isr_rx_scan+0x7f2>
   16b78:	2300      	movs	r3, #0
		   (_radio.scanner.state != 0) &&
   16b7a:	b97b      	cbnz	r3, 16b9c <isr_rx_scan+0x80c>
		return 1;
   16b7c:	f04f 0a01 	mov.w	sl, #1
   16b80:	e014      	b.n	16bac <isr_rx_scan+0x81c>
		(memcmp(&sreq->payload.scan_req.adv_addr[0],
   16b82:	2206      	movs	r2, #6
   16b84:	f108 0102 	add.w	r1, r8, #2
   16b88:	3008      	adds	r0, #8
   16b8a:	f012 fd11 	bl	295b0 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   16b8e:	b108      	cbz	r0, 16b94 <isr_rx_scan+0x804>
   16b90:	2300      	movs	r3, #0
   16b92:	e7f2      	b.n	16b7a <isr_rx_scan+0x7ea>
   16b94:	2301      	movs	r3, #1
   16b96:	e7f0      	b.n	16b7a <isr_rx_scan+0x7ea>
	bool dir_report = false;
   16b98:	f04f 0900 	mov.w	r9, #0
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   16b9c:	7a63      	ldrb	r3, [r4, #9]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   16b9e:	b1db      	cbz	r3, 16bd8 <isr_rx_scan+0x848>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   16ba0:	4b0f      	ldr	r3, [pc, #60]	; (16be0 <isr_rx_scan+0x850>)
   16ba2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   16ba6:	b12b      	cbz	r3, 16bb4 <isr_rx_scan+0x824>
		return 1;
   16ba8:	f04f 0a01 	mov.w	sl, #1
}
   16bac:	4650      	mov	r0, sl
   16bae:	b00f      	add	sp, #60	; 0x3c
   16bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = isr_rx_scan_report(rssi_ready,
   16bb4:	b907      	cbnz	r7, 16bb8 <isr_rx_scan+0x828>
   16bb6:	25ff      	movs	r5, #255	; 0xff
   16bb8:	464a      	mov	r2, r9
   16bba:	4629      	mov	r1, r5
   16bbc:	4630      	mov	r0, r6
   16bbe:	f7fc fe89 	bl	138d4 <isr_rx_scan_report>
		if (err) {
   16bc2:	4682      	mov	sl, r0
   16bc4:	2800      	cmp	r0, #0
   16bc6:	d1f1      	bne.n	16bac <isr_rx_scan+0x81c>
	return 1;
   16bc8:	f04f 0a01 	mov.w	sl, #1
   16bcc:	e7ee      	b.n	16bac <isr_rx_scan+0x81c>
			return 1;
   16bce:	f04f 0a01 	mov.w	sl, #1
   16bd2:	e7eb      	b.n	16bac <isr_rx_scan+0x81c>
		return 0;
   16bd4:	4682      	mov	sl, r0
   16bd6:	e7e9      	b.n	16bac <isr_rx_scan+0x81c>
		return 1;
   16bd8:	f04f 0a01 	mov.w	sl, #1
   16bdc:	e7e6      	b.n	16bac <isr_rx_scan+0x81c>
   16bde:	bf00      	nop
   16be0:	20000dec 	.word	0x20000dec
   16be4:	00000000 	.word	0x00000000

00016be8 <isr_rx_adv>:
{
   16be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bec:	b08f      	sub	sp, #60	; 0x3c
   16bee:	4604      	mov	r4, r0
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   16bf0:	b9fa      	cbnz	r2, 16c32 <isr_rx_adv+0x4a>
   16bf2:	20ff      	movs	r0, #255	; 0xff
   16bf4:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
   16bf8:	f7f7 ffee 	bl	ebd8 <radio_pkt_scratch_get>
   16bfc:	4680      	mov	r8, r0
		[_radio.advertiser.adv_data.first][0];
   16bfe:	4f9d      	ldr	r7, [pc, #628]	; (16e74 <isr_rx_adv+0x28c>)
   16c00:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
   16c04:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   16c08:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   16c0c:	3320      	adds	r3, #32
   16c0e:	441f      	add	r7, r3
   16c10:	1dfd      	adds	r5, r7, #7
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   16c12:	7803      	ldrb	r3, [r0, #0]
   16c14:	f003 030f 	and.w	r3, r3, #15
   16c18:	2b03      	cmp	r3, #3
   16c1a:	d00e      	beq.n	16c3a <isr_rx_adv+0x52>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   16c1c:	f898 3000 	ldrb.w	r3, [r8]
   16c20:	f003 030f 	and.w	r3, r3, #15
   16c24:	2b05      	cmp	r3, #5
   16c26:	d065      	beq.n	16cf4 <isr_rx_adv+0x10c>
	return 1;
   16c28:	2301      	movs	r3, #1
}
   16c2a:	4618      	mov	r0, r3
   16c2c:	b00f      	add	sp, #60	; 0x3c
   16c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   16c32:	4618      	mov	r0, r3
   16c34:	f002 f892 	bl	18d5c <ctrl_rl_irk_idx>
   16c38:	e7dc      	b.n	16bf4 <isr_rx_adv+0xc>
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   16c3a:	7843      	ldrb	r3, [r0, #1]
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   16c3c:	2b0c      	cmp	r3, #12
   16c3e:	d1ed      	bne.n	16c1c <isr_rx_adv+0x34>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   16c40:	4b8c      	ldr	r3, [pc, #560]	; (16e74 <isr_rx_adv+0x28c>)
   16c42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16c46:	f013 0f40 	tst.w	r3, #64	; 0x40
   16c4a:	d030      	beq.n	16cae <isr_rx_adv+0xc6>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   16c4c:	4b89      	ldr	r3, [pc, #548]	; (16e74 <isr_rx_adv+0x28c>)
   16c4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   16c52:	f013 0f40 	tst.w	r3, #64	; 0x40
   16c56:	d04b      	beq.n	16cf0 <isr_rx_adv+0x108>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   16c58:	2c00      	cmp	r4, #0
   16c5a:	d034      	beq.n	16cc6 <isr_rx_adv+0xde>
	return (adv->tx_addr == sr->rx_addr) &&
   16c5c:	79fb      	ldrb	r3, [r7, #7]
   16c5e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16c62:	f898 2000 	ldrb.w	r2, [r8]
   16c66:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16c6a:	d034      	beq.n	16cd6 <isr_rx_adv+0xee>
   16c6c:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16c6e:	2b00      	cmp	r3, #0
   16c70:	d13c      	bne.n	16cec <isr_rx_adv+0x104>
   16c72:	2300      	movs	r3, #0
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   16c74:	2b00      	cmp	r3, #0
   16c76:	d0d1      	beq.n	16c1c <isr_rx_adv+0x34>
		_radio.state = STATE_CLOSE;
   16c78:	4c7e      	ldr	r4, [pc, #504]	; (16e74 <isr_rx_adv+0x28c>)
   16c7a:	2303      	movs	r3, #3
   16c7c:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
   16c7e:	f7f7 ffbf 	bl	ec00 <radio_switch_complete_and_disable>
		     data[_radio.advertiser.scan_data.first][0]);
   16c82:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
		radio_pkt_tx_set(&_radio.advertiser.scan_data.
   16c86:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   16c8a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   16c8e:	3370      	adds	r3, #112	; 0x70
   16c90:	4423      	add	r3, r4
   16c92:	1dd8      	adds	r0, r3, #7
   16c94:	f7f7 ff30 	bl	eaf8 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   16c98:	f7f7 ff66 	bl	eb68 <radio_is_ready>
   16c9c:	4603      	mov	r3, r0
   16c9e:	2800      	cmp	r0, #0
   16ca0:	d0c3      	beq.n	16c2a <isr_rx_adv+0x42>
   16ca2:	4040      	eors	r0, r0
   16ca4:	f380 8811 	msr	BASEPRI, r0
   16ca8:	f04f 0004 	mov.w	r0, #4
   16cac:	df02      	svc	2
		 ctrl_rl_addr_allowed(sr->tx_addr,
   16cae:	4601      	mov	r1, r0
   16cb0:	f811 0b02 	ldrb.w	r0, [r1], #2
   16cb4:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   16cb8:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16cbc:	f002 fa0e 	bl	190dc <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   16cc0:	2800      	cmp	r0, #0
   16cc2:	d1cb      	bne.n	16c5c <isr_rx_adv+0x74>
   16cc4:	e7c2      	b.n	16c4c <isr_rx_adv+0x64>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16cc6:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   16cca:	f002 f871 	bl	18db0 <ctrl_irk_whitelisted>
   16cce:	2800      	cmp	r0, #0
   16cd0:	d1c4      	bne.n	16c5c <isr_rx_adv+0x74>
   16cd2:	2300      	movs	r3, #0
   16cd4:	e7ce      	b.n	16c74 <isr_rx_adv+0x8c>
		 !memcmp(adv->payload.adv_ind.addr,
   16cd6:	2206      	movs	r2, #6
   16cd8:	f108 0108 	add.w	r1, r8, #8
   16cdc:	1ca8      	adds	r0, r5, #2
   16cde:	f012 fc67 	bl	295b0 <memcmp>
	return (adv->tx_addr == sr->rx_addr) &&
   16ce2:	b908      	cbnz	r0, 16ce8 <isr_rx_adv+0x100>
   16ce4:	2301      	movs	r3, #1
   16ce6:	e7c2      	b.n	16c6e <isr_rx_adv+0x86>
   16ce8:	2300      	movs	r3, #0
   16cea:	e7c0      	b.n	16c6e <isr_rx_adv+0x86>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16cec:	2301      	movs	r3, #1
   16cee:	e7c1      	b.n	16c74 <isr_rx_adv+0x8c>
   16cf0:	2300      	movs	r3, #0
   16cf2:	e7bf      	b.n	16c74 <isr_rx_adv+0x8c>
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   16cf4:	f898 3001 	ldrb.w	r3, [r8, #1]
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   16cf8:	2b22      	cmp	r3, #34	; 0x22
   16cfa:	d001      	beq.n	16d00 <isr_rx_adv+0x118>
	return 1;
   16cfc:	2301      	movs	r3, #1
   16cfe:	e794      	b.n	16c2a <isr_rx_adv+0x42>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   16d00:	79fb      	ldrb	r3, [r7, #7]
   16d02:	f003 030f 	and.w	r3, r3, #15
   16d06:	2b01      	cmp	r3, #1
   16d08:	d01a      	beq.n	16d40 <isr_rx_adv+0x158>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   16d0a:	4b5a      	ldr	r3, [pc, #360]	; (16e74 <isr_rx_adv+0x28c>)
   16d0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16d10:	09db      	lsrs	r3, r3, #7
   16d12:	d06d      	beq.n	16df0 <isr_rx_adv+0x208>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   16d14:	4b57      	ldr	r3, [pc, #348]	; (16e74 <isr_rx_adv+0x28c>)
   16d16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   16d1a:	09db      	lsrs	r3, r3, #7
   16d1c:	f000 8096 	beq.w	16e4c <isr_rx_adv+0x264>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   16d20:	2c00      	cmp	r4, #0
   16d22:	d071      	beq.n	16e08 <isr_rx_adv+0x220>
	return (adv->tx_addr == ci->rx_addr) &&
   16d24:	79fb      	ldrb	r3, [r7, #7]
   16d26:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16d2a:	f898 2000 	ldrb.w	r2, [r8]
   16d2e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16d32:	d071      	beq.n	16e18 <isr_rx_adv+0x230>
   16d34:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16d36:	2b00      	cmp	r3, #0
   16d38:	f000 809a 	beq.w	16e70 <isr_rx_adv+0x288>
   16d3c:	2301      	movs	r3, #1
   16d3e:	e086      	b.n	16e4e <isr_rx_adv+0x266>
		return ctrl_rl_addr_allowed(ci->tx_addr,
   16d40:	4641      	mov	r1, r8
   16d42:	f811 0b02 	ldrb.w	r0, [r1], #2
   16d46:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   16d4a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16d4e:	f002 f9c5 	bl	190dc <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
   16d52:	b908      	cbnz	r0, 16d58 <isr_rx_adv+0x170>
   16d54:	2300      	movs	r3, #0
   16d56:	e07a      	b.n	16e4e <isr_rx_adv+0x266>
	return (adv->tx_addr == ci->rx_addr) &&
   16d58:	79fb      	ldrb	r3, [r7, #7]
   16d5a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16d5e:	f898 2000 	ldrb.w	r2, [r8]
   16d62:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16d66:	d003      	beq.n	16d70 <isr_rx_adv+0x188>
   16d68:	2300      	movs	r3, #0
					    rl_idx) &&
   16d6a:	b9db      	cbnz	r3, 16da4 <isr_rx_adv+0x1bc>
		       isr_adv_ci_adva_check(adv, ci) &&
   16d6c:	2300      	movs	r3, #0
   16d6e:	e06e      	b.n	16e4e <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16d70:	79fb      	ldrb	r3, [r7, #7]
   16d72:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   16d76:	2b01      	cmp	r3, #1
   16d78:	d008      	beq.n	16d8c <isr_rx_adv+0x1a4>
		 (!memcmp(adv->payload.adv_ind.addr,
   16d7a:	2206      	movs	r2, #6
   16d7c:	f108 0108 	add.w	r1, r8, #8
   16d80:	1ca8      	adds	r0, r5, #2
   16d82:	f012 fc15 	bl	295b0 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   16d86:	b958      	cbnz	r0, 16da0 <isr_rx_adv+0x1b8>
	return (adv->tx_addr == ci->rx_addr) &&
   16d88:	2301      	movs	r3, #1
   16d8a:	e7ee      	b.n	16d6a <isr_rx_adv+0x182>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   16d8c:	2206      	movs	r2, #6
   16d8e:	f108 0108 	add.w	r1, r8, #8
   16d92:	1ca8      	adds	r0, r5, #2
   16d94:	f012 fc0c 	bl	295b0 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16d98:	2800      	cmp	r0, #0
   16d9a:	d1ee      	bne.n	16d7a <isr_rx_adv+0x192>
	return (adv->tx_addr == ci->rx_addr) &&
   16d9c:	2301      	movs	r3, #1
   16d9e:	e7e4      	b.n	16d6a <isr_rx_adv+0x182>
   16da0:	2300      	movs	r3, #0
   16da2:	e7e2      	b.n	16d6a <isr_rx_adv+0x182>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
   16da4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
	if (rl_idx != FILTER_IDX_NONE) {
   16da8:	2bff      	cmp	r3, #255	; 0xff
   16daa:	d009      	beq.n	16dc0 <isr_rx_adv+0x1d8>
		return rl_idx == _radio.advertiser.rl_idx;
   16dac:	4a31      	ldr	r2, [pc, #196]	; (16e74 <isr_rx_adv+0x28c>)
   16dae:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   16db2:	4293      	cmp	r3, r2
   16db4:	bf14      	ite	ne
   16db6:	2300      	movne	r3, #0
   16db8:	2301      	moveq	r3, #1
		       isr_adv_ci_adva_check(adv, ci) &&
   16dba:	b9bb      	cbnz	r3, 16dec <isr_rx_adv+0x204>
   16dbc:	2300      	movs	r3, #0
   16dbe:	e046      	b.n	16e4e <isr_rx_adv+0x266>
	return (adv->rx_addr == ci->tx_addr) &&
   16dc0:	79fa      	ldrb	r2, [r7, #7]
   16dc2:	f898 3000 	ldrb.w	r3, [r8]
   16dc6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16dca:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16dce:	d001      	beq.n	16dd4 <isr_rx_adv+0x1ec>
   16dd0:	2300      	movs	r3, #0
   16dd2:	e7f2      	b.n	16dba <isr_rx_adv+0x1d2>
	       !memcmp(adv->payload.direct_ind.tgt_addr,
   16dd4:	2206      	movs	r2, #6
   16dd6:	f108 0102 	add.w	r1, r8, #2
   16dda:	f105 0008 	add.w	r0, r5, #8
   16dde:	f012 fbe7 	bl	295b0 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   16de2:	b908      	cbnz	r0, 16de8 <isr_rx_adv+0x200>
   16de4:	2301      	movs	r3, #1
   16de6:	e7e8      	b.n	16dba <isr_rx_adv+0x1d2>
   16de8:	2300      	movs	r3, #0
   16dea:	e7e6      	b.n	16dba <isr_rx_adv+0x1d2>
		       isr_adv_ci_adva_check(adv, ci) &&
   16dec:	2301      	movs	r3, #1
   16dee:	e02e      	b.n	16e4e <isr_rx_adv+0x266>
		 ctrl_rl_addr_allowed(ci->tx_addr,
   16df0:	4641      	mov	r1, r8
   16df2:	f811 0b02 	ldrb.w	r0, [r1], #2
   16df6:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   16dfa:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16dfe:	f002 f96d 	bl	190dc <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   16e02:	2800      	cmp	r0, #0
   16e04:	d18e      	bne.n	16d24 <isr_rx_adv+0x13c>
   16e06:	e785      	b.n	16d14 <isr_rx_adv+0x12c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16e08:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   16e0c:	f001 ffd0 	bl	18db0 <ctrl_irk_whitelisted>
   16e10:	2800      	cmp	r0, #0
   16e12:	d187      	bne.n	16d24 <isr_rx_adv+0x13c>
   16e14:	2300      	movs	r3, #0
   16e16:	e01a      	b.n	16e4e <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16e18:	79fb      	ldrb	r3, [r7, #7]
   16e1a:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   16e1e:	2b01      	cmp	r3, #1
   16e20:	d008      	beq.n	16e34 <isr_rx_adv+0x24c>
		 (!memcmp(adv->payload.adv_ind.addr,
   16e22:	2206      	movs	r2, #6
   16e24:	f108 0108 	add.w	r1, r8, #8
   16e28:	1ca8      	adds	r0, r5, #2
   16e2a:	f012 fbc1 	bl	295b0 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   16e2e:	b958      	cbnz	r0, 16e48 <isr_rx_adv+0x260>
	return (adv->tx_addr == ci->rx_addr) &&
   16e30:	2301      	movs	r3, #1
   16e32:	e780      	b.n	16d36 <isr_rx_adv+0x14e>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   16e34:	2206      	movs	r2, #6
   16e36:	f108 0108 	add.w	r1, r8, #8
   16e3a:	1ca8      	adds	r0, r5, #2
   16e3c:	f012 fbb8 	bl	295b0 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16e40:	2800      	cmp	r0, #0
   16e42:	d1ee      	bne.n	16e22 <isr_rx_adv+0x23a>
	return (adv->tx_addr == ci->rx_addr) &&
   16e44:	2301      	movs	r3, #1
   16e46:	e776      	b.n	16d36 <isr_rx_adv+0x14e>
   16e48:	2300      	movs	r3, #0
   16e4a:	e774      	b.n	16d36 <isr_rx_adv+0x14e>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16e4c:	2300      	movs	r3, #0
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   16e4e:	2b00      	cmp	r3, #0
   16e50:	f000 8232 	beq.w	172b8 <isr_rx_adv+0x6d0>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   16e54:	4b07      	ldr	r3, [pc, #28]	; (16e74 <isr_rx_adv+0x28c>)
   16e56:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
   16e5a:	b16b      	cbz	r3, 16e78 <isr_rx_adv+0x290>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   16e5c:	4a05      	ldr	r2, [pc, #20]	; (16e74 <isr_rx_adv+0x28c>)
   16e5e:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   16e62:	b2db      	uxtb	r3, r3
   16e64:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   16e68:	4293      	cmp	r3, r2
   16e6a:	d005      	beq.n	16e78 <isr_rx_adv+0x290>
	return 1;
   16e6c:	2301      	movs	r3, #1
   16e6e:	e6dc      	b.n	16c2a <isr_rx_adv+0x42>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16e70:	2300      	movs	r3, #0
   16e72:	e7ec      	b.n	16e4e <isr_rx_adv+0x266>
   16e74:	20000dec 	.word	0x20000dec
		   (_radio.advertiser.conn)) {
   16e78:	4bd9      	ldr	r3, [pc, #868]	; (171e0 <isr_rx_adv+0x5f8>)
   16e7a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   16e7e:	2b00      	cmp	r3, #0
   16e80:	f000 821c 	beq.w	172bc <isr_rx_adv+0x6d4>
	if (_radio.packet_rx_acquire >=
   16e84:	4bd6      	ldr	r3, [pc, #856]	; (171e0 <isr_rx_adv+0x5f8>)
   16e86:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16e8a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16e8e:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   16e90:	429a      	cmp	r2, r3
   16e92:	f0c0 81cf 	bcc.w	17234 <isr_rx_adv+0x64c>
			_radio.packet_rx_last);
   16e96:	4bd2      	ldr	r3, [pc, #840]	; (171e0 <isr_rx_adv+0x5f8>)
   16e98:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16e9c:	1ad3      	subs	r3, r2, r3
   16e9e:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   16ea0:	2b03      	cmp	r3, #3
   16ea2:	f240 81d1 	bls.w	17248 <isr_rx_adv+0x660>
	return _radio.packet_rx[_radio.packet_rx_last];
   16ea6:	4bce      	ldr	r3, [pc, #824]	; (171e0 <isr_rx_adv+0x5f8>)
   16ea8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16eac:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16eb0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   16eb4:	2d00      	cmp	r5, #0
   16eb6:	f000 8203 	beq.w	172c0 <isr_rx_adv+0x6d8>
		_radio.state = STATE_STOP;
   16eba:	4ec9      	ldr	r6, [pc, #804]	; (171e0 <isr_rx_adv+0x5f8>)
   16ebc:	f04f 0904 	mov.w	r9, #4
   16ec0:	f886 9010 	strb.w	r9, [r6, #16]
		radio_disable();
   16ec4:	f7f7 fe36 	bl	eb34 <radio_disable>
		conn = _radio.advertiser.conn;
   16ec8:	f8d6 40c8 	ldr.w	r4, [r6, #200]	; 0xc8
		_radio.advertiser.conn = NULL;
   16ecc:	2300      	movs	r3, #0
   16ece:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   16ed2:	f44f 72aa 	mov.w	r2, #340	; 0x154
   16ed6:	f8d6 1104 	ldr.w	r1, [r6, #260]	; 0x104
   16eda:	4620      	mov	r0, r4
   16edc:	f7f7 fc55 	bl	e78a <mem_index_get>
   16ee0:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
   16ee2:	2203      	movs	r2, #3
   16ee4:	f108 0112 	add.w	r1, r8, #18
   16ee8:	f104 0014 	add.w	r0, r4, #20
   16eec:	f7e9 f9e8 	bl	2c0 <memcpy>
		memcpy(&conn->access_addr[0],
   16ef0:	f104 0a10 	add.w	sl, r4, #16
   16ef4:	464a      	mov	r2, r9
   16ef6:	f108 010e 	add.w	r1, r8, #14
   16efa:	4650      	mov	r0, sl
   16efc:	f7e9 f9e0 	bl	2c0 <memcpy>
		memcpy(&conn->data_chan_map[0],
   16f00:	f104 0617 	add.w	r6, r4, #23
   16f04:	2205      	movs	r2, #5
   16f06:	f108 011e 	add.w	r1, r8, #30
   16f0a:	4630      	mov	r0, r6
   16f0c:	f7e9 f9d8 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   16f10:	2105      	movs	r1, #5
   16f12:	4630      	mov	r0, r6
   16f14:	f7f7 fc7d 	bl	e812 <util_ones_count_get>
		conn->data_chan_count =
   16f18:	7f63      	ldrb	r3, [r4, #29]
   16f1a:	f360 0305 	bfi	r3, r0, #0, #6
   16f1e:	7763      	strb	r3, [r4, #29]
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
   16f20:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   16f24:	f3c3 0304 	ubfx	r3, r3, #0, #5
   16f28:	77a3      	strb	r3, [r4, #30]
			pdu_adv->payload.connect_ind.lldata.interval;
   16f2a:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		conn->conn_interval =
   16f2e:	84a3      	strh	r3, [r4, #36]	; 0x24
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
   16f30:	f8b8 3018 	ldrh.w	r3, [r8, #24]
   16f34:	f240 46e2 	movw	r6, #1250	; 0x4e2
   16f38:	fb06 f603 	mul.w	r6, r6, r3
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
   16f3c:	f8b8 301a 	ldrh.w	r3, [r8, #26]
   16f40:	84e3      	strh	r3, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   16f42:	464a      	mov	r2, r9
   16f44:	4651      	mov	r1, sl
   16f46:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   16f4a:	f7e9 f9b9 	bl	2c0 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
   16f4e:	f8b8 301c 	ldrh.w	r3, [r8, #28]
   16f52:	f242 7210 	movw	r2, #10000	; 0x2710
   16f56:	fb02 6303 	mla	r3, r2, r3, r6
   16f5a:	3b01      	subs	r3, #1
   16f5c:	fbb3 f3f6 	udiv	r3, r3, r6
		conn->supervision_reload =
   16f60:	87e3      	strh	r3, [r4, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
   16f62:	4ba0      	ldr	r3, [pc, #640]	; (171e4 <isr_rx_adv+0x5fc>)
   16f64:	4433      	add	r3, r6
   16f66:	fbb3 f3f6 	udiv	r3, r3, r6
   16f6a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   16f6e:	4b9e      	ldr	r3, [pc, #632]	; (171e8 <isr_rx_adv+0x600>)
   16f70:	4433      	add	r3, r6
   16f72:	fbb3 f3f6 	udiv	r3, r3, r6
   16f76:	b29b      	uxth	r3, r3
   16f78:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   16f7c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   16f7e:	1d91      	adds	r1, r2, #6
   16f80:	428b      	cmp	r3, r1
   16f82:	dd03      	ble.n	16f8c <isr_rx_adv+0x3a4>
				     (conn->apto_reload - (conn->latency + 6)) :
   16f84:	1a9b      	subs	r3, r3, r2
   16f86:	b29b      	uxth	r3, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   16f88:	3b06      	subs	r3, #6
   16f8a:	b29b      	uxth	r3, r3
   16f8c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
		radio_pdu_node_rx->hdr.handle = conn->handle;
   16f90:	8c23      	ldrh	r3, [r4, #32]
   16f92:	80eb      	strh	r3, [r5, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   16f94:	2206      	movs	r2, #6
   16f96:	712a      	strb	r2, [r5, #4]
		radio_le_conn_cmplt->status = 0x00;
   16f98:	2300      	movs	r3, #0
   16f9a:	72eb      	strb	r3, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
   16f9c:	2301      	movs	r3, #1
   16f9e:	732b      	strb	r3, [r5, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   16fa0:	4641      	mov	r1, r8
   16fa2:	f811 3b08 	ldrb.w	r3, [r1], #8
   16fa6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   16faa:	76ab      	strb	r3, [r5, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   16fac:	f105 001b 	add.w	r0, r5, #27
   16fb0:	f7e9 f986 	bl	2c0 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
   16fb4:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   16fb8:	28ff      	cmp	r0, #255	; 0xff
   16fba:	f000 8147 	beq.w	1724c <isr_rx_adv+0x664>
			ll_rl_id_addr_get(rl_idx,
   16fbe:	f105 020e 	add.w	r2, r5, #14
   16fc2:	f105 010d 	add.w	r1, r5, #13
   16fc6:	f002 f85d 	bl	19084 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   16fca:	7b6b      	ldrb	r3, [r5, #13]
   16fcc:	3302      	adds	r3, #2
   16fce:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   16fd0:	2206      	movs	r2, #6
   16fd2:	f108 0102 	add.w	r1, r8, #2
   16fd6:	f105 0014 	add.w	r0, r5, #20
   16fda:	f7e9 f971 	bl	2c0 <memcpy>
			pdu_adv->payload.connect_ind.lldata.interval;
   16fde:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		radio_le_conn_cmplt->interval =
   16fe2:	f8a5 3021 	strh.w	r3, [r5, #33]	; 0x21
			pdu_adv->payload.connect_ind.lldata.latency;
   16fe6:	f8b8 301a 	ldrh.w	r3, [r8, #26]
		radio_le_conn_cmplt->latency =
   16fea:	f8a5 3023 	strh.w	r3, [r5, #35]	; 0x23
			pdu_adv->payload.connect_ind.lldata.timeout;
   16fee:	f8b8 301c 	ldrh.w	r3, [r8, #28]
		radio_le_conn_cmplt->timeout =
   16ff2:	f8a5 3025 	strh.w	r3, [r5, #37]	; 0x25
			pdu_adv->payload.connect_ind.lldata.sca;
   16ff6:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   16ffa:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   16ffe:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		rx_fc_lock(conn->handle);
   17002:	8c20      	ldrh	r0, [r4, #32]
   17004:	f7f9 fedc 	bl	10dc0 <rx_fc_lock>
		packet_rx_enqueue();
   17008:	f7fc fbc4 	bl	13794 <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   1700c:	4b74      	ldr	r3, [pc, #464]	; (171e0 <isr_rx_adv+0x5f8>)
   1700e:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17012:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17016:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   17018:	429a      	cmp	r2, r3
   1701a:	f0c0 8129 	bcc.w	17270 <isr_rx_adv+0x688>
			_radio.packet_rx_last);
   1701e:	4b70      	ldr	r3, [pc, #448]	; (171e0 <isr_rx_adv+0x5f8>)
   17020:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   17024:	1ad3      	subs	r3, r2, r3
   17026:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17028:	2b02      	cmp	r3, #2
   1702a:	f240 812b 	bls.w	17284 <isr_rx_adv+0x69c>
	return _radio.packet_rx[_radio.packet_rx_last];
   1702e:	4b6c      	ldr	r3, [pc, #432]	; (171e0 <isr_rx_adv+0x5f8>)
   17030:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   17034:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   1703c:	2b00      	cmp	r3, #0
   1703e:	f000 8123 	beq.w	17288 <isr_rx_adv+0x6a0>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   17042:	8c22      	ldrh	r2, [r4, #32]
   17044:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   17046:	220b      	movs	r2, #11
   17048:	711a      	strb	r2, [r3, #4]
			if (pdu_adv->chan_sel) {
   1704a:	f898 2000 	ldrb.w	r2, [r8]
   1704e:	f012 0f20 	tst.w	r2, #32
   17052:	f000 811f 	beq.w	17294 <isr_rx_adv+0x6ac>
					((u16_t)conn->access_addr[1] << 8) |
   17056:	7c61      	ldrb	r1, [r4, #17]
					conn->access_addr[0];
   17058:	7c22      	ldrb	r2, [r4, #16]
				u16_t aa_ls =
   1705a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   1705e:	7ce0      	ldrb	r0, [r4, #19]
					 conn->access_addr[2];
   17060:	7ca1      	ldrb	r1, [r4, #18]
				u16_t aa_ms =
   17062:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   17066:	7f60      	ldrb	r0, [r4, #29]
   17068:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1706c:	7760      	strb	r0, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   1706e:	404a      	eors	r2, r1
   17070:	83e2      	strh	r2, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   17072:	2201      	movs	r2, #1
   17074:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   17076:	f7fc fb8d 	bl	13794 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
   1707a:	f898 2023 	ldrb.w	r2, [r8, #35]	; 0x23
   1707e:	0952      	lsrs	r2, r2, #5
   17080:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   17084:	f362 0384 	bfi	r3, r2, #2, #3
   17088:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   1708c:	4d54      	ldr	r5, [pc, #336]	; (171e0 <isr_rx_adv+0x5f8>)
   1708e:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
   17092:	4956      	ldr	r1, [pc, #344]	; (171ec <isr_rx_adv+0x604>)
   17094:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
			   gc_lookup_ppm[conn->slave.sca]) *
   17098:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   1709c:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   1709e:	fb03 f306 	mul.w	r3, r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   170a2:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   170a6:	f203 233f 	addw	r3, r3, #575	; 0x23f
   170aa:	4a51      	ldr	r2, [pc, #324]	; (171f0 <isr_rx_adv+0x608>)
   170ac:	fba2 2303 	umull	r2, r3, r2, r3
   170b0:	0c9b      	lsrs	r3, r3, #18
		conn->slave.window_widening_periodic_us =
   170b2:	6563      	str	r3, [r4, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
   170b4:	0873      	lsrs	r3, r6, #1
   170b6:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   170b8:	65a3      	str	r3, [r4, #88]	; 0x58
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
   170ba:	f898 3015 	ldrb.w	r3, [r8, #21]
   170be:	f240 49e2 	movw	r9, #1250	; 0x4e2
   170c2:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
   170c6:	66a3      	str	r3, [r4, #104]	; 0x68
		conn->slave.window_size_prepare_us = 0;
   170c8:	f04f 0b00 	mov.w	fp, #0
   170cc:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0);
   170d0:	4658      	mov	r0, fp
   170d2:	f7f7 fd1b 	bl	eb0c <radio_rx_ready_delay_get>
   170d6:	4682      	mov	sl, r0
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   170d8:	f200 4052 	addw	r0, r0, #1106	; 0x452
   170dc:	a33e      	add	r3, pc, #248	; (adr r3, 171d8 <isr_rx_adv+0x5f0>)
   170de:	e9d3 2300 	ldrd	r2, r3, [r3]
   170e2:	4944      	ldr	r1, [pc, #272]	; (171f4 <isr_rx_adv+0x60c>)
   170e4:	fba0 0101 	umull	r0, r1, r0, r1
   170e8:	f7ea f808 	bl	10fc <__aeabi_uldivmod>
   170ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_slot =
   170f0:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   170f2:	f8d5 5180 	ldr.w	r5, [r5, #384]	; 0x180
   170f6:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
   170f8:	2327      	movs	r3, #39	; 0x27
   170fa:	6023      	str	r3, [r4, #0]
		conn->hdr.ticks_preempt_to_start =
   170fc:	f8c4 b008 	str.w	fp, [r4, #8]
		ticks_slot_offset =
   17100:	429d      	cmp	r5, r3
   17102:	bf38      	it	cc
   17104:	461d      	movcc	r5, r3
			conn->slave.window_widening_periodic_us;
   17106:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn_interval_us -=
   17108:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
   1710a:	f7f7 fee5 	bl	eed8 <radio_tmr_end_get>
			((u64_t)pdu_adv->payload.connect_ind.lldata.win_offset +
   1710e:	f8b8 2016 	ldrh.w	r2, [r8, #22]
   17112:	b292      	uxth	r2, r2
		conn_offset_us +=
   17114:	fb09 9902 	mla	r9, r9, r2, r9
   17118:	4481      	add	r9, r0
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   1711a:	4659      	mov	r1, fp
   1711c:	4658      	mov	r0, fp
   1711e:	f7f7 fcf3 	bl	eb08 <radio_tx_chain_delay_get>
   17122:	eba9 0000 	sub.w	r0, r9, r0
		conn_offset_us -= rx_ready_delay;
   17126:	eba0 0a0a 	sub.w	sl, r0, sl
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   1712a:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1712e:	f240 4372 	movw	r3, #1138	; 0x472
   17132:	9300      	str	r3, [sp, #0]
   17134:	4b30      	ldr	r3, [pc, #192]	; (171f8 <isr_rx_adv+0x610>)
   17136:	2205      	movs	r2, #5
   17138:	4659      	mov	r1, fp
   1713a:	4658      	mov	r0, fp
   1713c:	f7f9 f850 	bl	101e0 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   17140:	f240 4173 	movw	r1, #1139	; 0x473
   17144:	f7f9 fe84 	bl	10e50 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   17148:	79fb      	ldrb	r3, [r7, #7]
   1714a:	f003 030f 	and.w	r3, r3, #15
   1714e:	2b01      	cmp	r3, #1
   17150:	f000 80a3 	beq.w	1729a <isr_rx_adv+0x6b2>
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
   17154:	8c23      	ldrh	r3, [r4, #32]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17156:	3307      	adds	r3, #7
   17158:	b2db      	uxtb	r3, r3
   1715a:	930b      	str	r3, [sp, #44]	; 0x2c
		     (_radio.ticks_anchor - ticks_slot_offset),
   1715c:	4b20      	ldr	r3, [pc, #128]	; (171e0 <isr_rx_adv+0x5f8>)
   1715e:	685b      	ldr	r3, [r3, #4]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17160:	eba3 0905 	sub.w	r9, r3, r5
		     TICKER_US_TO_TICKS(conn_offset_us),
   17164:	f04f 0800 	mov.w	r8, #0
   17168:	4f22      	ldr	r7, [pc, #136]	; (171f4 <isr_rx_adv+0x60c>)
   1716a:	a31b      	add	r3, pc, #108	; (adr r3, 171d8 <isr_rx_adv+0x5f0>)
   1716c:	e9d3 2300 	ldrd	r2, r3, [r3]
   17170:	fbaa 0107 	umull	r0, r1, sl, r7
   17174:	f7e9 ffc2 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17178:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
		     TICKER_US_TO_TICKS(conn_interval_us),
   1717c:	fba6 6707 	umull	r6, r7, r6, r7
   17180:	a315      	add	r3, pc, #84	; (adr r3, 171d8 <isr_rx_adv+0x5f0>)
   17182:	e9d3 2300 	ldrd	r2, r3, [r3]
   17186:	4630      	mov	r0, r6
   17188:	4639      	mov	r1, r7
   1718a:	f7e9 ffb7 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1718e:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   17192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17196:	2100      	movs	r1, #0
   17198:	4a18      	ldr	r2, [pc, #96]	; (171fc <isr_rx_adv+0x614>)
   1719a:	2307      	movs	r3, #7
   1719c:	fb03 f300 	mul.w	r3, r3, r0
   171a0:	fb02 3301 	mla	r3, r2, r1, r3
   171a4:	fba0 0102 	umull	r0, r1, r0, r2
   171a8:	4419      	add	r1, r3
   171aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   171ae:	2300      	movs	r3, #0
   171b0:	1a30      	subs	r0, r6, r0
   171b2:	eb67 0101 	sbc.w	r1, r7, r1
   171b6:	f7e9 ffa1 	bl	10fc <__aeabi_uldivmod>
		     (ticks_slot_offset + conn->hdr.ticks_slot),
   171ba:	68e3      	ldr	r3, [r4, #12]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   171bc:	442b      	add	r3, r5
   171be:	b29b      	uxth	r3, r3
   171c0:	f240 428a 	movw	r2, #1162	; 0x48a
   171c4:	9208      	str	r2, [sp, #32]
   171c6:	4a0e      	ldr	r2, [pc, #56]	; (17200 <isr_rx_adv+0x618>)
   171c8:	9207      	str	r2, [sp, #28]
   171ca:	9406      	str	r4, [sp, #24]
   171cc:	4a0d      	ldr	r2, [pc, #52]	; (17204 <isr_rx_adv+0x61c>)
   171ce:	9205      	str	r2, [sp, #20]
   171d0:	e01a      	b.n	17208 <isr_rx_adv+0x620>
   171d2:	bf00      	nop
   171d4:	f3af 8000 	nop.w
   171d8:	1afd498d 	.word	0x1afd498d
   171dc:	00000007 	.word	0x00000007
   171e0:	20000dec 	.word	0x20000dec
   171e4:	026259ff 	.word	0x026259ff
   171e8:	01c9c37f 	.word	0x01c9c37f
   171ec:	0002ff04 	.word	0x0002ff04
   171f0:	431bde83 	.word	0x431bde83
   171f4:	3b9aca00 	.word	0x3b9aca00
   171f8:	00010e51 	.word	0x00010e51
   171fc:	1afd498d 	.word	0x1afd498d
   17200:	00010dfd 	.word	0x00010dfd
   17204:	000159b5 	.word	0x000159b5
   17208:	9304      	str	r3, [sp, #16]
   1720a:	f8cd 800c 	str.w	r8, [sp, #12]
   1720e:	9002      	str	r0, [sp, #8]
   17210:	f8cd b004 	str.w	fp, [sp, #4]
   17214:	f8cd a000 	str.w	sl, [sp]
   17218:	464b      	mov	r3, r9
   1721a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1721c:	4641      	mov	r1, r8
   1721e:	4640      	mov	r0, r8
   17220:	f7f8 ff42 	bl	100a8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17224:	4603      	mov	r3, r0
   17226:	2800      	cmp	r0, #0
   17228:	f43f acff 	beq.w	16c2a <isr_rx_adv+0x42>
   1722c:	2802      	cmp	r0, #2
   1722e:	d13d      	bne.n	172ac <isr_rx_adv+0x6c4>
		return 0;
   17230:	2300      	movs	r3, #0
   17232:	e4fa      	b.n	16c2a <isr_rx_adv+0x42>
		return (_radio.packet_rx_count -
   17234:	4923      	ldr	r1, [pc, #140]	; (172c4 <isr_rx_adv+0x6dc>)
   17236:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   1723a:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1723e:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   17240:	fa52 f383 	uxtab	r3, r2, r3
   17244:	b2db      	uxtb	r3, r3
   17246:	e62b      	b.n	16ea0 <isr_rx_adv+0x2b8>
		return 0;
   17248:	2500      	movs	r5, #0
   1724a:	e633      	b.n	16eb4 <isr_rx_adv+0x2cc>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   1724c:	2206      	movs	r2, #6
   1724e:	2100      	movs	r1, #0
   17250:	f105 0014 	add.w	r0, r5, #20
   17254:	f012 fa40 	bl	296d8 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   17258:	4641      	mov	r1, r8
   1725a:	f811 3b02 	ldrb.w	r3, [r1], #2
   1725e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17262:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   17264:	2206      	movs	r2, #6
   17266:	f105 000e 	add.w	r0, r5, #14
   1726a:	f7e9 f829 	bl	2c0 <memcpy>
   1726e:	e6b6      	b.n	16fde <isr_rx_adv+0x3f6>
		return (_radio.packet_rx_count -
   17270:	4914      	ldr	r1, [pc, #80]	; (172c4 <isr_rx_adv+0x6dc>)
   17272:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   17276:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1727a:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1727c:	fa52 f383 	uxtab	r3, r2, r3
   17280:	b2db      	uxtb	r3, r3
   17282:	e6d1      	b.n	17028 <isr_rx_adv+0x440>
		return 0;
   17284:	2300      	movs	r3, #0
   17286:	e6d9      	b.n	1703c <isr_rx_adv+0x454>
			LL_ASSERT(radio_pdu_node_rx);
   17288:	4040      	eors	r0, r0
   1728a:	f380 8811 	msr	BASEPRI, r0
   1728e:	f04f 0004 	mov.w	r0, #4
   17292:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   17294:	2200      	movs	r2, #0
   17296:	72da      	strb	r2, [r3, #11]
   17298:	e6ed      	b.n	17076 <isr_rx_adv+0x48e>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1729a:	4658      	mov	r0, fp
   1729c:	f8cd b000 	str.w	fp, [sp]
   172a0:	465b      	mov	r3, fp
   172a2:	2203      	movs	r2, #3
   172a4:	4659      	mov	r1, fp
   172a6:	f7f8 ff9b 	bl	101e0 <ticker_stop>
   172aa:	e753      	b.n	17154 <isr_rx_adv+0x56c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   172ac:	4040      	eors	r0, r0
   172ae:	f380 8811 	msr	BASEPRI, r0
   172b2:	f04f 0004 	mov.w	r0, #4
   172b6:	df02      	svc	2
	return 1;
   172b8:	2301      	movs	r3, #1
   172ba:	e4b6      	b.n	16c2a <isr_rx_adv+0x42>
   172bc:	2301      	movs	r3, #1
   172be:	e4b4      	b.n	16c2a <isr_rx_adv+0x42>
			return 1;
   172c0:	2301      	movs	r3, #1
   172c2:	e4b2      	b.n	16c2a <isr_rx_adv+0x42>
   172c4:	20000dec 	.word	0x20000dec

000172c8 <radio_init>:
{
   172c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   172cc:	f89d e018 	ldrb.w	lr, [sp, #24]
   172d0:	f8bd c01c 	ldrh.w	ip, [sp, #28]
   172d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   172d6:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	_radio.hf_clock = hf_clock;
   172da:	4c3b      	ldr	r4, [pc, #236]	; (173c8 <radio_init+0x100>)
   172dc:	6020      	str	r0, [r4, #0]
	_radio.sca = sca;
   172de:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
	mem_radio_end = mem_radio + mem_size;
   172e2:	19a8      	adds	r0, r5, r6
	_radio.connection_count = connection_count_max;
   172e4:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
	_radio.conn_pool = mem_radio;
   172e8:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   172ec:	f44f 71aa 	mov.w	r1, #340	; 0x154
   172f0:	fb01 5102 	mla	r1, r1, r2, r5
	rx_count_max += 3;
   172f4:	f103 0803 	add.w	r8, r3, #3
   172f8:	fa5f f888 	uxtb.w	r8, r8
	tx_count_max += 1;
   172fc:	f10e 0701 	add.w	r7, lr, #1
   17300:	b2ff      	uxtb	r7, r7
	_radio.packet_rx_count = (rx_count_max + 1);
   17302:	3304      	adds	r3, #4
   17304:	b2dd      	uxtb	r5, r3
   17306:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
	_radio.packet_tx_count = (tx_count_max + 1);
   1730a:	f10e 0e02 	add.w	lr, lr, #2
   1730e:	fa5f fe8e 	uxtb.w	lr, lr
   17312:	f884 e170 	strb.w	lr, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = rx_count_max;
   17316:	f884 8150 	strb.w	r8, [r4, #336]	; 0x150
	_radio.packet_rx = (void *)mem_radio;
   1731a:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
	mem_radio +=
   1731e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
	_radio.pkt_tx = (void *)mem_radio;
   17322:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   17326:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   1732a:	4471      	add	r1, lr
	_radio.pkt_release = (void *)mem_radio;
   1732c:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   17330:	4471      	add	r1, lr
	_radio.packet_data_octets_max = packet_data_octets_max;
   17332:	f8a4 c130 	strh.w	ip, [r4, #304]	; 0x130
	    (offsetof(struct pdu_data, payload) +
   17336:	f10c 0303 	add.w	r3, ip, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   1733a:	2b2a      	cmp	r3, #42	; 0x2a
   1733c:	d931      	bls.n	173a2 <radio_init+0xda>
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   1733e:	f10c 0c0e 	add.w	ip, ip, #14
		_radio.packet_rx_data_pool_size =
   17342:	f02c 0c03 	bic.w	ip, ip, #3
   17346:	fb1c f808 	smulbb	r8, ip, r8
   1734a:	f8a4 8132 	strh.w	r8, [r4, #306]	; 0x132
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   1734e:	4c1e      	ldr	r4, [pc, #120]	; (173c8 <radio_init+0x100>)
   17350:	2334      	movs	r3, #52	; 0x34
   17352:	f8a4 3134 	strh.w	r3, [r4, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   17356:	f8b4 e132 	ldrh.w	lr, [r4, #306]	; 0x132
   1735a:	4b1c      	ldr	r3, [pc, #112]	; (173cc <radio_init+0x104>)
   1735c:	fba3 c30e 	umull	ip, r3, r3, lr
   17360:	091b      	lsrs	r3, r3, #4
   17362:	f884 3136 	strb.w	r3, [r4, #310]	; 0x136
	_radio.pkt_rx_data_pool = mem_radio;
   17366:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
	mem_radio += _radio.packet_rx_data_pool_size;
   1736a:	4471      	add	r1, lr
	_radio.link_rx_pool = mem_radio;
   1736c:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   17370:	442a      	add	r2, r5
   17372:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	_radio.pkt_tx_ctrl_pool = mem_radio;
   17376:	f8c4 2154 	str.w	r2, [r4, #340]	; 0x154
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   1737a:	3248      	adds	r2, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1737c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   17380:	330a      	adds	r3, #10
   17382:	b29b      	uxth	r3, r3
   17384:	f023 0303 	bic.w	r3, r3, #3
   17388:	b29b      	uxth	r3, r3
	_radio.packet_tx_data_size =
   1738a:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
	_radio.pkt_tx_data_pool = mem_radio;
   1738e:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   17392:	fb03 2707 	mla	r7, r3, r7, r2
	if (retcode) {
   17396:	1a3f      	subs	r7, r7, r0
   17398:	d00d      	beq.n	173b6 <radio_init+0xee>
		return (retcode + mem_size);
   1739a:	4437      	add	r7, r6
}
   1739c:	4638      	mov	r0, r7
   1739e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   173a2:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   173a6:	eb08 0883 	add.w	r8, r8, r3, lsl #2
   173aa:	ea4f 0388 	mov.w	r3, r8, lsl #2
		_radio.packet_rx_data_pool_size =
   173ae:	4c06      	ldr	r4, [pc, #24]	; (173c8 <radio_init+0x100>)
   173b0:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
   173b4:	e7cb      	b.n	1734e <radio_init+0x86>
	_radio.fc_ena = 1;
   173b6:	2201      	movs	r2, #1
   173b8:	4b03      	ldr	r3, [pc, #12]	; (173c8 <radio_init+0x100>)
   173ba:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
	common_init();
   173be:	f7ec ff23 	bl	4208 <common_init>
	radio_setup();
   173c2:	f7f7 faef 	bl	e9a4 <radio_setup>
	return retcode;
   173c6:	e7e9      	b.n	1739c <radio_init+0xd4>
   173c8:	20000dec 	.word	0x20000dec
   173cc:	4ec4ec4f 	.word	0x4ec4ec4f

000173d0 <ll_reset>:
{
   173d0:	b510      	push	{r4, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   173d2:	2103      	movs	r1, #3
   173d4:	2005      	movs	r0, #5
   173d6:	f7f9 ff9b 	bl	11310 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   173da:	2104      	movs	r1, #4
   173dc:	2006      	movs	r0, #6
   173de:	f7f9 ff97 	bl	11310 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   173e2:	2400      	movs	r4, #0
   173e4:	e006      	b.n	173f4 <ll_reset+0x24>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   173e6:	1de0      	adds	r0, r4, #7
   173e8:	21ff      	movs	r1, #255	; 0xff
   173ea:	b2c0      	uxtb	r0, r0
   173ec:	f7f9 ff90 	bl	11310 <role_disable>
	     conn_handle++) {
   173f0:	3401      	adds	r4, #1
   173f2:	b2a4      	uxth	r4, r4
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   173f4:	4b1d      	ldr	r3, [pc, #116]	; (1746c <ll_reset+0x9c>)
   173f6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   173fa:	429c      	cmp	r4, r3
   173fc:	d3f3      	bcc.n	173e6 <ll_reset+0x16>
	_radio.advertiser.is_enabled = 0;
   173fe:	4b1b      	ldr	r3, [pc, #108]	; (1746c <ll_reset+0x9c>)
   17400:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   17404:	f36f 0200 	bfc	r2, #0, #1
   17408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	_radio.advertiser.conn = NULL;
   1740c:	2000      	movs	r0, #0
   1740e:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
	_radio.scanner.is_enabled = 0;
   17412:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   17416:	f360 0200 	bfi	r2, r0, #0, #1
   1741a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	_radio.scanner.conn = NULL;
   1741e:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   17422:	2234      	movs	r2, #52	; 0x34
   17424:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   17428:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
   1742c:	4910      	ldr	r1, [pc, #64]	; (17470 <ll_reset+0xa0>)
   1742e:	fba1 1202 	umull	r1, r2, r1, r2
   17432:	0912      	lsrs	r2, r2, #4
   17434:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	_radio.packet_rx_last = 0;
   17438:	f883 013d 	strb.w	r0, [r3, #317]	; 0x13d
	_radio.packet_rx_acquire = 0;
   1743c:	f883 013e 	strb.w	r0, [r3, #318]	; 0x13e
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   17440:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
   17444:	3a01      	subs	r2, #1
   17446:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	_radio.packet_tx_first = 0;
   1744a:	f883 0171 	strb.w	r0, [r3, #369]	; 0x171
	_radio.packet_tx_last = 0;
   1744e:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
	_radio.packet_release_first = 0;
   17452:	f883 0173 	strb.w	r0, [r3, #371]	; 0x173
	_radio.packet_release_last = 0;
   17456:	f883 0174 	strb.w	r0, [r3, #372]	; 0x174
	_radio.fc_ack = _radio.fc_req;
   1745a:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   1745e:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	ll_filter_reset(false);
   17462:	f002 fa69 	bl	19938 <ll_filter_reset>
	common_init();
   17466:	f7ec fecf 	bl	4208 <common_init>
   1746a:	bd10      	pop	{r4, pc}
   1746c:	20000dec 	.word	0x20000dec
   17470:	4ec4ec4f 	.word	0x4ec4ec4f

00017474 <radio_adv_data_get>:
}
   17474:	4800      	ldr	r0, [pc, #0]	; (17478 <radio_adv_data_get+0x4>)
   17476:	4770      	bx	lr
   17478:	20000e13 	.word	0x20000e13

0001747c <radio_scan_data_get>:
}
   1747c:	4800      	ldr	r0, [pc, #0]	; (17480 <radio_scan_data_get+0x4>)
   1747e:	4770      	bx	lr
   17480:	20000e63 	.word	0x20000e63

00017484 <radio_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   17484:	4b02      	ldr	r3, [pc, #8]	; (17490 <radio_adv_is_enabled+0xc>)
   17486:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
}
   1748a:	f000 0001 	and.w	r0, r0, #1
   1748e:	4770      	bx	lr
   17490:	20000dec 	.word	0x20000dec

00017494 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   17494:	4b06      	ldr	r3, [pc, #24]	; (174b0 <radio_adv_filter_pol_get+0x1c>)
   17496:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1749a:	f013 0f01 	tst.w	r3, #1
   1749e:	d004      	beq.n	174aa <radio_adv_filter_pol_get+0x16>
		return _radio.advertiser.filter_policy;
   174a0:	4b03      	ldr	r3, [pc, #12]	; (174b0 <radio_adv_filter_pol_get+0x1c>)
   174a2:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   174a6:	0980      	lsrs	r0, r0, #6
   174a8:	4770      	bx	lr
	return 0;
   174aa:	2000      	movs	r0, #0
}
   174ac:	4770      	bx	lr
   174ae:	bf00      	nop
   174b0:	20000dec 	.word	0x20000dec

000174b4 <radio_scan_is_enabled>:
	return _radio.scanner.is_enabled;
   174b4:	4b02      	ldr	r3, [pc, #8]	; (174c0 <radio_scan_is_enabled+0xc>)
   174b6:	f893 00dc 	ldrb.w	r0, [r3, #220]	; 0xdc
}
   174ba:	f000 0001 	and.w	r0, r0, #1
   174be:	4770      	bx	lr
   174c0:	20000dec 	.word	0x20000dec

000174c4 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   174c4:	4b06      	ldr	r3, [pc, #24]	; (174e0 <radio_scan_filter_pol_get+0x1c>)
   174c6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   174ca:	f013 0f01 	tst.w	r3, #1
   174ce:	d005      	beq.n	174dc <radio_scan_filter_pol_get+0x18>
		return _radio.scanner.filter_policy;
   174d0:	4b03      	ldr	r3, [pc, #12]	; (174e0 <radio_scan_filter_pol_get+0x1c>)
   174d2:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
   174d6:	f3c0 1001 	ubfx	r0, r0, #4, #2
   174da:	4770      	bx	lr
	return 0;
   174dc:	2000      	movs	r0, #0
}
   174de:	4770      	bx	lr
   174e0:	20000dec 	.word	0x20000dec
   174e4:	00000000 	.word	0x00000000

000174e8 <radio_connect_enable>:
{
   174e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   174ec:	b083      	sub	sp, #12
	if (_radio.scanner.conn) {
   174ee:	4c94      	ldr	r4, [pc, #592]	; (17740 <radio_connect_enable+0x258>)
   174f0:	f8d4 40fc 	ldr.w	r4, [r4, #252]	; 0xfc
   174f4:	b11c      	cbz	r4, 174fe <radio_connect_enable+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   174f6:	200c      	movs	r0, #12
}
   174f8:	b003      	add	sp, #12
   174fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   174fe:	461f      	mov	r7, r3
   17500:	4616      	mov	r6, r2
   17502:	460d      	mov	r5, r1
   17504:	4604      	mov	r4, r0
	link = mem_acquire(&_radio.link_rx_free);
   17506:	488f      	ldr	r0, [pc, #572]	; (17744 <radio_connect_enable+0x25c>)
   17508:	f7f7 f8ff 	bl	e70a <mem_acquire>
	if (!link) {
   1750c:	4681      	mov	r9, r0
   1750e:	2800      	cmp	r0, #0
   17510:	f000 810f 	beq.w	17732 <radio_connect_enable+0x24a>
	conn = mem_acquire(&_radio.conn_free);
   17514:	488c      	ldr	r0, [pc, #560]	; (17748 <radio_connect_enable+0x260>)
   17516:	f7f7 f8f8 	bl	e70a <mem_acquire>
   1751a:	9001      	str	r0, [sp, #4]
	if (!conn) {
   1751c:	2800      	cmp	r0, #0
   1751e:	f000 8102 	beq.w	17726 <radio_connect_enable+0x23e>
	_radio.scanner.adv_addr_type = adv_addr_type;
   17522:	f8df 821c 	ldr.w	r8, [pc, #540]	; 17740 <radio_connect_enable+0x258>
   17526:	f898 30dd 	ldrb.w	r3, [r8, #221]	; 0xdd
   1752a:	f364 1386 	bfi	r3, r4, #6, #1
   1752e:	f888 30dd 	strb.w	r3, [r8, #221]	; 0xdd
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   17532:	2206      	movs	r2, #6
   17534:	4629      	mov	r1, r5
   17536:	f108 00e6 	add.w	r0, r8, #230	; 0xe6
   1753a:	f7e8 fec1 	bl	2c0 <memcpy>
	_radio.scanner.conn_interval = interval;
   1753e:	f8a8 60f0 	strh.w	r6, [r8, #240]	; 0xf0
	_radio.scanner.conn_latency = latency;
   17542:	f8a8 70f2 	strh.w	r7, [r8, #242]	; 0xf2
	_radio.scanner.conn_timeout = timeout;
   17546:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1754a:	f8a8 30f4 	strh.w	r3, [r8, #244]	; 0xf4
		TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   1754e:	2100      	movs	r1, #0
   17550:	4608      	mov	r0, r1
   17552:	f7f7 fad7 	bl	eb04 <radio_tx_ready_delay_get>
   17556:	f200 4052 	addw	r0, r0, #1106	; 0x452
   1755a:	2400      	movs	r4, #0
   1755c:	a376      	add	r3, pc, #472	; (adr r3, 17738 <radio_connect_enable+0x250>)
   1755e:	e9d3 2300 	ldrd	r2, r3, [r3]
   17562:	497a      	ldr	r1, [pc, #488]	; (1774c <radio_connect_enable+0x264>)
   17564:	fba0 0101 	umull	r0, r1, r0, r1
   17568:	f7e9 fdc8 	bl	10fc <__aeabi_uldivmod>
   1756c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_conn_slot =
   17570:	f8c8 00f8 	str.w	r0, [r8, #248]	; 0xf8
	conn->handle = 0xFFFF;
   17574:	9b01      	ldr	r3, [sp, #4]
   17576:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1757a:	841a      	strh	r2, [r3, #32]
	conn->llcp_features = RADIO_BLE_FEAT;
   1757c:	f502 4284 	add.w	r2, r2, #16896	; 0x4200
   17580:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	access_addr = access_addr_get();
   17584:	f7fe fe84 	bl	16290 <access_addr_get>
   17588:	9000      	str	r0, [sp, #0]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   1758a:	2204      	movs	r2, #4
   1758c:	4669      	mov	r1, sp
   1758e:	9801      	ldr	r0, [sp, #4]
   17590:	3010      	adds	r0, #16
   17592:	f7e8 fe95 	bl	2c0 <memcpy>
	memcpy(&conn->crc_init[0], &conn, 3);
   17596:	a902      	add	r1, sp, #8
   17598:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   1759c:	2203      	movs	r2, #3
   1759e:	3014      	adds	r0, #20
   175a0:	f7e8 fe8e 	bl	2c0 <memcpy>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   175a4:	2205      	movs	r2, #5
   175a6:	f508 718b 	add.w	r1, r8, #278	; 0x116
   175aa:	9801      	ldr	r0, [sp, #4]
   175ac:	3017      	adds	r0, #23
   175ae:	f7e8 fe87 	bl	2c0 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   175b2:	9b01      	ldr	r3, [sp, #4]
   175b4:	f898 111b 	ldrb.w	r1, [r8, #283]	; 0x11b
   175b8:	7f5a      	ldrb	r2, [r3, #29]
   175ba:	f361 0205 	bfi	r2, r1, #0, #6
	conn->data_chan_sel = 0;
   175be:	f364 1286 	bfi	r2, r4, #6, #1
   175c2:	775a      	strb	r2, [r3, #29]
	conn->data_chan_hop = 6;
   175c4:	2506      	movs	r5, #6
   175c6:	779d      	strb	r5, [r3, #30]
	conn->data_chan_use = 0;
   175c8:	77dc      	strb	r4, [r3, #31]
	conn->event_counter = 0;
   175ca:	845c      	strh	r4, [r3, #34]	; 0x22
	conn->conn_interval = _radio.scanner.conn_interval;
   175cc:	f8b8 20f0 	ldrh.w	r2, [r8, #240]	; 0xf0
   175d0:	849a      	strh	r2, [r3, #36]	; 0x24
	conn->latency_prepare = 0;
   175d2:	851c      	strh	r4, [r3, #40]	; 0x28
	conn->latency_event = 0;
   175d4:	855c      	strh	r4, [r3, #42]	; 0x2a
	conn->latency = _radio.scanner.conn_latency;
   175d6:	f8b8 00f2 	ldrh.w	r0, [r8, #242]	; 0xf2
   175da:	84d8      	strh	r0, [r3, #38]	; 0x26
	conn->default_tx_octets = _radio.default_tx_octets;
   175dc:	f8b8 211e 	ldrh.w	r2, [r8, #286]	; 0x11e
   175e0:	859a      	strh	r2, [r3, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   175e2:	221b      	movs	r2, #27
   175e4:	85da      	strh	r2, [r3, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   175e6:	861a      	strh	r2, [r3, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   175e8:	f8b8 2120 	ldrh.w	r2, [r8, #288]	; 0x120
   175ec:	865a      	strh	r2, [r3, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   175ee:	f44f 72a4 	mov.w	r2, #328	; 0x148
   175f2:	869a      	strh	r2, [r3, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   175f4:	86da      	strh	r2, [r3, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   175f6:	f898 1122 	ldrb.w	r1, [r8, #290]	; 0x122
   175fa:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   175fe:	f361 0202 	bfi	r2, r1, #0, #3
	conn->phy_tx = BIT(0);
   17602:	2101      	movs	r1, #1
   17604:	f361 02c5 	bfi	r2, r1, #3, #3
	conn->phy_flags = 0;
   17608:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   1760c:	f364 12c7 	bfi	r2, r4, #7, #1
   17610:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   17614:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   17618:	f361 0202 	bfi	r2, r1, #0, #3
   1761c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   17620:	f898 6124 	ldrb.w	r6, [r8, #292]	; 0x124
   17624:	b2d2      	uxtb	r2, r2
   17626:	f366 02c5 	bfi	r2, r6, #3, #3
   1762a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_rx = BIT(0);
   1762e:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   17632:	f361 0202 	bfi	r2, r1, #0, #3
   17636:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	conn->role = 0;
   1763a:	7f5a      	ldrb	r2, [r3, #29]
   1763c:	f364 12c7 	bfi	r2, r4, #7, #1
   17640:	775a      	strb	r2, [r3, #29]
	conn->connect_expire = 6;
   17642:	879d      	strh	r5, [r3, #60]	; 0x3c
	conn->common.fex_valid = 0;
   17644:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	conn->master.terminate_ack = 0;
   17648:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   1764c:	f364 0200 	bfi	r2, r4, #0, #1
   17650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		(u32_t)_radio.scanner.conn_interval * 1250;
   17654:	f8b8 10f0 	ldrh.w	r1, [r8, #240]	; 0xf0
	conn_interval_us =
   17658:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1765c:	fb02 f101 	mul.w	r1, r2, r1
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   17660:	f8b8 20f4 	ldrh.w	r2, [r8, #244]	; 0xf4
   17664:	f242 7510 	movw	r5, #10000	; 0x2710
   17668:	fb05 1202 	mla	r2, r5, r2, r1
   1766c:	3a01      	subs	r2, #1
   1766e:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->supervision_reload =
   17672:	87da      	strh	r2, [r3, #62]	; 0x3e
	conn->supervision_expire = 0;
   17674:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   17678:	4a35      	ldr	r2, [pc, #212]	; (17750 <radio_connect_enable+0x268>)
   1767a:	440a      	add	r2, r1
   1767c:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->procedure_reload =
   17680:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	conn->procedure_expire = 0;
   17684:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   17688:	4a32      	ldr	r2, [pc, #200]	; (17754 <radio_connect_enable+0x26c>)
   1768a:	440a      	add	r2, r1
   1768c:	fbb2 f2f1 	udiv	r2, r2, r1
   17690:	b292      	uxth	r2, r2
   17692:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   17696:	1d81      	adds	r1, r0, #6
   17698:	428a      	cmp	r2, r1
   1769a:	dd03      	ble.n	176a4 <radio_connect_enable+0x1bc>
			     (conn->apto_reload - (conn->latency + 6)) :
   1769c:	1a12      	subs	r2, r2, r0
   1769e:	b292      	uxth	r2, r2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   176a0:	3a06      	subs	r2, #6
   176a2:	b292      	uxth	r2, r2
   176a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	conn->apto_expire = 0;
   176a8:	2000      	movs	r0, #0
   176aa:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
	conn->appto_expire = 0;
   176ae:	f8a3 0048 	strh.w	r0, [r3, #72]	; 0x48
	conn->llcp_req = 0;
   176b2:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
	conn->llcp_ack = 0;
   176b6:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
	conn->llcp_version.tx = 0;
   176ba:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_version.rx = 0;
   176be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   176c2:	f360 0241 	bfi	r2, r0, #1, #1
   176c6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_terminate.req = 0;
   176ca:	f883 00b0 	strb.w	r0, [r3, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   176ce:	f883 00b1 	strb.w	r0, [r3, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   176d2:	f883 00b3 	strb.w	r0, [r3, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   176d6:	f8c3 90b4 	str.w	r9, [r3, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   176da:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   176de:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
	conn->llcp_length.req = 0;
   176e2:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   176e6:	f883 00e9 	strb.w	r0, [r3, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   176ea:	f883 00f4 	strb.w	r0, [r3, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   176ee:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
	conn->sn = 0;
   176f2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	conn->empty = 0;
   176f6:	f002 0280 	and.w	r2, r2, #128	; 0x80
   176fa:	f360 12c7 	bfi	r2, r0, #7, #1
   176fe:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   17702:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   17706:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   1770a:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   1770e:	f8c3 0148 	str.w	r0, [r3, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   17712:	f8c3 014c 	str.w	r0, [r3, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   17716:	f883 0150 	strb.w	r0, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   1771a:	f883 0151 	strb.w	r0, [r3, #337]	; 0x151
	_radio.scanner.conn = conn;
   1771e:	4a08      	ldr	r2, [pc, #32]	; (17740 <radio_connect_enable+0x258>)
   17720:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
	return 0;
   17724:	e6e8      	b.n	174f8 <radio_connect_enable+0x10>
		mem_release(link, &_radio.link_rx_free);
   17726:	4907      	ldr	r1, [pc, #28]	; (17744 <radio_connect_enable+0x25c>)
   17728:	4648      	mov	r0, r9
   1772a:	f7f7 f80a 	bl	e742 <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1772e:	2007      	movs	r0, #7
   17730:	e6e2      	b.n	174f8 <radio_connect_enable+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   17732:	2007      	movs	r0, #7
   17734:	e6e0      	b.n	174f8 <radio_connect_enable+0x10>
   17736:	bf00      	nop
   17738:	1afd498d 	.word	0x1afd498d
   1773c:	00000007 	.word	0x00000007
   17740:	20000dec 	.word	0x20000dec
   17744:	20000f30 	.word	0x20000f30
   17748:	20000ef4 	.word	0x20000ef4
   1774c:	3b9aca00 	.word	0x3b9aca00
   17750:	026259ff 	.word	0x026259ff
   17754:	01c9c37f 	.word	0x01c9c37f

00017758 <ll_conn_update>:
{
   17758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1775c:	460c      	mov	r4, r1
   1775e:	4690      	mov	r8, r2
   17760:	461f      	mov	r7, r3
   17762:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   17766:	f8bd 501c 	ldrh.w	r5, [sp, #28]
	conn = connection_get(handle);
   1776a:	f7f9 fdb3 	bl	112d4 <connection_get>
	if (!conn) {
   1776e:	2800      	cmp	r0, #0
   17770:	d078      	beq.n	17864 <ll_conn_update+0x10c>
   17772:	4603      	mov	r3, r0
	if (!cmd) {
   17774:	b984      	cbnz	r4, 17798 <ll_conn_update+0x40>
		if (conn->common.fex_valid &&
   17776:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   1777a:	f012 0f20 	tst.w	r2, #32
   1777e:	d007      	beq.n	17790 <ll_conn_update+0x38>
		    (conn->llcp_features &
   17780:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
		if (conn->common.fex_valid &&
   17784:	f012 0f02 	tst.w	r2, #2
   17788:	d002      	beq.n	17790 <ll_conn_update+0x38>
			cmd++;
   1778a:	3401      	adds	r4, #1
   1778c:	b2e4      	uxtb	r4, r4
   1778e:	e003      	b.n	17798 <ll_conn_update+0x40>
		} else if (conn->role) {
   17790:	f993 201d 	ldrsb.w	r2, [r3, #29]
   17794:	2a00      	cmp	r2, #0
   17796:	db68      	blt.n	1786a <ll_conn_update+0x112>
	if (!cmd) {
   17798:	bb1c      	cbnz	r4, 177e2 <ll_conn_update+0x8a>
		if (conn->llcp_req != conn->llcp_ack) {
   1779a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   1779e:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
   177a2:	428a      	cmp	r2, r1
   177a4:	d002      	beq.n	177ac <ll_conn_update+0x54>
			return 1;
   177a6:	2001      	movs	r0, #1
   177a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->llcp.conn_upd.win_size = 1;
   177ac:	2401      	movs	r4, #1
   177ae:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   177b2:	2000      	movs	r0, #0
   177b4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = interval;
   177b8:	f8a3 707a 	strh.w	r7, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = latency;
   177bc:	f8a3 607c 	strh.w	r6, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   177c0:	f8a3 507e 	strh.w	r5, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   177c4:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   177c8:	f364 0101 	bfi	r1, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   177cc:	f360 0182 	bfi	r1, r0, #2, #1
   177d0:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   177d4:	f883 4076 	strb.w	r4, [r3, #118]	; 0x76
		conn->llcp_req++;
   177d8:	4422      	add	r2, r4
   177da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   177de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cmd--;
   177e2:	3c01      	subs	r4, #1
		if (cmd) {
   177e4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   177e8:	d01c      	beq.n	17824 <ll_conn_update+0xcc>
			if ((conn->llcp_conn_param.req ==
   177ea:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
			     conn->llcp_conn_param.ack) ||
   177ee:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
			if ((conn->llcp_conn_param.req ==
   177f2:	4291      	cmp	r1, r2
   177f4:	d03c      	beq.n	17870 <ll_conn_update+0x118>
			    (conn->llcp_conn_param.state !=
   177f6:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   177fa:	f002 0207 	and.w	r2, r2, #7
			     conn->llcp_conn_param.ack) ||
   177fe:	2a03      	cmp	r2, #3
   17800:	d002      	beq.n	17808 <ll_conn_update+0xb0>
				return 1;
   17802:	2001      	movs	r0, #1
   17804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = status;
   17808:	f883 80c3 	strb.w	r8, [r3, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   1780c:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   17810:	f364 0202 	bfi	r2, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   17814:	b2d2      	uxtb	r2, r2
   17816:	f042 0208 	orr.w	r2, r2, #8
   1781a:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	return 0;
   1781e:	2000      	movs	r0, #0
   17820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (conn->llcp_conn_param.req !=
   17824:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
			    conn->llcp_conn_param.ack) {
   17828:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			if (conn->llcp_conn_param.req !=
   1782c:	428a      	cmp	r2, r1
   1782e:	d002      	beq.n	17836 <ll_conn_update+0xde>
				return 1;
   17830:	2001      	movs	r0, #1
}
   17832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = 0;
   17836:	2000      	movs	r0, #0
   17838:	f883 00c3 	strb.w	r0, [r3, #195]	; 0xc3
			conn->llcp_conn_param.interval = interval;
   1783c:	f8a3 70c4 	strh.w	r7, [r3, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   17840:	f8a3 60c6 	strh.w	r6, [r3, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   17844:	f8a3 50c8 	strh.w	r5, [r3, #200]	; 0xc8
			conn->llcp_conn_param.state = cmd;
   17848:	f893 10c2 	ldrb.w	r1, [r3, #194]	; 0xc2
   1784c:	f364 0102 	bfi	r1, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   17850:	b2c9      	uxtb	r1, r1
   17852:	f041 0108 	orr.w	r1, r1, #8
   17856:	f883 10c2 	strb.w	r1, [r3, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   1785a:	3201      	adds	r2, #1
   1785c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
   17860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 1;
   17864:	2001      	movs	r0, #1
   17866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return 1;
   1786a:	2001      	movs	r0, #1
   1786c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return 1;
   17870:	2001      	movs	r0, #1
   17872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00017878 <ll_chm_update>:
{
   17878:	b570      	push	{r4, r5, r6, lr}
   1787a:	4606      	mov	r6, r0
	memcpy(&_radio.data_chan_map[0], chm,
   1787c:	4c1c      	ldr	r4, [pc, #112]	; (178f0 <ll_chm_update+0x78>)
   1787e:	f504 758b 	add.w	r5, r4, #278	; 0x116
   17882:	2205      	movs	r2, #5
   17884:	4601      	mov	r1, r0
   17886:	4628      	mov	r0, r5
   17888:	f7e8 fd1a 	bl	2c0 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   1788c:	2105      	movs	r1, #5
   1788e:	4628      	mov	r0, r5
   17890:	f7f6 ffbf 	bl	e812 <util_ones_count_get>
	_radio.data_chan_count =
   17894:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	instance = _radio.connection_count;
   17898:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
	while (instance--) {
   1789c:	e000      	b.n	178a0 <ll_chm_update+0x28>
{
   1789e:	462b      	mov	r3, r5
	while (instance--) {
   178a0:	1e5d      	subs	r5, r3, #1
   178a2:	b2ed      	uxtb	r5, r5
   178a4:	b303      	cbz	r3, 178e8 <ll_chm_update+0x70>
		conn = connection_get(instance);
   178a6:	4628      	mov	r0, r5
   178a8:	f7f9 fd14 	bl	112d4 <connection_get>
		if (!conn || conn->role) {
   178ac:	4604      	mov	r4, r0
   178ae:	2800      	cmp	r0, #0
   178b0:	d0f5      	beq.n	1789e <ll_chm_update+0x26>
   178b2:	f990 301d 	ldrsb.w	r3, [r0, #29]
   178b6:	2b00      	cmp	r3, #0
   178b8:	dbf1      	blt.n	1789e <ll_chm_update+0x26>
		if (conn->llcp_req != conn->llcp_ack) {
   178ba:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   178be:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   178c2:	429a      	cmp	r2, r3
   178c4:	d112      	bne.n	178ec <ll_chm_update+0x74>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   178c6:	2205      	movs	r2, #5
   178c8:	4631      	mov	r1, r6
   178ca:	3079      	adds	r0, #121	; 0x79
   178cc:	f7e8 fcf8 	bl	2c0 <memcpy>
		conn->llcp.chan_map.initiate = 1;
   178d0:	2301      	movs	r3, #1
   178d2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CHAN_MAP;
   178d6:	2302      	movs	r3, #2
   178d8:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_req++;
   178dc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   178e0:	3301      	adds	r3, #1
   178e2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   178e6:	e7da      	b.n	1789e <ll_chm_update+0x26>
	return 0;
   178e8:	2000      	movs	r0, #0
   178ea:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   178ec:	2001      	movs	r0, #1
}
   178ee:	bd70      	pop	{r4, r5, r6, pc}
   178f0:	20000dec 	.word	0x20000dec

000178f4 <ll_chm_get>:
{
   178f4:	b538      	push	{r3, r4, r5, lr}
   178f6:	460d      	mov	r5, r1
	conn = connection_get(handle);
   178f8:	f7f9 fcec 	bl	112d4 <connection_get>
	if (!conn) {
   178fc:	4604      	mov	r4, r0
   178fe:	b160      	cbz	r0, 1791a <ll_chm_get+0x26>
		conn->chm_update = 0;
   17900:	2300      	movs	r3, #0
   17902:	7723      	strb	r3, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   17904:	2205      	movs	r2, #5
   17906:	f104 0117 	add.w	r1, r4, #23
   1790a:	4628      	mov	r0, r5
   1790c:	f7e8 fcd8 	bl	2c0 <memcpy>
	} while (conn->chm_update);
   17910:	7f23      	ldrb	r3, [r4, #28]
   17912:	2b00      	cmp	r3, #0
   17914:	d1f4      	bne.n	17900 <ll_chm_get+0xc>
	return 0;
   17916:	2000      	movs	r0, #0
   17918:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   1791a:	2001      	movs	r0, #1
}
   1791c:	bd38      	pop	{r3, r4, r5, pc}

0001791e <ll_start_enc_req_send>:
{
   1791e:	b570      	push	{r4, r5, r6, lr}
   17920:	460d      	mov	r5, r1
   17922:	4616      	mov	r6, r2
	conn = connection_get(handle);
   17924:	f7f9 fcd6 	bl	112d4 <connection_get>
	if (!conn) {
   17928:	2800      	cmp	r0, #0
   1792a:	d03e      	beq.n	179aa <ll_start_enc_req_send+0x8c>
   1792c:	4604      	mov	r4, r0
	if (error_code) {
   1792e:	b32d      	cbz	r5, 1797c <ll_start_enc_req_send+0x5e>
		if (conn->refresh == 0) {
   17930:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   17934:	f013 0f40 	tst.w	r3, #64	; 0x40
   17938:	d111      	bne.n	1795e <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   1793a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   1793e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   17942:	4293      	cmp	r3, r2
   17944:	d001      	beq.n	1794a <ll_start_enc_req_send+0x2c>
				return 1;
   17946:	2001      	movs	r0, #1
   17948:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp.encryption.error_code = error_code;
   1794a:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
			conn->llcp_type = LLCP_ENCRYPTION;
   1794e:	2203      	movs	r2, #3
   17950:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
			conn->llcp_req++;
   17954:	3301      	adds	r3, #1
   17956:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	return 0;
   1795a:	2000      	movs	r0, #0
   1795c:	bd70      	pop	{r4, r5, r6, pc}
			if (conn->llcp_terminate.ack !=
   1795e:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
			    conn->llcp_terminate.req) {
   17962:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
			if (conn->llcp_terminate.ack !=
   17966:	429a      	cmp	r2, r3
   17968:	d001      	beq.n	1796e <ll_start_enc_req_send+0x50>
				return 1;
   1796a:	2001      	movs	r0, #1
   1796c:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp_terminate.reason_own = error_code;
   1796e:	f880 50b2 	strb.w	r5, [r0, #178]	; 0xb2
			conn->llcp_terminate.req++;
   17972:	3301      	adds	r3, #1
   17974:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   17978:	2000      	movs	r0, #0
   1797a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   1797c:	2210      	movs	r2, #16
   1797e:	4631      	mov	r1, r6
   17980:	3083      	adds	r0, #131	; 0x83
   17982:	f7e8 fc9d 	bl	2c0 <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
   17986:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1798a:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   1798e:	4293      	cmp	r3, r2
   17990:	d001      	beq.n	17996 <ll_start_enc_req_send+0x78>
			return 1;
   17992:	2001      	movs	r0, #1
}
   17994:	bd70      	pop	{r4, r5, r6, pc}
		conn->llcp.encryption.error_code = 0;
   17996:	2000      	movs	r0, #0
   17998:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
   1799c:	2203      	movs	r2, #3
   1799e:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
		conn->llcp_req++;
   179a2:	3301      	adds	r3, #1
   179a4:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   179a8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   179aa:	2001      	movs	r0, #1
   179ac:	bd70      	pop	{r4, r5, r6, pc}

000179ae <ll_feature_req_send>:
{
   179ae:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   179b0:	f7f9 fc90 	bl	112d4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   179b4:	b178      	cbz	r0, 179d6 <ll_feature_req_send+0x28>
   179b6:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   179ba:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   179be:	428a      	cmp	r2, r1
   179c0:	d001      	beq.n	179c6 <ll_feature_req_send+0x18>
		return 1;
   179c2:	2001      	movs	r0, #1
}
   179c4:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   179c6:	2104      	movs	r1, #4
   179c8:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   179cc:	3201      	adds	r2, #1
   179ce:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   179d2:	2000      	movs	r0, #0
   179d4:	bd08      	pop	{r3, pc}
		return 1;
   179d6:	2001      	movs	r0, #1
   179d8:	bd08      	pop	{r3, pc}

000179da <ll_version_ind_send>:
{
   179da:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   179dc:	f7f9 fc7a 	bl	112d4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   179e0:	b178      	cbz	r0, 17a02 <ll_version_ind_send+0x28>
   179e2:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   179e6:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   179ea:	428a      	cmp	r2, r1
   179ec:	d001      	beq.n	179f2 <ll_version_ind_send+0x18>
		return 1;
   179ee:	2001      	movs	r0, #1
}
   179f0:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   179f2:	2105      	movs	r1, #5
   179f4:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   179f8:	3201      	adds	r2, #1
   179fa:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   179fe:	2000      	movs	r0, #0
   17a00:	bd08      	pop	{r3, pc}
		return 1;
   17a02:	2001      	movs	r0, #1
   17a04:	bd08      	pop	{r3, pc}

00017a06 <ll_terminate_ind_send>:
{
   17a06:	b510      	push	{r4, lr}
   17a08:	460c      	mov	r4, r1
	conn = connection_get(handle);
   17a0a:	f7f9 fc63 	bl	112d4 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   17a0e:	b170      	cbz	r0, 17a2e <ll_terminate_ind_send+0x28>
   17a10:	f890 10b1 	ldrb.w	r1, [r0, #177]	; 0xb1
   17a14:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
   17a18:	4291      	cmp	r1, r2
   17a1a:	d001      	beq.n	17a20 <ll_terminate_ind_send+0x1a>
		return 1;
   17a1c:	2001      	movs	r0, #1
}
   17a1e:	bd10      	pop	{r4, pc}
	conn->llcp_terminate.reason_own = reason;
   17a20:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   17a24:	3201      	adds	r2, #1
   17a26:	f880 20b0 	strb.w	r2, [r0, #176]	; 0xb0
	return 0;
   17a2a:	2000      	movs	r0, #0
   17a2c:	bd10      	pop	{r4, pc}
		return 1;
   17a2e:	2001      	movs	r0, #1
   17a30:	bd10      	pop	{r4, pc}

00017a32 <ll_tx_power_level_get>:
{
   17a32:	b510      	push	{r4, lr}
   17a34:	4614      	mov	r4, r2
	conn = connection_get(handle);
   17a36:	f7f9 fc4d 	bl	112d4 <connection_get>
	if (!conn) {
   17a3a:	b110      	cbz	r0, 17a42 <ll_tx_power_level_get+0x10>
	*tx_power_level = 0;
   17a3c:	2000      	movs	r0, #0
   17a3e:	7020      	strb	r0, [r4, #0]
	return 0;
   17a40:	bd10      	pop	{r4, pc}
		return 1;
   17a42:	2001      	movs	r0, #1
}
   17a44:	bd10      	pop	{r4, pc}

00017a46 <ll_tx_power_get>:
	*min = 0;
   17a46:	2300      	movs	r3, #0
   17a48:	7003      	strb	r3, [r0, #0]
	*max = 0;
   17a4a:	700b      	strb	r3, [r1, #0]
   17a4c:	4770      	bx	lr
	...

00017a50 <ll_apto_get>:
{
   17a50:	b510      	push	{r4, lr}
   17a52:	460c      	mov	r4, r1
	conn = connection_get(handle);
   17a54:	f7f9 fc3e 	bl	112d4 <connection_get>
	if (!conn) {
   17a58:	b188      	cbz	r0, 17a7e <ll_apto_get+0x2e>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   17a5a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
   17a5e:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   17a60:	fb03 f301 	mul.w	r3, r3, r1
   17a64:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   17a68:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   17a6c:	4a05      	ldr	r2, [pc, #20]	; (17a84 <ll_apto_get+0x34>)
   17a6e:	fb82 1203 	smull	r1, r2, r2, r3
   17a72:	17db      	asrs	r3, r3, #31
   17a74:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   17a78:	8023      	strh	r3, [r4, #0]
	return 0;
   17a7a:	2000      	movs	r0, #0
   17a7c:	bd10      	pop	{r4, pc}
		return 1;
   17a7e:	2001      	movs	r0, #1
}
   17a80:	bd10      	pop	{r4, pc}
   17a82:	bf00      	nop
   17a84:	10624dd3 	.word	0x10624dd3

00017a88 <ll_apto_set>:
{
   17a88:	b510      	push	{r4, lr}
   17a8a:	460c      	mov	r4, r1
	conn = connection_get(handle);
   17a8c:	f7f9 fc22 	bl	112d4 <connection_get>
	if (!conn) {
   17a90:	b178      	cbz	r0, 17ab2 <ll_apto_set+0x2a>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   17a92:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   17a94:	f240 43e2 	movw	r3, #1250	; 0x4e2
   17a98:	fb03 f301 	mul.w	r3, r3, r1
   17a9c:	f242 7110 	movw	r1, #10000	; 0x2710
   17aa0:	fb01 3404 	mla	r4, r1, r4, r3
   17aa4:	3c01      	subs	r4, #1
   17aa6:	fb94 f4f3 	sdiv	r4, r4, r3
   17aaa:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   17aae:	2000      	movs	r0, #0
   17ab0:	bd10      	pop	{r4, pc}
		return 1;
   17ab2:	2001      	movs	r0, #1
}
   17ab4:	bd10      	pop	{r4, pc}

00017ab6 <ll_length_req_send>:
{
   17ab6:	b538      	push	{r3, r4, r5, lr}
   17ab8:	460d      	mov	r5, r1
   17aba:	4614      	mov	r4, r2
	conn = connection_get(handle);
   17abc:	f7f9 fc0a 	bl	112d4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   17ac0:	b1f0      	cbz	r0, 17b00 <ll_length_req_send+0x4a>
   17ac2:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   17ac6:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   17aca:	4291      	cmp	r1, r2
   17acc:	d001      	beq.n	17ad2 <ll_length_req_send+0x1c>
		return 1;
   17ace:	2001      	movs	r0, #1
   17ad0:	bd38      	pop	{r3, r4, r5, pc}
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   17ad2:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   17ad6:	f890 10e9 	ldrb.w	r1, [r0, #233]	; 0xe9
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   17ada:	428a      	cmp	r2, r1
   17adc:	d001      	beq.n	17ae2 <ll_length_req_send+0x2c>
		return 1;
   17ade:	2001      	movs	r0, #1
}
   17ae0:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   17ae2:	f890 10ea 	ldrb.w	r1, [r0, #234]	; 0xea
   17ae6:	f36f 0101 	bfc	r1, #0, #2
   17aea:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   17aee:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
	conn->llcp_length.tx_time = tx_time;
   17af2:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
	conn->llcp_length.req++;
   17af6:	3201      	adds	r2, #1
   17af8:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
	return 0;
   17afc:	2000      	movs	r0, #0
   17afe:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   17b00:	2001      	movs	r0, #1
   17b02:	bd38      	pop	{r3, r4, r5, pc}

00017b04 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   17b04:	4b03      	ldr	r3, [pc, #12]	; (17b14 <ll_length_default_get+0x10>)
   17b06:	f8b3 211e 	ldrh.w	r2, [r3, #286]	; 0x11e
   17b0a:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   17b0c:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
   17b10:	800b      	strh	r3, [r1, #0]
   17b12:	4770      	bx	lr
   17b14:	20000dec 	.word	0x20000dec

00017b18 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   17b18:	4b03      	ldr	r3, [pc, #12]	; (17b28 <ll_length_default_set+0x10>)
   17b1a:	f8a3 011e 	strh.w	r0, [r3, #286]	; 0x11e
	_radio.default_tx_time = max_tx_time;
   17b1e:	f8a3 1120 	strh.w	r1, [r3, #288]	; 0x120
}
   17b22:	2000      	movs	r0, #0
   17b24:	4770      	bx	lr
   17b26:	bf00      	nop
   17b28:	20000dec 	.word	0x20000dec

00017b2c <ll_length_max_get>:
{
   17b2c:	b410      	push	{r4}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   17b2e:	241b      	movs	r4, #27
   17b30:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   17b32:	f44f 70a4 	mov.w	r0, #328	; 0x148
   17b36:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   17b38:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   17b3a:	8018      	strh	r0, [r3, #0]
}
   17b3c:	bc10      	pop	{r4}
   17b3e:	4770      	bx	lr

00017b40 <ll_phy_get>:
{
   17b40:	b538      	push	{r3, r4, r5, lr}
   17b42:	460d      	mov	r5, r1
   17b44:	4614      	mov	r4, r2
	conn = connection_get(handle);
   17b46:	f7f9 fbc5 	bl	112d4 <connection_get>
	if (!conn) {
   17b4a:	b158      	cbz	r0, 17b64 <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   17b4c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   17b50:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   17b54:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   17b56:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   17b5a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   17b5e:	7023      	strb	r3, [r4, #0]
	return 0;
   17b60:	2000      	movs	r0, #0
   17b62:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   17b64:	2001      	movs	r0, #1
}
   17b66:	bd38      	pop	{r3, r4, r5, pc}

00017b68 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   17b68:	4b03      	ldr	r3, [pc, #12]	; (17b78 <ll_phy_default_set+0x10>)
   17b6a:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_phy_rx = rx;
   17b6e:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   17b72:	2000      	movs	r0, #0
   17b74:	4770      	bx	lr
   17b76:	bf00      	nop
   17b78:	20000dec 	.word	0x20000dec

00017b7c <ll_phy_req_send>:
{
   17b7c:	b570      	push	{r4, r5, r6, lr}
   17b7e:	460e      	mov	r6, r1
   17b80:	4615      	mov	r5, r2
   17b82:	461c      	mov	r4, r3
	conn = connection_get(handle);
   17b84:	f7f9 fba6 	bl	112d4 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   17b88:	b338      	cbz	r0, 17bda <ll_phy_req_send+0x5e>
   17b8a:	4603      	mov	r3, r0
   17b8c:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   17b90:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   17b94:	4291      	cmp	r1, r2
   17b96:	d001      	beq.n	17b9c <ll_phy_req_send+0x20>
		return 1;
   17b98:	2001      	movs	r0, #1
   17b9a:	bd70      	pop	{r4, r5, r6, pc}
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   17b9c:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
   17ba0:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   17ba4:	428a      	cmp	r2, r1
   17ba6:	d001      	beq.n	17bac <ll_phy_req_send+0x30>
		return 1;
   17ba8:	2001      	movs	r0, #1
}
   17baa:	bd70      	pop	{r4, r5, r6, pc}
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   17bac:	f890 10f6 	ldrb.w	r1, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   17bb0:	f890 00f7 	ldrb.w	r0, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   17bb4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   17bb8:	f366 0184 	bfi	r1, r6, #2, #3
	conn->llcp_phy.flags = flags;
   17bbc:	f040 0002 	orr.w	r0, r0, #2
   17bc0:	f365 0000 	bfi	r0, r5, #0, #1
   17bc4:	f883 00f7 	strb.w	r0, [r3, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   17bc8:	f364 1147 	bfi	r1, r4, #5, #3
   17bcc:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
	conn->llcp_phy.req++;
   17bd0:	3201      	adds	r2, #1
   17bd2:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	return 0;
   17bd6:	2000      	movs	r0, #0
   17bd8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   17bda:	2001      	movs	r0, #1
   17bdc:	bd70      	pop	{r4, r5, r6, pc}
	...

00017be0 <radio_rx_get>:
{
   17be0:	b5f0      	push	{r4, r5, r6, r7, lr}
   17be2:	b083      	sub	sp, #12
   17be4:	4606      	mov	r6, r0
   17be6:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   17be8:	4b1b      	ldr	r3, [pc, #108]	; (17c58 <radio_rx_get+0x78>)
   17bea:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   17bee:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   17bf2:	429a      	cmp	r2, r3
   17bf4:	d024      	beq.n	17c40 <radio_rx_get+0x60>
		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
   17bf6:	6857      	ldr	r7, [r2, #4]
		cmplt = tx_cmplt_get(handle,
   17bf8:	783a      	ldrb	r2, [r7, #0]
   17bfa:	4918      	ldr	r1, [pc, #96]	; (17c5c <radio_rx_get+0x7c>)
   17bfc:	f7f9 fb0c 	bl	11218 <tx_cmplt_get>
		if (!cmplt) {
   17c00:	4605      	mov	r5, r0
   17c02:	b9d0      	cbnz	r0, 17c3a <radio_rx_get+0x5a>
			first = _radio.packet_release_first;
   17c04:	4b14      	ldr	r3, [pc, #80]	; (17c58 <radio_rx_get+0x78>)
   17c06:	f893 3173 	ldrb.w	r3, [r3, #371]	; 0x173
   17c0a:	f88d 3005 	strb.w	r3, [sp, #5]
			cmplt_curr = 0;
   17c0e:	4604      	mov	r4, r0
   17c10:	e000      	b.n	17c14 <radio_rx_get+0x34>
   17c12:	4604      	mov	r4, r0
				cmplt_curr = tx_cmplt_get(&handle, &first,
   17c14:	4b10      	ldr	r3, [pc, #64]	; (17c58 <radio_rx_get+0x78>)
   17c16:	f893 2174 	ldrb.w	r2, [r3, #372]	; 0x174
   17c1a:	f10d 0105 	add.w	r1, sp, #5
   17c1e:	f10d 0006 	add.w	r0, sp, #6
   17c22:	f7f9 faf9 	bl	11218 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   17c26:	2c00      	cmp	r4, #0
   17c28:	d1f3      	bne.n	17c12 <radio_rx_get+0x32>
			} while ((cmplt_prev != 0) ||
   17c2a:	4284      	cmp	r4, r0
   17c2c:	d001      	beq.n	17c32 <radio_rx_get+0x52>
   17c2e:	4604      	mov	r4, r0
   17c30:	e7f0      	b.n	17c14 <radio_rx_get+0x34>
			*radio_pdu_node_rx = _radio_pdu_node_rx;
   17c32:	6037      	str	r7, [r6, #0]
}
   17c34:	4628      	mov	r0, r5
   17c36:	b003      	add	sp, #12
   17c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*radio_pdu_node_rx = NULL;
   17c3a:	2300      	movs	r3, #0
   17c3c:	6033      	str	r3, [r6, #0]
   17c3e:	e7f9      	b.n	17c34 <radio_rx_get+0x54>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   17c40:	4905      	ldr	r1, [pc, #20]	; (17c58 <radio_rx_get+0x78>)
   17c42:	f891 2174 	ldrb.w	r2, [r1, #372]	; 0x174
   17c46:	f201 1173 	addw	r1, r1, #371	; 0x173
   17c4a:	f7f9 fae5 	bl	11218 <tx_cmplt_get>
   17c4e:	4605      	mov	r5, r0
		*radio_pdu_node_rx = NULL;
   17c50:	2300      	movs	r3, #0
   17c52:	6033      	str	r3, [r6, #0]
   17c54:	e7ee      	b.n	17c34 <radio_rx_get+0x54>
   17c56:	bf00      	nop
   17c58:	20000dec 	.word	0x20000dec
   17c5c:	20000f5f 	.word	0x20000f5f

00017c60 <radio_rx_mem_release>:
{
   17c60:	b570      	push	{r4, r5, r6, lr}
   17c62:	4606      	mov	r6, r0
	_radio_pdu_node_rx = *radio_pdu_node_rx;
   17c64:	6800      	ldr	r0, [r0, #0]
	while (_radio_pdu_node_rx) {
   17c66:	e003      	b.n	17c70 <radio_rx_mem_release+0x10>
			mem_release(_radio_pdu_node_rx_free,
   17c68:	491e      	ldr	r1, [pc, #120]	; (17ce4 <radio_rx_mem_release+0x84>)
   17c6a:	f7f6 fd6a 	bl	e742 <mem_release>
{
   17c6e:	4620      	mov	r0, r4
	while (_radio_pdu_node_rx) {
   17c70:	b398      	cbz	r0, 17cda <radio_rx_mem_release+0x7a>
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;
   17c72:	6804      	ldr	r4, [r0, #0]
		switch (_radio_pdu_node_rx_free->hdr.type) {
   17c74:	7903      	ldrb	r3, [r0, #4]
   17c76:	3b01      	subs	r3, #1
   17c78:	2b0b      	cmp	r3, #11
   17c7a:	d828      	bhi.n	17cce <radio_rx_mem_release+0x6e>
   17c7c:	a201      	add	r2, pc, #4	; (adr r2, 17c84 <radio_rx_mem_release+0x24>)
   17c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17c82:	bf00      	nop
   17c84:	00017c69 	.word	0x00017c69
   17c88:	00017c69 	.word	0x00017c69
   17c8c:	00017c69 	.word	0x00017c69
   17c90:	00017c69 	.word	0x00017c69
   17c94:	00017c69 	.word	0x00017c69
   17c98:	00017c69 	.word	0x00017c69
   17c9c:	00017cb5 	.word	0x00017cb5
   17ca0:	00017c69 	.word	0x00017c69
   17ca4:	00017c69 	.word	0x00017c69
   17ca8:	00017c69 	.word	0x00017c69
   17cac:	00017c69 	.word	0x00017c69
   17cb0:	00017c69 	.word	0x00017c69
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   17cb4:	4d0c      	ldr	r5, [pc, #48]	; (17ce8 <radio_rx_mem_release+0x88>)
   17cb6:	88c2      	ldrh	r2, [r0, #6]
   17cb8:	f44f 71aa 	mov.w	r1, #340	; 0x154
   17cbc:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   17cc0:	f7f6 fd60 	bl	e784 <mem_get>
			mem_release(conn, &_radio.conn_free);
   17cc4:	f505 7184 	add.w	r1, r5, #264	; 0x108
   17cc8:	f7f6 fd3b 	bl	e742 <mem_release>
			break;
   17ccc:	e7cf      	b.n	17c6e <radio_rx_mem_release+0xe>
			LL_ASSERT(0);
   17cce:	4040      	eors	r0, r0
   17cd0:	f380 8811 	msr	BASEPRI, r0
   17cd4:	f04f 0004 	mov.w	r0, #4
   17cd8:	df02      	svc	2
	*radio_pdu_node_rx = _radio_pdu_node_rx;
   17cda:	6030      	str	r0, [r6, #0]
	packet_rx_allocate(0xff);
   17cdc:	20ff      	movs	r0, #255	; 0xff
   17cde:	f7f9 fa4f 	bl	11180 <packet_rx_allocate>
   17ce2:	bd70      	pop	{r4, r5, r6, pc}
   17ce4:	20000f18 	.word	0x20000f18
   17ce8:	20000dec 	.word	0x20000dec

00017cec <do_radio_rx_fc_set>:
	if (req == ack) {
   17cec:	4291      	cmp	r1, r2
   17cee:	d007      	beq.n	17d00 <do_radio_rx_fc_set+0x14>
	} else if (((req == 0) &&
   17cf0:	bb41      	cbnz	r1, 17d44 <do_radio_rx_fc_set+0x58>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   17cf2:	4b1c      	ldr	r3, [pc, #112]	; (17d64 <do_radio_rx_fc_set+0x78>)
   17cf4:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
	} else if (((req == 0) &&
   17cf8:	4298      	cmp	r0, r3
   17cfa:	d023      	beq.n	17d44 <do_radio_rx_fc_set+0x58>
		return 1;
   17cfc:	2001      	movs	r0, #1
   17cfe:	4770      	bx	lr
{
   17d00:	b430      	push	{r4, r5}
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   17d02:	4b18      	ldr	r3, [pc, #96]	; (17d64 <do_radio_rx_fc_set+0x78>)
   17d04:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   17d08:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   17d0c:	429c      	cmp	r4, r3
   17d0e:	d002      	beq.n	17d16 <do_radio_rx_fc_set+0x2a>
			return 1;
   17d10:	2001      	movs	r0, #1
}
   17d12:	bc30      	pop	{r4, r5}
   17d14:	4770      	bx	lr
			if (ack1 == 0) {
   17d16:	b19a      	cbz	r2, 17d40 <do_radio_rx_fc_set+0x54>
			u8_t ack1 = ack;
   17d18:	4613      	mov	r3, r2
			_radio.fc_handle[--ack1] = handle;
   17d1a:	3b01      	subs	r3, #1
   17d1c:	b2db      	uxtb	r3, r3
   17d1e:	4c11      	ldr	r4, [pc, #68]	; (17d64 <do_radio_rx_fc_set+0x78>)
   17d20:	f103 05b8 	add.w	r5, r3, #184	; 0xb8
   17d24:	eb04 0545 	add.w	r5, r4, r5, lsl #1
   17d28:	80e8      	strh	r0, [r5, #6]
			_radio.fc_ack = ack1;
   17d2a:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
			if (req != _radio.fc_req) {
   17d2e:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   17d32:	b2db      	uxtb	r3, r3
   17d34:	4299      	cmp	r1, r3
   17d36:	d00f      	beq.n	17d58 <do_radio_rx_fc_set+0x6c>
				_radio.fc_ack = ack;
   17d38:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
				return 1;
   17d3c:	2001      	movs	r0, #1
   17d3e:	e7e8      	b.n	17d12 <do_radio_rx_fc_set+0x26>
				ack1 = TRIPLE_BUFFER_SIZE;
   17d40:	2303      	movs	r3, #3
   17d42:	e7ea      	b.n	17d1a <do_radio_rx_fc_set+0x2e>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   17d44:	b151      	cbz	r1, 17d5c <do_radio_rx_fc_set+0x70>
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   17d46:	31b7      	adds	r1, #183	; 0xb7
   17d48:	4b06      	ldr	r3, [pc, #24]	; (17d64 <do_radio_rx_fc_set+0x78>)
   17d4a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   17d4e:	88cb      	ldrh	r3, [r1, #6]
   17d50:	4298      	cmp	r0, r3
   17d52:	d005      	beq.n	17d60 <do_radio_rx_fc_set+0x74>
		return 1;
   17d54:	2001      	movs	r0, #1
   17d56:	4770      	bx	lr
	return 0;
   17d58:	2000      	movs	r0, #0
   17d5a:	e7da      	b.n	17d12 <do_radio_rx_fc_set+0x26>
   17d5c:	4608      	mov	r0, r1
   17d5e:	4770      	bx	lr
   17d60:	2000      	movs	r0, #0
   17d62:	4770      	bx	lr
   17d64:	20000dec 	.word	0x20000dec

00017d68 <radio_rx_fc_set>:
{
   17d68:	b538      	push	{r3, r4, r5, lr}
   17d6a:	4604      	mov	r4, r0
	if (_radio.fc_ena) {
   17d6c:	4b1b      	ldr	r3, [pc, #108]	; (17ddc <radio_rx_fc_set+0x74>)
   17d6e:	f893 017e 	ldrb.w	r0, [r3, #382]	; 0x17e
   17d72:	b338      	cbz	r0, 17dc4 <radio_rx_fc_set+0x5c>
		u8_t req = _radio.fc_req;
   17d74:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   17d78:	b2d5      	uxtb	r5, r2
		u8_t ack = _radio.fc_ack;
   17d7a:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
		if (fc) {
   17d7e:	b141      	cbz	r1, 17d92 <radio_rx_fc_set+0x2a>
			if (handle != 0xffff) {
   17d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17d84:	429c      	cmp	r4, r3
   17d86:	d023      	beq.n	17dd0 <radio_rx_fc_set+0x68>
   17d88:	4620      	mov	r0, r4
				return do_radio_rx_fc_set(handle, req, ack);
   17d8a:	4629      	mov	r1, r5
   17d8c:	f7ff ffae 	bl	17cec <do_radio_rx_fc_set>
   17d90:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   17d92:	4b12      	ldr	r3, [pc, #72]	; (17ddc <radio_rx_fc_set+0x74>)
   17d94:	f8d3 0148 	ldr.w	r0, [r3, #328]	; 0x148
   17d98:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   17d9c:	4298      	cmp	r0, r3
   17d9e:	d001      	beq.n	17da4 <radio_rx_fc_set+0x3c>
	return 0;
   17da0:	4608      	mov	r0, r1
   17da2:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   17da4:	4295      	cmp	r5, r2
   17da6:	d015      	beq.n	17dd4 <radio_rx_fc_set+0x6c>
			_radio.fc_ack = req;
   17da8:	4b0c      	ldr	r3, [pc, #48]	; (17ddc <radio_rx_fc_set+0x74>)
   17daa:	f883 517d 	strb.w	r5, [r3, #381]	; 0x17d
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   17dae:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   17db2:	4298      	cmp	r0, r3
   17db4:	d010      	beq.n	17dd8 <radio_rx_fc_set+0x70>
			    (req == _radio.fc_req)) {
   17db6:	4b09      	ldr	r3, [pc, #36]	; (17ddc <radio_rx_fc_set+0x74>)
   17db8:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
   17dbc:	b2db      	uxtb	r3, r3
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   17dbe:	429d      	cmp	r5, r3
   17dc0:	d001      	beq.n	17dc6 <radio_rx_fc_set+0x5e>
	return 0;
   17dc2:	4608      	mov	r0, r1
}
   17dc4:	bd38      	pop	{r3, r4, r5, pc}
				_radio.fc_ack = ack;
   17dc6:	4b05      	ldr	r3, [pc, #20]	; (17ddc <radio_rx_fc_set+0x74>)
   17dc8:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	return 0;
   17dcc:	4608      	mov	r0, r1
   17dce:	bd38      	pop	{r3, r4, r5, pc}
   17dd0:	2000      	movs	r0, #0
   17dd2:	bd38      	pop	{r3, r4, r5, pc}
   17dd4:	4608      	mov	r0, r1
   17dd6:	bd38      	pop	{r3, r4, r5, pc}
   17dd8:	4608      	mov	r0, r1
   17dda:	bd38      	pop	{r3, r4, r5, pc}
   17ddc:	20000dec 	.word	0x20000dec

00017de0 <radio_tx_mem_acquire>:
{
   17de0:	b508      	push	{r3, lr}
	return mem_acquire(&_radio.pkt_tx_data_free);
   17de2:	4802      	ldr	r0, [pc, #8]	; (17dec <radio_tx_mem_acquire+0xc>)
   17de4:	f7f6 fc91 	bl	e70a <mem_acquire>
}
   17de8:	bd08      	pop	{r3, pc}
   17dea:	bf00      	nop
   17dec:	20000f4c 	.word	0x20000f4c

00017df0 <radio_tx_mem_release>:
{
   17df0:	b508      	push	{r3, lr}
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   17df2:	4902      	ldr	r1, [pc, #8]	; (17dfc <radio_tx_mem_release+0xc>)
   17df4:	f7f6 fca5 	bl	e742 <mem_release>
   17df8:	bd08      	pop	{r3, pc}
   17dfa:	bf00      	nop
   17dfc:	20000f4c 	.word	0x20000f4c

00017e00 <radio_tx_mem_enqueue>:
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
   17e00:	b570      	push	{r4, r5, r6, lr}
   17e02:	b088      	sub	sp, #32
   17e04:	4605      	mov	r5, r0
   17e06:	460e      	mov	r6, r1
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   17e08:	4b36      	ldr	r3, [pc, #216]	; (17ee4 <radio_tx_mem_enqueue+0xe4>)
   17e0a:	f893 4172 	ldrb.w	r4, [r3, #370]	; 0x172
   17e0e:	3401      	adds	r4, #1
   17e10:	b2e4      	uxtb	r4, r4
	if (last == _radio.packet_tx_count) {
   17e12:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   17e16:	429c      	cmp	r4, r3
   17e18:	d02a      	beq.n	17e70 <radio_tx_mem_enqueue+0x70>
		last = 0;
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
   17e1a:	4628      	mov	r0, r5
   17e1c:	f7f9 fa5a 	bl	112d4 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   17e20:	4601      	mov	r1, r0
   17e22:	2800      	cmp	r0, #0
   17e24:	d057      	beq.n	17ed6 <radio_tx_mem_enqueue+0xd6>
   17e26:	4b2f      	ldr	r3, [pc, #188]	; (17ee4 <radio_tx_mem_enqueue+0xe4>)
   17e28:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
   17e2c:	b2db      	uxtb	r3, r3
   17e2e:	429c      	cmp	r4, r3
   17e30:	d053      	beq.n	17eda <radio_tx_mem_enqueue+0xda>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   17e32:	7972      	ldrb	r2, [r6, #5]
   17e34:	4b2b      	ldr	r3, [pc, #172]	; (17ee4 <radio_tx_mem_enqueue+0xe4>)
   17e36:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
   17e3a:	3b07      	subs	r3, #7
   17e3c:	429a      	cmp	r2, r3
   17e3e:	d819      	bhi.n	17e74 <radio_tx_mem_enqueue+0x74>
				    offsetof(struct radio_pdu_node_tx,
					     pdu_data) -
				    offsetof(struct pdu_data, payload)));

	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   17e40:	4b28      	ldr	r3, [pc, #160]	; (17ee4 <radio_tx_mem_enqueue+0xe4>)
   17e42:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   17e46:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   17e4a:	f822 5030 	strh.w	r5, [r2, r0, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
   17e4e:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   17e52:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   17e56:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   17e5a:	6056      	str	r6, [r2, #4]
	_radio.packet_tx_last = last;
   17e5c:	f883 4172 	strb.w	r4, [r3, #370]	; 0x172

	/* break slave latency */
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   17e60:	f991 301d 	ldrsb.w	r3, [r1, #29]
   17e64:	2b00      	cmp	r3, #0
   17e66:	db0b      	blt.n	17e80 <radio_tx_mem_enqueue+0x80>
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   17e68:	2300      	movs	r3, #0
}
   17e6a:	4618      	mov	r0, r3
   17e6c:	b008      	add	sp, #32
   17e6e:	bd70      	pop	{r4, r5, r6, pc}
		last = 0;
   17e70:	2400      	movs	r4, #0
   17e72:	e7d2      	b.n	17e1a <radio_tx_mem_enqueue+0x1a>
	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   17e74:	4040      	eors	r0, r0
   17e76:	f380 8811 	msr	BASEPRI, r0
   17e7a:	f04f 0004 	mov.w	r0, #4
   17e7e:	df02      	svc	2
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   17e80:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
   17e82:	b363      	cbz	r3, 17ede <radio_tx_mem_enqueue+0xde>
   17e84:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   17e88:	f013 0f02 	tst.w	r3, #2
   17e8c:	d001      	beq.n	17e92 <radio_tx_mem_enqueue+0x92>
	return 0;
   17e8e:	2300      	movs	r3, #0
   17e90:	e7eb      	b.n	17e6a <radio_tx_mem_enqueue+0x6a>
		conn->slave.latency_cancel = 1;
   17e92:	f043 0302 	orr.w	r3, r3, #2
   17e96:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
				 conn->handle, 0, 0, 0, 0, 1, 0,
   17e9a:	8c0a      	ldrh	r2, [r1, #32]
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   17e9c:	3207      	adds	r2, #7
   17e9e:	9106      	str	r1, [sp, #24]
   17ea0:	4b11      	ldr	r3, [pc, #68]	; (17ee8 <radio_tx_mem_enqueue+0xe8>)
   17ea2:	9305      	str	r3, [sp, #20]
   17ea4:	2000      	movs	r0, #0
   17ea6:	9004      	str	r0, [sp, #16]
   17ea8:	2301      	movs	r3, #1
   17eaa:	9303      	str	r3, [sp, #12]
   17eac:	9002      	str	r0, [sp, #8]
   17eae:	9001      	str	r0, [sp, #4]
   17eb0:	9000      	str	r0, [sp, #0]
   17eb2:	4603      	mov	r3, r0
   17eb4:	b2d2      	uxtb	r2, r2
   17eb6:	2103      	movs	r1, #3
   17eb8:	f7f8 f944 	bl	10144 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17ebc:	4603      	mov	r3, r0
   17ebe:	2800      	cmp	r0, #0
   17ec0:	d0d3      	beq.n	17e6a <radio_tx_mem_enqueue+0x6a>
   17ec2:	2802      	cmp	r0, #2
   17ec4:	d101      	bne.n	17eca <radio_tx_mem_enqueue+0xca>
	return 0;
   17ec6:	2300      	movs	r3, #0
   17ec8:	e7cf      	b.n	17e6a <radio_tx_mem_enqueue+0x6a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17eca:	4040      	eors	r0, r0
   17ecc:	f380 8811 	msr	BASEPRI, r0
   17ed0:	f04f 0004 	mov.w	r0, #4
   17ed4:	df02      	svc	2
		return 1;
   17ed6:	2301      	movs	r3, #1
   17ed8:	e7c7      	b.n	17e6a <radio_tx_mem_enqueue+0x6a>
   17eda:	2301      	movs	r3, #1
   17edc:	e7c5      	b.n	17e6a <radio_tx_mem_enqueue+0x6a>
	return 0;
   17ede:	2300      	movs	r3, #0
   17ee0:	e7c3      	b.n	17e6a <radio_tx_mem_enqueue+0x6a>
   17ee2:	bf00      	nop
   17ee4:	20000dec 	.word	0x20000dec
   17ee8:	00011165 	.word	0x00011165

00017eec <ll_enc_req_send>:
{
   17eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17ef0:	4680      	mov	r8, r0
   17ef2:	4689      	mov	r9, r1
   17ef4:	4616      	mov	r6, r2
   17ef6:	461f      	mov	r7, r3
	conn = connection_get(handle);
   17ef8:	f7f9 f9ec 	bl	112d4 <connection_get>
	if (!conn) {
   17efc:	2800      	cmp	r0, #0
   17efe:	d055      	beq.n	17fac <ll_enc_req_send+0xc0>
   17f00:	4605      	mov	r5, r0
	node_tx = radio_tx_mem_acquire();
   17f02:	f7ff ff6d 	bl	17de0 <radio_tx_mem_acquire>
	if (node_tx) {
   17f06:	4604      	mov	r4, r0
   17f08:	2800      	cmp	r0, #0
   17f0a:	d051      	beq.n	17fb0 <ll_enc_req_send+0xc4>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   17f0c:	2210      	movs	r2, #16
   17f0e:	4639      	mov	r1, r7
   17f10:	f105 0083 	add.w	r0, r5, #131	; 0x83
   17f14:	f7e8 f9d4 	bl	2c0 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   17f18:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   17f1c:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   17f20:	d008      	beq.n	17f34 <ll_enc_req_send+0x48>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   17f22:	2b30      	cmp	r3, #48	; 0x30
   17f24:	d02d      	beq.n	17f82 <ll_enc_req_send+0x96>
			radio_tx_mem_release(node_tx);
   17f26:	4620      	mov	r0, r4
   17f28:	f7ff ff62 	bl	17df0 <radio_tx_mem_release>
			return 1;
   17f2c:	2301      	movs	r3, #1
}
   17f2e:	4618      	mov	r0, r3
   17f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   17f34:	7923      	ldrb	r3, [r4, #4]
   17f36:	f043 0303 	orr.w	r3, r3, #3
   17f3a:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   17f3c:	2317      	movs	r3, #23
   17f3e:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   17f40:	2303      	movs	r3, #3
   17f42:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   17f44:	2208      	movs	r2, #8
   17f46:	4649      	mov	r1, r9
   17f48:	18a0      	adds	r0, r4, r2
   17f4a:	f7e8 f9b9 	bl	2c0 <memcpy>
			enc_req->ediv[0] = ediv[0];
   17f4e:	7833      	ldrb	r3, [r6, #0]
   17f50:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   17f52:	7873      	ldrb	r3, [r6, #1]
   17f54:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   17f56:	2108      	movs	r1, #8
   17f58:	f104 0012 	add.w	r0, r4, #18
   17f5c:	f7f8 fd74 	bl	10a48 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   17f60:	2104      	movs	r1, #4
   17f62:	f104 001a 	add.w	r0, r4, #26
   17f66:	f7f8 fd6f 	bl	10a48 <bt_rand>
		if (radio_tx_mem_enqueue(handle, node_tx)) {
   17f6a:	4621      	mov	r1, r4
   17f6c:	4640      	mov	r0, r8
   17f6e:	f7ff ff47 	bl	17e00 <radio_tx_mem_enqueue>
   17f72:	4603      	mov	r3, r0
   17f74:	2800      	cmp	r0, #0
   17f76:	d0da      	beq.n	17f2e <ll_enc_req_send+0x42>
			radio_tx_mem_release(node_tx);
   17f78:	4620      	mov	r0, r4
   17f7a:	f7ff ff39 	bl	17df0 <radio_tx_mem_release>
			return 1;
   17f7e:	2301      	movs	r3, #1
   17f80:	e7d5      	b.n	17f2e <ll_enc_req_send+0x42>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   17f82:	2208      	movs	r2, #8
   17f84:	4649      	mov	r1, r9
   17f86:	f105 0079 	add.w	r0, r5, #121	; 0x79
   17f8a:	f7e8 f999 	bl	2c0 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   17f8e:	7833      	ldrb	r3, [r6, #0]
   17f90:	f885 3081 	strb.w	r3, [r5, #129]	; 0x81
			conn->llcp.encryption.ediv[1] = ediv[1];
   17f94:	7873      	ldrb	r3, [r6, #1]
   17f96:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   17f9a:	7923      	ldrb	r3, [r4, #4]
   17f9c:	f043 0303 	orr.w	r3, r3, #3
   17fa0:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   17fa2:	2301      	movs	r3, #1
   17fa4:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   17fa6:	230a      	movs	r3, #10
   17fa8:	71e3      	strb	r3, [r4, #7]
   17faa:	e7de      	b.n	17f6a <ll_enc_req_send+0x7e>
		return 1;
   17fac:	2301      	movs	r3, #1
   17fae:	e7be      	b.n	17f2e <ll_enc_req_send+0x42>
	return 1;
   17fb0:	2301      	movs	r3, #1
   17fb2:	e7bc      	b.n	17f2e <ll_enc_req_send+0x42>

void __weak ll_adv_scan_state_cb(u8_t bm)
{
   17fb4:	4770      	bx	lr

00017fb6 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   17fb6:	b508      	push	{r3, lr}
	if (bm) {
   17fb8:	b910      	cbnz	r0, 17fc0 <ll_adv_scan_state_cb+0xa>
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
   17fba:	f000 fe5f 	bl	18c7c <rpa_refresh_stop>
   17fbe:	bd08      	pop	{r3, pc}
		rpa_refresh_start();
   17fc0:	f000 fe48 	bl	18c54 <rpa_refresh_start>
   17fc4:	bd08      	pop	{r3, pc}
	...

00017fc8 <radio_adv_enable>:
{
   17fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17fcc:	b08f      	sub	sp, #60	; 0x3c
   17fce:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   17fd2:	2202      	movs	r2, #2
   17fd4:	920d      	str	r2, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
   17fd6:	4aca      	ldr	r2, [pc, #808]	; (18300 <radio_adv_enable+0x338>)
   17fd8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   17fdc:	f012 0f01 	tst.w	r2, #1
   17fe0:	d003      	beq.n	17fea <radio_adv_enable+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   17fe2:	200c      	movs	r0, #12
}
   17fe4:	b00f      	add	sp, #60	; 0x3c
   17fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17fea:	461d      	mov	r5, r3
   17fec:	460c      	mov	r4, r1
   17fee:	4607      	mov	r7, r0
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];
   17ff0:	4bc3      	ldr	r3, [pc, #780]	; (18300 <radio_adv_enable+0x338>)
   17ff2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
	pdu_adv = (struct pdu_adv *)
   17ff6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   17ffa:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
   17ffe:	3220      	adds	r2, #32
   18000:	eb03 0802 	add.w	r8, r3, r2
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   18004:	f898 3007 	ldrb.w	r3, [r8, #7]
   18008:	f003 030f 	and.w	r3, r3, #15
   1800c:	2b01      	cmp	r3, #1
   1800e:	d97f      	bls.n	18110 <radio_adv_enable+0x148>
		conn = NULL;
   18010:	2600      	movs	r6, #0
	_radio.advertiser.phy_p = phy_p;
   18012:	4abb      	ldr	r2, [pc, #748]	; (18300 <radio_adv_enable+0x338>)
   18014:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
   18018:	f367 0302 	bfi	r3, r7, #0, #3
	_radio.advertiser.chan_map = chan_map;
   1801c:	a80e      	add	r0, sp, #56	; 0x38
   1801e:	f810 1d09 	ldrb.w	r1, [r0, #-9]!
   18022:	f361 03c5 	bfi	r3, r1, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
   18026:	f365 1387 	bfi	r3, r5, #6, #2
   1802a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	_radio.advertiser.rl_idx = rl_idx;
   1802e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   18032:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
		_radio.ticks_active_to_start;
   18036:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
	_radio.advertiser.hdr.ticks_active_to_start =
   1803a:	6193      	str	r3, [r2, #24]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   1803c:	2327      	movs	r3, #39	; 0x27
   1803e:	6153      	str	r3, [r2, #20]
	_radio.advertiser.hdr.ticks_preempt_to_start =
   18040:	2300      	movs	r3, #0
   18042:	61d3      	str	r3, [r2, #28]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   18044:	2101      	movs	r1, #1
   18046:	f7f6 fbe4 	bl	e812 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1804a:	f898 5007 	ldrb.w	r5, [r8, #7]
   1804e:	f005 050f 	and.w	r5, r5, #15
   18052:	2d01      	cmp	r5, #1
   18054:	f000 8108 	beq.w	18268 <radio_adv_enable+0x2a0>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   18058:	2d02      	cmp	r5, #2
   1805a:	f000 8111 	beq.w	18280 <radio_adv_enable+0x2b8>
			      152 + 376) * chan_cnt;
   1805e:	b280      	uxth	r0, r0
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
   18060:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18064:	ebc0 10c3 	rsb	r0, r0, r3, lsl #7
   18068:	0080      	lsls	r0, r0, #2
   1806a:	b280      	uxth	r0, r0
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
   1806c:	a3a2      	add	r3, pc, #648	; (adr r3, 182f8 <radio_adv_enable+0x330>)
   1806e:	e9d3 2300 	ldrd	r2, r3, [r3]
   18072:	49a4      	ldr	r1, [pc, #656]	; (18304 <radio_adv_enable+0x33c>)
   18074:	fba0 0101 	umull	r0, r1, r0, r1
   18078:	f7e9 f840 	bl	10fc <__aeabi_uldivmod>
   1807c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18080:	4a9f      	ldr	r2, [pc, #636]	; (18300 <radio_adv_enable+0x338>)
   18082:	6210      	str	r0, [r2, #32]
		_radio.advertiser.hdr.ticks_active_to_start;
   18084:	6991      	ldr	r1, [r2, #24]
		_radio.advertiser.hdr.ticks_xtal_to_start :
   18086:	6953      	ldr	r3, [r2, #20]
	ticks_slot_offset =
   18088:	4299      	cmp	r1, r3
   1808a:	bf38      	it	cc
   1808c:	4619      	movcc	r1, r3
   1808e:	4688      	mov	r8, r1
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18090:	2d01      	cmp	r5, #1
   18092:	f000 80ff 	beq.w	18294 <radio_adv_enable+0x2cc>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18096:	f7f8 f96f 	bl	10378 <ticker_ticks_now_get>
   1809a:	4607      	mov	r7, r0
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
   1809c:	b2a4      	uxth	r4, r4
   1809e:	489a      	ldr	r0, [pc, #616]	; (18308 <radio_adv_enable+0x340>)
   180a0:	fba4 0100 	umull	r0, r1, r4, r0
   180a4:	2391      	movs	r3, #145	; 0x91
   180a6:	fb03 1104 	mla	r1, r3, r4, r1
   180aa:	a393      	add	r3, pc, #588	; (adr r3, 182f8 <radio_adv_enable+0x330>)
   180ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   180b0:	f7e9 f824 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   180b4:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
				      _radio.advertiser.hdr.ticks_slot),
   180b8:	4b91      	ldr	r3, [pc, #580]	; (18300 <radio_adv_enable+0x338>)
   180ba:	6a1b      	ldr	r3, [r3, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   180bc:	4443      	add	r3, r8
   180be:	b29b      	uxth	r3, r3
		ret =
   180c0:	a90d      	add	r1, sp, #52	; 0x34
   180c2:	9108      	str	r1, [sp, #32]
   180c4:	4991      	ldr	r1, [pc, #580]	; (1830c <radio_adv_enable+0x344>)
   180c6:	9107      	str	r1, [sp, #28]
   180c8:	2000      	movs	r0, #0
   180ca:	9006      	str	r0, [sp, #24]
   180cc:	4990      	ldr	r1, [pc, #576]	; (18310 <radio_adv_enable+0x348>)
   180ce:	9105      	str	r1, [sp, #20]
   180d0:	9304      	str	r3, [sp, #16]
   180d2:	9003      	str	r0, [sp, #12]
   180d4:	9002      	str	r0, [sp, #8]
   180d6:	9201      	str	r2, [sp, #4]
   180d8:	9000      	str	r0, [sp, #0]
   180da:	463b      	mov	r3, r7
   180dc:	2205      	movs	r2, #5
   180de:	2103      	movs	r1, #3
   180e0:	f7f7 ffe2 	bl	100a8 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   180e4:	2802      	cmp	r0, #2
   180e6:	f000 813b 	beq.w	18360 <radio_adv_enable+0x398>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   180ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   180ec:	2b00      	cmp	r3, #0
   180ee:	f040 80f2 	bne.w	182d6 <radio_adv_enable+0x30e>
		_radio.advertiser.is_enabled = 1;
   180f2:	4b83      	ldr	r3, [pc, #524]	; (18300 <radio_adv_enable+0x338>)
   180f4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   180f8:	f042 0201 	orr.w	r2, r2, #1
   180fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   18100:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   18104:	f013 0f01 	tst.w	r3, #1
   18108:	f000 812e 	beq.w	18368 <radio_adv_enable+0x3a0>
		return 0;
   1810c:	2000      	movs	r0, #0
   1810e:	e769      	b.n	17fe4 <radio_adv_enable+0x1c>
		if (_radio.advertiser.conn) {
   18110:	4b7b      	ldr	r3, [pc, #492]	; (18300 <radio_adv_enable+0x338>)
   18112:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   18116:	b10b      	cbz	r3, 1811c <radio_adv_enable+0x154>
			return BT_HCI_ERR_CMD_DISALLOWED;
   18118:	200c      	movs	r0, #12
   1811a:	e763      	b.n	17fe4 <radio_adv_enable+0x1c>
		link = mem_acquire(&_radio.link_rx_free);
   1811c:	487d      	ldr	r0, [pc, #500]	; (18314 <radio_adv_enable+0x34c>)
   1811e:	f7f6 faf4 	bl	e70a <mem_acquire>
		if (!link) {
   18122:	4681      	mov	r9, r0
   18124:	2800      	cmp	r0, #0
   18126:	f000 8124 	beq.w	18372 <radio_adv_enable+0x3aa>
		conn = mem_acquire(&_radio.conn_free);
   1812a:	487b      	ldr	r0, [pc, #492]	; (18318 <radio_adv_enable+0x350>)
   1812c:	f7f6 faed 	bl	e70a <mem_acquire>
		if (!conn) {
   18130:	4606      	mov	r6, r0
   18132:	2800      	cmp	r0, #0
   18134:	f000 8092 	beq.w	1825c <radio_adv_enable+0x294>
		conn->handle = 0xFFFF;
   18138:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1813c:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   1813e:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   18142:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   18146:	7f43      	ldrb	r3, [r0, #29]
   18148:	f36f 1386 	bfc	r3, #6, #1
   1814c:	7743      	strb	r3, [r0, #29]
		conn->data_chan_use = 0;
   1814e:	2300      	movs	r3, #0
   18150:	77c3      	strb	r3, [r0, #31]
		conn->event_counter = 0;
   18152:	8443      	strh	r3, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
   18154:	8503      	strh	r3, [r0, #40]	; 0x28
		conn->latency_event = 0;
   18156:	8543      	strh	r3, [r0, #42]	; 0x2a
		conn->default_tx_octets = _radio.default_tx_octets;
   18158:	4969      	ldr	r1, [pc, #420]	; (18300 <radio_adv_enable+0x338>)
   1815a:	f8b1 211e 	ldrh.w	r2, [r1, #286]	; 0x11e
   1815e:	8582      	strh	r2, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18160:	221b      	movs	r2, #27
   18162:	85c2      	strh	r2, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18164:	8602      	strh	r2, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   18166:	f8b1 2120 	ldrh.w	r2, [r1, #288]	; 0x120
   1816a:	8642      	strh	r2, [r0, #50]	; 0x32
		conn->max_tx_time =
   1816c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18170:	8682      	strh	r2, [r0, #52]	; 0x34
		conn->max_rx_time =
   18172:	86c2      	strh	r2, [r0, #54]	; 0x36
		conn->phy_pref_tx = _radio.default_phy_tx;
   18174:	f891 0122 	ldrb.w	r0, [r1, #290]	; 0x122
   18178:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
   1817c:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_tx = BIT(0);
   18180:	2001      	movs	r0, #1
   18182:	f360 02c5 	bfi	r2, r0, #3, #3
		conn->phy_flags = 0;
   18186:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   1818a:	f363 12c7 	bfi	r2, r3, #7, #1
   1818e:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   18192:	f896 2039 	ldrb.w	r2, [r6, #57]	; 0x39
   18196:	f360 0202 	bfi	r2, r0, #0, #3
   1819a:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
   1819e:	f891 e124 	ldrb.w	lr, [r1, #292]	; 0x124
   181a2:	b2d2      	uxtb	r2, r2
   181a4:	f36e 02c5 	bfi	r2, lr, #3, #3
   181a8:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_rx = BIT(0);
   181ac:	f896 203a 	ldrb.w	r2, [r6, #58]	; 0x3a
   181b0:	f360 0202 	bfi	r2, r0, #0, #3
   181b4:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
		conn->role = 1;
   181b8:	7f72      	ldrb	r2, [r6, #29]
   181ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   181be:	7772      	strb	r2, [r6, #29]
		conn->connect_expire = 6;
   181c0:	2206      	movs	r2, #6
   181c2:	87b2      	strh	r2, [r6, #60]	; 0x3c
		conn->common.fex_valid = 0;
   181c4:	f896 2050 	ldrb.w	r2, [r6, #80]	; 0x50
		conn->slave.latency_cancel = 0;
   181c8:	f002 02de 	and.w	r2, r2, #222	; 0xde
   181cc:	f363 0241 	bfi	r2, r3, #1, #1
   181d0:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
		conn->slave.window_widening_prepare_us = 0;
   181d4:	65f3      	str	r3, [r6, #92]	; 0x5c
		conn->slave.window_widening_event_us = 0;
   181d6:	6633      	str	r3, [r6, #96]	; 0x60
		conn->slave.ticks_to_offset = 0;
   181d8:	6733      	str	r3, [r6, #112]	; 0x70
		conn->supervision_expire = 0;
   181da:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
		conn->procedure_expire = 0;
   181de:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		conn->apto_expire = 0;
   181e2:	f8a6 304c 	strh.w	r3, [r6, #76]	; 0x4c
		conn->appto_expire = 0;
   181e6:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
		conn->llcp_req = 0;
   181ea:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
		conn->llcp_ack = 0;
   181ee:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		conn->llcp_version.tx = 0;
   181f2:	f896 20a8 	ldrb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_version.rx = 0;
   181f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   181fa:	f363 0241 	bfi	r2, r3, #1, #1
   181fe:	f886 20a8 	strb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_terminate.req = 0;
   18202:	f886 30b0 	strb.w	r3, [r6, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   18206:	f886 30b1 	strb.w	r3, [r6, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   1820a:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   1820e:	f8c6 90b4 	str.w	r9, [r6, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   18212:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   18216:	f886 30c1 	strb.w	r3, [r6, #193]	; 0xc1
		conn->llcp_length.req = 0;
   1821a:	f886 30e8 	strb.w	r3, [r6, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   1821e:	f886 30e9 	strb.w	r3, [r6, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   18222:	f886 30f4 	strb.w	r3, [r6, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   18226:	f886 30f5 	strb.w	r3, [r6, #245]	; 0xf5
		conn->sn = 0;
   1822a:	f896 20f8 	ldrb.w	r2, [r6, #248]	; 0xf8
		conn->empty = 0;
   1822e:	f002 0280 	and.w	r2, r2, #128	; 0x80
   18232:	f363 12c7 	bfi	r2, r3, #7, #1
   18236:	f886 20f8 	strb.w	r2, [r6, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   1823a:	f8c6 313c 	str.w	r3, [r6, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   1823e:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   18242:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   18246:	f8c6 3148 	str.w	r3, [r6, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   1824a:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   1824e:	f886 3150 	strb.w	r3, [r6, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   18252:	f886 3151 	strb.w	r3, [r6, #337]	; 0x151
		_radio.advertiser.conn = conn;
   18256:	f8c1 60c8 	str.w	r6, [r1, #200]	; 0xc8
   1825a:	e6da      	b.n	18012 <radio_adv_enable+0x4a>
			mem_release(link, &_radio.link_rx_free);
   1825c:	492d      	ldr	r1, [pc, #180]	; (18314 <radio_adv_enable+0x34c>)
   1825e:	4648      	mov	r0, r9
   18260:	f7f6 fa6f 	bl	e742 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18264:	2007      	movs	r0, #7
   18266:	e6bd      	b.n	17fe4 <radio_adv_enable+0x1c>
		ticks_slot = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   18268:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1826c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   18270:	ebc0 00c3 	rsb	r0, r0, r3, lsl #3
   18274:	0080      	lsls	r0, r0, #2
   18276:	b280      	uxth	r0, r0
   18278:	f500 709c 	add.w	r0, r0, #312	; 0x138
   1827c:	b280      	uxth	r0, r0
   1827e:	e6f5      	b.n	1806c <radio_adv_enable+0xa4>
		ticks_slot = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   18280:	b280      	uxth	r0, r0
   18282:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18286:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1828a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1828e:	0080      	lsls	r0, r0, #2
   18290:	b280      	uxth	r0, r0
   18292:	e6eb      	b.n	1806c <radio_adv_enable+0xa4>
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18294:	2c00      	cmp	r4, #0
   18296:	f47f aefe 	bne.w	18096 <radio_adv_enable+0xce>
		u32_t ticks_now = ticker_ticks_now_get();
   1829a:	f7f8 f86d 	bl	10378 <ticker_ticks_now_get>
   1829e:	4604      	mov	r4, r0
				    _radio.advertiser.hdr.ticks_slot),
   182a0:	4b17      	ldr	r3, [pc, #92]	; (18300 <radio_adv_enable+0x338>)
   182a2:	6a1b      	ldr	r3, [r3, #32]
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   182a4:	eb08 0203 	add.w	r2, r8, r3
   182a8:	b293      	uxth	r3, r2
   182aa:	a90d      	add	r1, sp, #52	; 0x34
   182ac:	9108      	str	r1, [sp, #32]
   182ae:	4917      	ldr	r1, [pc, #92]	; (1830c <radio_adv_enable+0x344>)
   182b0:	9107      	str	r1, [sp, #28]
   182b2:	2000      	movs	r0, #0
   182b4:	9006      	str	r0, [sp, #24]
   182b6:	4916      	ldr	r1, [pc, #88]	; (18310 <radio_adv_enable+0x348>)
   182b8:	9105      	str	r1, [sp, #20]
   182ba:	9304      	str	r3, [sp, #16]
   182bc:	9003      	str	r0, [sp, #12]
   182be:	9002      	str	r0, [sp, #8]
   182c0:	9201      	str	r2, [sp, #4]
   182c2:	9000      	str	r0, [sp, #0]
   182c4:	4623      	mov	r3, r4
   182c6:	2205      	movs	r2, #5
   182c8:	2103      	movs	r1, #3
   182ca:	f7f7 feed 	bl	100a8 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   182ce:	2802      	cmp	r0, #2
   182d0:	d027      	beq.n	18322 <radio_adv_enable+0x35a>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   182d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   182d4:	b34b      	cbz	r3, 1832a <radio_adv_enable+0x362>
	if (conn) {
   182d6:	2e00      	cmp	r6, #0
   182d8:	d04d      	beq.n	18376 <radio_adv_enable+0x3ae>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   182da:	4c09      	ldr	r4, [pc, #36]	; (18300 <radio_adv_enable+0x338>)
   182dc:	f504 71a2 	add.w	r1, r4, #324	; 0x144
   182e0:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   182e4:	f7f6 fa2d 	bl	e742 <mem_release>
		mem_release(conn, &_radio.conn_free);
   182e8:	f504 7184 	add.w	r1, r4, #264	; 0x108
   182ec:	4630      	mov	r0, r6
   182ee:	f7f6 fa28 	bl	e742 <mem_release>
	return BT_HCI_ERR_CMD_DISALLOWED;
   182f2:	200c      	movs	r0, #12
   182f4:	e676      	b.n	17fe4 <radio_adv_enable+0x1c>
   182f6:	bf00      	nop
   182f8:	1afd498d 	.word	0x1afd498d
   182fc:	00000007 	.word	0x00000007
   18300:	20000dec 	.word	0x20000dec
   18304:	3b9aca00 	.word	0x3b9aca00
   18308:	84e72a00 	.word	0x84e72a00
   1830c:	00010a8d 	.word	0x00010a8d
   18310:	00014415 	.word	0x00014415
   18314:	20000f30 	.word	0x20000f30
   18318:	20000ef4 	.word	0x20000ef4
   1831c:	bf20      	wfe
  __ASM volatile ("sev");
   1831e:	bf40      	sev
  __ASM volatile ("wfe");
   18320:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   18322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18324:	2b02      	cmp	r3, #2
   18326:	d0f9      	beq.n	1831c <radio_adv_enable+0x354>
   18328:	e7d3      	b.n	182d2 <radio_adv_enable+0x30a>
		ret_cb = TICKER_STATUS_BUSY;
   1832a:	ab0e      	add	r3, sp, #56	; 0x38
   1832c:	2202      	movs	r2, #2
   1832e:	f843 2d04 	str.w	r2, [r3, #-4]!
		ret =
   18332:	9308      	str	r3, [sp, #32]
   18334:	4b11      	ldr	r3, [pc, #68]	; (1837c <radio_adv_enable+0x3b4>)
   18336:	9307      	str	r3, [sp, #28]
   18338:	2000      	movs	r0, #0
   1833a:	9006      	str	r0, [sp, #24]
   1833c:	4b10      	ldr	r3, [pc, #64]	; (18380 <radio_adv_enable+0x3b8>)
   1833e:	9305      	str	r3, [sp, #20]
   18340:	9004      	str	r0, [sp, #16]
   18342:	9003      	str	r0, [sp, #12]
   18344:	9002      	str	r0, [sp, #8]
   18346:	9001      	str	r0, [sp, #4]
   18348:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   1834c:	9300      	str	r3, [sp, #0]
   1834e:	4623      	mov	r3, r4
   18350:	2203      	movs	r2, #3
   18352:	4611      	mov	r1, r2
   18354:	f7f7 fea8 	bl	100a8 <ticker_start>
	    !interval) {
   18358:	e6c4      	b.n	180e4 <radio_adv_enable+0x11c>
   1835a:	bf20      	wfe
  __ASM volatile ("sev");
   1835c:	bf40      	sev
  __ASM volatile ("wfe");
   1835e:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   18360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18362:	2b02      	cmp	r3, #2
   18364:	d0f9      	beq.n	1835a <radio_adv_enable+0x392>
   18366:	e6c0      	b.n	180ea <radio_adv_enable+0x122>
			ll_adv_scan_state_cb(BIT(0));
   18368:	2001      	movs	r0, #1
   1836a:	f7ff fe24 	bl	17fb6 <ll_adv_scan_state_cb>
		return 0;
   1836e:	2000      	movs	r0, #0
   18370:	e638      	b.n	17fe4 <radio_adv_enable+0x1c>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18372:	2007      	movs	r0, #7
   18374:	e636      	b.n	17fe4 <radio_adv_enable+0x1c>
	return BT_HCI_ERR_CMD_DISALLOWED;
   18376:	200c      	movs	r0, #12
   18378:	e634      	b.n	17fe4 <radio_adv_enable+0x1c>
   1837a:	bf00      	nop
   1837c:	00010a8d 	.word	0x00010a8d
   18380:	00011609 	.word	0x00011609

00018384 <radio_adv_disable>:
{
   18384:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   18386:	2103      	movs	r1, #3
   18388:	2005      	movs	r0, #5
   1838a:	f7f8 ffc1 	bl	11310 <role_disable>
	if (!status) {
   1838e:	4604      	mov	r4, r0
   18390:	b9f0      	cbnz	r0, 183d0 <radio_adv_disable+0x4c>
		_radio.advertiser.is_enabled = 0;
   18392:	4b13      	ldr	r3, [pc, #76]	; (183e0 <radio_adv_disable+0x5c>)
   18394:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   18398:	f36f 0200 	bfc	r2, #0, #1
   1839c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   183a0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   183a4:	f013 0f01 	tst.w	r3, #1
   183a8:	d016      	beq.n	183d8 <radio_adv_disable+0x54>
		conn = _radio.advertiser.conn;
   183aa:	4b0d      	ldr	r3, [pc, #52]	; (183e0 <radio_adv_disable+0x5c>)
   183ac:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
		if (conn) {
   183b0:	b175      	cbz	r5, 183d0 <radio_adv_disable+0x4c>
			_radio.advertiser.conn = NULL;
   183b2:	461e      	mov	r6, r3
   183b4:	2300      	movs	r3, #0
   183b6:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   183ba:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   183be:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   183c2:	f7f6 f9be 	bl	e742 <mem_release>
			mem_release(conn, &_radio.conn_free);
   183c6:	f506 7184 	add.w	r1, r6, #264	; 0x108
   183ca:	4628      	mov	r0, r5
   183cc:	f7f6 f9b9 	bl	e742 <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   183d0:	b104      	cbz	r4, 183d4 <radio_adv_disable+0x50>
   183d2:	240c      	movs	r4, #12
}
   183d4:	4620      	mov	r0, r4
   183d6:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   183d8:	f7ff fded 	bl	17fb6 <ll_adv_scan_state_cb>
   183dc:	e7e5      	b.n	183aa <radio_adv_disable+0x26>
   183de:	bf00      	nop
   183e0:	20000dec 	.word	0x20000dec
   183e4:	00000000 	.word	0x00000000

000183e8 <radio_scan_enable>:
{
   183e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183ec:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   183ee:	2402      	movs	r4, #2
   183f0:	940d      	str	r4, [sp, #52]	; 0x34
	if (_radio.scanner.is_enabled) {
   183f2:	4c77      	ldr	r4, [pc, #476]	; (185d0 <radio_scan_enable+0x1e8>)
   183f4:	f894 40dc 	ldrb.w	r4, [r4, #220]	; 0xdc
   183f8:	f014 0f01 	tst.w	r4, #1
   183fc:	d003      	beq.n	18406 <radio_scan_enable+0x1e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   183fe:	200c      	movs	r0, #12
}
   18400:	b00f      	add	sp, #60	; 0x3c
   18402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18406:	461d      	mov	r5, r3
   18408:	4617      	mov	r7, r2
   1840a:	460e      	mov	r6, r1
	_radio.scanner.type = type;
   1840c:	4c70      	ldr	r4, [pc, #448]	; (185d0 <radio_scan_enable+0x1e8>)
   1840e:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   18412:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   18416:	f3c0 0042 	ubfx	r0, r0, #1, #3
   1841a:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   1841e:	f894 20de 	ldrb.w	r2, [r4, #222]	; 0xde
   18422:	f89d 1068 	ldrb.w	r1, [sp, #104]	; 0x68
   18426:	f361 0200 	bfi	r2, r1, #0, #1
   1842a:	f884 20de 	strb.w	r2, [r4, #222]	; 0xde
	_radio.scanner.rl_idx = rl_idx;
   1842e:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
   18432:	f884 20df 	strb.w	r2, [r4, #223]	; 0xdf
	_radio.scanner.init_addr_type = init_addr_type;
   18436:	f366 13c7 	bfi	r3, r6, #7, #1
   1843a:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   1843e:	2206      	movs	r2, #6
   18440:	4639      	mov	r1, r7
   18442:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   18446:	f7e7 ff3b 	bl	2c0 <memcpy>
		TICKER_US_TO_TICKS((u64_t) window * 625);
   1844a:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
   1844e:	4e61      	ldr	r6, [pc, #388]	; (185d4 <radio_scan_enable+0x1ec>)
   18450:	f04f 0a91 	mov.w	sl, #145	; 0x91
   18454:	fba2 0106 	umull	r0, r1, r2, r6
   18458:	fb0a 1102 	mla	r1, sl, r2, r1
   1845c:	a35a      	add	r3, pc, #360	; (adr r3, 185c8 <radio_scan_enable+0x1e0>)
   1845e:	e9d3 2300 	ldrd	r2, r3, [r3]
   18462:	f7e8 fe4b 	bl	10fc <__aeabi_uldivmod>
   18466:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_window =
   1846a:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
	_radio.scanner.filter_policy = filter_policy;
   1846e:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   18472:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   18476:	f362 1305 	bfi	r3, r2, #4, #2
   1847a:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
		_radio.ticks_active_to_start;
   1847e:	f8d4 9180 	ldr.w	r9, [r4, #384]	; 0x180
	_radio.scanner.hdr.ticks_active_to_start =
   18482:	f8c4 90d0 	str.w	r9, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_xtal_to_start =
   18486:	2327      	movs	r3, #39	; 0x27
   18488:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	_radio.scanner.hdr.ticks_preempt_to_start =
   1848c:	2300      	movs	r3, #0
   1848e:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		_radio.scanner.ticks_window +
   18492:	f100 0809 	add.w	r8, r0, #9
	_radio.scanner.hdr.ticks_slot =
   18496:	f8c4 80d8 	str.w	r8, [r4, #216]	; 0xd8
	ticks_interval = TICKER_US_TO_TICKS((u64_t) interval * 625);
   1849a:	b2aa      	uxth	r2, r5
   1849c:	fba2 6706 	umull	r6, r7, r2, r6
   184a0:	fb0a 7702 	mla	r7, sl, r2, r7
   184a4:	a348      	add	r3, pc, #288	; (adr r3, 185c8 <radio_scan_enable+0x1e0>)
   184a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   184aa:	4630      	mov	r0, r6
   184ac:	4639      	mov	r1, r7
   184ae:	f7e8 fe25 	bl	10fc <__aeabi_uldivmod>
   184b2:	4604      	mov	r4, r0
   184b4:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
	    (ticks_interval -
   184b8:	f1aa 0327 	sub.w	r3, sl, #39	; 0x27
	if (_radio.scanner.hdr.ticks_slot >
   184bc:	4598      	cmp	r8, r3
   184be:	d902      	bls.n	184c6 <radio_scan_enable+0xde>
		_radio.scanner.hdr.ticks_slot =
   184c0:	4a43      	ldr	r2, [pc, #268]	; (185d0 <radio_scan_enable+0x1e8>)
   184c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
	ticks_slot_offset =
   184c6:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   184ca:	bf38      	it	cc
   184cc:	f04f 0927 	movcc.w	r9, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   184d0:	f7f7 ff52 	bl	10378 <ticker_ticks_now_get>
   184d4:	4683      	mov	fp, r0
	if ((_radio.scanner.conn) ||
   184d6:	4b3e      	ldr	r3, [pc, #248]	; (185d0 <radio_scan_enable+0x1e8>)
   184d8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   184dc:	2b00      	cmp	r3, #0
   184de:	d045      	beq.n	1856c <radio_scan_enable+0x184>
		us_offset = 0;
   184e0:	2300      	movs	r3, #0
   184e2:	930c      	str	r3, [sp, #48]	; 0x30
			   (ticks_anchor + TICKER_US_TO_TICKS(us_offset)), 0,
   184e4:	f04f 0800 	mov.w	r8, #0
   184e8:	a337      	add	r3, pc, #220	; (adr r3, 185c8 <radio_scan_enable+0x1e0>)
   184ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   184ee:	493a      	ldr	r1, [pc, #232]	; (185d8 <radio_scan_enable+0x1f0>)
   184f0:	980c      	ldr	r0, [sp, #48]	; 0x30
   184f2:	fba0 0101 	umull	r0, r1, r0, r1
   184f6:	f7e8 fe01 	bl	10fc <__aeabi_uldivmod>
   184fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   184fe:	4483      	add	fp, r0
			   TICKER_REMAINDER((u64_t) interval * 625),
   18500:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   18504:	2500      	movs	r5, #0
   18506:	4835      	ldr	r0, [pc, #212]	; (185dc <radio_scan_enable+0x1f4>)
   18508:	2307      	movs	r3, #7
   1850a:	fb03 f304 	mul.w	r3, r3, r4
   1850e:	fb00 3305 	mla	r3, r0, r5, r3
   18512:	fba4 0100 	umull	r0, r1, r4, r0
   18516:	4419      	add	r1, r3
   18518:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1851c:	2300      	movs	r3, #0
   1851e:	1a30      	subs	r0, r6, r0
   18520:	eb67 0101 	sbc.w	r1, r7, r1
   18524:	f7e8 fdea 	bl	10fc <__aeabi_uldivmod>
			    _radio.scanner.hdr.ticks_slot),
   18528:	4b29      	ldr	r3, [pc, #164]	; (185d0 <radio_scan_enable+0x1e8>)
   1852a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1852e:	4499      	add	r9, r3
   18530:	fa1f f389 	uxth.w	r3, r9
   18534:	aa0d      	add	r2, sp, #52	; 0x34
   18536:	9208      	str	r2, [sp, #32]
   18538:	4a29      	ldr	r2, [pc, #164]	; (185e0 <radio_scan_enable+0x1f8>)
   1853a:	9207      	str	r2, [sp, #28]
   1853c:	f8cd 8018 	str.w	r8, [sp, #24]
   18540:	4a28      	ldr	r2, [pc, #160]	; (185e4 <radio_scan_enable+0x1fc>)
   18542:	9205      	str	r2, [sp, #20]
   18544:	9304      	str	r3, [sp, #16]
   18546:	f8cd 800c 	str.w	r8, [sp, #12]
   1854a:	9002      	str	r0, [sp, #8]
   1854c:	f8cd a004 	str.w	sl, [sp, #4]
   18550:	f8cd 8000 	str.w	r8, [sp]
   18554:	465b      	mov	r3, fp
   18556:	2206      	movs	r2, #6
   18558:	2103      	movs	r1, #3
   1855a:	4640      	mov	r0, r8
   1855c:	f7f7 fda4 	bl	100a8 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   18560:	2802      	cmp	r0, #2
   18562:	d017      	beq.n	18594 <radio_scan_enable+0x1ac>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   18564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18566:	b1cb      	cbz	r3, 1859c <radio_scan_enable+0x1b4>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18568:	200c      	movs	r0, #12
   1856a:	e749      	b.n	18400 <radio_scan_enable+0x18>
		u32_t ticks_ref = 0;
   1856c:	2300      	movs	r3, #0
   1856e:	930b      	str	r3, [sp, #44]	; 0x2c
						_radio.scanner.hdr.ticks_slot),
   18570:	4b17      	ldr	r3, [pc, #92]	; (185d0 <radio_scan_enable+0x1e8>)
   18572:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   18576:	ab0c      	add	r3, sp, #48	; 0x30
   18578:	aa0b      	add	r2, sp, #44	; 0x2c
   1857a:	4449      	add	r1, r9
   1857c:	2003      	movs	r0, #3
   1857e:	f7f9 ff63 	bl	12448 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   18582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18584:	2b00      	cmp	r3, #0
   18586:	d0ad      	beq.n	184e4 <radio_scan_enable+0xfc>
			ticks_anchor = ticks_ref;
   18588:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   1858c:	e7aa      	b.n	184e4 <radio_scan_enable+0xfc>
   1858e:	bf20      	wfe
  __ASM volatile ("sev");
   18590:	bf40      	sev
  __ASM volatile ("wfe");
   18592:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   18594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18596:	2b02      	cmp	r3, #2
   18598:	d0f9      	beq.n	1858e <radio_scan_enable+0x1a6>
   1859a:	e7e3      	b.n	18564 <radio_scan_enable+0x17c>
	_radio.scanner.is_enabled = 1;
   1859c:	4b0c      	ldr	r3, [pc, #48]	; (185d0 <radio_scan_enable+0x1e8>)
   1859e:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   185a2:	f042 0201 	orr.w	r2, r2, #1
   185a6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	if (!_radio.advertiser.is_enabled) {
   185aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   185ae:	f013 0f01 	tst.w	r3, #1
   185b2:	d001      	beq.n	185b8 <radio_scan_enable+0x1d0>
	return 0;
   185b4:	2000      	movs	r0, #0
   185b6:	e723      	b.n	18400 <radio_scan_enable+0x18>
		ll_adv_scan_state_cb(BIT(1));
   185b8:	2002      	movs	r0, #2
   185ba:	f7ff fcfc 	bl	17fb6 <ll_adv_scan_state_cb>
	return 0;
   185be:	2000      	movs	r0, #0
   185c0:	e71e      	b.n	18400 <radio_scan_enable+0x18>
   185c2:	bf00      	nop
   185c4:	f3af 8000 	nop.w
   185c8:	1afd498d 	.word	0x1afd498d
   185cc:	00000007 	.word	0x00000007
   185d0:	20000dec 	.word	0x20000dec
   185d4:	84e72a00 	.word	0x84e72a00
   185d8:	3b9aca00 	.word	0x3b9aca00
   185dc:	1afd498d 	.word	0x1afd498d
   185e0:	00010a8d 	.word	0x00010a8d
   185e4:	000159c5 	.word	0x000159c5

000185e8 <radio_scan_disable>:
{
   185e8:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   185ea:	2104      	movs	r1, #4
   185ec:	2006      	movs	r0, #6
   185ee:	f7f8 fe8f 	bl	11310 <role_disable>
	if (!status) {
   185f2:	4604      	mov	r4, r0
   185f4:	b9f0      	cbnz	r0, 18634 <radio_scan_disable+0x4c>
		_radio.scanner.is_enabled = 0;
   185f6:	4b13      	ldr	r3, [pc, #76]	; (18644 <radio_scan_disable+0x5c>)
   185f8:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   185fc:	f36f 0200 	bfc	r2, #0, #1
   18600:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		if (!_radio.advertiser.is_enabled) {
   18604:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   18608:	f013 0f01 	tst.w	r3, #1
   1860c:	d016      	beq.n	1863c <radio_scan_disable+0x54>
		conn = _radio.scanner.conn;
   1860e:	4b0d      	ldr	r3, [pc, #52]	; (18644 <radio_scan_disable+0x5c>)
   18610:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
		if (conn) {
   18614:	b175      	cbz	r5, 18634 <radio_scan_disable+0x4c>
			_radio.scanner.conn = NULL;
   18616:	461e      	mov	r6, r3
   18618:	2300      	movs	r3, #0
   1861a:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
			mem_release(conn->llcp_terminate.
   1861e:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   18622:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   18626:	f7f6 f88c 	bl	e742 <mem_release>
			mem_release(conn, &_radio.conn_free);
   1862a:	f506 7184 	add.w	r1, r6, #264	; 0x108
   1862e:	4628      	mov	r0, r5
   18630:	f7f6 f887 	bl	e742 <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   18634:	b104      	cbz	r4, 18638 <radio_scan_disable+0x50>
   18636:	240c      	movs	r4, #12
}
   18638:	4620      	mov	r0, r4
   1863a:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   1863c:	f7ff fcbb 	bl	17fb6 <ll_adv_scan_state_cb>
   18640:	e7e5      	b.n	1860e <radio_scan_disable+0x26>
   18642:	bf00      	nop
   18644:	20000dec 	.word	0x20000dec

00018648 <ll_connect_disable>:
{
   18648:	b508      	push	{r3, lr}
	if (_radio.scanner.conn == 0) {
   1864a:	4b04      	ldr	r3, [pc, #16]	; (1865c <ll_connect_disable+0x14>)
   1864c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   18650:	b113      	cbz	r3, 18658 <ll_connect_disable+0x10>
	status = radio_scan_disable();
   18652:	f7ff ffc9 	bl	185e8 <radio_scan_disable>
	return status;
   18656:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18658:	200c      	movs	r0, #12
}
   1865a:	bd08      	pop	{r3, pc}
   1865c:	20000dec 	.word	0x20000dec

00018660 <radio_rx_dequeue>:
{
   18660:	b530      	push	{r4, r5, lr}
   18662:	b083      	sub	sp, #12
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
   18664:	aa02      	add	r2, sp, #8
   18666:	2300      	movs	r3, #0
   18668:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   1866c:	4947      	ldr	r1, [pc, #284]	; (1878c <radio_rx_dequeue+0x12c>)
   1866e:	f8d1 014c 	ldr.w	r0, [r1, #332]	; 0x14c
   18672:	f501 71a4 	add.w	r1, r1, #328	; 0x148
   18676:	f7f6 f8c0 	bl	e7fa <memq_dequeue>
	LL_ASSERT(link);
   1867a:	b178      	cbz	r0, 1869c <radio_rx_dequeue+0x3c>
	mem_release(link, &_radio.link_rx_free);
   1867c:	4944      	ldr	r1, [pc, #272]	; (18790 <radio_rx_dequeue+0x130>)
   1867e:	f7f6 f860 	bl	e742 <mem_release>
	switch (radio_pdu_node_rx->hdr.type) {
   18682:	9a01      	ldr	r2, [sp, #4]
   18684:	7913      	ldrb	r3, [r2, #4]
   18686:	3b01      	subs	r3, #1
   18688:	2b0b      	cmp	r3, #11
   1868a:	d824      	bhi.n	186d6 <radio_rx_dequeue+0x76>
   1868c:	e8df f003 	tbb	[pc, r3]
   18690:	0c0c0c0c 	.word	0x0c0c0c0c
   18694:	0c180c0c 	.word	0x0c180c0c
   18698:	0c0c0c0c 	.word	0x0c0c0c0c
	LL_ASSERT(link);
   1869c:	4040      	eors	r0, r0
   1869e:	f380 8811 	msr	BASEPRI, r0
   186a2:	f04f 0004 	mov.w	r0, #4
   186a6:	df02      	svc	2
		LL_ASSERT(_radio.link_rx_data_quota <
   186a8:	4938      	ldr	r1, [pc, #224]	; (1878c <radio_rx_dequeue+0x12c>)
   186aa:	f891 3150 	ldrb.w	r3, [r1, #336]	; 0x150
   186ae:	f891 113c 	ldrb.w	r1, [r1, #316]	; 0x13c
   186b2:	3901      	subs	r1, #1
   186b4:	428b      	cmp	r3, r1
   186b6:	da08      	bge.n	186ca <radio_rx_dequeue+0x6a>
		_radio.link_rx_data_quota++;
   186b8:	3301      	adds	r3, #1
   186ba:	4934      	ldr	r1, [pc, #208]	; (1878c <radio_rx_dequeue+0x12c>)
   186bc:	f881 3150 	strb.w	r3, [r1, #336]	; 0x150
	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   186c0:	7913      	ldrb	r3, [r2, #4]
   186c2:	2b06      	cmp	r3, #6
   186c4:	d00d      	beq.n	186e2 <radio_rx_dequeue+0x82>
}
   186c6:	b003      	add	sp, #12
   186c8:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(_radio.link_rx_data_quota <
   186ca:	4040      	eors	r0, r0
   186cc:	f380 8811 	msr	BASEPRI, r0
   186d0:	f04f 0004 	mov.w	r0, #4
   186d4:	df02      	svc	2
		LL_ASSERT(0);
   186d6:	4040      	eors	r0, r0
   186d8:	f380 8811 	msr	BASEPRI, r0
   186dc:	f04f 0004 	mov.w	r0, #4
   186e0:	df02      	svc	2
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   186e2:	7ad3      	ldrb	r3, [r2, #11]
   186e4:	2b3c      	cmp	r3, #60	; 0x3c
   186e6:	d002      	beq.n	186ee <radio_rx_dequeue+0x8e>
		    radio_le_conn_cmplt->role) {
   186e8:	7b12      	ldrb	r2, [r2, #12]
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   186ea:	2a00      	cmp	r2, #0
   186ec:	d039      	beq.n	18762 <radio_rx_dequeue+0x102>
			if (radio_le_conn_cmplt->status == 0x3c) {
   186ee:	2b3c      	cmp	r3, #60	; 0x3c
   186f0:	d02a      	beq.n	18748 <radio_rx_dequeue+0xe8>
		struct connection *conn = NULL;
   186f2:	2400      	movs	r4, #0
			LL_ASSERT(_radio.advertiser.is_enabled);
   186f4:	4b25      	ldr	r3, [pc, #148]	; (1878c <radio_rx_dequeue+0x12c>)
   186f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   186fa:	f013 0f01 	tst.w	r3, #1
   186fe:	d02a      	beq.n	18756 <radio_rx_dequeue+0xf6>
			_radio.advertiser.is_enabled = 0;
   18700:	4b22      	ldr	r3, [pc, #136]	; (1878c <radio_rx_dequeue+0x12c>)
   18702:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   18706:	f36f 0200 	bfc	r2, #0, #1
   1870a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (conn) {
   1870e:	b15c      	cbz	r4, 18728 <radio_rx_dequeue+0xc8>
			mem_release(node_rx->hdr.onion.link,
   18710:	4d1e      	ldr	r5, [pc, #120]	; (1878c <radio_rx_dequeue+0x12c>)
   18712:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   18716:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1871a:	f7f6 f812 	bl	e742 <mem_release>
			mem_release(conn, &_radio.conn_free);
   1871e:	f505 7184 	add.w	r1, r5, #264	; 0x108
   18722:	4620      	mov	r0, r4
   18724:	f7f6 f80d 	bl	e742 <mem_release>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   18728:	4b18      	ldr	r3, [pc, #96]	; (1878c <radio_rx_dequeue+0x12c>)
   1872a:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1872e:	f002 0201 	and.w	r2, r2, #1
		     _radio.advertiser.is_enabled;
   18732:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   18736:	f003 0301 	and.w	r3, r3, #1
		if (!bm) {
   1873a:	ea53 0342 	orrs.w	r3, r3, r2, lsl #1
   1873e:	d1c2      	bne.n	186c6 <radio_rx_dequeue+0x66>
			ll_adv_scan_state_cb(0);
   18740:	2000      	movs	r0, #0
   18742:	f7ff fc38 	bl	17fb6 <ll_adv_scan_state_cb>
}
   18746:	e7be      	b.n	186c6 <radio_rx_dequeue+0x66>
				conn = _radio.advertiser.conn;
   18748:	4b10      	ldr	r3, [pc, #64]	; (1878c <radio_rx_dequeue+0x12c>)
   1874a:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
				_radio.advertiser.conn = NULL;
   1874e:	2200      	movs	r2, #0
   18750:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
   18754:	e7ce      	b.n	186f4 <radio_rx_dequeue+0x94>
			LL_ASSERT(_radio.advertiser.is_enabled);
   18756:	4040      	eors	r0, r0
   18758:	f380 8811 	msr	BASEPRI, r0
   1875c:	f04f 0004 	mov.w	r0, #4
   18760:	df02      	svc	2
			LL_ASSERT(_radio.scanner.is_enabled);
   18762:	4b0a      	ldr	r3, [pc, #40]	; (1878c <radio_rx_dequeue+0x12c>)
   18764:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   18768:	f013 0f01 	tst.w	r3, #1
   1876c:	d008      	beq.n	18780 <radio_rx_dequeue+0x120>
			_radio.scanner.is_enabled = 0;
   1876e:	4b07      	ldr	r3, [pc, #28]	; (1878c <radio_rx_dequeue+0x12c>)
   18770:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   18774:	f36f 0200 	bfc	r2, #0, #1
   18778:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		struct connection *conn = NULL;
   1877c:	2400      	movs	r4, #0
   1877e:	e7c6      	b.n	1870e <radio_rx_dequeue+0xae>
			LL_ASSERT(_radio.scanner.is_enabled);
   18780:	4040      	eors	r0, r0
   18782:	f380 8811 	msr	BASEPRI, r0
   18786:	f04f 0004 	mov.w	r0, #4
   1878a:	df02      	svc	2
   1878c:	20000dec 	.word	0x20000dec
   18790:	20000f30 	.word	0x20000f30

00018794 <radio_nrf5_isr>:
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   18794:	4668      	mov	r0, sp
   18796:	f020 0107 	bic.w	r1, r0, #7
   1879a:	468d      	mov	sp, r1
   1879c:	b501      	push	{r0, lr}
{
	isr_radio();
   1879e:	f7f6 f8e3 	bl	e968 <isr_radio>

	ISR_DIRECT_PM();
   187a2:	f00e fb75 	bl	26e90 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   187a6:	f00e f90f 	bl	269c8 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   187aa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   187ae:	4685      	mov	sp, r0
   187b0:	4770      	bx	lr
	...

000187b4 <rtc0_nrf5_isr>:
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   187b4:	b510      	push	{r4, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   187b6:	4b0c      	ldr	r3, [pc, #48]	; (187e8 <rtc0_nrf5_isr+0x34>)
   187b8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   187bc:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   187c0:	b922      	cbnz	r2, 187cc <rtc0_nrf5_isr+0x18>

		ticker_trigger(0);
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   187c2:	b94c      	cbnz	r4, 187d8 <rtc0_nrf5_isr+0x24>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;

		ticker_trigger(1);
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   187c4:	2000      	movs	r0, #0
   187c6:	f7f5 fec1 	bl	e54c <mayfly_run>
   187ca:	bd10      	pop	{r4, pc}
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   187cc:	2000      	movs	r0, #0
   187ce:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   187d2:	f7f7 fc5b 	bl	1008c <ticker_trigger>
   187d6:	e7f4      	b.n	187c2 <rtc0_nrf5_isr+0xe>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   187d8:	2200      	movs	r2, #0
   187da:	4b03      	ldr	r3, [pc, #12]	; (187e8 <rtc0_nrf5_isr+0x34>)
   187dc:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		ticker_trigger(1);
   187e0:	2001      	movs	r0, #1
   187e2:	f7f7 fc53 	bl	1008c <ticker_trigger>
   187e6:	e7ed      	b.n	187c4 <rtc0_nrf5_isr+0x10>
   187e8:	4000b000 	.word	0x4000b000

000187ec <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
   187ec:	b508      	push	{r3, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
   187ee:	2001      	movs	r0, #1
   187f0:	f7f5 feac 	bl	e54c <mayfly_run>
   187f4:	bd08      	pop	{r3, pc}

000187f6 <rng_nrf5_isr>:
{
   187f6:	b508      	push	{r3, lr}
	isr_rand(arg);
   187f8:	f7f7 f9e2 	bl	fbc0 <isr_rand>
   187fc:	bd08      	pop	{r3, pc}

000187fe <mayfly_enable_cb>:
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   187fe:	2901      	cmp	r1, #1
   18800:	d105      	bne.n	1880e <mayfly_enable_cb+0x10>
{
   18802:	b508      	push	{r3, lr}
	if (enable) {
   18804:	b94a      	cbnz	r2, 1881a <mayfly_enable_cb+0x1c>
		irq_disable(SWI4_IRQn);
   18806:	2018      	movs	r0, #24
   18808:	f00e fb0c 	bl	26e24 <_arch_irq_disable>
   1880c:	bd08      	pop	{r3, pc}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   1880e:	4040      	eors	r0, r0
   18810:	f380 8811 	msr	BASEPRI, r0
   18814:	f04f 0004 	mov.w	r0, #4
   18818:	df02      	svc	2
		irq_enable(SWI4_IRQn);
   1881a:	2018      	movs	r0, #24
   1881c:	f00e faf4 	bl	26e08 <_arch_irq_enable>
   18820:	bd08      	pop	{r3, pc}

00018822 <mayfly_is_enabled>:
{
   18822:	b508      	push	{r3, lr}
	if (callee_id == MAYFLY_CALL_ID_0) {
   18824:	b129      	cbz	r1, 18832 <mayfly_is_enabled+0x10>
	} else if (callee_id == MAYFLY_CALL_ID_1) {
   18826:	2901      	cmp	r1, #1
   18828:	d107      	bne.n	1883a <mayfly_is_enabled+0x18>
		return irq_is_enabled(SWI4_IRQn);
   1882a:	2018      	movs	r0, #24
   1882c:	f00e fb08 	bl	26e40 <_arch_irq_is_enabled>
   18830:	bd08      	pop	{r3, pc}
		return irq_is_enabled(RTC0_IRQn);
   18832:	200b      	movs	r0, #11
   18834:	f00e fb04 	bl	26e40 <_arch_irq_is_enabled>
   18838:	bd08      	pop	{r3, pc}
	LL_ASSERT(0);
   1883a:	4040      	eors	r0, r0
   1883c:	f380 8811 	msr	BASEPRI, r0
   18840:	f04f 0004 	mov.w	r0, #4
   18844:	df02      	svc	2

00018846 <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_1)) ||
   18846:	4288      	cmp	r0, r1
   18848:	d009      	beq.n	1885e <mayfly_prio_is_equal+0x18>
	return (caller_id == callee_id) ||
   1884a:	b908      	cbnz	r0, 18850 <mayfly_prio_is_equal+0xa>
	       ((caller_id == MAYFLY_CALL_ID_0) &&
   1884c:	2901      	cmp	r1, #1
   1884e:	d008      	beq.n	18862 <mayfly_prio_is_equal+0x1c>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   18850:	2801      	cmp	r0, #1
   18852:	d001      	beq.n	18858 <mayfly_prio_is_equal+0x12>
   18854:	2000      	movs	r0, #0
   18856:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_1) &&
   18858:	b129      	cbz	r1, 18866 <mayfly_prio_is_equal+0x20>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   1885a:	2000      	movs	r0, #0
   1885c:	4770      	bx	lr
   1885e:	2001      	movs	r0, #1
   18860:	4770      	bx	lr
   18862:	2001      	movs	r0, #1
   18864:	4770      	bx	lr
   18866:	2001      	movs	r0, #1
}
   18868:	4770      	bx	lr
	...

0001886c <mayfly_pend>:
	switch (callee_id) {
   1886c:	b139      	cbz	r1, 1887e <mayfly_pend+0x12>
   1886e:	2901      	cmp	r1, #1
   18870:	d00b      	beq.n	1888a <mayfly_pend+0x1e>
		LL_ASSERT(0);
   18872:	4040      	eors	r0, r0
   18874:	f380 8811 	msr	BASEPRI, r0
   18878:	f04f 0004 	mov.w	r0, #4
   1887c:	df02      	svc	2
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   1887e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   18882:	4b05      	ldr	r3, [pc, #20]	; (18898 <mayfly_pend+0x2c>)
   18884:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18888:	4770      	bx	lr
   1888a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1888e:	4b02      	ldr	r3, [pc, #8]	; (18898 <mayfly_pend+0x2c>)
   18890:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18894:	4770      	bx	lr
   18896:	bf00      	nop
   18898:	e000e100 	.word	0xe000e100

0001889c <radio_active_callback>:
{
   1889c:	4770      	bx	lr
	...

000188a0 <radio_event_callback>:
{
   188a0:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   188a2:	4b02      	ldr	r3, [pc, #8]	; (188ac <radio_event_callback+0xc>)
   188a4:	6818      	ldr	r0, [r3, #0]
   188a6:	f00f ff44 	bl	28732 <_impl_k_sem_give>
   188aa:	bd08      	pop	{r3, pc}
   188ac:	20001710 	.word	0x20001710

000188b0 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   188b0:	b510      	push	{r4, lr}
   188b2:	b086      	sub	sp, #24
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
   188b4:	4b37      	ldr	r3, [pc, #220]	; (18994 <ll_init+0xe4>)
   188b6:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(rand_context, sizeof(rand_context), RAND_THREAD_THRESHOLD);
   188b8:	2204      	movs	r2, #4
   188ba:	2109      	movs	r1, #9
   188bc:	4836      	ldr	r0, [pc, #216]	; (18998 <ll_init+0xe8>)
   188be:	f7f7 f957 	bl	fb70 <rand_init>
	rand_isr_init(rand_isr_context, sizeof(rand_isr_context),
   188c2:	220c      	movs	r2, #12
   188c4:	2111      	movs	r1, #17
   188c6:	4835      	ldr	r0, [pc, #212]	; (1899c <ll_init+0xec>)
   188c8:	f7f7 f95c 	bl	fb84 <rand_isr_init>
		      RAND_ISR_THRESHOLD);

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   188cc:	4834      	ldr	r0, [pc, #208]	; (189a0 <ll_init+0xf0>)
   188ce:	f00e fc69 	bl	271a4 <device_get_binding>
	if (!clk_k32) {
   188d2:	2800      	cmp	r0, #0
   188d4:	d054      	beq.n	18980 <ll_init+0xd0>
	const struct clock_control_driver_api *api = dev->driver_api;
   188d6:	6842      	ldr	r2, [r0, #4]
	return api->on(dev, sys);
   188d8:	6812      	ldr	r2, [r2, #0]
   188da:	2101      	movs	r1, #1
   188dc:	4790      	blx	r2
	}

	clock_control_on(clk_k32, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: bind and use counter driver */
	cntr_init();
   188de:	f7f5 ffad 	bl	e83c <cntr_init>

	mayfly_init();
   188e2:	f7f5 fd67 	bl	e3b4 <mayfly_init>

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   188e6:	4b2f      	ldr	r3, [pc, #188]	; (189a4 <ll_init+0xf4>)
   188e8:	2108      	movs	r1, #8
   188ea:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   188ec:	2203      	movs	r2, #3
   188ee:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   188f0:	2000      	movs	r0, #0
   188f2:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   188f4:	2202      	movs	r2, #2
   188f6:	761a      	strb	r2, [r3, #24]

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
   188f8:	4a2b      	ldr	r2, [pc, #172]	; (189a8 <ll_init+0xf8>)
   188fa:	9202      	str	r2, [sp, #8]
   188fc:	220d      	movs	r2, #13
   188fe:	9201      	str	r2, [sp, #4]
   18900:	9300      	str	r3, [sp, #0]
   18902:	2304      	movs	r3, #4
   18904:	4a29      	ldr	r2, [pc, #164]	; (189ac <ll_init+0xfc>)
   18906:	f7f7 fb67 	bl	ffd8 <ticker_init>
		    &_ticker_nodes[0], MAYFLY_CALLER_COUNT, &_ticker_users[0],
		    TICKER_USER_OPS, &_ticker_user_ops[0]);

	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   1890a:	4829      	ldr	r0, [pc, #164]	; (189b0 <ll_init+0x100>)
   1890c:	f00e fc4a 	bl	271a4 <device_get_binding>
	if (!clk_m16) {
   18910:	2800      	cmp	r0, #0
   18912:	d038      	beq.n	18986 <ll_init+0xd6>
		return -ENODEV;
	}

	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
   18914:	f44f 7357 	mov.w	r3, #860	; 0x35c
   18918:	9304      	str	r3, [sp, #16]
   1891a:	4b26      	ldr	r3, [pc, #152]	; (189b4 <ll_init+0x104>)
   1891c:	9303      	str	r3, [sp, #12]
   1891e:	231b      	movs	r3, #27
   18920:	9302      	str	r3, [sp, #8]
   18922:	9301      	str	r3, [sp, #4]
   18924:	2302      	movs	r3, #2
   18926:	9300      	str	r3, [sp, #0]
   18928:	2301      	movs	r3, #1
   1892a:	461a      	mov	r2, r3
   1892c:	2107      	movs	r1, #7
   1892e:	f7fe fccb 	bl	172c8 <radio_init>
			 RADIO_CONNECTION_CONTEXT_MAX,
			 RADIO_PACKET_COUNT_RX_MAX,
			 RADIO_PACKET_COUNT_TX_MAX,
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
   18932:	bb58      	cbnz	r0, 1898c <ll_init+0xdc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
		       sizeof(_radio));
		return -ENOMEM;
	}

	ll_filter_reset(true);
   18934:	2001      	movs	r0, #1
   18936:	f000 ffff 	bl	19938 <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   1893a:	2200      	movs	r2, #0
   1893c:	4611      	mov	r1, r2
   1893e:	2001      	movs	r0, #1
   18940:	f00e fa8c 	bl	26e5c <_irq_priority_set>
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   18944:	2200      	movs	r2, #0
   18946:	4611      	mov	r1, r2
   18948:	200b      	movs	r0, #11
   1894a:	f00e fa87 	bl	26e5c <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   1894e:	2200      	movs	r2, #0
   18950:	4611      	mov	r1, r2
   18952:	2018      	movs	r0, #24
   18954:	f00e fa82 	bl	26e5c <_irq_priority_set>
		    NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
   18958:	2200      	movs	r2, #0
   1895a:	2101      	movs	r1, #1
   1895c:	200d      	movs	r0, #13
   1895e:	f00e fa7d 	bl	26e5c <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
   18962:	2001      	movs	r0, #1
   18964:	f00e fa50 	bl	26e08 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   18968:	200b      	movs	r0, #11
   1896a:	f00e fa4d 	bl	26e08 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   1896e:	2018      	movs	r0, #24
   18970:	f00e fa4a 	bl	26e08 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
   18974:	200d      	movs	r0, #13
   18976:	f00e fa47 	bl	26e08 <_arch_irq_enable>

	return 0;
   1897a:	2000      	movs	r0, #0
}
   1897c:	b006      	add	sp, #24
   1897e:	bd10      	pop	{r4, pc}
		return -ENODEV;
   18980:	f06f 0012 	mvn.w	r0, #18
   18984:	e7fa      	b.n	1897c <ll_init+0xcc>
		return -ENODEV;
   18986:	f06f 0012 	mvn.w	r0, #18
   1898a:	e7f7      	b.n	1897c <ll_init+0xcc>
		return -ENOMEM;
   1898c:	f06f 000b 	mvn.w	r0, #11
   18990:	e7f4      	b.n	1897c <ll_init+0xcc>
   18992:	bf00      	nop
   18994:	20001710 	.word	0x20001710
   18998:	200016f0 	.word	0x200016f0
   1899c:	200016fc 	.word	0x200016fc
   189a0:	0002f46c 	.word	0x0002f46c
   189a4:	200016d0 	.word	0x200016d0
   189a8:	20001494 	.word	0x20001494
   189ac:	20001374 	.word	0x20001374
   189b0:	0002f478 	.word	0x0002f478
   189b4:	20000f74 	.word	0x20000f74

000189b8 <ll_addr_get>:
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
}

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type > 1) {
   189b8:	2801      	cmp	r0, #1
   189ba:	d814      	bhi.n	189e6 <ll_addr_get+0x2e>
{
   189bc:	b538      	push	{r3, r4, r5, lr}
   189be:	460c      	mov	r4, r1
		return NULL;
	}

	if (addr_type) {
   189c0:	b140      	cbz	r0, 189d4 <ll_addr_get+0x1c>
		if (bdaddr) {
   189c2:	b191      	cbz	r1, 189ea <ll_addr_get+0x32>
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
   189c4:	4d0b      	ldr	r5, [pc, #44]	; (189f4 <ll_addr_get+0x3c>)
   189c6:	2206      	movs	r2, #6
   189c8:	4629      	mov	r1, r5
   189ca:	4620      	mov	r0, r4
   189cc:	f7e7 fc78 	bl	2c0 <memcpy>
		}

		return _ll_context.rnd_addr;
   189d0:	4628      	mov	r0, r5
   189d2:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (bdaddr) {
   189d4:	b159      	cbz	r1, 189ee <ll_addr_get+0x36>
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
   189d6:	4d08      	ldr	r5, [pc, #32]	; (189f8 <ll_addr_get+0x40>)
   189d8:	2206      	movs	r2, #6
   189da:	4629      	mov	r1, r5
   189dc:	4620      	mov	r0, r4
   189de:	f7e7 fc6f 	bl	2c0 <memcpy>
	}

	return _ll_context.pub_addr;
   189e2:	4628      	mov	r0, r5
   189e4:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   189e6:	2000      	movs	r0, #0
   189e8:	4770      	bx	lr
		return _ll_context.rnd_addr;
   189ea:	4802      	ldr	r0, [pc, #8]	; (189f4 <ll_addr_get+0x3c>)
   189ec:	bd38      	pop	{r3, r4, r5, pc}
	return _ll_context.pub_addr;
   189ee:	4802      	ldr	r0, [pc, #8]	; (189f8 <ll_addr_get+0x40>)
}
   189f0:	bd38      	pop	{r3, r4, r5, pc}
   189f2:	bf00      	nop
   189f4:	2000136e 	.word	0x2000136e
   189f8:	20001368 	.word	0x20001368

000189fc <ll_addr_set>:

void ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   189fc:	b508      	push	{r3, lr}
	if (addr_type) {
   189fe:	b920      	cbnz	r0, 18a0a <ll_addr_set+0xe>
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
	} else {
		memcpy(_ll_context.pub_addr, bdaddr, BDADDR_SIZE);
   18a00:	2206      	movs	r2, #6
   18a02:	4804      	ldr	r0, [pc, #16]	; (18a14 <ll_addr_set+0x18>)
   18a04:	f7e7 fc5c 	bl	2c0 <memcpy>
   18a08:	bd08      	pop	{r3, pc}
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
   18a0a:	2206      	movs	r2, #6
   18a0c:	4802      	ldr	r0, [pc, #8]	; (18a18 <ll_addr_set+0x1c>)
   18a0e:	f7e7 fc57 	bl	2c0 <memcpy>
   18a12:	bd08      	pop	{r3, pc}
   18a14:	20001368 	.word	0x20001368
   18a18:	2000136e 	.word	0x2000136e

00018a1c <wl_clear>:
	for (int i = 0; i < WL_SIZE; i++) {
   18a1c:	2300      	movs	r3, #0
   18a1e:	e007      	b.n	18a30 <wl_clear+0x14>
		wl[i].taken = 0;
   18a20:	4a05      	ldr	r2, [pc, #20]	; (18a38 <wl_clear+0x1c>)
   18a22:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   18a26:	f36f 0100 	bfc	r1, #0, #1
   18a2a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   18a2e:	3301      	adds	r3, #1
   18a30:	2b07      	cmp	r3, #7
   18a32:	ddf5      	ble.n	18a20 <wl_clear+0x4>
}
   18a34:	4770      	bx	lr
   18a36:	bf00      	nop
   18a38:	20001948 	.word	0x20001948

00018a3c <filter_clear>:
	filter->enable_bitmask = 0;
   18a3c:	2300      	movs	r3, #0
   18a3e:	7003      	strb	r3, [r0, #0]
	filter->addr_type_bitmask = 0;
   18a40:	7043      	strb	r3, [r0, #1]
   18a42:	4770      	bx	lr

00018a44 <rl_clear>:
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18a44:	2300      	movs	r3, #0
   18a46:	e009      	b.n	18a5c <rl_clear+0x18>
		rl[i].taken = 0;
   18a48:	4907      	ldr	r1, [pc, #28]	; (18a68 <rl_clear+0x24>)
   18a4a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   18a4e:	00c2      	lsls	r2, r0, #3
   18a50:	5c88      	ldrb	r0, [r1, r2]
   18a52:	f36f 0000 	bfc	r0, #0, #1
   18a56:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18a58:	3301      	adds	r3, #1
   18a5a:	b2db      	uxtb	r3, r3
   18a5c:	2b07      	cmp	r3, #7
   18a5e:	d9f3      	bls.n	18a48 <rl_clear+0x4>
	peer_irk_count = 0;
   18a60:	2200      	movs	r2, #0
   18a62:	4b02      	ldr	r3, [pc, #8]	; (18a6c <rl_clear+0x28>)
   18a64:	701a      	strb	r2, [r3, #0]
   18a66:	4770      	bx	lr
   18a68:	200017d0 	.word	0x200017d0
   18a6c:	20001744 	.word	0x20001744

00018a70 <wl_find>:
{
   18a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a72:	4606      	mov	r6, r0
   18a74:	460f      	mov	r7, r1
	if (free) {
   18a76:	4615      	mov	r5, r2
   18a78:	b10a      	cbz	r2, 18a7e <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   18a7a:	23ff      	movs	r3, #255	; 0xff
   18a7c:	7013      	strb	r3, [r2, #0]
{
   18a7e:	2400      	movs	r4, #0
   18a80:	e00c      	b.n	18a9c <wl_find+0x2c>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18a82:	4816      	ldr	r0, [pc, #88]	; (18adc <wl_find+0x6c>)
   18a84:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   18a88:	2206      	movs	r2, #6
   18a8a:	4639      	mov	r1, r7
   18a8c:	3002      	adds	r0, #2
   18a8e:	f010 fd8f 	bl	295b0 <memcmp>
   18a92:	b9a0      	cbnz	r0, 18abe <wl_find+0x4e>
			return i;
   18a94:	b2e0      	uxtb	r0, r4
   18a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*free = i;
   18a98:	702c      	strb	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   18a9a:	3401      	adds	r4, #1
   18a9c:	2c07      	cmp	r4, #7
   18a9e:	dc1a      	bgt.n	18ad6 <wl_find+0x66>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18aa0:	4b0e      	ldr	r3, [pc, #56]	; (18adc <wl_find+0x6c>)
   18aa2:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   18aa6:	f013 0f01 	tst.w	r3, #1
   18aaa:	d008      	beq.n	18abe <wl_find+0x4e>
   18aac:	4b0b      	ldr	r3, [pc, #44]	; (18adc <wl_find+0x6c>)
   18aae:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   18ab2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   18ab6:	f006 0201 	and.w	r2, r6, #1
   18aba:	4293      	cmp	r3, r2
   18abc:	d0e1      	beq.n	18a82 <wl_find+0x12>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   18abe:	2d00      	cmp	r5, #0
   18ac0:	d0eb      	beq.n	18a9a <wl_find+0x2a>
   18ac2:	4b06      	ldr	r3, [pc, #24]	; (18adc <wl_find+0x6c>)
   18ac4:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   18ac8:	f013 0f01 	tst.w	r3, #1
   18acc:	d1e5      	bne.n	18a9a <wl_find+0x2a>
   18ace:	782b      	ldrb	r3, [r5, #0]
   18ad0:	2bff      	cmp	r3, #255	; 0xff
   18ad2:	d1e2      	bne.n	18a9a <wl_find+0x2a>
   18ad4:	e7e0      	b.n	18a98 <wl_find+0x28>
	return FILTER_IDX_NONE;
   18ad6:	20ff      	movs	r0, #255	; 0xff
}
   18ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18ada:	bf00      	nop
   18adc:	20001948 	.word	0x20001948

00018ae0 <wl_remove>:
{
   18ae0:	b508      	push	{r3, lr}
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   18ae2:	4601      	mov	r1, r0
   18ae4:	f811 0b01 	ldrb.w	r0, [r1], #1
   18ae8:	2200      	movs	r2, #0
   18aea:	f7ff ffc1 	bl	18a70 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   18aee:	2807      	cmp	r0, #7
   18af0:	d901      	bls.n	18af6 <wl_remove+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18af2:	2002      	movs	r0, #2
}
   18af4:	bd08      	pop	{r3, pc}
		u8_t j = wl[i].rl_idx;
   18af6:	4b0b      	ldr	r3, [pc, #44]	; (18b24 <wl_remove+0x44>)
   18af8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   18afc:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   18afe:	2b07      	cmp	r3, #7
   18b00:	d807      	bhi.n	18b12 <wl_remove+0x32>
			rl[j].wl = 0;
   18b02:	4909      	ldr	r1, [pc, #36]	; (18b28 <wl_remove+0x48>)
   18b04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   18b08:	00da      	lsls	r2, r3, #3
   18b0a:	5c8b      	ldrb	r3, [r1, r2]
   18b0c:	f36f 1345 	bfc	r3, #5, #1
   18b10:	548b      	strb	r3, [r1, r2]
		wl[i].taken = 0;
   18b12:	4b04      	ldr	r3, [pc, #16]	; (18b24 <wl_remove+0x44>)
   18b14:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   18b18:	f36f 0200 	bfc	r2, #0, #1
   18b1c:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
		return 0;
   18b20:	2000      	movs	r0, #0
   18b22:	bd08      	pop	{r3, pc}
   18b24:	20001948 	.word	0x20001948
   18b28:	200017d0 	.word	0x200017d0

00018b2c <filter_insert>:
{
   18b2c:	b538      	push	{r3, r4, r5, lr}
	filter->enable_bitmask |= BIT(index);
   18b2e:	2401      	movs	r4, #1
   18b30:	fa04 f501 	lsl.w	r5, r4, r1
   18b34:	7804      	ldrb	r4, [r0, #0]
   18b36:	432c      	orrs	r4, r5
   18b38:	7004      	strb	r4, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18b3a:	f002 0201 	and.w	r2, r2, #1
   18b3e:	fa02 f401 	lsl.w	r4, r2, r1
   18b42:	7842      	ldrb	r2, [r0, #1]
   18b44:	4322      	orrs	r2, r4
   18b46:	7042      	strb	r2, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18b48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   18b4c:	004a      	lsls	r2, r1, #1
   18b4e:	4410      	add	r0, r2
   18b50:	2206      	movs	r2, #6
   18b52:	4619      	mov	r1, r3
   18b54:	3002      	adds	r0, #2
   18b56:	f7e7 fbb3 	bl	2c0 <memcpy>
   18b5a:	bd38      	pop	{r3, r4, r5, pc}

00018b5c <filter_wl_update>:
{
   18b5c:	b510      	push	{r4, lr}
	filter_clear(&wl_filter);
   18b5e:	481b      	ldr	r0, [pc, #108]	; (18bcc <filter_wl_update+0x70>)
   18b60:	f7ff ff6c 	bl	18a3c <filter_clear>
	for (i = 0; i < WL_SIZE; i++) {
   18b64:	2400      	movs	r4, #0
   18b66:	e00c      	b.n	18b82 <filter_wl_update+0x26>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   18b68:	4b19      	ldr	r3, [pc, #100]	; (18bd0 <filter_wl_update+0x74>)
   18b6a:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
				      wl[i].id_addr.val);
   18b6e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   18b72:	3302      	adds	r3, #2
   18b74:	f3c2 0240 	ubfx	r2, r2, #1, #1
   18b78:	4814      	ldr	r0, [pc, #80]	; (18bcc <filter_wl_update+0x70>)
   18b7a:	f7ff ffd7 	bl	18b2c <filter_insert>
	for (i = 0; i < WL_SIZE; i++) {
   18b7e:	3401      	adds	r4, #1
   18b80:	b2e4      	uxtb	r4, r4
   18b82:	2c07      	cmp	r4, #7
   18b84:	d820      	bhi.n	18bc8 <filter_wl_update+0x6c>
		if (!wl[i].taken) {
   18b86:	4621      	mov	r1, r4
   18b88:	4b11      	ldr	r3, [pc, #68]	; (18bd0 <filter_wl_update+0x74>)
   18b8a:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   18b8e:	f013 0f01 	tst.w	r3, #1
   18b92:	d0f4      	beq.n	18b7e <filter_wl_update+0x22>
		j = wl[i].rl_idx;
   18b94:	4b0e      	ldr	r3, [pc, #56]	; (18bd0 <filter_wl_update+0x74>)
   18b96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   18b9a:	785b      	ldrb	r3, [r3, #1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   18b9c:	4a0d      	ldr	r2, [pc, #52]	; (18bd4 <filter_wl_update+0x78>)
   18b9e:	7812      	ldrb	r2, [r2, #0]
   18ba0:	2a00      	cmp	r2, #0
   18ba2:	d0e1      	beq.n	18b68 <filter_wl_update+0xc>
   18ba4:	2b07      	cmp	r3, #7
   18ba6:	d8df      	bhi.n	18b68 <filter_wl_update+0xc>
   18ba8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   18bac:	00c2      	lsls	r2, r0, #3
   18bae:	480a      	ldr	r0, [pc, #40]	; (18bd8 <filter_wl_update+0x7c>)
   18bb0:	5c82      	ldrb	r2, [r0, r2]
   18bb2:	f012 0f04 	tst.w	r2, #4
   18bb6:	d0d7      	beq.n	18b68 <filter_wl_update+0xc>
		    rl[j].dev) {
   18bb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   18bbc:	00da      	lsls	r2, r3, #3
   18bbe:	5c83      	ldrb	r3, [r0, r2]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   18bc0:	f013 0f10 	tst.w	r3, #16
   18bc4:	d0db      	beq.n	18b7e <filter_wl_update+0x22>
   18bc6:	e7cf      	b.n	18b68 <filter_wl_update+0xc>
}
   18bc8:	bd10      	pop	{r4, pc}
   18bca:	bf00      	nop
   18bcc:	20001988 	.word	0x20001988
   18bd0:	20001948 	.word	0x20001948
   18bd4:	20001910 	.word	0x20001910
   18bd8:	200017d0 	.word	0x200017d0

00018bdc <filter_rl_update>:
{
   18bdc:	b510      	push	{r4, lr}
	filter_clear(&rl_filter);
   18bde:	4810      	ldr	r0, [pc, #64]	; (18c20 <filter_rl_update+0x44>)
   18be0:	f7ff ff2c 	bl	18a3c <filter_clear>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18be4:	2400      	movs	r4, #0
   18be6:	e001      	b.n	18bec <filter_rl_update+0x10>
   18be8:	3401      	adds	r4, #1
   18bea:	b2e4      	uxtb	r4, r4
   18bec:	2c07      	cmp	r4, #7
   18bee:	d815      	bhi.n	18c1c <filter_rl_update+0x40>
		if (rl[i].taken) {
   18bf0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18bf4:	00d3      	lsls	r3, r2, #3
   18bf6:	4a0b      	ldr	r2, [pc, #44]	; (18c24 <filter_rl_update+0x48>)
   18bf8:	5cd3      	ldrb	r3, [r2, r3]
   18bfa:	f013 0f01 	tst.w	r3, #1
   18bfe:	d0f3      	beq.n	18be8 <filter_rl_update+0xc>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   18c00:	4611      	mov	r1, r2
   18c02:	00a3      	lsls	r3, r4, #2
   18c04:	4423      	add	r3, r4
   18c06:	00da      	lsls	r2, r3, #3
   18c08:	188b      	adds	r3, r1, r2
   18c0a:	5c8a      	ldrb	r2, [r1, r2]
   18c0c:	3301      	adds	r3, #1
   18c0e:	f3c2 1280 	ubfx	r2, r2, #6, #1
   18c12:	4621      	mov	r1, r4
   18c14:	4802      	ldr	r0, [pc, #8]	; (18c20 <filter_rl_update+0x44>)
   18c16:	f7ff ff89 	bl	18b2c <filter_insert>
   18c1a:	e7e5      	b.n	18be8 <filter_rl_update+0xc>
}
   18c1c:	bd10      	pop	{r4, pc}
   18c1e:	bf00      	nop
   18c20:	20001914 	.word	0x20001914
   18c24:	200017d0 	.word	0x200017d0

00018c28 <rl_access_check>:
{
   18c28:	b508      	push	{r3, lr}
	if (check_ar) {
   18c2a:	b110      	cbz	r0, 18c32 <rl_access_check+0xa>
		if (!rl_enable) {
   18c2c:	4b08      	ldr	r3, [pc, #32]	; (18c50 <rl_access_check+0x28>)
   18c2e:	781b      	ldrb	r3, [r3, #0]
   18c30:	b15b      	cbz	r3, 18c4a <rl_access_check+0x22>
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   18c32:	f7fe fc27 	bl	17484 <radio_adv_is_enabled>
   18c36:	b108      	cbz	r0, 18c3c <rl_access_check+0x14>
   18c38:	2000      	movs	r0, #0
   18c3a:	bd08      	pop	{r3, pc}
   18c3c:	f7fe fc3a 	bl	174b4 <radio_scan_is_enabled>
   18c40:	b108      	cbz	r0, 18c46 <rl_access_check+0x1e>
   18c42:	2000      	movs	r0, #0
}
   18c44:	bd08      	pop	{r3, pc}
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   18c46:	2001      	movs	r0, #1
   18c48:	bd08      	pop	{r3, pc}
			return -1;
   18c4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18c4e:	bd08      	pop	{r3, pc}
   18c50:	20001910 	.word	0x20001910

00018c54 <rpa_refresh_start>:
{
   18c54:	b508      	push	{r3, lr}
	if (!rl_enable) {
   18c56:	4b05      	ldr	r3, [pc, #20]	; (18c6c <rpa_refresh_start+0x18>)
   18c58:	781b      	ldrb	r3, [r3, #0]
   18c5a:	b903      	cbnz	r3, 18c5e <rpa_refresh_start+0xa>
   18c5c:	bd08      	pop	{r3, pc}
   18c5e:	4b04      	ldr	r3, [pc, #16]	; (18c70 <rpa_refresh_start+0x1c>)
   18c60:	681a      	ldr	r2, [r3, #0]
   18c62:	4904      	ldr	r1, [pc, #16]	; (18c74 <rpa_refresh_start+0x20>)
   18c64:	4804      	ldr	r0, [pc, #16]	; (18c78 <rpa_refresh_start+0x24>)
   18c66:	f010 fbad 	bl	293c4 <k_delayed_work_submit_to_queue>
   18c6a:	e7f7      	b.n	18c5c <rpa_refresh_start+0x8>
   18c6c:	20001910 	.word	0x20001910
   18c70:	20002a5c 	.word	0x20002a5c
   18c74:	20002928 	.word	0x20002928
   18c78:	20002a70 	.word	0x20002a70

00018c7c <rpa_refresh_stop>:
{
   18c7c:	b508      	push	{r3, lr}
	if (!rl_enable) {
   18c7e:	4b04      	ldr	r3, [pc, #16]	; (18c90 <rpa_refresh_stop+0x14>)
   18c80:	781b      	ldrb	r3, [r3, #0]
   18c82:	b903      	cbnz	r3, 18c86 <rpa_refresh_stop+0xa>
   18c84:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&rpa_work);
   18c86:	4803      	ldr	r0, [pc, #12]	; (18c94 <rpa_refresh_stop+0x18>)
   18c88:	f010 fb42 	bl	29310 <k_delayed_work_cancel>
   18c8c:	e7fa      	b.n	18c84 <rpa_refresh_stop+0x8>
   18c8e:	bf00      	nop
   18c90:	20001910 	.word	0x20001910
   18c94:	20002928 	.word	0x20002928

00018c98 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   18c98:	2807      	cmp	r0, #7
   18c9a:	d816      	bhi.n	18cca <ctrl_lrpa_get+0x32>
   18c9c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   18ca0:	00d3      	lsls	r3, r2, #3
   18ca2:	4a0d      	ldr	r2, [pc, #52]	; (18cd8 <ctrl_lrpa_get+0x40>)
   18ca4:	5cd3      	ldrb	r3, [r2, r3]
   18ca6:	f013 0f08 	tst.w	r3, #8
   18caa:	d010      	beq.n	18cce <ctrl_lrpa_get+0x36>
	    !rl[rl_idx].rpas_ready) {
   18cac:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   18cb0:	00d3      	lsls	r3, r2, #3
   18cb2:	4a09      	ldr	r2, [pc, #36]	; (18cd8 <ctrl_lrpa_get+0x40>)
   18cb4:	5cd3      	ldrb	r3, [r2, r3]
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   18cb6:	f013 0f02 	tst.w	r3, #2
   18cba:	d00a      	beq.n	18cd2 <ctrl_lrpa_get+0x3a>
	return rl[rl_idx].local_rpa;
   18cbc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18cc0:	00c2      	lsls	r2, r0, #3
   18cc2:	4b05      	ldr	r3, [pc, #20]	; (18cd8 <ctrl_lrpa_get+0x40>)
   18cc4:	4413      	add	r3, r2
   18cc6:	6a58      	ldr	r0, [r3, #36]	; 0x24
   18cc8:	4770      	bx	lr
		return NULL;
   18cca:	2000      	movs	r0, #0
   18ccc:	4770      	bx	lr
   18cce:	2000      	movs	r0, #0
   18cd0:	4770      	bx	lr
   18cd2:	2000      	movs	r0, #0
}
   18cd4:	4770      	bx	lr
   18cd6:	bf00      	nop
   18cd8:	200017d0 	.word	0x200017d0

00018cdc <ctrl_irks_get>:
	*count = peer_irk_count;
   18cdc:	4b02      	ldr	r3, [pc, #8]	; (18ce8 <ctrl_irks_get+0xc>)
   18cde:	781b      	ldrb	r3, [r3, #0]
   18ce0:	7003      	strb	r3, [r0, #0]
}
   18ce2:	4802      	ldr	r0, [pc, #8]	; (18cec <ctrl_irks_get+0x10>)
   18ce4:	4770      	bx	lr
   18ce6:	bf00      	nop
   18ce8:	20001744 	.word	0x20001744
   18cec:	20001750 	.word	0x20001750

00018cf0 <ctrl_rl_idx>:
	if (whitelist) {
   18cf0:	b1c8      	cbz	r0, 18d26 <ctrl_rl_idx+0x36>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   18cf2:	2907      	cmp	r1, #7
   18cf4:	d80b      	bhi.n	18d0e <ctrl_rl_idx+0x1e>
		LL_ASSERT(wl[devmatch_id].taken);
   18cf6:	4b17      	ldr	r3, [pc, #92]	; (18d54 <ctrl_rl_idx+0x64>)
   18cf8:	f813 3031 	ldrb.w	r3, [r3, r1, lsl #3]
   18cfc:	f013 0f01 	tst.w	r3, #1
   18d00:	d00b      	beq.n	18d1a <ctrl_rl_idx+0x2a>
		i = wl[devmatch_id].rl_idx;
   18d02:	4b14      	ldr	r3, [pc, #80]	; (18d54 <ctrl_rl_idx+0x64>)
   18d04:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   18d08:	7849      	ldrb	r1, [r1, #1]
}
   18d0a:	4608      	mov	r0, r1
   18d0c:	4770      	bx	lr
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   18d0e:	4040      	eors	r0, r0
   18d10:	f380 8811 	msr	BASEPRI, r0
   18d14:	f04f 0004 	mov.w	r0, #4
   18d18:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   18d1a:	4040      	eors	r0, r0
   18d1c:	f380 8811 	msr	BASEPRI, r0
   18d20:	f04f 0004 	mov.w	r0, #4
   18d24:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   18d26:	2907      	cmp	r1, #7
   18d28:	d80d      	bhi.n	18d46 <ctrl_rl_idx+0x56>
		LL_ASSERT(rl[i].taken);
   18d2a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   18d2e:	00d3      	lsls	r3, r2, #3
   18d30:	4a09      	ldr	r2, [pc, #36]	; (18d58 <ctrl_rl_idx+0x68>)
   18d32:	5cd3      	ldrb	r3, [r2, r3]
   18d34:	f013 0f01 	tst.w	r3, #1
   18d38:	d1e7      	bne.n	18d0a <ctrl_rl_idx+0x1a>
   18d3a:	4040      	eors	r0, r0
   18d3c:	f380 8811 	msr	BASEPRI, r0
   18d40:	f04f 0004 	mov.w	r0, #4
   18d44:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   18d46:	4040      	eors	r0, r0
   18d48:	f380 8811 	msr	BASEPRI, r0
   18d4c:	f04f 0004 	mov.w	r0, #4
   18d50:	df02      	svc	2
   18d52:	bf00      	nop
   18d54:	20001948 	.word	0x20001948
   18d58:	200017d0 	.word	0x200017d0

00018d5c <ctrl_rl_irk_idx>:
	LL_ASSERT(irkmatch_id < peer_irk_count);
   18d5c:	4b11      	ldr	r3, [pc, #68]	; (18da4 <ctrl_rl_irk_idx+0x48>)
   18d5e:	781b      	ldrb	r3, [r3, #0]
   18d60:	4283      	cmp	r3, r0
   18d62:	d90c      	bls.n	18d7e <ctrl_rl_irk_idx+0x22>
	i = peer_irk_rl_ids[irkmatch_id];
   18d64:	4b10      	ldr	r3, [pc, #64]	; (18da8 <ctrl_rl_irk_idx+0x4c>)
   18d66:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   18d68:	2807      	cmp	r0, #7
   18d6a:	d80e      	bhi.n	18d8a <ctrl_rl_irk_idx+0x2e>
	LL_ASSERT(rl[i].taken);
   18d6c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   18d70:	00d3      	lsls	r3, r2, #3
   18d72:	4a0e      	ldr	r2, [pc, #56]	; (18dac <ctrl_rl_irk_idx+0x50>)
   18d74:	5cd3      	ldrb	r3, [r2, r3]
   18d76:	f013 0f01 	tst.w	r3, #1
   18d7a:	d00c      	beq.n	18d96 <ctrl_rl_irk_idx+0x3a>
}
   18d7c:	4770      	bx	lr
	LL_ASSERT(irkmatch_id < peer_irk_count);
   18d7e:	4040      	eors	r0, r0
   18d80:	f380 8811 	msr	BASEPRI, r0
   18d84:	f04f 0004 	mov.w	r0, #4
   18d88:	df02      	svc	2
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   18d8a:	4040      	eors	r0, r0
   18d8c:	f380 8811 	msr	BASEPRI, r0
   18d90:	f04f 0004 	mov.w	r0, #4
   18d94:	df02      	svc	2
	LL_ASSERT(rl[i].taken);
   18d96:	4040      	eors	r0, r0
   18d98:	f380 8811 	msr	BASEPRI, r0
   18d9c:	f04f 0004 	mov.w	r0, #4
   18da0:	df02      	svc	2
   18da2:	bf00      	nop
   18da4:	20001744 	.word	0x20001744
   18da8:	20001748 	.word	0x20001748
   18dac:	200017d0 	.word	0x200017d0

00018db0 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   18db0:	2807      	cmp	r0, #7
   18db2:	d815      	bhi.n	18de0 <ctrl_irk_whitelisted+0x30>
	LL_ASSERT(rl[rl_idx].taken);
   18db4:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   18db8:	00d3      	lsls	r3, r2, #3
   18dba:	4a0a      	ldr	r2, [pc, #40]	; (18de4 <ctrl_irk_whitelisted+0x34>)
   18dbc:	5cd3      	ldrb	r3, [r2, r3]
   18dbe:	f013 0f01 	tst.w	r3, #1
   18dc2:	d007      	beq.n	18dd4 <ctrl_irk_whitelisted+0x24>
	return rl[rl_idx].wl;
   18dc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18dc8:	00c3      	lsls	r3, r0, #3
   18dca:	4a06      	ldr	r2, [pc, #24]	; (18de4 <ctrl_irk_whitelisted+0x34>)
   18dcc:	5cd0      	ldrb	r0, [r2, r3]
   18dce:	f3c0 1040 	ubfx	r0, r0, #5, #1
   18dd2:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   18dd4:	4040      	eors	r0, r0
   18dd6:	f380 8811 	msr	BASEPRI, r0
   18dda:	f04f 0004 	mov.w	r0, #4
   18dde:	df02      	svc	2
		return false;
   18de0:	2000      	movs	r0, #0
}
   18de2:	4770      	bx	lr
   18de4:	200017d0 	.word	0x200017d0

00018de8 <ctrl_filter_get>:
	if (whitelist) {
   18de8:	b908      	cbnz	r0, 18dee <ctrl_filter_get+0x6>
	return &rl_filter;
   18dea:	4802      	ldr	r0, [pc, #8]	; (18df4 <ctrl_filter_get+0xc>)
}
   18dec:	4770      	bx	lr
		return &wl_filter;
   18dee:	4802      	ldr	r0, [pc, #8]	; (18df8 <ctrl_filter_get+0x10>)
   18df0:	4770      	bx	lr
   18df2:	bf00      	nop
   18df4:	20001914 	.word	0x20001914
   18df8:	20001988 	.word	0x20001988

00018dfc <ll_wl_size_get>:
}
   18dfc:	2008      	movs	r0, #8
   18dfe:	4770      	bx	lr

00018e00 <ll_wl_clear>:
{
   18e00:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   18e02:	f7fe fb47 	bl	17494 <radio_adv_filter_pol_get>
   18e06:	b110      	cbz	r0, 18e0e <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18e08:	240c      	movs	r4, #12
}
   18e0a:	4620      	mov	r0, r4
   18e0c:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   18e0e:	f7fe fb59 	bl	174c4 <radio_scan_filter_pol_get>
   18e12:	f010 0401 	ands.w	r4, r0, #1
   18e16:	d001      	beq.n	18e1c <ll_wl_clear+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18e18:	240c      	movs	r4, #12
   18e1a:	e7f6      	b.n	18e0a <ll_wl_clear+0xa>
	wl_clear();
   18e1c:	f7ff fdfe 	bl	18a1c <wl_clear>
	wl_anon = 0;
   18e20:	2200      	movs	r2, #0
   18e22:	4b01      	ldr	r3, [pc, #4]	; (18e28 <ll_wl_clear+0x28>)
   18e24:	701a      	strb	r2, [r3, #0]
	return 0;
   18e26:	e7f0      	b.n	18e0a <ll_wl_clear+0xa>
   18e28:	200028b8 	.word	0x200028b8

00018e2c <ll_wl_remove>:
{
   18e2c:	b510      	push	{r4, lr}
   18e2e:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   18e30:	f7fe fb30 	bl	17494 <radio_adv_filter_pol_get>
   18e34:	b108      	cbz	r0, 18e3a <ll_wl_remove+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18e36:	200c      	movs	r0, #12
   18e38:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   18e3a:	f7fe fb43 	bl	174c4 <radio_scan_filter_pol_get>
   18e3e:	f010 0001 	ands.w	r0, r0, #1
   18e42:	d001      	beq.n	18e48 <ll_wl_remove+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18e44:	200c      	movs	r0, #12
}
   18e46:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   18e48:	7823      	ldrb	r3, [r4, #0]
   18e4a:	2bff      	cmp	r3, #255	; 0xff
   18e4c:	d003      	beq.n	18e56 <ll_wl_remove+0x2a>
	return wl_remove(addr);
   18e4e:	4620      	mov	r0, r4
   18e50:	f7ff fe46 	bl	18ae0 <wl_remove>
   18e54:	bd10      	pop	{r4, pc}
		wl_anon = 0;
   18e56:	2200      	movs	r2, #0
   18e58:	4b01      	ldr	r3, [pc, #4]	; (18e60 <ll_wl_remove+0x34>)
   18e5a:	701a      	strb	r2, [r3, #0]
		return 0;
   18e5c:	bd10      	pop	{r4, pc}
   18e5e:	bf00      	nop
   18e60:	200028b8 	.word	0x200028b8

00018e64 <ll_filters_adv_update>:
{
   18e64:	b508      	push	{r3, lr}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   18e66:	b918      	cbnz	r0, 18e70 <ll_filters_adv_update+0xc>
	if (rl_enable && !radio_scan_is_enabled()) {
   18e68:	4b09      	ldr	r3, [pc, #36]	; (18e90 <ll_filters_adv_update+0x2c>)
   18e6a:	781b      	ldrb	r3, [r3, #0]
   18e6c:	b943      	cbnz	r3, 18e80 <ll_filters_adv_update+0x1c>
   18e6e:	bd08      	pop	{r3, pc}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   18e70:	f7fe fb28 	bl	174c4 <radio_scan_filter_pol_get>
   18e74:	f010 0f01 	tst.w	r0, #1
   18e78:	d1f6      	bne.n	18e68 <ll_filters_adv_update+0x4>
		filter_wl_update();
   18e7a:	f7ff fe6f 	bl	18b5c <filter_wl_update>
   18e7e:	e7f3      	b.n	18e68 <ll_filters_adv_update+0x4>
	if (rl_enable && !radio_scan_is_enabled()) {
   18e80:	f7fe fb18 	bl	174b4 <radio_scan_is_enabled>
   18e84:	2800      	cmp	r0, #0
   18e86:	d1f2      	bne.n	18e6e <ll_filters_adv_update+0xa>
		filter_rl_update();
   18e88:	f7ff fea8 	bl	18bdc <filter_rl_update>
}
   18e8c:	e7ef      	b.n	18e6e <ll_filters_adv_update+0xa>
   18e8e:	bf00      	nop
   18e90:	20001910 	.word	0x20001910

00018e94 <ll_filters_scan_update>:
{
   18e94:	b508      	push	{r3, lr}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   18e96:	f010 0f01 	tst.w	r0, #1
   18e9a:	d103      	bne.n	18ea4 <ll_filters_scan_update+0x10>
	if (rl_enable && !radio_adv_is_enabled()) {
   18e9c:	4b08      	ldr	r3, [pc, #32]	; (18ec0 <ll_filters_scan_update+0x2c>)
   18e9e:	781b      	ldrb	r3, [r3, #0]
   18ea0:	b93b      	cbnz	r3, 18eb2 <ll_filters_scan_update+0x1e>
   18ea2:	bd08      	pop	{r3, pc}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   18ea4:	f7fe faf6 	bl	17494 <radio_adv_filter_pol_get>
   18ea8:	2800      	cmp	r0, #0
   18eaa:	d1f7      	bne.n	18e9c <ll_filters_scan_update+0x8>
		filter_wl_update();
   18eac:	f7ff fe56 	bl	18b5c <filter_wl_update>
   18eb0:	e7f4      	b.n	18e9c <ll_filters_scan_update+0x8>
	if (rl_enable && !radio_adv_is_enabled()) {
   18eb2:	f7fe fae7 	bl	17484 <radio_adv_is_enabled>
   18eb6:	2800      	cmp	r0, #0
   18eb8:	d1f3      	bne.n	18ea2 <ll_filters_scan_update+0xe>
		filter_rl_update();
   18eba:	f7ff fe8f 	bl	18bdc <filter_rl_update>
}
   18ebe:	e7f0      	b.n	18ea2 <ll_filters_scan_update+0xe>
   18ec0:	20001910 	.word	0x20001910

00018ec4 <ll_rl_find>:
{
   18ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ec8:	4607      	mov	r7, r0
   18eca:	4688      	mov	r8, r1
	if (free) {
   18ecc:	4616      	mov	r6, r2
   18ece:	b10a      	cbz	r2, 18ed4 <ll_rl_find+0x10>
		*free = FILTER_IDX_NONE;
   18ed0:	23ff      	movs	r3, #255	; 0xff
   18ed2:	7013      	strb	r3, [r2, #0]
{
   18ed4:	2400      	movs	r4, #0
   18ed6:	e00e      	b.n	18ef6 <ll_rl_find+0x32>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18ed8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18edc:	00d3      	lsls	r3, r2, #3
   18ede:	481a      	ldr	r0, [pc, #104]	; (18f48 <ll_rl_find+0x84>)
   18ee0:	4418      	add	r0, r3
   18ee2:	2206      	movs	r2, #6
   18ee4:	4641      	mov	r1, r8
   18ee6:	3001      	adds	r0, #1
   18ee8:	f010 fb62 	bl	295b0 <memcmp>
   18eec:	b9c8      	cbnz	r0, 18f22 <ll_rl_find+0x5e>
   18eee:	e027      	b.n	18f40 <ll_rl_find+0x7c>
			*free = i;
   18ef0:	7034      	strb	r4, [r6, #0]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18ef2:	3401      	adds	r4, #1
   18ef4:	b2e4      	uxtb	r4, r4
   18ef6:	2c07      	cmp	r4, #7
   18ef8:	d821      	bhi.n	18f3e <ll_rl_find+0x7a>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18efa:	4625      	mov	r5, r4
   18efc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18f00:	00d3      	lsls	r3, r2, #3
   18f02:	4a11      	ldr	r2, [pc, #68]	; (18f48 <ll_rl_find+0x84>)
   18f04:	5cd3      	ldrb	r3, [r2, r3]
   18f06:	f013 0f01 	tst.w	r3, #1
   18f0a:	d00a      	beq.n	18f22 <ll_rl_find+0x5e>
   18f0c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18f10:	00d3      	lsls	r3, r2, #3
   18f12:	4a0d      	ldr	r2, [pc, #52]	; (18f48 <ll_rl_find+0x84>)
   18f14:	5cd3      	ldrb	r3, [r2, r3]
   18f16:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18f1a:	f007 0201 	and.w	r2, r7, #1
   18f1e:	4293      	cmp	r3, r2
   18f20:	d0da      	beq.n	18ed8 <ll_rl_find+0x14>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   18f22:	2e00      	cmp	r6, #0
   18f24:	d0e5      	beq.n	18ef2 <ll_rl_find+0x2e>
   18f26:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   18f2a:	00eb      	lsls	r3, r5, #3
   18f2c:	4a06      	ldr	r2, [pc, #24]	; (18f48 <ll_rl_find+0x84>)
   18f2e:	5cd3      	ldrb	r3, [r2, r3]
   18f30:	f013 0f01 	tst.w	r3, #1
   18f34:	d1dd      	bne.n	18ef2 <ll_rl_find+0x2e>
   18f36:	7833      	ldrb	r3, [r6, #0]
   18f38:	2bff      	cmp	r3, #255	; 0xff
   18f3a:	d1da      	bne.n	18ef2 <ll_rl_find+0x2e>
   18f3c:	e7d8      	b.n	18ef0 <ll_rl_find+0x2c>
	return FILTER_IDX_NONE;
   18f3e:	24ff      	movs	r4, #255	; 0xff
}
   18f40:	4620      	mov	r0, r4
   18f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18f46:	bf00      	nop
   18f48:	200017d0 	.word	0x200017d0

00018f4c <wl_add>:
{
   18f4c:	b570      	push	{r4, r5, r6, lr}
   18f4e:	b082      	sub	sp, #8
   18f50:	4605      	mov	r5, r0
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   18f52:	4604      	mov	r4, r0
   18f54:	f814 0b01 	ldrb.w	r0, [r4], #1
   18f58:	f10d 0207 	add.w	r2, sp, #7
   18f5c:	4621      	mov	r1, r4
   18f5e:	f7ff fd87 	bl	18a70 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   18f62:	2807      	cmp	r0, #7
   18f64:	d802      	bhi.n	18f6c <wl_add+0x20>
		return BT_HCI_ERR_INVALID_PARAM;
   18f66:	2012      	movs	r0, #18
}
   18f68:	b002      	add	sp, #8
   18f6a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (j >= ARRAY_SIZE(wl)) {
   18f6c:	f89d 6007 	ldrb.w	r6, [sp, #7]
   18f70:	2e07      	cmp	r6, #7
   18f72:	d901      	bls.n	18f78 <wl_add+0x2c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18f74:	2007      	movs	r0, #7
   18f76:	e7f7      	b.n	18f68 <wl_add+0x1c>
	wl[i].id_addr_type = id_addr->type & 0x1;
   18f78:	4629      	mov	r1, r5
   18f7a:	f811 2b01 	ldrb.w	r2, [r1], #1
   18f7e:	4817      	ldr	r0, [pc, #92]	; (18fdc <wl_add+0x90>)
   18f80:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
   18f84:	f362 0341 	bfi	r3, r2, #1, #1
   18f88:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   18f8c:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
	memcpy(dst, src, sizeof(*dst));
   18f90:	2206      	movs	r2, #6
   18f92:	3002      	adds	r0, #2
   18f94:	f7e7 f994 	bl	2c0 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   18f98:	2200      	movs	r2, #0
   18f9a:	4621      	mov	r1, r4
   18f9c:	7828      	ldrb	r0, [r5, #0]
   18f9e:	f7ff ff91 	bl	18ec4 <ll_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   18fa2:	2807      	cmp	r0, #7
   18fa4:	d814      	bhi.n	18fd0 <wl_add+0x84>
		wl[i].rl_idx = j;
   18fa6:	4b0d      	ldr	r3, [pc, #52]	; (18fdc <wl_add+0x90>)
   18fa8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   18fac:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   18fae:	490c      	ldr	r1, [pc, #48]	; (18fe0 <wl_add+0x94>)
   18fb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18fb4:	00c3      	lsls	r3, r0, #3
   18fb6:	5cca      	ldrb	r2, [r1, r3]
   18fb8:	f042 0220 	orr.w	r2, r2, #32
   18fbc:	54ca      	strb	r2, [r1, r3]
	wl[i].taken = 1;
   18fbe:	4a07      	ldr	r2, [pc, #28]	; (18fdc <wl_add+0x90>)
   18fc0:	f812 3036 	ldrb.w	r3, [r2, r6, lsl #3]
   18fc4:	f043 0301 	orr.w	r3, r3, #1
   18fc8:	f802 3036 	strb.w	r3, [r2, r6, lsl #3]
	return 0;
   18fcc:	2000      	movs	r0, #0
   18fce:	e7cb      	b.n	18f68 <wl_add+0x1c>
		wl[i].rl_idx = FILTER_IDX_NONE;
   18fd0:	4b02      	ldr	r3, [pc, #8]	; (18fdc <wl_add+0x90>)
   18fd2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   18fd6:	22ff      	movs	r2, #255	; 0xff
   18fd8:	705a      	strb	r2, [r3, #1]
   18fda:	e7f0      	b.n	18fbe <wl_add+0x72>
   18fdc:	20001948 	.word	0x20001948
   18fe0:	200017d0 	.word	0x200017d0

00018fe4 <ll_wl_add>:
{
   18fe4:	b510      	push	{r4, lr}
   18fe6:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   18fe8:	f7fe fa54 	bl	17494 <radio_adv_filter_pol_get>
   18fec:	b108      	cbz	r0, 18ff2 <ll_wl_add+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18fee:	200c      	movs	r0, #12
   18ff0:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   18ff2:	f7fe fa67 	bl	174c4 <radio_scan_filter_pol_get>
   18ff6:	f010 0001 	ands.w	r0, r0, #1
   18ffa:	d001      	beq.n	19000 <ll_wl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18ffc:	200c      	movs	r0, #12
}
   18ffe:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   19000:	7823      	ldrb	r3, [r4, #0]
   19002:	2bff      	cmp	r3, #255	; 0xff
   19004:	d003      	beq.n	1900e <ll_wl_add+0x2a>
	return wl_add(addr);
   19006:	4620      	mov	r0, r4
   19008:	f7ff ffa0 	bl	18f4c <wl_add>
   1900c:	bd10      	pop	{r4, pc}
		wl_anon = 1;
   1900e:	2201      	movs	r2, #1
   19010:	4b01      	ldr	r3, [pc, #4]	; (19018 <ll_wl_add+0x34>)
   19012:	701a      	strb	r2, [r3, #0]
		return 0;
   19014:	bd10      	pop	{r4, pc}
   19016:	bf00      	nop
   19018:	200028b8 	.word	0x200028b8

0001901c <ctrl_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1901c:	4b17      	ldr	r3, [pc, #92]	; (1907c <ctrl_rl_idx_allowed+0x60>)
   1901e:	781b      	ldrb	r3, [r3, #0]
   19020:	b32b      	cbz	r3, 1906e <ctrl_rl_idx_allowed+0x52>
   19022:	2907      	cmp	r1, #7
   19024:	d825      	bhi.n	19072 <ctrl_rl_idx_allowed+0x56>
   19026:	bb30      	cbnz	r0, 19076 <ctrl_rl_idx_allowed+0x5a>
	LL_ASSERT(rl[rl_idx].taken);
   19028:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1902c:	00d3      	lsls	r3, r2, #3
   1902e:	4a14      	ldr	r2, [pc, #80]	; (19080 <ctrl_rl_idx_allowed+0x64>)
   19030:	5cd3      	ldrb	r3, [r2, r3]
   19032:	f013 0f01 	tst.w	r3, #1
   19036:	d010      	beq.n	1905a <ctrl_rl_idx_allowed+0x3e>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19038:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   1903c:	00d3      	lsls	r3, r2, #3
   1903e:	4a10      	ldr	r2, [pc, #64]	; (19080 <ctrl_rl_idx_allowed+0x64>)
   19040:	5cd3      	ldrb	r3, [r2, r3]
   19042:	f013 0f04 	tst.w	r3, #4
   19046:	d00e      	beq.n	19066 <ctrl_rl_idx_allowed+0x4a>
   19048:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1904c:	00cb      	lsls	r3, r1, #3
   1904e:	5cd3      	ldrb	r3, [r2, r3]
   19050:	f013 0f10 	tst.w	r3, #16
   19054:	d009      	beq.n	1906a <ctrl_rl_idx_allowed+0x4e>
   19056:	2001      	movs	r0, #1
   19058:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   1905a:	4040      	eors	r0, r0
   1905c:	f380 8811 	msr	BASEPRI, r0
   19060:	f04f 0004 	mov.w	r0, #4
   19064:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19066:	2001      	movs	r0, #1
   19068:	4770      	bx	lr
   1906a:	2000      	movs	r0, #0
   1906c:	4770      	bx	lr
		return true;
   1906e:	2001      	movs	r0, #1
   19070:	4770      	bx	lr
   19072:	2001      	movs	r0, #1
   19074:	4770      	bx	lr
   19076:	2001      	movs	r0, #1
}
   19078:	4770      	bx	lr
   1907a:	bf00      	nop
   1907c:	20001910 	.word	0x20001910
   19080:	200017d0 	.word	0x200017d0

00019084 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19084:	2807      	cmp	r0, #7
   19086:	d81a      	bhi.n	190be <ll_rl_id_addr_get+0x3a>
{
   19088:	b570      	push	{r4, r5, r6, lr}
   1908a:	4603      	mov	r3, r0
	LL_ASSERT(rl[rl_idx].taken);
   1908c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   19090:	00ec      	lsls	r4, r5, #3
   19092:	4811      	ldr	r0, [pc, #68]	; (190d8 <ll_rl_id_addr_get+0x54>)
   19094:	5d00      	ldrb	r0, [r0, r4]
   19096:	f010 0f01 	tst.w	r0, #1
   1909a:	d016      	beq.n	190ca <ll_rl_id_addr_get+0x46>
   1909c:	4610      	mov	r0, r2
	*id_addr_type = rl[rl_idx].id_addr_type;
   1909e:	4d0e      	ldr	r5, [pc, #56]	; (190d8 <ll_rl_id_addr_get+0x54>)
   190a0:	009c      	lsls	r4, r3, #2
   190a2:	18e6      	adds	r6, r4, r3
   190a4:	00f2      	lsls	r2, r6, #3
   190a6:	4616      	mov	r6, r2
   190a8:	5caa      	ldrb	r2, [r5, r2]
   190aa:	f3c2 1280 	ubfx	r2, r2, #6, #1
   190ae:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   190b0:	4631      	mov	r1, r6
   190b2:	4429      	add	r1, r5
   190b4:	2206      	movs	r2, #6
   190b6:	3101      	adds	r1, #1
   190b8:	f7e7 f902 	bl	2c0 <memcpy>
   190bc:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   190be:	4040      	eors	r0, r0
   190c0:	f380 8811 	msr	BASEPRI, r0
   190c4:	f04f 0004 	mov.w	r0, #4
   190c8:	df02      	svc	2
	LL_ASSERT(rl[rl_idx].taken);
   190ca:	4040      	eors	r0, r0
   190cc:	f380 8811 	msr	BASEPRI, r0
   190d0:	f04f 0004 	mov.w	r0, #4
   190d4:	df02      	svc	2
   190d6:	bf00      	nop
   190d8:	200017d0 	.word	0x200017d0

000190dc <ctrl_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   190dc:	4b29      	ldr	r3, [pc, #164]	; (19184 <ctrl_rl_addr_allowed+0xa8>)
   190de:	781b      	ldrb	r3, [r3, #0]
   190e0:	2b00      	cmp	r3, #0
   190e2:	d04a      	beq.n	1917a <ctrl_rl_addr_allowed+0x9e>
   190e4:	7813      	ldrb	r3, [r2, #0]
   190e6:	2bff      	cmp	r3, #255	; 0xff
   190e8:	d001      	beq.n	190ee <ctrl_rl_addr_allowed+0x12>
		return true;
   190ea:	2001      	movs	r0, #1
   190ec:	4770      	bx	lr
   190ee:	2300      	movs	r3, #0
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   190f0:	2b07      	cmp	r3, #7
   190f2:	d844      	bhi.n	1917e <ctrl_rl_addr_allowed+0xa2>
{
   190f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   190f6:	e005      	b.n	19104 <ctrl_rl_addr_allowed+0x28>
			if (j == BDADDR_SIZE) {
   190f8:	2c06      	cmp	r4, #6
   190fa:	d026      	beq.n	1914a <ctrl_rl_addr_allowed+0x6e>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   190fc:	3301      	adds	r3, #1
   190fe:	b2db      	uxtb	r3, r3
   19100:	2b07      	cmp	r3, #7
   19102:	d838      	bhi.n	19176 <ctrl_rl_addr_allowed+0x9a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   19104:	461e      	mov	r6, r3
   19106:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1910a:	00ec      	lsls	r4, r5, #3
   1910c:	4d1e      	ldr	r5, [pc, #120]	; (19188 <ctrl_rl_addr_allowed+0xac>)
   1910e:	5d2c      	ldrb	r4, [r5, r4]
   19110:	f014 0f01 	tst.w	r4, #1
   19114:	d0f2      	beq.n	190fc <ctrl_rl_addr_allowed+0x20>
   19116:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1911a:	00ec      	lsls	r4, r5, #3
   1911c:	4d1a      	ldr	r5, [pc, #104]	; (19188 <ctrl_rl_addr_allowed+0xac>)
   1911e:	5d2c      	ldrb	r4, [r5, r4]
   19120:	f3c4 1480 	ubfx	r4, r4, #6, #1
   19124:	4284      	cmp	r4, r0
   19126:	d1e9      	bne.n	190fc <ctrl_rl_addr_allowed+0x20>
			u8_t *addr = rl[i].id_addr.val;
   19128:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1912c:	00ec      	lsls	r4, r5, #3
   1912e:	4d16      	ldr	r5, [pc, #88]	; (19188 <ctrl_rl_addr_allowed+0xac>)
   19130:	4425      	add	r5, r4
   19132:	3501      	adds	r5, #1
			for (j = 0; j < BDADDR_SIZE; j++) {
   19134:	2400      	movs	r4, #0
   19136:	2c05      	cmp	r4, #5
   19138:	d8de      	bhi.n	190f8 <ctrl_rl_addr_allowed+0x1c>
				if (addr[j] != id_addr[j]) {
   1913a:	f815 e004 	ldrb.w	lr, [r5, r4]
   1913e:	5d0f      	ldrb	r7, [r1, r4]
   19140:	45be      	cmp	lr, r7
   19142:	d1d9      	bne.n	190f8 <ctrl_rl_addr_allowed+0x1c>
			for (j = 0; j < BDADDR_SIZE; j++) {
   19144:	3401      	adds	r4, #1
   19146:	b2e4      	uxtb	r4, r4
   19148:	e7f5      	b.n	19136 <ctrl_rl_addr_allowed+0x5a>
				*rl_idx = i;
   1914a:	7013      	strb	r3, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   1914c:	eb06 0286 	add.w	r2, r6, r6, lsl #2
   19150:	00d3      	lsls	r3, r2, #3
   19152:	4a0d      	ldr	r2, [pc, #52]	; (19188 <ctrl_rl_addr_allowed+0xac>)
   19154:	5cd3      	ldrb	r3, [r2, r3]
   19156:	f013 0f04 	tst.w	r3, #4
   1915a:	d00a      	beq.n	19172 <ctrl_rl_addr_allowed+0x96>
   1915c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   19160:	00f3      	lsls	r3, r6, #3
   19162:	5cd3      	ldrb	r3, [r2, r3]
   19164:	f013 0f10 	tst.w	r3, #16
   19168:	d101      	bne.n	1916e <ctrl_rl_addr_allowed+0x92>
   1916a:	2000      	movs	r0, #0
   1916c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1916e:	2001      	movs	r0, #1
   19170:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19172:	2001      	movs	r0, #1
   19174:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
   19176:	2001      	movs	r0, #1
   19178:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return true;
   1917a:	2001      	movs	r0, #1
   1917c:	4770      	bx	lr
	return true;
   1917e:	2001      	movs	r0, #1
}
   19180:	4770      	bx	lr
   19182:	bf00      	nop
   19184:	20001910 	.word	0x20001910
   19188:	200017d0 	.word	0x200017d0

0001918c <ctrl_rl_addr_resolve>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1918c:	4b13      	ldr	r3, [pc, #76]	; (191dc <ctrl_rl_addr_resolve+0x50>)
   1918e:	781b      	ldrb	r3, [r3, #0]
   19190:	b1db      	cbz	r3, 191ca <ctrl_rl_addr_resolve+0x3e>
   19192:	2a07      	cmp	r2, #7
   19194:	d81b      	bhi.n	191ce <ctrl_rl_addr_resolve+0x42>
{
   19196:	b510      	push	{r4, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   19198:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   1919c:	00e3      	lsls	r3, r4, #3
   1919e:	4c10      	ldr	r4, [pc, #64]	; (191e0 <ctrl_rl_addr_resolve+0x54>)
   191a0:	5ce3      	ldrb	r3, [r4, r3]
   191a2:	f013 0f08 	tst.w	r3, #8
   191a6:	d014      	beq.n	191d2 <ctrl_rl_addr_resolve+0x46>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   191a8:	b1a8      	cbz	r0, 191d6 <ctrl_rl_addr_resolve+0x4a>
   191aa:	794b      	ldrb	r3, [r1, #5]
   191ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   191b0:	2b40      	cmp	r3, #64	; 0x40
   191b2:	d001      	beq.n	191b8 <ctrl_rl_addr_resolve+0x2c>
	return false;
   191b4:	2000      	movs	r0, #0
}
   191b6:	bd10      	pop	{r4, pc}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   191b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   191bc:	00d3      	lsls	r3, r2, #3
   191be:	4620      	mov	r0, r4
   191c0:	4418      	add	r0, r3
   191c2:	3007      	adds	r0, #7
   191c4:	f7ea fbc8 	bl	3958 <bt_rpa_irk_matches>
   191c8:	bd10      	pop	{r4, pc}
		return false;
   191ca:	2000      	movs	r0, #0
   191cc:	4770      	bx	lr
   191ce:	2000      	movs	r0, #0
   191d0:	4770      	bx	lr
   191d2:	2000      	movs	r0, #0
   191d4:	bd10      	pop	{r4, pc}
	return false;
   191d6:	2000      	movs	r0, #0
   191d8:	bd10      	pop	{r4, pc}
   191da:	bf00      	nop
   191dc:	20001910 	.word	0x20001910
   191e0:	200017d0 	.word	0x200017d0

000191e4 <ctrl_rl_enabled>:
	return rl_enable;
   191e4:	4b02      	ldr	r3, [pc, #8]	; (191f0 <ctrl_rl_enabled+0xc>)
   191e6:	7818      	ldrb	r0, [r3, #0]
}
   191e8:	3000      	adds	r0, #0
   191ea:	bf18      	it	ne
   191ec:	2001      	movne	r0, #1
   191ee:	4770      	bx	lr
   191f0:	20001910 	.word	0x20001910

000191f4 <ll_rl_pdu_adv_update>:
{
   191f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   191f6:	4605      	mov	r5, r0
   191f8:	460c      	mov	r4, r1
	u8_t *adva = pdu->type == PDU_ADV_TYPE_SCAN_RSP ?
   191fa:	780b      	ldrb	r3, [r1, #0]
   191fc:	f003 030f 	and.w	r3, r3, #15
				  &pdu->payload.scan_rsp.addr[0] :
   19200:	2b04      	cmp	r3, #4
   19202:	d024      	beq.n	1924e <ll_rl_pdu_adv_update+0x5a>
   19204:	1c8f      	adds	r7, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   19206:	f000 fbc5 	bl	19994 <ll_adv_set_get>
   1920a:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   1920c:	2d07      	cmp	r5, #7
   1920e:	d826      	bhi.n	1925e <ll_rl_pdu_adv_update+0x6a>
   19210:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19214:	00d3      	lsls	r3, r2, #3
   19216:	4a30      	ldr	r2, [pc, #192]	; (192d8 <ll_rl_pdu_adv_update+0xe4>)
   19218:	5cd3      	ldrb	r3, [r2, r3]
   1921a:	f013 0f08 	tst.w	r3, #8
   1921e:	d01e      	beq.n	1925e <ll_rl_pdu_adv_update+0x6a>
		LL_ASSERT(rl[idx].rpas_ready);
   19220:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19224:	00d3      	lsls	r3, r2, #3
   19226:	4a2c      	ldr	r2, [pc, #176]	; (192d8 <ll_rl_pdu_adv_update+0xe4>)
   19228:	5cd3      	ldrb	r3, [r2, r3]
   1922a:	f013 0f02 	tst.w	r3, #2
   1922e:	d010      	beq.n	19252 <ll_rl_pdu_adv_update+0x5e>
		pdu->tx_addr = 1;
   19230:	7823      	ldrb	r3, [r4, #0]
   19232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19236:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   19238:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1923c:	00da      	lsls	r2, r3, #3
   1923e:	4b26      	ldr	r3, [pc, #152]	; (192d8 <ll_rl_pdu_adv_update+0xe4>)
   19240:	4413      	add	r3, r2
   19242:	2206      	movs	r2, #6
   19244:	6a59      	ldr	r1, [r3, #36]	; 0x24
   19246:	4638      	mov	r0, r7
   19248:	f7e7 f83a 	bl	2c0 <memcpy>
   1924c:	e014      	b.n	19278 <ll_rl_pdu_adv_update+0x84>
				  &pdu->payload.scan_rsp.addr[0] :
   1924e:	1c8f      	adds	r7, r1, #2
   19250:	e7d9      	b.n	19206 <ll_rl_pdu_adv_update+0x12>
		LL_ASSERT(rl[idx].rpas_ready);
   19252:	4040      	eors	r0, r0
   19254:	f380 8811 	msr	BASEPRI, r0
   19258:	f04f 0004 	mov.w	r0, #4
   1925c:	df02      	svc	2
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   1925e:	7833      	ldrb	r3, [r6, #0]
   19260:	f3c3 1340 	ubfx	r3, r3, #5, #1
   19264:	7822      	ldrb	r2, [r4, #0]
   19266:	f363 1286 	bfi	r2, r3, #6, #1
   1926a:	7022      	strb	r2, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   1926c:	7830      	ldrb	r0, [r6, #0]
   1926e:	4639      	mov	r1, r7
   19270:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19274:	f7ff fba0 	bl	189b8 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19278:	7823      	ldrb	r3, [r4, #0]
   1927a:	f003 030f 	and.w	r3, r3, #15
   1927e:	2b01      	cmp	r3, #1
   19280:	d000      	beq.n	19284 <ll_rl_pdu_adv_update+0x90>
   19282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   19284:	2d07      	cmp	r5, #7
   19286:	d807      	bhi.n	19298 <ll_rl_pdu_adv_update+0xa4>
   19288:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1928c:	00d3      	lsls	r3, r2, #3
   1928e:	4a12      	ldr	r2, [pc, #72]	; (192d8 <ll_rl_pdu_adv_update+0xe4>)
   19290:	5cd3      	ldrb	r3, [r2, r3]
   19292:	f013 0f04 	tst.w	r3, #4
   19296:	d10d      	bne.n	192b4 <ll_rl_pdu_adv_update+0xc0>
			pdu->rx_addr = ll_adv->id_addr_type;
   19298:	4631      	mov	r1, r6
   1929a:	f811 3b02 	ldrb.w	r3, [r1], #2
   1929e:	09db      	lsrs	r3, r3, #7
   192a0:	7822      	ldrb	r2, [r4, #0]
   192a2:	f363 12c7 	bfi	r2, r3, #7, #1
   192a6:	4620      	mov	r0, r4
   192a8:	f800 2b08 	strb.w	r2, [r0], #8
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   192ac:	2206      	movs	r2, #6
   192ae:	f7e7 f807 	bl	2c0 <memcpy>
}
   192b2:	e7e6      	b.n	19282 <ll_rl_pdu_adv_update+0x8e>
			pdu->rx_addr = 1;
   192b4:	7823      	ldrb	r3, [r4, #0]
   192b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   192ba:	4620      	mov	r0, r4
   192bc:	f800 3b08 	strb.w	r3, [r0], #8
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   192c0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   192c4:	00eb      	lsls	r3, r5, #3
   192c6:	3318      	adds	r3, #24
   192c8:	4611      	mov	r1, r2
   192ca:	4419      	add	r1, r3
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   192cc:	2206      	movs	r2, #6
   192ce:	4411      	add	r1, r2
   192d0:	f7e6 fff6 	bl	2c0 <memcpy>
   192d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   192d6:	bf00      	nop
   192d8:	200017d0 	.word	0x200017d0

000192dc <rpa_adv_refresh>:
{
   192dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ll_adv = ll_adv_set_get();
   192e0:	f000 fb58 	bl	19994 <ll_adv_set_get>
   192e4:	4606      	mov	r6, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   192e6:	7803      	ldrb	r3, [r0, #0]
   192e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
   192ec:	2b40      	cmp	r3, #64	; 0x40
   192ee:	d003      	beq.n	192f8 <rpa_adv_refresh+0x1c>
   192f0:	2b60      	cmp	r3, #96	; 0x60
   192f2:	d001      	beq.n	192f8 <rpa_adv_refresh+0x1c>
   192f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   192f8:	f7fe f8bc 	bl	17474 <radio_adv_data_get>
   192fc:	4604      	mov	r4, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   192fe:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   19302:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19306:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   1930a:	1887      	adds	r7, r0, r2
	if (radio_adv_data->first == radio_adv_data->last) {
   1930c:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   19310:	429d      	cmp	r5, r3
   19312:	d02d      	beq.n	19370 <rpa_adv_refresh+0x94>
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   19314:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19318:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   1931c:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   19320:	5ca0      	ldrb	r0, [r4, r2]
   19322:	5ce1      	ldrb	r1, [r4, r3]
   19324:	f360 0103 	bfi	r1, r0, #0, #4
	pdu->rfu = 0;
   19328:	f36f 1104 	bfc	r1, #4, #1
   1932c:	54e1      	strb	r1, [r4, r3]
		pdu->chan_sel = prev->chan_sel;
   1932e:	5ca2      	ldrb	r2, [r4, r2]
   19330:	f3c2 1240 	ubfx	r2, r2, #5, #1
   19334:	b2c9      	uxtb	r1, r1
   19336:	f362 1145 	bfi	r1, r2, #5, #1
   1933a:	54e1      	strb	r1, [r4, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   1933c:	4631      	mov	r1, r6
   1933e:	f811 0b02 	ldrb.w	r0, [r1], #2
   19342:	2200      	movs	r2, #0
   19344:	09c0      	lsrs	r0, r0, #7
   19346:	f7ff fdbd 	bl	18ec4 <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   1934a:	2807      	cmp	r0, #7
   1934c:	d816      	bhi.n	1937c <rpa_adv_refresh+0xa0>
	ll_rl_pdu_adv_update(idx, pdu);
   1934e:	4641      	mov	r1, r8
   19350:	f7ff ff50 	bl	191f4 <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
   19354:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->payload.adv_ind.data[0], &prev->payload.adv_ind.data[0],
   19356:	3a06      	subs	r2, #6
   19358:	f107 0108 	add.w	r1, r7, #8
   1935c:	f108 0008 	add.w	r0, r8, #8
   19360:	f7e6 ffae 	bl	2c0 <memcpy>
	pdu->len = prev->len;
   19364:	787b      	ldrb	r3, [r7, #1]
   19366:	f888 3001 	strb.w	r3, [r8, #1]
	radio_adv_data->last = last;
   1936a:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1936e:	e7c1      	b.n	192f4 <rpa_adv_refresh+0x18>
		last = radio_adv_data->last + 1;
   19370:	3501      	adds	r5, #1
   19372:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   19374:	2d02      	cmp	r5, #2
   19376:	d1cd      	bne.n	19314 <rpa_adv_refresh+0x38>
			last = 0;
   19378:	2500      	movs	r5, #0
   1937a:	e7cb      	b.n	19314 <rpa_adv_refresh+0x38>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   1937c:	4040      	eors	r0, r0
   1937e:	f380 8811 	msr	BASEPRI, r0
   19382:	f04f 0004 	mov.w	r0, #4
   19386:	df02      	svc	2

00019388 <ll_rl_rpa_update>:
{
   19388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1938c:	b085      	sub	sp, #20
   1938e:	4681      	mov	r9, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   19390:	f00f fa44 	bl	2881c <_impl_k_uptime_get>
   19394:	4606      	mov	r6, r0
   19396:	460f      	mov	r7, r1
	bool all = timeout || (rpa_last_ms == -1) ||
   19398:	f1b9 0f00 	cmp.w	r9, #0
   1939c:	d115      	bne.n	193ca <ll_rl_rpa_update+0x42>
   1939e:	4b57      	ldr	r3, [pc, #348]	; (194fc <ll_rl_rpa_update+0x174>)
   193a0:	e9d3 0100 	ldrd	r0, r1, [r3]
   193a4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   193a8:	bf08      	it	eq
   193aa:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   193ae:	d010      	beq.n	193d2 <ll_rl_rpa_update+0x4a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   193b0:	1a30      	subs	r0, r6, r0
   193b2:	eb67 0101 	sbc.w	r1, r7, r1
   193b6:	4b52      	ldr	r3, [pc, #328]	; (19500 <ll_rl_rpa_update+0x178>)
   193b8:	681a      	ldr	r2, [r3, #0]
   193ba:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   193bc:	4290      	cmp	r0, r2
   193be:	eb71 0303 	sbcs.w	r3, r1, r3
   193c2:	db09      	blt.n	193d8 <ll_rl_rpa_update+0x50>
   193c4:	f04f 0801 	mov.w	r8, #1
   193c8:	e001      	b.n	193ce <ll_rl_rpa_update+0x46>
   193ca:	f04f 0801 	mov.w	r8, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   193ce:	2400      	movs	r4, #0
   193d0:	e02a      	b.n	19428 <ll_rl_rpa_update+0xa0>
	bool all = timeout || (rpa_last_ms == -1) ||
   193d2:	f04f 0801 	mov.w	r8, #1
   193d6:	e7fa      	b.n	193ce <ll_rl_rpa_update+0x46>
   193d8:	f04f 0800 	mov.w	r8, #0
   193dc:	e7f7      	b.n	193ce <ll_rl_rpa_update+0x46>
		*((u8_t *)dst++) = *((u8_t *)src--);
   193de:	7818      	ldrb	r0, [r3, #0]
   193e0:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   193e2:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   193e4:	3b01      	subs	r3, #1
   193e6:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   193e8:	2a00      	cmp	r2, #0
   193ea:	d1f8      	bne.n	193de <ll_rl_rpa_update+0x56>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   193ec:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   193f0:	00d3      	lsls	r3, r2, #3
   193f2:	3318      	adds	r3, #24
   193f4:	4943      	ldr	r1, [pc, #268]	; (19504 <ll_rl_rpa_update+0x17c>)
   193f6:	4419      	add	r1, r3
   193f8:	3106      	adds	r1, #6
   193fa:	4668      	mov	r0, sp
   193fc:	f7ea fac0 	bl	3980 <bt_rpa_create>
				LL_ASSERT(!err);
   19400:	2800      	cmp	r0, #0
   19402:	d13c      	bne.n	1947e <ll_rl_rpa_update+0xf6>
			if (rl[i].lirk) {
   19404:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19408:	00d3      	lsls	r3, r2, #3
   1940a:	4a3e      	ldr	r2, [pc, #248]	; (19504 <ll_rl_rpa_update+0x17c>)
   1940c:	5cd3      	ldrb	r3, [r2, r3]
   1940e:	f013 0f08 	tst.w	r3, #8
   19412:	d13a      	bne.n	1948a <ll_rl_rpa_update+0x102>
			rl[i].rpas_ready = 1;
   19414:	493b      	ldr	r1, [pc, #236]	; (19504 <ll_rl_rpa_update+0x17c>)
   19416:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1941a:	00eb      	lsls	r3, r5, #3
   1941c:	5cca      	ldrb	r2, [r1, r3]
   1941e:	f042 0202 	orr.w	r2, r2, #2
   19422:	54ca      	strb	r2, [r1, r3]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19424:	3401      	adds	r4, #1
   19426:	b2e4      	uxtb	r4, r4
   19428:	2c07      	cmp	r4, #7
   1942a:	d854      	bhi.n	194d6 <ll_rl_rpa_update+0x14e>
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1942c:	4625      	mov	r5, r4
   1942e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19432:	00d3      	lsls	r3, r2, #3
   19434:	4a33      	ldr	r2, [pc, #204]	; (19504 <ll_rl_rpa_update+0x17c>)
   19436:	5cd3      	ldrb	r3, [r2, r3]
   19438:	f013 0f01 	tst.w	r3, #1
   1943c:	d0f2      	beq.n	19424 <ll_rl_rpa_update+0x9c>
   1943e:	f1b8 0f00 	cmp.w	r8, #0
   19442:	d107      	bne.n	19454 <ll_rl_rpa_update+0xcc>
   19444:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19448:	00d3      	lsls	r3, r2, #3
   1944a:	4a2e      	ldr	r2, [pc, #184]	; (19504 <ll_rl_rpa_update+0x17c>)
   1944c:	5cd3      	ldrb	r3, [r2, r3]
   1944e:	f013 0f02 	tst.w	r3, #2
   19452:	d1e7      	bne.n	19424 <ll_rl_rpa_update+0x9c>
			if (rl[i].pirk) {
   19454:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19458:	00d3      	lsls	r3, r2, #3
   1945a:	4a2a      	ldr	r2, [pc, #168]	; (19504 <ll_rl_rpa_update+0x17c>)
   1945c:	5cd3      	ldrb	r3, [r2, r3]
   1945e:	f013 0f04 	tst.w	r3, #4
   19462:	d0cf      	beq.n	19404 <ll_rl_rpa_update+0x7c>
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   19464:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19468:	00da      	lsls	r2, r3, #3
   1946a:	4b26      	ldr	r3, [pc, #152]	; (19504 <ll_rl_rpa_update+0x17c>)
   1946c:	4413      	add	r3, r2
   1946e:	7dda      	ldrb	r2, [r3, #23]
   19470:	4b25      	ldr	r3, [pc, #148]	; (19508 <ll_rl_rpa_update+0x180>)
   19472:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	src += length - 1;
   19476:	330f      	adds	r3, #15
   19478:	2210      	movs	r2, #16
   1947a:	4669      	mov	r1, sp
   1947c:	e7b4      	b.n	193e8 <ll_rl_rpa_update+0x60>
				LL_ASSERT(!err);
   1947e:	4040      	eors	r0, r0
   19480:	f380 8811 	msr	BASEPRI, r0
   19484:	f04f 0004 	mov.w	r0, #4
   19488:	df02      	svc	2
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1948a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1948e:	00d3      	lsls	r3, r2, #3
   19490:	481c      	ldr	r0, [pc, #112]	; (19504 <ll_rl_rpa_update+0x17c>)
   19492:	4418      	add	r0, r3
   19494:	4669      	mov	r1, sp
   19496:	3007      	adds	r0, #7
   19498:	f7ea fa72 	bl	3980 <bt_rpa_create>
				LL_ASSERT(!err);
   1949c:	b9a8      	cbnz	r0, 194ca <ll_rl_rpa_update+0x142>
				rl[i].local_rpa = &rpa;
   1949e:	00ab      	lsls	r3, r5, #2
   194a0:	442b      	add	r3, r5
   194a2:	00da      	lsls	r2, r3, #3
   194a4:	4b17      	ldr	r3, [pc, #92]	; (19504 <ll_rl_rpa_update+0x17c>)
   194a6:	eb03 0a02 	add.w	sl, r3, r2
   194aa:	f8ca d024 	str.w	sp, [sl, #36]	; 0x24
				bt_addr_copy(&local_rpas[i], &rpa);
   194ae:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   194b2:	ea4f 0b43 	mov.w	fp, r3, lsl #1
   194b6:	4b15      	ldr	r3, [pc, #84]	; (1950c <ll_rl_rpa_update+0x184>)
   194b8:	449b      	add	fp, r3
   194ba:	2206      	movs	r2, #6
   194bc:	4669      	mov	r1, sp
   194be:	4658      	mov	r0, fp
   194c0:	f7e6 fefe 	bl	2c0 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   194c4:	f8ca b024 	str.w	fp, [sl, #36]	; 0x24
   194c8:	e7a4      	b.n	19414 <ll_rl_rpa_update+0x8c>
				LL_ASSERT(!err);
   194ca:	4040      	eors	r0, r0
   194cc:	f380 8811 	msr	BASEPRI, r0
   194d0:	f04f 0004 	mov.w	r0, #4
   194d4:	df02      	svc	2
	if (all) {
   194d6:	f1b8 0f00 	cmp.w	r8, #0
   194da:	d002      	beq.n	194e2 <ll_rl_rpa_update+0x15a>
		rpa_last_ms = now;
   194dc:	4b07      	ldr	r3, [pc, #28]	; (194fc <ll_rl_rpa_update+0x174>)
   194de:	e9c3 6700 	strd	r6, r7, [r3]
	if (timeout) {
   194e2:	f1b9 0f00 	cmp.w	r9, #0
   194e6:	d102      	bne.n	194ee <ll_rl_rpa_update+0x166>
}
   194e8:	b005      	add	sp, #20
   194ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (radio_adv_is_enabled()) {
   194ee:	f7fd ffc9 	bl	17484 <radio_adv_is_enabled>
   194f2:	2800      	cmp	r0, #0
   194f4:	d0f8      	beq.n	194e8 <ll_rl_rpa_update+0x160>
			rpa_adv_refresh();
   194f6:	f7ff fef1 	bl	192dc <rpa_adv_refresh>
}
   194fa:	e7f5      	b.n	194e8 <ll_rl_rpa_update+0x160>
   194fc:	200028b0 	.word	0x200028b0
   19500:	20002a5c 	.word	0x20002a5c
   19504:	200017d0 	.word	0x200017d0
   19508:	20001750 	.word	0x20001750
   1950c:	20001714 	.word	0x20001714

00019510 <rpa_timeout>:
{
   19510:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   19512:	2001      	movs	r0, #1
   19514:	f7ff ff38 	bl	19388 <ll_rl_rpa_update>
   19518:	4b03      	ldr	r3, [pc, #12]	; (19528 <rpa_timeout+0x18>)
   1951a:	681a      	ldr	r2, [r3, #0]
   1951c:	4903      	ldr	r1, [pc, #12]	; (1952c <rpa_timeout+0x1c>)
   1951e:	4804      	ldr	r0, [pc, #16]	; (19530 <rpa_timeout+0x20>)
   19520:	f00f ff50 	bl	293c4 <k_delayed_work_submit_to_queue>
   19524:	bd08      	pop	{r3, pc}
   19526:	bf00      	nop
   19528:	20002a5c 	.word	0x20002a5c
   1952c:	20002928 	.word	0x20002928
   19530:	20002a70 	.word	0x20002a70

00019534 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   19534:	2008      	movs	r0, #8
   19536:	4770      	bx	lr

00019538 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   19538:	b508      	push	{r3, lr}
	if (!rl_access_check(false)) {
   1953a:	2000      	movs	r0, #0
   1953c:	f7ff fb74 	bl	18c28 <rl_access_check>
   19540:	b908      	cbnz	r0, 19546 <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19542:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   19544:	bd08      	pop	{r3, pc}
	rl_clear();
   19546:	f7ff fa7d 	bl	18a44 <rl_clear>
	return 0;
   1954a:	2000      	movs	r0, #0
   1954c:	bd08      	pop	{r3, pc}
	...

00019550 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   19550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19554:	b082      	sub	sp, #8
   19556:	4605      	mov	r5, r0
   19558:	460c      	mov	r4, r1
   1955a:	4616      	mov	r6, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   1955c:	2000      	movs	r0, #0
   1955e:	f7ff fb63 	bl	18c28 <rl_access_check>
   19562:	b918      	cbnz	r0, 1956c <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19564:	200c      	movs	r0, #12
		rl[i].wl = 0;
	}
	rl[i].taken = 1;

	return 0;
}
   19566:	b002      	add	sp, #8
   19568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   1956c:	462f      	mov	r7, r5
   1956e:	f817 0b01 	ldrb.w	r0, [r7], #1
   19572:	f10d 0207 	add.w	r2, sp, #7
   19576:	4639      	mov	r1, r7
   19578:	f7ff fca4 	bl	18ec4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1957c:	2807      	cmp	r0, #7
   1957e:	d801      	bhi.n	19584 <ll_rl_add+0x34>
		return BT_HCI_ERR_INVALID_PARAM;
   19580:	2012      	movs	r0, #18
   19582:	e7f0      	b.n	19566 <ll_rl_add+0x16>
	} else if (j >= ARRAY_SIZE(rl)) {
   19584:	f89d 8007 	ldrb.w	r8, [sp, #7]
   19588:	f1b8 0f07 	cmp.w	r8, #7
   1958c:	d901      	bls.n	19592 <ll_rl_add+0x42>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1958e:	2007      	movs	r0, #7
   19590:	e7e9      	b.n	19566 <ll_rl_add+0x16>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   19592:	f8df a130 	ldr.w	sl, [pc, #304]	; 196c4 <ll_rl_add+0x174>
   19596:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1959a:	4443      	add	r3, r8
   1959c:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   195a0:	eb0a 0009 	add.w	r0, sl, r9
   195a4:	2206      	movs	r2, #6
   195a6:	4639      	mov	r1, r7
   195a8:	3001      	adds	r0, #1
   195aa:	f7e6 fe89 	bl	2c0 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   195ae:	782a      	ldrb	r2, [r5, #0]
   195b0:	f81a 3009 	ldrb.w	r3, [sl, r9]
   195b4:	f362 1386 	bfi	r3, r2, #6, #1
   195b8:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   195bc:	2110      	movs	r1, #16
   195be:	4620      	mov	r0, r4
   195c0:	f7f5 f8f4 	bl	e7ac <mem_nz>
   195c4:	f81a 3009 	ldrb.w	r3, [sl, r9]
   195c8:	f360 0382 	bfi	r3, r0, #2, #1
   195cc:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   195d0:	2110      	movs	r1, #16
   195d2:	4630      	mov	r0, r6
   195d4:	f7f5 f8ea 	bl	e7ac <mem_nz>
   195d8:	f81a 3009 	ldrb.w	r3, [sl, r9]
   195dc:	f360 03c3 	bfi	r3, r0, #3, #1
   195e0:	f80a 3009 	strb.w	r3, [sl, r9]
	if (rl[i].pirk) {
   195e4:	f013 0f04 	tst.w	r3, #4
   195e8:	d016      	beq.n	19618 <ll_rl_add+0xc8>
		rl[i].pirk_idx = peer_irk_count;
   195ea:	4933      	ldr	r1, [pc, #204]	; (196b8 <ll_rl_add+0x168>)
   195ec:	780a      	ldrb	r2, [r1, #0]
   195ee:	4653      	mov	r3, sl
   195f0:	444b      	add	r3, r9
   195f2:	75da      	strb	r2, [r3, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   195f4:	4b31      	ldr	r3, [pc, #196]	; (196bc <ll_rl_add+0x16c>)
   195f6:	f803 8002 	strb.w	r8, [r3, r2]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   195fa:	1c53      	adds	r3, r2, #1
   195fc:	700b      	strb	r3, [r1, #0]
   195fe:	340f      	adds	r4, #15
   19600:	4b2f      	ldr	r3, [pc, #188]	; (196c0 <ll_rl_add+0x170>)
   19602:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   19606:	2210      	movs	r2, #16
   19608:	e004      	b.n	19614 <ll_rl_add+0xc4>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1960a:	7821      	ldrb	r1, [r4, #0]
   1960c:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   1960e:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   19610:	3c01      	subs	r4, #1
   19612:	3301      	adds	r3, #1
	for (; length > 0; length--) {
   19614:	2a00      	cmp	r2, #0
   19616:	d1f8      	bne.n	1960a <ll_rl_add+0xba>
	if (rl[i].lirk) {
   19618:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   1961c:	00d3      	lsls	r3, r2, #3
   1961e:	4a29      	ldr	r2, [pc, #164]	; (196c4 <ll_rl_add+0x174>)
   19620:	5cd3      	ldrb	r3, [r2, r3]
   19622:	f013 0f08 	tst.w	r3, #8
   19626:	d12f      	bne.n	19688 <ll_rl_add+0x138>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   19628:	4e26      	ldr	r6, [pc, #152]	; (196c4 <ll_rl_add+0x174>)
   1962a:	ea4f 0488 	mov.w	r4, r8, lsl #2
   1962e:	eb04 0208 	add.w	r2, r4, r8
   19632:	00d3      	lsls	r3, r2, #3
   19634:	3318      	adds	r3, #24
   19636:	2206      	movs	r2, #6
   19638:	2100      	movs	r1, #0
   1963a:	18f0      	adds	r0, r6, r3
   1963c:	f010 f84c 	bl	296d8 <memset>
	rl[i].rpas_ready = 0;
   19640:	4444      	add	r4, r8
   19642:	00e2      	lsls	r2, r4, #3
   19644:	5cb3      	ldrb	r3, [r6, r2]
	rl[i].dev = 0;
   19646:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1964a:	f36f 1304 	bfc	r3, #4, #1
   1964e:	54b3      	strb	r3, [r6, r2]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   19650:	2200      	movs	r2, #0
   19652:	4639      	mov	r1, r7
   19654:	7828      	ldrb	r0, [r5, #0]
   19656:	f7ff fa0b 	bl	18a70 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   1965a:	2807      	cmp	r0, #7
   1965c:	d822      	bhi.n	196a4 <ll_rl_add+0x154>
		wl[j].rl_idx = i;
   1965e:	4b1a      	ldr	r3, [pc, #104]	; (196c8 <ll_rl_add+0x178>)
   19660:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   19664:	f880 8001 	strb.w	r8, [r0, #1]
		rl[i].wl = 1;
   19668:	00e3      	lsls	r3, r4, #3
   1966a:	5cf2      	ldrb	r2, [r6, r3]
   1966c:	f042 0220 	orr.w	r2, r2, #32
   19670:	54f2      	strb	r2, [r6, r3]
	rl[i].taken = 1;
   19672:	4914      	ldr	r1, [pc, #80]	; (196c4 <ll_rl_add+0x174>)
   19674:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   19678:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   1967c:	5cca      	ldrb	r2, [r1, r3]
   1967e:	f042 0201 	orr.w	r2, r2, #1
   19682:	54ca      	strb	r2, [r1, r3]
	return 0;
   19684:	2000      	movs	r0, #0
   19686:	e76e      	b.n	19566 <ll_rl_add+0x16>
		memcpy(rl[i].local_irk, lirk, 16);
   19688:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1968c:	4443      	add	r3, r8
   1968e:	00da      	lsls	r2, r3, #3
   19690:	4c0c      	ldr	r4, [pc, #48]	; (196c4 <ll_rl_add+0x174>)
   19692:	4414      	add	r4, r2
   19694:	2210      	movs	r2, #16
   19696:	4631      	mov	r1, r6
   19698:	1de0      	adds	r0, r4, #7
   1969a:	f7e6 fe11 	bl	2c0 <memcpy>
		rl[i].local_rpa = NULL;
   1969e:	2300      	movs	r3, #0
   196a0:	6263      	str	r3, [r4, #36]	; 0x24
   196a2:	e7c1      	b.n	19628 <ll_rl_add+0xd8>
		rl[i].wl = 0;
   196a4:	4a07      	ldr	r2, [pc, #28]	; (196c4 <ll_rl_add+0x174>)
   196a6:	eb08 0188 	add.w	r1, r8, r8, lsl #2
   196aa:	00cb      	lsls	r3, r1, #3
   196ac:	5cd1      	ldrb	r1, [r2, r3]
   196ae:	f36f 1145 	bfc	r1, #5, #1
   196b2:	54d1      	strb	r1, [r2, r3]
   196b4:	e7dd      	b.n	19672 <ll_rl_add+0x122>
   196b6:	bf00      	nop
   196b8:	20001744 	.word	0x20001744
   196bc:	20001748 	.word	0x20001748
   196c0:	20001750 	.word	0x20001750
   196c4:	200017d0 	.word	0x200017d0
   196c8:	20001948 	.word	0x20001948

000196cc <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   196cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   196d0:	4604      	mov	r4, r0
	u8_t i;

	if (!rl_access_check(false)) {
   196d2:	2000      	movs	r0, #0
   196d4:	f7ff faa8 	bl	18c28 <rl_access_check>
   196d8:	b910      	cbnz	r0, 196e0 <ll_rl_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   196da:	200c      	movs	r0, #12
   196dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   196e0:	4626      	mov	r6, r4
   196e2:	f816 0b01 	ldrb.w	r0, [r6], #1
   196e6:	2200      	movs	r2, #0
   196e8:	4631      	mov	r1, r6
   196ea:	f7ff fbeb 	bl	18ec4 <ll_rl_find>
   196ee:	4605      	mov	r5, r0
	if (i < ARRAY_SIZE(rl)) {
   196f0:	2807      	cmp	r0, #7
   196f2:	d902      	bls.n	196fa <ll_rl_remove+0x2e>
		}
		rl[i].taken = 0;
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   196f4:	2002      	movs	r0, #2
}
   196f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rl[i].pirk) {
   196fa:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   196fe:	00d3      	lsls	r3, r2, #3
   19700:	4a2d      	ldr	r2, [pc, #180]	; (197b8 <ll_rl_remove+0xec>)
   19702:	5cd3      	ldrb	r3, [r2, r3]
   19704:	f013 0f04 	tst.w	r3, #4
   19708:	d03e      	beq.n	19788 <ll_rl_remove+0xbc>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1970a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1970e:	00da      	lsls	r2, r3, #3
   19710:	4b29      	ldr	r3, [pc, #164]	; (197b8 <ll_rl_remove+0xec>)
   19712:	4413      	add	r3, r2
   19714:	7ddf      	ldrb	r7, [r3, #23]
   19716:	4b29      	ldr	r3, [pc, #164]	; (197bc <ll_rl_remove+0xf0>)
   19718:	781b      	ldrb	r3, [r3, #0]
   1971a:	3b01      	subs	r3, #1
			if (pj && pi != pj) {
   1971c:	f013 08ff 	ands.w	r8, r3, #255	; 0xff
   19720:	d02e      	beq.n	19780 <ll_rl_remove+0xb4>
   19722:	4547      	cmp	r7, r8
   19724:	d02c      	beq.n	19780 <ll_rl_remove+0xb4>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   19726:	4826      	ldr	r0, [pc, #152]	; (197c0 <ll_rl_remove+0xf4>)
   19728:	2210      	movs	r2, #16
   1972a:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   1972e:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   19732:	f7e6 fdc5 	bl	2c0 <memcpy>
				for (k = 0;
   19736:	2300      	movs	r3, #0
   19738:	e001      	b.n	1973e <ll_rl_remove+0x72>
				     k++) {
   1973a:	3301      	adds	r3, #1
   1973c:	b2db      	uxtb	r3, r3
				for (k = 0;
   1973e:	2b07      	cmp	r3, #7
   19740:	d81e      	bhi.n	19780 <ll_rl_remove+0xb4>
					if (rl[k].taken && rl[k].pirk &&
   19742:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   19746:	00ca      	lsls	r2, r1, #3
   19748:	491b      	ldr	r1, [pc, #108]	; (197b8 <ll_rl_remove+0xec>)
   1974a:	5c8a      	ldrb	r2, [r1, r2]
   1974c:	f012 0f01 	tst.w	r2, #1
   19750:	d0f3      	beq.n	1973a <ll_rl_remove+0x6e>
   19752:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   19756:	00ca      	lsls	r2, r1, #3
   19758:	4917      	ldr	r1, [pc, #92]	; (197b8 <ll_rl_remove+0xec>)
   1975a:	5c8a      	ldrb	r2, [r1, r2]
   1975c:	f012 0f04 	tst.w	r2, #4
   19760:	d0eb      	beq.n	1973a <ll_rl_remove+0x6e>
					    rl[k].pirk_idx == pj) {
   19762:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   19766:	00d1      	lsls	r1, r2, #3
   19768:	4a13      	ldr	r2, [pc, #76]	; (197b8 <ll_rl_remove+0xec>)
   1976a:	440a      	add	r2, r1
   1976c:	7dd2      	ldrb	r2, [r2, #23]
					if (rl[k].taken && rl[k].pirk &&
   1976e:	4590      	cmp	r8, r2
   19770:	d1e3      	bne.n	1973a <ll_rl_remove+0x6e>
						rl[k].pirk_idx = pi;
   19772:	2128      	movs	r1, #40	; 0x28
   19774:	4a10      	ldr	r2, [pc, #64]	; (197b8 <ll_rl_remove+0xec>)
   19776:	fb01 2003 	mla	r0, r1, r3, r2
   1977a:	75c7      	strb	r7, [r0, #23]
						peer_irk_rl_ids[pi] = k;
   1977c:	4a11      	ldr	r2, [pc, #68]	; (197c4 <ll_rl_remove+0xf8>)
   1977e:	55d3      	strb	r3, [r2, r7]
			peer_irk_count--;
   19780:	4a0e      	ldr	r2, [pc, #56]	; (197bc <ll_rl_remove+0xf0>)
   19782:	7813      	ldrb	r3, [r2, #0]
   19784:	3b01      	subs	r3, #1
   19786:	7013      	strb	r3, [r2, #0]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   19788:	2200      	movs	r2, #0
   1978a:	4631      	mov	r1, r6
   1978c:	7820      	ldrb	r0, [r4, #0]
   1978e:	f7ff f96f 	bl	18a70 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   19792:	2807      	cmp	r0, #7
   19794:	d804      	bhi.n	197a0 <ll_rl_remove+0xd4>
			wl[j].rl_idx = FILTER_IDX_NONE;
   19796:	4b0c      	ldr	r3, [pc, #48]	; (197c8 <ll_rl_remove+0xfc>)
   19798:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1979c:	23ff      	movs	r3, #255	; 0xff
   1979e:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0;
   197a0:	4a05      	ldr	r2, [pc, #20]	; (197b8 <ll_rl_remove+0xec>)
   197a2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   197a6:	00eb      	lsls	r3, r5, #3
   197a8:	5cd1      	ldrb	r1, [r2, r3]
   197aa:	f36f 0100 	bfc	r1, #0, #1
   197ae:	54d1      	strb	r1, [r2, r3]
		return 0;
   197b0:	2000      	movs	r0, #0
   197b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   197b6:	bf00      	nop
   197b8:	200017d0 	.word	0x200017d0
   197bc:	20001744 	.word	0x20001744
   197c0:	20001750 	.word	0x20001750
   197c4:	20001748 	.word	0x20001748
   197c8:	20001948 	.word	0x20001948

000197cc <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   197cc:	b510      	push	{r4, lr}
   197ce:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   197d0:	795b      	ldrb	r3, [r3, #5]
   197d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   197d6:	2b40      	cmp	r3, #64	; 0x40
   197d8:	d000      	beq.n	197dc <ll_rl_crpa_set+0x10>
   197da:	bd10      	pop	{r4, pc}

		if (id_addr) {
   197dc:	b119      	cbz	r1, 197e6 <ll_rl_crpa_set+0x1a>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   197de:	2200      	movs	r2, #0
   197e0:	f7ff fb70 	bl	18ec4 <ll_rl_find>
   197e4:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   197e6:	2a07      	cmp	r2, #7
   197e8:	d8f7      	bhi.n	197da <ll_rl_crpa_set+0xe>
   197ea:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   197ee:	00cb      	lsls	r3, r1, #3
   197f0:	4907      	ldr	r1, [pc, #28]	; (19810 <ll_rl_crpa_set+0x44>)
   197f2:	5ccb      	ldrb	r3, [r1, r3]
   197f4:	f013 0f01 	tst.w	r3, #1
   197f8:	d0ef      	beq.n	197da <ll_rl_crpa_set+0xe>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   197fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   197fe:	00d0      	lsls	r0, r2, #3
   19800:	3018      	adds	r0, #24
   19802:	2206      	movs	r2, #6
   19804:	4621      	mov	r1, r4
   19806:	4b02      	ldr	r3, [pc, #8]	; (19810 <ll_rl_crpa_set+0x44>)
   19808:	4418      	add	r0, r3
   1980a:	f7e6 fd59 	bl	2c0 <memcpy>
				       sizeof(bt_addr_t));
		}
	}
}
   1980e:	e7e4      	b.n	197da <ll_rl_crpa_set+0xe>
   19810:	200017d0 	.word	0x200017d0

00019814 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   19814:	b538      	push	{r3, r4, r5, lr}
   19816:	460d      	mov	r5, r1
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   19818:	4601      	mov	r1, r0
   1981a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1981e:	2200      	movs	r2, #0
   19820:	f7ff fb50 	bl	18ec4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   19824:	2807      	cmp	r0, #7
   19826:	d901      	bls.n	1982c <ll_rl_crpa_get+0x18>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19828:	2002      	movs	r0, #2
   1982a:	bd38      	pop	{r3, r4, r5, pc}
   1982c:	4604      	mov	r4, r0
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1982e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   19832:	00d8      	lsls	r0, r3, #3
   19834:	3018      	adds	r0, #24
   19836:	2106      	movs	r1, #6
   19838:	4b09      	ldr	r3, [pc, #36]	; (19860 <ll_rl_crpa_get+0x4c>)
   1983a:	4418      	add	r0, r3
   1983c:	f7f4 ffb6 	bl	e7ac <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   19840:	b908      	cbnz	r0, 19846 <ll_rl_crpa_get+0x32>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19842:	2002      	movs	r0, #2
}
   19844:	bd38      	pop	{r3, r4, r5, pc}
			bt_addr_copy(crpa, &rl[i].curr_rpa);
   19846:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1984a:	00e1      	lsls	r1, r4, #3
   1984c:	3118      	adds	r1, #24
   1984e:	2206      	movs	r2, #6
   19850:	4b03      	ldr	r3, [pc, #12]	; (19860 <ll_rl_crpa_get+0x4c>)
   19852:	4419      	add	r1, r3
   19854:	4628      	mov	r0, r5
   19856:	f7e6 fd33 	bl	2c0 <memcpy>
			return 0;
   1985a:	2000      	movs	r0, #0
   1985c:	bd38      	pop	{r3, r4, r5, pc}
   1985e:	bf00      	nop
   19860:	200017d0 	.word	0x200017d0

00019864 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   19864:	b510      	push	{r4, lr}
   19866:	460c      	mov	r4, r1
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   19868:	4601      	mov	r1, r0
   1986a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1986e:	2200      	movs	r2, #0
   19870:	f7ff fb28 	bl	18ec4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   19874:	2807      	cmp	r0, #7
   19876:	d901      	bls.n	1987c <ll_rl_lrpa_get+0x18>
		bt_addr_copy(lrpa, rl[i].local_rpa);
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19878:	2002      	movs	r0, #2
}
   1987a:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   1987c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19880:	00c2      	lsls	r2, r0, #3
   19882:	4b04      	ldr	r3, [pc, #16]	; (19894 <ll_rl_lrpa_get+0x30>)
   19884:	4413      	add	r3, r2
   19886:	2206      	movs	r2, #6
   19888:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1988a:	4620      	mov	r0, r4
   1988c:	f7e6 fd18 	bl	2c0 <memcpy>
		return 0;
   19890:	2000      	movs	r0, #0
   19892:	bd10      	pop	{r4, pc}
   19894:	200017d0 	.word	0x200017d0

00019898 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   19898:	b510      	push	{r4, lr}
   1989a:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   1989c:	2000      	movs	r0, #0
   1989e:	f7ff f9c3 	bl	18c28 <rl_access_check>
   198a2:	b908      	cbnz	r0, 198a8 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   198a4:	200c      	movs	r0, #12
   198a6:	bd10      	pop	{r4, pc}
	}

	switch (enable) {
   198a8:	b11c      	cbz	r4, 198b2 <ll_rl_enable+0x1a>
   198aa:	2c01      	cmp	r4, #1
   198ac:	d005      	beq.n	198ba <ll_rl_enable+0x22>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   198ae:	2012      	movs	r0, #18
	}

	return 0;
}
   198b0:	bd10      	pop	{r4, pc}
		rl_enable = 0;
   198b2:	2000      	movs	r0, #0
   198b4:	4b03      	ldr	r3, [pc, #12]	; (198c4 <ll_rl_enable+0x2c>)
   198b6:	7018      	strb	r0, [r3, #0]
		break;
   198b8:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   198ba:	2201      	movs	r2, #1
   198bc:	4b01      	ldr	r3, [pc, #4]	; (198c4 <ll_rl_enable+0x2c>)
   198be:	701a      	strb	r2, [r3, #0]
	return 0;
   198c0:	2000      	movs	r0, #0
		break;
   198c2:	bd10      	pop	{r4, pc}
   198c4:	20001910 	.word	0x20001910

000198c8 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   198c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   198cc:	fb03 f000 	mul.w	r0, r3, r0
   198d0:	4b01      	ldr	r3, [pc, #4]	; (198d8 <ll_rl_timeout_set+0x10>)
   198d2:	6018      	str	r0, [r3, #0]
   198d4:	4770      	bx	lr
   198d6:	bf00      	nop
   198d8:	20002a5c 	.word	0x20002a5c

000198dc <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   198dc:	b538      	push	{r3, r4, r5, lr}
   198de:	4604      	mov	r4, r0
   198e0:	460d      	mov	r5, r1
	u8_t i;

	if (!rl_access_check(false)) {
   198e2:	2000      	movs	r0, #0
   198e4:	f7ff f9a0 	bl	18c28 <rl_access_check>
   198e8:	b908      	cbnz	r0, 198ee <ll_priv_mode_set+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   198ea:	200c      	movs	r0, #12
   198ec:	bd38      	pop	{r3, r4, r5, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   198ee:	4621      	mov	r1, r4
   198f0:	f811 0b01 	ldrb.w	r0, [r1], #1
   198f4:	2200      	movs	r2, #0
   198f6:	f7ff fae5 	bl	18ec4 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   198fa:	2807      	cmp	r0, #7
   198fc:	d901      	bls.n	19902 <ll_priv_mode_set+0x26>
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
		}
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   198fe:	2002      	movs	r0, #2
   19900:	bd38      	pop	{r3, r4, r5, pc}
		switch (mode) {
   19902:	b11d      	cbz	r5, 1990c <ll_priv_mode_set+0x30>
   19904:	2d01      	cmp	r5, #1
   19906:	d00b      	beq.n	19920 <ll_priv_mode_set+0x44>
			return BT_HCI_ERR_INVALID_PARAM;
   19908:	2012      	movs	r0, #18
	}

	return 0;
}
   1990a:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   1990c:	4a09      	ldr	r2, [pc, #36]	; (19934 <ll_priv_mode_set+0x58>)
   1990e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19912:	00c3      	lsls	r3, r0, #3
   19914:	5cd1      	ldrb	r1, [r2, r3]
   19916:	f36f 1104 	bfc	r1, #4, #1
   1991a:	54d1      	strb	r1, [r2, r3]
	return 0;
   1991c:	2000      	movs	r0, #0
			break;
   1991e:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   19920:	4904      	ldr	r1, [pc, #16]	; (19934 <ll_priv_mode_set+0x58>)
   19922:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19926:	00c3      	lsls	r3, r0, #3
   19928:	5cca      	ldrb	r2, [r1, r3]
   1992a:	f042 0210 	orr.w	r2, r2, #16
   1992e:	54ca      	strb	r2, [r1, r3]
	return 0;
   19930:	2000      	movs	r0, #0
			break;
   19932:	bd38      	pop	{r3, r4, r5, pc}
   19934:	200017d0 	.word	0x200017d0

00019938 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
   19938:	b538      	push	{r3, r4, r5, lr}
   1993a:	4605      	mov	r5, r0
	wl_anon = 0;
   1993c:	2400      	movs	r4, #0
   1993e:	4b0e      	ldr	r3, [pc, #56]	; (19978 <ll_filter_reset+0x40>)
   19940:	701c      	strb	r4, [r3, #0]

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();
   19942:	f7ff f86b 	bl	18a1c <wl_clear>

	rl_enable = 0;
   19946:	4b0d      	ldr	r3, [pc, #52]	; (1997c <ll_filter_reset+0x44>)
   19948:	701c      	strb	r4, [r3, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1994a:	4a0d      	ldr	r2, [pc, #52]	; (19980 <ll_filter_reset+0x48>)
   1994c:	4b0d      	ldr	r3, [pc, #52]	; (19984 <ll_filter_reset+0x4c>)
   1994e:	601a      	str	r2, [r3, #0]
	rpa_last_ms = -1;
   19950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19954:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19958:	4b0b      	ldr	r3, [pc, #44]	; (19988 <ll_filter_reset+0x50>)
   1995a:	e9c3 0100 	strd	r0, r1, [r3]
	rl_clear();
   1995e:	f7ff f871 	bl	18a44 <rl_clear>
	if (init) {
   19962:	b91d      	cbnz	r5, 1996c <ll_filter_reset+0x34>
		k_delayed_work_init(&rpa_work, rpa_timeout);
	} else {
		k_delayed_work_cancel(&rpa_work);
   19964:	4809      	ldr	r0, [pc, #36]	; (1998c <ll_filter_reset+0x54>)
   19966:	f00f fcd3 	bl	29310 <k_delayed_work_cancel>
   1996a:	bd38      	pop	{r3, r4, r5, pc}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1996c:	4908      	ldr	r1, [pc, #32]	; (19990 <ll_filter_reset+0x58>)
   1996e:	4807      	ldr	r0, [pc, #28]	; (1998c <ll_filter_reset+0x54>)
   19970:	f00f fcb0 	bl	292d4 <k_delayed_work_init>
   19974:	bd38      	pop	{r3, r4, r5, pc}
   19976:	bf00      	nop
   19978:	200028b8 	.word	0x200028b8
   1997c:	20001910 	.word	0x20001910
   19980:	000dbba0 	.word	0x000dbba0
   19984:	20002a5c 	.word	0x20002a5c
   19988:	200028b0 	.word	0x200028b0
   1998c:	20002928 	.word	0x20002928
   19990:	00019511 	.word	0x00019511

00019994 <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   19994:	4800      	ldr	r0, [pc, #0]	; (19998 <ll_adv_set_get+0x4>)
   19996:	4770      	bx	lr
   19998:	200019bc 	.word	0x200019bc

0001999c <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   1999c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199a0:	b087      	sub	sp, #28
   199a2:	4689      	mov	r9, r1
   199a4:	4614      	mov	r4, r2
   199a6:	461e      	mov	r6, r3
   199a8:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   199ac:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   199b0:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   199b4:	4b89      	ldr	r3, [pc, #548]	; (19bdc <ll_adv_params_set+0x240>)
   199b6:	e893 0003 	ldmia.w	r3, {r0, r1}
   199ba:	9004      	str	r0, [sp, #16]
   199bc:	f8ad 1014 	strh.w	r1, [sp, #20]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
   199c0:	f7fd fd60 	bl	17484 <radio_adv_is_enabled>
   199c4:	9001      	str	r0, [sp, #4]
   199c6:	b128      	cbz	r0, 199d4 <ll_adv_params_set+0x38>
		return BT_HCI_ERR_CMD_DISALLOWED;
   199c8:	230c      	movs	r3, #12
   199ca:	9301      	str	r3, [sp, #4]
	if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
	}

	return 0;
}
   199cc:	9801      	ldr	r0, [sp, #4]
   199ce:	b007      	add	sp, #28
   199d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ll_adv.phy_p = BIT(0);
   199d4:	4b82      	ldr	r3, [pc, #520]	; (19be0 <ll_adv_params_set+0x244>)
   199d6:	7a1a      	ldrb	r2, [r3, #8]
   199d8:	2101      	movs	r1, #1
   199da:	f361 0202 	bfi	r2, r1, #0, #3
   199de:	721a      	strb	r2, [r3, #8]
	if (adv_type > 0x04) {
   199e0:	2e04      	cmp	r6, #4
   199e2:	d90f      	bls.n	19a04 <ll_adv_params_set+0x68>
		if (evt_prop & BIT(4)) {
   199e4:	f019 0f10 	tst.w	r9, #16
   199e8:	d071      	beq.n	19ace <ll_adv_params_set+0x132>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   199ea:	4b7c      	ldr	r3, [pc, #496]	; (19bdc <ll_adv_params_set+0x240>)
   199ec:	689b      	ldr	r3, [r3, #8]
   199ee:	9303      	str	r3, [sp, #12]
			adv_type = leg_adv_type[evt_prop & 0x03];
   199f0:	f009 0303 	and.w	r3, r9, #3
   199f4:	aa06      	add	r2, sp, #24
   199f6:	4413      	add	r3, r2
   199f8:	f813 6c0c 	ldrb.w	r6, [r3, #-12]
			if (evt_prop & BIT(3)) {
   199fc:	f019 0f08 	tst.w	r9, #8
   19a00:	d000      	beq.n	19a04 <ll_adv_params_set+0x68>
				adv_type = 0x01;
   19a02:	460e      	mov	r6, r1
	if (adv_type != 0x01) {
   19a04:	2e01      	cmp	r6, #1
   19a06:	d071      	beq.n	19aec <ll_adv_params_set+0x150>
		ll_adv.interval = interval;
   19a08:	4b75      	ldr	r3, [pc, #468]	; (19be0 <ll_adv_params_set+0x244>)
   19a0a:	60dc      	str	r4, [r3, #12]
	ll_adv.chan_map = chan_map;
   19a0c:	4a74      	ldr	r2, [pc, #464]	; (19be0 <ll_adv_params_set+0x244>)
   19a0e:	7813      	ldrb	r3, [r2, #0]
   19a10:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
   19a14:	f361 0302 	bfi	r3, r1, #0, #3
	ll_adv.filter_policy = filter_policy;
   19a18:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
   19a1c:	f361 03c4 	bfi	r3, r1, #3, #2
   19a20:	7013      	strb	r3, [r2, #0]
	radio_adv_data = radio_adv_data_get();
   19a22:	f7fd fd27 	bl	17474 <radio_adv_data_get>
   19a26:	4607      	mov	r7, r0
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19a28:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
   19a2c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19a30:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
   19a34:	eb00 0a04 	add.w	sl, r0, r4
	pdu->type = pdu_adv_type[adv_type];
   19a38:	ab06      	add	r3, sp, #24
   19a3a:	441e      	add	r6, r3
   19a3c:	f816 2c08 	ldrb.w	r2, [r6, #-8]
   19a40:	5d03      	ldrb	r3, [r0, r4]
   19a42:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0;
   19a46:	f36f 1304 	bfc	r3, #4, #1
   19a4a:	5503      	strb	r3, [r0, r4]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   19a4c:	f003 030f 	and.w	r3, r3, #15
   19a50:	2b01      	cmp	r3, #1
   19a52:	d94f      	bls.n	19af4 <ll_adv_params_set+0x158>
		pdu->chan_sel = 0;
   19a54:	5d03      	ldrb	r3, [r0, r4]
   19a56:	f36f 1345 	bfc	r3, #5, #1
   19a5a:	5503      	strb	r3, [r0, r4]
	ll_adv.own_addr_type = own_addr_type;
   19a5c:	4a60      	ldr	r2, [pc, #384]	; (19be0 <ll_adv_params_set+0x244>)
   19a5e:	7813      	ldrb	r3, [r2, #0]
   19a60:	f368 1346 	bfi	r3, r8, #5, #2
   19a64:	7013      	strb	r3, [r2, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   19a66:	f003 0360 	and.w	r3, r3, #96	; 0x60
   19a6a:	2b40      	cmp	r3, #64	; 0x40
   19a6c:	d047      	beq.n	19afe <ll_adv_params_set+0x162>
   19a6e:	2b60      	cmp	r3, #96	; 0x60
   19a70:	d045      	beq.n	19afe <ll_adv_params_set+0x162>
	pdu->tx_addr = own_addr_type & 0x1;
   19a72:	f008 0801 	and.w	r8, r8, #1
   19a76:	5d3b      	ldrb	r3, [r7, r4]
   19a78:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   19a7c:	f36f 13c7 	bfc	r3, #7, #1
   19a80:	553b      	strb	r3, [r7, r4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19a82:	f003 030f 	and.w	r3, r3, #15
   19a86:	2b01      	cmp	r3, #1
   19a88:	d044      	beq.n	19b14 <ll_adv_params_set+0x178>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   19a8a:	2b07      	cmp	r3, #7
   19a8c:	d050      	beq.n	19b30 <ll_adv_params_set+0x194>
	} else if (pdu->len == 0) {
   19a8e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   19a92:	b913      	cbnz	r3, 19a9a <ll_adv_params_set+0xfe>
		pdu->len = BDADDR_SIZE;
   19a94:	2306      	movs	r3, #6
   19a96:	f88a 3001 	strb.w	r3, [sl, #1]
	radio_adv_data = radio_scan_data_get();
   19a9a:	f7fd fcef 	bl	1747c <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19a9e:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
   19aa2:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   19aa6:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
   19aaa:	1881      	adds	r1, r0, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   19aac:	5c83      	ldrb	r3, [r0, r2]
   19aae:	2404      	movs	r4, #4
   19ab0:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->tx_addr = own_addr_type & 0x1;
   19ab4:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   19ab8:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   19abc:	f36f 13c7 	bfc	r3, #7, #1
   19ac0:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   19ac2:	784b      	ldrb	r3, [r1, #1]
   19ac4:	2b00      	cmp	r3, #0
   19ac6:	d181      	bne.n	199cc <ll_adv_params_set+0x30>
		pdu->len = BDADDR_SIZE;
   19ac8:	2306      	movs	r3, #6
   19aca:	704b      	strb	r3, [r1, #1]
   19acc:	e77e      	b.n	199cc <ll_adv_params_set+0x30>
			if (((evt_prop & 0x03) == 0x03) ||
   19ace:	f009 0303 	and.w	r3, r9, #3
   19ad2:	2b03      	cmp	r3, #3
   19ad4:	d07c      	beq.n	19bd0 <ll_adv_params_set+0x234>
   19ad6:	f009 030c 	and.w	r3, r9, #12
   19ada:	2b0c      	cmp	r3, #12
   19adc:	d07b      	beq.n	19bd6 <ll_adv_params_set+0x23a>
			ll_adv.phy_p = phy_p;
   19ade:	4b40      	ldr	r3, [pc, #256]	; (19be0 <ll_adv_params_set+0x244>)
   19ae0:	7a1a      	ldrb	r2, [r3, #8]
   19ae2:	f365 0202 	bfi	r2, r5, #0, #3
   19ae6:	721a      	strb	r2, [r3, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   19ae8:	2605      	movs	r6, #5
   19aea:	e78b      	b.n	19a04 <ll_adv_params_set+0x68>
		ll_adv.interval = 0;
   19aec:	2200      	movs	r2, #0
   19aee:	4b3c      	ldr	r3, [pc, #240]	; (19be0 <ll_adv_params_set+0x244>)
   19af0:	60da      	str	r2, [r3, #12]
   19af2:	e78b      	b.n	19a0c <ll_adv_params_set+0x70>
		pdu->chan_sel = 1;
   19af4:	5d03      	ldrb	r3, [r0, r4]
   19af6:	f043 0320 	orr.w	r3, r3, #32
   19afa:	5503      	strb	r3, [r0, r4]
   19afc:	e7ae      	b.n	19a5c <ll_adv_params_set+0xc0>
		ll_adv.id_addr_type = direct_addr_type;
   19afe:	4838      	ldr	r0, [pc, #224]	; (19be0 <ll_adv_params_set+0x244>)
   19b00:	7803      	ldrb	r3, [r0, #0]
   19b02:	f36b 13c7 	bfi	r3, fp, #7, #1
   19b06:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   19b0a:	2206      	movs	r2, #6
   19b0c:	9912      	ldr	r1, [sp, #72]	; 0x48
   19b0e:	f7e6 fbd7 	bl	2c0 <memcpy>
   19b12:	e7ae      	b.n	19a72 <ll_adv_params_set+0xd6>
		pdu->rx_addr = direct_addr_type;
   19b14:	5d3b      	ldrb	r3, [r7, r4]
   19b16:	f36b 13c7 	bfi	r3, fp, #7, #1
   19b1a:	553b      	strb	r3, [r7, r4]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   19b1c:	2206      	movs	r2, #6
   19b1e:	9912      	ldr	r1, [sp, #72]	; 0x48
   19b20:	f10a 0008 	add.w	r0, sl, #8
   19b24:	f7e6 fbcc 	bl	2c0 <memcpy>
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
   19b28:	230c      	movs	r3, #12
   19b2a:	f88a 3001 	strb.w	r3, [sl, #1]
   19b2e:	e7b4      	b.n	19a9a <ll_adv_params_set+0xfe>
		p = (void *)&pdu->payload.adv_ext_ind;
   19b30:	f10a 0302 	add.w	r3, sl, #2
		ptr = (u8_t *)h + sizeof(*h);
   19b34:	f10a 0104 	add.w	r1, sl, #4
		p->ext_hdr_len = 0;
   19b38:	f89a 2002 	ldrb.w	r2, [sl, #2]
		p->adv_mode = evt_prop & 0x03;
   19b3c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   19b40:	f369 1287 	bfi	r2, r9, #6, #2
   19b44:	f88a 2002 	strb.w	r2, [sl, #2]
		*(u8_t *)h = 0;
   19b48:	2200      	movs	r2, #0
   19b4a:	f88a 2003 	strb.w	r2, [sl, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   19b4e:	f019 0f20 	tst.w	r9, #32
   19b52:	d10e      	bne.n	19b72 <ll_adv_params_set+0x1d6>
   19b54:	f89a 2002 	ldrb.w	r2, [sl, #2]
   19b58:	f012 0fc0 	tst.w	r2, #192	; 0xc0
   19b5c:	d109      	bne.n	19b72 <ll_adv_params_set+0x1d6>
   19b5e:	2d04      	cmp	r5, #4
   19b60:	d007      	beq.n	19b72 <ll_adv_params_set+0x1d6>
			h->adv_addr = 1;
   19b62:	f89a 2003 	ldrb.w	r2, [sl, #3]
   19b66:	f042 0201 	orr.w	r2, r2, #1
   19b6a:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr += BDADDR_SIZE;
   19b6e:	f10a 010a 	add.w	r1, sl, #10
		if (evt_prop & BIT(6)) {
   19b72:	f019 0f40 	tst.w	r9, #64	; 0x40
   19b76:	d006      	beq.n	19b86 <ll_adv_params_set+0x1ea>
			h->tx_pwr = 1;
   19b78:	f89a 2003 	ldrb.w	r2, [sl, #3]
   19b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   19b80:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr++;
   19b84:	3101      	adds	r1, #1
		len = ptr - (u8_t *)p;
   19b86:	1acb      	subs	r3, r1, r3
   19b88:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_payload_com_ext_adv,
   19b8a:	2b02      	cmp	r3, #2
   19b8c:	d916      	bls.n	19bbc <ll_adv_params_set+0x220>
			p->ext_hdr_len = len -
   19b8e:	1e58      	subs	r0, r3, #1
   19b90:	f89a 2002 	ldrb.w	r2, [sl, #2]
   19b94:	f360 0205 	bfi	r2, r0, #0, #6
   19b98:	f88a 2002 	strb.w	r2, [sl, #2]
			pdu->len = len;
   19b9c:	f88a 3001 	strb.w	r3, [sl, #1]
		if (h->tx_pwr) {
   19ba0:	f89a 3003 	ldrb.w	r3, [sl, #3]
   19ba4:	f013 0f40 	tst.w	r3, #64	; 0x40
   19ba8:	f43f af77 	beq.w	19a9a <ll_adv_params_set+0xfe>
			if (tx_pwr) {
   19bac:	9b15      	ldr	r3, [sp, #84]	; 0x54
   19bae:	b16b      	cbz	r3, 19bcc <ll_adv_params_set+0x230>
				if (*tx_pwr != 0x7F) {
   19bb0:	781b      	ldrb	r3, [r3, #0]
   19bb2:	2b7f      	cmp	r3, #127	; 0x7f
   19bb4:	d006      	beq.n	19bc4 <ll_adv_params_set+0x228>
			*ptr = _tx_pwr;
   19bb6:	f801 3c01 	strb.w	r3, [r1, #-1]
   19bba:	e76e      	b.n	19a9a <ll_adv_params_set+0xfe>
			pdu->len = offsetof(struct pdu_adv_payload_com_ext_adv,
   19bbc:	2301      	movs	r3, #1
   19bbe:	f88a 3001 	strb.w	r3, [sl, #1]
   19bc2:	e7ed      	b.n	19ba0 <ll_adv_params_set+0x204>
					*tx_pwr = _tx_pwr;
   19bc4:	2300      	movs	r3, #0
   19bc6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   19bc8:	7013      	strb	r3, [r2, #0]
   19bca:	e7f4      	b.n	19bb6 <ll_adv_params_set+0x21a>
			_tx_pwr = 0;
   19bcc:	2300      	movs	r3, #0
   19bce:	e7f2      	b.n	19bb6 <ll_adv_params_set+0x21a>
				return 0x12; /* invalid HCI cmd param */
   19bd0:	2312      	movs	r3, #18
   19bd2:	9301      	str	r3, [sp, #4]
   19bd4:	e6fa      	b.n	199cc <ll_adv_params_set+0x30>
   19bd6:	2312      	movs	r3, #18
   19bd8:	9301      	str	r3, [sp, #4]
   19bda:	e6f7      	b.n	199cc <ll_adv_params_set+0x30>
   19bdc:	0002daa0 	.word	0x0002daa0
   19be0:	200019bc 	.word	0x200019bc

00019be4 <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   19be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19be8:	4606      	mov	r6, r0
   19bea:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   19bec:	f7fd fc42 	bl	17474 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19bf0:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   19bf4:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19bf8:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   19bfc:	1881      	adds	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   19bfe:	5c83      	ldrb	r3, [r0, r2]
   19c00:	f003 030f 	and.w	r3, r3, #15
   19c04:	2b01      	cmp	r3, #1
   19c06:	d03e      	beq.n	19c86 <ll_adv_data_set+0xa2>
   19c08:	4604      	mov	r4, r0
   19c0a:	2b07      	cmp	r3, #7
   19c0c:	d03b      	beq.n	19c86 <ll_adv_data_set+0xa2>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   19c0e:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   19c12:	429d      	cmp	r5, r3
   19c14:	d039      	beq.n	19c8a <ll_adv_data_set+0xa6>
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   19c16:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19c1a:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   19c1e:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   19c22:	f814 e002 	ldrb.w	lr, [r4, r2]
   19c26:	5ce0      	ldrb	r0, [r4, r3]
   19c28:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
   19c2c:	f36f 1004 	bfc	r0, #4, #1
   19c30:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   19c32:	5ca0      	ldrb	r0, [r4, r2]
   19c34:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19c38:	f814 e003 	ldrb.w	lr, [r4, r3]
   19c3c:	f360 1e45 	bfi	lr, r0, #5, #1
   19c40:	f804 e003 	strb.w	lr, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   19c44:	5ca0      	ldrb	r0, [r4, r2]
   19c46:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19c4a:	fa5f fe8e 	uxtb.w	lr, lr
   19c4e:	f360 1e86 	bfi	lr, r0, #6, #1
   19c52:	f804 e003 	strb.w	lr, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
   19c56:	5ca2      	ldrb	r2, [r4, r2]
   19c58:	09d2      	lsrs	r2, r2, #7
   19c5a:	fa5f f08e 	uxtb.w	r0, lr
   19c5e:	f362 10c7 	bfi	r0, r2, #7, #1
   19c62:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->payload.adv_ind.addr[0],
   19c64:	2206      	movs	r2, #6
   19c66:	3102      	adds	r1, #2
   19c68:	f108 0002 	add.w	r0, r8, #2
   19c6c:	f7e6 fb28 	bl	2c0 <memcpy>
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
   19c70:	4632      	mov	r2, r6
   19c72:	4639      	mov	r1, r7
   19c74:	f108 0008 	add.w	r0, r8, #8
   19c78:	f7e6 fb22 	bl	2c0 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   19c7c:	3606      	adds	r6, #6
   19c7e:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   19c82:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   19c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_adv_data->last + 1;
   19c8a:	3501      	adds	r5, #1
   19c8c:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   19c8e:	2d02      	cmp	r5, #2
   19c90:	d1c1      	bne.n	19c16 <ll_adv_data_set+0x32>
			last = 0;
   19c92:	2500      	movs	r5, #0
   19c94:	e7bf      	b.n	19c16 <ll_adv_data_set+0x32>

00019c96 <ll_scan_data_set>:
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   19c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c9a:	4606      	mov	r6, r0
   19c9c:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   19c9e:	f7fd fbed 	bl	1747c <radio_scan_data_get>
   19ca2:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   19ca4:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
   19ca8:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   19cac:	429a      	cmp	r2, r3
   19cae:	d031      	beq.n	19d14 <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
	} else {
		last = radio_scan_data->last;
   19cb0:	461d      	mov	r5, r3
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   19cb2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   19cb6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   19cba:	18e1      	adds	r1, r4, r3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   19cbc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19cc0:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   19cc4:	eb04 0802 	add.w	r8, r4, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   19cc8:	5ca0      	ldrb	r0, [r4, r2]
   19cca:	f04f 0e04 	mov.w	lr, #4
   19cce:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   19cd2:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   19cd6:	f36f 1045 	bfc	r0, #5, #1
   19cda:	54a0      	strb	r0, [r4, r2]
	pdu->tx_addr = prev->tx_addr;
   19cdc:	5ce0      	ldrb	r0, [r4, r3]
   19cde:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19ce2:	5ca3      	ldrb	r3, [r4, r2]
   19ce4:	f360 1386 	bfi	r3, r0, #6, #1
	pdu->rx_addr = 0;
   19ce8:	f36f 13c7 	bfc	r3, #7, #1
   19cec:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
   19cee:	1db3      	adds	r3, r6, #6
   19cf0:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->payload.scan_rsp.addr[0],
   19cf4:	2206      	movs	r2, #6
   19cf6:	3102      	adds	r1, #2
   19cf8:	f108 0002 	add.w	r0, r8, #2
   19cfc:	f7e6 fae0 	bl	2c0 <memcpy>
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);
   19d00:	4632      	mov	r2, r6
   19d02:	4639      	mov	r1, r7
   19d04:	f108 0008 	add.w	r0, r8, #8
   19d08:	f7e6 fada 	bl	2c0 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   19d0c:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   19d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_scan_data->last + 1;
   19d14:	1c5d      	adds	r5, r3, #1
   19d16:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   19d18:	2d02      	cmp	r5, #2
   19d1a:	d1ca      	bne.n	19cb2 <ll_scan_data_set+0x1c>
			last = 0;
   19d1c:	2500      	movs	r5, #0
   19d1e:	e7c8      	b.n	19cb2 <ll_scan_data_set+0x1c>

00019d20 <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
   19d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d24:	b082      	sub	sp, #8
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   19d26:	b120      	cbz	r0, 19d32 <ll_adv_enable+0x12>
		return radio_adv_disable();
	} else if (radio_adv_is_enabled()) {
   19d28:	f7fd fbac 	bl	17484 <radio_adv_is_enabled>
   19d2c:	b130      	cbz	r0, 19d3c <ll_adv_enable+0x1c>
		return 0;
   19d2e:	2000      	movs	r0, #0
   19d30:	e001      	b.n	19d36 <ll_adv_enable+0x16>
		return radio_adv_disable();
   19d32:	f7fe fb27 	bl	18384 <radio_adv_disable>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
   19d36:	b002      	add	sp, #8
   19d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   19d3c:	f7fd fb9a 	bl	17474 <radio_adv_data_get>
   19d40:	4605      	mov	r5, r0
	radio_scan_data = radio_scan_data_get();
   19d42:	f7fd fb9b 	bl	1747c <radio_scan_data_get>
			[radio_adv_data->last][0];
   19d46:	f895 204f 	ldrb.w	r2, [r5, #79]	; 0x4f
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   19d4a:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   19d4e:	ebc2 04c4 	rsb	r4, r2, r4, lsl #3
   19d52:	192e      	adds	r6, r5, r4
			[radio_scan_data->last][0];
   19d54:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   19d58:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   19d5c:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   19d60:	18c7      	adds	r7, r0, r3
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   19d62:	5d2b      	ldrb	r3, [r5, r4]
   19d64:	f003 030f 	and.w	r3, r3, #15
   19d68:	2b07      	cmp	r3, #7
   19d6a:	d023      	beq.n	19db4 <ll_adv_enable+0x94>
		ll_filters_adv_update(ll_adv.filter_policy);
   19d6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 19e40 <ll_adv_enable+0x120>
   19d70:	f898 0000 	ldrb.w	r0, [r8]
   19d74:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   19d78:	f7ff f874 	bl	18e64 <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   19d7c:	f898 3000 	ldrb.w	r3, [r8]
   19d80:	f003 0360 	and.w	r3, r3, #96	; 0x60
   19d84:	2b40      	cmp	r3, #64	; 0x40
   19d86:	d02b      	beq.n	19de0 <ll_adv_enable+0xc0>
   19d88:	2b60      	cmp	r3, #96	; 0x60
   19d8a:	d029      	beq.n	19de0 <ll_adv_enable+0xc0>
		bool priv = false;
   19d8c:	2300      	movs	r3, #0
	u8_t   rl_idx = FILTER_IDX_NONE;
   19d8e:	f04f 08ff 	mov.w	r8, #255	; 0xff
		if (!priv) {
   19d92:	2b00      	cmp	r3, #0
   19d94:	d03b      	beq.n	19e0e <ll_adv_enable+0xee>
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   19d96:	4b2a      	ldr	r3, [pc, #168]	; (19e40 <ll_adv_enable+0x120>)
   19d98:	7a18      	ldrb	r0, [r3, #8]
   19d9a:	8999      	ldrh	r1, [r3, #12]
				  ll_adv.chan_map, ll_adv.filter_policy,
   19d9c:	781a      	ldrb	r2, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   19d9e:	f8cd 8000 	str.w	r8, [sp]
   19da2:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   19da6:	f002 0207 	and.w	r2, r2, #7
   19daa:	f000 0007 	and.w	r0, r0, #7
   19dae:	f7fe f90b 	bl	17fc8 <radio_adv_enable>
	return status;
   19db2:	e7c0      	b.n	19d36 <ll_adv_enable+0x16>
		ptr = (u8_t *)h + sizeof(*h);
   19db4:	1d37      	adds	r7, r6, #4
		if (h->adv_addr) {
   19db6:	78f3      	ldrb	r3, [r6, #3]
   19db8:	f013 0f01 	tst.w	r3, #1
   19dbc:	d102      	bne.n	19dc4 <ll_adv_enable+0xa4>
	u8_t   rl_idx = FILTER_IDX_NONE;
   19dbe:	f04f 08ff 	mov.w	r8, #255	; 0xff
   19dc2:	e7e8      	b.n	19d96 <ll_adv_enable+0x76>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   19dc4:	5d28      	ldrb	r0, [r5, r4]
   19dc6:	2100      	movs	r1, #0
   19dc8:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19dcc:	f7fe fdf4 	bl	189b8 <ll_addr_get>
   19dd0:	2206      	movs	r2, #6
   19dd2:	4601      	mov	r1, r0
   19dd4:	4638      	mov	r0, r7
   19dd6:	f7e6 fa73 	bl	2c0 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   19dda:	f04f 08ff 	mov.w	r8, #255	; 0xff
   19dde:	e7da      	b.n	19d96 <ll_adv_enable+0x76>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   19de0:	4917      	ldr	r1, [pc, #92]	; (19e40 <ll_adv_enable+0x120>)
   19de2:	f811 0b02 	ldrb.w	r0, [r1], #2
   19de6:	2200      	movs	r2, #0
   19de8:	09c0      	lsrs	r0, r0, #7
   19dea:	f7ff f86b 	bl	18ec4 <ll_rl_find>
   19dee:	4680      	mov	r8, r0
			if (rl_idx != FILTER_IDX_NONE) {
   19df0:	28ff      	cmp	r0, #255	; 0xff
   19df2:	d002      	beq.n	19dfa <ll_adv_enable+0xda>
				ll_rl_rpa_update(false);
   19df4:	2000      	movs	r0, #0
   19df6:	f7ff fac7 	bl	19388 <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   19dfa:	4631      	mov	r1, r6
   19dfc:	4640      	mov	r0, r8
   19dfe:	f7ff f9f9 	bl	191f4 <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   19e02:	4639      	mov	r1, r7
   19e04:	4640      	mov	r0, r8
   19e06:	f7ff f9f5 	bl	191f4 <ll_rl_pdu_adv_update>
			priv = true;
   19e0a:	2301      	movs	r3, #1
   19e0c:	e7c1      	b.n	19d92 <ll_adv_enable+0x72>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   19e0e:	3602      	adds	r6, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   19e10:	5d28      	ldrb	r0, [r5, r4]
   19e12:	2100      	movs	r1, #0
   19e14:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19e18:	f7fe fdce 	bl	189b8 <ll_addr_get>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   19e1c:	2206      	movs	r2, #6
   19e1e:	4601      	mov	r1, r0
   19e20:	4630      	mov	r0, r6
   19e22:	f7e6 fa4d 	bl	2c0 <memcpy>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   19e26:	3702      	adds	r7, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   19e28:	5d28      	ldrb	r0, [r5, r4]
   19e2a:	2100      	movs	r1, #0
   19e2c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19e30:	f7fe fdc2 	bl	189b8 <ll_addr_get>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   19e34:	2206      	movs	r2, #6
   19e36:	4601      	mov	r1, r0
   19e38:	4638      	mov	r0, r7
   19e3a:	f7e6 fa41 	bl	2c0 <memcpy>
   19e3e:	e7aa      	b.n	19d96 <ll_adv_enable+0x76>
   19e40:	200019bc 	.word	0x200019bc

00019e44 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   19e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19e46:	4607      	mov	r7, r0
   19e48:	460e      	mov	r6, r1
   19e4a:	4615      	mov	r5, r2
   19e4c:	461c      	mov	r4, r3
	if (radio_scan_is_enabled()) {
   19e4e:	f7fd fb31 	bl	174b4 <radio_scan_is_enabled>
   19e52:	b110      	cbz	r0, 19e5a <ll_scan_params_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19e54:	220c      	movs	r2, #12
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
	ll_scan.filter_policy = filter_policy;

	return 0;
}
   19e56:	4610      	mov	r0, r2
   19e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19e5a:	4602      	mov	r2, r0
	ll_scan.type = type;
   19e5c:	4906      	ldr	r1, [pc, #24]	; (19e78 <ll_scan_params_set+0x34>)
   19e5e:	790b      	ldrb	r3, [r1, #4]
   19e60:	f367 0303 	bfi	r3, r7, #0, #4
	ll_scan.interval = interval;
   19e64:	800e      	strh	r6, [r1, #0]
	ll_scan.window = window;
   19e66:	804d      	strh	r5, [r1, #2]
	ll_scan.own_addr_type = own_addr_type;
   19e68:	f364 1305 	bfi	r3, r4, #4, #2
	ll_scan.filter_policy = filter_policy;
   19e6c:	f89d 0018 	ldrb.w	r0, [sp, #24]
   19e70:	f360 1387 	bfi	r3, r0, #6, #2
   19e74:	710b      	strb	r3, [r1, #4]
	return 0;
   19e76:	e7ee      	b.n	19e56 <ll_scan_params_set+0x12>
   19e78:	200019cc 	.word	0x200019cc

00019e7c <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   19e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e7e:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   19e80:	b120      	cbz	r0, 19e8c <ll_scan_enable+0x10>
		return radio_scan_disable();
	} else if (radio_scan_is_enabled()) {
   19e82:	f7fd fb17 	bl	174b4 <radio_scan_is_enabled>
   19e86:	b128      	cbz	r0, 19e94 <ll_scan_enable+0x18>
		/* Duplicate filtering is processed in the HCI layer */
		return 0;
   19e88:	2000      	movs	r0, #0
   19e8a:	e001      	b.n	19e90 <ll_scan_enable+0x14>
		return radio_scan_disable();
   19e8c:	f7fe fbac 	bl	185e8 <radio_scan_disable>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   19e90:	b005      	add	sp, #20
   19e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_filters_scan_update(ll_scan.filter_policy);
   19e94:	4c18      	ldr	r4, [pc, #96]	; (19ef8 <ll_scan_enable+0x7c>)
   19e96:	7920      	ldrb	r0, [r4, #4]
   19e98:	0980      	lsrs	r0, r0, #6
   19e9a:	f7fe fffb 	bl	18e94 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   19e9e:	7923      	ldrb	r3, [r4, #4]
   19ea0:	f013 0f01 	tst.w	r3, #1
   19ea4:	d00d      	beq.n	19ec2 <ll_scan_enable+0x46>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   19ea6:	7923      	ldrb	r3, [r4, #4]
   19ea8:	f003 0330 	and.w	r3, r3, #48	; 0x30
	if ((ll_scan.type & 0x1) &&
   19eac:	2b20      	cmp	r3, #32
   19eae:	d003      	beq.n	19eb8 <ll_scan_enable+0x3c>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   19eb0:	2b30      	cmp	r3, #48	; 0x30
   19eb2:	d001      	beq.n	19eb8 <ll_scan_enable+0x3c>
	u8_t  rpa_gen = 0;
   19eb4:	2700      	movs	r7, #0
   19eb6:	e005      	b.n	19ec4 <ll_scan_enable+0x48>
		ll_rl_rpa_update(false);
   19eb8:	2000      	movs	r0, #0
   19eba:	f7ff fa65 	bl	19388 <ll_rl_rpa_update>
		rpa_gen = 1;
   19ebe:	2701      	movs	r7, #1
   19ec0:	e000      	b.n	19ec4 <ll_scan_enable+0x48>
	u8_t  rpa_gen = 0;
   19ec2:	2700      	movs	r7, #0
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   19ec4:	4d0c      	ldr	r5, [pc, #48]	; (19ef8 <ll_scan_enable+0x7c>)
   19ec6:	792c      	ldrb	r4, [r5, #4]
   19ec8:	f004 060f 	and.w	r6, r4, #15
   19ecc:	f3c4 1400 	ubfx	r4, r4, #4, #1
   19ed0:	2100      	movs	r1, #0
   19ed2:	4620      	mov	r0, r4
   19ed4:	f7fe fd70 	bl	189b8 <ll_addr_get>
   19ed8:	882b      	ldrh	r3, [r5, #0]
   19eda:	8869      	ldrh	r1, [r5, #2]
				   ll_scan.filter_policy, rpa_gen,
   19edc:	792a      	ldrb	r2, [r5, #4]
   19ede:	0992      	lsrs	r2, r2, #6
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   19ee0:	25ff      	movs	r5, #255	; 0xff
   19ee2:	9503      	str	r5, [sp, #12]
   19ee4:	9702      	str	r7, [sp, #8]
   19ee6:	9201      	str	r2, [sp, #4]
   19ee8:	9100      	str	r1, [sp, #0]
   19eea:	4602      	mov	r2, r0
   19eec:	4621      	mov	r1, r4
   19eee:	4630      	mov	r0, r6
   19ef0:	f7fe fa7a 	bl	183e8 <radio_scan_enable>
	return status;
   19ef4:	e7cc      	b.n	19e90 <ll_scan_enable+0x14>
   19ef6:	bf00      	nop
   19ef8:	200019cc 	.word	0x200019cc

00019efc <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   19efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19f00:	b085      	sub	sp, #20
   19f02:	4607      	mov	r7, r0
   19f04:	4688      	mov	r8, r1
   19f06:	4615      	mov	r5, r2
   19f08:	461e      	mov	r6, r3
   19f0a:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (radio_scan_is_enabled()) {
   19f0e:	f7fd fad1 	bl	174b4 <radio_scan_is_enabled>
   19f12:	b120      	cbz	r0, 19f1e <ll_create_connection+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19f14:	230c      	movs	r3, #12
#endif
	return radio_scan_enable(0, own_addr_type,
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   19f16:	4618      	mov	r0, r3
   19f18:	b005      	add	sp, #20
   19f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   19f1e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   19f22:	9300      	str	r3, [sp, #0]
   19f24:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   19f28:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   19f2c:	990c      	ldr	r1, [sp, #48]	; 0x30
   19f2e:	4630      	mov	r0, r6
   19f30:	f7fd fada 	bl	174e8 <radio_connect_enable>
	if (status) {
   19f34:	4603      	mov	r3, r0
   19f36:	2800      	cmp	r0, #0
   19f38:	d1ed      	bne.n	19f16 <ll_create_connection+0x1a>
	ll_filters_scan_update(filter_policy);
   19f3a:	4628      	mov	r0, r5
   19f3c:	f7fe ffaa 	bl	18e94 <ll_filters_scan_update>
	if (!filter_policy && ctrl_rl_enabled()) {
   19f40:	b1c5      	cbz	r5, 19f74 <ll_create_connection+0x78>
	u8_t  rl_idx = FILTER_IDX_NONE;
   19f42:	f04f 09ff 	mov.w	r9, #255	; 0xff
	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   19f46:	1ea3      	subs	r3, r4, #2
   19f48:	b2db      	uxtb	r3, r3
   19f4a:	2b01      	cmp	r3, #1
   19f4c:	d91f      	bls.n	19f8e <ll_create_connection+0x92>
	u8_t  rpa_gen = 0;
   19f4e:	2600      	movs	r6, #0
	return radio_scan_enable(0, own_addr_type,
   19f50:	2100      	movs	r1, #0
   19f52:	4620      	mov	r0, r4
   19f54:	f7fe fd30 	bl	189b8 <ll_addr_get>
   19f58:	f8cd 900c 	str.w	r9, [sp, #12]
   19f5c:	9602      	str	r6, [sp, #8]
   19f5e:	9501      	str	r5, [sp, #4]
   19f60:	f8cd 8000 	str.w	r8, [sp]
   19f64:	463b      	mov	r3, r7
   19f66:	4602      	mov	r2, r0
   19f68:	4621      	mov	r1, r4
   19f6a:	2000      	movs	r0, #0
   19f6c:	f7fe fa3c 	bl	183e8 <radio_scan_enable>
   19f70:	4603      	mov	r3, r0
   19f72:	e7d0      	b.n	19f16 <ll_create_connection+0x1a>
	if (!filter_policy && ctrl_rl_enabled()) {
   19f74:	f7ff f936 	bl	191e4 <ctrl_rl_enabled>
   19f78:	b910      	cbnz	r0, 19f80 <ll_create_connection+0x84>
	u8_t  rl_idx = FILTER_IDX_NONE;
   19f7a:	f04f 09ff 	mov.w	r9, #255	; 0xff
   19f7e:	e7e2      	b.n	19f46 <ll_create_connection+0x4a>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   19f80:	2200      	movs	r2, #0
   19f82:	990c      	ldr	r1, [sp, #48]	; 0x30
   19f84:	4630      	mov	r0, r6
   19f86:	f7fe ff9d 	bl	18ec4 <ll_rl_find>
   19f8a:	4681      	mov	r9, r0
   19f8c:	e7db      	b.n	19f46 <ll_create_connection+0x4a>
		ll_rl_rpa_update(false);
   19f8e:	2000      	movs	r0, #0
   19f90:	f7ff f9fa 	bl	19388 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   19f94:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   19f98:	2601      	movs	r6, #1
   19f9a:	e7d9      	b.n	19f50 <ll_create_connection+0x54>

00019f9c <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   19f9c:	4b01      	ldr	r3, [pc, #4]	; (19fa4 <pool_id+0x8>)
   19f9e:	1ac0      	subs	r0, r0, r3
}
   19fa0:	1140      	asrs	r0, r0, #5
   19fa2:	4770      	bx	lr
   19fa4:	2000cff4 	.word	0x2000cff4

00019fa8 <net_buf_pool_get>:
}
   19fa8:	4b01      	ldr	r3, [pc, #4]	; (19fb0 <net_buf_pool_get+0x8>)
   19faa:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   19fae:	4770      	bx	lr
   19fb0:	2000cff4 	.word	0x2000cff4

00019fb4 <net_buf_reset>:
void net_buf_reset(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf->flags == 0);
	NET_BUF_ASSERT(buf->frags == NULL);

	buf->len   = 0;
   19fb4:	2300      	movs	r3, #0
   19fb6:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
   19fb8:	f100 0310 	add.w	r3, r0, #16
   19fbc:	6083      	str	r3, [r0, #8]
   19fbe:	4770      	bx	lr

00019fc0 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
   19fc0:	b570      	push	{r4, r5, r6, lr}
   19fc2:	4605      	mov	r5, r0
	__asm__ volatile(
   19fc4:	f04f 0320 	mov.w	r3, #32
   19fc8:	f3ef 8611 	mrs	r6, BASEPRI
   19fcc:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   19fd0:	8a43      	ldrh	r3, [r0, #18]
   19fd2:	b373      	cbz	r3, 1a032 <net_buf_alloc+0x72>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   19fd4:	8a02      	ldrh	r2, [r0, #16]
   19fd6:	4293      	cmp	r3, r2
   19fd8:	d207      	bcs.n	19fea <net_buf_alloc+0x2a>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   19fda:	2100      	movs	r1, #0
   19fdc:	f00e f83a 	bl	28054 <k_queue_get>
			if (buf) {
   19fe0:	4604      	mov	r4, r0
   19fe2:	b110      	cbz	r0, 19fea <net_buf_alloc+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   19fe4:	f386 8811 	msr	BASEPRI, r6
   19fe8:	e019      	b.n	1a01e <net_buf_alloc+0x5e>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   19fea:	8a6b      	ldrh	r3, [r5, #18]
   19fec:	1e5a      	subs	r2, r3, #1
   19fee:	826a      	strh	r2, [r5, #18]
   19ff0:	f386 8811 	msr	BASEPRI, r6
	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
   19ff4:	69ea      	ldr	r2, [r5, #28]
   19ff6:	8a2c      	ldrh	r4, [r5, #16]
   19ff8:	1ae4      	subs	r4, r4, r3
   19ffa:	8aab      	ldrh	r3, [r5, #20]
   19ffc:	3303      	adds	r3, #3
   19ffe:	f023 0303 	bic.w	r3, r3, #3
   1a002:	8ae9      	ldrh	r1, [r5, #22]
   1a004:	3103      	adds	r1, #3
   1a006:	f021 0103 	bic.w	r1, r1, #3
   1a00a:	440b      	add	r3, r1
   1a00c:	3310      	adds	r3, #16
   1a00e:	fb03 2404 	mla	r4, r3, r4, r2
	buf->pool_id = pool_id(pool);
   1a012:	4628      	mov	r0, r5
   1a014:	f7ff ffc2 	bl	19f9c <pool_id>
   1a018:	71a0      	strb	r0, [r4, #6]
	buf->size = pool->buf_size;
   1a01a:	8aab      	ldrh	r3, [r5, #20]
   1a01c:	81e3      	strh	r3, [r4, #14]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
   1a01e:	2301      	movs	r3, #1
   1a020:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   1a022:	2300      	movs	r3, #0
   1a024:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   1a026:	6023      	str	r3, [r4, #0]
	net_buf_reset(buf);
   1a028:	4620      	mov	r0, r4
   1a02a:	f7ff ffc3 	bl	19fb4 <net_buf_reset>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   1a02e:	4620      	mov	r0, r4
   1a030:	bd70      	pop	{r4, r5, r6, pc}
   1a032:	f386 8811 	msr	BASEPRI, r6
	buf = k_lifo_get(&pool->free, timeout);
   1a036:	f00e f80d 	bl	28054 <k_queue_get>
	if (!buf) {
   1a03a:	4604      	mov	r4, r0
   1a03c:	2800      	cmp	r0, #0
   1a03e:	d1ee      	bne.n	1a01e <net_buf_alloc+0x5e>
   1a040:	e7f5      	b.n	1a02e <net_buf_alloc+0x6e>

0001a042 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   1a042:	b570      	push	{r4, r5, r6, lr}
   1a044:	4605      	mov	r5, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   1a046:	f00e f805 	bl	28054 <k_queue_get>
	if (!buf) {
   1a04a:	4606      	mov	r6, r0
   1a04c:	b188      	cbz	r0, 1a072 <net_buf_get+0x30>
   1a04e:	4604      	mov	r4, r0
   1a050:	e009      	b.n	1a066 <net_buf_get+0x24>

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1a052:	2100      	movs	r1, #0
   1a054:	4628      	mov	r0, r5
   1a056:	f00d fffd 	bl	28054 <k_queue_get>
   1a05a:	6020      	str	r0, [r4, #0]
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1a05c:	7963      	ldrb	r3, [r4, #5]
   1a05e:	f023 0301 	bic.w	r3, r3, #1
   1a062:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1a064:	4604      	mov	r4, r0
   1a066:	7963      	ldrb	r3, [r4, #5]
   1a068:	f013 0f01 	tst.w	r3, #1
   1a06c:	d1f1      	bne.n	1a052 <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1a06e:	2300      	movs	r3, #0
   1a070:	6023      	str	r3, [r4, #0]

	return buf;
}
   1a072:	4630      	mov	r0, r6
   1a074:	bd70      	pop	{r4, r5, r6, pc}

0001a076 <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1a076:	f100 0310 	add.w	r3, r0, #16
   1a07a:	4419      	add	r1, r3
   1a07c:	6081      	str	r1, [r0, #8]
   1a07e:	4770      	bx	lr

0001a080 <net_buf_put>:
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1a080:	b510      	push	{r4, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1a082:	460a      	mov	r2, r1
   1a084:	e004      	b.n	1a090 <net_buf_put+0x10>
		tail->flags |= NET_BUF_FRAGS;
   1a086:	7953      	ldrb	r3, [r2, #5]
   1a088:	f043 0301 	orr.w	r3, r3, #1
   1a08c:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1a08e:	4622      	mov	r2, r4
   1a090:	6814      	ldr	r4, [r2, #0]
   1a092:	2c00      	cmp	r4, #0
   1a094:	d1f7      	bne.n	1a086 <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
   1a096:	f00d ffc1 	bl	2801c <k_queue_append_list>
   1a09a:	bd10      	pop	{r4, pc}

0001a09c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1a09c:	b538      	push	{r3, r4, r5, lr}
   1a09e:	4604      	mov	r4, r0
	NET_BUF_ASSERT(buf);

	while (buf) {
   1a0a0:	e006      	b.n	1a0b0 <net_buf_unref+0x14>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a0a2:	79a0      	ldrb	r0, [r4, #6]
   1a0a4:	f7ff ff80 	bl	19fa8 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1a0a8:	4621      	mov	r1, r4
   1a0aa:	f00d ffb1 	bl	28010 <k_queue_prepend>
{
   1a0ae:	462c      	mov	r4, r5
	while (buf) {
   1a0b0:	b17c      	cbz	r4, 1a0d2 <net_buf_unref+0x36>
		struct net_buf *frags = buf->frags;
   1a0b2:	6825      	ldr	r5, [r4, #0]
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   1a0b4:	7923      	ldrb	r3, [r4, #4]
   1a0b6:	3b01      	subs	r3, #1
   1a0b8:	b2db      	uxtb	r3, r3
   1a0ba:	7123      	strb	r3, [r4, #4]
   1a0bc:	b94b      	cbnz	r3, 1a0d2 <net_buf_unref+0x36>
			return;
		}

		buf->frags = NULL;
   1a0be:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1a0c0:	79a0      	ldrb	r0, [r4, #6]
   1a0c2:	f7ff ff71 	bl	19fa8 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   1a0c6:	6983      	ldr	r3, [r0, #24]
   1a0c8:	2b00      	cmp	r3, #0
   1a0ca:	d0ea      	beq.n	1a0a2 <net_buf_unref+0x6>
			pool->destroy(buf);
   1a0cc:	4620      	mov	r0, r4
   1a0ce:	4798      	blx	r3
   1a0d0:	e7ed      	b.n	1a0ae <net_buf_unref+0x12>
   1a0d2:	bd38      	pop	{r3, r4, r5, pc}

0001a0d4 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1a0d4:	7903      	ldrb	r3, [r0, #4]
   1a0d6:	3301      	adds	r3, #1
   1a0d8:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1a0da:	4770      	bx	lr

0001a0dc <net_buf_frag_last>:

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
   1a0dc:	e000      	b.n	1a0e0 <net_buf_frag_last+0x4>
		buf = buf->frags;
   1a0de:	4618      	mov	r0, r3
	while (buf->frags) {
   1a0e0:	6803      	ldr	r3, [r0, #0]
   1a0e2:	2b00      	cmp	r3, #0
   1a0e4:	d1fb      	bne.n	1a0de <net_buf_frag_last+0x2>
	}

	return buf;
}
   1a0e6:	4770      	bx	lr

0001a0e8 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1a0e8:	b570      	push	{r4, r5, r6, lr}
   1a0ea:	4604      	mov	r4, r0
   1a0ec:	460d      	mov	r5, r1
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
   1a0ee:	6806      	ldr	r6, [r0, #0]
   1a0f0:	b11e      	cbz	r6, 1a0fa <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   1a0f2:	4608      	mov	r0, r1
   1a0f4:	f7ff fff2 	bl	1a0dc <net_buf_frag_last>
   1a0f8:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1a0fa:	6025      	str	r5, [r4, #0]
   1a0fc:	bd70      	pop	{r4, r5, r6, pc}

0001a0fe <net_buf_frag_add>:
}

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1a0fe:	b538      	push	{r3, r4, r5, lr}
   1a100:	460d      	mov	r5, r1
	NET_BUF_ASSERT(frag);

	if (!head) {
   1a102:	b138      	cbz	r0, 1a114 <net_buf_frag_add+0x16>
   1a104:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1a106:	f7ff ffe9 	bl	1a0dc <net_buf_frag_last>
   1a10a:	4629      	mov	r1, r5
   1a10c:	f7ff ffec 	bl	1a0e8 <net_buf_frag_insert>

	return head;
   1a110:	4620      	mov	r0, r4
}
   1a112:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   1a114:	4608      	mov	r0, r1
   1a116:	f7ff ffdd 	bl	1a0d4 <net_buf_ref>
   1a11a:	bd38      	pop	{r3, r4, r5, pc}

0001a11c <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1a11c:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	NET_BUF_ASSERT(frag);

	if (parent) {
   1a11e:	b108      	cbz	r0, 1a124 <net_buf_frag_del+0x8>
		NET_BUF_ASSERT(parent->frags);
		NET_BUF_ASSERT(parent->frags == frag);
		parent->frags = frag->frags;
   1a120:	680a      	ldr	r2, [r1, #0]
   1a122:	6002      	str	r2, [r0, #0]
	}

	next_frag = frag->frags;
   1a124:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1a126:	2300      	movs	r3, #0
   1a128:	600b      	str	r3, [r1, #0]

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1a12a:	4608      	mov	r0, r1
   1a12c:	f7ff ffb6 	bl	1a09c <net_buf_unref>
#endif

	return next_frag;
}
   1a130:	4620      	mov	r0, r4
   1a132:	bd10      	pop	{r4, pc}

0001a134 <net_buf_simple_add>:
	return buf->data + buf->len;
   1a134:	6802      	ldr	r2, [r0, #0]
   1a136:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1a138:	4419      	add	r1, r3
   1a13a:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1a13c:	18d0      	adds	r0, r2, r3
   1a13e:	4770      	bx	lr

0001a140 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1a140:	b538      	push	{r3, r4, r5, lr}
   1a142:	460d      	mov	r5, r1
   1a144:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1a146:	4611      	mov	r1, r2
   1a148:	f7ff fff4 	bl	1a134 <net_buf_simple_add>
   1a14c:	4622      	mov	r2, r4
   1a14e:	4629      	mov	r1, r5
   1a150:	f7e6 f8b6 	bl	2c0 <memcpy>
}
   1a154:	bd38      	pop	{r3, r4, r5, pc}

0001a156 <net_buf_simple_add_u8>:

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1a156:	b510      	push	{r4, lr}
   1a158:	460c      	mov	r4, r1
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   1a15a:	2101      	movs	r1, #1
   1a15c:	f7ff ffea 	bl	1a134 <net_buf_simple_add>
	*u8 = val;
   1a160:	7004      	strb	r4, [r0, #0]

	return u8;
}
   1a162:	bd10      	pop	{r4, pc}

0001a164 <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   1a164:	b510      	push	{r4, lr}
   1a166:	b082      	sub	sp, #8
   1a168:	ac02      	add	r4, sp, #8
   1a16a:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1a16e:	2102      	movs	r1, #2
   1a170:	f7ff ffe0 	bl	1a134 <net_buf_simple_add>
   1a174:	2202      	movs	r2, #2
   1a176:	4621      	mov	r1, r4
   1a178:	f7e6 f8a2 	bl	2c0 <memcpy>
}
   1a17c:	b002      	add	sp, #8
   1a17e:	bd10      	pop	{r4, pc}

0001a180 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   1a180:	b510      	push	{r4, lr}
   1a182:	b082      	sub	sp, #8
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   1a184:	0a0b      	lsrs	r3, r1, #8
   1a186:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1a18a:	ac02      	add	r4, sp, #8
   1a18c:	f824 1d02 	strh.w	r1, [r4, #-2]!
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1a190:	2102      	movs	r1, #2
   1a192:	f7ff ffcf 	bl	1a134 <net_buf_simple_add>
   1a196:	2202      	movs	r2, #2
   1a198:	4621      	mov	r1, r4
   1a19a:	f7e6 f891 	bl	2c0 <memcpy>
}
   1a19e:	b002      	add	sp, #8
   1a1a0:	bd10      	pop	{r4, pc}

0001a1a2 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1a1a2:	6803      	ldr	r3, [r0, #0]
   1a1a4:	1a5b      	subs	r3, r3, r1
   1a1a6:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1a1a8:	8882      	ldrh	r2, [r0, #4]
   1a1aa:	4411      	add	r1, r2
   1a1ac:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   1a1ae:	4618      	mov	r0, r3
   1a1b0:	4770      	bx	lr

0001a1b2 <net_buf_simple_push_le16>:

void net_buf_simple_push_le16(struct net_buf_simple *buf, u16_t val)
{
   1a1b2:	b510      	push	{r4, lr}
   1a1b4:	b082      	sub	sp, #8
   1a1b6:	ac02      	add	r4, sp, #8
   1a1b8:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   1a1bc:	2102      	movs	r1, #2
   1a1be:	f7ff fff0 	bl	1a1a2 <net_buf_simple_push>
   1a1c2:	2202      	movs	r2, #2
   1a1c4:	4621      	mov	r1, r4
   1a1c6:	f7e6 f87b 	bl	2c0 <memcpy>
}
   1a1ca:	b002      	add	sp, #8
   1a1cc:	bd10      	pop	{r4, pc}

0001a1ce <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1a1ce:	8883      	ldrh	r3, [r0, #4]
   1a1d0:	1a5b      	subs	r3, r3, r1
   1a1d2:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1a1d4:	6803      	ldr	r3, [r0, #0]
   1a1d6:	4419      	add	r1, r3
   1a1d8:	6001      	str	r1, [r0, #0]
}
   1a1da:	4608      	mov	r0, r1
   1a1dc:	4770      	bx	lr

0001a1de <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1a1de:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
   1a1e0:	6803      	ldr	r3, [r0, #0]
   1a1e2:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1a1e4:	2101      	movs	r1, #1
   1a1e6:	f7ff fff2 	bl	1a1ce <net_buf_simple_pull>

	return val;
}
   1a1ea:	4620      	mov	r0, r4
   1a1ec:	bd10      	pop	{r4, pc}

0001a1ee <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1a1ee:	b510      	push	{r4, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1a1f0:	6803      	ldr	r3, [r0, #0]
   1a1f2:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1a1f4:	2102      	movs	r1, #2
   1a1f6:	f7ff ffea 	bl	1a1ce <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1a1fa:	4620      	mov	r0, r4
   1a1fc:	bd10      	pop	{r4, pc}

0001a1fe <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1a1fe:	f850 3b08 	ldr.w	r3, [r0], #8
}
   1a202:	1a18      	subs	r0, r3, r0
   1a204:	4770      	bx	lr

0001a206 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   1a206:	b538      	push	{r3, r4, r5, lr}
   1a208:	4605      	mov	r5, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1a20a:	88c4      	ldrh	r4, [r0, #6]
   1a20c:	f7ff fff7 	bl	1a1fe <net_buf_simple_headroom>
   1a210:	1a20      	subs	r0, r4, r0
   1a212:	88ab      	ldrh	r3, [r5, #4]
}
   1a214:	1ac0      	subs	r0, r0, r3
   1a216:	bd38      	pop	{r3, r4, r5, pc}

0001a218 <processing_data>:

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   1a218:	b510      	push	{r4, lr}
   1a21a:	4604      	mov	r4, r0
	if (!pkt->frags) {
   1a21c:	6883      	ldr	r3, [r0, #8]
   1a21e:	b18b      	cbz	r3, 1a244 <processing_data+0x2c>
	if (!is_loopback && !locally_routed) {
   1a220:	b1b1      	cbz	r1, 1a250 <processing_data+0x38>
	return net_buf_frags_len(pkt->frags);
}

static inline u8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
   1a222:	68a3      	ldr	r3, [r4, #8]
   1a224:	689b      	ldr	r3, [r3, #8]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   1a226:	781b      	ldrb	r3, [r3, #0]
   1a228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1a22c:	2b60      	cmp	r3, #96	; 0x60
   1a22e:	d01d      	beq.n	1a26c <processing_data+0x54>
	net_stats.processing_error++;
}

static inline void net_stats_update_ip_errors_protoerr(void)
{
	net_stats.ip_errors.protoerr++;
   1a230:	4b18      	ldr	r3, [pc, #96]	; (1a294 <processing_data+0x7c>)
   1a232:	6a1a      	ldr	r2, [r3, #32]
   1a234:	3201      	adds	r2, #1
   1a236:	621a      	str	r2, [r3, #32]
}

static inline void net_stats_update_ip_errors_vhlerr(void)
{
	net_stats.ip_errors.vhlerr++;
   1a238:	68da      	ldr	r2, [r3, #12]
   1a23a:	3201      	adds	r2, #1
   1a23c:	60da      	str	r2, [r3, #12]
	return NET_DROP;
   1a23e:	2002      	movs	r0, #2
	switch (process_data(pkt, is_loopback)) {
   1a240:	bb18      	cbnz	r0, 1a28a <processing_data+0x72>
   1a242:	bd10      	pop	{r4, pc}
	net_stats.processing_error++;
   1a244:	4a13      	ldr	r2, [pc, #76]	; (1a294 <processing_data+0x7c>)
   1a246:	6813      	ldr	r3, [r2, #0]
   1a248:	3301      	adds	r3, #1
   1a24a:	6013      	str	r3, [r2, #0]
		return NET_DROP;
   1a24c:	2002      	movs	r0, #2
   1a24e:	e7f7      	b.n	1a240 <processing_data+0x28>
	return pkt->iface;
   1a250:	6940      	ldr	r0, [r0, #20]
 * @return verdict about the packet
 */
static inline enum net_verdict net_if_recv_data(struct net_if *iface,
						struct net_pkt *pkt)
{
	return iface->l2->recv(iface, pkt);
   1a252:	6843      	ldr	r3, [r0, #4]
   1a254:	681b      	ldr	r3, [r3, #0]
   1a256:	4621      	mov	r1, r4
   1a258:	4798      	blx	r3
		if (ret != NET_CONTINUE) {
   1a25a:	2801      	cmp	r0, #1
   1a25c:	d0e1      	beq.n	1a222 <processing_data+0xa>
			if (ret == NET_DROP) {
   1a25e:	2802      	cmp	r0, #2
   1a260:	d1ee      	bne.n	1a240 <processing_data+0x28>
   1a262:	4a0c      	ldr	r2, [pc, #48]	; (1a294 <processing_data+0x7c>)
   1a264:	6813      	ldr	r3, [r2, #0]
   1a266:	3301      	adds	r3, #1
   1a268:	6013      	str	r3, [r2, #0]
   1a26a:	e7e9      	b.n	1a240 <processing_data+0x28>
	net_stats.ipv6.sent++;
}

static inline void net_stats_update_ipv6_recv(void)
{
	net_stats.ipv6.recv++;
   1a26c:	4a09      	ldr	r2, [pc, #36]	; (1a294 <processing_data+0x7c>)
   1a26e:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1a270:	3301      	adds	r3, #1
   1a272:	6253      	str	r3, [r2, #36]	; 0x24
	pkt->family = family;
   1a274:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1a278:	220a      	movs	r2, #10
   1a27a:	f362 03c6 	bfi	r3, r2, #3, #4
   1a27e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		return net_ipv6_process_pkt(pkt);
   1a282:	4620      	mov	r0, r4
   1a284:	f006 fd1e 	bl	20cc4 <net_ipv6_process_pkt>
   1a288:	e7da      	b.n	1a240 <processing_data+0x28>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   1a28a:	4620      	mov	r0, r4
   1a28c:	f002 fc75 	bl	1cb7a <net_pkt_unref>
		break;
	}
}
   1a290:	e7d7      	b.n	1a242 <processing_data+0x2a>
   1a292:	bf00      	nop
   1a294:	20002950 	.word	0x20002950

0001a298 <net_rx_thread>:

static void net_rx_thread(void)
{
   1a298:	b510      	push	{r4, lr}
	 * can only be started when RX side is ready to receive packets.
	 * We synchronize the startup of the device so that both RX and TX
	 * are only started fully when both are ready to receive or send
	 * data.
	 */
	net_if_init(&startup_sync);
   1a29a:	4c16      	ldr	r4, [pc, #88]	; (1a2f4 <net_rx_thread+0x5c>)
   1a29c:	4620      	mov	r0, r4
   1a29e:	f001 faaf 	bl	1b800 <net_if_init>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1a2a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a2a6:	4620      	mov	r0, r4
   1a2a8:	f00e fa56 	bl	28758 <_impl_k_sem_take>

	k_sem_take(&startup_sync, K_FOREVER);

	/* This will take the interface up and start everything. */
	net_if_post_init();
   1a2ac:	f001 faee 	bl	1b88c <net_if_post_init>
   1a2b0:	e010      	b.n	1a2d4 <net_rx_thread+0x3c>
	return net_buf_frags_len(pkt->frags);
   1a2b2:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1a2b4:	2200      	movs	r2, #0
   1a2b6:	e002      	b.n	1a2be <net_rx_thread+0x26>
		bytes += buf->len;
   1a2b8:	8999      	ldrh	r1, [r3, #12]
   1a2ba:	440a      	add	r2, r1
		buf = buf->frags;
   1a2bc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1a2be:	2b00      	cmp	r3, #0
   1a2c0:	d1fa      	bne.n	1a2b8 <net_rx_thread+0x20>
	net_stats.bytes.received += bytes;
   1a2c2:	490d      	ldr	r1, [pc, #52]	; (1a2f8 <net_rx_thread+0x60>)
   1a2c4:	688b      	ldr	r3, [r1, #8]
   1a2c6:	441a      	add	r2, r3
   1a2c8:	608a      	str	r2, [r1, #8]
#endif
		NET_DBG("Received pkt %p len %zu", pkt, pkt_len);

		net_stats_update_bytes_recv(pkt_len);

		processing_data(pkt, false);
   1a2ca:	2100      	movs	r1, #0
   1a2cc:	f7ff ffa4 	bl	1a218 <processing_data>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1a2d0:	f00e f8d6 	bl	28480 <_impl_k_yield>
		pkt = k_fifo_get(&rx_queue, K_FOREVER);
   1a2d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a2d8:	4808      	ldr	r0, [pc, #32]	; (1a2fc <net_rx_thread+0x64>)
   1a2da:	f00d febb 	bl	28054 <k_queue_get>
	for (i = 0; i < size; i++) {
   1a2de:	2300      	movs	r3, #0
   1a2e0:	f240 52db 	movw	r2, #1499	; 0x5db
   1a2e4:	4293      	cmp	r3, r2
   1a2e6:	d8e4      	bhi.n	1a2b2 <net_rx_thread+0x1a>
		if ((unsigned char)stack[i] == 0xaa) {
   1a2e8:	4a05      	ldr	r2, [pc, #20]	; (1a300 <net_rx_thread+0x68>)
   1a2ea:	5cd2      	ldrb	r2, [r2, r3]
   1a2ec:	2aaa      	cmp	r2, #170	; 0xaa
   1a2ee:	d1e0      	bne.n	1a2b2 <net_rx_thread+0x1a>
	for (i = 0; i < size; i++) {
   1a2f0:	3301      	adds	r3, #1
   1a2f2:	e7f5      	b.n	1a2e0 <net_rx_thread+0x48>
   1a2f4:	2000cf8c 	.word	0x2000cf8c
   1a2f8:	20002950 	.word	0x20002950
   1a2fc:	200019d4 	.word	0x200019d4
   1a300:	20004658 	.word	0x20004658

0001a304 <init_rx_queue>:
		k_yield();
	}
}

static void init_rx_queue(void)
{
   1a304:	b500      	push	{lr}
   1a306:	b087      	sub	sp, #28
	k_fifo_init(&rx_queue);
   1a308:	480b      	ldr	r0, [pc, #44]	; (1a338 <init_rx_queue+0x34>)
   1a30a:	f00d fe48 	bl	27f9e <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1a30e:	2300      	movs	r3, #0
   1a310:	9305      	str	r3, [sp, #20]
   1a312:	2201      	movs	r2, #1
   1a314:	9204      	str	r2, [sp, #16]
   1a316:	f06f 0207 	mvn.w	r2, #7
   1a31a:	9203      	str	r2, [sp, #12]
   1a31c:	9302      	str	r3, [sp, #8]
   1a31e:	9301      	str	r3, [sp, #4]
   1a320:	9300      	str	r3, [sp, #0]
   1a322:	4b06      	ldr	r3, [pc, #24]	; (1a33c <init_rx_queue+0x38>)
   1a324:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1a328:	4905      	ldr	r1, [pc, #20]	; (1a340 <init_rx_queue+0x3c>)
   1a32a:	4806      	ldr	r0, [pc, #24]	; (1a344 <init_rx_queue+0x40>)
   1a32c:	f00e fc80 	bl	28c30 <_impl_k_thread_create>
	rx_tid = k_thread_create(&rx_thread_data, rx_stack,
				 K_THREAD_STACK_SIZEOF(rx_stack),
				 (k_thread_entry_t)net_rx_thread,
				 NULL, NULL, NULL, K_PRIO_COOP(8),
				 K_ESSENTIAL, K_NO_WAIT);
}
   1a330:	b007      	add	sp, #28
   1a332:	f85d fb04 	ldr.w	pc, [sp], #4
   1a336:	bf00      	nop
   1a338:	200019d4 	.word	0x200019d4
   1a33c:	0001a299 	.word	0x0001a299
   1a340:	20004658 	.word	0x20004658
   1a344:	200019e4 	.word	0x200019e4

0001a348 <net_init>:

	NET_DBG("Network L2 init done");
}

static int net_init(struct device *unused)
{
   1a348:	b508      	push	{r3, lr}

	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   1a34a:	f002 ffb2 	bl	1d2b2 <net_pkt_init>

	net_context_init();
   1a34e:	f002 faf1 	bl	1c934 <net_context_init>
	net_icmpv6_init();
   1a352:	f004 fa0b 	bl	1e76c <net_icmpv6_init>
	net_ipv6_init();
   1a356:	f006 fe89 	bl	2106c <net_ipv6_init>
	net_conn_init();
   1a35a:	f00a fb55 	bl	24a08 <net_conn_init>
	net_udp_init();
   1a35e:	f008 fa6b 	bl	22838 <net_udp_init>
	net_tcp_init();
   1a362:	f008 fc4f 	bl	22c04 <net_tcp_init>
	net_route_init();
   1a366:	f007 ffca 	bl	222fe <net_route_init>

	l2_init();
	l3_init();

	net_mgmt_event_init();
   1a36a:	f008 f8b3 	bl	224d4 <net_mgmt_event_init>

	init_rx_queue();
   1a36e:	f7ff ffc9 	bl	1a304 <init_rx_queue>
		return status;
	}
#endif

	return status;
}
   1a372:	2000      	movs	r0, #0
   1a374:	bd08      	pop	{r3, pc}
	...

0001a378 <net_send_data>:
	if (!pkt || !pkt->frags) {
   1a378:	2800      	cmp	r0, #0
   1a37a:	f000 80bc 	beq.w	1a4f6 <net_send_data+0x17e>
{
   1a37e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a380:	b091      	sub	sp, #68	; 0x44
   1a382:	4604      	mov	r4, r0
	if (!pkt || !pkt->frags) {
   1a384:	6883      	ldr	r3, [r0, #8]
   1a386:	2b00      	cmp	r3, #0
   1a388:	f000 80b8 	beq.w	1a4fc <net_send_data+0x184>
	return pkt->iface;
   1a38c:	6943      	ldr	r3, [r0, #20]
	if (!net_pkt_iface(pkt)) {
   1a38e:	2b00      	cmp	r3, #0
   1a390:	f000 80b7 	beq.w	1a502 <net_send_data+0x18a>
	return pkt->family;
   1a394:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1a398:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1a39c:	2b0a      	cmp	r3, #10
   1a39e:	d103      	bne.n	1a3a8 <net_send_data+0x30>
	net_stats.ipv6.sent++;
   1a3a0:	4a59      	ldr	r2, [pc, #356]	; (1a508 <net_send_data+0x190>)
   1a3a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1a3a4:	3301      	adds	r3, #1
   1a3a6:	6293      	str	r3, [r2, #40]	; 0x28
   1a3a8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1a3ac:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1a3b0:	2b0a      	cmp	r3, #10
   1a3b2:	d00b      	beq.n	1a3cc <net_send_data+0x54>
	return 0;
   1a3b4:	2000      	movs	r0, #0
	if (status < 0) {
   1a3b6:	2800      	cmp	r0, #0
   1a3b8:	db06      	blt.n	1a3c8 <net_send_data+0x50>
	} else if (status > 0) {
   1a3ba:	f340 8091 	ble.w	1a4e0 <net_send_data+0x168>
		processing_data(pkt, true);
   1a3be:	2101      	movs	r1, #1
   1a3c0:	4620      	mov	r0, r4
   1a3c2:	f7ff ff29 	bl	1a218 <processing_data>
		return 0;
   1a3c6:	2000      	movs	r0, #0
}
   1a3c8:	b011      	add	sp, #68	; 0x44
   1a3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return pkt->frags->data;
   1a3cc:	68a3      	ldr	r3, [r4, #8]
   1a3ce:	689d      	ldr	r5, [r3, #8]
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   1a3d0:	3518      	adds	r5, #24
   1a3d2:	f004 fd93 	bl	1eefc <net_ipv6_unspecified_address>
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv6_addr_cmp(const struct in6_addr *addr1,
				     const struct in6_addr *addr2)
{
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1a3d6:	2210      	movs	r2, #16
   1a3d8:	4601      	mov	r1, r0
   1a3da:	4628      	mov	r0, r5
   1a3dc:	f00f f8e8 	bl	295b0 <memcmp>
   1a3e0:	2800      	cmp	r0, #0
   1a3e2:	d07a      	beq.n	1a4da <net_send_data+0x162>
   1a3e4:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1a3e6:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a3e8:	f850 3f18 	ldr.w	r3, [r0, #24]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a3ec:	b9ab      	cbnz	r3, 1a41a <net_send_data+0xa2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a3ee:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a3f0:	2b00      	cmp	r3, #0
   1a3f2:	d141      	bne.n	1a478 <net_send_data+0x100>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a3f4:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a3f6:	2b00      	cmp	r3, #0
   1a3f8:	d140      	bne.n	1a47c <net_send_data+0x104>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1a3fa:	68c2      	ldr	r2, [r0, #12]
   1a3fc:	0a13      	lsrs	r3, r2, #8
   1a3fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1a402:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1a406:	0211      	lsls	r1, r2, #8
   1a408:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1a40c:	430b      	orrs	r3, r1
   1a40e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a412:	2b01      	cmp	r3, #1
   1a414:	d034      	beq.n	1a480 <net_send_data+0x108>
   1a416:	2300      	movs	r3, #0
   1a418:	e000      	b.n	1a41c <net_send_data+0xa4>
   1a41a:	2300      	movs	r3, #0
   1a41c:	b393      	cbz	r3, 1a484 <net_send_data+0x10c>
   1a41e:	68a3      	ldr	r3, [r4, #8]
   1a420:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   1a424:	ae0c      	add	r6, sp, #48	; 0x30
   1a426:	4675      	mov	r5, lr
   1a428:	f855 0f08 	ldr.w	r0, [r5, #8]!
   1a42c:	6869      	ldr	r1, [r5, #4]
   1a42e:	68aa      	ldr	r2, [r5, #8]
   1a430:	68eb      	ldr	r3, [r5, #12]
   1a432:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1a434:	ab10      	add	r3, sp, #64	; 0x40
   1a436:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1a43a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1a43e:	af08      	add	r7, sp, #32
   1a440:	4673      	mov	r3, lr
   1a442:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1a446:	6859      	ldr	r1, [r3, #4]
   1a448:	689a      	ldr	r2, [r3, #8]
   1a44a:	68db      	ldr	r3, [r3, #12]
   1a44c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1a44e:	af08      	add	r7, sp, #32
   1a450:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1a452:	f8ce 0008 	str.w	r0, [lr, #8]
   1a456:	6069      	str	r1, [r5, #4]
   1a458:	60aa      	str	r2, [r5, #8]
   1a45a:	60eb      	str	r3, [r5, #12]
   1a45c:	68a3      	ldr	r3, [r4, #8]
   1a45e:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1a460:	ad04      	add	r5, sp, #16
   1a462:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   1a466:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1a46a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a46c:	61b8      	str	r0, [r7, #24]
   1a46e:	61f9      	str	r1, [r7, #28]
   1a470:	623a      	str	r2, [r7, #32]
   1a472:	627b      	str	r3, [r7, #36]	; 0x24
			return 1;
   1a474:	2001      	movs	r0, #1
   1a476:	e79e      	b.n	1a3b6 <net_send_data+0x3e>
   1a478:	2300      	movs	r3, #0
   1a47a:	e7cf      	b.n	1a41c <net_send_data+0xa4>
   1a47c:	2300      	movs	r3, #0
   1a47e:	e7cd      	b.n	1a41c <net_send_data+0xa4>
   1a480:	2301      	movs	r3, #1
   1a482:	e7cb      	b.n	1a41c <net_send_data+0xa4>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1a484:	2100      	movs	r1, #0
   1a486:	f000 f9c5 	bl	1a814 <net_if_ipv6_addr_lookup>
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1a48a:	2800      	cmp	r0, #0
   1a48c:	d1c7      	bne.n	1a41e <net_send_data+0xa6>
   1a48e:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   1a490:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a492:	f853 2f08 	ldr.w	r2, [r3, #8]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a496:	b99a      	cbnz	r2, 1a4c0 <net_send_data+0x148>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a498:	685a      	ldr	r2, [r3, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a49a:	b9aa      	cbnz	r2, 1a4c8 <net_send_data+0x150>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a49c:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a49e:	b9aa      	cbnz	r2, 1a4cc <net_send_data+0x154>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1a4a0:	68da      	ldr	r2, [r3, #12]
   1a4a2:	0a13      	lsrs	r3, r2, #8
   1a4a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1a4a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1a4ac:	0211      	lsls	r1, r2, #8
   1a4ae:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1a4b2:	430b      	orrs	r3, r1
   1a4b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a4b8:	2b01      	cmp	r3, #1
   1a4ba:	d009      	beq.n	1a4d0 <net_send_data+0x158>
   1a4bc:	2300      	movs	r3, #0
   1a4be:	e000      	b.n	1a4c2 <net_send_data+0x14a>
   1a4c0:	2300      	movs	r3, #0
   1a4c2:	b93b      	cbnz	r3, 1a4d4 <net_send_data+0x15c>
	return 0;
   1a4c4:	2000      	movs	r0, #0
   1a4c6:	e776      	b.n	1a3b6 <net_send_data+0x3e>
   1a4c8:	2300      	movs	r3, #0
   1a4ca:	e7fa      	b.n	1a4c2 <net_send_data+0x14a>
   1a4cc:	2300      	movs	r3, #0
   1a4ce:	e7f8      	b.n	1a4c2 <net_send_data+0x14a>
   1a4d0:	2301      	movs	r3, #1
   1a4d2:	e7f6      	b.n	1a4c2 <net_send_data+0x14a>
			return -EADDRNOTAVAIL;
   1a4d4:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1a4d8:	e76d      	b.n	1a3b6 <net_send_data+0x3e>
			return -EADDRNOTAVAIL;
   1a4da:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1a4de:	e76a      	b.n	1a3b6 <net_send_data+0x3e>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   1a4e0:	4621      	mov	r1, r4
   1a4e2:	6960      	ldr	r0, [r4, #20]
   1a4e4:	f000 ffe0 	bl	1b4a8 <net_if_send_data>
   1a4e8:	2802      	cmp	r0, #2
   1a4ea:	d001      	beq.n	1a4f0 <net_send_data+0x178>
	return 0;
   1a4ec:	2000      	movs	r0, #0
   1a4ee:	e76b      	b.n	1a3c8 <net_send_data+0x50>
		return -EIO;
   1a4f0:	f06f 0004 	mvn.w	r0, #4
   1a4f4:	e768      	b.n	1a3c8 <net_send_data+0x50>
		return -ENODATA;
   1a4f6:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1a4fa:	4770      	bx	lr
   1a4fc:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1a500:	e762      	b.n	1a3c8 <net_send_data+0x50>
		return -EINVAL;
   1a502:	f06f 0015 	mvn.w	r0, #21
   1a506:	e75f      	b.n	1a3c8 <net_send_data+0x50>
   1a508:	20002950 	.word	0x20002950

0001a50c <net_recv_data>:
{
   1a50c:	b508      	push	{r3, lr}
	if (!pkt->frags) {
   1a50e:	688b      	ldr	r3, [r1, #8]
   1a510:	b19b      	cbz	r3, 1a53a <net_recv_data+0x2e>
   1a512:	f3bf 8f5b 	dmb	ish
   1a516:	68c3      	ldr	r3, [r0, #12]
   1a518:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1a51c:	f013 0f01 	tst.w	r3, #1
   1a520:	d00e      	beq.n	1a540 <net_recv_data+0x34>
	pkt->iface = iface;
   1a522:	6148      	str	r0, [r1, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1a524:	7d43      	ldrb	r3, [r0, #21]
   1a526:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1a52a:	7d43      	ldrb	r3, [r0, #21]
   1a52c:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
	k_fifo_put(&rx_queue, pkt);
   1a530:	4805      	ldr	r0, [pc, #20]	; (1a548 <net_recv_data+0x3c>)
   1a532:	f00d fd67 	bl	28004 <k_queue_append>
	return 0;
   1a536:	2000      	movs	r0, #0
   1a538:	bd08      	pop	{r3, pc}
		return -ENODATA;
   1a53a:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1a53e:	bd08      	pop	{r3, pc}
		return -ENETDOWN;
   1a540:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1a544:	bd08      	pop	{r3, pc}
   1a546:	bf00      	nop
   1a548:	200019d4 	.word	0x200019d4

0001a54c <ipv6_addr_expired>:
						  lifetime);

	NET_DBG("IPv6 address %s is deprecated",
		net_sprint_ipv6_addr(&ifaddr->address.in6_addr));

	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   1a54c:	2302      	movs	r3, #2
   1a54e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
   1a552:	4770      	bx	lr

0001a554 <prefix_lf_timeout>:
		CONTAINER_OF(work, struct net_if_ipv6_prefix, lifetime);

	NET_DBG("Prefix %s/%d expired",
		net_sprint_ipv6_addr(&prefix->prefix), prefix->len);

	prefix->is_used = false;
   1a554:	2300      	movs	r3, #0
   1a556:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   1a55a:	4770      	bx	lr

0001a55c <ipv6_router_expired>:
						    lifetime);

	NET_DBG("IPv6 router %s is expired",
		net_sprint_ipv6_addr(&router->address.in6_addr));

	router->is_used = false;
   1a55c:	2300      	movs	r3, #0
   1a55e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1a562:	4770      	bx	lr

0001a564 <ipv6_addr_find>:
{
   1a564:	b570      	push	{r4, r5, r6, lr}
   1a566:	4605      	mov	r5, r0
   1a568:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a56a:	2400      	movs	r4, #0
   1a56c:	e000      	b.n	1a570 <ipv6_addr_find+0xc>
   1a56e:	3401      	adds	r4, #1
   1a570:	2c02      	cmp	r4, #2
   1a572:	dc19      	bgt.n	1a5a8 <ipv6_addr_find+0x44>
		if (!iface->ipv6.unicast[i].is_used) {
   1a574:	236c      	movs	r3, #108	; 0x6c
   1a576:	fb03 5304 	mla	r3, r3, r4, r5
   1a57a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1a57e:	2b00      	cmp	r3, #0
   1a580:	d0f5      	beq.n	1a56e <ipv6_addr_find+0xa>
				&iface->ipv6.unicast[i].address.in6_addr)) {
   1a582:	216c      	movs	r1, #108	; 0x6c
   1a584:	fb01 f104 	mul.w	r1, r1, r4
   1a588:	3120      	adds	r1, #32
   1a58a:	4429      	add	r1, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1a58c:	2210      	movs	r2, #16
   1a58e:	4411      	add	r1, r2
   1a590:	4630      	mov	r0, r6
   1a592:	f00f f80d 	bl	295b0 <memcmp>
		if (net_ipv6_addr_cmp(addr,
   1a596:	2800      	cmp	r0, #0
   1a598:	d1e9      	bne.n	1a56e <ipv6_addr_find+0xa>
			return &iface->ipv6.unicast[i];
   1a59a:	206c      	movs	r0, #108	; 0x6c
   1a59c:	fb00 f004 	mul.w	r0, r0, r4
   1a5a0:	3020      	adds	r0, #32
   1a5a2:	4428      	add	r0, r5
   1a5a4:	300c      	adds	r0, #12
   1a5a6:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1a5a8:	2000      	movs	r0, #0
}
   1a5aa:	bd70      	pop	{r4, r5, r6, pc}

0001a5ac <ipv6_prefix_find>:
{
   1a5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a5ae:	4605      	mov	r5, r0
   1a5b0:	460e      	mov	r6, r1
   1a5b2:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1a5b4:	2400      	movs	r4, #0
   1a5b6:	e000      	b.n	1a5ba <ipv6_prefix_find+0xe>
   1a5b8:	3401      	adds	r4, #1
   1a5ba:	2c01      	cmp	r4, #1
   1a5bc:	dc21      	bgt.n	1a602 <ipv6_prefix_find+0x56>
		if (!iface->ipv6.unicast[i].is_used) {
   1a5be:	236c      	movs	r3, #108	; 0x6c
   1a5c0:	fb03 5304 	mla	r3, r3, r4, r5
   1a5c4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1a5c8:	2b00      	cmp	r3, #0
   1a5ca:	d0f5      	beq.n	1a5b8 <ipv6_prefix_find+0xc>
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1a5cc:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1a5d0:	0099      	lsls	r1, r3, #2
   1a5d2:	f501 7100 	add.w	r1, r1, #512	; 0x200
   1a5d6:	4429      	add	r1, r5
   1a5d8:	2210      	movs	r2, #16
   1a5da:	4411      	add	r1, r2
   1a5dc:	4630      	mov	r0, r6
   1a5de:	f00e ffe7 	bl	295b0 <memcmp>
   1a5e2:	2800      	cmp	r0, #0
   1a5e4:	d1e8      	bne.n	1a5b8 <ipv6_prefix_find+0xc>
		    prefix_len == iface->ipv6.prefix[i].len) {
   1a5e6:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1a5ea:	0093      	lsls	r3, r2, #2
   1a5ec:	461a      	mov	r2, r3
   1a5ee:	442b      	add	r3, r5
   1a5f0:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1a5f4:	42bb      	cmp	r3, r7
   1a5f6:	d1df      	bne.n	1a5b8 <ipv6_prefix_find+0xc>
			return &iface->ipv6.prefix[i];
   1a5f8:	f502 70ec 	add.w	r0, r2, #472	; 0x1d8
   1a5fc:	4428      	add	r0, r5
   1a5fe:	3010      	adds	r0, #16
   1a600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return NULL;
   1a602:	2000      	movs	r0, #0
}
   1a604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001a608 <net_if_ipv6_start_dad>:
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   1a608:	2300      	movs	r3, #0
   1a60a:	f881 3065 	strb.w	r3, [r1, #101]	; 0x65
   1a60e:	f3bf 8f5b 	dmb	ish
   1a612:	68c3      	ldr	r3, [r0, #12]
   1a614:	f3bf 8f5b 	dmb	ish
	if (net_if_is_up(iface)) {
   1a618:	f013 0f01 	tst.w	r3, #1
   1a61c:	d100      	bne.n	1a620 <net_if_ipv6_start_dad+0x18>
   1a61e:	4770      	bx	lr
{
   1a620:	b510      	push	{r4, lr}
   1a622:	460c      	mov	r4, r1
		ifaddr->dad_count = 1;
   1a624:	2301      	movs	r3, #1
   1a626:	f881 3066 	strb.w	r3, [r1, #102]	; 0x66
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   1a62a:	f006 f969 	bl	20900 <net_ipv6_start_dad>
   1a62e:	b100      	cbz	r0, 1a632 <net_if_ipv6_start_dad+0x2a>
   1a630:	bd10      	pop	{r4, pc}
   1a632:	2264      	movs	r2, #100	; 0x64
   1a634:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   1a638:	4801      	ldr	r0, [pc, #4]	; (1a640 <net_if_ipv6_start_dad+0x38>)
   1a63a:	f00e fec3 	bl	293c4 <k_delayed_work_submit_to_queue>
}
   1a63e:	e7f7      	b.n	1a630 <net_if_ipv6_start_dad+0x28>
   1a640:	20002a70 	.word	0x20002a70

0001a644 <net_if_ipv6_prefix_init>:
{
   1a644:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a646:	b085      	sub	sp, #20
   1a648:	4605      	mov	r5, r0
   1a64a:	460e      	mov	r6, r1
   1a64c:	461f      	mov	r7, r3
	prefix->is_used = true;
   1a64e:	2301      	movs	r3, #1
   1a650:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
	prefix->len = len;
   1a654:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	net_ipaddr_copy(&prefix->prefix, addr);
   1a658:	466c      	mov	r4, sp
   1a65a:	6808      	ldr	r0, [r1, #0]
   1a65c:	6849      	ldr	r1, [r1, #4]
   1a65e:	68b2      	ldr	r2, [r6, #8]
   1a660:	68f3      	ldr	r3, [r6, #12]
   1a662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a664:	466c      	mov	r4, sp
   1a666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1a668:	62a8      	str	r0, [r5, #40]	; 0x28
   1a66a:	62e9      	str	r1, [r5, #44]	; 0x2c
   1a66c:	632a      	str	r2, [r5, #48]	; 0x30
   1a66e:	636b      	str	r3, [r5, #52]	; 0x34
	k_delayed_work_init(&prefix->lifetime, prefix_lf_timeout);
   1a670:	4907      	ldr	r1, [pc, #28]	; (1a690 <net_if_ipv6_prefix_init+0x4c>)
   1a672:	4628      	mov	r0, r5
   1a674:	f00e fe2e 	bl	292d4 <k_delayed_work_init>
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   1a678:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1a67c:	d004      	beq.n	1a688 <net_if_ipv6_prefix_init+0x44>
		prefix->is_infinite = false;
   1a67e:	2300      	movs	r3, #0
   1a680:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
}
   1a684:	b005      	add	sp, #20
   1a686:	bdf0      	pop	{r4, r5, r6, r7, pc}
		prefix->is_infinite = true;
   1a688:	2301      	movs	r3, #1
   1a68a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   1a68e:	e7f9      	b.n	1a684 <net_if_ipv6_prefix_init+0x40>
   1a690:	0001a555 	.word	0x0001a555

0001a694 <join_mcast_allnodes>:
{
   1a694:	b500      	push	{lr}
   1a696:	b085      	sub	sp, #20
					u16_t addr0, u16_t addr1,
					u16_t addr2, u16_t addr3,
					u16_t addr4, u16_t addr5,
					u16_t addr6, u16_t addr7)
{
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1a698:	f240 23ff 	movw	r3, #767	; 0x2ff
   1a69c:	f8ad 3000 	strh.w	r3, [sp]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1a6a0:	2300      	movs	r3, #0
   1a6a2:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1a6a6:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1a6aa:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1a6ae:	f8ad 3008 	strh.w	r3, [sp, #8]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1a6b2:	f8ad 300a 	strh.w	r3, [sp, #10]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1a6b6:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1a6ba:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a6be:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1a6c2:	4669      	mov	r1, sp
   1a6c4:	f006 faa4 	bl	20c10 <net_ipv6_mld_join>
}
   1a6c8:	b005      	add	sp, #20
   1a6ca:	f85d fb04 	ldr.w	pc, [sp], #4

0001a6ce <join_mcast_solicit_node>:
{
   1a6ce:	b500      	push	{lr}
   1a6d0:	b085      	sub	sp, #20
	dst->s6_addr[0]   = 0xFF;
   1a6d2:	22ff      	movs	r2, #255	; 0xff
   1a6d4:	f88d 2000 	strb.w	r2, [sp]
	dst->s6_addr[1]   = 0x02;
   1a6d8:	2302      	movs	r3, #2
   1a6da:	f88d 3001 	strb.w	r3, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1a6de:	2300      	movs	r3, #0
   1a6e0:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1a6e4:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1a6e8:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1a6ec:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0;
   1a6f0:	f88d 300a 	strb.w	r3, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1a6f4:	2301      	movs	r3, #1
   1a6f6:	f88d 300b 	strb.w	r3, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1a6fa:	f88d 200c 	strb.w	r2, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1a6fe:	7b4b      	ldrb	r3, [r1, #13]
   1a700:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1a704:	89cb      	ldrh	r3, [r1, #14]
   1a706:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1a70a:	4669      	mov	r1, sp
   1a70c:	f006 fa80 	bl	20c10 <net_ipv6_mld_join>
}
   1a710:	b005      	add	sp, #20
   1a712:	f85d fb04 	ldr.w	pc, [sp], #4

0001a716 <leave_mcast_all>:
{
   1a716:	b538      	push	{r3, r4, r5, lr}
   1a718:	4605      	mov	r5, r0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1a71a:	2400      	movs	r4, #0
   1a71c:	e000      	b.n	1a720 <leave_mcast_all+0xa>
   1a71e:	3401      	adds	r4, #1
   1a720:	2c04      	cmp	r4, #4
   1a722:	dc1a      	bgt.n	1a75a <leave_mcast_all+0x44>
		if (!iface->ipv6.mcast[i].is_used ||
   1a724:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1a728:	00d3      	lsls	r3, r2, #3
   1a72a:	442b      	add	r3, r5
   1a72c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1a730:	f013 0f01 	tst.w	r3, #1
   1a734:	d0f3      	beq.n	1a71e <leave_mcast_all+0x8>
		    !iface->ipv6.mcast[i].is_joined) {
   1a736:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1a73a:	00d3      	lsls	r3, r2, #3
   1a73c:	461a      	mov	r2, r3
   1a73e:	442b      	add	r3, r5
   1a740:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   1a744:	f013 0f02 	tst.w	r3, #2
   1a748:	d0e9      	beq.n	1a71e <leave_mcast_all+0x8>
				   &iface->ipv6.mcast[i].address.in6_addr);
   1a74a:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1a74e:	4429      	add	r1, r5
		net_ipv6_mld_leave(iface,
   1a750:	3118      	adds	r1, #24
   1a752:	4628      	mov	r0, r5
   1a754:	f006 fa96 	bl	20c84 <net_ipv6_mld_leave>
   1a758:	e7e1      	b.n	1a71e <leave_mcast_all+0x8>
}
   1a75a:	bd38      	pop	{r3, r4, r5, pc}

0001a75c <net_if_prepare_events>:
{
   1a75c:	b570      	push	{r4, r5, r6, lr}
	int ev_count = 0;
   1a75e:	2400      	movs	r4, #0
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a760:	4d0a      	ldr	r5, [pc, #40]	; (1a78c <net_if_prepare_events+0x30>)
   1a762:	e00d      	b.n	1a780 <net_if_prepare_events+0x24>
		k_poll_event_init(&__net_if_event_start[ev_count],
   1a764:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a768:	0098      	lsls	r0, r3, #2
   1a76a:	f105 0318 	add.w	r3, r5, #24
   1a76e:	2200      	movs	r2, #0
   1a770:	2104      	movs	r1, #4
   1a772:	4e07      	ldr	r6, [pc, #28]	; (1a790 <net_if_prepare_events+0x34>)
   1a774:	4430      	add	r0, r6
   1a776:	f00d f927 	bl	279c8 <k_poll_event_init>
		ev_count++;
   1a77a:	3401      	adds	r4, #1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a77c:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1a780:	4b04      	ldr	r3, [pc, #16]	; (1a794 <net_if_prepare_events+0x38>)
   1a782:	429d      	cmp	r5, r3
   1a784:	d1ee      	bne.n	1a764 <net_if_prepare_events+0x8>
}
   1a786:	4620      	mov	r0, r4
   1a788:	bd70      	pop	{r4, r5, r6, pc}
   1a78a:	bf00      	nop
   1a78c:	2000d0c0 	.word	0x2000d0c0
   1a790:	2000d360 	.word	0x2000d360
   1a794:	2000d360 	.word	0x2000d360

0001a798 <net_if_lookup_by_dev>:
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a798:	4b06      	ldr	r3, [pc, #24]	; (1a7b4 <net_if_lookup_by_dev+0x1c>)
   1a79a:	4a07      	ldr	r2, [pc, #28]	; (1a7b8 <net_if_lookup_by_dev+0x20>)
   1a79c:	4293      	cmp	r3, r2
   1a79e:	d005      	beq.n	1a7ac <net_if_lookup_by_dev+0x14>
		if (iface->dev == dev) {
   1a7a0:	681a      	ldr	r2, [r3, #0]
   1a7a2:	4282      	cmp	r2, r0
   1a7a4:	d003      	beq.n	1a7ae <net_if_lookup_by_dev+0x16>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a7a6:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
   1a7aa:	e7f6      	b.n	1a79a <net_if_lookup_by_dev+0x2>
	return NULL;
   1a7ac:	2300      	movs	r3, #0
}
   1a7ae:	4618      	mov	r0, r3
   1a7b0:	4770      	bx	lr
   1a7b2:	bf00      	nop
   1a7b4:	2000d0c0 	.word	0x2000d0c0
   1a7b8:	2000d360 	.word	0x2000d360

0001a7bc <net_if_get_default>:
	if (__net_if_start == __net_if_end) {
   1a7bc:	4b03      	ldr	r3, [pc, #12]	; (1a7cc <net_if_get_default+0x10>)
   1a7be:	4a04      	ldr	r2, [pc, #16]	; (1a7d0 <net_if_get_default+0x14>)
   1a7c0:	429a      	cmp	r2, r3
   1a7c2:	d001      	beq.n	1a7c8 <net_if_get_default+0xc>
	return __net_if_start;
   1a7c4:	4802      	ldr	r0, [pc, #8]	; (1a7d0 <net_if_get_default+0x14>)
}
   1a7c6:	4770      	bx	lr
		return NULL;
   1a7c8:	2000      	movs	r0, #0
   1a7ca:	4770      	bx	lr
   1a7cc:	2000d360 	.word	0x2000d360
   1a7d0:	2000d0c0 	.word	0x2000d0c0

0001a7d4 <net_if_start_rs>:
{
   1a7d4:	b510      	push	{r4, lr}
   1a7d6:	4604      	mov	r4, r0
	if (!net_ipv6_start_rs(iface)) {
   1a7d8:	f006 fa16 	bl	20c08 <net_ipv6_start_rs>
   1a7dc:	b100      	cbz	r0, 1a7e0 <net_if_start_rs+0xc>
   1a7de:	bd10      	pop	{r4, pc}
   1a7e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a7e4:	f504 7118 	add.w	r1, r4, #608	; 0x260
   1a7e8:	4801      	ldr	r0, [pc, #4]	; (1a7f0 <net_if_start_rs+0x1c>)
   1a7ea:	f00e fdeb 	bl	293c4 <k_delayed_work_submit_to_queue>
}
   1a7ee:	e7f6      	b.n	1a7de <net_if_start_rs+0xa>
   1a7f0:	20002a70 	.word	0x20002a70

0001a7f4 <rs_timeout>:
{
   1a7f4:	b508      	push	{r3, lr}
	struct net_if *iface = CONTAINER_OF(work, struct net_if, ipv6.rs_timer);
   1a7f6:	f5a0 7018 	sub.w	r0, r0, #608	; 0x260
	iface->ipv6.rs_count++;
   1a7fa:	f890 3296 	ldrb.w	r3, [r0, #662]	; 0x296
   1a7fe:	3301      	adds	r3, #1
   1a800:	b2db      	uxtb	r3, r3
   1a802:	f880 3296 	strb.w	r3, [r0, #662]	; 0x296
	if (iface->ipv6.rs_count < RS_COUNT) {
   1a806:	2b02      	cmp	r3, #2
   1a808:	d900      	bls.n	1a80c <rs_timeout+0x18>
   1a80a:	bd08      	pop	{r3, pc}
		net_if_start_rs(iface);
   1a80c:	f7ff ffe2 	bl	1a7d4 <net_if_start_rs>
}
   1a810:	e7fb      	b.n	1a80a <rs_timeout+0x16>
	...

0001a814 <net_if_ipv6_addr_lookup>:
{
   1a814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a818:	4607      	mov	r7, r0
   1a81a:	4688      	mov	r8, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a81c:	4d1b      	ldr	r5, [pc, #108]	; (1a88c <net_if_ipv6_addr_lookup+0x78>)
   1a81e:	e02d      	b.n	1a87c <net_if_ipv6_addr_lookup+0x68>
			if (net_is_ipv6_prefix(addr->s6_addr,
   1a820:	b9ee      	cbnz	r6, 1a85e <net_if_ipv6_addr_lookup+0x4a>
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a822:	3401      	adds	r4, #1
   1a824:	2c02      	cmp	r4, #2
   1a826:	dc27      	bgt.n	1a878 <net_if_ipv6_addr_lookup+0x64>
			if (!iface->ipv6.unicast[i].is_used ||
   1a828:	236c      	movs	r3, #108	; 0x6c
   1a82a:	fb03 5304 	mla	r3, r3, r4, r5
   1a82e:	f893 6094 	ldrb.w	r6, [r3, #148]	; 0x94
   1a832:	2e00      	cmp	r6, #0
   1a834:	d0f5      	beq.n	1a822 <net_if_ipv6_addr_lookup+0xe>
			    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1a836:	236c      	movs	r3, #108	; 0x6c
   1a838:	fb03 5304 	mla	r3, r3, r4, r5
   1a83c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
			if (!iface->ipv6.unicast[i].is_used ||
   1a83e:	2b0a      	cmp	r3, #10
   1a840:	d1ef      	bne.n	1a822 <net_if_ipv6_addr_lookup+0xe>
				iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   1a842:	216c      	movs	r1, #108	; 0x6c
   1a844:	fb01 f104 	mul.w	r1, r1, r4
   1a848:	3120      	adds	r1, #32
   1a84a:	4429      	add	r1, r5
	if (memcmp(addr1, addr2, bytes)) {
   1a84c:	2210      	movs	r2, #16
   1a84e:	4411      	add	r1, r2
   1a850:	4638      	mov	r0, r7
   1a852:	f00e fead 	bl	295b0 <memcmp>
   1a856:	2800      	cmp	r0, #0
   1a858:	d0e2      	beq.n	1a820 <net_if_ipv6_addr_lookup+0xc>
		return false;
   1a85a:	2600      	movs	r6, #0
   1a85c:	e7e0      	b.n	1a820 <net_if_ipv6_addr_lookup+0xc>
				if (ret) {
   1a85e:	f1b8 0f00 	cmp.w	r8, #0
   1a862:	d001      	beq.n	1a868 <net_if_ipv6_addr_lookup+0x54>
					*ret = iface;
   1a864:	f8c8 5000 	str.w	r5, [r8]
				return &iface->ipv6.unicast[i];
   1a868:	206c      	movs	r0, #108	; 0x6c
   1a86a:	fb00 f004 	mul.w	r0, r0, r4
   1a86e:	3020      	adds	r0, #32
   1a870:	4428      	add	r0, r5
   1a872:	300c      	adds	r0, #12
   1a874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a878:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1a87c:	4b04      	ldr	r3, [pc, #16]	; (1a890 <net_if_ipv6_addr_lookup+0x7c>)
   1a87e:	429d      	cmp	r5, r3
   1a880:	d001      	beq.n	1a886 <net_if_ipv6_addr_lookup+0x72>
   1a882:	2400      	movs	r4, #0
   1a884:	e7ce      	b.n	1a824 <net_if_ipv6_addr_lookup+0x10>
	return NULL;
   1a886:	2000      	movs	r0, #0
}
   1a888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a88c:	2000d0c0 	.word	0x2000d0c0
   1a890:	2000d360 	.word	0x2000d360

0001a894 <dad_timeout>:
{
   1a894:	b530      	push	{r4, r5, lr}
   1a896:	b083      	sub	sp, #12
	struct net_if_addr *tmp, *ifaddr = CONTAINER_OF(work,
   1a898:	f1a0 053c 	sub.w	r5, r0, #60	; 0x3c
	struct net_if *iface = NULL;
   1a89c:	a902      	add	r1, sp, #8
   1a89e:	2300      	movs	r3, #0
   1a8a0:	f841 3d04 	str.w	r3, [r1, #-4]!
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   1a8a4:	2301      	movs	r3, #1
   1a8a6:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   1a8aa:	f1a0 0438 	sub.w	r4, r0, #56	; 0x38
   1a8ae:	4620      	mov	r0, r4
   1a8b0:	f7ff ffb0 	bl	1a814 <net_if_ipv6_addr_lookup>
	if (tmp == ifaddr) {
   1a8b4:	4285      	cmp	r5, r0
   1a8b6:	d001      	beq.n	1a8bc <dad_timeout+0x28>
}
   1a8b8:	b003      	add	sp, #12
   1a8ba:	bd30      	pop	{r4, r5, pc}
void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length);

static inline void net_mgmt_event_notify(u32_t mgmt_event, struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
   1a8bc:	2300      	movs	r3, #0
   1a8be:	461a      	mov	r2, r3
   1a8c0:	9901      	ldr	r1, [sp, #4]
   1a8c2:	4807      	ldr	r0, [pc, #28]	; (1a8e0 <dad_timeout+0x4c>)
   1a8c4:	f007 fdcc 	bl	22460 <net_mgmt_event_notify_with_info>
		net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   1a8c8:	4621      	mov	r1, r4
   1a8ca:	9801      	ldr	r0, [sp, #4]
   1a8cc:	f004 faf6 	bl	1eebc <net_ipv6_nbr_rm>
		join_mcast_allnodes(iface);
   1a8d0:	9801      	ldr	r0, [sp, #4]
   1a8d2:	f7ff fedf 	bl	1a694 <join_mcast_allnodes>
		join_mcast_solicit_node(iface, &ifaddr->address.in6_addr);
   1a8d6:	4621      	mov	r1, r4
   1a8d8:	9801      	ldr	r0, [sp, #4]
   1a8da:	f7ff fef8 	bl	1a6ce <join_mcast_solicit_node>
}
   1a8de:	e7eb      	b.n	1a8b8 <dad_timeout+0x24>
   1a8e0:	f060000d 	.word	0xf060000d

0001a8e4 <net_if_ipv6_addr_update_lifetime>:
{
   1a8e4:	b508      	push	{r3, lr}
   1a8e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a8ea:	fb02 f201 	mul.w	r2, r2, r1
   1a8ee:	f100 0114 	add.w	r1, r0, #20
   1a8f2:	4802      	ldr	r0, [pc, #8]	; (1a8fc <net_if_ipv6_addr_update_lifetime+0x18>)
   1a8f4:	f00e fd66 	bl	293c4 <k_delayed_work_submit_to_queue>
   1a8f8:	bd08      	pop	{r3, pc}
   1a8fa:	bf00      	nop
   1a8fc:	20002a70 	.word	0x20002a70

0001a900 <net_if_ipv6_addr_add>:
{
   1a900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a904:	b084      	sub	sp, #16
   1a906:	4605      	mov	r5, r0
   1a908:	460e      	mov	r6, r1
   1a90a:	4690      	mov	r8, r2
   1a90c:	461f      	mov	r7, r3
	ifaddr = ipv6_addr_find(iface, addr);
   1a90e:	f7ff fe29 	bl	1a564 <ipv6_addr_find>
	if (ifaddr) {
   1a912:	4604      	mov	r4, r0
   1a914:	b118      	cbz	r0, 1a91e <net_if_ipv6_addr_add+0x1e>
}
   1a916:	4620      	mov	r0, r4
   1a918:	b004      	add	sp, #16
   1a91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a91e:	2300      	movs	r3, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a920:	2b02      	cmp	r3, #2
   1a922:	dcf8      	bgt.n	1a916 <net_if_ipv6_addr_add+0x16>
		if (iface->ipv6.unicast[i].is_used) {
   1a924:	226c      	movs	r2, #108	; 0x6c
   1a926:	fb02 5203 	mla	r2, r2, r3, r5
   1a92a:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1a92e:	b10a      	cbz	r2, 1a934 <net_if_ipv6_addr_add+0x34>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a930:	3301      	adds	r3, #1
   1a932:	e7f5      	b.n	1a920 <net_if_ipv6_addr_add+0x20>
		net_if_addr_init(&iface->ipv6.unicast[i], addr, addr_type,
   1a934:	f04f 0e6c 	mov.w	lr, #108	; 0x6c
   1a938:	fb0e fe03 	mul.w	lr, lr, r3
   1a93c:	f10e 0e20 	add.w	lr, lr, #32
   1a940:	44ae      	add	lr, r5
   1a942:	f10e 040c 	add.w	r4, lr, #12
	ifaddr->is_used = true;
   1a946:	2301      	movs	r3, #1
   1a948:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	ifaddr->address.family = AF_INET6;
   1a94c:	230a      	movs	r3, #10
   1a94e:	f8ae 300c 	strh.w	r3, [lr, #12]
	ifaddr->addr_type = addr_type;
   1a952:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1a956:	46ec      	mov	ip, sp
   1a958:	6830      	ldr	r0, [r6, #0]
   1a95a:	6871      	ldr	r1, [r6, #4]
   1a95c:	68b2      	ldr	r2, [r6, #8]
   1a95e:	68f3      	ldr	r3, [r6, #12]
   1a960:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1a964:	466e      	mov	r6, sp
   1a966:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1a968:	f8ce 0010 	str.w	r0, [lr, #16]
   1a96c:	f8ce 1014 	str.w	r1, [lr, #20]
   1a970:	f8ce 2018 	str.w	r2, [lr, #24]
   1a974:	f8ce 301c 	str.w	r3, [lr, #28]
	k_delayed_work_init(&ifaddr->dad_timer, dad_timeout);
   1a978:	4910      	ldr	r1, [pc, #64]	; (1a9bc <net_if_ipv6_addr_add+0xbc>)
   1a97a:	f10e 0048 	add.w	r0, lr, #72	; 0x48
   1a97e:	f00e fca9 	bl	292d4 <k_delayed_work_init>
	if (vlifetime) {
   1a982:	b96f      	cbnz	r7, 1a9a0 <net_if_ipv6_addr_add+0xa0>
		ifaddr->is_infinite = true;
   1a984:	2301      	movs	r3, #1
   1a986:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1a98a:	4621      	mov	r1, r4
   1a98c:	4628      	mov	r0, r5
   1a98e:	f7ff fe3b 	bl	1a608 <net_if_ipv6_start_dad>
   1a992:	2300      	movs	r3, #0
   1a994:	461a      	mov	r2, r3
   1a996:	4629      	mov	r1, r5
   1a998:	4809      	ldr	r0, [pc, #36]	; (1a9c0 <net_if_ipv6_addr_add+0xc0>)
   1a99a:	f007 fd61 	bl	22460 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.unicast[i];
   1a99e:	e7ba      	b.n	1a916 <net_if_ipv6_addr_add+0x16>
		ifaddr->is_infinite = false;
   1a9a0:	2300      	movs	r3, #0
   1a9a2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		k_delayed_work_init(&ifaddr->lifetime, ipv6_addr_expired);
   1a9a6:	4907      	ldr	r1, [pc, #28]	; (1a9c4 <net_if_ipv6_addr_add+0xc4>)
   1a9a8:	f104 0014 	add.w	r0, r4, #20
   1a9ac:	f00e fc92 	bl	292d4 <k_delayed_work_init>
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   1a9b0:	4639      	mov	r1, r7
   1a9b2:	4620      	mov	r0, r4
   1a9b4:	f7ff ff96 	bl	1a8e4 <net_if_ipv6_addr_update_lifetime>
   1a9b8:	e7e7      	b.n	1a98a <net_if_ipv6_addr_add+0x8a>
   1a9ba:	bf00      	nop
   1a9bc:	0001a895 	.word	0x0001a895
   1a9c0:	f0600001 	.word	0xf0600001
   1a9c4:	0001a54d 	.word	0x0001a54d

0001a9c8 <net_if_start_dad>:
{
   1a9c8:	b570      	push	{r4, r5, r6, lr}
   1a9ca:	b084      	sub	sp, #16
   1a9cc:	4605      	mov	r5, r0
	struct in6_addr addr = { };
   1a9ce:	2300      	movs	r3, #0
   1a9d0:	9302      	str	r3, [sp, #8]
   1a9d2:	9303      	str	r3, [sp, #12]
	net_ipv6_addr_create_iid(&addr, &iface->link_addr);
   1a9d4:	f100 0410 	add.w	r4, r0, #16
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	addr->s6_addr[0] = 0xfe;
   1a9d8:	22fe      	movs	r2, #254	; 0xfe
   1a9da:	f88d 2000 	strb.w	r2, [sp]
	addr->s6_addr[1] = 0x80;
   1a9de:	2280      	movs	r2, #128	; 0x80
   1a9e0:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1a9e4:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1a9e8:	9301      	str	r3, [sp, #4]

	switch (lladdr->len) {
   1a9ea:	7922      	ldrb	r2, [r4, #4]
   1a9ec:	2a06      	cmp	r2, #6
   1a9ee:	d020      	beq.n	1aa32 <net_if_start_dad+0x6a>
   1a9f0:	2a08      	cmp	r2, #8
   1a9f2:	d044      	beq.n	1aa7e <net_if_start_dad+0xb6>
   1a9f4:	2a02      	cmp	r2, #2
   1a9f6:	d008      	beq.n	1aa0a <net_if_start_dad+0x42>
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   1a9f8:	2300      	movs	r3, #0
   1a9fa:	2201      	movs	r2, #1
   1a9fc:	4669      	mov	r1, sp
   1a9fe:	4628      	mov	r0, r5
   1aa00:	f7ff ff7e 	bl	1a900 <net_if_ipv6_addr_add>
   1aa04:	4606      	mov	r6, r0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1aa06:	2400      	movs	r4, #0
   1aa08:	e045      	b.n	1aa96 <net_if_start_dad+0xce>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154) {
   1aa0a:	7963      	ldrb	r3, [r4, #5]
   1aa0c:	2b01      	cmp	r3, #1
   1aa0e:	d1f3      	bne.n	1a9f8 <net_if_start_dad+0x30>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   1aa10:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   1aa12:	22ff      	movs	r2, #255	; 0xff
   1aa14:	f88d 200b 	strb.w	r2, [sp, #11]
			addr->s6_addr[12] = 0xfe;
   1aa18:	22fe      	movs	r2, #254	; 0xfe
   1aa1a:	f88d 200c 	strb.w	r2, [sp, #12]
			addr->s6_addr[13] = 0;
   1aa1e:	f88d 300d 	strb.w	r3, [sp, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   1aa22:	6903      	ldr	r3, [r0, #16]
   1aa24:	781a      	ldrb	r2, [r3, #0]
   1aa26:	f88d 200e 	strb.w	r2, [sp, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   1aa2a:	785b      	ldrb	r3, [r3, #1]
   1aa2c:	f88d 300f 	strb.w	r3, [sp, #15]
   1aa30:	e7e2      	b.n	1a9f8 <net_if_start_dad+0x30>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1aa32:	2203      	movs	r2, #3
   1aa34:	6901      	ldr	r1, [r0, #16]
   1aa36:	a802      	add	r0, sp, #8
   1aa38:	f7e5 fc42 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1aa3c:	23ff      	movs	r3, #255	; 0xff
   1aa3e:	f88d 300b 	strb.w	r3, [sp, #11]
		addr->s6_addr[12] = 0xfe;
   1aa42:	23fe      	movs	r3, #254	; 0xfe
   1aa44:	f88d 300c 	strb.w	r3, [sp, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1aa48:	6929      	ldr	r1, [r5, #16]
   1aa4a:	2203      	movs	r2, #3
   1aa4c:	4411      	add	r1, r2
   1aa4e:	f10d 000d 	add.w	r0, sp, #13
   1aa52:	f7e5 fc35 	bl	2c0 <memcpy>

#if defined(CONFIG_NET_L2_BT_ZEP1656)
		/* Workaround against older Linux kernel BT IPSP code.
		 * This will be removed eventually.
		 */
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1aa56:	7963      	ldrb	r3, [r4, #5]
   1aa58:	2b02      	cmp	r3, #2
   1aa5a:	d009      	beq.n	1aa70 <net_if_start_dad+0xa8>
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
   1aa5c:	7963      	ldrb	r3, [r4, #5]
   1aa5e:	2b03      	cmp	r3, #3
   1aa60:	d1ca      	bne.n	1a9f8 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1aa62:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1aa66:	f083 0302 	eor.w	r3, r3, #2
   1aa6a:	f88d 3008 	strb.w	r3, [sp, #8]
   1aa6e:	e7c3      	b.n	1a9f8 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1aa70:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1aa74:	f083 0302 	eor.w	r3, r3, #2
   1aa78:	f88d 3008 	strb.w	r3, [sp, #8]
   1aa7c:	e7ee      	b.n	1aa5c <net_if_start_dad+0x94>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1aa7e:	6901      	ldr	r1, [r0, #16]
   1aa80:	a802      	add	r0, sp, #8
   1aa82:	f7e5 fc1d 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   1aa86:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1aa8a:	f083 0302 	eor.w	r3, r3, #2
   1aa8e:	f88d 3008 	strb.w	r3, [sp, #8]
   1aa92:	e7b1      	b.n	1a9f8 <net_if_start_dad+0x30>
   1aa94:	3401      	adds	r4, #1
   1aa96:	2c02      	cmp	r4, #2
   1aa98:	dc18      	bgt.n	1aacc <net_if_start_dad+0x104>
		if (!iface->ipv6.unicast[i].is_used ||
   1aa9a:	236c      	movs	r3, #108	; 0x6c
   1aa9c:	fb03 5304 	mla	r3, r3, r4, r5
   1aaa0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1aaa4:	2b00      	cmp	r3, #0
   1aaa6:	d0f5      	beq.n	1aa94 <net_if_start_dad+0xcc>
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1aaa8:	236c      	movs	r3, #108	; 0x6c
   1aaaa:	fb03 5304 	mla	r3, r3, r4, r5
   1aaae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   1aab0:	2b0a      	cmp	r3, #10
   1aab2:	d1ef      	bne.n	1aa94 <net_if_start_dad+0xcc>
		    &iface->ipv6.unicast[i] == ifaddr) {
   1aab4:	216c      	movs	r1, #108	; 0x6c
   1aab6:	fb01 f104 	mul.w	r1, r1, r4
   1aaba:	3120      	adds	r1, #32
   1aabc:	4429      	add	r1, r5
   1aabe:	310c      	adds	r1, #12
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1aac0:	428e      	cmp	r6, r1
   1aac2:	d0e7      	beq.n	1aa94 <net_if_start_dad+0xcc>
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1aac4:	4628      	mov	r0, r5
   1aac6:	f7ff fd9f 	bl	1a608 <net_if_ipv6_start_dad>
   1aaca:	e7e3      	b.n	1aa94 <net_if_start_dad+0xcc>
}
   1aacc:	b004      	add	sp, #16
   1aace:	bd70      	pop	{r4, r5, r6, pc}

0001aad0 <net_if_ipv6_maddr_add>:
	return addr->s6_addr[0] == 0xFF;
   1aad0:	780b      	ldrb	r3, [r1, #0]
	if (!net_is_ipv6_addr_mcast(addr)) {
   1aad2:	2bff      	cmp	r3, #255	; 0xff
   1aad4:	d134      	bne.n	1ab40 <net_if_ipv6_maddr_add+0x70>
{
   1aad6:	b570      	push	{r4, r5, r6, lr}
   1aad8:	2400      	movs	r4, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1aada:	2c04      	cmp	r4, #4
   1aadc:	dc2e      	bgt.n	1ab3c <net_if_ipv6_maddr_add+0x6c>
		if (iface->ipv6.mcast[i].is_used) {
   1aade:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1aae2:	00d3      	lsls	r3, r2, #3
   1aae4:	4403      	add	r3, r0
   1aae6:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1aaea:	f013 0f01 	tst.w	r3, #1
   1aaee:	d001      	beq.n	1aaf4 <net_if_ipv6_maddr_add+0x24>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1aaf0:	3401      	adds	r4, #1
   1aaf2:	e7f2      	b.n	1aada <net_if_ipv6_maddr_add+0xa>
   1aaf4:	4605      	mov	r5, r0
		iface->ipv6.mcast[i].is_used = true;
   1aaf6:	0066      	lsls	r6, r4, #1
   1aaf8:	1932      	adds	r2, r6, r4
   1aafa:	00d3      	lsls	r3, r2, #3
   1aafc:	4403      	add	r3, r0
   1aafe:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1ab02:	f042 0201 	orr.w	r2, r2, #1
   1ab06:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		iface->ipv6.mcast[i].address.family = AF_INET6;
   1ab0a:	220a      	movs	r2, #10
   1ab0c:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
		memcpy(&iface->ipv6.mcast[i].address.in6_addr, addr, 16);
   1ab10:	1933      	adds	r3, r6, r4
   1ab12:	00d8      	lsls	r0, r3, #3
   1ab14:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1ab18:	4428      	add	r0, r5
   1ab1a:	2210      	movs	r2, #16
   1ab1c:	3018      	adds	r0, #24
   1ab1e:	f7e5 fbcf 	bl	2c0 <memcpy>
   1ab22:	2300      	movs	r3, #0
   1ab24:	461a      	mov	r2, r3
   1ab26:	4629      	mov	r1, r5
   1ab28:	4806      	ldr	r0, [pc, #24]	; (1ab44 <net_if_ipv6_maddr_add+0x74>)
   1ab2a:	f007 fc99 	bl	22460 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.mcast[i];
   1ab2e:	4434      	add	r4, r6
   1ab30:	00e0      	lsls	r0, r4, #3
   1ab32:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1ab36:	4428      	add	r0, r5
   1ab38:	3010      	adds	r0, #16
   1ab3a:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1ab3c:	2000      	movs	r0, #0
   1ab3e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1ab40:	2000      	movs	r0, #0
   1ab42:	4770      	bx	lr
   1ab44:	f0600003 	.word	0xf0600003

0001ab48 <net_if_ipv6_maddr_rm>:
{
   1ab48:	b570      	push	{r4, r5, r6, lr}
   1ab4a:	4605      	mov	r5, r0
   1ab4c:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ab4e:	2400      	movs	r4, #0
   1ab50:	e000      	b.n	1ab54 <net_if_ipv6_maddr_rm+0xc>
   1ab52:	3401      	adds	r4, #1
   1ab54:	2c04      	cmp	r4, #4
   1ab56:	dc25      	bgt.n	1aba4 <net_if_ipv6_maddr_rm+0x5c>
		if (!iface->ipv6.mcast[i].is_used) {
   1ab58:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ab5c:	00d3      	lsls	r3, r2, #3
   1ab5e:	461a      	mov	r2, r3
   1ab60:	442b      	add	r3, r5
   1ab62:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1ab66:	f013 0f01 	tst.w	r3, #1
   1ab6a:	d0f2      	beq.n	1ab52 <net_if_ipv6_maddr_rm+0xa>
			    &iface->ipv6.mcast[i].address.in6_addr,
   1ab6c:	f502 70b0 	add.w	r0, r2, #352	; 0x160
   1ab70:	4428      	add	r0, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1ab72:	2210      	movs	r2, #16
   1ab74:	4631      	mov	r1, r6
   1ab76:	3018      	adds	r0, #24
   1ab78:	f00e fd1a 	bl	295b0 <memcmp>
		if (!net_ipv6_addr_cmp(
   1ab7c:	2800      	cmp	r0, #0
   1ab7e:	d1e8      	bne.n	1ab52 <net_if_ipv6_maddr_rm+0xa>
		iface->ipv6.mcast[i].is_used = false;
   1ab80:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1ab84:	00e3      	lsls	r3, r4, #3
   1ab86:	442b      	add	r3, r5
   1ab88:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1ab8c:	f36f 0200 	bfc	r2, #0, #1
   1ab90:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
   1ab94:	2300      	movs	r3, #0
   1ab96:	461a      	mov	r2, r3
   1ab98:	4629      	mov	r1, r5
   1ab9a:	4803      	ldr	r0, [pc, #12]	; (1aba8 <net_if_ipv6_maddr_rm+0x60>)
   1ab9c:	f007 fc60 	bl	22460 <net_mgmt_event_notify_with_info>
		return true;
   1aba0:	2001      	movs	r0, #1
   1aba2:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   1aba4:	2000      	movs	r0, #0
}
   1aba6:	bd70      	pop	{r4, r5, r6, pc}
   1aba8:	f0600004 	.word	0xf0600004

0001abac <net_if_ipv6_addr_rm>:
{
   1abac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1abb0:	b084      	sub	sp, #16
   1abb2:	4606      	mov	r6, r0
   1abb4:	460f      	mov	r7, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1abb6:	2400      	movs	r4, #0
   1abb8:	e009      	b.n	1abce <net_if_ipv6_addr_rm+0x22>
			k_delayed_work_cancel(&iface->ipv6.unicast[i].lifetime);
   1abba:	206c      	movs	r0, #108	; 0x6c
   1abbc:	fb00 f004 	mul.w	r0, r0, r4
   1abc0:	3030      	adds	r0, #48	; 0x30
   1abc2:	4430      	add	r0, r6
   1abc4:	3010      	adds	r0, #16
   1abc6:	f00e fba3 	bl	29310 <k_delayed_work_cancel>
   1abca:	e01c      	b.n	1ac06 <net_if_ipv6_addr_rm+0x5a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1abcc:	3401      	adds	r4, #1
   1abce:	2c02      	cmp	r4, #2
   1abd0:	dc46      	bgt.n	1ac60 <net_if_ipv6_addr_rm+0xb4>
		if (!iface->ipv6.unicast[i].is_used) {
   1abd2:	236c      	movs	r3, #108	; 0x6c
   1abd4:	fb03 6304 	mla	r3, r3, r4, r6
   1abd8:	f893 5094 	ldrb.w	r5, [r3, #148]	; 0x94
   1abdc:	2d00      	cmp	r5, #0
   1abde:	d0f5      	beq.n	1abcc <net_if_ipv6_addr_rm+0x20>
			    &iface->ipv6.unicast[i].address.in6_addr,
   1abe0:	206c      	movs	r0, #108	; 0x6c
   1abe2:	fb00 f004 	mul.w	r0, r0, r4
   1abe6:	3020      	adds	r0, #32
   1abe8:	4430      	add	r0, r6
   1abea:	2210      	movs	r2, #16
   1abec:	4639      	mov	r1, r7
   1abee:	4410      	add	r0, r2
   1abf0:	f00e fcde 	bl	295b0 <memcmp>
		if (!net_ipv6_addr_cmp(
   1abf4:	2800      	cmp	r0, #0
   1abf6:	d1e9      	bne.n	1abcc <net_if_ipv6_addr_rm+0x20>
		if (!iface->ipv6.unicast[i].is_infinite) {
   1abf8:	236c      	movs	r3, #108	; 0x6c
   1abfa:	fb03 6304 	mla	r3, r3, r4, r6
   1abfe:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   1ac02:	2b00      	cmp	r3, #0
   1ac04:	d0d9      	beq.n	1abba <net_if_ipv6_addr_rm+0xe>
		iface->ipv6.unicast[i].is_used = false;
   1ac06:	236c      	movs	r3, #108	; 0x6c
   1ac08:	fb03 6404 	mla	r4, r3, r4, r6
   1ac0c:	f04f 0800 	mov.w	r8, #0
   1ac10:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
	dst->s6_addr[0]   = 0xFF;
   1ac14:	23ff      	movs	r3, #255	; 0xff
   1ac16:	f88d 3000 	strb.w	r3, [sp]
	dst->s6_addr[1]   = 0x02;
   1ac1a:	2202      	movs	r2, #2
   1ac1c:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1ac20:	f8ad 8002 	strh.w	r8, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1ac24:	f8ad 8004 	strh.w	r8, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1ac28:	f8ad 8006 	strh.w	r8, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1ac2c:	f8ad 8008 	strh.w	r8, [sp, #8]
	dst->s6_addr[10]  = 0;
   1ac30:	f88d 800a 	strb.w	r8, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1ac34:	2201      	movs	r2, #1
   1ac36:	f88d 200b 	strb.w	r2, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1ac3a:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1ac3e:	7b7b      	ldrb	r3, [r7, #13]
   1ac40:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1ac44:	89fb      	ldrh	r3, [r7, #14]
   1ac46:	f8ad 300e 	strh.w	r3, [sp, #14]
		net_if_ipv6_maddr_rm(iface, &maddr);
   1ac4a:	4669      	mov	r1, sp
   1ac4c:	4630      	mov	r0, r6
   1ac4e:	f7ff ff7b 	bl	1ab48 <net_if_ipv6_maddr_rm>
   1ac52:	4643      	mov	r3, r8
   1ac54:	4642      	mov	r2, r8
   1ac56:	4631      	mov	r1, r6
   1ac58:	4804      	ldr	r0, [pc, #16]	; (1ac6c <net_if_ipv6_addr_rm+0xc0>)
   1ac5a:	f007 fc01 	bl	22460 <net_mgmt_event_notify_with_info>
   1ac5e:	e000      	b.n	1ac62 <net_if_ipv6_addr_rm+0xb6>
	return false;
   1ac60:	2500      	movs	r5, #0
}
   1ac62:	4628      	mov	r0, r5
   1ac64:	b004      	add	sp, #16
   1ac66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ac6a:	bf00      	nop
   1ac6c:	f0600002 	.word	0xf0600002

0001ac70 <net_if_ipv6_dad_failed>:
{
   1ac70:	b510      	push	{r4, lr}
   1ac72:	b082      	sub	sp, #8
   1ac74:	ab02      	add	r3, sp, #8
   1ac76:	f843 0d04 	str.w	r0, [r3, #-4]!
   1ac7a:	460c      	mov	r4, r1
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   1ac7c:	4619      	mov	r1, r3
   1ac7e:	4620      	mov	r0, r4
   1ac80:	f7ff fdc8 	bl	1a814 <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   1ac84:	b160      	cbz	r0, 1aca0 <net_if_ipv6_dad_failed+0x30>
	k_delayed_work_cancel(&ifaddr->dad_timer);
   1ac86:	303c      	adds	r0, #60	; 0x3c
   1ac88:	f00e fb42 	bl	29310 <k_delayed_work_cancel>
   1ac8c:	2300      	movs	r3, #0
   1ac8e:	461a      	mov	r2, r3
   1ac90:	9901      	ldr	r1, [sp, #4]
   1ac92:	4804      	ldr	r0, [pc, #16]	; (1aca4 <net_if_ipv6_dad_failed+0x34>)
   1ac94:	f007 fbe4 	bl	22460 <net_mgmt_event_notify_with_info>
	net_if_ipv6_addr_rm(iface, addr);
   1ac98:	4621      	mov	r1, r4
   1ac9a:	9801      	ldr	r0, [sp, #4]
   1ac9c:	f7ff ff86 	bl	1abac <net_if_ipv6_addr_rm>
}
   1aca0:	b002      	add	sp, #8
   1aca2:	bd10      	pop	{r4, pc}
   1aca4:	f060000e 	.word	0xf060000e

0001aca8 <net_if_ipv6_maddr_lookup>:
{
   1aca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1acaa:	4607      	mov	r7, r0
   1acac:	460e      	mov	r6, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1acae:	4d22      	ldr	r5, [pc, #136]	; (1ad38 <net_if_ipv6_maddr_lookup+0x90>)
   1acb0:	e034      	b.n	1ad1c <net_if_ipv6_maddr_lookup+0x74>
		return false;
   1acb2:	2300      	movs	r3, #0
			if (net_is_ipv6_prefix(maddr->s6_addr,
   1acb4:	bb13      	cbnz	r3, 1acfc <net_if_ipv6_maddr_lookup+0x54>
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1acb6:	3401      	adds	r4, #1
   1acb8:	2c04      	cmp	r4, #4
   1acba:	dc2d      	bgt.n	1ad18 <net_if_ipv6_maddr_lookup+0x70>
			if (!iface->ipv6.mcast[i].is_used ||
   1acbc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1acc0:	00d3      	lsls	r3, r2, #3
   1acc2:	442b      	add	r3, r5
   1acc4:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1acc8:	f013 0f01 	tst.w	r3, #1
   1accc:	d0f3      	beq.n	1acb6 <net_if_ipv6_maddr_lookup+0xe>
			    iface->ipv6.mcast[i].address.family != AF_INET6) {
   1acce:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1acd2:	00d3      	lsls	r3, r2, #3
   1acd4:	442b      	add	r3, r5
   1acd6:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
			if (!iface->ipv6.mcast[i].is_used ||
   1acda:	2b0a      	cmp	r3, #10
   1acdc:	d1eb      	bne.n	1acb6 <net_if_ipv6_maddr_lookup+0xe>
				iface->ipv6.mcast[i].address.in6_addr.s6_addr,
   1acde:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ace2:	00d3      	lsls	r3, r2, #3
   1ace4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1ace8:	18e9      	adds	r1, r5, r3
	if (memcmp(addr1, addr2, bytes)) {
   1acea:	2210      	movs	r2, #16
   1acec:	3118      	adds	r1, #24
   1acee:	4638      	mov	r0, r7
   1acf0:	f00e fc5e 	bl	295b0 <memcmp>
   1acf4:	2800      	cmp	r0, #0
   1acf6:	d1dc      	bne.n	1acb2 <net_if_ipv6_maddr_lookup+0xa>
		return true;
   1acf8:	2301      	movs	r3, #1
   1acfa:	e7db      	b.n	1acb4 <net_if_ipv6_maddr_lookup+0xc>
				if (ret) {
   1acfc:	b106      	cbz	r6, 1ad00 <net_if_ipv6_maddr_lookup+0x58>
					*ret = iface;
   1acfe:	6035      	str	r5, [r6, #0]
				return &iface->ipv6.mcast[i];
   1ad00:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1ad04:	00e3      	lsls	r3, r4, #3
   1ad06:	f503 70b0 	add.w	r0, r3, #352	; 0x160
   1ad0a:	4428      	add	r0, r5
   1ad0c:	3010      	adds	r0, #16
   1ad0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ad10:	2400      	movs	r4, #0
   1ad12:	e7d1      	b.n	1acb8 <net_if_ipv6_maddr_lookup+0x10>
   1ad14:	2400      	movs	r4, #0
   1ad16:	e7cf      	b.n	1acb8 <net_if_ipv6_maddr_lookup+0x10>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1ad18:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1ad1c:	4b07      	ldr	r3, [pc, #28]	; (1ad3c <net_if_ipv6_maddr_lookup+0x94>)
   1ad1e:	429d      	cmp	r5, r3
   1ad20:	d008      	beq.n	1ad34 <net_if_ipv6_maddr_lookup+0x8c>
		if (ret && *ret && iface != *ret) {
   1ad22:	2e00      	cmp	r6, #0
   1ad24:	d0f4      	beq.n	1ad10 <net_if_ipv6_maddr_lookup+0x68>
   1ad26:	6833      	ldr	r3, [r6, #0]
   1ad28:	2b00      	cmp	r3, #0
   1ad2a:	d0f3      	beq.n	1ad14 <net_if_ipv6_maddr_lookup+0x6c>
   1ad2c:	429d      	cmp	r5, r3
   1ad2e:	d1f3      	bne.n	1ad18 <net_if_ipv6_maddr_lookup+0x70>
   1ad30:	2400      	movs	r4, #0
   1ad32:	e7c1      	b.n	1acb8 <net_if_ipv6_maddr_lookup+0x10>
	return NULL;
   1ad34:	2000      	movs	r0, #0
}
   1ad36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ad38:	2000d0c0 	.word	0x2000d0c0
   1ad3c:	2000d360 	.word	0x2000d360

0001ad40 <net_if_mcast_monitor>:
{
   1ad40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad42:	4605      	mov	r5, r0
   1ad44:	460e      	mov	r6, r1
   1ad46:	4617      	mov	r7, r2
	return list->head;
   1ad48:	4b13      	ldr	r3, [pc, #76]	; (1ad98 <net_if_mcast_monitor+0x58>)
   1ad4a:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1ad4c:	b11b      	cbz	r3, 1ad56 <net_if_mcast_monitor+0x16>
   1ad4e:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1ad50:	b173      	cbz	r3, 1ad70 <net_if_mcast_monitor+0x30>
	return node->next;
   1ad52:	681c      	ldr	r4, [r3, #0]
   1ad54:	e00c      	b.n	1ad70 <net_if_mcast_monitor+0x30>
   1ad56:	461c      	mov	r4, r3
   1ad58:	e00a      	b.n	1ad70 <net_if_mcast_monitor+0x30>
			mon->cb(iface, addr, is_joined);
   1ad5a:	689b      	ldr	r3, [r3, #8]
   1ad5c:	463a      	mov	r2, r7
   1ad5e:	4631      	mov	r1, r6
   1ad60:	4628      	mov	r0, r5
   1ad62:	4798      	blx	r3
   1ad64:	e008      	b.n	1ad78 <net_if_mcast_monitor+0x38>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1ad66:	4623      	mov	r3, r4
   1ad68:	e00c      	b.n	1ad84 <net_if_mcast_monitor+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1ad6a:	4622      	mov	r2, r4
   1ad6c:	4623      	mov	r3, r4
   1ad6e:	4614      	mov	r4, r2
   1ad70:	b183      	cbz	r3, 1ad94 <net_if_mcast_monitor+0x54>
		if (iface == mon->iface) {
   1ad72:	685a      	ldr	r2, [r3, #4]
   1ad74:	42aa      	cmp	r2, r5
   1ad76:	d0f0      	beq.n	1ad5a <net_if_mcast_monitor+0x1a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1ad78:	2c00      	cmp	r4, #0
   1ad7a:	d0f6      	beq.n	1ad6a <net_if_mcast_monitor+0x2a>
   1ad7c:	4622      	mov	r2, r4
   1ad7e:	2c00      	cmp	r4, #0
   1ad80:	d0f1      	beq.n	1ad66 <net_if_mcast_monitor+0x26>
	return node->next;
   1ad82:	6823      	ldr	r3, [r4, #0]
   1ad84:	b113      	cbz	r3, 1ad8c <net_if_mcast_monitor+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1ad86:	b11a      	cbz	r2, 1ad90 <net_if_mcast_monitor+0x50>
	return node->next;
   1ad88:	6822      	ldr	r2, [r4, #0]
   1ad8a:	e7ef      	b.n	1ad6c <net_if_mcast_monitor+0x2c>
   1ad8c:	2200      	movs	r2, #0
   1ad8e:	e7ed      	b.n	1ad6c <net_if_mcast_monitor+0x2c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1ad90:	2200      	movs	r2, #0
   1ad92:	e7eb      	b.n	1ad6c <net_if_mcast_monitor+0x2c>
}
   1ad94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ad96:	bf00      	nop
   1ad98:	20001a54 	.word	0x20001a54

0001ad9c <net_if_ipv6_prefix_add>:
{
   1ad9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ada0:	4605      	mov	r5, r0
   1ada2:	460e      	mov	r6, r1
   1ada4:	4617      	mov	r7, r2
   1ada6:	4698      	mov	r8, r3
	if_prefix = ipv6_prefix_find(iface, prefix, len);
   1ada8:	f7ff fc00 	bl	1a5ac <ipv6_prefix_find>
	if (if_prefix) {
   1adac:	4604      	mov	r4, r0
   1adae:	b110      	cbz	r0, 1adb6 <net_if_ipv6_prefix_add+0x1a>
}
   1adb0:	4620      	mov	r0, r4
   1adb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1adb6:	2300      	movs	r3, #0
   1adb8:	e000      	b.n	1adbc <net_if_ipv6_prefix_add+0x20>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1adba:	3301      	adds	r3, #1
   1adbc:	2b01      	cmp	r3, #1
   1adbe:	dcf7      	bgt.n	1adb0 <net_if_ipv6_prefix_add+0x14>
		if (iface->ipv6.prefix[i].is_used) {
   1adc0:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1adc4:	008a      	lsls	r2, r1, #2
   1adc6:	442a      	add	r2, r5
   1adc8:	f892 2222 	ldrb.w	r2, [r2, #546]	; 0x222
   1adcc:	2a00      	cmp	r2, #0
   1adce:	d1f4      	bne.n	1adba <net_if_ipv6_prefix_add+0x1e>
		net_if_ipv6_prefix_init(&iface->ipv6.prefix[i], prefix, len,
   1add0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1add4:	009a      	lsls	r2, r3, #2
   1add6:	f502 74ec 	add.w	r4, r2, #472	; 0x1d8
   1adda:	442c      	add	r4, r5
   1addc:	3410      	adds	r4, #16
   1adde:	4643      	mov	r3, r8
   1ade0:	463a      	mov	r2, r7
   1ade2:	4631      	mov	r1, r6
   1ade4:	4620      	mov	r0, r4
   1ade6:	f7ff fc2d 	bl	1a644 <net_if_ipv6_prefix_init>
   1adea:	2300      	movs	r3, #0
   1adec:	461a      	mov	r2, r3
   1adee:	4629      	mov	r1, r5
   1adf0:	4801      	ldr	r0, [pc, #4]	; (1adf8 <net_if_ipv6_prefix_add+0x5c>)
   1adf2:	f007 fb35 	bl	22460 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.prefix[i];
   1adf6:	e7db      	b.n	1adb0 <net_if_ipv6_prefix_add+0x14>
   1adf8:	f0600005 	.word	0xf0600005

0001adfc <net_if_ipv6_prefix_lookup>:
{
   1adfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae00:	4605      	mov	r5, r0
   1ae02:	4688      	mov	r8, r1
   1ae04:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1ae06:	2400      	movs	r4, #0
   1ae08:	e01d      	b.n	1ae46 <net_if_ipv6_prefix_lookup+0x4a>
	if (memcmp(addr1, addr2, bytes)) {
   1ae0a:	4652      	mov	r2, sl
   1ae0c:	4641      	mov	r1, r8
   1ae0e:	4648      	mov	r0, r9
   1ae10:	f00e fbce 	bl	295b0 <memcmp>
   1ae14:	b9a0      	cbnz	r0, 1ae40 <net_if_ipv6_prefix_lookup+0x44>
	if (!remain) {
   1ae16:	f1bb 0f00 	cmp.w	fp, #0
   1ae1a:	d012      	beq.n	1ae42 <net_if_ipv6_prefix_lookup+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1ae1c:	f1cb 0208 	rsb	r2, fp, #8
   1ae20:	23ff      	movs	r3, #255	; 0xff
   1ae22:	4093      	lsls	r3, r2
   1ae24:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1ae28:	fa03 f30b 	lsl.w	r3, r3, fp
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1ae2c:	f819 200a 	ldrb.w	r2, [r9, sl]
   1ae30:	f818 100a 	ldrb.w	r1, [r8, sl]
   1ae34:	404a      	eors	r2, r1
   1ae36:	4213      	tst	r3, r2
   1ae38:	bf0c      	ite	eq
   1ae3a:	2601      	moveq	r6, #1
   1ae3c:	2600      	movne	r6, #0
   1ae3e:	e000      	b.n	1ae42 <net_if_ipv6_prefix_lookup+0x46>
		return false;
   1ae40:	2600      	movs	r6, #0
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1ae42:	b9e6      	cbnz	r6, 1ae7e <net_if_ipv6_prefix_lookup+0x82>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1ae44:	3401      	adds	r4, #1
   1ae46:	2c01      	cmp	r4, #1
   1ae48:	dc22      	bgt.n	1ae90 <net_if_ipv6_prefix_lookup+0x94>
		if (!iface->ipv6.prefix[i].is_used) {
   1ae4a:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1ae4e:	0093      	lsls	r3, r2, #2
   1ae50:	442b      	add	r3, r5
   1ae52:	f893 6222 	ldrb.w	r6, [r3, #546]	; 0x222
   1ae56:	2e00      	cmp	r6, #0
   1ae58:	d0f4      	beq.n	1ae44 <net_if_ipv6_prefix_lookup+0x48>
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1ae5a:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1ae5e:	0093      	lsls	r3, r2, #2
   1ae60:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1ae64:	442b      	add	r3, r5
   1ae66:	f103 0910 	add.w	r9, r3, #16
	u8_t bits = 128 - length;
   1ae6a:	f1c7 0380 	rsb	r3, r7, #128	; 0x80
	u8_t bytes = length / 8;
   1ae6e:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
	u8_t remain = bits % 8;
   1ae72:	f003 0b07 	and.w	fp, r3, #7
	if (length > 128) {
   1ae76:	2f80      	cmp	r7, #128	; 0x80
   1ae78:	d9c7      	bls.n	1ae0a <net_if_ipv6_prefix_lookup+0xe>
		return false;
   1ae7a:	2600      	movs	r6, #0
   1ae7c:	e7e1      	b.n	1ae42 <net_if_ipv6_prefix_lookup+0x46>
			return &iface->ipv6.prefix[i];
   1ae7e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
   1ae82:	00a3      	lsls	r3, r4, #2
   1ae84:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
   1ae88:	4428      	add	r0, r5
   1ae8a:	3010      	adds	r0, #16
   1ae8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return NULL;
   1ae90:	2000      	movs	r0, #0
}
   1ae92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0001ae98 <net_if_ipv6_addr_onlink>:
{
   1ae98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae9c:	4606      	mov	r6, r0
   1ae9e:	4688      	mov	r8, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1aea0:	4d2d      	ldr	r5, [pc, #180]	; (1af58 <net_if_ipv6_addr_onlink+0xc0>)
   1aea2:	e048      	b.n	1af36 <net_if_ipv6_addr_onlink+0x9e>
	if (memcmp(addr1, addr2, bytes)) {
   1aea4:	465a      	mov	r2, fp
   1aea6:	4641      	mov	r1, r8
   1aea8:	4648      	mov	r0, r9
   1aeaa:	f00e fb81 	bl	295b0 <memcmp>
   1aeae:	b9a8      	cbnz	r0, 1aedc <net_if_ipv6_addr_onlink+0x44>
	if (!remain) {
   1aeb0:	f1ba 0f00 	cmp.w	sl, #0
   1aeb4:	d013      	beq.n	1aede <net_if_ipv6_addr_onlink+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1aeb6:	f1ca 0208 	rsb	r2, sl, #8
   1aeba:	23ff      	movs	r3, #255	; 0xff
   1aebc:	4093      	lsls	r3, r2
   1aebe:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1aec2:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1aec6:	f819 300b 	ldrb.w	r3, [r9, fp]
   1aeca:	f818 200b 	ldrb.w	r2, [r8, fp]
   1aece:	4053      	eors	r3, r2
   1aed0:	ea1a 0f03 	tst.w	sl, r3
   1aed4:	bf0c      	ite	eq
   1aed6:	2701      	moveq	r7, #1
   1aed8:	2700      	movne	r7, #0
   1aeda:	e000      	b.n	1aede <net_if_ipv6_addr_onlink+0x46>
		return false;
   1aedc:	2700      	movs	r7, #0
			if (tmp->ipv6.prefix[i].is_used &&
   1aede:	bb0f      	cbnz	r7, 1af24 <net_if_ipv6_addr_onlink+0x8c>
		for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1aee0:	3401      	adds	r4, #1
   1aee2:	2c01      	cmp	r4, #1
   1aee4:	dc25      	bgt.n	1af32 <net_if_ipv6_addr_onlink+0x9a>
			if (tmp->ipv6.prefix[i].is_used &&
   1aee6:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1aeea:	0093      	lsls	r3, r2, #2
   1aeec:	442b      	add	r3, r5
   1aeee:	f893 7222 	ldrb.w	r7, [r3, #546]	; 0x222
   1aef2:	2f00      	cmp	r7, #0
   1aef4:	d0f4      	beq.n	1aee0 <net_if_ipv6_addr_onlink+0x48>
			    net_is_ipv6_prefix(tmp->ipv6.prefix[i].prefix.
   1aef6:	0122      	lsls	r2, r4, #4
   1aef8:	1b11      	subs	r1, r2, r4
   1aefa:	008b      	lsls	r3, r1, #2
   1aefc:	4619      	mov	r1, r3
   1aefe:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1af02:	442b      	add	r3, r5
   1af04:	f103 0910 	add.w	r9, r3, #16
   1af08:	460a      	mov	r2, r1
   1af0a:	442a      	add	r2, r5
   1af0c:	f892 3220 	ldrb.w	r3, [r2, #544]	; 0x220
	u8_t bits = 128 - length;
   1af10:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   1af14:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   1af18:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   1af1c:	2b80      	cmp	r3, #128	; 0x80
   1af1e:	d9c1      	bls.n	1aea4 <net_if_ipv6_addr_onlink+0xc>
		return false;
   1af20:	2700      	movs	r7, #0
   1af22:	e7dc      	b.n	1aede <net_if_ipv6_addr_onlink+0x46>
				if (iface) {
   1af24:	b1a6      	cbz	r6, 1af50 <net_if_ipv6_addr_onlink+0xb8>
					*iface = tmp;
   1af26:	6035      	str	r5, [r6, #0]
   1af28:	e012      	b.n	1af50 <net_if_ipv6_addr_onlink+0xb8>
   1af2a:	2400      	movs	r4, #0
   1af2c:	e7d9      	b.n	1aee2 <net_if_ipv6_addr_onlink+0x4a>
   1af2e:	2400      	movs	r4, #0
   1af30:	e7d7      	b.n	1aee2 <net_if_ipv6_addr_onlink+0x4a>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1af32:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1af36:	4b09      	ldr	r3, [pc, #36]	; (1af5c <net_if_ipv6_addr_onlink+0xc4>)
   1af38:	429d      	cmp	r5, r3
   1af3a:	d008      	beq.n	1af4e <net_if_ipv6_addr_onlink+0xb6>
		if (iface && *iface && *iface != tmp) {
   1af3c:	2e00      	cmp	r6, #0
   1af3e:	d0f4      	beq.n	1af2a <net_if_ipv6_addr_onlink+0x92>
   1af40:	6833      	ldr	r3, [r6, #0]
   1af42:	2b00      	cmp	r3, #0
   1af44:	d0f3      	beq.n	1af2e <net_if_ipv6_addr_onlink+0x96>
   1af46:	429d      	cmp	r5, r3
   1af48:	d1f3      	bne.n	1af32 <net_if_ipv6_addr_onlink+0x9a>
   1af4a:	2400      	movs	r4, #0
   1af4c:	e7c9      	b.n	1aee2 <net_if_ipv6_addr_onlink+0x4a>
	return false;
   1af4e:	2700      	movs	r7, #0
}
   1af50:	4638      	mov	r0, r7
   1af52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af56:	bf00      	nop
   1af58:	2000d0c0 	.word	0x2000d0c0
   1af5c:	2000d360 	.word	0x2000d360

0001af60 <net_if_ipv6_prefix_set_timer>:
{
   1af60:	b508      	push	{r3, lr}
	u32_t timeout = lifetime * MSEC_PER_SEC;
   1af62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1af66:	fb02 f201 	mul.w	r2, r2, r1
	if (lifetime > (0xfffffffe / MSEC_PER_SEC)) {
   1af6a:	4b05      	ldr	r3, [pc, #20]	; (1af80 <net_if_ipv6_prefix_set_timer+0x20>)
   1af6c:	4299      	cmp	r1, r3
   1af6e:	d901      	bls.n	1af74 <net_if_ipv6_prefix_set_timer+0x14>
		timeout = 0xfffffffe;
   1af70:	f06f 0201 	mvn.w	r2, #1
   1af74:	4601      	mov	r1, r0
   1af76:	4803      	ldr	r0, [pc, #12]	; (1af84 <net_if_ipv6_prefix_set_timer+0x24>)
   1af78:	f00e fa24 	bl	293c4 <k_delayed_work_submit_to_queue>
   1af7c:	bd08      	pop	{r3, pc}
   1af7e:	bf00      	nop
   1af80:	00418937 	.word	0x00418937
   1af84:	20002a70 	.word	0x20002a70

0001af88 <net_if_ipv6_prefix_unset_timer>:
{
   1af88:	b508      	push	{r3, lr}
	if (!prefix->is_used) {
   1af8a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1af8e:	b903      	cbnz	r3, 1af92 <net_if_ipv6_prefix_unset_timer+0xa>
   1af90:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&prefix->lifetime);
   1af92:	f00e f9bd 	bl	29310 <k_delayed_work_cancel>
   1af96:	e7fb      	b.n	1af90 <net_if_ipv6_prefix_unset_timer+0x8>

0001af98 <net_if_ipv6_prefix_rm>:
{
   1af98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af9c:	4606      	mov	r6, r0
   1af9e:	460f      	mov	r7, r1
   1afa0:	4690      	mov	r8, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1afa2:	2400      	movs	r4, #0
   1afa4:	e000      	b.n	1afa8 <net_if_ipv6_prefix_rm+0x10>
   1afa6:	3401      	adds	r4, #1
   1afa8:	2c01      	cmp	r4, #1
   1afaa:	dc2f      	bgt.n	1b00c <net_if_ipv6_prefix_rm+0x74>
		if (!iface->ipv6.prefix[i].is_used) {
   1afac:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1afb0:	0093      	lsls	r3, r2, #2
   1afb2:	461a      	mov	r2, r3
   1afb4:	4433      	add	r3, r6
   1afb6:	f893 5222 	ldrb.w	r5, [r3, #546]	; 0x222
   1afba:	2d00      	cmp	r5, #0
   1afbc:	d0f3      	beq.n	1afa6 <net_if_ipv6_prefix_rm+0xe>
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1afbe:	f502 7000 	add.w	r0, r2, #512	; 0x200
   1afc2:	4430      	add	r0, r6
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1afc4:	2210      	movs	r2, #16
   1afc6:	4639      	mov	r1, r7
   1afc8:	4410      	add	r0, r2
   1afca:	f00e faf1 	bl	295b0 <memcmp>
   1afce:	2800      	cmp	r0, #0
   1afd0:	d1e9      	bne.n	1afa6 <net_if_ipv6_prefix_rm+0xe>
		    iface->ipv6.prefix[i].len != len) {
   1afd2:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1afd6:	0093      	lsls	r3, r2, #2
   1afd8:	4433      	add	r3, r6
   1afda:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1afde:	4543      	cmp	r3, r8
   1afe0:	d1e1      	bne.n	1afa6 <net_if_ipv6_prefix_rm+0xe>
		net_if_ipv6_prefix_unset_timer(&iface->ipv6.prefix[i]);
   1afe2:	0127      	lsls	r7, r4, #4
   1afe4:	1b3a      	subs	r2, r7, r4
   1afe6:	0093      	lsls	r3, r2, #2
   1afe8:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   1afec:	18f0      	adds	r0, r6, r3
   1afee:	3010      	adds	r0, #16
   1aff0:	f7ff ffca 	bl	1af88 <net_if_ipv6_prefix_unset_timer>
		iface->ipv6.prefix[i].is_used = false;
   1aff4:	1b3c      	subs	r4, r7, r4
   1aff6:	00a3      	lsls	r3, r4, #2
   1aff8:	4433      	add	r3, r6
   1affa:	2200      	movs	r2, #0
   1affc:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
   1b000:	4613      	mov	r3, r2
   1b002:	4631      	mov	r1, r6
   1b004:	4803      	ldr	r0, [pc, #12]	; (1b014 <net_if_ipv6_prefix_rm+0x7c>)
   1b006:	f007 fa2b 	bl	22460 <net_mgmt_event_notify_with_info>
		return true;
   1b00a:	e000      	b.n	1b00e <net_if_ipv6_prefix_rm+0x76>
	return false;
   1b00c:	2500      	movs	r5, #0
}
   1b00e:	4628      	mov	r0, r5
   1b010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b014:	f0600006 	.word	0xf0600006

0001b018 <net_if_ipv6_router_lookup>:
{
   1b018:	b570      	push	{r4, r5, r6, lr}
   1b01a:	4605      	mov	r5, r0
   1b01c:	460e      	mov	r6, r1
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b01e:	2400      	movs	r4, #0
   1b020:	2c00      	cmp	r4, #0
   1b022:	dd01      	ble.n	1b028 <net_if_ipv6_router_lookup+0x10>
	return NULL;
   1b024:	2000      	movs	r0, #0
}
   1b026:	bd70      	pop	{r4, r5, r6, pc}
		if (!routers[i].is_used ||
   1b028:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1b02c:	009a      	lsls	r2, r3, #2
   1b02e:	4b11      	ldr	r3, [pc, #68]	; (1b074 <net_if_ipv6_router_lookup+0x5c>)
   1b030:	4413      	add	r3, r2
   1b032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1b036:	b123      	cbz	r3, 1b042 <net_if_ipv6_router_lookup+0x2a>
		    routers[i].address.family != AF_INET6 ||
   1b038:	4b0e      	ldr	r3, [pc, #56]	; (1b074 <net_if_ipv6_router_lookup+0x5c>)
   1b03a:	4413      	add	r3, r2
   1b03c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
		if (!routers[i].is_used ||
   1b03e:	2b0a      	cmp	r3, #10
   1b040:	d001      	beq.n	1b046 <net_if_ipv6_router_lookup+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b042:	3401      	adds	r4, #1
   1b044:	e7ec      	b.n	1b020 <net_if_ipv6_router_lookup+0x8>
		    routers[i].iface != iface) {
   1b046:	4b0b      	ldr	r3, [pc, #44]	; (1b074 <net_if_ipv6_router_lookup+0x5c>)
   1b048:	4413      	add	r3, r2
   1b04a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		    routers[i].address.family != AF_INET6 ||
   1b04c:	42ab      	cmp	r3, r5
   1b04e:	d1f8      	bne.n	1b042 <net_if_ipv6_router_lookup+0x2a>
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
   1b050:	eb04 1204 	add.w	r2, r4, r4, lsl #4
   1b054:	0093      	lsls	r3, r2, #2
   1b056:	3328      	adds	r3, #40	; 0x28
   1b058:	4a06      	ldr	r2, [pc, #24]	; (1b074 <net_if_ipv6_router_lookup+0x5c>)
   1b05a:	4413      	add	r3, r2
   1b05c:	2210      	movs	r2, #16
   1b05e:	4631      	mov	r1, r6
   1b060:	1d18      	adds	r0, r3, #4
   1b062:	f00e faa5 	bl	295b0 <memcmp>
   1b066:	2800      	cmp	r0, #0
   1b068:	d1eb      	bne.n	1b042 <net_if_ipv6_router_lookup+0x2a>
			return &routers[i];
   1b06a:	2344      	movs	r3, #68	; 0x44
   1b06c:	4801      	ldr	r0, [pc, #4]	; (1b074 <net_if_ipv6_router_lookup+0x5c>)
   1b06e:	fb03 0004 	mla	r0, r3, r4, r0
   1b072:	bd70      	pop	{r4, r5, r6, pc}
   1b074:	20001a5c 	.word	0x20001a5c

0001b078 <net_if_ipv6_router_find_default>:
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b078:	2300      	movs	r3, #0
   1b07a:	2b00      	cmp	r3, #0
   1b07c:	dd01      	ble.n	1b082 <net_if_ipv6_router_find_default+0xa>
	return NULL;
   1b07e:	2000      	movs	r0, #0
}
   1b080:	4770      	bx	lr
		if (!routers[i].is_used ||
   1b082:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   1b086:	0091      	lsls	r1, r2, #2
   1b088:	4a0e      	ldr	r2, [pc, #56]	; (1b0c4 <net_if_ipv6_router_find_default+0x4c>)
   1b08a:	440a      	add	r2, r1
   1b08c:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
   1b090:	b14a      	cbz	r2, 1b0a6 <net_if_ipv6_router_find_default+0x2e>
		    !routers[i].is_default ||
   1b092:	4a0c      	ldr	r2, [pc, #48]	; (1b0c4 <net_if_ipv6_router_find_default+0x4c>)
   1b094:	440a      	add	r2, r1
   1b096:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
		if (!routers[i].is_used ||
   1b09a:	b122      	cbz	r2, 1b0a6 <net_if_ipv6_router_find_default+0x2e>
		    routers[i].address.family != AF_INET6) {
   1b09c:	4a09      	ldr	r2, [pc, #36]	; (1b0c4 <net_if_ipv6_router_find_default+0x4c>)
   1b09e:	440a      	add	r2, r1
   1b0a0:	8d12      	ldrh	r2, [r2, #40]	; 0x28
		    !routers[i].is_default ||
   1b0a2:	2a0a      	cmp	r2, #10
   1b0a4:	d001      	beq.n	1b0aa <net_if_ipv6_router_find_default+0x32>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b0a6:	3301      	adds	r3, #1
   1b0a8:	e7e7      	b.n	1b07a <net_if_ipv6_router_find_default+0x2>
		if (iface && iface != routers[i].iface) {
   1b0aa:	b120      	cbz	r0, 1b0b6 <net_if_ipv6_router_find_default+0x3e>
   1b0ac:	4a05      	ldr	r2, [pc, #20]	; (1b0c4 <net_if_ipv6_router_find_default+0x4c>)
   1b0ae:	440a      	add	r2, r1
   1b0b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
   1b0b2:	4290      	cmp	r0, r2
   1b0b4:	d1f7      	bne.n	1b0a6 <net_if_ipv6_router_find_default+0x2e>
		return &routers[i];
   1b0b6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1b0ba:	009a      	lsls	r2, r3, #2
   1b0bc:	4801      	ldr	r0, [pc, #4]	; (1b0c4 <net_if_ipv6_router_find_default+0x4c>)
   1b0be:	4410      	add	r0, r2
   1b0c0:	4770      	bx	lr
   1b0c2:	bf00      	nop
   1b0c4:	20001a5c 	.word	0x20001a5c

0001b0c8 <net_if_ipv6_router_update_lifetime>:
}

void net_if_ipv6_router_update_lifetime(struct net_if_router *router,
					u32_t lifetime)
{
   1b0c8:	b508      	push	{r3, lr}
   1b0ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b0ce:	fb02 f201 	mul.w	r2, r2, r1
   1b0d2:	4601      	mov	r1, r0
   1b0d4:	4801      	ldr	r0, [pc, #4]	; (1b0dc <net_if_ipv6_router_update_lifetime+0x14>)
   1b0d6:	f00e f975 	bl	293c4 <k_delayed_work_submit_to_queue>
   1b0da:	bd08      	pop	{r3, pc}
   1b0dc:	20002a70 	.word	0x20002a70

0001b0e0 <net_if_ipv6_router_add>:
}

struct net_if_router *net_if_ipv6_router_add(struct net_if *iface,
					     struct in6_addr *addr,
					     u16_t lifetime)
{
   1b0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b0e4:	b084      	sub	sp, #16
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b0e6:	2300      	movs	r3, #0
   1b0e8:	2b00      	cmp	r3, #0
   1b0ea:	dd04      	ble.n	1b0f6 <net_if_ipv6_router_add+0x16>
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_ADD, iface);

		return &routers[i];
	}

	return NULL;
   1b0ec:	2400      	movs	r4, #0
}
   1b0ee:	4620      	mov	r0, r4
   1b0f0:	b004      	add	sp, #16
   1b0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (routers[i].is_used) {
   1b0f6:	eb03 1403 	add.w	r4, r3, r3, lsl #4
   1b0fa:	00a5      	lsls	r5, r4, #2
   1b0fc:	4c20      	ldr	r4, [pc, #128]	; (1b180 <net_if_ipv6_router_add+0xa0>)
   1b0fe:	442c      	add	r4, r5
   1b100:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
   1b104:	b10c      	cbz	r4, 1b10a <net_if_ipv6_router_add+0x2a>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b106:	3301      	adds	r3, #1
   1b108:	e7ee      	b.n	1b0e8 <net_if_ipv6_router_add+0x8>
   1b10a:	4616      	mov	r6, r2
   1b10c:	460f      	mov	r7, r1
   1b10e:	4680      	mov	r8, r0
		net_if_router_init(&routers[i], iface, addr, lifetime);
   1b110:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1b114:	009a      	lsls	r2, r3, #2
   1b116:	4c1a      	ldr	r4, [pc, #104]	; (1b180 <net_if_ipv6_router_add+0xa0>)
   1b118:	4414      	add	r4, r2
	router->is_used = true;
   1b11a:	2301      	movs	r3, #1
   1b11c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	router->iface = iface;
   1b120:	63e0      	str	r0, [r4, #60]	; 0x3c
	router->address.family = AF_INET6;
   1b122:	230a      	movs	r3, #10
   1b124:	8523      	strh	r3, [r4, #40]	; 0x28
	net_ipaddr_copy(&router->address.in6_addr, addr);
   1b126:	466d      	mov	r5, sp
   1b128:	6808      	ldr	r0, [r1, #0]
   1b12a:	6849      	ldr	r1, [r1, #4]
   1b12c:	68ba      	ldr	r2, [r7, #8]
   1b12e:	68fb      	ldr	r3, [r7, #12]
   1b130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1b132:	466d      	mov	r5, sp
   1b134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b136:	62e0      	str	r0, [r4, #44]	; 0x2c
   1b138:	6321      	str	r1, [r4, #48]	; 0x30
   1b13a:	6362      	str	r2, [r4, #52]	; 0x34
   1b13c:	63a3      	str	r3, [r4, #56]	; 0x38
	if (lifetime) {
   1b13e:	b966      	cbnz	r6, 1b15a <net_if_ipv6_router_add+0x7a>
		router->is_default = false;
   1b140:	2300      	movs	r3, #0
   1b142:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = true;
   1b146:	2301      	movs	r3, #1
   1b148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1b14c:	2300      	movs	r3, #0
   1b14e:	461a      	mov	r2, r3
   1b150:	4641      	mov	r1, r8
   1b152:	480c      	ldr	r0, [pc, #48]	; (1b184 <net_if_ipv6_router_add+0xa4>)
   1b154:	f007 f984 	bl	22460 <net_mgmt_event_notify_with_info>
		return &routers[i];
   1b158:	e7c9      	b.n	1b0ee <net_if_ipv6_router_add+0xe>
		router->is_default = true;
   1b15a:	2301      	movs	r3, #1
   1b15c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = false;
   1b160:	2300      	movs	r3, #0
   1b162:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   1b166:	4908      	ldr	r1, [pc, #32]	; (1b188 <net_if_ipv6_router_add+0xa8>)
   1b168:	4620      	mov	r0, r4
   1b16a:	f00e f8b3 	bl	292d4 <k_delayed_work_init>
   1b16e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b172:	fb02 f206 	mul.w	r2, r2, r6
   1b176:	4621      	mov	r1, r4
   1b178:	4804      	ldr	r0, [pc, #16]	; (1b18c <net_if_ipv6_router_add+0xac>)
   1b17a:	f00e f923 	bl	293c4 <k_delayed_work_submit_to_queue>
   1b17e:	e7e5      	b.n	1b14c <net_if_ipv6_router_add+0x6c>
   1b180:	20001a5c 	.word	0x20001a5c
   1b184:	f0600009 	.word	0xf0600009
   1b188:	0001a55d 	.word	0x0001a55d
   1b18c:	20002a70 	.word	0x20002a70

0001b190 <net_if_ipv6_router_rm>:

bool net_if_ipv6_router_rm(struct net_if_router *router)
{
   1b190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b194:	2400      	movs	r4, #0
   1b196:	2c00      	cmp	r4, #0
   1b198:	dd03      	ble.n	1b1a2 <net_if_ipv6_router_rm+0x12>
			i, net_sprint_ipv6_addr(&routers[i].address.in6_addr));

		return true;
	}

	return false;
   1b19a:	2500      	movs	r5, #0
}
   1b19c:	4628      	mov	r0, r5
   1b19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!routers[i].is_used) {
   1b1a2:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1b1a6:	009a      	lsls	r2, r3, #2
   1b1a8:	4b0d      	ldr	r3, [pc, #52]	; (1b1e0 <net_if_ipv6_router_rm+0x50>)
   1b1aa:	4413      	add	r3, r2
   1b1ac:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
   1b1b0:	b11d      	cbz	r5, 1b1ba <net_if_ipv6_router_rm+0x2a>
		if (&routers[i] != router) {
   1b1b2:	4b0b      	ldr	r3, [pc, #44]	; (1b1e0 <net_if_ipv6_router_rm+0x50>)
   1b1b4:	4413      	add	r3, r2
   1b1b6:	4283      	cmp	r3, r0
   1b1b8:	d001      	beq.n	1b1be <net_if_ipv6_router_rm+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b1ba:	3401      	adds	r4, #1
   1b1bc:	e7eb      	b.n	1b196 <net_if_ipv6_router_rm+0x6>
		k_delayed_work_cancel(&routers[i].lifetime);
   1b1be:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1b1e0 <net_if_ipv6_router_rm+0x50>
   1b1c2:	4617      	mov	r7, r2
   1b1c4:	4447      	add	r7, r8
   1b1c6:	4638      	mov	r0, r7
   1b1c8:	f00e f8a2 	bl	29310 <k_delayed_work_cancel>
		routers[i].is_used = false;
   1b1cc:	2200      	movs	r2, #0
   1b1ce:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
   1b1d2:	4613      	mov	r3, r2
   1b1d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1b1d6:	4803      	ldr	r0, [pc, #12]	; (1b1e4 <net_if_ipv6_router_rm+0x54>)
   1b1d8:	f007 f942 	bl	22460 <net_mgmt_event_notify_with_info>
		return true;
   1b1dc:	e7de      	b.n	1b19c <net_if_ipv6_router_rm+0xc>
   1b1de:	bf00      	nop
   1b1e0:	20001a5c 	.word	0x20001a5c
   1b1e4:	f060000a 	.word	0xf060000a

0001b1e8 <net_if_ipv6_get_ll>:

struct in6_addr *net_if_ipv6_get_ll(struct net_if *iface,
				    enum net_addr_state addr_state)
{
   1b1e8:	b430      	push	{r4, r5}
   1b1ea:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b1ec:	2300      	movs	r3, #0
   1b1ee:	e006      	b.n	1b1fe <net_if_ipv6_get_ll+0x16>
		if (!iface->ipv6.unicast[i].is_used ||
		    (addr_state != NET_ADDR_ANY_STATE &&
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1b1f0:	226c      	movs	r2, #108	; 0x6c
   1b1f2:	fb02 4203 	mla	r2, r2, r3, r4
   1b1f6:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1b1f8:	2a0a      	cmp	r2, #10
   1b1fa:	d014      	beq.n	1b226 <net_if_ipv6_get_ll+0x3e>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b1fc:	3301      	adds	r3, #1
   1b1fe:	2b02      	cmp	r3, #2
   1b200:	dc1d      	bgt.n	1b23e <net_if_ipv6_get_ll+0x56>
		if (!iface->ipv6.unicast[i].is_used ||
   1b202:	226c      	movs	r2, #108	; 0x6c
   1b204:	fb02 4203 	mla	r2, r2, r3, r4
   1b208:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1b20c:	2a00      	cmp	r2, #0
   1b20e:	d0f5      	beq.n	1b1fc <net_if_ipv6_get_ll+0x14>
   1b210:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1b214:	d0ec      	beq.n	1b1f0 <net_if_ipv6_get_ll+0x8>
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1b216:	226c      	movs	r2, #108	; 0x6c
   1b218:	fb02 4203 	mla	r2, r2, r3, r4
   1b21c:	f992 2091 	ldrsb.w	r2, [r2, #145]	; 0x91
		    (addr_state != NET_ADDR_ANY_STATE &&
   1b220:	4291      	cmp	r1, r2
   1b222:	d1eb      	bne.n	1b1fc <net_if_ipv6_get_ll+0x14>
   1b224:	e7e4      	b.n	1b1f0 <net_if_ipv6_get_ll+0x8>
			continue;
		}
		if (net_is_ipv6_ll_addr(&iface->ipv6.unicast[i].address.in6_addr)) {
   1b226:	206c      	movs	r0, #108	; 0x6c
   1b228:	fb00 f003 	mul.w	r0, r0, r3
   1b22c:	3020      	adds	r0, #32
   1b22e:	4420      	add	r0, r4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1b230:	f830 5f10 	ldrh.w	r5, [r0, #16]!
   1b234:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1b238:	4295      	cmp	r5, r2
   1b23a:	d1df      	bne.n	1b1fc <net_if_ipv6_get_ll+0x14>
   1b23c:	e000      	b.n	1b240 <net_if_ipv6_get_ll+0x58>
			return &iface->ipv6.unicast[i].address.in6_addr;
		}
	}

	return NULL;
   1b23e:	2000      	movs	r0, #0
}
   1b240:	bc30      	pop	{r4, r5}
   1b242:	4770      	bx	lr

0001b244 <net_if_ipv6_select_src_addr>:
	return src;
}

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
						   struct in6_addr *dst)
{
   1b244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b248:	4607      	mov	r7, r0
   1b24a:	880a      	ldrh	r2, [r1, #0]
	struct in6_addr *src = NULL;
	u8_t best_match = 0;
	struct net_if *iface;

	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   1b24c:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1b250:	429a      	cmp	r2, r3
   1b252:	f000 80d7 	beq.w	1b404 <net_if_ipv6_select_src_addr+0x1c0>
	return addr->s6_addr[0] == 0xFF;
   1b256:	780b      	ldrb	r3, [r1, #0]
   1b258:	2bff      	cmp	r3, #255	; 0xff
   1b25a:	d004      	beq.n	1b266 <net_if_ipv6_select_src_addr+0x22>
	u8_t best_match = 0;
   1b25c:	f04f 0900 	mov.w	r9, #0
   1b260:	4e74      	ldr	r6, [pc, #464]	; (1b434 <net_if_ipv6_select_src_addr+0x1f0>)
   1b262:	46c8      	mov	r8, r9
   1b264:	e05b      	b.n	1b31e <net_if_ipv6_select_src_addr+0xda>
   1b266:	4c73      	ldr	r4, [pc, #460]	; (1b434 <net_if_ipv6_select_src_addr+0x1f0>)
   1b268:	e0c0      	b.n	1b3ec <net_if_ipv6_select_src_addr+0x1a8>
	    addr->address.family == AF_INET6 &&
   1b26a:	246c      	movs	r4, #108	; 0x6c
   1b26c:	fb04 640e 	mla	r4, r4, lr, r6
   1b270:	8da4      	ldrh	r4, [r4, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1b272:	2c0a      	cmp	r4, #10
   1b274:	d01e      	beq.n	1b2b4 <net_if_ipv6_select_src_addr+0x70>
	return false;
   1b276:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b278:	bb8b      	cbnz	r3, 1b2de <net_if_ipv6_select_src_addr+0x9a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b27a:	f10e 0e01 	add.w	lr, lr, #1
   1b27e:	fa5f fe8e 	uxtb.w	lr, lr
   1b282:	f1be 0f02 	cmp.w	lr, #2
   1b286:	d846      	bhi.n	1b316 <net_if_ipv6_select_src_addr+0xd2>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b288:	46f4      	mov	ip, lr
   1b28a:	236c      	movs	r3, #108	; 0x6c
   1b28c:	fb03 f30e 	mul.w	r3, r3, lr
   1b290:	f103 0220 	add.w	r2, r3, #32
   1b294:	4432      	add	r2, r6
   1b296:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1b298:	4433      	add	r3, r6
   1b29a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b29e:	2b00      	cmp	r3, #0
   1b2a0:	d0ea      	beq.n	1b278 <net_if_ipv6_select_src_addr+0x34>
   1b2a2:	246c      	movs	r4, #108	; 0x6c
   1b2a4:	fb04 640e 	mla	r4, r4, lr, r6
   1b2a8:	f994 4091 	ldrsb.w	r4, [r4, #145]	; 0x91
   1b2ac:	2c01      	cmp	r4, #1
   1b2ae:	d0dc      	beq.n	1b26a <net_if_ipv6_select_src_addr+0x26>
	return false;
   1b2b0:	2300      	movs	r3, #0
   1b2b2:	e7e1      	b.n	1b278 <net_if_ipv6_select_src_addr+0x34>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1b2b4:	8894      	ldrh	r4, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1b2b6:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1b2ba:	4294      	cmp	r4, r2
   1b2bc:	d1dc      	bne.n	1b278 <net_if_ipv6_select_src_addr+0x34>
	return false;
   1b2be:	2300      	movs	r3, #0
   1b2c0:	e7da      	b.n	1b278 <net_if_ipv6_select_src_addr+0x34>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1b2c2:	4055      	eors	r5, r2
			for (k = 0; k < 8; k++) {
   1b2c4:	2300      	movs	r3, #0
   1b2c6:	2b07      	cmp	r3, #7
   1b2c8:	d81b      	bhi.n	1b302 <net_if_ipv6_select_src_addr+0xbe>
				if (!(xor & 0x80)) {
   1b2ca:	f015 0f80 	tst.w	r5, #128	; 0x80
   1b2ce:	d118      	bne.n	1b302 <net_if_ipv6_select_src_addr+0xbe>
					len++;
   1b2d0:	3401      	adds	r4, #1
   1b2d2:	b2e4      	uxtb	r4, r4
					xor <<= 1;
   1b2d4:	006d      	lsls	r5, r5, #1
   1b2d6:	b2ed      	uxtb	r5, r5
			for (k = 0; k < 8; k++) {
   1b2d8:	3301      	adds	r3, #1
   1b2da:	b2db      	uxtb	r3, r3
   1b2dc:	e7f3      	b.n	1b2c6 <net_if_ipv6_select_src_addr+0x82>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b2de:	2400      	movs	r4, #0
   1b2e0:	4623      	mov	r3, r4
	for (j = 0; j < 16; j++) {
   1b2e2:	2b0f      	cmp	r3, #15
   1b2e4:	d80d      	bhi.n	1b302 <net_if_ipv6_select_src_addr+0xbe>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1b2e6:	5ccd      	ldrb	r5, [r1, r3]
   1b2e8:	226c      	movs	r2, #108	; 0x6c
   1b2ea:	fb02 620c 	mla	r2, r2, ip, r6
   1b2ee:	441a      	add	r2, r3
   1b2f0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1b2f4:	4295      	cmp	r5, r2
   1b2f6:	d1e4      	bne.n	1b2c2 <net_if_ipv6_select_src_addr+0x7e>
			len += 8;
   1b2f8:	3408      	adds	r4, #8
   1b2fa:	b2e4      	uxtb	r4, r4
	for (j = 0; j < 16; j++) {
   1b2fc:	3301      	adds	r3, #1
   1b2fe:	b2db      	uxtb	r3, r3
   1b300:	e7ef      	b.n	1b2e2 <net_if_ipv6_select_src_addr+0x9e>
		if (len >= *best_so_far) {
   1b302:	454c      	cmp	r4, r9
   1b304:	d3b9      	bcc.n	1b27a <net_if_ipv6_select_src_addr+0x36>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1b306:	206c      	movs	r0, #108	; 0x6c
   1b308:	fb00 f00c 	mul.w	r0, r0, ip
   1b30c:	3020      	adds	r0, #32
   1b30e:	4430      	add	r0, r6
   1b310:	3010      	adds	r0, #16
			*best_so_far = len;
   1b312:	46a1      	mov	r9, r4
   1b314:	e7b1      	b.n	1b27a <net_if_ipv6_select_src_addr+0x36>
		     iface++) {
			struct in6_addr *addr;

			addr = net_if_ipv6_get_best_match(iface, dst,
							  &best_match);
			if (addr) {
   1b316:	b150      	cbz	r0, 1b32e <net_if_ipv6_select_src_addr+0xea>
		     iface++) {
   1b318:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
   1b31c:	4680      	mov	r8, r0
		for (iface = __net_if_start;
   1b31e:	b947      	cbnz	r7, 1b332 <net_if_ipv6_select_src_addr+0xee>
		     !dst_iface && iface != __net_if_end;
   1b320:	4b45      	ldr	r3, [pc, #276]	; (1b438 <net_if_ipv6_select_src_addr+0x1f4>)
   1b322:	429e      	cmp	r6, r3
   1b324:	d005      	beq.n	1b332 <net_if_ipv6_select_src_addr+0xee>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b326:	f04f 0e00 	mov.w	lr, #0
	struct in6_addr *src = NULL;
   1b32a:	4670      	mov	r0, lr
   1b32c:	e7a9      	b.n	1b282 <net_if_ipv6_select_src_addr+0x3e>
			if (addr) {
   1b32e:	4640      	mov	r0, r8
   1b330:	e7f2      	b.n	1b318 <net_if_ipv6_select_src_addr+0xd4>
				src = addr;
			}
		}

		/* If caller has supplied interface, then use that */
		if (dst_iface) {
   1b332:	2f00      	cmp	r7, #0
   1b334:	d073      	beq.n	1b41e <net_if_ipv6_select_src_addr+0x1da>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b336:	2500      	movs	r5, #0
	struct in6_addr *src = NULL;
   1b338:	46a8      	mov	r8, r5
   1b33a:	e009      	b.n	1b350 <net_if_ipv6_select_src_addr+0x10c>
	    addr->address.family == AF_INET6 &&
   1b33c:	206c      	movs	r0, #108	; 0x6c
   1b33e:	fb00 7005 	mla	r0, r0, r5, r7
   1b342:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1b344:	280a      	cmp	r0, #10
   1b346:	d01b      	beq.n	1b380 <net_if_ipv6_select_src_addr+0x13c>
	return false;
   1b348:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b34a:	bb73      	cbnz	r3, 1b3aa <net_if_ipv6_select_src_addr+0x166>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b34c:	3501      	adds	r5, #1
   1b34e:	b2ed      	uxtb	r5, r5
   1b350:	2d02      	cmp	r5, #2
   1b352:	d864      	bhi.n	1b41e <net_if_ipv6_select_src_addr+0x1da>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b354:	462e      	mov	r6, r5
   1b356:	236c      	movs	r3, #108	; 0x6c
   1b358:	fb03 f305 	mul.w	r3, r3, r5
   1b35c:	f103 0220 	add.w	r2, r3, #32
   1b360:	443a      	add	r2, r7
   1b362:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1b364:	443b      	add	r3, r7
   1b366:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b36a:	2b00      	cmp	r3, #0
   1b36c:	d0ed      	beq.n	1b34a <net_if_ipv6_select_src_addr+0x106>
   1b36e:	206c      	movs	r0, #108	; 0x6c
   1b370:	fb00 7005 	mla	r0, r0, r5, r7
   1b374:	f990 0091 	ldrsb.w	r0, [r0, #145]	; 0x91
   1b378:	2801      	cmp	r0, #1
   1b37a:	d0df      	beq.n	1b33c <net_if_ipv6_select_src_addr+0xf8>
	return false;
   1b37c:	2300      	movs	r3, #0
   1b37e:	e7e4      	b.n	1b34a <net_if_ipv6_select_src_addr+0x106>
   1b380:	8890      	ldrh	r0, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1b382:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1b386:	4290      	cmp	r0, r2
   1b388:	d1df      	bne.n	1b34a <net_if_ipv6_select_src_addr+0x106>
	return false;
   1b38a:	2300      	movs	r3, #0
   1b38c:	e7dd      	b.n	1b34a <net_if_ipv6_select_src_addr+0x106>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1b38e:	4054      	eors	r4, r2
			for (k = 0; k < 8; k++) {
   1b390:	2300      	movs	r3, #0
   1b392:	2b07      	cmp	r3, #7
   1b394:	d81b      	bhi.n	1b3ce <net_if_ipv6_select_src_addr+0x18a>
				if (!(xor & 0x80)) {
   1b396:	f014 0f80 	tst.w	r4, #128	; 0x80
   1b39a:	d118      	bne.n	1b3ce <net_if_ipv6_select_src_addr+0x18a>
					len++;
   1b39c:	3001      	adds	r0, #1
   1b39e:	b2c0      	uxtb	r0, r0
					xor <<= 1;
   1b3a0:	0064      	lsls	r4, r4, #1
   1b3a2:	b2e4      	uxtb	r4, r4
			for (k = 0; k < 8; k++) {
   1b3a4:	3301      	adds	r3, #1
   1b3a6:	b2db      	uxtb	r3, r3
   1b3a8:	e7f3      	b.n	1b392 <net_if_ipv6_select_src_addr+0x14e>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b3aa:	2000      	movs	r0, #0
   1b3ac:	4603      	mov	r3, r0
	for (j = 0; j < 16; j++) {
   1b3ae:	2b0f      	cmp	r3, #15
   1b3b0:	d80d      	bhi.n	1b3ce <net_if_ipv6_select_src_addr+0x18a>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1b3b2:	5ccc      	ldrb	r4, [r1, r3]
   1b3b4:	226c      	movs	r2, #108	; 0x6c
   1b3b6:	fb02 7206 	mla	r2, r2, r6, r7
   1b3ba:	441a      	add	r2, r3
   1b3bc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1b3c0:	4294      	cmp	r4, r2
   1b3c2:	d1e4      	bne.n	1b38e <net_if_ipv6_select_src_addr+0x14a>
			len += 8;
   1b3c4:	3008      	adds	r0, #8
   1b3c6:	b2c0      	uxtb	r0, r0
	for (j = 0; j < 16; j++) {
   1b3c8:	3301      	adds	r3, #1
   1b3ca:	b2db      	uxtb	r3, r3
   1b3cc:	e7ef      	b.n	1b3ae <net_if_ipv6_select_src_addr+0x16a>
		if (len >= *best_so_far) {
   1b3ce:	4548      	cmp	r0, r9
   1b3d0:	d3bc      	bcc.n	1b34c <net_if_ipv6_select_src_addr+0x108>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1b3d2:	f04f 086c 	mov.w	r8, #108	; 0x6c
   1b3d6:	fb08 f806 	mul.w	r8, r8, r6
   1b3da:	f108 0820 	add.w	r8, r8, #32
   1b3de:	44b8      	add	r8, r7
   1b3e0:	f108 0810 	add.w	r8, r8, #16
			*best_so_far = len;
   1b3e4:	4681      	mov	r9, r0
   1b3e6:	e7b1      	b.n	1b34c <net_if_ipv6_select_src_addr+0x108>
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
		     iface++) {
   1b3e8:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
		for (iface = __net_if_start;
   1b3ec:	b97f      	cbnz	r7, 1b40e <net_if_ipv6_select_src_addr+0x1ca>
		     !dst_iface && iface != __net_if_end;
   1b3ee:	4b12      	ldr	r3, [pc, #72]	; (1b438 <net_if_ipv6_select_src_addr+0x1f4>)
   1b3f0:	429c      	cmp	r4, r3
   1b3f2:	d009      	beq.n	1b408 <net_if_ipv6_select_src_addr+0x1c4>
			struct in6_addr *addr;

			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   1b3f4:	2101      	movs	r1, #1
   1b3f6:	4620      	mov	r0, r4
   1b3f8:	f7ff fef6 	bl	1b1e8 <net_if_ipv6_get_ll>
			if (addr) {
   1b3fc:	4680      	mov	r8, r0
   1b3fe:	2800      	cmp	r0, #0
   1b400:	d0f2      	beq.n	1b3e8 <net_if_ipv6_select_src_addr+0x1a4>
   1b402:	e006      	b.n	1b412 <net_if_ipv6_select_src_addr+0x1ce>
   1b404:	4c0b      	ldr	r4, [pc, #44]	; (1b434 <net_if_ipv6_select_src_addr+0x1f0>)
   1b406:	e7f1      	b.n	1b3ec <net_if_ipv6_select_src_addr+0x1a8>
	struct in6_addr *src = NULL;
   1b408:	f04f 0800 	mov.w	r8, #0
   1b40c:	e001      	b.n	1b412 <net_if_ipv6_select_src_addr+0x1ce>
   1b40e:	f04f 0800 	mov.w	r8, #0
				src = addr;
				break;
			}
		}

		if (dst_iface) {
   1b412:	b127      	cbz	r7, 1b41e <net_if_ipv6_select_src_addr+0x1da>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1b414:	2101      	movs	r1, #1
   1b416:	4638      	mov	r0, r7
   1b418:	f7ff fee6 	bl	1b1e8 <net_if_ipv6_get_ll>
   1b41c:	4680      	mov	r8, r0
		}
	}

	if (!src) {
   1b41e:	f1b8 0f00 	cmp.w	r8, #0
   1b422:	d002      	beq.n	1b42a <net_if_ipv6_select_src_addr+0x1e6>
		return net_ipv6_unspecified_address();
	}

	return src;
   1b424:	4640      	mov	r0, r8
}
   1b426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return net_ipv6_unspecified_address();
   1b42a:	f003 fd67 	bl	1eefc <net_ipv6_unspecified_address>
   1b42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b432:	bf00      	nop
   1b434:	2000d0c0 	.word	0x2000d0c0
   1b438:	2000d360 	.word	0x2000d360

0001b43c <net_if_ipv6_calc_reachable_time>:

u32_t net_if_ipv6_calc_reachable_time(struct net_if *iface)
{
   1b43c:	b510      	push	{r4, lr}
   1b43e:	4604      	mov	r4, r0
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
		sys_rand32_get() %
   1b440:	f7e6 fdb4 	bl	1fac <sys_rand32_get>
		(MAX_RANDOM_FACTOR * iface->ipv6.base_reachable_time -
   1b444:	f8d4 3288 	ldr.w	r3, [r4, #648]	; 0x288
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
   1b448:	fbb0 f2f3 	udiv	r2, r0, r3
		 MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time);
}
   1b44c:	fb03 0012 	mls	r0, r3, r2, r0
   1b450:	bd10      	pop	{r4, pc}
	...

0001b454 <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   1b454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b456:	4605      	mov	r5, r0
   1b458:	460e      	mov	r6, r1
   1b45a:	4617      	mov	r7, r2
	return list->head;
   1b45c:	4b11      	ldr	r3, [pc, #68]	; (1b4a4 <net_if_call_link_cb+0x50>)
   1b45e:	681b      	ldr	r3, [r3, #0]
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1b460:	b11b      	cbz	r3, 1b46a <net_if_call_link_cb+0x16>
   1b462:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b464:	b143      	cbz	r3, 1b478 <net_if_call_link_cb+0x24>
	return node->next;
   1b466:	681c      	ldr	r4, [r3, #0]
   1b468:	e006      	b.n	1b478 <net_if_call_link_cb+0x24>
   1b46a:	461c      	mov	r4, r3
   1b46c:	e004      	b.n	1b478 <net_if_call_link_cb+0x24>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b46e:	4623      	mov	r3, r4
   1b470:	e00e      	b.n	1b490 <net_if_call_link_cb+0x3c>
   1b472:	4622      	mov	r2, r4
   1b474:	4623      	mov	r3, r4
   1b476:	4614      	mov	r4, r2
   1b478:	b193      	cbz	r3, 1b4a0 <net_if_call_link_cb+0x4c>
		link->cb(iface, lladdr, status);
   1b47a:	685b      	ldr	r3, [r3, #4]
   1b47c:	463a      	mov	r2, r7
   1b47e:	4631      	mov	r1, r6
   1b480:	4628      	mov	r0, r5
   1b482:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1b484:	2c00      	cmp	r4, #0
   1b486:	d0f4      	beq.n	1b472 <net_if_call_link_cb+0x1e>
   1b488:	4622      	mov	r2, r4
   1b48a:	2c00      	cmp	r4, #0
   1b48c:	d0ef      	beq.n	1b46e <net_if_call_link_cb+0x1a>
	return node->next;
   1b48e:	6823      	ldr	r3, [r4, #0]
   1b490:	b113      	cbz	r3, 1b498 <net_if_call_link_cb+0x44>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b492:	b11a      	cbz	r2, 1b49c <net_if_call_link_cb+0x48>
	return node->next;
   1b494:	6822      	ldr	r2, [r4, #0]
   1b496:	e7ed      	b.n	1b474 <net_if_call_link_cb+0x20>
   1b498:	2200      	movs	r2, #0
   1b49a:	e7eb      	b.n	1b474 <net_if_call_link_cb+0x20>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b49c:	2200      	movs	r2, #0
   1b49e:	e7e9      	b.n	1b474 <net_if_call_link_cb+0x20>
	}
}
   1b4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b4a2:	bf00      	nop
   1b4a4:	20001a4c 	.word	0x20001a4c

0001b4a8 <net_if_send_data>:
{
   1b4a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4ac:	4606      	mov	r6, r0
   1b4ae:	460c      	mov	r4, r1
	return pkt->context;
   1b4b0:	68cf      	ldr	r7, [r1, #12]
	return &pkt->lladdr_src;
}

static inline struct net_linkaddr *net_pkt_ll_dst(struct net_pkt *pkt)
{
	return &pkt->lladdr_dst;
   1b4b2:	f101 0928 	add.w	r9, r1, #40	; 0x28
	return pkt->token;
   1b4b6:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1b4ba:	f3bf 8f5b 	dmb	ish
   1b4be:	68c3      	ldr	r3, [r0, #12]
   1b4c0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b4c4:	f013 0f01 	tst.w	r3, #1
   1b4c8:	d10a      	bne.n	1b4e0 <net_if_send_data+0x38>
		status = -ENETDOWN;
   1b4ca:	f06f 0872 	mvn.w	r8, #114	; 0x72
		verdict = NET_DROP;
   1b4ce:	2502      	movs	r5, #2
	if (context && verdict == NET_DROP) {
   1b4d0:	b10f      	cbz	r7, 1b4d6 <net_if_send_data+0x2e>
   1b4d2:	2d02      	cmp	r5, #2
   1b4d4:	d02e      	beq.n	1b534 <net_if_send_data+0x8c>
	if (verdict == NET_DROP && dst->addr) {
   1b4d6:	2d02      	cmp	r5, #2
   1b4d8:	d050      	beq.n	1b57c <net_if_send_data+0xd4>
}
   1b4da:	4628      	mov	r0, r5
   1b4dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4e0:	f3bf 8f5b 	dmb	ish
   1b4e4:	68c3      	ldr	r3, [r0, #12]
   1b4e6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1b4ea:	f013 0f02 	tst.w	r3, #2
   1b4ee:	d101      	bne.n	1b4f4 <net_if_send_data+0x4c>
	    !net_pkt_ll_src(pkt)->addr) {
   1b4f0:	6a0b      	ldr	r3, [r1, #32]
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1b4f2:	b173      	cbz	r3, 1b512 <net_if_send_data+0x6a>
	return pkt->family;
   1b4f4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1b4f8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1b4fc:	2b0a      	cmp	r3, #10
   1b4fe:	d00f      	beq.n	1b520 <net_if_send_data+0x78>
   1b500:	4621      	mov	r1, r4
	verdict = iface->l2->send(iface, pkt);
   1b502:	6873      	ldr	r3, [r6, #4]
   1b504:	685b      	ldr	r3, [r3, #4]
   1b506:	4630      	mov	r0, r6
   1b508:	4798      	blx	r3
   1b50a:	4605      	mov	r5, r0
	int status = -EIO;
   1b50c:	f06f 0804 	mvn.w	r8, #4
   1b510:	e7de      	b.n	1b4d0 <net_if_send_data+0x28>
	return net_if_get_link_addr(pkt->iface);
   1b512:	694b      	ldr	r3, [r1, #20]
		net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   1b514:	691a      	ldr	r2, [r3, #16]
   1b516:	620a      	str	r2, [r1, #32]
		net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   1b518:	7d1b      	ldrb	r3, [r3, #20]
   1b51a:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
   1b51e:	e7e9      	b.n	1b4f4 <net_if_send_data+0x4c>
		pkt = net_ipv6_prepare_for_send(pkt);
   1b520:	4620      	mov	r0, r4
   1b522:	f005 f9fb 	bl	2091c <net_ipv6_prepare_for_send>
		if (!pkt) {
   1b526:	4601      	mov	r1, r0
   1b528:	2800      	cmp	r0, #0
   1b52a:	d1ea      	bne.n	1b502 <net_if_send_data+0x5a>
	int status = -EIO;
   1b52c:	f06f 0804 	mvn.w	r8, #4
			verdict = NET_CONTINUE;
   1b530:	2501      	movs	r5, #1
   1b532:	e7cd      	b.n	1b4d0 <net_if_send_data+0x28>
	if (!context) {
   1b534:	2f00      	cmp	r7, #0
   1b536:	d0ce      	beq.n	1b4d6 <net_if_send_data+0x2e>
	if (context->send_cb) {
   1b538:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
   1b53c:	f1bb 0f00 	cmp.w	fp, #0
   1b540:	d004      	beq.n	1b54c <net_if_send_data+0xa4>
		context->send_cb(context, status, token, context->user_data);
   1b542:	683b      	ldr	r3, [r7, #0]
   1b544:	4652      	mov	r2, sl
   1b546:	4641      	mov	r1, r8
   1b548:	4638      	mov	r0, r7
   1b54a:	47d8      	blx	fp
static inline
enum net_ip_protocol net_context_get_ip_proto(struct net_context *context)
{
	NET_ASSERT(context);

	if (context->flags & NET_CONTEXT_PROTO) {
   1b54c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1b550:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b554:	d009      	beq.n	1b56a <net_if_send_data+0xc2>
		return IPPROTO_TCP;
   1b556:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1b558:	2b11      	cmp	r3, #17
   1b55a:	d008      	beq.n	1b56e <net_if_send_data+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1b55c:	2b06      	cmp	r3, #6
   1b55e:	d1ba      	bne.n	1b4d6 <net_if_send_data+0x2e>
	net_stats.tcp.resent += bytes;
}

static inline void net_stats_update_tcp_seg_sent(void)
{
	net_stats.tcp.sent++;
   1b560:	4a0b      	ldr	r2, [pc, #44]	; (1b590 <net_if_send_data+0xe8>)
   1b562:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1b564:	3301      	adds	r3, #1
   1b566:	6593      	str	r3, [r2, #88]	; 0x58
   1b568:	e7b5      	b.n	1b4d6 <net_if_send_data+0x2e>
	}

	return IPPROTO_UDP;
   1b56a:	2311      	movs	r3, #17
   1b56c:	e7f4      	b.n	1b558 <net_if_send_data+0xb0>
	net_stats.udp.sent++;
   1b56e:	4a08      	ldr	r2, [pc, #32]	; (1b590 <net_if_send_data+0xe8>)
   1b570:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1b574:	3301      	adds	r3, #1
   1b576:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1b57a:	e7ac      	b.n	1b4d6 <net_if_send_data+0x2e>
	if (verdict == NET_DROP && dst->addr) {
   1b57c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b57e:	2b00      	cmp	r3, #0
   1b580:	d0ab      	beq.n	1b4da <net_if_send_data+0x32>
		net_if_call_link_cb(iface, dst, status);
   1b582:	4642      	mov	r2, r8
   1b584:	4649      	mov	r1, r9
   1b586:	4630      	mov	r0, r6
   1b588:	f7ff ff64 	bl	1b454 <net_if_call_link_cb>
   1b58c:	e7a5      	b.n	1b4da <net_if_send_data+0x32>
   1b58e:	bf00      	nop
   1b590:	20002950 	.word	0x20002950

0001b594 <net_if_tx>:
{
   1b594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b598:	4606      	mov	r6, r0
	const struct net_if_api *api = iface->dev->driver_api;
   1b59a:	f850 3b18 	ldr.w	r3, [r0], #24
   1b59e:	f8d3 9004 	ldr.w	r9, [r3, #4]
	pkt = k_fifo_get(&iface->tx_queue, K_NO_WAIT);
   1b5a2:	2100      	movs	r1, #0
   1b5a4:	f00c fd56 	bl	28054 <k_queue_get>
	if (!pkt) {
   1b5a8:	2800      	cmp	r0, #0
   1b5aa:	d062      	beq.n	1b672 <net_if_tx+0xde>
   1b5ac:	4605      	mov	r5, r0
	return &pkt->lladdr_dst;
   1b5ae:	f100 0828 	add.w	r8, r0, #40	; 0x28
	return pkt->context;
   1b5b2:	68c7      	ldr	r7, [r0, #12]
	return pkt->token;
   1b5b4:	f8d0 a010 	ldr.w	sl, [r0, #16]
   1b5b8:	f3bf 8f5b 	dmb	ish
   1b5bc:	68f3      	ldr	r3, [r6, #12]
   1b5be:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b5c2:	f013 0f01 	tst.w	r3, #1
   1b5c6:	d039      	beq.n	1b63c <net_if_tx+0xa8>
	return net_buf_frags_len(pkt->frags);
   1b5c8:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1b5ca:	2400      	movs	r4, #0
   1b5cc:	e002      	b.n	1b5d4 <net_if_tx+0x40>
		bytes += buf->len;
   1b5ce:	899a      	ldrh	r2, [r3, #12]
   1b5d0:	4414      	add	r4, r2
		buf = buf->frags;
   1b5d2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1b5d4:	2b00      	cmp	r3, #0
   1b5d6:	d1fa      	bne.n	1b5ce <net_if_tx+0x3a>
	pkt->sent_or_eof = sent;
   1b5d8:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
	pkt->pkt_queued = send;
   1b5dc:	f043 0301 	orr.w	r3, r3, #1
   1b5e0:	f36f 0341 	bfc	r3, #1, #1
   1b5e4:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		status = api->send(iface, pkt);
   1b5e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b5ec:	4629      	mov	r1, r5
   1b5ee:	4630      	mov	r0, r6
   1b5f0:	4798      	blx	r3
   1b5f2:	4681      	mov	r9, r0
	if (status < 0) {
   1b5f4:	f1b9 0f00 	cmp.w	r9, #0
   1b5f8:	db23      	blt.n	1b642 <net_if_tx+0xae>
	net_stats.bytes.sent += bytes;
   1b5fa:	4a21      	ldr	r2, [pc, #132]	; (1b680 <net_if_tx+0xec>)
   1b5fc:	6853      	ldr	r3, [r2, #4]
   1b5fe:	441c      	add	r4, r3
   1b600:	6054      	str	r4, [r2, #4]
	if (context) {
   1b602:	b18f      	cbz	r7, 1b628 <net_if_tx+0x94>
	if (!context) {
   1b604:	b187      	cbz	r7, 1b628 <net_if_tx+0x94>
	if (context->send_cb) {
   1b606:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   1b608:	b124      	cbz	r4, 1b614 <net_if_tx+0x80>
		context->send_cb(context, status, token, context->user_data);
   1b60a:	683b      	ldr	r3, [r7, #0]
   1b60c:	4652      	mov	r2, sl
   1b60e:	4649      	mov	r1, r9
   1b610:	4638      	mov	r0, r7
   1b612:	47a0      	blx	r4
	if (context->flags & NET_CONTEXT_PROTO) {
   1b614:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1b618:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b61c:	d01b      	beq.n	1b656 <net_if_tx+0xc2>
		return IPPROTO_TCP;
   1b61e:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1b620:	2b11      	cmp	r3, #17
   1b622:	d01a      	beq.n	1b65a <net_if_tx+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1b624:	2b06      	cmp	r3, #6
   1b626:	d01f      	beq.n	1b668 <net_if_tx+0xd4>
	if (dst->addr) {
   1b628:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1b62a:	b32b      	cbz	r3, 1b678 <net_if_tx+0xe4>
		net_if_call_link_cb(iface, dst, status);
   1b62c:	464a      	mov	r2, r9
   1b62e:	4641      	mov	r1, r8
   1b630:	4630      	mov	r0, r6
   1b632:	f7ff ff0f 	bl	1b454 <net_if_call_link_cb>
	return true;
   1b636:	2001      	movs	r0, #1
   1b638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status = -ENETDOWN;
   1b63c:	f06f 0972 	mvn.w	r9, #114	; 0x72
   1b640:	e7d8      	b.n	1b5f4 <net_if_tx+0x60>
	pkt->sent_or_eof = sent;
   1b642:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1b646:	f36f 0300 	bfc	r3, #0, #1
   1b64a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		net_pkt_unref(pkt);
   1b64e:	4628      	mov	r0, r5
   1b650:	f001 fa93 	bl	1cb7a <net_pkt_unref>
   1b654:	e7d5      	b.n	1b602 <net_if_tx+0x6e>
	return IPPROTO_UDP;
   1b656:	2311      	movs	r3, #17
   1b658:	e7e2      	b.n	1b620 <net_if_tx+0x8c>
	net_stats.udp.sent++;
   1b65a:	4a09      	ldr	r2, [pc, #36]	; (1b680 <net_if_tx+0xec>)
   1b65c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1b660:	3301      	adds	r3, #1
   1b662:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1b666:	e7df      	b.n	1b628 <net_if_tx+0x94>
	net_stats.tcp.sent++;
   1b668:	4a05      	ldr	r2, [pc, #20]	; (1b680 <net_if_tx+0xec>)
   1b66a:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1b66c:	3301      	adds	r3, #1
   1b66e:	6593      	str	r3, [r2, #88]	; 0x58
   1b670:	e7da      	b.n	1b628 <net_if_tx+0x94>
		return false;
   1b672:	2000      	movs	r0, #0
   1b674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return true;
   1b678:	2001      	movs	r0, #1
}
   1b67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b67e:	bf00      	nop
   1b680:	20002950 	.word	0x20002950

0001b684 <net_if_flush_tx>:
	return (!list->head);
   1b684:	6983      	ldr	r3, [r0, #24]
	if (k_fifo_is_empty(&iface->tx_queue)) {
   1b686:	b14b      	cbz	r3, 1b69c <net_if_flush_tx+0x18>
{
   1b688:	b510      	push	{r4, lr}
   1b68a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1b68c:	f00c fef8 	bl	28480 <_impl_k_yield>
		if (!net_if_tx(iface)) {
   1b690:	4620      	mov	r0, r4
   1b692:	f7ff ff7f 	bl	1b594 <net_if_tx>
   1b696:	2800      	cmp	r0, #0
   1b698:	d1fa      	bne.n	1b690 <net_if_flush_tx+0xc>
   1b69a:	bd10      	pop	{r4, pc}
   1b69c:	4770      	bx	lr

0001b69e <net_if_process_events>:
{
   1b69e:	b538      	push	{r3, r4, r5, lr}
   1b6a0:	4604      	mov	r4, r0
   1b6a2:	460d      	mov	r5, r1
	for (; ev_count; event++, ev_count--) {
   1b6a4:	e001      	b.n	1b6aa <net_if_process_events+0xc>
   1b6a6:	3414      	adds	r4, #20
   1b6a8:	3d01      	subs	r5, #1
   1b6aa:	b145      	cbz	r5, 1b6be <net_if_process_events+0x20>
		switch (event->state) {
   1b6ac:	7b63      	ldrb	r3, [r4, #13]
   1b6ae:	091b      	lsrs	r3, r3, #4
   1b6b0:	2b04      	cmp	r3, #4
   1b6b2:	d1f8      	bne.n	1b6a6 <net_if_process_events+0x8>
			iface = CONTAINER_OF(event->fifo, struct net_if,
   1b6b4:	6920      	ldr	r0, [r4, #16]
			net_if_tx(iface);
   1b6b6:	3818      	subs	r0, #24
   1b6b8:	f7ff ff6c 	bl	1b594 <net_if_tx>
			break;
   1b6bc:	e7f3      	b.n	1b6a6 <net_if_process_events+0x8>
}
   1b6be:	bd38      	pop	{r3, r4, r5, pc}

0001b6c0 <net_if_tx_thread>:
{
   1b6c0:	b538      	push	{r3, r4, r5, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1b6c2:	f00d f836 	bl	28732 <_impl_k_sem_give>
		ev_count = net_if_prepare_events();
   1b6c6:	f7ff f849 	bl	1a75c <net_if_prepare_events>
   1b6ca:	4605      	mov	r5, r0
		ret = k_poll(__net_if_event_start, ev_count, K_FOREVER);
   1b6cc:	4c06      	ldr	r4, [pc, #24]	; (1b6e8 <net_if_tx_thread+0x28>)
   1b6ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b6d2:	4601      	mov	r1, r0
   1b6d4:	4620      	mov	r0, r4
   1b6d6:	f00c f98b 	bl	279f0 <k_poll>
		net_if_process_events(__net_if_event_start, ev_count);
   1b6da:	4629      	mov	r1, r5
   1b6dc:	4620      	mov	r0, r4
   1b6de:	f7ff ffde 	bl	1b69e <net_if_process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1b6e2:	f00c fecd 	bl	28480 <_impl_k_yield>
   1b6e6:	e7ee      	b.n	1b6c6 <net_if_tx_thread+0x6>
   1b6e8:	2000d360 	.word	0x2000d360

0001b6ec <net_if_get_by_index>:

struct net_if *net_if_get_by_index(u8_t index)
{
	if (&__net_if_start[index] >= __net_if_end) {
   1b6ec:	4a05      	ldr	r2, [pc, #20]	; (1b704 <net_if_get_by_index+0x18>)
   1b6ee:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   1b6f2:	fb03 2000 	mla	r0, r3, r0, r2
   1b6f6:	4b04      	ldr	r3, [pc, #16]	; (1b708 <net_if_get_by_index+0x1c>)
   1b6f8:	4298      	cmp	r0, r3
   1b6fa:	d200      	bcs.n	1b6fe <net_if_get_by_index+0x12>
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index];
}
   1b6fc:	4770      	bx	lr
		return NULL;
   1b6fe:	2000      	movs	r0, #0
   1b700:	e7fc      	b.n	1b6fc <net_if_get_by_index+0x10>
   1b702:	bf00      	nop
   1b704:	2000d0c0 	.word	0x2000d0c0
   1b708:	2000d360 	.word	0x2000d360

0001b70c <net_if_get_by_iface>:

u8_t net_if_get_by_iface(struct net_if *iface)
{
	NET_ASSERT(iface >= __net_if_start && iface < __net_if_end);

	return iface - __net_if_start;
   1b70c:	4b03      	ldr	r3, [pc, #12]	; (1b71c <net_if_get_by_iface+0x10>)
   1b70e:	1ac0      	subs	r0, r0, r3
   1b710:	1140      	asrs	r0, r0, #5
   1b712:	4b03      	ldr	r3, [pc, #12]	; (1b720 <net_if_get_by_iface+0x14>)
   1b714:	fb03 f000 	mul.w	r0, r3, r0
}
   1b718:	b2c0      	uxtb	r0, r0
   1b71a:	4770      	bx	lr
   1b71c:	2000d0c0 	.word	0x2000d0c0
   1b720:	3cf3cf3d 	.word	0x3cf3cf3d

0001b724 <net_if_foreach>:

void net_if_foreach(net_if_cb_t cb, void *user_data)
{
   1b724:	b570      	push	{r4, r5, r6, lr}
   1b726:	4606      	mov	r6, r0
   1b728:	460d      	mov	r5, r1
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b72a:	4c05      	ldr	r4, [pc, #20]	; (1b740 <net_if_foreach+0x1c>)
   1b72c:	e004      	b.n	1b738 <net_if_foreach+0x14>
		cb(iface, user_data);
   1b72e:	4629      	mov	r1, r5
   1b730:	4620      	mov	r0, r4
   1b732:	47b0      	blx	r6
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b734:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1b738:	4b02      	ldr	r3, [pc, #8]	; (1b744 <net_if_foreach+0x20>)
   1b73a:	429c      	cmp	r4, r3
   1b73c:	d1f7      	bne.n	1b72e <net_if_foreach+0xa>
	}
}
   1b73e:	bd70      	pop	{r4, r5, r6, pc}
   1b740:	2000d0c0 	.word	0x2000d0c0
   1b744:	2000d360 	.word	0x2000d360

0001b748 <net_if_up>:

int net_if_up(struct net_if *iface)
{
   1b748:	b570      	push	{r4, r5, r6, lr}
   1b74a:	f3bf 8f5b 	dmb	ish
   1b74e:	68c5      	ldr	r5, [r0, #12]
   1b750:	f3bf 8f5b 	dmb	ish
	int status;

	NET_DBG("iface %p", iface);

	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b754:	f015 0501 	ands.w	r5, r5, #1
   1b758:	d123      	bne.n	1b7a2 <net_if_up+0x5a>
   1b75a:	f100 060c 	add.w	r6, r0, #12
   1b75e:	4604      	mov	r4, r0
		return 0;
	}

	/* If the L2 does not support enable just set the flag */
	if (!iface->l2->enable) {
   1b760:	6843      	ldr	r3, [r0, #4]
   1b762:	68db      	ldr	r3, [r3, #12]
   1b764:	b11b      	cbz	r3, 1b76e <net_if_up+0x26>
		goto done;
	}

	/* Notify L2 to enable the interface */
	status = iface->l2->enable(iface, true);
   1b766:	2101      	movs	r1, #1
   1b768:	4798      	blx	r3
	if (status < 0) {
   1b76a:	2800      	cmp	r0, #0
   1b76c:	db1b      	blt.n	1b7a6 <net_if_up+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b76e:	f3bf 8f5b 	dmb	ish
   1b772:	e856 3f00 	ldrex	r3, [r6]
   1b776:	f043 0301 	orr.w	r3, r3, #1
   1b77a:	e846 3200 	strex	r2, r3, [r6]
   1b77e:	2a00      	cmp	r2, #0
   1b780:	d1f7      	bne.n	1b772 <net_if_up+0x2a>
   1b782:	f3bf 8f5b 	dmb	ish
done:
	atomic_set_bit(iface->flags, NET_IF_UP);

#if defined(CONFIG_NET_IPV6_DAD)
	NET_DBG("Starting DAD for iface %p", iface);
	net_if_start_dad(iface);
   1b786:	4620      	mov	r0, r4
   1b788:	f7ff f91e 	bl	1a9c8 <net_if_start_dad>
	join_mcast_solicit_node(iface, &iface->ipv6.mcast[0].address.in6_addr);
#endif

#if defined(CONFIG_NET_IPV6_ND)
	NET_DBG("Starting ND/RS for iface %p", iface);
	net_if_start_rs(iface);
   1b78c:	4620      	mov	r0, r4
   1b78e:	f7ff f821 	bl	1a7d4 <net_if_start_rs>
   1b792:	2300      	movs	r3, #0
   1b794:	461a      	mov	r2, r3
   1b796:	4621      	mov	r1, r4
   1b798:	4804      	ldr	r0, [pc, #16]	; (1b7ac <net_if_up+0x64>)
   1b79a:	f006 fe61 	bl	22460 <net_mgmt_event_notify_with_info>
#endif

	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   1b79e:	4628      	mov	r0, r5
   1b7a0:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   1b7a2:	2500      	movs	r5, #0
   1b7a4:	e7fb      	b.n	1b79e <net_if_up+0x56>
		return status;
   1b7a6:	4605      	mov	r5, r0
   1b7a8:	e7f9      	b.n	1b79e <net_if_up+0x56>
   1b7aa:	bf00      	nop
   1b7ac:	d0010002 	.word	0xd0010002

0001b7b0 <net_if_down>:

int net_if_down(struct net_if *iface)
{
   1b7b0:	b510      	push	{r4, lr}
   1b7b2:	4604      	mov	r4, r0
	int status;

	NET_DBG("iface %p", iface);

	leave_mcast_all(iface);
   1b7b4:	f7fe ffaf 	bl	1a716 <leave_mcast_all>

	net_if_flush_tx(iface);
   1b7b8:	4620      	mov	r0, r4
   1b7ba:	f7ff ff63 	bl	1b684 <net_if_flush_tx>

	/* If the L2 does not support enable just clear the flag */
	if (!iface->l2->enable) {
   1b7be:	6863      	ldr	r3, [r4, #4]
   1b7c0:	68db      	ldr	r3, [r3, #12]
   1b7c2:	b123      	cbz	r3, 1b7ce <net_if_down+0x1e>
		goto done;
	}

	/* Notify L2 to disable the interface */
	status = iface->l2->enable(iface, false);
   1b7c4:	2100      	movs	r1, #0
   1b7c6:	4620      	mov	r0, r4
   1b7c8:	4798      	blx	r3
	if (status < 0) {
   1b7ca:	2800      	cmp	r0, #0
   1b7cc:	db14      	blt.n	1b7f8 <net_if_down+0x48>
		return status;
	}

done:
	atomic_clear_bit(iface->flags, NET_IF_UP);
   1b7ce:	f104 030c 	add.w	r3, r4, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b7d2:	f3bf 8f5b 	dmb	ish
   1b7d6:	e853 2f00 	ldrex	r2, [r3]
   1b7da:	f022 0201 	bic.w	r2, r2, #1
   1b7de:	e843 2100 	strex	r1, r2, [r3]
   1b7e2:	2900      	cmp	r1, #0
   1b7e4:	d1f7      	bne.n	1b7d6 <net_if_down+0x26>
   1b7e6:	f3bf 8f5b 	dmb	ish
   1b7ea:	2300      	movs	r3, #0
   1b7ec:	461a      	mov	r2, r3
   1b7ee:	4621      	mov	r1, r4
   1b7f0:	4802      	ldr	r0, [pc, #8]	; (1b7fc <net_if_down+0x4c>)
   1b7f2:	f006 fe35 	bl	22460 <net_mgmt_event_notify_with_info>

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);

	return 0;
   1b7f6:	2000      	movs	r0, #0
}
   1b7f8:	bd10      	pop	{r4, pc}
   1b7fa:	bf00      	nop
   1b7fc:	d0010001 	.word	0xd0010001

0001b800 <net_if_init>:

void net_if_init(struct k_sem *startup_sync)
{
   1b800:	b570      	push	{r4, r5, r6, lr}
   1b802:	b086      	sub	sp, #24
   1b804:	4606      	mov	r6, r0
	struct net_if *iface;

	NET_DBG("");

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b806:	4c1b      	ldr	r4, [pc, #108]	; (1b874 <net_if_init+0x74>)
   1b808:	e01b      	b.n	1b842 <net_if_init+0x42>
	const struct net_if_api *api = iface->dev->driver_api;
   1b80a:	4620      	mov	r0, r4
   1b80c:	f850 3b18 	ldr.w	r3, [r0], #24
   1b810:	685d      	ldr	r5, [r3, #4]
	k_fifo_init(&iface->tx_queue);
   1b812:	f00c fbc4 	bl	27f9e <k_queue_init>
	api->init(iface);
   1b816:	682b      	ldr	r3, [r5, #0]
   1b818:	4620      	mov	r0, r4
   1b81a:	4798      	blx	r3
#if defined(CONFIG_NET_IPV4)
		iface->ipv4.ttl = CONFIG_NET_INITIAL_TTL;
#endif

#if defined(CONFIG_NET_IPV6)
		iface->ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   1b81c:	2340      	movs	r3, #64	; 0x40
   1b81e:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
		iface->ipv6.base_reachable_time = REACHABLE_TIME;
   1b822:	f247 5330 	movw	r3, #30000	; 0x7530
   1b826:	f8c4 3288 	str.w	r3, [r4, #648]	; 0x288
 *
 * @param iface Network interface
 */
static inline void net_if_ipv6_set_reachable_time(struct net_if *iface)
{
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1b82a:	4620      	mov	r0, r4
   1b82c:	f7ff fe06 	bl	1b43c <net_if_ipv6_calc_reachable_time>
   1b830:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c

		net_if_ipv6_set_reachable_time(iface);

#if defined(CONFIG_NET_IPV6_ND)
		k_delayed_work_init(&iface->ipv6.rs_timer, rs_timeout);
   1b834:	4910      	ldr	r1, [pc, #64]	; (1b878 <net_if_init+0x78>)
   1b836:	f504 7018 	add.w	r0, r4, #608	; 0x260
   1b83a:	f00d fd4b 	bl	292d4 <k_delayed_work_init>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b83e:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1b842:	4b0e      	ldr	r3, [pc, #56]	; (1b87c <net_if_init+0x7c>)
   1b844:	429c      	cmp	r4, r3
   1b846:	d1e0      	bne.n	1b80a <net_if_init+0xa>
#endif
#endif
	}

	if (iface == __net_if_start) {
   1b848:	4b0a      	ldr	r3, [pc, #40]	; (1b874 <net_if_init+0x74>)
   1b84a:	429c      	cmp	r4, r3
   1b84c:	d010      	beq.n	1b870 <net_if_init+0x70>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1b84e:	2300      	movs	r3, #0
   1b850:	9305      	str	r3, [sp, #20]
   1b852:	2201      	movs	r2, #1
   1b854:	9204      	str	r2, [sp, #16]
   1b856:	f06f 0208 	mvn.w	r2, #8
   1b85a:	9203      	str	r2, [sp, #12]
   1b85c:	9302      	str	r3, [sp, #8]
   1b85e:	9301      	str	r3, [sp, #4]
   1b860:	9600      	str	r6, [sp, #0]
   1b862:	4b07      	ldr	r3, [pc, #28]	; (1b880 <net_if_init+0x80>)
   1b864:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1b868:	4906      	ldr	r1, [pc, #24]	; (1b884 <net_if_init+0x84>)
   1b86a:	4807      	ldr	r0, [pc, #28]	; (1b888 <net_if_init+0x88>)
   1b86c:	f00d f9e0 	bl	28c30 <_impl_k_thread_create>
	k_thread_create(&tx_thread_data, tx_stack,
			K_THREAD_STACK_SIZEOF(tx_stack),
			(k_thread_entry_t)net_if_tx_thread,
			startup_sync, NULL, NULL, K_PRIO_COOP(7),
			K_ESSENTIAL, K_NO_WAIT);
}
   1b870:	b006      	add	sp, #24
   1b872:	bd70      	pop	{r4, r5, r6, pc}
   1b874:	2000d0c0 	.word	0x2000d0c0
   1b878:	0001a7f5 	.word	0x0001a7f5
   1b87c:	2000d360 	.word	0x2000d360
   1b880:	0001b6c1 	.word	0x0001b6c1
   1b884:	20004c38 	.word	0x20004c38
   1b888:	20000290 	.word	0x20000290

0001b88c <net_if_post_init>:

void net_if_post_init(void)
{
   1b88c:	b510      	push	{r4, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b88e:	4c05      	ldr	r4, [pc, #20]	; (1b8a4 <net_if_post_init+0x18>)
   1b890:	e004      	b.n	1b89c <net_if_post_init+0x10>
		net_if_up(iface);
   1b892:	4620      	mov	r0, r4
   1b894:	f7ff ff58 	bl	1b748 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b898:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1b89c:	4b02      	ldr	r3, [pc, #8]	; (1b8a8 <net_if_post_init+0x1c>)
   1b89e:	429c      	cmp	r4, r3
   1b8a0:	d1f7      	bne.n	1b892 <net_if_post_init+0x6>

	/* RPL init must be done after the network interface is up
	 * as the RPL code wants to add multicast address to interface.
	 */
	net_rpl_init();
}
   1b8a2:	bd10      	pop	{r4, pc}
   1b8a4:	2000d0c0 	.word	0x2000d0c0
   1b8a8:	2000d360 	.word	0x2000d360

0001b8ac <check_used_port>:

static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   1b8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b8ae:	4605      	mov	r5, r0
   1b8b0:	460e      	mov	r6, r1
   1b8b2:	4617      	mov	r7, r2
	int i;

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1b8b4:	2400      	movs	r4, #0
   1b8b6:	e003      	b.n	1b8c0 <check_used_port+0x14>
   1b8b8:	2311      	movs	r3, #17
		if (!net_context_is_used(&contexts[i])) {
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1b8ba:	42ab      	cmp	r3, r5
   1b8bc:	d010      	beq.n	1b8e0 <check_used_port+0x34>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1b8be:	3401      	adds	r4, #1
   1b8c0:	2c05      	cmp	r4, #5
   1b8c2:	dc2b      	bgt.n	1b91c <check_used_port+0x70>
	return context->flags & NET_CONTEXT_IN_USE;
   1b8c4:	2368      	movs	r3, #104	; 0x68
   1b8c6:	4a16      	ldr	r2, [pc, #88]	; (1b920 <check_used_port+0x74>)
   1b8c8:	fb03 2304 	mla	r3, r3, r4, r2
   1b8cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1b8d0:	f013 0f01 	tst.w	r3, #1
   1b8d4:	d0f3      	beq.n	1b8be <check_used_port+0x12>
	if (context->flags & NET_CONTEXT_PROTO) {
   1b8d6:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b8da:	d0ed      	beq.n	1b8b8 <check_used_port+0xc>
		return IPPROTO_TCP;
   1b8dc:	2306      	movs	r3, #6
   1b8de:	e7ec      	b.n	1b8ba <check_used_port+0xe>
		      net_sin((struct sockaddr *)&
   1b8e0:	2368      	movs	r3, #104	; 0x68
   1b8e2:	fb03 f304 	mul.w	r3, r3, r4
   1b8e6:	3308      	adds	r3, #8
   1b8e8:	4a0d      	ldr	r2, [pc, #52]	; (1b920 <check_used_port+0x74>)
   1b8ea:	4413      	add	r3, r2
			      contexts[i].local)->sin_port == local_port)) {
   1b8ec:	885a      	ldrh	r2, [r3, #2]
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1b8ee:	42b2      	cmp	r2, r6
   1b8f0:	d1e5      	bne.n	1b8be <check_used_port+0x12>
			continue;
		}

		if (local_addr->sa_family == AF_INET6) {
   1b8f2:	883a      	ldrh	r2, [r7, #0]
   1b8f4:	2a0a      	cmp	r2, #10
   1b8f6:	d007      	beq.n	1b908 <check_used_port+0x5c>
				      local_addr)->sin6_addr)) {
				return -EEXIST;
			}
		} else {
			if (net_ipv4_addr_cmp(
				    net_sin_ptr(&contexts[i].local)->
   1b8f8:	685b      	ldr	r3, [r3, #4]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1b8fa:	681a      	ldr	r2, [r3, #0]
   1b8fc:	687b      	ldr	r3, [r7, #4]
			if (net_ipv4_addr_cmp(
   1b8fe:	429a      	cmp	r2, r3
   1b900:	d1dd      	bne.n	1b8be <check_used_port+0x12>
							      sin_addr,
				    &((struct sockaddr_in *)
				      local_addr)->sin_addr)) {
				return -EEXIST;
   1b902:	f06f 0010 	mvn.w	r0, #16
			}
		}
	}

	return 0;
}
   1b906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b908:	2210      	movs	r2, #16
   1b90a:	1d39      	adds	r1, r7, #4
   1b90c:	6858      	ldr	r0, [r3, #4]
   1b90e:	f00d fe4f 	bl	295b0 <memcmp>
			if (net_ipv6_addr_cmp(
   1b912:	2800      	cmp	r0, #0
   1b914:	d1d3      	bne.n	1b8be <check_used_port+0x12>
				return -EEXIST;
   1b916:	f06f 0010 	mvn.w	r0, #16
   1b91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
   1b91c:	2000      	movs	r0, #0
   1b91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b920:	20001aa0 	.word	0x20001aa0

0001b924 <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   1b924:	b570      	push	{r4, r5, r6, lr}
   1b926:	4606      	mov	r6, r0
   1b928:	460d      	mov	r5, r1
	if (!net_sin(addr)->sin_port) {
   1b92a:	884c      	ldrh	r4, [r1, #2]
   1b92c:	b16c      	cbz	r4, 1b94a <find_available_port+0x26>

		return htons(local_port);
	}

	return net_sin(addr)->sin_port;
}
   1b92e:	4620      	mov	r0, r4
   1b930:	bd70      	pop	{r4, r5, r6, pc}
	return IPPROTO_UDP;
   1b932:	2011      	movs	r0, #17
				 htons(local_port), addr) == -EEXIST);
   1b934:	0a1c      	lsrs	r4, r3, #8
   1b936:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
		} while (check_used_port(
   1b93a:	b29c      	uxth	r4, r3
   1b93c:	462a      	mov	r2, r5
   1b93e:	4621      	mov	r1, r4
   1b940:	f7ff ffb4 	bl	1b8ac <check_used_port>
				 htons(local_port), addr) == -EEXIST);
   1b944:	f110 0f11 	cmn.w	r0, #17
   1b948:	d1f1      	bne.n	1b92e <find_available_port+0xa>
			local_port = sys_rand32_get() | 0x8000;
   1b94a:	f7e6 fb2f 	bl	1fac <sys_rand32_get>
   1b94e:	ea6f 4040 	mvn.w	r0, r0, lsl #17
   1b952:	ea6f 4050 	mvn.w	r0, r0, lsr #17
   1b956:	b283      	uxth	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1b958:	f896 205d 	ldrb.w	r2, [r6, #93]	; 0x5d
   1b95c:	f012 0f40 	tst.w	r2, #64	; 0x40
   1b960:	d0e7      	beq.n	1b932 <find_available_port+0xe>
		return IPPROTO_TCP;
   1b962:	2006      	movs	r0, #6
   1b964:	e7e6      	b.n	1b934 <find_available_port+0x10>

0001b966 <queue_fin>:
	return ret;
}

#if defined(CONFIG_NET_TCP)
static void queue_fin(struct net_context *ctx)
{
   1b966:	b500      	push	{lr}
   1b968:	b087      	sub	sp, #28
   1b96a:	4603      	mov	r3, r0
	struct net_pkt *pkt = NULL;
   1b96c:	2200      	movs	r2, #0
   1b96e:	a906      	add	r1, sp, #24
   1b970:	f841 2d04 	str.w	r2, [r1, #-4]!
	int ret;

	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1b974:	6e00      	ldr	r0, [r0, #96]	; 0x60
				      NULL, &ctx->remote, &pkt);
   1b976:	3314      	adds	r3, #20
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1b978:	9102      	str	r1, [sp, #8]
   1b97a:	9301      	str	r3, [sp, #4]
   1b97c:	9200      	str	r2, [sp, #0]
   1b97e:	4613      	mov	r3, r2
   1b980:	2101      	movs	r1, #1
   1b982:	f007 f9dd 	bl	22d40 <net_tcp_prepare_segment>
	if (ret || !pkt) {
   1b986:	b928      	cbnz	r0, 1b994 <queue_fin+0x2e>
   1b988:	9805      	ldr	r0, [sp, #20]
   1b98a:	b118      	cbz	r0, 1b994 <queue_fin+0x2e>
		return;
	}

	ret = net_tcp_send_pkt(pkt);
   1b98c:	f007 fcdc 	bl	23348 <net_tcp_send_pkt>
	if (ret < 0) {
   1b990:	2800      	cmp	r0, #0
   1b992:	db02      	blt.n	1b99a <queue_fin+0x34>
		net_pkt_unref(pkt);
	}
}
   1b994:	b007      	add	sp, #28
   1b996:	f85d fb04 	ldr.w	pc, [sp], #4
		net_pkt_unref(pkt);
   1b99a:	9805      	ldr	r0, [sp, #20]
   1b99c:	f001 f8ed 	bl	1cb7a <net_pkt_unref>
   1b9a0:	e7f8      	b.n	1b994 <queue_fin+0x2e>

0001b9a2 <tcp_hdr_len>:

	return ret;
}

static int tcp_hdr_len(struct net_pkt *pkt)
{
   1b9a2:	b500      	push	{lr}
   1b9a4:	b087      	sub	sp, #28
	struct net_tcp_hdr hdr, *tcp_hdr;

	/* "Offset": 4-bit field in high nibble, units of dwords */
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1b9a6:	a901      	add	r1, sp, #4
   1b9a8:	f007 fb1c 	bl	22fe4 <net_tcp_get_hdr>
	if (tcp_hdr) {
   1b9ac:	b128      	cbz	r0, 1b9ba <tcp_hdr_len+0x18>
		return 4 * (tcp_hdr->offset >> 4);
   1b9ae:	7b00      	ldrb	r0, [r0, #12]
   1b9b0:	0900      	lsrs	r0, r0, #4
   1b9b2:	0080      	lsls	r0, r0, #2
	}

	return 0;
}
   1b9b4:	b007      	add	sp, #28
   1b9b6:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
   1b9ba:	2000      	movs	r0, #0
   1b9bc:	e7fa      	b.n	1b9b4 <tcp_hdr_len+0x12>

0001b9be <set_appdata_values>:

	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
}

static void set_appdata_values(struct net_pkt *pkt, enum net_ip_protocol proto)
{
   1b9be:	b570      	push	{r4, r5, r6, lr}
   1b9c0:	b082      	sub	sp, #8
   1b9c2:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   1b9c4:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1b9c6:	2400      	movs	r4, #0
   1b9c8:	e002      	b.n	1b9d0 <set_appdata_values+0x12>
		bytes += buf->len;
   1b9ca:	899a      	ldrh	r2, [r3, #12]
   1b9cc:	4414      	add	r4, r2
		buf = buf->frags;
   1b9ce:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1b9d0:	2b00      	cmp	r3, #0
   1b9d2:	d1fa      	bne.n	1b9ca <set_appdata_values+0xc>
	u16_t proto_len = 0;
	struct net_buf *frag;
	u16_t offset;

#if defined(CONFIG_NET_UDP)
	if (proto == IPPROTO_UDP) {
   1b9d4:	2911      	cmp	r1, #17
   1b9d6:	d020      	beq.n	1ba1a <set_appdata_values+0x5c>
	u16_t proto_len = 0;
   1b9d8:	2600      	movs	r6, #0
		proto_len = sizeof(struct net_udp_hdr);
	}
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (proto == IPPROTO_TCP) {
   1b9da:	2906      	cmp	r1, #6
   1b9dc:	d01f      	beq.n	1ba1e <set_appdata_values+0x60>
		proto_len = tcp_hdr_len(pkt);
	}
#endif /* CONFIG_NET_TCP */

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1b9de:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1b9e2:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1b9e6:	4419      	add	r1, r3
   1b9e8:	4431      	add	r1, r6
   1b9ea:	f10d 0206 	add.w	r2, sp, #6
   1b9ee:	b289      	uxth	r1, r1
   1b9f0:	4628      	mov	r0, r5
   1b9f2:	f001 fb91 	bl	1d118 <net_frag_get_pos>
				proto_len,
				&offset);
	if (frag) {
   1b9f6:	b120      	cbz	r0, 1ba02 <set_appdata_values+0x44>
		net_pkt_set_appdata(pkt, frag->data + offset);
   1b9f8:	6883      	ldr	r3, [r0, #8]
   1b9fa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1b9fe:	4413      	add	r3, r2
	pkt->appdata = data;
   1ba00:	61ab      	str	r3, [r5, #24]
	}

	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1ba02:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1ba06:	1ae3      	subs	r3, r4, r3
   1ba08:	b29b      	uxth	r3, r3
			       net_pkt_ipv6_ext_len(pkt) - proto_len);
   1ba0a:	f895 403b 	ldrb.w	r4, [r5, #59]	; 0x3b
	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1ba0e:	1b1b      	subs	r3, r3, r4
   1ba10:	b29b      	uxth	r3, r3
   1ba12:	1b9b      	subs	r3, r3, r6
	pkt->appdatalen = len;
   1ba14:	862b      	strh	r3, [r5, #48]	; 0x30

	NET_ASSERT_INFO(net_pkt_appdatalen(pkt) < total_len,
			"Wrong appdatalen %u, total %zu",
			net_pkt_appdatalen(pkt), total_len);
}
   1ba16:	b002      	add	sp, #8
   1ba18:	bd70      	pop	{r4, r5, r6, pc}
		proto_len = sizeof(struct net_udp_hdr);
   1ba1a:	2608      	movs	r6, #8
   1ba1c:	e7dd      	b.n	1b9da <set_appdata_values+0x1c>
		proto_len = tcp_hdr_len(pkt);
   1ba1e:	4628      	mov	r0, r5
   1ba20:	f7ff ffbf 	bl	1b9a2 <tcp_hdr_len>
   1ba24:	b286      	uxth	r6, r0
   1ba26:	e7da      	b.n	1b9de <set_appdata_values+0x20>

0001ba28 <packet_received>:

static enum net_verdict packet_received(struct net_conn *conn,
					struct net_pkt *pkt,
					void *user_data)
{
   1ba28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ba2a:	460d      	mov	r5, r1
   1ba2c:	4616      	mov	r6, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1ba2e:	2300      	movs	r3, #0
   1ba30:	e000      	b.n	1ba34 <packet_received+0xc>
   1ba32:	3301      	adds	r3, #1
   1ba34:	2b05      	cmp	r3, #5
   1ba36:	dc12      	bgt.n	1ba5e <packet_received+0x36>
	return context->flags & NET_CONTEXT_IN_USE;
   1ba38:	2268      	movs	r2, #104	; 0x68
   1ba3a:	4926      	ldr	r1, [pc, #152]	; (1bad4 <packet_received+0xac>)
   1ba3c:	fb02 1203 	mla	r2, r2, r3, r1
   1ba40:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1ba44:	f012 0f01 	tst.w	r2, #1
   1ba48:	d0f3      	beq.n	1ba32 <packet_received+0xa>
		if (contexts[i].conn_handler == conn_handler) {
   1ba4a:	2268      	movs	r2, #104	; 0x68
   1ba4c:	fb02 1203 	mla	r2, r2, r3, r1
   1ba50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1ba52:	4290      	cmp	r0, r2
   1ba54:	d1ed      	bne.n	1ba32 <packet_received+0xa>
			return &contexts[i];
   1ba56:	2268      	movs	r2, #104	; 0x68
   1ba58:	fb02 1403 	mla	r4, r2, r3, r1
   1ba5c:	e000      	b.n	1ba60 <packet_received+0x38>
	return NULL;
   1ba5e:	2400      	movs	r4, #0
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
   1ba60:	6968      	ldr	r0, [r5, #20]
   1ba62:	f7ff fe53 	bl	1b70c <net_if_get_by_iface>
   1ba66:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
	pkt->context = ctx;
   1ba6a:	60ec      	str	r4, [r5, #12]

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */

	if (!context->recv_cb) {
   1ba6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1ba6e:	b373      	cbz	r3, 1bace <packet_received+0xa6>
	if (context->flags & NET_CONTEXT_PROTO) {
   1ba70:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1ba74:	f013 0f40 	tst.w	r3, #64	; 0x40
   1ba78:	d017      	beq.n	1baaa <packet_received+0x82>
		return IPPROTO_TCP;
   1ba7a:	2206      	movs	r2, #6
		return NET_DROP;
	}

	if (net_context_get_ip_proto(context) != IPPROTO_TCP) {
   1ba7c:	2a06      	cmp	r2, #6
   1ba7e:	d016      	beq.n	1baae <packet_received+0x86>
		/* TCP packets get appdata earlier in tcp_established(). */
		set_appdata_values(pkt, IPPROTO_UDP);
   1ba80:	2111      	movs	r1, #17
   1ba82:	4628      	mov	r0, r5
   1ba84:	f7ff ff9b 	bl	1b9be <set_appdata_values>
	return pkt->appdatalen;
   1ba88:	8e29      	ldrh	r1, [r5, #48]	; 0x30
	net_stats.tcp.bytes.received += bytes;
   1ba8a:	4a13      	ldr	r2, [pc, #76]	; (1bad8 <packet_received+0xb0>)
   1ba8c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1ba8e:	440b      	add	r3, r1
   1ba90:	64d3      	str	r3, [r2, #76]	; 0x4c
		net_pkt_appdata(pkt), net_pkt_appdatalen(pkt),
		net_pkt_get_len(pkt));

	net_stats_update_tcp_recv(net_pkt_appdatalen(pkt));

	context->recv_cb(context, pkt, 0, user_data);
   1ba92:	6b27      	ldr	r7, [r4, #48]	; 0x30
   1ba94:	4633      	mov	r3, r6
   1ba96:	2200      	movs	r2, #0
   1ba98:	4629      	mov	r1, r5
   1ba9a:	4620      	mov	r0, r4
   1ba9c:	47b8      	blx	r7
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1ba9e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1baa2:	f00c fe46 	bl	28732 <_impl_k_sem_give>

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	k_sem_give(&context->recv_data_wait);
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return NET_OK;
   1baa6:	2000      	movs	r0, #0
   1baa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1baaa:	2211      	movs	r2, #17
   1baac:	e7e6      	b.n	1ba7c <packet_received+0x54>
	if (context->flags & NET_CONTEXT_TYPE) {
   1baae:	f013 0f20 	tst.w	r3, #32
   1bab2:	d00a      	beq.n	1baca <packet_received+0xa2>
		return SOCK_STREAM;
   1bab4:	2301      	movs	r3, #1
	else if (net_context_get_type(context) == SOCK_STREAM) {
   1bab6:	2b01      	cmp	r3, #1
   1bab8:	d1e6      	bne.n	1ba88 <packet_received+0x60>
   1baba:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
		if (net_pkt_appdatalen(pkt) == 0) {
   1babc:	2b00      	cmp	r3, #0
   1babe:	d1e3      	bne.n	1ba88 <packet_received+0x60>
			net_pkt_unref(pkt);
   1bac0:	4628      	mov	r0, r5
   1bac2:	f001 f85a 	bl	1cb7a <net_pkt_unref>
			return NET_OK;
   1bac6:	2000      	movs	r0, #0
   1bac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return SOCK_DGRAM;
   1baca:	2302      	movs	r3, #2
   1bacc:	e7f3      	b.n	1bab6 <packet_received+0x8e>
		return NET_DROP;
   1bace:	2002      	movs	r0, #2
}
   1bad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bad2:	bf00      	nop
   1bad4:	20001aa0 	.word	0x20001aa0
   1bad8:	20002950 	.word	0x20002950

0001badc <send_reset>:
{
   1badc:	b510      	push	{r4, lr}
   1bade:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1bae0:	aa02      	add	r2, sp, #8
   1bae2:	2300      	movs	r3, #0
   1bae4:	f842 3d04 	str.w	r3, [r2, #-4]!
	ret = net_tcp_prepare_reset(context->tcp, remote, &pkt);
   1bae8:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1baea:	f007 f85a 	bl	22ba2 <net_tcp_prepare_reset>
	if (ret || !pkt) {
   1baee:	4604      	mov	r4, r0
   1baf0:	b928      	cbnz	r0, 1bafe <send_reset+0x22>
   1baf2:	9801      	ldr	r0, [sp, #4]
   1baf4:	b118      	cbz	r0, 1bafe <send_reset+0x22>
	ret = net_send_data(pkt);
   1baf6:	f7fe fc3f 	bl	1a378 <net_send_data>
	if (ret < 0) {
   1bafa:	1e04      	subs	r4, r0, #0
   1bafc:	db02      	blt.n	1bb04 <send_reset+0x28>
}
   1bafe:	4620      	mov	r0, r4
   1bb00:	b002      	add	sp, #8
   1bb02:	bd10      	pop	{r4, pc}
		net_pkt_unref(pkt);
   1bb04:	9801      	ldr	r0, [sp, #4]
   1bb06:	f001 f838 	bl	1cb7a <net_pkt_unref>
   1bb0a:	e7f8      	b.n	1bafe <send_reset+0x22>

0001bb0c <send_ack>:
{
   1bb0c:	b510      	push	{r4, lr}
   1bb0e:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1bb10:	2300      	movs	r3, #0
   1bb12:	9301      	str	r3, [sp, #4]
	if (!force && context->tcp->send_ack == context->tcp->sent_ack) {
   1bb14:	b932      	cbnz	r2, 1bb24 <send_ack+0x18>
   1bb16:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1bb18:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1bb1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1bb20:	429a      	cmp	r2, r3
   1bb22:	d011      	beq.n	1bb48 <send_ack+0x3c>
	ret = net_tcp_prepare_ack(context->tcp, remote, &pkt);
   1bb24:	aa01      	add	r2, sp, #4
   1bb26:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1bb28:	f007 f99c 	bl	22e64 <net_tcp_prepare_ack>
	if (ret) {
   1bb2c:	4604      	mov	r4, r0
   1bb2e:	b110      	cbz	r0, 1bb36 <send_ack+0x2a>
}
   1bb30:	4620      	mov	r0, r4
   1bb32:	b002      	add	sp, #8
   1bb34:	bd10      	pop	{r4, pc}
	ret = net_tcp_send_pkt(pkt);
   1bb36:	9801      	ldr	r0, [sp, #4]
   1bb38:	f007 fc06 	bl	23348 <net_tcp_send_pkt>
	if (ret < 0) {
   1bb3c:	1e04      	subs	r4, r0, #0
   1bb3e:	daf7      	bge.n	1bb30 <send_ack+0x24>
		net_pkt_unref(pkt);
   1bb40:	9801      	ldr	r0, [sp, #4]
   1bb42:	f001 f81a 	bl	1cb7a <net_pkt_unref>
   1bb46:	e7f3      	b.n	1bb30 <send_ack+0x24>
		return 0;
   1bb48:	2400      	movs	r4, #0
   1bb4a:	e7f1      	b.n	1bb30 <send_ack+0x24>

0001bb4c <_tcp_synack_received>:
	switch (net_tcp_get_state(context->tcp)) {
   1bb4c:	6e13      	ldr	r3, [r2, #96]	; 0x60
 *
 * @param tcp TCP context
 */
static inline enum net_tcp_state net_tcp_get_state(const struct net_tcp *tcp)
{
	return (enum net_tcp_state)tcp->state;
   1bb4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1bb52:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1bb56:	2b02      	cmp	r3, #2
   1bb58:	d001      	beq.n	1bb5e <_tcp_synack_received+0x12>
}
   1bb5a:	2002      	movs	r0, #2
   1bb5c:	4770      	bx	lr
{
   1bb5e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb60:	b09f      	sub	sp, #124	; 0x7c
   1bb62:	4615      	mov	r5, r2
   1bb64:	460c      	mov	r4, r1
	context->iface = net_if_get_by_iface(iface);
   1bb66:	6948      	ldr	r0, [r1, #20]
   1bb68:	f7ff fdd0 	bl	1b70c <net_if_get_by_iface>
   1bb6c:	f885 005c 	strb.w	r0, [r5, #92]	; 0x5c
	pkt->context = ctx;
   1bb70:	60e5      	str	r5, [r4, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1bb72:	a911      	add	r1, sp, #68	; 0x44
   1bb74:	4620      	mov	r0, r4
   1bb76:	f007 fa35 	bl	22fe4 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1bb7a:	4606      	mov	r6, r0
   1bb7c:	b1f8      	cbz	r0, 1bbbe <_tcp_synack_received+0x72>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {
   1bb7e:	7b43      	ldrb	r3, [r0, #13]
   1bb80:	f013 0f04 	tst.w	r3, #4
   1bb84:	d11e      	bne.n	1bbc4 <_tcp_synack_received+0x78>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_SYN) {
   1bb86:	f013 0f02 	tst.w	r3, #2
   1bb8a:	d013      	beq.n	1bbb4 <_tcp_synack_received+0x68>
		context->tcp->send_ack =
   1bb8c:	6e2a      	ldr	r2, [r5, #96]	; 0x60
	return ((u16_t)src[0] << 8) | src[1];
   1bb8e:	7901      	ldrb	r1, [r0, #4]
   1bb90:	7943      	ldrb	r3, [r0, #5]
   1bb92:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1bb96:	7980      	ldrb	r0, [r0, #6]
   1bb98:	79f3      	ldrb	r3, [r6, #7]
   1bb9a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1bb9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			sys_get_be32(tcp_hdr->seq) + 1;
   1bba2:	3301      	adds	r3, #1
		context->tcp->send_ack =
   1bba4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		context->tcp->recv_max_ack = context->tcp->send_seq + 1;
   1bba8:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1bbaa:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1bbae:	3301      	adds	r3, #1
   1bbb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	if (NET_TCP_FLAGS(tcp_hdr) == (NET_TCP_SYN | NET_TCP_ACK)) {
   1bbb4:	7b73      	ldrb	r3, [r6, #13]
   1bbb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1bbba:	2b12      	cmp	r3, #18
   1bbbc:	d019      	beq.n	1bbf2 <_tcp_synack_received+0xa6>
}
   1bbbe:	2002      	movs	r0, #2
   1bbc0:	b01f      	add	sp, #124	; 0x7c
   1bbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1bbc4:	4621      	mov	r1, r4
   1bbc6:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1bbc8:	f007 fa87 	bl	230da <net_tcp_validate_seq>
   1bbcc:	b160      	cbz	r0, 1bbe8 <_tcp_synack_received+0x9c>
	net_stats.tcp.drop++;
}

static inline void net_stats_update_tcp_seg_rst(void)
{
	net_stats.tcp.rst++;
   1bbce:	4a40      	ldr	r2, [pc, #256]	; (1bcd0 <_tcp_synack_received+0x184>)
   1bbd0:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1bbd2:	3301      	adds	r3, #1
   1bbd4:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->connect_cb) {
   1bbd6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1bbd8:	2b00      	cmp	r3, #0
   1bbda:	d0f0      	beq.n	1bbbe <_tcp_synack_received+0x72>
			context->connect_cb(context, -ECONNREFUSED,
   1bbdc:	682a      	ldr	r2, [r5, #0]
   1bbde:	f06f 016e 	mvn.w	r1, #110	; 0x6e
   1bbe2:	4628      	mov	r0, r5
   1bbe4:	4798      	blx	r3
   1bbe6:	e7ea      	b.n	1bbbe <_tcp_synack_received+0x72>
	net_stats.tcp.ackerr++;
}

static inline void net_stats_update_tcp_seg_rsterr(void)
{
	net_stats.tcp.rsterr++;
   1bbe8:	4a39      	ldr	r2, [pc, #228]	; (1bcd0 <_tcp_synack_received+0x184>)
   1bbea:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1bbec:	3301      	adds	r3, #1
   1bbee:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1bbf0:	e7e5      	b.n	1bbbe <_tcp_synack_received+0x72>
	return pkt->family;
   1bbf2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1bbf6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_pkt_family(pkt) == AF_INET6) {
   1bbfa:	2b0a      	cmp	r3, #10
   1bbfc:	d1df      	bne.n	1bbbe <_tcp_synack_received+0x72>
			r6addr.sin6_family = AF_INET6;
   1bbfe:	f04f 0e0a 	mov.w	lr, #10
   1bc02:	f8ad e014 	strh.w	lr, [sp, #20]
			r6addr.sin6_port = tcp_hdr->src_port;
   1bc06:	8833      	ldrh	r3, [r6, #0]
   1bc08:	f8ad 3016 	strh.w	r3, [sp, #22]
	return pkt->frags->data;
   1bc0c:	68a7      	ldr	r7, [r4, #8]
			net_ipaddr_copy(&r6addr.sin6_addr,
   1bc0e:	ac16      	add	r4, sp, #88	; 0x58
   1bc10:	68bb      	ldr	r3, [r7, #8]
   1bc12:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1bc16:	6859      	ldr	r1, [r3, #4]
   1bc18:	689a      	ldr	r2, [r3, #8]
   1bc1a:	68db      	ldr	r3, [r3, #12]
   1bc1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1bc1e:	ac06      	add	r4, sp, #24
   1bc20:	ab16      	add	r3, sp, #88	; 0x58
   1bc22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1bc24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			l6addr.sin6_family = AF_INET6;
   1bc28:	f8ad e02c 	strh.w	lr, [sp, #44]	; 0x2c
			l6addr.sin6_port = htons(tcp_hdr->dst_port);
   1bc2c:	8872      	ldrh	r2, [r6, #2]
   1bc2e:	0a13      	lsrs	r3, r2, #8
   1bc30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1bc34:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
			net_ipaddr_copy(&l6addr.sin6_addr,
   1bc38:	ac1a      	add	r4, sp, #104	; 0x68
   1bc3a:	68bb      	ldr	r3, [r7, #8]
   1bc3c:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1bc40:	6859      	ldr	r1, [r3, #4]
   1bc42:	689a      	ldr	r2, [r3, #8]
   1bc44:	68db      	ldr	r3, [r3, #12]
   1bc46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1bc48:	ac0c      	add	r4, sp, #48	; 0x30
   1bc4a:	ab1e      	add	r3, sp, #120	; 0x78
   1bc4c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1bc50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		net_tcp_unregister(context->conn_handler);
   1bc54:	462c      	mov	r4, r5
	return net_conn_unregister(handle);
   1bc56:	f854 0f2c 	ldr.w	r0, [r4, #44]!
   1bc5a:	f008 fcdb 	bl	24614 <net_conn_unregister>
				       ntohs(tcp_hdr->src_port),
   1bc5e:	8832      	ldrh	r2, [r6, #0]
   1bc60:	0a13      	lsrs	r3, r2, #8
   1bc62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				       ntohs(tcp_hdr->dst_port),
   1bc66:	8871      	ldrh	r1, [r6, #2]
   1bc68:	0a0a      	lsrs	r2, r1, #8
   1bc6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		ret = net_tcp_register(raddr,
   1bc6e:	b292      	uxth	r2, r2
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1bc70:	9403      	str	r4, [sp, #12]
   1bc72:	9502      	str	r5, [sp, #8]
   1bc74:	4917      	ldr	r1, [pc, #92]	; (1bcd4 <_tcp_synack_received+0x188>)
   1bc76:	9101      	str	r1, [sp, #4]
   1bc78:	9200      	str	r2, [sp, #0]
   1bc7a:	b29b      	uxth	r3, r3
   1bc7c:	aa0b      	add	r2, sp, #44	; 0x2c
   1bc7e:	a905      	add	r1, sp, #20
   1bc80:	2006      	movs	r0, #6
   1bc82:	f008 fce5 	bl	24650 <net_conn_register>
		if (ret < 0) {
   1bc86:	2800      	cmp	r0, #0
   1bc88:	db1c      	blt.n	1bcc4 <_tcp_synack_received+0x178>
		net_tcp_change_state(context->tcp, NET_TCP_ESTABLISHED);
   1bc8a:	2104      	movs	r1, #4
   1bc8c:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1bc8e:	f006 ffba 	bl	22c06 <net_tcp_change_state>
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1bc92:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1bc96:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1bc9a:	f043 0304 	orr.w	r3, r3, #4
   1bc9e:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
		send_ack(context, raddr, false);
   1bca2:	2200      	movs	r2, #0
   1bca4:	a905      	add	r1, sp, #20
   1bca6:	4628      	mov	r0, r5
   1bca8:	f7ff ff30 	bl	1bb0c <send_ack>
		k_sem_give(&context->tcp->connect_wait);
   1bcac:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1bcae:	30ac      	adds	r0, #172	; 0xac
   1bcb0:	f00c fd3f 	bl	28732 <_impl_k_sem_give>
		if (context->connect_cb) {
   1bcb4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1bcb6:	2b00      	cmp	r3, #0
   1bcb8:	d081      	beq.n	1bbbe <_tcp_synack_received+0x72>
			context->connect_cb(context, 0, context->user_data);
   1bcba:	682a      	ldr	r2, [r5, #0]
   1bcbc:	2100      	movs	r1, #0
   1bcbe:	4628      	mov	r0, r5
   1bcc0:	4798      	blx	r3
   1bcc2:	e77c      	b.n	1bbbe <_tcp_synack_received+0x72>
			send_reset(context, raddr);
   1bcc4:	a905      	add	r1, sp, #20
   1bcc6:	4628      	mov	r0, r5
   1bcc8:	f7ff ff08 	bl	1badc <send_reset>
			return NET_DROP;
   1bccc:	e777      	b.n	1bbbe <_tcp_synack_received+0x72>
   1bcce:	bf00      	nop
   1bcd0:	20002950 	.word	0x20002950
   1bcd4:	0001c22d 	.word	0x0001c22d

0001bcd8 <create_udp_packet>:
{
   1bcd8:	b570      	push	{r4, r5, r6, lr}
	return pkt->family;
   1bcda:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
   1bcde:	f3c4 04c3 	ubfx	r4, r4, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1bce2:	2c0a      	cmp	r4, #10
   1bce4:	d118      	bne.n	1bd18 <create_udp_packet+0x40>
   1bce6:	461e      	mov	r6, r3
   1bce8:	4615      	mov	r5, r2
   1bcea:	4604      	mov	r4, r0
		pkt = net_ipv6_create(context, pkt, NULL, &addr6->sin6_addr);
   1bcec:	1d13      	adds	r3, r2, #4
   1bcee:	2200      	movs	r2, #0
   1bcf0:	f003 f9a4 	bl	1f03c <net_ipv6_create>
   1bcf4:	4601      	mov	r1, r0
				     net_pkt_ip_hdr_len(pkt) +
   1bcf6:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
				     net_pkt_ipv6_ext_len(pkt),
   1bcfa:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
		tmp = net_udp_insert(context, pkt,
   1bcfe:	886b      	ldrh	r3, [r5, #2]
   1bd00:	4402      	add	r2, r0
   1bd02:	4620      	mov	r0, r4
   1bd04:	f006 fd90 	bl	22828 <net_udp_insert>
		if (!tmp) {
   1bd08:	4605      	mov	r5, r0
   1bd0a:	b140      	cbz	r0, 1bd1e <create_udp_packet+0x46>
		r = net_ipv6_finalize(context, pkt);
   1bd0c:	4601      	mov	r1, r0
   1bd0e:	4620      	mov	r0, r4
   1bd10:	f003 fbf0 	bl	1f4f4 <net_ipv6_finalize>
	*out_pkt = pkt;
   1bd14:	6035      	str	r5, [r6, #0]
	return r;
   1bd16:	bd70      	pop	{r4, r5, r6, pc}
		return -EPROTONOSUPPORT;
   1bd18:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   1bd1c:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1bd1e:	f06f 000b 	mvn.w	r0, #11
}
   1bd22:	bd70      	pop	{r4, r5, r6, pc}

0001bd24 <send_data>:
{
   1bd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd28:	4604      	mov	r4, r0
   1bd2a:	4615      	mov	r5, r2
   1bd2c:	9e06      	ldr	r6, [sp, #24]
   1bd2e:	9f07      	ldr	r7, [sp, #28]
	context->send_cb = cb;
   1bd30:	6342      	str	r2, [r0, #52]	; 0x34
	context->user_data = user_data;
   1bd32:	6007      	str	r7, [r0, #0]
	pkt->token = token;
   1bd34:	610e      	str	r6, [r1, #16]
	if (context->flags & NET_CONTEXT_PROTO) {
   1bd36:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1bd3a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bd3e:	d011      	beq.n	1bd64 <send_data+0x40>
		return IPPROTO_TCP;
   1bd40:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1bd42:	2b11      	cmp	r3, #17
   1bd44:	d010      	beq.n	1bd68 <send_data+0x44>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1bd46:	2b06      	cmp	r3, #6
   1bd48:	d113      	bne.n	1bd72 <send_data+0x4e>
		int ret = net_tcp_send_data(context);
   1bd4a:	4620      	mov	r0, r4
   1bd4c:	f007 fbf8 	bl	23540 <net_tcp_send_data>
   1bd50:	4680      	mov	r8, r0
		if (cb) {
   1bd52:	b125      	cbz	r5, 1bd5e <send_data+0x3a>
			cb(context, ret, token, user_data);
   1bd54:	463b      	mov	r3, r7
   1bd56:	4632      	mov	r2, r6
   1bd58:	4601      	mov	r1, r0
   1bd5a:	4620      	mov	r0, r4
   1bd5c:	47a8      	blx	r5
}
   1bd5e:	4640      	mov	r0, r8
   1bd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return IPPROTO_UDP;
   1bd64:	2311      	movs	r3, #17
   1bd66:	e7ec      	b.n	1bd42 <send_data+0x1e>
		return net_send_data(pkt);
   1bd68:	4608      	mov	r0, r1
   1bd6a:	f7fe fb05 	bl	1a378 <net_send_data>
   1bd6e:	4680      	mov	r8, r0
   1bd70:	e7f5      	b.n	1bd5e <send_data+0x3a>
	return -EPROTONOSUPPORT;
   1bd72:	f06f 087a 	mvn.w	r8, #122	; 0x7a
   1bd76:	e7f2      	b.n	1bd5e <send_data+0x3a>

0001bd78 <net_context_get>:
{
   1bd78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (family == AF_INET) {
   1bd7c:	2802      	cmp	r0, #2
   1bd7e:	f000 80e9 	beq.w	1bf54 <net_context_get+0x1dc>
	if (family != AF_INET && family != AF_INET6) {
   1bd82:	280a      	cmp	r0, #10
   1bd84:	f040 80e9 	bne.w	1bf5a <net_context_get+0x1e2>
	if (type != SOCK_DGRAM && type != SOCK_STREAM) {
   1bd88:	1e4c      	subs	r4, r1, #1
   1bd8a:	b2e4      	uxtb	r4, r4
   1bd8c:	2c01      	cmp	r4, #1
   1bd8e:	f200 80e7 	bhi.w	1bf60 <net_context_get+0x1e8>
	if (ip_proto != IPPROTO_UDP && ip_proto != IPPROTO_TCP) {
   1bd92:	2a11      	cmp	r2, #17
   1bd94:	d002      	beq.n	1bd9c <net_context_get+0x24>
   1bd96:	2a06      	cmp	r2, #6
   1bd98:	f040 80e5 	bne.w	1bf66 <net_context_get+0x1ee>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1bd9c:	2901      	cmp	r1, #1
   1bd9e:	d01c      	beq.n	1bdda <net_context_get+0x62>
   1bda0:	2902      	cmp	r1, #2
   1bda2:	d01f      	beq.n	1bde4 <net_context_get+0x6c>
	if (!context) {
   1bda4:	2b00      	cmp	r3, #0
   1bda6:	f000 80e1 	beq.w	1bf6c <net_context_get+0x1f4>
   1bdaa:	461f      	mov	r7, r3
   1bdac:	4690      	mov	r8, r2
   1bdae:	460e      	mov	r6, r1
   1bdb0:	4681      	mov	r9, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1bdb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bdb6:	4870      	ldr	r0, [pc, #448]	; (1bf78 <net_context_get+0x200>)
   1bdb8:	f00c fcce 	bl	28758 <_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1bdbc:	2400      	movs	r4, #0
   1bdbe:	2c05      	cmp	r4, #5
   1bdc0:	f300 80c5 	bgt.w	1bf4e <net_context_get+0x1d6>
	return context->flags & NET_CONTEXT_IN_USE;
   1bdc4:	2568      	movs	r5, #104	; 0x68
   1bdc6:	4b6d      	ldr	r3, [pc, #436]	; (1bf7c <net_context_get+0x204>)
   1bdc8:	fb05 3504 	mla	r5, r5, r4, r3
   1bdcc:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
		if (net_context_is_used(&contexts[i])) {
   1bdd0:	f013 0f01 	tst.w	r3, #1
   1bdd4:	d00b      	beq.n	1bdee <net_context_get+0x76>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1bdd6:	3401      	adds	r4, #1
   1bdd8:	e7f1      	b.n	1bdbe <net_context_get+0x46>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1bdda:	2a11      	cmp	r2, #17
   1bddc:	d1e0      	bne.n	1bda0 <net_context_get+0x28>
		return -EOPNOTSUPP;
   1bdde:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1bde2:	e076      	b.n	1bed2 <net_context_get+0x15a>
	    (type == SOCK_DGRAM && ip_proto == IPPROTO_TCP)) {
   1bde4:	2a06      	cmp	r2, #6
   1bde6:	d1dd      	bne.n	1bda4 <net_context_get+0x2c>
		return -EOPNOTSUPP;
   1bde8:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1bdec:	e071      	b.n	1bed2 <net_context_get+0x15a>
		if (ip_proto == IPPROTO_TCP) {
   1bdee:	f1b8 0f06 	cmp.w	r8, #6
   1bdf2:	d071      	beq.n	1bed8 <net_context_get+0x160>
		contexts[i].flags = 0;
   1bdf4:	f04f 0a68 	mov.w	sl, #104	; 0x68
   1bdf8:	4b60      	ldr	r3, [pc, #384]	; (1bf7c <net_context_get+0x204>)
   1bdfa:	fb0a 3a04 	mla	sl, sl, r4, r3
   1bdfe:	2300      	movs	r3, #0
   1be00:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
		atomic_set(&contexts[i].refcount, 1);
   1be04:	f10a 0304 	add.w	r3, sl, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1be08:	2201      	movs	r2, #1
   1be0a:	f3bf 8f5b 	dmb	ish
   1be0e:	e853 1f00 	ldrex	r1, [r3]
   1be12:	e843 2000 	strex	r0, r2, [r3]
   1be16:	2800      	cmp	r0, #0
   1be18:	d1f9      	bne.n	1be0e <net_context_get+0x96>
   1be1a:	f3bf 8f5b 	dmb	ish
	if (family == AF_INET6) {
   1be1e:	f1b9 0f0a 	cmp.w	r9, #10
   1be22:	d06d      	beq.n	1bf00 <net_context_get+0x188>
	context->flags &= ~NET_CONTEXT_FAMILY;
   1be24:	2368      	movs	r3, #104	; 0x68
   1be26:	4a55      	ldr	r2, [pc, #340]	; (1bf7c <net_context_get+0x204>)
   1be28:	fb03 2304 	mla	r3, r3, r4, r2
   1be2c:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1be30:	f022 0210 	bic.w	r2, r2, #16
   1be34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (type == SOCK_STREAM) {
   1be38:	2e01      	cmp	r6, #1
   1be3a:	d068      	beq.n	1bf0e <net_context_get+0x196>
	context->flags &= ~NET_CONTEXT_TYPE;
   1be3c:	2368      	movs	r3, #104	; 0x68
   1be3e:	4a4f      	ldr	r2, [pc, #316]	; (1bf7c <net_context_get+0x204>)
   1be40:	fb03 2304 	mla	r3, r3, r4, r2
   1be44:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1be48:	f022 0220 	bic.w	r2, r2, #32
   1be4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (ip_proto == IPPROTO_TCP) {
   1be50:	f1b8 0f06 	cmp.w	r8, #6
   1be54:	d066      	beq.n	1bf24 <net_context_get+0x1ac>
	context->flags &= ~NET_CONTEXT_PROTO;
   1be56:	2368      	movs	r3, #104	; 0x68
   1be58:	4a48      	ldr	r2, [pc, #288]	; (1bf7c <net_context_get+0x204>)
   1be5a:	fb03 2304 	mla	r3, r3, r4, r2
   1be5e:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1be62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1be66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   1be6a:	f8df 8110 	ldr.w	r8, [pc, #272]	; 1bf7c <net_context_get+0x204>
   1be6e:	2568      	movs	r5, #104	; 0x68
   1be70:	fb05 f504 	mul.w	r5, r5, r4
   1be74:	eb08 0305 	add.w	r3, r8, r5
   1be78:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1be7c:	f042 0201 	orr.w	r2, r2, #1
   1be80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].iface = 0;
   1be84:	2600      	movs	r6, #0
   1be86:	f883 605c 	strb.w	r6, [r3, #92]	; 0x5c
		memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   1be8a:	f105 0010 	add.w	r0, r5, #16
   1be8e:	4440      	add	r0, r8
   1be90:	2218      	movs	r2, #24
   1be92:	4631      	mov	r1, r6
   1be94:	3004      	adds	r0, #4
   1be96:	f00d fc1f 	bl	296d8 <memset>
		memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
   1be9a:	3508      	adds	r5, #8
   1be9c:	4445      	add	r5, r8
   1be9e:	220c      	movs	r2, #12
   1bea0:	4631      	mov	r1, r6
   1bea2:	4628      	mov	r0, r5
   1bea4:	f00d fc18 	bl	296d8 <memset>
		if (family == AF_INET6) {
   1bea8:	f1b9 0f0a 	cmp.w	r9, #10
   1beac:	d045      	beq.n	1bf3a <net_context_get+0x1c2>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   1beae:	2068      	movs	r0, #104	; 0x68
   1beb0:	fb00 f404 	mul.w	r4, r0, r4
   1beb4:	3440      	adds	r4, #64	; 0x40
   1beb6:	4831      	ldr	r0, [pc, #196]	; (1bf7c <net_context_get+0x204>)
   1beb8:	4420      	add	r0, r4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1beba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bebe:	2101      	movs	r1, #1
   1bec0:	3004      	adds	r0, #4
   1bec2:	f00c fc2d 	bl	28720 <_impl_k_sem_init>
		*context = &contexts[i];
   1bec6:	f8c7 a000 	str.w	sl, [r7]
		ret = 0;
   1beca:	2400      	movs	r4, #0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1becc:	482a      	ldr	r0, [pc, #168]	; (1bf78 <net_context_get+0x200>)
   1bece:	f00c fc30 	bl	28732 <_impl_k_sem_give>
}
   1bed2:	4620      	mov	r0, r4
   1bed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			contexts[i].tcp = net_tcp_alloc(&contexts[i]);
   1bed8:	2568      	movs	r5, #104	; 0x68
   1beda:	4b28      	ldr	r3, [pc, #160]	; (1bf7c <net_context_get+0x204>)
   1bedc:	fb05 3504 	mla	r5, r5, r4, r3
   1bee0:	4628      	mov	r0, r5
   1bee2:	f006 fdab 	bl	22a3c <net_tcp_alloc>
   1bee6:	6628      	str	r0, [r5, #96]	; 0x60
			if (!contexts[i].tcp) {
   1bee8:	2800      	cmp	r0, #0
   1beea:	d042      	beq.n	1bf72 <net_context_get+0x1fa>
			k_delayed_work_init(&contexts[i].tcp->ack_timer,
   1beec:	4924      	ldr	r1, [pc, #144]	; (1bf80 <net_context_get+0x208>)
   1beee:	3008      	adds	r0, #8
   1bef0:	f00d f9f0 	bl	292d4 <k_delayed_work_init>
			k_delayed_work_init(&contexts[i].tcp->fin_timer,
   1bef4:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1bef6:	4923      	ldr	r1, [pc, #140]	; (1bf84 <net_context_get+0x20c>)
   1bef8:	3030      	adds	r0, #48	; 0x30
   1befa:	f00d f9eb 	bl	292d4 <k_delayed_work_init>
   1befe:	e779      	b.n	1bdf4 <net_context_get+0x7c>
		context->flags |= NET_CONTEXT_FAMILY;
   1bf00:	f89a 205d 	ldrb.w	r2, [sl, #93]	; 0x5d
   1bf04:	f042 0210 	orr.w	r2, r2, #16
   1bf08:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
   1bf0c:	e794      	b.n	1be38 <net_context_get+0xc0>
		context->flags |= NET_CONTEXT_TYPE;
   1bf0e:	2368      	movs	r3, #104	; 0x68
   1bf10:	4a1a      	ldr	r2, [pc, #104]	; (1bf7c <net_context_get+0x204>)
   1bf12:	fb03 2304 	mla	r3, r3, r4, r2
   1bf16:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1bf1a:	f042 0220 	orr.w	r2, r2, #32
   1bf1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1bf22:	e795      	b.n	1be50 <net_context_get+0xd8>
		context->flags |= NET_CONTEXT_PROTO;
   1bf24:	2368      	movs	r3, #104	; 0x68
   1bf26:	4a15      	ldr	r2, [pc, #84]	; (1bf7c <net_context_get+0x204>)
   1bf28:	fb03 2304 	mla	r3, r3, r4, r2
   1bf2c:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1bf30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1bf34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1bf38:	e797      	b.n	1be6a <net_context_get+0xf2>
			addr6->sin6_port = find_available_port(&contexts[i],
   1bf3a:	4629      	mov	r1, r5
   1bf3c:	4650      	mov	r0, sl
   1bf3e:	f7ff fcf1 	bl	1b924 <find_available_port>
   1bf42:	8068      	strh	r0, [r5, #2]
			if (!addr6->sin6_port) {
   1bf44:	2800      	cmp	r0, #0
   1bf46:	d1b2      	bne.n	1beae <net_context_get+0x136>
				return -EADDRINUSE;
   1bf48:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   1bf4c:	e7c1      	b.n	1bed2 <net_context_get+0x15a>
	int i, ret = -ENOENT;
   1bf4e:	f06f 0401 	mvn.w	r4, #1
   1bf52:	e7bb      	b.n	1becc <net_context_get+0x154>
		return -EPFNOSUPPORT;
   1bf54:	f06f 045f 	mvn.w	r4, #95	; 0x5f
   1bf58:	e7bb      	b.n	1bed2 <net_context_get+0x15a>
		return -EAFNOSUPPORT;
   1bf5a:	f06f 0469 	mvn.w	r4, #105	; 0x69
   1bf5e:	e7b8      	b.n	1bed2 <net_context_get+0x15a>
		return -EPROTOTYPE;
   1bf60:	f06f 046a 	mvn.w	r4, #106	; 0x6a
   1bf64:	e7b5      	b.n	1bed2 <net_context_get+0x15a>
		return -EPROTONOSUPPORT;
   1bf66:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   1bf6a:	e7b2      	b.n	1bed2 <net_context_get+0x15a>
		return -EINVAL;
   1bf6c:	f06f 0415 	mvn.w	r4, #21
   1bf70:	e7af      	b.n	1bed2 <net_context_get+0x15a>
				return -ENOBUFS;
   1bf72:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1bf76:	e7ac      	b.n	1bed2 <net_context_get+0x15a>
   1bf78:	20001d10 	.word	0x20001d10
   1bf7c:	20001aa0 	.word	0x20001aa0
   1bf80:	0001c051 	.word	0x0001c051
   1bf84:	0001c045 	.word	0x0001c045

0001bf88 <net_context_ref>:
	int old_rc = atomic_inc(&context->refcount);
   1bf88:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1bf8a:	f3bf 8f5b 	dmb	ish
   1bf8e:	e853 0f00 	ldrex	r0, [r3]
   1bf92:	1c42      	adds	r2, r0, #1
   1bf94:	e843 2100 	strex	r1, r2, [r3]
   1bf98:	2900      	cmp	r1, #0
   1bf9a:	d1f8      	bne.n	1bf8e <net_context_ref+0x6>
   1bf9c:	f3bf 8f5b 	dmb	ish
}
   1bfa0:	3001      	adds	r0, #1
   1bfa2:	4770      	bx	lr

0001bfa4 <net_context_unref>:
{
   1bfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int old_rc = atomic_dec(&context->refcount);
   1bfa6:	1d02      	adds	r2, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1bfa8:	f3bf 8f5b 	dmb	ish
   1bfac:	e852 3f00 	ldrex	r3, [r2]
   1bfb0:	1e59      	subs	r1, r3, #1
   1bfb2:	e842 1400 	strex	r4, r1, [r2]
   1bfb6:	2c00      	cmp	r4, #0
   1bfb8:	d1f8      	bne.n	1bfac <net_context_unref+0x8>
   1bfba:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
   1bfbe:	2b01      	cmp	r3, #1
   1bfc0:	d001      	beq.n	1bfc6 <net_context_unref+0x22>
		return old_rc - 1;
   1bfc2:	1e58      	subs	r0, r3, #1
   1bfc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bfc6:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1bfc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bfcc:	481b      	ldr	r0, [pc, #108]	; (1c03c <net_context_unref+0x98>)
   1bfce:	f00c fbc3 	bl	28758 <_impl_k_sem_take>
	if (context->tcp) {
   1bfd2:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1bfd4:	b13b      	cbz	r3, 1bfe6 <net_context_unref+0x42>
   1bfd6:	2500      	movs	r5, #0
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1bfd8:	2d00      	cmp	r5, #0
   1bfda:	dd15      	ble.n	1c008 <net_context_unref+0x64>
		net_tcp_release(context->tcp);
   1bfdc:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1bfde:	f006 fe3d 	bl	22c5c <net_tcp_release>
		context->tcp = NULL;
   1bfe2:	2300      	movs	r3, #0
   1bfe4:	6623      	str	r3, [r4, #96]	; 0x60
	if (context->conn_handler) {
   1bfe6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1bfe8:	b118      	cbz	r0, 1bff2 <net_context_unref+0x4e>
		net_conn_unregister(context->conn_handler);
   1bfea:	f008 fb13 	bl	24614 <net_conn_unregister>
		context->conn_handler = NULL;
   1bfee:	2300      	movs	r3, #0
   1bff0:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1bff2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	context->flags &= ~NET_CONTEXT_IN_USE;
   1bff6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   1bffa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1bffe:	480f      	ldr	r0, [pc, #60]	; (1c03c <net_context_unref+0x98>)
   1c000:	f00c fb97 	bl	28732 <_impl_k_sem_give>
	return 0;
   1c004:	2000      	movs	r0, #0
}
   1c006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (tcp_backlog[i].tcp != context->tcp) {
   1c008:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1c00c:	0113      	lsls	r3, r2, #4
   1c00e:	4a0c      	ldr	r2, [pc, #48]	; (1c040 <net_context_unref+0x9c>)
   1c010:	58d2      	ldr	r2, [r2, r3]
   1c012:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c014:	429a      	cmp	r2, r3
   1c016:	d001      	beq.n	1c01c <net_context_unref+0x78>
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1c018:	3501      	adds	r5, #1
   1c01a:	e7dd      	b.n	1bfd8 <net_context_unref+0x34>
			k_delayed_work_cancel(&tcp_backlog[i].ack_timer);
   1c01c:	4f08      	ldr	r7, [pc, #32]	; (1c040 <net_context_unref+0x9c>)
   1c01e:	00ae      	lsls	r6, r5, #2
   1c020:	1972      	adds	r2, r6, r5
   1c022:	0113      	lsls	r3, r2, #4
   1c024:	3328      	adds	r3, #40	; 0x28
   1c026:	18f8      	adds	r0, r7, r3
   1c028:	f00d f972 	bl	29310 <k_delayed_work_cancel>
			memset(&tcp_backlog[i], 0, sizeof(tcp_backlog[i]));
   1c02c:	442e      	add	r6, r5
   1c02e:	0130      	lsls	r0, r6, #4
   1c030:	2250      	movs	r2, #80	; 0x50
   1c032:	2100      	movs	r1, #0
   1c034:	4438      	add	r0, r7
   1c036:	f00d fb4f 	bl	296d8 <memset>
   1c03a:	e7ed      	b.n	1c018 <net_context_unref+0x74>
   1c03c:	20001d10 	.word	0x20001d10
   1c040:	20001d28 	.word	0x20001d28

0001c044 <handle_fin_timeout>:
{
   1c044:	b508      	push	{r3, lr}
	net_context_unref(tcp->context);
   1c046:	f850 0c30 	ldr.w	r0, [r0, #-48]
   1c04a:	f7ff ffab 	bl	1bfa4 <net_context_unref>
   1c04e:	bd08      	pop	{r3, pc}

0001c050 <handle_ack_timeout>:
	return (enum net_tcp_state)tcp->state;
   1c050:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1c054:	f3c3 3343 	ubfx	r3, r3, #13, #4
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   1c058:	2b06      	cmp	r3, #6
   1c05a:	d000      	beq.n	1c05e <handle_ack_timeout+0xe>
   1c05c:	4770      	bx	lr
{
   1c05e:	b510      	push	{r4, lr}
   1c060:	f1a0 0208 	sub.w	r2, r0, #8
   1c064:	4604      	mov	r4, r0
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   1c066:	2100      	movs	r1, #0
   1c068:	4610      	mov	r0, r2
   1c06a:	f006 fdcc 	bl	22c06 <net_tcp_change_state>
		net_context_unref(tcp->context);
   1c06e:	f854 0c08 	ldr.w	r0, [r4, #-8]
   1c072:	f7ff ff97 	bl	1bfa4 <net_context_unref>
   1c076:	bd10      	pop	{r4, pc}

0001c078 <tcp_synack_received>:
NET_CONN_CB(tcp_synack_received)
   1c078:	b570      	push	{r4, r5, r6, lr}
   1c07a:	4605      	mov	r5, r0
   1c07c:	460e      	mov	r6, r1
   1c07e:	4614      	mov	r4, r2
   1c080:	4610      	mov	r0, r2
   1c082:	f7ff ff81 	bl	1bf88 <net_context_ref>
   1c086:	4622      	mov	r2, r4
   1c088:	4631      	mov	r1, r6
   1c08a:	4628      	mov	r0, r5
   1c08c:	f7ff fd5e 	bl	1bb4c <_tcp_synack_received>
   1c090:	4605      	mov	r5, r0
   1c092:	4620      	mov	r0, r4
   1c094:	f7ff ff86 	bl	1bfa4 <net_context_unref>
   1c098:	4628      	mov	r0, r5
   1c09a:	bd70      	pop	{r4, r5, r6, pc}

0001c09c <_tcp_established>:
{
   1c09c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c0a0:	b087      	sub	sp, #28
   1c0a2:	4607      	mov	r7, r0
   1c0a4:	460e      	mov	r6, r1
   1c0a6:	4614      	mov	r4, r2
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1c0a8:	a901      	add	r1, sp, #4
   1c0aa:	4630      	mov	r0, r6
   1c0ac:	f006 ff9a 	bl	22fe4 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1c0b0:	2800      	cmp	r0, #0
   1c0b2:	f000 80b5 	beq.w	1c220 <_tcp_established+0x184>
   1c0b6:	4605      	mov	r5, r0
	if (net_tcp_get_state(context->tcp) < NET_TCP_ESTABLISHED) {
   1c0b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c0ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1c0be:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1c0c2:	2b03      	cmp	r3, #3
   1c0c4:	d804      	bhi.n	1c0d0 <_tcp_established+0x34>
		return NET_DROP;
   1c0c6:	2502      	movs	r5, #2
}
   1c0c8:	4628      	mov	r0, r5
   1c0ca:	b007      	add	sp, #28
   1c0cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	tcp_flags = NET_TCP_FLAGS(tcp_hdr);
   1c0d0:	f890 800d 	ldrb.w	r8, [r0, #13]
	if (tcp_flags & NET_TCP_ACK) {
   1c0d4:	f018 0f10 	tst.w	r8, #16
   1c0d8:	d116      	bne.n	1c108 <_tcp_established+0x6c>
	if (tcp_flags & NET_TCP_RST) {
   1c0da:	f018 0f04 	tst.w	r8, #4
   1c0de:	d121      	bne.n	1c124 <_tcp_established+0x88>
	return ((u16_t)src[0] << 8) | src[1];
   1c0e0:	792a      	ldrb	r2, [r5, #4]
   1c0e2:	796b      	ldrb	r3, [r5, #5]
   1c0e4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   1c0e8:	79a9      	ldrb	r1, [r5, #6]
   1c0ea:	79eb      	ldrb	r3, [r5, #7]
   1c0ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1c0f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			    context->tcp->send_ack) < 0) {
   1c0f4:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   1c0f6:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline s32_t net_tcp_seq_cmp(u32_t seq1, u32_t seq2)
{
	return (s32_t)(seq1 - seq2);
   1c0fa:	1a99      	subs	r1, r3, r2
   1c0fc:	2900      	cmp	r1, #0
   1c0fe:	db2e      	blt.n	1c15e <_tcp_established+0xc2>
	if (sys_get_be32(tcp_hdr->seq) - context->tcp->send_ack) {
   1c100:	429a      	cmp	r2, r3
   1c102:	d033      	beq.n	1c16c <_tcp_established+0xd0>
		return NET_DROP;
   1c104:	2502      	movs	r5, #2
   1c106:	e7df      	b.n	1c0c8 <_tcp_established+0x2c>
	return ((u16_t)src[0] << 8) | src[1];
   1c108:	7a03      	ldrb	r3, [r0, #8]
   1c10a:	7a41      	ldrb	r1, [r0, #9]
   1c10c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1c110:	7a82      	ldrb	r2, [r0, #10]
   1c112:	7ac3      	ldrb	r3, [r0, #11]
   1c114:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		net_tcp_ack_received(context,
   1c118:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1c11c:	4620      	mov	r0, r4
   1c11e:	f007 fa49 	bl	235b4 <net_tcp_ack_received>
   1c122:	e7da      	b.n	1c0da <_tcp_established+0x3e>
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1c124:	4631      	mov	r1, r6
   1c126:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c128:	f006 ffd7 	bl	230da <net_tcp_validate_seq>
   1c12c:	b928      	cbnz	r0, 1c13a <_tcp_established+0x9e>
   1c12e:	4a3d      	ldr	r2, [pc, #244]	; (1c224 <_tcp_established+0x188>)
   1c130:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1c132:	3301      	adds	r3, #1
   1c134:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1c136:	2502      	movs	r5, #2
   1c138:	e7c6      	b.n	1c0c8 <_tcp_established+0x2c>
	net_stats.tcp.rst++;
   1c13a:	4a3a      	ldr	r2, [pc, #232]	; (1c224 <_tcp_established+0x188>)
   1c13c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1c13e:	3301      	adds	r3, #1
   1c140:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->recv_cb) {
   1c142:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1c144:	b135      	cbz	r5, 1c154 <_tcp_established+0xb8>
					 context->tcp->recv_user_data);
   1c146:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, -ECONNRESET,
   1c148:	685b      	ldr	r3, [r3, #4]
   1c14a:	f06f 0267 	mvn.w	r2, #103	; 0x67
   1c14e:	2100      	movs	r1, #0
   1c150:	4620      	mov	r0, r4
   1c152:	47a8      	blx	r5
		net_context_unref(context);
   1c154:	4620      	mov	r0, r4
   1c156:	f7ff ff25 	bl	1bfa4 <net_context_unref>
		return NET_DROP;
   1c15a:	2502      	movs	r5, #2
   1c15c:	e7b4      	b.n	1c0c8 <_tcp_established+0x2c>
		send_ack(context, &conn->remote_addr, true);
   1c15e:	2201      	movs	r2, #1
   1c160:	4639      	mov	r1, r7
   1c162:	4620      	mov	r0, r4
   1c164:	f7ff fcd2 	bl	1bb0c <send_ack>
		return NET_DROP;
   1c168:	2502      	movs	r5, #2
   1c16a:	e7ad      	b.n	1c0c8 <_tcp_established+0x2c>
	set_appdata_values(pkt, IPPROTO_TCP);
   1c16c:	2106      	movs	r1, #6
   1c16e:	4630      	mov	r0, r6
   1c170:	f7ff fc25 	bl	1b9be <set_appdata_values>
	return pkt->appdatalen;
   1c174:	f8b6 9030 	ldrh.w	r9, [r6, #48]	; 0x30
	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   1c178:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c17a:	f006 fcc5 	bl	22b08 <net_tcp_get_recv_wnd>
   1c17e:	4581      	cmp	r9, r0
   1c180:	d901      	bls.n	1c186 <_tcp_established+0xea>
		return NET_DROP;
   1c182:	2502      	movs	r5, #2
   1c184:	e7a0      	b.n	1c0c8 <_tcp_established+0x2c>
	ret = packet_received(conn, pkt, context->tcp->recv_user_data);
   1c186:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c188:	685a      	ldr	r2, [r3, #4]
   1c18a:	4631      	mov	r1, r6
   1c18c:	4638      	mov	r0, r7
   1c18e:	f7ff fc4b 	bl	1ba28 <packet_received>
   1c192:	4605      	mov	r5, r0
	context->tcp->send_ack += data_len;
   1c194:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1c196:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1c19a:	444b      	add	r3, r9
   1c19c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	if (tcp_flags & NET_TCP_FIN) {
   1c1a0:	f018 0f01 	tst.w	r8, #1
   1c1a4:	d022      	beq.n	1c1ec <_tcp_established+0x150>
		context->tcp->fin_rcvd = 1;
   1c1a6:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1c1a8:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   1c1ac:	f043 0304 	orr.w	r3, r3, #4
   1c1b0:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
		if (net_tcp_get_state(context->tcp) == NET_TCP_ESTABLISHED) {
   1c1b4:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c1b6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   1c1ba:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1c1be:	2b04      	cmp	r3, #4
   1c1c0:	d02a      	beq.n	1c218 <_tcp_established+0x17c>
		context->tcp->send_ack += 1;
   1c1c2:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1c1c4:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1c1c8:	3301      	adds	r3, #1
   1c1ca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		if (context->recv_cb) {
   1c1ce:	6b26      	ldr	r6, [r4, #48]	; 0x30
   1c1d0:	b12e      	cbz	r6, 1c1de <_tcp_established+0x142>
					 context->tcp->recv_user_data);
   1c1d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, 0,
   1c1d4:	685b      	ldr	r3, [r3, #4]
   1c1d6:	2200      	movs	r2, #0
   1c1d8:	4611      	mov	r1, r2
   1c1da:	4620      	mov	r0, r4
   1c1dc:	47b0      	blx	r6
		k_delayed_work_submit(&context->tcp->ack_timer, ACK_TIMEOUT);
   1c1de:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1c1e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c1e4:	3108      	adds	r1, #8
   1c1e6:	4810      	ldr	r0, [pc, #64]	; (1c228 <_tcp_established+0x18c>)
   1c1e8:	f00d f8ec 	bl	293c4 <k_delayed_work_submit_to_queue>
	send_ack(context, &conn->remote_addr, false);
   1c1ec:	2200      	movs	r2, #0
   1c1ee:	4639      	mov	r1, r7
   1c1f0:	4620      	mov	r0, r4
   1c1f2:	f7ff fc8b 	bl	1bb0c <send_ack>
	if (sys_slist_is_empty(&context->tcp->sent_list)
   1c1f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c1f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   1c1fc:	2a00      	cmp	r2, #0
   1c1fe:	f47f af63 	bne.w	1c0c8 <_tcp_established+0x2c>
	    && context->tcp->fin_sent) {
   1c202:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
   1c206:	f003 0306 	and.w	r3, r3, #6
   1c20a:	2b06      	cmp	r3, #6
   1c20c:	f47f af5c 	bne.w	1c0c8 <_tcp_established+0x2c>
		net_context_unref(context);
   1c210:	4620      	mov	r0, r4
   1c212:	f7ff fec7 	bl	1bfa4 <net_context_unref>
   1c216:	e757      	b.n	1c0c8 <_tcp_established+0x2c>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSE_WAIT);
   1c218:	2105      	movs	r1, #5
   1c21a:	f006 fcf4 	bl	22c06 <net_tcp_change_state>
   1c21e:	e7d0      	b.n	1c1c2 <_tcp_established+0x126>
		return NET_DROP;
   1c220:	2502      	movs	r5, #2
   1c222:	e751      	b.n	1c0c8 <_tcp_established+0x2c>
   1c224:	20002950 	.word	0x20002950
   1c228:	20002a70 	.word	0x20002a70

0001c22c <tcp_established>:
NET_CONN_CB(tcp_established)
   1c22c:	b570      	push	{r4, r5, r6, lr}
   1c22e:	4605      	mov	r5, r0
   1c230:	460e      	mov	r6, r1
   1c232:	4614      	mov	r4, r2
   1c234:	4610      	mov	r0, r2
   1c236:	f7ff fea7 	bl	1bf88 <net_context_ref>
   1c23a:	4622      	mov	r2, r4
   1c23c:	4631      	mov	r1, r6
   1c23e:	4628      	mov	r0, r5
   1c240:	f7ff ff2c 	bl	1c09c <_tcp_established>
   1c244:	4605      	mov	r5, r0
   1c246:	4620      	mov	r0, r4
   1c248:	f7ff feac 	bl	1bfa4 <net_context_unref>
   1c24c:	4628      	mov	r0, r5
   1c24e:	bd70      	pop	{r4, r5, r6, pc}

0001c250 <net_context_put>:
	if (!PART_OF_ARRAY(contexts, context)) {
   1c250:	b390      	cbz	r0, 1c2b8 <net_context_put+0x68>
{
   1c252:	b510      	push	{r4, lr}
   1c254:	4604      	mov	r4, r0
	if (!PART_OF_ARRAY(contexts, context)) {
   1c256:	4a1d      	ldr	r2, [pc, #116]	; (1c2cc <net_context_put+0x7c>)
   1c258:	4290      	cmp	r0, r2
   1c25a:	d330      	bcc.n	1c2be <net_context_put+0x6e>
   1c25c:	f502 721c 	add.w	r2, r2, #624	; 0x270
   1c260:	4290      	cmp	r0, r2
   1c262:	d22f      	bcs.n	1c2c4 <net_context_put+0x74>
	context->connect_cb = NULL;
   1c264:	2200      	movs	r2, #0
   1c266:	6382      	str	r2, [r0, #56]	; 0x38
	context->recv_cb = NULL;
   1c268:	6302      	str	r2, [r0, #48]	; 0x30
	context->send_cb = NULL;
   1c26a:	6342      	str	r2, [r0, #52]	; 0x34
	if (context->flags & NET_CONTEXT_PROTO) {
   1c26c:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   1c270:	f012 0f40 	tst.w	r2, #64	; 0x40
   1c274:	d007      	beq.n	1c286 <net_context_put+0x36>
		return IPPROTO_TCP;
   1c276:	2106      	movs	r1, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c278:	2906      	cmp	r1, #6
   1c27a:	d006      	beq.n	1c28a <net_context_put+0x3a>
	net_context_unref(context);
   1c27c:	4620      	mov	r0, r4
   1c27e:	f7ff fe91 	bl	1bfa4 <net_context_unref>
	return 0;
   1c282:	2000      	movs	r0, #0
   1c284:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1c286:	2111      	movs	r1, #17
   1c288:	e7f6      	b.n	1c278 <net_context_put+0x28>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1c28a:	f3c2 0241 	ubfx	r2, r2, #1, #2
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   1c28e:	2a02      	cmp	r2, #2
   1c290:	d001      	beq.n	1c296 <net_context_put+0x46>
   1c292:	2a03      	cmp	r2, #3
   1c294:	d1f2      	bne.n	1c27c <net_context_put+0x2c>
		    && !context->tcp->fin_rcvd) {
   1c296:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1c298:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
   1c29c:	f013 0f04 	tst.w	r3, #4
   1c2a0:	d1ec      	bne.n	1c27c <net_context_put+0x2c>
   1c2a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c2a6:	3130      	adds	r1, #48	; 0x30
   1c2a8:	4809      	ldr	r0, [pc, #36]	; (1c2d0 <net_context_put+0x80>)
   1c2aa:	f00d f88b 	bl	293c4 <k_delayed_work_submit_to_queue>
			queue_fin(context);
   1c2ae:	4620      	mov	r0, r4
   1c2b0:	f7ff fb59 	bl	1b966 <queue_fin>
			return 0;
   1c2b4:	2000      	movs	r0, #0
   1c2b6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1c2b8:	f06f 0015 	mvn.w	r0, #21
   1c2bc:	4770      	bx	lr
   1c2be:	f06f 0015 	mvn.w	r0, #21
   1c2c2:	bd10      	pop	{r4, pc}
   1c2c4:	f06f 0015 	mvn.w	r0, #21
}
   1c2c8:	bd10      	pop	{r4, pc}
   1c2ca:	bf00      	nop
   1c2cc:	20001aa0 	.word	0x20001aa0
   1c2d0:	20002a70 	.word	0x20002a70

0001c2d4 <net_context_bind>:
	if (context->conn_handler) {
   1c2d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1c2d6:	2b00      	cmp	r3, #0
   1c2d8:	d15c      	bne.n	1c394 <net_context_bind+0xc0>
	if (addr->sa_family == AF_INET6) {
   1c2da:	880b      	ldrh	r3, [r1, #0]
   1c2dc:	2b0a      	cmp	r3, #10
   1c2de:	d15d      	bne.n	1c39c <net_context_bind+0xc8>
{
   1c2e0:	b570      	push	{r4, r5, r6, lr}
   1c2e2:	b082      	sub	sp, #8
		struct net_if *iface = NULL;
   1c2e4:	2300      	movs	r3, #0
   1c2e6:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1c2e8:	2a17      	cmp	r2, #23
   1c2ea:	d945      	bls.n	1c378 <net_context_bind+0xa4>
   1c2ec:	460d      	mov	r5, r1
   1c2ee:	4604      	mov	r4, r0
	return addr->s6_addr[0] == 0xFF;
   1c2f0:	790b      	ldrb	r3, [r1, #4]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1c2f2:	2bff      	cmp	r3, #255	; 0xff
   1c2f4:	d009      	beq.n	1c30a <net_context_bind+0x36>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c2f6:	684b      	ldr	r3, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c2f8:	b983      	cbnz	r3, 1c31c <net_context_bind+0x48>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c2fa:	688b      	ldr	r3, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c2fc:	bb2b      	cbnz	r3, 1c34a <net_context_bind+0x76>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c2fe:	68cb      	ldr	r3, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c300:	bb2b      	cbnz	r3, 1c34e <net_context_bind+0x7a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1c302:	690b      	ldr	r3, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c304:	b32b      	cbz	r3, 1c352 <net_context_bind+0x7e>
   1c306:	2300      	movs	r3, #0
   1c308:	e009      	b.n	1c31e <net_context_bind+0x4a>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   1c30a:	a901      	add	r1, sp, #4
   1c30c:	1d28      	adds	r0, r5, #4
   1c30e:	f7fe fccb 	bl	1aca8 <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   1c312:	4606      	mov	r6, r0
   1c314:	2800      	cmp	r0, #0
   1c316:	d034      	beq.n	1c382 <net_context_bind+0xae>
			ptr = &maddr->address.in6_addr;
   1c318:	3608      	adds	r6, #8
   1c31a:	e007      	b.n	1c32c <net_context_bind+0x58>
   1c31c:	2300      	movs	r3, #0
		} else if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1c31e:	b1d3      	cbz	r3, 1c356 <net_context_bind+0x82>
			iface = net_if_get_default();
   1c320:	f7fe fa4c 	bl	1a7bc <net_if_get_default>
   1c324:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   1c326:	f002 fde9 	bl	1eefc <net_ipv6_unspecified_address>
   1c32a:	4606      	mov	r6, r0
		if (!iface) {
   1c32c:	9801      	ldr	r0, [sp, #4]
   1c32e:	b370      	cbz	r0, 1c38e <net_context_bind+0xba>
	context->iface = net_if_get_by_iface(iface);
   1c330:	f7ff f9ec 	bl	1b70c <net_if_get_by_iface>
   1c334:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1c338:	230a      	movs	r3, #10
   1c33a:	8123      	strh	r3, [r4, #8]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   1c33c:	60e6      	str	r6, [r4, #12]
		if (addr6->sin6_port) {
   1c33e:	8869      	ldrh	r1, [r5, #2]
   1c340:	b989      	cbnz	r1, 1c366 <net_context_bind+0x92>
				net_sin6_ptr(&context->local)->sin6_port;
   1c342:	8963      	ldrh	r3, [r4, #10]
			addr6->sin6_port =
   1c344:	806b      	strh	r3, [r5, #2]
		return 0;
   1c346:	2300      	movs	r3, #0
   1c348:	e018      	b.n	1c37c <net_context_bind+0xa8>
   1c34a:	2300      	movs	r3, #0
   1c34c:	e7e7      	b.n	1c31e <net_context_bind+0x4a>
   1c34e:	2300      	movs	r3, #0
   1c350:	e7e5      	b.n	1c31e <net_context_bind+0x4a>
   1c352:	2301      	movs	r3, #1
   1c354:	e7e3      	b.n	1c31e <net_context_bind+0x4a>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   1c356:	a901      	add	r1, sp, #4
   1c358:	1d28      	adds	r0, r5, #4
   1c35a:	f7fe fa5b 	bl	1a814 <net_if_ipv6_addr_lookup>
			if (!ifaddr) {
   1c35e:	4606      	mov	r6, r0
   1c360:	b190      	cbz	r0, 1c388 <net_context_bind+0xb4>
			ptr = &ifaddr->address.in6_addr;
   1c362:	3604      	adds	r6, #4
   1c364:	e7e2      	b.n	1c32c <net_context_bind+0x58>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   1c366:	462a      	mov	r2, r5
   1c368:	4618      	mov	r0, r3
   1c36a:	f7ff fa9f 	bl	1b8ac <check_used_port>
			if (!ret) {
   1c36e:	4603      	mov	r3, r0
   1c370:	b920      	cbnz	r0, 1c37c <net_context_bind+0xa8>
					addr6->sin6_port;
   1c372:	886a      	ldrh	r2, [r5, #2]
				net_sin6_ptr(&context->local)->sin6_port =
   1c374:	8162      	strh	r2, [r4, #10]
   1c376:	e001      	b.n	1c37c <net_context_bind+0xa8>
			return -EINVAL;
   1c378:	f06f 0315 	mvn.w	r3, #21
}
   1c37c:	4618      	mov	r0, r3
   1c37e:	b002      	add	sp, #8
   1c380:	bd70      	pop	{r4, r5, r6, pc}
				return -ENOENT;
   1c382:	f06f 0301 	mvn.w	r3, #1
   1c386:	e7f9      	b.n	1c37c <net_context_bind+0xa8>
				return -ENOENT;
   1c388:	f06f 0301 	mvn.w	r3, #1
   1c38c:	e7f6      	b.n	1c37c <net_context_bind+0xa8>
			return -EADDRNOTAVAIL;
   1c38e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
   1c392:	e7f3      	b.n	1c37c <net_context_bind+0xa8>
		return -EISCONN;
   1c394:	f06f 037e 	mvn.w	r3, #126	; 0x7e
}
   1c398:	4618      	mov	r0, r3
   1c39a:	4770      	bx	lr
	return -EINVAL;
   1c39c:	f06f 0315 	mvn.w	r3, #21
   1c3a0:	e7fa      	b.n	1c398 <net_context_bind+0xc4>

0001c3a2 <bind_default>:
	if (context->flags & NET_CONTEXT_FAMILY) {
   1c3a2:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1c3a6:	f013 0f10 	tst.w	r3, #16
   1c3aa:	d006      	beq.n	1c3ba <bind_default+0x18>
		return AF_INET6;
   1c3ac:	230a      	movs	r3, #10
	if (family == AF_INET6) {
   1c3ae:	2b0a      	cmp	r3, #10
   1c3b0:	d120      	bne.n	1c3f4 <bind_default+0x52>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1c3b2:	68c3      	ldr	r3, [r0, #12]
   1c3b4:	b11b      	cbz	r3, 1c3be <bind_default+0x1c>
			return 0;
   1c3b6:	2000      	movs	r0, #0
   1c3b8:	4770      	bx	lr
	return AF_INET;
   1c3ba:	2302      	movs	r3, #2
   1c3bc:	e7f7      	b.n	1c3ae <bind_default+0xc>
{
   1c3be:	b530      	push	{r4, r5, lr}
   1c3c0:	b087      	sub	sp, #28
   1c3c2:	4604      	mov	r4, r0
		addr6.sin6_family = AF_INET6;
   1c3c4:	ad06      	add	r5, sp, #24
   1c3c6:	230a      	movs	r3, #10
   1c3c8:	f825 3d18 	strh.w	r3, [r5, #-24]!
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   1c3cc:	f002 fd96 	bl	1eefc <net_ipv6_unspecified_address>
   1c3d0:	2210      	movs	r2, #16
   1c3d2:	4601      	mov	r1, r0
   1c3d4:	a801      	add	r0, sp, #4
   1c3d6:	f7e3 ff73 	bl	2c0 <memcpy>
			find_available_port(context,
   1c3da:	4629      	mov	r1, r5
   1c3dc:	4620      	mov	r0, r4
   1c3de:	f7ff faa1 	bl	1b924 <find_available_port>
		addr6.sin6_port =
   1c3e2:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   1c3e6:	2218      	movs	r2, #24
   1c3e8:	4629      	mov	r1, r5
   1c3ea:	4620      	mov	r0, r4
   1c3ec:	f7ff ff72 	bl	1c2d4 <net_context_bind>
}
   1c3f0:	b007      	add	sp, #28
   1c3f2:	bd30      	pop	{r4, r5, pc}
	return -EINVAL;
   1c3f4:	f06f 0015 	mvn.w	r0, #21
   1c3f8:	4770      	bx	lr

0001c3fa <sendto>:
{
   1c3fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c3fc:	b085      	sub	sp, #20
   1c3fe:	9003      	str	r0, [sp, #12]
	return pkt->context;
   1c400:	68c5      	ldr	r5, [r0, #12]
	return context->flags & NET_CONTEXT_IN_USE;
   1c402:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1c406:	f010 0f01 	tst.w	r0, #1
   1c40a:	d072      	beq.n	1c4f2 <sendto+0xf8>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c40c:	f010 0f40 	tst.w	r0, #64	; 0x40
   1c410:	d01f      	beq.n	1c452 <sendto+0x58>
		return IPPROTO_TCP;
   1c412:	f04f 0e06 	mov.w	lr, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c416:	f1be 0f06 	cmp.w	lr, #6
   1c41a:	d01d      	beq.n	1c458 <sendto+0x5e>
   1c41c:	461f      	mov	r7, r3
   1c41e:	4616      	mov	r6, r2
   1c420:	460c      	mov	r4, r1
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c422:	f1be 0f11 	cmp.w	lr, #17
   1c426:	d024      	beq.n	1c472 <sendto+0x78>
	if (!dst_addr) {
   1c428:	2c00      	cmp	r4, #0
   1c42a:	d068      	beq.n	1c4fe <sendto+0x104>
	if (net_pkt_family(pkt) == AF_INET6) {
   1c42c:	9903      	ldr	r1, [sp, #12]
	return pkt->family;
   1c42e:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1c432:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1c436:	2b0a      	cmp	r3, #10
   1c438:	d164      	bne.n	1c504 <sendto+0x10a>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1c43a:	2e17      	cmp	r6, #23
   1c43c:	d965      	bls.n	1c50a <sendto+0x110>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c43e:	6863      	ldr	r3, [r4, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c440:	b9f3      	cbnz	r3, 1c480 <sendto+0x86>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c442:	68a3      	ldr	r3, [r4, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c444:	bb63      	cbnz	r3, 1c4a0 <sendto+0xa6>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c446:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c448:	bb63      	cbnz	r3, 1c4a4 <sendto+0xaa>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1c44a:	6923      	ldr	r3, [r4, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c44c:	b363      	cbz	r3, 1c4a8 <sendto+0xae>
   1c44e:	2300      	movs	r3, #0
   1c450:	e017      	b.n	1c482 <sendto+0x88>
	return IPPROTO_UDP;
   1c452:	f04f 0e11 	mov.w	lr, #17
   1c456:	e7de      	b.n	1c416 <sendto+0x1c>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1c458:	f3c0 0041 	ubfx	r0, r0, #1, #2
		if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   1c45c:	2802      	cmp	r0, #2
   1c45e:	d14b      	bne.n	1c4f8 <sendto+0xfe>
		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1c460:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c462:	f8b0 00a4 	ldrh.w	r0, [r0, #164]	; 0xa4
   1c466:	f410 7f80 	tst.w	r0, #256	; 0x100
   1c46a:	d0d7      	beq.n	1c41c <sendto+0x22>
			return -ESHUTDOWN;
   1c46c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
   1c470:	e03c      	b.n	1c4ec <sendto+0xf2>
		ret = bind_default(context);
   1c472:	4628      	mov	r0, r5
   1c474:	f7ff ff95 	bl	1c3a2 <bind_default>
		if (ret) {
   1c478:	4603      	mov	r3, r0
   1c47a:	2800      	cmp	r0, #0
   1c47c:	d0d4      	beq.n	1c428 <sendto+0x2e>
   1c47e:	e035      	b.n	1c4ec <sendto+0xf2>
   1c480:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1c482:	2b00      	cmp	r3, #0
   1c484:	d144      	bne.n	1c510 <sendto+0x116>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c486:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1c48a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c48e:	d00d      	beq.n	1c4ac <sendto+0xb2>
		return IPPROTO_TCP;
   1c490:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c492:	2b11      	cmp	r3, #17
   1c494:	d00c      	beq.n	1c4b0 <sendto+0xb6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c496:	2b06      	cmp	r3, #6
   1c498:	d13d      	bne.n	1c516 <sendto+0x11c>
	return net_buf_frags_len(pkt->frags);
   1c49a:	688a      	ldr	r2, [r1, #8]
	size_t bytes = 0;
   1c49c:	2000      	movs	r0, #0
   1c49e:	e011      	b.n	1c4c4 <sendto+0xca>
   1c4a0:	2300      	movs	r3, #0
   1c4a2:	e7ee      	b.n	1c482 <sendto+0x88>
   1c4a4:	2300      	movs	r3, #0
   1c4a6:	e7ec      	b.n	1c482 <sendto+0x88>
   1c4a8:	2301      	movs	r3, #1
   1c4aa:	e7ea      	b.n	1c482 <sendto+0x88>
	return IPPROTO_UDP;
   1c4ac:	2311      	movs	r3, #17
   1c4ae:	e7f0      	b.n	1c492 <sendto+0x98>
		ret = create_udp_packet(context, pkt, dst_addr, &pkt);
   1c4b0:	ab03      	add	r3, sp, #12
   1c4b2:	4622      	mov	r2, r4
   1c4b4:	4628      	mov	r0, r5
   1c4b6:	f7ff fc0f 	bl	1bcd8 <create_udp_packet>
   1c4ba:	4603      	mov	r3, r0
   1c4bc:	e009      	b.n	1c4d2 <sendto+0xd8>
		bytes += buf->len;
   1c4be:	8994      	ldrh	r4, [r2, #12]
   1c4c0:	4420      	add	r0, r4
		buf = buf->frags;
   1c4c2:	6812      	ldr	r2, [r2, #0]
	while (buf) {
   1c4c4:	2a00      	cmp	r2, #0
   1c4c6:	d1fa      	bne.n	1c4be <sendto+0xc4>
	pkt->appdatalen = len;
   1c4c8:	8608      	strh	r0, [r1, #48]	; 0x30
		ret = net_tcp_queue_data(context, pkt);
   1c4ca:	4628      	mov	r0, r5
   1c4cc:	f006 fd08 	bl	22ee0 <net_tcp_queue_data>
   1c4d0:	4603      	mov	r3, r0
	if (ret < 0) {
   1c4d2:	2b00      	cmp	r3, #0
   1c4d4:	db0a      	blt.n	1c4ec <sendto+0xf2>
	return send_data(context, pkt, cb, timeout, token, user_data);
   1c4d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c4d8:	9301      	str	r3, [sp, #4]
   1c4da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c4dc:	9300      	str	r3, [sp, #0]
   1c4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c4e0:	463a      	mov	r2, r7
   1c4e2:	9903      	ldr	r1, [sp, #12]
   1c4e4:	4628      	mov	r0, r5
   1c4e6:	f7ff fc1d 	bl	1bd24 <send_data>
   1c4ea:	4603      	mov	r3, r0
}
   1c4ec:	4618      	mov	r0, r3
   1c4ee:	b005      	add	sp, #20
   1c4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBADF;
   1c4f2:	f06f 0308 	mvn.w	r3, #8
   1c4f6:	e7f9      	b.n	1c4ec <sendto+0xf2>
			return -ENOTCONN;
   1c4f8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1c4fc:	e7f6      	b.n	1c4ec <sendto+0xf2>
		return -EDESTADDRREQ;
   1c4fe:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1c502:	e7f3      	b.n	1c4ec <sendto+0xf2>
		return -EINVAL;
   1c504:	f06f 0315 	mvn.w	r3, #21
   1c508:	e7f0      	b.n	1c4ec <sendto+0xf2>
			return -EINVAL;
   1c50a:	f06f 0315 	mvn.w	r3, #21
   1c50e:	e7ed      	b.n	1c4ec <sendto+0xf2>
			return -EDESTADDRREQ;
   1c510:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1c514:	e7ea      	b.n	1c4ec <sendto+0xf2>
		return -EPROTONOSUPPORT;
   1c516:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   1c51a:	e7e7      	b.n	1c4ec <sendto+0xf2>

0001c51c <recv_udp>:
#if defined(CONFIG_NET_UDP)
static int recv_udp(struct net_context *context,
		    net_context_recv_cb_t cb,
		    s32_t timeout,
		    void *user_data)
{
   1c51c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c51e:	b08f      	sub	sp, #60	; 0x3c
   1c520:	4604      	mov	r4, r0
   1c522:	460d      	mov	r5, r1
   1c524:	461e      	mov	r6, r3
	struct sockaddr local_addr = {
   1c526:	2300      	movs	r3, #0
   1c528:	9304      	str	r3, [sp, #16]
   1c52a:	9305      	str	r3, [sp, #20]
   1c52c:	9306      	str	r3, [sp, #24]
   1c52e:	9307      	str	r3, [sp, #28]
   1c530:	9308      	str	r3, [sp, #32]
   1c532:	9309      	str	r3, [sp, #36]	; 0x24
	if (context->flags & NET_CONTEXT_FAMILY) {
   1c534:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1c538:	f013 0f10 	tst.w	r3, #16
   1c53c:	d037      	beq.n	1c5ae <recv_udp+0x92>
		return AF_INET6;
   1c53e:	230a      	movs	r3, #10
   1c540:	f8ad 3010 	strh.w	r3, [sp, #16]
	u16_t lport = 0;
	int ret;

	ARG_UNUSED(timeout);

	if (context->conn_handler) {
   1c544:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1c546:	b118      	cbz	r0, 1c550 <recv_udp+0x34>
		net_conn_unregister(context->conn_handler);
   1c548:	f008 f864 	bl	24614 <net_conn_unregister>
		context->conn_handler = NULL;
   1c54c:	2300      	movs	r3, #0
   1c54e:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	ret = bind_default(context);
   1c550:	4620      	mov	r0, r4
   1c552:	f7ff ff26 	bl	1c3a2 <bind_default>
	if (ret) {
   1c556:	4603      	mov	r3, r0
   1c558:	bb30      	cbnz	r0, 1c5a8 <recv_udp+0x8c>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1c55a:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   1c55e:	f017 0f10 	tst.w	r7, #16
   1c562:	d026      	beq.n	1c5b2 <recv_udp+0x96>
		return AF_INET6;
   1c564:	230a      	movs	r3, #10
		return ret;
	}

#if defined(CONFIG_NET_IPV6)
	if (net_context_get_family(context) == AF_INET6) {
   1c566:	2b0a      	cmp	r3, #10
   1c568:	d025      	beq.n	1c5b6 <recv_udp+0x9a>
	u16_t lport = 0;
   1c56a:	f04f 0e00 	mov.w	lr, #0
	struct sockaddr *laddr = NULL;
   1c56e:	4672      	mov	r2, lr

		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
	}
#endif /* CONFIG_NET_IPV4 */

	context->recv_cb = cb;
   1c570:	6325      	str	r5, [r4, #48]	; 0x30
	if (context->flags & NET_CONTEXT_PROTO) {
   1c572:	f017 0f40 	tst.w	r7, #64	; 0x40
   1c576:	d037      	beq.n	1c5e8 <recv_udp+0xcc>
		return IPPROTO_TCP;
   1c578:	2006      	movs	r0, #6

	ret = net_conn_register(net_context_get_ip_proto(context),
   1c57a:	f017 0f80 	tst.w	r7, #128	; 0x80
   1c57e:	d135      	bne.n	1c5ec <recv_udp+0xd0>
   1c580:	2100      	movs	r1, #0
				context->flags & NET_CONTEXT_REMOTE_ADDR_SET ?
							&context->remote : NULL,
				laddr,
				ntohs(net_sin(&context->remote)->sin_port),
   1c582:	8ae5      	ldrh	r5, [r4, #22]
   1c584:	022b      	lsls	r3, r5, #8
   1c586:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
				ntohs(lport),
   1c58a:	ea4f 251e 	mov.w	r5, lr, lsr #8
   1c58e:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   1c592:	b2ad      	uxth	r5, r5
   1c594:	342c      	adds	r4, #44	; 0x2c
   1c596:	9403      	str	r4, [sp, #12]
   1c598:	9602      	str	r6, [sp, #8]
   1c59a:	4c16      	ldr	r4, [pc, #88]	; (1c5f4 <recv_udp+0xd8>)
   1c59c:	9401      	str	r4, [sp, #4]
   1c59e:	9500      	str	r5, [sp, #0]
   1c5a0:	b29b      	uxth	r3, r3
   1c5a2:	f008 f855 	bl	24650 <net_conn_register>
   1c5a6:	4603      	mov	r3, r0
				packet_received,
				user_data,
				&context->conn_handler);

	return ret;
}
   1c5a8:	4618      	mov	r0, r3
   1c5aa:	b00f      	add	sp, #60	; 0x3c
   1c5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   1c5ae:	2302      	movs	r3, #2
   1c5b0:	e7c6      	b.n	1c540 <recv_udp+0x24>
   1c5b2:	2302      	movs	r3, #2
   1c5b4:	e7d7      	b.n	1c566 <recv_udp+0x4a>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1c5b6:	68e3      	ldr	r3, [r4, #12]
   1c5b8:	b1a3      	cbz	r3, 1c5e4 <recv_udp+0xc8>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1c5ba:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1c5be:	6818      	ldr	r0, [r3, #0]
   1c5c0:	6859      	ldr	r1, [r3, #4]
   1c5c2:	689a      	ldr	r2, [r3, #8]
   1c5c4:	68db      	ldr	r3, [r3, #12]
   1c5c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1c5ca:	f10d 0e14 	add.w	lr, sp, #20
   1c5ce:	ab0e      	add	r3, sp, #56	; 0x38
   1c5d0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c5d4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
			laddr = &local_addr;
   1c5d8:	aa04      	add	r2, sp, #16
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
   1c5da:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
		net_sin6(&local_addr)->sin6_port =
   1c5de:	f8ad e012 	strh.w	lr, [sp, #18]
   1c5e2:	e7c5      	b.n	1c570 <recv_udp+0x54>
	struct sockaddr *laddr = NULL;
   1c5e4:	2200      	movs	r2, #0
   1c5e6:	e7f8      	b.n	1c5da <recv_udp+0xbe>
	return IPPROTO_UDP;
   1c5e8:	2011      	movs	r0, #17
   1c5ea:	e7c6      	b.n	1c57a <recv_udp+0x5e>
	ret = net_conn_register(net_context_get_ip_proto(context),
   1c5ec:	f104 0114 	add.w	r1, r4, #20
   1c5f0:	e7c7      	b.n	1c582 <recv_udp+0x66>
   1c5f2:	bf00      	nop
   1c5f4:	0001ba29 	.word	0x0001ba29

0001c5f8 <net_context_connect>:
{
   1c5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c5fc:	b090      	sub	sp, #64	; 0x40
	return context->flags & NET_CONTEXT_IN_USE;
   1c5fe:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1c602:	f014 0f01 	tst.w	r4, #1
   1c606:	f000 80c9 	beq.w	1c79c <net_context_connect+0x1a4>
   1c60a:	461f      	mov	r7, r3
   1c60c:	4615      	mov	r5, r2
   1c60e:	460e      	mov	r6, r1
   1c610:	4604      	mov	r4, r0
	ret = bind_default(context);
   1c612:	f7ff fec6 	bl	1c3a2 <bind_default>
	if (ret) {
   1c616:	4680      	mov	r8, r0
   1c618:	2800      	cmp	r0, #0
   1c61a:	f040 80c1 	bne.w	1c7a0 <net_context_connect+0x1a8>
	if (addr->sa_family != net_context_get_family(context)) {
   1c61e:	8831      	ldrh	r1, [r6, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   1c620:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c624:	f013 0f10 	tst.w	r3, #16
   1c628:	d02b      	beq.n	1c682 <net_context_connect+0x8a>
		return AF_INET6;
   1c62a:	220a      	movs	r2, #10
   1c62c:	4291      	cmp	r1, r2
   1c62e:	f040 80bb 	bne.w	1c7a8 <net_context_connect+0x1b0>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1c632:	f3c3 0341 	ubfx	r3, r3, #1, #2
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   1c636:	2b03      	cmp	r3, #3
   1c638:	f000 80b9 	beq.w	1c7ae <net_context_connect+0x1b6>
	if (net_context_get_family(context) == AF_INET6) {
   1c63c:	2a0a      	cmp	r2, #10
   1c63e:	f040 80b9 	bne.w	1c7b4 <net_context_connect+0x1bc>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1c642:	2d17      	cmp	r5, #23
   1c644:	f240 80b9 	bls.w	1c7ba <net_context_connect+0x1c2>
	return addr->s6_addr[0] == 0xFF;
   1c648:	7e23      	ldrb	r3, [r4, #24]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1c64a:	2bff      	cmp	r3, #255	; 0xff
   1c64c:	f000 80b8 	beq.w	1c7c0 <net_context_connect+0x1c8>
		memcpy(&addr6->sin6_addr, &net_sin6(addr)->sin6_addr,
   1c650:	2210      	movs	r2, #16
   1c652:	1d31      	adds	r1, r6, #4
   1c654:	f104 0018 	add.w	r0, r4, #24
   1c658:	f7e3 fe32 	bl	2c0 <memcpy>
		addr6->sin6_port = net_sin6(addr)->sin6_port;
   1c65c:	f8b6 c002 	ldrh.w	ip, [r6, #2]
   1c660:	f8a4 c016 	strh.w	ip, [r4, #22]
		addr6->sin6_family = AF_INET6;
   1c664:	230a      	movs	r3, #10
   1c666:	82a3      	strh	r3, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c668:	69a3      	ldr	r3, [r4, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c66a:	b963      	cbnz	r3, 1c686 <net_context_connect+0x8e>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c66c:	69e3      	ldr	r3, [r4, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c66e:	2b00      	cmp	r3, #0
   1c670:	d174      	bne.n	1c75c <net_context_connect+0x164>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c672:	6a23      	ldr	r3, [r4, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c674:	2b00      	cmp	r3, #0
   1c676:	d173      	bne.n	1c760 <net_context_connect+0x168>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1c678:	6a63      	ldr	r3, [r4, #36]	; 0x24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c67a:	2b00      	cmp	r3, #0
   1c67c:	d072      	beq.n	1c764 <net_context_connect+0x16c>
   1c67e:	4643      	mov	r3, r8
   1c680:	e002      	b.n	1c688 <net_context_connect+0x90>
	return AF_INET;
   1c682:	2202      	movs	r2, #2
   1c684:	e7d2      	b.n	1c62c <net_context_connect+0x34>
   1c686:	4643      	mov	r3, r8
		if (!net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1c688:	f013 0f01 	tst.w	r3, #1
   1c68c:	d16c      	bne.n	1c768 <net_context_connect+0x170>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1c68e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c692:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c696:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1c69a:	230a      	movs	r3, #10
   1c69c:	8123      	strh	r3, [r4, #8]
		net_sin6(&local_addr)->sin6_family = AF_INET6;
   1c69e:	f8ad 3018 	strh.w	r3, [sp, #24]
		net_sin6(&local_addr)->sin6_port = lport =
   1c6a2:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
   1c6a6:	f8ad e01a 	strh.w	lr, [sp, #26]
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1c6aa:	68e3      	ldr	r3, [r4, #12]
   1c6ac:	2b00      	cmp	r3, #0
   1c6ae:	d062      	beq.n	1c776 <net_context_connect+0x17e>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1c6b0:	ad0c      	add	r5, sp, #48	; 0x30
   1c6b2:	6818      	ldr	r0, [r3, #0]
   1c6b4:	6859      	ldr	r1, [r3, #4]
   1c6b6:	689a      	ldr	r2, [r3, #8]
   1c6b8:	68db      	ldr	r3, [r3, #12]
   1c6ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1c6bc:	ad07      	add	r5, sp, #28
   1c6be:	ab10      	add	r3, sp, #64	; 0x40
   1c6c0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c6c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
   1c6c8:	aa06      	add	r2, sp, #24
	if (context->flags & NET_CONTEXT_TYPE) {
   1c6ca:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c6ce:	f013 0f20 	tst.w	r3, #32
   1c6d2:	d052      	beq.n	1c77a <net_context_connect+0x182>
		return SOCK_STREAM;
   1c6d4:	2301      	movs	r3, #1
	if (net_context_get_type(context) == SOCK_DGRAM) {
   1c6d6:	2b02      	cmp	r3, #2
   1c6d8:	d051      	beq.n	1c77e <net_context_connect+0x186>
	if (net_context_get_type(context) != SOCK_STREAM) {
   1c6da:	2b01      	cmp	r3, #1
   1c6dc:	d173      	bne.n	1c7c6 <net_context_connect+0x1ce>
			       ntohs(rport),
   1c6de:	ea4f 231c 	mov.w	r3, ip, lsr #8
   1c6e2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			       ntohs(lport),
   1c6e6:	ea4f 211e 	mov.w	r1, lr, lsr #8
   1c6ea:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
	ret = net_tcp_register(addr,
   1c6ee:	b289      	uxth	r1, r1
   1c6f0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1c6f4:	9003      	str	r0, [sp, #12]
   1c6f6:	9402      	str	r4, [sp, #8]
   1c6f8:	4835      	ldr	r0, [pc, #212]	; (1c7d0 <net_context_connect+0x1d8>)
   1c6fa:	9001      	str	r0, [sp, #4]
   1c6fc:	9100      	str	r1, [sp, #0]
   1c6fe:	b29b      	uxth	r3, r3
   1c700:	4631      	mov	r1, r6
   1c702:	2006      	movs	r0, #6
   1c704:	f007 ffa4 	bl	24650 <net_conn_register>
	if (ret < 0) {
   1c708:	2800      	cmp	r0, #0
   1c70a:	db5f      	blt.n	1c7cc <net_context_connect+0x1d4>
	context->connect_cb = cb;
   1c70c:	63a7      	str	r7, [r4, #56]	; 0x38
	context->user_data = user_data;
   1c70e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c710:	6023      	str	r3, [r4, #0]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1c712:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c716:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1c71a:	f043 0302 	orr.w	r3, r3, #2
   1c71e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   1c722:	2102      	movs	r1, #2
   1c724:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c726:	f006 fa6e 	bl	22c06 <net_tcp_change_state>
	struct net_pkt *pkt = NULL;
   1c72a:	2200      	movs	r2, #0
   1c72c:	ab10      	add	r3, sp, #64	; 0x40
   1c72e:	f843 2d2c 	str.w	r2, [r3, #-44]!
	ret = net_tcp_prepare_segment(context->tcp, flags, NULL, 0,
   1c732:	9302      	str	r3, [sp, #8]
   1c734:	9601      	str	r6, [sp, #4]
   1c736:	9200      	str	r2, [sp, #0]
   1c738:	4613      	mov	r3, r2
   1c73a:	2102      	movs	r1, #2
   1c73c:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c73e:	f006 faff 	bl	22d40 <net_tcp_prepare_segment>
	if (ret) {
   1c742:	b310      	cbz	r0, 1c78a <net_context_connect+0x192>
	if (timeout != 0 && k_sem_take(&context->tcp->connect_wait, timeout)) {
   1c744:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1c746:	b35b      	cbz	r3, 1c7a0 <net_context_connect+0x1a8>
   1c748:	6e20      	ldr	r0, [r4, #96]	; 0x60
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1c74a:	4619      	mov	r1, r3
   1c74c:	30ac      	adds	r0, #172	; 0xac
   1c74e:	f00c f803 	bl	28758 <_impl_k_sem_take>
   1c752:	4680      	mov	r8, r0
   1c754:	b320      	cbz	r0, 1c7a0 <net_context_connect+0x1a8>
		return -ETIMEDOUT;
   1c756:	f06f 0873 	mvn.w	r8, #115	; 0x73
   1c75a:	e021      	b.n	1c7a0 <net_context_connect+0x1a8>
   1c75c:	4643      	mov	r3, r8
   1c75e:	e793      	b.n	1c688 <net_context_connect+0x90>
   1c760:	4643      	mov	r3, r8
   1c762:	e791      	b.n	1c688 <net_context_connect+0x90>
   1c764:	2301      	movs	r3, #1
   1c766:	e78f      	b.n	1c688 <net_context_connect+0x90>
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   1c768:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c76c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c770:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   1c774:	e791      	b.n	1c69a <net_context_connect+0xa2>
	struct sockaddr *laddr = NULL;
   1c776:	2200      	movs	r2, #0
   1c778:	e7a7      	b.n	1c6ca <net_context_connect+0xd2>
	return SOCK_DGRAM;
   1c77a:	2302      	movs	r3, #2
   1c77c:	e7ab      	b.n	1c6d6 <net_context_connect+0xde>
		if (cb) {
   1c77e:	b17f      	cbz	r7, 1c7a0 <net_context_connect+0x1a8>
			cb(context, 0, user_data);
   1c780:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1c782:	2100      	movs	r1, #0
   1c784:	4620      	mov	r0, r4
   1c786:	47b8      	blx	r7
   1c788:	e00a      	b.n	1c7a0 <net_context_connect+0x1a8>
	ret = net_send_data(pkt);
   1c78a:	9805      	ldr	r0, [sp, #20]
   1c78c:	f7fd fdf4 	bl	1a378 <net_send_data>
	if (ret < 0) {
   1c790:	2800      	cmp	r0, #0
   1c792:	dad7      	bge.n	1c744 <net_context_connect+0x14c>
		net_pkt_unref(pkt);
   1c794:	9805      	ldr	r0, [sp, #20]
   1c796:	f000 f9f0 	bl	1cb7a <net_pkt_unref>
   1c79a:	e7d3      	b.n	1c744 <net_context_connect+0x14c>
		return -EBADF;
   1c79c:	f06f 0808 	mvn.w	r8, #8
}
   1c7a0:	4640      	mov	r0, r8
   1c7a2:	b010      	add	sp, #64	; 0x40
   1c7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   1c7a8:	f06f 0815 	mvn.w	r8, #21
   1c7ac:	e7f8      	b.n	1c7a0 <net_context_connect+0x1a8>
		return -EOPNOTSUPP;
   1c7ae:	f06f 085e 	mvn.w	r8, #94	; 0x5e
   1c7b2:	e7f5      	b.n	1c7a0 <net_context_connect+0x1a8>
		return -EINVAL; /* Not IPv4 or IPv6 */
   1c7b4:	f06f 0815 	mvn.w	r8, #21
   1c7b8:	e7f2      	b.n	1c7a0 <net_context_connect+0x1a8>
			return -EINVAL;
   1c7ba:	f06f 0815 	mvn.w	r8, #21
   1c7be:	e7ef      	b.n	1c7a0 <net_context_connect+0x1a8>
			return -EADDRNOTAVAIL;
   1c7c0:	f06f 087c 	mvn.w	r8, #124	; 0x7c
   1c7c4:	e7ec      	b.n	1c7a0 <net_context_connect+0x1a8>
		return -ENOTSUP;
   1c7c6:	f06f 0885 	mvn.w	r8, #133	; 0x85
   1c7ca:	e7e9      	b.n	1c7a0 <net_context_connect+0x1a8>
		return ret;
   1c7cc:	4680      	mov	r8, r0
   1c7ce:	e7e7      	b.n	1c7a0 <net_context_connect+0x1a8>
   1c7d0:	0001c079 	.word	0x0001c079

0001c7d4 <net_context_send>:
{
   1c7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c7d6:	b085      	sub	sp, #20
	return pkt->context;
   1c7d8:	68c4      	ldr	r4, [r0, #12]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1c7da:	f994 505d 	ldrsb.w	r5, [r4, #93]	; 0x5d
   1c7de:	2d00      	cmp	r5, #0
   1c7e0:	da17      	bge.n	1c812 <net_context_send+0x3e>
	    !net_sin(&context->remote)->sin_port) {
   1c7e2:	8ae5      	ldrh	r5, [r4, #22]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1c7e4:	b1c5      	cbz	r5, 1c818 <net_context_send+0x44>
	return pkt->family;
   1c7e6:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
   1c7ea:	f3c5 05c3 	ubfx	r5, r5, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1c7ee:	2d0a      	cmp	r5, #10
   1c7f0:	d00d      	beq.n	1c80e <net_context_send+0x3a>
		addrlen = 0;
   1c7f2:	2700      	movs	r7, #0
   1c7f4:	461e      	mov	r6, r3
   1c7f6:	460b      	mov	r3, r1
	return sendto(pkt, &context->remote, addrlen, cb, timeout, token,
   1c7f8:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c7fa:	9102      	str	r1, [sp, #8]
   1c7fc:	9601      	str	r6, [sp, #4]
   1c7fe:	9200      	str	r2, [sp, #0]
   1c800:	463a      	mov	r2, r7
   1c802:	f104 0114 	add.w	r1, r4, #20
   1c806:	f7ff fdf8 	bl	1c3fa <sendto>
}
   1c80a:	b005      	add	sp, #20
   1c80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		addrlen = sizeof(struct sockaddr_in6);
   1c80e:	2718      	movs	r7, #24
   1c810:	e7f0      	b.n	1c7f4 <net_context_send+0x20>
		return -EDESTADDRREQ;
   1c812:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1c816:	e7f8      	b.n	1c80a <net_context_send+0x36>
   1c818:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1c81c:	e7f5      	b.n	1c80a <net_context_send+0x36>

0001c81e <net_context_sendto>:
{
   1c81e:	b510      	push	{r4, lr}
   1c820:	b084      	sub	sp, #16
   1c822:	461c      	mov	r4, r3
	return pkt->context;
   1c824:	68c3      	ldr	r3, [r0, #12]
	if (context->flags & NET_CONTEXT_PROTO) {
   1c826:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   1c82a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c82e:	d00d      	beq.n	1c84c <net_context_sendto+0x2e>
		return IPPROTO_TCP;
   1c830:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c832:	2b06      	cmp	r3, #6
   1c834:	d00c      	beq.n	1c850 <net_context_sendto+0x32>
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   1c836:	9b08      	ldr	r3, [sp, #32]
   1c838:	9302      	str	r3, [sp, #8]
   1c83a:	9b07      	ldr	r3, [sp, #28]
   1c83c:	9301      	str	r3, [sp, #4]
   1c83e:	9b06      	ldr	r3, [sp, #24]
   1c840:	9300      	str	r3, [sp, #0]
   1c842:	4623      	mov	r3, r4
   1c844:	f7ff fdd9 	bl	1c3fa <sendto>
}
   1c848:	b004      	add	sp, #16
   1c84a:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1c84c:	2311      	movs	r3, #17
   1c84e:	e7f0      	b.n	1c832 <net_context_sendto+0x14>
		return net_context_send(pkt, cb, timeout, token, user_data);
   1c850:	9b08      	ldr	r3, [sp, #32]
   1c852:	9300      	str	r3, [sp, #0]
   1c854:	9b07      	ldr	r3, [sp, #28]
   1c856:	9a06      	ldr	r2, [sp, #24]
   1c858:	4621      	mov	r1, r4
   1c85a:	f7ff ffbb 	bl	1c7d4 <net_context_send>
   1c85e:	e7f3      	b.n	1c848 <net_context_sendto+0x2a>

0001c860 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     s32_t timeout,
		     void *user_data)
{
   1c860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return context->flags & NET_CONTEXT_IN_USE;
   1c862:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
   1c866:	f014 0f01 	tst.w	r4, #1
   1c86a:	d030      	beq.n	1c8ce <net_context_recv+0x6e>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c86c:	f014 0f40 	tst.w	r4, #64	; 0x40
   1c870:	d023      	beq.n	1c8ba <net_context_recv+0x5a>
		return IPPROTO_TCP;
   1c872:	2606      	movs	r6, #6
   1c874:	4617      	mov	r7, r2
   1c876:	4605      	mov	r5, r0
			context, cb, timeout, user_data);
	}
#endif /* CONFIG_NET_OFFLOAD */

#if defined(CONFIG_NET_UDP)
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c878:	2e11      	cmp	r6, #17
   1c87a:	d020      	beq.n	1c8be <net_context_recv+0x5e>
		}
	} else
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c87c:	2e06      	cmp	r6, #6
   1c87e:	d129      	bne.n	1c8d4 <net_context_recv+0x74>
		NET_ASSERT(context->tcp);

		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1c880:	6e02      	ldr	r2, [r0, #96]	; 0x60
   1c882:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
   1c886:	f410 7f80 	tst.w	r0, #256	; 0x100
   1c88a:	d126      	bne.n	1c8da <net_context_recv+0x7a>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1c88c:	f3c4 0441 	ubfx	r4, r4, #1, #2
			return -ESHUTDOWN;
		} else if (net_context_get_state(context)
   1c890:	2c02      	cmp	r4, #2
   1c892:	d125      	bne.n	1c8e0 <net_context_recv+0x80>
			   != NET_CONTEXT_CONNECTED) {
			return -ENOTCONN;
		}

		context->recv_cb = cb;
   1c894:	6329      	str	r1, [r5, #48]	; 0x30
		context->tcp->recv_user_data = user_data;
   1c896:	6053      	str	r3, [r2, #4]
	{
		return -EPROTOTYPE;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (timeout) {
   1c898:	b32f      	cbz	r7, 1c8e6 <net_context_recv+0x86>
		/* Make sure we have the lock, then the packet_received()
		 * callback will release the semaphore when data has been
		 * received.
		 */
		while (k_sem_take(&context->recv_data_wait, K_NO_WAIT)) {
   1c89a:	f105 0444 	add.w	r4, r5, #68	; 0x44
   1c89e:	2100      	movs	r1, #0
   1c8a0:	4620      	mov	r0, r4
   1c8a2:	f00b ff59 	bl	28758 <_impl_k_sem_take>
   1c8a6:	4606      	mov	r6, r0
   1c8a8:	2800      	cmp	r0, #0
   1c8aa:	d1f6      	bne.n	1c89a <net_context_recv+0x3a>
   1c8ac:	4639      	mov	r1, r7
   1c8ae:	4620      	mov	r0, r4
   1c8b0:	f00b ff52 	bl	28758 <_impl_k_sem_take>
			;
		}

		if (!k_sem_take(&context->recv_data_wait, timeout)) {
   1c8b4:	b140      	cbz	r0, 1c8c8 <net_context_recv+0x68>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return 0;
}
   1c8b6:	4630      	mov	r0, r6
   1c8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1c8ba:	2611      	movs	r6, #17
   1c8bc:	e7da      	b.n	1c874 <net_context_recv+0x14>
		int ret = recv_udp(context, cb, timeout, user_data);
   1c8be:	f7ff fe2d 	bl	1c51c <recv_udp>
		if (ret < 0) {
   1c8c2:	1e06      	subs	r6, r0, #0
   1c8c4:	dae8      	bge.n	1c898 <net_context_recv+0x38>
   1c8c6:	e7f6      	b.n	1c8b6 <net_context_recv+0x56>
			return -ETIMEDOUT;
   1c8c8:	f06f 0673 	mvn.w	r6, #115	; 0x73
   1c8cc:	e7f3      	b.n	1c8b6 <net_context_recv+0x56>
		return -EBADF;
   1c8ce:	f06f 0608 	mvn.w	r6, #8
   1c8d2:	e7f0      	b.n	1c8b6 <net_context_recv+0x56>
		return -EPROTOTYPE;
   1c8d4:	f06f 066a 	mvn.w	r6, #106	; 0x6a
   1c8d8:	e7ed      	b.n	1c8b6 <net_context_recv+0x56>
			return -ESHUTDOWN;
   1c8da:	f06f 066d 	mvn.w	r6, #109	; 0x6d
   1c8de:	e7ea      	b.n	1c8b6 <net_context_recv+0x56>
			return -ENOTCONN;
   1c8e0:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   1c8e4:	e7e7      	b.n	1c8b6 <net_context_recv+0x56>
	return 0;
   1c8e6:	2600      	movs	r6, #0
   1c8e8:	e7e5      	b.n	1c8b6 <net_context_recv+0x56>
	...

0001c8ec <net_context_foreach>:
#else
	return -EPROTOTYPE;
#endif
}
void net_context_foreach(net_context_cb_t cb, void *user_data)
{
   1c8ec:	b570      	push	{r4, r5, r6, lr}
   1c8ee:	4606      	mov	r6, r0
   1c8f0:	460d      	mov	r5, r1
   1c8f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c8f6:	480d      	ldr	r0, [pc, #52]	; (1c92c <net_context_foreach+0x40>)
   1c8f8:	f00b ff2e 	bl	28758 <_impl_k_sem_take>
	int i;

	k_sem_take(&contexts_lock, K_FOREVER);

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c8fc:	2400      	movs	r4, #0
   1c8fe:	e000      	b.n	1c902 <net_context_foreach+0x16>
   1c900:	3401      	adds	r4, #1
   1c902:	2c05      	cmp	r4, #5
   1c904:	dc0e      	bgt.n	1c924 <net_context_foreach+0x38>
	return context->flags & NET_CONTEXT_IN_USE;
   1c906:	2368      	movs	r3, #104	; 0x68
   1c908:	4a09      	ldr	r2, [pc, #36]	; (1c930 <net_context_foreach+0x44>)
   1c90a:	fb03 2304 	mla	r3, r3, r4, r2
   1c90e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1c912:	f013 0f01 	tst.w	r3, #1
   1c916:	d0f3      	beq.n	1c900 <net_context_foreach+0x14>
			continue;
		}

		cb(&contexts[i], user_data);
   1c918:	4629      	mov	r1, r5
   1c91a:	2068      	movs	r0, #104	; 0x68
   1c91c:	fb00 2004 	mla	r0, r0, r4, r2
   1c920:	47b0      	blx	r6
   1c922:	e7ed      	b.n	1c900 <net_context_foreach+0x14>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1c924:	4801      	ldr	r0, [pc, #4]	; (1c92c <net_context_foreach+0x40>)
   1c926:	f00b ff04 	bl	28732 <_impl_k_sem_give>
   1c92a:	bd70      	pop	{r4, r5, r6, pc}
   1c92c:	20001d10 	.word	0x20001d10
   1c930:	20001aa0 	.word	0x20001aa0

0001c934 <net_context_init>:

	k_sem_give(&contexts_lock);
}

void net_context_init(void)
{
   1c934:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1c936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c93a:	2101      	movs	r1, #1
   1c93c:	4801      	ldr	r0, [pc, #4]	; (1c944 <net_context_init+0x10>)
   1c93e:	f00b feef 	bl	28720 <_impl_k_sem_init>
   1c942:	bd08      	pop	{r3, pc}
   1c944:	20001d10 	.word	0x20001d10

0001c948 <net_pkt_get_reserve>:
#else /* CONFIG_NET_DEBUG_NET_PKT */
struct net_pkt *net_pkt_get_reserve(struct k_mem_slab *slab,
				    u16_t reserve_head,
				    s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1c948:	b570      	push	{r4, r5, r6, lr}
   1c94a:	b082      	sub	sp, #8
   1c94c:	4604      	mov	r4, r0
   1c94e:	460d      	mov	r5, r1
   1c950:	4616      	mov	r6, r2
	struct net_pkt *pkt;
	int ret;

	if (k_is_in_isr()) {
   1c952:	f00c f863 	bl	28a1c <k_is_in_isr>
   1c956:	b198      	cbz	r0, 1c980 <net_pkt_get_reserve+0x38>
		ret = k_mem_slab_alloc(slab, (void **)&pkt, K_NO_WAIT);
   1c958:	2200      	movs	r2, #0
   1c95a:	a901      	add	r1, sp, #4
   1c95c:	4620      	mov	r0, r4
   1c95e:	f00a fde9 	bl	27534 <k_mem_slab_alloc>
	} else {
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
	}

	if (ret) {
   1c962:	b998      	cbnz	r0, 1c98c <net_pkt_get_reserve+0x44>
		return NULL;
	}

	memset(pkt, 0, sizeof(struct net_pkt));
   1c964:	2244      	movs	r2, #68	; 0x44
   1c966:	2100      	movs	r1, #0
   1c968:	9801      	ldr	r0, [sp, #4]
   1c96a:	f00c feb5 	bl	296d8 <memset>

	net_pkt_set_ll_reserve(pkt, reserve_head);
   1c96e:	9801      	ldr	r0, [sp, #4]
	pkt->ll_reserve = len;
   1c970:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32

	pkt->ref = 1;
   1c974:	2301      	movs	r3, #1
   1c976:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	pkt->slab = slab;
   1c97a:	6044      	str	r4, [r0, #4]
	NET_DBG("%s [%u] pkt %p reserve %u ref %d (%s():%d)",
		slab2str(slab), k_mem_slab_num_free_get(slab),
		pkt, reserve_head, pkt->ref, caller, line);
#endif
	return pkt;
}
   1c97c:	b002      	add	sp, #8
   1c97e:	bd70      	pop	{r4, r5, r6, pc}
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   1c980:	4632      	mov	r2, r6
   1c982:	a901      	add	r1, sp, #4
   1c984:	4620      	mov	r0, r4
   1c986:	f00a fdd5 	bl	27534 <k_mem_slab_alloc>
   1c98a:	e7ea      	b.n	1c962 <net_pkt_get_reserve+0x1a>
		return NULL;
   1c98c:	2000      	movs	r0, #0
   1c98e:	e7f5      	b.n	1c97c <net_pkt_get_reserve+0x34>

0001c990 <net_pkt_get>:
#else
static struct net_pkt *net_pkt_get(struct k_mem_slab *slab,
				   struct net_context *context,
				   s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1c990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_pkt *pkt;

	if (!context) {
   1c992:	2900      	cmp	r1, #0
   1c994:	d038      	beq.n	1ca08 <net_pkt_get+0x78>
   1c996:	460c      	mov	r4, r1
   1c998:	4617      	mov	r7, r2
   1c99a:	4606      	mov	r6, r0
	return net_if_get_by_index(context->iface);
   1c99c:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1c9a0:	f7fe fea4 	bl	1b6ec <net_if_get_by_index>
   1c9a4:	4605      	mov	r5, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   1c9a6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c9aa:	f013 0f10 	tst.w	r3, #16
   1c9ae:	d024      	beq.n	1c9fa <net_pkt_get+0x6a>
		return AF_INET6;
   1c9b0:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1c9b2:	2b0a      	cmp	r3, #10
   1c9b4:	d023      	beq.n	1c9fe <net_pkt_get+0x6e>
	struct in6_addr *addr6 = NULL;
   1c9b6:	2100      	movs	r1, #0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1c9b8:	686b      	ldr	r3, [r5, #4]
   1c9ba:	689b      	ldr	r3, [r3, #8]
   1c9bc:	4628      	mov	r0, r5
   1c9be:	4798      	blx	r3
#if defined(CONFIG_NET_DEBUG_NET_PKT)
	pkt = net_pkt_get_reserve_debug(slab,
					net_if_get_ll_reserve(iface, addr6),
					timeout, caller, line);
#else
	pkt = net_pkt_get_reserve(slab, net_if_get_ll_reserve(iface, addr6),
   1c9c0:	463a      	mov	r2, r7
   1c9c2:	4601      	mov	r1, r0
   1c9c4:	4630      	mov	r0, r6
   1c9c6:	f7ff ffbf 	bl	1c948 <net_pkt_get_reserve>
				  timeout);
#endif
	if (pkt) {
   1c9ca:	4603      	mov	r3, r0
   1c9cc:	b198      	cbz	r0, 1c9f6 <net_pkt_get+0x66>
	pkt->context = ctx;
   1c9ce:	60c4      	str	r4, [r0, #12]
	pkt->iface = iface;
   1c9d0:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1c9d2:	7d6a      	ldrb	r2, [r5, #21]
   1c9d4:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1c9d8:	7d6a      	ldrb	r2, [r5, #21]
   1c9da:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
	if (context->flags & NET_CONTEXT_FAMILY) {
   1c9de:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   1c9e2:	f012 0f10 	tst.w	r2, #16
   1c9e6:	d00d      	beq.n	1ca04 <net_pkt_get+0x74>
		return AF_INET6;
   1c9e8:	210a      	movs	r1, #10
	pkt->family = family;
   1c9ea:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1c9ee:	f361 02c6 	bfi	r2, r1, #3, #4
   1c9f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					   net_context_get_family(context));
		}
	}

	return pkt;
}
   1c9f6:	4618      	mov	r0, r3
   1c9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return AF_INET;
   1c9fa:	2302      	movs	r3, #2
   1c9fc:	e7d9      	b.n	1c9b2 <net_pkt_get+0x22>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1c9fe:	f104 0118 	add.w	r1, r4, #24
   1ca02:	e7d9      	b.n	1c9b8 <net_pkt_get+0x28>
   1ca04:	2102      	movs	r1, #2
   1ca06:	e7f0      	b.n	1c9ea <net_pkt_get+0x5a>
		return NULL;
   1ca08:	2300      	movs	r3, #0
   1ca0a:	e7f4      	b.n	1c9f6 <net_pkt_get+0x66>

0001ca0c <net_pkt_get_reserve_data>:
{
   1ca0c:	b570      	push	{r4, r5, r6, lr}
   1ca0e:	4604      	mov	r4, r0
   1ca10:	460d      	mov	r5, r1
   1ca12:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   1ca14:	f00c f802 	bl	28a1c <k_is_in_isr>
   1ca18:	b158      	cbz	r0, 1ca32 <net_pkt_get_reserve_data+0x26>
		frag = net_buf_alloc(pool, K_NO_WAIT);
   1ca1a:	2100      	movs	r1, #0
   1ca1c:	4620      	mov	r0, r4
   1ca1e:	f7fd facf 	bl	19fc0 <net_buf_alloc>
   1ca22:	4604      	mov	r4, r0
	if (!frag) {
   1ca24:	b11c      	cbz	r4, 1ca2e <net_pkt_get_reserve_data+0x22>
	net_buf_reserve(frag, reserve_head);
   1ca26:	4629      	mov	r1, r5
   1ca28:	4620      	mov	r0, r4
   1ca2a:	f7fd fb24 	bl	1a076 <net_buf_reserve>
}
   1ca2e:	4620      	mov	r0, r4
   1ca30:	bd70      	pop	{r4, r5, r6, pc}
		frag = net_buf_alloc(pool, timeout);
   1ca32:	4631      	mov	r1, r6
   1ca34:	4620      	mov	r0, r4
   1ca36:	f7fd fac3 	bl	19fc0 <net_buf_alloc>
   1ca3a:	4604      	mov	r4, r0
   1ca3c:	e7f2      	b.n	1ca24 <net_pkt_get_reserve_data+0x18>

0001ca3e <_pkt_get_data>:
{
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_buf *frag;

	if (!context) {
   1ca3e:	b1f1      	cbz	r1, 1ca7e <_pkt_get_data+0x40>
{
   1ca40:	b570      	push	{r4, r5, r6, lr}
   1ca42:	460c      	mov	r4, r1
   1ca44:	4616      	mov	r6, r2
   1ca46:	4605      	mov	r5, r0
	return net_if_get_by_index(context->iface);
   1ca48:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1ca4c:	f7fe fe4e 	bl	1b6ec <net_if_get_by_index>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1ca50:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1ca54:	f013 0f10 	tst.w	r3, #16
   1ca58:	d00c      	beq.n	1ca74 <_pkt_get_data+0x36>
		return AF_INET6;
   1ca5a:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1ca5c:	2b0a      	cmp	r3, #10
   1ca5e:	d00b      	beq.n	1ca78 <_pkt_get_data+0x3a>
	struct in6_addr *addr6 = NULL;
   1ca60:	2100      	movs	r1, #0
   1ca62:	6843      	ldr	r3, [r0, #4]
   1ca64:	689b      	ldr	r3, [r3, #8]
   1ca66:	4798      	blx	r3
	frag = net_pkt_get_reserve_data_debug(pool,
					      net_if_get_ll_reserve(iface,
								    addr6),
					      timeout, caller, line);
#else
	frag = net_pkt_get_reserve_data(pool,
   1ca68:	4632      	mov	r2, r6
   1ca6a:	4601      	mov	r1, r0
   1ca6c:	4628      	mov	r0, r5
   1ca6e:	f7ff ffcd 	bl	1ca0c <net_pkt_get_reserve_data>
					net_if_get_ll_reserve(iface, addr6),
					timeout);
#endif
	return frag;
   1ca72:	bd70      	pop	{r4, r5, r6, pc}
	return AF_INET;
   1ca74:	2302      	movs	r3, #2
   1ca76:	e7f1      	b.n	1ca5c <_pkt_get_data+0x1e>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1ca78:	f104 0118 	add.w	r1, r4, #24
   1ca7c:	e7f1      	b.n	1ca62 <_pkt_get_data+0x24>
		return NULL;
   1ca7e:	2000      	movs	r0, #0
   1ca80:	4770      	bx	lr
	...

0001ca84 <net_pkt_get_reserve_rx>:
{
   1ca84:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&rx_pkts, reserve_head, timeout);
   1ca86:	460a      	mov	r2, r1
   1ca88:	4601      	mov	r1, r0
   1ca8a:	4802      	ldr	r0, [pc, #8]	; (1ca94 <net_pkt_get_reserve_rx+0x10>)
   1ca8c:	f7ff ff5c 	bl	1c948 <net_pkt_get_reserve>
}
   1ca90:	bd08      	pop	{r3, pc}
   1ca92:	bf00      	nop
   1ca94:	2000cef4 	.word	0x2000cef4

0001ca98 <net_pkt_get_reserve_tx>:
{
   1ca98:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&tx_pkts, reserve_head, timeout);
   1ca9a:	460a      	mov	r2, r1
   1ca9c:	4601      	mov	r1, r0
   1ca9e:	4802      	ldr	r0, [pc, #8]	; (1caa8 <net_pkt_get_reserve_tx+0x10>)
   1caa0:	f7ff ff52 	bl	1c948 <net_pkt_get_reserve>
}
   1caa4:	bd08      	pop	{r3, pc}
   1caa6:	bf00      	nop
   1caa8:	2000cf10 	.word	0x2000cf10

0001caac <net_pkt_get_reserve_rx_data>:
{
   1caac:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&rx_bufs, reserve_head, timeout);
   1caae:	460a      	mov	r2, r1
   1cab0:	4601      	mov	r1, r0
   1cab2:	4802      	ldr	r0, [pc, #8]	; (1cabc <net_pkt_get_reserve_rx_data+0x10>)
   1cab4:	f7ff ffaa 	bl	1ca0c <net_pkt_get_reserve_data>
}
   1cab8:	bd08      	pop	{r3, pc}
   1caba:	bf00      	nop
   1cabc:	2000d074 	.word	0x2000d074

0001cac0 <net_pkt_get_reserve_tx_data>:
{
   1cac0:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&tx_bufs, reserve_head, timeout);
   1cac2:	460a      	mov	r2, r1
   1cac4:	4601      	mov	r1, r0
   1cac6:	4802      	ldr	r0, [pc, #8]	; (1cad0 <net_pkt_get_reserve_tx_data+0x10>)
   1cac8:	f7ff ffa0 	bl	1ca0c <net_pkt_get_reserve_data>
}
   1cacc:	bd08      	pop	{r3, pc}
   1cace:	bf00      	nop
   1cad0:	2000d094 	.word	0x2000d094

0001cad4 <net_pkt_get_frag>:
{
   1cad4:	b538      	push	{r3, r4, r5, lr}
   1cad6:	4604      	mov	r4, r0
   1cad8:	460d      	mov	r5, r1
	return pkt->context;
   1cada:	68c3      	ldr	r3, [r0, #12]
	if (context && context->data_pool) {
   1cadc:	b143      	cbz	r3, 1caf0 <net_pkt_get_frag+0x1c>
   1cade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1cae0:	b133      	cbz	r3, 1caf0 <net_pkt_get_frag+0x1c>
		return net_pkt_get_reserve_data(context->data_pool(),
   1cae2:	4798      	blx	r3
   1cae4:	462a      	mov	r2, r5
   1cae6:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
   1caea:	f7ff ff8f 	bl	1ca0c <net_pkt_get_reserve_data>
   1caee:	bd38      	pop	{r3, r4, r5, pc}
	if (pkt->slab == &rx_pkts) {
   1caf0:	6862      	ldr	r2, [r4, #4]
   1caf2:	4b07      	ldr	r3, [pc, #28]	; (1cb10 <net_pkt_get_frag+0x3c>)
   1caf4:	429a      	cmp	r2, r3
   1caf6:	d005      	beq.n	1cb04 <net_pkt_get_frag+0x30>
	return net_pkt_get_reserve_tx_data(net_pkt_ll_reserve(pkt),
   1caf8:	4629      	mov	r1, r5
   1cafa:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1cafe:	f7ff ffdf 	bl	1cac0 <net_pkt_get_reserve_tx_data>
}
   1cb02:	bd38      	pop	{r3, r4, r5, pc}
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   1cb04:	4629      	mov	r1, r5
   1cb06:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1cb0a:	f7ff ffcf 	bl	1caac <net_pkt_get_reserve_rx_data>
   1cb0e:	bd38      	pop	{r3, r4, r5, pc}
   1cb10:	2000cef4 	.word	0x2000cef4

0001cb14 <net_pkt_get_tx>:

	return net_pkt_get(&rx_pkts, context, timeout);
}

struct net_pkt *net_pkt_get_tx(struct net_context *context, s32_t timeout)
{
   1cb14:	b538      	push	{r3, r4, r5, lr}
   1cb16:	4604      	mov	r4, r0
   1cb18:	460d      	mov	r5, r1
	if (context->tx_slab) {
   1cb1a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1cb1c:	b133      	cbz	r3, 1cb2c <net_pkt_get_tx+0x18>
		return context->tx_slab();
   1cb1e:	4798      	blx	r3

	NET_ASSERT_INFO(context, "TX context not set");

	slab = get_tx_slab(context);

	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1cb20:	b130      	cbz	r0, 1cb30 <net_pkt_get_tx+0x1c>
   1cb22:	462a      	mov	r2, r5
   1cb24:	4621      	mov	r1, r4
   1cb26:	f7ff ff33 	bl	1c990 <net_pkt_get>
}
   1cb2a:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1cb2c:	2000      	movs	r0, #0
   1cb2e:	e7f7      	b.n	1cb20 <net_pkt_get_tx+0xc>
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1cb30:	4800      	ldr	r0, [pc, #0]	; (1cb34 <net_pkt_get_tx+0x20>)
   1cb32:	e7f6      	b.n	1cb22 <net_pkt_get_tx+0xe>
   1cb34:	2000cf10 	.word	0x2000cf10

0001cb38 <net_pkt_get_data>:

struct net_buf *net_pkt_get_data(struct net_context *context, s32_t timeout)
{
   1cb38:	b538      	push	{r3, r4, r5, lr}
   1cb3a:	4604      	mov	r4, r0
   1cb3c:	460d      	mov	r5, r1
	if (context->data_pool) {
   1cb3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1cb40:	b133      	cbz	r3, 1cb50 <net_pkt_get_data+0x18>
		return context->data_pool();
   1cb42:	4798      	blx	r3
	pool = get_data_pool(context);

	/* The context is not known in RX path so we can only have TX
	 * data here.
	 */
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1cb44:	b130      	cbz	r0, 1cb54 <net_pkt_get_data+0x1c>
   1cb46:	462a      	mov	r2, r5
   1cb48:	4621      	mov	r1, r4
   1cb4a:	f7ff ff78 	bl	1ca3e <_pkt_get_data>
}
   1cb4e:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1cb50:	2000      	movs	r0, #0
   1cb52:	e7f7      	b.n	1cb44 <net_pkt_get_data+0xc>
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1cb54:	4800      	ldr	r0, [pc, #0]	; (1cb58 <net_pkt_get_data+0x20>)
   1cb56:	e7f6      	b.n	1cb46 <net_pkt_get_data+0xe>
   1cb58:	2000d094 	.word	0x2000d094

0001cb5c <net_pkt_ref>:
				  int line)
#else
struct net_pkt *net_pkt_ref(struct net_pkt *pkt)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!pkt) {
   1cb5c:	4603      	mov	r3, r0
   1cb5e:	b120      	cbz	r0, 1cb6a <net_pkt_ref+0xe>
	NET_DBG("%s [%d] pkt %p ref %d (%s():%d)",
		slab2str(pkt->slab), k_mem_slab_num_free_get(pkt->slab),
		pkt, pkt->ref + 1, caller, line);
#endif

	pkt->ref++;
   1cb60:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
   1cb64:	3201      	adds	r2, #1
   1cb66:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

	return pkt;
}
   1cb6a:	4618      	mov	r0, r3
   1cb6c:	4770      	bx	lr

0001cb6e <net_pkt_frag_unref>:
			      const char *caller, int line)
#else
void net_pkt_frag_unref(struct net_buf *frag)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!frag) {
   1cb6e:	b118      	cbz	r0, 1cb78 <net_pkt_frag_unref+0xa>
{
   1cb70:	b508      	push	{r3, lr}

	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif
	net_buf_unref(frag);
   1cb72:	f7fd fa93 	bl	1a09c <net_buf_unref>
   1cb76:	bd08      	pop	{r3, pc}
   1cb78:	4770      	bx	lr

0001cb7a <net_pkt_unref>:
{
   1cb7a:	b500      	push	{lr}
   1cb7c:	b083      	sub	sp, #12
   1cb7e:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   1cb80:	b188      	cbz	r0, 1cba6 <net_pkt_unref+0x2c>
	if (!pkt->ref) {
   1cb82:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1cb86:	b173      	cbz	r3, 1cba6 <net_pkt_unref+0x2c>
	if (--pkt->ref > 0) {
   1cb88:	3b01      	subs	r3, #1
   1cb8a:	b2db      	uxtb	r3, r3
   1cb8c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1cb90:	b94b      	cbnz	r3, 1cba6 <net_pkt_unref+0x2c>
	if (pkt->frags) {
   1cb92:	6880      	ldr	r0, [r0, #8]
   1cb94:	b108      	cbz	r0, 1cb9a <net_pkt_unref+0x20>
		net_pkt_frag_unref(pkt->frags);
   1cb96:	f7ff ffea 	bl	1cb6e <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   1cb9a:	a902      	add	r1, sp, #8
   1cb9c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   1cba0:	6858      	ldr	r0, [r3, #4]
   1cba2:	f00a fcf5 	bl	27590 <k_mem_slab_free>
}
   1cba6:	b003      	add	sp, #12
   1cba8:	f85d fb04 	ldr.w	pc, [sp], #4

0001cbac <net_pkt_frag_del>:
#else
struct net_buf *net_pkt_frag_del(struct net_pkt *pkt,
				 struct net_buf *parent,
				 struct net_buf *frag)
#endif
{
   1cbac:	b510      	push	{r4, lr}
   1cbae:	4604      	mov	r4, r0
   1cbb0:	4608      	mov	r0, r1
	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif

	if (pkt->frags == frag && !parent) {
   1cbb2:	68a3      	ldr	r3, [r4, #8]
   1cbb4:	4293      	cmp	r3, r2
   1cbb6:	d003      	beq.n	1cbc0 <net_pkt_frag_del+0x14>
		pkt->frags = tmp;

		return tmp;
	}

	return net_buf_frag_del(parent, frag);
   1cbb8:	4611      	mov	r1, r2
   1cbba:	f7fd faaf 	bl	1a11c <net_buf_frag_del>
}
   1cbbe:	bd10      	pop	{r4, pc}
	if (pkt->frags == frag && !parent) {
   1cbc0:	2900      	cmp	r1, #0
   1cbc2:	d1f9      	bne.n	1cbb8 <net_pkt_frag_del+0xc>
		tmp = net_buf_frag_del(NULL, frag);
   1cbc4:	4611      	mov	r1, r2
   1cbc6:	f7fd faa9 	bl	1a11c <net_buf_frag_del>
		pkt->frags = tmp;
   1cbca:	60a0      	str	r0, [r4, #8]
		return tmp;
   1cbcc:	bd10      	pop	{r4, pc}

0001cbce <net_pkt_frag_add>:
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	/* We do not use net_buf_frag_add() as this one will refcount
	 * the frag once more if !pkt->frags
	 */
	if (!pkt->frags) {
   1cbce:	6883      	ldr	r3, [r0, #8]
   1cbd0:	b143      	cbz	r3, 1cbe4 <net_pkt_frag_add+0x16>
{
   1cbd2:	b510      	push	{r4, lr}
   1cbd4:	460c      	mov	r4, r1
		pkt->frags = frag;
		return;
	}

	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   1cbd6:	4618      	mov	r0, r3
   1cbd8:	f7fd fa80 	bl	1a0dc <net_buf_frag_last>
   1cbdc:	4621      	mov	r1, r4
   1cbde:	f7fd fa83 	bl	1a0e8 <net_buf_frag_insert>
   1cbe2:	bd10      	pop	{r4, pc}
		pkt->frags = frag;
   1cbe4:	6081      	str	r1, [r0, #8]
		return;
   1cbe6:	4770      	bx	lr

0001cbe8 <net_pkt_frag_insert>:
void net_pkt_frag_insert_debug(struct net_pkt *pkt, struct net_buf *frag,
			       const char *caller, int line)
#else
void net_pkt_frag_insert(struct net_pkt *pkt, struct net_buf *frag)
#endif
{
   1cbe8:	b538      	push	{r3, r4, r5, lr}
   1cbea:	4604      	mov	r4, r0
   1cbec:	460d      	mov	r5, r1
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	net_buf_frag_last(frag)->frags = pkt->frags;
   1cbee:	4608      	mov	r0, r1
   1cbf0:	f7fd fa74 	bl	1a0dc <net_buf_frag_last>
   1cbf4:	68a3      	ldr	r3, [r4, #8]
   1cbf6:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
   1cbf8:	60a5      	str	r5, [r4, #8]
   1cbfa:	bd38      	pop	{r3, r4, r5, pc}

0001cbfc <net_pkt_copy>:
}

struct net_buf *net_pkt_copy(struct net_pkt *pkt, size_t amount,
			     size_t reserve, s32_t timeout)
{
   1cbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc00:	b085      	sub	sp, #20
   1cc02:	9002      	str	r0, [sp, #8]
   1cc04:	460d      	mov	r5, r1
   1cc06:	4614      	mov	r4, r2
   1cc08:	9303      	str	r3, [sp, #12]
	struct net_buf *frag, *first, *orig;
	u8_t *orig_data;
	size_t orig_len;

	orig = pkt->frags;
   1cc0a:	f8d0 a008 	ldr.w	sl, [r0, #8]

	frag = net_pkt_get_frag(pkt, timeout);
   1cc0e:	4619      	mov	r1, r3
   1cc10:	f7ff ff60 	bl	1cad4 <net_pkt_get_frag>
	if (!frag) {
   1cc14:	9001      	str	r0, [sp, #4]
   1cc16:	b1b8      	cbz	r0, 1cc48 <net_pkt_copy+0x4c>
		return NULL;
	}

	if (reserve > net_buf_tailroom(frag)) {
   1cc18:	f100 0608 	add.w	r6, r0, #8
   1cc1c:	4630      	mov	r0, r6
   1cc1e:	f7fd faf2 	bl	1a206 <net_buf_simple_tailroom>
   1cc22:	42a0      	cmp	r0, r4
   1cc24:	d30b      	bcc.n	1cc3e <net_pkt_copy+0x42>
			reserve, net_buf_tailroom(frag));
		net_pkt_frag_unref(frag);
		return NULL;
	}

	net_buf_add(frag, reserve);
   1cc26:	4621      	mov	r1, r4
   1cc28:	4630      	mov	r0, r6
   1cc2a:	f7fd fa83 	bl	1a134 <net_buf_simple_add>
	first = frag;

	NET_DBG("Copying frag %p with %zu bytes and reserving %zu bytes",
		first, amount, reserve);

	if (!orig->len) {
   1cc2e:	f8ba 700c 	ldrh.w	r7, [sl, #12]
   1cc32:	b14f      	cbz	r7, 1cc48 <net_pkt_copy+0x4c>
		NET_DBG("Original fragment empty!");
		return frag;
	}

	orig_len = orig->len;
	orig_data = orig->data;
   1cc34:	f8da 9008 	ldr.w	r9, [sl, #8]
	frag = net_pkt_get_frag(pkt, timeout);
   1cc38:	f8dd b004 	ldr.w	fp, [sp, #4]

	while (orig && amount) {
   1cc3c:	e01c      	b.n	1cc78 <net_pkt_copy+0x7c>
		net_pkt_frag_unref(frag);
   1cc3e:	9801      	ldr	r0, [sp, #4]
   1cc40:	f7ff ff95 	bl	1cb6e <net_pkt_frag_unref>
		return NULL;
   1cc44:	2300      	movs	r3, #0
   1cc46:	9301      	str	r3, [sp, #4]
			orig_data = orig->data;
		}
	}

	return first;
}
   1cc48:	9801      	ldr	r0, [sp, #4]
   1cc4a:	b005      	add	sp, #20
   1cc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_len = amount;
   1cc50:	46a8      	mov	r8, r5
		if ((copy_len - left_len) >= 0) {
   1cc52:	eba8 0304 	sub.w	r3, r8, r4
   1cc56:	2b00      	cmp	r3, #0
   1cc58:	db2e      	blt.n	1ccb8 <net_pkt_copy+0xbc>
			amount -= left_len;
   1cc5a:	1b2d      	subs	r5, r5, r4
			memcpy(net_buf_add(frag, left_len), orig_data,
   1cc5c:	4621      	mov	r1, r4
   1cc5e:	4630      	mov	r0, r6
   1cc60:	f7fd fa68 	bl	1a134 <net_buf_simple_add>
   1cc64:	4622      	mov	r2, r4
   1cc66:	4649      	mov	r1, r9
   1cc68:	f7e3 fb2a 	bl	2c0 <memcpy>
			if (!net_buf_tailroom(frag)) {
   1cc6c:	4630      	mov	r0, r6
   1cc6e:	f7fd faca 	bl	1a206 <net_buf_simple_tailroom>
   1cc72:	b180      	cbz	r0, 1cc96 <net_pkt_copy+0x9a>
			orig_len -= left_len;
   1cc74:	1b3f      	subs	r7, r7, r4
			orig_data += left_len;
   1cc76:	44a1      	add	r9, r4
	while (orig && amount) {
   1cc78:	f1ba 0f00 	cmp.w	sl, #0
   1cc7c:	d0e4      	beq.n	1cc48 <net_pkt_copy+0x4c>
   1cc7e:	2d00      	cmp	r5, #0
   1cc80:	d0e2      	beq.n	1cc48 <net_pkt_copy+0x4c>
		int left_len = net_buf_tailroom(frag);
   1cc82:	f10b 0608 	add.w	r6, fp, #8
   1cc86:	4630      	mov	r0, r6
   1cc88:	f7fd fabd 	bl	1a206 <net_buf_simple_tailroom>
   1cc8c:	4604      	mov	r4, r0
		if (amount > orig_len) {
   1cc8e:	42bd      	cmp	r5, r7
   1cc90:	d9de      	bls.n	1cc50 <net_pkt_copy+0x54>
			copy_len = orig_len;
   1cc92:	46b8      	mov	r8, r7
   1cc94:	e7dd      	b.n	1cc52 <net_pkt_copy+0x56>
				struct net_buf *new_frag =
   1cc96:	9903      	ldr	r1, [sp, #12]
   1cc98:	9802      	ldr	r0, [sp, #8]
   1cc9a:	f7ff ff1b 	bl	1cad4 <net_pkt_get_frag>
				if (!new_frag) {
   1cc9e:	4606      	mov	r6, r0
   1cca0:	b128      	cbz	r0, 1ccae <net_pkt_copy+0xb2>
				net_buf_frag_add(frag, new_frag);
   1cca2:	4601      	mov	r1, r0
   1cca4:	4658      	mov	r0, fp
   1cca6:	f7fd fa2a 	bl	1a0fe <net_buf_frag_add>
				frag = new_frag;
   1ccaa:	46b3      	mov	fp, r6
   1ccac:	e7e2      	b.n	1cc74 <net_pkt_copy+0x78>
					net_pkt_frag_unref(first);
   1ccae:	9801      	ldr	r0, [sp, #4]
   1ccb0:	f7ff ff5d 	bl	1cb6e <net_pkt_frag_unref>
					return NULL;
   1ccb4:	9601      	str	r6, [sp, #4]
   1ccb6:	e7c7      	b.n	1cc48 <net_pkt_copy+0x4c>
			amount -= copy_len;
   1ccb8:	eba5 0508 	sub.w	r5, r5, r8
			memcpy(net_buf_add(frag, copy_len), orig_data,
   1ccbc:	4641      	mov	r1, r8
   1ccbe:	4630      	mov	r0, r6
   1ccc0:	f7fd fa38 	bl	1a134 <net_buf_simple_add>
   1ccc4:	4642      	mov	r2, r8
   1ccc6:	4649      	mov	r1, r9
   1ccc8:	f7e3 fafa 	bl	2c0 <memcpy>
		orig = orig->frags;
   1cccc:	f8da a000 	ldr.w	sl, [sl]
		if (orig) {
   1ccd0:	f1ba 0f00 	cmp.w	sl, #0
   1ccd4:	d0d0      	beq.n	1cc78 <net_pkt_copy+0x7c>
			orig_len = orig->len;
   1ccd6:	f8ba 700c 	ldrh.w	r7, [sl, #12]
			orig_data = orig->data;
   1ccda:	f8da 9008 	ldr.w	r9, [sl, #8]
   1ccde:	e7cb      	b.n	1cc78 <net_pkt_copy+0x7c>

0001cce0 <net_frag_linear_copy>:

int net_frag_linear_copy(struct net_buf *dst, struct net_buf *src,
			 u16_t offset, u16_t len)
{
   1cce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cce4:	4680      	mov	r8, r0
   1cce6:	460e      	mov	r6, r1
   1cce8:	4615      	mov	r5, r2
   1ccea:	4699      	mov	r9, r3
	u16_t to_copy;
	u16_t copied;

	if (dst->size < len) {
   1ccec:	89c3      	ldrh	r3, [r0, #14]
   1ccee:	454b      	cmp	r3, r9
   1ccf0:	d206      	bcs.n	1cd00 <net_frag_linear_copy+0x20>
		return -ENOMEM;
   1ccf2:	f06f 000b 	mvn.w	r0, #11
   1ccf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	/* find the right fragment to start copying from */
	while (src && offset >= src->len) {
		offset -= src->len;
   1ccfa:	1a6d      	subs	r5, r5, r1
   1ccfc:	b2ad      	uxth	r5, r5
		src = src->frags;
   1ccfe:	6836      	ldr	r6, [r6, #0]
	while (src && offset >= src->len) {
   1cd00:	b336      	cbz	r6, 1cd50 <net_frag_linear_copy+0x70>
   1cd02:	89b1      	ldrh	r1, [r6, #12]
   1cd04:	428d      	cmp	r5, r1
   1cd06:	d2f8      	bcs.n	1ccfa <net_frag_linear_copy+0x1a>
   1cd08:	2700      	movs	r7, #0
   1cd0a:	e015      	b.n	1cd38 <net_frag_linear_copy+0x58>
	}

	/* traverse the fragment chain until len bytes are copied */
	copied = 0;
	while (src && len > 0) {
		to_copy = min(len, src->len - offset);
   1cd0c:	89b4      	ldrh	r4, [r6, #12]
   1cd0e:	1b64      	subs	r4, r4, r5
   1cd10:	454c      	cmp	r4, r9
   1cd12:	bfa8      	it	ge
   1cd14:	464c      	movge	r4, r9
   1cd16:	b2a4      	uxth	r4, r4
		memcpy(dst->data + copied, src->data + offset, to_copy);
   1cd18:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1cd1c:	68b1      	ldr	r1, [r6, #8]
   1cd1e:	4622      	mov	r2, r4
   1cd20:	4429      	add	r1, r5
   1cd22:	4438      	add	r0, r7
   1cd24:	f7e3 facc 	bl	2c0 <memcpy>

		copied += to_copy;
   1cd28:	4427      	add	r7, r4
   1cd2a:	b2bf      	uxth	r7, r7
		/* to_copy is always <= len */
		len -= to_copy;
   1cd2c:	eba9 0404 	sub.w	r4, r9, r4
   1cd30:	fa1f f984 	uxth.w	r9, r4
		src = src->frags;
   1cd34:	6836      	ldr	r6, [r6, #0]
		/* after the first iteration, this value will be 0 */
		offset = 0;
   1cd36:	2500      	movs	r5, #0
	while (src && len > 0) {
   1cd38:	b116      	cbz	r6, 1cd40 <net_frag_linear_copy+0x60>
   1cd3a:	f1b9 0f00 	cmp.w	r9, #0
   1cd3e:	d1e5      	bne.n	1cd0c <net_frag_linear_copy+0x2c>
	}

	if (len > 0) {
   1cd40:	f1b9 0f00 	cmp.w	r9, #0
   1cd44:	d106      	bne.n	1cd54 <net_frag_linear_copy+0x74>
		return -ENOMEM;
	}

	dst->len = copied;
   1cd46:	f8a8 700c 	strh.w	r7, [r8, #12]

	return 0;
   1cd4a:	2000      	movs	r0, #0
   1cd4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1cd50:	2700      	movs	r7, #0
   1cd52:	e7f1      	b.n	1cd38 <net_frag_linear_copy+0x58>
		return -ENOMEM;
   1cd54:	f06f 000b 	mvn.w	r0, #11
}
   1cd58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001cd5c <net_pkt_compact>:

	return copied;
}

bool net_pkt_compact(struct net_pkt *pkt)
{
   1cd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cd60:	4680      	mov	r8, r0
	struct net_buf *frag, *prev;

	NET_DBG("Compacting data in pkt %p", pkt);

	frag = pkt->frags;
   1cd62:	6884      	ldr	r4, [r0, #8]
	prev = NULL;
   1cd64:	2700      	movs	r7, #0

	while (frag) {
   1cd66:	e009      	b.n	1cd7c <net_pkt_compact+0x20>
			 */
			size_t copy_len;

			copy_len = frag->frags->len;
			if (copy_len > net_buf_tailroom(frag)) {
				copy_len = net_buf_tailroom(frag);
   1cd68:	4630      	mov	r0, r6
   1cd6a:	f7fd fa4c 	bl	1a206 <net_buf_simple_tailroom>
   1cd6e:	4605      	mov	r5, r0
   1cd70:	e011      	b.n	1cd96 <net_pkt_compact+0x3a>

				/* Then check next fragment */
				continue;
			}
		} else {
			if (!frag->len) {
   1cd72:	89a3      	ldrh	r3, [r4, #12]
   1cd74:	2b00      	cmp	r3, #0
   1cd76:	d030      	beq.n	1cdda <net_pkt_compact+0x7e>

				break;
			}
		}

		prev = frag;
   1cd78:	4627      	mov	r7, r4
		frag = frag->frags;
   1cd7a:	6824      	ldr	r4, [r4, #0]
	while (frag) {
   1cd7c:	2c00      	cmp	r4, #0
   1cd7e:	d031      	beq.n	1cde4 <net_pkt_compact+0x88>
		if (frag->frags) {
   1cd80:	6823      	ldr	r3, [r4, #0]
   1cd82:	2b00      	cmp	r3, #0
   1cd84:	d0f5      	beq.n	1cd72 <net_pkt_compact+0x16>
			copy_len = frag->frags->len;
   1cd86:	899d      	ldrh	r5, [r3, #12]
			if (copy_len > net_buf_tailroom(frag)) {
   1cd88:	f104 0608 	add.w	r6, r4, #8
   1cd8c:	4630      	mov	r0, r6
   1cd8e:	f7fd fa3a 	bl	1a206 <net_buf_simple_tailroom>
   1cd92:	4285      	cmp	r5, r0
   1cd94:	d8e8      	bhi.n	1cd68 <net_pkt_compact+0xc>
	return buf->data + buf->len;
   1cd96:	68a0      	ldr	r0, [r4, #8]
   1cd98:	89a3      	ldrh	r3, [r4, #12]
			memcpy(net_buf_tail(frag), frag->frags->data, copy_len);
   1cd9a:	6821      	ldr	r1, [r4, #0]
   1cd9c:	462a      	mov	r2, r5
   1cd9e:	6889      	ldr	r1, [r1, #8]
   1cda0:	4418      	add	r0, r3
   1cda2:	f7e3 fa8d 	bl	2c0 <memcpy>
			net_buf_add(frag, copy_len);
   1cda6:	4629      	mov	r1, r5
   1cda8:	4630      	mov	r0, r6
   1cdaa:	f7fd f9c3 	bl	1a134 <net_buf_simple_add>
			memmove(frag->frags->data,
   1cdae:	6823      	ldr	r3, [r4, #0]
   1cdb0:	6898      	ldr	r0, [r3, #8]
				frag->frags->len - copy_len);
   1cdb2:	899a      	ldrh	r2, [r3, #12]
			memmove(frag->frags->data,
   1cdb4:	1b52      	subs	r2, r2, r5
   1cdb6:	1941      	adds	r1, r0, r5
   1cdb8:	f00c fc2a 	bl	29610 <memmove>
			frag->frags->len -= copy_len;
   1cdbc:	6822      	ldr	r2, [r4, #0]
   1cdbe:	8993      	ldrh	r3, [r2, #12]
   1cdc0:	1b5d      	subs	r5, r3, r5
   1cdc2:	8195      	strh	r5, [r2, #12]
			if (net_buf_tailroom(frag)) {
   1cdc4:	4630      	mov	r0, r6
   1cdc6:	f7fd fa1e 	bl	1a206 <net_buf_simple_tailroom>
   1cdca:	2800      	cmp	r0, #0
   1cdcc:	d0d4      	beq.n	1cd78 <net_pkt_compact+0x1c>
				net_pkt_frag_del(pkt, frag, frag->frags);
   1cdce:	6822      	ldr	r2, [r4, #0]
   1cdd0:	4621      	mov	r1, r4
   1cdd2:	4640      	mov	r0, r8
   1cdd4:	f7ff feea 	bl	1cbac <net_pkt_frag_del>
				continue;
   1cdd8:	e7d0      	b.n	1cd7c <net_pkt_compact+0x20>
				net_pkt_frag_del(pkt, prev, frag);
   1cdda:	4622      	mov	r2, r4
   1cddc:	4639      	mov	r1, r7
   1cdde:	4640      	mov	r0, r8
   1cde0:	f7ff fee4 	bl	1cbac <net_pkt_frag_del>
	}

	return true;
}
   1cde4:	2001      	movs	r0, #1
   1cde6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cdea <net_pkt_append>:
	return 0;
}

u16_t net_pkt_append(struct net_pkt *pkt, u16_t len, const u8_t *data,
		    s32_t timeout)
{
   1cdea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_buf *frag;

	if (!pkt || !data) {
   1cdee:	b3d0      	cbz	r0, 1ce66 <net_pkt_append+0x7c>
   1cdf0:	460c      	mov	r4, r1
   1cdf2:	4690      	mov	r8, r2
   1cdf4:	469a      	mov	sl, r3
   1cdf6:	4681      	mov	r9, r0
   1cdf8:	b3ca      	cbz	r2, 1ce6e <net_pkt_append+0x84>
		return 0;
	}

	if (!pkt->frags) {
   1cdfa:	6883      	ldr	r3, [r0, #8]
   1cdfc:	b133      	cbz	r3, 1ce0c <net_pkt_append+0x22>
	struct net_buf *frag = net_buf_frag_last(pkt->frags);
   1cdfe:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1ce02:	f7fd f96b 	bl	1a0dc <net_buf_frag_last>
   1ce06:	4605      	mov	r5, r0
	u16_t added_len = 0;
   1ce08:	2700      	movs	r7, #0
   1ce0a:	e024      	b.n	1ce56 <net_pkt_append+0x6c>
		frag = net_pkt_get_frag(pkt, timeout);
   1ce0c:	4651      	mov	r1, sl
   1ce0e:	f7ff fe61 	bl	1cad4 <net_pkt_get_frag>
		if (!frag) {
   1ce12:	4601      	mov	r1, r0
   1ce14:	b368      	cbz	r0, 1ce72 <net_pkt_append+0x88>
			return 0;
		}

		net_pkt_frag_add(pkt, frag);
   1ce16:	4648      	mov	r0, r9
   1ce18:	f7ff fed9 	bl	1cbce <net_pkt_frag_add>
   1ce1c:	e7ef      	b.n	1cdfe <net_pkt_append+0x14>
		u16_t count = min(len, net_buf_tailroom(frag));
   1ce1e:	4628      	mov	r0, r5
   1ce20:	f7fd f9f1 	bl	1a206 <net_buf_simple_tailroom>
   1ce24:	b286      	uxth	r6, r0
		void *data = net_buf_add(frag, count);
   1ce26:	4631      	mov	r1, r6
   1ce28:	4628      	mov	r0, r5
   1ce2a:	f7fd f983 	bl	1a134 <net_buf_simple_add>
		memcpy(data, value, count);
   1ce2e:	4632      	mov	r2, r6
   1ce30:	4641      	mov	r1, r8
   1ce32:	f7e3 fa45 	bl	2c0 <memcpy>
		len -= count;
   1ce36:	1ba4      	subs	r4, r4, r6
   1ce38:	b2a4      	uxth	r4, r4
		added_len += count;
   1ce3a:	4437      	add	r7, r6
   1ce3c:	b2bf      	uxth	r7, r7
		value += count;
   1ce3e:	44b0      	add	r8, r6
		if (len == 0) {
   1ce40:	b194      	cbz	r4, 1ce68 <net_pkt_append+0x7e>
		frag = net_pkt_get_frag(pkt, timeout);
   1ce42:	4651      	mov	r1, sl
   1ce44:	4648      	mov	r0, r9
   1ce46:	f7ff fe45 	bl	1cad4 <net_pkt_get_frag>
		if (!frag) {
   1ce4a:	4605      	mov	r5, r0
   1ce4c:	b160      	cbz	r0, 1ce68 <net_pkt_append+0x7e>
		net_pkt_frag_add(pkt, frag);
   1ce4e:	4601      	mov	r1, r0
   1ce50:	4648      	mov	r0, r9
   1ce52:	f7ff febc 	bl	1cbce <net_pkt_frag_add>
		u16_t count = min(len, net_buf_tailroom(frag));
   1ce56:	3508      	adds	r5, #8
   1ce58:	4628      	mov	r0, r5
   1ce5a:	f7fd f9d4 	bl	1a206 <net_buf_simple_tailroom>
   1ce5e:	4284      	cmp	r4, r0
   1ce60:	d2dd      	bcs.n	1ce1e <net_pkt_append+0x34>
   1ce62:	4626      	mov	r6, r4
   1ce64:	e7df      	b.n	1ce26 <net_pkt_append+0x3c>
		return 0;
   1ce66:	2700      	movs	r7, #0
	}

	return net_pkt_append_bytes(pkt, data, len, timeout);
}
   1ce68:	4638      	mov	r0, r7
   1ce6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   1ce6e:	2700      	movs	r7, #0
   1ce70:	e7fa      	b.n	1ce68 <net_pkt_append+0x7e>
			return 0;
   1ce72:	2700      	movs	r7, #0
   1ce74:	e7f8      	b.n	1ce68 <net_pkt_append+0x7e>

0001ce76 <net_frag_read>:
	return NULL;
}

struct net_buf *net_frag_read(struct net_buf *frag, u16_t offset,
			      u16_t *pos, u16_t len, u8_t *data)
{
   1ce76:	b4f0      	push	{r4, r5, r6, r7}
   1ce78:	9e04      	ldr	r6, [sp, #16]
	if (!frag) {
   1ce7a:	4604      	mov	r4, r0
   1ce7c:	b188      	cbz	r0, 1cea2 <net_frag_read+0x2c>
	while (frag) {
   1ce7e:	b17c      	cbz	r4, 1cea0 <net_frag_read+0x2a>
		if (offset == frag->len) {
   1ce80:	89a0      	ldrh	r0, [r4, #12]
   1ce82:	4288      	cmp	r0, r1
   1ce84:	d005      	beq.n	1ce92 <net_frag_read+0x1c>
		} else if (offset < frag->len) {
   1ce86:	4288      	cmp	r0, r1
   1ce88:	d807      	bhi.n	1ce9a <net_frag_read+0x24>
		offset -= frag->len;
   1ce8a:	1a09      	subs	r1, r1, r0
   1ce8c:	b289      	uxth	r1, r1
		frag = frag->frags;
   1ce8e:	6824      	ldr	r4, [r4, #0]
   1ce90:	e7f5      	b.n	1ce7e <net_frag_read+0x8>
			*pos = 0;
   1ce92:	2100      	movs	r1, #0
   1ce94:	8011      	strh	r1, [r2, #0]
			return frag->frags;
   1ce96:	6820      	ldr	r0, [r4, #0]
   1ce98:	e003      	b.n	1cea2 <net_frag_read+0x2c>
			*pos = offset;
   1ce9a:	8011      	strh	r1, [r2, #0]
			return frag;
   1ce9c:	4620      	mov	r0, r4
   1ce9e:	e000      	b.n	1cea2 <net_frag_read+0x2c>
	return NULL;
   1cea0:	4620      	mov	r0, r4
	u16_t copy = 0;

	frag = adjust_offset(frag, offset, pos);
	if (!frag) {
   1cea2:	b350      	cbz	r0, 1cefa <net_frag_read+0x84>
   1cea4:	2500      	movs	r5, #0
   1cea6:	e00d      	b.n	1cec4 <net_frag_read+0x4e>
	while (len-- > 0 && frag) {
		if (data) {
			frag = net_frag_read_byte(frag, *pos,
						  pos, data + copy++);
		} else {
			frag = net_frag_read_byte(frag, *pos, pos, NULL);
   1cea8:	8813      	ldrh	r3, [r2, #0]
	*pos = offset + 1;
   1ceaa:	3301      	adds	r3, #1
   1ceac:	b29b      	uxth	r3, r3
   1ceae:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1ceb0:	8984      	ldrh	r4, [r0, #12]
   1ceb2:	42a3      	cmp	r3, r4
   1ceb4:	d304      	bcc.n	1cec0 <net_frag_read+0x4a>
		*pos = 0;
   1ceb6:	2300      	movs	r3, #0
   1ceb8:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1ceba:	6800      	ldr	r0, [r0, #0]
   1cebc:	e000      	b.n	1cec0 <net_frag_read+0x4a>
						  pos, data + copy++);
   1cebe:	4625      	mov	r5, r4
   1cec0:	460b      	mov	r3, r1
		}

		/* Error: Still reamining length to be read, but no data. */
		if (!frag && len) {
   1cec2:	b1c0      	cbz	r0, 1cef6 <net_frag_read+0x80>
	while (len-- > 0 && frag) {
   1cec4:	1e59      	subs	r1, r3, #1
   1cec6:	b289      	uxth	r1, r1
   1cec8:	b1db      	cbz	r3, 1cf02 <net_frag_read+0x8c>
   1ceca:	b1d0      	cbz	r0, 1cf02 <net_frag_read+0x8c>
		if (data) {
   1cecc:	2e00      	cmp	r6, #0
   1cece:	d0eb      	beq.n	1cea8 <net_frag_read+0x32>
			frag = net_frag_read_byte(frag, *pos,
   1ced0:	8813      	ldrh	r3, [r2, #0]
						  pos, data + copy++);
   1ced2:	1c6c      	adds	r4, r5, #1
   1ced4:	b2a4      	uxth	r4, r4
	if (data) {
   1ced6:	42ee      	cmn	r6, r5
   1ced8:	d002      	beq.n	1cee0 <net_frag_read+0x6a>
		*data = frag->data[offset];
   1ceda:	6887      	ldr	r7, [r0, #8]
   1cedc:	5cff      	ldrb	r7, [r7, r3]
   1cede:	5577      	strb	r7, [r6, r5]
	*pos = offset + 1;
   1cee0:	3301      	adds	r3, #1
   1cee2:	b29b      	uxth	r3, r3
   1cee4:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1cee6:	8985      	ldrh	r5, [r0, #12]
   1cee8:	42ab      	cmp	r3, r5
   1ceea:	d3e8      	bcc.n	1cebe <net_frag_read+0x48>
		*pos = 0;
   1ceec:	2300      	movs	r3, #0
   1ceee:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1cef0:	6800      	ldr	r0, [r0, #0]
						  pos, data + copy++);
   1cef2:	4625      	mov	r5, r4
   1cef4:	e7e4      	b.n	1cec0 <net_frag_read+0x4a>
		if (!frag && len) {
   1cef6:	2900      	cmp	r1, #0
   1cef8:	d0e4      	beq.n	1cec4 <net_frag_read+0x4e>
	}

	return frag;

error:
	*pos = 0xffff;
   1cefa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1cefe:	8013      	strh	r3, [r2, #0]

	return NULL;
   1cf00:	2000      	movs	r0, #0
}
   1cf02:	bcf0      	pop	{r4, r5, r6, r7}
   1cf04:	4770      	bx	lr

0001cf06 <net_frag_read_be16>:

struct net_buf *net_frag_read_be16(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u16_t *value)
{
   1cf06:	b510      	push	{r4, lr}
   1cf08:	b084      	sub	sp, #16
   1cf0a:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v16[2];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u16_t), v16);
   1cf0c:	ab03      	add	r3, sp, #12
   1cf0e:	9300      	str	r3, [sp, #0]
   1cf10:	2302      	movs	r3, #2
   1cf12:	f7ff ffb0 	bl	1ce76 <net_frag_read>

	*value = v16[0] << 8 | v16[1];
   1cf16:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1cf1a:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1cf1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1cf22:	8023      	strh	r3, [r4, #0]

	return ret_frag;
}
   1cf24:	b004      	add	sp, #16
   1cf26:	bd10      	pop	{r4, pc}

0001cf28 <net_frag_read_be32>:

struct net_buf *net_frag_read_be32(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u32_t *value)
{
   1cf28:	b510      	push	{r4, lr}
   1cf2a:	b084      	sub	sp, #16
   1cf2c:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v32[4];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u32_t), v32);
   1cf2e:	ab03      	add	r3, sp, #12
   1cf30:	9300      	str	r3, [sp, #0]
   1cf32:	2304      	movs	r3, #4
   1cf34:	f7ff ff9f 	bl	1ce76 <net_frag_read>

	*value = v32[0] << 24 | v32[1] << 16 | v32[2] << 8 | v32[3];
   1cf38:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1cf3c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1cf40:	041b      	lsls	r3, r3, #16
   1cf42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1cf46:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1cf4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1cf4e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1cf52:	4313      	orrs	r3, r2
   1cf54:	6023      	str	r3, [r4, #0]

	return ret_frag;
}
   1cf56:	b004      	add	sp, #16
   1cf58:	bd10      	pop	{r4, pc}

0001cf5a <net_pkt_write>:

struct net_buf *net_pkt_write(struct net_pkt *pkt, struct net_buf *frag,
			      u16_t offset, u16_t *pos,
			      u16_t len, u8_t *data,
			      s32_t timeout)
{
   1cf5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf5e:	b083      	sub	sp, #12
   1cf60:	9201      	str	r2, [sp, #4]
   1cf62:	469b      	mov	fp, r3
   1cf64:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1cf68:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	if (!pkt) {
   1cf6a:	2800      	cmp	r0, #0
   1cf6c:	d06d      	beq.n	1d04a <net_pkt_write+0xf0>
   1cf6e:	460c      	mov	r4, r1
   1cf70:	4682      	mov	sl, r0
   1cf72:	4615      	mov	r5, r2
	if (data) {
   1cf74:	b364      	cbz	r4, 1cfd0 <net_pkt_write+0x76>
		if (!frag) {
   1cf76:	2c00      	cmp	r4, #0
   1cf78:	d065      	beq.n	1d046 <net_pkt_write+0xec>
		if (offset < frag->len) {
   1cf7a:	89a3      	ldrh	r3, [r4, #12]
   1cf7c:	42ab      	cmp	r3, r5
   1cf7e:	d863      	bhi.n	1d048 <net_pkt_write+0xee>
		if (offset == frag->len) {
   1cf80:	d032      	beq.n	1cfe8 <net_pkt_write+0x8e>
		if (offset > frag->len) {
   1cf82:	42ab      	cmp	r3, r5
   1cf84:	d2f6      	bcs.n	1cf74 <net_pkt_write+0x1a>
			offset -= frag->len;
   1cf86:	1aed      	subs	r5, r5, r3
   1cf88:	b2ad      	uxth	r5, r5
			tailroom = net_buf_tailroom(frag);
   1cf8a:	f104 0908 	add.w	r9, r4, #8
   1cf8e:	4648      	mov	r0, r9
   1cf90:	f7fd f939 	bl	1a206 <net_buf_simple_tailroom>
   1cf94:	fa1f f880 	uxth.w	r8, r0
			if (offset < tailroom) {
   1cf98:	4545      	cmp	r5, r8
   1cf9a:	d33a      	bcc.n	1d012 <net_pkt_write+0xb8>
			if (offset == tailroom) {
   1cf9c:	4545      	cmp	r5, r8
   1cf9e:	d03e      	beq.n	1d01e <net_pkt_write+0xc4>
			if (offset > tailroom) {
   1cfa0:	4545      	cmp	r5, r8
   1cfa2:	d9e7      	bls.n	1cf74 <net_pkt_write+0x1a>
				net_buf_add(frag, tailroom);
   1cfa4:	b281      	uxth	r1, r0
   1cfa6:	4648      	mov	r0, r9
   1cfa8:	f7fd f8c4 	bl	1a134 <net_buf_simple_add>
				offset -= tailroom;
   1cfac:	eba5 0508 	sub.w	r5, r5, r8
   1cfb0:	b2ad      	uxth	r5, r5
				frag = check_and_create_data(pkt,
   1cfb2:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1cfb4:	2c00      	cmp	r4, #0
   1cfb6:	d1dd      	bne.n	1cf74 <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1cfb8:	990e      	ldr	r1, [sp, #56]	; 0x38
   1cfba:	4650      	mov	r0, sl
   1cfbc:	f7ff fd8a 	bl	1cad4 <net_pkt_get_frag>
	if (!frag) {
   1cfc0:	4604      	mov	r4, r0
   1cfc2:	2800      	cmp	r0, #0
   1cfc4:	d0d6      	beq.n	1cf74 <net_pkt_write+0x1a>
	net_pkt_frag_add(pkt, frag);
   1cfc6:	4601      	mov	r1, r0
   1cfc8:	4650      	mov	r0, sl
   1cfca:	f7ff fe00 	bl	1cbce <net_pkt_frag_add>
   1cfce:	e7d1      	b.n	1cf74 <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1cfd0:	990e      	ldr	r1, [sp, #56]	; 0x38
   1cfd2:	4650      	mov	r0, sl
   1cfd4:	f7ff fd7e 	bl	1cad4 <net_pkt_get_frag>
	if (!frag) {
   1cfd8:	4604      	mov	r4, r0
   1cfda:	2800      	cmp	r0, #0
   1cfdc:	d0cb      	beq.n	1cf76 <net_pkt_write+0x1c>
	net_pkt_frag_add(pkt, frag);
   1cfde:	4601      	mov	r1, r0
   1cfe0:	4650      	mov	r0, sl
   1cfe2:	f7ff fdf4 	bl	1cbce <net_pkt_frag_add>
   1cfe6:	e7c6      	b.n	1cf76 <net_pkt_write+0x1c>
			if (net_buf_tailroom(frag)) {
   1cfe8:	f104 0008 	add.w	r0, r4, #8
   1cfec:	f7fd f90b 	bl	1a206 <net_buf_simple_tailroom>
   1cff0:	bb50      	cbnz	r0, 1d048 <net_pkt_write+0xee>
			return check_and_create_data(pkt, frag->frags,
   1cff2:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1cff4:	b10c      	cbz	r4, 1cffa <net_pkt_write+0xa0>
			*pos = 0;
   1cff6:	2500      	movs	r5, #0
   1cff8:	e026      	b.n	1d048 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1cffa:	990e      	ldr	r1, [sp, #56]	; 0x38
   1cffc:	4650      	mov	r0, sl
   1cffe:	f7ff fd69 	bl	1cad4 <net_pkt_get_frag>
	if (!frag) {
   1d002:	4604      	mov	r4, r0
   1d004:	2800      	cmp	r0, #0
   1d006:	d0f6      	beq.n	1cff6 <net_pkt_write+0x9c>
	net_pkt_frag_add(pkt, frag);
   1d008:	4601      	mov	r1, r0
   1d00a:	4650      	mov	r0, sl
   1d00c:	f7ff fddf 	bl	1cbce <net_pkt_frag_add>
   1d010:	e7f1      	b.n	1cff6 <net_pkt_write+0x9c>
				net_buf_add(frag, offset);
   1d012:	4629      	mov	r1, r5
   1d014:	4648      	mov	r0, r9
   1d016:	f7fd f88d 	bl	1a134 <net_buf_simple_add>
				*pos = frag->len;
   1d01a:	89a5      	ldrh	r5, [r4, #12]
   1d01c:	e014      	b.n	1d048 <net_pkt_write+0xee>
				net_buf_add(frag, tailroom);
   1d01e:	b281      	uxth	r1, r0
   1d020:	4648      	mov	r0, r9
   1d022:	f7fd f887 	bl	1a134 <net_buf_simple_add>
				return check_and_create_data(pkt,
   1d026:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1d028:	b10c      	cbz	r4, 1d02e <net_pkt_write+0xd4>
				*pos = 0;
   1d02a:	2500      	movs	r5, #0
   1d02c:	e00c      	b.n	1d048 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1d02e:	990e      	ldr	r1, [sp, #56]	; 0x38
   1d030:	4650      	mov	r0, sl
   1d032:	f7ff fd4f 	bl	1cad4 <net_pkt_get_frag>
	if (!frag) {
   1d036:	4604      	mov	r4, r0
   1d038:	2800      	cmp	r0, #0
   1d03a:	d0f6      	beq.n	1d02a <net_pkt_write+0xd0>
	net_pkt_frag_add(pkt, frag);
   1d03c:	4601      	mov	r1, r0
   1d03e:	4650      	mov	r0, sl
   1d040:	f7ff fdc5 	bl	1cbce <net_pkt_frag_add>
   1d044:	e7f1      	b.n	1d02a <net_pkt_write+0xd0>
		if (!frag) {
   1d046:	9d01      	ldr	r5, [sp, #4]
		NET_ERR("Invalid packet");
		goto error;
	}

	frag = adjust_write_offset(pkt, frag, offset, &offset, timeout);
	if (!frag) {
   1d048:	b96c      	cbnz	r4, 1d066 <net_pkt_write+0x10c>
			net_pkt_frag_add(pkt, frag);
		}
	} while (1);

error:
	*pos = 0xffff;
   1d04a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d04e:	f8ab 3000 	strh.w	r3, [fp]

	return NULL;
   1d052:	2000      	movs	r0, #0
   1d054:	e02d      	b.n	1d0b2 <net_pkt_write+0x158>
		len -= count;
   1d056:	eba6 0608 	sub.w	r6, r6, r8
   1d05a:	b2b6      	uxth	r6, r6
		if (len == 0) {
   1d05c:	b32e      	cbz	r6, 1d0aa <net_pkt_write+0x150>
		data += count;
   1d05e:	4447      	add	r7, r8
		frag = frag->frags;
   1d060:	6824      	ldr	r4, [r4, #0]
		if (!frag) {
   1d062:	b34c      	cbz	r4, 1d0b8 <net_pkt_write+0x15e>
		offset = 0;
   1d064:	2500      	movs	r5, #0
		u16_t space = frag->size - net_buf_headroom(frag) - offset;
   1d066:	f8b4 800e 	ldrh.w	r8, [r4, #14]
   1d06a:	f104 0908 	add.w	r9, r4, #8
   1d06e:	4648      	mov	r0, r9
   1d070:	f7fd f8c5 	bl	1a1fe <net_buf_simple_headroom>
   1d074:	eba8 0800 	sub.w	r8, r8, r0
   1d078:	fa1f f888 	uxth.w	r8, r8
   1d07c:	eba8 0805 	sub.w	r8, r8, r5
   1d080:	fa1f f888 	uxth.w	r8, r8
		u16_t count = min(len, space);
   1d084:	45b0      	cmp	r8, r6
   1d086:	bf28      	it	cs
   1d088:	46b0      	movcs	r8, r6
		memcpy(frag->data + offset, data, count);
   1d08a:	68a0      	ldr	r0, [r4, #8]
   1d08c:	4642      	mov	r2, r8
   1d08e:	4639      	mov	r1, r7
   1d090:	4428      	add	r0, r5
   1d092:	f7e3 f915 	bl	2c0 <memcpy>
		size_to_add = offset + count - frag->len;
   1d096:	eb05 0108 	add.w	r1, r5, r8
   1d09a:	89a3      	ldrh	r3, [r4, #12]
   1d09c:	1ac9      	subs	r1, r1, r3
		if (size_to_add > 0) {
   1d09e:	2900      	cmp	r1, #0
   1d0a0:	ddd9      	ble.n	1d056 <net_pkt_write+0xfc>
			net_buf_add(frag, size_to_add);
   1d0a2:	4648      	mov	r0, r9
   1d0a4:	f7fd f846 	bl	1a134 <net_buf_simple_add>
   1d0a8:	e7d5      	b.n	1d056 <net_pkt_write+0xfc>
			*pos = offset + count;
   1d0aa:	4445      	add	r5, r8
   1d0ac:	f8ab 5000 	strh.w	r5, [fp]
			return frag;
   1d0b0:	4620      	mov	r0, r4
}
   1d0b2:	b003      	add	sp, #12
   1d0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			frag = net_pkt_get_frag(pkt, timeout);
   1d0b8:	990e      	ldr	r1, [sp, #56]	; 0x38
   1d0ba:	4650      	mov	r0, sl
   1d0bc:	f7ff fd0a 	bl	1cad4 <net_pkt_get_frag>
			if (!frag) {
   1d0c0:	4604      	mov	r4, r0
   1d0c2:	2800      	cmp	r0, #0
   1d0c4:	d0c1      	beq.n	1d04a <net_pkt_write+0xf0>
			net_pkt_frag_add(pkt, frag);
   1d0c6:	4601      	mov	r1, r0
   1d0c8:	4650      	mov	r0, sl
   1d0ca:	f7ff fd80 	bl	1cbce <net_pkt_frag_add>
   1d0ce:	e7c9      	b.n	1d064 <net_pkt_write+0x10a>

0001d0d0 <net_pkt_get_info>:
void net_pkt_get_info(struct k_mem_slab **rx,
		      struct k_mem_slab **tx,
		      struct net_buf_pool **rx_data,
		      struct net_buf_pool **tx_data)
{
	if (rx) {
   1d0d0:	b170      	cbz	r0, 1d0f0 <net_pkt_get_info+0x20>
{
   1d0d2:	b410      	push	{r4}
   1d0d4:	4604      	mov	r4, r0
		*rx = &rx_pkts;
   1d0d6:	480c      	ldr	r0, [pc, #48]	; (1d108 <net_pkt_get_info+0x38>)
   1d0d8:	6020      	str	r0, [r4, #0]
	}

	if (tx) {
   1d0da:	b109      	cbz	r1, 1d0e0 <net_pkt_get_info+0x10>
		*tx = &tx_pkts;
   1d0dc:	480b      	ldr	r0, [pc, #44]	; (1d10c <net_pkt_get_info+0x3c>)
   1d0de:	6008      	str	r0, [r1, #0]
	}

	if (rx_data) {
   1d0e0:	b10a      	cbz	r2, 1d0e6 <net_pkt_get_info+0x16>
		*rx_data = &rx_bufs;
   1d0e2:	490b      	ldr	r1, [pc, #44]	; (1d110 <net_pkt_get_info+0x40>)
   1d0e4:	6011      	str	r1, [r2, #0]
	}

	if (tx_data) {
   1d0e6:	b10b      	cbz	r3, 1d0ec <net_pkt_get_info+0x1c>
		*tx_data = &tx_bufs;
   1d0e8:	4a0a      	ldr	r2, [pc, #40]	; (1d114 <net_pkt_get_info+0x44>)
   1d0ea:	601a      	str	r2, [r3, #0]
	}
}
   1d0ec:	bc10      	pop	{r4}
   1d0ee:	4770      	bx	lr
	if (tx) {
   1d0f0:	b109      	cbz	r1, 1d0f6 <net_pkt_get_info+0x26>
		*tx = &tx_pkts;
   1d0f2:	4806      	ldr	r0, [pc, #24]	; (1d10c <net_pkt_get_info+0x3c>)
   1d0f4:	6008      	str	r0, [r1, #0]
	if (rx_data) {
   1d0f6:	b10a      	cbz	r2, 1d0fc <net_pkt_get_info+0x2c>
		*rx_data = &rx_bufs;
   1d0f8:	4905      	ldr	r1, [pc, #20]	; (1d110 <net_pkt_get_info+0x40>)
   1d0fa:	6011      	str	r1, [r2, #0]
	if (tx_data) {
   1d0fc:	2b00      	cmp	r3, #0
   1d0fe:	d0f6      	beq.n	1d0ee <net_pkt_get_info+0x1e>
		*tx_data = &tx_bufs;
   1d100:	4a04      	ldr	r2, [pc, #16]	; (1d114 <net_pkt_get_info+0x44>)
   1d102:	601a      	str	r2, [r3, #0]
   1d104:	4770      	bx	lr
   1d106:	bf00      	nop
   1d108:	2000cef4 	.word	0x2000cef4
   1d10c:	2000cf10 	.word	0x2000cf10
   1d110:	2000d074 	.word	0x2000d074
   1d114:	2000d094 	.word	0x2000d094

0001d118 <net_frag_get_pos>:
#endif /* CONFIG_NET_DEBUG_NET_PKT */

struct net_buf *net_frag_get_pos(struct net_pkt *pkt,
				 u16_t offset,
				 u16_t *pos)
{
   1d118:	b500      	push	{lr}
   1d11a:	b083      	sub	sp, #12
	struct net_buf *frag;

	frag = net_frag_skip(pkt->frags, offset, pos, 0);
   1d11c:	6880      	ldr	r0, [r0, #8]
 */
static inline struct net_buf *net_frag_skip(struct net_buf *frag,
					    u16_t offset,
					    u16_t *pos, u16_t len)
{
	return net_frag_read(frag, offset, pos, len, NULL);
   1d11e:	2300      	movs	r3, #0
   1d120:	9300      	str	r3, [sp, #0]
   1d122:	f7ff fea8 	bl	1ce76 <net_frag_read>
	if (!frag) {
		return NULL;
	}

	return frag;
}
   1d126:	b003      	add	sp, #12
   1d128:	f85d fb04 	ldr.w	pc, [sp], #4

0001d12c <net_pkt_icmp_data>:
#else
#define too_short_msg(...)
#endif

struct net_icmp_hdr *net_pkt_icmp_data(struct net_pkt *pkt)
{
   1d12c:	b500      	push	{lr}
   1d12e:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1d130:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1d134:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1d138:	f10d 0206 	add.w	r2, sp, #6
   1d13c:	4419      	add	r1, r3
   1d13e:	f7ff ffeb 	bl	1d118 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1d142:	b130      	cbz	r0, 1d152 <net_pkt_icmp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("icmp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_icmp_hdr *)(frag->data + offset);
   1d144:	6880      	ldr	r0, [r0, #8]
   1d146:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d14a:	4418      	add	r0, r3
}
   1d14c:	b003      	add	sp, #12
   1d14e:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1d152:	2000      	movs	r0, #0
   1d154:	e7fa      	b.n	1d14c <net_pkt_icmp_data+0x20>

0001d156 <net_pkt_icmp_opt_data>:

u8_t *net_pkt_icmp_opt_data(struct net_pkt *pkt, size_t opt_len)
{
   1d156:	b500      	push	{lr}
   1d158:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1d15a:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) + opt_len,
   1d15e:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1d162:	4413      	add	r3, r2
	frag = net_frag_get_pos(pkt,
   1d164:	4419      	add	r1, r3
   1d166:	f10d 0206 	add.w	r2, sp, #6
   1d16a:	b289      	uxth	r1, r1
   1d16c:	f7ff ffd4 	bl	1d118 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1d170:	b130      	cbz	r0, 1d180 <net_pkt_icmp_opt_data+0x2a>
		/* We tried to read past the end of the data */
		too_short_msg("icmp opt data", pkt, offset, opt_len);
		return NULL;
	}

	return frag->data + offset;
   1d172:	6880      	ldr	r0, [r0, #8]
   1d174:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d178:	4418      	add	r0, r3
}
   1d17a:	b003      	add	sp, #12
   1d17c:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1d180:	2000      	movs	r0, #0
   1d182:	e7fa      	b.n	1d17a <net_pkt_icmp_opt_data+0x24>

0001d184 <net_pkt_udp_data>:

struct net_udp_hdr *net_pkt_udp_data(struct net_pkt *pkt)
{
   1d184:	b500      	push	{lr}
   1d186:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1d188:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1d18c:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1d190:	f10d 0206 	add.w	r2, sp, #6
   1d194:	4419      	add	r1, r3
   1d196:	f7ff ffbf 	bl	1d118 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1d19a:	b130      	cbz	r0, 1d1aa <net_pkt_udp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("udp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_udp_hdr *)(frag->data + offset);
   1d19c:	6880      	ldr	r0, [r0, #8]
   1d19e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d1a2:	4418      	add	r0, r3
}
   1d1a4:	b003      	add	sp, #12
   1d1a6:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1d1aa:	2000      	movs	r0, #0
   1d1ac:	e7fa      	b.n	1d1a4 <net_pkt_udp_data+0x20>

0001d1ae <net_pkt_tcp_data>:

struct net_tcp_hdr *net_pkt_tcp_data(struct net_pkt *pkt)
{
   1d1ae:	b500      	push	{lr}
   1d1b0:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1d1b2:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1d1b6:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1d1ba:	f10d 0206 	add.w	r2, sp, #6
   1d1be:	4419      	add	r1, r3
   1d1c0:	f7ff ffaa 	bl	1d118 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1d1c4:	b130      	cbz	r0, 1d1d4 <net_pkt_tcp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("tcp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_tcp_hdr *)(frag->data + offset);
   1d1c6:	6880      	ldr	r0, [r0, #8]
   1d1c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d1cc:	4418      	add	r0, r3
}
   1d1ce:	b003      	add	sp, #12
   1d1d0:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1d1d4:	2000      	movs	r0, #0
   1d1d6:	e7fa      	b.n	1d1ce <net_pkt_tcp_data+0x20>

0001d1d8 <net_pkt_clone>:

struct net_pkt *net_pkt_clone(struct net_pkt *pkt, s32_t timeout)
{
   1d1d8:	b570      	push	{r4, r5, r6, lr}
   1d1da:	b082      	sub	sp, #8
	struct net_pkt *clone;
	struct net_buf *frag;
	u16_t pos;

	if (!pkt) {
   1d1dc:	4605      	mov	r5, r0
   1d1de:	2800      	cmp	r0, #0
   1d1e0:	d065      	beq.n	1d2ae <net_pkt_clone+0xd6>
   1d1e2:	460e      	mov	r6, r1
		return NULL;
	}

	clone = net_pkt_get_reserve(pkt->slab, 0, timeout);
   1d1e4:	460a      	mov	r2, r1
   1d1e6:	2100      	movs	r1, #0
   1d1e8:	6840      	ldr	r0, [r0, #4]
   1d1ea:	f7ff fbad 	bl	1c948 <net_pkt_get_reserve>
	if (!clone) {
   1d1ee:	4604      	mov	r4, r0
   1d1f0:	2800      	cmp	r0, #0
   1d1f2:	d054      	beq.n	1d29e <net_pkt_clone+0xc6>
		return NULL;
	}

	clone->frags = NULL;
   1d1f4:	2300      	movs	r3, #0
   1d1f6:	6083      	str	r3, [r0, #8]

	if (pkt->frags) {
   1d1f8:	68ab      	ldr	r3, [r5, #8]
   1d1fa:	b173      	cbz	r3, 1d21a <net_pkt_clone+0x42>
   1d1fc:	2100      	movs	r1, #0
   1d1fe:	e002      	b.n	1d206 <net_pkt_clone+0x2e>
		bytes += buf->len;
   1d200:	899a      	ldrh	r2, [r3, #12]
   1d202:	4411      	add	r1, r2
		buf = buf->frags;
   1d204:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1d206:	2b00      	cmp	r3, #0
   1d208:	d1fa      	bne.n	1d200 <net_pkt_clone+0x28>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1d20a:	4633      	mov	r3, r6
   1d20c:	2200      	movs	r2, #0
   1d20e:	4628      	mov	r0, r5
   1d210:	f7ff fcf4 	bl	1cbfc <net_pkt_copy>
		clone->frags = net_pkt_copy_all(pkt, 0, timeout);
   1d214:	60a0      	str	r0, [r4, #8]
		if (!clone->frags) {
   1d216:	2800      	cmp	r0, #0
   1d218:	d044      	beq.n	1d2a4 <net_pkt_clone+0xcc>
			net_pkt_unref(clone);
			return NULL;
		}
	}

	clone->context = pkt->context;
   1d21a:	68eb      	ldr	r3, [r5, #12]
   1d21c:	60e3      	str	r3, [r4, #12]
	clone->token = pkt->token;
   1d21e:	692b      	ldr	r3, [r5, #16]
   1d220:	6123      	str	r3, [r4, #16]
	clone->iface = pkt->iface;
   1d222:	696b      	ldr	r3, [r5, #20]
   1d224:	6163      	str	r3, [r4, #20]

	if (clone->frags) {
   1d226:	68a3      	ldr	r3, [r4, #8]
   1d228:	b1db      	cbz	r3, 1d262 <net_pkt_clone+0x8a>
		frag = net_frag_get_pos(clone, net_pkt_ip_hdr_len(pkt), &pos);
   1d22a:	f10d 0206 	add.w	r2, sp, #6
   1d22e:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   1d232:	4620      	mov	r0, r4
   1d234:	f7ff ff70 	bl	1d118 <net_frag_get_pos>

		net_pkt_set_appdata(clone, frag->data + pos);
   1d238:	6883      	ldr	r3, [r0, #8]
   1d23a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d23e:	4413      	add	r3, r2
	pkt->appdata = data;
   1d240:	61a3      	str	r3, [r4, #24]
	return pkt->appdatalen;
   1d242:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
	pkt->appdatalen = len;
   1d244:	8623      	strh	r3, [r4, #48]	; 0x30

		/* The link header pointers are only usable if there is
		 * a fragment that we copied because those pointers point
		 * to start of the fragment which we do not have right now.
		 */
		memcpy(&clone->lladdr_src, &pkt->lladdr_src,
   1d246:	2208      	movs	r2, #8
   1d248:	f105 0120 	add.w	r1, r5, #32
   1d24c:	f104 0020 	add.w	r0, r4, #32
   1d250:	f7e3 f836 	bl	2c0 <memcpy>
		       sizeof(clone->lladdr_src));
		memcpy(&clone->lladdr_dst, &pkt->lladdr_dst,
   1d254:	2208      	movs	r2, #8
   1d256:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1d25a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1d25e:	f7e3 f82f 	bl	2c0 <memcpy>
	pkt->next_hdr = hdr;
   1d262:	2300      	movs	r3, #0
   1d264:	61e3      	str	r3, [r4, #28]
	return pkt->ip_hdr_len;
   1d266:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	pkt->ip_hdr_len = len;
   1d26a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->family;
   1d26e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1d272:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	pkt->family = family;
   1d276:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1d27a:	f363 02c6 	bfi	r2, r3, #3, #4
   1d27e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	net_pkt_set_ip_hdr_len(clone, net_pkt_ip_hdr_len(pkt));

	net_pkt_set_family(clone, net_pkt_family(pkt));

#if defined(CONFIG_NET_IPV6)
	clone->ipv6_hop_limit = pkt->ipv6_hop_limit;
   1d282:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   1d286:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	clone->ipv6_ext_len = pkt->ipv6_ext_len;
   1d28a:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   1d28e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	clone->ipv6_ext_opt_len = pkt->ipv6_ext_opt_len;
   1d292:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1d296:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	clone->ipv6_prev_hdr_start = pkt->ipv6_prev_hdr_start;
   1d29a:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   1d29c:	87e3      	strh	r3, [r4, #62]	; 0x3e
#endif

	NET_DBG("Cloned %p to %p", pkt, clone);

	return clone;
}
   1d29e:	4620      	mov	r0, r4
   1d2a0:	b002      	add	sp, #8
   1d2a2:	bd70      	pop	{r4, r5, r6, pc}
			net_pkt_unref(clone);
   1d2a4:	4620      	mov	r0, r4
   1d2a6:	f7ff fc68 	bl	1cb7a <net_pkt_unref>
			return NULL;
   1d2aa:	2400      	movs	r4, #0
   1d2ac:	e7f7      	b.n	1d29e <net_pkt_clone+0xc6>
		return NULL;
   1d2ae:	4604      	mov	r4, r0
   1d2b0:	e7f5      	b.n	1d29e <net_pkt_clone+0xc6>

0001d2b2 <net_pkt_init>:

void net_pkt_init(void)
{
   1d2b2:	4770      	bx	lr

0001d2b4 <net_value_to_udec>:
	*(ptr - 1) = '\0';
	return buf;
}

static int net_value_to_udec(char *buf, u32_t value, int precision)
{
   1d2b4:	b470      	push	{r4, r5, r6}
	int i;
	int temp;
	char *start = buf;

	divisor = 1000000000;
	if (precision < 0)
   1d2b6:	2a00      	cmp	r2, #0
   1d2b8:	db03      	blt.n	1d2c2 <net_value_to_udec+0xe>
	for (i = 9; i >= 0; i--, divisor /= 10) {
		temp = value / divisor;
		value = value % divisor;
		if ((precision > i) || (temp != 0)) {
			precision = i;
			*buf++ = (char) (temp + '0');
   1d2ba:	4606      	mov	r6, r0
   1d2bc:	2409      	movs	r4, #9
   1d2be:	4b0e      	ldr	r3, [pc, #56]	; (1d2f8 <net_value_to_udec+0x44>)
   1d2c0:	e00a      	b.n	1d2d8 <net_value_to_udec+0x24>
		precision = 1;
   1d2c2:	2201      	movs	r2, #1
   1d2c4:	e7f9      	b.n	1d2ba <net_value_to_udec+0x6>
			*buf++ = (char) (temp + '0');
   1d2c6:	3530      	adds	r5, #48	; 0x30
   1d2c8:	7035      	strb	r5, [r6, #0]
			precision = i;
   1d2ca:	4622      	mov	r2, r4
			*buf++ = (char) (temp + '0');
   1d2cc:	3601      	adds	r6, #1
	for (i = 9; i >= 0; i--, divisor /= 10) {
   1d2ce:	3c01      	subs	r4, #1
   1d2d0:	4d0a      	ldr	r5, [pc, #40]	; (1d2fc <net_value_to_udec+0x48>)
   1d2d2:	fba5 5303 	umull	r5, r3, r5, r3
   1d2d6:	08db      	lsrs	r3, r3, #3
   1d2d8:	2c00      	cmp	r4, #0
   1d2da:	db08      	blt.n	1d2ee <net_value_to_udec+0x3a>
		temp = value / divisor;
   1d2dc:	fbb1 f5f3 	udiv	r5, r1, r3
		value = value % divisor;
   1d2e0:	fb03 1115 	mls	r1, r3, r5, r1
		if ((precision > i) || (temp != 0)) {
   1d2e4:	42a2      	cmp	r2, r4
   1d2e6:	dcee      	bgt.n	1d2c6 <net_value_to_udec+0x12>
   1d2e8:	2d00      	cmp	r5, #0
   1d2ea:	d0f0      	beq.n	1d2ce <net_value_to_udec+0x1a>
   1d2ec:	e7eb      	b.n	1d2c6 <net_value_to_udec+0x12>
		}
	}
	*buf = 0;
   1d2ee:	2300      	movs	r3, #0
   1d2f0:	7033      	strb	r3, [r6, #0]

	return buf - start;
}
   1d2f2:	1a30      	subs	r0, r6, r0
   1d2f4:	bc70      	pop	{r4, r5, r6}
   1d2f6:	4770      	bx	lr
   1d2f8:	3b9aca00 	.word	0x3b9aca00
   1d2fc:	cccccccd 	.word	0xcccccccd

0001d300 <calc_chksum>:

	return 0;
}

static u16_t calc_chksum(u16_t sum, const u8_t *ptr, u16_t len)
{
   1d300:	b410      	push	{r4}
	u16_t tmp;
	const u8_t *end;

	end = ptr + len - 1;
   1d302:	3a01      	subs	r2, #1
   1d304:	440a      	add	r2, r1

	while (ptr < end) {
   1d306:	e000      	b.n	1d30a <calc_chksum+0xa>
		tmp = (ptr[0] << 8) + ptr[1];
		sum += tmp;
		if (sum < tmp) {
			sum++;
		}
		ptr += 2;
   1d308:	3102      	adds	r1, #2
	while (ptr < end) {
   1d30a:	4291      	cmp	r1, r2
   1d30c:	d20b      	bcs.n	1d326 <calc_chksum+0x26>
		tmp = (ptr[0] << 8) + ptr[1];
   1d30e:	780c      	ldrb	r4, [r1, #0]
   1d310:	784b      	ldrb	r3, [r1, #1]
   1d312:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   1d316:	b29b      	uxth	r3, r3
		sum += tmp;
   1d318:	4418      	add	r0, r3
   1d31a:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1d31c:	4283      	cmp	r3, r0
   1d31e:	d9f3      	bls.n	1d308 <calc_chksum+0x8>
			sum++;
   1d320:	3001      	adds	r0, #1
   1d322:	b280      	uxth	r0, r0
   1d324:	e7f0      	b.n	1d308 <calc_chksum+0x8>
	}

	if (ptr == end) {
   1d326:	d001      	beq.n	1d32c <calc_chksum+0x2c>
			sum++;
		}
	}

	return sum;
}
   1d328:	bc10      	pop	{r4}
   1d32a:	4770      	bx	lr
		tmp = ptr[0] << 8;
   1d32c:	780b      	ldrb	r3, [r1, #0]
   1d32e:	021b      	lsls	r3, r3, #8
		sum += tmp;
   1d330:	4418      	add	r0, r3
   1d332:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1d334:	4283      	cmp	r3, r0
   1d336:	d9f7      	bls.n	1d328 <calc_chksum+0x28>
			sum++;
   1d338:	3001      	adds	r0, #1
   1d33a:	b280      	uxth	r0, r0
   1d33c:	e7f4      	b.n	1d328 <calc_chksum+0x28>

0001d33e <convert_port>:
	return false;
}

#if defined(CONFIG_NET_IPV6) || defined(CONFIG_NET_IPV4)
static bool convert_port(const char *buf, u16_t *port)
{
   1d33e:	b530      	push	{r4, r5, lr}
   1d340:	b083      	sub	sp, #12
   1d342:	4604      	mov	r4, r0
   1d344:	460d      	mov	r5, r1
	unsigned long tmp;
	char *endptr;

	tmp = strtoul(buf, &endptr, 10);
   1d346:	220a      	movs	r2, #10
   1d348:	a901      	add	r1, sp, #4
   1d34a:	f00c ff99 	bl	2a280 <strtoul>
	if ((endptr == buf && tmp == 0) ||
   1d34e:	9b01      	ldr	r3, [sp, #4]
   1d350:	429c      	cmp	r4, r3
   1d352:	d008      	beq.n	1d366 <convert_port+0x28>
	    !(*buf != '\0' && *endptr == '\0') ||
   1d354:	7822      	ldrb	r2, [r4, #0]
	if ((endptr == buf && tmp == 0) ||
   1d356:	b16a      	cbz	r2, 1d374 <convert_port+0x36>
	    !(*buf != '\0' && *endptr == '\0') ||
   1d358:	781b      	ldrb	r3, [r3, #0]
   1d35a:	b973      	cbnz	r3, 1d37a <convert_port+0x3c>
	    ((unsigned long)(unsigned short)tmp != tmp)) {
   1d35c:	b283      	uxth	r3, r0
	    !(*buf != '\0' && *endptr == '\0') ||
   1d35e:	4298      	cmp	r0, r3
   1d360:	d005      	beq.n	1d36e <convert_port+0x30>
		return false;
   1d362:	2000      	movs	r0, #0
   1d364:	e007      	b.n	1d376 <convert_port+0x38>
	if ((endptr == buf && tmp == 0) ||
   1d366:	2800      	cmp	r0, #0
   1d368:	d1f4      	bne.n	1d354 <convert_port+0x16>
		return false;
   1d36a:	2000      	movs	r0, #0
   1d36c:	e003      	b.n	1d376 <convert_port+0x38>
	}

	*port = tmp;
   1d36e:	802b      	strh	r3, [r5, #0]

	return true;
   1d370:	2001      	movs	r0, #1
   1d372:	e000      	b.n	1d376 <convert_port+0x38>
		return false;
   1d374:	2000      	movs	r0, #0
}
   1d376:	b003      	add	sp, #12
   1d378:	bd30      	pop	{r4, r5, pc}
		return false;
   1d37a:	2000      	movs	r0, #0
   1d37c:	e7fb      	b.n	1d376 <convert_port+0x38>

0001d37e <net_byte_to_hex>:
{
   1d37e:	b430      	push	{r4, r5}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1d380:	090c      	lsrs	r4, r1, #4
   1d382:	2500      	movs	r5, #0
   1d384:	e00a      	b.n	1d39c <net_byte_to_hex+0x1e>
		if (i == 0 && !pad && !val) {
   1d386:	b96b      	cbnz	r3, 1d3a4 <net_byte_to_hex+0x26>
   1d388:	b12c      	cbz	r4, 1d396 <net_byte_to_hex+0x18>
   1d38a:	e00b      	b.n	1d3a4 <net_byte_to_hex+0x26>
			*ptr++ = (char) (val - 10 + base);
   1d38c:	4414      	add	r4, r2
   1d38e:	b2e4      	uxtb	r4, r4
   1d390:	3c0a      	subs	r4, #10
   1d392:	7004      	strb	r4, [r0, #0]
   1d394:	3001      	adds	r0, #1
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1d396:	3501      	adds	r5, #1
   1d398:	f001 040f 	and.w	r4, r1, #15
   1d39c:	2d01      	cmp	r5, #1
   1d39e:	dc07      	bgt.n	1d3b0 <net_byte_to_hex+0x32>
		if (i == 0 && !pad && !val) {
   1d3a0:	2d00      	cmp	r5, #0
   1d3a2:	d0f0      	beq.n	1d386 <net_byte_to_hex+0x8>
		if (val < 10) {
   1d3a4:	2c09      	cmp	r4, #9
   1d3a6:	dcf1      	bgt.n	1d38c <net_byte_to_hex+0xe>
			*ptr++ = (char) (val + '0');
   1d3a8:	3430      	adds	r4, #48	; 0x30
   1d3aa:	7004      	strb	r4, [r0, #0]
   1d3ac:	3001      	adds	r0, #1
   1d3ae:	e7f2      	b.n	1d396 <net_byte_to_hex+0x18>
	*ptr = '\0';
   1d3b0:	2300      	movs	r3, #0
   1d3b2:	7003      	strb	r3, [r0, #0]
}
   1d3b4:	bc30      	pop	{r4, r5}
   1d3b6:	4770      	bx	lr

0001d3b8 <net_sprint_ll_addr_buf>:
{
   1d3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d3bc:	4607      	mov	r7, r0
   1d3be:	460e      	mov	r6, r1
   1d3c0:	4690      	mov	r8, r2
	switch (ll_len) {
   1d3c2:	2906      	cmp	r1, #6
   1d3c4:	d002      	beq.n	1d3cc <net_sprint_ll_addr_buf+0x14>
   1d3c6:	2908      	cmp	r1, #8
   1d3c8:	d000      	beq.n	1d3cc <net_sprint_ll_addr_buf+0x14>
		len = 6;
   1d3ca:	2606      	movs	r6, #6
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1d3cc:	b2dd      	uxtb	r5, r3
	char *ptr = buf;
   1d3ce:	4640      	mov	r0, r8
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1d3d0:	2400      	movs	r4, #0
   1d3d2:	e00c      	b.n	1d3ee <net_sprint_ll_addr_buf+0x36>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
   1d3d4:	2301      	movs	r3, #1
   1d3d6:	2241      	movs	r2, #65	; 0x41
   1d3d8:	5d39      	ldrb	r1, [r7, r4]
   1d3da:	f7ff ffd0 	bl	1d37e <net_byte_to_hex>
   1d3de:	4602      	mov	r2, r0
		*ptr++ = ':';
   1d3e0:	3001      	adds	r0, #1
   1d3e2:	233a      	movs	r3, #58	; 0x3a
   1d3e4:	7013      	strb	r3, [r2, #0]
		blen -= 3;
   1d3e6:	3d03      	subs	r5, #3
   1d3e8:	b2ed      	uxtb	r5, r5
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1d3ea:	3401      	adds	r4, #1
   1d3ec:	b2e4      	uxtb	r4, r4
   1d3ee:	42b4      	cmp	r4, r6
   1d3f0:	d201      	bcs.n	1d3f6 <net_sprint_ll_addr_buf+0x3e>
   1d3f2:	2d00      	cmp	r5, #0
   1d3f4:	d1ee      	bne.n	1d3d4 <net_sprint_ll_addr_buf+0x1c>
	if (!(ptr - buf)) {
   1d3f6:	4540      	cmp	r0, r8
   1d3f8:	d005      	beq.n	1d406 <net_sprint_ll_addr_buf+0x4e>
	*(ptr - 1) = '\0';
   1d3fa:	2300      	movs	r3, #0
   1d3fc:	f800 3c01 	strb.w	r3, [r0, #-1]
	return buf;
   1d400:	4640      	mov	r0, r8
   1d402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
   1d406:	2000      	movs	r0, #0
}
   1d408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d40c <net_addr_ntop>:
{
   1d40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d410:	b087      	sub	sp, #28
	unsigned char zeros[8] = { 0 };
   1d412:	2300      	movs	r3, #0
   1d414:	9304      	str	r3, [sp, #16]
   1d416:	9305      	str	r3, [sp, #20]
	if (family == AF_INET6) {
   1d418:	280a      	cmp	r0, #10
   1d41a:	d011      	beq.n	1d440 <net_addr_ntop+0x34>
	} else if (family == AF_INET) {
   1d41c:	2802      	cmp	r0, #2
   1d41e:	f040 80c8 	bne.w	1d5b2 <net_addr_ntop+0x1a6>
		addr = (struct in_addr *)src;
   1d422:	9101      	str	r1, [sp, #4]
		len = 4;
   1d424:	f04f 0804 	mov.w	r8, #4
		delim = '.';
   1d428:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
	s8_t pos = -1;
   1d42c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1;
   1d430:	f04f 0a01 	mov.w	sl, #1
   1d434:	9202      	str	r2, [sp, #8]
   1d436:	9003      	str	r0, [sp, #12]
	char *ptr = dst;
   1d438:	4616      	mov	r6, r2
	bool needcolon = false;
   1d43a:	2500      	movs	r5, #0
	for (i = 0; i < len; i++) {
   1d43c:	462c      	mov	r4, r5
   1d43e:	e072      	b.n	1d526 <net_addr_ntop+0x11a>
		w = (u16_t *)addr6->s6_addr16;
   1d440:	460f      	mov	r7, r1
		for (i = 0; i < 8; i++) {
   1d442:	461d      	mov	r5, r3
   1d444:	e001      	b.n	1d44a <net_addr_ntop+0x3e>
   1d446:	3501      	adds	r5, #1
   1d448:	b2ed      	uxtb	r5, r5
   1d44a:	2d07      	cmp	r5, #7
   1d44c:	d810      	bhi.n	1d470 <net_addr_ntop+0x64>
   1d44e:	462b      	mov	r3, r5
			for (j = i; j < 8; j++) {
   1d450:	2b07      	cmp	r3, #7
   1d452:	d8f8      	bhi.n	1d446 <net_addr_ntop+0x3a>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1d454:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
   1d458:	2900      	cmp	r1, #0
   1d45a:	d1f4      	bne.n	1d446 <net_addr_ntop+0x3a>
				zeros[i]++;
   1d45c:	a906      	add	r1, sp, #24
   1d45e:	194c      	adds	r4, r1, r5
   1d460:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1d464:	3101      	adds	r1, #1
   1d466:	f804 1c08 	strb.w	r1, [r4, #-8]
			for (j = i; j < 8; j++) {
   1d46a:	3301      	adds	r3, #1
   1d46c:	b2db      	uxtb	r3, r3
   1d46e:	e7ef      	b.n	1d450 <net_addr_ntop+0x44>
   1d470:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1d474:	f04f 0a01 	mov.w	sl, #1
   1d478:	2300      	movs	r3, #0
   1d47a:	e001      	b.n	1d480 <net_addr_ntop+0x74>
		for (i = 0; i < 8; i++) {
   1d47c:	3301      	adds	r3, #1
   1d47e:	b2db      	uxtb	r3, r3
   1d480:	2b07      	cmp	r3, #7
   1d482:	d809      	bhi.n	1d498 <net_addr_ntop+0x8c>
			if (zeros[i] > longest) {
   1d484:	a906      	add	r1, sp, #24
   1d486:	4419      	add	r1, r3
   1d488:	f811 1c08 	ldrb.w	r1, [r1, #-8]
   1d48c:	458a      	cmp	sl, r1
   1d48e:	d2f5      	bcs.n	1d47c <net_addr_ntop+0x70>
				pos = i;
   1d490:	fa4f f983 	sxtb.w	r9, r3
				longest = zeros[i];
   1d494:	468a      	mov	sl, r1
   1d496:	e7f1      	b.n	1d47c <net_addr_ntop+0x70>
		if (longest == 1) {
   1d498:	f1ba 0f01 	cmp.w	sl, #1
   1d49c:	d004      	beq.n	1d4a8 <net_addr_ntop+0x9c>
		len = 8;
   1d49e:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1d4a2:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
   1d4a6:	e7c5      	b.n	1d434 <net_addr_ntop+0x28>
		len = 8;
   1d4a8:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1d4ac:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
			pos = -1;
   1d4b0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1d4b4:	e7be      	b.n	1d434 <net_addr_ntop+0x28>
			value = (u32_t)addr->s4_addr[i];
   1d4b6:	9a01      	ldr	r2, [sp, #4]
   1d4b8:	5cd1      	ldrb	r1, [r2, r3]
   1d4ba:	b28b      	uxth	r3, r1
			if (value == 0) {
   1d4bc:	b93b      	cbnz	r3, 1d4ce <net_addr_ntop+0xc2>
				*ptr++ = '0';
   1d4be:	4633      	mov	r3, r6
   1d4c0:	2230      	movs	r2, #48	; 0x30
   1d4c2:	f803 2b02 	strb.w	r2, [r3], #2
				*ptr++ = delim;
   1d4c6:	f886 b001 	strb.w	fp, [r6, #1]
   1d4ca:	461e      	mov	r6, r3
				continue;
   1d4cc:	e029      	b.n	1d522 <net_addr_ntop+0x116>
			l = net_value_to_udec(ptr, value, 0);
   1d4ce:	2200      	movs	r2, #0
   1d4d0:	4630      	mov	r0, r6
   1d4d2:	f7ff feef 	bl	1d2b4 <net_value_to_udec>
			ptr += l;
   1d4d6:	fa56 f080 	uxtab	r0, r6, r0
			*ptr++ = delim;
   1d4da:	1c46      	adds	r6, r0, #1
   1d4dc:	f880 b000 	strb.w	fp, [r0]
			continue;
   1d4e0:	e01f      	b.n	1d522 <net_addr_ntop+0x116>
			if (needcolon || i == 0) {
   1d4e2:	b905      	cbnz	r5, 1d4e6 <net_addr_ntop+0xda>
   1d4e4:	b95c      	cbnz	r4, 1d4fe <net_addr_ntop+0xf2>
				*ptr++ = ':';
   1d4e6:	1c73      	adds	r3, r6, #1
   1d4e8:	223a      	movs	r2, #58	; 0x3a
   1d4ea:	7032      	strb	r2, [r6, #0]
			*ptr++ = ':';
   1d4ec:	1c5e      	adds	r6, r3, #1
   1d4ee:	223a      	movs	r2, #58	; 0x3a
   1d4f0:	701a      	strb	r2, [r3, #0]
			i += longest - 1;
   1d4f2:	4454      	add	r4, sl
   1d4f4:	b2e4      	uxtb	r4, r4
   1d4f6:	3c01      	subs	r4, #1
   1d4f8:	b2e4      	uxtb	r4, r4
			needcolon = false;
   1d4fa:	2500      	movs	r5, #0
			continue;
   1d4fc:	e011      	b.n	1d522 <net_addr_ntop+0x116>
   1d4fe:	4633      	mov	r3, r6
   1d500:	e7f4      	b.n	1d4ec <net_addr_ntop+0xe0>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   1d502:	2300      	movs	r3, #0
   1d504:	2261      	movs	r2, #97	; 0x61
   1d506:	4630      	mov	r0, r6
   1d508:	f7ff ff39 	bl	1d37e <net_byte_to_hex>
   1d50c:	e002      	b.n	1d514 <net_addr_ntop+0x108>
					*ptr++ = (char) (bh - 10 + 'a');
   1d50e:	1c70      	adds	r0, r6, #1
   1d510:	3157      	adds	r1, #87	; 0x57
   1d512:	7031      	strb	r1, [r6, #0]
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1d514:	2301      	movs	r3, #1
   1d516:	2261      	movs	r2, #97	; 0x61
   1d518:	4629      	mov	r1, r5
   1d51a:	f7ff ff30 	bl	1d37e <net_byte_to_hex>
   1d51e:	4606      	mov	r6, r0
		needcolon = true;
   1d520:	2501      	movs	r5, #1
	for (i = 0; i < len; i++) {
   1d522:	3401      	adds	r4, #1
   1d524:	b2e4      	uxtb	r4, r4
   1d526:	4623      	mov	r3, r4
   1d528:	45a0      	cmp	r8, r4
   1d52a:	dd31      	ble.n	1d590 <net_addr_ntop+0x184>
		if (len == 4) {
   1d52c:	f1b8 0f04 	cmp.w	r8, #4
   1d530:	d0c1      	beq.n	1d4b6 <net_addr_ntop+0xaa>
		if (i == pos) {
   1d532:	454b      	cmp	r3, r9
   1d534:	d0d5      	beq.n	1d4e2 <net_addr_ntop+0xd6>
		if (needcolon) {
   1d536:	b115      	cbz	r5, 1d53e <net_addr_ntop+0x132>
			*ptr++ = ':';
   1d538:	233a      	movs	r3, #58	; 0x3a
   1d53a:	7033      	strb	r3, [r6, #0]
   1d53c:	3601      	adds	r6, #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   1d53e:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
   1d542:	021d      	lsls	r5, r3, #8
   1d544:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
   1d548:	b22d      	sxth	r5, r5
		bh = value >> 8;
   1d54a:	f3c5 2107 	ubfx	r1, r5, #8, #8
		bl = value & 0xff;
   1d54e:	b2ed      	uxtb	r5, r5
		if (bh) {
   1d550:	b139      	cbz	r1, 1d562 <net_addr_ntop+0x156>
			if (bh > 0x0f) {
   1d552:	290f      	cmp	r1, #15
   1d554:	d8d5      	bhi.n	1d502 <net_addr_ntop+0xf6>
				if (bh < 10) {
   1d556:	2909      	cmp	r1, #9
   1d558:	d8d9      	bhi.n	1d50e <net_addr_ntop+0x102>
					*ptr++ = (char)(bh + '0');
   1d55a:	1c70      	adds	r0, r6, #1
   1d55c:	3130      	adds	r1, #48	; 0x30
   1d55e:	7031      	strb	r1, [r6, #0]
   1d560:	e7d8      	b.n	1d514 <net_addr_ntop+0x108>
		} else if (bl > 0x0f) {
   1d562:	2d0f      	cmp	r5, #15
   1d564:	d806      	bhi.n	1d574 <net_addr_ntop+0x168>
			if (bl < 10) {
   1d566:	2d09      	cmp	r5, #9
   1d568:	d80d      	bhi.n	1d586 <net_addr_ntop+0x17a>
				*ptr++ = (char)(bl + '0');
   1d56a:	3530      	adds	r5, #48	; 0x30
   1d56c:	7035      	strb	r5, [r6, #0]
   1d56e:	3601      	adds	r6, #1
		needcolon = true;
   1d570:	2501      	movs	r5, #1
   1d572:	e7d6      	b.n	1d522 <net_addr_ntop+0x116>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1d574:	2300      	movs	r3, #0
   1d576:	2261      	movs	r2, #97	; 0x61
   1d578:	4629      	mov	r1, r5
   1d57a:	4630      	mov	r0, r6
   1d57c:	f7ff feff 	bl	1d37e <net_byte_to_hex>
   1d580:	4606      	mov	r6, r0
		needcolon = true;
   1d582:	2501      	movs	r5, #1
   1d584:	e7cd      	b.n	1d522 <net_addr_ntop+0x116>
				*ptr++ = (char) (bl - 10 + 'a');
   1d586:	3557      	adds	r5, #87	; 0x57
   1d588:	7035      	strb	r5, [r6, #0]
   1d58a:	3601      	adds	r6, #1
		needcolon = true;
   1d58c:	2501      	movs	r5, #1
   1d58e:	e7c8      	b.n	1d522 <net_addr_ntop+0x116>
	if (!(ptr - dst)) {
   1d590:	9b02      	ldr	r3, [sp, #8]
   1d592:	429e      	cmp	r6, r3
   1d594:	d00f      	beq.n	1d5b6 <net_addr_ntop+0x1aa>
	if (family == AF_INET) {
   1d596:	9b03      	ldr	r3, [sp, #12]
   1d598:	2b02      	cmp	r3, #2
   1d59a:	d005      	beq.n	1d5a8 <net_addr_ntop+0x19c>
		*ptr = '\0';
   1d59c:	2300      	movs	r3, #0
   1d59e:	7033      	strb	r3, [r6, #0]
	return dst;
   1d5a0:	9802      	ldr	r0, [sp, #8]
}
   1d5a2:	b007      	add	sp, #28
   1d5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*(ptr - 1) = '\0';
   1d5a8:	2300      	movs	r3, #0
   1d5aa:	f806 3c01 	strb.w	r3, [r6, #-1]
	return dst;
   1d5ae:	9802      	ldr	r0, [sp, #8]
   1d5b0:	e7f7      	b.n	1d5a2 <net_addr_ntop+0x196>
		return NULL;
   1d5b2:	2000      	movs	r0, #0
   1d5b4:	e7f5      	b.n	1d5a2 <net_addr_ntop+0x196>
		return NULL;
   1d5b6:	2000      	movs	r0, #0
   1d5b8:	e7f3      	b.n	1d5a2 <net_addr_ntop+0x196>

0001d5ba <net_addr_pton>:
{
   1d5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d5be:	b082      	sub	sp, #8
   1d5c0:	460d      	mov	r5, r1
   1d5c2:	4616      	mov	r6, r2
	if (family == AF_INET) {
   1d5c4:	2802      	cmp	r0, #2
   1d5c6:	d010      	beq.n	1d5ea <net_addr_pton+0x30>
	} else if (family == AF_INET6) {
   1d5c8:	280a      	cmp	r0, #10
   1d5ca:	f040 80c6 	bne.w	1d75a <net_addr_pton+0x1a0>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d5ce:	212e      	movs	r1, #46	; 0x2e
   1d5d0:	4628      	mov	r0, r5
   1d5d2:	f00c f93b 	bl	2984c <strchr>
   1d5d6:	b378      	cbz	r0, 1d638 <net_addr_pton+0x7e>
   1d5d8:	2706      	movs	r7, #6
		if (*src == ':') {
   1d5da:	782b      	ldrb	r3, [r5, #0]
   1d5dc:	2b3a      	cmp	r3, #58	; 0x3a
   1d5de:	d02d      	beq.n	1d63c <net_addr_pton+0x82>
		len = strlen(src);
   1d5e0:	4628      	mov	r0, r5
   1d5e2:	f7e3 f88d 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1d5e6:	2300      	movs	r3, #0
   1d5e8:	e02b      	b.n	1d642 <net_addr_pton+0x88>
		len = strlen(src);
   1d5ea:	4608      	mov	r0, r1
   1d5ec:	f7e3 f888 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1d5f0:	2300      	movs	r3, #0
   1d5f2:	e000      	b.n	1d5f6 <net_addr_pton+0x3c>
   1d5f4:	3301      	adds	r3, #1
   1d5f6:	4283      	cmp	r3, r0
   1d5f8:	d20a      	bcs.n	1d610 <net_addr_pton+0x56>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d5fa:	5ce9      	ldrb	r1, [r5, r3]
   1d5fc:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1d600:	b2d2      	uxtb	r2, r2
   1d602:	2a09      	cmp	r2, #9
   1d604:	d9f6      	bls.n	1d5f4 <net_addr_pton+0x3a>
   1d606:	292e      	cmp	r1, #46	; 0x2e
   1d608:	d0f4      	beq.n	1d5f4 <net_addr_pton+0x3a>
				return -EINVAL;
   1d60a:	f06f 0015 	mvn.w	r0, #21
   1d60e:	e0a9      	b.n	1d764 <net_addr_pton+0x1aa>
		memset(addr, 0, sizeof(struct in_addr));
   1d610:	2204      	movs	r2, #4
   1d612:	2100      	movs	r1, #0
   1d614:	4630      	mov	r0, r6
   1d616:	f00c f85f 	bl	296d8 <memset>
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d61a:	2400      	movs	r4, #0
   1d61c:	e008      	b.n	1d630 <net_addr_pton+0x76>
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1d61e:	220a      	movs	r2, #10
   1d620:	a901      	add	r1, sp, #4
   1d622:	4628      	mov	r0, r5
   1d624:	f00c fd72 	bl	2a10c <strtol>
   1d628:	5530      	strb	r0, [r6, r4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d62a:	3401      	adds	r4, #1
			src = ++endptr;
   1d62c:	9d01      	ldr	r5, [sp, #4]
   1d62e:	3501      	adds	r5, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d630:	2c03      	cmp	r4, #3
   1d632:	d9f4      	bls.n	1d61e <net_addr_pton+0x64>
	return 0;
   1d634:	2000      	movs	r0, #0
   1d636:	e095      	b.n	1d764 <net_addr_pton+0x1aa>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d638:	2708      	movs	r7, #8
   1d63a:	e7ce      	b.n	1d5da <net_addr_pton+0x20>
			src++;
   1d63c:	3501      	adds	r5, #1
   1d63e:	e7cf      	b.n	1d5e0 <net_addr_pton+0x26>
		for (i = 0; i < len; i++) {
   1d640:	3301      	adds	r3, #1
   1d642:	4283      	cmp	r3, r0
   1d644:	da16      	bge.n	1d674 <net_addr_pton+0xba>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d646:	5ce9      	ldrb	r1, [r5, r3]
   1d648:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1d64c:	b2d2      	uxtb	r2, r2
   1d64e:	2a09      	cmp	r2, #9
   1d650:	d9f6      	bls.n	1d640 <net_addr_pton+0x86>
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1d652:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   1d656:	b2d2      	uxtb	r2, r2
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d658:	2a05      	cmp	r2, #5
   1d65a:	d9f1      	bls.n	1d640 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1d65c:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   1d660:	b2d2      	uxtb	r2, r2
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1d662:	2a05      	cmp	r2, #5
   1d664:	d9ec      	bls.n	1d640 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1d666:	292e      	cmp	r1, #46	; 0x2e
   1d668:	d0ea      	beq.n	1d640 <net_addr_pton+0x86>
			    src[i] != '.' && src[i] != ':')
   1d66a:	293a      	cmp	r1, #58	; 0x3a
   1d66c:	d0e8      	beq.n	1d640 <net_addr_pton+0x86>
				return -EINVAL;
   1d66e:	f06f 0015 	mvn.w	r0, #21
   1d672:	e077      	b.n	1d764 <net_addr_pton+0x1aa>
   1d674:	2400      	movs	r4, #0
   1d676:	e001      	b.n	1d67c <net_addr_pton+0xc2>
				src++;
   1d678:	3501      	adds	r5, #1
		for (i = 0; i < expected_groups; i++) {
   1d67a:	3401      	adds	r4, #1
   1d67c:	42bc      	cmp	r4, r7
   1d67e:	da3c      	bge.n	1d6fa <net_addr_pton+0x140>
			if (!src || *src == '\0') {
   1d680:	2d00      	cmp	r5, #0
   1d682:	d06d      	beq.n	1d760 <net_addr_pton+0x1a6>
   1d684:	782b      	ldrb	r3, [r5, #0]
   1d686:	2b00      	cmp	r3, #0
   1d688:	d06f      	beq.n	1d76a <net_addr_pton+0x1b0>
			if (*src != ':') {
   1d68a:	2b3a      	cmp	r3, #58	; 0x3a
   1d68c:	d023      	beq.n	1d6d6 <net_addr_pton+0x11c>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1d68e:	2210      	movs	r2, #16
   1d690:	2100      	movs	r1, #0
   1d692:	4628      	mov	r0, r5
   1d694:	f00c fd3a 	bl	2a10c <strtol>
   1d698:	f3c0 2807 	ubfx	r8, r0, #8, #8
   1d69c:	2210      	movs	r2, #16
   1d69e:	2100      	movs	r1, #0
   1d6a0:	4628      	mov	r0, r5
   1d6a2:	f00c fd33 	bl	2a10c <strtol>
   1d6a6:	ea48 2000 	orr.w	r0, r8, r0, lsl #8
   1d6aa:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
				src = strchr(src, ':');
   1d6ae:	213a      	movs	r1, #58	; 0x3a
   1d6b0:	4628      	mov	r0, r5
   1d6b2:	f00c f8cb 	bl	2984c <strchr>
				if (!src && i < expected_groups - 1) {
   1d6b6:	4605      	mov	r5, r0
   1d6b8:	2800      	cmp	r0, #0
   1d6ba:	d1dd      	bne.n	1d678 <net_addr_pton+0xbe>
   1d6bc:	1e7b      	subs	r3, r7, #1
   1d6be:	429c      	cmp	r4, r3
   1d6c0:	dada      	bge.n	1d678 <net_addr_pton+0xbe>
					return -EINVAL;
   1d6c2:	f06f 0015 	mvn.w	r0, #21
   1d6c6:	e04d      	b.n	1d764 <net_addr_pton+0x1aa>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1d6c8:	eb06 0244 	add.w	r2, r6, r4, lsl #1
   1d6cc:	2300      	movs	r3, #0
   1d6ce:	f806 3014 	strb.w	r3, [r6, r4, lsl #1]
   1d6d2:	7053      	strb	r3, [r2, #1]
			for (; i < expected_groups; i++) {
   1d6d4:	3401      	adds	r4, #1
   1d6d6:	42bc      	cmp	r4, r7
   1d6d8:	dbf6      	blt.n	1d6c8 <net_addr_pton+0x10e>
			tmp = strrchr(src, ':');
   1d6da:	213a      	movs	r1, #58	; 0x3a
   1d6dc:	4628      	mov	r0, r5
   1d6de:	f00c fa0b 	bl	29af8 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1d6e2:	4285      	cmp	r5, r0
   1d6e4:	d003      	beq.n	1d6ee <net_addr_pton+0x134>
			if (expected_groups == 6) {
   1d6e6:	2f06      	cmp	r7, #6
   1d6e8:	d00b      	beq.n	1d702 <net_addr_pton+0x148>
			i = expected_groups - 1;
   1d6ea:	1e7c      	subs	r4, r7, #1
   1d6ec:	e00f      	b.n	1d70e <net_addr_pton+0x154>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1d6ee:	2f06      	cmp	r7, #6
   1d6f0:	d002      	beq.n	1d6f8 <net_addr_pton+0x13e>
   1d6f2:	786b      	ldrb	r3, [r5, #1]
   1d6f4:	2b00      	cmp	r3, #0
   1d6f6:	d1f6      	bne.n	1d6e6 <net_addr_pton+0x12c>
				src++;
   1d6f8:	3501      	adds	r5, #1
		if (expected_groups == 6) {
   1d6fa:	2f06      	cmp	r7, #6
   1d6fc:	d029      	beq.n	1d752 <net_addr_pton+0x198>
	return 0;
   1d6fe:	2000      	movs	r0, #0
   1d700:	e030      	b.n	1d764 <net_addr_pton+0x1aa>
				tmp--;
   1d702:	3801      	subs	r0, #1
   1d704:	e7f1      	b.n	1d6ea <net_addr_pton+0x130>
			} while (tmp-- != src);
   1d706:	1e43      	subs	r3, r0, #1
   1d708:	4285      	cmp	r5, r0
   1d70a:	d005      	beq.n	1d718 <net_addr_pton+0x15e>
   1d70c:	4618      	mov	r0, r3
				if (*tmp == ':') {
   1d70e:	7803      	ldrb	r3, [r0, #0]
   1d710:	2b3a      	cmp	r3, #58	; 0x3a
   1d712:	d1f8      	bne.n	1d706 <net_addr_pton+0x14c>
					i--;
   1d714:	3c01      	subs	r4, #1
   1d716:	e7f6      	b.n	1d706 <net_addr_pton+0x14c>
			src++;
   1d718:	3501      	adds	r5, #1
   1d71a:	e7ae      	b.n	1d67a <net_addr_pton+0xc0>
				src++;
   1d71c:	3501      	adds	r5, #1
			for (i = 0; i < 4; i++) {
   1d71e:	3401      	adds	r4, #1
   1d720:	2c03      	cmp	r4, #3
   1d722:	dc18      	bgt.n	1d756 <net_addr_pton+0x19c>
				if (!src || !*src) {
   1d724:	b325      	cbz	r5, 1d770 <net_addr_pton+0x1b6>
   1d726:	782b      	ldrb	r3, [r5, #0]
   1d728:	b32b      	cbz	r3, 1d776 <net_addr_pton+0x1bc>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1d72a:	f104 070c 	add.w	r7, r4, #12
   1d72e:	220a      	movs	r2, #10
   1d730:	2100      	movs	r1, #0
   1d732:	4628      	mov	r0, r5
   1d734:	f00c fcea 	bl	2a10c <strtol>
   1d738:	55f0      	strb	r0, [r6, r7]
				src = strchr(src, '.');
   1d73a:	212e      	movs	r1, #46	; 0x2e
   1d73c:	4628      	mov	r0, r5
   1d73e:	f00c f885 	bl	2984c <strchr>
				if (!src && i < 3) {
   1d742:	4605      	mov	r5, r0
   1d744:	2800      	cmp	r0, #0
   1d746:	d1e9      	bne.n	1d71c <net_addr_pton+0x162>
   1d748:	2c02      	cmp	r4, #2
   1d74a:	dce7      	bgt.n	1d71c <net_addr_pton+0x162>
					return -EINVAL;
   1d74c:	f06f 0015 	mvn.w	r0, #21
   1d750:	e008      	b.n	1d764 <net_addr_pton+0x1aa>
   1d752:	2400      	movs	r4, #0
   1d754:	e7e4      	b.n	1d720 <net_addr_pton+0x166>
	return 0;
   1d756:	2000      	movs	r0, #0
   1d758:	e004      	b.n	1d764 <net_addr_pton+0x1aa>
		return -EINVAL;
   1d75a:	f06f 0015 	mvn.w	r0, #21
   1d75e:	e001      	b.n	1d764 <net_addr_pton+0x1aa>
				return -EINVAL;
   1d760:	f06f 0015 	mvn.w	r0, #21
}
   1d764:	b002      	add	sp, #8
   1d766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return -EINVAL;
   1d76a:	f06f 0015 	mvn.w	r0, #21
   1d76e:	e7f9      	b.n	1d764 <net_addr_pton+0x1aa>
					return -EINVAL;
   1d770:	f06f 0015 	mvn.w	r0, #21
   1d774:	e7f6      	b.n	1d764 <net_addr_pton+0x1aa>
   1d776:	f06f 0015 	mvn.w	r0, #21
   1d77a:	e7f3      	b.n	1d764 <net_addr_pton+0x1aa>

0001d77c <parse_ipv6>:
#endif /* CONFIG_NET_IPV6 || CONFIG_NET_IPV4 */

#if defined(CONFIG_NET_IPV6)
static bool parse_ipv6(const char *str, size_t str_len,
		       struct sockaddr *addr, bool has_port)
{
   1d77c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d780:	b08f      	sub	sp, #60	; 0x3c
   1d782:	4605      	mov	r5, r0
   1d784:	4688      	mov	r8, r1
   1d786:	4617      	mov	r7, r2
   1d788:	461e      	mov	r6, r3
	struct in6_addr *addr6;
	char ipaddr[INET6_ADDRSTRLEN + 1];
	int end, len, ret, i;
	u16_t port;

	len = min(INET6_ADDRSTRLEN, str_len);
   1d78a:	460c      	mov	r4, r1
   1d78c:	292e      	cmp	r1, #46	; 0x2e
   1d78e:	bf28      	it	cs
   1d790:	242e      	movcs	r4, #46	; 0x2e

	for (i = 0; i < len; i++) {
   1d792:	2300      	movs	r3, #0
   1d794:	42a3      	cmp	r3, r4
   1d796:	da04      	bge.n	1d7a2 <parse_ipv6+0x26>
		if (!str[i]) {
   1d798:	5cea      	ldrb	r2, [r5, r3]
   1d79a:	b10a      	cbz	r2, 1d7a0 <parse_ipv6+0x24>
	for (i = 0; i < len; i++) {
   1d79c:	3301      	adds	r3, #1
   1d79e:	e7f9      	b.n	1d794 <parse_ipv6+0x18>
			len = i;
   1d7a0:	461c      	mov	r4, r3
			break;
		}
	}

	if (has_port) {
   1d7a2:	b18e      	cbz	r6, 1d7c8 <parse_ipv6+0x4c>
		/* IPv6 address with port number */
		ptr = memchr(str, ']', len);
   1d7a4:	4622      	mov	r2, r4
   1d7a6:	215d      	movs	r1, #93	; 0x5d
   1d7a8:	4628      	mov	r0, r5
   1d7aa:	f7e2 fd39 	bl	220 <memchr>
		if (!ptr) {
   1d7ae:	4681      	mov	r9, r0
   1d7b0:	2800      	cmp	r0, #0
   1d7b2:	d043      	beq.n	1d83c <parse_ipv6+0xc0>
			return false;
		}

		end = min(len, ptr - (str + 1));
   1d7b4:	1c69      	adds	r1, r5, #1
   1d7b6:	1a43      	subs	r3, r0, r1
   1d7b8:	429c      	cmp	r4, r3
   1d7ba:	bfa8      	it	ge
   1d7bc:	461c      	movge	r4, r3
		memcpy(ipaddr, str + 1, end);
   1d7be:	4622      	mov	r2, r4
   1d7c0:	a802      	add	r0, sp, #8
   1d7c2:	f7e2 fd7d 	bl	2c0 <memcpy>
   1d7c6:	e006      	b.n	1d7d6 <parse_ipv6+0x5a>
	} else {
		end = len;
		memcpy(ipaddr, str, end);
   1d7c8:	4622      	mov	r2, r4
   1d7ca:	4629      	mov	r1, r5
   1d7cc:	a802      	add	r0, sp, #8
   1d7ce:	f7e2 fd77 	bl	2c0 <memcpy>
	char *ptr = NULL;
   1d7d2:	f04f 0900 	mov.w	r9, #0
	}

	ipaddr[end] = '\0';
   1d7d6:	2200      	movs	r2, #0
   1d7d8:	ab0e      	add	r3, sp, #56	; 0x38
   1d7da:	4423      	add	r3, r4
   1d7dc:	f803 2c30 	strb.w	r2, [r3, #-48]

	addr6 = &net_sin6(addr)->sin6_addr;

	ret = net_addr_pton(AF_INET6, ipaddr, addr6);
   1d7e0:	1d3a      	adds	r2, r7, #4
   1d7e2:	a902      	add	r1, sp, #8
   1d7e4:	200a      	movs	r0, #10
   1d7e6:	f7ff fee8 	bl	1d5ba <net_addr_pton>
	if (ret < 0) {
   1d7ea:	2800      	cmp	r0, #0
   1d7ec:	db28      	blt.n	1d840 <parse_ipv6+0xc4>
		return false;
	}

	net_sin6(addr)->sin6_family = AF_INET6;
   1d7ee:	230a      	movs	r3, #10
   1d7f0:	803b      	strh	r3, [r7, #0]

	if (!has_port) {
   1d7f2:	b33e      	cbz	r6, 1d844 <parse_ipv6+0xc8>
		return true;
	}

	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
   1d7f4:	f109 0301 	add.w	r3, r9, #1
   1d7f8:	4445      	add	r5, r8
   1d7fa:	42ab      	cmp	r3, r5
   1d7fc:	d223      	bcs.n	1d846 <parse_ipv6+0xca>
   1d7fe:	f899 3001 	ldrb.w	r3, [r9, #1]
   1d802:	2b3a      	cmp	r3, #58	; 0x3a
   1d804:	d11f      	bne.n	1d846 <parse_ipv6+0xca>
		len = str_len - end;
   1d806:	eba8 0404 	sub.w	r4, r8, r4

		/* Re-use the ipaddr buf for port conversion */
		memcpy(ipaddr, ptr + 2, len);
   1d80a:	4622      	mov	r2, r4
   1d80c:	f109 0102 	add.w	r1, r9, #2
   1d810:	a802      	add	r0, sp, #8
   1d812:	f7e2 fd55 	bl	2c0 <memcpy>
		ipaddr[len] = '\0';
   1d816:	ab0e      	add	r3, sp, #56	; 0x38
   1d818:	441c      	add	r4, r3
   1d81a:	2300      	movs	r3, #0
   1d81c:	f804 3c30 	strb.w	r3, [r4, #-48]

		ret = convert_port(ipaddr, &port);
   1d820:	f10d 0106 	add.w	r1, sp, #6
   1d824:	a802      	add	r0, sp, #8
   1d826:	f7ff fd8a 	bl	1d33e <convert_port>
		if (!ret) {
   1d82a:	4606      	mov	r6, r0
   1d82c:	b158      	cbz	r0, 1d846 <parse_ipv6+0xca>
			return false;
		}

		net_sin6(addr)->sin6_port = htons(port);
   1d82e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d832:	0a13      	lsrs	r3, r2, #8
   1d834:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d838:	807b      	strh	r3, [r7, #2]
   1d83a:	e004      	b.n	1d846 <parse_ipv6+0xca>
			return false;
   1d83c:	2600      	movs	r6, #0
   1d83e:	e002      	b.n	1d846 <parse_ipv6+0xca>
		return false;
   1d840:	2600      	movs	r6, #0
   1d842:	e000      	b.n	1d846 <parse_ipv6+0xca>
		return true;
   1d844:	2601      	movs	r6, #1
			net_addr_ntop(AF_INET6, addr6,
				      ipaddr, sizeof(ipaddr) - 1));
	}

	return true;
}
   1d846:	4630      	mov	r0, r6
   1d848:	b00f      	add	sp, #60	; 0x3c
   1d84a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001d84e <net_calc_chksum>:
	return pkt->family;
   1d84e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1d852:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1d856:	2b0a      	cmp	r3, #10
   1d858:	d001      	beq.n	1d85e <net_calc_chksum+0x10>
		return 0;
   1d85a:	2000      	movs	r0, #0
   1d85c:	4770      	bx	lr
{
   1d85e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d860:	b085      	sub	sp, #20
   1d862:	4604      	mov	r4, r0
	return pkt->frags->data;
   1d864:	6885      	ldr	r5, [r0, #8]
   1d866:	68a8      	ldr	r0, [r5, #8]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1d868:	7902      	ldrb	r2, [r0, #4]
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1d86a:	7943      	ldrb	r3, [r0, #5]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1d86c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1d870:	b29b      	uxth	r3, r3
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1d872:	f894 703b 	ldrb.w	r7, [r4, #59]	; 0x3b
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1d876:	1bdb      	subs	r3, r3, r7
		sum = calc_chksum(upper_layer_len + proto,
   1d878:	fa11 f383 	uxtah	r3, r1, r3
   1d87c:	2220      	movs	r2, #32
   1d87e:	f100 0108 	add.w	r1, r0, #8
   1d882:	b298      	uxth	r0, r3
   1d884:	f7ff fd3c 	bl	1d300 <calc_chksum>
   1d888:	4606      	mov	r6, r0
	u16_t proto_len = net_pkt_ip_hdr_len(pkt) +
   1d88a:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
	return net_frag_read(frag, offset, pos, len, NULL);
   1d88e:	2300      	movs	r3, #0
   1d890:	9300      	str	r3, [sp, #0]
   1d892:	f10d 020e 	add.w	r2, sp, #14
   1d896:	4439      	add	r1, r7
   1d898:	4628      	mov	r0, r5
   1d89a:	f7ff faec 	bl	1ce76 <net_frag_read>
	if (!frag) {
   1d89e:	4605      	mov	r5, r0
   1d8a0:	b318      	cbz	r0, 1d8ea <net_calc_chksum+0x9c>
	ptr = frag->data + offset;
   1d8a2:	6881      	ldr	r1, [r0, #8]
   1d8a4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1d8a8:	4419      	add	r1, r3
	len = frag->len - offset;
   1d8aa:	8984      	ldrh	r4, [r0, #12]
   1d8ac:	1ae4      	subs	r4, r4, r3
   1d8ae:	b224      	sxth	r4, r4
   1d8b0:	e003      	b.n	1d8ba <net_calc_chksum+0x6c>
			len = frag->len - 1;
   1d8b2:	89ac      	ldrh	r4, [r5, #12]
   1d8b4:	3c01      	subs	r4, #1
   1d8b6:	b224      	sxth	r4, r4
			ptr++;
   1d8b8:	3101      	adds	r1, #1
	while (frag) {
   1d8ba:	b1bd      	cbz	r5, 1d8ec <net_calc_chksum+0x9e>
		sum = calc_chksum(sum, ptr, len);
   1d8bc:	b2a4      	uxth	r4, r4
   1d8be:	4622      	mov	r2, r4
   1d8c0:	4630      	mov	r0, r6
   1d8c2:	f7ff fd1d 	bl	1d300 <calc_chksum>
   1d8c6:	4606      	mov	r6, r0
		frag = frag->frags;
   1d8c8:	682d      	ldr	r5, [r5, #0]
		if (!frag) {
   1d8ca:	b17d      	cbz	r5, 1d8ec <net_calc_chksum+0x9e>
		ptr = frag->data;
   1d8cc:	68a9      	ldr	r1, [r5, #8]
		if (len % 2) {
   1d8ce:	f014 0f01 	tst.w	r4, #1
   1d8d2:	d007      	beq.n	1d8e4 <net_calc_chksum+0x96>
			u16_t tmp = *ptr;
   1d8d4:	780b      	ldrb	r3, [r1, #0]
			sum += tmp;
   1d8d6:	441e      	add	r6, r3
   1d8d8:	b2b6      	uxth	r6, r6
			if (sum < tmp) {
   1d8da:	42b3      	cmp	r3, r6
   1d8dc:	d9e9      	bls.n	1d8b2 <net_calc_chksum+0x64>
				sum++;
   1d8de:	3601      	adds	r6, #1
   1d8e0:	b2b6      	uxth	r6, r6
   1d8e2:	e7e6      	b.n	1d8b2 <net_calc_chksum+0x64>
			len = frag->len;
   1d8e4:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
   1d8e8:	e7e7      	b.n	1d8ba <net_calc_chksum+0x6c>
		return 0;
   1d8ea:	2600      	movs	r6, #0
	sum = (sum == 0) ? 0xffff : htons(sum);
   1d8ec:	b91e      	cbnz	r6, 1d8f6 <net_calc_chksum+0xa8>
   1d8ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   1d8f2:	b005      	add	sp, #20
   1d8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sum = (sum == 0) ? 0xffff : htons(sum);
   1d8f6:	0a30      	lsrs	r0, r6, #8
   1d8f8:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   1d8fc:	b280      	uxth	r0, r0
   1d8fe:	e7f8      	b.n	1d8f2 <net_calc_chksum+0xa4>

0001d900 <net_header_fits>:
	if (hdr && hdr > pkt->frags->data &&
   1d900:	460b      	mov	r3, r1
   1d902:	b151      	cbz	r1, 1d91a <net_header_fits+0x1a>
   1d904:	6880      	ldr	r0, [r0, #8]
   1d906:	6881      	ldr	r1, [r0, #8]
   1d908:	428b      	cmp	r3, r1
   1d90a:	d908      	bls.n	1d91e <net_header_fits+0x1e>
	    (hdr + hdr_size) <= (pkt->frags->data + pkt->frags->len)) {
   1d90c:	4413      	add	r3, r2
   1d90e:	8982      	ldrh	r2, [r0, #12]
   1d910:	4411      	add	r1, r2
	if (hdr && hdr > pkt->frags->data &&
   1d912:	428b      	cmp	r3, r1
   1d914:	d905      	bls.n	1d922 <net_header_fits+0x22>
	return false;
   1d916:	2000      	movs	r0, #0
   1d918:	4770      	bx	lr
   1d91a:	2000      	movs	r0, #0
   1d91c:	4770      	bx	lr
   1d91e:	2000      	movs	r0, #0
   1d920:	4770      	bx	lr
		return true;
   1d922:	2001      	movs	r0, #1
}
   1d924:	4770      	bx	lr

0001d926 <net_ipaddr_parse>:

bool net_ipaddr_parse(const char *str, size_t str_len, struct sockaddr *addr)
{
	int i, count;

	if (!str || str_len == 0) {
   1d926:	b1d8      	cbz	r0, 1d960 <net_ipaddr_parse+0x3a>
{
   1d928:	b538      	push	{r3, r4, r5, lr}
	if (!str || str_len == 0) {
   1d92a:	b1d9      	cbz	r1, 1d964 <net_ipaddr_parse+0x3e>
		return false;
	}

	/* We cannot accept empty string here */
	if (*str == '\0') {
   1d92c:	7804      	ldrb	r4, [r0, #0]
   1d92e:	b1dc      	cbz	r4, 1d968 <net_ipaddr_parse+0x42>
		return false;
	}

	if (*str == '[') {
   1d930:	2c5b      	cmp	r4, #91	; 0x5b
   1d932:	d002      	beq.n	1d93a <net_ipaddr_parse+0x14>
   1d934:	2500      	movs	r5, #0
   1d936:	462b      	mov	r3, r5
   1d938:	e004      	b.n	1d944 <net_ipaddr_parse+0x1e>
#if defined(CONFIG_NET_IPV6)
		return parse_ipv6(str, str_len, addr, true);
   1d93a:	2301      	movs	r3, #1
   1d93c:	f7ff ff1e 	bl	1d77c <parse_ipv6>
   1d940:	bd38      	pop	{r3, r4, r5, pc}
#else
		return false;
#endif /* CONFIG_NET_IPV6 */
	}

	for (count = i = 0; str[i] && i < str_len; i++) {
   1d942:	3301      	adds	r3, #1
   1d944:	5cc4      	ldrb	r4, [r0, r3]
   1d946:	b12c      	cbz	r4, 1d954 <net_ipaddr_parse+0x2e>
   1d948:	4299      	cmp	r1, r3
   1d94a:	d903      	bls.n	1d954 <net_ipaddr_parse+0x2e>
		if (str[i] == ':') {
   1d94c:	2c3a      	cmp	r4, #58	; 0x3a
   1d94e:	d1f8      	bne.n	1d942 <net_ipaddr_parse+0x1c>
			count++;
   1d950:	3501      	adds	r5, #1
   1d952:	e7f6      	b.n	1d942 <net_ipaddr_parse+0x1c>
		}
	}

	if (count == 1) {
   1d954:	2d01      	cmp	r5, #1
   1d956:	d009      	beq.n	1d96c <net_ipaddr_parse+0x46>
#if defined(CONFIG_NET_IPV4) && !defined(CONFIG_NET_IPV6)
	return parse_ipv4(str, str_len, addr, false);
#endif

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	return parse_ipv6(str, str_len, addr, false);
   1d958:	2300      	movs	r3, #0
   1d95a:	f7ff ff0f 	bl	1d77c <parse_ipv6>
   1d95e:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1d960:	2000      	movs	r0, #0
   1d962:	4770      	bx	lr
   1d964:	2000      	movs	r0, #0
   1d966:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1d968:	2000      	movs	r0, #0
   1d96a:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1d96c:	2000      	movs	r0, #0
#endif
}
   1d96e:	bd38      	pop	{r3, r4, r5, pc}

0001d970 <net_bt_reserve>:
{
	ARG_UNUSED(iface);
	ARG_UNUSED(unused);

	return 0;
}
   1d970:	2000      	movs	r0, #0
   1d972:	4770      	bx	lr

0001d974 <net_bt_enable>:
	return iface->dev;
   1d974:	6803      	ldr	r3, [r0, #0]

static int net_bt_enable(struct net_if *iface, bool state)
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1d976:	689b      	ldr	r3, [r3, #8]

	NET_DBG("iface %p %s", iface, state ? "up" : "down");

	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   1d978:	b129      	cbz	r1, 1d986 <net_bt_enable+0x12>
   1d97a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1d97e:	2b03      	cmp	r3, #3
   1d980:	d103      	bne.n	1d98a <net_bt_enable+0x16>
		return -ENETDOWN;
	}

	return 0;
   1d982:	2000      	movs	r0, #0
   1d984:	4770      	bx	lr
   1d986:	2000      	movs	r0, #0
   1d988:	4770      	bx	lr
		return -ENETDOWN;
   1d98a:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1d98e:	4770      	bx	lr

0001d990 <ipsp_accept>:

static int ipsp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
	NET_DBG("Incoming conn %p", conn);

	if (bt_context_data.ipsp_chan.chan.conn) {
   1d990:	4b04      	ldr	r3, [pc, #16]	; (1d9a4 <ipsp_accept+0x14>)
   1d992:	685b      	ldr	r3, [r3, #4]
   1d994:	b91b      	cbnz	r3, 1d99e <ipsp_accept+0xe>
		NET_ERR("No channels available");
		return -ENOMEM;
	}

	*chan = &bt_context_data.ipsp_chan.chan;
   1d996:	4b04      	ldr	r3, [pc, #16]	; (1d9a8 <ipsp_accept+0x18>)
   1d998:	600b      	str	r3, [r1, #0]

	return 0;
   1d99a:	2000      	movs	r0, #0
   1d99c:	4770      	bx	lr
		return -ENOMEM;
   1d99e:	f06f 000b 	mvn.w	r0, #11
}
   1d9a2:	4770      	bx	lr
   1d9a4:	2000bc30 	.word	0x2000bc30
   1d9a8:	2000bc34 	.word	0x2000bc34

0001d9ac <net_bt_send>:
{
   1d9ac:	b538      	push	{r3, r4, r5, lr}
   1d9ae:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1d9b0:	689d      	ldr	r5, [r3, #8]
	return pkt->family;
   1d9b2:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1d9b6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) != AF_INET6) {
   1d9ba:	2b0a      	cmp	r3, #10
   1d9bc:	d001      	beq.n	1d9c2 <net_bt_send+0x16>
		return NET_DROP;
   1d9be:	2002      	movs	r0, #2
   1d9c0:	bd38      	pop	{r3, r4, r5, pc}
   1d9c2:	460c      	mov	r4, r1
	if (!net_6lo_compress(pkt, true, NULL)) {
   1d9c4:	2200      	movs	r2, #0
   1d9c6:	2101      	movs	r1, #1
   1d9c8:	4620      	mov	r0, r4
   1d9ca:	f003 fe95 	bl	216f8 <net_6lo_compress>
   1d9ce:	b908      	cbnz	r0, 1d9d4 <net_bt_send+0x28>
		return NET_DROP;
   1d9d0:	2002      	movs	r0, #2
}
   1d9d2:	bd38      	pop	{r3, r4, r5, pc}
	net_if_queue_tx(ctxt->iface, pkt);
   1d9d4:	6828      	ldr	r0, [r5, #0]
	k_fifo_put(&iface->tx_queue, pkt);
   1d9d6:	4621      	mov	r1, r4
   1d9d8:	3018      	adds	r0, #24
   1d9da:	f00a fb13 	bl	28004 <k_queue_append>
	return NET_OK;
   1d9de:	2000      	movs	r0, #0
   1d9e0:	bd38      	pop	{r3, r4, r5, pc}

0001d9e2 <net_bt_recv>:
{
   1d9e2:	b508      	push	{r3, lr}
	if (!net_6lo_uncompress(pkt)) {
   1d9e4:	4608      	mov	r0, r1
   1d9e6:	f004 fad4 	bl	21f92 <net_6lo_uncompress>
   1d9ea:	b908      	cbnz	r0, 1d9f0 <net_bt_recv+0xe>
		return NET_DROP;
   1d9ec:	2002      	movs	r0, #2
   1d9ee:	bd08      	pop	{r3, pc}
	return NET_CONTINUE;
   1d9f0:	2001      	movs	r0, #1
}
   1d9f2:	bd08      	pop	{r3, pc}

0001d9f4 <connected>:
	return bt_l2cap_chan_disconnect(&ctxt->ipsp_chan.chan);
}

static void connected(struct bt_conn *conn, u8_t err)
{
	if (err) {
   1d9f4:	b951      	cbnz	r1, 1da0c <connected+0x18>
{
   1d9f6:	b508      	push	{r3, lr}
		NET_ERR("Failed to connect to %s (%u)\n", addr, err);
#endif
		return;
	}

	if (conn != default_conn) {
   1d9f8:	4b05      	ldr	r3, [pc, #20]	; (1da10 <connected+0x1c>)
   1d9fa:	681b      	ldr	r3, [r3, #0]
   1d9fc:	4283      	cmp	r3, r0
   1d9fe:	d000      	beq.n	1da02 <connected+0xe>
   1da00:	bd08      	pop	{r3, pc}
		return;
	}

	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
   1da02:	2223      	movs	r2, #35	; 0x23
   1da04:	4903      	ldr	r1, [pc, #12]	; (1da14 <connected+0x20>)
   1da06:	f7ea f907 	bl	7c18 <bt_l2cap_chan_connect>
   1da0a:	e7f9      	b.n	1da00 <connected+0xc>
   1da0c:	4770      	bx	lr
   1da0e:	bf00      	nop
   1da10:	20001d78 	.word	0x20001d78
   1da14:	2000bc34 	.word	0x2000bc34

0001da18 <ipsp_recv>:
{
   1da18:	b570      	push	{r4, r5, r6, lr}
   1da1a:	4605      	mov	r5, r0
   1da1c:	460e      	mov	r6, r1
	pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1da1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1da22:	2000      	movs	r0, #0
   1da24:	f7ff f82e 	bl	1ca84 <net_pkt_get_reserve_rx>
   1da28:	4604      	mov	r4, r0
	net_pkt_ll_dst(pkt)->addr = ctxt->src.val;
   1da2a:	f105 039c 	add.w	r3, r5, #156	; 0x9c
   1da2e:	6283      	str	r3, [r0, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = sizeof(ctxt->src);
   1da30:	2206      	movs	r2, #6
   1da32:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   1da36:	2302      	movs	r3, #2
   1da38:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	net_pkt_ll_src(pkt)->addr = ctxt->dst.val;
   1da3c:	f105 01a2 	add.w	r1, r5, #162	; 0xa2
   1da40:	6201      	str	r1, [r0, #32]
	net_pkt_ll_src(pkt)->len = sizeof(ctxt->dst);
   1da42:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
	net_pkt_ll_src(pkt)->type = NET_LINK_BLUETOOTH;
   1da46:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	net_pkt_frag_add(pkt, net_buf_ref(buf));
   1da4a:	4630      	mov	r0, r6
   1da4c:	f7fc fb42 	bl	1a0d4 <net_buf_ref>
   1da50:	4601      	mov	r1, r0
   1da52:	4620      	mov	r0, r4
   1da54:	f7ff f8bb 	bl	1cbce <net_pkt_frag_add>
	if (net_recv_data(ctxt->iface, pkt) < 0) {
   1da58:	4621      	mov	r1, r4
   1da5a:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1da5e:	f7fc fd55 	bl	1a50c <net_recv_data>
   1da62:	2800      	cmp	r0, #0
   1da64:	db00      	blt.n	1da68 <ipsp_recv+0x50>
   1da66:	bd70      	pop	{r4, r5, r6, pc}
		net_pkt_unref(pkt);
   1da68:	4620      	mov	r0, r4
   1da6a:	f7ff f886 	bl	1cb7a <net_pkt_unref>
}
   1da6e:	e7fa      	b.n	1da66 <ipsp_recv+0x4e>

0001da70 <ipsp_alloc_buf>:
{
   1da70:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_rx_data(0, K_FOREVER);
   1da72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1da76:	2000      	movs	r0, #0
   1da78:	f7ff f818 	bl	1caac <net_pkt_get_reserve_rx_data>
}
   1da7c:	bd08      	pop	{r3, pc}
	...

0001da80 <ipsp_disconnected>:
{
   1da80:	b510      	push	{r4, lr}
   1da82:	4604      	mov	r4, r0
	net_if_down(ctxt->iface);
   1da84:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1da88:	f7fd fe92 	bl	1b7b0 <net_if_down>
	if (chan->conn != default_conn) {
   1da8c:	6823      	ldr	r3, [r4, #0]
   1da8e:	4a05      	ldr	r2, [pc, #20]	; (1daa4 <ipsp_disconnected+0x24>)
   1da90:	6810      	ldr	r0, [r2, #0]
   1da92:	4283      	cmp	r3, r0
   1da94:	d000      	beq.n	1da98 <ipsp_disconnected+0x18>
   1da96:	bd10      	pop	{r4, pc}
	bt_conn_unref(default_conn);
   1da98:	f7e8 fe2a 	bl	66f0 <bt_conn_unref>
	default_conn = NULL;
   1da9c:	2200      	movs	r2, #0
   1da9e:	4b01      	ldr	r3, [pc, #4]	; (1daa4 <ipsp_disconnected+0x24>)
   1daa0:	601a      	str	r2, [r3, #0]
   1daa2:	e7f8      	b.n	1da96 <ipsp_disconnected+0x16>
   1daa4:	20001d78 	.word	0x20001d78

0001daa8 <disconnected>:
			      L2CAP_IPSP_PSM);
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
   1daa8:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_L2_BT)
	char addr[BT_ADDR_LE_STR_LEN];
#endif

	if (conn != default_conn) {
   1daaa:	4b06      	ldr	r3, [pc, #24]	; (1dac4 <disconnected+0x1c>)
   1daac:	681b      	ldr	r3, [r3, #0]
   1daae:	4283      	cmp	r3, r0
   1dab0:	d000      	beq.n	1dab4 <disconnected+0xc>
   1dab2:	bd08      	pop	{r3, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

	NET_DBG("Disconnected: %s (reason %u)\n", addr, reason);
#endif

	bt_conn_unref(default_conn);
   1dab4:	4618      	mov	r0, r3
   1dab6:	f7e8 fe1b 	bl	66f0 <bt_conn_unref>
	default_conn = NULL;
   1daba:	2200      	movs	r2, #0
   1dabc:	4b01      	ldr	r3, [pc, #4]	; (1dac4 <disconnected+0x1c>)
   1dabe:	601a      	str	r2, [r3, #0]
   1dac0:	e7f7      	b.n	1dab2 <disconnected+0xa>
   1dac2:	bf00      	nop
   1dac4:	20001d78 	.word	0x20001d78

0001dac8 <ipsp_connected>:
{
   1dac8:	b570      	push	{r4, r5, r6, lr}
   1daca:	b08e      	sub	sp, #56	; 0x38
   1dacc:	4604      	mov	r4, r0
	if (bt_conn_get_info(chan->conn, &info) < 0) {
   1dace:	a909      	add	r1, sp, #36	; 0x24
   1dad0:	6800      	ldr	r0, [r0, #0]
   1dad2:	f7e8 ff43 	bl	695c <bt_conn_get_info>
   1dad6:	2800      	cmp	r0, #0
   1dad8:	db06      	blt.n	1dae8 <ipsp_connected+0x20>
	sys_memcpy_swap(ctxt->src.val, info.le.src->a.val, sizeof(ctxt->src));
   1dada:	f104 069c 	add.w	r6, r4, #156	; 0x9c
   1dade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	src += length - 1;
   1dae0:	3306      	adds	r3, #6
   1dae2:	4631      	mov	r1, r6
   1dae4:	2206      	movs	r2, #6
   1dae6:	e008      	b.n	1dafa <ipsp_connected+0x32>
		bt_l2cap_chan_disconnect(chan);
   1dae8:	4620      	mov	r0, r4
   1daea:	f7ea f8b4 	bl	7c56 <bt_l2cap_chan_disconnect>
   1daee:	e05a      	b.n	1dba6 <ipsp_connected+0xde>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1daf0:	7818      	ldrb	r0, [r3, #0]
   1daf2:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   1daf4:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1daf6:	3b01      	subs	r3, #1
   1daf8:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   1dafa:	2a00      	cmp	r2, #0
   1dafc:	d1f8      	bne.n	1daf0 <ipsp_connected+0x28>
	sys_memcpy_swap(ctxt->dst.val, info.le.dst->a.val, sizeof(ctxt->dst));
   1dafe:	f104 01a2 	add.w	r1, r4, #162	; 0xa2
   1db02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	src += length - 1;
   1db04:	3306      	adds	r3, #6
   1db06:	4608      	mov	r0, r1
   1db08:	2206      	movs	r2, #6
   1db0a:	e004      	b.n	1db16 <ipsp_connected+0x4e>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1db0c:	781d      	ldrb	r5, [r3, #0]
   1db0e:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
   1db10:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1db12:	3b01      	subs	r3, #1
   1db14:	3001      	adds	r0, #1
	for (; length > 0; length--) {
   1db16:	2a00      	cmp	r2, #0
   1db18:	d1f8      	bne.n	1db0c <ipsp_connected+0x44>
	net_if_set_link_addr(ctxt->iface, ctxt->src.val, sizeof(ctxt->src.val),
   1db1a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1db1e:	f3bf 8f5b 	dmb	ish
   1db22:	68da      	ldr	r2, [r3, #12]
   1db24:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1db28:	f012 0f01 	tst.w	r2, #1
   1db2c:	d104      	bne.n	1db38 <ipsp_connected+0x70>
	iface->link_addr.addr = addr;
   1db2e:	611e      	str	r6, [r3, #16]
	iface->link_addr.len = len;
   1db30:	2206      	movs	r2, #6
   1db32:	751a      	strb	r2, [r3, #20]
	iface->link_addr.type = type;
   1db34:	2202      	movs	r2, #2
   1db36:	755a      	strb	r2, [r3, #21]
	ll.addr = ctxt->dst.val;
   1db38:	9107      	str	r1, [sp, #28]
	ll.len = sizeof(ctxt->dst.val);
   1db3a:	2306      	movs	r3, #6
   1db3c:	f88d 3020 	strb.w	r3, [sp, #32]
	ll.type = NET_LINK_BLUETOOTH;
   1db40:	2302      	movs	r3, #2
   1db42:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	addr->s6_addr[0] = 0xfe;
   1db46:	23fe      	movs	r3, #254	; 0xfe
   1db48:	f88d 300c 	strb.w	r3, [sp, #12]
	addr->s6_addr[1] = 0x80;
   1db4c:	2380      	movs	r3, #128	; 0x80
   1db4e:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1db52:	2300      	movs	r3, #0
   1db54:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1db58:	9304      	str	r3, [sp, #16]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1db5a:	2203      	movs	r2, #3
   1db5c:	a805      	add	r0, sp, #20
   1db5e:	f7e2 fbaf 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1db62:	23ff      	movs	r3, #255	; 0xff
   1db64:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   1db68:	23fe      	movs	r3, #254	; 0xfe
   1db6a:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1db6e:	2203      	movs	r2, #3
   1db70:	9907      	ldr	r1, [sp, #28]
   1db72:	4411      	add	r1, r2
   1db74:	f10d 0019 	add.w	r0, sp, #25
   1db78:	f7e2 fba2 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1db7c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1db80:	2b02      	cmp	r3, #2
   1db82:	d012      	beq.n	1dbaa <ipsp_connected+0xe2>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1db84:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1db88:	2b03      	cmp	r3, #3
   1db8a:	d015      	beq.n	1dbb8 <ipsp_connected+0xf0>
	net_ipv6_nbr_add(ctxt->iface, &in6, &ll, false,
   1db8c:	2305      	movs	r3, #5
   1db8e:	9300      	str	r3, [sp, #0]
   1db90:	2300      	movs	r3, #0
   1db92:	aa07      	add	r2, sp, #28
   1db94:	a903      	add	r1, sp, #12
   1db96:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1db9a:	f002 f903 	bl	1fda4 <net_ipv6_nbr_add>
	net_if_up(ctxt->iface);
   1db9e:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1dba2:	f7fd fdd1 	bl	1b748 <net_if_up>
}
   1dba6:	b00e      	add	sp, #56	; 0x38
   1dba8:	bd70      	pop	{r4, r5, r6, pc}
			addr->s6_addr[8] ^= 0x02;
   1dbaa:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1dbae:	f083 0302 	eor.w	r3, r3, #2
   1dbb2:	f88d 3014 	strb.w	r3, [sp, #20]
   1dbb6:	e7e5      	b.n	1db84 <ipsp_connected+0xbc>
			addr->s6_addr[8] ^= 0x02;
   1dbb8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1dbbc:	f083 0302 	eor.w	r3, r3, #2
   1dbc0:	f88d 3014 	strb.w	r3, [sp, #20]
   1dbc4:	e7e2      	b.n	1db8c <ipsp_connected+0xc4>
	...

0001dbc8 <net_bt_init>:
	.disconnected = disconnected,
};
#endif /* CONFIG_NET_L2_BT_MGMT */

static int net_bt_init(struct device *dev)
{
   1dbc8:	b508      	push	{r3, lr}
	NET_DBG("dev %p driver_data %p", dev, dev->driver_data);

#if defined(CONFIG_NET_L2_BT_MGMT)
	bt_conn_cb_register(&conn_callbacks);
   1dbca:	4804      	ldr	r0, [pc, #16]	; (1dbdc <net_bt_init+0x14>)
   1dbcc:	f7e8 fbb8 	bl	6340 <bt_conn_cb_register>
#endif
	bt_l2cap_server_register(&server);
   1dbd0:	4803      	ldr	r0, [pc, #12]	; (1dbe0 <net_bt_init+0x18>)
   1dbd2:	f7e9 ffc7 	bl	7b64 <bt_l2cap_server_register>

	return 0;
}
   1dbd6:	2000      	movs	r0, #0
   1dbd8:	bd08      	pop	{r3, pc}
   1dbda:	bf00      	nop
   1dbdc:	2000bce4 	.word	0x2000bce4
   1dbe0:	2000bd14 	.word	0x2000bd14

0001dbe4 <bt_iface_send>:
{
   1dbe4:	b538      	push	{r3, r4, r5, lr}
	return iface->dev;
   1dbe6:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1dbe8:	689c      	ldr	r4, [r3, #8]
	frags = pkt->frags;
   1dbea:	688d      	ldr	r5, [r1, #8]
	pkt->frags = NULL;
   1dbec:	2300      	movs	r3, #0
   1dbee:	608b      	str	r3, [r1, #8]
	net_pkt_unref(pkt);
   1dbf0:	4608      	mov	r0, r1
   1dbf2:	f7fe ffc2 	bl	1cb7a <net_pkt_unref>
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   1dbf6:	4629      	mov	r1, r5
   1dbf8:	1d20      	adds	r0, r4, #4
   1dbfa:	f7ea f9bd 	bl	7f78 <bt_l2cap_chan_send>
}
   1dbfe:	bd38      	pop	{r3, r4, r5, pc}

0001dc00 <bt_iface_init>:
   1dc00:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1dc02:	689b      	ldr	r3, [r3, #8]
	ctxt->iface = iface;
   1dc04:	6018      	str	r0, [r3, #0]
	atomic_set_bit(iface->flags, NET_IF_POINTOPOINT);
   1dc06:	300c      	adds	r0, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dc08:	f3bf 8f5b 	dmb	ish
   1dc0c:	e850 3f00 	ldrex	r3, [r0]
   1dc10:	f043 0302 	orr.w	r3, r3, #2
   1dc14:	e840 3200 	strex	r2, r3, [r0]
   1dc18:	2a00      	cmp	r2, #0
   1dc1a:	d1f7      	bne.n	1dc0c <bt_iface_init+0xc>
   1dc1c:	f3bf 8f5b 	dmb	ish
   1dc20:	4770      	bx	lr
	...

0001dc24 <net_mgmt_NET_REQUEST_BT_ADVERTISE>:
{
   1dc24:	b510      	push	{r4, lr}
   1dc26:	b086      	sub	sp, #24
   1dc28:	4614      	mov	r4, r2
	if (!strcmp(data, "on")) {
   1dc2a:	4913      	ldr	r1, [pc, #76]	; (1dc78 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x54>)
   1dc2c:	4610      	mov	r0, r2
   1dc2e:	f7e2 fbeb 	bl	408 <strcmp>
   1dc32:	b140      	cbz	r0, 1dc46 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x22>
	} else if (!strcmp(data, "off")) {
   1dc34:	4911      	ldr	r1, [pc, #68]	; (1dc7c <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x58>)
   1dc36:	4620      	mov	r0, r4
   1dc38:	f7e2 fbe6 	bl	408 <strcmp>
   1dc3c:	b9c0      	cbnz	r0, 1dc70 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x4c>
		return bt_le_adv_stop();
   1dc3e:	f7e8 f87b 	bl	5d38 <bt_le_adv_stop>
}
   1dc42:	b006      	add	sp, #24
   1dc44:	bd10      	pop	{r4, pc}
		return bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   1dc46:	2300      	movs	r3, #0
   1dc48:	9303      	str	r3, [sp, #12]
   1dc4a:	9304      	str	r3, [sp, #16]
   1dc4c:	9305      	str	r3, [sp, #20]
   1dc4e:	2301      	movs	r3, #1
   1dc50:	f88d 300c 	strb.w	r3, [sp, #12]
   1dc54:	22a0      	movs	r2, #160	; 0xa0
   1dc56:	f8ad 200e 	strh.w	r2, [sp, #14]
   1dc5a:	22f0      	movs	r2, #240	; 0xf0
   1dc5c:	f8ad 2010 	strh.w	r2, [sp, #16]
   1dc60:	9300      	str	r3, [sp, #0]
   1dc62:	4b07      	ldr	r3, [pc, #28]	; (1dc80 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x5c>)
   1dc64:	2202      	movs	r2, #2
   1dc66:	4907      	ldr	r1, [pc, #28]	; (1dc84 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x60>)
   1dc68:	a803      	add	r0, sp, #12
   1dc6a:	f7e7 ffbb 	bl	5be4 <bt_le_adv_start>
   1dc6e:	e7e8      	b.n	1dc42 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
		return -EINVAL;
   1dc70:	f06f 0015 	mvn.w	r0, #21
   1dc74:	e7e5      	b.n	1dc42 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
   1dc76:	bf00      	nop
   1dc78:	0002ff24 	.word	0x0002ff24
   1dc7c:	0002ff28 	.word	0x0002ff28
   1dc80:	0002ff2c 	.word	0x0002ff2c
   1dc84:	0002ff14 	.word	0x0002ff14

0001dc88 <net_icmpv6_register_handler>:
	node->next = list->head;
   1dc88:	4b04      	ldr	r3, [pc, #16]	; (1dc9c <net_icmpv6_register_handler+0x14>)
   1dc8a:	681a      	ldr	r2, [r3, #0]
   1dc8c:	6002      	str	r2, [r0, #0]
	list->head = node;
   1dc8e:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   1dc90:	685b      	ldr	r3, [r3, #4]
   1dc92:	b103      	cbz	r3, 1dc96 <net_icmpv6_register_handler+0xe>
   1dc94:	4770      	bx	lr
		list->tail = list->head;
   1dc96:	4b01      	ldr	r3, [pc, #4]	; (1dc9c <net_icmpv6_register_handler+0x14>)
   1dc98:	6058      	str	r0, [r3, #4]
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
   1dc9a:	e7fb      	b.n	1dc94 <net_icmpv6_register_handler+0xc>
   1dc9c:	20001d7c 	.word	0x20001d7c

0001dca0 <net_icmpv6_unregister_handler>:

void net_icmpv6_unregister_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_find_and_remove(&handlers, &handler->node);
   1dca0:	4601      	mov	r1, r0
	return list->head;
   1dca2:	4b10      	ldr	r3, [pc, #64]	; (1dce4 <net_icmpv6_unregister_handler+0x44>)
   1dca4:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   1dca6:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1dca8:	b1d3      	cbz	r3, 1dce0 <net_icmpv6_unregister_handler+0x40>
		if (test == node) {
   1dcaa:	4299      	cmp	r1, r3
   1dcac:	d002      	beq.n	1dcb4 <net_icmpv6_unregister_handler+0x14>
		prev = test;
   1dcae:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1dcb0:	681b      	ldr	r3, [r3, #0]
   1dcb2:	e7f9      	b.n	1dca8 <net_icmpv6_unregister_handler+0x8>
	if (!prev_node) {
   1dcb4:	b142      	cbz	r2, 1dcc8 <net_icmpv6_unregister_handler+0x28>
		prev_node->next = node->next;
   1dcb6:	6803      	ldr	r3, [r0, #0]
   1dcb8:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   1dcba:	4b0a      	ldr	r3, [pc, #40]	; (1dce4 <net_icmpv6_unregister_handler+0x44>)
   1dcbc:	685b      	ldr	r3, [r3, #4]
   1dcbe:	4298      	cmp	r0, r3
   1dcc0:	d00b      	beq.n	1dcda <net_icmpv6_unregister_handler+0x3a>
	node->next = NULL;
   1dcc2:	2300      	movs	r3, #0
   1dcc4:	6003      	str	r3, [r0, #0]
   1dcc6:	4770      	bx	lr
		list->head = node->next;
   1dcc8:	6802      	ldr	r2, [r0, #0]
   1dcca:	4b06      	ldr	r3, [pc, #24]	; (1dce4 <net_icmpv6_unregister_handler+0x44>)
   1dccc:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   1dcce:	685b      	ldr	r3, [r3, #4]
   1dcd0:	4298      	cmp	r0, r3
   1dcd2:	d1f6      	bne.n	1dcc2 <net_icmpv6_unregister_handler+0x22>
			list->tail = list->head;
   1dcd4:	4b03      	ldr	r3, [pc, #12]	; (1dce4 <net_icmpv6_unregister_handler+0x44>)
   1dcd6:	605a      	str	r2, [r3, #4]
   1dcd8:	e7f3      	b.n	1dcc2 <net_icmpv6_unregister_handler+0x22>
			list->tail = prev_node;
   1dcda:	4b02      	ldr	r3, [pc, #8]	; (1dce4 <net_icmpv6_unregister_handler+0x44>)
   1dcdc:	605a      	str	r2, [r3, #4]
   1dcde:	e7f0      	b.n	1dcc2 <net_icmpv6_unregister_handler+0x22>
   1dce0:	4770      	bx	lr
   1dce2:	bf00      	nop
   1dce4:	20001d7c 	.word	0x20001d7c

0001dce8 <net_icmpv6_set_chksum>:
#define echo_reply_debug(pkt)
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

struct net_buf *net_icmpv6_set_chksum(struct net_pkt *pkt,
				      struct net_buf *frag)
{
   1dce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dcec:	b086      	sub	sp, #24
   1dcee:	4606      	mov	r6, r0
   1dcf0:	460d      	mov	r5, r1
	struct net_icmp_hdr *icmp_hdr;
	u16_t chksum = 0;
   1dcf2:	2300      	movs	r3, #0
   1dcf4:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	icmp_hdr = net_pkt_icmp_data(pkt);
   1dcf8:	f7ff fa18 	bl	1d12c <net_pkt_icmp_data>
   1dcfc:	4604      	mov	r4, r0
 */
static inline
struct net_icmp_hdr *net_icmp_header_fits(struct net_pkt *pkt,
					  struct net_icmp_hdr *hdr)
{
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1dcfe:	2204      	movs	r2, #4
   1dd00:	4601      	mov	r1, r0
   1dd02:	4630      	mov	r0, r6
   1dd04:	f7ff fdfc 	bl	1d900 <net_header_fits>
   1dd08:	b170      	cbz	r0, 1dd28 <net_icmpv6_set_chksum+0x40>
		return hdr;
   1dd0a:	4623      	mov	r3, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1dd0c:	b173      	cbz	r3, 1dd2c <net_icmpv6_set_chksum+0x44>
		icmp_hdr->chksum = 0;
   1dd0e:	2300      	movs	r3, #0
   1dd10:	70a3      	strb	r3, [r4, #2]
   1dd12:	70e3      	strb	r3, [r4, #3]
extern u16_t net_calc_chksum_ipv4(struct net_pkt *pkt);
#endif /* CONFIG_NET_IPV4 */

static inline u16_t net_calc_chksum_icmpv6(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1dd14:	213a      	movs	r1, #58	; 0x3a
   1dd16:	4630      	mov	r0, r6
   1dd18:	f7ff fd99 	bl	1d84e <net_calc_chksum>
		icmp_hdr->chksum = ~net_calc_chksum_icmpv6(pkt);
   1dd1c:	43c0      	mvns	r0, r0
   1dd1e:	8060      	strh	r0, [r4, #2]

		return frag;
   1dd20:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   1dd22:	b006      	add	sp, #24
   1dd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1dd28:	2300      	movs	r3, #0
   1dd2a:	e7ef      	b.n	1dd0c <net_icmpv6_set_chksum+0x24>
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1dd2c:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1dd30:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1dd34:	441a      	add	r2, r3
   1dd36:	3202      	adds	r2, #2
   1dd38:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   1dd3c:	f8cd 8008 	str.w	r8, [sp, #8]
   1dd40:	f10d 0416 	add.w	r4, sp, #22
   1dd44:	9401      	str	r4, [sp, #4]
   1dd46:	2702      	movs	r7, #2
   1dd48:	9700      	str	r7, [sp, #0]
   1dd4a:	ab05      	add	r3, sp, #20
   1dd4c:	b292      	uxth	r2, r2
   1dd4e:	4629      	mov	r1, r5
   1dd50:	4630      	mov	r0, r6
   1dd52:	f7ff f902 	bl	1cf5a <net_pkt_write>
   1dd56:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1dd58:	213a      	movs	r1, #58	; 0x3a
   1dd5a:	4630      	mov	r0, r6
   1dd5c:	f7ff fd77 	bl	1d84e <net_calc_chksum>
	chksum = ~net_calc_chksum_icmpv6(pkt);
   1dd60:	43c0      	mvns	r0, r0
   1dd62:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1dd66:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1dd6a:	3a02      	subs	r2, #2
   1dd6c:	f8cd 8008 	str.w	r8, [sp, #8]
   1dd70:	9401      	str	r4, [sp, #4]
   1dd72:	9700      	str	r7, [sp, #0]
   1dd74:	ab05      	add	r3, sp, #20
   1dd76:	b292      	uxth	r2, r2
   1dd78:	4629      	mov	r1, r5
   1dd7a:	4630      	mov	r0, r6
   1dd7c:	f7ff f8ed 	bl	1cf5a <net_pkt_write>
	return frag;
   1dd80:	e7cf      	b.n	1dd22 <net_icmpv6_set_chksum+0x3a>

0001dd82 <net_icmpv6_get_hdr>:

struct net_icmp_hdr *net_icmpv6_get_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1dd82:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dd84:	b085      	sub	sp, #20
   1dd86:	4605      	mov	r5, r0
   1dd88:	460f      	mov	r7, r1
	/* If the ICMP header can fit the first fragment, then access it
	 * directly (fast path), otherwise read the values one by one
	 * using net_frag_read*() functions (slow path).
	 */

	icmp_hdr = net_pkt_icmp_data(pkt);
   1dd8a:	f7ff f9cf 	bl	1d12c <net_pkt_icmp_data>
   1dd8e:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1dd90:	2204      	movs	r2, #4
   1dd92:	4601      	mov	r1, r0
   1dd94:	4628      	mov	r0, r5
   1dd96:	f7ff fdb3 	bl	1d900 <net_header_fits>
   1dd9a:	b120      	cbz	r0, 1dda6 <net_icmpv6_get_hdr+0x24>
		return hdr;
   1dd9c:	4626      	mov	r6, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1dd9e:	b126      	cbz	r6, 1ddaa <net_icmpv6_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1dda0:	4620      	mov	r0, r4
   1dda2:	b005      	add	sp, #20
   1dda4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   1dda6:	2600      	movs	r6, #0
   1dda8:	e7f9      	b.n	1dd9e <net_icmpv6_get_hdr+0x1c>
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ddaa:	68a8      	ldr	r0, [r5, #8]
   1ddac:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt), &pos, &hdr->type);
   1ddb0:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
static inline struct net_buf *net_frag_read_u8(struct net_buf *frag,
					      u16_t offset,
					      u16_t *pos,
					      u8_t *value)
{
	return net_frag_read(frag, offset, pos, 1, value);
   1ddb4:	9700      	str	r7, [sp, #0]
   1ddb6:	2301      	movs	r3, #1
   1ddb8:	f10d 020e 	add.w	r2, sp, #14
   1ddbc:	4421      	add	r1, r4
   1ddbe:	f7ff f85a 	bl	1ce76 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->code);
   1ddc2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ddc6:	1c7b      	adds	r3, r7, #1
   1ddc8:	9300      	str	r3, [sp, #0]
   1ddca:	2301      	movs	r3, #1
   1ddcc:	f10d 020e 	add.w	r2, sp, #14
   1ddd0:	f7ff f851 	bl	1ce76 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1ddd4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   1ddd8:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1ddda:	9300      	str	r3, [sp, #0]
   1dddc:	2302      	movs	r3, #2
   1ddde:	f10d 020e 	add.w	r2, sp, #14
   1dde2:	f7ff f848 	bl	1ce76 <net_frag_read>
	if (!frag) {
   1dde6:	b108      	cbz	r0, 1ddec <net_icmpv6_get_hdr+0x6a>
	return hdr;
   1dde8:	463c      	mov	r4, r7
   1ddea:	e7d9      	b.n	1dda0 <net_icmpv6_get_hdr+0x1e>
		return NULL;
   1ddec:	4634      	mov	r4, r6
   1ddee:	e7d7      	b.n	1dda0 <net_icmpv6_get_hdr+0x1e>

0001ddf0 <net_icmpv6_set_hdr>:

struct net_icmp_hdr *net_icmpv6_set_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1ddf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ddf4:	b086      	sub	sp, #24
   1ddf6:	4606      	mov	r6, r0
   1ddf8:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1ddfa:	2204      	movs	r2, #4
   1ddfc:	f7ff fd80 	bl	1d900 <net_header_fits>
   1de00:	b128      	cbz	r0, 1de0e <net_icmpv6_set_hdr+0x1e>
		return hdr;
   1de02:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_icmp_header_fits(pkt, hdr)) {
   1de04:	b12d      	cbz	r5, 1de12 <net_icmpv6_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1de06:	4620      	mov	r0, r4
   1de08:	b006      	add	sp, #24
   1de0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1de0e:	2500      	movs	r5, #0
   1de10:	e7f8      	b.n	1de04 <net_icmpv6_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1de12:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt), &pos,
   1de16:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1de1a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1de1e:	9702      	str	r7, [sp, #8]
   1de20:	9401      	str	r4, [sp, #4]
   1de22:	f04f 0801 	mov.w	r8, #1
   1de26:	f8cd 8000 	str.w	r8, [sp]
   1de2a:	f10d 0316 	add.w	r3, sp, #22
   1de2e:	440a      	add	r2, r1
   1de30:	68b1      	ldr	r1, [r6, #8]
   1de32:	4630      	mov	r0, r6
   1de34:	f7ff f891 	bl	1cf5a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->code),
   1de38:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1de3c:	eb04 0308 	add.w	r3, r4, r8
   1de40:	9702      	str	r7, [sp, #8]
   1de42:	9301      	str	r3, [sp, #4]
   1de44:	f8cd 8000 	str.w	r8, [sp]
   1de48:	f10d 0316 	add.w	r3, sp, #22
   1de4c:	4601      	mov	r1, r0
   1de4e:	4630      	mov	r0, r6
   1de50:	f7ff f883 	bl	1cf5a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1de54:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   1de58:	1ca3      	adds	r3, r4, #2
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1de5a:	9702      	str	r7, [sp, #8]
   1de5c:	9301      	str	r3, [sp, #4]
   1de5e:	2302      	movs	r3, #2
   1de60:	9300      	str	r3, [sp, #0]
   1de62:	f10d 0316 	add.w	r3, sp, #22
   1de66:	4601      	mov	r1, r0
   1de68:	4630      	mov	r0, r6
   1de6a:	f7ff f876 	bl	1cf5a <net_pkt_write>
	if (!frag) {
   1de6e:	2800      	cmp	r0, #0
   1de70:	d1c9      	bne.n	1de06 <net_icmpv6_set_hdr+0x16>
		return NULL;
   1de72:	462c      	mov	r4, r5
   1de74:	e7c7      	b.n	1de06 <net_icmpv6_set_hdr+0x16>
	...

0001de78 <handle_echo_request>:

	return hdr;
}

static enum net_verdict handle_echo_request(struct net_pkt *orig)
{
   1de78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1de7c:	b09a      	sub	sp, #104	; 0x68
   1de7e:	4606      	mov	r6, r0
	return pkt->iface;
   1de80:	6945      	ldr	r5, [r0, #20]

	echo_request_debug(orig);

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1de82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1de86:	2000      	movs	r0, #0
   1de88:	f7fe fe06 	bl	1ca98 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1de8c:	2800      	cmp	r0, #0
   1de8e:	f000 80a1 	beq.w	1dfd4 <handle_echo_request+0x15c>
   1de92:	4604      	mov	r4, r0
	return pkt->frags->data;
   1de94:	68b3      	ldr	r3, [r6, #8]
	size_t bytes = 0;
   1de96:	2100      	movs	r1, #0
   1de98:	e002      	b.n	1dea0 <handle_echo_request+0x28>
		bytes += buf->len;
   1de9a:	899a      	ldrh	r2, [r3, #12]
   1de9c:	4411      	add	r1, r2
		buf = buf->frags;
   1de9e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1dea0:	2b00      	cmp	r3, #0
   1dea2:	d1fa      	bne.n	1de9a <handle_echo_request+0x22>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1dea4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1dea8:	2200      	movs	r2, #0
   1deaa:	4630      	mov	r0, r6
   1deac:	f7fe fea6 	bl	1cbfc <net_pkt_copy>

	payload_len = sys_get_be16(NET_IPV6_HDR(orig)->len) -
		sizeof(NET_ICMPH_LEN) - NET_ICMPV6_UNUSED_LEN;

	frag = net_pkt_copy_all(orig, 0, PKT_WAIT_TIME);
	if (!frag) {
   1deb0:	4607      	mov	r7, r0
   1deb2:	2800      	cmp	r0, #0
   1deb4:	f000 808b 	beq.w	1dfce <handle_echo_request+0x156>
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1deb8:	4601      	mov	r1, r0
   1deba:	4620      	mov	r0, r4
   1debc:	f7fe fe87 	bl	1cbce <net_pkt_frag_add>
	pkt->family = family;
   1dec0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1dec4:	220a      	movs	r2, #10
   1dec6:	f362 03c6 	bfi	r3, r2, #3, #4
   1deca:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1dece:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1ded0:	7d6b      	ldrb	r3, [r5, #21]
   1ded2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1ded6:	7d6b      	ldrb	r3, [r5, #21]
   1ded8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1dedc:	f107 0008 	add.w	r0, r7, #8
   1dee0:	f7fc f98d 	bl	1a1fe <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1dee4:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ip_hdr_len = len;
   1dee8:	2328      	movs	r3, #40	; 0x28
   1deea:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->ipv6_ext_len;
   1deee:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));

	if (net_pkt_ipv6_ext_len(orig)) {
   1def2:	2b00      	cmp	r3, #0
   1def4:	d076      	beq.n	1dfe4 <handle_echo_request+0x16c>
	pkt->ipv6_ext_len = len;
   1def6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1defa:	68a3      	ldr	r3, [r4, #8]
   1defc:	689b      	ldr	r3, [r3, #8]
	} else {
		net_pkt_set_ipv6_ext_len(pkt, 0);
	}

	/* Set up IPv6 Header fields */
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1defe:	2260      	movs	r2, #96	; 0x60
   1df00:	701a      	strb	r2, [r3, #0]
   1df02:	68a3      	ldr	r3, [r4, #8]
   1df04:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1df06:	2300      	movs	r3, #0
   1df08:	7053      	strb	r3, [r2, #1]
   1df0a:	68a2      	ldr	r2, [r4, #8]
   1df0c:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1df0e:	7093      	strb	r3, [r2, #2]
   1df10:	70d3      	strb	r3, [r2, #3]
   1df12:	68a3      	ldr	r3, [r4, #8]
   1df14:	689b      	ldr	r3, [r3, #8]
	return iface->ipv6.hop_limit;
   1df16:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
	NET_IPV6_HDR(pkt)->hop_limit = net_if_ipv6_get_hop_limit(iface);
   1df1a:	71da      	strb	r2, [r3, #7]
   1df1c:	68a3      	ldr	r3, [r4, #8]
   1df1e:	f8d3 c008 	ldr.w	ip, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   1df22:	f89c 3018 	ldrb.w	r3, [ip, #24]

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   1df26:	2bff      	cmp	r3, #255	; 0xff
   1df28:	d060      	beq.n	1dfec <handle_echo_request+0x174>
   1df2a:	68b3      	ldr	r3, [r6, #8]
   1df2c:	689d      	ldr	r5, [r3, #8]
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1df2e:	af0e      	add	r7, sp, #56	; 0x38
   1df30:	462b      	mov	r3, r5
   1df32:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1df36:	6859      	ldr	r1, [r3, #4]
   1df38:	689a      	ldr	r2, [r3, #8]
   1df3a:	68db      	ldr	r3, [r3, #12]
   1df3c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1df3e:	af01      	add	r7, sp, #4
   1df40:	ab0e      	add	r3, sp, #56	; 0x38
   1df42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1df44:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1df48:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
   1df4c:	462b      	mov	r3, r5
   1df4e:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1df52:	6859      	ldr	r1, [r3, #4]
   1df54:	689a      	ldr	r2, [r3, #8]
   1df56:	68db      	ldr	r3, [r3, #12]
   1df58:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1df5c:	ad12      	add	r5, sp, #72	; 0x48
   1df5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1df60:	f8cc 0008 	str.w	r0, [ip, #8]
   1df64:	f8cc 100c 	str.w	r1, [ip, #12]
   1df68:	f8cc 2010 	str.w	r2, [ip, #16]
   1df6c:	f8cc 3014 	str.w	r3, [ip, #20]
   1df70:	68a3      	ldr	r3, [r4, #8]
   1df72:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1df76:	ad16      	add	r5, sp, #88	; 0x58
   1df78:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1df7c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1df80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1df82:	f8ce 0018 	str.w	r0, [lr, #24]
   1df86:	f8ce 101c 	str.w	r1, [lr, #28]
   1df8a:	f8ce 2020 	str.w	r2, [lr, #32]
   1df8e:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
			goto drop;
		}
#endif
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1df92:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1df94:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1df96:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   1df9a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	/* We must not set the destination ll address here but trust
	 * that it is set properly using a value from neighbor cache.
	 */
	net_pkt_ll_dst(pkt)->addr = NULL;
   1df9e:	2500      	movs	r5, #0
   1dfa0:	62a5      	str	r5, [r4, #40]	; 0x28

	/* ICMPv6 fields */
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1dfa2:	a905      	add	r1, sp, #20
   1dfa4:	4620      	mov	r0, r4
   1dfa6:	f7ff feec 	bl	1dd82 <net_icmpv6_get_hdr>
   1dfaa:	4601      	mov	r1, r0
	icmp_hdr->type = NET_ICMPV6_ECHO_REPLY;
   1dfac:	2381      	movs	r3, #129	; 0x81
   1dfae:	7003      	strb	r3, [r0, #0]
	icmp_hdr->code = 0;
   1dfb0:	7045      	strb	r5, [r0, #1]
	icmp_hdr->chksum = 0;
   1dfb2:	7085      	strb	r5, [r0, #2]
   1dfb4:	70c5      	strb	r5, [r0, #3]
	net_icmpv6_set_hdr(pkt, icmp_hdr);
   1dfb6:	4620      	mov	r0, r4
   1dfb8:	f7ff ff1a 	bl	1ddf0 <net_icmpv6_set_hdr>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1dfbc:	68a1      	ldr	r1, [r4, #8]
   1dfbe:	4620      	mov	r0, r4
   1dfc0:	f7ff fe92 	bl	1dce8 <net_icmpv6_set_chksum>

	echo_reply_debug(pkt);

	if (net_send_data(pkt) < 0) {
   1dfc4:	4620      	mov	r0, r4
   1dfc6:	f7fc f9d7 	bl	1a378 <net_send_data>
   1dfca:	42a8      	cmp	r0, r5
   1dfcc:	da3c      	bge.n	1e048 <handle_echo_request+0x1d0>
	net_stats_update_icmp_sent();

	return NET_OK;

drop:
	net_pkt_unref(pkt);
   1dfce:	4620      	mov	r0, r4
   1dfd0:	f7fe fdd3 	bl	1cb7a <net_pkt_unref>
	net_stats.icmp.drop++;
   1dfd4:	4a21      	ldr	r2, [pc, #132]	; (1e05c <handle_echo_request+0x1e4>)
   1dfd6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1dfd8:	3301      	adds	r3, #1
   1dfda:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return NET_DROP;
   1dfdc:	2002      	movs	r0, #2
}
   1dfde:	b01a      	add	sp, #104	; 0x68
   1dfe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pkt->ipv6_ext_len = len;
   1dfe4:	2300      	movs	r3, #0
   1dfe6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   1dfea:	e786      	b.n	1defa <handle_echo_request+0x82>
	return pkt->frags->data;
   1dfec:	68b3      	ldr	r3, [r6, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1dfee:	af06      	add	r7, sp, #24
   1dff0:	689b      	ldr	r3, [r3, #8]
   1dff2:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1dff6:	6859      	ldr	r1, [r3, #4]
   1dff8:	689a      	ldr	r2, [r3, #8]
   1dffa:	68db      	ldr	r3, [r3, #12]
   1dffc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1dffe:	af06      	add	r7, sp, #24
   1e000:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1e002:	f8cc 0018 	str.w	r0, [ip, #24]
   1e006:	f8cc 101c 	str.w	r1, [ip, #28]
   1e00a:	f8cc 2020 	str.w	r2, [ip, #32]
   1e00e:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1e012:	68a3      	ldr	r3, [r4, #8]
   1e014:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1e018:	68b3      	ldr	r3, [r6, #8]
   1e01a:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e01c:	3118      	adds	r1, #24
   1e01e:	4628      	mov	r0, r5
   1e020:	f7fd f910 	bl	1b244 <net_if_ipv6_select_src_addr>
   1e024:	4603      	mov	r3, r0
   1e026:	ad0a      	add	r5, sp, #40	; 0x28
   1e028:	6800      	ldr	r0, [r0, #0]
   1e02a:	6859      	ldr	r1, [r3, #4]
   1e02c:	689a      	ldr	r2, [r3, #8]
   1e02e:	68db      	ldr	r3, [r3, #12]
   1e030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e032:	ad0a      	add	r5, sp, #40	; 0x28
   1e034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e036:	f8c8 0008 	str.w	r0, [r8, #8]
   1e03a:	f8c8 100c 	str.w	r1, [r8, #12]
   1e03e:	f8c8 2010 	str.w	r2, [r8, #16]
   1e042:	f8c8 3014 	str.w	r3, [r8, #20]
   1e046:	e7a4      	b.n	1df92 <handle_echo_request+0x11a>
	net_pkt_unref(orig);
   1e048:	4630      	mov	r0, r6
   1e04a:	f7fe fd96 	bl	1cb7a <net_pkt_unref>
	net_stats.icmp.sent++;
   1e04e:	4a03      	ldr	r2, [pc, #12]	; (1e05c <handle_echo_request+0x1e4>)
   1e050:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1e052:	3301      	adds	r3, #1
   1e054:	6393      	str	r3, [r2, #56]	; 0x38
	return NET_OK;
   1e056:	4628      	mov	r0, r5
   1e058:	e7c1      	b.n	1dfde <handle_echo_request+0x166>
   1e05a:	bf00      	nop
   1e05c:	20002950 	.word	0x20002950

0001e060 <net_icmpv6_get_ns_hdr>:
{
   1e060:	b570      	push	{r4, r5, r6, lr}
   1e062:	b084      	sub	sp, #16
   1e064:	4605      	mov	r5, r0
   1e066:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e068:	2104      	movs	r1, #4
   1e06a:	f7ff f874 	bl	1d156 <net_pkt_icmp_opt_data>
   1e06e:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e070:	2214      	movs	r2, #20
   1e072:	4601      	mov	r1, r0
   1e074:	4628      	mov	r0, r5
   1e076:	f7ff fc43 	bl	1d900 <net_header_fits>
   1e07a:	b110      	cbz	r0, 1e082 <net_icmpv6_get_ns_hdr+0x22>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1e07c:	4620      	mov	r0, r4
}
   1e07e:	b004      	add	sp, #16
   1e080:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read(pkt->frags,
   1e082:	68a8      	ldr	r0, [r5, #8]
			     net_pkt_ip_hdr_len(pkt) +
   1e084:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1e088:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1e08c:	4419      	add	r1, r3
	frag = net_frag_read(pkt->frags,
   1e08e:	3108      	adds	r1, #8
			     &pos, sizeof(struct in6_addr), (u8_t *)&hdr->tgt);
   1e090:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(pkt->frags,
   1e092:	9300      	str	r3, [sp, #0]
   1e094:	2310      	movs	r3, #16
   1e096:	f10d 020e 	add.w	r2, sp, #14
   1e09a:	b289      	uxth	r1, r1
   1e09c:	f7fe feeb 	bl	1ce76 <net_frag_read>
	if (!frag) {
   1e0a0:	2800      	cmp	r0, #0
   1e0a2:	d0ec      	beq.n	1e07e <net_icmpv6_get_ns_hdr+0x1e>
	return hdr;
   1e0a4:	4630      	mov	r0, r6
   1e0a6:	e7ea      	b.n	1e07e <net_icmpv6_get_ns_hdr+0x1e>

0001e0a8 <net_icmpv6_set_ns_hdr>:
{
   1e0a8:	b570      	push	{r4, r5, r6, lr}
   1e0aa:	b086      	sub	sp, #24
   1e0ac:	4605      	mov	r5, r0
   1e0ae:	460e      	mov	r6, r1
	const u32_t reserved = 0;
   1e0b0:	2300      	movs	r3, #0
   1e0b2:	9305      	str	r3, [sp, #20]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e0b4:	2104      	movs	r1, #4
   1e0b6:	f7ff f84e 	bl	1d156 <net_pkt_icmp_opt_data>
   1e0ba:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e0bc:	2214      	movs	r2, #20
   1e0be:	4601      	mov	r1, r0
   1e0c0:	4628      	mov	r0, r5
   1e0c2:	f7ff fc1d 	bl	1d900 <net_header_fits>
   1e0c6:	b110      	cbz	r0, 1e0ce <net_icmpv6_set_ns_hdr+0x26>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1e0c8:	4620      	mov	r0, r4
}
   1e0ca:	b006      	add	sp, #24
   1e0cc:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e0ce:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1e0d2:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e0d6:	441a      	add	r2, r3
   1e0d8:	3204      	adds	r2, #4
   1e0da:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1e0de:	9402      	str	r4, [sp, #8]
   1e0e0:	ab05      	add	r3, sp, #20
   1e0e2:	9301      	str	r3, [sp, #4]
   1e0e4:	2304      	movs	r3, #4
   1e0e6:	9300      	str	r3, [sp, #0]
   1e0e8:	f10d 0312 	add.w	r3, sp, #18
   1e0ec:	b292      	uxth	r2, r2
   1e0ee:	68a9      	ldr	r1, [r5, #8]
   1e0f0:	4628      	mov	r0, r5
   1e0f2:	f7fe ff32 	bl	1cf5a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1e0f6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1e0fa:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1e0fc:	9402      	str	r4, [sp, #8]
   1e0fe:	9301      	str	r3, [sp, #4]
   1e100:	2310      	movs	r3, #16
   1e102:	9300      	str	r3, [sp, #0]
   1e104:	f10d 0312 	add.w	r3, sp, #18
   1e108:	4601      	mov	r1, r0
   1e10a:	4628      	mov	r0, r5
   1e10c:	f7fe ff25 	bl	1cf5a <net_pkt_write>
	if (!frag) {
   1e110:	2800      	cmp	r0, #0
   1e112:	d0da      	beq.n	1e0ca <net_icmpv6_set_ns_hdr+0x22>
	return hdr;
   1e114:	4630      	mov	r0, r6
   1e116:	e7d8      	b.n	1e0ca <net_icmpv6_set_ns_hdr+0x22>

0001e118 <net_icmpv6_get_nd_opt_hdr>:
{
   1e118:	b570      	push	{r4, r5, r6, lr}
   1e11a:	b084      	sub	sp, #16
   1e11c:	4605      	mov	r5, r0
   1e11e:	460e      	mov	r6, r1
	return pkt->ipv6_ext_opt_len;
   1e120:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1e124:	3104      	adds	r1, #4
   1e126:	f7ff f816 	bl	1d156 <net_pkt_icmp_opt_data>
   1e12a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e12c:	2202      	movs	r2, #2
   1e12e:	4601      	mov	r1, r0
   1e130:	4628      	mov	r0, r5
   1e132:	f7ff fbe5 	bl	1d900 <net_header_fits>
   1e136:	b110      	cbz	r0, 1e13e <net_icmpv6_get_nd_opt_hdr+0x26>
		return (struct net_icmpv6_nd_opt_hdr *)opt_data;
   1e138:	4620      	mov	r0, r4
}
   1e13a:	b004      	add	sp, #16
   1e13c:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags,
   1e13e:	68a8      	ldr	r0, [r5, #8]
				net_pkt_ip_hdr_len(pkt) +
   1e140:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1e144:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1e148:	4419      	add	r1, r3
				net_pkt_ipv6_ext_opt_len(pkt),
   1e14a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
				sizeof(struct net_icmp_hdr) +
   1e14e:	4419      	add	r1, r3
   1e150:	b289      	uxth	r1, r1
	frag = net_frag_read_u8(pkt->frags,
   1e152:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1e154:	9600      	str	r6, [sp, #0]
   1e156:	2301      	movs	r3, #1
   1e158:	f10d 020e 	add.w	r2, sp, #14
   1e15c:	b289      	uxth	r1, r1
   1e15e:	f7fe fe8a 	bl	1ce76 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->len);
   1e162:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e166:	1c73      	adds	r3, r6, #1
   1e168:	9300      	str	r3, [sp, #0]
   1e16a:	2301      	movs	r3, #1
   1e16c:	f10d 020e 	add.w	r2, sp, #14
   1e170:	f7fe fe81 	bl	1ce76 <net_frag_read>
	if (!frag) {
   1e174:	2800      	cmp	r0, #0
   1e176:	d0e0      	beq.n	1e13a <net_icmpv6_get_nd_opt_hdr+0x22>
	return hdr;
   1e178:	4630      	mov	r0, r6
   1e17a:	e7de      	b.n	1e13a <net_icmpv6_get_nd_opt_hdr+0x22>

0001e17c <net_icmpv6_get_na_hdr>:
{
   1e17c:	b570      	push	{r4, r5, r6, lr}
   1e17e:	b084      	sub	sp, #16
   1e180:	4605      	mov	r5, r0
   1e182:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e184:	2104      	movs	r1, #4
   1e186:	f7fe ffe6 	bl	1d156 <net_pkt_icmp_opt_data>
   1e18a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e18c:	2214      	movs	r2, #20
   1e18e:	4601      	mov	r1, r0
   1e190:	4628      	mov	r0, r5
   1e192:	f7ff fbb5 	bl	1d900 <net_header_fits>
   1e196:	b110      	cbz	r0, 1e19e <net_icmpv6_get_na_hdr+0x22>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1e198:	4620      	mov	r0, r4
}
   1e19a:	b004      	add	sp, #16
   1e19c:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e19e:	68a8      	ldr	r0, [r5, #8]
   1e1a0:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1e1a4:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e1a8:	4419      	add	r1, r3
   1e1aa:	3104      	adds	r1, #4
   1e1ac:	9600      	str	r6, [sp, #0]
   1e1ae:	2301      	movs	r3, #1
   1e1b0:	f10d 020e 	add.w	r2, sp, #14
   1e1b4:	b289      	uxth	r1, r1
   1e1b6:	f7fe fe5e 	bl	1ce76 <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 3); /* reserved */
   1e1ba:	f8bd 100e 	ldrh.w	r1, [sp, #14]
	return net_frag_read(frag, offset, pos, len, NULL);
   1e1be:	2300      	movs	r3, #0
   1e1c0:	9300      	str	r3, [sp, #0]
   1e1c2:	2303      	movs	r3, #3
   1e1c4:	f10d 020e 	add.w	r2, sp, #14
   1e1c8:	f7fe fe55 	bl	1ce76 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1e1cc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->tgt);
   1e1d0:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1e1d2:	9300      	str	r3, [sp, #0]
   1e1d4:	2310      	movs	r3, #16
   1e1d6:	f10d 020e 	add.w	r2, sp, #14
   1e1da:	f7fe fe4c 	bl	1ce76 <net_frag_read>
	if (!frag) {
   1e1de:	2800      	cmp	r0, #0
   1e1e0:	d0db      	beq.n	1e19a <net_icmpv6_get_na_hdr+0x1e>
	return hdr;
   1e1e2:	4630      	mov	r0, r6
   1e1e4:	e7d9      	b.n	1e19a <net_icmpv6_get_na_hdr+0x1e>

0001e1e6 <net_icmpv6_set_na_hdr>:
{
   1e1e6:	b570      	push	{r4, r5, r6, lr}
   1e1e8:	b086      	sub	sp, #24
   1e1ea:	4605      	mov	r5, r0
   1e1ec:	460e      	mov	r6, r1
	const u8_t reserved[3] = { 0 };
   1e1ee:	2300      	movs	r3, #0
   1e1f0:	f8ad 3014 	strh.w	r3, [sp, #20]
   1e1f4:	f88d 3016 	strb.w	r3, [sp, #22]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e1f8:	2104      	movs	r1, #4
   1e1fa:	f7fe ffac 	bl	1d156 <net_pkt_icmp_opt_data>
   1e1fe:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e200:	2214      	movs	r2, #20
   1e202:	4601      	mov	r1, r0
   1e204:	4628      	mov	r0, r5
   1e206:	f7ff fb7b 	bl	1d900 <net_header_fits>
   1e20a:	b110      	cbz	r0, 1e212 <net_icmpv6_set_na_hdr+0x2c>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1e20c:	4620      	mov	r0, r4
}
   1e20e:	b006      	add	sp, #24
   1e210:	bd70      	pop	{r4, r5, r6, pc}
			     net_pkt_ip_hdr_len(pkt) +
   1e212:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1e216:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1e21a:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, pkt->frags,
   1e21c:	3204      	adds	r2, #4
   1e21e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1e222:	9402      	str	r4, [sp, #8]
   1e224:	9601      	str	r6, [sp, #4]
   1e226:	2301      	movs	r3, #1
   1e228:	9300      	str	r3, [sp, #0]
   1e22a:	f10d 0312 	add.w	r3, sp, #18
   1e22e:	b292      	uxth	r2, r2
   1e230:	68a9      	ldr	r1, [r5, #8]
   1e232:	4628      	mov	r0, r5
   1e234:	f7fe fe91 	bl	1cf5a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(reserved),
   1e238:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1e23c:	9402      	str	r4, [sp, #8]
   1e23e:	ab05      	add	r3, sp, #20
   1e240:	9301      	str	r3, [sp, #4]
   1e242:	2303      	movs	r3, #3
   1e244:	9300      	str	r3, [sp, #0]
   1e246:	f10d 0312 	add.w	r3, sp, #18
   1e24a:	4601      	mov	r1, r0
   1e24c:	4628      	mov	r0, r5
   1e24e:	f7fe fe84 	bl	1cf5a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1e252:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1e256:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1e258:	9402      	str	r4, [sp, #8]
   1e25a:	9301      	str	r3, [sp, #4]
   1e25c:	2310      	movs	r3, #16
   1e25e:	9300      	str	r3, [sp, #0]
   1e260:	f10d 0312 	add.w	r3, sp, #18
   1e264:	4601      	mov	r1, r0
   1e266:	4628      	mov	r0, r5
   1e268:	f7fe fe77 	bl	1cf5a <net_pkt_write>
	if (!frag) {
   1e26c:	2800      	cmp	r0, #0
   1e26e:	d0ce      	beq.n	1e20e <net_icmpv6_set_na_hdr+0x28>
	return hdr;
   1e270:	4630      	mov	r0, r6
   1e272:	e7cc      	b.n	1e20e <net_icmpv6_set_na_hdr+0x28>

0001e274 <net_icmpv6_get_ra_hdr>:
{
   1e274:	b570      	push	{r4, r5, r6, lr}
   1e276:	b084      	sub	sp, #16
   1e278:	4606      	mov	r6, r0
   1e27a:	460d      	mov	r5, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e27c:	2104      	movs	r1, #4
   1e27e:	f7fe ff6a 	bl	1d156 <net_pkt_icmp_opt_data>
   1e282:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e284:	220c      	movs	r2, #12
   1e286:	4601      	mov	r1, r0
   1e288:	4630      	mov	r0, r6
   1e28a:	f7ff fb39 	bl	1d900 <net_header_fits>
   1e28e:	b110      	cbz	r0, 1e296 <net_icmpv6_get_ra_hdr+0x22>
		return (struct net_icmpv6_ra_hdr *)opt_data;
   1e290:	4620      	mov	r0, r4
}
   1e292:	b004      	add	sp, #16
   1e294:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e296:	68b0      	ldr	r0, [r6, #8]
   1e298:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1e29c:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e2a0:	4419      	add	r1, r3
   1e2a2:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1e2a4:	9500      	str	r5, [sp, #0]
   1e2a6:	2301      	movs	r3, #1
   1e2a8:	f10d 020e 	add.w	r2, sp, #14
   1e2ac:	b289      	uxth	r1, r1
   1e2ae:	f7fe fde2 	bl	1ce76 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   1e2b2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e2b6:	1c6b      	adds	r3, r5, #1
   1e2b8:	9300      	str	r3, [sp, #0]
   1e2ba:	2301      	movs	r3, #1
   1e2bc:	f10d 020e 	add.w	r2, sp, #14
   1e2c0:	f7fe fdd9 	bl	1ce76 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1e2c4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->router_lifetime);
   1e2c8:	1cab      	adds	r3, r5, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1e2ca:	9300      	str	r3, [sp, #0]
   1e2cc:	2302      	movs	r3, #2
   1e2ce:	f10d 020e 	add.w	r2, sp, #14
   1e2d2:	f7fe fdd0 	bl	1ce76 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1e2d6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->reachable_time);
   1e2da:	1d2b      	adds	r3, r5, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1e2dc:	9300      	str	r3, [sp, #0]
   1e2de:	2304      	movs	r3, #4
   1e2e0:	f10d 020e 	add.w	r2, sp, #14
   1e2e4:	f7fe fdc7 	bl	1ce76 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1e2e8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->retrans_timer);
   1e2ec:	f105 0308 	add.w	r3, r5, #8
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1e2f0:	9300      	str	r3, [sp, #0]
   1e2f2:	2304      	movs	r3, #4
   1e2f4:	f10d 020e 	add.w	r2, sp, #14
   1e2f8:	f7fe fdbd 	bl	1ce76 <net_frag_read>
	if (!frag) {
   1e2fc:	2800      	cmp	r0, #0
   1e2fe:	d0c8      	beq.n	1e292 <net_icmpv6_get_ra_hdr+0x1e>
	return hdr;
   1e300:	4628      	mov	r0, r5
   1e302:	e7c6      	b.n	1e292 <net_icmpv6_get_ra_hdr+0x1e>

0001e304 <net_icmpv6_send_error>:

int net_icmpv6_send_error(struct net_pkt *orig, u8_t type, u8_t code,
			  u32_t param)
{
   1e304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e308:	b09f      	sub	sp, #124	; 0x7c
   1e30a:	4605      	mov	r5, r0
   1e30c:	4688      	mov	r8, r1
   1e30e:	4692      	mov	sl, r2
   1e310:	4699      	mov	r9, r3
	return pkt->frags->data;
   1e312:	6883      	ldr	r3, [r0, #8]
   1e314:	689b      	ldr	r3, [r3, #8]
	struct net_buf *frag;
	struct net_if *iface;
	size_t extra_len, reserve;
	int err = -EIO;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   1e316:	799b      	ldrb	r3, [r3, #6]
   1e318:	2b3a      	cmp	r3, #58	; 0x3a
   1e31a:	d01d      	beq.n	1e358 <net_icmpv6_send_error+0x54>
	return pkt->iface;
   1e31c:	696f      	ldr	r7, [r5, #20]
		}
	}

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1e31e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1e322:	2000      	movs	r0, #0
   1e324:	f7fe fbb8 	bl	1ca98 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1e328:	4604      	mov	r4, r0
   1e32a:	2800      	cmp	r0, #0
   1e32c:	f000 8141 	beq.w	1e5b2 <net_icmpv6_send_error+0x2ae>
	return pkt->frags->data;
   1e330:	68ab      	ldr	r3, [r5, #8]
   1e332:	6899      	ldr	r1, [r3, #8]
	 * to store the param variable.
	 */
	reserve = sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr) +
		NET_ICMPV6_UNUSED_LEN;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_UDP) {
   1e334:	798b      	ldrb	r3, [r1, #6]
   1e336:	2b11      	cmp	r3, #17
   1e338:	d019      	beq.n	1e36e <net_icmpv6_send_error+0x6a>
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_udp_hdr);
	} else if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_TCP) {
   1e33a:	2b06      	cmp	r3, #6
   1e33c:	d019      	beq.n	1e372 <net_icmpv6_send_error+0x6e>
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1e33e:	687b      	ldr	r3, [r7, #4]
   1e340:	689b      	ldr	r3, [r3, #8]
   1e342:	3118      	adds	r1, #24
   1e344:	4638      	mov	r0, r7
   1e346:	4798      	blx	r3
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_tcp_hdr);
	} else {
		size_t space = CONFIG_NET_BUF_DATA_SIZE -
   1e348:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
			net_if_get_ll_reserve(iface,
					      &NET_IPV6_HDR(orig)->dst);

		if (reserve > space) {
   1e34c:	282f      	cmp	r0, #47	; 0x2f
   1e34e:	f240 80de 	bls.w	1e50e <net_icmpv6_send_error+0x20a>
			extra_len = 0;
		} else {
			extra_len = space - reserve;
   1e352:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
   1e356:	e00d      	b.n	1e374 <net_icmpv6_send_error+0x70>
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1e358:	a906      	add	r1, sp, #24
   1e35a:	f7ff fd12 	bl	1dd82 <net_icmpv6_get_hdr>
   1e35e:	b118      	cbz	r0, 1e368 <net_icmpv6_send_error+0x64>
		    icmp_hdr->code < 128) {
   1e360:	f99d 3019 	ldrsb.w	r3, [sp, #25]
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1e364:	2b00      	cmp	r3, #0
   1e366:	dbd9      	blt.n	1e31c <net_icmpv6_send_error+0x18>
			err = -EINVAL;
   1e368:	f06f 0515 	mvn.w	r5, #21
   1e36c:	e119      	b.n	1e5a2 <net_icmpv6_send_error+0x29e>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1e36e:	2630      	movs	r6, #48	; 0x30
   1e370:	e000      	b.n	1e374 <net_icmpv6_send_error+0x70>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1e372:	263c      	movs	r6, #60	; 0x3c
	}

	/* We only copy minimal IPv6 + next header from original message.
	 * This is so that the memory pressure is minimized.
	 */
	frag = net_pkt_copy(orig, extra_len, reserve, PKT_WAIT_TIME);
   1e374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1e378:	2230      	movs	r2, #48	; 0x30
   1e37a:	4631      	mov	r1, r6
   1e37c:	4628      	mov	r0, r5
   1e37e:	f7fe fc3d 	bl	1cbfc <net_pkt_copy>
	if (!frag) {
   1e382:	4683      	mov	fp, r0
   1e384:	2800      	cmp	r0, #0
   1e386:	f000 8104 	beq.w	1e592 <net_icmpv6_send_error+0x28e>
		err = -ENOMEM;
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1e38a:	4601      	mov	r1, r0
   1e38c:	4620      	mov	r0, r4
   1e38e:	f7fe fc1e 	bl	1cbce <net_pkt_frag_add>
	pkt->family = family;
   1e392:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1e396:	220a      	movs	r2, #10
   1e398:	f362 03c6 	bfi	r3, r2, #3, #4
   1e39c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1e3a0:	6167      	str	r7, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1e3a2:	7d7b      	ldrb	r3, [r7, #21]
   1e3a4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1e3a8:	7d7b      	ldrb	r3, [r7, #21]
   1e3aa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1e3ae:	f10b 0008 	add.w	r0, fp, #8
   1e3b2:	f7fb ff24 	bl	1a1fe <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1e3b6:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ipv6_ext_len = len;
   1e3ba:	2000      	movs	r0, #0
   1e3bc:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
	net_pkt_set_ipv6_ext_len(pkt, 0);

	setup_ipv6_header(pkt, extra_len, net_if_ipv6_get_hop_limit(iface),
   1e3c0:	b2b6      	uxth	r6, r6
	return iface->ipv6.hop_limit;
   1e3c2:	f897 3294 	ldrb.w	r3, [r7, #660]	; 0x294
   1e3c6:	f88d 8014 	strb.w	r8, [sp, #20]
   1e3ca:	f88d a015 	strb.w	sl, [sp, #21]
	struct net_buf *frag = pkt->frags;
   1e3ce:	68a1      	ldr	r1, [r4, #8]
	const u32_t unused = 0;
   1e3d0:	9006      	str	r0, [sp, #24]
	return pkt->frags->data;
   1e3d2:	688a      	ldr	r2, [r1, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1e3d4:	f04f 0e60 	mov.w	lr, #96	; 0x60
   1e3d8:	f882 e000 	strb.w	lr, [r2]
   1e3dc:	68a2      	ldr	r2, [r4, #8]
   1e3de:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1e3e0:	7050      	strb	r0, [r2, #1]
   1e3e2:	68a2      	ldr	r2, [r4, #8]
   1e3e4:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1e3e6:	7090      	strb	r0, [r2, #2]
   1e3e8:	70d0      	strb	r0, [r2, #3]
	sys_put_be16(NET_ICMPH_LEN + extra_len + NET_ICMPV6_UNUSED_LEN,
   1e3ea:	3608      	adds	r6, #8
   1e3ec:	b2b6      	uxth	r6, r6
   1e3ee:	68a2      	ldr	r2, [r4, #8]
   1e3f0:	6892      	ldr	r2, [r2, #8]
	dst[0] = val >> 8;
   1e3f2:	0a30      	lsrs	r0, r6, #8
   1e3f4:	7110      	strb	r0, [r2, #4]
	dst[1] = val;
   1e3f6:	7156      	strb	r6, [r2, #5]
   1e3f8:	68a2      	ldr	r2, [r4, #8]
   1e3fa:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1e3fc:	203a      	movs	r0, #58	; 0x3a
   1e3fe:	7190      	strb	r0, [r2, #6]
   1e400:	68a2      	ldr	r2, [r4, #8]
   1e402:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->hop_limit = hop_limit;
   1e404:	71d3      	strb	r3, [r2, #7]
	pkt->ip_hdr_len = len;
   1e406:	2228      	movs	r2, #40	; 0x28
   1e408:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt), &pos,
   1e40c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1e410:	9602      	str	r6, [sp, #8]
   1e412:	ab05      	add	r3, sp, #20
   1e414:	9301      	str	r3, [sp, #4]
   1e416:	f04f 0a01 	mov.w	sl, #1
   1e41a:	f8cd a000 	str.w	sl, [sp]
   1e41e:	f10d 0316 	add.w	r3, sp, #22
   1e422:	4620      	mov	r0, r4
   1e424:	f7fe fd99 	bl	1cf5a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(icmp_code),
   1e428:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1e42c:	9602      	str	r6, [sp, #8]
   1e42e:	f10d 0315 	add.w	r3, sp, #21
   1e432:	9301      	str	r3, [sp, #4]
   1e434:	f8cd a000 	str.w	sl, [sp]
   1e438:	f10d 0316 	add.w	r3, sp, #22
   1e43c:	4601      	mov	r1, r0
   1e43e:	4620      	mov	r0, r4
   1e440:	f7fe fd8b 	bl	1cf5a <net_pkt_write>
	net_pkt_write(pkt, frag, pos, &pos, 4, (u8_t *)&unused, PKT_WAIT_TIME);
   1e444:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1e448:	9602      	str	r6, [sp, #8]
   1e44a:	ab06      	add	r3, sp, #24
   1e44c:	9301      	str	r3, [sp, #4]
   1e44e:	2304      	movs	r3, #4
   1e450:	9300      	str	r3, [sp, #0]
   1e452:	f10d 0316 	add.w	r3, sp, #22
   1e456:	4601      	mov	r1, r0
   1e458:	4620      	mov	r0, r4
   1e45a:	f7fe fd7e 	bl	1cf5a <net_pkt_write>
			  type, code);

	/* Depending on error option, we store the param into the ICMP message.
	 */
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   1e45e:	f1b8 0f04 	cmp.w	r8, #4
   1e462:	d056      	beq.n	1e512 <net_icmpv6_send_error+0x20e>
	return pkt->frags->data;
   1e464:	68ab      	ldr	r3, [r5, #8]
   1e466:	689e      	ldr	r6, [r3, #8]
   1e468:	7e33      	ldrb	r3, [r6, #24]
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
			     sizeof(struct net_icmp_hdr));
	}

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(orig)->dst)) {
   1e46a:	2bff      	cmp	r3, #255	; 0xff
   1e46c:	d05f      	beq.n	1e52e <net_icmpv6_send_error+0x22a>
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1e46e:	af12      	add	r7, sp, #72	; 0x48
   1e470:	4633      	mov	r3, r6
   1e472:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1e476:	6859      	ldr	r1, [r3, #4]
   1e478:	689a      	ldr	r2, [r3, #8]
   1e47a:	68db      	ldr	r3, [r3, #12]
   1e47c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1e47e:	af06      	add	r7, sp, #24
   1e480:	ab12      	add	r3, sp, #72	; 0x48
   1e482:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1e484:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   1e488:	68a3      	ldr	r3, [r4, #8]
   1e48a:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e48e:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   1e492:	4633      	mov	r3, r6
   1e494:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1e498:	6859      	ldr	r1, [r3, #4]
   1e49a:	689a      	ldr	r2, [r3, #8]
   1e49c:	68db      	ldr	r3, [r3, #12]
   1e49e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1e4a2:	ae16      	add	r6, sp, #88	; 0x58
   1e4a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e4a6:	f8cc 0008 	str.w	r0, [ip, #8]
   1e4aa:	f8cc 100c 	str.w	r1, [ip, #12]
   1e4ae:	f8cc 2010 	str.w	r2, [ip, #16]
   1e4b2:	f8cc 3014 	str.w	r3, [ip, #20]
   1e4b6:	68a3      	ldr	r3, [r4, #8]
   1e4b8:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1e4bc:	ae1a      	add	r6, sp, #104	; 0x68
   1e4be:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1e4c2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1e4c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e4c8:	f8ce 0018 	str.w	r0, [lr, #24]
   1e4cc:	f8ce 101c 	str.w	r1, [lr, #28]
   1e4d0:	f8ce 2020 	str.w	r2, [lr, #32]
   1e4d4:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1e4d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1e4da:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1e4dc:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1e4e0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	net_pkt_ll_dst(pkt)->addr = net_pkt_ll_src(orig)->addr;
   1e4e4:	6a2b      	ldr	r3, [r5, #32]
   1e4e6:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = net_pkt_ll_src(orig)->len;
   1e4e8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1e4ec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	/* Clear and then set the chksum */
	frag = net_icmpv6_set_chksum(pkt, pkt->frags);
   1e4f0:	68a1      	ldr	r1, [r4, #8]
   1e4f2:	4620      	mov	r0, r4
   1e4f4:	f7ff fbf8 	bl	1dce8 <net_icmpv6_set_chksum>
			" from %s to %s", type, code, param,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1e4f8:	4620      	mov	r0, r4
   1e4fa:	f7fb ff3d 	bl	1a378 <net_send_data>
   1e4fe:	2800      	cmp	r0, #0
   1e500:	db4a      	blt.n	1e598 <net_icmpv6_send_error+0x294>
   1e502:	4a2d      	ldr	r2, [pc, #180]	; (1e5b8 <net_icmpv6_send_error+0x2b4>)
   1e504:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1e506:	3301      	adds	r3, #1
   1e508:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1e50a:	2500      	movs	r5, #0
   1e50c:	e04d      	b.n	1e5aa <net_icmpv6_send_error+0x2a6>
			extra_len = 0;
   1e50e:	2600      	movs	r6, #0
   1e510:	e730      	b.n	1e374 <net_icmpv6_send_error+0x70>
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
   1e512:	4620      	mov	r0, r4
   1e514:	f7fe fe0a 	bl	1d12c <net_pkt_icmp_data>
	sys_put_be16(val >> 16, dst);
   1e518:	ea4f 4319 	mov.w	r3, r9, lsr #16
	dst[0] = val >> 8;
   1e51c:	0a1a      	lsrs	r2, r3, #8
   1e51e:	7102      	strb	r2, [r0, #4]
	dst[1] = val;
   1e520:	7143      	strb	r3, [r0, #5]
	dst[0] = val >> 8;
   1e522:	f3c9 2307 	ubfx	r3, r9, #8, #8
   1e526:	7183      	strb	r3, [r0, #6]
	dst[1] = val;
   1e528:	f880 9007 	strb.w	r9, [r0, #7]
   1e52c:	e79a      	b.n	1e464 <net_icmpv6_send_error+0x160>
   1e52e:	68a3      	ldr	r3, [r4, #8]
   1e530:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1e534:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1e538:	4633      	mov	r3, r6
   1e53a:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1e53e:	6859      	ldr	r1, [r3, #4]
   1e540:	689a      	ldr	r2, [r3, #8]
   1e542:	68db      	ldr	r3, [r3, #12]
   1e544:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1e548:	ae0a      	add	r6, sp, #40	; 0x28
   1e54a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e54c:	f8cc 0018 	str.w	r0, [ip, #24]
   1e550:	f8cc 101c 	str.w	r1, [ip, #28]
   1e554:	f8cc 2020 	str.w	r2, [ip, #32]
   1e558:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1e55c:	68a3      	ldr	r3, [r4, #8]
   1e55e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1e562:	68ab      	ldr	r3, [r5, #8]
   1e564:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e566:	3118      	adds	r1, #24
   1e568:	4638      	mov	r0, r7
   1e56a:	f7fc fe6b 	bl	1b244 <net_if_ipv6_select_src_addr>
   1e56e:	4603      	mov	r3, r0
   1e570:	ae0e      	add	r6, sp, #56	; 0x38
   1e572:	6800      	ldr	r0, [r0, #0]
   1e574:	6859      	ldr	r1, [r3, #4]
   1e576:	689a      	ldr	r2, [r3, #8]
   1e578:	68db      	ldr	r3, [r3, #12]
   1e57a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1e57c:	ae0e      	add	r6, sp, #56	; 0x38
   1e57e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e580:	f8c8 0008 	str.w	r0, [r8, #8]
   1e584:	f8c8 100c 	str.w	r1, [r8, #12]
   1e588:	f8c8 2010 	str.w	r2, [r8, #16]
   1e58c:	f8c8 3014 	str.w	r3, [r8, #20]
   1e590:	e7a2      	b.n	1e4d8 <net_icmpv6_send_error+0x1d4>
		err = -ENOMEM;
   1e592:	f06f 050b 	mvn.w	r5, #11
   1e596:	e001      	b.n	1e59c <net_icmpv6_send_error+0x298>
	int err = -EIO;
   1e598:	f06f 0504 	mvn.w	r5, #4
	}

drop:
	net_pkt_unref(pkt);
   1e59c:	4620      	mov	r0, r4
   1e59e:	f7fe faec 	bl	1cb7a <net_pkt_unref>
	net_stats.icmp.drop++;
   1e5a2:	4a05      	ldr	r2, [pc, #20]	; (1e5b8 <net_icmpv6_send_error+0x2b4>)
   1e5a4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1e5a6:	3301      	adds	r3, #1
   1e5a8:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return err;
}
   1e5aa:	4628      	mov	r0, r5
   1e5ac:	b01f      	add	sp, #124	; 0x7c
   1e5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = -ENOMEM;
   1e5b2:	f06f 050b 	mvn.w	r5, #11
   1e5b6:	e7f4      	b.n	1e5a2 <net_icmpv6_send_error+0x29e>
   1e5b8:	20002950 	.word	0x20002950

0001e5bc <net_icmpv6_send_echo_request>:

int net_icmpv6_send_echo_request(struct net_if *iface,
				 struct in6_addr *dst,
				 u16_t identifier,
				 u16_t sequence)
{
   1e5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5c0:	b08d      	sub	sp, #52	; 0x34
   1e5c2:	4605      	mov	r5, r0
   1e5c4:	460e      	mov	r6, r1
   1e5c6:	4692      	mov	sl, r2
   1e5c8:	4699      	mov	r9, r3
	const struct in6_addr *src;
	struct net_pkt *pkt;

	src = net_if_ipv6_select_src_addr(iface, dst);
   1e5ca:	f7fc fe3b 	bl	1b244 <net_if_ipv6_select_src_addr>
   1e5ce:	4680      	mov	r8, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1e5d0:	686b      	ldr	r3, [r5, #4]
   1e5d2:	689b      	ldr	r3, [r3, #8]
   1e5d4:	4631      	mov	r1, r6
   1e5d6:	4628      	mov	r0, r5
   1e5d8:	4798      	blx	r3

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1e5da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e5de:	f7fe fa5b 	bl	1ca98 <net_pkt_get_reserve_tx>
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt, src, dst, iface, IPPROTO_ICMPV6);
   1e5e2:	273a      	movs	r7, #58	; 0x3a
   1e5e4:	9700      	str	r7, [sp, #0]
   1e5e6:	462b      	mov	r3, r5
   1e5e8:	4632      	mov	r2, r6
   1e5ea:	4641      	mov	r1, r8
   1e5ec:	f000 fcc1 	bl	1ef72 <net_ipv6_create_raw>
   1e5f0:	4604      	mov	r4, r0
	pkt->family = family;
   1e5f2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1e5f6:	220a      	movs	r2, #10
   1e5f8:	f362 03c6 	bfi	r3, r2, #3, #4
   1e5fc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	pkt->iface = iface;
   1e600:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1e602:	7d6b      	ldrb	r3, [r5, #21]
   1e604:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1e608:	7d6b      	ldrb	r3, [r5, #21]
   1e60a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
   1e60e:	aa0c      	add	r2, sp, #48	; 0x30
   1e610:	2380      	movs	r3, #128	; 0x80
   1e612:	f802 3d23 	strb.w	r3, [r2, #-35]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1e616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e61a:	2101      	movs	r1, #1
   1e61c:	f7fe fbe5 	bl	1cdea <net_pkt_append>
   1e620:	f04f 0b00 	mov.w	fp, #0
   1e624:	aa0c      	add	r2, sp, #48	; 0x30
   1e626:	f802 bd24 	strb.w	fp, [r2, #-36]!
   1e62a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e62e:	2101      	movs	r1, #1
   1e630:	4620      	mov	r0, r4
   1e632:	f7fe fbda 	bl	1cdea <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1e636:	ad0c      	add	r5, sp, #48	; 0x30
   1e638:	f825 bd22 	strh.w	fp, [r5, #-34]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1e63c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e640:	462a      	mov	r2, r5
   1e642:	2102      	movs	r1, #2
   1e644:	4620      	mov	r0, r4
   1e646:	f7fe fbd0 	bl	1cdea <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1e64a:	ea4f 221a 	mov.w	r2, sl, lsr #8
   1e64e:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
   1e652:	f8ad 200e 	strh.w	r2, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1e656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e65a:	462a      	mov	r2, r5
   1e65c:	2102      	movs	r1, #2
   1e65e:	4620      	mov	r0, r4
   1e660:	f7fe fbc3 	bl	1cdea <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1e664:	ea4f 2319 	mov.w	r3, r9, lsr #8
   1e668:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   1e66c:	f8ad 300e 	strh.w	r3, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1e670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e674:	462a      	mov	r2, r5
   1e676:	2102      	movs	r1, #2
   1e678:	4620      	mov	r0, r4
   1e67a:	f7fe fbb6 	bl	1cdea <net_pkt_append>
	return pkt->frags->data;
   1e67e:	68a3      	ldr	r3, [r4, #8]
   1e680:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_pkt_append_u8(pkt, 0);   /* code */
	net_pkt_append_be16(pkt, 0); /* checksum */
	net_pkt_append_be16(pkt, identifier);
	net_pkt_append_be16(pkt, sequence);

	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1e684:	ad04      	add	r5, sp, #16
   1e686:	f8d8 0000 	ldr.w	r0, [r8]
   1e68a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1e68e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1e692:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1e696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e698:	ad04      	add	r5, sp, #16
   1e69a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e69c:	f8cc 0008 	str.w	r0, [ip, #8]
   1e6a0:	f8cc 100c 	str.w	r1, [ip, #12]
   1e6a4:	f8cc 2010 	str.w	r2, [ip, #16]
   1e6a8:	f8cc 3014 	str.w	r3, [ip, #20]
   1e6ac:	68a3      	ldr	r3, [r4, #8]
   1e6ae:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1e6b2:	ad08      	add	r5, sp, #32
   1e6b4:	6830      	ldr	r0, [r6, #0]
   1e6b6:	6871      	ldr	r1, [r6, #4]
   1e6b8:	68b2      	ldr	r2, [r6, #8]
   1e6ba:	68f3      	ldr	r3, [r6, #12]
   1e6bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e6be:	ad08      	add	r5, sp, #32
   1e6c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e6c2:	f8ce 0018 	str.w	r0, [lr, #24]
   1e6c6:	f8ce 101c 	str.w	r1, [lr, #28]
   1e6ca:	f8ce 2020 	str.w	r2, [lr, #32]
   1e6ce:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24

	/* Clear and then set the chksum */
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1e6d2:	68a1      	ldr	r1, [r4, #8]
   1e6d4:	4620      	mov	r0, r4
   1e6d6:	f7ff fb07 	bl	1dce8 <net_icmpv6_set_chksum>

	if (net_ipv6_finalize_raw(pkt, IPPROTO_ICMPV6) < 0) {
   1e6da:	4639      	mov	r1, r7
   1e6dc:	4620      	mov	r0, r4
   1e6de:	f000 fce6 	bl	1f0ae <net_ipv6_finalize_raw>
   1e6e2:	4558      	cmp	r0, fp
   1e6e4:	db0c      	blt.n	1e700 <net_icmpv6_send_echo_request+0x144>
			" from %s to %s", NET_ICMPV6_ECHO_REQUEST,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1e6e6:	4620      	mov	r0, r4
   1e6e8:	f7fb fe46 	bl	1a378 <net_send_data>
   1e6ec:	4558      	cmp	r0, fp
   1e6ee:	db07      	blt.n	1e700 <net_icmpv6_send_echo_request+0x144>
	net_stats.icmp.sent++;
   1e6f0:	4a08      	ldr	r2, [pc, #32]	; (1e714 <net_icmpv6_send_echo_request+0x158>)
   1e6f2:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1e6f4:	3301      	adds	r3, #1
   1e6f6:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1e6f8:	4658      	mov	r0, fp
drop:
	net_pkt_unref(pkt);
	net_stats_update_icmp_drop();

	return -EIO;
}
   1e6fa:	b00d      	add	sp, #52	; 0x34
   1e6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_pkt_unref(pkt);
   1e700:	4620      	mov	r0, r4
   1e702:	f7fe fa3a 	bl	1cb7a <net_pkt_unref>
	net_stats.icmp.drop++;
   1e706:	4a03      	ldr	r2, [pc, #12]	; (1e714 <net_icmpv6_send_echo_request+0x158>)
   1e708:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1e70a:	3301      	adds	r3, #1
   1e70c:	63d3      	str	r3, [r2, #60]	; 0x3c
	return -EIO;
   1e70e:	f06f 0004 	mvn.w	r0, #4
   1e712:	e7f2      	b.n	1e6fa <net_icmpv6_send_echo_request+0x13e>
   1e714:	20002950 	.word	0x20002950

0001e718 <net_icmpv6_input>:

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  u8_t type, u8_t code)
{
   1e718:	b538      	push	{r3, r4, r5, lr}
	net_stats.icmp.recv++;
   1e71a:	4c12      	ldr	r4, [pc, #72]	; (1e764 <net_icmpv6_input+0x4c>)
   1e71c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e71e:	3301      	adds	r3, #1
   1e720:	6363      	str	r3, [r4, #52]	; 0x34
	return list->head;
   1e722:	4b11      	ldr	r3, [pc, #68]	; (1e768 <net_icmpv6_input+0x50>)
   1e724:	681b      	ldr	r3, [r3, #0]
   1e726:	e005      	b.n	1e734 <net_icmpv6_input+0x1c>
	struct net_icmpv6_handler *cb;

	net_stats_update_icmp_recv();

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1e728:	461d      	mov	r5, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1e72a:	b17b      	cbz	r3, 1e74c <net_icmpv6_input+0x34>
	return node->next;
   1e72c:	681c      	ldr	r4, [r3, #0]
   1e72e:	b18c      	cbz	r4, 1e754 <net_icmpv6_input+0x3c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1e730:	b175      	cbz	r5, 1e750 <net_icmpv6_input+0x38>
	return node->next;
   1e732:	681b      	ldr	r3, [r3, #0]
   1e734:	b183      	cbz	r3, 1e758 <net_icmpv6_input+0x40>
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   1e736:	791c      	ldrb	r4, [r3, #4]
   1e738:	428c      	cmp	r4, r1
   1e73a:	d1f5      	bne.n	1e728 <net_icmpv6_input+0x10>
   1e73c:	795c      	ldrb	r4, [r3, #5]
   1e73e:	4294      	cmp	r4, r2
   1e740:	d001      	beq.n	1e746 <net_icmpv6_input+0x2e>
   1e742:	2c00      	cmp	r4, #0
   1e744:	d1f0      	bne.n	1e728 <net_icmpv6_input+0x10>
			return cb->handler(pkt);
   1e746:	689b      	ldr	r3, [r3, #8]
   1e748:	4798      	blx	r3
   1e74a:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1e74c:	461c      	mov	r4, r3
   1e74e:	e7ee      	b.n	1e72e <net_icmpv6_input+0x16>
   1e750:	2300      	movs	r3, #0
   1e752:	e7ef      	b.n	1e734 <net_icmpv6_input+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1e754:	2300      	movs	r3, #0
   1e756:	e7ed      	b.n	1e734 <net_icmpv6_input+0x1c>
	net_stats.icmp.drop++;
   1e758:	4a02      	ldr	r2, [pc, #8]	; (1e764 <net_icmpv6_input+0x4c>)
   1e75a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1e75c:	3301      	adds	r3, #1
   1e75e:	63d3      	str	r3, [r2, #60]	; 0x3c
		}
	}

	net_stats_update_icmp_drop();

	return NET_DROP;
   1e760:	2002      	movs	r0, #2
}
   1e762:	bd38      	pop	{r3, r4, r5, pc}
   1e764:	20002950 	.word	0x20002950
   1e768:	20001d7c 	.word	0x20001d7c

0001e76c <net_icmpv6_init>:
	.code = 0,
	.handler = handle_echo_request,
};

void net_icmpv6_init(void)
{
   1e76c:	b508      	push	{r3, lr}
	net_icmpv6_register_handler(&echo_request_handler);
   1e76e:	4802      	ldr	r0, [pc, #8]	; (1e778 <net_icmpv6_init+0xc>)
   1e770:	f7ff fa8a 	bl	1dc88 <net_icmpv6_register_handler>
   1e774:	bd08      	pop	{r3, pc}
   1e776:	bf00      	nop
   1e778:	2000bd20 	.word	0x2000bd20

0001e77c <net_nbr_unref>:
void net_nbr_unref_debug(struct net_nbr *nbr, const char *caller, int line)
#define net_nbr_unref(nbr) net_nbr_unref_debug(nbr, __func__, __LINE__)
#else
void net_nbr_unref(struct net_nbr *nbr)
#endif
{
   1e77c:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref - 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref - 1);
#endif
	if (--nbr->ref) {
   1e77e:	7803      	ldrb	r3, [r0, #0]
   1e780:	3b01      	subs	r3, #1
   1e782:	b2db      	uxtb	r3, r3
   1e784:	7003      	strb	r3, [r0, #0]
   1e786:	b913      	cbnz	r3, 1e78e <net_nbr_unref+0x12>
		return;
	}

	if (nbr->remove) {
   1e788:	6903      	ldr	r3, [r0, #16]
   1e78a:	b103      	cbz	r3, 1e78e <net_nbr_unref+0x12>
		nbr->remove(nbr);
   1e78c:	4798      	blx	r3
   1e78e:	bd08      	pop	{r3, pc}

0001e790 <net_nbr_ref>:
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref + 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref + 1);
#endif
	nbr->ref++;
   1e790:	7803      	ldrb	r3, [r0, #0]
   1e792:	3301      	adds	r3, #1
   1e794:	7003      	strb	r3, [r0, #0]

	return nbr;
}
   1e796:	4770      	bx	lr

0001e798 <net_nbr_get>:

struct net_nbr *net_nbr_get(struct net_nbr_table *table)
{
	int i;

	for (i = 0; i < table->nbr_count; i++) {
   1e798:	2100      	movs	r1, #0
   1e79a:	8903      	ldrh	r3, [r0, #8]
   1e79c:	4299      	cmp	r1, r3
   1e79e:	da17      	bge.n	1e7d0 <net_nbr_get+0x38>
{
   1e7a0:	b510      	push	{r4, lr}
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   1e7a2:	6802      	ldr	r2, [r0, #0]
			  start->size + start->extra_data_size) * idx));
   1e7a4:	8853      	ldrh	r3, [r2, #2]
   1e7a6:	8894      	ldrh	r4, [r2, #4]
   1e7a8:	4423      	add	r3, r4
   1e7aa:	3314      	adds	r3, #20
   1e7ac:	fb03 f301 	mul.w	r3, r3, r1
	return (struct net_nbr *)((void *)start +
   1e7b0:	18d4      	adds	r4, r2, r3

		if (!nbr->ref) {
   1e7b2:	5cd3      	ldrb	r3, [r2, r3]
   1e7b4:	b12b      	cbz	r3, 1e7c2 <net_nbr_get+0x2a>
	for (i = 0; i < table->nbr_count; i++) {
   1e7b6:	3101      	adds	r1, #1
   1e7b8:	8903      	ldrh	r3, [r0, #8]
   1e7ba:	4299      	cmp	r1, r3
   1e7bc:	dbf1      	blt.n	1e7a2 <net_nbr_get+0xa>

			return net_nbr_ref(nbr);
		}
	}

	return NULL;
   1e7be:	2000      	movs	r0, #0
}
   1e7c0:	bd10      	pop	{r4, pc}
			nbr->data = nbr->__nbr;
   1e7c2:	f104 0314 	add.w	r3, r4, #20
   1e7c6:	60e3      	str	r3, [r4, #12]
			return net_nbr_ref(nbr);
   1e7c8:	4620      	mov	r0, r4
   1e7ca:	f7ff ffe1 	bl	1e790 <net_nbr_ref>
   1e7ce:	bd10      	pop	{r4, pc}
	return NULL;
   1e7d0:	2000      	movs	r0, #0
   1e7d2:	4770      	bx	lr

0001e7d4 <net_nbr_link>:
int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 struct net_linkaddr *lladdr)
{
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1e7d4:	7843      	ldrb	r3, [r0, #1]
   1e7d6:	2bff      	cmp	r3, #255	; 0xff
   1e7d8:	d158      	bne.n	1e88c <net_nbr_link+0xb8>
{
   1e7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e7de:	4690      	mov	r8, r2
   1e7e0:	460f      	mov	r7, r1
   1e7e2:	4606      	mov	r6, r0
   1e7e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1e7e8:	2400      	movs	r4, #0
   1e7ea:	e008      	b.n	1e7fe <net_nbr_link+0x2a>
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1e7ec:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1e7f0:	4b2a      	ldr	r3, [pc, #168]	; (1e89c <net_nbr_link+0xc8>)
   1e7f2:	4413      	add	r3, r2
   1e7f4:	7a1b      	ldrb	r3, [r3, #8]
   1e7f6:	b933      	cbnz	r3, 1e806 <net_nbr_link+0x32>
			avail = i;
   1e7f8:	4625      	mov	r5, r4
   1e7fa:	e004      	b.n	1e806 <net_nbr_link+0x32>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1e7fc:	3401      	adds	r4, #1
   1e7fe:	2c07      	cmp	r4, #7
   1e800:	dc1e      	bgt.n	1e840 <net_nbr_link+0x6c>
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1e802:	2d00      	cmp	r5, #0
   1e804:	dbf2      	blt.n	1e7ec <net_nbr_link+0x18>
		}

		if (net_neighbor_lladdr[i].ref &&
   1e806:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1e80a:	4b24      	ldr	r3, [pc, #144]	; (1e89c <net_nbr_link+0xc8>)
   1e80c:	4413      	add	r3, r2
   1e80e:	7a1b      	ldrb	r3, [r3, #8]
   1e810:	2b00      	cmp	r3, #0
   1e812:	d0f3      	beq.n	1e7fc <net_nbr_link+0x28>
		    !memcmp(lladdr->addr,
			    net_neighbor_lladdr[i].lladdr.addr,
   1e814:	4921      	ldr	r1, [pc, #132]	; (1e89c <net_nbr_link+0xc8>)
   1e816:	4411      	add	r1, r2
		    !memcmp(lladdr->addr,
   1e818:	f898 2004 	ldrb.w	r2, [r8, #4]
   1e81c:	3102      	adds	r1, #2
   1e81e:	f8d8 0000 	ldr.w	r0, [r8]
   1e822:	f00a fec5 	bl	295b0 <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   1e826:	4603      	mov	r3, r0
   1e828:	2800      	cmp	r0, #0
   1e82a:	d1e7      	bne.n	1e7fc <net_nbr_link+0x28>
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   1e82c:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
   1e830:	4a1a      	ldr	r2, [pc, #104]	; (1e89c <net_nbr_link+0xc8>)
   1e832:	440a      	add	r2, r1
   1e834:	7a11      	ldrb	r1, [r2, #8]
   1e836:	3101      	adds	r1, #1
   1e838:	7211      	strb	r1, [r2, #8]

			nbr->idx = i;
   1e83a:	7074      	strb	r4, [r6, #1]
			nbr->iface = iface;
   1e83c:	60b7      	str	r7, [r6, #8]

			return 0;
   1e83e:	e019      	b.n	1e874 <net_nbr_link+0xa0>
		}
	}

	if (avail < 0) {
   1e840:	2d00      	cmp	r5, #0
   1e842:	db27      	blt.n	1e894 <net_nbr_link+0xc0>
	}

	/* There was no existing entry in the lladdr cache,
	 * so allocate one for this lladdr.
	 */
	net_neighbor_lladdr[avail].ref++;
   1e844:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
   1e848:	4b14      	ldr	r3, [pc, #80]	; (1e89c <net_nbr_link+0xc8>)
   1e84a:	4413      	add	r3, r2
   1e84c:	7a1a      	ldrb	r2, [r3, #8]
   1e84e:	3201      	adds	r2, #1
   1e850:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   1e852:	7075      	strb	r5, [r6, #1]

	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   1e854:	f8d8 1000 	ldr.w	r1, [r8]
   1e858:	f898 2004 	ldrb.w	r2, [r8, #4]
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   1e85c:	b109      	cbz	r1, 1e862 <net_nbr_link+0x8e>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1e85e:	2a06      	cmp	r2, #6
   1e860:	d90b      	bls.n	1e87a <net_nbr_link+0xa6>
			 lladdr->len);
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   1e862:	f898 2004 	ldrb.w	r2, [r8, #4]
   1e866:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1e86a:	4b0c      	ldr	r3, [pc, #48]	; (1e89c <net_nbr_link+0xc8>)
   1e86c:	441d      	add	r5, r3
   1e86e:	706a      	strb	r2, [r5, #1]

	nbr->iface = iface;
   1e870:	60b7      	str	r7, [r6, #8]

	return 0;
   1e872:	2300      	movs	r3, #0
}
   1e874:	4618      	mov	r0, r3
   1e876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
   1e87a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   1e87e:	4807      	ldr	r0, [pc, #28]	; (1e89c <net_nbr_link+0xc8>)
   1e880:	4418      	add	r0, r3
   1e882:	7042      	strb	r2, [r0, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1e884:	3002      	adds	r0, #2
   1e886:	f7e1 fd1b 	bl	2c0 <memcpy>
   1e88a:	e7ea      	b.n	1e862 <net_nbr_link+0x8e>
		return -EALREADY;
   1e88c:	f06f 0377 	mvn.w	r3, #119	; 0x77
}
   1e890:	4618      	mov	r0, r3
   1e892:	4770      	bx	lr
		return -ENOENT;
   1e894:	f06f 0301 	mvn.w	r3, #1
   1e898:	e7ec      	b.n	1e874 <net_nbr_link+0xa0>
   1e89a:	bf00      	nop
   1e89c:	20001d84 	.word	0x20001d84

0001e8a0 <net_nbr_get_lladdr>:
{
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
			"idx %d >= max %d", idx,
			CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
   1e8a0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   1e8a4:	4b01      	ldr	r3, [pc, #4]	; (1e8ac <net_nbr_get_lladdr+0xc>)
   1e8a6:	4418      	add	r0, r3
   1e8a8:	4770      	bx	lr
   1e8aa:	bf00      	nop
   1e8ac:	20001d84 	.word	0x20001d84

0001e8b0 <ipv6_nbr_set_state>:
	bool is_router;
};

static inline struct net_ipv6_nbr_data *net_ipv6_nbr_data(struct net_nbr *nbr)
{
	return (struct net_ipv6_nbr_data *)nbr->data;
   1e8b0:	68c2      	ldr	r2, [r0, #12]
}

static void ipv6_nbr_set_state(struct net_nbr *nbr,
			       enum net_ipv6_nbr_state new_state)
{
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   1e8b2:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
   1e8b6:	428b      	cmp	r3, r1
   1e8b8:	d003      	beq.n	1e8c2 <ipv6_nbr_set_state+0x12>
   1e8ba:	2b05      	cmp	r3, #5
   1e8bc:	d001      	beq.n	1e8c2 <ipv6_nbr_set_state+0x12>

	NET_DBG("nbr %p %s -> %s", nbr,
		net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state),
		net_ipv6_nbr_state2str(new_state));

	net_ipv6_nbr_data(nbr)->state = new_state;
   1e8be:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
   1e8c2:	4770      	bx	lr

0001e8c4 <iface_cb>:
	net_nbr_cb_t cb;
	void *user_data;
};

static void iface_cb(struct net_if *iface, void *user_data)
{
   1e8c4:	b570      	push	{r4, r5, r6, lr}
   1e8c6:	4605      	mov	r5, r0
   1e8c8:	460e      	mov	r6, r1
	struct iface_cb_data *data = user_data;
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1e8ca:	2400      	movs	r4, #0
   1e8cc:	e000      	b.n	1e8d0 <iface_cb+0xc>
   1e8ce:	3401      	adds	r4, #1
   1e8d0:	2c07      	cmp	r4, #7
   1e8d2:	dc0c      	bgt.n	1e8ee <iface_cb+0x2a>
	return &net_neighbor_pool[idx].nbr;
   1e8d4:	4a06      	ldr	r2, [pc, #24]	; (1e8f0 <iface_cb+0x2c>)
   1e8d6:	01e3      	lsls	r3, r4, #7
   1e8d8:	18d0      	adds	r0, r2, r3
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref || nbr->iface != iface) {
   1e8da:	5cd3      	ldrb	r3, [r2, r3]
   1e8dc:	2b00      	cmp	r3, #0
   1e8de:	d0f6      	beq.n	1e8ce <iface_cb+0xa>
   1e8e0:	6883      	ldr	r3, [r0, #8]
   1e8e2:	42ab      	cmp	r3, r5
   1e8e4:	d1f3      	bne.n	1e8ce <iface_cb+0xa>
			continue;
		}

		data->cb(nbr, data->user_data);
   1e8e6:	6833      	ldr	r3, [r6, #0]
   1e8e8:	6871      	ldr	r1, [r6, #4]
   1e8ea:	4798      	blx	r3
   1e8ec:	e7ef      	b.n	1e8ce <iface_cb+0xa>
	}
}
   1e8ee:	bd70      	pop	{r4, r5, r6, pc}
   1e8f0:	2000bd50 	.word	0x2000bd50

0001e8f4 <iface_cb>:

	return "<unknown type>";
}

static void iface_cb(struct net_if *iface, void *user_data)
{
   1e8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e8f6:	b085      	sub	sp, #20
   1e8f8:	4605      	mov	r5, r0
	const char *extra;
	int i, count;

	ARG_UNUSED(user_data);

	printk("\nInterface %p (%s)\n", iface, iface2str(iface, &extra));
   1e8fa:	a903      	add	r1, sp, #12
   1e8fc:	f004 ff0a 	bl	23714 <iface2str>
   1e900:	4602      	mov	r2, r0
   1e902:	4629      	mov	r1, r5
   1e904:	4885      	ldr	r0, [pc, #532]	; (1eb1c <iface_cb+0x228>)
   1e906:	f7e4 faeb 	bl	2ee0 <printk>
	printk("=======================%s\n", extra);
   1e90a:	9903      	ldr	r1, [sp, #12]
   1e90c:	4884      	ldr	r0, [pc, #528]	; (1eb20 <iface_cb+0x22c>)
   1e90e:	f7e4 fae7 	bl	2ee0 <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e912:	f3bf 8f5b 	dmb	ish
   1e916:	68eb      	ldr	r3, [r5, #12]
   1e918:	f3bf 8f5b 	dmb	ish

	if (!net_if_is_up(iface)) {
   1e91c:	f013 0f01 	tst.w	r3, #1
   1e920:	d014      	beq.n	1e94c <iface_cb+0x58>
#if NET_LOG_ENABLED > 0
static inline char *net_sprint_ll_addr(const u8_t *ll, u8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   1e922:	2318      	movs	r3, #24
   1e924:	4a7f      	ldr	r2, [pc, #508]	; (1eb24 <iface_cb+0x230>)
   1e926:	7d29      	ldrb	r1, [r5, #20]
   1e928:	6928      	ldr	r0, [r5, #16]
   1e92a:	f7fe fd45 	bl	1d3b8 <net_sprint_ll_addr_buf>
		printk("Interface is down.\n");
		return;
	}

	printk("Link addr : %s\n", net_sprint_ll_addr(iface->link_addr.addr,
   1e92e:	4601      	mov	r1, r0
   1e930:	487d      	ldr	r0, [pc, #500]	; (1eb28 <iface_cb+0x234>)
   1e932:	f7e4 fad5 	bl	2ee0 <printk>
						      iface->link_addr.len));
	printk("MTU       : %d\n", iface->mtu);
   1e936:	8d29      	ldrh	r1, [r5, #40]	; 0x28
   1e938:	487c      	ldr	r0, [pc, #496]	; (1eb2c <iface_cb+0x238>)
   1e93a:	f7e4 fad1 	bl	2ee0 <printk>

#if defined(CONFIG_NET_IPV6)
	count = 0;

	printk("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
   1e93e:	2103      	movs	r1, #3
   1e940:	487b      	ldr	r0, [pc, #492]	; (1eb30 <iface_cb+0x23c>)
   1e942:	f7e4 facd 	bl	2ee0 <printk>
	count = 0;
   1e946:	2700      	movs	r7, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1e948:	463c      	mov	r4, r7
   1e94a:	e02e      	b.n	1e9aa <iface_cb+0xb6>
		printk("Interface is down.\n");
   1e94c:	4879      	ldr	r0, [pc, #484]	; (1eb34 <iface_cb+0x240>)
   1e94e:	f7e4 fac7 	bl	2ee0 <printk>
   1e952:	e0db      	b.n	1eb0c <iface_cb+0x218>
		return "<unknown type>";
   1e954:	4a78      	ldr	r2, [pc, #480]	; (1eb38 <iface_cb+0x244>)
   1e956:	e006      	b.n	1e966 <iface_cb+0x72>
		return "DHCP";
   1e958:	4a78      	ldr	r2, [pc, #480]	; (1eb3c <iface_cb+0x248>)
   1e95a:	e004      	b.n	1e966 <iface_cb+0x72>
		return "manual";
   1e95c:	4a78      	ldr	r2, [pc, #480]	; (1eb40 <iface_cb+0x24c>)
   1e95e:	e002      	b.n	1e966 <iface_cb+0x72>
	return "<invalid type>";
   1e960:	4a78      	ldr	r2, [pc, #480]	; (1eb44 <iface_cb+0x250>)
   1e962:	e000      	b.n	1e966 <iface_cb+0x72>
		return "autoconf";
   1e964:	4a78      	ldr	r2, [pc, #480]	; (1eb48 <iface_cb+0x254>)

		if (!unicast->is_used) {
			continue;
		}

		printk("\t%s %s %s%s\n",
   1e966:	236c      	movs	r3, #108	; 0x6c
   1e968:	fb03 5304 	mla	r3, r3, r4, r5
   1e96c:	f993 3091 	ldrsb.w	r3, [r3, #145]	; 0x91
	switch (addr_state) {
   1e970:	3301      	adds	r3, #1
   1e972:	2b03      	cmp	r3, #3
   1e974:	d809      	bhi.n	1e98a <iface_cb+0x96>
   1e976:	e8df f003 	tbb	[pc, r3]
   1e97a:	0a02      	.short	0x0a02
   1e97c:	0604      	.short	0x0604
		return "<unknown state>";
   1e97e:	4b73      	ldr	r3, [pc, #460]	; (1eb4c <iface_cb+0x258>)
   1e980:	e006      	b.n	1e990 <iface_cb+0x9c>
		return "preferred";
   1e982:	4b73      	ldr	r3, [pc, #460]	; (1eb50 <iface_cb+0x25c>)
   1e984:	e004      	b.n	1e990 <iface_cb+0x9c>
		return "deprecated";
   1e986:	4b73      	ldr	r3, [pc, #460]	; (1eb54 <iface_cb+0x260>)
   1e988:	e002      	b.n	1e990 <iface_cb+0x9c>
	return "<invalid state>";
   1e98a:	4b73      	ldr	r3, [pc, #460]	; (1eb58 <iface_cb+0x264>)
   1e98c:	e000      	b.n	1e990 <iface_cb+0x9c>
		return "tentative";
   1e98e:	4b73      	ldr	r3, [pc, #460]	; (1eb5c <iface_cb+0x268>)
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
		       addrtype2str(unicast->addr_type),
		       addrstate2str(unicast->addr_state),
		       unicast->is_infinite ? " infinite" : "");
   1e990:	266c      	movs	r6, #108	; 0x6c
   1e992:	fb06 5604 	mla	r6, r6, r4, r5
   1e996:	f896 0093 	ldrb.w	r0, [r6, #147]	; 0x93
		printk("\t%s %s %s%s\n",
   1e99a:	b368      	cbz	r0, 1e9f8 <iface_cb+0x104>
   1e99c:	4870      	ldr	r0, [pc, #448]	; (1eb60 <iface_cb+0x26c>)
   1e99e:	9000      	str	r0, [sp, #0]
   1e9a0:	4870      	ldr	r0, [pc, #448]	; (1eb64 <iface_cb+0x270>)
   1e9a2:	f7e4 fa9d 	bl	2ee0 <printk>
		count++;
   1e9a6:	3701      	adds	r7, #1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1e9a8:	3401      	adds	r4, #1
   1e9aa:	2c02      	cmp	r4, #2
   1e9ac:	dc26      	bgt.n	1e9fc <iface_cb+0x108>
		if (!unicast->is_used) {
   1e9ae:	236c      	movs	r3, #108	; 0x6c
   1e9b0:	fb03 5304 	mla	r3, r3, r4, r5
   1e9b4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1e9b8:	2b00      	cmp	r3, #0
   1e9ba:	d0f5      	beq.n	1e9a8 <iface_cb+0xb4>
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
   1e9bc:	266c      	movs	r6, #108	; 0x6c
   1e9be:	fb06 f604 	mul.w	r6, r6, r4
   1e9c2:	f106 0120 	add.w	r1, r6, #32
   1e9c6:	4429      	add	r1, r5
static inline char *net_sprint_ipv6_addr(const struct in6_addr *addr)
{
#if defined(CONFIG_NET_IPV6)
	static char buf[NET_IPV6_ADDR_LEN];

	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   1e9c8:	2328      	movs	r3, #40	; 0x28
   1e9ca:	4a67      	ldr	r2, [pc, #412]	; (1eb68 <iface_cb+0x274>)
   1e9cc:	3110      	adds	r1, #16
   1e9ce:	200a      	movs	r0, #10
   1e9d0:	f7fe fd1c 	bl	1d40c <net_addr_ntop>
   1e9d4:	4601      	mov	r1, r0
		printk("\t%s %s %s%s\n",
   1e9d6:	442e      	add	r6, r5
   1e9d8:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
	switch (addr_type) {
   1e9dc:	2b03      	cmp	r3, #3
   1e9de:	d8bf      	bhi.n	1e960 <iface_cb+0x6c>
   1e9e0:	a201      	add	r2, pc, #4	; (adr r2, 1e9e8 <iface_cb+0xf4>)
   1e9e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e9e6:	bf00      	nop
   1e9e8:	0001e955 	.word	0x0001e955
   1e9ec:	0001e965 	.word	0x0001e965
   1e9f0:	0001e959 	.word	0x0001e959
   1e9f4:	0001e95d 	.word	0x0001e95d
		printk("\t%s %s %s%s\n",
   1e9f8:	485c      	ldr	r0, [pc, #368]	; (1eb6c <iface_cb+0x278>)
   1e9fa:	e7d0      	b.n	1e99e <iface_cb+0xaa>
	}

	if (count == 0) {
   1e9fc:	b137      	cbz	r7, 1ea0c <iface_cb+0x118>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 multicast addresses (max %d):\n", NET_IF_MAX_IPV6_MADDR);
   1e9fe:	2105      	movs	r1, #5
   1ea00:	485b      	ldr	r0, [pc, #364]	; (1eb70 <iface_cb+0x27c>)
   1ea02:	f7e4 fa6d 	bl	2ee0 <printk>
	count = 0;
   1ea06:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ea08:	4634      	mov	r4, r6
   1ea0a:	e004      	b.n	1ea16 <iface_cb+0x122>
		printk("\t<none>\n");
   1ea0c:	4859      	ldr	r0, [pc, #356]	; (1eb74 <iface_cb+0x280>)
   1ea0e:	f7e4 fa67 	bl	2ee0 <printk>
   1ea12:	e7f4      	b.n	1e9fe <iface_cb+0x10a>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ea14:	3401      	adds	r4, #1
   1ea16:	2c04      	cmp	r4, #4
   1ea18:	dc18      	bgt.n	1ea4c <iface_cb+0x158>
		mcast = &iface->ipv6.mcast[i];

		if (!mcast->is_used) {
   1ea1a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ea1e:	00d3      	lsls	r3, r2, #3
   1ea20:	461a      	mov	r2, r3
   1ea22:	442b      	add	r3, r5
   1ea24:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1ea28:	f013 0f01 	tst.w	r3, #1
   1ea2c:	d0f2      	beq.n	1ea14 <iface_cb+0x120>
			continue;
		}

		printk("\t%s\n",
		       net_sprint_ipv6_addr(&mcast->address.in6_addr));
   1ea2e:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1ea32:	4429      	add	r1, r5
   1ea34:	2328      	movs	r3, #40	; 0x28
   1ea36:	4a4c      	ldr	r2, [pc, #304]	; (1eb68 <iface_cb+0x274>)
   1ea38:	3118      	adds	r1, #24
   1ea3a:	200a      	movs	r0, #10
   1ea3c:	f7fe fce6 	bl	1d40c <net_addr_ntop>
		printk("\t%s\n",
   1ea40:	4601      	mov	r1, r0
   1ea42:	484d      	ldr	r0, [pc, #308]	; (1eb78 <iface_cb+0x284>)
   1ea44:	f7e4 fa4c 	bl	2ee0 <printk>

		count++;
   1ea48:	3601      	adds	r6, #1
   1ea4a:	e7e3      	b.n	1ea14 <iface_cb+0x120>
	}

	if (count == 0) {
   1ea4c:	b136      	cbz	r6, 1ea5c <iface_cb+0x168>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
   1ea4e:	2102      	movs	r1, #2
   1ea50:	484a      	ldr	r0, [pc, #296]	; (1eb7c <iface_cb+0x288>)
   1ea52:	f7e4 fa45 	bl	2ee0 <printk>
	count = 0;
   1ea56:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1ea58:	4634      	mov	r4, r6
   1ea5a:	e009      	b.n	1ea70 <iface_cb+0x17c>
		printk("\t<none>\n");
   1ea5c:	4845      	ldr	r0, [pc, #276]	; (1eb74 <iface_cb+0x280>)
   1ea5e:	f7e4 fa3f 	bl	2ee0 <printk>
   1ea62:	e7f4      	b.n	1ea4e <iface_cb+0x15a>

		if (!prefix->is_used) {
			continue;
		}

		printk("\t%s/%d%s\n",
   1ea64:	4b41      	ldr	r3, [pc, #260]	; (1eb6c <iface_cb+0x278>)
   1ea66:	4846      	ldr	r0, [pc, #280]	; (1eb80 <iface_cb+0x28c>)
   1ea68:	f7e4 fa3a 	bl	2ee0 <printk>
		       net_sprint_ipv6_addr(&prefix->prefix),
		       prefix->len,
		       prefix->is_infinite ? " infinite" : "");

		count++;
   1ea6c:	3601      	adds	r6, #1
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1ea6e:	3401      	adds	r4, #1
   1ea70:	2c01      	cmp	r4, #1
   1ea72:	dc1e      	bgt.n	1eab2 <iface_cb+0x1be>
		if (!prefix->is_used) {
   1ea74:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1ea78:	0093      	lsls	r3, r2, #2
   1ea7a:	461a      	mov	r2, r3
   1ea7c:	442b      	add	r3, r5
   1ea7e:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
   1ea82:	2b00      	cmp	r3, #0
   1ea84:	d0f3      	beq.n	1ea6e <iface_cb+0x17a>
		       net_sprint_ipv6_addr(&prefix->prefix),
   1ea86:	0127      	lsls	r7, r4, #4
   1ea88:	f502 7100 	add.w	r1, r2, #512	; 0x200
   1ea8c:	4429      	add	r1, r5
   1ea8e:	2328      	movs	r3, #40	; 0x28
   1ea90:	4a35      	ldr	r2, [pc, #212]	; (1eb68 <iface_cb+0x274>)
   1ea92:	3110      	adds	r1, #16
   1ea94:	200a      	movs	r0, #10
   1ea96:	f7fe fcb9 	bl	1d40c <net_addr_ntop>
   1ea9a:	4601      	mov	r1, r0
		       prefix->len,
   1ea9c:	1b3f      	subs	r7, r7, r4
   1ea9e:	00bb      	lsls	r3, r7, #2
   1eaa0:	442b      	add	r3, r5
   1eaa2:	f893 2220 	ldrb.w	r2, [r3, #544]	; 0x220
		       prefix->is_infinite ? " infinite" : "");
   1eaa6:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
		printk("\t%s/%d%s\n",
   1eaaa:	2b00      	cmp	r3, #0
   1eaac:	d0da      	beq.n	1ea64 <iface_cb+0x170>
   1eaae:	4b2c      	ldr	r3, [pc, #176]	; (1eb60 <iface_cb+0x26c>)
   1eab0:	e7d9      	b.n	1ea66 <iface_cb+0x172>
	}

	if (count == 0) {
   1eab2:	b36e      	cbz	r6, 1eb10 <iface_cb+0x21c>
		printk("\t<none>\n");
	}

	router = net_if_ipv6_router_find_default(iface, NULL);
   1eab4:	2100      	movs	r1, #0
   1eab6:	4628      	mov	r0, r5
   1eab8:	f7fc fade 	bl	1b078 <net_if_ipv6_router_find_default>
	if (router) {
   1eabc:	4604      	mov	r4, r0
   1eabe:	b188      	cbz	r0, 1eae4 <iface_cb+0x1f0>
		printk("IPv6 default router :\n");
   1eac0:	4830      	ldr	r0, [pc, #192]	; (1eb84 <iface_cb+0x290>)
   1eac2:	f7e4 fa0d 	bl	2ee0 <printk>
   1eac6:	2328      	movs	r3, #40	; 0x28
   1eac8:	4a27      	ldr	r2, [pc, #156]	; (1eb68 <iface_cb+0x274>)
   1eaca:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   1eace:	200a      	movs	r0, #10
   1ead0:	f7fe fc9c 	bl	1d40c <net_addr_ntop>
   1ead4:	4601      	mov	r1, r0
		printk("\t%s%s\n",
		       net_sprint_ipv6_addr(&router->address.in6_addr),
		       router->is_infinite ? " infinite" : "");
   1ead6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		printk("\t%s%s\n",
   1eada:	b1eb      	cbz	r3, 1eb18 <iface_cb+0x224>
   1eadc:	4a20      	ldr	r2, [pc, #128]	; (1eb60 <iface_cb+0x26c>)
   1eade:	482a      	ldr	r0, [pc, #168]	; (1eb88 <iface_cb+0x294>)
   1eae0:	f7e4 f9fe 	bl	2ee0 <printk>
	}

	printk("IPv6 hop limit           : %d\n", iface->ipv6.hop_limit);
   1eae4:	f895 1294 	ldrb.w	r1, [r5, #660]	; 0x294
   1eae8:	4828      	ldr	r0, [pc, #160]	; (1eb8c <iface_cb+0x298>)
   1eaea:	f7e4 f9f9 	bl	2ee0 <printk>
	printk("IPv6 base reachable time : %d\n",
   1eaee:	f8d5 1288 	ldr.w	r1, [r5, #648]	; 0x288
   1eaf2:	4827      	ldr	r0, [pc, #156]	; (1eb90 <iface_cb+0x29c>)
   1eaf4:	f7e4 f9f4 	bl	2ee0 <printk>
	       iface->ipv6.base_reachable_time);
	printk("IPv6 reachable time      : %d\n", iface->ipv6.reachable_time);
   1eaf8:	f8d5 128c 	ldr.w	r1, [r5, #652]	; 0x28c
   1eafc:	4825      	ldr	r0, [pc, #148]	; (1eb94 <iface_cb+0x2a0>)
   1eafe:	f7e4 f9ef 	bl	2ee0 <printk>
	printk("IPv6 retransmit timer    : %d\n", iface->ipv6.retrans_timer);
   1eb02:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
   1eb06:	4824      	ldr	r0, [pc, #144]	; (1eb98 <iface_cb+0x2a4>)
   1eb08:	f7e4 f9ea 	bl	2ee0 <printk>
	       net_sprint_ipv4_addr(&iface->dhcpv4.requested_ip));
	printk("DHCPv4 state      : %s\n",
	       net_dhcpv4_state_name(iface->dhcpv4.state));
	printk("DHCPv4 attempts   : %d\n", iface->dhcpv4.attempts);
#endif /* CONFIG_NET_DHCPV4 */
}
   1eb0c:	b005      	add	sp, #20
   1eb0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("\t<none>\n");
   1eb10:	4818      	ldr	r0, [pc, #96]	; (1eb74 <iface_cb+0x280>)
   1eb12:	f7e4 f9e5 	bl	2ee0 <printk>
   1eb16:	e7cd      	b.n	1eab4 <iface_cb+0x1c0>
		printk("\t%s%s\n",
   1eb18:	4a14      	ldr	r2, [pc, #80]	; (1eb6c <iface_cb+0x278>)
   1eb1a:	e7e0      	b.n	1eade <iface_cb+0x1ea>
   1eb1c:	000300c8 	.word	0x000300c8
   1eb20:	00030278 	.word	0x00030278
   1eb24:	20002310 	.word	0x20002310
   1eb28:	000300f0 	.word	0x000300f0
   1eb2c:	00030100 	.word	0x00030100
   1eb30:	00030110 	.word	0x00030110
   1eb34:	000300dc 	.word	0x000300dc
   1eb38:	00030030 	.word	0x00030030
   1eb3c:	00030068 	.word	0x00030068
   1eb40:	00030070 	.word	0x00030070
   1eb44:	00030078 	.word	0x00030078
   1eb48:	0003005c 	.word	0x0003005c
   1eb4c:	00030088 	.word	0x00030088
   1eb50:	000300a4 	.word	0x000300a4
   1eb54:	000300b0 	.word	0x000300b0
   1eb58:	0002ff7c 	.word	0x0002ff7c
   1eb5c:	00030098 	.word	0x00030098
   1eb60:	000300bc 	.word	0x000300bc
   1eb64:	00030134 	.word	0x00030134
   1eb68:	20002328 	.word	0x20002328
   1eb6c:	0002f754 	.word	0x0002f754
   1eb70:	00030150 	.word	0x00030150
   1eb74:	00030144 	.word	0x00030144
   1eb78:	00030174 	.word	0x00030174
   1eb7c:	0003017c 	.word	0x0003017c
   1eb80:	00030198 	.word	0x00030198
   1eb84:	000301a4 	.word	0x000301a4
   1eb88:	000301bc 	.word	0x000301bc
   1eb8c:	000301c4 	.word	0x000301c4
   1eb90:	000301e4 	.word	0x000301e4
   1eb94:	00030204 	.word	0x00030204
   1eb98:	00030224 	.word	0x00030224

0001eb9c <net_neighbor_data_remove>:
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
				lladdr, is_router, state);
}

void net_neighbor_data_remove(struct net_nbr *nbr)
{
   1eb9c:	4770      	bx	lr

0001eb9e <net_neighbor_table_clear>:

	return;
}

void net_neighbor_table_clear(struct net_nbr_table *table)
{
   1eb9e:	4770      	bx	lr

0001eba0 <nbr_lookup>:
{
   1eba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eba2:	460e      	mov	r6, r1
   1eba4:	4617      	mov	r7, r2
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1eba6:	2400      	movs	r4, #0
   1eba8:	e000      	b.n	1ebac <nbr_lookup+0xc>
   1ebaa:	3401      	adds	r4, #1
   1ebac:	2c07      	cmp	r4, #7
   1ebae:	dc11      	bgt.n	1ebd4 <nbr_lookup+0x34>
	return &net_neighbor_pool[idx].nbr;
   1ebb0:	4a0a      	ldr	r2, [pc, #40]	; (1ebdc <nbr_lookup+0x3c>)
   1ebb2:	01e3      	lsls	r3, r4, #7
   1ebb4:	18d5      	adds	r5, r2, r3
		if (!nbr->ref) {
   1ebb6:	5cd3      	ldrb	r3, [r2, r3]
   1ebb8:	2b00      	cmp	r3, #0
   1ebba:	d0f6      	beq.n	1ebaa <nbr_lookup+0xa>
		if (nbr->iface == iface &&
   1ebbc:	68ab      	ldr	r3, [r5, #8]
   1ebbe:	42b3      	cmp	r3, r6
   1ebc0:	d1f3      	bne.n	1ebaa <nbr_lookup+0xa>
   1ebc2:	68e8      	ldr	r0, [r5, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1ebc4:	2210      	movs	r2, #16
   1ebc6:	4639      	mov	r1, r7
   1ebc8:	3004      	adds	r0, #4
   1ebca:	f00a fcf1 	bl	295b0 <memcmp>
   1ebce:	2800      	cmp	r0, #0
   1ebd0:	d1eb      	bne.n	1ebaa <nbr_lookup+0xa>
   1ebd2:	e000      	b.n	1ebd6 <nbr_lookup+0x36>
	return NULL;
   1ebd4:	2500      	movs	r5, #0
}
   1ebd6:	4628      	mov	r0, r5
   1ebd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ebda:	bf00      	nop
   1ebdc:	2000bd50 	.word	0x2000bd50

0001ebe0 <nbr_clear_ns_pending>:
{
   1ebe0:	b510      	push	{r4, lr}
   1ebe2:	4604      	mov	r4, r0
	k_delayed_work_cancel(&data->send_ns);
   1ebe4:	303c      	adds	r0, #60	; 0x3c
   1ebe6:	f00a fb93 	bl	29310 <k_delayed_work_cancel>
	if (data->pending) {
   1ebea:	6820      	ldr	r0, [r4, #0]
   1ebec:	b118      	cbz	r0, 1ebf6 <nbr_clear_ns_pending+0x16>
		net_pkt_unref(data->pending);
   1ebee:	f7fd ffc4 	bl	1cb7a <net_pkt_unref>
		data->pending = NULL;
   1ebf2:	2300      	movs	r3, #0
   1ebf4:	6023      	str	r3, [r4, #0]
   1ebf6:	bd10      	pop	{r4, pc}

0001ebf8 <ns_reply_timeout>:
{
   1ebf8:	b538      	push	{r3, r4, r5, lr}
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   1ebfa:	f1a0 013c 	sub.w	r1, r0, #60	; 0x3c
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1ebfe:	2300      	movs	r3, #0
   1ec00:	2b07      	cmp	r3, #7
   1ec02:	dc07      	bgt.n	1ec14 <ns_reply_timeout+0x1c>
	return &net_neighbor_pool[idx].nbr;
   1ec04:	4c0d      	ldr	r4, [pc, #52]	; (1ec3c <ns_reply_timeout+0x44>)
   1ec06:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   1ec0a:	68e2      	ldr	r2, [r4, #12]
   1ec0c:	4291      	cmp	r1, r2
   1ec0e:	d002      	beq.n	1ec16 <ns_reply_timeout+0x1e>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1ec10:	3301      	adds	r3, #1
   1ec12:	e7f5      	b.n	1ec00 <ns_reply_timeout+0x8>
	return NULL;
   1ec14:	2400      	movs	r4, #0
	if (!nbr) {
   1ec16:	b184      	cbz	r4, 1ec3a <ns_reply_timeout+0x42>
	if (!data->pending) {
   1ec18:	f850 3c3c 	ldr.w	r3, [r0, #-60]
   1ec1c:	b16b      	cbz	r3, 1ec3a <ns_reply_timeout+0x42>
   1ec1e:	4605      	mov	r5, r0
	net_pkt_unref(data->pending);
   1ec20:	4618      	mov	r0, r3
   1ec22:	f7fd ffaa 	bl	1cb7a <net_pkt_unref>
	net_pkt_unref(data->pending);
   1ec26:	f855 0c3c 	ldr.w	r0, [r5, #-60]
   1ec2a:	f7fd ffa6 	bl	1cb7a <net_pkt_unref>
	data->pending = NULL;
   1ec2e:	2300      	movs	r3, #0
   1ec30:	f845 3c3c 	str.w	r3, [r5, #-60]
	net_nbr_unref(nbr);
   1ec34:	4620      	mov	r0, r4
   1ec36:	f7ff fda1 	bl	1e77c <net_nbr_unref>
   1ec3a:	bd38      	pop	{r3, r4, r5, pc}
   1ec3c:	2000bd50 	.word	0x2000bd50

0001ec40 <nbr_init>:
{
   1ec40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec44:	b084      	sub	sp, #16
   1ec46:	4604      	mov	r4, r0
   1ec48:	4616      	mov	r6, r2
   1ec4a:	4698      	mov	r8, r3
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1ec4c:	23ff      	movs	r3, #255	; 0xff
   1ec4e:	7043      	strb	r3, [r0, #1]
	nbr->iface = iface;
   1ec50:	6081      	str	r1, [r0, #8]
   1ec52:	68c7      	ldr	r7, [r0, #12]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   1ec54:	466d      	mov	r5, sp
   1ec56:	6810      	ldr	r0, [r2, #0]
   1ec58:	6851      	ldr	r1, [r2, #4]
   1ec5a:	6892      	ldr	r2, [r2, #8]
   1ec5c:	68f3      	ldr	r3, [r6, #12]
   1ec5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ec60:	466d      	mov	r5, sp
   1ec62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ec64:	6078      	str	r0, [r7, #4]
   1ec66:	60b9      	str	r1, [r7, #8]
   1ec68:	60fa      	str	r2, [r7, #12]
   1ec6a:	613b      	str	r3, [r7, #16]
	ipv6_nbr_set_state(nbr, state);
   1ec6c:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
   1ec70:	4620      	mov	r0, r4
   1ec72:	f7ff fe1d 	bl	1e8b0 <ipv6_nbr_set_state>
   1ec76:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   1ec78:	f883 8069 	strb.w	r8, [r3, #105]	; 0x69
   1ec7c:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->pending = NULL;
   1ec7e:	2200      	movs	r2, #0
   1ec80:	601a      	str	r2, [r3, #0]
   1ec82:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->reachable,
   1ec84:	4905      	ldr	r1, [pc, #20]	; (1ec9c <nbr_init+0x5c>)
   1ec86:	3014      	adds	r0, #20
   1ec88:	f00a fb24 	bl	292d4 <k_delayed_work_init>
   1ec8c:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->send_ns,
   1ec8e:	4904      	ldr	r1, [pc, #16]	; (1eca0 <nbr_init+0x60>)
   1ec90:	303c      	adds	r0, #60	; 0x3c
   1ec92:	f00a fb1f 	bl	292d4 <k_delayed_work_init>
}
   1ec96:	b004      	add	sp, #16
   1ec98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ec9c:	000207cd 	.word	0x000207cd
   1eca0:	0001ebf9 	.word	0x0001ebf9

0001eca4 <nbr_new>:
{
   1eca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eca6:	b083      	sub	sp, #12
   1eca8:	4605      	mov	r5, r0
   1ecaa:	460e      	mov	r6, r1
   1ecac:	461f      	mov	r7, r3
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   1ecae:	4807      	ldr	r0, [pc, #28]	; (1eccc <nbr_new+0x28>)
   1ecb0:	f7ff fd72 	bl	1e798 <net_nbr_get>
	if (!nbr) {
   1ecb4:	4604      	mov	r4, r0
   1ecb6:	b128      	cbz	r0, 1ecc4 <nbr_new+0x20>
	nbr_init(nbr, iface, addr, true, state);
   1ecb8:	9700      	str	r7, [sp, #0]
   1ecba:	2301      	movs	r3, #1
   1ecbc:	4632      	mov	r2, r6
   1ecbe:	4629      	mov	r1, r5
   1ecc0:	f7ff ffbe 	bl	1ec40 <nbr_init>
}
   1ecc4:	4620      	mov	r0, r4
   1ecc6:	b003      	add	sp, #12
   1ecc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ecca:	bf00      	nop
   1eccc:	2000bd44 	.word	0x2000bd44

0001ecd0 <nbr_new>:
}

static struct net_nbr *nbr_new(struct net_if *iface,
			       struct in6_addr *addr,
			       u8_t prefix_len)
{
   1ecd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ecd4:	b084      	sub	sp, #16
   1ecd6:	4604      	mov	r4, r0
   1ecd8:	460e      	mov	r6, r1
   1ecda:	4690      	mov	r8, r2
	struct net_nbr *nbr = net_nbr_get(&net_nbr_routes.table);
   1ecdc:	480c      	ldr	r0, [pc, #48]	; (1ed10 <nbr_new+0x40>)
   1ecde:	f7ff fd5b 	bl	1e798 <net_nbr_get>

	if (!nbr) {
   1ece2:	4605      	mov	r5, r0
   1ece4:	b180      	cbz	r0, 1ed08 <nbr_new+0x38>
		return NULL;
	}

	nbr->iface = iface;
   1ece6:	6084      	str	r4, [r0, #8]
	return (struct net_route_entry *)nbr->data;
   1ece8:	68c7      	ldr	r7, [r0, #12]

	net_ipaddr_copy(&net_route_data(nbr)->addr, addr);
   1ecea:	466c      	mov	r4, sp
   1ecec:	6830      	ldr	r0, [r6, #0]
   1ecee:	6871      	ldr	r1, [r6, #4]
   1ecf0:	68b2      	ldr	r2, [r6, #8]
   1ecf2:	68f3      	ldr	r3, [r6, #12]
   1ecf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1ecf6:	466c      	mov	r4, sp
   1ecf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ecfa:	6138      	str	r0, [r7, #16]
   1ecfc:	6179      	str	r1, [r7, #20]
   1ecfe:	61ba      	str	r2, [r7, #24]
   1ed00:	61fb      	str	r3, [r7, #28]
	return (struct net_route_entry *)nbr->data;
   1ed02:	68eb      	ldr	r3, [r5, #12]
	net_route_data(nbr)->prefix_len = prefix_len;
   1ed04:	f883 8020 	strb.w	r8, [r3, #32]
		nbr->idx, nbr, iface,
		net_sprint_ipv6_addr(&net_route_data(nbr)->addr),
		prefix_len);

	return nbr;
}
   1ed08:	4628      	mov	r0, r5
   1ed0a:	b004      	add	sp, #16
   1ed0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ed10:	2000c168 	.word	0x2000c168

0001ed14 <update_ll_reserve>:
 * Thus we need to check it here. Note that this cannot happen for IPv4
 * as 802.15.4 supports IPv6 only.
 */
static struct net_pkt *update_ll_reserve(struct net_pkt *pkt,
					 struct in6_addr *addr)
{
   1ed14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ed18:	4682      	mov	sl, r0
	return pkt->forwarding;
   1ed1a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38

	/* No need to do anything if we are forwarding the packet
	 * as we already know everything about the destination of
	 * the packet.
	 */
	if (net_pkt_forwarding(pkt)) {
   1ed1e:	f013 0f04 	tst.w	r3, #4
   1ed22:	d002      	beq.n	1ed2a <update_ll_reserve+0x16>
			pos = 0;
		}
	}

	return pkt;
}
   1ed24:	4650      	mov	r0, sl
   1ed26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return pkt->iface;
   1ed2a:	6940      	ldr	r0, [r0, #20]
   1ed2c:	6843      	ldr	r3, [r0, #4]
   1ed2e:	689b      	ldr	r3, [r3, #8]
   1ed30:	4798      	blx	r3
	if (reserve == net_pkt_ll_reserve(pkt)) {
   1ed32:	f89a 3032 	ldrb.w	r3, [sl, #50]	; 0x32
   1ed36:	4283      	cmp	r3, r0
   1ed38:	d0f4      	beq.n	1ed24 <update_ll_reserve+0x10>
	pkt->ll_reserve = len;
   1ed3a:	f88a 0032 	strb.w	r0, [sl, #50]	; 0x32
	orig_frag = pkt->frags;
   1ed3e:	f8da 7008 	ldr.w	r7, [sl, #8]
	copy_len = orig_frag->len;
   1ed42:	89be      	ldrh	r6, [r7, #12]
	pkt->frags = NULL;
   1ed44:	2400      	movs	r4, #0
   1ed46:	f8ca 4008 	str.w	r4, [sl, #8]
	frag = NULL;
   1ed4a:	46a1      	mov	r9, r4
	pos = 0;
   1ed4c:	46a0      	mov	r8, r4
	while (orig_frag) {
   1ed4e:	e020      	b.n	1ed92 <update_ll_reserve+0x7e>
			frag = net_pkt_get_frag(pkt, K_FOREVER);
   1ed50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ed54:	4650      	mov	r0, sl
   1ed56:	f7fd febd 	bl	1cad4 <net_pkt_get_frag>
   1ed5a:	4681      	mov	r9, r0
			net_pkt_frag_add(pkt, frag);
   1ed5c:	4601      	mov	r1, r0
   1ed5e:	4650      	mov	r0, sl
   1ed60:	f7fd ff35 	bl	1cbce <net_pkt_frag_add>
			room_len = net_buf_tailroom(frag);
   1ed64:	f109 0008 	add.w	r0, r9, #8
   1ed68:	f7fb fa4d 	bl	1a206 <net_buf_simple_tailroom>
   1ed6c:	b284      	uxth	r4, r0
   1ed6e:	e014      	b.n	1ed9a <update_ll_reserve+0x86>
			memcpy(net_buf_add(frag, room_len),
   1ed70:	4621      	mov	r1, r4
   1ed72:	f109 0008 	add.w	r0, r9, #8
   1ed76:	f7fb f9dd 	bl	1a134 <net_buf_simple_add>
			       orig_frag->data + pos, room_len);
   1ed7a:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, room_len),
   1ed7c:	4622      	mov	r2, r4
   1ed7e:	4441      	add	r1, r8
   1ed80:	f7e1 fa9e 	bl	2c0 <memcpy>
			copy_len -= room_len;
   1ed84:	1b36      	subs	r6, r6, r4
   1ed86:	b2b6      	uxth	r6, r6
			pos += room_len;
   1ed88:	4444      	add	r4, r8
   1ed8a:	fa1f f884 	uxth.w	r8, r4
			room_len = 0;
   1ed8e:	2400      	movs	r4, #0
		if (!copy_len) {
   1ed90:	b19e      	cbz	r6, 1edba <update_ll_reserve+0xa6>
	while (orig_frag) {
   1ed92:	2f00      	cmp	r7, #0
   1ed94:	d0c6      	beq.n	1ed24 <update_ll_reserve+0x10>
		if (!room_len) {
   1ed96:	2c00      	cmp	r4, #0
   1ed98:	d0da      	beq.n	1ed50 <update_ll_reserve+0x3c>
		if (room_len >= copy_len) {
   1ed9a:	42b4      	cmp	r4, r6
   1ed9c:	d3e8      	bcc.n	1ed70 <update_ll_reserve+0x5c>
			memcpy(net_buf_add(frag, copy_len),
   1ed9e:	4631      	mov	r1, r6
   1eda0:	f109 0008 	add.w	r0, r9, #8
   1eda4:	f7fb f9c6 	bl	1a134 <net_buf_simple_add>
			       orig_frag->data + pos, copy_len);
   1eda8:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, copy_len),
   1edaa:	4632      	mov	r2, r6
   1edac:	4441      	add	r1, r8
   1edae:	f7e1 fa87 	bl	2c0 <memcpy>
			room_len -= copy_len;
   1edb2:	1ba4      	subs	r4, r4, r6
   1edb4:	b2a4      	uxth	r4, r4
			copy_len = 0;
   1edb6:	2600      	movs	r6, #0
   1edb8:	e7ea      	b.n	1ed90 <update_ll_reserve+0x7c>
			orig_frag = orig_frag->frags;
   1edba:	683d      	ldr	r5, [r7, #0]
			tmp->frags = NULL;
   1edbc:	2300      	movs	r3, #0
   1edbe:	603b      	str	r3, [r7, #0]
			net_pkt_frag_unref(tmp);
   1edc0:	4638      	mov	r0, r7
   1edc2:	f7fd fed4 	bl	1cb6e <net_pkt_frag_unref>
			if (!orig_frag) {
   1edc6:	2d00      	cmp	r5, #0
   1edc8:	d0ac      	beq.n	1ed24 <update_ll_reserve+0x10>
			orig_frag = orig_frag->frags;
   1edca:	462f      	mov	r7, r5
			pos = 0;
   1edcc:	46b0      	mov	r8, r6
			copy_len = orig_frag->len;
   1edce:	89ae      	ldrh	r6, [r5, #12]
   1edd0:	e7df      	b.n	1ed92 <update_ll_reserve+0x7e>

0001edd2 <setup_headers>:
	       llao_len - lladdr->len - 2);
}

static void setup_headers(struct net_pkt *pkt, u8_t nd6_len,
			  u8_t icmp_type)
{
   1edd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1edd4:	4604      	mov	r4, r0
   1edd6:	460e      	mov	r6, r1
   1edd8:	4617      	mov	r7, r2
	net_buf_add(pkt->frags,
   1edda:	6880      	ldr	r0, [r0, #8]
   1eddc:	212c      	movs	r1, #44	; 0x2c
   1edde:	3008      	adds	r0, #8
   1ede0:	f7fb f9a8 	bl	1a134 <net_buf_simple_add>
	return pkt->frags->data;
   1ede4:	68a3      	ldr	r3, [r4, #8]
   1ede6:	689b      	ldr	r3, [r3, #8]
		    sizeof(struct net_ipv6_hdr) +
		    sizeof(struct net_icmp_hdr));

	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1ede8:	2260      	movs	r2, #96	; 0x60
   1edea:	701a      	strb	r2, [r3, #0]
   1edec:	68a3      	ldr	r3, [r4, #8]
   1edee:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1edf0:	2500      	movs	r5, #0
   1edf2:	705d      	strb	r5, [r3, #1]
   1edf4:	68a3      	ldr	r3, [r4, #8]
   1edf6:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1edf8:	709d      	strb	r5, [r3, #2]
   1edfa:	70dd      	strb	r5, [r3, #3]
   1edfc:	68a3      	ldr	r3, [r4, #8]
   1edfe:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[0] = 0;
   1ee00:	711d      	strb	r5, [r3, #4]
   1ee02:	68a3      	ldr	r3, [r4, #8]
   1ee04:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;
   1ee06:	3604      	adds	r6, #4
   1ee08:	715e      	strb	r6, [r3, #5]
   1ee0a:	68a3      	ldr	r3, [r4, #8]
   1ee0c:	689b      	ldr	r3, [r3, #8]

	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1ee0e:	223a      	movs	r2, #58	; 0x3a
   1ee10:	719a      	strb	r2, [r3, #6]
   1ee12:	68a3      	ldr	r3, [r4, #8]
   1ee14:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   1ee16:	22ff      	movs	r2, #255	; 0xff
   1ee18:	71da      	strb	r2, [r3, #7]

	/* In this special case where we know there are no long extension
	 * headers, so we can use this header cast.
	 */
	net_pkt_icmp_data(pkt)->type = icmp_type;
   1ee1a:	4620      	mov	r0, r4
   1ee1c:	f7fe f986 	bl	1d12c <net_pkt_icmp_data>
   1ee20:	7007      	strb	r7, [r0, #0]
	net_pkt_icmp_data(pkt)->code = 0;
   1ee22:	4620      	mov	r0, r4
   1ee24:	f7fe f982 	bl	1d12c <net_pkt_icmp_data>
   1ee28:	7045      	strb	r5, [r0, #1]
   1ee2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ee2c <nbr_free>:
{
   1ee2c:	b538      	push	{r3, r4, r5, lr}
   1ee2e:	4604      	mov	r4, r0
   1ee30:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   1ee32:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1ee36:	f00a fa6b 	bl	29310 <k_delayed_work_cancel>
	if (data->pending) {
   1ee3a:	6828      	ldr	r0, [r5, #0]
   1ee3c:	b118      	cbz	r0, 1ee46 <nbr_free+0x1a>
		net_pkt_unref(data->pending);
   1ee3e:	f7fd fe9c 	bl	1cb7a <net_pkt_unref>
		data->pending = NULL;
   1ee42:	2300      	movs	r3, #0
   1ee44:	602b      	str	r3, [r5, #0]
   1ee46:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1ee48:	3014      	adds	r0, #20
   1ee4a:	f00a fa61 	bl	29310 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1ee4e:	4620      	mov	r0, r4
   1ee50:	f7ff fc94 	bl	1e77c <net_nbr_unref>
   1ee54:	bd38      	pop	{r3, r4, r5, pc}
	...

0001ee58 <net_ipv6_nbr_state2str>:
	switch (state) {
   1ee58:	2805      	cmp	r0, #5
   1ee5a:	d80e      	bhi.n	1ee7a <net_ipv6_nbr_state2str+0x22>
   1ee5c:	e8df f000 	tbb	[pc, r0]
   1ee60:	07050f03 	.word	0x07050f03
   1ee64:	0b09      	.short	0x0b09
		return "incomplete";
   1ee66:	4807      	ldr	r0, [pc, #28]	; (1ee84 <net_ipv6_nbr_state2str+0x2c>)
   1ee68:	4770      	bx	lr
		return "stale";
   1ee6a:	4807      	ldr	r0, [pc, #28]	; (1ee88 <net_ipv6_nbr_state2str+0x30>)
   1ee6c:	4770      	bx	lr
		return "delay";
   1ee6e:	4807      	ldr	r0, [pc, #28]	; (1ee8c <net_ipv6_nbr_state2str+0x34>)
   1ee70:	4770      	bx	lr
		return "probe";
   1ee72:	4807      	ldr	r0, [pc, #28]	; (1ee90 <net_ipv6_nbr_state2str+0x38>)
   1ee74:	4770      	bx	lr
		return "static";
   1ee76:	4807      	ldr	r0, [pc, #28]	; (1ee94 <net_ipv6_nbr_state2str+0x3c>)
   1ee78:	4770      	bx	lr
	return "<invalid state>";
   1ee7a:	4807      	ldr	r0, [pc, #28]	; (1ee98 <net_ipv6_nbr_state2str+0x40>)
   1ee7c:	4770      	bx	lr
		return "reachable";
   1ee7e:	4807      	ldr	r0, [pc, #28]	; (1ee9c <net_ipv6_nbr_state2str+0x44>)
}
   1ee80:	4770      	bx	lr
   1ee82:	bf00      	nop
   1ee84:	0002ff44 	.word	0x0002ff44
   1ee88:	0002ff5c 	.word	0x0002ff5c
   1ee8c:	0002ff64 	.word	0x0002ff64
   1ee90:	0002ff6c 	.word	0x0002ff6c
   1ee94:	0002ff74 	.word	0x0002ff74
   1ee98:	0002ff7c 	.word	0x0002ff7c
   1ee9c:	0002ff50 	.word	0x0002ff50

0001eea0 <net_ipv6_nbr_foreach>:
{
   1eea0:	b500      	push	{lr}
   1eea2:	b083      	sub	sp, #12
	struct iface_cb_data cb_data = {
   1eea4:	9000      	str	r0, [sp, #0]
   1eea6:	9101      	str	r1, [sp, #4]
	net_if_foreach(iface_cb, &cb_data);
   1eea8:	4669      	mov	r1, sp
   1eeaa:	4803      	ldr	r0, [pc, #12]	; (1eeb8 <net_ipv6_nbr_foreach+0x18>)
   1eeac:	f7fc fc3a 	bl	1b724 <net_if_foreach>
}
   1eeb0:	b003      	add	sp, #12
   1eeb2:	f85d fb04 	ldr.w	pc, [sp], #4
   1eeb6:	bf00      	nop
   1eeb8:	0001e8c5 	.word	0x0001e8c5

0001eebc <net_ipv6_nbr_rm>:
{
   1eebc:	b538      	push	{r3, r4, r5, lr}
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1eebe:	460a      	mov	r2, r1
   1eec0:	4601      	mov	r1, r0
   1eec2:	480d      	ldr	r0, [pc, #52]	; (1eef8 <net_ipv6_nbr_rm+0x3c>)
   1eec4:	f7ff fe6c 	bl	1eba0 <nbr_lookup>
	if (!nbr) {
   1eec8:	b1a0      	cbz	r0, 1eef4 <net_ipv6_nbr_rm+0x38>
   1eeca:	4604      	mov	r4, r0
   1eecc:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   1eece:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1eed2:	f00a fa1d 	bl	29310 <k_delayed_work_cancel>
	if (data->pending) {
   1eed6:	6828      	ldr	r0, [r5, #0]
   1eed8:	b118      	cbz	r0, 1eee2 <net_ipv6_nbr_rm+0x26>
		net_pkt_unref(data->pending);
   1eeda:	f7fd fe4e 	bl	1cb7a <net_pkt_unref>
		data->pending = NULL;
   1eede:	2300      	movs	r3, #0
   1eee0:	602b      	str	r3, [r5, #0]
   1eee2:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1eee4:	3014      	adds	r0, #20
   1eee6:	f00a fa13 	bl	29310 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1eeea:	4620      	mov	r0, r4
   1eeec:	f7ff fc46 	bl	1e77c <net_nbr_unref>
	return true;
   1eef0:	2001      	movs	r0, #1
   1eef2:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1eef4:	2000      	movs	r0, #0
}
   1eef6:	bd38      	pop	{r3, r4, r5, pc}
   1eef8:	2000bd44 	.word	0x2000bd44

0001eefc <net_ipv6_unspecified_address>:
}
   1eefc:	4800      	ldr	r0, [pc, #0]	; (1ef00 <net_ipv6_unspecified_address+0x4>)
   1eefe:	4770      	bx	lr
   1ef00:	0002ff34 	.word	0x0002ff34

0001ef04 <create_mldv2>:

static struct net_pkt *create_mldv2(struct net_pkt *pkt,
				    const struct in6_addr *addr,
				    u16_t record_type,
				    u8_t num_sources)
{
   1ef04:	b570      	push	{r4, r5, r6, lr}
   1ef06:	b082      	sub	sp, #8
   1ef08:	4604      	mov	r4, r0
   1ef0a:	460e      	mov	r6, r1
   1ef0c:	461d      	mov	r5, r3
   1ef0e:	a902      	add	r1, sp, #8
   1ef10:	f801 2d03 	strb.w	r2, [r1, #-3]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1ef14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ef18:	460a      	mov	r2, r1
   1ef1a:	2101      	movs	r1, #1
   1ef1c:	f7fd ff65 	bl	1cdea <net_pkt_append>
   1ef20:	aa02      	add	r2, sp, #8
   1ef22:	2300      	movs	r3, #0
   1ef24:	f802 3d04 	strb.w	r3, [r2, #-4]!
   1ef28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ef2c:	2101      	movs	r1, #1
   1ef2e:	4620      	mov	r0, r4
   1ef30:	f7fd ff5b 	bl	1cdea <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1ef34:	022b      	lsls	r3, r5, #8
   1ef36:	aa02      	add	r2, sp, #8
   1ef38:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1ef3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ef40:	2102      	movs	r1, #2
   1ef42:	4620      	mov	r0, r4
   1ef44:	f7fd ff51 	bl	1cdea <net_pkt_append>
   1ef48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ef4c:	4632      	mov	r2, r6
   1ef4e:	2110      	movs	r1, #16
   1ef50:	4620      	mov	r0, r4
   1ef52:	f7fd ff4a 	bl	1cdea <net_pkt_append>
	net_pkt_append_u8(pkt, 0); /* aux data len */
	net_pkt_append_be16(pkt, num_sources); /* number of addresses */
	net_pkt_append_all(pkt, sizeof(struct in6_addr), addr->s6_addr,
			K_FOREVER);

	if (num_sources > 0) {
   1ef56:	b915      	cbnz	r5, 1ef5e <create_mldv2+0x5a>
				net_ipv6_unspecified_address()->s6_addr,
				K_FOREVER);
	}

	return pkt;
}
   1ef58:	4620      	mov	r0, r4
   1ef5a:	b002      	add	sp, #8
   1ef5c:	bd70      	pop	{r4, r5, r6, pc}
				net_ipv6_unspecified_address()->s6_addr,
   1ef5e:	f7ff ffcd 	bl	1eefc <net_ipv6_unspecified_address>
   1ef62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ef66:	4602      	mov	r2, r0
   1ef68:	2110      	movs	r1, #16
   1ef6a:	4620      	mov	r0, r4
   1ef6c:	f7fd ff3d 	bl	1cdea <net_pkt_append>
   1ef70:	e7f2      	b.n	1ef58 <create_mldv2+0x54>

0001ef72 <net_ipv6_create_raw>:
{
   1ef72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ef76:	b088      	sub	sp, #32
   1ef78:	4604      	mov	r4, r0
   1ef7a:	460e      	mov	r6, r1
   1ef7c:	4617      	mov	r7, r2
   1ef7e:	461d      	mov	r5, r3
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1ef80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ef84:	f7fd fda6 	bl	1cad4 <net_pkt_get_frag>
   1ef88:	4680      	mov	r8, r0
	net_pkt_frag_insert(pkt, header);
   1ef8a:	4601      	mov	r1, r0
   1ef8c:	4620      	mov	r0, r4
   1ef8e:	f7fd fe2b 	bl	1cbe8 <net_pkt_frag_insert>
	return pkt->frags->data;
   1ef92:	68a3      	ldr	r3, [r4, #8]
   1ef94:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1ef96:	2260      	movs	r2, #96	; 0x60
   1ef98:	701a      	strb	r2, [r3, #0]
   1ef9a:	68a3      	ldr	r3, [r4, #8]
   1ef9c:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1ef9e:	2300      	movs	r3, #0
   1efa0:	7053      	strb	r3, [r2, #1]
   1efa2:	68a2      	ldr	r2, [r4, #8]
   1efa4:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1efa6:	7093      	strb	r3, [r2, #2]
   1efa8:	70d3      	strb	r3, [r2, #3]
   1efaa:	68a2      	ldr	r2, [r4, #8]
   1efac:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = 0;
   1efae:	7193      	strb	r3, [r2, #6]
   1efb0:	68a3      	ldr	r3, [r4, #8]
   1efb2:	689b      	ldr	r3, [r3, #8]
	return pkt->ipv6_hop_limit;
   1efb4:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
	NET_IPV6_HDR(pkt)->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   1efb8:	71da      	strb	r2, [r3, #7]
	return pkt->frags->data;
   1efba:	68a3      	ldr	r3, [r4, #8]
   1efbc:	689b      	ldr	r3, [r3, #8]
	if (NET_IPV6_HDR(pkt)->hop_limit == 0) {
   1efbe:	79da      	ldrb	r2, [r3, #7]
   1efc0:	b912      	cbnz	r2, 1efc8 <net_ipv6_create_raw+0x56>
	return iface->ipv6.hop_limit;
   1efc2:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
		NET_IPV6_HDR(pkt)->hop_limit =
   1efc6:	71da      	strb	r2, [r3, #7]
   1efc8:	68a3      	ldr	r3, [r4, #8]
   1efca:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1efce:	466d      	mov	r5, sp
   1efd0:	6838      	ldr	r0, [r7, #0]
   1efd2:	6879      	ldr	r1, [r7, #4]
   1efd4:	68ba      	ldr	r2, [r7, #8]
   1efd6:	68fb      	ldr	r3, [r7, #12]
   1efd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1efda:	466d      	mov	r5, sp
   1efdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1efde:	f8ce 0018 	str.w	r0, [lr, #24]
   1efe2:	f8ce 101c 	str.w	r1, [lr, #28]
   1efe6:	f8ce 2020 	str.w	r2, [lr, #32]
   1efea:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
   1efee:	68a3      	ldr	r3, [r4, #8]
   1eff0:	689f      	ldr	r7, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1eff2:	6830      	ldr	r0, [r6, #0]
   1eff4:	6871      	ldr	r1, [r6, #4]
   1eff6:	68b2      	ldr	r2, [r6, #8]
   1eff8:	68f3      	ldr	r3, [r6, #12]
   1effa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1effc:	ad04      	add	r5, sp, #16
   1effe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f000:	60b8      	str	r0, [r7, #8]
   1f002:	60f9      	str	r1, [r7, #12]
   1f004:	613a      	str	r2, [r7, #16]
   1f006:	617b      	str	r3, [r7, #20]
	pkt->ipv6_ext_len = len;
   1f008:	2300      	movs	r3, #0
   1f00a:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1f00e:	68a3      	ldr	r3, [r4, #8]
   1f010:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->nexthdr = next_header;
   1f012:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   1f016:	719a      	strb	r2, [r3, #6]
	pkt->ip_hdr_len = len;
   1f018:	2128      	movs	r1, #40	; 0x28
   1f01a:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
	pkt->family = family;
   1f01e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1f022:	220a      	movs	r2, #10
   1f024:	f362 03c6 	bfi	r3, r2, #3, #4
   1f028:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_buf_add(header, sizeof(struct net_ipv6_hdr));
   1f02c:	f108 0008 	add.w	r0, r8, #8
   1f030:	f7fb f880 	bl	1a134 <net_buf_simple_add>
}
   1f034:	4620      	mov	r0, r4
   1f036:	b008      	add	sp, #32
   1f038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f03c <net_ipv6_create>:
{
   1f03c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f03e:	b083      	sub	sp, #12
   1f040:	4605      	mov	r5, r0
   1f042:	460e      	mov	r6, r1
   1f044:	461f      	mov	r7, r3
	if (!src) {
   1f046:	4614      	mov	r4, r2
   1f048:	b14a      	cbz	r2, 1f05e <net_ipv6_create+0x22>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f04a:	6823      	ldr	r3, [r4, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f04c:	b94b      	cbnz	r3, 1f062 <net_ipv6_create+0x26>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f04e:	6863      	ldr	r3, [r4, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f050:	b9fb      	cbnz	r3, 1f092 <net_ipv6_create+0x56>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f052:	68a3      	ldr	r3, [r4, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f054:	b9fb      	cbnz	r3, 1f096 <net_ipv6_create+0x5a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1f056:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f058:	b1fb      	cbz	r3, 1f09a <net_ipv6_create+0x5e>
   1f05a:	2300      	movs	r3, #0
   1f05c:	e002      	b.n	1f064 <net_ipv6_create+0x28>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   1f05e:	68c4      	ldr	r4, [r0, #12]
   1f060:	e7f3      	b.n	1f04a <net_ipv6_create+0xe>
   1f062:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(src)
   1f064:	b9db      	cbnz	r3, 1f09e <net_ipv6_create+0x62>
	return addr->s6_addr[0] == 0xFF;
   1f066:	7823      	ldrb	r3, [r4, #0]
	    || net_is_ipv6_addr_mcast(src)) {
   1f068:	2bff      	cmp	r3, #255	; 0xff
   1f06a:	d018      	beq.n	1f09e <net_ipv6_create+0x62>
	return net_if_get_by_index(context->iface);
   1f06c:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
   1f070:	f7fc fb3c 	bl	1b6ec <net_if_get_by_index>
   1f074:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1f076:	f895 205d 	ldrb.w	r2, [r5, #93]	; 0x5d
   1f07a:	f012 0f40 	tst.w	r2, #64	; 0x40
   1f07e:	d114      	bne.n	1f0aa <net_ipv6_create+0x6e>
	return IPPROTO_UDP;
   1f080:	2211      	movs	r2, #17
	return net_ipv6_create_raw(pkt,
   1f082:	9200      	str	r2, [sp, #0]
   1f084:	463a      	mov	r2, r7
   1f086:	4621      	mov	r1, r4
   1f088:	4630      	mov	r0, r6
   1f08a:	f7ff ff72 	bl	1ef72 <net_ipv6_create_raw>
}
   1f08e:	b003      	add	sp, #12
   1f090:	bdf0      	pop	{r4, r5, r6, r7, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f092:	2300      	movs	r3, #0
   1f094:	e7e6      	b.n	1f064 <net_ipv6_create+0x28>
   1f096:	2300      	movs	r3, #0
   1f098:	e7e4      	b.n	1f064 <net_ipv6_create+0x28>
   1f09a:	2301      	movs	r3, #1
   1f09c:	e7e2      	b.n	1f064 <net_ipv6_create+0x28>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1f09e:	4639      	mov	r1, r7
   1f0a0:	6970      	ldr	r0, [r6, #20]
   1f0a2:	f7fc f8cf 	bl	1b244 <net_if_ipv6_select_src_addr>
   1f0a6:	4604      	mov	r4, r0
   1f0a8:	e7e0      	b.n	1f06c <net_ipv6_create+0x30>
		return IPPROTO_TCP;
   1f0aa:	2206      	movs	r2, #6
   1f0ac:	e7e9      	b.n	1f082 <net_ipv6_create+0x46>

0001f0ae <net_ipv6_finalize_raw>:
{
   1f0ae:	b538      	push	{r3, r4, r5, lr}
   1f0b0:	4605      	mov	r5, r0
   1f0b2:	460c      	mov	r4, r1
	net_pkt_compact(pkt);
   1f0b4:	f7fd fe52 	bl	1cd5c <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   1f0b8:	68a8      	ldr	r0, [r5, #8]
   1f0ba:	4603      	mov	r3, r0
	size_t bytes = 0;
   1f0bc:	2200      	movs	r2, #0
   1f0be:	e002      	b.n	1f0c6 <net_ipv6_finalize_raw+0x18>
		bytes += buf->len;
   1f0c0:	8999      	ldrh	r1, [r3, #12]
   1f0c2:	440a      	add	r2, r1
		buf = buf->frags;
   1f0c4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1f0c6:	2b00      	cmp	r3, #0
   1f0c8:	d1fa      	bne.n	1f0c0 <net_ipv6_finalize_raw+0x12>
	total_len -= sizeof(struct net_ipv6_hdr);
   1f0ca:	3a28      	subs	r2, #40	; 0x28
	return pkt->frags->data;
   1f0cc:	6883      	ldr	r3, [r0, #8]
	NET_IPV6_HDR(pkt)->len[0] = total_len / 256;
   1f0ce:	0a11      	lsrs	r1, r2, #8
   1f0d0:	7119      	strb	r1, [r3, #4]
   1f0d2:	68ab      	ldr	r3, [r5, #8]
   1f0d4:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = total_len - NET_IPV6_HDR(pkt)->len[0] * 256;
   1f0d6:	715a      	strb	r2, [r3, #5]
	if (next_header == IPPROTO_UDP) {
   1f0d8:	2c11      	cmp	r4, #17
   1f0da:	d005      	beq.n	1f0e8 <net_ipv6_finalize_raw+0x3a>
	if (next_header == IPPROTO_TCP) {
   1f0dc:	2c06      	cmp	r4, #6
   1f0de:	d008      	beq.n	1f0f2 <net_ipv6_finalize_raw+0x44>
	if (next_header == IPPROTO_ICMPV6) {
   1f0e0:	2c3a      	cmp	r4, #58	; 0x3a
   1f0e2:	d00b      	beq.n	1f0fc <net_ipv6_finalize_raw+0x4e>
}
   1f0e4:	2000      	movs	r0, #0
   1f0e6:	bd38      	pop	{r3, r4, r5, pc}
		net_udp_set_chksum(pkt, pkt->frags);
   1f0e8:	68a9      	ldr	r1, [r5, #8]
   1f0ea:	4628      	mov	r0, r5
   1f0ec:	f003 fa9b 	bl	22626 <net_udp_set_chksum>
   1f0f0:	e7f8      	b.n	1f0e4 <net_ipv6_finalize_raw+0x36>
		net_tcp_set_chksum(pkt, pkt->frags);
   1f0f2:	68a9      	ldr	r1, [r5, #8]
   1f0f4:	4628      	mov	r0, r5
   1f0f6:	f004 f8da 	bl	232ae <net_tcp_set_chksum>
   1f0fa:	e7f3      	b.n	1f0e4 <net_ipv6_finalize_raw+0x36>
		net_icmpv6_set_chksum(pkt, pkt->frags);
   1f0fc:	68a9      	ldr	r1, [r5, #8]
   1f0fe:	4628      	mov	r0, r5
   1f100:	f7fe fdf2 	bl	1dce8 <net_icmpv6_set_chksum>
   1f104:	e7ee      	b.n	1f0e4 <net_ipv6_finalize_raw+0x36>
	...

0001f108 <send_mldv2_raw>:

static int send_mldv2_raw(struct net_if *iface, struct net_buf *frags)
{
   1f108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f10c:	b08d      	sub	sp, #52	; 0x34
   1f10e:	4680      	mov	r8, r0
   1f110:	4689      	mov	r9, r1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1f112:	f240 23ff 	movw	r3, #767	; 0x2ff
   1f116:	f8ad 3020 	strh.w	r3, [sp, #32]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1f11a:	2500      	movs	r5, #0
   1f11c:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1f120:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1f124:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1f128:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1f12c:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1f130:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1f134:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
   1f138:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1f13c:	6843      	ldr	r3, [r0, #4]
   1f13e:	689b      	ldr	r3, [r3, #8]
   1f140:	a908      	add	r1, sp, #32
   1f142:	4798      	blx	r3
	int ret;

	/* Sent to all MLDv2-capable routers */
	net_ipv6_addr_create(&dst, 0xff02, 0, 0, 0, 0, 0, 0, 0x0016);

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1f144:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f148:	f7fd fca6 	bl	1ca98 <net_pkt_get_reserve_tx>
   1f14c:	4604      	mov	r4, r0
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt,
   1f14e:	a908      	add	r1, sp, #32
   1f150:	4640      	mov	r0, r8
   1f152:	f7fc f877 	bl	1b244 <net_if_ipv6_select_src_addr>
   1f156:	9500      	str	r5, [sp, #0]
   1f158:	4643      	mov	r3, r8
   1f15a:	aa08      	add	r2, sp, #32
   1f15c:	4601      	mov	r1, r0
   1f15e:	4620      	mov	r0, r4
   1f160:	f7ff ff07 	bl	1ef72 <net_ipv6_create_raw>
   1f164:	4604      	mov	r4, r0
   1f166:	6883      	ldr	r3, [r0, #8]
   1f168:	689b      	ldr	r3, [r3, #8]
				  net_if_ipv6_select_src_addr(iface, &dst),
				  &dst,
				  iface,
				  NET_IPV6_NEXTHDR_HBHO);

	NET_IPV6_HDR(pkt)->hop_limit = 1; /* RFC 3810 ch 7.4 */
   1f16a:	2601      	movs	r6, #1
   1f16c:	71de      	strb	r6, [r3, #7]

	net_pkt_set_ipv6_hdr_prev(pkt, pkt->frags->len);
   1f16e:	6883      	ldr	r3, [r0, #8]
   1f170:	899b      	ldrh	r3, [r3, #12]
	pkt->ipv6_prev_hdr_start = offset;
   1f172:	87c3      	strh	r3, [r0, #62]	; 0x3e
   1f174:	aa0c      	add	r2, sp, #48	; 0x30
   1f176:	233a      	movs	r3, #58	; 0x3a
   1f178:	f802 3d15 	strb.w	r3, [r2, #-21]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f17c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f180:	4631      	mov	r1, r6
   1f182:	f7fd fe32 	bl	1cdea <net_pkt_append>
   1f186:	aa0c      	add	r2, sp, #48	; 0x30
   1f188:	f802 5d16 	strb.w	r5, [r2, #-22]!
   1f18c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f190:	4631      	mov	r1, r6
   1f192:	4620      	mov	r0, r4
   1f194:	f7fd fe29 	bl	1cdea <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f198:	af0c      	add	r7, sp, #48	; 0x30
   1f19a:	f240 2305 	movw	r3, #517	; 0x205
   1f19e:	f827 3d14 	strh.w	r3, [r7, #-20]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f1a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f1a6:	463a      	mov	r2, r7
   1f1a8:	2102      	movs	r1, #2
   1f1aa:	4620      	mov	r0, r4
   1f1ac:	f7fd fe1d 	bl	1cdea <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f1b0:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f1b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f1b8:	463a      	mov	r2, r7
   1f1ba:	2102      	movs	r1, #2
   1f1bc:	4620      	mov	r0, r4
   1f1be:	f7fd fe14 	bl	1cdea <net_pkt_append>
   1f1c2:	aa0c      	add	r2, sp, #48	; 0x30
   1f1c4:	f802 5d17 	strb.w	r5, [r2, #-23]!
   1f1c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f1cc:	4631      	mov	r1, r6
   1f1ce:	4620      	mov	r0, r4
   1f1d0:	f7fd fe0b 	bl	1cdea <net_pkt_append>
   1f1d4:	aa0c      	add	r2, sp, #48	; 0x30
   1f1d6:	f802 5d18 	strb.w	r5, [r2, #-24]!
   1f1da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f1de:	4631      	mov	r1, r6
   1f1e0:	4620      	mov	r0, r4
   1f1e2:	f7fd fe02 	bl	1cdea <net_pkt_append>
   1f1e6:	aa0c      	add	r2, sp, #48	; 0x30
   1f1e8:	238f      	movs	r3, #143	; 0x8f
   1f1ea:	f802 3d19 	strb.w	r3, [r2, #-25]!
   1f1ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f1f2:	4631      	mov	r1, r6
   1f1f4:	4620      	mov	r0, r4
   1f1f6:	f7fd fdf8 	bl	1cdea <net_pkt_append>
   1f1fa:	aa0c      	add	r2, sp, #48	; 0x30
   1f1fc:	f802 5d1a 	strb.w	r5, [r2, #-26]!
   1f200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f204:	4631      	mov	r1, r6
   1f206:	4620      	mov	r0, r4
   1f208:	f7fd fdef 	bl	1cdea <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f20c:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f214:	463a      	mov	r2, r7
   1f216:	2102      	movs	r1, #2
   1f218:	4620      	mov	r0, r4
   1f21a:	f7fd fde6 	bl	1cdea <net_pkt_append>
	/* ICMPv6 header */
	net_pkt_append_u8(pkt, NET_ICMPV6_MLDv2); /* type */
	net_pkt_append_u8(pkt, 0); /* code */
	net_pkt_append_be16(pkt, 0); /* chksum */

	pkt->frags->len = NET_IPV6ICMPH_LEN + ROUTER_ALERT_LEN;
   1f21e:	68a3      	ldr	r3, [r4, #8]
   1f220:	2234      	movs	r2, #52	; 0x34
   1f222:	819a      	strh	r2, [r3, #12]
	pkt->iface = iface;
   1f224:	f8c4 8014 	str.w	r8, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f228:	f898 3015 	ldrb.w	r3, [r8, #21]
   1f22c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f230:	f898 3015 	ldrb.w	r3, [r8, #21]
   1f234:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	u16_t value = sys_cpu_to_be16(data);
   1f238:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f23c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f240:	463a      	mov	r2, r7
   1f242:	2102      	movs	r1, #2
   1f244:	4620      	mov	r0, r4
   1f246:	f7fd fdd0 	bl	1cdea <net_pkt_append>
	net_pkt_set_iface(pkt, iface);

	net_pkt_append_be16(pkt, 0); /* reserved field */

	/* Insert the actual multicast record(s) here */
	net_pkt_frag_add(pkt, frags);
   1f24a:	4649      	mov	r1, r9
   1f24c:	4620      	mov	r0, r4
   1f24e:	f7fd fcbe 	bl	1cbce <net_pkt_frag_add>

	ret = net_ipv6_finalize_raw(pkt, NET_IPV6_NEXTHDR_HBHO);
   1f252:	4629      	mov	r1, r5
   1f254:	4620      	mov	r0, r4
   1f256:	f7ff ff2a 	bl	1f0ae <net_ipv6_finalize_raw>
	if (ret < 0) {
   1f25a:	1e05      	subs	r5, r0, #0
   1f25c:	db35      	blt.n	1f2ca <send_mldv2_raw+0x1c2>
	pkt->ipv6_ext_len = len;
   1f25e:	2308      	movs	r3, #8
   1f260:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		goto drop;
	}

	net_pkt_set_ipv6_ext_len(pkt, ROUTER_ALERT_LEN);

	net_pkt_write_be16(pkt, pkt->frags,
   1f264:	68a6      	ldr	r6, [r4, #8]
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1f266:	213a      	movs	r1, #58	; 0x3a
   1f268:	4620      	mov	r0, r4
   1f26a:	f7fe faf0 	bl	1d84e <net_calc_chksum>
			   NET_IPV6H_LEN + ROUTER_ALERT_LEN + 2,
			   &pos, ntohs(~net_calc_chksum_icmpv6(pkt)));
   1f26e:	ea6f 2020 	mvn.w	r0, r0, asr #8
   1f272:	b2c5      	uxtb	r5, r0
   1f274:	213a      	movs	r1, #58	; 0x3a
   1f276:	4620      	mov	r0, r4
   1f278:	f7fe fae9 	bl	1d84e <net_calc_chksum>
   1f27c:	43c0      	mvns	r0, r0
   1f27e:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
	net_pkt_write_be16(pkt, pkt->frags,
   1f282:	b280      	uxth	r0, r0
						 struct net_buf *frag,
						 u16_t offset,
						 u16_t *pos,
						 u16_t data)
{
	u16_t value = htons(data);
   1f284:	0a03      	lsrs	r3, r0, #8
   1f286:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   1f28a:	f8ad 001c 	strh.w	r0, [sp, #28]

	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   1f28e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f292:	9302      	str	r3, [sp, #8]
   1f294:	ab07      	add	r3, sp, #28
   1f296:	9301      	str	r3, [sp, #4]
   1f298:	2302      	movs	r3, #2
   1f29a:	9300      	str	r3, [sp, #0]
   1f29c:	f10d 031e 	add.w	r3, sp, #30
   1f2a0:	2232      	movs	r2, #50	; 0x32
   1f2a2:	4631      	mov	r1, r6
   1f2a4:	4620      	mov	r0, r4
   1f2a6:	f7fd fe58 	bl	1cf5a <net_pkt_write>

	ret = net_send_data(pkt);
   1f2aa:	4620      	mov	r0, r4
   1f2ac:	f7fb f864 	bl	1a378 <net_send_data>
	if (ret < 0) {
   1f2b0:	1e05      	subs	r5, r0, #0
   1f2b2:	db0a      	blt.n	1f2ca <send_mldv2_raw+0x1c2>
	net_stats.icmp.sent++;
   1f2b4:	4b0d      	ldr	r3, [pc, #52]	; (1f2ec <send_mldv2_raw+0x1e4>)
   1f2b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f2b8:	3201      	adds	r2, #1
   1f2ba:	639a      	str	r2, [r3, #56]	; 0x38
	net_stats.ipv6_mld.recv++;
}

static inline void net_stats_update_ipv6_mld_sent(void)
{
	net_stats.ipv6_mld.sent++;
   1f2bc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1f2c0:	3201      	adds	r2, #1
   1f2c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}

	net_stats_update_icmp_sent();
	net_stats_update_ipv6_mld_sent();

	return 0;
   1f2c6:	2500      	movs	r5, #0
   1f2c8:	e00b      	b.n	1f2e2 <send_mldv2_raw+0x1da>

drop:
	net_pkt_unref(pkt);
   1f2ca:	4620      	mov	r0, r4
   1f2cc:	f7fd fc55 	bl	1cb7a <net_pkt_unref>
	net_stats.icmp.drop++;
   1f2d0:	4b06      	ldr	r3, [pc, #24]	; (1f2ec <send_mldv2_raw+0x1e4>)
   1f2d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1f2d4:	3201      	adds	r2, #1
   1f2d6:	63da      	str	r2, [r3, #60]	; 0x3c
}

static inline void net_stats_update_ipv6_mld_drop(void)
{
	net_stats.ipv6_mld.drop++;
   1f2d8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   1f2dc:	3201      	adds	r2, #1
   1f2de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_stats_update_icmp_drop();
	net_stats_update_ipv6_mld_drop();

	return ret;
}
   1f2e2:	4628      	mov	r0, r5
   1f2e4:	b00d      	add	sp, #52	; 0x34
   1f2e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f2ea:	bf00      	nop
   1f2ec:	20002950 	.word	0x20002950

0001f2f0 <send_mldv2>:

static int send_mldv2(struct net_if *iface, const struct in6_addr *addr,
		      u8_t mode)
{
   1f2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f2f2:	b083      	sub	sp, #12
   1f2f4:	4605      	mov	r5, r0
   1f2f6:	460e      	mov	r6, r1
   1f2f8:	4617      	mov	r7, r2
   1f2fa:	6843      	ldr	r3, [r0, #4]
   1f2fc:	689b      	ldr	r3, [r3, #8]
   1f2fe:	2100      	movs	r1, #0
   1f300:	4798      	blx	r3
	struct net_pkt *pkt;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1f302:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f306:	f7fd fbc7 	bl	1ca98 <net_pkt_get_reserve_tx>
   1f30a:	4604      	mov	r4, r0
	u16_t value = sys_cpu_to_be16(data);
   1f30c:	aa02      	add	r2, sp, #8
   1f30e:	f44f 7380 	mov.w	r3, #256	; 0x100
   1f312:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f31a:	2102      	movs	r1, #2
   1f31c:	f7fd fd65 	bl	1cdea <net_pkt_append>
				     K_FOREVER);

	net_pkt_append_be16(pkt, 1); /* number of records */

	pkt = create_mldv2(pkt, addr, mode, 1);
   1f320:	2301      	movs	r3, #1
   1f322:	463a      	mov	r2, r7
   1f324:	4631      	mov	r1, r6
   1f326:	4620      	mov	r0, r4
   1f328:	f7ff fdec 	bl	1ef04 <create_mldv2>
   1f32c:	4604      	mov	r4, r0

	ret = send_mldv2_raw(iface, pkt->frags);
   1f32e:	6881      	ldr	r1, [r0, #8]
   1f330:	4628      	mov	r0, r5
   1f332:	f7ff fee9 	bl	1f108 <send_mldv2_raw>
   1f336:	4605      	mov	r5, r0

	pkt->frags = NULL;
   1f338:	2300      	movs	r3, #0
   1f33a:	60a3      	str	r3, [r4, #8]

	net_pkt_unref(pkt);
   1f33c:	4620      	mov	r0, r4
   1f33e:	f7fd fc1c 	bl	1cb7a <net_pkt_unref>

	return ret;
}
   1f342:	4628      	mov	r0, r5
   1f344:	b003      	add	sp, #12
   1f346:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f348 <send_mld_report>:

	return ret;
}

static void send_mld_report(struct net_if *iface)
{
   1f348:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f34a:	b087      	sub	sp, #28
   1f34c:	4605      	mov	r5, r0
   1f34e:	6843      	ldr	r3, [r0, #4]
   1f350:	689b      	ldr	r3, [r3, #8]
   1f352:	2100      	movs	r1, #0
   1f354:	4798      	blx	r3
	struct net_pkt *pkt;
	int i, count = 0;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1f356:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f35a:	f7fd fb9d 	bl	1ca98 <net_pkt_get_reserve_tx>
   1f35e:	4606      	mov	r6, r0
   1f360:	2400      	movs	r4, #0
   1f362:	aa06      	add	r2, sp, #24
   1f364:	f802 4d04 	strb.w	r4, [r2, #-4]!
   1f368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f36c:	2101      	movs	r1, #1
   1f36e:	f7fd fd3c 	bl	1cdea <net_pkt_append>
	int i, count = 0;
   1f372:	4627      	mov	r7, r4
				     K_FOREVER);

	net_pkt_append_u8(pkt, 0); /* This will be the record count */

	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1f374:	e000      	b.n	1f378 <send_mld_report+0x30>
   1f376:	3401      	adds	r4, #1
   1f378:	2c04      	cmp	r4, #4
   1f37a:	dc1e      	bgt.n	1f3ba <send_mld_report+0x72>
		if (!iface->ipv6.mcast[i].is_used ||
   1f37c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1f380:	00d3      	lsls	r3, r2, #3
   1f382:	442b      	add	r3, r5
   1f384:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1f388:	f013 0f01 	tst.w	r3, #1
   1f38c:	d0f3      	beq.n	1f376 <send_mld_report+0x2e>
		    !iface->ipv6.mcast[i].is_joined) {
   1f38e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1f392:	00d3      	lsls	r3, r2, #3
   1f394:	461a      	mov	r2, r3
   1f396:	442b      	add	r3, r5
   1f398:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   1f39c:	f013 0f02 	tst.w	r3, #2
   1f3a0:	d0e9      	beq.n	1f376 <send_mld_report+0x2e>
			continue;
		}

		pkt = create_mldv2(pkt, &iface->ipv6.mcast[i].address.in6_addr,
   1f3a2:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1f3a6:	4429      	add	r1, r5
   1f3a8:	2300      	movs	r3, #0
   1f3aa:	2202      	movs	r2, #2
   1f3ac:	3118      	adds	r1, #24
   1f3ae:	4630      	mov	r0, r6
   1f3b0:	f7ff fda8 	bl	1ef04 <create_mldv2>
   1f3b4:	4606      	mov	r6, r0
				   NET_IPV6_MLDv2_MODE_IS_EXCLUDE, 0);
		count++;
   1f3b6:	3701      	adds	r7, #1
   1f3b8:	e7dd      	b.n	1f376 <send_mld_report+0x2e>
	}

	if (count > 0) {
   1f3ba:	2f00      	cmp	r7, #0
   1f3bc:	dd16      	ble.n	1f3ec <send_mld_report+0xa4>
		u16_t pos;

		/* Write back the record count */
		net_pkt_write_u8(pkt, pkt->frags, 0, &pos, count);
   1f3be:	68b1      	ldr	r1, [r6, #8]
   1f3c0:	f88d 7015 	strb.w	r7, [sp, #21]
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u8_t),
   1f3c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f3c8:	9302      	str	r3, [sp, #8]
   1f3ca:	f10d 0315 	add.w	r3, sp, #21
   1f3ce:	9301      	str	r3, [sp, #4]
   1f3d0:	2301      	movs	r3, #1
   1f3d2:	9300      	str	r3, [sp, #0]
   1f3d4:	f10d 0316 	add.w	r3, sp, #22
   1f3d8:	2200      	movs	r2, #0
   1f3da:	4630      	mov	r0, r6
   1f3dc:	f7fd fdbd 	bl	1cf5a <net_pkt_write>

		send_mldv2_raw(iface, pkt->frags);
   1f3e0:	68b1      	ldr	r1, [r6, #8]
   1f3e2:	4628      	mov	r0, r5
   1f3e4:	f7ff fe90 	bl	1f108 <send_mldv2_raw>

		pkt->frags = NULL;
   1f3e8:	2300      	movs	r3, #0
   1f3ea:	60b3      	str	r3, [r6, #8]
	}

	net_pkt_unref(pkt);
   1f3ec:	4630      	mov	r0, r6
   1f3ee:	f7fd fbc4 	bl	1cb7a <net_pkt_unref>
}
   1f3f2:	b007      	add	sp, #28
   1f3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0001f3f8 <handle_mld_query>:

static enum net_verdict handle_mld_query(struct net_pkt *pkt)
{
   1f3f8:	b570      	push	{r4, r5, r6, lr}
   1f3fa:	b08a      	sub	sp, #40	; 0x28
   1f3fc:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   1f3fe:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1f400:	2200      	movs	r2, #0
   1f402:	e002      	b.n	1f40a <handle_mld_query+0x12>
		bytes += buf->len;
   1f404:	8999      	ldrh	r1, [r3, #12]
   1f406:	440a      	add	r2, r1
		buf = buf->frags;
   1f408:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1f40a:	2b00      	cmp	r3, #0
   1f40c:	d1fa      	bne.n	1f404 <handle_mld_query+0xc>
	u16_t total_len = net_pkt_get_len(pkt);
   1f40e:	b294      	uxth	r4, r2
	net_stats.ipv6_mld.recv++;
   1f410:	4a37      	ldr	r2, [pc, #220]	; (1f4f0 <handle_mld_query+0xf8>)
   1f412:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1f416:	3301      	adds	r3, #1
   1f418:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	net_stats_update_ipv6_mld_recv();

	/* offset tells now where the ICMPv6 header is starting */
	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1f41c:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1f420:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1f424:	4419      	add	r1, r3
	frag = net_frag_get_pos(pkt,
   1f426:	3104      	adds	r1, #4
   1f428:	f10d 0212 	add.w	r2, sp, #18
   1f42c:	b289      	uxth	r1, r1
   1f42e:	4628      	mov	r0, r5
   1f430:	f7fd fe72 	bl	1d118 <net_frag_get_pos>
				sizeof(struct net_icmp_hdr),
				&offset);

	frag = net_frag_read_be16(frag, offset, &pos, &max_rsp_code);
   1f434:	f10d 0316 	add.w	r3, sp, #22
   1f438:	aa04      	add	r2, sp, #16
   1f43a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1f43e:	f7fd fd62 	bl	1cf06 <net_frag_read_be16>
	frag = net_frag_skip(frag, pos, &pos, 2); /* two reserved bytes */
   1f442:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	return net_frag_read(frag, offset, pos, len, NULL);
   1f446:	2600      	movs	r6, #0
   1f448:	9600      	str	r6, [sp, #0]
   1f44a:	2302      	movs	r3, #2
   1f44c:	aa04      	add	r2, sp, #16
   1f44e:	f7fd fd12 	bl	1ce76 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(mcast), mcast.s6_addr);
   1f452:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f456:	ab06      	add	r3, sp, #24
   1f458:	9300      	str	r3, [sp, #0]
   1f45a:	2310      	movs	r3, #16
   1f45c:	eb0d 0203 	add.w	r2, sp, r3
   1f460:	f7fd fd09 	bl	1ce76 <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 2); /* skip S, QRV & QQIC */
   1f464:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f468:	9600      	str	r6, [sp, #0]
   1f46a:	2302      	movs	r3, #2
   1f46c:	aa04      	add	r2, sp, #16
   1f46e:	f7fd fd02 	bl	1ce76 <net_frag_read>
	frag = net_frag_read_be16(pkt->frags, pos, &pos, &num_src);
   1f472:	ab05      	add	r3, sp, #20
   1f474:	aa04      	add	r2, sp, #16
   1f476:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f47a:	68a8      	ldr	r0, [r5, #8]
   1f47c:	f7fd fd43 	bl	1cf06 <net_frag_read_be16>
	if (!frag && pos == 0xffff) {
   1f480:	b358      	cbz	r0, 1f4da <handle_mld_query+0xe2>
		goto drop;
	}

	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   1f482:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
		sizeof(struct in6_addr) * num_src;
   1f486:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f48a:	0112      	lsls	r2, r2, #4
   1f48c:	b292      	uxth	r2, r2
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
   1f48e:	4413      	add	r3, r2
   1f490:	b29b      	uxth	r3, r3
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   1f492:	3344      	adds	r3, #68	; 0x44
   1f494:	b29b      	uxth	r3, r3

	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1f496:	429c      	cmp	r4, r3
   1f498:	d307      	bcc.n	1f4aa <handle_mld_query+0xb2>
   1f49a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   1f49e:	d804      	bhi.n	1f4aa <handle_mld_query+0xb2>
	return pkt->frags->data;
   1f4a0:	68ab      	ldr	r3, [r5, #8]
   1f4a2:	689b      	ldr	r3, [r3, #8]
	     (NET_IPV6_HDR(pkt)->hop_limit != 1))) {
   1f4a4:	79db      	ldrb	r3, [r3, #7]
	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1f4a6:	2b01      	cmp	r3, #1
   1f4a8:	d006      	beq.n	1f4b8 <handle_mld_query+0xc0>
		struct net_icmp_hdr hdr, *icmp_hdr;

		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1f4aa:	a903      	add	r1, sp, #12
   1f4ac:	4628      	mov	r0, r5
   1f4ae:	f7fe fc68 	bl	1dd82 <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1f4b2:	b148      	cbz	r0, 1f4c8 <handle_mld_query+0xd0>
   1f4b4:	7843      	ldrb	r3, [r0, #1]
   1f4b6:	b93b      	cbnz	r3, 1f4c8 <handle_mld_query+0xd0>
			goto drop;
		}
	}

	/* Currently we only support a unspecified address query. */
	if (!net_ipv6_addr_cmp(&mcast, net_ipv6_unspecified_address())) {
   1f4b8:	f7ff fd20 	bl	1eefc <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1f4bc:	2210      	movs	r2, #16
   1f4be:	4601      	mov	r1, r0
   1f4c0:	a806      	add	r0, sp, #24
   1f4c2:	f00a f875 	bl	295b0 <memcmp>
   1f4c6:	b178      	cbz	r0, 1f4e8 <handle_mld_query+0xf0>
	net_stats.ipv6_mld.drop++;
   1f4c8:	4a09      	ldr	r2, [pc, #36]	; (1f4f0 <handle_mld_query+0xf8>)
   1f4ca:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   1f4ce:	3301      	adds	r3, #1
   1f4d0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

drop:
	net_stats_update_ipv6_mld_drop();

	return NET_DROP;
}
   1f4d4:	2002      	movs	r0, #2
   1f4d6:	b00a      	add	sp, #40	; 0x28
   1f4d8:	bd70      	pop	{r4, r5, r6, pc}
	if (!frag && pos == 0xffff) {
   1f4da:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   1f4de:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f4e2:	429a      	cmp	r2, r3
   1f4e4:	d1cd      	bne.n	1f482 <handle_mld_query+0x8a>
   1f4e6:	e7ef      	b.n	1f4c8 <handle_mld_query+0xd0>
	send_mld_report(net_pkt_iface(pkt));
   1f4e8:	6968      	ldr	r0, [r5, #20]
   1f4ea:	f7ff ff2d 	bl	1f348 <send_mld_report>
   1f4ee:	e7eb      	b.n	1f4c8 <handle_mld_query+0xd0>
   1f4f0:	20002950 	.word	0x20002950

0001f4f4 <net_ipv6_finalize>:
{
   1f4f4:	b508      	push	{r3, lr}
   1f4f6:	460b      	mov	r3, r1
	if (context->flags & NET_CONTEXT_PROTO) {
   1f4f8:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   1f4fc:	f012 0f40 	tst.w	r2, #64	; 0x40
   1f500:	d104      	bne.n	1f50c <net_ipv6_finalize+0x18>
	return IPPROTO_UDP;
   1f502:	2111      	movs	r1, #17
	return net_ipv6_finalize_raw(pkt, net_context_get_ip_proto(context));
   1f504:	4618      	mov	r0, r3
   1f506:	f7ff fdd2 	bl	1f0ae <net_ipv6_finalize_raw>
}
   1f50a:	bd08      	pop	{r3, pc}
		return IPPROTO_TCP;
   1f50c:	2106      	movs	r1, #6
   1f50e:	e7f9      	b.n	1f504 <net_ipv6_finalize+0x10>

0001f510 <net_ipv6_nbr_lookup>:
{
   1f510:	b508      	push	{r3, lr}
	return nbr_lookup(&net_neighbor.table, iface, addr);
   1f512:	460a      	mov	r2, r1
   1f514:	4601      	mov	r1, r0
   1f516:	4802      	ldr	r0, [pc, #8]	; (1f520 <net_ipv6_nbr_lookup+0x10>)
   1f518:	f7ff fb42 	bl	1eba0 <nbr_lookup>
}
   1f51c:	bd08      	pop	{r3, pc}
   1f51e:	bf00      	nop
   1f520:	2000bd44 	.word	0x2000bd44

0001f524 <net_ipv6_send_na>:
{
   1f524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f528:	b093      	sub	sp, #76	; 0x4c
   1f52a:	4605      	mov	r5, r0
   1f52c:	468b      	mov	fp, r1
   1f52e:	4692      	mov	sl, r2
   1f530:	4699      	mov	r9, r3
   1f532:	6843      	ldr	r3, [r0, #4]
   1f534:	689b      	ldr	r3, [r3, #8]
   1f536:	4611      	mov	r1, r2
   1f538:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1f53a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f53e:	f7fd faab 	bl	1ca98 <net_pkt_get_reserve_tx>
   1f542:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   1f544:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f548:	f7fd fac4 	bl	1cad4 <net_pkt_get_frag>
   1f54c:	4607      	mov	r7, r0
	net_pkt_frag_add(pkt, frag);
   1f54e:	4601      	mov	r1, r0
   1f550:	4620      	mov	r0, r4
   1f552:	f7fd fb3c 	bl	1cbce <net_pkt_frag_add>
	pkt->iface = iface;
   1f556:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f558:	7d6b      	ldrb	r3, [r5, #21]
   1f55a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f55e:	7d6b      	ldrb	r3, [r5, #21]
   1f560:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   1f564:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1f568:	220a      	movs	r2, #10
   1f56a:	f362 03c6 	bfi	r3, r2, #3, #4
   1f56e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   1f572:	2328      	movs	r3, #40	; 0x28
   1f574:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   1f578:	68a3      	ldr	r3, [r4, #8]
   1f57a:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   1f57c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   1f580:	461a      	mov	r2, r3
   1f582:	2100      	movs	r1, #0
   1f584:	1ac0      	subs	r0, r0, r3
   1f586:	f00a f8a7 	bl	296d8 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   1f58a:	2300      	movs	r3, #0
   1f58c:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   1f58e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (iface->link_addr.len == 6) {
   1f592:	7d2b      	ldrb	r3, [r5, #20]
   1f594:	2b06      	cmp	r3, #6
   1f596:	f000 8092 	beq.w	1f6be <net_ipv6_send_na+0x19a>
	} else if (iface->link_addr.len == 8) {
   1f59a:	2b08      	cmp	r3, #8
   1f59c:	f000 808d 	beq.w	1f6ba <net_ipv6_send_na+0x196>
	return 0;
   1f5a0:	2600      	movs	r6, #0
	pkt->ipv6_ext_len = len;
   1f5a2:	f04f 0800 	mov.w	r8, #0
   1f5a6:	f884 803b 	strb.w	r8, [r4, #59]	; 0x3b
	setup_headers(pkt, sizeof(struct net_icmpv6_na_hdr) + llao_len,
   1f5aa:	f106 0514 	add.w	r5, r6, #20
   1f5ae:	2288      	movs	r2, #136	; 0x88
   1f5b0:	f005 01fc 	and.w	r1, r5, #252	; 0xfc
   1f5b4:	4620      	mov	r0, r4
   1f5b6:	f7ff fc0c 	bl	1edd2 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   1f5ba:	4629      	mov	r1, r5
   1f5bc:	f107 0008 	add.w	r0, r7, #8
   1f5c0:	f7fa fdb8 	bl	1a134 <net_buf_simple_add>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1f5c4:	a901      	add	r1, sp, #4
   1f5c6:	4620      	mov	r0, r4
   1f5c8:	f7fe fdd8 	bl	1e17c <net_icmpv6_get_na_hdr>
   1f5cc:	4607      	mov	r7, r0
	return pkt->frags->data;
   1f5ce:	68a3      	ldr	r3, [r4, #8]
   1f5d0:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1f5d4:	ad06      	add	r5, sp, #24
   1f5d6:	f8db 0000 	ldr.w	r0, [fp]
   1f5da:	f8db 1004 	ldr.w	r1, [fp, #4]
   1f5de:	f8db 2008 	ldr.w	r2, [fp, #8]
   1f5e2:	f8db 300c 	ldr.w	r3, [fp, #12]
   1f5e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f5e8:	ad06      	add	r5, sp, #24
   1f5ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f5ec:	f8ce 0008 	str.w	r0, [lr, #8]
   1f5f0:	f8ce 100c 	str.w	r1, [lr, #12]
   1f5f4:	f8ce 2010 	str.w	r2, [lr, #16]
   1f5f8:	f8ce 3014 	str.w	r3, [lr, #20]
   1f5fc:	68a3      	ldr	r3, [r4, #8]
   1f5fe:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1f602:	ad0a      	add	r5, sp, #40	; 0x28
   1f604:	f8da 0000 	ldr.w	r0, [sl]
   1f608:	f8da 1004 	ldr.w	r1, [sl, #4]
   1f60c:	f8da 2008 	ldr.w	r2, [sl, #8]
   1f610:	f8da 300c 	ldr.w	r3, [sl, #12]
   1f614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f616:	ad0a      	add	r5, sp, #40	; 0x28
   1f618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f61a:	f8cc 0018 	str.w	r0, [ip, #24]
   1f61e:	f8cc 101c 	str.w	r1, [ip, #28]
   1f622:	f8cc 2020 	str.w	r2, [ip, #32]
   1f626:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   1f62a:	ad0e      	add	r5, sp, #56	; 0x38
   1f62c:	f8d9 0000 	ldr.w	r0, [r9]
   1f630:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1f634:	f8d9 2008 	ldr.w	r2, [r9, #8]
   1f638:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1f63c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f63e:	ad0e      	add	r5, sp, #56	; 0x38
   1f640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f642:	6078      	str	r0, [r7, #4]
   1f644:	60b9      	str	r1, [r7, #8]
   1f646:	60fa      	str	r2, [r7, #12]
   1f648:	613b      	str	r3, [r7, #16]
	return pkt->iface;
   1f64a:	f8d4 a014 	ldr.w	sl, [r4, #20]
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   1f64e:	4620      	mov	r0, r4
   1f650:	f7fd fd6c 	bl	1d12c <net_pkt_icmp_data>
	set_llao(&net_pkt_iface(pkt)->link_addr,
   1f654:	f100 0518 	add.w	r5, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   1f658:	2302      	movs	r3, #2
   1f65a:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   1f65c:	08f3      	lsrs	r3, r6, #3
   1f65e:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   1f660:	f89a 2014 	ldrb.w	r2, [sl, #20]
   1f664:	f8da 1010 	ldr.w	r1, [sl, #16]
   1f668:	301a      	adds	r0, #26
   1f66a:	f7e0 fe29 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1f66e:	f89a 2014 	ldrb.w	r2, [sl, #20]
   1f672:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   1f674:	1ab2      	subs	r2, r6, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1f676:	3a02      	subs	r2, #2
   1f678:	4641      	mov	r1, r8
   1f67a:	4428      	add	r0, r5
   1f67c:	f00a f82c 	bl	296d8 <memset>
	na_hdr->flags = flags;
   1f680:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   1f684:	703b      	strb	r3, [r7, #0]
	net_icmpv6_set_na_hdr(pkt, na_hdr);
   1f686:	4639      	mov	r1, r7
   1f688:	4620      	mov	r0, r4
   1f68a:	f7fe fdac 	bl	1e1e6 <net_icmpv6_set_na_hdr>
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   1f68e:	68a3      	ldr	r3, [r4, #8]
		sizeof(struct net_icmpv6_na_hdr) + llao_len;
   1f690:	3640      	adds	r6, #64	; 0x40
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   1f692:	819e      	strh	r6, [r3, #12]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1f694:	68a1      	ldr	r1, [r4, #8]
   1f696:	4620      	mov	r0, r4
   1f698:	f7fe fb26 	bl	1dce8 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   1f69c:	4620      	mov	r0, r4
   1f69e:	f7fa fe6b 	bl	1a378 <net_send_data>
   1f6a2:	4540      	cmp	r0, r8
   1f6a4:	db0d      	blt.n	1f6c2 <net_ipv6_send_na+0x19e>
	net_stats.ipv6_nd.sent++;
   1f6a6:	4a0d      	ldr	r2, [pc, #52]	; (1f6dc <net_ipv6_send_na+0x1b8>)
   1f6a8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1f6ac:	3301      	adds	r3, #1
   1f6ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   1f6b2:	4640      	mov	r0, r8
}
   1f6b4:	b013      	add	sp, #76	; 0x4c
   1f6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   1f6ba:	2610      	movs	r6, #16
   1f6bc:	e771      	b.n	1f5a2 <net_ipv6_send_na+0x7e>
		return 8;
   1f6be:	2608      	movs	r6, #8
   1f6c0:	e76f      	b.n	1f5a2 <net_ipv6_send_na+0x7e>
	net_pkt_unref(pkt);
   1f6c2:	4620      	mov	r0, r4
   1f6c4:	f7fd fa59 	bl	1cb7a <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   1f6c8:	4a04      	ldr	r2, [pc, #16]	; (1f6dc <net_ipv6_send_na+0x1b8>)
   1f6ca:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1f6ce:	3301      	adds	r3, #1
   1f6d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   1f6d4:	f06f 0015 	mvn.w	r0, #21
   1f6d8:	e7ec      	b.n	1f6b4 <net_ipv6_send_na+0x190>
   1f6da:	bf00      	nop
   1f6dc:	20002950 	.word	0x20002950

0001f6e0 <net_ipv6_nbr_set_reachable_timer>:
{
   1f6e0:	b508      	push	{r3, lr}
   1f6e2:	68c9      	ldr	r1, [r1, #12]
   1f6e4:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
   1f6e8:	3114      	adds	r1, #20
   1f6ea:	4802      	ldr	r0, [pc, #8]	; (1f6f4 <net_ipv6_nbr_set_reachable_timer+0x14>)
   1f6ec:	f009 fe6a 	bl	293c4 <k_delayed_work_submit_to_queue>
   1f6f0:	bd08      	pop	{r3, pc}
   1f6f2:	bf00      	nop
   1f6f4:	20002a70 	.word	0x20002a70

0001f6f8 <handle_na_input>:
{
   1f6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f6fc:	b090      	sub	sp, #64	; 0x40
   1f6fe:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   1f700:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1f702:	2200      	movs	r2, #0
   1f704:	e002      	b.n	1f70c <handle_na_input+0x14>
		bytes += buf->len;
   1f706:	8999      	ldrh	r1, [r3, #12]
   1f708:	440a      	add	r2, r1
		buf = buf->frags;
   1f70a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1f70c:	2b00      	cmp	r3, #0
   1f70e:	d1fa      	bne.n	1f706 <handle_na_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   1f710:	b295      	uxth	r5, r2
	na_hdr = net_icmpv6_get_na_hdr(pkt, &nahdr);
   1f712:	a90a      	add	r1, sp, #40	; 0x28
   1f714:	4620      	mov	r0, r4
   1f716:	f7fe fd31 	bl	1e17c <net_icmpv6_get_na_hdr>
   1f71a:	4607      	mov	r7, r0
	net_stats.ipv6_nd.recv++;
   1f71c:	4aaf      	ldr	r2, [pc, #700]	; (1f9dc <handle_na_input+0x2e4>)
   1f71e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1f722:	3301      	adds	r3, #1
   1f724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   1f728:	2d41      	cmp	r5, #65	; 0x41
   1f72a:	d904      	bls.n	1f736 <handle_na_input+0x3e>
	return pkt->frags->data;
   1f72c:	68a3      	ldr	r3, [r4, #8]
   1f72e:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1f730:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   1f732:	2bff      	cmp	r3, #255	; 0xff
   1f734:	d010      	beq.n	1f758 <handle_na_input+0x60>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1f736:	a905      	add	r1, sp, #20
   1f738:	4620      	mov	r0, r4
   1f73a:	f7fe fb22 	bl	1dd82 <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1f73e:	b108      	cbz	r0, 1f744 <handle_na_input+0x4c>
   1f740:	7843      	ldrb	r3, [r0, #1]
   1f742:	b1cb      	cbz	r3, 1f778 <handle_na_input+0x80>
	net_stats.ipv6_nd.drop++;
   1f744:	4aa5      	ldr	r2, [pc, #660]	; (1f9dc <handle_na_input+0x2e4>)
   1f746:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1f74a:	3301      	adds	r3, #1
   1f74c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   1f750:	2002      	movs	r0, #2
}
   1f752:	b010      	add	sp, #64	; 0x40
   1f754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return addr->s6_addr[0] == 0xFF;
   1f758:	7903      	ldrb	r3, [r0, #4]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1f75a:	2bff      	cmp	r3, #255	; 0xff
   1f75c:	d0eb      	beq.n	1f736 <handle_na_input+0x3e>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1f75e:	a905      	add	r1, sp, #20
   1f760:	4620      	mov	r0, r4
   1f762:	f7fe fd0b 	bl	1e17c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   1f766:	7803      	ldrb	r3, [r0, #0]
	    net_is_ipv6_addr_mcast(&na_hdr->tgt) ||
   1f768:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f76c:	d004      	beq.n	1f778 <handle_na_input+0x80>
   1f76e:	68a3      	ldr	r3, [r4, #8]
   1f770:	689b      	ldr	r3, [r3, #8]
   1f772:	7e1b      	ldrb	r3, [r3, #24]
	    (net_is_solicited(pkt) &&
   1f774:	2bff      	cmp	r3, #255	; 0xff
   1f776:	d0de      	beq.n	1f736 <handle_na_input+0x3e>
	pkt->ipv6_ext_opt_len = len;
   1f778:	2314      	movs	r3, #20
   1f77a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1f77e:	a90f      	add	r1, sp, #60	; 0x3c
   1f780:	4620      	mov	r0, r4
   1f782:	f7fe fcc9 	bl	1e118 <net_icmpv6_get_nd_opt_hdr>
	return net_buf_frags_len(pkt->frags);
   1f786:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   1f788:	2600      	movs	r6, #0
	while (buf) {
   1f78a:	b11b      	cbz	r3, 1f794 <handle_na_input+0x9c>
		bytes += buf->len;
   1f78c:	899a      	ldrh	r2, [r3, #12]
   1f78e:	4416      	add	r6, r2
		buf = buf->frags;
   1f790:	681b      	ldr	r3, [r3, #0]
   1f792:	e7fa      	b.n	1f78a <handle_na_input+0x92>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   1f794:	3e2c      	subs	r6, #44	; 0x2c
	u16_t tllao_offset = 0;
   1f796:	2500      	movs	r5, #0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   1f798:	e00b      	b.n	1f7b2 <handle_na_input+0xba>
					     (nd_opt_hdr->len << 3));
   1f79a:	00db      	lsls	r3, r3, #3
   1f79c:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   1f79e:	4413      	add	r3, r2
   1f7a0:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   1f7a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   1f7a6:	4293      	cmp	r3, r2
   1f7a8:	d9cc      	bls.n	1f744 <handle_na_input+0x4c>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1f7aa:	a90f      	add	r1, sp, #60	; 0x3c
   1f7ac:	4620      	mov	r0, r4
   1f7ae:	f7fe fcb3 	bl	1e118 <net_icmpv6_get_nd_opt_hdr>
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   1f7b2:	b190      	cbz	r0, 1f7da <handle_na_input+0xe2>
	return pkt->ipv6_ext_opt_len;
   1f7b4:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   1f7b8:	4296      	cmp	r6, r2
   1f7ba:	d90e      	bls.n	1f7da <handle_na_input+0xe2>
		if (!nd_opt_hdr->len) {
   1f7bc:	7843      	ldrb	r3, [r0, #1]
   1f7be:	b163      	cbz	r3, 1f7da <handle_na_input+0xe2>
		switch (nd_opt_hdr->type) {
   1f7c0:	7801      	ldrb	r1, [r0, #0]
   1f7c2:	2902      	cmp	r1, #2
   1f7c4:	d1e9      	bne.n	1f79a <handle_na_input+0xa2>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1f7c6:	f894 5033 	ldrb.w	r5, [r4, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1f7ca:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1f7ce:	440d      	add	r5, r1
				sizeof(struct net_icmp_hdr) +
   1f7d0:	4415      	add	r5, r2
   1f7d2:	b2ad      	uxth	r5, r5
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1f7d4:	3506      	adds	r5, #6
   1f7d6:	b2ad      	uxth	r5, r5
			break;
   1f7d8:	e7df      	b.n	1f79a <handle_na_input+0xa2>
	return pkt->iface;
   1f7da:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   1f7de:	f107 0904 	add.w	r9, r7, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1f7e2:	2600      	movs	r6, #0
   1f7e4:	e003      	b.n	1f7ee <handle_na_input+0xf6>
		if (net_is_ipv6_prefix(addr->s6_addr,
   1f7e6:	f1ba 0f00 	cmp.w	sl, #0
   1f7ea:	d11f      	bne.n	1f82c <handle_na_input+0x134>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1f7ec:	3601      	adds	r6, #1
   1f7ee:	2e02      	cmp	r6, #2
   1f7f0:	dc23      	bgt.n	1f83a <handle_na_input+0x142>
		if (!iface->ipv6.unicast[i].is_used ||
   1f7f2:	236c      	movs	r3, #108	; 0x6c
   1f7f4:	fb03 8306 	mla	r3, r3, r6, r8
   1f7f8:	f893 a094 	ldrb.w	sl, [r3, #148]	; 0x94
   1f7fc:	f1ba 0f00 	cmp.w	sl, #0
   1f800:	d0f4      	beq.n	1f7ec <handle_na_input+0xf4>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1f802:	236c      	movs	r3, #108	; 0x6c
   1f804:	fb03 8306 	mla	r3, r3, r6, r8
   1f808:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   1f80a:	2b0a      	cmp	r3, #10
   1f80c:	d1ee      	bne.n	1f7ec <handle_na_input+0xf4>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   1f80e:	216c      	movs	r1, #108	; 0x6c
   1f810:	fb01 f106 	mul.w	r1, r1, r6
   1f814:	3120      	adds	r1, #32
   1f816:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   1f818:	2210      	movs	r2, #16
   1f81a:	4411      	add	r1, r2
   1f81c:	4648      	mov	r0, r9
   1f81e:	f009 fec7 	bl	295b0 <memcmp>
   1f822:	2800      	cmp	r0, #0
   1f824:	d0df      	beq.n	1f7e6 <handle_na_input+0xee>
		return false;
   1f826:	f04f 0a00 	mov.w	sl, #0
   1f82a:	e7dc      	b.n	1f7e6 <handle_na_input+0xee>
			return &iface->ipv6.unicast[i];
   1f82c:	236c      	movs	r3, #108	; 0x6c
   1f82e:	fb03 f306 	mul.w	r3, r3, r6
   1f832:	3320      	adds	r3, #32
   1f834:	4443      	add	r3, r8
   1f836:	330c      	adds	r3, #12
   1f838:	e000      	b.n	1f83c <handle_na_input+0x144>
	return NULL;
   1f83a:	2300      	movs	r3, #0
	if (ifaddr) {
   1f83c:	b17b      	cbz	r3, 1f85e <handle_na_input+0x166>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   1f83e:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
   1f842:	2b00      	cmp	r3, #0
   1f844:	f47f af7e 	bne.w	1f744 <handle_na_input+0x4c>
   1f848:	6960      	ldr	r0, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1f84a:	88ba      	ldrh	r2, [r7, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   1f84c:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1f850:	429a      	cmp	r2, r3
   1f852:	f43f af77 	beq.w	1f744 <handle_na_input+0x4c>
	net_if_ipv6_dad_failed(iface, addr);
   1f856:	4649      	mov	r1, r9
   1f858:	f7fb fa0a 	bl	1ac70 <net_if_ipv6_dad_failed>
   1f85c:	e772      	b.n	1f744 <handle_na_input+0x4c>
	struct net_linkaddr_storage lladdr = { 0 };
   1f85e:	2300      	movs	r3, #0
   1f860:	9303      	str	r3, [sp, #12]
   1f862:	9304      	str	r3, [sp, #16]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
   1f864:	1d3a      	adds	r2, r7, #4
   1f866:	6961      	ldr	r1, [r4, #20]
   1f868:	485d      	ldr	r0, [pc, #372]	; (1f9e0 <handle_na_input+0x2e8>)
   1f86a:	f7ff f999 	bl	1eba0 <nbr_lookup>
	if (!nbr) {
   1f86e:	4606      	mov	r6, r0
   1f870:	2800      	cmp	r0, #0
   1f872:	f000 8107 	beq.w	1fa84 <handle_na_input+0x38c>
	if (tllao_offset) {
   1f876:	b995      	cbnz	r5, 1f89e <handle_na_input+0x1a6>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1f878:	7873      	ldrb	r3, [r6, #1]
   1f87a:	2bff      	cmp	r3, #255	; 0xff
   1f87c:	d135      	bne.n	1f8ea <handle_na_input+0x1f2>
		if (!tllao_offset) {
   1f87e:	bb2d      	cbnz	r5, 1f8cc <handle_na_input+0x1d4>
			return false;
   1f880:	2300      	movs	r3, #0
	if (!handle_na_neighbor(pkt, na_hdr, tllao_offset)) {
   1f882:	2b00      	cmp	r3, #0
   1f884:	f43f af5e 	beq.w	1f744 <handle_na_input+0x4c>
	net_pkt_unref(pkt);
   1f888:	4620      	mov	r0, r4
   1f88a:	f7fd f976 	bl	1cb7a <net_pkt_unref>
	net_stats.ipv6_nd.sent++;
   1f88e:	4a53      	ldr	r2, [pc, #332]	; (1f9dc <handle_na_input+0x2e4>)
   1f890:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1f894:	3301      	adds	r3, #1
   1f896:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return NET_OK;
   1f89a:	2000      	movs	r0, #0
   1f89c:	e759      	b.n	1f752 <handle_na_input+0x5a>
   1f89e:	6963      	ldr	r3, [r4, #20]
		lladdr.len = net_pkt_iface(pkt)->link_addr.len;
   1f8a0:	7d1b      	ldrb	r3, [r3, #20]
   1f8a2:	f88d 300d 	strb.w	r3, [sp, #13]
		frag = net_frag_read(pkt->frags, tllao_offset,
   1f8a6:	f10d 020e 	add.w	r2, sp, #14
   1f8aa:	9200      	str	r2, [sp, #0]
   1f8ac:	f10d 020a 	add.w	r2, sp, #10
   1f8b0:	4629      	mov	r1, r5
   1f8b2:	68a0      	ldr	r0, [r4, #8]
   1f8b4:	f7fd fadf 	bl	1ce76 <net_frag_read>
		if (!frag && pos == 0xffff) {
   1f8b8:	2800      	cmp	r0, #0
   1f8ba:	d1dd      	bne.n	1f878 <handle_na_input+0x180>
   1f8bc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1f8c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f8c4:	429a      	cmp	r2, r3
   1f8c6:	d1d7      	bne.n	1f878 <handle_na_input+0x180>
			return false;
   1f8c8:	2300      	movs	r3, #0
   1f8ca:	e7da      	b.n	1f882 <handle_na_input+0x18a>
		nbr_lladdr.len = lladdr.len;
   1f8cc:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1f8d0:	f88d 3018 	strb.w	r3, [sp, #24]
		nbr_lladdr.addr = lladdr.addr;
   1f8d4:	aa10      	add	r2, sp, #64	; 0x40
   1f8d6:	f10d 030e 	add.w	r3, sp, #14
   1f8da:	f842 3d2c 	str.w	r3, [r2, #-44]!
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   1f8de:	6961      	ldr	r1, [r4, #20]
   1f8e0:	4630      	mov	r0, r6
   1f8e2:	f7fe ff77 	bl	1e7d4 <net_nbr_link>
   1f8e6:	2800      	cmp	r0, #0
   1f8e8:	d14a      	bne.n	1f980 <handle_na_input+0x288>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1f8ea:	7870      	ldrb	r0, [r6, #1]
   1f8ec:	f7fe ffd8 	bl	1e8a0 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   1f8f0:	4680      	mov	r8, r0
   1f8f2:	2800      	cmp	r0, #0
   1f8f4:	f000 80c8 	beq.w	1fa88 <handle_na_input+0x390>
	if (tllao_offset) {
   1f8f8:	2d00      	cmp	r5, #0
   1f8fa:	d145      	bne.n	1f988 <handle_na_input+0x290>
	bool lladdr_changed = false;
   1f8fc:	2700      	movs	r7, #0
   1f8fe:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   1f900:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1f904:	2b00      	cmp	r3, #0
   1f906:	d155      	bne.n	1f9b4 <handle_na_input+0x2bc>
		if (!tllao_offset) {
   1f908:	2d00      	cmp	r5, #0
   1f90a:	f000 80bf 	beq.w	1fa8c <handle_na_input+0x394>
		if (lladdr_changed) {
   1f90e:	b11f      	cbz	r7, 1f918 <handle_na_input+0x220>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   1f910:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1f914:	2a06      	cmp	r2, #6
   1f916:	d941      	bls.n	1f99c <handle_na_input+0x2a4>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1f918:	a905      	add	r1, sp, #20
   1f91a:	4620      	mov	r0, r4
   1f91c:	f7fe fc2e 	bl	1e17c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   1f920:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   1f922:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f926:	d040      	beq.n	1f9aa <handle_na_input+0x2b2>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   1f928:	2101      	movs	r1, #1
   1f92a:	4630      	mov	r0, r6
   1f92c:	f7fe ffc0 	bl	1e8b0 <ipv6_nbr_set_state>
   1f930:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->ns_count = 0;
   1f932:	2200      	movs	r2, #0
   1f934:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   1f938:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   1f93a:	3014      	adds	r0, #20
   1f93c:	f009 fce8 	bl	29310 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   1f940:	4631      	mov	r1, r6
   1f942:	6960      	ldr	r0, [r4, #20]
   1f944:	f7ff fecc 	bl	1f6e0 <net_ipv6_nbr_set_reachable_timer>
   1f948:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1f94a:	a905      	add	r1, sp, #20
   1f94c:	4620      	mov	r0, r4
   1f94e:	f7fe fc15 	bl	1e17c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   1f952:	7803      	ldrb	r3, [r0, #0]
   1f954:	09db      	lsrs	r3, r3, #7
		net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   1f956:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   1f95a:	68f3      	ldr	r3, [r6, #12]
	pending = net_ipv6_nbr_data(nbr)->pending;
   1f95c:	681d      	ldr	r5, [r3, #0]
	if (pending) {
   1f95e:	2d00      	cmp	r5, #0
   1f960:	f000 8098 	beq.w	1fa94 <handle_na_input+0x39c>
		if (net_send_data(pending) < 0) {
   1f964:	4628      	mov	r0, r5
   1f966:	f7fa fd07 	bl	1a378 <net_send_data>
   1f96a:	2800      	cmp	r0, #0
   1f96c:	f2c0 8086 	blt.w	1fa7c <handle_na_input+0x384>
   1f970:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->pending = NULL;
   1f972:	2200      	movs	r2, #0
   1f974:	601a      	str	r2, [r3, #0]
		net_pkt_unref(pending);
   1f976:	4628      	mov	r0, r5
   1f978:	f7fd f8ff 	bl	1cb7a <net_pkt_unref>
	return true;
   1f97c:	2301      	movs	r3, #1
   1f97e:	e780      	b.n	1f882 <handle_na_input+0x18a>
			nbr_free(nbr);
   1f980:	4630      	mov	r0, r6
   1f982:	f7ff fa53 	bl	1ee2c <nbr_free>
   1f986:	e77b      	b.n	1f880 <handle_na_input+0x188>
		lladdr_changed = memcmp(lladdr.addr,
   1f988:	7842      	ldrb	r2, [r0, #1]
   1f98a:	1c81      	adds	r1, r0, #2
   1f98c:	f10d 000e 	add.w	r0, sp, #14
   1f990:	f009 fe0e 	bl	295b0 <memcmp>
   1f994:	1c07      	adds	r7, r0, #0
   1f996:	bf18      	it	ne
   1f998:	2701      	movne	r7, #1
   1f99a:	e7b0      	b.n	1f8fe <handle_na_input+0x206>
	memcpy(lladdr_store->addr, new_addr, new_len);
   1f99c:	f10d 010e 	add.w	r1, sp, #14
   1f9a0:	f108 0002 	add.w	r0, r8, #2
   1f9a4:	f7e0 fc8c 	bl	2c0 <memcpy>
   1f9a8:	e7b6      	b.n	1f918 <handle_na_input+0x220>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1f9aa:	2102      	movs	r1, #2
   1f9ac:	4630      	mov	r0, r6
   1f9ae:	f7fe ff7f 	bl	1e8b0 <ipv6_nbr_set_state>
   1f9b2:	e7c9      	b.n	1f948 <handle_na_input+0x250>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1f9b4:	a905      	add	r1, sp, #20
   1f9b6:	4620      	mov	r0, r4
   1f9b8:	f7fe fbe0 	bl	1e17c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   1f9bc:	7803      	ldrb	r3, [r0, #0]
	if (!net_is_override(pkt) && lladdr_changed) {
   1f9be:	f013 0f20 	tst.w	r3, #32
   1f9c2:	d10f      	bne.n	1f9e4 <handle_na_input+0x2ec>
   1f9c4:	b177      	cbz	r7, 1f9e4 <handle_na_input+0x2ec>
   1f9c6:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state ==
   1f9c8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1f9cc:	2b01      	cmp	r3, #1
   1f9ce:	d15f      	bne.n	1fa90 <handle_na_input+0x398>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1f9d0:	2102      	movs	r1, #2
   1f9d2:	4630      	mov	r0, r6
   1f9d4:	f7fe ff6c 	bl	1e8b0 <ipv6_nbr_set_state>
		return false;
   1f9d8:	2300      	movs	r3, #0
   1f9da:	e752      	b.n	1f882 <handle_na_input+0x18a>
   1f9dc:	20002950 	.word	0x20002950
   1f9e0:	2000bd44 	.word	0x2000bd44
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1f9e4:	a905      	add	r1, sp, #20
   1f9e6:	4620      	mov	r0, r4
   1f9e8:	f7fe fbc8 	bl	1e17c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   1f9ec:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   1f9ee:	f013 0f20 	tst.w	r3, #32
   1f9f2:	d018      	beq.n	1fa26 <handle_na_input+0x32e>
		if (lladdr_changed) {
   1f9f4:	b14f      	cbz	r7, 1fa0a <handle_na_input+0x312>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   1f9f6:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1f9fa:	2a06      	cmp	r2, #6
   1f9fc:	d805      	bhi.n	1fa0a <handle_na_input+0x312>
	memcpy(lladdr_store->addr, new_addr, new_len);
   1f9fe:	f10d 010e 	add.w	r1, sp, #14
   1fa02:	f108 0002 	add.w	r0, r8, #2
   1fa06:	f7e0 fc5b 	bl	2c0 <memcpy>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fa0a:	a905      	add	r1, sp, #20
   1fa0c:	4620      	mov	r0, r4
   1fa0e:	f7fe fbb5 	bl	1e17c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   1fa12:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   1fa14:	f013 0f40 	tst.w	r3, #64	; 0x40
   1fa18:	d11e      	bne.n	1fa58 <handle_na_input+0x360>
			if (lladdr_changed) {
   1fa1a:	b17f      	cbz	r7, 1fa3c <handle_na_input+0x344>
				ipv6_nbr_set_state(nbr,
   1fa1c:	2102      	movs	r1, #2
   1fa1e:	4630      	mov	r0, r6
   1fa20:	f7fe ff46 	bl	1e8b0 <ipv6_nbr_set_state>
   1fa24:	e00a      	b.n	1fa3c <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fa26:	a905      	add	r1, sp, #20
   1fa28:	4620      	mov	r0, r4
   1fa2a:	f7fe fba7 	bl	1e17c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   1fa2e:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   1fa30:	f013 0f20 	tst.w	r3, #32
   1fa34:	d102      	bne.n	1fa3c <handle_na_input+0x344>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   1fa36:	b10d      	cbz	r5, 1fa3c <handle_na_input+0x344>
   1fa38:	2f00      	cmp	r7, #0
   1fa3a:	d0db      	beq.n	1f9f4 <handle_na_input+0x2fc>
   1fa3c:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->is_router && !net_is_router(pkt)) {
   1fa3e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1fa42:	b9b3      	cbnz	r3, 1fa72 <handle_na_input+0x37a>
   1fa44:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fa46:	a905      	add	r1, sp, #20
   1fa48:	4620      	mov	r0, r4
   1fa4a:	f7fe fb97 	bl	1e17c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   1fa4e:	7803      	ldrb	r3, [r0, #0]
   1fa50:	09db      	lsrs	r3, r3, #7
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   1fa52:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   1fa56:	e780      	b.n	1f95a <handle_na_input+0x262>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   1fa58:	2101      	movs	r1, #1
   1fa5a:	4630      	mov	r0, r6
   1fa5c:	f7fe ff28 	bl	1e8b0 <ipv6_nbr_set_state>
   1fa60:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   1fa62:	3014      	adds	r0, #20
   1fa64:	f009 fc54 	bl	29310 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   1fa68:	4631      	mov	r1, r6
   1fa6a:	6960      	ldr	r0, [r4, #20]
   1fa6c:	f7ff fe38 	bl	1f6e0 <net_ipv6_nbr_set_reachable_timer>
   1fa70:	e7e4      	b.n	1fa3c <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fa72:	a905      	add	r1, sp, #20
   1fa74:	4620      	mov	r0, r4
   1fa76:	f7fe fb81 	bl	1e17c <net_icmpv6_get_na_hdr>
   1fa7a:	e7e3      	b.n	1fa44 <handle_na_input+0x34c>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1fa7c:	68f0      	ldr	r0, [r6, #12]
   1fa7e:	f7ff f8af 	bl	1ebe0 <nbr_clear_ns_pending>
   1fa82:	e778      	b.n	1f976 <handle_na_input+0x27e>
		return false;
   1fa84:	2300      	movs	r3, #0
   1fa86:	e6fc      	b.n	1f882 <handle_na_input+0x18a>
		return false;
   1fa88:	2300      	movs	r3, #0
   1fa8a:	e6fa      	b.n	1f882 <handle_na_input+0x18a>
			return false;
   1fa8c:	2300      	movs	r3, #0
   1fa8e:	e6f8      	b.n	1f882 <handle_na_input+0x18a>
		return false;
   1fa90:	2300      	movs	r3, #0
   1fa92:	e6f6      	b.n	1f882 <handle_na_input+0x18a>
	return true;
   1fa94:	2301      	movs	r3, #1
   1fa96:	e6f4      	b.n	1f882 <handle_na_input+0x18a>

0001fa98 <net_ipv6_send_ns>:
{
   1fa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa9c:	b09d      	sub	sp, #116	; 0x74
   1fa9e:	4605      	mov	r5, r0
   1faa0:	9101      	str	r1, [sp, #4]
   1faa2:	4691      	mov	r9, r2
   1faa4:	461e      	mov	r6, r3
   1faa6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   1faa8:	f89d b09c 	ldrb.w	fp, [sp, #156]	; 0x9c
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1faac:	6843      	ldr	r3, [r0, #4]
   1faae:	689b      	ldr	r3, [r3, #8]
   1fab0:	4631      	mov	r1, r6
   1fab2:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1fab4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fab8:	f7fc ffee 	bl	1ca98 <net_pkt_get_reserve_tx>
   1fabc:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   1fabe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fac2:	f7fd f807 	bl	1cad4 <net_pkt_get_frag>
   1fac6:	4682      	mov	sl, r0
	net_pkt_frag_add(pkt, frag);
   1fac8:	4601      	mov	r1, r0
   1faca:	4620      	mov	r0, r4
   1facc:	f7fd f87f 	bl	1cbce <net_pkt_frag_add>
	pkt->iface = iface;
   1fad0:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1fad2:	7d6b      	ldrb	r3, [r5, #21]
   1fad4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1fad8:	7d6b      	ldrb	r3, [r5, #21]
   1fada:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   1fade:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1fae2:	220a      	movs	r2, #10
   1fae4:	f362 03c6 	bfi	r3, r2, #3, #4
   1fae8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   1faec:	2328      	movs	r3, #40	; 0x28
   1faee:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	pkt->ipv6_ext_len = len;
   1faf2:	2500      	movs	r5, #0
   1faf4:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1faf8:	68a3      	ldr	r3, [r4, #8]
   1fafa:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   1fafc:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   1fb00:	461a      	mov	r2, r3
   1fb02:	4629      	mov	r1, r5
   1fb04:	1ac0      	subs	r0, r0, r3
   1fb06:	f009 fde7 	bl	296d8 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   1fb0a:	6225      	str	r5, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   1fb0c:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return pkt->iface;
   1fb10:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   1fb12:	7d1b      	ldrb	r3, [r3, #20]
   1fb14:	2b06      	cmp	r3, #6
   1fb16:	f000 808b 	beq.w	1fc30 <net_ipv6_send_ns+0x198>
	} else if (iface->link_addr.len == 8) {
   1fb1a:	2b08      	cmp	r3, #8
   1fb1c:	f000 8085 	beq.w	1fc2a <net_ipv6_send_ns+0x192>
	return 0;
   1fb20:	f04f 0800 	mov.w	r8, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   1fb24:	2287      	movs	r2, #135	; 0x87
   1fb26:	f108 0114 	add.w	r1, r8, #20
   1fb2a:	4620      	mov	r0, r4
   1fb2c:	f7ff f951 	bl	1edd2 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   1fb30:	f10a 0a08 	add.w	sl, sl, #8
   1fb34:	2114      	movs	r1, #20
   1fb36:	4650      	mov	r0, sl
   1fb38:	f7fa fafc 	bl	1a134 <net_buf_simple_add>
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &hdr);
   1fb3c:	a903      	add	r1, sp, #12
   1fb3e:	4620      	mov	r0, r4
   1fb40:	f7fe fa8e 	bl	1e060 <net_icmpv6_get_ns_hdr>
   1fb44:	4605      	mov	r5, r0
	if (!dst) {
   1fb46:	2e00      	cmp	r6, #0
   1fb48:	d075      	beq.n	1fc36 <net_ipv6_send_ns+0x19e>
	return pkt->frags->data;
   1fb4a:	68a3      	ldr	r3, [r4, #8]
   1fb4c:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1fb50:	f10d 0c20 	add.w	ip, sp, #32
   1fb54:	6830      	ldr	r0, [r6, #0]
   1fb56:	6871      	ldr	r1, [r6, #4]
   1fb58:	68b2      	ldr	r2, [r6, #8]
   1fb5a:	68f3      	ldr	r3, [r6, #12]
   1fb5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1fb60:	ae08      	add	r6, sp, #32
   1fb62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fb64:	f8ce 0018 	str.w	r0, [lr, #24]
   1fb68:	f8ce 101c 	str.w	r1, [lr, #28]
   1fb6c:	f8ce 2020 	str.w	r2, [lr, #32]
   1fb70:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   1fb74:	ae0c      	add	r6, sp, #48	; 0x30
   1fb76:	6838      	ldr	r0, [r7, #0]
   1fb78:	6879      	ldr	r1, [r7, #4]
   1fb7a:	68ba      	ldr	r2, [r7, #8]
   1fb7c:	68fb      	ldr	r3, [r7, #12]
   1fb7e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1fb80:	1d2f      	adds	r7, r5, #4
   1fb82:	ae0c      	add	r6, sp, #48	; 0x30
   1fb84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fb86:	6068      	str	r0, [r5, #4]
   1fb88:	6079      	str	r1, [r7, #4]
   1fb8a:	60ba      	str	r2, [r7, #8]
   1fb8c:	60fb      	str	r3, [r7, #12]
	net_icmpv6_set_ns_hdr(pkt, ns_hdr);
   1fb8e:	4629      	mov	r1, r5
   1fb90:	4620      	mov	r0, r4
   1fb92:	f7fe fa89 	bl	1e0a8 <net_icmpv6_set_ns_hdr>
	if (is_my_address) {
   1fb96:	f1bb 0f00 	cmp.w	fp, #0
   1fb9a:	d06a      	beq.n	1fc72 <net_ipv6_send_ns+0x1da>
   1fb9c:	68a3      	ldr	r3, [r4, #8]
   1fb9e:	689f      	ldr	r7, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1fba0:	f7ff f9ac 	bl	1eefc <net_ipv6_unspecified_address>
   1fba4:	4603      	mov	r3, r0
   1fba6:	ae10      	add	r6, sp, #64	; 0x40
   1fba8:	6800      	ldr	r0, [r0, #0]
   1fbaa:	6859      	ldr	r1, [r3, #4]
   1fbac:	689a      	ldr	r2, [r3, #8]
   1fbae:	68db      	ldr	r3, [r3, #12]
   1fbb0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1fbb2:	ae10      	add	r6, sp, #64	; 0x40
   1fbb4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fbb6:	60b8      	str	r0, [r7, #8]
   1fbb8:	60f9      	str	r1, [r7, #12]
   1fbba:	613a      	str	r2, [r7, #16]
   1fbbc:	617b      	str	r3, [r7, #20]
   1fbbe:	68a3      	ldr	r3, [r4, #8]
   1fbc0:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->len[1] -= llao_len;
   1fbc2:	795a      	ldrb	r2, [r3, #5]
   1fbc4:	eba2 0808 	sub.w	r8, r2, r8
   1fbc8:	f883 8005 	strb.w	r8, [r3, #5]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1fbcc:	68a1      	ldr	r1, [r4, #8]
   1fbce:	4620      	mov	r0, r4
   1fbd0:	f7fe f88a 	bl	1dce8 <net_icmpv6_set_chksum>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &ns_hdr->tgt);
   1fbd4:	3504      	adds	r5, #4
   1fbd6:	462a      	mov	r2, r5
   1fbd8:	6961      	ldr	r1, [r4, #20]
   1fbda:	486f      	ldr	r0, [pc, #444]	; (1fd98 <net_ipv6_send_ns+0x300>)
   1fbdc:	f7fe ffe0 	bl	1eba0 <nbr_lookup>
	if (!nbr) {
   1fbe0:	4606      	mov	r6, r0
   1fbe2:	2800      	cmp	r0, #0
   1fbe4:	f000 80ad 	beq.w	1fd42 <net_ipv6_send_ns+0x2aa>
	if (pending) {
   1fbe8:	9801      	ldr	r0, [sp, #4]
   1fbea:	b170      	cbz	r0, 1fc0a <net_ipv6_send_ns+0x172>
   1fbec:	68f5      	ldr	r5, [r6, #12]
		if (!net_ipv6_nbr_data(nbr)->pending) {
   1fbee:	682b      	ldr	r3, [r5, #0]
   1fbf0:	2b00      	cmp	r3, #0
   1fbf2:	f040 80b1 	bne.w	1fd58 <net_ipv6_send_ns+0x2c0>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   1fbf6:	f7fc ffb1 	bl	1cb5c <net_pkt_ref>
   1fbfa:	6028      	str	r0, [r5, #0]
   1fbfc:	68f1      	ldr	r1, [r6, #12]
   1fbfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1fc02:	313c      	adds	r1, #60	; 0x3c
   1fc04:	4865      	ldr	r0, [pc, #404]	; (1fd9c <net_ipv6_send_ns+0x304>)
   1fc06:	f009 fbdd 	bl	293c4 <k_delayed_work_submit_to_queue>
	if (net_send_data(pkt) < 0) {
   1fc0a:	4620      	mov	r0, r4
   1fc0c:	f7fa fbb4 	bl	1a378 <net_send_data>
   1fc10:	2800      	cmp	r0, #0
   1fc12:	f2c0 80b0 	blt.w	1fd76 <net_ipv6_send_ns+0x2de>
   1fc16:	4a62      	ldr	r2, [pc, #392]	; (1fda0 <net_ipv6_send_ns+0x308>)
   1fc18:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1fc1c:	3301      	adds	r3, #1
   1fc1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   1fc22:	2000      	movs	r0, #0
}
   1fc24:	b01d      	add	sp, #116	; 0x74
   1fc26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   1fc2a:	f04f 0810 	mov.w	r8, #16
   1fc2e:	e779      	b.n	1fb24 <net_ipv6_send_ns+0x8c>
		return 8;
   1fc30:	f04f 0808 	mov.w	r8, #8
   1fc34:	e776      	b.n	1fb24 <net_ipv6_send_ns+0x8c>
   1fc36:	68a3      	ldr	r3, [r4, #8]
   1fc38:	689b      	ldr	r3, [r3, #8]
	dst->s6_addr[0]   = 0xFF;
   1fc3a:	21ff      	movs	r1, #255	; 0xff
   1fc3c:	7619      	strb	r1, [r3, #24]
	dst->s6_addr[1]   = 0x02;
   1fc3e:	2202      	movs	r2, #2
   1fc40:	765a      	strb	r2, [r3, #25]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1fc42:	2200      	movs	r2, #0
   1fc44:	769a      	strb	r2, [r3, #26]
   1fc46:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1fc48:	771a      	strb	r2, [r3, #28]
   1fc4a:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1fc4c:	779a      	strb	r2, [r3, #30]
   1fc4e:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1fc50:	f883 2020 	strb.w	r2, [r3, #32]
   1fc54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	dst->s6_addr[10]  = 0;
   1fc58:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	dst->s6_addr[11]  = 0x01;
   1fc5c:	2201      	movs	r2, #1
   1fc5e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	dst->s6_addr[12]  = 0xFF;
   1fc62:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	dst->s6_addr[13]  = src->s6_addr[13];
   1fc66:	7b7a      	ldrb	r2, [r7, #13]
   1fc68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1fc6c:	89fa      	ldrh	r2, [r7, #14]
   1fc6e:	84da      	strh	r2, [r3, #38]	; 0x26
   1fc70:	e780      	b.n	1fb74 <net_ipv6_send_ns+0xdc>
		if (src) {
   1fc72:	f1b9 0f00 	cmp.w	r9, #0
   1fc76:	d025      	beq.n	1fcc4 <net_ipv6_send_ns+0x22c>
   1fc78:	68a3      	ldr	r3, [r4, #8]
   1fc7a:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1fc7e:	ae14      	add	r6, sp, #80	; 0x50
   1fc80:	f8d9 0000 	ldr.w	r0, [r9]
   1fc84:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1fc88:	f8d9 2008 	ldr.w	r2, [r9, #8]
   1fc8c:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1fc90:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1fc92:	ae14      	add	r6, sp, #80	; 0x50
   1fc94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fc96:	f8ce 0008 	str.w	r0, [lr, #8]
   1fc9a:	f8ce 100c 	str.w	r1, [lr, #12]
   1fc9e:	f8ce 2010 	str.w	r2, [lr, #16]
   1fca2:	f8ce 3014 	str.w	r3, [lr, #20]
   1fca6:	68a3      	ldr	r3, [r4, #8]
   1fca8:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1fcaa:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fcac:	b9fa      	cbnz	r2, 1fcee <net_ipv6_send_ns+0x256>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1fcae:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1fcb0:	2a00      	cmp	r2, #0
   1fcb2:	d140      	bne.n	1fd36 <net_ipv6_send_ns+0x29e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fcb4:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1fcb6:	2a00      	cmp	r2, #0
   1fcb8:	d13f      	bne.n	1fd3a <net_ipv6_send_ns+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1fcba:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fcbc:	2b00      	cmp	r3, #0
   1fcbe:	d03e      	beq.n	1fd3e <net_ipv6_send_ns+0x2a6>
   1fcc0:	2300      	movs	r3, #0
   1fcc2:	e015      	b.n	1fcf0 <net_ipv6_send_ns+0x258>
   1fcc4:	68a3      	ldr	r3, [r4, #8]
   1fcc6:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1fcc8:	f107 0118 	add.w	r1, r7, #24
   1fccc:	6960      	ldr	r0, [r4, #20]
   1fcce:	f7fb fab9 	bl	1b244 <net_if_ipv6_select_src_addr>
   1fcd2:	4603      	mov	r3, r0
   1fcd4:	ae18      	add	r6, sp, #96	; 0x60
   1fcd6:	6800      	ldr	r0, [r0, #0]
   1fcd8:	6859      	ldr	r1, [r3, #4]
   1fcda:	689a      	ldr	r2, [r3, #8]
   1fcdc:	68db      	ldr	r3, [r3, #12]
   1fcde:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1fce0:	ae18      	add	r6, sp, #96	; 0x60
   1fce2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fce4:	60b8      	str	r0, [r7, #8]
   1fce6:	60f9      	str	r1, [r7, #12]
   1fce8:	613a      	str	r2, [r7, #16]
   1fcea:	617b      	str	r3, [r7, #20]
   1fcec:	e7db      	b.n	1fca6 <net_ipv6_send_ns+0x20e>
   1fcee:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   1fcf0:	bbab      	cbnz	r3, 1fd5e <net_ipv6_send_ns+0x2c6>
		net_buf_add(frag, llao_len);
   1fcf2:	4641      	mov	r1, r8
   1fcf4:	4650      	mov	r0, sl
   1fcf6:	f7fa fa1d 	bl	1a134 <net_buf_simple_add>
	return pkt->iface;
   1fcfa:	f8d4 9014 	ldr.w	r9, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1fcfe:	4620      	mov	r0, r4
   1fd00:	f7fd fa14 	bl	1d12c <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1fd04:	f100 0618 	add.w	r6, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   1fd08:	2301      	movs	r3, #1
   1fd0a:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   1fd0c:	ea4f 03d8 	mov.w	r3, r8, lsr #3
   1fd10:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   1fd12:	f899 2014 	ldrb.w	r2, [r9, #20]
   1fd16:	f8d9 1010 	ldr.w	r1, [r9, #16]
   1fd1a:	301a      	adds	r0, #26
   1fd1c:	f7e0 fad0 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1fd20:	f899 2014 	ldrb.w	r2, [r9, #20]
   1fd24:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   1fd26:	eba8 0202 	sub.w	r2, r8, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1fd2a:	3a02      	subs	r2, #2
   1fd2c:	2100      	movs	r1, #0
   1fd2e:	4430      	add	r0, r6
   1fd30:	f009 fcd2 	bl	296d8 <memset>
   1fd34:	e74a      	b.n	1fbcc <net_ipv6_send_ns+0x134>
   1fd36:	2300      	movs	r3, #0
   1fd38:	e7da      	b.n	1fcf0 <net_ipv6_send_ns+0x258>
   1fd3a:	2300      	movs	r3, #0
   1fd3c:	e7d8      	b.n	1fcf0 <net_ipv6_send_ns+0x258>
   1fd3e:	2301      	movs	r3, #1
   1fd40:	e7d6      	b.n	1fcf0 <net_ipv6_send_ns+0x258>
		nbr = nbr_new(net_pkt_iface(pkt), &ns_hdr->tgt, false,
   1fd42:	2300      	movs	r3, #0
   1fd44:	461a      	mov	r2, r3
   1fd46:	4629      	mov	r1, r5
   1fd48:	6960      	ldr	r0, [r4, #20]
   1fd4a:	f7fe ffab 	bl	1eca4 <nbr_new>
		if (!nbr) {
   1fd4e:	4606      	mov	r6, r0
   1fd50:	2800      	cmp	r0, #0
   1fd52:	f47f af49 	bne.w	1fbe8 <net_ipv6_send_ns+0x150>
   1fd56:	e002      	b.n	1fd5e <net_ipv6_send_ns+0x2c6>
			net_pkt_unref(pending);
   1fd58:	9801      	ldr	r0, [sp, #4]
   1fd5a:	f7fc ff0e 	bl	1cb7a <net_pkt_unref>
	net_pkt_unref(pkt);
   1fd5e:	4620      	mov	r0, r4
   1fd60:	f7fc ff0b 	bl	1cb7a <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   1fd64:	4a0e      	ldr	r2, [pc, #56]	; (1fda0 <net_ipv6_send_ns+0x308>)
   1fd66:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1fd6a:	3301      	adds	r3, #1
   1fd6c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   1fd70:	f06f 0015 	mvn.w	r0, #21
   1fd74:	e756      	b.n	1fc24 <net_ipv6_send_ns+0x18c>
		if (pending) {
   1fd76:	9b01      	ldr	r3, [sp, #4]
   1fd78:	2b00      	cmp	r3, #0
   1fd7a:	d0f0      	beq.n	1fd5e <net_ipv6_send_ns+0x2c6>
   1fd7c:	68f5      	ldr	r5, [r6, #12]
	k_delayed_work_cancel(&data->send_ns);
   1fd7e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1fd82:	f009 fac5 	bl	29310 <k_delayed_work_cancel>
	if (data->pending) {
   1fd86:	6828      	ldr	r0, [r5, #0]
   1fd88:	2800      	cmp	r0, #0
   1fd8a:	d0e8      	beq.n	1fd5e <net_ipv6_send_ns+0x2c6>
		net_pkt_unref(data->pending);
   1fd8c:	f7fc fef5 	bl	1cb7a <net_pkt_unref>
		data->pending = NULL;
   1fd90:	2300      	movs	r3, #0
   1fd92:	602b      	str	r3, [r5, #0]
   1fd94:	e7e3      	b.n	1fd5e <net_ipv6_send_ns+0x2c6>
   1fd96:	bf00      	nop
   1fd98:	2000bd44 	.word	0x2000bd44
   1fd9c:	20002a70 	.word	0x20002a70
   1fda0:	20002950 	.word	0x20002950

0001fda4 <net_ipv6_nbr_add>:
{
   1fda4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fda8:	b083      	sub	sp, #12
   1fdaa:	4605      	mov	r5, r0
   1fdac:	460e      	mov	r6, r1
   1fdae:	4617      	mov	r7, r2
   1fdb0:	4698      	mov	r8, r3
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1fdb2:	460a      	mov	r2, r1
   1fdb4:	4601      	mov	r1, r0
   1fdb6:	482c      	ldr	r0, [pc, #176]	; (1fe68 <net_ipv6_nbr_add+0xc4>)
   1fdb8:	f7fe fef2 	bl	1eba0 <nbr_lookup>
	if (!nbr) {
   1fdbc:	4604      	mov	r4, r0
   1fdbe:	b180      	cbz	r0, 1fde2 <net_ipv6_nbr_add+0x3e>
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   1fdc0:	463a      	mov	r2, r7
   1fdc2:	4629      	mov	r1, r5
   1fdc4:	4620      	mov	r0, r4
   1fdc6:	f7fe fd05 	bl	1e7d4 <net_nbr_link>
   1fdca:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1fdce:	d013      	beq.n	1fdf8 <net_ipv6_nbr_add+0x54>
   1fdd0:	68e3      	ldr	r3, [r4, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   1fdd2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1fdd6:	2b00      	cmp	r3, #0
   1fdd8:	d03c      	beq.n	1fe54 <net_ipv6_nbr_add+0xb0>
}
   1fdda:	4620      	mov	r0, r4
   1fddc:	b003      	add	sp, #12
   1fdde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nbr = nbr_new(iface, addr, is_router, state);
   1fde2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   1fde6:	4642      	mov	r2, r8
   1fde8:	4631      	mov	r1, r6
   1fdea:	4628      	mov	r0, r5
   1fdec:	f7fe ff5a 	bl	1eca4 <nbr_new>
		if (!nbr) {
   1fdf0:	4604      	mov	r4, r0
   1fdf2:	2800      	cmp	r0, #0
   1fdf4:	d1e4      	bne.n	1fdc0 <net_ipv6_nbr_add+0x1c>
   1fdf6:	e7f0      	b.n	1fdda <net_ipv6_nbr_add+0x36>
   1fdf8:	68e3      	ldr	r3, [r4, #12]
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   1fdfa:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   1fdfe:	2b05      	cmp	r3, #5
   1fe00:	d0e6      	beq.n	1fdd0 <net_ipv6_nbr_add+0x2c>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1fe02:	7860      	ldrb	r0, [r4, #1]
   1fe04:	f7fe fd4c 	bl	1e8a0 <net_nbr_get_lladdr>
   1fe08:	4680      	mov	r8, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   1fe0a:	f100 0902 	add.w	r9, r0, #2
   1fe0e:	793a      	ldrb	r2, [r7, #4]
   1fe10:	6839      	ldr	r1, [r7, #0]
   1fe12:	4648      	mov	r0, r9
   1fe14:	f009 fbcc 	bl	295b0 <memcmp>
   1fe18:	b190      	cbz	r0, 1fe40 <net_ipv6_nbr_add+0x9c>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   1fe1a:	6839      	ldr	r1, [r7, #0]
   1fe1c:	793a      	ldrb	r2, [r7, #4]
	if (!lladdr_store || !new_addr) {
   1fe1e:	f1b8 0f00 	cmp.w	r8, #0
   1fe22:	d002      	beq.n	1fe2a <net_ipv6_nbr_add+0x86>
   1fe24:	b109      	cbz	r1, 1fe2a <net_ipv6_nbr_add+0x86>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1fe26:	2a06      	cmp	r2, #6
   1fe28:	d904      	bls.n	1fe34 <net_ipv6_nbr_add+0x90>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1fe2a:	2102      	movs	r1, #2
   1fe2c:	4620      	mov	r0, r4
   1fe2e:	f7fe fd3f 	bl	1e8b0 <ipv6_nbr_set_state>
   1fe32:	e7cd      	b.n	1fdd0 <net_ipv6_nbr_add+0x2c>
	lladdr_store->len = new_len;
   1fe34:	f888 2001 	strb.w	r2, [r8, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1fe38:	4648      	mov	r0, r9
   1fe3a:	f7e0 fa41 	bl	2c0 <memcpy>
   1fe3e:	e7f4      	b.n	1fe2a <net_ipv6_nbr_add+0x86>
   1fe40:	68e3      	ldr	r3, [r4, #12]
		} else if (net_ipv6_nbr_data(nbr)->state ==
   1fe42:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1fe46:	2b00      	cmp	r3, #0
   1fe48:	d1c2      	bne.n	1fdd0 <net_ipv6_nbr_add+0x2c>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1fe4a:	2102      	movs	r1, #2
   1fe4c:	4620      	mov	r0, r4
   1fe4e:	f7fe fd2f 	bl	1e8b0 <ipv6_nbr_set_state>
   1fe52:	e7bd      	b.n	1fdd0 <net_ipv6_nbr_add+0x2c>
		net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   1fe54:	2100      	movs	r1, #0
   1fe56:	9101      	str	r1, [sp, #4]
   1fe58:	9600      	str	r6, [sp, #0]
   1fe5a:	460b      	mov	r3, r1
   1fe5c:	460a      	mov	r2, r1
   1fe5e:	4628      	mov	r0, r5
   1fe60:	f7ff fe1a 	bl	1fa98 <net_ipv6_send_ns>
   1fe64:	e7b9      	b.n	1fdda <net_ipv6_nbr_add+0x36>
   1fe66:	bf00      	nop
   1fe68:	2000bd44 	.word	0x2000bd44

0001fe6c <handle_ra_input>:
{
   1fe6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe70:	b098      	sub	sp, #96	; 0x60
   1fe72:	4606      	mov	r6, r0
	return net_buf_frags_len(pkt->frags);
   1fe74:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1fe76:	2200      	movs	r2, #0
   1fe78:	e002      	b.n	1fe80 <handle_ra_input+0x14>
		bytes += buf->len;
   1fe7a:	8999      	ldrh	r1, [r3, #12]
   1fe7c:	440a      	add	r2, r1
		buf = buf->frags;
   1fe7e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1fe80:	2b00      	cmp	r3, #0
   1fe82:	d1fa      	bne.n	1fe7a <handle_ra_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   1fe84:	b292      	uxth	r2, r2
	net_stats.ipv6_nd.recv++;
   1fe86:	49b7      	ldr	r1, [pc, #732]	; (20164 <handle_ra_input+0x2f8>)
   1fe88:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   1fe8c:	3301      	adds	r3, #1
   1fe8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   1fe92:	2a39      	cmp	r2, #57	; 0x39
   1fe94:	d904      	bls.n	1fea0 <handle_ra_input+0x34>
	return pkt->frags->data;
   1fe96:	68b3      	ldr	r3, [r6, #8]
   1fe98:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1fe9a:	79da      	ldrb	r2, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   1fe9c:	2aff      	cmp	r2, #255	; 0xff
   1fe9e:	d010      	beq.n	1fec2 <handle_ra_input+0x56>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &icmphdr);
   1fea0:	a907      	add	r1, sp, #28
   1fea2:	4630      	mov	r0, r6
   1fea4:	f7fd ff6d 	bl	1dd82 <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1fea8:	b108      	cbz	r0, 1feae <handle_ra_input+0x42>
   1feaa:	7843      	ldrb	r3, [r0, #1]
   1feac:	b173      	cbz	r3, 1fecc <handle_ra_input+0x60>
	net_stats.ipv6_nd.drop++;
   1feae:	4aad      	ldr	r2, [pc, #692]	; (20164 <handle_ra_input+0x2f8>)
   1feb0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1feb4:	3301      	adds	r3, #1
   1feb6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   1feba:	2002      	movs	r0, #2
}
   1febc:	b018      	add	sp, #96	; 0x60
   1febe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1fec2:	891a      	ldrh	r2, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1fec4:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1fec8:	429a      	cmp	r2, r3
   1feca:	d1e9      	bne.n	1fea0 <handle_ra_input+0x34>
	offset = sizeof(struct net_ipv6_hdr) + net_pkt_ipv6_ext_len(pkt) +
   1fecc:	f896 103b 	ldrb.w	r1, [r6, #59]	; 0x3b
   1fed0:	312c      	adds	r1, #44	; 0x2c
   1fed2:	ac18      	add	r4, sp, #96	; 0x60
   1fed4:	f824 1d1c 	strh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, 1, value);
   1fed8:	f10d 0347 	add.w	r3, sp, #71	; 0x47
   1fedc:	9300      	str	r3, [sp, #0]
   1fede:	2301      	movs	r3, #1
   1fee0:	4622      	mov	r2, r4
   1fee2:	68b0      	ldr	r0, [r6, #8]
   1fee4:	f7fc ffc7 	bl	1ce76 <net_frag_read>
	frag = net_frag_skip(frag, offset, &offset, 1); /* flags */
   1fee8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	return net_frag_read(frag, offset, pos, len, NULL);
   1feec:	2300      	movs	r3, #0
   1feee:	9300      	str	r3, [sp, #0]
   1fef0:	2301      	movs	r3, #1
   1fef2:	4622      	mov	r2, r4
   1fef4:	f7fc ffbf 	bl	1ce76 <net_frag_read>
	if (!frag) {
   1fef8:	4604      	mov	r4, r0
   1fefa:	2800      	cmp	r0, #0
   1fefc:	d0d7      	beq.n	1feae <handle_ra_input+0x42>
	if (hop_limit) {
   1fefe:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   1ff02:	b113      	cbz	r3, 1ff0a <handle_ra_input+0x9e>
	return pkt->iface;
   1ff04:	6972      	ldr	r2, [r6, #20]
	iface->ipv6.hop_limit = hop_limit;
   1ff06:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
	frag = net_frag_read_be16(frag, offset, &offset, &router_lifetime);
   1ff0a:	f10d 0352 	add.w	r3, sp, #82	; 0x52
   1ff0e:	aa11      	add	r2, sp, #68	; 0x44
   1ff10:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   1ff14:	4620      	mov	r0, r4
   1ff16:	f7fc fff6 	bl	1cf06 <net_frag_read_be16>
	frag = net_frag_read_be32(frag, offset, &offset, &reachable_time);
   1ff1a:	ab13      	add	r3, sp, #76	; 0x4c
   1ff1c:	aa11      	add	r2, sp, #68	; 0x44
   1ff1e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   1ff22:	f7fd f801 	bl	1cf28 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, offset, &offset, &retrans_timer);
   1ff26:	ab12      	add	r3, sp, #72	; 0x48
   1ff28:	aa11      	add	r2, sp, #68	; 0x44
   1ff2a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   1ff2e:	f7fc fffb 	bl	1cf28 <net_frag_read_be32>
	if (!frag) {
   1ff32:	4605      	mov	r5, r0
   1ff34:	2800      	cmp	r0, #0
   1ff36:	d0ba      	beq.n	1feae <handle_ra_input+0x42>
	ra_hdr = net_icmpv6_get_ra_hdr(pkt, &hdr);
   1ff38:	a915      	add	r1, sp, #84	; 0x54
   1ff3a:	4630      	mov	r0, r6
   1ff3c:	f7fe f99a 	bl	1e274 <net_icmpv6_get_ra_hdr>
	if (reachable_time &&
   1ff40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1ff42:	b16b      	cbz	r3, 1ff60 <handle_ra_input+0xf4>
   1ff44:	6972      	ldr	r2, [r6, #20]
	return iface->ipv6.reachable_time;
   1ff46:	f8d2 428c 	ldr.w	r4, [r2, #652]	; 0x28c
	     ra_hdr->reachable_time)) {
   1ff4a:	6841      	ldr	r1, [r0, #4]
	if (reachable_time &&
   1ff4c:	428c      	cmp	r4, r1
   1ff4e:	d007      	beq.n	1ff60 <handle_ra_input+0xf4>
	iface->ipv6.base_reachable_time = reachable_time;
   1ff50:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   1ff54:	6974      	ldr	r4, [r6, #20]
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1ff56:	4620      	mov	r0, r4
   1ff58:	f7fb fa70 	bl	1b43c <net_if_ipv6_calc_reachable_time>
   1ff5c:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c
	if (retrans_timer) {
   1ff60:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ff62:	b113      	cbz	r3, 1ff6a <handle_ra_input+0xfe>
   1ff64:	6972      	ldr	r2, [r6, #20]
 * @param retrans_timer New retransmit timer
 */
static inline void net_if_ipv6_set_retrans_timer(struct net_if *iface,
						 u32_t retrans_timer)
{
	iface->ipv6.retrans_timer = retrans_timer;
   1ff66:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	struct net_nbr *nbr = NULL;
   1ff6a:	2700      	movs	r7, #0
   1ff6c:	e060      	b.n	20030 <handle_ra_input+0x1c4>
			frag = handle_ra_neighbor(pkt, frag, length, offset,
   1ff6e:	f89d 4043 	ldrb.w	r4, [sp, #67]	; 0x43
   1ff72:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   1ff76:	2306      	movs	r3, #6
   1ff78:	f88d 301d 	strb.w	r3, [sp, #29]
	lladdr.len = NET_LINK_ADDR_MAX_LENGTH;
   1ff7c:	f88d 3010 	strb.w	r3, [sp, #16]
	lladdr.addr = llstorage.addr;
   1ff80:	f10d 031e 	add.w	r3, sp, #30
   1ff84:	9303      	str	r3, [sp, #12]
	if (net_pkt_ll_src(pkt)->len < lladdr.len) {
   1ff86:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   1ff8a:	2b05      	cmp	r3, #5
   1ff8c:	d801      	bhi.n	1ff92 <handle_ra_input+0x126>
		lladdr.len = net_pkt_ll_src(pkt)->len;
   1ff8e:	f88d 3010 	strb.w	r3, [sp, #16]
	frag = net_frag_read(frag, offset, pos, lladdr.len, lladdr.addr);
   1ff92:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1ff96:	f10d 021e 	add.w	r2, sp, #30
   1ff9a:	9200      	str	r2, [sp, #0]
   1ff9c:	aa11      	add	r2, sp, #68	; 0x44
   1ff9e:	4641      	mov	r1, r8
   1ffa0:	4628      	mov	r0, r5
   1ffa2:	f7fc ff68 	bl	1ce76 <net_frag_read>
	if (!frag && offset) {
   1ffa6:	4605      	mov	r5, r0
   1ffa8:	b318      	cbz	r0, 1fff2 <handle_ra_input+0x186>
	padding = len * 8 - 2 - lladdr.len;
   1ffaa:	00e3      	lsls	r3, r4, #3
   1ffac:	b2db      	uxtb	r3, r3
   1ffae:	f89d 2010 	ldrb.w	r2, [sp, #16]
   1ffb2:	1a9b      	subs	r3, r3, r2
   1ffb4:	b2db      	uxtb	r3, r3
   1ffb6:	3b02      	subs	r3, #2
	if (padding) {
   1ffb8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   1ffbc:	d009      	beq.n	1ffd2 <handle_ra_input+0x166>
		frag = net_frag_read(frag, *pos, pos, padding, NULL);
   1ffbe:	aa18      	add	r2, sp, #96	; 0x60
   1ffc0:	f832 1d1c 	ldrh.w	r1, [r2, #-28]!
   1ffc4:	2000      	movs	r0, #0
   1ffc6:	9000      	str	r0, [sp, #0]
   1ffc8:	4628      	mov	r0, r5
   1ffca:	f7fc ff54 	bl	1ce76 <net_frag_read>
		if (!frag && *pos) {
   1ffce:	4605      	mov	r5, r0
   1ffd0:	b198      	cbz	r0, 1fffa <handle_ra_input+0x18e>
	return pkt->frags->data;
   1ffd2:	68b3      	ldr	r3, [r6, #8]
   1ffd4:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   1ffd6:	2302      	movs	r3, #2
   1ffd8:	9300      	str	r3, [sp, #0]
   1ffda:	2301      	movs	r3, #1
   1ffdc:	aa03      	add	r2, sp, #12
   1ffde:	3108      	adds	r1, #8
   1ffe0:	6970      	ldr	r0, [r6, #20]
   1ffe2:	f7ff fedf 	bl	1fda4 <net_ipv6_nbr_add>
   1ffe6:	4607      	mov	r7, r0
			if (!frag && offset) {
   1ffe8:	bb15      	cbnz	r5, 20030 <handle_ra_input+0x1c4>
   1ffea:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   1ffee:	b1fb      	cbz	r3, 20030 <handle_ra_input+0x1c4>
   1fff0:	e75d      	b.n	1feae <handle_ra_input+0x42>
	if (!frag && offset) {
   1fff2:	f1b8 0f00 	cmp.w	r8, #0
   1fff6:	d0d8      	beq.n	1ffaa <handle_ra_input+0x13e>
   1fff8:	e7f6      	b.n	1ffe8 <handle_ra_input+0x17c>
		if (!frag && *pos) {
   1fffa:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   1fffe:	2b00      	cmp	r3, #0
   20000:	d0e7      	beq.n	1ffd2 <handle_ra_input+0x166>
   20002:	e7f1      	b.n	1ffe8 <handle_ra_input+0x17c>
			frag = net_frag_skip(frag, offset, &offset, 2);
   20004:	ac18      	add	r4, sp, #96	; 0x60
   20006:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, len, NULL);
   2000a:	2300      	movs	r3, #0
   2000c:	9300      	str	r3, [sp, #0]
   2000e:	2302      	movs	r3, #2
   20010:	4622      	mov	r2, r4
   20012:	f7fc ff30 	bl	1ce76 <net_frag_read>
			frag = net_frag_read_be32(frag, offset, &offset, &mtu);
   20016:	ab0f      	add	r3, sp, #60	; 0x3c
   20018:	4622      	mov	r2, r4
   2001a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   2001e:	f7fc ff83 	bl	1cf28 <net_frag_read_be32>
			if (!frag && offset) {
   20022:	4605      	mov	r5, r0
   20024:	2800      	cmp	r0, #0
   20026:	d03b      	beq.n	200a0 <handle_ra_input+0x234>
	return pkt->iface;
   20028:	6973      	ldr	r3, [r6, #20]
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   2002a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
	iface->mtu = mtu;
   2002e:	851a      	strh	r2, [r3, #40]	; 0x28
	while (frag) {
   20030:	2d00      	cmp	r5, #0
   20032:	f000 8170 	beq.w	20316 <handle_ra_input+0x4aa>
		frag = net_frag_read(frag, offset, &offset, 1, &type);
   20036:	ac18      	add	r4, sp, #96	; 0x60
   20038:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
   2003c:	f10d 0342 	add.w	r3, sp, #66	; 0x42
   20040:	9300      	str	r3, [sp, #0]
   20042:	2301      	movs	r3, #1
   20044:	4622      	mov	r2, r4
   20046:	4628      	mov	r0, r5
   20048:	f7fc ff15 	bl	1ce76 <net_frag_read>
		frag = net_frag_read(frag, offset, &offset, 1, &length);
   2004c:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20050:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   20054:	9300      	str	r3, [sp, #0]
   20056:	2301      	movs	r3, #1
   20058:	4622      	mov	r2, r4
   2005a:	f7fc ff0c 	bl	1ce76 <net_frag_read>
		if (!frag) {
   2005e:	4605      	mov	r5, r0
   20060:	2800      	cmp	r0, #0
   20062:	f43f af24 	beq.w	1feae <handle_ra_input+0x42>
		switch (type) {
   20066:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   2006a:	2b03      	cmp	r3, #3
   2006c:	d01d      	beq.n	200aa <handle_ra_input+0x23e>
   2006e:	2b05      	cmp	r3, #5
   20070:	d0c8      	beq.n	20004 <handle_ra_input+0x198>
   20072:	2b01      	cmp	r3, #1
   20074:	f43f af7b 	beq.w	1ff6e <handle_ra_input+0x102>
			frag = net_frag_skip(frag, offset, &offset,
   20078:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
					     length * 8 - 2);
   2007c:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   20080:	00db      	lsls	r3, r3, #3
			frag = net_frag_skip(frag, offset, &offset,
   20082:	3b02      	subs	r3, #2
   20084:	b29b      	uxth	r3, r3
	return net_frag_read(frag, offset, pos, len, NULL);
   20086:	2200      	movs	r2, #0
   20088:	9200      	str	r2, [sp, #0]
   2008a:	aa11      	add	r2, sp, #68	; 0x44
   2008c:	f7fc fef3 	bl	1ce76 <net_frag_read>
			if (!frag && offset) {
   20090:	4605      	mov	r5, r0
   20092:	2800      	cmp	r0, #0
   20094:	d1cc      	bne.n	20030 <handle_ra_input+0x1c4>
   20096:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   2009a:	2b00      	cmp	r3, #0
   2009c:	d0c8      	beq.n	20030 <handle_ra_input+0x1c4>
   2009e:	e706      	b.n	1feae <handle_ra_input+0x42>
			if (!frag && offset) {
   200a0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   200a4:	2b00      	cmp	r3, #0
   200a6:	d0bf      	beq.n	20028 <handle_ra_input+0x1bc>
   200a8:	e701      	b.n	1feae <handle_ra_input+0x42>
			frag = handle_ra_prefix(pkt, frag, length, offset,
   200aa:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   200ae:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	prefix_info.type = NET_ICMPV6_ND_OPT_PREFIX_INFO;
   200b2:	2203      	movs	r2, #3
   200b4:	f88d 201c 	strb.w	r2, [sp, #28]
	prefix_info.len = len * 8 - 2;
   200b8:	4093      	lsls	r3, r2
   200ba:	b2db      	uxtb	r3, r3
   200bc:	3b02      	subs	r3, #2
   200be:	f88d 301d 	strb.w	r3, [sp, #29]
	frag = net_frag_read(frag, offset, pos, 1, &prefix_info.prefix_len);
   200c2:	f10d 031e 	add.w	r3, sp, #30
   200c6:	9300      	str	r3, [sp, #0]
   200c8:	2301      	movs	r3, #1
   200ca:	aa11      	add	r2, sp, #68	; 0x44
   200cc:	f7fc fed3 	bl	1ce76 <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, 1, &prefix_info.flags);
   200d0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   200d4:	f10d 031f 	add.w	r3, sp, #31
   200d8:	9300      	str	r3, [sp, #0]
   200da:	2301      	movs	r3, #1
   200dc:	aa11      	add	r2, sp, #68	; 0x44
   200de:	f7fc feca 	bl	1ce76 <net_frag_read>
	frag = net_frag_read_be32(frag, *pos, pos, &prefix_info.valid_lifetime);
   200e2:	ab08      	add	r3, sp, #32
   200e4:	aa11      	add	r2, sp, #68	; 0x44
   200e6:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   200ea:	f7fc ff1d 	bl	1cf28 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, *pos, pos,
   200ee:	ab09      	add	r3, sp, #36	; 0x24
   200f0:	aa11      	add	r2, sp, #68	; 0x44
   200f2:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   200f6:	f7fc ff17 	bl	1cf28 <net_frag_read_be32>
	frag = net_frag_skip(frag, *pos, pos, 4);
   200fa:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   200fe:	2300      	movs	r3, #0
   20100:	9300      	str	r3, [sp, #0]
   20102:	2304      	movs	r3, #4
   20104:	aa11      	add	r2, sp, #68	; 0x44
   20106:	f7fc feb6 	bl	1ce76 <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, sizeof(struct in6_addr),
   2010a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   2010e:	ab0b      	add	r3, sp, #44	; 0x2c
   20110:	9300      	str	r3, [sp, #0]
   20112:	2310      	movs	r3, #16
   20114:	aa11      	add	r2, sp, #68	; 0x44
   20116:	f7fc feae 	bl	1ce76 <net_frag_read>
	if (!frag && *pos) {
   2011a:	4605      	mov	r5, r0
   2011c:	b320      	cbz	r0, 20168 <handle_ra_input+0x2fc>
	if (prefix_info.valid_lifetime >= prefix_info.preferred_lifetime &&
   2011e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20120:	9a08      	ldr	r2, [sp, #32]
   20122:	429a      	cmp	r2, r3
   20124:	d314      	bcc.n	20150 <handle_ra_input+0x2e4>
   20126:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   2012a:	f248 03fe 	movw	r3, #33022	; 0x80fe
   2012e:	429a      	cmp	r2, r3
   20130:	d00e      	beq.n	20150 <handle_ra_input+0x2e4>
		if (prefix_info.flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   20132:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   20136:	2b00      	cmp	r3, #0
   20138:	db1b      	blt.n	20172 <handle_ra_input+0x306>
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   2013a:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2013e:	f013 0f40 	tst.w	r3, #64	; 0x40
   20142:	d005      	beq.n	20150 <handle_ra_input+0x2e4>
		    prefix_info.valid_lifetime &&
   20144:	9b08      	ldr	r3, [sp, #32]
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   20146:	b11b      	cbz	r3, 20150 <handle_ra_input+0x2e4>
		    (prefix_info.prefix_len == NET_IPV6_DEFAULT_PREFIX_LEN)) {
   20148:	f89d 301e 	ldrb.w	r3, [sp, #30]
		    prefix_info.valid_lifetime &&
   2014c:	2b40      	cmp	r3, #64	; 0x40
   2014e:	d03e      	beq.n	201ce <handle_ra_input+0x362>
			if (!frag && offset) {
   20150:	2d00      	cmp	r5, #0
   20152:	f47f af6d 	bne.w	20030 <handle_ra_input+0x1c4>
   20156:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   2015a:	2b00      	cmp	r3, #0
   2015c:	f43f af68 	beq.w	20030 <handle_ra_input+0x1c4>
   20160:	e6a5      	b.n	1feae <handle_ra_input+0x42>
   20162:	bf00      	nop
   20164:	20002950 	.word	0x20002950
	if (!frag && *pos) {
   20168:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   2016c:	2b00      	cmp	r3, #0
   2016e:	d0d6      	beq.n	2011e <handle_ra_input+0x2b2>
   20170:	e7ee      	b.n	20150 <handle_ra_input+0x2e4>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   20172:	f89d 201e 	ldrb.w	r2, [sp, #30]
   20176:	a90b      	add	r1, sp, #44	; 0x2c
   20178:	6970      	ldr	r0, [r6, #20]
   2017a:	f7fa fe3f 	bl	1adfc <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   2017e:	4603      	mov	r3, r0
   20180:	b160      	cbz	r0, 2019c <handle_ra_input+0x330>
	switch (prefix_info->valid_lifetime) {
   20182:	9a08      	ldr	r2, [sp, #32]
   20184:	b1ba      	cbz	r2, 201b6 <handle_ra_input+0x34a>
   20186:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2018a:	d01c      	beq.n	201c6 <handle_ra_input+0x35a>
	prefix->is_infinite = is_infinite;
   2018c:	2200      	movs	r2, #0
   2018e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		net_if_ipv6_prefix_set_timer(prefix,
   20192:	9908      	ldr	r1, [sp, #32]
   20194:	4618      	mov	r0, r3
   20196:	f7fa fee3 	bl	1af60 <net_if_ipv6_prefix_set_timer>
   2019a:	e7ce      	b.n	2013a <handle_ra_input+0x2ce>
		if (!prefix_info->valid_lifetime) {
   2019c:	9b08      	ldr	r3, [sp, #32]
   2019e:	2b00      	cmp	r3, #0
   201a0:	d0cb      	beq.n	2013a <handle_ra_input+0x2ce>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   201a2:	f89d 201e 	ldrb.w	r2, [sp, #30]
   201a6:	a90b      	add	r1, sp, #44	; 0x2c
   201a8:	6970      	ldr	r0, [r6, #20]
   201aa:	f7fa fdf7 	bl	1ad9c <net_if_ipv6_prefix_add>
		if (prefix) {
   201ae:	4603      	mov	r3, r0
   201b0:	2800      	cmp	r0, #0
   201b2:	d1e6      	bne.n	20182 <handle_ra_input+0x316>
   201b4:	e7c1      	b.n	2013a <handle_ra_input+0x2ce>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   201b6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   201ba:	f103 0128 	add.w	r1, r3, #40	; 0x28
   201be:	6970      	ldr	r0, [r6, #20]
   201c0:	f7fa feea 	bl	1af98 <net_if_ipv6_prefix_rm>
   201c4:	e7b9      	b.n	2013a <handle_ra_input+0x2ce>
   201c6:	2201      	movs	r2, #1
   201c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   201cc:	e7b5      	b.n	2013a <handle_ra_input+0x2ce>
	struct in6_addr addr = { };
   201ce:	2300      	movs	r3, #0
   201d0:	9305      	str	r3, [sp, #20]
   201d2:	9306      	str	r3, [sp, #24]
	return pkt->iface;
   201d4:	6974      	ldr	r4, [r6, #20]
	return &iface->link_addr;
   201d6:	f104 0810 	add.w	r8, r4, #16
	addr->s6_addr[0] = 0xfe;
   201da:	22fe      	movs	r2, #254	; 0xfe
   201dc:	f88d 200c 	strb.w	r2, [sp, #12]
	addr->s6_addr[1] = 0x80;
   201e0:	2280      	movs	r2, #128	; 0x80
   201e2:	f88d 200d 	strb.w	r2, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   201e6:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   201ea:	9304      	str	r3, [sp, #16]
	switch (lladdr->len) {
   201ec:	f898 2004 	ldrb.w	r2, [r8, #4]
   201f0:	2a06      	cmp	r2, #6
   201f2:	d032      	beq.n	2025a <handle_ra_input+0x3ee>
   201f4:	2a08      	cmp	r2, #8
   201f6:	d058      	beq.n	202aa <handle_ra_input+0x43e>
   201f8:	2a02      	cmp	r2, #2
   201fa:	d018      	beq.n	2022e <handle_ra_input+0x3c2>
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   201fc:	2208      	movs	r2, #8
   201fe:	a90b      	add	r1, sp, #44	; 0x2c
   20200:	a803      	add	r0, sp, #12
   20202:	f7e0 f85d 	bl	2c0 <memcpy>
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   20206:	2100      	movs	r1, #0
   20208:	a803      	add	r0, sp, #12
   2020a:	f7fa fb03 	bl	1a814 <net_if_ipv6_addr_lookup>
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   2020e:	4604      	mov	r4, r0
   20210:	b118      	cbz	r0, 2021a <handle_ra_input+0x3ae>
   20212:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   20216:	2b01      	cmp	r3, #1
   20218:	d052      	beq.n	202c0 <handle_ra_input+0x454>
		if (prefix_info->valid_lifetime ==
   2021a:	9b08      	ldr	r3, [sp, #32]
   2021c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   20220:	d072      	beq.n	20308 <handle_ra_input+0x49c>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   20222:	2201      	movs	r2, #1
   20224:	a903      	add	r1, sp, #12
   20226:	6970      	ldr	r0, [r6, #20]
   20228:	f7fa fb6a 	bl	1a900 <net_if_ipv6_addr_add>
   2022c:	e790      	b.n	20150 <handle_ra_input+0x2e4>
		if (lladdr->type == NET_LINK_IEEE802154) {
   2022e:	f898 3005 	ldrb.w	r3, [r8, #5]
   20232:	2b01      	cmp	r3, #1
   20234:	d1e2      	bne.n	201fc <handle_ra_input+0x390>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   20236:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   20238:	22ff      	movs	r2, #255	; 0xff
   2023a:	f88d 2017 	strb.w	r2, [sp, #23]
			addr->s6_addr[12] = 0xfe;
   2023e:	22fe      	movs	r2, #254	; 0xfe
   20240:	f88d 2018 	strb.w	r2, [sp, #24]
			addr->s6_addr[13] = 0;
   20244:	f88d 3019 	strb.w	r3, [sp, #25]
			addr->s6_addr[14] = lladdr->addr[0];
   20248:	6923      	ldr	r3, [r4, #16]
   2024a:	781b      	ldrb	r3, [r3, #0]
   2024c:	f88d 301a 	strb.w	r3, [sp, #26]
			addr->s6_addr[15] = lladdr->addr[1];
   20250:	6923      	ldr	r3, [r4, #16]
   20252:	785b      	ldrb	r3, [r3, #1]
   20254:	f88d 301b 	strb.w	r3, [sp, #27]
   20258:	e7d0      	b.n	201fc <handle_ra_input+0x390>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   2025a:	2203      	movs	r2, #3
   2025c:	6921      	ldr	r1, [r4, #16]
   2025e:	a805      	add	r0, sp, #20
   20260:	f7e0 f82e 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   20264:	23ff      	movs	r3, #255	; 0xff
   20266:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   2026a:	23fe      	movs	r3, #254	; 0xfe
   2026c:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   20270:	6921      	ldr	r1, [r4, #16]
   20272:	2203      	movs	r2, #3
   20274:	4411      	add	r1, r2
   20276:	f10d 0019 	add.w	r0, sp, #25
   2027a:	f7e0 f821 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   2027e:	f898 3005 	ldrb.w	r3, [r8, #5]
   20282:	2b02      	cmp	r3, #2
   20284:	d00a      	beq.n	2029c <handle_ra_input+0x430>
		if (lladdr->type == NET_LINK_ETHERNET) {
   20286:	f898 3005 	ldrb.w	r3, [r8, #5]
   2028a:	2b03      	cmp	r3, #3
   2028c:	d1b6      	bne.n	201fc <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   2028e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20292:	f083 0302 	eor.w	r3, r3, #2
   20296:	f88d 3014 	strb.w	r3, [sp, #20]
   2029a:	e7af      	b.n	201fc <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   2029c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   202a0:	f083 0302 	eor.w	r3, r3, #2
   202a4:	f88d 3014 	strb.w	r3, [sp, #20]
   202a8:	e7ed      	b.n	20286 <handle_ra_input+0x41a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   202aa:	6921      	ldr	r1, [r4, #16]
   202ac:	a805      	add	r0, sp, #20
   202ae:	f7e0 f807 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   202b2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   202b6:	f083 0302 	eor.w	r3, r3, #2
   202ba:	f88d 3014 	strb.w	r3, [sp, #20]
   202be:	e79d      	b.n	201fc <handle_ra_input+0x390>
		if (prefix_info->valid_lifetime ==
   202c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
   202c4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   202c8:	d015      	beq.n	202f6 <handle_ra_input+0x48a>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   202ca:	f5b8 5fe1 	cmp.w	r8, #7200	; 0x1c20
   202ce:	d80a      	bhi.n	202e6 <handle_ra_input+0x47a>
	return _timeout_remaining_get(&work->timeout);
   202d0:	3020      	adds	r0, #32
   202d2:	f008 ff79 	bl	291c8 <_timeout_remaining_get>
	return k_delayed_work_remaining_get(work) / MSEC_PER_SEC;
   202d6:	4a30      	ldr	r2, [pc, #192]	; (20398 <handle_ra_input+0x52c>)
   202d8:	fb82 3200 	smull	r3, r2, r2, r0
   202dc:	17c3      	asrs	r3, r0, #31
   202de:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   202e2:	4598      	cmp	r8, r3
   202e4:	d90a      	bls.n	202fc <handle_ra_input+0x490>
			net_if_ipv6_addr_update_lifetime(ifaddr,
   202e6:	9908      	ldr	r1, [sp, #32]
   202e8:	4620      	mov	r0, r4
   202ea:	f7fa fafb 	bl	1a8e4 <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   202ee:	2300      	movs	r3, #0
   202f0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   202f4:	e72c      	b.n	20150 <handle_ra_input+0x2e4>
   202f6:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
   202fa:	e729      	b.n	20150 <handle_ra_input+0x2e4>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   202fc:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   20300:	4620      	mov	r0, r4
   20302:	f7fa faef 	bl	1a8e4 <net_if_ipv6_addr_update_lifetime>
   20306:	e7f2      	b.n	202ee <handle_ra_input+0x482>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   20308:	2300      	movs	r3, #0
   2030a:	2201      	movs	r2, #1
   2030c:	a903      	add	r1, sp, #12
   2030e:	6970      	ldr	r0, [r6, #20]
   20310:	f7fa faf6 	bl	1a900 <net_if_ipv6_addr_add>
   20314:	e71c      	b.n	20150 <handle_ra_input+0x2e4>
	return pkt->frags->data;
   20316:	68b3      	ldr	r3, [r6, #8]
   20318:	6899      	ldr	r1, [r3, #8]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt),
   2031a:	3108      	adds	r1, #8
   2031c:	6970      	ldr	r0, [r6, #20]
   2031e:	f7fa fe7b 	bl	1b018 <net_if_ipv6_router_lookup>
	if (router) {
   20322:	4603      	mov	r3, r0
   20324:	b350      	cbz	r0, 2037c <handle_ra_input+0x510>
		if (!router_lifetime) {
   20326:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
   2032a:	b321      	cbz	r1, 20376 <handle_ra_input+0x50a>
			if (nbr) {
   2032c:	b11f      	cbz	r7, 20336 <handle_ra_input+0x4ca>
   2032e:	68fa      	ldr	r2, [r7, #12]
				net_ipv6_nbr_data(nbr)->is_router = true;
   20330:	2001      	movs	r0, #1
   20332:	f882 0069 	strb.w	r0, [r2, #105]	; 0x69
			net_if_ipv6_router_update_lifetime(router,
   20336:	4618      	mov	r0, r3
   20338:	f7fa fec6 	bl	1b0c8 <net_if_ipv6_router_update_lifetime>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   2033c:	b18f      	cbz	r7, 20362 <handle_ra_input+0x4f6>
   2033e:	68fb      	ldr	r3, [r7, #12]
   20340:	6818      	ldr	r0, [r3, #0]
   20342:	b170      	cbz	r0, 20362 <handle_ra_input+0x4f6>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   20344:	f7fa f818 	bl	1a378 <net_send_data>
   20348:	2800      	cmp	r0, #0
   2034a:	db20      	blt.n	2038e <handle_ra_input+0x522>
   2034c:	68fc      	ldr	r4, [r7, #12]
	k_delayed_work_cancel(&data->send_ns);
   2034e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   20352:	f008 ffdd 	bl	29310 <k_delayed_work_cancel>
	if (data->pending) {
   20356:	6820      	ldr	r0, [r4, #0]
   20358:	b118      	cbz	r0, 20362 <handle_ra_input+0x4f6>
		net_pkt_unref(data->pending);
   2035a:	f7fc fc0e 	bl	1cb7a <net_pkt_unref>
		data->pending = NULL;
   2035e:	2300      	movs	r3, #0
   20360:	6023      	str	r3, [r4, #0]
	return pkt->iface;
   20362:	6970      	ldr	r0, [r6, #20]
	k_delayed_work_cancel(&net_pkt_iface(pkt)->ipv6.rs_timer);
   20364:	f500 7018 	add.w	r0, r0, #608	; 0x260
   20368:	f008 ffd2 	bl	29310 <k_delayed_work_cancel>
	net_pkt_unref(pkt);
   2036c:	4630      	mov	r0, r6
   2036e:	f7fc fc04 	bl	1cb7a <net_pkt_unref>
	return NET_OK;
   20372:	2000      	movs	r0, #0
   20374:	e5a2      	b.n	1febc <handle_ra_input+0x50>
			net_if_ipv6_router_rm(router);
   20376:	f7fa ff0b 	bl	1b190 <net_if_ipv6_router_rm>
   2037a:	e7df      	b.n	2033c <handle_ra_input+0x4d0>
	return pkt->frags->data;
   2037c:	68b3      	ldr	r3, [r6, #8]
   2037e:	6899      	ldr	r1, [r3, #8]
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   20380:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
   20384:	3108      	adds	r1, #8
   20386:	6970      	ldr	r0, [r6, #20]
   20388:	f7fa feaa 	bl	1b0e0 <net_if_ipv6_router_add>
   2038c:	e7d6      	b.n	2033c <handle_ra_input+0x4d0>
   2038e:	68fb      	ldr	r3, [r7, #12]
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   20390:	6818      	ldr	r0, [r3, #0]
   20392:	f7fc fbf2 	bl	1cb7a <net_pkt_unref>
   20396:	e7d9      	b.n	2034c <handle_ra_input+0x4e0>
   20398:	10624dd3 	.word	0x10624dd3

0002039c <handle_ns_input>:
{
   2039c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   203a0:	b0a5      	sub	sp, #148	; 0x94
   203a2:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   203a4:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   203a6:	2200      	movs	r2, #0
   203a8:	e002      	b.n	203b0 <handle_ns_input+0x14>
		bytes += buf->len;
   203aa:	8999      	ldrh	r1, [r3, #12]
   203ac:	440a      	add	r2, r1
		buf = buf->frags;
   203ae:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   203b0:	2b00      	cmp	r3, #0
   203b2:	d1fa      	bne.n	203aa <handle_ns_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   203b4:	b295      	uxth	r5, r2
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &nshdr);
   203b6:	a90a      	add	r1, sp, #40	; 0x28
   203b8:	4620      	mov	r0, r4
   203ba:	f7fd fe51 	bl	1e060 <net_icmpv6_get_ns_hdr>
   203be:	4606      	mov	r6, r0
	net_stats.ipv6_nd.recv++;
   203c0:	4aa6      	ldr	r2, [pc, #664]	; (2065c <handle_ns_input+0x2c0>)
   203c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   203c6:	3301      	adds	r3, #1
   203c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   203cc:	2d3f      	cmp	r5, #63	; 0x3f
   203ce:	d904      	bls.n	203da <handle_ns_input+0x3e>
	return pkt->frags->data;
   203d0:	68a3      	ldr	r3, [r4, #8]
   203d2:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT)) {
   203d4:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   203d6:	2bff      	cmp	r3, #255	; 0xff
   203d8:	d002      	beq.n	203e0 <handle_ns_input+0x44>
	return addr->s6_addr[0] == 0xFF;
   203da:	7933      	ldrb	r3, [r6, #4]
		if (net_is_ipv6_addr_mcast(&ns_hdr->tgt)) {
   203dc:	2bff      	cmp	r3, #255	; 0xff
   203de:	d00a      	beq.n	203f6 <handle_ns_input+0x5a>
	pkt->ipv6_ext_opt_len = len;
   203e0:	2314      	movs	r3, #20
   203e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   203e6:	a90f      	add	r1, sp, #60	; 0x3c
   203e8:	4620      	mov	r0, r4
   203ea:	f7fd fe95 	bl	1e118 <net_icmpv6_get_nd_opt_hdr>
   203ee:	4607      	mov	r7, r0
	return net_buf_frags_len(pkt->frags);
   203f0:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   203f2:	2500      	movs	r5, #0
   203f4:	e00e      	b.n	20414 <handle_ns_input+0x78>
			icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   203f6:	a908      	add	r1, sp, #32
   203f8:	4620      	mov	r0, r4
   203fa:	f7fd fcc2 	bl	1dd82 <net_icmpv6_get_hdr>
			if (!icmp_hdr || icmp_hdr->code != 0) {
   203fe:	2800      	cmp	r0, #0
   20400:	f000 80b7 	beq.w	20572 <handle_ns_input+0x1d6>
   20404:	7843      	ldrb	r3, [r0, #1]
   20406:	2b00      	cmp	r3, #0
   20408:	f040 80b3 	bne.w	20572 <handle_ns_input+0x1d6>
   2040c:	e7e8      	b.n	203e0 <handle_ns_input+0x44>
		bytes += buf->len;
   2040e:	899a      	ldrh	r2, [r3, #12]
   20410:	4415      	add	r5, r2
		buf = buf->frags;
   20412:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   20414:	2b00      	cmp	r3, #0
   20416:	d1fa      	bne.n	2040e <handle_ns_input+0x72>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   20418:	3d2c      	subs	r5, #44	; 0x2c
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   2041a:	e042      	b.n	204a2 <handle_ns_input+0x106>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2041c:	2100      	movs	r1, #0
			if (net_is_ipv6_addr_unspecified(
   2041e:	2900      	cmp	r1, #0
   20420:	f040 80a7 	bne.w	20572 <handle_ns_input+0x1d6>
					   net_pkt_ip_hdr_len(pkt) +
   20424:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
					   net_pkt_ipv6_ext_len(pkt) +
   20428:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
					   net_pkt_ip_hdr_len(pkt) +
   2042c:	4401      	add	r1, r0
					   sizeof(struct net_icmp_hdr) +
   2042e:	4411      	add	r1, r2
   20430:	b289      	uxth	r1, r1
			handle_ns_neighbor(pkt, nd_opt_hdr->len,
   20432:	3106      	adds	r1, #6
	lladdr.len = 8 * ll_len - 2;
   20434:	00db      	lsls	r3, r3, #3
   20436:	b2db      	uxtb	r3, r3
   20438:	3b02      	subs	r3, #2
   2043a:	b2db      	uxtb	r3, r3
   2043c:	f88d 3019 	strb.w	r3, [sp, #25]
	frag = net_frag_read(pkt->frags, sllao_offset,
   20440:	f10d 021a 	add.w	r2, sp, #26
   20444:	9200      	str	r2, [sp, #0]
   20446:	f10d 0216 	add.w	r2, sp, #22
   2044a:	b289      	uxth	r1, r1
   2044c:	68a0      	ldr	r0, [r4, #8]
   2044e:	f7fc fd12 	bl	1ce76 <net_frag_read>
	if (!frag && pos == 0xffff) {
   20452:	2800      	cmp	r0, #0
   20454:	d042      	beq.n	204dc <handle_ns_input+0x140>
	nbr_lladdr.len = lladdr.len;
   20456:	f89d 3019 	ldrb.w	r3, [sp, #25]
   2045a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	nbr_lladdr.addr = lladdr.addr;
   2045e:	f10d 021a 	add.w	r2, sp, #26
   20462:	9208      	str	r2, [sp, #32]
	if (net_pkt_ll_src(pkt)->len < nbr_lladdr.len) {
   20464:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   20468:	4293      	cmp	r3, r2
   2046a:	d901      	bls.n	20470 <handle_ns_input+0xd4>
		nbr_lladdr.len = net_pkt_ll_src(pkt)->len;
   2046c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return pkt->frags->data;
   20470:	68a3      	ldr	r3, [r4, #8]
   20472:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   20474:	2300      	movs	r3, #0
   20476:	9300      	str	r3, [sp, #0]
   20478:	aa08      	add	r2, sp, #32
   2047a:	3108      	adds	r1, #8
   2047c:	6960      	ldr	r0, [r4, #20]
   2047e:	f7ff fc91 	bl	1fda4 <net_ipv6_nbr_add>
	return pkt->ipv6_ext_opt_len;
   20482:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
					     (nd_opt_hdr->len << 3));
   20486:	787b      	ldrb	r3, [r7, #1]
   20488:	00db      	lsls	r3, r3, #3
   2048a:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   2048c:	4413      	add	r3, r2
   2048e:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   20490:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   20494:	429a      	cmp	r2, r3
   20496:	d26c      	bcs.n	20572 <handle_ns_input+0x1d6>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   20498:	a90f      	add	r1, sp, #60	; 0x3c
   2049a:	4620      	mov	r0, r4
   2049c:	f7fd fe3c 	bl	1e118 <net_icmpv6_get_nd_opt_hdr>
   204a0:	4607      	mov	r7, r0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   204a2:	b317      	cbz	r7, 204ea <handle_ns_input+0x14e>
	return pkt->ipv6_ext_opt_len;
   204a4:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   204a8:	4295      	cmp	r5, r2
   204aa:	d91e      	bls.n	204ea <handle_ns_input+0x14e>
		if (!nd_opt_hdr->len) {
   204ac:	787b      	ldrb	r3, [r7, #1]
   204ae:	b1e3      	cbz	r3, 204ea <handle_ns_input+0x14e>
		switch (nd_opt_hdr->type) {
   204b0:	7839      	ldrb	r1, [r7, #0]
   204b2:	2901      	cmp	r1, #1
   204b4:	d1e5      	bne.n	20482 <handle_ns_input+0xe6>
	return pkt->frags->data;
   204b6:	68a1      	ldr	r1, [r4, #8]
   204b8:	6889      	ldr	r1, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   204ba:	6888      	ldr	r0, [r1, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   204bc:	2800      	cmp	r0, #0
   204be:	d1ad      	bne.n	2041c <handle_ns_input+0x80>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   204c0:	68c8      	ldr	r0, [r1, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   204c2:	b928      	cbnz	r0, 204d0 <handle_ns_input+0x134>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   204c4:	6908      	ldr	r0, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   204c6:	b928      	cbnz	r0, 204d4 <handle_ns_input+0x138>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   204c8:	6949      	ldr	r1, [r1, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   204ca:	b129      	cbz	r1, 204d8 <handle_ns_input+0x13c>
   204cc:	2100      	movs	r1, #0
   204ce:	e7a6      	b.n	2041e <handle_ns_input+0x82>
   204d0:	2100      	movs	r1, #0
   204d2:	e7a4      	b.n	2041e <handle_ns_input+0x82>
   204d4:	2100      	movs	r1, #0
   204d6:	e7a2      	b.n	2041e <handle_ns_input+0x82>
   204d8:	2101      	movs	r1, #1
   204da:	e7a0      	b.n	2041e <handle_ns_input+0x82>
	if (!frag && pos == 0xffff) {
   204dc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   204e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   204e4:	429a      	cmp	r2, r3
   204e6:	d1b6      	bne.n	20456 <handle_ns_input+0xba>
   204e8:	e7cb      	b.n	20482 <handle_ns_input+0xe6>
	return pkt->iface;
   204ea:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   204ee:	f106 0904 	add.w	r9, r6, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   204f2:	2500      	movs	r5, #0
   204f4:	e001      	b.n	204fa <handle_ns_input+0x15e>
		if (net_is_ipv6_prefix(addr->s6_addr,
   204f6:	b9ef      	cbnz	r7, 20534 <handle_ns_input+0x198>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   204f8:	3501      	adds	r5, #1
   204fa:	2d02      	cmp	r5, #2
   204fc:	dc21      	bgt.n	20542 <handle_ns_input+0x1a6>
		if (!iface->ipv6.unicast[i].is_used ||
   204fe:	236c      	movs	r3, #108	; 0x6c
   20500:	fb03 8305 	mla	r3, r3, r5, r8
   20504:	f893 7094 	ldrb.w	r7, [r3, #148]	; 0x94
   20508:	2f00      	cmp	r7, #0
   2050a:	d0f5      	beq.n	204f8 <handle_ns_input+0x15c>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   2050c:	236c      	movs	r3, #108	; 0x6c
   2050e:	fb03 8305 	mla	r3, r3, r5, r8
   20512:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   20514:	2b0a      	cmp	r3, #10
   20516:	d1ef      	bne.n	204f8 <handle_ns_input+0x15c>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   20518:	216c      	movs	r1, #108	; 0x6c
   2051a:	fb01 f105 	mul.w	r1, r1, r5
   2051e:	3120      	adds	r1, #32
   20520:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   20522:	2210      	movs	r2, #16
   20524:	4411      	add	r1, r2
   20526:	4648      	mov	r0, r9
   20528:	f009 f842 	bl	295b0 <memcmp>
   2052c:	2800      	cmp	r0, #0
   2052e:	d0e2      	beq.n	204f6 <handle_ns_input+0x15a>
		return false;
   20530:	2700      	movs	r7, #0
   20532:	e7e0      	b.n	204f6 <handle_ns_input+0x15a>
			return &iface->ipv6.unicast[i];
   20534:	236c      	movs	r3, #108	; 0x6c
   20536:	fb03 f505 	mul.w	r5, r3, r5
   2053a:	3520      	adds	r5, #32
   2053c:	4445      	add	r5, r8
   2053e:	350c      	adds	r5, #12
   20540:	e000      	b.n	20544 <handle_ns_input+0x1a8>
	return NULL;
   20542:	2500      	movs	r5, #0
	if (!ifaddr) {
   20544:	b1ad      	cbz	r5, 20572 <handle_ns_input+0x1d6>
	return pkt->frags->data;
   20546:	68a3      	ldr	r3, [r4, #8]
   20548:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2054a:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2054c:	b93b      	cbnz	r3, 2055e <handle_ns_input+0x1c2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2054e:	68c3      	ldr	r3, [r0, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20550:	b9cb      	cbnz	r3, 20586 <handle_ns_input+0x1ea>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20552:	6903      	ldr	r3, [r0, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20554:	b9cb      	cbnz	r3, 2058a <handle_ns_input+0x1ee>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   20556:	6943      	ldr	r3, [r0, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20558:	b1cb      	cbz	r3, 2058e <handle_ns_input+0x1f2>
   2055a:	2300      	movs	r3, #0
   2055c:	e000      	b.n	20560 <handle_ns_input+0x1c4>
   2055e:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   20560:	2b00      	cmp	r3, #0
   20562:	d07d      	beq.n	20660 <handle_ns_input+0x2c4>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   20564:	6982      	ldr	r2, [r0, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   20566:	f240 23ff 	movw	r3, #767	; 0x2ff
   2056a:	429a      	cmp	r2, r3
   2056c:	d011      	beq.n	20592 <handle_ns_input+0x1f6>
   2056e:	2300      	movs	r3, #0
		if (!net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   20570:	bb0b      	cbnz	r3, 205b6 <handle_ns_input+0x21a>
	net_stats.ipv6_nd.drop++;
   20572:	4a3a      	ldr	r2, [pc, #232]	; (2065c <handle_ns_input+0x2c0>)
   20574:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   20578:	3301      	adds	r3, #1
   2057a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   2057e:	2002      	movs	r0, #2
}
   20580:	b025      	add	sp, #148	; 0x94
   20582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20586:	2300      	movs	r3, #0
   20588:	e7ea      	b.n	20560 <handle_ns_input+0x1c4>
   2058a:	2300      	movs	r3, #0
   2058c:	e7e8      	b.n	20560 <handle_ns_input+0x1c4>
   2058e:	2301      	movs	r3, #1
   20590:	e7e6      	b.n	20560 <handle_ns_input+0x1c4>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   20592:	69c3      	ldr	r3, [r0, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   20594:	b95b      	cbnz	r3, 205ae <handle_ns_input+0x212>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   20596:	6a03      	ldr	r3, [r0, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   20598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2059c:	d001      	beq.n	205a2 <handle_ns_input+0x206>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2059e:	2300      	movs	r3, #0
   205a0:	e7e6      	b.n	20570 <handle_ns_input+0x1d4>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   205a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   205a4:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   205a6:	2bff      	cmp	r3, #255	; 0xff
   205a8:	d003      	beq.n	205b2 <handle_ns_input+0x216>
   205aa:	2300      	movs	r3, #0
   205ac:	e7e0      	b.n	20570 <handle_ns_input+0x1d4>
   205ae:	2300      	movs	r3, #0
   205b0:	e7de      	b.n	20570 <handle_ns_input+0x1d4>
   205b2:	2301      	movs	r3, #1
   205b4:	e7dc      	b.n	20570 <handle_ns_input+0x1d4>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   205b6:	f995 3065 	ldrsb.w	r3, [r5, #101]	; 0x65
   205ba:	b94b      	cbnz	r3, 205d0 <handle_ns_input+0x234>
	return pkt->iface;
   205bc:	6960      	ldr	r0, [r4, #20]
			dad_failed(net_pkt_iface(pkt),
   205be:	1d29      	adds	r1, r5, #4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   205c0:	88aa      	ldrh	r2, [r5, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   205c2:	f248 03fe 	movw	r3, #33022	; 0x80fe
   205c6:	429a      	cmp	r2, r3
   205c8:	d0d3      	beq.n	20572 <handle_ns_input+0x1d6>
	net_if_ipv6_dad_failed(iface, addr);
   205ca:	f7fa fb51 	bl	1ac70 <net_if_ipv6_dad_failed>
   205ce:	e7d0      	b.n	20572 <handle_ns_input+0x1d6>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   205d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   205d4:	7603      	strb	r3, [r0, #24]
   205d6:	2300      	movs	r3, #0
   205d8:	2202      	movs	r2, #2
   205da:	7642      	strb	r2, [r0, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   205dc:	7683      	strb	r3, [r0, #26]
   205de:	76c3      	strb	r3, [r0, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   205e0:	7703      	strb	r3, [r0, #28]
   205e2:	7743      	strb	r3, [r0, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   205e4:	7783      	strb	r3, [r0, #30]
   205e6:	77c3      	strb	r3, [r0, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   205e8:	f880 3020 	strb.w	r3, [r0, #32]
   205ec:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   205f0:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
   205f4:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   205f8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
   205fc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   20600:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
   20604:	2301      	movs	r3, #1
   20606:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	return pkt->frags->data;
   2060a:	68a3      	ldr	r3, [r4, #8]
   2060c:	f8d3 8008 	ldr.w	r8, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   20610:	f108 0118 	add.w	r1, r8, #24
   20614:	6960      	ldr	r0, [r4, #20]
   20616:	f7fa fe15 	bl	1b244 <net_if_ipv6_select_src_addr>
   2061a:	4603      	mov	r3, r0
   2061c:	ae10      	add	r6, sp, #64	; 0x40
   2061e:	6800      	ldr	r0, [r0, #0]
   20620:	6859      	ldr	r1, [r3, #4]
   20622:	689a      	ldr	r2, [r3, #8]
   20624:	68db      	ldr	r3, [r3, #12]
   20626:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20628:	ae10      	add	r6, sp, #64	; 0x40
   2062a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2062c:	f8c8 0008 	str.w	r0, [r8, #8]
   20630:	f8c8 100c 	str.w	r1, [r8, #12]
   20634:	f8c8 2010 	str.w	r2, [r8, #16]
   20638:	f8c8 3014 	str.w	r3, [r8, #20]
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   2063c:	2320      	movs	r3, #32
   2063e:	68a2      	ldr	r2, [r4, #8]
   20640:	6891      	ldr	r1, [r2, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   20642:	9300      	str	r3, [sp, #0]
   20644:	1d2b      	adds	r3, r5, #4
   20646:	f101 0218 	add.w	r2, r1, #24
   2064a:	3108      	adds	r1, #8
   2064c:	6960      	ldr	r0, [r4, #20]
   2064e:	f7fe ff69 	bl	1f524 <net_ipv6_send_na>
	if (!ret) {
   20652:	2800      	cmp	r0, #0
   20654:	f000 80b5 	beq.w	207c2 <handle_ns_input+0x426>
	return NET_DROP;
   20658:	2002      	movs	r0, #2
   2065a:	e791      	b.n	20580 <handle_ns_input+0x1e4>
   2065c:	20002950 	.word	0x20002950
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   20660:	2100      	movs	r1, #0
   20662:	3008      	adds	r0, #8
   20664:	f7fa f8d6 	bl	1a814 <net_if_ipv6_addr_lookup>
	if (net_is_my_ipv6_addr(&NET_IPV6_HDR(pkt)->src)) {
   20668:	4607      	mov	r7, r0
   2066a:	2800      	cmp	r0, #0
   2066c:	d181      	bne.n	20572 <handle_ns_input+0x1d6>
   2066e:	68a3      	ldr	r3, [r4, #8]
   20670:	f8d3 8008 	ldr.w	r8, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   20674:	f8d8 2018 	ldr.w	r2, [r8, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   20678:	f240 23ff 	movw	r3, #767	; 0x2ff
   2067c:	429a      	cmp	r2, r3
   2067e:	d02b      	beq.n	206d8 <handle_ns_input+0x33c>
   20680:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   20682:	9303      	str	r3, [sp, #12]
   20684:	2b00      	cmp	r3, #0
   20686:	d03c      	beq.n	20702 <handle_ns_input+0x366>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   20688:	af14      	add	r7, sp, #80	; 0x50
   2068a:	4643      	mov	r3, r8
   2068c:	f853 0f08 	ldr.w	r0, [r3, #8]!
   20690:	6859      	ldr	r1, [r3, #4]
   20692:	689a      	ldr	r2, [r3, #8]
   20694:	68db      	ldr	r3, [r3, #12]
   20696:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   20698:	af14      	add	r7, sp, #80	; 0x50
   2069a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2069c:	f8c8 0018 	str.w	r0, [r8, #24]
   206a0:	f8c8 101c 	str.w	r1, [r8, #28]
   206a4:	f8c8 2020 	str.w	r2, [r8, #32]
   206a8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
   206ac:	68a3      	ldr	r3, [r4, #8]
   206ae:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   206b2:	af18      	add	r7, sp, #96	; 0x60
   206b4:	f856 0f04 	ldr.w	r0, [r6, #4]!
   206b8:	6871      	ldr	r1, [r6, #4]
   206ba:	68b2      	ldr	r2, [r6, #8]
   206bc:	68f3      	ldr	r3, [r6, #12]
   206be:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   206c0:	ae18      	add	r6, sp, #96	; 0x60
   206c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   206c4:	f8ce 0008 	str.w	r0, [lr, #8]
   206c8:	f8ce 100c 	str.w	r1, [lr, #12]
   206cc:	f8ce 2010 	str.w	r2, [lr, #16]
   206d0:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   206d4:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   206d6:	e7b2      	b.n	2063e <handle_ns_input+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   206d8:	f8d8 301c 	ldr.w	r3, [r8, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   206dc:	b96b      	cbnz	r3, 206fa <handle_ns_input+0x35e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   206de:	f8d8 3020 	ldr.w	r3, [r8, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   206e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   206e6:	d001      	beq.n	206ec <handle_ns_input+0x350>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   206e8:	2300      	movs	r3, #0
   206ea:	e7ca      	b.n	20682 <handle_ns_input+0x2e6>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   206ec:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   206f0:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   206f2:	2bff      	cmp	r3, #255	; 0xff
   206f4:	d003      	beq.n	206fe <handle_ns_input+0x362>
   206f6:	2300      	movs	r3, #0
   206f8:	e7c3      	b.n	20682 <handle_ns_input+0x2e6>
   206fa:	2300      	movs	r3, #0
   206fc:	e7c1      	b.n	20682 <handle_ns_input+0x2e6>
   206fe:	2301      	movs	r3, #1
   20700:	e7bf      	b.n	20682 <handle_ns_input+0x2e6>
	return pkt->iface;
   20702:	f8d4 a014 	ldr.w	sl, [r4, #20]
	if (net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   20706:	f108 0818 	add.w	r8, r8, #24
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   2070a:	f04f 0900 	mov.w	r9, #0
   2070e:	e004      	b.n	2071a <handle_ns_input+0x37e>
		return false;
   20710:	f8dd b00c 	ldr.w	fp, [sp, #12]
   20714:	e01e      	b.n	20754 <handle_ns_input+0x3b8>
   20716:	f109 0901 	add.w	r9, r9, #1
   2071a:	f1b9 0f02 	cmp.w	r9, #2
   2071e:	dc22      	bgt.n	20766 <handle_ns_input+0x3ca>
		if (!iface->ipv6.unicast[i].is_used ||
   20720:	236c      	movs	r3, #108	; 0x6c
   20722:	fb03 a309 	mla	r3, r3, r9, sl
   20726:	f893 b094 	ldrb.w	fp, [r3, #148]	; 0x94
   2072a:	f1bb 0f00 	cmp.w	fp, #0
   2072e:	d0f2      	beq.n	20716 <handle_ns_input+0x37a>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   20730:	236c      	movs	r3, #108	; 0x6c
   20732:	fb03 a309 	mla	r3, r3, r9, sl
   20736:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   20738:	2b0a      	cmp	r3, #10
   2073a:	d1ec      	bne.n	20716 <handle_ns_input+0x37a>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   2073c:	216c      	movs	r1, #108	; 0x6c
   2073e:	fb01 f109 	mul.w	r1, r1, r9
   20742:	3120      	adds	r1, #32
   20744:	4451      	add	r1, sl
	if (memcmp(addr1, addr2, bytes)) {
   20746:	2210      	movs	r2, #16
   20748:	4411      	add	r1, r2
   2074a:	4640      	mov	r0, r8
   2074c:	f008 ff30 	bl	295b0 <memcmp>
   20750:	2800      	cmp	r0, #0
   20752:	d1dd      	bne.n	20710 <handle_ns_input+0x374>
		if (net_is_ipv6_prefix(addr->s6_addr,
   20754:	f1bb 0f00 	cmp.w	fp, #0
   20758:	d0dd      	beq.n	20716 <handle_ns_input+0x37a>
			return &iface->ipv6.unicast[i];
   2075a:	276c      	movs	r7, #108	; 0x6c
   2075c:	fb07 f709 	mul.w	r7, r7, r9
   20760:	3720      	adds	r7, #32
   20762:	4457      	add	r7, sl
   20764:	370c      	adds	r7, #12
   20766:	2f00      	cmp	r7, #0
   20768:	f43f af03 	beq.w	20572 <handle_ns_input+0x1d6>
	return pkt->frags->data;
   2076c:	68a3      	ldr	r3, [r4, #8]
   2076e:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   20772:	af1c      	add	r7, sp, #112	; 0x70
   20774:	4663      	mov	r3, ip
   20776:	f853 0f08 	ldr.w	r0, [r3, #8]!
   2077a:	6859      	ldr	r1, [r3, #4]
   2077c:	689a      	ldr	r2, [r3, #8]
   2077e:	68db      	ldr	r3, [r3, #12]
   20780:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   20782:	af1c      	add	r7, sp, #112	; 0x70
   20784:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   20786:	f8cc 0018 	str.w	r0, [ip, #24]
   2078a:	f8cc 101c 	str.w	r1, [ip, #28]
   2078e:	f8cc 2020 	str.w	r2, [ip, #32]
   20792:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   20796:	68a3      	ldr	r3, [r4, #8]
   20798:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   2079c:	af20      	add	r7, sp, #128	; 0x80
   2079e:	f856 0f04 	ldr.w	r0, [r6, #4]!
   207a2:	6871      	ldr	r1, [r6, #4]
   207a4:	68b2      	ldr	r2, [r6, #8]
   207a6:	68f3      	ldr	r3, [r6, #12]
   207a8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   207aa:	ae20      	add	r6, sp, #128	; 0x80
   207ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   207ae:	f8ce 0008 	str.w	r0, [lr, #8]
   207b2:	f8ce 100c 	str.w	r1, [lr, #12]
   207b6:	f8ce 2010 	str.w	r2, [lr, #16]
   207ba:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   207be:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   207c0:	e73d      	b.n	2063e <handle_ns_input+0x2a2>
		net_pkt_unref(pkt);
   207c2:	4620      	mov	r0, r4
   207c4:	f7fc f9d9 	bl	1cb7a <net_pkt_unref>
		return NET_OK;
   207c8:	2000      	movs	r0, #0
   207ca:	e6d9      	b.n	20580 <handle_ns_input+0x1e4>

000207cc <nd_reachable_timeout>:
{
   207cc:	b530      	push	{r4, r5, lr}
   207ce:	b083      	sub	sp, #12
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   207d0:	f1a0 0514 	sub.w	r5, r0, #20
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   207d4:	2300      	movs	r3, #0
   207d6:	2b07      	cmp	r3, #7
   207d8:	dc07      	bgt.n	207ea <nd_reachable_timeout+0x1e>
	return &net_neighbor_pool[idx].nbr;
   207da:	4c47      	ldr	r4, [pc, #284]	; (208f8 <nd_reachable_timeout+0x12c>)
   207dc:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   207e0:	68e2      	ldr	r2, [r4, #12]
   207e2:	4295      	cmp	r5, r2
   207e4:	d002      	beq.n	207ec <nd_reachable_timeout+0x20>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   207e6:	3301      	adds	r3, #1
   207e8:	e7f5      	b.n	207d6 <nd_reachable_timeout+0xa>
	return NULL;
   207ea:	2400      	movs	r4, #0
	if (!data || !nbr) {
   207ec:	b38d      	cbz	r5, 20852 <nd_reachable_timeout+0x86>
   207ee:	b384      	cbz	r4, 20852 <nd_reachable_timeout+0x86>
   207f0:	4603      	mov	r3, r0
	switch (data->state) {
   207f2:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   207f6:	2a04      	cmp	r2, #4
   207f8:	d82b      	bhi.n	20852 <nd_reachable_timeout+0x86>
   207fa:	e8df f002 	tbb	[pc, r2]
   207fe:	2703      	.short	0x2703
   20800:	3f2c      	.short	0x3f2c
   20802:	45          	.byte	0x45
   20803:	00          	.byte	0x00
		if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   20804:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   20808:	2a02      	cmp	r2, #2
   2080a:	d912      	bls.n	20832 <nd_reachable_timeout+0x66>
   2080c:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   2080e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   20812:	f008 fd7d 	bl	29310 <k_delayed_work_cancel>
	if (data->pending) {
   20816:	6828      	ldr	r0, [r5, #0]
   20818:	b118      	cbz	r0, 20822 <nd_reachable_timeout+0x56>
		net_pkt_unref(data->pending);
   2081a:	f7fc f9ae 	bl	1cb7a <net_pkt_unref>
		data->pending = NULL;
   2081e:	2300      	movs	r3, #0
   20820:	602b      	str	r3, [r5, #0]
   20822:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   20824:	3014      	adds	r0, #20
   20826:	f008 fd73 	bl	29310 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   2082a:	4620      	mov	r0, r4
   2082c:	f7fd ffa6 	bl	1e77c <net_nbr_unref>
   20830:	e00f      	b.n	20852 <nd_reachable_timeout+0x86>
			data->ns_count++;
   20832:	3201      	adds	r2, #1
   20834:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   20838:	68a0      	ldr	r0, [r4, #8]
   2083a:	2100      	movs	r1, #0
   2083c:	9101      	str	r1, [sp, #4]
   2083e:	3b10      	subs	r3, #16
   20840:	9300      	str	r3, [sp, #0]
   20842:	460b      	mov	r3, r1
   20844:	460a      	mov	r2, r1
   20846:	f7ff f927 	bl	1fa98 <net_ipv6_send_ns>
   2084a:	e002      	b.n	20852 <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_STALE;
   2084c:	2202      	movs	r2, #2
   2084e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
}
   20852:	b003      	add	sp, #12
   20854:	bd30      	pop	{r4, r5, pc}
   20856:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   20858:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   2085c:	f008 fd58 	bl	29310 <k_delayed_work_cancel>
	if (data->pending) {
   20860:	6828      	ldr	r0, [r5, #0]
   20862:	b118      	cbz	r0, 2086c <nd_reachable_timeout+0xa0>
		net_pkt_unref(data->pending);
   20864:	f7fc f989 	bl	1cb7a <net_pkt_unref>
		data->pending = NULL;
   20868:	2300      	movs	r3, #0
   2086a:	602b      	str	r3, [r5, #0]
   2086c:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   2086e:	3014      	adds	r0, #20
   20870:	f008 fd4e 	bl	29310 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   20874:	4620      	mov	r0, r4
   20876:	f7fd ff81 	bl	1e77c <net_nbr_unref>
   2087a:	e7ea      	b.n	20852 <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_PROBE;
   2087c:	2204      	movs	r2, #4
   2087e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		data->ns_count = 0;
   20882:	2200      	movs	r2, #0
   20884:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
		if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   20888:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
   2088c:	2a02      	cmp	r2, #2
   2088e:	d91f      	bls.n	208d0 <nd_reachable_timeout+0x104>
			router = net_if_ipv6_router_lookup(nbr->iface,
   20890:	f1a3 0110 	sub.w	r1, r3, #16
   20894:	68a0      	ldr	r0, [r4, #8]
   20896:	f7fa fbbf 	bl	1b018 <net_if_ipv6_router_lookup>
			if (router && !router->is_infinite) {
   2089a:	2800      	cmp	r0, #0
   2089c:	d0d9      	beq.n	20852 <nd_reachable_timeout+0x86>
   2089e:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
   208a2:	2a00      	cmp	r2, #0
   208a4:	d1d5      	bne.n	20852 <nd_reachable_timeout+0x86>
				net_if_ipv6_router_rm(router);
   208a6:	f7fa fc73 	bl	1b190 <net_if_ipv6_router_rm>
   208aa:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   208ac:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   208b0:	f008 fd2e 	bl	29310 <k_delayed_work_cancel>
	if (data->pending) {
   208b4:	6828      	ldr	r0, [r5, #0]
   208b6:	b118      	cbz	r0, 208c0 <nd_reachable_timeout+0xf4>
		net_pkt_unref(data->pending);
   208b8:	f7fc f95f 	bl	1cb7a <net_pkt_unref>
		data->pending = NULL;
   208bc:	2300      	movs	r3, #0
   208be:	602b      	str	r3, [r5, #0]
   208c0:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   208c2:	3014      	adds	r0, #20
   208c4:	f008 fd24 	bl	29310 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   208c8:	4620      	mov	r0, r4
   208ca:	f7fd ff57 	bl	1e77c <net_nbr_unref>
   208ce:	e7c0      	b.n	20852 <nd_reachable_timeout+0x86>
			data->ns_count++;
   208d0:	3201      	adds	r2, #1
   208d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   208d6:	68a0      	ldr	r0, [r4, #8]
   208d8:	2100      	movs	r1, #0
   208da:	9101      	str	r1, [sp, #4]
   208dc:	3b10      	subs	r3, #16
   208de:	9300      	str	r3, [sp, #0]
   208e0:	460b      	mov	r3, r1
   208e2:	460a      	mov	r2, r1
   208e4:	f7ff f8d8 	bl	1fa98 <net_ipv6_send_ns>
   208e8:	68e1      	ldr	r1, [r4, #12]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   208ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   208ee:	3114      	adds	r1, #20
   208f0:	4802      	ldr	r0, [pc, #8]	; (208fc <nd_reachable_timeout+0x130>)
   208f2:	f008 fd67 	bl	293c4 <k_delayed_work_submit_to_queue>
   208f6:	e7ac      	b.n	20852 <nd_reachable_timeout+0x86>
   208f8:	2000bd50 	.word	0x2000bd50
   208fc:	20002a70 	.word	0x20002a70

00020900 <net_ipv6_start_dad>:
{
   20900:	b500      	push	{lr}
   20902:	b083      	sub	sp, #12
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   20904:	2301      	movs	r3, #1
   20906:	9301      	str	r3, [sp, #4]
   20908:	3104      	adds	r1, #4
   2090a:	9100      	str	r1, [sp, #0]
   2090c:	2300      	movs	r3, #0
   2090e:	461a      	mov	r2, r3
   20910:	4619      	mov	r1, r3
   20912:	f7ff f8c1 	bl	1fa98 <net_ipv6_send_ns>
}
   20916:	b003      	add	sp, #12
   20918:	f85d fb04 	ldr.w	pc, [sp], #4

0002091c <net_ipv6_prepare_for_send>:
{
   2091c:	b570      	push	{r4, r5, r6, lr}
   2091e:	b084      	sub	sp, #16
	struct net_if *iface = NULL;
   20920:	2300      	movs	r3, #0
   20922:	9303      	str	r3, [sp, #12]
	return pkt->iface;
   20924:	6943      	ldr	r3, [r0, #20]
   20926:	f3bf 8f5b 	dmb	ish
   2092a:	68db      	ldr	r3, [r3, #12]
   2092c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(net_pkt_iface(pkt)->flags, NET_IF_POINTOPOINT)) {
   20930:	f013 0f02 	tst.w	r3, #2
   20934:	d108      	bne.n	20948 <net_ipv6_prepare_for_send+0x2c>
   20936:	4604      	mov	r4, r0
	if (net_pkt_ll_dst(pkt)->addr ||
   20938:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2093a:	b13b      	cbz	r3, 2094c <net_ipv6_prepare_for_send+0x30>
	return pkt->frags->data;
   2093c:	68a3      	ldr	r3, [r4, #8]
   2093e:	6899      	ldr	r1, [r3, #8]
		return update_ll_reserve(pkt, &NET_IPV6_HDR(pkt)->dst);
   20940:	3118      	adds	r1, #24
   20942:	4620      	mov	r0, r4
   20944:	f7fe f9e6 	bl	1ed14 <update_ll_reserve>
}
   20948:	b004      	add	sp, #16
   2094a:	bd70      	pop	{r4, r5, r6, pc}
   2094c:	6883      	ldr	r3, [r0, #8]
   2094e:	6899      	ldr	r1, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   20950:	7e0b      	ldrb	r3, [r1, #24]
	if (net_pkt_ll_dst(pkt)->addr ||
   20952:	2bff      	cmp	r3, #255	; 0xff
   20954:	d0f2      	beq.n	2093c <net_ipv6_prepare_for_send+0x20>
	if (net_if_ipv6_addr_onlink(&iface,
   20956:	3118      	adds	r1, #24
   20958:	a803      	add	r0, sp, #12
   2095a:	f7fa fa9d 	bl	1ae98 <net_if_ipv6_addr_onlink>
   2095e:	b348      	cbz	r0, 209b4 <net_ipv6_prepare_for_send+0x98>
   20960:	68a3      	ldr	r3, [r4, #8]
   20962:	689d      	ldr	r5, [r3, #8]
		nexthop = &NET_IPV6_HDR(pkt)->dst;
   20964:	3518      	adds	r5, #24
		net_pkt_set_iface(pkt, iface);
   20966:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   20968:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   2096a:	7d5a      	ldrb	r2, [r3, #21]
   2096c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20970:	7d5b      	ldrb	r3, [r3, #21]
   20972:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	if (!iface) {
   20976:	9b03      	ldr	r3, [sp, #12]
   20978:	2b00      	cmp	r3, #0
   2097a:	d03e      	beq.n	209fa <net_ipv6_prepare_for_send+0xde>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), nexthop);
   2097c:	462a      	mov	r2, r5
   2097e:	6961      	ldr	r1, [r4, #20]
   20980:	4832      	ldr	r0, [pc, #200]	; (20a4c <net_ipv6_prepare_for_send+0x130>)
   20982:	f7fe f90d 	bl	1eba0 <nbr_lookup>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   20986:	4606      	mov	r6, r0
   20988:	2800      	cmp	r0, #0
   2098a:	d051      	beq.n	20a30 <net_ipv6_prepare_for_send+0x114>
   2098c:	7840      	ldrb	r0, [r0, #1]
   2098e:	28ff      	cmp	r0, #255	; 0xff
   20990:	d04e      	beq.n	20a30 <net_ipv6_prepare_for_send+0x114>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   20992:	f7fd ff85 	bl	1e8a0 <net_nbr_get_lladdr>
		net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   20996:	1c83      	adds	r3, r0, #2
   20998:	62a3      	str	r3, [r4, #40]	; 0x28
		net_pkt_ll_dst(pkt)->len = lladdr->len;
   2099a:	7843      	ldrb	r3, [r0, #1]
   2099c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   209a0:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   209a2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   209a6:	2b02      	cmp	r3, #2
   209a8:	d036      	beq.n	20a18 <net_ipv6_prepare_for_send+0xfc>
		return update_ll_reserve(pkt, nexthop);
   209aa:	4629      	mov	r1, r5
   209ac:	4620      	mov	r0, r4
   209ae:	f7fe f9b1 	bl	1ed14 <update_ll_reserve>
   209b2:	e7c9      	b.n	20948 <net_ipv6_prepare_for_send+0x2c>
	return pkt->frags->data;
   209b4:	68a3      	ldr	r3, [r4, #8]
   209b6:	6899      	ldr	r1, [r3, #8]
		route = net_route_lookup(NULL, &NET_IPV6_HDR(pkt)->dst);
   209b8:	3118      	adds	r1, #24
   209ba:	2000      	movs	r0, #0
   209bc:	f001 fb26 	bl	2200c <net_route_lookup>
		if (route) {
   209c0:	4606      	mov	r6, r0
   209c2:	b160      	cbz	r0, 209de <net_ipv6_prepare_for_send+0xc2>
			nexthop = net_route_get_nexthop(route);
   209c4:	f001 fc06 	bl	221d4 <net_route_get_nexthop>
			if (!nexthop) {
   209c8:	4605      	mov	r5, r0
   209ca:	2800      	cmp	r0, #0
   209cc:	d1d3      	bne.n	20976 <net_ipv6_prepare_for_send+0x5a>
				net_route_del(route);
   209ce:	4630      	mov	r0, r6
   209d0:	f001 fbac 	bl	2212c <net_route_del>
				net_pkt_unref(pkt);
   209d4:	4620      	mov	r0, r4
   209d6:	f7fc f8d0 	bl	1cb7a <net_pkt_unref>
				return NULL;
   209da:	2000      	movs	r0, #0
   209dc:	e7b4      	b.n	20948 <net_ipv6_prepare_for_send+0x2c>
   209de:	68a3      	ldr	r3, [r4, #8]
   209e0:	6899      	ldr	r1, [r3, #8]
			router = net_if_ipv6_router_find_default(NULL,
   209e2:	3118      	adds	r1, #24
   209e4:	2000      	movs	r0, #0
   209e6:	f7fa fb47 	bl	1b078 <net_if_ipv6_router_find_default>
			if (!router) {
   209ea:	4605      	mov	r5, r0
   209ec:	b108      	cbz	r0, 209f2 <net_ipv6_prepare_for_send+0xd6>
			nexthop = &router->address.in6_addr;
   209ee:	352c      	adds	r5, #44	; 0x2c
   209f0:	e7c1      	b.n	20976 <net_ipv6_prepare_for_send+0x5a>
   209f2:	68a3      	ldr	r3, [r4, #8]
   209f4:	689d      	ldr	r5, [r3, #8]
				nexthop = &NET_IPV6_HDR(pkt)->dst;
   209f6:	3518      	adds	r5, #24
				goto try_send;
   209f8:	e7c0      	b.n	2097c <net_ipv6_prepare_for_send+0x60>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   209fa:	4629      	mov	r1, r5
   209fc:	a803      	add	r0, sp, #12
   209fe:	f7fa fa4b 	bl	1ae98 <net_if_ipv6_addr_onlink>
   20a02:	2800      	cmp	r0, #0
   20a04:	d0ba      	beq.n	2097c <net_ipv6_prepare_for_send+0x60>
			net_pkt_set_iface(pkt, iface);
   20a06:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   20a08:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20a0a:	7d5a      	ldrb	r2, [r3, #21]
   20a0c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20a10:	7d5b      	ldrb	r3, [r3, #21]
   20a12:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   20a16:	e7b1      	b.n	2097c <net_ipv6_prepare_for_send+0x60>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   20a18:	2103      	movs	r1, #3
   20a1a:	4630      	mov	r0, r6
   20a1c:	f7fd ff48 	bl	1e8b0 <ipv6_nbr_set_state>
   20a20:	68f1      	ldr	r1, [r6, #12]
   20a22:	f241 3288 	movw	r2, #5000	; 0x1388
   20a26:	3114      	adds	r1, #20
   20a28:	4809      	ldr	r0, [pc, #36]	; (20a50 <net_ipv6_prepare_for_send+0x134>)
   20a2a:	f008 fccb 	bl	293c4 <k_delayed_work_submit_to_queue>
   20a2e:	e7bc      	b.n	209aa <net_ipv6_prepare_for_send+0x8e>
	return pkt->iface;
   20a30:	6960      	ldr	r0, [r4, #20]
	return pkt->frags->data;
   20a32:	68a3      	ldr	r3, [r4, #8]
   20a34:	689a      	ldr	r2, [r3, #8]
	if (net_ipv6_send_ns(net_pkt_iface(pkt),
   20a36:	2600      	movs	r6, #0
   20a38:	9601      	str	r6, [sp, #4]
   20a3a:	9500      	str	r5, [sp, #0]
   20a3c:	4633      	mov	r3, r6
   20a3e:	3208      	adds	r2, #8
   20a40:	4621      	mov	r1, r4
   20a42:	f7ff f829 	bl	1fa98 <net_ipv6_send_ns>
		return NULL;
   20a46:	4630      	mov	r0, r6
   20a48:	e77e      	b.n	20948 <net_ipv6_prepare_for_send+0x2c>
   20a4a:	bf00      	nop
   20a4c:	2000bd44 	.word	0x2000bd44
   20a50:	20002a70 	.word	0x20002a70

00020a54 <net_ipv6_send_rs>:
{
   20a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20a58:	b084      	sub	sp, #16
   20a5a:	4605      	mov	r5, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   20a5c:	6843      	ldr	r3, [r0, #4]
   20a5e:	689b      	ldr	r3, [r3, #8]
   20a60:	2100      	movs	r1, #0
   20a62:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   20a64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20a68:	f7fc f816 	bl	1ca98 <net_pkt_get_reserve_tx>
   20a6c:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   20a6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20a72:	f7fc f82f 	bl	1cad4 <net_pkt_get_frag>
   20a76:	4606      	mov	r6, r0
	net_pkt_frag_add(pkt, frag);
   20a78:	4601      	mov	r1, r0
   20a7a:	4620      	mov	r0, r4
   20a7c:	f7fc f8a7 	bl	1cbce <net_pkt_frag_add>
	pkt->iface = iface;
   20a80:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20a82:	7d6b      	ldrb	r3, [r5, #21]
   20a84:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20a88:	7d6b      	ldrb	r3, [r5, #21]
   20a8a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   20a8e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   20a92:	220a      	movs	r2, #10
   20a94:	f362 03c6 	bfi	r3, r2, #3, #4
   20a98:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   20a9c:	2328      	movs	r3, #40	; 0x28
   20a9e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   20aa2:	68a3      	ldr	r3, [r4, #8]
   20aa4:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   20aa6:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   20aaa:	461a      	mov	r2, r3
   20aac:	2100      	movs	r1, #0
   20aae:	1ac0      	subs	r0, r0, r3
   20ab0:	f008 fe12 	bl	296d8 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   20ab4:	2200      	movs	r2, #0
   20ab6:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   20ab8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	return pkt->frags->data;
   20abc:	68a3      	ldr	r3, [r4, #8]
   20abe:	689b      	ldr	r3, [r3, #8]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   20ac0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20ac4:	7619      	strb	r1, [r3, #24]
   20ac6:	2102      	movs	r1, #2
   20ac8:	7659      	strb	r1, [r3, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   20aca:	769a      	strb	r2, [r3, #26]
   20acc:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   20ace:	771a      	strb	r2, [r3, #28]
   20ad0:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   20ad2:	779a      	strb	r2, [r3, #30]
   20ad4:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   20ad6:	f883 2020 	strb.w	r2, [r3, #32]
   20ada:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   20ade:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   20ae2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   20ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   20aea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   20aee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   20af2:	2201      	movs	r2, #1
   20af4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
   20af8:	68a3      	ldr	r3, [r4, #8]
   20afa:	f8d3 8008 	ldr.w	r8, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   20afe:	f108 0118 	add.w	r1, r8, #24
   20b02:	4628      	mov	r0, r5
   20b04:	f7fa fb9e 	bl	1b244 <net_if_ipv6_select_src_addr>
   20b08:	4603      	mov	r3, r0
   20b0a:	466d      	mov	r5, sp
   20b0c:	6800      	ldr	r0, [r0, #0]
   20b0e:	6859      	ldr	r1, [r3, #4]
   20b10:	689a      	ldr	r2, [r3, #8]
   20b12:	68db      	ldr	r3, [r3, #12]
   20b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20b16:	466d      	mov	r5, sp
   20b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20b1a:	f8c8 0008 	str.w	r0, [r8, #8]
   20b1e:	f8c8 100c 	str.w	r1, [r8, #12]
   20b22:	f8c8 2010 	str.w	r2, [r8, #16]
   20b26:	f8c8 3014 	str.w	r3, [r8, #20]
   20b2a:	68a3      	ldr	r3, [r4, #8]
   20b2c:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20b2e:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20b30:	b93a      	cbnz	r2, 20b42 <net_ipv6_send_rs+0xee>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20b32:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20b34:	b982      	cbnz	r2, 20b58 <net_ipv6_send_rs+0x104>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20b36:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20b38:	b982      	cbnz	r2, 20b5c <net_ipv6_send_rs+0x108>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   20b3a:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20b3c:	b183      	cbz	r3, 20b60 <net_ipv6_send_rs+0x10c>
   20b3e:	2300      	movs	r3, #0
   20b40:	e000      	b.n	20b44 <net_ipv6_send_rs+0xf0>
   20b42:	2300      	movs	r3, #0
	if (!unspec_src) {
   20b44:	461f      	mov	r7, r3
   20b46:	b97b      	cbnz	r3, 20b68 <net_ipv6_send_rs+0x114>
	return pkt->iface;
   20b48:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   20b4a:	7d1b      	ldrb	r3, [r3, #20]
   20b4c:	2b06      	cmp	r3, #6
   20b4e:	d02a      	beq.n	20ba6 <net_ipv6_send_rs+0x152>
	} else if (iface->link_addr.len == 8) {
   20b50:	2b08      	cmp	r3, #8
   20b52:	d007      	beq.n	20b64 <net_ipv6_send_rs+0x110>
	return 0;
   20b54:	2500      	movs	r5, #0
   20b56:	e008      	b.n	20b6a <net_ipv6_send_rs+0x116>
   20b58:	2300      	movs	r3, #0
   20b5a:	e7f3      	b.n	20b44 <net_ipv6_send_rs+0xf0>
   20b5c:	2300      	movs	r3, #0
   20b5e:	e7f1      	b.n	20b44 <net_ipv6_send_rs+0xf0>
   20b60:	2301      	movs	r3, #1
   20b62:	e7ef      	b.n	20b44 <net_ipv6_send_rs+0xf0>
		return 16;
   20b64:	2510      	movs	r5, #16
   20b66:	e000      	b.n	20b6a <net_ipv6_send_rs+0x116>
	u8_t llao_len = 0;
   20b68:	2500      	movs	r5, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   20b6a:	2285      	movs	r2, #133	; 0x85
   20b6c:	1d29      	adds	r1, r5, #4
   20b6e:	4620      	mov	r0, r4
   20b70:	f7fe f92f 	bl	1edd2 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   20b74:	3608      	adds	r6, #8
   20b76:	2104      	movs	r1, #4
   20b78:	4630      	mov	r0, r6
   20b7a:	f7f9 fadb 	bl	1a134 <net_buf_simple_add>
	if (!unspec_src) {
   20b7e:	b1a7      	cbz	r7, 20baa <net_ipv6_send_rs+0x156>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   20b80:	68a1      	ldr	r1, [r4, #8]
   20b82:	4620      	mov	r0, r4
   20b84:	f7fd f8b0 	bl	1dce8 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   20b88:	4620      	mov	r0, r4
   20b8a:	f7f9 fbf5 	bl	1a378 <net_send_data>
   20b8e:	2800      	cmp	r0, #0
   20b90:	db2b      	blt.n	20bea <net_ipv6_send_rs+0x196>
	net_stats.ipv6_nd.sent++;
   20b92:	4a1c      	ldr	r2, [pc, #112]	; (20c04 <net_ipv6_send_rs+0x1b0>)
   20b94:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   20b98:	3301      	adds	r3, #1
   20b9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   20b9e:	2000      	movs	r0, #0
}
   20ba0:	b004      	add	sp, #16
   20ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 8;
   20ba6:	2508      	movs	r5, #8
   20ba8:	e7df      	b.n	20b6a <net_ipv6_send_rs+0x116>
		net_buf_add(frag, llao_len);
   20baa:	4629      	mov	r1, r5
   20bac:	4630      	mov	r0, r6
   20bae:	f7f9 fac1 	bl	1a134 <net_buf_simple_add>
   20bb2:	f8d4 8014 	ldr.w	r8, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   20bb6:	4620      	mov	r0, r4
   20bb8:	f7fc fab8 	bl	1d12c <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   20bbc:	f100 0608 	add.w	r6, r0, #8
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   20bc0:	2301      	movs	r3, #1
   20bc2:	7203      	strb	r3, [r0, #8]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   20bc4:	08eb      	lsrs	r3, r5, #3
   20bc6:	7243      	strb	r3, [r0, #9]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   20bc8:	f898 2014 	ldrb.w	r2, [r8, #20]
   20bcc:	f8d8 1010 	ldr.w	r1, [r8, #16]
   20bd0:	300a      	adds	r0, #10
   20bd2:	f7df fb75 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   20bd6:	f898 2014 	ldrb.w	r2, [r8, #20]
   20bda:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   20bdc:	1aaa      	subs	r2, r5, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   20bde:	3a02      	subs	r2, #2
   20be0:	2100      	movs	r1, #0
   20be2:	4430      	add	r0, r6
   20be4:	f008 fd78 	bl	296d8 <memset>
   20be8:	e7ca      	b.n	20b80 <net_ipv6_send_rs+0x12c>
	net_pkt_unref(pkt);
   20bea:	4620      	mov	r0, r4
   20bec:	f7fb ffc5 	bl	1cb7a <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   20bf0:	4a04      	ldr	r2, [pc, #16]	; (20c04 <net_ipv6_send_rs+0x1b0>)
   20bf2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   20bf6:	3301      	adds	r3, #1
   20bf8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   20bfc:	f06f 0015 	mvn.w	r0, #21
   20c00:	e7ce      	b.n	20ba0 <net_ipv6_send_rs+0x14c>
   20c02:	bf00      	nop
   20c04:	20002950 	.word	0x20002950

00020c08 <net_ipv6_start_rs>:
{
   20c08:	b508      	push	{r3, lr}
	return net_ipv6_send_rs(iface);
   20c0a:	f7ff ff23 	bl	20a54 <net_ipv6_send_rs>
}
   20c0e:	bd08      	pop	{r3, pc}

00020c10 <net_ipv6_mld_join>:
{
   20c10:	b570      	push	{r4, r5, r6, lr}
   20c12:	b082      	sub	sp, #8
   20c14:	ab02      	add	r3, sp, #8
   20c16:	f843 0d04 	str.w	r0, [r3, #-4]!
   20c1a:	460d      	mov	r5, r1
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   20c1c:	4619      	mov	r1, r3
   20c1e:	4628      	mov	r0, r5
   20c20:	f7fa f842 	bl	1aca8 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   20c24:	4604      	mov	r4, r0
   20c26:	b118      	cbz	r0, 20c30 <net_ipv6_mld_join+0x20>
	return addr->is_joined;
   20c28:	7803      	ldrb	r3, [r0, #0]
   20c2a:	f013 0f02 	tst.w	r3, #2
   20c2e:	d123      	bne.n	20c78 <net_ipv6_mld_join+0x68>
	if (!maddr) {
   20c30:	b1c4      	cbz	r4, 20c64 <net_ipv6_mld_join+0x54>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   20c32:	2202      	movs	r2, #2
   20c34:	4629      	mov	r1, r5
   20c36:	9801      	ldr	r0, [sp, #4]
   20c38:	f7fe fb5a 	bl	1f2f0 <send_mldv2>
	if (ret < 0) {
   20c3c:	1e06      	subs	r6, r0, #0
   20c3e:	db0e      	blt.n	20c5e <net_ipv6_mld_join+0x4e>
	addr->is_joined = true;
   20c40:	7823      	ldrb	r3, [r4, #0]
   20c42:	f043 0302 	orr.w	r3, r3, #2
   20c46:	7023      	strb	r3, [r4, #0]
	net_if_mcast_monitor(iface, addr, true);
   20c48:	2201      	movs	r2, #1
   20c4a:	4629      	mov	r1, r5
   20c4c:	9801      	ldr	r0, [sp, #4]
   20c4e:	f7fa f877 	bl	1ad40 <net_if_mcast_monitor>
   20c52:	2300      	movs	r3, #0
   20c54:	461a      	mov	r2, r3
   20c56:	9901      	ldr	r1, [sp, #4]
   20c58:	4809      	ldr	r0, [pc, #36]	; (20c80 <net_ipv6_mld_join+0x70>)
   20c5a:	f001 fc01 	bl	22460 <net_mgmt_event_notify_with_info>
}
   20c5e:	4630      	mov	r0, r6
   20c60:	b002      	add	sp, #8
   20c62:	bd70      	pop	{r4, r5, r6, pc}
		maddr = net_if_ipv6_maddr_add(iface, addr);
   20c64:	4629      	mov	r1, r5
   20c66:	9801      	ldr	r0, [sp, #4]
   20c68:	f7f9 ff32 	bl	1aad0 <net_if_ipv6_maddr_add>
		if (!maddr) {
   20c6c:	4604      	mov	r4, r0
   20c6e:	2800      	cmp	r0, #0
   20c70:	d1df      	bne.n	20c32 <net_ipv6_mld_join+0x22>
			return -ENOMEM;
   20c72:	f06f 060b 	mvn.w	r6, #11
   20c76:	e7f2      	b.n	20c5e <net_ipv6_mld_join+0x4e>
		return -EALREADY;
   20c78:	f06f 0677 	mvn.w	r6, #119	; 0x77
   20c7c:	e7ef      	b.n	20c5e <net_ipv6_mld_join+0x4e>
   20c7e:	bf00      	nop
   20c80:	f0600007 	.word	0xf0600007

00020c84 <net_ipv6_mld_leave>:
{
   20c84:	b570      	push	{r4, r5, r6, lr}
   20c86:	4604      	mov	r4, r0
   20c88:	460d      	mov	r5, r1
	if (!net_if_ipv6_maddr_rm(iface, addr)) {
   20c8a:	f7f9 ff5d 	bl	1ab48 <net_if_ipv6_maddr_rm>
   20c8e:	b198      	cbz	r0, 20cb8 <net_ipv6_mld_leave+0x34>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_INCLUDE);
   20c90:	2201      	movs	r2, #1
   20c92:	4629      	mov	r1, r5
   20c94:	4620      	mov	r0, r4
   20c96:	f7fe fb2b 	bl	1f2f0 <send_mldv2>
	if (ret < 0) {
   20c9a:	1e06      	subs	r6, r0, #0
   20c9c:	db0a      	blt.n	20cb4 <net_ipv6_mld_leave+0x30>
	net_if_mcast_monitor(iface, addr, false);
   20c9e:	2200      	movs	r2, #0
   20ca0:	4629      	mov	r1, r5
   20ca2:	4620      	mov	r0, r4
   20ca4:	f7fa f84c 	bl	1ad40 <net_if_mcast_monitor>
   20ca8:	2300      	movs	r3, #0
   20caa:	461a      	mov	r2, r3
   20cac:	4621      	mov	r1, r4
   20cae:	4804      	ldr	r0, [pc, #16]	; (20cc0 <net_ipv6_mld_leave+0x3c>)
   20cb0:	f001 fbd6 	bl	22460 <net_mgmt_event_notify_with_info>
}
   20cb4:	4630      	mov	r0, r6
   20cb6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   20cb8:	f06f 0615 	mvn.w	r6, #21
   20cbc:	e7fa      	b.n	20cb4 <net_ipv6_mld_leave+0x30>
   20cbe:	bf00      	nop
   20cc0:	f0600008 	.word	0xf0600008

00020cc4 <net_ipv6_process_pkt>:
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
		proto == IPPROTO_TCP);
}

enum net_verdict net_ipv6_process_pkt(struct net_pkt *pkt)
{
   20cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20cc8:	b089      	sub	sp, #36	; 0x24
	return pkt->frags->data;
   20cca:	6884      	ldr	r4, [r0, #8]
   20ccc:	68a7      	ldr	r7, [r4, #8]
	size_t bytes = 0;
   20cce:	2300      	movs	r3, #0
   20cd0:	e002      	b.n	20cd8 <net_ipv6_process_pkt+0x14>
		bytes += buf->len;
   20cd2:	89a2      	ldrh	r2, [r4, #12]
   20cd4:	4413      	add	r3, r2
		buf = buf->frags;
   20cd6:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   20cd8:	2c00      	cmp	r4, #0
   20cda:	d1fa      	bne.n	20cd2 <net_ipv6_process_pkt+0xe>
	struct net_ipv6_hdr *hdr = NET_IPV6_HDR(pkt);
	int real_len = net_pkt_get_len(pkt);
   20cdc:	461e      	mov	r6, r3
	int pkt_len = (hdr->len[0] << 8) + hdr->len[1] + sizeof(*hdr);
   20cde:	7939      	ldrb	r1, [r7, #4]
   20ce0:	797a      	ldrb	r2, [r7, #5]
   20ce2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   20ce6:	3228      	adds	r2, #40	; 0x28
	u8_t next, next_hdr, length;
	u8_t first_option;
	u16_t offset, total_len = 0;
	u8_t ext_bitmap;

	if (real_len != pkt_len) {
   20ce8:	4293      	cmp	r3, r2
   20cea:	d007      	beq.n	20cfc <net_ipv6_process_pkt+0x38>
	net_stats.ipv6.drop++;
   20cec:	4abd      	ldr	r2, [pc, #756]	; (20fe4 <net_ipv6_process_pkt+0x320>)
   20cee:	6b13      	ldr	r3, [r2, #48]	; 0x30
   20cf0:	3301      	adds	r3, #1
   20cf2:	6313      	str	r3, [r2, #48]	; 0x30
		return NET_DROP;
#endif
	}

drop:
	return NET_DROP;
   20cf4:	2002      	movs	r0, #2

	NET_DBG("Unknown next header type");
	net_stats_update_ip_errors_protoerr();

	return NET_DROP;
}
   20cf6:	b009      	add	sp, #36	; 0x24
   20cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return addr->s6_addr[0] == 0xFF;
   20cfc:	7a3b      	ldrb	r3, [r7, #8]
	if (net_is_ipv6_addr_mcast(&hdr->src)) {
   20cfe:	2bff      	cmp	r3, #255	; 0xff
   20d00:	d105      	bne.n	20d0e <net_ipv6_process_pkt+0x4a>
   20d02:	4ab8      	ldr	r2, [pc, #736]	; (20fe4 <net_ipv6_process_pkt+0x320>)
   20d04:	6b13      	ldr	r3, [r2, #48]	; 0x30
   20d06:	3301      	adds	r3, #1
   20d08:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   20d0a:	2002      	movs	r0, #2
   20d0c:	e7f3      	b.n	20cf6 <net_ipv6_process_pkt+0x32>
   20d0e:	4605      	mov	r5, r0
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   20d10:	f107 0818 	add.w	r8, r7, #24
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   20d14:	2100      	movs	r1, #0
   20d16:	4640      	mov	r0, r8
   20d18:	f7f9 fd7c 	bl	1a814 <net_if_ipv6_addr_lookup>
   20d1c:	2800      	cmp	r0, #0
   20d1e:	d06f      	beq.n	20e00 <net_ipv6_process_pkt+0x13c>
	net_pkt_set_next_hdr(pkt, &hdr->nexthdr);
   20d20:	1dbb      	adds	r3, r7, #6
	pkt->next_hdr = hdr;
   20d22:	61eb      	str	r3, [r5, #28]
	pkt->ipv6_ext_len = len;
   20d24:	2300      	movs	r3, #0
   20d26:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	pkt->ip_hdr_len = len;
   20d2a:	2328      	movs	r3, #40	; 0x28
   20d2c:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	next = *(net_pkt_next_hdr(pkt));
   20d30:	f897 9006 	ldrb.w	r9, [r7, #6]
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   20d34:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   20d38:	f000 80b0 	beq.w	20e9c <net_ipv6_process_pkt+0x1d8>
   20d3c:	f1b9 0f11 	cmp.w	r9, #17
   20d40:	f000 80ae 	beq.w	20ea0 <net_ipv6_process_pkt+0x1dc>
   20d44:	f1b9 0f06 	cmp.w	r9, #6
   20d48:	f000 80a6 	beq.w	20e98 <net_ipv6_process_pkt+0x1d4>
   20d4c:	2300      	movs	r3, #0
	if (is_upper_layer_protocol_header(next)) {
   20d4e:	2b00      	cmp	r3, #0
   20d50:	f040 8166 	bne.w	21020 <net_ipv6_process_pkt+0x35c>
	frag = pkt->frags;
   20d54:	f8d5 a008 	ldr.w	sl, [r5, #8]
	offset = sizeof(struct net_ipv6_hdr);
   20d58:	2328      	movs	r3, #40	; 0x28
   20d5a:	f8ad 301c 	strh.w	r3, [sp, #28]
	next = hdr->nexthdr;
   20d5e:	464f      	mov	r7, r9
	ext_bitmap = 0;
   20d60:	2300      	movs	r3, #0
   20d62:	9303      	str	r3, [sp, #12]
	u16_t offset, total_len = 0;
   20d64:	9302      	str	r3, [sp, #8]
   20d66:	46a3      	mov	fp, r4
   20d68:	4654      	mov	r4, sl
	while (frag) {
   20d6a:	2c00      	cmp	r4, #0
   20d6c:	f000 8156 	beq.w	2101c <net_ipv6_process_pkt+0x358>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   20d70:	2f3a      	cmp	r7, #58	; 0x3a
   20d72:	f000 8099 	beq.w	20ea8 <net_ipv6_process_pkt+0x1e4>
   20d76:	2f11      	cmp	r7, #17
   20d78:	f000 8098 	beq.w	20eac <net_ipv6_process_pkt+0x1e8>
   20d7c:	2f06      	cmp	r7, #6
   20d7e:	f000 8091 	beq.w	20ea4 <net_ipv6_process_pkt+0x1e0>
   20d82:	2300      	movs	r3, #0
		if (is_upper_layer_protocol_header(next)) {
   20d84:	2b00      	cmp	r3, #0
   20d86:	f040 8093 	bne.w	20eb0 <net_ipv6_process_pkt+0x1ec>
		start_of_ext = offset;
   20d8a:	f10d 0820 	add.w	r8, sp, #32
   20d8e:	f838 1d04 	ldrh.w	r1, [r8, #-4]!
	return net_frag_read(frag, offset, pos, 1, value);
   20d92:	f10d 031f 	add.w	r3, sp, #31
   20d96:	9300      	str	r3, [sp, #0]
   20d98:	2301      	movs	r3, #1
   20d9a:	4642      	mov	r2, r8
   20d9c:	4620      	mov	r0, r4
   20d9e:	f7fc f86a 	bl	1ce76 <net_frag_read>
		frag = net_frag_read_u8(frag, offset, &offset, &length);
   20da2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   20da6:	f10d 031e 	add.w	r3, sp, #30
   20daa:	9300      	str	r3, [sp, #0]
   20dac:	2301      	movs	r3, #1
   20dae:	4642      	mov	r2, r8
   20db0:	f7fc f861 	bl	1ce76 <net_frag_read>
		if (!frag && offset == 0xffff) {
   20db4:	4604      	mov	r4, r0
   20db6:	2800      	cmp	r0, #0
   20db8:	f000 8081 	beq.w	20ebe <net_ipv6_process_pkt+0x1fa>
		length = length * 8 + 8;
   20dbc:	f89d 801e 	ldrb.w	r8, [sp, #30]
   20dc0:	f108 0801 	add.w	r8, r8, #1
   20dc4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   20dc8:	fa5f f888 	uxtb.w	r8, r8
   20dcc:	f88d 801e 	strb.w	r8, [sp, #30]
		total_len += length;
   20dd0:	fa1f f888 	uxth.w	r8, r8
   20dd4:	9b02      	ldr	r3, [sp, #8]
   20dd6:	4443      	add	r3, r8
   20dd8:	b29b      	uxth	r3, r3
   20dda:	9302      	str	r3, [sp, #8]
		switch (next) {
   20ddc:	2f00      	cmp	r7, #0
   20dde:	d077      	beq.n	20ed0 <net_ipv6_process_pkt+0x20c>
   20de0:	2f3b      	cmp	r7, #59	; 0x3b
   20de2:	d073      	beq.n	20ecc <net_ipv6_process_pkt+0x208>
			      offset - 1);
   20de4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   20de8:	3b01      	subs	r3, #1
   20dea:	2201      	movs	r2, #1
   20dec:	2104      	movs	r1, #4
   20dee:	4628      	mov	r0, r5
   20df0:	f7fd fa88 	bl	1e304 <net_icmpv6_send_error>
	net_stats.ip_errors.protoerr++;
   20df4:	4a7b      	ldr	r2, [pc, #492]	; (20fe4 <net_ipv6_process_pkt+0x320>)
   20df6:	6a13      	ldr	r3, [r2, #32]
   20df8:	3301      	adds	r3, #1
   20dfa:	6213      	str	r3, [r2, #32]
	return NET_DROP;
   20dfc:	2002      	movs	r0, #2
   20dfe:	e77a      	b.n	20cf6 <net_ipv6_process_pkt+0x32>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   20e00:	2100      	movs	r1, #0
   20e02:	4640      	mov	r0, r8
   20e04:	f7f9 ff50 	bl	1aca8 <net_if_ipv6_maddr_lookup>
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   20e08:	2800      	cmp	r0, #0
   20e0a:	d189      	bne.n	20d20 <net_ipv6_process_pkt+0x5c>
	return addr->s6_addr[0] == 0xFF;
   20e0c:	7e3b      	ldrb	r3, [r7, #24]
	    !net_is_my_ipv6_maddr(&hdr->dst) &&
   20e0e:	2bff      	cmp	r3, #255	; 0xff
   20e10:	d086      	beq.n	20d20 <net_ipv6_process_pkt+0x5c>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20e12:	f8d8 3000 	ldr.w	r3, [r8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20e16:	bb8b      	cbnz	r3, 20e7c <net_ipv6_process_pkt+0x1b8>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20e18:	f8d8 3004 	ldr.w	r3, [r8, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20e1c:	bb83      	cbnz	r3, 20e80 <net_ipv6_process_pkt+0x1bc>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20e1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20e22:	bb7b      	cbnz	r3, 20e84 <net_ipv6_process_pkt+0x1c0>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   20e24:	f8d8 200c 	ldr.w	r2, [r8, #12]
   20e28:	0a13      	lsrs	r3, r2, #8
   20e2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   20e2e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   20e32:	0211      	lsls	r1, r2, #8
   20e34:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   20e38:	430b      	orrs	r3, r1
   20e3a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20e3e:	2b01      	cmp	r3, #1
   20e40:	d022      	beq.n	20e88 <net_ipv6_process_pkt+0x1c4>
   20e42:	2300      	movs	r3, #0
	    !net_is_ipv6_addr_mcast(&hdr->dst) &&
   20e44:	2b00      	cmp	r3, #0
   20e46:	f47f af6b 	bne.w	20d20 <net_ipv6_process_pkt+0x5c>
		if (net_route_get_info(net_pkt_iface(pkt), &hdr->dst, &route,
   20e4a:	ab06      	add	r3, sp, #24
   20e4c:	aa05      	add	r2, sp, #20
   20e4e:	4641      	mov	r1, r8
   20e50:	6968      	ldr	r0, [r5, #20]
   20e52:	f001 f9f5 	bl	22240 <net_route_get_info>
   20e56:	b1c8      	cbz	r0, 20e8c <net_ipv6_process_pkt+0x1c8>
			if (route) {
   20e58:	9b05      	ldr	r3, [sp, #20]
   20e5a:	b13b      	cbz	r3, 20e6c <net_ipv6_process_pkt+0x1a8>
				net_pkt_set_iface(pkt, route->iface);
   20e5c:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   20e5e:	616b      	str	r3, [r5, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20e60:	7d5a      	ldrb	r2, [r3, #21]
   20e62:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20e66:	7d5b      	ldrb	r3, [r3, #21]
   20e68:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
			ret = net_route_packet(pkt, nexthop);
   20e6c:	9906      	ldr	r1, [sp, #24]
   20e6e:	4628      	mov	r0, r5
   20e70:	f001 fa0c 	bl	2228c <net_route_packet>
			if (ret < 0) {
   20e74:	2800      	cmp	r0, #0
   20e76:	db09      	blt.n	20e8c <net_ipv6_process_pkt+0x1c8>
				return NET_OK;
   20e78:	2000      	movs	r0, #0
   20e7a:	e73c      	b.n	20cf6 <net_ipv6_process_pkt+0x32>
   20e7c:	2300      	movs	r3, #0
   20e7e:	e7e1      	b.n	20e44 <net_ipv6_process_pkt+0x180>
   20e80:	2300      	movs	r3, #0
   20e82:	e7df      	b.n	20e44 <net_ipv6_process_pkt+0x180>
   20e84:	2300      	movs	r3, #0
   20e86:	e7dd      	b.n	20e44 <net_ipv6_process_pkt+0x180>
   20e88:	2301      	movs	r3, #1
   20e8a:	e7db      	b.n	20e44 <net_ipv6_process_pkt+0x180>
	net_stats.ipv6.drop++;
   20e8c:	4a55      	ldr	r2, [pc, #340]	; (20fe4 <net_ipv6_process_pkt+0x320>)
   20e8e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   20e90:	3301      	adds	r3, #1
   20e92:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   20e94:	2002      	movs	r0, #2
   20e96:	e72e      	b.n	20cf6 <net_ipv6_process_pkt+0x32>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   20e98:	2301      	movs	r3, #1
   20e9a:	e758      	b.n	20d4e <net_ipv6_process_pkt+0x8a>
   20e9c:	2301      	movs	r3, #1
   20e9e:	e756      	b.n	20d4e <net_ipv6_process_pkt+0x8a>
   20ea0:	2301      	movs	r3, #1
   20ea2:	e754      	b.n	20d4e <net_ipv6_process_pkt+0x8a>
   20ea4:	2301      	movs	r3, #1
   20ea6:	e76d      	b.n	20d84 <net_ipv6_process_pkt+0xc0>
   20ea8:	2301      	movs	r3, #1
   20eaa:	e76b      	b.n	20d84 <net_ipv6_process_pkt+0xc0>
   20eac:	2301      	movs	r3, #1
   20eae:	e769      	b.n	20d84 <net_ipv6_process_pkt+0xc0>
			net_pkt_set_ipv6_ext_len(pkt, offset -
   20eb0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   20eb4:	3b28      	subs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   20eb6:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
   20eba:	46b9      	mov	r9, r7
   20ebc:	e0b2      	b.n	21024 <net_ipv6_process_pkt+0x360>
		if (!frag && offset == 0xffff) {
   20ebe:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   20ec2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20ec6:	429a      	cmp	r2, r3
   20ec8:	f47f af78 	bne.w	20dbc <net_ipv6_process_pkt+0xf8>
	return NET_DROP;
   20ecc:	2002      	movs	r0, #2
   20ece:	e712      	b.n	20cf6 <net_ipv6_process_pkt+0x32>
			if (first_option != NET_IPV6_NEXTHDR_HBHO) {
   20ed0:	f1b9 0f00 	cmp.w	r9, #0
   20ed4:	d186      	bne.n	20de4 <net_ipv6_process_pkt+0x120>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   20ed6:	9a03      	ldr	r2, [sp, #12]
   20ed8:	f012 0f01 	tst.w	r2, #1
   20edc:	d182      	bne.n	20de4 <net_ipv6_process_pkt+0x120>
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   20ede:	f042 0301 	orr.w	r3, r2, #1
   20ee2:	9303      	str	r3, [sp, #12]
			frag = handle_ext_hdr_options(pkt, frag, real_len,
   20ee4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
	if (len > total_len) {
   20ee8:	4546      	cmp	r6, r8
   20eea:	f2c0 8094 	blt.w	21016 <net_ipv6_process_pkt+0x352>
	return net_frag_read(frag, offset, pos, 1, value);
   20eee:	f10d 0313 	add.w	r3, sp, #19
   20ef2:	9300      	str	r3, [sp, #0]
   20ef4:	2301      	movs	r3, #1
   20ef6:	aa06      	add	r2, sp, #24
   20ef8:	4620      	mov	r0, r4
   20efa:	f7fb ffbc 	bl	1ce76 <net_frag_read>
	frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   20efe:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   20f02:	ab05      	add	r3, sp, #20
   20f04:	9300      	str	r3, [sp, #0]
   20f06:	2301      	movs	r3, #1
   20f08:	aa06      	add	r2, sp, #24
   20f0a:	f7fb ffb4 	bl	1ce76 <net_frag_read>
	if (!frag && loc == 0xffff) {
   20f0e:	4604      	mov	r4, r0
   20f10:	b108      	cbz	r0, 20f16 <net_ipv6_process_pkt+0x252>
   20f12:	2702      	movs	r7, #2
   20f14:	e027      	b.n	20f66 <net_ipv6_process_pkt+0x2a2>
   20f16:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   20f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20f1e:	429a      	cmp	r2, r3
   20f20:	d068      	beq.n	20ff4 <net_ipv6_process_pkt+0x330>
   20f22:	2702      	movs	r7, #2
   20f24:	e01f      	b.n	20f66 <net_ipv6_process_pkt+0x2a2>
			length++;
   20f26:	3701      	adds	r7, #1
   20f28:	b2bf      	uxth	r7, r7
			loc--;
   20f2a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   20f2e:	3b01      	subs	r3, #1
   20f30:	f8ad 3018 	strh.w	r3, [sp, #24]
		if (length >= len) {
   20f34:	45b8      	cmp	r8, r7
   20f36:	d960      	bls.n	20ffa <net_ipv6_process_pkt+0x336>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_type);
   20f38:	f10d 0a20 	add.w	sl, sp, #32
   20f3c:	f83a 1d08 	ldrh.w	r1, [sl, #-8]!
   20f40:	f10d 0313 	add.w	r3, sp, #19
   20f44:	9300      	str	r3, [sp, #0]
   20f46:	2301      	movs	r3, #1
   20f48:	4652      	mov	r2, sl
   20f4a:	4620      	mov	r0, r4
   20f4c:	f7fb ff93 	bl	1ce76 <net_frag_read>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   20f50:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   20f54:	ab05      	add	r3, sp, #20
   20f56:	9300      	str	r3, [sp, #0]
   20f58:	2301      	movs	r3, #1
   20f5a:	4652      	mov	r2, sl
   20f5c:	f7fb ff8b 	bl	1ce76 <net_frag_read>
		if (!frag && loc == 0xffff) {
   20f60:	4604      	mov	r4, r0
   20f62:	2800      	cmp	r0, #0
   20f64:	d040      	beq.n	20fe8 <net_ipv6_process_pkt+0x324>
	while (frag && (length < len)) {
   20f66:	2c00      	cmp	r4, #0
   20f68:	d047      	beq.n	20ffa <net_ipv6_process_pkt+0x336>
   20f6a:	45b8      	cmp	r8, r7
   20f6c:	d945      	bls.n	20ffa <net_ipv6_process_pkt+0x336>
		switch (opt_type) {
   20f6e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   20f72:	2b00      	cmp	r3, #0
   20f74:	d0d7      	beq.n	20f26 <net_ipv6_process_pkt+0x262>
   20f76:	2b01      	cmp	r3, #1
   20f78:	d009      	beq.n	20f8e <net_ipv6_process_pkt+0x2ca>
	switch (opt_type & 0xc0) {
   20f7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   20f7e:	2b80      	cmp	r3, #128	; 0x80
   20f80:	d019      	beq.n	20fb6 <net_ipv6_process_pkt+0x2f2>
   20f82:	2bc0      	cmp	r3, #192	; 0xc0
   20f84:	d012      	beq.n	20fac <net_ipv6_process_pkt+0x2e8>
   20f86:	2b40      	cmp	r3, #64	; 0x40
   20f88:	d00e      	beq.n	20fa8 <net_ipv6_process_pkt+0x2e4>
	return pkt;
   20f8a:	462b      	mov	r3, r5
   20f8c:	e01a      	b.n	20fc4 <net_ipv6_process_pkt+0x300>
			length += opt_len + 2;
   20f8e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20f92:	441f      	add	r7, r3
   20f94:	b2bf      	uxth	r7, r7
   20f96:	3702      	adds	r7, #2
   20f98:	b2bf      	uxth	r7, r7
			loc += opt_len + 2;
   20f9a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   20f9e:	4413      	add	r3, r2
   20fa0:	3302      	adds	r3, #2
   20fa2:	f8ad 3018 	strh.w	r3, [sp, #24]
   20fa6:	e7c5      	b.n	20f34 <net_ipv6_process_pkt+0x270>
		return NULL;
   20fa8:	2300      	movs	r3, #0
   20faa:	e00b      	b.n	20fc4 <net_ipv6_process_pkt+0x300>
	return pkt->frags->data;
   20fac:	68ab      	ldr	r3, [r5, #8]
   20fae:	689b      	ldr	r3, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   20fb0:	7e1b      	ldrb	r3, [r3, #24]
		if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   20fb2:	2bff      	cmp	r3, #255	; 0xff
   20fb4:	d013      	beq.n	20fde <net_ipv6_process_pkt+0x31a>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   20fb6:	463b      	mov	r3, r7
   20fb8:	2202      	movs	r2, #2
   20fba:	2104      	movs	r1, #4
   20fbc:	4628      	mov	r0, r5
   20fbe:	f7fd f9a1 	bl	1e304 <net_icmpv6_send_error>
		return NULL;
   20fc2:	2300      	movs	r3, #0
			if (!check_unknown_option(pkt, opt_type, length)) {
   20fc4:	b1b3      	cbz	r3, 20ff4 <net_ipv6_process_pkt+0x330>
			length += opt_len + 2;
   20fc6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20fca:	441f      	add	r7, r3
   20fcc:	b2bf      	uxth	r7, r7
   20fce:	3702      	adds	r7, #2
   20fd0:	b2bf      	uxth	r7, r7
			loc += opt_len;
   20fd2:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   20fd6:	4413      	add	r3, r2
   20fd8:	f8ad 3018 	strh.w	r3, [sp, #24]
   20fdc:	e7aa      	b.n	20f34 <net_ipv6_process_pkt+0x270>
			return NULL;
   20fde:	2300      	movs	r3, #0
   20fe0:	e7f0      	b.n	20fc4 <net_ipv6_process_pkt+0x300>
   20fe2:	bf00      	nop
   20fe4:	20002950 	.word	0x20002950
		if (!frag && loc == 0xffff) {
   20fe8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   20fec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20ff0:	429a      	cmp	r2, r3
   20ff2:	d1b8      	bne.n	20f66 <net_ipv6_process_pkt+0x2a2>
	return NULL;
   20ff4:	465c      	mov	r4, fp
	*verdict = NET_DROP;
   20ff6:	2302      	movs	r3, #2
   20ff8:	e007      	b.n	2100a <net_ipv6_process_pkt+0x346>
	if (length != len) {
   20ffa:	45b8      	cmp	r8, r7
   20ffc:	d1fa      	bne.n	20ff4 <net_ipv6_process_pkt+0x330>
	*pos += length;
   20ffe:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   21002:	441f      	add	r7, r3
   21004:	f8ad 701c 	strh.w	r7, [sp, #28]
	*verdict = NET_CONTINUE;
   21008:	2301      	movs	r3, #1
		if (verdict == NET_DROP) {
   2100a:	2b02      	cmp	r3, #2
   2100c:	f43f af5e 	beq.w	20ecc <net_ipv6_process_pkt+0x208>
		next = next_hdr;
   21010:	f89d 701f 	ldrb.w	r7, [sp, #31]
   21014:	e6a9      	b.n	20d6a <net_ipv6_process_pkt+0xa6>
		return NULL;
   21016:	465c      	mov	r4, fp
		*verdict = NET_DROP;
   21018:	2302      	movs	r3, #2
   2101a:	e7f6      	b.n	2100a <net_ipv6_process_pkt+0x346>
   2101c:	46b9      	mov	r9, r7
   2101e:	e001      	b.n	21024 <net_ipv6_process_pkt+0x360>
	u16_t offset, total_len = 0;
   21020:	2300      	movs	r3, #0
   21022:	9302      	str	r3, [sp, #8]
	if (total_len > 0) {
   21024:	9b02      	ldr	r3, [sp, #8]
   21026:	b10b      	cbz	r3, 2102c <net_ipv6_process_pkt+0x368>
	pkt->ipv6_ext_len = len;
   21028:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	switch (next) {
   2102c:	f1b9 0f11 	cmp.w	r9, #17
   21030:	d011      	beq.n	21056 <net_ipv6_process_pkt+0x392>
   21032:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   21036:	d004      	beq.n	21042 <net_ipv6_process_pkt+0x37e>
   21038:	f1b9 0f06 	cmp.w	r9, #6
   2103c:	d010      	beq.n	21060 <net_ipv6_process_pkt+0x39c>
	return NET_DROP;
   2103e:	2002      	movs	r0, #2
   21040:	e659      	b.n	20cf6 <net_ipv6_process_pkt+0x32>
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   21042:	a906      	add	r1, sp, #24
   21044:	4628      	mov	r0, r5
   21046:	f7fc fe9c 	bl	1dd82 <net_icmpv6_get_hdr>
	return net_icmpv6_input(pkt, icmp_hdr->type, icmp_hdr->code);
   2104a:	7842      	ldrb	r2, [r0, #1]
   2104c:	7801      	ldrb	r1, [r0, #0]
   2104e:	4628      	mov	r0, r5
   21050:	f7fd fb62 	bl	1e718 <net_icmpv6_input>
		return process_icmpv6_pkt(pkt, hdr);
   21054:	e64f      	b.n	20cf6 <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_UDP, pkt);
   21056:	4629      	mov	r1, r5
   21058:	2011      	movs	r0, #17
   2105a:	f003 fbd3 	bl	24804 <net_conn_input>
   2105e:	e64a      	b.n	20cf6 <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_TCP, pkt);
   21060:	4629      	mov	r1, r5
   21062:	2006      	movs	r0, #6
   21064:	f003 fbce 	bl	24804 <net_conn_input>
   21068:	e645      	b.n	20cf6 <net_ipv6_process_pkt+0x32>
   2106a:	bf00      	nop

0002106c <net_ipv6_init>:

void net_ipv6_init(void)
{
   2106c:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   2106e:	4806      	ldr	r0, [pc, #24]	; (21088 <net_ipv6_init+0x1c>)
   21070:	f7fc fe0a 	bl	1dc88 <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   21074:	4805      	ldr	r0, [pc, #20]	; (2108c <net_ipv6_init+0x20>)
   21076:	f7fc fe07 	bl	1dc88 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   2107a:	4805      	ldr	r0, [pc, #20]	; (21090 <net_ipv6_init+0x24>)
   2107c:	f7fc fe04 	bl	1dc88 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_MLD)
	net_icmpv6_register_handler(&mld_query_input_handler);
   21080:	4804      	ldr	r0, [pc, #16]	; (21094 <net_ipv6_init+0x28>)
   21082:	f7fc fe01 	bl	1dc88 <net_icmpv6_register_handler>
   21086:	bd08      	pop	{r3, pc}
   21088:	2000c150 	.word	0x2000c150
   2108c:	2000bd38 	.word	0x2000bd38
   21090:	2000c15c 	.word	0x2000c15c
   21094:	2000bd2c 	.word	0x2000bd2c

00021098 <uncompress_IPHC_header>:
	}
}
#endif

static inline bool uncompress_IPHC_header(struct net_pkt *pkt)
{
   21098:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(CONFIG_NET_6LO_CONTEXT)
	struct net_6lo_context *src = NULL;
	struct net_6lo_context *dst = NULL;
#endif

	if (CIPHC[1] & NET_6LO_IPHC_CID_1) {
   2109c:	6883      	ldr	r3, [r0, #8]
   2109e:	689b      	ldr	r3, [r3, #8]
   210a0:	f993 3001 	ldrsb.w	r3, [r3, #1]
   210a4:	2b00      	cmp	r3, #0
   210a6:	f2c0 831e 	blt.w	216e6 <uncompress_IPHC_header+0x64e>
   210aa:	4604      	mov	r4, r0
		NET_WARN("Context based uncompression not enabled");
		return false;
#endif
	}

	frag = net_pkt_get_frag(pkt, NET_6LO_RX_PKT_TIMEOUT);
   210ac:	2164      	movs	r1, #100	; 0x64
   210ae:	f7fb fd11 	bl	1cad4 <net_pkt_get_frag>
	if (!frag) {
   210b2:	4607      	mov	r7, r0
   210b4:	2800      	cmp	r0, #0
   210b6:	f000 8319 	beq.w	216ec <uncompress_IPHC_header+0x654>
		return false;
	}

	ipv6 = (struct net_ipv6_hdr *)(frag->data);
   210ba:	6886      	ldr	r6, [r0, #8]

	/* Version is always 6 */
	ipv6->vtc = 0x60;
   210bc:	2360      	movs	r3, #96	; 0x60
   210be:	7033      	strb	r3, [r6, #0]
	pkt->ip_hdr_len = len;
   210c0:	2328      	movs	r3, #40	; 0x28
   210c2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   210c6:	68a3      	ldr	r3, [r4, #8]
   210c8:	689a      	ldr	r2, [r3, #8]
   210ca:	7813      	ldrb	r3, [r2, #0]
   210cc:	f003 0318 	and.w	r3, r3, #24
   210d0:	2b18      	cmp	r3, #24
   210d2:	d863      	bhi.n	2119c <uncompress_IPHC_header+0x104>
   210d4:	e8df f003 	tbb	[pc, r3]
   210d8:	6262620d 	.word	0x6262620d
   210dc:	62626262 	.word	0x62626262
   210e0:	6262623c 	.word	0x6262623c
   210e4:	62626262 	.word	0x62626262
   210e8:	6262624c 	.word	0x6262624c
   210ec:	62626262 	.word	0x62626262
   210f0:	5c          	.byte	0x5c
   210f1:	00          	.byte	0x00
		tcl = CIPHC[offset++];
   210f2:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   210f4:	0993      	lsrs	r3, r2, #6
   210f6:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   210fa:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   210fc:	7832      	ldrb	r2, [r6, #0]
   210fe:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   21102:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   21104:	68a2      	ldr	r2, [r4, #8]
   21106:	6892      	ldr	r2, [r2, #8]
   21108:	f992 2003 	ldrsb.w	r2, [r2, #3]
   2110c:	f002 020f 	and.w	r2, r2, #15
   21110:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
   21114:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   21116:	68a3      	ldr	r3, [r4, #8]
   21118:	6899      	ldr	r1, [r3, #8]
   2111a:	2202      	movs	r2, #2
   2111c:	3104      	adds	r1, #4
   2111e:	18b0      	adds	r0, r6, r2
   21120:	f7df f8ce 	bl	2c0 <memcpy>
		offset += 2;
   21124:	2506      	movs	r5, #6
	net_pkt_set_ip_hdr_len(pkt, NET_IPV6H_LEN);

	/* Uncompress Traffic class and Flow label */
	offset = uncompress_tfl(pkt, ipv6, offset);

	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   21126:	68a3      	ldr	r3, [r4, #8]
   21128:	689b      	ldr	r3, [r3, #8]
   2112a:	781a      	ldrb	r2, [r3, #0]
   2112c:	f012 0f04 	tst.w	r2, #4
   21130:	d103      	bne.n	2113a <uncompress_IPHC_header+0xa2>
		ipv6->nexthdr = CIPHC[offset];
   21132:	5d5b      	ldrb	r3, [r3, r5]
   21134:	71b3      	strb	r3, [r6, #6]
		offset++;
   21136:	3501      	adds	r5, #1
   21138:	b2ed      	uxtb	r5, r5
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   2113a:	68a3      	ldr	r3, [r4, #8]
   2113c:	689a      	ldr	r2, [r3, #8]
   2113e:	7813      	ldrb	r3, [r2, #0]
   21140:	f003 0303 	and.w	r3, r3, #3
   21144:	2b03      	cmp	r3, #3
   21146:	d82f      	bhi.n	211a8 <uncompress_IPHC_header+0x110>
   21148:	e8df f003 	tbb	[pc, r3]
   2114c:	4f4c492a 	.word	0x4f4c492a
		tcl = ((CIPHC[offset] & 0xF0) >> 6);
   21150:	7893      	ldrb	r3, [r2, #2]
   21152:	099a      	lsrs	r2, r3, #6
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   21154:	f003 030f 	and.w	r3, r3, #15
   21158:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   2115c:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   2115e:	68a3      	ldr	r3, [r4, #8]
   21160:	6899      	ldr	r1, [r3, #8]
   21162:	2202      	movs	r2, #2
   21164:	3103      	adds	r1, #3
   21166:	18b0      	adds	r0, r6, r2
   21168:	f7df f8aa 	bl	2c0 <memcpy>
		offset += 2;
   2116c:	2505      	movs	r5, #5
   2116e:	e7da      	b.n	21126 <uncompress_IPHC_header+0x8e>
		tcl = CIPHC[offset];
   21170:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   21172:	0993      	lsrs	r3, r2, #6
   21174:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   21178:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   2117a:	7832      	ldrb	r2, [r6, #0]
   2117c:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   21180:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = (tcl & 0x0F) << 4;
   21182:	011b      	lsls	r3, r3, #4
   21184:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   21186:	2300      	movs	r3, #0
   21188:	70b3      	strb	r3, [r6, #2]
   2118a:	70f3      	strb	r3, [r6, #3]
		offset++;
   2118c:	2503      	movs	r5, #3
   2118e:	e7ca      	b.n	21126 <uncompress_IPHC_header+0x8e>
		ipv6->tcflow = 0;
   21190:	2300      	movs	r3, #0
   21192:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   21194:	70b3      	strb	r3, [r6, #2]
   21196:	70f3      	strb	r3, [r6, #3]
   21198:	2502      	movs	r5, #2
   2119a:	e7c4      	b.n	21126 <uncompress_IPHC_header+0x8e>
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   2119c:	2502      	movs	r5, #2
   2119e:	e7c2      	b.n	21126 <uncompress_IPHC_header+0x8e>
		ipv6->hop_limit = CIPHC[offset++];
   211a0:	1c6b      	adds	r3, r5, #1
   211a2:	5d52      	ldrb	r2, [r2, r5]
   211a4:	71f2      	strb	r2, [r6, #7]
   211a6:	b2dd      	uxtb	r5, r3

	/* Uncompress Hoplimit */
	offset = uncompress_hoplimit(pkt, ipv6, offset);

	/* First set to zero and copy relevant bits */
	memset(&ipv6->src.s6_addr[0], 0, 16);
   211a8:	2210      	movs	r2, #16
   211aa:	2100      	movs	r1, #0
   211ac:	f106 0008 	add.w	r0, r6, #8
   211b0:	f008 fa92 	bl	296d8 <memset>
	memset(&ipv6->dst.s6_addr[0], 0, 16);
   211b4:	2210      	movs	r2, #16
   211b6:	2100      	movs	r1, #0
   211b8:	f106 0018 	add.w	r0, r6, #24
   211bc:	f008 fa8c 	bl	296d8 <memset>

	/* Uncompress Source Address */
	if (CIPHC[1] & NET_6LO_IPHC_SAC_1) {
   211c0:	68a3      	ldr	r3, [r4, #8]
   211c2:	689b      	ldr	r3, [r3, #8]
   211c4:	785b      	ldrb	r3, [r3, #1]
   211c6:	f013 0f40 	tst.w	r3, #64	; 0x40
   211ca:	d011      	beq.n	211f0 <uncompress_IPHC_header+0x158>
		NET_DBG("SAC_1");

		if ((CIPHC[1] & NET_6LO_IPHC_SAM_11) == NET_6LO_IPHC_SAM_00) {
   211cc:	f013 0f30 	tst.w	r3, #48	; 0x30
   211d0:	d05e      	beq.n	21290 <uncompress_IPHC_header+0x1f8>
	}

	return true;

fail:
	net_pkt_frag_unref(frag);
   211d2:	4638      	mov	r0, r7
   211d4:	f7fb fccb 	bl	1cb6e <net_pkt_frag_unref>
	return false;
   211d8:	2000      	movs	r0, #0
   211da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ipv6->hop_limit = 1;
   211de:	2301      	movs	r3, #1
   211e0:	71f3      	strb	r3, [r6, #7]
   211e2:	e7e1      	b.n	211a8 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 64;
   211e4:	2340      	movs	r3, #64	; 0x40
   211e6:	71f3      	strb	r3, [r6, #7]
   211e8:	e7de      	b.n	211a8 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 255;
   211ea:	23ff      	movs	r3, #255	; 0xff
   211ec:	71f3      	strb	r3, [r6, #7]
   211ee:	e7db      	b.n	211a8 <uncompress_IPHC_header+0x110>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   211f0:	68a3      	ldr	r3, [r4, #8]
   211f2:	6899      	ldr	r1, [r3, #8]
   211f4:	784b      	ldrb	r3, [r1, #1]
   211f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
   211fa:	2b10      	cmp	r3, #16
   211fc:	d059      	beq.n	212b2 <uncompress_IPHC_header+0x21a>
   211fe:	d93e      	bls.n	2127e <uncompress_IPHC_header+0x1e6>
   21200:	2b20      	cmp	r3, #32
   21202:	d065      	beq.n	212d0 <uncompress_IPHC_header+0x238>
   21204:	2b30      	cmp	r3, #48	; 0x30
   21206:	d143      	bne.n	21290 <uncompress_IPHC_header+0x1f8>
		net_ipv6_addr_create_iid(&ipv6->src, net_pkt_ll_src(pkt));
   21208:	f106 0808 	add.w	r8, r6, #8
	return &pkt->lladdr_src;
   2120c:	f104 0920 	add.w	r9, r4, #32
	addr->s6_addr[0] = 0xfe;
   21210:	23fe      	movs	r3, #254	; 0xfe
   21212:	7233      	strb	r3, [r6, #8]
	addr->s6_addr[1] = 0x80;
   21214:	2380      	movs	r3, #128	; 0x80
   21216:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   2121a:	2300      	movs	r3, #0
   2121c:	f888 3002 	strb.w	r3, [r8, #2]
   21220:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   21224:	f888 3004 	strb.w	r3, [r8, #4]
   21228:	f888 3005 	strb.w	r3, [r8, #5]
   2122c:	f888 3006 	strb.w	r3, [r8, #6]
   21230:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   21234:	f899 2004 	ldrb.w	r2, [r9, #4]
   21238:	2a06      	cmp	r2, #6
   2123a:	d05b      	beq.n	212f4 <uncompress_IPHC_header+0x25c>
   2123c:	2a08      	cmp	r2, #8
   2123e:	f000 8082 	beq.w	21346 <uncompress_IPHC_header+0x2ae>
   21242:	2a02      	cmp	r2, #2
   21244:	d124      	bne.n	21290 <uncompress_IPHC_header+0x1f8>
		if (lladdr->type == NET_LINK_IEEE802154) {
   21246:	f899 3005 	ldrb.w	r3, [r9, #5]
   2124a:	2b01      	cmp	r3, #1
   2124c:	d120      	bne.n	21290 <uncompress_IPHC_header+0x1f8>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   2124e:	2300      	movs	r3, #0
   21250:	f888 3008 	strb.w	r3, [r8, #8]
   21254:	f888 3009 	strb.w	r3, [r8, #9]
   21258:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   2125c:	22ff      	movs	r2, #255	; 0xff
   2125e:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   21262:	22fe      	movs	r2, #254	; 0xfe
   21264:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   21268:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   2126c:	6a23      	ldr	r3, [r4, #32]
   2126e:	781b      	ldrb	r3, [r3, #0]
   21270:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   21274:	6a23      	ldr	r3, [r4, #32]
   21276:	785b      	ldrb	r3, [r3, #1]
   21278:	f888 300f 	strb.w	r3, [r8, #15]
   2127c:	e008      	b.n	21290 <uncompress_IPHC_header+0x1f8>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   2127e:	b93b      	cbnz	r3, 21290 <uncompress_IPHC_header+0x1f8>
		memcpy(ipv6->src.s6_addr, &CIPHC[offset], 16);
   21280:	2210      	movs	r2, #16
   21282:	4429      	add	r1, r5
   21284:	f106 0008 	add.w	r0, r6, #8
   21288:	f7df f81a 	bl	2c0 <memcpy>
		offset += 16;
   2128c:	3510      	adds	r5, #16
   2128e:	b2ed      	uxtb	r5, r5
	if (CIPHC[1] & NET_6LO_IPHC_M_1) {
   21290:	68a3      	ldr	r3, [r4, #8]
   21292:	6899      	ldr	r1, [r3, #8]
   21294:	784b      	ldrb	r3, [r1, #1]
   21296:	f013 0f08 	tst.w	r3, #8
   2129a:	d160      	bne.n	2135e <uncompress_IPHC_header+0x2c6>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   2129c:	f003 0303 	and.w	r3, r3, #3
   212a0:	2b03      	cmp	r3, #3
   212a2:	f200 80ad 	bhi.w	21400 <uncompress_IPHC_header+0x368>
   212a6:	e8df f013 	tbh	[pc, r3, lsl #1]
   212aa:	00a3      	.short	0x00a3
   212ac:	00e500d6 	.word	0x00e500d6
   212b0:	00f9      	.short	0x00f9
		ipv6->src.s6_addr[0] = 0xFE;
   212b2:	23fe      	movs	r3, #254	; 0xfe
   212b4:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   212b6:	2380      	movs	r3, #128	; 0x80
   212b8:	7273      	strb	r3, [r6, #9]
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   212ba:	68a3      	ldr	r3, [r4, #8]
   212bc:	6899      	ldr	r1, [r3, #8]
   212be:	2208      	movs	r2, #8
   212c0:	4429      	add	r1, r5
   212c2:	f106 0010 	add.w	r0, r6, #16
   212c6:	f7de fffb 	bl	2c0 <memcpy>
		offset += 8;
   212ca:	3508      	adds	r5, #8
   212cc:	b2ed      	uxtb	r5, r5
   212ce:	e7df      	b.n	21290 <uncompress_IPHC_header+0x1f8>
		ipv6->src.s6_addr[0] = 0xFE;
   212d0:	23fe      	movs	r3, #254	; 0xfe
   212d2:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   212d4:	2280      	movs	r2, #128	; 0x80
   212d6:	7272      	strb	r2, [r6, #9]
		ipv6->src.s6_addr[11] = 0xFF;
   212d8:	22ff      	movs	r2, #255	; 0xff
   212da:	74f2      	strb	r2, [r6, #19]
		ipv6->src.s6_addr[12] = 0xFE;
   212dc:	7533      	strb	r3, [r6, #20]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   212de:	68a3      	ldr	r3, [r4, #8]
   212e0:	6899      	ldr	r1, [r3, #8]
   212e2:	2202      	movs	r2, #2
   212e4:	4429      	add	r1, r5
   212e6:	f106 0016 	add.w	r0, r6, #22
   212ea:	f7de ffe9 	bl	2c0 <memcpy>
		offset += 2;
   212ee:	3502      	adds	r5, #2
   212f0:	b2ed      	uxtb	r5, r5
   212f2:	e7cd      	b.n	21290 <uncompress_IPHC_header+0x1f8>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   212f4:	2203      	movs	r2, #3
   212f6:	6a21      	ldr	r1, [r4, #32]
   212f8:	f108 0008 	add.w	r0, r8, #8
   212fc:	f7de ffe0 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   21300:	23ff      	movs	r3, #255	; 0xff
   21302:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   21306:	23fe      	movs	r3, #254	; 0xfe
   21308:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   2130c:	6a21      	ldr	r1, [r4, #32]
   2130e:	2203      	movs	r2, #3
   21310:	4411      	add	r1, r2
   21312:	f108 000d 	add.w	r0, r8, #13
   21316:	f7de ffd3 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   2131a:	f899 3005 	ldrb.w	r3, [r9, #5]
   2131e:	2b02      	cmp	r3, #2
   21320:	d00a      	beq.n	21338 <uncompress_IPHC_header+0x2a0>
		if (lladdr->type == NET_LINK_ETHERNET) {
   21322:	f899 3005 	ldrb.w	r3, [r9, #5]
   21326:	2b03      	cmp	r3, #3
   21328:	d1b2      	bne.n	21290 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   2132a:	f898 3008 	ldrb.w	r3, [r8, #8]
   2132e:	f083 0302 	eor.w	r3, r3, #2
   21332:	f888 3008 	strb.w	r3, [r8, #8]
   21336:	e7ab      	b.n	21290 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   21338:	f898 3008 	ldrb.w	r3, [r8, #8]
   2133c:	f083 0302 	eor.w	r3, r3, #2
   21340:	f888 3008 	strb.w	r3, [r8, #8]
   21344:	e7ed      	b.n	21322 <uncompress_IPHC_header+0x28a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   21346:	6a21      	ldr	r1, [r4, #32]
   21348:	f108 0008 	add.w	r0, r8, #8
   2134c:	f7de ffb8 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   21350:	f898 3008 	ldrb.w	r3, [r8, #8]
   21354:	f083 0302 	eor.w	r3, r3, #2
   21358:	f888 3008 	strb.w	r3, [r8, #8]
   2135c:	e798      	b.n	21290 <uncompress_IPHC_header+0x1f8>
	if (CIPHC[1] & NET_6LO_IPHC_DAC_1) {
   2135e:	784b      	ldrb	r3, [r1, #1]
   21360:	f013 0f04 	tst.w	r3, #4
   21364:	d142      	bne.n	213ec <uncompress_IPHC_header+0x354>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   21366:	f003 0303 	and.w	r3, r3, #3
   2136a:	2b03      	cmp	r3, #3
   2136c:	d848      	bhi.n	21400 <uncompress_IPHC_header+0x368>
   2136e:	e8df f003 	tbb	[pc, r3]
   21372:	0b02      	.short	0x0b02
   21374:	311e      	.short	0x311e
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   21376:	2210      	movs	r2, #16
   21378:	4429      	add	r1, r5
   2137a:	f106 0018 	add.w	r0, r6, #24
   2137e:	f7de ff9f 	bl	2c0 <memcpy>
		offset += 16;
   21382:	3510      	adds	r5, #16
   21384:	b2ed      	uxtb	r5, r5
   21386:	e03b      	b.n	21400 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   21388:	23ff      	movs	r3, #255	; 0xff
   2138a:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   2138c:	68a3      	ldr	r3, [r4, #8]
   2138e:	689b      	ldr	r3, [r3, #8]
   21390:	1c69      	adds	r1, r5, #1
   21392:	5d5b      	ldrb	r3, [r3, r5]
   21394:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[11], &CIPHC[offset], 5);
   21396:	68a3      	ldr	r3, [r4, #8]
   21398:	689b      	ldr	r3, [r3, #8]
   2139a:	2205      	movs	r2, #5
   2139c:	fa53 f181 	uxtab	r1, r3, r1
   213a0:	f106 0023 	add.w	r0, r6, #35	; 0x23
   213a4:	f7de ff8c 	bl	2c0 <memcpy>
		offset += 5;
   213a8:	3506      	adds	r5, #6
   213aa:	b2ed      	uxtb	r5, r5
   213ac:	e028      	b.n	21400 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   213ae:	23ff      	movs	r3, #255	; 0xff
   213b0:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   213b2:	68a3      	ldr	r3, [r4, #8]
   213b4:	689b      	ldr	r3, [r3, #8]
   213b6:	1c69      	adds	r1, r5, #1
   213b8:	5d5b      	ldrb	r3, [r3, r5]
   213ba:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[13], &CIPHC[offset], 3);
   213bc:	68a3      	ldr	r3, [r4, #8]
   213be:	689b      	ldr	r3, [r3, #8]
   213c0:	2203      	movs	r2, #3
   213c2:	fa53 f181 	uxtab	r1, r3, r1
   213c6:	f106 0025 	add.w	r0, r6, #37	; 0x25
   213ca:	f7de ff79 	bl	2c0 <memcpy>
		offset += 3;
   213ce:	3504      	adds	r5, #4
   213d0:	b2ed      	uxtb	r5, r5
   213d2:	e015      	b.n	21400 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   213d4:	23ff      	movs	r3, #255	; 0xff
   213d6:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x02;
   213d8:	2302      	movs	r3, #2
   213da:	7673      	strb	r3, [r6, #25]
		ipv6->dst.s6_addr[15] = CIPHC[offset++];
   213dc:	68a3      	ldr	r3, [r4, #8]
   213de:	689a      	ldr	r2, [r3, #8]
   213e0:	1c6b      	adds	r3, r5, #1
   213e2:	5d52      	ldrb	r2, [r2, r5]
   213e4:	f886 2027 	strb.w	r2, [r6, #39]	; 0x27
   213e8:	b2dd      	uxtb	r5, r3
   213ea:	e009      	b.n	21400 <uncompress_IPHC_header+0x368>
		return 0;
   213ec:	2500      	movs	r5, #0
   213ee:	e007      	b.n	21400 <uncompress_IPHC_header+0x368>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   213f0:	2210      	movs	r2, #16
   213f2:	4429      	add	r1, r5
   213f4:	f106 0018 	add.w	r0, r6, #24
   213f8:	f7de ff62 	bl	2c0 <memcpy>
		offset += 16;
   213fc:	3510      	adds	r5, #16
   213fe:	b2ed      	uxtb	r5, r5
	net_buf_add(frag, NET_IPV6H_LEN);
   21400:	f107 0a08 	add.w	sl, r7, #8
   21404:	2128      	movs	r1, #40	; 0x28
   21406:	4650      	mov	r0, sl
   21408:	f7f8 fe94 	bl	1a134 <net_buf_simple_add>
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   2140c:	68a3      	ldr	r3, [r4, #8]
   2140e:	689b      	ldr	r3, [r3, #8]
   21410:	781a      	ldrb	r2, [r3, #0]
   21412:	f012 0f04 	tst.w	r2, #4
   21416:	f000 8114 	beq.w	21642 <uncompress_IPHC_header+0x5aa>
	if ((CIPHC[offset] & 0xF0) != NET_6LO_NHC_UDP_BARE) {
   2141a:	5d5b      	ldrb	r3, [r3, r5]
   2141c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   21420:	2bf0      	cmp	r3, #240	; 0xf0
   21422:	f47f aed6 	bne.w	211d2 <uncompress_IPHC_header+0x13a>
	ipv6->nexthdr = IPPROTO_UDP;
   21426:	2311      	movs	r3, #17
   21428:	71b3      	strb	r3, [r6, #6]
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   2142a:	f8d7 b008 	ldr.w	fp, [r7, #8]
   2142e:	f10b 0928 	add.w	r9, fp, #40	; 0x28
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   21432:	68a3      	ldr	r3, [r4, #8]
   21434:	6898      	ldr	r0, [r3, #8]
   21436:	f810 8005 	ldrb.w	r8, [r0, r5]
   2143a:	f008 0808 	and.w	r8, r8, #8
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   2143e:	1c69      	adds	r1, r5, #1
   21440:	b2c9      	uxtb	r1, r1
   21442:	5d43      	ldrb	r3, [r0, r5]
   21444:	f003 0303 	and.w	r3, r3, #3
   21448:	2b03      	cmp	r3, #3
   2144a:	f200 80ed 	bhi.w	21628 <uncompress_IPHC_header+0x590>
   2144e:	e8df f003 	tbb	[pc, r3]
   21452:	ae95      	.short	0xae95
   21454:	d3c0      	.short	0xd3c0
		ipv6->dst.s6_addr[0] = 0xFE;
   21456:	23fe      	movs	r3, #254	; 0xfe
   21458:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   2145a:	2380      	movs	r3, #128	; 0x80
   2145c:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[8], &CIPHC[offset], 8);
   2145e:	68a3      	ldr	r3, [r4, #8]
   21460:	6899      	ldr	r1, [r3, #8]
   21462:	2208      	movs	r2, #8
   21464:	4429      	add	r1, r5
   21466:	f106 0020 	add.w	r0, r6, #32
   2146a:	f7de ff29 	bl	2c0 <memcpy>
		offset += 8;
   2146e:	3508      	adds	r5, #8
   21470:	b2ed      	uxtb	r5, r5
   21472:	e7c5      	b.n	21400 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFE;
   21474:	23fe      	movs	r3, #254	; 0xfe
   21476:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   21478:	2280      	movs	r2, #128	; 0x80
   2147a:	7672      	strb	r2, [r6, #25]
		ipv6->dst.s6_addr[11] = 0xFF;
   2147c:	22ff      	movs	r2, #255	; 0xff
   2147e:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
		ipv6->dst.s6_addr[12] = 0xFE;
   21482:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   21486:	68a3      	ldr	r3, [r4, #8]
   21488:	6899      	ldr	r1, [r3, #8]
   2148a:	2202      	movs	r2, #2
   2148c:	4429      	add	r1, r5
   2148e:	f106 0026 	add.w	r0, r6, #38	; 0x26
   21492:	f7de ff15 	bl	2c0 <memcpy>
		offset += 2;
   21496:	3502      	adds	r5, #2
   21498:	b2ed      	uxtb	r5, r5
   2149a:	e7b1      	b.n	21400 <uncompress_IPHC_header+0x368>
		net_ipv6_addr_create_iid(&ipv6->dst, net_pkt_ll_dst(pkt));
   2149c:	f106 0818 	add.w	r8, r6, #24
	return &pkt->lladdr_dst;
   214a0:	f104 0928 	add.w	r9, r4, #40	; 0x28
	addr->s6_addr[0] = 0xfe;
   214a4:	23fe      	movs	r3, #254	; 0xfe
   214a6:	7633      	strb	r3, [r6, #24]
	addr->s6_addr[1] = 0x80;
   214a8:	2380      	movs	r3, #128	; 0x80
   214aa:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   214ae:	2300      	movs	r3, #0
   214b0:	f888 3002 	strb.w	r3, [r8, #2]
   214b4:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   214b8:	f888 3004 	strb.w	r3, [r8, #4]
   214bc:	f888 3005 	strb.w	r3, [r8, #5]
   214c0:	f888 3006 	strb.w	r3, [r8, #6]
   214c4:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   214c8:	f899 2004 	ldrb.w	r2, [r9, #4]
   214cc:	2a06      	cmp	r2, #6
   214ce:	d01f      	beq.n	21510 <uncompress_IPHC_header+0x478>
   214d0:	2a08      	cmp	r2, #8
   214d2:	d047      	beq.n	21564 <uncompress_IPHC_header+0x4cc>
   214d4:	2a02      	cmp	r2, #2
   214d6:	d193      	bne.n	21400 <uncompress_IPHC_header+0x368>
		if (lladdr->type == NET_LINK_IEEE802154) {
   214d8:	f899 3005 	ldrb.w	r3, [r9, #5]
   214dc:	2b01      	cmp	r3, #1
   214de:	d18f      	bne.n	21400 <uncompress_IPHC_header+0x368>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   214e0:	2300      	movs	r3, #0
   214e2:	f888 3008 	strb.w	r3, [r8, #8]
   214e6:	f888 3009 	strb.w	r3, [r8, #9]
   214ea:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   214ee:	22ff      	movs	r2, #255	; 0xff
   214f0:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   214f4:	22fe      	movs	r2, #254	; 0xfe
   214f6:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   214fa:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   214fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21500:	781b      	ldrb	r3, [r3, #0]
   21502:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   21506:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21508:	785b      	ldrb	r3, [r3, #1]
   2150a:	f888 300f 	strb.w	r3, [r8, #15]
   2150e:	e777      	b.n	21400 <uncompress_IPHC_header+0x368>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   21510:	2203      	movs	r2, #3
   21512:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21514:	f108 0008 	add.w	r0, r8, #8
   21518:	f7de fed2 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   2151c:	23ff      	movs	r3, #255	; 0xff
   2151e:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   21522:	23fe      	movs	r3, #254	; 0xfe
   21524:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   21528:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2152a:	2203      	movs	r2, #3
   2152c:	4411      	add	r1, r2
   2152e:	f108 000d 	add.w	r0, r8, #13
   21532:	f7de fec5 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   21536:	f899 3005 	ldrb.w	r3, [r9, #5]
   2153a:	2b02      	cmp	r3, #2
   2153c:	d00b      	beq.n	21556 <uncompress_IPHC_header+0x4be>
		if (lladdr->type == NET_LINK_ETHERNET) {
   2153e:	f899 3005 	ldrb.w	r3, [r9, #5]
   21542:	2b03      	cmp	r3, #3
   21544:	f47f af5c 	bne.w	21400 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   21548:	f898 3008 	ldrb.w	r3, [r8, #8]
   2154c:	f083 0302 	eor.w	r3, r3, #2
   21550:	f888 3008 	strb.w	r3, [r8, #8]
   21554:	e754      	b.n	21400 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   21556:	f898 3008 	ldrb.w	r3, [r8, #8]
   2155a:	f083 0302 	eor.w	r3, r3, #2
   2155e:	f888 3008 	strb.w	r3, [r8, #8]
   21562:	e7ec      	b.n	2153e <uncompress_IPHC_header+0x4a6>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   21564:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21566:	f108 0008 	add.w	r0, r8, #8
   2156a:	f7de fea9 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   2156e:	f898 3008 	ldrb.w	r3, [r8, #8]
   21572:	f083 0302 	eor.w	r3, r3, #2
   21576:	f888 3008 	strb.w	r3, [r8, #8]
   2157a:	e741      	b.n	21400 <uncompress_IPHC_header+0x368>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   2157c:	2202      	movs	r2, #2
   2157e:	4401      	add	r1, r0
   21580:	4648      	mov	r0, r9
   21582:	f7de fe9d 	bl	2c0 <memcpy>
		offset += 2;
   21586:	1ce9      	adds	r1, r5, #3
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   21588:	68a3      	ldr	r3, [r4, #8]
   2158a:	689b      	ldr	r3, [r3, #8]
   2158c:	2202      	movs	r2, #2
   2158e:	fa53 f181 	uxtab	r1, r3, r1
   21592:	eb09 0002 	add.w	r0, r9, r2
   21596:	f7de fe93 	bl	2c0 <memcpy>
		offset += 2;
   2159a:	3505      	adds	r5, #5
   2159c:	b2ed      	uxtb	r5, r5
	if (!chksum) {
   2159e:	f1b8 0f00 	cmp.w	r8, #0
   215a2:	d043      	beq.n	2162c <uncompress_IPHC_header+0x594>
	net_buf_add(frag, NET_UDPH_LEN);
   215a4:	2108      	movs	r1, #8
   215a6:	4650      	mov	r0, sl
   215a8:	f7f8 fdc4 	bl	1a134 <net_buf_simple_add>
   215ac:	e04c      	b.n	21648 <uncompress_IPHC_header+0x5b0>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   215ae:	2202      	movs	r2, #2
   215b0:	4401      	add	r1, r0
   215b2:	4648      	mov	r0, r9
   215b4:	f7de fe84 	bl	2c0 <memcpy>
		offset += 2;
   215b8:	1ceb      	adds	r3, r5, #3
   215ba:	b2db      	uxtb	r3, r3
		udp->dst_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   215bc:	68a2      	ldr	r2, [r4, #8]
   215be:	6892      	ldr	r2, [r2, #8]
   215c0:	5cd3      	ldrb	r3, [r2, r3]
   215c2:	021b      	lsls	r3, r3, #8
   215c4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   215c8:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   215cc:	3504      	adds	r5, #4
   215ce:	b2ed      	uxtb	r5, r5
   215d0:	e7e5      	b.n	2159e <uncompress_IPHC_header+0x506>
		udp->src_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   215d2:	5c43      	ldrb	r3, [r0, r1]
   215d4:	021b      	lsls	r3, r3, #8
   215d6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   215da:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		offset++;
   215de:	1ca9      	adds	r1, r5, #2
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   215e0:	68a3      	ldr	r3, [r4, #8]
   215e2:	689b      	ldr	r3, [r3, #8]
   215e4:	2202      	movs	r2, #2
   215e6:	fa53 f181 	uxtab	r1, r3, r1
   215ea:	eb09 0002 	add.w	r0, r9, r2
   215ee:	f7de fe67 	bl	2c0 <memcpy>
		offset += 2;
   215f2:	3504      	adds	r5, #4
   215f4:	b2ed      	uxtb	r5, r5
   215f6:	e7d2      	b.n	2159e <uncompress_IPHC_header+0x506>
		udp->src_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   215f8:	5c43      	ldrb	r3, [r0, r1]
   215fa:	091b      	lsrs	r3, r3, #4
   215fc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
   21600:	021b      	lsls	r3, r3, #8
   21602:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   21606:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		udp->dst_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   2160a:	68a3      	ldr	r3, [r4, #8]
   2160c:	689b      	ldr	r3, [r3, #8]
   2160e:	5c5b      	ldrb	r3, [r3, r1]
   21610:	021b      	lsls	r3, r3, #8
   21612:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   21616:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
   2161a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   2161e:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   21622:	3502      	adds	r5, #2
   21624:	b2ed      	uxtb	r5, r5
   21626:	e7ba      	b.n	2159e <uncompress_IPHC_header+0x506>
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   21628:	460d      	mov	r5, r1
   2162a:	e7b8      	b.n	2159e <uncompress_IPHC_header+0x506>
		memcpy(&udp->chksum, &CIPHC[offset], 2);
   2162c:	68a3      	ldr	r3, [r4, #8]
   2162e:	6899      	ldr	r1, [r3, #8]
   21630:	2202      	movs	r2, #2
   21632:	4429      	add	r1, r5
   21634:	f10b 002e 	add.w	r0, fp, #46	; 0x2e
   21638:	f7de fe42 	bl	2c0 <memcpy>
		offset += 2;
   2163c:	3502      	adds	r5, #2
   2163e:	b2ed      	uxtb	r5, r5
   21640:	e7b0      	b.n	215a4 <uncompress_IPHC_header+0x50c>
	u8_t chksum = 0;
   21642:	f04f 0800 	mov.w	r8, #0
	struct net_udp_hdr *udp = NULL;
   21646:	46c1      	mov	r9, r8
	if (pkt->frags->len < offset) {
   21648:	68a3      	ldr	r3, [r4, #8]
   2164a:	899a      	ldrh	r2, [r3, #12]
   2164c:	fa1f fa85 	uxth.w	sl, r5
   21650:	4552      	cmp	r2, sl
   21652:	f4ff adbe 	bcc.w	211d2 <uncompress_IPHC_header+0x13a>
	memmove(pkt->frags->data, pkt->frags->data + offset,
   21656:	6898      	ldr	r0, [r3, #8]
   21658:	1b52      	subs	r2, r2, r5
   2165a:	1941      	adds	r1, r0, r5
   2165c:	f007 ffd8 	bl	29610 <memmove>
	pkt->frags->len -= offset;
   21660:	68a2      	ldr	r2, [r4, #8]
   21662:	8993      	ldrh	r3, [r2, #12]
   21664:	eba3 0a0a 	sub.w	sl, r3, sl
   21668:	f8a2 a00c 	strh.w	sl, [r2, #12]
	return pkt->ll_reserve;
   2166c:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	if (net_pkt_ll_reserve(pkt)) {
   21670:	b94a      	cbnz	r2, 21686 <uncompress_IPHC_header+0x5ee>
	net_pkt_frag_insert(pkt, frag);
   21672:	4639      	mov	r1, r7
   21674:	4620      	mov	r0, r4
   21676:	f7fb fab7 	bl	1cbe8 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   2167a:	4620      	mov	r0, r4
   2167c:	f7fb fb6e 	bl	1cd5c <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   21680:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   21682:	2200      	movs	r2, #0
   21684:	e00b      	b.n	2169e <uncompress_IPHC_header+0x606>
		memcpy(frag->data - net_pkt_ll_reserve(pkt),
   21686:	68bb      	ldr	r3, [r7, #8]
   21688:	4250      	negs	r0, r2
	return pkt->frags->data;
   2168a:	68a1      	ldr	r1, [r4, #8]
   2168c:	6889      	ldr	r1, [r1, #8]
   2168e:	4401      	add	r1, r0
   21690:	4418      	add	r0, r3
   21692:	f7de fe15 	bl	2c0 <memcpy>
   21696:	e7ec      	b.n	21672 <uncompress_IPHC_header+0x5da>
		bytes += buf->len;
   21698:	8999      	ldrh	r1, [r3, #12]
   2169a:	440a      	add	r2, r1
		buf = buf->frags;
   2169c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2169e:	2b00      	cmp	r3, #0
   216a0:	d1fa      	bne.n	21698 <uncompress_IPHC_header+0x600>
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   216a2:	b293      	uxth	r3, r2
   216a4:	3b28      	subs	r3, #40	; 0x28
   216a6:	b29b      	uxth	r3, r3
	ipv6->len[0] = len >> 8;
   216a8:	0a1a      	lsrs	r2, r3, #8
   216aa:	7132      	strb	r2, [r6, #4]
	ipv6->len[1] = (u8_t)len;
   216ac:	7173      	strb	r3, [r6, #5]
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   216ae:	79b1      	ldrb	r1, [r6, #6]
   216b0:	2911      	cmp	r1, #17
   216b2:	d002      	beq.n	216ba <uncompress_IPHC_header+0x622>
	return true;
   216b4:	2001      	movs	r0, #1
   216b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   216ba:	f1b9 0f00 	cmp.w	r9, #0
   216be:	d018      	beq.n	216f2 <uncompress_IPHC_header+0x65a>
		udp->len = htons(len);
   216c0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   216c4:	f8a9 3004 	strh.w	r3, [r9, #4]
		if (chksum) {
   216c8:	f1b8 0f00 	cmp.w	r8, #0
   216cc:	d102      	bne.n	216d4 <uncompress_IPHC_header+0x63c>
	return true;
   216ce:	2001      	movs	r0, #1
}
   216d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_calc_chksum(pkt, IPPROTO_UDP);
   216d4:	4620      	mov	r0, r4
   216d6:	f7fc f8ba 	bl	1d84e <net_calc_chksum>
			udp->chksum = ~net_calc_chksum_udp(pkt);
   216da:	43c0      	mvns	r0, r0
   216dc:	f8a9 0006 	strh.w	r0, [r9, #6]
	return true;
   216e0:	2001      	movs	r0, #1
   216e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   216e6:	2000      	movs	r0, #0
   216e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   216ec:	2000      	movs	r0, #0
   216ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return true;
   216f2:	2001      	movs	r0, #1
   216f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000216f8 <net_6lo_compress>:
	return true;
}

bool net_6lo_compress(struct net_pkt *pkt, bool iphc,
		      fragment_handler_t fragment)
{
   216f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216fc:	b085      	sub	sp, #20
   216fe:	4604      	mov	r4, r0
   21700:	4617      	mov	r7, r2
	if (iphc) {
   21702:	460d      	mov	r5, r1
   21704:	b9f9      	cbnz	r1, 21746 <net_6lo_compress+0x4e>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   21706:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2170a:	f7fb f9e3 	bl	1cad4 <net_pkt_get_frag>
	if (!frag) {
   2170e:	4606      	mov	r6, r0
   21710:	2800      	cmp	r0, #0
   21712:	f000 8438 	beq.w	21f86 <net_6lo_compress+0x88e>
	frag->data[0] = NET_6LO_DISPATCH_IPV6;
   21716:	f850 3f08 	ldr.w	r3, [r0, #8]!
   2171a:	2241      	movs	r2, #65	; 0x41
   2171c:	701a      	strb	r2, [r3, #0]
	net_buf_add(frag, 1);
   2171e:	2101      	movs	r1, #1
   21720:	f7f8 fd08 	bl	1a134 <net_buf_simple_add>
	net_pkt_frag_insert(pkt, frag);
   21724:	4631      	mov	r1, r6
   21726:	4620      	mov	r0, r4
   21728:	f7fb fa5e 	bl	1cbe8 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   2172c:	4620      	mov	r0, r4
   2172e:	f7fb fb15 	bl	1cd5c <net_pkt_compact>
	if (fragment) {
   21732:	2f00      	cmp	r7, #0
   21734:	f000 842a 	beq.w	21f8c <net_6lo_compress+0x894>
		return fragment(pkt, -1);
   21738:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2173c:	4620      	mov	r0, r4
   2173e:	47b8      	blx	r7
		return compress_IPHC_header(pkt, fragment);
	} else {
		return compress_ipv6_header(pkt, fragment);
	}
}
   21740:	b005      	add	sp, #20
   21742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21746:	6883      	ldr	r3, [r0, #8]
   21748:	689e      	ldr	r6, [r3, #8]
	if (pkt->frags->len < NET_IPV6H_LEN) {
   2174a:	899b      	ldrh	r3, [r3, #12]
   2174c:	2b27      	cmp	r3, #39	; 0x27
   2174e:	f240 8411 	bls.w	21f74 <net_6lo_compress+0x87c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   21752:	79b2      	ldrb	r2, [r6, #6]
   21754:	2a11      	cmp	r2, #17
   21756:	d02f      	beq.n	217b8 <net_6lo_compress+0xc0>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   21758:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2175c:	4620      	mov	r0, r4
   2175e:	f7fb f9b9 	bl	1cad4 <net_pkt_get_frag>
	if (!frag) {
   21762:	4680      	mov	r8, r0
   21764:	2800      	cmp	r0, #0
   21766:	f000 8408 	beq.w	21f7a <net_6lo_compress+0x882>
	IPHC[offset++] = NET_6LO_DISPATCH_IPHC;
   2176a:	6883      	ldr	r3, [r0, #8]
   2176c:	2260      	movs	r2, #96	; 0x60
   2176e:	701a      	strb	r2, [r3, #0]
	IPHC[offset++] = 0;
   21770:	6883      	ldr	r3, [r0, #8]
   21772:	2200      	movs	r2, #0
   21774:	705a      	strb	r2, [r3, #1]
	tcl = ((ipv6->vtc & 0x0F) << 4) | ((ipv6->tcflow & 0xF0) >> 4);
   21776:	7830      	ldrb	r0, [r6, #0]
   21778:	7871      	ldrb	r1, [r6, #1]
   2177a:	090b      	lsrs	r3, r1, #4
   2177c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   21780:	b2db      	uxtb	r3, r3
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   21782:	089a      	lsrs	r2, r3, #2
   21784:	ea42 1383 	orr.w	r3, r2, r3, lsl #6
   21788:	b25b      	sxtb	r3, r3
   2178a:	b2da      	uxtb	r2, r3
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   2178c:	f011 0f0f 	tst.w	r1, #15
   21790:	d121      	bne.n	217d6 <net_6lo_compress+0xde>
   21792:	f8b6 e002 	ldrh.w	lr, [r6, #2]
   21796:	f1be 0f00 	cmp.w	lr, #0
   2179a:	d11c      	bne.n	217d6 <net_6lo_compress+0xde>
		if (((ipv6->vtc & 0x0F) == 0) && ((ipv6->tcflow & 0xF0) == 0)) {
   2179c:	f010 0f0f 	tst.w	r0, #15
   217a0:	d10e      	bne.n	217c0 <net_6lo_compress+0xc8>
   217a2:	f011 0ff0 	tst.w	r1, #240	; 0xf0
   217a6:	d10b      	bne.n	217c0 <net_6lo_compress+0xc8>
			IPHC[0] |= NET_6LO_IPHC_TF_11;
   217a8:	f8d8 2008 	ldr.w	r2, [r8, #8]
   217ac:	7813      	ldrb	r3, [r2, #0]
   217ae:	f043 0318 	orr.w	r3, r3, #24
   217b2:	7013      	strb	r3, [r2, #0]
   217b4:	2202      	movs	r2, #2
   217b6:	e025      	b.n	21804 <net_6lo_compress+0x10c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   217b8:	2b2f      	cmp	r3, #47	; 0x2f
   217ba:	d8cd      	bhi.n	21758 <net_6lo_compress+0x60>
		return false;
   217bc:	2000      	movs	r0, #0
   217be:	e7bf      	b.n	21740 <net_6lo_compress+0x48>
			IPHC[0] |= NET_6LO_IPHC_TF_10;
   217c0:	f8d8 1008 	ldr.w	r1, [r8, #8]
   217c4:	780b      	ldrb	r3, [r1, #0]
   217c6:	f043 0310 	orr.w	r3, r3, #16
   217ca:	700b      	strb	r3, [r1, #0]
			IPHC[offset++] = tcl;
   217cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   217d0:	709a      	strb	r2, [r3, #2]
   217d2:	2203      	movs	r2, #3
   217d4:	e016      	b.n	21804 <net_6lo_compress+0x10c>
		if (((ipv6->vtc & 0x0F) == 0) && (ipv6->tcflow & 0x30)) {
   217d6:	f010 0f0f 	tst.w	r0, #15
   217da:	d102      	bne.n	217e2 <net_6lo_compress+0xea>
   217dc:	f011 0f30 	tst.w	r1, #48	; 0x30
   217e0:	d128      	bne.n	21834 <net_6lo_compress+0x13c>
			IPHC[0] |= NET_6LO_IPHC_TF_00;
   217e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
			IPHC[offset++] = tcl;
   217e6:	709a      	strb	r2, [r3, #2]
			IPHC[offset++] = ipv6->tcflow & 0x0F;
   217e8:	f8d8 2008 	ldr.w	r2, [r8, #8]
   217ec:	7873      	ldrb	r3, [r6, #1]
   217ee:	f003 030f 	and.w	r3, r3, #15
   217f2:	70d3      	strb	r3, [r2, #3]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   217f4:	f8d8 0008 	ldr.w	r0, [r8, #8]
   217f8:	2202      	movs	r2, #2
   217fa:	18b1      	adds	r1, r6, r2
   217fc:	3004      	adds	r0, #4
   217fe:	f7de fd5f 	bl	2c0 <memcpy>
			offset += 2;
   21802:	2206      	movs	r2, #6
	if (ipv6->nexthdr == IPPROTO_UDP) {
   21804:	79b3      	ldrb	r3, [r6, #6]
   21806:	2b11      	cmp	r3, #17
   21808:	d02d      	beq.n	21866 <net_6lo_compress+0x16e>
		IPHC[offset++] = ipv6->nexthdr;
   2180a:	f8d8 1008 	ldr.w	r1, [r8, #8]
   2180e:	f102 0901 	add.w	r9, r2, #1
   21812:	548b      	strb	r3, [r1, r2]
	switch (ipv6->hop_limit) {
   21814:	79f3      	ldrb	r3, [r6, #7]
   21816:	2b40      	cmp	r3, #64	; 0x40
   21818:	d040      	beq.n	2189c <net_6lo_compress+0x1a4>
   2181a:	2bff      	cmp	r3, #255	; 0xff
   2181c:	d045      	beq.n	218aa <net_6lo_compress+0x1b2>
   2181e:	2b01      	cmp	r3, #1
   21820:	d029      	beq.n	21876 <net_6lo_compress+0x17e>
		IPHC[offset++] = ipv6->hop_limit;
   21822:	f8d8 1008 	ldr.w	r1, [r8, #8]
   21826:	f109 0201 	add.w	r2, r9, #1
   2182a:	f801 3009 	strb.w	r3, [r1, r9]
   2182e:	fa5f f982 	uxtb.w	r9, r2
   21832:	e026      	b.n	21882 <net_6lo_compress+0x18a>
			IPHC[0] |= NET_6LO_IPHC_TF_01;
   21834:	f8d8 1008 	ldr.w	r1, [r8, #8]
   21838:	780a      	ldrb	r2, [r1, #0]
   2183a:	f042 0208 	orr.w	r2, r2, #8
   2183e:	700a      	strb	r2, [r1, #0]
			IPHC[offset++] = (tcl & 0xC0) | (ipv6->tcflow & 0x0F);
   21840:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21844:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   21848:	f996 1001 	ldrsb.w	r1, [r6, #1]
   2184c:	f001 010f 	and.w	r1, r1, #15
   21850:	430b      	orrs	r3, r1
   21852:	7093      	strb	r3, [r2, #2]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   21854:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21858:	2202      	movs	r2, #2
   2185a:	18b1      	adds	r1, r6, r2
   2185c:	3003      	adds	r0, #3
   2185e:	f7de fd2f 	bl	2c0 <memcpy>
			offset += 2;
   21862:	2205      	movs	r2, #5
   21864:	e7ce      	b.n	21804 <net_6lo_compress+0x10c>
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   21866:	f8d8 1008 	ldr.w	r1, [r8, #8]
   2186a:	780b      	ldrb	r3, [r1, #0]
   2186c:	f043 0304 	orr.w	r3, r3, #4
   21870:	700b      	strb	r3, [r1, #0]
   21872:	4691      	mov	r9, r2
   21874:	e7ce      	b.n	21814 <net_6lo_compress+0x11c>
		IPHC[0] |= NET_6LO_IPHC_HLIM1;
   21876:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2187a:	7813      	ldrb	r3, [r2, #0]
   2187c:	f043 0301 	orr.w	r3, r3, #1
   21880:	7013      	strb	r3, [r2, #0]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21882:	68b3      	ldr	r3, [r6, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21884:	b9c3      	cbnz	r3, 218b8 <net_6lo_compress+0x1c0>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21886:	68f3      	ldr	r3, [r6, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21888:	2b00      	cmp	r3, #0
   2188a:	d176      	bne.n	2197a <net_6lo_compress+0x282>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2188c:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2188e:	2b00      	cmp	r3, #0
   21890:	d175      	bne.n	2197e <net_6lo_compress+0x286>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   21892:	6973      	ldr	r3, [r6, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21894:	2b00      	cmp	r3, #0
   21896:	d074      	beq.n	21982 <net_6lo_compress+0x28a>
   21898:	2300      	movs	r3, #0
   2189a:	e00e      	b.n	218ba <net_6lo_compress+0x1c2>
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   2189c:	f8d8 2008 	ldr.w	r2, [r8, #8]
   218a0:	7813      	ldrb	r3, [r2, #0]
   218a2:	f043 0302 	orr.w	r3, r3, #2
   218a6:	7013      	strb	r3, [r2, #0]
   218a8:	e7eb      	b.n	21882 <net_6lo_compress+0x18a>
		IPHC[0] |= NET_6LO_IPHC_HLIM255;
   218aa:	f8d8 2008 	ldr.w	r2, [r8, #8]
   218ae:	7813      	ldrb	r3, [r2, #0]
   218b0:	f043 0303 	orr.w	r3, r3, #3
   218b4:	7013      	strb	r3, [r2, #0]
   218b6:	e7e4      	b.n	21882 <net_6lo_compress+0x18a>
   218b8:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&ipv6->src)) {
   218ba:	2b00      	cmp	r3, #0
   218bc:	d163      	bne.n	21986 <net_6lo_compress+0x28e>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   218be:	8932      	ldrh	r2, [r6, #8]
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   218c0:	f248 03fe 	movw	r3, #33022	; 0x80fe
   218c4:	429a      	cmp	r2, r3
   218c6:	d065      	beq.n	21994 <net_6lo_compress+0x29c>
		IPHC[1] |= NET_6LO_IPHC_SAM_00;
   218c8:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], ipv6->src.s6_addr,
   218cc:	2210      	movs	r2, #16
   218ce:	f106 0108 	add.w	r1, r6, #8
   218d2:	4448      	add	r0, r9
   218d4:	f7de fcf4 	bl	2c0 <memcpy>
		offset += sizeof(struct in6_addr);
   218d8:	f109 0910 	add.w	r9, r9, #16
   218dc:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   218e0:	f1b9 0f00 	cmp.w	r9, #0
   218e4:	f000 812d 	beq.w	21b42 <net_6lo_compress+0x44a>
	return addr->s6_addr[0] == 0xFF;
   218e8:	7e33      	ldrb	r3, [r6, #24]
	if (net_is_ipv6_addr_mcast(&ipv6->dst)) {
   218ea:	2bff      	cmp	r3, #255	; 0xff
   218ec:	f000 812e 	beq.w	21b4c <net_6lo_compress+0x454>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   218f0:	8b32      	ldrh	r2, [r6, #24]
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   218f2:	f248 03fe 	movw	r3, #33022	; 0x80fe
   218f6:	429a      	cmp	r2, r3
   218f8:	f000 81bf 	beq.w	21c7a <net_6lo_compress+0x582>
		IPHC[1] |= NET_6LO_IPHC_DAM_00;
   218fc:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   21900:	2210      	movs	r2, #16
   21902:	f106 0118 	add.w	r1, r6, #24
   21906:	4448      	add	r0, r9
   21908:	f7de fcda 	bl	2c0 <memcpy>
		offset += 16;
   2190c:	f109 0910 	add.w	r9, r9, #16
   21910:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   21914:	f1b9 0f00 	cmp.w	r9, #0
   21918:	f000 8287 	beq.w	21e2a <net_6lo_compress+0x732>
	if (ipv6->nexthdr != IPPROTO_UDP) {
   2191c:	79b3      	ldrb	r3, [r6, #6]
   2191e:	2b11      	cmp	r3, #17
   21920:	f000 8288 	beq.w	21e34 <net_6lo_compress+0x73c>
	compressed = NET_IPV6H_LEN;
   21924:	2628      	movs	r6, #40	; 0x28
	net_buf_add(frag, offset);
   21926:	f108 0a08 	add.w	sl, r8, #8
   2192a:	4649      	mov	r1, r9
   2192c:	4650      	mov	r0, sl
   2192e:	f7f8 fc01 	bl	1a134 <net_buf_simple_add>
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   21932:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21936:	68a3      	ldr	r3, [r4, #8]
   21938:	6899      	ldr	r1, [r3, #8]
	       pkt->frags->len - compressed);
   2193a:	899a      	ldrh	r2, [r3, #12]
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   2193c:	1b92      	subs	r2, r2, r6
   2193e:	4431      	add	r1, r6
   21940:	4448      	add	r0, r9
   21942:	f7de fcbd 	bl	2c0 <memcpy>
	net_buf_add(frag, pkt->frags->len - compressed);
   21946:	68a3      	ldr	r3, [r4, #8]
   21948:	8999      	ldrh	r1, [r3, #12]
   2194a:	1b89      	subs	r1, r1, r6
   2194c:	4650      	mov	r0, sl
   2194e:	f7f8 fbf1 	bl	1a134 <net_buf_simple_add>
	net_pkt_frag_del(pkt, NULL, pkt->frags);
   21952:	68a2      	ldr	r2, [r4, #8]
   21954:	2100      	movs	r1, #0
   21956:	4620      	mov	r0, r4
   21958:	f7fb f928 	bl	1cbac <net_pkt_frag_del>
	net_pkt_frag_insert(pkt, frag);
   2195c:	4641      	mov	r1, r8
   2195e:	4620      	mov	r0, r4
   21960:	f7fb f942 	bl	1cbe8 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   21964:	4620      	mov	r0, r4
   21966:	f7fb f9f9 	bl	1cd5c <net_pkt_compact>
	if (fragment) {
   2196a:	2f00      	cmp	r7, #0
   2196c:	f000 8308 	beq.w	21f80 <net_6lo_compress+0x888>
		return fragment(pkt, compressed - offset);
   21970:	eba6 0109 	sub.w	r1, r6, r9
   21974:	4620      	mov	r0, r4
   21976:	47b8      	blx	r7
   21978:	e6e2      	b.n	21740 <net_6lo_compress+0x48>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2197a:	2300      	movs	r3, #0
   2197c:	e79d      	b.n	218ba <net_6lo_compress+0x1c2>
   2197e:	2300      	movs	r3, #0
   21980:	e79b      	b.n	218ba <net_6lo_compress+0x1c2>
   21982:	2301      	movs	r3, #1
   21984:	e799      	b.n	218ba <net_6lo_compress+0x1c2>
		IPHC[1] |= NET_6LO_IPHC_SAC_1;
   21986:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2198a:	7853      	ldrb	r3, [r2, #1]
   2198c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21990:	7053      	strb	r3, [r2, #1]
   21992:	e7a5      	b.n	218e0 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21994:	8973      	ldrh	r3, [r6, #10]
   21996:	b91b      	cbnz	r3, 219a0 <net_6lo_compress+0x2a8>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   21998:	68f3      	ldr	r3, [r6, #12]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   2199a:	b33b      	cbz	r3, 219ec <net_6lo_compress+0x2f4>
   2199c:	2300      	movs	r3, #0
   2199e:	e000      	b.n	219a2 <net_6lo_compress+0x2aa>
   219a0:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   219a2:	9301      	str	r3, [sp, #4]
   219a4:	2b00      	cmp	r3, #0
   219a6:	d08f      	beq.n	218c8 <net_6lo_compress+0x1d0>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   219a8:	6933      	ldr	r3, [r6, #16]
   219aa:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   219ae:	d01f      	beq.n	219f0 <net_6lo_compress+0x2f8>
   219b0:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->src)) {
   219b2:	469a      	mov	sl, r3
   219b4:	bb1b      	cbnz	r3, 219fe <net_6lo_compress+0x306>
			if (!net_pkt_ll_src(pkt)) {
   219b6:	f114 0320 	adds.w	r3, r4, #32
   219ba:	f000 80bf 	beq.w	21b3c <net_6lo_compress+0x444>
	if (!addr || !lladdr) {
   219be:	f116 0b08 	adds.w	fp, r6, #8
   219c2:	d008      	beq.n	219d6 <net_6lo_compress+0x2de>
   219c4:	b13b      	cbz	r3, 219d6 <net_6lo_compress+0x2de>
	switch (lladdr->len) {
   219c6:	791a      	ldrb	r2, [r3, #4]
   219c8:	2a06      	cmp	r2, #6
   219ca:	d03e      	beq.n	21a4a <net_6lo_compress+0x352>
   219cc:	2a08      	cmp	r2, #8
   219ce:	f000 808c 	beq.w	21aea <net_6lo_compress+0x3f2>
   219d2:	2a02      	cmp	r2, #2
   219d4:	d026      	beq.n	21a24 <net_6lo_compress+0x32c>
			if (net_ipv6_addr_based_on_ll(&ipv6->src,
   219d6:	f1ba 0f00 	cmp.w	sl, #0
   219da:	f000 809c 	beq.w	21b16 <net_6lo_compress+0x41e>
				IPHC[1] |= NET_6LO_IPHC_SAM_11;
   219de:	f8d8 2008 	ldr.w	r2, [r8, #8]
   219e2:	7853      	ldrb	r3, [r2, #1]
   219e4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   219e8:	7053      	strb	r3, [r2, #1]
   219ea:	e779      	b.n	218e0 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   219ec:	2301      	movs	r3, #1
   219ee:	e7d8      	b.n	219a2 <net_6lo_compress+0x2aa>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   219f0:	8ab3      	ldrh	r3, [r6, #20]
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   219f2:	2bfe      	cmp	r3, #254	; 0xfe
   219f4:	d001      	beq.n	219fa <net_6lo_compress+0x302>
   219f6:	2300      	movs	r3, #0
   219f8:	e7db      	b.n	219b2 <net_6lo_compress+0x2ba>
   219fa:	2301      	movs	r3, #1
   219fc:	e7d9      	b.n	219b2 <net_6lo_compress+0x2ba>
			IPHC[1] |= NET_6LO_IPHC_SAM_10;
   219fe:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21a02:	7853      	ldrb	r3, [r2, #1]
   21a04:	f043 0320 	orr.w	r3, r3, #32
   21a08:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->src.s6_addr[14], 2);
   21a0a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21a0e:	2202      	movs	r2, #2
   21a10:	f106 0116 	add.w	r1, r6, #22
   21a14:	4448      	add	r0, r9
   21a16:	f7de fc53 	bl	2c0 <memcpy>
			offset += 2;
   21a1a:	f109 0902 	add.w	r9, r9, #2
   21a1e:	fa5f f989 	uxtb.w	r9, r9
   21a22:	e75d      	b.n	218e0 <net_6lo_compress+0x1e8>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   21a24:	6a21      	ldr	r1, [r4, #32]
   21a26:	f10b 000e 	add.w	r0, fp, #14
   21a2a:	f007 fdc1 	bl	295b0 <memcmp>
   21a2e:	2800      	cmp	r0, #0
   21a30:	d1d1      	bne.n	219d6 <net_6lo_compress+0x2de>
		    addr->s6_addr[10] == 0 &&
   21a32:	f8db 3008 	ldr.w	r3, [fp, #8]
   21a36:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   21a3a:	d1cc      	bne.n	219d6 <net_6lo_compress+0x2de>
		    addr->s6_addr[12] == 0xfe) {
   21a3c:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   21a40:	2bfe      	cmp	r3, #254	; 0xfe
   21a42:	d1c8      	bne.n	219d6 <net_6lo_compress+0x2de>
			return true;
   21a44:	f8dd a004 	ldr.w	sl, [sp, #4]
   21a48:	e7c5      	b.n	219d6 <net_6lo_compress+0x2de>
		if (lladdr->type == NET_LINK_ETHERNET) {
   21a4a:	795b      	ldrb	r3, [r3, #5]
   21a4c:	2b03      	cmp	r3, #3
   21a4e:	d026      	beq.n	21a9e <net_6lo_compress+0x3a6>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   21a50:	2b02      	cmp	r3, #2
   21a52:	d1c0      	bne.n	219d6 <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21a54:	6a21      	ldr	r1, [r4, #32]
   21a56:	2202      	movs	r2, #2
   21a58:	3101      	adds	r1, #1
   21a5a:	f10b 0009 	add.w	r0, fp, #9
   21a5e:	f007 fda7 	bl	295b0 <memcmp>
   21a62:	2800      	cmp	r0, #0
   21a64:	d1b7      	bne.n	219d6 <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21a66:	6a21      	ldr	r1, [r4, #32]
   21a68:	2203      	movs	r2, #3
   21a6a:	4411      	add	r1, r2
   21a6c:	f10b 000d 	add.w	r0, fp, #13
   21a70:	f007 fd9e 	bl	295b0 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21a74:	2800      	cmp	r0, #0
   21a76:	d1ae      	bne.n	219d6 <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   21a78:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21a7c:	2bff      	cmp	r3, #255	; 0xff
   21a7e:	d1aa      	bne.n	219d6 <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe
   21a80:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   21a84:	2bfe      	cmp	r3, #254	; 0xfe
   21a86:	d1a6      	bne.n	219d6 <net_6lo_compress+0x2de>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   21a88:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21a8c:	f083 0302 	eor.w	r3, r3, #2
   21a90:	6a22      	ldr	r2, [r4, #32]
   21a92:	7812      	ldrb	r2, [r2, #0]
   21a94:	4293      	cmp	r3, r2
   21a96:	d19e      	bne.n	219d6 <net_6lo_compress+0x2de>
				return true;
   21a98:	f8dd a004 	ldr.w	sl, [sp, #4]
   21a9c:	e79b      	b.n	219d6 <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21a9e:	6a21      	ldr	r1, [r4, #32]
   21aa0:	2202      	movs	r2, #2
   21aa2:	3101      	adds	r1, #1
   21aa4:	f10b 0009 	add.w	r0, fp, #9
   21aa8:	f007 fd82 	bl	295b0 <memcmp>
   21aac:	2800      	cmp	r0, #0
   21aae:	d192      	bne.n	219d6 <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21ab0:	6a21      	ldr	r1, [r4, #32]
   21ab2:	2203      	movs	r2, #3
   21ab4:	4411      	add	r1, r2
   21ab6:	f10b 000d 	add.w	r0, fp, #13
   21aba:	f007 fd79 	bl	295b0 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21abe:	2800      	cmp	r0, #0
   21ac0:	d189      	bne.n	219d6 <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   21ac2:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21ac6:	2bff      	cmp	r3, #255	; 0xff
   21ac8:	d185      	bne.n	219d6 <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe &&
   21aca:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   21ace:	2bfe      	cmp	r3, #254	; 0xfe
   21ad0:	d181      	bne.n	219d6 <net_6lo_compress+0x2de>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   21ad2:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21ad6:	f083 0302 	eor.w	r3, r3, #2
   21ada:	6a22      	ldr	r2, [r4, #32]
   21adc:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   21ade:	4293      	cmp	r3, r2
   21ae0:	f47f af79 	bne.w	219d6 <net_6lo_compress+0x2de>
				return true;
   21ae4:	f8dd a004 	ldr.w	sl, [sp, #4]
   21ae8:	e775      	b.n	219d6 <net_6lo_compress+0x2de>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   21aea:	6a21      	ldr	r1, [r4, #32]
   21aec:	3a01      	subs	r2, #1
   21aee:	3101      	adds	r1, #1
   21af0:	f10b 0009 	add.w	r0, fp, #9
   21af4:	f007 fd5c 	bl	295b0 <memcmp>
   21af8:	2800      	cmp	r0, #0
   21afa:	f47f af6c 	bne.w	219d6 <net_6lo_compress+0x2de>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   21afe:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21b02:	f083 0302 	eor.w	r3, r3, #2
   21b06:	6a22      	ldr	r2, [r4, #32]
   21b08:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   21b0a:	4293      	cmp	r3, r2
   21b0c:	f47f af63 	bne.w	219d6 <net_6lo_compress+0x2de>
			return true;
   21b10:	f8dd a004 	ldr.w	sl, [sp, #4]
   21b14:	e75f      	b.n	219d6 <net_6lo_compress+0x2de>
				IPHC[1] |= NET_6LO_IPHC_SAM_01;
   21b16:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21b1a:	7853      	ldrb	r3, [r2, #1]
   21b1c:	f043 0310 	orr.w	r3, r3, #16
   21b20:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->src.s6_addr[8], 8);
   21b22:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21b26:	2208      	movs	r2, #8
   21b28:	f106 0110 	add.w	r1, r6, #16
   21b2c:	4448      	add	r0, r9
   21b2e:	f7de fbc7 	bl	2c0 <memcpy>
				offset += 8;
   21b32:	f109 0908 	add.w	r9, r9, #8
   21b36:	fa5f f989 	uxtb.w	r9, r9
   21b3a:	e6d1      	b.n	218e0 <net_6lo_compress+0x1e8>
				return 0;
   21b3c:	f04f 0900 	mov.w	r9, #0
   21b40:	e6ce      	b.n	218e0 <net_6lo_compress+0x1e8>
		net_pkt_frag_unref(frag);
   21b42:	4640      	mov	r0, r8
   21b44:	f7fb f813 	bl	1cb6e <net_pkt_frag_unref>
		return false;
   21b48:	2000      	movs	r0, #0
   21b4a:	e5f9      	b.n	21740 <net_6lo_compress+0x48>
	IPHC[1] |= NET_6LO_IPHC_M_1;
   21b4c:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21b50:	7853      	ldrb	r3, [r2, #1]
   21b52:	f043 0308 	orr.w	r3, r3, #8
   21b56:	7053      	strb	r3, [r2, #1]
	return ((addr->s6_addr[1] == 0x02) &&
   21b58:	7e73      	ldrb	r3, [r6, #25]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21b5a:	2b02      	cmp	r3, #2
   21b5c:	d00a      	beq.n	21b74 <net_6lo_compress+0x47c>
   21b5e:	2300      	movs	r3, #0
	if (net_6lo_maddr_8_bit_compressible(&ipv6->dst)) {
   21b60:	b9db      	cbnz	r3, 21b9a <net_6lo_compress+0x4a2>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21b62:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21b64:	bb63      	cbnz	r3, 21bc0 <net_6lo_compress+0x4c8>
   21b66:	6a32      	ldr	r2, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21b68:	bba2      	cbnz	r2, 21bd4 <net_6lo_compress+0x4dc>
		 (addr->s6_addr[12] == 0x00));
   21b6a:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21b6e:	b39a      	cbz	r2, 21bd8 <net_6lo_compress+0x4e0>
   21b70:	2200      	movs	r2, #0
   21b72:	e026      	b.n	21bc2 <net_6lo_compress+0x4ca>
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21b74:	8b73      	ldrh	r3, [r6, #26]
	return ((addr->s6_addr[1] == 0x02) &&
   21b76:	b943      	cbnz	r3, 21b8a <net_6lo_compress+0x492>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21b78:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21b7a:	b943      	cbnz	r3, 21b8e <net_6lo_compress+0x496>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21b7c:	6a33      	ldr	r3, [r6, #32]
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21b7e:	b943      	cbnz	r3, 21b92 <net_6lo_compress+0x49a>
		 (addr->s6_addr[14] == 0x00));
   21b80:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21b84:	b13b      	cbz	r3, 21b96 <net_6lo_compress+0x49e>
   21b86:	2300      	movs	r3, #0
   21b88:	e7ea      	b.n	21b60 <net_6lo_compress+0x468>
   21b8a:	2300      	movs	r3, #0
   21b8c:	e7e8      	b.n	21b60 <net_6lo_compress+0x468>
   21b8e:	2300      	movs	r3, #0
   21b90:	e7e6      	b.n	21b60 <net_6lo_compress+0x468>
   21b92:	2300      	movs	r3, #0
   21b94:	e7e4      	b.n	21b60 <net_6lo_compress+0x468>
   21b96:	2301      	movs	r3, #1
   21b98:	e7e2      	b.n	21b60 <net_6lo_compress+0x468>
		IPHC[1] |= NET_6LO_IPHC_DAM_11;
   21b9a:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21b9e:	7853      	ldrb	r3, [r2, #1]
   21ba0:	f043 0303 	orr.w	r3, r3, #3
   21ba4:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[15], 1);
   21ba6:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21baa:	2201      	movs	r2, #1
   21bac:	f106 0127 	add.w	r1, r6, #39	; 0x27
   21bb0:	4448      	add	r0, r9
   21bb2:	f7de fb85 	bl	2c0 <memcpy>
		offset++;
   21bb6:	f109 0901 	add.w	r9, r9, #1
   21bba:	fa5f f989 	uxtb.w	r9, r9
   21bbe:	e6a9      	b.n	21914 <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21bc0:	2200      	movs	r2, #0
	} else if (net_6lo_maddr_32_bit_compressible(&ipv6->dst)) {
   21bc2:	b95a      	cbnz	r2, 21bdc <net_6lo_compress+0x4e4>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   21bc4:	bb43      	cbnz	r3, 21c18 <net_6lo_compress+0x520>
   21bc6:	8c33      	ldrh	r3, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21bc8:	bbab      	cbnz	r3, 21c36 <net_6lo_compress+0x53e>
		 (addr->s6_addr[10] == 0x00));
   21bca:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   21bce:	b3a3      	cbz	r3, 21c3a <net_6lo_compress+0x542>
   21bd0:	2300      	movs	r3, #0
   21bd2:	e022      	b.n	21c1a <net_6lo_compress+0x522>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21bd4:	2200      	movs	r2, #0
   21bd6:	e7f4      	b.n	21bc2 <net_6lo_compress+0x4ca>
   21bd8:	2201      	movs	r2, #1
   21bda:	e7f2      	b.n	21bc2 <net_6lo_compress+0x4ca>
		IPHC[1] |= NET_6LO_IPHC_DAM_10;
   21bdc:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21be0:	7853      	ldrb	r3, [r2, #1]
   21be2:	f043 0302 	orr.w	r3, r3, #2
   21be6:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   21be8:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21bec:	2201      	movs	r2, #1
   21bee:	f106 0119 	add.w	r1, r6, #25
   21bf2:	4448      	add	r0, r9
   21bf4:	f7de fb64 	bl	2c0 <memcpy>
		offset++;
   21bf8:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   21bfc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21c00:	2203      	movs	r2, #3
   21c02:	f106 0125 	add.w	r1, r6, #37	; 0x25
   21c06:	fa53 f080 	uxtab	r0, r3, r0
   21c0a:	f7de fb59 	bl	2c0 <memcpy>
		offset += 3;
   21c0e:	f109 0904 	add.w	r9, r9, #4
   21c12:	fa5f f989 	uxtb.w	r9, r9
   21c16:	e67d      	b.n	21914 <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   21c18:	2300      	movs	r3, #0
	} else if (net_6lo_maddr_48_bit_compressible(&ipv6->dst)) {
   21c1a:	b983      	cbnz	r3, 21c3e <net_6lo_compress+0x546>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   21c1c:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21c20:	2210      	movs	r2, #16
   21c22:	f106 0118 	add.w	r1, r6, #24
   21c26:	4448      	add	r0, r9
   21c28:	f7de fb4a 	bl	2c0 <memcpy>
		offset += 16;
   21c2c:	f109 0910 	add.w	r9, r9, #16
   21c30:	fa5f f989 	uxtb.w	r9, r9
   21c34:	e66e      	b.n	21914 <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   21c36:	2300      	movs	r3, #0
   21c38:	e7ef      	b.n	21c1a <net_6lo_compress+0x522>
   21c3a:	2301      	movs	r3, #1
   21c3c:	e7ed      	b.n	21c1a <net_6lo_compress+0x522>
		IPHC[1] |= NET_6LO_IPHC_DAM_01;
   21c3e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21c42:	7853      	ldrb	r3, [r2, #1]
   21c44:	f043 0301 	orr.w	r3, r3, #1
   21c48:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   21c4a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21c4e:	2201      	movs	r2, #1
   21c50:	f106 0119 	add.w	r1, r6, #25
   21c54:	4448      	add	r0, r9
   21c56:	f7de fb33 	bl	2c0 <memcpy>
		offset++;
   21c5a:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   21c5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21c62:	2205      	movs	r2, #5
   21c64:	f106 0123 	add.w	r1, r6, #35	; 0x23
   21c68:	fa53 f080 	uxtab	r0, r3, r0
   21c6c:	f7de fb28 	bl	2c0 <memcpy>
		offset += 5;
   21c70:	f109 0906 	add.w	r9, r9, #6
   21c74:	fa5f f989 	uxtb.w	r9, r9
   21c78:	e64c      	b.n	21914 <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21c7a:	8b73      	ldrh	r3, [r6, #26]
   21c7c:	b91b      	cbnz	r3, 21c86 <net_6lo_compress+0x58e>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   21c7e:	69f3      	ldr	r3, [r6, #28]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21c80:	b343      	cbz	r3, 21cd4 <net_6lo_compress+0x5dc>
   21c82:	2300      	movs	r3, #0
   21c84:	e000      	b.n	21c88 <net_6lo_compress+0x590>
   21c86:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   21c88:	9301      	str	r3, [sp, #4]
   21c8a:	2b00      	cmp	r3, #0
   21c8c:	f43f ae36 	beq.w	218fc <net_6lo_compress+0x204>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   21c90:	6a33      	ldr	r3, [r6, #32]
   21c92:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   21c96:	d01f      	beq.n	21cd8 <net_6lo_compress+0x5e0>
   21c98:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->dst)) {
   21c9a:	469a      	mov	sl, r3
   21c9c:	bb1b      	cbnz	r3, 21ce6 <net_6lo_compress+0x5ee>
			if (!net_pkt_ll_dst(pkt)) {
   21c9e:	f114 0328 	adds.w	r3, r4, #40	; 0x28
   21ca2:	f000 80bf 	beq.w	21e24 <net_6lo_compress+0x72c>
	if (!addr || !lladdr) {
   21ca6:	f116 0b18 	adds.w	fp, r6, #24
   21caa:	d008      	beq.n	21cbe <net_6lo_compress+0x5c6>
   21cac:	b13b      	cbz	r3, 21cbe <net_6lo_compress+0x5c6>
	switch (lladdr->len) {
   21cae:	791a      	ldrb	r2, [r3, #4]
   21cb0:	2a06      	cmp	r2, #6
   21cb2:	d03e      	beq.n	21d32 <net_6lo_compress+0x63a>
   21cb4:	2a08      	cmp	r2, #8
   21cb6:	f000 808c 	beq.w	21dd2 <net_6lo_compress+0x6da>
   21cba:	2a02      	cmp	r2, #2
   21cbc:	d026      	beq.n	21d0c <net_6lo_compress+0x614>
			if (net_ipv6_addr_based_on_ll(&ipv6->dst,
   21cbe:	f1ba 0f00 	cmp.w	sl, #0
   21cc2:	f000 809c 	beq.w	21dfe <net_6lo_compress+0x706>
				IPHC[1] |= NET_6LO_IPHC_DAM_11;
   21cc6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21cca:	7853      	ldrb	r3, [r2, #1]
   21ccc:	f043 0303 	orr.w	r3, r3, #3
   21cd0:	7053      	strb	r3, [r2, #1]
   21cd2:	e61f      	b.n	21914 <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21cd4:	2301      	movs	r3, #1
   21cd6:	e7d7      	b.n	21c88 <net_6lo_compress+0x590>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   21cd8:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   21cda:	2bfe      	cmp	r3, #254	; 0xfe
   21cdc:	d001      	beq.n	21ce2 <net_6lo_compress+0x5ea>
   21cde:	2300      	movs	r3, #0
   21ce0:	e7db      	b.n	21c9a <net_6lo_compress+0x5a2>
   21ce2:	2301      	movs	r3, #1
   21ce4:	e7d9      	b.n	21c9a <net_6lo_compress+0x5a2>
			IPHC[1] |= NET_6LO_IPHC_DAM_10;
   21ce6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21cea:	7853      	ldrb	r3, [r2, #1]
   21cec:	f043 0302 	orr.w	r3, r3, #2
   21cf0:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->dst.s6_addr[14], 2);
   21cf2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21cf6:	2202      	movs	r2, #2
   21cf8:	f106 0126 	add.w	r1, r6, #38	; 0x26
   21cfc:	4448      	add	r0, r9
   21cfe:	f7de fadf 	bl	2c0 <memcpy>
			offset += 2;
   21d02:	f109 0902 	add.w	r9, r9, #2
   21d06:	fa5f f989 	uxtb.w	r9, r9
   21d0a:	e603      	b.n	21914 <net_6lo_compress+0x21c>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   21d0c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21d0e:	f10b 000e 	add.w	r0, fp, #14
   21d12:	f007 fc4d 	bl	295b0 <memcmp>
   21d16:	2800      	cmp	r0, #0
   21d18:	d1d1      	bne.n	21cbe <net_6lo_compress+0x5c6>
		    addr->s6_addr[10] == 0 &&
   21d1a:	f8db 3008 	ldr.w	r3, [fp, #8]
   21d1e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   21d22:	d1cc      	bne.n	21cbe <net_6lo_compress+0x5c6>
		    addr->s6_addr[12] == 0xfe) {
   21d24:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   21d28:	2bfe      	cmp	r3, #254	; 0xfe
   21d2a:	d1c8      	bne.n	21cbe <net_6lo_compress+0x5c6>
			return true;
   21d2c:	f8dd a004 	ldr.w	sl, [sp, #4]
   21d30:	e7c5      	b.n	21cbe <net_6lo_compress+0x5c6>
		if (lladdr->type == NET_LINK_ETHERNET) {
   21d32:	795b      	ldrb	r3, [r3, #5]
   21d34:	2b03      	cmp	r3, #3
   21d36:	d026      	beq.n	21d86 <net_6lo_compress+0x68e>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   21d38:	2b02      	cmp	r3, #2
   21d3a:	d1c0      	bne.n	21cbe <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21d3c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21d3e:	2202      	movs	r2, #2
   21d40:	3101      	adds	r1, #1
   21d42:	f10b 0009 	add.w	r0, fp, #9
   21d46:	f007 fc33 	bl	295b0 <memcmp>
   21d4a:	2800      	cmp	r0, #0
   21d4c:	d1b7      	bne.n	21cbe <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21d4e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21d50:	2203      	movs	r2, #3
   21d52:	4411      	add	r1, r2
   21d54:	f10b 000d 	add.w	r0, fp, #13
   21d58:	f007 fc2a 	bl	295b0 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21d5c:	2800      	cmp	r0, #0
   21d5e:	d1ae      	bne.n	21cbe <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   21d60:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21d64:	2bff      	cmp	r3, #255	; 0xff
   21d66:	d1aa      	bne.n	21cbe <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe
   21d68:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   21d6c:	2bfe      	cmp	r3, #254	; 0xfe
   21d6e:	d1a6      	bne.n	21cbe <net_6lo_compress+0x5c6>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   21d70:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21d74:	f083 0302 	eor.w	r3, r3, #2
   21d78:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   21d7a:	7812      	ldrb	r2, [r2, #0]
   21d7c:	4293      	cmp	r3, r2
   21d7e:	d19e      	bne.n	21cbe <net_6lo_compress+0x5c6>
				return true;
   21d80:	f8dd a004 	ldr.w	sl, [sp, #4]
   21d84:	e79b      	b.n	21cbe <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21d86:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21d88:	2202      	movs	r2, #2
   21d8a:	3101      	adds	r1, #1
   21d8c:	f10b 0009 	add.w	r0, fp, #9
   21d90:	f007 fc0e 	bl	295b0 <memcmp>
   21d94:	2800      	cmp	r0, #0
   21d96:	d192      	bne.n	21cbe <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21d98:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21d9a:	2203      	movs	r2, #3
   21d9c:	4411      	add	r1, r2
   21d9e:	f10b 000d 	add.w	r0, fp, #13
   21da2:	f007 fc05 	bl	295b0 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21da6:	2800      	cmp	r0, #0
   21da8:	d189      	bne.n	21cbe <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   21daa:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21dae:	2bff      	cmp	r3, #255	; 0xff
   21db0:	d185      	bne.n	21cbe <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe &&
   21db2:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   21db6:	2bfe      	cmp	r3, #254	; 0xfe
   21db8:	d181      	bne.n	21cbe <net_6lo_compress+0x5c6>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   21dba:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21dbe:	f083 0302 	eor.w	r3, r3, #2
   21dc2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   21dc4:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   21dc6:	4293      	cmp	r3, r2
   21dc8:	f47f af79 	bne.w	21cbe <net_6lo_compress+0x5c6>
				return true;
   21dcc:	f8dd a004 	ldr.w	sl, [sp, #4]
   21dd0:	e775      	b.n	21cbe <net_6lo_compress+0x5c6>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   21dd2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21dd4:	3a01      	subs	r2, #1
   21dd6:	3101      	adds	r1, #1
   21dd8:	f10b 0009 	add.w	r0, fp, #9
   21ddc:	f007 fbe8 	bl	295b0 <memcmp>
   21de0:	2800      	cmp	r0, #0
   21de2:	f47f af6c 	bne.w	21cbe <net_6lo_compress+0x5c6>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   21de6:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21dea:	f083 0302 	eor.w	r3, r3, #2
   21dee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   21df0:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   21df2:	4293      	cmp	r3, r2
   21df4:	f47f af63 	bne.w	21cbe <net_6lo_compress+0x5c6>
			return true;
   21df8:	f8dd a004 	ldr.w	sl, [sp, #4]
   21dfc:	e75f      	b.n	21cbe <net_6lo_compress+0x5c6>
				IPHC[1] |= NET_6LO_IPHC_DAM_01;
   21dfe:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21e02:	7853      	ldrb	r3, [r2, #1]
   21e04:	f043 0301 	orr.w	r3, r3, #1
   21e08:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->dst.s6_addr[8], 8);
   21e0a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21e0e:	2208      	movs	r2, #8
   21e10:	f106 0120 	add.w	r1, r6, #32
   21e14:	4448      	add	r0, r9
   21e16:	f7de fa53 	bl	2c0 <memcpy>
				offset += 8;
   21e1a:	f109 0908 	add.w	r9, r9, #8
   21e1e:	fa5f f989 	uxtb.w	r9, r9
   21e22:	e577      	b.n	21914 <net_6lo_compress+0x21c>
				return 0;
   21e24:	f04f 0900 	mov.w	r9, #0
   21e28:	e574      	b.n	21914 <net_6lo_compress+0x21c>
		net_pkt_frag_unref(frag);
   21e2a:	4640      	mov	r0, r8
   21e2c:	f7fa fe9f 	bl	1cb6e <net_pkt_frag_unref>
		return false;
   21e30:	2000      	movs	r0, #0
   21e32:	e485      	b.n	21740 <net_6lo_compress+0x48>
		udp = net_udp_get_hdr(pkt, &hdr);
   21e34:	a902      	add	r1, sp, #8
   21e36:	4620      	mov	r0, r4
   21e38:	f000 fc68 	bl	2270c <net_udp_get_hdr>
   21e3c:	4606      	mov	r6, r0
		IPHC[offset] = NET_6LO_NHC_UDP_BARE;
   21e3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21e42:	22f0      	movs	r2, #240	; 0xf0
   21e44:	f803 2009 	strb.w	r2, [r3, r9]
	if ((((htons(udp->src_port) >> 4) & 0xFFF) ==
   21e48:	8802      	ldrh	r2, [r0, #0]
   21e4a:	0a13      	lsrs	r3, r2, #8
   21e4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   21e50:	b29b      	uxth	r3, r3
   21e52:	f640 720b 	movw	r2, #3851	; 0xf0b
   21e56:	ebb2 1f13 	cmp.w	r2, r3, lsr #4
   21e5a:	d025      	beq.n	21ea8 <net_6lo_compress+0x7b0>
	} else if (((htons(udp->dst_port) >> 8) & 0xFF) ==
   21e5c:	8872      	ldrh	r2, [r6, #2]
   21e5e:	b2d2      	uxtb	r2, r2
   21e60:	2af0      	cmp	r2, #240	; 0xf0
   21e62:	d046      	beq.n	21ef2 <net_6lo_compress+0x7fa>
	} else if (((htons(udp->src_port) >> 8) & 0xFF) ==
   21e64:	0a1b      	lsrs	r3, r3, #8
   21e66:	2bf0      	cmp	r3, #240	; 0xf0
   21e68:	d062      	beq.n	21f30 <net_6lo_compress+0x838>
		offset++;
   21e6a:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 4);
   21e6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21e72:	2204      	movs	r2, #4
   21e74:	4631      	mov	r1, r6
   21e76:	fa53 f080 	uxtab	r0, r3, r0
   21e7a:	f7de fa21 	bl	2c0 <memcpy>
		offset += 4;
   21e7e:	f109 0905 	add.w	r9, r9, #5
   21e82:	fa5f f989 	uxtb.w	r9, r9
	memcpy(&IPHC[offset], &udp->chksum, 2);
   21e86:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21e8a:	2202      	movs	r2, #2
   21e8c:	1db1      	adds	r1, r6, #6
   21e8e:	4448      	add	r0, r9
   21e90:	f7de fa16 	bl	2c0 <memcpy>
	offset += 2;
   21e94:	f109 0902 	add.w	r9, r9, #2
   21e98:	fa5f f989 	uxtb.w	r9, r9
		net_udp_set_hdr(pkt, udp);
   21e9c:	4631      	mov	r1, r6
   21e9e:	4620      	mov	r0, r4
   21ea0:	f000 fc74 	bl	2278c <net_udp_set_hdr>
		compressed += NET_UDPH_LEN;
   21ea4:	2630      	movs	r6, #48	; 0x30
   21ea6:	e53e      	b.n	21926 <net_6lo_compress+0x22e>
	    (((htons(udp->dst_port) >> 4) & 0xFFF) ==
   21ea8:	8841      	ldrh	r1, [r0, #2]
   21eaa:	0a0a      	lsrs	r2, r1, #8
   21eac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   21eb0:	f3c2 120b 	ubfx	r2, r2, #4, #12
	    NET_6LO_NHC_UDP_4_BIT_PORT) &&
   21eb4:	f640 710b 	movw	r1, #3851	; 0xf0b
   21eb8:	428a      	cmp	r2, r1
   21eba:	d1cf      	bne.n	21e5c <net_6lo_compress+0x764>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_11;
   21ebc:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21ec0:	f812 3009 	ldrb.w	r3, [r2, r9]
   21ec4:	f043 0303 	orr.w	r3, r3, #3
   21ec8:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   21ecc:	f109 0101 	add.w	r1, r9, #1
   21ed0:	b2c9      	uxtb	r1, r1
		tmp = (u8_t)(htons(udp->src_port));
   21ed2:	8803      	ldrh	r3, [r0, #0]
   21ed4:	0a1b      	lsrs	r3, r3, #8
		tmp = tmp << 4;
   21ed6:	011b      	lsls	r3, r3, #4
   21ed8:	b2db      	uxtb	r3, r3
		tmp |= (((u8_t)(htons(udp->dst_port))) & 0x0F);
   21eda:	8842      	ldrh	r2, [r0, #2]
   21edc:	f3c2 2203 	ubfx	r2, r2, #8, #4
   21ee0:	4313      	orrs	r3, r2
		IPHC[offset++] = tmp;
   21ee2:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21ee6:	f109 0902 	add.w	r9, r9, #2
   21eea:	fa5f f989 	uxtb.w	r9, r9
   21eee:	5453      	strb	r3, [r2, r1]
   21ef0:	e7c9      	b.n	21e86 <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_01;
   21ef2:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21ef6:	f812 3009 	ldrb.w	r3, [r2, r9]
   21efa:	f043 0301 	orr.w	r3, r3, #1
   21efe:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   21f02:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 2);
   21f06:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21f0a:	2202      	movs	r2, #2
   21f0c:	4631      	mov	r1, r6
   21f0e:	fa53 f080 	uxtab	r0, r3, r0
   21f12:	f7de f9d5 	bl	2c0 <memcpy>
		offset += 2;
   21f16:	f109 0303 	add.w	r3, r9, #3
   21f1a:	b2db      	uxtb	r3, r3
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   21f1c:	f8d8 1008 	ldr.w	r1, [r8, #8]
   21f20:	f109 0904 	add.w	r9, r9, #4
   21f24:	fa5f f989 	uxtb.w	r9, r9
   21f28:	8872      	ldrh	r2, [r6, #2]
   21f2a:	0a12      	lsrs	r2, r2, #8
   21f2c:	54ca      	strb	r2, [r1, r3]
   21f2e:	e7aa      	b.n	21e86 <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_10;
   21f30:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21f34:	f812 3009 	ldrb.w	r3, [r2, r9]
   21f38:	f043 0302 	orr.w	r3, r3, #2
   21f3c:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   21f40:	f109 0301 	add.w	r3, r9, #1
   21f44:	fa5f fe83 	uxtb.w	lr, r3
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   21f48:	f109 0002 	add.w	r0, r9, #2
   21f4c:	4631      	mov	r1, r6
   21f4e:	f831 2b02 	ldrh.w	r2, [r1], #2
   21f52:	0a12      	lsrs	r2, r2, #8
   21f54:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21f58:	f803 200e 	strb.w	r2, [r3, lr]
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   21f5c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21f60:	2202      	movs	r2, #2
   21f62:	fa53 f080 	uxtab	r0, r3, r0
   21f66:	f7de f9ab 	bl	2c0 <memcpy>
		offset += 2;
   21f6a:	f109 0904 	add.w	r9, r9, #4
   21f6e:	fa5f f989 	uxtb.w	r9, r9
   21f72:	e788      	b.n	21e86 <net_6lo_compress+0x78e>
		return false;
   21f74:	2000      	movs	r0, #0
   21f76:	f7ff bbe3 	b.w	21740 <net_6lo_compress+0x48>
		return false;
   21f7a:	2000      	movs	r0, #0
   21f7c:	f7ff bbe0 	b.w	21740 <net_6lo_compress+0x48>
	return true;
   21f80:	4628      	mov	r0, r5
		return compress_IPHC_header(pkt, fragment);
   21f82:	f7ff bbdd 	b.w	21740 <net_6lo_compress+0x48>
		return false;
   21f86:	4628      	mov	r0, r5
   21f88:	f7ff bbda 	b.w	21740 <net_6lo_compress+0x48>
	return true;
   21f8c:	2001      	movs	r0, #1
		return compress_ipv6_header(pkt, fragment);
   21f8e:	f7ff bbd7 	b.w	21740 <net_6lo_compress+0x48>

00021f92 <net_6lo_uncompress>:

bool net_6lo_uncompress(struct net_pkt *pkt)
{
   21f92:	b510      	push	{r4, lr}
	NET_ASSERT(pkt && pkt->frags);

	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   21f94:	6883      	ldr	r3, [r0, #8]
   21f96:	689b      	ldr	r3, [r3, #8]
   21f98:	781b      	ldrb	r3, [r3, #0]
   21f9a:	f003 0260 	and.w	r2, r3, #96	; 0x60
   21f9e:	2a60      	cmp	r2, #96	; 0x60
   21fa0:	d005      	beq.n	21fae <net_6lo_uncompress+0x1c>
	    NET_6LO_DISPATCH_IPHC) {
		/* Uncompress IPHC header */
		return uncompress_IPHC_header(pkt);

	} else if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPV6) ==
   21fa2:	f003 0341 	and.w	r3, r3, #65	; 0x41
   21fa6:	2b41      	cmp	r3, #65	; 0x41
   21fa8:	d004      	beq.n	21fb4 <net_6lo_uncompress+0x22>
		return uncompress_ipv6_header(pkt);
	}

	NET_DBG("pkt %p is not compressed", pkt);

	return true;
   21faa:	2001      	movs	r0, #1
}
   21fac:	bd10      	pop	{r4, pc}
		return uncompress_IPHC_header(pkt);
   21fae:	f7ff f873 	bl	21098 <uncompress_IPHC_header>
   21fb2:	bd10      	pop	{r4, pc}
	struct net_buf *frag = pkt->frags;
   21fb4:	6884      	ldr	r4, [r0, #8]
	memmove(frag->data, frag->data + 1, frag->len - 1);
   21fb6:	68a0      	ldr	r0, [r4, #8]
   21fb8:	89a2      	ldrh	r2, [r4, #12]
   21fba:	3a01      	subs	r2, #1
   21fbc:	1c41      	adds	r1, r0, #1
   21fbe:	f007 fb27 	bl	29610 <memmove>
	frag->len -= 1;
   21fc2:	89a3      	ldrh	r3, [r4, #12]
   21fc4:	3b01      	subs	r3, #1
   21fc6:	81a3      	strh	r3, [r4, #12]
		return uncompress_ipv6_header(pkt);
   21fc8:	2001      	movs	r0, #1
   21fca:	bd10      	pop	{r4, pc}

00021fcc <net_route_entry_remove>:
{
   21fcc:	4770      	bx	lr

00021fce <net_route_entries_table_clear>:
{
   21fce:	4770      	bx	lr

00021fd0 <nbr_nexthop_put>:

	return nbr;
}

static int nbr_nexthop_put(struct net_nbr *nbr)
{
   21fd0:	b508      	push	{r3, lr}
	NET_ASSERT(nbr);

	NET_DBG("[%d] nbr %p iface %p", nbr->idx, nbr, nbr->iface);

	net_nbr_unref(nbr);
   21fd2:	f7fc fbd3 	bl	1e77c <net_nbr_unref>

	return 0;
}
   21fd6:	2000      	movs	r0, #0
   21fd8:	bd08      	pop	{r3, pc}
	...

00021fdc <net_route_get_nbr>:
{
   21fdc:	b430      	push	{r4, r5}
   21fde:	4605      	mov	r5, r0
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   21fe0:	2300      	movs	r3, #0
   21fe2:	e000      	b.n	21fe6 <net_route_get_nbr+0xa>
   21fe4:	3301      	adds	r3, #1
   21fe6:	2b07      	cmp	r3, #7
   21fe8:	dc0b      	bgt.n	22002 <net_route_get_nbr+0x26>
	return &net_route_entries_pool[idx].nbr;
   21fea:	4c07      	ldr	r4, [pc, #28]	; (22008 <net_route_get_nbr+0x2c>)
   21fec:	00da      	lsls	r2, r3, #3
   21fee:	1ad2      	subs	r2, r2, r3
   21ff0:	00d1      	lsls	r1, r2, #3
   21ff2:	1860      	adds	r0, r4, r1
		if (!nbr->ref) {
   21ff4:	5c62      	ldrb	r2, [r4, r1]
   21ff6:	2a00      	cmp	r2, #0
   21ff8:	d0f4      	beq.n	21fe4 <net_route_get_nbr+0x8>
		if (nbr->data == (u8_t *)route) {
   21ffa:	68c2      	ldr	r2, [r0, #12]
   21ffc:	42aa      	cmp	r2, r5
   21ffe:	d1f1      	bne.n	21fe4 <net_route_get_nbr+0x8>
   22000:	e000      	b.n	22004 <net_route_get_nbr+0x28>
	return NULL;
   22002:	2000      	movs	r0, #0
}
   22004:	bc30      	pop	{r4, r5}
   22006:	4770      	bx	lr
   22008:	2000c174 	.word	0x2000c174

0002200c <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   2200c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22010:	b083      	sub	sp, #12
   22012:	4606      	mov	r6, r0
   22014:	9101      	str	r1, [sp, #4]
	struct net_route_entry *route, *found = NULL;
	u8_t longest_match = 0;
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   22016:	2400      	movs	r4, #0
	u8_t longest_match = 0;
   22018:	4625      	mov	r5, r4
	struct net_route_entry *route, *found = NULL;
   2201a:	4627      	mov	r7, r4
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   2201c:	e00b      	b.n	22036 <net_route_lookup+0x2a>
	return (struct net_route_entry *)nbr->data;
   2201e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   22022:	00da      	lsls	r2, r3, #3
   22024:	4b3f      	ldr	r3, [pc, #252]	; (22124 <net_route_lookup+0x118>)
   22026:	4413      	add	r3, r2
   22028:	f8d3 800c 	ldr.w	r8, [r3, #12]
			continue;
		}

		route = net_route_data(nbr);

		if (route->prefix_len >= longest_match &&
   2202c:	f898 3020 	ldrb.w	r3, [r8, #32]
   22030:	429d      	cmp	r5, r3
   22032:	d917      	bls.n	22064 <net_route_lookup+0x58>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   22034:	3401      	adds	r4, #1
   22036:	2c07      	cmp	r4, #7
   22038:	dc46      	bgt.n	220c8 <net_route_lookup+0xbc>
   2203a:	f015 0f80 	tst.w	r5, #128	; 0x80
   2203e:	d143      	bne.n	220c8 <net_route_lookup+0xbc>
		if (!nbr->ref) {
   22040:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   22044:	00d3      	lsls	r3, r2, #3
   22046:	4a37      	ldr	r2, [pc, #220]	; (22124 <net_route_lookup+0x118>)
   22048:	5cd3      	ldrb	r3, [r2, r3]
   2204a:	2b00      	cmp	r3, #0
   2204c:	d0f2      	beq.n	22034 <net_route_lookup+0x28>
		if (iface && nbr->iface != iface) {
   2204e:	2e00      	cmp	r6, #0
   22050:	d0e5      	beq.n	2201e <net_route_lookup+0x12>
   22052:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   22056:	00da      	lsls	r2, r3, #3
   22058:	4b32      	ldr	r3, [pc, #200]	; (22124 <net_route_lookup+0x118>)
   2205a:	4413      	add	r3, r2
   2205c:	689b      	ldr	r3, [r3, #8]
   2205e:	429e      	cmp	r6, r3
   22060:	d1e8      	bne.n	22034 <net_route_lookup+0x28>
   22062:	e7dc      	b.n	2201e <net_route_lookup+0x12>
		    net_is_ipv6_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
   22064:	f108 0910 	add.w	r9, r8, #16
	u8_t bits = 128 - length;
   22068:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   2206c:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   22070:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   22074:	2b80      	cmp	r3, #128	; 0x80
   22076:	d906      	bls.n	22086 <net_route_lookup+0x7a>
		return false;
   22078:	2300      	movs	r3, #0
		if (route->prefix_len >= longest_match &&
   2207a:	2b00      	cmp	r3, #0
   2207c:	d0da      	beq.n	22034 <net_route_lookup+0x28>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   2207e:	f898 5020 	ldrb.w	r5, [r8, #32]
			found = route;
   22082:	4647      	mov	r7, r8
   22084:	e7d6      	b.n	22034 <net_route_lookup+0x28>
	if (memcmp(addr1, addr2, bytes)) {
   22086:	465a      	mov	r2, fp
   22088:	4649      	mov	r1, r9
   2208a:	9801      	ldr	r0, [sp, #4]
   2208c:	f007 fa90 	bl	295b0 <memcmp>
   22090:	b9b0      	cbnz	r0, 220c0 <net_route_lookup+0xb4>
	if (!remain) {
   22092:	f1ba 0f00 	cmp.w	sl, #0
   22096:	d015      	beq.n	220c4 <net_route_lookup+0xb8>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   22098:	f1ca 0208 	rsb	r2, sl, #8
   2209c:	23ff      	movs	r3, #255	; 0xff
   2209e:	4093      	lsls	r3, r2
   220a0:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   220a4:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   220a8:	9b01      	ldr	r3, [sp, #4]
   220aa:	f813 300b 	ldrb.w	r3, [r3, fp]
   220ae:	f819 200b 	ldrb.w	r2, [r9, fp]
   220b2:	4053      	eors	r3, r2
   220b4:	ea1a 0f03 	tst.w	sl, r3
   220b8:	bf0c      	ite	eq
   220ba:	2301      	moveq	r3, #1
   220bc:	2300      	movne	r3, #0
   220be:	e7dc      	b.n	2207a <net_route_lookup+0x6e>
		return false;
   220c0:	2300      	movs	r3, #0
   220c2:	e7da      	b.n	2207a <net_route_lookup+0x6e>
		return true;
   220c4:	2301      	movs	r3, #1
   220c6:	e7d8      	b.n	2207a <net_route_lookup+0x6e>
		}
	}

	if (found) {
   220c8:	b1c7      	cbz	r7, 220fc <net_route_lookup+0xf0>
	sys_slist_find_and_remove(&routes, &route->node);
   220ca:	463a      	mov	r2, r7
	return list->head;
   220cc:	4b16      	ldr	r3, [pc, #88]	; (22128 <net_route_lookup+0x11c>)
   220ce:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   220d0:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   220d2:	b16b      	cbz	r3, 220f0 <net_route_lookup+0xe4>
		if (test == node) {
   220d4:	429a      	cmp	r2, r3
   220d6:	d002      	beq.n	220de <net_route_lookup+0xd2>
		prev = test;
   220d8:	4619      	mov	r1, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   220da:	681b      	ldr	r3, [r3, #0]
   220dc:	e7f9      	b.n	220d2 <net_route_lookup+0xc6>
	if (!prev_node) {
   220de:	b189      	cbz	r1, 22104 <net_route_lookup+0xf8>
		prev_node->next = node->next;
   220e0:	683b      	ldr	r3, [r7, #0]
   220e2:	600b      	str	r3, [r1, #0]
		if (list->tail == node) {
   220e4:	4b10      	ldr	r3, [pc, #64]	; (22128 <net_route_lookup+0x11c>)
   220e6:	685b      	ldr	r3, [r3, #4]
   220e8:	429a      	cmp	r2, r3
   220ea:	d014      	beq.n	22116 <net_route_lookup+0x10a>
	node->next = NULL;
   220ec:	2300      	movs	r3, #0
   220ee:	603b      	str	r3, [r7, #0]
	node->next = list->head;
   220f0:	4b0d      	ldr	r3, [pc, #52]	; (22128 <net_route_lookup+0x11c>)
   220f2:	6819      	ldr	r1, [r3, #0]
   220f4:	6039      	str	r1, [r7, #0]
	list->head = node;
   220f6:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
   220f8:	685b      	ldr	r3, [r3, #4]
   220fa:	b17b      	cbz	r3, 2211c <net_route_lookup+0x110>

		update_route_access(found);
	}

	return found;
}
   220fc:	4638      	mov	r0, r7
   220fe:	b003      	add	sp, #12
   22100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		list->head = node->next;
   22104:	6839      	ldr	r1, [r7, #0]
   22106:	4b08      	ldr	r3, [pc, #32]	; (22128 <net_route_lookup+0x11c>)
   22108:	6019      	str	r1, [r3, #0]
		if (list->tail == node) {
   2210a:	685b      	ldr	r3, [r3, #4]
   2210c:	429a      	cmp	r2, r3
   2210e:	d1ed      	bne.n	220ec <net_route_lookup+0xe0>
			list->tail = list->head;
   22110:	4b05      	ldr	r3, [pc, #20]	; (22128 <net_route_lookup+0x11c>)
   22112:	6059      	str	r1, [r3, #4]
   22114:	e7ea      	b.n	220ec <net_route_lookup+0xe0>
			list->tail = prev_node;
   22116:	4b04      	ldr	r3, [pc, #16]	; (22128 <net_route_lookup+0x11c>)
   22118:	6059      	str	r1, [r3, #4]
   2211a:	e7e7      	b.n	220ec <net_route_lookup+0xe0>
		list->tail = list->head;
   2211c:	4b02      	ldr	r3, [pc, #8]	; (22128 <net_route_lookup+0x11c>)
   2211e:	605a      	str	r2, [r3, #4]
	return found;
   22120:	e7ec      	b.n	220fc <net_route_lookup+0xf0>
   22122:	bf00      	nop
   22124:	2000c174 	.word	0x2000c174
   22128:	20001dcc 	.word	0x20001dcc

0002212c <net_route_del>:
int net_route_del(struct net_route_entry *route)
{
	struct net_nbr *nbr;
	struct net_route_nexthop *nexthop_route;

	if (!route) {
   2212c:	2800      	cmp	r0, #0
   2212e:	d046      	beq.n	221be <net_route_del+0x92>
{
   22130:	b538      	push	{r3, r4, r5, lr}
   22132:	4604      	mov	r4, r0
		return -EINVAL;
	}

	sys_slist_find_and_remove(&routes, &route->node);
   22134:	4601      	mov	r1, r0
	return list->head;
   22136:	4b25      	ldr	r3, [pc, #148]	; (221cc <net_route_del+0xa0>)
   22138:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   2213a:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   2213c:	b16b      	cbz	r3, 2215a <net_route_del+0x2e>
		if (test == node) {
   2213e:	4299      	cmp	r1, r3
   22140:	d002      	beq.n	22148 <net_route_del+0x1c>
		prev = test;
   22142:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22144:	681b      	ldr	r3, [r3, #0]
   22146:	e7f9      	b.n	2213c <net_route_del+0x10>
	if (!prev_node) {
   22148:	b1aa      	cbz	r2, 22176 <net_route_del+0x4a>
		prev_node->next = node->next;
   2214a:	6823      	ldr	r3, [r4, #0]
   2214c:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   2214e:	4b1f      	ldr	r3, [pc, #124]	; (221cc <net_route_del+0xa0>)
   22150:	685b      	ldr	r3, [r3, #4]
   22152:	429c      	cmp	r4, r3
   22154:	d018      	beq.n	22188 <net_route_del+0x5c>
	node->next = NULL;
   22156:	2300      	movs	r3, #0
   22158:	6023      	str	r3, [r4, #0]

	nbr = net_route_get_nbr(route);
   2215a:	4620      	mov	r0, r4
   2215c:	f7ff ff3e 	bl	21fdc <net_route_get_nbr>
	if (!nbr) {
   22160:	4605      	mov	r5, r0
   22162:	2800      	cmp	r0, #0
   22164:	d02e      	beq.n	221c4 <net_route_del+0x98>
   22166:	2300      	movs	r3, #0
   22168:	461a      	mov	r2, r3
   2216a:	6881      	ldr	r1, [r0, #8]
   2216c:	4818      	ldr	r0, [pc, #96]	; (221d0 <net_route_del+0xa4>)
   2216e:	f000 f977 	bl	22460 <net_mgmt_event_notify_with_info>
	return list->head;
   22172:	6864      	ldr	r4, [r4, #4]
   22174:	e011      	b.n	2219a <net_route_del+0x6e>
		list->head = node->next;
   22176:	6822      	ldr	r2, [r4, #0]
   22178:	4b14      	ldr	r3, [pc, #80]	; (221cc <net_route_del+0xa0>)
   2217a:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   2217c:	685b      	ldr	r3, [r3, #4]
   2217e:	429c      	cmp	r4, r3
   22180:	d1e9      	bne.n	22156 <net_route_del+0x2a>
			list->tail = list->head;
   22182:	4b12      	ldr	r3, [pc, #72]	; (221cc <net_route_del+0xa0>)
   22184:	605a      	str	r2, [r3, #4]
   22186:	e7e6      	b.n	22156 <net_route_del+0x2a>
			list->tail = prev_node;
   22188:	4b10      	ldr	r3, [pc, #64]	; (221cc <net_route_del+0xa0>)
   2218a:	605a      	str	r2, [r3, #4]
   2218c:	e7e3      	b.n	22156 <net_route_del+0x2a>

	net_route_info("Deleted", route, &route->addr);

	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, nbr->iface);

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   2218e:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22190:	b154      	cbz	r4, 221a8 <net_route_del+0x7c>
	return node->next;
   22192:	6823      	ldr	r3, [r4, #0]
   22194:	b153      	cbz	r3, 221ac <net_route_del+0x80>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22196:	b15a      	cbz	r2, 221b0 <net_route_del+0x84>
	return node->next;
   22198:	6824      	ldr	r4, [r4, #0]
   2219a:	b15c      	cbz	r4, 221b4 <net_route_del+0x88>
		if (!nexthop_route->nbr) {
   2219c:	6860      	ldr	r0, [r4, #4]
   2219e:	2800      	cmp	r0, #0
   221a0:	d0f5      	beq.n	2218e <net_route_del+0x62>
			continue;
		}

		nbr_nexthop_put(nexthop_route->nbr);
   221a2:	f7ff ff15 	bl	21fd0 <nbr_nexthop_put>
   221a6:	e7f2      	b.n	2218e <net_route_del+0x62>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   221a8:	4623      	mov	r3, r4
   221aa:	e7f3      	b.n	22194 <net_route_del+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   221ac:	2400      	movs	r4, #0
   221ae:	e7f4      	b.n	2219a <net_route_del+0x6e>
   221b0:	2400      	movs	r4, #0
   221b2:	e7f2      	b.n	2219a <net_route_del+0x6e>
	net_nbr_unref(nbr);
   221b4:	4628      	mov	r0, r5
   221b6:	f7fc fae1 	bl	1e77c <net_nbr_unref>
	}

	nbr_free(nbr);

	return 0;
   221ba:	2000      	movs	r0, #0
   221bc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   221be:	f06f 0015 	mvn.w	r0, #21
   221c2:	4770      	bx	lr
		return -ENOENT;
   221c4:	f06f 0001 	mvn.w	r0, #1
}
   221c8:	bd38      	pop	{r3, r4, r5, pc}
   221ca:	bf00      	nop
   221cc:	20001dcc 	.word	0x20001dcc
   221d0:	f060000c 	.word	0xf060000c

000221d4 <net_route_get_nexthop>:
struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   221d4:	b1b8      	cbz	r0, 22206 <net_route_get_nexthop+0x32>
	return list->head;
   221d6:	6843      	ldr	r3, [r0, #4]
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   221d8:	b19b      	cbz	r3, 22202 <net_route_get_nexthop+0x2e>
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   221da:	685a      	ldr	r2, [r3, #4]
   221dc:	7851      	ldrb	r1, [r2, #1]
   221de:	29ff      	cmp	r1, #255	; 0xff
   221e0:	d002      	beq.n	221e8 <net_route_get_nexthop+0x14>
   221e2:	68d0      	ldr	r0, [r2, #12]
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
		NET_ASSERT(ipv6_nbr_data);

		addr = &ipv6_nbr_data->addr;
   221e4:	3004      	adds	r0, #4
		NET_ASSERT(addr);

		return addr;
   221e6:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   221e8:	4619      	mov	r1, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   221ea:	b123      	cbz	r3, 221f6 <net_route_get_nexthop+0x22>
	return node->next;
   221ec:	681a      	ldr	r2, [r3, #0]
   221ee:	b132      	cbz	r2, 221fe <net_route_get_nexthop+0x2a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   221f0:	b119      	cbz	r1, 221fa <net_route_get_nexthop+0x26>
	return node->next;
   221f2:	681b      	ldr	r3, [r3, #0]
   221f4:	e7f0      	b.n	221d8 <net_route_get_nexthop+0x4>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   221f6:	461a      	mov	r2, r3
   221f8:	e7f9      	b.n	221ee <net_route_get_nexthop+0x1a>
   221fa:	2300      	movs	r3, #0
   221fc:	e7ec      	b.n	221d8 <net_route_get_nexthop+0x4>
   221fe:	2300      	movs	r3, #0
   22200:	e7ea      	b.n	221d8 <net_route_get_nexthop+0x4>
	}

	return NULL;
   22202:	2000      	movs	r0, #0
   22204:	4770      	bx	lr
		return NULL;
   22206:	2000      	movs	r0, #0
}
   22208:	4770      	bx	lr
	...

0002220c <net_route_foreach>:

int net_route_foreach(net_route_cb_t cb, void *user_data)
{
   2220c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2220e:	4607      	mov	r7, r0
   22210:	460e      	mov	r6, r1
	int i, ret = 0;
   22212:	2500      	movs	r5, #0

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   22214:	462c      	mov	r4, r5
   22216:	e000      	b.n	2221a <net_route_foreach+0xe>
   22218:	3401      	adds	r4, #1
   2221a:	2c07      	cmp	r4, #7
   2221c:	dc0b      	bgt.n	22236 <net_route_foreach+0x2a>
	return (struct net_route_entry *)nbr->data;
   2221e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   22222:	00da      	lsls	r2, r3, #3
   22224:	4b05      	ldr	r3, [pc, #20]	; (2223c <net_route_foreach+0x30>)
   22226:	4413      	add	r3, r2
   22228:	68d8      	ldr	r0, [r3, #12]
		if (!nbr) {
			continue;
		}

		route = net_route_data(nbr);
		if (!route) {
   2222a:	2800      	cmp	r0, #0
   2222c:	d0f4      	beq.n	22218 <net_route_foreach+0xc>
			continue;
		}

		cb(route, user_data);
   2222e:	4631      	mov	r1, r6
   22230:	47b8      	blx	r7

		ret++;
   22232:	3501      	adds	r5, #1
   22234:	e7f0      	b.n	22218 <net_route_foreach+0xc>
	}

	return ret;
}
   22236:	4628      	mov	r0, r5
   22238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2223a:	bf00      	nop
   2223c:	2000c174 	.word	0x2000c174

00022240 <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   22240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22242:	4607      	mov	r7, r0
   22244:	460c      	mov	r4, r1
   22246:	4615      	mov	r5, r2
   22248:	461e      	mov	r6, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   2224a:	f7fd f961 	bl	1f510 <net_ipv6_nbr_lookup>
   2224e:	b120      	cbz	r0, 2225a <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   22250:	2300      	movs	r3, #0
   22252:	602b      	str	r3, [r5, #0]
		*nexthop = dst;
   22254:	6034      	str	r4, [r6, #0]

		return true;
   22256:	2001      	movs	r0, #1
   22258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	*route = net_route_lookup(iface, dst);
   2225a:	4621      	mov	r1, r4
   2225c:	4638      	mov	r0, r7
   2225e:	f7ff fed5 	bl	2200c <net_route_lookup>
   22262:	6028      	str	r0, [r5, #0]
	if (*route) {
   22264:	b130      	cbz	r0, 22274 <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   22266:	f7ff ffb5 	bl	221d4 <net_route_get_nexthop>
   2226a:	6030      	str	r0, [r6, #0]
		if (!*nexthop) {
   2226c:	b108      	cbz	r0, 22272 <net_route_get_info+0x32>
			return false;
		}

		return true;
   2226e:	2001      	movs	r0, #1
   22270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else {
		/* No specific route to this host, use the default
		 * route instead.
		 */
		router = net_if_ipv6_router_find_default(NULL, dst);
   22274:	4621      	mov	r1, r4
   22276:	2000      	movs	r0, #0
   22278:	f7f8 fefe 	bl	1b078 <net_if_ipv6_router_find_default>
		if (!router) {
   2227c:	4603      	mov	r3, r0
   2227e:	b118      	cbz	r0, 22288 <net_route_get_info+0x48>
			return false;
		}

		*nexthop = &router->address.in6_addr;
   22280:	332c      	adds	r3, #44	; 0x2c
   22282:	6033      	str	r3, [r6, #0]

		return true;
   22284:	2001      	movs	r0, #1
   22286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   22288:	2000      	movs	r0, #0
	}

	return false;
}
   2228a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002228c <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   2228c:	b570      	push	{r4, r5, r6, lr}
   2228e:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(net_pkt_iface(pkt), nexthop);
   22290:	6940      	ldr	r0, [r0, #20]
   22292:	f7fd f93d 	bl	1f510 <net_ipv6_nbr_lookup>
	if (!nbr) {
   22296:	b330      	cbz	r0, 222e6 <net_route_packet+0x5a>
		NET_DBG("Cannot find %s neighbor.",
			net_sprint_ipv6_addr(nexthop));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   22298:	7840      	ldrb	r0, [r0, #1]
   2229a:	f7fc fb01 	bl	1e8a0 <net_nbr_get_lladdr>
	if (!lladdr) {
   2229e:	4605      	mov	r5, r0
   222a0:	b320      	cbz	r0, 222ec <net_route_packet+0x60>
		NET_DBG("Cannot find %s neighbor link layer address.",
			net_sprint_ipv6_addr(nexthop));
		return -ESRCH;
	}

	if (!net_pkt_ll_src(pkt)->addr) {
   222a2:	6a20      	ldr	r0, [r4, #32]
   222a4:	b328      	cbz	r0, 222f2 <net_route_packet+0x66>
	}

	/* Sanitycheck: If src and dst ll addresses are going to be same,
	 * then something went wrong in route lookup.
	 */
	if (!memcmp(net_pkt_ll_src(pkt)->addr, lladdr->addr, lladdr->len)) {
   222a6:	1cae      	adds	r6, r5, #2
   222a8:	786a      	ldrb	r2, [r5, #1]
   222aa:	4631      	mov	r1, r6
   222ac:	f007 f980 	bl	295b0 <memcmp>
   222b0:	b310      	cbz	r0, 222f8 <net_route_packet+0x6c>
	pkt->forwarding = forward;
   222b2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   222b6:	f043 0304 	orr.w	r3, r3, #4
   222ba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return net_if_get_link_addr(pkt->iface);
   222be:	6963      	ldr	r3, [r4, #20]
	net_pkt_set_forwarding(pkt, true);

	/* Set the destination and source ll address in the packet.
	 * We set the destination address to be the nexthop recipient.
	 */
	net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   222c0:	691a      	ldr	r2, [r3, #16]
   222c2:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->type = net_pkt_ll_if(pkt)->type;
   222c4:	7d5a      	ldrb	r2, [r3, #21]
   222c6:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   222ca:	7d1b      	ldrb	r3, [r3, #20]
   222cc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   222d0:	62a6      	str	r6, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->type = lladdr->type;
   222d2:	782b      	ldrb	r3, [r5, #0]
   222d4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_ll_dst(pkt)->len = lladdr->len;
   222d8:	786b      	ldrb	r3, [r5, #1]
   222da:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	return net_send_data(pkt);
   222de:	4620      	mov	r0, r4
   222e0:	f7f8 f84a 	bl	1a378 <net_send_data>
   222e4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   222e6:	f06f 0001 	mvn.w	r0, #1
   222ea:	bd70      	pop	{r4, r5, r6, pc}
		return -ESRCH;
   222ec:	f06f 0002 	mvn.w	r0, #2
   222f0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   222f2:	f06f 0015 	mvn.w	r0, #21
   222f6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   222f8:	f06f 0015 	mvn.w	r0, #21
}
   222fc:	bd70      	pop	{r4, r5, r6, pc}

000222fe <net_route_init>:

void net_route_init(void)
{
   222fe:	4770      	bx	lr

00022300 <mgmt_thread>:
			  K_THREAD_STACK_SIZEOF(mgmt_stack));
#endif
}

static void mgmt_thread(void)
{
   22300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22302:	e079      	b.n	223f8 <mgmt_thread+0xf8>
		out_event = 0;
   22304:	2100      	movs	r1, #0
   22306:	4a48      	ldr	r2, [pc, #288]	; (22428 <mgmt_thread+0x128>)
   22308:	8011      	strh	r1, [r2, #0]
   2230a:	e089      	b.n	22420 <mgmt_thread+0x120>
		return NULL;
   2230c:	2600      	movs	r6, #0
		k_sem_take(&network_event, K_FOREVER);

		NET_DBG("Handling events, forwarding it relevantly");

		mgmt_event = mgmt_pop_event();
		if (!mgmt_event) {
   2230e:	b13e      	cbz	r6, 22320 <mgmt_thread+0x20>
	return list->head;
   22310:	4b46      	ldr	r3, [pc, #280]	; (2242c <mgmt_thread+0x12c>)
   22312:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22314:	b15d      	cbz	r5, 2232e <mgmt_thread+0x2e>
   22316:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22318:	b105      	cbz	r5, 2231c <mgmt_thread+0x1c>
	return node->next;
   2231a:	682c      	ldr	r4, [r5, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2231c:	2700      	movs	r7, #0
   2231e:	e01f      	b.n	22360 <mgmt_thread+0x60>
   22320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22324:	2100      	movs	r1, #0
   22326:	4842      	ldr	r0, [pc, #264]	; (22430 <mgmt_thread+0x130>)
   22328:	f006 f9fa 	bl	28720 <_impl_k_sem_init>
			NET_DBG("Some event got probably lost (%u)",
				k_sem_count_get(&network_event));

			k_sem_init(&network_event, 0, UINT_MAX);

			continue;
   2232c:	e064      	b.n	223f8 <mgmt_thread+0xf8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   2232e:	462c      	mov	r4, r5
   22330:	e7f4      	b.n	2231c <mgmt_thread+0x1c>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
   22332:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   22336:	d04c      	beq.n	223d2 <mgmt_thread+0xd2>
			struct mgmt_event_wait *sync_data =
   22338:	686a      	ldr	r2, [r5, #4]
			if (sync_data->iface &&
   2233a:	6993      	ldr	r3, [r2, #24]
   2233c:	2b00      	cmp	r3, #0
   2233e:	d02c      	beq.n	2239a <mgmt_thread+0x9a>
			    sync_data->iface != mgmt_event->iface) {
   22340:	6870      	ldr	r0, [r6, #4]
			if (sync_data->iface &&
   22342:	4283      	cmp	r3, r0
   22344:	d029      	beq.n	2239a <mgmt_thread+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22346:	2c00      	cmp	r4, #0
   22348:	d04b      	beq.n	223e2 <mgmt_thread+0xe2>
   2234a:	4622      	mov	r2, r4
   2234c:	2c00      	cmp	r4, #0
   2234e:	d046      	beq.n	223de <mgmt_thread+0xde>
	return node->next;
   22350:	6823      	ldr	r3, [r4, #0]
   22352:	2b00      	cmp	r3, #0
   22354:	d047      	beq.n	223e6 <mgmt_thread+0xe6>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22356:	2a00      	cmp	r2, #0
   22358:	d047      	beq.n	223ea <mgmt_thread+0xea>
	return node->next;
   2235a:	6823      	ldr	r3, [r4, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2235c:	4625      	mov	r5, r4
   2235e:	461c      	mov	r4, r3
   22360:	2d00      	cmp	r5, #0
   22362:	d044      	beq.n	223ee <mgmt_thread+0xee>
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   22364:	6831      	ldr	r1, [r6, #0]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   22366:	68aa      	ldr	r2, [r5, #8]
   22368:	0f13      	lsrs	r3, r2, #28
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   2236a:	ea03 7311 	and.w	r3, r3, r1, lsr #28
   2236e:	f013 0f03 	tst.w	r3, #3
   22372:	d0e8      	beq.n	22346 <mgmt_thread+0x46>
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   22374:	0c13      	lsrs	r3, r2, #16
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) &
   22376:	ea03 4311 	and.w	r3, r3, r1, lsr #16
   2237a:	f3c3 030a 	ubfx	r3, r3, #0, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   2237e:	2b00      	cmp	r3, #0
   22380:	d0e1      	beq.n	22346 <mgmt_thread+0x46>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   22382:	b28b      	uxth	r3, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   22384:	2b00      	cmp	r3, #0
   22386:	d0d4      	beq.n	22332 <mgmt_thread+0x32>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   22388:	b293      	uxth	r3, r2
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   2238a:	2b00      	cmp	r3, #0
   2238c:	d0d1      	beq.n	22332 <mgmt_thread+0x32>
		     !(NET_MGMT_GET_COMMAND(mgmt_event->event) &
   2238e:	ea01 0302 	and.w	r3, r1, r2
   22392:	b29b      	uxth	r3, r3
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   22394:	2b00      	cmp	r3, #0
   22396:	d0d6      	beq.n	22346 <mgmt_thread+0x46>
   22398:	e7cb      	b.n	22332 <mgmt_thread+0x32>
			cb->raised_event = mgmt_event->event;
   2239a:	60a9      	str	r1, [r5, #8]
			sync_data->iface = mgmt_event->iface;
   2239c:	6873      	ldr	r3, [r6, #4]
   2239e:	6193      	str	r3, [r2, #24]
	if (!prev_node) {
   223a0:	b15f      	cbz	r7, 223ba <mgmt_thread+0xba>
		prev_node->next = node->next;
   223a2:	682b      	ldr	r3, [r5, #0]
   223a4:	603b      	str	r3, [r7, #0]
		if (list->tail == node) {
   223a6:	4b21      	ldr	r3, [pc, #132]	; (2242c <mgmt_thread+0x12c>)
   223a8:	685b      	ldr	r3, [r3, #4]
   223aa:	429d      	cmp	r5, r3
   223ac:	d00e      	beq.n	223cc <mgmt_thread+0xcc>
	node->next = NULL;
   223ae:	2300      	movs	r3, #0
   223b0:	602b      	str	r3, [r5, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   223b2:	6868      	ldr	r0, [r5, #4]
   223b4:	f006 f9bd 	bl	28732 <_impl_k_sem_give>
   223b8:	e7c5      	b.n	22346 <mgmt_thread+0x46>
		list->head = node->next;
   223ba:	682a      	ldr	r2, [r5, #0]
   223bc:	4b1b      	ldr	r3, [pc, #108]	; (2242c <mgmt_thread+0x12c>)
   223be:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   223c0:	685b      	ldr	r3, [r3, #4]
   223c2:	429d      	cmp	r5, r3
   223c4:	d1f3      	bne.n	223ae <mgmt_thread+0xae>
			list->tail = list->head;
   223c6:	4b19      	ldr	r3, [pc, #100]	; (2242c <mgmt_thread+0x12c>)
   223c8:	605a      	str	r2, [r3, #4]
   223ca:	e7f0      	b.n	223ae <mgmt_thread+0xae>
			list->tail = prev_node;
   223cc:	4b17      	ldr	r3, [pc, #92]	; (2242c <mgmt_thread+0x12c>)
   223ce:	605f      	str	r7, [r3, #4]
   223d0:	e7ed      	b.n	223ae <mgmt_thread+0xae>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   223d2:	686b      	ldr	r3, [r5, #4]
   223d4:	6872      	ldr	r2, [r6, #4]
   223d6:	4628      	mov	r0, r5
   223d8:	4798      	blx	r3
			prev = &cb->node;
   223da:	462f      	mov	r7, r5
   223dc:	e7b3      	b.n	22346 <mgmt_thread+0x46>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   223de:	4623      	mov	r3, r4
   223e0:	e7b7      	b.n	22352 <mgmt_thread+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   223e2:	4623      	mov	r3, r4
   223e4:	e7ba      	b.n	2235c <mgmt_thread+0x5c>
   223e6:	2300      	movs	r3, #0
   223e8:	e7b8      	b.n	2235c <mgmt_thread+0x5c>
   223ea:	2300      	movs	r3, #0
   223ec:	e7b6      	b.n	2235c <mgmt_thread+0x5c>
	mgmt_event->event = 0;
   223ee:	2300      	movs	r3, #0
   223f0:	6033      	str	r3, [r6, #0]
	mgmt_event->iface = NULL;
   223f2:	6073      	str	r3, [r6, #4]
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   223f4:	f006 f844 	bl	28480 <_impl_k_yield>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   223f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   223fc:	480c      	ldr	r0, [pc, #48]	; (22430 <mgmt_thread+0x130>)
   223fe:	f006 f9ab 	bl	28758 <_impl_k_sem_take>
	if (!events[out_event].event) {
   22402:	4b09      	ldr	r3, [pc, #36]	; (22428 <mgmt_thread+0x128>)
   22404:	881b      	ldrh	r3, [r3, #0]
   22406:	4a0b      	ldr	r2, [pc, #44]	; (22434 <mgmt_thread+0x134>)
   22408:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   2240c:	2a00      	cmp	r2, #0
   2240e:	f43f af7d 	beq.w	2230c <mgmt_thread+0xc>
	out_event++;
   22412:	1c5a      	adds	r2, r3, #1
   22414:	b292      	uxth	r2, r2
   22416:	4904      	ldr	r1, [pc, #16]	; (22428 <mgmt_thread+0x128>)
   22418:	800a      	strh	r2, [r1, #0]
	if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   2241a:	2a02      	cmp	r2, #2
   2241c:	f43f af72 	beq.w	22304 <mgmt_thread+0x4>
	return &events[o_idx];
   22420:	4e04      	ldr	r6, [pc, #16]	; (22434 <mgmt_thread+0x134>)
   22422:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   22426:	e772      	b.n	2230e <mgmt_thread+0xe>
   22428:	20001e5c 	.word	0x20001e5c
   2242c:	20001dd4 	.word	0x20001dd4
   22430:	2000cf2c 	.word	0x2000cf2c
   22434:	20001ddc 	.word	0x20001ddc

00022438 <net_mgmt_add_event_callback>:
	node->next = list->head;
   22438:	4b07      	ldr	r3, [pc, #28]	; (22458 <net_mgmt_add_event_callback+0x20>)
   2243a:	681a      	ldr	r2, [r3, #0]
   2243c:	6002      	str	r2, [r0, #0]
	list->head = node;
   2243e:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   22440:	685b      	ldr	r3, [r3, #4]
   22442:	b12b      	cbz	r3, 22450 <net_mgmt_add_event_callback+0x18>
{
	NET_DBG("Adding event callback %p", cb);

	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);
   22444:	6881      	ldr	r1, [r0, #8]
	global_event_mask |= event_mask;
   22446:	4a05      	ldr	r2, [pc, #20]	; (2245c <net_mgmt_add_event_callback+0x24>)
   22448:	6813      	ldr	r3, [r2, #0]
   2244a:	430b      	orrs	r3, r1
   2244c:	6013      	str	r3, [r2, #0]
   2244e:	4770      	bx	lr
		list->tail = list->head;
   22450:	4b01      	ldr	r3, [pc, #4]	; (22458 <net_mgmt_add_event_callback+0x20>)
   22452:	6058      	str	r0, [r3, #4]
   22454:	e7f6      	b.n	22444 <net_mgmt_add_event_callback+0xc>
   22456:	bf00      	nop
   22458:	20001dd4 	.word	0x20001dd4
   2245c:	20001dec 	.word	0x20001dec

00022460 <net_mgmt_event_notify_with_info>:
	return ((mgmt_event & global_event_mask) == mgmt_event);
   22460:	4b17      	ldr	r3, [pc, #92]	; (224c0 <net_mgmt_event_notify_with_info+0x60>)
   22462:	681b      	ldr	r3, [r3, #0]
}

void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length)
{
	if (mgmt_is_event_handled(mgmt_event)) {
   22464:	ea30 0303 	bics.w	r3, r0, r3
   22468:	d000      	beq.n	2246c <net_mgmt_event_notify_with_info+0xc>
   2246a:	4770      	bx	lr
{
   2246c:	b510      	push	{r4, lr}
	events[in_event].event = mgmt_event;
   2246e:	4c15      	ldr	r4, [pc, #84]	; (224c4 <net_mgmt_event_notify_with_info+0x64>)
   22470:	8823      	ldrh	r3, [r4, #0]
   22472:	4a15      	ldr	r2, [pc, #84]	; (224c8 <net_mgmt_event_notify_with_info+0x68>)
   22474:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
	events[in_event].iface = iface;
   22478:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2247c:	6051      	str	r1, [r2, #4]
	in_event++;
   2247e:	3301      	adds	r3, #1
   22480:	b29b      	uxth	r3, r3
   22482:	8023      	strh	r3, [r4, #0]
	if (in_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   22484:	2b02      	cmp	r3, #2
   22486:	d009      	beq.n	2249c <net_mgmt_event_notify_with_info+0x3c>
	if (in_event == out_event) {
   22488:	4b0e      	ldr	r3, [pc, #56]	; (224c4 <net_mgmt_event_notify_with_info+0x64>)
   2248a:	881a      	ldrh	r2, [r3, #0]
   2248c:	4b0f      	ldr	r3, [pc, #60]	; (224cc <net_mgmt_event_notify_with_info+0x6c>)
   2248e:	881b      	ldrh	r3, [r3, #0]
   22490:	429a      	cmp	r2, r3
   22492:	d006      	beq.n	224a2 <net_mgmt_event_notify_with_info+0x42>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   22494:	480e      	ldr	r0, [pc, #56]	; (224d0 <net_mgmt_event_notify_with_info+0x70>)
   22496:	f006 f94c 	bl	28732 <_impl_k_sem_give>
   2249a:	bd10      	pop	{r4, pc}
		in_event = 0;
   2249c:	2200      	movs	r2, #0
   2249e:	8022      	strh	r2, [r4, #0]
   224a0:	e7f2      	b.n	22488 <net_mgmt_event_notify_with_info+0x28>
		u16_t o_idx = out_event + 1;
   224a2:	3301      	adds	r3, #1
   224a4:	b29b      	uxth	r3, r3
		if (o_idx == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   224a6:	2b02      	cmp	r3, #2
   224a8:	d007      	beq.n	224ba <net_mgmt_event_notify_with_info+0x5a>
		if (events[o_idx].event) {
   224aa:	4a07      	ldr	r2, [pc, #28]	; (224c8 <net_mgmt_event_notify_with_info+0x68>)
   224ac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   224b0:	2a00      	cmp	r2, #0
   224b2:	d0ef      	beq.n	22494 <net_mgmt_event_notify_with_info+0x34>
			out_event = o_idx;
   224b4:	4a05      	ldr	r2, [pc, #20]	; (224cc <net_mgmt_event_notify_with_info+0x6c>)
   224b6:	8013      	strh	r3, [r2, #0]
   224b8:	e7ec      	b.n	22494 <net_mgmt_event_notify_with_info+0x34>
			o_idx = 0;
   224ba:	2300      	movs	r3, #0
   224bc:	e7f5      	b.n	224aa <net_mgmt_event_notify_with_info+0x4a>
   224be:	bf00      	nop
   224c0:	20001dec 	.word	0x20001dec
   224c4:	20001df0 	.word	0x20001df0
   224c8:	20001ddc 	.word	0x20001ddc
   224cc:	20001e5c 	.word	0x20001e5c
   224d0:	2000cf2c 	.word	0x2000cf2c

000224d4 <net_mgmt_event_init>:
	return mgmt_event_wait_call(iface, mgmt_event_mask,
				    raised_event, NULL, info, timeout);
}

void net_mgmt_event_init(void)
{
   224d4:	b510      	push	{r4, lr}
   224d6:	b086      	sub	sp, #24
	list->head = NULL;
   224d8:	4b0f      	ldr	r3, [pc, #60]	; (22518 <net_mgmt_event_init+0x44>)
   224da:	2400      	movs	r4, #0
   224dc:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   224de:	605c      	str	r4, [r3, #4]
	sys_slist_init(&event_callbacks);
	global_event_mask = 0;
   224e0:	4b0e      	ldr	r3, [pc, #56]	; (2251c <net_mgmt_event_init+0x48>)
   224e2:	601c      	str	r4, [r3, #0]

	in_event = 0;
   224e4:	4b0e      	ldr	r3, [pc, #56]	; (22520 <net_mgmt_event_init+0x4c>)
   224e6:	801c      	strh	r4, [r3, #0]
	out_event = 0;
   224e8:	4b0e      	ldr	r3, [pc, #56]	; (22524 <net_mgmt_event_init+0x50>)
   224ea:	801c      	strh	r4, [r3, #0]

	memset(events, 0,
   224ec:	2210      	movs	r2, #16
   224ee:	4621      	mov	r1, r4
   224f0:	480d      	ldr	r0, [pc, #52]	; (22528 <net_mgmt_event_init+0x54>)
   224f2:	f007 f8f1 	bl	296d8 <memset>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   224f6:	9405      	str	r4, [sp, #20]
   224f8:	9404      	str	r4, [sp, #16]
   224fa:	f06f 0308 	mvn.w	r3, #8
   224fe:	9303      	str	r3, [sp, #12]
   22500:	9402      	str	r4, [sp, #8]
   22502:	9401      	str	r4, [sp, #4]
   22504:	9400      	str	r4, [sp, #0]
   22506:	4b09      	ldr	r3, [pc, #36]	; (2252c <net_mgmt_event_init+0x58>)
   22508:	f44f 7200 	mov.w	r2, #512	; 0x200
   2250c:	4908      	ldr	r1, [pc, #32]	; (22530 <net_mgmt_event_init+0x5c>)
   2250e:	4809      	ldr	r0, [pc, #36]	; (22534 <net_mgmt_event_init+0x60>)
   22510:	f006 fb8e 	bl	28c30 <_impl_k_thread_create>
			K_PRIO_COOP(CONFIG_NET_MGMT_EVENT_THREAD_PRIO), 0, 0);

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
   22514:	b006      	add	sp, #24
   22516:	bd10      	pop	{r4, pc}
   22518:	20001dd4 	.word	0x20001dd4
   2251c:	20001dec 	.word	0x20001dec
   22520:	20001df0 	.word	0x20001df0
   22524:	20001e5c 	.word	0x20001e5c
   22528:	20001ddc 	.word	0x20001ddc
   2252c:	00022301 	.word	0x00022301
   22530:	200097c0 	.word	0x200097c0
   22534:	20001df4 	.word	0x20001df4

00022538 <net_udp_insert_raw>:

struct net_pkt *net_udp_insert_raw(struct net_pkt *pkt,
				   u16_t offset,
				   u16_t src_port,
				   u16_t dst_port)
{
   22538:	b5f0      	push	{r4, r5, r6, r7, lr}
   2253a:	b085      	sub	sp, #20
   2253c:	4605      	mov	r5, r0
   2253e:	f8ad 2006 	strh.w	r2, [sp, #6]
   22542:	f8ad 3004 	strh.w	r3, [sp, #4]
	struct net_buf *frag, *prev, *udp;
	u16_t pos;

	frag = net_frag_get_pos(pkt, offset, &pos);
   22546:	f10d 020e 	add.w	r2, sp, #14
   2254a:	f7fa fde5 	bl	1d118 <net_frag_get_pos>
	if (!frag && pos == 0xffff) {
   2254e:	4602      	mov	r2, r0
   22550:	b168      	cbz	r0, 2256e <net_udp_insert_raw+0x36>
	}

	/* We can only insert the UDP header between existing two
	 * fragments.
	 */
	if (frag && pos != 0) {
   22552:	b11a      	cbz	r2, 2255c <net_udp_insert_raw+0x24>
   22554:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   22558:	2b00      	cmp	r3, #0
   2255a:	d15c      	bne.n	22616 <net_udp_insert_raw+0xde>
		NET_DBG("Cannot insert UDP data into offset %d", offset);
		return NULL;
	}

	if (pkt->frags != frag) {
   2255c:	68ab      	ldr	r3, [r5, #8]
   2255e:	429a      	cmp	r2, r3
   22560:	d00d      	beq.n	2257e <net_udp_insert_raw+0x46>
		struct net_buf *tmp = pkt->frags;

		prev = NULL;

		while (tmp->frags) {
   22562:	681c      	ldr	r4, [r3, #0]
   22564:	b174      	cbz	r4, 22584 <net_udp_insert_raw+0x4c>
			if (tmp->frags == frag) {
   22566:	42a2      	cmp	r2, r4
   22568:	d00b      	beq.n	22582 <net_udp_insert_raw+0x4a>
				prev = tmp;
				break;
			}

			tmp = tmp->frags;
   2256a:	4623      	mov	r3, r4
   2256c:	e7f9      	b.n	22562 <net_udp_insert_raw+0x2a>
	if (!frag && pos == 0xffff) {
   2256e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   22572:	f64f 73ff 	movw	r3, #65535	; 0xffff
   22576:	4299      	cmp	r1, r3
   22578:	d1eb      	bne.n	22552 <net_udp_insert_raw+0x1a>
		return NULL;
   2257a:	2000      	movs	r0, #0
   2257c:	e049      	b.n	22612 <net_udp_insert_raw+0xda>
		}
	} else {
		prev = pkt->frags;
   2257e:	461c      	mov	r4, r3
   22580:	e000      	b.n	22584 <net_udp_insert_raw+0x4c>
				prev = tmp;
   22582:	461c      	mov	r4, r3
	}

	if (!prev) {
   22584:	2c00      	cmp	r4, #0
   22586:	d048      	beq.n	2261a <net_udp_insert_raw+0xe2>
		goto fail;
	}

	udp = net_pkt_get_frag(pkt, PKT_WAIT_TIME);
   22588:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2258c:	4628      	mov	r0, r5
   2258e:	f7fa faa1 	bl	1cad4 <net_pkt_get_frag>
	if (!udp) {
   22592:	4607      	mov	r7, r0
   22594:	2800      	cmp	r0, #0
   22596:	d042      	beq.n	2261e <net_udp_insert_raw+0xe6>
		goto fail;
	}

	/* Source and destination ports are already in network byte order */
	net_buf_add_mem(udp, &src_port, sizeof(src_port));
   22598:	f100 0608 	add.w	r6, r0, #8
   2259c:	2202      	movs	r2, #2
   2259e:	f10d 0106 	add.w	r1, sp, #6
   225a2:	4630      	mov	r0, r6
   225a4:	f7f7 fdcc 	bl	1a140 <net_buf_simple_add_mem>
	net_buf_add_mem(udp, &dst_port, sizeof(dst_port));
   225a8:	2202      	movs	r2, #2
   225aa:	a901      	add	r1, sp, #4
   225ac:	4630      	mov	r0, r6
   225ae:	f7f7 fdc7 	bl	1a140 <net_buf_simple_add_mem>
	return net_buf_frags_len(pkt->frags);
   225b2:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   225b4:	2200      	movs	r2, #0
   225b6:	e002      	b.n	225be <net_udp_insert_raw+0x86>
		bytes += buf->len;
   225b8:	8999      	ldrh	r1, [r3, #12]
   225ba:	440a      	add	r2, r1
		buf = buf->frags;
   225bc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   225be:	2b00      	cmp	r3, #0
   225c0:	d1fa      	bne.n	225b8 <net_udp_insert_raw+0x80>

	net_buf_add_be16(udp, net_pkt_get_len(pkt) -
   225c2:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   225c6:	1a51      	subs	r1, r2, r1
   225c8:	b289      	uxth	r1, r1
   225ca:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
   225ce:	1a89      	subs	r1, r1, r2
   225d0:	b289      	uxth	r1, r1
   225d2:	3108      	adds	r1, #8
   225d4:	b289      	uxth	r1, r1
   225d6:	4630      	mov	r0, r6
   225d8:	f7f7 fdd2 	bl	1a180 <net_buf_simple_add_be16>
			 net_pkt_ip_hdr_len(pkt) -
			 net_pkt_ipv6_ext_len(pkt) +
			 sizeof(struct net_udp_hdr));

	net_buf_add_be16(udp, 0); /* chksum */
   225dc:	2100      	movs	r1, #0
   225de:	4630      	mov	r0, r6
   225e0:	f7f7 fdce 	bl	1a180 <net_buf_simple_add_be16>

	net_buf_frag_insert(prev, udp);
   225e4:	4639      	mov	r1, r7
   225e6:	4620      	mov	r0, r4
   225e8:	f7f7 fd7e 	bl	1a0e8 <net_buf_frag_insert>

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   225ec:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   225f0:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   225f4:	4419      	add	r1, r3
   225f6:	3108      	adds	r1, #8
   225f8:	f10d 020e 	add.w	r2, sp, #14
   225fc:	b289      	uxth	r1, r1
   225fe:	4628      	mov	r0, r5
   22600:	f7fa fd8a 	bl	1d118 <net_frag_get_pos>
				sizeof(struct net_udp_hdr),
				&pos);
	if (frag) {
   22604:	b168      	cbz	r0, 22622 <net_udp_insert_raw+0xea>
		net_pkt_set_appdata(pkt, frag->data + pos);
   22606:	6883      	ldr	r3, [r0, #8]
   22608:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2260c:	4413      	add	r3, r2
	pkt->appdata = data;
   2260e:	61ab      	str	r3, [r5, #24]
	}

	return pkt;
   22610:	4628      	mov	r0, r5

fail:
	NET_DBG("Cannot insert UDP header into %p", pkt);
	return NULL;
}
   22612:	b005      	add	sp, #20
   22614:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   22616:	2000      	movs	r0, #0
   22618:	e7fb      	b.n	22612 <net_udp_insert_raw+0xda>
	return NULL;
   2261a:	2000      	movs	r0, #0
   2261c:	e7f9      	b.n	22612 <net_udp_insert_raw+0xda>
   2261e:	2000      	movs	r0, #0
   22620:	e7f7      	b.n	22612 <net_udp_insert_raw+0xda>
	return pkt;
   22622:	4628      	mov	r0, r5
   22624:	e7f5      	b.n	22612 <net_udp_insert_raw+0xda>

00022626 <net_udp_set_chksum>:

struct net_buf *net_udp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   22626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2262a:	b086      	sub	sp, #24
   2262c:	4606      	mov	r6, r0
   2262e:	460d      	mov	r5, r1
	struct net_udp_hdr *hdr;
	u16_t chksum = 0;
   22630:	2300      	movs	r3, #0
   22632:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   22636:	f7fa fda5 	bl	1d184 <net_pkt_udp_data>
   2263a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2263c:	2208      	movs	r2, #8
   2263e:	4601      	mov	r1, r0
   22640:	4630      	mov	r0, r6
   22642:	f7fb f95d 	bl	1d900 <net_header_fits>
   22646:	b170      	cbz	r0, 22666 <net_udp_set_chksum+0x40>
		return hdr;
   22648:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   2264a:	b173      	cbz	r3, 2266a <net_udp_set_chksum+0x44>
		hdr->chksum = 0;
   2264c:	2300      	movs	r3, #0
   2264e:	71a3      	strb	r3, [r4, #6]
   22650:	71e3      	strb	r3, [r4, #7]
	return net_calc_chksum(pkt, IPPROTO_UDP);
   22652:	2111      	movs	r1, #17
   22654:	4630      	mov	r0, r6
   22656:	f7fb f8fa 	bl	1d84e <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_udp(pkt);
   2265a:	43c0      	mvns	r0, r0
   2265c:	80e0      	strh	r0, [r4, #6]

		return frag;
   2265e:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   22660:	b006      	add	sp, #24
   22662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   22666:	2300      	movs	r3, #0
   22668:	e7ef      	b.n	2264a <net_udp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   2266a:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   2266e:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   22672:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   22674:	3206      	adds	r2, #6
   22676:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   2267a:	f8cd 8008 	str.w	r8, [sp, #8]
   2267e:	f10d 0416 	add.w	r4, sp, #22
   22682:	9401      	str	r4, [sp, #4]
   22684:	2702      	movs	r7, #2
   22686:	9700      	str	r7, [sp, #0]
   22688:	ab05      	add	r3, sp, #20
   2268a:	b292      	uxth	r2, r2
   2268c:	4629      	mov	r1, r5
   2268e:	4630      	mov	r0, r6
   22690:	f7fa fc63 	bl	1cf5a <net_pkt_write>
   22694:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_UDP);
   22696:	2111      	movs	r1, #17
   22698:	4630      	mov	r0, r6
   2269a:	f7fb f8d8 	bl	1d84e <net_calc_chksum>
	chksum = ~net_calc_chksum_udp(pkt);
   2269e:	43c0      	mvns	r0, r0
   226a0:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   226a4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   226a8:	3a02      	subs	r2, #2
   226aa:	f8cd 8008 	str.w	r8, [sp, #8]
   226ae:	9401      	str	r4, [sp, #4]
   226b0:	9700      	str	r7, [sp, #0]
   226b2:	ab05      	add	r3, sp, #20
   226b4:	b292      	uxth	r2, r2
   226b6:	4629      	mov	r1, r5
   226b8:	4630      	mov	r0, r6
   226ba:	f7fa fc4e 	bl	1cf5a <net_pkt_write>
	return frag;
   226be:	e7cf      	b.n	22660 <net_udp_set_chksum+0x3a>

000226c0 <net_udp_get_chksum>:

u16_t net_udp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   226c0:	b570      	push	{r4, r5, r6, lr}
   226c2:	b084      	sub	sp, #16
   226c4:	4605      	mov	r5, r0
   226c6:	460e      	mov	r6, r1
	struct net_udp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   226c8:	f7fa fd5c 	bl	1d184 <net_pkt_udp_data>
   226cc:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   226ce:	2208      	movs	r2, #8
   226d0:	4601      	mov	r1, r0
   226d2:	4628      	mov	r0, r5
   226d4:	f7fb f914 	bl	1d900 <net_header_fits>
   226d8:	b120      	cbz	r0, 226e4 <net_udp_get_chksum+0x24>
		return hdr;
   226da:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   226dc:	b123      	cbz	r3, 226e8 <net_udp_get_chksum+0x28>
		return hdr->chksum;
   226de:	88e0      	ldrh	r0, [r4, #6]
			     2 + 2 + 2 /* src + dst + len */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   226e0:	b004      	add	sp, #16
   226e2:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   226e4:	2300      	movs	r3, #0
   226e6:	e7f9      	b.n	226dc <net_udp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   226e8:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   226ec:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   226f0:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   226f2:	3106      	adds	r1, #6
   226f4:	f10d 030e 	add.w	r3, sp, #14
   226f8:	9300      	str	r3, [sp, #0]
   226fa:	2302      	movs	r3, #2
   226fc:	aa03      	add	r2, sp, #12
   226fe:	b289      	uxth	r1, r1
   22700:	4630      	mov	r0, r6
   22702:	f7fa fbb8 	bl	1ce76 <net_frag_read>
	return chksum;
   22706:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   2270a:	e7e9      	b.n	226e0 <net_udp_get_chksum+0x20>

0002270c <net_udp_get_hdr>:

struct net_udp_hdr *net_udp_get_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   2270c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2270e:	b085      	sub	sp, #20
   22710:	4605      	mov	r5, r0
   22712:	460f      	mov	r7, r1
	struct net_udp_hdr *udp_hdr;
	struct net_buf *frag;
	u16_t pos;

	udp_hdr = net_pkt_udp_data(pkt);
   22714:	f7fa fd36 	bl	1d184 <net_pkt_udp_data>
   22718:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2271a:	2208      	movs	r2, #8
   2271c:	4601      	mov	r1, r0
   2271e:	4628      	mov	r0, r5
   22720:	f7fb f8ee 	bl	1d900 <net_header_fits>
   22724:	b120      	cbz	r0, 22730 <net_udp_get_hdr+0x24>
		return hdr;
   22726:	4626      	mov	r6, r4
	if (net_udp_header_fits(pkt, udp_hdr)) {
   22728:	b126      	cbz	r6, 22734 <net_udp_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   2272a:	4620      	mov	r0, r4
   2272c:	b005      	add	sp, #20
   2272e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   22730:	2600      	movs	r6, #0
   22732:	e7f9      	b.n	22728 <net_udp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   22734:	68a8      	ldr	r0, [r5, #8]
   22736:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   2273a:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2273e:	9700      	str	r7, [sp, #0]
   22740:	2302      	movs	r3, #2
   22742:	f10d 020e 	add.w	r2, sp, #14
   22746:	4421      	add	r1, r4
   22748:	f7fa fb95 	bl	1ce76 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   2274c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   22750:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   22752:	9300      	str	r3, [sp, #0]
   22754:	2302      	movs	r3, #2
   22756:	f10d 020e 	add.w	r2, sp, #14
   2275a:	f7fa fb8c 	bl	1ce76 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   2275e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->len);
   22762:	1d3b      	adds	r3, r7, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   22764:	9300      	str	r3, [sp, #0]
   22766:	2302      	movs	r3, #2
   22768:	f10d 020e 	add.w	r2, sp, #14
   2276c:	f7fa fb83 	bl	1ce76 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   22770:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   22774:	1dbb      	adds	r3, r7, #6
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   22776:	9300      	str	r3, [sp, #0]
   22778:	2302      	movs	r3, #2
   2277a:	f10d 020e 	add.w	r2, sp, #14
   2277e:	f7fa fb7a 	bl	1ce76 <net_frag_read>
	if (!frag) {
   22782:	b108      	cbz	r0, 22788 <net_udp_get_hdr+0x7c>
	return hdr;
   22784:	463c      	mov	r4, r7
   22786:	e7d0      	b.n	2272a <net_udp_get_hdr+0x1e>
		return NULL;
   22788:	4634      	mov	r4, r6
   2278a:	e7ce      	b.n	2272a <net_udp_get_hdr+0x1e>

0002278c <net_udp_set_hdr>:

struct net_udp_hdr *net_udp_set_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   2278c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22790:	b086      	sub	sp, #24
   22792:	4606      	mov	r6, r0
   22794:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   22796:	2208      	movs	r2, #8
   22798:	f7fb f8b2 	bl	1d900 <net_header_fits>
   2279c:	b128      	cbz	r0, 227aa <net_udp_set_hdr+0x1e>
		return hdr;
   2279e:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_udp_header_fits(pkt, hdr)) {
   227a0:	b12d      	cbz	r5, 227ae <net_udp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   227a2:	4620      	mov	r0, r4
   227a4:	b006      	add	sp, #24
   227a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   227aa:	2500      	movs	r5, #0
   227ac:	e7f8      	b.n	227a0 <net_udp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   227ae:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   227b2:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   227b6:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   227ba:	f8cd 8008 	str.w	r8, [sp, #8]
   227be:	9401      	str	r4, [sp, #4]
   227c0:	2702      	movs	r7, #2
   227c2:	9700      	str	r7, [sp, #0]
   227c4:	f10d 0316 	add.w	r3, sp, #22
   227c8:	440a      	add	r2, r1
   227ca:	68b1      	ldr	r1, [r6, #8]
   227cc:	4630      	mov	r0, r6
   227ce:	f7fa fbc4 	bl	1cf5a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   227d2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, PKT_WAIT_TIME);
   227d6:	19e3      	adds	r3, r4, r7
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   227d8:	f8cd 8008 	str.w	r8, [sp, #8]
   227dc:	9301      	str	r3, [sp, #4]
   227de:	9700      	str	r7, [sp, #0]
   227e0:	f10d 0316 	add.w	r3, sp, #22
   227e4:	4601      	mov	r1, r0
   227e6:	4630      	mov	r0, r6
   227e8:	f7fa fbb7 	bl	1cf5a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   227ec:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->len, PKT_WAIT_TIME);
   227f0:	1d23      	adds	r3, r4, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   227f2:	f8cd 8008 	str.w	r8, [sp, #8]
   227f6:	9301      	str	r3, [sp, #4]
   227f8:	9700      	str	r7, [sp, #0]
   227fa:	f10d 0316 	add.w	r3, sp, #22
   227fe:	4601      	mov	r1, r0
   22800:	4630      	mov	r0, r6
   22802:	f7fa fbaa 	bl	1cf5a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   22806:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   2280a:	1da3      	adds	r3, r4, #6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   2280c:	f8cd 8008 	str.w	r8, [sp, #8]
   22810:	9301      	str	r3, [sp, #4]
   22812:	9700      	str	r7, [sp, #0]
   22814:	f10d 0316 	add.w	r3, sp, #22
   22818:	4601      	mov	r1, r0
   2281a:	4630      	mov	r0, r6
   2281c:	f7fa fb9d 	bl	1cf5a <net_pkt_write>
	if (!frag) {
   22820:	2800      	cmp	r0, #0
   22822:	d1be      	bne.n	227a2 <net_udp_set_hdr+0x16>
		return NULL;
   22824:	462c      	mov	r4, r5
   22826:	e7bc      	b.n	227a2 <net_udp_set_hdr+0x16>

00022828 <net_udp_insert>:

struct net_pkt *net_udp_insert(struct net_context *context,
			       struct net_pkt *pkt,
			       u16_t offset,
			       u16_t port)
{
   22828:	b510      	push	{r4, lr}
   2282a:	460c      	mov	r4, r1
   2282c:	4611      	mov	r1, r2
	return net_udp_insert_raw(pkt,
   2282e:	8942      	ldrh	r2, [r0, #10]
   22830:	4620      	mov	r0, r4
   22832:	f7ff fe81 	bl	22538 <net_udp_insert_raw>
				  offset,
				  net_sin((struct sockaddr *)
					  &context->local)->sin_port,
				  port);
}
   22836:	bd10      	pop	{r4, pc}

00022838 <net_udp_init>:
{
	return net_conn_unregister(handle);
}

void net_udp_init(void)
{
   22838:	4770      	bx	lr

0002283a <abort_connection>:
			pkt = net_pkt_ref(pkt);				\
		}							\
	} while (0)

static void abort_connection(struct net_tcp *tcp)
{
   2283a:	b538      	push	{r3, r4, r5, lr}
	struct net_context *ctx = tcp->context;
   2283c:	6804      	ldr	r4, [r0, #0]

	NET_DBG("[%p] segment retransmission exceeds %d, resetting context %p",
		tcp, CONFIG_NET_TCP_RETRY_COUNT, ctx);

	if (ctx->recv_cb) {
   2283e:	6b25      	ldr	r5, [r4, #48]	; 0x30
   22840:	b12d      	cbz	r5, 2284e <abort_connection+0x14>
		ctx->recv_cb(ctx, NULL, -ECONNRESET, tcp->recv_user_data);
   22842:	6843      	ldr	r3, [r0, #4]
   22844:	f06f 0267 	mvn.w	r2, #103	; 0x67
   22848:	2100      	movs	r1, #0
   2284a:	4620      	mov	r0, r4
   2284c:	47a8      	blx	r5
	}

	net_context_unref(ctx);
   2284e:	4620      	mov	r0, r4
   22850:	f7f9 fba8 	bl	1bfa4 <net_context_unref>
   22854:	bd38      	pop	{r3, r4, r5, pc}

00022856 <restart_timer>:

	return net_send_data(pkt);
}

static void restart_timer(struct net_tcp *tcp)
{
   22856:	b510      	push	{r4, lr}
   22858:	4604      	mov	r4, r0
	return (!list->head);
   2285a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   2285e:	b17b      	cbz	r3, 22880 <restart_timer+0x2a>
		tcp->flags |= NET_TCP_RETRYING;
   22860:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   22864:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   22868:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		tcp->retry_timeout_shift = 0;
   2286c:	f36f 0304 	bfc	r3, #0, #5
   22870:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   22874:	2200      	movs	r2, #0
   22876:	21c8      	movs	r1, #200	; 0xc8
   22878:	3058      	adds	r0, #88	; 0x58
   2287a:	f006 fb63 	bl	28f44 <_impl_k_timer_start>
   2287e:	bd10      	pop	{r4, pc}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   22880:	3058      	adds	r0, #88	; 0x58
   22882:	f006 fc17 	bl	290b4 <_impl_k_timer_stop>
			k_timer_start(&tcp->retry_timer, TIME_WAIT_MS, 0);
			net_context_ref(tcp->context);
		}
	} else {
		k_timer_stop(&tcp->retry_timer);
		tcp->flags &= ~NET_TCP_RETRYING;
   22886:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   2288a:	f3c3 1247 	ubfx	r2, r3, #5, #8
   2288e:	f022 0210 	bic.w	r2, r2, #16
   22892:	f362 134c 	bfi	r3, r2, #5, #8
   22896:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
   2289a:	bd10      	pop	{r4, pc}

0002289c <ack_timer_cancel>:
{
   2289c:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->ack_timer);
   2289e:	3008      	adds	r0, #8
   228a0:	f006 fd36 	bl	29310 <k_delayed_work_cancel>
   228a4:	bd08      	pop	{r3, pc}

000228a6 <fin_timer_cancel>:
{
   228a6:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->fin_timer);
   228a8:	3030      	adds	r0, #48	; 0x30
   228aa:	f006 fd31 	bl	29310 <k_delayed_work_cancel>
   228ae:	bd08      	pop	{r3, pc}

000228b0 <finalize_segment>:
{
   228b0:	b508      	push	{r3, lr}
	return pkt->family;
   228b2:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   228b6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   228ba:	2b0a      	cmp	r3, #10
   228bc:	d001      	beq.n	228c2 <finalize_segment+0x12>
	return 0;
   228be:	2000      	movs	r0, #0
}
   228c0:	bd08      	pop	{r3, pc}
		return net_ipv6_finalize(context, pkt);
   228c2:	f7fc fe17 	bl	1f4f4 <net_ipv6_finalize>
   228c6:	bd08      	pop	{r3, pc}

000228c8 <prepare_segment>:
{
   228c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   228cc:	b085      	sub	sp, #20
   228ce:	4606      	mov	r6, r0
   228d0:	460d      	mov	r5, r1
	struct net_context *context = tcp->context;
   228d2:	6807      	ldr	r7, [r0, #0]
	if (pkt) {
   228d4:	b192      	cbz	r2, 228fc <prepare_segment+0x34>
   228d6:	4614      	mov	r4, r2
		tail = pkt->frags;
   228d8:	f8d2 8008 	ldr.w	r8, [r2, #8]
		pkt->frags = NULL;
   228dc:	2300      	movs	r3, #0
   228de:	6093      	str	r3, [r2, #8]
		pkt_allocated = false;
   228e0:	469a      	mov	sl, r3
   228e2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   228e6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   228ea:	2b0a      	cmp	r3, #10
   228ec:	d013      	beq.n	22916 <prepare_segment+0x4e>
		if (pkt_allocated) {
   228ee:	f1ba 0f00 	cmp.w	sl, #0
   228f2:	d174      	bne.n	229de <prepare_segment+0x116>
		return NULL;
   228f4:	2000      	movs	r0, #0
}
   228f6:	b005      	add	sp, #20
   228f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt = net_pkt_get_tx(context, ALLOC_TIMEOUT);
   228fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   22900:	4638      	mov	r0, r7
   22902:	f7fa f907 	bl	1cb14 <net_pkt_get_tx>
		if (!pkt) {
   22906:	4604      	mov	r4, r0
   22908:	2800      	cmp	r0, #0
   2290a:	d0f4      	beq.n	228f6 <prepare_segment+0x2e>
		pkt_allocated = true;
   2290c:	f04f 0a01 	mov.w	sl, #1
	struct net_buf *header, *tail = NULL;
   22910:	f04f 0800 	mov.w	r8, #0
   22914:	e7e5      	b.n	228e2 <prepare_segment+0x1a>
				net_sin6_ptr(segment->src_addr)->sin6_addr,
   22916:	692a      	ldr	r2, [r5, #16]
				&(net_sin6(segment->dst_addr)->sin6_addr));
   22918:	696b      	ldr	r3, [r5, #20]
		net_ipv6_create(tcp->context, pkt,
   2291a:	3304      	adds	r3, #4
   2291c:	6852      	ldr	r2, [r2, #4]
   2291e:	4621      	mov	r1, r4
   22920:	6830      	ldr	r0, [r6, #0]
   22922:	f7fc fb8b 	bl	1f03c <net_ipv6_create>
		dst_port = net_sin6(segment->dst_addr)->sin6_port;
   22926:	696b      	ldr	r3, [r5, #20]
   22928:	f8b3 b002 	ldrh.w	fp, [r3, #2]
		src_port = ((struct sockaddr_in6_ptr *)&context->local)->
   2292c:	897b      	ldrh	r3, [r7, #10]
   2292e:	9302      	str	r3, [sp, #8]
	return pkt->frags->data;
   22930:	68a3      	ldr	r3, [r4, #8]
   22932:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_TCP;
   22934:	2206      	movs	r2, #6
   22936:	719a      	strb	r2, [r3, #6]
	header = net_pkt_get_data(context, ALLOC_TIMEOUT);
   22938:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   2293c:	4638      	mov	r0, r7
   2293e:	f7fa f8fb 	bl	1cb38 <net_pkt_get_data>
	if (!header) {
   22942:	9001      	str	r0, [sp, #4]
   22944:	2800      	cmp	r0, #0
   22946:	d04f      	beq.n	229e8 <prepare_segment+0x120>
	net_pkt_frag_add(pkt, header);
   22948:	9e01      	ldr	r6, [sp, #4]
   2294a:	4631      	mov	r1, r6
   2294c:	4620      	mov	r0, r4
   2294e:	f7fa f93e 	bl	1cbce <net_pkt_frag_add>
	tcp_hdr = (struct net_tcp_hdr *)net_buf_add(header, NET_TCPH_LEN);
   22952:	2114      	movs	r1, #20
   22954:	f106 0008 	add.w	r0, r6, #8
   22958:	f7f7 fbec 	bl	1a134 <net_buf_simple_add>
   2295c:	4606      	mov	r6, r0
	if (segment->options && segment->optlen) {
   2295e:	68eb      	ldr	r3, [r5, #12]
   22960:	9303      	str	r3, [sp, #12]
   22962:	2b00      	cmp	r3, #0
   22964:	d05d      	beq.n	22a22 <prepare_segment+0x15a>
   22966:	f895 900b 	ldrb.w	r9, [r5, #11]
   2296a:	f1b9 0f00 	cmp.w	r9, #0
   2296e:	d145      	bne.n	229fc <prepare_segment+0x134>
	tcp_hdr->offset = (NET_TCPH_LEN + optlen) << 2;
   22970:	f109 0914 	add.w	r9, r9, #20
   22974:	fa5f f989 	uxtb.w	r9, r9
   22978:	ea4f 0989 	mov.w	r9, r9, lsl #2
   2297c:	f886 900c 	strb.w	r9, [r6, #12]
	tcp_hdr->src_port = src_port;
   22980:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   22984:	8033      	strh	r3, [r6, #0]
	tcp_hdr->dst_port = dst_port;
   22986:	f8a6 b002 	strh.w	fp, [r6, #2]
	sys_put_be32(segment->seq, tcp_hdr->seq);
   2298a:	682b      	ldr	r3, [r5, #0]
	sys_put_be16(val >> 16, dst);
   2298c:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   2298e:	0a11      	lsrs	r1, r2, #8
   22990:	7131      	strb	r1, [r6, #4]
	dst[1] = val;
   22992:	7172      	strb	r2, [r6, #5]
	dst[0] = val >> 8;
   22994:	f3c3 2207 	ubfx	r2, r3, #8, #8
   22998:	71b2      	strb	r2, [r6, #6]
	dst[1] = val;
   2299a:	71f3      	strb	r3, [r6, #7]
	sys_put_be32(segment->ack, tcp_hdr->ack);
   2299c:	686b      	ldr	r3, [r5, #4]
	sys_put_be16(val >> 16, dst);
   2299e:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   229a0:	0a11      	lsrs	r1, r2, #8
   229a2:	7231      	strb	r1, [r6, #8]
	dst[1] = val;
   229a4:	7272      	strb	r2, [r6, #9]
	dst[0] = val >> 8;
   229a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
   229aa:	72b2      	strb	r2, [r6, #10]
	dst[1] = val;
   229ac:	72f3      	strb	r3, [r6, #11]
	tcp_hdr->flags = segment->flags;
   229ae:	7aab      	ldrb	r3, [r5, #10]
   229b0:	7373      	strb	r3, [r6, #13]
	sys_put_be16(segment->wnd, tcp_hdr->wnd);
   229b2:	892b      	ldrh	r3, [r5, #8]
	dst[0] = val >> 8;
   229b4:	0a1a      	lsrs	r2, r3, #8
   229b6:	73b2      	strb	r2, [r6, #14]
	dst[1] = val;
   229b8:	73f3      	strb	r3, [r6, #15]
	tcp_hdr->urg[0] = 0;
   229ba:	2300      	movs	r3, #0
   229bc:	74b3      	strb	r3, [r6, #18]
	tcp_hdr->urg[1] = 0;
   229be:	74f3      	strb	r3, [r6, #19]
	if (tail) {
   229c0:	f1b8 0f00 	cmp.w	r8, #0
   229c4:	d003      	beq.n	229ce <prepare_segment+0x106>
		net_pkt_frag_add(pkt, tail);
   229c6:	4641      	mov	r1, r8
   229c8:	4620      	mov	r0, r4
   229ca:	f7fa f900 	bl	1cbce <net_pkt_frag_add>
	if (finalize_segment(context, pkt) < 0) {
   229ce:	4621      	mov	r1, r4
   229d0:	4638      	mov	r0, r7
   229d2:	f7ff ff6d 	bl	228b0 <finalize_segment>
   229d6:	2800      	cmp	r0, #0
   229d8:	db26      	blt.n	22a28 <prepare_segment+0x160>
	return pkt;
   229da:	4620      	mov	r0, r4
   229dc:	e78b      	b.n	228f6 <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   229de:	4620      	mov	r0, r4
   229e0:	f7fa f8cb 	bl	1cb7a <net_pkt_unref>
		return NULL;
   229e4:	2000      	movs	r0, #0
   229e6:	e786      	b.n	228f6 <prepare_segment+0x2e>
		if (pkt_allocated) {
   229e8:	f1ba 0f00 	cmp.w	sl, #0
   229ec:	d101      	bne.n	229f2 <prepare_segment+0x12a>
		return NULL;
   229ee:	2000      	movs	r0, #0
   229f0:	e781      	b.n	228f6 <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   229f2:	4620      	mov	r0, r4
   229f4:	f7fa f8c1 	bl	1cb7a <net_pkt_unref>
		return NULL;
   229f8:	2000      	movs	r0, #0
   229fa:	e77c      	b.n	228f6 <prepare_segment+0x2e>
	memcpy(net_buf_add(header, len), data, len);
   229fc:	4649      	mov	r1, r9
   229fe:	9801      	ldr	r0, [sp, #4]
   22a00:	3008      	adds	r0, #8
   22a02:	f7f7 fb97 	bl	1a134 <net_buf_simple_add>
   22a06:	464a      	mov	r2, r9
   22a08:	9903      	ldr	r1, [sp, #12]
   22a0a:	f7dd fc59 	bl	2c0 <memcpy>
	if ((len & 0x3u) != 0u) {
   22a0e:	f019 0f03 	tst.w	r9, #3
   22a12:	d0ad      	beq.n	22970 <prepare_segment+0xa8>
		optlen = (len & 0xfffCu) + 4u;
   22a14:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
   22a18:	f109 0904 	add.w	r9, r9, #4
   22a1c:	fa5f f989 	uxtb.w	r9, r9
   22a20:	e7a6      	b.n	22970 <prepare_segment+0xa8>
	u8_t optlen = 0;
   22a22:	f04f 0900 	mov.w	r9, #0
   22a26:	e7a3      	b.n	22970 <prepare_segment+0xa8>
		if (pkt_allocated) {
   22a28:	f1ba 0f00 	cmp.w	sl, #0
   22a2c:	d101      	bne.n	22a32 <prepare_segment+0x16a>
		return NULL;
   22a2e:	2000      	movs	r0, #0
   22a30:	e761      	b.n	228f6 <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   22a32:	4620      	mov	r0, r4
   22a34:	f7fa f8a1 	bl	1cb7a <net_pkt_unref>
		return NULL;
   22a38:	2000      	movs	r0, #0
   22a3a:	e75c      	b.n	228f6 <prepare_segment+0x2e>

00022a3c <net_tcp_alloc>:
{
   22a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   22a3e:	f04f 0320 	mov.w	r3, #32
   22a42:	f3ef 8411 	mrs	r4, BASEPRI
   22a46:	f383 8811 	msr	BASEPRI, r3
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   22a4a:	2300      	movs	r3, #0
   22a4c:	2b05      	cmp	r3, #5
   22a4e:	dc18      	bgt.n	22a82 <net_tcp_alloc+0x46>
	return tcp->flags & NET_TCP_IN_USE;
   22a50:	22c8      	movs	r2, #200	; 0xc8
   22a52:	492b      	ldr	r1, [pc, #172]	; (22b00 <net_tcp_alloc+0xc4>)
   22a54:	fb02 1203 	mla	r2, r2, r3, r1
   22a58:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
   22a5c:	f3c2 1247 	ubfx	r2, r2, #5, #8
		if (!net_tcp_is_used(&tcp_context[i])) {
   22a60:	f012 0f01 	tst.w	r2, #1
   22a64:	d001      	beq.n	22a6a <net_tcp_alloc+0x2e>
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   22a66:	3301      	adds	r3, #1
   22a68:	e7f0      	b.n	22a4c <net_tcp_alloc+0x10>
			tcp_context[i].flags |= NET_TCP_IN_USE;
   22a6a:	21c8      	movs	r1, #200	; 0xc8
   22a6c:	4d24      	ldr	r5, [pc, #144]	; (22b00 <net_tcp_alloc+0xc4>)
   22a6e:	fb01 5103 	mla	r1, r1, r3, r5
   22a72:	f042 0201 	orr.w	r2, r2, #1
   22a76:	f8b1 50a4 	ldrh.w	r5, [r1, #164]	; 0xa4
   22a7a:	f362 154c 	bfi	r5, r2, #5, #8
   22a7e:	f8a1 50a4 	strh.w	r5, [r1, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   22a82:	f384 8811 	msr	BASEPRI, r4
	if (i >= NET_MAX_TCP_CONTEXT) {
   22a86:	2b05      	cmp	r3, #5
   22a88:	dc37      	bgt.n	22afa <net_tcp_alloc+0xbe>
   22a8a:	4607      	mov	r7, r0
	memset(&tcp_context[i], 0, sizeof(struct net_tcp));
   22a8c:	4e1c      	ldr	r6, [pc, #112]	; (22b00 <net_tcp_alloc+0xc4>)
   22a8e:	22c8      	movs	r2, #200	; 0xc8
   22a90:	fb02 f403 	mul.w	r4, r2, r3
   22a94:	1935      	adds	r5, r6, r4
   22a96:	2100      	movs	r1, #0
   22a98:	4628      	mov	r0, r5
   22a9a:	f006 fe1d 	bl	296d8 <memset>
	tcp_context[i].flags = NET_TCP_IN_USE;
   22a9e:	f8b5 20a4 	ldrh.w	r2, [r5, #164]	; 0xa4
   22aa2:	2101      	movs	r1, #1
   22aa4:	f361 124c 	bfi	r2, r1, #5, #8
   22aa8:	f8a5 20a4 	strh.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].state = NET_TCP_CLOSED;
   22aac:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   22ab0:	f36f 3250 	bfc	r2, #13, #4
   22ab4:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].context = context;
   22ab8:	5137      	str	r7, [r6, r4]
	return sys_rand32_get();
   22aba:	f7df fa77 	bl	1fac <sys_rand32_get>
	tcp_context[i].send_seq = tcp_init_isn();
   22abe:	f8c5 0098 	str.w	r0, [r5, #152]	; 0x98
	tcp_context[i].recv_max_ack = tcp_context[i].send_seq + 1u;
   22ac2:	3001      	adds	r0, #1
   22ac4:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
	tcp_context[i].recv_wnd = min(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   22ac8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
   22acc:	f8a5 30c4 	strh.w	r3, [r5, #196]	; 0xc4
	tcp_context[i].accept_cb = NULL;
   22ad0:	2700      	movs	r7, #0
   22ad2:	f8c5 70a8 	str.w	r7, [r5, #168]	; 0xa8
	k_timer_init(&tcp_context[i].retry_timer, tcp_retry_expired, NULL);
   22ad6:	f104 0058 	add.w	r0, r4, #88	; 0x58
   22ada:	463a      	mov	r2, r7
   22adc:	4909      	ldr	r1, [pc, #36]	; (22b04 <net_tcp_alloc+0xc8>)
   22ade:	4430      	add	r0, r6
   22ae0:	f006 fa1c 	bl	28f1c <k_timer_init>
	k_sem_init(&tcp_context[i].connect_wait, 0, UINT_MAX);
   22ae4:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
   22ae8:	18f0      	adds	r0, r6, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   22aea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22aee:	4639      	mov	r1, r7
   22af0:	3004      	adds	r0, #4
   22af2:	f005 fe15 	bl	28720 <_impl_k_sem_init>
}
   22af6:	4628      	mov	r0, r5
   22af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   22afa:	2500      	movs	r5, #0
   22afc:	e7fb      	b.n	22af6 <net_tcp_alloc+0xba>
   22afe:	bf00      	nop
   22b00:	20001e60 	.word	0x20001e60
   22b04:	00023479 	.word	0x00023479

00022b08 <net_tcp_get_recv_wnd>:
}
   22b08:	f8b0 00c4 	ldrh.w	r0, [r0, #196]	; 0xc4
   22b0c:	4770      	bx	lr

00022b0e <net_tcp_get_recv_mss>:
{
   22b0e:	b508      	push	{r3, lr}
	sa_family_t family = net_context_get_family(tcp->context);
   22b10:	6802      	ldr	r2, [r0, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   22b12:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
   22b16:	f013 0f10 	tst.w	r3, #16
   22b1a:	d006      	beq.n	22b2a <net_tcp_get_recv_mss+0x1c>
		return AF_INET6;
   22b1c:	230a      	movs	r3, #10
	if (family == AF_INET) {
   22b1e:	2b02      	cmp	r3, #2
   22b20:	d019      	beq.n	22b56 <net_tcp_get_recv_mss+0x48>
	else if (family == AF_INET6) {
   22b22:	2b0a      	cmp	r3, #10
   22b24:	d003      	beq.n	22b2e <net_tcp_get_recv_mss+0x20>
	return 0;
   22b26:	2000      	movs	r0, #0
}
   22b28:	bd08      	pop	{r3, pc}
	return AF_INET;
   22b2a:	2302      	movs	r3, #2
   22b2c:	e7f7      	b.n	22b1e <net_tcp_get_recv_mss+0x10>
	return net_if_get_by_index(context->iface);
   22b2e:	f892 005c 	ldrb.w	r0, [r2, #92]	; 0x5c
   22b32:	f7f8 fddb 	bl	1b6ec <net_if_get_by_index>
		if (iface && iface->mtu >= NET_IPV6TCPH_LEN) {
   22b36:	b120      	cbz	r0, 22b42 <net_tcp_get_recv_mss+0x34>
   22b38:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   22b3a:	283b      	cmp	r0, #59	; 0x3b
   22b3c:	d903      	bls.n	22b46 <net_tcp_get_recv_mss+0x38>
			mss = iface->mtu - NET_IPV6TCPH_LEN;
   22b3e:	383c      	subs	r0, #60	; 0x3c
   22b40:	e002      	b.n	22b48 <net_tcp_get_recv_mss+0x3a>
		int mss = 0;
   22b42:	2000      	movs	r0, #0
   22b44:	e000      	b.n	22b48 <net_tcp_get_recv_mss+0x3a>
   22b46:	2000      	movs	r0, #0
		if (mss < NET_IPV6_MTU) {
   22b48:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
   22b4c:	da01      	bge.n	22b52 <net_tcp_get_recv_mss+0x44>
			mss = NET_IPV6_MTU;
   22b4e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
		return mss;
   22b52:	b280      	uxth	r0, r0
   22b54:	bd08      	pop	{r3, pc}
		return 0;
   22b56:	2000      	movs	r0, #0
   22b58:	bd08      	pop	{r3, pc}

00022b5a <net_tcp_set_syn_opt>:
{
   22b5a:	b570      	push	{r4, r5, r6, lr}
   22b5c:	460e      	mov	r6, r1
   22b5e:	4614      	mov	r4, r2
	*optionlen = 0;
   22b60:	2300      	movs	r3, #0
   22b62:	7013      	strb	r3, [r2, #0]
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   22b64:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   22b68:	f413 6f80 	tst.w	r3, #1024	; 0x400
   22b6c:	d00f      	beq.n	22b8e <net_tcp_set_syn_opt+0x34>
		recv_mss = 0;
   22b6e:	2000      	movs	r0, #0
	UNALIGNED_PUT(htonl((u32_t)recv_mss | NET_TCP_MSS_HEADER),
   22b70:	7822      	ldrb	r2, [r4, #0]
   22b72:	0203      	lsls	r3, r0, #8
   22b74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   22b78:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   22b7c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   22b80:	f040 0002 	orr.w	r0, r0, #2
   22b84:	50b0      	str	r0, [r6, r2]
	*optionlen += NET_TCP_MSS_SIZE;
   22b86:	7823      	ldrb	r3, [r4, #0]
   22b88:	3304      	adds	r3, #4
   22b8a:	7023      	strb	r3, [r4, #0]
   22b8c:	bd70      	pop	{r4, r5, r6, pc}
   22b8e:	4605      	mov	r5, r0
		recv_mss = net_tcp_get_recv_mss(tcp);
   22b90:	f7ff ffbd 	bl	22b0e <net_tcp_get_recv_mss>
		tcp->flags |= NET_TCP_RECV_MSS_SET;
   22b94:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   22b98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   22b9c:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
   22ba0:	e7e6      	b.n	22b70 <net_tcp_set_syn_opt+0x16>

00022ba2 <net_tcp_prepare_reset>:
{
   22ba2:	b510      	push	{r4, lr}
   22ba4:	b086      	sub	sp, #24
	struct tcp_segment segment = { 0 };
   22ba6:	2300      	movs	r3, #0
   22ba8:	9300      	str	r3, [sp, #0]
   22baa:	9301      	str	r3, [sp, #4]
   22bac:	9302      	str	r3, [sp, #8]
   22bae:	9303      	str	r3, [sp, #12]
   22bb0:	9304      	str	r3, [sp, #16]
   22bb2:	9305      	str	r3, [sp, #20]
	if ((net_context_get_state(tcp->context) != NET_CONTEXT_UNCONNECTED) &&
   22bb4:	6803      	ldr	r3, [r0, #0]
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   22bb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   22bba:	f013 0f06 	tst.w	r3, #6
   22bbe:	d01a      	beq.n	22bf6 <net_tcp_prepare_reset+0x54>
	return (enum net_tcp_state)tcp->state;
   22bc0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   22bc4:	f3c3 3343 	ubfx	r3, r3, #13, #4
   22bc8:	2b02      	cmp	r3, #2
   22bca:	d014      	beq.n	22bf6 <net_tcp_prepare_reset+0x54>
	    (net_tcp_get_state(tcp) != NET_TCP_SYN_SENT) &&
   22bcc:	2b09      	cmp	r3, #9
   22bce:	d012      	beq.n	22bf6 <net_tcp_prepare_reset+0x54>
   22bd0:	4614      	mov	r4, r2
		segment.ack = tcp->send_ack;
   22bd2:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   22bd6:	9301      	str	r3, [sp, #4]
		segment.flags = NET_TCP_RST | NET_TCP_ACK;
   22bd8:	2314      	movs	r3, #20
   22bda:	f88d 300a 	strb.w	r3, [sp, #10]
		segment.seq = tcp->send_seq;
   22bde:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   22be2:	9300      	str	r3, [sp, #0]
		segment.src_addr = &tcp->context->local;
   22be4:	6803      	ldr	r3, [r0, #0]
   22be6:	3308      	adds	r3, #8
   22be8:	9304      	str	r3, [sp, #16]
		segment.dst_addr = remote;
   22bea:	9105      	str	r1, [sp, #20]
		*pkt = prepare_segment(tcp, &segment, NULL);
   22bec:	2200      	movs	r2, #0
   22bee:	4669      	mov	r1, sp
   22bf0:	f7ff fe6a 	bl	228c8 <prepare_segment>
   22bf4:	6020      	str	r0, [r4, #0]
}
   22bf6:	2000      	movs	r0, #0
   22bf8:	b006      	add	sp, #24
   22bfa:	bd10      	pop	{r4, pc}

00022bfc <net_tcp_state_str>:
}
   22bfc:	4800      	ldr	r0, [pc, #0]	; (22c00 <net_tcp_state_str+0x4>)
   22bfe:	4770      	bx	lr
   22c00:	0002f754 	.word	0x0002f754

00022c04 <net_tcp_init>:
		}
	}
}

void net_tcp_init(void)
{
   22c04:	4770      	bx	lr

00022c06 <net_tcp_change_state>:
   22c06:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   22c0a:	f3c3 3343 	ubfx	r3, r3, #13, #4
void net_tcp_change_state(struct net_tcp *tcp,
			  enum net_tcp_state new_state)
{
	NET_ASSERT(tcp);

	if (net_tcp_get_state(tcp) == new_state) {
   22c0e:	428b      	cmp	r3, r1
   22c10:	d022      	beq.n	22c58 <net_tcp_change_state+0x52>

#if defined(CONFIG_NET_DEBUG_TCP)
	validate_state_transition(tcp->state, new_state);
#endif /* CONFIG_NET_DEBUG_TCP */

	tcp->state = new_state;
   22c12:	f001 010f 	and.w	r1, r1, #15
   22c16:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   22c1a:	f361 3350 	bfi	r3, r1, #13, #4
   22c1e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   22c22:	b9c9      	cbnz	r1, 22c58 <net_tcp_change_state+0x52>
		return;
	}

	if (!tcp->context) {
   22c24:	6803      	ldr	r3, [r0, #0]
   22c26:	b1bb      	cbz	r3, 22c58 <net_tcp_change_state+0x52>
{
   22c28:	b530      	push	{r4, r5, lr}
   22c2a:	b083      	sub	sp, #12
   22c2c:	4604      	mov	r4, r0
		return;
	}

	/* Remove any port handlers if we are closing */
	if (tcp->context->conn_handler) {
   22c2e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   22c30:	b120      	cbz	r0, 22c3c <net_tcp_change_state+0x36>
	return net_conn_unregister(handle);
   22c32:	f001 fcef 	bl	24614 <net_conn_unregister>
		net_tcp_unregister(tcp->context->conn_handler);
		tcp->context->conn_handler = NULL;
   22c36:	6823      	ldr	r3, [r4, #0]
   22c38:	2200      	movs	r2, #0
   22c3a:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if (tcp->accept_cb) {
   22c3c:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
   22c40:	b145      	cbz	r5, 22c54 <net_tcp_change_state+0x4e>
		tcp->accept_cb(tcp->context,
   22c42:	6820      	ldr	r0, [r4, #0]
   22c44:	6803      	ldr	r3, [r0, #0]
   22c46:	9300      	str	r3, [sp, #0]
   22c48:	f06f 037d 	mvn.w	r3, #125	; 0x7d
   22c4c:	2218      	movs	r2, #24
   22c4e:	f100 0114 	add.w	r1, r0, #20
   22c52:	47a8      	blx	r5
			       &tcp->context->remote,
			       sizeof(struct sockaddr),
			       -ENETRESET,
			       tcp->context->user_data);
	}
}
   22c54:	b003      	add	sp, #12
   22c56:	bd30      	pop	{r4, r5, pc}
   22c58:	4770      	bx	lr
	...

00022c5c <net_tcp_release>:
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   22c5c:	2800      	cmp	r0, #0
   22c5e:	d064      	beq.n	22d2a <net_tcp_release+0xce>
{
   22c60:	b538      	push	{r3, r4, r5, lr}
   22c62:	4605      	mov	r5, r0
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   22c64:	4b35      	ldr	r3, [pc, #212]	; (22d3c <net_tcp_release+0xe0>)
   22c66:	4298      	cmp	r0, r3
   22c68:	d362      	bcc.n	22d30 <net_tcp_release+0xd4>
   22c6a:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
   22c6e:	4298      	cmp	r0, r3
   22c70:	d261      	bcs.n	22d36 <net_tcp_release+0xda>
	return list->head;
   22c72:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   22c76:	b140      	cbz	r0, 22c8a <net_tcp_release+0x2e>
   22c78:	3834      	subs	r0, #52	; 0x34
   22c7a:	b140      	cbz	r0, 22c8e <net_tcp_release+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22c7c:	f110 0434 	adds.w	r4, r0, #52	; 0x34
   22c80:	d000      	beq.n	22c84 <net_tcp_release+0x28>
	return node->next;
   22c82:	6b44      	ldr	r4, [r0, #52]	; 0x34
   22c84:	b12c      	cbz	r4, 22c92 <net_tcp_release+0x36>
   22c86:	3c34      	subs	r4, #52	; 0x34
   22c88:	e00d      	b.n	22ca6 <net_tcp_release+0x4a>
   22c8a:	2000      	movs	r0, #0
   22c8c:	e7f5      	b.n	22c7a <net_tcp_release+0x1e>
   22c8e:	4604      	mov	r4, r0
   22c90:	e009      	b.n	22ca6 <net_tcp_release+0x4a>
   22c92:	2400      	movs	r4, #0
   22c94:	e007      	b.n	22ca6 <net_tcp_release+0x4a>
			list->tail = list->head;
   22c96:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
   22c9a:	e00e      	b.n	22cba <net_tcp_release+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22c9c:	461a      	mov	r2, r3
   22c9e:	e015      	b.n	22ccc <net_tcp_release+0x70>
   22ca0:	3b34      	subs	r3, #52	; 0x34
   22ca2:	4620      	mov	r0, r4
   22ca4:	461c      	mov	r4, r3
   22ca6:	b1d0      	cbz	r0, 22cde <net_tcp_release+0x82>
		sys_slist_remove(&tcp->sent_list, NULL, &pkt->sent_list);
   22ca8:	f100 0334 	add.w	r3, r0, #52	; 0x34
		list->head = node->next;
   22cac:	6b42      	ldr	r2, [r0, #52]	; 0x34
   22cae:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
		if (list->tail == node) {
   22cb2:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
   22cb6:	428b      	cmp	r3, r1
   22cb8:	d0ed      	beq.n	22c96 <net_tcp_release+0x3a>
	node->next = NULL;
   22cba:	2300      	movs	r3, #0
   22cbc:	6343      	str	r3, [r0, #52]	; 0x34
		net_pkt_unref(pkt);
   22cbe:	f7f9 ff5c 	bl	1cb7a <net_pkt_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   22cc2:	b144      	cbz	r4, 22cd6 <net_tcp_release+0x7a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22cc4:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   22cc8:	d0e8      	beq.n	22c9c <net_tcp_release+0x40>
	return node->next;
   22cca:	6b62      	ldr	r2, [r4, #52]	; 0x34
   22ccc:	b12a      	cbz	r2, 22cda <net_tcp_release+0x7e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22cce:	2b00      	cmp	r3, #0
   22cd0:	d0e6      	beq.n	22ca0 <net_tcp_release+0x44>
	return node->next;
   22cd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22cd4:	e7e4      	b.n	22ca0 <net_tcp_release+0x44>
   22cd6:	4623      	mov	r3, r4
   22cd8:	e7e3      	b.n	22ca2 <net_tcp_release+0x46>
   22cda:	2300      	movs	r3, #0
   22cdc:	e7e1      	b.n	22ca2 <net_tcp_release+0x46>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   22cde:	f105 0058 	add.w	r0, r5, #88	; 0x58
   22ce2:	f006 f9e7 	bl	290b4 <_impl_k_timer_stop>
	sem->count = 0;
   22ce6:	2400      	movs	r4, #0
   22ce8:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
	ack_timer_cancel(tcp);
   22cec:	4628      	mov	r0, r5
   22cee:	f7ff fdd5 	bl	2289c <ack_timer_cancel>
	fin_timer_cancel(tcp);
   22cf2:	4628      	mov	r0, r5
   22cf4:	f7ff fdd7 	bl	228a6 <fin_timer_cancel>
	net_tcp_change_state(tcp, NET_TCP_CLOSED);
   22cf8:	4621      	mov	r1, r4
   22cfa:	4628      	mov	r0, r5
   22cfc:	f7ff ff83 	bl	22c06 <net_tcp_change_state>
	tcp->context = NULL;
   22d00:	602c      	str	r4, [r5, #0]
	__asm__ volatile(
   22d02:	f04f 0320 	mov.w	r3, #32
   22d06:	f3ef 8111 	mrs	r1, BASEPRI
   22d0a:	f383 8811 	msr	BASEPRI, r3
	tcp->flags &= ~(NET_TCP_IN_USE | NET_TCP_RECV_MSS_SET);
   22d0e:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   22d12:	f3c3 1247 	ubfx	r2, r3, #5, #8
   22d16:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   22d1a:	f362 134c 	bfi	r3, r2, #5, #8
   22d1e:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   22d22:	f381 8811 	msr	BASEPRI, r1
	return 0;
   22d26:	4620      	mov	r0, r4
   22d28:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   22d2a:	f06f 0015 	mvn.w	r0, #21
   22d2e:	4770      	bx	lr
   22d30:	f06f 0015 	mvn.w	r0, #21
   22d34:	bd38      	pop	{r3, r4, r5, pc}
   22d36:	f06f 0015 	mvn.w	r0, #21
}
   22d3a:	bd38      	pop	{r3, r4, r5, pc}
   22d3c:	20001e60 	.word	0x20001e60

00022d40 <net_tcp_prepare_segment>:
{
   22d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22d44:	b086      	sub	sp, #24
   22d46:	4604      	mov	r4, r0
   22d48:	460d      	mov	r5, r1
   22d4a:	4692      	mov	sl, r2
   22d4c:	4699      	mov	r9, r3
   22d4e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   22d50:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
	struct tcp_segment segment = { 0 };
   22d54:	2300      	movs	r3, #0
   22d56:	9300      	str	r3, [sp, #0]
   22d58:	9301      	str	r3, [sp, #4]
   22d5a:	9302      	str	r3, [sp, #8]
   22d5c:	9303      	str	r3, [sp, #12]
   22d5e:	9304      	str	r3, [sp, #16]
   22d60:	9305      	str	r3, [sp, #20]
	if (!local) {
   22d62:	2f00      	cmp	r7, #0
   22d64:	d050      	beq.n	22e08 <net_tcp_prepare_segment+0xc8>
	seq = tcp->send_seq;
   22d66:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
	if (flags & NET_TCP_ACK) {
   22d6a:	f015 0f10 	tst.w	r5, #16
   22d6e:	d009      	beq.n	22d84 <net_tcp_prepare_segment+0x44>
	return (enum net_tcp_state)tcp->state;
   22d70:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   22d74:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_1) {
   22d78:	2b07      	cmp	r3, #7
   22d7a:	d048      	beq.n	22e0e <net_tcp_prepare_segment+0xce>
		} else if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_2) {
   22d7c:	2b08      	cmp	r3, #8
   22d7e:	d055      	beq.n	22e2c <net_tcp_prepare_segment+0xec>
		} else if (net_tcp_get_state(tcp) == NET_TCP_CLOSE_WAIT) {
   22d80:	2b05      	cmp	r3, #5
   22d82:	d058      	beq.n	22e36 <net_tcp_prepare_segment+0xf6>
	if (flags & NET_TCP_FIN) {
   22d84:	f015 0f01 	tst.w	r5, #1
   22d88:	d010      	beq.n	22dac <net_tcp_prepare_segment+0x6c>
		tcp->flags |= NET_TCP_FINAL_SENT;
   22d8a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   22d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22d92:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		flags |= NET_TCP_ACK;
   22d96:	f045 0510 	orr.w	r5, r5, #16
		seq += 2;
   22d9a:	3602      	adds	r6, #2
   22d9c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   22da0:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   22da4:	2b04      	cmp	r3, #4
   22da6:	d053      	beq.n	22e50 <net_tcp_prepare_segment+0x110>
   22da8:	2b03      	cmp	r3, #3
   22daa:	d051      	beq.n	22e50 <net_tcp_prepare_segment+0x110>
	if (flags & NET_TCP_SYN) {
   22dac:	f015 0f02 	tst.w	r5, #2
   22db0:	d000      	beq.n	22db4 <net_tcp_prepare_segment+0x74>
		seq++;
   22db2:	3601      	adds	r6, #1
	wnd = net_tcp_get_recv_wnd(tcp);
   22db4:	4620      	mov	r0, r4
   22db6:	f7ff fea7 	bl	22b08 <net_tcp_get_recv_wnd>
	segment.src_addr = (struct sockaddr_ptr *)local;
   22dba:	9704      	str	r7, [sp, #16]
	segment.dst_addr = remote;
   22dbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   22dbe:	9305      	str	r3, [sp, #20]
	segment.seq = tcp->send_seq;
   22dc0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   22dc4:	9300      	str	r3, [sp, #0]
	segment.ack = tcp->send_ack;
   22dc6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   22dca:	9301      	str	r3, [sp, #4]
	segment.flags = flags;
   22dcc:	f88d 500a 	strb.w	r5, [sp, #10]
	segment.wnd = wnd;
   22dd0:	f8ad 0008 	strh.w	r0, [sp, #8]
	segment.options = options;
   22dd4:	f8cd a00c 	str.w	sl, [sp, #12]
	segment.optlen = optlen;
   22dd8:	f88d 900b 	strb.w	r9, [sp, #11]
	*send_pkt = prepare_segment(tcp, &segment, *send_pkt);
   22ddc:	f8d8 2000 	ldr.w	r2, [r8]
   22de0:	4669      	mov	r1, sp
   22de2:	4620      	mov	r0, r4
   22de4:	f7ff fd70 	bl	228c8 <prepare_segment>
   22de8:	f8c8 0000 	str.w	r0, [r8]
	if (!*send_pkt) {
   22dec:	b3a8      	cbz	r0, 22e5a <net_tcp_prepare_segment+0x11a>
	tcp->send_seq = seq;
   22dee:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
	if (net_tcp_seq_greater(tcp->send_seq, tcp->recv_max_ack)) {
   22df2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	return (s32_t)(seq1 - seq2);
   22df6:	1af3      	subs	r3, r6, r3
   22df8:	2b00      	cmp	r3, #0
   22dfa:	dd31      	ble.n	22e60 <net_tcp_prepare_segment+0x120>
		tcp->recv_max_ack = tcp->send_seq;
   22dfc:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
	return 0;
   22e00:	2000      	movs	r0, #0
}
   22e02:	b006      	add	sp, #24
   22e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		local = &tcp->context->local;
   22e08:	6807      	ldr	r7, [r0, #0]
   22e0a:	3708      	adds	r7, #8
   22e0c:	e7ab      	b.n	22d66 <net_tcp_prepare_segment+0x26>
			if (flags & NET_TCP_FIN) {
   22e0e:	f015 0f01 	tst.w	r5, #1
   22e12:	d006      	beq.n	22e22 <net_tcp_prepare_segment+0xe2>
				flags &= ~NET_TCP_FIN;
   22e14:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   22e18:	2109      	movs	r1, #9
   22e1a:	4620      	mov	r0, r4
   22e1c:	f7ff fef3 	bl	22c06 <net_tcp_change_state>
   22e20:	e7b0      	b.n	22d84 <net_tcp_prepare_segment+0x44>
				net_tcp_change_state(tcp, NET_TCP_CLOSING);
   22e22:	210a      	movs	r1, #10
   22e24:	4620      	mov	r0, r4
   22e26:	f7ff feee 	bl	22c06 <net_tcp_change_state>
   22e2a:	e7ab      	b.n	22d84 <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   22e2c:	2109      	movs	r1, #9
   22e2e:	4620      	mov	r0, r4
   22e30:	f7ff fee9 	bl	22c06 <net_tcp_change_state>
   22e34:	e7a6      	b.n	22d84 <net_tcp_prepare_segment+0x44>
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   22e36:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   22e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   22e3e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			flags |= NET_TCP_FIN;
   22e42:	f045 0501 	orr.w	r5, r5, #1
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   22e46:	2106      	movs	r1, #6
   22e48:	4620      	mov	r0, r4
   22e4a:	f7ff fedc 	bl	22c06 <net_tcp_change_state>
   22e4e:	e799      	b.n	22d84 <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_1);
   22e50:	2107      	movs	r1, #7
   22e52:	4620      	mov	r0, r4
   22e54:	f7ff fed7 	bl	22c06 <net_tcp_change_state>
   22e58:	e7a8      	b.n	22dac <net_tcp_prepare_segment+0x6c>
		return -EINVAL;
   22e5a:	f06f 0015 	mvn.w	r0, #21
   22e5e:	e7d0      	b.n	22e02 <net_tcp_prepare_segment+0xc2>
	return 0;
   22e60:	2000      	movs	r0, #0
   22e62:	e7ce      	b.n	22e02 <net_tcp_prepare_segment+0xc2>

00022e64 <net_tcp_prepare_ack>:
{
   22e64:	b570      	push	{r4, r5, r6, lr}
   22e66:	b088      	sub	sp, #32
   22e68:	4604      	mov	r4, r0
   22e6a:	460d      	mov	r5, r1
   22e6c:	4616      	mov	r6, r2
   22e6e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   22e72:	f3c3 3343 	ubfx	r3, r3, #13, #4
	switch (net_tcp_get_state(tcp)) {
   22e76:	2b03      	cmp	r3, #3
   22e78:	d011      	beq.n	22e9e <net_tcp_prepare_ack+0x3a>
   22e7a:	d327      	bcc.n	22ecc <net_tcp_prepare_ack+0x68>
   22e7c:	3b06      	subs	r3, #6
   22e7e:	2b01      	cmp	r3, #1
   22e80:	d824      	bhi.n	22ecc <net_tcp_prepare_ack+0x68>
		tcp->send_seq--;
   22e82:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   22e86:	3b01      	subs	r3, #1
   22e88:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		return net_tcp_prepare_segment(tcp, NET_TCP_FIN | NET_TCP_ACK,
   22e8c:	9202      	str	r2, [sp, #8]
   22e8e:	9101      	str	r1, [sp, #4]
   22e90:	2200      	movs	r2, #0
   22e92:	9200      	str	r2, [sp, #0]
   22e94:	4613      	mov	r3, r2
   22e96:	2111      	movs	r1, #17
   22e98:	f7ff ff52 	bl	22d40 <net_tcp_prepare_segment>
   22e9c:	e014      	b.n	22ec8 <net_tcp_prepare_ack+0x64>
		tcp->send_seq--;
   22e9e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   22ea2:	3b01      	subs	r3, #1
   22ea4:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		net_tcp_set_syn_opt(tcp, options, &optionlen);
   22ea8:	f10d 0217 	add.w	r2, sp, #23
   22eac:	a906      	add	r1, sp, #24
   22eae:	f7ff fe54 	bl	22b5a <net_tcp_set_syn_opt>
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   22eb2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   22eb6:	9602      	str	r6, [sp, #8]
   22eb8:	9501      	str	r5, [sp, #4]
   22eba:	2200      	movs	r2, #0
   22ebc:	9200      	str	r2, [sp, #0]
   22ebe:	aa06      	add	r2, sp, #24
   22ec0:	2112      	movs	r1, #18
   22ec2:	4620      	mov	r0, r4
   22ec4:	f7ff ff3c 	bl	22d40 <net_tcp_prepare_segment>
}
   22ec8:	b008      	add	sp, #32
   22eca:	bd70      	pop	{r4, r5, r6, pc}
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   22ecc:	9602      	str	r6, [sp, #8]
   22ece:	9501      	str	r5, [sp, #4]
   22ed0:	2200      	movs	r2, #0
   22ed2:	9200      	str	r2, [sp, #0]
   22ed4:	4613      	mov	r3, r2
   22ed6:	2110      	movs	r1, #16
   22ed8:	4620      	mov	r0, r4
   22eda:	f7ff ff31 	bl	22d40 <net_tcp_prepare_segment>
   22ede:	e7f3      	b.n	22ec8 <net_tcp_prepare_ack+0x64>

00022ee0 <net_tcp_queue_data>:
{
   22ee0:	b570      	push	{r4, r5, r6, lr}
   22ee2:	b086      	sub	sp, #24
   22ee4:	4605      	mov	r5, r0
   22ee6:	9105      	str	r1, [sp, #20]
	struct net_conn *conn = (struct net_conn *)context->conn_handler;
   22ee8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	return net_buf_frags_len(pkt->frags);
   22eea:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   22eec:	2400      	movs	r4, #0
   22eee:	e002      	b.n	22ef6 <net_tcp_queue_data+0x16>
		bytes += buf->len;
   22ef0:	899a      	ldrh	r2, [r3, #12]
   22ef2:	4414      	add	r4, r2
		buf = buf->frags;
   22ef4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   22ef6:	2b00      	cmp	r3, #0
   22ef8:	d1fa      	bne.n	22ef0 <net_tcp_queue_data+0x10>
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   22efa:	ab05      	add	r3, sp, #20
   22efc:	9302      	str	r3, [sp, #8]
   22efe:	9001      	str	r0, [sp, #4]
   22f00:	2200      	movs	r2, #0
   22f02:	9200      	str	r2, [sp, #0]
   22f04:	4613      	mov	r3, r2
   22f06:	2118      	movs	r1, #24
   22f08:	6e28      	ldr	r0, [r5, #96]	; 0x60
   22f0a:	f7ff ff19 	bl	22d40 <net_tcp_prepare_segment>
	if (ret) {
   22f0e:	4606      	mov	r6, r0
   22f10:	bb10      	cbnz	r0, 22f58 <net_tcp_queue_data+0x78>
	context->tcp->send_seq += data_len;
   22f12:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   22f14:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   22f18:	4423      	add	r3, r4
   22f1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	net_stats.tcp.bytes.sent += bytes;
   22f1e:	4a1b      	ldr	r2, [pc, #108]	; (22f8c <net_tcp_queue_data+0xac>)
   22f20:	6c93      	ldr	r3, [r2, #72]	; 0x48
   22f22:	441c      	add	r4, r3
   22f24:	6494      	str	r4, [r2, #72]	; 0x48
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   22f26:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   22f28:	9905      	ldr	r1, [sp, #20]
   22f2a:	f101 0234 	add.w	r2, r1, #52	; 0x34
	node->next = NULL;
   22f2e:	6348      	str	r0, [r1, #52]	; 0x34
	if (!list->tail) {
   22f30:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   22f34:	b199      	cbz	r1, 22f5e <net_tcp_queue_data+0x7e>
		list->tail->next = node;
   22f36:	600a      	str	r2, [r1, #0]
		list->tail = node;
   22f38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (k_timer_remaining_get(&context->tcp->retry_timer) == 0) {
   22f3c:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return _timeout_remaining_get(&timer->timeout);
   22f3e:	3058      	adds	r0, #88	; 0x58
   22f40:	f006 f942 	bl	291c8 <_timeout_remaining_get>
   22f44:	b180      	cbz	r0, 22f68 <net_tcp_queue_data+0x88>
	do_ref_if_needed(context->tcp, pkt);
   22f46:	9805      	ldr	r0, [sp, #20]
	return pkt->family;
   22f48:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   22f4c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   22f50:	2b0a      	cmp	r3, #10
   22f52:	d015      	beq.n	22f80 <net_tcp_queue_data+0xa0>
   22f54:	f7f9 fe02 	bl	1cb5c <net_pkt_ref>
}
   22f58:	4630      	mov	r0, r6
   22f5a:	b006      	add	sp, #24
   22f5c:	bd70      	pop	{r4, r5, r6, pc}
		list->tail = node;
   22f5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		list->head = node;
   22f62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   22f66:	e7e9      	b.n	22f3c <net_tcp_queue_data+0x5c>
		k_timer_start(&context->tcp->retry_timer,
   22f68:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return ((u32_t)1 << tcp->retry_timeout_shift) * INIT_RETRY_MS;
   22f6a:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
   22f6e:	f003 031f 	and.w	r3, r3, #31
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   22f72:	2200      	movs	r2, #0
   22f74:	21c8      	movs	r1, #200	; 0xc8
   22f76:	4099      	lsls	r1, r3
   22f78:	3058      	adds	r0, #88	; 0x58
   22f7a:	f005 ffe3 	bl	28f44 <_impl_k_timer_start>
   22f7e:	e7e2      	b.n	22f46 <net_tcp_queue_data+0x66>
	do_ref_if_needed(context->tcp, pkt);
   22f80:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   22f84:	2b02      	cmp	r3, #2
   22f86:	d1e5      	bne.n	22f54 <net_tcp_queue_data+0x74>
   22f88:	e7e6      	b.n	22f58 <net_tcp_queue_data+0x78>
   22f8a:	bf00      	nop
   22f8c:	20002950 	.word	0x20002950

00022f90 <net_tcp_foreach>:

void net_tcp_foreach(net_tcp_cb_t cb, void *user_data)
{
   22f90:	b570      	push	{r4, r5, r6, lr}
   22f92:	4606      	mov	r6, r0
   22f94:	460d      	mov	r5, r1
	__asm__ volatile(
   22f96:	f04f 0320 	mov.w	r3, #32
   22f9a:	f3ef 8111 	mrs	r1, BASEPRI
   22f9e:	f383 8811 	msr	BASEPRI, r3
	int i, key;

	key = irq_lock();

	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   22fa2:	2400      	movs	r4, #0
   22fa4:	e000      	b.n	22fa8 <net_tcp_foreach+0x18>
   22fa6:	3401      	adds	r4, #1
   22fa8:	2c05      	cmp	r4, #5
   22faa:	dc16      	bgt.n	22fda <net_tcp_foreach+0x4a>
	return tcp->flags & NET_TCP_IN_USE;
   22fac:	23c8      	movs	r3, #200	; 0xc8
   22fae:	4a0c      	ldr	r2, [pc, #48]	; (22fe0 <net_tcp_foreach+0x50>)
   22fb0:	fb03 2304 	mla	r3, r3, r4, r2
   22fb4:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
		if (!net_tcp_is_used(&tcp_context[i])) {
   22fb8:	f013 0f20 	tst.w	r3, #32
   22fbc:	d0f3      	beq.n	22fa6 <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   22fbe:	f381 8811 	msr	BASEPRI, r1
			continue;
		}

		irq_unlock(key);

		cb(&tcp_context[i], user_data);
   22fc2:	4629      	mov	r1, r5
   22fc4:	20c8      	movs	r0, #200	; 0xc8
   22fc6:	fb00 2004 	mla	r0, r0, r4, r2
   22fca:	47b0      	blx	r6
	__asm__ volatile(
   22fcc:	f04f 0320 	mov.w	r3, #32
   22fd0:	f3ef 8111 	mrs	r1, BASEPRI
   22fd4:	f383 8811 	msr	BASEPRI, r3
   22fd8:	e7e5      	b.n	22fa6 <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   22fda:	f381 8811 	msr	BASEPRI, r1
   22fde:	bd70      	pop	{r4, r5, r6, pc}
   22fe0:	20001e60 	.word	0x20001e60

00022fe4 <net_tcp_get_hdr>:
					+ net_tcp_get_recv_wnd(tcp)) < 0);
}

struct net_tcp_hdr *net_tcp_get_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   22fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
   22fe6:	b085      	sub	sp, #20
   22fe8:	4605      	mov	r5, r0
   22fea:	460e      	mov	r6, r1
	struct net_tcp_hdr *tcp_hdr;
	struct net_buf *frag;
	u16_t pos;

	tcp_hdr = net_pkt_tcp_data(pkt);
   22fec:	f7fa f8df 	bl	1d1ae <net_pkt_tcp_data>
   22ff0:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   22ff2:	2214      	movs	r2, #20
   22ff4:	4601      	mov	r1, r0
   22ff6:	4628      	mov	r0, r5
   22ff8:	f7fa fc82 	bl	1d900 <net_header_fits>
   22ffc:	b120      	cbz	r0, 23008 <net_tcp_get_hdr+0x24>
		return hdr;
   22ffe:	4627      	mov	r7, r4
	if (net_tcp_header_fits(pkt, tcp_hdr)) {
   23000:	b127      	cbz	r7, 2300c <net_tcp_get_hdr+0x28>

		return NULL;
	}

	return hdr;
}
   23002:	4620      	mov	r0, r4
   23004:	b005      	add	sp, #20
   23006:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   23008:	2700      	movs	r7, #0
   2300a:	e7f9      	b.n	23000 <net_tcp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2300c:	68a8      	ldr	r0, [r5, #8]
   2300e:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   23012:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23016:	9600      	str	r6, [sp, #0]
   23018:	2302      	movs	r3, #2
   2301a:	f10d 020e 	add.w	r2, sp, #14
   2301e:	4421      	add	r1, r4
   23020:	f7f9 ff29 	bl	1ce76 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   23024:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   23028:	1cb3      	adds	r3, r6, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   2302a:	9300      	str	r3, [sp, #0]
   2302c:	2302      	movs	r3, #2
   2302e:	f10d 020e 	add.w	r2, sp, #14
   23032:	f7f9 ff20 	bl	1ce76 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->seq), hdr->seq);
   23036:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2303a:	1d33      	adds	r3, r6, #4
   2303c:	9300      	str	r3, [sp, #0]
   2303e:	2304      	movs	r3, #4
   23040:	f10d 020e 	add.w	r2, sp, #14
   23044:	f7f9 ff17 	bl	1ce76 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->ack), hdr->ack);
   23048:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2304c:	f106 0308 	add.w	r3, r6, #8
   23050:	9300      	str	r3, [sp, #0]
   23052:	2304      	movs	r3, #4
   23054:	f10d 020e 	add.w	r2, sp, #14
   23058:	f7f9 ff0d 	bl	1ce76 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->offset);
   2305c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23060:	f106 030c 	add.w	r3, r6, #12
	return net_frag_read(frag, offset, pos, 1, value);
   23064:	9300      	str	r3, [sp, #0]
   23066:	2301      	movs	r3, #1
   23068:	f10d 020e 	add.w	r2, sp, #14
   2306c:	f7f9 ff03 	bl	1ce76 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   23070:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23074:	f106 030d 	add.w	r3, r6, #13
   23078:	9300      	str	r3, [sp, #0]
   2307a:	2301      	movs	r3, #1
   2307c:	f10d 020e 	add.w	r2, sp, #14
   23080:	f7f9 fef9 	bl	1ce76 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd);
   23084:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23088:	f106 030e 	add.w	r3, r6, #14
   2308c:	9300      	str	r3, [sp, #0]
   2308e:	2302      	movs	r3, #2
   23090:	f10d 020e 	add.w	r2, sp, #14
   23094:	f7f9 feef 	bl	1ce76 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23098:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   2309c:	f106 0310 	add.w	r3, r6, #16
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   230a0:	9300      	str	r3, [sp, #0]
   230a2:	2302      	movs	r3, #2
   230a4:	f10d 020e 	add.w	r2, sp, #14
   230a8:	f7f9 fee5 	bl	1ce76 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->urg), hdr->urg);
   230ac:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   230b0:	f106 0312 	add.w	r3, r6, #18
   230b4:	9300      	str	r3, [sp, #0]
   230b6:	2302      	movs	r3, #2
   230b8:	f10d 020e 	add.w	r2, sp, #14
   230bc:	f7f9 fedb 	bl	1ce76 <net_frag_read>
	if (!frag && pos == 0xffff) {
   230c0:	b108      	cbz	r0, 230c6 <net_tcp_get_hdr+0xe2>
	return hdr;
   230c2:	4634      	mov	r4, r6
   230c4:	e79d      	b.n	23002 <net_tcp_get_hdr+0x1e>
	if (!frag && pos == 0xffff) {
   230c6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   230ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   230ce:	429a      	cmp	r2, r3
   230d0:	d001      	beq.n	230d6 <net_tcp_get_hdr+0xf2>
	return hdr;
   230d2:	4634      	mov	r4, r6
   230d4:	e795      	b.n	23002 <net_tcp_get_hdr+0x1e>
		return NULL;
   230d6:	463c      	mov	r4, r7
   230d8:	e793      	b.n	23002 <net_tcp_get_hdr+0x1e>

000230da <net_tcp_validate_seq>:
{
   230da:	b570      	push	{r4, r5, r6, lr}
   230dc:	b086      	sub	sp, #24
   230de:	4606      	mov	r6, r0
   230e0:	4608      	mov	r0, r1
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   230e2:	a901      	add	r1, sp, #4
   230e4:	f7ff ff7e 	bl	22fe4 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   230e8:	b1e8      	cbz	r0, 23126 <net_tcp_validate_seq+0x4c>
   230ea:	4603      	mov	r3, r0
	return ((u16_t)src[0] << 8) | src[1];
   230ec:	7900      	ldrb	r0, [r0, #4]
   230ee:	795c      	ldrb	r4, [r3, #5]
   230f0:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   230f4:	799a      	ldrb	r2, [r3, #6]
   230f6:	79dc      	ldrb	r4, [r3, #7]
   230f8:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   230fc:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	return (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   23100:	f8d6 509c 	ldr.w	r5, [r6, #156]	; 0x9c
   23104:	1b63      	subs	r3, r4, r5
				tcp->send_ack) >= 0) &&
   23106:	2b00      	cmp	r3, #0
   23108:	db0b      	blt.n	23122 <net_tcp_validate_seq+0x48>
					+ net_tcp_get_recv_wnd(tcp)) < 0);
   2310a:	4630      	mov	r0, r6
   2310c:	f7ff fcfc 	bl	22b08 <net_tcp_get_recv_wnd>
		(net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   23110:	4428      	add	r0, r5
   23112:	1a24      	subs	r4, r4, r0
				tcp->send_ack) >= 0) &&
   23114:	2c00      	cmp	r4, #0
   23116:	db02      	blt.n	2311e <net_tcp_validate_seq+0x44>
   23118:	2000      	movs	r0, #0
}
   2311a:	b006      	add	sp, #24
   2311c:	bd70      	pop	{r4, r5, r6, pc}
				tcp->send_ack) >= 0) &&
   2311e:	2001      	movs	r0, #1
   23120:	e7fb      	b.n	2311a <net_tcp_validate_seq+0x40>
   23122:	2000      	movs	r0, #0
   23124:	e7f9      	b.n	2311a <net_tcp_validate_seq+0x40>
		return false;
   23126:	2000      	movs	r0, #0
   23128:	e7f7      	b.n	2311a <net_tcp_validate_seq+0x40>

0002312a <net_tcp_set_hdr>:

struct net_tcp_hdr *net_tcp_set_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   2312a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2312e:	b087      	sub	sp, #28
   23130:	4605      	mov	r5, r0
   23132:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23134:	2214      	movs	r2, #20
   23136:	f7fa fbe3 	bl	1d900 <net_header_fits>
   2313a:	b128      	cbz	r0, 23148 <net_tcp_set_hdr+0x1e>
		return hdr;
   2313c:	4626      	mov	r6, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_tcp_header_fits(pkt, hdr)) {
   2313e:	b12e      	cbz	r6, 2314c <net_tcp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   23140:	4620      	mov	r0, r4
   23142:	b007      	add	sp, #28
   23144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return NULL;
   23148:	2600      	movs	r6, #0
   2314a:	e7f8      	b.n	2313e <net_tcp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2314c:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   23150:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23154:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
   23158:	9702      	str	r7, [sp, #8]
   2315a:	9401      	str	r4, [sp, #4]
   2315c:	f04f 0802 	mov.w	r8, #2
   23160:	f8cd 8000 	str.w	r8, [sp]
   23164:	f10d 0316 	add.w	r3, sp, #22
   23168:	440a      	add	r2, r1
   2316a:	68a9      	ldr	r1, [r5, #8]
   2316c:	4628      	mov	r0, r5
   2316e:	f7f9 fef4 	bl	1cf5a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   23172:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, ALLOC_TIMEOUT);
   23176:	eb04 0308 	add.w	r3, r4, r8
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   2317a:	9702      	str	r7, [sp, #8]
   2317c:	9301      	str	r3, [sp, #4]
   2317e:	f8cd 8000 	str.w	r8, [sp]
   23182:	f10d 0316 	add.w	r3, sp, #22
   23186:	4601      	mov	r1, r0
   23188:	4628      	mov	r0, r5
   2318a:	f7f9 fee6 	bl	1cf5a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->seq), hdr->seq,
   2318e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23192:	1d23      	adds	r3, r4, #4
   23194:	9702      	str	r7, [sp, #8]
   23196:	9301      	str	r3, [sp, #4]
   23198:	f04f 0904 	mov.w	r9, #4
   2319c:	f8cd 9000 	str.w	r9, [sp]
   231a0:	f10d 0316 	add.w	r3, sp, #22
   231a4:	4601      	mov	r1, r0
   231a6:	4628      	mov	r0, r5
   231a8:	f7f9 fed7 	bl	1cf5a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->ack), hdr->ack,
   231ac:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   231b0:	f104 0308 	add.w	r3, r4, #8
   231b4:	9702      	str	r7, [sp, #8]
   231b6:	9301      	str	r3, [sp, #4]
   231b8:	f8cd 9000 	str.w	r9, [sp]
   231bc:	f10d 0316 	add.w	r3, sp, #22
   231c0:	4601      	mov	r1, r0
   231c2:	4628      	mov	r0, r5
   231c4:	f7f9 fec9 	bl	1cf5a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->offset),
   231c8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   231cc:	f104 030c 	add.w	r3, r4, #12
   231d0:	9702      	str	r7, [sp, #8]
   231d2:	9301      	str	r3, [sp, #4]
   231d4:	f04f 0901 	mov.w	r9, #1
   231d8:	f8cd 9000 	str.w	r9, [sp]
   231dc:	f10d 0316 	add.w	r3, sp, #22
   231e0:	4601      	mov	r1, r0
   231e2:	4628      	mov	r0, r5
   231e4:	f7f9 feb9 	bl	1cf5a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->flags),
   231e8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   231ec:	f104 030d 	add.w	r3, r4, #13
   231f0:	9702      	str	r7, [sp, #8]
   231f2:	9301      	str	r3, [sp, #4]
   231f4:	f8cd 9000 	str.w	r9, [sp]
   231f8:	f10d 0316 	add.w	r3, sp, #22
   231fc:	4601      	mov	r1, r0
   231fe:	4628      	mov	r0, r5
   23200:	f7f9 feab 	bl	1cf5a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd,
   23204:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23208:	f104 030e 	add.w	r3, r4, #14
   2320c:	9702      	str	r7, [sp, #8]
   2320e:	9301      	str	r3, [sp, #4]
   23210:	f8cd 8000 	str.w	r8, [sp]
   23214:	f10d 0316 	add.w	r3, sp, #22
   23218:	4601      	mov	r1, r0
   2321a:	4628      	mov	r0, r5
   2321c:	f7f9 fe9d 	bl	1cf5a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   23220:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, ALLOC_TIMEOUT);
   23224:	f104 0310 	add.w	r3, r4, #16
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   23228:	9702      	str	r7, [sp, #8]
   2322a:	9301      	str	r3, [sp, #4]
   2322c:	f8cd 8000 	str.w	r8, [sp]
   23230:	f10d 0316 	add.w	r3, sp, #22
   23234:	4601      	mov	r1, r0
   23236:	4628      	mov	r0, r5
   23238:	f7f9 fe8f 	bl	1cf5a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->urg), hdr->urg,
   2323c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23240:	f104 0312 	add.w	r3, r4, #18
   23244:	9702      	str	r7, [sp, #8]
   23246:	9301      	str	r3, [sp, #4]
   23248:	f8cd 8000 	str.w	r8, [sp]
   2324c:	f10d 0316 	add.w	r3, sp, #22
   23250:	4601      	mov	r1, r0
   23252:	4628      	mov	r0, r5
   23254:	f7f9 fe81 	bl	1cf5a <net_pkt_write>
	if (!frag) {
   23258:	2800      	cmp	r0, #0
   2325a:	f47f af71 	bne.w	23140 <net_tcp_set_hdr+0x16>
		return NULL;
   2325e:	4634      	mov	r4, r6
   23260:	e76e      	b.n	23140 <net_tcp_set_hdr+0x16>

00023262 <net_tcp_get_chksum>:

u16_t net_tcp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   23262:	b570      	push	{r4, r5, r6, lr}
   23264:	b084      	sub	sp, #16
   23266:	4605      	mov	r5, r0
   23268:	460e      	mov	r6, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   2326a:	f7f9 ffa0 	bl	1d1ae <net_pkt_tcp_data>
   2326e:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23270:	2214      	movs	r2, #20
   23272:	4601      	mov	r1, r0
   23274:	4628      	mov	r0, r5
   23276:	f7fa fb43 	bl	1d900 <net_header_fits>
   2327a:	b120      	cbz	r0, 23286 <net_tcp_get_chksum+0x24>
		return hdr;
   2327c:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   2327e:	b123      	cbz	r3, 2328a <net_tcp_get_chksum+0x28>
		return hdr->chksum;
   23280:	8a20      	ldrh	r0, [r4, #16]
			     1 + 1 + 2 /* offset + flags + wnd */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   23282:	b004      	add	sp, #16
   23284:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   23286:	2300      	movs	r3, #0
   23288:	e7f9      	b.n	2327e <net_tcp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   2328a:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   2328e:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   23292:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   23294:	3110      	adds	r1, #16
   23296:	f10d 030e 	add.w	r3, sp, #14
   2329a:	9300      	str	r3, [sp, #0]
   2329c:	2302      	movs	r3, #2
   2329e:	aa03      	add	r2, sp, #12
   232a0:	b289      	uxth	r1, r1
   232a2:	4630      	mov	r0, r6
   232a4:	f7f9 fde7 	bl	1ce76 <net_frag_read>
	return chksum;
   232a8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   232ac:	e7e9      	b.n	23282 <net_tcp_get_chksum+0x20>

000232ae <net_tcp_set_chksum>:

struct net_buf *net_tcp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   232ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   232b2:	b086      	sub	sp, #24
   232b4:	4606      	mov	r6, r0
   232b6:	460d      	mov	r5, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum = 0;
   232b8:	2300      	movs	r3, #0
   232ba:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   232be:	f7f9 ff76 	bl	1d1ae <net_pkt_tcp_data>
   232c2:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   232c4:	2214      	movs	r2, #20
   232c6:	4601      	mov	r1, r0
   232c8:	4630      	mov	r0, r6
   232ca:	f7fa fb19 	bl	1d900 <net_header_fits>
   232ce:	b170      	cbz	r0, 232ee <net_tcp_set_chksum+0x40>
		return hdr;
   232d0:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   232d2:	b173      	cbz	r3, 232f2 <net_tcp_set_chksum+0x44>
		hdr->chksum = 0;
   232d4:	2300      	movs	r3, #0
   232d6:	7423      	strb	r3, [r4, #16]
   232d8:	7463      	strb	r3, [r4, #17]
	return net_calc_chksum(pkt, IPPROTO_TCP);
   232da:	2106      	movs	r1, #6
   232dc:	4630      	mov	r0, r6
   232de:	f7fa fab6 	bl	1d84e <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_tcp(pkt);
   232e2:	43c0      	mvns	r0, r0
   232e4:	8220      	strh	r0, [r4, #16]

		return frag;
   232e6:	4628      	mov	r0, r5
			     (u8_t *)&chksum, ALLOC_TIMEOUT);

	NET_ASSERT(frag);

	return frag;
}
   232e8:	b006      	add	sp, #24
   232ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   232ee:	2300      	movs	r3, #0
   232f0:	e7ef      	b.n	232d2 <net_tcp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   232f2:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   232f6:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   232fa:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   232fc:	3210      	adds	r2, #16
   232fe:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
   23302:	f8cd 8008 	str.w	r8, [sp, #8]
   23306:	f10d 0416 	add.w	r4, sp, #22
   2330a:	9401      	str	r4, [sp, #4]
   2330c:	2702      	movs	r7, #2
   2330e:	9700      	str	r7, [sp, #0]
   23310:	ab05      	add	r3, sp, #20
   23312:	b292      	uxth	r2, r2
   23314:	4629      	mov	r1, r5
   23316:	4630      	mov	r0, r6
   23318:	f7f9 fe1f 	bl	1cf5a <net_pkt_write>
   2331c:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_TCP);
   2331e:	2106      	movs	r1, #6
   23320:	4630      	mov	r0, r6
   23322:	f7fa fa94 	bl	1d84e <net_calc_chksum>
	chksum = ~net_calc_chksum_tcp(pkt);
   23326:	43c0      	mvns	r0, r0
   23328:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   2332c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   23330:	3a02      	subs	r2, #2
   23332:	f8cd 8008 	str.w	r8, [sp, #8]
   23336:	9401      	str	r4, [sp, #4]
   23338:	9700      	str	r7, [sp, #0]
   2333a:	ab05      	add	r3, sp, #20
   2333c:	b292      	uxth	r2, r2
   2333e:	4629      	mov	r1, r5
   23340:	4630      	mov	r0, r6
   23342:	f7f9 fe0a 	bl	1cf5a <net_pkt_write>
	return frag;
   23346:	e7cf      	b.n	232e8 <net_tcp_set_chksum+0x3a>

00023348 <net_tcp_send_pkt>:
{
   23348:	b570      	push	{r4, r5, r6, lr}
   2334a:	b086      	sub	sp, #24
   2334c:	4605      	mov	r5, r0
	return pkt->context;
   2334e:	68c6      	ldr	r6, [r0, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   23350:	a901      	add	r1, sp, #4
   23352:	f7ff fe47 	bl	22fe4 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   23356:	2800      	cmp	r0, #0
   23358:	f000 8086 	beq.w	23468 <net_tcp_send_pkt+0x120>
   2335c:	4604      	mov	r4, r0
	return ((u16_t)src[0] << 8) | src[1];
   2335e:	7a02      	ldrb	r2, [r0, #8]
   23360:	7a43      	ldrb	r3, [r0, #9]
   23362:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   23366:	7a81      	ldrb	r1, [r0, #10]
   23368:	7ac3      	ldrb	r3, [r0, #11]
   2336a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   2336e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	if (sys_get_be32(tcp_hdr->ack) != ctx->tcp->send_ack) {
   23372:	6e32      	ldr	r2, [r6, #96]	; 0x60
   23374:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
   23378:	429a      	cmp	r2, r3
   2337a:	d039      	beq.n	233f0 <net_tcp_send_pkt+0xa8>
	sys_put_be16(val >> 16, dst);
   2337c:	0c13      	lsrs	r3, r2, #16
	dst[0] = val >> 8;
   2337e:	0a19      	lsrs	r1, r3, #8
   23380:	7201      	strb	r1, [r0, #8]
	dst[1] = val;
   23382:	7243      	strb	r3, [r0, #9]
	dst[0] = val >> 8;
   23384:	f3c2 2307 	ubfx	r3, r2, #8, #8
   23388:	7283      	strb	r3, [r0, #10]
	dst[1] = val;
   2338a:	72c2      	strb	r2, [r0, #11]
		calc_chksum = true;
   2338c:	2201      	movs	r2, #1
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   2338e:	6e33      	ldr	r3, [r6, #96]	; 0x60
   23390:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   23394:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   23398:	4299      	cmp	r1, r3
   2339a:	d007      	beq.n	233ac <net_tcp_send_pkt+0x64>
		(tcp_hdr->flags & NET_TCP_ACK) == 0) {
   2339c:	7b63      	ldrb	r3, [r4, #13]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   2339e:	f013 0f10 	tst.w	r3, #16
   233a2:	d103      	bne.n	233ac <net_tcp_send_pkt+0x64>
		tcp_hdr->flags |= NET_TCP_ACK;
   233a4:	f043 0310 	orr.w	r3, r3, #16
   233a8:	7363      	strb	r3, [r4, #13]
		calc_chksum = true;
   233aa:	2201      	movs	r2, #1
	if (calc_chksum) {
   233ac:	bb12      	cbnz	r2, 233f4 <net_tcp_send_pkt+0xac>
	if (tcp_hdr->flags & NET_TCP_FIN) {
   233ae:	7b63      	ldrb	r3, [r4, #13]
   233b0:	f013 0f01 	tst.w	r3, #1
   233b4:	d006      	beq.n	233c4 <net_tcp_send_pkt+0x7c>
		ctx->tcp->fin_sent = 1;
   233b6:	6e32      	ldr	r2, [r6, #96]	; 0x60
   233b8:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   233bc:	f043 0302 	orr.w	r3, r3, #2
   233c0:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
	ctx->tcp->sent_ack = ctx->tcp->send_ack;
   233c4:	6e33      	ldr	r3, [r6, #96]	; 0x60
   233c6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   233ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_tcp_set_hdr(pkt, tcp_hdr);
   233ce:	4621      	mov	r1, r4
   233d0:	4628      	mov	r0, r5
   233d2:	f7ff feaa 	bl	2312a <net_tcp_set_hdr>
	return pkt->family;
   233d6:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   233da:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (is_6lo_technology(pkt)) {
   233de:	2b0a      	cmp	r3, #10
   233e0:	d00d      	beq.n	233fe <net_tcp_send_pkt+0xb6>
	return net_send_data(pkt);
   233e2:	4628      	mov	r0, r5
   233e4:	f7f6 ffc8 	bl	1a378 <net_send_data>
   233e8:	4604      	mov	r4, r0
}
   233ea:	4620      	mov	r0, r4
   233ec:	b006      	add	sp, #24
   233ee:	bd70      	pop	{r4, r5, r6, pc}
	bool calc_chksum = false;
   233f0:	2200      	movs	r2, #0
   233f2:	e7cc      	b.n	2338e <net_tcp_send_pkt+0x46>
		net_tcp_set_chksum(pkt, pkt->frags);
   233f4:	68a9      	ldr	r1, [r5, #8]
   233f6:	4628      	mov	r0, r5
   233f8:	f7ff ff59 	bl	232ae <net_tcp_set_chksum>
   233fc:	e7d7      	b.n	233ae <net_tcp_send_pkt+0x66>
	if (is_6lo_technology(pkt)) {
   233fe:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   23402:	2b02      	cmp	r3, #2
   23404:	d1ed      	bne.n	233e2 <net_tcp_send_pkt+0x9a>
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   23406:	6e33      	ldr	r3, [r6, #96]	; 0x60
	return list->head;
   23408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   2340c:	b10b      	cbz	r3, 23412 <net_tcp_send_pkt+0xca>
   2340e:	3b34      	subs	r3, #52	; 0x34
   23410:	e006      	b.n	23420 <net_tcp_send_pkt+0xd8>
   23412:	2300      	movs	r3, #0
   23414:	e004      	b.n	23420 <net_tcp_send_pkt+0xd8>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23416:	4611      	mov	r1, r2
   23418:	e009      	b.n	2342e <net_tcp_send_pkt+0xe6>
	return node->next;
   2341a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2341c:	f1a2 0334 	sub.w	r3, r2, #52	; 0x34
   23420:	b163      	cbz	r3, 2343c <net_tcp_send_pkt+0xf4>
			if (check_pkt == pkt) {
   23422:	42ab      	cmp	r3, r5
   23424:	d009      	beq.n	2343a <net_tcp_send_pkt+0xf2>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23426:	f113 0234 	adds.w	r2, r3, #52	; 0x34
   2342a:	d0f4      	beq.n	23416 <net_tcp_send_pkt+0xce>
	return node->next;
   2342c:	6b59      	ldr	r1, [r3, #52]	; 0x34
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   2342e:	b111      	cbz	r1, 23436 <net_tcp_send_pkt+0xee>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23430:	2a00      	cmp	r2, #0
   23432:	d1f2      	bne.n	2341a <net_tcp_send_pkt+0xd2>
   23434:	e7f2      	b.n	2341c <net_tcp_send_pkt+0xd4>
   23436:	2300      	movs	r3, #0
   23438:	e7f2      	b.n	23420 <net_tcp_send_pkt+0xd8>
				pkt_in_slist = true;
   2343a:	2301      	movs	r3, #1
		if (pkt_in_slist) {
   2343c:	2b00      	cmp	r3, #0
   2343e:	d0d0      	beq.n	233e2 <net_tcp_send_pkt+0x9a>
			new_pkt = net_pkt_clone(pkt, ALLOC_TIMEOUT);
   23440:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   23444:	4628      	mov	r0, r5
   23446:	f7f9 fec7 	bl	1d1d8 <net_pkt_clone>
			if (!new_pkt) {
   2344a:	4605      	mov	r5, r0
   2344c:	b178      	cbz	r0, 2346e <net_tcp_send_pkt+0x126>
			ret = net_send_data(new_pkt);
   2344e:	f7f6 ff93 	bl	1a378 <net_send_data>
			if (ret < 0) {
   23452:	1e04      	subs	r4, r0, #0
   23454:	db04      	blt.n	23460 <net_tcp_send_pkt+0x118>
	net_stats.tcp.rexmit++;
   23456:	4a07      	ldr	r2, [pc, #28]	; (23474 <net_tcp_send_pkt+0x12c>)
   23458:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2345a:	3301      	adds	r3, #1
   2345c:	6713      	str	r3, [r2, #112]	; 0x70
   2345e:	e7c4      	b.n	233ea <net_tcp_send_pkt+0xa2>
				net_pkt_unref(new_pkt);
   23460:	4628      	mov	r0, r5
   23462:	f7f9 fb8a 	bl	1cb7a <net_pkt_unref>
   23466:	e7c0      	b.n	233ea <net_tcp_send_pkt+0xa2>
		return -EMSGSIZE;
   23468:	f06f 0479 	mvn.w	r4, #121	; 0x79
   2346c:	e7bd      	b.n	233ea <net_tcp_send_pkt+0xa2>
				return -ENOMEM;
   2346e:	f06f 040b 	mvn.w	r4, #11
   23472:	e7ba      	b.n	233ea <net_tcp_send_pkt+0xa2>
   23474:	20002950 	.word	0x20002950

00023478 <tcp_retry_expired>:
	return (!list->head);
   23478:	6b43      	ldr	r3, [r0, #52]	; 0x34
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   2347a:	2b00      	cmp	r3, #0
   2347c:	d05c      	beq.n	23538 <tcp_retry_expired+0xc0>
{
   2347e:	b510      	push	{r4, lr}
   23480:	f1a0 0158 	sub.w	r1, r0, #88	; 0x58
   23484:	4604      	mov	r4, r0
		tcp->retry_timeout_shift++;
   23486:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   2348a:	f002 031f 	and.w	r3, r2, #31
   2348e:	3301      	adds	r3, #1
   23490:	f003 031f 	and.w	r3, r3, #31
   23494:	f363 0204 	bfi	r2, r3, #0, #5
   23498:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   2349c:	2b09      	cmp	r3, #9
   2349e:	dc2f      	bgt.n	23500 <tcp_retry_expired+0x88>
   234a0:	2200      	movs	r2, #0
   234a2:	21c8      	movs	r1, #200	; 0xc8
   234a4:	4099      	lsls	r1, r3
   234a6:	f005 fd4d 	bl	28f44 <_impl_k_timer_start>
	return list->head;
   234aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   234ac:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
	return pkt->sent_or_eof;
   234b0:	791a      	ldrb	r2, [r3, #4]
		if (net_pkt_sent(pkt)) {
   234b2:	f012 0f01 	tst.w	r2, #1
   234b6:	d00d      	beq.n	234d4 <tcp_retry_expired+0x5c>
	return pkt->family;
   234b8:	f3c2 02c3 	ubfx	r2, r2, #3, #4
			do_ref_if_needed(tcp, pkt);
   234bc:	2a0a      	cmp	r2, #10
   234be:	d023      	beq.n	23508 <tcp_retry_expired+0x90>
   234c0:	4620      	mov	r0, r4
   234c2:	f7f9 fb4b 	bl	1cb5c <net_pkt_ref>
   234c6:	4604      	mov	r4, r0
	pkt->sent_or_eof = sent;
   234c8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   234cc:	f36f 0300 	bfc	r3, #0, #1
   234d0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->pkt_queued = send;
   234d4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   234d8:	f043 0302 	orr.w	r3, r3, #2
   234dc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   234e0:	4620      	mov	r0, r4
   234e2:	f7ff ff31 	bl	23348 <net_tcp_send_pkt>
   234e6:	2800      	cmp	r0, #0
   234e8:	db13      	blt.n	23512 <tcp_retry_expired+0x9a>
	return pkt->family;
   234ea:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   234ee:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   234f2:	2b0a      	cmp	r3, #10
   234f4:	d01b      	beq.n	2352e <tcp_retry_expired+0xb6>
   234f6:	4a11      	ldr	r2, [pc, #68]	; (2353c <tcp_retry_expired+0xc4>)
   234f8:	6f13      	ldr	r3, [r2, #112]	; 0x70
   234fa:	3301      	adds	r3, #1
   234fc:	6713      	str	r3, [r2, #112]	; 0x70
   234fe:	bd10      	pop	{r4, pc}
			abort_connection(tcp);
   23500:	4608      	mov	r0, r1
   23502:	f7ff f99a 	bl	2283a <abort_connection>
			return;
   23506:	bd10      	pop	{r4, pc}
			do_ref_if_needed(tcp, pkt);
   23508:	f813 3c07 	ldrb.w	r3, [r3, #-7]
   2350c:	2b02      	cmp	r3, #2
   2350e:	d1d7      	bne.n	234c0 <tcp_retry_expired+0x48>
   23510:	e7da      	b.n	234c8 <tcp_retry_expired+0x50>
   23512:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23516:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   2351a:	2b0a      	cmp	r3, #10
   2351c:	d103      	bne.n	23526 <tcp_retry_expired+0xae>
   2351e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   23522:	2b02      	cmp	r3, #2
   23524:	d0e1      	beq.n	234ea <tcp_retry_expired+0x72>
			net_pkt_unref(pkt);
   23526:	4620      	mov	r0, r4
   23528:	f7f9 fb27 	bl	1cb7a <net_pkt_unref>
   2352c:	bd10      	pop	{r4, pc}
			    !is_6lo_technology(pkt)) {
   2352e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   23532:	2b02      	cmp	r3, #2
   23534:	d1df      	bne.n	234f6 <tcp_retry_expired+0x7e>
   23536:	e7e2      	b.n	234fe <tcp_retry_expired+0x86>
   23538:	4770      	bx	lr
   2353a:	bf00      	nop
   2353c:	20002950 	.word	0x20002950

00023540 <net_tcp_send_data>:
{
   23540:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   23542:	6e03      	ldr	r3, [r0, #96]	; 0x60
   23544:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
   23548:	b10c      	cbz	r4, 2354e <net_tcp_send_data+0xe>
   2354a:	3c34      	subs	r4, #52	; 0x34
   2354c:	e013      	b.n	23576 <net_tcp_send_data+0x36>
   2354e:	2400      	movs	r4, #0
   23550:	e011      	b.n	23576 <net_tcp_send_data+0x36>
				net_pkt_unref(pkt);
   23552:	4620      	mov	r0, r4
   23554:	f7f9 fb11 	bl	1cb7a <net_pkt_unref>
	pkt->pkt_queued = send;
   23558:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2355c:	f043 0302 	orr.w	r3, r3, #2
   23560:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23564:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   23568:	d01e      	beq.n	235a8 <net_tcp_send_data+0x68>
	return node->next;
   2356a:	6b62      	ldr	r2, [r4, #52]	; 0x34
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   2356c:	b1f2      	cbz	r2, 235ac <net_tcp_send_data+0x6c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2356e:	b103      	cbz	r3, 23572 <net_tcp_send_data+0x32>
	return node->next;
   23570:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23572:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
   23576:	b1dc      	cbz	r4, 235b0 <net_tcp_send_data+0x70>
	return pkt->pkt_queued;
   23578:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		if (net_pkt_queued(pkt)) {
   2357c:	f013 0f02 	tst.w	r3, #2
   23580:	d1f0      	bne.n	23564 <net_tcp_send_data+0x24>
		if (!net_pkt_sent(pkt)) {
   23582:	f013 0f01 	tst.w	r3, #1
   23586:	d1ed      	bne.n	23564 <net_tcp_send_data+0x24>
			ret = net_tcp_send_pkt(pkt);
   23588:	4620      	mov	r0, r4
   2358a:	f7ff fedd 	bl	23348 <net_tcp_send_pkt>
			if (ret < 0 && !is_6lo_technology(pkt)) {
   2358e:	2800      	cmp	r0, #0
   23590:	dae2      	bge.n	23558 <net_tcp_send_data+0x18>
	return pkt->family;
   23592:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23596:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   2359a:	2b0a      	cmp	r3, #10
   2359c:	d1d9      	bne.n	23552 <net_tcp_send_data+0x12>
   2359e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   235a2:	2b02      	cmp	r3, #2
   235a4:	d1d5      	bne.n	23552 <net_tcp_send_data+0x12>
   235a6:	e7d7      	b.n	23558 <net_tcp_send_data+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   235a8:	461a      	mov	r2, r3
   235aa:	e7df      	b.n	2356c <net_tcp_send_data+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   235ac:	2400      	movs	r4, #0
   235ae:	e7e2      	b.n	23576 <net_tcp_send_data+0x36>
}
   235b0:	2000      	movs	r0, #0
   235b2:	bd10      	pop	{r4, pc}

000235b4 <net_tcp_ack_received>:
{
   235b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   235b8:	b087      	sub	sp, #28
   235ba:	4681      	mov	r9, r0
   235bc:	4688      	mov	r8, r1
	struct net_tcp *tcp = ctx->tcp;
   235be:	6e05      	ldr	r5, [r0, #96]	; 0x60
	return (!list->head);
   235c0:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   235c4:	b10b      	cbz	r3, 235ca <net_tcp_ack_received+0x16>
		valid_ack = true;
   235c6:	2700      	movs	r7, #0
   235c8:	e033      	b.n	23632 <net_tcp_ack_received+0x7e>
	net_stats.tcp.ackerr++;
   235ca:	4a51      	ldr	r2, [pc, #324]	; (23710 <net_tcp_ack_received+0x15c>)
   235cc:	6e53      	ldr	r3, [r2, #100]	; 0x64
   235ce:	3301      	adds	r3, #1
   235d0:	6653      	str	r3, [r2, #100]	; 0x64
   235d2:	e7f8      	b.n	235c6 <net_tcp_ack_received+0x12>
		list->head = node->next;
   235d4:	6823      	ldr	r3, [r4, #0]
   235d6:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   235da:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   235de:	42a2      	cmp	r2, r4
   235e0:	d005      	beq.n	235ee <net_tcp_ack_received+0x3a>
	node->next = NULL;
   235e2:	2300      	movs	r3, #0
   235e4:	6023      	str	r3, [r4, #0]
			net_pkt_unref(pkt);
   235e6:	4630      	mov	r0, r6
   235e8:	f7f9 fac7 	bl	1cb7a <net_pkt_unref>
   235ec:	e021      	b.n	23632 <net_tcp_ack_received+0x7e>
			list->tail = list->head;
   235ee:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   235f2:	e7f6      	b.n	235e2 <net_tcp_ack_received+0x2e>
   235f4:	4a46      	ldr	r2, [pc, #280]	; (23710 <net_tcp_ack_received+0x15c>)
   235f6:	6e53      	ldr	r3, [r2, #100]	; 0x64
   235f8:	3301      	adds	r3, #1
   235fa:	6653      	str	r3, [r2, #100]	; 0x64
	if (valid_ack && net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED) {
   235fc:	b12f      	cbz	r7, 2360a <net_tcp_ack_received+0x56>
	return (enum net_tcp_state)tcp->state;
   235fe:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   23602:	f3c3 3343 	ubfx	r3, r3, #13, #4
   23606:	2b04      	cmp	r3, #4
   23608:	d046      	beq.n	23698 <net_tcp_ack_received+0xe4>
}
   2360a:	b007      	add	sp, #28
   2360c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_2);
   23610:	2108      	movs	r1, #8
   23612:	4628      	mov	r0, r5
   23614:	f7ff faf7 	bl	22c06 <net_tcp_change_state>
		list->head = node->next;
   23618:	6823      	ldr	r3, [r4, #0]
   2361a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   2361e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   23622:	42a2      	cmp	r2, r4
   23624:	d035      	beq.n	23692 <net_tcp_ack_received+0xde>
	node->next = NULL;
   23626:	2300      	movs	r3, #0
   23628:	6023      	str	r3, [r4, #0]
		net_pkt_unref(pkt);
   2362a:	4630      	mov	r0, r6
   2362c:	f7f9 faa5 	bl	1cb7a <net_pkt_unref>
		valid_ack = true;
   23630:	2701      	movs	r7, #1
	return (!list->head);
   23632:	f8d5 408c 	ldr.w	r4, [r5, #140]	; 0x8c
	while (!sys_slist_is_empty(list)) {
   23636:	2c00      	cmp	r4, #0
   23638:	d0e0      	beq.n	235fc <net_tcp_ack_received+0x48>
		pkt = CONTAINER_OF(head, struct net_pkt, sent_list);
   2363a:	f1a4 0634 	sub.w	r6, r4, #52	; 0x34
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   2363e:	a901      	add	r1, sp, #4
   23640:	4630      	mov	r0, r6
   23642:	f7ff fccf 	bl	22fe4 <net_tcp_get_hdr>
		if (!tcp_hdr) {
   23646:	4602      	mov	r2, r0
   23648:	2800      	cmp	r0, #0
   2364a:	d0c3      	beq.n	235d4 <net_tcp_ack_received+0x20>
	return ((u16_t)src[0] << 8) | src[1];
   2364c:	7903      	ldrb	r3, [r0, #4]
   2364e:	7941      	ldrb	r1, [r0, #5]
   23650:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   23654:	7980      	ldrb	r0, [r0, #6]
   23656:	79d3      	ldrb	r3, [r2, #7]
   23658:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   2365c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	return pkt->appdatalen;
   23660:	f834 3c04 	ldrh.w	r3, [r4, #-4]
		seq = sys_get_be32(tcp_hdr->seq) + net_pkt_appdatalen(pkt) - 1;
   23664:	440b      	add	r3, r1
   23666:	3b01      	subs	r3, #1
   23668:	eba8 0303 	sub.w	r3, r8, r3
		if (!net_tcp_seq_greater(ack, seq)) {
   2366c:	2b00      	cmp	r3, #0
   2366e:	ddc1      	ble.n	235f4 <net_tcp_ack_received+0x40>
		if (tcp_hdr->flags & NET_TCP_FIN) {
   23670:	7b53      	ldrb	r3, [r2, #13]
   23672:	f013 0f01 	tst.w	r3, #1
   23676:	d0cf      	beq.n	23618 <net_tcp_ack_received+0x64>
   23678:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   2367c:	f3c3 3343 	ubfx	r3, r3, #13, #4
			if (s == NET_TCP_FIN_WAIT_1) {
   23680:	2b07      	cmp	r3, #7
   23682:	d0c5      	beq.n	23610 <net_tcp_ack_received+0x5c>
			} else if (s == NET_TCP_CLOSING) {
   23684:	2b0a      	cmp	r3, #10
   23686:	d1c7      	bne.n	23618 <net_tcp_ack_received+0x64>
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   23688:	2109      	movs	r1, #9
   2368a:	4628      	mov	r0, r5
   2368c:	f7ff fabb 	bl	22c06 <net_tcp_change_state>
   23690:	e7c2      	b.n	23618 <net_tcp_ack_received+0x64>
			list->tail = list->head;
   23692:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   23696:	e7c6      	b.n	23626 <net_tcp_ack_received+0x72>
		restart_timer(ctx->tcp);
   23698:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
   2369c:	f7ff f8db 	bl	22856 <restart_timer>
		if (ctx->tcp->flags & NET_TCP_RETRYING) {
   236a0:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
   236a4:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
   236a8:	f412 7f00 	tst.w	r2, #512	; 0x200
   236ac:	d0ad      	beq.n	2360a <net_tcp_ack_received+0x56>
	return list->head;
   236ae:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   236b2:	b108      	cbz	r0, 236b8 <net_tcp_ack_received+0x104>
   236b4:	3834      	subs	r0, #52	; 0x34
   236b6:	e013      	b.n	236e0 <net_tcp_ack_received+0x12c>
   236b8:	2000      	movs	r0, #0
   236ba:	e011      	b.n	236e0 <net_tcp_ack_received+0x12c>
					do_ref_if_needed(ctx->tcp, pkt);
   236bc:	f7f9 fa4e 	bl	1cb5c <net_pkt_ref>
	pkt->sent_or_eof = sent;
   236c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   236c4:	f36f 0300 	bfc	r3, #0, #1
   236c8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   236cc:	b140      	cbz	r0, 236e0 <net_tcp_ack_received+0x12c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   236ce:	f110 0334 	adds.w	r3, r0, #52	; 0x34
   236d2:	d014      	beq.n	236fe <net_tcp_ack_received+0x14a>
	return node->next;
   236d4:	6b42      	ldr	r2, [r0, #52]	; 0x34
   236d6:	b1a2      	cbz	r2, 23702 <net_tcp_ack_received+0x14e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   236d8:	b103      	cbz	r3, 236dc <net_tcp_ack_received+0x128>
	return node->next;
   236da:	6b43      	ldr	r3, [r0, #52]	; 0x34
   236dc:	f1a3 0034 	sub.w	r0, r3, #52	; 0x34
   236e0:	b188      	cbz	r0, 23706 <net_tcp_ack_received+0x152>
	return pkt->sent_or_eof;
   236e2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
				if (net_pkt_sent(pkt)) {
   236e6:	f013 0f01 	tst.w	r3, #1
   236ea:	d0ef      	beq.n	236cc <net_tcp_ack_received+0x118>
	return pkt->family;
   236ec:	f3c3 03c3 	ubfx	r3, r3, #3, #4
					do_ref_if_needed(ctx->tcp, pkt);
   236f0:	2b0a      	cmp	r3, #10
   236f2:	d1e3      	bne.n	236bc <net_tcp_ack_received+0x108>
   236f4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   236f8:	2b02      	cmp	r3, #2
   236fa:	d1df      	bne.n	236bc <net_tcp_ack_received+0x108>
   236fc:	e7e0      	b.n	236c0 <net_tcp_ack_received+0x10c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   236fe:	461a      	mov	r2, r3
   23700:	e7e9      	b.n	236d6 <net_tcp_ack_received+0x122>
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   23702:	2000      	movs	r0, #0
   23704:	e7ec      	b.n	236e0 <net_tcp_ack_received+0x12c>
			net_tcp_send_data(ctx);
   23706:	4648      	mov	r0, r9
   23708:	f7ff ff1a 	bl	23540 <net_tcp_send_data>
}
   2370c:	e77d      	b.n	2360a <net_tcp_ack_received+0x56>
   2370e:	bf00      	nop
   23710:	20002950 	.word	0x20002950

00023714 <iface2str>:
	if (iface->l2 == &NET_L2_GET_NAME(BLUETOOTH)) {
   23714:	6842      	ldr	r2, [r0, #4]
   23716:	4b08      	ldr	r3, [pc, #32]	; (23738 <iface2str+0x24>)
   23718:	429a      	cmp	r2, r3
   2371a:	d004      	beq.n	23726 <iface2str+0x12>
	if (extra) {
   2371c:	b151      	cbz	r1, 23734 <iface2str+0x20>
		*extra = "==============";
   2371e:	4b07      	ldr	r3, [pc, #28]	; (2373c <iface2str+0x28>)
   23720:	600b      	str	r3, [r1, #0]
	return "<unknown type>";
   23722:	4807      	ldr	r0, [pc, #28]	; (23740 <iface2str+0x2c>)
   23724:	4770      	bx	lr
		if (extra) {
   23726:	b119      	cbz	r1, 23730 <iface2str+0x1c>
			*extra = "=========";
   23728:	4b06      	ldr	r3, [pc, #24]	; (23744 <iface2str+0x30>)
   2372a:	600b      	str	r3, [r1, #0]
		return "Bluetooth";
   2372c:	4806      	ldr	r0, [pc, #24]	; (23748 <iface2str+0x34>)
   2372e:	4770      	bx	lr
   23730:	4805      	ldr	r0, [pc, #20]	; (23748 <iface2str+0x34>)
   23732:	4770      	bx	lr
	return "<unknown type>";
   23734:	4802      	ldr	r0, [pc, #8]	; (23740 <iface2str+0x2c>)
}
   23736:	4770      	bx	lr
   23738:	0002da34 	.word	0x0002da34
   2373c:	0003004c 	.word	0x0003004c
   23740:	00030030 	.word	0x00030030
   23744:	00030040 	.word	0x00030040
   23748:	00030024 	.word	0x00030024

0002374c <slab_pool_found_already>:
				    struct k_mem_slab *slab,
				    struct net_buf_pool *pool)
{
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   2374c:	2300      	movs	r3, #0
   2374e:	2b05      	cmp	r3, #5
   23750:	dc18      	bgt.n	23784 <slab_pool_found_already+0x38>
{
   23752:	b410      	push	{r4}
   23754:	e008      	b.n	23768 <slab_pool_found_already+0x1c>
		if (slab) {
			if (info->tx_slabs[i] == slab) {
				return true;
			}
		} else {
			if (info->data_pools[i] == pool) {
   23756:	f103 0408 	add.w	r4, r3, #8
   2375a:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   2375e:	4294      	cmp	r4, r2
   23760:	d00e      	beq.n	23780 <slab_pool_found_already+0x34>
	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   23762:	3301      	adds	r3, #1
   23764:	2b05      	cmp	r3, #5
   23766:	dc08      	bgt.n	2377a <slab_pool_found_already+0x2e>
		if (slab) {
   23768:	2900      	cmp	r1, #0
   2376a:	d0f4      	beq.n	23756 <slab_pool_found_already+0xa>
			if (info->tx_slabs[i] == slab) {
   2376c:	1c9c      	adds	r4, r3, #2
   2376e:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   23772:	42a1      	cmp	r1, r4
   23774:	d1f5      	bne.n	23762 <slab_pool_found_already+0x16>
				return true;
   23776:	2001      	movs	r0, #1
   23778:	e000      	b.n	2377c <slab_pool_found_already+0x30>
				return true;
			}
		}
	}

	return false;
   2377a:	2000      	movs	r0, #0
}
   2377c:	bc10      	pop	{r4}
   2377e:	4770      	bx	lr
				return true;
   23780:	2001      	movs	r0, #1
   23782:	e7fb      	b.n	2377c <slab_pool_found_already+0x30>
	return false;
   23784:	2000      	movs	r0, #0
}
   23786:	4770      	bx	lr

00023788 <net_shell_cmd_allocs>:
{
   23788:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_NET_PKT to see allocations.\n");
   2378a:	4802      	ldr	r0, [pc, #8]	; (23794 <net_shell_cmd_allocs+0xc>)
   2378c:	f7df fba8 	bl	2ee0 <printk>
}
   23790:	2000      	movs	r0, #0
   23792:	bd08      	pop	{r3, pc}
   23794:	00030328 	.word	0x00030328

00023798 <net_shell_cmd_app>:
{
   23798:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_APP and either CONFIG_NET_APP_CLIENT "
   2379a:	4802      	ldr	r0, [pc, #8]	; (237a4 <net_shell_cmd_app+0xc>)
   2379c:	f7df fba0 	bl	2ee0 <printk>
}
   237a0:	2000      	movs	r0, #0
   237a2:	bd08      	pop	{r3, pc}
   237a4:	00030360 	.word	0x00030360

000237a8 <net_shell_cmd_arp>:
{
   237a8:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_ARP, CONFIG_NET_IPV4 and "
   237aa:	4802      	ldr	r0, [pc, #8]	; (237b4 <net_shell_cmd_arp+0xc>)
   237ac:	f7df fb98 	bl	2ee0 <printk>
}
   237b0:	2000      	movs	r0, #0
   237b2:	bd08      	pop	{r3, pc}
   237b4:	000303e4 	.word	0x000303e4

000237b8 <net_shell_cmd_dns>:
{
   237b8:	b508      	push	{r3, lr}
	printk("DNS resolver not supported.\n");
   237ba:	4802      	ldr	r0, [pc, #8]	; (237c4 <net_shell_cmd_dns+0xc>)
   237bc:	f7df fb90 	bl	2ee0 <printk>
}
   237c0:	2000      	movs	r0, #0
   237c2:	bd08      	pop	{r3, pc}
   237c4:	000304e4 	.word	0x000304e4

000237c8 <net_shell_cmd_http>:
{
   237c8:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_HTTP_CONN and CONFIG_HTTP_SERVER "
   237ca:	4802      	ldr	r0, [pc, #8]	; (237d4 <net_shell_cmd_http+0xc>)
   237cc:	f7df fb88 	bl	2ee0 <printk>
}
   237d0:	2000      	movs	r0, #0
   237d2:	bd08      	pop	{r3, pc}
   237d4:	00030504 	.word	0x00030504

000237d8 <context_info>:
	return context->flags & NET_CONTEXT_IN_USE;
   237d8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
#if defined(CONFIG_NET_CONTEXT_NET_PKT_POOL)
	struct ctx_info *info = user_data;
	struct k_mem_slab *slab;
	struct net_buf_pool *pool;

	if (!net_context_is_used(context)) {
   237dc:	f013 0f01 	tst.w	r3, #1
   237e0:	d032      	beq.n	23848 <context_info+0x70>
{
   237e2:	b570      	push	{r4, r5, r6, lr}
   237e4:	460d      	mov	r5, r1
   237e6:	4604      	mov	r4, r0
		return;
	}

	if (context->tx_slab) {
   237e8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   237ea:	b19b      	cbz	r3, 23814 <context_info+0x3c>
		slab = context->tx_slab();
   237ec:	4798      	blx	r3
   237ee:	4606      	mov	r6, r0

		if (slab_pool_found_already(info, slab, NULL)) {
   237f0:	2200      	movs	r2, #0
   237f2:	4601      	mov	r1, r0
   237f4:	4628      	mov	r0, r5
   237f6:	f7ff ffa9 	bl	2374c <slab_pool_found_already>
   237fa:	b100      	cbz	r0, 237fe <context_info+0x26>
   237fc:	bd70      	pop	{r4, r5, r6, pc}
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%zu\t%u\t%u\tETX\n",
		       slab, slab->num_blocks * slab->block_size,
		       slab->num_blocks, k_mem_slab_num_free_get(slab));
#else
		printk("%p\t%d\tETX\n", slab, slab->num_blocks);
   237fe:	68b2      	ldr	r2, [r6, #8]
   23800:	4631      	mov	r1, r6
   23802:	4812      	ldr	r0, [pc, #72]	; (2384c <context_info+0x74>)
   23804:	f7df fb6c 	bl	2ee0 <printk>
#endif
		info->are_external_pools = true;
   23808:	2301      	movs	r3, #1
   2380a:	712b      	strb	r3, [r5, #4]
		info->tx_slabs[info->pos] = slab;
   2380c:	682b      	ldr	r3, [r5, #0]
   2380e:	3302      	adds	r3, #2
   23810:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
	}

	if (context->data_pool) {
   23814:	6c23      	ldr	r3, [r4, #64]	; 0x40
   23816:	b19b      	cbz	r3, 23840 <context_info+0x68>
		pool = context->data_pool();
   23818:	4798      	blx	r3
   2381a:	4604      	mov	r4, r0

		if (slab_pool_found_already(info, NULL, pool)) {
   2381c:	4602      	mov	r2, r0
   2381e:	2100      	movs	r1, #0
   23820:	4628      	mov	r0, r5
   23822:	f7ff ff93 	bl	2374c <slab_pool_found_already>
   23826:	2800      	cmp	r0, #0
   23828:	d1e8      	bne.n	237fc <context_info+0x24>
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%d\t%d\t%d\tEDATA (%s)\n",
		       pool, pool->pool_size, pool->buf_count,
		       pool->avail_count, pool->name);
#else
		printk("%p\t%d\tEDATA\n", pool, pool->buf_count);
   2382a:	8a22      	ldrh	r2, [r4, #16]
   2382c:	4621      	mov	r1, r4
   2382e:	4808      	ldr	r0, [pc, #32]	; (23850 <context_info+0x78>)
   23830:	f7df fb56 	bl	2ee0 <printk>
#endif
		info->are_external_pools = true;
   23834:	2301      	movs	r3, #1
   23836:	712b      	strb	r3, [r5, #4]
		info->data_pools[info->pos] = pool;
   23838:	682b      	ldr	r3, [r5, #0]
   2383a:	3308      	adds	r3, #8
   2383c:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	}

	info->pos++;
   23840:	682b      	ldr	r3, [r5, #0]
   23842:	3301      	adds	r3, #1
   23844:	602b      	str	r3, [r5, #0]
   23846:	e7d9      	b.n	237fc <context_info+0x24>
   23848:	4770      	bx	lr
   2384a:	bf00      	nop
   2384c:	0002ffe8 	.word	0x0002ffe8
   23850:	0002fff4 	.word	0x0002fff4

00023854 <net_shell_cmd_rpl>:
}

#endif /* CONFIG_NET_RPL */

int net_shell_cmd_rpl(int argc, char *argv[])
{
   23854:	b508      	push	{r3, lr}
		printk("No parents found.\n");
	}

	printk("\n");
#else
	printk("RPL not enabled, set CONFIG_NET_RPL to enable it.\n");
   23856:	4802      	ldr	r0, [pc, #8]	; (23860 <net_shell_cmd_rpl+0xc>)
   23858:	f7df fb42 	bl	2ee0 <printk>
#endif

	return 0;
}
   2385c:	2000      	movs	r0, #0
   2385e:	bd08      	pop	{r3, pc}
   23860:	00030714 	.word	0x00030714

00023864 <net_shell_cmd_stacks>:
extern K_THREAD_STACK_DEFINE(sys_work_q_stack,
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);
#endif

int net_shell_cmd_stacks(int argc, char *argv[])
{
   23864:	b530      	push	{r4, r5, lr}
   23866:	b087      	sub	sp, #28
	struct net_stack_info *info;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	for (info = __net_stack_start; info != __net_stack_end; info++) {
   23868:	4d3f      	ldr	r5, [pc, #252]	; (23968 <net_shell_cmd_stacks+0x104>)
   2386a:	e011      	b.n	23890 <net_shell_cmd_stacks+0x2c>
						unsigned *unused)
{
	*unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	*pcnt = ((size - *unused) * 100) / size;
   2386c:	1a81      	subs	r1, r0, r2
   2386e:	2364      	movs	r3, #100	; 0x64
   23870:	fb03 f301 	mul.w	r3, r3, r1
   23874:	fbb3 f3f0 	udiv	r3, r3, r0
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
					     info->size, &pcnt, &unused);

#if defined(CONFIG_INIT_STACKS)
		printk("%s [%s] stack size %zu/%zu bytes unused %u usage"
   23878:	9304      	str	r3, [sp, #16]
   2387a:	9003      	str	r0, [sp, #12]
   2387c:	9102      	str	r1, [sp, #8]
   2387e:	9201      	str	r2, [sp, #4]
   23880:	9000      	str	r0, [sp, #0]
   23882:	68eb      	ldr	r3, [r5, #12]
   23884:	68aa      	ldr	r2, [r5, #8]
   23886:	6869      	ldr	r1, [r5, #4]
   23888:	4838      	ldr	r0, [pc, #224]	; (2396c <net_shell_cmd_stacks+0x108>)
   2388a:	f7df fb29 	bl	2ee0 <printk>
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   2388e:	3514      	adds	r5, #20
   23890:	4b37      	ldr	r3, [pc, #220]	; (23970 <net_shell_cmd_stacks+0x10c>)
   23892:	429d      	cmp	r5, r3
   23894:	d00b      	beq.n	238ae <net_shell_cmd_stacks+0x4a>
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
   23896:	682c      	ldr	r4, [r5, #0]
   23898:	6928      	ldr	r0, [r5, #16]
   2389a:	2300      	movs	r3, #0
	size_t unused = 0;
   2389c:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   2389e:	4298      	cmp	r0, r3
   238a0:	d9e4      	bls.n	2386c <net_shell_cmd_stacks+0x8>
		if ((unsigned char)stack[i] == 0xaa) {
   238a2:	5ce1      	ldrb	r1, [r4, r3]
   238a4:	29aa      	cmp	r1, #170	; 0xaa
   238a6:	d1e1      	bne.n	2386c <net_shell_cmd_stacks+0x8>
			unused++;
   238a8:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   238aa:	3301      	adds	r3, #1
   238ac:	e7f7      	b.n	2389e <net_shell_cmd_stacks+0x3a>
   238ae:	2300      	movs	r3, #0
   238b0:	461a      	mov	r2, r3
   238b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   238b6:	d206      	bcs.n	238c6 <net_shell_cmd_stacks+0x62>
		if ((unsigned char)stack[i] == 0xaa) {
   238b8:	492e      	ldr	r1, [pc, #184]	; (23974 <net_shell_cmd_stacks+0x110>)
   238ba:	5cc9      	ldrb	r1, [r1, r3]
   238bc:	29aa      	cmp	r1, #170	; 0xaa
   238be:	d102      	bne.n	238c6 <net_shell_cmd_stacks+0x62>
			unused++;
   238c0:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   238c2:	3301      	adds	r3, #1
   238c4:	e7f5      	b.n	238b2 <net_shell_cmd_stacks+0x4e>
   238c6:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   238ca:	2364      	movs	r3, #100	; 0x64
   238cc:	fb03 f301 	mul.w	r3, r3, r1
   238d0:	0adb      	lsrs	r3, r3, #11

#if defined(CONFIG_INIT_STACKS)
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_main_stack),
				     K_THREAD_STACK_SIZEOF(_main_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   238d2:	9304      	str	r3, [sp, #16]
   238d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   238d8:	9303      	str	r3, [sp, #12]
   238da:	9102      	str	r1, [sp, #8]
   238dc:	9201      	str	r2, [sp, #4]
   238de:	9300      	str	r3, [sp, #0]
   238e0:	4a25      	ldr	r2, [pc, #148]	; (23978 <net_shell_cmd_stacks+0x114>)
   238e2:	4926      	ldr	r1, [pc, #152]	; (2397c <net_shell_cmd_stacks+0x118>)
   238e4:	4826      	ldr	r0, [pc, #152]	; (23980 <net_shell_cmd_stacks+0x11c>)
   238e6:	f7df fafb 	bl	2ee0 <printk>
   238ea:	2300      	movs	r3, #0
	size_t unused = 0;
   238ec:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   238ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   238f2:	d206      	bcs.n	23902 <net_shell_cmd_stacks+0x9e>
		if ((unsigned char)stack[i] == 0xaa) {
   238f4:	4923      	ldr	r1, [pc, #140]	; (23984 <net_shell_cmd_stacks+0x120>)
   238f6:	5cc9      	ldrb	r1, [r1, r3]
   238f8:	29aa      	cmp	r1, #170	; 0xaa
   238fa:	d102      	bne.n	23902 <net_shell_cmd_stacks+0x9e>
			unused++;
   238fc:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   238fe:	3301      	adds	r3, #1
   23900:	e7f5      	b.n	238ee <net_shell_cmd_stacks+0x8a>
   23902:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   23906:	2364      	movs	r3, #100	; 0x64
   23908:	fb03 f301 	mul.w	r3, r3, r1
   2390c:	0adb      	lsrs	r3, r3, #11
	       CONFIG_MAIN_STACK_SIZE - unused, CONFIG_MAIN_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_interrupt_stack),
				     K_THREAD_STACK_SIZEOF(_interrupt_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   2390e:	9304      	str	r3, [sp, #16]
   23910:	f44f 6300 	mov.w	r3, #2048	; 0x800
   23914:	9303      	str	r3, [sp, #12]
   23916:	9102      	str	r1, [sp, #8]
   23918:	9201      	str	r2, [sp, #4]
   2391a:	9300      	str	r3, [sp, #0]
   2391c:	4a1a      	ldr	r2, [pc, #104]	; (23988 <net_shell_cmd_stacks+0x124>)
   2391e:	491b      	ldr	r1, [pc, #108]	; (2398c <net_shell_cmd_stacks+0x128>)
   23920:	4817      	ldr	r0, [pc, #92]	; (23980 <net_shell_cmd_stacks+0x11c>)
   23922:	f7df fadd 	bl	2ee0 <printk>
   23926:	2300      	movs	r3, #0
	size_t unused = 0;
   23928:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   2392a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2392e:	d206      	bcs.n	2393e <net_shell_cmd_stacks+0xda>
		if ((unsigned char)stack[i] == 0xaa) {
   23930:	4917      	ldr	r1, [pc, #92]	; (23990 <net_shell_cmd_stacks+0x12c>)
   23932:	5cc9      	ldrb	r1, [r1, r3]
   23934:	29aa      	cmp	r1, #170	; 0xaa
   23936:	d102      	bne.n	2393e <net_shell_cmd_stacks+0xda>
			unused++;
   23938:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   2393a:	3301      	adds	r3, #1
   2393c:	e7f5      	b.n	2392a <net_shell_cmd_stacks+0xc6>
   2393e:	f5c2 6180 	rsb	r1, r2, #1024	; 0x400
   23942:	2364      	movs	r3, #100	; 0x64
   23944:	fb03 f301 	mul.w	r3, r3, r1
   23948:	0a9b      	lsrs	r3, r3, #10
	       CONFIG_ISR_STACK_SIZE - unused, CONFIG_ISR_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(sys_work_q_stack),
				     K_THREAD_STACK_SIZEOF(sys_work_q_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   2394a:	9304      	str	r3, [sp, #16]
   2394c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   23950:	9303      	str	r3, [sp, #12]
   23952:	9102      	str	r1, [sp, #8]
   23954:	9201      	str	r2, [sp, #4]
   23956:	9300      	str	r3, [sp, #0]
   23958:	4a0e      	ldr	r2, [pc, #56]	; (23994 <net_shell_cmd_stacks+0x130>)
   2395a:	490f      	ldr	r1, [pc, #60]	; (23998 <net_shell_cmd_stacks+0x134>)
   2395c:	4808      	ldr	r0, [pc, #32]	; (23980 <net_shell_cmd_stacks+0x11c>)
   2395e:	f7df fabf 	bl	2ee0 <printk>
#else
	printk("Enable CONFIG_INIT_STACKS to see usage information.\n");
#endif

	return 0;
}
   23962:	2000      	movs	r0, #0
   23964:	b007      	add	sp, #28
   23966:	bd30      	pop	{r4, r5, pc}
   23968:	2000d374 	.word	0x2000d374
   2396c:	00030748 	.word	0x00030748
   23970:	2000d3b0 	.word	0x2000d3b0
   23974:	2000a220 	.word	0x2000a220
   23978:	0003078c 	.word	0x0003078c
   2397c:	00030798 	.word	0x00030798
   23980:	000307a0 	.word	0x000307a0
   23984:	2000ab60 	.word	0x2000ab60
   23988:	000307e0 	.word	0x000307e0
   2398c:	000307f4 	.word	0x000307f4
   23990:	2000b360 	.word	0x2000b360
   23994:	000307f8 	.word	0x000307f8
   23998:	0003080c 	.word	0x0003080c

0002399c <net_shell_cmd_stats>:

int net_shell_cmd_stats(int argc, char *argv[])
{
   2399c:	b510      	push	{r4, lr}
   2399e:	b082      	sub	sp, #8
	printk("IPv6 recv      %d\tsent\t%d\tdrop\t%d\tforwarded\t%d\n",
   239a0:	4c34      	ldr	r4, [pc, #208]	; (23a74 <net_shell_cmd_stats+0xd8>)
   239a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   239a4:	9300      	str	r3, [sp, #0]
   239a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   239a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   239aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
   239ac:	4832      	ldr	r0, [pc, #200]	; (23a78 <net_shell_cmd_stats+0xdc>)
   239ae:	f7df fa97 	bl	2ee0 <printk>
	printk("IPv6 ND recv   %d\tsent\t%d\tdrop\t%d\n",
   239b2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   239b6:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   239ba:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   239be:	482f      	ldr	r0, [pc, #188]	; (23a7c <net_shell_cmd_stats+0xe0>)
   239c0:	f7df fa8e 	bl	2ee0 <printk>
	printk("IPv6 MLD recv  %d\tsent\t%d\tdrop\t%d\n",
   239c4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   239c8:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   239cc:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   239d0:	482b      	ldr	r0, [pc, #172]	; (23a80 <net_shell_cmd_stats+0xe4>)
   239d2:	f7df fa85 	bl	2ee0 <printk>
	printk("IP vhlerr      %d\thblener\t%d\tlblener\t%d\n",
   239d6:	6963      	ldr	r3, [r4, #20]
   239d8:	6922      	ldr	r2, [r4, #16]
   239da:	68e1      	ldr	r1, [r4, #12]
   239dc:	4829      	ldr	r0, [pc, #164]	; (23a84 <net_shell_cmd_stats+0xe8>)
   239de:	f7df fa7f 	bl	2ee0 <printk>
	printk("IP fragerr     %d\tchkerr\t%d\tprotoer\t%d\n",
   239e2:	6a23      	ldr	r3, [r4, #32]
   239e4:	69e2      	ldr	r2, [r4, #28]
   239e6:	69a1      	ldr	r1, [r4, #24]
   239e8:	4827      	ldr	r0, [pc, #156]	; (23a88 <net_shell_cmd_stats+0xec>)
   239ea:	f7df fa79 	bl	2ee0 <printk>
	printk("ICMP recv      %d\tsent\t%d\tdrop\t%d\n",
   239ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   239f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   239f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   239f4:	4825      	ldr	r0, [pc, #148]	; (23a8c <net_shell_cmd_stats+0xf0>)
   239f6:	f7df fa73 	bl	2ee0 <printk>
	printk("ICMP typeer    %d\tchkerr\t%d\n",
   239fa:	6c62      	ldr	r2, [r4, #68]	; 0x44
   239fc:	6c21      	ldr	r1, [r4, #64]	; 0x40
   239fe:	4824      	ldr	r0, [pc, #144]	; (23a90 <net_shell_cmd_stats+0xf4>)
   23a00:	f7df fa6e 	bl	2ee0 <printk>
	printk("UDP recv       %d\tsent\t%d\tdrop\t%d\n",
   23a04:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   23a06:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   23a0a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   23a0e:	4821      	ldr	r0, [pc, #132]	; (23a94 <net_shell_cmd_stats+0xf8>)
   23a10:	f7df fa66 	bl	2ee0 <printk>
	printk("UDP chkerr     %d\n",
   23a14:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   23a18:	481f      	ldr	r0, [pc, #124]	; (23a98 <net_shell_cmd_stats+0xfc>)
   23a1a:	f7df fa61 	bl	2ee0 <printk>
	printk("TCP bytes recv %u\tsent\t%d\n",
   23a1e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23a20:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   23a22:	481e      	ldr	r0, [pc, #120]	; (23a9c <net_shell_cmd_stats+0x100>)
   23a24:	f7df fa5c 	bl	2ee0 <printk>
	printk("TCP seg recv   %d\tsent\t%d\tdrop\t%d\n",
   23a28:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   23a2a:	6da2      	ldr	r2, [r4, #88]	; 0x58
   23a2c:	6d61      	ldr	r1, [r4, #84]	; 0x54
   23a2e:	481c      	ldr	r0, [pc, #112]	; (23aa0 <net_shell_cmd_stats+0x104>)
   23a30:	f7df fa56 	bl	2ee0 <printk>
	printk("TCP seg resent %d\tchkerr\t%d\tackerr\t%d\n",
   23a34:	6e63      	ldr	r3, [r4, #100]	; 0x64
   23a36:	6e22      	ldr	r2, [r4, #96]	; 0x60
   23a38:	6d21      	ldr	r1, [r4, #80]	; 0x50
   23a3a:	481a      	ldr	r0, [pc, #104]	; (23aa4 <net_shell_cmd_stats+0x108>)
   23a3c:	f7df fa50 	bl	2ee0 <printk>
	printk("TCP seg rsterr %d\trst\t%d\tre-xmit\t%d\n",
   23a40:	6f23      	ldr	r3, [r4, #112]	; 0x70
   23a42:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   23a44:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   23a46:	4818      	ldr	r0, [pc, #96]	; (23aa8 <net_shell_cmd_stats+0x10c>)
   23a48:	f7df fa4a 	bl	2ee0 <printk>
	printk("TCP conn drop  %d\tconnrst\t%d\n",
   23a4c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   23a4e:	6f61      	ldr	r1, [r4, #116]	; 0x74
   23a50:	4816      	ldr	r0, [pc, #88]	; (23aac <net_shell_cmd_stats+0x110>)
   23a52:	f7df fa45 	bl	2ee0 <printk>
	printk("Bytes received %u\n", GET_STAT(bytes.received));
   23a56:	68a1      	ldr	r1, [r4, #8]
   23a58:	4815      	ldr	r0, [pc, #84]	; (23ab0 <net_shell_cmd_stats+0x114>)
   23a5a:	f7df fa41 	bl	2ee0 <printk>
	printk("Bytes sent     %u\n", GET_STAT(bytes.sent));
   23a5e:	6861      	ldr	r1, [r4, #4]
   23a60:	4814      	ldr	r0, [pc, #80]	; (23ab4 <net_shell_cmd_stats+0x118>)
   23a62:	f7df fa3d 	bl	2ee0 <printk>
	printk("Processing err %d\n", GET_STAT(processing_error));
   23a66:	6821      	ldr	r1, [r4, #0]
   23a68:	4813      	ldr	r0, [pc, #76]	; (23ab8 <net_shell_cmd_stats+0x11c>)
   23a6a:	f7df fa39 	bl	2ee0 <printk>
#else
	printk("Network statistics not compiled in.\n");
#endif

	return 0;
}
   23a6e:	2000      	movs	r0, #0
   23a70:	b002      	add	sp, #8
   23a72:	bd10      	pop	{r4, pc}
   23a74:	20002950 	.word	0x20002950
   23a78:	00030814 	.word	0x00030814
   23a7c:	00030844 	.word	0x00030844
   23a80:	00030868 	.word	0x00030868
   23a84:	0003088c 	.word	0x0003088c
   23a88:	000308b8 	.word	0x000308b8
   23a8c:	000308e0 	.word	0x000308e0
   23a90:	00030904 	.word	0x00030904
   23a94:	00030924 	.word	0x00030924
   23a98:	00030948 	.word	0x00030948
   23a9c:	0003095c 	.word	0x0003095c
   23aa0:	00030978 	.word	0x00030978
   23aa4:	0003099c 	.word	0x0003099c
   23aa8:	000309c4 	.word	0x000309c4
   23aac:	000309ec 	.word	0x000309ec
   23ab0:	00030a0c 	.word	0x00030a0c
   23ab4:	00030a20 	.word	0x00030a20
   23ab8:	00030a34 	.word	0x00030a34

00023abc <tcp_sent_cb>:

static void tcp_sent_cb(struct net_context *context,
			int status,
			void *token,
			void *user_data)
{
   23abc:	b508      	push	{r3, lr}
	printk("Message sent\n");
   23abe:	4802      	ldr	r0, [pc, #8]	; (23ac8 <tcp_sent_cb+0xc>)
   23ac0:	f7df fa0e 	bl	2ee0 <printk>
   23ac4:	bd08      	pop	{r3, pc}
   23ac6:	bf00      	nop
   23ac8:	00030cf4 	.word	0x00030cf4

00023acc <net_shell_cmd_conn>:
{
   23acc:	b510      	push	{r4, lr}
   23ace:	b082      	sub	sp, #8
	int count = 0;
   23ad0:	ac02      	add	r4, sp, #8
   23ad2:	2300      	movs	r3, #0
   23ad4:	f844 3d04 	str.w	r3, [r4, #-4]!
	printk("     Context   \tIface         Flags "
   23ad8:	4810      	ldr	r0, [pc, #64]	; (23b1c <net_shell_cmd_conn+0x50>)
   23ada:	f7df fa01 	bl	2ee0 <printk>
	net_context_foreach(context_cb, &count);
   23ade:	4621      	mov	r1, r4
   23ae0:	480f      	ldr	r0, [pc, #60]	; (23b20 <net_shell_cmd_conn+0x54>)
   23ae2:	f7f8 ff03 	bl	1c8ec <net_context_foreach>
	if (count == 0) {
   23ae6:	9b01      	ldr	r3, [sp, #4]
   23ae8:	b17b      	cbz	r3, 23b0a <net_shell_cmd_conn+0x3e>
	printk("\nTCP        Src port  Dst port   Send-Seq   Send-Ack  MSS"
   23aea:	490e      	ldr	r1, [pc, #56]	; (23b24 <net_shell_cmd_conn+0x58>)
   23aec:	480e      	ldr	r0, [pc, #56]	; (23b28 <net_shell_cmd_conn+0x5c>)
   23aee:	f7df f9f7 	bl	2ee0 <printk>
	count = 0;
   23af2:	a902      	add	r1, sp, #8
   23af4:	2300      	movs	r3, #0
   23af6:	f841 3d04 	str.w	r3, [r1, #-4]!
	net_tcp_foreach(tcp_cb, &count);
   23afa:	480c      	ldr	r0, [pc, #48]	; (23b2c <net_shell_cmd_conn+0x60>)
   23afc:	f7ff fa48 	bl	22f90 <net_tcp_foreach>
	if (count == 0) {
   23b00:	9b01      	ldr	r3, [sp, #4]
   23b02:	b133      	cbz	r3, 23b12 <net_shell_cmd_conn+0x46>
}
   23b04:	2000      	movs	r0, #0
   23b06:	b002      	add	sp, #8
   23b08:	bd10      	pop	{r4, pc}
		printk("No connections\n");
   23b0a:	4809      	ldr	r0, [pc, #36]	; (23b30 <net_shell_cmd_conn+0x64>)
   23b0c:	f7df f9e8 	bl	2ee0 <printk>
   23b10:	e7eb      	b.n	23aea <net_shell_cmd_conn+0x1e>
		printk("No TCP connections\n");
   23b12:	4808      	ldr	r0, [pc, #32]	; (23b34 <net_shell_cmd_conn+0x68>)
   23b14:	f7df f9e4 	bl	2ee0 <printk>
   23b18:	e7f4      	b.n	23b04 <net_shell_cmd_conn+0x38>
   23b1a:	bf00      	nop
   23b1c:	00030440 	.word	0x00030440
   23b20:	00023ca9 	.word	0x00023ca9
   23b24:	0002f754 	.word	0x0002f754
   23b28:	00030490 	.word	0x00030490
   23b2c:	00023b39 	.word	0x00023b39
   23b30:	00030480 	.word	0x00030480
   23b34:	000304d0 	.word	0x000304d0

00023b38 <tcp_cb>:
{
   23b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23b3c:	b084      	sub	sp, #16
   23b3e:	4604      	mov	r4, r0
   23b40:	460f      	mov	r7, r1
	u16_t recv_mss = net_tcp_get_recv_mss(tcp);
   23b42:	f7fe ffe4 	bl	22b0e <net_tcp_get_recv_mss>
   23b46:	4680      	mov	r8, r0
	       ntohs(net_sin6_ptr(&tcp->context->local)->sin6_port),
   23b48:	6823      	ldr	r3, [r4, #0]
   23b4a:	895a      	ldrh	r2, [r3, #10]
   23b4c:	0215      	lsls	r5, r2, #8
   23b4e:	ea45 2512 	orr.w	r5, r5, r2, lsr #8
   23b52:	b2ad      	uxth	r5, r5
	       ntohs(net_sin6(&tcp->context->remote)->sin6_port),
   23b54:	8adb      	ldrh	r3, [r3, #22]
   23b56:	021e      	lsls	r6, r3, #8
   23b58:	ea46 2613 	orr.w	r6, r6, r3, lsr #8
   23b5c:	b2b6      	uxth	r6, r6
	printk("%p    %5u     %5u %10u %10u %5u   %s\n",
   23b5e:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
   23b62:	f8d4 a09c 	ldr.w	sl, [r4, #156]	; 0x9c
   23b66:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   23b6a:	f3c0 3043 	ubfx	r0, r0, #13, #4
   23b6e:	f7ff f845 	bl	22bfc <net_tcp_state_str>
   23b72:	9003      	str	r0, [sp, #12]
   23b74:	f8cd 8008 	str.w	r8, [sp, #8]
   23b78:	f8cd a004 	str.w	sl, [sp, #4]
   23b7c:	f8cd 9000 	str.w	r9, [sp]
   23b80:	4633      	mov	r3, r6
   23b82:	462a      	mov	r2, r5
   23b84:	4621      	mov	r1, r4
   23b86:	4804      	ldr	r0, [pc, #16]	; (23b98 <tcp_cb+0x60>)
   23b88:	f7df f9aa 	bl	2ee0 <printk>
	(*count)++;
   23b8c:	683b      	ldr	r3, [r7, #0]
   23b8e:	3301      	adds	r3, #1
   23b90:	603b      	str	r3, [r7, #0]
}
   23b92:	b004      	add	sp, #16
   23b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23b98:	00030c50 	.word	0x00030c50

00023b9c <get_addresses>:
{
   23b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23ba0:	b083      	sub	sp, #12
   23ba2:	460d      	mov	r5, r1
   23ba4:	4616      	mov	r6, r2
   23ba6:	461f      	mov	r7, r3
	if (context->local.family == AF_INET6) {
   23ba8:	8903      	ldrh	r3, [r0, #8]
   23baa:	2b0a      	cmp	r3, #10
   23bac:	d008      	beq.n	23bc0 <get_addresses+0x24>
	if (context->local.family == AF_UNSPEC) {
   23bae:	b393      	cbz	r3, 23c16 <get_addresses+0x7a>
		snprintk(addr_local, local_len, "AF_UNK(%d)",
   23bb0:	4a1c      	ldr	r2, [pc, #112]	; (23c24 <get_addresses+0x88>)
   23bb2:	4631      	mov	r1, r6
   23bb4:	4628      	mov	r0, r5
   23bb6:	f7df f9a1 	bl	2efc <snprintk>
}
   23bba:	b003      	add	sp, #12
   23bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23bc0:	4604      	mov	r4, r0
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   23bc2:	f8df 9068 	ldr.w	r9, [pc, #104]	; 23c2c <get_addresses+0x90>
   23bc6:	2328      	movs	r3, #40	; 0x28
   23bc8:	464a      	mov	r2, r9
   23bca:	68c1      	ldr	r1, [r0, #12]
   23bcc:	200a      	movs	r0, #10
   23bce:	f7f9 fc1d 	bl	1d40c <net_addr_ntop>
			 ntohs(net_sin6_ptr(&context->local)->sin6_port));
   23bd2:	8962      	ldrh	r2, [r4, #10]
   23bd4:	0213      	lsls	r3, r2, #8
   23bd6:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   23bda:	b29b      	uxth	r3, r3
		snprintk(addr_local, local_len, "[%s]:%u",
   23bdc:	f8df 8050 	ldr.w	r8, [pc, #80]	; 23c30 <get_addresses+0x94>
   23be0:	9300      	str	r3, [sp, #0]
   23be2:	4603      	mov	r3, r0
   23be4:	4642      	mov	r2, r8
   23be6:	4631      	mov	r1, r6
   23be8:	4628      	mov	r0, r5
   23bea:	f7df f987 	bl	2efc <snprintk>
   23bee:	2328      	movs	r3, #40	; 0x28
   23bf0:	464a      	mov	r2, r9
   23bf2:	f104 0118 	add.w	r1, r4, #24
   23bf6:	200a      	movs	r0, #10
   23bf8:	f7f9 fc08 	bl	1d40c <net_addr_ntop>
			 ntohs(net_sin6(&context->remote)->sin6_port));
   23bfc:	8ae2      	ldrh	r2, [r4, #22]
   23bfe:	0213      	lsls	r3, r2, #8
   23c00:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   23c04:	b29b      	uxth	r3, r3
		snprintk(addr_remote, remote_len, "[%s]:%u",
   23c06:	9300      	str	r3, [sp, #0]
   23c08:	4603      	mov	r3, r0
   23c0a:	4642      	mov	r2, r8
   23c0c:	990a      	ldr	r1, [sp, #40]	; 0x28
   23c0e:	4638      	mov	r0, r7
   23c10:	f7df f974 	bl	2efc <snprintk>
   23c14:	e7d1      	b.n	23bba <get_addresses+0x1e>
		snprintk(addr_local, local_len, "AF_UNSPEC");
   23c16:	4a04      	ldr	r2, [pc, #16]	; (23c28 <get_addresses+0x8c>)
   23c18:	4631      	mov	r1, r6
   23c1a:	4628      	mov	r0, r5
   23c1c:	f7df f96e 	bl	2efc <snprintk>
   23c20:	e7cb      	b.n	23bba <get_addresses+0x1e>
   23c22:	bf00      	nop
   23c24:	00030018 	.word	0x00030018
   23c28:	0003000c 	.word	0x0003000c
   23c2c:	20002328 	.word	0x20002328
   23c30:	00030004 	.word	0x00030004

00023c34 <print_connect_info>:
{
   23c34:	b570      	push	{r4, r5, r6, lr}
	switch (family) {
   23c36:	2802      	cmp	r0, #2
   23c38:	d008      	beq.n	23c4c <print_connect_info+0x18>
   23c3a:	460d      	mov	r5, r1
   23c3c:	4614      	mov	r4, r2
   23c3e:	280a      	cmp	r0, #10
   23c40:	d008      	beq.n	23c54 <print_connect_info+0x20>
		printk("Unknown protocol family (%d)\n", family);
   23c42:	4601      	mov	r1, r0
   23c44:	4813      	ldr	r0, [pc, #76]	; (23c94 <print_connect_info+0x60>)
   23c46:	f7df f94b 	bl	2ee0 <printk>
   23c4a:	bd70      	pop	{r4, r5, r6, pc}
		printk("IPv4 not supported\n");
   23c4c:	4812      	ldr	r0, [pc, #72]	; (23c98 <print_connect_info+0x64>)
   23c4e:	f7df f947 	bl	2ee0 <printk>
		break;
   23c52:	bd70      	pop	{r4, r5, r6, pc}
   23c54:	4e11      	ldr	r6, [pc, #68]	; (23c9c <print_connect_info+0x68>)
   23c56:	2328      	movs	r3, #40	; 0x28
   23c58:	4632      	mov	r2, r6
   23c5a:	3104      	adds	r1, #4
   23c5c:	200a      	movs	r0, #10
   23c5e:	f7f9 fbd5 	bl	1d40c <net_addr_ntop>
		       ntohs(net_sin6(myaddr)->sin6_port));
   23c62:	886b      	ldrh	r3, [r5, #2]
   23c64:	021a      	lsls	r2, r3, #8
   23c66:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("Connecting from [%s]:%u ",
   23c6a:	b292      	uxth	r2, r2
   23c6c:	4601      	mov	r1, r0
   23c6e:	480c      	ldr	r0, [pc, #48]	; (23ca0 <print_connect_info+0x6c>)
   23c70:	f7df f936 	bl	2ee0 <printk>
   23c74:	2328      	movs	r3, #40	; 0x28
   23c76:	4632      	mov	r2, r6
   23c78:	1d21      	adds	r1, r4, #4
   23c7a:	200a      	movs	r0, #10
   23c7c:	f7f9 fbc6 	bl	1d40c <net_addr_ntop>
		       ntohs(net_sin6(addr)->sin6_port));
   23c80:	8863      	ldrh	r3, [r4, #2]
   23c82:	021a      	lsls	r2, r3, #8
   23c84:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("to [%s]:%u\n",
   23c88:	b292      	uxth	r2, r2
   23c8a:	4601      	mov	r1, r0
   23c8c:	4805      	ldr	r0, [pc, #20]	; (23ca4 <print_connect_info+0x70>)
   23c8e:	f7df f927 	bl	2ee0 <printk>
		break;
   23c92:	bd70      	pop	{r4, r5, r6, pc}
   23c94:	00030be8 	.word	0x00030be8
   23c98:	00030bac 	.word	0x00030bac
   23c9c:	20002328 	.word	0x20002328
   23ca0:	00030bc0 	.word	0x00030bc0
   23ca4:	00030bdc 	.word	0x00030bdc

00023ca8 <context_cb>:
{
   23ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
   23caa:	b09f      	sub	sp, #124	; 0x7c
   23cac:	4604      	mov	r4, r0
   23cae:	460d      	mov	r5, r1
	char addr_remote[ADDR_LEN + 7] = "";
   23cb0:	2100      	movs	r1, #0
   23cb2:	9106      	str	r1, [sp, #24]
   23cb4:	222b      	movs	r2, #43	; 0x2b
   23cb6:	a807      	add	r0, sp, #28
   23cb8:	f005 fd0e 	bl	296d8 <memset>
	get_addresses(context, addr_local, sizeof(addr_local),
   23cbc:	222f      	movs	r2, #47	; 0x2f
   23cbe:	9200      	str	r2, [sp, #0]
   23cc0:	ab06      	add	r3, sp, #24
   23cc2:	a912      	add	r1, sp, #72	; 0x48
   23cc4:	4620      	mov	r0, r4
   23cc6:	f7ff ff69 	bl	23b9c <get_addresses>
	       (*count) + 1, context,
   23cca:	682e      	ldr	r6, [r5, #0]
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   23ccc:	3601      	adds	r6, #1
	return net_if_get_by_index(context->iface);
   23cce:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
   23cd2:	f7f7 fd0b 	bl	1b6ec <net_if_get_by_index>
   23cd6:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   23cd8:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   23cdc:	f012 0f10 	tst.w	r2, #16
   23ce0:	d022      	beq.n	23d28 <context_cb+0x80>
		return AF_INET6;
   23ce2:	210a      	movs	r1, #10
   23ce4:	290a      	cmp	r1, #10
   23ce6:	d021      	beq.n	23d2c <context_cb+0x84>
   23ce8:	2134      	movs	r1, #52	; 0x34
	if (context->flags & NET_CONTEXT_TYPE) {
   23cea:	f012 0f20 	tst.w	r2, #32
   23cee:	d01f      	beq.n	23d30 <context_cb+0x88>
		return SOCK_STREAM;
   23cf0:	2001      	movs	r0, #1
   23cf2:	2802      	cmp	r0, #2
   23cf4:	d01e      	beq.n	23d34 <context_cb+0x8c>
   23cf6:	2053      	movs	r0, #83	; 0x53
	if (context->flags & NET_CONTEXT_PROTO) {
   23cf8:	f012 0f40 	tst.w	r2, #64	; 0x40
   23cfc:	d01c      	beq.n	23d38 <context_cb+0x90>
		return IPPROTO_TCP;
   23cfe:	2206      	movs	r2, #6
   23d00:	2a11      	cmp	r2, #17
   23d02:	d01b      	beq.n	23d3c <context_cb+0x94>
   23d04:	2754      	movs	r7, #84	; 0x54
   23d06:	aa06      	add	r2, sp, #24
   23d08:	9204      	str	r2, [sp, #16]
   23d0a:	aa12      	add	r2, sp, #72	; 0x48
   23d0c:	9203      	str	r2, [sp, #12]
   23d0e:	9702      	str	r7, [sp, #8]
   23d10:	9001      	str	r0, [sp, #4]
   23d12:	9100      	str	r1, [sp, #0]
   23d14:	4622      	mov	r2, r4
   23d16:	4631      	mov	r1, r6
   23d18:	4809      	ldr	r0, [pc, #36]	; (23d40 <context_cb+0x98>)
   23d1a:	f7df f8e1 	bl	2ee0 <printk>
	(*count)++;
   23d1e:	682b      	ldr	r3, [r5, #0]
   23d20:	3301      	adds	r3, #1
   23d22:	602b      	str	r3, [r5, #0]
}
   23d24:	b01f      	add	sp, #124	; 0x7c
   23d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   23d28:	2102      	movs	r1, #2
   23d2a:	e7db      	b.n	23ce4 <context_cb+0x3c>
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   23d2c:	2136      	movs	r1, #54	; 0x36
   23d2e:	e7dc      	b.n	23cea <context_cb+0x42>
	return SOCK_DGRAM;
   23d30:	2002      	movs	r0, #2
   23d32:	e7de      	b.n	23cf2 <context_cb+0x4a>
   23d34:	2044      	movs	r0, #68	; 0x44
   23d36:	e7df      	b.n	23cf8 <context_cb+0x50>
	return IPPROTO_UDP;
   23d38:	2211      	movs	r2, #17
   23d3a:	e7e1      	b.n	23d00 <context_cb+0x58>
   23d3c:	2755      	movs	r7, #85	; 0x55
   23d3e:	e7e2      	b.n	23d06 <context_cb+0x5e>
   23d40:	0002ffc4 	.word	0x0002ffc4

00023d44 <net_shell_cmd_iface>:
{
   23d44:	b508      	push	{r3, lr}
	net_if_foreach(iface_cb, NULL);
   23d46:	2100      	movs	r1, #0
   23d48:	4802      	ldr	r0, [pc, #8]	; (23d54 <net_shell_cmd_iface+0x10>)
   23d4a:	f7f7 fceb 	bl	1b724 <net_if_foreach>
}
   23d4e:	2000      	movs	r0, #0
   23d50:	bd08      	pop	{r3, pc}
   23d52:	bf00      	nop
   23d54:	0001e8f5 	.word	0x0001e8f5

00023d58 <net_shell_cmd_route>:
{
   23d58:	b508      	push	{r3, lr}
	net_if_foreach(iface_per_route_cb, NULL);
   23d5a:	2100      	movs	r1, #0
   23d5c:	4802      	ldr	r0, [pc, #8]	; (23d68 <net_shell_cmd_route+0x10>)
   23d5e:	f7f7 fce1 	bl	1b724 <net_if_foreach>
}
   23d62:	2000      	movs	r0, #0
   23d64:	bd08      	pop	{r3, pc}
   23d66:	bf00      	nop
   23d68:	00024195 	.word	0x00024195

00023d6c <net_shell_cmd_mem>:
{
   23d6c:	b500      	push	{lr}
   23d6e:	b093      	sub	sp, #76	; 0x4c
	net_pkt_get_info(&rx, &tx, &rx_data, &tx_data);
   23d70:	ab0e      	add	r3, sp, #56	; 0x38
   23d72:	aa0f      	add	r2, sp, #60	; 0x3c
   23d74:	a910      	add	r1, sp, #64	; 0x40
   23d76:	a811      	add	r0, sp, #68	; 0x44
   23d78:	f7f9 f9aa 	bl	1d0d0 <net_pkt_get_info>
	printk("Fragment length %d bytes\n", CONFIG_NET_BUF_DATA_SIZE);
   23d7c:	f44f 7100 	mov.w	r1, #512	; 0x200
   23d80:	4819      	ldr	r0, [pc, #100]	; (23de8 <net_shell_cmd_mem+0x7c>)
   23d82:	f7df f8ad 	bl	2ee0 <printk>
	printk("Network buffer pools:\n");
   23d86:	4819      	ldr	r0, [pc, #100]	; (23dec <net_shell_cmd_mem+0x80>)
   23d88:	f7df f8aa 	bl	2ee0 <printk>
	printk("(CONFIG_NET_BUF_POOL_USAGE to see free #s)\n");
   23d8c:	4818      	ldr	r0, [pc, #96]	; (23df0 <net_shell_cmd_mem+0x84>)
   23d8e:	f7df f8a7 	bl	2ee0 <printk>
	printk("Address\t\tTotal\tName\n");
   23d92:	4818      	ldr	r0, [pc, #96]	; (23df4 <net_shell_cmd_mem+0x88>)
   23d94:	f7df f8a4 	bl	2ee0 <printk>
	printk("%p\t%d\tRX\n", rx, rx->num_blocks);
   23d98:	9911      	ldr	r1, [sp, #68]	; 0x44
   23d9a:	688a      	ldr	r2, [r1, #8]
   23d9c:	4816      	ldr	r0, [pc, #88]	; (23df8 <net_shell_cmd_mem+0x8c>)
   23d9e:	f7df f89f 	bl	2ee0 <printk>
	printk("%p\t%d\tTX\n", tx, tx->num_blocks);
   23da2:	9910      	ldr	r1, [sp, #64]	; 0x40
   23da4:	688a      	ldr	r2, [r1, #8]
   23da6:	4815      	ldr	r0, [pc, #84]	; (23dfc <net_shell_cmd_mem+0x90>)
   23da8:	f7df f89a 	bl	2ee0 <printk>
	printk("%p\t%d\tRX DATA\n", rx_data, rx_data->buf_count);
   23dac:	990f      	ldr	r1, [sp, #60]	; 0x3c
   23dae:	8a0a      	ldrh	r2, [r1, #16]
   23db0:	4813      	ldr	r0, [pc, #76]	; (23e00 <net_shell_cmd_mem+0x94>)
   23db2:	f7df f895 	bl	2ee0 <printk>
	printk("%p\t%d\tTX DATA\n", tx_data, tx_data->buf_count);
   23db6:	990e      	ldr	r1, [sp, #56]	; 0x38
   23db8:	8a0a      	ldrh	r2, [r1, #16]
   23dba:	4812      	ldr	r0, [pc, #72]	; (23e04 <net_shell_cmd_mem+0x98>)
   23dbc:	f7df f890 	bl	2ee0 <printk>
		memset(&info, 0, sizeof(info));
   23dc0:	2238      	movs	r2, #56	; 0x38
   23dc2:	2100      	movs	r1, #0
   23dc4:	4668      	mov	r0, sp
   23dc6:	f005 fc87 	bl	296d8 <memset>
		net_context_foreach(context_info, &info);
   23dca:	4669      	mov	r1, sp
   23dcc:	480e      	ldr	r0, [pc, #56]	; (23e08 <net_shell_cmd_mem+0x9c>)
   23dce:	f7f8 fd8d 	bl	1c8ec <net_context_foreach>
		if (!info.are_external_pools) {
   23dd2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   23dd6:	b11b      	cbz	r3, 23de0 <net_shell_cmd_mem+0x74>
}
   23dd8:	2000      	movs	r0, #0
   23dda:	b013      	add	sp, #76	; 0x4c
   23ddc:	f85d fb04 	ldr.w	pc, [sp], #4
			printk("No external memory pools found.\n");
   23de0:	480a      	ldr	r0, [pc, #40]	; (23e0c <net_shell_cmd_mem+0xa0>)
   23de2:	f7df f87d 	bl	2ee0 <printk>
   23de6:	e7f7      	b.n	23dd8 <net_shell_cmd_mem+0x6c>
   23de8:	00030568 	.word	0x00030568
   23dec:	00030584 	.word	0x00030584
   23df0:	0003059c 	.word	0x0003059c
   23df4:	000305c8 	.word	0x000305c8
   23df8:	000305e0 	.word	0x000305e0
   23dfc:	000305ec 	.word	0x000305ec
   23e00:	000305f8 	.word	0x000305f8
   23e04:	00030608 	.word	0x00030608
   23e08:	000237d9 	.word	0x000237d9
   23e0c:	00030618 	.word	0x00030618

00023e10 <net_shell_cmd_nbr>:
{
   23e10:	b510      	push	{r4, lr}
   23e12:	b086      	sub	sp, #24
	int count = 0;
   23e14:	2300      	movs	r3, #0
   23e16:	9305      	str	r3, [sp, #20]
	if (argv[arg]) {
   23e18:	6848      	ldr	r0, [r1, #4]
   23e1a:	b1d8      	cbz	r0, 23e54 <net_shell_cmd_nbr+0x44>
   23e1c:	460c      	mov	r4, r1
		if (strcmp(argv[arg], "rm")) {
   23e1e:	4920      	ldr	r1, [pc, #128]	; (23ea0 <net_shell_cmd_nbr+0x90>)
   23e20:	f7dc faf2 	bl	408 <strcmp>
   23e24:	b9f8      	cbnz	r0, 23e66 <net_shell_cmd_nbr+0x56>
		if (!argv[++arg]) {
   23e26:	68a1      	ldr	r1, [r4, #8]
   23e28:	b311      	cbz	r1, 23e70 <net_shell_cmd_nbr+0x60>
		ret = net_addr_pton(AF_INET6, argv[arg], &addr);
   23e2a:	aa01      	add	r2, sp, #4
   23e2c:	200a      	movs	r0, #10
   23e2e:	f7f9 fbc4 	bl	1d5ba <net_addr_pton>
		if (ret < 0) {
   23e32:	2800      	cmp	r0, #0
   23e34:	db20      	blt.n	23e78 <net_shell_cmd_nbr+0x68>
		if (!net_ipv6_nbr_rm(NULL, &addr)) {
   23e36:	a901      	add	r1, sp, #4
   23e38:	2000      	movs	r0, #0
   23e3a:	f7fb f83f 	bl	1eebc <net_ipv6_nbr_rm>
   23e3e:	bb00      	cbnz	r0, 23e82 <net_shell_cmd_nbr+0x72>
   23e40:	2328      	movs	r3, #40	; 0x28
   23e42:	4a18      	ldr	r2, [pc, #96]	; (23ea4 <net_shell_cmd_nbr+0x94>)
   23e44:	a901      	add	r1, sp, #4
   23e46:	200a      	movs	r0, #10
   23e48:	f7f9 fae0 	bl	1d40c <net_addr_ntop>
			printk("Cannot remove neighbor %s\n",
   23e4c:	4601      	mov	r1, r0
   23e4e:	4816      	ldr	r0, [pc, #88]	; (23ea8 <net_shell_cmd_nbr+0x98>)
   23e50:	f7df f846 	bl	2ee0 <printk>
	net_ipv6_nbr_foreach(nbr_cb, &count);
   23e54:	a905      	add	r1, sp, #20
   23e56:	4815      	ldr	r0, [pc, #84]	; (23eac <net_shell_cmd_nbr+0x9c>)
   23e58:	f7fb f822 	bl	1eea0 <net_ipv6_nbr_foreach>
	if (count == 0) {
   23e5c:	9b05      	ldr	r3, [sp, #20]
   23e5e:	b1db      	cbz	r3, 23e98 <net_shell_cmd_nbr+0x88>
}
   23e60:	2000      	movs	r0, #0
   23e62:	b006      	add	sp, #24
   23e64:	bd10      	pop	{r4, pc}
			printk("Unknown command '%s'\n", argv[arg]);
   23e66:	6861      	ldr	r1, [r4, #4]
   23e68:	4811      	ldr	r0, [pc, #68]	; (23eb0 <net_shell_cmd_nbr+0xa0>)
   23e6a:	f7df f839 	bl	2ee0 <printk>
			return 0;
   23e6e:	e7f7      	b.n	23e60 <net_shell_cmd_nbr+0x50>
			printk("Neighbor IPv6 address missing.\n");
   23e70:	4810      	ldr	r0, [pc, #64]	; (23eb4 <net_shell_cmd_nbr+0xa4>)
   23e72:	f7df f835 	bl	2ee0 <printk>
			return 0;
   23e76:	e7f3      	b.n	23e60 <net_shell_cmd_nbr+0x50>
			printk("Cannot parse '%s'\n", argv[arg]);
   23e78:	68a1      	ldr	r1, [r4, #8]
   23e7a:	480f      	ldr	r0, [pc, #60]	; (23eb8 <net_shell_cmd_nbr+0xa8>)
   23e7c:	f7df f830 	bl	2ee0 <printk>
			return 0;
   23e80:	e7ee      	b.n	23e60 <net_shell_cmd_nbr+0x50>
   23e82:	2328      	movs	r3, #40	; 0x28
   23e84:	4a07      	ldr	r2, [pc, #28]	; (23ea4 <net_shell_cmd_nbr+0x94>)
   23e86:	a901      	add	r1, sp, #4
   23e88:	200a      	movs	r0, #10
   23e8a:	f7f9 fabf 	bl	1d40c <net_addr_ntop>
			printk("Neighbor %s removed.\n",
   23e8e:	4601      	mov	r1, r0
   23e90:	480a      	ldr	r0, [pc, #40]	; (23ebc <net_shell_cmd_nbr+0xac>)
   23e92:	f7df f825 	bl	2ee0 <printk>
   23e96:	e7dd      	b.n	23e54 <net_shell_cmd_nbr+0x44>
		printk("No neighbors.\n");
   23e98:	4809      	ldr	r0, [pc, #36]	; (23ec0 <net_shell_cmd_nbr+0xb0>)
   23e9a:	f7df f821 	bl	2ee0 <printk>
   23e9e:	e7df      	b.n	23e60 <net_shell_cmd_nbr+0x50>
   23ea0:	0003063c 	.word	0x0003063c
   23ea4:	20002328 	.word	0x20002328
   23ea8:	0003068c 	.word	0x0003068c
   23eac:	00023f69 	.word	0x00023f69
   23eb0:	00030640 	.word	0x00030640
   23eb4:	00030658 	.word	0x00030658
   23eb8:	00030678 	.word	0x00030678
   23ebc:	000306a8 	.word	0x000306a8
   23ec0:	000306c0 	.word	0x000306c0

00023ec4 <route_cb>:
{
   23ec4:	b538      	push	{r3, r4, r5, lr}
	if (entry->iface != iface) {
   23ec6:	68c3      	ldr	r3, [r0, #12]
   23ec8:	428b      	cmp	r3, r1
   23eca:	d000      	beq.n	23ece <route_cb+0xa>
   23ecc:	bd38      	pop	{r3, r4, r5, pc}
   23ece:	4604      	mov	r4, r0
   23ed0:	2328      	movs	r3, #40	; 0x28
   23ed2:	4a1e      	ldr	r2, [pc, #120]	; (23f4c <route_cb+0x88>)
   23ed4:	f100 0110 	add.w	r1, r0, #16
   23ed8:	200a      	movs	r0, #10
   23eda:	f7f9 fa97 	bl	1d40c <net_addr_ntop>
	printk("IPv6 prefix : %s/%d\n",
   23ede:	f894 2020 	ldrb.w	r2, [r4, #32]
   23ee2:	4601      	mov	r1, r0
   23ee4:	481a      	ldr	r0, [pc, #104]	; (23f50 <route_cb+0x8c>)
   23ee6:	f7de fffb 	bl	2ee0 <printk>
	return list->head;
   23eea:	6864      	ldr	r4, [r4, #4]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23eec:	2500      	movs	r5, #0
   23eee:	e009      	b.n	23f04 <route_cb+0x40>
			printk("addr : <unknown>\n");
   23ef0:	4818      	ldr	r0, [pc, #96]	; (23f54 <route_cb+0x90>)
   23ef2:	f7de fff5 	bl	2ee0 <printk>
		count++;
   23ef6:	3501      	adds	r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   23ef8:	4622      	mov	r2, r4
   23efa:	b1dc      	cbz	r4, 23f34 <route_cb+0x70>
	return node->next;
   23efc:	6823      	ldr	r3, [r4, #0]
   23efe:	b1db      	cbz	r3, 23f38 <route_cb+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23f00:	b1e2      	cbz	r2, 23f3c <route_cb+0x78>
	return node->next;
   23f02:	6824      	ldr	r4, [r4, #0]
   23f04:	b1e4      	cbz	r4, 23f40 <route_cb+0x7c>
		if (!nexthop_route->nbr) {
   23f06:	6861      	ldr	r1, [r4, #4]
   23f08:	2900      	cmp	r1, #0
   23f0a:	d0f5      	beq.n	23ef8 <route_cb+0x34>
		printk("\tneighbor : %p\t", nexthop_route->nbr);
   23f0c:	4812      	ldr	r0, [pc, #72]	; (23f58 <route_cb+0x94>)
   23f0e:	f7de ffe7 	bl	2ee0 <printk>
		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   23f12:	6863      	ldr	r3, [r4, #4]
   23f14:	7858      	ldrb	r0, [r3, #1]
   23f16:	28ff      	cmp	r0, #255	; 0xff
   23f18:	d0ea      	beq.n	23ef0 <route_cb+0x2c>
			lladdr = net_nbr_get_lladdr(nexthop_route->nbr->idx);
   23f1a:	f7fa fcc1 	bl	1e8a0 <net_nbr_get_lladdr>
	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   23f1e:	2318      	movs	r3, #24
   23f20:	4a0e      	ldr	r2, [pc, #56]	; (23f5c <route_cb+0x98>)
   23f22:	7841      	ldrb	r1, [r0, #1]
   23f24:	3002      	adds	r0, #2
   23f26:	f7f9 fa47 	bl	1d3b8 <net_sprint_ll_addr_buf>
			printk("addr : %s\n",
   23f2a:	4601      	mov	r1, r0
   23f2c:	480c      	ldr	r0, [pc, #48]	; (23f60 <route_cb+0x9c>)
   23f2e:	f7de ffd7 	bl	2ee0 <printk>
   23f32:	e7e0      	b.n	23ef6 <route_cb+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23f34:	4623      	mov	r3, r4
   23f36:	e7e2      	b.n	23efe <route_cb+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   23f38:	2400      	movs	r4, #0
   23f3a:	e7e3      	b.n	23f04 <route_cb+0x40>
   23f3c:	2400      	movs	r4, #0
   23f3e:	e7e1      	b.n	23f04 <route_cb+0x40>
	if (count == 0) {
   23f40:	2d00      	cmp	r5, #0
   23f42:	d1c3      	bne.n	23ecc <route_cb+0x8>
		printk("\t<none>\n");
   23f44:	4807      	ldr	r0, [pc, #28]	; (23f64 <route_cb+0xa0>)
   23f46:	f7de ffcb 	bl	2ee0 <printk>
   23f4a:	e7bf      	b.n	23ecc <route_cb+0x8>
   23f4c:	20002328 	.word	0x20002328
   23f50:	00030c08 	.word	0x00030c08
   23f54:	00030c30 	.word	0x00030c30
   23f58:	00030c20 	.word	0x00030c20
   23f5c:	20002310 	.word	0x20002310
   23f60:	00030c44 	.word	0x00030c44
   23f64:	00030144 	.word	0x00030144

00023f68 <nbr_cb>:
{
   23f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f6c:	b08f      	sub	sp, #60	; 0x3c
   23f6e:	4604      	mov	r4, r0
   23f70:	460d      	mov	r5, r1
	if (*count == 0) {
   23f72:	680b      	ldr	r3, [r1, #0]
   23f74:	2b00      	cmp	r3, #0
   23f76:	d052      	beq.n	2401e <nbr_cb+0xb6>
	(*count)++;
   23f78:	682b      	ldr	r3, [r5, #0]
   23f7a:	3301      	adds	r3, #1
   23f7c:	602b      	str	r3, [r5, #0]
   23f7e:	68e3      	ldr	r3, [r4, #12]
	state_str = net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state);
   23f80:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
   23f84:	f7fa ff68 	bl	1ee58 <net_ipv6_nbr_state2str>
   23f88:	900b      	str	r0, [sp, #44]	; 0x2c
	if (strlen(state_str) == 5) {
   23f8a:	f7dc fbb9 	bl	700 <strlen>
   23f8e:	2805      	cmp	r0, #5
   23f90:	d04a      	beq.n	24028 <nbr_cb+0xc0>
	char *state_pad = "";
   23f92:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 2403c <nbr_cb+0xd4>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   23f96:	682b      	ldr	r3, [r5, #0]
   23f98:	930c      	str	r3, [sp, #48]	; 0x30
   23f9a:	68a3      	ldr	r3, [r4, #8]
   23f9c:	930d      	str	r3, [sp, #52]	; 0x34
   23f9e:	68e0      	ldr	r0, [r4, #12]
	       net_ipv6_nbr_data(nbr)->link_metric,
   23fa0:	f8b0 5066 	ldrh.w	r5, [r0, #102]	; 0x66
	       nbr->ref,
   23fa4:	7826      	ldrb	r6, [r4, #0]
	       net_ipv6_nbr_data(nbr)->ns_count,
   23fa6:	f890 7068 	ldrb.w	r7, [r0, #104]	; 0x68
	       net_ipv6_nbr_data(nbr)->is_router,
   23faa:	f890 8069 	ldrb.w	r8, [r0, #105]	; 0x69
	return _timeout_remaining_get(&work->timeout);
   23fae:	3020      	adds	r0, #32
   23fb0:	f005 f90a 	bl	291c8 <_timeout_remaining_get>
   23fb4:	4682      	mov	sl, r0
	       nbr->idx == NET_NBR_LLADDR_UNKNOWN ? "?" :
   23fb6:	7860      	ldrb	r0, [r4, #1]
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   23fb8:	28ff      	cmp	r0, #255	; 0xff
   23fba:	d038      	beq.n	2402e <nbr_cb+0xc6>
		       net_nbr_get_lladdr(nbr->idx)->addr,
   23fbc:	f7fa fc70 	bl	1e8a0 <net_nbr_get_lladdr>
   23fc0:	f100 0b02 	add.w	fp, r0, #2
		       net_nbr_get_lladdr(nbr->idx)->len),
   23fc4:	7860      	ldrb	r0, [r4, #1]
   23fc6:	f7fa fc6b 	bl	1e8a0 <net_nbr_get_lladdr>
   23fca:	2318      	movs	r3, #24
   23fcc:	4a19      	ldr	r2, [pc, #100]	; (24034 <nbr_cb+0xcc>)
   23fce:	7841      	ldrb	r1, [r0, #1]
   23fd0:	4658      	mov	r0, fp
   23fd2:	f7f9 f9f1 	bl	1d3b8 <net_sprint_ll_addr_buf>
   23fd6:	4683      	mov	fp, r0
	       net_nbr_get_lladdr(nbr->idx)->len == 8 ? "" : padding,
   23fd8:	7860      	ldrb	r0, [r4, #1]
   23fda:	f7fa fc61 	bl	1e8a0 <net_nbr_get_lladdr>
   23fde:	68e1      	ldr	r1, [r4, #12]
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   23fe0:	2328      	movs	r3, #40	; 0x28
   23fe2:	4a15      	ldr	r2, [pc, #84]	; (24038 <nbr_cb+0xd0>)
   23fe4:	3104      	adds	r1, #4
   23fe6:	200a      	movs	r0, #10
   23fe8:	f7f9 fa10 	bl	1d40c <net_addr_ntop>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   23fec:	9009      	str	r0, [sp, #36]	; 0x24
   23fee:	4b13      	ldr	r3, [pc, #76]	; (2403c <nbr_cb+0xd4>)
   23ff0:	9308      	str	r3, [sp, #32]
   23ff2:	f8cd b01c 	str.w	fp, [sp, #28]
   23ff6:	f8cd a018 	str.w	sl, [sp, #24]
   23ffa:	f8cd 9014 	str.w	r9, [sp, #20]
   23ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24000:	9304      	str	r3, [sp, #16]
   24002:	f8cd 800c 	str.w	r8, [sp, #12]
   24006:	9702      	str	r7, [sp, #8]
   24008:	9601      	str	r6, [sp, #4]
   2400a:	9500      	str	r5, [sp, #0]
   2400c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2400e:	4622      	mov	r2, r4
   24010:	990c      	ldr	r1, [sp, #48]	; 0x30
   24012:	480b      	ldr	r0, [pc, #44]	; (24040 <nbr_cb+0xd8>)
   24014:	f7de ff64 	bl	2ee0 <printk>
}
   24018:	b00f      	add	sp, #60	; 0x3c
   2401a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printk("     Neighbor   Interface        Flags State     "
   2401e:	4907      	ldr	r1, [pc, #28]	; (2403c <nbr_cb+0xd4>)
   24020:	4808      	ldr	r0, [pc, #32]	; (24044 <nbr_cb+0xdc>)
   24022:	f7de ff5d 	bl	2ee0 <printk>
   24026:	e7a7      	b.n	23f78 <nbr_cb+0x10>
		state_pad = "    ";
   24028:	f8df 901c 	ldr.w	r9, [pc, #28]	; 24048 <nbr_cb+0xe0>
   2402c:	e7b3      	b.n	23f96 <nbr_cb+0x2e>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   2402e:	f8df b01c 	ldr.w	fp, [pc, #28]	; 2404c <nbr_cb+0xe4>
   24032:	e7d1      	b.n	23fd8 <nbr_cb+0x70>
   24034:	20002310 	.word	0x20002310
   24038:	20002328 	.word	0x20002328
   2403c:	0002f754 	.word	0x0002f754
   24040:	000302f8 	.word	0x000302f8
   24044:	000302a0 	.word	0x000302a0
   24048:	00030294 	.word	0x00030294
   2404c:	0003029c 	.word	0x0003029c

00024050 <_ping_ipv6>:
{
   24050:	b570      	push	{r4, r5, r6, lr}
   24052:	b084      	sub	sp, #16
   24054:	4605      	mov	r5, r0
	struct net_if *iface = net_if_get_default();
   24056:	f7f6 fbb1 	bl	1a7bc <net_if_get_default>
   2405a:	4604      	mov	r4, r0
	if (net_addr_pton(AF_INET6, host, &ipv6_target) < 0) {
   2405c:	466a      	mov	r2, sp
   2405e:	4629      	mov	r1, r5
   24060:	200a      	movs	r0, #10
   24062:	f7f9 faaa 	bl	1d5ba <net_addr_pton>
   24066:	2800      	cmp	r0, #0
   24068:	db26      	blt.n	240b8 <_ping_ipv6+0x68>
	net_icmpv6_register_handler(&ping6_handler);
   2406a:	4815      	ldr	r0, [pc, #84]	; (240c0 <_ping_ipv6+0x70>)
   2406c:	f7f9 fe0c 	bl	1dc88 <net_icmpv6_register_handler>
	nbr = net_ipv6_nbr_lookup(NULL, &ipv6_target);
   24070:	4669      	mov	r1, sp
   24072:	2000      	movs	r0, #0
   24074:	f7fb fa4c 	bl	1f510 <net_ipv6_nbr_lookup>
	if (nbr) {
   24078:	b100      	cbz	r0, 2407c <_ping_ipv6+0x2c>
		iface = nbr->iface;
   2407a:	6884      	ldr	r4, [r0, #8]
	route = net_route_lookup(NULL, &ipv6_target);
   2407c:	4669      	mov	r1, sp
   2407e:	2000      	movs	r0, #0
   24080:	f7fd ffc4 	bl	2200c <net_route_lookup>
	if (route) {
   24084:	b100      	cbz	r0, 24088 <_ping_ipv6+0x38>
		iface = route->iface;
   24086:	68c4      	ldr	r4, [r0, #12]
					   sys_rand32_get(),
   24088:	f7dd ff90 	bl	1fac <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   2408c:	b286      	uxth	r6, r0
					   sys_rand32_get());
   2408e:	f7dd ff8d 	bl	1fac <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   24092:	b283      	uxth	r3, r0
   24094:	4632      	mov	r2, r6
   24096:	4669      	mov	r1, sp
   24098:	4620      	mov	r0, r4
   2409a:	f7fa fa8f 	bl	1e5bc <net_icmpv6_send_echo_request>
	if (ret) {
   2409e:	4604      	mov	r4, r0
   240a0:	b930      	cbnz	r0, 240b0 <_ping_ipv6+0x60>
		printk("Sent a ping to %s\n", host);
   240a2:	4629      	mov	r1, r5
   240a4:	4807      	ldr	r0, [pc, #28]	; (240c4 <_ping_ipv6+0x74>)
   240a6:	f7de ff1b 	bl	2ee0 <printk>
}
   240aa:	4620      	mov	r0, r4
   240ac:	b004      	add	sp, #16
   240ae:	bd70      	pop	{r4, r5, r6, pc}
	net_icmpv6_unregister_handler(&ping6_handler);
   240b0:	4803      	ldr	r0, [pc, #12]	; (240c0 <_ping_ipv6+0x70>)
   240b2:	f7f9 fdf5 	bl	1dca0 <net_icmpv6_unregister_handler>
   240b6:	e7f8      	b.n	240aa <_ping_ipv6+0x5a>
		return -EINVAL;
   240b8:	f06f 0415 	mvn.w	r4, #21
   240bc:	e7f5      	b.n	240aa <_ping_ipv6+0x5a>
   240be:	bf00      	nop
   240c0:	2000c3f4 	.word	0x2000c3f4
   240c4:	0002ffb0 	.word	0x0002ffb0

000240c8 <net_shell_cmd_ping>:
{
   240c8:	b510      	push	{r4, lr}
   240ca:	460c      	mov	r4, r1
	if (!strcmp(argv[0], "ping")) {
   240cc:	4912      	ldr	r1, [pc, #72]	; (24118 <net_shell_cmd_ping+0x50>)
   240ce:	6820      	ldr	r0, [r4, #0]
   240d0:	f7dc f99a 	bl	408 <strcmp>
   240d4:	b958      	cbnz	r0, 240ee <net_shell_cmd_ping+0x26>
		host = argv[1];
   240d6:	6860      	ldr	r0, [r4, #4]
	ret = _ping_ipv6(host);
   240d8:	f7ff ffba 	bl	24050 <_ping_ipv6>
	if (!ret) {
   240dc:	b168      	cbz	r0, 240fa <net_shell_cmd_ping+0x32>
	} else if (ret == -EIO) {
   240de:	f110 0f05 	cmn.w	r0, #5
   240e2:	d006      	beq.n	240f2 <net_shell_cmd_ping+0x2a>
			printk("Invalid IP address\n");
   240e4:	480d      	ldr	r0, [pc, #52]	; (2411c <net_shell_cmd_ping+0x54>)
   240e6:	f7de fefb 	bl	2ee0 <printk>
}
   240ea:	2000      	movs	r0, #0
   240ec:	bd10      	pop	{r4, pc}
		host = argv[2];
   240ee:	68a0      	ldr	r0, [r4, #8]
   240f0:	e7f2      	b.n	240d8 <net_shell_cmd_ping+0x10>
		printk("Cannot send IPv6 ping\n");
   240f2:	480b      	ldr	r0, [pc, #44]	; (24120 <net_shell_cmd_ping+0x58>)
   240f4:	f7de fef4 	bl	2ee0 <printk>
		return 0;
   240f8:	e7f7      	b.n	240ea <net_shell_cmd_ping+0x22>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   240fa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   240fe:	4809      	ldr	r0, [pc, #36]	; (24124 <net_shell_cmd_ping+0x5c>)
   24100:	f004 fb2a 	bl	28758 <_impl_k_sem_take>
	if (ret == -EAGAIN) {
   24104:	f110 0f0b 	cmn.w	r0, #11
   24108:	d1ef      	bne.n	240ea <net_shell_cmd_ping+0x22>
		printk("Ping timeout\n");
   2410a:	4807      	ldr	r0, [pc, #28]	; (24128 <net_shell_cmd_ping+0x60>)
   2410c:	f7de fee8 	bl	2ee0 <printk>
	net_icmpv6_unregister_handler(&ping6_handler);
   24110:	4806      	ldr	r0, [pc, #24]	; (2412c <net_shell_cmd_ping+0x64>)
   24112:	f7f9 fdc5 	bl	1dca0 <net_icmpv6_unregister_handler>
   24116:	e7e8      	b.n	240ea <net_shell_cmd_ping+0x22>
   24118:	000306d0 	.word	0x000306d0
   2411c:	000306f0 	.word	0x000306f0
   24120:	000306d8 	.word	0x000306d8
   24124:	2000cf44 	.word	0x2000cf44
   24128:	00030704 	.word	0x00030704
   2412c:	2000c3f4 	.word	0x2000c3f4

00024130 <_handle_ipv6_echo_reply>:
{
   24130:	b530      	push	{r4, r5, lr}
   24132:	b08b      	sub	sp, #44	; 0x2c
   24134:	4605      	mov	r5, r0
	return pkt->frags->data;
   24136:	6883      	ldr	r3, [r0, #8]
   24138:	6899      	ldr	r1, [r3, #8]
   2413a:	4c11      	ldr	r4, [pc, #68]	; (24180 <_handle_ipv6_echo_reply+0x50>)
   2413c:	2328      	movs	r3, #40	; 0x28
   2413e:	4622      	mov	r2, r4
   24140:	3118      	adds	r1, #24
   24142:	200a      	movs	r0, #10
   24144:	f7f9 f962 	bl	1d40c <net_addr_ntop>
	snprintk(addr, sizeof(addr), "%s",
   24148:	4603      	mov	r3, r0
   2414a:	4a0e      	ldr	r2, [pc, #56]	; (24184 <_handle_ipv6_echo_reply+0x54>)
   2414c:	2128      	movs	r1, #40	; 0x28
   2414e:	4668      	mov	r0, sp
   24150:	f7de fed4 	bl	2efc <snprintk>
   24154:	68ab      	ldr	r3, [r5, #8]
   24156:	6899      	ldr	r1, [r3, #8]
   24158:	2328      	movs	r3, #40	; 0x28
   2415a:	4622      	mov	r2, r4
   2415c:	3108      	adds	r1, #8
   2415e:	200a      	movs	r0, #10
   24160:	f7f9 f954 	bl	1d40c <net_addr_ntop>
	printk("Received echo reply from %s to %s\n",
   24164:	466a      	mov	r2, sp
   24166:	4601      	mov	r1, r0
   24168:	4807      	ldr	r0, [pc, #28]	; (24188 <_handle_ipv6_echo_reply+0x58>)
   2416a:	f7de feb9 	bl	2ee0 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   2416e:	4807      	ldr	r0, [pc, #28]	; (2418c <_handle_ipv6_echo_reply+0x5c>)
   24170:	f004 fadf 	bl	28732 <_impl_k_sem_give>
	net_icmpv6_unregister_handler(&ping6_handler);
   24174:	4806      	ldr	r0, [pc, #24]	; (24190 <_handle_ipv6_echo_reply+0x60>)
   24176:	f7f9 fd93 	bl	1dca0 <net_icmpv6_unregister_handler>
}
   2417a:	2000      	movs	r0, #0
   2417c:	b00b      	add	sp, #44	; 0x2c
   2417e:	bd30      	pop	{r4, r5, pc}
   24180:	20002328 	.word	0x20002328
   24184:	0002db24 	.word	0x0002db24
   24188:	0002ff8c 	.word	0x0002ff8c
   2418c:	2000cf44 	.word	0x2000cf44
   24190:	2000c3f4 	.word	0x2000c3f4

00024194 <iface_per_route_cb>:
{
   24194:	b510      	push	{r4, lr}
   24196:	b082      	sub	sp, #8
   24198:	4604      	mov	r4, r0
	printk("\nIPv6 routes for interface %p (%s)\n", iface,
   2419a:	a901      	add	r1, sp, #4
   2419c:	f7ff faba 	bl	23714 <iface2str>
   241a0:	4602      	mov	r2, r0
   241a2:	4621      	mov	r1, r4
   241a4:	4806      	ldr	r0, [pc, #24]	; (241c0 <iface_per_route_cb+0x2c>)
   241a6:	f7de fe9b 	bl	2ee0 <printk>
	printk("=======================================%s\n", extra);
   241aa:	9901      	ldr	r1, [sp, #4]
   241ac:	4805      	ldr	r0, [pc, #20]	; (241c4 <iface_per_route_cb+0x30>)
   241ae:	f7de fe97 	bl	2ee0 <printk>
	net_route_foreach(route_cb, iface);
   241b2:	4621      	mov	r1, r4
   241b4:	4804      	ldr	r0, [pc, #16]	; (241c8 <iface_per_route_cb+0x34>)
   241b6:	f7fe f829 	bl	2220c <net_route_foreach>
}
   241ba:	b002      	add	sp, #8
   241bc:	bd10      	pop	{r4, pc}
   241be:	bf00      	nop
   241c0:	00030244 	.word	0x00030244
   241c4:	00030268 	.word	0x00030268
   241c8:	00023ec5 	.word	0x00023ec5

000241cc <tcp_connected>:
{
   241cc:	b510      	push	{r4, lr}
	if (status < 0) {
   241ce:	2900      	cmp	r1, #0
   241d0:	db03      	blt.n	241da <tcp_connected+0xe>
		printk("TCP connected\n");
   241d2:	4807      	ldr	r0, [pc, #28]	; (241f0 <tcp_connected+0x24>)
   241d4:	f7de fe84 	bl	2ee0 <printk>
   241d8:	bd10      	pop	{r4, pc}
   241da:	4604      	mov	r4, r0
		printk("TCP connection failed (%d)\n", status);
   241dc:	4805      	ldr	r0, [pc, #20]	; (241f4 <tcp_connected+0x28>)
   241de:	f7de fe7f 	bl	2ee0 <printk>
		net_context_put(context);
   241e2:	4620      	mov	r0, r4
   241e4:	f7f8 f834 	bl	1c250 <net_context_put>
		tcp_ctx = NULL;
   241e8:	2200      	movs	r2, #0
   241ea:	4b03      	ldr	r3, [pc, #12]	; (241f8 <tcp_connected+0x2c>)
   241ec:	601a      	str	r2, [r3, #0]
   241ee:	bd10      	pop	{r4, pc}
   241f0:	00030ce4 	.word	0x00030ce4
   241f4:	00030cc8 	.word	0x00030cc8
   241f8:	20002350 	.word	0x20002350

000241fc <get_my_ipv6_addr>:
{
   241fc:	b538      	push	{r3, r4, r5, lr}
   241fe:	460c      	mov	r4, r1
	my6addr = net_if_ipv6_select_src_addr(iface,
   24200:	1d0d      	adds	r5, r1, #4
   24202:	4629      	mov	r1, r5
   24204:	f7f7 f81e 	bl	1b244 <net_if_ipv6_select_src_addr>
	memcpy(&net_sin6(myaddr)->sin6_addr, my6addr, sizeof(struct in6_addr));
   24208:	2210      	movs	r2, #16
   2420a:	4601      	mov	r1, r0
   2420c:	4628      	mov	r0, r5
   2420e:	f7dc f857 	bl	2c0 <memcpy>
	net_sin6(myaddr)->sin6_port = 0; /* let the IP stack to select */
   24212:	2300      	movs	r3, #0
   24214:	8063      	strh	r3, [r4, #2]
   24216:	bd38      	pop	{r3, r4, r5, pc}

00024218 <tcp_connect>:
{
   24218:	b5f0      	push	{r4, r5, r6, r7, lr}
   2421a:	b08f      	sub	sp, #60	; 0x3c
   2421c:	4607      	mov	r7, r0
   2421e:	460c      	mov	r4, r1
   24220:	4615      	mov	r5, r2
	struct net_if *iface = net_if_get_default();
   24222:	f7f6 facb 	bl	1a7bc <net_if_get_default>
   24226:	4606      	mov	r6, r0
	ret = net_addr_pton(AF_INET6, host, &net_sin6(&addr)->sin6_addr);
   24228:	aa09      	add	r2, sp, #36	; 0x24
   2422a:	4639      	mov	r1, r7
   2422c:	200a      	movs	r0, #10
   2422e:	f7f9 f9c4 	bl	1d5ba <net_addr_pton>
	if (ret < 0) {
   24232:	2800      	cmp	r0, #0
   24234:	db34      	blt.n	242a0 <tcp_connect+0x88>
	net_sin6(&addr)->sin6_port = htons(port);
   24236:	0a21      	lsrs	r1, r4, #8
   24238:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   2423c:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
	nbr = net_ipv6_nbr_lookup(NULL, &net_sin6(&addr)->sin6_addr);
   24240:	a909      	add	r1, sp, #36	; 0x24
   24242:	2000      	movs	r0, #0
   24244:	f7fb f964 	bl	1f510 <net_ipv6_nbr_lookup>
	if (nbr) {
   24248:	b100      	cbz	r0, 2424c <tcp_connect+0x34>
		iface = nbr->iface;
   2424a:	6886      	ldr	r6, [r0, #8]
	get_my_ipv6_addr(iface, &myaddr);
   2424c:	a902      	add	r1, sp, #8
   2424e:	4630      	mov	r0, r6
   24250:	f7ff ffd4 	bl	241fc <get_my_ipv6_addr>
	family = addr.sa_family = myaddr.sa_family = AF_INET6;
   24254:	240a      	movs	r4, #10
   24256:	f8ad 4008 	strh.w	r4, [sp, #8]
   2425a:	aa0e      	add	r2, sp, #56	; 0x38
   2425c:	f822 4d18 	strh.w	r4, [r2, #-24]!
	print_connect_info(family, &myaddr, &addr);
   24260:	a902      	add	r1, sp, #8
   24262:	4620      	mov	r0, r4
   24264:	f7ff fce6 	bl	23c34 <print_connect_info>
	ret = net_context_get(family, SOCK_STREAM, IPPROTO_TCP, ctx);
   24268:	462b      	mov	r3, r5
   2426a:	2206      	movs	r2, #6
   2426c:	2101      	movs	r1, #1
   2426e:	4620      	mov	r0, r4
   24270:	f7f7 fd82 	bl	1bd78 <net_context_get>
	if (ret < 0) {
   24274:	1e04      	subs	r4, r0, #0
   24276:	db18      	blt.n	242aa <tcp_connect+0x92>
	ret = net_context_bind(*ctx, &myaddr, addrlen);
   24278:	2218      	movs	r2, #24
   2427a:	a902      	add	r1, sp, #8
   2427c:	6828      	ldr	r0, [r5, #0]
   2427e:	f7f8 f829 	bl	1c2d4 <net_context_bind>
	if (ret < 0) {
   24282:	1e04      	subs	r4, r0, #0
   24284:	db16      	blt.n	242b4 <tcp_connect+0x9c>
	return net_context_connect(*ctx, &addr, addrlen, tcp_connected,
   24286:	6828      	ldr	r0, [r5, #0]
   24288:	2300      	movs	r3, #0
   2428a:	9301      	str	r3, [sp, #4]
   2428c:	9300      	str	r3, [sp, #0]
   2428e:	4b0c      	ldr	r3, [pc, #48]	; (242c0 <tcp_connect+0xa8>)
   24290:	2218      	movs	r2, #24
   24292:	a908      	add	r1, sp, #32
   24294:	f7f8 f9b0 	bl	1c5f8 <net_context_connect>
   24298:	4604      	mov	r4, r0
}
   2429a:	4620      	mov	r0, r4
   2429c:	b00f      	add	sp, #60	; 0x3c
   2429e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("Invalid IPv6 address\n");
   242a0:	4808      	ldr	r0, [pc, #32]	; (242c4 <tcp_connect+0xac>)
   242a2:	f7de fe1d 	bl	2ee0 <printk>
		return 0;
   242a6:	2400      	movs	r4, #0
   242a8:	e7f7      	b.n	2429a <tcp_connect+0x82>
		printk("Cannot get TCP context (%d)\n", ret);
   242aa:	4621      	mov	r1, r4
   242ac:	4806      	ldr	r0, [pc, #24]	; (242c8 <tcp_connect+0xb0>)
   242ae:	f7de fe17 	bl	2ee0 <printk>
		return ret;
   242b2:	e7f2      	b.n	2429a <tcp_connect+0x82>
		printk("Cannot bind TCP (%d)\n", ret);
   242b4:	4621      	mov	r1, r4
   242b6:	4805      	ldr	r0, [pc, #20]	; (242cc <tcp_connect+0xb4>)
   242b8:	f7de fe12 	bl	2ee0 <printk>
		return ret;
   242bc:	e7ed      	b.n	2429a <tcp_connect+0x82>
   242be:	bf00      	nop
   242c0:	000241cd 	.word	0x000241cd
   242c4:	00030c78 	.word	0x00030c78
   242c8:	00030c90 	.word	0x00030c90
   242cc:	00030cb0 	.word	0x00030cb0

000242d0 <net_shell_cmd_tcp>:
}
#endif

int net_shell_cmd_tcp(int argc, char *argv[])
{
   242d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   242d2:	b083      	sub	sp, #12
#if defined(CONFIG_NET_TCP)
	int arg = 1;
	int ret;

	if (argv[arg]) {
   242d4:	6848      	ldr	r0, [r1, #4]
   242d6:	2800      	cmp	r0, #0
   242d8:	f000 8099 	beq.w	2440e <net_shell_cmd_tcp+0x13e>
   242dc:	460c      	mov	r4, r1
		if (!strcmp(argv[arg], "connect")) {
   242de:	4954      	ldr	r1, [pc, #336]	; (24430 <net_shell_cmd_tcp+0x160>)
   242e0:	f7dc f892 	bl	408 <strcmp>
   242e4:	4605      	mov	r5, r0
   242e6:	bb20      	cbnz	r0, 24332 <net_shell_cmd_tcp+0x62>
			/* tcp connect <ip> port */
			char *ip;
			u16_t port;

			if (tcp_ctx && net_context_is_used(tcp_ctx)) {
   242e8:	4b52      	ldr	r3, [pc, #328]	; (24434 <net_shell_cmd_tcp+0x164>)
   242ea:	681b      	ldr	r3, [r3, #0]
   242ec:	b123      	cbz	r3, 242f8 <net_shell_cmd_tcp+0x28>
	return context->flags & NET_CONTEXT_IN_USE;
   242ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   242f2:	f013 0f01 	tst.w	r3, #1
   242f6:	d110      	bne.n	2431a <net_shell_cmd_tcp+0x4a>
				printk("Already connected\n");
				return 0;
			}

			if (!argv[++arg]) {
   242f8:	68a6      	ldr	r6, [r4, #8]
   242fa:	b196      	cbz	r6, 24322 <net_shell_cmd_tcp+0x52>
				return 0;
			}

			ip = argv[arg];

			if (!argv[++arg]) {
   242fc:	68e0      	ldr	r0, [r4, #12]
   242fe:	b1a0      	cbz	r0, 2432a <net_shell_cmd_tcp+0x5a>
				printk("Peer port missing.\n");
				return 0;
			}

			port = strtol(argv[arg], NULL, 10);
   24300:	220a      	movs	r2, #10
   24302:	2100      	movs	r1, #0
   24304:	f005 ff02 	bl	2a10c <strtol>

			return tcp_connect(ip, port, &tcp_ctx);
   24308:	4a4a      	ldr	r2, [pc, #296]	; (24434 <net_shell_cmd_tcp+0x164>)
   2430a:	b281      	uxth	r1, r0
   2430c:	4630      	mov	r0, r6
   2430e:	f7ff ff83 	bl	24218 <tcp_connect>
   24312:	4605      	mov	r5, r0
#else
	printk("TCP not enabled.\n");
#endif /* CONFIG_NET_TCP */

	return 0;
}
   24314:	4628      	mov	r0, r5
   24316:	b003      	add	sp, #12
   24318:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printk("Already connected\n");
   2431a:	4847      	ldr	r0, [pc, #284]	; (24438 <net_shell_cmd_tcp+0x168>)
   2431c:	f7de fde0 	bl	2ee0 <printk>
				return 0;
   24320:	e7f8      	b.n	24314 <net_shell_cmd_tcp+0x44>
				printk("Peer IP address missing.\n");
   24322:	4846      	ldr	r0, [pc, #280]	; (2443c <net_shell_cmd_tcp+0x16c>)
   24324:	f7de fddc 	bl	2ee0 <printk>
				return 0;
   24328:	e7f4      	b.n	24314 <net_shell_cmd_tcp+0x44>
				printk("Peer port missing.\n");
   2432a:	4845      	ldr	r0, [pc, #276]	; (24440 <net_shell_cmd_tcp+0x170>)
   2432c:	f7de fdd8 	bl	2ee0 <printk>
				return 0;
   24330:	e7f0      	b.n	24314 <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "send")) {
   24332:	4944      	ldr	r1, [pc, #272]	; (24444 <net_shell_cmd_tcp+0x174>)
   24334:	6860      	ldr	r0, [r4, #4]
   24336:	f7dc f867 	bl	408 <strcmp>
   2433a:	4605      	mov	r5, r0
   2433c:	2800      	cmp	r0, #0
   2433e:	d140      	bne.n	243c2 <net_shell_cmd_tcp+0xf2>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   24340:	4b3c      	ldr	r3, [pc, #240]	; (24434 <net_shell_cmd_tcp+0x164>)
   24342:	6818      	ldr	r0, [r3, #0]
   24344:	b300      	cbz	r0, 24388 <net_shell_cmd_tcp+0xb8>
   24346:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   2434a:	f013 0f01 	tst.w	r3, #1
   2434e:	d01b      	beq.n	24388 <net_shell_cmd_tcp+0xb8>
			if (!argv[++arg]) {
   24350:	68a3      	ldr	r3, [r4, #8]
   24352:	b1eb      	cbz	r3, 24390 <net_shell_cmd_tcp+0xc0>
			pkt = net_pkt_get_tx(tcp_ctx, TCP_TIMEOUT);
   24354:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   24358:	f7f8 fbdc 	bl	1cb14 <net_pkt_get_tx>
			if (!pkt) {
   2435c:	4606      	mov	r6, r0
   2435e:	b1d8      	cbz	r0, 24398 <net_shell_cmd_tcp+0xc8>
			ret = net_pkt_append_all(pkt, strlen(argv[arg]),
   24360:	68a0      	ldr	r0, [r4, #8]
   24362:	f7dc f9cd 	bl	700 <strlen>
   24366:	b287      	uxth	r7, r0
	return net_pkt_append(pkt, len, data, timeout) == len;
   24368:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   2436c:	68a2      	ldr	r2, [r4, #8]
   2436e:	4639      	mov	r1, r7
   24370:	4630      	mov	r0, r6
   24372:	f7f8 fd3a 	bl	1cdea <net_pkt_append>
			if (!ret) {
   24376:	4287      	cmp	r7, r0
   24378:	d012      	beq.n	243a0 <net_shell_cmd_tcp+0xd0>
				printk("Cannot build msg (out of pkts)\n");
   2437a:	4833      	ldr	r0, [pc, #204]	; (24448 <net_shell_cmd_tcp+0x178>)
   2437c:	f7de fdb0 	bl	2ee0 <printk>
				net_pkt_unref(pkt);
   24380:	4630      	mov	r0, r6
   24382:	f7f8 fbfa 	bl	1cb7a <net_pkt_unref>
				return 0;
   24386:	e7c5      	b.n	24314 <net_shell_cmd_tcp+0x44>
				printk("Not connected\n");
   24388:	4830      	ldr	r0, [pc, #192]	; (2444c <net_shell_cmd_tcp+0x17c>)
   2438a:	f7de fda9 	bl	2ee0 <printk>
				return 0;
   2438e:	e7c1      	b.n	24314 <net_shell_cmd_tcp+0x44>
				printk("No data to send.\n");
   24390:	482f      	ldr	r0, [pc, #188]	; (24450 <net_shell_cmd_tcp+0x180>)
   24392:	f7de fda5 	bl	2ee0 <printk>
				return 0;
   24396:	e7bd      	b.n	24314 <net_shell_cmd_tcp+0x44>
				printk("Out of pkts, msg cannot be sent.\n");
   24398:	482e      	ldr	r0, [pc, #184]	; (24454 <net_shell_cmd_tcp+0x184>)
   2439a:	f7de fda1 	bl	2ee0 <printk>
				return 0;
   2439e:	e7b9      	b.n	24314 <net_shell_cmd_tcp+0x44>
			ret = net_context_send(pkt, tcp_sent_cb, TCP_TIMEOUT,
   243a0:	2300      	movs	r3, #0
   243a2:	9300      	str	r3, [sp, #0]
   243a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   243a8:	492b      	ldr	r1, [pc, #172]	; (24458 <net_shell_cmd_tcp+0x188>)
   243aa:	4630      	mov	r0, r6
   243ac:	f7f8 fa12 	bl	1c7d4 <net_context_send>
			if (ret < 0) {
   243b0:	1e01      	subs	r1, r0, #0
   243b2:	daaf      	bge.n	24314 <net_shell_cmd_tcp+0x44>
				printk("Cannot send msg (%d)\n", ret);
   243b4:	4829      	ldr	r0, [pc, #164]	; (2445c <net_shell_cmd_tcp+0x18c>)
   243b6:	f7de fd93 	bl	2ee0 <printk>
				net_pkt_unref(pkt);
   243ba:	4630      	mov	r0, r6
   243bc:	f7f8 fbdd 	bl	1cb7a <net_pkt_unref>
				return 0;
   243c0:	e7a8      	b.n	24314 <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "close")) {
   243c2:	4927      	ldr	r1, [pc, #156]	; (24460 <net_shell_cmd_tcp+0x190>)
   243c4:	6860      	ldr	r0, [r4, #4]
   243c6:	f7dc f81f 	bl	408 <strcmp>
   243ca:	4605      	mov	r5, r0
   243cc:	b9d0      	cbnz	r0, 24404 <net_shell_cmd_tcp+0x134>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   243ce:	4b19      	ldr	r3, [pc, #100]	; (24434 <net_shell_cmd_tcp+0x164>)
   243d0:	6818      	ldr	r0, [r3, #0]
   243d2:	b120      	cbz	r0, 243de <net_shell_cmd_tcp+0x10e>
   243d4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   243d8:	f013 0f01 	tst.w	r3, #1
   243dc:	d103      	bne.n	243e6 <net_shell_cmd_tcp+0x116>
				printk("Not connected\n");
   243de:	481b      	ldr	r0, [pc, #108]	; (2444c <net_shell_cmd_tcp+0x17c>)
   243e0:	f7de fd7e 	bl	2ee0 <printk>
				return 0;
   243e4:	e796      	b.n	24314 <net_shell_cmd_tcp+0x44>
			ret = net_context_put(tcp_ctx);
   243e6:	f7f7 ff33 	bl	1c250 <net_context_put>
			if (ret < 0) {
   243ea:	1e01      	subs	r1, r0, #0
   243ec:	db06      	blt.n	243fc <net_shell_cmd_tcp+0x12c>
			printk("Connection closed.\n");
   243ee:	481d      	ldr	r0, [pc, #116]	; (24464 <net_shell_cmd_tcp+0x194>)
   243f0:	f7de fd76 	bl	2ee0 <printk>
			tcp_ctx = NULL;
   243f4:	2200      	movs	r2, #0
   243f6:	4b0f      	ldr	r3, [pc, #60]	; (24434 <net_shell_cmd_tcp+0x164>)
   243f8:	601a      	str	r2, [r3, #0]
			return 0;
   243fa:	e78b      	b.n	24314 <net_shell_cmd_tcp+0x44>
				printk("Cannot close the connection (%d)\n",
   243fc:	481a      	ldr	r0, [pc, #104]	; (24468 <net_shell_cmd_tcp+0x198>)
   243fe:	f7de fd6f 	bl	2ee0 <printk>
				return 0;
   24402:	e787      	b.n	24314 <net_shell_cmd_tcp+0x44>
		printk("Unknown command '%s'\n", argv[arg]);
   24404:	6861      	ldr	r1, [r4, #4]
   24406:	4819      	ldr	r0, [pc, #100]	; (2446c <net_shell_cmd_tcp+0x19c>)
   24408:	f7de fd6a 	bl	2ee0 <printk>
		goto usage;
   2440c:	e002      	b.n	24414 <net_shell_cmd_tcp+0x144>
		printk("Invalid command.\n");
   2440e:	4818      	ldr	r0, [pc, #96]	; (24470 <net_shell_cmd_tcp+0x1a0>)
   24410:	f7de fd66 	bl	2ee0 <printk>
		printk("Usage:\n");
   24414:	4817      	ldr	r0, [pc, #92]	; (24474 <net_shell_cmd_tcp+0x1a4>)
   24416:	f7de fd63 	bl	2ee0 <printk>
		printk("\ttcp connect <ipaddr> port\n");
   2441a:	4817      	ldr	r0, [pc, #92]	; (24478 <net_shell_cmd_tcp+0x1a8>)
   2441c:	f7de fd60 	bl	2ee0 <printk>
		printk("\ttcp send <data>\n");
   24420:	4816      	ldr	r0, [pc, #88]	; (2447c <net_shell_cmd_tcp+0x1ac>)
   24422:	f7de fd5d 	bl	2ee0 <printk>
		printk("\ttcp close\n");
   24426:	4816      	ldr	r0, [pc, #88]	; (24480 <net_shell_cmd_tcp+0x1b0>)
   24428:	f7de fd5a 	bl	2ee0 <printk>
	return 0;
   2442c:	2500      	movs	r5, #0
   2442e:	e771      	b.n	24314 <net_shell_cmd_tcp+0x44>
   24430:	0002f3e4 	.word	0x0002f3e4
   24434:	20002350 	.word	0x20002350
   24438:	00030a48 	.word	0x00030a48
   2443c:	00030a5c 	.word	0x00030a5c
   24440:	00030a78 	.word	0x00030a78
   24444:	00030a8c 	.word	0x00030a8c
   24448:	00030adc 	.word	0x00030adc
   2444c:	00030a94 	.word	0x00030a94
   24450:	00030aa4 	.word	0x00030aa4
   24454:	00030ab8 	.word	0x00030ab8
   24458:	00023abd 	.word	0x00023abd
   2445c:	00030afc 	.word	0x00030afc
   24460:	00030b14 	.word	0x00030b14
   24464:	00030b40 	.word	0x00030b40
   24468:	00030b1c 	.word	0x00030b1c
   2446c:	00030640 	.word	0x00030640
   24470:	00030b54 	.word	0x00030b54
   24474:	00030b68 	.word	0x00030b68
   24478:	00030b70 	.word	0x00030b70
   2447c:	00030b8c 	.word	0x00030b8c
   24480:	00030ba0 	.word	0x00030ba0

00024484 <find_conn_handler>:
static int find_conn_handler(enum net_ip_protocol proto,
			     const struct sockaddr *remote_addr,
			     const struct sockaddr *local_addr,
			     u16_t remote_port,
			     u16_t local_port)
{
   24484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24488:	4605      	mov	r5, r0
   2448a:	460e      	mov	r6, r1
   2448c:	4617      	mov	r7, r2
   2448e:	4699      	mov	r9, r3
   24490:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   24494:	2400      	movs	r4, #0
   24496:	e012      	b.n	244be <find_conn_handler+0x3a>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   24498:	f013 0f02 	tst.w	r3, #2
   2449c:	d10e      	bne.n	244bc <find_conn_handler+0x38>
				continue;
			}
		}

		if (local_addr) {
   2449e:	2f00      	cmp	r7, #0
   244a0:	d051      	beq.n	24546 <find_conn_handler+0xc2>
			if (!(conns[i].flags & NET_CONN_LOCAL_ADDR_SET)) {
   244a2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   244a6:	009a      	lsls	r2, r3, #2
   244a8:	4b3c      	ldr	r3, [pc, #240]	; (2459c <find_conn_handler+0x118>)
   244aa:	4413      	add	r3, r2
   244ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   244b0:	f013 0f04 	tst.w	r3, #4
   244b4:	d002      	beq.n	244bc <find_conn_handler+0x38>
				continue;
			}

#if defined(CONFIG_NET_IPV6)
			if (local_addr->sa_family == AF_INET6 &&
   244b6:	883b      	ldrh	r3, [r7, #0]
   244b8:	2b0a      	cmp	r3, #10
   244ba:	d030      	beq.n	2451e <find_conn_handler+0x9a>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   244bc:	3401      	adds	r4, #1
   244be:	2c03      	cmp	r4, #3
   244c0:	dc67      	bgt.n	24592 <find_conn_handler+0x10e>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   244c2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   244c6:	009a      	lsls	r2, r3, #2
   244c8:	4b34      	ldr	r3, [pc, #208]	; (2459c <find_conn_handler+0x118>)
   244ca:	4413      	add	r3, r2
   244cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   244d0:	f013 0f01 	tst.w	r3, #1
   244d4:	d0f2      	beq.n	244bc <find_conn_handler+0x38>
		if (conns[i].proto != proto) {
   244d6:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   244da:	0091      	lsls	r1, r2, #2
   244dc:	4a2f      	ldr	r2, [pc, #188]	; (2459c <find_conn_handler+0x118>)
   244de:	440a      	add	r2, r1
   244e0:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   244e4:	42aa      	cmp	r2, r5
   244e6:	d1e9      	bne.n	244bc <find_conn_handler+0x38>
		if (remote_addr) {
   244e8:	2e00      	cmp	r6, #0
   244ea:	d0d5      	beq.n	24498 <find_conn_handler+0x14>
			if (!(conns[i].flags & NET_CONN_REMOTE_ADDR_SET)) {
   244ec:	f013 0f02 	tst.w	r3, #2
   244f0:	d0e4      	beq.n	244bc <find_conn_handler+0x38>
			if (remote_addr->sa_family == AF_INET6 &&
   244f2:	8833      	ldrh	r3, [r6, #0]
   244f4:	2b0a      	cmp	r3, #10
   244f6:	d1e1      	bne.n	244bc <find_conn_handler+0x38>
			    conns[i].remote_addr.sa_family) {
   244f8:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
   244fc:	008a      	lsls	r2, r1, #2
   244fe:	4927      	ldr	r1, [pc, #156]	; (2459c <find_conn_handler+0x118>)
   24500:	5a8a      	ldrh	r2, [r1, r2]
			if (remote_addr->sa_family == AF_INET6 &&
   24502:	4293      	cmp	r3, r2
   24504:	d1da      	bne.n	244bc <find_conn_handler+0x38>
					    &net_sin6(&conns[i].remote_addr)->
   24506:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   2450a:	0093      	lsls	r3, r2, #2
   2450c:	4419      	add	r1, r3
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   2450e:	2210      	movs	r2, #16
   24510:	3104      	adds	r1, #4
   24512:	1d30      	adds	r0, r6, #4
   24514:	f005 f84c 	bl	295b0 <memcmp>
				if (!net_ipv6_addr_cmp(
   24518:	2800      	cmp	r0, #0
   2451a:	d1cf      	bne.n	244bc <find_conn_handler+0x38>
   2451c:	e7bf      	b.n	2449e <find_conn_handler+0x1a>
			    local_addr->sa_family ==
			    conns[i].local_addr.sa_family) {
   2451e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24522:	0091      	lsls	r1, r2, #2
   24524:	4a1d      	ldr	r2, [pc, #116]	; (2459c <find_conn_handler+0x118>)
   24526:	440a      	add	r2, r1
   24528:	8b12      	ldrh	r2, [r2, #24]
			if (local_addr->sa_family == AF_INET6 &&
   2452a:	4293      	cmp	r3, r2
   2452c:	d1c6      	bne.n	244bc <find_conn_handler+0x38>
				if (!net_ipv6_addr_cmp(
					    &net_sin6(local_addr)->sin6_addr,
					    &net_sin6(&conns[i].local_addr)->
   2452e:	460b      	mov	r3, r1
   24530:	3318      	adds	r3, #24
   24532:	4a1a      	ldr	r2, [pc, #104]	; (2459c <find_conn_handler+0x118>)
   24534:	4413      	add	r3, r2
   24536:	2210      	movs	r2, #16
   24538:	1d19      	adds	r1, r3, #4
   2453a:	1d38      	adds	r0, r7, #4
   2453c:	f005 f838 	bl	295b0 <memcmp>
				if (!net_ipv6_addr_cmp(
   24540:	2800      	cmp	r0, #0
   24542:	d1bb      	bne.n	244bc <find_conn_handler+0x38>
   24544:	e009      	b.n	2455a <find_conn_handler+0xd6>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   24546:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2454a:	009a      	lsls	r2, r3, #2
   2454c:	4b13      	ldr	r3, [pc, #76]	; (2459c <find_conn_handler+0x118>)
   2454e:	4413      	add	r3, r2
   24550:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24554:	f013 0f04 	tst.w	r3, #4
   24558:	d1b0      	bne.n	244bc <find_conn_handler+0x38>
				continue;
			}
		}

		if (net_sin(&conns[i].remote_addr)->sin_port !=
   2455a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2455e:	009a      	lsls	r2, r3, #2
   24560:	4b0e      	ldr	r3, [pc, #56]	; (2459c <find_conn_handler+0x118>)
   24562:	4413      	add	r3, r2
   24564:	885a      	ldrh	r2, [r3, #2]
		    htons(remote_port)) {
   24566:	ea4f 2319 	mov.w	r3, r9, lsr #8
   2456a:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   2456e:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].remote_addr)->sin_port !=
   24570:	429a      	cmp	r2, r3
   24572:	d1a3      	bne.n	244bc <find_conn_handler+0x38>
			continue;
		}

		if (net_sin(&conns[i].local_addr)->sin_port !=
   24574:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24578:	0093      	lsls	r3, r2, #2
   2457a:	3318      	adds	r3, #24
   2457c:	4a07      	ldr	r2, [pc, #28]	; (2459c <find_conn_handler+0x118>)
   2457e:	4413      	add	r3, r2
   24580:	885a      	ldrh	r2, [r3, #2]
		    htons(local_port)) {
   24582:	ea4f 2318 	mov.w	r3, r8, lsr #8
   24586:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
   2458a:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].local_addr)->sin_port !=
   2458c:	429a      	cmp	r2, r3
   2458e:	d195      	bne.n	244bc <find_conn_handler+0x38>
   24590:	e001      	b.n	24596 <find_conn_handler+0x112>
		}

		return i;
	}

	return -ENOENT;
   24592:	f06f 0401 	mvn.w	r4, #1
}
   24596:	4620      	mov	r0, r4
   24598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2459c:	200003a8 	.word	0x200003a8

000245a0 <check_addr>:
}

static bool check_addr(struct net_pkt *pkt,
		       struct sockaddr *addr,
		       bool is_remote)
{
   245a0:	b538      	push	{r3, r4, r5, lr}
	if (addr->sa_family != net_pkt_family(pkt)) {
   245a2:	880c      	ldrh	r4, [r1, #0]
	return pkt->family;
   245a4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   245a8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   245ac:	b29d      	uxth	r5, r3
   245ae:	42ac      	cmp	r4, r5
   245b0:	d002      	beq.n	245b8 <check_addr+0x18>
		return false;
   245b2:	2400      	movs	r4, #0
		}
	}
#endif /* CONFIG_NET_IPV4 */

	return true;
}
   245b4:	4620      	mov	r0, r4
   245b6:	bd38      	pop	{r3, r4, r5, pc}
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   245b8:	2b0a      	cmp	r3, #10
   245ba:	d001      	beq.n	245c0 <check_addr+0x20>
	return true;
   245bc:	2401      	movs	r4, #1
   245be:	e7f9      	b.n	245b4 <check_addr+0x14>
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   245c0:	2c0a      	cmp	r4, #10
   245c2:	d001      	beq.n	245c8 <check_addr+0x28>
	return true;
   245c4:	2401      	movs	r4, #1
   245c6:	e7f5      	b.n	245b4 <check_addr+0x14>
		if (is_remote) {
   245c8:	b162      	cbz	r2, 245e4 <check_addr+0x44>
	return pkt->frags->data;
   245ca:	6883      	ldr	r3, [r0, #8]
   245cc:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->src;
   245ce:	3308      	adds	r3, #8
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   245d0:	684a      	ldr	r2, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   245d2:	b95a      	cbnz	r2, 245ec <check_addr+0x4c>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   245d4:	688a      	ldr	r2, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   245d6:	b9ba      	cbnz	r2, 24608 <check_addr+0x68>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   245d8:	68ca      	ldr	r2, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   245da:	b9ba      	cbnz	r2, 2460c <check_addr+0x6c>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   245dc:	690a      	ldr	r2, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   245de:	b1ba      	cbz	r2, 24610 <check_addr+0x70>
   245e0:	2200      	movs	r2, #0
   245e2:	e004      	b.n	245ee <check_addr+0x4e>
   245e4:	6883      	ldr	r3, [r0, #8]
   245e6:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->dst;
   245e8:	3318      	adds	r3, #24
   245ea:	e7f1      	b.n	245d0 <check_addr+0x30>
   245ec:	2200      	movs	r2, #0
		if (!net_is_ipv6_addr_unspecified(
   245ee:	4614      	mov	r4, r2
   245f0:	2a00      	cmp	r2, #0
   245f2:	d1df      	bne.n	245b4 <check_addr+0x14>
   245f4:	4608      	mov	r0, r1
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   245f6:	2210      	movs	r2, #16
   245f8:	4619      	mov	r1, r3
   245fa:	3004      	adds	r0, #4
   245fc:	f004 ffd8 	bl	295b0 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   24600:	2800      	cmp	r0, #0
   24602:	d1d7      	bne.n	245b4 <check_addr+0x14>
		return true;
   24604:	2401      	movs	r4, #1
   24606:	e7d5      	b.n	245b4 <check_addr+0x14>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24608:	2200      	movs	r2, #0
   2460a:	e7f0      	b.n	245ee <check_addr+0x4e>
   2460c:	2200      	movs	r2, #0
   2460e:	e7ee      	b.n	245ee <check_addr+0x4e>
   24610:	2201      	movs	r2, #1
   24612:	e7ec      	b.n	245ee <check_addr+0x4e>

00024614 <net_conn_unregister>:
{
   24614:	b508      	push	{r3, lr}
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   24616:	4b0d      	ldr	r3, [pc, #52]	; (2464c <net_conn_unregister+0x38>)
   24618:	4298      	cmp	r0, r3
   2461a:	d30d      	bcc.n	24638 <net_conn_unregister+0x24>
   2461c:	33f0      	adds	r3, #240	; 0xf0
   2461e:	4298      	cmp	r0, r3
   24620:	d80d      	bhi.n	2463e <net_conn_unregister+0x2a>
	if (!(conn->flags & NET_CONN_IN_USE)) {
   24622:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   24626:	f013 0f01 	tst.w	r3, #1
   2462a:	d00b      	beq.n	24644 <net_conn_unregister+0x30>
	memset(conn, 0, sizeof(*conn));
   2462c:	223c      	movs	r2, #60	; 0x3c
   2462e:	2100      	movs	r1, #0
   24630:	f005 f852 	bl	296d8 <memset>
	return 0;
   24634:	2000      	movs	r0, #0
   24636:	bd08      	pop	{r3, pc}
		return -EINVAL;
   24638:	f06f 0015 	mvn.w	r0, #21
   2463c:	bd08      	pop	{r3, pc}
   2463e:	f06f 0015 	mvn.w	r0, #21
   24642:	bd08      	pop	{r3, pc}
		return -ENOENT;
   24644:	f06f 0001 	mvn.w	r0, #1
}
   24648:	bd08      	pop	{r3, pc}
   2464a:	bf00      	nop
   2464c:	200003a8 	.word	0x200003a8

00024650 <net_conn_register>:
{
   24650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24654:	b082      	sub	sp, #8
   24656:	4681      	mov	r9, r0
   24658:	460d      	mov	r5, r1
   2465a:	4616      	mov	r6, r2
   2465c:	4698      	mov	r8, r3
   2465e:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	i = find_conn_handler(proto, remote_addr, local_addr, remote_port,
   24662:	9700      	str	r7, [sp, #0]
   24664:	f7ff ff0e 	bl	24484 <find_conn_handler>
	if (i != -ENOENT) {
   24668:	f110 0f02 	cmn.w	r0, #2
   2466c:	f040 80ba 	bne.w	247e4 <net_conn_register+0x194>
   24670:	2400      	movs	r4, #0
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   24672:	2c03      	cmp	r4, #3
   24674:	f300 80aa 	bgt.w	247cc <net_conn_register+0x17c>
		if (conns[i].flags & NET_CONN_IN_USE) {
   24678:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2467c:	009a      	lsls	r2, r3, #2
   2467e:	4b60      	ldr	r3, [pc, #384]	; (24800 <net_conn_register+0x1b0>)
   24680:	4413      	add	r3, r2
   24682:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24686:	f013 0f01 	tst.w	r3, #1
   2468a:	d001      	beq.n	24690 <net_conn_register+0x40>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2468c:	3401      	adds	r4, #1
   2468e:	e7f0      	b.n	24672 <net_conn_register+0x22>
		if (remote_addr) {
   24690:	2d00      	cmp	r5, #0
   24692:	d04b      	beq.n	2472c <net_conn_register+0xdc>
			if (remote_addr->sa_family == AF_INET6) {
   24694:	882b      	ldrh	r3, [r5, #0]
   24696:	2b0a      	cmp	r3, #10
   24698:	f040 80a7 	bne.w	247ea <net_conn_register+0x19a>
				memcpy(&conns[i].remote_addr, remote_addr,
   2469c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   246a0:	0093      	lsls	r3, r2, #2
   246a2:	2218      	movs	r2, #24
   246a4:	4629      	mov	r1, r5
   246a6:	4856      	ldr	r0, [pc, #344]	; (24800 <net_conn_register+0x1b0>)
   246a8:	4418      	add	r0, r3
   246aa:	f7db fe09 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   246ae:	686b      	ldr	r3, [r5, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   246b0:	b93b      	cbnz	r3, 246c2 <net_conn_register+0x72>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   246b2:	68ab      	ldr	r3, [r5, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   246b4:	bb8b      	cbnz	r3, 2471a <net_conn_register+0xca>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   246b6:	68eb      	ldr	r3, [r5, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   246b8:	bb8b      	cbnz	r3, 2471e <net_conn_register+0xce>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   246ba:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   246bc:	b38b      	cbz	r3, 24722 <net_conn_register+0xd2>
   246be:	2300      	movs	r3, #0
   246c0:	e000      	b.n	246c4 <net_conn_register+0x74>
   246c2:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   246c4:	b37b      	cbz	r3, 24726 <net_conn_register+0xd6>
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   246c6:	f04f 0a08 	mov.w	sl, #8
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   246ca:	0122      	lsls	r2, r4, #4
   246cc:	1b12      	subs	r2, r2, r4
   246ce:	0091      	lsls	r1, r2, #2
   246d0:	4b4b      	ldr	r3, [pc, #300]	; (24800 <net_conn_register+0x1b0>)
   246d2:	440b      	add	r3, r1
   246d4:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   246d8:	f042 0202 	orr.w	r2, r2, #2
   246dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (local_addr) {
   246e0:	2e00      	cmp	r6, #0
   246e2:	d036      	beq.n	24752 <net_conn_register+0x102>
			if (local_addr->sa_family == AF_INET6) {
   246e4:	8833      	ldrh	r3, [r6, #0]
   246e6:	2b0a      	cmp	r3, #10
   246e8:	f040 8082 	bne.w	247f0 <net_conn_register+0x1a0>
				memcpy(&conns[i].local_addr, local_addr,
   246ec:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   246f0:	0098      	lsls	r0, r3, #2
   246f2:	3018      	adds	r0, #24
   246f4:	2218      	movs	r2, #24
   246f6:	4631      	mov	r1, r6
   246f8:	4b41      	ldr	r3, [pc, #260]	; (24800 <net_conn_register+0x1b0>)
   246fa:	4418      	add	r0, r3
   246fc:	f7db fde0 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24700:	6873      	ldr	r3, [r6, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24702:	b9b3      	cbnz	r3, 24732 <net_conn_register+0xe2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   24704:	68b3      	ldr	r3, [r6, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24706:	2b00      	cmp	r3, #0
   24708:	d163      	bne.n	247d2 <net_conn_register+0x182>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2470a:	68f3      	ldr	r3, [r6, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2470c:	2b00      	cmp	r3, #0
   2470e:	d162      	bne.n	247d6 <net_conn_register+0x186>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   24710:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24712:	2b00      	cmp	r3, #0
   24714:	d061      	beq.n	247da <net_conn_register+0x18a>
   24716:	2300      	movs	r3, #0
   24718:	e00c      	b.n	24734 <net_conn_register+0xe4>
   2471a:	2300      	movs	r3, #0
   2471c:	e7d2      	b.n	246c4 <net_conn_register+0x74>
   2471e:	2300      	movs	r3, #0
   24720:	e7d0      	b.n	246c4 <net_conn_register+0x74>
   24722:	2301      	movs	r3, #1
   24724:	e7ce      	b.n	246c4 <net_conn_register+0x74>
					rank |= NET_RANK_REMOTE_SPEC_ADDR;
   24726:	f04f 0a20 	mov.w	sl, #32
   2472a:	e7ce      	b.n	246ca <net_conn_register+0x7a>
	u8_t rank = 0;
   2472c:	f04f 0a00 	mov.w	sl, #0
   24730:	e7d6      	b.n	246e0 <net_conn_register+0x90>
   24732:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   24734:	2b00      	cmp	r3, #0
   24736:	d052      	beq.n	247de <net_conn_register+0x18e>
					rank |= NET_RANK_LOCAL_UNSPEC_ADDR;
   24738:	f04a 0a04 	orr.w	sl, sl, #4
			conns[i].flags |= NET_CONN_LOCAL_ADDR_SET;
   2473c:	0122      	lsls	r2, r4, #4
   2473e:	1b12      	subs	r2, r2, r4
   24740:	0091      	lsls	r1, r2, #2
   24742:	4b2f      	ldr	r3, [pc, #188]	; (24800 <net_conn_register+0x1b0>)
   24744:	440b      	add	r3, r1
   24746:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   2474a:	f042 0204 	orr.w	r2, r2, #4
   2474e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (remote_addr && local_addr) {
   24752:	b125      	cbz	r5, 2475e <net_conn_register+0x10e>
   24754:	b11e      	cbz	r6, 2475e <net_conn_register+0x10e>
			if (remote_addr->sa_family != local_addr->sa_family) {
   24756:	882a      	ldrh	r2, [r5, #0]
   24758:	8833      	ldrh	r3, [r6, #0]
   2475a:	429a      	cmp	r2, r3
   2475c:	d14b      	bne.n	247f6 <net_conn_register+0x1a6>
		if (remote_port) {
   2475e:	f1b8 0f00 	cmp.w	r8, #0
   24762:	d00c      	beq.n	2477e <net_conn_register+0x12e>
			rank |= NET_RANK_REMOTE_PORT;
   24764:	f04a 0a02 	orr.w	sl, sl, #2
			net_sin(&conns[i].remote_addr)->sin_port =
   24768:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2476c:	009a      	lsls	r2, r3, #2
   2476e:	4b24      	ldr	r3, [pc, #144]	; (24800 <net_conn_register+0x1b0>)
   24770:	4413      	add	r3, r2
				htons(remote_port);
   24772:	ea4f 2218 	mov.w	r2, r8, lsr #8
   24776:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
			net_sin(&conns[i].remote_addr)->sin_port =
   2477a:	f8a3 8002 	strh.w	r8, [r3, #2]
		if (local_port) {
   2477e:	b15f      	cbz	r7, 24798 <net_conn_register+0x148>
			rank |= NET_RANK_LOCAL_PORT;
   24780:	f04a 0a01 	orr.w	sl, sl, #1
			net_sin(&conns[i].local_addr)->sin_port =
   24784:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24788:	0093      	lsls	r3, r2, #2
   2478a:	3318      	adds	r3, #24
   2478c:	4a1c      	ldr	r2, [pc, #112]	; (24800 <net_conn_register+0x1b0>)
   2478e:	4413      	add	r3, r2
				htons(local_port);
   24790:	0a3a      	lsrs	r2, r7, #8
   24792:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
			net_sin(&conns[i].local_addr)->sin_port =
   24796:	805f      	strh	r7, [r3, #2]
		conns[i].flags |= NET_CONN_IN_USE;
   24798:	0122      	lsls	r2, r4, #4
   2479a:	1b12      	subs	r2, r2, r4
   2479c:	0091      	lsls	r1, r2, #2
   2479e:	4b18      	ldr	r3, [pc, #96]	; (24800 <net_conn_register+0x1b0>)
   247a0:	440b      	add	r3, r1
   247a2:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   247a6:	f042 0201 	orr.w	r2, r2, #1
   247aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		conns[i].cb = cb;
   247ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   247b0:	631a      	str	r2, [r3, #48]	; 0x30
		conns[i].user_data = user_data;
   247b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   247b4:	635a      	str	r2, [r3, #52]	; 0x34
		conns[i].rank = rank;
   247b6:	f883 a03a 	strb.w	sl, [r3, #58]	; 0x3a
		conns[i].proto = proto;
   247ba:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
		if (handle) {
   247be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   247c0:	b1e3      	cbz	r3, 247fc <net_conn_register+0x1ac>
			*handle = (struct net_conn_handle *)&conns[i];
   247c2:	4b0f      	ldr	r3, [pc, #60]	; (24800 <net_conn_register+0x1b0>)
   247c4:	440b      	add	r3, r1
   247c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   247c8:	6013      	str	r3, [r2, #0]
		return 0;
   247ca:	2000      	movs	r0, #0
}
   247cc:	b002      	add	sp, #8
   247ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   247d2:	2300      	movs	r3, #0
   247d4:	e7ae      	b.n	24734 <net_conn_register+0xe4>
   247d6:	2300      	movs	r3, #0
   247d8:	e7ac      	b.n	24734 <net_conn_register+0xe4>
   247da:	2301      	movs	r3, #1
   247dc:	e7aa      	b.n	24734 <net_conn_register+0xe4>
					rank |= NET_RANK_LOCAL_SPEC_ADDR;
   247de:	f04a 0a10 	orr.w	sl, sl, #16
   247e2:	e7ab      	b.n	2473c <net_conn_register+0xec>
		return -EALREADY;
   247e4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   247e8:	e7f0      	b.n	247cc <net_conn_register+0x17c>
				return -EINVAL;
   247ea:	f06f 0015 	mvn.w	r0, #21
   247ee:	e7ed      	b.n	247cc <net_conn_register+0x17c>
				return -EINVAL;
   247f0:	f06f 0015 	mvn.w	r0, #21
   247f4:	e7ea      	b.n	247cc <net_conn_register+0x17c>
				return -EINVAL;
   247f6:	f06f 0015 	mvn.w	r0, #21
   247fa:	e7e7      	b.n	247cc <net_conn_register+0x17c>
		return 0;
   247fc:	2000      	movs	r0, #0
   247fe:	e7e5      	b.n	247cc <net_conn_register+0x17c>
   24800:	200003a8 	.word	0x200003a8

00024804 <net_conn_input>:
#endif /* CONFIG_NET_IPV4 */
	}
}

enum net_verdict net_conn_input(enum net_ip_protocol proto, struct net_pkt *pkt)
{
   24804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24808:	b089      	sub	sp, #36	; 0x24
   2480a:	4605      	mov	r5, r0
   2480c:	460e      	mov	r6, r1

	/* This is only used for getting source and destination ports.
	 * Because both TCP and UDP header have these in the same
	 * location, we can check them both using the UDP struct.
	 */
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   2480e:	2811      	cmp	r0, #17
   24810:	d005      	beq.n	2481e <net_conn_input+0x1a>
		}

		src_port = udp_hdr->src_port;
		dst_port = udp_hdr->dst_port;
		chksum = udp_hdr->chksum;
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   24812:	2806      	cmp	r0, #6
   24814:	d015      	beq.n	24842 <net_conn_input+0x3e>
		src_port = tcp_hdr->src_port;
		dst_port = tcp_hdr->dst_port;
		chksum = tcp_hdr->chksum;
	} else {
		NET_DBG("No UDP or TCP configured, dropping packet.");
		return NET_DROP;
   24816:	2002      	movs	r0, #2

drop:
	net_stats_update_per_proto_drop(proto);

	return NET_DROP;
}
   24818:	b009      	add	sp, #36	; 0x24
   2481a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   2481e:	a903      	add	r1, sp, #12
   24820:	4630      	mov	r0, r6
   24822:	f7fd ff73 	bl	2270c <net_udp_get_hdr>
		if (!udp_hdr) {
   24826:	b150      	cbz	r0, 2483e <net_conn_input+0x3a>
		src_port = udp_hdr->src_port;
   24828:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = udp_hdr->dst_port;
   2482c:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = udp_hdr->chksum;
   24830:	f8b0 a006 	ldrh.w	sl, [r0, #6]
	s16_t best_rank = -1;
   24834:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	int i, best_match = -1;
   24838:	4647      	mov	r7, r8
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2483a:	2400      	movs	r4, #0
   2483c:	e01b      	b.n	24876 <net_conn_input+0x72>
			return NET_DROP;
   2483e:	2002      	movs	r0, #2
   24840:	e7ea      	b.n	24818 <net_conn_input+0x14>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   24842:	a903      	add	r1, sp, #12
   24844:	4630      	mov	r0, r6
   24846:	f7fe fbcd 	bl	22fe4 <net_tcp_get_hdr>
		if (!tcp_hdr) {
   2484a:	b130      	cbz	r0, 2485a <net_conn_input+0x56>
		src_port = tcp_hdr->src_port;
   2484c:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = tcp_hdr->dst_port;
   24850:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = tcp_hdr->chksum;
   24854:	f8b0 a010 	ldrh.w	sl, [r0, #16]
   24858:	e7ec      	b.n	24834 <net_conn_input+0x30>
			return NET_DROP;
   2485a:	2002      	movs	r0, #2
   2485c:	e7dc      	b.n	24818 <net_conn_input+0x14>
		if (net_sin(&conns[i].local_addr)->sin_port) {
   2485e:	ebc4 1004 	rsb	r0, r4, r4, lsl #4
   24862:	0082      	lsls	r2, r0, #2
   24864:	3218      	adds	r2, #24
   24866:	4866      	ldr	r0, [pc, #408]	; (24a00 <net_conn_input+0x1fc>)
   24868:	1882      	adds	r2, r0, r2
   2486a:	9201      	str	r2, [sp, #4]
   2486c:	8852      	ldrh	r2, [r2, #2]
   2486e:	b1fa      	cbz	r2, 248b0 <net_conn_input+0xac>
			if (net_sin(&conns[i].local_addr)->sin_port !=
   24870:	4593      	cmp	fp, r2
   24872:	d01d      	beq.n	248b0 <net_conn_input+0xac>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   24874:	3401      	adds	r4, #1
   24876:	2c03      	cmp	r4, #3
   24878:	dc4d      	bgt.n	24916 <net_conn_input+0x112>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   2487a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2487e:	009a      	lsls	r2, r3, #2
   24880:	4b5f      	ldr	r3, [pc, #380]	; (24a00 <net_conn_input+0x1fc>)
   24882:	4413      	add	r3, r2
   24884:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24888:	f013 0f01 	tst.w	r3, #1
   2488c:	d0f2      	beq.n	24874 <net_conn_input+0x70>
		if (conns[i].proto != proto) {
   2488e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24892:	0091      	lsls	r1, r2, #2
   24894:	4a5a      	ldr	r2, [pc, #360]	; (24a00 <net_conn_input+0x1fc>)
   24896:	440a      	add	r2, r1
   24898:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   2489c:	4295      	cmp	r5, r2
   2489e:	d1e9      	bne.n	24874 <net_conn_input+0x70>
		if (net_sin(&conns[i].remote_addr)->sin_port) {
   248a0:	4a57      	ldr	r2, [pc, #348]	; (24a00 <net_conn_input+0x1fc>)
   248a2:	4411      	add	r1, r2
   248a4:	884a      	ldrh	r2, [r1, #2]
   248a6:	2a00      	cmp	r2, #0
   248a8:	d0d9      	beq.n	2485e <net_conn_input+0x5a>
			if (net_sin(&conns[i].remote_addr)->sin_port !=
   248aa:	4591      	cmp	r9, r2
   248ac:	d1e2      	bne.n	24874 <net_conn_input+0x70>
   248ae:	e7d6      	b.n	2485e <net_conn_input+0x5a>
		if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   248b0:	f013 0f02 	tst.w	r3, #2
   248b4:	d120      	bne.n	248f8 <net_conn_input+0xf4>
		if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   248b6:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   248ba:	009a      	lsls	r2, r3, #2
   248bc:	4b50      	ldr	r3, [pc, #320]	; (24a00 <net_conn_input+0x1fc>)
   248be:	4413      	add	r3, r2
   248c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   248c4:	f013 0f04 	tst.w	r3, #4
   248c8:	d11d      	bne.n	24906 <net_conn_input+0x102>
		if (best_match >= 0 &&
   248ca:	2f00      	cmp	r7, #0
   248cc:	db07      	blt.n	248de <net_conn_input+0xda>
		    net_sin(&conns[best_match].remote_addr)->sin_port) {
   248ce:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
   248d2:	009a      	lsls	r2, r3, #2
   248d4:	4b4a      	ldr	r3, [pc, #296]	; (24a00 <net_conn_input+0x1fc>)
   248d6:	4413      	add	r3, r2
   248d8:	885b      	ldrh	r3, [r3, #2]
		if (best_match >= 0 &&
   248da:	2b00      	cmp	r3, #0
   248dc:	d1ca      	bne.n	24874 <net_conn_input+0x70>
		if (best_rank < conns[i].rank) {
   248de:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   248e2:	009a      	lsls	r2, r3, #2
   248e4:	4b46      	ldr	r3, [pc, #280]	; (24a00 <net_conn_input+0x1fc>)
   248e6:	4413      	add	r3, r2
   248e8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   248ec:	4598      	cmp	r8, r3
   248ee:	dac1      	bge.n	24874 <net_conn_input+0x70>
			best_rank = conns[i].rank;
   248f0:	fa0f f883 	sxth.w	r8, r3
			best_match = i;
   248f4:	4627      	mov	r7, r4
   248f6:	e7bd      	b.n	24874 <net_conn_input+0x70>
			if (!check_addr(pkt, &conns[i].remote_addr, true)) {
   248f8:	2201      	movs	r2, #1
   248fa:	4630      	mov	r0, r6
   248fc:	f7ff fe50 	bl	245a0 <check_addr>
   24900:	2800      	cmp	r0, #0
   24902:	d0b7      	beq.n	24874 <net_conn_input+0x70>
   24904:	e7d7      	b.n	248b6 <net_conn_input+0xb2>
			if (!check_addr(pkt, &conns[i].local_addr, false)) {
   24906:	2200      	movs	r2, #0
   24908:	9901      	ldr	r1, [sp, #4]
   2490a:	4630      	mov	r0, r6
   2490c:	f7ff fe48 	bl	245a0 <check_addr>
   24910:	2800      	cmp	r0, #0
   24912:	d0af      	beq.n	24874 <net_conn_input+0x70>
   24914:	e7d9      	b.n	248ca <net_conn_input+0xc6>
	if (best_match >= 0) {
   24916:	2f00      	cmp	r7, #0
   24918:	db44      	blt.n	249a4 <net_conn_input+0x1a0>
		if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   2491a:	2d11      	cmp	r5, #17
   2491c:	d014      	beq.n	24948 <net_conn_input+0x144>
		} else if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   2491e:	2d06      	cmp	r5, #6
   24920:	d023      	beq.n	2496a <net_conn_input+0x166>
		if (conns[best_match].cb(&conns[best_match], pkt,
   24922:	4c37      	ldr	r4, [pc, #220]	; (24a00 <net_conn_input+0x1fc>)
   24924:	013a      	lsls	r2, r7, #4
   24926:	1bd1      	subs	r1, r2, r7
   24928:	008b      	lsls	r3, r1, #2
   2492a:	4423      	add	r3, r4
   2492c:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   24930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   24932:	4631      	mov	r1, r6
   24934:	4618      	mov	r0, r3
   24936:	47c0      	blx	r8
   24938:	2802      	cmp	r0, #2
   2493a:	d03d      	beq.n	249b8 <net_conn_input+0x1b4>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   2493c:	2d11      	cmp	r5, #17
   2493e:	d023      	beq.n	24988 <net_conn_input+0x184>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   24940:	2d06      	cmp	r5, #6
   24942:	d029      	beq.n	24998 <net_conn_input+0x194>
		return NET_OK;
   24944:	2000      	movs	r0, #0
   24946:	e767      	b.n	24818 <net_conn_input+0x14>
			net_udp_set_chksum(pkt, pkt->frags);
   24948:	68b1      	ldr	r1, [r6, #8]
   2494a:	4630      	mov	r0, r6
   2494c:	f7fd fe6b 	bl	22626 <net_udp_set_chksum>
			chksum_calc = net_udp_get_chksum(pkt, pkt->frags);
   24950:	68b1      	ldr	r1, [r6, #8]
   24952:	4630      	mov	r0, r6
   24954:	f7fd feb4 	bl	226c0 <net_udp_get_chksum>
			if (chksum != chksum_calc) {
   24958:	4582      	cmp	sl, r0
   2495a:	d0e2      	beq.n	24922 <net_conn_input+0x11e>
	net_stats.udp.chkerr++;
   2495c:	4a29      	ldr	r2, [pc, #164]	; (24a04 <net_conn_input+0x200>)
   2495e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   24962:	3301      	adds	r3, #1
   24964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
   24968:	e026      	b.n	249b8 <net_conn_input+0x1b4>
			net_tcp_set_chksum(pkt, pkt->frags);
   2496a:	68b1      	ldr	r1, [r6, #8]
   2496c:	4630      	mov	r0, r6
   2496e:	f7fe fc9e 	bl	232ae <net_tcp_set_chksum>
			chksum_calc = net_tcp_get_chksum(pkt, pkt->frags);
   24972:	68b1      	ldr	r1, [r6, #8]
   24974:	4630      	mov	r0, r6
   24976:	f7fe fc74 	bl	23262 <net_tcp_get_chksum>
			if (chksum != chksum_calc) {
   2497a:	4582      	cmp	sl, r0
   2497c:	d0d1      	beq.n	24922 <net_conn_input+0x11e>
	net_stats.tcp.chkerr++;
   2497e:	4a21      	ldr	r2, [pc, #132]	; (24a04 <net_conn_input+0x200>)
   24980:	6e13      	ldr	r3, [r2, #96]	; 0x60
   24982:	3301      	adds	r3, #1
   24984:	6613      	str	r3, [r2, #96]	; 0x60
   24986:	e017      	b.n	249b8 <net_conn_input+0x1b4>
	net_stats.udp.recv++;
   24988:	4a1e      	ldr	r2, [pc, #120]	; (24a04 <net_conn_input+0x200>)
   2498a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   2498e:	3301      	adds	r3, #1
   24990:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		return NET_OK;
   24994:	2000      	movs	r0, #0
   24996:	e73f      	b.n	24818 <net_conn_input+0x14>
	net_stats.tcp.recv++;
   24998:	4a1a      	ldr	r2, [pc, #104]	; (24a04 <net_conn_input+0x200>)
   2499a:	6d53      	ldr	r3, [r2, #84]	; 0x54
   2499c:	3301      	adds	r3, #1
   2499e:	6553      	str	r3, [r2, #84]	; 0x54
   249a0:	2000      	movs	r0, #0
   249a2:	e739      	b.n	24818 <net_conn_input+0x14>
	return pkt->family;
   249a4:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   249a8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6 &&
   249ac:	2b0a      	cmp	r3, #10
   249ae:	d009      	beq.n	249c4 <net_conn_input+0x1c0>
	if (net_pkt_family(pkt) == AF_INET6) {
   249b0:	2b0a      	cmp	r3, #10
   249b2:	d00d      	beq.n	249d0 <net_conn_input+0x1cc>
		if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   249b4:	2d06      	cmp	r5, #6
   249b6:	d012      	beq.n	249de <net_conn_input+0x1da>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   249b8:	2d11      	cmp	r5, #17
   249ba:	d015      	beq.n	249e8 <net_conn_input+0x1e4>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   249bc:	2d06      	cmp	r5, #6
   249be:	d019      	beq.n	249f4 <net_conn_input+0x1f0>
	return NET_DROP;
   249c0:	2002      	movs	r0, #2
   249c2:	e729      	b.n	24818 <net_conn_input+0x14>
	return pkt->frags->data;
   249c4:	68b2      	ldr	r2, [r6, #8]
   249c6:	6892      	ldr	r2, [r2, #8]
	return addr->s6_addr[0] == 0xFF;
   249c8:	7e12      	ldrb	r2, [r2, #24]
	if (net_pkt_family(pkt) == AF_INET6 &&
   249ca:	2aff      	cmp	r2, #255	; 0xff
   249cc:	d1f0      	bne.n	249b0 <net_conn_input+0x1ac>
   249ce:	e7f3      	b.n	249b8 <net_conn_input+0x1b4>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   249d0:	2300      	movs	r3, #0
   249d2:	2204      	movs	r2, #4
   249d4:	2101      	movs	r1, #1
   249d6:	4630      	mov	r0, r6
   249d8:	f7f9 fc94 	bl	1e304 <net_icmpv6_send_error>
   249dc:	e7ea      	b.n	249b4 <net_conn_input+0x1b0>
	net_stats.tcp.connrst++;
   249de:	4a09      	ldr	r2, [pc, #36]	; (24a04 <net_conn_input+0x200>)
   249e0:	6f93      	ldr	r3, [r2, #120]	; 0x78
   249e2:	3301      	adds	r3, #1
   249e4:	6793      	str	r3, [r2, #120]	; 0x78
   249e6:	e7e7      	b.n	249b8 <net_conn_input+0x1b4>
	net_stats.udp.drop++;
   249e8:	4a06      	ldr	r2, [pc, #24]	; (24a04 <net_conn_input+0x200>)
   249ea:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   249ec:	3301      	adds	r3, #1
   249ee:	67d3      	str	r3, [r2, #124]	; 0x7c
	return NET_DROP;
   249f0:	2002      	movs	r0, #2
   249f2:	e711      	b.n	24818 <net_conn_input+0x14>
	net_stats.tcp.drop++;
   249f4:	4a03      	ldr	r2, [pc, #12]	; (24a04 <net_conn_input+0x200>)
   249f6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   249f8:	3301      	adds	r3, #1
   249fa:	65d3      	str	r3, [r2, #92]	; 0x5c
   249fc:	2002      	movs	r0, #2
   249fe:	e70b      	b.n	24818 <net_conn_input+0x14>
   24a00:	200003a8 	.word	0x200003a8
   24a04:	20002950 	.word	0x20002950

00024a08 <net_conn_init>:
		cb(&conns[i], user_data);
	}
}

void net_conn_init(void)
{
   24a08:	4770      	bx	lr

00024a0a <compute_rlen_size>:
 * @retval -EINVAL
 */
static
int compute_rlen_size(u16_t *size, u32_t len)
{
	if (len <= 127) {
   24a0a:	297f      	cmp	r1, #127	; 0x7f
   24a0c:	d912      	bls.n	24a34 <compute_rlen_size+0x2a>
		*size = 1;
	} else if (len >= 128 && len <= 16383) {
   24a0e:	f1a1 0380 	sub.w	r3, r1, #128	; 0x80
   24a12:	f5b3 5f7e 	cmp.w	r3, #16256	; 0x3f80
   24a16:	d311      	bcc.n	24a3c <compute_rlen_size+0x32>
		*size = 2;
	} else if (len >= 16384 && len <= 2097151) {
   24a18:	f5a1 4380 	sub.w	r3, r1, #16384	; 0x4000
   24a1c:	f5b3 1ffe 	cmp.w	r3, #2080768	; 0x1fc000
   24a20:	d310      	bcc.n	24a44 <compute_rlen_size+0x3a>
		*size = 3;
	} else if (len >= 2097152 && len <= 268435455) {
   24a22:	f5a1 1100 	sub.w	r1, r1, #2097152	; 0x200000
   24a26:	f1b1 6f7e 	cmp.w	r1, #266338304	; 0xfe00000
   24a2a:	d20f      	bcs.n	24a4c <compute_rlen_size+0x42>
		*size = 4;
   24a2c:	2304      	movs	r3, #4
   24a2e:	8003      	strh	r3, [r0, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   24a30:	2000      	movs	r0, #0
   24a32:	4770      	bx	lr
		*size = 1;
   24a34:	2301      	movs	r3, #1
   24a36:	8003      	strh	r3, [r0, #0]
	return 0;
   24a38:	2000      	movs	r0, #0
   24a3a:	4770      	bx	lr
		*size = 2;
   24a3c:	2302      	movs	r3, #2
   24a3e:	8003      	strh	r3, [r0, #0]
	return 0;
   24a40:	2000      	movs	r0, #0
   24a42:	4770      	bx	lr
		*size = 3;
   24a44:	2303      	movs	r3, #3
   24a46:	8003      	strh	r3, [r0, #0]
	return 0;
   24a48:	2000      	movs	r0, #0
   24a4a:	4770      	bx	lr
		return -EINVAL;
   24a4c:	f06f 0015 	mvn.w	r0, #21
}
   24a50:	4770      	bx	lr

00024a52 <rlen_encode>:
 * @param [in] len Value to encode
 *
 * @retval 0 always
 */
static int rlen_encode(u8_t *buf, u32_t len)
{
   24a52:	b410      	push	{r4}
	u8_t encoded;
	u8_t i;

	i = 0;
   24a54:	2200      	movs	r2, #0
   24a56:	e004      	b.n	24a62 <rlen_encode+0x10>
		 * set the top bit of this byte
		 */
		if (len > 0) {
			encoded = encoded | 128;
		}
		buf[i++] = encoded;
   24a58:	1c53      	adds	r3, r2, #1
   24a5a:	b2db      	uxtb	r3, r3
   24a5c:	5484      	strb	r4, [r0, r2]
	} while (len > 0);
   24a5e:	b139      	cbz	r1, 24a70 <rlen_encode+0x1e>
		buf[i++] = encoded;
   24a60:	461a      	mov	r2, r3
		encoded = len % 128;
   24a62:	f001 047f 	and.w	r4, r1, #127	; 0x7f
		if (len > 0) {
   24a66:	09c9      	lsrs	r1, r1, #7
   24a68:	d0f6      	beq.n	24a58 <rlen_encode+0x6>
			encoded = encoded | 128;
   24a6a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   24a6e:	e7f3      	b.n	24a58 <rlen_encode+0x6>

	return 0;
}
   24a70:	2000      	movs	r0, #0
   24a72:	bc10      	pop	{r4}
   24a74:	4770      	bx	lr

00024a76 <rlen_decode>:
 * @retval 0 on success
 * @retval -ENOMEM if size < 4
 */
static int rlen_decode(u32_t *rlen, u16_t *rlen_size,
		       u8_t *buf, u16_t size)
{
   24a76:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t value = 0;
	u32_t mult = 1;
	u16_t i = 0;
   24a78:	2400      	movs	r4, #0
	u32_t mult = 1;
   24a7a:	2601      	movs	r6, #1
	u32_t value = 0;
   24a7c:	4627      	mov	r7, r4
   24a7e:	e000      	b.n	24a82 <rlen_decode+0xc>
	do {
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
			return -ENOMEM;
		}

		encoded = buf[i++];
   24a80:	462c      	mov	r4, r5
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
   24a82:	2c03      	cmp	r4, #3
   24a84:	d810      	bhi.n	24aa8 <rlen_decode+0x32>
   24a86:	429c      	cmp	r4, r3
   24a88:	d211      	bcs.n	24aae <rlen_decode+0x38>
		encoded = buf[i++];
   24a8a:	1c65      	adds	r5, r4, #1
   24a8c:	b2ad      	uxth	r5, r5
   24a8e:	5d14      	ldrb	r4, [r2, r4]
		value += (encoded & 127) * mult;
   24a90:	f004 0e7f 	and.w	lr, r4, #127	; 0x7f
   24a94:	fb0e 7706 	mla	r7, lr, r6, r7
		mult *= 128;
   24a98:	01f6      	lsls	r6, r6, #7
	} while ((encoded & 128) != 0);
   24a9a:	f014 0f80 	tst.w	r4, #128	; 0x80
   24a9e:	d1ef      	bne.n	24a80 <rlen_decode+0xa>

	*rlen = value;
   24aa0:	6007      	str	r7, [r0, #0]
	*rlen_size = i;
   24aa2:	800d      	strh	r5, [r1, #0]

	return 0;
   24aa4:	2000      	movs	r0, #0
   24aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -ENOMEM;
   24aa8:	f06f 000b 	mvn.w	r0, #11
   24aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24aae:	f06f 000b 	mvn.w	r0, #11
}
   24ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024ab4 <pack_pkt_id>:
 * @retval -ENOMEM if size < 4
 */
static
int pack_pkt_id(u8_t *buf, u16_t *length, u16_t size,
		enum mqtt_packet type, u8_t reserved, u16_t pkt_id)
{
   24ab4:	b410      	push	{r4}
   24ab6:	f8bd 4008 	ldrh.w	r4, [sp, #8]
	if (size < MSG_PKTID_ONLY_SIZE) {
   24aba:	2a03      	cmp	r2, #3
   24abc:	d912      	bls.n	24ae4 <pack_pkt_id+0x30>
		return -ENOMEM;
	}

	buf[0] = (type << 4) + (reserved & 0x0F);
   24abe:	011b      	lsls	r3, r3, #4
   24ac0:	b2db      	uxtb	r3, r3
   24ac2:	f89d 2004 	ldrb.w	r2, [sp, #4]
   24ac6:	f002 020f 	and.w	r2, r2, #15
   24aca:	4413      	add	r3, r2
   24acc:	7003      	strb	r3, [r0, #0]
	buf[1] = PACKET_ID_SIZE;
   24ace:	2302      	movs	r3, #2
   24ad0:	7043      	strb	r3, [r0, #1]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + PACKET_ID_SIZE));
   24ad2:	0a23      	lsrs	r3, r4, #8
   24ad4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   24ad8:	8043      	strh	r3, [r0, #2]
	*length = MSG_PKTID_ONLY_SIZE;
   24ada:	2304      	movs	r3, #4
   24adc:	800b      	strh	r3, [r1, #0]

	return 0;
   24ade:	2000      	movs	r0, #0
}
   24ae0:	bc10      	pop	{r4}
   24ae2:	4770      	bx	lr
		return -ENOMEM;
   24ae4:	f06f 000b 	mvn.w	r0, #11
   24ae8:	e7fa      	b.n	24ae0 <pack_pkt_id+0x2c>

00024aea <pack_zerolen>:
 */
static
int pack_zerolen(u8_t *buf, u16_t *length, u16_t size,
		 enum mqtt_packet pkt_type, u8_t reserved)
{
	if (size < MSG_ZEROLEN_SIZE) {
   24aea:	2a01      	cmp	r2, #1
   24aec:	d90d      	bls.n	24b0a <pack_zerolen+0x20>
		return -ENOMEM;
	}

	buf[0] = (pkt_type << 4) + (reserved & 0x0F);
   24aee:	011b      	lsls	r3, r3, #4
   24af0:	b2db      	uxtb	r3, r3
   24af2:	f89d 2000 	ldrb.w	r2, [sp]
   24af6:	f002 020f 	and.w	r2, r2, #15
   24afa:	4413      	add	r3, r2
   24afc:	7003      	strb	r3, [r0, #0]
	buf[1] = 0x00;
   24afe:	2300      	movs	r3, #0
   24b00:	7043      	strb	r3, [r0, #1]
	*length = MSG_ZEROLEN_SIZE;
   24b02:	2202      	movs	r2, #2
   24b04:	800a      	strh	r2, [r1, #0]

	return 0;
   24b06:	4618      	mov	r0, r3
   24b08:	4770      	bx	lr
		return -ENOMEM;
   24b0a:	f06f 000b 	mvn.w	r0, #11
}
   24b0e:	4770      	bx	lr

00024b10 <unpack_pktid>:
 */
static
int unpack_pktid(u8_t *buf, u16_t length, enum mqtt_packet *type,
		 u8_t *reserved, u16_t *pkt_id)
{
	if (length < MSG_PKTID_ONLY_SIZE) {
   24b10:	2903      	cmp	r1, #3
   24b12:	d911      	bls.n	24b38 <unpack_pktid+0x28>
		return -EINVAL;
	}

	if (buf[1] != PACKET_ID_SIZE) {
   24b14:	7841      	ldrb	r1, [r0, #1]
   24b16:	2902      	cmp	r1, #2
   24b18:	d111      	bne.n	24b3e <unpack_pktid+0x2e>
		return -EINVAL;
	}

	*type = buf[0] >> 4;
   24b1a:	7801      	ldrb	r1, [r0, #0]
   24b1c:	0909      	lsrs	r1, r1, #4
   24b1e:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   24b20:	7802      	ldrb	r2, [r0, #0]
   24b22:	f002 020f 	and.w	r2, r2, #15
   24b26:	701a      	strb	r2, [r3, #0]
	*pkt_id = ntohs(*(u16_t *)(buf + 2));
   24b28:	8842      	ldrh	r2, [r0, #2]
   24b2a:	0a13      	lsrs	r3, r2, #8
   24b2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24b30:	9a00      	ldr	r2, [sp, #0]
   24b32:	8013      	strh	r3, [r2, #0]

	return 0;
   24b34:	2000      	movs	r0, #0
   24b36:	4770      	bx	lr
		return -EINVAL;
   24b38:	f06f 0015 	mvn.w	r0, #21
   24b3c:	4770      	bx	lr
		return -EINVAL;
   24b3e:	f06f 0015 	mvn.w	r0, #21
}
   24b42:	4770      	bx	lr

00024b44 <unpack_pktid_validate>:
 * @retval -EINVAL
 */
static
int unpack_pktid_validate(u8_t *buf, u16_t length, u16_t *pkt_id,
			  u8_t expected_type, u8_t expected_reserv)
{
   24b44:	b510      	push	{r4, lr}
   24b46:	b084      	sub	sp, #16
   24b48:	461c      	mov	r4, r3
	enum mqtt_packet type;
	u8_t reserved;
	int rc;

	rc = unpack_pktid(buf, length, &type, &reserved, pkt_id);
   24b4a:	9200      	str	r2, [sp, #0]
   24b4c:	f10d 030e 	add.w	r3, sp, #14
   24b50:	f10d 020f 	add.w	r2, sp, #15
   24b54:	f7ff ffdc 	bl	24b10 <unpack_pktid>
	if (rc != 0) {
   24b58:	4603      	mov	r3, r0
   24b5a:	b948      	cbnz	r0, 24b70 <unpack_pktid_validate+0x2c>
		return rc;
	}

	if (type != expected_type || reserved != expected_reserv) {
   24b5c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   24b60:	42a2      	cmp	r2, r4
   24b62:	d10b      	bne.n	24b7c <unpack_pktid_validate+0x38>
   24b64:	f89d 100e 	ldrb.w	r1, [sp, #14]
   24b68:	f89d 2018 	ldrb.w	r2, [sp, #24]
   24b6c:	4291      	cmp	r1, r2
   24b6e:	d102      	bne.n	24b76 <unpack_pktid_validate+0x32>
		return -EINVAL;
	}

	return 0;
}
   24b70:	4618      	mov	r0, r3
   24b72:	b004      	add	sp, #16
   24b74:	bd10      	pop	{r4, pc}
		return -EINVAL;
   24b76:	f06f 0315 	mvn.w	r3, #21
   24b7a:	e7f9      	b.n	24b70 <unpack_pktid_validate+0x2c>
   24b7c:	f06f 0315 	mvn.w	r3, #21
   24b80:	e7f6      	b.n	24b70 <unpack_pktid_validate+0x2c>

00024b82 <unpack_zerolen>:
 */
static
int unpack_zerolen(u8_t *buf, u16_t length, enum mqtt_packet *pkt_type,
		   u8_t *reserved)
{
	if (length < MSG_ZEROLEN_SIZE) {
   24b82:	2901      	cmp	r1, #1
   24b84:	d90d      	bls.n	24ba2 <unpack_zerolen+0x20>
		return -EINVAL;
	}

	*pkt_type = buf[0] >> 4;
   24b86:	7801      	ldrb	r1, [r0, #0]
   24b88:	0909      	lsrs	r1, r1, #4
   24b8a:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   24b8c:	7802      	ldrb	r2, [r0, #0]
   24b8e:	f002 020f 	and.w	r2, r2, #15
   24b92:	701a      	strb	r2, [r3, #0]

	if (buf[1] != 0) {
   24b94:	7843      	ldrb	r3, [r0, #1]
   24b96:	b90b      	cbnz	r3, 24b9c <unpack_zerolen+0x1a>
		return -EINVAL;
	}

	return 0;
   24b98:	2000      	movs	r0, #0
}
   24b9a:	4770      	bx	lr
		return -EINVAL;
   24b9c:	f06f 0015 	mvn.w	r0, #21
   24ba0:	4770      	bx	lr
		return -EINVAL;
   24ba2:	f06f 0015 	mvn.w	r0, #21
   24ba6:	4770      	bx	lr

00024ba8 <unpack_zerolen_validate>:
 */
static
int unpack_zerolen_validate(u8_t *buf, u16_t length,
			    enum mqtt_packet expected_type,
			    u8_t expected_reserved)
{
   24ba8:	b530      	push	{r4, r5, lr}
   24baa:	b083      	sub	sp, #12
   24bac:	4614      	mov	r4, r2
   24bae:	461d      	mov	r5, r3
	enum mqtt_packet pkt_type;
	u8_t reserved;
	int rc;

	rc = unpack_zerolen(buf, length, &pkt_type, &reserved);
   24bb0:	f10d 0306 	add.w	r3, sp, #6
   24bb4:	f10d 0207 	add.w	r2, sp, #7
   24bb8:	f7ff ffe3 	bl	24b82 <unpack_zerolen>
	if (rc != 0) {
   24bbc:	4603      	mov	r3, r0
   24bbe:	b938      	cbnz	r0, 24bd0 <unpack_zerolen_validate+0x28>
		return rc;
	}

	if (pkt_type != expected_type || reserved != expected_reserved) {
   24bc0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   24bc4:	42a2      	cmp	r2, r4
   24bc6:	d109      	bne.n	24bdc <unpack_zerolen_validate+0x34>
   24bc8:	f89d 2006 	ldrb.w	r2, [sp, #6]
   24bcc:	42aa      	cmp	r2, r5
   24bce:	d102      	bne.n	24bd6 <unpack_zerolen_validate+0x2e>
		return -EINVAL;
	}

	return 0;
}
   24bd0:	4618      	mov	r0, r3
   24bd2:	b003      	add	sp, #12
   24bd4:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   24bd6:	f06f 0315 	mvn.w	r3, #21
   24bda:	e7f9      	b.n	24bd0 <unpack_zerolen_validate+0x28>
   24bdc:	f06f 0315 	mvn.w	r3, #21
   24be0:	e7f6      	b.n	24bd0 <unpack_zerolen_validate+0x28>

00024be2 <mqtt_pack_puback>:
{
   24be2:	b500      	push	{lr}
   24be4:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBACK, 0, pkt_id);
   24be6:	9301      	str	r3, [sp, #4]
   24be8:	2300      	movs	r3, #0
   24bea:	9300      	str	r3, [sp, #0]
   24bec:	2304      	movs	r3, #4
   24bee:	f7ff ff61 	bl	24ab4 <pack_pkt_id>
}
   24bf2:	b003      	add	sp, #12
   24bf4:	f85d fb04 	ldr.w	pc, [sp], #4

00024bf8 <mqtt_pack_pubrec>:
{
   24bf8:	b500      	push	{lr}
   24bfa:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREC, 0, pkt_id);
   24bfc:	9301      	str	r3, [sp, #4]
   24bfe:	2300      	movs	r3, #0
   24c00:	9300      	str	r3, [sp, #0]
   24c02:	2305      	movs	r3, #5
   24c04:	f7ff ff56 	bl	24ab4 <pack_pkt_id>
}
   24c08:	b003      	add	sp, #12
   24c0a:	f85d fb04 	ldr.w	pc, [sp], #4

00024c0e <mqtt_pack_pubrel>:
{
   24c0e:	b500      	push	{lr}
   24c10:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREL, PUBREL_RESERVED,
   24c12:	9301      	str	r3, [sp, #4]
   24c14:	2302      	movs	r3, #2
   24c16:	9300      	str	r3, [sp, #0]
   24c18:	2306      	movs	r3, #6
   24c1a:	f7ff ff4b 	bl	24ab4 <pack_pkt_id>
}
   24c1e:	b003      	add	sp, #12
   24c20:	f85d fb04 	ldr.w	pc, [sp], #4

00024c24 <mqtt_pack_pubcomp>:
{
   24c24:	b500      	push	{lr}
   24c26:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBCOMP, 0, pkt_id);
   24c28:	9301      	str	r3, [sp, #4]
   24c2a:	2300      	movs	r3, #0
   24c2c:	9300      	str	r3, [sp, #0]
   24c2e:	2307      	movs	r3, #7
   24c30:	f7ff ff40 	bl	24ab4 <pack_pkt_id>
}
   24c34:	b003      	add	sp, #12
   24c36:	f85d fb04 	ldr.w	pc, [sp], #4

00024c3a <mqtt_pack_connect>:
{
   24c3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24c3e:	b082      	sub	sp, #8
   24c40:	4605      	mov	r5, r0
   24c42:	460e      	mov	r6, r1
   24c44:	4617      	mov	r7, r2
   24c46:	461c      	mov	r4, r3
	pkt_size += msg->client_id_len;
   24c48:	891b      	ldrh	r3, [r3, #8]
   24c4a:	1c99      	adds	r1, r3, #2
   24c4c:	b289      	uxth	r1, r1
	if (msg->will_flag) {
   24c4e:	7aa2      	ldrb	r2, [r4, #10]
   24c50:	f012 0f01 	tst.w	r2, #1
   24c54:	d009      	beq.n	24c6a <mqtt_pack_connect+0x30>
		pkt_size += INT_SIZE;
   24c56:	1d19      	adds	r1, r3, #4
		pkt_size += msg->will_topic_len;
   24c58:	8aa3      	ldrh	r3, [r4, #20]
   24c5a:	fa13 f181 	uxtah	r1, r3, r1
   24c5e:	b289      	uxth	r1, r1
		pkt_size += INT_SIZE;
   24c60:	3102      	adds	r1, #2
		pkt_size += msg->will_msg_len;
   24c62:	8ba3      	ldrh	r3, [r4, #28]
   24c64:	fa13 f181 	uxtah	r1, r3, r1
   24c68:	b289      	uxth	r1, r1
	if (msg->user_name) {
   24c6a:	6a23      	ldr	r3, [r4, #32]
   24c6c:	b123      	cbz	r3, 24c78 <mqtt_pack_connect+0x3e>
		pkt_size += INT_SIZE;
   24c6e:	3102      	adds	r1, #2
		pkt_size += msg->user_name_len;
   24c70:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   24c72:	fa13 f181 	uxtah	r1, r3, r1
   24c76:	b289      	uxth	r1, r1
	if (msg->password) {
   24c78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24c7a:	b123      	cbz	r3, 24c86 <mqtt_pack_connect+0x4c>
		pkt_size += INT_SIZE;
   24c7c:	3102      	adds	r1, #2
		pkt_size += msg->password_len;
   24c7e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   24c80:	fa13 f181 	uxtah	r1, r3, r1
   24c84:	b289      	uxth	r1, r1
	pkt_size += CONNECT_VARIABLE_HDR_SIZE;
   24c86:	310a      	adds	r1, #10
   24c88:	fa1f fa81 	uxth.w	sl, r1
	rc = compute_rlen_size(&rlen_size, pkt_size);
   24c8c:	4651      	mov	r1, sl
   24c8e:	f10d 0006 	add.w	r0, sp, #6
   24c92:	f7ff feba 	bl	24a0a <compute_rlen_size>
	if (rc != 0) {
   24c96:	4681      	mov	r9, r0
   24c98:	2800      	cmp	r0, #0
   24c9a:	f040 80b6 	bne.w	24e0a <mqtt_pack_connect+0x1d0>
	total_buf_size = PACKET_TYPE_SIZE + rlen_size + pkt_size;
   24c9e:	f8bd 8006 	ldrh.w	r8, [sp, #6]
   24ca2:	44d0      	add	r8, sl
   24ca4:	fa1f f888 	uxth.w	r8, r8
   24ca8:	f108 0801 	add.w	r8, r8, #1
   24cac:	fa1f f888 	uxth.w	r8, r8
	if (total_buf_size > size) {
   24cb0:	45b8      	cmp	r8, r7
   24cb2:	f200 80ad 	bhi.w	24e10 <mqtt_pack_connect+0x1d6>
	buf[0] = MQTT_CONNECT << 4;
   24cb6:	4628      	mov	r0, r5
   24cb8:	2310      	movs	r3, #16
   24cba:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, pkt_size);
   24cbe:	4651      	mov	r1, sl
   24cc0:	f7ff fec7 	bl	24a52 <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   24cc4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   24cc8:	1c43      	adds	r3, r0, #1
   24cca:	b29b      	uxth	r3, r3
	buf[offset + 0] = 0x00;
   24ccc:	2200      	movs	r2, #0
   24cce:	54ea      	strb	r2, [r5, r3]
	buf[offset + 1] = 0x04;
   24cd0:	1c59      	adds	r1, r3, #1
   24cd2:	2204      	movs	r2, #4
   24cd4:	546a      	strb	r2, [r5, r1]
	buf[offset + 2] = 'M';
   24cd6:	1c99      	adds	r1, r3, #2
   24cd8:	274d      	movs	r7, #77	; 0x4d
   24cda:	546f      	strb	r7, [r5, r1]
	buf[offset + 3] = 'Q';
   24cdc:	1cd9      	adds	r1, r3, #3
   24cde:	2751      	movs	r7, #81	; 0x51
   24ce0:	546f      	strb	r7, [r5, r1]
	buf[offset + 4] = 'T';
   24ce2:	189f      	adds	r7, r3, r2
   24ce4:	2154      	movs	r1, #84	; 0x54
   24ce6:	55e9      	strb	r1, [r5, r7]
	buf[offset + 5] = 'T';
   24ce8:	1d5f      	adds	r7, r3, #5
   24cea:	55e9      	strb	r1, [r5, r7]
	buf[offset + 6] = 0x04;
   24cec:	1d99      	adds	r1, r3, #6
   24cee:	546a      	strb	r2, [r5, r1]
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   24cf0:	1ddf      	adds	r7, r3, #7
   24cf2:	6a22      	ldr	r2, [r4, #32]
   24cf4:	2a00      	cmp	r2, #0
   24cf6:	d05f      	beq.n	24db8 <mqtt_pack_connect+0x17e>
   24cf8:	f06f 017f 	mvn.w	r1, #127	; 0x7f
			  (msg->password_len ? 1 << 6 : 0) |
   24cfc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   24cfe:	2a00      	cmp	r2, #0
   24d00:	d05c      	beq.n	24dbc <mqtt_pack_connect+0x182>
   24d02:	2240      	movs	r2, #64	; 0x40
   24d04:	4311      	orrs	r1, r2
			  (msg->will_retain ? 1 << 5 : 0) |
   24d06:	7b22      	ldrb	r2, [r4, #12]
			  (msg->password_len ? 1 << 6 : 0) |
   24d08:	f012 0f01 	tst.w	r2, #1
   24d0c:	d058      	beq.n	24dc0 <mqtt_pack_connect+0x186>
   24d0e:	2220      	movs	r2, #32
   24d10:	4311      	orrs	r1, r2
			  ((msg->will_qos & 0x03) << 3) |
   24d12:	7ae2      	ldrb	r2, [r4, #11]
   24d14:	00d2      	lsls	r2, r2, #3
   24d16:	f002 0218 	and.w	r2, r2, #24
			  (msg->will_retain ? 1 << 5 : 0) |
   24d1a:	430a      	orrs	r2, r1
			  (msg->will_flag ? 1 << 2 : 0) |
   24d1c:	7aa1      	ldrb	r1, [r4, #10]
			  ((msg->will_qos & 0x03) << 3) |
   24d1e:	f011 0f01 	tst.w	r1, #1
   24d22:	d04f      	beq.n	24dc4 <mqtt_pack_connect+0x18a>
   24d24:	2104      	movs	r1, #4
   24d26:	4311      	orrs	r1, r2
			  (msg->clean_session ? 1 << 1 : 0);
   24d28:	7822      	ldrb	r2, [r4, #0]
			  (msg->will_flag ? 1 << 2 : 0) |
   24d2a:	f012 0f01 	tst.w	r2, #1
   24d2e:	d04b      	beq.n	24dc8 <mqtt_pack_connect+0x18e>
   24d30:	2202      	movs	r2, #2
   24d32:	430a      	orrs	r2, r1
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   24d34:	55ea      	strb	r2, [r5, r7]
	UNALIGNED_PUT(htons(msg->keep_alive), (u16_t *)(buf + offset + 8));
   24d36:	3308      	adds	r3, #8
   24d38:	8be1      	ldrh	r1, [r4, #30]
   24d3a:	0a0a      	lsrs	r2, r1, #8
   24d3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   24d40:	52ea      	strh	r2, [r5, r3]
	offset += 8 + INT_SIZE;
   24d42:	f100 030b 	add.w	r3, r0, #11
   24d46:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->client_id_len),
   24d48:	8921      	ldrh	r1, [r4, #8]
   24d4a:	0a0a      	lsrs	r2, r1, #8
   24d4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   24d50:	52ea      	strh	r2, [r5, r3]
	offset += INT_SIZE;
   24d52:	300d      	adds	r0, #13
   24d54:	b287      	uxth	r7, r0
	memcpy(buf + offset, msg->client_id, msg->client_id_len);
   24d56:	8922      	ldrh	r2, [r4, #8]
   24d58:	6861      	ldr	r1, [r4, #4]
   24d5a:	19e8      	adds	r0, r5, r7
   24d5c:	f7db fab0 	bl	2c0 <memcpy>
	offset += msg->client_id_len;
   24d60:	8920      	ldrh	r0, [r4, #8]
   24d62:	4438      	add	r0, r7
   24d64:	b280      	uxth	r0, r0
	if (msg->will_flag) {
   24d66:	7aa3      	ldrb	r3, [r4, #10]
   24d68:	f013 0f01 	tst.w	r3, #1
   24d6c:	d12e      	bne.n	24dcc <mqtt_pack_connect+0x192>
	if (msg->user_name) {
   24d6e:	6a23      	ldr	r3, [r4, #32]
   24d70:	b173      	cbz	r3, 24d90 <mqtt_pack_connect+0x156>
		UNALIGNED_PUT(htons(msg->user_name_len),
   24d72:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   24d74:	0a13      	lsrs	r3, r2, #8
   24d76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24d7a:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   24d7c:	3002      	adds	r0, #2
   24d7e:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->user_name, msg->user_name_len);
   24d80:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   24d82:	6a21      	ldr	r1, [r4, #32]
   24d84:	19e8      	adds	r0, r5, r7
   24d86:	f7db fa9b 	bl	2c0 <memcpy>
		offset += msg->user_name_len;
   24d8a:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
   24d8c:	4438      	add	r0, r7
   24d8e:	b280      	uxth	r0, r0
	if (msg->password) {
   24d90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24d92:	b15b      	cbz	r3, 24dac <mqtt_pack_connect+0x172>
		UNALIGNED_PUT(htons(msg->password_len),
   24d94:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   24d96:	0a13      	lsrs	r3, r2, #8
   24d98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24d9c:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   24d9e:	3002      	adds	r0, #2
		memcpy(buf + offset, msg->password, msg->password_len);
   24da0:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   24da2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   24da4:	fa15 f080 	uxtah	r0, r5, r0
   24da8:	f7db fa8a 	bl	2c0 <memcpy>
	*length = total_buf_size;
   24dac:	f8a6 8000 	strh.w	r8, [r6]
}
   24db0:	4648      	mov	r0, r9
   24db2:	b002      	add	sp, #8
   24db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   24db8:	2100      	movs	r1, #0
   24dba:	e79f      	b.n	24cfc <mqtt_pack_connect+0xc2>
   24dbc:	2200      	movs	r2, #0
   24dbe:	e7a1      	b.n	24d04 <mqtt_pack_connect+0xca>
			  (msg->password_len ? 1 << 6 : 0) |
   24dc0:	2200      	movs	r2, #0
   24dc2:	e7a5      	b.n	24d10 <mqtt_pack_connect+0xd6>
			  ((msg->will_qos & 0x03) << 3) |
   24dc4:	2100      	movs	r1, #0
   24dc6:	e7ae      	b.n	24d26 <mqtt_pack_connect+0xec>
			  (msg->will_flag ? 1 << 2 : 0) |
   24dc8:	2200      	movs	r2, #0
   24dca:	e7b2      	b.n	24d32 <mqtt_pack_connect+0xf8>
		UNALIGNED_PUT(htons(msg->will_topic_len),
   24dcc:	8aa2      	ldrh	r2, [r4, #20]
   24dce:	0a13      	lsrs	r3, r2, #8
   24dd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24dd4:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   24dd6:	3002      	adds	r0, #2
   24dd8:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->will_topic,
   24dda:	8aa2      	ldrh	r2, [r4, #20]
   24ddc:	6921      	ldr	r1, [r4, #16]
   24dde:	19e8      	adds	r0, r5, r7
   24de0:	f7db fa6e 	bl	2c0 <memcpy>
		offset += msg->will_topic_len;
   24de4:	8aa0      	ldrh	r0, [r4, #20]
   24de6:	4407      	add	r7, r0
   24de8:	b2bf      	uxth	r7, r7
		UNALIGNED_PUT(htons(msg->will_msg_len),
   24dea:	8ba2      	ldrh	r2, [r4, #28]
   24dec:	0a13      	lsrs	r3, r2, #8
   24dee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24df2:	53eb      	strh	r3, [r5, r7]
		offset += INT_SIZE;
   24df4:	3702      	adds	r7, #2
   24df6:	b2bf      	uxth	r7, r7
		memcpy(buf + offset, msg->will_msg, msg->will_msg_len);
   24df8:	8ba2      	ldrh	r2, [r4, #28]
   24dfa:	69a1      	ldr	r1, [r4, #24]
   24dfc:	19e8      	adds	r0, r5, r7
   24dfe:	f7db fa5f 	bl	2c0 <memcpy>
		offset += msg->will_msg_len;
   24e02:	8ba0      	ldrh	r0, [r4, #28]
   24e04:	4438      	add	r0, r7
   24e06:	b280      	uxth	r0, r0
   24e08:	e7b1      	b.n	24d6e <mqtt_pack_connect+0x134>
		return -EINVAL;
   24e0a:	f06f 0915 	mvn.w	r9, #21
   24e0e:	e7cf      	b.n	24db0 <mqtt_pack_connect+0x176>
		return -ENOMEM;
   24e10:	f06f 090b 	mvn.w	r9, #11
   24e14:	e7cc      	b.n	24db0 <mqtt_pack_connect+0x176>
	...

00024e18 <mqtt_unpack_suback>:
{
   24e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24e1c:	b087      	sub	sp, #28
   24e1e:	461d      	mov	r5, r3
   24e20:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   24e24:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	*pkt_id = 0;
   24e26:	2300      	movs	r3, #0
   24e28:	8013      	strh	r3, [r2, #0]
	*items = 0;
   24e2a:	702b      	strb	r3, [r5, #0]
	if (elements <= 0) {
   24e2c:	2f00      	cmp	r7, #0
   24e2e:	d037      	beq.n	24ea0 <mqtt_unpack_suback+0x88>
   24e30:	4604      	mov	r4, r0
   24e32:	4689      	mov	r9, r1
   24e34:	4690      	mov	r8, r2
	if ((buf[0] & 0xF0) != (MQTT_SUBACK << 4)) {
   24e36:	7803      	ldrb	r3, [r0, #0]
   24e38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
   24e3c:	2a90      	cmp	r2, #144	; 0x90
   24e3e:	d138      	bne.n	24eb2 <mqtt_unpack_suback+0x9a>
	rc = rlen_decode(&rlen, &rlen_size, buf + PACKET_TYPE_SIZE,
   24e40:	1e4b      	subs	r3, r1, #1
   24e42:	b29b      	uxth	r3, r3
   24e44:	1c42      	adds	r2, r0, #1
   24e46:	f10d 0116 	add.w	r1, sp, #22
   24e4a:	a804      	add	r0, sp, #16
   24e4c:	f7ff fe13 	bl	24a76 <rlen_decode>
	if (rc != 0) {
   24e50:	4603      	mov	r3, r0
   24e52:	2800      	cmp	r0, #0
   24e54:	d136      	bne.n	24ec4 <mqtt_unpack_suback+0xac>
	if (PACKET_TYPE_SIZE + rlen + rlen_size > length) {
   24e56:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   24e5a:	9804      	ldr	r0, [sp, #16]
   24e5c:	180a      	adds	r2, r1, r0
   24e5e:	3201      	adds	r2, #1
   24e60:	454a      	cmp	r2, r9
   24e62:	d838      	bhi.n	24ed6 <mqtt_unpack_suback+0xbe>
	offset = PACKET_TYPE_SIZE + rlen_size;
   24e64:	1c4a      	adds	r2, r1, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   24e66:	fa14 f282 	uxtah	r2, r4, r2
   24e6a:	8810      	ldrh	r0, [r2, #0]
	*pkt_id = ntohs(val_u16);
   24e6c:	0a02      	lsrs	r2, r0, #8
   24e6e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   24e72:	f8a8 2000 	strh.w	r2, [r8]
	offset += PACKET_ID_SIZE;
   24e76:	3103      	adds	r1, #3
   24e78:	b289      	uxth	r1, r1
	*items = rlen - PACKET_ID_SIZE;
   24e7a:	9a04      	ldr	r2, [sp, #16]
   24e7c:	3a02      	subs	r2, #2
   24e7e:	b2d2      	uxtb	r2, r2
   24e80:	702a      	strb	r2, [r5, #0]
	if (*items > elements) {
   24e82:	4297      	cmp	r7, r2
   24e84:	d335      	bcc.n	24ef2 <mqtt_unpack_suback+0xda>
   24e86:	2200      	movs	r2, #0
	for (i = 0; i < *items; i++) {
   24e88:	7828      	ldrb	r0, [r5, #0]
   24e8a:	4282      	cmp	r2, r0
   24e8c:	d242      	bcs.n	24f14 <mqtt_unpack_suback+0xfc>
		qos = *(buf + offset);
   24e8e:	5c60      	ldrb	r0, [r4, r1]
		if (qos < MQTT_QoS0 || qos > MQTT_QoS2) {
   24e90:	2802      	cmp	r0, #2
   24e92:	d837      	bhi.n	24f04 <mqtt_unpack_suback+0xec>
		granted_qos[i] = qos;
   24e94:	54b0      	strb	r0, [r6, r2]
		offset += QoS_SIZE;
   24e96:	3101      	adds	r1, #1
   24e98:	b289      	uxth	r1, r1
	for (i = 0; i < *items; i++) {
   24e9a:	3201      	adds	r2, #1
   24e9c:	b2d2      	uxtb	r2, r2
   24e9e:	e7f3      	b.n	24e88 <mqtt_unpack_suback+0x70>
		printk("[%s:%d] elements <= 0\n", __func__, __LINE__);
   24ea0:	f240 321a 	movw	r2, #794	; 0x31a
   24ea4:	491d      	ldr	r1, [pc, #116]	; (24f1c <mqtt_unpack_suback+0x104>)
   24ea6:	481e      	ldr	r0, [pc, #120]	; (24f20 <mqtt_unpack_suback+0x108>)
   24ea8:	f7de f81a 	bl	2ee0 <printk>
		return -EINVAL;
   24eac:	f06f 0315 	mvn.w	r3, #21
   24eb0:	e030      	b.n	24f14 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] buf[0](%x) != MQTT_SUBACK << 4\n", __func__, __LINE__, buf[0]);
   24eb2:	f240 321f 	movw	r2, #799	; 0x31f
   24eb6:	4919      	ldr	r1, [pc, #100]	; (24f1c <mqtt_unpack_suback+0x104>)
   24eb8:	481a      	ldr	r0, [pc, #104]	; (24f24 <mqtt_unpack_suback+0x10c>)
   24eba:	f7de f811 	bl	2ee0 <printk>
		return -EINVAL;
   24ebe:	f06f 0315 	mvn.w	r3, #21
   24ec2:	e027      	b.n	24f14 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] rlen_decode returned %d\n", __func__, __LINE__, rc);
   24ec4:	f240 3226 	movw	r2, #806	; 0x326
   24ec8:	4914      	ldr	r1, [pc, #80]	; (24f1c <mqtt_unpack_suback+0x104>)
   24eca:	4817      	ldr	r0, [pc, #92]	; (24f28 <mqtt_unpack_suback+0x110>)
   24ecc:	f7de f808 	bl	2ee0 <printk>
		return -EINVAL;
   24ed0:	f06f 0315 	mvn.w	r3, #21
   24ed4:	e01e      	b.n	24f14 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] PACKET_TYPE_SIZE(%d) + rlen(%d) + rlen_size(%d) > length(%d)\n"
   24ed6:	f8cd 9008 	str.w	r9, [sp, #8]
   24eda:	9101      	str	r1, [sp, #4]
   24edc:	9000      	str	r0, [sp, #0]
   24ede:	2301      	movs	r3, #1
   24ee0:	f240 322d 	movw	r2, #813	; 0x32d
   24ee4:	490d      	ldr	r1, [pc, #52]	; (24f1c <mqtt_unpack_suback+0x104>)
   24ee6:	4811      	ldr	r0, [pc, #68]	; (24f2c <mqtt_unpack_suback+0x114>)
   24ee8:	f7dd fffa 	bl	2ee0 <printk>
		return -EINVAL;
   24eec:	f06f 0315 	mvn.w	r3, #21
   24ef0:	e010      	b.n	24f14 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] not enough space to store elements\n", __func__, __LINE__);
   24ef2:	f240 323b 	movw	r2, #827	; 0x33b
   24ef6:	4909      	ldr	r1, [pc, #36]	; (24f1c <mqtt_unpack_suback+0x104>)
   24ef8:	480d      	ldr	r0, [pc, #52]	; (24f30 <mqtt_unpack_suback+0x118>)
   24efa:	f7dd fff1 	bl	2ee0 <printk>
		return -EINVAL;
   24efe:	f06f 0315 	mvn.w	r3, #21
   24f02:	e007      	b.n	24f14 <mqtt_unpack_suback+0xfc>
			printk("[%s:%d] invalid qos\n", __func__, __LINE__);
   24f04:	f240 3242 	movw	r2, #834	; 0x342
   24f08:	4904      	ldr	r1, [pc, #16]	; (24f1c <mqtt_unpack_suback+0x104>)
   24f0a:	480a      	ldr	r0, [pc, #40]	; (24f34 <mqtt_unpack_suback+0x11c>)
   24f0c:	f7dd ffe8 	bl	2ee0 <printk>
			return -EINVAL;
   24f10:	f06f 0315 	mvn.w	r3, #21
}
   24f14:	4618      	mov	r0, r3
   24f16:	b007      	add	sp, #28
   24f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24f1c:	00030d04 	.word	0x00030d04
   24f20:	00030d18 	.word	0x00030d18
   24f24:	00030d30 	.word	0x00030d30
   24f28:	00030d58 	.word	0x00030d58
   24f2c:	00030d7c 	.word	0x00030d7c
   24f30:	00030dc4 	.word	0x00030dc4
   24f34:	00030df0 	.word	0x00030df0

00024f38 <mqtt_pack_publish>:
{
   24f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24f3c:	b083      	sub	sp, #12
	if (msg->qos < MQTT_QoS0 || msg->qos > MQTT_QoS2) {
   24f3e:	785c      	ldrb	r4, [r3, #1]
   24f40:	2c02      	cmp	r4, #2
   24f42:	d860      	bhi.n	25006 <mqtt_pack_publish+0xce>
	payload = INT_SIZE + msg->topic_len +
   24f44:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
   24f48:	2c00      	cmp	r4, #0
   24f4a:	d057      	beq.n	24ffc <mqtt_pack_publish+0xc4>
   24f4c:	f04f 0e02 	mov.w	lr, #2
   24f50:	461c      	mov	r4, r3
   24f52:	4615      	mov	r5, r2
   24f54:	460f      	mov	r7, r1
   24f56:	4606      	mov	r6, r0
   24f58:	eb0e 030c 	add.w	r3, lr, ip
		  (msg->qos > MQTT_QoS0 ? PACKET_ID_SIZE : 0) + msg->msg_len;
   24f5c:	8aa2      	ldrh	r2, [r4, #20]
   24f5e:	fa12 f383 	uxtah	r3, r2, r3
   24f62:	b29b      	uxth	r3, r3
	payload = INT_SIZE + msg->topic_len +
   24f64:	3302      	adds	r3, #2
   24f66:	fa1f f983 	uxth.w	r9, r3
	rc = compute_rlen_size(&rlen_size, payload);
   24f6a:	4649      	mov	r1, r9
   24f6c:	f10d 0006 	add.w	r0, sp, #6
   24f70:	f7ff fd4b 	bl	24a0a <compute_rlen_size>
	if (rc != 0) {
   24f74:	4680      	mov	r8, r0
   24f76:	2800      	cmp	r0, #0
   24f78:	d148      	bne.n	2500c <mqtt_pack_publish+0xd4>
	if (PACKET_TYPE_SIZE + rlen_size + payload > size) {
   24f7a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   24f7e:	3301      	adds	r3, #1
   24f80:	444b      	add	r3, r9
   24f82:	42ab      	cmp	r3, r5
   24f84:	dc45      	bgt.n	25012 <mqtt_pack_publish+0xda>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   24f86:	7823      	ldrb	r3, [r4, #0]
   24f88:	2b00      	cmp	r3, #0
   24f8a:	d03a      	beq.n	25002 <mqtt_pack_publish+0xca>
   24f8c:	2338      	movs	r3, #56	; 0x38
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   24f8e:	7862      	ldrb	r2, [r4, #1]
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   24f90:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   24f94:	b25b      	sxtb	r3, r3
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   24f96:	78a2      	ldrb	r2, [r4, #2]
   24f98:	2a00      	cmp	r2, #0
   24f9a:	bf18      	it	ne
   24f9c:	f043 0301 	orrne.w	r3, r3, #1
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   24fa0:	4630      	mov	r0, r6
   24fa2:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, payload);
   24fa6:	4649      	mov	r1, r9
   24fa8:	f7ff fd53 	bl	24a52 <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   24fac:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   24fb0:	1c6b      	adds	r3, r5, #1
   24fb2:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->topic_len), (u16_t *)(buf + offset));
   24fb4:	89a1      	ldrh	r1, [r4, #12]
   24fb6:	0a0a      	lsrs	r2, r1, #8
   24fb8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   24fbc:	52f2      	strh	r2, [r6, r3]
	offset += INT_SIZE;
   24fbe:	3503      	adds	r5, #3
   24fc0:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->topic, msg->topic_len);
   24fc2:	89a2      	ldrh	r2, [r4, #12]
   24fc4:	68a1      	ldr	r1, [r4, #8]
   24fc6:	1970      	adds	r0, r6, r5
   24fc8:	f7db f97a 	bl	2c0 <memcpy>
	offset += msg->topic_len;
   24fcc:	89a3      	ldrh	r3, [r4, #12]
   24fce:	441d      	add	r5, r3
   24fd0:	b2ad      	uxth	r5, r5
	if (msg->qos > MQTT_QoS0) {
   24fd2:	7863      	ldrb	r3, [r4, #1]
   24fd4:	b133      	cbz	r3, 24fe4 <mqtt_pack_publish+0xac>
		UNALIGNED_PUT(htons(msg->pkt_id), (u16_t *)(buf + offset));
   24fd6:	88a2      	ldrh	r2, [r4, #4]
   24fd8:	0a13      	lsrs	r3, r2, #8
   24fda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24fde:	5373      	strh	r3, [r6, r5]
		offset += PACKET_ID_SIZE;
   24fe0:	3502      	adds	r5, #2
   24fe2:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->msg, msg->msg_len);
   24fe4:	8aa2      	ldrh	r2, [r4, #20]
   24fe6:	6921      	ldr	r1, [r4, #16]
   24fe8:	1970      	adds	r0, r6, r5
   24fea:	f7db f969 	bl	2c0 <memcpy>
	offset += msg->msg_len;
   24fee:	8aa3      	ldrh	r3, [r4, #20]
   24ff0:	441d      	add	r5, r3
	*length = offset;
   24ff2:	803d      	strh	r5, [r7, #0]
}
   24ff4:	4640      	mov	r0, r8
   24ff6:	b003      	add	sp, #12
   24ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	payload = INT_SIZE + msg->topic_len +
   24ffc:	f04f 0e00 	mov.w	lr, #0
   25000:	e7a6      	b.n	24f50 <mqtt_pack_publish+0x18>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25002:	2330      	movs	r3, #48	; 0x30
   25004:	e7c3      	b.n	24f8e <mqtt_pack_publish+0x56>
		return -EINVAL;
   25006:	f06f 0815 	mvn.w	r8, #21
   2500a:	e7f3      	b.n	24ff4 <mqtt_pack_publish+0xbc>
		return -EINVAL;
   2500c:	f06f 0815 	mvn.w	r8, #21
   25010:	e7f0      	b.n	24ff4 <mqtt_pack_publish+0xbc>
		return -ENOMEM;
   25012:	f06f 080b 	mvn.w	r8, #11
   25016:	e7ed      	b.n	24ff4 <mqtt_pack_publish+0xbc>

00025018 <mqtt_unpack_publish>:
{
   25018:	b5f0      	push	{r4, r5, r6, r7, lr}
   2501a:	b083      	sub	sp, #12
	if (buf[0] >> 4 != MQTT_PUBLISH) {
   2501c:	7807      	ldrb	r7, [r0, #0]
   2501e:	093b      	lsrs	r3, r7, #4
   25020:	2b03      	cmp	r3, #3
   25022:	d148      	bne.n	250b6 <mqtt_unpack_publish+0x9e>
   25024:	4615      	mov	r5, r2
   25026:	460e      	mov	r6, r1
   25028:	4604      	mov	r4, r0
	msg->dup = (buf[0] & 0x08) >> 3;
   2502a:	f3c7 07c0 	ubfx	r7, r7, #3, #1
   2502e:	7017      	strb	r7, [r2, #0]
	msg->qos = (buf[0] & 0x06) >> 1;
   25030:	7803      	ldrb	r3, [r0, #0]
   25032:	f3c3 0341 	ubfx	r3, r3, #1, #2
   25036:	7053      	strb	r3, [r2, #1]
	msg->retain = buf[0] & 0x01;
   25038:	4602      	mov	r2, r0
   2503a:	f812 3b01 	ldrb.w	r3, [r2], #1
   2503e:	f003 0301 	and.w	r3, r3, #1
   25042:	70ab      	strb	r3, [r5, #2]
	rc = rlen_decode(&rmlen, &rmlen_size, buf + PACKET_TYPE_SIZE,
   25044:	1e4b      	subs	r3, r1, #1
   25046:	b29b      	uxth	r3, r3
   25048:	f10d 0106 	add.w	r1, sp, #6
   2504c:	4668      	mov	r0, sp
   2504e:	f7ff fd12 	bl	24a76 <rlen_decode>
	if (rc != 0) {
   25052:	4607      	mov	r7, r0
   25054:	2800      	cmp	r0, #0
   25056:	d131      	bne.n	250bc <mqtt_unpack_publish+0xa4>
	if ((PACKET_TYPE_SIZE + rmlen_size + rmlen) > length) {
   25058:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   2505c:	9b00      	ldr	r3, [sp, #0]
   2505e:	4413      	add	r3, r2
   25060:	3301      	adds	r3, #1
   25062:	42b3      	cmp	r3, r6
   25064:	d82d      	bhi.n	250c2 <mqtt_unpack_publish+0xaa>
	offset = PACKET_TYPE_SIZE + rmlen_size;
   25066:	1c53      	adds	r3, r2, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   25068:	fa14 f383 	uxtah	r3, r4, r3
   2506c:	8819      	ldrh	r1, [r3, #0]
	msg->topic_len = ntohs(val_u16);
   2506e:	0a0b      	lsrs	r3, r1, #8
   25070:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   25074:	b29b      	uxth	r3, r3
   25076:	81ab      	strh	r3, [r5, #12]
	offset += INT_SIZE;
   25078:	3203      	adds	r2, #3
   2507a:	b292      	uxth	r2, r2
	if (offset + msg->topic_len > length) {
   2507c:	18d1      	adds	r1, r2, r3
   2507e:	42b1      	cmp	r1, r6
   25080:	dc22      	bgt.n	250c8 <mqtt_unpack_publish+0xb0>
	msg->topic = (char *)(buf + offset);
   25082:	18a1      	adds	r1, r4, r2
   25084:	60a9      	str	r1, [r5, #8]
	offset += msg->topic_len;
   25086:	4413      	add	r3, r2
   25088:	b29b      	uxth	r3, r3
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   2508a:	5ae1      	ldrh	r1, [r4, r3]
	if (msg->qos == MQTT_QoS1 || msg->qos == MQTT_QoS2) {
   2508c:	786a      	ldrb	r2, [r5, #1]
   2508e:	3a01      	subs	r2, #1
   25090:	b2d2      	uxtb	r2, r2
   25092:	2a01      	cmp	r2, #1
   25094:	d908      	bls.n	250a8 <mqtt_unpack_publish+0x90>
		msg->pkt_id = 0;
   25096:	2200      	movs	r2, #0
   25098:	80aa      	strh	r2, [r5, #4]
	msg->msg_len = length - offset;
   2509a:	1af6      	subs	r6, r6, r3
   2509c:	82ae      	strh	r6, [r5, #20]
	msg->msg = buf + offset;
   2509e:	4423      	add	r3, r4
   250a0:	612b      	str	r3, [r5, #16]
}
   250a2:	4638      	mov	r0, r7
   250a4:	b003      	add	sp, #12
   250a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msg->pkt_id = ntohs(val_u16);
   250a8:	0a0a      	lsrs	r2, r1, #8
   250aa:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   250ae:	80a9      	strh	r1, [r5, #4]
		offset += PACKET_ID_SIZE;
   250b0:	3302      	adds	r3, #2
   250b2:	b29b      	uxth	r3, r3
   250b4:	e7f1      	b.n	2509a <mqtt_unpack_publish+0x82>
		return -EINVAL;
   250b6:	f06f 0715 	mvn.w	r7, #21
   250ba:	e7f2      	b.n	250a2 <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   250bc:	f06f 0715 	mvn.w	r7, #21
   250c0:	e7ef      	b.n	250a2 <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   250c2:	f06f 0715 	mvn.w	r7, #21
   250c6:	e7ec      	b.n	250a2 <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   250c8:	f06f 0715 	mvn.w	r7, #21
   250cc:	e7e9      	b.n	250a2 <mqtt_unpack_publish+0x8a>

000250ce <mqtt_unpack_connack>:
	if (length < CONNACK_SIZE) {
   250ce:	2903      	cmp	r1, #3
   250d0:	d90d      	bls.n	250ee <mqtt_unpack_connack+0x20>
	if (buf[0] != (MQTT_CONNACK << 4) || buf[1] != 2) {
   250d2:	7801      	ldrb	r1, [r0, #0]
   250d4:	2920      	cmp	r1, #32
   250d6:	d10d      	bne.n	250f4 <mqtt_unpack_connack+0x26>
   250d8:	7841      	ldrb	r1, [r0, #1]
   250da:	2902      	cmp	r1, #2
   250dc:	d10d      	bne.n	250fa <mqtt_unpack_connack+0x2c>
	if (buf[2] > 1) {
   250de:	7881      	ldrb	r1, [r0, #2]
   250e0:	2901      	cmp	r1, #1
   250e2:	d80d      	bhi.n	25100 <mqtt_unpack_connack+0x32>
	*session = buf[2];
   250e4:	7011      	strb	r1, [r2, #0]
	*connect_rc = buf[3];
   250e6:	78c2      	ldrb	r2, [r0, #3]
   250e8:	701a      	strb	r2, [r3, #0]
	return 0;
   250ea:	2000      	movs	r0, #0
   250ec:	4770      	bx	lr
		return -EINVAL;
   250ee:	f06f 0015 	mvn.w	r0, #21
   250f2:	4770      	bx	lr
		return -EINVAL;
   250f4:	f06f 0015 	mvn.w	r0, #21
   250f8:	4770      	bx	lr
   250fa:	f06f 0015 	mvn.w	r0, #21
   250fe:	4770      	bx	lr
		return -EINVAL;
   25100:	f06f 0015 	mvn.w	r0, #21
}
   25104:	4770      	bx	lr

00025106 <mqtt_pack_disconnect>:
{
   25106:	b500      	push	{lr}
   25108:	b083      	sub	sp, #12
	return pack_zerolen(buf, length, size, MQTT_DISCONNECT, 0x00);
   2510a:	2300      	movs	r3, #0
   2510c:	9300      	str	r3, [sp, #0]
   2510e:	230e      	movs	r3, #14
   25110:	f7ff fceb 	bl	24aea <pack_zerolen>
}
   25114:	b003      	add	sp, #12
   25116:	f85d fb04 	ldr.w	pc, [sp], #4

0002511a <mqtt_unpack_puback>:
{
   2511a:	b500      	push	{lr}
   2511c:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBACK,
   2511e:	2300      	movs	r3, #0
   25120:	9300      	str	r3, [sp, #0]
   25122:	2304      	movs	r3, #4
   25124:	f7ff fd0e 	bl	24b44 <unpack_pktid_validate>
}
   25128:	b003      	add	sp, #12
   2512a:	f85d fb04 	ldr.w	pc, [sp], #4

0002512e <mqtt_unpack_pubrec>:
{
   2512e:	b500      	push	{lr}
   25130:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREC,
   25132:	2300      	movs	r3, #0
   25134:	9300      	str	r3, [sp, #0]
   25136:	2305      	movs	r3, #5
   25138:	f7ff fd04 	bl	24b44 <unpack_pktid_validate>
}
   2513c:	b003      	add	sp, #12
   2513e:	f85d fb04 	ldr.w	pc, [sp], #4

00025142 <mqtt_unpack_pubrel>:
{
   25142:	b500      	push	{lr}
   25144:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREL,
   25146:	2302      	movs	r3, #2
   25148:	9300      	str	r3, [sp, #0]
   2514a:	2306      	movs	r3, #6
   2514c:	f7ff fcfa 	bl	24b44 <unpack_pktid_validate>
}
   25150:	b003      	add	sp, #12
   25152:	f85d fb04 	ldr.w	pc, [sp], #4

00025156 <mqtt_unpack_pubcomp>:
{
   25156:	b500      	push	{lr}
   25158:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBCOMP,
   2515a:	2300      	movs	r3, #0
   2515c:	9300      	str	r3, [sp, #0]
   2515e:	2307      	movs	r3, #7
   25160:	f7ff fcf0 	bl	24b44 <unpack_pktid_validate>
}
   25164:	b003      	add	sp, #12
   25166:	f85d fb04 	ldr.w	pc, [sp], #4

0002516a <mqtt_unpack_pingresp>:
{
	return unpack_zerolen_validate(buf, length, MQTT_PINGREQ, 0x00);
}

int mqtt_unpack_pingresp(u8_t *buf, u16_t length)
{
   2516a:	b508      	push	{r3, lr}
	return unpack_zerolen_validate(buf, length, MQTT_PINGRESP, 0x00);
   2516c:	2300      	movs	r3, #0
   2516e:	220d      	movs	r2, #13
   25170:	f7ff fd1a 	bl	24ba8 <unpack_zerolen_validate>
}
   25174:	bd08      	pop	{r3, pc}
	...

00025178 <mqtt_rx_pub_msgs>:
 * @retval -EINVAL on error
 */
static
int mqtt_rx_pub_msgs(struct mqtt_ctx *ctx, struct net_buf *rx,
		     enum mqtt_packet type)
{
   25178:	b5f0      	push	{r4, r5, r6, r7, lr}
   2517a:	b083      	sub	sp, #12
	u16_t pkt_id;
	u16_t len;
	u8_t *data;
	int rc;

	switch (type) {
   2517c:	1f13      	subs	r3, r2, #4
   2517e:	2b03      	cmp	r3, #3
   25180:	d840      	bhi.n	25204 <mqtt_rx_pub_msgs+0x8c>
   25182:	e8df f003 	tbb	[pc, r3]
   25186:	0502      	.short	0x0502
   25188:	0b08      	.short	0x0b08
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   2518a:	2600      	movs	r6, #0
	case MQTT_PUBACK:
		unpack = mqtt_unpack_puback;
   2518c:	4f22      	ldr	r7, [pc, #136]	; (25218 <mqtt_rx_pub_msgs+0xa0>)
   2518e:	e007      	b.n	251a0 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBCOMP:
		unpack = mqtt_unpack_pubcomp;
		break;
	case MQTT_PUBREC:
		unpack = mqtt_unpack_pubrec;
		response = mqtt_tx_pubrel;
   25190:	4e22      	ldr	r6, [pc, #136]	; (2521c <mqtt_rx_pub_msgs+0xa4>)
		unpack = mqtt_unpack_pubrec;
   25192:	4f23      	ldr	r7, [pc, #140]	; (25220 <mqtt_rx_pub_msgs+0xa8>)
		break;
   25194:	e004      	b.n	251a0 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBREL:
		unpack = mqtt_unpack_pubrel;
		response = mqtt_tx_pubcomp;
   25196:	4e23      	ldr	r6, [pc, #140]	; (25224 <mqtt_rx_pub_msgs+0xac>)
		unpack = mqtt_unpack_pubrel;
   25198:	4f23      	ldr	r7, [pc, #140]	; (25228 <mqtt_rx_pub_msgs+0xb0>)
		break;
   2519a:	e001      	b.n	251a0 <mqtt_rx_pub_msgs+0x28>
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   2519c:	2600      	movs	r6, #0
		unpack = mqtt_unpack_pubcomp;
   2519e:	4f23      	ldr	r7, [pc, #140]	; (2522c <mqtt_rx_pub_msgs+0xb4>)
   251a0:	4614      	mov	r4, r2
   251a2:	460b      	mov	r3, r1
   251a4:	4605      	mov	r5, r0

	data = rx->data;
	len = rx->len;

	/* 4 bytes message */
	rc = unpack(data, len, &pkt_id);
   251a6:	f10d 0206 	add.w	r2, sp, #6
   251aa:	8989      	ldrh	r1, [r1, #12]
   251ac:	6898      	ldr	r0, [r3, #8]
   251ae:	47b8      	blx	r7
	if (rc != 0) {
   251b0:	bb58      	cbnz	r0, 2520a <mqtt_rx_pub_msgs+0x92>
	}

	/* Only MQTT_APP_SUBSCRIBER, MQTT_APP_PUBLISHER_SUBSCRIBER and
	 * MQTT_APP_SERVER apps must receive the MQTT_PUBREL msg.
	 */
	if (type == MQTT_PUBREL) {
   251b2:	2c06      	cmp	r4, #6
   251b4:	d012      	beq.n	251dc <mqtt_rx_pub_msgs+0x64>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
		} else {
			rc = -EINVAL;
		}
	} else {
		rc = ctx->publish_tx(ctx, pkt_id, type);
   251b6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   251ba:	4622      	mov	r2, r4
   251bc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   251c0:	4628      	mov	r0, r5
   251c2:	4798      	blx	r3
   251c4:	4603      	mov	r3, r0
	}

	if (rc != 0) {
   251c6:	bb1b      	cbnz	r3, 25210 <mqtt_rx_pub_msgs+0x98>
		return -EINVAL;
	}

	if (!response)  {
   251c8:	b12e      	cbz	r6, 251d6 <mqtt_rx_pub_msgs+0x5e>
		return 0;
	}

	rc = response(ctx, pkt_id);
   251ca:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   251ce:	4628      	mov	r0, r5
   251d0:	47b0      	blx	r6
	if (rc != 0) {
   251d2:	4603      	mov	r3, r0
   251d4:	b998      	cbnz	r0, 251fe <mqtt_rx_pub_msgs+0x86>
		return -EINVAL;
	}

	return 0;
}
   251d6:	4618      	mov	r0, r3
   251d8:	b003      	add	sp, #12
   251da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctx->app_type != MQTT_APP_PUBLISHER) {
   251dc:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   251e0:	2b01      	cmp	r3, #1
   251e2:	d009      	beq.n	251f8 <mqtt_rx_pub_msgs+0x80>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
   251e4:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
   251e8:	2306      	movs	r3, #6
   251ea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   251ee:	2100      	movs	r1, #0
   251f0:	4628      	mov	r0, r5
   251f2:	47a0      	blx	r4
   251f4:	4603      	mov	r3, r0
   251f6:	e7e6      	b.n	251c6 <mqtt_rx_pub_msgs+0x4e>
			rc = -EINVAL;
   251f8:	f06f 0315 	mvn.w	r3, #21
   251fc:	e7e3      	b.n	251c6 <mqtt_rx_pub_msgs+0x4e>
		return -EINVAL;
   251fe:	f06f 0315 	mvn.w	r3, #21
   25202:	e7e8      	b.n	251d6 <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   25204:	f06f 0315 	mvn.w	r3, #21
   25208:	e7e5      	b.n	251d6 <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   2520a:	f06f 0315 	mvn.w	r3, #21
   2520e:	e7e2      	b.n	251d6 <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   25210:	f06f 0315 	mvn.w	r3, #21
   25214:	e7df      	b.n	251d6 <mqtt_rx_pub_msgs+0x5e>
   25216:	bf00      	nop
   25218:	0002511b 	.word	0x0002511b
   2521c:	0002530f 	.word	0x0002530f
   25220:	0002512f 	.word	0x0002512f
   25224:	00025305 	.word	0x00025305
   25228:	00025143 	.word	0x00025143
   2522c:	00025157 	.word	0x00025157

00025230 <app_connected>:
	return rc;
}

static
void app_connected(struct net_app_ctx *ctx, int status, void *data)
{
   25230:	4770      	bx	lr

00025232 <app_recv>:
	struct mqtt_ctx *mqtt = (struct mqtt_ctx *)data;

	/* net_app_ctx is already referenced to by the mqtt_ctx struct */
	ARG_UNUSED(ctx);

	if (status || !pkt) {
   25232:	b96a      	cbnz	r2, 25250 <app_recv+0x1e>
   25234:	b161      	cbz	r1, 25250 <app_recv+0x1e>
{
   25236:	b510      	push	{r4, lr}
   25238:	460c      	mov	r4, r1
	return pkt->appdatalen;
   2523a:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
		return;
	}

	if (net_pkt_appdatalen(pkt) == 0) {
   2523c:	b91a      	cbnz	r2, 25246 <app_recv+0x14>
	}

	mqtt->rcv(mqtt, pkt);

lb_exit:
	net_pkt_unref(pkt);
   2523e:	4620      	mov	r0, r4
   25240:	f7f7 fc9b 	bl	1cb7a <net_pkt_unref>
   25244:	bd10      	pop	{r4, pc}
	mqtt->rcv(mqtt, pkt);
   25246:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   2524a:	4618      	mov	r0, r3
   2524c:	4790      	blx	r2
   2524e:	e7f6      	b.n	2523e <app_recv+0xc>
   25250:	4770      	bx	lr

00025252 <mqtt_tx_pub_msgs>:
{
   25252:	b570      	push	{r4, r5, r6, lr}
   25254:	b084      	sub	sp, #16
   25256:	4604      	mov	r4, r0
	switch (pkt_type) {
   25258:	3a04      	subs	r2, #4
   2525a:	2a03      	cmp	r2, #3
   2525c:	d849      	bhi.n	252f2 <mqtt_tx_pub_msgs+0xa0>
   2525e:	e8df f002 	tbb	[pc, r2]
   25262:	2c02      	.short	0x2c02
   25264:	2434      	.short	0x2434
		rc = mqtt_pack_puback(msg, &len, sizeof(msg), id);
   25266:	460b      	mov	r3, r1
   25268:	2204      	movs	r2, #4
   2526a:	f10d 010a 	add.w	r1, sp, #10
   2526e:	a803      	add	r0, sp, #12
   25270:	f7ff fcb7 	bl	24be2 <mqtt_pack_puback>
	if (rc != 0) {
   25274:	2800      	cmp	r0, #0
   25276:	d13f      	bne.n	252f8 <mqtt_tx_pub_msgs+0xa6>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25278:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   2527a:	2100      	movs	r1, #0
   2527c:	4620      	mov	r0, r4
   2527e:	f000 fe09 	bl	25e94 <net_app_get_net_pkt>
	if (tx == NULL) {
   25282:	4605      	mov	r5, r0
   25284:	2800      	cmp	r0, #0
   25286:	d03a      	beq.n	252fe <mqtt_tx_pub_msgs+0xac>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   25288:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   2528c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   2528e:	aa03      	add	r2, sp, #12
   25290:	4631      	mov	r1, r6
   25292:	f7f7 fdaa 	bl	1cdea <net_pkt_append>
	if (rc != true) {
   25296:	4286      	cmp	r6, r0
   25298:	d01f      	beq.n	252da <mqtt_tx_pub_msgs+0x88>
		rc = -ENOMEM;
   2529a:	f06f 040b 	mvn.w	r4, #11
	net_pkt_unref(tx);
   2529e:	4628      	mov	r0, r5
   252a0:	f7f7 fc6b 	bl	1cb7a <net_pkt_unref>
}
   252a4:	4620      	mov	r0, r4
   252a6:	b004      	add	sp, #16
   252a8:	bd70      	pop	{r4, r5, r6, pc}
		rc = mqtt_pack_pubcomp(msg, &len, sizeof(msg), id);
   252aa:	460b      	mov	r3, r1
   252ac:	2204      	movs	r2, #4
   252ae:	f10d 010a 	add.w	r1, sp, #10
   252b2:	a803      	add	r0, sp, #12
   252b4:	f7ff fcb6 	bl	24c24 <mqtt_pack_pubcomp>
		break;
   252b8:	e7dc      	b.n	25274 <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrec(msg, &len, sizeof(msg), id);
   252ba:	460b      	mov	r3, r1
   252bc:	2204      	movs	r2, #4
   252be:	f10d 010a 	add.w	r1, sp, #10
   252c2:	a803      	add	r0, sp, #12
   252c4:	f7ff fc98 	bl	24bf8 <mqtt_pack_pubrec>
		break;
   252c8:	e7d4      	b.n	25274 <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrel(msg, &len, sizeof(msg), id);
   252ca:	460b      	mov	r3, r1
   252cc:	2204      	movs	r2, #4
   252ce:	f10d 010a 	add.w	r1, sp, #10
   252d2:	a803      	add	r0, sp, #12
   252d4:	f7ff fc9b 	bl	24c0e <mqtt_pack_pubrel>
		break;
   252d8:	e7cc      	b.n	25274 <mqtt_tx_pub_msgs+0x22>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   252da:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   252dc:	2200      	movs	r2, #0
   252de:	9201      	str	r2, [sp, #4]
   252e0:	9300      	str	r3, [sp, #0]
   252e2:	4613      	mov	r3, r2
   252e4:	4629      	mov	r1, r5
   252e6:	4620      	mov	r0, r4
   252e8:	f000 fd58 	bl	25d9c <net_app_send_pkt>
	if (rc < 0) {
   252ec:	1e04      	subs	r4, r0, #0
   252ee:	dad9      	bge.n	252a4 <mqtt_tx_pub_msgs+0x52>
   252f0:	e7d5      	b.n	2529e <mqtt_tx_pub_msgs+0x4c>
		return -EINVAL;
   252f2:	f06f 0415 	mvn.w	r4, #21
   252f6:	e7d5      	b.n	252a4 <mqtt_tx_pub_msgs+0x52>
		return -EINVAL;
   252f8:	f06f 0415 	mvn.w	r4, #21
   252fc:	e7d2      	b.n	252a4 <mqtt_tx_pub_msgs+0x52>
		return -ENOMEM;
   252fe:	f06f 040b 	mvn.w	r4, #11
   25302:	e7cf      	b.n	252a4 <mqtt_tx_pub_msgs+0x52>

00025304 <mqtt_tx_pubcomp>:
{
   25304:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBCOMP);
   25306:	2207      	movs	r2, #7
   25308:	f7ff ffa3 	bl	25252 <mqtt_tx_pub_msgs>
}
   2530c:	bd08      	pop	{r3, pc}

0002530e <mqtt_tx_pubrel>:
{
   2530e:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREL);
   25310:	2206      	movs	r2, #6
   25312:	f7ff ff9e 	bl	25252 <mqtt_tx_pub_msgs>
}
   25316:	bd08      	pop	{r3, pc}

00025318 <mqtt_linearize_packet>:
{
   25318:	b570      	push	{r4, r5, r6, lr}
	return pkt->appdatalen;
   2531a:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
	if (data_len < min_size || data_len > CONFIG_MQTT_MSG_MAX_SIZE) {
   2531c:	42aa      	cmp	r2, r5
   2531e:	d820      	bhi.n	25362 <mqtt_linearize_packet+0x4a>
   25320:	2d80      	cmp	r5, #128	; 0x80
   25322:	d820      	bhi.n	25366 <mqtt_linearize_packet+0x4e>
   25324:	460c      	mov	r4, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   25326:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   25328:	4810      	ldr	r0, [pc, #64]	; (2536c <mqtt_linearize_packet+0x54>)
   2532a:	f7f4 fe49 	bl	19fc0 <net_buf_alloc>
	if (data == NULL) {
   2532e:	4606      	mov	r6, r0
   25330:	b180      	cbz	r0, 25354 <mqtt_linearize_packet+0x3c>
	return net_buf_frags_len(pkt->frags);
   25332:	68a1      	ldr	r1, [r4, #8]
   25334:	460c      	mov	r4, r1
	size_t bytes = 0;
   25336:	2200      	movs	r2, #0
   25338:	e002      	b.n	25340 <mqtt_linearize_packet+0x28>
		bytes += buf->len;
   2533a:	89a3      	ldrh	r3, [r4, #12]
   2533c:	441a      	add	r2, r3
		buf = buf->frags;
   2533e:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   25340:	2c00      	cmp	r4, #0
   25342:	d1fa      	bne.n	2533a <mqtt_linearize_packet+0x22>
	offset = net_pkt_get_len(rx) - data_len;
   25344:	b292      	uxth	r2, r2
   25346:	1b52      	subs	r2, r2, r5
	rc = net_frag_linear_copy(data, rx->frags, offset, data_len);
   25348:	462b      	mov	r3, r5
   2534a:	b292      	uxth	r2, r2
   2534c:	4630      	mov	r0, r6
   2534e:	f7f7 fcc7 	bl	1cce0 <net_frag_linear_copy>
	if (rc != 0) {
   25352:	b908      	cbnz	r0, 25358 <mqtt_linearize_packet+0x40>
}
   25354:	4630      	mov	r0, r6
   25356:	bd70      	pop	{r4, r5, r6, pc}
	net_pkt_frag_unref(data);
   25358:	4630      	mov	r0, r6
   2535a:	f7f7 fc08 	bl	1cb6e <net_pkt_frag_unref>
	return NULL;
   2535e:	4626      	mov	r6, r4
   25360:	e7f8      	b.n	25354 <mqtt_linearize_packet+0x3c>
		return NULL;
   25362:	2600      	movs	r6, #0
   25364:	e7f6      	b.n	25354 <mqtt_linearize_packet+0x3c>
   25366:	2600      	movs	r6, #0
   25368:	e7f4      	b.n	25354 <mqtt_linearize_packet+0x3c>
   2536a:	bf00      	nop
   2536c:	2000d054 	.word	0x2000d054

00025370 <mqtt_tx_connect>:
{
   25370:	b570      	push	{r4, r5, r6, lr}
   25372:	b082      	sub	sp, #8
   25374:	4604      	mov	r4, r0
   25376:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   25378:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   2537a:	481d      	ldr	r0, [pc, #116]	; (253f0 <mqtt_tx_connect+0x80>)
   2537c:	f7f4 fe20 	bl	19fc0 <net_buf_alloc>
	if (data == NULL) {
   25380:	b398      	cbz	r0, 253ea <mqtt_tx_connect+0x7a>
   25382:	4605      	mov	r5, r0
	ctx->clean_session = msg->clean_session ? 1 : 0;
   25384:	7832      	ldrb	r2, [r6, #0]
   25386:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   2538a:	f362 0300 	bfi	r3, r2, #0, #1
   2538e:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	rc = mqtt_pack_connect(data->data, &data->len, MSG_SIZE, msg);
   25392:	4633      	mov	r3, r6
   25394:	2280      	movs	r2, #128	; 0x80
   25396:	f100 010c 	add.w	r1, r0, #12
   2539a:	6880      	ldr	r0, [r0, #8]
   2539c:	f7ff fc4d 	bl	24c3a <mqtt_pack_connect>
	if (rc != 0) {
   253a0:	b9c0      	cbnz	r0, 253d4 <mqtt_tx_connect+0x64>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   253a2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   253a4:	2100      	movs	r1, #0
   253a6:	4620      	mov	r0, r4
   253a8:	f000 fd74 	bl	25e94 <net_app_get_net_pkt>
	if (tx == NULL) {
   253ac:	4606      	mov	r6, r0
   253ae:	b1c8      	cbz	r0, 253e4 <mqtt_tx_connect+0x74>
	net_pkt_frag_add(tx, data);
   253b0:	4629      	mov	r1, r5
   253b2:	f7f7 fc0c 	bl	1cbce <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   253b6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   253b8:	2200      	movs	r2, #0
   253ba:	9201      	str	r2, [sp, #4]
   253bc:	9300      	str	r3, [sp, #0]
   253be:	4613      	mov	r3, r2
   253c0:	4631      	mov	r1, r6
   253c2:	4620      	mov	r0, r4
   253c4:	f000 fcea 	bl	25d9c <net_app_send_pkt>
	if (rc < 0) {
   253c8:	1e04      	subs	r4, r0, #0
   253ca:	da08      	bge.n	253de <mqtt_tx_connect+0x6e>
		net_pkt_unref(tx);
   253cc:	4630      	mov	r0, r6
   253ce:	f7f7 fbd4 	bl	1cb7a <net_pkt_unref>
   253d2:	e004      	b.n	253de <mqtt_tx_connect+0x6e>
		rc = -EINVAL;
   253d4:	f06f 0415 	mvn.w	r4, #21
	net_pkt_frag_unref(data);
   253d8:	4628      	mov	r0, r5
   253da:	f7f7 fbc8 	bl	1cb6e <net_pkt_frag_unref>
}
   253de:	4620      	mov	r0, r4
   253e0:	b002      	add	sp, #8
   253e2:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   253e4:	f06f 040b 	mvn.w	r4, #11
   253e8:	e7f6      	b.n	253d8 <mqtt_tx_connect+0x68>
		return -ENOMEM;
   253ea:	f06f 040b 	mvn.w	r4, #11
   253ee:	e7f6      	b.n	253de <mqtt_tx_connect+0x6e>
   253f0:	2000d054 	.word	0x2000d054

000253f4 <mqtt_tx_disconnect>:
{
   253f4:	b570      	push	{r4, r5, r6, lr}
   253f6:	b084      	sub	sp, #16
   253f8:	4604      	mov	r4, r0
	rc = mqtt_pack_disconnect(msg, &len, sizeof(msg));
   253fa:	2202      	movs	r2, #2
   253fc:	f10d 010a 	add.w	r1, sp, #10
   25400:	a803      	add	r0, sp, #12
   25402:	f7ff fe80 	bl	25106 <mqtt_pack_disconnect>
	if (rc != 0) {
   25406:	bb78      	cbnz	r0, 25468 <mqtt_tx_disconnect+0x74>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25408:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   2540a:	2100      	movs	r1, #0
   2540c:	4620      	mov	r0, r4
   2540e:	f000 fd41 	bl	25e94 <net_app_get_net_pkt>
	if (tx == NULL) {
   25412:	4605      	mov	r5, r0
   25414:	b358      	cbz	r0, 2546e <mqtt_tx_disconnect+0x7a>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   25416:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   2541a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   2541c:	aa03      	add	r2, sp, #12
   2541e:	4631      	mov	r1, r6
   25420:	f7f7 fce3 	bl	1cdea <net_pkt_append>
	if (rc != true) {
   25424:	4286      	cmp	r6, r0
   25426:	d007      	beq.n	25438 <mqtt_tx_disconnect+0x44>
		rc = -ENOMEM;
   25428:	f06f 060b 	mvn.w	r6, #11
	net_pkt_unref(tx);
   2542c:	4628      	mov	r0, r5
   2542e:	f7f7 fba4 	bl	1cb7a <net_pkt_unref>
}
   25432:	4630      	mov	r0, r6
   25434:	b004      	add	sp, #16
   25436:	bd70      	pop	{r4, r5, r6, pc}
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   25438:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   2543a:	2200      	movs	r2, #0
   2543c:	9201      	str	r2, [sp, #4]
   2543e:	9300      	str	r3, [sp, #0]
   25440:	4613      	mov	r3, r2
   25442:	4629      	mov	r1, r5
   25444:	4620      	mov	r0, r4
   25446:	f000 fca9 	bl	25d9c <net_app_send_pkt>
	if (rc < 0) {
   2544a:	1e06      	subs	r6, r0, #0
   2544c:	dbee      	blt.n	2542c <mqtt_tx_disconnect+0x38>
	ctx->connected = 0;
   2544e:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   25452:	f36f 0341 	bfc	r3, #1, #1
   25456:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->disconnect) {
   2545a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   2545e:	2b00      	cmp	r3, #0
   25460:	d0e7      	beq.n	25432 <mqtt_tx_disconnect+0x3e>
		ctx->disconnect(ctx);
   25462:	4620      	mov	r0, r4
   25464:	4798      	blx	r3
   25466:	e7e4      	b.n	25432 <mqtt_tx_disconnect+0x3e>
		return -EINVAL;
   25468:	f06f 0615 	mvn.w	r6, #21
   2546c:	e7e1      	b.n	25432 <mqtt_tx_disconnect+0x3e>
		return -ENOMEM;
   2546e:	f06f 060b 	mvn.w	r6, #11
   25472:	e7de      	b.n	25432 <mqtt_tx_disconnect+0x3e>

00025474 <mqtt_tx_puback>:
{
   25474:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBACK);
   25476:	2204      	movs	r2, #4
   25478:	f7ff feeb 	bl	25252 <mqtt_tx_pub_msgs>
}
   2547c:	bd08      	pop	{r3, pc}

0002547e <mqtt_tx_pubrec>:
{
   2547e:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREC);
   25480:	2205      	movs	r2, #5
   25482:	f7ff fee6 	bl	25252 <mqtt_tx_pub_msgs>
}
   25486:	bd08      	pop	{r3, pc}

00025488 <mqtt_tx_publish>:
{
   25488:	b570      	push	{r4, r5, r6, lr}
   2548a:	b082      	sub	sp, #8
   2548c:	4605      	mov	r5, r0
   2548e:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   25490:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   25492:	481a      	ldr	r0, [pc, #104]	; (254fc <mqtt_tx_publish+0x74>)
   25494:	f7f4 fd94 	bl	19fc0 <net_buf_alloc>
	if (data == NULL) {
   25498:	b360      	cbz	r0, 254f4 <mqtt_tx_publish+0x6c>
   2549a:	4604      	mov	r4, r0
	rc = mqtt_pack_publish(data->data, &data->len, data->size, msg);
   2549c:	4633      	mov	r3, r6
   2549e:	89c2      	ldrh	r2, [r0, #14]
   254a0:	f100 010c 	add.w	r1, r0, #12
   254a4:	6880      	ldr	r0, [r0, #8]
   254a6:	f7ff fd47 	bl	24f38 <mqtt_pack_publish>
	if (rc != 0) {
   254aa:	b9c0      	cbnz	r0, 254de <mqtt_tx_publish+0x56>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   254ac:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   254ae:	2100      	movs	r1, #0
   254b0:	4628      	mov	r0, r5
   254b2:	f000 fcef 	bl	25e94 <net_app_get_net_pkt>
	if (tx == NULL) {
   254b6:	4606      	mov	r6, r0
   254b8:	b1c8      	cbz	r0, 254ee <mqtt_tx_publish+0x66>
	net_pkt_frag_add(tx, data);
   254ba:	4621      	mov	r1, r4
   254bc:	f7f7 fb87 	bl	1cbce <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   254c0:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   254c2:	2200      	movs	r2, #0
   254c4:	9201      	str	r2, [sp, #4]
   254c6:	9300      	str	r3, [sp, #0]
   254c8:	4613      	mov	r3, r2
   254ca:	4631      	mov	r1, r6
   254cc:	4628      	mov	r0, r5
   254ce:	f000 fc65 	bl	25d9c <net_app_send_pkt>
	if (rc < 0) {
   254d2:	1e05      	subs	r5, r0, #0
   254d4:	da08      	bge.n	254e8 <mqtt_tx_publish+0x60>
		net_pkt_unref(tx);
   254d6:	4630      	mov	r0, r6
   254d8:	f7f7 fb4f 	bl	1cb7a <net_pkt_unref>
   254dc:	e004      	b.n	254e8 <mqtt_tx_publish+0x60>
		rc = -EINVAL;
   254de:	f06f 0515 	mvn.w	r5, #21
	net_pkt_frag_unref(data);
   254e2:	4620      	mov	r0, r4
   254e4:	f7f7 fb43 	bl	1cb6e <net_pkt_frag_unref>
}
   254e8:	4628      	mov	r0, r5
   254ea:	b002      	add	sp, #8
   254ec:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   254ee:	f06f 050b 	mvn.w	r5, #11
   254f2:	e7f6      	b.n	254e2 <mqtt_tx_publish+0x5a>
		return -ENOMEM;
   254f4:	f06f 050b 	mvn.w	r5, #11
   254f8:	e7f6      	b.n	254e8 <mqtt_tx_publish+0x60>
   254fa:	bf00      	nop
   254fc:	2000d054 	.word	0x2000d054

00025500 <mqtt_rx_connack>:
{
   25500:	b570      	push	{r4, r5, r6, lr}
   25502:	b082      	sub	sp, #8
   25504:	4604      	mov	r4, r0
   25506:	4608      	mov	r0, r1
   25508:	4616      	mov	r6, r2
	rc = mqtt_unpack_connack(data, len, &session, &connect_rc);
   2550a:	f10d 0307 	add.w	r3, sp, #7
   2550e:	f10d 0206 	add.w	r2, sp, #6
   25512:	8989      	ldrh	r1, [r1, #12]
   25514:	6880      	ldr	r0, [r0, #8]
   25516:	f7ff fdda 	bl	250ce <mqtt_unpack_connack>
	if (rc != 0) {
   2551a:	b998      	cbnz	r0, 25544 <mqtt_rx_connack+0x44>
   2551c:	4605      	mov	r5, r0
	switch (clean_session) {
   2551e:	2e01      	cmp	r6, #1
   25520:	d113      	bne.n	2554a <mqtt_rx_connack+0x4a>
		if (/*session == 0 && */connect_rc == 0) {
   25522:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25526:	b99b      	cbnz	r3, 25550 <mqtt_rx_connack+0x50>
	ctx->connected = 1;
   25528:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   2552c:	f043 0302 	orr.w	r3, r3, #2
   25530:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->connect) {
   25534:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   25538:	b10b      	cbz	r3, 2553e <mqtt_rx_connack+0x3e>
		ctx->connect(ctx);
   2553a:	4620      	mov	r0, r4
   2553c:	4798      	blx	r3
}
   2553e:	4628      	mov	r0, r5
   25540:	b002      	add	sp, #8
   25542:	bd70      	pop	{r4, r5, r6, pc}
		rc = -EINVAL;
   25544:	f06f 0515 	mvn.w	r5, #21
   25548:	e7f9      	b.n	2553e <mqtt_rx_connack+0x3e>
		rc = -EINVAL;
   2554a:	f06f 0515 	mvn.w	r5, #21
   2554e:	e7f6      	b.n	2553e <mqtt_rx_connack+0x3e>
			rc = -EINVAL;
   25550:	f06f 0515 	mvn.w	r5, #21
	return rc;
   25554:	e7f3      	b.n	2553e <mqtt_rx_connack+0x3e>

00025556 <mqtt_rx_puback>:
{
   25556:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBACK);
   25558:	2204      	movs	r2, #4
   2555a:	f7ff fe0d 	bl	25178 <mqtt_rx_pub_msgs>
}
   2555e:	bd08      	pop	{r3, pc}

00025560 <mqtt_rx_pubcomp>:
{
   25560:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBCOMP);
   25562:	2207      	movs	r2, #7
   25564:	f7ff fe08 	bl	25178 <mqtt_rx_pub_msgs>
}
   25568:	bd08      	pop	{r3, pc}

0002556a <mqtt_rx_pubrec>:
{
   2556a:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREC);
   2556c:	2205      	movs	r2, #5
   2556e:	f7ff fe03 	bl	25178 <mqtt_rx_pub_msgs>
}
   25572:	bd08      	pop	{r3, pc}

00025574 <mqtt_rx_pubrel>:
{
   25574:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREL);
   25576:	2206      	movs	r2, #6
   25578:	f7ff fdfe 	bl	25178 <mqtt_rx_pub_msgs>
}
   2557c:	bd08      	pop	{r3, pc}

0002557e <mqtt_rx_pingresp>:
{
   2557e:	b508      	push	{r3, lr}
   25580:	460b      	mov	r3, r1
	rc = mqtt_unpack_pingresp(rx->data, rx->len);
   25582:	8989      	ldrh	r1, [r1, #12]
   25584:	6898      	ldr	r0, [r3, #8]
   25586:	f7ff fdf0 	bl	2516a <mqtt_unpack_pingresp>
	if (rc != 0) {
   2558a:	4603      	mov	r3, r0
   2558c:	b908      	cbnz	r0, 25592 <mqtt_rx_pingresp+0x14>
}
   2558e:	4618      	mov	r0, r3
   25590:	bd08      	pop	{r3, pc}
		return -EINVAL;
   25592:	f06f 0315 	mvn.w	r3, #21
   25596:	e7fa      	b.n	2558e <mqtt_rx_pingresp+0x10>

00025598 <mqtt_rx_suback>:
{
   25598:	b530      	push	{r4, r5, lr}
   2559a:	b085      	sub	sp, #20
   2559c:	4604      	mov	r4, r0
	data = rx->data;
   2559e:	6888      	ldr	r0, [r1, #8]
	len = rx->len;
   255a0:	8989      	ldrh	r1, [r1, #12]
	rc = mqtt_unpack_suback(data, len, &pkt_id, &items,
   255a2:	ab03      	add	r3, sp, #12
   255a4:	9301      	str	r3, [sp, #4]
   255a6:	2301      	movs	r3, #1
   255a8:	9300      	str	r3, [sp, #0]
   255aa:	f10d 0309 	add.w	r3, sp, #9
   255ae:	f10d 020a 	add.w	r2, sp, #10
   255b2:	f7ff fc31 	bl	24e18 <mqtt_unpack_suback>
	if (rc != 0) {
   255b6:	b988      	cbnz	r0, 255dc <mqtt_rx_suback+0x44>
	if (!ctx->subscribe) {
   255b8:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   255bc:	b18d      	cbz	r5, 255e2 <mqtt_rx_suback+0x4a>
	rc = ctx->subscribe(ctx, pkt_id, items, suback_qos);
   255be:	ab03      	add	r3, sp, #12
   255c0:	f89d 2009 	ldrb.w	r2, [sp, #9]
   255c4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   255c8:	4620      	mov	r0, r4
   255ca:	47a8      	blx	r5
	if (rc != 0) {
   255cc:	4603      	mov	r3, r0
   255ce:	b910      	cbnz	r0, 255d6 <mqtt_rx_suback+0x3e>
}
   255d0:	4618      	mov	r0, r3
   255d2:	b005      	add	sp, #20
   255d4:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   255d6:	f06f 0315 	mvn.w	r3, #21
   255da:	e7f9      	b.n	255d0 <mqtt_rx_suback+0x38>
		return -EINVAL;
   255dc:	f06f 0315 	mvn.w	r3, #21
   255e0:	e7f6      	b.n	255d0 <mqtt_rx_suback+0x38>
		return -EINVAL;
   255e2:	f06f 0315 	mvn.w	r3, #21
   255e6:	e7f3      	b.n	255d0 <mqtt_rx_suback+0x38>

000255e8 <mqtt_rx_publish>:
{
   255e8:	b530      	push	{r4, r5, lr}
   255ea:	b087      	sub	sp, #28
   255ec:	4604      	mov	r4, r0
   255ee:	460b      	mov	r3, r1
	rc = mqtt_unpack_publish(rx->data, rx->len, &msg);
   255f0:	466a      	mov	r2, sp
   255f2:	8989      	ldrh	r1, [r1, #12]
   255f4:	6898      	ldr	r0, [r3, #8]
   255f6:	f7ff fd0f 	bl	25018 <mqtt_unpack_publish>
	if (rc != 0) {
   255fa:	bb00      	cbnz	r0, 2563e <mqtt_rx_publish+0x56>
	rc = ctx->publish_rx(ctx, &msg, msg.pkt_id, MQTT_PUBLISH);
   255fc:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
   25600:	2303      	movs	r3, #3
   25602:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   25606:	4669      	mov	r1, sp
   25608:	4620      	mov	r0, r4
   2560a:	47a8      	blx	r5
	if (rc != 0) {
   2560c:	4602      	mov	r2, r0
   2560e:	b9c8      	cbnz	r0, 25644 <mqtt_rx_publish+0x5c>
	switch (msg.qos) {
   25610:	f89d 3001 	ldrb.w	r3, [sp, #1]
   25614:	2b01      	cmp	r3, #1
   25616:	d00b      	beq.n	25630 <mqtt_rx_publish+0x48>
   25618:	b13b      	cbz	r3, 2562a <mqtt_rx_publish+0x42>
   2561a:	2b02      	cmp	r3, #2
   2561c:	d115      	bne.n	2564a <mqtt_rx_publish+0x62>
		rc = mqtt_tx_pubrec(ctx, msg.pkt_id);
   2561e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   25622:	4620      	mov	r0, r4
   25624:	f7ff ff2b 	bl	2547e <mqtt_tx_pubrec>
   25628:	4602      	mov	r2, r0
}
   2562a:	4610      	mov	r0, r2
   2562c:	b007      	add	sp, #28
   2562e:	bd30      	pop	{r4, r5, pc}
		rc = mqtt_tx_puback(ctx, msg.pkt_id);
   25630:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   25634:	4620      	mov	r0, r4
   25636:	f7ff ff1d 	bl	25474 <mqtt_tx_puback>
   2563a:	4602      	mov	r2, r0
		break;
   2563c:	e7f5      	b.n	2562a <mqtt_rx_publish+0x42>
		return -EINVAL;
   2563e:	f06f 0215 	mvn.w	r2, #21
   25642:	e7f2      	b.n	2562a <mqtt_rx_publish+0x42>
		return -EINVAL;
   25644:	f06f 0215 	mvn.w	r2, #21
   25648:	e7ef      	b.n	2562a <mqtt_rx_publish+0x42>
		rc = -EINVAL;
   2564a:	f06f 0215 	mvn.w	r2, #21
   2564e:	e7ec      	b.n	2562a <mqtt_rx_publish+0x42>

00025650 <mqtt_parser>:
{
   25650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25652:	4606      	mov	r6, r0
	data = mqtt_linearize_packet(ctx, rx, MQTT_PUBLISHER_MIN_MSG_SIZE);
   25654:	2202      	movs	r2, #2
   25656:	f7ff fe5f 	bl	25318 <mqtt_linearize_packet>
	if (!data) {
   2565a:	2800      	cmp	r0, #0
   2565c:	d057      	beq.n	2570e <mqtt_parser+0xbe>
   2565e:	4604      	mov	r4, r0
	pkt_type = MQTT_PACKET_TYPE(data->data[0]);
   25660:	6883      	ldr	r3, [r0, #8]
   25662:	781b      	ldrb	r3, [r3, #0]
   25664:	091b      	lsrs	r3, r3, #4
   25666:	b29f      	uxth	r7, r3
	switch (pkt_type) {
   25668:	3b02      	subs	r3, #2
   2566a:	2b0b      	cmp	r3, #11
   2566c:	d84c      	bhi.n	25708 <mqtt_parser+0xb8>
   2566e:	e8df f003 	tbb	[pc, r3]
   25672:	3906      	.short	0x3906
   25674:	2d3f2716 	.word	0x2d3f2716
   25678:	4b4b454b 	.word	0x4b4b454b
   2567c:	334b      	.short	0x334b
		if (!ctx->connected) {
   2567e:	f896 30a9 	ldrb.w	r3, [r6, #169]	; 0xa9
   25682:	f013 0f02 	tst.w	r3, #2
   25686:	d002      	beq.n	2568e <mqtt_parser+0x3e>
			rc = -EINVAL;
   25688:	f06f 0515 	mvn.w	r5, #21
   2568c:	e00c      	b.n	256a8 <mqtt_parser+0x58>
			rc = mqtt_rx_connack(ctx, data, ctx->clean_session);
   2568e:	f003 0201 	and.w	r2, r3, #1
   25692:	4601      	mov	r1, r0
   25694:	4630      	mov	r0, r6
   25696:	f7ff ff33 	bl	25500 <mqtt_rx_connack>
   2569a:	4605      	mov	r5, r0
   2569c:	e004      	b.n	256a8 <mqtt_parser+0x58>
		rc = mqtt_rx_puback(ctx, data);
   2569e:	4601      	mov	r1, r0
   256a0:	4630      	mov	r0, r6
   256a2:	f7ff ff58 	bl	25556 <mqtt_rx_puback>
   256a6:	4605      	mov	r5, r0
	if (rc != 0 && ctx->malformed) {
   256a8:	b12d      	cbz	r5, 256b6 <mqtt_parser+0x66>
   256aa:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
   256ae:	b113      	cbz	r3, 256b6 <mqtt_parser+0x66>
		ctx->malformed(ctx, pkt_type);
   256b0:	4639      	mov	r1, r7
   256b2:	4630      	mov	r0, r6
   256b4:	4798      	blx	r3
	net_pkt_frag_unref(data);
   256b6:	4620      	mov	r0, r4
   256b8:	f7f7 fa59 	bl	1cb6e <net_pkt_frag_unref>
}
   256bc:	4628      	mov	r0, r5
   256be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = mqtt_rx_pubrec(ctx, data);
   256c0:	4601      	mov	r1, r0
   256c2:	4630      	mov	r0, r6
   256c4:	f7ff ff51 	bl	2556a <mqtt_rx_pubrec>
   256c8:	4605      	mov	r5, r0
		break;
   256ca:	e7ed      	b.n	256a8 <mqtt_parser+0x58>
		rc = mqtt_rx_pubcomp(ctx, data);
   256cc:	4601      	mov	r1, r0
   256ce:	4630      	mov	r0, r6
   256d0:	f7ff ff46 	bl	25560 <mqtt_rx_pubcomp>
   256d4:	4605      	mov	r5, r0
		break;
   256d6:	e7e7      	b.n	256a8 <mqtt_parser+0x58>
		rc = mqtt_rx_pingresp(ctx, data);
   256d8:	4601      	mov	r1, r0
   256da:	4630      	mov	r0, r6
   256dc:	f7ff ff4f 	bl	2557e <mqtt_rx_pingresp>
   256e0:	4605      	mov	r5, r0
		break;
   256e2:	e7e1      	b.n	256a8 <mqtt_parser+0x58>
		rc = mqtt_rx_publish(ctx, data);
   256e4:	4601      	mov	r1, r0
   256e6:	4630      	mov	r0, r6
   256e8:	f7ff ff7e 	bl	255e8 <mqtt_rx_publish>
   256ec:	4605      	mov	r5, r0
		break;
   256ee:	e7db      	b.n	256a8 <mqtt_parser+0x58>
		rc = mqtt_rx_pubrel(ctx, data);
   256f0:	4601      	mov	r1, r0
   256f2:	4630      	mov	r0, r6
   256f4:	f7ff ff3e 	bl	25574 <mqtt_rx_pubrel>
   256f8:	4605      	mov	r5, r0
		break;
   256fa:	e7d5      	b.n	256a8 <mqtt_parser+0x58>
		rc = mqtt_rx_suback(ctx, data);
   256fc:	4601      	mov	r1, r0
   256fe:	4630      	mov	r0, r6
   25700:	f7ff ff4a 	bl	25598 <mqtt_rx_suback>
   25704:	4605      	mov	r5, r0
		break;
   25706:	e7cf      	b.n	256a8 <mqtt_parser+0x58>
		rc = -EINVAL;
   25708:	f06f 0515 	mvn.w	r5, #21
   2570c:	e7cc      	b.n	256a8 <mqtt_parser+0x58>
		return -ENOMEM;
   2570e:	f06f 050b 	mvn.w	r5, #11
   25712:	e7d3      	b.n	256bc <mqtt_parser+0x6c>

00025714 <mqtt_connect>:
}

int mqtt_connect(struct mqtt_ctx *ctx)
{
   25714:	b530      	push	{r4, r5, lr}
   25716:	b087      	sub	sp, #28
	int rc = 0;

	if (!ctx) {
   25718:	b348      	cbz	r0, 2576e <mqtt_connect+0x5a>
   2571a:	4604      	mov	r4, r0
	}

	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
			NULL,
			NULL,
			ctx->peer_addr_str,
   2571c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
   25720:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
   25724:	6f81      	ldr	r1, [r0, #120]	; 0x78
					  const char *peer_addr_str,
					  u16_t peer_port,
					  s32_t timeout,
					  void *user_data)
{
	return net_app_init_client(ctx,
   25726:	9004      	str	r0, [sp, #16]
   25728:	9103      	str	r1, [sp, #12]
   2572a:	9202      	str	r2, [sp, #8]
   2572c:	9301      	str	r3, [sp, #4]
   2572e:	2300      	movs	r3, #0
   25730:	9300      	str	r3, [sp, #0]
   25732:	2206      	movs	r2, #6
   25734:	2101      	movs	r1, #1
   25736:	f000 f913 	bl	25960 <net_app_init_client>
			ctx->peer_port,
			ctx->net_init_timeout,
			ctx);
	if (rc < 0) {
   2573a:	1e05      	subs	r5, r0, #0
   2573c:	db0e      	blt.n	2575c <mqtt_connect+0x48>
		goto error_connect;
	}

	rc = net_app_set_cb(&ctx->net_app_ctx,
   2573e:	2300      	movs	r3, #0
   25740:	9300      	str	r3, [sp, #0]
   25742:	4a0c      	ldr	r2, [pc, #48]	; (25774 <mqtt_connect+0x60>)
   25744:	490c      	ldr	r1, [pc, #48]	; (25778 <mqtt_connect+0x64>)
   25746:	4620      	mov	r0, r4
   25748:	f000 fb11 	bl	25d6e <net_app_set_cb>
			app_connected,
			app_recv,
			NULL,
			NULL);
	if (rc < 0) {
   2574c:	1e05      	subs	r5, r0, #0
   2574e:	db05      	blt.n	2575c <mqtt_connect+0x48>
	if (rc < 0) {
		goto error_connect;
	}
#endif

	rc = net_app_connect(&ctx->net_app_ctx, ctx->net_timeout);
   25750:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   25752:	4620      	mov	r0, r4
   25754:	f000 f9ec 	bl	25b30 <net_app_connect>
	if (rc < 0) {
   25758:	1e05      	subs	r5, r0, #0
   2575a:	da05      	bge.n	25768 <mqtt_connect+0x54>

	return rc;

error_connect:
	/* clean net app context, so mqtt_connect() can be called repeatedly */
	net_app_close(&ctx->net_app_ctx);
   2575c:	4620      	mov	r0, r4
   2575e:	f000 fbbd 	bl	25edc <net_app_close>
	net_app_release(&ctx->net_app_ctx);
   25762:	4620      	mov	r0, r4
   25764:	f000 fab8 	bl	25cd8 <net_app_release>

	return rc;
}
   25768:	4628      	mov	r0, r5
   2576a:	b007      	add	sp, #28
   2576c:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
   2576e:	f06f 050d 	mvn.w	r5, #13
   25772:	e7f9      	b.n	25768 <mqtt_connect+0x54>
   25774:	00025233 	.word	0x00025233
   25778:	00025231 	.word	0x00025231

0002577c <mqtt_init>:

int mqtt_init(struct mqtt_ctx *ctx, enum mqtt_app app_type)
{
	/* So far, only clean session = 1 is supported */
	ctx->clean_session = 1;
   2577c:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
	ctx->connected = 0;
   25780:	f043 0301 	orr.w	r3, r3, #1
   25784:	f36f 0341 	bfc	r3, #1, #1
   25788:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9

	ctx->app_type = app_type;
   2578c:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
	ctx->rcv = mqtt_parser;
   25790:	4b02      	ldr	r3, [pc, #8]	; (2579c <mqtt_init+0x20>)
   25792:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	k_sem_init(&ctx->tls_hs_wait, 0, 1);
#endif

	return 0;
}
   25796:	2000      	movs	r0, #0
   25798:	4770      	bx	lr
   2579a:	bf00      	nop
   2579c:	00025651 	.word	0x00025651

000257a0 <mqtt_close>:

int mqtt_close(struct mqtt_ctx *ctx)
{
	if (!ctx) {
   257a0:	b178      	cbz	r0, 257c2 <mqtt_close+0x22>
{
   257a2:	b510      	push	{r4, lr}
   257a4:	4604      	mov	r4, r0
		return -EFAULT;
	}

	if (ctx->net_app_ctx.is_init) {
   257a6:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   257aa:	f012 0f01 	tst.w	r2, #1
   257ae:	d101      	bne.n	257b4 <mqtt_close+0x14>
		net_app_close(&ctx->net_app_ctx);
		net_app_release(&ctx->net_app_ctx);
	}

	return 0;
   257b0:	2000      	movs	r0, #0
}
   257b2:	bd10      	pop	{r4, pc}
		net_app_close(&ctx->net_app_ctx);
   257b4:	f000 fb92 	bl	25edc <net_app_close>
		net_app_release(&ctx->net_app_ctx);
   257b8:	4620      	mov	r0, r4
   257ba:	f000 fa8d 	bl	25cd8 <net_app_release>
	return 0;
   257be:	2000      	movs	r0, #0
   257c0:	bd10      	pop	{r4, pc}
		return -EFAULT;
   257c2:	f06f 000d 	mvn.w	r0, #13
   257c6:	4770      	bx	lr

000257c8 <net_app_init>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

int net_app_init(const char *app_info, u32_t flags, s32_t timeout)
{
   257c8:	b570      	push	{r4, r5, r6, lr}
   257ca:	460c      	mov	r4, r1
   257cc:	4616      	mov	r6, r2
#define LOOP_DIVIDER 10
	struct net_if *iface = net_if_get_default();
   257ce:	f7f4 fff5 	bl	1a7bc <net_if_get_default>
	int loop = timeout / LOOP_DIVIDER;
   257d2:	4b20      	ldr	r3, [pc, #128]	; (25854 <net_app_init+0x8c>)
   257d4:	fb83 2306 	smull	r2, r3, r3, r6
   257d8:	17f5      	asrs	r5, r6, #31
   257da:	ebc5 05a3 	rsb	r5, r5, r3, asr #2

	if (app_info) {
		NET_INFO("%s", app_info);
	}

	if (!iface) {
   257de:	b380      	cbz	r0, 25842 <net_app_init+0x7a>
		NET_ERR("No network interfaces");
		return -ENODEV;
	}

	if (flags & NET_APP_NEED_IPV6) {
   257e0:	f014 0f02 	tst.w	r4, #2
   257e4:	d114      	bne.n	25810 <net_app_init+0x48>
	int count = 0;
   257e6:	2100      	movs	r1, #0
		count++;
	}

	if (flags & NET_APP_NEED_IPV4) {
   257e8:	f014 0f04 	tst.w	r4, #4
   257ec:	d000      	beq.n	257f0 <net_app_init+0x28>
		count++;
   257ee:	3101      	adds	r1, #1
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   257f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   257f4:	4818      	ldr	r0, [pc, #96]	; (25858 <net_app_init+0x90>)
   257f6:	f002 ff93 	bl	28720 <_impl_k_sem_init>

	setup_dhcpv4(iface);

	setup_ipv6(iface, flags);

	if (timeout < 0) {
   257fa:	2e00      	cmp	r6, #0
   257fc:	db0a      	blt.n	25814 <net_app_init+0x4c>
		count = -1;
	} else if (timeout == 0) {
   257fe:	b166      	cbz	r6, 2581a <net_app_init+0x52>
		count = 0;
	} else {
		count = timeout / 1000 + 1;
   25800:	4a16      	ldr	r2, [pc, #88]	; (2585c <net_app_init+0x94>)
   25802:	fb82 3206 	smull	r3, r2, r2, r6
   25806:	17f3      	asrs	r3, r6, #31
   25808:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   2580c:	3301      	adds	r3, #1
   2580e:	e007      	b.n	25820 <net_app_init+0x58>
		count++;
   25810:	2101      	movs	r1, #1
   25812:	e7e9      	b.n	257e8 <net_app_init+0x20>
		count = -1;
   25814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25818:	e002      	b.n	25820 <net_app_init+0x58>
		count = 0;
   2581a:	2300      	movs	r3, #0
   2581c:	e000      	b.n	25820 <net_app_init+0x58>
   2581e:	4623      	mov	r3, r4
	}

	/* Loop here until until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (count--) {
   25820:	1e5c      	subs	r4, r3, #1
   25822:	b153      	cbz	r3, 2583a <net_app_init+0x72>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   25824:	4629      	mov	r1, r5
   25826:	480e      	ldr	r0, [pc, #56]	; (25860 <net_app_init+0x98>)
   25828:	f002 ff96 	bl	28758 <_impl_k_sem_take>
		if (k_sem_take(&waiter, loop)) {
   2582c:	2800      	cmp	r0, #0
   2582e:	d0f6      	beq.n	2581e <net_app_init+0x56>
	return sem->count;
   25830:	4b09      	ldr	r3, [pc, #36]	; (25858 <net_app_init+0x90>)
   25832:	689a      	ldr	r2, [r3, #8]
   25834:	4623      	mov	r3, r4
			if (!k_sem_count_get(&counter)) {
   25836:	2a00      	cmp	r2, #0
   25838:	d1f2      	bne.n	25820 <net_app_init+0x58>
				break;
			}
		}
	}

	if (!count && timeout) {
   2583a:	b92c      	cbnz	r4, 25848 <net_app_init+0x80>
   2583c:	b936      	cbnz	r6, 2584c <net_app_init+0x84>
		NET_ERR("Timeout while waiting setup");
		return -ETIMEDOUT;
	}

	return 0;
   2583e:	2000      	movs	r0, #0
   25840:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   25842:	f06f 0012 	mvn.w	r0, #18
   25846:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   25848:	2000      	movs	r0, #0
   2584a:	bd70      	pop	{r4, r5, r6, pc}
		return -ETIMEDOUT;
   2584c:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
   25850:	bd70      	pop	{r4, r5, r6, pc}
   25852:	bf00      	nop
   25854:	66666667 	.word	0x66666667
   25858:	20002354 	.word	0x20002354
   2585c:	10624dd3 	.word	0x10624dd3
   25860:	2000cfa4 	.word	0x2000cfa4

00025864 <init_net_app>:

#if defined(CONFIG_NET_APP_AUTO_INIT)
static int init_net_app(struct device *device)
{
   25864:	b508      	push	{r3, lr}
	ret = _net_app_ieee802154_setup();
	if (ret < 0) {
		NET_ERR("Cannot setup IEEE 802.15.4 interface (%d)", ret);
	}

	ret = _net_app_bt_setup();
   25866:	f000 fb5b 	bl	25f20 <_net_app_bt_setup>
	if (IS_ENABLED(CONFIG_NET_APP_NEED_IPV4)) {
		flags |= NET_APP_NEED_IPV4;
	}

	/* Initialize the application automatically if needed */
	ret = net_app_init("Initializing network", flags,
   2586a:	f247 5230 	movw	r2, #30000	; 0x7530
   2586e:	2100      	movs	r1, #0
   25870:	4801      	ldr	r0, [pc, #4]	; (25878 <init_net_app+0x14>)
   25872:	f7ff ffa9 	bl	257c8 <net_app_init>
	if (ret < 0) {
		NET_ERR("Network initialization failed (%d)", ret);
	}

	return ret;
}
   25876:	bd08      	pop	{r3, pc}
   25878:	00030e08 	.word	0x00030e08

0002587c <try_resolve>:
		NET_ERR("Cannot resolve %s (%d)", peer_addr_str, ret);
	}

	return ret;
#endif
}
   2587c:	f06f 0015 	mvn.w	r0, #21
   25880:	4770      	bx	lr

00025882 <set_remote_addr>:
static int set_remote_addr(struct net_app_ctx *ctx,
			   struct sockaddr *remote_addr,
			   const char *peer_addr_str,
			   bool peer_addr_ok,
			   s32_t timeout)
{
   25882:	b510      	push	{r4, lr}
   25884:	4604      	mov	r4, r0
   25886:	4610      	mov	r0, r2
	int ret;

	if (peer_addr_ok && remote_addr->sa_family == AF_INET6) {
   25888:	461a      	mov	r2, r3
   2588a:	b113      	cbz	r3, 25892 <set_remote_addr+0x10>
   2588c:	880b      	ldrh	r3, [r1, #0]
   2588e:	2b0a      	cmp	r3, #10
   25890:	d00e      	beq.n	258b0 <set_remote_addr+0x2e>
#else
		return -EAFNOSUPPORT;
#endif
	}

	if (peer_addr_ok && remote_addr->sa_family == AF_INET) {
   25892:	b112      	cbz	r2, 2589a <set_remote_addr+0x18>
   25894:	880b      	ldrh	r3, [r1, #0]
   25896:	2b02      	cmp	r3, #2
   25898:	d012      	beq.n	258c0 <set_remote_addr+0x3e>
#endif
	}

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	/* Could be hostname, try DNS if configured. */
	ret = try_resolve(ctx, peer_addr_str, DNS_QUERY_TYPE_AAAA, timeout);
   2589a:	9b02      	ldr	r3, [sp, #8]
   2589c:	221c      	movs	r2, #28
   2589e:	4601      	mov	r1, r0
   258a0:	4620      	mov	r0, r4
   258a2:	f7ff ffeb 	bl	2587c <try_resolve>
	if (ret < 0) {
   258a6:	2800      	cmp	r0, #0
   258a8:	db0c      	blt.n	258c4 <set_remote_addr+0x42>
		return ret;
	}

	ctx->default_ctx = &ctx->ipv6;
   258aa:	6364      	str	r4, [r4, #52]	; 0x34
	return 0;
   258ac:	2000      	movs	r0, #0
   258ae:	bd10      	pop	{r4, pc}
		memcpy(&ctx->ipv6.remote, remote_addr,
   258b0:	2218      	movs	r2, #24
   258b2:	f104 001c 	add.w	r0, r4, #28
   258b6:	f7da fd03 	bl	2c0 <memcpy>
		ctx->default_ctx = &ctx->ipv6;
   258ba:	6364      	str	r4, [r4, #52]	; 0x34
		return 0;
   258bc:	2000      	movs	r0, #0
   258be:	bd10      	pop	{r4, pc}
		return -EAFNOSUPPORT;
   258c0:	f06f 0069 	mvn.w	r0, #105	; 0x69
	}

	ctx->default_ctx = &ctx->ipv4;
	return 0;
#endif /* IPV4 && IPV6 */
}
   258c4:	bd10      	pop	{r4, pc}

000258c6 <close_net_ctx>:
}

static void close_net_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	if (ctx->ipv6.ctx) {
   258c6:	6803      	ldr	r3, [r0, #0]
   258c8:	b13b      	cbz	r3, 258da <close_net_ctx+0x14>
{
   258ca:	b510      	push	{r4, lr}
   258cc:	4604      	mov	r4, r0
		net_context_put(ctx->ipv6.ctx);
   258ce:	4618      	mov	r0, r3
   258d0:	f7f6 fcbe 	bl	1c250 <net_context_put>
		ctx->ipv6.ctx = NULL;
   258d4:	2300      	movs	r3, #0
   258d6:	6023      	str	r3, [r4, #0]
   258d8:	bd10      	pop	{r4, pc}
   258da:	4770      	bx	lr

000258dc <get_port_number>:
	if (peer_addr_str[0] == '[') {
   258dc:	7803      	ldrb	r3, [r0, #0]
   258de:	2b5b      	cmp	r3, #91	; 0x5b
   258e0:	d002      	beq.n	258e8 <get_port_number+0xc>
   258e2:	2300      	movs	r3, #0
   258e4:	4619      	mov	r1, r3
   258e6:	e019      	b.n	2591c <get_port_number+0x40>
{
   258e8:	b570      	push	{r4, r5, r6, lr}
   258ea:	460d      	mov	r5, r1
   258ec:	4604      	mov	r4, r0
		ptr = strstr(peer_addr_str, "]:");
   258ee:	4913      	ldr	r1, [pc, #76]	; (2593c <get_port_number+0x60>)
   258f0:	f004 fa6c 	bl	29dcc <strstr>
		if (!ptr) {
   258f4:	4606      	mov	r6, r0
   258f6:	b1f0      	cbz	r0, 25936 <get_port_number+0x5a>
		end = min(INET6_ADDRSTRLEN, ptr - (peer_addr_str + 1));
   258f8:	1c61      	adds	r1, r4, #1
   258fa:	1a44      	subs	r4, r0, r1
   258fc:	2c2e      	cmp	r4, #46	; 0x2e
   258fe:	bfa8      	it	ge
   25900:	242e      	movge	r4, #46	; 0x2e
		memcpy(buf, peer_addr_str + 1, end);
   25902:	4622      	mov	r2, r4
   25904:	4628      	mov	r0, r5
   25906:	f7da fcdb 	bl	2c0 <memcpy>
		buf[end] = '\0';
   2590a:	2100      	movs	r1, #0
   2590c:	5529      	strb	r1, [r5, r4]
		port = strtol(ptr + 2, NULL, 10);
   2590e:	220a      	movs	r2, #10
   25910:	1cb0      	adds	r0, r6, #2
   25912:	f004 fbfb 	bl	2a10c <strtol>
   25916:	b280      	uxth	r0, r0
		return port;
   25918:	bd70      	pop	{r4, r5, r6, pc}
		i++;
   2591a:	3301      	adds	r3, #1
	while (peer_addr_str[i]) {
   2591c:	5cc2      	ldrb	r2, [r0, r3]
   2591e:	b11a      	cbz	r2, 25928 <get_port_number+0x4c>
		if (peer_addr_str[i] == ':') {
   25920:	2a3a      	cmp	r2, #58	; 0x3a
   25922:	d1fa      	bne.n	2591a <get_port_number+0x3e>
			count++;
   25924:	3101      	adds	r1, #1
   25926:	e7f8      	b.n	2591a <get_port_number+0x3e>
	if (count == 1) {
   25928:	2901      	cmp	r1, #1
   2592a:	d001      	beq.n	25930 <get_port_number+0x54>
	return 0;
   2592c:	2000      	movs	r0, #0
   2592e:	4770      	bx	lr
		return -EAFNOSUPPORT;
   25930:	f06f 0069 	mvn.w	r0, #105	; 0x69
   25934:	4770      	bx	lr
			return -EINVAL;
   25936:	f06f 0015 	mvn.w	r0, #21
   2593a:	bd70      	pop	{r4, r5, r6, pc}
   2593c:	00030e20 	.word	0x00030e20

00025940 <_app_connected>:
}

static void _app_connected(struct net_context *net_ctx,
			   int status,
			   void *user_data)
{
   25940:	b538      	push	{r3, r4, r5, lr}
   25942:	460d      	mov	r5, r1
   25944:	4614      	mov	r4, r2
	if (ctx->is_tls) {
		k_sem_give(&ctx->client.connect_wait);
	}
#endif

	net_context_recv(net_ctx, ctx->recv_cb, K_NO_WAIT, ctx);
   25946:	4613      	mov	r3, r2
   25948:	2200      	movs	r2, #0
   2594a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   2594c:	f7f6 ff88 	bl	1c860 <net_context_recv>
		 */
		NET_DBG("Postponing TLS connection cb for ctx %p", ctx);
	} else
#endif
	{
		if (ctx->cb.connect) {
   25950:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   25952:	b11b      	cbz	r3, 2595c <_app_connected+0x1c>
			ctx->cb.connect(ctx, status, ctx->user_data);
   25954:	6f22      	ldr	r2, [r4, #112]	; 0x70
   25956:	4629      	mov	r1, r5
   25958:	4620      	mov	r0, r4
   2595a:	4798      	blx	r3
   2595c:	bd38      	pop	{r3, r4, r5, pc}
	...

00025960 <net_app_init_client>:
{
   25960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25964:	b09a      	sub	sp, #104	; 0x68
   25966:	9e22      	ldr	r6, [sp, #136]	; 0x88
   25968:	f8bd 8090 	ldrh.w	r8, [sp, #144]	; 0x90
	if (!ctx) {
   2596c:	2800      	cmp	r0, #0
   2596e:	f000 80c9 	beq.w	25b04 <net_app_init_client+0x1a4>
   25972:	4604      	mov	r4, r0
	if (ctx->is_init) {
   25974:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   25978:	f010 0f01 	tst.w	r0, #1
   2597c:	f040 80c5 	bne.w	25b0a <net_app_init_client+0x1aa>
   25980:	4699      	mov	r9, r3
   25982:	4617      	mov	r7, r2
   25984:	460d      	mov	r5, r1
	memset(&addr, 0, sizeof(addr));
   25986:	2218      	movs	r2, #24
   25988:	2100      	movs	r1, #0
   2598a:	a802      	add	r0, sp, #8
   2598c:	f003 fea4 	bl	296d8 <memset>
	memset(&remote_addr, 0, sizeof(remote_addr));
   25990:	2218      	movs	r2, #24
   25992:	2100      	movs	r1, #0
   25994:	a808      	add	r0, sp, #32
   25996:	f003 fe9f 	bl	296d8 <memset>
	if (peer_addr) {
   2599a:	2e00      	cmp	r6, #0
   2599c:	d03c      	beq.n	25a18 <net_app_init_client+0xb8>
		memcpy(&remote_addr, peer_addr, sizeof(remote_addr));
   2599e:	2218      	movs	r2, #24
   259a0:	4631      	mov	r1, r6
   259a2:	a808      	add	r0, sp, #32
   259a4:	f7da fc8c 	bl	2c0 <memcpy>
	int ret, addr_ok = false;
   259a8:	f04f 0a00 	mov.w	sl, #0
	if (client_addr) {
   259ac:	f1b9 0f00 	cmp.w	r9, #0
   259b0:	d05e      	beq.n	25a70 <net_app_init_client+0x110>
		memcpy(&addr, client_addr, sizeof(addr));
   259b2:	2218      	movs	r2, #24
   259b4:	4649      	mov	r1, r9
   259b6:	a802      	add	r0, sp, #8
   259b8:	f7da fc82 	bl	2c0 <memcpy>
		if (addr.sa_family != remote_addr.sa_family) {
   259bc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   259c0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   259c4:	429a      	cmp	r2, r3
   259c6:	f040 80a3 	bne.w	25b10 <net_app_init_client+0x1b0>
	ctx->app_type = NET_APP_CLIENT;
   259ca:	2302      	movs	r3, #2
   259cc:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	ctx->user_data = user_data;
   259d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   259d2:	6723      	str	r3, [r4, #112]	; 0x70
	ctx->send_data = net_context_sendto;
   259d4:	4b54      	ldr	r3, [pc, #336]	; (25b28 <net_app_init_client+0x1c8>)
   259d6:	63a3      	str	r3, [r4, #56]	; 0x38
	ctx->recv_cb = _net_app_received;
   259d8:	4b54      	ldr	r3, [pc, #336]	; (25b2c <net_app_init_client+0x1cc>)
   259da:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->proto = proto;
   259dc:	f884 7075 	strb.w	r7, [r4, #117]	; 0x75
	ctx->sock_type = sock_type;
   259e0:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
	ret = _net_app_config_local_ctx(ctx, sock_type, proto, &addr);
   259e4:	ab02      	add	r3, sp, #8
   259e6:	463a      	mov	r2, r7
   259e8:	4629      	mov	r1, r5
   259ea:	4620      	mov	r0, r4
   259ec:	f000 f949 	bl	25c82 <_net_app_config_local_ctx>
	if (ret < 0) {
   259f0:	1e05      	subs	r5, r0, #0
   259f2:	db42      	blt.n	25a7a <net_app_init_client+0x11a>
	if (peer_addr) {
   259f4:	2e00      	cmp	r6, #0
   259f6:	d04c      	beq.n	25a92 <net_app_init_client+0x132>
		if (peer_addr->sa_family == AF_INET) {
   259f8:	8833      	ldrh	r3, [r6, #0]
   259fa:	2b02      	cmp	r3, #2
   259fc:	f000 808b 	beq.w	25b16 <net_app_init_client+0x1b6>
		} else if (peer_addr->sa_family == AF_INET6) {
   25a00:	2b0a      	cmp	r3, #10
   25a02:	d03e      	beq.n	25a82 <net_app_init_client+0x122>
	ctx->is_init = true;
   25a04:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   25a08:	f043 0301 	orr.w	r3, r3, #1
   25a0c:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
}
   25a10:	4628      	mov	r0, r5
   25a12:	b01a      	add	sp, #104	; 0x68
   25a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (peer_addr_str) {
   25a18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   25a1a:	b333      	cbz	r3, 25a6a <net_app_init_client+0x10a>
		ret = get_port_number(peer_addr_str, base_addr_str,
   25a1c:	222f      	movs	r2, #47	; 0x2f
   25a1e:	a90e      	add	r1, sp, #56	; 0x38
   25a20:	4618      	mov	r0, r3
   25a22:	f7ff ff5b 	bl	258dc <get_port_number>
		if (ret > 0) {
   25a26:	2800      	cmp	r0, #0
   25a28:	dd17      	ble.n	25a5a <net_app_init_client+0xfa>
			peer_port = ret;
   25a2a:	fa1f f880 	uxth.w	r8, r0
			base_peer_addr = base_addr_str;
   25a2e:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
		addr_ok = net_ipaddr_parse(base_peer_addr,
   25a32:	4650      	mov	r0, sl
   25a34:	f7da fe64 	bl	700 <strlen>
   25a38:	aa08      	add	r2, sp, #32
   25a3a:	4601      	mov	r1, r0
   25a3c:	4650      	mov	r0, sl
   25a3e:	f7f7 ff72 	bl	1d926 <net_ipaddr_parse>
   25a42:	4682      	mov	sl, r0
		if (remote_addr.sa_family == AF_INET6) {
   25a44:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   25a48:	2b0a      	cmp	r3, #10
   25a4a:	d1af      	bne.n	259ac <net_app_init_client+0x4c>
			net_sin6(&remote_addr)->sin6_port = htons(peer_port);
   25a4c:	ea4f 2318 	mov.w	r3, r8, lsr #8
   25a50:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
   25a54:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
   25a58:	e7a8      	b.n	259ac <net_app_init_client+0x4c>
			strncpy(base_addr_str, peer_addr_str,
   25a5a:	222e      	movs	r2, #46	; 0x2e
   25a5c:	9923      	ldr	r1, [sp, #140]	; 0x8c
   25a5e:	a80e      	add	r0, sp, #56	; 0x38
   25a60:	f004 f818 	bl	29a94 <strncpy>
	const char *base_peer_addr = peer_addr_str;
   25a64:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
   25a68:	e7e3      	b.n	25a32 <net_app_init_client+0xd2>
	int ret, addr_ok = false;
   25a6a:	f04f 0a00 	mov.w	sl, #0
   25a6e:	e79d      	b.n	259ac <net_app_init_client+0x4c>
		addr.sa_family = remote_addr.sa_family;
   25a70:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   25a74:	f8ad 3008 	strh.w	r3, [sp, #8]
   25a78:	e7a7      	b.n	259ca <net_app_init_client+0x6a>
		close_net_ctx(ctx);
   25a7a:	4620      	mov	r0, r4
   25a7c:	f7ff ff23 	bl	258c6 <close_net_ctx>
		goto fail;
   25a80:	e7c6      	b.n	25a10 <net_app_init_client+0xb0>
			memcpy(&ctx->ipv6.remote, peer_addr,
   25a82:	2218      	movs	r2, #24
   25a84:	4631      	mov	r1, r6
   25a86:	f104 001c 	add.w	r0, r4, #28
   25a8a:	f7da fc19 	bl	2c0 <memcpy>
			ctx->default_ctx = &ctx->ipv6;
   25a8e:	6364      	str	r4, [r4, #52]	; 0x34
   25a90:	e7b8      	b.n	25a04 <net_app_init_client+0xa4>
	if (!peer_addr_str) {
   25a92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   25a94:	b363      	cbz	r3, 25af0 <net_app_init_client+0x190>
	ret = set_remote_addr(ctx, &remote_addr, base_addr_str,
   25a96:	9b25      	ldr	r3, [sp, #148]	; 0x94
   25a98:	9300      	str	r3, [sp, #0]
   25a9a:	f11a 0300 	adds.w	r3, sl, #0
   25a9e:	bf18      	it	ne
   25aa0:	2301      	movne	r3, #1
   25aa2:	aa0e      	add	r2, sp, #56	; 0x38
   25aa4:	a908      	add	r1, sp, #32
   25aa6:	4620      	mov	r0, r4
   25aa8:	f7ff feeb 	bl	25882 <set_remote_addr>
	if (ret < 0) {
   25aac:	1e05      	subs	r5, r0, #0
   25aae:	db25      	blt.n	25afc <net_app_init_client+0x19c>
	if (!ctx->default_ctx ||
   25ab0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25ab2:	b39b      	cbz	r3, 25b1c <net_app_init_client+0x1bc>
	    ctx->default_ctx->remote.sa_family == AF_UNSPEC) {
   25ab4:	8b9b      	ldrh	r3, [r3, #28]
	if (!ctx->default_ctx ||
   25ab6:	b3a3      	cbz	r3, 25b22 <net_app_init_client+0x1c2>
	if (ctx->ipv6.remote.sa_family == AF_INET6) {
   25ab8:	8ba3      	ldrh	r3, [r4, #28]
   25aba:	2b0a      	cmp	r3, #10
   25abc:	d1a2      	bne.n	25a04 <net_app_init_client+0xa4>
		ctx->ipv6.local.sa_family = AF_INET6;
   25abe:	4625      	mov	r5, r4
   25ac0:	f825 3f04 	strh.w	r3, [r5, #4]!
		_net_app_set_local_addr(&ctx->ipv6.local, NULL,
   25ac4:	88e2      	ldrh	r2, [r4, #6]
   25ac6:	2100      	movs	r1, #0
   25ac8:	4628      	mov	r0, r5
   25aca:	f000 f8a3 	bl	25c14 <_net_app_set_local_addr>
		ret = _net_app_set_net_ctx(ctx, ctx->ipv6.ctx,
   25ace:	6821      	ldr	r1, [r4, #0]
   25ad0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   25ad4:	9300      	str	r3, [sp, #0]
   25ad6:	2318      	movs	r3, #24
   25ad8:	462a      	mov	r2, r5
   25ada:	4620      	mov	r0, r4
   25adc:	f000 f886 	bl	25bec <_net_app_set_net_ctx>
		if (ret < 0) {
   25ae0:	1e05      	subs	r5, r0, #0
   25ae2:	da8f      	bge.n	25a04 <net_app_init_client+0xa4>
			net_context_put(ctx->ipv6.ctx);
   25ae4:	6820      	ldr	r0, [r4, #0]
   25ae6:	f7f6 fbb3 	bl	1c250 <net_context_put>
			ctx->ipv6.ctx = NULL;
   25aea:	2300      	movs	r3, #0
   25aec:	6023      	str	r3, [r4, #0]
   25aee:	e789      	b.n	25a04 <net_app_init_client+0xa4>
		close_net_ctx(ctx);
   25af0:	4620      	mov	r0, r4
   25af2:	f7ff fee8 	bl	258c6 <close_net_ctx>
		ret = -EINVAL;
   25af6:	f06f 0515 	mvn.w	r5, #21
		goto fail;
   25afa:	e789      	b.n	25a10 <net_app_init_client+0xb0>
		close_net_ctx(ctx);
   25afc:	4620      	mov	r0, r4
   25afe:	f7ff fee2 	bl	258c6 <close_net_ctx>
		goto fail;
   25b02:	e785      	b.n	25a10 <net_app_init_client+0xb0>
		return -EINVAL;
   25b04:	f06f 0515 	mvn.w	r5, #21
   25b08:	e782      	b.n	25a10 <net_app_init_client+0xb0>
		return -EALREADY;
   25b0a:	f06f 0577 	mvn.w	r5, #119	; 0x77
   25b0e:	e77f      	b.n	25a10 <net_app_init_client+0xb0>
			return -EINVAL;
   25b10:	f06f 0515 	mvn.w	r5, #21
   25b14:	e77c      	b.n	25a10 <net_app_init_client+0xb0>
			return -EPROTONOSUPPORT;
   25b16:	f06f 057a 	mvn.w	r5, #122	; 0x7a
   25b1a:	e779      	b.n	25a10 <net_app_init_client+0xb0>
		return -EPFNOSUPPORT;
   25b1c:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   25b20:	e776      	b.n	25a10 <net_app_init_client+0xb0>
   25b22:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   25b26:	e773      	b.n	25a10 <net_app_init_client+0xb0>
   25b28:	0001c81f 	.word	0x0001c81f
   25b2c:	00025bc3 	.word	0x00025bc3

00025b30 <net_app_connect>:
{
	struct net_context *net_ctx;
	bool started = false;
	int ret;

	if (!ctx) {
   25b30:	b1d0      	cbz	r0, 25b68 <net_app_connect+0x38>
{
   25b32:	b570      	push	{r4, r5, r6, lr}
   25b34:	b082      	sub	sp, #8
   25b36:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   25b38:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   25b3c:	f012 0f01 	tst.w	r2, #1
   25b40:	d015      	beq.n	25b6e <net_app_connect+0x3e>
		return -ENOENT;
	}

	if (ctx->app_type != NET_APP_CLIENT) {
   25b42:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
   25b46:	2a02      	cmp	r2, #2
   25b48:	d114      	bne.n	25b74 <net_app_connect+0x44>
   25b4a:	460d      	mov	r5, r1
		return -EINVAL;
	}

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   25b4c:	2100      	movs	r1, #0
   25b4e:	f000 f8df 	bl	25d10 <_net_app_select_net_ctx>
	if (!net_ctx) {
   25b52:	b190      	cbz	r0, 25b7a <net_app_connect+0x4a>
		}
	} else
#endif /* CONFIG_NET_APP_DTLS */
	{
		ret = net_context_connect(net_ctx,
					  &ctx->default_ctx->remote,
   25b54:	6b61      	ldr	r1, [r4, #52]	; 0x34
		ret = net_context_connect(net_ctx,
   25b56:	9401      	str	r4, [sp, #4]
   25b58:	9500      	str	r5, [sp, #0]
   25b5a:	4b09      	ldr	r3, [pc, #36]	; (25b80 <net_app_connect+0x50>)
   25b5c:	2218      	movs	r2, #24
   25b5e:	311c      	adds	r1, #28
   25b60:	f7f6 fd4a 	bl	1c5f8 <net_context_connect>
		}
#endif
	}

	return ret;
}
   25b64:	b002      	add	sp, #8
   25b66:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   25b68:	f06f 0015 	mvn.w	r0, #21
   25b6c:	4770      	bx	lr
		return -ENOENT;
   25b6e:	f06f 0001 	mvn.w	r0, #1
   25b72:	e7f7      	b.n	25b64 <net_app_connect+0x34>
		return -EINVAL;
   25b74:	f06f 0015 	mvn.w	r0, #21
   25b78:	e7f4      	b.n	25b64 <net_app_connect+0x34>
		return -EAFNOSUPPORT;
   25b7a:	f06f 0069 	mvn.w	r0, #105	; 0x69
   25b7e:	e7f1      	b.n	25b64 <net_app_connect+0x34>
   25b80:	00025941 	.word	0x00025941

00025b84 <select_default_ctx>:

#if defined(CONFIG_NET_APP_SERVER) || defined(CONFIG_NET_APP_CLIENT)
static void select_default_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	ctx->default_ctx = &ctx->ipv6;
   25b84:	6340      	str	r0, [r0, #52]	; 0x34
   25b86:	4770      	bx	lr

00025b88 <_app_send>:
	struct net_app_ctx *ctx = user_data;

	ARG_UNUSED(ctx);

#if defined(CONFIG_NET_APP_CLIENT)
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   25b88:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   25b8c:	2802      	cmp	r0, #2
   25b8e:	d000      	beq.n	25b92 <_app_send+0xa>
   25b90:	4770      	bx	lr
{
   25b92:	b510      	push	{r4, lr}
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   25b94:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   25b96:	b114      	cbz	r4, 25b9e <_app_send+0x16>
   25b98:	4618      	mov	r0, r3
		ctx->cb.send(ctx, status, token, ctx->user_data);
   25b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   25b9c:	47a0      	blx	r4
   25b9e:	bd10      	pop	{r4, pc}

00025ba0 <setup_ipv6_ctx>:
{
   25ba0:	b510      	push	{r4, lr}
   25ba2:	4604      	mov	r4, r0
	ret = net_context_get(AF_INET6, sock_type, proto, &ctx->ipv6.ctx);
   25ba4:	4603      	mov	r3, r0
   25ba6:	200a      	movs	r0, #10
   25ba8:	f7f6 f8e6 	bl	1bd78 <net_context_get>
	if (ret < 0) {
   25bac:	2800      	cmp	r0, #0
   25bae:	db05      	blt.n	25bbc <setup_ipv6_ctx+0x1c>
	net_context_setup_pools(ctx->ipv6.ctx, ctx->tx_slab,
   25bb0:	6823      	ldr	r3, [r4, #0]
   25bb2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   25bb4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
					   net_pkt_get_slab_func_t tx_slab,
					   net_pkt_get_pool_func_t data_pool)
{
	NET_ASSERT(context);

	context->tx_slab = tx_slab;
   25bb6:	63d9      	str	r1, [r3, #60]	; 0x3c
	context->data_pool = data_pool;
   25bb8:	641a      	str	r2, [r3, #64]	; 0x40
}
   25bba:	bd10      	pop	{r4, pc}
		ctx->ipv6.ctx = NULL;
   25bbc:	2300      	movs	r3, #0
   25bbe:	6023      	str	r3, [r4, #0]
		return ret;
   25bc0:	bd10      	pop	{r4, pc}

00025bc2 <_net_app_received>:
	if (ctx->app_type == NET_APP_CLIENT) {
   25bc2:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   25bc6:	2802      	cmp	r0, #2
   25bc8:	d000      	beq.n	25bcc <_net_app_received+0xa>
   25bca:	4770      	bx	lr
{
   25bcc:	b538      	push	{r3, r4, r5, lr}
   25bce:	4618      	mov	r0, r3
   25bd0:	4614      	mov	r4, r2
		if (!pkt) {
   25bd2:	b121      	cbz	r1, 25bde <_net_app_received+0x1c>
		if (ctx->cb.recv) {
   25bd4:	6c1d      	ldr	r5, [r3, #64]	; 0x40
   25bd6:	b10d      	cbz	r5, 25bdc <_net_app_received+0x1a>
			ctx->cb.recv(ctx, pkt, status, ctx->user_data);
   25bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   25bda:	47a8      	blx	r5
   25bdc:	bd38      	pop	{r3, r4, r5, pc}
			if (ctx->cb.close) {
   25bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   25be0:	2b00      	cmp	r3, #0
   25be2:	d0fb      	beq.n	25bdc <_net_app_received+0x1a>
				ctx->cb.close(ctx, status, ctx->user_data);
   25be4:	6f02      	ldr	r2, [r0, #112]	; 0x70
   25be6:	4621      	mov	r1, r4
   25be8:	4798      	blx	r3
   25bea:	bd38      	pop	{r3, r4, r5, pc}

00025bec <_net_app_set_net_ctx>:
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   25bec:	b161      	cbz	r1, 25c08 <_net_app_set_net_ctx+0x1c>
{
   25bee:	b510      	push	{r4, lr}
   25bf0:	4614      	mov	r4, r2
   25bf2:	4608      	mov	r0, r1
	return context->flags & NET_CONTEXT_IN_USE;
   25bf4:	f891 205d 	ldrb.w	r2, [r1, #93]	; 0x5d
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   25bf8:	f012 0f01 	tst.w	r2, #1
   25bfc:	d007      	beq.n	25c0e <_net_app_set_net_ctx+0x22>
   25bfe:	461a      	mov	r2, r3
   25c00:	4621      	mov	r1, r4
	ret = net_context_bind(net_ctx, addr, socklen);
   25c02:	f7f6 fb67 	bl	1c2d4 <net_context_bind>
	return ret;
   25c06:	bd10      	pop	{r4, pc}
		return -ENOENT;
   25c08:	f06f 0001 	mvn.w	r0, #1
   25c0c:	4770      	bx	lr
   25c0e:	f06f 0001 	mvn.w	r0, #1
}
   25c12:	bd10      	pop	{r4, pc}

00025c14 <_net_app_set_local_addr>:
{
   25c14:	b570      	push	{r4, r5, r6, lr}
   25c16:	b084      	sub	sp, #16
   25c18:	4604      	mov	r4, r0
	if (myaddr) {
   25c1a:	b169      	cbz	r1, 25c38 <_net_app_set_local_addr+0x24>
		if (addr->sa_family == AF_INET) {
   25c1c:	8800      	ldrh	r0, [r0, #0]
   25c1e:	2802      	cmp	r0, #2
   25c20:	d029      	beq.n	25c76 <_net_app_set_local_addr+0x62>
		} else if (addr->sa_family == AF_INET6) {
   25c22:	280a      	cmp	r0, #10
   25c24:	d12a      	bne.n	25c7c <_net_app_set_local_addr+0x68>
			net_sin6(addr)->sin6_port = htons(port);
   25c26:	0a13      	lsrs	r3, r2, #8
   25c28:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   25c2c:	8062      	strh	r2, [r4, #2]
		return net_addr_pton(addr->sa_family, myaddr, inaddr);
   25c2e:	1d22      	adds	r2, r4, #4
   25c30:	f7f7 fcc3 	bl	1d5ba <net_addr_pton>
}
   25c34:	b004      	add	sp, #16
   25c36:	bd70      	pop	{r4, r5, r6, pc}
	if (addr->sa_family == AF_INET6) {
   25c38:	8803      	ldrh	r3, [r0, #0]
   25c3a:	2b0a      	cmp	r3, #10
   25c3c:	d003      	beq.n	25c46 <_net_app_set_local_addr+0x32>
	} else if (addr->sa_family == AF_INET) {
   25c3e:	2b02      	cmp	r3, #2
   25c40:	d016      	beq.n	25c70 <_net_app_set_local_addr+0x5c>
	return 0;
   25c42:	2000      	movs	r0, #0
   25c44:	e7f6      	b.n	25c34 <_net_app_set_local_addr+0x20>
		net_ipaddr_copy(&net_sin6(addr)->sin6_addr,
   25c46:	f7f9 f959 	bl	1eefc <net_ipv6_unspecified_address>
   25c4a:	4601      	mov	r1, r0
   25c4c:	2000      	movs	r0, #0
   25c4e:	f7f5 faf9 	bl	1b244 <net_if_ipv6_select_src_addr>
   25c52:	4603      	mov	r3, r0
   25c54:	466d      	mov	r5, sp
   25c56:	6800      	ldr	r0, [r0, #0]
   25c58:	6859      	ldr	r1, [r3, #4]
   25c5a:	689a      	ldr	r2, [r3, #8]
   25c5c:	68db      	ldr	r3, [r3, #12]
   25c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   25c60:	466d      	mov	r5, sp
   25c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   25c64:	6060      	str	r0, [r4, #4]
   25c66:	60a1      	str	r1, [r4, #8]
   25c68:	60e2      	str	r2, [r4, #12]
   25c6a:	6123      	str	r3, [r4, #16]
	return 0;
   25c6c:	2000      	movs	r0, #0
   25c6e:	e7e1      	b.n	25c34 <_net_app_set_local_addr+0x20>
		return -EPFNOSUPPORT;
   25c70:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25c74:	e7de      	b.n	25c34 <_net_app_set_local_addr+0x20>
			return -EPFNOSUPPORT;
   25c76:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25c7a:	e7db      	b.n	25c34 <_net_app_set_local_addr+0x20>
			return -EAFNOSUPPORT;
   25c7c:	f06f 0069 	mvn.w	r0, #105	; 0x69
   25c80:	e7d8      	b.n	25c34 <_net_app_set_local_addr+0x20>

00025c82 <_net_app_config_local_ctx>:
{
   25c82:	b538      	push	{r3, r4, r5, lr}
   25c84:	4604      	mov	r4, r0
	if (!addr) {
   25c86:	b163      	cbz	r3, 25ca2 <_net_app_config_local_ctx+0x20>
		if (addr->sa_family == AF_INET6) {
   25c88:	881b      	ldrh	r3, [r3, #0]
   25c8a:	2b0a      	cmp	r3, #10
   25c8c:	d015      	beq.n	25cba <_net_app_config_local_ctx+0x38>
		} else if (addr->sa_family == AF_INET) {
   25c8e:	2b02      	cmp	r3, #2
   25c90:	d01c      	beq.n	25ccc <_net_app_config_local_ctx+0x4a>
		} else if (addr->sa_family == AF_UNSPEC) {
   25c92:	b9f3      	cbnz	r3, 25cd2 <_net_app_config_local_ctx+0x50>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   25c94:	4620      	mov	r0, r4
   25c96:	f7ff ff83 	bl	25ba0 <setup_ipv6_ctx>
   25c9a:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   25c9c:	6364      	str	r4, [r4, #52]	; 0x34
}
   25c9e:	4628      	mov	r0, r5
   25ca0:	bd38      	pop	{r3, r4, r5, pc}
		if (ctx->ipv6.local.sa_family == AF_INET6 ||
   25ca2:	8883      	ldrh	r3, [r0, #4]
   25ca4:	2b0a      	cmp	r3, #10
   25ca6:	d000      	beq.n	25caa <_net_app_config_local_ctx+0x28>
   25ca8:	b96b      	cbnz	r3, 25cc6 <_net_app_config_local_ctx+0x44>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   25caa:	4620      	mov	r0, r4
   25cac:	f7ff ff78 	bl	25ba0 <setup_ipv6_ctx>
   25cb0:	4605      	mov	r5, r0
		select_default_ctx(ctx);
   25cb2:	4620      	mov	r0, r4
   25cb4:	f7ff ff66 	bl	25b84 <select_default_ctx>
   25cb8:	e7f1      	b.n	25c9e <_net_app_config_local_ctx+0x1c>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   25cba:	4620      	mov	r0, r4
   25cbc:	f7ff ff70 	bl	25ba0 <setup_ipv6_ctx>
   25cc0:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   25cc2:	6364      	str	r4, [r4, #52]	; 0x34
   25cc4:	e7eb      	b.n	25c9e <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   25cc6:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   25cca:	e7e8      	b.n	25c9e <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   25ccc:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   25cd0:	e7e5      	b.n	25c9e <_net_app_config_local_ctx+0x1c>
			ret = -EINVAL;
   25cd2:	f06f 0515 	mvn.w	r5, #21
	return ret;
   25cd6:	e7e2      	b.n	25c9e <_net_app_config_local_ctx+0x1c>

00025cd8 <net_app_release>:
	if (!ctx) {
   25cd8:	b1a0      	cbz	r0, 25d04 <net_app_release+0x2c>
{
   25cda:	b510      	push	{r4, lr}
   25cdc:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   25cde:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   25ce2:	f013 0f01 	tst.w	r3, #1
   25ce6:	d010      	beq.n	25d0a <net_app_release+0x32>
	if (ctx->ipv6.ctx) {
   25ce8:	6800      	ldr	r0, [r0, #0]
   25cea:	b118      	cbz	r0, 25cf4 <net_app_release+0x1c>
		net_context_put(ctx->ipv6.ctx);
   25cec:	f7f6 fab0 	bl	1c250 <net_context_put>
		ctx->ipv6.ctx = NULL;
   25cf0:	2300      	movs	r3, #0
   25cf2:	6023      	str	r3, [r4, #0]
	ctx->is_init = false;
   25cf4:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   25cf8:	f36f 0300 	bfc	r3, #0, #1
   25cfc:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
	return 0;
   25d00:	2000      	movs	r0, #0
   25d02:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25d04:	f06f 0015 	mvn.w	r0, #21
   25d08:	4770      	bx	lr
		return -ENOENT;
   25d0a:	f06f 0001 	mvn.w	r0, #1
}
   25d0e:	bd10      	pop	{r4, pc}

00025d10 <_net_app_select_net_ctx>:
	if (ctx->app_type == NET_APP_CLIENT) {
   25d10:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   25d14:	2b02      	cmp	r3, #2
   25d16:	d128      	bne.n	25d6a <_net_app_select_net_ctx+0x5a>
	if (ctx->proto == IPPROTO_UDP) {
   25d18:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   25d1c:	2b11      	cmp	r3, #17
   25d1e:	d009      	beq.n	25d34 <_net_app_select_net_ctx+0x24>
		if (!dst) {
   25d20:	b1c1      	cbz	r1, 25d54 <_net_app_select_net_ctx+0x44>
			if (dst->sa_family == AF_INET) {
   25d22:	880b      	ldrh	r3, [r1, #0]
   25d24:	2b02      	cmp	r3, #2
   25d26:	d01c      	beq.n	25d62 <_net_app_select_net_ctx+0x52>
			if (dst->sa_family == AF_INET6) {
   25d28:	2b0a      	cmp	r3, #10
   25d2a:	d016      	beq.n	25d5a <_net_app_select_net_ctx+0x4a>
			if (dst->sa_family == AF_UNSPEC) {
   25d2c:	b9db      	cbnz	r3, 25d66 <_net_app_select_net_ctx+0x56>
				return ctx->default_ctx->ctx;
   25d2e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   25d30:	6818      	ldr	r0, [r3, #0]
   25d32:	4770      	bx	lr
		if (!dst) {
   25d34:	b131      	cbz	r1, 25d44 <_net_app_select_net_ctx+0x34>
			if (ctx->is_tls) {
   25d36:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   25d3a:	f013 0f02 	tst.w	r3, #2
   25d3e:	d0f0      	beq.n	25d22 <_net_app_select_net_ctx+0x12>
				return NULL;
   25d40:	2000      	movs	r0, #0
   25d42:	4770      	bx	lr
			if (ctx->is_tls) {
   25d44:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   25d48:	f013 0f02 	tst.w	r3, #2
   25d4c:	d107      	bne.n	25d5e <_net_app_select_net_ctx+0x4e>
				return ctx->default_ctx->ctx;
   25d4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   25d50:	6818      	ldr	r0, [r3, #0]
   25d52:	4770      	bx	lr
			return ctx->default_ctx->ctx;
   25d54:	6b43      	ldr	r3, [r0, #52]	; 0x34
   25d56:	6818      	ldr	r0, [r3, #0]
   25d58:	4770      	bx	lr
				return ctx->ipv6.ctx;
   25d5a:	6800      	ldr	r0, [r0, #0]
   25d5c:	4770      	bx	lr
				return NULL;
   25d5e:	2000      	movs	r0, #0
   25d60:	4770      	bx	lr
				return NULL;
   25d62:	2000      	movs	r0, #0
   25d64:	4770      	bx	lr
	return NULL;
   25d66:	2000      	movs	r0, #0
   25d68:	4770      	bx	lr
	struct net_context *net_ctx = NULL;
   25d6a:	2000      	movs	r0, #0
}
   25d6c:	4770      	bx	lr

00025d6e <net_app_set_cb>:
	if (!ctx) {
   25d6e:	b170      	cbz	r0, 25d8e <net_app_set_cb+0x20>
{
   25d70:	b410      	push	{r4}
   25d72:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   25d74:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   25d78:	f010 0f01 	tst.w	r0, #1
   25d7c:	d00a      	beq.n	25d94 <net_app_set_cb+0x26>
	ctx->cb.connect = connect_cb;
   25d7e:	63e1      	str	r1, [r4, #60]	; 0x3c
	ctx->cb.recv = recv_cb;
   25d80:	6422      	str	r2, [r4, #64]	; 0x40
	ctx->cb.send = send_cb;
   25d82:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->cb.close = close_cb;
   25d84:	9b01      	ldr	r3, [sp, #4]
   25d86:	64a3      	str	r3, [r4, #72]	; 0x48
	return 0;
   25d88:	2000      	movs	r0, #0
}
   25d8a:	bc10      	pop	{r4}
   25d8c:	4770      	bx	lr
		return -EINVAL;
   25d8e:	f06f 0015 	mvn.w	r0, #21
   25d92:	4770      	bx	lr
		return -ENOENT;
   25d94:	f06f 0001 	mvn.w	r0, #1
   25d98:	e7f7      	b.n	25d8a <net_app_set_cb+0x1c>
	...

00025d9c <net_app_send_pkt>:
		     s32_t timeout,
		     void *user_data_send)
{
	int ret;

	if (!ctx) {
   25d9c:	2800      	cmp	r0, #0
   25d9e:	d064      	beq.n	25e6a <net_app_send_pkt+0xce>
{
   25da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25da4:	b08a      	sub	sp, #40	; 0x28
   25da6:	460d      	mov	r5, r1
   25da8:	4616      	mov	r6, r2
   25daa:	461f      	mov	r7, r3
   25dac:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   25dae:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   25db2:	f013 0f01 	tst.w	r3, #1
   25db6:	d05b      	beq.n	25e70 <net_app_send_pkt+0xd4>
	return pkt->appdatalen;
   25db8:	8e08      	ldrh	r0, [r1, #48]	; 0x30
	 * will be put back just before sending the packet. Normally the
	 * data that is sent does not contain IP header, but if the caller
	 * replies the packet directly back, the IP header could be there
	 * at this point.
	 */
	if (net_pkt_appdatalen(pkt) > 0) {
   25dba:	b188      	cbz	r0, 25de0 <net_app_send_pkt+0x44>
		int header_len;

		header_len = net_buf_frags_len(pkt->frags) -
   25dbc:	f8d1 e008 	ldr.w	lr, [r1, #8]
   25dc0:	4673      	mov	r3, lr
	size_t bytes = 0;
   25dc2:	2100      	movs	r1, #0
   25dc4:	e002      	b.n	25dcc <net_app_send_pkt+0x30>
		bytes += buf->len;
   25dc6:	899a      	ldrh	r2, [r3, #12]
   25dc8:	4411      	add	r1, r2
		buf = buf->frags;
   25dca:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   25dcc:	2b00      	cmp	r3, #0
   25dce:	d1fa      	bne.n	25dc6 <net_app_send_pkt+0x2a>
   25dd0:	1a09      	subs	r1, r1, r0
			net_pkt_appdatalen(pkt);
		if (header_len > 0) {
   25dd2:	2900      	cmp	r1, #0
   25dd4:	dd0d      	ble.n	25df2 <net_app_send_pkt+0x56>
			net_buf_pull(pkt->frags, header_len);
   25dd6:	f10e 0008 	add.w	r0, lr, #8
   25dda:	f7f4 f9f8 	bl	1a1ce <net_buf_simple_pull>
   25dde:	e008      	b.n	25df2 <net_app_send_pkt+0x56>
		}
	} else {
		net_pkt_set_appdatalen(pkt, net_buf_frags_len(pkt->frags));
   25de0:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   25de2:	2200      	movs	r2, #0
   25de4:	e002      	b.n	25dec <net_app_send_pkt+0x50>
		bytes += buf->len;
   25de6:	8999      	ldrh	r1, [r3, #12]
   25de8:	440a      	add	r2, r1
		buf = buf->frags;
   25dea:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   25dec:	2b00      	cmp	r3, #0
   25dee:	d1fa      	bne.n	25de6 <net_app_send_pkt+0x4a>
	pkt->appdatalen = len;
   25df0:	862a      	strh	r2, [r5, #48]	; 0x30
	}

	if (ctx->proto == IPPROTO_UDP) {
   25df2:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   25df6:	2b11      	cmp	r3, #17
   25df8:	d00e      	beq.n	25e18 <net_app_send_pkt+0x7c>
				}
			}
		}
	}

	ret = ctx->send_data(pkt, dst, dst_len, _app_send, timeout,
   25dfa:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
   25dfe:	9402      	str	r4, [sp, #8]
   25e00:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25e02:	9301      	str	r3, [sp, #4]
   25e04:	9b10      	ldr	r3, [sp, #64]	; 0x40
   25e06:	9300      	str	r3, [sp, #0]
   25e08:	4b21      	ldr	r3, [pc, #132]	; (25e90 <net_app_send_pkt+0xf4>)
   25e0a:	463a      	mov	r2, r7
   25e0c:	4631      	mov	r1, r6
   25e0e:	4628      	mov	r0, r5
   25e10:	47c0      	blx	r8
	if (ret < 0) {
		NET_DBG("Cannot send to peer (%d)", ret);
	}

	return ret;
}
   25e12:	b00a      	add	sp, #40	; 0x28
   25e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!dst) {
   25e18:	b1de      	cbz	r6, 25e52 <net_app_send_pkt+0xb6>
	return pkt->family;
   25e1a:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   25e1e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   25e22:	2b02      	cmp	r3, #2
   25e24:	d02d      	beq.n	25e82 <net_app_send_pkt+0xe6>
				if (net_pkt_family(pkt) == AF_INET6) {
   25e26:	2b0a      	cmp	r3, #10
   25e28:	d12e      	bne.n	25e88 <net_app_send_pkt+0xec>
					net_ipaddr_copy(
   25e2a:	af04      	add	r7, sp, #16
   25e2c:	6830      	ldr	r0, [r6, #0]
   25e2e:	6871      	ldr	r1, [r6, #4]
   25e30:	68b2      	ldr	r2, [r6, #8]
   25e32:	68f3      	ldr	r3, [r6, #12]
   25e34:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   25e36:	6930      	ldr	r0, [r6, #16]
   25e38:	6971      	ldr	r1, [r6, #20]
   25e3a:	c703      	stmia	r7!, {r0, r1}
   25e3c:	af04      	add	r7, sp, #16
   25e3e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   25e40:	61e0      	str	r0, [r4, #28]
   25e42:	6221      	str	r1, [r4, #32]
   25e44:	6262      	str	r2, [r4, #36]	; 0x24
   25e46:	62a3      	str	r3, [r4, #40]	; 0x28
   25e48:	cf03      	ldmia	r7!, {r0, r1}
   25e4a:	62e0      	str	r0, [r4, #44]	; 0x2c
   25e4c:	6321      	str	r1, [r4, #48]	; 0x30
					dst_len = sizeof(struct sockaddr_in6);
   25e4e:	2718      	movs	r7, #24
   25e50:	e7d3      	b.n	25dfa <net_app_send_pkt+0x5e>
   25e52:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   25e56:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   25e5a:	2b02      	cmp	r3, #2
   25e5c:	d00b      	beq.n	25e76 <net_app_send_pkt+0xda>
				if (net_pkt_family(pkt) == AF_INET6) {
   25e5e:	2b0a      	cmp	r3, #10
   25e60:	d10c      	bne.n	25e7c <net_app_send_pkt+0xe0>
					dst = &ctx->ipv6.remote;
   25e62:	f104 061c 	add.w	r6, r4, #28
					dst_len = sizeof(struct sockaddr_in6);
   25e66:	2718      	movs	r7, #24
   25e68:	e7c7      	b.n	25dfa <net_app_send_pkt+0x5e>
		return -EINVAL;
   25e6a:	f06f 0015 	mvn.w	r0, #21
   25e6e:	4770      	bx	lr
		return -ENOENT;
   25e70:	f06f 0001 	mvn.w	r0, #1
   25e74:	e7cd      	b.n	25e12 <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   25e76:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25e7a:	e7ca      	b.n	25e12 <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   25e7c:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25e80:	e7c7      	b.n	25e12 <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   25e82:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25e86:	e7c4      	b.n	25e12 <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   25e88:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25e8c:	e7c1      	b.n	25e12 <net_app_send_pkt+0x76>
   25e8e:	bf00      	nop
   25e90:	00025b89 	.word	0x00025b89

00025e94 <net_app_get_net_pkt>:
}

struct net_pkt *net_app_get_net_pkt(struct net_app_ctx *ctx,
				    sa_family_t family,
				    s32_t timeout)
{
   25e94:	b510      	push	{r4, lr}
   25e96:	b086      	sub	sp, #24
	struct net_context *net_ctx;
	struct sockaddr dst = { 0 };
   25e98:	2300      	movs	r3, #0
   25e9a:	9300      	str	r3, [sp, #0]
   25e9c:	9301      	str	r3, [sp, #4]
   25e9e:	9302      	str	r3, [sp, #8]
   25ea0:	9303      	str	r3, [sp, #12]
   25ea2:	9304      	str	r3, [sp, #16]
   25ea4:	9305      	str	r3, [sp, #20]

	if (!ctx) {
   25ea6:	b198      	cbz	r0, 25ed0 <net_app_get_net_pkt+0x3c>
   25ea8:	4603      	mov	r3, r0
		return NULL;
	}

	if (!ctx->is_init) {
   25eaa:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   25eae:	f010 0f01 	tst.w	r0, #1
   25eb2:	d00f      	beq.n	25ed4 <net_app_get_net_pkt+0x40>
   25eb4:	4618      	mov	r0, r3
   25eb6:	4614      	mov	r4, r2
   25eb8:	460b      	mov	r3, r1
		return NULL;
	}

	dst.sa_family = family;
   25eba:	a906      	add	r1, sp, #24
   25ebc:	f821 3d18 	strh.w	r3, [r1, #-24]!

	net_ctx = _net_app_select_net_ctx(ctx, &dst);
   25ec0:	f7ff ff26 	bl	25d10 <_net_app_select_net_ctx>
	if (!net_ctx) {
   25ec4:	b140      	cbz	r0, 25ed8 <net_app_get_net_pkt+0x44>
		return NULL;
	}

	return net_pkt_get_tx(net_ctx, timeout);
   25ec6:	4621      	mov	r1, r4
   25ec8:	f7f6 fe24 	bl	1cb14 <net_pkt_get_tx>
}
   25ecc:	b006      	add	sp, #24
   25ece:	bd10      	pop	{r4, pc}
		return NULL;
   25ed0:	2000      	movs	r0, #0
   25ed2:	e7fb      	b.n	25ecc <net_app_get_net_pkt+0x38>
		return NULL;
   25ed4:	2000      	movs	r0, #0
   25ed6:	e7f9      	b.n	25ecc <net_app_get_net_pkt+0x38>
		return NULL;
   25ed8:	2000      	movs	r0, #0
   25eda:	e7f7      	b.n	25ecc <net_app_get_net_pkt+0x38>

00025edc <net_app_close>:

int net_app_close(struct net_app_ctx *ctx)
{
	struct net_context *net_ctx;

	if (!ctx) {
   25edc:	b1c0      	cbz	r0, 25f10 <net_app_close+0x34>
{
   25ede:	b538      	push	{r3, r4, r5, lr}
   25ee0:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   25ee2:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   25ee6:	f013 0f01 	tst.w	r3, #1
   25eea:	d014      	beq.n	25f16 <net_app_close+0x3a>
		ctx->tls.close_requested = true;
		return -EINPROGRESS;
	}
#endif

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   25eec:	2100      	movs	r1, #0
   25eee:	f7ff ff0f 	bl	25d10 <_net_app_select_net_ctx>
   25ef2:	4605      	mov	r5, r0

	if (ctx->cb.close) {
   25ef4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   25ef6:	b11b      	cbz	r3, 25f00 <net_app_close+0x24>
		ctx->cb.close(ctx, 0, ctx->user_data);
   25ef8:	6f22      	ldr	r2, [r4, #112]	; 0x70
   25efa:	2100      	movs	r1, #0
   25efc:	4620      	mov	r0, r4
   25efe:	4798      	blx	r3
			}
		}
	}
#endif

	if (net_ctx) {
   25f00:	b165      	cbz	r5, 25f1c <net_app_close+0x40>
		net_ctx->net_app = NULL;
   25f02:	2400      	movs	r4, #0
   25f04:	666c      	str	r4, [r5, #100]	; 0x64
		net_context_put(net_ctx);
   25f06:	4628      	mov	r0, r5
   25f08:	f7f6 f9a2 	bl	1c250 <net_context_put>
	}

	return 0;
   25f0c:	4620      	mov	r0, r4
   25f0e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   25f10:	f06f 0015 	mvn.w	r0, #21
   25f14:	4770      	bx	lr
		return -ENOENT;
   25f16:	f06f 0001 	mvn.w	r0, #1
   25f1a:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   25f1c:	2000      	movs	r0, #0
}
   25f1e:	bd38      	pop	{r3, r4, r5, pc}

00025f20 <_net_app_bt_setup>:

static struct bt_gatt_service ipss_svc = BT_GATT_SERVICE(attrs);
#endif

int _net_app_bt_setup(void)
{
   25f20:	b510      	push	{r4, lr}
	struct net_if *iface;
	struct device *dev;
	int err;

	err = bt_enable(NULL);
   25f22:	2000      	movs	r0, #0
   25f24:	f7df fdec 	bl	5b00 <bt_enable>
	if (err < 0 && err != -EALREADY) {
   25f28:	1e03      	subs	r3, r0, #0
   25f2a:	db14      	blt.n	25f56 <_net_app_bt_setup+0x36>
		return err;
	}

	dev = device_get_binding("net_bt");
   25f2c:	4810      	ldr	r0, [pc, #64]	; (25f70 <_net_app_bt_setup+0x50>)
   25f2e:	f001 f939 	bl	271a4 <device_get_binding>
	if (!dev) {
   25f32:	b1b8      	cbz	r0, 25f64 <_net_app_bt_setup+0x44>
		return -ENODEV;
	}

	iface = net_if_lookup_by_dev(dev);
   25f34:	f7f4 fc30 	bl	1a798 <net_if_lookup_by_dev>
	if (!iface) {
   25f38:	4604      	mov	r4, r0
   25f3a:	b1b0      	cbz	r0, 25f6a <_net_app_bt_setup+0x4a>
		return -EINVAL;
	}

#if defined(CONFIG_NET_APP_BT_NODE)
	bt_gatt_service_register(&ipss_svc);
   25f3c:	480d      	ldr	r0, [pc, #52]	; (25f74 <_net_app_bt_setup+0x54>)
   25f3e:	f7e3 fcf9 	bl	9934 <bt_gatt_service_register>

	if (net_mgmt(NET_REQUEST_BT_ADVERTISE, iface, ADV_STR,
   25f42:	2303      	movs	r3, #3
   25f44:	4a0c      	ldr	r2, [pc, #48]	; (25f78 <_net_app_bt_setup+0x58>)
   25f46:	4621      	mov	r1, r4
   25f48:	480c      	ldr	r0, [pc, #48]	; (25f7c <_net_app_bt_setup+0x5c>)
   25f4a:	f7f7 fe6b 	bl	1dc24 <net_mgmt_NET_REQUEST_BT_ADVERTISE>
   25f4e:	4603      	mov	r3, r0
   25f50:	b928      	cbnz	r0, 25f5e <_net_app_bt_setup+0x3e>
		return -EINVAL;
	}
#endif

	return 0;
}
   25f52:	4618      	mov	r0, r3
   25f54:	bd10      	pop	{r4, pc}
	if (err < 0 && err != -EALREADY) {
   25f56:	f113 0f78 	cmn.w	r3, #120	; 0x78
   25f5a:	d1fa      	bne.n	25f52 <_net_app_bt_setup+0x32>
   25f5c:	e7e6      	b.n	25f2c <_net_app_bt_setup+0xc>
		return -EINVAL;
   25f5e:	f06f 0315 	mvn.w	r3, #21
   25f62:	e7f6      	b.n	25f52 <_net_app_bt_setup+0x32>
		return -ENODEV;
   25f64:	f06f 0312 	mvn.w	r3, #18
   25f68:	e7f3      	b.n	25f52 <_net_app_bt_setup+0x32>
		return -EINVAL;
   25f6a:	f06f 0315 	mvn.w	r3, #21
   25f6e:	e7f0      	b.n	25f52 <_net_app_bt_setup+0x32>
   25f70:	0002fafc 	.word	0x0002fafc
   25f74:	2000c414 	.word	0x2000c414
   25f78:	0002ff24 	.word	0x0002ff24
   25f7c:	61550001 	.word	0x61550001

00025f80 <shell_run>:
#include <init.h>

#define SHELL_PROMPT "shell> "

int shell_run(struct device *dev)
{
   25f80:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	shell_init(SHELL_PROMPT);
   25f82:	4802      	ldr	r0, [pc, #8]	; (25f8c <shell_run+0xc>)
   25f84:	f000 fbbe 	bl	26704 <shell_init>
	return 0;
}
   25f88:	2000      	movs	r0, #0
   25f8a:	bd08      	pop	{r3, pc}
   25f8c:	00030e24 	.word	0x00030e24

00025f90 <get_prompt>:

static shell_cmd_function_t app_cmd_handler;
static shell_prompt_function_t app_prompt_handler;

static const char *get_prompt(void)
{
   25f90:	b508      	push	{r3, lr}
	if (app_prompt_handler) {
   25f92:	4b0f      	ldr	r3, [pc, #60]	; (25fd0 <get_prompt+0x40>)
   25f94:	681b      	ldr	r3, [r3, #0]
   25f96:	b123      	cbz	r3, 25fa2 <get_prompt+0x12>
		const char *str;

		str = app_prompt_handler();
   25f98:	4798      	blx	r3
		if (str) {
   25f9a:	4603      	mov	r3, r0
   25f9c:	b108      	cbz	r0, 25fa2 <get_prompt+0x12>

		return default_module_prompt;
	}

	return prompt;
}
   25f9e:	4618      	mov	r0, r3
   25fa0:	bd08      	pop	{r3, pc}
	if (default_module != -1) {
   25fa2:	4b0c      	ldr	r3, [pc, #48]	; (25fd4 <get_prompt+0x44>)
   25fa4:	681b      	ldr	r3, [r3, #0]
   25fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   25faa:	d00c      	beq.n	25fc6 <get_prompt+0x36>
		if (__shell_cmd_start[default_module].prompt) {
   25fac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25fb0:	009a      	lsls	r2, r3, #2
   25fb2:	4b09      	ldr	r3, [pc, #36]	; (25fd8 <get_prompt+0x48>)
   25fb4:	4413      	add	r3, r2
   25fb6:	689b      	ldr	r3, [r3, #8]
   25fb8:	b143      	cbz	r3, 25fcc <get_prompt+0x3c>
			ret = __shell_cmd_start[default_module].prompt();
   25fba:	4798      	blx	r3
			if (ret) {
   25fbc:	4603      	mov	r3, r0
   25fbe:	2800      	cmp	r0, #0
   25fc0:	d1ed      	bne.n	25f9e <get_prompt+0xe>
		return default_module_prompt;
   25fc2:	4b06      	ldr	r3, [pc, #24]	; (25fdc <get_prompt+0x4c>)
   25fc4:	e7eb      	b.n	25f9e <get_prompt+0xe>
	return prompt;
   25fc6:	4b06      	ldr	r3, [pc, #24]	; (25fe0 <get_prompt+0x50>)
   25fc8:	681b      	ldr	r3, [r3, #0]
   25fca:	e7e8      	b.n	25f9e <get_prompt+0xe>
		return default_module_prompt;
   25fcc:	4b03      	ldr	r3, [pc, #12]	; (25fdc <get_prompt+0x4c>)
   25fce:	e7e6      	b.n	25f9e <get_prompt+0xe>
   25fd0:	20002370 	.word	0x20002370
   25fd4:	2000c420 	.word	0x2000c420
   25fd8:	2000cee8 	.word	0x2000cee8
   25fdc:	20002520 	.word	0x20002520
   25fe0:	20002538 	.word	0x20002538

00025fe4 <exit_module>:
	return set_default_module(argv[1]);
}

static int exit_module(int argc, char *argv[])
{
	if (argc == 1) {
   25fe4:	2801      	cmp	r0, #1
   25fe6:	d001      	beq.n	25fec <exit_module+0x8>
		default_module = -1;
	}

	return 0;
}
   25fe8:	2000      	movs	r0, #0
   25fea:	4770      	bx	lr
		default_module = -1;
   25fec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25ff0:	4b01      	ldr	r3, [pc, #4]	; (25ff8 <exit_module+0x14>)
   25ff2:	601a      	str	r2, [r3, #0]
   25ff4:	e7f8      	b.n	25fe8 <exit_module+0x4>
   25ff6:	bf00      	nop
   25ff8:	2000c420 	.word	0x2000c420

00025ffc <print_module_commands>:
{
   25ffc:	b538      	push	{r3, r4, r5, lr}
   25ffe:	4605      	mov	r5, r0
	printk("help\n");
   26000:	480a      	ldr	r0, [pc, #40]	; (2602c <print_module_commands+0x30>)
   26002:	f7dc ff6d 	bl	2ee0 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26006:	2400      	movs	r4, #0
   26008:	e003      	b.n	26012 <print_module_commands+0x16>
		printk("%s\n", shell_module->commands[i].cmd_name);
   2600a:	4809      	ldr	r0, [pc, #36]	; (26030 <print_module_commands+0x34>)
   2600c:	f7dc ff68 	bl	2ee0 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26010:	3401      	adds	r4, #1
   26012:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26016:	009a      	lsls	r2, r3, #2
   26018:	4b06      	ldr	r3, [pc, #24]	; (26034 <print_module_commands+0x38>)
   2601a:	4413      	add	r3, r2
   2601c:	6859      	ldr	r1, [r3, #4]
   2601e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26022:	0093      	lsls	r3, r2, #2
   26024:	58c9      	ldr	r1, [r1, r3]
   26026:	2900      	cmp	r1, #0
   26028:	d1ef      	bne.n	2600a <print_module_commands+0xe>
}
   2602a:	bd38      	pop	{r3, r4, r5, pc}
   2602c:	00030ee0 	.word	0x00030ee0
   26030:	000300fc 	.word	0x000300fc
   26034:	2000cee8 	.word	0x2000cee8

00026038 <line2argv>:
{
   26038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2603a:	4604      	mov	r4, r0
   2603c:	460e      	mov	r6, r1
   2603e:	4617      	mov	r7, r2
	if (!strlen(str)) {
   26040:	f7da fb5e 	bl	700 <strlen>
   26044:	b918      	cbnz	r0, 2604e <line2argv+0x16>
   26046:	4605      	mov	r5, r0
}
   26048:	4628      	mov	r0, r5
   2604a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		str++;
   2604c:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   2604e:	7823      	ldrb	r3, [r4, #0]
   26050:	2b20      	cmp	r3, #32
   26052:	d0fb      	beq.n	2604c <line2argv+0x14>
	if (!*str) {
   26054:	b30b      	cbz	r3, 2609a <line2argv+0x62>
	argv[argc++] = str;
   26056:	6034      	str	r4, [r6, #0]
   26058:	2501      	movs	r5, #1
	while ((str = strchr(str, ' '))) {
   2605a:	e00a      	b.n	26072 <line2argv+0x3a>
			str++;
   2605c:	3401      	adds	r4, #1
		while (*str && *str == ' ') {
   2605e:	7823      	ldrb	r3, [r4, #0]
   26060:	2b20      	cmp	r3, #32
   26062:	d0fb      	beq.n	2605c <line2argv+0x24>
		if (!*str) {
   26064:	b1ab      	cbz	r3, 26092 <line2argv+0x5a>
		argv[argc++] = str;
   26066:	1c6b      	adds	r3, r5, #1
   26068:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
		if (argc == size) {
   2606c:	42bb      	cmp	r3, r7
   2606e:	d00a      	beq.n	26086 <line2argv+0x4e>
		argv[argc++] = str;
   26070:	461d      	mov	r5, r3
	while ((str = strchr(str, ' '))) {
   26072:	2120      	movs	r1, #32
   26074:	4620      	mov	r0, r4
   26076:	f003 fbe9 	bl	2984c <strchr>
   2607a:	4603      	mov	r3, r0
   2607c:	b148      	cbz	r0, 26092 <line2argv+0x5a>
		*str++ = '\0';
   2607e:	1c5c      	adds	r4, r3, #1
   26080:	2200      	movs	r2, #0
   26082:	701a      	strb	r2, [r3, #0]
		while (*str && *str == ' ') {
   26084:	e7eb      	b.n	2605e <line2argv+0x26>
			printk("Too many parameters (max %zu)\n", size - 1);
   26086:	1e79      	subs	r1, r7, #1
   26088:	4805      	ldr	r0, [pc, #20]	; (260a0 <line2argv+0x68>)
   2608a:	f7dc ff29 	bl	2ee0 <printk>
			return 0;
   2608e:	2500      	movs	r5, #0
   26090:	e7da      	b.n	26048 <line2argv+0x10>
	argv[argc] = NULL;
   26092:	2300      	movs	r3, #0
   26094:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	return argc;
   26098:	e7d6      	b.n	26048 <line2argv+0x10>
		return 0;
   2609a:	2500      	movs	r5, #0
   2609c:	e7d4      	b.n	26048 <line2argv+0x10>
   2609e:	bf00      	nop
   260a0:	00030ec0 	.word	0x00030ec0

000260a4 <get_destination_module>:
{
   260a4:	b538      	push	{r3, r4, r5, lr}
   260a6:	4605      	mov	r5, r0
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   260a8:	2400      	movs	r4, #0
   260aa:	4a0c      	ldr	r2, [pc, #48]	; (260dc <get_destination_module+0x38>)
   260ac:	4b0c      	ldr	r3, [pc, #48]	; (260e0 <get_destination_module+0x3c>)
   260ae:	1a9b      	subs	r3, r3, r2
   260b0:	109b      	asrs	r3, r3, #2
   260b2:	4a0c      	ldr	r2, [pc, #48]	; (260e4 <get_destination_module+0x40>)
   260b4:	fb02 f303 	mul.w	r3, r2, r3
   260b8:	429c      	cmp	r4, r3
   260ba:	da0b      	bge.n	260d4 <get_destination_module+0x30>
		if (!strncmp(module_str,
   260bc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   260c0:	0093      	lsls	r3, r2, #2
   260c2:	2214      	movs	r2, #20
   260c4:	4905      	ldr	r1, [pc, #20]	; (260dc <get_destination_module+0x38>)
   260c6:	58c9      	ldr	r1, [r1, r3]
   260c8:	4628      	mov	r0, r5
   260ca:	f003 fc91 	bl	299f0 <strncmp>
   260ce:	b118      	cbz	r0, 260d8 <get_destination_module+0x34>
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   260d0:	3401      	adds	r4, #1
   260d2:	e7ea      	b.n	260aa <get_destination_module+0x6>
	return -1;
   260d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   260d8:	4620      	mov	r0, r4
   260da:	bd38      	pop	{r3, r4, r5, pc}
   260dc:	2000cee8 	.word	0x2000cee8
   260e0:	2000cef4 	.word	0x2000cef4
   260e4:	aaaaaaab 	.word	0xaaaaaaab

000260e8 <set_default_module>:
{
   260e8:	b538      	push	{r3, r4, r5, lr}
   260ea:	4604      	mov	r4, r0
	if (strlen(name) > MODULE_NAME_MAX_LEN) {
   260ec:	f7da fb08 	bl	700 <strlen>
   260f0:	2814      	cmp	r0, #20
   260f2:	d813      	bhi.n	2611c <set_default_module+0x34>
	module = get_destination_module(name);
   260f4:	4620      	mov	r0, r4
   260f6:	f7ff ffd5 	bl	260a4 <get_destination_module>
	if (module == -1) {
   260fa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   260fe:	d014      	beq.n	2612a <set_default_module+0x42>
	default_module = module;
   26100:	4b0d      	ldr	r3, [pc, #52]	; (26138 <set_default_module+0x50>)
   26102:	6018      	str	r0, [r3, #0]
	strncpy(default_module_prompt, name, MODULE_NAME_MAX_LEN);
   26104:	4d0d      	ldr	r5, [pc, #52]	; (2613c <set_default_module+0x54>)
   26106:	2214      	movs	r2, #20
   26108:	4621      	mov	r1, r4
   2610a:	4628      	mov	r0, r5
   2610c:	f003 fcc2 	bl	29a94 <strncpy>
	strcat(default_module_prompt, "> ");
   26110:	490b      	ldr	r1, [pc, #44]	; (26140 <set_default_module+0x58>)
   26112:	4628      	mov	r0, r5
   26114:	f003 fb7a 	bl	2980c <strcat>
	return 0;
   26118:	2000      	movs	r0, #0
}
   2611a:	bd38      	pop	{r3, r4, r5, pc}
		printk("Module name %s is too long, default is not changed\n",
   2611c:	4621      	mov	r1, r4
   2611e:	4809      	ldr	r0, [pc, #36]	; (26144 <set_default_module+0x5c>)
   26120:	f7dc fede 	bl	2ee0 <printk>
		return -EINVAL;
   26124:	f06f 0015 	mvn.w	r0, #21
   26128:	bd38      	pop	{r3, r4, r5, pc}
		printk("Illegal module %s, default is not changed\n", name);
   2612a:	4621      	mov	r1, r4
   2612c:	4806      	ldr	r0, [pc, #24]	; (26148 <set_default_module+0x60>)
   2612e:	f7dc fed7 	bl	2ee0 <printk>
		return -EINVAL;
   26132:	f06f 0015 	mvn.w	r0, #21
   26136:	bd38      	pop	{r3, r4, r5, pc}
   26138:	2000c420 	.word	0x2000c420
   2613c:	20002520 	.word	0x20002520
   26140:	00030f48 	.word	0x00030f48
   26144:	00030ee8 	.word	0x00030ee8
   26148:	00030f1c 	.word	0x00030f1c

0002614c <select_module>:
{
   2614c:	b508      	push	{r3, lr}
	if (argc == 1) {
   2614e:	2801      	cmp	r0, #1
   26150:	d003      	beq.n	2615a <select_module+0xe>
	return set_default_module(argv[1]);
   26152:	6848      	ldr	r0, [r1, #4]
   26154:	f7ff ffc8 	bl	260e8 <set_default_module>
}
   26158:	bd08      	pop	{r3, pc}
		default_module = -1;
   2615a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2615e:	4b02      	ldr	r3, [pc, #8]	; (26168 <select_module+0x1c>)
   26160:	601a      	str	r2, [r3, #0]
		return 0;
   26162:	2000      	movs	r0, #0
   26164:	bd08      	pop	{r3, pc}
   26166:	bf00      	nop
   26168:	2000c420 	.word	0x2000c420

0002616c <get_command_and_module>:
{
   2616c:	b538      	push	{r3, r4, r5, lr}
   2616e:	4604      	mov	r4, r0
	*module = -1;
   26170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26174:	600b      	str	r3, [r1, #0]
	if (!argv[0]) {
   26176:	6800      	ldr	r0, [r0, #0]
   26178:	b140      	cbz	r0, 2618c <get_command_and_module+0x20>
   2617a:	460d      	mov	r5, r1
	if (default_module == -1) {
   2617c:	4b12      	ldr	r3, [pc, #72]	; (261c8 <get_command_and_module+0x5c>)
   2617e:	681b      	ldr	r3, [r3, #0]
   26180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26184:	d007      	beq.n	26196 <get_command_and_module+0x2a>
	*module = default_module;
   26186:	600b      	str	r3, [r1, #0]
	return argv[0];
   26188:	6820      	ldr	r0, [r4, #0]
}
   2618a:	bd38      	pop	{r3, r4, r5, pc}
		printk("Unrecognized command\n");
   2618c:	480f      	ldr	r0, [pc, #60]	; (261cc <get_command_and_module+0x60>)
   2618e:	f7dc fea7 	bl	2ee0 <printk>
		return NULL;
   26192:	2000      	movs	r0, #0
   26194:	bd38      	pop	{r3, r4, r5, pc}
		if (!argv[1] || argv[1][0] == '\0') {
   26196:	6863      	ldr	r3, [r4, #4]
   26198:	b14b      	cbz	r3, 261ae <get_command_and_module+0x42>
   2619a:	781b      	ldrb	r3, [r3, #0]
   2619c:	b13b      	cbz	r3, 261ae <get_command_and_module+0x42>
		*module = get_destination_module(argv[0]);
   2619e:	f7ff ff81 	bl	260a4 <get_destination_module>
   261a2:	6028      	str	r0, [r5, #0]
		if (*module == -1) {
   261a4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   261a8:	d007      	beq.n	261ba <get_command_and_module+0x4e>
		return argv[1];
   261aa:	6860      	ldr	r0, [r4, #4]
   261ac:	bd38      	pop	{r3, r4, r5, pc}
			printk("Unrecognized command: %s\n", argv[0]);
   261ae:	4601      	mov	r1, r0
   261b0:	4807      	ldr	r0, [pc, #28]	; (261d0 <get_command_and_module+0x64>)
   261b2:	f7dc fe95 	bl	2ee0 <printk>
			return NULL;
   261b6:	2000      	movs	r0, #0
   261b8:	bd38      	pop	{r3, r4, r5, pc}
			printk("Illegal module %s\n", argv[0]);
   261ba:	6821      	ldr	r1, [r4, #0]
   261bc:	4805      	ldr	r0, [pc, #20]	; (261d4 <get_command_and_module+0x68>)
   261be:	f7dc fe8f 	bl	2ee0 <printk>
			return NULL;
   261c2:	2000      	movs	r0, #0
   261c4:	bd38      	pop	{r3, r4, r5, pc}
   261c6:	bf00      	nop
   261c8:	2000c420 	.word	0x2000c420
   261cc:	00030e78 	.word	0x00030e78
   261d0:	00030e90 	.word	0x00030e90
   261d4:	00030eac 	.word	0x00030eac

000261d8 <get_cb>:

static shell_cmd_function_t get_cb(int *argc, char *argv[], int *module)
{
   261d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const char *first_string = argv[0];
   261da:	680c      	ldr	r4, [r1, #0]
	const struct shell_module *shell_module;
	const char *command;
	int i;

	if (!first_string || first_string[0] == '\0') {
   261dc:	b15c      	cbz	r4, 261f6 <get_cb+0x1e>
   261de:	4606      	mov	r6, r0
   261e0:	460d      	mov	r5, r1
   261e2:	4617      	mov	r7, r2
   261e4:	7823      	ldrb	r3, [r4, #0]
   261e6:	b133      	cbz	r3, 261f6 <get_cb+0x1e>
		printk("Illegal parameter\n");
		return NULL;
	}

	if (!strcmp(first_string, "help")) {
   261e8:	4929      	ldr	r1, [pc, #164]	; (26290 <get_cb+0xb8>)
   261ea:	4620      	mov	r0, r4
   261ec:	f7da f90c 	bl	408 <strcmp>
   261f0:	b930      	cbnz	r0, 26200 <get_cb+0x28>
		return show_help;
   261f2:	4828      	ldr	r0, [pc, #160]	; (26294 <get_cb+0xbc>)
   261f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printk("Illegal parameter\n");
   261f6:	4828      	ldr	r0, [pc, #160]	; (26298 <get_cb+0xc0>)
   261f8:	f7dc fe72 	bl	2ee0 <printk>
		return NULL;
   261fc:	2000      	movs	r0, #0
   261fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "select")) {
   26200:	4926      	ldr	r1, [pc, #152]	; (2629c <get_cb+0xc4>)
   26202:	4620      	mov	r0, r4
   26204:	f7da f900 	bl	408 <strcmp>
   26208:	b908      	cbnz	r0, 2620e <get_cb+0x36>
		return select_module;
   2620a:	4825      	ldr	r0, [pc, #148]	; (262a0 <get_cb+0xc8>)
   2620c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "exit")) {
   2620e:	4925      	ldr	r1, [pc, #148]	; (262a4 <get_cb+0xcc>)
   26210:	4620      	mov	r0, r4
   26212:	f7da f8f9 	bl	408 <strcmp>
   26216:	2800      	cmp	r0, #0
   26218:	d034      	beq.n	26284 <get_cb+0xac>
		return exit_module;
	}

	if ((*argc == 1) && (default_module == -1)) {
   2621a:	6833      	ldr	r3, [r6, #0]
   2621c:	2b01      	cmp	r3, #1
   2621e:	d01c      	beq.n	2625a <get_cb+0x82>
		printk("Missing parameter\n");
		return NULL;
	}

	command = get_command_and_module(argv, module);
   26220:	4639      	mov	r1, r7
   26222:	4628      	mov	r0, r5
   26224:	f7ff ffa2 	bl	2616c <get_command_and_module>
   26228:	4606      	mov	r6, r0
	if ((*module == -1) || (command == NULL)) {
   2622a:	683d      	ldr	r5, [r7, #0]
   2622c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   26230:	d02a      	beq.n	26288 <get_cb+0xb0>
   26232:	b358      	cbz	r0, 2628c <get_cb+0xb4>
   26234:	2400      	movs	r4, #0
		return NULL;
	}

	shell_module = &__shell_cmd_start[*module];
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26236:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   2623a:	009a      	lsls	r2, r3, #2
   2623c:	4b1a      	ldr	r3, [pc, #104]	; (262a8 <get_cb+0xd0>)
   2623e:	4413      	add	r3, r2
   26240:	6859      	ldr	r1, [r3, #4]
   26242:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26246:	0093      	lsls	r3, r2, #2
   26248:	461f      	mov	r7, r3
   2624a:	58c9      	ldr	r1, [r1, r3]
   2624c:	b1c1      	cbz	r1, 26280 <get_cb+0xa8>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   2624e:	4630      	mov	r0, r6
   26250:	f7da f8da 	bl	408 <strcmp>
   26254:	b158      	cbz	r0, 2626e <get_cb+0x96>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26256:	3401      	adds	r4, #1
   26258:	e7ed      	b.n	26236 <get_cb+0x5e>
	if ((*argc == 1) && (default_module == -1)) {
   2625a:	4b14      	ldr	r3, [pc, #80]	; (262ac <get_cb+0xd4>)
   2625c:	681b      	ldr	r3, [r3, #0]
   2625e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26262:	d1dd      	bne.n	26220 <get_cb+0x48>
		printk("Missing parameter\n");
   26264:	4812      	ldr	r0, [pc, #72]	; (262b0 <get_cb+0xd8>)
   26266:	f7dc fe3b 	bl	2ee0 <printk>
		return NULL;
   2626a:	2000      	movs	r0, #0
   2626c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return shell_module->commands[i].cb;
   2626e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   26272:	00aa      	lsls	r2, r5, #2
   26274:	4b0c      	ldr	r3, [pc, #48]	; (262a8 <get_cb+0xd0>)
   26276:	4413      	add	r3, r2
   26278:	685b      	ldr	r3, [r3, #4]
   2627a:	441f      	add	r7, r3
   2627c:	6878      	ldr	r0, [r7, #4]
   2627e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	return NULL;
   26280:	2000      	movs	r0, #0
   26282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return exit_module;
   26284:	480b      	ldr	r0, [pc, #44]	; (262b4 <get_cb+0xdc>)
   26286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   26288:	2000      	movs	r0, #0
   2628a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2628c:	2000      	movs	r0, #0
}
   2628e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26290:	00030e4c 	.word	0x00030e4c
   26294:	00026359 	.word	0x00026359
   26298:	00030e38 	.word	0x00030e38
   2629c:	00030e54 	.word	0x00030e54
   262a0:	0002614d 	.word	0x0002614d
   262a4:	00030e5c 	.word	0x00030e5c
   262a8:	2000cee8 	.word	0x2000cee8
   262ac:	2000c420 	.word	0x2000c420
   262b0:	00030e64 	.word	0x00030e64
   262b4:	00025fe5 	.word	0x00025fe5

000262b8 <show_cmd_help>:
{
   262b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   262bc:	b083      	sub	sp, #12
   262be:	4607      	mov	r7, r0
	int module = -1;
   262c0:	a902      	add	r1, sp, #8
   262c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   262c6:	f841 3d04 	str.w	r3, [r1, #-4]!
	command = get_command_and_module(argv, &module);
   262ca:	f7ff ff4f 	bl	2616c <get_command_and_module>
	if ((module == -1) || (command == NULL)) {
   262ce:	9d01      	ldr	r5, [sp, #4]
   262d0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   262d4:	d031      	beq.n	2633a <show_cmd_help+0x82>
   262d6:	4606      	mov	r6, r0
   262d8:	b390      	cbz	r0, 26340 <show_cmd_help+0x88>
   262da:	2400      	movs	r4, #0
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   262dc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   262e0:	009a      	lsls	r2, r3, #2
   262e2:	4b19      	ldr	r3, [pc, #100]	; (26348 <show_cmd_help+0x90>)
   262e4:	4413      	add	r3, r2
   262e6:	6859      	ldr	r1, [r3, #4]
   262e8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   262ec:	0093      	lsls	r3, r2, #2
   262ee:	4698      	mov	r8, r3
   262f0:	58c9      	ldr	r1, [r1, r3]
   262f2:	b1c1      	cbz	r1, 26326 <show_cmd_help+0x6e>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   262f4:	4630      	mov	r0, r6
   262f6:	f7da f887 	bl	408 <strcmp>
   262fa:	4681      	mov	r9, r0
   262fc:	b108      	cbz	r0, 26302 <show_cmd_help+0x4a>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   262fe:	3401      	adds	r4, #1
   26300:	e7ec      	b.n	262dc <show_cmd_help+0x24>
			       shell_module->commands[i].cmd_name,
   26302:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   26306:	00aa      	lsls	r2, r5, #2
   26308:	4b0f      	ldr	r3, [pc, #60]	; (26348 <show_cmd_help+0x90>)
   2630a:	4413      	add	r3, r2
   2630c:	685b      	ldr	r3, [r3, #4]
   2630e:	eb03 0208 	add.w	r2, r3, r8
			printk("%s %s\n",
   26312:	f853 1008 	ldr.w	r1, [r3, r8]
			       shell_module->commands[i].help ?
   26316:	6892      	ldr	r2, [r2, #8]
			printk("%s %s\n",
   26318:	b11a      	cbz	r2, 26322 <show_cmd_help+0x6a>
   2631a:	480c      	ldr	r0, [pc, #48]	; (2634c <show_cmd_help+0x94>)
   2631c:	f7dc fde0 	bl	2ee0 <printk>
			return 0;
   26320:	e007      	b.n	26332 <show_cmd_help+0x7a>
			printk("%s %s\n",
   26322:	4a0b      	ldr	r2, [pc, #44]	; (26350 <show_cmd_help+0x98>)
   26324:	e7f9      	b.n	2631a <show_cmd_help+0x62>
	printk("Unrecognized command: %s\n", argv[0]);
   26326:	6839      	ldr	r1, [r7, #0]
   26328:	480a      	ldr	r0, [pc, #40]	; (26354 <show_cmd_help+0x9c>)
   2632a:	f7dc fdd9 	bl	2ee0 <printk>
	return -EINVAL;
   2632e:	f06f 0915 	mvn.w	r9, #21
}
   26332:	4648      	mov	r0, r9
   26334:	b003      	add	sp, #12
   26336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return 0;
   2633a:	f04f 0900 	mov.w	r9, #0
   2633e:	e7f8      	b.n	26332 <show_cmd_help+0x7a>
   26340:	f04f 0900 	mov.w	r9, #0
   26344:	e7f5      	b.n	26332 <show_cmd_help+0x7a>
   26346:	bf00      	nop
   26348:	2000cee8 	.word	0x2000cee8
   2634c:	00030f78 	.word	0x00030f78
   26350:	0002f754 	.word	0x0002f754
   26354:	00030e90 	.word	0x00030e90

00026358 <show_help>:
{
   26358:	b510      	push	{r4, lr}
   2635a:	460c      	mov	r4, r1
	if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   2635c:	2802      	cmp	r0, #2
   2635e:	dc12      	bgt.n	26386 <show_help+0x2e>
   26360:	4b23      	ldr	r3, [pc, #140]	; (263f0 <show_help+0x98>)
   26362:	681b      	ldr	r3, [r3, #0]
   26364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26368:	d001      	beq.n	2636e <show_help+0x16>
   2636a:	2802      	cmp	r0, #2
   2636c:	d00b      	beq.n	26386 <show_help+0x2e>
	if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   2636e:	2802      	cmp	r0, #2
   26370:	d00d      	beq.n	2638e <show_help+0x36>
   26372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26376:	d001      	beq.n	2637c <show_help+0x24>
   26378:	2801      	cmp	r0, #1
   2637a:	d008      	beq.n	2638e <show_help+0x36>
		printk("Available modules:\n");
   2637c:	481d      	ldr	r0, [pc, #116]	; (263f4 <show_help+0x9c>)
   2637e:	f7dc fdaf 	bl	2ee0 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   26382:	2400      	movs	r4, #0
   26384:	e025      	b.n	263d2 <show_help+0x7a>
		return show_cmd_help(&argv[1]);
   26386:	1d20      	adds	r0, r4, #4
   26388:	f7ff ff96 	bl	262b8 <show_cmd_help>
   2638c:	bd10      	pop	{r4, pc}
		if (default_module == -1) {
   2638e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26392:	d007      	beq.n	263a4 <show_help+0x4c>
		print_module_commands(module);
   26394:	4618      	mov	r0, r3
   26396:	f7ff fe31 	bl	25ffc <print_module_commands>
		printk("\nEnter 'exit' to leave current module.\n");
   2639a:	4817      	ldr	r0, [pc, #92]	; (263f8 <show_help+0xa0>)
   2639c:	f7dc fda0 	bl	2ee0 <printk>
	return 0;
   263a0:	2000      	movs	r0, #0
		printk("\nEnter 'exit' to leave current module.\n");
   263a2:	bd10      	pop	{r4, pc}
			module = get_destination_module(argv[1]);
   263a4:	6860      	ldr	r0, [r4, #4]
   263a6:	f7ff fe7d 	bl	260a4 <get_destination_module>
   263aa:	4603      	mov	r3, r0
			if (module == -1) {
   263ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   263b0:	d1f0      	bne.n	26394 <show_help+0x3c>
				printk("Illegal module %s\n", argv[1]);
   263b2:	6861      	ldr	r1, [r4, #4]
   263b4:	4811      	ldr	r0, [pc, #68]	; (263fc <show_help+0xa4>)
   263b6:	f7dc fd93 	bl	2ee0 <printk>
				return -EINVAL;
   263ba:	f06f 0015 	mvn.w	r0, #21
   263be:	bd10      	pop	{r4, pc}
			printk("%s\n", __shell_cmd_start[module].module_name);
   263c0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   263c4:	0093      	lsls	r3, r2, #2
   263c6:	4a0e      	ldr	r2, [pc, #56]	; (26400 <show_help+0xa8>)
   263c8:	58d1      	ldr	r1, [r2, r3]
   263ca:	480e      	ldr	r0, [pc, #56]	; (26404 <show_help+0xac>)
   263cc:	f7dc fd88 	bl	2ee0 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   263d0:	3401      	adds	r4, #1
   263d2:	4a0b      	ldr	r2, [pc, #44]	; (26400 <show_help+0xa8>)
   263d4:	4b0c      	ldr	r3, [pc, #48]	; (26408 <show_help+0xb0>)
   263d6:	1a9b      	subs	r3, r3, r2
   263d8:	109b      	asrs	r3, r3, #2
   263da:	4a0c      	ldr	r2, [pc, #48]	; (2640c <show_help+0xb4>)
   263dc:	fb02 f303 	mul.w	r3, r2, r3
   263e0:	429c      	cmp	r4, r3
   263e2:	dbed      	blt.n	263c0 <show_help+0x68>
		printk("\nTo select a module, enter 'select <module name>'.\n");
   263e4:	480a      	ldr	r0, [pc, #40]	; (26410 <show_help+0xb8>)
   263e6:	f7dc fd7b 	bl	2ee0 <printk>
	return 0;
   263ea:	2000      	movs	r0, #0
}
   263ec:	bd10      	pop	{r4, pc}
   263ee:	bf00      	nop
   263f0:	2000c420 	.word	0x2000c420
   263f4:	00030fa8 	.word	0x00030fa8
   263f8:	00030f80 	.word	0x00030f80
   263fc:	00030eac 	.word	0x00030eac
   26400:	2000cee8 	.word	0x2000cee8
   26404:	000300fc 	.word	0x000300fc
   26408:	2000cef4 	.word	0x2000cef4
   2640c:	aaaaaaab 	.word	0xaaaaaaab
   26410:	00030fbc 	.word	0x00030fbc

00026414 <get_command_to_complete>:
		k_fifo_put(&avail_queue, cmd);
	}
}

static int get_command_to_complete(char *str, char **command_prefix)
{
   26414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26418:	b086      	sub	sp, #24
   2641a:	4604      	mov	r4, r0
   2641c:	4688      	mov	r8, r1
	char dest_str[MODULE_NAME_MAX_LEN];
	int dest = -1;
	char *start;

	/* remove ' ' at the beginning of the line */
	while (*str && *str == ' ') {
   2641e:	e000      	b.n	26422 <get_command_to_complete+0xe>
		str++;
   26420:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   26422:	7823      	ldrb	r3, [r4, #0]
   26424:	2b20      	cmp	r3, #32
   26426:	d0fb      	beq.n	26420 <get_command_to_complete+0xc>
	}

	if (!*str) {
   26428:	b3a3      	cbz	r3, 26494 <get_command_to_complete+0x80>
		return -1;
	}

	start = str;

	if (default_module != -1) {
   2642a:	4b1f      	ldr	r3, [pc, #124]	; (264a8 <get_command_to_complete+0x94>)
   2642c:	681d      	ldr	r5, [r3, #0]
   2642e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   26432:	d001      	beq.n	26438 <get_command_to_complete+0x24>
		dest = default_module;
		/* caller function already checks str len and put '\0' */
		*command_prefix = str;
   26434:	f8c8 4000 	str.w	r4, [r8]

	/*
	 * In case of a default module: only one parameter is possible.
	 * Otherwise, only two parameters are possibles.
	 */
	str = strchr(str, ' ');
   26438:	2120      	movs	r1, #32
   2643a:	4620      	mov	r0, r4
   2643c:	f003 fa06 	bl	2984c <strchr>
   26440:	4606      	mov	r6, r0
	if (default_module != -1) {
   26442:	4b19      	ldr	r3, [pc, #100]	; (264a8 <get_command_to_complete+0x94>)
   26444:	681f      	ldr	r7, [r3, #0]
   26446:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   2644a:	d004      	beq.n	26456 <get_command_to_complete+0x42>
		return (str == NULL) ? dest : -1;
   2644c:	bb28      	cbnz	r0, 2649a <get_command_to_complete+0x86>
	*command_prefix = str;
	str = strchr(str, ' ');

	/* only two parameters are possibles in case of no default module */
	return (str == NULL) ? dest : -1;
}
   2644e:	4628      	mov	r0, r5
   26450:	b006      	add	sp, #24
   26452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (str == NULL) {
   26456:	b318      	cbz	r0, 264a0 <get_command_to_complete+0x8c>
	if ((str - start + 1) >= MODULE_NAME_MAX_LEN) {
   26458:	1b05      	subs	r5, r0, r4
   2645a:	1c6a      	adds	r2, r5, #1
   2645c:	2a13      	cmp	r2, #19
   2645e:	dc21      	bgt.n	264a4 <get_command_to_complete+0x90>
	strncpy(dest_str, start, (str - start + 1));
   26460:	4621      	mov	r1, r4
   26462:	a801      	add	r0, sp, #4
   26464:	f003 fb16 	bl	29a94 <strncpy>
	dest_str[str - start] = '\0';
   26468:	ab06      	add	r3, sp, #24
   2646a:	441d      	add	r5, r3
   2646c:	2300      	movs	r3, #0
   2646e:	f805 3c14 	strb.w	r3, [r5, #-20]
	dest = get_destination_module(dest_str);
   26472:	a801      	add	r0, sp, #4
   26474:	f7ff fe16 	bl	260a4 <get_destination_module>
   26478:	4605      	mov	r5, r0
	if (dest == -1) {
   2647a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2647e:	d0e6      	beq.n	2644e <get_command_to_complete+0x3a>
	str++;
   26480:	1c70      	adds	r0, r6, #1
	*command_prefix = str;
   26482:	f8c8 0000 	str.w	r0, [r8]
	str = strchr(str, ' ');
   26486:	2120      	movs	r1, #32
   26488:	f003 f9e0 	bl	2984c <strchr>
	return (str == NULL) ? dest : -1;
   2648c:	2800      	cmp	r0, #0
   2648e:	d0de      	beq.n	2644e <get_command_to_complete+0x3a>
   26490:	463d      	mov	r5, r7
   26492:	e7dc      	b.n	2644e <get_command_to_complete+0x3a>
		return -1;
   26494:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26498:	e7d9      	b.n	2644e <get_command_to_complete+0x3a>
		return (str == NULL) ? dest : -1;
   2649a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2649e:	e7d6      	b.n	2644e <get_command_to_complete+0x3a>
		return -1;
   264a0:	463d      	mov	r5, r7
   264a2:	e7d4      	b.n	2644e <get_command_to_complete+0x3a>
		return -1;
   264a4:	463d      	mov	r5, r7
   264a6:	e7d2      	b.n	2644e <get_command_to_complete+0x3a>
   264a8:	2000c420 	.word	0x2000c420

000264ac <completion>:

static u8_t completion(char *line, u8_t len)
{
   264ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   264b0:	b087      	sub	sp, #28
   264b2:	9002      	str	r0, [sp, #8]
	int common_chars = -1, space = 0;
	int i, dest, command_len;
	const struct shell_module *module;
	char *command_prefix;

	if (len >= (MODULE_NAME_MAX_LEN + COMMAND_MAX_LEN - 1)) {
   264b4:	2944      	cmp	r1, #68	; 0x44
   264b6:	d903      	bls.n	264c0 <completion+0x14>
		return 0;
   264b8:	2000      	movs	r0, #0
		printk(" ");
		line[len] = ' ';
	}

	return common_chars - command_len + space;
}
   264ba:	b007      	add	sp, #28
   264bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   264c0:	4689      	mov	r9, r1
	line[len] = '\0';
   264c2:	2300      	movs	r3, #0
   264c4:	5443      	strb	r3, [r0, r1]
	dest = get_command_to_complete(line, &command_prefix);
   264c6:	a905      	add	r1, sp, #20
   264c8:	f7ff ffa4 	bl	26414 <get_command_to_complete>
   264cc:	4605      	mov	r5, r0
	if (dest == -1) {
   264ce:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   264d2:	f000 808f 	beq.w	265f4 <completion+0x148>
	command_len = strlen(command_prefix);
   264d6:	9805      	ldr	r0, [sp, #20]
   264d8:	f7da f912 	bl	700 <strlen>
   264dc:	9001      	str	r0, [sp, #4]
	for (i = 0; module->commands[i].cmd_name; i++) {
   264de:	f04f 0b00 	mov.w	fp, #0
	int common_chars = -1, space = 0;
   264e2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	const char *first_match = NULL;
   264e6:	465f      	mov	r7, fp
   264e8:	9003      	str	r0, [sp, #12]
	for (i = 0; module->commands[i].cmd_name; i++) {
   264ea:	e01f      	b.n	2652c <completion+0x80>
			first_match = module->commands[i].cmd_name;
   264ec:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   264f0:	009a      	lsls	r2, r3, #2
   264f2:	4b42      	ldr	r3, [pc, #264]	; (265fc <completion+0x150>)
   264f4:	4413      	add	r3, r2
   264f6:	685b      	ldr	r3, [r3, #4]
   264f8:	f853 700a 	ldr.w	r7, [r3, sl]
			continue;
   264fc:	e014      	b.n	26528 <completion+0x7c>
			printk("\n%s\n", first_match);
   264fe:	4639      	mov	r1, r7
   26500:	483f      	ldr	r0, [pc, #252]	; (26600 <completion+0x154>)
   26502:	f7dc fced 	bl	2ee0 <printk>
			common_chars = strlen(first_match);
   26506:	4638      	mov	r0, r7
   26508:	f7da f8fa 	bl	700 <strlen>
   2650c:	4606      	mov	r6, r0
		for (j = 0; j < common_chars; j++) {
   2650e:	e026      	b.n	2655e <completion+0xb2>
		printk("%s\n", module->commands[i].cmd_name);
   26510:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26514:	009a      	lsls	r2, r3, #2
   26516:	4b39      	ldr	r3, [pc, #228]	; (265fc <completion+0x150>)
   26518:	4413      	add	r3, r2
   2651a:	685b      	ldr	r3, [r3, #4]
   2651c:	f853 100a 	ldr.w	r1, [r3, sl]
   26520:	4838      	ldr	r0, [pc, #224]	; (26604 <completion+0x158>)
   26522:	f7dc fcdd 	bl	2ee0 <printk>
		common_chars = j;
   26526:	4626      	mov	r6, r4
	for (i = 0; module->commands[i].cmd_name; i++) {
   26528:	f10b 0b01 	add.w	fp, fp, #1
   2652c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26530:	009a      	lsls	r2, r3, #2
   26532:	4b32      	ldr	r3, [pc, #200]	; (265fc <completion+0x150>)
   26534:	4413      	add	r3, r2
   26536:	685a      	ldr	r2, [r3, #4]
   26538:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   2653c:	ea4f 0a83 	mov.w	sl, r3, lsl #2
   26540:	46d0      	mov	r8, sl
   26542:	f852 100a 	ldr.w	r1, [r2, sl]
   26546:	b1d1      	cbz	r1, 2657e <completion+0xd2>
		if (strncmp(command_prefix,
   26548:	9a01      	ldr	r2, [sp, #4]
   2654a:	9805      	ldr	r0, [sp, #20]
   2654c:	f003 fa50 	bl	299f0 <strncmp>
   26550:	4604      	mov	r4, r0
   26552:	2800      	cmp	r0, #0
   26554:	d1e8      	bne.n	26528 <completion+0x7c>
		if (!first_match) {
   26556:	2f00      	cmp	r7, #0
   26558:	d0c8      	beq.n	264ec <completion+0x40>
		if (first_match && (common_chars < 0)) {
   2655a:	2e00      	cmp	r6, #0
   2655c:	dbcf      	blt.n	264fe <completion+0x52>
		for (j = 0; j < common_chars; j++) {
   2655e:	42a6      	cmp	r6, r4
   26560:	ddd6      	ble.n	26510 <completion+0x64>
			if (first_match[j] != module->commands[i].cmd_name[j]) {
   26562:	5d39      	ldrb	r1, [r7, r4]
   26564:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26568:	009a      	lsls	r2, r3, #2
   2656a:	4b24      	ldr	r3, [pc, #144]	; (265fc <completion+0x150>)
   2656c:	4413      	add	r3, r2
   2656e:	685b      	ldr	r3, [r3, #4]
   26570:	f853 3008 	ldr.w	r3, [r3, r8]
   26574:	5d1b      	ldrb	r3, [r3, r4]
   26576:	4299      	cmp	r1, r3
   26578:	d1ca      	bne.n	26510 <completion+0x64>
		for (j = 0; j < common_chars; j++) {
   2657a:	3401      	adds	r4, #1
   2657c:	e7ef      	b.n	2655e <completion+0xb2>
   2657e:	f8dd a00c 	ldr.w	sl, [sp, #12]
	if (!first_match) {
   26582:	2f00      	cmp	r7, #0
   26584:	d038      	beq.n	265f8 <completion+0x14c>
	if (common_chars >= 0) {
   26586:	2e00      	cmp	r6, #0
   26588:	db0d      	blt.n	265a6 <completion+0xfa>
		printk("%s", get_prompt());
   2658a:	f7ff fd01 	bl	25f90 <get_prompt>
   2658e:	4c1e      	ldr	r4, [pc, #120]	; (26608 <completion+0x15c>)
   26590:	4601      	mov	r1, r0
   26592:	4620      	mov	r0, r4
   26594:	f7dc fca4 	bl	2ee0 <printk>
		printk("%s", line);
   26598:	9d02      	ldr	r5, [sp, #8]
   2659a:	4629      	mov	r1, r5
   2659c:	4620      	mov	r0, r4
   2659e:	f7dc fc9f 	bl	2ee0 <printk>
	int common_chars = -1, space = 0;
   265a2:	2400      	movs	r4, #0
   265a4:	e015      	b.n	265d2 <completion+0x126>
		common_chars = strlen(first_match);
   265a6:	4638      	mov	r0, r7
   265a8:	f7da f8aa 	bl	700 <strlen>
   265ac:	4606      	mov	r6, r0
		space = 1;
   265ae:	2401      	movs	r4, #1
   265b0:	9d02      	ldr	r5, [sp, #8]
	for (i = command_len; i < common_chars; i++) {
   265b2:	e00e      	b.n	265d2 <completion+0x126>
		printk("%c", first_match[i]);
   265b4:	f817 100a 	ldrb.w	r1, [r7, sl]
   265b8:	4814      	ldr	r0, [pc, #80]	; (2660c <completion+0x160>)
   265ba:	f7dc fc91 	bl	2ee0 <printk>
		line[len++] = first_match[i];
   265be:	f109 0301 	add.w	r3, r9, #1
   265c2:	f817 200a 	ldrb.w	r2, [r7, sl]
   265c6:	f805 2009 	strb.w	r2, [r5, r9]
	for (i = command_len; i < common_chars; i++) {
   265ca:	f10a 0a01 	add.w	sl, sl, #1
		line[len++] = first_match[i];
   265ce:	fa5f f983 	uxtb.w	r9, r3
	for (i = command_len; i < common_chars; i++) {
   265d2:	4556      	cmp	r6, sl
   265d4:	dcee      	bgt.n	265b4 <completion+0x108>
	if (space) {
   265d6:	b92c      	cbnz	r4, 265e4 <completion+0x138>
	return common_chars - command_len + space;
   265d8:	9b01      	ldr	r3, [sp, #4]
   265da:	1af0      	subs	r0, r6, r3
   265dc:	fa54 f080 	uxtab	r0, r4, r0
   265e0:	b2c0      	uxtb	r0, r0
   265e2:	e76a      	b.n	264ba <completion+0xe>
		printk(" ");
   265e4:	480a      	ldr	r0, [pc, #40]	; (26610 <completion+0x164>)
   265e6:	f7dc fc7b 	bl	2ee0 <printk>
		line[len] = ' ';
   265ea:	2320      	movs	r3, #32
   265ec:	9a02      	ldr	r2, [sp, #8]
   265ee:	f802 3009 	strb.w	r3, [r2, r9]
   265f2:	e7f1      	b.n	265d8 <completion+0x12c>
		return 0;
   265f4:	2000      	movs	r0, #0
   265f6:	e760      	b.n	264ba <completion+0xe>
		return 0;
   265f8:	2000      	movs	r0, #0
   265fa:	e75e      	b.n	264ba <completion+0xe>
   265fc:	2000cee8 	.word	0x2000cee8
   26600:	00030e2c 	.word	0x00030e2c
   26604:	000300fc 	.word	0x000300fc
   26608:	0002db24 	.word	0x0002db24
   2660c:	00030e34 	.word	0x00030e34
   26610:	00031480 	.word	0x00031480

00026614 <line_queue_init>:
{
   26614:	b510      	push	{r4, lr}
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   26616:	2400      	movs	r4, #0
   26618:	e008      	b.n	2662c <line_queue_init+0x18>
		k_fifo_put(&avail_queue, &buf[i]);
   2661a:	eb04 1244 	add.w	r2, r4, r4, lsl #5
   2661e:	0093      	lsls	r3, r2, #2
   26620:	4904      	ldr	r1, [pc, #16]	; (26634 <line_queue_init+0x20>)
   26622:	4419      	add	r1, r3
   26624:	4804      	ldr	r0, [pc, #16]	; (26638 <line_queue_init+0x24>)
   26626:	f001 fced 	bl	28004 <k_queue_append>
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   2662a:	3401      	adds	r4, #1
   2662c:	2c02      	cmp	r4, #2
   2662e:	ddf4      	ble.n	2661a <line_queue_init+0x6>
}
   26630:	bd10      	pop	{r4, pc}
   26632:	bf00      	nop
   26634:	20002384 	.word	0x20002384
   26638:	20002374 	.word	0x20002374

0002663c <shell_exec>:
{
   2663c:	b510      	push	{r4, lr}
   2663e:	b08e      	sub	sp, #56	; 0x38
	int module = default_module;
   26640:	4b1e      	ldr	r3, [pc, #120]	; (266bc <shell_exec+0x80>)
   26642:	681b      	ldr	r3, [r3, #0]
   26644:	9301      	str	r3, [sp, #4]
	argc = line2argv(line, argv, ARRAY_SIZE(argv));
   26646:	220b      	movs	r2, #11
   26648:	a903      	add	r1, sp, #12
   2664a:	f7ff fcf5 	bl	26038 <line2argv>
   2664e:	9002      	str	r0, [sp, #8]
	if (!argc) {
   26650:	2800      	cmp	r0, #0
   26652:	d02f      	beq.n	266b4 <shell_exec+0x78>
	cb = get_cb(&argc, argv, &module);
   26654:	aa01      	add	r2, sp, #4
   26656:	a903      	add	r1, sp, #12
   26658:	a802      	add	r0, sp, #8
   2665a:	f7ff fdbd 	bl	261d8 <get_cb>
	if (!cb) {
   2665e:	4602      	mov	r2, r0
   26660:	b168      	cbz	r0, 2667e <shell_exec+0x42>
	if (module != -1 && module != default_module) {
   26662:	9b01      	ldr	r3, [sp, #4]
   26664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26668:	d017      	beq.n	2669a <shell_exec+0x5e>
   2666a:	4914      	ldr	r1, [pc, #80]	; (266bc <shell_exec+0x80>)
   2666c:	6809      	ldr	r1, [r1, #0]
   2666e:	428b      	cmp	r3, r1
   26670:	d013      	beq.n	2669a <shell_exec+0x5e>
		err = cb(argc - 1, &argv[1]);
   26672:	a904      	add	r1, sp, #16
   26674:	9802      	ldr	r0, [sp, #8]
   26676:	3801      	subs	r0, #1
   26678:	4790      	blx	r2
   2667a:	4604      	mov	r4, r0
   2667c:	e011      	b.n	266a2 <shell_exec+0x66>
		if (app_cmd_handler != NULL) {
   2667e:	4b10      	ldr	r3, [pc, #64]	; (266c0 <shell_exec+0x84>)
   26680:	681a      	ldr	r2, [r3, #0]
   26682:	2a00      	cmp	r2, #0
   26684:	d1ed      	bne.n	26662 <shell_exec+0x26>
	printk("Unrecognized command: %s\n", argv);
   26686:	9903      	ldr	r1, [sp, #12]
   26688:	480e      	ldr	r0, [pc, #56]	; (266c4 <shell_exec+0x88>)
   2668a:	f7dc fc29 	bl	2ee0 <printk>
	printk("Type 'help' for list of available commands\n");
   2668e:	480e      	ldr	r0, [pc, #56]	; (266c8 <shell_exec+0x8c>)
   26690:	f7dc fc26 	bl	2ee0 <printk>
			return -EINVAL;
   26694:	f06f 0415 	mvn.w	r4, #21
   26698:	e005      	b.n	266a6 <shell_exec+0x6a>
		err = cb(argc, argv);
   2669a:	a903      	add	r1, sp, #12
   2669c:	9802      	ldr	r0, [sp, #8]
   2669e:	4790      	blx	r2
   266a0:	4604      	mov	r4, r0
	if (err < 0) {
   266a2:	2c00      	cmp	r4, #0
   266a4:	db02      	blt.n	266ac <shell_exec+0x70>
}
   266a6:	4620      	mov	r0, r4
   266a8:	b00e      	add	sp, #56	; 0x38
   266aa:	bd10      	pop	{r4, pc}
		show_cmd_help(argv);
   266ac:	a803      	add	r0, sp, #12
   266ae:	f7ff fe03 	bl	262b8 <show_cmd_help>
   266b2:	e7f8      	b.n	266a6 <shell_exec+0x6a>
		return -EINVAL;
   266b4:	f06f 0415 	mvn.w	r4, #21
   266b8:	e7f5      	b.n	266a6 <shell_exec+0x6a>
   266ba:	bf00      	nop
   266bc:	2000c420 	.word	0x2000c420
   266c0:	2000236c 	.word	0x2000236c
   266c4:	00030e90 	.word	0x00030e90
   266c8:	00030f4c 	.word	0x00030f4c

000266cc <shell>:
{
   266cc:	b510      	push	{r4, lr}
		printk("%s", get_prompt());
   266ce:	f7ff fc5f 	bl	25f90 <get_prompt>
   266d2:	4601      	mov	r1, r0
   266d4:	4808      	ldr	r0, [pc, #32]	; (266f8 <shell+0x2c>)
   266d6:	f7dc fc03 	bl	2ee0 <printk>
		cmd = k_fifo_get(&cmds_queue, K_FOREVER);
   266da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   266de:	4807      	ldr	r0, [pc, #28]	; (266fc <shell+0x30>)
   266e0:	f001 fcb8 	bl	28054 <k_queue_get>
   266e4:	4604      	mov	r4, r0
		shell_exec(cmd->line);
   266e6:	3004      	adds	r0, #4
   266e8:	f7ff ffa8 	bl	2663c <shell_exec>
		k_fifo_put(&avail_queue, cmd);
   266ec:	4621      	mov	r1, r4
   266ee:	4804      	ldr	r0, [pc, #16]	; (26700 <shell+0x34>)
   266f0:	f001 fc88 	bl	28004 <k_queue_append>
   266f4:	e7eb      	b.n	266ce <shell+0x2>
   266f6:	bf00      	nop
   266f8:	0002db24 	.word	0x0002db24
   266fc:	20002510 	.word	0x20002510
   26700:	20002374 	.word	0x20002374

00026704 <shell_init>:


void shell_init(const char *str)
{
   26704:	b510      	push	{r4, lr}
   26706:	b086      	sub	sp, #24
   26708:	4604      	mov	r4, r0
	k_fifo_init(&cmds_queue);
   2670a:	4812      	ldr	r0, [pc, #72]	; (26754 <shell_init+0x50>)
   2670c:	f001 fc47 	bl	27f9e <k_queue_init>
	k_fifo_init(&avail_queue);
   26710:	4811      	ldr	r0, [pc, #68]	; (26758 <shell_init+0x54>)
   26712:	f001 fc44 	bl	27f9e <k_queue_init>

	line_queue_init();
   26716:	f7ff ff7d 	bl	26614 <line_queue_init>

	prompt = str ? str : "";
   2671a:	b1c4      	cbz	r4, 2674e <shell_init+0x4a>
   2671c:	4b0f      	ldr	r3, [pc, #60]	; (2675c <shell_init+0x58>)
   2671e:	601c      	str	r4, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   26720:	2300      	movs	r3, #0
   26722:	9305      	str	r3, [sp, #20]
   26724:	9304      	str	r3, [sp, #16]
   26726:	f06f 0208 	mvn.w	r2, #8
   2672a:	9203      	str	r2, [sp, #12]
   2672c:	9302      	str	r3, [sp, #8]
   2672e:	9301      	str	r3, [sp, #4]
   26730:	9300      	str	r3, [sp, #0]
   26732:	4b0b      	ldr	r3, [pc, #44]	; (26760 <shell_init+0x5c>)
   26734:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   26738:	490a      	ldr	r1, [pc, #40]	; (26764 <shell_init+0x60>)
   2673a:	480b      	ldr	r0, [pc, #44]	; (26768 <shell_init+0x64>)
   2673c:	f002 fa78 	bl	28c30 <_impl_k_thread_create>
	k_thread_create(&shell_thread, stack, STACKSIZE, shell, NULL, NULL,
			NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	/* Register serial console handler */
#ifdef CONFIG_UART_CONSOLE
	uart_register_input(&avail_queue, &cmds_queue, completion);
   26740:	4a0a      	ldr	r2, [pc, #40]	; (2676c <shell_init+0x68>)
   26742:	4904      	ldr	r1, [pc, #16]	; (26754 <shell_init+0x50>)
   26744:	4804      	ldr	r0, [pc, #16]	; (26758 <shell_init+0x54>)
   26746:	f7db fc0b 	bl	1f60 <uart_register_input>
#endif
#ifdef CONFIG_TELNET_CONSOLE
	telnet_register_input(&avail_queue, &cmds_queue, completion);
#endif
}
   2674a:	b006      	add	sp, #24
   2674c:	bd10      	pop	{r4, pc}
	prompt = str ? str : "";
   2674e:	4c08      	ldr	r4, [pc, #32]	; (26770 <shell_init+0x6c>)
   26750:	e7e4      	b.n	2671c <shell_init+0x18>
   26752:	bf00      	nop
   26754:	20002510 	.word	0x20002510
   26758:	20002374 	.word	0x20002374
   2675c:	20002538 	.word	0x20002538
   26760:	000266cd 	.word	0x000266cd
   26764:	20009a50 	.word	0x20009a50
   26768:	2000253c 	.word	0x2000253c
   2676c:	000264ad 	.word	0x000264ad
   26770:	0002f754 	.word	0x0002f754

00026774 <ftpan_32>:
#define __SYSTEM_CLOCK_64M (64000000UL)

#ifdef CONFIG_SOC_NRF52832
static bool ftpan_32(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26774:	4b0e      	ldr	r3, [pc, #56]	; (267b0 <ftpan_32+0x3c>)
   26776:	781b      	ldrb	r3, [r3, #0]
   26778:	2b06      	cmp	r3, #6
   2677a:	d001      	beq.n	26780 <ftpan_32+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   2677c:	2000      	movs	r0, #0
   2677e:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   26780:	4b0c      	ldr	r3, [pc, #48]	; (267b4 <ftpan_32+0x40>)
   26782:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26784:	f013 0f0f 	tst.w	r3, #15
   26788:	d10e      	bne.n	267a8 <ftpan_32+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   2678a:	4b0b      	ldr	r3, [pc, #44]	; (267b8 <ftpan_32+0x44>)
   2678c:	681b      	ldr	r3, [r3, #0]
   2678e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   26792:	2b30      	cmp	r3, #48	; 0x30
   26794:	d001      	beq.n	2679a <ftpan_32+0x26>
	return false;
   26796:	2000      	movs	r0, #0
   26798:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   2679a:	4b08      	ldr	r3, [pc, #32]	; (267bc <ftpan_32+0x48>)
   2679c:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   2679e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   267a2:	d003      	beq.n	267ac <ftpan_32+0x38>
	return false;
   267a4:	2000      	movs	r0, #0
   267a6:	4770      	bx	lr
   267a8:	2000      	movs	r0, #0
   267aa:	4770      	bx	lr
			return true;
   267ac:	2001      	movs	r0, #1
}
   267ae:	4770      	bx	lr
   267b0:	f0000fe0 	.word	0xf0000fe0
   267b4:	f0000fe4 	.word	0xf0000fe4
   267b8:	f0000fe8 	.word	0xf0000fe8
   267bc:	f0000fec 	.word	0xf0000fec

000267c0 <ftpan_37>:

static bool ftpan_37(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   267c0:	4b0e      	ldr	r3, [pc, #56]	; (267fc <ftpan_37+0x3c>)
   267c2:	781b      	ldrb	r3, [r3, #0]
   267c4:	2b06      	cmp	r3, #6
   267c6:	d001      	beq.n	267cc <ftpan_37+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   267c8:	2000      	movs	r0, #0
   267ca:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   267cc:	4b0c      	ldr	r3, [pc, #48]	; (26800 <ftpan_37+0x40>)
   267ce:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   267d0:	f013 0f0f 	tst.w	r3, #15
   267d4:	d10e      	bne.n	267f4 <ftpan_37+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   267d6:	4b0b      	ldr	r3, [pc, #44]	; (26804 <ftpan_37+0x44>)
   267d8:	681b      	ldr	r3, [r3, #0]
   267da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   267de:	2b30      	cmp	r3, #48	; 0x30
   267e0:	d001      	beq.n	267e6 <ftpan_37+0x26>
	return false;
   267e2:	2000      	movs	r0, #0
   267e4:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   267e6:	4b08      	ldr	r3, [pc, #32]	; (26808 <ftpan_37+0x48>)
   267e8:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   267ea:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   267ee:	d003      	beq.n	267f8 <ftpan_37+0x38>
	return false;
   267f0:	2000      	movs	r0, #0
   267f2:	4770      	bx	lr
   267f4:	2000      	movs	r0, #0
   267f6:	4770      	bx	lr
			return true;
   267f8:	2001      	movs	r0, #1
}
   267fa:	4770      	bx	lr
   267fc:	f0000fe0 	.word	0xf0000fe0
   26800:	f0000fe4 	.word	0xf0000fe4
   26804:	f0000fe8 	.word	0xf0000fe8
   26808:	f0000fec 	.word	0xf0000fec

0002680c <ftpan_36>:

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   2680c:	4b0e      	ldr	r3, [pc, #56]	; (26848 <ftpan_36+0x3c>)
   2680e:	781b      	ldrb	r3, [r3, #0]
   26810:	2b06      	cmp	r3, #6
   26812:	d001      	beq.n	26818 <ftpan_36+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   26814:	2000      	movs	r0, #0
   26816:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   26818:	4b0c      	ldr	r3, [pc, #48]	; (2684c <ftpan_36+0x40>)
   2681a:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   2681c:	f013 0f0f 	tst.w	r3, #15
   26820:	d10e      	bne.n	26840 <ftpan_36+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   26822:	4b0b      	ldr	r3, [pc, #44]	; (26850 <ftpan_36+0x44>)
   26824:	681b      	ldr	r3, [r3, #0]
   26826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   2682a:	2b30      	cmp	r3, #48	; 0x30
   2682c:	d001      	beq.n	26832 <ftpan_36+0x26>
	return false;
   2682e:	2000      	movs	r0, #0
   26830:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   26832:	4b08      	ldr	r3, [pc, #32]	; (26854 <ftpan_36+0x48>)
   26834:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   26836:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   2683a:	d003      	beq.n	26844 <ftpan_36+0x38>
	return false;
   2683c:	2000      	movs	r0, #0
   2683e:	4770      	bx	lr
   26840:	2000      	movs	r0, #0
   26842:	4770      	bx	lr
			return true;
   26844:	2001      	movs	r0, #1
}
   26846:	4770      	bx	lr
   26848:	f0000fe0 	.word	0xf0000fe0
   2684c:	f0000fe4 	.word	0xf0000fe4
   26850:	f0000fe8 	.word	0xf0000fe8
   26854:	f0000fec 	.word	0xf0000fec

00026858 <errata_136_nrf52832>:

static bool errata_136_nrf52832(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26858:	4b0f      	ldr	r3, [pc, #60]	; (26898 <errata_136_nrf52832+0x40>)
   2685a:	781b      	ldrb	r3, [r3, #0]
   2685c:	2b06      	cmp	r3, #6
   2685e:	d001      	beq.n	26864 <errata_136_nrf52832+0xc>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
			return true;
		}
	}

	return false;
   26860:	2000      	movs	r0, #0
   26862:	4770      	bx	lr
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   26864:	4b0d      	ldr	r3, [pc, #52]	; (2689c <errata_136_nrf52832+0x44>)
   26866:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26868:	f013 0f0f 	tst.w	r3, #15
   2686c:	d10b      	bne.n	26886 <errata_136_nrf52832+0x2e>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
   2686e:	4b0c      	ldr	r3, [pc, #48]	; (268a0 <errata_136_nrf52832+0x48>)
   26870:	681b      	ldr	r3, [r3, #0]
   26872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   26876:	2b30      	cmp	r3, #48	; 0x30
   26878:	d007      	beq.n	2688a <errata_136_nrf52832+0x32>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
   2687a:	2b40      	cmp	r3, #64	; 0x40
   2687c:	d007      	beq.n	2688e <errata_136_nrf52832+0x36>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
   2687e:	2b50      	cmp	r3, #80	; 0x50
   26880:	d007      	beq.n	26892 <errata_136_nrf52832+0x3a>
	return false;
   26882:	2000      	movs	r0, #0
   26884:	4770      	bx	lr
   26886:	2000      	movs	r0, #0
   26888:	4770      	bx	lr
			return true;
   2688a:	2001      	movs	r0, #1
   2688c:	4770      	bx	lr
			return true;
   2688e:	2001      	movs	r0, #1
   26890:	4770      	bx	lr
			return true;
   26892:	2001      	movs	r0, #1
}
   26894:	4770      	bx	lr
   26896:	bf00      	nop
   26898:	f0000fe0 	.word	0xf0000fe0
   2689c:	f0000fe4 	.word	0xf0000fe4
   268a0:	f0000fe8 	.word	0xf0000fe8

000268a4 <nordicsemi_nrf52832_init>:

static void nordicsemi_nrf52832_init(void)
{
   268a4:	b508      	push	{r3, lr}
	/* Workaround for FTPAN-32 "DIF: Debug session automatically
	* enables TracePort pins" found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_32()) {
   268a6:	f7ff ff65 	bl	26774 <ftpan_32>
   268aa:	b120      	cbz	r0, 268b6 <nordicsemi_nrf52832_init+0x12>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   268ac:	4a32      	ldr	r2, [pc, #200]	; (26978 <nordicsemi_nrf52832_init+0xd4>)
   268ae:	68d3      	ldr	r3, [r2, #12]
   268b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   268b4:	60d3      	str	r3, [r2, #12]

	/* Workaround for FTPAN-37 "AMLI: EasyDMA is slow with Radio,
	* ECB, AAR and CCM." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_37()) {
   268b6:	f7ff ff83 	bl	267c0 <ftpan_37>
   268ba:	b110      	cbz	r0, 268c2 <nordicsemi_nrf52832_init+0x1e>
		*(volatile u32_t *)0x400005A0 = 0x3;
   268bc:	2203      	movs	r2, #3
   268be:	4b2f      	ldr	r3, [pc, #188]	; (2697c <nordicsemi_nrf52832_init+0xd8>)
   268c0:	601a      	str	r2, [r3, #0]

	/* Workaround for FTPAN-36 "CLOCK: Some registers are not
	* reset when expected." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_36()) {
   268c2:	f7ff ffa3 	bl	2680c <ftpan_36>
   268c6:	b130      	cbz	r0, 268d6 <nordicsemi_nrf52832_init+0x32>
		NRF_CLOCK->EVENTS_DONE = 0;
   268c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   268cc:	2200      	movs	r2, #0
   268ce:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
   268d2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	/* Workaround for Errata 136 "System: Bits in RESETREAS are set when
	 * they should not be" found at the Errata document for your device
	 * located at https://infocenter.nordicsemi.com/
	 */
	if (errata_136_nrf52832()) {
   268d6:	f7ff ffbf 	bl	26858 <errata_136_nrf52832>
   268da:	b160      	cbz	r0, 268f6 <nordicsemi_nrf52832_init+0x52>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
   268dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   268e0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   268e4:	f013 0f01 	tst.w	r3, #1
   268e8:	d005      	beq.n	268f6 <nordicsemi_nrf52832_init+0x52>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
   268ea:	f06f 0201 	mvn.w	r2, #1
   268ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   268f2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	* defined, pin reset will not be available. One GPIO (see
	* Product Specification to see which one) will then be
	* reserved for PinReset and not available as normal GPIO.
	*/
#if defined(CONFIG_GPIO_AS_PINRESET)
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   268f6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   268fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   268fe:	2b00      	cmp	r3, #0
   26900:	db06      	blt.n	26910 <nordicsemi_nrf52832_init+0x6c>
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   26902:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   26906:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2690a:	2b00      	cmp	r3, #0
   2690c:	db00      	blt.n	26910 <nordicsemi_nrf52832_init+0x6c>
   2690e:	bd08      	pop	{r3, pc}
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   26910:	2201      	movs	r2, #1
   26912:	4b1b      	ldr	r3, [pc, #108]	; (26980 <nordicsemi_nrf52832_init+0xdc>)
   26914:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   26918:	4b19      	ldr	r3, [pc, #100]	; (26980 <nordicsemi_nrf52832_init+0xdc>)
   2691a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   2691e:	2b00      	cmp	r3, #0
   26920:	d0fa      	beq.n	26918 <nordicsemi_nrf52832_init+0x74>
			;
		}
		NRF_UICR->PSELRESET[0] = 21;
   26922:	2215      	movs	r2, #21
   26924:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   26928:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   2692c:	4b14      	ldr	r3, [pc, #80]	; (26980 <nordicsemi_nrf52832_init+0xdc>)
   2692e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   26932:	2b00      	cmp	r3, #0
   26934:	d0fa      	beq.n	2692c <nordicsemi_nrf52832_init+0x88>
			;
		}
		NRF_UICR->PSELRESET[1] = 21;
   26936:	2215      	movs	r2, #21
   26938:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2693c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   26940:	4b0f      	ldr	r3, [pc, #60]	; (26980 <nordicsemi_nrf52832_init+0xdc>)
   26942:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   26946:	2b00      	cmp	r3, #0
   26948:	d0fa      	beq.n	26940 <nordicsemi_nrf52832_init+0x9c>
			;
		}
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   2694a:	2200      	movs	r2, #0
   2694c:	4b0c      	ldr	r3, [pc, #48]	; (26980 <nordicsemi_nrf52832_init+0xdc>)
   2694e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   26952:	4b0b      	ldr	r3, [pc, #44]	; (26980 <nordicsemi_nrf52832_init+0xdc>)
   26954:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   26958:	2b00      	cmp	r3, #0
   2695a:	d0fa      	beq.n	26952 <nordicsemi_nrf52832_init+0xae>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   2695c:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   26960:	4908      	ldr	r1, [pc, #32]	; (26984 <nordicsemi_nrf52832_init+0xe0>)
   26962:	68ca      	ldr	r2, [r1, #12]
   26964:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   26968:	4b07      	ldr	r3, [pc, #28]	; (26988 <nordicsemi_nrf52832_init+0xe4>)
   2696a:	4313      	orrs	r3, r2
   2696c:	60cb      	str	r3, [r1, #12]
   2696e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   26972:	bf00      	nop
   26974:	e7fd      	b.n	26972 <nordicsemi_nrf52832_init+0xce>
   26976:	bf00      	nop
   26978:	e000edf0 	.word	0xe000edf0
   2697c:	400005a0 	.word	0x400005a0
   26980:	4001e000 	.word	0x4001e000
   26984:	e000ed00 	.word	0xe000ed00
   26988:	05fa0004 	.word	0x05fa0004

0002698c <clock_init>:

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK_64M;

static void clock_init(void)
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
   2698c:	4a01      	ldr	r2, [pc, #4]	; (26994 <clock_init+0x8>)
   2698e:	4b02      	ldr	r3, [pc, #8]	; (26998 <clock_init+0xc>)
   26990:	601a      	str	r2, [r3, #0]
   26992:	4770      	bx	lr
   26994:	03d09000 	.word	0x03d09000
   26998:	2000c424 	.word	0x2000c424

0002699c <nordicsemi_nrf52_init>:
}

static int nordicsemi_nrf52_init(struct device *arg)
{
   2699c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2699e:	f04f 0320 	mov.w	r3, #32
   269a2:	f3ef 8411 	mrs	r4, BASEPRI
   269a6:	f383 8811 	msr	BASEPRI, r3
	ARG_UNUSED(arg);

	key = irq_lock();

#ifdef CONFIG_SOC_NRF52832
	nordicsemi_nrf52832_init();
   269aa:	f7ff ff7b 	bl	268a4 <nordicsemi_nrf52832_init>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   269ae:	4b05      	ldr	r3, [pc, #20]	; (269c4 <nordicsemi_nrf52_init+0x28>)
   269b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   269b4:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   269b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

	_ClearFaults();

	/* Setup master clock */
	clock_init();
   269b8:	f7ff ffe8 	bl	2698c <clock_init>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   269bc:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   269c0:	2000      	movs	r0, #0
   269c2:	bd10      	pop	{r4, pc}
   269c4:	e000ed00 	.word	0xe000ed00

000269c8 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   269c8:	4808      	ldr	r0, [pc, #32]	; (269ec <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   269ca:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
   269cc:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
   269ce:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
   269d0:	d80b      	bhi.n	269ea <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
   269d2:	6980      	ldr	r0, [r0, #24]
    cmp r0, r1
   269d4:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   269d6:	d008      	beq.n	269ea <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
   269d8:	b500      	push	{lr}
    bl _update_time_slice_before_swap
   269da:	f001 fd1f 	bl	2841c <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
   269de:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   269e2:	4903      	ldr	r1, [pc, #12]	; (269f0 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   269e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   269e8:	600a      	str	r2, [r1, #0]

000269ea <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
   269ea:	4770      	bx	lr
    ldr r0, =_kernel
   269ec:	20002678 	.word	0x20002678
    ldr r1, =_SCS_ICSR
   269f0:	e000ed04 	.word	0xe000ed04

000269f4 <_IntLibInit>:
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
   269f4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   269f6:	e00a      	b.n	26a0e <_IntLibInit+0x1a>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   269f8:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) < 0)
   269fa:	2b00      	cmp	r3, #0
   269fc:	db0a      	blt.n	26a14 <_IntLibInit+0x20>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   269fe:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   26a02:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   26a06:	2120      	movs	r1, #32
   26a08:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
	for (; irq < CONFIG_NUM_IRQS; irq++) {
   26a0c:	3201      	adds	r2, #1
   26a0e:	2a26      	cmp	r2, #38	; 0x26
   26a10:	ddf2      	ble.n	269f8 <_IntLibInit+0x4>
	}
}
   26a12:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26a14:	f002 010f 	and.w	r1, r2, #15
   26a18:	4b02      	ldr	r3, [pc, #8]	; (26a24 <_IntLibInit+0x30>)
   26a1a:	440b      	add	r3, r1
   26a1c:	2120      	movs	r1, #32
   26a1e:	7619      	strb	r1, [r3, #24]
   26a20:	e7f4      	b.n	26a0c <_IntLibInit+0x18>
   26a22:	bf00      	nop
   26a24:	e000ecfc 	.word	0xe000ecfc

00026a28 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   26a28:	490e      	ldr	r1, [pc, #56]	; (26a64 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   26a2a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   26a2c:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   26a30:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
   26a32:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M)
    stmia r0, {v1-v8, ip}
   26a36:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   26a3a:	4f0b      	ldr	r7, [pc, #44]	; (26a68 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   26a3c:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   26a40:	2020      	movs	r0, #32
    msr BASEPRI, r0
   26a42:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
   26a46:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   26a48:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
   26a4a:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
   26a4c:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
   26a4e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   26a50:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   26a52:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_mem_domain
    pop {r2, lr}
#endif /* CONFIG_USERSPACE */

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   26a56:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   26a5a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
   26a5e:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
   26a62:	4770      	bx	lr
    ldr r1, =_kernel
   26a64:	20002678 	.word	0x20002678
    ldr v4, =_SCS_ICSR
   26a68:	e000ed04 	.word	0xe000ed04

00026a6c <__svc>:
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)

    tst lr, #0x4    /* did we come from thread mode ? */
   26a6c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   26a70:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   26a72:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   26a76:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   26a7a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
   26a7c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 1: irq_offload (if configured)
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
   26a80:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    beq _context_switch
   26a84:	d001      	beq.n	26a8a <_context_switch>

    cmp r1, #2
   26a86:	2902      	cmp	r1, #2
    beq _oops
   26a88:	d007      	beq.n	26a9a <_oops>

00026a8a <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
   26a8a:	4040      	eors	r0, r0
    msr BASEPRI, r0
   26a8c:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
   26a90:	4904      	ldr	r1, [pc, #16]	; (26aa4 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
   26a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
   26a96:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
   26a98:	4770      	bx	lr

00026a9a <_oops>:

_oops:
    push {lr}
   26a9a:	b500      	push	{lr}
    blx _do_kernel_oops
   26a9c:	f000 fa82 	bl	26fa4 <_do_kernel_oops>
    pop {pc}
   26aa0:	bd00      	pop	{pc}
   26aa2:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
   26aa4:	e000ed04 	.word	0xe000ed04

00026aa8 <__swap>:
    mov lr,r3
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
    ldr r1, =_kernel
   26aa8:	4904      	ldr	r1, [pc, #16]	; (26abc <__swap+0x14>)
    ldr r2, [r1, #_kernel_offset_to_current]
   26aaa:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
   26aac:	6610      	str	r0, [r2, #96]	; 0x60

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
   26aae:	4904      	ldr	r1, [pc, #16]	; (26ac0 <__swap+0x18>)
    ldr r1, [r1]
   26ab0:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
   26ab2:	6651      	str	r1, [r2, #100]	; 0x64
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
#elif defined(CONFIG_ARMV7_M)
    svc #0
   26ab4:	df00      	svc	0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
   26ab6:	6e50      	ldr	r0, [r2, #100]	; 0x64
    bx lr
   26ab8:	4770      	bx	lr
   26aba:	0000      	.short	0x0000
    ldr r1, =_kernel
   26abc:	20002678 	.word	0x20002678
    ldr r1, =_k_neg_eagain
   26ac0:	00031454 	.word	0x00031454

00026ac4 <_DebugMonitor>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _DebugMonitor(const NANO_ESF *esf)
{
   26ac4:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
   26ac6:	4802      	ldr	r0, [pc, #8]	; (26ad0 <_DebugMonitor+0xc>)
   26ac8:	f7dc fa0a 	bl	2ee0 <printk>
   26acc:	bd08      	pop	{r3, pc}
   26ace:	bf00      	nop
   26ad0:	00031090 	.word	0x00031090

00026ad4 <_ReservedException>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _ReservedException(const NANO_ESF *esf, int fault)
{
   26ad4:	b508      	push	{r3, lr}
   26ad6:	460a      	mov	r2, r1
	ARG_UNUSED(esf);

	PR_EXC("***** %s %d) *****\n",
   26ad8:	290f      	cmp	r1, #15
   26ada:	dd05      	ble.n	26ae8 <_ReservedException+0x14>
   26adc:	4903      	ldr	r1, [pc, #12]	; (26aec <_ReservedException+0x18>)
   26ade:	3a10      	subs	r2, #16
   26ae0:	4803      	ldr	r0, [pc, #12]	; (26af0 <_ReservedException+0x1c>)
   26ae2:	f7dc f9fd 	bl	2ee0 <printk>
   26ae6:	bd08      	pop	{r3, pc}
   26ae8:	4902      	ldr	r1, [pc, #8]	; (26af4 <_ReservedException+0x20>)
   26aea:	e7f8      	b.n	26ade <_ReservedException+0xa>
   26aec:	00031218 	.word	0x00031218
   26af0:	00031234 	.word	0x00031234
   26af4:	00031200 	.word	0x00031200

00026af8 <_FaultThreadShow>:
{
   26af8:	b510      	push	{r4, lr}
   26afa:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   26afc:	f001 fc60 	bl	283c0 <_impl_k_current_get>
	PR_EXC("  Executing thread ID (thread): %p\n"
   26b00:	69a2      	ldr	r2, [r4, #24]
   26b02:	4601      	mov	r1, r0
   26b04:	4801      	ldr	r0, [pc, #4]	; (26b0c <_FaultThreadShow+0x14>)
   26b06:	f7dc f9eb 	bl	2ee0 <printk>
   26b0a:	bd10      	pop	{r4, pc}
   26b0c:	000310c8 	.word	0x000310c8

00026b10 <_MpuFault>:
{
   26b10:	b538      	push	{r3, r4, r5, lr}
   26b12:	4604      	mov	r4, r0
   26b14:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
   26b16:	481e      	ldr	r0, [pc, #120]	; (26b90 <_MpuFault+0x80>)
   26b18:	f7dc f9e2 	bl	2ee0 <printk>
	_FaultThreadShow(esf);
   26b1c:	4620      	mov	r0, r4
   26b1e:	f7ff ffeb 	bl	26af8 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_MSTKERR_Msk) {
   26b22:	4b1c      	ldr	r3, [pc, #112]	; (26b94 <_MpuFault+0x84>)
   26b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26b26:	f013 0f10 	tst.w	r3, #16
   26b2a:	d10f      	bne.n	26b4c <_MpuFault+0x3c>
	} else if (SCB->CFSR & CFSR_MUNSTKERR_Msk) {
   26b2c:	4b19      	ldr	r3, [pc, #100]	; (26b94 <_MpuFault+0x84>)
   26b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26b30:	f013 0f08 	tst.w	r3, #8
   26b34:	d10e      	bne.n	26b54 <_MpuFault+0x44>
	} else if (SCB->CFSR & CFSR_DACCVIOL_Msk) {
   26b36:	4b17      	ldr	r3, [pc, #92]	; (26b94 <_MpuFault+0x84>)
   26b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26b3a:	f013 0f02 	tst.w	r3, #2
   26b3e:	d10d      	bne.n	26b5c <_MpuFault+0x4c>
	} else if (SCB->CFSR & CFSR_IACCVIOL_Msk) {
   26b40:	4b14      	ldr	r3, [pc, #80]	; (26b94 <_MpuFault+0x84>)
   26b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26b44:	f013 0f01 	tst.w	r3, #1
   26b48:	d11d      	bne.n	26b86 <_MpuFault+0x76>
   26b4a:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   26b4c:	4812      	ldr	r0, [pc, #72]	; (26b98 <_MpuFault+0x88>)
   26b4e:	f7dc f9c7 	bl	2ee0 <printk>
   26b52:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   26b54:	4811      	ldr	r0, [pc, #68]	; (26b9c <_MpuFault+0x8c>)
   26b56:	f7dc f9c3 	bl	2ee0 <printk>
   26b5a:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Data Access Violation\n");
   26b5c:	4810      	ldr	r0, [pc, #64]	; (26ba0 <_MpuFault+0x90>)
   26b5e:	f7dc f9bf 	bl	2ee0 <printk>
		if (SCB->CFSR & CFSR_MMARVALID_Msk) {
   26b62:	4b0c      	ldr	r3, [pc, #48]	; (26b94 <_MpuFault+0x84>)
   26b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26b66:	f013 0f80 	tst.w	r3, #128	; 0x80
   26b6a:	d0ee      	beq.n	26b4a <_MpuFault+0x3a>
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->MMFAR);
   26b6c:	4b09      	ldr	r3, [pc, #36]	; (26b94 <_MpuFault+0x84>)
   26b6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
   26b70:	480c      	ldr	r0, [pc, #48]	; (26ba4 <_MpuFault+0x94>)
   26b72:	f7dc f9b5 	bl	2ee0 <printk>
			if (fromHardFault) {
   26b76:	2d00      	cmp	r5, #0
   26b78:	d0e7      	beq.n	26b4a <_MpuFault+0x3a>
				SCB->CFSR &= ~CFSR_MMARVALID_Msk;
   26b7a:	4a06      	ldr	r2, [pc, #24]	; (26b94 <_MpuFault+0x84>)
   26b7c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   26b82:	6293      	str	r3, [r2, #40]	; 0x28
   26b84:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction Access Violation\n");
   26b86:	4808      	ldr	r0, [pc, #32]	; (26ba8 <_MpuFault+0x98>)
   26b88:	f7dc f9aa 	bl	2ee0 <printk>
}
   26b8c:	e7dd      	b.n	26b4a <_MpuFault+0x3a>
   26b8e:	bf00      	nop
   26b90:	00031170 	.word	0x00031170
   26b94:	e000ed00 	.word	0xe000ed00
   26b98:	00031188 	.word	0x00031188
   26b9c:	0003119c 	.word	0x0003119c
   26ba0:	000311b0 	.word	0x000311b0
   26ba4:	000311cc 	.word	0x000311cc
   26ba8:	000311e0 	.word	0x000311e0

00026bac <_BusFault>:
{
   26bac:	b538      	push	{r3, r4, r5, lr}
   26bae:	4604      	mov	r4, r0
   26bb0:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
   26bb2:	4827      	ldr	r0, [pc, #156]	; (26c50 <_BusFault+0xa4>)
   26bb4:	f7dc f994 	bl	2ee0 <printk>
	_FaultThreadShow(esf);
   26bb8:	4620      	mov	r0, r4
   26bba:	f7ff ff9d 	bl	26af8 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_STKERR_Msk) {
   26bbe:	4b25      	ldr	r3, [pc, #148]	; (26c54 <_BusFault+0xa8>)
   26bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26bc2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   26bc6:	d114      	bne.n	26bf2 <_BusFault+0x46>
	} else if (SCB->CFSR & CFSR_UNSTKERR_Msk) {
   26bc8:	4b22      	ldr	r3, [pc, #136]	; (26c54 <_BusFault+0xa8>)
   26bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26bcc:	f413 6f00 	tst.w	r3, #2048	; 0x800
   26bd0:	d113      	bne.n	26bfa <_BusFault+0x4e>
	} else if (SCB->CFSR & CFSR_PRECISERR_Msk) {
   26bd2:	4b20      	ldr	r3, [pc, #128]	; (26c54 <_BusFault+0xa8>)
   26bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26bd6:	f413 7f00 	tst.w	r3, #512	; 0x200
   26bda:	d112      	bne.n	26c02 <_BusFault+0x56>
	} else if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   26bdc:	4b1d      	ldr	r3, [pc, #116]	; (26c54 <_BusFault+0xa8>)
   26bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26be0:	f413 6f80 	tst.w	r3, #1024	; 0x400
   26be4:	d12b      	bne.n	26c3e <_BusFault+0x92>
	} else if (SCB->CFSR & CFSR_IBUSERR_Msk) {
   26be6:	4b1b      	ldr	r3, [pc, #108]	; (26c54 <_BusFault+0xa8>)
   26be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26bea:	f413 7f80 	tst.w	r3, #256	; 0x100
   26bee:	d12a      	bne.n	26c46 <_BusFault+0x9a>
   26bf0:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   26bf2:	4819      	ldr	r0, [pc, #100]	; (26c58 <_BusFault+0xac>)
   26bf4:	f7dc f974 	bl	2ee0 <printk>
   26bf8:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   26bfa:	4818      	ldr	r0, [pc, #96]	; (26c5c <_BusFault+0xb0>)
   26bfc:	f7dc f970 	bl	2ee0 <printk>
   26c00:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Precise data bus error\n");
   26c02:	4817      	ldr	r0, [pc, #92]	; (26c60 <_BusFault+0xb4>)
   26c04:	f7dc f96c 	bl	2ee0 <printk>
		if (SCB->CFSR & CFSR_BFARVALID_Msk) {
   26c08:	4b12      	ldr	r3, [pc, #72]	; (26c54 <_BusFault+0xa8>)
   26c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c0c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   26c10:	d108      	bne.n	26c24 <_BusFault+0x78>
		if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   26c12:	4b10      	ldr	r3, [pc, #64]	; (26c54 <_BusFault+0xa8>)
   26c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c16:	f413 6f80 	tst.w	r3, #1024	; 0x400
   26c1a:	d0e9      	beq.n	26bf0 <_BusFault+0x44>
			PR_EXC("  Imprecise data bus error\n");
   26c1c:	4811      	ldr	r0, [pc, #68]	; (26c64 <_BusFault+0xb8>)
   26c1e:	f7dc f95f 	bl	2ee0 <printk>
   26c22:	bd38      	pop	{r3, r4, r5, pc}
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->BFAR);
   26c24:	4b0b      	ldr	r3, [pc, #44]	; (26c54 <_BusFault+0xa8>)
   26c26:	6b99      	ldr	r1, [r3, #56]	; 0x38
   26c28:	480f      	ldr	r0, [pc, #60]	; (26c68 <_BusFault+0xbc>)
   26c2a:	f7dc f959 	bl	2ee0 <printk>
			if (fromHardFault) {
   26c2e:	2d00      	cmp	r5, #0
   26c30:	d0ef      	beq.n	26c12 <_BusFault+0x66>
				SCB->CFSR &= ~CFSR_BFARVALID_Msk;
   26c32:	4a08      	ldr	r2, [pc, #32]	; (26c54 <_BusFault+0xa8>)
   26c34:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26c36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   26c3a:	6293      	str	r3, [r2, #40]	; 0x28
   26c3c:	e7e9      	b.n	26c12 <_BusFault+0x66>
		PR_EXC("  Imprecise data bus error\n");
   26c3e:	4809      	ldr	r0, [pc, #36]	; (26c64 <_BusFault+0xb8>)
   26c40:	f7dc f94e 	bl	2ee0 <printk>
   26c44:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction bus error\n");
   26c46:	4809      	ldr	r0, [pc, #36]	; (26c6c <_BusFault+0xc0>)
   26c48:	f7dc f94a 	bl	2ee0 <printk>
}
   26c4c:	e7d0      	b.n	26bf0 <_BusFault+0x44>
   26c4e:	bf00      	nop
   26c50:	00031024 	.word	0x00031024
   26c54:	e000ed00 	.word	0xe000ed00
   26c58:	00031188 	.word	0x00031188
   26c5c:	0003119c 	.word	0x0003119c
   26c60:	0003103c 	.word	0x0003103c
   26c64:	00031058 	.word	0x00031058
   26c68:	000311cc 	.word	0x000311cc
   26c6c:	00031074 	.word	0x00031074

00026c70 <_UsageFault>:
{
   26c70:	b510      	push	{r4, lr}
   26c72:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
   26c74:	4821      	ldr	r0, [pc, #132]	; (26cfc <_UsageFault+0x8c>)
   26c76:	f7dc f933 	bl	2ee0 <printk>
	_FaultThreadShow(esf);
   26c7a:	4620      	mov	r0, r4
   26c7c:	f7ff ff3c 	bl	26af8 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_DIVBYZERO_Msk) {
   26c80:	4b1f      	ldr	r3, [pc, #124]	; (26d00 <_UsageFault+0x90>)
   26c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c84:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   26c88:	d120      	bne.n	26ccc <_UsageFault+0x5c>
	if (SCB->CFSR & CFSR_UNALIGNED_Msk) {
   26c8a:	4b1d      	ldr	r3, [pc, #116]	; (26d00 <_UsageFault+0x90>)
   26c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c8e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   26c92:	d11f      	bne.n	26cd4 <_UsageFault+0x64>
	if (SCB->CFSR & CFSR_NOCP_Msk) {
   26c94:	4b1a      	ldr	r3, [pc, #104]	; (26d00 <_UsageFault+0x90>)
   26c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c98:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   26c9c:	d11e      	bne.n	26cdc <_UsageFault+0x6c>
	if (SCB->CFSR & CFSR_INVPC_Msk) {
   26c9e:	4b18      	ldr	r3, [pc, #96]	; (26d00 <_UsageFault+0x90>)
   26ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26ca2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   26ca6:	d11d      	bne.n	26ce4 <_UsageFault+0x74>
	if (SCB->CFSR & CFSR_INVSTATE_Msk) {
   26ca8:	4b15      	ldr	r3, [pc, #84]	; (26d00 <_UsageFault+0x90>)
   26caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26cac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   26cb0:	d11c      	bne.n	26cec <_UsageFault+0x7c>
	if (SCB->CFSR & CFSR_UNDEFINSTR_Msk) {
   26cb2:	4b13      	ldr	r3, [pc, #76]	; (26d00 <_UsageFault+0x90>)
   26cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26cb6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   26cba:	d11b      	bne.n	26cf4 <_UsageFault+0x84>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   26cbc:	4a10      	ldr	r2, [pc, #64]	; (26d00 <_UsageFault+0x90>)
   26cbe:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26cc0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   26cc4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   26cc8:	6293      	str	r3, [r2, #40]	; 0x28
   26cca:	bd10      	pop	{r4, pc}
		PR_EXC("  Division by zero\n");
   26ccc:	480d      	ldr	r0, [pc, #52]	; (26d04 <_UsageFault+0x94>)
   26cce:	f7dc f907 	bl	2ee0 <printk>
   26cd2:	e7da      	b.n	26c8a <_UsageFault+0x1a>
		PR_EXC("  Unaligned memory access\n");
   26cd4:	480c      	ldr	r0, [pc, #48]	; (26d08 <_UsageFault+0x98>)
   26cd6:	f7dc f903 	bl	2ee0 <printk>
   26cda:	e7db      	b.n	26c94 <_UsageFault+0x24>
		PR_EXC("  No coprocessor instructions\n");
   26cdc:	480b      	ldr	r0, [pc, #44]	; (26d0c <_UsageFault+0x9c>)
   26cde:	f7dc f8ff 	bl	2ee0 <printk>
   26ce2:	e7dc      	b.n	26c9e <_UsageFault+0x2e>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
   26ce4:	480a      	ldr	r0, [pc, #40]	; (26d10 <_UsageFault+0xa0>)
   26ce6:	f7dc f8fb 	bl	2ee0 <printk>
   26cea:	e7dd      	b.n	26ca8 <_UsageFault+0x38>
		PR_EXC("  Illegal use of the EPSR\n");
   26cec:	4809      	ldr	r0, [pc, #36]	; (26d14 <_UsageFault+0xa4>)
   26cee:	f7dc f8f7 	bl	2ee0 <printk>
   26cf2:	e7de      	b.n	26cb2 <_UsageFault+0x42>
		PR_EXC("  Attempt to execute undefined instruction\n");
   26cf4:	4808      	ldr	r0, [pc, #32]	; (26d18 <_UsageFault+0xa8>)
   26cf6:	f7dc f8f3 	bl	2ee0 <printk>
   26cfa:	e7df      	b.n	26cbc <_UsageFault+0x4c>
   26cfc:	00031248 	.word	0x00031248
   26d00:	e000ed00 	.word	0xe000ed00
   26d04:	00031264 	.word	0x00031264
   26d08:	00031278 	.word	0x00031278
   26d0c:	00031294 	.word	0x00031294
   26d10:	000312b4 	.word	0x000312b4
   26d14:	000312dc 	.word	0x000312dc
   26d18:	000312f8 	.word	0x000312f8

00026d1c <_HardFault>:
{
   26d1c:	b510      	push	{r4, lr}
   26d1e:	4604      	mov	r4, r0
	PR_EXC("***** HARD FAULT *****\n");
   26d20:	4816      	ldr	r0, [pc, #88]	; (26d7c <_HardFault+0x60>)
   26d22:	f7dc f8dd 	bl	2ee0 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
   26d26:	4b16      	ldr	r3, [pc, #88]	; (26d80 <_HardFault+0x64>)
   26d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26d2a:	f013 0f02 	tst.w	r3, #2
   26d2e:	d105      	bne.n	26d3c <_HardFault+0x20>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
   26d30:	4b13      	ldr	r3, [pc, #76]	; (26d80 <_HardFault+0x64>)
   26d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26d34:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   26d38:	d104      	bne.n	26d44 <_HardFault+0x28>
   26d3a:	bd10      	pop	{r4, pc}
		PR_EXC("  Bus fault on vector table read\n");
   26d3c:	4811      	ldr	r0, [pc, #68]	; (26d84 <_HardFault+0x68>)
   26d3e:	f7dc f8cf 	bl	2ee0 <printk>
   26d42:	bd10      	pop	{r4, pc}
		PR_EXC("  Fault escalation (see below)\n");
   26d44:	4810      	ldr	r0, [pc, #64]	; (26d88 <_HardFault+0x6c>)
   26d46:	f7dc f8cb 	bl	2ee0 <printk>
		if (SCB_MMFSR) {
   26d4a:	4b10      	ldr	r3, [pc, #64]	; (26d8c <_HardFault+0x70>)
   26d4c:	781b      	ldrb	r3, [r3, #0]
   26d4e:	b95b      	cbnz	r3, 26d68 <_HardFault+0x4c>
		} else if (SCB_BFSR) {
   26d50:	4b0f      	ldr	r3, [pc, #60]	; (26d90 <_HardFault+0x74>)
   26d52:	781b      	ldrb	r3, [r3, #0]
   26d54:	b96b      	cbnz	r3, 26d72 <_HardFault+0x56>
		} else if (SCB_UFSR) {
   26d56:	4b0f      	ldr	r3, [pc, #60]	; (26d94 <_HardFault+0x78>)
   26d58:	881b      	ldrh	r3, [r3, #0]
   26d5a:	b29b      	uxth	r3, r3
   26d5c:	2b00      	cmp	r3, #0
   26d5e:	d0ec      	beq.n	26d3a <_HardFault+0x1e>
			_UsageFault(esf);
   26d60:	4620      	mov	r0, r4
   26d62:	f7ff ff85 	bl	26c70 <_UsageFault>
}
   26d66:	e7e8      	b.n	26d3a <_HardFault+0x1e>
			_MpuFault(esf, 1);
   26d68:	2101      	movs	r1, #1
   26d6a:	4620      	mov	r0, r4
   26d6c:	f7ff fed0 	bl	26b10 <_MpuFault>
   26d70:	bd10      	pop	{r4, pc}
			_BusFault(esf, 1);
   26d72:	2101      	movs	r1, #1
   26d74:	4620      	mov	r0, r4
   26d76:	f7ff ff19 	bl	26bac <_BusFault>
   26d7a:	bd10      	pop	{r4, pc}
   26d7c:	00031114 	.word	0x00031114
   26d80:	e000ed00 	.word	0xe000ed00
   26d84:	0003112c 	.word	0x0003112c
   26d88:	00031150 	.word	0x00031150
   26d8c:	e000ed28 	.word	0xe000ed28
   26d90:	e000ed29 	.word	0xe000ed29
   26d94:	e000ed2c 	.word	0xe000ed2c

00026d98 <_FaultDump>:
 *   Address: 0xff001234
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
   26d98:	b508      	push	{r3, lr}
	switch (fault) {
   26d9a:	1ecb      	subs	r3, r1, #3
   26d9c:	2b09      	cmp	r3, #9
   26d9e:	d817      	bhi.n	26dd0 <_FaultDump+0x38>
   26da0:	e8df f003 	tbb	[pc, r3]
   26da4:	100c0805 	.word	0x100c0805
   26da8:	16161616 	.word	0x16161616
   26dac:	1316      	.short	0x1316
	case 3:
		_HardFault(esf);
   26dae:	f7ff ffb5 	bl	26d1c <_HardFault>
		break;
   26db2:	bd08      	pop	{r3, pc}
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	case 4:
		_MpuFault(esf, 0);
   26db4:	2100      	movs	r1, #0
   26db6:	f7ff feab 	bl	26b10 <_MpuFault>
		break;
   26dba:	bd08      	pop	{r3, pc}
	case 5:
		_BusFault(esf, 0);
   26dbc:	2100      	movs	r1, #0
   26dbe:	f7ff fef5 	bl	26bac <_BusFault>
		break;
   26dc2:	bd08      	pop	{r3, pc}
	case 6:
		_UsageFault(esf);
   26dc4:	f7ff ff54 	bl	26c70 <_UsageFault>
		break;
   26dc8:	bd08      	pop	{r3, pc}
	case 12:
		_DebugMonitor(esf);
   26dca:	f7ff fe7b 	bl	26ac4 <_DebugMonitor>
		break;
   26dce:	bd08      	pop	{r3, pc}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	default:
		_ReservedException(esf, fault);
   26dd0:	f7ff fe80 	bl	26ad4 <_ReservedException>
   26dd4:	bd08      	pop	{r3, pc}
	...

00026dd8 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
   26dd8:	b510      	push	{r4, lr}
   26dda:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   26ddc:	4b05      	ldr	r3, [pc, #20]	; (26df4 <_Fault+0x1c>)
   26dde:	6859      	ldr	r1, [r3, #4]

	FAULT_DUMP(esf, fault);
   26de0:	f3c1 0108 	ubfx	r1, r1, #0, #9
   26de4:	f7ff ffd8 	bl	26d98 <_FaultDump>

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
   26de8:	4621      	mov	r1, r4
   26dea:	2000      	movs	r0, #0
   26dec:	f000 f8e0 	bl	26fb0 <_SysFatalErrorHandler>
   26df0:	bd10      	pop	{r4, pc}
   26df2:	bf00      	nop
   26df4:	e000ed00 	.word	0xe000ed00

00026df8 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   26df8:	4a02      	ldr	r2, [pc, #8]	; (26e04 <_FaultInit+0xc>)
   26dfa:	6953      	ldr	r3, [r2, #20]
   26dfc:	f043 0310 	orr.w	r3, r3, #16
   26e00:	6153      	str	r3, [r2, #20]
   26e02:	4770      	bx	lr
   26e04:	e000ed00 	.word	0xe000ed00

00026e08 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   26e08:	b243      	sxtb	r3, r0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   26e0a:	095b      	lsrs	r3, r3, #5
   26e0c:	f000 001f 	and.w	r0, r0, #31
   26e10:	2201      	movs	r2, #1
   26e12:	fa02 f000 	lsl.w	r0, r2, r0
   26e16:	4a02      	ldr	r2, [pc, #8]	; (26e20 <_arch_irq_enable+0x18>)
   26e18:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   26e1c:	4770      	bx	lr
   26e1e:	bf00      	nop
   26e20:	e000e100 	.word	0xe000e100

00026e24 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   26e24:	b243      	sxtb	r3, r0
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   26e26:	095b      	lsrs	r3, r3, #5
   26e28:	f000 001f 	and.w	r0, r0, #31
   26e2c:	2201      	movs	r2, #1
   26e2e:	fa02 f000 	lsl.w	r0, r2, r0
   26e32:	3320      	adds	r3, #32
   26e34:	4a01      	ldr	r2, [pc, #4]	; (26e3c <_arch_irq_disable+0x18>)
   26e36:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   26e3a:	4770      	bx	lr
   26e3c:	e000e100 	.word	0xe000e100

00026e40 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
   26e40:	0942      	lsrs	r2, r0, #5
   26e42:	4b05      	ldr	r3, [pc, #20]	; (26e58 <_arch_irq_is_enabled+0x18>)
   26e44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   26e48:	f000 001f 	and.w	r0, r0, #31
   26e4c:	2301      	movs	r3, #1
   26e4e:	fa03 f000 	lsl.w	r0, r3, r0
}
   26e52:	4010      	ands	r0, r2
   26e54:	4770      	bx	lr
   26e56:	bf00      	nop
   26e58:	e000e100 	.word	0xe000e100

00026e5c <_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   26e5c:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   26e5e:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) < 0)
   26e60:	2b00      	cmp	r3, #0
   26e62:	db08      	blt.n	26e76 <_irq_priority_set+0x1a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26e64:	0149      	lsls	r1, r1, #5
   26e66:	b2c9      	uxtb	r1, r1
   26e68:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   26e6c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   26e70:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   26e74:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26e76:	f000 000f 	and.w	r0, r0, #15
   26e7a:	0149      	lsls	r1, r1, #5
   26e7c:	b2c9      	uxtb	r1, r1
   26e7e:	4b01      	ldr	r3, [pc, #4]	; (26e84 <_irq_priority_set+0x28>)
   26e80:	5419      	strb	r1, [r3, r0]
   26e82:	4770      	bx	lr
   26e84:	e000ed14 	.word	0xe000ed14

00026e88 <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
   26e88:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	__reserved();
   26e8a:	f000 f847 	bl	26f1c <__bus_fault>
   26e8e:	bd08      	pop	{r3, pc}

00026e90 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   26e90:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   26e92:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	if (_kernel.idle) {
   26e94:	4b04      	ldr	r3, [pc, #16]	; (26ea8 <_arch_isr_direct_pm+0x18>)
   26e96:	6958      	ldr	r0, [r3, #20]
   26e98:	b908      	cbnz	r0, 26e9e <_arch_isr_direct_pm+0xe>
	}

#if defined(CONFIG_ARMV6_M)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("cpsie i" : : : "memory");
   26e9a:	b662      	cpsie	i
   26e9c:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   26e9e:	2200      	movs	r2, #0
   26ea0:	615a      	str	r2, [r3, #20]
		_sys_power_save_idle_exit(idle_val);
   26ea2:	f000 f9b5 	bl	27210 <_sys_power_save_idle_exit>
   26ea6:	e7f8      	b.n	26e9a <_arch_isr_direct_pm+0xa>
   26ea8:	20002678 	.word	0x20002678

00026eac <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   26eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26eae:	4605      	mov	r5, r0
   26eb0:	460c      	mov	r4, r1
   26eb2:	4616      	mov	r6, r2
   26eb4:	461f      	mov	r7, r3
	ARG_UNUSED(pStack);
	ARG_UNUSED(stackSize);
#endif

#ifdef CONFIG_INIT_STACKS
	memset(pStack, 0xaa, stackSize);
   26eb6:	21aa      	movs	r1, #170	; 0xaa
   26eb8:	4620      	mov	r0, r4
   26eba:	f002 fc0d 	bl	296d8 <memset>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   26ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26ec0:	2204      	movs	r2, #4
   26ec2:	9909      	ldr	r1, [sp, #36]	; 0x24
   26ec4:	4628      	mov	r0, r5
   26ec6:	f001 ff51 	bl	28d6c <_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   26eca:	2300      	movs	r3, #0
   26ecc:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
   26ece:	652b      	str	r3, [r5, #80]	; 0x50
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
   26ed0:	65ac      	str	r4, [r5, #88]	; 0x58
	thread->stack_info.size = (u32_t)stackSize;
   26ed2:	65ee      	str	r6, [r5, #92]	; 0x5c
	struct __esf *pInitCtx;
	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   26ed4:	f1a6 0120 	sub.w	r1, r6, #32
   26ed8:	4421      	add	r1, r4
   26eda:	f021 0107 	bic.w	r1, r1, #7
						     sizeof(struct __esf)));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
   26ede:	4a08      	ldr	r2, [pc, #32]	; (26f00 <_new_thread+0x54>)
   26ee0:	f022 0201 	bic.w	r2, r2, #1
   26ee4:	618a      	str	r2, [r1, #24]
	pInitCtx->a1 = (u32_t)pEntry;
   26ee6:	600f      	str	r7, [r1, #0]
	pInitCtx->a2 = (u32_t)parameter1;
   26ee8:	9a06      	ldr	r2, [sp, #24]
   26eea:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
   26eec:	9a07      	ldr	r2, [sp, #28]
   26eee:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
   26ef0:	9a08      	ldr	r2, [sp, #32]
   26ef2:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
   26ef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   26ef8:	61ca      	str	r2, [r1, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
   26efa:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
   26efc:	662b      	str	r3, [r5, #96]	; 0x60
   26efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26f00:	00028a55 	.word	0x00028a55

00026f04 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
   26f04:	4901      	ldr	r1, [pc, #4]	; (26f0c <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   26f06:	2210      	movs	r2, #16
	str r2, [r1]
   26f08:	600a      	str	r2, [r1, #0]
	bx lr
   26f0a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   26f0c:	e000ed10 	.word	0xe000ed10

00026f10 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M)
	cpsie i
#elif defined(CONFIG_ARMV7_M)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   26f10:	4040      	eors	r0, r0
	msr BASEPRI, r0
   26f12:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
   26f16:	bf30      	wfi

	bx lr
   26f18:	4770      	bx	lr
   26f1a:	bf00      	nop

00026f1c <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M)
	/* force unlock interrupts */
	eors.n r0, r0
   26f1c:	4040      	eors	r0, r0
	msr BASEPRI, r0
   26f1e:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
   26f22:	f8df c01c 	ldr.w	ip, [pc, #28]	; 26f40 <__bus_fault+0x24>
	ldr ip, [ip]
   26f26:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
   26f2a:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
   26f2e:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
   26f30:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
   26f34:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
   26f38:	b500      	push	{lr}
	bl _Fault
   26f3a:	f7ff ff4d 	bl	26dd8 <_Fault>

	pop {pc}
   26f3e:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
   26f40:	e000ed04 	.word	0xe000ed04

00026f44 <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   26f44:	b538      	push	{r3, r4, r5, lr}
   26f46:	4604      	mov	r4, r0
   26f48:	460d      	mov	r5, r1
	switch (reason) {
   26f4a:	2804      	cmp	r0, #4
   26f4c:	d017      	beq.n	26f7e <_NanoFatalErrorHandler+0x3a>
   26f4e:	2805      	cmp	r0, #5
   26f50:	d019      	beq.n	26f86 <_NanoFatalErrorHandler+0x42>
   26f52:	2803      	cmp	r0, #3
   26f54:	d004      	beq.n	26f60 <_NanoFatalErrorHandler+0x1c>
	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
   26f56:	4601      	mov	r1, r0
   26f58:	480d      	ldr	r0, [pc, #52]	; (26f90 <_NanoFatalErrorHandler+0x4c>)
   26f5a:	f7db ffc1 	bl	2ee0 <printk>
		break;
   26f5e:	e002      	b.n	26f66 <_NanoFatalErrorHandler+0x22>
		printk("**** Kernel Allocation Failure! ****\n");
   26f60:	480c      	ldr	r0, [pc, #48]	; (26f94 <_NanoFatalErrorHandler+0x50>)
   26f62:	f7db ffbd 	bl	2ee0 <printk>
   26f66:	f001 fa2b 	bl	283c0 <_impl_k_current_get>
	}
	printk("Current thread ID = %p\n"
   26f6a:	69aa      	ldr	r2, [r5, #24]
   26f6c:	4601      	mov	r1, r0
   26f6e:	480a      	ldr	r0, [pc, #40]	; (26f98 <_NanoFatalErrorHandler+0x54>)
   26f70:	f7db ffb6 	bl	2ee0 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
   26f74:	4629      	mov	r1, r5
   26f76:	4620      	mov	r0, r4
   26f78:	f000 f81a 	bl	26fb0 <_SysFatalErrorHandler>
   26f7c:	bd38      	pop	{r3, r4, r5, pc}
		printk("***** Kernel OOPS! *****\n");
   26f7e:	4807      	ldr	r0, [pc, #28]	; (26f9c <_NanoFatalErrorHandler+0x58>)
   26f80:	f7db ffae 	bl	2ee0 <printk>
		break;
   26f84:	e7ef      	b.n	26f66 <_NanoFatalErrorHandler+0x22>
		printk("***** Kernel Panic! *****\n");
   26f86:	4806      	ldr	r0, [pc, #24]	; (26fa0 <_NanoFatalErrorHandler+0x5c>)
   26f88:	f7db ffaa 	bl	2ee0 <printk>
		break;
   26f8c:	e7eb      	b.n	26f66 <_NanoFatalErrorHandler+0x22>
   26f8e:	bf00      	nop
   26f90:	00031384 	.word	0x00031384
   26f94:	00031324 	.word	0x00031324
   26f98:	000313a8 	.word	0x000313a8
   26f9c:	0003134c 	.word	0x0003134c
   26fa0:	00031368 	.word	0x00031368

00026fa4 <_do_kernel_oops>:
}

void _do_kernel_oops(const NANO_ESF *esf)
{
   26fa4:	b508      	push	{r3, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
   26fa6:	4601      	mov	r1, r0
   26fa8:	6800      	ldr	r0, [r0, #0]
   26faa:	f7ff ffcb 	bl	26f44 <_NanoFatalErrorHandler>
   26fae:	bd08      	pop	{r3, pc}

00026fb0 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
   26fb0:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   26fb2:	2805      	cmp	r0, #5
   26fb4:	d00c      	beq.n	26fd0 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
   26fb6:	f001 fd31 	bl	28a1c <k_is_in_isr>
   26fba:	b910      	cbnz	r0, 26fc2 <_SysFatalErrorHandler+0x12>
   26fbc:	f001 fd42 	bl	28a44 <_is_thread_essential>
   26fc0:	b158      	cbz	r0, 26fda <_SysFatalErrorHandler+0x2a>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
   26fc2:	f001 fd2b 	bl	28a1c <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
   26fc6:	b130      	cbz	r0, 26fd6 <_SysFatalErrorHandler+0x26>
   26fc8:	4908      	ldr	r1, [pc, #32]	; (26fec <_SysFatalErrorHandler+0x3c>)
   26fca:	4809      	ldr	r0, [pc, #36]	; (26ff0 <_SysFatalErrorHandler+0x40>)
   26fcc:	f7db ff88 	bl	2ee0 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
   26fd0:	f7ff ff9e 	bl	26f10 <k_cpu_idle>
   26fd4:	e7fc      	b.n	26fd0 <_SysFatalErrorHandler+0x20>
		printk("Fatal fault in %s! Spinning...\n",
   26fd6:	4907      	ldr	r1, [pc, #28]	; (26ff4 <_SysFatalErrorHandler+0x44>)
   26fd8:	e7f7      	b.n	26fca <_SysFatalErrorHandler+0x1a>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
   26fda:	4c07      	ldr	r4, [pc, #28]	; (26ff8 <_SysFatalErrorHandler+0x48>)
   26fdc:	68a1      	ldr	r1, [r4, #8]
   26fde:	4807      	ldr	r0, [pc, #28]	; (26ffc <_SysFatalErrorHandler+0x4c>)
   26fe0:	f7db ff7e 	bl	2ee0 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   26fe4:	68a0      	ldr	r0, [r4, #8]
   26fe6:	f000 f80b 	bl	27000 <_impl_k_thread_abort>
	return;
   26fea:	bd10      	pop	{r4, pc}
   26fec:	000307f4 	.word	0x000307f4
   26ff0:	000313f8 	.word	0x000313f8
   26ff4:	000313e4 	.word	0x000313e4
   26ff8:	20002678 	.word	0x20002678
   26ffc:	00031418 	.word	0x00031418

00027000 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
   27000:	b538      	push	{r3, r4, r5, lr}
   27002:	4605      	mov	r5, r0
	__asm__ volatile(
   27004:	f04f 0320 	mov.w	r3, #32
   27008:	f3ef 8411 	mrs	r4, BASEPRI
   2700c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
   27010:	f001 fe28 	bl	28c64 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
   27014:	4b0b      	ldr	r3, [pc, #44]	; (27044 <_impl_k_thread_abort+0x44>)
   27016:	689b      	ldr	r3, [r3, #8]
   27018:	429d      	cmp	r5, r3
   2701a:	d003      	beq.n	27024 <_impl_k_thread_abort+0x24>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
   2701c:	4620      	mov	r0, r4
   2701e:	f001 fa03 	bl	28428 <_reschedule_threads>
   27022:	bd38      	pop	{r3, r4, r5, pc}
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   27024:	4b08      	ldr	r3, [pc, #32]	; (27048 <_impl_k_thread_abort+0x48>)
   27026:	685b      	ldr	r3, [r3, #4]
   27028:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2702c:	b12b      	cbz	r3, 2703a <_impl_k_thread_abort+0x3a>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2702e:	4a06      	ldr	r2, [pc, #24]	; (27048 <_impl_k_thread_abort+0x48>)
   27030:	6853      	ldr	r3, [r2, #4]
   27032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   27036:	6053      	str	r3, [r2, #4]
   27038:	e7f0      	b.n	2701c <_impl_k_thread_abort+0x1c>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   2703a:	f001 f9ef 	bl	2841c <_update_time_slice_before_swap>
#endif

	return __swap(key);
   2703e:	4620      	mov	r0, r4
   27040:	f7ff fd32 	bl	26aa8 <__swap>
   27044:	20002678 	.word	0x20002678
   27048:	e000ed00 	.word	0xe000ed00

0002704c <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
   2704c:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   2704e:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   27050:	4a0b      	ldr	r2, [pc, #44]	; (27080 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   27052:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   27054:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M)
	ittt ne
   27056:	bf1e      	ittt	ne
	movne	r1, #0
   27058:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   2705a:	6151      	strne	r1, [r2, #20]
		blxne	_sys_power_save_idle_exit
   2705c:	f000 f8d8 	blne	27210 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   27060:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
   27062:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M)
	sub r0, r0, #16	/* get IRQ number */
   27066:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   2706a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
   2706e:	4905      	ldr	r1, [pc, #20]	; (27084 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   27070:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   27072:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
   27074:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M)
	pop {lr}
   27076:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
   2707a:	f7ff bca5 	b.w	269c8 <_ExcExit>
   2707e:	0000      	.short	0x0000
	ldr r2, =_kernel
   27080:	20002678 	.word	0x20002678
	ldr r1, =_sw_isr_table
   27084:	000000dc 	.word	0x000000dc

00027088 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   27088:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2708a:	f380 8811 	msr	BASEPRI, r0
    /* board-specific watchdog initialization is necessary */
    bl _WdogInit
#endif

#ifdef CONFIG_INIT_STACKS
    ldr r0, =_interrupt_stack
   2708e:	4809      	ldr	r0, [pc, #36]	; (270b4 <__reset+0x2c>)
    ldr r1, =0xaa
   27090:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE
   27094:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
   27098:	f002 fb1e 	bl	296d8 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
   2709c:	4805      	ldr	r0, [pc, #20]	; (270b4 <__reset+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   2709e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   270a2:	1840      	adds	r0, r0, r1
    msr PSP, r0
   270a4:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
   270a8:	2002      	movs	r0, #2
    msr CONTROL, r0
   270aa:	f380 8814 	msr	CONTROL, r0

    b _PrepC
   270ae:	f000 b807 	b.w	270c0 <_PrepC>
   270b2:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   270b4:	2000ab60 	.word	0x2000ab60

000270b8 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
   270b8:	bf30      	wfi
    b _SysNmiOnReset
   270ba:	f7ff bffd 	b.w	270b8 <_SysNmiOnReset>
   270be:	bf00      	nop

000270c0 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
   270c0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   270c2:	4a07      	ldr	r2, [pc, #28]	; (270e0 <_PrepC+0x20>)
   270c4:	4b07      	ldr	r3, [pc, #28]	; (270e4 <_PrepC+0x24>)
   270c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   270ca:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   270cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   270d0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
   270d4:	f000 f9d6 	bl	27484 <_bss_zero>
	_data_copy();
   270d8:	f000 f9e0 	bl	2749c <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
   270dc:	f000 fa00 	bl	274e0 <_Cstart>
   270e0:	e000ed00 	.word	0xe000ed00
   270e4:	00000000 	.word	0x00000000

000270e8 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   270e8:	b508      	push	{r3, lr}
	handler();
   270ea:	f7ff ffe5 	bl	270b8 <_SysNmiOnReset>
	_ExcExit();
   270ee:	f7ff fc6b 	bl	269c8 <_ExcExit>
   270f2:	bd08      	pop	{r3, pc}

000270f4 <_region_init>:

static void _region_init(u32_t index, u32_t region_addr,
			 u32_t region_attr)
{
	/* Select the region you want to access */
	ARM_MPU_DEV->rnr = index;
   270f4:	4b05      	ldr	r3, [pc, #20]	; (2710c <_region_init+0x18>)
   270f6:	6098      	str	r0, [r3, #8]
	/* Configure the region */
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   270f8:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
   270fc:	4308      	orrs	r0, r1
   270fe:	f040 0010 	orr.w	r0, r0, #16
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   27102:	60d8      	str	r0, [r3, #12]
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
   27104:	f042 0201 	orr.w	r2, r2, #1
   27108:	611a      	str	r2, [r3, #16]
   2710a:	4770      	bx	lr
   2710c:	e000ed90 	.word	0xe000ed90

00027110 <_arm_mpu_config>:
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
   27110:	4b14      	ldr	r3, [pc, #80]	; (27164 <_arm_mpu_config+0x54>)
   27112:	681a      	ldr	r2, [r3, #0]
	u32_t type = ARM_MPU_DEV->type;
   27114:	4b14      	ldr	r3, [pc, #80]	; (27168 <_arm_mpu_config+0x58>)
   27116:	681b      	ldr	r3, [r3, #0]
	if (mpu_config.num_regions > _get_num_regions()) {
   27118:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2711c:	429a      	cmp	r2, r3
   2711e:	d81f      	bhi.n	27160 <_arm_mpu_config+0x50>
{
   27120:	b510      	push	{r4, lr}
		return;
	}

	/* Disable MPU */
	ARM_MPU_DEV->ctrl = 0;
   27122:	2400      	movs	r4, #0
   27124:	4b10      	ldr	r3, [pc, #64]	; (27168 <_arm_mpu_config+0x58>)
   27126:	605c      	str	r4, [r3, #4]

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   27128:	e00b      	b.n	27142 <_arm_mpu_config+0x32>
		_region_init(r_index,
			     mpu_config.mpu_regions[r_index].base,
   2712a:	4b0e      	ldr	r3, [pc, #56]	; (27164 <_arm_mpu_config+0x54>)
   2712c:	6859      	ldr	r1, [r3, #4]
   2712e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   27132:	0093      	lsls	r3, r2, #2
   27134:	18ca      	adds	r2, r1, r3
		_region_init(r_index,
   27136:	6892      	ldr	r2, [r2, #8]
   27138:	58c9      	ldr	r1, [r1, r3]
   2713a:	4620      	mov	r0, r4
   2713c:	f7ff ffda 	bl	270f4 <_region_init>
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   27140:	3401      	adds	r4, #1
   27142:	4b08      	ldr	r3, [pc, #32]	; (27164 <_arm_mpu_config+0x54>)
   27144:	681b      	ldr	r3, [r3, #0]
   27146:	429c      	cmp	r4, r3
   27148:	d3ef      	bcc.n	2712a <_arm_mpu_config+0x1a>
			     mpu_config.mpu_regions[r_index].attr);
	}

	/* Enable MPU */
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
   2714a:	2205      	movs	r2, #5
   2714c:	4b06      	ldr	r3, [pc, #24]	; (27168 <_arm_mpu_config+0x58>)
   2714e:	605a      	str	r2, [r3, #4]

	arm_mpu_enabled = 1;
   27150:	2201      	movs	r2, #1
   27152:	4b06      	ldr	r3, [pc, #24]	; (2716c <_arm_mpu_config+0x5c>)
   27154:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
   27156:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2715a:	f3bf 8f6f 	isb	sy
   2715e:	bd10      	pop	{r4, pc}
   27160:	4770      	bx	lr
   27162:	bf00      	nop
   27164:	2000c428 	.word	0x2000c428
   27168:	e000ed90 	.word	0xe000ed90
   2716c:	200025a4 	.word	0x200025a4

00027170 <arm_mpu_init>:
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
   27170:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);

	_arm_mpu_config();
   27172:	f7ff ffcd 	bl	27110 <_arm_mpu_config>

	return 0;
}
   27176:	2000      	movs	r0, #0
   27178:	bd08      	pop	{r3, pc}
	...

0002717c <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   2717c:	b538      	push	{r3, r4, r5, lr}
   2717e:	4605      	mov	r5, r0
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   27180:	4b07      	ldr	r3, [pc, #28]	; (271a0 <_sys_device_do_config_level+0x24>)
   27182:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   27186:	e004      	b.n	27192 <_sys_device_do_config_level+0x16>
								info++) {
		struct device_config *device = info->config;
   27188:	6823      	ldr	r3, [r4, #0]

		device->init(info);
   2718a:	685b      	ldr	r3, [r3, #4]
   2718c:	4620      	mov	r0, r4
   2718e:	4798      	blx	r3
								info++) {
   27190:	340c      	adds	r4, #12
	for (info = config_levels[level]; info < config_levels[level+1];
   27192:	1c6b      	adds	r3, r5, #1
   27194:	4a02      	ldr	r2, [pc, #8]	; (271a0 <_sys_device_do_config_level+0x24>)
   27196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2719a:	429c      	cmp	r4, r3
   2719c:	d3f4      	bcc.n	27188 <_sys_device_do_config_level+0xc>
		_k_object_init(info);
	}
}
   2719e:	bd38      	pop	{r3, r4, r5, pc}
   271a0:	00031440 	.word	0x00031440

000271a4 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
   271a4:	b538      	push	{r3, r4, r5, lr}
   271a6:	4605      	mov	r5, r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   271a8:	4c0a      	ldr	r4, [pc, #40]	; (271d4 <device_get_binding+0x30>)
   271aa:	e000      	b.n	271ae <device_get_binding+0xa>
   271ac:	340c      	adds	r4, #12
   271ae:	4b0a      	ldr	r3, [pc, #40]	; (271d8 <device_get_binding+0x34>)
   271b0:	429c      	cmp	r4, r3
   271b2:	d00c      	beq.n	271ce <device_get_binding+0x2a>
		if (!info->driver_api) {
   271b4:	6863      	ldr	r3, [r4, #4]
   271b6:	2b00      	cmp	r3, #0
   271b8:	d0f8      	beq.n	271ac <device_get_binding+0x8>
			continue;
		}

		if (name == info->config->name) {
   271ba:	6823      	ldr	r3, [r4, #0]
   271bc:	6819      	ldr	r1, [r3, #0]
   271be:	42a9      	cmp	r1, r5
   271c0:	d006      	beq.n	271d0 <device_get_binding+0x2c>
			return info;
		}

		if (!strcmp(name, info->config->name)) {
   271c2:	4628      	mov	r0, r5
   271c4:	f7d9 f920 	bl	408 <strcmp>
   271c8:	2800      	cmp	r0, #0
   271ca:	d1ef      	bne.n	271ac <device_get_binding+0x8>
   271cc:	e000      	b.n	271d0 <device_get_binding+0x2c>
			return info;
		}
	}

	return NULL;
   271ce:	2400      	movs	r4, #0
}
   271d0:	4620      	mov	r0, r4
   271d2:	bd38      	pop	{r3, r4, r5, pc}
   271d4:	2000ce28 	.word	0x2000ce28
   271d8:	2000cee8 	.word	0x2000cee8

000271dc <set_kernel_idle_time_in_ticks>:
 *
 * @return N/A
 */
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
	_kernel.idle = ticks;
   271dc:	4b01      	ldr	r3, [pc, #4]	; (271e4 <set_kernel_idle_time_in_ticks+0x8>)
   271de:	6158      	str	r0, [r3, #20]
   271e0:	4770      	bx	lr
   271e2:	bf00      	nop
   271e4:	20002678 	.word	0x20002678

000271e8 <_sys_power_save_idle>:
#else
#define set_kernel_idle_time_in_ticks(x) do { } while (0)
#endif

static void _sys_power_save_idle(s32_t ticks)
{
   271e8:	b510      	push	{r4, lr}
   271ea:	4604      	mov	r4, r0
			k_cpu_idle();
			return;
		}
	}
#endif
	if (_must_enter_tickless_idle(ticks)) {
   271ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   271f0:	d003      	beq.n	271fa <_sys_power_save_idle+0x12>
   271f2:	4b06      	ldr	r3, [pc, #24]	; (2720c <_sys_power_save_idle+0x24>)
   271f4:	681b      	ldr	r3, [r3, #0]
   271f6:	4298      	cmp	r0, r3
   271f8:	db02      	blt.n	27200 <_sys_power_save_idle+0x18>
		/*
		 * In the case of tickless kernel, timer driver should
		 * reprogram timer only if the currently programmed time
		 * duration is smaller than the idle time.
		 */
		_timer_idle_enter(ticks);
   271fa:	4620      	mov	r0, r4
   271fc:	f7db f8e4 	bl	23c8 <_timer_idle_enter>
	}

	set_kernel_idle_time_in_ticks(ticks);
   27200:	4620      	mov	r0, r4
   27202:	f7ff ffeb 	bl	271dc <set_kernel_idle_time_in_ticks>
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
   27206:	f7ff fe83 	bl	26f10 <k_cpu_idle>
   2720a:	bd10      	pop	{r4, pc}
   2720c:	2000c46c 	.word	0x2000c46c

00027210 <_sys_power_save_idle_exit>:
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
   27210:	b508      	push	{r3, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   27212:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27216:	d003      	beq.n	27220 <_sys_power_save_idle_exit+0x10>
   27218:	4b03      	ldr	r3, [pc, #12]	; (27228 <_sys_power_save_idle_exit+0x18>)
   2721a:	681b      	ldr	r3, [r3, #0]
   2721c:	4298      	cmp	r0, r3
   2721e:	db01      	blt.n	27224 <_sys_power_save_idle_exit+0x14>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   27220:	f7db f8e8 	bl	23f4 <_timer_idle_exit>
   27224:	bd08      	pop	{r3, pc}
   27226:	bf00      	nop
   27228:	2000c46c 	.word	0x2000c46c

0002722c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   2722c:	b508      	push	{r3, lr}
   2722e:	e005      	b.n	2723c <idle+0x10>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27230:	2300      	movs	r3, #0
   27232:	e00e      	b.n	27252 <idle+0x26>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   27234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__idle_time_stamp = (u64_t)k_cycle_get_32();
#endif

	for (;;) {
		(void)irq_lock();
		_sys_power_save_idle(_get_next_timeout_expiry());
   27238:	f7ff ffd6 	bl	271e8 <_sys_power_save_idle>
   2723c:	f04f 0220 	mov.w	r2, #32
   27240:	f3ef 8311 	mrs	r3, BASEPRI
   27244:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   27248:	4a04      	ldr	r2, [pc, #16]	; (2725c <idle+0x30>)
   2724a:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2724e:	4293      	cmp	r3, r2
   27250:	d0ee      	beq.n	27230 <idle+0x4>
   27252:	2b00      	cmp	r3, #0
   27254:	d0ee      	beq.n	27234 <idle+0x8>
   27256:	6918      	ldr	r0, [r3, #16]
   27258:	e7ee      	b.n	27238 <idle+0xc>
   2725a:	bf00      	nop
   2725c:	20002678 	.word	0x20002678

00027260 <switch_to_main_thread>:

	kernel_arch_init();
}

static void switch_to_main_thread(void)
{
   27260:	b480      	push	{r7}
   27262:	af00      	add	r7, sp, #0
	/* get high address of the stack, i.e. its start (stack grows down) */
	char *start_of_main_stack;

	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   27264:	4b07      	ldr	r3, [pc, #28]	; (27284 <switch_to_main_thread+0x24>)
   27266:	f023 0307 	bic.w	r3, r3, #7

	_current = main_thread;
   2726a:	4907      	ldr	r1, [pc, #28]	; (27288 <switch_to_main_thread+0x28>)
   2726c:	4a07      	ldr	r2, [pc, #28]	; (2728c <switch_to_main_thread+0x2c>)
   2726e:	6091      	str	r1, [r2, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   27270:	4c07      	ldr	r4, [pc, #28]	; (27290 <switch_to_main_thread+0x30>)
   27272:	4a08      	ldr	r2, [pc, #32]	; (27294 <switch_to_main_thread+0x34>)
   27274:	f383 8809 	msr	PSP, r3
   27278:	2100      	movs	r1, #0
   2727a:	f381 8811 	msr	BASEPRI, r1
   2727e:	4610      	mov	r0, r2
   27280:	4720      	bx	r4
   27282:	bf00      	nop
   27284:	2000aa20 	.word	0x2000aa20
   27288:	20002610 	.word	0x20002610
   2728c:	20002678 	.word	0x20002678
   27290:	00028a55 	.word	0x00028a55
   27294:	000274b9 	.word	0x000274b9

00027298 <prepare_multithreading>:
{
   27298:	b5f0      	push	{r4, r5, r6, r7, lr}
   2729a:	b087      	sub	sp, #28
	_IntLibInit();
   2729c:	f7ff fbaa 	bl	269f4 <_IntLibInit>
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   272a0:	2300      	movs	r3, #0
   272a2:	e007      	b.n	272b4 <prepare_multithreading+0x1c>
		sys_dlist_init(&_ready_q.q[ii]);
   272a4:	1d18      	adds	r0, r3, #4
   272a6:	4927      	ldr	r1, [pc, #156]	; (27344 <prepare_multithreading+0xac>)
   272a8:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
	list->head = (sys_dnode_t *)list;
   272ac:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
	list->tail = (sys_dnode_t *)list;
   272b0:	6052      	str	r2, [r2, #4]
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   272b2:	3301      	adds	r3, #1
   272b4:	2b1f      	cmp	r3, #31
   272b6:	ddf5      	ble.n	272a4 <prepare_multithreading+0xc>
	_ready_q.cache = _main_thread;
   272b8:	4e22      	ldr	r6, [pc, #136]	; (27344 <prepare_multithreading+0xac>)
   272ba:	4d23      	ldr	r5, [pc, #140]	; (27348 <prepare_multithreading+0xb0>)
   272bc:	61b5      	str	r5, [r6, #24]
	_setup_new_thread(_main_thread, _main_stack,
   272be:	2701      	movs	r7, #1
   272c0:	9704      	str	r7, [sp, #16]
   272c2:	2400      	movs	r4, #0
   272c4:	9403      	str	r4, [sp, #12]
   272c6:	9402      	str	r4, [sp, #8]
   272c8:	9401      	str	r4, [sp, #4]
   272ca:	9400      	str	r4, [sp, #0]
   272cc:	4b1f      	ldr	r3, [pc, #124]	; (2734c <prepare_multithreading+0xb4>)
   272ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
   272d2:	491f      	ldr	r1, [pc, #124]	; (27350 <prepare_multithreading+0xb8>)
   272d4:	4628      	mov	r0, r5
   272d6:	f001 fc9b 	bl	28c10 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   272da:	7a6b      	ldrb	r3, [r5, #9]
   272dc:	f023 0304 	bic.w	r3, r3, #4
   272e0:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
   272e2:	4628      	mov	r0, r5
   272e4:	f000 ff08 	bl	280f8 <_add_thread_to_ready_q>
	_setup_new_thread(_idle_thread, _idle_stack,
   272e8:	4d1a      	ldr	r5, [pc, #104]	; (27354 <prepare_multithreading+0xbc>)
   272ea:	9704      	str	r7, [sp, #16]
   272ec:	230f      	movs	r3, #15
   272ee:	9303      	str	r3, [sp, #12]
   272f0:	9402      	str	r4, [sp, #8]
   272f2:	9401      	str	r4, [sp, #4]
   272f4:	9400      	str	r4, [sp, #0]
   272f6:	4b18      	ldr	r3, [pc, #96]	; (27358 <prepare_multithreading+0xc0>)
   272f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   272fc:	4917      	ldr	r1, [pc, #92]	; (2735c <prepare_multithreading+0xc4>)
   272fe:	4628      	mov	r0, r5
   27300:	f001 fc86 	bl	28c10 <_setup_new_thread>
   27304:	7a6b      	ldrb	r3, [r5, #9]
   27306:	f023 0304 	bic.w	r3, r3, #4
   2730a:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_idle_thread);
   2730c:	4628      	mov	r0, r5
   2730e:	f000 fef3 	bl	280f8 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
   27312:	f106 030c 	add.w	r3, r6, #12
   27316:	60f3      	str	r3, [r6, #12]
	list->tail = (sys_dnode_t *)list;
   27318:	6133      	str	r3, [r6, #16]
 *
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   2731a:	4b11      	ldr	r3, [pc, #68]	; (27360 <prepare_multithreading+0xc8>)
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
   2731c:	f383 8808 	msr	MSP, r3
   27320:	4b10      	ldr	r3, [pc, #64]	; (27364 <prepare_multithreading+0xcc>)
   27322:	22e0      	movs	r2, #224	; 0xe0
   27324:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   27328:	77dc      	strb	r4, [r3, #31]
   2732a:	761c      	strb	r4, [r3, #24]
   2732c:	765c      	strb	r4, [r3, #25]
   2732e:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   27330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   27332:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   27336:	625a      	str	r2, [r3, #36]	; 0x24
	_FaultInit();
   27338:	f7ff fd5e 	bl	26df8 <_FaultInit>
	_CpuIdleInit();
   2733c:	f7ff fde2 	bl	26f04 <_CpuIdleInit>
}
   27340:	b007      	add	sp, #28
   27342:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27344:	20002678 	.word	0x20002678
   27348:	20002610 	.word	0x20002610
   2734c:	000274b9 	.word	0x000274b9
   27350:	2000a220 	.word	0x2000a220
   27354:	200025a8 	.word	0x200025a8
   27358:	0002722d 	.word	0x0002722d
   2735c:	2000aa20 	.word	0x2000aa20
   27360:	2000b360 	.word	0x2000b360
   27364:	e000ed00 	.word	0xe000ed00

00027368 <k_call_stacks_analyze>:
{
   27368:	b500      	push	{lr}
   2736a:	b085      	sub	sp, #20
	printk("Kernel stacks:\n");
   2736c:	483a      	ldr	r0, [pc, #232]	; (27458 <k_call_stacks_analyze+0xf0>)
   2736e:	f7db fdb7 	bl	2ee0 <printk>
   27372:	2200      	movs	r2, #0
	size_t unused = 0;
   27374:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   27376:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2737a:	d206      	bcs.n	2738a <k_call_stacks_analyze+0x22>
		if ((unsigned char)stack[i] == 0xaa) {
   2737c:	4937      	ldr	r1, [pc, #220]	; (2745c <k_call_stacks_analyze+0xf4>)
   2737e:	5c89      	ldrb	r1, [r1, r2]
   27380:	29aa      	cmp	r1, #170	; 0xaa
   27382:	d102      	bne.n	2738a <k_call_stacks_analyze+0x22>
			unused++;
   27384:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   27386:	3201      	adds	r2, #1
   27388:	e7f5      	b.n	27376 <k_call_stacks_analyze+0xe>
	pcnt = ((size - unused) * 100) / size;
   2738a:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   2738e:	2264      	movs	r2, #100	; 0x64
   27390:	fb02 f201 	mul.w	r2, r2, r1
   27394:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   27396:	9202      	str	r2, [sp, #8]
   27398:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2739c:	9201      	str	r2, [sp, #4]
   2739e:	9100      	str	r1, [sp, #0]
   273a0:	492f      	ldr	r1, [pc, #188]	; (27460 <k_call_stacks_analyze+0xf8>)
   273a2:	4830      	ldr	r0, [pc, #192]	; (27464 <k_call_stacks_analyze+0xfc>)
   273a4:	f7db fd9c 	bl	2ee0 <printk>
	for (i = 0; i < size; i++) {
   273a8:	2200      	movs	r2, #0
	size_t unused = 0;
   273aa:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   273ac:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
   273b0:	d206      	bcs.n	273c0 <k_call_stacks_analyze+0x58>
		if ((unsigned char)stack[i] == 0xaa) {
   273b2:	492d      	ldr	r1, [pc, #180]	; (27468 <k_call_stacks_analyze+0x100>)
   273b4:	5c89      	ldrb	r1, [r1, r2]
   273b6:	29aa      	cmp	r1, #170	; 0xaa
   273b8:	d102      	bne.n	273c0 <k_call_stacks_analyze+0x58>
			unused++;
   273ba:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   273bc:	3201      	adds	r2, #1
   273be:	e7f5      	b.n	273ac <k_call_stacks_analyze+0x44>
	pcnt = ((size - unused) * 100) / size;
   273c0:	f5c3 71a0 	rsb	r1, r3, #320	; 0x140
   273c4:	2264      	movs	r2, #100	; 0x64
   273c6:	fb02 f201 	mul.w	r2, r2, r1
   273ca:	4828      	ldr	r0, [pc, #160]	; (2746c <k_call_stacks_analyze+0x104>)
   273cc:	fba0 0202 	umull	r0, r2, r0, r2
   273d0:	0a12      	lsrs	r2, r2, #8
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   273d2:	9202      	str	r2, [sp, #8]
   273d4:	f44f 72a0 	mov.w	r2, #320	; 0x140
   273d8:	9201      	str	r2, [sp, #4]
   273da:	9100      	str	r1, [sp, #0]
   273dc:	4924      	ldr	r1, [pc, #144]	; (27470 <k_call_stacks_analyze+0x108>)
   273de:	4821      	ldr	r0, [pc, #132]	; (27464 <k_call_stacks_analyze+0xfc>)
   273e0:	f7db fd7e 	bl	2ee0 <printk>
	for (i = 0; i < size; i++) {
   273e4:	2200      	movs	r2, #0
	size_t unused = 0;
   273e6:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   273e8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   273ec:	d206      	bcs.n	273fc <k_call_stacks_analyze+0x94>
		if ((unsigned char)stack[i] == 0xaa) {
   273ee:	4921      	ldr	r1, [pc, #132]	; (27474 <k_call_stacks_analyze+0x10c>)
   273f0:	5c89      	ldrb	r1, [r1, r2]
   273f2:	29aa      	cmp	r1, #170	; 0xaa
   273f4:	d102      	bne.n	273fc <k_call_stacks_analyze+0x94>
			unused++;
   273f6:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   273f8:	3201      	adds	r2, #1
   273fa:	e7f5      	b.n	273e8 <k_call_stacks_analyze+0x80>
	pcnt = ((size - unused) * 100) / size;
   273fc:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   27400:	2264      	movs	r2, #100	; 0x64
   27402:	fb02 f201 	mul.w	r2, r2, r1
   27406:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   27408:	9202      	str	r2, [sp, #8]
   2740a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2740e:	9201      	str	r2, [sp, #4]
   27410:	9100      	str	r1, [sp, #0]
   27412:	4919      	ldr	r1, [pc, #100]	; (27478 <k_call_stacks_analyze+0x110>)
   27414:	4813      	ldr	r0, [pc, #76]	; (27464 <k_call_stacks_analyze+0xfc>)
   27416:	f7db fd63 	bl	2ee0 <printk>
	for (i = 0; i < size; i++) {
   2741a:	2200      	movs	r2, #0
	size_t unused = 0;
   2741c:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   2741e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   27422:	d206      	bcs.n	27432 <k_call_stacks_analyze+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
   27424:	4915      	ldr	r1, [pc, #84]	; (2747c <k_call_stacks_analyze+0x114>)
   27426:	5c89      	ldrb	r1, [r1, r2]
   27428:	29aa      	cmp	r1, #170	; 0xaa
   2742a:	d102      	bne.n	27432 <k_call_stacks_analyze+0xca>
			unused++;
   2742c:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   2742e:	3201      	adds	r2, #1
   27430:	e7f5      	b.n	2741e <k_call_stacks_analyze+0xb6>
	pcnt = ((size - unused) * 100) / size;
   27432:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
   27436:	2264      	movs	r2, #100	; 0x64
   27438:	fb02 f201 	mul.w	r2, r2, r1
   2743c:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   2743e:	9202      	str	r2, [sp, #8]
   27440:	f44f 6280 	mov.w	r2, #1024	; 0x400
   27444:	9201      	str	r2, [sp, #4]
   27446:	9100      	str	r1, [sp, #0]
   27448:	490d      	ldr	r1, [pc, #52]	; (27480 <k_call_stacks_analyze+0x118>)
   2744a:	4806      	ldr	r0, [pc, #24]	; (27464 <k_call_stacks_analyze+0xfc>)
   2744c:	f7db fd48 	bl	2ee0 <printk>
}
   27450:	b005      	add	sp, #20
   27452:	f85d fb04 	ldr.w	pc, [sp], #4
   27456:	bf00      	nop
   27458:	0003145c 	.word	0x0003145c
   2745c:	2000a220 	.word	0x2000a220
   27460:	0003146c 	.word	0x0003146c
   27464:	0002f80c 	.word	0x0002f80c
   27468:	2000aa20 	.word	0x2000aa20
   2746c:	cccccccd 	.word	0xcccccccd
   27470:	00031478 	.word	0x00031478
   27474:	2000ab60 	.word	0x2000ab60
   27478:	00031484 	.word	0x00031484
   2747c:	2000b360 	.word	0x2000b360
   27480:	00031490 	.word	0x00031490

00027484 <_bss_zero>:
{
   27484:	b508      	push	{r3, lr}
		 ((u32_t) &__bss_end - (u32_t) &__bss_start));
   27486:	4803      	ldr	r0, [pc, #12]	; (27494 <_bss_zero+0x10>)
	memset(&__bss_start, 0,
   27488:	4a03      	ldr	r2, [pc, #12]	; (27498 <_bss_zero+0x14>)
   2748a:	1a12      	subs	r2, r2, r0
   2748c:	2100      	movs	r1, #0
   2748e:	f002 f923 	bl	296d8 <memset>
   27492:	bd08      	pop	{r3, pc}
   27494:	20000000 	.word	0x20000000
   27498:	20002b10 	.word	0x20002b10

0002749c <_data_copy>:
{
   2749c:	b508      	push	{r3, lr}
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
   2749e:	4803      	ldr	r0, [pc, #12]	; (274ac <_data_copy+0x10>)
	memcpy(&__data_ram_start, &__data_rom_start,
   274a0:	4a03      	ldr	r2, [pc, #12]	; (274b0 <_data_copy+0x14>)
   274a2:	1a12      	subs	r2, r2, r0
   274a4:	4903      	ldr	r1, [pc, #12]	; (274b4 <_data_copy+0x18>)
   274a6:	f7d8 ff0b 	bl	2c0 <memcpy>
   274aa:	bd08      	pop	{r3, pc}
   274ac:	2000b760 	.word	0x2000b760
   274b0:	2000d3b4 	.word	0x2000d3b4
   274b4:	0003171c 	.word	0x0003171c

000274b8 <_main>:
{
   274b8:	b508      	push	{r3, lr}
	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   274ba:	2002      	movs	r0, #2
   274bc:	f7ff fe5e 	bl	2717c <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   274c0:	2003      	movs	r0, #3
   274c2:	f7ff fe5b 	bl	2717c <_sys_device_do_config_level>
	_init_static_threads();
   274c6:	f001 fc11 	bl	28cec <_init_static_threads>
	main();
   274ca:	f7da fa1b 	bl	1904 <main>
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   274ce:	4a03      	ldr	r2, [pc, #12]	; (274dc <_main+0x24>)
   274d0:	7a13      	ldrb	r3, [r2, #8]
   274d2:	f023 0301 	bic.w	r3, r3, #1
   274d6:	7213      	strb	r3, [r2, #8]
   274d8:	bd08      	pop	{r3, pc}
   274da:	bf00      	nop
   274dc:	20002610 	.word	0x20002610

000274e0 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   274e0:	b508      	push	{r3, lr}
	 * Initialize kernel data structures. This step includes
	 * initializing the interrupt subsystem, which must be performed
	 * before the hardware initialization phase.
	 */

	prepare_multithreading(dummy_thread);
   274e2:	2000      	movs	r0, #0
   274e4:	f7ff fed8 	bl	27298 <prepare_multithreading>

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   274e8:	2000      	movs	r0, #0
   274ea:	f7ff fe47 	bl	2717c <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   274ee:	2001      	movs	r0, #1
   274f0:	f7ff fe44 	bl	2717c <_sys_device_do_config_level>
	__stack_chk_guard = (void *)sys_rand32_get();
#endif

	/* display boot banner */

	switch_to_main_thread();
   274f4:	f7ff feb4 	bl	27260 <switch_to_main_thread>

000274f8 <create_free_list>:
static void create_free_list(struct k_mem_slab *slab)
{
	u32_t j;
	char *p;

	slab->free_list = NULL;
   274f8:	2200      	movs	r2, #0
   274fa:	6142      	str	r2, [r0, #20]
	p = slab->buffer;
   274fc:	6903      	ldr	r3, [r0, #16]

	for (j = 0; j < slab->num_blocks; j++) {
   274fe:	e005      	b.n	2750c <create_free_list+0x14>
		*(char **)p = slab->free_list;
   27500:	6941      	ldr	r1, [r0, #20]
   27502:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   27504:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   27506:	68c1      	ldr	r1, [r0, #12]
   27508:	440b      	add	r3, r1
	for (j = 0; j < slab->num_blocks; j++) {
   2750a:	3201      	adds	r2, #1
   2750c:	6881      	ldr	r1, [r0, #8]
   2750e:	428a      	cmp	r2, r1
   27510:	d3f6      	bcc.n	27500 <create_free_list+0x8>
	}
}
   27512:	4770      	bx	lr

00027514 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   27514:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   27516:	4c05      	ldr	r4, [pc, #20]	; (2752c <init_mem_slab_module+0x18>)
   27518:	e003      	b.n	27522 <init_mem_slab_module+0xe>
	     slab < _k_mem_slab_list_end;
	     slab++) {
		create_free_list(slab);
   2751a:	4620      	mov	r0, r4
   2751c:	f7ff ffec 	bl	274f8 <create_free_list>
	     slab++) {
   27520:	341c      	adds	r4, #28
	for (slab = _k_mem_slab_list_start;
   27522:	4b03      	ldr	r3, [pc, #12]	; (27530 <init_mem_slab_module+0x1c>)
   27524:	429c      	cmp	r4, r3
   27526:	d3f8      	bcc.n	2751a <init_mem_slab_module+0x6>
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
	}
	return 0;
}
   27528:	2000      	movs	r0, #0
   2752a:	bd10      	pop	{r4, pc}
   2752c:	2000cef4 	.word	0x2000cef4
   27530:	2000cf2c 	.word	0x2000cf2c

00027534 <k_mem_slab_alloc>:

	_k_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   27534:	b538      	push	{r3, r4, r5, lr}
   27536:	f04f 0320 	mov.w	r3, #32
   2753a:	f3ef 8411 	mrs	r4, BASEPRI
   2753e:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	int result;

	if (slab->free_list != NULL) {
   27542:	6943      	ldr	r3, [r0, #20]
   27544:	b15b      	cbz	r3, 2755e <k_mem_slab_alloc+0x2a>
		/* take a free block */
		*mem = slab->free_list;
   27546:	600b      	str	r3, [r1, #0]
		slab->free_list = *(char **)(slab->free_list);
   27548:	6943      	ldr	r3, [r0, #20]
   2754a:	681b      	ldr	r3, [r3, #0]
   2754c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   2754e:	6983      	ldr	r3, [r0, #24]
   27550:	3301      	adds	r3, #1
   27552:	6183      	str	r3, [r0, #24]
		result = 0;
   27554:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27556:	f384 8811 	msr	BASEPRI, r4
	}

	irq_unlock(key);

	return result;
}
   2755a:	4618      	mov	r0, r3
   2755c:	bd38      	pop	{r3, r4, r5, pc}
	} else if (timeout == K_NO_WAIT) {
   2755e:	b922      	cbnz	r2, 2756a <k_mem_slab_alloc+0x36>
		*mem = NULL;
   27560:	2300      	movs	r3, #0
   27562:	600b      	str	r3, [r1, #0]
		result = -ENOMEM;
   27564:	f06f 030b 	mvn.w	r3, #11
   27568:	e7f5      	b.n	27556 <k_mem_slab_alloc+0x22>
   2756a:	460d      	mov	r5, r1
		_pend_current_thread(&slab->wait_q, timeout);
   2756c:	4611      	mov	r1, r2
   2756e:	f000 fed7 	bl	28320 <_pend_current_thread>
	_update_time_slice_before_swap();
   27572:	f000 ff53 	bl	2841c <_update_time_slice_before_swap>
	return __swap(key);
   27576:	4620      	mov	r0, r4
   27578:	f7ff fa96 	bl	26aa8 <__swap>
		if (result == 0) {
   2757c:	4603      	mov	r3, r0
   2757e:	2800      	cmp	r0, #0
   27580:	d1eb      	bne.n	2755a <k_mem_slab_alloc+0x26>
			*mem = _current->base.swap_data;
   27582:	4a02      	ldr	r2, [pc, #8]	; (2758c <k_mem_slab_alloc+0x58>)
   27584:	6892      	ldr	r2, [r2, #8]
   27586:	68d2      	ldr	r2, [r2, #12]
   27588:	602a      	str	r2, [r5, #0]
   2758a:	e7e6      	b.n	2755a <k_mem_slab_alloc+0x26>
   2758c:	20002678 	.word	0x20002678

00027590 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   27590:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   27592:	f04f 0320 	mov.w	r3, #32
   27596:	f3ef 8411 	mrs	r4, BASEPRI
   2759a:	f383 8811 	msr	BASEPRI, r3
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   2759e:	4b3d      	ldr	r3, [pc, #244]	; (27694 <k_mem_slab_free+0x104>)
   275a0:	681b      	ldr	r3, [r3, #0]
   275a2:	2b00      	cmp	r3, #0
   275a4:	d13a      	bne.n	2761c <k_mem_slab_free+0x8c>
	return list->head == list;
   275a6:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   275a8:	4298      	cmp	r0, r3
   275aa:	d048      	beq.n	2763e <k_mem_slab_free+0xae>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   275ac:	b14b      	cbz	r3, 275c2 <k_mem_slab_free+0x32>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   275ae:	685a      	ldr	r2, [r3, #4]
   275b0:	681d      	ldr	r5, [r3, #0]
   275b2:	6015      	str	r5, [r2, #0]
	node->next->prev = node->prev;
   275b4:	681a      	ldr	r2, [r3, #0]
   275b6:	685d      	ldr	r5, [r3, #4]
   275b8:	6055      	str	r5, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   275ba:	7a5a      	ldrb	r2, [r3, #9]
   275bc:	f022 0202 	bic.w	r2, r2, #2
   275c0:	725a      	strb	r2, [r3, #9]
	int key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&slab->wait_q);

	if (pending_thread) {
   275c2:	2b00      	cmp	r3, #0
   275c4:	d05c      	beq.n	27680 <k_mem_slab_free+0xf0>
		_set_thread_return_value_with_data(pending_thread, 0, *mem);
   275c6:	680a      	ldr	r2, [r1, #0]
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   275c8:	2100      	movs	r1, #0
   275ca:	6659      	str	r1, [r3, #100]	; 0x64
	thread->base.swap_data = data;
   275cc:	60da      	str	r2, [r3, #12]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   275ce:	6a19      	ldr	r1, [r3, #32]
   275d0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   275d4:	d013      	beq.n	275fe <k_mem_slab_free+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   275d6:	f103 0210 	add.w	r2, r3, #16
	return list->tail == node;
   275da:	482f      	ldr	r0, [pc, #188]	; (27698 <k_mem_slab_free+0x108>)
   275dc:	6900      	ldr	r0, [r0, #16]
   275de:	4282      	cmp	r2, r0
   275e0:	d004      	beq.n	275ec <k_mem_slab_free+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   275e2:	b102      	cbz	r2, 275e6 <k_mem_slab_free+0x56>
	return (node == list->tail) ? NULL : node->next;
   275e4:	691a      	ldr	r2, [r3, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   275e6:	6910      	ldr	r0, [r2, #16]
   275e8:	4401      	add	r1, r0
   275ea:	6111      	str	r1, [r2, #16]
	node->prev->next = node->next;
   275ec:	695a      	ldr	r2, [r3, #20]
   275ee:	6919      	ldr	r1, [r3, #16]
   275f0:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   275f2:	691a      	ldr	r2, [r3, #16]
   275f4:	6959      	ldr	r1, [r3, #20]
   275f6:	6051      	str	r1, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   275f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   275fc:	621a      	str	r2, [r3, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   275fe:	7a5a      	ldrb	r2, [r3, #9]
   27600:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   27604:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   27606:	f012 0f1b 	tst.w	r2, #27
   2760a:	d11c      	bne.n	27646 <k_mem_slab_free+0xb6>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2760c:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2760e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   27612:	d016      	beq.n	27642 <k_mem_slab_free+0xb2>
   27614:	2200      	movs	r2, #0
   27616:	e017      	b.n	27648 <k_mem_slab_free+0xb8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27618:	2300      	movs	r3, #0
   2761a:	e003      	b.n	27624 <k_mem_slab_free+0x94>
   2761c:	4605      	mov	r5, r0
	return list->head == list;
   2761e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27620:	4298      	cmp	r0, r3
   27622:	d0f9      	beq.n	27618 <k_mem_slab_free+0x88>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   27624:	2b00      	cmp	r3, #0
   27626:	d0c1      	beq.n	275ac <k_mem_slab_free+0x1c>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   27628:	6a1a      	ldr	r2, [r3, #32]
			if (_is_thread_timeout_expired(thread)) {
   2762a:	f112 0f02 	cmn.w	r2, #2
   2762e:	d1bd      	bne.n	275ac <k_mem_slab_free+0x1c>
	return (node == list->tail) ? NULL : node->next;
   27630:	686a      	ldr	r2, [r5, #4]
   27632:	4293      	cmp	r3, r2
   27634:	d001      	beq.n	2763a <k_mem_slab_free+0xaa>
   27636:	681b      	ldr	r3, [r3, #0]
   27638:	e7f4      	b.n	27624 <k_mem_slab_free+0x94>
   2763a:	2300      	movs	r3, #0
   2763c:	e7f2      	b.n	27624 <k_mem_slab_free+0x94>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2763e:	2300      	movs	r3, #0
   27640:	e7b4      	b.n	275ac <k_mem_slab_free+0x1c>
	return !(_is_thread_prevented_from_running(thread) ||
   27642:	2201      	movs	r2, #1
   27644:	e000      	b.n	27648 <k_mem_slab_free+0xb8>
   27646:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   27648:	b94a      	cbnz	r2, 2765e <k_mem_slab_free+0xce>
	return _is_preempt(_current) && __must_switch_threads();
   2764a:	4b13      	ldr	r3, [pc, #76]	; (27698 <k_mem_slab_free+0x108>)
   2764c:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2764e:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   27650:	2b7f      	cmp	r3, #127	; 0x7f
   27652:	d908      	bls.n	27666 <k_mem_slab_free+0xd6>
   27654:	2300      	movs	r3, #0
		_abort_thread_timeout(pending_thread);
		_ready_thread(pending_thread);
		if (_must_switch_threads()) {
   27656:	b96b      	cbnz	r3, 27674 <k_mem_slab_free+0xe4>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27658:	f384 8811 	msr	BASEPRI, r4
   2765c:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   2765e:	4618      	mov	r0, r3
   27660:	f000 fd4a 	bl	280f8 <_add_thread_to_ready_q>
   27664:	e7f1      	b.n	2764a <k_mem_slab_free+0xba>
	return _is_preempt(_current) && __must_switch_threads();
   27666:	f000 fe6b 	bl	28340 <__must_switch_threads>
   2766a:	4603      	mov	r3, r0
   2766c:	2800      	cmp	r0, #0
   2766e:	d0f2      	beq.n	27656 <k_mem_slab_free+0xc6>
   27670:	2301      	movs	r3, #1
   27672:	e7f0      	b.n	27656 <k_mem_slab_free+0xc6>
	_update_time_slice_before_swap();
   27674:	f000 fed2 	bl	2841c <_update_time_slice_before_swap>
	return __swap(key);
   27678:	4620      	mov	r0, r4
   2767a:	f7ff fa15 	bl	26aa8 <__swap>
   2767e:	bd38      	pop	{r3, r4, r5, pc}
			_Swap(key);
			return;
		}
	} else {
		**(char ***)mem = slab->free_list;
   27680:	680b      	ldr	r3, [r1, #0]
   27682:	6942      	ldr	r2, [r0, #20]
   27684:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   27686:	680b      	ldr	r3, [r1, #0]
   27688:	6143      	str	r3, [r0, #20]
		slab->num_used--;
   2768a:	6983      	ldr	r3, [r0, #24]
   2768c:	3b01      	subs	r3, #1
   2768e:	6183      	str	r3, [r0, #24]
   27690:	e7e2      	b.n	27658 <k_mem_slab_free+0xc8>
   27692:	bf00      	nop
   27694:	20002a60 	.word	0x20002a60
   27698:	20002678 	.word	0x20002678

0002769c <new_prio_for_inheritance>:
}
#endif

static int new_prio_for_inheritance(int target, int limit)
{
	int new_prio = _is_prio_higher(target, limit) ? target : limit;
   2769c:	4288      	cmp	r0, r1
   2769e:	da00      	bge.n	276a2 <new_prio_for_inheritance+0x6>
   276a0:	4601      	mov	r1, r0
	return _is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   276a2:	2900      	cmp	r1, #0
   276a4:	db01      	blt.n	276aa <new_prio_for_inheritance+0xe>
   276a6:	4608      	mov	r0, r1
   276a8:	4770      	bx	lr
   276aa:	2000      	movs	r0, #0

	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}
   276ac:	4770      	bx	lr

000276ae <adjust_owner_prio>:

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
   276ae:	b538      	push	{r3, r4, r5, lr}
	if (mutex->owner->base.prio != new_prio) {
   276b0:	6884      	ldr	r4, [r0, #8]
   276b2:	f994 300a 	ldrsb.w	r3, [r4, #10]
   276b6:	428b      	cmp	r3, r1
   276b8:	d00e      	beq.n	276d8 <adjust_owner_prio+0x2a>
	u8_t state = thread->base.thread_state;
   276ba:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   276bc:	f013 0f1f 	tst.w	r3, #31
   276c0:	d107      	bne.n	276d2 <adjust_owner_prio+0x24>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   276c2:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   276c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   276c8:	d001      	beq.n	276ce <adjust_owner_prio+0x20>
   276ca:	2300      	movs	r3, #0
   276cc:	e002      	b.n	276d4 <adjust_owner_prio+0x26>
   276ce:	2301      	movs	r3, #1
   276d0:	e000      	b.n	276d4 <adjust_owner_prio+0x26>
   276d2:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   276d4:	b90b      	cbnz	r3, 276da <adjust_owner_prio+0x2c>
		thread->base.prio = prio;
   276d6:	72a1      	strb	r1, [r4, #10]
   276d8:	bd38      	pop	{r3, r4, r5, pc}
   276da:	460d      	mov	r5, r1
		_remove_thread_from_ready_q(thread);
   276dc:	4620      	mov	r0, r4
   276de:	f000 fd2b 	bl	28138 <_remove_thread_from_ready_q>
		thread->base.prio = prio;
   276e2:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
   276e4:	4620      	mov	r0, r4
   276e6:	f000 fd07 	bl	280f8 <_add_thread_to_ready_q>
   276ea:	bd38      	pop	{r3, r4, r5, pc}

000276ec <_impl_k_mutex_lock>:
		_thread_priority_set(mutex->owner, new_prio);
	}
}

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   276ec:	b570      	push	{r4, r5, r6, lr}
   276ee:	4604      	mov	r4, r0
	--_current->base.sched_locked;
   276f0:	4b32      	ldr	r3, [pc, #200]	; (277bc <_impl_k_mutex_lock+0xd0>)
   276f2:	689a      	ldr	r2, [r3, #8]
   276f4:	7ad3      	ldrb	r3, [r2, #11]
   276f6:	3b01      	subs	r3, #1
   276f8:	72d3      	strb	r3, [r2, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   276fa:	68c3      	ldr	r3, [r0, #12]
   276fc:	b97b      	cbnz	r3, 2771e <_impl_k_mutex_lock+0x32>

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
					_current->base.prio :
   276fe:	2b00      	cmp	r3, #0
   27700:	d133      	bne.n	2776a <_impl_k_mutex_lock+0x7e>
   27702:	4a2e      	ldr	r2, [pc, #184]	; (277bc <_impl_k_mutex_lock+0xd0>)
   27704:	6892      	ldr	r2, [r2, #8]
   27706:	f992 200a 	ldrsb.w	r2, [r2, #10]
		mutex->owner_orig_prio = mutex->lock_count == 0 ?
   2770a:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   2770c:	3301      	adds	r3, #1
   2770e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   27710:	4b2a      	ldr	r3, [pc, #168]	; (277bc <_impl_k_mutex_lock+0xd0>)
   27712:	689b      	ldr	r3, [r3, #8]
   27714:	60a3      	str	r3, [r4, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
   27716:	f000 fea1 	bl	2845c <k_sched_unlock>

		return 0;
   2771a:	2000      	movs	r0, #0
   2771c:	bd70      	pop	{r4, r5, r6, pc}
   2771e:	460d      	mov	r5, r1
	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   27720:	6881      	ldr	r1, [r0, #8]
   27722:	4a26      	ldr	r2, [pc, #152]	; (277bc <_impl_k_mutex_lock+0xd0>)
   27724:	6892      	ldr	r2, [r2, #8]
   27726:	4291      	cmp	r1, r2
   27728:	d0e9      	beq.n	276fe <_impl_k_mutex_lock+0x12>
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
   2772a:	b305      	cbz	r5, 2776e <_impl_k_mutex_lock+0x82>
	if (_is_prio_higher(_current->prio, mutex->owner->prio)) {
		new_prio = _current->prio;
	}
	new_prio = _get_new_prio_with_ceiling(new_prio);
#endif
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2772c:	f991 100a 	ldrsb.w	r1, [r1, #10]
   27730:	f992 000a 	ldrsb.w	r0, [r2, #10]
   27734:	f7ff ffb2 	bl	2769c <new_prio_for_inheritance>
	__asm__ volatile(
   27738:	f04f 0320 	mov.w	r3, #32
   2773c:	f3ef 8611 	mrs	r6, BASEPRI
   27740:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   27744:	68a3      	ldr	r3, [r4, #8]
   27746:	f993 300a 	ldrsb.w	r3, [r3, #10]
   2774a:	4298      	cmp	r0, r3
   2774c:	db14      	blt.n	27778 <_impl_k_mutex_lock+0x8c>
		adjust_owner_prio(mutex, new_prio);
	}

	_pend_current_thread(&mutex->wait_q, timeout);
   2774e:	4629      	mov	r1, r5
   27750:	4620      	mov	r0, r4
   27752:	f000 fde5 	bl	28320 <_pend_current_thread>
	_update_time_slice_before_swap();
   27756:	f000 fe61 	bl	2841c <_update_time_slice_before_swap>
	return __swap(key);
   2775a:	4630      	mov	r0, r6
   2775c:	f7ff f9a4 	bl	26aa8 <__swap>
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
   27760:	b978      	cbnz	r0, 27782 <_impl_k_mutex_lock+0x96>
		k_sched_unlock();
   27762:	f000 fe7b 	bl	2845c <k_sched_unlock>
		return 0;
   27766:	2000      	movs	r0, #0
   27768:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
   2776a:	6922      	ldr	r2, [r4, #16]
   2776c:	e7cd      	b.n	2770a <_impl_k_mutex_lock+0x1e>
		k_sched_unlock();
   2776e:	f000 fe75 	bl	2845c <k_sched_unlock>
		return -EBUSY;
   27772:	f06f 000f 	mvn.w	r0, #15
   27776:	bd70      	pop	{r4, r5, r6, pc}
		adjust_owner_prio(mutex, new_prio);
   27778:	4601      	mov	r1, r0
   2777a:	4620      	mov	r0, r4
   2777c:	f7ff ff97 	bl	276ae <adjust_owner_prio>
   27780:	e7e5      	b.n	2774e <_impl_k_mutex_lock+0x62>
	return list->head == list;
   27782:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27784:	429c      	cmp	r4, r3
   27786:	d016      	beq.n	277b6 <_impl_k_mutex_lock+0xca>
	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
   27788:	6921      	ldr	r1, [r4, #16]
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
						     new_prio) : new_prio;
   2778a:	b123      	cbz	r3, 27796 <_impl_k_mutex_lock+0xaa>
   2778c:	f993 000a 	ldrsb.w	r0, [r3, #10]
   27790:	f7ff ff84 	bl	2769c <new_prio_for_inheritance>
   27794:	4601      	mov	r1, r0
   27796:	f04f 0320 	mov.w	r3, #32
   2779a:	f3ef 8511 	mrs	r5, BASEPRI
   2779e:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = irq_lock();
	adjust_owner_prio(mutex, new_prio);
   277a2:	4620      	mov	r0, r4
   277a4:	f7ff ff83 	bl	276ae <adjust_owner_prio>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   277a8:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(key);

	k_sched_unlock();
   277ac:	f000 fe56 	bl	2845c <k_sched_unlock>

	return -EAGAIN;
   277b0:	f06f 000a 	mvn.w	r0, #10
}
   277b4:	bd70      	pop	{r4, r5, r6, pc}
   277b6:	2300      	movs	r3, #0
   277b8:	e7e6      	b.n	27788 <_impl_k_mutex_lock+0x9c>
   277ba:	bf00      	nop
   277bc:	20002678 	.word	0x20002678

000277c0 <_impl_k_mutex_unlock>:
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
   277c0:	b570      	push	{r4, r5, r6, lr}
   277c2:	4b40      	ldr	r3, [pc, #256]	; (278c4 <_impl_k_mutex_unlock+0x104>)
   277c4:	689a      	ldr	r2, [r3, #8]
   277c6:	7ad3      	ldrb	r3, [r2, #11]
   277c8:	3b01      	subs	r3, #1
   277ca:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
   277cc:	68c3      	ldr	r3, [r0, #12]
   277ce:	3b01      	subs	r3, #1
   277d0:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
   277d2:	2b00      	cmp	r3, #0
   277d4:	d143      	bne.n	2785e <_impl_k_mutex_unlock+0x9e>
   277d6:	4605      	mov	r5, r0
	__asm__ volatile(
   277d8:	f04f 0320 	mov.w	r3, #32
   277dc:	f3ef 8611 	mrs	r6, BASEPRI
   277e0:	f383 8811 	msr	BASEPRI, r3
		return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   277e4:	6901      	ldr	r1, [r0, #16]
   277e6:	f7ff ff62 	bl	276ae <adjust_owner_prio>

	struct k_thread *new_owner = _unpend_first_thread(&mutex->wait_q);
   277ea:	462a      	mov	r2, r5
	if (_handling_timeouts) {
   277ec:	4b36      	ldr	r3, [pc, #216]	; (278c8 <_impl_k_mutex_unlock+0x108>)
   277ee:	681b      	ldr	r3, [r3, #0]
   277f0:	2b00      	cmp	r3, #0
   277f2:	d139      	bne.n	27868 <_impl_k_mutex_unlock+0xa8>
	return list->head == list;
   277f4:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   277f6:	42a5      	cmp	r5, r4
   277f8:	d046      	beq.n	27888 <_impl_k_mutex_unlock+0xc8>
	if (thread) {
   277fa:	b14c      	cbz	r4, 27810 <_impl_k_mutex_unlock+0x50>
	node->prev->next = node->next;
   277fc:	6863      	ldr	r3, [r4, #4]
   277fe:	6822      	ldr	r2, [r4, #0]
   27800:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   27802:	6823      	ldr	r3, [r4, #0]
   27804:	6862      	ldr	r2, [r4, #4]
   27806:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   27808:	7a63      	ldrb	r3, [r4, #9]
   2780a:	f023 0302 	bic.w	r3, r3, #2
   2780e:	7263      	strb	r3, [r4, #9]

	K_DEBUG("new owner of mutex %p: %p (prio: %d)\n",
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner) {
   27810:	2c00      	cmp	r4, #0
   27812:	d051      	beq.n	278b8 <_impl_k_mutex_unlock+0xf8>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   27814:	6a22      	ldr	r2, [r4, #32]
   27816:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2781a:	d013      	beq.n	27844 <_impl_k_mutex_unlock+0x84>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2781c:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   27820:	4928      	ldr	r1, [pc, #160]	; (278c4 <_impl_k_mutex_unlock+0x104>)
   27822:	6909      	ldr	r1, [r1, #16]
   27824:	428b      	cmp	r3, r1
   27826:	d004      	beq.n	27832 <_impl_k_mutex_unlock+0x72>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27828:	b103      	cbz	r3, 2782c <_impl_k_mutex_unlock+0x6c>
	return (node == list->tail) ? NULL : node->next;
   2782a:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2782c:	6919      	ldr	r1, [r3, #16]
   2782e:	440a      	add	r2, r1
   27830:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   27832:	6963      	ldr	r3, [r4, #20]
   27834:	6922      	ldr	r2, [r4, #16]
   27836:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   27838:	6923      	ldr	r3, [r4, #16]
   2783a:	6962      	ldr	r2, [r4, #20]
   2783c:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2783e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27842:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   27844:	7a63      	ldrb	r3, [r4, #9]
   27846:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2784a:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2784c:	f013 0f1b 	tst.w	r3, #27
   27850:	d11e      	bne.n	27890 <_impl_k_mutex_unlock+0xd0>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   27852:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   27854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27858:	d018      	beq.n	2788c <_impl_k_mutex_unlock+0xcc>
   2785a:	2300      	movs	r3, #0
   2785c:	e019      	b.n	27892 <_impl_k_mutex_unlock+0xd2>
		k_sched_unlock();
   2785e:	f000 fdfd 	bl	2845c <k_sched_unlock>
		return;
   27862:	bd70      	pop	{r4, r5, r6, pc}
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27864:	2400      	movs	r4, #0
   27866:	e002      	b.n	2786e <_impl_k_mutex_unlock+0xae>
	return list->head == list;
   27868:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2786a:	42a5      	cmp	r5, r4
   2786c:	d0fa      	beq.n	27864 <_impl_k_mutex_unlock+0xa4>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   2786e:	2c00      	cmp	r4, #0
   27870:	d0c3      	beq.n	277fa <_impl_k_mutex_unlock+0x3a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   27872:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   27874:	f113 0f02 	cmn.w	r3, #2
   27878:	d1bf      	bne.n	277fa <_impl_k_mutex_unlock+0x3a>
	return (node == list->tail) ? NULL : node->next;
   2787a:	6853      	ldr	r3, [r2, #4]
   2787c:	429c      	cmp	r4, r3
   2787e:	d001      	beq.n	27884 <_impl_k_mutex_unlock+0xc4>
   27880:	6824      	ldr	r4, [r4, #0]
   27882:	e7f4      	b.n	2786e <_impl_k_mutex_unlock+0xae>
   27884:	2400      	movs	r4, #0
   27886:	e7f2      	b.n	2786e <_impl_k_mutex_unlock+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27888:	2400      	movs	r4, #0
   2788a:	e7b6      	b.n	277fa <_impl_k_mutex_unlock+0x3a>
	return !(_is_thread_prevented_from_running(thread) ||
   2788c:	2301      	movs	r3, #1
   2788e:	e000      	b.n	27892 <_impl_k_mutex_unlock+0xd2>
   27890:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   27892:	b96b      	cbnz	r3, 278b0 <_impl_k_mutex_unlock+0xf0>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27894:	f386 8811 	msr	BASEPRI, r6
   27898:	2300      	movs	r3, #0
   2789a:	6663      	str	r3, [r4, #100]	; 0x64
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
   2789c:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
   2789e:	68eb      	ldr	r3, [r5, #12]
   278a0:	3301      	adds	r3, #1
   278a2:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
   278a4:	f994 300a 	ldrsb.w	r3, [r4, #10]
   278a8:	612b      	str	r3, [r5, #16]
	} else {
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
   278aa:	f000 fdd7 	bl	2845c <k_sched_unlock>
   278ae:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   278b0:	4620      	mov	r0, r4
   278b2:	f000 fc21 	bl	280f8 <_add_thread_to_ready_q>
   278b6:	e7ed      	b.n	27894 <_impl_k_mutex_unlock+0xd4>
   278b8:	f386 8811 	msr	BASEPRI, r6
		mutex->owner = NULL;
   278bc:	2300      	movs	r3, #0
   278be:	60ab      	str	r3, [r5, #8]
   278c0:	e7f3      	b.n	278aa <_impl_k_mutex_unlock+0xea>
   278c2:	bf00      	nop
   278c4:	20002678 	.word	0x20002678
   278c8:	20002a60 	.word	0x20002a60

000278cc <_signal_poll_event>:
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   278cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   278ce:	4604      	mov	r4, r0
   278d0:	460d      	mov	r5, r1
	*must_reschedule = 0;
   278d2:	2300      	movs	r3, #0
   278d4:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   278d6:	6883      	ldr	r3, [r0, #8]
   278d8:	2b00      	cmp	r3, #0
   278da:	d042      	beq.n	27962 <_signal_poll_event+0x96>
   278dc:	4616      	mov	r6, r2
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   278de:	6818      	ldr	r0, [r3, #0]
	thread->base.thread_state &= ~states;
   278e0:	7a43      	ldrb	r3, [r0, #9]
   278e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   278e6:	7243      	strb	r3, [r0, #9]

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   278e8:	f013 0f02 	tst.w	r3, #2
   278ec:	d039      	beq.n	27962 <_signal_poll_event+0x96>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   278ee:	6a03      	ldr	r3, [r0, #32]
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   278f0:	f113 0f02 	cmn.w	r3, #2
   278f4:	d060      	beq.n	279b8 <_signal_poll_event+0xec>
	node->prev->next = node->next;
   278f6:	6843      	ldr	r3, [r0, #4]
   278f8:	6802      	ldr	r2, [r0, #0]
   278fa:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   278fc:	6803      	ldr	r3, [r0, #0]
   278fe:	6842      	ldr	r2, [r0, #4]
   27900:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   27902:	7a43      	ldrb	r3, [r0, #9]
   27904:	f023 0302 	bic.w	r3, r3, #2
   27908:	7243      	strb	r3, [r0, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2790a:	6a02      	ldr	r2, [r0, #32]
   2790c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   27910:	d013      	beq.n	2793a <_signal_poll_event+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   27912:	f100 0310 	add.w	r3, r0, #16
	return list->tail == node;
   27916:	492a      	ldr	r1, [pc, #168]	; (279c0 <_signal_poll_event+0xf4>)
   27918:	6909      	ldr	r1, [r1, #16]
   2791a:	428b      	cmp	r3, r1
   2791c:	d004      	beq.n	27928 <_signal_poll_event+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2791e:	b103      	cbz	r3, 27922 <_signal_poll_event+0x56>
	return (node == list->tail) ? NULL : node->next;
   27920:	6903      	ldr	r3, [r0, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   27922:	6919      	ldr	r1, [r3, #16]
   27924:	440a      	add	r2, r1
   27926:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   27928:	6943      	ldr	r3, [r0, #20]
   2792a:	6902      	ldr	r2, [r0, #16]
   2792c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2792e:	6903      	ldr	r3, [r0, #16]
   27930:	6942      	ldr	r2, [r0, #20]
   27932:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   27934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27938:	6203      	str	r3, [r0, #32]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
   2793a:	b965      	cbnz	r5, 27956 <_signal_poll_event+0x8a>
   2793c:	f06f 0303 	mvn.w	r3, #3
   27940:	6643      	str	r3, [r0, #100]	; 0x64
	u8_t state = thread->base.thread_state;
   27942:	7a43      	ldrb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   27944:	f013 0f1f 	tst.w	r3, #31
   27948:	d109      	bne.n	2795e <_signal_poll_event+0x92>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2794a:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2794c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27950:	d003      	beq.n	2795a <_signal_poll_event+0x8e>
   27952:	2700      	movs	r7, #0
   27954:	e004      	b.n	27960 <_signal_poll_event+0x94>
   27956:	2300      	movs	r3, #0
   27958:	e7f2      	b.n	27940 <_signal_poll_event+0x74>
   2795a:	2701      	movs	r7, #1
   2795c:	e000      	b.n	27960 <_signal_poll_event+0x94>
   2795e:	2700      	movs	r7, #0
				 state == K_POLL_STATE_NOT_READY ? -EINTR : 0);

	if (!_is_thread_ready(thread)) {
   27960:	b947      	cbnz	r7, 27974 <_signal_poll_event+0xa8>
	event->poller = NULL;
   27962:	2000      	movs	r0, #0
   27964:	60a0      	str	r0, [r4, #8]
	event->state |= state;
   27966:	7b63      	ldrb	r3, [r4, #13]
   27968:	ea45 1513 	orr.w	r5, r5, r3, lsr #4
   2796c:	f365 1307 	bfi	r3, r5, #4, #4
   27970:	7363      	strb	r3, [r4, #13]
	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();

ready_event:
	set_event_ready(event, state);
	return 0;
   27972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_add_thread_to_ready_q(thread);
   27974:	f000 fbc0 	bl	280f8 <_add_thread_to_ready_q>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
   27978:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   2797c:	2b0d      	cmp	r3, #13
   2797e:	d807      	bhi.n	27990 <_signal_poll_event+0xc4>
   27980:	b19b      	cbz	r3, 279aa <_signal_poll_event+0xde>
   27982:	4b10      	ldr	r3, [pc, #64]	; (279c4 <_signal_poll_event+0xf8>)
   27984:	685b      	ldr	r3, [r3, #4]
   27986:	f413 6f00 	tst.w	r3, #2048	; 0x800
   2798a:	d010      	beq.n	279ae <_signal_poll_event+0xe2>
   2798c:	2300      	movs	r3, #0
   2798e:	e000      	b.n	27992 <_signal_poll_event+0xc6>
   27990:	463b      	mov	r3, r7
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   27992:	b973      	cbnz	r3, 279b2 <_signal_poll_event+0xe6>
	return _is_preempt(_current) && __must_switch_threads();
   27994:	4a0a      	ldr	r2, [pc, #40]	; (279c0 <_signal_poll_event+0xf4>)
   27996:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   27998:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   2799a:	2a7f      	cmp	r2, #127	; 0x7f
   2799c:	d80a      	bhi.n	279b4 <_signal_poll_event+0xe8>
   2799e:	f000 fccf 	bl	28340 <__must_switch_threads>
   279a2:	4603      	mov	r3, r0
   279a4:	b130      	cbz	r0, 279b4 <_signal_poll_event+0xe8>
   279a6:	463b      	mov	r3, r7
   279a8:	e004      	b.n	279b4 <_signal_poll_event+0xe8>
   279aa:	2300      	movs	r3, #0
   279ac:	e7f1      	b.n	27992 <_signal_poll_event+0xc6>
   279ae:	463b      	mov	r3, r7
   279b0:	e7ef      	b.n	27992 <_signal_poll_event+0xc6>
   279b2:	2300      	movs	r3, #0
   279b4:	6033      	str	r3, [r6, #0]
   279b6:	e7d4      	b.n	27962 <_signal_poll_event+0x96>
		return -EAGAIN;
   279b8:	f06f 000a 	mvn.w	r0, #10
}
   279bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   279be:	bf00      	nop
   279c0:	20002678 	.word	0x20002678
   279c4:	e000ed00 	.word	0xe000ed00

000279c8 <k_poll_event_init>:
{
   279c8:	b430      	push	{r4, r5}
	event->poller = NULL;
   279ca:	2500      	movs	r5, #0
   279cc:	6085      	str	r5, [r0, #8]
	event->type = type;
   279ce:	7b44      	ldrb	r4, [r0, #13]
   279d0:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
   279d4:	f365 1407 	bfi	r4, r5, #4, #4
   279d8:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   279da:	7b81      	ldrb	r1, [r0, #14]
   279dc:	f362 0100 	bfi	r1, r2, #0, #1
   279e0:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   279e2:	89c2      	ldrh	r2, [r0, #14]
   279e4:	f365 024f 	bfi	r2, r5, #1, #15
   279e8:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   279ea:	6103      	str	r3, [r0, #16]
}
   279ec:	bc30      	pop	{r4, r5}
   279ee:	4770      	bx	lr

000279f0 <k_poll>:
{
   279f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   279f4:	b085      	sub	sp, #20
   279f6:	4691      	mov	r9, r2
	__asm__ volatile(
   279f8:	f04f 0320 	mov.w	r3, #32
   279fc:	f3ef 8511 	mrs	r5, BASEPRI
   27a00:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
   27a04:	4ab7      	ldr	r2, [pc, #732]	; (27ce4 <k_poll+0x2f4>)
   27a06:	6894      	ldr	r4, [r2, #8]
	thread->base.thread_state |= states;
   27a08:	7a63      	ldrb	r3, [r4, #9]
   27a0a:	f043 0320 	orr.w	r3, r3, #32
   27a0e:	7263      	strb	r3, [r4, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27a10:	f385 8811 	msr	BASEPRI, r5
	struct _poller poller = { .thread = _current };
   27a14:	6893      	ldr	r3, [r2, #8]
   27a16:	9303      	str	r3, [sp, #12]
	for (int ii = 0; ii < num_events; ii++) {
   27a18:	2300      	movs	r3, #0
	int last_registered = -1, rc;
   27a1a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
   27a1e:	e01e      	b.n	27a5e <k_poll+0x6e>
		if (k_sem_count_get(event->sem) > 0) {
   27a20:	6917      	ldr	r7, [r2, #16]
   27a22:	68bf      	ldr	r7, [r7, #8]
   27a24:	b14f      	cbz	r7, 27a3a <k_poll+0x4a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   27a26:	f04f 0e02 	mov.w	lr, #2
			return 1;
   27a2a:	2701      	movs	r7, #1
   27a2c:	e005      	b.n	27a3a <k_poll+0x4a>
		if (!k_queue_is_empty(event->queue)) {
   27a2e:	6917      	ldr	r7, [r2, #16]
	return (!list->head);
   27a30:	683f      	ldr	r7, [r7, #0]
   27a32:	b117      	cbz	r7, 27a3a <k_poll+0x4a>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   27a34:	f04f 0e04 	mov.w	lr, #4
			return 1;
   27a38:	2701      	movs	r7, #1
		if (is_condition_met(&events[ii], &state)) {
   27a3a:	b387      	cbz	r7, 27a9e <k_poll+0xae>
	event->poller = NULL;
   27a3c:	2500      	movs	r5, #0
   27a3e:	6095      	str	r5, [r2, #8]
	event->state |= state;
   27a40:	7b55      	ldrb	r5, [r2, #13]
   27a42:	ea4e 1715 	orr.w	r7, lr, r5, lsr #4
   27a46:	f367 1507 	bfi	r5, r7, #4, #4
   27a4a:	7355      	strb	r5, [r2, #13]
			clear_polling_state(_current);
   27a4c:	4aa5      	ldr	r2, [pc, #660]	; (27ce4 <k_poll+0x2f4>)
   27a4e:	6895      	ldr	r5, [r2, #8]
	thread->base.thread_state &= ~states;
   27a50:	7a6a      	ldrb	r2, [r5, #9]
   27a52:	f022 0220 	bic.w	r2, r2, #32
   27a56:	726a      	strb	r2, [r5, #9]
   27a58:	f386 8811 	msr	BASEPRI, r6
	for (int ii = 0; ii < num_events; ii++) {
   27a5c:	3301      	adds	r3, #1
   27a5e:	428b      	cmp	r3, r1
   27a60:	f280 8191 	bge.w	27d86 <k_poll+0x396>
	__asm__ volatile(
   27a64:	f04f 0220 	mov.w	r2, #32
   27a68:	f3ef 8611 	mrs	r6, BASEPRI
   27a6c:	f382 8811 	msr	BASEPRI, r2
		if (is_condition_met(&events[ii], &state)) {
   27a70:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   27a74:	0095      	lsls	r5, r2, #2
   27a76:	1942      	adds	r2, r0, r5
	switch (event->type) {
   27a78:	7b57      	ldrb	r7, [r2, #13]
   27a7a:	f007 070f 	and.w	r7, r7, #15
   27a7e:	2f02      	cmp	r7, #2
   27a80:	d0ce      	beq.n	27a20 <k_poll+0x30>
   27a82:	2f04      	cmp	r7, #4
   27a84:	d0d3      	beq.n	27a2e <k_poll+0x3e>
   27a86:	2f01      	cmp	r7, #1
   27a88:	d001      	beq.n	27a8e <k_poll+0x9e>
		return 0;
   27a8a:	2700      	movs	r7, #0
   27a8c:	e7d5      	b.n	27a3a <k_poll+0x4a>
		if (event->signal->signaled) {
   27a8e:	6917      	ldr	r7, [r2, #16]
   27a90:	68bf      	ldr	r7, [r7, #8]
   27a92:	2f00      	cmp	r7, #0
   27a94:	d0d1      	beq.n	27a3a <k_poll+0x4a>
			*state = K_POLL_STATE_SIGNALED;
   27a96:	f04f 0e01 	mov.w	lr, #1
			return 1;
   27a9a:	4677      	mov	r7, lr
   27a9c:	e7cd      	b.n	27a3a <k_poll+0x4a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
   27a9e:	f1b9 0f00 	cmp.w	r9, #0
   27aa2:	d0d9      	beq.n	27a58 <k_poll+0x68>
	return _is_thread_polling(_current);
   27aa4:	4f8f      	ldr	r7, [pc, #572]	; (27ce4 <k_poll+0x2f4>)
   27aa6:	68bf      	ldr	r7, [r7, #8]
	return !!(thread->base.thread_state & state);
   27aa8:	7a7f      	ldrb	r7, [r7, #9]
		} else if (timeout != K_NO_WAIT && is_polling()) {
   27aaa:	f017 0f20 	tst.w	r7, #32
   27aae:	d0d3      	beq.n	27a58 <k_poll+0x68>
	switch (event->type) {
   27ab0:	7b57      	ldrb	r7, [r2, #13]
   27ab2:	f007 070f 	and.w	r7, r7, #15
   27ab6:	2f02      	cmp	r7, #2
   27ab8:	d008      	beq.n	27acc <k_poll+0xdc>
   27aba:	2f04      	cmp	r7, #4
   27abc:	d07a      	beq.n	27bb4 <k_poll+0x1c4>
   27abe:	2f01      	cmp	r7, #1
   27ac0:	f000 80ec 	beq.w	27c9c <k_poll+0x2ac>
	event->poller = poller;
   27ac4:	ad03      	add	r5, sp, #12
   27ac6:	6095      	str	r5, [r2, #8]
				++last_registered;
   27ac8:	3401      	adds	r4, #1
   27aca:	e7c5      	b.n	27a58 <k_poll+0x68>
		add_event(&event->sem->poll_events, event, poller);
   27acc:	6917      	ldr	r7, [r2, #16]
   27ace:	f107 0c10 	add.w	ip, r7, #16
	return list->head == list;
   27ad2:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27ad6:	45c4      	cmp	ip, r8
   27ad8:	d010      	beq.n	27afc <k_poll+0x10c>
   27ada:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   27ade:	b17f      	cbz	r7, 27b00 <k_poll+0x110>
   27ae0:	68bf      	ldr	r7, [r7, #8]
   27ae2:	683f      	ldr	r7, [r7, #0]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   27ae4:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   27ae8:	9f03      	ldr	r7, [sp, #12]
   27aea:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   27aee:	45da      	cmp	sl, fp
   27af0:	db06      	blt.n	27b00 <k_poll+0x110>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27af2:	45c4      	cmp	ip, r8
   27af4:	d12e      	bne.n	27b54 <k_poll+0x164>
   27af6:	f04f 0800 	mov.w	r8, #0
   27afa:	e02b      	b.n	27b54 <k_poll+0x164>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27afc:	2700      	movs	r7, #0
   27afe:	e7ee      	b.n	27ade <k_poll+0xee>
	node->next = list;
   27b00:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27b04:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27b08:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27b0a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27b0e:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27b10:	f8cc 2004 	str.w	r2, [ip, #4]
   27b14:	e7d6      	b.n	27ac4 <k_poll+0xd4>
	if (!insert_point) {
   27b16:	f1b8 0f00 	cmp.w	r8, #0
   27b1a:	d00a      	beq.n	27b32 <k_poll+0x142>
		node->prev = insert_point->prev;
   27b1c:	f8d8 7004 	ldr.w	r7, [r8, #4]
   27b20:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   27b22:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   27b26:	f8d8 5004 	ldr.w	r5, [r8, #4]
   27b2a:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   27b2c:	f8c8 2004 	str.w	r2, [r8, #4]
   27b30:	e7c8      	b.n	27ac4 <k_poll+0xd4>
	node->next = list;
   27b32:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27b36:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27b3a:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27b3c:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27b40:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27b42:	f8cc 2004 	str.w	r2, [ip, #4]
   27b46:	e7bd      	b.n	27ac4 <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27b48:	4647      	mov	r7, r8
   27b4a:	e017      	b.n	27b7c <k_poll+0x18c>
	return (node == list->tail) ? NULL : node->next;
   27b4c:	2700      	movs	r7, #0
   27b4e:	e015      	b.n	27b7c <k_poll+0x18c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27b50:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27b54:	f1b8 0f00 	cmp.w	r8, #0
   27b58:	d021      	beq.n	27b9e <k_poll+0x1ae>
					       pending->poller->thread)) {
   27b5a:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   27b5e:	683f      	ldr	r7, [r7, #0]
   27b60:	f997 700a 	ldrsb.w	r7, [r7, #10]
   27b64:	45bb      	cmp	fp, r7
   27b66:	dbd6      	blt.n	27b16 <k_poll+0x126>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27b68:	46c2      	mov	sl, r8
   27b6a:	f1b8 0f00 	cmp.w	r8, #0
   27b6e:	d0eb      	beq.n	27b48 <k_poll+0x158>
	return (node == list->tail) ? NULL : node->next;
   27b70:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27b74:	45b8      	cmp	r8, r7
   27b76:	d0e9      	beq.n	27b4c <k_poll+0x15c>
   27b78:	f8d8 7000 	ldr.w	r7, [r8]
   27b7c:	b167      	cbz	r7, 27b98 <k_poll+0x1a8>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27b7e:	f1ba 0f00 	cmp.w	sl, #0
   27b82:	d0e5      	beq.n	27b50 <k_poll+0x160>
	return (node == list->tail) ? NULL : node->next;
   27b84:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27b88:	45ba      	cmp	sl, r7
   27b8a:	d002      	beq.n	27b92 <k_poll+0x1a2>
   27b8c:	f8d8 8000 	ldr.w	r8, [r8]
   27b90:	e7e0      	b.n	27b54 <k_poll+0x164>
   27b92:	f04f 0800 	mov.w	r8, #0
   27b96:	e7dd      	b.n	27b54 <k_poll+0x164>
   27b98:	f04f 0800 	mov.w	r8, #0
   27b9c:	e7da      	b.n	27b54 <k_poll+0x164>
	node->next = list;
   27b9e:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27ba2:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27ba6:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27ba8:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27bac:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27bae:	f8cc 2004 	str.w	r2, [ip, #4]
   27bb2:	e787      	b.n	27ac4 <k_poll+0xd4>
		add_event(&event->queue->poll_events, event, poller);
   27bb4:	6917      	ldr	r7, [r2, #16]
   27bb6:	f107 0c08 	add.w	ip, r7, #8
	return list->head == list;
   27bba:	f8d7 8008 	ldr.w	r8, [r7, #8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27bbe:	45c4      	cmp	ip, r8
   27bc0:	d010      	beq.n	27be4 <k_poll+0x1f4>
   27bc2:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   27bc6:	b17f      	cbz	r7, 27be8 <k_poll+0x1f8>
   27bc8:	68bf      	ldr	r7, [r7, #8]
   27bca:	683f      	ldr	r7, [r7, #0]
   27bcc:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   27bd0:	9f03      	ldr	r7, [sp, #12]
   27bd2:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   27bd6:	45da      	cmp	sl, fp
   27bd8:	db06      	blt.n	27be8 <k_poll+0x1f8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27bda:	45c4      	cmp	ip, r8
   27bdc:	d12e      	bne.n	27c3c <k_poll+0x24c>
   27bde:	f04f 0800 	mov.w	r8, #0
   27be2:	e02b      	b.n	27c3c <k_poll+0x24c>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27be4:	2700      	movs	r7, #0
   27be6:	e7ee      	b.n	27bc6 <k_poll+0x1d6>
	node->next = list;
   27be8:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27bec:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27bf0:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27bf2:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27bf6:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27bf8:	f8cc 2004 	str.w	r2, [ip, #4]
   27bfc:	e762      	b.n	27ac4 <k_poll+0xd4>
	if (!insert_point) {
   27bfe:	f1b8 0f00 	cmp.w	r8, #0
   27c02:	d00a      	beq.n	27c1a <k_poll+0x22a>
		node->prev = insert_point->prev;
   27c04:	f8d8 7004 	ldr.w	r7, [r8, #4]
   27c08:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   27c0a:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   27c0e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   27c12:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   27c14:	f8c8 2004 	str.w	r2, [r8, #4]
   27c18:	e754      	b.n	27ac4 <k_poll+0xd4>
	node->next = list;
   27c1a:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27c1e:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27c22:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27c24:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27c28:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27c2a:	f8cc 2004 	str.w	r2, [ip, #4]
   27c2e:	e749      	b.n	27ac4 <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27c30:	4647      	mov	r7, r8
   27c32:	e017      	b.n	27c64 <k_poll+0x274>
	return (node == list->tail) ? NULL : node->next;
   27c34:	2700      	movs	r7, #0
   27c36:	e015      	b.n	27c64 <k_poll+0x274>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27c38:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27c3c:	f1b8 0f00 	cmp.w	r8, #0
   27c40:	d021      	beq.n	27c86 <k_poll+0x296>
					       pending->poller->thread)) {
   27c42:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   27c46:	683f      	ldr	r7, [r7, #0]
   27c48:	f997 700a 	ldrsb.w	r7, [r7, #10]
   27c4c:	45bb      	cmp	fp, r7
   27c4e:	dbd6      	blt.n	27bfe <k_poll+0x20e>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27c50:	46c2      	mov	sl, r8
   27c52:	f1b8 0f00 	cmp.w	r8, #0
   27c56:	d0eb      	beq.n	27c30 <k_poll+0x240>
	return (node == list->tail) ? NULL : node->next;
   27c58:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27c5c:	45b8      	cmp	r8, r7
   27c5e:	d0e9      	beq.n	27c34 <k_poll+0x244>
   27c60:	f8d8 7000 	ldr.w	r7, [r8]
   27c64:	b167      	cbz	r7, 27c80 <k_poll+0x290>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27c66:	f1ba 0f00 	cmp.w	sl, #0
   27c6a:	d0e5      	beq.n	27c38 <k_poll+0x248>
	return (node == list->tail) ? NULL : node->next;
   27c6c:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27c70:	45ba      	cmp	sl, r7
   27c72:	d002      	beq.n	27c7a <k_poll+0x28a>
   27c74:	f8d8 8000 	ldr.w	r8, [r8]
   27c78:	e7e0      	b.n	27c3c <k_poll+0x24c>
   27c7a:	f04f 0800 	mov.w	r8, #0
   27c7e:	e7dd      	b.n	27c3c <k_poll+0x24c>
   27c80:	f04f 0800 	mov.w	r8, #0
   27c84:	e7da      	b.n	27c3c <k_poll+0x24c>
	node->next = list;
   27c86:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27c8a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27c8e:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27c90:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27c94:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27c96:	f8cc 2004 	str.w	r2, [ip, #4]
   27c9a:	e713      	b.n	27ac4 <k_poll+0xd4>
		add_event(&event->signal->poll_events, event, poller);
   27c9c:	f8d2 c010 	ldr.w	ip, [r2, #16]
	return list->head == list;
   27ca0:	f8dc 8000 	ldr.w	r8, [ip]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27ca4:	45c4      	cmp	ip, r8
   27ca6:	d010      	beq.n	27cca <k_poll+0x2da>
   27ca8:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   27cac:	b17f      	cbz	r7, 27cce <k_poll+0x2de>
   27cae:	68bf      	ldr	r7, [r7, #8]
   27cb0:	683f      	ldr	r7, [r7, #0]
   27cb2:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   27cb6:	9f03      	ldr	r7, [sp, #12]
   27cb8:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   27cbc:	45da      	cmp	sl, fp
   27cbe:	db06      	blt.n	27cce <k_poll+0x2de>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27cc0:	45c4      	cmp	ip, r8
   27cc2:	d130      	bne.n	27d26 <k_poll+0x336>
   27cc4:	f04f 0800 	mov.w	r8, #0
   27cc8:	e02d      	b.n	27d26 <k_poll+0x336>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27cca:	2700      	movs	r7, #0
   27ccc:	e7ee      	b.n	27cac <k_poll+0x2bc>
	node->next = list;
   27cce:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27cd2:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27cd6:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27cd8:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27cdc:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27cde:	f8cc 2004 	str.w	r2, [ip, #4]
   27ce2:	e6ef      	b.n	27ac4 <k_poll+0xd4>
   27ce4:	20002678 	.word	0x20002678
	if (!insert_point) {
   27ce8:	f1b8 0f00 	cmp.w	r8, #0
   27cec:	d00a      	beq.n	27d04 <k_poll+0x314>
		node->prev = insert_point->prev;
   27cee:	f8d8 7004 	ldr.w	r7, [r8, #4]
   27cf2:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   27cf4:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   27cf8:	f8d8 5004 	ldr.w	r5, [r8, #4]
   27cfc:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   27cfe:	f8c8 2004 	str.w	r2, [r8, #4]
   27d02:	e6df      	b.n	27ac4 <k_poll+0xd4>
	node->next = list;
   27d04:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27d08:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27d0c:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27d0e:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27d12:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27d14:	f8cc 2004 	str.w	r2, [ip, #4]
   27d18:	e6d4      	b.n	27ac4 <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27d1a:	4647      	mov	r7, r8
   27d1c:	e017      	b.n	27d4e <k_poll+0x35e>
	return (node == list->tail) ? NULL : node->next;
   27d1e:	2700      	movs	r7, #0
   27d20:	e015      	b.n	27d4e <k_poll+0x35e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27d22:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27d26:	f1b8 0f00 	cmp.w	r8, #0
   27d2a:	d021      	beq.n	27d70 <k_poll+0x380>
					       pending->poller->thread)) {
   27d2c:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   27d30:	683f      	ldr	r7, [r7, #0]
   27d32:	f997 700a 	ldrsb.w	r7, [r7, #10]
   27d36:	45bb      	cmp	fp, r7
   27d38:	dbd6      	blt.n	27ce8 <k_poll+0x2f8>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27d3a:	46c2      	mov	sl, r8
   27d3c:	f1b8 0f00 	cmp.w	r8, #0
   27d40:	d0eb      	beq.n	27d1a <k_poll+0x32a>
	return (node == list->tail) ? NULL : node->next;
   27d42:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27d46:	45b8      	cmp	r8, r7
   27d48:	d0e9      	beq.n	27d1e <k_poll+0x32e>
   27d4a:	f8d8 7000 	ldr.w	r7, [r8]
   27d4e:	b167      	cbz	r7, 27d6a <k_poll+0x37a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27d50:	f1ba 0f00 	cmp.w	sl, #0
   27d54:	d0e5      	beq.n	27d22 <k_poll+0x332>
	return (node == list->tail) ? NULL : node->next;
   27d56:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27d5a:	45ba      	cmp	sl, r7
   27d5c:	d002      	beq.n	27d64 <k_poll+0x374>
   27d5e:	f8d8 8000 	ldr.w	r8, [r8]
   27d62:	e7e0      	b.n	27d26 <k_poll+0x336>
   27d64:	f04f 0800 	mov.w	r8, #0
   27d68:	e7dd      	b.n	27d26 <k_poll+0x336>
   27d6a:	f04f 0800 	mov.w	r8, #0
   27d6e:	e7da      	b.n	27d26 <k_poll+0x336>
	node->next = list;
   27d70:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27d74:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27d78:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27d7a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27d7e:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27d80:	f8cc 2004 	str.w	r2, [ip, #4]
   27d84:	e69e      	b.n	27ac4 <k_poll+0xd4>
   27d86:	f04f 0320 	mov.w	r3, #32
   27d8a:	f3ef 8511 	mrs	r5, BASEPRI
   27d8e:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
   27d92:	4b46      	ldr	r3, [pc, #280]	; (27eac <k_poll+0x4bc>)
   27d94:	689a      	ldr	r2, [r3, #8]
	return !!(thread->base.thread_state & state);
   27d96:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
   27d98:	f013 0f20 	tst.w	r3, #32
   27d9c:	d047      	beq.n	27e2e <k_poll+0x43e>
	thread->base.thread_state &= ~states;
   27d9e:	f023 0320 	bic.w	r3, r3, #32
   27da2:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
   27da4:	f1b9 0f00 	cmp.w	r9, #0
   27da8:	d049      	beq.n	27e3e <k_poll+0x44e>
   27daa:	4649      	mov	r1, r9
   27dac:	4606      	mov	r6, r0
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   27dae:	a801      	add	r0, sp, #4
   27db0:	9001      	str	r0, [sp, #4]
   27db2:	9002      	str	r0, [sp, #8]
	_pend_current_thread(&wait_q, timeout);
   27db4:	f000 fab4 	bl	28320 <_pend_current_thread>
	_update_time_slice_before_swap();
   27db8:	f000 fb30 	bl	2841c <_update_time_slice_before_swap>
	return __swap(key);
   27dbc:	4628      	mov	r0, r5
   27dbe:	f7fe fe73 	bl	26aa8 <__swap>
   27dc2:	f04f 0320 	mov.w	r3, #32
   27dc6:	f3ef 8e11 	mrs	lr, BASEPRI
   27dca:	f383 8811 	msr	BASEPRI, r3
   27dce:	4675      	mov	r5, lr
   27dd0:	e049      	b.n	27e66 <k_poll+0x476>
	node->prev->next = node->next;
   27dd2:	6853      	ldr	r3, [r2, #4]
   27dd4:	5847      	ldr	r7, [r0, r1]
   27dd6:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   27dd8:	5843      	ldr	r3, [r0, r1]
   27dda:	6852      	ldr	r2, [r2, #4]
   27ddc:	605a      	str	r2, [r3, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27dde:	f386 8811 	msr	BASEPRI, r6
	__asm__ volatile(
   27de2:	f04f 0320 	mov.w	r3, #32
   27de6:	f3ef 8611 	mrs	r6, BASEPRI
   27dea:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   27dee:	3c01      	subs	r4, #1
   27df0:	2c00      	cmp	r4, #0
   27df2:	db1e      	blt.n	27e32 <k_poll+0x442>
		clear_event_registration(&events[last_registered]);
   27df4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   27df8:	0099      	lsls	r1, r3, #2
   27dfa:	1842      	adds	r2, r0, r1
	event->poller = NULL;
   27dfc:	2300      	movs	r3, #0
   27dfe:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   27e00:	7b53      	ldrb	r3, [r2, #13]
   27e02:	f003 030f 	and.w	r3, r3, #15
   27e06:	2b02      	cmp	r3, #2
   27e08:	d0e3      	beq.n	27dd2 <k_poll+0x3e2>
   27e0a:	2b04      	cmp	r3, #4
   27e0c:	d008      	beq.n	27e20 <k_poll+0x430>
   27e0e:	2b01      	cmp	r3, #1
   27e10:	d1e5      	bne.n	27dde <k_poll+0x3ee>
	node->prev->next = node->next;
   27e12:	6853      	ldr	r3, [r2, #4]
   27e14:	5847      	ldr	r7, [r0, r1]
   27e16:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   27e18:	5843      	ldr	r3, [r0, r1]
   27e1a:	6852      	ldr	r2, [r2, #4]
   27e1c:	605a      	str	r2, [r3, #4]
   27e1e:	e7de      	b.n	27dde <k_poll+0x3ee>
	node->prev->next = node->next;
   27e20:	6853      	ldr	r3, [r2, #4]
   27e22:	5847      	ldr	r7, [r0, r1]
   27e24:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   27e26:	5843      	ldr	r3, [r0, r1]
   27e28:	6852      	ldr	r2, [r2, #4]
   27e2a:	605a      	str	r2, [r3, #4]
   27e2c:	e7d7      	b.n	27dde <k_poll+0x3ee>
   27e2e:	462e      	mov	r6, r5
   27e30:	e7de      	b.n	27df0 <k_poll+0x400>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27e32:	f385 8811 	msr	BASEPRI, r5
		return 0;
   27e36:	2000      	movs	r0, #0
}
   27e38:	b005      	add	sp, #20
   27e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27e3e:	f385 8811 	msr	BASEPRI, r5
		return -EAGAIN;
   27e42:	f06f 000a 	mvn.w	r0, #10
   27e46:	e7f7      	b.n	27e38 <k_poll+0x448>
	node->prev->next = node->next;
   27e48:	6853      	ldr	r3, [r2, #4]
   27e4a:	5877      	ldr	r7, [r6, r1]
   27e4c:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   27e4e:	5873      	ldr	r3, [r6, r1]
   27e50:	6852      	ldr	r2, [r2, #4]
   27e52:	605a      	str	r2, [r3, #4]
   27e54:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
   27e58:	f04f 0320 	mov.w	r3, #32
   27e5c:	f3ef 8511 	mrs	r5, BASEPRI
   27e60:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   27e64:	3c01      	subs	r4, #1
   27e66:	2c00      	cmp	r4, #0
   27e68:	db1c      	blt.n	27ea4 <k_poll+0x4b4>
		clear_event_registration(&events[last_registered]);
   27e6a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   27e6e:	0099      	lsls	r1, r3, #2
   27e70:	1872      	adds	r2, r6, r1
	event->poller = NULL;
   27e72:	2300      	movs	r3, #0
   27e74:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   27e76:	7b53      	ldrb	r3, [r2, #13]
   27e78:	f003 030f 	and.w	r3, r3, #15
   27e7c:	2b02      	cmp	r3, #2
   27e7e:	d0e3      	beq.n	27e48 <k_poll+0x458>
   27e80:	2b04      	cmp	r3, #4
   27e82:	d008      	beq.n	27e96 <k_poll+0x4a6>
   27e84:	2b01      	cmp	r3, #1
   27e86:	d1e5      	bne.n	27e54 <k_poll+0x464>
	node->prev->next = node->next;
   27e88:	6853      	ldr	r3, [r2, #4]
   27e8a:	5877      	ldr	r7, [r6, r1]
   27e8c:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   27e8e:	5873      	ldr	r3, [r6, r1]
   27e90:	6852      	ldr	r2, [r2, #4]
   27e92:	605a      	str	r2, [r3, #4]
   27e94:	e7de      	b.n	27e54 <k_poll+0x464>
	node->prev->next = node->next;
   27e96:	6853      	ldr	r3, [r2, #4]
   27e98:	5877      	ldr	r7, [r6, r1]
   27e9a:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   27e9c:	5873      	ldr	r3, [r6, r1]
   27e9e:	6852      	ldr	r2, [r2, #4]
   27ea0:	605a      	str	r2, [r3, #4]
   27ea2:	e7d7      	b.n	27e54 <k_poll+0x464>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27ea4:	f38e 8811 	msr	BASEPRI, lr
	return swap_rc;
   27ea8:	e7c6      	b.n	27e38 <k_poll+0x448>
   27eaa:	bf00      	nop
   27eac:	20002678 	.word	0x20002678

00027eb0 <_handle_obj_poll_events>:
	return list->head == list;
   27eb0:	6803      	ldr	r3, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
   27eb2:	4298      	cmp	r0, r3
   27eb4:	d010      	beq.n	27ed8 <_handle_obj_poll_events+0x28>
	node->prev->next = node->next;
   27eb6:	685a      	ldr	r2, [r3, #4]
   27eb8:	6818      	ldr	r0, [r3, #0]
   27eba:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   27ebc:	681a      	ldr	r2, [r3, #0]
   27ebe:	6858      	ldr	r0, [r3, #4]
   27ec0:	6050      	str	r0, [r2, #4]
{
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
   27ec2:	b15b      	cbz	r3, 27edc <_handle_obj_poll_events+0x2c>
{
   27ec4:	b500      	push	{lr}
   27ec6:	b083      	sub	sp, #12
		return 0;
	}

	(void)_signal_poll_event(poll_event, state, &must_reschedule);
   27ec8:	aa01      	add	r2, sp, #4
   27eca:	4618      	mov	r0, r3
   27ecc:	f7ff fcfe 	bl	278cc <_signal_poll_event>
	return must_reschedule;
   27ed0:	9801      	ldr	r0, [sp, #4]
}
   27ed2:	b003      	add	sp, #12
   27ed4:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   27ed8:	2300      	movs	r3, #0
   27eda:	e7f2      	b.n	27ec2 <_handle_obj_poll_events+0x12>
		return 0;
   27edc:	2000      	movs	r0, #0
   27ede:	4770      	bx	lr

00027ee0 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   27ee0:	b530      	push	{r4, r5, lr}
   27ee2:	b083      	sub	sp, #12
	__asm__ volatile(
   27ee4:	f04f 0320 	mov.w	r3, #32
   27ee8:	f3ef 8511 	mrs	r5, BASEPRI
   27eec:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
   27ef0:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1;
   27ef2:	2301      	movs	r3, #1
   27ef4:	6083      	str	r3, [r0, #8]
	return list->head == list;
   27ef6:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   27ef8:	4298      	cmp	r0, r3
   27efa:	d013      	beq.n	27f24 <k_poll_signal+0x44>
	node->prev->next = node->next;
   27efc:	685a      	ldr	r2, [r3, #4]
   27efe:	6819      	ldr	r1, [r3, #0]
   27f00:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   27f02:	681a      	ldr	r2, [r3, #0]
   27f04:	6859      	ldr	r1, [r3, #4]
   27f06:	6051      	str	r1, [r2, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
   27f08:	b173      	cbz	r3, 27f28 <k_poll_signal+0x48>
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   27f0a:	aa01      	add	r2, sp, #4
   27f0c:	2101      	movs	r1, #1
   27f0e:	4618      	mov	r0, r3
   27f10:	f7ff fcdc 	bl	278cc <_signal_poll_event>
   27f14:	4604      	mov	r4, r0
				    &must_reschedule);

	if (must_reschedule) {
   27f16:	9b01      	ldr	r3, [sp, #4]
   27f18:	b953      	cbnz	r3, 27f30 <k_poll_signal+0x50>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27f1a:	f385 8811 	msr	BASEPRI, r5
	} else {
		irq_unlock(key);
	}

	return rc;
}
   27f1e:	4620      	mov	r0, r4
   27f20:	b003      	add	sp, #12
   27f22:	bd30      	pop	{r4, r5, pc}
		return NULL;
   27f24:	2300      	movs	r3, #0
   27f26:	e7ef      	b.n	27f08 <k_poll_signal+0x28>
   27f28:	f385 8811 	msr	BASEPRI, r5
		return 0;
   27f2c:	2400      	movs	r4, #0
   27f2e:	e7f6      	b.n	27f1e <k_poll_signal+0x3e>
	_update_time_slice_before_swap();
   27f30:	f000 fa74 	bl	2841c <_update_time_slice_before_swap>
	return __swap(key);
   27f34:	4628      	mov	r0, r5
   27f36:	f7fe fdb7 	bl	26aa8 <__swap>
   27f3a:	e7f0      	b.n	27f1e <k_poll_signal+0x3e>

00027f3c <k_queue_poll>:
	sys_slist_init(list);
}

#if defined(CONFIG_POLL)
static void *k_queue_poll(struct k_queue *queue, s32_t timeout)
{
   27f3c:	b530      	push	{r4, r5, lr}
   27f3e:	b087      	sub	sp, #28
   27f40:	4604      	mov	r4, r0
   27f42:	460d      	mov	r5, r1
	struct k_poll_event event;
	int err;
	unsigned int key;
	void *val;

	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   27f44:	4603      	mov	r3, r0
   27f46:	2200      	movs	r2, #0
   27f48:	2104      	movs	r1, #4
   27f4a:	eb0d 0001 	add.w	r0, sp, r1
   27f4e:	f7ff fd3b 	bl	279c8 <k_poll_event_init>
   27f52:	e005      	b.n	27f60 <k_queue_poll+0x24>
   27f54:	f383 8811 	msr	BASEPRI, r3
		 * irq_lock.
		 */
		key = irq_lock();
		val = sys_slist_get(&queue->data_q);
		irq_unlock(key);
	} while (!val && timeout == K_FOREVER);
   27f58:	b9f8      	cbnz	r0, 27f9a <k_queue_poll+0x5e>
   27f5a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   27f5e:	d11c      	bne.n	27f9a <k_queue_poll+0x5e>
		event.state = K_POLL_STATE_NOT_READY;
   27f60:	f89d 3011 	ldrb.w	r3, [sp, #17]
   27f64:	f36f 1307 	bfc	r3, #4, #4
   27f68:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   27f6c:	462a      	mov	r2, r5
   27f6e:	2101      	movs	r1, #1
   27f70:	a801      	add	r0, sp, #4
   27f72:	f7ff fd3d 	bl	279f0 <k_poll>
		if (err) {
   27f76:	b978      	cbnz	r0, 27f98 <k_queue_poll+0x5c>
	__asm__ volatile(
   27f78:	f04f 0220 	mov.w	r2, #32
   27f7c:	f3ef 8311 	mrs	r3, BASEPRI
   27f80:	f382 8811 	msr	BASEPRI, r2
   27f84:	6820      	ldr	r0, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   27f86:	2800      	cmp	r0, #0
   27f88:	d0e4      	beq.n	27f54 <k_queue_poll+0x18>
	list->head = node->next;
   27f8a:	6802      	ldr	r2, [r0, #0]
   27f8c:	6022      	str	r2, [r4, #0]
	if (list->tail == node) {
   27f8e:	6861      	ldr	r1, [r4, #4]
   27f90:	4288      	cmp	r0, r1
   27f92:	d1df      	bne.n	27f54 <k_queue_poll+0x18>
		list->tail = list->head;
   27f94:	6062      	str	r2, [r4, #4]
   27f96:	e7dd      	b.n	27f54 <k_queue_poll+0x18>
			return NULL;
   27f98:	2000      	movs	r0, #0

	return val;
}
   27f9a:	b007      	add	sp, #28
   27f9c:	bd30      	pop	{r4, r5, pc}

00027f9e <k_queue_init>:
	list->head = NULL;
   27f9e:	2300      	movs	r3, #0
   27fa0:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   27fa2:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   27fa4:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   27fa8:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   27faa:	60c3      	str	r3, [r0, #12]
   27fac:	4770      	bx	lr

00027fae <k_queue_insert>:
{
   27fae:	b510      	push	{r4, lr}
   27fb0:	f04f 0320 	mov.w	r3, #32
   27fb4:	f3ef 8411 	mrs	r4, BASEPRI
   27fb8:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
   27fbc:	b159      	cbz	r1, 27fd6 <k_queue_insert+0x28>
	} else if (!prev->next) {
   27fbe:	680b      	ldr	r3, [r1, #0]
   27fc0:	b18b      	cbz	r3, 27fe6 <k_queue_insert+0x38>
		node->next = prev->next;
   27fc2:	6013      	str	r3, [r2, #0]
		prev->next = node;
   27fc4:	600a      	str	r2, [r1, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
   27fc6:	2104      	movs	r1, #4
   27fc8:	3008      	adds	r0, #8
   27fca:	f7ff ff71 	bl	27eb0 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   27fce:	b998      	cbnz	r0, 27ff8 <k_queue_insert+0x4a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27fd0:	f384 8811 	msr	BASEPRI, r4
   27fd4:	bd10      	pop	{r4, pc}
	node->next = list->head;
   27fd6:	6803      	ldr	r3, [r0, #0]
   27fd8:	6013      	str	r3, [r2, #0]
	list->head = node;
   27fda:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   27fdc:	6843      	ldr	r3, [r0, #4]
   27fde:	2b00      	cmp	r3, #0
   27fe0:	d1f1      	bne.n	27fc6 <k_queue_insert+0x18>
		list->tail = list->head;
   27fe2:	6042      	str	r2, [r0, #4]
   27fe4:	e7ef      	b.n	27fc6 <k_queue_insert+0x18>
	node->next = NULL;
   27fe6:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
   27fe8:	6843      	ldr	r3, [r0, #4]
   27fea:	b113      	cbz	r3, 27ff2 <k_queue_insert+0x44>
		list->tail->next = node;
   27fec:	601a      	str	r2, [r3, #0]
		list->tail = node;
   27fee:	6042      	str	r2, [r0, #4]
   27ff0:	e7e9      	b.n	27fc6 <k_queue_insert+0x18>
		list->tail = node;
   27ff2:	6042      	str	r2, [r0, #4]
		list->head = node;
   27ff4:	6002      	str	r2, [r0, #0]
   27ff6:	e7e6      	b.n	27fc6 <k_queue_insert+0x18>
	_update_time_slice_before_swap();
   27ff8:	f000 fa10 	bl	2841c <_update_time_slice_before_swap>
	return __swap(key);
   27ffc:	4620      	mov	r0, r4
   27ffe:	f7fe fd53 	bl	26aa8 <__swap>
   28002:	bd10      	pop	{r4, pc}

00028004 <k_queue_append>:
{
   28004:	b508      	push	{r3, lr}
	return k_queue_insert(queue, queue->data_q.tail, data);
   28006:	460a      	mov	r2, r1
   28008:	6841      	ldr	r1, [r0, #4]
   2800a:	f7ff ffd0 	bl	27fae <k_queue_insert>
   2800e:	bd08      	pop	{r3, pc}

00028010 <k_queue_prepend>:
{
   28010:	b508      	push	{r3, lr}
	return k_queue_insert(queue, NULL, data);
   28012:	460a      	mov	r2, r1
   28014:	2100      	movs	r1, #0
   28016:	f7ff ffca 	bl	27fae <k_queue_insert>
   2801a:	bd08      	pop	{r3, pc}

0002801c <k_queue_append_list>:
{
   2801c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2801e:	f04f 0320 	mov.w	r3, #32
   28022:	f3ef 8411 	mrs	r4, BASEPRI
   28026:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
   2802a:	6843      	ldr	r3, [r0, #4]
   2802c:	b14b      	cbz	r3, 28042 <k_queue_append_list+0x26>
		list->tail->next = (sys_snode_t *)head;
   2802e:	6019      	str	r1, [r3, #0]
		list->tail = (sys_snode_t *)tail;
   28030:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
   28032:	2104      	movs	r1, #4
   28034:	3008      	adds	r0, #8
   28036:	f7ff ff3b 	bl	27eb0 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   2803a:	b928      	cbnz	r0, 28048 <k_queue_append_list+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2803c:	f384 8811 	msr	BASEPRI, r4
   28040:	bd10      	pop	{r4, pc}
		list->head = (sys_snode_t *)head;
   28042:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
   28044:	6042      	str	r2, [r0, #4]
   28046:	e7f4      	b.n	28032 <k_queue_append_list+0x16>
	_update_time_slice_before_swap();
   28048:	f000 f9e8 	bl	2841c <_update_time_slice_before_swap>
	return __swap(key);
   2804c:	4620      	mov	r0, r4
   2804e:	f7fe fd2b 	bl	26aa8 <__swap>
   28052:	bd10      	pop	{r4, pc}

00028054 <k_queue_get>:
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   28054:	b510      	push	{r4, lr}
	__asm__ volatile(
   28056:	f04f 0320 	mov.w	r3, #32
   2805a:	f3ef 8211 	mrs	r2, BASEPRI
   2805e:	f383 8811 	msr	BASEPRI, r3
	return (!list->head);
   28062:	6803      	ldr	r3, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   28064:	b153      	cbz	r3, 2807c <k_queue_get+0x28>
	list->head = node->next;
   28066:	6819      	ldr	r1, [r3, #0]
   28068:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
   2806a:	6844      	ldr	r4, [r0, #4]
   2806c:	42a3      	cmp	r3, r4
   2806e:	d003      	beq.n	28078 <k_queue_get+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28070:	f382 8811 	msr	BASEPRI, r2
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
   28074:	4618      	mov	r0, r3
   28076:	bd10      	pop	{r4, pc}
		list->tail = list->head;
   28078:	6041      	str	r1, [r0, #4]
   2807a:	e7f9      	b.n	28070 <k_queue_get+0x1c>
	}

	if (timeout == K_NO_WAIT) {
   2807c:	b121      	cbz	r1, 28088 <k_queue_get+0x34>
   2807e:	f382 8811 	msr	BASEPRI, r2
	}

#if defined(CONFIG_POLL)
	irq_unlock(key);

	return k_queue_poll(queue, timeout);
   28082:	f7ff ff5b 	bl	27f3c <k_queue_poll>
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   28086:	bd10      	pop	{r4, pc}
   28088:	f382 8811 	msr	BASEPRI, r2
		return NULL;
   2808c:	2000      	movs	r0, #0
   2808e:	bd10      	pop	{r4, pc}

00028090 <_set_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   28090:	3010      	adds	r0, #16
   28092:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   28094:	f000 001f 	and.w	r0, r0, #31
   28098:	2201      	movs	r2, #1
   2809a:	fa02 f000 	lsl.w	r0, r2, r0
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   2809e:	1d9a      	adds	r2, r3, #6
   280a0:	4b03      	ldr	r3, [pc, #12]	; (280b0 <_set_ready_q_prio_bit+0x20>)
   280a2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   280a6:	685a      	ldr	r2, [r3, #4]
   280a8:	4302      	orrs	r2, r0
   280aa:	605a      	str	r2, [r3, #4]
   280ac:	4770      	bx	lr
   280ae:	bf00      	nop
   280b0:	20002678 	.word	0x20002678

000280b4 <_clear_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   280b4:	3010      	adds	r0, #16
   280b6:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   280b8:	f000 001f 	and.w	r0, r0, #31
   280bc:	2201      	movs	r2, #1
   280be:	fa02 f000 	lsl.w	r0, r2, r0
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
   280c2:	1d9a      	adds	r2, r3, #6
   280c4:	4b03      	ldr	r3, [pc, #12]	; (280d4 <_clear_ready_q_prio_bit+0x20>)
   280c6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   280ca:	685a      	ldr	r2, [r3, #4]
   280cc:	ea22 0200 	bic.w	r2, r2, r0
   280d0:	605a      	str	r2, [r3, #4]
   280d2:	4770      	bx	lr
   280d4:	20002678 	.word	0x20002678

000280d8 <_get_ready_q_head>:
	ready_range = _ready_q.prio_bmap[0];
   280d8:	4b06      	ldr	r3, [pc, #24]	; (280f4 <_get_ready_q_head+0x1c>)
   280da:	69da      	ldr	r2, [r3, #28]
	return __builtin_ffs(op);
   280dc:	fa92 f3a2 	rbit	r3, r2
   280e0:	fab3 f383 	clz	r3, r3
   280e4:	b90a      	cbnz	r2, 280ea <_get_ready_q_head+0x12>
   280e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return list->head;
   280ea:	3304      	adds	r3, #4

	struct k_thread *thread =
		(struct k_thread *)sys_dlist_peek_head_not_empty(list);

	return thread;
}
   280ec:	4a01      	ldr	r2, [pc, #4]	; (280f4 <_get_ready_q_head+0x1c>)
   280ee:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   280f2:	4770      	bx	lr
   280f4:	20002678 	.word	0x20002678

000280f8 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   280f8:	b570      	push	{r4, r5, r6, lr}
   280fa:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   280fc:	f990 000a 	ldrsb.w	r0, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   28100:	4e0c      	ldr	r6, [pc, #48]	; (28134 <_add_thread_to_ready_q+0x3c>)
   28102:	f100 0514 	add.w	r5, r0, #20
   28106:	eb06 05c5 	add.w	r5, r6, r5, lsl #3

	_set_ready_q_prio_bit(thread->base.prio);
   2810a:	f7ff ffc1 	bl	28090 <_set_ready_q_prio_bit>
	node->next = list;
   2810e:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   28110:	686b      	ldr	r3, [r5, #4]
   28112:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   28114:	686b      	ldr	r3, [r5, #4]
   28116:	601c      	str	r4, [r3, #0]
	list->tail = node;
   28118:	606c      	str	r4, [r5, #4]
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   2811a:	69b3      	ldr	r3, [r6, #24]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   2811c:	f994 200a 	ldrsb.w	r2, [r4, #10]
   28120:	f993 100a 	ldrsb.w	r1, [r3, #10]
   28124:	4291      	cmp	r1, r2
   28126:	dc02      	bgt.n	2812e <_add_thread_to_ready_q+0x36>
   28128:	4a02      	ldr	r2, [pc, #8]	; (28134 <_add_thread_to_ready_q+0x3c>)
   2812a:	6193      	str	r3, [r2, #24]
   2812c:	bd70      	pop	{r4, r5, r6, pc}
   2812e:	4623      	mov	r3, r4
   28130:	e7fa      	b.n	28128 <_add_thread_to_ready_q+0x30>
   28132:	bf00      	nop
   28134:	20002678 	.word	0x20002678

00028138 <_remove_thread_from_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   28138:	b538      	push	{r3, r4, r5, lr}
   2813a:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   2813c:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   28140:	4a0e      	ldr	r2, [pc, #56]	; (2817c <_remove_thread_from_ready_q+0x44>)
   28142:	3314      	adds	r3, #20
   28144:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
	node->prev->next = node->next;
   28148:	6840      	ldr	r0, [r0, #4]
   2814a:	6825      	ldr	r5, [r4, #0]
   2814c:	6005      	str	r5, [r0, #0]
	node->next->prev = node->prev;
   2814e:	6820      	ldr	r0, [r4, #0]
   28150:	6865      	ldr	r5, [r4, #4]
   28152:	6045      	str	r5, [r0, #4]
	return list->head == list;
   28154:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   28158:	4299      	cmp	r1, r3
   2815a:	d006      	beq.n	2816a <_remove_thread_from_ready_q+0x32>
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   2815c:	4b07      	ldr	r3, [pc, #28]	; (2817c <_remove_thread_from_ready_q+0x44>)
   2815e:	6998      	ldr	r0, [r3, #24]
   28160:	4284      	cmp	r4, r0
   28162:	d007      	beq.n	28174 <_remove_thread_from_ready_q+0x3c>
   28164:	4b05      	ldr	r3, [pc, #20]	; (2817c <_remove_thread_from_ready_q+0x44>)
   28166:	6198      	str	r0, [r3, #24]
   28168:	bd38      	pop	{r3, r4, r5, pc}
		_clear_ready_q_prio_bit(thread->base.prio);
   2816a:	f994 000a 	ldrsb.w	r0, [r4, #10]
   2816e:	f7ff ffa1 	bl	280b4 <_clear_ready_q_prio_bit>
   28172:	e7f3      	b.n	2815c <_remove_thread_from_ready_q+0x24>
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   28174:	f7ff ffb0 	bl	280d8 <_get_ready_q_head>
   28178:	e7f4      	b.n	28164 <_remove_thread_from_ready_q+0x2c>
   2817a:	bf00      	nop
   2817c:	20002678 	.word	0x20002678

00028180 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   28180:	b538      	push	{r3, r4, r5, lr}
   28182:	680b      	ldr	r3, [r1, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28184:	4299      	cmp	r1, r3
   28186:	d115      	bne.n	281b4 <_pend_thread+0x34>
   28188:	2300      	movs	r3, #0
   2818a:	e013      	b.n	281b4 <_pend_thread+0x34>
	if (!insert_point) {
   2818c:	b133      	cbz	r3, 2819c <_pend_thread+0x1c>
		node->prev = insert_point->prev;
   2818e:	685c      	ldr	r4, [r3, #4]
   28190:	6044      	str	r4, [r0, #4]
		node->next = insert_point;
   28192:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   28194:	685c      	ldr	r4, [r3, #4]
   28196:	6020      	str	r0, [r4, #0]
		insert_point->prev = node;
   28198:	6058      	str	r0, [r3, #4]
   2819a:	e02b      	b.n	281f4 <_pend_thread+0x74>
	node->next = list;
   2819c:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   2819e:	684b      	ldr	r3, [r1, #4]
   281a0:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   281a2:	684b      	ldr	r3, [r1, #4]
   281a4:	6018      	str	r0, [r3, #0]
	list->tail = node;
   281a6:	6048      	str	r0, [r1, #4]
   281a8:	e024      	b.n	281f4 <_pend_thread+0x74>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   281aa:	461d      	mov	r5, r3
   281ac:	e010      	b.n	281d0 <_pend_thread+0x50>
	return (node == list->tail) ? NULL : node->next;
   281ae:	2500      	movs	r5, #0
   281b0:	e00e      	b.n	281d0 <_pend_thread+0x50>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   281b2:	2300      	movs	r3, #0
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   281b4:	b1c3      	cbz	r3, 281e8 <_pend_thread+0x68>
   281b6:	f990 500a 	ldrsb.w	r5, [r0, #10]
   281ba:	f993 400a 	ldrsb.w	r4, [r3, #10]
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   281be:	42a5      	cmp	r5, r4
   281c0:	dbe4      	blt.n	2818c <_pend_thread+0xc>
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   281c2:	461c      	mov	r4, r3
   281c4:	2b00      	cmp	r3, #0
   281c6:	d0f0      	beq.n	281aa <_pend_thread+0x2a>
	return (node == list->tail) ? NULL : node->next;
   281c8:	684d      	ldr	r5, [r1, #4]
   281ca:	42ab      	cmp	r3, r5
   281cc:	d0ef      	beq.n	281ae <_pend_thread+0x2e>
   281ce:	681d      	ldr	r5, [r3, #0]
   281d0:	b145      	cbz	r5, 281e4 <_pend_thread+0x64>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   281d2:	2c00      	cmp	r4, #0
   281d4:	d0ed      	beq.n	281b2 <_pend_thread+0x32>
	return (node == list->tail) ? NULL : node->next;
   281d6:	684d      	ldr	r5, [r1, #4]
   281d8:	42ac      	cmp	r4, r5
   281da:	d001      	beq.n	281e0 <_pend_thread+0x60>
   281dc:	681b      	ldr	r3, [r3, #0]
   281de:	e7e9      	b.n	281b4 <_pend_thread+0x34>
   281e0:	2300      	movs	r3, #0
   281e2:	e7e7      	b.n	281b4 <_pend_thread+0x34>
   281e4:	2300      	movs	r3, #0
   281e6:	e7e5      	b.n	281b4 <_pend_thread+0x34>
	node->next = list;
   281e8:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   281ea:	684b      	ldr	r3, [r1, #4]
   281ec:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   281ee:	684b      	ldr	r3, [r1, #4]
   281f0:	6018      	str	r0, [r3, #0]
	list->tail = node;
   281f2:	6048      	str	r0, [r1, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   281f4:	7a44      	ldrb	r4, [r0, #9]
   281f6:	f044 0402 	orr.w	r4, r4, #2
   281fa:	7244      	strb	r4, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   281fc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28200:	f000 8089 	beq.w	28316 <_pend_thread+0x196>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   28204:	f102 0309 	add.w	r3, r2, #9
   28208:	4a43      	ldr	r2, [pc, #268]	; (28318 <_pend_thread+0x198>)
   2820a:	fba2 2303 	umull	r2, r3, r2, r3
   2820e:	08db      	lsrs	r3, r3, #3
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);
   28210:	3301      	adds	r3, #1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   28212:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   28216:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   28218:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2821a:	60e1      	str	r1, [r4, #12]
	if (!timeout_in_ticks) {
   2821c:	b133      	cbz	r3, 2822c <_pend_thread+0xac>
	return list->head == list;
   2821e:	4a3f      	ldr	r2, [pc, #252]	; (2831c <_pend_thread+0x19c>)
   28220:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28224:	4293      	cmp	r3, r2
   28226:	d151      	bne.n	282cc <_pend_thread+0x14c>
   28228:	2300      	movs	r3, #0
   2822a:	e04f      	b.n	282cc <_pend_thread+0x14c>
	__asm__ volatile(
   2822c:	f04f 0320 	mov.w	r3, #32
   28230:	f3ef 8511 	mrs	r5, BASEPRI
   28234:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   28238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2823c:	6123      	str	r3, [r4, #16]
	if (thread) {
   2823e:	b320      	cbz	r0, 2828a <_pend_thread+0x10a>
	if (timeout_obj->wait_q) {
   28240:	68e3      	ldr	r3, [r4, #12]
   28242:	b15b      	cbz	r3, 2825c <_pend_thread+0xdc>
	node->prev->next = node->next;
   28244:	6843      	ldr	r3, [r0, #4]
   28246:	6802      	ldr	r2, [r0, #0]
   28248:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2824a:	6803      	ldr	r3, [r0, #0]
   2824c:	6842      	ldr	r2, [r0, #4]
   2824e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28250:	7a43      	ldrb	r3, [r0, #9]
   28252:	f023 0302 	bic.w	r3, r3, #2
   28256:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   28258:	2300      	movs	r3, #0
   2825a:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2825c:	7a43      	ldrb	r3, [r0, #9]
   2825e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28262:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28264:	f013 0f1b 	tst.w	r3, #27
   28268:	d107      	bne.n	2827a <_pend_thread+0xfa>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2826a:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2826c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28270:	d001      	beq.n	28276 <_pend_thread+0xf6>
   28272:	2300      	movs	r3, #0
   28274:	e002      	b.n	2827c <_pend_thread+0xfc>
   28276:	2301      	movs	r3, #1
   28278:	e000      	b.n	2827c <_pend_thread+0xfc>
   2827a:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2827c:	b913      	cbnz	r3, 28284 <_pend_thread+0x104>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2827e:	f385 8811 	msr	BASEPRI, r5
   28282:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   28284:	f7ff ff38 	bl	280f8 <_add_thread_to_ready_q>
   28288:	e7f9      	b.n	2827e <_pend_thread+0xfe>
   2828a:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   2828e:	6963      	ldr	r3, [r4, #20]
   28290:	2b00      	cmp	r3, #0
   28292:	d040      	beq.n	28316 <_pend_thread+0x196>
			timeout->func(timeout);
   28294:	4620      	mov	r0, r4
   28296:	4798      	blx	r3
   28298:	bd38      	pop	{r3, r4, r5, pc}
			in_q->delta_ticks_from_prev -= *delta;
   2829a:	1a8a      	subs	r2, r1, r2
   2829c:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   2829e:	b133      	cbz	r3, 282ae <_pend_thread+0x12e>
		node->prev = insert_point->prev;
   282a0:	685a      	ldr	r2, [r3, #4]
   282a2:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   282a4:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   282a6:	685a      	ldr	r2, [r3, #4]
   282a8:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   282aa:	605c      	str	r4, [r3, #4]
   282ac:	bd38      	pop	{r3, r4, r5, pc}
	node->next = list;
   282ae:	4b1b      	ldr	r3, [pc, #108]	; (2831c <_pend_thread+0x19c>)
   282b0:	f103 020c 	add.w	r2, r3, #12
   282b4:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   282b6:	691a      	ldr	r2, [r3, #16]
   282b8:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   282ba:	691a      	ldr	r2, [r3, #16]
   282bc:	6014      	str	r4, [r2, #0]
	list->tail = node;
   282be:	611c      	str	r4, [r3, #16]
   282c0:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   282c2:	4619      	mov	r1, r3
   282c4:	e011      	b.n	282ea <_pend_thread+0x16a>
	return (node == list->tail) ? NULL : node->next;
   282c6:	2100      	movs	r1, #0
   282c8:	e00f      	b.n	282ea <_pend_thread+0x16a>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   282ca:	2300      	movs	r3, #0
   282cc:	b1d3      	cbz	r3, 28304 <_pend_thread+0x184>
		if (*delta <= in_q->delta_ticks_from_prev) {
   282ce:	6922      	ldr	r2, [r4, #16]
   282d0:	6919      	ldr	r1, [r3, #16]
   282d2:	428a      	cmp	r2, r1
   282d4:	dde1      	ble.n	2829a <_pend_thread+0x11a>
		*delta -= in_q->delta_ticks_from_prev;
   282d6:	1a52      	subs	r2, r2, r1
   282d8:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   282da:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   282dc:	2b00      	cmp	r3, #0
   282de:	d0f0      	beq.n	282c2 <_pend_thread+0x142>
	return (node == list->tail) ? NULL : node->next;
   282e0:	490e      	ldr	r1, [pc, #56]	; (2831c <_pend_thread+0x19c>)
   282e2:	6909      	ldr	r1, [r1, #16]
   282e4:	428b      	cmp	r3, r1
   282e6:	d0ee      	beq.n	282c6 <_pend_thread+0x146>
   282e8:	6819      	ldr	r1, [r3, #0]
   282ea:	2900      	cmp	r1, #0
   282ec:	d0ed      	beq.n	282ca <_pend_thread+0x14a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   282ee:	b12a      	cbz	r2, 282fc <_pend_thread+0x17c>
	return (node == list->tail) ? NULL : node->next;
   282f0:	490a      	ldr	r1, [pc, #40]	; (2831c <_pend_thread+0x19c>)
   282f2:	6909      	ldr	r1, [r1, #16]
   282f4:	428a      	cmp	r2, r1
   282f6:	d003      	beq.n	28300 <_pend_thread+0x180>
   282f8:	681b      	ldr	r3, [r3, #0]
   282fa:	e7e7      	b.n	282cc <_pend_thread+0x14c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   282fc:	2300      	movs	r3, #0
   282fe:	e7e5      	b.n	282cc <_pend_thread+0x14c>
	return (node == list->tail) ? NULL : node->next;
   28300:	2300      	movs	r3, #0
   28302:	e7e3      	b.n	282cc <_pend_thread+0x14c>
	node->next = list;
   28304:	4b05      	ldr	r3, [pc, #20]	; (2831c <_pend_thread+0x19c>)
   28306:	f103 020c 	add.w	r2, r3, #12
   2830a:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   2830c:	691a      	ldr	r2, [r3, #16]
   2830e:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28310:	691a      	ldr	r2, [r3, #16]
   28312:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28314:	611c      	str	r4, [r3, #16]
   28316:	bd38      	pop	{r3, r4, r5, pc}
   28318:	cccccccd 	.word	0xcccccccd
   2831c:	20002678 	.word	0x20002678

00028320 <_pend_current_thread>:
}

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   28320:	b570      	push	{r4, r5, r6, lr}
   28322:	4605      	mov	r5, r0
   28324:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(_current);
   28326:	4c05      	ldr	r4, [pc, #20]	; (2833c <_pend_current_thread+0x1c>)
   28328:	68a0      	ldr	r0, [r4, #8]
   2832a:	f7ff ff05 	bl	28138 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   2832e:	4632      	mov	r2, r6
   28330:	4629      	mov	r1, r5
   28332:	68a0      	ldr	r0, [r4, #8]
   28334:	f7ff ff24 	bl	28180 <_pend_thread>
   28338:	bd70      	pop	{r4, r5, r6, pc}
   2833a:	bf00      	nop
   2833c:	20002678 	.word	0x20002678

00028340 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
   28340:	4b09      	ldr	r3, [pc, #36]	; (28368 <__must_switch_threads+0x28>)
   28342:	69db      	ldr	r3, [r3, #28]
	return __builtin_ffs(op);
   28344:	fa93 f0a3 	rbit	r0, r3
   28348:	fab0 f080 	clz	r0, r0
   2834c:	b90b      	cbnz	r3, 28352 <__must_switch_threads+0x12>
   2834e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
   28352:	3810      	subs	r0, #16

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   28354:	4b04      	ldr	r3, [pc, #16]	; (28368 <__must_switch_threads+0x28>)
   28356:	689b      	ldr	r3, [r3, #8]
   28358:	f993 300a 	ldrsb.w	r3, [r3, #10]
#else
	return 0;
#endif
}
   2835c:	4283      	cmp	r3, r0
   2835e:	bfd4      	ite	le
   28360:	2000      	movle	r0, #0
   28362:	2001      	movgt	r0, #1
   28364:	4770      	bx	lr
   28366:	bf00      	nop
   28368:	20002678 	.word	0x20002678

0002836c <_move_thread_to_end_of_prio_q>:
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   2836c:	f990 200a 	ldrsb.w	r2, [r0, #10]
	return prio + _NUM_COOP_PRIO;
   28370:	f102 0310 	add.w	r3, r2, #16
	sys_dlist_t *q = &_ready_q.q[q_index];
   28374:	3214      	adds	r2, #20
   28376:	4911      	ldr	r1, [pc, #68]	; (283bc <_move_thread_to_end_of_prio_q+0x50>)
   28378:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	return list->tail == node;
   2837c:	6851      	ldr	r1, [r2, #4]

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   2837e:	4288      	cmp	r0, r1
   28380:	d01a      	beq.n	283b8 <_move_thread_to_end_of_prio_q+0x4c>
{
   28382:	b510      	push	{r4, lr}
	node->prev->next = node->next;
   28384:	6841      	ldr	r1, [r0, #4]
   28386:	6804      	ldr	r4, [r0, #0]
   28388:	600c      	str	r4, [r1, #0]
	node->next->prev = node->prev;
   2838a:	6801      	ldr	r1, [r0, #0]
   2838c:	6844      	ldr	r4, [r0, #4]
   2838e:	604c      	str	r4, [r1, #4]
	node->next = list;
   28390:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
   28392:	4a0a      	ldr	r2, [pc, #40]	; (283bc <_move_thread_to_end_of_prio_q+0x50>)
   28394:	3304      	adds	r3, #4
   28396:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2839a:	6859      	ldr	r1, [r3, #4]
   2839c:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
   2839e:	6859      	ldr	r1, [r3, #4]
   283a0:	6008      	str	r0, [r1, #0]
	list->tail = node;
   283a2:	6058      	str	r0, [r3, #4]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   283a4:	6993      	ldr	r3, [r2, #24]
   283a6:	4298      	cmp	r0, r3
   283a8:	d002      	beq.n	283b0 <_move_thread_to_end_of_prio_q+0x44>
   283aa:	4a04      	ldr	r2, [pc, #16]	; (283bc <_move_thread_to_end_of_prio_q+0x50>)
   283ac:	6193      	str	r3, [r2, #24]
   283ae:	bd10      	pop	{r4, pc}
   283b0:	f7ff fe92 	bl	280d8 <_get_ready_q_head>
   283b4:	4603      	mov	r3, r0
   283b6:	e7f8      	b.n	283aa <_move_thread_to_end_of_prio_q+0x3e>
   283b8:	4770      	bx	lr
   283ba:	bf00      	nop
   283bc:	20002678 	.word	0x20002678

000283c0 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   283c0:	4b01      	ldr	r3, [pc, #4]	; (283c8 <_impl_k_current_get+0x8>)
   283c2:	6898      	ldr	r0, [r3, #8]
   283c4:	4770      	bx	lr
   283c6:	bf00      	nop
   283c8:	20002678 	.word	0x20002678

000283cc <_is_thread_time_slicing>:
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   283cc:	4b0f      	ldr	r3, [pc, #60]	; (2840c <_is_thread_time_slicing+0x40>)
   283ce:	681b      	ldr	r3, [r3, #0]
   283d0:	2b00      	cmp	r3, #0
   283d2:	dd14      	ble.n	283fe <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
   283d4:	4b0e      	ldr	r3, [pc, #56]	; (28410 <_is_thread_time_slicing+0x44>)
   283d6:	681b      	ldr	r3, [r3, #0]
   283d8:	4298      	cmp	r0, r3
   283da:	d012      	beq.n	28402 <_is_thread_time_slicing+0x36>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   283dc:	f990 300a 	ldrsb.w	r3, [r0, #10]
   283e0:	4a0c      	ldr	r2, [pc, #48]	; (28414 <_is_thread_time_slicing+0x48>)
   283e2:	6812      	ldr	r2, [r2, #0]
   283e4:	4293      	cmp	r3, r2
   283e6:	db0e      	blt.n	28406 <_is_thread_time_slicing+0x3a>
	return list->head != list->tail;
   283e8:	4a0b      	ldr	r2, [pc, #44]	; (28418 <_is_thread_time_slicing+0x4c>)
   283ea:	3314      	adds	r3, #20
   283ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   283f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   283f4:	685b      	ldr	r3, [r3, #4]
   283f6:	1ac0      	subs	r0, r0, r3
   283f8:	bf18      	it	ne
   283fa:	2001      	movne	r0, #1
	}

	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	return sys_dlist_has_multiple_nodes(q);
   283fc:	4770      	bx	lr
		return 0;
   283fe:	2000      	movs	r0, #0
   28400:	4770      	bx	lr
   28402:	2000      	movs	r0, #0
   28404:	4770      	bx	lr
   28406:	2000      	movs	r0, #0
}
   28408:	4770      	bx	lr
   2840a:	bf00      	nop
   2840c:	20002798 	.word	0x20002798
   28410:	00031458 	.word	0x00031458
   28414:	2000279c 	.word	0x2000279c
   28418:	20002678 	.word	0x20002678

0002841c <_update_time_slice_before_swap>:
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   2841c:	2200      	movs	r2, #0
   2841e:	4b01      	ldr	r3, [pc, #4]	; (28424 <_update_time_slice_before_swap+0x8>)
   28420:	601a      	str	r2, [r3, #0]
   28422:	4770      	bx	lr
   28424:	20002a64 	.word	0x20002a64

00028428 <_reschedule_threads>:
{
   28428:	b510      	push	{r4, lr}
   2842a:	4604      	mov	r4, r0
	return _is_preempt(_current) && __must_switch_threads();
   2842c:	4b0a      	ldr	r3, [pc, #40]	; (28458 <_reschedule_threads+0x30>)
   2842e:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   28430:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   28432:	2b7f      	cmp	r3, #127	; 0x7f
   28434:	d805      	bhi.n	28442 <_reschedule_threads+0x1a>
   28436:	f7ff ff83 	bl	28340 <__must_switch_threads>
   2843a:	4603      	mov	r3, r0
   2843c:	b110      	cbz	r0, 28444 <_reschedule_threads+0x1c>
   2843e:	2301      	movs	r3, #1
   28440:	e000      	b.n	28444 <_reschedule_threads+0x1c>
   28442:	2300      	movs	r3, #0
	if (_must_switch_threads()) {
   28444:	b913      	cbnz	r3, 2844c <_reschedule_threads+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28446:	f384 8811 	msr	BASEPRI, r4
   2844a:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   2844c:	f7ff ffe6 	bl	2841c <_update_time_slice_before_swap>
	return __swap(key);
   28450:	4620      	mov	r0, r4
   28452:	f7fe fb29 	bl	26aa8 <__swap>
   28456:	bd10      	pop	{r4, pc}
   28458:	20002678 	.word	0x20002678

0002845c <k_sched_unlock>:
{
   2845c:	b508      	push	{r3, lr}
	__asm__ volatile(
   2845e:	f04f 0320 	mov.w	r3, #32
   28462:	f3ef 8011 	mrs	r0, BASEPRI
   28466:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
   2846a:	4b04      	ldr	r3, [pc, #16]	; (2847c <k_sched_unlock+0x20>)
   2846c:	689a      	ldr	r2, [r3, #8]
   2846e:	7ad3      	ldrb	r3, [r2, #11]
   28470:	3301      	adds	r3, #1
   28472:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
   28474:	f7ff ffd8 	bl	28428 <_reschedule_threads>
   28478:	bd08      	pop	{r3, pc}
   2847a:	bf00      	nop
   2847c:	20002678 	.word	0x20002678

00028480 <_impl_k_yield>:
{
   28480:	b538      	push	{r3, r4, r5, lr}
   28482:	f04f 0320 	mov.w	r3, #32
   28486:	f3ef 8511 	mrs	r5, BASEPRI
   2848a:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
   2848e:	4c08      	ldr	r4, [pc, #32]	; (284b0 <_impl_k_yield+0x30>)
   28490:	68a0      	ldr	r0, [r4, #8]
   28492:	f7ff ff6b 	bl	2836c <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
   28496:	68a2      	ldr	r2, [r4, #8]
	return _ready_q.cache;
   28498:	69a3      	ldr	r3, [r4, #24]
   2849a:	429a      	cmp	r2, r3
   2849c:	d005      	beq.n	284aa <_impl_k_yield+0x2a>
	_update_time_slice_before_swap();
   2849e:	f7ff ffbd 	bl	2841c <_update_time_slice_before_swap>
	return __swap(key);
   284a2:	4628      	mov	r0, r5
   284a4:	f7fe fb00 	bl	26aa8 <__swap>
   284a8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   284aa:	f385 8811 	msr	BASEPRI, r5
   284ae:	bd38      	pop	{r3, r4, r5, pc}
   284b0:	20002678 	.word	0x20002678

000284b4 <_impl_k_sleep>:
{
   284b4:	b570      	push	{r4, r5, r6, lr}
   284b6:	b082      	sub	sp, #8
	if (duration == 0) {
   284b8:	b308      	cbz	r0, 284fe <_impl_k_sleep+0x4a>
   284ba:	4603      	mov	r3, r0
   284bc:	3309      	adds	r3, #9
   284be:	4a4f      	ldr	r2, [pc, #316]	; (285fc <_impl_k_sleep+0x148>)
   284c0:	fba2 2303 	umull	r2, r3, r2, r3
   284c4:	08db      	lsrs	r3, r3, #3
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
   284c6:	3301      	adds	r3, #1
   284c8:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
   284ca:	f04f 0320 	mov.w	r3, #32
   284ce:	f3ef 8511 	mrs	r5, BASEPRI
   284d2:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
   284d6:	4c4a      	ldr	r4, [pc, #296]	; (28600 <_impl_k_sleep+0x14c>)
   284d8:	68a0      	ldr	r0, [r4, #8]
   284da:	f7ff fe2d 	bl	28138 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
   284de:	68a0      	ldr	r0, [r4, #8]
   284e0:	9b01      	ldr	r3, [sp, #4]
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   284e2:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   284e6:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   284e8:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   284ea:	2200      	movs	r2, #0
   284ec:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   284ee:	b14b      	cbz	r3, 28504 <_impl_k_sleep+0x50>
	return list->head == list;
   284f0:	4a43      	ldr	r2, [pc, #268]	; (28600 <_impl_k_sleep+0x14c>)
   284f2:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   284f6:	4293      	cmp	r3, r2
   284f8:	d154      	bne.n	285a4 <_impl_k_sleep+0xf0>
   284fa:	2300      	movs	r3, #0
   284fc:	e052      	b.n	285a4 <_impl_k_sleep+0xf0>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   284fe:	f7ff ffbf 	bl	28480 <_impl_k_yield>
   28502:	e079      	b.n	285f8 <_impl_k_sleep+0x144>
   28504:	f04f 0320 	mov.w	r3, #32
   28508:	f3ef 8611 	mrs	r6, BASEPRI
   2850c:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   28510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28514:	6123      	str	r3, [r4, #16]
	if (thread) {
   28516:	b320      	cbz	r0, 28562 <_impl_k_sleep+0xae>
	if (timeout_obj->wait_q) {
   28518:	68e3      	ldr	r3, [r4, #12]
   2851a:	b15b      	cbz	r3, 28534 <_impl_k_sleep+0x80>
	node->prev->next = node->next;
   2851c:	6843      	ldr	r3, [r0, #4]
   2851e:	6802      	ldr	r2, [r0, #0]
   28520:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28522:	6803      	ldr	r3, [r0, #0]
   28524:	6842      	ldr	r2, [r0, #4]
   28526:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28528:	7a43      	ldrb	r3, [r0, #9]
   2852a:	f023 0302 	bic.w	r3, r3, #2
   2852e:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   28530:	2300      	movs	r3, #0
   28532:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28534:	7a43      	ldrb	r3, [r0, #9]
   28536:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2853a:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2853c:	f013 0f1b 	tst.w	r3, #27
   28540:	d107      	bne.n	28552 <_impl_k_sleep+0x9e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28542:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28548:	d001      	beq.n	2854e <_impl_k_sleep+0x9a>
   2854a:	2300      	movs	r3, #0
   2854c:	e002      	b.n	28554 <_impl_k_sleep+0xa0>
   2854e:	2301      	movs	r3, #1
   28550:	e000      	b.n	28554 <_impl_k_sleep+0xa0>
   28552:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28554:	b913      	cbnz	r3, 2855c <_impl_k_sleep+0xa8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28556:	f386 8811 	msr	BASEPRI, r6
   2855a:	e048      	b.n	285ee <_impl_k_sleep+0x13a>
		_add_thread_to_ready_q(thread);
   2855c:	f7ff fdcc 	bl	280f8 <_add_thread_to_ready_q>
   28560:	e7f9      	b.n	28556 <_impl_k_sleep+0xa2>
   28562:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   28566:	6963      	ldr	r3, [r4, #20]
   28568:	2b00      	cmp	r3, #0
   2856a:	d040      	beq.n	285ee <_impl_k_sleep+0x13a>
			timeout->func(timeout);
   2856c:	4620      	mov	r0, r4
   2856e:	4798      	blx	r3
   28570:	e03d      	b.n	285ee <_impl_k_sleep+0x13a>
			in_q->delta_ticks_from_prev -= *delta;
   28572:	1a8a      	subs	r2, r1, r2
   28574:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   28576:	b133      	cbz	r3, 28586 <_impl_k_sleep+0xd2>
		node->prev = insert_point->prev;
   28578:	685a      	ldr	r2, [r3, #4]
   2857a:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   2857c:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   2857e:	685a      	ldr	r2, [r3, #4]
   28580:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   28582:	605c      	str	r4, [r3, #4]
   28584:	e033      	b.n	285ee <_impl_k_sleep+0x13a>
	node->next = list;
   28586:	4b1e      	ldr	r3, [pc, #120]	; (28600 <_impl_k_sleep+0x14c>)
   28588:	f103 020c 	add.w	r2, r3, #12
   2858c:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   2858e:	691a      	ldr	r2, [r3, #16]
   28590:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28592:	691a      	ldr	r2, [r3, #16]
   28594:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28596:	611c      	str	r4, [r3, #16]
   28598:	e029      	b.n	285ee <_impl_k_sleep+0x13a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2859a:	4619      	mov	r1, r3
   2859c:	e011      	b.n	285c2 <_impl_k_sleep+0x10e>
	return (node == list->tail) ? NULL : node->next;
   2859e:	2100      	movs	r1, #0
   285a0:	e00f      	b.n	285c2 <_impl_k_sleep+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   285a2:	2300      	movs	r3, #0
   285a4:	b1d3      	cbz	r3, 285dc <_impl_k_sleep+0x128>
		if (*delta <= in_q->delta_ticks_from_prev) {
   285a6:	6922      	ldr	r2, [r4, #16]
   285a8:	6919      	ldr	r1, [r3, #16]
   285aa:	428a      	cmp	r2, r1
   285ac:	dde1      	ble.n	28572 <_impl_k_sleep+0xbe>
		*delta -= in_q->delta_ticks_from_prev;
   285ae:	1a52      	subs	r2, r2, r1
   285b0:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   285b2:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   285b4:	2b00      	cmp	r3, #0
   285b6:	d0f0      	beq.n	2859a <_impl_k_sleep+0xe6>
	return (node == list->tail) ? NULL : node->next;
   285b8:	4911      	ldr	r1, [pc, #68]	; (28600 <_impl_k_sleep+0x14c>)
   285ba:	6909      	ldr	r1, [r1, #16]
   285bc:	428b      	cmp	r3, r1
   285be:	d0ee      	beq.n	2859e <_impl_k_sleep+0xea>
   285c0:	6819      	ldr	r1, [r3, #0]
   285c2:	2900      	cmp	r1, #0
   285c4:	d0ed      	beq.n	285a2 <_impl_k_sleep+0xee>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   285c6:	b12a      	cbz	r2, 285d4 <_impl_k_sleep+0x120>
	return (node == list->tail) ? NULL : node->next;
   285c8:	490d      	ldr	r1, [pc, #52]	; (28600 <_impl_k_sleep+0x14c>)
   285ca:	6909      	ldr	r1, [r1, #16]
   285cc:	428a      	cmp	r2, r1
   285ce:	d003      	beq.n	285d8 <_impl_k_sleep+0x124>
   285d0:	681b      	ldr	r3, [r3, #0]
   285d2:	e7e7      	b.n	285a4 <_impl_k_sleep+0xf0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   285d4:	2300      	movs	r3, #0
   285d6:	e7e5      	b.n	285a4 <_impl_k_sleep+0xf0>
	return (node == list->tail) ? NULL : node->next;
   285d8:	2300      	movs	r3, #0
   285da:	e7e3      	b.n	285a4 <_impl_k_sleep+0xf0>
	node->next = list;
   285dc:	4b08      	ldr	r3, [pc, #32]	; (28600 <_impl_k_sleep+0x14c>)
   285de:	f103 020c 	add.w	r2, r3, #12
   285e2:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   285e4:	691a      	ldr	r2, [r3, #16]
   285e6:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   285e8:	691a      	ldr	r2, [r3, #16]
   285ea:	6014      	str	r4, [r2, #0]
	list->tail = node;
   285ec:	611c      	str	r4, [r3, #16]
	_update_time_slice_before_swap();
   285ee:	f7ff ff15 	bl	2841c <_update_time_slice_before_swap>
	return __swap(key);
   285f2:	4628      	mov	r0, r5
   285f4:	f7fe fa58 	bl	26aa8 <__swap>
}
   285f8:	b002      	add	sp, #8
   285fa:	bd70      	pop	{r4, r5, r6, pc}
   285fc:	cccccccd 	.word	0xcccccccd
   28600:	20002678 	.word	0x20002678

00028604 <do_sem_give>:
	sem->count += (sem->count != sem->limit);
}

/* returns 1 if _Swap() will need to be invoked, 0 otherwise */
static int do_sem_give(struct k_sem *sem)
{
   28604:	b510      	push	{r4, lr}
	if (_handling_timeouts) {
   28606:	4b43      	ldr	r3, [pc, #268]	; (28714 <do_sem_give+0x110>)
   28608:	681b      	ldr	r3, [r3, #0]
   2860a:	2b00      	cmp	r3, #0
   2860c:	d136      	bne.n	2867c <do_sem_give+0x78>
	return list->head == list;
   2860e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28610:	42a0      	cmp	r0, r4
   28612:	d044      	beq.n	2869e <do_sem_give+0x9a>
	if (thread) {
   28614:	b14c      	cbz	r4, 2862a <do_sem_give+0x26>
	node->prev->next = node->next;
   28616:	6863      	ldr	r3, [r4, #4]
   28618:	6822      	ldr	r2, [r4, #0]
   2861a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2861c:	6823      	ldr	r3, [r4, #0]
   2861e:	6862      	ldr	r2, [r4, #4]
   28620:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28622:	7a63      	ldrb	r3, [r4, #9]
   28624:	f023 0302 	bic.w	r3, r3, #2
   28628:	7263      	strb	r3, [r4, #9]
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);

	if (!thread) {
   2862a:	2c00      	cmp	r4, #0
   2862c:	d039      	beq.n	286a2 <do_sem_give+0x9e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2862e:	6a22      	ldr	r2, [r4, #32]
   28630:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28634:	d013      	beq.n	2865e <do_sem_give+0x5a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   28636:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   2863a:	4937      	ldr	r1, [pc, #220]	; (28718 <do_sem_give+0x114>)
   2863c:	6909      	ldr	r1, [r1, #16]
   2863e:	428b      	cmp	r3, r1
   28640:	d004      	beq.n	2864c <do_sem_give+0x48>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28642:	b103      	cbz	r3, 28646 <do_sem_give+0x42>
	return (node == list->tail) ? NULL : node->next;
   28644:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   28646:	6919      	ldr	r1, [r3, #16]
   28648:	440a      	add	r2, r1
   2864a:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   2864c:	6963      	ldr	r3, [r4, #20]
   2864e:	6922      	ldr	r2, [r4, #16]
   28650:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28652:	6923      	ldr	r3, [r4, #16]
   28654:	6962      	ldr	r2, [r4, #20]
   28656:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   28658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2865c:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2865e:	7a63      	ldrb	r3, [r4, #9]
   28660:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28664:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28666:	f013 0f1b 	tst.w	r3, #27
   2866a:	d128      	bne.n	286be <do_sem_give+0xba>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2866c:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2866e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28672:	d022      	beq.n	286ba <do_sem_give+0xb6>
   28674:	2300      	movs	r3, #0
   28676:	e023      	b.n	286c0 <do_sem_give+0xbc>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28678:	2400      	movs	r4, #0
   2867a:	e003      	b.n	28684 <do_sem_give+0x80>
   2867c:	4602      	mov	r2, r0
	return list->head == list;
   2867e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28680:	42a0      	cmp	r0, r4
   28682:	d0f9      	beq.n	28678 <do_sem_give+0x74>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   28684:	2c00      	cmp	r4, #0
   28686:	d0c5      	beq.n	28614 <do_sem_give+0x10>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   28688:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   2868a:	f113 0f02 	cmn.w	r3, #2
   2868e:	d1c1      	bne.n	28614 <do_sem_give+0x10>
	return (node == list->tail) ? NULL : node->next;
   28690:	6853      	ldr	r3, [r2, #4]
   28692:	429c      	cmp	r4, r3
   28694:	d001      	beq.n	2869a <do_sem_give+0x96>
   28696:	6824      	ldr	r4, [r4, #0]
   28698:	e7f4      	b.n	28684 <do_sem_give+0x80>
   2869a:	2400      	movs	r4, #0
   2869c:	e7f2      	b.n	28684 <do_sem_give+0x80>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2869e:	2400      	movs	r4, #0
   286a0:	e7b8      	b.n	28614 <do_sem_give+0x10>
	sem->count += (sem->count != sem->limit);
   286a2:	6883      	ldr	r3, [r0, #8]
   286a4:	68c2      	ldr	r2, [r0, #12]
   286a6:	4293      	cmp	r3, r2
   286a8:	bf18      	it	ne
   286aa:	3301      	addne	r3, #1
   286ac:	6083      	str	r3, [r0, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
   286ae:	2102      	movs	r1, #2
   286b0:	3010      	adds	r0, #16
   286b2:	f7ff fbfd 	bl	27eb0 <_handle_obj_poll_events>
   286b6:	4603      	mov	r3, r0
		increment_count_up_to_limit(sem);
		return handle_poll_events(sem);
   286b8:	e01c      	b.n	286f4 <do_sem_give+0xf0>
	return !(_is_thread_prevented_from_running(thread) ||
   286ba:	2301      	movs	r3, #1
   286bc:	e000      	b.n	286c0 <do_sem_give+0xbc>
   286be:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   286c0:	b96b      	cbnz	r3, 286de <do_sem_give+0xda>
   286c2:	2300      	movs	r3, #0
   286c4:	6663      	str	r3, [r4, #100]	; 0x64
   286c6:	f3ef 8305 	mrs	r3, IPSR
   286ca:	2b0d      	cmp	r3, #13
   286cc:	d80b      	bhi.n	286e6 <do_sem_give+0xe2>
   286ce:	b19b      	cbz	r3, 286f8 <do_sem_give+0xf4>
   286d0:	4b12      	ldr	r3, [pc, #72]	; (2871c <do_sem_give+0x118>)
   286d2:	685b      	ldr	r3, [r3, #4]
   286d4:	f413 6f00 	tst.w	r3, #2048	; 0x800
   286d8:	d010      	beq.n	286fc <do_sem_give+0xf8>
   286da:	2300      	movs	r3, #0
   286dc:	e004      	b.n	286e8 <do_sem_give+0xe4>
		_add_thread_to_ready_q(thread);
   286de:	4620      	mov	r0, r4
   286e0:	f7ff fd0a 	bl	280f8 <_add_thread_to_ready_q>
   286e4:	e7ed      	b.n	286c2 <do_sem_give+0xbe>
   286e6:	2301      	movs	r3, #1
	}
	(void)_abort_thread_timeout(thread);
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);

	return !_is_in_isr() && _must_switch_threads();
   286e8:	b98b      	cbnz	r3, 2870e <do_sem_give+0x10a>
	return _is_preempt(_current) && __must_switch_threads();
   286ea:	4a0b      	ldr	r2, [pc, #44]	; (28718 <do_sem_give+0x114>)
   286ec:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   286ee:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   286f0:	2a7f      	cmp	r2, #127	; 0x7f
   286f2:	d905      	bls.n	28700 <do_sem_give+0xfc>
}
   286f4:	4618      	mov	r0, r3
   286f6:	bd10      	pop	{r4, pc}
   286f8:	2300      	movs	r3, #0
   286fa:	e7f5      	b.n	286e8 <do_sem_give+0xe4>
   286fc:	2301      	movs	r3, #1
   286fe:	e7f3      	b.n	286e8 <do_sem_give+0xe4>
   28700:	f7ff fe1e 	bl	28340 <__must_switch_threads>
   28704:	4603      	mov	r3, r0
   28706:	2800      	cmp	r0, #0
   28708:	d0f4      	beq.n	286f4 <do_sem_give+0xf0>
   2870a:	2301      	movs	r3, #1
   2870c:	e7f2      	b.n	286f4 <do_sem_give+0xf0>
	return !_is_in_isr() && _must_switch_threads();
   2870e:	2300      	movs	r3, #0
   28710:	e7f0      	b.n	286f4 <do_sem_give+0xf0>
   28712:	bf00      	nop
   28714:	20002a60 	.word	0x20002a60
   28718:	20002678 	.word	0x20002678
   2871c:	e000ed00 	.word	0xe000ed00

00028720 <_impl_k_sem_init>:
	sem->count = initial_count;
   28720:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   28722:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   28724:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   28726:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   28728:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2872c:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2872e:	6143      	str	r3, [r0, #20]
   28730:	4770      	bx	lr

00028732 <_impl_k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   28732:	b510      	push	{r4, lr}
	__asm__ volatile(
   28734:	f04f 0320 	mov.w	r3, #32
   28738:	f3ef 8411 	mrs	r4, BASEPRI
   2873c:	f383 8811 	msr	BASEPRI, r3
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   28740:	f7ff ff60 	bl	28604 <do_sem_give>
   28744:	b910      	cbnz	r0, 2874c <_impl_k_sem_give+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28746:	f384 8811 	msr	BASEPRI, r4
   2874a:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   2874c:	f7ff fe66 	bl	2841c <_update_time_slice_before_swap>
	return __swap(key);
   28750:	4620      	mov	r0, r4
   28752:	f7fe f9a9 	bl	26aa8 <__swap>
   28756:	bd10      	pop	{r4, pc}

00028758 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   28758:	b510      	push	{r4, lr}
	__asm__ volatile(
   2875a:	f04f 0320 	mov.w	r3, #32
   2875e:	f3ef 8411 	mrs	r4, BASEPRI
   28762:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   28766:	6883      	ldr	r3, [r0, #8]
   28768:	b12b      	cbz	r3, 28776 <_impl_k_sem_take+0x1e>
		sem->count--;
   2876a:	3b01      	subs	r3, #1
   2876c:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2876e:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   28772:	2000      	movs	r0, #0
   28774:	bd10      	pop	{r4, pc}
	}

	if (timeout == K_NO_WAIT) {
   28776:	b139      	cbz	r1, 28788 <_impl_k_sem_take+0x30>
		irq_unlock(key);
		return -EBUSY;
	}

	_pend_current_thread(&sem->wait_q, timeout);
   28778:	f7ff fdd2 	bl	28320 <_pend_current_thread>
	_update_time_slice_before_swap();
   2877c:	f7ff fe4e 	bl	2841c <_update_time_slice_before_swap>
	return __swap(key);
   28780:	4620      	mov	r0, r4
   28782:	f7fe f991 	bl	26aa8 <__swap>

	return _Swap(key);
}
   28786:	bd10      	pop	{r4, pc}
   28788:	f384 8811 	msr	BASEPRI, r4
		return -EBUSY;
   2878c:	f06f 000f 	mvn.w	r0, #15
   28790:	bd10      	pop	{r4, pc}
	...

00028794 <handle_time_slicing>:
 *   in this function and at thread level
 * - _time_slice_duration does not have to be protected, since it can only
 *   change at thread level
 */
static void handle_time_slicing(s32_t ticks)
{
   28794:	b538      	push	{r3, r4, r5, lr}
   28796:	4604      	mov	r4, r0
#ifdef CONFIG_TICKLESS_KERNEL
	next_ts = 0;
#endif
	if (!_is_thread_time_slicing(_current)) {
   28798:	4b0f      	ldr	r3, [pc, #60]	; (287d8 <handle_time_slicing+0x44>)
   2879a:	6898      	ldr	r0, [r3, #8]
   2879c:	f7ff fe16 	bl	283cc <_is_thread_time_slicing>
   287a0:	b150      	cbz	r0, 287b8 <handle_time_slicing+0x24>
	return (u64_t)ticks * _ms_per_tick;
   287a2:	00a2      	lsls	r2, r4, #2
   287a4:	1912      	adds	r2, r2, r4
   287a6:	1892      	adds	r2, r2, r2
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
   287a8:	490c      	ldr	r1, [pc, #48]	; (287dc <handle_time_slicing+0x48>)
   287aa:	680b      	ldr	r3, [r1, #0]
   287ac:	441a      	add	r2, r3
   287ae:	600a      	str	r2, [r1, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   287b0:	4b0b      	ldr	r3, [pc, #44]	; (287e0 <handle_time_slicing+0x4c>)
   287b2:	681b      	ldr	r3, [r3, #0]
   287b4:	429a      	cmp	r2, r3
   287b6:	da00      	bge.n	287ba <handle_time_slicing+0x26>
   287b8:	bd38      	pop	{r3, r4, r5, pc}

		unsigned int key;

		_time_slice_elapsed = 0;
   287ba:	2200      	movs	r2, #0
   287bc:	600a      	str	r2, [r1, #0]
	__asm__ volatile(
   287be:	f04f 0320 	mov.w	r3, #32
   287c2:	f3ef 8411 	mrs	r4, BASEPRI
   287c6:	f383 8811 	msr	BASEPRI, r3

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
   287ca:	4b03      	ldr	r3, [pc, #12]	; (287d8 <handle_time_slicing+0x44>)
   287cc:	6898      	ldr	r0, [r3, #8]
   287ce:	f7ff fdcd 	bl	2836c <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   287d2:	f384 8811 	msr	BASEPRI, r4
   287d6:	e7ef      	b.n	287b8 <handle_time_slicing+0x24>
   287d8:	20002678 	.word	0x20002678
   287dc:	20002a64 	.word	0x20002a64
   287e0:	20002798 	.word	0x20002798

000287e4 <_tick_get_32>:
	return (u32_t)_sys_clock_tick_count;
   287e4:	4b01      	ldr	r3, [pc, #4]	; (287ec <_tick_get_32+0x8>)
   287e6:	e9d3 0100 	ldrd	r0, r1, [r3]
}
   287ea:	4770      	bx	lr
   287ec:	20002a68 	.word	0x20002a68

000287f0 <_impl_k_uptime_get_32>:
{
   287f0:	b538      	push	{r3, r4, r5, lr}
	return __ticks_to_ms(_tick_get_32());
   287f2:	f7ff fff7 	bl	287e4 <_tick_get_32>
   287f6:	0082      	lsls	r2, r0, #2
   287f8:	1810      	adds	r0, r2, r0
   287fa:	1800      	adds	r0, r0, r0
}
   287fc:	bd38      	pop	{r3, r4, r5, pc}
	...

00028800 <_tick_get>:
	__asm__ volatile(
   28800:	f04f 0220 	mov.w	r2, #32
   28804:	f3ef 8311 	mrs	r3, BASEPRI
   28808:	f382 8811 	msr	BASEPRI, r2
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   2880c:	4a02      	ldr	r2, [pc, #8]	; (28818 <_tick_get+0x18>)
   2880e:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28812:	f383 8811 	msr	BASEPRI, r3
}
   28816:	4770      	bx	lr
   28818:	20002a68 	.word	0x20002a68

0002881c <_impl_k_uptime_get>:
{
   2881c:	b510      	push	{r4, lr}
	return __ticks_to_ms(_tick_get());
   2881e:	f7ff ffef 	bl	28800 <_tick_get>
   28822:	008c      	lsls	r4, r1, #2
   28824:	0082      	lsls	r2, r0, #2
   28826:	ea44 7390 	orr.w	r3, r4, r0, lsr #30
   2882a:	1880      	adds	r0, r0, r2
   2882c:	4159      	adcs	r1, r3
   2882e:	1800      	adds	r0, r0, r0
   28830:	4149      	adcs	r1, r1
}
   28832:	bd10      	pop	{r4, pc}

00028834 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   28834:	b570      	push	{r4, r5, r6, lr}
   28836:	b082      	sub	sp, #8
   28838:	4605      	mov	r5, r0
	__asm__ volatile(
   2883a:	f04f 0320 	mov.w	r3, #32
   2883e:	f3ef 8011 	mrs	r0, BASEPRI
   28842:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   28846:	496a      	ldr	r1, [pc, #424]	; (289f0 <_nano_sys_clock_tick_announce+0x1bc>)
   28848:	e9d1 2300 	ldrd	r2, r3, [r1]
   2884c:	1952      	adds	r2, r2, r5
   2884e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   28852:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28856:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   2885a:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
   2885e:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
   28862:	f04f 0320 	mov.w	r3, #32
   28866:	f3ef 8111 	mrs	r1, BASEPRI
   2886a:	f383 8811 	msr	BASEPRI, r3
   2886e:	4608      	mov	r0, r1
	return list->head == list;
   28870:	4b60      	ldr	r3, [pc, #384]	; (289f4 <_nano_sys_clock_tick_announce+0x1c0>)
   28872:	f853 2f0c 	ldr.w	r2, [r3, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28876:	429a      	cmp	r2, r3
   28878:	d02b      	beq.n	288d2 <_nano_sys_clock_tick_announce+0x9e>
	if (!head) {
   2887a:	b362      	cbz	r2, 288d6 <_nano_sys_clock_tick_announce+0xa2>
	head->delta_ticks_from_prev -= ticks;
   2887c:	6913      	ldr	r3, [r2, #16]
   2887e:	1b5b      	subs	r3, r3, r5
   28880:	6113      	str	r3, [r2, #16]
	sys_dnode_t *next = &head->node;
   28882:	4613      	mov	r3, r2
	_handling_timeouts = 1;
   28884:	2101      	movs	r1, #1
   28886:	4a5c      	ldr	r2, [pc, #368]	; (289f8 <_nano_sys_clock_tick_announce+0x1c4>)
   28888:	6011      	str	r1, [r2, #0]
	while (timeout && timeout->delta_ticks_from_prev == 0) {
   2888a:	b33b      	cbz	r3, 288dc <_nano_sys_clock_tick_announce+0xa8>
   2888c:	691a      	ldr	r2, [r3, #16]
   2888e:	bb2a      	cbnz	r2, 288dc <_nano_sys_clock_tick_announce+0xa8>
	node->prev->next = node->next;
   28890:	685a      	ldr	r2, [r3, #4]
   28892:	6819      	ldr	r1, [r3, #0]
   28894:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   28896:	681a      	ldr	r2, [r3, #0]
   28898:	6859      	ldr	r1, [r3, #4]
   2889a:	6051      	str	r1, [r2, #4]
	node->next = list->head;
   2889c:	aa02      	add	r2, sp, #8
   2889e:	f852 1d08 	ldr.w	r1, [r2, #-8]!
   288a2:	6019      	str	r1, [r3, #0]
	node->prev = list;
   288a4:	605a      	str	r2, [r3, #4]
	list->head->prev = node;
   288a6:	9a00      	ldr	r2, [sp, #0]
   288a8:	6053      	str	r3, [r2, #4]
	list->head = node;
   288aa:	9300      	str	r3, [sp, #0]
		timeout->delta_ticks_from_prev = _EXPIRED;
   288ac:	f06f 0201 	mvn.w	r2, #1
   288b0:	611a      	str	r2, [r3, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   288b2:	f380 8811 	msr	BASEPRI, r0
	__asm__ volatile(
   288b6:	f04f 0220 	mov.w	r2, #32
   288ba:	f3ef 8311 	mrs	r3, BASEPRI
   288be:	f382 8811 	msr	BASEPRI, r2
   288c2:	4618      	mov	r0, r3
	return list->head == list;
   288c4:	4a4b      	ldr	r2, [pc, #300]	; (289f4 <_nano_sys_clock_tick_announce+0x1c0>)
   288c6:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   288ca:	4293      	cmp	r3, r2
   288cc:	d1dd      	bne.n	2888a <_nano_sys_clock_tick_announce+0x56>
   288ce:	2300      	movs	r3, #0
   288d0:	e7db      	b.n	2888a <_nano_sys_clock_tick_announce+0x56>
   288d2:	2200      	movs	r2, #0
   288d4:	e7d1      	b.n	2887a <_nano_sys_clock_tick_announce+0x46>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   288d6:	f381 8811 	msr	BASEPRI, r1
   288da:	e084      	b.n	289e6 <_nano_sys_clock_tick_announce+0x1b2>
   288dc:	f380 8811 	msr	BASEPRI, r0
	return list->head == list;
   288e0:	aa02      	add	r2, sp, #8
   288e2:	f852 3d08 	ldr.w	r3, [r2, #-8]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   288e6:	4293      	cmp	r3, r2
   288e8:	d00d      	beq.n	28906 <_nano_sys_clock_tick_announce+0xd2>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   288ea:	b193      	cbz	r3, 28912 <_nano_sys_clock_tick_announce+0xde>
   288ec:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   288ee:	b163      	cbz	r3, 2890a <_nano_sys_clock_tick_announce+0xd6>
	return (node == list->tail) ? NULL : node->next;
   288f0:	9901      	ldr	r1, [sp, #4]
   288f2:	428b      	cmp	r3, r1
   288f4:	d00b      	beq.n	2890e <_nano_sys_clock_tick_announce+0xda>
   288f6:	6819      	ldr	r1, [r3, #0]
   288f8:	b169      	cbz	r1, 28916 <_nano_sys_clock_tick_announce+0xe2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   288fa:	b172      	cbz	r2, 2891a <_nano_sys_clock_tick_announce+0xe6>
	return (node == list->tail) ? NULL : node->next;
   288fc:	9901      	ldr	r1, [sp, #4]
   288fe:	428a      	cmp	r2, r1
   28900:	d00d      	beq.n	2891e <_nano_sys_clock_tick_announce+0xea>
   28902:	681c      	ldr	r4, [r3, #0]
   28904:	e027      	b.n	28956 <_nano_sys_clock_tick_announce+0x122>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28906:	2300      	movs	r3, #0
   28908:	e7ef      	b.n	288ea <_nano_sys_clock_tick_announce+0xb6>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2890a:	4619      	mov	r1, r3
   2890c:	e7f4      	b.n	288f8 <_nano_sys_clock_tick_announce+0xc4>
	return (node == list->tail) ? NULL : node->next;
   2890e:	2100      	movs	r1, #0
   28910:	e7f2      	b.n	288f8 <_nano_sys_clock_tick_announce+0xc4>
   28912:	461c      	mov	r4, r3
   28914:	e01f      	b.n	28956 <_nano_sys_clock_tick_announce+0x122>
   28916:	2400      	movs	r4, #0
   28918:	e01d      	b.n	28956 <_nano_sys_clock_tick_announce+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2891a:	2400      	movs	r4, #0
   2891c:	e01b      	b.n	28956 <_nano_sys_clock_tick_announce+0x122>
	return (node == list->tail) ? NULL : node->next;
   2891e:	2400      	movs	r4, #0
   28920:	e019      	b.n	28956 <_nano_sys_clock_tick_announce+0x122>
	return !(_is_thread_prevented_from_running(thread) ||
   28922:	2301      	movs	r3, #1
   28924:	e000      	b.n	28928 <_nano_sys_clock_tick_announce+0xf4>
   28926:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28928:	2b00      	cmp	r3, #0
   2892a:	d142      	bne.n	289b2 <_nano_sys_clock_tick_announce+0x17e>
   2892c:	f386 8811 	msr	BASEPRI, r6
   28930:	2c00      	cmp	r4, #0
   28932:	d04d      	beq.n	289d0 <_nano_sys_clock_tick_announce+0x19c>
   28934:	4623      	mov	r3, r4
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28936:	2c00      	cmp	r4, #0
   28938:	d046      	beq.n	289c8 <_nano_sys_clock_tick_announce+0x194>
	return (node == list->tail) ? NULL : node->next;
   2893a:	9a01      	ldr	r2, [sp, #4]
   2893c:	4294      	cmp	r4, r2
   2893e:	d045      	beq.n	289cc <_nano_sys_clock_tick_announce+0x198>
   28940:	6822      	ldr	r2, [r4, #0]
   28942:	2a00      	cmp	r2, #0
   28944:	d046      	beq.n	289d4 <_nano_sys_clock_tick_announce+0x1a0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28946:	2b00      	cmp	r3, #0
   28948:	d046      	beq.n	289d8 <_nano_sys_clock_tick_announce+0x1a4>
	return (node == list->tail) ? NULL : node->next;
   2894a:	9a01      	ldr	r2, [sp, #4]
   2894c:	4293      	cmp	r3, r2
   2894e:	d045      	beq.n	289dc <_nano_sys_clock_tick_announce+0x1a8>
   28950:	6822      	ldr	r2, [r4, #0]
   28952:	4623      	mov	r3, r4
   28954:	4614      	mov	r4, r2
   28956:	2b00      	cmp	r3, #0
   28958:	d042      	beq.n	289e0 <_nano_sys_clock_tick_announce+0x1ac>
	node->prev->next = node->next;
   2895a:	685a      	ldr	r2, [r3, #4]
   2895c:	6819      	ldr	r1, [r3, #0]
   2895e:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   28960:	681a      	ldr	r2, [r3, #0]
   28962:	6859      	ldr	r1, [r3, #4]
   28964:	6051      	str	r1, [r2, #4]
	struct k_thread *thread = timeout->thread;
   28966:	6898      	ldr	r0, [r3, #8]
	__asm__ volatile(
   28968:	f04f 0220 	mov.w	r2, #32
   2896c:	f3ef 8611 	mrs	r6, BASEPRI
   28970:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   28974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28978:	611a      	str	r2, [r3, #16]
	if (thread) {
   2897a:	b1e8      	cbz	r0, 289b8 <_nano_sys_clock_tick_announce+0x184>
	if (timeout_obj->wait_q) {
   2897c:	68db      	ldr	r3, [r3, #12]
   2897e:	b15b      	cbz	r3, 28998 <_nano_sys_clock_tick_announce+0x164>
	node->prev->next = node->next;
   28980:	6843      	ldr	r3, [r0, #4]
   28982:	6802      	ldr	r2, [r0, #0]
   28984:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28986:	6803      	ldr	r3, [r0, #0]
   28988:	6842      	ldr	r2, [r0, #4]
   2898a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2898c:	7a43      	ldrb	r3, [r0, #9]
   2898e:	f023 0302 	bic.w	r3, r3, #2
   28992:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   28994:	2300      	movs	r3, #0
   28996:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28998:	7a43      	ldrb	r3, [r0, #9]
   2899a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2899e:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   289a0:	f013 0f1b 	tst.w	r3, #27
   289a4:	d1bf      	bne.n	28926 <_nano_sys_clock_tick_announce+0xf2>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   289a6:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   289a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   289ac:	d0b9      	beq.n	28922 <_nano_sys_clock_tick_announce+0xee>
   289ae:	2300      	movs	r3, #0
   289b0:	e7ba      	b.n	28928 <_nano_sys_clock_tick_announce+0xf4>
		_add_thread_to_ready_q(thread);
   289b2:	f7ff fba1 	bl	280f8 <_add_thread_to_ready_q>
   289b6:	e7b9      	b.n	2892c <_nano_sys_clock_tick_announce+0xf8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   289b8:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   289bc:	695a      	ldr	r2, [r3, #20]
   289be:	2a00      	cmp	r2, #0
   289c0:	d0b6      	beq.n	28930 <_nano_sys_clock_tick_announce+0xfc>
			timeout->func(timeout);
   289c2:	4618      	mov	r0, r3
   289c4:	4790      	blx	r2
   289c6:	e7b3      	b.n	28930 <_nano_sys_clock_tick_announce+0xfc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   289c8:	4622      	mov	r2, r4
   289ca:	e7ba      	b.n	28942 <_nano_sys_clock_tick_announce+0x10e>
	return (node == list->tail) ? NULL : node->next;
   289cc:	2200      	movs	r2, #0
   289ce:	e7b8      	b.n	28942 <_nano_sys_clock_tick_announce+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   289d0:	4622      	mov	r2, r4
   289d2:	e7be      	b.n	28952 <_nano_sys_clock_tick_announce+0x11e>
   289d4:	2200      	movs	r2, #0
   289d6:	e7bc      	b.n	28952 <_nano_sys_clock_tick_announce+0x11e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   289d8:	2200      	movs	r2, #0
   289da:	e7ba      	b.n	28952 <_nano_sys_clock_tick_announce+0x11e>
	return (node == list->tail) ? NULL : node->next;
   289dc:	2200      	movs	r2, #0
   289de:	e7b8      	b.n	28952 <_nano_sys_clock_tick_announce+0x11e>
	_handling_timeouts = 0;
   289e0:	2200      	movs	r2, #0
   289e2:	4b05      	ldr	r3, [pc, #20]	; (289f8 <_nano_sys_clock_tick_announce+0x1c4>)
   289e4:	601a      	str	r2, [r3, #0]
	irq_unlock(key);
#endif
	handle_timeouts(ticks);

	/* time slicing is basically handled like just yet another timeout */
	handle_time_slicing(ticks);
   289e6:	4628      	mov	r0, r5
   289e8:	f7ff fed4 	bl	28794 <handle_time_slicing>
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   289ec:	b002      	add	sp, #8
   289ee:	bd70      	pop	{r4, r5, r6, pc}
   289f0:	20002a68 	.word	0x20002a68
   289f4:	20002678 	.word	0x20002678
   289f8:	20002a60 	.word	0x20002a60

000289fc <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   289fc:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   289fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
   28a06:	4903      	ldr	r1, [pc, #12]	; (28a14 <k_sys_work_q_init+0x18>)
   28a08:	4803      	ldr	r0, [pc, #12]	; (28a18 <k_sys_work_q_init+0x1c>)
   28a0a:	f000 fc49 	bl	292a0 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   28a0e:	2000      	movs	r0, #0
   28a10:	bd08      	pop	{r3, pc}
   28a12:	bf00      	nop
   28a14:	2000b360 	.word	0x2000b360
   28a18:	20002a70 	.word	0x20002a70

00028a1c <k_is_in_isr>:
   28a1c:	f3ef 8305 	mrs	r3, IPSR
   28a20:	2b0d      	cmp	r3, #13
   28a22:	d807      	bhi.n	28a34 <k_is_in_isr+0x18>
   28a24:	b143      	cbz	r3, 28a38 <k_is_in_isr+0x1c>
   28a26:	4b06      	ldr	r3, [pc, #24]	; (28a40 <k_is_in_isr+0x24>)
   28a28:	685b      	ldr	r3, [r3, #4]
   28a2a:	f413 6f00 	tst.w	r3, #2048	; 0x800
   28a2e:	d005      	beq.n	28a3c <k_is_in_isr+0x20>
   28a30:	2000      	movs	r0, #0
   28a32:	4770      	bx	lr
   28a34:	2001      	movs	r0, #1
   28a36:	4770      	bx	lr
   28a38:	2000      	movs	r0, #0
   28a3a:	4770      	bx	lr
   28a3c:	2001      	movs	r0, #1


int k_is_in_isr(void)
{
	return _is_in_isr();
}
   28a3e:	4770      	bx	lr
   28a40:	e000ed00 	.word	0xe000ed00

00028a44 <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
   28a44:	4b02      	ldr	r3, [pc, #8]	; (28a50 <_is_thread_essential+0xc>)
   28a46:	689b      	ldr	r3, [r3, #8]
   28a48:	7a18      	ldrb	r0, [r3, #8]
}
   28a4a:	f000 0001 	and.w	r0, r0, #1
   28a4e:	4770      	bx	lr
   28a50:	20002678 	.word	0x20002678

00028a54 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   28a54:	b508      	push	{r3, lr}
   28a56:	4604      	mov	r4, r0
   28a58:	4608      	mov	r0, r1
   28a5a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   28a5c:	461a      	mov	r2, r3
   28a5e:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   28a60:	f7ff fcae 	bl	283c0 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   28a64:	f7fe facc 	bl	27000 <_impl_k_thread_abort>

00028a68 <_impl_k_thread_start>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
void _impl_k_thread_start(struct k_thread *thread)
{
   28a68:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   28a6a:	f04f 0320 	mov.w	r3, #32
   28a6e:	f3ef 8411 	mrs	r4, BASEPRI
   28a72:	f383 8811 	msr	BASEPRI, r3
	return !(thread->base.thread_state & _THREAD_PRESTART);
   28a76:	7a43      	ldrb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	if (_has_thread_started(thread)) {
   28a78:	f013 0f04 	tst.w	r3, #4
   28a7c:	d00b      	beq.n	28a96 <_impl_k_thread_start+0x2e>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28a7e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28a82:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28a84:	f013 0f1b 	tst.w	r3, #27
   28a88:	d10a      	bne.n	28aa0 <_impl_k_thread_start+0x38>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28a8a:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28a90:	d004      	beq.n	28a9c <_impl_k_thread_start+0x34>
   28a92:	2500      	movs	r5, #0
   28a94:	e005      	b.n	28aa2 <_impl_k_thread_start+0x3a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28a96:	f384 8811 	msr	BASEPRI, r4
   28a9a:	bd38      	pop	{r3, r4, r5, pc}
   28a9c:	2501      	movs	r5, #1
   28a9e:	e000      	b.n	28aa2 <_impl_k_thread_start+0x3a>
   28aa0:	2500      	movs	r5, #0
		return;
	}

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
   28aa2:	b915      	cbnz	r5, 28aaa <_impl_k_thread_start+0x42>
   28aa4:	f384 8811 	msr	BASEPRI, r4
   28aa8:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   28aaa:	f7ff fb25 	bl	280f8 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
   28aae:	4b0a      	ldr	r3, [pc, #40]	; (28ad8 <_impl_k_thread_start+0x70>)
   28ab0:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   28ab2:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   28ab4:	2b7f      	cmp	r3, #127	; 0x7f
   28ab6:	d908      	bls.n	28aca <_impl_k_thread_start+0x62>
   28ab8:	2300      	movs	r3, #0
		if (_must_switch_threads()) {
   28aba:	2b00      	cmp	r3, #0
   28abc:	d0f2      	beq.n	28aa4 <_impl_k_thread_start+0x3c>
	_update_time_slice_before_swap();
   28abe:	f7ff fcad 	bl	2841c <_update_time_slice_before_swap>
	return __swap(key);
   28ac2:	4620      	mov	r0, r4
   28ac4:	f7fd fff0 	bl	26aa8 <__swap>
   28ac8:	bd38      	pop	{r3, r4, r5, pc}
   28aca:	f7ff fc39 	bl	28340 <__must_switch_threads>
   28ace:	4603      	mov	r3, r0
   28ad0:	2800      	cmp	r0, #0
   28ad2:	d0f2      	beq.n	28aba <_impl_k_thread_start+0x52>
   28ad4:	462b      	mov	r3, r5
   28ad6:	e7f0      	b.n	28aba <_impl_k_thread_start+0x52>
   28ad8:	20002678 	.word	0x20002678

00028adc <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
   28adc:	b570      	push	{r4, r5, r6, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   28ade:	b1d1      	cbz	r1, 28b16 <schedule_new_thread+0x3a>
   28ae0:	460b      	mov	r3, r1
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   28ae2:	3309      	adds	r3, #9
   28ae4:	4a47      	ldr	r2, [pc, #284]	; (28c04 <schedule_new_thread+0x128>)
   28ae6:	fba2 2303 	umull	r2, r3, r2, r3
   28aea:	08db      	lsrs	r3, r3, #3
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   28aec:	3301      	adds	r3, #1
	__asm__ volatile(
   28aee:	f04f 0220 	mov.w	r2, #32
   28af2:	f3ef 8511 	mrs	r5, BASEPRI
   28af6:	f382 8811 	msr	BASEPRI, r2
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   28afa:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   28afe:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   28b00:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   28b02:	2200      	movs	r2, #0
   28b04:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   28b06:	b14b      	cbz	r3, 28b1c <schedule_new_thread+0x40>
	return list->head == list;
   28b08:	4a3f      	ldr	r2, [pc, #252]	; (28c08 <schedule_new_thread+0x12c>)
   28b0a:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28b0e:	4293      	cmp	r3, r2
   28b10:	d152      	bne.n	28bb8 <schedule_new_thread+0xdc>
   28b12:	2300      	movs	r3, #0
   28b14:	e050      	b.n	28bb8 <schedule_new_thread+0xdc>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   28b16:	f7ff ffa7 	bl	28a68 <_impl_k_thread_start>
   28b1a:	bd70      	pop	{r4, r5, r6, pc}
   28b1c:	f04f 0320 	mov.w	r3, #32
   28b20:	f3ef 8611 	mrs	r6, BASEPRI
   28b24:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   28b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28b2c:	6123      	str	r3, [r4, #16]
	if (thread) {
   28b2e:	b320      	cbz	r0, 28b7a <schedule_new_thread+0x9e>
	if (timeout_obj->wait_q) {
   28b30:	68e3      	ldr	r3, [r4, #12]
   28b32:	b15b      	cbz	r3, 28b4c <schedule_new_thread+0x70>
	node->prev->next = node->next;
   28b34:	6843      	ldr	r3, [r0, #4]
   28b36:	6802      	ldr	r2, [r0, #0]
   28b38:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28b3a:	6803      	ldr	r3, [r0, #0]
   28b3c:	6842      	ldr	r2, [r0, #4]
   28b3e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28b40:	7a43      	ldrb	r3, [r0, #9]
   28b42:	f023 0302 	bic.w	r3, r3, #2
   28b46:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   28b48:	2300      	movs	r3, #0
   28b4a:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28b4c:	7a43      	ldrb	r3, [r0, #9]
   28b4e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28b52:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28b54:	f013 0f1b 	tst.w	r3, #27
   28b58:	d107      	bne.n	28b6a <schedule_new_thread+0x8e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28b5a:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28b60:	d001      	beq.n	28b66 <schedule_new_thread+0x8a>
   28b62:	2300      	movs	r3, #0
   28b64:	e002      	b.n	28b6c <schedule_new_thread+0x90>
   28b66:	2301      	movs	r3, #1
   28b68:	e000      	b.n	28b6c <schedule_new_thread+0x90>
   28b6a:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28b6c:	b913      	cbnz	r3, 28b74 <schedule_new_thread+0x98>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28b6e:	f386 8811 	msr	BASEPRI, r6
   28b72:	e044      	b.n	28bfe <schedule_new_thread+0x122>
		_add_thread_to_ready_q(thread);
   28b74:	f7ff fac0 	bl	280f8 <_add_thread_to_ready_q>
   28b78:	e7f9      	b.n	28b6e <schedule_new_thread+0x92>
   28b7a:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   28b7e:	6963      	ldr	r3, [r4, #20]
   28b80:	2b00      	cmp	r3, #0
   28b82:	d03c      	beq.n	28bfe <schedule_new_thread+0x122>
			timeout->func(timeout);
   28b84:	4620      	mov	r0, r4
   28b86:	4798      	blx	r3
   28b88:	e039      	b.n	28bfe <schedule_new_thread+0x122>
			in_q->delta_ticks_from_prev -= *delta;
   28b8a:	1a8a      	subs	r2, r1, r2
   28b8c:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   28b8e:	b133      	cbz	r3, 28b9e <schedule_new_thread+0xc2>
		node->prev = insert_point->prev;
   28b90:	685a      	ldr	r2, [r3, #4]
   28b92:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   28b94:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   28b96:	685a      	ldr	r2, [r3, #4]
   28b98:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   28b9a:	605c      	str	r4, [r3, #4]
   28b9c:	e02f      	b.n	28bfe <schedule_new_thread+0x122>
	node->next = list;
   28b9e:	4b1b      	ldr	r3, [pc, #108]	; (28c0c <schedule_new_thread+0x130>)
   28ba0:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   28ba2:	685a      	ldr	r2, [r3, #4]
   28ba4:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28ba6:	685a      	ldr	r2, [r3, #4]
   28ba8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28baa:	605c      	str	r4, [r3, #4]
   28bac:	e027      	b.n	28bfe <schedule_new_thread+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28bae:	4619      	mov	r1, r3
   28bb0:	e011      	b.n	28bd6 <schedule_new_thread+0xfa>
	return (node == list->tail) ? NULL : node->next;
   28bb2:	2100      	movs	r1, #0
   28bb4:	e00f      	b.n	28bd6 <schedule_new_thread+0xfa>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28bb6:	2300      	movs	r3, #0
   28bb8:	b1d3      	cbz	r3, 28bf0 <schedule_new_thread+0x114>
		if (*delta <= in_q->delta_ticks_from_prev) {
   28bba:	6922      	ldr	r2, [r4, #16]
   28bbc:	6919      	ldr	r1, [r3, #16]
   28bbe:	428a      	cmp	r2, r1
   28bc0:	dde3      	ble.n	28b8a <schedule_new_thread+0xae>
		*delta -= in_q->delta_ticks_from_prev;
   28bc2:	1a52      	subs	r2, r2, r1
   28bc4:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28bc6:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28bc8:	2b00      	cmp	r3, #0
   28bca:	d0f0      	beq.n	28bae <schedule_new_thread+0xd2>
	return (node == list->tail) ? NULL : node->next;
   28bcc:	490e      	ldr	r1, [pc, #56]	; (28c08 <schedule_new_thread+0x12c>)
   28bce:	6909      	ldr	r1, [r1, #16]
   28bd0:	428b      	cmp	r3, r1
   28bd2:	d0ee      	beq.n	28bb2 <schedule_new_thread+0xd6>
   28bd4:	6819      	ldr	r1, [r3, #0]
   28bd6:	2900      	cmp	r1, #0
   28bd8:	d0ed      	beq.n	28bb6 <schedule_new_thread+0xda>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28bda:	b12a      	cbz	r2, 28be8 <schedule_new_thread+0x10c>
	return (node == list->tail) ? NULL : node->next;
   28bdc:	490a      	ldr	r1, [pc, #40]	; (28c08 <schedule_new_thread+0x12c>)
   28bde:	6909      	ldr	r1, [r1, #16]
   28be0:	428a      	cmp	r2, r1
   28be2:	d003      	beq.n	28bec <schedule_new_thread+0x110>
   28be4:	681b      	ldr	r3, [r3, #0]
   28be6:	e7e7      	b.n	28bb8 <schedule_new_thread+0xdc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28be8:	2300      	movs	r3, #0
   28bea:	e7e5      	b.n	28bb8 <schedule_new_thread+0xdc>
	return (node == list->tail) ? NULL : node->next;
   28bec:	2300      	movs	r3, #0
   28bee:	e7e3      	b.n	28bb8 <schedule_new_thread+0xdc>
	node->next = list;
   28bf0:	4b06      	ldr	r3, [pc, #24]	; (28c0c <schedule_new_thread+0x130>)
   28bf2:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   28bf4:	685a      	ldr	r2, [r3, #4]
   28bf6:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28bf8:	685a      	ldr	r2, [r3, #4]
   28bfa:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28bfc:	605c      	str	r4, [r3, #4]
   28bfe:	f385 8811 	msr	BASEPRI, r5
   28c02:	bd70      	pop	{r4, r5, r6, pc}
   28c04:	cccccccd 	.word	0xcccccccd
   28c08:	20002678 	.word	0x20002678
   28c0c:	20002684 	.word	0x20002684

00028c10 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   28c10:	b510      	push	{r4, lr}
   28c12:	b086      	sub	sp, #24
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   28c14:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   28c16:	9404      	str	r4, [sp, #16]
   28c18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   28c1a:	9403      	str	r4, [sp, #12]
   28c1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   28c1e:	9402      	str	r4, [sp, #8]
   28c20:	9c09      	ldr	r4, [sp, #36]	; 0x24
   28c22:	9401      	str	r4, [sp, #4]
   28c24:	9c08      	ldr	r4, [sp, #32]
   28c26:	9400      	str	r4, [sp, #0]
   28c28:	f7fe f940 	bl	26eac <_new_thread>

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
   28c2c:	b006      	add	sp, #24
   28c2e:	bd10      	pop	{r4, pc}

00028c30 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   28c30:	b570      	push	{r4, r5, r6, lr}
   28c32:	b086      	sub	sp, #24
   28c34:	4604      	mov	r4, r0
   28c36:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   28c38:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   28c3a:	9604      	str	r6, [sp, #16]
   28c3c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   28c3e:	9603      	str	r6, [sp, #12]
   28c40:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   28c42:	9602      	str	r6, [sp, #8]
   28c44:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   28c46:	9601      	str	r6, [sp, #4]
   28c48:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   28c4a:	9600      	str	r6, [sp, #0]
   28c4c:	f7ff ffe0 	bl	28c10 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   28c50:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   28c54:	d003      	beq.n	28c5e <_impl_k_thread_create+0x2e>
		schedule_new_thread(new_thread, delay);
   28c56:	4629      	mov	r1, r5
   28c58:	4620      	mov	r0, r4
   28c5a:	f7ff ff3f 	bl	28adc <schedule_new_thread>
	}
	return new_thread;
}
   28c5e:	4620      	mov	r0, r4
   28c60:	b006      	add	sp, #24
   28c62:	bd70      	pop	{r4, r5, r6, pc}

00028c64 <_k_thread_single_abort>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
   28c64:	b510      	push	{r4, lr}
   28c66:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   28c68:	6d03      	ldr	r3, [r0, #80]	; 0x50
   28c6a:	b103      	cbz	r3, 28c6e <_k_thread_single_abort+0xa>
		thread->fn_abort();
   28c6c:	4798      	blx	r3
	u8_t state = thread->base.thread_state;
   28c6e:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28c70:	f013 0f1f 	tst.w	r3, #31
   28c74:	d107      	bne.n	28c86 <_k_thread_single_abort+0x22>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28c76:	6a22      	ldr	r2, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28c78:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28c7c:	d001      	beq.n	28c82 <_k_thread_single_abort+0x1e>
   28c7e:	2200      	movs	r2, #0
   28c80:	e002      	b.n	28c88 <_k_thread_single_abort+0x24>
   28c82:	2201      	movs	r2, #1
   28c84:	e000      	b.n	28c88 <_k_thread_single_abort+0x24>
   28c86:	2200      	movs	r2, #0
	}

	if (_is_thread_ready(thread)) {
   28c88:	bb4a      	cbnz	r2, 28cde <_k_thread_single_abort+0x7a>
		_remove_thread_from_ready_q(thread);
	} else {
		if (_is_thread_pending(thread)) {
   28c8a:	f013 0f02 	tst.w	r3, #2
   28c8e:	d009      	beq.n	28ca4 <_k_thread_single_abort+0x40>
	node->prev->next = node->next;
   28c90:	6863      	ldr	r3, [r4, #4]
   28c92:	6822      	ldr	r2, [r4, #0]
   28c94:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28c96:	6823      	ldr	r3, [r4, #0]
   28c98:	6862      	ldr	r2, [r4, #4]
   28c9a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28c9c:	7a63      	ldrb	r3, [r4, #9]
   28c9e:	f023 0302 	bic.w	r3, r3, #2
   28ca2:	7263      	strb	r3, [r4, #9]
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28ca4:	6a21      	ldr	r1, [r4, #32]
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
   28ca6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   28caa:	d013      	beq.n	28cd4 <_k_thread_single_abort+0x70>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   28cac:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   28cb0:	4a0d      	ldr	r2, [pc, #52]	; (28ce8 <_k_thread_single_abort+0x84>)
   28cb2:	6912      	ldr	r2, [r2, #16]
   28cb4:	4293      	cmp	r3, r2
   28cb6:	d004      	beq.n	28cc2 <_k_thread_single_abort+0x5e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28cb8:	b103      	cbz	r3, 28cbc <_k_thread_single_abort+0x58>
	return (node == list->tail) ? NULL : node->next;
   28cba:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   28cbc:	691a      	ldr	r2, [r3, #16]
   28cbe:	440a      	add	r2, r1
   28cc0:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   28cc2:	6963      	ldr	r3, [r4, #20]
   28cc4:	6922      	ldr	r2, [r4, #16]
   28cc6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28cc8:	6923      	ldr	r3, [r4, #16]
   28cca:	6962      	ldr	r2, [r4, #20]
   28ccc:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   28cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28cd2:	6223      	str	r3, [r4, #32]
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   28cd4:	7a63      	ldrb	r3, [r4, #9]
   28cd6:	f043 0308 	orr.w	r3, r3, #8
   28cda:	7263      	strb	r3, [r4, #9]
   28cdc:	bd10      	pop	{r4, pc}
		_remove_thread_from_ready_q(thread);
   28cde:	4620      	mov	r0, r4
   28ce0:	f7ff fa2a 	bl	28138 <_remove_thread_from_ready_q>
   28ce4:	e7f6      	b.n	28cd4 <_k_thread_single_abort+0x70>
   28ce6:	bf00      	nop
   28ce8:	20002678 	.word	0x20002678

00028cec <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   28cec:	b530      	push	{r4, r5, lr}
   28cee:	b087      	sub	sp, #28
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   28cf0:	4c1b      	ldr	r4, [pc, #108]	; (28d60 <_init_static_threads+0x74>)
   28cf2:	e012      	b.n	28d1a <_init_static_threads+0x2e>
		_setup_new_thread(
   28cf4:	6a23      	ldr	r3, [r4, #32]
   28cf6:	9304      	str	r3, [sp, #16]
   28cf8:	69e3      	ldr	r3, [r4, #28]
   28cfa:	9303      	str	r3, [sp, #12]
   28cfc:	69a3      	ldr	r3, [r4, #24]
   28cfe:	9302      	str	r3, [sp, #8]
   28d00:	6963      	ldr	r3, [r4, #20]
   28d02:	9301      	str	r3, [sp, #4]
   28d04:	6923      	ldr	r3, [r4, #16]
   28d06:	9300      	str	r3, [sp, #0]
   28d08:	68e3      	ldr	r3, [r4, #12]
   28d0a:	68a2      	ldr	r2, [r4, #8]
   28d0c:	6861      	ldr	r1, [r4, #4]
   28d0e:	6820      	ldr	r0, [r4, #0]
   28d10:	f7ff ff7e 	bl	28c10 <_setup_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
   28d14:	6823      	ldr	r3, [r4, #0]
   28d16:	64dc      	str	r4, [r3, #76]	; 0x4c
	_FOREACH_STATIC_THREAD(thread_data) {
   28d18:	3430      	adds	r4, #48	; 0x30
   28d1a:	4b12      	ldr	r3, [pc, #72]	; (28d64 <_init_static_threads+0x78>)
   28d1c:	429c      	cmp	r4, r3
   28d1e:	d3e9      	bcc.n	28cf4 <_init_static_threads+0x8>
	--_current->base.sched_locked;
   28d20:	4b11      	ldr	r3, [pc, #68]	; (28d68 <_init_static_threads+0x7c>)
   28d22:	689a      	ldr	r2, [r3, #8]
   28d24:	7ad3      	ldrb	r3, [r2, #11]
   28d26:	3b01      	subs	r3, #1
   28d28:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   28d2a:	f04f 0320 	mov.w	r3, #32
   28d2e:	f3ef 8511 	mrs	r5, BASEPRI
   28d32:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   28d36:	4c0a      	ldr	r4, [pc, #40]	; (28d60 <_init_static_threads+0x74>)
   28d38:	e000      	b.n	28d3c <_init_static_threads+0x50>
   28d3a:	3430      	adds	r4, #48	; 0x30
   28d3c:	4b09      	ldr	r3, [pc, #36]	; (28d64 <_init_static_threads+0x78>)
   28d3e:	429c      	cmp	r4, r3
   28d40:	d207      	bcs.n	28d52 <_init_static_threads+0x66>
		if (thread_data->init_delay != K_FOREVER) {
   28d42:	6a61      	ldr	r1, [r4, #36]	; 0x24
   28d44:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   28d48:	d0f7      	beq.n	28d3a <_init_static_threads+0x4e>
			schedule_new_thread(thread_data->init_thread,
   28d4a:	6820      	ldr	r0, [r4, #0]
   28d4c:	f7ff fec6 	bl	28adc <schedule_new_thread>
   28d50:	e7f3      	b.n	28d3a <_init_static_threads+0x4e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28d52:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
   28d56:	f7ff fb81 	bl	2845c <k_sched_unlock>
}
   28d5a:	b007      	add	sp, #28
   28d5c:	bd30      	pop	{r4, r5, pc}
   28d5e:	bf00      	nop
   28d60:	2000cef4 	.word	0x2000cef4
   28d64:	2000cef4 	.word	0x2000cef4
   28d68:	20002678 	.word	0x20002678

00028d6c <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   28d6c:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   28d6e:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;
   28d70:	7281      	strb	r1, [r0, #10]

	thread_base->sched_locked = 0;
   28d72:	2300      	movs	r3, #0
   28d74:	72c3      	strb	r3, [r0, #11]
	t->delta_ticks_from_prev = _INACTIVE;
   28d76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28d7a:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
   28d7c:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
   28d7e:	6183      	str	r3, [r0, #24]
	t->func = func;
   28d80:	6243      	str	r3, [r0, #36]	; 0x24
   28d82:	4770      	bx	lr

00028d84 <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
   28d84:	b570      	push	{r4, r5, r6, lr}
   28d86:	4604      	mov	r4, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   28d88:	6a83      	ldr	r3, [r0, #40]	; 0x28
   28d8a:	2b00      	cmp	r3, #0
   28d8c:	f340 8088 	ble.w	28ea0 <_timer_expiration_handler+0x11c>
	__asm__ volatile(
   28d90:	f04f 0320 	mov.w	r3, #32
   28d94:	f3ef 8511 	mrs	r5, BASEPRI
   28d98:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
   28d9c:	f100 0218 	add.w	r2, r0, #24
   28da0:	6a83      	ldr	r3, [r0, #40]	; 0x28
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   28da2:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   28da4:	2100      	movs	r1, #0
   28da6:	6081      	str	r1, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   28da8:	60c2      	str	r2, [r0, #12]
	if (!timeout_in_ticks) {
   28daa:	b133      	cbz	r3, 28dba <_timer_expiration_handler+0x36>
	return list->head == list;
   28dac:	4a59      	ldr	r2, [pc, #356]	; (28f14 <_timer_expiration_handler+0x190>)
   28dae:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28db2:	4293      	cmp	r3, r2
   28db4:	d14f      	bne.n	28e56 <_timer_expiration_handler+0xd2>
   28db6:	2300      	movs	r3, #0
   28db8:	e04d      	b.n	28e56 <_timer_expiration_handler+0xd2>
	struct k_thread *thread = timeout->thread;
   28dba:	4608      	mov	r0, r1
   28dbc:	f04f 0320 	mov.w	r3, #32
   28dc0:	f3ef 8611 	mrs	r6, BASEPRI
   28dc4:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   28dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28dcc:	6123      	str	r3, [r4, #16]
	if (thread) {
   28dce:	b319      	cbz	r1, 28e18 <_timer_expiration_handler+0x94>
	if (timeout_obj->wait_q) {
   28dd0:	68e3      	ldr	r3, [r4, #12]
   28dd2:	b153      	cbz	r3, 28dea <_timer_expiration_handler+0x66>
	node->prev->next = node->next;
   28dd4:	684b      	ldr	r3, [r1, #4]
   28dd6:	680a      	ldr	r2, [r1, #0]
   28dd8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28dda:	680b      	ldr	r3, [r1, #0]
   28ddc:	684a      	ldr	r2, [r1, #4]
   28dde:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28de0:	7a4b      	ldrb	r3, [r1, #9]
   28de2:	f023 0302 	bic.w	r3, r3, #2
   28de6:	724b      	strb	r3, [r1, #9]
		thread->base.timeout.wait_q = NULL;
   28de8:	61c1      	str	r1, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28dea:	7a43      	ldrb	r3, [r0, #9]
   28dec:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28df0:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28df2:	f013 0f1b 	tst.w	r3, #27
   28df6:	d107      	bne.n	28e08 <_timer_expiration_handler+0x84>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28df8:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28dfe:	d001      	beq.n	28e04 <_timer_expiration_handler+0x80>
   28e00:	2300      	movs	r3, #0
   28e02:	e002      	b.n	28e0a <_timer_expiration_handler+0x86>
   28e04:	2301      	movs	r3, #1
   28e06:	e000      	b.n	28e0a <_timer_expiration_handler+0x86>
   28e08:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28e0a:	b913      	cbnz	r3, 28e12 <_timer_expiration_handler+0x8e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28e0c:	f386 8811 	msr	BASEPRI, r6
   28e10:	e044      	b.n	28e9c <_timer_expiration_handler+0x118>
		_add_thread_to_ready_q(thread);
   28e12:	f7ff f971 	bl	280f8 <_add_thread_to_ready_q>
   28e16:	e7f9      	b.n	28e0c <_timer_expiration_handler+0x88>
   28e18:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   28e1c:	6963      	ldr	r3, [r4, #20]
   28e1e:	2b00      	cmp	r3, #0
   28e20:	d03c      	beq.n	28e9c <_timer_expiration_handler+0x118>
			timeout->func(timeout);
   28e22:	4620      	mov	r0, r4
   28e24:	4798      	blx	r3
   28e26:	e039      	b.n	28e9c <_timer_expiration_handler+0x118>
			in_q->delta_ticks_from_prev -= *delta;
   28e28:	1a8a      	subs	r2, r1, r2
   28e2a:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   28e2c:	b133      	cbz	r3, 28e3c <_timer_expiration_handler+0xb8>
		node->prev = insert_point->prev;
   28e2e:	685a      	ldr	r2, [r3, #4]
   28e30:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   28e32:	6023      	str	r3, [r4, #0]
		insert_point->prev->next = node;
   28e34:	685a      	ldr	r2, [r3, #4]
   28e36:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   28e38:	605c      	str	r4, [r3, #4]
   28e3a:	e02f      	b.n	28e9c <_timer_expiration_handler+0x118>
	node->next = list;
   28e3c:	4b36      	ldr	r3, [pc, #216]	; (28f18 <_timer_expiration_handler+0x194>)
   28e3e:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   28e40:	685a      	ldr	r2, [r3, #4]
   28e42:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28e44:	685a      	ldr	r2, [r3, #4]
   28e46:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28e48:	605c      	str	r4, [r3, #4]
   28e4a:	e027      	b.n	28e9c <_timer_expiration_handler+0x118>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28e4c:	4619      	mov	r1, r3
   28e4e:	e011      	b.n	28e74 <_timer_expiration_handler+0xf0>
	return (node == list->tail) ? NULL : node->next;
   28e50:	2100      	movs	r1, #0
   28e52:	e00f      	b.n	28e74 <_timer_expiration_handler+0xf0>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28e54:	2300      	movs	r3, #0
   28e56:	b1d3      	cbz	r3, 28e8e <_timer_expiration_handler+0x10a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   28e58:	6902      	ldr	r2, [r0, #16]
   28e5a:	6919      	ldr	r1, [r3, #16]
   28e5c:	428a      	cmp	r2, r1
   28e5e:	dde3      	ble.n	28e28 <_timer_expiration_handler+0xa4>
		*delta -= in_q->delta_ticks_from_prev;
   28e60:	1a52      	subs	r2, r2, r1
   28e62:	6102      	str	r2, [r0, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28e64:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28e66:	2b00      	cmp	r3, #0
   28e68:	d0f0      	beq.n	28e4c <_timer_expiration_handler+0xc8>
	return (node == list->tail) ? NULL : node->next;
   28e6a:	492a      	ldr	r1, [pc, #168]	; (28f14 <_timer_expiration_handler+0x190>)
   28e6c:	6909      	ldr	r1, [r1, #16]
   28e6e:	428b      	cmp	r3, r1
   28e70:	d0ee      	beq.n	28e50 <_timer_expiration_handler+0xcc>
   28e72:	6819      	ldr	r1, [r3, #0]
   28e74:	2900      	cmp	r1, #0
   28e76:	d0ed      	beq.n	28e54 <_timer_expiration_handler+0xd0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28e78:	b12a      	cbz	r2, 28e86 <_timer_expiration_handler+0x102>
	return (node == list->tail) ? NULL : node->next;
   28e7a:	4926      	ldr	r1, [pc, #152]	; (28f14 <_timer_expiration_handler+0x190>)
   28e7c:	6909      	ldr	r1, [r1, #16]
   28e7e:	428a      	cmp	r2, r1
   28e80:	d003      	beq.n	28e8a <_timer_expiration_handler+0x106>
   28e82:	681b      	ldr	r3, [r3, #0]
   28e84:	e7e7      	b.n	28e56 <_timer_expiration_handler+0xd2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28e86:	2300      	movs	r3, #0
   28e88:	e7e5      	b.n	28e56 <_timer_expiration_handler+0xd2>
	return (node == list->tail) ? NULL : node->next;
   28e8a:	2300      	movs	r3, #0
   28e8c:	e7e3      	b.n	28e56 <_timer_expiration_handler+0xd2>
	node->next = list;
   28e8e:	4b22      	ldr	r3, [pc, #136]	; (28f18 <_timer_expiration_handler+0x194>)
   28e90:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   28e92:	685a      	ldr	r2, [r3, #4]
   28e94:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28e96:	685a      	ldr	r2, [r3, #4]
   28e98:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28e9a:	605c      	str	r4, [r3, #4]
   28e9c:	f385 8811 	msr	BASEPRI, r5
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   28ea0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   28ea2:	3301      	adds	r3, #1
   28ea4:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   28ea6:	6a23      	ldr	r3, [r4, #32]
   28ea8:	b10b      	cbz	r3, 28eae <_timer_expiration_handler+0x12a>
		timer->expiry_fn(timer);
   28eaa:	4620      	mov	r0, r4
   28eac:	4798      	blx	r3
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);
   28eae:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   28eb2:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28eb4:	42a3      	cmp	r3, r4
   28eb6:	d01d      	beq.n	28ef4 <_timer_expiration_handler+0x170>

	if (!thread) {
   28eb8:	b334      	cbz	r4, 28f08 <_timer_expiration_handler+0x184>
	node->prev->next = node->next;
   28eba:	6863      	ldr	r3, [r4, #4]
   28ebc:	6822      	ldr	r2, [r4, #0]
   28ebe:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28ec0:	6823      	ldr	r3, [r4, #0]
   28ec2:	6862      	ldr	r2, [r4, #4]
   28ec4:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28ec6:	7a63      	ldrb	r3, [r4, #9]
   28ec8:	f023 0302 	bic.w	r3, r3, #2
   28ecc:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   28ece:	f04f 0320 	mov.w	r3, #32
   28ed2:	f3ef 8511 	mrs	r5, BASEPRI
   28ed6:	f383 8811 	msr	BASEPRI, r3
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28eda:	7a63      	ldrb	r3, [r4, #9]
   28edc:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28ee0:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28ee2:	f013 0f1b 	tst.w	r3, #27
   28ee6:	d109      	bne.n	28efc <_timer_expiration_handler+0x178>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28ee8:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28eee:	d003      	beq.n	28ef8 <_timer_expiration_handler+0x174>
   28ef0:	2300      	movs	r3, #0
   28ef2:	e004      	b.n	28efe <_timer_expiration_handler+0x17a>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28ef4:	2400      	movs	r4, #0
   28ef6:	e7df      	b.n	28eb8 <_timer_expiration_handler+0x134>
   28ef8:	2301      	movs	r3, #1
   28efa:	e000      	b.n	28efe <_timer_expiration_handler+0x17a>
   28efc:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28efe:	b923      	cbnz	r3, 28f0a <_timer_expiration_handler+0x186>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28f00:	f385 8811 	msr	BASEPRI, r5
   28f04:	2300      	movs	r3, #0
   28f06:	6663      	str	r3, [r4, #100]	; 0x64
   28f08:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   28f0a:	4620      	mov	r0, r4
   28f0c:	f7ff f8f4 	bl	280f8 <_add_thread_to_ready_q>
   28f10:	e7f6      	b.n	28f00 <_timer_expiration_handler+0x17c>
   28f12:	bf00      	nop
   28f14:	20002678 	.word	0x20002678
   28f18:	20002684 	.word	0x20002684

00028f1c <k_timer_init>:

void k_timer_init(struct k_timer *timer,
		  void (*expiry_fn)(struct k_timer *),
		  void (*stop_fn)(struct k_timer *))
{
	timer->expiry_fn = expiry_fn;
   28f1c:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   28f1e:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0;
   28f20:	2300      	movs	r3, #0
   28f22:	62c3      	str	r3, [r0, #44]	; 0x2c

	sys_dlist_init(&timer->wait_q);
   28f24:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   28f28:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   28f2a:	61c2      	str	r2, [r0, #28]
	t->delta_ticks_from_prev = _INACTIVE;
   28f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28f30:	6102      	str	r2, [r0, #16]
	t->wait_q = NULL;
   28f32:	60c3      	str	r3, [r0, #12]
	t->thread = NULL;
   28f34:	6083      	str	r3, [r0, #8]
	t->func = func;
   28f36:	4a02      	ldr	r2, [pc, #8]	; (28f40 <k_timer_init+0x24>)
   28f38:	6142      	str	r2, [r0, #20]
	_init_timeout(&timer->timeout, _timer_expiration_handler);
	SYS_TRACING_OBJ_INIT(k_timer, timer);

	timer->user_data = NULL;
   28f3a:	6303      	str	r3, [r0, #48]	; 0x30
   28f3c:	4770      	bx	lr
   28f3e:	bf00      	nop
   28f40:	00028d85 	.word	0x00028d85

00028f44 <_impl_k_timer_start>:
	_k_object_init(timer);
}


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   28f44:	b530      	push	{r4, r5, lr}
   28f46:	b083      	sub	sp, #12
   28f48:	3209      	adds	r2, #9
   28f4a:	4b57      	ldr	r3, [pc, #348]	; (290a8 <_impl_k_timer_start+0x164>)
   28f4c:	fba3 4202 	umull	r4, r2, r3, r2
   28f50:	08d2      	lsrs	r2, r2, #3
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
   28f52:	9201      	str	r2, [sp, #4]
   28f54:	3109      	adds	r1, #9
   28f56:	fba3 3101 	umull	r3, r1, r3, r1
   28f5a:	08c9      	lsrs	r1, r1, #3
	duration_in_ticks = _ms_to_ticks(duration);
   28f5c:	9100      	str	r1, [sp, #0]
	__asm__ volatile(
   28f5e:	f04f 0320 	mov.w	r3, #32
   28f62:	f3ef 8411 	mrs	r4, BASEPRI
   28f66:	f383 8811 	msr	BASEPRI, r3

	unsigned int key = irq_lock();

	if (timer->timeout.delta_ticks_from_prev != _INACTIVE) {
   28f6a:	6901      	ldr	r1, [r0, #16]
   28f6c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   28f70:	d012      	beq.n	28f98 <_impl_k_timer_start+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   28f72:	4603      	mov	r3, r0
	return list->tail == node;
   28f74:	4a4d      	ldr	r2, [pc, #308]	; (290ac <_impl_k_timer_start+0x168>)
   28f76:	6912      	ldr	r2, [r2, #16]
   28f78:	4290      	cmp	r0, r2
   28f7a:	d004      	beq.n	28f86 <_impl_k_timer_start+0x42>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28f7c:	b100      	cbz	r0, 28f80 <_impl_k_timer_start+0x3c>
	return (node == list->tail) ? NULL : node->next;
   28f7e:	6803      	ldr	r3, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   28f80:	691a      	ldr	r2, [r3, #16]
   28f82:	440a      	add	r2, r1
   28f84:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   28f86:	6843      	ldr	r3, [r0, #4]
   28f88:	6802      	ldr	r2, [r0, #0]
   28f8a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28f8c:	6803      	ldr	r3, [r0, #0]
   28f8e:	6842      	ldr	r2, [r0, #4]
   28f90:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   28f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28f96:	6103      	str	r3, [r0, #16]
		_abort_timeout(&timer->timeout);
	}

	timer->period = period_in_ticks;
   28f98:	9b01      	ldr	r3, [sp, #4]
   28f9a:	6283      	str	r3, [r0, #40]	; 0x28
	timer->status = 0;
   28f9c:	2200      	movs	r2, #0
   28f9e:	62c2      	str	r2, [r0, #44]	; 0x2c
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
   28fa0:	4605      	mov	r5, r0
   28fa2:	f100 0118 	add.w	r1, r0, #24
   28fa6:	9b00      	ldr	r3, [sp, #0]
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   28fa8:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   28faa:	6082      	str	r2, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   28fac:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
   28fae:	b133      	cbz	r3, 28fbe <_impl_k_timer_start+0x7a>
	return list->head == list;
   28fb0:	4a3e      	ldr	r2, [pc, #248]	; (290ac <_impl_k_timer_start+0x168>)
   28fb2:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28fb6:	4293      	cmp	r3, r2
   28fb8:	d14f      	bne.n	2905a <_impl_k_timer_start+0x116>
   28fba:	2300      	movs	r3, #0
   28fbc:	e04d      	b.n	2905a <_impl_k_timer_start+0x116>
	struct k_thread *thread = timeout->thread;
   28fbe:	4613      	mov	r3, r2
   28fc0:	f04f 0220 	mov.w	r2, #32
   28fc4:	f3ef 8511 	mrs	r5, BASEPRI
   28fc8:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   28fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28fd0:	6102      	str	r2, [r0, #16]
	if (thread) {
   28fd2:	b323      	cbz	r3, 2901e <_impl_k_timer_start+0xda>
	if (timeout_obj->wait_q) {
   28fd4:	68c2      	ldr	r2, [r0, #12]
   28fd6:	b152      	cbz	r2, 28fee <_impl_k_timer_start+0xaa>
	node->prev->next = node->next;
   28fd8:	685a      	ldr	r2, [r3, #4]
   28fda:	6819      	ldr	r1, [r3, #0]
   28fdc:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   28fde:	681a      	ldr	r2, [r3, #0]
   28fe0:	6859      	ldr	r1, [r3, #4]
   28fe2:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28fe4:	7a5a      	ldrb	r2, [r3, #9]
   28fe6:	f022 0202 	bic.w	r2, r2, #2
   28fea:	725a      	strb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
   28fec:	61db      	str	r3, [r3, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28fee:	7a5a      	ldrb	r2, [r3, #9]
   28ff0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   28ff4:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28ff6:	f012 0f1b 	tst.w	r2, #27
   28ffa:	d107      	bne.n	2900c <_impl_k_timer_start+0xc8>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28ffc:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28ffe:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29002:	d001      	beq.n	29008 <_impl_k_timer_start+0xc4>
   29004:	2200      	movs	r2, #0
   29006:	e002      	b.n	2900e <_impl_k_timer_start+0xca>
   29008:	2201      	movs	r2, #1
   2900a:	e000      	b.n	2900e <_impl_k_timer_start+0xca>
   2900c:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   2900e:	b912      	cbnz	r2, 29016 <_impl_k_timer_start+0xd2>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29010:	f385 8811 	msr	BASEPRI, r5
   29014:	e044      	b.n	290a0 <_impl_k_timer_start+0x15c>
		_add_thread_to_ready_q(thread);
   29016:	4618      	mov	r0, r3
   29018:	f7ff f86e 	bl	280f8 <_add_thread_to_ready_q>
   2901c:	e7f8      	b.n	29010 <_impl_k_timer_start+0xcc>
   2901e:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   29022:	6943      	ldr	r3, [r0, #20]
   29024:	2b00      	cmp	r3, #0
   29026:	d03b      	beq.n	290a0 <_impl_k_timer_start+0x15c>
			timeout->func(timeout);
   29028:	4798      	blx	r3
   2902a:	e039      	b.n	290a0 <_impl_k_timer_start+0x15c>
			in_q->delta_ticks_from_prev -= *delta;
   2902c:	1a8a      	subs	r2, r1, r2
   2902e:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29030:	b133      	cbz	r3, 29040 <_impl_k_timer_start+0xfc>
		node->prev = insert_point->prev;
   29032:	685a      	ldr	r2, [r3, #4]
   29034:	6042      	str	r2, [r0, #4]
		node->next = insert_point;
   29036:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   29038:	685a      	ldr	r2, [r3, #4]
   2903a:	6010      	str	r0, [r2, #0]
		insert_point->prev = node;
   2903c:	6058      	str	r0, [r3, #4]
   2903e:	e02f      	b.n	290a0 <_impl_k_timer_start+0x15c>
	node->next = list;
   29040:	4b1b      	ldr	r3, [pc, #108]	; (290b0 <_impl_k_timer_start+0x16c>)
   29042:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   29044:	685a      	ldr	r2, [r3, #4]
   29046:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   29048:	685a      	ldr	r2, [r3, #4]
   2904a:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2904c:	6058      	str	r0, [r3, #4]
   2904e:	e027      	b.n	290a0 <_impl_k_timer_start+0x15c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29050:	4619      	mov	r1, r3
   29052:	e011      	b.n	29078 <_impl_k_timer_start+0x134>
	return (node == list->tail) ? NULL : node->next;
   29054:	2100      	movs	r1, #0
   29056:	e00f      	b.n	29078 <_impl_k_timer_start+0x134>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29058:	2300      	movs	r3, #0
   2905a:	b1d3      	cbz	r3, 29092 <_impl_k_timer_start+0x14e>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2905c:	692a      	ldr	r2, [r5, #16]
   2905e:	6919      	ldr	r1, [r3, #16]
   29060:	428a      	cmp	r2, r1
   29062:	dde3      	ble.n	2902c <_impl_k_timer_start+0xe8>
		*delta -= in_q->delta_ticks_from_prev;
   29064:	1a52      	subs	r2, r2, r1
   29066:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29068:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2906a:	2b00      	cmp	r3, #0
   2906c:	d0f0      	beq.n	29050 <_impl_k_timer_start+0x10c>
	return (node == list->tail) ? NULL : node->next;
   2906e:	490f      	ldr	r1, [pc, #60]	; (290ac <_impl_k_timer_start+0x168>)
   29070:	6909      	ldr	r1, [r1, #16]
   29072:	428b      	cmp	r3, r1
   29074:	d0ee      	beq.n	29054 <_impl_k_timer_start+0x110>
   29076:	6819      	ldr	r1, [r3, #0]
   29078:	2900      	cmp	r1, #0
   2907a:	d0ed      	beq.n	29058 <_impl_k_timer_start+0x114>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2907c:	b12a      	cbz	r2, 2908a <_impl_k_timer_start+0x146>
	return (node == list->tail) ? NULL : node->next;
   2907e:	490b      	ldr	r1, [pc, #44]	; (290ac <_impl_k_timer_start+0x168>)
   29080:	6909      	ldr	r1, [r1, #16]
   29082:	428a      	cmp	r2, r1
   29084:	d003      	beq.n	2908e <_impl_k_timer_start+0x14a>
   29086:	681b      	ldr	r3, [r3, #0]
   29088:	e7e7      	b.n	2905a <_impl_k_timer_start+0x116>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2908a:	2300      	movs	r3, #0
   2908c:	e7e5      	b.n	2905a <_impl_k_timer_start+0x116>
	return (node == list->tail) ? NULL : node->next;
   2908e:	2300      	movs	r3, #0
   29090:	e7e3      	b.n	2905a <_impl_k_timer_start+0x116>
	node->next = list;
   29092:	4b07      	ldr	r3, [pc, #28]	; (290b0 <_impl_k_timer_start+0x16c>)
   29094:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   29096:	685a      	ldr	r2, [r3, #4]
   29098:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   2909a:	685a      	ldr	r2, [r3, #4]
   2909c:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2909e:	6058      	str	r0, [r3, #4]
   290a0:	f384 8811 	msr	BASEPRI, r4
	irq_unlock(key);
}
   290a4:	b003      	add	sp, #12
   290a6:	bd30      	pop	{r4, r5, pc}
   290a8:	cccccccd 	.word	0xcccccccd
   290ac:	20002678 	.word	0x20002678
   290b0:	20002684 	.word	0x20002684

000290b4 <_impl_k_timer_stop>:
	return 0;
}
#endif

void _impl_k_timer_stop(struct k_timer *timer)
{
   290b4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   290b6:	f04f 0320 	mov.w	r3, #32
   290ba:	f3ef 8411 	mrs	r4, BASEPRI
   290be:	f383 8811 	msr	BASEPRI, r3
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   290c2:	6903      	ldr	r3, [r0, #16]
   290c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   290c8:	d042      	beq.n	29150 <_impl_k_timer_stop+0x9c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   290ca:	4602      	mov	r2, r0
	return list->tail == node;
   290cc:	493b      	ldr	r1, [pc, #236]	; (291bc <_impl_k_timer_stop+0x108>)
   290ce:	6909      	ldr	r1, [r1, #16]
   290d0:	4288      	cmp	r0, r1
   290d2:	d004      	beq.n	290de <_impl_k_timer_stop+0x2a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   290d4:	b100      	cbz	r0, 290d8 <_impl_k_timer_stop+0x24>
	return (node == list->tail) ? NULL : node->next;
   290d6:	6802      	ldr	r2, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   290d8:	6911      	ldr	r1, [r2, #16]
   290da:	440b      	add	r3, r1
   290dc:	6113      	str	r3, [r2, #16]
	node->prev->next = node->next;
   290de:	6843      	ldr	r3, [r0, #4]
   290e0:	6802      	ldr	r2, [r0, #0]
   290e2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   290e4:	6803      	ldr	r3, [r0, #0]
   290e6:	6842      	ldr	r2, [r0, #4]
   290e8:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   290ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   290ee:	6103      	str	r3, [r0, #16]
	return 0;
   290f0:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   290f2:	f384 8811 	msr	BASEPRI, r4
	int key = irq_lock();
	int inactive = (_abort_timeout(&timer->timeout) == _INACTIVE);

	irq_unlock(key);

	if (inactive) {
   290f6:	2b00      	cmp	r3, #0
   290f8:	d15f      	bne.n	291ba <_impl_k_timer_stop+0x106>
   290fa:	4604      	mov	r4, r0
		return;
	}

	if (timer->stop_fn) {
   290fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   290fe:	b103      	cbz	r3, 29102 <_impl_k_timer_stop+0x4e>
		timer->stop_fn(timer);
   29100:	4798      	blx	r3
	__asm__ volatile(
   29102:	f04f 0320 	mov.w	r3, #32
   29106:	f3ef 8511 	mrs	r5, BASEPRI
   2910a:	f383 8811 	msr	BASEPRI, r3
	}

	key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&timer->wait_q);
   2910e:	f104 0218 	add.w	r2, r4, #24
	if (_handling_timeouts) {
   29112:	4b2b      	ldr	r3, [pc, #172]	; (291c0 <_impl_k_timer_stop+0x10c>)
   29114:	681b      	ldr	r3, [r3, #0]
   29116:	b9f3      	cbnz	r3, 29156 <_impl_k_timer_stop+0xa2>
	return list->head == list;
   29118:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2911a:	4282      	cmp	r2, r0
   2911c:	d02c      	beq.n	29178 <_impl_k_timer_stop+0xc4>
	if (thread) {
   2911e:	b148      	cbz	r0, 29134 <_impl_k_timer_stop+0x80>
	node->prev->next = node->next;
   29120:	6843      	ldr	r3, [r0, #4]
   29122:	6802      	ldr	r2, [r0, #0]
   29124:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29126:	6803      	ldr	r3, [r0, #0]
   29128:	6842      	ldr	r2, [r0, #4]
   2912a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2912c:	7a43      	ldrb	r3, [r0, #9]
   2912e:	f023 0302 	bic.w	r3, r3, #2
   29132:	7243      	strb	r3, [r0, #9]

	if (pending_thread) {
   29134:	b330      	cbz	r0, 29184 <_impl_k_timer_stop+0xd0>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29136:	7a43      	ldrb	r3, [r0, #9]
   29138:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2913c:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2913e:	f013 0f1b 	tst.w	r3, #27
   29142:	d11d      	bne.n	29180 <_impl_k_timer_stop+0xcc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29144:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2914a:	d017      	beq.n	2917c <_impl_k_timer_stop+0xc8>
   2914c:	2300      	movs	r3, #0
   2914e:	e018      	b.n	29182 <_impl_k_timer_stop+0xce>
		return _INACTIVE;
   29150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29154:	e7cd      	b.n	290f2 <_impl_k_timer_stop+0x3e>
	return list->head == list;
   29156:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29158:	4282      	cmp	r2, r0
   2915a:	d102      	bne.n	29162 <_impl_k_timer_stop+0xae>
   2915c:	2000      	movs	r0, #0
   2915e:	e000      	b.n	29162 <_impl_k_timer_stop+0xae>
	return (node == list->tail) ? NULL : node->next;
   29160:	6800      	ldr	r0, [r0, #0]
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   29162:	2800      	cmp	r0, #0
   29164:	d0db      	beq.n	2911e <_impl_k_timer_stop+0x6a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   29166:	6a03      	ldr	r3, [r0, #32]
			if (_is_thread_timeout_expired(thread)) {
   29168:	f113 0f02 	cmn.w	r3, #2
   2916c:	d1d7      	bne.n	2911e <_impl_k_timer_stop+0x6a>
   2916e:	6853      	ldr	r3, [r2, #4]
   29170:	4298      	cmp	r0, r3
   29172:	d1f5      	bne.n	29160 <_impl_k_timer_stop+0xac>
   29174:	2000      	movs	r0, #0
   29176:	e7f4      	b.n	29162 <_impl_k_timer_stop+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29178:	2000      	movs	r0, #0
   2917a:	e7d0      	b.n	2911e <_impl_k_timer_stop+0x6a>
	return !(_is_thread_prevented_from_running(thread) ||
   2917c:	2301      	movs	r3, #1
   2917e:	e000      	b.n	29182 <_impl_k_timer_stop+0xce>
   29180:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29182:	b95b      	cbnz	r3, 2919c <_impl_k_timer_stop+0xe8>
   29184:	f3ef 8305 	mrs	r3, IPSR
   29188:	2b0d      	cmp	r3, #13
   2918a:	d80a      	bhi.n	291a2 <_impl_k_timer_stop+0xee>
   2918c:	b173      	cbz	r3, 291ac <_impl_k_timer_stop+0xf8>
   2918e:	4b0d      	ldr	r3, [pc, #52]	; (291c4 <_impl_k_timer_stop+0x110>)
   29190:	685b      	ldr	r3, [r3, #4]
   29192:	f413 6f00 	tst.w	r3, #2048	; 0x800
   29196:	d00b      	beq.n	291b0 <_impl_k_timer_stop+0xfc>
   29198:	2300      	movs	r3, #0
   2919a:	e003      	b.n	291a4 <_impl_k_timer_stop+0xf0>
		_add_thread_to_ready_q(thread);
   2919c:	f7fe ffac 	bl	280f8 <_add_thread_to_ready_q>
   291a0:	e7f0      	b.n	29184 <_impl_k_timer_stop+0xd0>
   291a2:	2301      	movs	r3, #1
		_ready_thread(pending_thread);
	}

	if (_is_in_isr()) {
   291a4:	b133      	cbz	r3, 291b4 <_impl_k_timer_stop+0x100>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   291a6:	f385 8811 	msr	BASEPRI, r5
   291aa:	bd38      	pop	{r3, r4, r5, pc}
   291ac:	2300      	movs	r3, #0
   291ae:	e7f9      	b.n	291a4 <_impl_k_timer_stop+0xf0>
   291b0:	2301      	movs	r3, #1
   291b2:	e7f7      	b.n	291a4 <_impl_k_timer_stop+0xf0>
		irq_unlock(key);
	} else {
		_reschedule_threads(key);
   291b4:	4628      	mov	r0, r5
   291b6:	f7ff f937 	bl	28428 <_reschedule_threads>
   291ba:	bd38      	pop	{r3, r4, r5, pc}
   291bc:	20002678 	.word	0x20002678
   291c0:	20002a60 	.word	0x20002a60
   291c4:	e000ed00 	.word	0xe000ed00

000291c8 <_timeout_remaining_get>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_timer_status_sync, K_OBJ_TIMER, struct k_timer *);
#endif

s32_t _timeout_remaining_get(struct _timeout *timeout)
{
   291c8:	b430      	push	{r4, r5}
	__asm__ volatile(
   291ca:	f04f 0320 	mov.w	r3, #32
   291ce:	f3ef 8411 	mrs	r4, BASEPRI
   291d2:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	s32_t remaining_ticks;

	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   291d6:	6903      	ldr	r3, [r0, #16]
   291d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   291dc:	d017      	beq.n	2920e <_timeout_remaining_get+0x46>
	return list->head == list;
   291de:	4a10      	ldr	r2, [pc, #64]	; (29220 <_timeout_remaining_get+0x58>)
   291e0:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   291e4:	4293      	cmp	r3, r2
   291e6:	d001      	beq.n	291ec <_timeout_remaining_get+0x24>
		 * and summing up the various tick deltas involved
		 */
		struct _timeout *t =
			(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

		remaining_ticks = t->delta_ticks_from_prev;
   291e8:	6919      	ldr	r1, [r3, #16]
		while (t != timeout) {
   291ea:	e005      	b.n	291f8 <_timeout_remaining_get+0x30>
   291ec:	2300      	movs	r3, #0
   291ee:	e7fb      	b.n	291e8 <_timeout_remaining_get+0x20>
	return (node == list->tail) ? NULL : node->next;
   291f0:	2200      	movs	r2, #0
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
								   &t->node);
			remaining_ticks += t->delta_ticks_from_prev;
   291f2:	6913      	ldr	r3, [r2, #16]
   291f4:	4419      	add	r1, r3
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   291f6:	4613      	mov	r3, r2
		while (t != timeout) {
   291f8:	4283      	cmp	r3, r0
   291fa:	d009      	beq.n	29210 <_timeout_remaining_get+0x48>
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   291fc:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   291fe:	2b00      	cmp	r3, #0
   29200:	d0f7      	beq.n	291f2 <_timeout_remaining_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   29202:	4a07      	ldr	r2, [pc, #28]	; (29220 <_timeout_remaining_get+0x58>)
   29204:	6912      	ldr	r2, [r2, #16]
   29206:	4293      	cmp	r3, r2
   29208:	d0f2      	beq.n	291f0 <_timeout_remaining_get+0x28>
   2920a:	681a      	ldr	r2, [r3, #0]
   2920c:	e7f1      	b.n	291f2 <_timeout_remaining_get+0x2a>
		remaining_ticks = 0;
   2920e:	2100      	movs	r1, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29210:	f384 8811 	msr	BASEPRI, r4
	return (u64_t)ticks * _ms_per_tick;
   29214:	008a      	lsls	r2, r1, #2
   29216:	1850      	adds	r0, r2, r1
   29218:	1800      	adds	r0, r0, r0
		}
	}

	irq_unlock(key);
	return __ticks_to_ms(remaining_ticks);
}
   2921a:	bc30      	pop	{r4, r5}
   2921c:	4770      	bx	lr
   2921e:	bf00      	nop
   29220:	20002678 	.word	0x20002678

00029224 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   29224:	b538      	push	{r3, r4, r5, lr}
   29226:	4604      	mov	r4, r0
   29228:	e003      	b.n	29232 <work_q_main+0xe>
		handler = work->handler;

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
					      K_WORK_STATE_PENDING)) {
			handler(work);
   2922a:	4610      	mov	r0, r2
   2922c:	47a8      	blx	r5
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   2922e:	f7ff f927 	bl	28480 <_impl_k_yield>
		work = k_queue_get(&work_q->queue, K_FOREVER);
   29232:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   29236:	4620      	mov	r0, r4
   29238:	f7fe ff0c 	bl	28054 <k_queue_get>
		if (!work) {
   2923c:	4602      	mov	r2, r0
   2923e:	2800      	cmp	r0, #0
   29240:	d0f7      	beq.n	29232 <work_q_main+0xe>
		handler = work->handler;
   29242:	6845      	ldr	r5, [r0, #4]
		if (atomic_test_and_clear_bit(work->flags,
   29244:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29248:	f3bf 8f5b 	dmb	ish
   2924c:	e853 1f00 	ldrex	r1, [r3]
   29250:	f021 0001 	bic.w	r0, r1, #1
   29254:	e843 0e00 	strex	lr, r0, [r3]
   29258:	f1be 0f00 	cmp.w	lr, #0
   2925c:	d1f6      	bne.n	2924c <work_q_main+0x28>
   2925e:	f3bf 8f5b 	dmb	ish
   29262:	f011 0f01 	tst.w	r1, #1
   29266:	d0e2      	beq.n	2922e <work_q_main+0xa>
   29268:	e7df      	b.n	2922a <work_q_main+0x6>

0002926a <work_timeout>:
	_k_object_init(work_q);
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
static void work_timeout(struct _timeout *t)
{
   2926a:	b510      	push	{r4, lr}
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   2926c:	6984      	ldr	r4, [r0, #24]
   2926e:	f1a0 010c 	sub.w	r1, r0, #12
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   29272:	1f03      	subs	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29274:	f3bf 8f5b 	dmb	ish
   29278:	e853 2f00 	ldrex	r2, [r3]
   2927c:	f042 0001 	orr.w	r0, r2, #1
   29280:	e843 0e00 	strex	lr, r0, [r3]
   29284:	f1be 0f00 	cmp.w	lr, #0
   29288:	d1f6      	bne.n	29278 <work_timeout+0xe>
   2928a:	f3bf 8f5b 	dmb	ish
   2928e:	f012 0f01 	tst.w	r2, #1
   29292:	d000      	beq.n	29296 <work_timeout+0x2c>
   29294:	bd10      	pop	{r4, pc}
		k_queue_append(&work_q->queue, work);
   29296:	4620      	mov	r0, r4
   29298:	f7fe feb4 	bl	28004 <k_queue_append>
}
   2929c:	e7fa      	b.n	29294 <work_timeout+0x2a>
	...

000292a0 <k_work_q_start>:
{
   292a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   292a2:	b087      	sub	sp, #28
   292a4:	4604      	mov	r4, r0
   292a6:	460d      	mov	r5, r1
   292a8:	4616      	mov	r6, r2
   292aa:	461f      	mov	r7, r3
	k_queue_init(&work_q->queue);
   292ac:	f7fe fe77 	bl	27f9e <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   292b0:	2300      	movs	r3, #0
   292b2:	9305      	str	r3, [sp, #20]
   292b4:	9304      	str	r3, [sp, #16]
   292b6:	9703      	str	r7, [sp, #12]
   292b8:	9302      	str	r3, [sp, #8]
   292ba:	9301      	str	r3, [sp, #4]
   292bc:	9400      	str	r4, [sp, #0]
   292be:	4b04      	ldr	r3, [pc, #16]	; (292d0 <k_work_q_start+0x30>)
   292c0:	4632      	mov	r2, r6
   292c2:	4629      	mov	r1, r5
   292c4:	f104 0010 	add.w	r0, r4, #16
   292c8:	f7ff fcb2 	bl	28c30 <_impl_k_thread_create>
}
   292cc:	b007      	add	sp, #28
   292ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   292d0:	00029225 	.word	0x00029225

000292d4 <k_delayed_work_init>:

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   292d4:	b500      	push	{lr}
	atomic_clear_bit(work->flags, K_WORK_STATE_PENDING);
   292d6:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   292da:	f3bf 8f5b 	dmb	ish
   292de:	e853 2f00 	ldrex	r2, [r3]
   292e2:	f022 0201 	bic.w	r2, r2, #1
   292e6:	e843 2e00 	strex	lr, r2, [r3]
   292ea:	f1be 0f00 	cmp.w	lr, #0
   292ee:	d1f6      	bne.n	292de <k_delayed_work_init+0xa>
   292f0:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
   292f4:	6041      	str	r1, [r0, #4]
	t->delta_ticks_from_prev = _INACTIVE;
   292f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   292fa:	61c3      	str	r3, [r0, #28]
	t->wait_q = NULL;
   292fc:	2300      	movs	r3, #0
   292fe:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   29300:	6143      	str	r3, [r0, #20]
	t->func = func;
   29302:	4a02      	ldr	r2, [pc, #8]	; (2930c <k_delayed_work_init+0x38>)
   29304:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   29306:	6243      	str	r3, [r0, #36]	; 0x24
   29308:	f85d fb04 	ldr.w	pc, [sp], #4
   2930c:	0002926b 	.word	0x0002926b

00029310 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   29310:	b430      	push	{r4, r5}
	__asm__ volatile(
   29312:	f04f 0320 	mov.w	r3, #32
   29316:	f3ef 8411 	mrs	r4, BASEPRI
   2931a:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   2931e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29320:	b18b      	cbz	r3, 29346 <k_delayed_work_cancel+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29322:	f3bf 8f5b 	dmb	ish
   29326:	6883      	ldr	r3, [r0, #8]
   29328:	f3bf 8f5b 	dmb	ish
		irq_unlock(key);
		return -EINVAL;
	}

	if (k_work_pending(&work->work)) {
   2932c:	f013 0f01 	tst.w	r3, #1
   29330:	d02d      	beq.n	2938e <k_delayed_work_cancel+0x7e>
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   29332:	6a45      	ldr	r5, [r0, #36]	; 0x24
   29334:	4601      	mov	r1, r0
	return list->head;
   29336:	682b      	ldr	r3, [r5, #0]
	sys_snode_t *prev = NULL;
   29338:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   2933a:	b193      	cbz	r3, 29362 <k_delayed_work_cancel+0x52>
		if (test == node) {
   2933c:	4299      	cmp	r1, r3
   2933e:	d007      	beq.n	29350 <k_delayed_work_cancel+0x40>
		prev = test;
   29340:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   29342:	681b      	ldr	r3, [r3, #0]
   29344:	e7f9      	b.n	2933a <k_delayed_work_cancel+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29346:	f384 8811 	msr	BASEPRI, r4
		return -EINVAL;
   2934a:	f06f 0015 	mvn.w	r0, #21
   2934e:	e00e      	b.n	2936e <k_delayed_work_cancel+0x5e>
	if (!prev_node) {
   29350:	b17a      	cbz	r2, 29372 <k_delayed_work_cancel+0x62>
		prev_node->next = node->next;
   29352:	6803      	ldr	r3, [r0, #0]
   29354:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   29356:	686b      	ldr	r3, [r5, #4]
   29358:	4298      	cmp	r0, r3
   2935a:	d011      	beq.n	29380 <k_delayed_work_cancel+0x70>
	node->next = NULL;
   2935c:	2300      	movs	r3, #0
   2935e:	6003      	str	r3, [r0, #0]
			return true;
   29360:	2301      	movs	r3, #1
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   29362:	b17b      	cbz	r3, 29384 <k_delayed_work_cancel+0x74>
	} else {
		_abort_timeout(&work->timeout);
	}

	/* Detach from workqueue */
	work->work_q = NULL;
   29364:	2300      	movs	r3, #0
   29366:	6243      	str	r3, [r0, #36]	; 0x24
   29368:	f384 8811 	msr	BASEPRI, r4

	irq_unlock(key);

	return 0;
   2936c:	4618      	mov	r0, r3
}
   2936e:	bc30      	pop	{r4, r5}
   29370:	4770      	bx	lr
		list->head = node->next;
   29372:	6803      	ldr	r3, [r0, #0]
   29374:	602b      	str	r3, [r5, #0]
		if (list->tail == node) {
   29376:	686a      	ldr	r2, [r5, #4]
   29378:	4290      	cmp	r0, r2
   2937a:	d1ef      	bne.n	2935c <k_delayed_work_cancel+0x4c>
			list->tail = list->head;
   2937c:	606b      	str	r3, [r5, #4]
   2937e:	e7ed      	b.n	2935c <k_delayed_work_cancel+0x4c>
			list->tail = prev_node;
   29380:	606a      	str	r2, [r5, #4]
   29382:	e7eb      	b.n	2935c <k_delayed_work_cancel+0x4c>
   29384:	f384 8811 	msr	BASEPRI, r4
			return -EINVAL;
   29388:	f06f 0015 	mvn.w	r0, #21
   2938c:	e7ef      	b.n	2936e <k_delayed_work_cancel+0x5e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2938e:	69c2      	ldr	r2, [r0, #28]
   29390:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29394:	d0e6      	beq.n	29364 <k_delayed_work_cancel+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29396:	f100 030c 	add.w	r3, r0, #12
	return list->tail == node;
   2939a:	4909      	ldr	r1, [pc, #36]	; (293c0 <k_delayed_work_cancel+0xb0>)
   2939c:	6909      	ldr	r1, [r1, #16]
   2939e:	428b      	cmp	r3, r1
   293a0:	d004      	beq.n	293ac <k_delayed_work_cancel+0x9c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   293a2:	b103      	cbz	r3, 293a6 <k_delayed_work_cancel+0x96>
	return (node == list->tail) ? NULL : node->next;
   293a4:	68c3      	ldr	r3, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   293a6:	6919      	ldr	r1, [r3, #16]
   293a8:	440a      	add	r2, r1
   293aa:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   293ac:	6903      	ldr	r3, [r0, #16]
   293ae:	68c2      	ldr	r2, [r0, #12]
   293b0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   293b2:	68c3      	ldr	r3, [r0, #12]
   293b4:	6902      	ldr	r2, [r0, #16]
   293b6:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   293b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   293bc:	61c3      	str	r3, [r0, #28]
   293be:	e7d1      	b.n	29364 <k_delayed_work_cancel+0x54>
   293c0:	20002678 	.word	0x20002678

000293c4 <k_delayed_work_submit_to_queue>:
{
   293c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   293c6:	f04f 0320 	mov.w	r3, #32
   293ca:	f3ef 8711 	mrs	r7, BASEPRI
   293ce:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   293d2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   293d4:	b113      	cbz	r3, 293dc <k_delayed_work_submit_to_queue+0x18>
   293d6:	4283      	cmp	r3, r0
   293d8:	f040 80b4 	bne.w	29544 <k_delayed_work_submit_to_queue+0x180>
   293dc:	4614      	mov	r4, r2
   293de:	460e      	mov	r6, r1
   293e0:	4605      	mov	r5, r0
	if (work->work_q == work_q) {
   293e2:	4283      	cmp	r3, r0
   293e4:	d016      	beq.n	29414 <k_delayed_work_submit_to_queue+0x50>
	work->work_q = work_q;
   293e6:	6275      	str	r5, [r6, #36]	; 0x24
	if (!delay) {
   293e8:	b1d4      	cbz	r4, 29420 <k_delayed_work_submit_to_queue+0x5c>
		_add_timeout(NULL, &work->timeout, NULL,
   293ea:	f106 050c 	add.w	r5, r6, #12
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   293ee:	f104 0309 	add.w	r3, r4, #9
   293f2:	4c57      	ldr	r4, [pc, #348]	; (29550 <k_delayed_work_submit_to_queue+0x18c>)
   293f4:	fba4 2303 	umull	r2, r3, r4, r3
   293f8:	08db      	lsrs	r3, r3, #3
   293fa:	3301      	adds	r3, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   293fc:	612b      	str	r3, [r5, #16]
	timeout->thread = thread;
   293fe:	2200      	movs	r2, #0
   29400:	60aa      	str	r2, [r5, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   29402:	60ea      	str	r2, [r5, #12]
	if (!timeout_in_ticks) {
   29404:	b32b      	cbz	r3, 29452 <k_delayed_work_submit_to_queue+0x8e>
	return list->head == list;
   29406:	4a53      	ldr	r2, [pc, #332]	; (29554 <k_delayed_work_submit_to_queue+0x190>)
   29408:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2940c:	4293      	cmp	r3, r2
   2940e:	d172      	bne.n	294f6 <k_delayed_work_submit_to_queue+0x132>
   29410:	2300      	movs	r3, #0
   29412:	e070      	b.n	294f6 <k_delayed_work_submit_to_queue+0x132>
		err = k_delayed_work_cancel(work);
   29414:	4608      	mov	r0, r1
   29416:	f7ff ff7b 	bl	29310 <k_delayed_work_cancel>
		if (err < 0) {
   2941a:	2800      	cmp	r0, #0
   2941c:	dae3      	bge.n	293e6 <k_delayed_work_submit_to_queue+0x22>
   2941e:	e08e      	b.n	2953e <k_delayed_work_submit_to_queue+0x17a>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   29420:	f106 0308 	add.w	r3, r6, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29424:	f3bf 8f5b 	dmb	ish
   29428:	e853 2f00 	ldrex	r2, [r3]
   2942c:	f042 0101 	orr.w	r1, r2, #1
   29430:	e843 1000 	strex	r0, r1, [r3]
   29434:	2800      	cmp	r0, #0
   29436:	d1f7      	bne.n	29428 <k_delayed_work_submit_to_queue+0x64>
   29438:	f3bf 8f5b 	dmb	ish
   2943c:	f012 0f01 	tst.w	r2, #1
   29440:	d001      	beq.n	29446 <k_delayed_work_submit_to_queue+0x82>
	err = 0;
   29442:	2000      	movs	r0, #0
   29444:	e07b      	b.n	2953e <k_delayed_work_submit_to_queue+0x17a>
		k_queue_append(&work_q->queue, work);
   29446:	4631      	mov	r1, r6
   29448:	4628      	mov	r0, r5
   2944a:	f7fe fddb 	bl	28004 <k_queue_append>
   2944e:	2000      	movs	r0, #0
   29450:	e075      	b.n	2953e <k_delayed_work_submit_to_queue+0x17a>
	struct k_thread *thread = timeout->thread;
   29452:	4610      	mov	r0, r2
   29454:	f04f 0320 	mov.w	r3, #32
   29458:	f3ef 8411 	mrs	r4, BASEPRI
   2945c:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   29460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29464:	612b      	str	r3, [r5, #16]
	if (thread) {
   29466:	b322      	cbz	r2, 294b2 <k_delayed_work_submit_to_queue+0xee>
	if (timeout_obj->wait_q) {
   29468:	68eb      	ldr	r3, [r5, #12]
   2946a:	b153      	cbz	r3, 29482 <k_delayed_work_submit_to_queue+0xbe>
	node->prev->next = node->next;
   2946c:	6853      	ldr	r3, [r2, #4]
   2946e:	6812      	ldr	r2, [r2, #0]
   29470:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29472:	6803      	ldr	r3, [r0, #0]
   29474:	6842      	ldr	r2, [r0, #4]
   29476:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29478:	7a43      	ldrb	r3, [r0, #9]
   2947a:	f023 0302 	bic.w	r3, r3, #2
   2947e:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   29480:	61c0      	str	r0, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29482:	7a43      	ldrb	r3, [r0, #9]
   29484:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29488:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2948a:	f013 0f1b 	tst.w	r3, #27
   2948e:	d107      	bne.n	294a0 <k_delayed_work_submit_to_queue+0xdc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29490:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29496:	d001      	beq.n	2949c <k_delayed_work_submit_to_queue+0xd8>
   29498:	2300      	movs	r3, #0
   2949a:	e002      	b.n	294a2 <k_delayed_work_submit_to_queue+0xde>
   2949c:	2301      	movs	r3, #1
   2949e:	e000      	b.n	294a2 <k_delayed_work_submit_to_queue+0xde>
   294a0:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   294a2:	b91b      	cbnz	r3, 294ac <k_delayed_work_submit_to_queue+0xe8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   294a4:	f384 8811 	msr	BASEPRI, r4
   294a8:	2000      	movs	r0, #0
   294aa:	e048      	b.n	2953e <k_delayed_work_submit_to_queue+0x17a>
		_add_thread_to_ready_q(thread);
   294ac:	f7fe fe24 	bl	280f8 <_add_thread_to_ready_q>
   294b0:	e7f8      	b.n	294a4 <k_delayed_work_submit_to_queue+0xe0>
   294b2:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
   294b6:	696b      	ldr	r3, [r5, #20]
   294b8:	2b00      	cmp	r3, #0
   294ba:	d046      	beq.n	2954a <k_delayed_work_submit_to_queue+0x186>
			timeout->func(timeout);
   294bc:	4628      	mov	r0, r5
   294be:	4798      	blx	r3
   294c0:	2000      	movs	r0, #0
   294c2:	e03c      	b.n	2953e <k_delayed_work_submit_to_queue+0x17a>
			in_q->delta_ticks_from_prev -= *delta;
   294c4:	1aa2      	subs	r2, r4, r2
   294c6:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   294c8:	b13b      	cbz	r3, 294da <k_delayed_work_submit_to_queue+0x116>
		node->prev = insert_point->prev;
   294ca:	685a      	ldr	r2, [r3, #4]
   294cc:	606a      	str	r2, [r5, #4]
		node->next = insert_point;
   294ce:	60f3      	str	r3, [r6, #12]
		insert_point->prev->next = node;
   294d0:	685a      	ldr	r2, [r3, #4]
   294d2:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   294d4:	605d      	str	r5, [r3, #4]
   294d6:	2000      	movs	r0, #0
   294d8:	e031      	b.n	2953e <k_delayed_work_submit_to_queue+0x17a>
	node->next = list;
   294da:	4b1f      	ldr	r3, [pc, #124]	; (29558 <k_delayed_work_submit_to_queue+0x194>)
   294dc:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   294de:	685a      	ldr	r2, [r3, #4]
   294e0:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   294e2:	685a      	ldr	r2, [r3, #4]
   294e4:	6015      	str	r5, [r2, #0]
	list->tail = node;
   294e6:	605d      	str	r5, [r3, #4]
   294e8:	2000      	movs	r0, #0
   294ea:	e028      	b.n	2953e <k_delayed_work_submit_to_queue+0x17a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   294ec:	4619      	mov	r1, r3
   294ee:	e011      	b.n	29514 <k_delayed_work_submit_to_queue+0x150>
	return (node == list->tail) ? NULL : node->next;
   294f0:	2100      	movs	r1, #0
   294f2:	e00f      	b.n	29514 <k_delayed_work_submit_to_queue+0x150>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   294f4:	2300      	movs	r3, #0
   294f6:	b1d3      	cbz	r3, 2952e <k_delayed_work_submit_to_queue+0x16a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   294f8:	692a      	ldr	r2, [r5, #16]
   294fa:	691c      	ldr	r4, [r3, #16]
   294fc:	42a2      	cmp	r2, r4
   294fe:	dde1      	ble.n	294c4 <k_delayed_work_submit_to_queue+0x100>
		*delta -= in_q->delta_ticks_from_prev;
   29500:	1b12      	subs	r2, r2, r4
   29502:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29504:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29506:	2b00      	cmp	r3, #0
   29508:	d0f0      	beq.n	294ec <k_delayed_work_submit_to_queue+0x128>
	return (node == list->tail) ? NULL : node->next;
   2950a:	4912      	ldr	r1, [pc, #72]	; (29554 <k_delayed_work_submit_to_queue+0x190>)
   2950c:	6909      	ldr	r1, [r1, #16]
   2950e:	428b      	cmp	r3, r1
   29510:	d0ee      	beq.n	294f0 <k_delayed_work_submit_to_queue+0x12c>
   29512:	6819      	ldr	r1, [r3, #0]
   29514:	2900      	cmp	r1, #0
   29516:	d0ed      	beq.n	294f4 <k_delayed_work_submit_to_queue+0x130>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29518:	b12a      	cbz	r2, 29526 <k_delayed_work_submit_to_queue+0x162>
	return (node == list->tail) ? NULL : node->next;
   2951a:	490e      	ldr	r1, [pc, #56]	; (29554 <k_delayed_work_submit_to_queue+0x190>)
   2951c:	6909      	ldr	r1, [r1, #16]
   2951e:	428a      	cmp	r2, r1
   29520:	d003      	beq.n	2952a <k_delayed_work_submit_to_queue+0x166>
   29522:	681b      	ldr	r3, [r3, #0]
   29524:	e7e7      	b.n	294f6 <k_delayed_work_submit_to_queue+0x132>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29526:	2300      	movs	r3, #0
   29528:	e7e5      	b.n	294f6 <k_delayed_work_submit_to_queue+0x132>
	return (node == list->tail) ? NULL : node->next;
   2952a:	2300      	movs	r3, #0
   2952c:	e7e3      	b.n	294f6 <k_delayed_work_submit_to_queue+0x132>
	node->next = list;
   2952e:	4b0a      	ldr	r3, [pc, #40]	; (29558 <k_delayed_work_submit_to_queue+0x194>)
   29530:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   29532:	685a      	ldr	r2, [r3, #4]
   29534:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   29536:	685a      	ldr	r2, [r3, #4]
   29538:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2953a:	605d      	str	r5, [r3, #4]
   2953c:	2000      	movs	r0, #0
   2953e:	f387 8811 	msr	BASEPRI, r7
}
   29542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EADDRINUSE;
   29544:	f06f 006f 	mvn.w	r0, #111	; 0x6f
   29548:	e7f9      	b.n	2953e <k_delayed_work_submit_to_queue+0x17a>
	err = 0;
   2954a:	2000      	movs	r0, #0
   2954c:	e7f7      	b.n	2953e <k_delayed_work_submit_to_queue+0x17a>
   2954e:	bf00      	nop
   29550:	cccccccd 	.word	0xcccccccd
   29554:	20002678 	.word	0x20002678
   29558:	20002684 	.word	0x20002684

0002955c <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   2955c:	4770      	bx	lr
	...

00029560 <__locale_ctype_ptr_l>:
   29560:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   29564:	4770      	bx	lr
   29566:	bf00      	nop

00029568 <__locale_ctype_ptr>:
   29568:	4b04      	ldr	r3, [pc, #16]	; (2957c <__locale_ctype_ptr+0x14>)
   2956a:	4a05      	ldr	r2, [pc, #20]	; (29580 <__locale_ctype_ptr+0x18>)
   2956c:	681b      	ldr	r3, [r3, #0]
   2956e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   29570:	2b00      	cmp	r3, #0
   29572:	bf08      	it	eq
   29574:	4613      	moveq	r3, r2
   29576:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   2957a:	4770      	bx	lr
   2957c:	2000c5e8 	.word	0x2000c5e8
   29580:	2000c47c 	.word	0x2000c47c

00029584 <__ascii_mbtowc>:
   29584:	b082      	sub	sp, #8
   29586:	b149      	cbz	r1, 2959c <__ascii_mbtowc+0x18>
   29588:	b15a      	cbz	r2, 295a2 <__ascii_mbtowc+0x1e>
   2958a:	b16b      	cbz	r3, 295a8 <__ascii_mbtowc+0x24>
   2958c:	7813      	ldrb	r3, [r2, #0]
   2958e:	600b      	str	r3, [r1, #0]
   29590:	7812      	ldrb	r2, [r2, #0]
   29592:	1c10      	adds	r0, r2, #0
   29594:	bf18      	it	ne
   29596:	2001      	movne	r0, #1
   29598:	b002      	add	sp, #8
   2959a:	4770      	bx	lr
   2959c:	a901      	add	r1, sp, #4
   2959e:	2a00      	cmp	r2, #0
   295a0:	d1f3      	bne.n	2958a <__ascii_mbtowc+0x6>
   295a2:	4610      	mov	r0, r2
   295a4:	b002      	add	sp, #8
   295a6:	4770      	bx	lr
   295a8:	f06f 0001 	mvn.w	r0, #1
   295ac:	e7f4      	b.n	29598 <__ascii_mbtowc+0x14>
   295ae:	bf00      	nop

000295b0 <memcmp>:
   295b0:	2a03      	cmp	r2, #3
   295b2:	b470      	push	{r4, r5, r6}
   295b4:	d922      	bls.n	295fc <memcmp+0x4c>
   295b6:	ea40 0301 	orr.w	r3, r0, r1
   295ba:	079b      	lsls	r3, r3, #30
   295bc:	d011      	beq.n	295e2 <memcmp+0x32>
   295be:	7803      	ldrb	r3, [r0, #0]
   295c0:	780c      	ldrb	r4, [r1, #0]
   295c2:	42a3      	cmp	r3, r4
   295c4:	d11d      	bne.n	29602 <memcmp+0x52>
   295c6:	440a      	add	r2, r1
   295c8:	3101      	adds	r1, #1
   295ca:	e005      	b.n	295d8 <memcmp+0x28>
   295cc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   295d0:	f811 4b01 	ldrb.w	r4, [r1], #1
   295d4:	42a3      	cmp	r3, r4
   295d6:	d114      	bne.n	29602 <memcmp+0x52>
   295d8:	4291      	cmp	r1, r2
   295da:	d1f7      	bne.n	295cc <memcmp+0x1c>
   295dc:	2000      	movs	r0, #0
   295de:	bc70      	pop	{r4, r5, r6}
   295e0:	4770      	bx	lr
   295e2:	680d      	ldr	r5, [r1, #0]
   295e4:	6806      	ldr	r6, [r0, #0]
   295e6:	42ae      	cmp	r6, r5
   295e8:	460c      	mov	r4, r1
   295ea:	4603      	mov	r3, r0
   295ec:	f101 0104 	add.w	r1, r1, #4
   295f0:	f100 0004 	add.w	r0, r0, #4
   295f4:	d108      	bne.n	29608 <memcmp+0x58>
   295f6:	3a04      	subs	r2, #4
   295f8:	2a03      	cmp	r2, #3
   295fa:	d8f2      	bhi.n	295e2 <memcmp+0x32>
   295fc:	2a00      	cmp	r2, #0
   295fe:	d1de      	bne.n	295be <memcmp+0xe>
   29600:	e7ec      	b.n	295dc <memcmp+0x2c>
   29602:	1b18      	subs	r0, r3, r4
   29604:	bc70      	pop	{r4, r5, r6}
   29606:	4770      	bx	lr
   29608:	4621      	mov	r1, r4
   2960a:	4618      	mov	r0, r3
   2960c:	e7d7      	b.n	295be <memcmp+0xe>
   2960e:	bf00      	nop

00029610 <memmove>:
   29610:	4288      	cmp	r0, r1
   29612:	b5f0      	push	{r4, r5, r6, r7, lr}
   29614:	d90d      	bls.n	29632 <memmove+0x22>
   29616:	188b      	adds	r3, r1, r2
   29618:	4298      	cmp	r0, r3
   2961a:	d20a      	bcs.n	29632 <memmove+0x22>
   2961c:	1884      	adds	r4, r0, r2
   2961e:	2a00      	cmp	r2, #0
   29620:	d051      	beq.n	296c6 <memmove+0xb6>
   29622:	4622      	mov	r2, r4
   29624:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   29628:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2962c:	4299      	cmp	r1, r3
   2962e:	d1f9      	bne.n	29624 <memmove+0x14>
   29630:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29632:	2a0f      	cmp	r2, #15
   29634:	d948      	bls.n	296c8 <memmove+0xb8>
   29636:	ea41 0300 	orr.w	r3, r1, r0
   2963a:	079b      	lsls	r3, r3, #30
   2963c:	d146      	bne.n	296cc <memmove+0xbc>
   2963e:	f100 0410 	add.w	r4, r0, #16
   29642:	f101 0310 	add.w	r3, r1, #16
   29646:	4615      	mov	r5, r2
   29648:	f853 6c10 	ldr.w	r6, [r3, #-16]
   2964c:	f844 6c10 	str.w	r6, [r4, #-16]
   29650:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   29654:	f844 6c0c 	str.w	r6, [r4, #-12]
   29658:	f853 6c08 	ldr.w	r6, [r3, #-8]
   2965c:	f844 6c08 	str.w	r6, [r4, #-8]
   29660:	3d10      	subs	r5, #16
   29662:	f853 6c04 	ldr.w	r6, [r3, #-4]
   29666:	f844 6c04 	str.w	r6, [r4, #-4]
   2966a:	2d0f      	cmp	r5, #15
   2966c:	f103 0310 	add.w	r3, r3, #16
   29670:	f104 0410 	add.w	r4, r4, #16
   29674:	d8e8      	bhi.n	29648 <memmove+0x38>
   29676:	f1a2 0310 	sub.w	r3, r2, #16
   2967a:	f023 030f 	bic.w	r3, r3, #15
   2967e:	f002 0e0f 	and.w	lr, r2, #15
   29682:	3310      	adds	r3, #16
   29684:	f1be 0f03 	cmp.w	lr, #3
   29688:	4419      	add	r1, r3
   2968a:	4403      	add	r3, r0
   2968c:	d921      	bls.n	296d2 <memmove+0xc2>
   2968e:	1f1e      	subs	r6, r3, #4
   29690:	460d      	mov	r5, r1
   29692:	4674      	mov	r4, lr
   29694:	3c04      	subs	r4, #4
   29696:	f855 7b04 	ldr.w	r7, [r5], #4
   2969a:	f846 7f04 	str.w	r7, [r6, #4]!
   2969e:	2c03      	cmp	r4, #3
   296a0:	d8f8      	bhi.n	29694 <memmove+0x84>
   296a2:	f1ae 0404 	sub.w	r4, lr, #4
   296a6:	f024 0403 	bic.w	r4, r4, #3
   296aa:	3404      	adds	r4, #4
   296ac:	4421      	add	r1, r4
   296ae:	4423      	add	r3, r4
   296b0:	f002 0203 	and.w	r2, r2, #3
   296b4:	b162      	cbz	r2, 296d0 <memmove+0xc0>
   296b6:	3b01      	subs	r3, #1
   296b8:	440a      	add	r2, r1
   296ba:	f811 4b01 	ldrb.w	r4, [r1], #1
   296be:	f803 4f01 	strb.w	r4, [r3, #1]!
   296c2:	428a      	cmp	r2, r1
   296c4:	d1f9      	bne.n	296ba <memmove+0xaa>
   296c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   296c8:	4603      	mov	r3, r0
   296ca:	e7f3      	b.n	296b4 <memmove+0xa4>
   296cc:	4603      	mov	r3, r0
   296ce:	e7f2      	b.n	296b6 <memmove+0xa6>
   296d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   296d2:	4672      	mov	r2, lr
   296d4:	e7ee      	b.n	296b4 <memmove+0xa4>
   296d6:	bf00      	nop

000296d8 <memset>:
   296d8:	b470      	push	{r4, r5, r6}
   296da:	0786      	lsls	r6, r0, #30
   296dc:	d046      	beq.n	2976c <memset+0x94>
   296de:	1e54      	subs	r4, r2, #1
   296e0:	2a00      	cmp	r2, #0
   296e2:	d041      	beq.n	29768 <memset+0x90>
   296e4:	b2ca      	uxtb	r2, r1
   296e6:	4603      	mov	r3, r0
   296e8:	e002      	b.n	296f0 <memset+0x18>
   296ea:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   296ee:	d33b      	bcc.n	29768 <memset+0x90>
   296f0:	f803 2b01 	strb.w	r2, [r3], #1
   296f4:	079d      	lsls	r5, r3, #30
   296f6:	d1f8      	bne.n	296ea <memset+0x12>
   296f8:	2c03      	cmp	r4, #3
   296fa:	d92e      	bls.n	2975a <memset+0x82>
   296fc:	b2cd      	uxtb	r5, r1
   296fe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   29702:	2c0f      	cmp	r4, #15
   29704:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   29708:	d919      	bls.n	2973e <memset+0x66>
   2970a:	f103 0210 	add.w	r2, r3, #16
   2970e:	4626      	mov	r6, r4
   29710:	3e10      	subs	r6, #16
   29712:	2e0f      	cmp	r6, #15
   29714:	f842 5c10 	str.w	r5, [r2, #-16]
   29718:	f842 5c0c 	str.w	r5, [r2, #-12]
   2971c:	f842 5c08 	str.w	r5, [r2, #-8]
   29720:	f842 5c04 	str.w	r5, [r2, #-4]
   29724:	f102 0210 	add.w	r2, r2, #16
   29728:	d8f2      	bhi.n	29710 <memset+0x38>
   2972a:	f1a4 0210 	sub.w	r2, r4, #16
   2972e:	f022 020f 	bic.w	r2, r2, #15
   29732:	f004 040f 	and.w	r4, r4, #15
   29736:	3210      	adds	r2, #16
   29738:	2c03      	cmp	r4, #3
   2973a:	4413      	add	r3, r2
   2973c:	d90d      	bls.n	2975a <memset+0x82>
   2973e:	461e      	mov	r6, r3
   29740:	4622      	mov	r2, r4
   29742:	3a04      	subs	r2, #4
   29744:	2a03      	cmp	r2, #3
   29746:	f846 5b04 	str.w	r5, [r6], #4
   2974a:	d8fa      	bhi.n	29742 <memset+0x6a>
   2974c:	1f22      	subs	r2, r4, #4
   2974e:	f022 0203 	bic.w	r2, r2, #3
   29752:	3204      	adds	r2, #4
   29754:	4413      	add	r3, r2
   29756:	f004 0403 	and.w	r4, r4, #3
   2975a:	b12c      	cbz	r4, 29768 <memset+0x90>
   2975c:	b2c9      	uxtb	r1, r1
   2975e:	441c      	add	r4, r3
   29760:	f803 1b01 	strb.w	r1, [r3], #1
   29764:	429c      	cmp	r4, r3
   29766:	d1fb      	bne.n	29760 <memset+0x88>
   29768:	bc70      	pop	{r4, r5, r6}
   2976a:	4770      	bx	lr
   2976c:	4614      	mov	r4, r2
   2976e:	4603      	mov	r3, r0
   29770:	e7c2      	b.n	296f8 <memset+0x20>
   29772:	bf00      	nop

00029774 <snprintf>:
   29774:	b40c      	push	{r2, r3}
   29776:	b5f0      	push	{r4, r5, r6, r7, lr}
   29778:	4b23      	ldr	r3, [pc, #140]	; (29808 <snprintf+0x94>)
   2977a:	1e0c      	subs	r4, r1, #0
   2977c:	b09d      	sub	sp, #116	; 0x74
   2977e:	681d      	ldr	r5, [r3, #0]
   29780:	db3d      	blt.n	297fe <snprintf+0x8a>
   29782:	f44f 7302 	mov.w	r3, #520	; 0x208
   29786:	9002      	str	r0, [sp, #8]
   29788:	9006      	str	r0, [sp, #24]
   2978a:	f8ad 3014 	strh.w	r3, [sp, #20]
   2978e:	ae23      	add	r6, sp, #140	; 0x8c
   29790:	d017      	beq.n	297c2 <snprintf+0x4e>
   29792:	3c01      	subs	r4, #1
   29794:	9a22      	ldr	r2, [sp, #136]	; 0x88
   29796:	9404      	str	r4, [sp, #16]
   29798:	4633      	mov	r3, r6
   2979a:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2979e:	a902      	add	r1, sp, #8
   297a0:	4628      	mov	r0, r5
   297a2:	9407      	str	r4, [sp, #28]
   297a4:	9601      	str	r6, [sp, #4]
   297a6:	f8ad 7016 	strh.w	r7, [sp, #22]
   297aa:	f000 fd7f 	bl	2a2ac <_svfprintf_r>
   297ae:	1c42      	adds	r2, r0, #1
   297b0:	db1b      	blt.n	297ea <snprintf+0x76>
   297b2:	9b02      	ldr	r3, [sp, #8]
   297b4:	2200      	movs	r2, #0
   297b6:	701a      	strb	r2, [r3, #0]
   297b8:	b01d      	add	sp, #116	; 0x74
   297ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   297be:	b002      	add	sp, #8
   297c0:	4770      	bx	lr
   297c2:	4633      	mov	r3, r6
   297c4:	f64f 77ff 	movw	r7, #65535	; 0xffff
   297c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
   297ca:	9404      	str	r4, [sp, #16]
   297cc:	a902      	add	r1, sp, #8
   297ce:	4628      	mov	r0, r5
   297d0:	9407      	str	r4, [sp, #28]
   297d2:	9601      	str	r6, [sp, #4]
   297d4:	f8ad 7016 	strh.w	r7, [sp, #22]
   297d8:	f000 fd68 	bl	2a2ac <_svfprintf_r>
   297dc:	1c43      	adds	r3, r0, #1
   297de:	db07      	blt.n	297f0 <snprintf+0x7c>
   297e0:	b01d      	add	sp, #116	; 0x74
   297e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   297e6:	b002      	add	sp, #8
   297e8:	4770      	bx	lr
   297ea:	238b      	movs	r3, #139	; 0x8b
   297ec:	602b      	str	r3, [r5, #0]
   297ee:	e7e0      	b.n	297b2 <snprintf+0x3e>
   297f0:	238b      	movs	r3, #139	; 0x8b
   297f2:	602b      	str	r3, [r5, #0]
   297f4:	b01d      	add	sp, #116	; 0x74
   297f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   297fa:	b002      	add	sp, #8
   297fc:	4770      	bx	lr
   297fe:	238b      	movs	r3, #139	; 0x8b
   29800:	602b      	str	r3, [r5, #0]
   29802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29806:	e7eb      	b.n	297e0 <snprintf+0x6c>
   29808:	2000c5e8 	.word	0x2000c5e8

0002980c <strcat>:
   2980c:	0783      	lsls	r3, r0, #30
   2980e:	b510      	push	{r4, lr}
   29810:	4604      	mov	r4, r0
   29812:	d110      	bne.n	29836 <strcat+0x2a>
   29814:	6802      	ldr	r2, [r0, #0]
   29816:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2981a:	ea23 0302 	bic.w	r3, r3, r2
   2981e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   29822:	d108      	bne.n	29836 <strcat+0x2a>
   29824:	f850 2f04 	ldr.w	r2, [r0, #4]!
   29828:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2982c:	ea23 0302 	bic.w	r3, r3, r2
   29830:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   29834:	d0f6      	beq.n	29824 <strcat+0x18>
   29836:	7803      	ldrb	r3, [r0, #0]
   29838:	b11b      	cbz	r3, 29842 <strcat+0x36>
   2983a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2983e:	2b00      	cmp	r3, #0
   29840:	d1fb      	bne.n	2983a <strcat+0x2e>
   29842:	f000 f877 	bl	29934 <strcpy>
   29846:	4620      	mov	r0, r4
   29848:	bd10      	pop	{r4, pc}
   2984a:	bf00      	nop

0002984c <strchr>:
   2984c:	b2c9      	uxtb	r1, r1
   2984e:	2900      	cmp	r1, #0
   29850:	d041      	beq.n	298d6 <strchr+0x8a>
   29852:	0782      	lsls	r2, r0, #30
   29854:	b4f0      	push	{r4, r5, r6, r7}
   29856:	d067      	beq.n	29928 <strchr+0xdc>
   29858:	7803      	ldrb	r3, [r0, #0]
   2985a:	2b00      	cmp	r3, #0
   2985c:	d068      	beq.n	29930 <strchr+0xe4>
   2985e:	4299      	cmp	r1, r3
   29860:	d037      	beq.n	298d2 <strchr+0x86>
   29862:	1c43      	adds	r3, r0, #1
   29864:	e004      	b.n	29870 <strchr+0x24>
   29866:	f813 0b01 	ldrb.w	r0, [r3], #1
   2986a:	b390      	cbz	r0, 298d2 <strchr+0x86>
   2986c:	4281      	cmp	r1, r0
   2986e:	d02f      	beq.n	298d0 <strchr+0x84>
   29870:	079a      	lsls	r2, r3, #30
   29872:	461c      	mov	r4, r3
   29874:	d1f7      	bne.n	29866 <strchr+0x1a>
   29876:	6825      	ldr	r5, [r4, #0]
   29878:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
   2987c:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
   29880:	ea83 0605 	eor.w	r6, r3, r5
   29884:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
   29888:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   2988c:	ea20 0006 	bic.w	r0, r0, r6
   29890:	ea22 0205 	bic.w	r2, r2, r5
   29894:	4302      	orrs	r2, r0
   29896:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2989a:	d111      	bne.n	298c0 <strchr+0x74>
   2989c:	4620      	mov	r0, r4
   2989e:	f850 6f04 	ldr.w	r6, [r0, #4]!
   298a2:	ea83 0706 	eor.w	r7, r3, r6
   298a6:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
   298aa:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
   298ae:	ea25 0507 	bic.w	r5, r5, r7
   298b2:	ea22 0206 	bic.w	r2, r2, r6
   298b6:	432a      	orrs	r2, r5
   298b8:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   298bc:	d0ef      	beq.n	2989e <strchr+0x52>
   298be:	4604      	mov	r4, r0
   298c0:	7820      	ldrb	r0, [r4, #0]
   298c2:	b918      	cbnz	r0, 298cc <strchr+0x80>
   298c4:	e005      	b.n	298d2 <strchr+0x86>
   298c6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   298ca:	b110      	cbz	r0, 298d2 <strchr+0x86>
   298cc:	4281      	cmp	r1, r0
   298ce:	d1fa      	bne.n	298c6 <strchr+0x7a>
   298d0:	4620      	mov	r0, r4
   298d2:	bcf0      	pop	{r4, r5, r6, r7}
   298d4:	4770      	bx	lr
   298d6:	0783      	lsls	r3, r0, #30
   298d8:	d024      	beq.n	29924 <strchr+0xd8>
   298da:	7803      	ldrb	r3, [r0, #0]
   298dc:	2b00      	cmp	r3, #0
   298de:	d0f9      	beq.n	298d4 <strchr+0x88>
   298e0:	1c43      	adds	r3, r0, #1
   298e2:	e003      	b.n	298ec <strchr+0xa0>
   298e4:	7802      	ldrb	r2, [r0, #0]
   298e6:	3301      	adds	r3, #1
   298e8:	2a00      	cmp	r2, #0
   298ea:	d0f3      	beq.n	298d4 <strchr+0x88>
   298ec:	0799      	lsls	r1, r3, #30
   298ee:	4618      	mov	r0, r3
   298f0:	d1f8      	bne.n	298e4 <strchr+0x98>
   298f2:	6819      	ldr	r1, [r3, #0]
   298f4:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   298f8:	ea22 0201 	bic.w	r2, r2, r1
   298fc:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   29900:	d108      	bne.n	29914 <strchr+0xc8>
   29902:	f853 1f04 	ldr.w	r1, [r3, #4]!
   29906:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2990a:	ea22 0201 	bic.w	r2, r2, r1
   2990e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   29912:	d0f6      	beq.n	29902 <strchr+0xb6>
   29914:	781a      	ldrb	r2, [r3, #0]
   29916:	4618      	mov	r0, r3
   29918:	b142      	cbz	r2, 2992c <strchr+0xe0>
   2991a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2991e:	2b00      	cmp	r3, #0
   29920:	d1fb      	bne.n	2991a <strchr+0xce>
   29922:	4770      	bx	lr
   29924:	4603      	mov	r3, r0
   29926:	e7e4      	b.n	298f2 <strchr+0xa6>
   29928:	4604      	mov	r4, r0
   2992a:	e7a4      	b.n	29876 <strchr+0x2a>
   2992c:	4618      	mov	r0, r3
   2992e:	4770      	bx	lr
   29930:	4618      	mov	r0, r3
   29932:	e7ce      	b.n	298d2 <strchr+0x86>

00029934 <strcpy>:
   29934:	ea80 0201 	eor.w	r2, r0, r1
   29938:	4684      	mov	ip, r0
   2993a:	f012 0f03 	tst.w	r2, #3
   2993e:	d14f      	bne.n	299e0 <strcpy+0xac>
   29940:	f011 0f03 	tst.w	r1, #3
   29944:	d132      	bne.n	299ac <strcpy+0x78>
   29946:	f84d 4d04 	str.w	r4, [sp, #-4]!
   2994a:	f011 0f04 	tst.w	r1, #4
   2994e:	f851 3b04 	ldr.w	r3, [r1], #4
   29952:	d00b      	beq.n	2996c <strcpy+0x38>
   29954:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   29958:	439a      	bics	r2, r3
   2995a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2995e:	bf04      	itt	eq
   29960:	f84c 3b04 	streq.w	r3, [ip], #4
   29964:	f851 3b04 	ldreq.w	r3, [r1], #4
   29968:	d116      	bne.n	29998 <strcpy+0x64>
   2996a:	bf00      	nop
   2996c:	f851 4b04 	ldr.w	r4, [r1], #4
   29970:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   29974:	439a      	bics	r2, r3
   29976:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2997a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   2997e:	d10b      	bne.n	29998 <strcpy+0x64>
   29980:	f84c 3b04 	str.w	r3, [ip], #4
   29984:	43a2      	bics	r2, r4
   29986:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2998a:	bf04      	itt	eq
   2998c:	f851 3b04 	ldreq.w	r3, [r1], #4
   29990:	f84c 4b04 	streq.w	r4, [ip], #4
   29994:	d0ea      	beq.n	2996c <strcpy+0x38>
   29996:	4623      	mov	r3, r4
   29998:	f80c 3b01 	strb.w	r3, [ip], #1
   2999c:	f013 0fff 	tst.w	r3, #255	; 0xff
   299a0:	ea4f 2333 	mov.w	r3, r3, ror #8
   299a4:	d1f8      	bne.n	29998 <strcpy+0x64>
   299a6:	f85d 4b04 	ldr.w	r4, [sp], #4
   299aa:	4770      	bx	lr
   299ac:	f011 0f01 	tst.w	r1, #1
   299b0:	d006      	beq.n	299c0 <strcpy+0x8c>
   299b2:	f811 2b01 	ldrb.w	r2, [r1], #1
   299b6:	f80c 2b01 	strb.w	r2, [ip], #1
   299ba:	2a00      	cmp	r2, #0
   299bc:	bf08      	it	eq
   299be:	4770      	bxeq	lr
   299c0:	f011 0f02 	tst.w	r1, #2
   299c4:	d0bf      	beq.n	29946 <strcpy+0x12>
   299c6:	f831 2b02 	ldrh.w	r2, [r1], #2
   299ca:	f012 0fff 	tst.w	r2, #255	; 0xff
   299ce:	bf16      	itet	ne
   299d0:	f82c 2b02 	strhne.w	r2, [ip], #2
   299d4:	f88c 2000 	strbeq.w	r2, [ip]
   299d8:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   299dc:	d1b3      	bne.n	29946 <strcpy+0x12>
   299de:	4770      	bx	lr
   299e0:	f811 2b01 	ldrb.w	r2, [r1], #1
   299e4:	f80c 2b01 	strb.w	r2, [ip], #1
   299e8:	2a00      	cmp	r2, #0
   299ea:	d1f9      	bne.n	299e0 <strcpy+0xac>
   299ec:	4770      	bx	lr
   299ee:	bf00      	nop

000299f0 <strncmp>:
   299f0:	2a00      	cmp	r2, #0
   299f2:	d041      	beq.n	29a78 <strncmp+0x88>
   299f4:	ea40 0301 	orr.w	r3, r0, r1
   299f8:	f013 0303 	ands.w	r3, r3, #3
   299fc:	b4f0      	push	{r4, r5, r6, r7}
   299fe:	d125      	bne.n	29a4c <strncmp+0x5c>
   29a00:	2a03      	cmp	r2, #3
   29a02:	d923      	bls.n	29a4c <strncmp+0x5c>
   29a04:	6804      	ldr	r4, [r0, #0]
   29a06:	680d      	ldr	r5, [r1, #0]
   29a08:	42ac      	cmp	r4, r5
   29a0a:	d11f      	bne.n	29a4c <strncmp+0x5c>
   29a0c:	3a04      	subs	r2, #4
   29a0e:	d038      	beq.n	29a82 <strncmp+0x92>
   29a10:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   29a14:	ea25 0404 	bic.w	r4, r5, r4
   29a18:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   29a1c:	d12e      	bne.n	29a7c <strncmp+0x8c>
   29a1e:	3004      	adds	r0, #4
   29a20:	3104      	adds	r1, #4
   29a22:	e00f      	b.n	29a44 <strncmp+0x54>
   29a24:	f850 3b04 	ldr.w	r3, [r0], #4
   29a28:	680e      	ldr	r6, [r1, #0]
   29a2a:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   29a2e:	42b3      	cmp	r3, r6
   29a30:	ea24 0403 	bic.w	r4, r4, r3
   29a34:	f101 0104 	add.w	r1, r1, #4
   29a38:	d126      	bne.n	29a88 <strncmp+0x98>
   29a3a:	3a04      	subs	r2, #4
   29a3c:	d021      	beq.n	29a82 <strncmp+0x92>
   29a3e:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   29a42:	d11b      	bne.n	29a7c <strncmp+0x8c>
   29a44:	2a03      	cmp	r2, #3
   29a46:	4607      	mov	r7, r0
   29a48:	460d      	mov	r5, r1
   29a4a:	d8eb      	bhi.n	29a24 <strncmp+0x34>
   29a4c:	7805      	ldrb	r5, [r0, #0]
   29a4e:	780c      	ldrb	r4, [r1, #0]
   29a50:	42ac      	cmp	r4, r5
   29a52:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   29a56:	d11a      	bne.n	29a8e <strncmp+0x9e>
   29a58:	b183      	cbz	r3, 29a7c <strncmp+0x8c>
   29a5a:	b914      	cbnz	r4, 29a62 <strncmp+0x72>
   29a5c:	e00e      	b.n	29a7c <strncmp+0x8c>
   29a5e:	b16b      	cbz	r3, 29a7c <strncmp+0x8c>
   29a60:	b17a      	cbz	r2, 29a82 <strncmp+0x92>
   29a62:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   29a66:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   29a6a:	42a2      	cmp	r2, r4
   29a6c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   29a70:	d0f5      	beq.n	29a5e <strncmp+0x6e>
   29a72:	1b10      	subs	r0, r2, r4
   29a74:	bcf0      	pop	{r4, r5, r6, r7}
   29a76:	4770      	bx	lr
   29a78:	4610      	mov	r0, r2
   29a7a:	4770      	bx	lr
   29a7c:	2000      	movs	r0, #0
   29a7e:	bcf0      	pop	{r4, r5, r6, r7}
   29a80:	4770      	bx	lr
   29a82:	4610      	mov	r0, r2
   29a84:	bcf0      	pop	{r4, r5, r6, r7}
   29a86:	4770      	bx	lr
   29a88:	4629      	mov	r1, r5
   29a8a:	4638      	mov	r0, r7
   29a8c:	e7de      	b.n	29a4c <strncmp+0x5c>
   29a8e:	462a      	mov	r2, r5
   29a90:	e7ef      	b.n	29a72 <strncmp+0x82>
   29a92:	bf00      	nop

00029a94 <strncpy>:
   29a94:	ea40 0301 	orr.w	r3, r0, r1
   29a98:	f013 0f03 	tst.w	r3, #3
   29a9c:	b470      	push	{r4, r5, r6}
   29a9e:	4603      	mov	r3, r0
   29aa0:	d024      	beq.n	29aec <strncpy+0x58>
   29aa2:	b1a2      	cbz	r2, 29ace <strncpy+0x3a>
   29aa4:	780c      	ldrb	r4, [r1, #0]
   29aa6:	701c      	strb	r4, [r3, #0]
   29aa8:	3a01      	subs	r2, #1
   29aaa:	3301      	adds	r3, #1
   29aac:	3101      	adds	r1, #1
   29aae:	b13c      	cbz	r4, 29ac0 <strncpy+0x2c>
   29ab0:	b16a      	cbz	r2, 29ace <strncpy+0x3a>
   29ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
   29ab6:	f803 4b01 	strb.w	r4, [r3], #1
   29aba:	3a01      	subs	r2, #1
   29abc:	2c00      	cmp	r4, #0
   29abe:	d1f7      	bne.n	29ab0 <strncpy+0x1c>
   29ac0:	b12a      	cbz	r2, 29ace <strncpy+0x3a>
   29ac2:	441a      	add	r2, r3
   29ac4:	2100      	movs	r1, #0
   29ac6:	f803 1b01 	strb.w	r1, [r3], #1
   29aca:	429a      	cmp	r2, r3
   29acc:	d1fb      	bne.n	29ac6 <strncpy+0x32>
   29ace:	bc70      	pop	{r4, r5, r6}
   29ad0:	4770      	bx	lr
   29ad2:	460e      	mov	r6, r1
   29ad4:	f851 5b04 	ldr.w	r5, [r1], #4
   29ad8:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   29adc:	ea24 0405 	bic.w	r4, r4, r5
   29ae0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   29ae4:	d105      	bne.n	29af2 <strncpy+0x5e>
   29ae6:	f843 5b04 	str.w	r5, [r3], #4
   29aea:	3a04      	subs	r2, #4
   29aec:	2a03      	cmp	r2, #3
   29aee:	d8f0      	bhi.n	29ad2 <strncpy+0x3e>
   29af0:	e7d7      	b.n	29aa2 <strncpy+0xe>
   29af2:	4631      	mov	r1, r6
   29af4:	e7d6      	b.n	29aa4 <strncpy+0x10>
   29af6:	bf00      	nop

00029af8 <strrchr>:
   29af8:	b171      	cbz	r1, 29b18 <strrchr+0x20>
   29afa:	b538      	push	{r3, r4, r5, lr}
   29afc:	4603      	mov	r3, r0
   29afe:	460c      	mov	r4, r1
   29b00:	2500      	movs	r5, #0
   29b02:	e001      	b.n	29b08 <strrchr+0x10>
   29b04:	1c43      	adds	r3, r0, #1
   29b06:	4605      	mov	r5, r0
   29b08:	4618      	mov	r0, r3
   29b0a:	4621      	mov	r1, r4
   29b0c:	f7ff fe9e 	bl	2984c <strchr>
   29b10:	2800      	cmp	r0, #0
   29b12:	d1f7      	bne.n	29b04 <strrchr+0xc>
   29b14:	4628      	mov	r0, r5
   29b16:	bd38      	pop	{r3, r4, r5, pc}
   29b18:	f7ff be98 	b.w	2984c <strchr>

00029b1c <critical_factorization>:
   29b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29b20:	f04f 0e01 	mov.w	lr, #1
   29b24:	4674      	mov	r4, lr
   29b26:	2500      	movs	r5, #0
   29b28:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   29b2c:	192b      	adds	r3, r5, r4
   29b2e:	428b      	cmp	r3, r1
   29b30:	eb00 0706 	add.w	r7, r0, r6
   29b34:	d20d      	bcs.n	29b52 <critical_factorization+0x36>
   29b36:	5d3f      	ldrb	r7, [r7, r4]
   29b38:	f810 c003 	ldrb.w	ip, [r0, r3]
   29b3c:	45bc      	cmp	ip, r7
   29b3e:	d22d      	bcs.n	29b9c <critical_factorization+0x80>
   29b40:	461d      	mov	r5, r3
   29b42:	2401      	movs	r4, #1
   29b44:	eba3 0e06 	sub.w	lr, r3, r6
   29b48:	192b      	adds	r3, r5, r4
   29b4a:	428b      	cmp	r3, r1
   29b4c:	eb00 0706 	add.w	r7, r0, r6
   29b50:	d3f1      	bcc.n	29b36 <critical_factorization+0x1a>
   29b52:	f04f 0801 	mov.w	r8, #1
   29b56:	f8c2 e000 	str.w	lr, [r2]
   29b5a:	4644      	mov	r4, r8
   29b5c:	2500      	movs	r5, #0
   29b5e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   29b62:	192b      	adds	r3, r5, r4
   29b64:	4299      	cmp	r1, r3
   29b66:	eb00 0e07 	add.w	lr, r0, r7
   29b6a:	d90e      	bls.n	29b8a <critical_factorization+0x6e>
   29b6c:	f81e e004 	ldrb.w	lr, [lr, r4]
   29b70:	f810 c003 	ldrb.w	ip, [r0, r3]
   29b74:	45f4      	cmp	ip, lr
   29b76:	d918      	bls.n	29baa <critical_factorization+0x8e>
   29b78:	461d      	mov	r5, r3
   29b7a:	2401      	movs	r4, #1
   29b7c:	eba3 0807 	sub.w	r8, r3, r7
   29b80:	192b      	adds	r3, r5, r4
   29b82:	4299      	cmp	r1, r3
   29b84:	eb00 0e07 	add.w	lr, r0, r7
   29b88:	d8f0      	bhi.n	29b6c <critical_factorization+0x50>
   29b8a:	3701      	adds	r7, #1
   29b8c:	1c70      	adds	r0, r6, #1
   29b8e:	4287      	cmp	r7, r0
   29b90:	bf24      	itt	cs
   29b92:	f8c2 8000 	strcs.w	r8, [r2]
   29b96:	4638      	movcs	r0, r7
   29b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29b9c:	d00c      	beq.n	29bb8 <critical_factorization+0x9c>
   29b9e:	f04f 0e01 	mov.w	lr, #1
   29ba2:	462e      	mov	r6, r5
   29ba4:	4674      	mov	r4, lr
   29ba6:	4475      	add	r5, lr
   29ba8:	e7c0      	b.n	29b2c <critical_factorization+0x10>
   29baa:	d00b      	beq.n	29bc4 <critical_factorization+0xa8>
   29bac:	f04f 0801 	mov.w	r8, #1
   29bb0:	462f      	mov	r7, r5
   29bb2:	4644      	mov	r4, r8
   29bb4:	4445      	add	r5, r8
   29bb6:	e7d4      	b.n	29b62 <critical_factorization+0x46>
   29bb8:	4574      	cmp	r4, lr
   29bba:	bf12      	itee	ne
   29bbc:	3401      	addne	r4, #1
   29bbe:	461d      	moveq	r5, r3
   29bc0:	2401      	moveq	r4, #1
   29bc2:	e7b3      	b.n	29b2c <critical_factorization+0x10>
   29bc4:	4544      	cmp	r4, r8
   29bc6:	bf12      	itee	ne
   29bc8:	3401      	addne	r4, #1
   29bca:	461d      	moveq	r5, r3
   29bcc:	2401      	moveq	r4, #1
   29bce:	e7c8      	b.n	29b62 <critical_factorization+0x46>

00029bd0 <two_way_long_needle>:
   29bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29bd4:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
   29bd8:	4616      	mov	r6, r2
   29bda:	4605      	mov	r5, r0
   29bdc:	468b      	mov	fp, r1
   29bde:	4610      	mov	r0, r2
   29be0:	4619      	mov	r1, r3
   29be2:	aa03      	add	r2, sp, #12
   29be4:	461c      	mov	r4, r3
   29be6:	f7ff ff99 	bl	29b1c <critical_factorization>
   29bea:	ab03      	add	r3, sp, #12
   29bec:	4681      	mov	r9, r0
   29bee:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
   29bf2:	f843 4f04 	str.w	r4, [r3, #4]!
   29bf6:	4293      	cmp	r3, r2
   29bf8:	d1fb      	bne.n	29bf2 <two_way_long_needle+0x22>
   29bfa:	b14c      	cbz	r4, 29c10 <two_way_long_needle+0x40>
   29bfc:	1e63      	subs	r3, r4, #1
   29bfe:	1e72      	subs	r2, r6, #1
   29c00:	a804      	add	r0, sp, #16
   29c02:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   29c06:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   29c0a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   29c0e:	d2f8      	bcs.n	29c02 <two_way_long_needle+0x32>
   29c10:	9903      	ldr	r1, [sp, #12]
   29c12:	464a      	mov	r2, r9
   29c14:	4431      	add	r1, r6
   29c16:	4630      	mov	r0, r6
   29c18:	f7ff fcca 	bl	295b0 <memcmp>
   29c1c:	2800      	cmp	r0, #0
   29c1e:	d16f      	bne.n	29d00 <two_way_long_needle+0x130>
   29c20:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   29c24:	9300      	str	r3, [sp, #0]
   29c26:	18f3      	adds	r3, r6, r3
   29c28:	4682      	mov	sl, r0
   29c2a:	9301      	str	r3, [sp, #4]
   29c2c:	4623      	mov	r3, r4
   29c2e:	4680      	mov	r8, r0
   29c30:	4654      	mov	r4, sl
   29c32:	4658      	mov	r0, fp
   29c34:	469a      	mov	sl, r3
   29c36:	eb08 070a 	add.w	r7, r8, sl
   29c3a:	1a3a      	subs	r2, r7, r0
   29c3c:	2100      	movs	r1, #0
   29c3e:	4428      	add	r0, r5
   29c40:	f7d6 faee 	bl	220 <memchr>
   29c44:	2800      	cmp	r0, #0
   29c46:	d156      	bne.n	29cf6 <two_way_long_needle+0x126>
   29c48:	2f00      	cmp	r7, #0
   29c4a:	d054      	beq.n	29cf6 <two_way_long_needle+0x126>
   29c4c:	19eb      	adds	r3, r5, r7
   29c4e:	aa04      	add	r2, sp, #16
   29c50:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   29c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   29c58:	b14b      	cbz	r3, 29c6e <two_way_long_needle+0x9e>
   29c5a:	b124      	cbz	r4, 29c66 <two_way_long_needle+0x96>
   29c5c:	9a03      	ldr	r2, [sp, #12]
   29c5e:	4293      	cmp	r3, r2
   29c60:	d201      	bcs.n	29c66 <two_way_long_needle+0x96>
   29c62:	ebaa 0302 	sub.w	r3, sl, r2
   29c66:	4498      	add	r8, r3
   29c68:	2400      	movs	r4, #0
   29c6a:	4638      	mov	r0, r7
   29c6c:	e7e3      	b.n	29c36 <two_way_long_needle+0x66>
   29c6e:	454c      	cmp	r4, r9
   29c70:	4623      	mov	r3, r4
   29c72:	f10a 3eff 	add.w	lr, sl, #4294967295	; 0xffffffff
   29c76:	bf38      	it	cc
   29c78:	464b      	movcc	r3, r9
   29c7a:	4573      	cmp	r3, lr
   29c7c:	d213      	bcs.n	29ca6 <two_way_long_needle+0xd6>
   29c7e:	eb08 0203 	add.w	r2, r8, r3
   29c82:	f816 c003 	ldrb.w	ip, [r6, r3]
   29c86:	5ca8      	ldrb	r0, [r5, r2]
   29c88:	4584      	cmp	ip, r0
   29c8a:	442a      	add	r2, r5
   29c8c:	eb06 0103 	add.w	r1, r6, r3
   29c90:	d006      	beq.n	29ca0 <two_way_long_needle+0xd0>
   29c92:	e02c      	b.n	29cee <two_way_long_needle+0x11e>
   29c94:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   29c98:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   29c9c:	4584      	cmp	ip, r0
   29c9e:	d126      	bne.n	29cee <two_way_long_needle+0x11e>
   29ca0:	3301      	adds	r3, #1
   29ca2:	4573      	cmp	r3, lr
   29ca4:	d3f6      	bcc.n	29c94 <two_way_long_needle+0xc4>
   29ca6:	454c      	cmp	r4, r9
   29ca8:	9900      	ldr	r1, [sp, #0]
   29caa:	f080 8089 	bcs.w	29dc0 <two_way_long_needle+0x1f0>
   29cae:	9b00      	ldr	r3, [sp, #0]
   29cb0:	eb08 0203 	add.w	r2, r8, r3
   29cb4:	9b01      	ldr	r3, [sp, #4]
   29cb6:	5ca8      	ldrb	r0, [r5, r2]
   29cb8:	781b      	ldrb	r3, [r3, #0]
   29cba:	4298      	cmp	r0, r3
   29cbc:	442a      	add	r2, r5
   29cbe:	d17f      	bne.n	29dc0 <two_way_long_needle+0x1f0>
   29cc0:	9801      	ldr	r0, [sp, #4]
   29cc2:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   29cc6:	e006      	b.n	29cd6 <two_way_long_needle+0x106>
   29cc8:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   29ccc:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   29cd0:	45f4      	cmp	ip, lr
   29cd2:	d103      	bne.n	29cdc <two_way_long_needle+0x10c>
   29cd4:	4619      	mov	r1, r3
   29cd6:	1e4b      	subs	r3, r1, #1
   29cd8:	459b      	cmp	fp, r3
   29cda:	d1f5      	bne.n	29cc8 <two_way_long_needle+0xf8>
   29cdc:	3401      	adds	r4, #1
   29cde:	428c      	cmp	r4, r1
   29ce0:	d870      	bhi.n	29dc4 <two_way_long_needle+0x1f4>
   29ce2:	9c03      	ldr	r4, [sp, #12]
   29ce4:	4638      	mov	r0, r7
   29ce6:	44a0      	add	r8, r4
   29ce8:	ebaa 0404 	sub.w	r4, sl, r4
   29cec:	e7a3      	b.n	29c36 <two_way_long_needle+0x66>
   29cee:	f1c9 0201 	rsb	r2, r9, #1
   29cf2:	4490      	add	r8, r2
   29cf4:	e7b7      	b.n	29c66 <two_way_long_needle+0x96>
   29cf6:	2000      	movs	r0, #0
   29cf8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   29cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29d00:	eba4 0309 	sub.w	r3, r4, r9
   29d04:	454b      	cmp	r3, r9
   29d06:	bf38      	it	cc
   29d08:	464b      	movcc	r3, r9
   29d0a:	3301      	adds	r3, #1
   29d0c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   29d10:	9303      	str	r3, [sp, #12]
   29d12:	eb06 0308 	add.w	r3, r6, r8
   29d16:	4658      	mov	r0, fp
   29d18:	f04f 0a00 	mov.w	sl, #0
   29d1c:	46cb      	mov	fp, r9
   29d1e:	4699      	mov	r9, r3
   29d20:	eb0a 0704 	add.w	r7, sl, r4
   29d24:	1a3a      	subs	r2, r7, r0
   29d26:	2100      	movs	r1, #0
   29d28:	4428      	add	r0, r5
   29d2a:	f7d6 fa79 	bl	220 <memchr>
   29d2e:	2800      	cmp	r0, #0
   29d30:	d1e1      	bne.n	29cf6 <two_way_long_needle+0x126>
   29d32:	2f00      	cmp	r7, #0
   29d34:	d0df      	beq.n	29cf6 <two_way_long_needle+0x126>
   29d36:	19eb      	adds	r3, r5, r7
   29d38:	aa04      	add	r2, sp, #16
   29d3a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   29d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   29d42:	bba3      	cbnz	r3, 29dae <two_way_long_needle+0x1de>
   29d44:	1e61      	subs	r1, r4, #1
   29d46:	458b      	cmp	fp, r1
   29d48:	d215      	bcs.n	29d76 <two_way_long_needle+0x1a6>
   29d4a:	eb0a 020b 	add.w	r2, sl, fp
   29d4e:	f816 300b 	ldrb.w	r3, [r6, fp]
   29d52:	f815 e002 	ldrb.w	lr, [r5, r2]
   29d56:	459e      	cmp	lr, r3
   29d58:	442a      	add	r2, r5
   29d5a:	eb06 000b 	add.w	r0, r6, fp
   29d5e:	465b      	mov	r3, fp
   29d60:	d006      	beq.n	29d70 <two_way_long_needle+0x1a0>
   29d62:	e027      	b.n	29db4 <two_way_long_needle+0x1e4>
   29d64:	f810 cf01 	ldrb.w	ip, [r0, #1]!
   29d68:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   29d6c:	45f4      	cmp	ip, lr
   29d6e:	d121      	bne.n	29db4 <two_way_long_needle+0x1e4>
   29d70:	3301      	adds	r3, #1
   29d72:	428b      	cmp	r3, r1
   29d74:	d3f6      	bcc.n	29d64 <two_way_long_needle+0x194>
   29d76:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   29d7a:	d011      	beq.n	29da0 <two_way_long_needle+0x1d0>
   29d7c:	eb0a 0208 	add.w	r2, sl, r8
   29d80:	f899 1000 	ldrb.w	r1, [r9]
   29d84:	5cab      	ldrb	r3, [r5, r2]
   29d86:	4299      	cmp	r1, r3
   29d88:	442a      	add	r2, r5
   29d8a:	d10f      	bne.n	29dac <two_way_long_needle+0x1dc>
   29d8c:	464b      	mov	r3, r9
   29d8e:	e005      	b.n	29d9c <two_way_long_needle+0x1cc>
   29d90:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   29d94:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   29d98:	4288      	cmp	r0, r1
   29d9a:	d107      	bne.n	29dac <two_way_long_needle+0x1dc>
   29d9c:	42b3      	cmp	r3, r6
   29d9e:	d1f7      	bne.n	29d90 <two_way_long_needle+0x1c0>
   29da0:	eb05 000a 	add.w	r0, r5, sl
   29da4:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   29da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29dac:	9b03      	ldr	r3, [sp, #12]
   29dae:	449a      	add	sl, r3
   29db0:	4638      	mov	r0, r7
   29db2:	e7b5      	b.n	29d20 <two_way_long_needle+0x150>
   29db4:	f1cb 0201 	rsb	r2, fp, #1
   29db8:	4492      	add	sl, r2
   29dba:	449a      	add	sl, r3
   29dbc:	4638      	mov	r0, r7
   29dbe:	e7af      	b.n	29d20 <two_way_long_needle+0x150>
   29dc0:	4649      	mov	r1, r9
   29dc2:	e78b      	b.n	29cdc <two_way_long_needle+0x10c>
   29dc4:	eb05 0008 	add.w	r0, r5, r8
   29dc8:	e796      	b.n	29cf8 <two_way_long_needle+0x128>
   29dca:	bf00      	nop

00029dcc <strstr>:
   29dcc:	7802      	ldrb	r2, [r0, #0]
   29dce:	2a00      	cmp	r2, #0
   29dd0:	f000 8101 	beq.w	29fd6 <strstr+0x20a>
   29dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29dd8:	f891 8000 	ldrb.w	r8, [r1]
   29ddc:	b085      	sub	sp, #20
   29dde:	4644      	mov	r4, r8
   29de0:	f1b8 0f00 	cmp.w	r8, #0
   29de4:	d016      	beq.n	29e14 <strstr+0x48>
   29de6:	4686      	mov	lr, r0
   29de8:	f101 0c01 	add.w	ip, r1, #1
   29dec:	2701      	movs	r7, #1
   29dee:	e003      	b.n	29df8 <strstr+0x2c>
   29df0:	f813 4b01 	ldrb.w	r4, [r3], #1
   29df4:	b16c      	cbz	r4, 29e12 <strstr+0x46>
   29df6:	469c      	mov	ip, r3
   29df8:	42a2      	cmp	r2, r4
   29dfa:	bf14      	ite	ne
   29dfc:	2700      	movne	r7, #0
   29dfe:	f007 0701 	andeq.w	r7, r7, #1
   29e02:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
   29e06:	4663      	mov	r3, ip
   29e08:	2a00      	cmp	r2, #0
   29e0a:	d1f1      	bne.n	29df0 <strstr+0x24>
   29e0c:	f89c 3000 	ldrb.w	r3, [ip]
   29e10:	b9fb      	cbnz	r3, 29e52 <strstr+0x86>
   29e12:	b117      	cbz	r7, 29e1a <strstr+0x4e>
   29e14:	b005      	add	sp, #20
   29e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e1a:	460e      	mov	r6, r1
   29e1c:	4605      	mov	r5, r0
   29e1e:	4641      	mov	r1, r8
   29e20:	3001      	adds	r0, #1
   29e22:	ebac 0406 	sub.w	r4, ip, r6
   29e26:	f7ff fd11 	bl	2984c <strchr>
   29e2a:	4607      	mov	r7, r0
   29e2c:	b188      	cbz	r0, 29e52 <strstr+0x86>
   29e2e:	2c01      	cmp	r4, #1
   29e30:	d0f0      	beq.n	29e14 <strstr+0x48>
   29e32:	1928      	adds	r0, r5, r4
   29e34:	4287      	cmp	r7, r0
   29e36:	bf94      	ite	ls
   29e38:	1bc1      	subls	r1, r0, r7
   29e3a:	2101      	movhi	r1, #1
   29e3c:	2c1f      	cmp	r4, #31
   29e3e:	468b      	mov	fp, r1
   29e40:	d90b      	bls.n	29e5a <strstr+0x8e>
   29e42:	4623      	mov	r3, r4
   29e44:	4632      	mov	r2, r6
   29e46:	4638      	mov	r0, r7
   29e48:	f7ff fec2 	bl	29bd0 <two_way_long_needle>
   29e4c:	b005      	add	sp, #20
   29e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e52:	2000      	movs	r0, #0
   29e54:	b005      	add	sp, #20
   29e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e5a:	aa03      	add	r2, sp, #12
   29e5c:	4621      	mov	r1, r4
   29e5e:	4630      	mov	r0, r6
   29e60:	f7ff fe5c 	bl	29b1c <critical_factorization>
   29e64:	9903      	ldr	r1, [sp, #12]
   29e66:	4680      	mov	r8, r0
   29e68:	4602      	mov	r2, r0
   29e6a:	4431      	add	r1, r6
   29e6c:	4630      	mov	r0, r6
   29e6e:	f7ff fb9f 	bl	295b0 <memcmp>
   29e72:	2800      	cmp	r0, #0
   29e74:	d157      	bne.n	29f26 <strstr+0x15a>
   29e76:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   29e7a:	9300      	str	r3, [sp, #0]
   29e7c:	18f3      	adds	r3, r6, r3
   29e7e:	4681      	mov	r9, r0
   29e80:	4605      	mov	r5, r0
   29e82:	9301      	str	r3, [sp, #4]
   29e84:	4658      	mov	r0, fp
   29e86:	46b2      	mov	sl, r6
   29e88:	1966      	adds	r6, r4, r5
   29e8a:	1a32      	subs	r2, r6, r0
   29e8c:	2100      	movs	r1, #0
   29e8e:	4438      	add	r0, r7
   29e90:	f7d6 f9c6 	bl	220 <memchr>
   29e94:	2800      	cmp	r0, #0
   29e96:	d1dc      	bne.n	29e52 <strstr+0x86>
   29e98:	2e00      	cmp	r6, #0
   29e9a:	d0da      	beq.n	29e52 <strstr+0x86>
   29e9c:	45c8      	cmp	r8, r9
   29e9e:	4643      	mov	r3, r8
   29ea0:	bf38      	it	cc
   29ea2:	464b      	movcc	r3, r9
   29ea4:	429c      	cmp	r4, r3
   29ea6:	d912      	bls.n	29ece <strstr+0x102>
   29ea8:	195a      	adds	r2, r3, r5
   29eaa:	f81a 1003 	ldrb.w	r1, [sl, r3]
   29eae:	5cb8      	ldrb	r0, [r7, r2]
   29eb0:	4281      	cmp	r1, r0
   29eb2:	443a      	add	r2, r7
   29eb4:	eb0a 0e03 	add.w	lr, sl, r3
   29eb8:	d006      	beq.n	29ec8 <strstr+0xfc>
   29eba:	e02c      	b.n	29f16 <strstr+0x14a>
   29ebc:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   29ec0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   29ec4:	4288      	cmp	r0, r1
   29ec6:	d126      	bne.n	29f16 <strstr+0x14a>
   29ec8:	3301      	adds	r3, #1
   29eca:	429c      	cmp	r4, r3
   29ecc:	d1f6      	bne.n	29ebc <strstr+0xf0>
   29ece:	45c8      	cmp	r8, r9
   29ed0:	9900      	ldr	r1, [sp, #0]
   29ed2:	f240 8083 	bls.w	29fdc <strstr+0x210>
   29ed6:	9b00      	ldr	r3, [sp, #0]
   29ed8:	18ea      	adds	r2, r5, r3
   29eda:	9b01      	ldr	r3, [sp, #4]
   29edc:	5cb8      	ldrb	r0, [r7, r2]
   29ede:	781b      	ldrb	r3, [r3, #0]
   29ee0:	4298      	cmp	r0, r3
   29ee2:	443a      	add	r2, r7
   29ee4:	d17a      	bne.n	29fdc <strstr+0x210>
   29ee6:	9801      	ldr	r0, [sp, #4]
   29ee8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
   29eec:	e006      	b.n	29efc <strstr+0x130>
   29eee:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   29ef2:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   29ef6:	45f4      	cmp	ip, lr
   29ef8:	d103      	bne.n	29f02 <strstr+0x136>
   29efa:	4619      	mov	r1, r3
   29efc:	1e4b      	subs	r3, r1, #1
   29efe:	455b      	cmp	r3, fp
   29f00:	d1f5      	bne.n	29eee <strstr+0x122>
   29f02:	f109 0901 	add.w	r9, r9, #1
   29f06:	4589      	cmp	r9, r1
   29f08:	d857      	bhi.n	29fba <strstr+0x1ee>
   29f0a:	9b03      	ldr	r3, [sp, #12]
   29f0c:	4630      	mov	r0, r6
   29f0e:	441d      	add	r5, r3
   29f10:	eba4 0903 	sub.w	r9, r4, r3
   29f14:	e7b8      	b.n	29e88 <strstr+0xbc>
   29f16:	f1c8 0201 	rsb	r2, r8, #1
   29f1a:	4415      	add	r5, r2
   29f1c:	441d      	add	r5, r3
   29f1e:	f04f 0900 	mov.w	r9, #0
   29f22:	4630      	mov	r0, r6
   29f24:	e7b0      	b.n	29e88 <strstr+0xbc>
   29f26:	eba4 0308 	sub.w	r3, r4, r8
   29f2a:	4543      	cmp	r3, r8
   29f2c:	bf38      	it	cc
   29f2e:	4643      	movcc	r3, r8
   29f30:	3301      	adds	r3, #1
   29f32:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
   29f36:	9303      	str	r3, [sp, #12]
   29f38:	eb06 0309 	add.w	r3, r6, r9
   29f3c:	4658      	mov	r0, fp
   29f3e:	2500      	movs	r5, #0
   29f40:	46bb      	mov	fp, r7
   29f42:	469a      	mov	sl, r3
   29f44:	1967      	adds	r7, r4, r5
   29f46:	1a3a      	subs	r2, r7, r0
   29f48:	2100      	movs	r1, #0
   29f4a:	4458      	add	r0, fp
   29f4c:	f7d6 f968 	bl	220 <memchr>
   29f50:	2800      	cmp	r0, #0
   29f52:	f47f af7e 	bne.w	29e52 <strstr+0x86>
   29f56:	2f00      	cmp	r7, #0
   29f58:	f43f af7b 	beq.w	29e52 <strstr+0x86>
   29f5c:	4544      	cmp	r4, r8
   29f5e:	d915      	bls.n	29f8c <strstr+0x1c0>
   29f60:	eb08 0205 	add.w	r2, r8, r5
   29f64:	f816 3008 	ldrb.w	r3, [r6, r8]
   29f68:	f81b 0002 	ldrb.w	r0, [fp, r2]
   29f6c:	4298      	cmp	r0, r3
   29f6e:	445a      	add	r2, fp
   29f70:	eb06 0108 	add.w	r1, r6, r8
   29f74:	4643      	mov	r3, r8
   29f76:	d006      	beq.n	29f86 <strstr+0x1ba>
   29f78:	e023      	b.n	29fc2 <strstr+0x1f6>
   29f7a:	f811 ef01 	ldrb.w	lr, [r1, #1]!
   29f7e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   29f82:	4586      	cmp	lr, r0
   29f84:	d11d      	bne.n	29fc2 <strstr+0x1f6>
   29f86:	3301      	adds	r3, #1
   29f88:	429c      	cmp	r4, r3
   29f8a:	d1f6      	bne.n	29f7a <strstr+0x1ae>
   29f8c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   29f90:	d012      	beq.n	29fb8 <strstr+0x1ec>
   29f92:	eb05 0209 	add.w	r2, r5, r9
   29f96:	f89a 3000 	ldrb.w	r3, [sl]
   29f9a:	f81b 1002 	ldrb.w	r1, [fp, r2]
   29f9e:	4299      	cmp	r1, r3
   29fa0:	445a      	add	r2, fp
   29fa2:	d114      	bne.n	29fce <strstr+0x202>
   29fa4:	4653      	mov	r3, sl
   29fa6:	e005      	b.n	29fb4 <strstr+0x1e8>
   29fa8:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   29fac:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   29fb0:	4288      	cmp	r0, r1
   29fb2:	d10c      	bne.n	29fce <strstr+0x202>
   29fb4:	42b3      	cmp	r3, r6
   29fb6:	d1f7      	bne.n	29fa8 <strstr+0x1dc>
   29fb8:	465f      	mov	r7, fp
   29fba:	1978      	adds	r0, r7, r5
   29fbc:	b005      	add	sp, #20
   29fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29fc2:	f1c8 0201 	rsb	r2, r8, #1
   29fc6:	4415      	add	r5, r2
   29fc8:	441d      	add	r5, r3
   29fca:	4638      	mov	r0, r7
   29fcc:	e7ba      	b.n	29f44 <strstr+0x178>
   29fce:	9b03      	ldr	r3, [sp, #12]
   29fd0:	4638      	mov	r0, r7
   29fd2:	441d      	add	r5, r3
   29fd4:	e7b6      	b.n	29f44 <strstr+0x178>
   29fd6:	780b      	ldrb	r3, [r1, #0]
   29fd8:	b913      	cbnz	r3, 29fe0 <strstr+0x214>
   29fda:	4770      	bx	lr
   29fdc:	4641      	mov	r1, r8
   29fde:	e790      	b.n	29f02 <strstr+0x136>
   29fe0:	2000      	movs	r0, #0
   29fe2:	4770      	bx	lr

00029fe4 <_strtol_l.isra.0>:
   29fe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29fe8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   29fec:	460f      	mov	r7, r1
   29fee:	4680      	mov	r8, r0
   29ff0:	4616      	mov	r6, r2
   29ff2:	461d      	mov	r5, r3
   29ff4:	468a      	mov	sl, r1
   29ff6:	e000      	b.n	29ffa <_strtol_l.isra.0+0x16>
   29ff8:	46a2      	mov	sl, r4
   29ffa:	4654      	mov	r4, sl
   29ffc:	4648      	mov	r0, r9
   29ffe:	f814 bb01 	ldrb.w	fp, [r4], #1
   2a002:	f7ff faad 	bl	29560 <__locale_ctype_ptr_l>
   2a006:	4458      	add	r0, fp
   2a008:	7842      	ldrb	r2, [r0, #1]
   2a00a:	f012 0208 	ands.w	r2, r2, #8
   2a00e:	d1f3      	bne.n	29ff8 <_strtol_l.isra.0+0x14>
   2a010:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   2a014:	d04f      	beq.n	2a0b6 <_strtol_l.isra.0+0xd2>
   2a016:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   2a01a:	bf04      	itt	eq
   2a01c:	f894 b000 	ldrbeq.w	fp, [r4]
   2a020:	f10a 0402 	addeq.w	r4, sl, #2
   2a024:	b11d      	cbz	r5, 2a02e <_strtol_l.isra.0+0x4a>
   2a026:	2d10      	cmp	r5, #16
   2a028:	d056      	beq.n	2a0d8 <_strtol_l.isra.0+0xf4>
   2a02a:	46ac      	mov	ip, r5
   2a02c:	e004      	b.n	2a038 <_strtol_l.isra.0+0x54>
   2a02e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2a032:	d060      	beq.n	2a0f6 <_strtol_l.isra.0+0x112>
   2a034:	250a      	movs	r5, #10
   2a036:	46ac      	mov	ip, r5
   2a038:	2a00      	cmp	r2, #0
   2a03a:	bf0c      	ite	eq
   2a03c:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   2a040:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   2a044:	2100      	movs	r1, #0
   2a046:	fbb9 fefc 	udiv	lr, r9, ip
   2a04a:	4608      	mov	r0, r1
   2a04c:	fb0c 9a1e 	mls	sl, ip, lr, r9
   2a050:	e005      	b.n	2a05e <_strtol_l.isra.0+0x7a>
   2a052:	d029      	beq.n	2a0a8 <_strtol_l.isra.0+0xc4>
   2a054:	fb0c 3000 	mla	r0, ip, r0, r3
   2a058:	2101      	movs	r1, #1
   2a05a:	f814 bb01 	ldrb.w	fp, [r4], #1
   2a05e:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   2a062:	2b09      	cmp	r3, #9
   2a064:	d905      	bls.n	2a072 <_strtol_l.isra.0+0x8e>
   2a066:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   2a06a:	2b19      	cmp	r3, #25
   2a06c:	d80b      	bhi.n	2a086 <_strtol_l.isra.0+0xa2>
   2a06e:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   2a072:	429d      	cmp	r5, r3
   2a074:	dd0f      	ble.n	2a096 <_strtol_l.isra.0+0xb2>
   2a076:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2a07a:	d0ee      	beq.n	2a05a <_strtol_l.isra.0+0x76>
   2a07c:	4586      	cmp	lr, r0
   2a07e:	d2e8      	bcs.n	2a052 <_strtol_l.isra.0+0x6e>
   2a080:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2a084:	e7e9      	b.n	2a05a <_strtol_l.isra.0+0x76>
   2a086:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   2a08a:	2b19      	cmp	r3, #25
   2a08c:	d803      	bhi.n	2a096 <_strtol_l.isra.0+0xb2>
   2a08e:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   2a092:	429d      	cmp	r5, r3
   2a094:	dcef      	bgt.n	2a076 <_strtol_l.isra.0+0x92>
   2a096:	1c4b      	adds	r3, r1, #1
   2a098:	d013      	beq.n	2a0c2 <_strtol_l.isra.0+0xde>
   2a09a:	b102      	cbz	r2, 2a09e <_strtol_l.isra.0+0xba>
   2a09c:	4240      	negs	r0, r0
   2a09e:	b146      	cbz	r6, 2a0b2 <_strtol_l.isra.0+0xce>
   2a0a0:	b9c1      	cbnz	r1, 2a0d4 <_strtol_l.isra.0+0xf0>
   2a0a2:	6037      	str	r7, [r6, #0]
   2a0a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a0a8:	459a      	cmp	sl, r3
   2a0aa:	dad3      	bge.n	2a054 <_strtol_l.isra.0+0x70>
   2a0ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2a0b0:	e7d3      	b.n	2a05a <_strtol_l.isra.0+0x76>
   2a0b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a0b6:	f894 b000 	ldrb.w	fp, [r4]
   2a0ba:	2201      	movs	r2, #1
   2a0bc:	f10a 0402 	add.w	r4, sl, #2
   2a0c0:	e7b0      	b.n	2a024 <_strtol_l.isra.0+0x40>
   2a0c2:	2322      	movs	r3, #34	; 0x22
   2a0c4:	f8c8 3000 	str.w	r3, [r8]
   2a0c8:	b1ee      	cbz	r6, 2a106 <_strtol_l.isra.0+0x122>
   2a0ca:	1e67      	subs	r7, r4, #1
   2a0cc:	4648      	mov	r0, r9
   2a0ce:	6037      	str	r7, [r6, #0]
   2a0d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a0d4:	4681      	mov	r9, r0
   2a0d6:	e7f8      	b.n	2a0ca <_strtol_l.isra.0+0xe6>
   2a0d8:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2a0dc:	d1a5      	bne.n	2a02a <_strtol_l.isra.0+0x46>
   2a0de:	7823      	ldrb	r3, [r4, #0]
   2a0e0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2a0e4:	2b58      	cmp	r3, #88	; 0x58
   2a0e6:	d1a0      	bne.n	2a02a <_strtol_l.isra.0+0x46>
   2a0e8:	f04f 0c10 	mov.w	ip, #16
   2a0ec:	f894 b001 	ldrb.w	fp, [r4, #1]
   2a0f0:	4665      	mov	r5, ip
   2a0f2:	3402      	adds	r4, #2
   2a0f4:	e7a0      	b.n	2a038 <_strtol_l.isra.0+0x54>
   2a0f6:	7823      	ldrb	r3, [r4, #0]
   2a0f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2a0fc:	2b58      	cmp	r3, #88	; 0x58
   2a0fe:	d0f3      	beq.n	2a0e8 <_strtol_l.isra.0+0x104>
   2a100:	2508      	movs	r5, #8
   2a102:	46ac      	mov	ip, r5
   2a104:	e798      	b.n	2a038 <_strtol_l.isra.0+0x54>
   2a106:	4648      	mov	r0, r9
   2a108:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a10c <strtol>:
   2a10c:	b530      	push	{r4, r5, lr}
   2a10e:	4c08      	ldr	r4, [pc, #32]	; (2a130 <strtol+0x24>)
   2a110:	4b08      	ldr	r3, [pc, #32]	; (2a134 <strtol+0x28>)
   2a112:	6825      	ldr	r5, [r4, #0]
   2a114:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2a116:	b083      	sub	sp, #12
   2a118:	2c00      	cmp	r4, #0
   2a11a:	bf08      	it	eq
   2a11c:	461c      	moveq	r4, r3
   2a11e:	9400      	str	r4, [sp, #0]
   2a120:	4613      	mov	r3, r2
   2a122:	460a      	mov	r2, r1
   2a124:	4601      	mov	r1, r0
   2a126:	4628      	mov	r0, r5
   2a128:	f7ff ff5c 	bl	29fe4 <_strtol_l.isra.0>
   2a12c:	b003      	add	sp, #12
   2a12e:	bd30      	pop	{r4, r5, pc}
   2a130:	2000c5e8 	.word	0x2000c5e8
   2a134:	2000c47c 	.word	0x2000c47c

0002a138 <_strtoul_l.isra.0>:
   2a138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a13c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2a140:	460e      	mov	r6, r1
   2a142:	4607      	mov	r7, r0
   2a144:	4615      	mov	r5, r2
   2a146:	4698      	mov	r8, r3
   2a148:	468a      	mov	sl, r1
   2a14a:	e000      	b.n	2a14e <_strtoul_l.isra.0+0x16>
   2a14c:	46a2      	mov	sl, r4
   2a14e:	4654      	mov	r4, sl
   2a150:	4648      	mov	r0, r9
   2a152:	f814 bb01 	ldrb.w	fp, [r4], #1
   2a156:	f7ff fa03 	bl	29560 <__locale_ctype_ptr_l>
   2a15a:	4458      	add	r0, fp
   2a15c:	7840      	ldrb	r0, [r0, #1]
   2a15e:	f010 0008 	ands.w	r0, r0, #8
   2a162:	d1f3      	bne.n	2a14c <_strtoul_l.isra.0+0x14>
   2a164:	4659      	mov	r1, fp
   2a166:	292d      	cmp	r1, #45	; 0x2d
   2a168:	d059      	beq.n	2a21e <_strtoul_l.isra.0+0xe6>
   2a16a:	292b      	cmp	r1, #43	; 0x2b
   2a16c:	bf04      	itt	eq
   2a16e:	7821      	ldrbeq	r1, [r4, #0]
   2a170:	f10a 0402 	addeq.w	r4, sl, #2
   2a174:	f1b8 0f00 	cmp.w	r8, #0
   2a178:	d00c      	beq.n	2a194 <_strtoul_l.isra.0+0x5c>
   2a17a:	f1b8 0f10 	cmp.w	r8, #16
   2a17e:	d053      	beq.n	2a228 <_strtoul_l.isra.0+0xf0>
   2a180:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2a184:	fbbc fcf8 	udiv	ip, ip, r8
   2a188:	fb08 fa0c 	mul.w	sl, r8, ip
   2a18c:	ea6f 0a0a 	mvn.w	sl, sl
   2a190:	46c1      	mov	r9, r8
   2a192:	e008      	b.n	2a1a6 <_strtoul_l.isra.0+0x6e>
   2a194:	2930      	cmp	r1, #48	; 0x30
   2a196:	d058      	beq.n	2a24a <_strtoul_l.isra.0+0x112>
   2a198:	f04f 080a 	mov.w	r8, #10
   2a19c:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 2a27c <_strtoul_l.isra.0+0x144>
   2a1a0:	46c1      	mov	r9, r8
   2a1a2:	f04f 0a05 	mov.w	sl, #5
   2a1a6:	2300      	movs	r3, #0
   2a1a8:	469e      	mov	lr, r3
   2a1aa:	e005      	b.n	2a1b8 <_strtoul_l.isra.0+0x80>
   2a1ac:	d02a      	beq.n	2a204 <_strtoul_l.isra.0+0xcc>
   2a1ae:	fb09 2e0e 	mla	lr, r9, lr, r2
   2a1b2:	2301      	movs	r3, #1
   2a1b4:	f814 1b01 	ldrb.w	r1, [r4], #1
   2a1b8:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   2a1bc:	2a09      	cmp	r2, #9
   2a1be:	d905      	bls.n	2a1cc <_strtoul_l.isra.0+0x94>
   2a1c0:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   2a1c4:	2a19      	cmp	r2, #25
   2a1c6:	d80a      	bhi.n	2a1de <_strtoul_l.isra.0+0xa6>
   2a1c8:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   2a1cc:	4590      	cmp	r8, r2
   2a1ce:	dd0e      	ble.n	2a1ee <_strtoul_l.isra.0+0xb6>
   2a1d0:	2b00      	cmp	r3, #0
   2a1d2:	db01      	blt.n	2a1d8 <_strtoul_l.isra.0+0xa0>
   2a1d4:	45e6      	cmp	lr, ip
   2a1d6:	d9e9      	bls.n	2a1ac <_strtoul_l.isra.0+0x74>
   2a1d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a1dc:	e7ea      	b.n	2a1b4 <_strtoul_l.isra.0+0x7c>
   2a1de:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   2a1e2:	2a19      	cmp	r2, #25
   2a1e4:	d803      	bhi.n	2a1ee <_strtoul_l.isra.0+0xb6>
   2a1e6:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   2a1ea:	4590      	cmp	r8, r2
   2a1ec:	dcf0      	bgt.n	2a1d0 <_strtoul_l.isra.0+0x98>
   2a1ee:	2b00      	cmp	r3, #0
   2a1f0:	db0d      	blt.n	2a20e <_strtoul_l.isra.0+0xd6>
   2a1f2:	b108      	cbz	r0, 2a1f8 <_strtoul_l.isra.0+0xc0>
   2a1f4:	f1ce 0e00 	rsb	lr, lr, #0
   2a1f8:	b10d      	cbz	r5, 2a1fe <_strtoul_l.isra.0+0xc6>
   2a1fa:	b973      	cbnz	r3, 2a21a <_strtoul_l.isra.0+0xe2>
   2a1fc:	602e      	str	r6, [r5, #0]
   2a1fe:	4670      	mov	r0, lr
   2a200:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a204:	4552      	cmp	r2, sl
   2a206:	ddd2      	ble.n	2a1ae <_strtoul_l.isra.0+0x76>
   2a208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a20c:	e7d2      	b.n	2a1b4 <_strtoul_l.isra.0+0x7c>
   2a20e:	2322      	movs	r3, #34	; 0x22
   2a210:	603b      	str	r3, [r7, #0]
   2a212:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   2a216:	2d00      	cmp	r5, #0
   2a218:	d0f1      	beq.n	2a1fe <_strtoul_l.isra.0+0xc6>
   2a21a:	1e66      	subs	r6, r4, #1
   2a21c:	e7ee      	b.n	2a1fc <_strtoul_l.isra.0+0xc4>
   2a21e:	7821      	ldrb	r1, [r4, #0]
   2a220:	2001      	movs	r0, #1
   2a222:	f10a 0402 	add.w	r4, sl, #2
   2a226:	e7a5      	b.n	2a174 <_strtoul_l.isra.0+0x3c>
   2a228:	2930      	cmp	r1, #48	; 0x30
   2a22a:	d11b      	bne.n	2a264 <_strtoul_l.isra.0+0x12c>
   2a22c:	7823      	ldrb	r3, [r4, #0]
   2a22e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2a232:	2b58      	cmp	r3, #88	; 0x58
   2a234:	d11c      	bne.n	2a270 <_strtoul_l.isra.0+0x138>
   2a236:	f04f 0910 	mov.w	r9, #16
   2a23a:	7861      	ldrb	r1, [r4, #1]
   2a23c:	46c8      	mov	r8, r9
   2a23e:	f04f 0a0f 	mov.w	sl, #15
   2a242:	3402      	adds	r4, #2
   2a244:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2a248:	e7ad      	b.n	2a1a6 <_strtoul_l.isra.0+0x6e>
   2a24a:	7823      	ldrb	r3, [r4, #0]
   2a24c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2a250:	2b58      	cmp	r3, #88	; 0x58
   2a252:	d0f0      	beq.n	2a236 <_strtoul_l.isra.0+0xfe>
   2a254:	f04f 0808 	mov.w	r8, #8
   2a258:	46c1      	mov	r9, r8
   2a25a:	f04f 0a07 	mov.w	sl, #7
   2a25e:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   2a262:	e7a0      	b.n	2a1a6 <_strtoul_l.isra.0+0x6e>
   2a264:	f04f 0a0f 	mov.w	sl, #15
   2a268:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2a26c:	46c1      	mov	r9, r8
   2a26e:	e79a      	b.n	2a1a6 <_strtoul_l.isra.0+0x6e>
   2a270:	46c1      	mov	r9, r8
   2a272:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2a276:	f04f 0a0f 	mov.w	sl, #15
   2a27a:	e794      	b.n	2a1a6 <_strtoul_l.isra.0+0x6e>
   2a27c:	19999999 	.word	0x19999999

0002a280 <strtoul>:
   2a280:	b530      	push	{r4, r5, lr}
   2a282:	4c08      	ldr	r4, [pc, #32]	; (2a2a4 <strtoul+0x24>)
   2a284:	4b08      	ldr	r3, [pc, #32]	; (2a2a8 <strtoul+0x28>)
   2a286:	6825      	ldr	r5, [r4, #0]
   2a288:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2a28a:	b083      	sub	sp, #12
   2a28c:	2c00      	cmp	r4, #0
   2a28e:	bf08      	it	eq
   2a290:	461c      	moveq	r4, r3
   2a292:	9400      	str	r4, [sp, #0]
   2a294:	4613      	mov	r3, r2
   2a296:	460a      	mov	r2, r1
   2a298:	4601      	mov	r1, r0
   2a29a:	4628      	mov	r0, r5
   2a29c:	f7ff ff4c 	bl	2a138 <_strtoul_l.isra.0>
   2a2a0:	b003      	add	sp, #12
   2a2a2:	bd30      	pop	{r4, r5, pc}
   2a2a4:	2000c5e8 	.word	0x2000c5e8
   2a2a8:	2000c47c 	.word	0x2000c47c

0002a2ac <_svfprintf_r>:
   2a2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a2b0:	b0c3      	sub	sp, #268	; 0x10c
   2a2b2:	460c      	mov	r4, r1
   2a2b4:	910b      	str	r1, [sp, #44]	; 0x2c
   2a2b6:	4692      	mov	sl, r2
   2a2b8:	930f      	str	r3, [sp, #60]	; 0x3c
   2a2ba:	900c      	str	r0, [sp, #48]	; 0x30
   2a2bc:	f002 f9f2 	bl	2c6a4 <_localeconv_r>
   2a2c0:	6803      	ldr	r3, [r0, #0]
   2a2c2:	931a      	str	r3, [sp, #104]	; 0x68
   2a2c4:	4618      	mov	r0, r3
   2a2c6:	f7d6 fa1b 	bl	700 <strlen>
   2a2ca:	89a3      	ldrh	r3, [r4, #12]
   2a2cc:	9019      	str	r0, [sp, #100]	; 0x64
   2a2ce:	0619      	lsls	r1, r3, #24
   2a2d0:	d503      	bpl.n	2a2da <_svfprintf_r+0x2e>
   2a2d2:	6923      	ldr	r3, [r4, #16]
   2a2d4:	2b00      	cmp	r3, #0
   2a2d6:	f001 8003 	beq.w	2b2e0 <_svfprintf_r+0x1034>
   2a2da:	2300      	movs	r3, #0
   2a2dc:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   2a2e0:	9313      	str	r3, [sp, #76]	; 0x4c
   2a2e2:	9315      	str	r3, [sp, #84]	; 0x54
   2a2e4:	9314      	str	r3, [sp, #80]	; 0x50
   2a2e6:	9327      	str	r3, [sp, #156]	; 0x9c
   2a2e8:	9326      	str	r3, [sp, #152]	; 0x98
   2a2ea:	9318      	str	r3, [sp, #96]	; 0x60
   2a2ec:	931b      	str	r3, [sp, #108]	; 0x6c
   2a2ee:	9309      	str	r3, [sp, #36]	; 0x24
   2a2f0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   2a2f4:	46c8      	mov	r8, r9
   2a2f6:	9316      	str	r3, [sp, #88]	; 0x58
   2a2f8:	9317      	str	r3, [sp, #92]	; 0x5c
   2a2fa:	f89a 3000 	ldrb.w	r3, [sl]
   2a2fe:	4654      	mov	r4, sl
   2a300:	b1e3      	cbz	r3, 2a33c <_svfprintf_r+0x90>
   2a302:	2b25      	cmp	r3, #37	; 0x25
   2a304:	d102      	bne.n	2a30c <_svfprintf_r+0x60>
   2a306:	e019      	b.n	2a33c <_svfprintf_r+0x90>
   2a308:	2b25      	cmp	r3, #37	; 0x25
   2a30a:	d003      	beq.n	2a314 <_svfprintf_r+0x68>
   2a30c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2a310:	2b00      	cmp	r3, #0
   2a312:	d1f9      	bne.n	2a308 <_svfprintf_r+0x5c>
   2a314:	eba4 050a 	sub.w	r5, r4, sl
   2a318:	b185      	cbz	r5, 2a33c <_svfprintf_r+0x90>
   2a31a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2a31c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2a31e:	f8c8 a000 	str.w	sl, [r8]
   2a322:	3301      	adds	r3, #1
   2a324:	442a      	add	r2, r5
   2a326:	2b07      	cmp	r3, #7
   2a328:	f8c8 5004 	str.w	r5, [r8, #4]
   2a32c:	9227      	str	r2, [sp, #156]	; 0x9c
   2a32e:	9326      	str	r3, [sp, #152]	; 0x98
   2a330:	dc7f      	bgt.n	2a432 <_svfprintf_r+0x186>
   2a332:	f108 0808 	add.w	r8, r8, #8
   2a336:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a338:	442b      	add	r3, r5
   2a33a:	9309      	str	r3, [sp, #36]	; 0x24
   2a33c:	7823      	ldrb	r3, [r4, #0]
   2a33e:	2b00      	cmp	r3, #0
   2a340:	d07f      	beq.n	2a442 <_svfprintf_r+0x196>
   2a342:	2300      	movs	r3, #0
   2a344:	461a      	mov	r2, r3
   2a346:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2a34a:	4619      	mov	r1, r3
   2a34c:	930d      	str	r3, [sp, #52]	; 0x34
   2a34e:	469b      	mov	fp, r3
   2a350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a354:	7863      	ldrb	r3, [r4, #1]
   2a356:	900a      	str	r0, [sp, #40]	; 0x28
   2a358:	f104 0a01 	add.w	sl, r4, #1
   2a35c:	f10a 0a01 	add.w	sl, sl, #1
   2a360:	f1a3 0020 	sub.w	r0, r3, #32
   2a364:	2858      	cmp	r0, #88	; 0x58
   2a366:	f200 83c1 	bhi.w	2aaec <_svfprintf_r+0x840>
   2a36a:	e8df f010 	tbh	[pc, r0, lsl #1]
   2a36e:	0238      	.short	0x0238
   2a370:	03bf03bf 	.word	0x03bf03bf
   2a374:	03bf0240 	.word	0x03bf0240
   2a378:	03bf03bf 	.word	0x03bf03bf
   2a37c:	03bf03bf 	.word	0x03bf03bf
   2a380:	024503bf 	.word	0x024503bf
   2a384:	03bf0203 	.word	0x03bf0203
   2a388:	026b005d 	.word	0x026b005d
   2a38c:	028603bf 	.word	0x028603bf
   2a390:	039d039d 	.word	0x039d039d
   2a394:	039d039d 	.word	0x039d039d
   2a398:	039d039d 	.word	0x039d039d
   2a39c:	039d039d 	.word	0x039d039d
   2a3a0:	03bf039d 	.word	0x03bf039d
   2a3a4:	03bf03bf 	.word	0x03bf03bf
   2a3a8:	03bf03bf 	.word	0x03bf03bf
   2a3ac:	03bf03bf 	.word	0x03bf03bf
   2a3b0:	03bf03bf 	.word	0x03bf03bf
   2a3b4:	033703bf 	.word	0x033703bf
   2a3b8:	03bf0357 	.word	0x03bf0357
   2a3bc:	03bf0357 	.word	0x03bf0357
   2a3c0:	03bf03bf 	.word	0x03bf03bf
   2a3c4:	039803bf 	.word	0x039803bf
   2a3c8:	03bf03bf 	.word	0x03bf03bf
   2a3cc:	03bf03ad 	.word	0x03bf03ad
   2a3d0:	03bf03bf 	.word	0x03bf03bf
   2a3d4:	03bf03bf 	.word	0x03bf03bf
   2a3d8:	03bf0259 	.word	0x03bf0259
   2a3dc:	031e03bf 	.word	0x031e03bf
   2a3e0:	03bf03bf 	.word	0x03bf03bf
   2a3e4:	03bf03bf 	.word	0x03bf03bf
   2a3e8:	03bf03bf 	.word	0x03bf03bf
   2a3ec:	03bf03bf 	.word	0x03bf03bf
   2a3f0:	03bf03bf 	.word	0x03bf03bf
   2a3f4:	02db02c6 	.word	0x02db02c6
   2a3f8:	03570357 	.word	0x03570357
   2a3fc:	028b0357 	.word	0x028b0357
   2a400:	03bf02db 	.word	0x03bf02db
   2a404:	029003bf 	.word	0x029003bf
   2a408:	029d03bf 	.word	0x029d03bf
   2a40c:	02b401cc 	.word	0x02b401cc
   2a410:	03bf0208 	.word	0x03bf0208
   2a414:	03bf01e1 	.word	0x03bf01e1
   2a418:	03bf007e 	.word	0x03bf007e
   2a41c:	020d03bf 	.word	0x020d03bf
   2a420:	980d      	ldr	r0, [sp, #52]	; 0x34
   2a422:	930f      	str	r3, [sp, #60]	; 0x3c
   2a424:	4240      	negs	r0, r0
   2a426:	900d      	str	r0, [sp, #52]	; 0x34
   2a428:	f04b 0b04 	orr.w	fp, fp, #4
   2a42c:	f89a 3000 	ldrb.w	r3, [sl]
   2a430:	e794      	b.n	2a35c <_svfprintf_r+0xb0>
   2a432:	aa25      	add	r2, sp, #148	; 0x94
   2a434:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2a436:	980c      	ldr	r0, [sp, #48]	; 0x30
   2a438:	f002 ff0a 	bl	2d250 <__ssprint_r>
   2a43c:	b940      	cbnz	r0, 2a450 <_svfprintf_r+0x1a4>
   2a43e:	46c8      	mov	r8, r9
   2a440:	e779      	b.n	2a336 <_svfprintf_r+0x8a>
   2a442:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   2a444:	b123      	cbz	r3, 2a450 <_svfprintf_r+0x1a4>
   2a446:	980c      	ldr	r0, [sp, #48]	; 0x30
   2a448:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2a44a:	aa25      	add	r2, sp, #148	; 0x94
   2a44c:	f002 ff00 	bl	2d250 <__ssprint_r>
   2a450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2a452:	899b      	ldrh	r3, [r3, #12]
   2a454:	f013 0f40 	tst.w	r3, #64	; 0x40
   2a458:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a45a:	bf18      	it	ne
   2a45c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2a460:	9309      	str	r3, [sp, #36]	; 0x24
   2a462:	9809      	ldr	r0, [sp, #36]	; 0x24
   2a464:	b043      	add	sp, #268	; 0x10c
   2a466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a46a:	f01b 0f20 	tst.w	fp, #32
   2a46e:	9311      	str	r3, [sp, #68]	; 0x44
   2a470:	f040 81dd 	bne.w	2a82e <_svfprintf_r+0x582>
   2a474:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2a476:	f01b 0f10 	tst.w	fp, #16
   2a47a:	4613      	mov	r3, r2
   2a47c:	f040 856e 	bne.w	2af5c <_svfprintf_r+0xcb0>
   2a480:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2a484:	f000 856a 	beq.w	2af5c <_svfprintf_r+0xcb0>
   2a488:	8814      	ldrh	r4, [r2, #0]
   2a48a:	3204      	adds	r2, #4
   2a48c:	2500      	movs	r5, #0
   2a48e:	2301      	movs	r3, #1
   2a490:	920f      	str	r2, [sp, #60]	; 0x3c
   2a492:	2700      	movs	r7, #0
   2a494:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2a498:	990a      	ldr	r1, [sp, #40]	; 0x28
   2a49a:	1c4a      	adds	r2, r1, #1
   2a49c:	f000 8265 	beq.w	2a96a <_svfprintf_r+0x6be>
   2a4a0:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   2a4a4:	9207      	str	r2, [sp, #28]
   2a4a6:	ea54 0205 	orrs.w	r2, r4, r5
   2a4aa:	f040 8264 	bne.w	2a976 <_svfprintf_r+0x6ca>
   2a4ae:	2900      	cmp	r1, #0
   2a4b0:	f040 843c 	bne.w	2ad2c <_svfprintf_r+0xa80>
   2a4b4:	2b00      	cmp	r3, #0
   2a4b6:	f040 84d7 	bne.w	2ae68 <_svfprintf_r+0xbbc>
   2a4ba:	f01b 0301 	ands.w	r3, fp, #1
   2a4be:	930e      	str	r3, [sp, #56]	; 0x38
   2a4c0:	f000 8604 	beq.w	2b0cc <_svfprintf_r+0xe20>
   2a4c4:	ae42      	add	r6, sp, #264	; 0x108
   2a4c6:	2330      	movs	r3, #48	; 0x30
   2a4c8:	f806 3d41 	strb.w	r3, [r6, #-65]!
   2a4cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2a4ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2a4d0:	4293      	cmp	r3, r2
   2a4d2:	bfb8      	it	lt
   2a4d4:	4613      	movlt	r3, r2
   2a4d6:	9308      	str	r3, [sp, #32]
   2a4d8:	2300      	movs	r3, #0
   2a4da:	9312      	str	r3, [sp, #72]	; 0x48
   2a4dc:	b117      	cbz	r7, 2a4e4 <_svfprintf_r+0x238>
   2a4de:	9b08      	ldr	r3, [sp, #32]
   2a4e0:	3301      	adds	r3, #1
   2a4e2:	9308      	str	r3, [sp, #32]
   2a4e4:	9b07      	ldr	r3, [sp, #28]
   2a4e6:	f013 0302 	ands.w	r3, r3, #2
   2a4ea:	9310      	str	r3, [sp, #64]	; 0x40
   2a4ec:	d002      	beq.n	2a4f4 <_svfprintf_r+0x248>
   2a4ee:	9b08      	ldr	r3, [sp, #32]
   2a4f0:	3302      	adds	r3, #2
   2a4f2:	9308      	str	r3, [sp, #32]
   2a4f4:	9b07      	ldr	r3, [sp, #28]
   2a4f6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   2a4fa:	f040 830e 	bne.w	2ab1a <_svfprintf_r+0x86e>
   2a4fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2a500:	9a08      	ldr	r2, [sp, #32]
   2a502:	eba3 0b02 	sub.w	fp, r3, r2
   2a506:	f1bb 0f00 	cmp.w	fp, #0
   2a50a:	f340 8306 	ble.w	2ab1a <_svfprintf_r+0x86e>
   2a50e:	f1bb 0f10 	cmp.w	fp, #16
   2a512:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2a514:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2a516:	dd29      	ble.n	2a56c <_svfprintf_r+0x2c0>
   2a518:	4643      	mov	r3, r8
   2a51a:	4621      	mov	r1, r4
   2a51c:	46a8      	mov	r8, r5
   2a51e:	2710      	movs	r7, #16
   2a520:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2a522:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2a524:	e006      	b.n	2a534 <_svfprintf_r+0x288>
   2a526:	f1ab 0b10 	sub.w	fp, fp, #16
   2a52a:	f1bb 0f10 	cmp.w	fp, #16
   2a52e:	f103 0308 	add.w	r3, r3, #8
   2a532:	dd18      	ble.n	2a566 <_svfprintf_r+0x2ba>
   2a534:	3201      	adds	r2, #1
   2a536:	48b7      	ldr	r0, [pc, #732]	; (2a814 <_svfprintf_r+0x568>)
   2a538:	9226      	str	r2, [sp, #152]	; 0x98
   2a53a:	3110      	adds	r1, #16
   2a53c:	2a07      	cmp	r2, #7
   2a53e:	9127      	str	r1, [sp, #156]	; 0x9c
   2a540:	e883 0081 	stmia.w	r3, {r0, r7}
   2a544:	ddef      	ble.n	2a526 <_svfprintf_r+0x27a>
   2a546:	aa25      	add	r2, sp, #148	; 0x94
   2a548:	4629      	mov	r1, r5
   2a54a:	4620      	mov	r0, r4
   2a54c:	f002 fe80 	bl	2d250 <__ssprint_r>
   2a550:	2800      	cmp	r0, #0
   2a552:	f47f af7d 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2a556:	f1ab 0b10 	sub.w	fp, fp, #16
   2a55a:	f1bb 0f10 	cmp.w	fp, #16
   2a55e:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2a560:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2a562:	464b      	mov	r3, r9
   2a564:	dce6      	bgt.n	2a534 <_svfprintf_r+0x288>
   2a566:	4645      	mov	r5, r8
   2a568:	460c      	mov	r4, r1
   2a56a:	4698      	mov	r8, r3
   2a56c:	3201      	adds	r2, #1
   2a56e:	4ba9      	ldr	r3, [pc, #676]	; (2a814 <_svfprintf_r+0x568>)
   2a570:	9226      	str	r2, [sp, #152]	; 0x98
   2a572:	445c      	add	r4, fp
   2a574:	2a07      	cmp	r2, #7
   2a576:	9427      	str	r4, [sp, #156]	; 0x9c
   2a578:	e888 0808 	stmia.w	r8, {r3, fp}
   2a57c:	f300 8498 	bgt.w	2aeb0 <_svfprintf_r+0xc04>
   2a580:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2a584:	f108 0808 	add.w	r8, r8, #8
   2a588:	b177      	cbz	r7, 2a5a8 <_svfprintf_r+0x2fc>
   2a58a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2a58c:	3301      	adds	r3, #1
   2a58e:	3401      	adds	r4, #1
   2a590:	f10d 0177 	add.w	r1, sp, #119	; 0x77
   2a594:	2201      	movs	r2, #1
   2a596:	2b07      	cmp	r3, #7
   2a598:	9427      	str	r4, [sp, #156]	; 0x9c
   2a59a:	9326      	str	r3, [sp, #152]	; 0x98
   2a59c:	e888 0006 	stmia.w	r8, {r1, r2}
   2a5a0:	f300 83db 	bgt.w	2ad5a <_svfprintf_r+0xaae>
   2a5a4:	f108 0808 	add.w	r8, r8, #8
   2a5a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2a5aa:	b16b      	cbz	r3, 2a5c8 <_svfprintf_r+0x31c>
   2a5ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2a5ae:	3301      	adds	r3, #1
   2a5b0:	3402      	adds	r4, #2
   2a5b2:	a91e      	add	r1, sp, #120	; 0x78
   2a5b4:	2202      	movs	r2, #2
   2a5b6:	2b07      	cmp	r3, #7
   2a5b8:	9427      	str	r4, [sp, #156]	; 0x9c
   2a5ba:	9326      	str	r3, [sp, #152]	; 0x98
   2a5bc:	e888 0006 	stmia.w	r8, {r1, r2}
   2a5c0:	f300 83d6 	bgt.w	2ad70 <_svfprintf_r+0xac4>
   2a5c4:	f108 0808 	add.w	r8, r8, #8
   2a5c8:	2d80      	cmp	r5, #128	; 0x80
   2a5ca:	f000 8315 	beq.w	2abf8 <_svfprintf_r+0x94c>
   2a5ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2a5d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2a5d2:	1a9f      	subs	r7, r3, r2
   2a5d4:	2f00      	cmp	r7, #0
   2a5d6:	dd36      	ble.n	2a646 <_svfprintf_r+0x39a>
   2a5d8:	2f10      	cmp	r7, #16
   2a5da:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2a5dc:	4d8e      	ldr	r5, [pc, #568]	; (2a818 <_svfprintf_r+0x56c>)
   2a5de:	dd27      	ble.n	2a630 <_svfprintf_r+0x384>
   2a5e0:	4642      	mov	r2, r8
   2a5e2:	4621      	mov	r1, r4
   2a5e4:	46b0      	mov	r8, r6
   2a5e6:	f04f 0b10 	mov.w	fp, #16
   2a5ea:	462e      	mov	r6, r5
   2a5ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2a5ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2a5f0:	e004      	b.n	2a5fc <_svfprintf_r+0x350>
   2a5f2:	3f10      	subs	r7, #16
   2a5f4:	2f10      	cmp	r7, #16
   2a5f6:	f102 0208 	add.w	r2, r2, #8
   2a5fa:	dd15      	ble.n	2a628 <_svfprintf_r+0x37c>
   2a5fc:	3301      	adds	r3, #1
   2a5fe:	3110      	adds	r1, #16
   2a600:	2b07      	cmp	r3, #7
   2a602:	9127      	str	r1, [sp, #156]	; 0x9c
   2a604:	9326      	str	r3, [sp, #152]	; 0x98
   2a606:	e882 0840 	stmia.w	r2, {r6, fp}
   2a60a:	ddf2      	ble.n	2a5f2 <_svfprintf_r+0x346>
   2a60c:	aa25      	add	r2, sp, #148	; 0x94
   2a60e:	4629      	mov	r1, r5
   2a610:	4620      	mov	r0, r4
   2a612:	f002 fe1d 	bl	2d250 <__ssprint_r>
   2a616:	2800      	cmp	r0, #0
   2a618:	f47f af1a 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2a61c:	3f10      	subs	r7, #16
   2a61e:	2f10      	cmp	r7, #16
   2a620:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2a622:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2a624:	464a      	mov	r2, r9
   2a626:	dce9      	bgt.n	2a5fc <_svfprintf_r+0x350>
   2a628:	4635      	mov	r5, r6
   2a62a:	460c      	mov	r4, r1
   2a62c:	4646      	mov	r6, r8
   2a62e:	4690      	mov	r8, r2
   2a630:	3301      	adds	r3, #1
   2a632:	443c      	add	r4, r7
   2a634:	2b07      	cmp	r3, #7
   2a636:	9427      	str	r4, [sp, #156]	; 0x9c
   2a638:	9326      	str	r3, [sp, #152]	; 0x98
   2a63a:	e888 00a0 	stmia.w	r8, {r5, r7}
   2a63e:	f300 8381 	bgt.w	2ad44 <_svfprintf_r+0xa98>
   2a642:	f108 0808 	add.w	r8, r8, #8
   2a646:	9b07      	ldr	r3, [sp, #28]
   2a648:	05df      	lsls	r7, r3, #23
   2a64a:	f100 8268 	bmi.w	2ab1e <_svfprintf_r+0x872>
   2a64e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2a650:	990e      	ldr	r1, [sp, #56]	; 0x38
   2a652:	f8c8 6000 	str.w	r6, [r8]
   2a656:	3301      	adds	r3, #1
   2a658:	440c      	add	r4, r1
   2a65a:	2b07      	cmp	r3, #7
   2a65c:	9427      	str	r4, [sp, #156]	; 0x9c
   2a65e:	f8c8 1004 	str.w	r1, [r8, #4]
   2a662:	9326      	str	r3, [sp, #152]	; 0x98
   2a664:	f300 834d 	bgt.w	2ad02 <_svfprintf_r+0xa56>
   2a668:	f108 0808 	add.w	r8, r8, #8
   2a66c:	9b07      	ldr	r3, [sp, #28]
   2a66e:	075b      	lsls	r3, r3, #29
   2a670:	d53a      	bpl.n	2a6e8 <_svfprintf_r+0x43c>
   2a672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2a674:	9a08      	ldr	r2, [sp, #32]
   2a676:	1a9d      	subs	r5, r3, r2
   2a678:	2d00      	cmp	r5, #0
   2a67a:	dd35      	ble.n	2a6e8 <_svfprintf_r+0x43c>
   2a67c:	2d10      	cmp	r5, #16
   2a67e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2a680:	dd20      	ble.n	2a6c4 <_svfprintf_r+0x418>
   2a682:	2610      	movs	r6, #16
   2a684:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2a686:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   2a68a:	e004      	b.n	2a696 <_svfprintf_r+0x3ea>
   2a68c:	3d10      	subs	r5, #16
   2a68e:	2d10      	cmp	r5, #16
   2a690:	f108 0808 	add.w	r8, r8, #8
   2a694:	dd16      	ble.n	2a6c4 <_svfprintf_r+0x418>
   2a696:	3301      	adds	r3, #1
   2a698:	4a5e      	ldr	r2, [pc, #376]	; (2a814 <_svfprintf_r+0x568>)
   2a69a:	9326      	str	r3, [sp, #152]	; 0x98
   2a69c:	3410      	adds	r4, #16
   2a69e:	2b07      	cmp	r3, #7
   2a6a0:	9427      	str	r4, [sp, #156]	; 0x9c
   2a6a2:	e888 0044 	stmia.w	r8, {r2, r6}
   2a6a6:	ddf1      	ble.n	2a68c <_svfprintf_r+0x3e0>
   2a6a8:	aa25      	add	r2, sp, #148	; 0x94
   2a6aa:	4659      	mov	r1, fp
   2a6ac:	4638      	mov	r0, r7
   2a6ae:	f002 fdcf 	bl	2d250 <__ssprint_r>
   2a6b2:	2800      	cmp	r0, #0
   2a6b4:	f47f aecc 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2a6b8:	3d10      	subs	r5, #16
   2a6ba:	2d10      	cmp	r5, #16
   2a6bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2a6be:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2a6c0:	46c8      	mov	r8, r9
   2a6c2:	dce8      	bgt.n	2a696 <_svfprintf_r+0x3ea>
   2a6c4:	3301      	adds	r3, #1
   2a6c6:	4a53      	ldr	r2, [pc, #332]	; (2a814 <_svfprintf_r+0x568>)
   2a6c8:	9326      	str	r3, [sp, #152]	; 0x98
   2a6ca:	442c      	add	r4, r5
   2a6cc:	2b07      	cmp	r3, #7
   2a6ce:	9427      	str	r4, [sp, #156]	; 0x9c
   2a6d0:	e888 0024 	stmia.w	r8, {r2, r5}
   2a6d4:	dd08      	ble.n	2a6e8 <_svfprintf_r+0x43c>
   2a6d6:	aa25      	add	r2, sp, #148	; 0x94
   2a6d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2a6da:	980c      	ldr	r0, [sp, #48]	; 0x30
   2a6dc:	f002 fdb8 	bl	2d250 <__ssprint_r>
   2a6e0:	2800      	cmp	r0, #0
   2a6e2:	f47f aeb5 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2a6e6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2a6e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a6ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2a6ec:	9908      	ldr	r1, [sp, #32]
   2a6ee:	428a      	cmp	r2, r1
   2a6f0:	bfac      	ite	ge
   2a6f2:	189b      	addge	r3, r3, r2
   2a6f4:	185b      	addlt	r3, r3, r1
   2a6f6:	9309      	str	r3, [sp, #36]	; 0x24
   2a6f8:	2c00      	cmp	r4, #0
   2a6fa:	f040 830d 	bne.w	2ad18 <_svfprintf_r+0xa6c>
   2a6fe:	2300      	movs	r3, #0
   2a700:	9326      	str	r3, [sp, #152]	; 0x98
   2a702:	46c8      	mov	r8, r9
   2a704:	e5f9      	b.n	2a2fa <_svfprintf_r+0x4e>
   2a706:	9311      	str	r3, [sp, #68]	; 0x44
   2a708:	f01b 0320 	ands.w	r3, fp, #32
   2a70c:	f040 81e3 	bne.w	2aad6 <_svfprintf_r+0x82a>
   2a710:	f01b 0210 	ands.w	r2, fp, #16
   2a714:	f040 842e 	bne.w	2af74 <_svfprintf_r+0xcc8>
   2a718:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   2a71c:	f000 842a 	beq.w	2af74 <_svfprintf_r+0xcc8>
   2a720:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2a722:	4613      	mov	r3, r2
   2a724:	460a      	mov	r2, r1
   2a726:	3204      	adds	r2, #4
   2a728:	880c      	ldrh	r4, [r1, #0]
   2a72a:	920f      	str	r2, [sp, #60]	; 0x3c
   2a72c:	2500      	movs	r5, #0
   2a72e:	e6b0      	b.n	2a492 <_svfprintf_r+0x1e6>
   2a730:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2a732:	9311      	str	r3, [sp, #68]	; 0x44
   2a734:	6816      	ldr	r6, [r2, #0]
   2a736:	2400      	movs	r4, #0
   2a738:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
   2a73c:	1d15      	adds	r5, r2, #4
   2a73e:	2e00      	cmp	r6, #0
   2a740:	f000 86a7 	beq.w	2b492 <_svfprintf_r+0x11e6>
   2a744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2a746:	1c53      	adds	r3, r2, #1
   2a748:	f000 8609 	beq.w	2b35e <_svfprintf_r+0x10b2>
   2a74c:	4621      	mov	r1, r4
   2a74e:	4630      	mov	r0, r6
   2a750:	f7d5 fd66 	bl	220 <memchr>
   2a754:	2800      	cmp	r0, #0
   2a756:	f000 86e1 	beq.w	2b51c <_svfprintf_r+0x1270>
   2a75a:	1b83      	subs	r3, r0, r6
   2a75c:	930e      	str	r3, [sp, #56]	; 0x38
   2a75e:	940a      	str	r4, [sp, #40]	; 0x28
   2a760:	950f      	str	r5, [sp, #60]	; 0x3c
   2a762:	f8cd b01c 	str.w	fp, [sp, #28]
   2a766:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2a76a:	9308      	str	r3, [sp, #32]
   2a76c:	9412      	str	r4, [sp, #72]	; 0x48
   2a76e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2a772:	e6b3      	b.n	2a4dc <_svfprintf_r+0x230>
   2a774:	f89a 3000 	ldrb.w	r3, [sl]
   2a778:	2201      	movs	r2, #1
   2a77a:	212b      	movs	r1, #43	; 0x2b
   2a77c:	e5ee      	b.n	2a35c <_svfprintf_r+0xb0>
   2a77e:	f04b 0b20 	orr.w	fp, fp, #32
   2a782:	f89a 3000 	ldrb.w	r3, [sl]
   2a786:	e5e9      	b.n	2a35c <_svfprintf_r+0xb0>
   2a788:	9311      	str	r3, [sp, #68]	; 0x44
   2a78a:	2a00      	cmp	r2, #0
   2a78c:	f040 8795 	bne.w	2b6ba <_svfprintf_r+0x140e>
   2a790:	4b22      	ldr	r3, [pc, #136]	; (2a81c <_svfprintf_r+0x570>)
   2a792:	9318      	str	r3, [sp, #96]	; 0x60
   2a794:	f01b 0f20 	tst.w	fp, #32
   2a798:	f040 8111 	bne.w	2a9be <_svfprintf_r+0x712>
   2a79c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2a79e:	f01b 0f10 	tst.w	fp, #16
   2a7a2:	4613      	mov	r3, r2
   2a7a4:	f040 83e1 	bne.w	2af6a <_svfprintf_r+0xcbe>
   2a7a8:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2a7ac:	f000 83dd 	beq.w	2af6a <_svfprintf_r+0xcbe>
   2a7b0:	3304      	adds	r3, #4
   2a7b2:	8814      	ldrh	r4, [r2, #0]
   2a7b4:	930f      	str	r3, [sp, #60]	; 0x3c
   2a7b6:	2500      	movs	r5, #0
   2a7b8:	f01b 0f01 	tst.w	fp, #1
   2a7bc:	f000 810c 	beq.w	2a9d8 <_svfprintf_r+0x72c>
   2a7c0:	ea54 0305 	orrs.w	r3, r4, r5
   2a7c4:	f000 8108 	beq.w	2a9d8 <_svfprintf_r+0x72c>
   2a7c8:	2330      	movs	r3, #48	; 0x30
   2a7ca:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   2a7ce:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   2a7d2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   2a7d6:	f04b 0b02 	orr.w	fp, fp, #2
   2a7da:	2302      	movs	r3, #2
   2a7dc:	e659      	b.n	2a492 <_svfprintf_r+0x1e6>
   2a7de:	f89a 3000 	ldrb.w	r3, [sl]
   2a7e2:	2900      	cmp	r1, #0
   2a7e4:	f47f adba 	bne.w	2a35c <_svfprintf_r+0xb0>
   2a7e8:	2201      	movs	r2, #1
   2a7ea:	2120      	movs	r1, #32
   2a7ec:	e5b6      	b.n	2a35c <_svfprintf_r+0xb0>
   2a7ee:	f04b 0b01 	orr.w	fp, fp, #1
   2a7f2:	f89a 3000 	ldrb.w	r3, [sl]
   2a7f6:	e5b1      	b.n	2a35c <_svfprintf_r+0xb0>
   2a7f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2a7fa:	6823      	ldr	r3, [r4, #0]
   2a7fc:	930d      	str	r3, [sp, #52]	; 0x34
   2a7fe:	4618      	mov	r0, r3
   2a800:	2800      	cmp	r0, #0
   2a802:	4623      	mov	r3, r4
   2a804:	f103 0304 	add.w	r3, r3, #4
   2a808:	f6ff ae0a 	blt.w	2a420 <_svfprintf_r+0x174>
   2a80c:	930f      	str	r3, [sp, #60]	; 0x3c
   2a80e:	f89a 3000 	ldrb.w	r3, [sl]
   2a812:	e5a3      	b.n	2a35c <_svfprintf_r+0xb0>
   2a814:	000314e8 	.word	0x000314e8
   2a818:	000314f8 	.word	0x000314f8
   2a81c:	000314cc 	.word	0x000314cc
   2a820:	f04b 0b10 	orr.w	fp, fp, #16
   2a824:	f01b 0f20 	tst.w	fp, #32
   2a828:	9311      	str	r3, [sp, #68]	; 0x44
   2a82a:	f43f ae23 	beq.w	2a474 <_svfprintf_r+0x1c8>
   2a82e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2a830:	3507      	adds	r5, #7
   2a832:	f025 0307 	bic.w	r3, r5, #7
   2a836:	f103 0208 	add.w	r2, r3, #8
   2a83a:	e9d3 4500 	ldrd	r4, r5, [r3]
   2a83e:	920f      	str	r2, [sp, #60]	; 0x3c
   2a840:	2301      	movs	r3, #1
   2a842:	e626      	b.n	2a492 <_svfprintf_r+0x1e6>
   2a844:	f89a 3000 	ldrb.w	r3, [sl]
   2a848:	2b2a      	cmp	r3, #42	; 0x2a
   2a84a:	f10a 0401 	add.w	r4, sl, #1
   2a84e:	f000 8727 	beq.w	2b6a0 <_svfprintf_r+0x13f4>
   2a852:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2a856:	2809      	cmp	r0, #9
   2a858:	46a2      	mov	sl, r4
   2a85a:	f200 86ad 	bhi.w	2b5b8 <_svfprintf_r+0x130c>
   2a85e:	2300      	movs	r3, #0
   2a860:	461c      	mov	r4, r3
   2a862:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2a866:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2a86a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2a86e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2a872:	2809      	cmp	r0, #9
   2a874:	d9f5      	bls.n	2a862 <_svfprintf_r+0x5b6>
   2a876:	940a      	str	r4, [sp, #40]	; 0x28
   2a878:	e572      	b.n	2a360 <_svfprintf_r+0xb4>
   2a87a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   2a87e:	f89a 3000 	ldrb.w	r3, [sl]
   2a882:	e56b      	b.n	2a35c <_svfprintf_r+0xb0>
   2a884:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   2a888:	f89a 3000 	ldrb.w	r3, [sl]
   2a88c:	e566      	b.n	2a35c <_svfprintf_r+0xb0>
   2a88e:	f89a 3000 	ldrb.w	r3, [sl]
   2a892:	2b6c      	cmp	r3, #108	; 0x6c
   2a894:	bf03      	ittte	eq
   2a896:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   2a89a:	f04b 0b20 	orreq.w	fp, fp, #32
   2a89e:	f10a 0a01 	addeq.w	sl, sl, #1
   2a8a2:	f04b 0b10 	orrne.w	fp, fp, #16
   2a8a6:	e559      	b.n	2a35c <_svfprintf_r+0xb0>
   2a8a8:	2a00      	cmp	r2, #0
   2a8aa:	f040 8711 	bne.w	2b6d0 <_svfprintf_r+0x1424>
   2a8ae:	f01b 0f20 	tst.w	fp, #32
   2a8b2:	f040 84f9 	bne.w	2b2a8 <_svfprintf_r+0xffc>
   2a8b6:	f01b 0f10 	tst.w	fp, #16
   2a8ba:	f040 84ac 	bne.w	2b216 <_svfprintf_r+0xf6a>
   2a8be:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2a8c2:	f000 84a8 	beq.w	2b216 <_svfprintf_r+0xf6a>
   2a8c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2a8c8:	6813      	ldr	r3, [r2, #0]
   2a8ca:	3204      	adds	r2, #4
   2a8cc:	920f      	str	r2, [sp, #60]	; 0x3c
   2a8ce:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   2a8d2:	801a      	strh	r2, [r3, #0]
   2a8d4:	e511      	b.n	2a2fa <_svfprintf_r+0x4e>
   2a8d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2a8d8:	4bb3      	ldr	r3, [pc, #716]	; (2aba8 <_svfprintf_r+0x8fc>)
   2a8da:	680c      	ldr	r4, [r1, #0]
   2a8dc:	9318      	str	r3, [sp, #96]	; 0x60
   2a8de:	2230      	movs	r2, #48	; 0x30
   2a8e0:	2378      	movs	r3, #120	; 0x78
   2a8e2:	3104      	adds	r1, #4
   2a8e4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   2a8e8:	9311      	str	r3, [sp, #68]	; 0x44
   2a8ea:	f04b 0b02 	orr.w	fp, fp, #2
   2a8ee:	910f      	str	r1, [sp, #60]	; 0x3c
   2a8f0:	2500      	movs	r5, #0
   2a8f2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   2a8f6:	2302      	movs	r3, #2
   2a8f8:	e5cb      	b.n	2a492 <_svfprintf_r+0x1e6>
   2a8fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2a8fc:	9311      	str	r3, [sp, #68]	; 0x44
   2a8fe:	680a      	ldr	r2, [r1, #0]
   2a900:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2a904:	2300      	movs	r3, #0
   2a906:	460a      	mov	r2, r1
   2a908:	461f      	mov	r7, r3
   2a90a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2a90e:	3204      	adds	r2, #4
   2a910:	2301      	movs	r3, #1
   2a912:	9308      	str	r3, [sp, #32]
   2a914:	f8cd b01c 	str.w	fp, [sp, #28]
   2a918:	970a      	str	r7, [sp, #40]	; 0x28
   2a91a:	9712      	str	r7, [sp, #72]	; 0x48
   2a91c:	920f      	str	r2, [sp, #60]	; 0x3c
   2a91e:	930e      	str	r3, [sp, #56]	; 0x38
   2a920:	ae28      	add	r6, sp, #160	; 0xa0
   2a922:	e5df      	b.n	2a4e4 <_svfprintf_r+0x238>
   2a924:	9311      	str	r3, [sp, #68]	; 0x44
   2a926:	2a00      	cmp	r2, #0
   2a928:	f040 86ea 	bne.w	2b700 <_svfprintf_r+0x1454>
   2a92c:	f01b 0f20 	tst.w	fp, #32
   2a930:	d15d      	bne.n	2a9ee <_svfprintf_r+0x742>
   2a932:	f01b 0f10 	tst.w	fp, #16
   2a936:	f040 8308 	bne.w	2af4a <_svfprintf_r+0xc9e>
   2a93a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2a93e:	f000 8304 	beq.w	2af4a <_svfprintf_r+0xc9e>
   2a942:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2a944:	f9b1 4000 	ldrsh.w	r4, [r1]
   2a948:	3104      	adds	r1, #4
   2a94a:	17e5      	asrs	r5, r4, #31
   2a94c:	4622      	mov	r2, r4
   2a94e:	462b      	mov	r3, r5
   2a950:	910f      	str	r1, [sp, #60]	; 0x3c
   2a952:	2a00      	cmp	r2, #0
   2a954:	f173 0300 	sbcs.w	r3, r3, #0
   2a958:	db58      	blt.n	2aa0c <_svfprintf_r+0x760>
   2a95a:	990a      	ldr	r1, [sp, #40]	; 0x28
   2a95c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2a960:	1c4a      	adds	r2, r1, #1
   2a962:	f04f 0301 	mov.w	r3, #1
   2a966:	f47f ad9b 	bne.w	2a4a0 <_svfprintf_r+0x1f4>
   2a96a:	ea54 0205 	orrs.w	r2, r4, r5
   2a96e:	f000 81df 	beq.w	2ad30 <_svfprintf_r+0xa84>
   2a972:	f8cd b01c 	str.w	fp, [sp, #28]
   2a976:	2b01      	cmp	r3, #1
   2a978:	f000 827b 	beq.w	2ae72 <_svfprintf_r+0xbc6>
   2a97c:	2b02      	cmp	r3, #2
   2a97e:	f040 8206 	bne.w	2ad8e <_svfprintf_r+0xae2>
   2a982:	9818      	ldr	r0, [sp, #96]	; 0x60
   2a984:	464e      	mov	r6, r9
   2a986:	0923      	lsrs	r3, r4, #4
   2a988:	f004 010f 	and.w	r1, r4, #15
   2a98c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   2a990:	092a      	lsrs	r2, r5, #4
   2a992:	461c      	mov	r4, r3
   2a994:	4615      	mov	r5, r2
   2a996:	5c43      	ldrb	r3, [r0, r1]
   2a998:	f806 3d01 	strb.w	r3, [r6, #-1]!
   2a99c:	ea54 0305 	orrs.w	r3, r4, r5
   2a9a0:	d1f1      	bne.n	2a986 <_svfprintf_r+0x6da>
   2a9a2:	eba9 0306 	sub.w	r3, r9, r6
   2a9a6:	930e      	str	r3, [sp, #56]	; 0x38
   2a9a8:	e590      	b.n	2a4cc <_svfprintf_r+0x220>
   2a9aa:	9311      	str	r3, [sp, #68]	; 0x44
   2a9ac:	2a00      	cmp	r2, #0
   2a9ae:	f040 86a3 	bne.w	2b6f8 <_svfprintf_r+0x144c>
   2a9b2:	4b7e      	ldr	r3, [pc, #504]	; (2abac <_svfprintf_r+0x900>)
   2a9b4:	9318      	str	r3, [sp, #96]	; 0x60
   2a9b6:	f01b 0f20 	tst.w	fp, #32
   2a9ba:	f43f aeef 	beq.w	2a79c <_svfprintf_r+0x4f0>
   2a9be:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2a9c0:	3507      	adds	r5, #7
   2a9c2:	f025 0307 	bic.w	r3, r5, #7
   2a9c6:	f103 0208 	add.w	r2, r3, #8
   2a9ca:	f01b 0f01 	tst.w	fp, #1
   2a9ce:	920f      	str	r2, [sp, #60]	; 0x3c
   2a9d0:	e9d3 4500 	ldrd	r4, r5, [r3]
   2a9d4:	f47f aef4 	bne.w	2a7c0 <_svfprintf_r+0x514>
   2a9d8:	2302      	movs	r3, #2
   2a9da:	e55a      	b.n	2a492 <_svfprintf_r+0x1e6>
   2a9dc:	9311      	str	r3, [sp, #68]	; 0x44
   2a9de:	2a00      	cmp	r2, #0
   2a9e0:	f040 8686 	bne.w	2b6f0 <_svfprintf_r+0x1444>
   2a9e4:	f04b 0b10 	orr.w	fp, fp, #16
   2a9e8:	f01b 0f20 	tst.w	fp, #32
   2a9ec:	d0a1      	beq.n	2a932 <_svfprintf_r+0x686>
   2a9ee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2a9f0:	3507      	adds	r5, #7
   2a9f2:	f025 0507 	bic.w	r5, r5, #7
   2a9f6:	e9d5 2300 	ldrd	r2, r3, [r5]
   2a9fa:	2a00      	cmp	r2, #0
   2a9fc:	f105 0108 	add.w	r1, r5, #8
   2aa00:	461d      	mov	r5, r3
   2aa02:	f173 0300 	sbcs.w	r3, r3, #0
   2aa06:	910f      	str	r1, [sp, #60]	; 0x3c
   2aa08:	4614      	mov	r4, r2
   2aa0a:	daa6      	bge.n	2a95a <_svfprintf_r+0x6ae>
   2aa0c:	272d      	movs	r7, #45	; 0x2d
   2aa0e:	4264      	negs	r4, r4
   2aa10:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   2aa14:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2aa18:	2301      	movs	r3, #1
   2aa1a:	e53d      	b.n	2a498 <_svfprintf_r+0x1ec>
   2aa1c:	9311      	str	r3, [sp, #68]	; 0x44
   2aa1e:	2a00      	cmp	r2, #0
   2aa20:	f040 8662 	bne.w	2b6e8 <_svfprintf_r+0x143c>
   2aa24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2aa26:	3507      	adds	r5, #7
   2aa28:	f025 0307 	bic.w	r3, r5, #7
   2aa2c:	f103 0208 	add.w	r2, r3, #8
   2aa30:	920f      	str	r2, [sp, #60]	; 0x3c
   2aa32:	681a      	ldr	r2, [r3, #0]
   2aa34:	9215      	str	r2, [sp, #84]	; 0x54
   2aa36:	685b      	ldr	r3, [r3, #4]
   2aa38:	9314      	str	r3, [sp, #80]	; 0x50
   2aa3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2aa3c:	9d15      	ldr	r5, [sp, #84]	; 0x54
   2aa3e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   2aa42:	4628      	mov	r0, r5
   2aa44:	4621      	mov	r1, r4
   2aa46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2aa4a:	4b59      	ldr	r3, [pc, #356]	; (2abb0 <_svfprintf_r+0x904>)
   2aa4c:	f7d6 fb18 	bl	1080 <__aeabi_dcmpun>
   2aa50:	2800      	cmp	r0, #0
   2aa52:	f040 834a 	bne.w	2b0ea <_svfprintf_r+0xe3e>
   2aa56:	4628      	mov	r0, r5
   2aa58:	4621      	mov	r1, r4
   2aa5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2aa5e:	4b54      	ldr	r3, [pc, #336]	; (2abb0 <_svfprintf_r+0x904>)
   2aa60:	f7d6 faf0 	bl	1044 <__aeabi_dcmple>
   2aa64:	2800      	cmp	r0, #0
   2aa66:	f040 8340 	bne.w	2b0ea <_svfprintf_r+0xe3e>
   2aa6a:	a815      	add	r0, sp, #84	; 0x54
   2aa6c:	c80d      	ldmia	r0, {r0, r2, r3}
   2aa6e:	9914      	ldr	r1, [sp, #80]	; 0x50
   2aa70:	f7d6 fade 	bl	1030 <__aeabi_dcmplt>
   2aa74:	2800      	cmp	r0, #0
   2aa76:	f040 8530 	bne.w	2b4da <_svfprintf_r+0x122e>
   2aa7a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2aa7e:	4e4d      	ldr	r6, [pc, #308]	; (2abb4 <_svfprintf_r+0x908>)
   2aa80:	4b4d      	ldr	r3, [pc, #308]	; (2abb8 <_svfprintf_r+0x90c>)
   2aa82:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   2aa86:	9007      	str	r0, [sp, #28]
   2aa88:	9811      	ldr	r0, [sp, #68]	; 0x44
   2aa8a:	2203      	movs	r2, #3
   2aa8c:	2100      	movs	r1, #0
   2aa8e:	9208      	str	r2, [sp, #32]
   2aa90:	910a      	str	r1, [sp, #40]	; 0x28
   2aa92:	2847      	cmp	r0, #71	; 0x47
   2aa94:	bfd8      	it	le
   2aa96:	461e      	movle	r6, r3
   2aa98:	920e      	str	r2, [sp, #56]	; 0x38
   2aa9a:	9112      	str	r1, [sp, #72]	; 0x48
   2aa9c:	e51e      	b.n	2a4dc <_svfprintf_r+0x230>
   2aa9e:	f04b 0b08 	orr.w	fp, fp, #8
   2aaa2:	f89a 3000 	ldrb.w	r3, [sl]
   2aaa6:	e459      	b.n	2a35c <_svfprintf_r+0xb0>
   2aaa8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2aaac:	2300      	movs	r3, #0
   2aaae:	461c      	mov	r4, r3
   2aab0:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2aab4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2aab8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2aabc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2aac0:	2809      	cmp	r0, #9
   2aac2:	d9f5      	bls.n	2aab0 <_svfprintf_r+0x804>
   2aac4:	940d      	str	r4, [sp, #52]	; 0x34
   2aac6:	e44b      	b.n	2a360 <_svfprintf_r+0xb4>
   2aac8:	f04b 0b10 	orr.w	fp, fp, #16
   2aacc:	9311      	str	r3, [sp, #68]	; 0x44
   2aace:	f01b 0320 	ands.w	r3, fp, #32
   2aad2:	f43f ae1d 	beq.w	2a710 <_svfprintf_r+0x464>
   2aad6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2aad8:	3507      	adds	r5, #7
   2aada:	f025 0307 	bic.w	r3, r5, #7
   2aade:	f103 0208 	add.w	r2, r3, #8
   2aae2:	e9d3 4500 	ldrd	r4, r5, [r3]
   2aae6:	920f      	str	r2, [sp, #60]	; 0x3c
   2aae8:	2300      	movs	r3, #0
   2aaea:	e4d2      	b.n	2a492 <_svfprintf_r+0x1e6>
   2aaec:	9311      	str	r3, [sp, #68]	; 0x44
   2aaee:	2a00      	cmp	r2, #0
   2aaf0:	f040 85e7 	bne.w	2b6c2 <_svfprintf_r+0x1416>
   2aaf4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2aaf6:	2a00      	cmp	r2, #0
   2aaf8:	f43f aca3 	beq.w	2a442 <_svfprintf_r+0x196>
   2aafc:	2300      	movs	r3, #0
   2aafe:	2101      	movs	r1, #1
   2ab00:	461f      	mov	r7, r3
   2ab02:	9108      	str	r1, [sp, #32]
   2ab04:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2ab08:	f8cd b01c 	str.w	fp, [sp, #28]
   2ab0c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2ab10:	930a      	str	r3, [sp, #40]	; 0x28
   2ab12:	9312      	str	r3, [sp, #72]	; 0x48
   2ab14:	910e      	str	r1, [sp, #56]	; 0x38
   2ab16:	ae28      	add	r6, sp, #160	; 0xa0
   2ab18:	e4e4      	b.n	2a4e4 <_svfprintf_r+0x238>
   2ab1a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2ab1c:	e534      	b.n	2a588 <_svfprintf_r+0x2dc>
   2ab1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2ab20:	2b65      	cmp	r3, #101	; 0x65
   2ab22:	f340 80a7 	ble.w	2ac74 <_svfprintf_r+0x9c8>
   2ab26:	a815      	add	r0, sp, #84	; 0x54
   2ab28:	c80d      	ldmia	r0, {r0, r2, r3}
   2ab2a:	9914      	ldr	r1, [sp, #80]	; 0x50
   2ab2c:	f7d6 fa76 	bl	101c <__aeabi_dcmpeq>
   2ab30:	2800      	cmp	r0, #0
   2ab32:	f000 8150 	beq.w	2add6 <_svfprintf_r+0xb2a>
   2ab36:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2ab38:	4a20      	ldr	r2, [pc, #128]	; (2abbc <_svfprintf_r+0x910>)
   2ab3a:	f8c8 2000 	str.w	r2, [r8]
   2ab3e:	3301      	adds	r3, #1
   2ab40:	3401      	adds	r4, #1
   2ab42:	2201      	movs	r2, #1
   2ab44:	2b07      	cmp	r3, #7
   2ab46:	9427      	str	r4, [sp, #156]	; 0x9c
   2ab48:	9326      	str	r3, [sp, #152]	; 0x98
   2ab4a:	f8c8 2004 	str.w	r2, [r8, #4]
   2ab4e:	f300 836a 	bgt.w	2b226 <_svfprintf_r+0xf7a>
   2ab52:	f108 0808 	add.w	r8, r8, #8
   2ab56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2ab58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2ab5a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2ab5c:	4293      	cmp	r3, r2
   2ab5e:	db03      	blt.n	2ab68 <_svfprintf_r+0x8bc>
   2ab60:	9b07      	ldr	r3, [sp, #28]
   2ab62:	07dd      	lsls	r5, r3, #31
   2ab64:	f57f ad82 	bpl.w	2a66c <_svfprintf_r+0x3c0>
   2ab68:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2ab6a:	9919      	ldr	r1, [sp, #100]	; 0x64
   2ab6c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2ab6e:	f8c8 2000 	str.w	r2, [r8]
   2ab72:	3301      	adds	r3, #1
   2ab74:	440c      	add	r4, r1
   2ab76:	2b07      	cmp	r3, #7
   2ab78:	f8c8 1004 	str.w	r1, [r8, #4]
   2ab7c:	9427      	str	r4, [sp, #156]	; 0x9c
   2ab7e:	9326      	str	r3, [sp, #152]	; 0x98
   2ab80:	f300 839e 	bgt.w	2b2c0 <_svfprintf_r+0x1014>
   2ab84:	f108 0808 	add.w	r8, r8, #8
   2ab88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2ab8a:	1e5e      	subs	r6, r3, #1
   2ab8c:	2e00      	cmp	r6, #0
   2ab8e:	f77f ad6d 	ble.w	2a66c <_svfprintf_r+0x3c0>
   2ab92:	2e10      	cmp	r6, #16
   2ab94:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2ab96:	4d0a      	ldr	r5, [pc, #40]	; (2abc0 <_svfprintf_r+0x914>)
   2ab98:	f340 81f5 	ble.w	2af86 <_svfprintf_r+0xcda>
   2ab9c:	4622      	mov	r2, r4
   2ab9e:	2710      	movs	r7, #16
   2aba0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2aba4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2aba6:	e013      	b.n	2abd0 <_svfprintf_r+0x924>
   2aba8:	000314cc 	.word	0x000314cc
   2abac:	000314b8 	.word	0x000314b8
   2abb0:	7fefffff 	.word	0x7fefffff
   2abb4:	000314ac 	.word	0x000314ac
   2abb8:	000314a8 	.word	0x000314a8
   2abbc:	00031020 	.word	0x00031020
   2abc0:	000314f8 	.word	0x000314f8
   2abc4:	f108 0808 	add.w	r8, r8, #8
   2abc8:	3e10      	subs	r6, #16
   2abca:	2e10      	cmp	r6, #16
   2abcc:	f340 81da 	ble.w	2af84 <_svfprintf_r+0xcd8>
   2abd0:	3301      	adds	r3, #1
   2abd2:	3210      	adds	r2, #16
   2abd4:	2b07      	cmp	r3, #7
   2abd6:	9227      	str	r2, [sp, #156]	; 0x9c
   2abd8:	9326      	str	r3, [sp, #152]	; 0x98
   2abda:	e888 00a0 	stmia.w	r8, {r5, r7}
   2abde:	ddf1      	ble.n	2abc4 <_svfprintf_r+0x918>
   2abe0:	aa25      	add	r2, sp, #148	; 0x94
   2abe2:	4621      	mov	r1, r4
   2abe4:	4658      	mov	r0, fp
   2abe6:	f002 fb33 	bl	2d250 <__ssprint_r>
   2abea:	2800      	cmp	r0, #0
   2abec:	f47f ac30 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2abf0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2abf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2abf4:	46c8      	mov	r8, r9
   2abf6:	e7e7      	b.n	2abc8 <_svfprintf_r+0x91c>
   2abf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2abfa:	9a08      	ldr	r2, [sp, #32]
   2abfc:	1a9f      	subs	r7, r3, r2
   2abfe:	2f00      	cmp	r7, #0
   2ac00:	f77f ace5 	ble.w	2a5ce <_svfprintf_r+0x322>
   2ac04:	2f10      	cmp	r7, #16
   2ac06:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2ac08:	4db6      	ldr	r5, [pc, #728]	; (2aee4 <_svfprintf_r+0xc38>)
   2ac0a:	dd27      	ble.n	2ac5c <_svfprintf_r+0x9b0>
   2ac0c:	4642      	mov	r2, r8
   2ac0e:	4621      	mov	r1, r4
   2ac10:	46b0      	mov	r8, r6
   2ac12:	f04f 0b10 	mov.w	fp, #16
   2ac16:	462e      	mov	r6, r5
   2ac18:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2ac1a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2ac1c:	e004      	b.n	2ac28 <_svfprintf_r+0x97c>
   2ac1e:	3f10      	subs	r7, #16
   2ac20:	2f10      	cmp	r7, #16
   2ac22:	f102 0208 	add.w	r2, r2, #8
   2ac26:	dd15      	ble.n	2ac54 <_svfprintf_r+0x9a8>
   2ac28:	3301      	adds	r3, #1
   2ac2a:	3110      	adds	r1, #16
   2ac2c:	2b07      	cmp	r3, #7
   2ac2e:	9127      	str	r1, [sp, #156]	; 0x9c
   2ac30:	9326      	str	r3, [sp, #152]	; 0x98
   2ac32:	e882 0840 	stmia.w	r2, {r6, fp}
   2ac36:	ddf2      	ble.n	2ac1e <_svfprintf_r+0x972>
   2ac38:	aa25      	add	r2, sp, #148	; 0x94
   2ac3a:	4629      	mov	r1, r5
   2ac3c:	4620      	mov	r0, r4
   2ac3e:	f002 fb07 	bl	2d250 <__ssprint_r>
   2ac42:	2800      	cmp	r0, #0
   2ac44:	f47f ac04 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2ac48:	3f10      	subs	r7, #16
   2ac4a:	2f10      	cmp	r7, #16
   2ac4c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2ac4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2ac50:	464a      	mov	r2, r9
   2ac52:	dce9      	bgt.n	2ac28 <_svfprintf_r+0x97c>
   2ac54:	4635      	mov	r5, r6
   2ac56:	460c      	mov	r4, r1
   2ac58:	4646      	mov	r6, r8
   2ac5a:	4690      	mov	r8, r2
   2ac5c:	3301      	adds	r3, #1
   2ac5e:	443c      	add	r4, r7
   2ac60:	2b07      	cmp	r3, #7
   2ac62:	9427      	str	r4, [sp, #156]	; 0x9c
   2ac64:	9326      	str	r3, [sp, #152]	; 0x98
   2ac66:	e888 00a0 	stmia.w	r8, {r5, r7}
   2ac6a:	f300 8232 	bgt.w	2b0d2 <_svfprintf_r+0xe26>
   2ac6e:	f108 0808 	add.w	r8, r8, #8
   2ac72:	e4ac      	b.n	2a5ce <_svfprintf_r+0x322>
   2ac74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2ac76:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2ac78:	2b01      	cmp	r3, #1
   2ac7a:	f340 81fe 	ble.w	2b07a <_svfprintf_r+0xdce>
   2ac7e:	3701      	adds	r7, #1
   2ac80:	3401      	adds	r4, #1
   2ac82:	2301      	movs	r3, #1
   2ac84:	2f07      	cmp	r7, #7
   2ac86:	9427      	str	r4, [sp, #156]	; 0x9c
   2ac88:	9726      	str	r7, [sp, #152]	; 0x98
   2ac8a:	f8c8 6000 	str.w	r6, [r8]
   2ac8e:	f8c8 3004 	str.w	r3, [r8, #4]
   2ac92:	f300 8203 	bgt.w	2b09c <_svfprintf_r+0xdf0>
   2ac96:	f108 0808 	add.w	r8, r8, #8
   2ac9a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2ac9c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2ac9e:	f8c8 3000 	str.w	r3, [r8]
   2aca2:	3701      	adds	r7, #1
   2aca4:	4414      	add	r4, r2
   2aca6:	2f07      	cmp	r7, #7
   2aca8:	9427      	str	r4, [sp, #156]	; 0x9c
   2acaa:	9726      	str	r7, [sp, #152]	; 0x98
   2acac:	f8c8 2004 	str.w	r2, [r8, #4]
   2acb0:	f300 8200 	bgt.w	2b0b4 <_svfprintf_r+0xe08>
   2acb4:	f108 0808 	add.w	r8, r8, #8
   2acb8:	a815      	add	r0, sp, #84	; 0x54
   2acba:	c80d      	ldmia	r0, {r0, r2, r3}
   2acbc:	9914      	ldr	r1, [sp, #80]	; 0x50
   2acbe:	f7d6 f9ad 	bl	101c <__aeabi_dcmpeq>
   2acc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2acc4:	2800      	cmp	r0, #0
   2acc6:	f040 8101 	bne.w	2aecc <_svfprintf_r+0xc20>
   2acca:	3b01      	subs	r3, #1
   2accc:	3701      	adds	r7, #1
   2acce:	3601      	adds	r6, #1
   2acd0:	441c      	add	r4, r3
   2acd2:	2f07      	cmp	r7, #7
   2acd4:	9726      	str	r7, [sp, #152]	; 0x98
   2acd6:	9427      	str	r4, [sp, #156]	; 0x9c
   2acd8:	f8c8 6000 	str.w	r6, [r8]
   2acdc:	f8c8 3004 	str.w	r3, [r8, #4]
   2ace0:	f300 8127 	bgt.w	2af32 <_svfprintf_r+0xc86>
   2ace4:	f108 0808 	add.w	r8, r8, #8
   2ace8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2acea:	f8c8 2004 	str.w	r2, [r8, #4]
   2acee:	3701      	adds	r7, #1
   2acf0:	4414      	add	r4, r2
   2acf2:	ab21      	add	r3, sp, #132	; 0x84
   2acf4:	2f07      	cmp	r7, #7
   2acf6:	9427      	str	r4, [sp, #156]	; 0x9c
   2acf8:	9726      	str	r7, [sp, #152]	; 0x98
   2acfa:	f8c8 3000 	str.w	r3, [r8]
   2acfe:	f77f acb3 	ble.w	2a668 <_svfprintf_r+0x3bc>
   2ad02:	aa25      	add	r2, sp, #148	; 0x94
   2ad04:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2ad06:	980c      	ldr	r0, [sp, #48]	; 0x30
   2ad08:	f002 faa2 	bl	2d250 <__ssprint_r>
   2ad0c:	2800      	cmp	r0, #0
   2ad0e:	f47f ab9f 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2ad12:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2ad14:	46c8      	mov	r8, r9
   2ad16:	e4a9      	b.n	2a66c <_svfprintf_r+0x3c0>
   2ad18:	aa25      	add	r2, sp, #148	; 0x94
   2ad1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2ad1c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2ad1e:	f002 fa97 	bl	2d250 <__ssprint_r>
   2ad22:	2800      	cmp	r0, #0
   2ad24:	f43f aceb 	beq.w	2a6fe <_svfprintf_r+0x452>
   2ad28:	f7ff bb92 	b.w	2a450 <_svfprintf_r+0x1a4>
   2ad2c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2ad30:	2b01      	cmp	r3, #1
   2ad32:	f000 8134 	beq.w	2af9e <_svfprintf_r+0xcf2>
   2ad36:	2b02      	cmp	r3, #2
   2ad38:	d125      	bne.n	2ad86 <_svfprintf_r+0xada>
   2ad3a:	f8cd b01c 	str.w	fp, [sp, #28]
   2ad3e:	2400      	movs	r4, #0
   2ad40:	2500      	movs	r5, #0
   2ad42:	e61e      	b.n	2a982 <_svfprintf_r+0x6d6>
   2ad44:	aa25      	add	r2, sp, #148	; 0x94
   2ad46:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2ad48:	980c      	ldr	r0, [sp, #48]	; 0x30
   2ad4a:	f002 fa81 	bl	2d250 <__ssprint_r>
   2ad4e:	2800      	cmp	r0, #0
   2ad50:	f47f ab7e 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2ad54:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2ad56:	46c8      	mov	r8, r9
   2ad58:	e475      	b.n	2a646 <_svfprintf_r+0x39a>
   2ad5a:	aa25      	add	r2, sp, #148	; 0x94
   2ad5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2ad5e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2ad60:	f002 fa76 	bl	2d250 <__ssprint_r>
   2ad64:	2800      	cmp	r0, #0
   2ad66:	f47f ab73 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2ad6a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2ad6c:	46c8      	mov	r8, r9
   2ad6e:	e41b      	b.n	2a5a8 <_svfprintf_r+0x2fc>
   2ad70:	aa25      	add	r2, sp, #148	; 0x94
   2ad72:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2ad74:	980c      	ldr	r0, [sp, #48]	; 0x30
   2ad76:	f002 fa6b 	bl	2d250 <__ssprint_r>
   2ad7a:	2800      	cmp	r0, #0
   2ad7c:	f47f ab68 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2ad80:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2ad82:	46c8      	mov	r8, r9
   2ad84:	e420      	b.n	2a5c8 <_svfprintf_r+0x31c>
   2ad86:	f8cd b01c 	str.w	fp, [sp, #28]
   2ad8a:	2400      	movs	r4, #0
   2ad8c:	2500      	movs	r5, #0
   2ad8e:	4649      	mov	r1, r9
   2ad90:	e000      	b.n	2ad94 <_svfprintf_r+0xae8>
   2ad92:	4631      	mov	r1, r6
   2ad94:	08e2      	lsrs	r2, r4, #3
   2ad96:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   2ad9a:	08e8      	lsrs	r0, r5, #3
   2ad9c:	f004 0307 	and.w	r3, r4, #7
   2ada0:	4605      	mov	r5, r0
   2ada2:	4614      	mov	r4, r2
   2ada4:	3330      	adds	r3, #48	; 0x30
   2ada6:	ea54 0205 	orrs.w	r2, r4, r5
   2adaa:	f801 3c01 	strb.w	r3, [r1, #-1]
   2adae:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
   2adb2:	d1ee      	bne.n	2ad92 <_svfprintf_r+0xae6>
   2adb4:	9a07      	ldr	r2, [sp, #28]
   2adb6:	07d2      	lsls	r2, r2, #31
   2adb8:	f57f adf3 	bpl.w	2a9a2 <_svfprintf_r+0x6f6>
   2adbc:	2b30      	cmp	r3, #48	; 0x30
   2adbe:	f43f adf0 	beq.w	2a9a2 <_svfprintf_r+0x6f6>
   2adc2:	3902      	subs	r1, #2
   2adc4:	2330      	movs	r3, #48	; 0x30
   2adc6:	f806 3c01 	strb.w	r3, [r6, #-1]
   2adca:	eba9 0301 	sub.w	r3, r9, r1
   2adce:	930e      	str	r3, [sp, #56]	; 0x38
   2add0:	460e      	mov	r6, r1
   2add2:	f7ff bb7b 	b.w	2a4cc <_svfprintf_r+0x220>
   2add6:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2add8:	2900      	cmp	r1, #0
   2adda:	f340 822e 	ble.w	2b23a <_svfprintf_r+0xf8e>
   2adde:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2ade0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2ade2:	4293      	cmp	r3, r2
   2ade4:	bfa8      	it	ge
   2ade6:	4613      	movge	r3, r2
   2ade8:	2b00      	cmp	r3, #0
   2adea:	461f      	mov	r7, r3
   2adec:	dd0d      	ble.n	2ae0a <_svfprintf_r+0xb5e>
   2adee:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2adf0:	f8c8 6000 	str.w	r6, [r8]
   2adf4:	3301      	adds	r3, #1
   2adf6:	443c      	add	r4, r7
   2adf8:	2b07      	cmp	r3, #7
   2adfa:	9427      	str	r4, [sp, #156]	; 0x9c
   2adfc:	f8c8 7004 	str.w	r7, [r8, #4]
   2ae00:	9326      	str	r3, [sp, #152]	; 0x98
   2ae02:	f300 831f 	bgt.w	2b444 <_svfprintf_r+0x1198>
   2ae06:	f108 0808 	add.w	r8, r8, #8
   2ae0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2ae0c:	2f00      	cmp	r7, #0
   2ae0e:	bfa8      	it	ge
   2ae10:	1bdb      	subge	r3, r3, r7
   2ae12:	2b00      	cmp	r3, #0
   2ae14:	461f      	mov	r7, r3
   2ae16:	f340 80d6 	ble.w	2afc6 <_svfprintf_r+0xd1a>
   2ae1a:	2f10      	cmp	r7, #16
   2ae1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2ae1e:	4d31      	ldr	r5, [pc, #196]	; (2aee4 <_svfprintf_r+0xc38>)
   2ae20:	f340 81ed 	ble.w	2b1fe <_svfprintf_r+0xf52>
   2ae24:	4642      	mov	r2, r8
   2ae26:	4621      	mov	r1, r4
   2ae28:	46b0      	mov	r8, r6
   2ae2a:	f04f 0b10 	mov.w	fp, #16
   2ae2e:	462e      	mov	r6, r5
   2ae30:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2ae32:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2ae34:	e004      	b.n	2ae40 <_svfprintf_r+0xb94>
   2ae36:	3208      	adds	r2, #8
   2ae38:	3f10      	subs	r7, #16
   2ae3a:	2f10      	cmp	r7, #16
   2ae3c:	f340 81db 	ble.w	2b1f6 <_svfprintf_r+0xf4a>
   2ae40:	3301      	adds	r3, #1
   2ae42:	3110      	adds	r1, #16
   2ae44:	2b07      	cmp	r3, #7
   2ae46:	9127      	str	r1, [sp, #156]	; 0x9c
   2ae48:	9326      	str	r3, [sp, #152]	; 0x98
   2ae4a:	e882 0840 	stmia.w	r2, {r6, fp}
   2ae4e:	ddf2      	ble.n	2ae36 <_svfprintf_r+0xb8a>
   2ae50:	aa25      	add	r2, sp, #148	; 0x94
   2ae52:	4629      	mov	r1, r5
   2ae54:	4620      	mov	r0, r4
   2ae56:	f002 f9fb 	bl	2d250 <__ssprint_r>
   2ae5a:	2800      	cmp	r0, #0
   2ae5c:	f47f aaf8 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2ae60:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2ae62:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2ae64:	464a      	mov	r2, r9
   2ae66:	e7e7      	b.n	2ae38 <_svfprintf_r+0xb8c>
   2ae68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ae6a:	930e      	str	r3, [sp, #56]	; 0x38
   2ae6c:	464e      	mov	r6, r9
   2ae6e:	f7ff bb2d 	b.w	2a4cc <_svfprintf_r+0x220>
   2ae72:	2d00      	cmp	r5, #0
   2ae74:	bf08      	it	eq
   2ae76:	2c0a      	cmpeq	r4, #10
   2ae78:	f0c0 808f 	bcc.w	2af9a <_svfprintf_r+0xcee>
   2ae7c:	464e      	mov	r6, r9
   2ae7e:	4620      	mov	r0, r4
   2ae80:	4629      	mov	r1, r5
   2ae82:	220a      	movs	r2, #10
   2ae84:	2300      	movs	r3, #0
   2ae86:	f7d6 f939 	bl	10fc <__aeabi_uldivmod>
   2ae8a:	3230      	adds	r2, #48	; 0x30
   2ae8c:	f806 2d01 	strb.w	r2, [r6, #-1]!
   2ae90:	4620      	mov	r0, r4
   2ae92:	4629      	mov	r1, r5
   2ae94:	2300      	movs	r3, #0
   2ae96:	220a      	movs	r2, #10
   2ae98:	f7d6 f930 	bl	10fc <__aeabi_uldivmod>
   2ae9c:	4604      	mov	r4, r0
   2ae9e:	460d      	mov	r5, r1
   2aea0:	ea54 0305 	orrs.w	r3, r4, r5
   2aea4:	d1eb      	bne.n	2ae7e <_svfprintf_r+0xbd2>
   2aea6:	eba9 0306 	sub.w	r3, r9, r6
   2aeaa:	930e      	str	r3, [sp, #56]	; 0x38
   2aeac:	f7ff bb0e 	b.w	2a4cc <_svfprintf_r+0x220>
   2aeb0:	aa25      	add	r2, sp, #148	; 0x94
   2aeb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2aeb4:	980c      	ldr	r0, [sp, #48]	; 0x30
   2aeb6:	f002 f9cb 	bl	2d250 <__ssprint_r>
   2aeba:	2800      	cmp	r0, #0
   2aebc:	f47f aac8 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2aec0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2aec4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2aec6:	46c8      	mov	r8, r9
   2aec8:	f7ff bb5e 	b.w	2a588 <_svfprintf_r+0x2dc>
   2aecc:	1e5e      	subs	r6, r3, #1
   2aece:	2e00      	cmp	r6, #0
   2aed0:	f77f af0a 	ble.w	2ace8 <_svfprintf_r+0xa3c>
   2aed4:	2e10      	cmp	r6, #16
   2aed6:	4d03      	ldr	r5, [pc, #12]	; (2aee4 <_svfprintf_r+0xc38>)
   2aed8:	dd22      	ble.n	2af20 <_svfprintf_r+0xc74>
   2aeda:	4622      	mov	r2, r4
   2aedc:	f04f 0b10 	mov.w	fp, #16
   2aee0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2aee2:	e006      	b.n	2aef2 <_svfprintf_r+0xc46>
   2aee4:	000314f8 	.word	0x000314f8
   2aee8:	3e10      	subs	r6, #16
   2aeea:	2e10      	cmp	r6, #16
   2aeec:	f108 0808 	add.w	r8, r8, #8
   2aef0:	dd15      	ble.n	2af1e <_svfprintf_r+0xc72>
   2aef2:	3701      	adds	r7, #1
   2aef4:	3210      	adds	r2, #16
   2aef6:	2f07      	cmp	r7, #7
   2aef8:	9227      	str	r2, [sp, #156]	; 0x9c
   2aefa:	9726      	str	r7, [sp, #152]	; 0x98
   2aefc:	e888 0820 	stmia.w	r8, {r5, fp}
   2af00:	ddf2      	ble.n	2aee8 <_svfprintf_r+0xc3c>
   2af02:	aa25      	add	r2, sp, #148	; 0x94
   2af04:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2af06:	4620      	mov	r0, r4
   2af08:	f002 f9a2 	bl	2d250 <__ssprint_r>
   2af0c:	2800      	cmp	r0, #0
   2af0e:	f47f aa9f 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2af12:	3e10      	subs	r6, #16
   2af14:	2e10      	cmp	r6, #16
   2af16:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2af18:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2af1a:	46c8      	mov	r8, r9
   2af1c:	dce9      	bgt.n	2aef2 <_svfprintf_r+0xc46>
   2af1e:	4614      	mov	r4, r2
   2af20:	3701      	adds	r7, #1
   2af22:	4434      	add	r4, r6
   2af24:	2f07      	cmp	r7, #7
   2af26:	9427      	str	r4, [sp, #156]	; 0x9c
   2af28:	9726      	str	r7, [sp, #152]	; 0x98
   2af2a:	e888 0060 	stmia.w	r8, {r5, r6}
   2af2e:	f77f aed9 	ble.w	2ace4 <_svfprintf_r+0xa38>
   2af32:	aa25      	add	r2, sp, #148	; 0x94
   2af34:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2af36:	980c      	ldr	r0, [sp, #48]	; 0x30
   2af38:	f002 f98a 	bl	2d250 <__ssprint_r>
   2af3c:	2800      	cmp	r0, #0
   2af3e:	f47f aa87 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2af42:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2af44:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2af46:	46c8      	mov	r8, r9
   2af48:	e6ce      	b.n	2ace8 <_svfprintf_r+0xa3c>
   2af4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2af4c:	6814      	ldr	r4, [r2, #0]
   2af4e:	4613      	mov	r3, r2
   2af50:	3304      	adds	r3, #4
   2af52:	17e5      	asrs	r5, r4, #31
   2af54:	930f      	str	r3, [sp, #60]	; 0x3c
   2af56:	4622      	mov	r2, r4
   2af58:	462b      	mov	r3, r5
   2af5a:	e4fa      	b.n	2a952 <_svfprintf_r+0x6a6>
   2af5c:	3204      	adds	r2, #4
   2af5e:	681c      	ldr	r4, [r3, #0]
   2af60:	920f      	str	r2, [sp, #60]	; 0x3c
   2af62:	2301      	movs	r3, #1
   2af64:	2500      	movs	r5, #0
   2af66:	f7ff ba94 	b.w	2a492 <_svfprintf_r+0x1e6>
   2af6a:	681c      	ldr	r4, [r3, #0]
   2af6c:	3304      	adds	r3, #4
   2af6e:	930f      	str	r3, [sp, #60]	; 0x3c
   2af70:	2500      	movs	r5, #0
   2af72:	e421      	b.n	2a7b8 <_svfprintf_r+0x50c>
   2af74:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2af76:	460a      	mov	r2, r1
   2af78:	3204      	adds	r2, #4
   2af7a:	680c      	ldr	r4, [r1, #0]
   2af7c:	920f      	str	r2, [sp, #60]	; 0x3c
   2af7e:	2500      	movs	r5, #0
   2af80:	f7ff ba87 	b.w	2a492 <_svfprintf_r+0x1e6>
   2af84:	4614      	mov	r4, r2
   2af86:	3301      	adds	r3, #1
   2af88:	4434      	add	r4, r6
   2af8a:	2b07      	cmp	r3, #7
   2af8c:	9427      	str	r4, [sp, #156]	; 0x9c
   2af8e:	9326      	str	r3, [sp, #152]	; 0x98
   2af90:	e888 0060 	stmia.w	r8, {r5, r6}
   2af94:	f77f ab68 	ble.w	2a668 <_svfprintf_r+0x3bc>
   2af98:	e6b3      	b.n	2ad02 <_svfprintf_r+0xa56>
   2af9a:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2af9e:	f8cd b01c 	str.w	fp, [sp, #28]
   2afa2:	ae42      	add	r6, sp, #264	; 0x108
   2afa4:	3430      	adds	r4, #48	; 0x30
   2afa6:	2301      	movs	r3, #1
   2afa8:	f806 4d41 	strb.w	r4, [r6, #-65]!
   2afac:	930e      	str	r3, [sp, #56]	; 0x38
   2afae:	f7ff ba8d 	b.w	2a4cc <_svfprintf_r+0x220>
   2afb2:	aa25      	add	r2, sp, #148	; 0x94
   2afb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2afb6:	980c      	ldr	r0, [sp, #48]	; 0x30
   2afb8:	f002 f94a 	bl	2d250 <__ssprint_r>
   2afbc:	2800      	cmp	r0, #0
   2afbe:	f47f aa47 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2afc2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2afc4:	46c8      	mov	r8, r9
   2afc6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2afc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2afca:	429a      	cmp	r2, r3
   2afcc:	db44      	blt.n	2b058 <_svfprintf_r+0xdac>
   2afce:	9b07      	ldr	r3, [sp, #28]
   2afd0:	07d9      	lsls	r1, r3, #31
   2afd2:	d441      	bmi.n	2b058 <_svfprintf_r+0xdac>
   2afd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2afd6:	9812      	ldr	r0, [sp, #72]	; 0x48
   2afd8:	1a9a      	subs	r2, r3, r2
   2afda:	1a1d      	subs	r5, r3, r0
   2afdc:	4295      	cmp	r5, r2
   2afde:	bfa8      	it	ge
   2afe0:	4615      	movge	r5, r2
   2afe2:	2d00      	cmp	r5, #0
   2afe4:	dd0e      	ble.n	2b004 <_svfprintf_r+0xd58>
   2afe6:	9926      	ldr	r1, [sp, #152]	; 0x98
   2afe8:	f8c8 5004 	str.w	r5, [r8, #4]
   2afec:	3101      	adds	r1, #1
   2afee:	4406      	add	r6, r0
   2aff0:	442c      	add	r4, r5
   2aff2:	2907      	cmp	r1, #7
   2aff4:	f8c8 6000 	str.w	r6, [r8]
   2aff8:	9427      	str	r4, [sp, #156]	; 0x9c
   2affa:	9126      	str	r1, [sp, #152]	; 0x98
   2affc:	f300 823b 	bgt.w	2b476 <_svfprintf_r+0x11ca>
   2b000:	f108 0808 	add.w	r8, r8, #8
   2b004:	2d00      	cmp	r5, #0
   2b006:	bfac      	ite	ge
   2b008:	1b56      	subge	r6, r2, r5
   2b00a:	4616      	movlt	r6, r2
   2b00c:	2e00      	cmp	r6, #0
   2b00e:	f77f ab2d 	ble.w	2a66c <_svfprintf_r+0x3c0>
   2b012:	2e10      	cmp	r6, #16
   2b014:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b016:	4db0      	ldr	r5, [pc, #704]	; (2b2d8 <_svfprintf_r+0x102c>)
   2b018:	ddb5      	ble.n	2af86 <_svfprintf_r+0xcda>
   2b01a:	4622      	mov	r2, r4
   2b01c:	2710      	movs	r7, #16
   2b01e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2b022:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2b024:	e004      	b.n	2b030 <_svfprintf_r+0xd84>
   2b026:	f108 0808 	add.w	r8, r8, #8
   2b02a:	3e10      	subs	r6, #16
   2b02c:	2e10      	cmp	r6, #16
   2b02e:	dda9      	ble.n	2af84 <_svfprintf_r+0xcd8>
   2b030:	3301      	adds	r3, #1
   2b032:	3210      	adds	r2, #16
   2b034:	2b07      	cmp	r3, #7
   2b036:	9227      	str	r2, [sp, #156]	; 0x9c
   2b038:	9326      	str	r3, [sp, #152]	; 0x98
   2b03a:	e888 00a0 	stmia.w	r8, {r5, r7}
   2b03e:	ddf2      	ble.n	2b026 <_svfprintf_r+0xd7a>
   2b040:	aa25      	add	r2, sp, #148	; 0x94
   2b042:	4621      	mov	r1, r4
   2b044:	4658      	mov	r0, fp
   2b046:	f002 f903 	bl	2d250 <__ssprint_r>
   2b04a:	2800      	cmp	r0, #0
   2b04c:	f47f aa00 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2b050:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2b052:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b054:	46c8      	mov	r8, r9
   2b056:	e7e8      	b.n	2b02a <_svfprintf_r+0xd7e>
   2b058:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b05a:	9819      	ldr	r0, [sp, #100]	; 0x64
   2b05c:	991a      	ldr	r1, [sp, #104]	; 0x68
   2b05e:	f8c8 1000 	str.w	r1, [r8]
   2b062:	3301      	adds	r3, #1
   2b064:	4404      	add	r4, r0
   2b066:	2b07      	cmp	r3, #7
   2b068:	9427      	str	r4, [sp, #156]	; 0x9c
   2b06a:	f8c8 0004 	str.w	r0, [r8, #4]
   2b06e:	9326      	str	r3, [sp, #152]	; 0x98
   2b070:	f300 81f5 	bgt.w	2b45e <_svfprintf_r+0x11b2>
   2b074:	f108 0808 	add.w	r8, r8, #8
   2b078:	e7ac      	b.n	2afd4 <_svfprintf_r+0xd28>
   2b07a:	9b07      	ldr	r3, [sp, #28]
   2b07c:	07da      	lsls	r2, r3, #31
   2b07e:	f53f adfe 	bmi.w	2ac7e <_svfprintf_r+0x9d2>
   2b082:	3701      	adds	r7, #1
   2b084:	3401      	adds	r4, #1
   2b086:	2301      	movs	r3, #1
   2b088:	2f07      	cmp	r7, #7
   2b08a:	9427      	str	r4, [sp, #156]	; 0x9c
   2b08c:	9726      	str	r7, [sp, #152]	; 0x98
   2b08e:	f8c8 6000 	str.w	r6, [r8]
   2b092:	f8c8 3004 	str.w	r3, [r8, #4]
   2b096:	f77f ae25 	ble.w	2ace4 <_svfprintf_r+0xa38>
   2b09a:	e74a      	b.n	2af32 <_svfprintf_r+0xc86>
   2b09c:	aa25      	add	r2, sp, #148	; 0x94
   2b09e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b0a0:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b0a2:	f002 f8d5 	bl	2d250 <__ssprint_r>
   2b0a6:	2800      	cmp	r0, #0
   2b0a8:	f47f a9d2 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2b0ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b0ae:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2b0b0:	46c8      	mov	r8, r9
   2b0b2:	e5f2      	b.n	2ac9a <_svfprintf_r+0x9ee>
   2b0b4:	aa25      	add	r2, sp, #148	; 0x94
   2b0b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b0b8:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b0ba:	f002 f8c9 	bl	2d250 <__ssprint_r>
   2b0be:	2800      	cmp	r0, #0
   2b0c0:	f47f a9c6 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2b0c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b0c6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2b0c8:	46c8      	mov	r8, r9
   2b0ca:	e5f5      	b.n	2acb8 <_svfprintf_r+0xa0c>
   2b0cc:	464e      	mov	r6, r9
   2b0ce:	f7ff b9fd 	b.w	2a4cc <_svfprintf_r+0x220>
   2b0d2:	aa25      	add	r2, sp, #148	; 0x94
   2b0d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b0d6:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b0d8:	f002 f8ba 	bl	2d250 <__ssprint_r>
   2b0dc:	2800      	cmp	r0, #0
   2b0de:	f47f a9b7 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2b0e2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b0e4:	46c8      	mov	r8, r9
   2b0e6:	f7ff ba72 	b.w	2a5ce <_svfprintf_r+0x322>
   2b0ea:	9c15      	ldr	r4, [sp, #84]	; 0x54
   2b0ec:	4622      	mov	r2, r4
   2b0ee:	4620      	mov	r0, r4
   2b0f0:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2b0f2:	4623      	mov	r3, r4
   2b0f4:	4621      	mov	r1, r4
   2b0f6:	f7d5 ffc3 	bl	1080 <__aeabi_dcmpun>
   2b0fa:	2800      	cmp	r0, #0
   2b0fc:	f040 8286 	bne.w	2b60c <_svfprintf_r+0x1360>
   2b100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b102:	3301      	adds	r3, #1
   2b104:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b106:	f023 0320 	bic.w	r3, r3, #32
   2b10a:	930e      	str	r3, [sp, #56]	; 0x38
   2b10c:	f000 81e2 	beq.w	2b4d4 <_svfprintf_r+0x1228>
   2b110:	2b47      	cmp	r3, #71	; 0x47
   2b112:	f000 811e 	beq.w	2b352 <_svfprintf_r+0x10a6>
   2b116:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   2b11a:	9307      	str	r3, [sp, #28]
   2b11c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2b11e:	1e1f      	subs	r7, r3, #0
   2b120:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2b122:	9308      	str	r3, [sp, #32]
   2b124:	bfbb      	ittet	lt
   2b126:	463b      	movlt	r3, r7
   2b128:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   2b12c:	2300      	movge	r3, #0
   2b12e:	232d      	movlt	r3, #45	; 0x2d
   2b130:	9310      	str	r3, [sp, #64]	; 0x40
   2b132:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b134:	2b66      	cmp	r3, #102	; 0x66
   2b136:	f000 81bb 	beq.w	2b4b0 <_svfprintf_r+0x1204>
   2b13a:	2b46      	cmp	r3, #70	; 0x46
   2b13c:	f000 80df 	beq.w	2b2fe <_svfprintf_r+0x1052>
   2b140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b142:	9a08      	ldr	r2, [sp, #32]
   2b144:	2b45      	cmp	r3, #69	; 0x45
   2b146:	bf0c      	ite	eq
   2b148:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   2b14a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   2b14c:	a823      	add	r0, sp, #140	; 0x8c
   2b14e:	a920      	add	r1, sp, #128	; 0x80
   2b150:	bf08      	it	eq
   2b152:	1c5d      	addeq	r5, r3, #1
   2b154:	9004      	str	r0, [sp, #16]
   2b156:	9103      	str	r1, [sp, #12]
   2b158:	a81f      	add	r0, sp, #124	; 0x7c
   2b15a:	2102      	movs	r1, #2
   2b15c:	463b      	mov	r3, r7
   2b15e:	9002      	str	r0, [sp, #8]
   2b160:	9501      	str	r5, [sp, #4]
   2b162:	9100      	str	r1, [sp, #0]
   2b164:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b166:	f000 fb73 	bl	2b850 <_dtoa_r>
   2b16a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b16c:	2b67      	cmp	r3, #103	; 0x67
   2b16e:	4606      	mov	r6, r0
   2b170:	f040 81e0 	bne.w	2b534 <_svfprintf_r+0x1288>
   2b174:	f01b 0f01 	tst.w	fp, #1
   2b178:	f000 8246 	beq.w	2b608 <_svfprintf_r+0x135c>
   2b17c:	1974      	adds	r4, r6, r5
   2b17e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2b180:	9808      	ldr	r0, [sp, #32]
   2b182:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2b184:	4639      	mov	r1, r7
   2b186:	f7d5 ff49 	bl	101c <__aeabi_dcmpeq>
   2b18a:	2800      	cmp	r0, #0
   2b18c:	f040 8165 	bne.w	2b45a <_svfprintf_r+0x11ae>
   2b190:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2b192:	42a3      	cmp	r3, r4
   2b194:	d206      	bcs.n	2b1a4 <_svfprintf_r+0xef8>
   2b196:	2130      	movs	r1, #48	; 0x30
   2b198:	1c5a      	adds	r2, r3, #1
   2b19a:	9223      	str	r2, [sp, #140]	; 0x8c
   2b19c:	7019      	strb	r1, [r3, #0]
   2b19e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2b1a0:	429c      	cmp	r4, r3
   2b1a2:	d8f9      	bhi.n	2b198 <_svfprintf_r+0xeec>
   2b1a4:	1b9b      	subs	r3, r3, r6
   2b1a6:	9313      	str	r3, [sp, #76]	; 0x4c
   2b1a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b1aa:	2b47      	cmp	r3, #71	; 0x47
   2b1ac:	f000 80e9 	beq.w	2b382 <_svfprintf_r+0x10d6>
   2b1b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b1b2:	2b65      	cmp	r3, #101	; 0x65
   2b1b4:	f340 81cd 	ble.w	2b552 <_svfprintf_r+0x12a6>
   2b1b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b1ba:	2b66      	cmp	r3, #102	; 0x66
   2b1bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2b1be:	9312      	str	r3, [sp, #72]	; 0x48
   2b1c0:	f000 819e 	beq.w	2b500 <_svfprintf_r+0x1254>
   2b1c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2b1c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2b1c8:	4619      	mov	r1, r3
   2b1ca:	4291      	cmp	r1, r2
   2b1cc:	f300 818a 	bgt.w	2b4e4 <_svfprintf_r+0x1238>
   2b1d0:	f01b 0f01 	tst.w	fp, #1
   2b1d4:	f040 8213 	bne.w	2b5fe <_svfprintf_r+0x1352>
   2b1d8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2b1dc:	9308      	str	r3, [sp, #32]
   2b1de:	2367      	movs	r3, #103	; 0x67
   2b1e0:	920e      	str	r2, [sp, #56]	; 0x38
   2b1e2:	9311      	str	r3, [sp, #68]	; 0x44
   2b1e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2b1e6:	2b00      	cmp	r3, #0
   2b1e8:	f040 80c4 	bne.w	2b374 <_svfprintf_r+0x10c8>
   2b1ec:	930a      	str	r3, [sp, #40]	; 0x28
   2b1ee:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2b1f2:	f7ff b973 	b.w	2a4dc <_svfprintf_r+0x230>
   2b1f6:	4635      	mov	r5, r6
   2b1f8:	460c      	mov	r4, r1
   2b1fa:	4646      	mov	r6, r8
   2b1fc:	4690      	mov	r8, r2
   2b1fe:	3301      	adds	r3, #1
   2b200:	443c      	add	r4, r7
   2b202:	2b07      	cmp	r3, #7
   2b204:	9427      	str	r4, [sp, #156]	; 0x9c
   2b206:	9326      	str	r3, [sp, #152]	; 0x98
   2b208:	e888 00a0 	stmia.w	r8, {r5, r7}
   2b20c:	f73f aed1 	bgt.w	2afb2 <_svfprintf_r+0xd06>
   2b210:	f108 0808 	add.w	r8, r8, #8
   2b214:	e6d7      	b.n	2afc6 <_svfprintf_r+0xd1a>
   2b216:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b218:	6813      	ldr	r3, [r2, #0]
   2b21a:	3204      	adds	r2, #4
   2b21c:	920f      	str	r2, [sp, #60]	; 0x3c
   2b21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2b220:	601a      	str	r2, [r3, #0]
   2b222:	f7ff b86a 	b.w	2a2fa <_svfprintf_r+0x4e>
   2b226:	aa25      	add	r2, sp, #148	; 0x94
   2b228:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b22a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b22c:	f002 f810 	bl	2d250 <__ssprint_r>
   2b230:	2800      	cmp	r0, #0
   2b232:	f47f a90d 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2b236:	46c8      	mov	r8, r9
   2b238:	e48d      	b.n	2ab56 <_svfprintf_r+0x8aa>
   2b23a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b23c:	4a27      	ldr	r2, [pc, #156]	; (2b2dc <_svfprintf_r+0x1030>)
   2b23e:	f8c8 2000 	str.w	r2, [r8]
   2b242:	3301      	adds	r3, #1
   2b244:	3401      	adds	r4, #1
   2b246:	2201      	movs	r2, #1
   2b248:	2b07      	cmp	r3, #7
   2b24a:	9427      	str	r4, [sp, #156]	; 0x9c
   2b24c:	9326      	str	r3, [sp, #152]	; 0x98
   2b24e:	f8c8 2004 	str.w	r2, [r8, #4]
   2b252:	dc72      	bgt.n	2b33a <_svfprintf_r+0x108e>
   2b254:	f108 0808 	add.w	r8, r8, #8
   2b258:	b929      	cbnz	r1, 2b266 <_svfprintf_r+0xfba>
   2b25a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2b25c:	b91b      	cbnz	r3, 2b266 <_svfprintf_r+0xfba>
   2b25e:	9b07      	ldr	r3, [sp, #28]
   2b260:	07d8      	lsls	r0, r3, #31
   2b262:	f57f aa03 	bpl.w	2a66c <_svfprintf_r+0x3c0>
   2b266:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b268:	9819      	ldr	r0, [sp, #100]	; 0x64
   2b26a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2b26c:	f8c8 2000 	str.w	r2, [r8]
   2b270:	3301      	adds	r3, #1
   2b272:	4602      	mov	r2, r0
   2b274:	4422      	add	r2, r4
   2b276:	2b07      	cmp	r3, #7
   2b278:	9227      	str	r2, [sp, #156]	; 0x9c
   2b27a:	f8c8 0004 	str.w	r0, [r8, #4]
   2b27e:	9326      	str	r3, [sp, #152]	; 0x98
   2b280:	f300 818d 	bgt.w	2b59e <_svfprintf_r+0x12f2>
   2b284:	f108 0808 	add.w	r8, r8, #8
   2b288:	2900      	cmp	r1, #0
   2b28a:	f2c0 8165 	blt.w	2b558 <_svfprintf_r+0x12ac>
   2b28e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2b290:	f8c8 6000 	str.w	r6, [r8]
   2b294:	3301      	adds	r3, #1
   2b296:	188c      	adds	r4, r1, r2
   2b298:	2b07      	cmp	r3, #7
   2b29a:	9427      	str	r4, [sp, #156]	; 0x9c
   2b29c:	9326      	str	r3, [sp, #152]	; 0x98
   2b29e:	f8c8 1004 	str.w	r1, [r8, #4]
   2b2a2:	f77f a9e1 	ble.w	2a668 <_svfprintf_r+0x3bc>
   2b2a6:	e52c      	b.n	2ad02 <_svfprintf_r+0xa56>
   2b2a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b2aa:	9909      	ldr	r1, [sp, #36]	; 0x24
   2b2ac:	6813      	ldr	r3, [r2, #0]
   2b2ae:	17cd      	asrs	r5, r1, #31
   2b2b0:	4608      	mov	r0, r1
   2b2b2:	3204      	adds	r2, #4
   2b2b4:	4629      	mov	r1, r5
   2b2b6:	920f      	str	r2, [sp, #60]	; 0x3c
   2b2b8:	e9c3 0100 	strd	r0, r1, [r3]
   2b2bc:	f7ff b81d 	b.w	2a2fa <_svfprintf_r+0x4e>
   2b2c0:	aa25      	add	r2, sp, #148	; 0x94
   2b2c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b2c4:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b2c6:	f001 ffc3 	bl	2d250 <__ssprint_r>
   2b2ca:	2800      	cmp	r0, #0
   2b2cc:	f47f a8c0 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2b2d0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b2d2:	46c8      	mov	r8, r9
   2b2d4:	e458      	b.n	2ab88 <_svfprintf_r+0x8dc>
   2b2d6:	bf00      	nop
   2b2d8:	000314f8 	.word	0x000314f8
   2b2dc:	00031020 	.word	0x00031020
   2b2e0:	2140      	movs	r1, #64	; 0x40
   2b2e2:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b2e4:	f001 f9ec 	bl	2c6c0 <_malloc_r>
   2b2e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2b2ea:	6010      	str	r0, [r2, #0]
   2b2ec:	6110      	str	r0, [r2, #16]
   2b2ee:	2800      	cmp	r0, #0
   2b2f0:	f000 81f2 	beq.w	2b6d8 <_svfprintf_r+0x142c>
   2b2f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2b2f6:	2340      	movs	r3, #64	; 0x40
   2b2f8:	6153      	str	r3, [r2, #20]
   2b2fa:	f7fe bfee 	b.w	2a2da <_svfprintf_r+0x2e>
   2b2fe:	a823      	add	r0, sp, #140	; 0x8c
   2b300:	a920      	add	r1, sp, #128	; 0x80
   2b302:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2b304:	9004      	str	r0, [sp, #16]
   2b306:	9103      	str	r1, [sp, #12]
   2b308:	a81f      	add	r0, sp, #124	; 0x7c
   2b30a:	2103      	movs	r1, #3
   2b30c:	9002      	str	r0, [sp, #8]
   2b30e:	9a08      	ldr	r2, [sp, #32]
   2b310:	9401      	str	r4, [sp, #4]
   2b312:	463b      	mov	r3, r7
   2b314:	9100      	str	r1, [sp, #0]
   2b316:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b318:	f000 fa9a 	bl	2b850 <_dtoa_r>
   2b31c:	4625      	mov	r5, r4
   2b31e:	4606      	mov	r6, r0
   2b320:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b322:	2b46      	cmp	r3, #70	; 0x46
   2b324:	eb06 0405 	add.w	r4, r6, r5
   2b328:	f47f af29 	bne.w	2b17e <_svfprintf_r+0xed2>
   2b32c:	7833      	ldrb	r3, [r6, #0]
   2b32e:	2b30      	cmp	r3, #48	; 0x30
   2b330:	f000 8178 	beq.w	2b624 <_svfprintf_r+0x1378>
   2b334:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   2b336:	442c      	add	r4, r5
   2b338:	e721      	b.n	2b17e <_svfprintf_r+0xed2>
   2b33a:	aa25      	add	r2, sp, #148	; 0x94
   2b33c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b33e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b340:	f001 ff86 	bl	2d250 <__ssprint_r>
   2b344:	2800      	cmp	r0, #0
   2b346:	f47f a883 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2b34a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2b34c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b34e:	46c8      	mov	r8, r9
   2b350:	e782      	b.n	2b258 <_svfprintf_r+0xfac>
   2b352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b354:	2b00      	cmp	r3, #0
   2b356:	bf08      	it	eq
   2b358:	2301      	moveq	r3, #1
   2b35a:	930a      	str	r3, [sp, #40]	; 0x28
   2b35c:	e6db      	b.n	2b116 <_svfprintf_r+0xe6a>
   2b35e:	4630      	mov	r0, r6
   2b360:	940a      	str	r4, [sp, #40]	; 0x28
   2b362:	f7d5 f9cd 	bl	700 <strlen>
   2b366:	950f      	str	r5, [sp, #60]	; 0x3c
   2b368:	900e      	str	r0, [sp, #56]	; 0x38
   2b36a:	f8cd b01c 	str.w	fp, [sp, #28]
   2b36e:	4603      	mov	r3, r0
   2b370:	f7ff b9f9 	b.w	2a766 <_svfprintf_r+0x4ba>
   2b374:	272d      	movs	r7, #45	; 0x2d
   2b376:	2300      	movs	r3, #0
   2b378:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2b37c:	930a      	str	r3, [sp, #40]	; 0x28
   2b37e:	f7ff b8ae 	b.w	2a4de <_svfprintf_r+0x232>
   2b382:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2b384:	9312      	str	r3, [sp, #72]	; 0x48
   2b386:	461a      	mov	r2, r3
   2b388:	3303      	adds	r3, #3
   2b38a:	db04      	blt.n	2b396 <_svfprintf_r+0x10ea>
   2b38c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b38e:	4619      	mov	r1, r3
   2b390:	4291      	cmp	r1, r2
   2b392:	f6bf af17 	bge.w	2b1c4 <_svfprintf_r+0xf18>
   2b396:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b398:	3b02      	subs	r3, #2
   2b39a:	9311      	str	r3, [sp, #68]	; 0x44
   2b39c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   2b3a0:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   2b3a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2b3a6:	3b01      	subs	r3, #1
   2b3a8:	2b00      	cmp	r3, #0
   2b3aa:	931f      	str	r3, [sp, #124]	; 0x7c
   2b3ac:	bfbd      	ittte	lt
   2b3ae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   2b3b0:	f1c3 0301 	rsblt	r3, r3, #1
   2b3b4:	222d      	movlt	r2, #45	; 0x2d
   2b3b6:	222b      	movge	r2, #43	; 0x2b
   2b3b8:	2b09      	cmp	r3, #9
   2b3ba:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   2b3be:	f340 8116 	ble.w	2b5ee <_svfprintf_r+0x1342>
   2b3c2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
   2b3c6:	4620      	mov	r0, r4
   2b3c8:	4dab      	ldr	r5, [pc, #684]	; (2b678 <_svfprintf_r+0x13cc>)
   2b3ca:	e000      	b.n	2b3ce <_svfprintf_r+0x1122>
   2b3cc:	4610      	mov	r0, r2
   2b3ce:	fb85 1203 	smull	r1, r2, r5, r3
   2b3d2:	17d9      	asrs	r1, r3, #31
   2b3d4:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   2b3d8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   2b3dc:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   2b3e0:	3230      	adds	r2, #48	; 0x30
   2b3e2:	2909      	cmp	r1, #9
   2b3e4:	f800 2c01 	strb.w	r2, [r0, #-1]
   2b3e8:	460b      	mov	r3, r1
   2b3ea:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   2b3ee:	dced      	bgt.n	2b3cc <_svfprintf_r+0x1120>
   2b3f0:	3330      	adds	r3, #48	; 0x30
   2b3f2:	3802      	subs	r0, #2
   2b3f4:	b2d9      	uxtb	r1, r3
   2b3f6:	4284      	cmp	r4, r0
   2b3f8:	f802 1c01 	strb.w	r1, [r2, #-1]
   2b3fc:	f240 8165 	bls.w	2b6ca <_svfprintf_r+0x141e>
   2b400:	f10d 0086 	add.w	r0, sp, #134	; 0x86
   2b404:	4613      	mov	r3, r2
   2b406:	e001      	b.n	2b40c <_svfprintf_r+0x1160>
   2b408:	f813 1b01 	ldrb.w	r1, [r3], #1
   2b40c:	f800 1b01 	strb.w	r1, [r0], #1
   2b410:	42a3      	cmp	r3, r4
   2b412:	d1f9      	bne.n	2b408 <_svfprintf_r+0x115c>
   2b414:	3301      	adds	r3, #1
   2b416:	1a9b      	subs	r3, r3, r2
   2b418:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   2b41c:	4413      	add	r3, r2
   2b41e:	aa21      	add	r2, sp, #132	; 0x84
   2b420:	1a9b      	subs	r3, r3, r2
   2b422:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2b424:	931b      	str	r3, [sp, #108]	; 0x6c
   2b426:	2a01      	cmp	r2, #1
   2b428:	4413      	add	r3, r2
   2b42a:	930e      	str	r3, [sp, #56]	; 0x38
   2b42c:	f340 8119 	ble.w	2b662 <_svfprintf_r+0x13b6>
   2b430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b432:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2b434:	4413      	add	r3, r2
   2b436:	930e      	str	r3, [sp, #56]	; 0x38
   2b438:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2b43c:	9308      	str	r3, [sp, #32]
   2b43e:	2300      	movs	r3, #0
   2b440:	9312      	str	r3, [sp, #72]	; 0x48
   2b442:	e6cf      	b.n	2b1e4 <_svfprintf_r+0xf38>
   2b444:	aa25      	add	r2, sp, #148	; 0x94
   2b446:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b448:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b44a:	f001 ff01 	bl	2d250 <__ssprint_r>
   2b44e:	2800      	cmp	r0, #0
   2b450:	f47e affe 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2b454:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b456:	46c8      	mov	r8, r9
   2b458:	e4d7      	b.n	2ae0a <_svfprintf_r+0xb5e>
   2b45a:	4623      	mov	r3, r4
   2b45c:	e6a2      	b.n	2b1a4 <_svfprintf_r+0xef8>
   2b45e:	aa25      	add	r2, sp, #148	; 0x94
   2b460:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b462:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b464:	f001 fef4 	bl	2d250 <__ssprint_r>
   2b468:	2800      	cmp	r0, #0
   2b46a:	f47e aff1 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2b46e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2b470:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b472:	46c8      	mov	r8, r9
   2b474:	e5ae      	b.n	2afd4 <_svfprintf_r+0xd28>
   2b476:	aa25      	add	r2, sp, #148	; 0x94
   2b478:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b47a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b47c:	f001 fee8 	bl	2d250 <__ssprint_r>
   2b480:	2800      	cmp	r0, #0
   2b482:	f47e afe5 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2b486:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2b488:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2b48a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b48c:	1a9a      	subs	r2, r3, r2
   2b48e:	46c8      	mov	r8, r9
   2b490:	e5b8      	b.n	2b004 <_svfprintf_r+0xd58>
   2b492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b494:	9612      	str	r6, [sp, #72]	; 0x48
   2b496:	2b06      	cmp	r3, #6
   2b498:	bf28      	it	cs
   2b49a:	2306      	movcs	r3, #6
   2b49c:	960a      	str	r6, [sp, #40]	; 0x28
   2b49e:	4637      	mov	r7, r6
   2b4a0:	9308      	str	r3, [sp, #32]
   2b4a2:	950f      	str	r5, [sp, #60]	; 0x3c
   2b4a4:	f8cd b01c 	str.w	fp, [sp, #28]
   2b4a8:	930e      	str	r3, [sp, #56]	; 0x38
   2b4aa:	4e74      	ldr	r6, [pc, #464]	; (2b67c <_svfprintf_r+0x13d0>)
   2b4ac:	f7ff b816 	b.w	2a4dc <_svfprintf_r+0x230>
   2b4b0:	a823      	add	r0, sp, #140	; 0x8c
   2b4b2:	a920      	add	r1, sp, #128	; 0x80
   2b4b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2b4b6:	9004      	str	r0, [sp, #16]
   2b4b8:	9103      	str	r1, [sp, #12]
   2b4ba:	a81f      	add	r0, sp, #124	; 0x7c
   2b4bc:	2103      	movs	r1, #3
   2b4be:	9002      	str	r0, [sp, #8]
   2b4c0:	9a08      	ldr	r2, [sp, #32]
   2b4c2:	9501      	str	r5, [sp, #4]
   2b4c4:	463b      	mov	r3, r7
   2b4c6:	9100      	str	r1, [sp, #0]
   2b4c8:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b4ca:	f000 f9c1 	bl	2b850 <_dtoa_r>
   2b4ce:	4606      	mov	r6, r0
   2b4d0:	1944      	adds	r4, r0, r5
   2b4d2:	e72b      	b.n	2b32c <_svfprintf_r+0x1080>
   2b4d4:	2306      	movs	r3, #6
   2b4d6:	930a      	str	r3, [sp, #40]	; 0x28
   2b4d8:	e61d      	b.n	2b116 <_svfprintf_r+0xe6a>
   2b4da:	272d      	movs	r7, #45	; 0x2d
   2b4dc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2b4e0:	f7ff bacd 	b.w	2aa7e <_svfprintf_r+0x7d2>
   2b4e4:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2b4e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2b4e8:	4413      	add	r3, r2
   2b4ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2b4ec:	930e      	str	r3, [sp, #56]	; 0x38
   2b4ee:	2a00      	cmp	r2, #0
   2b4f0:	f340 80b0 	ble.w	2b654 <_svfprintf_r+0x13a8>
   2b4f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2b4f8:	9308      	str	r3, [sp, #32]
   2b4fa:	2367      	movs	r3, #103	; 0x67
   2b4fc:	9311      	str	r3, [sp, #68]	; 0x44
   2b4fe:	e671      	b.n	2b1e4 <_svfprintf_r+0xf38>
   2b500:	2b00      	cmp	r3, #0
   2b502:	f340 80c3 	ble.w	2b68c <_svfprintf_r+0x13e0>
   2b506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2b508:	2a00      	cmp	r2, #0
   2b50a:	f040 8099 	bne.w	2b640 <_svfprintf_r+0x1394>
   2b50e:	f01b 0f01 	tst.w	fp, #1
   2b512:	f040 8095 	bne.w	2b640 <_svfprintf_r+0x1394>
   2b516:	9308      	str	r3, [sp, #32]
   2b518:	930e      	str	r3, [sp, #56]	; 0x38
   2b51a:	e663      	b.n	2b1e4 <_svfprintf_r+0xf38>
   2b51c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b51e:	9308      	str	r3, [sp, #32]
   2b520:	930e      	str	r3, [sp, #56]	; 0x38
   2b522:	900a      	str	r0, [sp, #40]	; 0x28
   2b524:	950f      	str	r5, [sp, #60]	; 0x3c
   2b526:	f8cd b01c 	str.w	fp, [sp, #28]
   2b52a:	9012      	str	r0, [sp, #72]	; 0x48
   2b52c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2b530:	f7fe bfd4 	b.w	2a4dc <_svfprintf_r+0x230>
   2b534:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b536:	2b47      	cmp	r3, #71	; 0x47
   2b538:	f47f ae20 	bne.w	2b17c <_svfprintf_r+0xed0>
   2b53c:	f01b 0f01 	tst.w	fp, #1
   2b540:	f47f aeee 	bne.w	2b320 <_svfprintf_r+0x1074>
   2b544:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2b546:	1b9b      	subs	r3, r3, r6
   2b548:	9313      	str	r3, [sp, #76]	; 0x4c
   2b54a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b54c:	2b47      	cmp	r3, #71	; 0x47
   2b54e:	f43f af18 	beq.w	2b382 <_svfprintf_r+0x10d6>
   2b552:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2b554:	9312      	str	r3, [sp, #72]	; 0x48
   2b556:	e721      	b.n	2b39c <_svfprintf_r+0x10f0>
   2b558:	424f      	negs	r7, r1
   2b55a:	3110      	adds	r1, #16
   2b55c:	4d48      	ldr	r5, [pc, #288]	; (2b680 <_svfprintf_r+0x13d4>)
   2b55e:	da2f      	bge.n	2b5c0 <_svfprintf_r+0x1314>
   2b560:	2410      	movs	r4, #16
   2b562:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2b566:	e004      	b.n	2b572 <_svfprintf_r+0x12c6>
   2b568:	f108 0808 	add.w	r8, r8, #8
   2b56c:	3f10      	subs	r7, #16
   2b56e:	2f10      	cmp	r7, #16
   2b570:	dd26      	ble.n	2b5c0 <_svfprintf_r+0x1314>
   2b572:	3301      	adds	r3, #1
   2b574:	3210      	adds	r2, #16
   2b576:	2b07      	cmp	r3, #7
   2b578:	9227      	str	r2, [sp, #156]	; 0x9c
   2b57a:	9326      	str	r3, [sp, #152]	; 0x98
   2b57c:	f8c8 5000 	str.w	r5, [r8]
   2b580:	f8c8 4004 	str.w	r4, [r8, #4]
   2b584:	ddf0      	ble.n	2b568 <_svfprintf_r+0x12bc>
   2b586:	aa25      	add	r2, sp, #148	; 0x94
   2b588:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b58a:	4658      	mov	r0, fp
   2b58c:	f001 fe60 	bl	2d250 <__ssprint_r>
   2b590:	2800      	cmp	r0, #0
   2b592:	f47e af5d 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2b596:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2b598:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b59a:	46c8      	mov	r8, r9
   2b59c:	e7e6      	b.n	2b56c <_svfprintf_r+0x12c0>
   2b59e:	aa25      	add	r2, sp, #148	; 0x94
   2b5a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b5a2:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b5a4:	f001 fe54 	bl	2d250 <__ssprint_r>
   2b5a8:	2800      	cmp	r0, #0
   2b5aa:	f47e af51 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2b5ae:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2b5b0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2b5b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b5b4:	46c8      	mov	r8, r9
   2b5b6:	e667      	b.n	2b288 <_svfprintf_r+0xfdc>
   2b5b8:	2000      	movs	r0, #0
   2b5ba:	900a      	str	r0, [sp, #40]	; 0x28
   2b5bc:	f7fe bed0 	b.w	2a360 <_svfprintf_r+0xb4>
   2b5c0:	3301      	adds	r3, #1
   2b5c2:	443a      	add	r2, r7
   2b5c4:	2b07      	cmp	r3, #7
   2b5c6:	e888 00a0 	stmia.w	r8, {r5, r7}
   2b5ca:	9227      	str	r2, [sp, #156]	; 0x9c
   2b5cc:	9326      	str	r3, [sp, #152]	; 0x98
   2b5ce:	f108 0808 	add.w	r8, r8, #8
   2b5d2:	f77f ae5c 	ble.w	2b28e <_svfprintf_r+0xfe2>
   2b5d6:	aa25      	add	r2, sp, #148	; 0x94
   2b5d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b5da:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b5dc:	f001 fe38 	bl	2d250 <__ssprint_r>
   2b5e0:	2800      	cmp	r0, #0
   2b5e2:	f47e af35 	bne.w	2a450 <_svfprintf_r+0x1a4>
   2b5e6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2b5e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b5ea:	46c8      	mov	r8, r9
   2b5ec:	e64f      	b.n	2b28e <_svfprintf_r+0xfe2>
   2b5ee:	3330      	adds	r3, #48	; 0x30
   2b5f0:	2230      	movs	r2, #48	; 0x30
   2b5f2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   2b5f6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   2b5fa:	ab22      	add	r3, sp, #136	; 0x88
   2b5fc:	e70f      	b.n	2b41e <_svfprintf_r+0x1172>
   2b5fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2b600:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2b602:	4413      	add	r3, r2
   2b604:	930e      	str	r3, [sp, #56]	; 0x38
   2b606:	e775      	b.n	2b4f4 <_svfprintf_r+0x1248>
   2b608:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2b60a:	e5cb      	b.n	2b1a4 <_svfprintf_r+0xef8>
   2b60c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2b60e:	4e1d      	ldr	r6, [pc, #116]	; (2b684 <_svfprintf_r+0x13d8>)
   2b610:	2b00      	cmp	r3, #0
   2b612:	bfb6      	itet	lt
   2b614:	272d      	movlt	r7, #45	; 0x2d
   2b616:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   2b61a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
   2b61e:	4b1a      	ldr	r3, [pc, #104]	; (2b688 <_svfprintf_r+0x13dc>)
   2b620:	f7ff ba2f 	b.w	2aa82 <_svfprintf_r+0x7d6>
   2b624:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2b626:	9808      	ldr	r0, [sp, #32]
   2b628:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2b62a:	4639      	mov	r1, r7
   2b62c:	f7d5 fcf6 	bl	101c <__aeabi_dcmpeq>
   2b630:	2800      	cmp	r0, #0
   2b632:	f47f ae7f 	bne.w	2b334 <_svfprintf_r+0x1088>
   2b636:	f1c5 0501 	rsb	r5, r5, #1
   2b63a:	951f      	str	r5, [sp, #124]	; 0x7c
   2b63c:	442c      	add	r4, r5
   2b63e:	e59e      	b.n	2b17e <_svfprintf_r+0xed2>
   2b640:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2b642:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2b644:	4413      	add	r3, r2
   2b646:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2b648:	441a      	add	r2, r3
   2b64a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2b64e:	920e      	str	r2, [sp, #56]	; 0x38
   2b650:	9308      	str	r3, [sp, #32]
   2b652:	e5c7      	b.n	2b1e4 <_svfprintf_r+0xf38>
   2b654:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2b656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b658:	f1c3 0301 	rsb	r3, r3, #1
   2b65c:	441a      	add	r2, r3
   2b65e:	4613      	mov	r3, r2
   2b660:	e7d0      	b.n	2b604 <_svfprintf_r+0x1358>
   2b662:	f01b 0301 	ands.w	r3, fp, #1
   2b666:	9312      	str	r3, [sp, #72]	; 0x48
   2b668:	f47f aee2 	bne.w	2b430 <_svfprintf_r+0x1184>
   2b66c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b66e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2b672:	9308      	str	r3, [sp, #32]
   2b674:	e5b6      	b.n	2b1e4 <_svfprintf_r+0xf38>
   2b676:	bf00      	nop
   2b678:	66666667 	.word	0x66666667
   2b67c:	000314e0 	.word	0x000314e0
   2b680:	000314f8 	.word	0x000314f8
   2b684:	000314b4 	.word	0x000314b4
   2b688:	000314b0 	.word	0x000314b0
   2b68c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b68e:	b913      	cbnz	r3, 2b696 <_svfprintf_r+0x13ea>
   2b690:	f01b 0f01 	tst.w	fp, #1
   2b694:	d002      	beq.n	2b69c <_svfprintf_r+0x13f0>
   2b696:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2b698:	3301      	adds	r3, #1
   2b69a:	e7d4      	b.n	2b646 <_svfprintf_r+0x139a>
   2b69c:	2301      	movs	r3, #1
   2b69e:	e73a      	b.n	2b516 <_svfprintf_r+0x126a>
   2b6a0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2b6a2:	f89a 3001 	ldrb.w	r3, [sl, #1]
   2b6a6:	6828      	ldr	r0, [r5, #0]
   2b6a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   2b6ac:	900a      	str	r0, [sp, #40]	; 0x28
   2b6ae:	4628      	mov	r0, r5
   2b6b0:	3004      	adds	r0, #4
   2b6b2:	46a2      	mov	sl, r4
   2b6b4:	900f      	str	r0, [sp, #60]	; 0x3c
   2b6b6:	f7fe be51 	b.w	2a35c <_svfprintf_r+0xb0>
   2b6ba:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2b6be:	f7ff b867 	b.w	2a790 <_svfprintf_r+0x4e4>
   2b6c2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2b6c6:	f7ff ba15 	b.w	2aaf4 <_svfprintf_r+0x848>
   2b6ca:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   2b6ce:	e6a6      	b.n	2b41e <_svfprintf_r+0x1172>
   2b6d0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2b6d4:	f7ff b8eb 	b.w	2a8ae <_svfprintf_r+0x602>
   2b6d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2b6da:	230c      	movs	r3, #12
   2b6dc:	6013      	str	r3, [r2, #0]
   2b6de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b6e2:	9309      	str	r3, [sp, #36]	; 0x24
   2b6e4:	f7fe bebd 	b.w	2a462 <_svfprintf_r+0x1b6>
   2b6e8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2b6ec:	f7ff b99a 	b.w	2aa24 <_svfprintf_r+0x778>
   2b6f0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2b6f4:	f7ff b976 	b.w	2a9e4 <_svfprintf_r+0x738>
   2b6f8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2b6fc:	f7ff b959 	b.w	2a9b2 <_svfprintf_r+0x706>
   2b700:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2b704:	f7ff b912 	b.w	2a92c <_svfprintf_r+0x680>

0002b708 <__ascii_wctomb>:
   2b708:	b121      	cbz	r1, 2b714 <__ascii_wctomb+0xc>
   2b70a:	2aff      	cmp	r2, #255	; 0xff
   2b70c:	d804      	bhi.n	2b718 <__ascii_wctomb+0x10>
   2b70e:	700a      	strb	r2, [r1, #0]
   2b710:	2001      	movs	r0, #1
   2b712:	4770      	bx	lr
   2b714:	4608      	mov	r0, r1
   2b716:	4770      	bx	lr
   2b718:	238a      	movs	r3, #138	; 0x8a
   2b71a:	6003      	str	r3, [r0, #0]
   2b71c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b720:	4770      	bx	lr
   2b722:	bf00      	nop

0002b724 <quorem>:
   2b724:	6902      	ldr	r2, [r0, #16]
   2b726:	690b      	ldr	r3, [r1, #16]
   2b728:	4293      	cmp	r3, r2
   2b72a:	f300 808d 	bgt.w	2b848 <quorem+0x124>
   2b72e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b732:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   2b736:	f101 0714 	add.w	r7, r1, #20
   2b73a:	f100 0b14 	add.w	fp, r0, #20
   2b73e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   2b742:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   2b746:	ea4f 0488 	mov.w	r4, r8, lsl #2
   2b74a:	b083      	sub	sp, #12
   2b74c:	3201      	adds	r2, #1
   2b74e:	fbb3 f9f2 	udiv	r9, r3, r2
   2b752:	eb0b 0304 	add.w	r3, fp, r4
   2b756:	9400      	str	r4, [sp, #0]
   2b758:	eb07 0a04 	add.w	sl, r7, r4
   2b75c:	9301      	str	r3, [sp, #4]
   2b75e:	f1b9 0f00 	cmp.w	r9, #0
   2b762:	d039      	beq.n	2b7d8 <quorem+0xb4>
   2b764:	2500      	movs	r5, #0
   2b766:	462e      	mov	r6, r5
   2b768:	46bc      	mov	ip, r7
   2b76a:	46de      	mov	lr, fp
   2b76c:	f85c 4b04 	ldr.w	r4, [ip], #4
   2b770:	f8de 3000 	ldr.w	r3, [lr]
   2b774:	b2a2      	uxth	r2, r4
   2b776:	fb09 5502 	mla	r5, r9, r2, r5
   2b77a:	0c22      	lsrs	r2, r4, #16
   2b77c:	0c2c      	lsrs	r4, r5, #16
   2b77e:	fb09 4202 	mla	r2, r9, r2, r4
   2b782:	b2ad      	uxth	r5, r5
   2b784:	1b75      	subs	r5, r6, r5
   2b786:	b296      	uxth	r6, r2
   2b788:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   2b78c:	fa15 f383 	uxtah	r3, r5, r3
   2b790:	eb06 4623 	add.w	r6, r6, r3, asr #16
   2b794:	b29b      	uxth	r3, r3
   2b796:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2b79a:	45e2      	cmp	sl, ip
   2b79c:	ea4f 4512 	mov.w	r5, r2, lsr #16
   2b7a0:	f84e 3b04 	str.w	r3, [lr], #4
   2b7a4:	ea4f 4626 	mov.w	r6, r6, asr #16
   2b7a8:	d2e0      	bcs.n	2b76c <quorem+0x48>
   2b7aa:	9b00      	ldr	r3, [sp, #0]
   2b7ac:	f85b 3003 	ldr.w	r3, [fp, r3]
   2b7b0:	b993      	cbnz	r3, 2b7d8 <quorem+0xb4>
   2b7b2:	9c01      	ldr	r4, [sp, #4]
   2b7b4:	1f23      	subs	r3, r4, #4
   2b7b6:	459b      	cmp	fp, r3
   2b7b8:	d20c      	bcs.n	2b7d4 <quorem+0xb0>
   2b7ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2b7be:	b94b      	cbnz	r3, 2b7d4 <quorem+0xb0>
   2b7c0:	f1a4 0308 	sub.w	r3, r4, #8
   2b7c4:	e002      	b.n	2b7cc <quorem+0xa8>
   2b7c6:	681a      	ldr	r2, [r3, #0]
   2b7c8:	3b04      	subs	r3, #4
   2b7ca:	b91a      	cbnz	r2, 2b7d4 <quorem+0xb0>
   2b7cc:	459b      	cmp	fp, r3
   2b7ce:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2b7d2:	d3f8      	bcc.n	2b7c6 <quorem+0xa2>
   2b7d4:	f8c0 8010 	str.w	r8, [r0, #16]
   2b7d8:	4604      	mov	r4, r0
   2b7da:	f001 fc2b 	bl	2d034 <__mcmp>
   2b7de:	2800      	cmp	r0, #0
   2b7e0:	db2e      	blt.n	2b840 <quorem+0x11c>
   2b7e2:	f109 0901 	add.w	r9, r9, #1
   2b7e6:	465d      	mov	r5, fp
   2b7e8:	2300      	movs	r3, #0
   2b7ea:	f857 1b04 	ldr.w	r1, [r7], #4
   2b7ee:	6828      	ldr	r0, [r5, #0]
   2b7f0:	b28a      	uxth	r2, r1
   2b7f2:	1a9a      	subs	r2, r3, r2
   2b7f4:	0c0b      	lsrs	r3, r1, #16
   2b7f6:	fa12 f280 	uxtah	r2, r2, r0
   2b7fa:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   2b7fe:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2b802:	b292      	uxth	r2, r2
   2b804:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2b808:	45ba      	cmp	sl, r7
   2b80a:	f845 2b04 	str.w	r2, [r5], #4
   2b80e:	ea4f 4323 	mov.w	r3, r3, asr #16
   2b812:	d2ea      	bcs.n	2b7ea <quorem+0xc6>
   2b814:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   2b818:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   2b81c:	b982      	cbnz	r2, 2b840 <quorem+0x11c>
   2b81e:	1f1a      	subs	r2, r3, #4
   2b820:	4593      	cmp	fp, r2
   2b822:	d20b      	bcs.n	2b83c <quorem+0x118>
   2b824:	f853 2c04 	ldr.w	r2, [r3, #-4]
   2b828:	b942      	cbnz	r2, 2b83c <quorem+0x118>
   2b82a:	3b08      	subs	r3, #8
   2b82c:	e002      	b.n	2b834 <quorem+0x110>
   2b82e:	681a      	ldr	r2, [r3, #0]
   2b830:	3b04      	subs	r3, #4
   2b832:	b91a      	cbnz	r2, 2b83c <quorem+0x118>
   2b834:	459b      	cmp	fp, r3
   2b836:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2b83a:	d3f8      	bcc.n	2b82e <quorem+0x10a>
   2b83c:	f8c4 8010 	str.w	r8, [r4, #16]
   2b840:	4648      	mov	r0, r9
   2b842:	b003      	add	sp, #12
   2b844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b848:	2000      	movs	r0, #0
   2b84a:	4770      	bx	lr
   2b84c:	0000      	movs	r0, r0
	...

0002b850 <_dtoa_r>:
   2b850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b854:	6c01      	ldr	r1, [r0, #64]	; 0x40
   2b856:	b09b      	sub	sp, #108	; 0x6c
   2b858:	4604      	mov	r4, r0
   2b85a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   2b85c:	4692      	mov	sl, r2
   2b85e:	469b      	mov	fp, r3
   2b860:	b141      	cbz	r1, 2b874 <_dtoa_r+0x24>
   2b862:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2b864:	604a      	str	r2, [r1, #4]
   2b866:	2301      	movs	r3, #1
   2b868:	4093      	lsls	r3, r2
   2b86a:	608b      	str	r3, [r1, #8]
   2b86c:	f001 fa0a 	bl	2cc84 <_Bfree>
   2b870:	2300      	movs	r3, #0
   2b872:	6423      	str	r3, [r4, #64]	; 0x40
   2b874:	f1bb 0f00 	cmp.w	fp, #0
   2b878:	465d      	mov	r5, fp
   2b87a:	db35      	blt.n	2b8e8 <_dtoa_r+0x98>
   2b87c:	2300      	movs	r3, #0
   2b87e:	6033      	str	r3, [r6, #0]
   2b880:	4b9d      	ldr	r3, [pc, #628]	; (2baf8 <_dtoa_r+0x2a8>)
   2b882:	43ab      	bics	r3, r5
   2b884:	d015      	beq.n	2b8b2 <_dtoa_r+0x62>
   2b886:	4650      	mov	r0, sl
   2b888:	4659      	mov	r1, fp
   2b88a:	2200      	movs	r2, #0
   2b88c:	2300      	movs	r3, #0
   2b88e:	f7d5 fbc5 	bl	101c <__aeabi_dcmpeq>
   2b892:	4680      	mov	r8, r0
   2b894:	2800      	cmp	r0, #0
   2b896:	d02d      	beq.n	2b8f4 <_dtoa_r+0xa4>
   2b898:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2b89a:	2301      	movs	r3, #1
   2b89c:	6013      	str	r3, [r2, #0]
   2b89e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2b8a0:	2b00      	cmp	r3, #0
   2b8a2:	f000 80bd 	beq.w	2ba20 <_dtoa_r+0x1d0>
   2b8a6:	4895      	ldr	r0, [pc, #596]	; (2bafc <_dtoa_r+0x2ac>)
   2b8a8:	6018      	str	r0, [r3, #0]
   2b8aa:	3801      	subs	r0, #1
   2b8ac:	b01b      	add	sp, #108	; 0x6c
   2b8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b8b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2b8b4:	f242 730f 	movw	r3, #9999	; 0x270f
   2b8b8:	6013      	str	r3, [r2, #0]
   2b8ba:	f1ba 0f00 	cmp.w	sl, #0
   2b8be:	d10d      	bne.n	2b8dc <_dtoa_r+0x8c>
   2b8c0:	f3c5 0513 	ubfx	r5, r5, #0, #20
   2b8c4:	b955      	cbnz	r5, 2b8dc <_dtoa_r+0x8c>
   2b8c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2b8c8:	488d      	ldr	r0, [pc, #564]	; (2bb00 <_dtoa_r+0x2b0>)
   2b8ca:	2b00      	cmp	r3, #0
   2b8cc:	d0ee      	beq.n	2b8ac <_dtoa_r+0x5c>
   2b8ce:	f100 0308 	add.w	r3, r0, #8
   2b8d2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   2b8d4:	6013      	str	r3, [r2, #0]
   2b8d6:	b01b      	add	sp, #108	; 0x6c
   2b8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b8dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2b8de:	4889      	ldr	r0, [pc, #548]	; (2bb04 <_dtoa_r+0x2b4>)
   2b8e0:	2b00      	cmp	r3, #0
   2b8e2:	d0e3      	beq.n	2b8ac <_dtoa_r+0x5c>
   2b8e4:	1cc3      	adds	r3, r0, #3
   2b8e6:	e7f4      	b.n	2b8d2 <_dtoa_r+0x82>
   2b8e8:	2301      	movs	r3, #1
   2b8ea:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   2b8ee:	6033      	str	r3, [r6, #0]
   2b8f0:	46ab      	mov	fp, r5
   2b8f2:	e7c5      	b.n	2b880 <_dtoa_r+0x30>
   2b8f4:	aa18      	add	r2, sp, #96	; 0x60
   2b8f6:	ab19      	add	r3, sp, #100	; 0x64
   2b8f8:	9201      	str	r2, [sp, #4]
   2b8fa:	9300      	str	r3, [sp, #0]
   2b8fc:	4652      	mov	r2, sl
   2b8fe:	465b      	mov	r3, fp
   2b900:	4620      	mov	r0, r4
   2b902:	f001 fc37 	bl	2d174 <__d2b>
   2b906:	0d2b      	lsrs	r3, r5, #20
   2b908:	4681      	mov	r9, r0
   2b90a:	d071      	beq.n	2b9f0 <_dtoa_r+0x1a0>
   2b90c:	f3cb 0213 	ubfx	r2, fp, #0, #20
   2b910:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   2b914:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2b916:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   2b91a:	4650      	mov	r0, sl
   2b91c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   2b920:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   2b924:	2200      	movs	r2, #0
   2b926:	4b78      	ldr	r3, [pc, #480]	; (2bb08 <_dtoa_r+0x2b8>)
   2b928:	f7d4 ff5c 	bl	7e4 <__aeabi_dsub>
   2b92c:	a36c      	add	r3, pc, #432	; (adr r3, 2bae0 <_dtoa_r+0x290>)
   2b92e:	e9d3 2300 	ldrd	r2, r3, [r3]
   2b932:	f7d5 f90b 	bl	b4c <__aeabi_dmul>
   2b936:	a36c      	add	r3, pc, #432	; (adr r3, 2bae8 <_dtoa_r+0x298>)
   2b938:	e9d3 2300 	ldrd	r2, r3, [r3]
   2b93c:	f7d4 ff54 	bl	7e8 <__adddf3>
   2b940:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2b944:	4630      	mov	r0, r6
   2b946:	f7d5 f89b 	bl	a80 <__aeabi_i2d>
   2b94a:	a369      	add	r3, pc, #420	; (adr r3, 2baf0 <_dtoa_r+0x2a0>)
   2b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
   2b950:	f7d5 f8fc 	bl	b4c <__aeabi_dmul>
   2b954:	4602      	mov	r2, r0
   2b956:	460b      	mov	r3, r1
   2b958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2b95c:	f7d4 ff44 	bl	7e8 <__adddf3>
   2b960:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2b964:	f7d5 fba2 	bl	10ac <__aeabi_d2iz>
   2b968:	2200      	movs	r2, #0
   2b96a:	9002      	str	r0, [sp, #8]
   2b96c:	2300      	movs	r3, #0
   2b96e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2b972:	f7d5 fb5d 	bl	1030 <__aeabi_dcmplt>
   2b976:	2800      	cmp	r0, #0
   2b978:	f040 8173 	bne.w	2bc62 <_dtoa_r+0x412>
   2b97c:	9d02      	ldr	r5, [sp, #8]
   2b97e:	2d16      	cmp	r5, #22
   2b980:	f200 815d 	bhi.w	2bc3e <_dtoa_r+0x3ee>
   2b984:	4b61      	ldr	r3, [pc, #388]	; (2bb0c <_dtoa_r+0x2bc>)
   2b986:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   2b98a:	e9d3 0100 	ldrd	r0, r1, [r3]
   2b98e:	4652      	mov	r2, sl
   2b990:	465b      	mov	r3, fp
   2b992:	f7d5 fb6b 	bl	106c <__aeabi_dcmpgt>
   2b996:	2800      	cmp	r0, #0
   2b998:	f000 81c5 	beq.w	2bd26 <_dtoa_r+0x4d6>
   2b99c:	1e6b      	subs	r3, r5, #1
   2b99e:	9302      	str	r3, [sp, #8]
   2b9a0:	2300      	movs	r3, #0
   2b9a2:	930e      	str	r3, [sp, #56]	; 0x38
   2b9a4:	1bbf      	subs	r7, r7, r6
   2b9a6:	1e7b      	subs	r3, r7, #1
   2b9a8:	9306      	str	r3, [sp, #24]
   2b9aa:	f100 8154 	bmi.w	2bc56 <_dtoa_r+0x406>
   2b9ae:	2300      	movs	r3, #0
   2b9b0:	9308      	str	r3, [sp, #32]
   2b9b2:	9b02      	ldr	r3, [sp, #8]
   2b9b4:	2b00      	cmp	r3, #0
   2b9b6:	f2c0 8145 	blt.w	2bc44 <_dtoa_r+0x3f4>
   2b9ba:	9a06      	ldr	r2, [sp, #24]
   2b9bc:	930d      	str	r3, [sp, #52]	; 0x34
   2b9be:	4611      	mov	r1, r2
   2b9c0:	4419      	add	r1, r3
   2b9c2:	2300      	movs	r3, #0
   2b9c4:	9106      	str	r1, [sp, #24]
   2b9c6:	930c      	str	r3, [sp, #48]	; 0x30
   2b9c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2b9ca:	2b09      	cmp	r3, #9
   2b9cc:	d82a      	bhi.n	2ba24 <_dtoa_r+0x1d4>
   2b9ce:	2b05      	cmp	r3, #5
   2b9d0:	f340 865b 	ble.w	2c68a <_dtoa_r+0xe3a>
   2b9d4:	3b04      	subs	r3, #4
   2b9d6:	9324      	str	r3, [sp, #144]	; 0x90
   2b9d8:	2500      	movs	r5, #0
   2b9da:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2b9dc:	3b02      	subs	r3, #2
   2b9de:	2b03      	cmp	r3, #3
   2b9e0:	f200 8642 	bhi.w	2c668 <_dtoa_r+0xe18>
   2b9e4:	e8df f013 	tbh	[pc, r3, lsl #1]
   2b9e8:	02c903d4 	.word	0x02c903d4
   2b9ec:	046103df 	.word	0x046103df
   2b9f0:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2b9f2:	9e19      	ldr	r6, [sp, #100]	; 0x64
   2b9f4:	443e      	add	r6, r7
   2b9f6:	f206 4332 	addw	r3, r6, #1074	; 0x432
   2b9fa:	2b20      	cmp	r3, #32
   2b9fc:	f340 818e 	ble.w	2bd1c <_dtoa_r+0x4cc>
   2ba00:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   2ba04:	f206 4012 	addw	r0, r6, #1042	; 0x412
   2ba08:	409d      	lsls	r5, r3
   2ba0a:	fa2a f000 	lsr.w	r0, sl, r0
   2ba0e:	4328      	orrs	r0, r5
   2ba10:	f7d5 f826 	bl	a60 <__aeabi_ui2d>
   2ba14:	2301      	movs	r3, #1
   2ba16:	3e01      	subs	r6, #1
   2ba18:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   2ba1c:	9314      	str	r3, [sp, #80]	; 0x50
   2ba1e:	e781      	b.n	2b924 <_dtoa_r+0xd4>
   2ba20:	483b      	ldr	r0, [pc, #236]	; (2bb10 <_dtoa_r+0x2c0>)
   2ba22:	e743      	b.n	2b8ac <_dtoa_r+0x5c>
   2ba24:	2100      	movs	r1, #0
   2ba26:	6461      	str	r1, [r4, #68]	; 0x44
   2ba28:	4620      	mov	r0, r4
   2ba2a:	9125      	str	r1, [sp, #148]	; 0x94
   2ba2c:	f001 f904 	bl	2cc38 <_Balloc>
   2ba30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ba34:	930a      	str	r3, [sp, #40]	; 0x28
   2ba36:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2ba38:	930f      	str	r3, [sp, #60]	; 0x3c
   2ba3a:	2301      	movs	r3, #1
   2ba3c:	9004      	str	r0, [sp, #16]
   2ba3e:	6420      	str	r0, [r4, #64]	; 0x40
   2ba40:	9224      	str	r2, [sp, #144]	; 0x90
   2ba42:	930b      	str	r3, [sp, #44]	; 0x2c
   2ba44:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2ba46:	2b00      	cmp	r3, #0
   2ba48:	f2c0 80d9 	blt.w	2bbfe <_dtoa_r+0x3ae>
   2ba4c:	9a02      	ldr	r2, [sp, #8]
   2ba4e:	2a0e      	cmp	r2, #14
   2ba50:	f300 80d5 	bgt.w	2bbfe <_dtoa_r+0x3ae>
   2ba54:	4b2d      	ldr	r3, [pc, #180]	; (2bb0c <_dtoa_r+0x2bc>)
   2ba56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2ba5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2ba5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   2ba62:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2ba64:	2b00      	cmp	r3, #0
   2ba66:	f2c0 83ba 	blt.w	2c1de <_dtoa_r+0x98e>
   2ba6a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   2ba6e:	4650      	mov	r0, sl
   2ba70:	462a      	mov	r2, r5
   2ba72:	4633      	mov	r3, r6
   2ba74:	4659      	mov	r1, fp
   2ba76:	f7d5 f993 	bl	da0 <__aeabi_ddiv>
   2ba7a:	f7d5 fb17 	bl	10ac <__aeabi_d2iz>
   2ba7e:	4680      	mov	r8, r0
   2ba80:	f7d4 fffe 	bl	a80 <__aeabi_i2d>
   2ba84:	462a      	mov	r2, r5
   2ba86:	4633      	mov	r3, r6
   2ba88:	f7d5 f860 	bl	b4c <__aeabi_dmul>
   2ba8c:	460b      	mov	r3, r1
   2ba8e:	4602      	mov	r2, r0
   2ba90:	4659      	mov	r1, fp
   2ba92:	4650      	mov	r0, sl
   2ba94:	f7d4 fea6 	bl	7e4 <__aeabi_dsub>
   2ba98:	9d04      	ldr	r5, [sp, #16]
   2ba9a:	f108 0330 	add.w	r3, r8, #48	; 0x30
   2ba9e:	702b      	strb	r3, [r5, #0]
   2baa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2baa2:	2b01      	cmp	r3, #1
   2baa4:	4606      	mov	r6, r0
   2baa6:	460f      	mov	r7, r1
   2baa8:	f105 0501 	add.w	r5, r5, #1
   2baac:	d068      	beq.n	2bb80 <_dtoa_r+0x330>
   2baae:	2200      	movs	r2, #0
   2bab0:	4b18      	ldr	r3, [pc, #96]	; (2bb14 <_dtoa_r+0x2c4>)
   2bab2:	f7d5 f84b 	bl	b4c <__aeabi_dmul>
   2bab6:	2200      	movs	r2, #0
   2bab8:	2300      	movs	r3, #0
   2baba:	4606      	mov	r6, r0
   2babc:	460f      	mov	r7, r1
   2babe:	f7d5 faad 	bl	101c <__aeabi_dcmpeq>
   2bac2:	2800      	cmp	r0, #0
   2bac4:	f040 8088 	bne.w	2bbd8 <_dtoa_r+0x388>
   2bac8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   2bacc:	f04f 0a00 	mov.w	sl, #0
   2bad0:	f8df b040 	ldr.w	fp, [pc, #64]	; 2bb14 <_dtoa_r+0x2c4>
   2bad4:	940c      	str	r4, [sp, #48]	; 0x30
   2bad6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2bada:	e028      	b.n	2bb2e <_dtoa_r+0x2de>
   2badc:	f3af 8000 	nop.w
   2bae0:	636f4361 	.word	0x636f4361
   2bae4:	3fd287a7 	.word	0x3fd287a7
   2bae8:	8b60c8b3 	.word	0x8b60c8b3
   2baec:	3fc68a28 	.word	0x3fc68a28
   2baf0:	509f79fb 	.word	0x509f79fb
   2baf4:	3fd34413 	.word	0x3fd34413
   2baf8:	7ff00000 	.word	0x7ff00000
   2bafc:	00031021 	.word	0x00031021
   2bb00:	0003160c 	.word	0x0003160c
   2bb04:	00031618 	.word	0x00031618
   2bb08:	3ff80000 	.word	0x3ff80000
   2bb0c:	00031648 	.word	0x00031648
   2bb10:	00031020 	.word	0x00031020
   2bb14:	40240000 	.word	0x40240000
   2bb18:	f7d5 f818 	bl	b4c <__aeabi_dmul>
   2bb1c:	2200      	movs	r2, #0
   2bb1e:	2300      	movs	r3, #0
   2bb20:	4606      	mov	r6, r0
   2bb22:	460f      	mov	r7, r1
   2bb24:	f7d5 fa7a 	bl	101c <__aeabi_dcmpeq>
   2bb28:	2800      	cmp	r0, #0
   2bb2a:	f040 83c1 	bne.w	2c2b0 <_dtoa_r+0xa60>
   2bb2e:	4642      	mov	r2, r8
   2bb30:	464b      	mov	r3, r9
   2bb32:	4630      	mov	r0, r6
   2bb34:	4639      	mov	r1, r7
   2bb36:	f7d5 f933 	bl	da0 <__aeabi_ddiv>
   2bb3a:	f7d5 fab7 	bl	10ac <__aeabi_d2iz>
   2bb3e:	4604      	mov	r4, r0
   2bb40:	f7d4 ff9e 	bl	a80 <__aeabi_i2d>
   2bb44:	4642      	mov	r2, r8
   2bb46:	464b      	mov	r3, r9
   2bb48:	f7d5 f800 	bl	b4c <__aeabi_dmul>
   2bb4c:	4602      	mov	r2, r0
   2bb4e:	460b      	mov	r3, r1
   2bb50:	4630      	mov	r0, r6
   2bb52:	4639      	mov	r1, r7
   2bb54:	f7d4 fe46 	bl	7e4 <__aeabi_dsub>
   2bb58:	f104 0e30 	add.w	lr, r4, #48	; 0x30
   2bb5c:	9e04      	ldr	r6, [sp, #16]
   2bb5e:	f805 eb01 	strb.w	lr, [r5], #1
   2bb62:	eba5 0e06 	sub.w	lr, r5, r6
   2bb66:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2bb68:	45b6      	cmp	lr, r6
   2bb6a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   2bb6e:	4652      	mov	r2, sl
   2bb70:	465b      	mov	r3, fp
   2bb72:	d1d1      	bne.n	2bb18 <_dtoa_r+0x2c8>
   2bb74:	46a0      	mov	r8, r4
   2bb76:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2bb7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2bb7c:	4606      	mov	r6, r0
   2bb7e:	460f      	mov	r7, r1
   2bb80:	4632      	mov	r2, r6
   2bb82:	463b      	mov	r3, r7
   2bb84:	4630      	mov	r0, r6
   2bb86:	4639      	mov	r1, r7
   2bb88:	f7d4 fe2e 	bl	7e8 <__adddf3>
   2bb8c:	4606      	mov	r6, r0
   2bb8e:	460f      	mov	r7, r1
   2bb90:	4602      	mov	r2, r0
   2bb92:	460b      	mov	r3, r1
   2bb94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2bb98:	f7d5 fa4a 	bl	1030 <__aeabi_dcmplt>
   2bb9c:	b948      	cbnz	r0, 2bbb2 <_dtoa_r+0x362>
   2bb9e:	4632      	mov	r2, r6
   2bba0:	463b      	mov	r3, r7
   2bba2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2bba6:	f7d5 fa39 	bl	101c <__aeabi_dcmpeq>
   2bbaa:	b1a8      	cbz	r0, 2bbd8 <_dtoa_r+0x388>
   2bbac:	f018 0f01 	tst.w	r8, #1
   2bbb0:	d012      	beq.n	2bbd8 <_dtoa_r+0x388>
   2bbb2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2bbb6:	9a04      	ldr	r2, [sp, #16]
   2bbb8:	1e6b      	subs	r3, r5, #1
   2bbba:	e004      	b.n	2bbc6 <_dtoa_r+0x376>
   2bbbc:	429a      	cmp	r2, r3
   2bbbe:	f000 8401 	beq.w	2c3c4 <_dtoa_r+0xb74>
   2bbc2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   2bbc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   2bbca:	f103 0501 	add.w	r5, r3, #1
   2bbce:	d0f5      	beq.n	2bbbc <_dtoa_r+0x36c>
   2bbd0:	f108 0801 	add.w	r8, r8, #1
   2bbd4:	f883 8000 	strb.w	r8, [r3]
   2bbd8:	4649      	mov	r1, r9
   2bbda:	4620      	mov	r0, r4
   2bbdc:	f001 f852 	bl	2cc84 <_Bfree>
   2bbe0:	2200      	movs	r2, #0
   2bbe2:	9b02      	ldr	r3, [sp, #8]
   2bbe4:	702a      	strb	r2, [r5, #0]
   2bbe6:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2bbe8:	3301      	adds	r3, #1
   2bbea:	6013      	str	r3, [r2, #0]
   2bbec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2bbee:	2b00      	cmp	r3, #0
   2bbf0:	f000 839e 	beq.w	2c330 <_dtoa_r+0xae0>
   2bbf4:	9804      	ldr	r0, [sp, #16]
   2bbf6:	601d      	str	r5, [r3, #0]
   2bbf8:	b01b      	add	sp, #108	; 0x6c
   2bbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bbfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2bc00:	2a00      	cmp	r2, #0
   2bc02:	d03e      	beq.n	2bc82 <_dtoa_r+0x432>
   2bc04:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2bc06:	2a01      	cmp	r2, #1
   2bc08:	f340 8311 	ble.w	2c22e <_dtoa_r+0x9de>
   2bc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bc0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2bc10:	1e5f      	subs	r7, r3, #1
   2bc12:	42ba      	cmp	r2, r7
   2bc14:	f2c0 838f 	blt.w	2c336 <_dtoa_r+0xae6>
   2bc18:	1bd7      	subs	r7, r2, r7
   2bc1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bc1c:	2b00      	cmp	r3, #0
   2bc1e:	f2c0 848b 	blt.w	2c538 <_dtoa_r+0xce8>
   2bc22:	9d08      	ldr	r5, [sp, #32]
   2bc24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bc26:	9a08      	ldr	r2, [sp, #32]
   2bc28:	441a      	add	r2, r3
   2bc2a:	9208      	str	r2, [sp, #32]
   2bc2c:	9a06      	ldr	r2, [sp, #24]
   2bc2e:	2101      	movs	r1, #1
   2bc30:	441a      	add	r2, r3
   2bc32:	4620      	mov	r0, r4
   2bc34:	9206      	str	r2, [sp, #24]
   2bc36:	f001 f8bf 	bl	2cdb8 <__i2b>
   2bc3a:	4606      	mov	r6, r0
   2bc3c:	e024      	b.n	2bc88 <_dtoa_r+0x438>
   2bc3e:	2301      	movs	r3, #1
   2bc40:	930e      	str	r3, [sp, #56]	; 0x38
   2bc42:	e6af      	b.n	2b9a4 <_dtoa_r+0x154>
   2bc44:	9a08      	ldr	r2, [sp, #32]
   2bc46:	9b02      	ldr	r3, [sp, #8]
   2bc48:	1ad2      	subs	r2, r2, r3
   2bc4a:	425b      	negs	r3, r3
   2bc4c:	930c      	str	r3, [sp, #48]	; 0x30
   2bc4e:	2300      	movs	r3, #0
   2bc50:	9208      	str	r2, [sp, #32]
   2bc52:	930d      	str	r3, [sp, #52]	; 0x34
   2bc54:	e6b8      	b.n	2b9c8 <_dtoa_r+0x178>
   2bc56:	f1c7 0301 	rsb	r3, r7, #1
   2bc5a:	9308      	str	r3, [sp, #32]
   2bc5c:	2300      	movs	r3, #0
   2bc5e:	9306      	str	r3, [sp, #24]
   2bc60:	e6a7      	b.n	2b9b2 <_dtoa_r+0x162>
   2bc62:	9d02      	ldr	r5, [sp, #8]
   2bc64:	4628      	mov	r0, r5
   2bc66:	f7d4 ff0b 	bl	a80 <__aeabi_i2d>
   2bc6a:	4602      	mov	r2, r0
   2bc6c:	460b      	mov	r3, r1
   2bc6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2bc72:	f7d5 f9d3 	bl	101c <__aeabi_dcmpeq>
   2bc76:	2800      	cmp	r0, #0
   2bc78:	f47f ae80 	bne.w	2b97c <_dtoa_r+0x12c>
   2bc7c:	1e6b      	subs	r3, r5, #1
   2bc7e:	9302      	str	r3, [sp, #8]
   2bc80:	e67c      	b.n	2b97c <_dtoa_r+0x12c>
   2bc82:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2bc84:	9d08      	ldr	r5, [sp, #32]
   2bc86:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2bc88:	2d00      	cmp	r5, #0
   2bc8a:	dd0c      	ble.n	2bca6 <_dtoa_r+0x456>
   2bc8c:	9906      	ldr	r1, [sp, #24]
   2bc8e:	2900      	cmp	r1, #0
   2bc90:	460b      	mov	r3, r1
   2bc92:	dd08      	ble.n	2bca6 <_dtoa_r+0x456>
   2bc94:	42a9      	cmp	r1, r5
   2bc96:	9a08      	ldr	r2, [sp, #32]
   2bc98:	bfa8      	it	ge
   2bc9a:	462b      	movge	r3, r5
   2bc9c:	1ad2      	subs	r2, r2, r3
   2bc9e:	1aed      	subs	r5, r5, r3
   2bca0:	1acb      	subs	r3, r1, r3
   2bca2:	9208      	str	r2, [sp, #32]
   2bca4:	9306      	str	r3, [sp, #24]
   2bca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2bca8:	b1d3      	cbz	r3, 2bce0 <_dtoa_r+0x490>
   2bcaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2bcac:	2b00      	cmp	r3, #0
   2bcae:	f000 82b7 	beq.w	2c220 <_dtoa_r+0x9d0>
   2bcb2:	2f00      	cmp	r7, #0
   2bcb4:	dd10      	ble.n	2bcd8 <_dtoa_r+0x488>
   2bcb6:	4631      	mov	r1, r6
   2bcb8:	463a      	mov	r2, r7
   2bcba:	4620      	mov	r0, r4
   2bcbc:	f001 f918 	bl	2cef0 <__pow5mult>
   2bcc0:	464a      	mov	r2, r9
   2bcc2:	4601      	mov	r1, r0
   2bcc4:	4606      	mov	r6, r0
   2bcc6:	4620      	mov	r0, r4
   2bcc8:	f001 f880 	bl	2cdcc <__multiply>
   2bccc:	4649      	mov	r1, r9
   2bcce:	4680      	mov	r8, r0
   2bcd0:	4620      	mov	r0, r4
   2bcd2:	f000 ffd7 	bl	2cc84 <_Bfree>
   2bcd6:	46c1      	mov	r9, r8
   2bcd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2bcda:	1bda      	subs	r2, r3, r7
   2bcdc:	f040 82a1 	bne.w	2c222 <_dtoa_r+0x9d2>
   2bce0:	2101      	movs	r1, #1
   2bce2:	4620      	mov	r0, r4
   2bce4:	f001 f868 	bl	2cdb8 <__i2b>
   2bce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2bcea:	2b00      	cmp	r3, #0
   2bcec:	4680      	mov	r8, r0
   2bcee:	dd1c      	ble.n	2bd2a <_dtoa_r+0x4da>
   2bcf0:	4601      	mov	r1, r0
   2bcf2:	461a      	mov	r2, r3
   2bcf4:	4620      	mov	r0, r4
   2bcf6:	f001 f8fb 	bl	2cef0 <__pow5mult>
   2bcfa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2bcfc:	2b01      	cmp	r3, #1
   2bcfe:	4680      	mov	r8, r0
   2bd00:	f340 8254 	ble.w	2c1ac <_dtoa_r+0x95c>
   2bd04:	2300      	movs	r3, #0
   2bd06:	930c      	str	r3, [sp, #48]	; 0x30
   2bd08:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2bd0c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   2bd10:	6918      	ldr	r0, [r3, #16]
   2bd12:	f001 f801 	bl	2cd18 <__hi0bits>
   2bd16:	f1c0 0020 	rsb	r0, r0, #32
   2bd1a:	e010      	b.n	2bd3e <_dtoa_r+0x4ee>
   2bd1c:	f1c3 0520 	rsb	r5, r3, #32
   2bd20:	fa0a f005 	lsl.w	r0, sl, r5
   2bd24:	e674      	b.n	2ba10 <_dtoa_r+0x1c0>
   2bd26:	900e      	str	r0, [sp, #56]	; 0x38
   2bd28:	e63c      	b.n	2b9a4 <_dtoa_r+0x154>
   2bd2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2bd2c:	2b01      	cmp	r3, #1
   2bd2e:	f340 8287 	ble.w	2c240 <_dtoa_r+0x9f0>
   2bd32:	2300      	movs	r3, #0
   2bd34:	930c      	str	r3, [sp, #48]	; 0x30
   2bd36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2bd38:	2001      	movs	r0, #1
   2bd3a:	2b00      	cmp	r3, #0
   2bd3c:	d1e4      	bne.n	2bd08 <_dtoa_r+0x4b8>
   2bd3e:	9a06      	ldr	r2, [sp, #24]
   2bd40:	4410      	add	r0, r2
   2bd42:	f010 001f 	ands.w	r0, r0, #31
   2bd46:	f000 80a1 	beq.w	2be8c <_dtoa_r+0x63c>
   2bd4a:	f1c0 0320 	rsb	r3, r0, #32
   2bd4e:	2b04      	cmp	r3, #4
   2bd50:	f340 849e 	ble.w	2c690 <_dtoa_r+0xe40>
   2bd54:	9b08      	ldr	r3, [sp, #32]
   2bd56:	f1c0 001c 	rsb	r0, r0, #28
   2bd5a:	4403      	add	r3, r0
   2bd5c:	9308      	str	r3, [sp, #32]
   2bd5e:	4613      	mov	r3, r2
   2bd60:	4403      	add	r3, r0
   2bd62:	4405      	add	r5, r0
   2bd64:	9306      	str	r3, [sp, #24]
   2bd66:	9b08      	ldr	r3, [sp, #32]
   2bd68:	2b00      	cmp	r3, #0
   2bd6a:	dd05      	ble.n	2bd78 <_dtoa_r+0x528>
   2bd6c:	4649      	mov	r1, r9
   2bd6e:	461a      	mov	r2, r3
   2bd70:	4620      	mov	r0, r4
   2bd72:	f001 f90d 	bl	2cf90 <__lshift>
   2bd76:	4681      	mov	r9, r0
   2bd78:	9b06      	ldr	r3, [sp, #24]
   2bd7a:	2b00      	cmp	r3, #0
   2bd7c:	dd05      	ble.n	2bd8a <_dtoa_r+0x53a>
   2bd7e:	4641      	mov	r1, r8
   2bd80:	461a      	mov	r2, r3
   2bd82:	4620      	mov	r0, r4
   2bd84:	f001 f904 	bl	2cf90 <__lshift>
   2bd88:	4680      	mov	r8, r0
   2bd8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2bd8c:	2b00      	cmp	r3, #0
   2bd8e:	f040 8086 	bne.w	2be9e <_dtoa_r+0x64e>
   2bd92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bd94:	2b00      	cmp	r3, #0
   2bd96:	f340 8266 	ble.w	2c266 <_dtoa_r+0xa16>
   2bd9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2bd9c:	2b00      	cmp	r3, #0
   2bd9e:	f000 8098 	beq.w	2bed2 <_dtoa_r+0x682>
   2bda2:	2d00      	cmp	r5, #0
   2bda4:	dd05      	ble.n	2bdb2 <_dtoa_r+0x562>
   2bda6:	4631      	mov	r1, r6
   2bda8:	462a      	mov	r2, r5
   2bdaa:	4620      	mov	r0, r4
   2bdac:	f001 f8f0 	bl	2cf90 <__lshift>
   2bdb0:	4606      	mov	r6, r0
   2bdb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2bdb4:	2b00      	cmp	r3, #0
   2bdb6:	f040 8337 	bne.w	2c428 <_dtoa_r+0xbd8>
   2bdba:	9606      	str	r6, [sp, #24]
   2bdbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bdbe:	9a04      	ldr	r2, [sp, #16]
   2bdc0:	f8dd b018 	ldr.w	fp, [sp, #24]
   2bdc4:	3b01      	subs	r3, #1
   2bdc6:	18d3      	adds	r3, r2, r3
   2bdc8:	930b      	str	r3, [sp, #44]	; 0x2c
   2bdca:	f00a 0301 	and.w	r3, sl, #1
   2bdce:	930c      	str	r3, [sp, #48]	; 0x30
   2bdd0:	4617      	mov	r7, r2
   2bdd2:	46c2      	mov	sl, r8
   2bdd4:	4651      	mov	r1, sl
   2bdd6:	4648      	mov	r0, r9
   2bdd8:	f7ff fca4 	bl	2b724 <quorem>
   2bddc:	4631      	mov	r1, r6
   2bdde:	4605      	mov	r5, r0
   2bde0:	4648      	mov	r0, r9
   2bde2:	f001 f927 	bl	2d034 <__mcmp>
   2bde6:	465a      	mov	r2, fp
   2bde8:	900a      	str	r0, [sp, #40]	; 0x28
   2bdea:	4651      	mov	r1, sl
   2bdec:	4620      	mov	r0, r4
   2bdee:	f001 f93d 	bl	2d06c <__mdiff>
   2bdf2:	68c2      	ldr	r2, [r0, #12]
   2bdf4:	4680      	mov	r8, r0
   2bdf6:	f105 0330 	add.w	r3, r5, #48	; 0x30
   2bdfa:	2a00      	cmp	r2, #0
   2bdfc:	f040 822b 	bne.w	2c256 <_dtoa_r+0xa06>
   2be00:	4601      	mov	r1, r0
   2be02:	4648      	mov	r0, r9
   2be04:	9308      	str	r3, [sp, #32]
   2be06:	f001 f915 	bl	2d034 <__mcmp>
   2be0a:	4641      	mov	r1, r8
   2be0c:	9006      	str	r0, [sp, #24]
   2be0e:	4620      	mov	r0, r4
   2be10:	f000 ff38 	bl	2cc84 <_Bfree>
   2be14:	9a06      	ldr	r2, [sp, #24]
   2be16:	9b08      	ldr	r3, [sp, #32]
   2be18:	b932      	cbnz	r2, 2be28 <_dtoa_r+0x5d8>
   2be1a:	9924      	ldr	r1, [sp, #144]	; 0x90
   2be1c:	b921      	cbnz	r1, 2be28 <_dtoa_r+0x5d8>
   2be1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2be20:	2a00      	cmp	r2, #0
   2be22:	f000 83ef 	beq.w	2c604 <_dtoa_r+0xdb4>
   2be26:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2be28:	990a      	ldr	r1, [sp, #40]	; 0x28
   2be2a:	2900      	cmp	r1, #0
   2be2c:	f2c0 829f 	blt.w	2c36e <_dtoa_r+0xb1e>
   2be30:	d105      	bne.n	2be3e <_dtoa_r+0x5ee>
   2be32:	9924      	ldr	r1, [sp, #144]	; 0x90
   2be34:	b919      	cbnz	r1, 2be3e <_dtoa_r+0x5ee>
   2be36:	990c      	ldr	r1, [sp, #48]	; 0x30
   2be38:	2900      	cmp	r1, #0
   2be3a:	f000 8298 	beq.w	2c36e <_dtoa_r+0xb1e>
   2be3e:	2a00      	cmp	r2, #0
   2be40:	f300 8306 	bgt.w	2c450 <_dtoa_r+0xc00>
   2be44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2be46:	703b      	strb	r3, [r7, #0]
   2be48:	f107 0801 	add.w	r8, r7, #1
   2be4c:	4297      	cmp	r7, r2
   2be4e:	4645      	mov	r5, r8
   2be50:	f000 830c 	beq.w	2c46c <_dtoa_r+0xc1c>
   2be54:	4649      	mov	r1, r9
   2be56:	2300      	movs	r3, #0
   2be58:	220a      	movs	r2, #10
   2be5a:	4620      	mov	r0, r4
   2be5c:	f000 ff1c 	bl	2cc98 <__multadd>
   2be60:	455e      	cmp	r6, fp
   2be62:	4681      	mov	r9, r0
   2be64:	4631      	mov	r1, r6
   2be66:	f04f 0300 	mov.w	r3, #0
   2be6a:	f04f 020a 	mov.w	r2, #10
   2be6e:	4620      	mov	r0, r4
   2be70:	f000 81eb 	beq.w	2c24a <_dtoa_r+0x9fa>
   2be74:	f000 ff10 	bl	2cc98 <__multadd>
   2be78:	4659      	mov	r1, fp
   2be7a:	4606      	mov	r6, r0
   2be7c:	2300      	movs	r3, #0
   2be7e:	220a      	movs	r2, #10
   2be80:	4620      	mov	r0, r4
   2be82:	f000 ff09 	bl	2cc98 <__multadd>
   2be86:	4647      	mov	r7, r8
   2be88:	4683      	mov	fp, r0
   2be8a:	e7a3      	b.n	2bdd4 <_dtoa_r+0x584>
   2be8c:	201c      	movs	r0, #28
   2be8e:	9b08      	ldr	r3, [sp, #32]
   2be90:	4403      	add	r3, r0
   2be92:	9308      	str	r3, [sp, #32]
   2be94:	9b06      	ldr	r3, [sp, #24]
   2be96:	4403      	add	r3, r0
   2be98:	4405      	add	r5, r0
   2be9a:	9306      	str	r3, [sp, #24]
   2be9c:	e763      	b.n	2bd66 <_dtoa_r+0x516>
   2be9e:	4641      	mov	r1, r8
   2bea0:	4648      	mov	r0, r9
   2bea2:	f001 f8c7 	bl	2d034 <__mcmp>
   2bea6:	2800      	cmp	r0, #0
   2bea8:	f6bf af73 	bge.w	2bd92 <_dtoa_r+0x542>
   2beac:	9f02      	ldr	r7, [sp, #8]
   2beae:	4649      	mov	r1, r9
   2beb0:	2300      	movs	r3, #0
   2beb2:	220a      	movs	r2, #10
   2beb4:	4620      	mov	r0, r4
   2beb6:	3f01      	subs	r7, #1
   2beb8:	9702      	str	r7, [sp, #8]
   2beba:	f000 feed 	bl	2cc98 <__multadd>
   2bebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2bec0:	4681      	mov	r9, r0
   2bec2:	2b00      	cmp	r3, #0
   2bec4:	f040 83b6 	bne.w	2c634 <_dtoa_r+0xde4>
   2bec8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2beca:	2b00      	cmp	r3, #0
   2becc:	f340 83bf 	ble.w	2c64e <_dtoa_r+0xdfe>
   2bed0:	930a      	str	r3, [sp, #40]	; 0x28
   2bed2:	f8dd b010 	ldr.w	fp, [sp, #16]
   2bed6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2bed8:	465d      	mov	r5, fp
   2beda:	e002      	b.n	2bee2 <_dtoa_r+0x692>
   2bedc:	f000 fedc 	bl	2cc98 <__multadd>
   2bee0:	4681      	mov	r9, r0
   2bee2:	4641      	mov	r1, r8
   2bee4:	4648      	mov	r0, r9
   2bee6:	f7ff fc1d 	bl	2b724 <quorem>
   2beea:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   2beee:	f805 ab01 	strb.w	sl, [r5], #1
   2bef2:	eba5 030b 	sub.w	r3, r5, fp
   2bef6:	42bb      	cmp	r3, r7
   2bef8:	f04f 020a 	mov.w	r2, #10
   2befc:	f04f 0300 	mov.w	r3, #0
   2bf00:	4649      	mov	r1, r9
   2bf02:	4620      	mov	r0, r4
   2bf04:	dbea      	blt.n	2bedc <_dtoa_r+0x68c>
   2bf06:	9b04      	ldr	r3, [sp, #16]
   2bf08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2bf0a:	2a01      	cmp	r2, #1
   2bf0c:	bfac      	ite	ge
   2bf0e:	189b      	addge	r3, r3, r2
   2bf10:	3301      	addlt	r3, #1
   2bf12:	461d      	mov	r5, r3
   2bf14:	f04f 0b00 	mov.w	fp, #0
   2bf18:	4649      	mov	r1, r9
   2bf1a:	2201      	movs	r2, #1
   2bf1c:	4620      	mov	r0, r4
   2bf1e:	f001 f837 	bl	2cf90 <__lshift>
   2bf22:	4641      	mov	r1, r8
   2bf24:	4681      	mov	r9, r0
   2bf26:	f001 f885 	bl	2d034 <__mcmp>
   2bf2a:	2800      	cmp	r0, #0
   2bf2c:	f340 823d 	ble.w	2c3aa <_dtoa_r+0xb5a>
   2bf30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   2bf34:	9904      	ldr	r1, [sp, #16]
   2bf36:	1e6b      	subs	r3, r5, #1
   2bf38:	e004      	b.n	2bf44 <_dtoa_r+0x6f4>
   2bf3a:	428b      	cmp	r3, r1
   2bf3c:	f000 81ae 	beq.w	2c29c <_dtoa_r+0xa4c>
   2bf40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2bf44:	2a39      	cmp	r2, #57	; 0x39
   2bf46:	f103 0501 	add.w	r5, r3, #1
   2bf4a:	d0f6      	beq.n	2bf3a <_dtoa_r+0x6ea>
   2bf4c:	3201      	adds	r2, #1
   2bf4e:	701a      	strb	r2, [r3, #0]
   2bf50:	4641      	mov	r1, r8
   2bf52:	4620      	mov	r0, r4
   2bf54:	f000 fe96 	bl	2cc84 <_Bfree>
   2bf58:	2e00      	cmp	r6, #0
   2bf5a:	f43f ae3d 	beq.w	2bbd8 <_dtoa_r+0x388>
   2bf5e:	f1bb 0f00 	cmp.w	fp, #0
   2bf62:	d005      	beq.n	2bf70 <_dtoa_r+0x720>
   2bf64:	45b3      	cmp	fp, r6
   2bf66:	d003      	beq.n	2bf70 <_dtoa_r+0x720>
   2bf68:	4659      	mov	r1, fp
   2bf6a:	4620      	mov	r0, r4
   2bf6c:	f000 fe8a 	bl	2cc84 <_Bfree>
   2bf70:	4631      	mov	r1, r6
   2bf72:	4620      	mov	r0, r4
   2bf74:	f000 fe86 	bl	2cc84 <_Bfree>
   2bf78:	e62e      	b.n	2bbd8 <_dtoa_r+0x388>
   2bf7a:	2300      	movs	r3, #0
   2bf7c:	930b      	str	r3, [sp, #44]	; 0x2c
   2bf7e:	9b02      	ldr	r3, [sp, #8]
   2bf80:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2bf82:	4413      	add	r3, r2
   2bf84:	930f      	str	r3, [sp, #60]	; 0x3c
   2bf86:	3301      	adds	r3, #1
   2bf88:	2b01      	cmp	r3, #1
   2bf8a:	461f      	mov	r7, r3
   2bf8c:	461e      	mov	r6, r3
   2bf8e:	930a      	str	r3, [sp, #40]	; 0x28
   2bf90:	bfb8      	it	lt
   2bf92:	2701      	movlt	r7, #1
   2bf94:	2100      	movs	r1, #0
   2bf96:	2f17      	cmp	r7, #23
   2bf98:	6461      	str	r1, [r4, #68]	; 0x44
   2bf9a:	d90a      	bls.n	2bfb2 <_dtoa_r+0x762>
   2bf9c:	2201      	movs	r2, #1
   2bf9e:	2304      	movs	r3, #4
   2bfa0:	005b      	lsls	r3, r3, #1
   2bfa2:	f103 0014 	add.w	r0, r3, #20
   2bfa6:	4287      	cmp	r7, r0
   2bfa8:	4611      	mov	r1, r2
   2bfaa:	f102 0201 	add.w	r2, r2, #1
   2bfae:	d2f7      	bcs.n	2bfa0 <_dtoa_r+0x750>
   2bfb0:	6461      	str	r1, [r4, #68]	; 0x44
   2bfb2:	4620      	mov	r0, r4
   2bfb4:	f000 fe40 	bl	2cc38 <_Balloc>
   2bfb8:	2e0e      	cmp	r6, #14
   2bfba:	9004      	str	r0, [sp, #16]
   2bfbc:	6420      	str	r0, [r4, #64]	; 0x40
   2bfbe:	f63f ad41 	bhi.w	2ba44 <_dtoa_r+0x1f4>
   2bfc2:	2d00      	cmp	r5, #0
   2bfc4:	f43f ad3e 	beq.w	2ba44 <_dtoa_r+0x1f4>
   2bfc8:	9902      	ldr	r1, [sp, #8]
   2bfca:	2900      	cmp	r1, #0
   2bfcc:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   2bfd0:	f340 8202 	ble.w	2c3d8 <_dtoa_r+0xb88>
   2bfd4:	4bb8      	ldr	r3, [pc, #736]	; (2c2b8 <_dtoa_r+0xa68>)
   2bfd6:	f001 020f 	and.w	r2, r1, #15
   2bfda:	110d      	asrs	r5, r1, #4
   2bfdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2bfe0:	06e9      	lsls	r1, r5, #27
   2bfe2:	e9d3 6700 	ldrd	r6, r7, [r3]
   2bfe6:	f140 81ae 	bpl.w	2c346 <_dtoa_r+0xaf6>
   2bfea:	4bb4      	ldr	r3, [pc, #720]	; (2c2bc <_dtoa_r+0xa6c>)
   2bfec:	4650      	mov	r0, sl
   2bfee:	4659      	mov	r1, fp
   2bff0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   2bff4:	f7d4 fed4 	bl	da0 <__aeabi_ddiv>
   2bff8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   2bffc:	f005 050f 	and.w	r5, r5, #15
   2c000:	f04f 0a03 	mov.w	sl, #3
   2c004:	b18d      	cbz	r5, 2c02a <_dtoa_r+0x7da>
   2c006:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 2c2bc <_dtoa_r+0xa6c>
   2c00a:	07ea      	lsls	r2, r5, #31
   2c00c:	d509      	bpl.n	2c022 <_dtoa_r+0x7d2>
   2c00e:	4630      	mov	r0, r6
   2c010:	4639      	mov	r1, r7
   2c012:	e9d8 2300 	ldrd	r2, r3, [r8]
   2c016:	f7d4 fd99 	bl	b4c <__aeabi_dmul>
   2c01a:	f10a 0a01 	add.w	sl, sl, #1
   2c01e:	4606      	mov	r6, r0
   2c020:	460f      	mov	r7, r1
   2c022:	106d      	asrs	r5, r5, #1
   2c024:	f108 0808 	add.w	r8, r8, #8
   2c028:	d1ef      	bne.n	2c00a <_dtoa_r+0x7ba>
   2c02a:	463b      	mov	r3, r7
   2c02c:	4632      	mov	r2, r6
   2c02e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   2c032:	f7d4 feb5 	bl	da0 <__aeabi_ddiv>
   2c036:	4607      	mov	r7, r0
   2c038:	4688      	mov	r8, r1
   2c03a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c03c:	b143      	cbz	r3, 2c050 <_dtoa_r+0x800>
   2c03e:	2200      	movs	r2, #0
   2c040:	4b9f      	ldr	r3, [pc, #636]	; (2c2c0 <_dtoa_r+0xa70>)
   2c042:	4638      	mov	r0, r7
   2c044:	4641      	mov	r1, r8
   2c046:	f7d4 fff3 	bl	1030 <__aeabi_dcmplt>
   2c04a:	2800      	cmp	r0, #0
   2c04c:	f040 8286 	bne.w	2c55c <_dtoa_r+0xd0c>
   2c050:	4650      	mov	r0, sl
   2c052:	f7d4 fd15 	bl	a80 <__aeabi_i2d>
   2c056:	463a      	mov	r2, r7
   2c058:	4643      	mov	r3, r8
   2c05a:	f7d4 fd77 	bl	b4c <__aeabi_dmul>
   2c05e:	4b99      	ldr	r3, [pc, #612]	; (2c2c4 <_dtoa_r+0xa74>)
   2c060:	2200      	movs	r2, #0
   2c062:	f7d4 fbc1 	bl	7e8 <__adddf3>
   2c066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c068:	4605      	mov	r5, r0
   2c06a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2c06e:	2b00      	cmp	r3, #0
   2c070:	f000 813e 	beq.w	2c2f0 <_dtoa_r+0xaa0>
   2c074:	9b02      	ldr	r3, [sp, #8]
   2c076:	9315      	str	r3, [sp, #84]	; 0x54
   2c078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c07a:	9312      	str	r3, [sp, #72]	; 0x48
   2c07c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2c07e:	2b00      	cmp	r3, #0
   2c080:	f000 81fa 	beq.w	2c478 <_dtoa_r+0xc28>
   2c084:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2c086:	4b8c      	ldr	r3, [pc, #560]	; (2c2b8 <_dtoa_r+0xa68>)
   2c088:	498f      	ldr	r1, [pc, #572]	; (2c2c8 <_dtoa_r+0xa78>)
   2c08a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2c08e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   2c092:	2000      	movs	r0, #0
   2c094:	f7d4 fe84 	bl	da0 <__aeabi_ddiv>
   2c098:	462a      	mov	r2, r5
   2c09a:	4633      	mov	r3, r6
   2c09c:	f7d4 fba2 	bl	7e4 <__aeabi_dsub>
   2c0a0:	4682      	mov	sl, r0
   2c0a2:	468b      	mov	fp, r1
   2c0a4:	4638      	mov	r0, r7
   2c0a6:	4641      	mov	r1, r8
   2c0a8:	f7d5 f800 	bl	10ac <__aeabi_d2iz>
   2c0ac:	4605      	mov	r5, r0
   2c0ae:	f7d4 fce7 	bl	a80 <__aeabi_i2d>
   2c0b2:	4602      	mov	r2, r0
   2c0b4:	460b      	mov	r3, r1
   2c0b6:	4638      	mov	r0, r7
   2c0b8:	4641      	mov	r1, r8
   2c0ba:	f7d4 fb93 	bl	7e4 <__aeabi_dsub>
   2c0be:	3530      	adds	r5, #48	; 0x30
   2c0c0:	fa5f f885 	uxtb.w	r8, r5
   2c0c4:	9d04      	ldr	r5, [sp, #16]
   2c0c6:	4606      	mov	r6, r0
   2c0c8:	460f      	mov	r7, r1
   2c0ca:	f885 8000 	strb.w	r8, [r5]
   2c0ce:	4602      	mov	r2, r0
   2c0d0:	460b      	mov	r3, r1
   2c0d2:	4650      	mov	r0, sl
   2c0d4:	4659      	mov	r1, fp
   2c0d6:	3501      	adds	r5, #1
   2c0d8:	f7d4 ffc8 	bl	106c <__aeabi_dcmpgt>
   2c0dc:	2800      	cmp	r0, #0
   2c0de:	d154      	bne.n	2c18a <_dtoa_r+0x93a>
   2c0e0:	4632      	mov	r2, r6
   2c0e2:	463b      	mov	r3, r7
   2c0e4:	2000      	movs	r0, #0
   2c0e6:	4976      	ldr	r1, [pc, #472]	; (2c2c0 <_dtoa_r+0xa70>)
   2c0e8:	f7d4 fb7c 	bl	7e4 <__aeabi_dsub>
   2c0ec:	4602      	mov	r2, r0
   2c0ee:	460b      	mov	r3, r1
   2c0f0:	4650      	mov	r0, sl
   2c0f2:	4659      	mov	r1, fp
   2c0f4:	f7d4 ffba 	bl	106c <__aeabi_dcmpgt>
   2c0f8:	2800      	cmp	r0, #0
   2c0fa:	f040 8270 	bne.w	2c5de <_dtoa_r+0xd8e>
   2c0fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2c100:	2a01      	cmp	r2, #1
   2c102:	f000 8111 	beq.w	2c328 <_dtoa_r+0xad8>
   2c106:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c108:	9a04      	ldr	r2, [sp, #16]
   2c10a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2c10e:	4413      	add	r3, r2
   2c110:	4699      	mov	r9, r3
   2c112:	e00d      	b.n	2c130 <_dtoa_r+0x8e0>
   2c114:	2000      	movs	r0, #0
   2c116:	496a      	ldr	r1, [pc, #424]	; (2c2c0 <_dtoa_r+0xa70>)
   2c118:	f7d4 fb64 	bl	7e4 <__aeabi_dsub>
   2c11c:	4652      	mov	r2, sl
   2c11e:	465b      	mov	r3, fp
   2c120:	f7d4 ff86 	bl	1030 <__aeabi_dcmplt>
   2c124:	2800      	cmp	r0, #0
   2c126:	f040 8258 	bne.w	2c5da <_dtoa_r+0xd8a>
   2c12a:	454d      	cmp	r5, r9
   2c12c:	f000 80fa 	beq.w	2c324 <_dtoa_r+0xad4>
   2c130:	4650      	mov	r0, sl
   2c132:	4659      	mov	r1, fp
   2c134:	2200      	movs	r2, #0
   2c136:	4b65      	ldr	r3, [pc, #404]	; (2c2cc <_dtoa_r+0xa7c>)
   2c138:	f7d4 fd08 	bl	b4c <__aeabi_dmul>
   2c13c:	2200      	movs	r2, #0
   2c13e:	4b63      	ldr	r3, [pc, #396]	; (2c2cc <_dtoa_r+0xa7c>)
   2c140:	4682      	mov	sl, r0
   2c142:	468b      	mov	fp, r1
   2c144:	4630      	mov	r0, r6
   2c146:	4639      	mov	r1, r7
   2c148:	f7d4 fd00 	bl	b4c <__aeabi_dmul>
   2c14c:	460f      	mov	r7, r1
   2c14e:	4606      	mov	r6, r0
   2c150:	f7d4 ffac 	bl	10ac <__aeabi_d2iz>
   2c154:	4680      	mov	r8, r0
   2c156:	f7d4 fc93 	bl	a80 <__aeabi_i2d>
   2c15a:	4602      	mov	r2, r0
   2c15c:	460b      	mov	r3, r1
   2c15e:	4630      	mov	r0, r6
   2c160:	4639      	mov	r1, r7
   2c162:	f7d4 fb3f 	bl	7e4 <__aeabi_dsub>
   2c166:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2c16a:	fa5f f888 	uxtb.w	r8, r8
   2c16e:	4652      	mov	r2, sl
   2c170:	465b      	mov	r3, fp
   2c172:	f805 8b01 	strb.w	r8, [r5], #1
   2c176:	4606      	mov	r6, r0
   2c178:	460f      	mov	r7, r1
   2c17a:	f7d4 ff59 	bl	1030 <__aeabi_dcmplt>
   2c17e:	4632      	mov	r2, r6
   2c180:	463b      	mov	r3, r7
   2c182:	2800      	cmp	r0, #0
   2c184:	d0c6      	beq.n	2c114 <_dtoa_r+0x8c4>
   2c186:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2c18a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2c18c:	9302      	str	r3, [sp, #8]
   2c18e:	e523      	b.n	2bbd8 <_dtoa_r+0x388>
   2c190:	2300      	movs	r3, #0
   2c192:	930b      	str	r3, [sp, #44]	; 0x2c
   2c194:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2c196:	2b00      	cmp	r3, #0
   2c198:	f340 80dc 	ble.w	2c354 <_dtoa_r+0xb04>
   2c19c:	461f      	mov	r7, r3
   2c19e:	461e      	mov	r6, r3
   2c1a0:	930f      	str	r3, [sp, #60]	; 0x3c
   2c1a2:	930a      	str	r3, [sp, #40]	; 0x28
   2c1a4:	e6f6      	b.n	2bf94 <_dtoa_r+0x744>
   2c1a6:	2301      	movs	r3, #1
   2c1a8:	930b      	str	r3, [sp, #44]	; 0x2c
   2c1aa:	e7f3      	b.n	2c194 <_dtoa_r+0x944>
   2c1ac:	f1ba 0f00 	cmp.w	sl, #0
   2c1b0:	f47f ada8 	bne.w	2bd04 <_dtoa_r+0x4b4>
   2c1b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   2c1b8:	2b00      	cmp	r3, #0
   2c1ba:	f47f adba 	bne.w	2bd32 <_dtoa_r+0x4e2>
   2c1be:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   2c1c2:	0d3f      	lsrs	r7, r7, #20
   2c1c4:	053f      	lsls	r7, r7, #20
   2c1c6:	2f00      	cmp	r7, #0
   2c1c8:	f000 820d 	beq.w	2c5e6 <_dtoa_r+0xd96>
   2c1cc:	9b08      	ldr	r3, [sp, #32]
   2c1ce:	3301      	adds	r3, #1
   2c1d0:	9308      	str	r3, [sp, #32]
   2c1d2:	9b06      	ldr	r3, [sp, #24]
   2c1d4:	3301      	adds	r3, #1
   2c1d6:	9306      	str	r3, [sp, #24]
   2c1d8:	2301      	movs	r3, #1
   2c1da:	930c      	str	r3, [sp, #48]	; 0x30
   2c1dc:	e5ab      	b.n	2bd36 <_dtoa_r+0x4e6>
   2c1de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c1e0:	2b00      	cmp	r3, #0
   2c1e2:	f73f ac42 	bgt.w	2ba6a <_dtoa_r+0x21a>
   2c1e6:	f040 8221 	bne.w	2c62c <_dtoa_r+0xddc>
   2c1ea:	2200      	movs	r2, #0
   2c1ec:	4b38      	ldr	r3, [pc, #224]	; (2c2d0 <_dtoa_r+0xa80>)
   2c1ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2c1f2:	f7d4 fcab 	bl	b4c <__aeabi_dmul>
   2c1f6:	4652      	mov	r2, sl
   2c1f8:	465b      	mov	r3, fp
   2c1fa:	f7d4 ff2d 	bl	1058 <__aeabi_dcmpge>
   2c1fe:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   2c202:	4646      	mov	r6, r8
   2c204:	2800      	cmp	r0, #0
   2c206:	d041      	beq.n	2c28c <_dtoa_r+0xa3c>
   2c208:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2c20a:	9d04      	ldr	r5, [sp, #16]
   2c20c:	43db      	mvns	r3, r3
   2c20e:	9302      	str	r3, [sp, #8]
   2c210:	4641      	mov	r1, r8
   2c212:	4620      	mov	r0, r4
   2c214:	f000 fd36 	bl	2cc84 <_Bfree>
   2c218:	2e00      	cmp	r6, #0
   2c21a:	f43f acdd 	beq.w	2bbd8 <_dtoa_r+0x388>
   2c21e:	e6a7      	b.n	2bf70 <_dtoa_r+0x720>
   2c220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2c222:	4649      	mov	r1, r9
   2c224:	4620      	mov	r0, r4
   2c226:	f000 fe63 	bl	2cef0 <__pow5mult>
   2c22a:	4681      	mov	r9, r0
   2c22c:	e558      	b.n	2bce0 <_dtoa_r+0x490>
   2c22e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2c230:	2a00      	cmp	r2, #0
   2c232:	f000 8187 	beq.w	2c544 <_dtoa_r+0xcf4>
   2c236:	f203 4333 	addw	r3, r3, #1075	; 0x433
   2c23a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2c23c:	9d08      	ldr	r5, [sp, #32]
   2c23e:	e4f2      	b.n	2bc26 <_dtoa_r+0x3d6>
   2c240:	f1ba 0f00 	cmp.w	sl, #0
   2c244:	f47f ad75 	bne.w	2bd32 <_dtoa_r+0x4e2>
   2c248:	e7b4      	b.n	2c1b4 <_dtoa_r+0x964>
   2c24a:	f000 fd25 	bl	2cc98 <__multadd>
   2c24e:	4647      	mov	r7, r8
   2c250:	4606      	mov	r6, r0
   2c252:	4683      	mov	fp, r0
   2c254:	e5be      	b.n	2bdd4 <_dtoa_r+0x584>
   2c256:	4601      	mov	r1, r0
   2c258:	4620      	mov	r0, r4
   2c25a:	9306      	str	r3, [sp, #24]
   2c25c:	f000 fd12 	bl	2cc84 <_Bfree>
   2c260:	2201      	movs	r2, #1
   2c262:	9b06      	ldr	r3, [sp, #24]
   2c264:	e5e0      	b.n	2be28 <_dtoa_r+0x5d8>
   2c266:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2c268:	2b02      	cmp	r3, #2
   2c26a:	f77f ad96 	ble.w	2bd9a <_dtoa_r+0x54a>
   2c26e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c270:	2b00      	cmp	r3, #0
   2c272:	d1c9      	bne.n	2c208 <_dtoa_r+0x9b8>
   2c274:	4641      	mov	r1, r8
   2c276:	2205      	movs	r2, #5
   2c278:	4620      	mov	r0, r4
   2c27a:	f000 fd0d 	bl	2cc98 <__multadd>
   2c27e:	4601      	mov	r1, r0
   2c280:	4680      	mov	r8, r0
   2c282:	4648      	mov	r0, r9
   2c284:	f000 fed6 	bl	2d034 <__mcmp>
   2c288:	2800      	cmp	r0, #0
   2c28a:	ddbd      	ble.n	2c208 <_dtoa_r+0x9b8>
   2c28c:	9a02      	ldr	r2, [sp, #8]
   2c28e:	9904      	ldr	r1, [sp, #16]
   2c290:	2331      	movs	r3, #49	; 0x31
   2c292:	3201      	adds	r2, #1
   2c294:	9202      	str	r2, [sp, #8]
   2c296:	700b      	strb	r3, [r1, #0]
   2c298:	1c4d      	adds	r5, r1, #1
   2c29a:	e7b9      	b.n	2c210 <_dtoa_r+0x9c0>
   2c29c:	9a02      	ldr	r2, [sp, #8]
   2c29e:	3201      	adds	r2, #1
   2c2a0:	9202      	str	r2, [sp, #8]
   2c2a2:	9a04      	ldr	r2, [sp, #16]
   2c2a4:	2331      	movs	r3, #49	; 0x31
   2c2a6:	7013      	strb	r3, [r2, #0]
   2c2a8:	e652      	b.n	2bf50 <_dtoa_r+0x700>
   2c2aa:	2301      	movs	r3, #1
   2c2ac:	930b      	str	r3, [sp, #44]	; 0x2c
   2c2ae:	e666      	b.n	2bf7e <_dtoa_r+0x72e>
   2c2b0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2c2b4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c2b6:	e48f      	b.n	2bbd8 <_dtoa_r+0x388>
   2c2b8:	00031648 	.word	0x00031648
   2c2bc:	00031620 	.word	0x00031620
   2c2c0:	3ff00000 	.word	0x3ff00000
   2c2c4:	401c0000 	.word	0x401c0000
   2c2c8:	3fe00000 	.word	0x3fe00000
   2c2cc:	40240000 	.word	0x40240000
   2c2d0:	40140000 	.word	0x40140000
   2c2d4:	4650      	mov	r0, sl
   2c2d6:	f7d4 fbd3 	bl	a80 <__aeabi_i2d>
   2c2da:	463a      	mov	r2, r7
   2c2dc:	4643      	mov	r3, r8
   2c2de:	f7d4 fc35 	bl	b4c <__aeabi_dmul>
   2c2e2:	2200      	movs	r2, #0
   2c2e4:	4bc1      	ldr	r3, [pc, #772]	; (2c5ec <_dtoa_r+0xd9c>)
   2c2e6:	f7d4 fa7f 	bl	7e8 <__adddf3>
   2c2ea:	4605      	mov	r5, r0
   2c2ec:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2c2f0:	4641      	mov	r1, r8
   2c2f2:	2200      	movs	r2, #0
   2c2f4:	4bbe      	ldr	r3, [pc, #760]	; (2c5f0 <_dtoa_r+0xda0>)
   2c2f6:	4638      	mov	r0, r7
   2c2f8:	f7d4 fa74 	bl	7e4 <__aeabi_dsub>
   2c2fc:	462a      	mov	r2, r5
   2c2fe:	4633      	mov	r3, r6
   2c300:	4682      	mov	sl, r0
   2c302:	468b      	mov	fp, r1
   2c304:	f7d4 feb2 	bl	106c <__aeabi_dcmpgt>
   2c308:	4680      	mov	r8, r0
   2c30a:	2800      	cmp	r0, #0
   2c30c:	f040 8110 	bne.w	2c530 <_dtoa_r+0xce0>
   2c310:	462a      	mov	r2, r5
   2c312:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   2c316:	4650      	mov	r0, sl
   2c318:	4659      	mov	r1, fp
   2c31a:	f7d4 fe89 	bl	1030 <__aeabi_dcmplt>
   2c31e:	b118      	cbz	r0, 2c328 <_dtoa_r+0xad8>
   2c320:	4646      	mov	r6, r8
   2c322:	e771      	b.n	2c208 <_dtoa_r+0x9b8>
   2c324:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2c328:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   2c32c:	f7ff bb8a 	b.w	2ba44 <_dtoa_r+0x1f4>
   2c330:	9804      	ldr	r0, [sp, #16]
   2c332:	f7ff babb 	b.w	2b8ac <_dtoa_r+0x5c>
   2c336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2c338:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2c33a:	970c      	str	r7, [sp, #48]	; 0x30
   2c33c:	1afb      	subs	r3, r7, r3
   2c33e:	441a      	add	r2, r3
   2c340:	920d      	str	r2, [sp, #52]	; 0x34
   2c342:	2700      	movs	r7, #0
   2c344:	e469      	b.n	2bc1a <_dtoa_r+0x3ca>
   2c346:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   2c34a:	f04f 0a02 	mov.w	sl, #2
   2c34e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   2c352:	e657      	b.n	2c004 <_dtoa_r+0x7b4>
   2c354:	2100      	movs	r1, #0
   2c356:	2301      	movs	r3, #1
   2c358:	6461      	str	r1, [r4, #68]	; 0x44
   2c35a:	4620      	mov	r0, r4
   2c35c:	9325      	str	r3, [sp, #148]	; 0x94
   2c35e:	f000 fc6b 	bl	2cc38 <_Balloc>
   2c362:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2c364:	9004      	str	r0, [sp, #16]
   2c366:	6420      	str	r0, [r4, #64]	; 0x40
   2c368:	930a      	str	r3, [sp, #40]	; 0x28
   2c36a:	930f      	str	r3, [sp, #60]	; 0x3c
   2c36c:	e629      	b.n	2bfc2 <_dtoa_r+0x772>
   2c36e:	2a00      	cmp	r2, #0
   2c370:	46d0      	mov	r8, sl
   2c372:	f8cd b018 	str.w	fp, [sp, #24]
   2c376:	469a      	mov	sl, r3
   2c378:	dd11      	ble.n	2c39e <_dtoa_r+0xb4e>
   2c37a:	4649      	mov	r1, r9
   2c37c:	2201      	movs	r2, #1
   2c37e:	4620      	mov	r0, r4
   2c380:	f000 fe06 	bl	2cf90 <__lshift>
   2c384:	4641      	mov	r1, r8
   2c386:	4681      	mov	r9, r0
   2c388:	f000 fe54 	bl	2d034 <__mcmp>
   2c38c:	2800      	cmp	r0, #0
   2c38e:	f340 8146 	ble.w	2c61e <_dtoa_r+0xdce>
   2c392:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   2c396:	f000 8106 	beq.w	2c5a6 <_dtoa_r+0xd56>
   2c39a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   2c39e:	46b3      	mov	fp, r6
   2c3a0:	f887 a000 	strb.w	sl, [r7]
   2c3a4:	1c7d      	adds	r5, r7, #1
   2c3a6:	9e06      	ldr	r6, [sp, #24]
   2c3a8:	e5d2      	b.n	2bf50 <_dtoa_r+0x700>
   2c3aa:	d104      	bne.n	2c3b6 <_dtoa_r+0xb66>
   2c3ac:	f01a 0f01 	tst.w	sl, #1
   2c3b0:	d001      	beq.n	2c3b6 <_dtoa_r+0xb66>
   2c3b2:	e5bd      	b.n	2bf30 <_dtoa_r+0x6e0>
   2c3b4:	4615      	mov	r5, r2
   2c3b6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2c3ba:	2b30      	cmp	r3, #48	; 0x30
   2c3bc:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2c3c0:	d0f8      	beq.n	2c3b4 <_dtoa_r+0xb64>
   2c3c2:	e5c5      	b.n	2bf50 <_dtoa_r+0x700>
   2c3c4:	9904      	ldr	r1, [sp, #16]
   2c3c6:	2230      	movs	r2, #48	; 0x30
   2c3c8:	700a      	strb	r2, [r1, #0]
   2c3ca:	9a02      	ldr	r2, [sp, #8]
   2c3cc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2c3d0:	3201      	adds	r2, #1
   2c3d2:	9202      	str	r2, [sp, #8]
   2c3d4:	f7ff bbfc 	b.w	2bbd0 <_dtoa_r+0x380>
   2c3d8:	f000 80bb 	beq.w	2c552 <_dtoa_r+0xd02>
   2c3dc:	9b02      	ldr	r3, [sp, #8]
   2c3de:	425d      	negs	r5, r3
   2c3e0:	4b84      	ldr	r3, [pc, #528]	; (2c5f4 <_dtoa_r+0xda4>)
   2c3e2:	f005 020f 	and.w	r2, r5, #15
   2c3e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2c3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   2c3ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2c3f2:	f7d4 fbab 	bl	b4c <__aeabi_dmul>
   2c3f6:	112d      	asrs	r5, r5, #4
   2c3f8:	4607      	mov	r7, r0
   2c3fa:	4688      	mov	r8, r1
   2c3fc:	f000 812c 	beq.w	2c658 <_dtoa_r+0xe08>
   2c400:	4e7d      	ldr	r6, [pc, #500]	; (2c5f8 <_dtoa_r+0xda8>)
   2c402:	f04f 0a02 	mov.w	sl, #2
   2c406:	07eb      	lsls	r3, r5, #31
   2c408:	d509      	bpl.n	2c41e <_dtoa_r+0xbce>
   2c40a:	4638      	mov	r0, r7
   2c40c:	4641      	mov	r1, r8
   2c40e:	e9d6 2300 	ldrd	r2, r3, [r6]
   2c412:	f7d4 fb9b 	bl	b4c <__aeabi_dmul>
   2c416:	f10a 0a01 	add.w	sl, sl, #1
   2c41a:	4607      	mov	r7, r0
   2c41c:	4688      	mov	r8, r1
   2c41e:	106d      	asrs	r5, r5, #1
   2c420:	f106 0608 	add.w	r6, r6, #8
   2c424:	d1ef      	bne.n	2c406 <_dtoa_r+0xbb6>
   2c426:	e608      	b.n	2c03a <_dtoa_r+0x7ea>
   2c428:	6871      	ldr	r1, [r6, #4]
   2c42a:	4620      	mov	r0, r4
   2c42c:	f000 fc04 	bl	2cc38 <_Balloc>
   2c430:	6933      	ldr	r3, [r6, #16]
   2c432:	3302      	adds	r3, #2
   2c434:	009a      	lsls	r2, r3, #2
   2c436:	4605      	mov	r5, r0
   2c438:	f106 010c 	add.w	r1, r6, #12
   2c43c:	300c      	adds	r0, #12
   2c43e:	f7d3 ff3f 	bl	2c0 <memcpy>
   2c442:	4629      	mov	r1, r5
   2c444:	2201      	movs	r2, #1
   2c446:	4620      	mov	r0, r4
   2c448:	f000 fda2 	bl	2cf90 <__lshift>
   2c44c:	9006      	str	r0, [sp, #24]
   2c44e:	e4b5      	b.n	2bdbc <_dtoa_r+0x56c>
   2c450:	2b39      	cmp	r3, #57	; 0x39
   2c452:	f8cd b018 	str.w	fp, [sp, #24]
   2c456:	46d0      	mov	r8, sl
   2c458:	f000 80a5 	beq.w	2c5a6 <_dtoa_r+0xd56>
   2c45c:	f103 0a01 	add.w	sl, r3, #1
   2c460:	46b3      	mov	fp, r6
   2c462:	f887 a000 	strb.w	sl, [r7]
   2c466:	1c7d      	adds	r5, r7, #1
   2c468:	9e06      	ldr	r6, [sp, #24]
   2c46a:	e571      	b.n	2bf50 <_dtoa_r+0x700>
   2c46c:	465a      	mov	r2, fp
   2c46e:	46d0      	mov	r8, sl
   2c470:	46b3      	mov	fp, r6
   2c472:	469a      	mov	sl, r3
   2c474:	4616      	mov	r6, r2
   2c476:	e54f      	b.n	2bf18 <_dtoa_r+0x6c8>
   2c478:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c47a:	495e      	ldr	r1, [pc, #376]	; (2c5f4 <_dtoa_r+0xda4>)
   2c47c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2c480:	462a      	mov	r2, r5
   2c482:	4633      	mov	r3, r6
   2c484:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   2c488:	f7d4 fb60 	bl	b4c <__aeabi_dmul>
   2c48c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   2c490:	4638      	mov	r0, r7
   2c492:	4641      	mov	r1, r8
   2c494:	f7d4 fe0a 	bl	10ac <__aeabi_d2iz>
   2c498:	4605      	mov	r5, r0
   2c49a:	f7d4 faf1 	bl	a80 <__aeabi_i2d>
   2c49e:	460b      	mov	r3, r1
   2c4a0:	4602      	mov	r2, r0
   2c4a2:	4641      	mov	r1, r8
   2c4a4:	4638      	mov	r0, r7
   2c4a6:	f7d4 f99d 	bl	7e4 <__aeabi_dsub>
   2c4aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c4ac:	460f      	mov	r7, r1
   2c4ae:	9904      	ldr	r1, [sp, #16]
   2c4b0:	3530      	adds	r5, #48	; 0x30
   2c4b2:	2b01      	cmp	r3, #1
   2c4b4:	700d      	strb	r5, [r1, #0]
   2c4b6:	4606      	mov	r6, r0
   2c4b8:	f101 0501 	add.w	r5, r1, #1
   2c4bc:	d026      	beq.n	2c50c <_dtoa_r+0xcbc>
   2c4be:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c4c0:	9a04      	ldr	r2, [sp, #16]
   2c4c2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 2c600 <_dtoa_r+0xdb0>
   2c4c6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2c4ca:	4413      	add	r3, r2
   2c4cc:	f04f 0a00 	mov.w	sl, #0
   2c4d0:	4699      	mov	r9, r3
   2c4d2:	4652      	mov	r2, sl
   2c4d4:	465b      	mov	r3, fp
   2c4d6:	4630      	mov	r0, r6
   2c4d8:	4639      	mov	r1, r7
   2c4da:	f7d4 fb37 	bl	b4c <__aeabi_dmul>
   2c4de:	460f      	mov	r7, r1
   2c4e0:	4606      	mov	r6, r0
   2c4e2:	f7d4 fde3 	bl	10ac <__aeabi_d2iz>
   2c4e6:	4680      	mov	r8, r0
   2c4e8:	f7d4 faca 	bl	a80 <__aeabi_i2d>
   2c4ec:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2c4f0:	4602      	mov	r2, r0
   2c4f2:	460b      	mov	r3, r1
   2c4f4:	4630      	mov	r0, r6
   2c4f6:	4639      	mov	r1, r7
   2c4f8:	f7d4 f974 	bl	7e4 <__aeabi_dsub>
   2c4fc:	f805 8b01 	strb.w	r8, [r5], #1
   2c500:	454d      	cmp	r5, r9
   2c502:	4606      	mov	r6, r0
   2c504:	460f      	mov	r7, r1
   2c506:	d1e4      	bne.n	2c4d2 <_dtoa_r+0xc82>
   2c508:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2c50c:	4b3b      	ldr	r3, [pc, #236]	; (2c5fc <_dtoa_r+0xdac>)
   2c50e:	2200      	movs	r2, #0
   2c510:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   2c514:	f7d4 f968 	bl	7e8 <__adddf3>
   2c518:	4632      	mov	r2, r6
   2c51a:	463b      	mov	r3, r7
   2c51c:	f7d4 fd88 	bl	1030 <__aeabi_dcmplt>
   2c520:	2800      	cmp	r0, #0
   2c522:	d046      	beq.n	2c5b2 <_dtoa_r+0xd62>
   2c524:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2c526:	9302      	str	r3, [sp, #8]
   2c528:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2c52c:	f7ff bb43 	b.w	2bbb6 <_dtoa_r+0x366>
   2c530:	f04f 0800 	mov.w	r8, #0
   2c534:	4646      	mov	r6, r8
   2c536:	e6a9      	b.n	2c28c <_dtoa_r+0xa3c>
   2c538:	9b08      	ldr	r3, [sp, #32]
   2c53a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c53c:	1a9d      	subs	r5, r3, r2
   2c53e:	2300      	movs	r3, #0
   2c540:	f7ff bb71 	b.w	2bc26 <_dtoa_r+0x3d6>
   2c544:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2c546:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2c548:	9d08      	ldr	r5, [sp, #32]
   2c54a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   2c54e:	f7ff bb6a 	b.w	2bc26 <_dtoa_r+0x3d6>
   2c552:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2c556:	f04f 0a02 	mov.w	sl, #2
   2c55a:	e56e      	b.n	2c03a <_dtoa_r+0x7ea>
   2c55c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c55e:	2b00      	cmp	r3, #0
   2c560:	f43f aeb8 	beq.w	2c2d4 <_dtoa_r+0xa84>
   2c564:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2c566:	2b00      	cmp	r3, #0
   2c568:	f77f aede 	ble.w	2c328 <_dtoa_r+0xad8>
   2c56c:	2200      	movs	r2, #0
   2c56e:	4b24      	ldr	r3, [pc, #144]	; (2c600 <_dtoa_r+0xdb0>)
   2c570:	4638      	mov	r0, r7
   2c572:	4641      	mov	r1, r8
   2c574:	f7d4 faea 	bl	b4c <__aeabi_dmul>
   2c578:	4607      	mov	r7, r0
   2c57a:	4688      	mov	r8, r1
   2c57c:	f10a 0001 	add.w	r0, sl, #1
   2c580:	f7d4 fa7e 	bl	a80 <__aeabi_i2d>
   2c584:	463a      	mov	r2, r7
   2c586:	4643      	mov	r3, r8
   2c588:	f7d4 fae0 	bl	b4c <__aeabi_dmul>
   2c58c:	2200      	movs	r2, #0
   2c58e:	4b17      	ldr	r3, [pc, #92]	; (2c5ec <_dtoa_r+0xd9c>)
   2c590:	f7d4 f92a 	bl	7e8 <__adddf3>
   2c594:	9a02      	ldr	r2, [sp, #8]
   2c596:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2c598:	9312      	str	r3, [sp, #72]	; 0x48
   2c59a:	3a01      	subs	r2, #1
   2c59c:	4605      	mov	r5, r0
   2c59e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2c5a2:	9215      	str	r2, [sp, #84]	; 0x54
   2c5a4:	e56a      	b.n	2c07c <_dtoa_r+0x82c>
   2c5a6:	2239      	movs	r2, #57	; 0x39
   2c5a8:	46b3      	mov	fp, r6
   2c5aa:	703a      	strb	r2, [r7, #0]
   2c5ac:	9e06      	ldr	r6, [sp, #24]
   2c5ae:	1c7d      	adds	r5, r7, #1
   2c5b0:	e4c0      	b.n	2bf34 <_dtoa_r+0x6e4>
   2c5b2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   2c5b6:	2000      	movs	r0, #0
   2c5b8:	4910      	ldr	r1, [pc, #64]	; (2c5fc <_dtoa_r+0xdac>)
   2c5ba:	f7d4 f913 	bl	7e4 <__aeabi_dsub>
   2c5be:	4632      	mov	r2, r6
   2c5c0:	463b      	mov	r3, r7
   2c5c2:	f7d4 fd53 	bl	106c <__aeabi_dcmpgt>
   2c5c6:	b908      	cbnz	r0, 2c5cc <_dtoa_r+0xd7c>
   2c5c8:	e6ae      	b.n	2c328 <_dtoa_r+0xad8>
   2c5ca:	4615      	mov	r5, r2
   2c5cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2c5d0:	2b30      	cmp	r3, #48	; 0x30
   2c5d2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2c5d6:	d0f8      	beq.n	2c5ca <_dtoa_r+0xd7a>
   2c5d8:	e5d7      	b.n	2c18a <_dtoa_r+0x93a>
   2c5da:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2c5de:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2c5e0:	9302      	str	r3, [sp, #8]
   2c5e2:	f7ff bae8 	b.w	2bbb6 <_dtoa_r+0x366>
   2c5e6:	970c      	str	r7, [sp, #48]	; 0x30
   2c5e8:	f7ff bba5 	b.w	2bd36 <_dtoa_r+0x4e6>
   2c5ec:	401c0000 	.word	0x401c0000
   2c5f0:	40140000 	.word	0x40140000
   2c5f4:	00031648 	.word	0x00031648
   2c5f8:	00031620 	.word	0x00031620
   2c5fc:	3fe00000 	.word	0x3fe00000
   2c600:	40240000 	.word	0x40240000
   2c604:	2b39      	cmp	r3, #57	; 0x39
   2c606:	f8cd b018 	str.w	fp, [sp, #24]
   2c60a:	46d0      	mov	r8, sl
   2c60c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   2c610:	469a      	mov	sl, r3
   2c612:	d0c8      	beq.n	2c5a6 <_dtoa_r+0xd56>
   2c614:	f1bb 0f00 	cmp.w	fp, #0
   2c618:	f73f aebf 	bgt.w	2c39a <_dtoa_r+0xb4a>
   2c61c:	e6bf      	b.n	2c39e <_dtoa_r+0xb4e>
   2c61e:	f47f aebe 	bne.w	2c39e <_dtoa_r+0xb4e>
   2c622:	f01a 0f01 	tst.w	sl, #1
   2c626:	f43f aeba 	beq.w	2c39e <_dtoa_r+0xb4e>
   2c62a:	e6b2      	b.n	2c392 <_dtoa_r+0xb42>
   2c62c:	f04f 0800 	mov.w	r8, #0
   2c630:	4646      	mov	r6, r8
   2c632:	e5e9      	b.n	2c208 <_dtoa_r+0x9b8>
   2c634:	4631      	mov	r1, r6
   2c636:	2300      	movs	r3, #0
   2c638:	220a      	movs	r2, #10
   2c63a:	4620      	mov	r0, r4
   2c63c:	f000 fb2c 	bl	2cc98 <__multadd>
   2c640:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2c642:	2b00      	cmp	r3, #0
   2c644:	4606      	mov	r6, r0
   2c646:	dd0a      	ble.n	2c65e <_dtoa_r+0xe0e>
   2c648:	930a      	str	r3, [sp, #40]	; 0x28
   2c64a:	f7ff bbaa 	b.w	2bda2 <_dtoa_r+0x552>
   2c64e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2c650:	2b02      	cmp	r3, #2
   2c652:	dc23      	bgt.n	2c69c <_dtoa_r+0xe4c>
   2c654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2c656:	e43b      	b.n	2bed0 <_dtoa_r+0x680>
   2c658:	f04f 0a02 	mov.w	sl, #2
   2c65c:	e4ed      	b.n	2c03a <_dtoa_r+0x7ea>
   2c65e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2c660:	2b02      	cmp	r3, #2
   2c662:	dc1b      	bgt.n	2c69c <_dtoa_r+0xe4c>
   2c664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2c666:	e7ef      	b.n	2c648 <_dtoa_r+0xdf8>
   2c668:	2500      	movs	r5, #0
   2c66a:	6465      	str	r5, [r4, #68]	; 0x44
   2c66c:	4629      	mov	r1, r5
   2c66e:	4620      	mov	r0, r4
   2c670:	f000 fae2 	bl	2cc38 <_Balloc>
   2c674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c678:	930a      	str	r3, [sp, #40]	; 0x28
   2c67a:	930f      	str	r3, [sp, #60]	; 0x3c
   2c67c:	2301      	movs	r3, #1
   2c67e:	9004      	str	r0, [sp, #16]
   2c680:	9525      	str	r5, [sp, #148]	; 0x94
   2c682:	6420      	str	r0, [r4, #64]	; 0x40
   2c684:	930b      	str	r3, [sp, #44]	; 0x2c
   2c686:	f7ff b9dd 	b.w	2ba44 <_dtoa_r+0x1f4>
   2c68a:	2501      	movs	r5, #1
   2c68c:	f7ff b9a5 	b.w	2b9da <_dtoa_r+0x18a>
   2c690:	f43f ab69 	beq.w	2bd66 <_dtoa_r+0x516>
   2c694:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   2c698:	f7ff bbf9 	b.w	2be8e <_dtoa_r+0x63e>
   2c69c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2c69e:	930a      	str	r3, [sp, #40]	; 0x28
   2c6a0:	e5e5      	b.n	2c26e <_dtoa_r+0xa1e>
   2c6a2:	bf00      	nop

0002c6a4 <_localeconv_r>:
   2c6a4:	4a04      	ldr	r2, [pc, #16]	; (2c6b8 <_localeconv_r+0x14>)
   2c6a6:	4b05      	ldr	r3, [pc, #20]	; (2c6bc <_localeconv_r+0x18>)
   2c6a8:	6812      	ldr	r2, [r2, #0]
   2c6aa:	6b50      	ldr	r0, [r2, #52]	; 0x34
   2c6ac:	2800      	cmp	r0, #0
   2c6ae:	bf08      	it	eq
   2c6b0:	4618      	moveq	r0, r3
   2c6b2:	30f0      	adds	r0, #240	; 0xf0
   2c6b4:	4770      	bx	lr
   2c6b6:	bf00      	nop
   2c6b8:	2000c5e8 	.word	0x2000c5e8
   2c6bc:	2000c47c 	.word	0x2000c47c

0002c6c0 <_malloc_r>:
   2c6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c6c4:	f101 060b 	add.w	r6, r1, #11
   2c6c8:	2e16      	cmp	r6, #22
   2c6ca:	b083      	sub	sp, #12
   2c6cc:	4605      	mov	r5, r0
   2c6ce:	f240 809e 	bls.w	2c80e <_malloc_r+0x14e>
   2c6d2:	f036 0607 	bics.w	r6, r6, #7
   2c6d6:	f100 80bd 	bmi.w	2c854 <_malloc_r+0x194>
   2c6da:	42b1      	cmp	r1, r6
   2c6dc:	f200 80ba 	bhi.w	2c854 <_malloc_r+0x194>
   2c6e0:	f000 fa9e 	bl	2cc20 <__malloc_lock>
   2c6e4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   2c6e8:	f0c0 8293 	bcc.w	2cc12 <_malloc_r+0x552>
   2c6ec:	0a73      	lsrs	r3, r6, #9
   2c6ee:	f000 80b8 	beq.w	2c862 <_malloc_r+0x1a2>
   2c6f2:	2b04      	cmp	r3, #4
   2c6f4:	f200 8179 	bhi.w	2c9ea <_malloc_r+0x32a>
   2c6f8:	09b3      	lsrs	r3, r6, #6
   2c6fa:	f103 0039 	add.w	r0, r3, #57	; 0x39
   2c6fe:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   2c702:	00c3      	lsls	r3, r0, #3
   2c704:	4fbf      	ldr	r7, [pc, #764]	; (2ca04 <_malloc_r+0x344>)
   2c706:	443b      	add	r3, r7
   2c708:	f1a3 0108 	sub.w	r1, r3, #8
   2c70c:	685c      	ldr	r4, [r3, #4]
   2c70e:	42a1      	cmp	r1, r4
   2c710:	d106      	bne.n	2c720 <_malloc_r+0x60>
   2c712:	e00c      	b.n	2c72e <_malloc_r+0x6e>
   2c714:	2a00      	cmp	r2, #0
   2c716:	f280 80aa 	bge.w	2c86e <_malloc_r+0x1ae>
   2c71a:	68e4      	ldr	r4, [r4, #12]
   2c71c:	42a1      	cmp	r1, r4
   2c71e:	d006      	beq.n	2c72e <_malloc_r+0x6e>
   2c720:	6863      	ldr	r3, [r4, #4]
   2c722:	f023 0303 	bic.w	r3, r3, #3
   2c726:	1b9a      	subs	r2, r3, r6
   2c728:	2a0f      	cmp	r2, #15
   2c72a:	ddf3      	ble.n	2c714 <_malloc_r+0x54>
   2c72c:	4670      	mov	r0, lr
   2c72e:	693c      	ldr	r4, [r7, #16]
   2c730:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 2ca18 <_malloc_r+0x358>
   2c734:	4574      	cmp	r4, lr
   2c736:	f000 81ab 	beq.w	2ca90 <_malloc_r+0x3d0>
   2c73a:	6863      	ldr	r3, [r4, #4]
   2c73c:	f023 0303 	bic.w	r3, r3, #3
   2c740:	1b9a      	subs	r2, r3, r6
   2c742:	2a0f      	cmp	r2, #15
   2c744:	f300 8190 	bgt.w	2ca68 <_malloc_r+0x3a8>
   2c748:	2a00      	cmp	r2, #0
   2c74a:	f8c7 e014 	str.w	lr, [r7, #20]
   2c74e:	f8c7 e010 	str.w	lr, [r7, #16]
   2c752:	f280 809d 	bge.w	2c890 <_malloc_r+0x1d0>
   2c756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2c75a:	f080 8161 	bcs.w	2ca20 <_malloc_r+0x360>
   2c75e:	08db      	lsrs	r3, r3, #3
   2c760:	f103 0c01 	add.w	ip, r3, #1
   2c764:	1099      	asrs	r1, r3, #2
   2c766:	687a      	ldr	r2, [r7, #4]
   2c768:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   2c76c:	f8c4 8008 	str.w	r8, [r4, #8]
   2c770:	2301      	movs	r3, #1
   2c772:	408b      	lsls	r3, r1
   2c774:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   2c778:	4313      	orrs	r3, r2
   2c77a:	3908      	subs	r1, #8
   2c77c:	60e1      	str	r1, [r4, #12]
   2c77e:	607b      	str	r3, [r7, #4]
   2c780:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   2c784:	f8c8 400c 	str.w	r4, [r8, #12]
   2c788:	1082      	asrs	r2, r0, #2
   2c78a:	2401      	movs	r4, #1
   2c78c:	4094      	lsls	r4, r2
   2c78e:	429c      	cmp	r4, r3
   2c790:	f200 808b 	bhi.w	2c8aa <_malloc_r+0x1ea>
   2c794:	421c      	tst	r4, r3
   2c796:	d106      	bne.n	2c7a6 <_malloc_r+0xe6>
   2c798:	f020 0003 	bic.w	r0, r0, #3
   2c79c:	0064      	lsls	r4, r4, #1
   2c79e:	421c      	tst	r4, r3
   2c7a0:	f100 0004 	add.w	r0, r0, #4
   2c7a4:	d0fa      	beq.n	2c79c <_malloc_r+0xdc>
   2c7a6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   2c7aa:	46cc      	mov	ip, r9
   2c7ac:	4680      	mov	r8, r0
   2c7ae:	f8dc 300c 	ldr.w	r3, [ip, #12]
   2c7b2:	459c      	cmp	ip, r3
   2c7b4:	d107      	bne.n	2c7c6 <_malloc_r+0x106>
   2c7b6:	e16d      	b.n	2ca94 <_malloc_r+0x3d4>
   2c7b8:	2a00      	cmp	r2, #0
   2c7ba:	f280 817b 	bge.w	2cab4 <_malloc_r+0x3f4>
   2c7be:	68db      	ldr	r3, [r3, #12]
   2c7c0:	459c      	cmp	ip, r3
   2c7c2:	f000 8167 	beq.w	2ca94 <_malloc_r+0x3d4>
   2c7c6:	6859      	ldr	r1, [r3, #4]
   2c7c8:	f021 0103 	bic.w	r1, r1, #3
   2c7cc:	1b8a      	subs	r2, r1, r6
   2c7ce:	2a0f      	cmp	r2, #15
   2c7d0:	ddf2      	ble.n	2c7b8 <_malloc_r+0xf8>
   2c7d2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   2c7d6:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2c7da:	9300      	str	r3, [sp, #0]
   2c7dc:	199c      	adds	r4, r3, r6
   2c7de:	4628      	mov	r0, r5
   2c7e0:	f046 0601 	orr.w	r6, r6, #1
   2c7e4:	f042 0501 	orr.w	r5, r2, #1
   2c7e8:	605e      	str	r6, [r3, #4]
   2c7ea:	f8c8 c00c 	str.w	ip, [r8, #12]
   2c7ee:	f8cc 8008 	str.w	r8, [ip, #8]
   2c7f2:	617c      	str	r4, [r7, #20]
   2c7f4:	613c      	str	r4, [r7, #16]
   2c7f6:	f8c4 e00c 	str.w	lr, [r4, #12]
   2c7fa:	f8c4 e008 	str.w	lr, [r4, #8]
   2c7fe:	6065      	str	r5, [r4, #4]
   2c800:	505a      	str	r2, [r3, r1]
   2c802:	f000 fa13 	bl	2cc2c <__malloc_unlock>
   2c806:	9b00      	ldr	r3, [sp, #0]
   2c808:	f103 0408 	add.w	r4, r3, #8
   2c80c:	e01e      	b.n	2c84c <_malloc_r+0x18c>
   2c80e:	2910      	cmp	r1, #16
   2c810:	d820      	bhi.n	2c854 <_malloc_r+0x194>
   2c812:	f000 fa05 	bl	2cc20 <__malloc_lock>
   2c816:	2610      	movs	r6, #16
   2c818:	2318      	movs	r3, #24
   2c81a:	2002      	movs	r0, #2
   2c81c:	4f79      	ldr	r7, [pc, #484]	; (2ca04 <_malloc_r+0x344>)
   2c81e:	443b      	add	r3, r7
   2c820:	f1a3 0208 	sub.w	r2, r3, #8
   2c824:	685c      	ldr	r4, [r3, #4]
   2c826:	4294      	cmp	r4, r2
   2c828:	f000 813d 	beq.w	2caa6 <_malloc_r+0x3e6>
   2c82c:	6863      	ldr	r3, [r4, #4]
   2c82e:	68e1      	ldr	r1, [r4, #12]
   2c830:	68a6      	ldr	r6, [r4, #8]
   2c832:	f023 0303 	bic.w	r3, r3, #3
   2c836:	4423      	add	r3, r4
   2c838:	4628      	mov	r0, r5
   2c83a:	685a      	ldr	r2, [r3, #4]
   2c83c:	60f1      	str	r1, [r6, #12]
   2c83e:	f042 0201 	orr.w	r2, r2, #1
   2c842:	608e      	str	r6, [r1, #8]
   2c844:	605a      	str	r2, [r3, #4]
   2c846:	f000 f9f1 	bl	2cc2c <__malloc_unlock>
   2c84a:	3408      	adds	r4, #8
   2c84c:	4620      	mov	r0, r4
   2c84e:	b003      	add	sp, #12
   2c850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c854:	2400      	movs	r4, #0
   2c856:	230c      	movs	r3, #12
   2c858:	4620      	mov	r0, r4
   2c85a:	602b      	str	r3, [r5, #0]
   2c85c:	b003      	add	sp, #12
   2c85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c862:	2040      	movs	r0, #64	; 0x40
   2c864:	f44f 7300 	mov.w	r3, #512	; 0x200
   2c868:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   2c86c:	e74a      	b.n	2c704 <_malloc_r+0x44>
   2c86e:	4423      	add	r3, r4
   2c870:	68e1      	ldr	r1, [r4, #12]
   2c872:	685a      	ldr	r2, [r3, #4]
   2c874:	68a6      	ldr	r6, [r4, #8]
   2c876:	f042 0201 	orr.w	r2, r2, #1
   2c87a:	60f1      	str	r1, [r6, #12]
   2c87c:	4628      	mov	r0, r5
   2c87e:	608e      	str	r6, [r1, #8]
   2c880:	605a      	str	r2, [r3, #4]
   2c882:	f000 f9d3 	bl	2cc2c <__malloc_unlock>
   2c886:	3408      	adds	r4, #8
   2c888:	4620      	mov	r0, r4
   2c88a:	b003      	add	sp, #12
   2c88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c890:	4423      	add	r3, r4
   2c892:	4628      	mov	r0, r5
   2c894:	685a      	ldr	r2, [r3, #4]
   2c896:	f042 0201 	orr.w	r2, r2, #1
   2c89a:	605a      	str	r2, [r3, #4]
   2c89c:	f000 f9c6 	bl	2cc2c <__malloc_unlock>
   2c8a0:	3408      	adds	r4, #8
   2c8a2:	4620      	mov	r0, r4
   2c8a4:	b003      	add	sp, #12
   2c8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c8aa:	68bc      	ldr	r4, [r7, #8]
   2c8ac:	6863      	ldr	r3, [r4, #4]
   2c8ae:	f023 0803 	bic.w	r8, r3, #3
   2c8b2:	45b0      	cmp	r8, r6
   2c8b4:	d304      	bcc.n	2c8c0 <_malloc_r+0x200>
   2c8b6:	eba8 0306 	sub.w	r3, r8, r6
   2c8ba:	2b0f      	cmp	r3, #15
   2c8bc:	f300 8085 	bgt.w	2c9ca <_malloc_r+0x30a>
   2c8c0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 2ca1c <_malloc_r+0x35c>
   2c8c4:	4b50      	ldr	r3, [pc, #320]	; (2ca08 <_malloc_r+0x348>)
   2c8c6:	f8d9 2000 	ldr.w	r2, [r9]
   2c8ca:	681b      	ldr	r3, [r3, #0]
   2c8cc:	3201      	adds	r2, #1
   2c8ce:	4433      	add	r3, r6
   2c8d0:	eb04 0a08 	add.w	sl, r4, r8
   2c8d4:	f000 8155 	beq.w	2cb82 <_malloc_r+0x4c2>
   2c8d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   2c8dc:	330f      	adds	r3, #15
   2c8de:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   2c8e2:	f02b 0b0f 	bic.w	fp, fp, #15
   2c8e6:	4659      	mov	r1, fp
   2c8e8:	4628      	mov	r0, r5
   2c8ea:	f000 fc9f 	bl	2d22c <_sbrk_r>
   2c8ee:	1c41      	adds	r1, r0, #1
   2c8f0:	4602      	mov	r2, r0
   2c8f2:	f000 80fc 	beq.w	2caee <_malloc_r+0x42e>
   2c8f6:	4582      	cmp	sl, r0
   2c8f8:	f200 80f7 	bhi.w	2caea <_malloc_r+0x42a>
   2c8fc:	4b43      	ldr	r3, [pc, #268]	; (2ca0c <_malloc_r+0x34c>)
   2c8fe:	6819      	ldr	r1, [r3, #0]
   2c900:	4459      	add	r1, fp
   2c902:	6019      	str	r1, [r3, #0]
   2c904:	f000 814d 	beq.w	2cba2 <_malloc_r+0x4e2>
   2c908:	f8d9 0000 	ldr.w	r0, [r9]
   2c90c:	3001      	adds	r0, #1
   2c90e:	bf1b      	ittet	ne
   2c910:	eba2 0a0a 	subne.w	sl, r2, sl
   2c914:	4451      	addne	r1, sl
   2c916:	f8c9 2000 	streq.w	r2, [r9]
   2c91a:	6019      	strne	r1, [r3, #0]
   2c91c:	f012 0107 	ands.w	r1, r2, #7
   2c920:	f000 8115 	beq.w	2cb4e <_malloc_r+0x48e>
   2c924:	f1c1 0008 	rsb	r0, r1, #8
   2c928:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   2c92c:	4402      	add	r2, r0
   2c92e:	3108      	adds	r1, #8
   2c930:	eb02 090b 	add.w	r9, r2, fp
   2c934:	f3c9 090b 	ubfx	r9, r9, #0, #12
   2c938:	eba1 0909 	sub.w	r9, r1, r9
   2c93c:	4649      	mov	r1, r9
   2c93e:	4628      	mov	r0, r5
   2c940:	9301      	str	r3, [sp, #4]
   2c942:	9200      	str	r2, [sp, #0]
   2c944:	f000 fc72 	bl	2d22c <_sbrk_r>
   2c948:	1c43      	adds	r3, r0, #1
   2c94a:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2c94e:	f000 8143 	beq.w	2cbd8 <_malloc_r+0x518>
   2c952:	1a80      	subs	r0, r0, r2
   2c954:	4448      	add	r0, r9
   2c956:	f040 0001 	orr.w	r0, r0, #1
   2c95a:	6819      	ldr	r1, [r3, #0]
   2c95c:	60ba      	str	r2, [r7, #8]
   2c95e:	4449      	add	r1, r9
   2c960:	42bc      	cmp	r4, r7
   2c962:	6050      	str	r0, [r2, #4]
   2c964:	6019      	str	r1, [r3, #0]
   2c966:	d017      	beq.n	2c998 <_malloc_r+0x2d8>
   2c968:	f1b8 0f0f 	cmp.w	r8, #15
   2c96c:	f240 80fb 	bls.w	2cb66 <_malloc_r+0x4a6>
   2c970:	6860      	ldr	r0, [r4, #4]
   2c972:	f1a8 020c 	sub.w	r2, r8, #12
   2c976:	f022 0207 	bic.w	r2, r2, #7
   2c97a:	eb04 0e02 	add.w	lr, r4, r2
   2c97e:	f000 0001 	and.w	r0, r0, #1
   2c982:	f04f 0c05 	mov.w	ip, #5
   2c986:	4310      	orrs	r0, r2
   2c988:	2a0f      	cmp	r2, #15
   2c98a:	6060      	str	r0, [r4, #4]
   2c98c:	f8ce c004 	str.w	ip, [lr, #4]
   2c990:	f8ce c008 	str.w	ip, [lr, #8]
   2c994:	f200 8117 	bhi.w	2cbc6 <_malloc_r+0x506>
   2c998:	4b1d      	ldr	r3, [pc, #116]	; (2ca10 <_malloc_r+0x350>)
   2c99a:	68bc      	ldr	r4, [r7, #8]
   2c99c:	681a      	ldr	r2, [r3, #0]
   2c99e:	4291      	cmp	r1, r2
   2c9a0:	bf88      	it	hi
   2c9a2:	6019      	strhi	r1, [r3, #0]
   2c9a4:	4b1b      	ldr	r3, [pc, #108]	; (2ca14 <_malloc_r+0x354>)
   2c9a6:	681a      	ldr	r2, [r3, #0]
   2c9a8:	4291      	cmp	r1, r2
   2c9aa:	6862      	ldr	r2, [r4, #4]
   2c9ac:	bf88      	it	hi
   2c9ae:	6019      	strhi	r1, [r3, #0]
   2c9b0:	f022 0203 	bic.w	r2, r2, #3
   2c9b4:	4296      	cmp	r6, r2
   2c9b6:	eba2 0306 	sub.w	r3, r2, r6
   2c9ba:	d801      	bhi.n	2c9c0 <_malloc_r+0x300>
   2c9bc:	2b0f      	cmp	r3, #15
   2c9be:	dc04      	bgt.n	2c9ca <_malloc_r+0x30a>
   2c9c0:	4628      	mov	r0, r5
   2c9c2:	f000 f933 	bl	2cc2c <__malloc_unlock>
   2c9c6:	2400      	movs	r4, #0
   2c9c8:	e740      	b.n	2c84c <_malloc_r+0x18c>
   2c9ca:	19a2      	adds	r2, r4, r6
   2c9cc:	f043 0301 	orr.w	r3, r3, #1
   2c9d0:	f046 0601 	orr.w	r6, r6, #1
   2c9d4:	6066      	str	r6, [r4, #4]
   2c9d6:	4628      	mov	r0, r5
   2c9d8:	60ba      	str	r2, [r7, #8]
   2c9da:	6053      	str	r3, [r2, #4]
   2c9dc:	f000 f926 	bl	2cc2c <__malloc_unlock>
   2c9e0:	3408      	adds	r4, #8
   2c9e2:	4620      	mov	r0, r4
   2c9e4:	b003      	add	sp, #12
   2c9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c9ea:	2b14      	cmp	r3, #20
   2c9ec:	d971      	bls.n	2cad2 <_malloc_r+0x412>
   2c9ee:	2b54      	cmp	r3, #84	; 0x54
   2c9f0:	f200 80a3 	bhi.w	2cb3a <_malloc_r+0x47a>
   2c9f4:	0b33      	lsrs	r3, r6, #12
   2c9f6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   2c9fa:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   2c9fe:	00c3      	lsls	r3, r0, #3
   2ca00:	e680      	b.n	2c704 <_malloc_r+0x44>
   2ca02:	bf00      	nop
   2ca04:	2000ca18 	.word	0x2000ca18
   2ca08:	200027d0 	.word	0x200027d0
   2ca0c:	200027a0 	.word	0x200027a0
   2ca10:	200027c8 	.word	0x200027c8
   2ca14:	200027cc 	.word	0x200027cc
   2ca18:	2000ca20 	.word	0x2000ca20
   2ca1c:	2000ce20 	.word	0x2000ce20
   2ca20:	0a5a      	lsrs	r2, r3, #9
   2ca22:	2a04      	cmp	r2, #4
   2ca24:	d95b      	bls.n	2cade <_malloc_r+0x41e>
   2ca26:	2a14      	cmp	r2, #20
   2ca28:	f200 80ae 	bhi.w	2cb88 <_malloc_r+0x4c8>
   2ca2c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   2ca30:	00c9      	lsls	r1, r1, #3
   2ca32:	325b      	adds	r2, #91	; 0x5b
   2ca34:	eb07 0c01 	add.w	ip, r7, r1
   2ca38:	5879      	ldr	r1, [r7, r1]
   2ca3a:	f1ac 0c08 	sub.w	ip, ip, #8
   2ca3e:	458c      	cmp	ip, r1
   2ca40:	f000 8088 	beq.w	2cb54 <_malloc_r+0x494>
   2ca44:	684a      	ldr	r2, [r1, #4]
   2ca46:	f022 0203 	bic.w	r2, r2, #3
   2ca4a:	4293      	cmp	r3, r2
   2ca4c:	d273      	bcs.n	2cb36 <_malloc_r+0x476>
   2ca4e:	6889      	ldr	r1, [r1, #8]
   2ca50:	458c      	cmp	ip, r1
   2ca52:	d1f7      	bne.n	2ca44 <_malloc_r+0x384>
   2ca54:	f8dc 200c 	ldr.w	r2, [ip, #12]
   2ca58:	687b      	ldr	r3, [r7, #4]
   2ca5a:	60e2      	str	r2, [r4, #12]
   2ca5c:	f8c4 c008 	str.w	ip, [r4, #8]
   2ca60:	6094      	str	r4, [r2, #8]
   2ca62:	f8cc 400c 	str.w	r4, [ip, #12]
   2ca66:	e68f      	b.n	2c788 <_malloc_r+0xc8>
   2ca68:	19a1      	adds	r1, r4, r6
   2ca6a:	f046 0c01 	orr.w	ip, r6, #1
   2ca6e:	f042 0601 	orr.w	r6, r2, #1
   2ca72:	f8c4 c004 	str.w	ip, [r4, #4]
   2ca76:	4628      	mov	r0, r5
   2ca78:	6179      	str	r1, [r7, #20]
   2ca7a:	6139      	str	r1, [r7, #16]
   2ca7c:	f8c1 e00c 	str.w	lr, [r1, #12]
   2ca80:	f8c1 e008 	str.w	lr, [r1, #8]
   2ca84:	604e      	str	r6, [r1, #4]
   2ca86:	50e2      	str	r2, [r4, r3]
   2ca88:	f000 f8d0 	bl	2cc2c <__malloc_unlock>
   2ca8c:	3408      	adds	r4, #8
   2ca8e:	e6dd      	b.n	2c84c <_malloc_r+0x18c>
   2ca90:	687b      	ldr	r3, [r7, #4]
   2ca92:	e679      	b.n	2c788 <_malloc_r+0xc8>
   2ca94:	f108 0801 	add.w	r8, r8, #1
   2ca98:	f018 0f03 	tst.w	r8, #3
   2ca9c:	f10c 0c08 	add.w	ip, ip, #8
   2caa0:	f47f ae85 	bne.w	2c7ae <_malloc_r+0xee>
   2caa4:	e02d      	b.n	2cb02 <_malloc_r+0x442>
   2caa6:	68dc      	ldr	r4, [r3, #12]
   2caa8:	42a3      	cmp	r3, r4
   2caaa:	bf08      	it	eq
   2caac:	3002      	addeq	r0, #2
   2caae:	f43f ae3e 	beq.w	2c72e <_malloc_r+0x6e>
   2cab2:	e6bb      	b.n	2c82c <_malloc_r+0x16c>
   2cab4:	4419      	add	r1, r3
   2cab6:	461c      	mov	r4, r3
   2cab8:	684a      	ldr	r2, [r1, #4]
   2caba:	68db      	ldr	r3, [r3, #12]
   2cabc:	f854 6f08 	ldr.w	r6, [r4, #8]!
   2cac0:	f042 0201 	orr.w	r2, r2, #1
   2cac4:	604a      	str	r2, [r1, #4]
   2cac6:	4628      	mov	r0, r5
   2cac8:	60f3      	str	r3, [r6, #12]
   2caca:	609e      	str	r6, [r3, #8]
   2cacc:	f000 f8ae 	bl	2cc2c <__malloc_unlock>
   2cad0:	e6bc      	b.n	2c84c <_malloc_r+0x18c>
   2cad2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   2cad6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   2cada:	00c3      	lsls	r3, r0, #3
   2cadc:	e612      	b.n	2c704 <_malloc_r+0x44>
   2cade:	099a      	lsrs	r2, r3, #6
   2cae0:	f102 0139 	add.w	r1, r2, #57	; 0x39
   2cae4:	00c9      	lsls	r1, r1, #3
   2cae6:	3238      	adds	r2, #56	; 0x38
   2cae8:	e7a4      	b.n	2ca34 <_malloc_r+0x374>
   2caea:	42bc      	cmp	r4, r7
   2caec:	d054      	beq.n	2cb98 <_malloc_r+0x4d8>
   2caee:	68bc      	ldr	r4, [r7, #8]
   2caf0:	6862      	ldr	r2, [r4, #4]
   2caf2:	f022 0203 	bic.w	r2, r2, #3
   2caf6:	e75d      	b.n	2c9b4 <_malloc_r+0x2f4>
   2caf8:	f859 3908 	ldr.w	r3, [r9], #-8
   2cafc:	4599      	cmp	r9, r3
   2cafe:	f040 8086 	bne.w	2cc0e <_malloc_r+0x54e>
   2cb02:	f010 0f03 	tst.w	r0, #3
   2cb06:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   2cb0a:	d1f5      	bne.n	2caf8 <_malloc_r+0x438>
   2cb0c:	687b      	ldr	r3, [r7, #4]
   2cb0e:	ea23 0304 	bic.w	r3, r3, r4
   2cb12:	607b      	str	r3, [r7, #4]
   2cb14:	0064      	lsls	r4, r4, #1
   2cb16:	429c      	cmp	r4, r3
   2cb18:	f63f aec7 	bhi.w	2c8aa <_malloc_r+0x1ea>
   2cb1c:	2c00      	cmp	r4, #0
   2cb1e:	f43f aec4 	beq.w	2c8aa <_malloc_r+0x1ea>
   2cb22:	421c      	tst	r4, r3
   2cb24:	4640      	mov	r0, r8
   2cb26:	f47f ae3e 	bne.w	2c7a6 <_malloc_r+0xe6>
   2cb2a:	0064      	lsls	r4, r4, #1
   2cb2c:	421c      	tst	r4, r3
   2cb2e:	f100 0004 	add.w	r0, r0, #4
   2cb32:	d0fa      	beq.n	2cb2a <_malloc_r+0x46a>
   2cb34:	e637      	b.n	2c7a6 <_malloc_r+0xe6>
   2cb36:	468c      	mov	ip, r1
   2cb38:	e78c      	b.n	2ca54 <_malloc_r+0x394>
   2cb3a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   2cb3e:	d815      	bhi.n	2cb6c <_malloc_r+0x4ac>
   2cb40:	0bf3      	lsrs	r3, r6, #15
   2cb42:	f103 0078 	add.w	r0, r3, #120	; 0x78
   2cb46:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   2cb4a:	00c3      	lsls	r3, r0, #3
   2cb4c:	e5da      	b.n	2c704 <_malloc_r+0x44>
   2cb4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   2cb52:	e6ed      	b.n	2c930 <_malloc_r+0x270>
   2cb54:	687b      	ldr	r3, [r7, #4]
   2cb56:	1092      	asrs	r2, r2, #2
   2cb58:	2101      	movs	r1, #1
   2cb5a:	fa01 f202 	lsl.w	r2, r1, r2
   2cb5e:	4313      	orrs	r3, r2
   2cb60:	607b      	str	r3, [r7, #4]
   2cb62:	4662      	mov	r2, ip
   2cb64:	e779      	b.n	2ca5a <_malloc_r+0x39a>
   2cb66:	2301      	movs	r3, #1
   2cb68:	6053      	str	r3, [r2, #4]
   2cb6a:	e729      	b.n	2c9c0 <_malloc_r+0x300>
   2cb6c:	f240 5254 	movw	r2, #1364	; 0x554
   2cb70:	4293      	cmp	r3, r2
   2cb72:	d822      	bhi.n	2cbba <_malloc_r+0x4fa>
   2cb74:	0cb3      	lsrs	r3, r6, #18
   2cb76:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   2cb7a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   2cb7e:	00c3      	lsls	r3, r0, #3
   2cb80:	e5c0      	b.n	2c704 <_malloc_r+0x44>
   2cb82:	f103 0b10 	add.w	fp, r3, #16
   2cb86:	e6ae      	b.n	2c8e6 <_malloc_r+0x226>
   2cb88:	2a54      	cmp	r2, #84	; 0x54
   2cb8a:	d829      	bhi.n	2cbe0 <_malloc_r+0x520>
   2cb8c:	0b1a      	lsrs	r2, r3, #12
   2cb8e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   2cb92:	00c9      	lsls	r1, r1, #3
   2cb94:	326e      	adds	r2, #110	; 0x6e
   2cb96:	e74d      	b.n	2ca34 <_malloc_r+0x374>
   2cb98:	4b20      	ldr	r3, [pc, #128]	; (2cc1c <_malloc_r+0x55c>)
   2cb9a:	6819      	ldr	r1, [r3, #0]
   2cb9c:	4459      	add	r1, fp
   2cb9e:	6019      	str	r1, [r3, #0]
   2cba0:	e6b2      	b.n	2c908 <_malloc_r+0x248>
   2cba2:	f3ca 000b 	ubfx	r0, sl, #0, #12
   2cba6:	2800      	cmp	r0, #0
   2cba8:	f47f aeae 	bne.w	2c908 <_malloc_r+0x248>
   2cbac:	eb08 030b 	add.w	r3, r8, fp
   2cbb0:	68ba      	ldr	r2, [r7, #8]
   2cbb2:	f043 0301 	orr.w	r3, r3, #1
   2cbb6:	6053      	str	r3, [r2, #4]
   2cbb8:	e6ee      	b.n	2c998 <_malloc_r+0x2d8>
   2cbba:	207f      	movs	r0, #127	; 0x7f
   2cbbc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   2cbc0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   2cbc4:	e59e      	b.n	2c704 <_malloc_r+0x44>
   2cbc6:	f104 0108 	add.w	r1, r4, #8
   2cbca:	4628      	mov	r0, r5
   2cbcc:	9300      	str	r3, [sp, #0]
   2cbce:	f000 fc3d 	bl	2d44c <_free_r>
   2cbd2:	9b00      	ldr	r3, [sp, #0]
   2cbd4:	6819      	ldr	r1, [r3, #0]
   2cbd6:	e6df      	b.n	2c998 <_malloc_r+0x2d8>
   2cbd8:	2001      	movs	r0, #1
   2cbda:	f04f 0900 	mov.w	r9, #0
   2cbde:	e6bc      	b.n	2c95a <_malloc_r+0x29a>
   2cbe0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2cbe4:	d805      	bhi.n	2cbf2 <_malloc_r+0x532>
   2cbe6:	0bda      	lsrs	r2, r3, #15
   2cbe8:	f102 0178 	add.w	r1, r2, #120	; 0x78
   2cbec:	00c9      	lsls	r1, r1, #3
   2cbee:	3277      	adds	r2, #119	; 0x77
   2cbf0:	e720      	b.n	2ca34 <_malloc_r+0x374>
   2cbf2:	f240 5154 	movw	r1, #1364	; 0x554
   2cbf6:	428a      	cmp	r2, r1
   2cbf8:	d805      	bhi.n	2cc06 <_malloc_r+0x546>
   2cbfa:	0c9a      	lsrs	r2, r3, #18
   2cbfc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   2cc00:	00c9      	lsls	r1, r1, #3
   2cc02:	327c      	adds	r2, #124	; 0x7c
   2cc04:	e716      	b.n	2ca34 <_malloc_r+0x374>
   2cc06:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   2cc0a:	227e      	movs	r2, #126	; 0x7e
   2cc0c:	e712      	b.n	2ca34 <_malloc_r+0x374>
   2cc0e:	687b      	ldr	r3, [r7, #4]
   2cc10:	e780      	b.n	2cb14 <_malloc_r+0x454>
   2cc12:	08f0      	lsrs	r0, r6, #3
   2cc14:	f106 0308 	add.w	r3, r6, #8
   2cc18:	e600      	b.n	2c81c <_malloc_r+0x15c>
   2cc1a:	bf00      	nop
   2cc1c:	200027a0 	.word	0x200027a0

0002cc20 <__malloc_lock>:
   2cc20:	4801      	ldr	r0, [pc, #4]	; (2cc28 <__malloc_lock+0x8>)
   2cc22:	f000 bcf9 	b.w	2d618 <__retarget_lock_acquire_recursive>
   2cc26:	bf00      	nop
   2cc28:	20002af8 	.word	0x20002af8

0002cc2c <__malloc_unlock>:
   2cc2c:	4801      	ldr	r0, [pc, #4]	; (2cc34 <__malloc_unlock+0x8>)
   2cc2e:	f000 bcf5 	b.w	2d61c <__retarget_lock_release_recursive>
   2cc32:	bf00      	nop
   2cc34:	20002af8 	.word	0x20002af8

0002cc38 <_Balloc>:
   2cc38:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2cc3a:	b570      	push	{r4, r5, r6, lr}
   2cc3c:	4605      	mov	r5, r0
   2cc3e:	460c      	mov	r4, r1
   2cc40:	b14b      	cbz	r3, 2cc56 <_Balloc+0x1e>
   2cc42:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2cc46:	b180      	cbz	r0, 2cc6a <_Balloc+0x32>
   2cc48:	6802      	ldr	r2, [r0, #0]
   2cc4a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2cc4e:	2300      	movs	r3, #0
   2cc50:	6103      	str	r3, [r0, #16]
   2cc52:	60c3      	str	r3, [r0, #12]
   2cc54:	bd70      	pop	{r4, r5, r6, pc}
   2cc56:	2221      	movs	r2, #33	; 0x21
   2cc58:	2104      	movs	r1, #4
   2cc5a:	f000 fb77 	bl	2d34c <_calloc_r>
   2cc5e:	64e8      	str	r0, [r5, #76]	; 0x4c
   2cc60:	4603      	mov	r3, r0
   2cc62:	2800      	cmp	r0, #0
   2cc64:	d1ed      	bne.n	2cc42 <_Balloc+0xa>
   2cc66:	2000      	movs	r0, #0
   2cc68:	bd70      	pop	{r4, r5, r6, pc}
   2cc6a:	2101      	movs	r1, #1
   2cc6c:	fa01 f604 	lsl.w	r6, r1, r4
   2cc70:	1d72      	adds	r2, r6, #5
   2cc72:	4628      	mov	r0, r5
   2cc74:	0092      	lsls	r2, r2, #2
   2cc76:	f000 fb69 	bl	2d34c <_calloc_r>
   2cc7a:	2800      	cmp	r0, #0
   2cc7c:	d0f3      	beq.n	2cc66 <_Balloc+0x2e>
   2cc7e:	6044      	str	r4, [r0, #4]
   2cc80:	6086      	str	r6, [r0, #8]
   2cc82:	e7e4      	b.n	2cc4e <_Balloc+0x16>

0002cc84 <_Bfree>:
   2cc84:	b131      	cbz	r1, 2cc94 <_Bfree+0x10>
   2cc86:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2cc88:	684a      	ldr	r2, [r1, #4]
   2cc8a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2cc8e:	6008      	str	r0, [r1, #0]
   2cc90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   2cc94:	4770      	bx	lr
   2cc96:	bf00      	nop

0002cc98 <__multadd>:
   2cc98:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cc9a:	690c      	ldr	r4, [r1, #16]
   2cc9c:	b083      	sub	sp, #12
   2cc9e:	460d      	mov	r5, r1
   2cca0:	4606      	mov	r6, r0
   2cca2:	f101 0e14 	add.w	lr, r1, #20
   2cca6:	2700      	movs	r7, #0
   2cca8:	f8de 0000 	ldr.w	r0, [lr]
   2ccac:	b281      	uxth	r1, r0
   2ccae:	fb02 3301 	mla	r3, r2, r1, r3
   2ccb2:	0c01      	lsrs	r1, r0, #16
   2ccb4:	0c18      	lsrs	r0, r3, #16
   2ccb6:	fb02 0101 	mla	r1, r2, r1, r0
   2ccba:	b29b      	uxth	r3, r3
   2ccbc:	3701      	adds	r7, #1
   2ccbe:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   2ccc2:	42bc      	cmp	r4, r7
   2ccc4:	f84e 3b04 	str.w	r3, [lr], #4
   2ccc8:	ea4f 4311 	mov.w	r3, r1, lsr #16
   2cccc:	dcec      	bgt.n	2cca8 <__multadd+0x10>
   2ccce:	b13b      	cbz	r3, 2cce0 <__multadd+0x48>
   2ccd0:	68aa      	ldr	r2, [r5, #8]
   2ccd2:	4294      	cmp	r4, r2
   2ccd4:	da07      	bge.n	2cce6 <__multadd+0x4e>
   2ccd6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   2ccda:	3401      	adds	r4, #1
   2ccdc:	6153      	str	r3, [r2, #20]
   2ccde:	612c      	str	r4, [r5, #16]
   2cce0:	4628      	mov	r0, r5
   2cce2:	b003      	add	sp, #12
   2cce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2cce6:	6869      	ldr	r1, [r5, #4]
   2cce8:	9301      	str	r3, [sp, #4]
   2ccea:	3101      	adds	r1, #1
   2ccec:	4630      	mov	r0, r6
   2ccee:	f7ff ffa3 	bl	2cc38 <_Balloc>
   2ccf2:	692a      	ldr	r2, [r5, #16]
   2ccf4:	3202      	adds	r2, #2
   2ccf6:	f105 010c 	add.w	r1, r5, #12
   2ccfa:	4607      	mov	r7, r0
   2ccfc:	0092      	lsls	r2, r2, #2
   2ccfe:	300c      	adds	r0, #12
   2cd00:	f7d3 fade 	bl	2c0 <memcpy>
   2cd04:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   2cd06:	6869      	ldr	r1, [r5, #4]
   2cd08:	9b01      	ldr	r3, [sp, #4]
   2cd0a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2cd0e:	6028      	str	r0, [r5, #0]
   2cd10:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   2cd14:	463d      	mov	r5, r7
   2cd16:	e7de      	b.n	2ccd6 <__multadd+0x3e>

0002cd18 <__hi0bits>:
   2cd18:	0c02      	lsrs	r2, r0, #16
   2cd1a:	0412      	lsls	r2, r2, #16
   2cd1c:	4603      	mov	r3, r0
   2cd1e:	b9b2      	cbnz	r2, 2cd4e <__hi0bits+0x36>
   2cd20:	0403      	lsls	r3, r0, #16
   2cd22:	2010      	movs	r0, #16
   2cd24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   2cd28:	bf04      	itt	eq
   2cd2a:	021b      	lsleq	r3, r3, #8
   2cd2c:	3008      	addeq	r0, #8
   2cd2e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2cd32:	bf04      	itt	eq
   2cd34:	011b      	lsleq	r3, r3, #4
   2cd36:	3004      	addeq	r0, #4
   2cd38:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   2cd3c:	bf04      	itt	eq
   2cd3e:	009b      	lsleq	r3, r3, #2
   2cd40:	3002      	addeq	r0, #2
   2cd42:	2b00      	cmp	r3, #0
   2cd44:	db02      	blt.n	2cd4c <__hi0bits+0x34>
   2cd46:	005b      	lsls	r3, r3, #1
   2cd48:	d403      	bmi.n	2cd52 <__hi0bits+0x3a>
   2cd4a:	2020      	movs	r0, #32
   2cd4c:	4770      	bx	lr
   2cd4e:	2000      	movs	r0, #0
   2cd50:	e7e8      	b.n	2cd24 <__hi0bits+0xc>
   2cd52:	3001      	adds	r0, #1
   2cd54:	4770      	bx	lr
   2cd56:	bf00      	nop

0002cd58 <__lo0bits>:
   2cd58:	6803      	ldr	r3, [r0, #0]
   2cd5a:	f013 0207 	ands.w	r2, r3, #7
   2cd5e:	4601      	mov	r1, r0
   2cd60:	d007      	beq.n	2cd72 <__lo0bits+0x1a>
   2cd62:	07da      	lsls	r2, r3, #31
   2cd64:	d421      	bmi.n	2cdaa <__lo0bits+0x52>
   2cd66:	0798      	lsls	r0, r3, #30
   2cd68:	d421      	bmi.n	2cdae <__lo0bits+0x56>
   2cd6a:	089b      	lsrs	r3, r3, #2
   2cd6c:	600b      	str	r3, [r1, #0]
   2cd6e:	2002      	movs	r0, #2
   2cd70:	4770      	bx	lr
   2cd72:	b298      	uxth	r0, r3
   2cd74:	b198      	cbz	r0, 2cd9e <__lo0bits+0x46>
   2cd76:	4610      	mov	r0, r2
   2cd78:	f013 0fff 	tst.w	r3, #255	; 0xff
   2cd7c:	bf04      	itt	eq
   2cd7e:	0a1b      	lsreq	r3, r3, #8
   2cd80:	3008      	addeq	r0, #8
   2cd82:	071a      	lsls	r2, r3, #28
   2cd84:	bf04      	itt	eq
   2cd86:	091b      	lsreq	r3, r3, #4
   2cd88:	3004      	addeq	r0, #4
   2cd8a:	079a      	lsls	r2, r3, #30
   2cd8c:	bf04      	itt	eq
   2cd8e:	089b      	lsreq	r3, r3, #2
   2cd90:	3002      	addeq	r0, #2
   2cd92:	07da      	lsls	r2, r3, #31
   2cd94:	d407      	bmi.n	2cda6 <__lo0bits+0x4e>
   2cd96:	085b      	lsrs	r3, r3, #1
   2cd98:	d104      	bne.n	2cda4 <__lo0bits+0x4c>
   2cd9a:	2020      	movs	r0, #32
   2cd9c:	4770      	bx	lr
   2cd9e:	0c1b      	lsrs	r3, r3, #16
   2cda0:	2010      	movs	r0, #16
   2cda2:	e7e9      	b.n	2cd78 <__lo0bits+0x20>
   2cda4:	3001      	adds	r0, #1
   2cda6:	600b      	str	r3, [r1, #0]
   2cda8:	4770      	bx	lr
   2cdaa:	2000      	movs	r0, #0
   2cdac:	4770      	bx	lr
   2cdae:	085b      	lsrs	r3, r3, #1
   2cdb0:	600b      	str	r3, [r1, #0]
   2cdb2:	2001      	movs	r0, #1
   2cdb4:	4770      	bx	lr
   2cdb6:	bf00      	nop

0002cdb8 <__i2b>:
   2cdb8:	b510      	push	{r4, lr}
   2cdba:	460c      	mov	r4, r1
   2cdbc:	2101      	movs	r1, #1
   2cdbe:	f7ff ff3b 	bl	2cc38 <_Balloc>
   2cdc2:	2201      	movs	r2, #1
   2cdc4:	6144      	str	r4, [r0, #20]
   2cdc6:	6102      	str	r2, [r0, #16]
   2cdc8:	bd10      	pop	{r4, pc}
   2cdca:	bf00      	nop

0002cdcc <__multiply>:
   2cdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cdd0:	690c      	ldr	r4, [r1, #16]
   2cdd2:	6915      	ldr	r5, [r2, #16]
   2cdd4:	42ac      	cmp	r4, r5
   2cdd6:	b083      	sub	sp, #12
   2cdd8:	468b      	mov	fp, r1
   2cdda:	4616      	mov	r6, r2
   2cddc:	da04      	bge.n	2cde8 <__multiply+0x1c>
   2cdde:	4622      	mov	r2, r4
   2cde0:	46b3      	mov	fp, r6
   2cde2:	462c      	mov	r4, r5
   2cde4:	460e      	mov	r6, r1
   2cde6:	4615      	mov	r5, r2
   2cde8:	f8db 3008 	ldr.w	r3, [fp, #8]
   2cdec:	f8db 1004 	ldr.w	r1, [fp, #4]
   2cdf0:	eb04 0805 	add.w	r8, r4, r5
   2cdf4:	4598      	cmp	r8, r3
   2cdf6:	bfc8      	it	gt
   2cdf8:	3101      	addgt	r1, #1
   2cdfa:	f7ff ff1d 	bl	2cc38 <_Balloc>
   2cdfe:	f100 0914 	add.w	r9, r0, #20
   2ce02:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   2ce06:	45d1      	cmp	r9, sl
   2ce08:	9000      	str	r0, [sp, #0]
   2ce0a:	d205      	bcs.n	2ce18 <__multiply+0x4c>
   2ce0c:	464b      	mov	r3, r9
   2ce0e:	2100      	movs	r1, #0
   2ce10:	f843 1b04 	str.w	r1, [r3], #4
   2ce14:	459a      	cmp	sl, r3
   2ce16:	d8fb      	bhi.n	2ce10 <__multiply+0x44>
   2ce18:	f106 0c14 	add.w	ip, r6, #20
   2ce1c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   2ce20:	f10b 0b14 	add.w	fp, fp, #20
   2ce24:	459c      	cmp	ip, r3
   2ce26:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   2ce2a:	d24c      	bcs.n	2cec6 <__multiply+0xfa>
   2ce2c:	f8cd a004 	str.w	sl, [sp, #4]
   2ce30:	469a      	mov	sl, r3
   2ce32:	f8dc 5000 	ldr.w	r5, [ip]
   2ce36:	b2af      	uxth	r7, r5
   2ce38:	b1ef      	cbz	r7, 2ce76 <__multiply+0xaa>
   2ce3a:	2100      	movs	r1, #0
   2ce3c:	464d      	mov	r5, r9
   2ce3e:	465e      	mov	r6, fp
   2ce40:	460c      	mov	r4, r1
   2ce42:	f856 2b04 	ldr.w	r2, [r6], #4
   2ce46:	6828      	ldr	r0, [r5, #0]
   2ce48:	b293      	uxth	r3, r2
   2ce4a:	b281      	uxth	r1, r0
   2ce4c:	fb07 1303 	mla	r3, r7, r3, r1
   2ce50:	0c12      	lsrs	r2, r2, #16
   2ce52:	0c01      	lsrs	r1, r0, #16
   2ce54:	4423      	add	r3, r4
   2ce56:	fb07 1102 	mla	r1, r7, r2, r1
   2ce5a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   2ce5e:	b29b      	uxth	r3, r3
   2ce60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2ce64:	45b6      	cmp	lr, r6
   2ce66:	f845 3b04 	str.w	r3, [r5], #4
   2ce6a:	ea4f 4411 	mov.w	r4, r1, lsr #16
   2ce6e:	d8e8      	bhi.n	2ce42 <__multiply+0x76>
   2ce70:	602c      	str	r4, [r5, #0]
   2ce72:	f8dc 5000 	ldr.w	r5, [ip]
   2ce76:	0c2d      	lsrs	r5, r5, #16
   2ce78:	d01d      	beq.n	2ceb6 <__multiply+0xea>
   2ce7a:	f8d9 3000 	ldr.w	r3, [r9]
   2ce7e:	4648      	mov	r0, r9
   2ce80:	461c      	mov	r4, r3
   2ce82:	4659      	mov	r1, fp
   2ce84:	2200      	movs	r2, #0
   2ce86:	880e      	ldrh	r6, [r1, #0]
   2ce88:	0c24      	lsrs	r4, r4, #16
   2ce8a:	fb05 4406 	mla	r4, r5, r6, r4
   2ce8e:	4422      	add	r2, r4
   2ce90:	b29b      	uxth	r3, r3
   2ce92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2ce96:	f840 3b04 	str.w	r3, [r0], #4
   2ce9a:	f851 3b04 	ldr.w	r3, [r1], #4
   2ce9e:	6804      	ldr	r4, [r0, #0]
   2cea0:	0c1b      	lsrs	r3, r3, #16
   2cea2:	b2a6      	uxth	r6, r4
   2cea4:	fb05 6303 	mla	r3, r5, r3, r6
   2cea8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   2ceac:	458e      	cmp	lr, r1
   2ceae:	ea4f 4213 	mov.w	r2, r3, lsr #16
   2ceb2:	d8e8      	bhi.n	2ce86 <__multiply+0xba>
   2ceb4:	6003      	str	r3, [r0, #0]
   2ceb6:	f10c 0c04 	add.w	ip, ip, #4
   2ceba:	45e2      	cmp	sl, ip
   2cebc:	f109 0904 	add.w	r9, r9, #4
   2cec0:	d8b7      	bhi.n	2ce32 <__multiply+0x66>
   2cec2:	f8dd a004 	ldr.w	sl, [sp, #4]
   2cec6:	f1b8 0f00 	cmp.w	r8, #0
   2ceca:	dd0b      	ble.n	2cee4 <__multiply+0x118>
   2cecc:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   2ced0:	f1aa 0a04 	sub.w	sl, sl, #4
   2ced4:	b11b      	cbz	r3, 2cede <__multiply+0x112>
   2ced6:	e005      	b.n	2cee4 <__multiply+0x118>
   2ced8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   2cedc:	b913      	cbnz	r3, 2cee4 <__multiply+0x118>
   2cede:	f1b8 0801 	subs.w	r8, r8, #1
   2cee2:	d1f9      	bne.n	2ced8 <__multiply+0x10c>
   2cee4:	9800      	ldr	r0, [sp, #0]
   2cee6:	f8c0 8010 	str.w	r8, [r0, #16]
   2ceea:	b003      	add	sp, #12
   2ceec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002cef0 <__pow5mult>:
   2cef0:	f012 0303 	ands.w	r3, r2, #3
   2cef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cef8:	4614      	mov	r4, r2
   2cefa:	4607      	mov	r7, r0
   2cefc:	d12e      	bne.n	2cf5c <__pow5mult+0x6c>
   2cefe:	460d      	mov	r5, r1
   2cf00:	10a4      	asrs	r4, r4, #2
   2cf02:	d01c      	beq.n	2cf3e <__pow5mult+0x4e>
   2cf04:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   2cf06:	b396      	cbz	r6, 2cf6e <__pow5mult+0x7e>
   2cf08:	07e3      	lsls	r3, r4, #31
   2cf0a:	f04f 0800 	mov.w	r8, #0
   2cf0e:	d406      	bmi.n	2cf1e <__pow5mult+0x2e>
   2cf10:	1064      	asrs	r4, r4, #1
   2cf12:	d014      	beq.n	2cf3e <__pow5mult+0x4e>
   2cf14:	6830      	ldr	r0, [r6, #0]
   2cf16:	b1a8      	cbz	r0, 2cf44 <__pow5mult+0x54>
   2cf18:	4606      	mov	r6, r0
   2cf1a:	07e3      	lsls	r3, r4, #31
   2cf1c:	d5f8      	bpl.n	2cf10 <__pow5mult+0x20>
   2cf1e:	4632      	mov	r2, r6
   2cf20:	4629      	mov	r1, r5
   2cf22:	4638      	mov	r0, r7
   2cf24:	f7ff ff52 	bl	2cdcc <__multiply>
   2cf28:	b1b5      	cbz	r5, 2cf58 <__pow5mult+0x68>
   2cf2a:	686a      	ldr	r2, [r5, #4]
   2cf2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2cf2e:	1064      	asrs	r4, r4, #1
   2cf30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2cf34:	6029      	str	r1, [r5, #0]
   2cf36:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   2cf3a:	4605      	mov	r5, r0
   2cf3c:	d1ea      	bne.n	2cf14 <__pow5mult+0x24>
   2cf3e:	4628      	mov	r0, r5
   2cf40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2cf44:	4632      	mov	r2, r6
   2cf46:	4631      	mov	r1, r6
   2cf48:	4638      	mov	r0, r7
   2cf4a:	f7ff ff3f 	bl	2cdcc <__multiply>
   2cf4e:	6030      	str	r0, [r6, #0]
   2cf50:	f8c0 8000 	str.w	r8, [r0]
   2cf54:	4606      	mov	r6, r0
   2cf56:	e7e0      	b.n	2cf1a <__pow5mult+0x2a>
   2cf58:	4605      	mov	r5, r0
   2cf5a:	e7d9      	b.n	2cf10 <__pow5mult+0x20>
   2cf5c:	1e5a      	subs	r2, r3, #1
   2cf5e:	4d0b      	ldr	r5, [pc, #44]	; (2cf8c <__pow5mult+0x9c>)
   2cf60:	2300      	movs	r3, #0
   2cf62:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   2cf66:	f7ff fe97 	bl	2cc98 <__multadd>
   2cf6a:	4605      	mov	r5, r0
   2cf6c:	e7c8      	b.n	2cf00 <__pow5mult+0x10>
   2cf6e:	2101      	movs	r1, #1
   2cf70:	4638      	mov	r0, r7
   2cf72:	f7ff fe61 	bl	2cc38 <_Balloc>
   2cf76:	f240 2171 	movw	r1, #625	; 0x271
   2cf7a:	2201      	movs	r2, #1
   2cf7c:	2300      	movs	r3, #0
   2cf7e:	6141      	str	r1, [r0, #20]
   2cf80:	6102      	str	r2, [r0, #16]
   2cf82:	4606      	mov	r6, r0
   2cf84:	64b8      	str	r0, [r7, #72]	; 0x48
   2cf86:	6003      	str	r3, [r0, #0]
   2cf88:	e7be      	b.n	2cf08 <__pow5mult+0x18>
   2cf8a:	bf00      	nop
   2cf8c:	00031710 	.word	0x00031710

0002cf90 <__lshift>:
   2cf90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2cf94:	4691      	mov	r9, r2
   2cf96:	690a      	ldr	r2, [r1, #16]
   2cf98:	688b      	ldr	r3, [r1, #8]
   2cf9a:	ea4f 1469 	mov.w	r4, r9, asr #5
   2cf9e:	eb04 0802 	add.w	r8, r4, r2
   2cfa2:	f108 0501 	add.w	r5, r8, #1
   2cfa6:	429d      	cmp	r5, r3
   2cfa8:	460e      	mov	r6, r1
   2cfaa:	4607      	mov	r7, r0
   2cfac:	6849      	ldr	r1, [r1, #4]
   2cfae:	dd04      	ble.n	2cfba <__lshift+0x2a>
   2cfb0:	005b      	lsls	r3, r3, #1
   2cfb2:	429d      	cmp	r5, r3
   2cfb4:	f101 0101 	add.w	r1, r1, #1
   2cfb8:	dcfa      	bgt.n	2cfb0 <__lshift+0x20>
   2cfba:	4638      	mov	r0, r7
   2cfbc:	f7ff fe3c 	bl	2cc38 <_Balloc>
   2cfc0:	2c00      	cmp	r4, #0
   2cfc2:	f100 0314 	add.w	r3, r0, #20
   2cfc6:	dd06      	ble.n	2cfd6 <__lshift+0x46>
   2cfc8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   2cfcc:	2100      	movs	r1, #0
   2cfce:	f843 1b04 	str.w	r1, [r3], #4
   2cfd2:	429a      	cmp	r2, r3
   2cfd4:	d1fb      	bne.n	2cfce <__lshift+0x3e>
   2cfd6:	6934      	ldr	r4, [r6, #16]
   2cfd8:	f106 0114 	add.w	r1, r6, #20
   2cfdc:	f019 091f 	ands.w	r9, r9, #31
   2cfe0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   2cfe4:	d01d      	beq.n	2d022 <__lshift+0x92>
   2cfe6:	f1c9 0c20 	rsb	ip, r9, #32
   2cfea:	2200      	movs	r2, #0
   2cfec:	680c      	ldr	r4, [r1, #0]
   2cfee:	fa04 f409 	lsl.w	r4, r4, r9
   2cff2:	4314      	orrs	r4, r2
   2cff4:	f843 4b04 	str.w	r4, [r3], #4
   2cff8:	f851 2b04 	ldr.w	r2, [r1], #4
   2cffc:	458e      	cmp	lr, r1
   2cffe:	fa22 f20c 	lsr.w	r2, r2, ip
   2d002:	d8f3      	bhi.n	2cfec <__lshift+0x5c>
   2d004:	601a      	str	r2, [r3, #0]
   2d006:	b10a      	cbz	r2, 2d00c <__lshift+0x7c>
   2d008:	f108 0502 	add.w	r5, r8, #2
   2d00c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2d00e:	6872      	ldr	r2, [r6, #4]
   2d010:	3d01      	subs	r5, #1
   2d012:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2d016:	6105      	str	r5, [r0, #16]
   2d018:	6031      	str	r1, [r6, #0]
   2d01a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   2d01e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2d022:	3b04      	subs	r3, #4
   2d024:	f851 2b04 	ldr.w	r2, [r1], #4
   2d028:	f843 2f04 	str.w	r2, [r3, #4]!
   2d02c:	458e      	cmp	lr, r1
   2d02e:	d8f9      	bhi.n	2d024 <__lshift+0x94>
   2d030:	e7ec      	b.n	2d00c <__lshift+0x7c>
   2d032:	bf00      	nop

0002d034 <__mcmp>:
   2d034:	b430      	push	{r4, r5}
   2d036:	690b      	ldr	r3, [r1, #16]
   2d038:	4605      	mov	r5, r0
   2d03a:	6900      	ldr	r0, [r0, #16]
   2d03c:	1ac0      	subs	r0, r0, r3
   2d03e:	d10f      	bne.n	2d060 <__mcmp+0x2c>
   2d040:	009b      	lsls	r3, r3, #2
   2d042:	3514      	adds	r5, #20
   2d044:	3114      	adds	r1, #20
   2d046:	4419      	add	r1, r3
   2d048:	442b      	add	r3, r5
   2d04a:	e001      	b.n	2d050 <__mcmp+0x1c>
   2d04c:	429d      	cmp	r5, r3
   2d04e:	d207      	bcs.n	2d060 <__mcmp+0x2c>
   2d050:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   2d054:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2d058:	4294      	cmp	r4, r2
   2d05a:	d0f7      	beq.n	2d04c <__mcmp+0x18>
   2d05c:	d302      	bcc.n	2d064 <__mcmp+0x30>
   2d05e:	2001      	movs	r0, #1
   2d060:	bc30      	pop	{r4, r5}
   2d062:	4770      	bx	lr
   2d064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d068:	e7fa      	b.n	2d060 <__mcmp+0x2c>
   2d06a:	bf00      	nop

0002d06c <__mdiff>:
   2d06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d070:	690f      	ldr	r7, [r1, #16]
   2d072:	460e      	mov	r6, r1
   2d074:	6911      	ldr	r1, [r2, #16]
   2d076:	1a7f      	subs	r7, r7, r1
   2d078:	2f00      	cmp	r7, #0
   2d07a:	4690      	mov	r8, r2
   2d07c:	d117      	bne.n	2d0ae <__mdiff+0x42>
   2d07e:	0089      	lsls	r1, r1, #2
   2d080:	f106 0514 	add.w	r5, r6, #20
   2d084:	f102 0e14 	add.w	lr, r2, #20
   2d088:	186b      	adds	r3, r5, r1
   2d08a:	4471      	add	r1, lr
   2d08c:	e001      	b.n	2d092 <__mdiff+0x26>
   2d08e:	429d      	cmp	r5, r3
   2d090:	d25c      	bcs.n	2d14c <__mdiff+0xe0>
   2d092:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2d096:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   2d09a:	42a2      	cmp	r2, r4
   2d09c:	d0f7      	beq.n	2d08e <__mdiff+0x22>
   2d09e:	d25e      	bcs.n	2d15e <__mdiff+0xf2>
   2d0a0:	4633      	mov	r3, r6
   2d0a2:	462c      	mov	r4, r5
   2d0a4:	4646      	mov	r6, r8
   2d0a6:	4675      	mov	r5, lr
   2d0a8:	4698      	mov	r8, r3
   2d0aa:	2701      	movs	r7, #1
   2d0ac:	e005      	b.n	2d0ba <__mdiff+0x4e>
   2d0ae:	db58      	blt.n	2d162 <__mdiff+0xf6>
   2d0b0:	f106 0514 	add.w	r5, r6, #20
   2d0b4:	f108 0414 	add.w	r4, r8, #20
   2d0b8:	2700      	movs	r7, #0
   2d0ba:	6871      	ldr	r1, [r6, #4]
   2d0bc:	f7ff fdbc 	bl	2cc38 <_Balloc>
   2d0c0:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2d0c4:	6936      	ldr	r6, [r6, #16]
   2d0c6:	60c7      	str	r7, [r0, #12]
   2d0c8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   2d0cc:	46a6      	mov	lr, r4
   2d0ce:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   2d0d2:	f100 0414 	add.w	r4, r0, #20
   2d0d6:	2300      	movs	r3, #0
   2d0d8:	f85e 1b04 	ldr.w	r1, [lr], #4
   2d0dc:	f855 8b04 	ldr.w	r8, [r5], #4
   2d0e0:	b28a      	uxth	r2, r1
   2d0e2:	fa13 f388 	uxtah	r3, r3, r8
   2d0e6:	0c09      	lsrs	r1, r1, #16
   2d0e8:	1a9a      	subs	r2, r3, r2
   2d0ea:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   2d0ee:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2d0f2:	b292      	uxth	r2, r2
   2d0f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2d0f8:	45f4      	cmp	ip, lr
   2d0fa:	f844 2b04 	str.w	r2, [r4], #4
   2d0fe:	ea4f 4323 	mov.w	r3, r3, asr #16
   2d102:	d8e9      	bhi.n	2d0d8 <__mdiff+0x6c>
   2d104:	42af      	cmp	r7, r5
   2d106:	d917      	bls.n	2d138 <__mdiff+0xcc>
   2d108:	46a4      	mov	ip, r4
   2d10a:	46ae      	mov	lr, r5
   2d10c:	f85e 2b04 	ldr.w	r2, [lr], #4
   2d110:	fa13 f382 	uxtah	r3, r3, r2
   2d114:	1419      	asrs	r1, r3, #16
   2d116:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   2d11a:	b29b      	uxth	r3, r3
   2d11c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   2d120:	4577      	cmp	r7, lr
   2d122:	f84c 2b04 	str.w	r2, [ip], #4
   2d126:	ea4f 4321 	mov.w	r3, r1, asr #16
   2d12a:	d8ef      	bhi.n	2d10c <__mdiff+0xa0>
   2d12c:	43ed      	mvns	r5, r5
   2d12e:	442f      	add	r7, r5
   2d130:	f027 0703 	bic.w	r7, r7, #3
   2d134:	3704      	adds	r7, #4
   2d136:	443c      	add	r4, r7
   2d138:	3c04      	subs	r4, #4
   2d13a:	b922      	cbnz	r2, 2d146 <__mdiff+0xda>
   2d13c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   2d140:	3e01      	subs	r6, #1
   2d142:	2b00      	cmp	r3, #0
   2d144:	d0fa      	beq.n	2d13c <__mdiff+0xd0>
   2d146:	6106      	str	r6, [r0, #16]
   2d148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d14c:	2100      	movs	r1, #0
   2d14e:	f7ff fd73 	bl	2cc38 <_Balloc>
   2d152:	2201      	movs	r2, #1
   2d154:	2300      	movs	r3, #0
   2d156:	6102      	str	r2, [r0, #16]
   2d158:	6143      	str	r3, [r0, #20]
   2d15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d15e:	4674      	mov	r4, lr
   2d160:	e7ab      	b.n	2d0ba <__mdiff+0x4e>
   2d162:	4633      	mov	r3, r6
   2d164:	f106 0414 	add.w	r4, r6, #20
   2d168:	f102 0514 	add.w	r5, r2, #20
   2d16c:	4616      	mov	r6, r2
   2d16e:	2701      	movs	r7, #1
   2d170:	4698      	mov	r8, r3
   2d172:	e7a2      	b.n	2d0ba <__mdiff+0x4e>

0002d174 <__d2b>:
   2d174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d178:	b082      	sub	sp, #8
   2d17a:	2101      	movs	r1, #1
   2d17c:	461c      	mov	r4, r3
   2d17e:	f3c3 570a 	ubfx	r7, r3, #20, #11
   2d182:	4615      	mov	r5, r2
   2d184:	9e08      	ldr	r6, [sp, #32]
   2d186:	f7ff fd57 	bl	2cc38 <_Balloc>
   2d18a:	f3c4 0413 	ubfx	r4, r4, #0, #20
   2d18e:	4680      	mov	r8, r0
   2d190:	b10f      	cbz	r7, 2d196 <__d2b+0x22>
   2d192:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   2d196:	9401      	str	r4, [sp, #4]
   2d198:	b31d      	cbz	r5, 2d1e2 <__d2b+0x6e>
   2d19a:	a802      	add	r0, sp, #8
   2d19c:	f840 5d08 	str.w	r5, [r0, #-8]!
   2d1a0:	f7ff fdda 	bl	2cd58 <__lo0bits>
   2d1a4:	2800      	cmp	r0, #0
   2d1a6:	d134      	bne.n	2d212 <__d2b+0x9e>
   2d1a8:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2d1ac:	f8c8 2014 	str.w	r2, [r8, #20]
   2d1b0:	2b00      	cmp	r3, #0
   2d1b2:	bf0c      	ite	eq
   2d1b4:	2101      	moveq	r1, #1
   2d1b6:	2102      	movne	r1, #2
   2d1b8:	f8c8 3018 	str.w	r3, [r8, #24]
   2d1bc:	f8c8 1010 	str.w	r1, [r8, #16]
   2d1c0:	b9df      	cbnz	r7, 2d1fa <__d2b+0x86>
   2d1c2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
   2d1c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2d1ca:	6030      	str	r0, [r6, #0]
   2d1cc:	6918      	ldr	r0, [r3, #16]
   2d1ce:	f7ff fda3 	bl	2cd18 <__hi0bits>
   2d1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d1d4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   2d1d8:	6018      	str	r0, [r3, #0]
   2d1da:	4640      	mov	r0, r8
   2d1dc:	b002      	add	sp, #8
   2d1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d1e2:	a801      	add	r0, sp, #4
   2d1e4:	f7ff fdb8 	bl	2cd58 <__lo0bits>
   2d1e8:	9b01      	ldr	r3, [sp, #4]
   2d1ea:	f8c8 3014 	str.w	r3, [r8, #20]
   2d1ee:	2101      	movs	r1, #1
   2d1f0:	3020      	adds	r0, #32
   2d1f2:	f8c8 1010 	str.w	r1, [r8, #16]
   2d1f6:	2f00      	cmp	r7, #0
   2d1f8:	d0e3      	beq.n	2d1c2 <__d2b+0x4e>
   2d1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d1fc:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   2d200:	4407      	add	r7, r0
   2d202:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2d206:	6037      	str	r7, [r6, #0]
   2d208:	6018      	str	r0, [r3, #0]
   2d20a:	4640      	mov	r0, r8
   2d20c:	b002      	add	sp, #8
   2d20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d212:	e89d 000a 	ldmia.w	sp, {r1, r3}
   2d216:	f1c0 0220 	rsb	r2, r0, #32
   2d21a:	fa03 f202 	lsl.w	r2, r3, r2
   2d21e:	430a      	orrs	r2, r1
   2d220:	40c3      	lsrs	r3, r0
   2d222:	9301      	str	r3, [sp, #4]
   2d224:	f8c8 2014 	str.w	r2, [r8, #20]
   2d228:	e7c2      	b.n	2d1b0 <__d2b+0x3c>
   2d22a:	bf00      	nop

0002d22c <_sbrk_r>:
   2d22c:	b538      	push	{r3, r4, r5, lr}
   2d22e:	4c07      	ldr	r4, [pc, #28]	; (2d24c <_sbrk_r+0x20>)
   2d230:	2300      	movs	r3, #0
   2d232:	4605      	mov	r5, r0
   2d234:	4608      	mov	r0, r1
   2d236:	6023      	str	r3, [r4, #0]
   2d238:	f7d4 fb92 	bl	1960 <_sbrk>
   2d23c:	1c43      	adds	r3, r0, #1
   2d23e:	d000      	beq.n	2d242 <_sbrk_r+0x16>
   2d240:	bd38      	pop	{r3, r4, r5, pc}
   2d242:	6823      	ldr	r3, [r4, #0]
   2d244:	2b00      	cmp	r3, #0
   2d246:	d0fb      	beq.n	2d240 <_sbrk_r+0x14>
   2d248:	602b      	str	r3, [r5, #0]
   2d24a:	bd38      	pop	{r3, r4, r5, pc}
   2d24c:	20002b0c 	.word	0x20002b0c

0002d250 <__ssprint_r>:
   2d250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d254:	6893      	ldr	r3, [r2, #8]
   2d256:	b083      	sub	sp, #12
   2d258:	4690      	mov	r8, r2
   2d25a:	2b00      	cmp	r3, #0
   2d25c:	d070      	beq.n	2d340 <__ssprint_r+0xf0>
   2d25e:	4682      	mov	sl, r0
   2d260:	460c      	mov	r4, r1
   2d262:	6817      	ldr	r7, [r2, #0]
   2d264:	688d      	ldr	r5, [r1, #8]
   2d266:	6808      	ldr	r0, [r1, #0]
   2d268:	e042      	b.n	2d2f0 <__ssprint_r+0xa0>
   2d26a:	89a3      	ldrh	r3, [r4, #12]
   2d26c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   2d270:	d02e      	beq.n	2d2d0 <__ssprint_r+0x80>
   2d272:	6965      	ldr	r5, [r4, #20]
   2d274:	6921      	ldr	r1, [r4, #16]
   2d276:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2d27a:	eba0 0b01 	sub.w	fp, r0, r1
   2d27e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2d282:	f10b 0001 	add.w	r0, fp, #1
   2d286:	106d      	asrs	r5, r5, #1
   2d288:	4430      	add	r0, r6
   2d28a:	42a8      	cmp	r0, r5
   2d28c:	462a      	mov	r2, r5
   2d28e:	bf84      	itt	hi
   2d290:	4605      	movhi	r5, r0
   2d292:	462a      	movhi	r2, r5
   2d294:	055b      	lsls	r3, r3, #21
   2d296:	d538      	bpl.n	2d30a <__ssprint_r+0xba>
   2d298:	4611      	mov	r1, r2
   2d29a:	4650      	mov	r0, sl
   2d29c:	f7ff fa10 	bl	2c6c0 <_malloc_r>
   2d2a0:	2800      	cmp	r0, #0
   2d2a2:	d03c      	beq.n	2d31e <__ssprint_r+0xce>
   2d2a4:	465a      	mov	r2, fp
   2d2a6:	6921      	ldr	r1, [r4, #16]
   2d2a8:	9001      	str	r0, [sp, #4]
   2d2aa:	f7d3 f809 	bl	2c0 <memcpy>
   2d2ae:	89a2      	ldrh	r2, [r4, #12]
   2d2b0:	9b01      	ldr	r3, [sp, #4]
   2d2b2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2d2b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2d2ba:	81a2      	strh	r2, [r4, #12]
   2d2bc:	eba5 020b 	sub.w	r2, r5, fp
   2d2c0:	eb03 000b 	add.w	r0, r3, fp
   2d2c4:	6165      	str	r5, [r4, #20]
   2d2c6:	6123      	str	r3, [r4, #16]
   2d2c8:	6020      	str	r0, [r4, #0]
   2d2ca:	60a2      	str	r2, [r4, #8]
   2d2cc:	4635      	mov	r5, r6
   2d2ce:	46b3      	mov	fp, r6
   2d2d0:	465a      	mov	r2, fp
   2d2d2:	4649      	mov	r1, r9
   2d2d4:	f7fc f99c 	bl	29610 <memmove>
   2d2d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2d2dc:	68a2      	ldr	r2, [r4, #8]
   2d2de:	6820      	ldr	r0, [r4, #0]
   2d2e0:	1b55      	subs	r5, r2, r5
   2d2e2:	4458      	add	r0, fp
   2d2e4:	1b9e      	subs	r6, r3, r6
   2d2e6:	60a5      	str	r5, [r4, #8]
   2d2e8:	6020      	str	r0, [r4, #0]
   2d2ea:	f8c8 6008 	str.w	r6, [r8, #8]
   2d2ee:	b33e      	cbz	r6, 2d340 <__ssprint_r+0xf0>
   2d2f0:	687e      	ldr	r6, [r7, #4]
   2d2f2:	463b      	mov	r3, r7
   2d2f4:	3708      	adds	r7, #8
   2d2f6:	2e00      	cmp	r6, #0
   2d2f8:	d0fa      	beq.n	2d2f0 <__ssprint_r+0xa0>
   2d2fa:	42ae      	cmp	r6, r5
   2d2fc:	f8d3 9000 	ldr.w	r9, [r3]
   2d300:	46ab      	mov	fp, r5
   2d302:	d2b2      	bcs.n	2d26a <__ssprint_r+0x1a>
   2d304:	4635      	mov	r5, r6
   2d306:	46b3      	mov	fp, r6
   2d308:	e7e2      	b.n	2d2d0 <__ssprint_r+0x80>
   2d30a:	4650      	mov	r0, sl
   2d30c:	f000 f988 	bl	2d620 <_realloc_r>
   2d310:	4603      	mov	r3, r0
   2d312:	2800      	cmp	r0, #0
   2d314:	d1d2      	bne.n	2d2bc <__ssprint_r+0x6c>
   2d316:	6921      	ldr	r1, [r4, #16]
   2d318:	4650      	mov	r0, sl
   2d31a:	f000 f897 	bl	2d44c <_free_r>
   2d31e:	230c      	movs	r3, #12
   2d320:	f8ca 3000 	str.w	r3, [sl]
   2d324:	89a3      	ldrh	r3, [r4, #12]
   2d326:	2200      	movs	r2, #0
   2d328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2d32c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d330:	81a3      	strh	r3, [r4, #12]
   2d332:	f8c8 2008 	str.w	r2, [r8, #8]
   2d336:	f8c8 2004 	str.w	r2, [r8, #4]
   2d33a:	b003      	add	sp, #12
   2d33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d340:	2000      	movs	r0, #0
   2d342:	f8c8 0004 	str.w	r0, [r8, #4]
   2d346:	b003      	add	sp, #12
   2d348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d34c <_calloc_r>:
   2d34c:	b510      	push	{r4, lr}
   2d34e:	fb02 f101 	mul.w	r1, r2, r1
   2d352:	f7ff f9b5 	bl	2c6c0 <_malloc_r>
   2d356:	4604      	mov	r4, r0
   2d358:	b1d8      	cbz	r0, 2d392 <_calloc_r+0x46>
   2d35a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   2d35e:	f022 0203 	bic.w	r2, r2, #3
   2d362:	3a04      	subs	r2, #4
   2d364:	2a24      	cmp	r2, #36	; 0x24
   2d366:	d818      	bhi.n	2d39a <_calloc_r+0x4e>
   2d368:	2a13      	cmp	r2, #19
   2d36a:	d914      	bls.n	2d396 <_calloc_r+0x4a>
   2d36c:	2300      	movs	r3, #0
   2d36e:	2a1b      	cmp	r2, #27
   2d370:	6003      	str	r3, [r0, #0]
   2d372:	6043      	str	r3, [r0, #4]
   2d374:	d916      	bls.n	2d3a4 <_calloc_r+0x58>
   2d376:	2a24      	cmp	r2, #36	; 0x24
   2d378:	6083      	str	r3, [r0, #8]
   2d37a:	60c3      	str	r3, [r0, #12]
   2d37c:	bf11      	iteee	ne
   2d37e:	f100 0210 	addne.w	r2, r0, #16
   2d382:	6103      	streq	r3, [r0, #16]
   2d384:	6143      	streq	r3, [r0, #20]
   2d386:	f100 0218 	addeq.w	r2, r0, #24
   2d38a:	2300      	movs	r3, #0
   2d38c:	6013      	str	r3, [r2, #0]
   2d38e:	6053      	str	r3, [r2, #4]
   2d390:	6093      	str	r3, [r2, #8]
   2d392:	4620      	mov	r0, r4
   2d394:	bd10      	pop	{r4, pc}
   2d396:	4602      	mov	r2, r0
   2d398:	e7f7      	b.n	2d38a <_calloc_r+0x3e>
   2d39a:	2100      	movs	r1, #0
   2d39c:	f7fc f99c 	bl	296d8 <memset>
   2d3a0:	4620      	mov	r0, r4
   2d3a2:	bd10      	pop	{r4, pc}
   2d3a4:	f100 0208 	add.w	r2, r0, #8
   2d3a8:	e7ef      	b.n	2d38a <_calloc_r+0x3e>
   2d3aa:	bf00      	nop

0002d3ac <_malloc_trim_r>:
   2d3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d3ae:	4f24      	ldr	r7, [pc, #144]	; (2d440 <_malloc_trim_r+0x94>)
   2d3b0:	460c      	mov	r4, r1
   2d3b2:	4606      	mov	r6, r0
   2d3b4:	f7ff fc34 	bl	2cc20 <__malloc_lock>
   2d3b8:	68bb      	ldr	r3, [r7, #8]
   2d3ba:	685d      	ldr	r5, [r3, #4]
   2d3bc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   2d3c0:	310f      	adds	r1, #15
   2d3c2:	f025 0503 	bic.w	r5, r5, #3
   2d3c6:	4429      	add	r1, r5
   2d3c8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   2d3cc:	f021 010f 	bic.w	r1, r1, #15
   2d3d0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   2d3d4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   2d3d8:	db07      	blt.n	2d3ea <_malloc_trim_r+0x3e>
   2d3da:	2100      	movs	r1, #0
   2d3dc:	4630      	mov	r0, r6
   2d3de:	f7ff ff25 	bl	2d22c <_sbrk_r>
   2d3e2:	68bb      	ldr	r3, [r7, #8]
   2d3e4:	442b      	add	r3, r5
   2d3e6:	4298      	cmp	r0, r3
   2d3e8:	d004      	beq.n	2d3f4 <_malloc_trim_r+0x48>
   2d3ea:	4630      	mov	r0, r6
   2d3ec:	f7ff fc1e 	bl	2cc2c <__malloc_unlock>
   2d3f0:	2000      	movs	r0, #0
   2d3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d3f4:	4261      	negs	r1, r4
   2d3f6:	4630      	mov	r0, r6
   2d3f8:	f7ff ff18 	bl	2d22c <_sbrk_r>
   2d3fc:	3001      	adds	r0, #1
   2d3fe:	d00d      	beq.n	2d41c <_malloc_trim_r+0x70>
   2d400:	4b10      	ldr	r3, [pc, #64]	; (2d444 <_malloc_trim_r+0x98>)
   2d402:	68ba      	ldr	r2, [r7, #8]
   2d404:	6819      	ldr	r1, [r3, #0]
   2d406:	1b2d      	subs	r5, r5, r4
   2d408:	f045 0501 	orr.w	r5, r5, #1
   2d40c:	4630      	mov	r0, r6
   2d40e:	1b09      	subs	r1, r1, r4
   2d410:	6055      	str	r5, [r2, #4]
   2d412:	6019      	str	r1, [r3, #0]
   2d414:	f7ff fc0a 	bl	2cc2c <__malloc_unlock>
   2d418:	2001      	movs	r0, #1
   2d41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d41c:	2100      	movs	r1, #0
   2d41e:	4630      	mov	r0, r6
   2d420:	f7ff ff04 	bl	2d22c <_sbrk_r>
   2d424:	68ba      	ldr	r2, [r7, #8]
   2d426:	1a83      	subs	r3, r0, r2
   2d428:	2b0f      	cmp	r3, #15
   2d42a:	ddde      	ble.n	2d3ea <_malloc_trim_r+0x3e>
   2d42c:	4c06      	ldr	r4, [pc, #24]	; (2d448 <_malloc_trim_r+0x9c>)
   2d42e:	4905      	ldr	r1, [pc, #20]	; (2d444 <_malloc_trim_r+0x98>)
   2d430:	6824      	ldr	r4, [r4, #0]
   2d432:	f043 0301 	orr.w	r3, r3, #1
   2d436:	1b00      	subs	r0, r0, r4
   2d438:	6053      	str	r3, [r2, #4]
   2d43a:	6008      	str	r0, [r1, #0]
   2d43c:	e7d5      	b.n	2d3ea <_malloc_trim_r+0x3e>
   2d43e:	bf00      	nop
   2d440:	2000ca18 	.word	0x2000ca18
   2d444:	200027a0 	.word	0x200027a0
   2d448:	2000ce20 	.word	0x2000ce20

0002d44c <_free_r>:
   2d44c:	2900      	cmp	r1, #0
   2d44e:	d044      	beq.n	2d4da <_free_r+0x8e>
   2d450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d454:	460d      	mov	r5, r1
   2d456:	4680      	mov	r8, r0
   2d458:	f7ff fbe2 	bl	2cc20 <__malloc_lock>
   2d45c:	f855 7c04 	ldr.w	r7, [r5, #-4]
   2d460:	4969      	ldr	r1, [pc, #420]	; (2d608 <_free_r+0x1bc>)
   2d462:	f027 0301 	bic.w	r3, r7, #1
   2d466:	f1a5 0408 	sub.w	r4, r5, #8
   2d46a:	18e2      	adds	r2, r4, r3
   2d46c:	688e      	ldr	r6, [r1, #8]
   2d46e:	6850      	ldr	r0, [r2, #4]
   2d470:	42b2      	cmp	r2, r6
   2d472:	f020 0003 	bic.w	r0, r0, #3
   2d476:	d05e      	beq.n	2d536 <_free_r+0xea>
   2d478:	07fe      	lsls	r6, r7, #31
   2d47a:	6050      	str	r0, [r2, #4]
   2d47c:	d40b      	bmi.n	2d496 <_free_r+0x4a>
   2d47e:	f855 7c08 	ldr.w	r7, [r5, #-8]
   2d482:	1be4      	subs	r4, r4, r7
   2d484:	f101 0e08 	add.w	lr, r1, #8
   2d488:	68a5      	ldr	r5, [r4, #8]
   2d48a:	4575      	cmp	r5, lr
   2d48c:	443b      	add	r3, r7
   2d48e:	d06d      	beq.n	2d56c <_free_r+0x120>
   2d490:	68e7      	ldr	r7, [r4, #12]
   2d492:	60ef      	str	r7, [r5, #12]
   2d494:	60bd      	str	r5, [r7, #8]
   2d496:	1815      	adds	r5, r2, r0
   2d498:	686d      	ldr	r5, [r5, #4]
   2d49a:	07ed      	lsls	r5, r5, #31
   2d49c:	d53e      	bpl.n	2d51c <_free_r+0xd0>
   2d49e:	f043 0201 	orr.w	r2, r3, #1
   2d4a2:	6062      	str	r2, [r4, #4]
   2d4a4:	50e3      	str	r3, [r4, r3]
   2d4a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2d4aa:	d217      	bcs.n	2d4dc <_free_r+0x90>
   2d4ac:	08db      	lsrs	r3, r3, #3
   2d4ae:	1c58      	adds	r0, r3, #1
   2d4b0:	109a      	asrs	r2, r3, #2
   2d4b2:	684d      	ldr	r5, [r1, #4]
   2d4b4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   2d4b8:	60a7      	str	r7, [r4, #8]
   2d4ba:	2301      	movs	r3, #1
   2d4bc:	4093      	lsls	r3, r2
   2d4be:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   2d4c2:	432b      	orrs	r3, r5
   2d4c4:	3a08      	subs	r2, #8
   2d4c6:	60e2      	str	r2, [r4, #12]
   2d4c8:	604b      	str	r3, [r1, #4]
   2d4ca:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   2d4ce:	60fc      	str	r4, [r7, #12]
   2d4d0:	4640      	mov	r0, r8
   2d4d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2d4d6:	f7ff bba9 	b.w	2cc2c <__malloc_unlock>
   2d4da:	4770      	bx	lr
   2d4dc:	0a5a      	lsrs	r2, r3, #9
   2d4de:	2a04      	cmp	r2, #4
   2d4e0:	d852      	bhi.n	2d588 <_free_r+0x13c>
   2d4e2:	099a      	lsrs	r2, r3, #6
   2d4e4:	f102 0739 	add.w	r7, r2, #57	; 0x39
   2d4e8:	00ff      	lsls	r7, r7, #3
   2d4ea:	f102 0538 	add.w	r5, r2, #56	; 0x38
   2d4ee:	19c8      	adds	r0, r1, r7
   2d4f0:	59ca      	ldr	r2, [r1, r7]
   2d4f2:	3808      	subs	r0, #8
   2d4f4:	4290      	cmp	r0, r2
   2d4f6:	d04f      	beq.n	2d598 <_free_r+0x14c>
   2d4f8:	6851      	ldr	r1, [r2, #4]
   2d4fa:	f021 0103 	bic.w	r1, r1, #3
   2d4fe:	428b      	cmp	r3, r1
   2d500:	d232      	bcs.n	2d568 <_free_r+0x11c>
   2d502:	6892      	ldr	r2, [r2, #8]
   2d504:	4290      	cmp	r0, r2
   2d506:	d1f7      	bne.n	2d4f8 <_free_r+0xac>
   2d508:	68c3      	ldr	r3, [r0, #12]
   2d50a:	60a0      	str	r0, [r4, #8]
   2d50c:	60e3      	str	r3, [r4, #12]
   2d50e:	609c      	str	r4, [r3, #8]
   2d510:	60c4      	str	r4, [r0, #12]
   2d512:	4640      	mov	r0, r8
   2d514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2d518:	f7ff bb88 	b.w	2cc2c <__malloc_unlock>
   2d51c:	6895      	ldr	r5, [r2, #8]
   2d51e:	4f3b      	ldr	r7, [pc, #236]	; (2d60c <_free_r+0x1c0>)
   2d520:	42bd      	cmp	r5, r7
   2d522:	4403      	add	r3, r0
   2d524:	d040      	beq.n	2d5a8 <_free_r+0x15c>
   2d526:	68d0      	ldr	r0, [r2, #12]
   2d528:	60e8      	str	r0, [r5, #12]
   2d52a:	f043 0201 	orr.w	r2, r3, #1
   2d52e:	6085      	str	r5, [r0, #8]
   2d530:	6062      	str	r2, [r4, #4]
   2d532:	50e3      	str	r3, [r4, r3]
   2d534:	e7b7      	b.n	2d4a6 <_free_r+0x5a>
   2d536:	07ff      	lsls	r7, r7, #31
   2d538:	4403      	add	r3, r0
   2d53a:	d407      	bmi.n	2d54c <_free_r+0x100>
   2d53c:	f855 2c08 	ldr.w	r2, [r5, #-8]
   2d540:	1aa4      	subs	r4, r4, r2
   2d542:	4413      	add	r3, r2
   2d544:	68a0      	ldr	r0, [r4, #8]
   2d546:	68e2      	ldr	r2, [r4, #12]
   2d548:	60c2      	str	r2, [r0, #12]
   2d54a:	6090      	str	r0, [r2, #8]
   2d54c:	4a30      	ldr	r2, [pc, #192]	; (2d610 <_free_r+0x1c4>)
   2d54e:	6812      	ldr	r2, [r2, #0]
   2d550:	f043 0001 	orr.w	r0, r3, #1
   2d554:	4293      	cmp	r3, r2
   2d556:	6060      	str	r0, [r4, #4]
   2d558:	608c      	str	r4, [r1, #8]
   2d55a:	d3b9      	bcc.n	2d4d0 <_free_r+0x84>
   2d55c:	4b2d      	ldr	r3, [pc, #180]	; (2d614 <_free_r+0x1c8>)
   2d55e:	4640      	mov	r0, r8
   2d560:	6819      	ldr	r1, [r3, #0]
   2d562:	f7ff ff23 	bl	2d3ac <_malloc_trim_r>
   2d566:	e7b3      	b.n	2d4d0 <_free_r+0x84>
   2d568:	4610      	mov	r0, r2
   2d56a:	e7cd      	b.n	2d508 <_free_r+0xbc>
   2d56c:	1811      	adds	r1, r2, r0
   2d56e:	6849      	ldr	r1, [r1, #4]
   2d570:	07c9      	lsls	r1, r1, #31
   2d572:	d444      	bmi.n	2d5fe <_free_r+0x1b2>
   2d574:	6891      	ldr	r1, [r2, #8]
   2d576:	68d2      	ldr	r2, [r2, #12]
   2d578:	60ca      	str	r2, [r1, #12]
   2d57a:	4403      	add	r3, r0
   2d57c:	f043 0001 	orr.w	r0, r3, #1
   2d580:	6091      	str	r1, [r2, #8]
   2d582:	6060      	str	r0, [r4, #4]
   2d584:	50e3      	str	r3, [r4, r3]
   2d586:	e7a3      	b.n	2d4d0 <_free_r+0x84>
   2d588:	2a14      	cmp	r2, #20
   2d58a:	d816      	bhi.n	2d5ba <_free_r+0x16e>
   2d58c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   2d590:	00ff      	lsls	r7, r7, #3
   2d592:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   2d596:	e7aa      	b.n	2d4ee <_free_r+0xa2>
   2d598:	10aa      	asrs	r2, r5, #2
   2d59a:	2301      	movs	r3, #1
   2d59c:	684d      	ldr	r5, [r1, #4]
   2d59e:	4093      	lsls	r3, r2
   2d5a0:	432b      	orrs	r3, r5
   2d5a2:	604b      	str	r3, [r1, #4]
   2d5a4:	4603      	mov	r3, r0
   2d5a6:	e7b0      	b.n	2d50a <_free_r+0xbe>
   2d5a8:	f043 0201 	orr.w	r2, r3, #1
   2d5ac:	614c      	str	r4, [r1, #20]
   2d5ae:	610c      	str	r4, [r1, #16]
   2d5b0:	60e5      	str	r5, [r4, #12]
   2d5b2:	60a5      	str	r5, [r4, #8]
   2d5b4:	6062      	str	r2, [r4, #4]
   2d5b6:	50e3      	str	r3, [r4, r3]
   2d5b8:	e78a      	b.n	2d4d0 <_free_r+0x84>
   2d5ba:	2a54      	cmp	r2, #84	; 0x54
   2d5bc:	d806      	bhi.n	2d5cc <_free_r+0x180>
   2d5be:	0b1a      	lsrs	r2, r3, #12
   2d5c0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   2d5c4:	00ff      	lsls	r7, r7, #3
   2d5c6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   2d5ca:	e790      	b.n	2d4ee <_free_r+0xa2>
   2d5cc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2d5d0:	d806      	bhi.n	2d5e0 <_free_r+0x194>
   2d5d2:	0bda      	lsrs	r2, r3, #15
   2d5d4:	f102 0778 	add.w	r7, r2, #120	; 0x78
   2d5d8:	00ff      	lsls	r7, r7, #3
   2d5da:	f102 0577 	add.w	r5, r2, #119	; 0x77
   2d5de:	e786      	b.n	2d4ee <_free_r+0xa2>
   2d5e0:	f240 5054 	movw	r0, #1364	; 0x554
   2d5e4:	4282      	cmp	r2, r0
   2d5e6:	d806      	bhi.n	2d5f6 <_free_r+0x1aa>
   2d5e8:	0c9a      	lsrs	r2, r3, #18
   2d5ea:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   2d5ee:	00ff      	lsls	r7, r7, #3
   2d5f0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   2d5f4:	e77b      	b.n	2d4ee <_free_r+0xa2>
   2d5f6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   2d5fa:	257e      	movs	r5, #126	; 0x7e
   2d5fc:	e777      	b.n	2d4ee <_free_r+0xa2>
   2d5fe:	f043 0101 	orr.w	r1, r3, #1
   2d602:	6061      	str	r1, [r4, #4]
   2d604:	6013      	str	r3, [r2, #0]
   2d606:	e763      	b.n	2d4d0 <_free_r+0x84>
   2d608:	2000ca18 	.word	0x2000ca18
   2d60c:	2000ca20 	.word	0x2000ca20
   2d610:	2000ce24 	.word	0x2000ce24
   2d614:	200027d0 	.word	0x200027d0

0002d618 <__retarget_lock_acquire_recursive>:
   2d618:	4770      	bx	lr
   2d61a:	bf00      	nop

0002d61c <__retarget_lock_release_recursive>:
   2d61c:	4770      	bx	lr
   2d61e:	bf00      	nop

0002d620 <_realloc_r>:
   2d620:	2900      	cmp	r1, #0
   2d622:	f000 8095 	beq.w	2d750 <_realloc_r+0x130>
   2d626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d62a:	460d      	mov	r5, r1
   2d62c:	4616      	mov	r6, r2
   2d62e:	b083      	sub	sp, #12
   2d630:	4680      	mov	r8, r0
   2d632:	f106 070b 	add.w	r7, r6, #11
   2d636:	f7ff faf3 	bl	2cc20 <__malloc_lock>
   2d63a:	f855 ec04 	ldr.w	lr, [r5, #-4]
   2d63e:	2f16      	cmp	r7, #22
   2d640:	f02e 0403 	bic.w	r4, lr, #3
   2d644:	f1a5 0908 	sub.w	r9, r5, #8
   2d648:	d83c      	bhi.n	2d6c4 <_realloc_r+0xa4>
   2d64a:	2210      	movs	r2, #16
   2d64c:	4617      	mov	r7, r2
   2d64e:	42be      	cmp	r6, r7
   2d650:	d83d      	bhi.n	2d6ce <_realloc_r+0xae>
   2d652:	4294      	cmp	r4, r2
   2d654:	da43      	bge.n	2d6de <_realloc_r+0xbe>
   2d656:	4bc4      	ldr	r3, [pc, #784]	; (2d968 <_realloc_r+0x348>)
   2d658:	6899      	ldr	r1, [r3, #8]
   2d65a:	eb09 0004 	add.w	r0, r9, r4
   2d65e:	4288      	cmp	r0, r1
   2d660:	f000 80b4 	beq.w	2d7cc <_realloc_r+0x1ac>
   2d664:	6843      	ldr	r3, [r0, #4]
   2d666:	f023 0101 	bic.w	r1, r3, #1
   2d66a:	4401      	add	r1, r0
   2d66c:	6849      	ldr	r1, [r1, #4]
   2d66e:	07c9      	lsls	r1, r1, #31
   2d670:	d54c      	bpl.n	2d70c <_realloc_r+0xec>
   2d672:	f01e 0f01 	tst.w	lr, #1
   2d676:	f000 809b 	beq.w	2d7b0 <_realloc_r+0x190>
   2d67a:	4631      	mov	r1, r6
   2d67c:	4640      	mov	r0, r8
   2d67e:	f7ff f81f 	bl	2c6c0 <_malloc_r>
   2d682:	4606      	mov	r6, r0
   2d684:	2800      	cmp	r0, #0
   2d686:	d03a      	beq.n	2d6fe <_realloc_r+0xde>
   2d688:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2d68c:	f023 0301 	bic.w	r3, r3, #1
   2d690:	444b      	add	r3, r9
   2d692:	f1a0 0208 	sub.w	r2, r0, #8
   2d696:	429a      	cmp	r2, r3
   2d698:	f000 8121 	beq.w	2d8de <_realloc_r+0x2be>
   2d69c:	1f22      	subs	r2, r4, #4
   2d69e:	2a24      	cmp	r2, #36	; 0x24
   2d6a0:	f200 8107 	bhi.w	2d8b2 <_realloc_r+0x292>
   2d6a4:	2a13      	cmp	r2, #19
   2d6a6:	f200 80db 	bhi.w	2d860 <_realloc_r+0x240>
   2d6aa:	4603      	mov	r3, r0
   2d6ac:	462a      	mov	r2, r5
   2d6ae:	6811      	ldr	r1, [r2, #0]
   2d6b0:	6019      	str	r1, [r3, #0]
   2d6b2:	6851      	ldr	r1, [r2, #4]
   2d6b4:	6059      	str	r1, [r3, #4]
   2d6b6:	6892      	ldr	r2, [r2, #8]
   2d6b8:	609a      	str	r2, [r3, #8]
   2d6ba:	4629      	mov	r1, r5
   2d6bc:	4640      	mov	r0, r8
   2d6be:	f7ff fec5 	bl	2d44c <_free_r>
   2d6c2:	e01c      	b.n	2d6fe <_realloc_r+0xde>
   2d6c4:	f027 0707 	bic.w	r7, r7, #7
   2d6c8:	2f00      	cmp	r7, #0
   2d6ca:	463a      	mov	r2, r7
   2d6cc:	dabf      	bge.n	2d64e <_realloc_r+0x2e>
   2d6ce:	2600      	movs	r6, #0
   2d6d0:	230c      	movs	r3, #12
   2d6d2:	4630      	mov	r0, r6
   2d6d4:	f8c8 3000 	str.w	r3, [r8]
   2d6d8:	b003      	add	sp, #12
   2d6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d6de:	462e      	mov	r6, r5
   2d6e0:	1be3      	subs	r3, r4, r7
   2d6e2:	2b0f      	cmp	r3, #15
   2d6e4:	d81e      	bhi.n	2d724 <_realloc_r+0x104>
   2d6e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2d6ea:	f003 0301 	and.w	r3, r3, #1
   2d6ee:	4323      	orrs	r3, r4
   2d6f0:	444c      	add	r4, r9
   2d6f2:	f8c9 3004 	str.w	r3, [r9, #4]
   2d6f6:	6863      	ldr	r3, [r4, #4]
   2d6f8:	f043 0301 	orr.w	r3, r3, #1
   2d6fc:	6063      	str	r3, [r4, #4]
   2d6fe:	4640      	mov	r0, r8
   2d700:	f7ff fa94 	bl	2cc2c <__malloc_unlock>
   2d704:	4630      	mov	r0, r6
   2d706:	b003      	add	sp, #12
   2d708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d70c:	f023 0303 	bic.w	r3, r3, #3
   2d710:	18e1      	adds	r1, r4, r3
   2d712:	4291      	cmp	r1, r2
   2d714:	db1f      	blt.n	2d756 <_realloc_r+0x136>
   2d716:	68c3      	ldr	r3, [r0, #12]
   2d718:	6882      	ldr	r2, [r0, #8]
   2d71a:	462e      	mov	r6, r5
   2d71c:	60d3      	str	r3, [r2, #12]
   2d71e:	460c      	mov	r4, r1
   2d720:	609a      	str	r2, [r3, #8]
   2d722:	e7dd      	b.n	2d6e0 <_realloc_r+0xc0>
   2d724:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2d728:	eb09 0107 	add.w	r1, r9, r7
   2d72c:	f002 0201 	and.w	r2, r2, #1
   2d730:	444c      	add	r4, r9
   2d732:	f043 0301 	orr.w	r3, r3, #1
   2d736:	4317      	orrs	r7, r2
   2d738:	f8c9 7004 	str.w	r7, [r9, #4]
   2d73c:	604b      	str	r3, [r1, #4]
   2d73e:	6863      	ldr	r3, [r4, #4]
   2d740:	f043 0301 	orr.w	r3, r3, #1
   2d744:	3108      	adds	r1, #8
   2d746:	6063      	str	r3, [r4, #4]
   2d748:	4640      	mov	r0, r8
   2d74a:	f7ff fe7f 	bl	2d44c <_free_r>
   2d74e:	e7d6      	b.n	2d6fe <_realloc_r+0xde>
   2d750:	4611      	mov	r1, r2
   2d752:	f7fe bfb5 	b.w	2c6c0 <_malloc_r>
   2d756:	f01e 0f01 	tst.w	lr, #1
   2d75a:	d18e      	bne.n	2d67a <_realloc_r+0x5a>
   2d75c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2d760:	eba9 0a01 	sub.w	sl, r9, r1
   2d764:	f8da 1004 	ldr.w	r1, [sl, #4]
   2d768:	f021 0103 	bic.w	r1, r1, #3
   2d76c:	440b      	add	r3, r1
   2d76e:	4423      	add	r3, r4
   2d770:	4293      	cmp	r3, r2
   2d772:	db25      	blt.n	2d7c0 <_realloc_r+0x1a0>
   2d774:	68c2      	ldr	r2, [r0, #12]
   2d776:	6881      	ldr	r1, [r0, #8]
   2d778:	4656      	mov	r6, sl
   2d77a:	60ca      	str	r2, [r1, #12]
   2d77c:	6091      	str	r1, [r2, #8]
   2d77e:	f8da 100c 	ldr.w	r1, [sl, #12]
   2d782:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2d786:	1f22      	subs	r2, r4, #4
   2d788:	2a24      	cmp	r2, #36	; 0x24
   2d78a:	60c1      	str	r1, [r0, #12]
   2d78c:	6088      	str	r0, [r1, #8]
   2d78e:	f200 8094 	bhi.w	2d8ba <_realloc_r+0x29a>
   2d792:	2a13      	cmp	r2, #19
   2d794:	d96f      	bls.n	2d876 <_realloc_r+0x256>
   2d796:	6829      	ldr	r1, [r5, #0]
   2d798:	f8ca 1008 	str.w	r1, [sl, #8]
   2d79c:	6869      	ldr	r1, [r5, #4]
   2d79e:	f8ca 100c 	str.w	r1, [sl, #12]
   2d7a2:	2a1b      	cmp	r2, #27
   2d7a4:	f200 80a2 	bhi.w	2d8ec <_realloc_r+0x2cc>
   2d7a8:	3508      	adds	r5, #8
   2d7aa:	f10a 0210 	add.w	r2, sl, #16
   2d7ae:	e063      	b.n	2d878 <_realloc_r+0x258>
   2d7b0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   2d7b4:	eba9 0a03 	sub.w	sl, r9, r3
   2d7b8:	f8da 1004 	ldr.w	r1, [sl, #4]
   2d7bc:	f021 0103 	bic.w	r1, r1, #3
   2d7c0:	1863      	adds	r3, r4, r1
   2d7c2:	4293      	cmp	r3, r2
   2d7c4:	f6ff af59 	blt.w	2d67a <_realloc_r+0x5a>
   2d7c8:	4656      	mov	r6, sl
   2d7ca:	e7d8      	b.n	2d77e <_realloc_r+0x15e>
   2d7cc:	6841      	ldr	r1, [r0, #4]
   2d7ce:	f021 0b03 	bic.w	fp, r1, #3
   2d7d2:	44a3      	add	fp, r4
   2d7d4:	f107 0010 	add.w	r0, r7, #16
   2d7d8:	4583      	cmp	fp, r0
   2d7da:	da56      	bge.n	2d88a <_realloc_r+0x26a>
   2d7dc:	f01e 0f01 	tst.w	lr, #1
   2d7e0:	f47f af4b 	bne.w	2d67a <_realloc_r+0x5a>
   2d7e4:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2d7e8:	eba9 0a01 	sub.w	sl, r9, r1
   2d7ec:	f8da 1004 	ldr.w	r1, [sl, #4]
   2d7f0:	f021 0103 	bic.w	r1, r1, #3
   2d7f4:	448b      	add	fp, r1
   2d7f6:	4558      	cmp	r0, fp
   2d7f8:	dce2      	bgt.n	2d7c0 <_realloc_r+0x1a0>
   2d7fa:	4656      	mov	r6, sl
   2d7fc:	f8da 100c 	ldr.w	r1, [sl, #12]
   2d800:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2d804:	1f22      	subs	r2, r4, #4
   2d806:	2a24      	cmp	r2, #36	; 0x24
   2d808:	60c1      	str	r1, [r0, #12]
   2d80a:	6088      	str	r0, [r1, #8]
   2d80c:	f200 808f 	bhi.w	2d92e <_realloc_r+0x30e>
   2d810:	2a13      	cmp	r2, #19
   2d812:	f240 808a 	bls.w	2d92a <_realloc_r+0x30a>
   2d816:	6829      	ldr	r1, [r5, #0]
   2d818:	f8ca 1008 	str.w	r1, [sl, #8]
   2d81c:	6869      	ldr	r1, [r5, #4]
   2d81e:	f8ca 100c 	str.w	r1, [sl, #12]
   2d822:	2a1b      	cmp	r2, #27
   2d824:	f200 808a 	bhi.w	2d93c <_realloc_r+0x31c>
   2d828:	3508      	adds	r5, #8
   2d82a:	f10a 0210 	add.w	r2, sl, #16
   2d82e:	6829      	ldr	r1, [r5, #0]
   2d830:	6011      	str	r1, [r2, #0]
   2d832:	6869      	ldr	r1, [r5, #4]
   2d834:	6051      	str	r1, [r2, #4]
   2d836:	68a9      	ldr	r1, [r5, #8]
   2d838:	6091      	str	r1, [r2, #8]
   2d83a:	eb0a 0107 	add.w	r1, sl, r7
   2d83e:	ebab 0207 	sub.w	r2, fp, r7
   2d842:	f042 0201 	orr.w	r2, r2, #1
   2d846:	6099      	str	r1, [r3, #8]
   2d848:	604a      	str	r2, [r1, #4]
   2d84a:	f8da 3004 	ldr.w	r3, [sl, #4]
   2d84e:	f003 0301 	and.w	r3, r3, #1
   2d852:	431f      	orrs	r7, r3
   2d854:	4640      	mov	r0, r8
   2d856:	f8ca 7004 	str.w	r7, [sl, #4]
   2d85a:	f7ff f9e7 	bl	2cc2c <__malloc_unlock>
   2d85e:	e751      	b.n	2d704 <_realloc_r+0xe4>
   2d860:	682b      	ldr	r3, [r5, #0]
   2d862:	6003      	str	r3, [r0, #0]
   2d864:	686b      	ldr	r3, [r5, #4]
   2d866:	6043      	str	r3, [r0, #4]
   2d868:	2a1b      	cmp	r2, #27
   2d86a:	d82d      	bhi.n	2d8c8 <_realloc_r+0x2a8>
   2d86c:	f100 0308 	add.w	r3, r0, #8
   2d870:	f105 0208 	add.w	r2, r5, #8
   2d874:	e71b      	b.n	2d6ae <_realloc_r+0x8e>
   2d876:	4632      	mov	r2, r6
   2d878:	6829      	ldr	r1, [r5, #0]
   2d87a:	6011      	str	r1, [r2, #0]
   2d87c:	6869      	ldr	r1, [r5, #4]
   2d87e:	6051      	str	r1, [r2, #4]
   2d880:	68a9      	ldr	r1, [r5, #8]
   2d882:	6091      	str	r1, [r2, #8]
   2d884:	461c      	mov	r4, r3
   2d886:	46d1      	mov	r9, sl
   2d888:	e72a      	b.n	2d6e0 <_realloc_r+0xc0>
   2d88a:	eb09 0107 	add.w	r1, r9, r7
   2d88e:	ebab 0b07 	sub.w	fp, fp, r7
   2d892:	f04b 0201 	orr.w	r2, fp, #1
   2d896:	6099      	str	r1, [r3, #8]
   2d898:	604a      	str	r2, [r1, #4]
   2d89a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2d89e:	f003 0301 	and.w	r3, r3, #1
   2d8a2:	431f      	orrs	r7, r3
   2d8a4:	4640      	mov	r0, r8
   2d8a6:	f845 7c04 	str.w	r7, [r5, #-4]
   2d8aa:	f7ff f9bf 	bl	2cc2c <__malloc_unlock>
   2d8ae:	462e      	mov	r6, r5
   2d8b0:	e728      	b.n	2d704 <_realloc_r+0xe4>
   2d8b2:	4629      	mov	r1, r5
   2d8b4:	f7fb feac 	bl	29610 <memmove>
   2d8b8:	e6ff      	b.n	2d6ba <_realloc_r+0x9a>
   2d8ba:	4629      	mov	r1, r5
   2d8bc:	4630      	mov	r0, r6
   2d8be:	461c      	mov	r4, r3
   2d8c0:	46d1      	mov	r9, sl
   2d8c2:	f7fb fea5 	bl	29610 <memmove>
   2d8c6:	e70b      	b.n	2d6e0 <_realloc_r+0xc0>
   2d8c8:	68ab      	ldr	r3, [r5, #8]
   2d8ca:	6083      	str	r3, [r0, #8]
   2d8cc:	68eb      	ldr	r3, [r5, #12]
   2d8ce:	60c3      	str	r3, [r0, #12]
   2d8d0:	2a24      	cmp	r2, #36	; 0x24
   2d8d2:	d017      	beq.n	2d904 <_realloc_r+0x2e4>
   2d8d4:	f100 0310 	add.w	r3, r0, #16
   2d8d8:	f105 0210 	add.w	r2, r5, #16
   2d8dc:	e6e7      	b.n	2d6ae <_realloc_r+0x8e>
   2d8de:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2d8e2:	f023 0303 	bic.w	r3, r3, #3
   2d8e6:	441c      	add	r4, r3
   2d8e8:	462e      	mov	r6, r5
   2d8ea:	e6f9      	b.n	2d6e0 <_realloc_r+0xc0>
   2d8ec:	68a9      	ldr	r1, [r5, #8]
   2d8ee:	f8ca 1010 	str.w	r1, [sl, #16]
   2d8f2:	68e9      	ldr	r1, [r5, #12]
   2d8f4:	f8ca 1014 	str.w	r1, [sl, #20]
   2d8f8:	2a24      	cmp	r2, #36	; 0x24
   2d8fa:	d00c      	beq.n	2d916 <_realloc_r+0x2f6>
   2d8fc:	3510      	adds	r5, #16
   2d8fe:	f10a 0218 	add.w	r2, sl, #24
   2d902:	e7b9      	b.n	2d878 <_realloc_r+0x258>
   2d904:	692b      	ldr	r3, [r5, #16]
   2d906:	6103      	str	r3, [r0, #16]
   2d908:	696b      	ldr	r3, [r5, #20]
   2d90a:	6143      	str	r3, [r0, #20]
   2d90c:	f105 0218 	add.w	r2, r5, #24
   2d910:	f100 0318 	add.w	r3, r0, #24
   2d914:	e6cb      	b.n	2d6ae <_realloc_r+0x8e>
   2d916:	692a      	ldr	r2, [r5, #16]
   2d918:	f8ca 2018 	str.w	r2, [sl, #24]
   2d91c:	696a      	ldr	r2, [r5, #20]
   2d91e:	f8ca 201c 	str.w	r2, [sl, #28]
   2d922:	3518      	adds	r5, #24
   2d924:	f10a 0220 	add.w	r2, sl, #32
   2d928:	e7a6      	b.n	2d878 <_realloc_r+0x258>
   2d92a:	4632      	mov	r2, r6
   2d92c:	e77f      	b.n	2d82e <_realloc_r+0x20e>
   2d92e:	4629      	mov	r1, r5
   2d930:	4630      	mov	r0, r6
   2d932:	9301      	str	r3, [sp, #4]
   2d934:	f7fb fe6c 	bl	29610 <memmove>
   2d938:	9b01      	ldr	r3, [sp, #4]
   2d93a:	e77e      	b.n	2d83a <_realloc_r+0x21a>
   2d93c:	68a9      	ldr	r1, [r5, #8]
   2d93e:	f8ca 1010 	str.w	r1, [sl, #16]
   2d942:	68e9      	ldr	r1, [r5, #12]
   2d944:	f8ca 1014 	str.w	r1, [sl, #20]
   2d948:	2a24      	cmp	r2, #36	; 0x24
   2d94a:	d003      	beq.n	2d954 <_realloc_r+0x334>
   2d94c:	3510      	adds	r5, #16
   2d94e:	f10a 0218 	add.w	r2, sl, #24
   2d952:	e76c      	b.n	2d82e <_realloc_r+0x20e>
   2d954:	692a      	ldr	r2, [r5, #16]
   2d956:	f8ca 2018 	str.w	r2, [sl, #24]
   2d95a:	696a      	ldr	r2, [r5, #20]
   2d95c:	f8ca 201c 	str.w	r2, [sl, #28]
   2d960:	3518      	adds	r5, #24
   2d962:	f10a 0220 	add.w	r2, sl, #32
   2d966:	e762      	b.n	2d82e <_realloc_r+0x20e>
   2d968:	2000ca18 	.word	0x2000ca18
