
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

#include <crc16.h>

u16_t crc16(const u8_t *src, size_t len, u16_t polynomial,
	    u16_t initial_value, bool pad)
{
       0:	2000ac20 	.word	0x2000ac20
       4:	00027b31 	.word	0x00027b31
	u16_t crc = initial_value;
	size_t padding = pad ? sizeof(crc) : 0;
       8:	00027b91 	.word	0x00027b91
	size_t i, b;

	/* src length + padding (if required) */
	for (i = 0; i < len + padding; i++) {
       c:	000279c5 	.word	0x000279c5
	size_t padding = pad ? sizeof(crc) : 0;
      10:	000279c5 	.word	0x000279c5
      14:	000279c5 	.word	0x000279c5
			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80 >> b));
			}

			if (divide) {
      18:	000279c5 	.word	0x000279c5
		for (b = 0; b < 8; b++) {
      1c:	000279c5 	.word	0x000279c5
      20:	000279c5 	.word	0x000279c5
			crc = (crc << 1);
      24:	000279c5 	.word	0x000279c5
			if (i < len) {
      28:	000279c5 	.word	0x000279c5
				crc |= !!(src[i] & (0x80 >> b));
      2c:	00027515 	.word	0x00027515
      30:	000279c5 	.word	0x000279c5
      34:	000279c5 	.word	0x000279c5
      38:	000274d1 	.word	0x000274d1
      3c:	000279c5 	.word	0x000279c5

00000040 <_irq_vector_table>:
				crc = crc ^ polynomial;
      40:	00027af5 0001923d 00027af5 00027af5     .z..=....z...z..
	for (i = 0; i < len + padding; i++) {
      50:	00027af5 00027af5 00027af5 00027af5     .z...z...z...z..
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
      60:	00027af5 00027af5 00027af5 00027af5     .z...z...z...z..
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
      70:	00027af5 00027af5 00027af5 00027af5     .z...z...z...z..
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
      80:	00027af5 00027af5 00027af5 00027af5     .z...z...z...z..
      90:	00027af5 00027af5 00027af5 00027af5     .z...z...z...z..
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
      a0:	00027af5 00027af5 00027af5 00027af5     .z...z...z...z..
      b0:	00027af5 00027af5 00027af5 00027af5     .z...z...z...z..
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
      c0:	00027af5 00027af5 00027af5 00027af5     .z...z...z...z..
      d0:	00027af5 00027af5 00027af5              .z...z...z..

000000dc <_sw_isr_table>:
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
      dc:	00000000 00002949 00000000 00027931     ....I)......1y..
      ec:	2000d04c 00002283 00000000 00027931     L.. ."......1y..
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
      fc:	00000000 00027931 00000000 00027931     ....1y......1y..

	(void)_copy(state, sizeof(state), in, sizeof(state));

	add_round_key(state, s->words + Nb*Nr);

	for (i = Nr - 1; i > 0; --i) {
     10c:	2000d088 00002657 00000000 00027931     ... W&......1y..
	for (i = 0; i < (Nb*Nk); ++i) {
     11c:	00000000 00027931 00000000 00027931     ....1y......1y..
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     12c:	00000000 00027931 00000000 0001925d     ....1y......]...
     13c:	00000000 00027931 00000000 0001929f     ....1y..........
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     14c:	00000000 00027931 00000000 00027931     ....1y......1y..
     15c:	00000000 00027931 00000000 000023c9     ....1y.......#..
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     16c:	00000000 00027931 00000000 00027931     ....1y......1y..
     17c:	00000000 00027931 00000000 00027931     ....1y......1y..
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     18c:	00000000 00027931 00000000 00027931     ....1y......1y..
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     19c:	00000000 00019295 00000000 00027931     ............1y..
     1ac:	00000000 00027931 00000000 00027931     ....1y......1y..
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     1bc:	00000000 00027931 00000000 00027931     ....1y......1y..
     1cc:	00000000 00027931 00000000 00027931     ....1y......1y..
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     1dc:	00000000 00027931 00000000 00027931     ....1y......1y..
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     1ec:	00000000 00027931 00000000 00027931     ....1y......1y..
     1fc:	00000000 00027931 00000000 00027931     ....1y......1y..
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     20c:	00000000 00027931                       ....1y..

00000214 <_image_text_start>:
	...

00000220 <memchr>:
     220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     224:	2a10      	cmp	r2, #16
     226:	db2b      	blt.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     228:	f010 0f07 	tst.w	r0, #7
     22c:	d008      	beq.n	240 <memchr+0x20>
     22e:	f810 3b01 	ldrb.w	r3, [r0], #1
     232:	3a01      	subs	r2, #1
     234:	428b      	cmp	r3, r1
     236:	d02d      	beq.n	294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     238:	f010 0f07 	tst.w	r0, #7
     23c:	b342      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     23e:	d1f6      	bne.n	22e <memchr+0xe>
     240:	b4f0      	push	{r4, r5, r6, r7}
     242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     24a:	f022 0407 	bic.w	r4, r2, #7
     24e:	f07f 0700 	mvns.w	r7, #0
     252:	2300      	movs	r3, #0
     254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     258:	3c08      	subs	r4, #8
     25a:	ea85 0501 	eor.w	r5, r5, r1
     25e:	ea86 0601 	eor.w	r6, r6, r1
     262:	fa85 f547 	uadd8	r5, r5, r7
     266:	faa3 f587 	sel	r5, r3, r7
     26a:	fa86 f647 	uadd8	r6, r6, r7
     26e:	faa5 f687 	sel	r6, r5, r7
     272:	b98e      	cbnz	r6, 298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     274:	d1ee      	bne.n	254 <memchr+0x34>
     276:	bcf0      	pop	{r4, r5, r6, r7}
     278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     27c:	f002 0207 	and.w	r2, r2, #7
     280:	b132      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     282:	f810 3b01 	ldrb.w	r3, [r0], #1
     286:	3a01      	subs	r2, #1
     288:	ea83 0301 	eor.w	r3, r3, r1
     28c:	b113      	cbz	r3, 294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     28e:	d1f8      	bne.n	282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     290:	2000      	movs	r0, #0
     292:	4770      	bx	lr
     294:	3801      	subs	r0, #1
     296:	4770      	bx	lr
     298:	2d00      	cmp	r5, #0
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     29a:	bf06      	itte	eq
     29c:	4635      	moveq	r5, r6
     29e:	3803      	subeq	r0, #3
     2a0:	3807      	subne	r0, #7
     2a2:	f015 0f01 	tst.w	r5, #1
     2a6:	d107      	bne.n	2b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     2a8:	3001      	adds	r0, #1
     2aa:	f415 7f80 	tst.w	r5, #256	; 0x100
     2ae:	bf02      	ittt	eq
     2b0:	3001      	addeq	r0, #1
     2b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     2b6:	3001      	addeq	r0, #1
     2b8:	bcf0      	pop	{r4, r5, r6, r7}
     2ba:	3801      	subs	r0, #1
     2bc:	4770      	bx	lr
     2be:	bf00      	nop

000002c0 <memcpy>:
     2c0:	4684      	mov	ip, r0
     2c2:	ea41 0300 	orr.w	r3, r1, r0
     2c6:	f013 0303 	ands.w	r3, r3, #3
     2ca:	d16d      	bne.n	3a8 <memcpy+0xe8>
     2cc:	3a40      	subs	r2, #64	; 0x40
     2ce:	d341      	bcc.n	354 <memcpy+0x94>
     2d0:	f851 3b04 	ldr.w	r3, [r1], #4
     2d4:	f840 3b04 	str.w	r3, [r0], #4
     2d8:	f851 3b04 	ldr.w	r3, [r1], #4
     2dc:	f840 3b04 	str.w	r3, [r0], #4
     2e0:	f851 3b04 	ldr.w	r3, [r1], #4
     2e4:	f840 3b04 	str.w	r3, [r0], #4
     2e8:	f851 3b04 	ldr.w	r3, [r1], #4
     2ec:	f840 3b04 	str.w	r3, [r0], #4
     2f0:	f851 3b04 	ldr.w	r3, [r1], #4
     2f4:	f840 3b04 	str.w	r3, [r0], #4
     2f8:	f851 3b04 	ldr.w	r3, [r1], #4
     2fc:	f840 3b04 	str.w	r3, [r0], #4
     300:	f851 3b04 	ldr.w	r3, [r1], #4
     304:	f840 3b04 	str.w	r3, [r0], #4
     308:	f851 3b04 	ldr.w	r3, [r1], #4
     30c:	f840 3b04 	str.w	r3, [r0], #4
     310:	f851 3b04 	ldr.w	r3, [r1], #4
     314:	f840 3b04 	str.w	r3, [r0], #4
     318:	f851 3b04 	ldr.w	r3, [r1], #4
     31c:	f840 3b04 	str.w	r3, [r0], #4
     320:	f851 3b04 	ldr.w	r3, [r1], #4
     324:	f840 3b04 	str.w	r3, [r0], #4
     328:	f851 3b04 	ldr.w	r3, [r1], #4
     32c:	f840 3b04 	str.w	r3, [r0], #4
     330:	f851 3b04 	ldr.w	r3, [r1], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     334:	f840 3b04 	str.w	r3, [r0], #4
     338:	f851 3b04 	ldr.w	r3, [r1], #4
     33c:	f840 3b04 	str.w	r3, [r0], #4
     340:	f851 3b04 	ldr.w	r3, [r1], #4
     344:	f840 3b04 	str.w	r3, [r0], #4
     348:	f851 3b04 	ldr.w	r3, [r1], #4
     34c:	f840 3b04 	str.w	r3, [r0], #4
     350:	3a40      	subs	r2, #64	; 0x40
     352:	d2bd      	bcs.n	2d0 <memcpy+0x10>
     354:	3230      	adds	r2, #48	; 0x30
     356:	d311      	bcc.n	37c <memcpy+0xbc>
     358:	f851 3b04 	ldr.w	r3, [r1], #4
     35c:	f840 3b04 	str.w	r3, [r0], #4
     360:	f851 3b04 	ldr.w	r3, [r1], #4
     364:	f840 3b04 	str.w	r3, [r0], #4
     368:	f851 3b04 	ldr.w	r3, [r1], #4
     36c:	f840 3b04 	str.w	r3, [r0], #4
     370:	f851 3b04 	ldr.w	r3, [r1], #4
     374:	f840 3b04 	str.w	r3, [r0], #4
     378:	3a10      	subs	r2, #16
     37a:	d2ed      	bcs.n	358 <memcpy+0x98>
     37c:	320c      	adds	r2, #12
     37e:	d305      	bcc.n	38c <memcpy+0xcc>
     380:	f851 3b04 	ldr.w	r3, [r1], #4
     384:	f840 3b04 	str.w	r3, [r0], #4
     388:	3a04      	subs	r2, #4
     38a:	d2f9      	bcs.n	380 <memcpy+0xc0>
     38c:	3204      	adds	r2, #4
     38e:	d008      	beq.n	3a2 <memcpy+0xe2>
     390:	07d2      	lsls	r2, r2, #31
     392:	bf1c      	itt	ne
     394:	f811 3b01 	ldrbne.w	r3, [r1], #1
     398:	f800 3b01 	strbne.w	r3, [r0], #1
     39c:	d301      	bcc.n	3a2 <memcpy+0xe2>
     39e:	880b      	ldrh	r3, [r1, #0]
     3a0:	8003      	strh	r3, [r0, #0]
     3a2:	4660      	mov	r0, ip
     3a4:	4770      	bx	lr
     3a6:	bf00      	nop
     3a8:	2a08      	cmp	r2, #8
     3aa:	d313      	bcc.n	3d4 <memcpy+0x114>
     3ac:	078b      	lsls	r3, r1, #30
     3ae:	d08d      	beq.n	2cc <memcpy+0xc>
     3b0:	f010 0303 	ands.w	r3, r0, #3
     3b4:	d08a      	beq.n	2cc <memcpy+0xc>
     3b6:	f1c3 0304 	rsb	r3, r3, #4
     3ba:	1ad2      	subs	r2, r2, r3
     3bc:	07db      	lsls	r3, r3, #31
     3be:	bf1c      	itt	ne
     3c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
     3c4:	f800 3b01 	strbne.w	r3, [r0], #1
     3c8:	d380      	bcc.n	2cc <memcpy+0xc>
     3ca:	f831 3b02 	ldrh.w	r3, [r1], #2
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     3ce:	f820 3b02 	strh.w	r3, [r0], #2
     3d2:	e77b      	b.n	2cc <memcpy+0xc>
     3d4:	3a04      	subs	r2, #4
     3d6:	d3d9      	bcc.n	38c <memcpy+0xcc>
     3d8:	3a01      	subs	r2, #1
     3da:	f811 3b01 	ldrb.w	r3, [r1], #1
     3de:	f800 3b01 	strb.w	r3, [r0], #1
     3e2:	d2f9      	bcs.n	3d8 <memcpy+0x118>
     3e4:	780b      	ldrb	r3, [r1, #0]
     3e6:	7003      	strb	r3, [r0, #0]
     3e8:	784b      	ldrb	r3, [r1, #1]
     3ea:	7043      	strb	r3, [r0, #1]
     3ec:	788b      	ldrb	r3, [r1, #2]
     3ee:	7083      	strb	r3, [r0, #2]
     3f0:	4660      	mov	r0, ip
     3f2:	4770      	bx	lr
	...
     400:	eba2 0003 	sub.w	r0, r2, r3
     404:	4770      	bx	lr
     406:	bf00      	nop

00000408 <strcmp>:
     408:	7802      	ldrb	r2, [r0, #0]
     40a:	780b      	ldrb	r3, [r1, #0]
     40c:	2a01      	cmp	r2, #1
     40e:	bf28      	it	cs
     410:	429a      	cmpcs	r2, r3
     412:	d1f5      	bne.n	400 <CONFIG_BT_RX_STACK_SIZE>
     414:	e96d 4504 	strd	r4, r5, [sp, #-16]!
     418:	ea40 0401 	orr.w	r4, r0, r1
     41c:	e9cd 6702 	strd	r6, r7, [sp, #8]
     420:	f06f 0c00 	mvn.w	ip, #0
     424:	ea4f 7244 	mov.w	r2, r4, lsl #29
     428:	b312      	cbz	r2, 470 <strcmp+0x68>
     42a:	ea80 0401 	eor.w	r4, r0, r1
     42e:	f014 0f07 	tst.w	r4, #7
     432:	d16a      	bne.n	50a <CONFIG_NET_TX_STACK_SIZE+0x5a>
     434:	f000 0407 	and.w	r4, r0, #7
     438:	f020 0007 	bic.w	r0, r0, #7
     43c:	f004 0503 	and.w	r5, r4, #3
     440:	f021 0107 	bic.w	r1, r1, #7
     444:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     448:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     44c:	f014 0f04 	tst.w	r4, #4
     450:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     454:	fa0c f405 	lsl.w	r4, ip, r5
     458:	ea62 0204 	orn	r2, r2, r4
     45c:	ea66 0604 	orn	r6, r6, r4
     460:	d00a      	beq.n	478 <strcmp+0x70>
     462:	ea63 0304 	orn	r3, r3, r4
     466:	4662      	mov	r2, ip
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     468:	ea67 0704 	orn	r7, r7, r4
     46c:	4666      	mov	r6, ip
     46e:	e003      	b.n	478 <strcmp+0x70>
     470:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     474:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     478:	fa82 f54c 	uadd8	r5, r2, ip
     47c:	ea82 0406 	eor.w	r4, r2, r6
     480:	faa4 f48c 	sel	r4, r4, ip
     484:	bb6c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     486:	fa83 f54c 	uadd8	r5, r3, ip
     48a:	ea83 0507 	eor.w	r5, r3, r7
     48e:	faa5 f58c 	sel	r5, r5, ip
     492:	b995      	cbnz	r5, 4ba <CONFIG_NET_TX_STACK_SIZE+0xa>
     494:	e950 2302 	ldrd	r2, r3, [r0, #-8]
     498:	e951 6702 	ldrd	r6, r7, [r1, #-8]
     49c:	fa82 f54c 	uadd8	r5, r2, ip
     4a0:	ea82 0406 	eor.w	r4, r2, r6
     4a4:	faa4 f48c 	sel	r4, r4, ip
     4a8:	fa83 f54c 	uadd8	r5, r3, ip
     4ac:	ea83 0507 	eor.w	r5, r3, r7
     4b0:	faa5 f58c 	sel	r5, r5, ip
     4b4:	4325      	orrs	r5, r4
     4b6:	d0db      	beq.n	470 <strcmp+0x68>
     4b8:	b99c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     4ba:	ba2d      	rev	r5, r5
     4bc:	fab5 f485 	clz	r4, r5
     4c0:	f024 0407 	bic.w	r4, r4, #7
     4c4:	fa27 f104 	lsr.w	r1, r7, r4
     4c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4cc:	fa23 f304 	lsr.w	r3, r3, r4
     4d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
     4d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     4d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     4dc:	eba0 0001 	sub.w	r0, r0, r1
     4e0:	4770      	bx	lr
     4e2:	ba24      	rev	r4, r4
     4e4:	fab4 f484 	clz	r4, r4
     4e8:	f024 0407 	bic.w	r4, r4, #7
     4ec:	fa26 f104 	lsr.w	r1, r6, r4
     4f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4f4:	fa22 f204 	lsr.w	r2, r2, r4
     4f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     4fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     500:	e8fd 4504 	ldrd	r4, r5, [sp], #16
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     504:	eba0 0001 	sub.w	r0, r0, r1
     508:	4770      	bx	lr
     50a:	f014 0f03 	tst.w	r4, #3
     50e:	d13c      	bne.n	58a <CONFIG_NET_TX_STACK_SIZE+0xda>
     510:	f010 0403 	ands.w	r4, r0, #3
     514:	d128      	bne.n	568 <CONFIG_NET_TX_STACK_SIZE+0xb8>
     516:	f850 2b08 	ldr.w	r2, [r0], #8
     51a:	f851 3b08 	ldr.w	r3, [r1], #8
     51e:	fa82 f54c 	uadd8	r5, r2, ip
     522:	ea82 0503 	eor.w	r5, r2, r3
     526:	faa5 f58c 	sel	r5, r5, ip
     52a:	b95d      	cbnz	r5, 544 <CONFIG_NET_TX_STACK_SIZE+0x94>
     52c:	f850 2c04 	ldr.w	r2, [r0, #-4]
     530:	f851 3c04 	ldr.w	r3, [r1, #-4]
     534:	fa82 f54c 	uadd8	r5, r2, ip
     538:	ea82 0503 	eor.w	r5, r2, r3
     53c:	faa5 f58c 	sel	r5, r5, ip
     540:	2d00      	cmp	r5, #0
     542:	d0e8      	beq.n	516 <CONFIG_NET_TX_STACK_SIZE+0x66>
     544:	ba2d      	rev	r5, r5
     546:	fab5 f485 	clz	r4, r5
     54a:	f024 0407 	bic.w	r4, r4, #7
     54e:	fa23 f104 	lsr.w	r1, r3, r4
     552:	fa22 f204 	lsr.w	r2, r2, r4
     556:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     55a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     55e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     562:	eba0 0001 	sub.w	r0, r0, r1
     566:	4770      	bx	lr
     568:	ea4f 04c4 	mov.w	r4, r4, lsl #3
     56c:	f020 0003 	bic.w	r0, r0, #3
     570:	f850 2b08 	ldr.w	r2, [r0], #8
     574:	f021 0103 	bic.w	r1, r1, #3
     578:	f851 3b08 	ldr.w	r3, [r1], #8
     57c:	fa0c f404 	lsl.w	r4, ip, r4
     580:	ea62 0204 	orn	r2, r2, r4
     584:	ea63 0304 	orn	r3, r3, r4
     588:	e7c9      	b.n	51e <CONFIG_NET_TX_STACK_SIZE+0x6e>
     58a:	f010 0403 	ands.w	r4, r0, #3
     58e:	d01a      	beq.n	5c6 <CONFIG_NET_TX_STACK_SIZE+0x116>
     590:	eba1 0104 	sub.w	r1, r1, r4
     594:	f020 0003 	bic.w	r0, r0, #3
     598:	07e4      	lsls	r4, r4, #31
     59a:	f850 2b04 	ldr.w	r2, [r0], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     59e:	d006      	beq.n	5ae <CONFIG_NET_TX_STACK_SIZE+0xfe>
     5a0:	d20f      	bcs.n	5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5a2:	788b      	ldrb	r3, [r1, #2]
     5a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
     5a8:	1ae4      	subs	r4, r4, r3
     5aa:	d106      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ac:	b12b      	cbz	r3, 5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ae:	78cb      	ldrb	r3, [r1, #3]
     5b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
     5b4:	1ae4      	subs	r4, r4, r3
     5b6:	d100      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5b8:	b91b      	cbnz	r3, 5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5ba:	4620      	mov	r0, r4
     5bc:	f85d 4b10 	ldr.w	r4, [sp], #16
     5c0:	4770      	bx	lr
     5c2:	f101 0104 	add.w	r1, r1, #4
     5c6:	f850 2b04 	ldr.w	r2, [r0], #4
     5ca:	07cc      	lsls	r4, r1, #31
     5cc:	f021 0103 	bic.w	r1, r1, #3
     5d0:	f851 3b04 	ldr.w	r3, [r1], #4
     5d4:	d848      	bhi.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     5d6:	d224      	bcs.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     5d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
     5dc:	fa82 f54c 	uadd8	r5, r2, ip
     5e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
     5e4:	faa5 f58c 	sel	r5, r5, ip
     5e8:	d10a      	bne.n	600 <CONFIG_NET_RX_STACK_SIZE+0x24>
     5ea:	b965      	cbnz	r5, 606 <CONFIG_NET_RX_STACK_SIZE+0x2a>
     5ec:	f851 3b04 	ldr.w	r3, [r1], #4
     5f0:	ea84 0402 	eor.w	r4, r4, r2
     5f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
     5f8:	d10e      	bne.n	618 <CONFIG_NET_RX_STACK_SIZE+0x3c>
     5fa:	f850 2b04 	ldr.w	r2, [r0], #4
     5fe:	e7eb      	b.n	5d8 <CONFIG_NET_TX_STACK_SIZE+0x128>
     600:	ea4f 2313 	mov.w	r3, r3, lsr #8
     604:	e055      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     606:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
     60a:	d14d      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     60c:	7808      	ldrb	r0, [r1, #0]
     60e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     612:	f1c0 0000 	rsb	r0, r0, #0
     616:	4770      	bx	lr
     618:	ea4f 6212 	mov.w	r2, r2, lsr #24
     61c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
     620:	e047      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     622:	ea02 441c 	and.w	r4, r2, ip, lsr #16
     626:	fa82 f54c 	uadd8	r5, r2, ip
     62a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
     62e:	faa5 f58c 	sel	r5, r5, ip
     632:	d10a      	bne.n	64a <CONFIG_NET_RX_STACK_SIZE+0x6e>
     634:	b965      	cbnz	r5, 650 <CONFIG_NET_RX_STACK_SIZE+0x74>
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     636:	f851 3b04 	ldr.w	r3, [r1], #4
     63a:	ea84 0402 	eor.w	r4, r4, r2
     63e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
     642:	d10c      	bne.n	65e <CONFIG_NET_RX_STACK_SIZE+0x82>
     644:	f850 2b04 	ldr.w	r2, [r0], #4
     648:	e7eb      	b.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     64a:	ea4f 4313 	mov.w	r3, r3, lsr #16
     64e:	e030      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     650:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
     654:	d128      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     656:	880b      	ldrh	r3, [r1, #0]
     658:	ea4f 4212 	mov.w	r2, r2, lsr #16
     65c:	e029      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     65e:	ea4f 4212 	mov.w	r2, r2, lsr #16
     662:	ea03 431c 	and.w	r3, r3, ip, lsr #16
     666:	e024      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     668:	f002 04ff 	and.w	r4, r2, #255	; 0xff
     66c:	fa82 f54c 	uadd8	r5, r2, ip
     670:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
     674:	faa5 f58c 	sel	r5, r5, ip
     678:	d10a      	bne.n	690 <CONFIG_NET_RX_STACK_SIZE+0xb4>
     67a:	b965      	cbnz	r5, 696 <CONFIG_NET_RX_STACK_SIZE+0xba>
     67c:	f851 3b04 	ldr.w	r3, [r1], #4
     680:	ea84 0402 	eor.w	r4, r4, r2
     684:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
     688:	d109      	bne.n	69e <CONFIG_NET_RX_STACK_SIZE+0xc2>
     68a:	f850 2b04 	ldr.w	r2, [r0], #4
     68e:	e7eb      	b.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     690:	ea4f 6313 	mov.w	r3, r3, lsr #24
     694:	e00d      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     696:	f015 0fff 	tst.w	r5, #255	; 0xff
     69a:	d105      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     69c:	680b      	ldr	r3, [r1, #0]
     69e:	ea4f 2212 	mov.w	r2, r2, lsr #8
     6a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     6a6:	e004      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     6a8:	f04f 0000 	mov.w	r0, #0
     6ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6b0:	4770      	bx	lr
     6b2:	ba12      	rev	r2, r2
     6b4:	ba1b      	rev	r3, r3
     6b6:	fa82 f44c 	uadd8	r4, r2, ip
     6ba:	ea82 0403 	eor.w	r4, r2, r3
     6be:	faa4 f58c 	sel	r5, r4, ip
     6c2:	fab5 f485 	clz	r4, r5
     6c6:	fa02 f204 	lsl.w	r2, r2, r4
     6ca:	fa03 f304 	lsl.w	r3, r3, r4
     6ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     6d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
     6da:	4770      	bx	lr
	...

00000700 <strlen>:
     700:	f890 f000 	pld	[r0]
     704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
     708:	f020 0107 	bic.w	r1, r0, #7
     70c:	f06f 0c00 	mvn.w	ip, #0
     710:	f010 0407 	ands.w	r4, r0, #7
     714:	f891 f020 	pld	[r1, #32]
     718:	f040 8049 	bne.w	7ae <strlen+0xae>
     71c:	f04f 0400 	mov.w	r4, #0
     720:	f06f 0007 	mvn.w	r0, #7
     724:	e9d1 2300 	ldrd	r2, r3, [r1]
     728:	f891 f040 	pld	[r1, #64]	; 0x40
     72c:	f100 0008 	add.w	r0, r0, #8
     730:	fa82 f24c 	uadd8	r2, r2, ip
     734:	faa4 f28c 	sel	r2, r4, ip
     738:	fa83 f34c 	uadd8	r3, r3, ip
     73c:	faa2 f38c 	sel	r3, r2, ip
     740:	bb4b      	cbnz	r3, 796 <strlen+0x96>
     742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
     746:	fa82 f24c 	uadd8	r2, r2, ip
     74a:	f100 0008 	add.w	r0, r0, #8
     74e:	faa4 f28c 	sel	r2, r4, ip
     752:	fa83 f34c 	uadd8	r3, r3, ip
     756:	faa2 f38c 	sel	r3, r2, ip
     75a:	b9e3      	cbnz	r3, 796 <strlen+0x96>
     75c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     760:	fa82 f24c 	uadd8	r2, r2, ip
     764:	f100 0008 	add.w	r0, r0, #8
     768:	faa4 f28c 	sel	r2, r4, ip
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     76c:	fa83 f34c 	uadd8	r3, r3, ip
     770:	faa2 f38c 	sel	r3, r2, ip
     774:	b97b      	cbnz	r3, 796 <strlen+0x96>
     776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
     77a:	f101 0120 	add.w	r1, r1, #32
     77e:	fa82 f24c 	uadd8	r2, r2, ip
     782:	f100 0008 	add.w	r0, r0, #8
     786:	faa4 f28c 	sel	r2, r4, ip
     78a:	fa83 f34c 	uadd8	r3, r3, ip
     78e:	faa2 f38c 	sel	r3, r2, ip
     792:	2b00      	cmp	r3, #0
     794:	d0c6      	beq.n	724 <strlen+0x24>
     796:	2a00      	cmp	r2, #0
     798:	bf04      	itt	eq
     79a:	3004      	addeq	r0, #4
     79c:	461a      	moveq	r2, r3
     79e:	ba12      	rev	r2, r2
     7a0:	fab2 f282 	clz	r2, r2
     7a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
     7a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
     7ac:	4770      	bx	lr
     7ae:	e9d1 2300 	ldrd	r2, r3, [r1]
     7b2:	f004 0503 	and.w	r5, r4, #3
     7b6:	f1c4 0000 	rsb	r0, r4, #0
     7ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     7be:	f014 0f04 	tst.w	r4, #4
     7c2:	f891 f040 	pld	[r1, #64]	; 0x40
     7c6:	fa0c f505 	lsl.w	r5, ip, r5
     7ca:	ea62 0205 	orn	r2, r2, r5
     7ce:	bf1c      	itt	ne
     7d0:	ea63 0305 	ornne	r3, r3, r5
     7d4:	4662      	movne	r2, ip
     7d6:	f04f 0400 	mov.w	r4, #0
     7da:	e7a9      	b.n	730 <strlen+0x30>

000007dc <__aeabi_drsub>:
     7dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     7e0:	e002      	b.n	7e8 <__adddf3>
     7e2:	bf00      	nop

000007e4 <__aeabi_dsub>:
     7e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000007e8 <__adddf3>:
     7e8:	b530      	push	{r4, r5, lr}
     7ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
     7ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
     7f2:	ea94 0f05 	teq	r4, r5
     7f6:	bf08      	it	eq
     7f8:	ea90 0f02 	teqeq	r0, r2
     7fc:	bf1f      	itttt	ne
     7fe:	ea54 0c00 	orrsne.w	ip, r4, r0
     802:	ea55 0c02 	orrsne.w	ip, r5, r2
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     806:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     80a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     80e:	f000 80e2 	beq.w	9d6 <CONFIG_ISR_STACK_SIZE+0x1d6>
     812:	ea4f 5454 	mov.w	r4, r4, lsr #21
     816:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     81a:	bfb8      	it	lt
     81c:	426d      	neglt	r5, r5
     81e:	dd0c      	ble.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     820:	442c      	add	r4, r5
     822:	ea80 0202 	eor.w	r2, r0, r2
     826:	ea81 0303 	eor.w	r3, r1, r3
     82a:	ea82 0000 	eor.w	r0, r2, r0
     82e:	ea83 0101 	eor.w	r1, r3, r1
     832:	ea80 0202 	eor.w	r2, r0, r2
     836:	ea81 0303 	eor.w	r3, r1, r3
     83a:	2d36      	cmp	r5, #54	; 0x36
     83c:	bf88      	it	hi
     83e:	bd30      	pophi	{r4, r5, pc}
     840:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     844:	ea4f 3101 	mov.w	r1, r1, lsl #12
     848:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     84c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     850:	d002      	beq.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     852:	4240      	negs	r0, r0
     854:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     858:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     85c:	ea4f 3303 	mov.w	r3, r3, lsl #12
     860:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     864:	d002      	beq.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
     866:	4252      	negs	r2, r2
     868:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     86c:	ea94 0f05 	teq	r4, r5
     870:	f000 80a7 	beq.w	9c2 <CONFIG_ISR_STACK_SIZE+0x1c2>
     874:	f1a4 0401 	sub.w	r4, r4, #1
     878:	f1d5 0e20 	rsbs	lr, r5, #32
     87c:	db0d      	blt.n	89a <CONFIG_ISR_STACK_SIZE+0x9a>
     87e:	fa02 fc0e 	lsl.w	ip, r2, lr
     882:	fa22 f205 	lsr.w	r2, r2, r5
     886:	1880      	adds	r0, r0, r2
     888:	f141 0100 	adc.w	r1, r1, #0
     88c:	fa03 f20e 	lsl.w	r2, r3, lr
     890:	1880      	adds	r0, r0, r2
     892:	fa43 f305 	asr.w	r3, r3, r5
     896:	4159      	adcs	r1, r3
     898:	e00e      	b.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
     89a:	f1a5 0520 	sub.w	r5, r5, #32
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     89e:	f10e 0e20 	add.w	lr, lr, #32
     8a2:	2a01      	cmp	r2, #1
     8a4:	fa03 fc0e 	lsl.w	ip, r3, lr
     8a8:	bf28      	it	cs
     8aa:	f04c 0c02 	orrcs.w	ip, ip, #2
     8ae:	fa43 f305 	asr.w	r3, r3, r5
     8b2:	18c0      	adds	r0, r0, r3
     8b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     8b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     8bc:	d507      	bpl.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     8be:	f04f 0e00 	mov.w	lr, #0
     8c2:	f1dc 0c00 	rsbs	ip, ip, #0
     8c6:	eb7e 0000 	sbcs.w	r0, lr, r0
     8ca:	eb6e 0101 	sbc.w	r1, lr, r1
     8ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     8d2:	d31b      	bcc.n	90c <CONFIG_ISR_STACK_SIZE+0x10c>
     8d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     8d8:	d30c      	bcc.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8da:	0849      	lsrs	r1, r1, #1
     8dc:	ea5f 0030 	movs.w	r0, r0, rrx
     8e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
     8e4:	f104 0401 	add.w	r4, r4, #1
     8e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
     8ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     8f0:	f080 809a 	bcs.w	a28 <CONFIG_ISR_STACK_SIZE+0x228>
     8f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     8f8:	bf08      	it	eq
     8fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8fe:	f150 0000 	adcs.w	r0, r0, #0
     902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     906:	ea41 0105 	orr.w	r1, r1, r5
     90a:	bd30      	pop	{r4, r5, pc}
     90c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     910:	4140      	adcs	r0, r0
     912:	eb41 0101 	adc.w	r1, r1, r1
     916:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     91a:	f1a4 0401 	sub.w	r4, r4, #1
     91e:	d1e9      	bne.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     920:	f091 0f00 	teq	r1, #0
     924:	bf04      	itt	eq
     926:	4601      	moveq	r1, r0
     928:	2000      	moveq	r0, #0
     92a:	fab1 f381 	clz	r3, r1
     92e:	bf08      	it	eq
     930:	3320      	addeq	r3, #32
     932:	f1a3 030b 	sub.w	r3, r3, #11
     936:	f1b3 0220 	subs.w	r2, r3, #32
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     93a:	da0c      	bge.n	956 <CONFIG_ISR_STACK_SIZE+0x156>
     93c:	320c      	adds	r2, #12
     93e:	dd08      	ble.n	952 <CONFIG_ISR_STACK_SIZE+0x152>
     940:	f102 0c14 	add.w	ip, r2, #20
     944:	f1c2 020c 	rsb	r2, r2, #12
     948:	fa01 f00c 	lsl.w	r0, r1, ip
     94c:	fa21 f102 	lsr.w	r1, r1, r2
     950:	e00c      	b.n	96c <CONFIG_ISR_STACK_SIZE+0x16c>
     952:	f102 0214 	add.w	r2, r2, #20
     956:	bfd8      	it	le
     958:	f1c2 0c20 	rsble	ip, r2, #32
     95c:	fa01 f102 	lsl.w	r1, r1, r2
     960:	fa20 fc0c 	lsr.w	ip, r0, ip
     964:	bfdc      	itt	le
     966:	ea41 010c 	orrle.w	r1, r1, ip
     96a:	4090      	lslle	r0, r2
     96c:	1ae4      	subs	r4, r4, r3
     96e:	bfa2      	ittt	ge
     970:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     974:	4329      	orrge	r1, r5
     976:	bd30      	popge	{r4, r5, pc}
     978:	ea6f 0404 	mvn.w	r4, r4
     97c:	3c1f      	subs	r4, #31
     97e:	da1c      	bge.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
     980:	340c      	adds	r4, #12
     982:	dc0e      	bgt.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
     984:	f104 0414 	add.w	r4, r4, #20
     988:	f1c4 0220 	rsb	r2, r4, #32
     98c:	fa20 f004 	lsr.w	r0, r0, r4
     990:	fa01 f302 	lsl.w	r3, r1, r2
     994:	ea40 0003 	orr.w	r0, r0, r3
     998:	fa21 f304 	lsr.w	r3, r1, r4
     99c:	ea45 0103 	orr.w	r1, r5, r3
     9a0:	bd30      	pop	{r4, r5, pc}
     9a2:	f1c4 040c 	rsb	r4, r4, #12
     9a6:	f1c4 0220 	rsb	r2, r4, #32
     9aa:	fa20 f002 	lsr.w	r0, r0, r2
     9ae:	fa01 f304 	lsl.w	r3, r1, r4
     9b2:	ea40 0003 	orr.w	r0, r0, r3
     9b6:	4629      	mov	r1, r5
     9b8:	bd30      	pop	{r4, r5, pc}
     9ba:	fa21 f004 	lsr.w	r0, r1, r4
     9be:	4629      	mov	r1, r5
     9c0:	bd30      	pop	{r4, r5, pc}
     9c2:	f094 0f00 	teq	r4, #0
     9c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     9ca:	bf06      	itte	eq
     9cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     9d0:	3401      	addeq	r4, #1
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     9d2:	3d01      	subne	r5, #1
     9d4:	e74e      	b.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
     9d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     9da:	bf18      	it	ne
     9dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     9e0:	d029      	beq.n	a36 <CONFIG_ISR_STACK_SIZE+0x236>
     9e2:	ea94 0f05 	teq	r4, r5
     9e6:	bf08      	it	eq
     9e8:	ea90 0f02 	teqeq	r0, r2
     9ec:	d005      	beq.n	9fa <CONFIG_ISR_STACK_SIZE+0x1fa>
     9ee:	ea54 0c00 	orrs.w	ip, r4, r0
     9f2:	bf04      	itt	eq
     9f4:	4619      	moveq	r1, r3
     9f6:	4610      	moveq	r0, r2
     9f8:	bd30      	pop	{r4, r5, pc}
     9fa:	ea91 0f03 	teq	r1, r3
     9fe:	bf1e      	ittt	ne
     a00:	2100      	movne	r1, #0
     a02:	2000      	movne	r0, #0
     a04:	bd30      	popne	{r4, r5, pc}
     a06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     a0a:	d105      	bne.n	a18 <CONFIG_ISR_STACK_SIZE+0x218>
     a0c:	0040      	lsls	r0, r0, #1
     a0e:	4149      	adcs	r1, r1
     a10:	bf28      	it	cs
     a12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     a16:	bd30      	pop	{r4, r5, pc}
     a18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     a1c:	bf3c      	itt	cc
     a1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     a22:	bd30      	popcc	{r4, r5, pc}
     a24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     a28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     a2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     a30:	f04f 0000 	mov.w	r0, #0
     a34:	bd30      	pop	{r4, r5, pc}
     a36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     a3a:	bf1a      	itte	ne
     a3c:	4619      	movne	r1, r3
     a3e:	4610      	movne	r0, r2
     a40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     a44:	bf1c      	itt	ne
     a46:	460b      	movne	r3, r1
     a48:	4602      	movne	r2, r0
     a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     a4e:	bf06      	itte	eq
     a50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     a54:	ea91 0f03 	teqeq	r1, r3
     a58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     a5c:	bd30      	pop	{r4, r5, pc}
     a5e:	bf00      	nop

00000a60 <__aeabi_ui2d>:
     a60:	f090 0f00 	teq	r0, #0
     a64:	bf04      	itt	eq
     a66:	2100      	moveq	r1, #0
     a68:	4770      	bxeq	lr
     a6a:	b530      	push	{r4, r5, lr}
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     a6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a70:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a74:	f04f 0500 	mov.w	r5, #0
     a78:	f04f 0100 	mov.w	r1, #0
     a7c:	e750      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     a7e:	bf00      	nop

00000a80 <__aeabi_i2d>:
     a80:	f090 0f00 	teq	r0, #0
     a84:	bf04      	itt	eq
     a86:	2100      	moveq	r1, #0
     a88:	4770      	bxeq	lr
     a8a:	b530      	push	{r4, r5, lr}
     a8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a90:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     a98:	bf48      	it	mi
     a9a:	4240      	negmi	r0, r0
     a9c:	f04f 0100 	mov.w	r1, #0
     aa0:	e73e      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     aa2:	bf00      	nop

00000aa4 <__aeabi_f2d>:
     aa4:	0042      	lsls	r2, r0, #1
     aa6:	ea4f 01e2 	mov.w	r1, r2, asr #3
     aaa:	ea4f 0131 	mov.w	r1, r1, rrx
     aae:	ea4f 7002 	mov.w	r0, r2, lsl #28
     ab2:	bf1f      	itttt	ne
     ab4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     ab8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     abc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     ac0:	4770      	bxne	lr
     ac2:	f092 0f00 	teq	r2, #0
     ac6:	bf14      	ite	ne
     ac8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     acc:	4770      	bxeq	lr
     ace:	b530      	push	{r4, r5, lr}
     ad0:	f44f 7460 	mov.w	r4, #896	; 0x380
     ad4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     ad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     adc:	e720      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     ade:	bf00      	nop

00000ae0 <__aeabi_ul2d>:
     ae0:	ea50 0201 	orrs.w	r2, r0, r1
     ae4:	bf08      	it	eq
     ae6:	4770      	bxeq	lr
     ae8:	b530      	push	{r4, r5, lr}
     aea:	f04f 0500 	mov.w	r5, #0
     aee:	e00a      	b.n	b06 <__aeabi_l2d+0x16>

00000af0 <__aeabi_l2d>:
     af0:	ea50 0201 	orrs.w	r2, r0, r1
     af4:	bf08      	it	eq
     af6:	4770      	bxeq	lr
     af8:	b530      	push	{r4, r5, lr}
     afa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     afe:	d502      	bpl.n	b06 <__aeabi_l2d+0x16>
     b00:	4240      	negs	r0, r0
     b02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     b06:	f44f 6480 	mov.w	r4, #1024	; 0x400
     b0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
     b0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     b12:	f43f aedc 	beq.w	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b16:	f04f 0203 	mov.w	r2, #3
     b1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b1e:	bf18      	it	ne
     b20:	3203      	addne	r2, #3
     b22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b26:	bf18      	it	ne
     b28:	3203      	addne	r2, #3
     b2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     b2e:	f1c2 0320 	rsb	r3, r2, #32
     b32:	fa00 fc03 	lsl.w	ip, r0, r3
     b36:	fa20 f002 	lsr.w	r0, r0, r2
     b3a:	fa01 fe03 	lsl.w	lr, r1, r3
     b3e:	ea40 000e 	orr.w	r0, r0, lr
     b42:	fa21 f102 	lsr.w	r1, r1, r2
     b46:	4414      	add	r4, r2
     b48:	e6c1      	b.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b4a:	bf00      	nop

00000b4c <__aeabi_dmul>:
     b4c:	b570      	push	{r4, r5, r6, lr}
     b4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     b52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     b56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     b5a:	bf1d      	ittte	ne
     b5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     b60:	ea94 0f0c 	teqne	r4, ip
     b64:	ea95 0f0c 	teqne	r5, ip
     b68:	f000 f8de 	bleq	d28 <__aeabi_dmul+0x1dc>
     b6c:	442c      	add	r4, r5
     b6e:	ea81 0603 	eor.w	r6, r1, r3
     b72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     b76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     b7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     b7e:	bf18      	it	ne
     b80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     b84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     b8c:	d038      	beq.n	c00 <__aeabi_dmul+0xb4>
     b8e:	fba0 ce02 	umull	ip, lr, r0, r2
     b92:	f04f 0500 	mov.w	r5, #0
     b96:	fbe1 e502 	umlal	lr, r5, r1, r2
     b9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     b9e:	fbe0 e503 	umlal	lr, r5, r0, r3
	(void)_copy(s, sizeof(t), t, sizeof(t));
     ba2:	f04f 0600 	mov.w	r6, #0
     ba6:	fbe1 5603 	umlal	r5, r6, r1, r3
     baa:	f09c 0f00 	teq	ip, #0
	for (i = Nr - 1; i > 0; --i) {
     bae:	bf18      	it	ne
     bb0:	f04e 0e01 	orrne.w	lr, lr, #1
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     bb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     bb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     bbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     bc0:	d204      	bcs.n	bcc <__aeabi_dmul+0x80>
     bc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     bc6:	416d      	adcs	r5, r5
     bc8:	eb46 0606 	adc.w	r6, r6, r6
     bcc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     bd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     bd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     bd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     bdc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     be0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     be4:	bf88      	it	hi
     be6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     bea:	d81e      	bhi.n	c2a <__aeabi_dmul+0xde>
     bec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     bf0:	bf08      	it	eq
     bf2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     bf6:	f150 0000 	adcs.w	r0, r0, #0
     bfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     bfe:	bd70      	pop	{r4, r5, r6, pc}
     c00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     c04:	ea46 0101 	orr.w	r1, r6, r1
     c08:	ea40 0002 	orr.w	r0, r0, r2
     c0c:	ea81 0103 	eor.w	r1, r1, r3
     c10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     c14:	bfc2      	ittt	gt
     c16:	ebd4 050c 	rsbsgt	r5, r4, ip
     c1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     c1e:	bd70      	popgt	{r4, r5, r6, pc}
     c20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     c24:	f04f 0e00 	mov.w	lr, #0
     c28:	3c01      	subs	r4, #1
     c2a:	f300 80ab 	bgt.w	d84 <__aeabi_dmul+0x238>
     c2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
     c32:	bfde      	ittt	le
	(void)_copy(s, sizeof(t), t, sizeof(t));
     c34:	2000      	movle	r0, #0
     c36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     c3a:	bd70      	pople	{r4, r5, r6, pc}
     c3c:	f1c4 0400 	rsb	r4, r4, #0
     c40:	3c20      	subs	r4, #32
	for (i = 0; i < (Nb*Nk); ++i) {
     c42:	da35      	bge.n	cb0 <__aeabi_dmul+0x164>
     c44:	340c      	adds	r4, #12
     c46:	dc1b      	bgt.n	c80 <__aeabi_dmul+0x134>
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     c48:	f104 0414 	add.w	r4, r4, #20
     c4c:	f1c4 0520 	rsb	r5, r4, #32
     c50:	fa00 f305 	lsl.w	r3, r0, r5
     c54:	fa20 f004 	lsr.w	r0, r0, r4
     c58:	fa01 f205 	lsl.w	r2, r1, r5
     c5c:	ea40 0002 	orr.w	r0, r0, r2
     c60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     c64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     c68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     c6c:	fa21 f604 	lsr.w	r6, r1, r4
     c70:	eb42 0106 	adc.w	r1, r2, r6
     c74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     c78:	bf08      	it	eq
     c7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     c7e:	bd70      	pop	{r4, r5, r6, pc}
     c80:	f1c4 040c 	rsb	r4, r4, #12
     c84:	f1c4 0520 	rsb	r5, r4, #32
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     c88:	fa00 f304 	lsl.w	r3, r0, r4
     c8c:	fa20 f005 	lsr.w	r0, r0, r5
     c90:	fa01 f204 	lsl.w	r2, r1, r4
     c94:	ea40 0002 	orr.w	r0, r0, r2
     c98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     c9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     ca0:	f141 0100 	adc.w	r1, r1, #0
     ca4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     ca8:	bf08      	it	eq
     caa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     cae:	bd70      	pop	{r4, r5, r6, pc}
     cb0:	f1c4 0520 	rsb	r5, r4, #32
     cb4:	fa00 f205 	lsl.w	r2, r0, r5
     cb8:	ea4e 0e02 	orr.w	lr, lr, r2
     cbc:	fa20 f304 	lsr.w	r3, r0, r4
     cc0:	fa01 f205 	lsl.w	r2, r1, r5
     cc4:	ea43 0302 	orr.w	r3, r3, r2
	(void)_copy(s, sizeof(t), t, sizeof(t));
     cc8:	fa21 f004 	lsr.w	r0, r1, r4
     ccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     cd0:	fa21 f204 	lsr.w	r2, r1, r4
     cd4:	ea20 0002 	bic.w	r0, r0, r2
		s[i] = inv_sbox[s[i]];
     cd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     cdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     ce0:	bf08      	it	eq
	for (i = 0; i < (Nb*Nk); ++i) {
     ce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     ce6:	bd70      	pop	{r4, r5, r6, pc}
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     ce8:	f094 0f00 	teq	r4, #0
     cec:	d10f      	bne.n	d0e <__aeabi_dmul+0x1c2>
     cee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     cf2:	0040      	lsls	r0, r0, #1
     cf4:	eb41 0101 	adc.w	r1, r1, r1
     cf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     cfc:	bf08      	it	eq
     cfe:	3c01      	subeq	r4, #1
     d00:	d0f7      	beq.n	cf2 <__aeabi_dmul+0x1a6>
     d02:	ea41 0106 	orr.w	r1, r1, r6
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     d06:	f095 0f00 	teq	r5, #0
     d0a:	bf18      	it	ne
     d0c:	4770      	bxne	lr
     d0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     d12:	0052      	lsls	r2, r2, #1
     d14:	eb43 0303 	adc.w	r3, r3, r3
     d18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     d1c:	bf08      	it	eq
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     d1e:	3d01      	subeq	r5, #1
     d20:	d0f7      	beq.n	d12 <__aeabi_dmul+0x1c6>
     d22:	ea43 0306 	orr.w	r3, r3, r6
     d26:	4770      	bx	lr
     d28:	ea94 0f0c 	teq	r4, ip
     d2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     d30:	bf18      	it	ne
     d32:	ea95 0f0c 	teqne	r5, ip
     d36:	d00c      	beq.n	d52 <__aeabi_dmul+0x206>
     d38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     d3c:	bf18      	it	ne
     d3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d42:	d1d1      	bne.n	ce8 <__aeabi_dmul+0x19c>
     d44:	ea81 0103 	eor.w	r1, r1, r3
     d48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d4c:	f04f 0000 	mov.w	r0, #0
     d50:	bd70      	pop	{r4, r5, r6, pc}
     d52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     d56:	bf06      	itte	eq
     d58:	4610      	moveq	r0, r2
     d5a:	4619      	moveq	r1, r3
     d5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d60:	d019      	beq.n	d96 <__aeabi_dmul+0x24a>
     d62:	ea94 0f0c 	teq	r4, ip
     d66:	d102      	bne.n	d6e <__aeabi_dmul+0x222>
     d68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     d6c:	d113      	bne.n	d96 <__aeabi_dmul+0x24a>
     d6e:	ea95 0f0c 	teq	r5, ip
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     d72:	d105      	bne.n	d80 <__aeabi_dmul+0x234>
     d74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     d78:	bf1c      	itt	ne
     d7a:	4610      	movne	r0, r2
     d7c:	4619      	movne	r1, r3
     d7e:	d10a      	bne.n	d96 <__aeabi_dmul+0x24a>
     d80:	ea81 0103 	eor.w	r1, r1, r3
     d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     d8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     d90:	f04f 0000 	mov.w	r0, #0
     d94:	bd70      	pop	{r4, r5, r6, pc}
     d96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     d9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     d9e:	bd70      	pop	{r4, r5, r6, pc}

00000da0 <__aeabi_ddiv>:
     da0:	b570      	push	{r4, r5, r6, lr}
     da2:	f04f 0cff 	mov.w	ip, #255	; 0xff
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     da6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     daa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     dae:	bf1d      	ittte	ne
     db0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     db4:	ea94 0f0c 	teqne	r4, ip
     db8:	ea95 0f0c 	teqne	r5, ip
     dbc:	f000 f8a7 	bleq	f0e <__aeabi_ddiv+0x16e>

	inv_shift_rows(state);
	inv_sub_bytes(state);
	add_round_key(state, s->words);

	(void)_copy(out, sizeof(state), state, sizeof(state));
     dc0:	eba4 0405 	sub.w	r4, r4, r5
     dc4:	ea81 0e03 	eor.w	lr, r1, r3
     dc8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     dcc:	ea4f 3101 	mov.w	r1, r1, lsl #12

	/*zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
     dd0:	f000 8088 	beq.w	ee4 <__aeabi_ddiv+0x144>
     dd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
     dd8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000


	return TC_CRYPTO_SUCCESS;
}
     ddc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     de0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
		return TC_CRYPTO_FAIL;
     de4:	ea4f 2202 	mov.w	r2, r2, lsl #8
		return TC_CRYPTO_FAIL;
     de8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
		return TC_CRYPTO_FAIL;
     dec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     df0:	ea4f 2600 	mov.w	r6, r0, lsl #8
     df4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     df8:	429d      	cmp	r5, r3
     dfa:	bf08      	it	eq
     dfc:	4296      	cmpeq	r6, r2
     dfe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     e02:	f504 7440 	add.w	r4, r4, #768	; 0x300
     e06:	d202      	bcs.n	e0e <__aeabi_ddiv+0x6e>
     e08:	085b      	lsrs	r3, r3, #1
     e0a:	ea4f 0232 	mov.w	r2, r2, rrx
     e0e:	1ab6      	subs	r6, r6, r2
     e10:	eb65 0503 	sbc.w	r5, r5, r3
     e14:	085b      	lsrs	r3, r3, #1
     e16:	ea4f 0232 	mov.w	r2, r2, rrx
     e1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     e1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     e22:	ebb6 0e02 	subs.w	lr, r6, r2
     e26:	eb75 0e03 	sbcs.w	lr, r5, r3
     e2a:	bf22      	ittt	cs
     e2c:	1ab6      	subcs	r6, r6, r2
     e2e:	4675      	movcs	r5, lr
     e30:	ea40 000c 	orrcs.w	r0, r0, ip
     e34:	085b      	lsrs	r3, r3, #1
     e36:	ea4f 0232 	mov.w	r2, r2, rrx
     e3a:	ebb6 0e02 	subs.w	lr, r6, r2
     e3e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e42:	bf22      	ittt	cs
     e44:	1ab6      	subcs	r6, r6, r2
     e46:	4675      	movcs	r5, lr
     e48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     e4c:	085b      	lsrs	r3, r3, #1
     e4e:	ea4f 0232 	mov.w	r2, r2, rrx
     e52:	ebb6 0e02 	subs.w	lr, r6, r2
     e56:	eb75 0e03 	sbcs.w	lr, r5, r3
     e5a:	bf22      	ittt	cs
     e5c:	1ab6      	subcs	r6, r6, r2
     e5e:	4675      	movcs	r5, lr
     e60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     e64:	085b      	lsrs	r3, r3, #1
     e66:	ea4f 0232 	mov.w	r2, r2, rrx
     e6a:	ebb6 0e02 	subs.w	lr, r6, r2
     e6e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e72:	bf22      	ittt	cs
     e74:	1ab6      	subcs	r6, r6, r2
     e76:	4675      	movcs	r5, lr
     e78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     e7c:	ea55 0e06 	orrs.w	lr, r5, r6
     e80:	d018      	beq.n	eb4 <__aeabi_ddiv+0x114>
     e82:	ea4f 1505 	mov.w	r5, r5, lsl #4
     e86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     e8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
     e8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     e92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     e96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     e9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     e9e:	d1c0      	bne.n	e22 <__aeabi_ddiv+0x82>
     ea0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     ea4:	d10b      	bne.n	ebe <__aeabi_ddiv+0x11e>
     ea6:	ea41 0100 	orr.w	r1, r1, r0
     eaa:	f04f 0000 	mov.w	r0, #0
     eae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     eb2:	e7b6      	b.n	e22 <__aeabi_ddiv+0x82>
     eb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     eb8:	bf04      	itt	eq
     eba:	4301      	orreq	r1, r0
     ebc:	2000      	moveq	r0, #0
     ebe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     ec2:	bf88      	it	hi
     ec4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     ec8:	f63f aeaf 	bhi.w	c2a <__aeabi_dmul+0xde>
     ecc:	ebb5 0c03 	subs.w	ip, r5, r3
     ed0:	bf04      	itt	eq
     ed2:	ebb6 0c02 	subseq.w	ip, r6, r2
     ed6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     eda:	f150 0000 	adcs.w	r0, r0, #0
     ede:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     ee2:	bd70      	pop	{r4, r5, r6, pc}
     ee4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     ee8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     eec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     ef0:	bfc2      	ittt	gt
     ef2:	ebd4 050c 	rsbsgt	r5, r4, ip
     ef6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     efa:	bd70      	popgt	{r4, r5, r6, pc}
     efc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     f00:	f04f 0e00 	mov.w	lr, #0
     f04:	3c01      	subs	r4, #1
     f06:	e690      	b.n	c2a <__aeabi_dmul+0xde>
     f08:	ea45 0e06 	orr.w	lr, r5, r6
     f0c:	e68d      	b.n	c2a <__aeabi_dmul+0xde>
     f0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     f12:	ea94 0f0c 	teq	r4, ip
     f16:	bf08      	it	eq
     f18:	ea95 0f0c 	teqeq	r5, ip
     f1c:	f43f af3b 	beq.w	d96 <__aeabi_dmul+0x24a>
     f20:	ea94 0f0c 	teq	r4, ip
     f24:	d10a      	bne.n	f3c <__aeabi_ddiv+0x19c>
     f26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     f2a:	f47f af34 	bne.w	d96 <__aeabi_dmul+0x24a>
     f2e:	ea95 0f0c 	teq	r5, ip
     f32:	f47f af25 	bne.w	d80 <__aeabi_dmul+0x234>
     f36:	4610      	mov	r0, r2
     f38:	4619      	mov	r1, r3
     f3a:	e72c      	b.n	d96 <__aeabi_dmul+0x24a>
     f3c:	ea95 0f0c 	teq	r5, ip
     f40:	d106      	bne.n	f50 <__aeabi_ddiv+0x1b0>
     f42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     f46:	f43f aefd 	beq.w	d44 <__aeabi_dmul+0x1f8>
     f4a:	4610      	mov	r0, r2
     f4c:	4619      	mov	r1, r3
     f4e:	e722      	b.n	d96 <__aeabi_dmul+0x24a>
     f50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     f54:	bf18      	it	ne
     f56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     f5a:	f47f aec5 	bne.w	ce8 <__aeabi_dmul+0x19c>
     f5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     f62:	f47f af0d 	bne.w	d80 <__aeabi_dmul+0x234>
     f66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     f6a:	f47f aeeb 	bne.w	d44 <__aeabi_dmul+0x1f8>
     f6e:	e712      	b.n	d96 <__aeabi_dmul+0x24a>

00000f70 <__gedf2>:
     f70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     f74:	e006      	b.n	f84 <__cmpdf2+0x4>
     f76:	bf00      	nop

00000f78 <__ledf2>:
     f78:	f04f 0c01 	mov.w	ip, #1
     f7c:	e002      	b.n	f84 <__cmpdf2+0x4>
     f7e:	bf00      	nop

00000f80 <__cmpdf2>:
     f80:	f04f 0c01 	mov.w	ip, #1
     f84:	f84d cd04 	str.w	ip, [sp, #-4]!
     f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     f90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     f94:	bf18      	it	ne
     f96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     f9a:	d01b      	beq.n	fd4 <__cmpdf2+0x54>
     f9c:	b001      	add	sp, #4
     f9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     fa2:	bf0c      	ite	eq
     fa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     fa8:	ea91 0f03 	teqne	r1, r3
     fac:	bf02      	ittt	eq
     fae:	ea90 0f02 	teqeq	r0, r2
     fb2:	2000      	moveq	r0, #0
     fb4:	4770      	bxeq	lr
     fb6:	f110 0f00 	cmn.w	r0, #0
     fba:	ea91 0f03 	teq	r1, r3
     fbe:	bf58      	it	pl
     fc0:	4299      	cmppl	r1, r3
     fc2:	bf08      	it	eq
     fc4:	4290      	cmpeq	r0, r2
     fc6:	bf2c      	ite	cs
     fc8:	17d8      	asrcs	r0, r3, #31
     fca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     fce:	f040 0001 	orr.w	r0, r0, #1
     fd2:	4770      	bx	lr
     fd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fdc:	d102      	bne.n	fe4 <__cmpdf2+0x64>
     fde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     fe2:	d107      	bne.n	ff4 <__cmpdf2+0x74>
     fe4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fec:	d1d6      	bne.n	f9c <__cmpdf2+0x1c>
     fee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     ff2:	d0d3      	beq.n	f9c <__cmpdf2+0x1c>
     ff4:	f85d 0b04 	ldr.w	r0, [sp], #4
     ff8:	4770      	bx	lr
     ffa:	bf00      	nop

00000ffc <__aeabi_cdrcmple>:
     ffc:	4684      	mov	ip, r0
     ffe:	4610      	mov	r0, r2
    1000:	4662      	mov	r2, ip
    1002:	468c      	mov	ip, r1
    1004:	4619      	mov	r1, r3
    1006:	4663      	mov	r3, ip
    1008:	e000      	b.n	100c <__aeabi_cdcmpeq>
    100a:	bf00      	nop

0000100c <__aeabi_cdcmpeq>:
    100c:	b501      	push	{r0, lr}
    100e:	f7ff ffb7 	bl	f80 <__cmpdf2>
    1012:	2800      	cmp	r0, #0
    1014:	bf48      	it	mi
    1016:	f110 0f00 	cmnmi.w	r0, #0
    101a:	bd01      	pop	{r0, pc}

0000101c <__aeabi_dcmpeq>:
    101c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1020:	f7ff fff4 	bl	100c <__aeabi_cdcmpeq>
    1024:	bf0c      	ite	eq
    1026:	2001      	moveq	r0, #1
    1028:	2000      	movne	r0, #0
    102a:	f85d fb08 	ldr.w	pc, [sp], #8
    102e:	bf00      	nop

00001030 <__aeabi_dcmplt>:
    1030:	f84d ed08 	str.w	lr, [sp, #-8]!
    1034:	f7ff ffea 	bl	100c <__aeabi_cdcmpeq>
    1038:	bf34      	ite	cc
    103a:	2001      	movcc	r0, #1
    103c:	2000      	movcs	r0, #0
    103e:	f85d fb08 	ldr.w	pc, [sp], #8
    1042:	bf00      	nop

00001044 <__aeabi_dcmple>:
    1044:	f84d ed08 	str.w	lr, [sp, #-8]!
    1048:	f7ff ffe0 	bl	100c <__aeabi_cdcmpeq>
    104c:	bf94      	ite	ls
    104e:	2001      	movls	r0, #1
    1050:	2000      	movhi	r0, #0
    1052:	f85d fb08 	ldr.w	pc, [sp], #8
    1056:	bf00      	nop

00001058 <__aeabi_dcmpge>:
    1058:	f84d ed08 	str.w	lr, [sp, #-8]!
    105c:	f7ff ffce 	bl	ffc <__aeabi_cdrcmple>
    1060:	bf94      	ite	ls
    1062:	2001      	movls	r0, #1
    1064:	2000      	movhi	r0, #0
    1066:	f85d fb08 	ldr.w	pc, [sp], #8
    106a:	bf00      	nop

0000106c <__aeabi_dcmpgt>:
    106c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1070:	f7ff ffc4 	bl	ffc <__aeabi_cdrcmple>
    1074:	bf34      	ite	cc
    1076:	2001      	movcc	r0, #1
    1078:	2000      	movcs	r0, #0
    107a:	f85d fb08 	ldr.w	pc, [sp], #8
    107e:	bf00      	nop

00001080 <__aeabi_dcmpun>:
    1080:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1084:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1088:	d102      	bne.n	1090 <__aeabi_dcmpun+0x10>
    108a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    108e:	d10a      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    1090:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1098:	d102      	bne.n	10a0 <__aeabi_dcmpun+0x20>
    109a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    109e:	d102      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    10a0:	f04f 0000 	mov.w	r0, #0
    10a4:	4770      	bx	lr
    10a6:	f04f 0001 	mov.w	r0, #1
    10aa:	4770      	bx	lr

000010ac <__aeabi_d2iz>:
    10ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
    10b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    10b4:	d215      	bcs.n	10e2 <__aeabi_d2iz+0x36>
    10b6:	d511      	bpl.n	10dc <__aeabi_d2iz+0x30>
    10b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    10bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    10c0:	d912      	bls.n	10e8 <__aeabi_d2iz+0x3c>
    10c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    10c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    10ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    10ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    10d2:	fa23 f002 	lsr.w	r0, r3, r2
    10d6:	bf18      	it	ne
    10d8:	4240      	negne	r0, r0
    10da:	4770      	bx	lr
    10dc:	f04f 0000 	mov.w	r0, #0
    10e0:	4770      	bx	lr
    10e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    10e6:	d105      	bne.n	10f4 <__aeabi_d2iz+0x48>
    10e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    10ec:	bf08      	it	eq
    10ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    10f2:	4770      	bx	lr
    10f4:	f04f 0000 	mov.w	r0, #0
    10f8:	4770      	bx	lr
    10fa:	bf00      	nop

000010fc <__aeabi_uldivmod>:
    10fc:	b953      	cbnz	r3, 1114 <__aeabi_uldivmod+0x18>
    10fe:	b94a      	cbnz	r2, 1114 <__aeabi_uldivmod+0x18>
    1100:	2900      	cmp	r1, #0
    1102:	bf08      	it	eq
    1104:	2800      	cmpeq	r0, #0
    1106:	bf1c      	itt	ne
    1108:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    110c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1110:	f000 b98e 	b.w	1430 <__aeabi_idiv0>
    1114:	f1ad 0c08 	sub.w	ip, sp, #8
    1118:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    111c:	f000 f81a 	bl	1154 <__udivmoddi4>
    1120:	f8dd e004 	ldr.w	lr, [sp, #4]
    1124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1128:	b004      	add	sp, #16
    112a:	4770      	bx	lr

0000112c <__popcountsi2>:
    112c:	0843      	lsrs	r3, r0, #1
    112e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
    1132:	1ac0      	subs	r0, r0, r3
    1134:	0883      	lsrs	r3, r0, #2
    1136:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
    113a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
    113e:	4418      	add	r0, r3
    1140:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    1144:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
    1148:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    114c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
    1150:	0e00      	lsrs	r0, r0, #24
    1152:	4770      	bx	lr

00001154 <__udivmoddi4>:
    1154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1158:	468c      	mov	ip, r1
    115a:	460d      	mov	r5, r1
    115c:	4604      	mov	r4, r0
    115e:	9e08      	ldr	r6, [sp, #32]
    1160:	2b00      	cmp	r3, #0
    1162:	d151      	bne.n	1208 <__udivmoddi4+0xb4>
    1164:	428a      	cmp	r2, r1
    1166:	4617      	mov	r7, r2
    1168:	d96d      	bls.n	1246 <__udivmoddi4+0xf2>
    116a:	fab2 fe82 	clz	lr, r2
    116e:	f1be 0f00 	cmp.w	lr, #0
    1172:	d00b      	beq.n	118c <__udivmoddi4+0x38>
    1174:	f1ce 0c20 	rsb	ip, lr, #32
    1178:	fa01 f50e 	lsl.w	r5, r1, lr
    117c:	fa20 fc0c 	lsr.w	ip, r0, ip
    1180:	fa02 f70e 	lsl.w	r7, r2, lr
    1184:	ea4c 0c05 	orr.w	ip, ip, r5
    1188:	fa00 f40e 	lsl.w	r4, r0, lr
    118c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    1190:	0c25      	lsrs	r5, r4, #16
    1192:	fbbc f8fa 	udiv	r8, ip, sl
    1196:	fa1f f987 	uxth.w	r9, r7
    119a:	fb0a cc18 	mls	ip, sl, r8, ip
    119e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    11a2:	fb08 f309 	mul.w	r3, r8, r9
    11a6:	42ab      	cmp	r3, r5
    11a8:	d90a      	bls.n	11c0 <__udivmoddi4+0x6c>
    11aa:	19ed      	adds	r5, r5, r7
    11ac:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    11b0:	f080 8123 	bcs.w	13fa <__udivmoddi4+0x2a6>
    11b4:	42ab      	cmp	r3, r5
    11b6:	f240 8120 	bls.w	13fa <__udivmoddi4+0x2a6>
    11ba:	f1a8 0802 	sub.w	r8, r8, #2
    11be:	443d      	add	r5, r7
    11c0:	1aed      	subs	r5, r5, r3
    11c2:	b2a4      	uxth	r4, r4
    11c4:	fbb5 f0fa 	udiv	r0, r5, sl
    11c8:	fb0a 5510 	mls	r5, sl, r0, r5
    11cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    11d0:	fb00 f909 	mul.w	r9, r0, r9
    11d4:	45a1      	cmp	r9, r4
    11d6:	d909      	bls.n	11ec <__udivmoddi4+0x98>
    11d8:	19e4      	adds	r4, r4, r7
    11da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    11de:	f080 810a 	bcs.w	13f6 <__udivmoddi4+0x2a2>
    11e2:	45a1      	cmp	r9, r4
    11e4:	f240 8107 	bls.w	13f6 <__udivmoddi4+0x2a2>
    11e8:	3802      	subs	r0, #2
    11ea:	443c      	add	r4, r7
    11ec:	eba4 0409 	sub.w	r4, r4, r9
    11f0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    11f4:	2100      	movs	r1, #0
    11f6:	2e00      	cmp	r6, #0
    11f8:	d061      	beq.n	12be <__udivmoddi4+0x16a>
    11fa:	fa24 f40e 	lsr.w	r4, r4, lr
    11fe:	2300      	movs	r3, #0
    1200:	6034      	str	r4, [r6, #0]
    1202:	6073      	str	r3, [r6, #4]
    1204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1208:	428b      	cmp	r3, r1
    120a:	d907      	bls.n	121c <__udivmoddi4+0xc8>
    120c:	2e00      	cmp	r6, #0
    120e:	d054      	beq.n	12ba <__udivmoddi4+0x166>
    1210:	2100      	movs	r1, #0
    1212:	e886 0021 	stmia.w	r6, {r0, r5}
    1216:	4608      	mov	r0, r1
    1218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    121c:	fab3 f183 	clz	r1, r3
    1220:	2900      	cmp	r1, #0
    1222:	f040 808e 	bne.w	1342 <__udivmoddi4+0x1ee>
    1226:	42ab      	cmp	r3, r5
    1228:	d302      	bcc.n	1230 <__udivmoddi4+0xdc>
    122a:	4282      	cmp	r2, r0
    122c:	f200 80fa 	bhi.w	1424 <__udivmoddi4+0x2d0>
    1230:	1a84      	subs	r4, r0, r2
    1232:	eb65 0503 	sbc.w	r5, r5, r3
    1236:	2001      	movs	r0, #1
    1238:	46ac      	mov	ip, r5
    123a:	2e00      	cmp	r6, #0
    123c:	d03f      	beq.n	12be <__udivmoddi4+0x16a>
    123e:	e886 1010 	stmia.w	r6, {r4, ip}
    1242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1246:	b912      	cbnz	r2, 124e <__udivmoddi4+0xfa>
    1248:	2701      	movs	r7, #1
    124a:	fbb7 f7f2 	udiv	r7, r7, r2
    124e:	fab7 fe87 	clz	lr, r7
    1252:	f1be 0f00 	cmp.w	lr, #0
    1256:	d134      	bne.n	12c2 <__udivmoddi4+0x16e>
    1258:	1beb      	subs	r3, r5, r7
    125a:	0c3a      	lsrs	r2, r7, #16
    125c:	fa1f fc87 	uxth.w	ip, r7
    1260:	2101      	movs	r1, #1
    1262:	fbb3 f8f2 	udiv	r8, r3, r2
    1266:	0c25      	lsrs	r5, r4, #16
    1268:	fb02 3318 	mls	r3, r2, r8, r3
    126c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1270:	fb0c f308 	mul.w	r3, ip, r8
    1274:	42ab      	cmp	r3, r5
    1276:	d907      	bls.n	1288 <__udivmoddi4+0x134>
    1278:	19ed      	adds	r5, r5, r7
    127a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    127e:	d202      	bcs.n	1286 <__udivmoddi4+0x132>
    1280:	42ab      	cmp	r3, r5
    1282:	f200 80d1 	bhi.w	1428 <__udivmoddi4+0x2d4>
    1286:	4680      	mov	r8, r0
    1288:	1aed      	subs	r5, r5, r3
    128a:	b2a3      	uxth	r3, r4
    128c:	fbb5 f0f2 	udiv	r0, r5, r2
    1290:	fb02 5510 	mls	r5, r2, r0, r5
    1294:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    1298:	fb0c fc00 	mul.w	ip, ip, r0
    129c:	45a4      	cmp	ip, r4
    129e:	d907      	bls.n	12b0 <__udivmoddi4+0x15c>
    12a0:	19e4      	adds	r4, r4, r7
    12a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    12a6:	d202      	bcs.n	12ae <__udivmoddi4+0x15a>
    12a8:	45a4      	cmp	ip, r4
    12aa:	f200 80b8 	bhi.w	141e <__udivmoddi4+0x2ca>
    12ae:	4618      	mov	r0, r3
    12b0:	eba4 040c 	sub.w	r4, r4, ip
    12b4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    12b8:	e79d      	b.n	11f6 <__udivmoddi4+0xa2>
    12ba:	4631      	mov	r1, r6
    12bc:	4630      	mov	r0, r6
    12be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12c2:	f1ce 0420 	rsb	r4, lr, #32
    12c6:	fa05 f30e 	lsl.w	r3, r5, lr
    12ca:	fa07 f70e 	lsl.w	r7, r7, lr
    12ce:	fa20 f804 	lsr.w	r8, r0, r4
    12d2:	0c3a      	lsrs	r2, r7, #16
    12d4:	fa25 f404 	lsr.w	r4, r5, r4
    12d8:	ea48 0803 	orr.w	r8, r8, r3
    12dc:	fbb4 f1f2 	udiv	r1, r4, r2
    12e0:	ea4f 4518 	mov.w	r5, r8, lsr #16
    12e4:	fb02 4411 	mls	r4, r2, r1, r4
    12e8:	fa1f fc87 	uxth.w	ip, r7
    12ec:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    12f0:	fb01 f30c 	mul.w	r3, r1, ip
    12f4:	42ab      	cmp	r3, r5
    12f6:	fa00 f40e 	lsl.w	r4, r0, lr
    12fa:	d909      	bls.n	1310 <__udivmoddi4+0x1bc>
    12fc:	19ed      	adds	r5, r5, r7
    12fe:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
    1302:	f080 808a 	bcs.w	141a <__udivmoddi4+0x2c6>
    1306:	42ab      	cmp	r3, r5
    1308:	f240 8087 	bls.w	141a <__udivmoddi4+0x2c6>
    130c:	3902      	subs	r1, #2
    130e:	443d      	add	r5, r7
    1310:	1aeb      	subs	r3, r5, r3
    1312:	fa1f f588 	uxth.w	r5, r8
    1316:	fbb3 f0f2 	udiv	r0, r3, r2
    131a:	fb02 3310 	mls	r3, r2, r0, r3
    131e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1322:	fb00 f30c 	mul.w	r3, r0, ip
    1326:	42ab      	cmp	r3, r5
    1328:	d907      	bls.n	133a <__udivmoddi4+0x1e6>
    132a:	19ed      	adds	r5, r5, r7
    132c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    1330:	d26f      	bcs.n	1412 <__udivmoddi4+0x2be>
    1332:	42ab      	cmp	r3, r5
    1334:	d96d      	bls.n	1412 <__udivmoddi4+0x2be>
    1336:	3802      	subs	r0, #2
    1338:	443d      	add	r5, r7
    133a:	1aeb      	subs	r3, r5, r3
    133c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    1340:	e78f      	b.n	1262 <__udivmoddi4+0x10e>
    1342:	f1c1 0720 	rsb	r7, r1, #32
    1346:	fa22 f807 	lsr.w	r8, r2, r7
    134a:	408b      	lsls	r3, r1
    134c:	fa05 f401 	lsl.w	r4, r5, r1
    1350:	ea48 0303 	orr.w	r3, r8, r3
    1354:	fa20 fe07 	lsr.w	lr, r0, r7
    1358:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    135c:	40fd      	lsrs	r5, r7
    135e:	ea4e 0e04 	orr.w	lr, lr, r4
    1362:	fbb5 f9fc 	udiv	r9, r5, ip
    1366:	ea4f 441e 	mov.w	r4, lr, lsr #16
    136a:	fb0c 5519 	mls	r5, ip, r9, r5
    136e:	fa1f f883 	uxth.w	r8, r3
    1372:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    1376:	fb09 f408 	mul.w	r4, r9, r8
    137a:	42ac      	cmp	r4, r5
    137c:	fa02 f201 	lsl.w	r2, r2, r1
    1380:	fa00 fa01 	lsl.w	sl, r0, r1
    1384:	d908      	bls.n	1398 <__udivmoddi4+0x244>
    1386:	18ed      	adds	r5, r5, r3
    1388:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    138c:	d243      	bcs.n	1416 <__udivmoddi4+0x2c2>
    138e:	42ac      	cmp	r4, r5
    1390:	d941      	bls.n	1416 <__udivmoddi4+0x2c2>
    1392:	f1a9 0902 	sub.w	r9, r9, #2
    1396:	441d      	add	r5, r3
    1398:	1b2d      	subs	r5, r5, r4
    139a:	fa1f fe8e 	uxth.w	lr, lr
    139e:	fbb5 f0fc 	udiv	r0, r5, ip
    13a2:	fb0c 5510 	mls	r5, ip, r0, r5
    13a6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    13aa:	fb00 f808 	mul.w	r8, r0, r8
    13ae:	45a0      	cmp	r8, r4
    13b0:	d907      	bls.n	13c2 <__udivmoddi4+0x26e>
    13b2:	18e4      	adds	r4, r4, r3
    13b4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
    13b8:	d229      	bcs.n	140e <__udivmoddi4+0x2ba>
    13ba:	45a0      	cmp	r8, r4
    13bc:	d927      	bls.n	140e <__udivmoddi4+0x2ba>
    13be:	3802      	subs	r0, #2
    13c0:	441c      	add	r4, r3
    13c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    13c6:	eba4 0408 	sub.w	r4, r4, r8
    13ca:	fba0 8902 	umull	r8, r9, r0, r2
    13ce:	454c      	cmp	r4, r9
    13d0:	46c6      	mov	lr, r8
    13d2:	464d      	mov	r5, r9
    13d4:	d315      	bcc.n	1402 <__udivmoddi4+0x2ae>
    13d6:	d012      	beq.n	13fe <__udivmoddi4+0x2aa>
    13d8:	b156      	cbz	r6, 13f0 <__udivmoddi4+0x29c>
    13da:	ebba 030e 	subs.w	r3, sl, lr
    13de:	eb64 0405 	sbc.w	r4, r4, r5
    13e2:	fa04 f707 	lsl.w	r7, r4, r7
    13e6:	40cb      	lsrs	r3, r1
    13e8:	431f      	orrs	r7, r3
    13ea:	40cc      	lsrs	r4, r1
    13ec:	6037      	str	r7, [r6, #0]
    13ee:	6074      	str	r4, [r6, #4]
    13f0:	2100      	movs	r1, #0
    13f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13f6:	4618      	mov	r0, r3
    13f8:	e6f8      	b.n	11ec <__udivmoddi4+0x98>
    13fa:	4690      	mov	r8, r2
    13fc:	e6e0      	b.n	11c0 <__udivmoddi4+0x6c>
    13fe:	45c2      	cmp	sl, r8
    1400:	d2ea      	bcs.n	13d8 <__udivmoddi4+0x284>
    1402:	ebb8 0e02 	subs.w	lr, r8, r2
    1406:	eb69 0503 	sbc.w	r5, r9, r3
    140a:	3801      	subs	r0, #1
    140c:	e7e4      	b.n	13d8 <__udivmoddi4+0x284>
    140e:	4628      	mov	r0, r5
    1410:	e7d7      	b.n	13c2 <__udivmoddi4+0x26e>
    1412:	4640      	mov	r0, r8
    1414:	e791      	b.n	133a <__udivmoddi4+0x1e6>
    1416:	4681      	mov	r9, r0
    1418:	e7be      	b.n	1398 <__udivmoddi4+0x244>
    141a:	4601      	mov	r1, r0
    141c:	e778      	b.n	1310 <__udivmoddi4+0x1bc>
    141e:	3802      	subs	r0, #2
    1420:	443c      	add	r4, r7
    1422:	e745      	b.n	12b0 <__udivmoddi4+0x15c>
    1424:	4608      	mov	r0, r1
    1426:	e708      	b.n	123a <__udivmoddi4+0xe6>
    1428:	f1a8 0802 	sub.w	r8, r8, #2
    142c:	443d      	add	r5, r7
    142e:	e72b      	b.n	1288 <__udivmoddi4+0x134>

00001430 <__aeabi_idiv0>:
    1430:	4770      	bx	lr
    1432:	bf00      	nop

00001434 <publish_cb>:
 * unknown pkt_id, this routine must return an error, for example -EINVAL or
 * any negative value.
 */
static int publish_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_id,
		      enum mqtt_packet type)
{
    1434:	b530      	push	{r4, r5, lr}
    1436:	b083      	sub	sp, #12
    1438:	4605      	mov	r5, r0
	const char *str;
	int rc = 0;

	client_ctx = CONTAINER_OF(mqtt_ctx, struct mqtt_client_ctx, mqtt_ctx);

	switch (type) {
    143a:	2a05      	cmp	r2, #5
    143c:	d01b      	beq.n	1476 <publish_cb+0x42>
    143e:	2a07      	cmp	r2, #7
    1440:	d01c      	beq.n	147c <publish_cb+0x48>
    1442:	2a04      	cmp	r2, #4
    1444:	d003      	beq.n	144e <publish_cb+0x1a>
		break;
	case MQTT_PUBREC:
		str = "MQTT_PUBREC";
		break;
	default:
		rc = -EINVAL;
    1446:	f06f 0415 	mvn.w	r4, #21
		str = "Invalid MQTT packet";
    144a:	4b0e      	ldr	r3, [pc, #56]	; (1484 <publish_cb+0x50>)
    144c:	e001      	b.n	1452 <publish_cb+0x1e>
	int rc = 0;
    144e:	2400      	movs	r4, #0
		str = "MQTT_PUBACK";
    1450:	4b0d      	ldr	r3, [pc, #52]	; (1488 <publish_cb+0x54>)
	}

	printk("[%s:%d] <%s> packet id: %u", __func__, __LINE__, str, pkt_id);
    1452:	9100      	str	r1, [sp, #0]
    1454:	22b4      	movs	r2, #180	; 0xb4
    1456:	490d      	ldr	r1, [pc, #52]	; (148c <publish_cb+0x58>)
    1458:	480d      	ldr	r0, [pc, #52]	; (1490 <publish_cb+0x5c>)
    145a:	f001 fd4b 	bl	2ef4 <printk>

	if (client_ctx->publish_data) {
    145e:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
    1462:	b111      	cbz	r1, 146a <publish_cb+0x36>
		printk(", user_data: %s",
    1464:	480b      	ldr	r0, [pc, #44]	; (1494 <publish_cb+0x60>)
    1466:	f001 fd45 	bl	2ef4 <printk>
		       (const char *)client_ctx->publish_data);
	}

	printk("\n");
    146a:	480b      	ldr	r0, [pc, #44]	; (1498 <publish_cb+0x64>)
    146c:	f001 fd42 	bl	2ef4 <printk>

	return rc;
}
    1470:	4620      	mov	r0, r4
    1472:	b003      	add	sp, #12
    1474:	bd30      	pop	{r4, r5, pc}
	int rc = 0;
    1476:	2400      	movs	r4, #0
		str = "MQTT_PUBREC";
    1478:	4b08      	ldr	r3, [pc, #32]	; (149c <publish_cb+0x68>)
		break;
    147a:	e7ea      	b.n	1452 <publish_cb+0x1e>
	int rc = 0;
    147c:	2400      	movs	r4, #0
		str = "MQTT_PUBCOMP";
    147e:	4b08      	ldr	r3, [pc, #32]	; (14a0 <publish_cb+0x6c>)
    1480:	e7e7      	b.n	1452 <publish_cb+0x1e>
    1482:	bf00      	nop
    1484:	0002e648 	.word	0x0002e648
    1488:	0002e620 	.word	0x0002e620
    148c:	0002e588 	.word	0x0002e588
    1490:	0002e65c 	.word	0x0002e65c
    1494:	0002e678 	.word	0x0002e678
    1498:	00031bc0 	.word	0x00031bc0
    149c:	0002e63c 	.word	0x0002e63c
    14a0:	0002e62c 	.word	0x0002e62c

000014a4 <malformed_cb>:
/**
 * The signature of this routine must match the malformed callback declared at
 * the mqtt.h header.
 */
static void malformed_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_type)
{
    14a4:	b508      	push	{r3, lr}
	printk("[%s:%d] pkt_type: %u\n", __func__, __LINE__, pkt_type);
    14a6:	460b      	mov	r3, r1
    14a8:	22c6      	movs	r2, #198	; 0xc6
    14aa:	4902      	ldr	r1, [pc, #8]	; (14b4 <malformed_cb+0x10>)
    14ac:	4802      	ldr	r0, [pc, #8]	; (14b8 <malformed_cb+0x14>)
    14ae:	f001 fd21 	bl	2ef4 <printk>
    14b2:	bd08      	pop	{r3, pc}
    14b4:	0002e594 	.word	0x0002e594
    14b8:	0002e5f0 	.word	0x0002e5f0

000014bc <disconnect_cb>:
{
    14bc:	b510      	push	{r4, lr}
    14be:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    14c0:	2285      	movs	r2, #133	; 0x85
    14c2:	4907      	ldr	r1, [pc, #28]	; (14e0 <disconnect_cb+0x24>)
    14c4:	4807      	ldr	r0, [pc, #28]	; (14e4 <disconnect_cb+0x28>)
    14c6:	f001 fd15 	bl	2ef4 <printk>
	if (client_ctx->disconnect_data) {
    14ca:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    14ce:	b111      	cbz	r1, 14d6 <disconnect_cb+0x1a>
		printk(" user_data: %s",
    14d0:	4805      	ldr	r0, [pc, #20]	; (14e8 <disconnect_cb+0x2c>)
    14d2:	f001 fd0f 	bl	2ef4 <printk>
	printk("\n");
    14d6:	4805      	ldr	r0, [pc, #20]	; (14ec <disconnect_cb+0x30>)
    14d8:	f001 fd0c 	bl	2ef4 <printk>
    14dc:	bd10      	pop	{r4, pc}
    14de:	bf00      	nop
    14e0:	0002e578 	.word	0x0002e578
    14e4:	0002e5b8 	.word	0x0002e5b8
    14e8:	0002e5c0 	.word	0x0002e5c0
    14ec:	00031bc0 	.word	0x00031bc0

000014f0 <connect_cb>:
{
    14f0:	b510      	push	{r4, lr}
    14f2:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    14f4:	2272      	movs	r2, #114	; 0x72
    14f6:	4907      	ldr	r1, [pc, #28]	; (1514 <connect_cb+0x24>)
    14f8:	4807      	ldr	r0, [pc, #28]	; (1518 <connect_cb+0x28>)
    14fa:	f001 fcfb 	bl	2ef4 <printk>
	if (client_ctx->connect_data) {
    14fe:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    1502:	b111      	cbz	r1, 150a <connect_cb+0x1a>
		printk(" user_data: %s",
    1504:	4805      	ldr	r0, [pc, #20]	; (151c <connect_cb+0x2c>)
    1506:	f001 fcf5 	bl	2ef4 <printk>
	printk("\n");
    150a:	4805      	ldr	r0, [pc, #20]	; (1520 <connect_cb+0x30>)
    150c:	f001 fcf2 	bl	2ef4 <printk>
    1510:	bd10      	pop	{r4, pc}
    1512:	bf00      	nop
    1514:	0002e56c 	.word	0x0002e56c
    1518:	0002e5b8 	.word	0x0002e5b8
    151c:	0002e5c0 	.word	0x0002e5c0
    1520:	00031bc0 	.word	0x00031bc0

00001524 <encrypt_aes>:
static void encrypt_aes() {
    1524:	b500      	push	{lr}
    1526:	b0c7      	sub	sp, #284	; 0x11c
	mbedtls_aes_init( &aes_ctx );
    1528:	4668      	mov	r0, sp
    152a:	f002 fa88 	bl	3a3e <mbedtls_aes_init>
	mbedtls_aes_setkey_enc( &aes_ctx, KEY_128, 128 );
    152e:	2280      	movs	r2, #128	; 0x80
    1530:	4907      	ldr	r1, [pc, #28]	; (1550 <encrypt_aes+0x2c>)
    1532:	4668      	mov	r0, sp
    1534:	f002 fa92 	bl	3a5c <mbedtls_aes_setkey_enc>
	mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, MESSAGE_128, encrypted_msg );
    1538:	4b06      	ldr	r3, [pc, #24]	; (1554 <encrypt_aes+0x30>)
    153a:	4a07      	ldr	r2, [pc, #28]	; (1558 <encrypt_aes+0x34>)
    153c:	2101      	movs	r1, #1
    153e:	4668      	mov	r0, sp
    1540:	f002 ff30 	bl	43a4 <mbedtls_aes_crypt_ecb>
	mbedtls_aes_free( &aes_ctx );
    1544:	4668      	mov	r0, sp
    1546:	f002 fa81 	bl	3a4c <mbedtls_aes_free>
}
    154a:	b047      	add	sp, #284	; 0x11c
    154c:	f85d fb04 	ldr.w	pc, [sp], #4
    1550:	0002e5d0 	.word	0x0002e5d0
    1554:	2000000c 	.word	0x2000000c
    1558:	0002e5e0 	.word	0x0002e5e0

0000155c <message_thread>:
{
    155c:	b538      	push	{r3, r4, r5, lr}

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_OBJECT_ACCESS_REVOKE, k_object_access_revoke, void *, object, struct k_thread *, thread);

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    155e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1562:	f027 fcfb 	bl	28f5c <_impl_k_sleep>
		start_time = k_cycle_get_32();
    1566:	f000 ffa1 	bl	24ac <_timer_cycle_get_32>
    156a:	4604      	mov	r4, r0

K_SYSCALL_DECLARE3(K_SYSCALL_K_STACK_POP, k_stack_pop, int, struct k_stack *, stack, u32_t *, data, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex);

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    156c:	4d1c      	ldr	r5, [pc, #112]	; (15e0 <message_thread+0x84>)
    156e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1572:	4628      	mov	r0, r5
    1574:	f026 fe0e 	bl	28194 <_impl_k_mutex_lock>
		encrypt_aes();
    1578:	f7ff ffd4 	bl	1524 <encrypt_aes>
		message_changed = true;
    157c:	2201      	movs	r2, #1
    157e:	4b19      	ldr	r3, [pc, #100]	; (15e4 <message_thread+0x88>)
    1580:	701a      	strb	r2, [r3, #0]

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    1582:	4628      	mov	r0, r5
    1584:	f026 fe70 	bl	28268 <_impl_k_mutex_unlock>

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1588:	4817      	ldr	r0, [pc, #92]	; (15e8 <message_thread+0x8c>)
    158a:	f027 fe26 	bl	291da <_impl_k_sem_give>
		stop_time = k_cycle_get_32();
    158e:	f000 ff8d 	bl	24ac <_timer_cycle_get_32>
		cycles_spent = stop_time - start_time;
    1592:	1b01      	subs	r1, r0, r4
		nanoseconds_spent = nanoseconds_spent + SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent);
    1594:	4b15      	ldr	r3, [pc, #84]	; (15ec <message_thread+0x90>)
    1596:	681a      	ldr	r2, [r3, #0]
    1598:	17d5      	asrs	r5, r2, #31
    159a:	fba2 2301 	umull	r2, r3, r2, r1
    159e:	fb01 3305 	mla	r3, r1, r5, r3
    15a2:	015c      	lsls	r4, r3, #5
    15a4:	0150      	lsls	r0, r2, #5
    15a6:	ea44 61d2 	orr.w	r1, r4, r2, lsr #27
    15aa:	1a80      	subs	r0, r0, r2
    15ac:	eb61 0103 	sbc.w	r1, r1, r3
    15b0:	008c      	lsls	r4, r1, #2
    15b2:	ea44 7490 	orr.w	r4, r4, r0, lsr #30
    15b6:	0085      	lsls	r5, r0, #2
    15b8:	18a8      	adds	r0, r5, r2
    15ba:	eb44 0103 	adc.w	r1, r4, r3
    15be:	00cb      	lsls	r3, r1, #3
    15c0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    15c4:	00c2      	lsls	r2, r0, #3
    15c6:	4610      	mov	r0, r2
    15c8:	4619      	mov	r1, r3
    15ca:	4b09      	ldr	r3, [pc, #36]	; (15f0 <message_thread+0x94>)
    15cc:	681a      	ldr	r2, [r3, #0]
    15ce:	17d3      	asrs	r3, r2, #31
    15d0:	f7ff fd94 	bl	10fc <__aeabi_uldivmod>
	printk("Time spent:%" PRIu32 "\n", nanoseconds_spent);
    15d4:	4601      	mov	r1, r0
    15d6:	4807      	ldr	r0, [pc, #28]	; (15f4 <message_thread+0x98>)
    15d8:	f001 fc8c 	bl	2ef4 <printk>
    15dc:	bd38      	pop	{r3, r4, r5, pc}
    15de:	bf00      	nop
    15e0:	2000d1d0 	.word	0x2000d1d0
    15e4:	2000020c 	.word	0x2000020c
    15e8:	2000d15c 	.word	0x2000d15c
    15ec:	2000c678 	.word	0x2000c678
    15f0:	2000c674 	.word	0x2000c674
    15f4:	0002e608 	.word	0x0002e608

000015f8 <get_message_payload>:
}

static char *get_message_payload(enum mqtt_qos qos) 
{
    15f8:	b510      	push	{r4, lr}
	static char payload[128];
	snprintf(payload, sizeof(payload), "%s", encrypted_msg);
    15fa:	4c04      	ldr	r4, [pc, #16]	; (160c <get_message_payload+0x14>)
    15fc:	4b04      	ldr	r3, [pc, #16]	; (1610 <get_message_payload+0x18>)
    15fe:	4a05      	ldr	r2, [pc, #20]	; (1614 <get_message_payload+0x1c>)
    1600:	2180      	movs	r1, #128	; 0x80
    1602:	4620      	mov	r0, r4
    1604:	f028 fe0a 	bl	2a21c <snprintf>
	return payload;
}
    1608:	4620      	mov	r0, r4
    160a:	bd10      	pop	{r4, pc}
    160c:	20000210 	.word	0x20000210
    1610:	2000000c 	.word	0x2000000c
    1614:	0002e5cc 	.word	0x0002e5cc

00001618 <prepare_msg>:

static void prepare_msg(struct mqtt_publish_msg *pub_msg,
				     enum mqtt_qos qos)
{
    1618:	b538      	push	{r3, r4, r5, lr}
    161a:	4604      	mov	r4, r0
    161c:	460d      	mov	r5, r1
	/* MQTT message payload may be anything, we we use C strings */
	pub_msg->msg = get_message_payload(qos);
    161e:	4608      	mov	r0, r1
    1620:	f7ff ffea 	bl	15f8 <get_message_payload>
    1624:	6120      	str	r0, [r4, #16]
	/* Payload's length */
	pub_msg->msg_len = strlen(pub_msg->msg);
    1626:	f7ff f86b 	bl	700 <strlen>
    162a:	82a0      	strh	r0, [r4, #20]
	/* MQTT Quality of Service */
	pub_msg->qos = qos;
    162c:	7065      	strb	r5, [r4, #1]
	/* Message's topic */
	pub_msg->topic = TOPIC;
    162e:	4804      	ldr	r0, [pc, #16]	; (1640 <prepare_msg+0x28>)
    1630:	60a0      	str	r0, [r4, #8]
	pub_msg->topic_len = strlen(pub_msg->topic);
    1632:	f7ff f865 	bl	700 <strlen>
    1636:	81a0      	strh	r0, [r4, #12]
	/* Packet Identifier, always use different values */
	pub_msg->pkt_id = sys_rand32_get();
    1638:	f000 fcc2 	bl	1fc0 <sys_rand32_get>
    163c:	80a0      	strh	r0, [r4, #4]
    163e:	bd38      	pop	{r3, r4, r5, pc}
    1640:	0002e618 	.word	0x0002e618

00001644 <publisher_thread>:
K_THREAD_STACK_DEFINE(pub_stack_area, PUB_STACK_SIZE);
struct k_thread pub_thread;
static struct mqtt_client_ctx pub_ctx;

void publisher_thread(void * unused1, void * unused2, void * unused3)
{
    1644:	b530      	push	{r4, r5, lr}
    1646:	b083      	sub	sp, #12
	ARG_UNUSED(unused3);

	int i, rc;

	/* Set everything to 0 and later just assign the required fields. */
	memset(&pub_ctx, 0x00, sizeof(pub_ctx));
    1648:	4c7c      	ldr	r4, [pc, #496]	; (183c <publisher_thread+0x1f8>)
    164a:	f44f 7280 	mov.w	r2, #256	; 0x100
    164e:	2100      	movs	r1, #0
    1650:	4620      	mov	r0, r4
    1652:	f028 fd95 	bl	2a180 <memset>

	/* connect, disconnect and malformed may be set to NULL */
	pub_ctx.mqtt_ctx.connect = connect_cb;
    1656:	4b7a      	ldr	r3, [pc, #488]	; (1840 <publisher_thread+0x1fc>)
    1658:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

	pub_ctx.mqtt_ctx.disconnect = disconnect_cb;
    165c:	4b79      	ldr	r3, [pc, #484]	; (1844 <publisher_thread+0x200>)
    165e:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	pub_ctx.mqtt_ctx.malformed = malformed_cb;
    1662:	4b79      	ldr	r3, [pc, #484]	; (1848 <publisher_thread+0x204>)
    1664:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8

	pub_ctx.mqtt_ctx.net_init_timeout = APP_NET_INIT_TIMEOUT;
    1668:	f242 7310 	movw	r3, #10000	; 0x2710
    166c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	pub_ctx.mqtt_ctx.net_timeout = APP_TX_RX_TIMEOUT;
    1670:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    1674:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4

	pub_ctx.mqtt_ctx.peer_addr_str = SERVER_ADDR;
    1678:	4b74      	ldr	r3, [pc, #464]	; (184c <publisher_thread+0x208>)
    167a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	pub_ctx.mqtt_ctx.peer_port = SERVER_PORT;
    167e:	f240 735b 	movw	r3, #1883	; 0x75b
    1682:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc

	/* Publisher apps TX the MQTT PUBLISH msg */
	pub_ctx.mqtt_ctx.publish_tx = publish_cb;
    1686:	4b72      	ldr	r3, [pc, #456]	; (1850 <publisher_thread+0x20c>)
    1688:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	/* The connect message will be sent to the MQTT server (broker).
	 * If clean_session here is 0, the mqtt_ctx clean_session variable
	 * will be set to 0 also. Please don't do that, set always to 1.
	 * Clean session = 0 is not yet supported.
	 */
	pub_ctx.connect_msg.user_name = TB_ACCESS_TOKEN;
    168c:	4871      	ldr	r0, [pc, #452]	; (1854 <publisher_thread+0x210>)
    168e:	6220      	str	r0, [r4, #32]
	pub_ctx.connect_msg.user_name_len = strlen(TB_ACCESS_TOKEN);
    1690:	f7ff f836 	bl	700 <strlen>
    1694:	84a0      	strh	r0, [r4, #36]	; 0x24
	pub_ctx.connect_msg.clean_session = 1;
    1696:	7823      	ldrb	r3, [r4, #0]
    1698:	f043 0301 	orr.w	r3, r3, #1
    169c:	7023      	strb	r3, [r4, #0]

	pub_ctx.connect_data = "CONNECTED";
    169e:	4b6e      	ldr	r3, [pc, #440]	; (1858 <publisher_thread+0x214>)
    16a0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	pub_ctx.disconnect_data = "DISCONNECTED";
    16a4:	4b6d      	ldr	r3, [pc, #436]	; (185c <publisher_thread+0x218>)
    16a6:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
	pub_ctx.publish_data = "PUBLISH";
    16aa:	4b6d      	ldr	r3, [pc, #436]	; (1860 <publisher_thread+0x21c>)
    16ac:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc

	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    16b0:	e0a0      	b.n	17f4 <publisher_thread+0x1b0>

		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
		PRINT_RESULT("mqtt_init", rc);
    16b2:	4b6c      	ldr	r3, [pc, #432]	; (1864 <publisher_thread+0x220>)
    16b4:	e0ad      	b.n	1812 <publisher_thread+0x1ce>
		}

		i = 0;
		do {
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
			PRINT_RESULT("mqtt_connect", rc);
    16b6:	4b6b      	ldr	r3, [pc, #428]	; (1864 <publisher_thread+0x220>)
    16b8:	9301      	str	r3, [sp, #4]
    16ba:	9400      	str	r4, [sp, #0]
    16bc:	4b6a      	ldr	r3, [pc, #424]	; (1868 <publisher_thread+0x224>)
    16be:	f44f 7290 	mov.w	r2, #288	; 0x120
    16c2:	496a      	ldr	r1, [pc, #424]	; (186c <publisher_thread+0x228>)
    16c4:	486a      	ldr	r0, [pc, #424]	; (1870 <publisher_thread+0x22c>)
    16c6:	f001 fc15 	bl	2ef4 <printk>
		} while (rc != 0 && i++ < APP_CONN_TRIES);
    16ca:	b15c      	cbz	r4, 16e4 <publisher_thread+0xa0>
    16cc:	1c6b      	adds	r3, r5, #1
    16ce:	2d63      	cmp	r5, #99	; 0x63
    16d0:	dc08      	bgt.n	16e4 <publisher_thread+0xa0>
    16d2:	461d      	mov	r5, r3
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
    16d4:	4867      	ldr	r0, [pc, #412]	; (1874 <publisher_thread+0x230>)
    16d6:	f024 fd71 	bl	261bc <mqtt_connect>
			PRINT_RESULT("mqtt_connect", rc);
    16da:	4604      	mov	r4, r0
    16dc:	2800      	cmp	r0, #0
    16de:	d1ea      	bne.n	16b6 <publisher_thread+0x72>
    16e0:	4b65      	ldr	r3, [pc, #404]	; (1878 <publisher_thread+0x234>)
    16e2:	e7e9      	b.n	16b8 <publisher_thread+0x74>

		if (rc != 0) {
    16e4:	b1cc      	cbz	r4, 171a <publisher_thread+0xd6>
    16e6:	e0a0      	b.n	182a <publisher_thread+0x1e6>
		}

		i = 0;
		do {
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
			PRINT_RESULT("mqtt_tx_connect", rc);
    16e8:	4b5e      	ldr	r3, [pc, #376]	; (1864 <publisher_thread+0x220>)
    16ea:	9301      	str	r3, [sp, #4]
    16ec:	9500      	str	r5, [sp, #0]
    16ee:	4b63      	ldr	r3, [pc, #396]	; (187c <publisher_thread+0x238>)
    16f0:	f44f 7295 	mov.w	r2, #298	; 0x12a
    16f4:	495d      	ldr	r1, [pc, #372]	; (186c <publisher_thread+0x228>)
    16f6:	485e      	ldr	r0, [pc, #376]	; (1870 <publisher_thread+0x22c>)
    16f8:	f001 fbfc 	bl	2ef4 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    16fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1700:	f027 fc2c 	bl	28f5c <_impl_k_sleep>
			k_sleep(APP_TX_CONN_WAIT_MSECS);
		} while (rc == 0 && i++ < APP_TX_CONN_TRIES && !pub_ctx.mqtt_ctx.connected);
    1704:	b99d      	cbnz	r5, 172e <publisher_thread+0xea>
    1706:	1c63      	adds	r3, r4, #1
    1708:	2c13      	cmp	r4, #19
    170a:	dc10      	bgt.n	172e <publisher_thread+0xea>
    170c:	4a4b      	ldr	r2, [pc, #300]	; (183c <publisher_thread+0x1f8>)
    170e:	f892 20f1 	ldrb.w	r2, [r2, #241]	; 0xf1
    1712:	f012 0f02 	tst.w	r2, #2
    1716:	d10a      	bne.n	172e <publisher_thread+0xea>
    1718:	461c      	mov	r4, r3
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
    171a:	4848      	ldr	r0, [pc, #288]	; (183c <publisher_thread+0x1f8>)
    171c:	4601      	mov	r1, r0
    171e:	3048      	adds	r0, #72	; 0x48
    1720:	f024 fb7a 	bl	25e18 <mqtt_tx_connect>
			PRINT_RESULT("mqtt_tx_connect", rc);
    1724:	4605      	mov	r5, r0
    1726:	2800      	cmp	r0, #0
    1728:	d1de      	bne.n	16e8 <publisher_thread+0xa4>
    172a:	4b53      	ldr	r3, [pc, #332]	; (1878 <publisher_thread+0x234>)
    172c:	e7dd      	b.n	16ea <publisher_thread+0xa6>

		if (!pub_ctx.mqtt_ctx.connected) {
    172e:	4b43      	ldr	r3, [pc, #268]	; (183c <publisher_thread+0x1f8>)
    1730:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
    1734:	f013 0f02 	tst.w	r3, #2
    1738:	d11b      	bne.n	1772 <publisher_thread+0x12e>
			mqtt_close(&pub_ctx.mqtt_ctx);
    173a:	484e      	ldr	r0, [pc, #312]	; (1874 <publisher_thread+0x230>)
    173c:	f024 fd84 	bl	26248 <mqtt_close>
			goto exit_pub;
    1740:	e073      	b.n	182a <publisher_thread+0x1e6>
		do {
			bool data_changed = false;
			k_mutex_lock(&pub_data, K_FOREVER);

			if (message_changed) {
				prepare_msg(&pub_ctx.pub_msg, MQTT_QoS0);
    1742:	2100      	movs	r1, #0
    1744:	484e      	ldr	r0, [pc, #312]	; (1880 <publisher_thread+0x23c>)
    1746:	f7ff ff67 	bl	1618 <prepare_msg>
				message_changed=false;
    174a:	2200      	movs	r2, #0
    174c:	4b4d      	ldr	r3, [pc, #308]	; (1884 <publisher_thread+0x240>)
    174e:	701a      	strb	r2, [r3, #0]
    1750:	e018      	b.n	1784 <publisher_thread+0x140>

			k_mutex_unlock(&pub_data);

			if (data_changed) {
				rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
				PRINT_RESULT("mqtt_tx_publish", rc);
    1752:	4a44      	ldr	r2, [pc, #272]	; (1864 <publisher_thread+0x220>)
    1754:	9201      	str	r2, [sp, #4]
    1756:	9300      	str	r3, [sp, #0]
    1758:	4b4b      	ldr	r3, [pc, #300]	; (1888 <publisher_thread+0x244>)
    175a:	f240 1241 	movw	r2, #321	; 0x141
    175e:	4943      	ldr	r1, [pc, #268]	; (186c <publisher_thread+0x228>)
    1760:	4843      	ldr	r0, [pc, #268]	; (1870 <publisher_thread+0x22c>)
    1762:	f001 fbc7 	bl	2ef4 <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1766:	f242 7110 	movw	r1, #10000	; 0x2710
    176a:	4848      	ldr	r0, [pc, #288]	; (188c <publisher_thread+0x248>)
    176c:	f027 fd48 	bl	29200 <_impl_k_sem_take>
			}
		} while ((rc = k_sem_take(&pub_sem, APP_CONN_IDLE_TIMEOUT)) == 0);
    1770:	b9c0      	cbnz	r0, 17a4 <publisher_thread+0x160>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    1772:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1776:	4846      	ldr	r0, [pc, #280]	; (1890 <publisher_thread+0x24c>)
    1778:	f026 fd0c 	bl	28194 <_impl_k_mutex_lock>
			if (message_changed) {
    177c:	4b41      	ldr	r3, [pc, #260]	; (1884 <publisher_thread+0x240>)
    177e:	781c      	ldrb	r4, [r3, #0]
    1780:	2c00      	cmp	r4, #0
    1782:	d1de      	bne.n	1742 <publisher_thread+0xfe>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    1784:	4842      	ldr	r0, [pc, #264]	; (1890 <publisher_thread+0x24c>)
    1786:	f026 fd6f 	bl	28268 <_impl_k_mutex_unlock>
			if (data_changed) {
    178a:	2c00      	cmp	r4, #0
    178c:	d0eb      	beq.n	1766 <publisher_thread+0x122>
				rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
    178e:	482b      	ldr	r0, [pc, #172]	; (183c <publisher_thread+0x1f8>)
    1790:	f100 0130 	add.w	r1, r0, #48	; 0x30
    1794:	3048      	adds	r0, #72	; 0x48
    1796:	f024 fbcb 	bl	25f30 <mqtt_tx_publish>
				PRINT_RESULT("mqtt_tx_publish", rc);
    179a:	4603      	mov	r3, r0
    179c:	2800      	cmp	r0, #0
    179e:	d1d8      	bne.n	1752 <publisher_thread+0x10e>
    17a0:	4a35      	ldr	r2, [pc, #212]	; (1878 <publisher_thread+0x234>)
    17a2:	e7d7      	b.n	1754 <publisher_thread+0x110>

		rc = mqtt_tx_disconnect(&pub_ctx.mqtt_ctx);
    17a4:	4833      	ldr	r0, [pc, #204]	; (1874 <publisher_thread+0x230>)
    17a6:	f024 fb79 	bl	25e9c <mqtt_tx_disconnect>
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    17aa:	4603      	mov	r3, r0
    17ac:	2800      	cmp	r0, #0
    17ae:	d141      	bne.n	1834 <publisher_thread+0x1f0>
    17b0:	4a31      	ldr	r2, [pc, #196]	; (1878 <publisher_thread+0x234>)
    17b2:	9201      	str	r2, [sp, #4]
    17b4:	9300      	str	r3, [sp, #0]
    17b6:	4b37      	ldr	r3, [pc, #220]	; (1894 <publisher_thread+0x250>)
    17b8:	f44f 72a3 	mov.w	r2, #326	; 0x146
    17bc:	492b      	ldr	r1, [pc, #172]	; (186c <publisher_thread+0x228>)
    17be:	482c      	ldr	r0, [pc, #176]	; (1870 <publisher_thread+0x22c>)
    17c0:	f001 fb98 	bl	2ef4 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    17c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    17c8:	f027 fbc8 	bl	28f5c <_impl_k_sleep>

		k_sleep(APP_TX_RX_TIMEOUT);

		rc = mqtt_close(&pub_ctx.mqtt_ctx);
    17cc:	4829      	ldr	r0, [pc, #164]	; (1874 <publisher_thread+0x230>)
    17ce:	f024 fd3b 	bl	26248 <mqtt_close>
		PRINT_RESULT("mqtt_close", rc);
    17d2:	4603      	mov	r3, r0
    17d4:	2800      	cmp	r0, #0
    17d6:	d12f      	bne.n	1838 <publisher_thread+0x1f4>
    17d8:	4a27      	ldr	r2, [pc, #156]	; (1878 <publisher_thread+0x234>)
    17da:	9201      	str	r2, [sp, #4]
    17dc:	9300      	str	r3, [sp, #0]
    17de:	4b2e      	ldr	r3, [pc, #184]	; (1898 <publisher_thread+0x254>)
    17e0:	f240 124b 	movw	r2, #331	; 0x14b
    17e4:	4921      	ldr	r1, [pc, #132]	; (186c <publisher_thread+0x228>)
    17e6:	4822      	ldr	r0, [pc, #136]	; (1870 <publisher_thread+0x22c>)
    17e8:	f001 fb84 	bl	2ef4 <printk>
    17ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    17f0:	f027 fbb4 	bl	28f5c <_impl_k_sleep>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    17f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    17f8:	4824      	ldr	r0, [pc, #144]	; (188c <publisher_thread+0x248>)
    17fa:	f027 fd01 	bl	29200 <_impl_k_sem_take>
	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    17fe:	b9a0      	cbnz	r0, 182a <publisher_thread+0x1e6>
		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
    1800:	2101      	movs	r1, #1
    1802:	481c      	ldr	r0, [pc, #112]	; (1874 <publisher_thread+0x230>)
    1804:	f024 fd0e 	bl	26224 <mqtt_init>
		PRINT_RESULT("mqtt_init", rc);
    1808:	4605      	mov	r5, r0
    180a:	2800      	cmp	r0, #0
    180c:	f47f af51 	bne.w	16b2 <publisher_thread+0x6e>
    1810:	4b19      	ldr	r3, [pc, #100]	; (1878 <publisher_thread+0x234>)
    1812:	9301      	str	r3, [sp, #4]
    1814:	9500      	str	r5, [sp, #0]
    1816:	4b21      	ldr	r3, [pc, #132]	; (189c <publisher_thread+0x258>)
    1818:	f240 1217 	movw	r2, #279	; 0x117
    181c:	4913      	ldr	r1, [pc, #76]	; (186c <publisher_thread+0x228>)
    181e:	4814      	ldr	r0, [pc, #80]	; (1870 <publisher_thread+0x22c>)
    1820:	f001 fb68 	bl	2ef4 <printk>
		if (rc != 0) {
    1824:	2d00      	cmp	r5, #0
    1826:	f43f af55 	beq.w	16d4 <publisher_thread+0x90>
		k_sleep(APP_TX_RX_TIMEOUT);
	}

exit_pub:

	printk("\nPublisher terminated!!\n");
    182a:	481d      	ldr	r0, [pc, #116]	; (18a0 <publisher_thread+0x25c>)
    182c:	f001 fb62 	bl	2ef4 <printk>
}
    1830:	b003      	add	sp, #12
    1832:	bd30      	pop	{r4, r5, pc}
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    1834:	4a0b      	ldr	r2, [pc, #44]	; (1864 <publisher_thread+0x220>)
    1836:	e7bc      	b.n	17b2 <publisher_thread+0x16e>
		PRINT_RESULT("mqtt_close", rc);
    1838:	4a0a      	ldr	r2, [pc, #40]	; (1864 <publisher_thread+0x220>)
    183a:	e7ce      	b.n	17da <publisher_thread+0x196>
    183c:	20000290 	.word	0x20000290
    1840:	000014f1 	.word	0x000014f1
    1844:	000014bd 	.word	0x000014bd
    1848:	000014a5 	.word	0x000014a5
    184c:	0002e694 	.word	0x0002e694
    1850:	00001435 	.word	0x00001435
    1854:	0002e6b0 	.word	0x0002e6b0
    1858:	0002e6c8 	.word	0x0002e6c8
    185c:	0002e6d4 	.word	0x0002e6d4
    1860:	0002e6e4 	.word	0x0002e6e4
    1864:	0002e68c 	.word	0x0002e68c
    1868:	0002e710 	.word	0x0002e710
    186c:	0002e5a4 	.word	0x0002e5a4
    1870:	0002e6f8 	.word	0x0002e6f8
    1874:	200002d8 	.word	0x200002d8
    1878:	0002e688 	.word	0x0002e688
    187c:	0002e720 	.word	0x0002e720
    1880:	200002c0 	.word	0x200002c0
    1884:	2000020c 	.word	0x2000020c
    1888:	0002e730 	.word	0x0002e730
    188c:	2000d15c 	.word	0x2000d15c
    1890:	2000d1d0 	.word	0x2000d1d0
    1894:	0002e740 	.word	0x0002e740
    1898:	0002e754 	.word	0x0002e754
    189c:	0002e6ec 	.word	0x0002e6ec
    18a0:	0002e760 	.word	0x0002e760

000018a4 <start_publisher>:


static void start_publisher()
{
    18a4:	b500      	push	{lr}
    18a6:	b087      	sub	sp, #28
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    18a8:	2300      	movs	r3, #0
    18aa:	9305      	str	r3, [sp, #20]
    18ac:	9304      	str	r3, [sp, #16]
    18ae:	2205      	movs	r2, #5
    18b0:	9203      	str	r2, [sp, #12]
    18b2:	9302      	str	r3, [sp, #8]
    18b4:	9301      	str	r3, [sp, #4]
    18b6:	9300      	str	r3, [sp, #0]
    18b8:	4b04      	ldr	r3, [pc, #16]	; (18cc <start_publisher+0x28>)
    18ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
    18be:	4904      	ldr	r1, [pc, #16]	; (18d0 <start_publisher+0x2c>)
    18c0:	4804      	ldr	r0, [pc, #16]	; (18d4 <start_publisher+0x30>)
    18c2:	f027 ff09 	bl	296d8 <_impl_k_thread_create>
	k_tid_t tt_tid = k_thread_create(&pub_thread, pub_stack_area,
                                 K_THREAD_STACK_SIZEOF(pub_stack_area),
                                 publisher_thread,
                                 NULL, NULL, NULL,
                                 PUB_PRIORITY, 0, K_NO_WAIT);
}
    18c6:	b007      	add	sp, #28
    18c8:	f85d fb04 	ldr.w	pc, [sp], #4
    18cc:	00001645 	.word	0x00001645
    18d0:	20003510 	.word	0x20003510
    18d4:	20002a3c 	.word	0x20002a3c

000018d8 <start_message_thread>:
{
    18d8:	b500      	push	{lr}
    18da:	b087      	sub	sp, #28
    18dc:	2300      	movs	r3, #0
    18de:	9305      	str	r3, [sp, #20]
    18e0:	9304      	str	r3, [sp, #16]
    18e2:	2205      	movs	r2, #5
    18e4:	9203      	str	r2, [sp, #12]
    18e6:	9302      	str	r3, [sp, #8]
    18e8:	9301      	str	r3, [sp, #4]
    18ea:	9300      	str	r3, [sp, #0]
    18ec:	4b04      	ldr	r3, [pc, #16]	; (1900 <start_message_thread+0x28>)
    18ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
    18f2:	4904      	ldr	r1, [pc, #16]	; (1904 <start_message_thread+0x2c>)
    18f4:	4804      	ldr	r0, [pc, #16]	; (1908 <start_message_thread+0x30>)
    18f6:	f027 feef 	bl	296d8 <_impl_k_thread_create>
}
    18fa:	b007      	add	sp, #28
    18fc:	f85d fb04 	ldr.w	pc, [sp], #4
    1900:	0000155d 	.word	0x0000155d
    1904:	20002d10 	.word	0x20002d10
    1908:	200029d4 	.word	0x200029d4

0000190c <event_iface_up>:


static void event_iface_up(struct net_mgmt_event_callback *cb,
			   u32_t mgmt_event, struct net_if *iface)
{
    190c:	b508      	push	{r3, lr}
	start_publisher();
    190e:	f7ff ffc9 	bl	18a4 <start_publisher>
	start_message_thread();
    1912:	f7ff ffe1 	bl	18d8 <start_message_thread>
    1916:	bd08      	pop	{r3, pc}

00001918 <main>:
}


void main(void)
{
    1918:	b510      	push	{r4, lr}
	struct net_if *iface = net_if_get_default();
    191a:	f019 fca3 	bl	1b264 <net_if_get_default>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    191e:	f3bf 8f5b 	dmb	ish
    1922:	68c3      	ldr	r3, [r0, #12]
    1924:	f3bf 8f5b 	dmb	ish

#if defined(CONFIG_NET_MGMT_EVENT)
	/* Subscribe to NET_IF_UP if interface is not ready */
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
    1928:	f013 0f01 	tst.w	r3, #1
    192c:	d010      	beq.n	1950 <main+0x38>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    192e:	4c0c      	ldr	r4, [pc, #48]	; (1960 <main+0x48>)
    1930:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1934:	4620      	mov	r0, r4
    1936:	f026 fc2d 	bl	28194 <_impl_k_mutex_lock>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    193a:	4620      	mov	r0, r4
    193c:	f026 fc94 	bl	28268 <_impl_k_mutex_unlock>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1940:	4808      	ldr	r0, [pc, #32]	; (1964 <main+0x4c>)
    1942:	f027 fc4a 	bl	291da <_impl_k_sem_give>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1946:	f242 7010 	movw	r0, #10000	; 0x2710
    194a:	f027 fb07 	bl	28f5c <_impl_k_sleep>
    194e:	e7ee      	b.n	192e <main+0x16>
				  u32_t mgmt_event_mask)
{
	__ASSERT(cb, "Callback pointer should not be NULL");
	__ASSERT(handler, "Handler pointer should not be NULL");

	cb->handler = handler;
    1950:	4805      	ldr	r0, [pc, #20]	; (1968 <main+0x50>)
    1952:	4b06      	ldr	r3, [pc, #24]	; (196c <main+0x54>)
    1954:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
    1956:	4b06      	ldr	r3, [pc, #24]	; (1970 <main+0x58>)
    1958:	6083      	str	r3, [r0, #8]
		net_mgmt_init_event_callback(&cb, event_iface_up, NET_EVENT_IF_UP);
		net_mgmt_add_event_callback(&cb);
    195a:	f021 fac1 	bl	22ee0 <net_mgmt_add_event_callback>
    195e:	e7e6      	b.n	192e <main+0x16>
    1960:	2000d1d0 	.word	0x2000d1d0
    1964:	2000d15c 	.word	0x2000d15c
    1968:	20000000 	.word	0x20000000
    196c:	0000190d 	.word	0x0000190d
    1970:	d0010002 	.word	0xd0010002

00001974 <_sbrk>:
}
FUNC_ALIAS(_lseek, lseek, int);

void *_sbrk(int count)
{
	void *ptr = heap_base + heap_sz;
    1974:	4b08      	ldr	r3, [pc, #32]	; (1998 <_sbrk+0x24>)
    1976:	681a      	ldr	r2, [r3, #0]
    1978:	4b08      	ldr	r3, [pc, #32]	; (199c <_sbrk+0x28>)
    197a:	18d1      	adds	r1, r2, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    197c:	4410      	add	r0, r2
    197e:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    1982:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    1986:	4298      	cmp	r0, r3
    1988:	d203      	bcs.n	1992 <_sbrk+0x1e>
		heap_sz += count;
    198a:	4b03      	ldr	r3, [pc, #12]	; (1998 <_sbrk+0x24>)
    198c:	6018      	str	r0, [r3, #0]
		return ptr;
	} else {
		return (void *)-1;
	}
}
    198e:	4608      	mov	r0, r1
    1990:	4770      	bx	lr
		return (void *)-1;
    1992:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1996:	e7fa      	b.n	198e <_sbrk+0x1a>
    1998:	20000390 	.word	0x20000390
    199c:	2000d5b4 	.word	0x2000d5b4

000019a0 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    19a0:	b510      	push	{r4, lr}
    19a2:	4604      	mov	r4, r0
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    19a4:	280a      	cmp	r0, #10
    19a6:	d007      	beq.n	19b8 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    19a8:	4b07      	ldr	r3, [pc, #28]	; (19c8 <console_out+0x28>)
    19aa:	6818      	ldr	r0, [r3, #0]
 * @retval char Sent character.
 */
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;
    19ac:	6843      	ldr	r3, [r0, #4]

	return api->poll_out(dev, out_char);
    19ae:	685b      	ldr	r3, [r3, #4]
    19b0:	b2e1      	uxtb	r1, r4
    19b2:	4798      	blx	r3

	return c;
}
    19b4:	4620      	mov	r0, r4
    19b6:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    19b8:	4b03      	ldr	r3, [pc, #12]	; (19c8 <console_out+0x28>)
    19ba:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    19bc:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    19be:	685b      	ldr	r3, [r3, #4]
    19c0:	210d      	movs	r1, #13
    19c2:	4798      	blx	r3
    19c4:	e7f0      	b.n	19a8 <console_out+0x8>
    19c6:	bf00      	nop
    19c8:	200003b4 	.word	0x200003b4

000019cc <read_uart>:
#define ANSI_END           'F'
#define ANSI_HOME          'H'
#define ANSI_DEL           '~'

static int read_uart(struct device *uart, u8_t *buf, unsigned int size)
{
    19cc:	b510      	push	{r4, lr}
    19ce:	4604      	mov	r4, r0
 * @return Number of bytes read.
 */
static inline int uart_fifo_read(struct device *dev, u8_t *rx_data,
				 const int size)
{
	const struct uart_driver_api *api = dev->driver_api;
    19d0:	6843      	ldr	r3, [r0, #4]

	if (api->fifo_read) {
    19d2:	691b      	ldr	r3, [r3, #16]
    19d4:	b11b      	cbz	r3, 19de <read_uart+0x12>
		return api->fifo_read(dev, rx_data, size);
    19d6:	4798      	blx	r3
	int rx;

	rx = uart_fifo_read(uart, buf, size);
	if (rx < 0) {
    19d8:	2800      	cmp	r0, #0
    19da:	db02      	blt.n	19e2 <read_uart+0x16>

		return -EIO;
	}

	return rx;
}
    19dc:	bd10      	pop	{r4, pc}
	}

	return 0;
    19de:	2000      	movs	r0, #0
    19e0:	e7fa      	b.n	19d8 <read_uart+0xc>
 *
 * @return N/A
 */
static inline void uart_irq_rx_disable(struct device *dev)
{
	const struct uart_driver_api *api = dev->driver_api;
    19e2:	6863      	ldr	r3, [r4, #4]

	if (api->irq_rx_disable) {
    19e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    19e6:	b123      	cbz	r3, 19f2 <read_uart+0x26>
		api->irq_rx_disable(dev);
    19e8:	4620      	mov	r0, r4
    19ea:	4798      	blx	r3
		return -EIO;
    19ec:	f06f 0004 	mvn.w	r0, #4
    19f0:	bd10      	pop	{r4, pc}
    19f2:	f06f 0004 	mvn.w	r0, #4
    19f6:	e7f1      	b.n	19dc <read_uart+0x10>

000019f8 <console_input_init>:
		}
	}
}

static void console_input_init(void)
{
    19f8:	b500      	push	{lr}
    19fa:	b083      	sub	sp, #12
	u8_t c;

	uart_irq_rx_disable(uart_console_dev);
    19fc:	4b19      	ldr	r3, [pc, #100]	; (1a64 <console_input_init+0x6c>)
    19fe:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a00:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_disable) {
    1a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a04:	b103      	cbz	r3, 1a08 <console_input_init+0x10>
		api->irq_rx_disable(dev);
    1a06:	4798      	blx	r3
	uart_irq_tx_disable(uart_console_dev);
    1a08:	4b16      	ldr	r3, [pc, #88]	; (1a64 <console_input_init+0x6c>)
    1a0a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a0c:	6843      	ldr	r3, [r0, #4]
	if (api->irq_tx_disable) {
    1a0e:	699b      	ldr	r3, [r3, #24]
    1a10:	b103      	cbz	r3, 1a14 <console_input_init+0x1c>
		api->irq_tx_disable(dev);
    1a12:	4798      	blx	r3

	uart_irq_callback_set(uart_console_dev, uart_console_isr);
    1a14:	4b13      	ldr	r3, [pc, #76]	; (1a64 <console_input_init+0x6c>)
    1a16:	6818      	ldr	r0, [r3, #0]
 * @return N/A
 */
static inline void uart_irq_callback_set(struct device *dev,
					 uart_irq_callback_t cb)
{
	const struct uart_driver_api *api = dev->driver_api;
    1a18:	6843      	ldr	r3, [r0, #4]

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    1a1a:	b18b      	cbz	r3, 1a40 <console_input_init+0x48>
    1a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1a1e:	b17b      	cbz	r3, 1a40 <console_input_init+0x48>
		api->irq_callback_set(dev, cb);
    1a20:	4911      	ldr	r1, [pc, #68]	; (1a68 <console_input_init+0x70>)
    1a22:	4798      	blx	r3
    1a24:	e00c      	b.n	1a40 <console_input_init+0x48>
		return api->fifo_read(dev, rx_data, size);
    1a26:	2201      	movs	r2, #1
    1a28:	f10d 0107 	add.w	r1, sp, #7
    1a2c:	4798      	blx	r3
    1a2e:	e007      	b.n	1a40 <console_input_init+0x48>
	return 0;
    1a30:	2000      	movs	r0, #0

	/* Drain the fifo */
	while (uart_irq_rx_ready(uart_console_dev)) {
    1a32:	b168      	cbz	r0, 1a50 <console_input_init+0x58>
		uart_fifo_read(uart_console_dev, &c, 1);
    1a34:	4b0b      	ldr	r3, [pc, #44]	; (1a64 <console_input_init+0x6c>)
    1a36:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a38:	6843      	ldr	r3, [r0, #4]
	if (api->fifo_read) {
    1a3a:	691b      	ldr	r3, [r3, #16]
    1a3c:	2b00      	cmp	r3, #0
    1a3e:	d1f2      	bne.n	1a26 <console_input_init+0x2e>
	while (uart_irq_rx_ready(uart_console_dev)) {
    1a40:	4b08      	ldr	r3, [pc, #32]	; (1a64 <console_input_init+0x6c>)
    1a42:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a44:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a48:	2b00      	cmp	r3, #0
    1a4a:	d0f1      	beq.n	1a30 <console_input_init+0x38>
		return api->irq_rx_ready(dev);
    1a4c:	4798      	blx	r3
    1a4e:	e7f0      	b.n	1a32 <console_input_init+0x3a>
	}

	uart_irq_rx_enable(uart_console_dev);
    1a50:	4b04      	ldr	r3, [pc, #16]	; (1a64 <console_input_init+0x6c>)
    1a52:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a54:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_enable) {
    1a56:	6a1b      	ldr	r3, [r3, #32]
    1a58:	b103      	cbz	r3, 1a5c <console_input_init+0x64>
		api->irq_rx_enable(dev);
    1a5a:	4798      	blx	r3
}
    1a5c:	b003      	add	sp, #12
    1a5e:	f85d fb04 	ldr.w	pc, [sp], #4
    1a62:	bf00      	nop
    1a64:	200003b4 	.word	0x200003b4
    1a68:	00001d65 	.word	0x00001d65

00001a6c <del_char>:
{
    1a6c:	b570      	push	{r4, r5, r6, lr}
    1a6e:	4606      	mov	r6, r0
    1a70:	460d      	mov	r5, r1
	uart_poll_out(uart_console_dev, '\b');
    1a72:	4b17      	ldr	r3, [pc, #92]	; (1ad0 <del_char+0x64>)
    1a74:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a76:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1a78:	685b      	ldr	r3, [r3, #4]
    1a7a:	2108      	movs	r1, #8
    1a7c:	4798      	blx	r3
	if (end == 0) {
    1a7e:	b11d      	cbz	r5, 1a88 <del_char+0x1c>
	printk("\x1b[s");
    1a80:	4814      	ldr	r0, [pc, #80]	; (1ad4 <del_char+0x68>)
    1a82:	f001 fa37 	bl	2ef4 <printk>
    1a86:	e014      	b.n	1ab2 <del_char+0x46>
		uart_poll_out(uart_console_dev, ' ');
    1a88:	4c11      	ldr	r4, [pc, #68]	; (1ad0 <del_char+0x64>)
    1a8a:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a8c:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1a8e:	685b      	ldr	r3, [r3, #4]
    1a90:	2120      	movs	r1, #32
    1a92:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\b');
    1a94:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a96:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1a98:	685b      	ldr	r3, [r3, #4]
    1a9a:	2108      	movs	r1, #8
    1a9c:	4798      	blx	r3
    1a9e:	bd70      	pop	{r4, r5, r6, pc}
		*pos = *(pos + 1);
    1aa0:	7871      	ldrb	r1, [r6, #1]
    1aa2:	f806 1b01 	strb.w	r1, [r6], #1
		uart_poll_out(uart_console_dev, *(pos++));
    1aa6:	4b0a      	ldr	r3, [pc, #40]	; (1ad0 <del_char+0x64>)
    1aa8:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1aaa:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1aac:	685b      	ldr	r3, [r3, #4]
    1aae:	4798      	blx	r3
	while (end-- > 0) {
    1ab0:	4625      	mov	r5, r4
    1ab2:	1e6b      	subs	r3, r5, #1
    1ab4:	b2dc      	uxtb	r4, r3
    1ab6:	2d00      	cmp	r5, #0
    1ab8:	d1f2      	bne.n	1aa0 <del_char+0x34>
	uart_poll_out(uart_console_dev, ' ');
    1aba:	4b05      	ldr	r3, [pc, #20]	; (1ad0 <del_char+0x64>)
    1abc:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1abe:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1ac0:	685b      	ldr	r3, [r3, #4]
    1ac2:	2120      	movs	r1, #32
    1ac4:	4798      	blx	r3
	printk("\x1b[u");
    1ac6:	4804      	ldr	r0, [pc, #16]	; (1ad8 <del_char+0x6c>)
    1ac8:	f001 fa14 	bl	2ef4 <printk>
    1acc:	bd70      	pop	{r4, r5, r6, pc}
    1ace:	bf00      	nop
    1ad0:	200003b4 	.word	0x200003b4
    1ad4:	0002e77c 	.word	0x0002e77c
    1ad8:	0002e780 	.word	0x0002e780

00001adc <insert_char>:
{
    1adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ae0:	4605      	mov	r5, r0
    1ae2:	4688      	mov	r8, r1
    1ae4:	4614      	mov	r4, r2
	uart_poll_out(uart_console_dev, c);
    1ae6:	4b14      	ldr	r3, [pc, #80]	; (1b38 <insert_char+0x5c>)
    1ae8:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1aea:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1aec:	685b      	ldr	r3, [r3, #4]
    1aee:	4798      	blx	r3
	if (end == 0) {
    1af0:	b91c      	cbnz	r4, 1afa <insert_char+0x1e>
		*pos = c;
    1af2:	f885 8000 	strb.w	r8, [r5]
		return;
    1af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tmp = *pos;
    1afa:	462e      	mov	r6, r5
    1afc:	f816 7b01 	ldrb.w	r7, [r6], #1
	*(pos++) = c;
    1b00:	f885 8000 	strb.w	r8, [r5]
	printk("\x1b[s");
    1b04:	480d      	ldr	r0, [pc, #52]	; (1b3c <insert_char+0x60>)
    1b06:	f001 f9f5 	bl	2ef4 <printk>
    1b0a:	e00c      	b.n	1b26 <insert_char+0x4a>
		uart_poll_out(uart_console_dev, tmp);
    1b0c:	4b0a      	ldr	r3, [pc, #40]	; (1b38 <insert_char+0x5c>)
    1b0e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b10:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b12:	685b      	ldr	r3, [r3, #4]
    1b14:	4639      	mov	r1, r7
    1b16:	4798      	blx	r3
		c = *pos;
    1b18:	4633      	mov	r3, r6
    1b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
		*(pos++) = tmp;
    1b1e:	7037      	strb	r7, [r6, #0]
		tmp = c;
    1b20:	4617      	mov	r7, r2
	while (end-- > 0) {
    1b22:	462c      	mov	r4, r5
		*(pos++) = tmp;
    1b24:	461e      	mov	r6, r3
	while (end-- > 0) {
    1b26:	1e63      	subs	r3, r4, #1
    1b28:	b2dd      	uxtb	r5, r3
    1b2a:	2c00      	cmp	r4, #0
    1b2c:	d1ee      	bne.n	1b0c <insert_char+0x30>
	printk("\x1b[u");
    1b2e:	4804      	ldr	r0, [pc, #16]	; (1b40 <insert_char+0x64>)
    1b30:	f001 f9e0 	bl	2ef4 <printk>
    1b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b38:	200003b4 	.word	0x200003b4
    1b3c:	0002e77c 	.word	0x0002e77c
    1b40:	0002e780 	.word	0x0002e780

00001b44 <handle_ansi>:
{
    1b44:	b538      	push	{r3, r4, r5, lr}
    1b46:	4604      	mov	r4, r0
    1b48:	460d      	mov	r5, r1
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1b4a:	4b7f      	ldr	r3, [pc, #508]	; (1d48 <handle_ansi+0x204>)
    1b4c:	f3bf 8f5b 	dmb	ish
    1b50:	e853 2f00 	ldrex	r2, [r3]
    1b54:	f022 0104 	bic.w	r1, r2, #4
    1b58:	e843 1000 	strex	r0, r1, [r3]
    1b5c:	2800      	cmp	r0, #0
    1b5e:	d1f7      	bne.n	1b50 <handle_ansi+0xc>
    1b60:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(&esc_state, ESC_ANSI_FIRST)) {
    1b64:	f012 0f04 	tst.w	r2, #4
    1b68:	d03c      	beq.n	1be4 <handle_ansi+0xa0>
		if (!isdigit(byte)) {
    1b6a:	f028 fa51 	bl	2a010 <__locale_ctype_ptr>
    1b6e:	4420      	add	r0, r4
    1b70:	7843      	ldrb	r3, [r0, #1]
    1b72:	f013 0f04 	tst.w	r3, #4
    1b76:	d121      	bne.n	1bbc <handle_ansi+0x78>
			ansi_val = 1;
    1b78:	2201      	movs	r2, #1
    1b7a:	4b74      	ldr	r3, [pc, #464]	; (1d4c <handle_ansi+0x208>)
    1b7c:	601a      	str	r2, [r3, #0]
	switch (byte) {
    1b7e:	2c46      	cmp	r4, #70	; 0x46
    1b80:	f000 80d0 	beq.w	1d24 <handle_ansi+0x1e0>
    1b84:	f200 8086 	bhi.w	1c94 <handle_ansi+0x150>
    1b88:	2c43      	cmp	r4, #67	; 0x43
    1b8a:	f000 80a7 	beq.w	1cdc <handle_ansi+0x198>
    1b8e:	2c44      	cmp	r4, #68	; 0x44
    1b90:	d106      	bne.n	1ba0 <handle_ansi+0x5c>
		if (ansi_val > cur) {
    1b92:	4b6f      	ldr	r3, [pc, #444]	; (1d50 <handle_ansi+0x20c>)
    1b94:	781b      	ldrb	r3, [r3, #0]
    1b96:	4a6d      	ldr	r2, [pc, #436]	; (1d4c <handle_ansi+0x208>)
    1b98:	6811      	ldr	r1, [r2, #0]
    1b9a:	428b      	cmp	r3, r1
    1b9c:	f080 8092 	bcs.w	1cc4 <handle_ansi+0x180>
    1ba0:	4b69      	ldr	r3, [pc, #420]	; (1d48 <handle_ansi+0x204>)
    1ba2:	f3bf 8f5b 	dmb	ish
    1ba6:	e853 2f00 	ldrex	r2, [r3]
    1baa:	f022 0202 	bic.w	r2, r2, #2
    1bae:	e843 2100 	strex	r1, r2, [r3]
    1bb2:	2900      	cmp	r1, #0
    1bb4:	d1f7      	bne.n	1ba6 <handle_ansi+0x62>
    1bb6:	f3bf 8f5b 	dmb	ish
    1bba:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1bbc:	4b62      	ldr	r3, [pc, #392]	; (1d48 <handle_ansi+0x204>)
    1bbe:	f3bf 8f5b 	dmb	ish
    1bc2:	e853 2f00 	ldrex	r2, [r3]
    1bc6:	f042 0208 	orr.w	r2, r2, #8
    1bca:	e843 2100 	strex	r1, r2, [r3]
    1bce:	2900      	cmp	r1, #0
    1bd0:	d1f7      	bne.n	1bc2 <handle_ansi+0x7e>
    1bd2:	f3bf 8f5b 	dmb	ish
		ansi_val = byte - '0';
    1bd6:	3c30      	subs	r4, #48	; 0x30
    1bd8:	4b5c      	ldr	r3, [pc, #368]	; (1d4c <handle_ansi+0x208>)
    1bda:	601c      	str	r4, [r3, #0]
		ansi_val_2 = 0;
    1bdc:	2200      	movs	r2, #0
    1bde:	4b5d      	ldr	r3, [pc, #372]	; (1d54 <handle_ansi+0x210>)
    1be0:	601a      	str	r2, [r3, #0]
		return;
    1be2:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1be4:	f3bf 8f5b 	dmb	ish
    1be8:	4b57      	ldr	r3, [pc, #348]	; (1d48 <handle_ansi+0x204>)
    1bea:	681b      	ldr	r3, [r3, #0]
    1bec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(&esc_state, ESC_ANSI_VAL)) {
    1bf0:	f013 0f08 	tst.w	r3, #8
    1bf4:	d0c3      	beq.n	1b7e <handle_ansi+0x3a>
		if (isdigit(byte)) {
    1bf6:	f028 fa0b 	bl	2a010 <__locale_ctype_ptr>
    1bfa:	4420      	add	r0, r4
    1bfc:	7843      	ldrb	r3, [r0, #1]
    1bfe:	f013 0f04 	tst.w	r3, #4
    1c02:	d11b      	bne.n	1c3c <handle_ansi+0xf8>
		if (byte == ';' &&
    1c04:	2c3b      	cmp	r4, #59	; 0x3b
    1c06:	d034      	beq.n	1c72 <handle_ansi+0x12e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1c08:	4b4f      	ldr	r3, [pc, #316]	; (1d48 <handle_ansi+0x204>)
    1c0a:	f3bf 8f5b 	dmb	ish
    1c0e:	e853 2f00 	ldrex	r2, [r3]
    1c12:	f022 0208 	bic.w	r2, r2, #8
    1c16:	e843 2100 	strex	r1, r2, [r3]
    1c1a:	2900      	cmp	r1, #0
    1c1c:	d1f7      	bne.n	1c0e <handle_ansi+0xca>
    1c1e:	f3bf 8f5b 	dmb	ish
    1c22:	f3bf 8f5b 	dmb	ish
    1c26:	e853 2f00 	ldrex	r2, [r3]
    1c2a:	f022 0210 	bic.w	r2, r2, #16
    1c2e:	e843 2100 	strex	r1, r2, [r3]
    1c32:	2900      	cmp	r1, #0
    1c34:	d1f7      	bne.n	1c26 <handle_ansi+0xe2>
    1c36:	f3bf 8f5b 	dmb	ish
    1c3a:	e7a0      	b.n	1b7e <handle_ansi+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1c3c:	f3bf 8f5b 	dmb	ish
    1c40:	4b41      	ldr	r3, [pc, #260]	; (1d48 <handle_ansi+0x204>)
    1c42:	681b      	ldr	r3, [r3, #0]
    1c44:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(&esc_state, ESC_ANSI_VAL_2)) {
    1c48:	f013 0f10 	tst.w	r3, #16
    1c4c:	d008      	beq.n	1c60 <handle_ansi+0x11c>
				ansi_val_2 *= 10;
    1c4e:	4941      	ldr	r1, [pc, #260]	; (1d54 <handle_ansi+0x210>)
    1c50:	680a      	ldr	r2, [r1, #0]
    1c52:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1c56:	0053      	lsls	r3, r2, #1
				ansi_val_2 += byte - '0';
    1c58:	4423      	add	r3, r4
    1c5a:	3b30      	subs	r3, #48	; 0x30
    1c5c:	600b      	str	r3, [r1, #0]
    1c5e:	bd38      	pop	{r3, r4, r5, pc}
				ansi_val *= 10;
    1c60:	493a      	ldr	r1, [pc, #232]	; (1d4c <handle_ansi+0x208>)
    1c62:	680a      	ldr	r2, [r1, #0]
    1c64:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1c68:	0053      	lsls	r3, r2, #1
				ansi_val += byte - '0';
    1c6a:	4423      	add	r3, r4
    1c6c:	3b30      	subs	r3, #48	; 0x30
    1c6e:	600b      	str	r3, [r1, #0]
    1c70:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1c72:	4b35      	ldr	r3, [pc, #212]	; (1d48 <handle_ansi+0x204>)
    1c74:	f3bf 8f5b 	dmb	ish
    1c78:	e853 2f00 	ldrex	r2, [r3]
    1c7c:	f042 0110 	orr.w	r1, r2, #16
    1c80:	e843 1000 	strex	r0, r1, [r3]
    1c84:	2800      	cmp	r0, #0
    1c86:	d1f7      	bne.n	1c78 <handle_ansi+0x134>
    1c88:	f3bf 8f5b 	dmb	ish
		if (byte == ';' &&
    1c8c:	f012 0f10 	tst.w	r2, #16
    1c90:	d1ba      	bne.n	1c08 <handle_ansi+0xc4>
    1c92:	e792      	b.n	1bba <handle_ansi+0x76>
	switch (byte) {
    1c94:	2c48      	cmp	r4, #72	; 0x48
    1c96:	d034      	beq.n	1d02 <handle_ansi+0x1be>
    1c98:	2c7e      	cmp	r4, #126	; 0x7e
    1c9a:	d181      	bne.n	1ba0 <handle_ansi+0x5c>
		if (!end) {
    1c9c:	4b2e      	ldr	r3, [pc, #184]	; (1d58 <handle_ansi+0x214>)
    1c9e:	781b      	ldrb	r3, [r3, #0]
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	f43f af7d 	beq.w	1ba0 <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1ca6:	2101      	movs	r1, #1
    1ca8:	482c      	ldr	r0, [pc, #176]	; (1d5c <handle_ansi+0x218>)
    1caa:	f001 f923 	bl	2ef4 <printk>
		del_char(&line[cur], --end);
    1cae:	4b28      	ldr	r3, [pc, #160]	; (1d50 <handle_ansi+0x20c>)
    1cb0:	7818      	ldrb	r0, [r3, #0]
    1cb2:	4b29      	ldr	r3, [pc, #164]	; (1d58 <handle_ansi+0x214>)
    1cb4:	7819      	ldrb	r1, [r3, #0]
    1cb6:	3901      	subs	r1, #1
    1cb8:	b2c9      	uxtb	r1, r1
    1cba:	7019      	strb	r1, [r3, #0]
    1cbc:	4428      	add	r0, r5
    1cbe:	f7ff fed5 	bl	1a6c <del_char>
		break;
    1cc2:	e76d      	b.n	1ba0 <handle_ansi+0x5c>
		end += ansi_val;
    1cc4:	b2c8      	uxtb	r0, r1
    1cc6:	4c24      	ldr	r4, [pc, #144]	; (1d58 <handle_ansi+0x214>)
    1cc8:	7822      	ldrb	r2, [r4, #0]
    1cca:	4402      	add	r2, r0
    1ccc:	7022      	strb	r2, [r4, #0]
		cur -= ansi_val;
    1cce:	1a1b      	subs	r3, r3, r0
    1cd0:	4a1f      	ldr	r2, [pc, #124]	; (1d50 <handle_ansi+0x20c>)
    1cd2:	7013      	strb	r3, [r2, #0]
	printk("\x1b[%uD", count);
    1cd4:	4822      	ldr	r0, [pc, #136]	; (1d60 <handle_ansi+0x21c>)
    1cd6:	f001 f90d 	bl	2ef4 <printk>
    1cda:	e761      	b.n	1ba0 <handle_ansi+0x5c>
		if (ansi_val > end) {
    1cdc:	4b1e      	ldr	r3, [pc, #120]	; (1d58 <handle_ansi+0x214>)
    1cde:	781b      	ldrb	r3, [r3, #0]
    1ce0:	4a1a      	ldr	r2, [pc, #104]	; (1d4c <handle_ansi+0x208>)
    1ce2:	6811      	ldr	r1, [r2, #0]
    1ce4:	428b      	cmp	r3, r1
    1ce6:	f4ff af5b 	bcc.w	1ba0 <handle_ansi+0x5c>
		end -= ansi_val;
    1cea:	b2ca      	uxtb	r2, r1
    1cec:	1a9b      	subs	r3, r3, r2
    1cee:	481a      	ldr	r0, [pc, #104]	; (1d58 <handle_ansi+0x214>)
    1cf0:	7003      	strb	r3, [r0, #0]
		cur += ansi_val;
    1cf2:	4b17      	ldr	r3, [pc, #92]	; (1d50 <handle_ansi+0x20c>)
    1cf4:	7818      	ldrb	r0, [r3, #0]
    1cf6:	4402      	add	r2, r0
    1cf8:	701a      	strb	r2, [r3, #0]
	printk("\x1b[%uC", count);
    1cfa:	4818      	ldr	r0, [pc, #96]	; (1d5c <handle_ansi+0x218>)
    1cfc:	f001 f8fa 	bl	2ef4 <printk>
    1d00:	e74e      	b.n	1ba0 <handle_ansi+0x5c>
		if (!cur) {
    1d02:	4b13      	ldr	r3, [pc, #76]	; (1d50 <handle_ansi+0x20c>)
    1d04:	7819      	ldrb	r1, [r3, #0]
    1d06:	2900      	cmp	r1, #0
    1d08:	f43f af4a 	beq.w	1ba0 <handle_ansi+0x5c>
	printk("\x1b[%uD", count);
    1d0c:	4814      	ldr	r0, [pc, #80]	; (1d60 <handle_ansi+0x21c>)
    1d0e:	f001 f8f1 	bl	2ef4 <printk>
		end += cur;
    1d12:	4911      	ldr	r1, [pc, #68]	; (1d58 <handle_ansi+0x214>)
    1d14:	4a0e      	ldr	r2, [pc, #56]	; (1d50 <handle_ansi+0x20c>)
    1d16:	780b      	ldrb	r3, [r1, #0]
    1d18:	7810      	ldrb	r0, [r2, #0]
    1d1a:	4403      	add	r3, r0
    1d1c:	700b      	strb	r3, [r1, #0]
		cur = 0;
    1d1e:	2300      	movs	r3, #0
    1d20:	7013      	strb	r3, [r2, #0]
		break;
    1d22:	e73d      	b.n	1ba0 <handle_ansi+0x5c>
		if (!end) {
    1d24:	4b0c      	ldr	r3, [pc, #48]	; (1d58 <handle_ansi+0x214>)
    1d26:	7819      	ldrb	r1, [r3, #0]
    1d28:	2900      	cmp	r1, #0
    1d2a:	f43f af39 	beq.w	1ba0 <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1d2e:	480b      	ldr	r0, [pc, #44]	; (1d5c <handle_ansi+0x218>)
    1d30:	f001 f8e0 	bl	2ef4 <printk>
		cur += end;
    1d34:	4906      	ldr	r1, [pc, #24]	; (1d50 <handle_ansi+0x20c>)
    1d36:	4a08      	ldr	r2, [pc, #32]	; (1d58 <handle_ansi+0x214>)
    1d38:	780b      	ldrb	r3, [r1, #0]
    1d3a:	7810      	ldrb	r0, [r2, #0]
    1d3c:	4403      	add	r3, r0
    1d3e:	700b      	strb	r3, [r1, #0]
		end = 0;
    1d40:	2300      	movs	r3, #0
    1d42:	7013      	strb	r3, [r2, #0]
		break;
    1d44:	e72c      	b.n	1ba0 <handle_ansi+0x5c>
    1d46:	bf00      	nop
    1d48:	200003ac 	.word	0x200003ac
    1d4c:	20000394 	.word	0x20000394
    1d50:	200003a8 	.word	0x200003a8
    1d54:	20000398 	.word	0x20000398
    1d58:	200003a9 	.word	0x200003a9
    1d5c:	0002e78c 	.word	0x0002e78c
    1d60:	0002e784 	.word	0x0002e784

00001d64 <uart_console_isr>:
{
    1d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d68:	b082      	sub	sp, #8
	while (uart_irq_update(uart_console_dev) &&
    1d6a:	e001      	b.n	1d70 <uart_console_isr+0xc>
	return 0;
    1d6c:	2000      	movs	r0, #0
		if (!uart_irq_rx_ready(uart_console_dev)) {
    1d6e:	b9d8      	cbnz	r0, 1da8 <uart_console_isr+0x44>
	while (uart_irq_update(uart_console_dev) &&
    1d70:	4b78      	ldr	r3, [pc, #480]	; (1f54 <uart_console_isr+0x1f0>)
    1d72:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1d74:	6843      	ldr	r3, [r0, #4]
	if (api->irq_update) {
    1d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1d78:	2b00      	cmp	r3, #0
    1d7a:	f000 80e7 	beq.w	1f4c <uart_console_isr+0x1e8>
		return api->irq_update(dev);
    1d7e:	4798      	blx	r3
    1d80:	2800      	cmp	r0, #0
    1d82:	d037      	beq.n	1df4 <uart_console_isr+0x90>
	       uart_irq_is_pending(uart_console_dev)) {
    1d84:	4b73      	ldr	r3, [pc, #460]	; (1f54 <uart_console_isr+0x1f0>)
    1d86:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1d88:	6843      	ldr	r3, [r0, #4]
	if (api->irq_is_pending)	{
    1d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1d8c:	2b00      	cmp	r3, #0
    1d8e:	f000 80df 	beq.w	1f50 <uart_console_isr+0x1ec>
		return api->irq_is_pending(dev);
    1d92:	4798      	blx	r3
	while (uart_irq_update(uart_console_dev) &&
    1d94:	2800      	cmp	r0, #0
    1d96:	d02d      	beq.n	1df4 <uart_console_isr+0x90>
		if (!uart_irq_rx_ready(uart_console_dev)) {
    1d98:	4b6e      	ldr	r3, [pc, #440]	; (1f54 <uart_console_isr+0x1f0>)
    1d9a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1d9c:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1da0:	2b00      	cmp	r3, #0
    1da2:	d0e3      	beq.n	1d6c <uart_console_isr+0x8>
		return api->irq_rx_ready(dev);
    1da4:	4798      	blx	r3
    1da6:	e7e2      	b.n	1d6e <uart_console_isr+0xa>
		rx = read_uart(uart_console_dev, &byte, 1);
    1da8:	2201      	movs	r2, #1
    1daa:	f10d 0107 	add.w	r1, sp, #7
    1dae:	4b69      	ldr	r3, [pc, #420]	; (1f54 <uart_console_isr+0x1f0>)
    1db0:	6818      	ldr	r0, [r3, #0]
    1db2:	f7ff fe0b 	bl	19cc <read_uart>
		if (rx < 0) {
    1db6:	2800      	cmp	r0, #0
    1db8:	db1c      	blt.n	1df4 <uart_console_isr+0x90>
		if (!cmd) {
    1dba:	4b67      	ldr	r3, [pc, #412]	; (1f58 <uart_console_isr+0x1f4>)
    1dbc:	681b      	ldr	r3, [r3, #0]
    1dbe:	b183      	cbz	r3, 1de2 <uart_console_isr+0x7e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1dc0:	f3bf 8f5b 	dmb	ish
    1dc4:	4b65      	ldr	r3, [pc, #404]	; (1f5c <uart_console_isr+0x1f8>)
    1dc6:	681b      	ldr	r3, [r3, #0]
    1dc8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(&esc_state, ESC_ANSI)) {
    1dcc:	f013 0f02 	tst.w	r3, #2
    1dd0:	d013      	beq.n	1dfa <uart_console_isr+0x96>
			handle_ansi(byte, cmd->line);
    1dd2:	4b61      	ldr	r3, [pc, #388]	; (1f58 <uart_console_isr+0x1f4>)
    1dd4:	6819      	ldr	r1, [r3, #0]
    1dd6:	3104      	adds	r1, #4
    1dd8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1ddc:	f7ff feb2 	bl	1b44 <handle_ansi>
			continue;
    1de0:	e7c6      	b.n	1d70 <uart_console_isr+0xc>
			cmd = k_fifo_get(avail_queue, K_NO_WAIT);
    1de2:	2100      	movs	r1, #0
    1de4:	4b5e      	ldr	r3, [pc, #376]	; (1f60 <uart_console_isr+0x1fc>)
    1de6:	6818      	ldr	r0, [r3, #0]
    1de8:	f026 fe88 	bl	28afc <k_queue_get>
    1dec:	4b5a      	ldr	r3, [pc, #360]	; (1f58 <uart_console_isr+0x1f4>)
    1dee:	6018      	str	r0, [r3, #0]
			if (!cmd) {
    1df0:	2800      	cmp	r0, #0
    1df2:	d1e5      	bne.n	1dc0 <uart_console_isr+0x5c>
}
    1df4:	b002      	add	sp, #8
    1df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1dfa:	4b58      	ldr	r3, [pc, #352]	; (1f5c <uart_console_isr+0x1f8>)
    1dfc:	f3bf 8f5b 	dmb	ish
    1e00:	e853 2f00 	ldrex	r2, [r3]
    1e04:	f022 0101 	bic.w	r1, r2, #1
    1e08:	e843 1000 	strex	r0, r1, [r3]
    1e0c:	2800      	cmp	r0, #0
    1e0e:	d1f7      	bne.n	1e00 <uart_console_isr+0x9c>
    1e10:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(&esc_state, ESC_ESC)) {
    1e14:	f012 0f01 	tst.w	r2, #1
    1e18:	d01d      	beq.n	1e56 <uart_console_isr+0xf2>
			if (byte == ANSI_ESC) {
    1e1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1e1e:	2b5b      	cmp	r3, #91	; 0x5b
    1e20:	d1a6      	bne.n	1d70 <uart_console_isr+0xc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1e22:	4b4e      	ldr	r3, [pc, #312]	; (1f5c <uart_console_isr+0x1f8>)
    1e24:	f3bf 8f5b 	dmb	ish
    1e28:	e853 2f00 	ldrex	r2, [r3]
    1e2c:	f042 0202 	orr.w	r2, r2, #2
    1e30:	e843 2100 	strex	r1, r2, [r3]
    1e34:	2900      	cmp	r1, #0
    1e36:	d1f7      	bne.n	1e28 <uart_console_isr+0xc4>
    1e38:	f3bf 8f5b 	dmb	ish
    1e3c:	f3bf 8f5b 	dmb	ish
    1e40:	e853 2f00 	ldrex	r2, [r3]
    1e44:	f042 0204 	orr.w	r2, r2, #4
    1e48:	e843 2100 	strex	r1, r2, [r3]
    1e4c:	2900      	cmp	r1, #0
    1e4e:	d1f7      	bne.n	1e40 <uart_console_isr+0xdc>
    1e50:	f3bf 8f5b 	dmb	ish
			continue;
    1e54:	e78c      	b.n	1d70 <uart_console_isr+0xc>
		if (!isprint(byte)) {
    1e56:	f028 f8db 	bl	2a010 <__locale_ctype_ptr>
    1e5a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    1e5e:	4408      	add	r0, r1
    1e60:	7843      	ldrb	r3, [r0, #1]
    1e62:	f013 0f97 	tst.w	r3, #151	; 0x97
    1e66:	d15f      	bne.n	1f28 <uart_console_isr+0x1c4>
			switch (byte) {
    1e68:	290d      	cmp	r1, #13
    1e6a:	d03c      	beq.n	1ee6 <uart_console_isr+0x182>
    1e6c:	d916      	bls.n	1e9c <uart_console_isr+0x138>
    1e6e:	291b      	cmp	r1, #27
    1e70:	d02b      	beq.n	1eca <uart_console_isr+0x166>
    1e72:	297f      	cmp	r1, #127	; 0x7f
    1e74:	f47f af7c 	bne.w	1d70 <uart_console_isr+0xc>
				if (cur > 0) {
    1e78:	4b3a      	ldr	r3, [pc, #232]	; (1f64 <uart_console_isr+0x200>)
    1e7a:	781b      	ldrb	r3, [r3, #0]
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	f43f af77 	beq.w	1d70 <uart_console_isr+0xc>
					del_char(&cmd->line[--cur], end);
    1e82:	4a35      	ldr	r2, [pc, #212]	; (1f58 <uart_console_isr+0x1f4>)
    1e84:	6812      	ldr	r2, [r2, #0]
    1e86:	3b01      	subs	r3, #1
    1e88:	b2db      	uxtb	r3, r3
    1e8a:	4936      	ldr	r1, [pc, #216]	; (1f64 <uart_console_isr+0x200>)
    1e8c:	700b      	strb	r3, [r1, #0]
    1e8e:	4413      	add	r3, r2
    1e90:	4a35      	ldr	r2, [pc, #212]	; (1f68 <uart_console_isr+0x204>)
    1e92:	7811      	ldrb	r1, [r2, #0]
    1e94:	1d18      	adds	r0, r3, #4
    1e96:	f7ff fde9 	bl	1a6c <del_char>
    1e9a:	e769      	b.n	1d70 <uart_console_isr+0xc>
			switch (byte) {
    1e9c:	2909      	cmp	r1, #9
    1e9e:	f47f af67 	bne.w	1d70 <uart_console_isr+0xc>
				if (completion_cb && !end) {
    1ea2:	4b32      	ldr	r3, [pc, #200]	; (1f6c <uart_console_isr+0x208>)
    1ea4:	681b      	ldr	r3, [r3, #0]
    1ea6:	2b00      	cmp	r3, #0
    1ea8:	f43f af62 	beq.w	1d70 <uart_console_isr+0xc>
    1eac:	4a2e      	ldr	r2, [pc, #184]	; (1f68 <uart_console_isr+0x204>)
    1eae:	7812      	ldrb	r2, [r2, #0]
    1eb0:	2a00      	cmp	r2, #0
    1eb2:	f47f af5d 	bne.w	1d70 <uart_console_isr+0xc>
					cur += completion_cb(cmd->line, cur);
    1eb6:	4a28      	ldr	r2, [pc, #160]	; (1f58 <uart_console_isr+0x1f4>)
    1eb8:	6810      	ldr	r0, [r2, #0]
    1eba:	4c2a      	ldr	r4, [pc, #168]	; (1f64 <uart_console_isr+0x200>)
    1ebc:	7821      	ldrb	r1, [r4, #0]
    1ebe:	3004      	adds	r0, #4
    1ec0:	4798      	blx	r3
    1ec2:	7823      	ldrb	r3, [r4, #0]
    1ec4:	4403      	add	r3, r0
    1ec6:	7023      	strb	r3, [r4, #0]
			continue;
    1ec8:	e752      	b.n	1d70 <uart_console_isr+0xc>
    1eca:	4b24      	ldr	r3, [pc, #144]	; (1f5c <uart_console_isr+0x1f8>)
    1ecc:	f3bf 8f5b 	dmb	ish
    1ed0:	e853 2f00 	ldrex	r2, [r3]
    1ed4:	f042 0201 	orr.w	r2, r2, #1
    1ed8:	e843 2100 	strex	r1, r2, [r3]
    1edc:	2900      	cmp	r1, #0
    1ede:	d1f7      	bne.n	1ed0 <uart_console_isr+0x16c>
    1ee0:	f3bf 8f5b 	dmb	ish
    1ee4:	e744      	b.n	1d70 <uart_console_isr+0xc>
				cmd->line[cur + end] = '\0';
    1ee6:	4d1c      	ldr	r5, [pc, #112]	; (1f58 <uart_console_isr+0x1f4>)
    1ee8:	682b      	ldr	r3, [r5, #0]
    1eea:	4f1e      	ldr	r7, [pc, #120]	; (1f64 <uart_console_isr+0x200>)
    1eec:	783a      	ldrb	r2, [r7, #0]
    1eee:	4e1e      	ldr	r6, [pc, #120]	; (1f68 <uart_console_isr+0x204>)
    1ef0:	7831      	ldrb	r1, [r6, #0]
    1ef2:	440a      	add	r2, r1
    1ef4:	4413      	add	r3, r2
    1ef6:	2400      	movs	r4, #0
    1ef8:	711c      	strb	r4, [r3, #4]
				uart_poll_out(uart_console_dev, '\r');
    1efa:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1f54 <uart_console_isr+0x1f0>
    1efe:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    1f02:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1f04:	685b      	ldr	r3, [r3, #4]
    1f06:	210d      	movs	r1, #13
    1f08:	4798      	blx	r3
				uart_poll_out(uart_console_dev, '\n');
    1f0a:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    1f0e:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1f10:	685b      	ldr	r3, [r3, #4]
    1f12:	210a      	movs	r1, #10
    1f14:	4798      	blx	r3
				cur = 0;
    1f16:	703c      	strb	r4, [r7, #0]
				end = 0;
    1f18:	7034      	strb	r4, [r6, #0]
				k_fifo_put(lines_queue, cmd);
    1f1a:	6829      	ldr	r1, [r5, #0]
    1f1c:	4b14      	ldr	r3, [pc, #80]	; (1f70 <uart_console_isr+0x20c>)
    1f1e:	6818      	ldr	r0, [r3, #0]
    1f20:	f026 fdc4 	bl	28aac <k_queue_append>
				cmd = NULL;
    1f24:	602c      	str	r4, [r5, #0]
				break;
    1f26:	e723      	b.n	1d70 <uart_console_isr+0xc>
		if (cur + end < sizeof(cmd->line) - 1) {
    1f28:	4b0e      	ldr	r3, [pc, #56]	; (1f64 <uart_console_isr+0x200>)
    1f2a:	781b      	ldrb	r3, [r3, #0]
    1f2c:	4a0e      	ldr	r2, [pc, #56]	; (1f68 <uart_console_isr+0x204>)
    1f2e:	7812      	ldrb	r2, [r2, #0]
    1f30:	18d0      	adds	r0, r2, r3
    1f32:	287e      	cmp	r0, #126	; 0x7e
    1f34:	f63f af1c 	bhi.w	1d70 <uart_console_isr+0xc>
			insert_char(&cmd->line[cur++], byte, end);
    1f38:	4807      	ldr	r0, [pc, #28]	; (1f58 <uart_console_isr+0x1f4>)
    1f3a:	6800      	ldr	r0, [r0, #0]
    1f3c:	1c5d      	adds	r5, r3, #1
    1f3e:	4c09      	ldr	r4, [pc, #36]	; (1f64 <uart_console_isr+0x200>)
    1f40:	7025      	strb	r5, [r4, #0]
    1f42:	4418      	add	r0, r3
    1f44:	3004      	adds	r0, #4
    1f46:	f7ff fdc9 	bl	1adc <insert_char>
    1f4a:	e711      	b.n	1d70 <uart_console_isr+0xc>
	return 0;
    1f4c:	2000      	movs	r0, #0
    1f4e:	e717      	b.n	1d80 <uart_console_isr+0x1c>
	return 0;
    1f50:	2000      	movs	r0, #0
    1f52:	e71f      	b.n	1d94 <uart_console_isr+0x30>
    1f54:	200003b4 	.word	0x200003b4
    1f58:	200003a0 	.word	0x200003a0
    1f5c:	200003ac 	.word	0x200003ac
    1f60:	2000039c 	.word	0x2000039c
    1f64:	200003a8 	.word	0x200003a8
    1f68:	200003a9 	.word	0x200003a9
    1f6c:	200003a4 	.word	0x200003a4
    1f70:	200003b0 	.word	0x200003b0

00001f74 <uart_register_input>:

void uart_register_input(struct k_fifo *avail, struct k_fifo *lines,
			 u8_t (*completion)(char *str, u8_t len))
{
    1f74:	b508      	push	{r3, lr}
	avail_queue = avail;
    1f76:	4b04      	ldr	r3, [pc, #16]	; (1f88 <uart_register_input+0x14>)
    1f78:	6018      	str	r0, [r3, #0]
	lines_queue = lines;
    1f7a:	4b04      	ldr	r3, [pc, #16]	; (1f8c <uart_register_input+0x18>)
    1f7c:	6019      	str	r1, [r3, #0]
	completion_cb = completion;
    1f7e:	4b04      	ldr	r3, [pc, #16]	; (1f90 <uart_register_input+0x1c>)
    1f80:	601a      	str	r2, [r3, #0]

	console_input_init();
    1f82:	f7ff fd39 	bl	19f8 <console_input_init>
    1f86:	bd08      	pop	{r3, pc}
    1f88:	2000039c 	.word	0x2000039c
    1f8c:	200003b0 	.word	0x200003b0
    1f90:	200003a4 	.word	0x200003a4

00001f94 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    1f94:	b508      	push	{r3, lr}
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    1f96:	4802      	ldr	r0, [pc, #8]	; (1fa0 <uart_console_hook_install+0xc>)
    1f98:	f000 fe70 	bl	2c7c <__printk_hook_install>
    1f9c:	bd08      	pop	{r3, pc}
    1f9e:	bf00      	nop
    1fa0:	000019a1 	.word	0x000019a1

00001fa4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1fa4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1fa6:	4804      	ldr	r0, [pc, #16]	; (1fb8 <uart_console_init+0x14>)
    1fa8:	f025 fe50 	bl	27c4c <device_get_binding>
    1fac:	4b03      	ldr	r3, [pc, #12]	; (1fbc <uart_console_init+0x18>)
    1fae:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1fb0:	f7ff fff0 	bl	1f94 <uart_console_hook_install>

	return 0;
}
    1fb4:	2000      	movs	r0, #0
    1fb6:	bd08      	pop	{r3, pc}
    1fb8:	0002e794 	.word	0x0002e794
    1fbc:	200003b4 	.word	0x200003b4

00001fc0 <sys_rand32_get>:
 *
 * @return a 32-bit number
 */

u32_t sys_rand32_get(void)
{
    1fc0:	b508      	push	{r3, lr}
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
    1fc2:	f000 fa73 	bl	24ac <_timer_cycle_get_32>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1fc6:	4b08      	ldr	r3, [pc, #32]	; (1fe8 <sys_rand32_get+0x28>)
    1fc8:	f3bf 8f5b 	dmb	ish
    1fcc:	e853 2f00 	ldrex	r2, [r3]
    1fd0:	4906      	ldr	r1, [pc, #24]	; (1fec <sys_rand32_get+0x2c>)
    1fd2:	1851      	adds	r1, r2, r1
    1fd4:	e843 1e00 	strex	lr, r1, [r3]
    1fd8:	f1be 0f00 	cmp.w	lr, #0
    1fdc:	d1f6      	bne.n	1fcc <sys_rand32_get+0xc>
    1fde:	f3bf 8f5b 	dmb	ish
}
    1fe2:	4410      	add	r0, r2
    1fe4:	bd08      	pop	{r3, pc}
    1fe6:	bf00      	nop
    1fe8:	200003b8 	.word	0x200003b8
    1fec:	3b9aca0d 	.word	0x3b9aca0d

00001ff0 <baudrate_set>:
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1ff0:	6803      	ldr	r3, [r0, #0]
    1ff2:	689b      	ldr	r3, [r3, #8]
    1ff4:	681b      	ldr	r3, [r3, #0]

	u32_t divisor; /* baud rate divisor */

	/* Use the common nRF5 macros */
	switch (baudrate) {
    1ff6:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    1ffa:	d05b      	beq.n	20b4 <baudrate_set+0xc4>
    1ffc:	d910      	bls.n	2020 <baudrate_set+0x30>
    1ffe:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    2002:	d05e      	beq.n	20c2 <baudrate_set+0xd2>
    2004:	d833      	bhi.n	206e <baudrate_set+0x7e>
    2006:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    200a:	d055      	beq.n	20b8 <baudrate_set+0xc8>
    200c:	d929      	bls.n	2062 <baudrate_set+0x72>
    200e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    2012:	d054      	beq.n	20be <baudrate_set+0xce>
    2014:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    2018:	d11b      	bne.n	2052 <baudrate_set+0x62>
		break;
	case 76800:
		divisor = NRF5_UART_BAUDRATE_76800;
		break;
	case 115200:
		divisor = NRF5_UART_BAUDRATE_115200;
    201a:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
		break;
    201e:	e03b      	b.n	2098 <baudrate_set+0xa8>
	switch (baudrate) {
    2020:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    2024:	d03f      	beq.n	20a6 <baudrate_set+0xb6>
    2026:	d90b      	bls.n	2040 <baudrate_set+0x50>
    2028:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    202c:	d03e      	beq.n	20ac <baudrate_set+0xbc>
    202e:	d913      	bls.n	2058 <baudrate_set+0x68>
    2030:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    2034:	d03c      	beq.n	20b0 <baudrate_set+0xc0>
    2036:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    203a:	d10a      	bne.n	2052 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_19200;
    203c:	4a27      	ldr	r2, [pc, #156]	; (20dc <baudrate_set+0xec>)
		break;
    203e:	e02b      	b.n	2098 <baudrate_set+0xa8>
	switch (baudrate) {
    2040:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2044:	d046      	beq.n	20d4 <baudrate_set+0xe4>
    2046:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    204a:	d029      	beq.n	20a0 <baudrate_set+0xb0>
    204c:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    2050:	d020      	beq.n	2094 <baudrate_set+0xa4>
		break;
	case 1000000:
		divisor = NRF5_UART_BAUDRATE_1000000;
		break;
	default:
		return -EINVAL;
    2052:	f06f 0015 	mvn.w	r0, #21
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;

	return 0;
}
    2056:	4770      	bx	lr
	switch (baudrate) {
    2058:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    205c:	d1f9      	bne.n	2052 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_4800;
    205e:	4a20      	ldr	r2, [pc, #128]	; (20e0 <baudrate_set+0xf0>)
		break;
    2060:	e01a      	b.n	2098 <baudrate_set+0xa8>
	switch (baudrate) {
    2062:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    2066:	d1f4      	bne.n	2052 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_38400;
    2068:	f44f 021d 	mov.w	r2, #10289152	; 0x9d0000
		break;
    206c:	e014      	b.n	2098 <baudrate_set+0xa8>
	switch (baudrate) {
    206e:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    2072:	d029      	beq.n	20c8 <baudrate_set+0xd8>
    2074:	d908      	bls.n	2088 <baudrate_set+0x98>
    2076:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    207a:	d028      	beq.n	20ce <baudrate_set+0xde>
    207c:	4a19      	ldr	r2, [pc, #100]	; (20e4 <baudrate_set+0xf4>)
    207e:	4291      	cmp	r1, r2
    2080:	d1e7      	bne.n	2052 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_1000000;
    2082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
		break;
    2086:	e007      	b.n	2098 <baudrate_set+0xa8>
	switch (baudrate) {
    2088:	4a17      	ldr	r2, [pc, #92]	; (20e8 <baudrate_set+0xf8>)
    208a:	4291      	cmp	r1, r2
    208c:	d1e1      	bne.n	2052 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_250000;
    208e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
		break;
    2092:	e001      	b.n	2098 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_300;
    2094:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    2098:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    209c:	2000      	movs	r0, #0
    209e:	4770      	bx	lr
		divisor = NRF5_UART_BAUDRATE_1200;
    20a0:	f44f 229e 	mov.w	r2, #323584	; 0x4f000
		break;
    20a4:	e7f8      	b.n	2098 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_2400;
    20a6:	f44f 221d 	mov.w	r2, #643072	; 0x9d000
		break;
    20aa:	e7f5      	b.n	2098 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_9600;
    20ac:	4a0f      	ldr	r2, [pc, #60]	; (20ec <baudrate_set+0xfc>)
		break;
    20ae:	e7f3      	b.n	2098 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_14400;
    20b0:	4a0f      	ldr	r2, [pc, #60]	; (20f0 <baudrate_set+0x100>)
		break;
    20b2:	e7f1      	b.n	2098 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_28800;
    20b4:	4a0f      	ldr	r2, [pc, #60]	; (20f4 <baudrate_set+0x104>)
		break;
    20b6:	e7ef      	b.n	2098 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_57600;
    20b8:	f44f 026b 	mov.w	r2, #15400960	; 0xeb0000
		break;
    20bc:	e7ec      	b.n	2098 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_76800;
    20be:	4a0e      	ldr	r2, [pc, #56]	; (20f8 <baudrate_set+0x108>)
		break;
    20c0:	e7ea      	b.n	2098 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_230400;
    20c2:	f04f 726c 	mov.w	r2, #61865984	; 0x3b00000
		break;
    20c6:	e7e7      	b.n	2098 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_460800;
    20c8:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
		break;
    20cc:	e7e4      	b.n	2098 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_921600;
    20ce:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
		break;
    20d2:	e7e1      	b.n	2098 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_600;
    20d4:	f44f 321c 	mov.w	r2, #159744	; 0x27000
    20d8:	e7de      	b.n	2098 <baudrate_set+0xa8>
    20da:	bf00      	nop
    20dc:	004ea000 	.word	0x004ea000
    20e0:	0013b000 	.word	0x0013b000
    20e4:	000f4240 	.word	0x000f4240
    20e8:	0003d090 	.word	0x0003d090
    20ec:	00275000 	.word	0x00275000
    20f0:	003af000 	.word	0x003af000
    20f4:	0075c000 	.word	0x0075c000
    20f8:	013a9000 	.word	0x013a9000

000020fc <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    20fc:	6803      	ldr	r3, [r0, #0]
    20fe:	689b      	ldr	r3, [r3, #8]
    2100:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    2102:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    2106:	b132      	cbz	r2, 2116 <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    2108:	2000      	movs	r0, #0
    210a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    210e:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2112:	700b      	strb	r3, [r1, #0]

	return 0;
    2114:	4770      	bx	lr
		return -1;
    2116:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    211a:	4770      	bx	lr

0000211c <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    211c:	6803      	ldr	r3, [r0, #0]
    211e:	689b      	ldr	r3, [r3, #8]
    2120:	681a      	ldr	r2, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    2122:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    2126:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    212a:	2b00      	cmp	r3, #0
    212c:	d0fb      	beq.n	2126 <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    212e:	2300      	movs	r3, #0
    2130:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c

	return c;
}
    2134:	4608      	mov	r0, r1
    2136:	4770      	bx	lr

00002138 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2138:	6803      	ldr	r3, [r0, #0]
    213a:	689b      	ldr	r3, [r3, #8]
    213c:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    213e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    2142:	b132      	cbz	r2, 2152 <uart_nrf5_err_check+0x1a>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    2144:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    2148:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    214c:	f000 000f 	and.w	r0, r0, #15
    2150:	4770      	bx	lr
	u32_t error = 0;
    2152:	2000      	movs	r0, #0
    2154:	e7fa      	b.n	214c <uart_nrf5_err_check+0x14>

00002156 <uart_nrf5_fifo_fill>:

#ifdef CONFIG_UART_INTERRUPT_DRIVEN

/** Interrupt driven FIFO fill function */
static int uart_nrf5_fifo_fill(struct device *dev, const u8_t *tx_data, int len)
{
    2156:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    2158:	6803      	ldr	r3, [r0, #0]
    215a:	689b      	ldr	r3, [r3, #8]
    215c:	681c      	ldr	r4, [r3, #0]
	u8_t num_tx = 0;
    215e:	2300      	movs	r3, #0

	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    2160:	e007      	b.n	2172 <uart_nrf5_fifo_fill+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_TXDRDY = 0;
    2162:	2000      	movs	r0, #0
    2164:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c

		/* Send a character */
		uart->TXD = (u8_t)tx_data[num_tx++];
    2168:	1c58      	adds	r0, r3, #1
    216a:	5ccb      	ldrb	r3, [r1, r3]
    216c:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    2170:	b2c3      	uxtb	r3, r0
	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    2172:	4618      	mov	r0, r3
    2174:	1ad5      	subs	r5, r2, r3
    2176:	2d00      	cmp	r5, #0
    2178:	dd03      	ble.n	2182 <uart_nrf5_fifo_fill+0x2c>
    217a:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
    217e:	2d00      	cmp	r5, #0
    2180:	d1ef      	bne.n	2162 <uart_nrf5_fifo_fill+0xc>
	}

	return (int)num_tx;
}
    2182:	bc30      	pop	{r4, r5}
    2184:	4770      	bx	lr

00002186 <uart_nrf5_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrf5_fifo_read(struct device *dev, u8_t *rx_data, const int size)
{
    2186:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    2188:	6803      	ldr	r3, [r0, #0]
    218a:	689b      	ldr	r3, [r3, #8]
    218c:	681c      	ldr	r4, [r3, #0]
	u8_t num_rx = 0;
    218e:	2300      	movs	r3, #0

	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    2190:	e007      	b.n	21a2 <uart_nrf5_fifo_read+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_RXDRDY = 0;
    2192:	2000      	movs	r0, #0
    2194:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108

		/* Receive a character */
		rx_data[num_rx++] = (u8_t)uart->RXD;
    2198:	1c58      	adds	r0, r3, #1
    219a:	f8d4 5518 	ldr.w	r5, [r4, #1304]	; 0x518
    219e:	54cd      	strb	r5, [r1, r3]
    21a0:	b2c3      	uxtb	r3, r0
	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    21a2:	4618      	mov	r0, r3
    21a4:	1ad5      	subs	r5, r2, r3
    21a6:	2d00      	cmp	r5, #0
    21a8:	dd03      	ble.n	21b2 <uart_nrf5_fifo_read+0x2c>
    21aa:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    21ae:	2d00      	cmp	r5, #0
    21b0:	d1ef      	bne.n	2192 <uart_nrf5_fifo_read+0xc>
	}

	return num_rx;
}
    21b2:	bc30      	pop	{r4, r5}
    21b4:	4770      	bx	lr

000021b6 <uart_nrf5_irq_tx_enable>:

/** Interrupt driven transfer enabling function */
static void uart_nrf5_irq_tx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    21b6:	6803      	ldr	r3, [r0, #0]
    21b8:	689b      	ldr	r3, [r3, #8]
    21ba:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_TX;
    21bc:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    21c0:	f043 0308 	orr.w	r3, r3, #8
    21c4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    21c8:	4770      	bx	lr

000021ca <uart_nrf5_irq_tx_disable>:
}

/** Interrupt driven transfer disabling function */
static void uart_nrf5_irq_tx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    21ca:	6803      	ldr	r3, [r0, #0]
    21cc:	689b      	ldr	r3, [r3, #8]
    21ce:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_TX;
    21d0:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    21d4:	f043 0308 	orr.w	r3, r3, #8
    21d8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    21dc:	4770      	bx	lr

000021de <uart_nrf5_irq_tx_ready>:
}

/** Interrupt driven transfer ready function */
static int uart_nrf5_irq_tx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    21de:	6803      	ldr	r3, [r0, #0]
    21e0:	689b      	ldr	r3, [r3, #8]
    21e2:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_TXDRDY;
    21e4:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    21e8:	4770      	bx	lr

000021ea <uart_nrf5_irq_rx_enable>:

/** Interrupt driven receiver enabling function */
static void uart_nrf5_irq_rx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    21ea:	6803      	ldr	r3, [r0, #0]
    21ec:	689b      	ldr	r3, [r3, #8]
    21ee:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_RX;
    21f0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    21f4:	f043 0304 	orr.w	r3, r3, #4
    21f8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    21fc:	4770      	bx	lr

000021fe <uart_nrf5_irq_rx_disable>:
}

/** Interrupt driven receiver disabling function */
static void uart_nrf5_irq_rx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    21fe:	6803      	ldr	r3, [r0, #0]
    2200:	689b      	ldr	r3, [r3, #8]
    2202:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_RX;
    2204:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    2208:	f043 0304 	orr.w	r3, r3, #4
    220c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2210:	4770      	bx	lr

00002212 <uart_nrf5_irq_tx_complete>:
}

/** Interrupt driven transfer empty function */
static int uart_nrf5_irq_tx_complete(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2212:	6803      	ldr	r3, [r0, #0]
    2214:	689b      	ldr	r3, [r3, #8]
    2216:	681b      	ldr	r3, [r3, #0]

	return !(uart->EVENTS_TXDRDY);
    2218:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    221c:	fab0 f080 	clz	r0, r0
    2220:	0940      	lsrs	r0, r0, #5
    2222:	4770      	bx	lr

00002224 <uart_nrf5_irq_rx_ready>:

/** Interrupt driven receiver ready function */
static int uart_nrf5_irq_rx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2224:	6803      	ldr	r3, [r0, #0]
    2226:	689b      	ldr	r3, [r3, #8]
    2228:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_RXDRDY;
    222a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    222e:	4770      	bx	lr

00002230 <uart_nrf5_irq_err_enable>:

/** Interrupt driven error enabling function */
static void uart_nrf5_irq_err_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2230:	6803      	ldr	r3, [r0, #0]
    2232:	689b      	ldr	r3, [r3, #8]
    2234:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_ERROR;
    2236:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    223a:	f043 0310 	orr.w	r3, r3, #16
    223e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    2242:	4770      	bx	lr

00002244 <uart_nrf5_irq_err_disable>:
}

/** Interrupt driven error disabling function */
static void uart_nrf5_irq_err_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2244:	6803      	ldr	r3, [r0, #0]
    2246:	689b      	ldr	r3, [r3, #8]
    2248:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_ERROR;
    224a:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    224e:	f043 0310 	orr.w	r3, r3, #16
    2252:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2256:	4770      	bx	lr

00002258 <uart_nrf5_irq_is_pending>:
}

/** Interrupt driven pending status function */
static int uart_nrf5_irq_is_pending(struct device *dev)
{
    2258:	b510      	push	{r4, lr}
    225a:	4604      	mov	r4, r0
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    225c:	f7ff ffbf 	bl	21de <uart_nrf5_irq_tx_ready>
    2260:	b110      	cbz	r0, 2268 <uart_nrf5_irq_is_pending+0x10>
    2262:	2301      	movs	r3, #1
}
    2264:	4618      	mov	r0, r3
    2266:	bd10      	pop	{r4, pc}
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    2268:	4620      	mov	r0, r4
    226a:	f7ff ffdb 	bl	2224 <uart_nrf5_irq_rx_ready>
    226e:	4603      	mov	r3, r0
    2270:	2800      	cmp	r0, #0
    2272:	d0f7      	beq.n	2264 <uart_nrf5_irq_is_pending+0xc>
    2274:	2301      	movs	r3, #1
    2276:	e7f5      	b.n	2264 <uart_nrf5_irq_is_pending+0xc>

00002278 <uart_nrf5_irq_update>:

/** Interrupt driven interrupt update function */
static int uart_nrf5_irq_update(struct device *dev)
{
	return 1;
}
    2278:	2001      	movs	r0, #1
    227a:	4770      	bx	lr

0000227c <uart_nrf5_irq_callback_set>:

/** Set the callback function */
static void uart_nrf5_irq_callback_set(struct device *dev, uart_irq_callback_t cb)
{
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    227c:	6883      	ldr	r3, [r0, #8]

	dev_data->cb = cb;
    227e:	6059      	str	r1, [r3, #4]
    2280:	4770      	bx	lr

00002282 <uart_nrf5_isr>:
 * @param arg Argument to ISR.
 *
 * @return N/A
 */
void uart_nrf5_isr(void *arg)
{
    2282:	b508      	push	{r3, lr}
	struct device *dev = arg;
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    2284:	6883      	ldr	r3, [r0, #8]

	if (dev_data->cb) {
    2286:	685b      	ldr	r3, [r3, #4]
    2288:	b103      	cbz	r3, 228c <uart_nrf5_isr+0xa>
		dev_data->cb(dev);
    228a:	4798      	blx	r3
    228c:	bd08      	pop	{r3, pc}

0000228e <uart_nrf5_irq_config>:
	    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE);


#ifdef CONFIG_UART_INTERRUPT_DRIVEN
static void uart_nrf5_irq_config(struct device *port)
{
    228e:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_UART0_IRQn,
    2290:	2200      	movs	r2, #0
    2292:	2101      	movs	r1, #1
    2294:	2002      	movs	r0, #2
    2296:	f025 fb35 	bl	27904 <_irq_priority_set>
		    CONFIG_UART_NRF5_IRQ_PRI,
		    uart_nrf5_isr, DEVICE_GET(uart_nrf5_0),
		    0);
	irq_enable(NRF5_IRQ_UART0_IRQn);
    229a:	2002      	movs	r0, #2
    229c:	f025 fb08 	bl	278b0 <_arch_irq_enable>
    22a0:	bd08      	pop	{r3, pc}
	...

000022a4 <uart_nrf5_init>:
{
    22a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22a6:	4604      	mov	r4, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
    22a8:	6803      	ldr	r3, [r0, #0]
    22aa:	689b      	ldr	r3, [r3, #8]
    22ac:	681d      	ldr	r5, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    22ae:	481d      	ldr	r0, [pc, #116]	; (2324 <uart_nrf5_init+0x80>)
    22b0:	f025 fccc 	bl	27c4c <device_get_binding>
    22b4:	4606      	mov	r6, r0
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_configure(struct device *port, u32_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;
    22b6:	6843      	ldr	r3, [r0, #4]

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    22b8:	681f      	ldr	r7, [r3, #0]
    22ba:	f240 1301 	movw	r3, #257	; 0x101
    22be:	2206      	movs	r2, #6
    22c0:	2100      	movs	r1, #0
    22c2:	47b8      	blx	r7
	const struct gpio_driver_api *api = port->driver_api;
    22c4:	6873      	ldr	r3, [r6, #4]
	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    22c6:	681f      	ldr	r7, [r3, #0]
    22c8:	2300      	movs	r3, #0
    22ca:	2208      	movs	r2, #8
    22cc:	4619      	mov	r1, r3
    22ce:	4630      	mov	r0, r6
    22d0:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    22d2:	2306      	movs	r3, #6
    22d4:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    22d8:	2308      	movs	r3, #8
    22da:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    22de:	68a3      	ldr	r3, [r4, #8]
    22e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    22e4:	601a      	str	r2, [r3, #0]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    22e6:	68a3      	ldr	r3, [r4, #8]
		     DEV_CFG(dev)->sys_clk_freq);
    22e8:	6822      	ldr	r2, [r4, #0]
    22ea:	6892      	ldr	r2, [r2, #8]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    22ec:	6852      	ldr	r2, [r2, #4]
    22ee:	6819      	ldr	r1, [r3, #0]
    22f0:	4620      	mov	r0, r4
    22f2:	f7ff fe7d 	bl	1ff0 <baudrate_set>
	if (err) {
    22f6:	4606      	mov	r6, r0
    22f8:	b108      	cbz	r0, 22fe <uart_nrf5_init+0x5a>
}
    22fa:	4630      	mov	r0, r6
    22fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    22fe:	2304      	movs	r3, #4
    2300:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    2304:	2300      	movs	r3, #0
    2306:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    230a:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    230e:	2301      	movs	r3, #1
    2310:	60ab      	str	r3, [r5, #8]
	uart->TASKS_STARTRX = 1;
    2312:	602b      	str	r3, [r5, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    2314:	4b04      	ldr	r3, [pc, #16]	; (2328 <uart_nrf5_init+0x84>)
    2316:	6063      	str	r3, [r4, #4]
	DEV_CFG(dev)->irq_config_func(dev);
    2318:	6823      	ldr	r3, [r4, #0]
    231a:	689b      	ldr	r3, [r3, #8]
    231c:	689b      	ldr	r3, [r3, #8]
    231e:	4620      	mov	r0, r4
    2320:	4798      	blx	r3
	return 0;
    2322:	e7ea      	b.n	22fa <uart_nrf5_init+0x56>
    2324:	0002e7a8 	.word	0x0002e7a8
    2328:	0002e7d4 	.word	0x0002e7d4

0000232c <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    232c:	4b08      	ldr	r3, [pc, #32]	; (2350 <rtc_compare_set+0x24>)
    232e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    2332:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    2336:	1ac0      	subs	r0, r0, r3
    2338:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    233c:	3802      	subs	r0, #2
    233e:	4b05      	ldr	r3, [pc, #20]	; (2354 <rtc_compare_set+0x28>)
    2340:	4298      	cmp	r0, r3
    2342:	d904      	bls.n	234e <rtc_compare_set+0x22>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2344:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2348:	4b03      	ldr	r3, [pc, #12]	; (2358 <rtc_compare_set+0x2c>)
    234a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    234e:	4770      	bx	lr
    2350:	40011000 	.word	0x40011000
    2354:	007ffffd 	.word	0x007ffffd
    2358:	e000e100 	.word	0xe000e100

0000235c <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    235c:	b508      	push	{r3, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    235e:	4b15      	ldr	r3, [pc, #84]	; (23b4 <rtc_announce_set_next+0x58>)
    2360:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    2364:	4a14      	ldr	r2, [pc, #80]	; (23b8 <rtc_announce_set_next+0x5c>)
    2366:	6811      	ldr	r1, [r2, #0]
    2368:	1a5b      	subs	r3, r3, r1
    236a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    236e:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
    2372:	d917      	bls.n	23a4 <rtc_announce_set_next+0x48>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    2374:	4a11      	ldr	r2, [pc, #68]	; (23bc <rtc_announce_set_next+0x60>)
    2376:	fba2 0203 	umull	r0, r2, r2, r3
    237a:	1a9b      	subs	r3, r3, r2
    237c:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    2380:	0a1b      	lsrs	r3, r3, #8

		if (sys_elapsed > expected_sys_ticks) {
    2382:	4a0f      	ldr	r2, [pc, #60]	; (23c0 <rtc_announce_set_next+0x64>)
    2384:	6810      	ldr	r0, [r2, #0]
    2386:	4283      	cmp	r3, r0
    2388:	d800      	bhi.n	238c <rtc_announce_set_next+0x30>
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    238a:	4618      	mov	r0, r3

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    238c:	f240 1347 	movw	r3, #327	; 0x147
    2390:	fb03 1300 	mla	r3, r3, r0, r1
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    2394:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    2398:	4a07      	ldr	r2, [pc, #28]	; (23b8 <rtc_announce_set_next+0x5c>)
    239a:	6013      	str	r3, [r2, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    239c:	4b09      	ldr	r3, [pc, #36]	; (23c4 <rtc_announce_set_next+0x68>)
    239e:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    23a0:	f026 ff9c 	bl	292dc <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    23a4:	4b04      	ldr	r3, [pc, #16]	; (23b8 <rtc_announce_set_next+0x5c>)
    23a6:	6818      	ldr	r0, [r3, #0]
    23a8:	f200 1047 	addw	r0, r0, #327	; 0x147
    23ac:	f7ff ffbe 	bl	232c <rtc_compare_set>
    23b0:	bd08      	pop	{r3, pc}
    23b2:	bf00      	nop
    23b4:	40011000 	.word	0x40011000
    23b8:	200003c0 	.word	0x200003c0
    23bc:	90d4f121 	.word	0x90d4f121
    23c0:	200003bc 	.word	0x200003bc
    23c4:	2000c670 	.word	0x2000c670

000023c8 <rtc1_nrf5_isr>:
 * 400. However, the ISR is preempted for a number of sys ticks, until 450 in
 * this example. The ISR will then announce the number of sys ticks it was
 * delayed (2), and schedule the next sys tick (5) at 500.
 */
static void rtc1_nrf5_isr(void *arg)
{
    23c8:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    23ca:	2200      	movs	r2, #0
    23cc:	4b02      	ldr	r3, [pc, #8]	; (23d8 <rtc1_nrf5_isr+0x10>)
    23ce:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    23d2:	f7ff ffc3 	bl	235c <rtc_announce_set_next>
    23d6:	bd08      	pop	{r3, pc}
    23d8:	40011000 	.word	0x40011000

000023dc <_timer_idle_enter>:
{
    23dc:	b508      	push	{r3, lr}
	if ((sys_ticks < 0) ||
    23de:	f246 4335 	movw	r3, #25653	; 0x6435
    23e2:	4298      	cmp	r0, r3
    23e4:	d900      	bls.n	23e8 <_timer_idle_enter+0xc>
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    23e6:	4618      	mov	r0, r3
	expected_sys_ticks = sys_ticks;
    23e8:	4b05      	ldr	r3, [pc, #20]	; (2400 <_timer_idle_enter+0x24>)
    23ea:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    23ec:	4b05      	ldr	r3, [pc, #20]	; (2404 <_timer_idle_enter+0x28>)
    23ee:	681b      	ldr	r3, [r3, #0]
    23f0:	f240 1247 	movw	r2, #327	; 0x147
    23f4:	fb02 3000 	mla	r0, r2, r0, r3
    23f8:	f7ff ff98 	bl	232c <rtc_compare_set>
    23fc:	bd08      	pop	{r3, pc}
    23fe:	bf00      	nop
    2400:	200003bc 	.word	0x200003bc
    2404:	200003c0 	.word	0x200003c0

00002408 <_timer_idle_exit>:
{
    2408:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    240a:	2200      	movs	r2, #0
    240c:	4b06      	ldr	r3, [pc, #24]	; (2428 <_timer_idle_exit+0x20>)
    240e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2412:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2416:	4b05      	ldr	r3, [pc, #20]	; (242c <_timer_idle_exit+0x24>)
    2418:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    241c:	f7ff ff9e 	bl	235c <rtc_announce_set_next>
	expected_sys_ticks = 1;
    2420:	2201      	movs	r2, #1
    2422:	4b03      	ldr	r3, [pc, #12]	; (2430 <_timer_idle_exit+0x28>)
    2424:	601a      	str	r2, [r3, #0]
    2426:	bd08      	pop	{r3, pc}
    2428:	40011000 	.word	0x40011000
    242c:	e000e100 	.word	0xe000e100
    2430:	200003bc 	.word	0x200003bc

00002434 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    2434:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    2436:	4818      	ldr	r0, [pc, #96]	; (2498 <_sys_clock_driver_init+0x64>)
    2438:	f025 fc08 	bl	27c4c <device_get_binding>
	if (!clock) {
    243c:	b348      	cbz	r0, 2492 <_sys_clock_driver_init+0x5e>
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
    243e:	6842      	ldr	r2, [r0, #4]

	return api->on(dev, sys);
    2440:	6812      	ldr	r2, [r2, #0]
    2442:	2101      	movs	r1, #1
    2444:	4790      	blx	r2
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
    2446:	2400      	movs	r4, #0
    2448:	4b14      	ldr	r3, [pc, #80]	; (249c <_sys_clock_driver_init+0x68>)
    244a:	601c      	str	r4, [r3, #0]

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
    244c:	2601      	movs	r6, #1
    244e:	4b14      	ldr	r3, [pc, #80]	; (24a0 <_sys_clock_driver_init+0x6c>)
    2450:	601e      	str	r6, [r3, #0]
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    2452:	4d14      	ldr	r5, [pc, #80]	; (24a4 <_sys_clock_driver_init+0x70>)
    2454:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    2458:	f240 1347 	movw	r3, #327	; 0x147
    245c:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    2460:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2464:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    2468:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    246c:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    2470:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2474:	4b0c      	ldr	r3, [pc, #48]	; (24a8 <_sys_clock_driver_init+0x74>)
    2476:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    247a:	4622      	mov	r2, r4
    247c:	4631      	mov	r1, r6
    247e:	2011      	movs	r0, #17
    2480:	f025 fa40 	bl	27904 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    2484:	2011      	movs	r0, #17
    2486:	f025 fa13 	bl	278b0 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    248a:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;
    248c:	602e      	str	r6, [r5, #0]

	return 0;
    248e:	4620      	mov	r0, r4
    2490:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    2492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2496:	bd70      	pop	{r4, r5, r6, pc}
    2498:	0002e7b0 	.word	0x0002e7b0
    249c:	200003c0 	.word	0x200003c0
    24a0:	200003bc 	.word	0x200003bc
    24a4:	40011000 	.word	0x40011000
    24a8:	e000e100 	.word	0xe000e100

000024ac <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    24ac:	b410      	push	{r4}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    24ae:	4b0d      	ldr	r3, [pc, #52]	; (24e4 <_timer_cycle_get_32+0x38>)
    24b0:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    24b4:	e000      	b.n	24b8 <_timer_cycle_get_32+0xc>
		sys_clock_tick_count = _sys_clock_tick_count;
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    24b6:	4619      	mov	r1, r3
		sys_clock_tick_count = _sys_clock_tick_count;
    24b8:	4b0b      	ldr	r3, [pc, #44]	; (24e8 <_timer_cycle_get_32+0x3c>)
    24ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    24be:	4614      	mov	r4, r2
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    24c0:	f240 1047 	movw	r0, #327	; 0x147
    24c4:	fb00 1212 	mls	r2, r0, r2, r1
    24c8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		rtc_now = RTC_COUNTER;
    24cc:	4b05      	ldr	r3, [pc, #20]	; (24e4 <_timer_cycle_get_32+0x38>)
    24ce:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    24d2:	4299      	cmp	r1, r3
    24d4:	d1ef      	bne.n	24b6 <_timer_cycle_get_32+0xa>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    24d6:	4b05      	ldr	r3, [pc, #20]	; (24ec <_timer_cycle_get_32+0x40>)
    24d8:	6818      	ldr	r0, [r3, #0]
	       elapsed_cycles;
}
    24da:	fb00 2004 	mla	r0, r0, r4, r2
    24de:	bc10      	pop	{r4}
    24e0:	4770      	bx	lr
    24e2:	bf00      	nop
    24e4:	40011000 	.word	0x40011000
    24e8:	20002c68 	.word	0x20002c68
    24ec:	2000c674 	.word	0x2000c674

000024f0 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN(pin) ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PSEL_Msk)
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
    24f0:	b410      	push	{r4}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    24f2:	6803      	ldr	r3, [r0, #0]
    24f4:	689b      	ldr	r3, [r3, #8]
    24f6:	689c      	ldr	r4, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    24f8:	6882      	ldr	r2, [r0, #8]
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    24fa:	2000      	movs	r0, #0
    24fc:	e000      	b.n	2500 <gpiote_find_channel+0x10>
    24fe:	3001      	adds	r0, #1
    2500:	2807      	cmp	r0, #7
    2502:	dc0d      	bgt.n	2520 <gpiote_find_channel+0x30>
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2504:	68d3      	ldr	r3, [r2, #12]
    2506:	40c3      	lsrs	r3, r0
    2508:	f013 0f01 	tst.w	r3, #1
    250c:	d0f7      	beq.n	24fe <gpiote_find_channel+0xe>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    250e:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    2512:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    2516:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    251a:	428b      	cmp	r3, r1
    251c:	d1ef      	bne.n	24fe <gpiote_find_channel+0xe>
    251e:	e001      	b.n	2524 <gpiote_find_channel+0x34>
			return i;
		}
	}

	return -ENODEV;
    2520:	f06f 0012 	mvn.w	r0, #18
}
    2524:	bc10      	pop	{r4}
    2526:	4770      	bx	lr

00002528 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2528:	6800      	ldr	r0, [r0, #0]
    252a:	6880      	ldr	r0, [r0, #8]
    252c:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    252e:	b121      	cbz	r1, 253a <gpio_nrf5_read+0x12>
		*value = (gpio->IN >> pin) & 0x1;
	} else {
		*value = gpio->IN;
    2530:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    2534:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    2536:	2000      	movs	r0, #0
    2538:	4770      	bx	lr
		*value = (gpio->IN >> pin) & 0x1;
    253a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    253e:	fa21 f202 	lsr.w	r2, r1, r2
    2542:	f002 0201 	and.w	r2, r2, #1
    2546:	601a      	str	r2, [r3, #0]
    2548:	e7f5      	b.n	2536 <gpio_nrf5_read+0xe>

0000254a <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    254a:	6800      	ldr	r0, [r0, #0]
    254c:	6880      	ldr	r0, [r0, #8]
    254e:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2550:	b961      	cbnz	r1, 256c <gpio_nrf5_write+0x22>
		if (value) { /* 1 */
    2552:	b12b      	cbz	r3, 2560 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    2554:	2301      	movs	r3, #1
    2556:	fa03 f202 	lsl.w	r2, r3, r2
    255a:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    255e:	e007      	b.n	2570 <gpio_nrf5_write+0x26>
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
    2560:	2301      	movs	r3, #1
    2562:	fa03 f202 	lsl.w	r2, r3, r2
    2566:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    256a:	e001      	b.n	2570 <gpio_nrf5_write+0x26>
		}
	} else {
		gpio->OUT = value;
    256c:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
	}
	return 0;
}
    2570:	2000      	movs	r0, #0
    2572:	4770      	bx	lr

00002574 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    2574:	b410      	push	{r4}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2576:	6884      	ldr	r4, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    2578:	b14a      	cbz	r2, 258e <gpio_nrf5_manage_callback+0x1a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    257a:	6823      	ldr	r3, [r4, #0]
    257c:	600b      	str	r3, [r1, #0]
	list->head = node;
    257e:	6021      	str	r1, [r4, #0]

	if (!list->tail) {
    2580:	6863      	ldr	r3, [r4, #4]
    2582:	b113      	cbz	r3, 258a <gpio_nrf5_manage_callback+0x16>

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    2584:	2000      	movs	r0, #0
    2586:	bc10      	pop	{r4}
    2588:	4770      	bx	lr
		list->tail = list->head;
    258a:	6061      	str	r1, [r4, #4]
    258c:	e7fa      	b.n	2584 <gpio_nrf5_manage_callback+0x10>
		sys_slist_prepend(callbacks, &callback->node);
	} else {
		sys_slist_find_and_remove(callbacks, &callback->node);
    258e:	4608      	mov	r0, r1
	return list->head;
    2590:	6823      	ldr	r3, [r4, #0]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
    2592:	2200      	movs	r2, #0
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    2594:	2b00      	cmp	r3, #0
    2596:	d0f5      	beq.n	2584 <gpio_nrf5_manage_callback+0x10>
		if (test == node) {
    2598:	4298      	cmp	r0, r3
    259a:	d002      	beq.n	25a2 <gpio_nrf5_manage_callback+0x2e>
			sys_slist_remove(list, prev, node);
			return true;
		}

		prev = test;
    259c:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    259e:	681b      	ldr	r3, [r3, #0]
    25a0:	e7f8      	b.n	2594 <gpio_nrf5_manage_callback+0x20>
	if (!prev_node) {
    25a2:	b13a      	cbz	r2, 25b4 <gpio_nrf5_manage_callback+0x40>
		prev_node->next = node->next;
    25a4:	680b      	ldr	r3, [r1, #0]
    25a6:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    25a8:	6863      	ldr	r3, [r4, #4]
    25aa:	4299      	cmp	r1, r3
    25ac:	d009      	beq.n	25c2 <gpio_nrf5_manage_callback+0x4e>
	node->next = NULL;
    25ae:	2300      	movs	r3, #0
    25b0:	600b      	str	r3, [r1, #0]
    25b2:	e7e7      	b.n	2584 <gpio_nrf5_manage_callback+0x10>
		list->head = node->next;
    25b4:	680b      	ldr	r3, [r1, #0]
    25b6:	6023      	str	r3, [r4, #0]
		if (list->tail == node) {
    25b8:	6862      	ldr	r2, [r4, #4]
    25ba:	4291      	cmp	r1, r2
    25bc:	d1f7      	bne.n	25ae <gpio_nrf5_manage_callback+0x3a>
			list->tail = list->head;
    25be:	6063      	str	r3, [r4, #4]
    25c0:	e7f5      	b.n	25ae <gpio_nrf5_manage_callback+0x3a>
			list->tail = prev_node;
    25c2:	6062      	str	r2, [r4, #4]
    25c4:	e7f3      	b.n	25ae <gpio_nrf5_manage_callback+0x3a>

000025c6 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    25c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    25c8:	6803      	ldr	r3, [r0, #0]
    25ca:	689b      	ldr	r3, [r3, #8]
    25cc:	689e      	ldr	r6, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    25ce:	6887      	ldr	r7, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    25d0:	b9b9      	cbnz	r1, 2602 <gpio_nrf5_enable_callback+0x3c>
    25d2:	460d      	mov	r5, r1
    25d4:	4614      	mov	r4, r2

		i = gpiote_find_channel(dev, pin);
    25d6:	4611      	mov	r1, r2
    25d8:	f7ff ff8a 	bl	24f0 <gpiote_find_channel>
		if (i < 0) {
    25dc:	2800      	cmp	r0, #0
    25de:	db12      	blt.n	2606 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    25e0:	2301      	movs	r3, #1
    25e2:	fa03 f404 	lsl.w	r4, r3, r4
    25e6:	68ba      	ldr	r2, [r7, #8]
    25e8:	4314      	orrs	r4, r2
    25ea:	60bc      	str	r4, [r7, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    25ec:	f100 0240 	add.w	r2, r0, #64	; 0x40
    25f0:	2100      	movs	r1, #0
    25f2:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    25f6:	fa03 f000 	lsl.w	r0, r3, r0
    25fa:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    25fe:	4628      	mov	r0, r5
    2600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    2602:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002608 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    2608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    260a:	6803      	ldr	r3, [r0, #0]
    260c:	689b      	ldr	r3, [r3, #8]
    260e:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2610:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2612:	b991      	cbnz	r1, 263a <gpio_nrf5_disable_callback+0x32>
    2614:	460d      	mov	r5, r1
    2616:	4614      	mov	r4, r2
		i = gpiote_find_channel(dev, pin);
    2618:	4611      	mov	r1, r2
    261a:	f7ff ff69 	bl	24f0 <gpiote_find_channel>
		if (i < 0) {
    261e:	2800      	cmp	r0, #0
    2620:	db0d      	blt.n	263e <gpio_nrf5_disable_callback+0x36>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    2622:	2301      	movs	r3, #1
    2624:	fa03 f404 	lsl.w	r4, r3, r4
    2628:	68b2      	ldr	r2, [r6, #8]
    262a:	ea22 0404 	bic.w	r4, r2, r4
    262e:	60b4      	str	r4, [r6, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    2630:	4083      	lsls	r3, r0
    2632:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    2636:	4628      	mov	r0, r5
    2638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    263a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    263e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002640 <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    2640:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    2642:	2200      	movs	r2, #0
    2644:	2101      	movs	r1, #1
    2646:	2006      	movs	r0, #6
    2648:	f025 f95c 	bl	27904 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    264c:	2006      	movs	r0, #6
    264e:	f025 f92f 	bl	278b0 <_arch_irq_enable>

	return 0;
}
    2652:	2000      	movs	r0, #0
    2654:	bd08      	pop	{r3, pc}

00002656 <gpio_nrf5_port_isr>:
{
    2656:	b570      	push	{r4, r5, r6, lr}
    2658:	4605      	mov	r5, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    265a:	6803      	ldr	r3, [r0, #0]
    265c:	689b      	ldr	r3, [r3, #8]
    265e:	6899      	ldr	r1, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2660:	6884      	ldr	r4, [r0, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2662:	2300      	movs	r3, #0
	u32_t enabled_int, int_status = 0;
    2664:	461e      	mov	r6, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2666:	e000      	b.n	266a <gpio_nrf5_port_isr+0x14>
    2668:	3301      	adds	r3, #1
    266a:	2b07      	cmp	r3, #7
    266c:	dc14      	bgt.n	2698 <gpio_nrf5_port_isr+0x42>
		if (gpiote->EVENTS_IN[i]) {
    266e:	f103 0240 	add.w	r2, r3, #64	; 0x40
    2672:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2676:	2a00      	cmp	r2, #0
    2678:	d0f6      	beq.n	2668 <gpio_nrf5_port_isr+0x12>
			gpiote->EVENTS_IN[i] = 0;
    267a:	f103 0240 	add.w	r2, r3, #64	; 0x40
    267e:	2000      	movs	r0, #0
    2680:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    2684:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    2688:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    268c:	f3c0 2004 	ubfx	r0, r0, #8, #5
    2690:	2201      	movs	r2, #1
    2692:	4082      	lsls	r2, r0
    2694:	4316      	orrs	r6, r2
    2696:	e7e7      	b.n	2668 <gpio_nrf5_port_isr+0x12>
	enabled_int = int_status & data->pin_callback_enables;
    2698:	68a3      	ldr	r3, [r4, #8]
    269a:	401e      	ands	r6, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    269c:	2006      	movs	r0, #6
    269e:	f025 f915 	bl	278cc <_arch_irq_disable>
	return list->head;
    26a2:	6824      	ldr	r4, [r4, #0]
    26a4:	e005      	b.n	26b2 <gpio_nrf5_port_isr+0x5c>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    26a6:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    26a8:	b16c      	cbz	r4, 26c6 <gpio_nrf5_port_isr+0x70>
	return node->next;
    26aa:	6823      	ldr	r3, [r4, #0]
    26ac:	b16b      	cbz	r3, 26ca <gpio_nrf5_port_isr+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    26ae:	b172      	cbz	r2, 26ce <gpio_nrf5_port_isr+0x78>
	return node->next;
    26b0:	6824      	ldr	r4, [r4, #0]
    26b2:	b174      	cbz	r4, 26d2 <gpio_nrf5_port_isr+0x7c>
		if (cb->pin_mask & pins) {
    26b4:	68a3      	ldr	r3, [r4, #8]
    26b6:	421e      	tst	r6, r3
    26b8:	d0f5      	beq.n	26a6 <gpio_nrf5_port_isr+0x50>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    26ba:	6863      	ldr	r3, [r4, #4]
    26bc:	4632      	mov	r2, r6
    26be:	4621      	mov	r1, r4
    26c0:	4628      	mov	r0, r5
    26c2:	4798      	blx	r3
    26c4:	e7ef      	b.n	26a6 <gpio_nrf5_port_isr+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    26c6:	4623      	mov	r3, r4
    26c8:	e7f0      	b.n	26ac <gpio_nrf5_port_isr+0x56>
	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    26ca:	2400      	movs	r4, #0
    26cc:	e7f1      	b.n	26b2 <gpio_nrf5_port_isr+0x5c>
    26ce:	2400      	movs	r4, #0
    26d0:	e7ef      	b.n	26b2 <gpio_nrf5_port_isr+0x5c>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    26d2:	2006      	movs	r0, #6
    26d4:	f025 f8ec 	bl	278b0 <_arch_irq_enable>
    26d8:	bd70      	pop	{r4, r5, r6, pc}
	...

000026dc <gpio_nrf5_config>:
{
    26dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    26e0:	6804      	ldr	r4, [r0, #0]
    26e2:	68a5      	ldr	r5, [r4, #8]
    26e4:	68ae      	ldr	r6, [r5, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    26e6:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    26e8:	682d      	ldr	r5, [r5, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    26ea:	2900      	cmp	r1, #0
    26ec:	d17f      	bne.n	27ee <gpio_nrf5_config+0x112>
    26ee:	4688      	mov	r8, r1
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    26f0:	f3c3 3e01 	ubfx	lr, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    26f4:	f3c3 3181 	ubfx	r1, r3, #14, #2
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    26f8:	f403 7440 	and.w	r4, r3, #768	; 0x300
    26fc:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    2700:	d025      	beq.n	274e <gpio_nrf5_config+0x72>
		} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
    2702:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    2706:	d024      	beq.n	2752 <gpio_nrf5_config+0x76>
		u8_t pull = GPIO_PULL_DISABLE;
    2708:	2400      	movs	r4, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    270a:	f013 0f01 	tst.w	r3, #1
    270e:	d030      	beq.n	2772 <gpio_nrf5_config+0x96>
			if (pull == GPIO_PULL_UP) {
    2710:	2c0c      	cmp	r4, #12
    2712:	d020      	beq.n	2756 <gpio_nrf5_config+0x7a>
			} else if (pull == GPIO_PULL_DOWN) {
    2714:	2c04      	cmp	r4, #4
    2716:	d025      	beq.n	2764 <gpio_nrf5_config+0x88>
					      drive_strength[ds_low][ds_high] |
    2718:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
    271c:	4938      	ldr	r1, [pc, #224]	; (2800 <gpio_nrf5_config+0x124>)
    271e:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
    2722:	4321      	orrs	r1, r4
					      GPIO_INPUT_DISCONNECT |
    2724:	f041 0103 	orr.w	r1, r1, #3
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    2728:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    272c:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
	if (flags & GPIO_INT) {
    2730:	f013 0102 	ands.w	r1, r3, #2
    2734:	d04a      	beq.n	27cc <gpio_nrf5_config+0xf0>
		if (flags & GPIO_INT_EDGE) {
    2736:	f013 0f20 	tst.w	r3, #32
    273a:	d05b      	beq.n	27f4 <gpio_nrf5_config+0x118>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    273c:	f013 0f40 	tst.w	r3, #64	; 0x40
    2740:	d123      	bne.n	278a <gpio_nrf5_config+0xae>
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
    2742:	f013 0f04 	tst.w	r3, #4
    2746:	d044      	beq.n	27d2 <gpio_nrf5_config+0xf6>
				config |= GPIOTE_CFG_POL_L2H;
    2748:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    274c:	e01f      	b.n	278e <gpio_nrf5_config+0xb2>
			pull = GPIO_PULL_UP;
    274e:	240c      	movs	r4, #12
    2750:	e7db      	b.n	270a <gpio_nrf5_config+0x2e>
			pull = GPIO_PULL_DOWN;
    2752:	2404      	movs	r4, #4
    2754:	e7d9      	b.n	270a <gpio_nrf5_config+0x2e>
				gpio->OUTSET = BIT(pin);
    2756:	f04f 0c01 	mov.w	ip, #1
    275a:	fa0c fc02 	lsl.w	ip, ip, r2
    275e:	f8c5 c508 	str.w	ip, [r5, #1288]	; 0x508
    2762:	e7d9      	b.n	2718 <gpio_nrf5_config+0x3c>
				gpio->OUTCLR = BIT(pin);
    2764:	f04f 0c01 	mov.w	ip, #1
    2768:	fa0c fc02 	lsl.w	ip, ip, r2
    276c:	f8c5 c50c 	str.w	ip, [r5, #1292]	; 0x50c
    2770:	e7d2      	b.n	2718 <gpio_nrf5_config+0x3c>
					      drive_strength[ds_low][ds_high] |
    2772:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    2776:	f8df e088 	ldr.w	lr, [pc, #136]	; 2800 <gpio_nrf5_config+0x124>
    277a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
					      GPIO_INPUT_CONNECT |
    277e:	4321      	orrs	r1, r4
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    2780:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    2784:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    2788:	e7d2      	b.n	2730 <gpio_nrf5_config+0x54>
				config |= GPIOTE_CFG_POL_TOGG;
    278a:	f44f 3940 	mov.w	r9, #196608	; 0x30000
    278e:	4614      	mov	r4, r2
    2790:	4605      	mov	r5, r0
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    2792:	68f8      	ldr	r0, [r7, #12]
    2794:	f7fe fcca 	bl	112c <__popcountsi2>
    2798:	2808      	cmp	r0, #8
    279a:	d02e      	beq.n	27fa <gpio_nrf5_config+0x11e>
		int i = gpiote_find_channel(dev, pin);
    279c:	4621      	mov	r1, r4
    279e:	4628      	mov	r0, r5
    27a0:	f7ff fea6 	bl	24f0 <gpiote_find_channel>
		if (i < 0) {
    27a4:	2800      	cmp	r0, #0
    27a6:	db17      	blt.n	27d8 <gpio_nrf5_config+0xfc>
		data->gpiote_chan_mask |= BIT(i);
    27a8:	2301      	movs	r3, #1
    27aa:	fa03 f200 	lsl.w	r2, r3, r0
    27ae:	68fb      	ldr	r3, [r7, #12]
    27b0:	4313      	orrs	r3, r2
    27b2:	60fb      	str	r3, [r7, #12]
		config |= GPIOTE_CFG_EVT;
    27b4:	f049 0901 	orr.w	r9, r9, #1
		config |= GPIOTE_CFG_PIN(pin);
    27b8:	0224      	lsls	r4, r4, #8
    27ba:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    27be:	ea49 0404 	orr.w	r4, r9, r4
		gpiote->CONFIG[i] = config;
    27c2:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    27c6:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
	return 0;
    27ca:	4641      	mov	r1, r8
}
    27cc:	4608      	mov	r0, r1
    27ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				config |= GPIOTE_CFG_POL_H2L;
    27d2:	f44f 3900 	mov.w	r9, #131072	; 0x20000
    27d6:	e7da      	b.n	278e <gpio_nrf5_config+0xb2>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    27d8:	68fb      	ldr	r3, [r7, #12]
    27da:	43db      	mvns	r3, r3
    27dc:	fa93 f0a3 	rbit	r0, r3
    27e0:	fab0 f080 	clz	r0, r0
    27e4:	2b00      	cmp	r3, #0
    27e6:	d1df      	bne.n	27a8 <gpio_nrf5_config+0xcc>
    27e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    27ec:	e7dc      	b.n	27a8 <gpio_nrf5_config+0xcc>
		return -ENOTSUP;
    27ee:	f06f 0185 	mvn.w	r1, #133	; 0x85
    27f2:	e7eb      	b.n	27cc <gpio_nrf5_config+0xf0>
			return -ENOTSUP;
    27f4:	f06f 0185 	mvn.w	r1, #133	; 0x85
    27f8:	e7e8      	b.n	27cc <gpio_nrf5_config+0xf0>
			return -EIO;
    27fa:	f06f 0104 	mvn.w	r1, #4
    27fe:	e7e5      	b.n	27cc <gpio_nrf5_config+0xf0>
    2800:	0002e818 	.word	0x0002e818

00002804 <_m16src_stop>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    2804:	f04f 0320 	mov.w	r3, #32
    2808:	f3ef 8111 	mrs	r1, BASEPRI
    280c:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    2810:	4b12      	ldr	r3, [pc, #72]	; (285c <_m16src_stop+0x58>)
    2812:	781a      	ldrb	r2, [r3, #0]
    2814:	b192      	cbz	r2, 283c <_m16src_stop+0x38>
		irq_unlock(imask);
		return -EALREADY;
	}

	if (--m16src_ref) {
    2816:	1e53      	subs	r3, r2, #1
    2818:	b2db      	uxtb	r3, r3
    281a:	4810      	ldr	r0, [pc, #64]	; (285c <_m16src_stop+0x58>)
    281c:	7003      	strb	r3, [r0, #0]
    281e:	b993      	cbnz	r3, 2846 <_m16src_stop+0x42>
		irq_unlock(imask);
		return 0;
	}

	if (m16src_grd) {
    2820:	4b0f      	ldr	r3, [pc, #60]	; (2860 <_m16src_stop+0x5c>)
    2822:	781b      	ldrb	r3, [r3, #0]
    2824:	b99b      	cbnz	r3, 284e <_m16src_stop+0x4a>
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
    2826:	4b0e      	ldr	r3, [pc, #56]	; (2860 <_m16src_stop+0x5c>)
    2828:	2201      	movs	r2, #1
    282a:	701a      	strb	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    282c:	f381 8811 	msr	BASEPRI, r1

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    2830:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2834:	604a      	str	r2, [r1, #4]

	/* release resource guard */
	m16src_grd = 0;
    2836:	2000      	movs	r0, #0
    2838:	7018      	strb	r0, [r3, #0]

	return 0;
}
    283a:	4770      	bx	lr
    283c:	f381 8811 	msr	BASEPRI, r1
		return -EALREADY;
    2840:	f06f 0077 	mvn.w	r0, #119	; 0x77
    2844:	4770      	bx	lr
    2846:	f381 8811 	msr	BASEPRI, r1
		return 0;
    284a:	2000      	movs	r0, #0
    284c:	4770      	bx	lr
		m16src_ref++;
    284e:	4b03      	ldr	r3, [pc, #12]	; (285c <_m16src_stop+0x58>)
    2850:	701a      	strb	r2, [r3, #0]
    2852:	f381 8811 	msr	BASEPRI, r1
		return -EAGAIN;
    2856:	f06f 000a 	mvn.w	r0, #10
    285a:	4770      	bx	lr
    285c:	200003d6 	.word	0x200003d6
    2860:	200003d5 	.word	0x200003d5

00002864 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    2864:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    2866:	2200      	movs	r2, #0
    2868:	2101      	movs	r1, #1
    286a:	4610      	mov	r0, r2
    286c:	f025 f84a 	bl	27904 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    2870:	2000      	movs	r0, #0
    2872:	f025 f81d 	bl	278b0 <_arch_irq_enable>

	return 0;
}
    2876:	2000      	movs	r0, #0
    2878:	bd08      	pop	{r3, pc}
	...

0000287c <_m16src_start>:
{
    287c:	b510      	push	{r4, lr}
	__asm__ volatile(
    287e:	f04f 0320 	mov.w	r3, #32
    2882:	f3ef 8411 	mrs	r4, BASEPRI
    2886:	f383 8811 	msr	BASEPRI, r3
	if (m16src_ref++) {
    288a:	4a2c      	ldr	r2, [pc, #176]	; (293c <_m16src_start+0xc0>)
    288c:	7813      	ldrb	r3, [r2, #0]
    288e:	1c58      	adds	r0, r3, #1
    2890:	7010      	strb	r0, [r2, #0]
    2892:	b153      	cbz	r3, 28aa <_m16src_start+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2894:	f384 8811 	msr	BASEPRI, r4
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    2898:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    289c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    28a0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    28a4:	d047      	beq.n	2936 <_m16src_start+0xba>
		return 0;
    28a6:	2000      	movs	r0, #0
    28a8:	bd10      	pop	{r4, pc}
	if (m16src_grd) {
    28aa:	4a25      	ldr	r2, [pc, #148]	; (2940 <_m16src_start+0xc4>)
    28ac:	7812      	ldrb	r2, [r2, #0]
    28ae:	b9a2      	cbnz	r2, 28da <_m16src_start+0x5e>
	m16src_grd = 1;
    28b0:	2201      	movs	r2, #1
    28b2:	4b23      	ldr	r3, [pc, #140]	; (2940 <_m16src_start+0xc4>)
    28b4:	701a      	strb	r2, [r3, #0]
    28b6:	f384 8811 	msr	BASEPRI, r4
	if (blocking) {
    28ba:	b3a1      	cbz	r1, 2926 <_m16src_start+0xaa>
		irq_disable(POWER_CLOCK_IRQn);
    28bc:	2000      	movs	r0, #0
    28be:	f025 f805 	bl	278cc <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    28c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    28c6:	2200      	movs	r2, #0
    28c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    28cc:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    28d0:	2201      	movs	r2, #1
    28d2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    28d6:	601a      	str	r2, [r3, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    28d8:	e009      	b.n	28ee <_m16src_start+0x72>
		m16src_ref--;
    28da:	4a18      	ldr	r2, [pc, #96]	; (293c <_m16src_start+0xc0>)
    28dc:	7013      	strb	r3, [r2, #0]
    28de:	f384 8811 	msr	BASEPRI, r4
		return -EAGAIN;
    28e2:	f06f 000a 	mvn.w	r0, #10
    28e6:	bd10      	pop	{r4, pc}
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    28e8:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    28ea:	bf40      	sev
  __ASM volatile ("wfe");
    28ec:	bf20      	wfe
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    28ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    28f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    28f6:	2b00      	cmp	r3, #0
    28f8:	d0f6      	beq.n	28e8 <_m16src_start+0x6c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    28fa:	2200      	movs	r2, #0
    28fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2900:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    2904:	f011 0f01 	tst.w	r1, #1
    2908:	d102      	bne.n	2910 <_m16src_start+0x94>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    290a:	2201      	movs	r2, #1
    290c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    2910:	2201      	movs	r2, #1
    2912:	4b0c      	ldr	r3, [pc, #48]	; (2944 <_m16src_start+0xc8>)
    2914:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq_enable(POWER_CLOCK_IRQn);
    2918:	2000      	movs	r0, #0
    291a:	f024 ffc9 	bl	278b0 <_arch_irq_enable>
	m16src_grd = 0;
    291e:	2200      	movs	r2, #0
    2920:	4b07      	ldr	r3, [pc, #28]	; (2940 <_m16src_start+0xc4>)
    2922:	701a      	strb	r2, [r3, #0]
    2924:	e7b8      	b.n	2898 <_m16src_start+0x1c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2926:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    292a:	2200      	movs	r2, #0
    292c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2930:	2201      	movs	r2, #1
    2932:	601a      	str	r2, [r3, #0]
    2934:	e7f3      	b.n	291e <_m16src_start+0xa2>
		return -EINPROGRESS;
    2936:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    293a:	bd10      	pop	{r4, pc}
    293c:	200003d6 	.word	0x200003d6
    2940:	200003d5 	.word	0x200003d5
    2944:	e000e100 	.word	0xe000e100

00002948 <_power_clock_isr>:
{
    2948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    294c:	4680      	mov	r8, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    294e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2952:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2956:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    295a:	f002 0201 	and.w	r2, r2, #1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    295e:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    2962:	f401 3180 	and.w	r1, r1, #65536	; 0x10000
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    2966:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    296a:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    296e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    2972:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (pof) {
    2976:	b11d      	cbz	r5, 2980 <_power_clock_isr+0x38>
		NRF_POWER->EVENTS_POFWARN = 0;
    2978:	f04f 0e00 	mov.w	lr, #0
    297c:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    2980:	b127      	cbz	r7, 298c <_power_clock_isr+0x44>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2982:	2700      	movs	r7, #0
    2984:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2988:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    298c:	b132      	cbz	r2, 299c <_power_clock_isr+0x54>
    298e:	b129      	cbz	r1, 299c <_power_clock_isr+0x54>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2990:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2994:	2201      	movs	r2, #1
    2996:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    299a:	611a      	str	r2, [r3, #16]
	if (lf) {
    299c:	b126      	cbz	r6, 29a8 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    299e:	2200      	movs	r2, #0
    29a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29a4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    29a8:	b910      	cbnz	r0, 29b0 <_power_clock_isr+0x68>
	if (ctto) {
    29aa:	b964      	cbnz	r4, 29c6 <_power_clock_isr+0x7e>
    29ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		NRF_CLOCK->EVENTS_DONE = 0;
    29b0:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    29b4:	2100      	movs	r1, #0
    29b6:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    29ba:	4640      	mov	r0, r8
    29bc:	f7ff ff22 	bl	2804 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    29c0:	2301      	movs	r3, #1
    29c2:	6173      	str	r3, [r6, #20]
    29c4:	e7f1      	b.n	29aa <_power_clock_isr+0x62>
		NRF_CLOCK->EVENTS_CTTO = 0;
    29c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29ca:	2100      	movs	r1, #0
    29cc:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    29d0:	2201      	movs	r2, #1
    29d2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    29d6:	4640      	mov	r0, r8
    29d8:	f7ff ff50 	bl	287c <_m16src_start>
		if (!err) {
    29dc:	2800      	cmp	r0, #0
    29de:	d1e5      	bne.n	29ac <_power_clock_isr+0x64>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    29e0:	2201      	movs	r2, #1
    29e2:	4b02      	ldr	r3, [pc, #8]	; (29ec <_power_clock_isr+0xa4>)
    29e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    29e8:	e7e0      	b.n	29ac <_power_clock_isr+0x64>
    29ea:	bf00      	nop
    29ec:	e000e100 	.word	0xe000e100

000029f0 <_k32src_start>:
	__asm__ volatile(
    29f0:	f04f 0220 	mov.w	r2, #32
    29f4:	f3ef 8311 	mrs	r3, BASEPRI
    29f8:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    29fc:	4a38      	ldr	r2, [pc, #224]	; (2ae0 <_k32src_start+0xf0>)
    29fe:	7812      	ldrb	r2, [r2, #0]
    2a00:	b152      	cbz	r2, 2a18 <_k32src_start+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2a02:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2a06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a0a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2a0e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a12:	d062      	beq.n	2ada <_k32src_start+0xea>
		return 0;
    2a14:	2000      	movs	r0, #0
    2a16:	4770      	bx	lr
{
    2a18:	b570      	push	{r4, r5, r6, lr}
    2a1a:	460d      	mov	r5, r1
    2a1c:	4604      	mov	r4, r0
	k32src_initialized = 1;
    2a1e:	2601      	movs	r6, #1
    2a20:	4a2f      	ldr	r2, [pc, #188]	; (2ae0 <_k32src_start+0xf0>)
    2a22:	7016      	strb	r6, [r2, #0]
    2a24:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    2a28:	2000      	movs	r0, #0
    2a2a:	f024 ff4f 	bl	278cc <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2a2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a32:	2200      	movs	r2, #0
    2a34:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    2a38:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2a3c:	2102      	movs	r1, #2
    2a3e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    2a42:	f8c3 5518 	str.w	r5, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    2a46:	609e      	str	r6, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    2a48:	e002      	b.n	2a50 <_k32src_start+0x60>
    2a4a:	bf20      	wfe
  __ASM volatile ("sev");
    2a4c:	bf40      	sev
  __ASM volatile ("wfe");
    2a4e:	bf20      	wfe
    2a50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a54:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2a58:	2b00      	cmp	r3, #0
    2a5a:	d0f6      	beq.n	2a4a <_k32src_start+0x5a>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2a5c:	2100      	movs	r1, #0
    2a5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a62:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    2a66:	f012 0f02 	tst.w	r2, #2
    2a6a:	d102      	bne.n	2a72 <_k32src_start+0x82>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2a6c:	2202      	movs	r2, #2
    2a6e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a72:	2201      	movs	r2, #1
    2a74:	4b1b      	ldr	r3, [pc, #108]	; (2ae4 <_k32src_start+0xf4>)
    2a76:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    2a7a:	2000      	movs	r0, #0
    2a7c:	f024 ff18 	bl	278b0 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2a80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a84:	2218      	movs	r2, #24
    2a86:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    2a8a:	2200      	movs	r2, #0
    2a8c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    2a90:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2a94:	f015 0f03 	tst.w	r5, #3
    2a98:	d008      	beq.n	2aac <_k32src_start+0xbc>
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2a9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a9e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2aa2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2aa6:	d015      	beq.n	2ad4 <_k32src_start+0xe4>
		return 0;
    2aa8:	2000      	movs	r0, #0
    2aaa:	bd70      	pop	{r4, r5, r6, pc}
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    2aac:	2210      	movs	r2, #16
    2aae:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    2ab2:	2218      	movs	r2, #24
    2ab4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2ab8:	2201      	movs	r2, #1
    2aba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2abe:	2100      	movs	r1, #0
    2ac0:	4620      	mov	r0, r4
    2ac2:	f7ff fedb 	bl	287c <_m16src_start>
		if (!err) {
    2ac6:	2800      	cmp	r0, #0
    2ac8:	d1e7      	bne.n	2a9a <_k32src_start+0xaa>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2aca:	2201      	movs	r2, #1
    2acc:	4b05      	ldr	r3, [pc, #20]	; (2ae4 <_k32src_start+0xf4>)
    2ace:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2ad2:	e7e2      	b.n	2a9a <_k32src_start+0xaa>
		return -EINPROGRESS;
    2ad4:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    2ad8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINPROGRESS;
    2ada:	f06f 0076 	mvn.w	r0, #118	; 0x76
    2ade:	4770      	bx	lr
    2ae0:	200003d4 	.word	0x200003d4
    2ae4:	e000e100 	.word	0xe000e100

00002ae8 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    2ae8:	2000      	movs	r0, #0
    2aea:	4770      	bx	lr

00002aec <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    2aec:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2aee:	680b      	ldr	r3, [r1, #0]
    2af0:	3301      	adds	r3, #1
    2af2:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2af4:	4b01      	ldr	r3, [pc, #4]	; (2afc <char_out+0x10>)
    2af6:	681b      	ldr	r3, [r3, #0]
    2af8:	4798      	blx	r3
}
    2afa:	bd08      	pop	{r3, pc}
    2afc:	2000b968 	.word	0x2000b968

00002b00 <_printk_hex_ulong>:
 * @return N/A
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b04:	b083      	sub	sp, #12
    2b06:	4606      	mov	r6, r0
    2b08:	9101      	str	r1, [sp, #4]
    2b0a:	4691      	mov	r9, r2
    2b0c:	461f      	mov	r7, r3
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;
    2b0e:	2400      	movs	r4, #0
	int remaining = 8; /* 8 digits max */
    2b10:	f04f 0a08 	mov.w	sl, #8
	int found_largest_digit = 0;
    2b14:	46a0      	mov	r8, r4
	int size = sizeof(num) * 2;
    2b16:	4653      	mov	r3, sl

	for (; size; size--) {
    2b18:	e009      	b.n	2b2e <_printk_hex_ulong+0x2e>
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
    2b1a:	2809      	cmp	r0, #9
    2b1c:	d91f      	bls.n	2b5e <_printk_hex_ulong+0x5e>
    2b1e:	2357      	movs	r3, #87	; 0x57
			out((int)nibble, ctx);
    2b20:	9901      	ldr	r1, [sp, #4]
    2b22:	4418      	add	r0, r3
    2b24:	47b0      	blx	r6
			digits++;
    2b26:	3401      	adds	r4, #1
			found_largest_digit = 1;
    2b28:	f04f 0801 	mov.w	r8, #1
			continue;
		}

		if (remaining-- <= min_width) {
    2b2c:	462b      	mov	r3, r5
	for (; size; size--) {
    2b2e:	b323      	cbz	r3, 2b7a <_printk_hex_ulong+0x7a>
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    2b30:	1e5d      	subs	r5, r3, #1
    2b32:	00a8      	lsls	r0, r5, #2
    2b34:	fa29 f000 	lsr.w	r0, r9, r0
		if (nibble || found_largest_digit || size == 1) {
    2b38:	f010 000f 	ands.w	r0, r0, #15
    2b3c:	d1ed      	bne.n	2b1a <_printk_hex_ulong+0x1a>
    2b3e:	f1b8 0f00 	cmp.w	r8, #0
    2b42:	d1ea      	bne.n	2b1a <_printk_hex_ulong+0x1a>
    2b44:	2b01      	cmp	r3, #1
    2b46:	d0e8      	beq.n	2b1a <_printk_hex_ulong+0x1a>
		if (remaining-- <= min_width) {
    2b48:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
    2b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2b4e:	459a      	cmp	sl, r3
    2b50:	dc11      	bgt.n	2b76 <_printk_hex_ulong+0x76>
			if (padding == PAD_ZERO_BEFORE) {
    2b52:	2f01      	cmp	r7, #1
    2b54:	d005      	beq.n	2b62 <_printk_hex_ulong+0x62>
				out('0', ctx);
			} else if (padding == PAD_SPACE_BEFORE) {
    2b56:	2f02      	cmp	r7, #2
    2b58:	d008      	beq.n	2b6c <_printk_hex_ulong+0x6c>
		if (remaining-- <= min_width) {
    2b5a:	46da      	mov	sl, fp
    2b5c:	e7e6      	b.n	2b2c <_printk_hex_ulong+0x2c>
			nibble += nibble > 9 ? 87 : 48;
    2b5e:	2330      	movs	r3, #48	; 0x30
    2b60:	e7de      	b.n	2b20 <_printk_hex_ulong+0x20>
				out('0', ctx);
    2b62:	9901      	ldr	r1, [sp, #4]
    2b64:	2030      	movs	r0, #48	; 0x30
    2b66:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2b68:	46da      	mov	sl, fp
    2b6a:	e7df      	b.n	2b2c <_printk_hex_ulong+0x2c>
				out(' ', ctx);
    2b6c:	9901      	ldr	r1, [sp, #4]
    2b6e:	2020      	movs	r0, #32
    2b70:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2b72:	46da      	mov	sl, fp
    2b74:	e7da      	b.n	2b2c <_printk_hex_ulong+0x2c>
    2b76:	46da      	mov	sl, fp
    2b78:	e7d8      	b.n	2b2c <_printk_hex_ulong+0x2c>
			}
		}
	}

	if (padding == PAD_SPACE_AFTER) {
    2b7a:	2f03      	cmp	r7, #3
    2b7c:	d002      	beq.n	2b84 <_printk_hex_ulong+0x84>
		remaining = min_width * 2 - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2b7e:	b003      	add	sp, #12
    2b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width * 2 - digits;
    2b84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2b86:	ebc4 0443 	rsb	r4, r4, r3, lsl #1
		while (remaining-- > 0) {
    2b8a:	1e65      	subs	r5, r4, #1
    2b8c:	2c00      	cmp	r4, #0
    2b8e:	ddf6      	ble.n	2b7e <_printk_hex_ulong+0x7e>
			out(' ', ctx);
    2b90:	9901      	ldr	r1, [sp, #4]
    2b92:	2020      	movs	r0, #32
    2b94:	47b0      	blx	r6
		while (remaining-- > 0) {
    2b96:	462c      	mov	r4, r5
    2b98:	e7f7      	b.n	2b8a <_printk_hex_ulong+0x8a>
	...

00002b9c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ba0:	b083      	sub	sp, #12
    2ba2:	4682      	mov	sl, r0
    2ba4:	9101      	str	r1, [sp, #4]
    2ba6:	469b      	mov	fp, r3
    2ba8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    2baa:	2f00      	cmp	r7, #0
    2bac:	dd07      	ble.n	2bbe <_printk_dec_ulong+0x22>
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    2bae:	4615      	mov	r5, r2
    2bb0:	f04f 0901 	mov.w	r9, #1
    2bb4:	260a      	movs	r6, #10
    2bb6:	f04f 0800 	mov.w	r8, #0
    2bba:	4c22      	ldr	r4, [pc, #136]	; (2c44 <_printk_dec_ulong+0xa8>)
    2bbc:	e015      	b.n	2bea <_printk_dec_ulong+0x4e>
		min_width = 1;
    2bbe:	2701      	movs	r7, #1
    2bc0:	e7f5      	b.n	2bae <_printk_dec_ulong+0x12>
			out((int)((remainder / (pos + 1)) + 48), ctx);
    2bc2:	1c60      	adds	r0, r4, #1
    2bc4:	fbb5 f0f0 	udiv	r0, r5, r0
    2bc8:	9901      	ldr	r1, [sp, #4]
    2bca:	3030      	adds	r0, #48	; 0x30
    2bcc:	47d0      	blx	sl
			digits++;
    2bce:	f109 0901 	add.w	r9, r9, #1
			found_largest_digit = 1;
    2bd2:	f04f 0801 	mov.w	r8, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    2bd6:	3e01      	subs	r6, #1
		remainder %= (pos + 1);
    2bd8:	1c63      	adds	r3, r4, #1
    2bda:	fbb5 f2f3 	udiv	r2, r5, r3
    2bde:	fb03 5512 	mls	r5, r3, r2, r5
		pos /= 10;
    2be2:	4b19      	ldr	r3, [pc, #100]	; (2c48 <_printk_dec_ulong+0xac>)
    2be4:	fba3 3404 	umull	r3, r4, r3, r4
    2be8:	08e4      	lsrs	r4, r4, #3
	while (pos >= 9) {
    2bea:	2c08      	cmp	r4, #8
    2bec:	d914      	bls.n	2c18 <_printk_dec_ulong+0x7c>
		if (found_largest_digit || remainder > pos) {
    2bee:	f1b8 0f00 	cmp.w	r8, #0
    2bf2:	d1e6      	bne.n	2bc2 <_printk_dec_ulong+0x26>
    2bf4:	42ac      	cmp	r4, r5
    2bf6:	d3e4      	bcc.n	2bc2 <_printk_dec_ulong+0x26>
		} else if (remaining <= min_width
    2bf8:	42be      	cmp	r6, r7
    2bfa:	dcec      	bgt.n	2bd6 <_printk_dec_ulong+0x3a>
				&& padding < PAD_SPACE_AFTER) {
    2bfc:	f1bb 0f02 	cmp.w	fp, #2
    2c00:	d8e9      	bhi.n	2bd6 <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2c02:	f1bb 0f01 	cmp.w	fp, #1
    2c06:	d005      	beq.n	2c14 <_printk_dec_ulong+0x78>
    2c08:	2020      	movs	r0, #32
    2c0a:	9901      	ldr	r1, [sp, #4]
    2c0c:	47d0      	blx	sl
			digits++;
    2c0e:	f109 0901 	add.w	r9, r9, #1
    2c12:	e7e0      	b.n	2bd6 <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2c14:	2030      	movs	r0, #48	; 0x30
    2c16:	e7f8      	b.n	2c0a <_printk_dec_ulong+0x6e>
	}
	out((int)(remainder + 48), ctx);
    2c18:	9901      	ldr	r1, [sp, #4]
    2c1a:	f105 0030 	add.w	r0, r5, #48	; 0x30
    2c1e:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    2c20:	f1bb 0f03 	cmp.w	fp, #3
    2c24:	d002      	beq.n	2c2c <_printk_dec_ulong+0x90>
		remaining = min_width - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2c26:	b003      	add	sp, #12
    2c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width - digits;
    2c2c:	eba7 0709 	sub.w	r7, r7, r9
		while (remaining-- > 0) {
    2c30:	e003      	b.n	2c3a <_printk_dec_ulong+0x9e>
			out(' ', ctx);
    2c32:	9901      	ldr	r1, [sp, #4]
    2c34:	2020      	movs	r0, #32
    2c36:	47d0      	blx	sl
		while (remaining-- > 0) {
    2c38:	4627      	mov	r7, r4
    2c3a:	1e7c      	subs	r4, r7, #1
    2c3c:	2f00      	cmp	r7, #0
    2c3e:	dcf8      	bgt.n	2c32 <_printk_dec_ulong+0x96>
    2c40:	e7f1      	b.n	2c26 <_printk_dec_ulong+0x8a>
    2c42:	bf00      	nop
    2c44:	3b9ac9ff 	.word	0x3b9ac9ff
    2c48:	cccccccd 	.word	0xcccccccd

00002c4c <str_out>:
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
    2c4c:	b410      	push	{r4}
	if (!ctx->str || ctx->count >= ctx->max) {
    2c4e:	680c      	ldr	r4, [r1, #0]
    2c50:	b154      	cbz	r4, 2c68 <str_out+0x1c>
    2c52:	688b      	ldr	r3, [r1, #8]
    2c54:	684a      	ldr	r2, [r1, #4]
    2c56:	4293      	cmp	r3, r2
    2c58:	da06      	bge.n	2c68 <str_out+0x1c>
		ctx->count++;
		return c;
	}

	if (ctx->count == ctx->max - 1) {
    2c5a:	3a01      	subs	r2, #1
    2c5c:	4293      	cmp	r3, r2
    2c5e:	d008      	beq.n	2c72 <str_out+0x26>
		ctx->str[ctx->count++] = '\0';
	} else {
		ctx->str[ctx->count++] = c;
    2c60:	1c5a      	adds	r2, r3, #1
    2c62:	608a      	str	r2, [r1, #8]
    2c64:	54e0      	strb	r0, [r4, r3]
    2c66:	e002      	b.n	2c6e <str_out+0x22>
		ctx->count++;
    2c68:	688b      	ldr	r3, [r1, #8]
    2c6a:	3301      	adds	r3, #1
    2c6c:	608b      	str	r3, [r1, #8]
	}

	return c;
}
    2c6e:	bc10      	pop	{r4}
    2c70:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    2c72:	1c5a      	adds	r2, r3, #1
    2c74:	608a      	str	r2, [r1, #8]
    2c76:	2200      	movs	r2, #0
    2c78:	54e2      	strb	r2, [r4, r3]
    2c7a:	e7f8      	b.n	2c6e <str_out+0x22>

00002c7c <__printk_hook_install>:
	_char_out = fn;
    2c7c:	4b01      	ldr	r3, [pc, #4]	; (2c84 <__printk_hook_install+0x8>)
    2c7e:	6018      	str	r0, [r3, #0]
    2c80:	4770      	bx	lr
    2c82:	bf00      	nop
    2c84:	2000b968 	.word	0x2000b968

00002c88 <_vprintk>:
{
    2c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c8c:	b084      	sub	sp, #16
    2c8e:	4607      	mov	r7, r0
    2c90:	460e      	mov	r6, r1
    2c92:	4614      	mov	r4, r2
    2c94:	9303      	str	r3, [sp, #12]
	int long_ctr = 0;
    2c96:	f04f 0800 	mov.w	r8, #0
	int min_width = -1;
    2c9a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    2c9e:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
    2ca0:	4645      	mov	r5, r8
	while (*fmt) {
    2ca2:	e104      	b.n	2eae <_vprintk+0x226>
			switch (*fmt) {
    2ca4:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    2ca8:	2b55      	cmp	r3, #85	; 0x55
    2caa:	f200 80f1 	bhi.w	2e90 <_vprintk+0x208>
    2cae:	e8df f013 	tbh	[pc, r3, lsl #1]
    2cb2:	00ea      	.short	0x00ea
    2cb4:	00ef00ef 	.word	0x00ef00ef
    2cb8:	00ef00ef 	.word	0x00ef00ef
    2cbc:	00ef00ef 	.word	0x00ef00ef
    2cc0:	010800ef 	.word	0x010800ef
    2cc4:	00ef00ef 	.word	0x00ef00ef
    2cc8:	00590056 	.word	0x00590056
    2ccc:	00590059 	.word	0x00590059
    2cd0:	00590059 	.word	0x00590059
    2cd4:	00590059 	.word	0x00590059
    2cd8:	00590059 	.word	0x00590059
    2cdc:	00ef00ef 	.word	0x00ef00ef
    2ce0:	00ef00ef 	.word	0x00ef00ef
    2ce4:	00ef00ef 	.word	0x00ef00ef
    2ce8:	00ef00ef 	.word	0x00ef00ef
    2cec:	00ef00ef 	.word	0x00ef00ef
    2cf0:	00ef00ef 	.word	0x00ef00ef
    2cf4:	00ef00ef 	.word	0x00ef00ef
    2cf8:	00ef00ef 	.word	0x00ef00ef
    2cfc:	00ef00ef 	.word	0x00ef00ef
    2d00:	00ef00ef 	.word	0x00ef00ef
    2d04:	00ef00ef 	.word	0x00ef00ef
    2d08:	00ef00ef 	.word	0x00ef00ef
    2d0c:	00ef00ef 	.word	0x00ef00ef
    2d10:	00ef00ef 	.word	0x00ef00ef
    2d14:	00ef00ef 	.word	0x00ef00ef
    2d18:	00ef00bc 	.word	0x00ef00bc
    2d1c:	00ef00ef 	.word	0x00ef00ef
    2d20:	00ef00ef 	.word	0x00ef00ef
    2d24:	00ef00ef 	.word	0x00ef00ef
    2d28:	00ef00ef 	.word	0x00ef00ef
    2d2c:	00e200ef 	.word	0x00e200ef
    2d30:	00ef0076 	.word	0x00ef0076
    2d34:	00ef00ef 	.word	0x00ef00ef
    2d38:	007600fd 	.word	0x007600fd
    2d3c:	00ef00ef 	.word	0x00ef00ef
    2d40:	00ef0073 	.word	0x00ef0073
    2d44:	00ef00ef 	.word	0x00ef00ef
    2d48:	00ef00b2 	.word	0x00ef00b2
    2d4c:	00d500ef 	.word	0x00d500ef
    2d50:	009900ef 	.word	0x009900ef
    2d54:	00ef00ef 	.word	0x00ef00ef
    2d58:	00ef00bc 	.word	0x00ef00bc
    2d5c:	00fd      	.short	0x00fd
				if (min_width < 0 && padding == PAD_NONE) {
    2d5e:	f1ba 0f00 	cmp.w	sl, #0
    2d62:	db10      	blt.n	2d86 <_vprintk+0xfe>
				if (min_width < 0) {
    2d64:	f1ba 0f00 	cmp.w	sl, #0
    2d68:	db13      	blt.n	2d92 <_vprintk+0x10a>
					min_width = 10 * min_width + *fmt - '0';
    2d6a:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    2d6e:	ea4f 034a 	mov.w	r3, sl, lsl #1
    2d72:	4418      	add	r0, r3
    2d74:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
				if (padding == PAD_NONE) {
    2d78:	f1b9 0f00 	cmp.w	r9, #0
    2d7c:	f040 8096 	bne.w	2eac <_vprintk+0x224>
					padding = PAD_SPACE_BEFORE;
    2d80:	f04f 0902 	mov.w	r9, #2
    2d84:	e092      	b.n	2eac <_vprintk+0x224>
				if (min_width < 0 && padding == PAD_NONE) {
    2d86:	f1b9 0f00 	cmp.w	r9, #0
    2d8a:	d1eb      	bne.n	2d64 <_vprintk+0xdc>
					padding = PAD_ZERO_BEFORE;
    2d8c:	f04f 0901 	mov.w	r9, #1
    2d90:	e08c      	b.n	2eac <_vprintk+0x224>
					min_width = *fmt - '0';
    2d92:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
    2d96:	e7ef      	b.n	2d78 <_vprintk+0xf0>
				long_ctr++;
    2d98:	f108 0801 	add.w	r8, r8, #1
    2d9c:	e086      	b.n	2eac <_vprintk+0x224>
				if (long_ctr < 2) {
    2d9e:	f1b8 0f01 	cmp.w	r8, #1
    2da2:	dd13      	ble.n	2dcc <_vprintk+0x144>
					d = (long)va_arg(ap, long long);
    2da4:	9b03      	ldr	r3, [sp, #12]
    2da6:	3307      	adds	r3, #7
    2da8:	f023 0307 	bic.w	r3, r3, #7
    2dac:	f103 0208 	add.w	r2, r3, #8
    2db0:	9203      	str	r2, [sp, #12]
    2db2:	681d      	ldr	r5, [r3, #0]
				if (d < 0) {
    2db4:	2d00      	cmp	r5, #0
    2db6:	db0e      	blt.n	2dd6 <_vprintk+0x14e>
				_printk_dec_ulong(out, ctx, d, padding,
    2db8:	f8cd a000 	str.w	sl, [sp]
    2dbc:	464b      	mov	r3, r9
    2dbe:	462a      	mov	r2, r5
    2dc0:	4631      	mov	r1, r6
    2dc2:	4638      	mov	r0, r7
    2dc4:	f7ff feea 	bl	2b9c <_printk_dec_ulong>
			might_format = 0;
    2dc8:	2500      	movs	r5, #0
				break;
    2dca:	e06f      	b.n	2eac <_vprintk+0x224>
					d = va_arg(ap, long);
    2dcc:	9b03      	ldr	r3, [sp, #12]
    2dce:	1d1a      	adds	r2, r3, #4
    2dd0:	9203      	str	r2, [sp, #12]
    2dd2:	681d      	ldr	r5, [r3, #0]
    2dd4:	e7ee      	b.n	2db4 <_vprintk+0x12c>
					out((int)'-', ctx);
    2dd6:	4631      	mov	r1, r6
    2dd8:	202d      	movs	r0, #45	; 0x2d
    2dda:	47b8      	blx	r7
					d = -d;
    2ddc:	426d      	negs	r5, r5
					min_width--;
    2dde:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2de2:	e7e9      	b.n	2db8 <_vprintk+0x130>
				if (long_ctr < 2) {
    2de4:	f1b8 0f01 	cmp.w	r8, #1
    2de8:	dd10      	ble.n	2e0c <_vprintk+0x184>
					u = (unsigned long)va_arg(ap,
    2dea:	9b03      	ldr	r3, [sp, #12]
    2dec:	3307      	adds	r3, #7
    2dee:	f023 0307 	bic.w	r3, r3, #7
    2df2:	f103 0208 	add.w	r2, r3, #8
    2df6:	9203      	str	r2, [sp, #12]
    2df8:	681a      	ldr	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    2dfa:	f8cd a000 	str.w	sl, [sp]
    2dfe:	464b      	mov	r3, r9
    2e00:	4631      	mov	r1, r6
    2e02:	4638      	mov	r0, r7
    2e04:	f7ff feca 	bl	2b9c <_printk_dec_ulong>
			might_format = 0;
    2e08:	2500      	movs	r5, #0
				break;
    2e0a:	e04f      	b.n	2eac <_vprintk+0x224>
					u = va_arg(ap, unsigned long);
    2e0c:	9b03      	ldr	r3, [sp, #12]
    2e0e:	1d1a      	adds	r2, r3, #4
    2e10:	9203      	str	r2, [sp, #12]
    2e12:	681a      	ldr	r2, [r3, #0]
    2e14:	e7f1      	b.n	2dfa <_vprintk+0x172>
				  out('0', ctx);
    2e16:	4631      	mov	r1, r6
    2e18:	2030      	movs	r0, #48	; 0x30
    2e1a:	47b8      	blx	r7
				  out('x', ctx);
    2e1c:	4631      	mov	r1, r6
    2e1e:	2078      	movs	r0, #120	; 0x78
    2e20:	47b8      	blx	r7
				  min_width = 8;
    2e22:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
    2e26:	f04f 0901 	mov.w	r9, #1
				if (long_ctr < 2) {
    2e2a:	f1b8 0f01 	cmp.w	r8, #1
    2e2e:	dd10      	ble.n	2e52 <_vprintk+0x1ca>
					x = (unsigned long)va_arg(ap,
    2e30:	9b03      	ldr	r3, [sp, #12]
    2e32:	3307      	adds	r3, #7
    2e34:	f023 0307 	bic.w	r3, r3, #7
    2e38:	f103 0208 	add.w	r2, r3, #8
    2e3c:	9203      	str	r2, [sp, #12]
    2e3e:	681a      	ldr	r2, [r3, #0]
				_printk_hex_ulong(out, ctx, x, padding,
    2e40:	f8cd a000 	str.w	sl, [sp]
    2e44:	464b      	mov	r3, r9
    2e46:	4631      	mov	r1, r6
    2e48:	4638      	mov	r0, r7
    2e4a:	f7ff fe59 	bl	2b00 <_printk_hex_ulong>
			might_format = 0;
    2e4e:	2500      	movs	r5, #0
				break;
    2e50:	e02c      	b.n	2eac <_vprintk+0x224>
					x = va_arg(ap, unsigned long);
    2e52:	9b03      	ldr	r3, [sp, #12]
    2e54:	1d1a      	adds	r2, r3, #4
    2e56:	9203      	str	r2, [sp, #12]
    2e58:	681a      	ldr	r2, [r3, #0]
    2e5a:	e7f1      	b.n	2e40 <_vprintk+0x1b8>
				char *s = va_arg(ap, char *);
    2e5c:	9b03      	ldr	r3, [sp, #12]
    2e5e:	1d1a      	adds	r2, r3, #4
    2e60:	9203      	str	r2, [sp, #12]
    2e62:	681d      	ldr	r5, [r3, #0]
				while (*s)
    2e64:	e002      	b.n	2e6c <_vprintk+0x1e4>
					out((int)(*s++), ctx);
    2e66:	3501      	adds	r5, #1
    2e68:	4631      	mov	r1, r6
    2e6a:	47b8      	blx	r7
				while (*s)
    2e6c:	7828      	ldrb	r0, [r5, #0]
    2e6e:	2800      	cmp	r0, #0
    2e70:	d1f9      	bne.n	2e66 <_vprintk+0x1de>
			might_format = 0;
    2e72:	2500      	movs	r5, #0
    2e74:	e01a      	b.n	2eac <_vprintk+0x224>
				int c = va_arg(ap, int);
    2e76:	9b03      	ldr	r3, [sp, #12]
    2e78:	1d1a      	adds	r2, r3, #4
    2e7a:	9203      	str	r2, [sp, #12]
				out(c, ctx);
    2e7c:	4631      	mov	r1, r6
    2e7e:	6818      	ldr	r0, [r3, #0]
    2e80:	47b8      	blx	r7
			might_format = 0;
    2e82:	2500      	movs	r5, #0
				break;
    2e84:	e012      	b.n	2eac <_vprintk+0x224>
				out((int)'%', ctx);
    2e86:	4631      	mov	r1, r6
    2e88:	2025      	movs	r0, #37	; 0x25
    2e8a:	47b8      	blx	r7
			might_format = 0;
    2e8c:	2500      	movs	r5, #0
				break;
    2e8e:	e00d      	b.n	2eac <_vprintk+0x224>
				out((int)'%', ctx);
    2e90:	4631      	mov	r1, r6
    2e92:	2025      	movs	r0, #37	; 0x25
    2e94:	47b8      	blx	r7
				out((int)*fmt, ctx);
    2e96:	4631      	mov	r1, r6
    2e98:	7820      	ldrb	r0, [r4, #0]
    2e9a:	47b8      	blx	r7
			might_format = 0;
    2e9c:	2500      	movs	r5, #0
				break;
    2e9e:	e005      	b.n	2eac <_vprintk+0x224>
				long_ctr = 0;
    2ea0:	46a8      	mov	r8, r5
				min_width = -1;
    2ea2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				padding = PAD_NONE;
    2ea6:	f04f 0900 	mov.w	r9, #0
				might_format = 1;
    2eaa:	2501      	movs	r5, #1
		++fmt;
    2eac:	3401      	adds	r4, #1
	while (*fmt) {
    2eae:	7820      	ldrb	r0, [r4, #0]
    2eb0:	b150      	cbz	r0, 2ec8 <_vprintk+0x240>
		if (!might_format) {
    2eb2:	2d00      	cmp	r5, #0
    2eb4:	f47f aef6 	bne.w	2ca4 <_vprintk+0x1c>
			if (*fmt != '%') {
    2eb8:	2825      	cmp	r0, #37	; 0x25
    2eba:	d0f1      	beq.n	2ea0 <_vprintk+0x218>
				out((int)*fmt, ctx);
    2ebc:	4631      	mov	r1, r6
    2ebe:	47b8      	blx	r7
    2ec0:	e7f4      	b.n	2eac <_vprintk+0x224>
				padding = PAD_SPACE_AFTER;
    2ec2:	f04f 0903 	mov.w	r9, #3
    2ec6:	e7f1      	b.n	2eac <_vprintk+0x224>
}
    2ec8:	b004      	add	sp, #16
    2eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00002ed0 <vprintk>:
{
    2ed0:	b510      	push	{r4, lr}
    2ed2:	b082      	sub	sp, #8
	struct out_context ctx = { 0 };
    2ed4:	ac02      	add	r4, sp, #8
    2ed6:	2300      	movs	r3, #0
    2ed8:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    2edc:	460b      	mov	r3, r1
    2ede:	4602      	mov	r2, r0
    2ee0:	4621      	mov	r1, r4
    2ee2:	4803      	ldr	r0, [pc, #12]	; (2ef0 <vprintk+0x20>)
    2ee4:	f7ff fed0 	bl	2c88 <_vprintk>
}
    2ee8:	9801      	ldr	r0, [sp, #4]
    2eea:	b002      	add	sp, #8
    2eec:	bd10      	pop	{r4, pc}
    2eee:	bf00      	nop
    2ef0:	00002aed 	.word	0x00002aed

00002ef4 <printk>:
{
    2ef4:	b40f      	push	{r0, r1, r2, r3}
    2ef6:	b500      	push	{lr}
    2ef8:	b083      	sub	sp, #12
    2efa:	a904      	add	r1, sp, #16
    2efc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    2f00:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    2f02:	f7ff ffe5 	bl	2ed0 <vprintk>
}
    2f06:	b003      	add	sp, #12
    2f08:	f85d eb04 	ldr.w	lr, [sp], #4
    2f0c:	b004      	add	sp, #16
    2f0e:	4770      	bx	lr

00002f10 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    2f10:	b40c      	push	{r2, r3}
    2f12:	b510      	push	{r4, lr}
    2f14:	b084      	sub	sp, #16
    2f16:	4604      	mov	r4, r0
    2f18:	ab06      	add	r3, sp, #24
    2f1a:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    2f1e:	9001      	str	r0, [sp, #4]
    2f20:	9102      	str	r1, [sp, #8]
    2f22:	2100      	movs	r1, #0
    2f24:	9103      	str	r1, [sp, #12]
	va_list ap;

	va_start(ap, fmt);
    2f26:	9300      	str	r3, [sp, #0]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    2f28:	a901      	add	r1, sp, #4
    2f2a:	4807      	ldr	r0, [pc, #28]	; (2f48 <snprintk+0x38>)
    2f2c:	f7ff feac 	bl	2c88 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    2f30:	9b03      	ldr	r3, [sp, #12]
    2f32:	9a02      	ldr	r2, [sp, #8]
    2f34:	4293      	cmp	r3, r2
    2f36:	da01      	bge.n	2f3c <snprintk+0x2c>
		str[ctx.count] = '\0';
    2f38:	2200      	movs	r2, #0
    2f3a:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    2f3c:	9803      	ldr	r0, [sp, #12]
    2f3e:	b004      	add	sp, #16
    2f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2f44:	b002      	add	sp, #8
    2f46:	4770      	bx	lr
    2f48:	00002c4d 	.word	0x00002c4d

00002f4c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_IPV6_NBR_CACHE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_HCI_VS_BUILD_INFO, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_SHOW_TAGS, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_CHAN_SEL_2, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_UDP_CHECKSUM, 1);
    2f4c:	4770      	bx	lr

00002f4e <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    2f4e:	428b      	cmp	r3, r1
    2f50:	d901      	bls.n	2f56 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
    2f52:	2000      	movs	r0, #0
    2f54:	4770      	bx	lr
{
    2f56:	b510      	push	{r4, lr}
    2f58:	461c      	mov	r4, r3
    2f5a:	4611      	mov	r1, r2
		(void)memcpy(to, from, from_len);
    2f5c:	461a      	mov	r2, r3
    2f5e:	f7fd f9af 	bl	2c0 <memcpy>
		return from_len;
    2f62:	4620      	mov	r0, r4
    2f64:	bd10      	pop	{r4, pc}

00002f66 <_set>:
	}
}

void _set(void *to, uint8_t val, unsigned int len)
{
    2f66:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
    2f68:	f027 f90a 	bl	2a180 <memset>
    2f6c:	bd08      	pop	{r3, pc}

00002f6e <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    2f6e:	09c3      	lsrs	r3, r0, #7
    2f70:	005a      	lsls	r2, r3, #1
    2f72:	4413      	add	r3, r2
    2f74:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    2f78:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    2f7c:	b2c0      	uxtb	r0, r0
    2f7e:	4770      	bx	lr

00002f80 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    2f80:	b4f0      	push	{r4, r5, r6, r7}
    2f82:	b08c      	sub	sp, #48	; 0x30
    2f84:	4604      	mov	r4, r0
    2f86:	460f      	mov	r7, r1
	const unsigned int rconst[11] = {
    2f88:	ad01      	add	r5, sp, #4
    2f8a:	4e2a      	ldr	r6, [pc, #168]	; (3034 <tc_aes128_set_encrypt_key+0xb4>)
    2f8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2f90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2f92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2f94:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2f98:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    2f9c:	2c00      	cmp	r4, #0
    2f9e:	d044      	beq.n	302a <tc_aes128_set_encrypt_key+0xaa>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    2fa0:	2f00      	cmp	r7, #0
    2fa2:	d044      	beq.n	302e <tc_aes128_set_encrypt_key+0xae>
    2fa4:	2200      	movs	r2, #0
    2fa6:	e00f      	b.n	2fc8 <tc_aes128_set_encrypt_key+0x48>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    2fa8:	f817 0022 	ldrb.w	r0, [r7, r2, lsl #2]
    2fac:	eb07 0182 	add.w	r1, r7, r2, lsl #2
    2fb0:	784b      	ldrb	r3, [r1, #1]
    2fb2:	041b      	lsls	r3, r3, #16
    2fb4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    2fb8:	7888      	ldrb	r0, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    2fba:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    2fbe:	78c9      	ldrb	r1, [r1, #3]
    2fc0:	430b      	orrs	r3, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    2fc2:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (i = 0; i < Nk; ++i) {
    2fc6:	3201      	adds	r2, #1
    2fc8:	2a03      	cmp	r2, #3
    2fca:	d9ed      	bls.n	2fa8 <tc_aes128_set_encrypt_key+0x28>
    2fcc:	e006      	b.n	2fdc <tc_aes128_set_encrypt_key+0x5c>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
    2fce:	1f11      	subs	r1, r2, #4
    2fd0:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    2fd4:	404b      	eors	r3, r1
    2fd6:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
    2fda:	3201      	adds	r2, #1
    2fdc:	2a2b      	cmp	r2, #43	; 0x2b
    2fde:	d820      	bhi.n	3022 <tc_aes128_set_encrypt_key+0xa2>
		t = s->words[i-1];
    2fe0:	1e53      	subs	r3, r2, #1
    2fe2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
		if ((i % Nk) == 0) {
    2fe6:	f012 0f03 	tst.w	r2, #3
    2fea:	d1f0      	bne.n	2fce <tc_aes128_set_encrypt_key+0x4e>
	return (((a) >> 24)|((a) << 8));
    2fec:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    2ff0:	0e19      	lsrs	r1, r3, #24
    2ff2:	4811      	ldr	r0, [pc, #68]	; (3038 <tc_aes128_set_encrypt_key+0xb8>)
    2ff4:	5c45      	ldrb	r5, [r0, r1]
    2ff6:	f3c3 4107 	ubfx	r1, r3, #16, #8
    2ffa:	5c41      	ldrb	r1, [r0, r1]
    2ffc:	0409      	lsls	r1, r1, #16
    2ffe:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
    3002:	f3c3 2507 	ubfx	r5, r3, #8, #8
    3006:	5d45      	ldrb	r5, [r0, r5]
    3008:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    300c:	b2db      	uxtb	r3, r3
    300e:	5cc3      	ldrb	r3, [r0, r3]
    3010:	4319      	orrs	r1, r3
    3012:	f022 0303 	bic.w	r3, r2, #3
    3016:	a80c      	add	r0, sp, #48	; 0x30
    3018:	4403      	add	r3, r0
    301a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    301e:	404b      	eors	r3, r1
    3020:	e7d5      	b.n	2fce <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    3022:	2001      	movs	r0, #1
}
    3024:	b00c      	add	sp, #48	; 0x30
    3026:	bcf0      	pop	{r4, r5, r6, r7}
    3028:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    302a:	2000      	movs	r0, #0
    302c:	e7fa      	b.n	3024 <tc_aes128_set_encrypt_key+0xa4>
		return TC_CRYPTO_FAIL;
    302e:	2000      	movs	r0, #0
    3030:	e7f8      	b.n	3024 <tc_aes128_set_encrypt_key+0xa4>
    3032:	bf00      	nop
    3034:	0002e4f0 	.word	0x0002e4f0
    3038:	0002e898 	.word	0x0002e898

0000303c <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    303c:	2800      	cmp	r0, #0
    303e:	f000 8367 	beq.w	3710 <tc_aes_encrypt+0x6d4>
{
    3042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3046:	b088      	sub	sp, #32
    3048:	4680      	mov	r8, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    304a:	2900      	cmp	r1, #0
    304c:	f000 8362 	beq.w	3714 <tc_aes_encrypt+0x6d8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    3050:	2a00      	cmp	r2, #0
    3052:	f000 8361 	beq.w	3718 <tc_aes_encrypt+0x6dc>
    3056:	4617      	mov	r7, r2
    3058:	460a      	mov	r2, r1
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    305a:	2310      	movs	r3, #16
    305c:	4619      	mov	r1, r3
    305e:	eb0d 0003 	add.w	r0, sp, r3
    3062:	f7ff ff74 	bl	2f4e <_copy>
	add_round_key(state, s->words);
    3066:	463e      	mov	r6, r7
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    3068:	683b      	ldr	r3, [r7, #0]
    306a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    306e:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3072:	f88d 2010 	strb.w	r2, [sp, #16]
    3076:	f3c3 4207 	ubfx	r2, r3, #16, #8
    307a:	f89d 1011 	ldrb.w	r1, [sp, #17]
    307e:	404a      	eors	r2, r1
    3080:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    3084:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3088:	f89d 1012 	ldrb.w	r1, [sp, #18]
    308c:	404a      	eors	r2, r1
    308e:	f88d 2012 	strb.w	r2, [sp, #18]
    3092:	b2db      	uxtb	r3, r3
    3094:	f89d 2013 	ldrb.w	r2, [sp, #19]
    3098:	4053      	eors	r3, r2
    309a:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    309e:	687b      	ldr	r3, [r7, #4]
    30a0:	f89d 2014 	ldrb.w	r2, [sp, #20]
    30a4:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    30a8:	f88d 2014 	strb.w	r2, [sp, #20]
    30ac:	f3c3 4207 	ubfx	r2, r3, #16, #8
    30b0:	f89d 1015 	ldrb.w	r1, [sp, #21]
    30b4:	404a      	eors	r2, r1
    30b6:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    30ba:	f3c3 2207 	ubfx	r2, r3, #8, #8
    30be:	f89d 1016 	ldrb.w	r1, [sp, #22]
    30c2:	404a      	eors	r2, r1
    30c4:	f88d 2016 	strb.w	r2, [sp, #22]
    30c8:	b2db      	uxtb	r3, r3
    30ca:	f89d 2017 	ldrb.w	r2, [sp, #23]
    30ce:	4053      	eors	r3, r2
    30d0:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    30d4:	68bb      	ldr	r3, [r7, #8]
    30d6:	f89d 2018 	ldrb.w	r2, [sp, #24]
    30da:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    30de:	f88d 2018 	strb.w	r2, [sp, #24]
    30e2:	f3c3 4207 	ubfx	r2, r3, #16, #8
    30e6:	f89d 1019 	ldrb.w	r1, [sp, #25]
    30ea:	404a      	eors	r2, r1
    30ec:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    30f0:	f3c3 2207 	ubfx	r2, r3, #8, #8
    30f4:	f89d 101a 	ldrb.w	r1, [sp, #26]
    30f8:	404a      	eors	r2, r1
    30fa:	f88d 201a 	strb.w	r2, [sp, #26]
    30fe:	b2db      	uxtb	r3, r3
    3100:	f89d 201b 	ldrb.w	r2, [sp, #27]
    3104:	4053      	eors	r3, r2
    3106:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    310a:	68fb      	ldr	r3, [r7, #12]
    310c:	f89d 201c 	ldrb.w	r2, [sp, #28]
    3110:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3114:	f88d 201c 	strb.w	r2, [sp, #28]
    3118:	f3c3 4207 	ubfx	r2, r3, #16, #8
    311c:	f89d 101d 	ldrb.w	r1, [sp, #29]
    3120:	404a      	eors	r2, r1
    3122:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    3126:	f3c3 2207 	ubfx	r2, r3, #8, #8
    312a:	f89d 101e 	ldrb.w	r1, [sp, #30]
    312e:	404a      	eors	r2, r1
    3130:	f88d 201e 	strb.w	r2, [sp, #30]
    3134:	b2db      	uxtb	r3, r3
    3136:	f89d 201f 	ldrb.w	r2, [sp, #31]
    313a:	4053      	eors	r3, r2
    313c:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
    3140:	2500      	movs	r5, #0
    3142:	e210      	b.n	3566 <tc_aes_encrypt+0x52a>
		s[i] = sbox[s[i]];
    3144:	a904      	add	r1, sp, #16
    3146:	5ccc      	ldrb	r4, [r1, r3]
    3148:	4a02      	ldr	r2, [pc, #8]	; (3154 <tc_aes_encrypt+0x118>)
    314a:	5d14      	ldrb	r4, [r2, r4]
    314c:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    314e:	3301      	adds	r3, #1
    3150:	e002      	b.n	3158 <tc_aes_encrypt+0x11c>
    3152:	bf00      	nop
    3154:	0002e898 	.word	0x0002e898
    3158:	2b0f      	cmp	r3, #15
    315a:	d9f3      	bls.n	3144 <tc_aes_encrypt+0x108>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    315c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3160:	f88d 3000 	strb.w	r3, [sp]
    3164:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3168:	f88d 3001 	strb.w	r3, [sp, #1]
    316c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    3170:	f88d 3002 	strb.w	r3, [sp, #2]
    3174:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3178:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    317c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3180:	f88d 3004 	strb.w	r3, [sp, #4]
    3184:	f89d 3019 	ldrb.w	r3, [sp, #25]
    3188:	f88d 3005 	strb.w	r3, [sp, #5]
    318c:	f89d 301e 	ldrb.w	r3, [sp, #30]
    3190:	f88d 3006 	strb.w	r3, [sp, #6]
    3194:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3198:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    319c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    31a0:	f88d 3008 	strb.w	r3, [sp, #8]
    31a4:	f89d 301d 	ldrb.w	r3, [sp, #29]
    31a8:	f88d 3009 	strb.w	r3, [sp, #9]
    31ac:	f89d 3012 	ldrb.w	r3, [sp, #18]
    31b0:	f88d 300a 	strb.w	r3, [sp, #10]
    31b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    31b8:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    31bc:	f89d 301c 	ldrb.w	r3, [sp, #28]
    31c0:	f88d 300c 	strb.w	r3, [sp, #12]
    31c4:	f89d 3011 	ldrb.w	r3, [sp, #17]
    31c8:	f88d 300d 	strb.w	r3, [sp, #13]
    31cc:	f89d 3016 	ldrb.w	r3, [sp, #22]
    31d0:	f88d 300e 	strb.w	r3, [sp, #14]
    31d4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    31d8:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    31dc:	2310      	movs	r3, #16
    31de:	466a      	mov	r2, sp
    31e0:	4619      	mov	r1, r3
    31e2:	eb0d 0003 	add.w	r0, sp, r3
    31e6:	f7ff feb2 	bl	2f4e <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    31ea:	f89d 0010 	ldrb.w	r0, [sp, #16]
    31ee:	f7ff febe 	bl	2f6e <_double_byte>
    31f2:	4604      	mov	r4, r0
    31f4:	f89d 0011 	ldrb.w	r0, [sp, #17]
    31f8:	f7ff feb9 	bl	2f6e <_double_byte>
    31fc:	f89d 1011 	ldrb.w	r1, [sp, #17]
    3200:	f89d 2012 	ldrb.w	r2, [sp, #18]
    3204:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3208:	4048      	eors	r0, r1
    320a:	4044      	eors	r4, r0
    320c:	4062      	eors	r2, r4
    320e:	4053      	eors	r3, r2
    3210:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    3214:	f89d 4010 	ldrb.w	r4, [sp, #16]
    3218:	4608      	mov	r0, r1
    321a:	f7ff fea8 	bl	2f6e <_double_byte>
    321e:	4044      	eors	r4, r0
    3220:	b2e4      	uxtb	r4, r4
    3222:	f89d 0012 	ldrb.w	r0, [sp, #18]
    3226:	f7ff fea2 	bl	2f6e <_double_byte>
    322a:	f89d 2012 	ldrb.w	r2, [sp, #18]
    322e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3232:	4050      	eors	r0, r2
    3234:	4044      	eors	r4, r0
    3236:	405c      	eors	r4, r3
    3238:	f88d 4001 	strb.w	r4, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    323c:	f89d 4010 	ldrb.w	r4, [sp, #16]
    3240:	f89d 0011 	ldrb.w	r0, [sp, #17]
    3244:	4044      	eors	r4, r0
    3246:	4610      	mov	r0, r2
    3248:	f7ff fe91 	bl	2f6e <_double_byte>
    324c:	4044      	eors	r4, r0
    324e:	b2e4      	uxtb	r4, r4
    3250:	f89d 0013 	ldrb.w	r0, [sp, #19]
    3254:	f7ff fe8b 	bl	2f6e <_double_byte>
    3258:	f89d 3013 	ldrb.w	r3, [sp, #19]
    325c:	4058      	eors	r0, r3
    325e:	4044      	eors	r4, r0
    3260:	f88d 4002 	strb.w	r4, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    3264:	f89d 0010 	ldrb.w	r0, [sp, #16]
    3268:	f7ff fe81 	bl	2f6e <_double_byte>
    326c:	f89d 2010 	ldrb.w	r2, [sp, #16]
    3270:	f89d 3011 	ldrb.w	r3, [sp, #17]
    3274:	f89d 4012 	ldrb.w	r4, [sp, #18]
    3278:	4050      	eors	r0, r2
    327a:	4043      	eors	r3, r0
    327c:	405c      	eors	r4, r3
    327e:	b2e4      	uxtb	r4, r4
    3280:	f89d 0013 	ldrb.w	r0, [sp, #19]
    3284:	f7ff fe73 	bl	2f6e <_double_byte>
    3288:	4060      	eors	r0, r4
    328a:	f88d 0003 	strb.w	r0, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    328e:	f89d 0014 	ldrb.w	r0, [sp, #20]
    3292:	f7ff fe6c 	bl	2f6e <_double_byte>
    3296:	4604      	mov	r4, r0
    3298:	f89d 0015 	ldrb.w	r0, [sp, #21]
    329c:	f7ff fe67 	bl	2f6e <_double_byte>
    32a0:	f89d 1015 	ldrb.w	r1, [sp, #21]
    32a4:	f89d 2016 	ldrb.w	r2, [sp, #22]
    32a8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    32ac:	4048      	eors	r0, r1
    32ae:	4044      	eors	r4, r0
    32b0:	4062      	eors	r2, r4
    32b2:	4053      	eors	r3, r2
    32b4:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    32b8:	f89d 4014 	ldrb.w	r4, [sp, #20]
    32bc:	4608      	mov	r0, r1
    32be:	f7ff fe56 	bl	2f6e <_double_byte>
    32c2:	4044      	eors	r4, r0
    32c4:	b2e4      	uxtb	r4, r4
    32c6:	f89d 0016 	ldrb.w	r0, [sp, #22]
    32ca:	f7ff fe50 	bl	2f6e <_double_byte>
    32ce:	f89d 2016 	ldrb.w	r2, [sp, #22]
    32d2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    32d6:	4050      	eors	r0, r2
    32d8:	4044      	eors	r4, r0
    32da:	405c      	eors	r4, r3
    32dc:	f88d 4005 	strb.w	r4, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    32e0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    32e4:	f89d 0015 	ldrb.w	r0, [sp, #21]
    32e8:	4044      	eors	r4, r0
    32ea:	4610      	mov	r0, r2
    32ec:	f7ff fe3f 	bl	2f6e <_double_byte>
    32f0:	4044      	eors	r4, r0
    32f2:	b2e4      	uxtb	r4, r4
    32f4:	f89d 0017 	ldrb.w	r0, [sp, #23]
    32f8:	f7ff fe39 	bl	2f6e <_double_byte>
    32fc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3300:	4058      	eors	r0, r3
    3302:	4044      	eors	r4, r0
    3304:	f88d 4006 	strb.w	r4, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    3308:	f89d 0014 	ldrb.w	r0, [sp, #20]
    330c:	f7ff fe2f 	bl	2f6e <_double_byte>
    3310:	f89d 2014 	ldrb.w	r2, [sp, #20]
    3314:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3318:	f89d 4016 	ldrb.w	r4, [sp, #22]
    331c:	4050      	eors	r0, r2
    331e:	4043      	eors	r3, r0
    3320:	405c      	eors	r4, r3
    3322:	b2e4      	uxtb	r4, r4
    3324:	f89d 0017 	ldrb.w	r0, [sp, #23]
    3328:	f7ff fe21 	bl	2f6e <_double_byte>
    332c:	4060      	eors	r0, r4
    332e:	f88d 0007 	strb.w	r0, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    3332:	f89d 0018 	ldrb.w	r0, [sp, #24]
    3336:	f7ff fe1a 	bl	2f6e <_double_byte>
    333a:	4604      	mov	r4, r0
    333c:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3340:	f7ff fe15 	bl	2f6e <_double_byte>
    3344:	f89d 1019 	ldrb.w	r1, [sp, #25]
    3348:	f89d 201a 	ldrb.w	r2, [sp, #26]
    334c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3350:	4048      	eors	r0, r1
    3352:	4044      	eors	r4, r0
    3354:	4062      	eors	r2, r4
    3356:	4053      	eors	r3, r2
    3358:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    335c:	f89d 4018 	ldrb.w	r4, [sp, #24]
    3360:	4608      	mov	r0, r1
    3362:	f7ff fe04 	bl	2f6e <_double_byte>
    3366:	4044      	eors	r4, r0
    3368:	b2e4      	uxtb	r4, r4
    336a:	f89d 001a 	ldrb.w	r0, [sp, #26]
    336e:	f7ff fdfe 	bl	2f6e <_double_byte>
    3372:	f89d 201a 	ldrb.w	r2, [sp, #26]
    3376:	f89d 301b 	ldrb.w	r3, [sp, #27]
    337a:	4050      	eors	r0, r2
    337c:	4044      	eors	r4, r0
    337e:	405c      	eors	r4, r3
    3380:	f88d 4009 	strb.w	r4, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    3384:	f89d 4018 	ldrb.w	r4, [sp, #24]
    3388:	f89d 0019 	ldrb.w	r0, [sp, #25]
    338c:	4044      	eors	r4, r0
    338e:	4610      	mov	r0, r2
    3390:	f7ff fded 	bl	2f6e <_double_byte>
    3394:	4044      	eors	r4, r0
    3396:	b2e4      	uxtb	r4, r4
    3398:	f89d 001b 	ldrb.w	r0, [sp, #27]
    339c:	f7ff fde7 	bl	2f6e <_double_byte>
    33a0:	f89d 301b 	ldrb.w	r3, [sp, #27]
    33a4:	4058      	eors	r0, r3
    33a6:	4044      	eors	r4, r0
    33a8:	f88d 400a 	strb.w	r4, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    33ac:	f89d 0018 	ldrb.w	r0, [sp, #24]
    33b0:	f7ff fddd 	bl	2f6e <_double_byte>
    33b4:	f89d 2018 	ldrb.w	r2, [sp, #24]
    33b8:	f89d 3019 	ldrb.w	r3, [sp, #25]
    33bc:	f89d 401a 	ldrb.w	r4, [sp, #26]
    33c0:	4050      	eors	r0, r2
    33c2:	4043      	eors	r3, r0
    33c4:	405c      	eors	r4, r3
    33c6:	b2e4      	uxtb	r4, r4
    33c8:	f89d 001b 	ldrb.w	r0, [sp, #27]
    33cc:	f7ff fdcf 	bl	2f6e <_double_byte>
    33d0:	4060      	eors	r0, r4
    33d2:	f88d 000b 	strb.w	r0, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    33d6:	f89d 001c 	ldrb.w	r0, [sp, #28]
    33da:	f7ff fdc8 	bl	2f6e <_double_byte>
    33de:	4604      	mov	r4, r0
    33e0:	f89d 001d 	ldrb.w	r0, [sp, #29]
    33e4:	f7ff fdc3 	bl	2f6e <_double_byte>
    33e8:	f89d 101d 	ldrb.w	r1, [sp, #29]
    33ec:	f89d 201e 	ldrb.w	r2, [sp, #30]
    33f0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33f4:	4048      	eors	r0, r1
    33f6:	4044      	eors	r4, r0
    33f8:	4062      	eors	r2, r4
    33fa:	4053      	eors	r3, r2
    33fc:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    3400:	f89d 401c 	ldrb.w	r4, [sp, #28]
    3404:	4608      	mov	r0, r1
    3406:	f7ff fdb2 	bl	2f6e <_double_byte>
    340a:	4044      	eors	r4, r0
    340c:	b2e4      	uxtb	r4, r4
    340e:	f89d 001e 	ldrb.w	r0, [sp, #30]
    3412:	f7ff fdac 	bl	2f6e <_double_byte>
    3416:	f89d 201e 	ldrb.w	r2, [sp, #30]
    341a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    341e:	4050      	eors	r0, r2
    3420:	4044      	eors	r4, r0
    3422:	405c      	eors	r4, r3
    3424:	f88d 400d 	strb.w	r4, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    3428:	f89d 401c 	ldrb.w	r4, [sp, #28]
    342c:	f89d 001d 	ldrb.w	r0, [sp, #29]
    3430:	4044      	eors	r4, r0
    3432:	4610      	mov	r0, r2
    3434:	f7ff fd9b 	bl	2f6e <_double_byte>
    3438:	4044      	eors	r4, r0
    343a:	b2e4      	uxtb	r4, r4
    343c:	f89d 001f 	ldrb.w	r0, [sp, #31]
    3440:	f7ff fd95 	bl	2f6e <_double_byte>
    3444:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3448:	4058      	eors	r0, r3
    344a:	4044      	eors	r4, r0
    344c:	f88d 400e 	strb.w	r4, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    3450:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3454:	f7ff fd8b 	bl	2f6e <_double_byte>
    3458:	f89d 201c 	ldrb.w	r2, [sp, #28]
    345c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3460:	f89d 401e 	ldrb.w	r4, [sp, #30]
    3464:	4050      	eors	r0, r2
    3466:	4043      	eors	r3, r0
    3468:	405c      	eors	r4, r3
    346a:	b2e4      	uxtb	r4, r4
    346c:	f89d 001f 	ldrb.w	r0, [sp, #31]
    3470:	f7ff fd7d 	bl	2f6e <_double_byte>
    3474:	4060      	eors	r0, r4
    3476:	f88d 000f 	strb.w	r0, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    347a:	2310      	movs	r3, #16
    347c:	466a      	mov	r2, sp
    347e:	4619      	mov	r1, r3
    3480:	eb0d 0003 	add.w	r0, sp, r3
    3484:	f7ff fd63 	bl	2f4e <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    3488:	3501      	adds	r5, #1
    348a:	012b      	lsls	r3, r5, #4
    348c:	18f2      	adds	r2, r6, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    348e:	58f3      	ldr	r3, [r6, r3]
    3490:	f89d 1010 	ldrb.w	r1, [sp, #16]
    3494:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3498:	f88d 1010 	strb.w	r1, [sp, #16]
    349c:	f3c3 4107 	ubfx	r1, r3, #16, #8
    34a0:	f89d 0011 	ldrb.w	r0, [sp, #17]
    34a4:	4041      	eors	r1, r0
    34a6:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    34aa:	f3c3 2107 	ubfx	r1, r3, #8, #8
    34ae:	f89d 0012 	ldrb.w	r0, [sp, #18]
    34b2:	4041      	eors	r1, r0
    34b4:	f88d 1012 	strb.w	r1, [sp, #18]
    34b8:	b2db      	uxtb	r3, r3
    34ba:	f89d 1013 	ldrb.w	r1, [sp, #19]
    34be:	404b      	eors	r3, r1
    34c0:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    34c4:	6853      	ldr	r3, [r2, #4]
    34c6:	f89d 1014 	ldrb.w	r1, [sp, #20]
    34ca:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    34ce:	f88d 1014 	strb.w	r1, [sp, #20]
    34d2:	f3c3 4107 	ubfx	r1, r3, #16, #8
    34d6:	f89d 0015 	ldrb.w	r0, [sp, #21]
    34da:	4041      	eors	r1, r0
    34dc:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    34e0:	f3c3 2107 	ubfx	r1, r3, #8, #8
    34e4:	f89d 0016 	ldrb.w	r0, [sp, #22]
    34e8:	4041      	eors	r1, r0
    34ea:	f88d 1016 	strb.w	r1, [sp, #22]
    34ee:	b2db      	uxtb	r3, r3
    34f0:	f89d 1017 	ldrb.w	r1, [sp, #23]
    34f4:	404b      	eors	r3, r1
    34f6:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    34fa:	6893      	ldr	r3, [r2, #8]
    34fc:	f89d 1018 	ldrb.w	r1, [sp, #24]
    3500:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3504:	f88d 1018 	strb.w	r1, [sp, #24]
    3508:	f3c3 4107 	ubfx	r1, r3, #16, #8
    350c:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3510:	4041      	eors	r1, r0
    3512:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    3516:	f3c3 2107 	ubfx	r1, r3, #8, #8
    351a:	f89d 001a 	ldrb.w	r0, [sp, #26]
    351e:	4041      	eors	r1, r0
    3520:	f88d 101a 	strb.w	r1, [sp, #26]
    3524:	b2db      	uxtb	r3, r3
    3526:	f89d 101b 	ldrb.w	r1, [sp, #27]
    352a:	404b      	eors	r3, r1
    352c:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    3530:	68d3      	ldr	r3, [r2, #12]
    3532:	f89d 201c 	ldrb.w	r2, [sp, #28]
    3536:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    353a:	f88d 201c 	strb.w	r2, [sp, #28]
    353e:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3542:	f89d 101d 	ldrb.w	r1, [sp, #29]
    3546:	404a      	eors	r2, r1
    3548:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    354c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3550:	f89d 101e 	ldrb.w	r1, [sp, #30]
    3554:	404a      	eors	r2, r1
    3556:	f88d 201e 	strb.w	r2, [sp, #30]
    355a:	b2db      	uxtb	r3, r3
    355c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    3560:	4053      	eors	r3, r2
    3562:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
    3566:	2d08      	cmp	r5, #8
    3568:	d801      	bhi.n	356e <tc_aes_encrypt+0x532>
    356a:	2300      	movs	r3, #0
    356c:	e5f4      	b.n	3158 <tc_aes_encrypt+0x11c>
    356e:	2300      	movs	r3, #0
    3570:	e005      	b.n	357e <tc_aes_encrypt+0x542>
		s[i] = sbox[s[i]];
    3572:	aa04      	add	r2, sp, #16
    3574:	5cd1      	ldrb	r1, [r2, r3]
    3576:	4869      	ldr	r0, [pc, #420]	; (371c <tc_aes_encrypt+0x6e0>)
    3578:	5c41      	ldrb	r1, [r0, r1]
    357a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    357c:	3301      	adds	r3, #1
    357e:	2b0f      	cmp	r3, #15
    3580:	d9f7      	bls.n	3572 <tc_aes_encrypt+0x536>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    3582:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3586:	f88d 3000 	strb.w	r3, [sp]
    358a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    358e:	f88d 3001 	strb.w	r3, [sp, #1]
    3592:	f89d 301a 	ldrb.w	r3, [sp, #26]
    3596:	f88d 3002 	strb.w	r3, [sp, #2]
    359a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    359e:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    35a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    35a6:	f88d 3004 	strb.w	r3, [sp, #4]
    35aa:	f89d 3019 	ldrb.w	r3, [sp, #25]
    35ae:	f88d 3005 	strb.w	r3, [sp, #5]
    35b2:	f89d 301e 	ldrb.w	r3, [sp, #30]
    35b6:	f88d 3006 	strb.w	r3, [sp, #6]
    35ba:	f89d 3013 	ldrb.w	r3, [sp, #19]
    35be:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    35c2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    35c6:	f88d 3008 	strb.w	r3, [sp, #8]
    35ca:	f89d 301d 	ldrb.w	r3, [sp, #29]
    35ce:	f88d 3009 	strb.w	r3, [sp, #9]
    35d2:	f89d 3012 	ldrb.w	r3, [sp, #18]
    35d6:	f88d 300a 	strb.w	r3, [sp, #10]
    35da:	f89d 3017 	ldrb.w	r3, [sp, #23]
    35de:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    35e2:	f89d 301c 	ldrb.w	r3, [sp, #28]
    35e6:	f88d 300c 	strb.w	r3, [sp, #12]
    35ea:	f89d 3011 	ldrb.w	r3, [sp, #17]
    35ee:	f88d 300d 	strb.w	r3, [sp, #13]
    35f2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    35f6:	f88d 300e 	strb.w	r3, [sp, #14]
    35fa:	f89d 301b 	ldrb.w	r3, [sp, #27]
    35fe:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    3602:	2310      	movs	r3, #16
    3604:	466a      	mov	r2, sp
    3606:	4619      	mov	r1, r3
    3608:	eb0d 0003 	add.w	r0, sp, r3
    360c:	f7ff fc9f 	bl	2f4e <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
    3610:	1c6b      	adds	r3, r5, #1
    3612:	011b      	lsls	r3, r3, #4
    3614:	18fa      	adds	r2, r7, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    3616:	58fb      	ldr	r3, [r7, r3]
    3618:	f89d 1010 	ldrb.w	r1, [sp, #16]
    361c:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3620:	f88d 1010 	strb.w	r1, [sp, #16]
    3624:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3628:	f89d 0011 	ldrb.w	r0, [sp, #17]
    362c:	4041      	eors	r1, r0
    362e:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    3632:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3636:	f89d 0012 	ldrb.w	r0, [sp, #18]
    363a:	4041      	eors	r1, r0
    363c:	f88d 1012 	strb.w	r1, [sp, #18]
    3640:	b2db      	uxtb	r3, r3
    3642:	f89d 1013 	ldrb.w	r1, [sp, #19]
    3646:	404b      	eors	r3, r1
    3648:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    364c:	6853      	ldr	r3, [r2, #4]
    364e:	f89d 1014 	ldrb.w	r1, [sp, #20]
    3652:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3656:	f88d 1014 	strb.w	r1, [sp, #20]
    365a:	f3c3 4107 	ubfx	r1, r3, #16, #8
    365e:	f89d 0015 	ldrb.w	r0, [sp, #21]
    3662:	4041      	eors	r1, r0
    3664:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    3668:	f3c3 2107 	ubfx	r1, r3, #8, #8
    366c:	f89d 0016 	ldrb.w	r0, [sp, #22]
    3670:	4041      	eors	r1, r0
    3672:	f88d 1016 	strb.w	r1, [sp, #22]
    3676:	b2db      	uxtb	r3, r3
    3678:	f89d 1017 	ldrb.w	r1, [sp, #23]
    367c:	404b      	eors	r3, r1
    367e:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    3682:	6893      	ldr	r3, [r2, #8]
    3684:	f89d 1018 	ldrb.w	r1, [sp, #24]
    3688:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    368c:	f88d 1018 	strb.w	r1, [sp, #24]
    3690:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3694:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3698:	4041      	eors	r1, r0
    369a:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    369e:	f3c3 2107 	ubfx	r1, r3, #8, #8
    36a2:	f89d 001a 	ldrb.w	r0, [sp, #26]
    36a6:	4041      	eors	r1, r0
    36a8:	f88d 101a 	strb.w	r1, [sp, #26]
    36ac:	b2db      	uxtb	r3, r3
    36ae:	f89d 101b 	ldrb.w	r1, [sp, #27]
    36b2:	404b      	eors	r3, r1
    36b4:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    36b8:	68d3      	ldr	r3, [r2, #12]
    36ba:	f89d 201c 	ldrb.w	r2, [sp, #28]
    36be:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    36c2:	f88d 201c 	strb.w	r2, [sp, #28]
    36c6:	f3c3 4207 	ubfx	r2, r3, #16, #8
    36ca:	f89d 101d 	ldrb.w	r1, [sp, #29]
    36ce:	404a      	eors	r2, r1
    36d0:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    36d4:	f3c3 2207 	ubfx	r2, r3, #8, #8
    36d8:	f89d 101e 	ldrb.w	r1, [sp, #30]
    36dc:	404a      	eors	r2, r1
    36de:	f88d 201e 	strb.w	r2, [sp, #30]
    36e2:	b2db      	uxtb	r3, r3
    36e4:	f89d 201f 	ldrb.w	r2, [sp, #31]
    36e8:	4053      	eors	r3, r2
    36ea:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
    36ee:	2310      	movs	r3, #16
    36f0:	eb0d 0203 	add.w	r2, sp, r3
    36f4:	4619      	mov	r1, r3
    36f6:	4640      	mov	r0, r8
    36f8:	f7ff fc29 	bl	2f4e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    36fc:	2210      	movs	r2, #16
    36fe:	2100      	movs	r1, #0
    3700:	eb0d 0002 	add.w	r0, sp, r2
    3704:	f7ff fc2f 	bl	2f66 <_set>

	return TC_CRYPTO_SUCCESS;
    3708:	2001      	movs	r0, #1
}
    370a:	b008      	add	sp, #32
    370c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
    3710:	2000      	movs	r0, #0
    3712:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    3714:	2000      	movs	r0, #0
    3716:	e7f8      	b.n	370a <tc_aes_encrypt+0x6ce>
		return TC_CRYPTO_FAIL;
    3718:	2000      	movs	r0, #0
    371a:	e7f6      	b.n	370a <tc_aes_encrypt+0x6ce>
    371c:	0002e898 	.word	0x0002e898

00003720 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    3720:	b430      	push	{r4, r5}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
    3722:	f101 020f 	add.w	r2, r1, #15

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    3726:	f991 3000 	ldrsb.w	r3, [r1]
    372a:	2b00      	cmp	r3, #0
    372c:	db0d      	blt.n	374a <gf_double+0x2a>
    372e:	2300      	movs	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
    3730:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    3732:	1e45      	subs	r5, r0, #1
    3734:	7814      	ldrb	r4, [r2, #0]
    3736:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
    373a:	7003      	strb	r3, [r0, #0]
		if (x == in) {
    373c:	428a      	cmp	r2, r1
    373e:	d006      	beq.n	374e <gf_double+0x2e>
			break;
		}
		carry = *x-- >> 7;
    3740:	7813      	ldrb	r3, [r2, #0]
    3742:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    3744:	4628      	mov	r0, r5
		carry = *x-- >> 7;
    3746:	3a01      	subs	r2, #1
		*out-- = (*x << 1) ^ carry;
    3748:	e7f3      	b.n	3732 <gf_double+0x12>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    374a:	2387      	movs	r3, #135	; 0x87
    374c:	e7f0      	b.n	3730 <gf_double+0x10>
	}
}
    374e:	bc30      	pop	{r4, r5}
    3750:	4770      	bx	lr

00003752 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
    3752:	b130      	cbz	r0, 3762 <tc_cmac_erase+0x10>
{
    3754:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    3756:	2258      	movs	r2, #88	; 0x58
    3758:	2100      	movs	r1, #0
    375a:	f7ff fc04 	bl	2f66 <_set>

	return TC_CRYPTO_SUCCESS;
    375e:	2001      	movs	r0, #1
    3760:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
    3762:	2000      	movs	r0, #0
    3764:	4770      	bx	lr

00003766 <tc_cmac_init>:
}

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    3766:	b1a0      	cbz	r0, 3792 <tc_cmac_init+0x2c>
{
    3768:	b510      	push	{r4, lr}
    376a:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    376c:	2210      	movs	r2, #16
    376e:	2100      	movs	r1, #0
    3770:	f7ff fbf9 	bl	2f66 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    3774:	2210      	movs	r2, #16
    3776:	2100      	movs	r1, #0
    3778:	f104 0030 	add.w	r0, r4, #48	; 0x30
    377c:	f7ff fbf3 	bl	2f66 <_set>
	s->leftover_offset = 0;
    3780:	2300      	movs	r3, #0
    3782:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    3784:	2200      	movs	r2, #0
    3786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    378a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
    378e:	2001      	movs	r0, #1
    3790:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
    3792:	2000      	movs	r0, #0
    3794:	4770      	bx	lr

00003796 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
    3796:	b338      	cbz	r0, 37e8 <tc_cmac_setup+0x52>
{
    3798:	b570      	push	{r4, r5, r6, lr}
    379a:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
    379c:	b331      	cbz	r1, 37ec <tc_cmac_setup+0x56>
    379e:	4616      	mov	r6, r2
    37a0:	460d      	mov	r5, r1
	_set(s, 0, sizeof(*s));
    37a2:	2258      	movs	r2, #88	; 0x58
    37a4:	2100      	movs	r1, #0
    37a6:	f7ff fbde 	bl	2f66 <_set>
	s->sched = sched;
    37aa:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    37ac:	4629      	mov	r1, r5
    37ae:	4630      	mov	r0, r6
    37b0:	f7ff fbe6 	bl	2f80 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    37b4:	2210      	movs	r2, #16
    37b6:	2100      	movs	r1, #0
    37b8:	4620      	mov	r0, r4
    37ba:	f7ff fbd4 	bl	2f66 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    37be:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    37c0:	4621      	mov	r1, r4
    37c2:	4620      	mov	r0, r4
    37c4:	f7ff fc3a 	bl	303c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    37c8:	f104 0510 	add.w	r5, r4, #16
    37cc:	4621      	mov	r1, r4
    37ce:	4628      	mov	r0, r5
    37d0:	f7ff ffa6 	bl	3720 <gf_double>
	gf_double (s->K2, s->K1);
    37d4:	4629      	mov	r1, r5
    37d6:	f104 0020 	add.w	r0, r4, #32
    37da:	f7ff ffa1 	bl	3720 <gf_double>
	tc_cmac_init(s);
    37de:	4620      	mov	r0, r4
    37e0:	f7ff ffc1 	bl	3766 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    37e4:	2001      	movs	r0, #1
    37e6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    37e8:	2000      	movs	r0, #0
    37ea:	4770      	bx	lr
    37ec:	2000      	movs	r0, #0
}
    37ee:	bd70      	pop	{r4, r5, r6, pc}

000037f0 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    37f0:	2800      	cmp	r0, #0
    37f2:	d05f      	beq.n	38b4 <tc_cmac_update+0xc4>
{
    37f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37f6:	460d      	mov	r5, r1
    37f8:	4616      	mov	r6, r2
    37fa:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    37fc:	2a00      	cmp	r2, #0
    37fe:	d05b      	beq.n	38b8 <tc_cmac_update+0xc8>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
    3800:	2900      	cmp	r1, #0
    3802:	d05b      	beq.n	38bc <tc_cmac_update+0xcc>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
    3804:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    3808:	ea52 0103 	orrs.w	r1, r2, r3
    380c:	d058      	beq.n	38c0 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
    380e:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    3812:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    3816:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50

	if (s->leftover_offset > 0) {
    381a:	6c40      	ldr	r0, [r0, #68]	; 0x44
    381c:	2800      	cmp	r0, #0
    381e:	d038      	beq.n	3892 <tc_cmac_update+0xa2>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    3820:	f1c0 0710 	rsb	r7, r0, #16

		if (data_length < remaining_space) {
    3824:	42be      	cmp	r6, r7
    3826:	d30b      	bcc.n	3840 <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
    3828:	3030      	adds	r0, #48	; 0x30
    382a:	463b      	mov	r3, r7
    382c:	462a      	mov	r2, r5
    382e:	4639      	mov	r1, r7
    3830:	4420      	add	r0, r4
    3832:	f7ff fb8c 	bl	2f4e <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
    3836:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    3838:	443d      	add	r5, r7
		s->leftover_offset = 0;
    383a:	2300      	movs	r3, #0
    383c:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    383e:	e012      	b.n	3866 <tc_cmac_update+0x76>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    3840:	3030      	adds	r0, #48	; 0x30
    3842:	4633      	mov	r3, r6
    3844:	462a      	mov	r2, r5
    3846:	4631      	mov	r1, r6
    3848:	4420      	add	r0, r4
    384a:	f7ff fb80 	bl	2f4e <_copy>
			s->leftover_offset += data_length;
    384e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3850:	4433      	add	r3, r6
    3852:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
    3854:	2001      	movs	r0, #1
    3856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->iv[i] ^= s->leftover[i];
    3858:	18e2      	adds	r2, r4, r3
    385a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    385e:	5ce1      	ldrb	r1, [r4, r3]
    3860:	404a      	eors	r2, r1
    3862:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3864:	3301      	adds	r3, #1
    3866:	2b0f      	cmp	r3, #15
    3868:	d9f6      	bls.n	3858 <tc_cmac_update+0x68>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    386a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    386c:	4621      	mov	r1, r4
    386e:	4620      	mov	r0, r4
    3870:	f7ff fbe4 	bl	303c <tc_aes_encrypt>
    3874:	e00d      	b.n	3892 <tc_cmac_update+0xa2>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
    3876:	5cea      	ldrb	r2, [r5, r3]
    3878:	5ce1      	ldrb	r1, [r4, r3]
    387a:	404a      	eors	r2, r1
    387c:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    387e:	3301      	adds	r3, #1
    3880:	2b0f      	cmp	r3, #15
    3882:	d9f8      	bls.n	3876 <tc_cmac_update+0x86>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    3884:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    3886:	4621      	mov	r1, r4
    3888:	4620      	mov	r0, r4
    388a:	f7ff fbd7 	bl	303c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    388e:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    3890:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
    3892:	2e10      	cmp	r6, #16
    3894:	d901      	bls.n	389a <tc_cmac_update+0xaa>
    3896:	2300      	movs	r3, #0
    3898:	e7f2      	b.n	3880 <tc_cmac_update+0x90>
	}

	if (data_length > 0) {
    389a:	b90e      	cbnz	r6, 38a0 <tc_cmac_update+0xb0>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    389c:	2001      	movs	r0, #1
}
    389e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_copy(s->leftover, data_length, data, data_length);
    38a0:	4633      	mov	r3, r6
    38a2:	462a      	mov	r2, r5
    38a4:	4631      	mov	r1, r6
    38a6:	f104 0030 	add.w	r0, r4, #48	; 0x30
    38aa:	f7ff fb50 	bl	2f4e <_copy>
		s->leftover_offset = data_length;
    38ae:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
    38b0:	2001      	movs	r0, #1
    38b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    38b4:	2000      	movs	r0, #0
    38b6:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
    38b8:	2001      	movs	r0, #1
    38ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    38bc:	2000      	movs	r0, #0
    38be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    38c0:	2000      	movs	r0, #0
    38c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000038c4 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    38c4:	b370      	cbz	r0, 3924 <tc_cmac_final+0x60>
{
    38c6:	b570      	push	{r4, r5, r6, lr}
    38c8:	4606      	mov	r6, r0
	if (tag == (uint8_t *) 0 ||
    38ca:	b369      	cbz	r1, 3928 <tc_cmac_final+0x64>
    38cc:	460d      	mov	r5, r1
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    38ce:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    38d0:	2a10      	cmp	r2, #16
    38d2:	d010      	beq.n	38f6 <tc_cmac_final+0x32>
		k = (uint8_t *) s->K1;
	} else {
		/* the final message block is not a full-sized  block */
		size_t remaining = TC_AES_BLOCK_SIZE - s->leftover_offset;

		_set(&s->leftover[s->leftover_offset], 0, remaining);
    38d4:	f102 0030 	add.w	r0, r2, #48	; 0x30
    38d8:	f1c2 0210 	rsb	r2, r2, #16
    38dc:	2100      	movs	r1, #0
    38de:	4428      	add	r0, r5
    38e0:	f7ff fb41 	bl	2f66 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    38e4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    38e6:	442b      	add	r3, r5
    38e8:	2280      	movs	r2, #128	; 0x80
    38ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    38ee:	f105 0120 	add.w	r1, r5, #32
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    38f2:	2300      	movs	r3, #0
    38f4:	e00a      	b.n	390c <tc_cmac_final+0x48>
		k = (uint8_t *) s->K1;
    38f6:	3110      	adds	r1, #16
    38f8:	e7fb      	b.n	38f2 <tc_cmac_final+0x2e>
		s->iv[i] ^= s->leftover[i] ^ k[i];
    38fa:	18ea      	adds	r2, r5, r3
    38fc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    3900:	5ccc      	ldrb	r4, [r1, r3]
    3902:	4054      	eors	r4, r2
    3904:	5cea      	ldrb	r2, [r5, r3]
    3906:	4062      	eors	r2, r4
    3908:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    390a:	3301      	adds	r3, #1
    390c:	2b0f      	cmp	r3, #15
    390e:	d9f4      	bls.n	38fa <tc_cmac_final+0x36>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    3910:	6caa      	ldr	r2, [r5, #72]	; 0x48
    3912:	4629      	mov	r1, r5
    3914:	4630      	mov	r0, r6
    3916:	f7ff fb91 	bl	303c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    391a:	4628      	mov	r0, r5
    391c:	f7ff ff19 	bl	3752 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    3920:	2001      	movs	r0, #1
    3922:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    3924:	2000      	movs	r0, #0
    3926:	4770      	bx	lr
    3928:	2000      	movs	r0, #0
}
    392a:	bd70      	pop	{r4, r5, r6, pc}

0000392c <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    392c:	2000      	movs	r0, #0
    392e:	4770      	bx	lr

00003930 <mbedtls_zeroize>:

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3930:	e003      	b.n	393a <mbedtls_zeroize+0xa>
    3932:	2200      	movs	r2, #0
    3934:	7002      	strb	r2, [r0, #0]
    3936:	3001      	adds	r0, #1
    3938:	4619      	mov	r1, r3
    393a:	1e4b      	subs	r3, r1, #1
    393c:	2900      	cmp	r1, #0
    393e:	d1f8      	bne.n	3932 <mbedtls_zeroize+0x2>
}
    3940:	4770      	bx	lr

00003942 <mbedtls_zeroize>:
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3942:	e003      	b.n	394c <mbedtls_zeroize+0xa>
    3944:	2200      	movs	r2, #0
    3946:	7002      	strb	r2, [r0, #0]
    3948:	3001      	adds	r0, #1
    394a:	4619      	mov	r1, r3
    394c:	1e4b      	subs	r3, r1, #1
    394e:	2900      	cmp	r1, #0
    3950:	d1f8      	bne.n	3944 <mbedtls_zeroize+0x2>
}
    3952:	4770      	bx	lr

00003954 <mbedtls_zeroize>:
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3954:	e003      	b.n	395e <mbedtls_zeroize+0xa>
    3956:	2200      	movs	r2, #0
    3958:	7002      	strb	r2, [r0, #0]
    395a:	3001      	adds	r0, #1
    395c:	4619      	mov	r1, r3
    395e:	1e4b      	subs	r3, r1, #1
    3960:	2900      	cmp	r1, #0
    3962:	d1f8      	bne.n	3956 <mbedtls_zeroize+0x2>
}
    3964:	4770      	bx	lr

00003966 <mbedtls_zeroize>:
#define MBEDTLS_CIPHER_MODE_STREAM
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3966:	e003      	b.n	3970 <mbedtls_zeroize+0xa>
    3968:	2200      	movs	r2, #0
    396a:	7002      	strb	r2, [r0, #0]
    396c:	3001      	adds	r0, #1
    396e:	4619      	mov	r1, r3
    3970:	1e4b      	subs	r3, r1, #1
    3972:	2900      	cmp	r1, #0
    3974:	d1f8      	bne.n	3968 <mbedtls_zeroize+0x2>
}
    3976:	4770      	bx	lr

00003978 <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */
#endif /* MBEDTLS_PLATFORM_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3978:	e003      	b.n	3982 <mbedtls_zeroize+0xa>
    397a:	2200      	movs	r2, #0
    397c:	7002      	strb	r2, [r0, #0]
    397e:	3001      	adds	r0, #1
    3980:	4619      	mov	r1, r3
    3982:	1e4b      	subs	r3, r1, #1
    3984:	2900      	cmp	r1, #0
    3986:	d1f8      	bne.n	397a <mbedtls_zeroize+0x2>
}
    3988:	4770      	bx	lr

0000398a <mbedtls_zeroize>:
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    398a:	e003      	b.n	3994 <mbedtls_zeroize+0xa>
    398c:	2200      	movs	r2, #0
    398e:	7002      	strb	r2, [r0, #0]
    3990:	3001      	adds	r0, #1
    3992:	4619      	mov	r1, r3
    3994:	1e4b      	subs	r3, r1, #1
    3996:	2900      	cmp	r1, #0
    3998:	d1f8      	bne.n	398c <mbedtls_zeroize+0x2>
}
    399a:	4770      	bx	lr

0000399c <mbedtls_zeroize>:
#define inline __inline
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    399c:	e003      	b.n	39a6 <mbedtls_zeroize+0xa>
    399e:	2200      	movs	r2, #0
    39a0:	7002      	strb	r2, [r0, #0]
    39a2:	3001      	adds	r0, #1
    39a4:	4619      	mov	r1, r3
    39a6:	1e4b      	subs	r3, r1, #1
    39a8:	2900      	cmp	r1, #0
    39aa:	d1f8      	bne.n	399e <mbedtls_zeroize+0x2>
}
    39ac:	4770      	bx	lr

000039ae <mbedtls_zeroize>:
#include "mbedtls/havege.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    39ae:	e003      	b.n	39b8 <mbedtls_zeroize+0xa>
    39b0:	2200      	movs	r2, #0
    39b2:	7002      	strb	r2, [r0, #0]
    39b4:	3001      	adds	r0, #1
    39b6:	4619      	mov	r1, r3
    39b8:	1e4b      	subs	r3, r1, #1
    39ba:	2900      	cmp	r1, #0
    39bc:	d1f8      	bne.n	39b0 <mbedtls_zeroize+0x2>
}
    39be:	4770      	bx	lr

000039c0 <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */
#endif /* MBEDTLS_PLATFORM_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    39c0:	e003      	b.n	39ca <mbedtls_zeroize+0xa>
    39c2:	2200      	movs	r2, #0
    39c4:	7002      	strb	r2, [r0, #0]
    39c6:	3001      	adds	r0, #1
    39c8:	4619      	mov	r1, r3
    39ca:	1e4b      	subs	r3, r1, #1
    39cc:	2900      	cmp	r1, #0
    39ce:	d1f8      	bne.n	39c2 <mbedtls_zeroize+0x2>
}
    39d0:	4770      	bx	lr

000039d2 <mbedtls_zeroize>:
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    39d2:	e003      	b.n	39dc <mbedtls_zeroize+0xa>
    39d4:	2200      	movs	r2, #0
    39d6:	7002      	strb	r2, [r0, #0]
    39d8:	3001      	adds	r0, #1
    39da:	4619      	mov	r1, r3
    39dc:	1e4b      	subs	r3, r1, #1
    39de:	2900      	cmp	r1, #0
    39e0:	d1f8      	bne.n	39d4 <mbedtls_zeroize+0x2>
}
    39e2:	4770      	bx	lr

000039e4 <mbedtls_zeroize>:
#include "mbedtls/threading.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    39e4:	e003      	b.n	39ee <mbedtls_zeroize+0xa>
    39e6:	2200      	movs	r2, #0
    39e8:	7002      	strb	r2, [r0, #0]
    39ea:	3001      	adds	r0, #1
    39ec:	4619      	mov	r1, r3
    39ee:	1e4b      	subs	r3, r1, #1
    39f0:	2900      	cmp	r1, #0
    39f2:	d1f8      	bne.n	39e6 <mbedtls_zeroize+0x2>
}
    39f4:	4770      	bx	lr

000039f6 <mbedtls_zeroize>:

#include <limits.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    39f6:	e003      	b.n	3a00 <mbedtls_zeroize+0xa>
    39f8:	2200      	movs	r2, #0
    39fa:	7002      	strb	r2, [r0, #0]
    39fc:	3001      	adds	r0, #1
    39fe:	4619      	mov	r1, r3
    3a00:	1e4b      	subs	r3, r1, #1
    3a02:	2900      	cmp	r1, #0
    3a04:	d1f8      	bne.n	39f8 <mbedtls_zeroize+0x2>
}
    3a06:	4770      	bx	lr

00003a08 <mbedtls_zeroize>:

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3a08:	e003      	b.n	3a12 <mbedtls_zeroize+0xa>
    3a0a:	2200      	movs	r2, #0
    3a0c:	7002      	strb	r2, [r0, #0]
    3a0e:	3001      	adds	r0, #1
    3a10:	4619      	mov	r1, r3
    3a12:	1e4b      	subs	r3, r1, #1
    3a14:	2900      	cmp	r1, #0
    3a16:	d1f8      	bne.n	3a0a <mbedtls_zeroize+0x2>
}
    3a18:	4770      	bx	lr

00003a1a <mbedtls_zeroize>:

#include <string.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3a1a:	e003      	b.n	3a24 <mbedtls_zeroize+0xa>
    3a1c:	2200      	movs	r2, #0
    3a1e:	7002      	strb	r2, [r0, #0]
    3a20:	3001      	adds	r0, #1
    3a22:	4619      	mov	r1, r3
    3a24:	1e4b      	subs	r3, r1, #1
    3a26:	2900      	cmp	r1, #0
    3a28:	d1f8      	bne.n	3a1c <mbedtls_zeroize+0x2>
}
    3a2a:	4770      	bx	lr

00003a2c <mbedtls_zeroize>:
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3a2c:	e003      	b.n	3a36 <mbedtls_zeroize+0xa>
    3a2e:	2200      	movs	r2, #0
    3a30:	7002      	strb	r2, [r0, #0]
    3a32:	3001      	adds	r0, #1
    3a34:	4619      	mov	r1, r3
    3a36:	1e4b      	subs	r3, r1, #1
    3a38:	2900      	cmp	r1, #0
    3a3a:	d1f8      	bne.n	3a2e <mbedtls_zeroize+0x2>
}
    3a3c:	4770      	bx	lr

00003a3e <mbedtls_aes_init>:
}

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    3a3e:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
    3a40:	f44f 728c 	mov.w	r2, #280	; 0x118
    3a44:	2100      	movs	r1, #0
    3a46:	f026 fb9b 	bl	2a180 <memset>
    3a4a:	bd08      	pop	{r3, pc}

00003a4c <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
    3a4c:	b128      	cbz	r0, 3a5a <mbedtls_aes_free+0xe>
{
    3a4e:	b508      	push	{r3, lr}
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_aes_context ) );
    3a50:	f44f 718c 	mov.w	r1, #280	; 0x118
    3a54:	f7ff ff6c 	bl	3930 <mbedtls_zeroize>
    3a58:	bd08      	pop	{r3, pc}
    3a5a:	4770      	bx	lr

00003a5c <mbedtls_aes_setkey_enc>:
        aes_init_done = 1;

    }
#endif

    switch( keybits )
    3a5c:	2ac0      	cmp	r2, #192	; 0xc0
    3a5e:	d00f      	beq.n	3a80 <mbedtls_aes_setkey_enc+0x24>
    3a60:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    3a64:	d00f      	beq.n	3a86 <mbedtls_aes_setkey_enc+0x2a>
    3a66:	2a80      	cmp	r2, #128	; 0x80
    3a68:	d002      	beq.n	3a70 <mbedtls_aes_setkey_enc+0x14>
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    3a6a:	f06f 001f 	mvn.w	r0, #31
    3a6e:	4770      	bx	lr
        case 128: ctx->nr = 10; break;
    3a70:	230a      	movs	r3, #10
    3a72:	6003      	str	r3, [r0, #0]
{
    3a74:	b4f0      	push	{r4, r5, r6, r7}

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
    3a76:	f100 0308 	add.w	r3, r0, #8
    3a7a:	6043      	str	r3, [r0, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
    3a7c:	2500      	movs	r5, #0
    3a7e:	e015      	b.n	3aac <mbedtls_aes_setkey_enc+0x50>
        case 192: ctx->nr = 12; break;
    3a80:	230c      	movs	r3, #12
    3a82:	6003      	str	r3, [r0, #0]
    3a84:	e7f6      	b.n	3a74 <mbedtls_aes_setkey_enc+0x18>
        case 256: ctx->nr = 14; break;
    3a86:	230e      	movs	r3, #14
    3a88:	6003      	str	r3, [r0, #0]
    3a8a:	e7f3      	b.n	3a74 <mbedtls_aes_setkey_enc+0x18>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    3a8c:	f811 4025 	ldrb.w	r4, [r1, r5, lsl #2]
    3a90:	eb01 0685 	add.w	r6, r1, r5, lsl #2
    3a94:	7877      	ldrb	r7, [r6, #1]
    3a96:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    3a9a:	78b7      	ldrb	r7, [r6, #2]
    3a9c:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
    3aa0:	78f6      	ldrb	r6, [r6, #3]
    3aa2:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
    3aa6:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
    for( i = 0; i < ( keybits >> 5 ); i++ )
    3aaa:	3501      	adds	r5, #1
    3aac:	ebb5 1f52 	cmp.w	r5, r2, lsr #5
    3ab0:	d3ec      	bcc.n	3a8c <mbedtls_aes_setkey_enc+0x30>
    }

    switch( ctx->nr )
    3ab2:	6802      	ldr	r2, [r0, #0]
    3ab4:	2a0c      	cmp	r2, #12
    3ab6:	d05d      	beq.n	3b74 <mbedtls_aes_setkey_enc+0x118>
    3ab8:	2a0e      	cmp	r2, #14
    3aba:	f000 80a0 	beq.w	3bfe <mbedtls_aes_setkey_enc+0x1a2>
    3abe:	2a0a      	cmp	r2, #10
    3ac0:	d029      	beq.n	3b16 <mbedtls_aes_setkey_enc+0xba>
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
    3ac2:	2000      	movs	r0, #0
    3ac4:	e025      	b.n	3b12 <mbedtls_aes_setkey_enc+0xb6>
                RK[4]  = RK[0] ^ RCON[i] ^
    3ac6:	681a      	ldr	r2, [r3, #0]
    3ac8:	494e      	ldr	r1, [pc, #312]	; (3c04 <mbedtls_aes_setkey_enc+0x1a8>)
    3aca:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
    3ace:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
    3ad0:	68d9      	ldr	r1, [r3, #12]
    3ad2:	f3c1 2507 	ubfx	r5, r1, #8, #8
    3ad6:	484c      	ldr	r0, [pc, #304]	; (3c08 <mbedtls_aes_setkey_enc+0x1ac>)
    3ad8:	5d45      	ldrb	r5, [r0, r5]
                RK[4]  = RK[0] ^ RCON[i] ^
    3ada:	406a      	eors	r2, r5
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
    3adc:	f3c1 4507 	ubfx	r5, r1, #16, #8
    3ae0:	5d45      	ldrb	r5, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
    3ae2:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
    3ae6:	0e0d      	lsrs	r5, r1, #24
    3ae8:	5d45      	ldrb	r5, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
    3aea:	ea82 4205 	eor.w	r2, r2, r5, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
    3aee:	b2cd      	uxtb	r5, r1
    3af0:	5d40      	ldrb	r0, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
    3af2:	ea82 6200 	eor.w	r2, r2, r0, lsl #24
                RK[4]  = RK[0] ^ RCON[i] ^
    3af6:	611a      	str	r2, [r3, #16]
                RK[5]  = RK[1] ^ RK[4];
    3af8:	6858      	ldr	r0, [r3, #4]
    3afa:	4042      	eors	r2, r0
    3afc:	615a      	str	r2, [r3, #20]
                RK[6]  = RK[2] ^ RK[5];
    3afe:	6898      	ldr	r0, [r3, #8]
    3b00:	4042      	eors	r2, r0
    3b02:	619a      	str	r2, [r3, #24]
                RK[7]  = RK[3] ^ RK[6];
    3b04:	404a      	eors	r2, r1
    3b06:	61da      	str	r2, [r3, #28]
            for( i = 0; i < 10; i++, RK += 4 )
    3b08:	3401      	adds	r4, #1
    3b0a:	3310      	adds	r3, #16
    3b0c:	2c09      	cmp	r4, #9
    3b0e:	d9da      	bls.n	3ac6 <mbedtls_aes_setkey_enc+0x6a>
    return( 0 );
    3b10:	2000      	movs	r0, #0
}
    3b12:	bcf0      	pop	{r4, r5, r6, r7}
    3b14:	4770      	bx	lr
    switch( ctx->nr )
    3b16:	2400      	movs	r4, #0
    3b18:	e7f8      	b.n	3b0c <mbedtls_aes_setkey_enc+0xb0>
                RK[6]  = RK[0] ^ RCON[i] ^
    3b1a:	681a      	ldr	r2, [r3, #0]
    3b1c:	4939      	ldr	r1, [pc, #228]	; (3c04 <mbedtls_aes_setkey_enc+0x1a8>)
    3b1e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    3b22:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
    3b24:	6959      	ldr	r1, [r3, #20]
    3b26:	f3c1 2507 	ubfx	r5, r1, #8, #8
    3b2a:	4c37      	ldr	r4, [pc, #220]	; (3c08 <mbedtls_aes_setkey_enc+0x1ac>)
    3b2c:	5d65      	ldrb	r5, [r4, r5]
                RK[6]  = RK[0] ^ RCON[i] ^
    3b2e:	406a      	eors	r2, r5
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
    3b30:	f3c1 4507 	ubfx	r5, r1, #16, #8
    3b34:	5d65      	ldrb	r5, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
    3b36:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    3b3a:	0e0d      	lsrs	r5, r1, #24
    3b3c:	5d65      	ldrb	r5, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
    3b3e:	ea82 4205 	eor.w	r2, r2, r5, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
    3b42:	b2cd      	uxtb	r5, r1
    3b44:	5d64      	ldrb	r4, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    3b46:	ea82 6204 	eor.w	r2, r2, r4, lsl #24
                RK[6]  = RK[0] ^ RCON[i] ^
    3b4a:	619a      	str	r2, [r3, #24]
                RK[7]  = RK[1] ^ RK[6];
    3b4c:	685c      	ldr	r4, [r3, #4]
    3b4e:	4062      	eors	r2, r4
    3b50:	61da      	str	r2, [r3, #28]
                RK[8]  = RK[2] ^ RK[7];
    3b52:	689c      	ldr	r4, [r3, #8]
    3b54:	4062      	eors	r2, r4
    3b56:	621a      	str	r2, [r3, #32]
                RK[9]  = RK[3] ^ RK[8];
    3b58:	68dc      	ldr	r4, [r3, #12]
    3b5a:	4062      	eors	r2, r4
    3b5c:	625a      	str	r2, [r3, #36]	; 0x24
                RK[10] = RK[4] ^ RK[9];
    3b5e:	691c      	ldr	r4, [r3, #16]
    3b60:	4062      	eors	r2, r4
    3b62:	629a      	str	r2, [r3, #40]	; 0x28
                RK[11] = RK[5] ^ RK[10];
    3b64:	404a      	eors	r2, r1
    3b66:	62da      	str	r2, [r3, #44]	; 0x2c
            for( i = 0; i < 8; i++, RK += 6 )
    3b68:	3001      	adds	r0, #1
    3b6a:	3318      	adds	r3, #24
    3b6c:	2807      	cmp	r0, #7
    3b6e:	d9d4      	bls.n	3b1a <mbedtls_aes_setkey_enc+0xbe>
    return( 0 );
    3b70:	2000      	movs	r0, #0
    3b72:	e7ce      	b.n	3b12 <mbedtls_aes_setkey_enc+0xb6>
    switch( ctx->nr )
    3b74:	2000      	movs	r0, #0
    3b76:	e7f9      	b.n	3b6c <mbedtls_aes_setkey_enc+0x110>
                RK[8]  = RK[0] ^ RCON[i] ^
    3b78:	681a      	ldr	r2, [r3, #0]
    3b7a:	4822      	ldr	r0, [pc, #136]	; (3c04 <mbedtls_aes_setkey_enc+0x1a8>)
    3b7c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    3b80:	4042      	eors	r2, r0
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
    3b82:	69d8      	ldr	r0, [r3, #28]
    3b84:	f3c0 2407 	ubfx	r4, r0, #8, #8
    3b88:	4d1f      	ldr	r5, [pc, #124]	; (3c08 <mbedtls_aes_setkey_enc+0x1ac>)
    3b8a:	5d2c      	ldrb	r4, [r5, r4]
                RK[8]  = RK[0] ^ RCON[i] ^
    3b8c:	4062      	eors	r2, r4
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
    3b8e:	f3c0 4407 	ubfx	r4, r0, #16, #8
    3b92:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
    3b94:	ea82 2204 	eor.w	r2, r2, r4, lsl #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
    3b98:	0e04      	lsrs	r4, r0, #24
    3b9a:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
    3b9c:	ea82 4204 	eor.w	r2, r2, r4, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
    3ba0:	b2c4      	uxtb	r4, r0
    3ba2:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
    3ba4:	ea82 6204 	eor.w	r2, r2, r4, lsl #24
                RK[8]  = RK[0] ^ RCON[i] ^
    3ba8:	621a      	str	r2, [r3, #32]
                RK[9]  = RK[1] ^ RK[8];
    3baa:	685c      	ldr	r4, [r3, #4]
    3bac:	4062      	eors	r2, r4
    3bae:	625a      	str	r2, [r3, #36]	; 0x24
                RK[10] = RK[2] ^ RK[9];
    3bb0:	689c      	ldr	r4, [r3, #8]
    3bb2:	4062      	eors	r2, r4
    3bb4:	629a      	str	r2, [r3, #40]	; 0x28
                RK[11] = RK[3] ^ RK[10];
    3bb6:	68dc      	ldr	r4, [r3, #12]
    3bb8:	4062      	eors	r2, r4
    3bba:	62da      	str	r2, [r3, #44]	; 0x2c
                RK[12] = RK[4] ^
    3bbc:	691c      	ldr	r4, [r3, #16]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
    3bbe:	b2d6      	uxtb	r6, r2
    3bc0:	5dae      	ldrb	r6, [r5, r6]
                RK[12] = RK[4] ^
    3bc2:	4074      	eors	r4, r6
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
    3bc4:	f3c2 2607 	ubfx	r6, r2, #8, #8
    3bc8:	5dae      	ldrb	r6, [r5, r6]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
    3bca:	ea84 2406 	eor.w	r4, r4, r6, lsl #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
    3bce:	f3c2 4607 	ubfx	r6, r2, #16, #8
    3bd2:	5dae      	ldrb	r6, [r5, r6]
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
    3bd4:	ea84 4406 	eor.w	r4, r4, r6, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
    3bd8:	0e12      	lsrs	r2, r2, #24
    3bda:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
    3bdc:	ea84 6202 	eor.w	r2, r4, r2, lsl #24
                RK[12] = RK[4] ^
    3be0:	631a      	str	r2, [r3, #48]	; 0x30
                RK[13] = RK[5] ^ RK[12];
    3be2:	695c      	ldr	r4, [r3, #20]
    3be4:	4062      	eors	r2, r4
    3be6:	635a      	str	r2, [r3, #52]	; 0x34
                RK[14] = RK[6] ^ RK[13];
    3be8:	699c      	ldr	r4, [r3, #24]
    3bea:	4062      	eors	r2, r4
    3bec:	639a      	str	r2, [r3, #56]	; 0x38
                RK[15] = RK[7] ^ RK[14];
    3bee:	4042      	eors	r2, r0
    3bf0:	63da      	str	r2, [r3, #60]	; 0x3c
            for( i = 0; i < 7; i++, RK += 8 )
    3bf2:	3101      	adds	r1, #1
    3bf4:	3320      	adds	r3, #32
    3bf6:	2906      	cmp	r1, #6
    3bf8:	d9be      	bls.n	3b78 <mbedtls_aes_setkey_enc+0x11c>
    return( 0 );
    3bfa:	2000      	movs	r0, #0
    3bfc:	e789      	b.n	3b12 <mbedtls_aes_setkey_enc+0xb6>
    switch( ctx->nr )
    3bfe:	2100      	movs	r1, #0
    3c00:	e7f9      	b.n	3bf6 <mbedtls_aes_setkey_enc+0x19a>
    3c02:	bf00      	nop
    3c04:	0002fc30 	.word	0x0002fc30
    3c08:	0002eb30 	.word	0x0002eb30

00003c0c <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
    3c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c10:	b083      	sub	sp, #12
    3c12:	9201      	str	r2, [sp, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
    3c14:	6842      	ldr	r2, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    3c16:	f891 9000 	ldrb.w	r9, [r1]
    3c1a:	784b      	ldrb	r3, [r1, #1]
    3c1c:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    3c20:	788b      	ldrb	r3, [r1, #2]
    3c22:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
    3c26:	78cb      	ldrb	r3, [r1, #3]
    3c28:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
    3c2c:	6813      	ldr	r3, [r2, #0]
    3c2e:	ea89 0903 	eor.w	r9, r9, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    3c32:	f891 a004 	ldrb.w	sl, [r1, #4]
    3c36:	794b      	ldrb	r3, [r1, #5]
    3c38:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    3c3c:	798b      	ldrb	r3, [r1, #6]
    3c3e:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
    3c42:	79cb      	ldrb	r3, [r1, #7]
    3c44:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
    3c48:	6853      	ldr	r3, [r2, #4]
    3c4a:	ea8a 0a03 	eor.w	sl, sl, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    3c4e:	7a0c      	ldrb	r4, [r1, #8]
    3c50:	7a4b      	ldrb	r3, [r1, #9]
    3c52:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    3c56:	7a8b      	ldrb	r3, [r1, #10]
    3c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    3c5c:	7acb      	ldrb	r3, [r1, #11]
    3c5e:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    3c62:	6893      	ldr	r3, [r2, #8]
    3c64:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    3c66:	7b0b      	ldrb	r3, [r1, #12]
    3c68:	7b4d      	ldrb	r5, [r1, #13]
    3c6a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    3c6e:	7b8d      	ldrb	r5, [r1, #14]
    3c70:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    3c74:	7bc9      	ldrb	r1, [r1, #15]
    3c76:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
    3c7a:	f102 0610 	add.w	r6, r2, #16
    3c7e:	68d3      	ldr	r3, [r2, #12]
    3c80:	4059      	eors	r1, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3c82:	6803      	ldr	r3, [r0, #0]
    3c84:	ea4f 0b63 	mov.w	fp, r3, asr #1
    3c88:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    3c8c:	460b      	mov	r3, r1
    3c8e:	e0bd      	b.n	3e0c <mbedtls_internal_aes_encrypt+0x200>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    3c90:	6832      	ldr	r2, [r6, #0]
    3c92:	fa5f f089 	uxtb.w	r0, r9
    3c96:	49cb      	ldr	r1, [pc, #812]	; (3fc4 <mbedtls_internal_aes_encrypt+0x3b8>)
    3c98:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3c9c:	ea82 0c00 	eor.w	ip, r2, r0
    3ca0:	f3ca 2207 	ubfx	r2, sl, #8, #8
    3ca4:	4dc8      	ldr	r5, [pc, #800]	; (3fc8 <mbedtls_internal_aes_encrypt+0x3bc>)
    3ca6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    3caa:	ea8c 0c02 	eor.w	ip, ip, r2
    3cae:	f3c4 4207 	ubfx	r2, r4, #16, #8
    3cb2:	48c6      	ldr	r0, [pc, #792]	; (3fcc <mbedtls_internal_aes_encrypt+0x3c0>)
    3cb4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    3cb8:	ea8c 0c02 	eor.w	ip, ip, r2
    3cbc:	0e1f      	lsrs	r7, r3, #24
    3cbe:	4ac4      	ldr	r2, [pc, #784]	; (3fd0 <mbedtls_internal_aes_encrypt+0x3c4>)
    3cc0:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3cc4:	ea8c 0c07 	eor.w	ip, ip, r7
    3cc8:	fa5f fe8a 	uxtb.w	lr, sl
    3ccc:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    3cd0:	6877      	ldr	r7, [r6, #4]
    3cd2:	ea87 080e 	eor.w	r8, r7, lr
    3cd6:	f3c4 2707 	ubfx	r7, r4, #8, #8
    3cda:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    3cde:	ea88 0807 	eor.w	r8, r8, r7
    3ce2:	f3c3 4707 	ubfx	r7, r3, #16, #8
    3ce6:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    3cea:	ea88 0807 	eor.w	r8, r8, r7
    3cee:	ea4f 6719 	mov.w	r7, r9, lsr #24
    3cf2:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3cf6:	ea88 0807 	eor.w	r8, r8, r7
    3cfa:	fa5f fe84 	uxtb.w	lr, r4
    3cfe:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    3d02:	68b7      	ldr	r7, [r6, #8]
    3d04:	ea87 0e0e 	eor.w	lr, r7, lr
    3d08:	f3c3 2707 	ubfx	r7, r3, #8, #8
    3d0c:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    3d10:	ea8e 0e07 	eor.w	lr, lr, r7
    3d14:	f3c9 4707 	ubfx	r7, r9, #16, #8
    3d18:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    3d1c:	ea8e 0e07 	eor.w	lr, lr, r7
    3d20:	ea4f 671a 	mov.w	r7, sl, lsr #24
    3d24:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3d28:	ea8e 0e07 	eor.w	lr, lr, r7
    3d2c:	68f7      	ldr	r7, [r6, #12]
    3d2e:	b2db      	uxtb	r3, r3
    3d30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3d34:	405f      	eors	r7, r3
    3d36:	f3c9 2907 	ubfx	r9, r9, #8, #8
    3d3a:	f855 3029 	ldr.w	r3, [r5, r9, lsl #2]
    3d3e:	405f      	eors	r7, r3
    3d40:	f3ca 4a07 	ubfx	sl, sl, #16, #8
    3d44:	f850 302a 	ldr.w	r3, [r0, sl, lsl #2]
    3d48:	405f      	eors	r7, r3
    3d4a:	0e24      	lsrs	r4, r4, #24
    3d4c:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    3d50:	405f      	eors	r7, r3
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    3d52:	6933      	ldr	r3, [r6, #16]
    3d54:	fa5f f48c 	uxtb.w	r4, ip
    3d58:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3d5c:	ea83 0904 	eor.w	r9, r3, r4
    3d60:	f3c8 2307 	ubfx	r3, r8, #8, #8
    3d64:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3d68:	ea89 0903 	eor.w	r9, r9, r3
    3d6c:	f3ce 4307 	ubfx	r3, lr, #16, #8
    3d70:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3d74:	ea89 0903 	eor.w	r9, r9, r3
    3d78:	0e3b      	lsrs	r3, r7, #24
    3d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d7e:	ea89 0903 	eor.w	r9, r9, r3
    3d82:	6973      	ldr	r3, [r6, #20]
    3d84:	fa5f f488 	uxtb.w	r4, r8
    3d88:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3d8c:	ea83 0a04 	eor.w	sl, r3, r4
    3d90:	f3ce 2307 	ubfx	r3, lr, #8, #8
    3d94:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3d98:	ea8a 0a03 	eor.w	sl, sl, r3
    3d9c:	f3c7 4307 	ubfx	r3, r7, #16, #8
    3da0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3da4:	ea8a 0a03 	eor.w	sl, sl, r3
    3da8:	ea4f 631c 	mov.w	r3, ip, lsr #24
    3dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3db0:	ea8a 0a03 	eor.w	sl, sl, r3
    3db4:	69b3      	ldr	r3, [r6, #24]
    3db6:	fa5f f48e 	uxtb.w	r4, lr
    3dba:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3dbe:	405c      	eors	r4, r3
    3dc0:	f3c7 2307 	ubfx	r3, r7, #8, #8
    3dc4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3dc8:	405c      	eors	r4, r3
    3dca:	f3cc 4307 	ubfx	r3, ip, #16, #8
    3dce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3dd2:	405c      	eors	r4, r3
    3dd4:	ea4f 6318 	mov.w	r3, r8, lsr #24
    3dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3ddc:	405c      	eors	r4, r3
    3dde:	69f3      	ldr	r3, [r6, #28]
    3de0:	b2ff      	uxtb	r7, r7
    3de2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
    3de6:	404b      	eors	r3, r1
    3de8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    3dec:	f855 102c 	ldr.w	r1, [r5, ip, lsl #2]
    3df0:	404b      	eors	r3, r1
    3df2:	f3c8 4807 	ubfx	r8, r8, #16, #8
    3df6:	f850 1028 	ldr.w	r1, [r0, r8, lsl #2]
    3dfa:	404b      	eors	r3, r1
    3dfc:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    3e00:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
    3e04:	4053      	eors	r3, r2
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3e06:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    3e0a:	3620      	adds	r6, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3e0c:	f1bb 0f00 	cmp.w	fp, #0
    3e10:	f73f af3e 	bgt.w	3c90 <mbedtls_internal_aes_encrypt+0x84>
    3e14:	4619      	mov	r1, r3
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    3e16:	6833      	ldr	r3, [r6, #0]
    3e18:	fa5f f289 	uxtb.w	r2, r9
    3e1c:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 3fc4 <mbedtls_internal_aes_encrypt+0x3b8>
    3e20:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
    3e24:	405a      	eors	r2, r3
    3e26:	f3ca 2307 	ubfx	r3, sl, #8, #8
    3e2a:	4f67      	ldr	r7, [pc, #412]	; (3fc8 <mbedtls_internal_aes_encrypt+0x3bc>)
    3e2c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    3e30:	405a      	eors	r2, r3
    3e32:	f3c4 4307 	ubfx	r3, r4, #16, #8
    3e36:	4d65      	ldr	r5, [pc, #404]	; (3fcc <mbedtls_internal_aes_encrypt+0x3c0>)
    3e38:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3e3c:	405a      	eors	r2, r3
    3e3e:	0e0b      	lsrs	r3, r1, #24
    3e40:	4863      	ldr	r0, [pc, #396]	; (3fd0 <mbedtls_internal_aes_encrypt+0x3c4>)
    3e42:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3e46:	405a      	eors	r2, r3
    3e48:	fa5f fc8a 	uxtb.w	ip, sl
    3e4c:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
    3e50:	6873      	ldr	r3, [r6, #4]
    3e52:	ea83 0c0c 	eor.w	ip, r3, ip
    3e56:	f3c4 2307 	ubfx	r3, r4, #8, #8
    3e5a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    3e5e:	ea8c 0c03 	eor.w	ip, ip, r3
    3e62:	f3c1 4307 	ubfx	r3, r1, #16, #8
    3e66:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3e6a:	ea8c 0c03 	eor.w	ip, ip, r3
    3e6e:	ea4f 6319 	mov.w	r3, r9, lsr #24
    3e72:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3e76:	ea8c 0c03 	eor.w	ip, ip, r3
    3e7a:	fa5f f884 	uxtb.w	r8, r4
    3e7e:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
    3e82:	68b3      	ldr	r3, [r6, #8]
    3e84:	ea83 0808 	eor.w	r8, r3, r8
    3e88:	f3c1 2307 	ubfx	r3, r1, #8, #8
    3e8c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    3e90:	ea88 0803 	eor.w	r8, r8, r3
    3e94:	f3c9 4307 	ubfx	r3, r9, #16, #8
    3e98:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3e9c:	ea88 0803 	eor.w	r8, r8, r3
    3ea0:	ea4f 631a 	mov.w	r3, sl, lsr #24
    3ea4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3ea8:	ea88 0803 	eor.w	r8, r8, r3
    3eac:	68f3      	ldr	r3, [r6, #12]
    3eae:	b2c9      	uxtb	r1, r1
    3eb0:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    3eb4:	404b      	eors	r3, r1
    3eb6:	f3c9 2907 	ubfx	r9, r9, #8, #8
    3eba:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
    3ebe:	405f      	eors	r7, r3
    3ec0:	f3ca 4a07 	ubfx	sl, sl, #16, #8
    3ec4:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
    3ec8:	405f      	eors	r7, r3
    3eca:	0e24      	lsrs	r4, r4, #24
    3ecc:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    3ed0:	405f      	eors	r7, r3

    X0 = *RK++ ^ \
    3ed2:	6931      	ldr	r1, [r6, #16]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    3ed4:	b2d0      	uxtb	r0, r2
    3ed6:	4b3f      	ldr	r3, [pc, #252]	; (3fd4 <mbedtls_internal_aes_encrypt+0x3c8>)
    3ed8:	5c1c      	ldrb	r4, [r3, r0]
    X0 = *RK++ ^ \
    3eda:	404c      	eors	r4, r1
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    3edc:	f3cc 2107 	ubfx	r1, ip, #8, #8
    3ee0:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    3ee2:	ea84 2401 	eor.w	r4, r4, r1, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    3ee6:	f3c8 4107 	ubfx	r1, r8, #16, #8
    3eea:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    3eec:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    3ef0:	0e39      	lsrs	r1, r7, #24
    3ef2:	5c59      	ldrb	r1, [r3, r1]
    X0 = *RK++ ^ \
    3ef4:	ea84 6401 	eor.w	r4, r4, r1, lsl #24

    X1 = *RK++ ^ \
    3ef8:	6971      	ldr	r1, [r6, #20]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    3efa:	fa5f f08c 	uxtb.w	r0, ip
    3efe:	5c18      	ldrb	r0, [r3, r0]
    X1 = *RK++ ^ \
    3f00:	4048      	eors	r0, r1
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    3f02:	f3c8 2107 	ubfx	r1, r8, #8, #8
    3f06:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    3f08:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    3f0c:	f3c7 4107 	ubfx	r1, r7, #16, #8
    3f10:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    3f12:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    3f16:	0e11      	lsrs	r1, r2, #24
    3f18:	5c59      	ldrb	r1, [r3, r1]
    X1 = *RK++ ^ \
    3f1a:	ea80 6001 	eor.w	r0, r0, r1, lsl #24

    X2 = *RK++ ^ \
    3f1e:	69b1      	ldr	r1, [r6, #24]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    3f20:	fa5f f588 	uxtb.w	r5, r8
    3f24:	5d5d      	ldrb	r5, [r3, r5]
    X2 = *RK++ ^ \
    3f26:	404d      	eors	r5, r1
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    3f28:	f3c7 2107 	ubfx	r1, r7, #8, #8
    3f2c:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    3f2e:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    3f32:	f3c2 4107 	ubfx	r1, r2, #16, #8
    3f36:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    3f38:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    3f3c:	ea4f 611c 	mov.w	r1, ip, lsr #24
    3f40:	5c59      	ldrb	r1, [r3, r1]
    X2 = *RK++ ^ \
    3f42:	ea85 6501 	eor.w	r5, r5, r1, lsl #24

    X3 = *RK++ ^ \
    3f46:	69f1      	ldr	r1, [r6, #28]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    3f48:	b2ff      	uxtb	r7, r7
    3f4a:	5dde      	ldrb	r6, [r3, r7]
    X3 = *RK++ ^ \
    3f4c:	4071      	eors	r1, r6
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    3f4e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    3f52:	5c9a      	ldrb	r2, [r3, r2]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    3f54:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    3f58:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    3f5c:	f813 100c 	ldrb.w	r1, [r3, ip]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    3f60:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    3f64:	ea4f 6818 	mov.w	r8, r8, lsr #24
    3f68:	f813 3008 	ldrb.w	r3, [r3, r8]
    X3 = *RK++ ^ \
    3f6c:	ea82 6303 	eor.w	r3, r2, r3, lsl #24

    PUT_UINT32_LE( X0, output,  0 );
    3f70:	9e01      	ldr	r6, [sp, #4]
    3f72:	7034      	strb	r4, [r6, #0]
    3f74:	f3c4 2207 	ubfx	r2, r4, #8, #8
    3f78:	7072      	strb	r2, [r6, #1]
    3f7a:	f3c4 4207 	ubfx	r2, r4, #16, #8
    3f7e:	70b2      	strb	r2, [r6, #2]
    3f80:	0e24      	lsrs	r4, r4, #24
    3f82:	70f4      	strb	r4, [r6, #3]
    PUT_UINT32_LE( X1, output,  4 );
    3f84:	7130      	strb	r0, [r6, #4]
    3f86:	f3c0 2207 	ubfx	r2, r0, #8, #8
    3f8a:	7172      	strb	r2, [r6, #5]
    3f8c:	f3c0 4207 	ubfx	r2, r0, #16, #8
    3f90:	71b2      	strb	r2, [r6, #6]
    3f92:	0e00      	lsrs	r0, r0, #24
    3f94:	71f0      	strb	r0, [r6, #7]
    PUT_UINT32_LE( X2, output,  8 );
    3f96:	7235      	strb	r5, [r6, #8]
    3f98:	f3c5 2207 	ubfx	r2, r5, #8, #8
    3f9c:	7272      	strb	r2, [r6, #9]
    3f9e:	f3c5 4207 	ubfx	r2, r5, #16, #8
    3fa2:	72b2      	strb	r2, [r6, #10]
    3fa4:	0e2d      	lsrs	r5, r5, #24
    3fa6:	72f5      	strb	r5, [r6, #11]
    PUT_UINT32_LE( X3, output, 12 );
    3fa8:	7333      	strb	r3, [r6, #12]
    3faa:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3fae:	7372      	strb	r2, [r6, #13]
    3fb0:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3fb4:	73b2      	strb	r2, [r6, #14]
    3fb6:	0e1b      	lsrs	r3, r3, #24
    3fb8:	73f3      	strb	r3, [r6, #15]

    return( 0 );
}
    3fba:	2000      	movs	r0, #0
    3fbc:	b003      	add	sp, #12
    3fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3fc2:	bf00      	nop
    3fc4:	0002ec30 	.word	0x0002ec30
    3fc8:	0002f030 	.word	0x0002f030
    3fcc:	0002f430 	.word	0x0002f430
    3fd0:	0002f830 	.word	0x0002f830
    3fd4:	0002eb30 	.word	0x0002eb30

00003fd8 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
    3fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fdc:	b083      	sub	sp, #12
    3fde:	9201      	str	r2, [sp, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
    3fe0:	6842      	ldr	r2, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    3fe2:	f891 a000 	ldrb.w	sl, [r1]
    3fe6:	784b      	ldrb	r3, [r1, #1]
    3fe8:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    3fec:	788b      	ldrb	r3, [r1, #2]
    3fee:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
    3ff2:	78cb      	ldrb	r3, [r1, #3]
    3ff4:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
    3ff8:	6813      	ldr	r3, [r2, #0]
    3ffa:	ea8a 0a03 	eor.w	sl, sl, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    3ffe:	f891 9004 	ldrb.w	r9, [r1, #4]
    4002:	794b      	ldrb	r3, [r1, #5]
    4004:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    4008:	798b      	ldrb	r3, [r1, #6]
    400a:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
    400e:	79cb      	ldrb	r3, [r1, #7]
    4010:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
    4014:	6853      	ldr	r3, [r2, #4]
    4016:	ea89 0903 	eor.w	r9, r9, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    401a:	7a0c      	ldrb	r4, [r1, #8]
    401c:	7a4b      	ldrb	r3, [r1, #9]
    401e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    4022:	7a8b      	ldrb	r3, [r1, #10]
    4024:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    4028:	7acb      	ldrb	r3, [r1, #11]
    402a:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    402e:	6893      	ldr	r3, [r2, #8]
    4030:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    4032:	7b0b      	ldrb	r3, [r1, #12]
    4034:	7b4d      	ldrb	r5, [r1, #13]
    4036:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    403a:	7b8d      	ldrb	r5, [r1, #14]
    403c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    4040:	7bc9      	ldrb	r1, [r1, #15]
    4042:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
    4046:	f102 0610 	add.w	r6, r2, #16
    404a:	68d3      	ldr	r3, [r2, #12]
    404c:	4059      	eors	r1, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    404e:	6803      	ldr	r3, [r0, #0]
    4050:	ea4f 0b63 	mov.w	fp, r3, asr #1
    4054:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    4058:	460b      	mov	r3, r1
    405a:	e0bd      	b.n	41d8 <mbedtls_internal_aes_decrypt+0x200>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    405c:	6832      	ldr	r2, [r6, #0]
    405e:	fa5f f08a 	uxtb.w	r0, sl
    4062:	49cb      	ldr	r1, [pc, #812]	; (4390 <mbedtls_internal_aes_decrypt+0x3b8>)
    4064:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    4068:	ea82 0800 	eor.w	r8, r2, r0
    406c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    4070:	4dc8      	ldr	r5, [pc, #800]	; (4394 <mbedtls_internal_aes_decrypt+0x3bc>)
    4072:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    4076:	ea88 0802 	eor.w	r8, r8, r2
    407a:	f3c4 4207 	ubfx	r2, r4, #16, #8
    407e:	48c6      	ldr	r0, [pc, #792]	; (4398 <mbedtls_internal_aes_decrypt+0x3c0>)
    4080:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4084:	ea88 0802 	eor.w	r8, r8, r2
    4088:	ea4f 6719 	mov.w	r7, r9, lsr #24
    408c:	4ac3      	ldr	r2, [pc, #780]	; (439c <mbedtls_internal_aes_decrypt+0x3c4>)
    408e:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    4092:	ea88 0807 	eor.w	r8, r8, r7
    4096:	fa5f fe89 	uxtb.w	lr, r9
    409a:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    409e:	6877      	ldr	r7, [r6, #4]
    40a0:	ea87 0c0e 	eor.w	ip, r7, lr
    40a4:	f3ca 2707 	ubfx	r7, sl, #8, #8
    40a8:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    40ac:	ea8c 0c07 	eor.w	ip, ip, r7
    40b0:	f3c3 4707 	ubfx	r7, r3, #16, #8
    40b4:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    40b8:	ea8c 0c07 	eor.w	ip, ip, r7
    40bc:	0e27      	lsrs	r7, r4, #24
    40be:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    40c2:	ea8c 0c07 	eor.w	ip, ip, r7
    40c6:	fa5f fe84 	uxtb.w	lr, r4
    40ca:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    40ce:	68b7      	ldr	r7, [r6, #8]
    40d0:	ea87 0e0e 	eor.w	lr, r7, lr
    40d4:	f3c9 2707 	ubfx	r7, r9, #8, #8
    40d8:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    40dc:	ea8e 0e07 	eor.w	lr, lr, r7
    40e0:	f3ca 4707 	ubfx	r7, sl, #16, #8
    40e4:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    40e8:	ea8e 0e07 	eor.w	lr, lr, r7
    40ec:	0e1f      	lsrs	r7, r3, #24
    40ee:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    40f2:	ea8e 0e07 	eor.w	lr, lr, r7
    40f6:	68f7      	ldr	r7, [r6, #12]
    40f8:	b2db      	uxtb	r3, r3
    40fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    40fe:	405f      	eors	r7, r3
    4100:	f3c4 2407 	ubfx	r4, r4, #8, #8
    4104:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4108:	405f      	eors	r7, r3
    410a:	f3c9 4907 	ubfx	r9, r9, #16, #8
    410e:	f850 3029 	ldr.w	r3, [r0, r9, lsl #2]
    4112:	405f      	eors	r7, r3
    4114:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
    4118:	f852 302a 	ldr.w	r3, [r2, sl, lsl #2]
    411c:	405f      	eors	r7, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    411e:	6933      	ldr	r3, [r6, #16]
    4120:	fa5f f488 	uxtb.w	r4, r8
    4124:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    4128:	ea83 0a04 	eor.w	sl, r3, r4
    412c:	f3c7 2307 	ubfx	r3, r7, #8, #8
    4130:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    4134:	ea8a 0a03 	eor.w	sl, sl, r3
    4138:	f3ce 4307 	ubfx	r3, lr, #16, #8
    413c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    4140:	ea8a 0a03 	eor.w	sl, sl, r3
    4144:	ea4f 631c 	mov.w	r3, ip, lsr #24
    4148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    414c:	ea8a 0a03 	eor.w	sl, sl, r3
    4150:	6973      	ldr	r3, [r6, #20]
    4152:	fa5f f48c 	uxtb.w	r4, ip
    4156:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    415a:	ea83 0904 	eor.w	r9, r3, r4
    415e:	f3c8 2307 	ubfx	r3, r8, #8, #8
    4162:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    4166:	ea89 0903 	eor.w	r9, r9, r3
    416a:	f3c7 4307 	ubfx	r3, r7, #16, #8
    416e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    4172:	ea89 0903 	eor.w	r9, r9, r3
    4176:	ea4f 631e 	mov.w	r3, lr, lsr #24
    417a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    417e:	ea89 0903 	eor.w	r9, r9, r3
    4182:	69b3      	ldr	r3, [r6, #24]
    4184:	fa5f f48e 	uxtb.w	r4, lr
    4188:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    418c:	405c      	eors	r4, r3
    418e:	f3cc 2307 	ubfx	r3, ip, #8, #8
    4192:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    4196:	405c      	eors	r4, r3
    4198:	f3c8 4307 	ubfx	r3, r8, #16, #8
    419c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    41a0:	405c      	eors	r4, r3
    41a2:	0e3b      	lsrs	r3, r7, #24
    41a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    41a8:	405c      	eors	r4, r3
    41aa:	69f3      	ldr	r3, [r6, #28]
    41ac:	b2ff      	uxtb	r7, r7
    41ae:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
    41b2:	404b      	eors	r3, r1
    41b4:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    41b8:	f855 102e 	ldr.w	r1, [r5, lr, lsl #2]
    41bc:	404b      	eors	r3, r1
    41be:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    41c2:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
    41c6:	404b      	eors	r3, r1
    41c8:	ea4f 6818 	mov.w	r8, r8, lsr #24
    41cc:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
    41d0:	4053      	eors	r3, r2
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    41d2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    41d6:	3620      	adds	r6, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    41d8:	f1bb 0f00 	cmp.w	fp, #0
    41dc:	f73f af3e 	bgt.w	405c <mbedtls_internal_aes_decrypt+0x84>
    41e0:	4619      	mov	r1, r3
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    41e2:	6833      	ldr	r3, [r6, #0]
    41e4:	fa5f f28a 	uxtb.w	r2, sl
    41e8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 4390 <mbedtls_internal_aes_decrypt+0x3b8>
    41ec:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
    41f0:	4053      	eors	r3, r2
    41f2:	f3c1 2207 	ubfx	r2, r1, #8, #8
    41f6:	4f67      	ldr	r7, [pc, #412]	; (4394 <mbedtls_internal_aes_decrypt+0x3bc>)
    41f8:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    41fc:	4053      	eors	r3, r2
    41fe:	f3c4 4207 	ubfx	r2, r4, #16, #8
    4202:	4d65      	ldr	r5, [pc, #404]	; (4398 <mbedtls_internal_aes_decrypt+0x3c0>)
    4204:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    4208:	4053      	eors	r3, r2
    420a:	ea4f 6219 	mov.w	r2, r9, lsr #24
    420e:	4863      	ldr	r0, [pc, #396]	; (439c <mbedtls_internal_aes_decrypt+0x3c4>)
    4210:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4214:	4053      	eors	r3, r2
    4216:	fa5f fc89 	uxtb.w	ip, r9
    421a:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
    421e:	6872      	ldr	r2, [r6, #4]
    4220:	ea82 0c0c 	eor.w	ip, r2, ip
    4224:	f3ca 2207 	ubfx	r2, sl, #8, #8
    4228:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    422c:	ea8c 0c02 	eor.w	ip, ip, r2
    4230:	f3c1 4207 	ubfx	r2, r1, #16, #8
    4234:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    4238:	ea8c 0c02 	eor.w	ip, ip, r2
    423c:	0e22      	lsrs	r2, r4, #24
    423e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4242:	ea8c 0c02 	eor.w	ip, ip, r2
    4246:	fa5f f884 	uxtb.w	r8, r4
    424a:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
    424e:	68b2      	ldr	r2, [r6, #8]
    4250:	ea82 0808 	eor.w	r8, r2, r8
    4254:	f3c9 2207 	ubfx	r2, r9, #8, #8
    4258:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    425c:	ea88 0802 	eor.w	r8, r8, r2
    4260:	f3ca 4207 	ubfx	r2, sl, #16, #8
    4264:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    4268:	ea88 0802 	eor.w	r8, r8, r2
    426c:	0e0a      	lsrs	r2, r1, #24
    426e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4272:	ea88 0802 	eor.w	r8, r8, r2
    4276:	68f2      	ldr	r2, [r6, #12]
    4278:	b2c9      	uxtb	r1, r1
    427a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    427e:	404a      	eors	r2, r1
    4280:	f3c4 2407 	ubfx	r4, r4, #8, #8
    4284:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
    4288:	4057      	eors	r7, r2
    428a:	f3c9 4907 	ubfx	r9, r9, #16, #8
    428e:	f855 2029 	ldr.w	r2, [r5, r9, lsl #2]
    4292:	4057      	eors	r7, r2
    4294:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
    4298:	f850 202a 	ldr.w	r2, [r0, sl, lsl #2]
    429c:	4057      	eors	r7, r2

    X0 = *RK++ ^ \
    429e:	6931      	ldr	r1, [r6, #16]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    42a0:	b2d8      	uxtb	r0, r3
    42a2:	4a3f      	ldr	r2, [pc, #252]	; (43a0 <mbedtls_internal_aes_decrypt+0x3c8>)
    42a4:	5c14      	ldrb	r4, [r2, r0]
    X0 = *RK++ ^ \
    42a6:	404c      	eors	r4, r1
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    42a8:	f3c7 2107 	ubfx	r1, r7, #8, #8
    42ac:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    42ae:	ea84 2401 	eor.w	r4, r4, r1, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    42b2:	f3c8 4107 	ubfx	r1, r8, #16, #8
    42b6:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    42b8:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    42bc:	ea4f 611c 	mov.w	r1, ip, lsr #24
    42c0:	5c51      	ldrb	r1, [r2, r1]
    X0 = *RK++ ^ \
    42c2:	ea84 6401 	eor.w	r4, r4, r1, lsl #24

    X1 = *RK++ ^ \
    42c6:	6971      	ldr	r1, [r6, #20]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    42c8:	fa5f f08c 	uxtb.w	r0, ip
    42cc:	5c10      	ldrb	r0, [r2, r0]
    X1 = *RK++ ^ \
    42ce:	4048      	eors	r0, r1
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    42d0:	f3c3 2107 	ubfx	r1, r3, #8, #8
    42d4:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    42d6:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    42da:	f3c7 4107 	ubfx	r1, r7, #16, #8
    42de:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    42e0:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    42e4:	ea4f 6118 	mov.w	r1, r8, lsr #24
    42e8:	5c51      	ldrb	r1, [r2, r1]
    X1 = *RK++ ^ \
    42ea:	ea80 6001 	eor.w	r0, r0, r1, lsl #24

    X2 = *RK++ ^ \
    42ee:	69b1      	ldr	r1, [r6, #24]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    42f0:	fa5f f588 	uxtb.w	r5, r8
    42f4:	5d55      	ldrb	r5, [r2, r5]
    X2 = *RK++ ^ \
    42f6:	404d      	eors	r5, r1
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    42f8:	f3cc 2107 	ubfx	r1, ip, #8, #8
    42fc:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    42fe:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    4302:	f3c3 4107 	ubfx	r1, r3, #16, #8
    4306:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    4308:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    430c:	0e39      	lsrs	r1, r7, #24
    430e:	5c51      	ldrb	r1, [r2, r1]
    X2 = *RK++ ^ \
    4310:	ea85 6501 	eor.w	r5, r5, r1, lsl #24

    X3 = *RK++ ^ \
    4314:	69f1      	ldr	r1, [r6, #28]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    4316:	b2ff      	uxtb	r7, r7
    4318:	5dd6      	ldrb	r6, [r2, r7]
    X3 = *RK++ ^ \
    431a:	4071      	eors	r1, r6
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    431c:	f3c8 2807 	ubfx	r8, r8, #8, #8
    4320:	f812 6008 	ldrb.w	r6, [r2, r8]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    4324:	ea81 2106 	eor.w	r1, r1, r6, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    4328:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    432c:	f812 600c 	ldrb.w	r6, [r2, ip]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    4330:	ea81 4106 	eor.w	r1, r1, r6, lsl #16
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    4334:	0e1b      	lsrs	r3, r3, #24
    4336:	5cd3      	ldrb	r3, [r2, r3]
    X3 = *RK++ ^ \
    4338:	ea81 6303 	eor.w	r3, r1, r3, lsl #24

    PUT_UINT32_LE( X0, output,  0 );
    433c:	9e01      	ldr	r6, [sp, #4]
    433e:	7034      	strb	r4, [r6, #0]
    4340:	f3c4 2207 	ubfx	r2, r4, #8, #8
    4344:	7072      	strb	r2, [r6, #1]
    4346:	f3c4 4207 	ubfx	r2, r4, #16, #8
    434a:	70b2      	strb	r2, [r6, #2]
    434c:	0e24      	lsrs	r4, r4, #24
    434e:	70f4      	strb	r4, [r6, #3]
    PUT_UINT32_LE( X1, output,  4 );
    4350:	7130      	strb	r0, [r6, #4]
    4352:	f3c0 2207 	ubfx	r2, r0, #8, #8
    4356:	7172      	strb	r2, [r6, #5]
    4358:	f3c0 4207 	ubfx	r2, r0, #16, #8
    435c:	71b2      	strb	r2, [r6, #6]
    435e:	0e00      	lsrs	r0, r0, #24
    4360:	71f0      	strb	r0, [r6, #7]
    PUT_UINT32_LE( X2, output,  8 );
    4362:	7235      	strb	r5, [r6, #8]
    4364:	f3c5 2207 	ubfx	r2, r5, #8, #8
    4368:	7272      	strb	r2, [r6, #9]
    436a:	f3c5 4207 	ubfx	r2, r5, #16, #8
    436e:	72b2      	strb	r2, [r6, #10]
    4370:	0e2d      	lsrs	r5, r5, #24
    4372:	72f5      	strb	r5, [r6, #11]
    PUT_UINT32_LE( X3, output, 12 );
    4374:	7333      	strb	r3, [r6, #12]
    4376:	f3c3 2207 	ubfx	r2, r3, #8, #8
    437a:	7372      	strb	r2, [r6, #13]
    437c:	f3c3 4207 	ubfx	r2, r3, #16, #8
    4380:	73b2      	strb	r2, [r6, #14]
    4382:	0e1b      	lsrs	r3, r3, #24
    4384:	73f3      	strb	r3, [r6, #15]

    return( 0 );
}
    4386:	2000      	movs	r0, #0
    4388:	b003      	add	sp, #12
    438a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    438e:	bf00      	nop
    4390:	0002fd58 	.word	0x0002fd58
    4394:	00030158 	.word	0x00030158
    4398:	00030558 	.word	0x00030558
    439c:	00030958 	.word	0x00030958
    43a0:	0002fc58 	.word	0x0002fc58

000043a4 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
    43a4:	b510      	push	{r4, lr}
    43a6:	4614      	mov	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
    43a8:	2901      	cmp	r1, #1
    43aa:	d004      	beq.n	43b6 <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
    43ac:	461a      	mov	r2, r3
    43ae:	4621      	mov	r1, r4
    43b0:	f7ff fe12 	bl	3fd8 <mbedtls_internal_aes_decrypt>
}
    43b4:	bd10      	pop	{r4, pc}
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    43b6:	461a      	mov	r2, r3
    43b8:	4621      	mov	r1, r4
    43ba:	f7ff fc27 	bl	3c0c <mbedtls_internal_aes_encrypt>
    43be:	bd10      	pop	{r4, pc}

000043c0 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    43c0:	b530      	push	{r4, r5, lr}
    43c2:	b085      	sub	sp, #20
    43c4:	4604      	mov	r4, r0
    43c6:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    43c8:	2203      	movs	r2, #3
    43ca:	4668      	mov	r0, sp
    43cc:	f7fb ff78 	bl	2c0 <memcpy>
	memset(res + 3, 0, 13);
    43d0:	220d      	movs	r2, #13
    43d2:	2100      	movs	r1, #0
    43d4:	f10d 0003 	add.w	r0, sp, #3
    43d8:	f025 fed2 	bl	2a180 <memset>

	err = bt_encrypt_le(irk, res, res);
    43dc:	466a      	mov	r2, sp
    43de:	4669      	mov	r1, sp
    43e0:	4620      	mov	r0, r4
    43e2:	f00d f8a1 	bl	11528 <bt_encrypt_le>
	if (err) {
    43e6:	4604      	mov	r4, r0
    43e8:	b110      	cbz	r0, 43f0 <ah+0x30>
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
    43ea:	4620      	mov	r0, r4
    43ec:	b005      	add	sp, #20
    43ee:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
    43f0:	2203      	movs	r2, #3
    43f2:	4669      	mov	r1, sp
    43f4:	4628      	mov	r0, r5
    43f6:	f7fb ff63 	bl	2c0 <memcpy>
	return 0;
    43fa:	e7f6      	b.n	43ea <ah+0x2a>

000043fc <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    43fc:	b510      	push	{r4, lr}
    43fe:	b082      	sub	sp, #8
    4400:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    4402:	aa01      	add	r2, sp, #4
    4404:	3103      	adds	r1, #3
    4406:	f7ff ffdb 	bl	43c0 <ah>
	if (err) {
    440a:	b110      	cbz	r0, 4412 <bt_rpa_irk_matches+0x16>
		return false;
    440c:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
    440e:	b002      	add	sp, #8
    4410:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
    4412:	2203      	movs	r2, #3
    4414:	a901      	add	r1, sp, #4
    4416:	4620      	mov	r0, r4
    4418:	f025 fe1e 	bl	2a058 <memcmp>
    441c:	fab0 f080 	clz	r0, r0
    4420:	0940      	lsrs	r0, r0, #5
    4422:	e7f4      	b.n	440e <bt_rpa_irk_matches+0x12>

00004424 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    4424:	b570      	push	{r4, r5, r6, lr}
    4426:	4606      	mov	r6, r0
    4428:	460c      	mov	r4, r1
	int err;

	err = bt_rand(rpa->val + 3, 3);
    442a:	1ccd      	adds	r5, r1, #3
    442c:	2103      	movs	r1, #3
    442e:	4628      	mov	r0, r5
    4430:	f00d f85e 	bl	114f0 <bt_rand>
	if (err) {
    4434:	4603      	mov	r3, r0
    4436:	b108      	cbz	r0, 443c <bt_rpa_create+0x18>
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    4438:	4618      	mov	r0, r3
    443a:	bd70      	pop	{r4, r5, r6, pc}
	BT_ADDR_SET_RPA(rpa);
    443c:	f994 3005 	ldrsb.w	r3, [r4, #5]
    4440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4448:	7163      	strb	r3, [r4, #5]
	err = ah(irk, rpa->val + 3, rpa->val);
    444a:	4622      	mov	r2, r4
    444c:	4629      	mov	r1, r5
    444e:	4630      	mov	r0, r6
    4450:	f7ff ffb6 	bl	43c0 <ah>
    4454:	4603      	mov	r3, r0
    4456:	e7ef      	b.n	4438 <bt_rpa_create+0x14>

00004458 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    4458:	b570      	push	{r4, r5, r6, lr}
    445a:	4605      	mov	r5, r0
    445c:	460c      	mov	r4, r1
	switch (src->type) {
    445e:	7803      	ldrb	r3, [r0, #0]
    4460:	2b01      	cmp	r3, #1
    4462:	d010      	beq.n	4486 <uuid_to_uuid128+0x2e>
    4464:	b113      	cbz	r3, 446c <uuid_to_uuid128+0x14>
    4466:	2b02      	cmp	r3, #2
    4468:	d01f      	beq.n	44aa <uuid_to_uuid128+0x52>
    446a:	bd70      	pop	{r4, r5, r6, pc}
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    446c:	4e12      	ldr	r6, [pc, #72]	; (44b8 <uuid_to_uuid128+0x60>)
    446e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    4470:	6020      	str	r0, [r4, #0]
    4472:	6061      	str	r1, [r4, #4]
    4474:	60a2      	str	r2, [r4, #8]
    4476:	60e3      	str	r3, [r4, #12]
    4478:	7833      	ldrb	r3, [r6, #0]
    447a:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
    447c:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    447e:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    4480:	0a1b      	lsrs	r3, r3, #8
    4482:	73a3      	strb	r3, [r4, #14]
    4484:	bd70      	pop	{r4, r5, r6, pc}
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_32:
		*dst = uuid128_base;
    4486:	4e0c      	ldr	r6, [pc, #48]	; (44b8 <uuid_to_uuid128+0x60>)
    4488:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    448a:	6020      	str	r0, [r4, #0]
    448c:	6061      	str	r1, [r4, #4]
    448e:	60a2      	str	r2, [r4, #8]
    4490:	60e3      	str	r3, [r4, #12]
    4492:	7833      	ldrb	r3, [r6, #0]
    4494:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
    4496:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
    4498:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    449a:	f3c3 2207 	ubfx	r2, r3, #8, #8
    449e:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    44a0:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    44a2:	73e3      	strb	r3, [r4, #15]
	dst[1] = val >> 8;
    44a4:	0a1b      	lsrs	r3, r3, #8
    44a6:	7423      	strb	r3, [r4, #16]
    44a8:	bd70      	pop	{r4, r5, r6, pc}
    44aa:	4608      	mov	r0, r1
    44ac:	4629      	mov	r1, r5
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
    44ae:	2211      	movs	r2, #17
    44b0:	f7fb ff06 	bl	2c0 <memcpy>
    44b4:	bd70      	pop	{r4, r5, r6, pc}
    44b6:	bf00      	nop
    44b8:	00030d58 	.word	0x00030d58

000044bc <uuid128_cmp>:
		return;
	}
}

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    44bc:	b510      	push	{r4, lr}
    44be:	b08a      	sub	sp, #40	; 0x28
    44c0:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
    44c2:	a905      	add	r1, sp, #20
    44c4:	f7ff ffc8 	bl	4458 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    44c8:	4669      	mov	r1, sp
    44ca:	4620      	mov	r0, r4
    44cc:	f7ff ffc4 	bl	4458 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
    44d0:	2210      	movs	r2, #16
    44d2:	f10d 0101 	add.w	r1, sp, #1
    44d6:	f10d 0015 	add.w	r0, sp, #21
    44da:	f025 fdbd 	bl	2a058 <memcmp>
}
    44de:	b00a      	add	sp, #40	; 0x28
    44e0:	bd10      	pop	{r4, pc}

000044e2 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    44e2:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    44e4:	7803      	ldrb	r3, [r0, #0]
    44e6:	780a      	ldrb	r2, [r1, #0]
    44e8:	4293      	cmp	r3, r2
    44ea:	d107      	bne.n	44fc <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
    44ec:	2b01      	cmp	r3, #1
    44ee:	d00c      	beq.n	450a <bt_uuid_cmp+0x28>
    44f0:	b13b      	cbz	r3, 4502 <bt_uuid_cmp+0x20>
    44f2:	2b02      	cmp	r3, #2
    44f4:	d00d      	beq.n	4512 <bt_uuid_cmp+0x30>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
    44f6:	f06f 0015 	mvn.w	r0, #21
}
    44fa:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
    44fc:	f7ff ffde 	bl	44bc <uuid128_cmp>
    4500:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    4502:	8840      	ldrh	r0, [r0, #2]
    4504:	884b      	ldrh	r3, [r1, #2]
    4506:	1ac0      	subs	r0, r0, r3
    4508:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    450a:	6840      	ldr	r0, [r0, #4]
    450c:	684b      	ldr	r3, [r1, #4]
    450e:	1ac0      	subs	r0, r0, r3
    4510:	bd08      	pop	{r3, pc}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    4512:	2210      	movs	r2, #16
    4514:	3101      	adds	r1, #1
    4516:	3001      	adds	r0, #1
    4518:	f025 fd9e 	bl	2a058 <memcmp>
    451c:	bd08      	pop	{r3, pc}
	...

00004520 <le_dhkey_complete>:
		cb->func(evt->status ? NULL : evt->key);
	}
}

static void le_dhkey_complete(struct net_buf *buf)
{
    4520:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    4522:	6880      	ldr	r0, [r0, #8]

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    4524:	4b06      	ldr	r3, [pc, #24]	; (4540 <le_dhkey_complete+0x20>)
    4526:	681b      	ldr	r3, [r3, #0]
    4528:	b133      	cbz	r3, 4538 <le_dhkey_complete+0x18>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    452a:	7802      	ldrb	r2, [r0, #0]
    452c:	b92a      	cbnz	r2, 453a <le_dhkey_complete+0x1a>
    452e:	3001      	adds	r0, #1
    4530:	4798      	blx	r3
		dh_key_cb = NULL;
    4532:	2200      	movs	r2, #0
    4534:	4b02      	ldr	r3, [pc, #8]	; (4540 <le_dhkey_complete+0x20>)
    4536:	601a      	str	r2, [r3, #0]
    4538:	bd08      	pop	{r3, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    453a:	2000      	movs	r0, #0
    453c:	e7f8      	b.n	4530 <le_dhkey_complete+0x10>
    453e:	bf00      	nop
    4540:	200003d8 	.word	0x200003d8

00004544 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    4544:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status %u", rp->status);

	bt_dev.hci_version = rp->hci_version;
    4546:	7851      	ldrb	r1, [r2, #1]
    4548:	4b06      	ldr	r3, [pc, #24]	; (4564 <read_local_ver_complete+0x20>)
    454a:	7399      	strb	r1, [r3, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    454c:	8851      	ldrh	r1, [r2, #2]
    454e:	8219      	strh	r1, [r3, #16]
	bt_dev.lmp_version = rp->lmp_version;
    4550:	7911      	ldrb	r1, [r2, #4]
    4552:	73d9      	strb	r1, [r3, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    4554:	f8b2 1007 	ldrh.w	r1, [r2, #7]
    4558:	8259      	strh	r1, [r3, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    455a:	f8b2 2005 	ldrh.w	r2, [r2, #5]
    455e:	829a      	strh	r2, [r3, #20]
    4560:	4770      	bx	lr
    4562:	bf00      	nop
    4564:	2000b970 	.word	0x2000b970

00004568 <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
    4568:	b410      	push	{r4}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
    456a:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_le16(const u8_t src[2])
{
	return ((u16_t)src[1] << 8) | src[0];
    456c:	7a1a      	ldrb	r2, [r3, #8]
    456e:	79dc      	ldrb	r4, [r3, #7]
    4570:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
    4574:	7999      	ldrb	r1, [r3, #6]
    4576:	795a      	ldrb	r2, [r3, #5]
    4578:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    457c:	2000      	movs	r0, #0
    457e:	ea42 4104 	orr.w	r1, r2, r4, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    4582:	791c      	ldrb	r4, [r3, #4]
    4584:	78da      	ldrb	r2, [r3, #3]
    4586:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    458a:	789c      	ldrb	r4, [r3, #2]
    458c:	785b      	ldrb	r3, [r3, #1]
    458e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    4592:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4596:	4318      	orrs	r0, r3

	BT_DBG("status %u", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    4598:	4b02      	ldr	r3, [pc, #8]	; (45a4 <le_read_supp_states_complete+0x3c>)
    459a:	e9c3 0120 	strd	r0, r1, [r3, #128]	; 0x80
}
    459e:	bc10      	pop	{r4}
    45a0:	4770      	bx	lr
    45a2:	bf00      	nop
    45a4:	2000b970 	.word	0x2000b970

000045a8 <valid_adv_param>:
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    45a8:	7803      	ldrb	r3, [r0, #0]
    45aa:	f013 0f01 	tst.w	r3, #1
    45ae:	d106      	bne.n	45be <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    45b0:	4b0c      	ldr	r3, [pc, #48]	; (45e4 <valid_adv_param+0x3c>)
    45b2:	7b9b      	ldrb	r3, [r3, #14]
    45b4:	2b08      	cmp	r3, #8
    45b6:	d802      	bhi.n	45be <valid_adv_param+0x16>
		    param->interval_min < 0x00a0) {
    45b8:	8843      	ldrh	r3, [r0, #2]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    45ba:	2b9f      	cmp	r3, #159	; 0x9f
    45bc:	d90c      	bls.n	45d8 <valid_adv_param+0x30>
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    45be:	8843      	ldrh	r3, [r0, #2]
    45c0:	8882      	ldrh	r2, [r0, #4]
    45c2:	4293      	cmp	r3, r2
    45c4:	d80a      	bhi.n	45dc <valid_adv_param+0x34>
    45c6:	2b1f      	cmp	r3, #31
    45c8:	d90a      	bls.n	45e0 <valid_adv_param+0x38>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    45ca:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    45ce:	d801      	bhi.n	45d4 <valid_adv_param+0x2c>
		return false;
	}

	return true;
    45d0:	2001      	movs	r0, #1
}
    45d2:	4770      	bx	lr
		return false;
    45d4:	2000      	movs	r0, #0
    45d6:	4770      	bx	lr
			return false;
    45d8:	2000      	movs	r0, #0
    45da:	4770      	bx	lr
		return false;
    45dc:	2000      	movs	r0, #0
    45de:	4770      	bx	lr
    45e0:	2000      	movs	r0, #0
    45e2:	4770      	bx	lr
    45e4:	2000b970 	.word	0x2000b970

000045e8 <hci_reset_complete>:
	u8_t status = buf->data[0];
    45e8:	6883      	ldr	r3, [r0, #8]
    45ea:	781b      	ldrb	r3, [r3, #0]
	if (status) {
    45ec:	b103      	cbz	r3, 45f0 <hci_reset_complete+0x8>
    45ee:	4770      	bx	lr
	scan_dev_found_cb = NULL;
    45f0:	2200      	movs	r2, #0
    45f2:	4b07      	ldr	r3, [pc, #28]	; (4610 <hci_reset_complete+0x28>)
    45f4:	601a      	str	r2, [r3, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    45f6:	4b07      	ldr	r3, [pc, #28]	; (4614 <hci_reset_complete+0x2c>)
    45f8:	2201      	movs	r2, #1
    45fa:	f3bf 8f5b 	dmb	ish
    45fe:	e853 1f00 	ldrex	r1, [r3]
    4602:	e843 2000 	strex	r0, r2, [r3]
    4606:	2800      	cmp	r0, #0
    4608:	d1f9      	bne.n	45fe <hci_reset_complete+0x16>
    460a:	f3bf 8f5b 	dmb	ish
    460e:	e7ee      	b.n	45ee <hci_reset_complete+0x6>
    4610:	20000424 	.word	0x20000424
    4614:	2000b9e0 	.word	0x2000b9e0

00004618 <read_local_features_complete>:
{
    4618:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    461a:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    461c:	2208      	movs	r2, #8
    461e:	3101      	adds	r1, #1
    4620:	4801      	ldr	r0, [pc, #4]	; (4628 <read_local_features_complete+0x10>)
    4622:	f7fb fe4d 	bl	2c0 <memcpy>
    4626:	bd08      	pop	{r3, pc}
    4628:	2000b986 	.word	0x2000b986

0000462c <read_bdaddr_complete>:
{
    462c:	b510      	push	{r4, lr}
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;
    462e:	6881      	ldr	r1, [r0, #8]
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    4630:	4c04      	ldr	r4, [pc, #16]	; (4644 <read_bdaddr_complete+0x18>)
    4632:	2206      	movs	r2, #6
    4634:	3101      	adds	r1, #1
    4636:	1c60      	adds	r0, r4, #1
    4638:	f7fb fe42 	bl	2c0 <memcpy>
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    463c:	2300      	movs	r3, #0
    463e:	7023      	strb	r3, [r4, #0]
    4640:	bd10      	pop	{r4, pc}
    4642:	bf00      	nop
    4644:	2000b970 	.word	0x2000b970

00004648 <read_supported_commands_complete>:
{
    4648:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    464a:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    464c:	2240      	movs	r2, #64	; 0x40
    464e:	3101      	adds	r1, #1
    4650:	4801      	ldr	r0, [pc, #4]	; (4658 <read_supported_commands_complete+0x10>)
    4652:	f7fb fe35 	bl	2c0 <memcpy>
    4656:	bd08      	pop	{r3, pc}
    4658:	2000b98e 	.word	0x2000b98e

0000465c <read_le_features_complete>:
{
    465c:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    465e:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    4660:	2208      	movs	r2, #8
    4662:	3101      	adds	r1, #1
    4664:	4801      	ldr	r0, [pc, #4]	; (466c <read_le_features_complete+0x10>)
    4666:	f7fb fe2b 	bl	2c0 <memcpy>
    466a:	bd08      	pop	{r3, pc}
    466c:	2000b9e8 	.word	0x2000b9e8

00004670 <le_read_buffer_size_complete>:
{
    4670:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    4672:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    4674:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    4678:	b299      	uxth	r1, r3
    467a:	4807      	ldr	r0, [pc, #28]	; (4698 <le_read_buffer_size_complete+0x28>)
    467c:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    4680:	b901      	cbnz	r1, 4684 <le_read_buffer_size_complete+0x14>
    4682:	bd08      	pop	{r3, pc}
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    4684:	78d1      	ldrb	r1, [r2, #3]
    4686:	2902      	cmp	r1, #2
    4688:	bf28      	it	cs
    468a:	2102      	movcs	r1, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    468c:	460a      	mov	r2, r1
    468e:	308c      	adds	r0, #140	; 0x8c
    4690:	f024 fd9a 	bl	291c8 <_impl_k_sem_init>
    4694:	e7f5      	b.n	4682 <le_read_buffer_size_complete+0x12>
    4696:	bf00      	nop
    4698:	2000b970 	.word	0x2000b970

0000469c <read_buffer_size_complete>:
{
    469c:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    469e:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.mtu) {
    46a0:	4b09      	ldr	r3, [pc, #36]	; (46c8 <read_buffer_size_complete+0x2c>)
    46a2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    46a6:	b103      	cbz	r3, 46aa <read_buffer_size_complete+0xe>
    46a8:	bd08      	pop	{r3, pc}
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    46aa:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    46ae:	4806      	ldr	r0, [pc, #24]	; (46c8 <read_buffer_size_complete+0x2c>)
    46b0:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    46b4:	8891      	ldrh	r1, [r2, #4]
	pkts = min(pkts, CONFIG_BT_CONN_TX_MAX);
    46b6:	2902      	cmp	r1, #2
    46b8:	bf28      	it	cs
    46ba:	2102      	movcs	r1, #2
    46bc:	460a      	mov	r2, r1
    46be:	308c      	adds	r0, #140	; 0x8c
    46c0:	f024 fd82 	bl	291c8 <_impl_k_sem_init>
    46c4:	e7f0      	b.n	46a8 <read_buffer_size_complete+0xc>
    46c6:	bf00      	nop
    46c8:	2000b970 	.word	0x2000b970

000046cc <le_pkey_complete>:
{
    46cc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    46ce:	6885      	ldr	r5, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    46d0:	4b17      	ldr	r3, [pc, #92]	; (4730 <le_pkey_complete+0x64>)
    46d2:	f3bf 8f5b 	dmb	ish
    46d6:	e853 2f00 	ldrex	r2, [r3]
    46da:	f022 0210 	bic.w	r2, r2, #16
    46de:	e843 2100 	strex	r1, r2, [r3]
    46e2:	2900      	cmp	r1, #0
    46e4:	d1f7      	bne.n	46d6 <le_pkey_complete+0xa>
    46e6:	f3bf 8f5b 	dmb	ish
	if (!evt->status) {
    46ea:	782b      	ldrb	r3, [r5, #0]
    46ec:	b113      	cbz	r3, 46f4 <le_pkey_complete+0x28>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    46ee:	4b11      	ldr	r3, [pc, #68]	; (4734 <le_pkey_complete+0x68>)
    46f0:	681c      	ldr	r4, [r3, #0]
    46f2:	e015      	b.n	4720 <le_pkey_complete+0x54>
		memcpy(pub_key, evt->key, 64);
    46f4:	2240      	movs	r2, #64	; 0x40
    46f6:	1c69      	adds	r1, r5, #1
    46f8:	480f      	ldr	r0, [pc, #60]	; (4738 <le_pkey_complete+0x6c>)
    46fa:	f7fb fde1 	bl	2c0 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    46fe:	4b0c      	ldr	r3, [pc, #48]	; (4730 <le_pkey_complete+0x64>)
    4700:	f3bf 8f5b 	dmb	ish
    4704:	e853 2f00 	ldrex	r2, [r3]
    4708:	f042 0208 	orr.w	r2, r2, #8
    470c:	e843 2100 	strex	r1, r2, [r3]
    4710:	2900      	cmp	r1, #0
    4712:	d1f7      	bne.n	4704 <le_pkey_complete+0x38>
    4714:	f3bf 8f5b 	dmb	ish
    4718:	e7e9      	b.n	46ee <le_pkey_complete+0x22>
		cb->func(evt->status ? NULL : evt->key);
    471a:	2000      	movs	r0, #0
    471c:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    471e:	6864      	ldr	r4, [r4, #4]
    4720:	b12c      	cbz	r4, 472e <le_pkey_complete+0x62>
		cb->func(evt->status ? NULL : evt->key);
    4722:	6823      	ldr	r3, [r4, #0]
    4724:	782a      	ldrb	r2, [r5, #0]
    4726:	2a00      	cmp	r2, #0
    4728:	d1f7      	bne.n	471a <le_pkey_complete+0x4e>
    472a:	1c68      	adds	r0, r5, #1
    472c:	e7f6      	b.n	471c <le_pkey_complete+0x50>
}
    472e:	bd38      	pop	{r3, r4, r5, pc}
    4730:	2000b9e0 	.word	0x2000b9e0
    4734:	2000041c 	.word	0x2000041c
    4738:	200003dc 	.word	0x200003dc

0000473c <hci_acl>:
{
    473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    473e:	4604      	mov	r4, r0
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    4740:	6883      	ldr	r3, [r0, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    4742:	885e      	ldrh	r6, [r3, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    4744:	881a      	ldrh	r2, [r3, #0]
	flags = bt_acl_flags(handle);
    4746:	0b17      	lsrs	r7, r2, #12
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    4748:	f100 0510 	add.w	r5, r0, #16
    474c:	89c3      	ldrh	r3, [r0, #14]
    474e:	442b      	add	r3, r5
    4750:	3303      	adds	r3, #3
    4752:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->handle = bt_acl_handle(handle);
    4756:	f3c2 020b 	ubfx	r2, r2, #0, #12
    475a:	805a      	strh	r2, [r3, #2]
    475c:	89c3      	ldrh	r3, [r0, #14]
    475e:	442b      	add	r3, r5
    4760:	3303      	adds	r3, #3
    4762:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->id = BT_CONN_ID_INVALID;
    4766:	22ff      	movs	r2, #255	; 0xff
    4768:	705a      	strb	r2, [r3, #1]
	net_buf_pull(buf, sizeof(*hdr));
    476a:	2104      	movs	r1, #4
    476c:	3008      	adds	r0, #8
    476e:	f016 fa82 	bl	1ac76 <net_buf_simple_pull>
	if (buf->len != len) {
    4772:	89a3      	ldrh	r3, [r4, #12]
    4774:	429e      	cmp	r6, r3
    4776:	d003      	beq.n	4780 <hci_acl+0x44>
		net_buf_unref(buf);
    4778:	4620      	mov	r0, r4
    477a:	f016 f9e3 	bl	1ab44 <net_buf_unref>
		return;
    477e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4780:	89e3      	ldrh	r3, [r4, #14]
    4782:	442b      	add	r3, r5
    4784:	3303      	adds	r3, #3
    4786:	f023 0303 	bic.w	r3, r3, #3
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    478a:	8858      	ldrh	r0, [r3, #2]
    478c:	f002 fc7e 	bl	708c <bt_conn_lookup_handle>
	if (!conn) {
    4790:	4606      	mov	r6, r0
    4792:	b180      	cbz	r0, 47b6 <hci_acl+0x7a>
    4794:	89e3      	ldrh	r3, [r4, #14]
    4796:	441d      	add	r5, r3
    4798:	3503      	adds	r5, #3
    479a:	f025 0503 	bic.w	r5, r5, #3
	acl(buf)->id = bt_conn_get_id(conn);
    479e:	f003 f83b 	bl	7818 <bt_conn_get_id>
    47a2:	7068      	strb	r0, [r5, #1]
	bt_conn_recv(conn, buf, flags);
    47a4:	463a      	mov	r2, r7
    47a6:	4621      	mov	r1, r4
    47a8:	4630      	mov	r0, r6
    47aa:	f002 fb23 	bl	6df4 <bt_conn_recv>
	bt_conn_unref(conn);
    47ae:	4630      	mov	r0, r6
    47b0:	f002 fcf0 	bl	7194 <bt_conn_unref>
    47b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    47b6:	4620      	mov	r0, r4
    47b8:	f016 f9c4 	bl	1ab44 <net_buf_unref>
		return;
    47bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000047be <update_sec_level>:
{
    47be:	b508      	push	{r3, lr}
	if (!conn->encrypt) {
    47c0:	7a83      	ldrb	r3, [r0, #10]
    47c2:	b18b      	cbz	r3, 47e8 <update_sec_level+0x2a>
	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    47c4:	6f03      	ldr	r3, [r0, #112]	; 0x70
    47c6:	b1ab      	cbz	r3, 47f4 <update_sec_level+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    47c8:	f3bf 8f5b 	dmb	ish
    47cc:	689b      	ldr	r3, [r3, #8]
    47ce:	f3bf 8f5b 	dmb	ish
    47d2:	f013 0f01 	tst.w	r3, #1
    47d6:	d00d      	beq.n	47f4 <update_sec_level+0x36>
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    47d8:	6f03      	ldr	r3, [r0, #112]	; 0x70
    47da:	899b      	ldrh	r3, [r3, #12]
    47dc:	f013 0f20 	tst.w	r3, #32
    47e0:	d005      	beq.n	47ee <update_sec_level+0x30>
			conn->sec_level = BT_SECURITY_FIPS;
    47e2:	2304      	movs	r3, #4
    47e4:	7203      	strb	r3, [r0, #8]
    47e6:	e007      	b.n	47f8 <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_LOW;
    47e8:	2301      	movs	r3, #1
    47ea:	7203      	strb	r3, [r0, #8]
		return;
    47ec:	bd08      	pop	{r3, pc}
			conn->sec_level = BT_SECURITY_HIGH;
    47ee:	2303      	movs	r3, #3
    47f0:	7203      	strb	r3, [r0, #8]
    47f2:	e001      	b.n	47f8 <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_MEDIUM;
    47f4:	2302      	movs	r3, #2
    47f6:	7203      	strb	r3, [r0, #8]
	if (conn->required_sec_level > conn->sec_level) {
    47f8:	7a42      	ldrb	r2, [r0, #9]
    47fa:	7a03      	ldrb	r3, [r0, #8]
    47fc:	429a      	cmp	r2, r3
    47fe:	d800      	bhi.n	4802 <update_sec_level+0x44>
    4800:	bd08      	pop	{r3, pc}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    4802:	2105      	movs	r1, #5
    4804:	f002 fe8a 	bl	751c <bt_conn_disconnect>
    4808:	e7fa      	b.n	4800 <update_sec_level+0x42>

0000480a <hci_encrypt_change>:
{
    480a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    480c:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    480e:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    4812:	f002 fc3b 	bl	708c <bt_conn_lookup_handle>
	if (!conn) {
    4816:	b1e0      	cbz	r0, 4852 <hci_encrypt_change+0x48>
    4818:	4604      	mov	r4, r0
	if (evt->status) {
    481a:	782b      	ldrb	r3, [r5, #0]
    481c:	b13b      	cbz	r3, 482e <hci_encrypt_change+0x24>
		if (conn->type == BT_CONN_TYPE_LE) {
    481e:	7883      	ldrb	r3, [r0, #2]
    4820:	b90b      	cbnz	r3, 4826 <hci_encrypt_change+0x1c>
			conn->required_sec_level = conn->sec_level;
    4822:	7a03      	ldrb	r3, [r0, #8]
    4824:	7243      	strb	r3, [r0, #9]
		bt_conn_unref(conn);
    4826:	4620      	mov	r0, r4
    4828:	f002 fcb4 	bl	7194 <bt_conn_unref>
		return;
    482c:	bd38      	pop	{r3, r4, r5, pc}
	conn->encrypt = evt->encrypt;
    482e:	78eb      	ldrb	r3, [r5, #3]
    4830:	7283      	strb	r3, [r0, #10]
	if (conn->type == BT_CONN_TYPE_LE) {
    4832:	7882      	ldrb	r2, [r0, #2]
    4834:	b91a      	cbnz	r2, 483e <hci_encrypt_change+0x34>
		if (conn->encrypt) {
    4836:	b96b      	cbnz	r3, 4854 <hci_encrypt_change+0x4a>
		update_sec_level(conn);
    4838:	4620      	mov	r0, r4
    483a:	f7ff ffc0 	bl	47be <update_sec_level>
	bt_l2cap_encrypt_change(conn, evt->status);
    483e:	7829      	ldrb	r1, [r5, #0]
    4840:	4620      	mov	r0, r4
    4842:	f003 fbcb 	bl	7fdc <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    4846:	4620      	mov	r0, r4
    4848:	f002 fa9e 	bl	6d88 <bt_conn_security_changed>
	bt_conn_unref(conn);
    484c:	4620      	mov	r0, r4
    484e:	f002 fca1 	bl	7194 <bt_conn_unref>
    4852:	bd38      	pop	{r3, r4, r5, pc}
			bt_smp_update_keys(conn);
    4854:	f008 fafe 	bl	ce54 <bt_smp_update_keys>
    4858:	e7ee      	b.n	4838 <hci_encrypt_change+0x2e>

0000485a <hci_encrypt_key_refresh_complete>:
{
    485a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    485c:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    485e:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    4862:	f002 fc13 	bl	708c <bt_conn_lookup_handle>
	if (!conn) {
    4866:	b170      	cbz	r0, 4886 <hci_encrypt_key_refresh_complete+0x2c>
    4868:	4604      	mov	r4, r0
	if (evt->status) {
    486a:	7829      	ldrb	r1, [r5, #0]
    486c:	b961      	cbnz	r1, 4888 <hci_encrypt_key_refresh_complete+0x2e>
	if (conn->type == BT_CONN_TYPE_LE) {
    486e:	7883      	ldrb	r3, [r0, #2]
    4870:	b16b      	cbz	r3, 488e <hci_encrypt_key_refresh_complete+0x34>
	bt_l2cap_encrypt_change(conn, evt->status);
    4872:	7829      	ldrb	r1, [r5, #0]
    4874:	4620      	mov	r0, r4
    4876:	f003 fbb1 	bl	7fdc <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    487a:	4620      	mov	r0, r4
    487c:	f002 fa84 	bl	6d88 <bt_conn_security_changed>
	bt_conn_unref(conn);
    4880:	4620      	mov	r0, r4
    4882:	f002 fc87 	bl	7194 <bt_conn_unref>
    4886:	bd38      	pop	{r3, r4, r5, pc}
		bt_l2cap_encrypt_change(conn, evt->status);
    4888:	f003 fba8 	bl	7fdc <bt_l2cap_encrypt_change>
		return;
    488c:	bd38      	pop	{r3, r4, r5, pc}
		bt_smp_update_keys(conn);
    488e:	f008 fae1 	bl	ce54 <bt_smp_update_keys>
		update_sec_level(conn);
    4892:	4620      	mov	r0, r4
    4894:	f7ff ff93 	bl	47be <update_sec_level>
    4898:	e7eb      	b.n	4872 <hci_encrypt_key_refresh_complete+0x18>

0000489a <find_id_addr>:
{
    489a:	b510      	push	{r4, lr}
    489c:	4604      	mov	r4, r0
		keys = bt_keys_find_irk(addr);
    489e:	f008 fbe3 	bl	d068 <bt_keys_find_irk>
		if (keys) {
    48a2:	b100      	cbz	r0, 48a6 <find_id_addr+0xc>
			return &keys->addr;
    48a4:	bd10      	pop	{r4, pc}
	return addr;
    48a6:	4620      	mov	r0, r4
}
    48a8:	bd10      	pop	{r4, pc}
	...

000048ac <update_conn_param>:
{
    48ac:	b508      	push	{r3, lr}
	k_delayed_work_submit(&conn->le.update_work,
    48ae:	f100 0174 	add.w	r1, r0, #116	; 0x74
				 conn->role == BT_HCI_ROLE_MASTER ? K_NO_WAIT :
    48b2:	78c3      	ldrb	r3, [r0, #3]
	k_delayed_work_submit(&conn->le.update_work,
    48b4:	b12b      	cbz	r3, 48c2 <update_conn_param+0x16>
    48b6:	f241 3288 	movw	r2, #5000	; 0x1388
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    48ba:	4803      	ldr	r0, [pc, #12]	; (48c8 <update_conn_param+0x1c>)
    48bc:	f025 fad6 	bl	29e6c <k_delayed_work_submit_to_queue>
    48c0:	bd08      	pop	{r3, pc}
    48c2:	2200      	movs	r2, #0
    48c4:	e7f9      	b.n	48ba <update_conn_param+0xe>
    48c6:	bf00      	nop
    48c8:	20002c70 	.word	0x20002c70

000048cc <le_data_len_change>:
{
    48cc:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
    48ce:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    48d0:	8818      	ldrh	r0, [r3, #0]
    48d2:	f002 fbdb 	bl	708c <bt_conn_lookup_handle>
	if (!conn) {
    48d6:	b198      	cbz	r0, 4900 <le_data_len_change+0x34>
    48d8:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    48da:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    48dc:	f3bf 8f5b 	dmb	ish
    48e0:	e853 2f00 	ldrex	r2, [r3]
    48e4:	f422 7180 	bic.w	r1, r2, #256	; 0x100
    48e8:	e843 1000 	strex	r0, r1, [r3]
    48ec:	2800      	cmp	r0, #0
    48ee:	d1f7      	bne.n	48e0 <le_data_len_change+0x14>
    48f0:	f3bf 8f5b 	dmb	ish
    48f4:	f412 7f80 	tst.w	r2, #256	; 0x100
    48f8:	d103      	bne.n	4902 <le_data_len_change+0x36>
	bt_conn_unref(conn);
    48fa:	4620      	mov	r0, r4
    48fc:	f002 fc4a 	bl	7194 <bt_conn_unref>
    4900:	bd10      	pop	{r4, pc}
	update_conn_param(conn);
    4902:	4620      	mov	r0, r4
    4904:	f7ff ffd2 	bl	48ac <update_conn_param>
    4908:	e7f7      	b.n	48fa <le_data_len_change+0x2e>
	...

0000490c <le_data_len_change>:
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
}

static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
    490c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    490e:	4b12      	ldr	r3, [pc, #72]	; (4958 <le_data_len_change+0x4c>)
    4910:	e9d3 4500 	ldrd	r4, r5, [r3]
    4914:	2400      	movs	r4, #0
    4916:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    491a:	ea54 0305 	orrs.w	r3, r4, r5
    491e:	d008      	beq.n	4932 <le_data_len_change+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    4920:	4b0e      	ldr	r3, [pc, #56]	; (495c <le_data_len_change+0x50>)
    4922:	e9d3 4500 	ldrd	r4, r5, [r3]
    4926:	f004 0440 	and.w	r4, r4, #64	; 0x40
    492a:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    492c:	ea54 0305 	orrs.w	r3, r4, r5
    4930:	d100      	bne.n	4934 <le_data_len_change+0x28>
    4932:	bd38      	pop	{r3, r4, r5, pc}
    4934:	4613      	mov	r3, r2
    4936:	460d      	mov	r5, r1
    4938:	4604      	mov	r4, r0
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    493a:	220a      	movs	r2, #10
    493c:	2107      	movs	r1, #7
    493e:	4618      	mov	r0, r3
    4940:	f008 fcf0 	bl	d324 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    4944:	8005      	strh	r5, [r0, #0]
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
    4946:	8923      	ldrh	r3, [r4, #8]
	sep->max_tx_octets =
    4948:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
    494a:	8963      	ldrh	r3, [r4, #10]
	sep->max_tx_time =
    494c:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
    494e:	88a3      	ldrh	r3, [r4, #4]
	sep->max_rx_octets =
    4950:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_time;
    4952:	88e3      	ldrh	r3, [r4, #6]
	sep->max_rx_time =
    4954:	8103      	strh	r3, [r0, #8]
    4956:	e7ec      	b.n	4932 <le_data_len_change+0x26>
    4958:	2000bc60 	.word	0x2000bc60
    495c:	2000bc68 	.word	0x2000bc68

00004960 <le_conn_update_complete>:
{
    4960:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    4962:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    4964:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    4968:	f002 fb90 	bl	708c <bt_conn_lookup_handle>
	if (!conn) {
    496c:	b128      	cbz	r0, 497a <le_conn_update_complete+0x1a>
    496e:	4605      	mov	r5, r0
	if (!evt->status) {
    4970:	7823      	ldrb	r3, [r4, #0]
    4972:	b11b      	cbz	r3, 497c <le_conn_update_complete+0x1c>
	bt_conn_unref(conn);
    4974:	4628      	mov	r0, r5
    4976:	f002 fc0d 	bl	7194 <bt_conn_unref>
    497a:	bd38      	pop	{r3, r4, r5, pc}
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    497c:	f8b4 3003 	ldrh.w	r3, [r4, #3]
    4980:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    4984:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    4988:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    498c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    4990:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    4994:	f002 f912 	bl	6bbc <notify_le_param_updated>
    4998:	e7ec      	b.n	4974 <le_conn_update_complete+0x14>
	...

0000499c <le_conn_update_complete>:
{
    499c:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    499e:	4b14      	ldr	r3, [pc, #80]	; (49f0 <le_conn_update_complete+0x54>)
    49a0:	e9d3 4500 	ldrd	r4, r5, [r3]
    49a4:	2400      	movs	r4, #0
    49a6:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    49aa:	ea54 0305 	orrs.w	r3, r4, r5
    49ae:	d008      	beq.n	49c2 <le_conn_update_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    49b0:	4b10      	ldr	r3, [pc, #64]	; (49f4 <le_conn_update_complete+0x58>)
    49b2:	e9d3 4500 	ldrd	r4, r5, [r3]
    49b6:	f004 0404 	and.w	r4, r4, #4
    49ba:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    49bc:	ea54 0305 	orrs.w	r3, r4, r5
    49c0:	d100      	bne.n	49c4 <le_conn_update_complete+0x28>
    49c2:	bd38      	pop	{r3, r4, r5, pc}
    49c4:	4613      	mov	r3, r2
    49c6:	460d      	mov	r5, r1
    49c8:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    49ca:	2209      	movs	r2, #9
    49cc:	2103      	movs	r1, #3
    49ce:	4618      	mov	r0, r3
    49d0:	f008 fca8 	bl	d324 <meta_evt>
	sep->status = radio_cu->status;
    49d4:	78e3      	ldrb	r3, [r4, #3]
    49d6:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    49d8:	f8a0 5001 	strh.w	r5, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    49dc:	88a3      	ldrh	r3, [r4, #4]
    49de:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    49e2:	88e3      	ldrh	r3, [r4, #6]
    49e4:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    49e8:	8923      	ldrh	r3, [r4, #8]
    49ea:	f8a0 3007 	strh.w	r3, [r0, #7]
    49ee:	e7e8      	b.n	49c2 <le_conn_update_complete+0x26>
    49f0:	2000bc60 	.word	0x2000bc60
    49f4:	2000bc68 	.word	0x2000bc68

000049f8 <hci_cmd_done>:
{
    49f8:	b538      	push	{r3, r4, r5, lr}
    49fa:	460d      	mov	r5, r1
    49fc:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    49fe:	7990      	ldrb	r0, [r2, #6]
    4a00:	f016 f826 	bl	1aa50 <net_buf_pool_get>
    4a04:	4b0b      	ldr	r3, [pc, #44]	; (4a34 <hci_cmd_done+0x3c>)
    4a06:	4283      	cmp	r3, r0
    4a08:	d000      	beq.n	4a0c <hci_cmd_done+0x14>
    4a0a:	bd38      	pop	{r3, r4, r5, pc}
    4a0c:	f104 0210 	add.w	r2, r4, #16
    4a10:	89e3      	ldrh	r3, [r4, #14]
    4a12:	4413      	add	r3, r2
    4a14:	3303      	adds	r3, #3
    4a16:	f023 0303 	bic.w	r3, r3, #3
	if (cmd(buf)->sync) {
    4a1a:	6859      	ldr	r1, [r3, #4]
    4a1c:	2900      	cmp	r1, #0
    4a1e:	d0f4      	beq.n	4a0a <hci_cmd_done+0x12>
		cmd(buf)->status = status;
    4a20:	705d      	strb	r5, [r3, #1]
    4a22:	89e3      	ldrh	r3, [r4, #14]
    4a24:	441a      	add	r2, r3
    4a26:	3203      	adds	r2, #3
    4a28:	f022 0203 	bic.w	r2, r2, #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4a2c:	6850      	ldr	r0, [r2, #4]
    4a2e:	f024 fbd4 	bl	291da <_impl_k_sem_give>
    4a32:	e7ea      	b.n	4a0a <hci_cmd_done+0x12>
    4a34:	2000d214 	.word	0x2000d214

00004a38 <hci_cmd_complete>:
{
    4a38:	b570      	push	{r4, r5, r6, lr}
    4a3a:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    4a3c:	f850 3f08 	ldr.w	r3, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    4a40:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    4a44:	781d      	ldrb	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    4a46:	2103      	movs	r1, #3
    4a48:	f016 f915 	bl	1ac76 <net_buf_simple_pull>
	status = buf->data[0];
    4a4c:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    4a4e:	4622      	mov	r2, r4
    4a50:	7819      	ldrb	r1, [r3, #0]
    4a52:	4630      	mov	r0, r6
    4a54:	f7ff ffd0 	bl	49f8 <hci_cmd_done>
	if (ncmd) {
    4a58:	b905      	cbnz	r5, 4a5c <hci_cmd_complete+0x24>
    4a5a:	bd70      	pop	{r4, r5, r6, pc}
    4a5c:	4801      	ldr	r0, [pc, #4]	; (4a64 <hci_cmd_complete+0x2c>)
    4a5e:	f024 fbbc 	bl	291da <_impl_k_sem_give>
}
    4a62:	e7fa      	b.n	4a5a <hci_cmd_complete+0x22>
    4a64:	2000ba18 	.word	0x2000ba18

00004a68 <hci_cmd_status>:
{
    4a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a6a:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    4a6c:	f850 4f08 	ldr.w	r4, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    4a70:	8867      	ldrh	r7, [r4, #2]
	u8_t ncmd = evt->ncmd;
    4a72:	7866      	ldrb	r6, [r4, #1]
	net_buf_pull(buf, sizeof(*evt));
    4a74:	2104      	movs	r1, #4
    4a76:	f016 f8fe 	bl	1ac76 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    4a7a:	462a      	mov	r2, r5
    4a7c:	7821      	ldrb	r1, [r4, #0]
    4a7e:	4638      	mov	r0, r7
    4a80:	f7ff ffba 	bl	49f8 <hci_cmd_done>
	if (ncmd) {
    4a84:	b906      	cbnz	r6, 4a88 <hci_cmd_status+0x20>
    4a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a88:	4801      	ldr	r0, [pc, #4]	; (4a90 <hci_cmd_status+0x28>)
    4a8a:	f024 fba6 	bl	291da <_impl_k_sem_give>
}
    4a8e:	e7fa      	b.n	4a86 <hci_cmd_status+0x1e>
    4a90:	2000ba18 	.word	0x2000ba18

00004a94 <hci_num_completed_packets>:
{
    4a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    4a98:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
    4a9c:	2700      	movs	r7, #0
    4a9e:	e026      	b.n	4aee <hci_num_completed_packets+0x5a>
    4aa0:	f386 8811 	msr	BASEPRI, r6
			continue;
    4aa4:	e022      	b.n	4aec <hci_num_completed_packets+0x58>
    4aa6:	f383 8811 	msr	BASEPRI, r3
			if (!node) {
    4aaa:	b1e1      	cbz	r1, 4ae6 <hci_num_completed_packets+0x52>
			k_fifo_put(&conn->tx_notify, node);
    4aac:	f104 001c 	add.w	r0, r4, #28
    4ab0:	f023 fffc 	bl	28aac <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    4ab4:	4620      	mov	r0, r4
    4ab6:	f002 f85f 	bl	6b78 <bt_conn_get_pkts>
    4aba:	f024 fb8e 	bl	291da <_impl_k_sem_give>
		while (count--) {
    4abe:	4635      	mov	r5, r6
    4ac0:	1e6b      	subs	r3, r5, #1
    4ac2:	b29e      	uxth	r6, r3
    4ac4:	b17d      	cbz	r5, 4ae6 <hci_num_completed_packets+0x52>
	__asm__ volatile(
    4ac6:	f04f 0220 	mov.w	r2, #32
    4aca:	f3ef 8311 	mrs	r3, BASEPRI
    4ace:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    4ad2:	6961      	ldr	r1, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    4ad4:	2900      	cmp	r1, #0
    4ad6:	d0e6      	beq.n	4aa6 <hci_num_completed_packets+0x12>
	list->head = node->next;
    4ad8:	680a      	ldr	r2, [r1, #0]
    4ada:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    4adc:	69a0      	ldr	r0, [r4, #24]
    4ade:	4281      	cmp	r1, r0
    4ae0:	d1e1      	bne.n	4aa6 <hci_num_completed_packets+0x12>
		list->tail = list->head;
    4ae2:	61a2      	str	r2, [r4, #24]
    4ae4:	e7df      	b.n	4aa6 <hci_num_completed_packets+0x12>
		bt_conn_unref(conn);
    4ae6:	4620      	mov	r0, r4
    4ae8:	f002 fb54 	bl	7194 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
    4aec:	3701      	adds	r7, #1
    4aee:	f898 3000 	ldrb.w	r3, [r8]
    4af2:	429f      	cmp	r7, r3
    4af4:	da13      	bge.n	4b1e <hci_num_completed_packets+0x8a>
		handle = sys_le16_to_cpu(evt->h[i].handle);
    4af6:	eb08 0387 	add.w	r3, r8, r7, lsl #2
    4afa:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    4afe:	f8b3 5003 	ldrh.w	r5, [r3, #3]
    4b02:	f04f 0320 	mov.w	r3, #32
    4b06:	f3ef 8611 	mrs	r6, BASEPRI
    4b0a:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    4b0e:	f002 fabd 	bl	708c <bt_conn_lookup_handle>
		if (!conn) {
    4b12:	4604      	mov	r4, r0
    4b14:	2800      	cmp	r0, #0
    4b16:	d0c3      	beq.n	4aa0 <hci_num_completed_packets+0xc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4b18:	f386 8811 	msr	BASEPRI, r6
    4b1c:	e7d0      	b.n	4ac0 <hci_num_completed_packets+0x2c>
}
    4b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00004b24 <bt_hci_cmd_create>:
{
    4b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b26:	4607      	mov	r7, r0
    4b28:	460d      	mov	r5, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    4b2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4b2e:	4812      	ldr	r0, [pc, #72]	; (4b78 <bt_hci_cmd_create+0x54>)
    4b30:	f015 ff9a 	bl	1aa68 <net_buf_alloc>
    4b34:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4b36:	2100      	movs	r1, #0
    4b38:	f015 fff1 	bl	1ab1e <net_buf_reserve>
    4b3c:	f104 0310 	add.w	r3, r4, #16
    4b40:	89e2      	ldrh	r2, [r4, #14]
    4b42:	441a      	add	r2, r3
    4b44:	3203      	adds	r2, #3
    4b46:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->type = BT_BUF_CMD;
    4b4a:	2100      	movs	r1, #0
    4b4c:	7011      	strb	r1, [r2, #0]
    4b4e:	89e2      	ldrh	r2, [r4, #14]
    4b50:	441a      	add	r2, r3
    4b52:	3203      	adds	r2, #3
    4b54:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->opcode = opcode;
    4b58:	8057      	strh	r7, [r2, #2]
    4b5a:	89e2      	ldrh	r2, [r4, #14]
    4b5c:	4413      	add	r3, r2
    4b5e:	3303      	adds	r3, #3
    4b60:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = NULL;
    4b64:	6059      	str	r1, [r3, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    4b66:	2103      	movs	r1, #3
    4b68:	f104 0008 	add.w	r0, r4, #8
    4b6c:	f016 f836 	bl	1abdc <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    4b70:	8007      	strh	r7, [r0, #0]
	hdr->param_len = param_len;
    4b72:	7085      	strb	r5, [r0, #2]
}
    4b74:	4620      	mov	r0, r4
    4b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4b78:	2000d214 	.word	0x2000d214

00004b7c <bt_hci_cmd_send_sync>:
{
    4b7c:	b570      	push	{r4, r5, r6, lr}
    4b7e:	b086      	sub	sp, #24
    4b80:	4616      	mov	r6, r2
	if (!buf) {
    4b82:	460d      	mov	r5, r1
    4b84:	b329      	cbz	r1, 4bd2 <bt_hci_cmd_send_sync+0x56>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    4b86:	2201      	movs	r2, #1
    4b88:	2100      	movs	r1, #0
    4b8a:	4668      	mov	r0, sp
    4b8c:	f024 fb1c 	bl	291c8 <_impl_k_sem_init>
    4b90:	f105 0410 	add.w	r4, r5, #16
    4b94:	89eb      	ldrh	r3, [r5, #14]
    4b96:	4423      	add	r3, r4
    4b98:	3303      	adds	r3, #3
    4b9a:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = &sync_sem;
    4b9e:	f8c3 d004 	str.w	sp, [r3, #4]
	net_buf_ref(buf);
    4ba2:	4628      	mov	r0, r5
    4ba4:	f015 ffea 	bl	1ab7c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    4ba8:	4629      	mov	r1, r5
    4baa:	4813      	ldr	r0, [pc, #76]	; (4bf8 <bt_hci_cmd_send_sync+0x7c>)
    4bac:	f015 ffbc 	bl	1ab28 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4bb0:	f242 7110 	movw	r1, #10000	; 0x2710
    4bb4:	4668      	mov	r0, sp
    4bb6:	f024 fb23 	bl	29200 <_impl_k_sem_take>
    4bba:	89eb      	ldrh	r3, [r5, #14]
    4bbc:	441c      	add	r4, r3
    4bbe:	3403      	adds	r4, #3
    4bc0:	f024 0403 	bic.w	r4, r4, #3
	if (cmd(buf)->status) {
    4bc4:	7863      	ldrb	r3, [r4, #1]
    4bc6:	b963      	cbnz	r3, 4be2 <bt_hci_cmd_send_sync+0x66>
		if (rsp) {
    4bc8:	b18e      	cbz	r6, 4bee <bt_hci_cmd_send_sync+0x72>
			*rsp = buf;
    4bca:	6035      	str	r5, [r6, #0]
		err = 0;
    4bcc:	2000      	movs	r0, #0
}
    4bce:	b006      	add	sp, #24
    4bd0:	bd70      	pop	{r4, r5, r6, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    4bd2:	f7ff ffa7 	bl	4b24 <bt_hci_cmd_create>
		if (!buf) {
    4bd6:	4605      	mov	r5, r0
    4bd8:	2800      	cmp	r0, #0
    4bda:	d1d4      	bne.n	4b86 <bt_hci_cmd_send_sync+0xa>
			return -ENOBUFS;
    4bdc:	f06f 0068 	mvn.w	r0, #104	; 0x68
    4be0:	e7f5      	b.n	4bce <bt_hci_cmd_send_sync+0x52>
		net_buf_unref(buf);
    4be2:	4628      	mov	r0, r5
    4be4:	f015 ffae 	bl	1ab44 <net_buf_unref>
		err = -EIO;
    4be8:	f06f 0004 	mvn.w	r0, #4
    4bec:	e7ef      	b.n	4bce <bt_hci_cmd_send_sync+0x52>
			net_buf_unref(buf);
    4bee:	4628      	mov	r0, r5
    4bf0:	f015 ffa8 	bl	1ab44 <net_buf_unref>
		err = 0;
    4bf4:	2000      	movs	r0, #0
    4bf6:	e7ea      	b.n	4bce <bt_hci_cmd_send_sync+0x52>
    4bf8:	2000ba44 	.word	0x2000ba44

00004bfc <common_init>:
{
    4bfc:	b510      	push	{r4, lr}
    4bfe:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    4c00:	aa01      	add	r2, sp, #4
    4c02:	2100      	movs	r1, #0
    4c04:	f640 4003 	movw	r0, #3075	; 0xc03
    4c08:	f7ff ffb8 	bl	4b7c <bt_hci_cmd_send_sync>
	if (err) {
    4c0c:	4604      	mov	r4, r0
    4c0e:	b110      	cbz	r0, 4c16 <common_init+0x1a>
}
    4c10:	4620      	mov	r0, r4
    4c12:	b002      	add	sp, #8
    4c14:	bd10      	pop	{r4, pc}
	hci_reset_complete(rsp);
    4c16:	9801      	ldr	r0, [sp, #4]
    4c18:	f7ff fce6 	bl	45e8 <hci_reset_complete>
	net_buf_unref(rsp);
    4c1c:	ac02      	add	r4, sp, #8
    4c1e:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4c22:	f015 ff8f 	bl	1ab44 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    4c26:	4622      	mov	r2, r4
    4c28:	2100      	movs	r1, #0
    4c2a:	f241 0003 	movw	r0, #4099	; 0x1003
    4c2e:	f7ff ffa5 	bl	4b7c <bt_hci_cmd_send_sync>
	if (err) {
    4c32:	4604      	mov	r4, r0
    4c34:	2800      	cmp	r0, #0
    4c36:	d1eb      	bne.n	4c10 <common_init+0x14>
	read_local_features_complete(rsp);
    4c38:	9801      	ldr	r0, [sp, #4]
    4c3a:	f7ff fced 	bl	4618 <read_local_features_complete>
	net_buf_unref(rsp);
    4c3e:	ac02      	add	r4, sp, #8
    4c40:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4c44:	f015 ff7e 	bl	1ab44 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    4c48:	4622      	mov	r2, r4
    4c4a:	2100      	movs	r1, #0
    4c4c:	f241 0001 	movw	r0, #4097	; 0x1001
    4c50:	f7ff ff94 	bl	4b7c <bt_hci_cmd_send_sync>
	if (err) {
    4c54:	4604      	mov	r4, r0
    4c56:	2800      	cmp	r0, #0
    4c58:	d1da      	bne.n	4c10 <common_init+0x14>
	read_local_ver_complete(rsp);
    4c5a:	9801      	ldr	r0, [sp, #4]
    4c5c:	f7ff fc72 	bl	4544 <read_local_ver_complete>
	net_buf_unref(rsp);
    4c60:	ac02      	add	r4, sp, #8
    4c62:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4c66:	f015 ff6d 	bl	1ab44 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    4c6a:	4622      	mov	r2, r4
    4c6c:	2100      	movs	r1, #0
    4c6e:	f241 0009 	movw	r0, #4105	; 0x1009
    4c72:	f7ff ff83 	bl	4b7c <bt_hci_cmd_send_sync>
	if (err) {
    4c76:	4604      	mov	r4, r0
    4c78:	2800      	cmp	r0, #0
    4c7a:	d1c9      	bne.n	4c10 <common_init+0x14>
	read_bdaddr_complete(rsp);
    4c7c:	9801      	ldr	r0, [sp, #4]
    4c7e:	f7ff fcd5 	bl	462c <read_bdaddr_complete>
	net_buf_unref(rsp);
    4c82:	ac02      	add	r4, sp, #8
    4c84:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4c88:	f015 ff5c 	bl	1ab44 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    4c8c:	4622      	mov	r2, r4
    4c8e:	2100      	movs	r1, #0
    4c90:	f241 0002 	movw	r0, #4098	; 0x1002
    4c94:	f7ff ff72 	bl	4b7c <bt_hci_cmd_send_sync>
	if (err) {
    4c98:	4604      	mov	r4, r0
    4c9a:	2800      	cmp	r0, #0
    4c9c:	d1b8      	bne.n	4c10 <common_init+0x14>
	read_supported_commands_complete(rsp);
    4c9e:	9801      	ldr	r0, [sp, #4]
    4ca0:	f7ff fcd2 	bl	4648 <read_supported_commands_complete>
	net_buf_unref(rsp);
    4ca4:	9801      	ldr	r0, [sp, #4]
    4ca6:	f015 ff4d 	bl	1ab44 <net_buf_unref>
	return 0;
    4caa:	e7b1      	b.n	4c10 <common_init+0x14>

00004cac <common_init>:
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    4cac:	b538      	push	{r3, r4, r5, lr}
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    4cae:	4b3a      	ldr	r3, [pc, #232]	; (4d98 <common_init+0xec>)
    4cb0:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
    4cb4:	2a00      	cmp	r2, #0
    4cb6:	d15e      	bne.n	4d76 <common_init+0xca>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
			 _radio.connection_count,
			 &_radio.conn_free);
	} else {
		_radio.conn_free = NULL;
    4cb8:	2200      	movs	r2, #0
    4cba:	4b37      	ldr	r3, [pc, #220]	; (4d98 <common_init+0xec>)
    4cbc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}

	/* initialise rx pool. */
	mem_init(_radio.pkt_rx_data_pool,
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
    4cc0:	4c35      	ldr	r4, [pc, #212]	; (4d98 <common_init+0xec>)
	mem_init(_radio.pkt_rx_data_pool,
    4cc2:	f504 7396 	add.w	r3, r4, #300	; 0x12c
    4cc6:	f894 2136 	ldrb.w	r2, [r4, #310]	; 0x136
    4cca:	f8b4 1134 	ldrh.w	r1, [r4, #308]	; 0x134
    4cce:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    4cd2:	f00a fa47 	bl	f164 <mem_init>
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
		 (_radio.packet_rx_count + _radio.connection_count),
    4cd6:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    4cda:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    4cde:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    4ce2:	462b      	mov	r3, r5
    4ce4:	440a      	add	r2, r1
    4ce6:	2108      	movs	r1, #8
    4ce8:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    4cec:	f00a fa3a 	bl	f164 <mem_init>
		 &_radio.link_rx_free);

	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    4cf0:	f504 73ac 	add.w	r3, r4, #344	; 0x158
    4cf4:	2202      	movs	r2, #2
    4cf6:	2124      	movs	r1, #36	; 0x24
    4cf8:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    4cfc:	f00a fa32 	bl	f164 <mem_init>
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    4d00:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    4d04:	3a01      	subs	r2, #1
    4d06:	f504 73b0 	add.w	r3, r4, #352	; 0x160
    4d0a:	b292      	uxth	r2, r2
    4d0c:	f8b4 1164 	ldrh.w	r1, [r4, #356]	; 0x164
    4d10:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    4d14:	f00a fa26 	bl	f164 <mem_init>

	/* initialise the event-cum-data memq */
	link = mem_acquire(&_radio.link_rx_free);
    4d18:	4628      	mov	r0, r5
    4d1a:	f00a fa48 	bl	f1ae <mem_acquire>
	LL_ASSERT(link);
    4d1e:	b3a0      	cbz	r0, 4d8a <common_init+0xde>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    4d20:	4c1d      	ldr	r4, [pc, #116]	; (4d98 <common_init+0xec>)
    4d22:	f504 72a6 	add.w	r2, r4, #332	; 0x14c
    4d26:	f504 71a4 	add.w	r1, r4, #328	; 0x148
    4d2a:	f00a faa5 	bl	f278 <memq_init>

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;
    4d2e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    4d32:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    4d36:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    4d3a:	20ff      	movs	r0, #255	; 0xff
    4d3c:	f884 0116 	strb.w	r0, [r4, #278]	; 0x116
	_radio.data_chan_map[1] = 0xFF;
    4d40:	f884 0117 	strb.w	r0, [r4, #279]	; 0x117
	_radio.data_chan_map[2] = 0xFF;
    4d44:	f884 0118 	strb.w	r0, [r4, #280]	; 0x118
	_radio.data_chan_map[3] = 0xFF;
    4d48:	f884 0119 	strb.w	r0, [r4, #281]	; 0x119
	_radio.data_chan_map[4] = 0x1F;
    4d4c:	231f      	movs	r3, #31
    4d4e:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_count = 37;
    4d52:	2325      	movs	r3, #37	; 0x25
    4d54:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    4d58:	231b      	movs	r3, #27
    4d5a:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    4d5e:	f44f 73a4 	mov.w	r3, #328	; 0x148
    4d62:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
	/* Initialize the PHY defaults */
	_radio.default_phy_tx = BIT(0);
	_radio.default_phy_rx = BIT(0);

#if defined(CONFIG_BT_CTLR_PHY_2M)
	_radio.default_phy_tx |= BIT(1);
    4d66:	2303      	movs	r3, #3
    4d68:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_phy_rx |= BIT(1);
    4d6c:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_rx |= BIT(2);
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#endif /* CONFIG_BT_CTLR_PHY */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
    4d70:	f00c ff5a 	bl	11c28 <packet_rx_allocate>
    4d74:	bd38      	pop	{r3, r4, r5, pc}
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    4d76:	4618      	mov	r0, r3
    4d78:	f503 7384 	add.w	r3, r3, #264	; 0x108
    4d7c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    4d80:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    4d84:	f00a f9ee 	bl	f164 <mem_init>
    4d88:	e79a      	b.n	4cc0 <common_init+0x14>
	LL_ASSERT(link);
    4d8a:	4040      	eors	r0, r0
    4d8c:	f380 8811 	msr	BASEPRI, r0
    4d90:	f04f 0004 	mov.w	r0, #4
    4d94:	df02      	svc	2
    4d96:	bf00      	nop
    4d98:	20000fec 	.word	0x20000fec

00004d9c <le_set_event_mask>:
{
    4d9c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    4d9e:	2108      	movs	r1, #8
    4da0:	f242 0001 	movw	r0, #8193	; 0x2001
    4da4:	f7ff febe 	bl	4b24 <bt_hci_cmd_create>
	if (!buf) {
    4da8:	2800      	cmp	r0, #0
    4daa:	d042      	beq.n	4e32 <le_set_event_mask+0x96>
    4dac:	4604      	mov	r4, r0
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    4dae:	2108      	movs	r1, #8
    4db0:	4408      	add	r0, r1
    4db2:	f015 ff13 	bl	1abdc <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    4db6:	4b20      	ldr	r3, [pc, #128]	; (4e38 <le_set_event_mask+0x9c>)
    4db8:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
    4dbc:	f011 0f02 	tst.w	r1, #2
    4dc0:	d131      	bne.n	4e26 <le_set_event_mask+0x8a>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    4dc2:	220f      	movs	r2, #15
    4dc4:	2300      	movs	r3, #0
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    4dc6:	f011 0f20 	tst.w	r1, #32
    4dca:	d001      	beq.n	4dd0 <le_set_event_mask+0x34>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    4dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    4dd0:	4d19      	ldr	r5, [pc, #100]	; (4e38 <le_set_event_mask+0x9c>)
    4dd2:	f895 5079 	ldrb.w	r5, [r5, #121]	; 0x79
    4dd6:	f015 0f09 	tst.w	r5, #9
    4dda:	d001      	beq.n	4de0 <le_set_event_mask+0x44>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    4ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    4de0:	f011 0f01 	tst.w	r1, #1
    4de4:	d001      	beq.n	4dea <le_set_event_mask+0x4e>
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    4de6:	f042 0210 	orr.w	r2, r2, #16
	if ((bt_dev.supported_commands[34] & 0x02) &&
    4dea:	4913      	ldr	r1, [pc, #76]	; (4e38 <le_set_event_mask+0x9c>)
    4dec:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    4df0:	f001 0106 	and.w	r1, r1, #6
    4df4:	2906      	cmp	r1, #6
    4df6:	d019      	beq.n	4e2c <le_set_event_mask+0x90>
	dst[0] = val;
    4df8:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    4dfa:	f3c2 2107 	ubfx	r1, r2, #8, #8
    4dfe:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    4e00:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    4e02:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    4e04:	0a12      	lsrs	r2, r2, #8
    4e06:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    4e08:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    4e0a:	f3c3 2207 	ubfx	r2, r3, #8, #8
    4e0e:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    4e10:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    4e12:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    4e14:	0a1b      	lsrs	r3, r3, #8
    4e16:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    4e18:	2200      	movs	r2, #0
    4e1a:	4621      	mov	r1, r4
    4e1c:	f242 0001 	movw	r0, #8193	; 0x2001
    4e20:	f7ff feac 	bl	4b7c <bt_hci_cmd_send_sync>
    4e24:	bd38      	pop	{r3, r4, r5, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    4e26:	222f      	movs	r2, #47	; 0x2f
    4e28:	2300      	movs	r3, #0
    4e2a:	e7cc      	b.n	4dc6 <le_set_event_mask+0x2a>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    4e2c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
    4e30:	e7e2      	b.n	4df8 <le_set_event_mask+0x5c>
		return -ENOBUFS;
    4e32:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    4e36:	bd38      	pop	{r3, r4, r5, pc}
    4e38:	2000b970 	.word	0x2000b970

00004e3c <le_set_event_mask>:
{
    4e3c:	b570      	push	{r4, r5, r6, lr}
    4e3e:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    4e40:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    4e42:	79da      	ldrb	r2, [r3, #7]
    4e44:	7999      	ldrb	r1, [r3, #6]
    4e46:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    4e4a:	7958      	ldrb	r0, [r3, #5]
    4e4c:	791a      	ldrb	r2, [r3, #4]
    4e4e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4e52:	2400      	movs	r4, #0
    4e54:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    4e58:	78d9      	ldrb	r1, [r3, #3]
    4e5a:	789a      	ldrb	r2, [r3, #2]
    4e5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4e60:	7859      	ldrb	r1, [r3, #1]
    4e62:	781b      	ldrb	r3, [r3, #0]
    4e64:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    4e68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4e6c:	ea44 0003 	orr.w	r0, r4, r3
    4e70:	4629      	mov	r1, r5
	le_event_mask = sys_get_le64(cmd->events);
    4e72:	4b04      	ldr	r3, [pc, #16]	; (4e84 <le_set_event_mask+0x48>)
    4e74:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    4e78:	2101      	movs	r1, #1
    4e7a:	4630      	mov	r0, r6
    4e7c:	f008 f9b8 	bl	d1f0 <cmd_complete>
	ccst->status = 0x00;
    4e80:	7004      	strb	r4, [r0, #0]
    4e82:	bd70      	pop	{r4, r5, r6, pc}
    4e84:	2000bc68 	.word	0x2000bc68

00004e88 <le_init>:
	if (!BT_FEAT_LE(bt_dev.features)) {
    4e88:	4b4c      	ldr	r3, [pc, #304]	; (4fbc <le_init+0x134>)
    4e8a:	7e9b      	ldrb	r3, [r3, #26]
    4e8c:	f013 0f40 	tst.w	r3, #64	; 0x40
    4e90:	f000 808c 	beq.w	4fac <le_init+0x124>
{
    4e94:	b570      	push	{r4, r5, r6, lr}
    4e96:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    4e98:	aa01      	add	r2, sp, #4
    4e9a:	2100      	movs	r1, #0
    4e9c:	f242 0003 	movw	r0, #8195	; 0x2003
    4ea0:	f7ff fe6c 	bl	4b7c <bt_hci_cmd_send_sync>
	if (err) {
    4ea4:	4603      	mov	r3, r0
    4ea6:	b110      	cbz	r0, 4eae <le_init+0x26>
}
    4ea8:	4618      	mov	r0, r3
    4eaa:	b002      	add	sp, #8
    4eac:	bd70      	pop	{r4, r5, r6, pc}
	read_le_features_complete(rsp);
    4eae:	9801      	ldr	r0, [sp, #4]
    4eb0:	f7ff fbd4 	bl	465c <read_le_features_complete>
	net_buf_unref(rsp);
    4eb4:	ac02      	add	r4, sp, #8
    4eb6:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4eba:	f015 fe43 	bl	1ab44 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    4ebe:	4622      	mov	r2, r4
    4ec0:	2100      	movs	r1, #0
    4ec2:	f242 0002 	movw	r0, #8194	; 0x2002
    4ec6:	f7ff fe59 	bl	4b7c <bt_hci_cmd_send_sync>
	if (err) {
    4eca:	4603      	mov	r3, r0
    4ecc:	2800      	cmp	r0, #0
    4ece:	d1eb      	bne.n	4ea8 <le_init+0x20>
	le_read_buffer_size_complete(rsp);
    4ed0:	9801      	ldr	r0, [sp, #4]
    4ed2:	f7ff fbcd 	bl	4670 <le_read_buffer_size_complete>
	net_buf_unref(rsp);
    4ed6:	9801      	ldr	r0, [sp, #4]
    4ed8:	f015 fe34 	bl	1ab44 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4edc:	4b37      	ldr	r3, [pc, #220]	; (4fbc <le_init+0x134>)
    4ede:	7e9b      	ldrb	r3, [r3, #26]
    4ee0:	f013 0f20 	tst.w	r3, #32
    4ee4:	d037      	beq.n	4f56 <le_init+0xce>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    4ee6:	4b35      	ldr	r3, [pc, #212]	; (4fbc <le_init+0x134>)
    4ee8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    4eec:	f013 0f08 	tst.w	r3, #8
    4ef0:	d149      	bne.n	4f86 <le_init+0xfe>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
    4ef2:	4b32      	ldr	r3, [pc, #200]	; (4fbc <le_init+0x134>)
    4ef4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    4ef8:	f013 0f20 	tst.w	r3, #32
    4efc:	d027      	beq.n	4f4e <le_init+0xc6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    4efe:	466a      	mov	r2, sp
    4f00:	2100      	movs	r1, #0
    4f02:	f242 002f 	movw	r0, #8239	; 0x202f
    4f06:	f7ff fe39 	bl	4b7c <bt_hci_cmd_send_sync>
		if (err) {
    4f0a:	4603      	mov	r3, r0
    4f0c:	2800      	cmp	r0, #0
    4f0e:	d1cb      	bne.n	4ea8 <le_init+0x20>
		rp = (void *)rsp->data;
    4f10:	9800      	ldr	r0, [sp, #0]
    4f12:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    4f14:	f8b3 6001 	ldrh.w	r6, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    4f18:	f8b3 5003 	ldrh.w	r5, [r3, #3]
		net_buf_unref(rsp);
    4f1c:	f015 fe12 	bl	1ab44 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    4f20:	2104      	movs	r1, #4
    4f22:	f242 0024 	movw	r0, #8228	; 0x2024
    4f26:	f7ff fdfd 	bl	4b24 <bt_hci_cmd_create>
		if (!buf) {
    4f2a:	4604      	mov	r4, r0
    4f2c:	2800      	cmp	r0, #0
    4f2e:	d03a      	beq.n	4fa6 <le_init+0x11e>
		cp = net_buf_add(buf, sizeof(*cp));
    4f30:	2104      	movs	r1, #4
    4f32:	3008      	adds	r0, #8
    4f34:	f015 fe52 	bl	1abdc <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    4f38:	8006      	strh	r6, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    4f3a:	8045      	strh	r5, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    4f3c:	2200      	movs	r2, #0
    4f3e:	4621      	mov	r1, r4
    4f40:	f242 0024 	movw	r0, #8228	; 0x2024
    4f44:	f7ff fe1a 	bl	4b7c <bt_hci_cmd_send_sync>
		if (err) {
    4f48:	4603      	mov	r3, r0
    4f4a:	2800      	cmp	r0, #0
    4f4c:	d1ac      	bne.n	4ea8 <le_init+0x20>
	return  le_set_event_mask();
    4f4e:	f7ff ff25 	bl	4d9c <le_set_event_mask>
    4f52:	4603      	mov	r3, r0
    4f54:	e7a8      	b.n	4ea8 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    4f56:	2102      	movs	r1, #2
    4f58:	f640 406d 	movw	r0, #3181	; 0xc6d
    4f5c:	f7ff fde2 	bl	4b24 <bt_hci_cmd_create>
		if (!buf) {
    4f60:	4604      	mov	r4, r0
    4f62:	b338      	cbz	r0, 4fb4 <le_init+0x12c>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    4f64:	2102      	movs	r1, #2
    4f66:	3008      	adds	r0, #8
    4f68:	f015 fe38 	bl	1abdc <net_buf_simple_add>
		cp_le->le = 0x01;
    4f6c:	2301      	movs	r3, #1
    4f6e:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    4f70:	2200      	movs	r2, #0
    4f72:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    4f74:	4621      	mov	r1, r4
    4f76:	f640 406d 	movw	r0, #3181	; 0xc6d
    4f7a:	f7ff fdff 	bl	4b7c <bt_hci_cmd_send_sync>
		if (err) {
    4f7e:	4603      	mov	r3, r0
    4f80:	2800      	cmp	r0, #0
    4f82:	d0b0      	beq.n	4ee6 <le_init+0x5e>
    4f84:	e790      	b.n	4ea8 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    4f86:	aa01      	add	r2, sp, #4
    4f88:	2100      	movs	r1, #0
    4f8a:	f242 001c 	movw	r0, #8220	; 0x201c
    4f8e:	f7ff fdf5 	bl	4b7c <bt_hci_cmd_send_sync>
		if (err) {
    4f92:	4603      	mov	r3, r0
    4f94:	2800      	cmp	r0, #0
    4f96:	d187      	bne.n	4ea8 <le_init+0x20>
		le_read_supp_states_complete(rsp);
    4f98:	9801      	ldr	r0, [sp, #4]
    4f9a:	f7ff fae5 	bl	4568 <le_read_supp_states_complete>
		net_buf_unref(rsp);
    4f9e:	9801      	ldr	r0, [sp, #4]
    4fa0:	f015 fdd0 	bl	1ab44 <net_buf_unref>
    4fa4:	e7a5      	b.n	4ef2 <le_init+0x6a>
			return -ENOBUFS;
    4fa6:	f06f 0368 	mvn.w	r3, #104	; 0x68
    4faa:	e77d      	b.n	4ea8 <le_init+0x20>
		return -ENODEV;
    4fac:	f06f 0312 	mvn.w	r3, #18
}
    4fb0:	4618      	mov	r0, r3
    4fb2:	4770      	bx	lr
			return -ENOBUFS;
    4fb4:	f06f 0368 	mvn.w	r3, #104	; 0x68
    4fb8:	e776      	b.n	4ea8 <le_init+0x20>
    4fba:	bf00      	nop
    4fbc:	2000b970 	.word	0x2000b970

00004fc0 <br_init>:
{
    4fc0:	b510      	push	{r4, lr}
    4fc2:	b082      	sub	sp, #8
	if (bt_dev.le.mtu) {
    4fc4:	4b0b      	ldr	r3, [pc, #44]	; (4ff4 <br_init+0x34>)
    4fc6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    4fca:	b11b      	cbz	r3, 4fd4 <br_init+0x14>
		return 0;
    4fcc:	2400      	movs	r4, #0
}
    4fce:	4620      	mov	r0, r4
    4fd0:	b002      	add	sp, #8
    4fd2:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    4fd4:	aa01      	add	r2, sp, #4
    4fd6:	2100      	movs	r1, #0
    4fd8:	f241 0005 	movw	r0, #4101	; 0x1005
    4fdc:	f7ff fdce 	bl	4b7c <bt_hci_cmd_send_sync>
	if (err) {
    4fe0:	4604      	mov	r4, r0
    4fe2:	2800      	cmp	r0, #0
    4fe4:	d1f3      	bne.n	4fce <br_init+0xe>
	read_buffer_size_complete(rsp);
    4fe6:	9801      	ldr	r0, [sp, #4]
    4fe8:	f7ff fb58 	bl	469c <read_buffer_size_complete>
	net_buf_unref(rsp);
    4fec:	9801      	ldr	r0, [sp, #4]
    4fee:	f015 fda9 	bl	1ab44 <net_buf_unref>
	return 0;
    4ff2:	e7ec      	b.n	4fce <br_init+0xe>
    4ff4:	2000b970 	.word	0x2000b970

00004ff8 <set_event_mask>:
{
    4ff8:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    4ffa:	2108      	movs	r1, #8
    4ffc:	f640 4001 	movw	r0, #3073	; 0xc01
    5000:	f7ff fd90 	bl	4b24 <bt_hci_cmd_create>
	if (!buf) {
    5004:	b348      	cbz	r0, 505a <set_event_mask+0x62>
    5006:	4604      	mov	r4, r0
	ev = net_buf_add(buf, sizeof(*ev));
    5008:	2108      	movs	r1, #8
    500a:	4408      	add	r0, r1
    500c:	f015 fde6 	bl	1abdc <net_buf_simple_add>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
    5010:	4b13      	ldr	r3, [pc, #76]	; (5060 <set_event_mask+0x68>)
    5012:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    5016:	f013 0f01 	tst.w	r3, #1
    501a:	d11b      	bne.n	5054 <set_event_mask+0x5c>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    501c:	4a11      	ldr	r2, [pc, #68]	; (5064 <set_event_mask+0x6c>)
    501e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	sys_put_le16(val, dst);
    5022:	b291      	uxth	r1, r2
	dst[0] = val;
    5024:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    5026:	0a09      	lsrs	r1, r1, #8
    5028:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    502a:	0c12      	lsrs	r2, r2, #16
    502c:	b291      	uxth	r1, r2
	dst[0] = val;
    502e:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    5030:	0a0a      	lsrs	r2, r1, #8
    5032:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
    5034:	b29a      	uxth	r2, r3
	dst[0] = val;
    5036:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    5038:	0a12      	lsrs	r2, r2, #8
    503a:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    503c:	0c1b      	lsrs	r3, r3, #16
    503e:	b29a      	uxth	r2, r3
	dst[0] = val;
    5040:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    5042:	0a13      	lsrs	r3, r2, #8
    5044:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    5046:	2200      	movs	r2, #0
    5048:	4621      	mov	r1, r4
    504a:	f640 4001 	movw	r0, #3073	; 0xc01
    504e:	f7ff fd95 	bl	4b7c <bt_hci_cmd_send_sync>
    5052:	bd10      	pop	{r4, pc}
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    5054:	4a04      	ldr	r2, [pc, #16]	; (5068 <set_event_mask+0x70>)
    5056:	4b05      	ldr	r3, [pc, #20]	; (506c <set_event_mask+0x74>)
    5058:	e7e3      	b.n	5022 <set_event_mask+0x2a>
		return -ENOBUFS;
    505a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    505e:	bd10      	pop	{r4, pc}
    5060:	2000b970 	.word	0x2000b970
    5064:	02008810 	.word	0x02008810
    5068:	02008890 	.word	0x02008890
    506c:	20008000 	.word	0x20008000

00005070 <set_event_mask>:
{
    5070:	b570      	push	{r4, r5, r6, lr}
    5072:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    5074:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    5076:	79da      	ldrb	r2, [r3, #7]
    5078:	7999      	ldrb	r1, [r3, #6]
    507a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    507e:	7958      	ldrb	r0, [r3, #5]
    5080:	791a      	ldrb	r2, [r3, #4]
    5082:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    5086:	2400      	movs	r4, #0
    5088:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    508c:	78d9      	ldrb	r1, [r3, #3]
    508e:	789a      	ldrb	r2, [r3, #2]
    5090:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5094:	7859      	ldrb	r1, [r3, #1]
    5096:	781b      	ldrb	r3, [r3, #0]
    5098:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    509c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    50a0:	ea44 0003 	orr.w	r0, r4, r3
    50a4:	4629      	mov	r1, r5
	event_mask = sys_get_le64(cmd->events);
    50a6:	4b04      	ldr	r3, [pc, #16]	; (50b8 <set_event_mask+0x48>)
    50a8:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    50ac:	2101      	movs	r1, #1
    50ae:	4630      	mov	r0, r6
    50b0:	f008 f89e 	bl	d1f0 <cmd_complete>
	ccst->status = 0x00;
    50b4:	7004      	strb	r4, [r0, #0]
    50b6:	bd70      	pop	{r4, r5, r6, pc}
    50b8:	2000bc60 	.word	0x2000bc60

000050bc <hci_vs_init>:
{
    50bc:	b510      	push	{r4, lr}
    50be:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    50c0:	aa01      	add	r2, sp, #4
    50c2:	2100      	movs	r1, #0
    50c4:	f64f 4001 	movw	r0, #64513	; 0xfc01
    50c8:	f7ff fd58 	bl	4b7c <bt_hci_cmd_send_sync>
	if (err) {
    50cc:	b108      	cbz	r0, 50d2 <hci_vs_init+0x16>
}
    50ce:	b002      	add	sp, #8
    50d0:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
    50d2:	ac02      	add	r4, sp, #8
    50d4:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    50d8:	f015 fd34 	bl	1ab44 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    50dc:	4622      	mov	r2, r4
    50de:	2100      	movs	r1, #0
    50e0:	f64f 4002 	movw	r0, #64514	; 0xfc02
    50e4:	f7ff fd4a 	bl	4b7c <bt_hci_cmd_send_sync>
	if (err) {
    50e8:	2800      	cmp	r0, #0
    50ea:	d1f0      	bne.n	50ce <hci_vs_init+0x12>
	rp.cmds = (void *)rsp->data;
    50ec:	9b01      	ldr	r3, [sp, #4]
    50ee:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    50f0:	2202      	movs	r2, #2
    50f2:	3101      	adds	r1, #1
    50f4:	480d      	ldr	r0, [pc, #52]	; (512c <hci_vs_init+0x70>)
    50f6:	f7fb f8e3 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    50fa:	ac02      	add	r4, sp, #8
    50fc:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    5100:	f015 fd20 	bl	1ab44 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    5104:	4622      	mov	r2, r4
    5106:	2100      	movs	r1, #0
    5108:	f64f 4003 	movw	r0, #64515	; 0xfc03
    510c:	f7ff fd36 	bl	4b7c <bt_hci_cmd_send_sync>
	if (err) {
    5110:	2800      	cmp	r0, #0
    5112:	d1dc      	bne.n	50ce <hci_vs_init+0x12>
	rp.feat = (void *)rsp->data;
    5114:	9b01      	ldr	r3, [sp, #4]
    5116:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    5118:	2201      	movs	r2, #1
    511a:	4411      	add	r1, r2
    511c:	4804      	ldr	r0, [pc, #16]	; (5130 <hci_vs_init+0x74>)
    511e:	f7fb f8cf 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    5122:	9801      	ldr	r0, [sp, #4]
    5124:	f015 fd0e 	bl	1ab44 <net_buf_unref>
    5128:	e7d1      	b.n	50ce <hci_vs_init+0x12>
    512a:	bf00      	nop
    512c:	2000b9cf 	.word	0x2000b9cf
    5130:	2000b9ce 	.word	0x2000b9ce

00005134 <set_random_address>:
{
    5134:	b570      	push	{r4, r5, r6, lr}
    5136:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    5138:	2206      	movs	r2, #6
    513a:	4914      	ldr	r1, [pc, #80]	; (518c <set_random_address+0x58>)
    513c:	f024 ff8c 	bl	2a058 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    5140:	4604      	mov	r4, r0
    5142:	b908      	cbnz	r0, 5148 <set_random_address+0x14>
}
    5144:	4620      	mov	r0, r4
    5146:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    5148:	2106      	movs	r1, #6
    514a:	f242 0005 	movw	r0, #8197	; 0x2005
    514e:	f7ff fce9 	bl	4b24 <bt_hci_cmd_create>
	if (!buf) {
    5152:	4604      	mov	r4, r0
    5154:	b1b8      	cbz	r0, 5186 <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    5156:	2206      	movs	r2, #6
    5158:	4629      	mov	r1, r5
    515a:	3008      	adds	r0, #8
    515c:	f015 fd44 	bl	1abe8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    5160:	2200      	movs	r2, #0
    5162:	4621      	mov	r1, r4
    5164:	f242 0005 	movw	r0, #8197	; 0x2005
    5168:	f7ff fd08 	bl	4b7c <bt_hci_cmd_send_sync>
	if (err) {
    516c:	4604      	mov	r4, r0
    516e:	2800      	cmp	r0, #0
    5170:	d1e8      	bne.n	5144 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
    5172:	4e07      	ldr	r6, [pc, #28]	; (5190 <set_random_address+0x5c>)
    5174:	2206      	movs	r2, #6
    5176:	4629      	mov	r1, r5
    5178:	f106 0008 	add.w	r0, r6, #8
    517c:	f7fb f8a0 	bl	2c0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    5180:	2301      	movs	r3, #1
    5182:	71f3      	strb	r3, [r6, #7]
	return 0;
    5184:	e7de      	b.n	5144 <set_random_address+0x10>
		return -ENOBUFS;
    5186:	f06f 0468 	mvn.w	r4, #104	; 0x68
    518a:	e7db      	b.n	5144 <set_random_address+0x10>
    518c:	2000b978 	.word	0x2000b978
    5190:	2000b970 	.word	0x2000b970

00005194 <le_set_private_addr>:
{
    5194:	b500      	push	{lr}
    5196:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    5198:	2106      	movs	r1, #6
    519a:	4668      	mov	r0, sp
    519c:	f00c f9a8 	bl	114f0 <bt_rand>
	if (err) {
    51a0:	4603      	mov	r3, r0
    51a2:	b118      	cbz	r0, 51ac <le_set_private_addr+0x18>
}
    51a4:	4618      	mov	r0, r3
    51a6:	b003      	add	sp, #12
    51a8:	f85d fb04 	ldr.w	pc, [sp], #4
	nrpa.val[5] &= 0x3f;
    51ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
    51b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    51b4:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    51b8:	4668      	mov	r0, sp
    51ba:	f7ff ffbb 	bl	5134 <set_random_address>
    51be:	4603      	mov	r3, r0
    51c0:	e7f0      	b.n	51a4 <le_set_private_addr+0x10>
	...

000051c4 <bt_hci_stop_scanning>:
{
    51c4:	b530      	push	{r4, r5, lr}
    51c6:	b083      	sub	sp, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    51c8:	f3bf 8f5b 	dmb	ish
    51cc:	4b26      	ldr	r3, [pc, #152]	; (5268 <bt_hci_stop_scanning+0xa4>)
    51ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    51d0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    51d4:	f013 0f80 	tst.w	r3, #128	; 0x80
    51d8:	d03f      	beq.n	525a <bt_hci_stop_scanning+0x96>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    51da:	2102      	movs	r1, #2
    51dc:	f242 000c 	movw	r0, #8204	; 0x200c
    51e0:	f7ff fca0 	bl	4b24 <bt_hci_cmd_create>
	if (!buf) {
    51e4:	4604      	mov	r4, r0
    51e6:	2800      	cmp	r0, #0
    51e8:	d03a      	beq.n	5260 <bt_hci_stop_scanning+0x9c>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    51ea:	2102      	movs	r1, #2
    51ec:	3008      	adds	r0, #8
    51ee:	f015 fcf5 	bl	1abdc <net_buf_simple_add>
    51f2:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    51f4:	2202      	movs	r2, #2
    51f6:	2100      	movs	r1, #0
    51f8:	f024 ffc2 	bl	2a180 <memset>
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    51fc:	2300      	movs	r3, #0
    51fe:	706b      	strb	r3, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;
    5200:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    5202:	aa01      	add	r2, sp, #4
    5204:	4621      	mov	r1, r4
    5206:	f242 000c 	movw	r0, #8204	; 0x200c
    520a:	f7ff fcb7 	bl	4b7c <bt_hci_cmd_send_sync>
	if (err) {
    520e:	4604      	mov	r4, r0
    5210:	b930      	cbnz	r0, 5220 <bt_hci_stop_scanning+0x5c>
	err = rsp->data[0];
    5212:	9b01      	ldr	r3, [sp, #4]
    5214:	689b      	ldr	r3, [r3, #8]
    5216:	781c      	ldrb	r4, [r3, #0]
	if (!err) {
    5218:	b12c      	cbz	r4, 5226 <bt_hci_stop_scanning+0x62>
	net_buf_unref(rsp);
    521a:	9801      	ldr	r0, [sp, #4]
    521c:	f015 fc92 	bl	1ab44 <net_buf_unref>
}
    5220:	4620      	mov	r0, r4
    5222:	b003      	add	sp, #12
    5224:	bd30      	pop	{r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5226:	4b11      	ldr	r3, [pc, #68]	; (526c <bt_hci_stop_scanning+0xa8>)
    5228:	f3bf 8f5b 	dmb	ish
    522c:	e853 2f00 	ldrex	r2, [r3]
    5230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    5234:	e843 2100 	strex	r1, r2, [r3]
    5238:	2900      	cmp	r1, #0
    523a:	d1f7      	bne.n	522c <bt_hci_stop_scanning+0x68>
    523c:	f3bf 8f5b 	dmb	ish
    5240:	f3bf 8f5b 	dmb	ish
    5244:	e853 2f00 	ldrex	r2, [r3]
    5248:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    524c:	e843 2100 	strex	r1, r2, [r3]
    5250:	2900      	cmp	r1, #0
    5252:	d1f7      	bne.n	5244 <bt_hci_stop_scanning+0x80>
    5254:	f3bf 8f5b 	dmb	ish
    5258:	e7df      	b.n	521a <bt_hci_stop_scanning+0x56>
		return -EALREADY;
    525a:	f06f 0477 	mvn.w	r4, #119	; 0x77
    525e:	e7df      	b.n	5220 <bt_hci_stop_scanning+0x5c>
		return -ENOBUFS;
    5260:	f06f 0468 	mvn.w	r4, #104	; 0x68
    5264:	e7dc      	b.n	5220 <bt_hci_stop_scanning+0x5c>
    5266:	bf00      	nop
    5268:	2000b970 	.word	0x2000b970
    526c:	2000b9e0 	.word	0x2000b9e0

00005270 <set_advertise_enable>:
{
    5270:	b538      	push	{r3, r4, r5, lr}
    5272:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    5274:	2101      	movs	r1, #1
    5276:	f242 000a 	movw	r0, #8202	; 0x200a
    527a:	f7ff fc53 	bl	4b24 <bt_hci_cmd_create>
	if (!buf) {
    527e:	b380      	cbz	r0, 52e2 <set_advertise_enable+0x72>
    5280:	4604      	mov	r4, r0
	if (enable) {
    5282:	b1dd      	cbz	r5, 52bc <set_advertise_enable+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    5284:	2101      	movs	r1, #1
    5286:	3008      	adds	r0, #8
    5288:	f015 fcb9 	bl	1abfe <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    528c:	2200      	movs	r2, #0
    528e:	4621      	mov	r1, r4
    5290:	f242 000a 	movw	r0, #8202	; 0x200a
    5294:	f7ff fc72 	bl	4b7c <bt_hci_cmd_send_sync>
	if (err) {
    5298:	4603      	mov	r3, r0
    529a:	b968      	cbnz	r0, 52b8 <set_advertise_enable+0x48>
	if (enable) {
    529c:	b99d      	cbnz	r5, 52c6 <set_advertise_enable+0x56>
    529e:	4a12      	ldr	r2, [pc, #72]	; (52e8 <set_advertise_enable+0x78>)
    52a0:	f3bf 8f5b 	dmb	ish
    52a4:	e852 1f00 	ldrex	r1, [r2]
    52a8:	f021 0120 	bic.w	r1, r1, #32
    52ac:	e842 1000 	strex	r0, r1, [r2]
    52b0:	2800      	cmp	r0, #0
    52b2:	d1f7      	bne.n	52a4 <set_advertise_enable+0x34>
    52b4:	f3bf 8f5b 	dmb	ish
}
    52b8:	4618      	mov	r0, r3
    52ba:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    52bc:	2100      	movs	r1, #0
    52be:	3008      	adds	r0, #8
    52c0:	f015 fc9d 	bl	1abfe <net_buf_simple_add_u8>
    52c4:	e7e2      	b.n	528c <set_advertise_enable+0x1c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    52c6:	4a08      	ldr	r2, [pc, #32]	; (52e8 <set_advertise_enable+0x78>)
    52c8:	f3bf 8f5b 	dmb	ish
    52cc:	e852 1f00 	ldrex	r1, [r2]
    52d0:	f041 0120 	orr.w	r1, r1, #32
    52d4:	e842 1000 	strex	r0, r1, [r2]
    52d8:	2800      	cmp	r0, #0
    52da:	d1f7      	bne.n	52cc <set_advertise_enable+0x5c>
    52dc:	f3bf 8f5b 	dmb	ish
    52e0:	e7ea      	b.n	52b8 <set_advertise_enable+0x48>
		return -ENOBUFS;
    52e2:	f06f 0368 	mvn.w	r3, #104	; 0x68
    52e6:	e7e7      	b.n	52b8 <set_advertise_enable+0x48>
    52e8:	2000b9e0 	.word	0x2000b9e0

000052ec <hci_le_create_conn>:
{
    52ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52ee:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    52f0:	2119      	movs	r1, #25
    52f2:	f242 000d 	movw	r0, #8205	; 0x200d
    52f6:	f7ff fc15 	bl	4b24 <bt_hci_cmd_create>
	if (!buf) {
    52fa:	b378      	cbz	r0, 535c <hci_le_create_conn+0x70>
    52fc:	4607      	mov	r7, r0
	cp = net_buf_add(buf, sizeof(*cp));
    52fe:	2119      	movs	r1, #25
    5300:	3008      	adds	r0, #8
    5302:	f015 fc6b 	bl	1abdc <net_buf_simple_add>
    5306:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    5308:	2219      	movs	r2, #25
    530a:	2100      	movs	r1, #0
    530c:	f024 ff38 	bl	2a180 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    5310:	2600      	movs	r6, #0
    5312:	2360      	movs	r3, #96	; 0x60
    5314:	7023      	strb	r3, [r4, #0]
    5316:	7066      	strb	r6, [r4, #1]
	cp->scan_window = cp->scan_interval;
    5318:	70a3      	strb	r3, [r4, #2]
    531a:	70e6      	strb	r6, [r4, #3]
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    531c:	2207      	movs	r2, #7
    531e:	f105 0156 	add.w	r1, r5, #86	; 0x56
    5322:	1d60      	adds	r0, r4, #5
    5324:	f7fa ffcc 	bl	2c0 <memcpy>
	cp->own_addr_type = conn->le.init_addr.type;
    5328:	f895 304f 	ldrb.w	r3, [r5, #79]	; 0x4f
    532c:	7323      	strb	r3, [r4, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    532e:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
    5332:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    5336:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    533a:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    533e:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
    5342:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    5346:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    534a:	f8a4 3013 	strh.w	r3, [r4, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    534e:	4632      	mov	r2, r6
    5350:	4639      	mov	r1, r7
    5352:	f242 000d 	movw	r0, #8205	; 0x200d
    5356:	f7ff fc11 	bl	4b7c <bt_hci_cmd_send_sync>
    535a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    535c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005362 <set_ad>:

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    5362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5366:	4682      	mov	sl, r0
    5368:	460f      	mov	r7, r1
    536a:	4690      	mov	r8, r2
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    536c:	2120      	movs	r1, #32
    536e:	f7ff fbd9 	bl	4b24 <bt_hci_cmd_create>
	if (!buf) {
    5372:	2800      	cmp	r0, #0
    5374:	d03c      	beq.n	53f0 <set_ad+0x8e>
    5376:	4681      	mov	r9, r0
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    5378:	2120      	movs	r1, #32
    537a:	3008      	adds	r0, #8
    537c:	f015 fc2e 	bl	1abdc <net_buf_simple_add>
    5380:	4604      	mov	r4, r0

	memset(set_data, 0, sizeof(*set_data));
    5382:	2220      	movs	r2, #32
    5384:	2100      	movs	r1, #0
    5386:	f024 fefb 	bl	2a180 <memset>

	for (i = 0; i < ad_len; i++) {
    538a:	2600      	movs	r6, #0
    538c:	4546      	cmp	r6, r8
    538e:	d228      	bcs.n	53e2 <set_ad+0x80>
		/* Check if ad fit in the remaining buffer */
		if (set_data->len + ad[i].data_len + 2 > 31) {
    5390:	7822      	ldrb	r2, [r4, #0]
    5392:	eb07 05c6 	add.w	r5, r7, r6, lsl #3
    5396:	786b      	ldrb	r3, [r5, #1]
    5398:	4413      	add	r3, r2
    539a:	3302      	adds	r3, #2
    539c:	2b1f      	cmp	r3, #31
    539e:	dc19      	bgt.n	53d4 <set_ad+0x72>
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    53a0:	1c53      	adds	r3, r2, #1
    53a2:	b2db      	uxtb	r3, r3
    53a4:	7023      	strb	r3, [r4, #0]
    53a6:	7869      	ldrb	r1, [r5, #1]
    53a8:	3101      	adds	r1, #1
    53aa:	4422      	add	r2, r4
    53ac:	7051      	strb	r1, [r2, #1]
		set_data->data[set_data->len++] = ad[i].type;
    53ae:	1c58      	adds	r0, r3, #1
    53b0:	b2c0      	uxtb	r0, r0
    53b2:	7020      	strb	r0, [r4, #0]
    53b4:	f817 2036 	ldrb.w	r2, [r7, r6, lsl #3]
    53b8:	4423      	add	r3, r4
    53ba:	705a      	strb	r2, [r3, #1]

		memcpy(&set_data->data[set_data->len], ad[i].data,
    53bc:	4420      	add	r0, r4
    53be:	786a      	ldrb	r2, [r5, #1]
    53c0:	6869      	ldr	r1, [r5, #4]
    53c2:	3001      	adds	r0, #1
    53c4:	f7fa ff7c 	bl	2c0 <memcpy>
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    53c8:	786b      	ldrb	r3, [r5, #1]
    53ca:	7822      	ldrb	r2, [r4, #0]
    53cc:	4413      	add	r3, r2
    53ce:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < ad_len; i++) {
    53d0:	3601      	adds	r6, #1
    53d2:	e7db      	b.n	538c <set_ad+0x2a>
			net_buf_unref(buf);
    53d4:	4648      	mov	r0, r9
    53d6:	f015 fbb5 	bl	1ab44 <net_buf_unref>
			return -EINVAL;
    53da:	f06f 0015 	mvn.w	r0, #21
    53de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    53e2:	2200      	movs	r2, #0
    53e4:	4649      	mov	r1, r9
    53e6:	4650      	mov	r0, sl
    53e8:	f7ff fbc8 	bl	4b7c <bt_hci_cmd_send_sync>
    53ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
    53f0:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    53f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000053f8 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    53f8:	8802      	ldrh	r2, [r0, #0]
    53fa:	8843      	ldrh	r3, [r0, #2]
    53fc:	429a      	cmp	r2, r3
    53fe:	d81a      	bhi.n	5436 <bt_le_conn_params_valid+0x3e>
    5400:	2a05      	cmp	r2, #5
    5402:	d91a      	bls.n	543a <bt_le_conn_params_valid+0x42>
	    param->interval_min < 6 || param->interval_max > 3200) {
    5404:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    5408:	d819      	bhi.n	543e <bt_le_conn_params_valid+0x46>
	if (param->latency > 499) {
    540a:	8881      	ldrh	r1, [r0, #4]
    540c:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    5410:	d217      	bcs.n	5442 <bt_le_conn_params_valid+0x4a>
{
    5412:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
    5414:	88c0      	ldrh	r0, [r0, #6]
    5416:	f1a0 020a 	sub.w	r2, r0, #10
    541a:	b292      	uxth	r2, r2
    541c:	f640 4476 	movw	r4, #3190	; 0xc76
    5420:	42a2      	cmp	r2, r4
    5422:	d810      	bhi.n	5446 <bt_le_conn_params_valid+0x4e>
	     ((1 + param->latency) * param->interval_max))) {
    5424:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    5428:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
    542c:	da01      	bge.n	5432 <bt_le_conn_params_valid+0x3a>
	return true;
    542e:	2001      	movs	r0, #1
    5430:	e00a      	b.n	5448 <bt_le_conn_params_valid+0x50>
		return false;
    5432:	2000      	movs	r0, #0
    5434:	e008      	b.n	5448 <bt_le_conn_params_valid+0x50>
		return false;
    5436:	2000      	movs	r0, #0
    5438:	4770      	bx	lr
    543a:	2000      	movs	r0, #0
    543c:	4770      	bx	lr
    543e:	2000      	movs	r0, #0
    5440:	4770      	bx	lr
		return false;
    5442:	2000      	movs	r0, #0
    5444:	4770      	bx	lr
		return false;
    5446:	2000      	movs	r0, #0
}
    5448:	bc10      	pop	{r4}
    544a:	4770      	bx	lr

0000544c <bt_addr_le_create_static>:
{
    544c:	b510      	push	{r4, lr}
    544e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    5450:	2301      	movs	r3, #1
    5452:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    5456:	2106      	movs	r1, #6
    5458:	f00c f84a 	bl	114f0 <bt_rand>
	if (err) {
    545c:	4602      	mov	r2, r0
    545e:	b918      	cbnz	r0, 5468 <bt_addr_le_create_static+0x1c>
	BT_ADDR_SET_STATIC(&addr->a);
    5460:	79a3      	ldrb	r3, [r4, #6]
    5462:	f063 033f 	orn	r3, r3, #63	; 0x3f
    5466:	71a3      	strb	r3, [r4, #6]
}
    5468:	4610      	mov	r0, r2
    546a:	bd10      	pop	{r4, pc}

0000546c <set_static_addr>:
{
    546c:	b510      	push	{r4, lr}
    546e:	b082      	sub	sp, #8
	if (bt_storage) {
    5470:	4b2e      	ldr	r3, [pc, #184]	; (552c <set_static_addr+0xc0>)
    5472:	681b      	ldr	r3, [r3, #0]
    5474:	b13b      	cbz	r3, 5486 <set_static_addr+0x1a>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    5476:	681c      	ldr	r4, [r3, #0]
    5478:	2307      	movs	r3, #7
    547a:	4a2d      	ldr	r2, [pc, #180]	; (5530 <set_static_addr+0xc4>)
    547c:	2100      	movs	r1, #0
    547e:	4608      	mov	r0, r1
    5480:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    5482:	2807      	cmp	r0, #7
    5484:	d02c      	beq.n	54e0 <set_static_addr+0x74>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    5486:	4b2a      	ldr	r3, [pc, #168]	; (5530 <set_static_addr+0xc4>)
    5488:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    548c:	f013 0f01 	tst.w	r3, #1
    5490:	d018      	beq.n	54c4 <set_static_addr+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    5492:	aa01      	add	r2, sp, #4
    5494:	2100      	movs	r1, #0
    5496:	f64f 4009 	movw	r0, #64521	; 0xfc09
    549a:	f7ff fb6f 	bl	4b7c <bt_hci_cmd_send_sync>
		if (err) {
    549e:	b988      	cbnz	r0, 54c4 <set_static_addr+0x58>
		rp = (void *)rsp->data;
    54a0:	9801      	ldr	r0, [sp, #4]
    54a2:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    54a4:	784b      	ldrb	r3, [r1, #1]
    54a6:	b15b      	cbz	r3, 54c0 <set_static_addr+0x54>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    54a8:	4821      	ldr	r0, [pc, #132]	; (5530 <set_static_addr+0xc4>)
    54aa:	2301      	movs	r3, #1
    54ac:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(dst, src, sizeof(*dst));
    54b0:	2206      	movs	r2, #6
    54b2:	3102      	adds	r1, #2
    54b4:	f7fa ff04 	bl	2c0 <memcpy>
			net_buf_unref(rsp);
    54b8:	9801      	ldr	r0, [sp, #4]
    54ba:	f015 fb43 	bl	1ab44 <net_buf_unref>
    54be:	e00f      	b.n	54e0 <set_static_addr+0x74>
		net_buf_unref(rsp);
    54c0:	f015 fb40 	bl	1ab44 <net_buf_unref>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    54c4:	481a      	ldr	r0, [pc, #104]	; (5530 <set_static_addr+0xc4>)
    54c6:	f7ff ffc1 	bl	544c <bt_addr_le_create_static>
	if (err) {
    54ca:	4603      	mov	r3, r0
    54cc:	b9b8      	cbnz	r0, 54fe <set_static_addr+0x92>
	if (bt_storage) {
    54ce:	4b17      	ldr	r3, [pc, #92]	; (552c <set_static_addr+0xc0>)
    54d0:	681b      	ldr	r3, [r3, #0]
    54d2:	b12b      	cbz	r3, 54e0 <set_static_addr+0x74>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    54d4:	685c      	ldr	r4, [r3, #4]
    54d6:	2307      	movs	r3, #7
    54d8:	4a15      	ldr	r2, [pc, #84]	; (5530 <set_static_addr+0xc4>)
    54da:	2100      	movs	r1, #0
    54dc:	4608      	mov	r0, r1
    54de:	47a0      	blx	r4
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    54e0:	4b13      	ldr	r3, [pc, #76]	; (5530 <set_static_addr+0xc4>)
    54e2:	781b      	ldrb	r3, [r3, #0]
    54e4:	2b01      	cmp	r3, #1
    54e6:	d11b      	bne.n	5520 <set_static_addr+0xb4>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
    54e8:	4b11      	ldr	r3, [pc, #68]	; (5530 <set_static_addr+0xc4>)
    54ea:	799b      	ldrb	r3, [r3, #6]
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    54ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    54f0:	2bc0      	cmp	r3, #192	; 0xc0
    54f2:	d118      	bne.n	5526 <set_static_addr+0xba>
	err = set_random_address(&bt_dev.id_addr.a);
    54f4:	480f      	ldr	r0, [pc, #60]	; (5534 <set_static_addr+0xc8>)
    54f6:	f7ff fe1d 	bl	5134 <set_random_address>
	if (err) {
    54fa:	4603      	mov	r3, r0
    54fc:	b110      	cbz	r0, 5504 <set_static_addr+0x98>
}
    54fe:	4618      	mov	r0, r3
    5500:	b002      	add	sp, #8
    5502:	bd10      	pop	{r4, pc}
    5504:	4a0c      	ldr	r2, [pc, #48]	; (5538 <set_static_addr+0xcc>)
    5506:	f3bf 8f5b 	dmb	ish
    550a:	e852 1f00 	ldrex	r1, [r2]
    550e:	f041 0104 	orr.w	r1, r1, #4
    5512:	e842 1000 	strex	r0, r1, [r2]
    5516:	2800      	cmp	r0, #0
    5518:	d1f7      	bne.n	550a <set_static_addr+0x9e>
    551a:	f3bf 8f5b 	dmb	ish
	return 0;
    551e:	e7ee      	b.n	54fe <set_static_addr+0x92>
		return -EINVAL;
    5520:	f06f 0315 	mvn.w	r3, #21
    5524:	e7eb      	b.n	54fe <set_static_addr+0x92>
    5526:	f06f 0315 	mvn.w	r3, #21
    552a:	e7e8      	b.n	54fe <set_static_addr+0x92>
    552c:	20002abc 	.word	0x20002abc
    5530:	2000b970 	.word	0x2000b970
    5534:	2000b971 	.word	0x2000b971
    5538:	2000b9e0 	.word	0x2000b9e0

0000553c <hci_init>:
{
    553c:	b510      	push	{r4, lr}
    553e:	b084      	sub	sp, #16
	err = common_init();
    5540:	f7ff fb5c 	bl	4bfc <common_init>
	if (err) {
    5544:	4604      	mov	r4, r0
    5546:	b110      	cbz	r0, 554e <hci_init+0x12>
}
    5548:	4620      	mov	r0, r4
    554a:	b004      	add	sp, #16
    554c:	bd10      	pop	{r4, pc}
	err = le_init();
    554e:	f7ff fc9b 	bl	4e88 <le_init>
	if (err) {
    5552:	4604      	mov	r4, r0
    5554:	2800      	cmp	r0, #0
    5556:	d1f7      	bne.n	5548 <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    5558:	4b17      	ldr	r3, [pc, #92]	; (55b8 <hci_init+0x7c>)
    555a:	7e9b      	ldrb	r3, [r3, #26]
    555c:	f013 0f20 	tst.w	r3, #32
    5560:	d104      	bne.n	556c <hci_init+0x30>
		err = br_init();
    5562:	f7ff fd2d 	bl	4fc0 <br_init>
		if (err) {
    5566:	4604      	mov	r4, r0
    5568:	2800      	cmp	r0, #0
    556a:	d1ed      	bne.n	5548 <hci_init+0xc>
	err = set_event_mask();
    556c:	f7ff fd44 	bl	4ff8 <set_event_mask>
	if (err) {
    5570:	4604      	mov	r4, r0
    5572:	2800      	cmp	r0, #0
    5574:	d1e8      	bne.n	5548 <hci_init+0xc>
	hci_vs_init();
    5576:	f7ff fda1 	bl	50bc <hci_vs_init>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    557a:	2300      	movs	r3, #0
    557c:	9300      	str	r3, [sp, #0]
    557e:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
    5582:	2207      	movs	r2, #7
    5584:	4669      	mov	r1, sp
    5586:	480c      	ldr	r0, [pc, #48]	; (55b8 <hci_init+0x7c>)
    5588:	f024 fd66 	bl	2a058 <memcmp>
    558c:	b178      	cbz	r0, 55ae <hci_init+0x72>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    558e:	4b0b      	ldr	r3, [pc, #44]	; (55bc <hci_init+0x80>)
    5590:	e893 0003 	ldmia.w	r3, {r0, r1}
    5594:	9002      	str	r0, [sp, #8]
    5596:	f8ad 100c 	strh.w	r1, [sp, #12]
    559a:	0c09      	lsrs	r1, r1, #16
    559c:	f88d 100e 	strb.w	r1, [sp, #14]
    55a0:	2207      	movs	r2, #7
    55a2:	a902      	add	r1, sp, #8
    55a4:	4804      	ldr	r0, [pc, #16]	; (55b8 <hci_init+0x7c>)
    55a6:	f024 fd57 	bl	2a058 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    55aa:	2800      	cmp	r0, #0
    55ac:	d1cc      	bne.n	5548 <hci_init+0xc>
		err = set_static_addr();
    55ae:	f7ff ff5d 	bl	546c <set_static_addr>
    55b2:	4604      	mov	r4, r0
    55b4:	e7c8      	b.n	5548 <hci_init+0xc>
    55b6:	bf00      	nop
    55b8:	2000b970 	.word	0x2000b970
    55bc:	0002e520 	.word	0x0002e520

000055c0 <hci_init>:
		return HCI_CLASS_ACL_DATA;
	}
}

void hci_init(struct k_poll_signal *signal_host_buf)
{
    55c0:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
    55c2:	2100      	movs	r1, #0
    55c4:	4608      	mov	r0, r1
    55c6:	f007 ffb1 	bl	d52c <reset>
    55ca:	bd08      	pop	{r3, pc}

000055cc <bt_send>:
{
    55cc:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
    55ce:	4b03      	ldr	r3, [pc, #12]	; (55dc <bt_send+0x10>)
    55d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    55d4:	68db      	ldr	r3, [r3, #12]
    55d6:	4798      	blx	r3
}
    55d8:	bd08      	pop	{r3, pc}
    55da:	bf00      	nop
    55dc:	2000b970 	.word	0x2000b970

000055e0 <bt_hci_cmd_send>:
{
    55e0:	b538      	push	{r3, r4, r5, lr}
    55e2:	4605      	mov	r5, r0
	if (!buf) {
    55e4:	460c      	mov	r4, r1
    55e6:	b151      	cbz	r1, 55fe <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    55e8:	f640 4335 	movw	r3, #3125	; 0xc35
    55ec:	429d      	cmp	r5, r3
    55ee:	d00e      	beq.n	560e <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    55f0:	4621      	mov	r1, r4
    55f2:	480c      	ldr	r0, [pc, #48]	; (5624 <bt_hci_cmd_send+0x44>)
    55f4:	f015 fa98 	bl	1ab28 <net_buf_put>
	return 0;
    55f8:	2500      	movs	r5, #0
}
    55fa:	4628      	mov	r0, r5
    55fc:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    55fe:	f7ff fa91 	bl	4b24 <bt_hci_cmd_create>
		if (!buf) {
    5602:	4604      	mov	r4, r0
    5604:	2800      	cmp	r0, #0
    5606:	d1ef      	bne.n	55e8 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
    5608:	f06f 0568 	mvn.w	r5, #104	; 0x68
    560c:	e7f5      	b.n	55fa <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
    560e:	4620      	mov	r0, r4
    5610:	f7ff ffdc 	bl	55cc <bt_send>
		if (err) {
    5614:	4605      	mov	r5, r0
    5616:	2800      	cmp	r0, #0
    5618:	d0ef      	beq.n	55fa <bt_hci_cmd_send+0x1a>
			net_buf_unref(buf);
    561a:	4620      	mov	r0, r4
    561c:	f015 fa92 	bl	1ab44 <net_buf_unref>
    5620:	e7eb      	b.n	55fa <bt_hci_cmd_send+0x1a>
    5622:	bf00      	nop
    5624:	2000ba44 	.word	0x2000ba44

00005628 <start_le_scan>:
{
    5628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    562c:	b083      	sub	sp, #12
    562e:	4606      	mov	r6, r0
    5630:	4689      	mov	r9, r1
    5632:	4615      	mov	r5, r2
    5634:	4698      	mov	r8, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM,
    5636:	2107      	movs	r1, #7
    5638:	f242 000b 	movw	r0, #8203	; 0x200b
    563c:	f7ff fa72 	bl	4b24 <bt_hci_cmd_create>
	if (!buf) {
    5640:	2800      	cmp	r0, #0
    5642:	d072      	beq.n	572a <start_le_scan+0x102>
    5644:	4607      	mov	r7, r0
	set_param = net_buf_add(buf, sizeof(*set_param));
    5646:	2107      	movs	r1, #7
    5648:	3008      	adds	r0, #8
    564a:	f015 fac7 	bl	1abdc <net_buf_simple_add>
    564e:	4604      	mov	r4, r0
	memset(set_param, 0, sizeof(*set_param));
    5650:	2207      	movs	r2, #7
    5652:	2100      	movs	r1, #0
    5654:	f024 fd94 	bl	2a180 <memset>
	set_param->scan_type = scan_type;
    5658:	7026      	strb	r6, [r4, #0]
	set_param->interval = sys_cpu_to_le16(interval);
    565a:	f8a4 9001 	strh.w	r9, [r4, #1]
	set_param->window = sys_cpu_to_le16(window);
    565e:	f8a4 5003 	strh.w	r5, [r4, #3]
	set_param->filter_policy = 0x00;
    5662:	2300      	movs	r3, #0
    5664:	71a3      	strb	r3, [r4, #6]
		set_param->addr_type =  bt_dev.id_addr.type;
    5666:	4b34      	ldr	r3, [pc, #208]	; (5738 <start_le_scan+0x110>)
    5668:	781b      	ldrb	r3, [r3, #0]
    566a:	7163      	strb	r3, [r4, #5]
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    566c:	2e01      	cmp	r6, #1
    566e:	d02c      	beq.n	56ca <start_le_scan+0xa2>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    5670:	4639      	mov	r1, r7
    5672:	f242 000b 	movw	r0, #8203	; 0x200b
    5676:	f7ff ffb3 	bl	55e0 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    567a:	2102      	movs	r1, #2
    567c:	f242 000c 	movw	r0, #8204	; 0x200c
    5680:	f7ff fa50 	bl	4b24 <bt_hci_cmd_create>
	if (!buf) {
    5684:	4604      	mov	r4, r0
    5686:	2800      	cmp	r0, #0
    5688:	d052      	beq.n	5730 <start_le_scan+0x108>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    568a:	2102      	movs	r1, #2
    568c:	3008      	adds	r0, #8
    568e:	f015 faa5 	bl	1abdc <net_buf_simple_add>
    5692:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    5694:	2202      	movs	r2, #2
    5696:	2100      	movs	r1, #0
    5698:	f024 fd72 	bl	2a180 <memset>
	scan_enable->filter_dup = filter_dup;
    569c:	f885 8001 	strb.w	r8, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_ENABLE;
    56a0:	2301      	movs	r3, #1
    56a2:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    56a4:	aa01      	add	r2, sp, #4
    56a6:	4621      	mov	r1, r4
    56a8:	f242 000c 	movw	r0, #8204	; 0x200c
    56ac:	f7ff fa66 	bl	4b7c <bt_hci_cmd_send_sync>
	if (err) {
    56b0:	4605      	mov	r5, r0
    56b2:	b930      	cbnz	r0, 56c2 <start_le_scan+0x9a>
	err = rsp->data[0];
    56b4:	9b01      	ldr	r3, [sp, #4]
    56b6:	689b      	ldr	r3, [r3, #8]
    56b8:	781d      	ldrb	r5, [r3, #0]
	if (!err) {
    56ba:	b1d5      	cbz	r5, 56f2 <start_le_scan+0xca>
	net_buf_unref(rsp);
    56bc:	9801      	ldr	r0, [sp, #4]
    56be:	f015 fa41 	bl	1ab44 <net_buf_unref>
}
    56c2:	4628      	mov	r0, r5
    56c4:	b003      	add	sp, #12
    56c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    56ca:	f3bf 8f5b 	dmb	ish
    56ce:	4b1a      	ldr	r3, [pc, #104]	; (5738 <start_le_scan+0x110>)
    56d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    56d2:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    56d6:	f013 0f20 	tst.w	r3, #32
    56da:	d1c9      	bne.n	5670 <start_le_scan+0x48>
			err = le_set_private_addr();
    56dc:	f7ff fd5a 	bl	5194 <le_set_private_addr>
			if (err) {
    56e0:	4605      	mov	r5, r0
    56e2:	b910      	cbnz	r0, 56ea <start_le_scan+0xc2>
			set_param->addr_type = BT_ADDR_LE_RANDOM;
    56e4:	2301      	movs	r3, #1
    56e6:	7163      	strb	r3, [r4, #5]
    56e8:	e7c2      	b.n	5670 <start_le_scan+0x48>
				net_buf_unref(buf);
    56ea:	4638      	mov	r0, r7
    56ec:	f015 fa2a 	bl	1ab44 <net_buf_unref>
				return err;
    56f0:	e7e7      	b.n	56c2 <start_le_scan+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    56f2:	4b12      	ldr	r3, [pc, #72]	; (573c <start_le_scan+0x114>)
    56f4:	f3bf 8f5b 	dmb	ish
    56f8:	e853 2f00 	ldrex	r2, [r3]
    56fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5700:	e843 2100 	strex	r1, r2, [r3]
    5704:	2900      	cmp	r1, #0
    5706:	d1f7      	bne.n	56f8 <start_le_scan+0xd0>
    5708:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    570c:	2e01      	cmp	r6, #1
    570e:	d1d5      	bne.n	56bc <start_le_scan+0x94>
    5710:	f3bf 8f5b 	dmb	ish
    5714:	e853 2f00 	ldrex	r2, [r3]
    5718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    571c:	e843 2100 	strex	r1, r2, [r3]
    5720:	2900      	cmp	r1, #0
    5722:	d1f7      	bne.n	5714 <start_le_scan+0xec>
    5724:	f3bf 8f5b 	dmb	ish
    5728:	e7c8      	b.n	56bc <start_le_scan+0x94>
		return -ENOBUFS;
    572a:	f06f 0568 	mvn.w	r5, #104	; 0x68
    572e:	e7c8      	b.n	56c2 <start_le_scan+0x9a>
		return -ENOBUFS;
    5730:	f06f 0568 	mvn.w	r5, #104	; 0x68
    5734:	e7c5      	b.n	56c2 <start_le_scan+0x9a>
    5736:	bf00      	nop
    5738:	2000b970 	.word	0x2000b970
    573c:	2000b9e0 	.word	0x2000b9e0

00005740 <bt_le_scan_update>:
{
    5740:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5742:	f3bf 8f5b 	dmb	ish
    5746:	4b17      	ldr	r3, [pc, #92]	; (57a4 <bt_le_scan_update+0x64>)
    5748:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    574a:	f3bf 8f5b 	dmb	ish
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    574e:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5752:	b114      	cbz	r4, 575a <bt_le_scan_update+0x1a>
		return 0;
    5754:	2300      	movs	r3, #0
}
    5756:	4618      	mov	r0, r3
    5758:	bd38      	pop	{r3, r4, r5, pc}
    575a:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    575c:	f3bf 8f5b 	dmb	ish
    5760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5762:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    5766:	f013 0f80 	tst.w	r3, #128	; 0x80
    576a:	d004      	beq.n	5776 <bt_le_scan_update+0x36>
		err = bt_hci_stop_scanning();
    576c:	f7ff fd2a 	bl	51c4 <bt_hci_stop_scanning>
		if (err) {
    5770:	4603      	mov	r3, r0
    5772:	2800      	cmp	r0, #0
    5774:	d1ef      	bne.n	5756 <bt_le_scan_update+0x16>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    5776:	2101      	movs	r1, #1
    5778:	2000      	movs	r0, #0
    577a:	f001 fcd9 	bl	7130 <bt_conn_lookup_state_le>
		if (!conn) {
    577e:	b170      	cbz	r0, 579e <bt_le_scan_update+0x5e>
		bt_conn_unref(conn);
    5780:	f001 fd08 	bl	7194 <bt_conn_unref>
		if (fast_scan) {
    5784:	b13d      	cbz	r5, 5796 <bt_le_scan_update+0x56>
			window = BT_GAP_SCAN_FAST_WINDOW;
    5786:	2230      	movs	r2, #48	; 0x30
			interval = BT_GAP_SCAN_FAST_INTERVAL;
    5788:	2160      	movs	r1, #96	; 0x60
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window,
    578a:	2301      	movs	r3, #1
    578c:	2000      	movs	r0, #0
    578e:	f7ff ff4b 	bl	5628 <start_le_scan>
    5792:	4603      	mov	r3, r0
    5794:	e7df      	b.n	5756 <bt_le_scan_update+0x16>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    5796:	2212      	movs	r2, #18
			interval = BT_GAP_SCAN_SLOW_INTERVAL_1;
    5798:	f44f 6100 	mov.w	r1, #2048	; 0x800
    579c:	e7f5      	b.n	578a <bt_le_scan_update+0x4a>
			return 0;
    579e:	4623      	mov	r3, r4
    57a0:	e7d9      	b.n	5756 <bt_le_scan_update+0x16>
    57a2:	bf00      	nop
    57a4:	2000b970 	.word	0x2000b970

000057a8 <bt_init>:
{
    57a8:	b510      	push	{r4, lr}
	err = hci_init();
    57aa:	f7ff fec7 	bl	553c <hci_init>
	if (err) {
    57ae:	4604      	mov	r4, r0
    57b0:	b108      	cbz	r0, 57b6 <bt_init+0xe>
}
    57b2:	4620      	mov	r0, r4
    57b4:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
    57b6:	f002 f83b 	bl	7830 <bt_conn_init>
		if (err) {
    57ba:	4604      	mov	r4, r0
    57bc:	2800      	cmp	r0, #0
    57be:	d1f8      	bne.n	57b2 <bt_init+0xa>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    57c0:	4b07      	ldr	r3, [pc, #28]	; (57e0 <bt_init+0x38>)
    57c2:	f3bf 8f5b 	dmb	ish
    57c6:	e853 2f00 	ldrex	r2, [r3]
    57ca:	f042 0202 	orr.w	r2, r2, #2
    57ce:	e843 2100 	strex	r1, r2, [r3]
    57d2:	2900      	cmp	r1, #0
    57d4:	d1f7      	bne.n	57c6 <bt_init+0x1e>
    57d6:	f3bf 8f5b 	dmb	ish
	bt_le_scan_update(false);
    57da:	f7ff ffb1 	bl	5740 <bt_le_scan_update>
	return 0;
    57de:	e7e8      	b.n	57b2 <bt_init+0xa>
    57e0:	2000b9e0 	.word	0x2000b9e0

000057e4 <init_work>:
{
    57e4:	b508      	push	{r3, lr}
	err = bt_init();
    57e6:	f7ff ffdf 	bl	57a8 <bt_init>
	if (ready_cb) {
    57ea:	4b02      	ldr	r3, [pc, #8]	; (57f4 <init_work+0x10>)
    57ec:	681b      	ldr	r3, [r3, #0]
    57ee:	b103      	cbz	r3, 57f2 <init_work+0xe>
		ready_cb(err);
    57f0:	4798      	blx	r3
    57f2:	bd08      	pop	{r3, pc}
    57f4:	20000420 	.word	0x20000420

000057f8 <hci_disconn_complete>:
{
    57f8:	b530      	push	{r4, r5, lr}
    57fa:	b085      	sub	sp, #20
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    57fc:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    57fe:	f8b4 0001 	ldrh.w	r0, [r4, #1]
	if (evt->status) {
    5802:	7823      	ldrb	r3, [r4, #0]
    5804:	b10b      	cbz	r3, 580a <hci_disconn_complete+0x12>
}
    5806:	b005      	add	sp, #20
    5808:	bd30      	pop	{r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
    580a:	f001 fc3f 	bl	708c <bt_conn_lookup_handle>
	if (!conn) {
    580e:	4605      	mov	r5, r0
    5810:	2800      	cmp	r0, #0
    5812:	d034      	beq.n	587e <hci_disconn_complete+0x86>
	conn->err = evt->reason;
    5814:	78e3      	ldrb	r3, [r4, #3]
    5816:	72c3      	strb	r3, [r0, #11]
	k_call_stacks_analyze();
    5818:	f022 fafa 	bl	27e10 <k_call_stacks_analyze>
		} else {
			break;
		}
	}
#else
	for (i = 0; i < size; i++) {
    581c:	2200      	movs	r2, #0
	size_t unused = 0;
    581e:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    5820:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
    5824:	d206      	bcs.n	5834 <hci_disconn_complete+0x3c>
		if ((unsigned char)stack[i] == 0xaa) {
    5826:	4927      	ldr	r1, [pc, #156]	; (58c4 <hci_disconn_complete+0xcc>)
    5828:	5c89      	ldrb	r1, [r1, r2]
    582a:	29aa      	cmp	r1, #170	; 0xaa
    582c:	d102      	bne.n	5834 <hci_disconn_complete+0x3c>
			unused++;
    582e:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    5830:	3201      	adds	r2, #1
    5832:	e7f5      	b.n	5820 <hci_disconn_complete+0x28>
	unsigned int pcnt, unused = 0;

	unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	pcnt = ((size - unused) * 100) / size;
    5834:	f5c3 7120 	rsb	r1, r3, #640	; 0x280
    5838:	2264      	movs	r2, #100	; 0x64
    583a:	fb02 f201 	mul.w	r2, r2, r1
    583e:	4822      	ldr	r0, [pc, #136]	; (58c8 <hci_disconn_complete+0xd0>)
    5840:	fba0 0202 	umull	r0, r2, r0, r2
    5844:	0a52      	lsrs	r2, r2, #9

	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    5846:	9202      	str	r2, [sp, #8]
    5848:	f44f 7220 	mov.w	r2, #640	; 0x280
    584c:	9201      	str	r2, [sp, #4]
    584e:	9100      	str	r1, [sp, #0]
    5850:	491e      	ldr	r1, [pc, #120]	; (58cc <hci_disconn_complete+0xd4>)
    5852:	481f      	ldr	r0, [pc, #124]	; (58d0 <hci_disconn_complete+0xd8>)
    5854:	f7fd fb4e 	bl	2ef4 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5858:	2100      	movs	r1, #0
    585a:	4628      	mov	r0, r5
    585c:	f001 fd28 	bl	72b0 <bt_conn_set_state>
	conn->handle = 0;
    5860:	2300      	movs	r3, #0
    5862:	802b      	strh	r3, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    5864:	78ab      	ldrb	r3, [r5, #2]
    5866:	bb03      	cbnz	r3, 58aa <hci_disconn_complete+0xb2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5868:	f3bf 8f5b 	dmb	ish
    586c:	686b      	ldr	r3, [r5, #4]
    586e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    5872:	f013 0f01 	tst.w	r3, #1
    5876:	d11c      	bne.n	58b2 <hci_disconn_complete+0xba>
	bt_conn_unref(conn);
    5878:	4628      	mov	r0, r5
    587a:	f001 fc8b 	bl	7194 <bt_conn_unref>
    587e:	f3bf 8f5b 	dmb	ish
    5882:	4b14      	ldr	r3, [pc, #80]	; (58d4 <hci_disconn_complete+0xdc>)
    5884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5886:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    588a:	f013 0f40 	tst.w	r3, #64	; 0x40
    588e:	d0ba      	beq.n	5806 <hci_disconn_complete+0xe>
    5890:	f3bf 8f5b 	dmb	ish
    5894:	4b0f      	ldr	r3, [pc, #60]	; (58d4 <hci_disconn_complete+0xdc>)
    5896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5898:	f3bf 8f5b 	dmb	ish
    589c:	f013 0f20 	tst.w	r3, #32
    58a0:	d1b1      	bne.n	5806 <hci_disconn_complete+0xe>
		set_advertise_enable(true);
    58a2:	2001      	movs	r0, #1
    58a4:	f7ff fce4 	bl	5270 <set_advertise_enable>
    58a8:	e7ad      	b.n	5806 <hci_disconn_complete+0xe>
		bt_conn_unref(conn);
    58aa:	4628      	mov	r0, r5
    58ac:	f001 fc72 	bl	7194 <bt_conn_unref>
		return;
    58b0:	e7a9      	b.n	5806 <hci_disconn_complete+0xe>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    58b2:	2101      	movs	r1, #1
    58b4:	4628      	mov	r0, r5
    58b6:	f001 fcfb 	bl	72b0 <bt_conn_set_state>
		bt_le_scan_update(false);
    58ba:	2000      	movs	r0, #0
    58bc:	f7ff ff40 	bl	5740 <bt_le_scan_update>
    58c0:	e7da      	b.n	5878 <hci_disconn_complete+0x80>
    58c2:	bf00      	nop
    58c4:	20003d10 	.word	0x20003d10
    58c8:	cccccccd 	.word	0xcccccccd
    58cc:	00030d6c 	.word	0x00030d6c
    58d0:	00030d78 	.word	0x00030d78
    58d4:	2000b970 	.word	0x2000b970

000058d8 <check_pending_conn>:
{
    58d8:	b538      	push	{r3, r4, r5, lr}
    58da:	f3bf 8f5b 	dmb	ish
    58de:	4b23      	ldr	r3, [pc, #140]	; (596c <check_pending_conn+0x94>)
    58e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    58e2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    58e6:	f413 7f80 	tst.w	r3, #256	; 0x100
    58ea:	d101      	bne.n	58f0 <check_pending_conn+0x18>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    58ec:	2a01      	cmp	r2, #1
    58ee:	d900      	bls.n	58f2 <check_pending_conn+0x1a>
    58f0:	bd38      	pop	{r3, r4, r5, pc}
    58f2:	460c      	mov	r4, r1
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    58f4:	2101      	movs	r1, #1
    58f6:	f001 fc1b 	bl	7130 <bt_conn_lookup_state_le>
	if (!conn) {
    58fa:	4605      	mov	r5, r0
    58fc:	2800      	cmp	r0, #0
    58fe:	d0f7      	beq.n	58f0 <check_pending_conn+0x18>
	if (bt_hci_stop_scanning()) {
    5900:	f7ff fc60 	bl	51c4 <bt_hci_stop_scanning>
    5904:	b9c0      	cbnz	r0, 5938 <check_pending_conn+0x60>
    5906:	f3bf 8f5b 	dmb	ish
    590a:	4b18      	ldr	r3, [pc, #96]	; (596c <check_pending_conn+0x94>)
    590c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    590e:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    5912:	f013 0f04 	tst.w	r3, #4
    5916:	d11c      	bne.n	5952 <check_pending_conn+0x7a>
	memcpy(dst, src, sizeof(*dst));
    5918:	2207      	movs	r2, #7
    591a:	4914      	ldr	r1, [pc, #80]	; (596c <check_pending_conn+0x94>)
    591c:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    5920:	f7fa fcce 	bl	2c0 <memcpy>
    5924:	2207      	movs	r2, #7
    5926:	4621      	mov	r1, r4
    5928:	f105 0056 	add.w	r0, r5, #86	; 0x56
    592c:	f7fa fcc8 	bl	2c0 <memcpy>
	if (hci_le_create_conn(conn)) {
    5930:	4628      	mov	r0, r5
    5932:	f7ff fcdb 	bl	52ec <hci_le_create_conn>
    5936:	b180      	cbz	r0, 595a <check_pending_conn+0x82>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    5938:	231f      	movs	r3, #31
    593a:	72eb      	strb	r3, [r5, #11]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    593c:	2100      	movs	r1, #0
    593e:	4628      	mov	r0, r5
    5940:	f001 fcb6 	bl	72b0 <bt_conn_set_state>
	bt_conn_unref(conn);
    5944:	4628      	mov	r0, r5
    5946:	f001 fc25 	bl	7194 <bt_conn_unref>
	bt_le_scan_update(false);
    594a:	2000      	movs	r0, #0
    594c:	f7ff fef8 	bl	5740 <bt_le_scan_update>
    5950:	e7ce      	b.n	58f0 <check_pending_conn+0x18>
			set_random_address(&bt_dev.id_addr.a);
    5952:	4807      	ldr	r0, [pc, #28]	; (5970 <check_pending_conn+0x98>)
    5954:	f7ff fbee 	bl	5134 <set_random_address>
    5958:	e7de      	b.n	5918 <check_pending_conn+0x40>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    595a:	2102      	movs	r1, #2
    595c:	4628      	mov	r0, r5
    595e:	f001 fca7 	bl	72b0 <bt_conn_set_state>
	bt_conn_unref(conn);
    5962:	4628      	mov	r0, r5
    5964:	f001 fc16 	bl	7194 <bt_conn_unref>
	return;
    5968:	bd38      	pop	{r3, r4, r5, pc}
    596a:	bf00      	nop
    596c:	2000b970 	.word	0x2000b970
    5970:	2000b971 	.word	0x2000b971

00005974 <le_adv_report>:
{
    5974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5978:	b083      	sub	sp, #12
    597a:	4605      	mov	r5, r0
	u8_t num_reports = net_buf_pull_u8(buf);
    597c:	f100 0308 	add.w	r3, r0, #8
    5980:	9300      	str	r3, [sp, #0]
    5982:	4618      	mov	r0, r3
    5984:	f015 f97f 	bl	1ac86 <net_buf_simple_pull_u8>
	while (num_reports--) {
    5988:	e00a      	b.n	59a0 <le_adv_report+0x2c>
		check_pending_conn(addr, &info->addr, info->evt_type);
    598a:	7822      	ldrb	r2, [r4, #0]
    598c:	4631      	mov	r1, r6
    598e:	9801      	ldr	r0, [sp, #4]
    5990:	f7ff ffa2 	bl	58d8 <check_pending_conn>
		net_buf_pull(buf, info->length + sizeof(rssi));
    5994:	7a21      	ldrb	r1, [r4, #8]
    5996:	3101      	adds	r1, #1
    5998:	9800      	ldr	r0, [sp, #0]
    599a:	f015 f96c 	bl	1ac76 <net_buf_simple_pull>
	while (num_reports--) {
    599e:	4638      	mov	r0, r7
    59a0:	1e43      	subs	r3, r0, #1
    59a2:	b2df      	uxtb	r7, r3
    59a4:	b368      	cbz	r0, 5a02 <le_adv_report+0x8e>
		info = (void *)buf->data;
    59a6:	68ac      	ldr	r4, [r5, #8]
		net_buf_pull(buf, sizeof(*info));
    59a8:	2109      	movs	r1, #9
    59aa:	f8dd 9000 	ldr.w	r9, [sp]
    59ae:	4648      	mov	r0, r9
    59b0:	f015 f961 	bl	1ac76 <net_buf_simple_pull>
		rssi = info->data[info->length];
    59b4:	7a23      	ldrb	r3, [r4, #8]
    59b6:	4423      	add	r3, r4
    59b8:	f993 8009 	ldrsb.w	r8, [r3, #9]
		addr = find_id_addr(&info->addr);
    59bc:	1c66      	adds	r6, r4, #1
    59be:	4630      	mov	r0, r6
    59c0:	f7fe ff6b 	bl	489a <find_id_addr>
    59c4:	9001      	str	r0, [sp, #4]
		if (scan_dev_found_cb) {
    59c6:	4b10      	ldr	r3, [pc, #64]	; (5a08 <le_adv_report+0x94>)
    59c8:	681b      	ldr	r3, [r3, #0]
    59ca:	2b00      	cmp	r3, #0
    59cc:	d0dd      	beq.n	598a <le_adv_report+0x16>
	state->offset = net_buf_simple_headroom(buf);
    59ce:	f8cd 9000 	str.w	r9, [sp]
    59d2:	4648      	mov	r0, r9
    59d4:	f015 f967 	bl	1aca6 <net_buf_simple_headroom>
    59d8:	fa1f fa80 	uxth.w	sl, r0
	state->len = buf->len;
    59dc:	f8b5 900c 	ldrh.w	r9, [r5, #12]
			buf->len = info->length;
    59e0:	7a23      	ldrb	r3, [r4, #8]
    59e2:	81ab      	strh	r3, [r5, #12]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    59e4:	4b08      	ldr	r3, [pc, #32]	; (5a08 <le_adv_report+0x94>)
    59e6:	f8d3 b000 	ldr.w	fp, [r3]
    59ea:	9b00      	ldr	r3, [sp, #0]
    59ec:	7822      	ldrb	r2, [r4, #0]
    59ee:	4641      	mov	r1, r8
    59f0:	9801      	ldr	r0, [sp, #4]
    59f2:	47d8      	blx	fp
	buf->data = buf->__buf + state->offset;
    59f4:	f105 0310 	add.w	r3, r5, #16
    59f8:	4453      	add	r3, sl
    59fa:	60ab      	str	r3, [r5, #8]
	buf->len = state->len;
    59fc:	f8a5 900c 	strh.w	r9, [r5, #12]
    5a00:	e7c3      	b.n	598a <le_adv_report+0x16>
}
    5a02:	b003      	add	sp, #12
    5a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a08:	20000424 	.word	0x20000424

00005a0c <hci_le_read_remote_features>:
{
    5a0c:	b538      	push	{r3, r4, r5, lr}
    5a0e:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    5a10:	2102      	movs	r1, #2
    5a12:	f242 0016 	movw	r0, #8214	; 0x2016
    5a16:	f7ff f885 	bl	4b24 <bt_hci_cmd_create>
	if (!buf) {
    5a1a:	b168      	cbz	r0, 5a38 <hci_le_read_remote_features+0x2c>
    5a1c:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5a1e:	2102      	movs	r1, #2
    5a20:	3008      	adds	r0, #8
    5a22:	f015 f8db 	bl	1abdc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5a26:	882b      	ldrh	r3, [r5, #0]
    5a28:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    5a2a:	4621      	mov	r1, r4
    5a2c:	f242 0016 	movw	r0, #8214	; 0x2016
    5a30:	f7ff fdd6 	bl	55e0 <bt_hci_cmd_send>
	return 0;
    5a34:	2000      	movs	r0, #0
    5a36:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    5a38:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5a3c:	bd38      	pop	{r3, r4, r5, pc}

00005a3e <hci_le_set_phy>:
{
    5a3e:	b538      	push	{r3, r4, r5, lr}
    5a40:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    5a42:	2107      	movs	r1, #7
    5a44:	f242 0032 	movw	r0, #8242	; 0x2032
    5a48:	f7ff f86c 	bl	4b24 <bt_hci_cmd_create>
	if (!buf) {
    5a4c:	b1a0      	cbz	r0, 5a78 <hci_le_set_phy+0x3a>
    5a4e:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5a50:	2107      	movs	r1, #7
    5a52:	3008      	adds	r0, #8
    5a54:	f015 f8c2 	bl	1abdc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5a58:	8823      	ldrh	r3, [r4, #0]
    5a5a:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    5a5c:	2400      	movs	r4, #0
    5a5e:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    5a60:	2302      	movs	r3, #2
    5a62:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    5a64:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    5a66:	7144      	strb	r4, [r0, #5]
    5a68:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    5a6a:	4629      	mov	r1, r5
    5a6c:	f242 0032 	movw	r0, #8242	; 0x2032
    5a70:	f7ff fdb6 	bl	55e0 <bt_hci_cmd_send>
	return 0;
    5a74:	4620      	mov	r0, r4
    5a76:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    5a78:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5a7c:	bd38      	pop	{r3, r4, r5, pc}

00005a7e <hci_le_set_data_len>:
{
    5a7e:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a80:	b083      	sub	sp, #12
    5a82:	4604      	mov	r4, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    5a84:	aa01      	add	r2, sp, #4
    5a86:	2100      	movs	r1, #0
    5a88:	f242 002f 	movw	r0, #8239	; 0x202f
    5a8c:	f7ff f876 	bl	4b7c <bt_hci_cmd_send_sync>
	if (err) {
    5a90:	4603      	mov	r3, r0
    5a92:	b110      	cbz	r0, 5a9a <hci_le_set_data_len+0x1c>
}
    5a94:	4618      	mov	r0, r3
    5a96:	b003      	add	sp, #12
    5a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    5a9a:	9801      	ldr	r0, [sp, #4]
    5a9c:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    5a9e:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    5aa2:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	net_buf_unref(rsp);
    5aa6:	f015 f84d 	bl	1ab44 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    5aaa:	2106      	movs	r1, #6
    5aac:	f242 0022 	movw	r0, #8226	; 0x2022
    5ab0:	f7ff f838 	bl	4b24 <bt_hci_cmd_create>
	if (!buf) {
    5ab4:	4605      	mov	r5, r0
    5ab6:	b170      	cbz	r0, 5ad6 <hci_le_set_data_len+0x58>
	cp = net_buf_add(buf, sizeof(*cp));
    5ab8:	2106      	movs	r1, #6
    5aba:	3008      	adds	r0, #8
    5abc:	f015 f88e 	bl	1abdc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5ac0:	8823      	ldrh	r3, [r4, #0]
    5ac2:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    5ac4:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    5ac6:	8086      	strh	r6, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    5ac8:	4629      	mov	r1, r5
    5aca:	f242 0022 	movw	r0, #8226	; 0x2022
    5ace:	f7ff fd87 	bl	55e0 <bt_hci_cmd_send>
    5ad2:	4603      	mov	r3, r0
    5ad4:	e7de      	b.n	5a94 <hci_le_set_data_len+0x16>
		return -ENOBUFS;
    5ad6:	f06f 0368 	mvn.w	r3, #104	; 0x68
    5ada:	e7db      	b.n	5a94 <hci_le_set_data_len+0x16>

00005adc <le_conn_complete>:
{
    5adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    5ae0:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5ae2:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
    5ae6:	7823      	ldrb	r3, [r4, #0]
    5ae8:	b17b      	cbz	r3, 5b0a <le_conn_complete+0x2e>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    5aea:	2102      	movs	r1, #2
    5aec:	2000      	movs	r0, #0
    5aee:	f001 fb1f 	bl	7130 <bt_conn_lookup_state_le>
		if (!conn) {
    5af2:	4605      	mov	r5, r0
    5af4:	b3d0      	cbz	r0, 5b6c <le_conn_complete+0x90>
		conn->err = evt->status;
    5af6:	7823      	ldrb	r3, [r4, #0]
    5af8:	72c3      	strb	r3, [r0, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5afa:	2100      	movs	r1, #0
    5afc:	f001 fbd8 	bl	72b0 <bt_conn_set_state>
		bt_conn_unref(conn);
    5b00:	4628      	mov	r0, r5
    5b02:	f001 fb47 	bl	7194 <bt_conn_unref>
		return;
    5b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	id_addr = find_id_addr(&evt->peer_addr);
    5b0a:	1d27      	adds	r7, r4, #4
    5b0c:	4638      	mov	r0, r7
    5b0e:	f7fe fec4 	bl	489a <find_id_addr>
    5b12:	4680      	mov	r8, r0
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    5b14:	2102      	movs	r1, #2
    5b16:	f001 fb0b 	bl	7130 <bt_conn_lookup_state_le>
    5b1a:	4605      	mov	r5, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    5b1c:	78e3      	ldrb	r3, [r4, #3]
    5b1e:	2b01      	cmp	r3, #1
    5b20:	d026      	beq.n	5b70 <le_conn_complete+0x94>
	if (!conn) {
    5b22:	b31d      	cbz	r5, 5b6c <le_conn_complete+0x90>
	conn->handle   = handle;
    5b24:	4628      	mov	r0, r5
    5b26:	f820 6b48 	strh.w	r6, [r0], #72
    5b2a:	2207      	movs	r2, #7
    5b2c:	4641      	mov	r1, r8
    5b2e:	f7fa fbc7 	bl	2c0 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    5b32:	f8b4 300b 	ldrh.w	r3, [r4, #11]
    5b36:	f8a5 305e 	strh.w	r3, [r5, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    5b3a:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    5b3e:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    5b42:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    5b46:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
	conn->role = evt->role;
    5b4a:	78e3      	ldrb	r3, [r4, #3]
    5b4c:	70eb      	strb	r3, [r5, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    5b4e:	2b01      	cmp	r3, #1
    5b50:	d022      	beq.n	5b98 <le_conn_complete+0xbc>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    5b52:	2103      	movs	r1, #3
    5b54:	4628      	mov	r0, r5
    5b56:	f001 fbab 	bl	72b0 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    5b5a:	7b2b      	ldrb	r3, [r5, #12]
    5b5c:	2b03      	cmp	r3, #3
    5b5e:	d03b      	beq.n	5bd8 <le_conn_complete+0xfc>
	bt_conn_unref(conn);
    5b60:	4628      	mov	r0, r5
    5b62:	f001 fb17 	bl	7194 <bt_conn_unref>
	bt_le_scan_update(false);
    5b66:	2000      	movs	r0, #0
    5b68:	f7ff fdea 	bl	5740 <bt_le_scan_update>
    5b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5b70:	4b3a      	ldr	r3, [pc, #232]	; (5c5c <le_conn_complete+0x180>)
    5b72:	f3bf 8f5b 	dmb	ish
    5b76:	e853 2f00 	ldrex	r2, [r3]
    5b7a:	f022 0220 	bic.w	r2, r2, #32
    5b7e:	e843 2100 	strex	r1, r2, [r3]
    5b82:	2900      	cmp	r1, #0
    5b84:	d1f7      	bne.n	5b76 <le_conn_complete+0x9a>
    5b86:	f3bf 8f5b 	dmb	ish
		if (!conn) {
    5b8a:	2d00      	cmp	r5, #0
    5b8c:	d1c9      	bne.n	5b22 <le_conn_complete+0x46>
			conn = bt_conn_add_le(id_addr);
    5b8e:	4640      	mov	r0, r8
    5b90:	f001 fa30 	bl	6ff4 <bt_conn_add_le>
    5b94:	4605      	mov	r5, r0
    5b96:	e7c4      	b.n	5b22 <le_conn_complete+0x46>
    5b98:	2207      	movs	r2, #7
    5b9a:	4639      	mov	r1, r7
    5b9c:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    5ba0:	f7fa fb8e 	bl	2c0 <memcpy>
    5ba4:	4e2e      	ldr	r6, [pc, #184]	; (5c60 <le_conn_complete+0x184>)
    5ba6:	2207      	movs	r2, #7
    5ba8:	4631      	mov	r1, r6
    5baa:	f105 0056 	add.w	r0, r5, #86	; 0x56
    5bae:	f7fa fb87 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5bb2:	f3bf 8f5b 	dmb	ish
    5bb6:	6f33      	ldr	r3, [r6, #112]	; 0x70
    5bb8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5bbc:	f013 0f40 	tst.w	r3, #64	; 0x40
    5bc0:	d0c7      	beq.n	5b52 <le_conn_complete+0x76>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    5bc2:	e9d6 2320 	ldrd	r2, r3, [r6, #128]	; 0x80
    5bc6:	2200      	movs	r2, #0
    5bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5bcc:	4313      	orrs	r3, r2
    5bce:	d0c0      	beq.n	5b52 <le_conn_complete+0x76>
			set_advertise_enable(true);
    5bd0:	2001      	movs	r0, #1
    5bd2:	f7ff fb4d 	bl	5270 <set_advertise_enable>
    5bd6:	e7bc      	b.n	5b52 <le_conn_complete+0x76>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    5bd8:	78e3      	ldrb	r3, [r4, #3]
    5bda:	b12b      	cbz	r3, 5be8 <le_conn_complete+0x10c>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    5bdc:	4b20      	ldr	r3, [pc, #128]	; (5c60 <le_conn_complete+0x184>)
    5bde:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    5be2:	f013 0f08 	tst.w	r3, #8
    5be6:	d004      	beq.n	5bf2 <le_conn_complete+0x116>
		err = hci_le_read_remote_features(conn);
    5be8:	4628      	mov	r0, r5
    5bea:	f7ff ff0f 	bl	5a0c <hci_le_read_remote_features>
		if (!err) {
    5bee:	2800      	cmp	r0, #0
    5bf0:	d0b6      	beq.n	5b60 <le_conn_complete+0x84>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    5bf2:	4b1b      	ldr	r3, [pc, #108]	; (5c60 <le_conn_complete+0x184>)
    5bf4:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    5bf8:	f013 0f01 	tst.w	r3, #1
    5bfc:	d10d      	bne.n	5c1a <le_conn_complete+0x13e>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    5bfe:	4b18      	ldr	r3, [pc, #96]	; (5c60 <le_conn_complete+0x184>)
    5c00:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5c04:	f013 0f20 	tst.w	r3, #32
    5c08:	d003      	beq.n	5c12 <le_conn_complete+0x136>
		err = hci_le_set_data_len(conn);
    5c0a:	4628      	mov	r0, r5
    5c0c:	f7ff ff37 	bl	5a7e <hci_le_set_data_len>
		if (!err) {
    5c10:	b1b0      	cbz	r0, 5c40 <le_conn_complete+0x164>
	update_conn_param(conn);
    5c12:	4628      	mov	r0, r5
    5c14:	f7fe fe4a 	bl	48ac <update_conn_param>
    5c18:	e7a2      	b.n	5b60 <le_conn_complete+0x84>
		err = hci_le_set_phy(conn);
    5c1a:	4628      	mov	r0, r5
    5c1c:	f7ff ff0f 	bl	5a3e <hci_le_set_phy>
		if (!err) {
    5c20:	2800      	cmp	r0, #0
    5c22:	d1ec      	bne.n	5bfe <le_conn_complete+0x122>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    5c24:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5c26:	f3bf 8f5b 	dmb	ish
    5c2a:	e853 2f00 	ldrex	r2, [r3]
    5c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5c32:	e843 2100 	strex	r1, r2, [r3]
    5c36:	2900      	cmp	r1, #0
    5c38:	d1f7      	bne.n	5c2a <le_conn_complete+0x14e>
    5c3a:	f3bf 8f5b 	dmb	ish
    5c3e:	e78f      	b.n	5b60 <le_conn_complete+0x84>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    5c40:	1d2b      	adds	r3, r5, #4
    5c42:	f3bf 8f5b 	dmb	ish
    5c46:	e853 2f00 	ldrex	r2, [r3]
    5c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5c4e:	e843 2100 	strex	r1, r2, [r3]
    5c52:	2900      	cmp	r1, #0
    5c54:	d1f7      	bne.n	5c46 <le_conn_complete+0x16a>
    5c56:	f3bf 8f5b 	dmb	ish
    5c5a:	e781      	b.n	5b60 <le_conn_complete+0x84>
    5c5c:	2000b9e0 	.word	0x2000b9e0
    5c60:	2000b970 	.word	0x2000b970

00005c64 <le_conn_complete>:
{
    5c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c68:	4604      	mov	r4, r0
    5c6a:	460f      	mov	r7, r1
    5c6c:	4690      	mov	r8, r2
	ll_rl_crpa_set(radio_cc->peer_addr_type, &radio_cc->peer_addr[0],
    5c6e:	1d85      	adds	r5, r0, #6
    5c70:	f100 060c 	add.w	r6, r0, #12
    5c74:	4633      	mov	r3, r6
    5c76:	22ff      	movs	r2, #255	; 0xff
    5c78:	4629      	mov	r1, r5
    5c7a:	7940      	ldrb	r0, [r0, #5]
    5c7c:	f014 fafa 	bl	1a274 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5c80:	4b40      	ldr	r3, [pc, #256]	; (5d84 <le_conn_complete+0x120>)
    5c82:	e9d3 2300 	ldrd	r2, r3, [r3]
    5c86:	2200      	movs	r2, #0
    5c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    5c8c:	4313      	orrs	r3, r2
    5c8e:	d077      	beq.n	5d80 <le_conn_complete+0x11c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    5c90:	4b3d      	ldr	r3, [pc, #244]	; (5d88 <le_conn_complete+0x124>)
    5c92:	e9d3 2300 	ldrd	r2, r3, [r3]
    5c96:	f002 0001 	and.w	r0, r2, #1
    5c9a:	2100      	movs	r1, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5c9c:	4301      	orrs	r1, r0
    5c9e:	d104      	bne.n	5caa <le_conn_complete+0x46>
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    5ca0:	f402 7000 	and.w	r0, r2, #512	; 0x200
    5ca4:	2100      	movs	r1, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    5ca6:	4301      	orrs	r1, r0
    5ca8:	d06a      	beq.n	5d80 <le_conn_complete+0x11c>
	if (!radio_cc->status) {
    5caa:	78e1      	ldrb	r1, [r4, #3]
    5cac:	b919      	cbnz	r1, 5cb6 <le_conn_complete+0x52>
		conn_count++;
    5cae:	4837      	ldr	r0, [pc, #220]	; (5d8c <le_conn_complete+0x128>)
    5cb0:	6801      	ldr	r1, [r0, #0]
    5cb2:	3101      	adds	r1, #1
    5cb4:	6001      	str	r1, [r0, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    5cb6:	f402 7200 	and.w	r2, r2, #512	; 0x200
    5cba:	2300      	movs	r3, #0
    5cbc:	4313      	orrs	r3, r2
    5cbe:	d03e      	beq.n	5d3e <le_conn_complete+0xda>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    5cc0:	221e      	movs	r2, #30
    5cc2:	210a      	movs	r1, #10
    5cc4:	4640      	mov	r0, r8
    5cc6:	f007 fb2d 	bl	d324 <meta_evt>
    5cca:	4680      	mov	r8, r0
		leecc->status = radio_cc->status;
    5ccc:	78e3      	ldrb	r3, [r4, #3]
    5cce:	7003      	strb	r3, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    5cd0:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = radio_cc->role;
    5cd4:	7923      	ldrb	r3, [r4, #4]
    5cd6:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    5cd8:	7963      	ldrb	r3, [r4, #5]
    5cda:	7103      	strb	r3, [r0, #4]
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    5cdc:	2206      	movs	r2, #6
    5cde:	4629      	mov	r1, r5
    5ce0:	3005      	adds	r0, #5
    5ce2:	f7fa faed 	bl	2c0 <memcpy>
		if ((radio_cc->own_addr_type) &&
    5ce6:	7ca3      	ldrb	r3, [r4, #18]
    5ce8:	b123      	cbz	r3, 5cf4 <le_conn_complete+0x90>
		    ((radio_cc->own_addr[5] & 0xc0) == 0x40)) {
    5cea:	7e23      	ldrb	r3, [r4, #24]
		if ((radio_cc->own_addr_type) &&
    5cec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5cf0:	2b40      	cmp	r3, #64	; 0x40
    5cf2:	d01c      	beq.n	5d2e <le_conn_complete+0xca>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    5cf4:	2206      	movs	r2, #6
    5cf6:	2100      	movs	r1, #0
    5cf8:	f108 000b 	add.w	r0, r8, #11
    5cfc:	f024 fa40 	bl	2a180 <memset>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    5d00:	2206      	movs	r2, #6
    5d02:	4631      	mov	r1, r6
    5d04:	f108 0011 	add.w	r0, r8, #17
    5d08:	f7fa fada 	bl	2c0 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    5d0c:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    5d10:	f8a8 3017 	strh.w	r3, [r8, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    5d14:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    5d18:	f8a8 3019 	strh.w	r3, [r8, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    5d1c:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    5d20:	f8a8 301b 	strh.w	r3, [r8, #27]
		leecc->clock_accuracy = radio_cc->mca;
    5d24:	7fe3      	ldrb	r3, [r4, #31]
    5d26:	f888 301d 	strb.w	r3, [r8, #29]
		return;
    5d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    5d2e:	2206      	movs	r2, #6
    5d30:	f104 0113 	add.w	r1, r4, #19
    5d34:	f108 000b 	add.w	r0, r8, #11
    5d38:	f7fa fac2 	bl	2c0 <memcpy>
    5d3c:	e7e0      	b.n	5d00 <le_conn_complete+0x9c>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    5d3e:	2212      	movs	r2, #18
    5d40:	2101      	movs	r1, #1
    5d42:	4640      	mov	r0, r8
    5d44:	f007 faee 	bl	d324 <meta_evt>
    5d48:	4606      	mov	r6, r0
	lecc->status = radio_cc->status;
    5d4a:	78e3      	ldrb	r3, [r4, #3]
    5d4c:	7003      	strb	r3, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    5d4e:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = radio_cc->role;
    5d52:	7923      	ldrb	r3, [r4, #4]
    5d54:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    5d56:	7963      	ldrb	r3, [r4, #5]
    5d58:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    5d5a:	2206      	movs	r2, #6
    5d5c:	4629      	mov	r1, r5
    5d5e:	3005      	adds	r0, #5
    5d60:	f7fa faae 	bl	2c0 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    5d64:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    5d68:	f8a6 300b 	strh.w	r3, [r6, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    5d6c:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    5d70:	f8a6 300d 	strh.w	r3, [r6, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    5d74:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    5d78:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = radio_cc->mca;
    5d7c:	7fe3      	ldrb	r3, [r4, #31]
    5d7e:	7473      	strb	r3, [r6, #17]
    5d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d84:	2000bc60 	.word	0x2000bc60
    5d88:	2000bc68 	.word	0x2000bc68
    5d8c:	20000b3c 	.word	0x20000b3c

00005d90 <le_remote_feat_complete>:
{
    5d90:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    5d92:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    5d94:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    5d98:	f001 f978 	bl	708c <bt_conn_lookup_handle>
	if (!conn) {
    5d9c:	b1f0      	cbz	r0, 5ddc <le_remote_feat_complete+0x4c>
    5d9e:	4604      	mov	r4, r0
	if (!evt->status) {
    5da0:	782b      	ldrb	r3, [r5, #0]
    5da2:	b1e3      	cbz	r3, 5dde <le_remote_feat_complete+0x4e>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    5da4:	4b24      	ldr	r3, [pc, #144]	; (5e38 <le_remote_feat_complete+0xa8>)
    5da6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    5daa:	f013 0f01 	tst.w	r3, #1
    5dae:	d004      	beq.n	5dba <le_remote_feat_complete+0x2a>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
    5db0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    5db4:	f013 0f01 	tst.w	r3, #1
    5db8:	d117      	bne.n	5dea <le_remote_feat_complete+0x5a>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    5dba:	4b1f      	ldr	r3, [pc, #124]	; (5e38 <le_remote_feat_complete+0xa8>)
    5dbc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5dc0:	f013 0f20 	tst.w	r3, #32
    5dc4:	d004      	beq.n	5dd0 <le_remote_feat_complete+0x40>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    5dc6:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    5dca:	f013 0f20 	tst.w	r3, #32
    5dce:	d11f      	bne.n	5e10 <le_remote_feat_complete+0x80>
	update_conn_param(conn);
    5dd0:	4620      	mov	r0, r4
    5dd2:	f7fe fd6b 	bl	48ac <update_conn_param>
	bt_conn_unref(conn);
    5dd6:	4620      	mov	r0, r4
    5dd8:	f001 f9dc 	bl	7194 <bt_conn_unref>
    5ddc:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(conn->le.features, evt->features,
    5dde:	2208      	movs	r2, #8
    5de0:	1ce9      	adds	r1, r5, #3
    5de2:	3068      	adds	r0, #104	; 0x68
    5de4:	f7fa fa6c 	bl	2c0 <memcpy>
    5de8:	e7dc      	b.n	5da4 <le_remote_feat_complete+0x14>
		err = hci_le_set_phy(conn);
    5dea:	4620      	mov	r0, r4
    5dec:	f7ff fe27 	bl	5a3e <hci_le_set_phy>
		if (!err) {
    5df0:	2800      	cmp	r0, #0
    5df2:	d1e2      	bne.n	5dba <le_remote_feat_complete+0x2a>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    5df4:	1d23      	adds	r3, r4, #4
    5df6:	f3bf 8f5b 	dmb	ish
    5dfa:	e853 2f00 	ldrex	r2, [r3]
    5dfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5e02:	e843 2100 	strex	r1, r2, [r3]
    5e06:	2900      	cmp	r1, #0
    5e08:	d1f7      	bne.n	5dfa <le_remote_feat_complete+0x6a>
    5e0a:	f3bf 8f5b 	dmb	ish
    5e0e:	e7e2      	b.n	5dd6 <le_remote_feat_complete+0x46>
		err = hci_le_set_data_len(conn);
    5e10:	4620      	mov	r0, r4
    5e12:	f7ff fe34 	bl	5a7e <hci_le_set_data_len>
		if (!err) {
    5e16:	2800      	cmp	r0, #0
    5e18:	d1da      	bne.n	5dd0 <le_remote_feat_complete+0x40>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    5e1a:	1d23      	adds	r3, r4, #4
    5e1c:	f3bf 8f5b 	dmb	ish
    5e20:	e853 2f00 	ldrex	r2, [r3]
    5e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5e28:	e843 2100 	strex	r1, r2, [r3]
    5e2c:	2900      	cmp	r1, #0
    5e2e:	d1f7      	bne.n	5e20 <le_remote_feat_complete+0x90>
    5e30:	f3bf 8f5b 	dmb	ish
    5e34:	e7cf      	b.n	5dd6 <le_remote_feat_complete+0x46>
    5e36:	bf00      	nop
    5e38:	2000b970 	.word	0x2000b970

00005e3c <le_remote_feat_complete>:
{
    5e3c:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5e3e:	4c14      	ldr	r4, [pc, #80]	; (5e90 <le_remote_feat_complete+0x54>)
    5e40:	e9d4 4500 	ldrd	r4, r5, [r4]
    5e44:	2400      	movs	r4, #0
    5e46:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    5e4a:	432c      	orrs	r4, r5
    5e4c:	d007      	beq.n	5e5e <le_remote_feat_complete+0x22>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    5e4e:	4c11      	ldr	r4, [pc, #68]	; (5e94 <le_remote_feat_complete+0x58>)
    5e50:	e9d4 4500 	ldrd	r4, r5, [r4]
    5e54:	f004 0408 	and.w	r4, r4, #8
    5e58:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5e5a:	432c      	orrs	r4, r5
    5e5c:	d100      	bne.n	5e60 <le_remote_feat_complete+0x24>
    5e5e:	bd70      	pop	{r4, r5, r6, pc}
    5e60:	4615      	mov	r5, r2
    5e62:	460e      	mov	r6, r1
    5e64:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    5e66:	220b      	movs	r2, #11
    5e68:	2104      	movs	r1, #4
    5e6a:	4618      	mov	r0, r3
    5e6c:	f007 fa5a 	bl	d324 <meta_evt>
	sep->status = status;
    5e70:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    5e72:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    5e76:	b12c      	cbz	r4, 5e84 <le_remote_feat_complete+0x48>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    5e78:	2208      	movs	r2, #8
    5e7a:	2100      	movs	r1, #0
    5e7c:	3003      	adds	r0, #3
    5e7e:	f024 f97f 	bl	2a180 <memset>
    5e82:	e7ec      	b.n	5e5e <le_remote_feat_complete+0x22>
		memcpy(&sep->features[0],
    5e84:	2208      	movs	r2, #8
    5e86:	1d31      	adds	r1, r6, #4
    5e88:	3003      	adds	r0, #3
    5e8a:	f7fa fa19 	bl	2c0 <memcpy>
    5e8e:	bd70      	pop	{r4, r5, r6, pc}
    5e90:	2000bc60 	.word	0x2000bc60
    5e94:	2000bc68 	.word	0x2000bc68

00005e98 <le_phy_update_complete>:
{
    5e98:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
    5e9a:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    5e9c:	f8b3 0001 	ldrh.w	r0, [r3, #1]
    5ea0:	f001 f8f4 	bl	708c <bt_conn_lookup_handle>
	if (!conn) {
    5ea4:	b308      	cbz	r0, 5eea <le_phy_update_complete+0x52>
    5ea6:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    5ea8:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5eaa:	f3bf 8f5b 	dmb	ish
    5eae:	e855 3f00 	ldrex	r3, [r5]
    5eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    5eb6:	e845 2100 	strex	r1, r2, [r5]
    5eba:	2900      	cmp	r1, #0
    5ebc:	d1f7      	bne.n	5eae <le_phy_update_complete+0x16>
    5ebe:	f3bf 8f5b 	dmb	ish
    5ec2:	f013 0f80 	tst.w	r3, #128	; 0x80
    5ec6:	d00d      	beq.n	5ee4 <le_phy_update_complete+0x4c>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    5ec8:	4b11      	ldr	r3, [pc, #68]	; (5f10 <le_phy_update_complete+0x78>)
    5eca:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5ece:	f013 0f20 	tst.w	r3, #32
    5ed2:	d004      	beq.n	5ede <le_phy_update_complete+0x46>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    5ed4:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    5ed8:	f013 0f20 	tst.w	r3, #32
    5edc:	d106      	bne.n	5eec <le_phy_update_complete+0x54>
	update_conn_param(conn);
    5ede:	4620      	mov	r0, r4
    5ee0:	f7fe fce4 	bl	48ac <update_conn_param>
	bt_conn_unref(conn);
    5ee4:	4620      	mov	r0, r4
    5ee6:	f001 f955 	bl	7194 <bt_conn_unref>
    5eea:	bd38      	pop	{r3, r4, r5, pc}
		err = hci_le_set_data_len(conn);
    5eec:	4620      	mov	r0, r4
    5eee:	f7ff fdc6 	bl	5a7e <hci_le_set_data_len>
		if (!err) {
    5ef2:	2800      	cmp	r0, #0
    5ef4:	d1f3      	bne.n	5ede <le_phy_update_complete+0x46>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5ef6:	f3bf 8f5b 	dmb	ish
    5efa:	e855 3f00 	ldrex	r3, [r5]
    5efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5f02:	e845 3200 	strex	r2, r3, [r5]
    5f06:	2a00      	cmp	r2, #0
    5f08:	d1f7      	bne.n	5efa <le_phy_update_complete+0x62>
    5f0a:	f3bf 8f5b 	dmb	ish
    5f0e:	e7e9      	b.n	5ee4 <le_phy_update_complete+0x4c>
    5f10:	2000b970 	.word	0x2000b970

00005f14 <le_conn_param_neg_reply>:
{
    5f14:	b570      	push	{r4, r5, r6, lr}
    5f16:	4606      	mov	r6, r0
    5f18:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    5f1a:	2103      	movs	r1, #3
    5f1c:	f242 0021 	movw	r0, #8225	; 0x2021
    5f20:	f7fe fe00 	bl	4b24 <bt_hci_cmd_create>
	if (!buf) {
    5f24:	b160      	cbz	r0, 5f40 <le_conn_param_neg_reply+0x2c>
    5f26:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5f28:	2103      	movs	r1, #3
    5f2a:	3008      	adds	r0, #8
    5f2c:	f014 fe56 	bl	1abdc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    5f30:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
    5f32:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    5f34:	4621      	mov	r1, r4
    5f36:	f242 0021 	movw	r0, #8225	; 0x2021
    5f3a:	f7ff fb51 	bl	55e0 <bt_hci_cmd_send>
    5f3e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    5f40:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5f44:	bd70      	pop	{r4, r5, r6, pc}

00005f46 <le_conn_param_req_reply>:
{
    5f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f48:	4607      	mov	r7, r0
    5f4a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    5f4c:	210e      	movs	r1, #14
    5f4e:	f242 0020 	movw	r0, #8224	; 0x2020
    5f52:	f7fe fde7 	bl	4b24 <bt_hci_cmd_create>
	if (!buf) {
    5f56:	b1c0      	cbz	r0, 5f8a <le_conn_param_req_reply+0x44>
    5f58:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5f5a:	210e      	movs	r1, #14
    5f5c:	3008      	adds	r0, #8
    5f5e:	f014 fe3d 	bl	1abdc <net_buf_simple_add>
    5f62:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    5f64:	220e      	movs	r2, #14
    5f66:	2100      	movs	r1, #0
    5f68:	f024 f90a 	bl	2a180 <memset>
	cp->handle = sys_cpu_to_le16(handle);
    5f6c:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    5f6e:	882b      	ldrh	r3, [r5, #0]
    5f70:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    5f72:	886b      	ldrh	r3, [r5, #2]
    5f74:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    5f76:	88ab      	ldrh	r3, [r5, #4]
    5f78:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    5f7a:	88eb      	ldrh	r3, [r5, #6]
    5f7c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    5f7e:	4631      	mov	r1, r6
    5f80:	f242 0020 	movw	r0, #8224	; 0x2020
    5f84:	f7ff fb2c 	bl	55e0 <bt_hci_cmd_send>
    5f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    5f8a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005f90 <le_conn_param_req_reply>:
{
    5f90:	b570      	push	{r4, r5, r6, lr}
    5f92:	b082      	sub	sp, #8
    5f94:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    5f96:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    5f98:	8814      	ldrh	r4, [r2, #0]
	interval_max = sys_le16_to_cpu(cmd->interval_max);
    5f9a:	8893      	ldrh	r3, [r2, #4]
	latency = sys_le16_to_cpu(cmd->latency);
    5f9c:	88d1      	ldrh	r1, [r2, #6]
	timeout = sys_le16_to_cpu(cmd->timeout);
    5f9e:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    5fa0:	9201      	str	r2, [sp, #4]
    5fa2:	9100      	str	r1, [sp, #0]
    5fa4:	2200      	movs	r2, #0
    5fa6:	2102      	movs	r1, #2
    5fa8:	b2a0      	uxth	r0, r4
    5faa:	f012 f929 	bl	18200 <ll_conn_update>
    5fae:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    5fb0:	2103      	movs	r1, #3
    5fb2:	4630      	mov	r0, r6
    5fb4:	f007 f91c 	bl	d1f0 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    5fb8:	b12d      	cbz	r5, 5fc6 <le_conn_param_req_reply+0x36>
    5fba:	230c      	movs	r3, #12
    5fbc:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    5fbe:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    5fc2:	b002      	add	sp, #8
    5fc4:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    5fc6:	2300      	movs	r3, #0
    5fc8:	e7f8      	b.n	5fbc <le_conn_param_req_reply+0x2c>
	...

00005fcc <le_conn_param_req>:
{
    5fcc:	b530      	push	{r4, r5, lr}
    5fce:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    5fd0:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    5fd2:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    5fd4:	885a      	ldrh	r2, [r3, #2]
    5fd6:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    5fda:	889a      	ldrh	r2, [r3, #4]
    5fdc:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    5fe0:	88da      	ldrh	r2, [r3, #6]
    5fe2:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    5fe6:	891b      	ldrh	r3, [r3, #8]
    5fe8:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    5fec:	4620      	mov	r0, r4
    5fee:	f001 f84d 	bl	708c <bt_conn_lookup_handle>
	if (!conn) {
    5ff2:	b178      	cbz	r0, 6014 <le_conn_param_req+0x48>
    5ff4:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
    5ff6:	4669      	mov	r1, sp
    5ff8:	f000 fdf6 	bl	6be8 <le_param_req>
    5ffc:	b980      	cbnz	r0, 6020 <le_conn_param_req+0x54>
		err = le_conn_param_neg_reply(handle,
    5ffe:	211e      	movs	r1, #30
    6000:	4620      	mov	r0, r4
    6002:	f7ff ff87 	bl	5f14 <le_conn_param_neg_reply>
    6006:	4604      	mov	r4, r0
	bt_conn_unref(conn);
    6008:	4628      	mov	r0, r5
    600a:	f001 f8c3 	bl	7194 <bt_conn_unref>
}
    600e:	4620      	mov	r0, r4
    6010:	b003      	add	sp, #12
    6012:	bd30      	pop	{r4, r5, pc}
		return le_conn_param_neg_reply(handle,
    6014:	2102      	movs	r1, #2
    6016:	4620      	mov	r0, r4
    6018:	f7ff ff7c 	bl	5f14 <le_conn_param_neg_reply>
    601c:	4604      	mov	r4, r0
    601e:	e7f6      	b.n	600e <le_conn_param_req+0x42>
		err = le_conn_param_req_reply(handle, &param);
    6020:	4669      	mov	r1, sp
    6022:	4620      	mov	r0, r4
    6024:	f7ff ff8f 	bl	5f46 <le_conn_param_req_reply>
    6028:	4604      	mov	r4, r0
    602a:	e7ed      	b.n	6008 <le_conn_param_req+0x3c>

0000602c <le_conn_param_req>:
{
    602c:	b530      	push	{r4, r5, lr}
    602e:	b083      	sub	sp, #12
    6030:	4604      	mov	r4, r0
    6032:	460d      	mov	r5, r1
    6034:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6036:	4b14      	ldr	r3, [pc, #80]	; (6088 <le_conn_param_req+0x5c>)
    6038:	e9d3 2300 	ldrd	r2, r3, [r3]
    603c:	2200      	movs	r2, #0
    603e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    6042:	4313      	orrs	r3, r2
    6044:	d007      	beq.n	6056 <le_conn_param_req+0x2a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    6046:	4b11      	ldr	r3, [pc, #68]	; (608c <le_conn_param_req+0x60>)
    6048:	e9d3 2300 	ldrd	r2, r3, [r3]
    604c:	f002 0220 	and.w	r2, r2, #32
    6050:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6052:	4313      	orrs	r3, r2
    6054:	d109      	bne.n	606a <le_conn_param_req+0x3e>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    6056:	2300      	movs	r3, #0
    6058:	9301      	str	r3, [sp, #4]
    605a:	9300      	str	r3, [sp, #0]
    605c:	221a      	movs	r2, #26
    605e:	2102      	movs	r1, #2
    6060:	4628      	mov	r0, r5
    6062:	f012 f8cd 	bl	18200 <ll_conn_update>
}
    6066:	b003      	add	sp, #12
    6068:	bd30      	pop	{r4, r5, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    606a:	220a      	movs	r2, #10
    606c:	2106      	movs	r1, #6
    606e:	f007 f959 	bl	d324 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    6072:	8005      	strh	r5, [r0, #0]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
    6074:	88a3      	ldrh	r3, [r4, #4]
	sep->interval_min =
    6076:	8043      	strh	r3, [r0, #2]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
    6078:	88e3      	ldrh	r3, [r4, #6]
	sep->interval_max =
    607a:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->payload.llctrl.ctrldata.conn_param_req.latency;
    607c:	8923      	ldrh	r3, [r4, #8]
    607e:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
    6080:	8963      	ldrh	r3, [r4, #10]
    6082:	8103      	strh	r3, [r0, #8]
    6084:	e7ef      	b.n	6066 <le_conn_param_req+0x3a>
    6086:	bf00      	nop
    6088:	2000bc60 	.word	0x2000bc60
    608c:	2000bc68 	.word	0x2000bc68

00006090 <le_ltk_request>:
{
    6090:	b5f0      	push	{r4, r5, r6, r7, lr}
    6092:	b085      	sub	sp, #20
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    6094:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    6096:	8820      	ldrh	r0, [r4, #0]
    6098:	f000 fff8 	bl	708c <bt_conn_lookup_handle>
	if (!conn) {
    609c:	2800      	cmp	r0, #0
    609e:	d040      	beq.n	6122 <le_ltk_request+0x92>
    60a0:	4605      	mov	r5, r0
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    60a2:	f8d4 2002 	ldr.w	r2, [r4, #2]
    60a6:	f8d4 3006 	ldr.w	r3, [r4, #6]
    60aa:	4313      	orrs	r3, r2
    60ac:	d102      	bne.n	60b4 <le_ltk_request+0x24>
    60ae:	8963      	ldrh	r3, [r4, #10]
    60b0:	2b00      	cmp	r3, #0
    60b2:	d038      	beq.n	6126 <le_ltk_request+0x96>
	if (!conn->le.keys) {
    60b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    60b6:	2b00      	cmp	r3, #0
    60b8:	d053      	beq.n	6162 <le_ltk_request+0xd2>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    60ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    60bc:	b16b      	cbz	r3, 60da <le_ltk_request+0x4a>
    60be:	899a      	ldrh	r2, [r3, #12]
    60c0:	f012 0f20 	tst.w	r2, #32
    60c4:	d009      	beq.n	60da <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    60c6:	f8d4 0002 	ldr.w	r0, [r4, #2]
    60ca:	f8d4 1006 	ldr.w	r1, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    60ce:	ea50 0201 	orrs.w	r2, r0, r1
    60d2:	d102      	bne.n	60da <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    60d4:	8962      	ldrh	r2, [r4, #10]
    60d6:	2a00      	cmp	r2, #0
    60d8:	d052      	beq.n	6180 <le_ltk_request+0xf0>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    60da:	b16b      	cbz	r3, 60f8 <le_ltk_request+0x68>
    60dc:	899a      	ldrh	r2, [r3, #12]
    60de:	f012 0f01 	tst.w	r2, #1
    60e2:	d009      	beq.n	60f8 <le_ltk_request+0x68>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    60e4:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
    60e8:	f8d4 6002 	ldr.w	r6, [r4, #2]
    60ec:	f8d4 7006 	ldr.w	r7, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    60f0:	42b9      	cmp	r1, r7
    60f2:	bf08      	it	eq
    60f4:	42b0      	cmpeq	r0, r6
    60f6:	d06a      	beq.n	61ce <le_ltk_request+0x13e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    60f8:	2102      	movs	r1, #2
    60fa:	f242 001b 	movw	r0, #8219	; 0x201b
    60fe:	f7fe fd11 	bl	4b24 <bt_hci_cmd_create>
	if (!buf) {
    6102:	4606      	mov	r6, r0
    6104:	b150      	cbz	r0, 611c <le_ltk_request+0x8c>
	cp = net_buf_add(buf, sizeof(*cp));
    6106:	2102      	movs	r1, #2
    6108:	3008      	adds	r0, #8
    610a:	f014 fd67 	bl	1abdc <net_buf_simple_add>
	cp->handle = evt->handle;
    610e:	8823      	ldrh	r3, [r4, #0]
    6110:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    6112:	4631      	mov	r1, r6
    6114:	f242 001b 	movw	r0, #8219	; 0x201b
    6118:	f7ff fa62 	bl	55e0 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    611c:	4628      	mov	r0, r5
    611e:	f001 f839 	bl	7194 <bt_conn_unref>
}
    6122:	b005      	add	sp, #20
    6124:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    6126:	4669      	mov	r1, sp
    6128:	f006 ff14 	bl	cf54 <bt_smp_get_tk>
    612c:	2800      	cmp	r0, #0
    612e:	d0c1      	beq.n	60b4 <le_ltk_request+0x24>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    6130:	2112      	movs	r1, #18
    6132:	f242 001a 	movw	r0, #8218	; 0x201a
    6136:	f7fe fcf5 	bl	4b24 <bt_hci_cmd_create>
		if (!buf) {
    613a:	4606      	mov	r6, r0
    613c:	2800      	cmp	r0, #0
    613e:	d0ed      	beq.n	611c <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    6140:	2112      	movs	r1, #18
    6142:	3008      	adds	r0, #8
    6144:	f014 fd4a 	bl	1abdc <net_buf_simple_add>
		cp->handle = evt->handle;
    6148:	8823      	ldrh	r3, [r4, #0]
    614a:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    614e:	2210      	movs	r2, #16
    6150:	4669      	mov	r1, sp
    6152:	f7fa f8b5 	bl	2c0 <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    6156:	4631      	mov	r1, r6
    6158:	f242 001a 	movw	r0, #8218	; 0x201a
    615c:	f7ff fa40 	bl	55e0 <bt_hci_cmd_send>
		goto done;
    6160:	e7dc      	b.n	611c <le_ltk_request+0x8c>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    6162:	f105 0648 	add.w	r6, r5, #72	; 0x48
    6166:	4631      	mov	r1, r6
    6168:	2020      	movs	r0, #32
    616a:	f006 ff59 	bl	d020 <bt_keys_find>
    616e:	6728      	str	r0, [r5, #112]	; 0x70
		if (!conn->le.keys) {
    6170:	2800      	cmp	r0, #0
    6172:	d1a2      	bne.n	60ba <le_ltk_request+0x2a>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    6174:	4631      	mov	r1, r6
    6176:	2001      	movs	r0, #1
    6178:	f006 ff52 	bl	d020 <bt_keys_find>
    617c:	6728      	str	r0, [r5, #112]	; 0x70
    617e:	e79c      	b.n	60ba <le_ltk_request+0x2a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    6180:	2112      	movs	r1, #18
    6182:	f242 001a 	movw	r0, #8218	; 0x201a
    6186:	f7fe fccd 	bl	4b24 <bt_hci_cmd_create>
		if (!buf) {
    618a:	4606      	mov	r6, r0
    618c:	2800      	cmp	r0, #0
    618e:	d0c5      	beq.n	611c <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    6190:	2112      	movs	r1, #18
    6192:	3008      	adds	r0, #8
    6194:	f014 fd22 	bl	1abdc <net_buf_simple_add>
		cp->handle = evt->handle;
    6198:	8823      	ldrh	r3, [r4, #0]
    619a:	4604      	mov	r4, r0
    619c:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    61a0:	6f29      	ldr	r1, [r5, #112]	; 0x70
    61a2:	79ca      	ldrb	r2, [r1, #7]
    61a4:	311a      	adds	r1, #26
    61a6:	4620      	mov	r0, r4
    61a8:	f7fa f88a 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    61ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    61ae:	79d8      	ldrb	r0, [r3, #7]
    61b0:	280f      	cmp	r0, #15
    61b2:	d905      	bls.n	61c0 <le_ltk_request+0x130>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    61b4:	4631      	mov	r1, r6
    61b6:	f242 001a 	movw	r0, #8218	; 0x201a
    61ba:	f7ff fa11 	bl	55e0 <bt_hci_cmd_send>
		goto done;
    61be:	e7ad      	b.n	611c <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    61c0:	f1c0 0210 	rsb	r2, r0, #16
    61c4:	2100      	movs	r1, #0
    61c6:	4420      	add	r0, r4
    61c8:	f023 ffda 	bl	2a180 <memset>
    61cc:	e7f2      	b.n	61b4 <le_ltk_request+0x124>
	    conn->le.keys->slave_ltk.ediv == evt->ediv) {
    61ce:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
    61d2:	8963      	ldrh	r3, [r4, #10]
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    61d4:	429a      	cmp	r2, r3
    61d6:	d18f      	bne.n	60f8 <le_ltk_request+0x68>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    61d8:	2112      	movs	r1, #18
    61da:	f242 001a 	movw	r0, #8218	; 0x201a
    61de:	f7fe fca1 	bl	4b24 <bt_hci_cmd_create>
		if (!buf) {
    61e2:	4606      	mov	r6, r0
    61e4:	2800      	cmp	r0, #0
    61e6:	d099      	beq.n	611c <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    61e8:	2112      	movs	r1, #18
    61ea:	3008      	adds	r0, #8
    61ec:	f014 fcf6 	bl	1abdc <net_buf_simple_add>
		cp->handle = evt->handle;
    61f0:	8823      	ldrh	r3, [r4, #0]
    61f2:	4604      	mov	r4, r0
    61f4:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    61f8:	6f29      	ldr	r1, [r5, #112]	; 0x70
    61fa:	79ca      	ldrb	r2, [r1, #7]
    61fc:	317a      	adds	r1, #122	; 0x7a
    61fe:	4620      	mov	r0, r4
    6200:	f7fa f85e 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    6204:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    6206:	79d8      	ldrb	r0, [r3, #7]
    6208:	280f      	cmp	r0, #15
    620a:	d905      	bls.n	6218 <le_ltk_request+0x188>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    620c:	4631      	mov	r1, r6
    620e:	f242 001a 	movw	r0, #8218	; 0x201a
    6212:	f7ff f9e5 	bl	55e0 <bt_hci_cmd_send>
		goto done;
    6216:	e781      	b.n	611c <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    6218:	f1c0 0210 	rsb	r2, r0, #16
    621c:	2100      	movs	r1, #0
    621e:	4420      	add	r0, r4
    6220:	f023 ffae 	bl	2a180 <memset>
    6224:	e7f2      	b.n	620c <le_ltk_request+0x17c>
	...

00006228 <le_ltk_request>:
{
    6228:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    622a:	4b15      	ldr	r3, [pc, #84]	; (6280 <le_ltk_request+0x58>)
    622c:	e9d3 4500 	ldrd	r4, r5, [r3]
    6230:	2400      	movs	r4, #0
    6232:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    6236:	ea54 0305 	orrs.w	r3, r4, r5
    623a:	d008      	beq.n	624e <le_ltk_request+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    623c:	4b11      	ldr	r3, [pc, #68]	; (6284 <le_ltk_request+0x5c>)
    623e:	e9d3 4500 	ldrd	r4, r5, [r3]
    6242:	f004 0410 	and.w	r4, r4, #16
    6246:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6248:	ea54 0305 	orrs.w	r3, r4, r5
    624c:	d100      	bne.n	6250 <le_ltk_request+0x28>
    624e:	bd70      	pop	{r4, r5, r6, pc}
    6250:	4613      	mov	r3, r2
    6252:	460d      	mov	r5, r1
    6254:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    6256:	220c      	movs	r2, #12
    6258:	2105      	movs	r1, #5
    625a:	4618      	mov	r0, r3
    625c:	f007 f862 	bl	d324 <meta_evt>
    6260:	4606      	mov	r6, r0
	sep->handle = sys_cpu_to_le16(handle);
    6262:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    6266:	2208      	movs	r2, #8
    6268:	1d21      	adds	r1, r4, #4
    626a:	f7fa f829 	bl	2c0 <memcpy>
	memcpy(&sep->ediv, pdu_data->payload.llctrl.ctrldata.enc_req.ediv,
    626e:	2202      	movs	r2, #2
    6270:	f104 010c 	add.w	r1, r4, #12
    6274:	f106 000a 	add.w	r0, r6, #10
    6278:	f7fa f822 	bl	2c0 <memcpy>
    627c:	e7e7      	b.n	624e <le_ltk_request+0x26>
    627e:	bf00      	nop
    6280:	2000bc60 	.word	0x2000bc60
    6284:	2000bc68 	.word	0x2000bc68

00006288 <hci_le_meta_event>:
{
    6288:	b538      	push	{r3, r4, r5, lr}
    628a:	4604      	mov	r4, r0
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    628c:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*evt));
    6290:	2101      	movs	r1, #1
    6292:	f014 fcf0 	bl	1ac76 <net_buf_simple_pull>
	switch (evt->subevent) {
    6296:	782b      	ldrb	r3, [r5, #0]
    6298:	3b01      	subs	r3, #1
    629a:	2b0b      	cmp	r3, #11
    629c:	d82e      	bhi.n	62fc <hci_le_meta_event+0x74>
    629e:	e8df f003 	tbb	[pc, r3]
    62a2:	2a06      	.short	0x2a06
    62a4:	121e0e0a 	.word	0x121e0e0a
    62a8:	2d262216 	.word	0x2d262216
    62ac:	1a2d      	.short	0x1a2d
		le_conn_complete(buf);
    62ae:	4620      	mov	r0, r4
    62b0:	f7ff fc14 	bl	5adc <le_conn_complete>
		break;
    62b4:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_update_complete(buf);
    62b6:	4620      	mov	r0, r4
    62b8:	f7fe fb52 	bl	4960 <le_conn_update_complete>
		break;
    62bc:	bd38      	pop	{r3, r4, r5, pc}
		le_remote_feat_complete(buf);
    62be:	4620      	mov	r0, r4
    62c0:	f7ff fd66 	bl	5d90 <le_remote_feat_complete>
		break;
    62c4:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_param_req(buf);
    62c6:	4620      	mov	r0, r4
    62c8:	f7ff fe80 	bl	5fcc <le_conn_param_req>
		break;
    62cc:	bd38      	pop	{r3, r4, r5, pc}
		le_data_len_change(buf);
    62ce:	4620      	mov	r0, r4
    62d0:	f7fe fafc 	bl	48cc <le_data_len_change>
		break;
    62d4:	bd38      	pop	{r3, r4, r5, pc}
		le_phy_update_complete(buf);
    62d6:	4620      	mov	r0, r4
    62d8:	f7ff fdde 	bl	5e98 <le_phy_update_complete>
		break;
    62dc:	bd38      	pop	{r3, r4, r5, pc}
		le_ltk_request(buf);
    62de:	4620      	mov	r0, r4
    62e0:	f7ff fed6 	bl	6090 <le_ltk_request>
		break;
    62e4:	bd38      	pop	{r3, r4, r5, pc}
		le_pkey_complete(buf);
    62e6:	4620      	mov	r0, r4
    62e8:	f7fe f9f0 	bl	46cc <le_pkey_complete>
		break;
    62ec:	bd38      	pop	{r3, r4, r5, pc}
		le_dhkey_complete(buf);
    62ee:	4620      	mov	r0, r4
    62f0:	f7fe f916 	bl	4520 <le_dhkey_complete>
		break;
    62f4:	bd38      	pop	{r3, r4, r5, pc}
		le_adv_report(buf);
    62f6:	4620      	mov	r0, r4
    62f8:	f7ff fb3c 	bl	5974 <le_adv_report>
    62fc:	bd38      	pop	{r3, r4, r5, pc}

000062fe <hci_event>:
{
    62fe:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    6300:	6885      	ldr	r5, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    6302:	782b      	ldrb	r3, [r5, #0]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    6304:	2b0e      	cmp	r3, #14
    6306:	d316      	bcc.n	6336 <hci_event+0x38>
    6308:	2b0f      	cmp	r3, #15
    630a:	d901      	bls.n	6310 <hci_event+0x12>
    630c:	2b13      	cmp	r3, #19
    630e:	d112      	bne.n	6336 <hci_event+0x38>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
#if defined(CONFIG_BT_CONN)
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
#endif
		return true;
    6310:	2301      	movs	r3, #1
    6312:	b993      	cbnz	r3, 633a <hci_event+0x3c>
    6314:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    6316:	2102      	movs	r1, #2
    6318:	3008      	adds	r0, #8
    631a:	f014 fcac 	bl	1ac76 <net_buf_simple_pull>
	switch (hdr->evt) {
    631e:	782b      	ldrb	r3, [r5, #0]
    6320:	2b08      	cmp	r3, #8
    6322:	d019      	beq.n	6358 <hci_event+0x5a>
    6324:	d90f      	bls.n	6346 <hci_event+0x48>
    6326:	2b30      	cmp	r3, #48	; 0x30
    6328:	d01a      	beq.n	6360 <hci_event+0x62>
    632a:	2b3e      	cmp	r3, #62	; 0x3e
    632c:	d110      	bne.n	6350 <hci_event+0x52>
		hci_le_meta_event(buf);
    632e:	4620      	mov	r0, r4
    6330:	f7ff ffaa 	bl	6288 <hci_le_meta_event>
		break;
    6334:	e00c      	b.n	6350 <hci_event+0x52>
	default:
		return false;
    6336:	2300      	movs	r3, #0
    6338:	e7eb      	b.n	6312 <hci_event+0x14>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    633a:	4040      	eors	r0, r0
    633c:	f380 8811 	msr	BASEPRI, r0
    6340:	f04f 0004 	mov.w	r0, #4
    6344:	df02      	svc	2
	switch (hdr->evt) {
    6346:	2b05      	cmp	r3, #5
    6348:	d102      	bne.n	6350 <hci_event+0x52>
		hci_disconn_complete(buf);
    634a:	4620      	mov	r0, r4
    634c:	f7ff fa54 	bl	57f8 <hci_disconn_complete>
	net_buf_unref(buf);
    6350:	4620      	mov	r0, r4
    6352:	f014 fbf7 	bl	1ab44 <net_buf_unref>
    6356:	bd38      	pop	{r3, r4, r5, pc}
		hci_encrypt_change(buf);
    6358:	4620      	mov	r0, r4
    635a:	f7fe fa56 	bl	480a <hci_encrypt_change>
		break;
    635e:	e7f7      	b.n	6350 <hci_event+0x52>
		hci_encrypt_key_refresh_complete(buf);
    6360:	4620      	mov	r0, r4
    6362:	f7fe fa7a 	bl	485a <hci_encrypt_key_refresh_complete>
		break;
    6366:	e7f3      	b.n	6350 <hci_event+0x52>

00006368 <send_cmd>:
{
    6368:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    636a:	2100      	movs	r1, #0
    636c:	4820      	ldr	r0, [pc, #128]	; (63f0 <send_cmd+0x88>)
    636e:	f014 fbbc 	bl	1aaea <net_buf_get>
	BT_ASSERT(buf);
    6372:	b1d0      	cbz	r0, 63aa <send_cmd+0x42>
    6374:	4604      	mov	r4, r0
    6376:	4d1f      	ldr	r5, [pc, #124]	; (63f4 <send_cmd+0x8c>)
    6378:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    637c:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    6380:	f022 ff3e 	bl	29200 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    6384:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    6388:	b120      	cbz	r0, 6394 <send_cmd+0x2c>
		net_buf_unref(bt_dev.sent_cmd);
    638a:	f014 fbdb 	bl	1ab44 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    638e:	2200      	movs	r2, #0
    6390:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    6394:	4620      	mov	r0, r4
    6396:	f014 fbf1 	bl	1ab7c <net_buf_ref>
    639a:	4b16      	ldr	r3, [pc, #88]	; (63f4 <send_cmd+0x8c>)
    639c:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
	err = bt_send(buf);
    63a0:	4620      	mov	r0, r4
    63a2:	f7ff f913 	bl	55cc <bt_send>
	if (err) {
    63a6:	b930      	cbnz	r0, 63b6 <send_cmd+0x4e>
    63a8:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    63aa:	4040      	eors	r0, r0
    63ac:	f380 8811 	msr	BASEPRI, r0
    63b0:	f04f 0004 	mov.w	r0, #4
    63b4:	df02      	svc	2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    63b6:	4d0f      	ldr	r5, [pc, #60]	; (63f4 <send_cmd+0x8c>)
    63b8:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    63bc:	f022 ff0d 	bl	291da <_impl_k_sem_give>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    63c0:	f104 0310 	add.w	r3, r4, #16
    63c4:	89e2      	ldrh	r2, [r4, #14]
    63c6:	4413      	add	r3, r2
    63c8:	3303      	adds	r3, #3
    63ca:	f023 0303 	bic.w	r3, r3, #3
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    63ce:	2200      	movs	r2, #0
    63d0:	211f      	movs	r1, #31
    63d2:	8858      	ldrh	r0, [r3, #2]
    63d4:	f7fe fb10 	bl	49f8 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    63d8:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    63dc:	f014 fbb2 	bl	1ab44 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    63e0:	2300      	movs	r3, #0
    63e2:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(buf);
    63e6:	4620      	mov	r0, r4
    63e8:	f014 fbac 	bl	1ab44 <net_buf_unref>
}
    63ec:	e7dc      	b.n	63a8 <send_cmd+0x40>
    63ee:	bf00      	nop
    63f0:	2000ba44 	.word	0x2000ba44
    63f4:	2000b970 	.word	0x2000b970

000063f8 <process_events>:
{
    63f8:	b538      	push	{r3, r4, r5, lr}
    63fa:	4604      	mov	r4, r0
    63fc:	460d      	mov	r5, r1
	for (; count; ev++, count--) {
    63fe:	e003      	b.n	6408 <process_events+0x10>
				send_cmd();
    6400:	f7ff ffb2 	bl	6368 <send_cmd>
	for (; count; ev++, count--) {
    6404:	3414      	adds	r4, #20
    6406:	3d01      	subs	r5, #1
    6408:	b1a5      	cbz	r5, 6434 <process_events+0x3c>
		switch (ev->state) {
    640a:	7b63      	ldrb	r3, [r4, #13]
    640c:	091b      	lsrs	r3, r3, #4
    640e:	2b04      	cmp	r3, #4
    6410:	d1f8      	bne.n	6404 <process_events+0xc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    6412:	7b23      	ldrb	r3, [r4, #12]
    6414:	2b00      	cmp	r3, #0
    6416:	d0f3      	beq.n	6400 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    6418:	2b01      	cmp	r3, #1
    641a:	d006      	beq.n	642a <process_events+0x32>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    641c:	2b02      	cmp	r3, #2
    641e:	d1f1      	bne.n	6404 <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    6420:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
    6422:	382c      	subs	r0, #44	; 0x2c
    6424:	f001 f9c8 	bl	77b8 <bt_conn_process_tx>
    6428:	e7ec      	b.n	6404 <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    642a:	6920      	ldr	r0, [r4, #16]
					bt_conn_notify_tx(conn);
    642c:	381c      	subs	r0, #28
    642e:	f000 fd65 	bl	6efc <bt_conn_notify_tx>
    6432:	e7e7      	b.n	6404 <process_events+0xc>
}
    6434:	bd38      	pop	{r3, r4, r5, pc}
	...

00006438 <hci_tx_thread>:
{
    6438:	b538      	push	{r3, r4, r5, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    643a:	4c0f      	ldr	r4, [pc, #60]	; (6478 <hci_tx_thread+0x40>)
    643c:	7b63      	ldrb	r3, [r4, #13]
    643e:	f36f 1307 	bfc	r3, #4, #4
    6442:	7363      	strb	r3, [r4, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    6444:	f104 0014 	add.w	r0, r4, #20
    6448:	f000 feca 	bl	71e0 <bt_conn_prepare_events>
    644c:	1c45      	adds	r5, r0, #1
		err = k_poll(events, ev_count, K_FOREVER);
    644e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6452:	4629      	mov	r1, r5
    6454:	4620      	mov	r0, r4
    6456:	f022 f81f 	bl	28498 <k_poll>
		BT_ASSERT(err == 0);
    645a:	b930      	cbnz	r0, 646a <hci_tx_thread+0x32>
		process_events(events, ev_count);
    645c:	4629      	mov	r1, r5
    645e:	4806      	ldr	r0, [pc, #24]	; (6478 <hci_tx_thread+0x40>)
    6460:	f7ff ffca 	bl	63f8 <process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    6464:	f022 fd60 	bl	28f28 <_impl_k_yield>
    6468:	e7e7      	b.n	643a <hci_tx_thread+0x2>
		BT_ASSERT(err == 0);
    646a:	4040      	eors	r0, r0
    646c:	f380 8811 	msr	BASEPRI, r0
    6470:	f04f 0004 	mov.w	r0, #4
    6474:	df02      	svc	2
    6476:	bf00      	nop
    6478:	2000ba58 	.word	0x2000ba58

0000647c <bt_recv>:
{
    647c:	b510      	push	{r4, lr}
    647e:	4604      	mov	r4, r0
	pool = net_buf_pool_get(buf->pool_id);
    6480:	7980      	ldrb	r0, [r0, #6]
    6482:	f014 fae5 	bl	1aa50 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    6486:	8ac3      	ldrh	r3, [r0, #22]
    6488:	2b03      	cmp	r3, #3
    648a:	d910      	bls.n	64ae <bt_recv+0x32>
    648c:	f104 0310 	add.w	r3, r4, #16
    6490:	89e2      	ldrh	r2, [r4, #14]
    6492:	4413      	add	r3, r2
    6494:	3303      	adds	r3, #3
    6496:	f023 0303 	bic.w	r3, r3, #3
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    649a:	781b      	ldrb	r3, [r3, #0]
	switch (bt_buf_get_type(buf)) {
    649c:	2b01      	cmp	r3, #1
    649e:	d00c      	beq.n	64ba <bt_recv+0x3e>
    64a0:	2b03      	cmp	r3, #3
    64a2:	d10f      	bne.n	64c4 <bt_recv+0x48>
		hci_acl(buf);
    64a4:	4620      	mov	r0, r4
    64a6:	f7fe f949 	bl	473c <hci_acl>
		return 0;
    64aa:	2000      	movs	r0, #0
    64ac:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    64ae:	4620      	mov	r0, r4
    64b0:	f014 fb48 	bl	1ab44 <net_buf_unref>
		return -EINVAL;
    64b4:	f06f 0015 	mvn.w	r0, #21
    64b8:	bd10      	pop	{r4, pc}
		hci_event(buf);
    64ba:	4620      	mov	r0, r4
    64bc:	f7ff ff1f 	bl	62fe <hci_event>
		return 0;
    64c0:	2000      	movs	r0, #0
    64c2:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    64c4:	4620      	mov	r0, r4
    64c6:	f014 fb3d 	bl	1ab44 <net_buf_unref>
		return -EINVAL;
    64ca:	f06f 0015 	mvn.w	r0, #21
}
    64ce:	bd10      	pop	{r4, pc}

000064d0 <bt_recv_prio>:
{
    64d0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    64d2:	6885      	ldr	r5, [r0, #8]
    64d4:	f100 0310 	add.w	r3, r0, #16
    64d8:	89c2      	ldrh	r2, [r0, #14]
    64da:	4413      	add	r3, r2
    64dc:	3303      	adds	r3, #3
    64de:	f023 0303 	bic.w	r3, r3, #3
    64e2:	781b      	ldrb	r3, [r3, #0]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    64e4:	2b01      	cmp	r3, #1
    64e6:	d120      	bne.n	652a <bt_recv_prio+0x5a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    64e8:	8983      	ldrh	r3, [r0, #12]
    64ea:	2b01      	cmp	r3, #1
    64ec:	d923      	bls.n	6536 <bt_recv_prio+0x66>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    64ee:	782b      	ldrb	r3, [r5, #0]
	switch (evt) {
    64f0:	2b0e      	cmp	r3, #14
    64f2:	d326      	bcc.n	6542 <bt_recv_prio+0x72>
    64f4:	2b0f      	cmp	r3, #15
    64f6:	d901      	bls.n	64fc <bt_recv_prio+0x2c>
    64f8:	2b13      	cmp	r3, #19
    64fa:	d122      	bne.n	6542 <bt_recv_prio+0x72>
		return true;
    64fc:	2301      	movs	r3, #1
    64fe:	b313      	cbz	r3, 6546 <bt_recv_prio+0x76>
    6500:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    6502:	2102      	movs	r1, #2
    6504:	3008      	adds	r0, #8
    6506:	f014 fbb6 	bl	1ac76 <net_buf_simple_pull>
	switch (hdr->evt) {
    650a:	782b      	ldrb	r3, [r5, #0]
    650c:	2b0f      	cmp	r3, #15
    650e:	d028      	beq.n	6562 <bt_recv_prio+0x92>
    6510:	2b13      	cmp	r3, #19
    6512:	d02a      	beq.n	656a <bt_recv_prio+0x9a>
    6514:	2b0e      	cmp	r3, #14
    6516:	d01c      	beq.n	6552 <bt_recv_prio+0x82>
		net_buf_unref(buf);
    6518:	4620      	mov	r0, r4
    651a:	f014 fb13 	bl	1ab44 <net_buf_unref>
		BT_ASSERT(0);
    651e:	4040      	eors	r0, r0
    6520:	f380 8811 	msr	BASEPRI, r0
    6524:	f04f 0004 	mov.w	r0, #4
    6528:	df02      	svc	2
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    652a:	4040      	eors	r0, r0
    652c:	f380 8811 	msr	BASEPRI, r0
    6530:	f04f 0004 	mov.w	r0, #4
    6534:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6536:	4040      	eors	r0, r0
    6538:	f380 8811 	msr	BASEPRI, r0
    653c:	f04f 0004 	mov.w	r0, #4
    6540:	df02      	svc	2
		return false;
    6542:	2300      	movs	r3, #0
    6544:	e7db      	b.n	64fe <bt_recv_prio+0x2e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    6546:	4040      	eors	r0, r0
    6548:	f380 8811 	msr	BASEPRI, r0
    654c:	f04f 0004 	mov.w	r0, #4
    6550:	df02      	svc	2
		hci_cmd_complete(buf);
    6552:	4620      	mov	r0, r4
    6554:	f7fe fa70 	bl	4a38 <hci_cmd_complete>
	net_buf_unref(buf);
    6558:	4620      	mov	r0, r4
    655a:	f014 faf3 	bl	1ab44 <net_buf_unref>
}
    655e:	2000      	movs	r0, #0
    6560:	bd38      	pop	{r3, r4, r5, pc}
		hci_cmd_status(buf);
    6562:	4620      	mov	r0, r4
    6564:	f7fe fa80 	bl	4a68 <hci_cmd_status>
		break;
    6568:	e7f6      	b.n	6558 <bt_recv_prio+0x88>
		hci_num_completed_packets(buf);
    656a:	4620      	mov	r0, r4
    656c:	f7fe fa92 	bl	4a94 <hci_num_completed_packets>
		break;
    6570:	e7f2      	b.n	6558 <bt_recv_prio+0x88>
	...

00006574 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    6574:	4b0a      	ldr	r3, [pc, #40]	; (65a0 <bt_hci_driver_register+0x2c>)
    6576:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    657a:	b943      	cbnz	r3, 658e <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
    657c:	6883      	ldr	r3, [r0, #8]
    657e:	b14b      	cbz	r3, 6594 <bt_hci_driver_register+0x20>
    6580:	68c3      	ldr	r3, [r0, #12]
    6582:	b153      	cbz	r3, 659a <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
    6584:	4b06      	ldr	r3, [pc, #24]	; (65a0 <bt_hci_driver_register+0x2c>)
    6586:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
	return 0;
    658a:	2000      	movs	r0, #0
    658c:	4770      	bx	lr
		return -EALREADY;
    658e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6592:	4770      	bx	lr
		return -EINVAL;
    6594:	f06f 0015 	mvn.w	r0, #21
    6598:	4770      	bx	lr
    659a:	f06f 0015 	mvn.w	r0, #21
}
    659e:	4770      	bx	lr
    65a0:	2000b970 	.word	0x2000b970

000065a4 <bt_enable>:
{
    65a4:	b530      	push	{r4, r5, lr}
    65a6:	b087      	sub	sp, #28
	if (!bt_dev.drv) {
    65a8:	4b29      	ldr	r3, [pc, #164]	; (6650 <bt_enable+0xac>)
    65aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    65ae:	2b00      	cmp	r3, #0
    65b0:	d047      	beq.n	6642 <bt_enable+0x9e>
    65b2:	4b28      	ldr	r3, [pc, #160]	; (6654 <bt_enable+0xb0>)
    65b4:	f3bf 8f5b 	dmb	ish
    65b8:	e853 2f00 	ldrex	r2, [r3]
    65bc:	f042 0101 	orr.w	r1, r2, #1
    65c0:	e843 1400 	strex	r4, r1, [r3]
    65c4:	2c00      	cmp	r4, #0
    65c6:	d1f7      	bne.n	65b8 <bt_enable+0x14>
    65c8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    65cc:	f012 0f01 	tst.w	r2, #1
    65d0:	d13a      	bne.n	6648 <bt_enable+0xa4>
    65d2:	4604      	mov	r4, r0
	ready_cb = cb;
    65d4:	4b20      	ldr	r3, [pc, #128]	; (6658 <bt_enable+0xb4>)
    65d6:	6018      	str	r0, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    65d8:	2300      	movs	r3, #0
    65da:	9305      	str	r3, [sp, #20]
    65dc:	9304      	str	r3, [sp, #16]
    65de:	f06f 0208 	mvn.w	r2, #8
    65e2:	9203      	str	r2, [sp, #12]
    65e4:	9302      	str	r3, [sp, #8]
    65e6:	9301      	str	r3, [sp, #4]
    65e8:	9300      	str	r3, [sp, #0]
    65ea:	4b1c      	ldr	r3, [pc, #112]	; (665c <bt_enable+0xb8>)
    65ec:	f44f 7220 	mov.w	r2, #640	; 0x280
    65f0:	491b      	ldr	r1, [pc, #108]	; (6660 <bt_enable+0xbc>)
    65f2:	481c      	ldr	r0, [pc, #112]	; (6664 <bt_enable+0xc0>)
    65f4:	f023 f870 	bl	296d8 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    65f8:	4b15      	ldr	r3, [pc, #84]	; (6650 <bt_enable+0xac>)
    65fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    65fe:	689b      	ldr	r3, [r3, #8]
    6600:	4798      	blx	r3
	if (err) {
    6602:	4605      	mov	r5, r0
    6604:	b980      	cbnz	r0, 6628 <bt_enable+0x84>
	if (!cb) {
    6606:	b194      	cbz	r4, 662e <bt_enable+0x8a>
    6608:	4b17      	ldr	r3, [pc, #92]	; (6668 <bt_enable+0xc4>)
    660a:	f3bf 8f5b 	dmb	ish
    660e:	e853 2f00 	ldrex	r2, [r3]
    6612:	f042 0101 	orr.w	r1, r2, #1
    6616:	e843 1000 	strex	r0, r1, [r3]
    661a:	2800      	cmp	r0, #0
    661c:	d1f7      	bne.n	660e <bt_enable+0x6a>
    661e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    6622:	f012 0f01 	tst.w	r2, #1
    6626:	d006      	beq.n	6636 <bt_enable+0x92>
}
    6628:	4628      	mov	r0, r5
    662a:	b007      	add	sp, #28
    662c:	bd30      	pop	{r4, r5, pc}
		return bt_init();
    662e:	f7ff f8bb 	bl	57a8 <bt_init>
    6632:	4605      	mov	r5, r0
    6634:	e7f8      	b.n	6628 <bt_enable+0x84>
		k_queue_append(&work_q->queue, work);
    6636:	f1a3 0108 	sub.w	r1, r3, #8
    663a:	480c      	ldr	r0, [pc, #48]	; (666c <bt_enable+0xc8>)
    663c:	f022 fa36 	bl	28aac <k_queue_append>
    6640:	e7f2      	b.n	6628 <bt_enable+0x84>
		return -ENODEV;
    6642:	f06f 0512 	mvn.w	r5, #18
    6646:	e7ef      	b.n	6628 <bt_enable+0x84>
		return -EALREADY;
    6648:	f06f 0577 	mvn.w	r5, #119	; 0x77
    664c:	e7ec      	b.n	6628 <bt_enable+0x84>
    664e:	bf00      	nop
    6650:	2000b970 	.word	0x2000b970
    6654:	2000b9e0 	.word	0x2000b9e0
    6658:	20000420 	.word	0x20000420
    665c:	00006439 	.word	0x00006439
    6660:	20003d10 	.word	0x20003d10
    6664:	20000428 	.word	0x20000428
    6668:	2000b9dc 	.word	0x2000b9dc
    666c:	20002c70 	.word	0x20002c70

00006670 <bt_addr_le_is_bonded>:
{
    6670:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(addr);
    6672:	f006 fd51 	bl	d118 <bt_keys_find_addr>
		return keys && keys->keys;
    6676:	b118      	cbz	r0, 6680 <bt_addr_le_is_bonded+0x10>
    6678:	8983      	ldrh	r3, [r0, #12]
    667a:	b91b      	cbnz	r3, 6684 <bt_addr_le_is_bonded+0x14>
    667c:	2000      	movs	r0, #0
    667e:	bd08      	pop	{r3, pc}
    6680:	2000      	movs	r0, #0
    6682:	bd08      	pop	{r3, pc}
    6684:	2001      	movs	r0, #1
}
    6686:	bd08      	pop	{r3, pc}

00006688 <bt_le_adv_start>:

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    6688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    668c:	4605      	mov	r5, r0
    668e:	460c      	mov	r4, r1
    6690:	4617      	mov	r7, r2
    6692:	461e      	mov	r6, r3
	struct net_buf *buf;
	struct bt_hci_cp_le_set_adv_param *set_param;
	int err;

	if (!valid_adv_param(param)) {
    6694:	f7fd ff88 	bl	45a8 <valid_adv_param>
    6698:	2800      	cmp	r0, #0
    669a:	f000 808d 	beq.w	67b8 <bt_le_adv_start+0x130>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    669e:	f3bf 8f5b 	dmb	ish
    66a2:	4b4b      	ldr	r3, [pc, #300]	; (67d0 <bt_le_adv_start+0x148>)
    66a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    66a6:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    66aa:	f013 0f20 	tst.w	r3, #32
    66ae:	f040 8086 	bne.w	67be <bt_le_adv_start+0x136>
		return -EALREADY;
	}

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    66b2:	463a      	mov	r2, r7
    66b4:	4621      	mov	r1, r4
    66b6:	f242 0008 	movw	r0, #8200	; 0x2008
    66ba:	f7fe fe52 	bl	5362 <set_ad>
	if (err) {
    66be:	4604      	mov	r4, r0
    66c0:	2800      	cmp	r0, #0
    66c2:	d13b      	bne.n	673c <bt_le_adv_start+0xb4>
	 * If sd was not provided but we enable connectable undirected
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    66c4:	2e00      	cmp	r6, #0
    66c6:	d03c      	beq.n	6742 <bt_le_adv_start+0xba>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    66c8:	9a06      	ldr	r2, [sp, #24]
    66ca:	4631      	mov	r1, r6
    66cc:	f242 0009 	movw	r0, #8201	; 0x2009
    66d0:	f7fe fe47 	bl	5362 <set_ad>
		if (err) {
    66d4:	4604      	mov	r4, r0
    66d6:	bb88      	cbnz	r0, 673c <bt_le_adv_start+0xb4>
			return err;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM,
    66d8:	210f      	movs	r1, #15
    66da:	f242 0006 	movw	r0, #8198	; 0x2006
    66de:	f7fe fa21 	bl	4b24 <bt_hci_cmd_create>
				sizeof(*set_param));
	if (!buf) {
    66e2:	4680      	mov	r8, r0
    66e4:	2800      	cmp	r0, #0
    66e6:	d06d      	beq.n	67c4 <bt_le_adv_start+0x13c>
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
    66e8:	210f      	movs	r1, #15
    66ea:	3008      	adds	r0, #8
    66ec:	f014 fa76 	bl	1abdc <net_buf_simple_add>
    66f0:	4607      	mov	r7, r0

	memset(set_param, 0, sizeof(*set_param));
    66f2:	220f      	movs	r2, #15
    66f4:	2100      	movs	r1, #0
    66f6:	f023 fd43 	bl	2a180 <memset>
	set_param->min_interval = sys_cpu_to_le16(param->interval_min);
    66fa:	886b      	ldrh	r3, [r5, #2]
    66fc:	803b      	strh	r3, [r7, #0]
	set_param->max_interval = sys_cpu_to_le16(param->interval_max);
    66fe:	88ab      	ldrh	r3, [r5, #4]
    6700:	807b      	strh	r3, [r7, #2]
	set_param->channel_map  = 0x07;
    6702:	2307      	movs	r3, #7
    6704:	737b      	strb	r3, [r7, #13]

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    6706:	782b      	ldrb	r3, [r5, #0]
    6708:	f013 0f01 	tst.w	r3, #1
    670c:	d11e      	bne.n	674c <bt_le_adv_start+0xc4>
			set_param->own_addr_type = bt_dev.id_addr.type;
		}

		set_param->type = BT_LE_ADV_IND;
	} else {
		if (param->own_addr) {
    670e:	68a8      	ldr	r0, [r5, #8]
    6710:	b378      	cbz	r0, 6772 <bt_le_adv_start+0xea>
			/* Only NRPA is allowed */
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    6712:	7943      	ldrb	r3, [r0, #5]
    6714:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    6718:	d157      	bne.n	67ca <bt_le_adv_start+0x142>
				return -EINVAL;
			}

			err = set_random_address(param->own_addr);
    671a:	f7fe fd0b 	bl	5134 <set_random_address>
    671e:	4604      	mov	r4, r0
		} else {
			err = le_set_private_addr();
		}

		if (err) {
    6720:	bb5c      	cbnz	r4, 677a <bt_le_adv_start+0xf2>
			net_buf_unref(buf);
			return err;
		}

		set_param->own_addr_type = BT_ADDR_LE_RANDOM;
    6722:	2301      	movs	r3, #1
    6724:	717b      	strb	r3, [r7, #5]

		if (sd) {
    6726:	b366      	cbz	r6, 6782 <bt_le_adv_start+0xfa>
			set_param->type = BT_LE_ADV_SCAN_IND;
    6728:	2302      	movs	r3, #2
    672a:	713b      	strb	r3, [r7, #4]
		} else {
			set_param->type = BT_LE_ADV_NONCONN_IND;
		}
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    672c:	2200      	movs	r2, #0
    672e:	4641      	mov	r1, r8
    6730:	f242 0006 	movw	r0, #8198	; 0x2006
    6734:	f7fe fa22 	bl	4b7c <bt_hci_cmd_send_sync>
	if (err) {
    6738:	4604      	mov	r4, r0
    673a:	b328      	cbz	r0, 6788 <bt_le_adv_start+0x100>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    673c:	4620      	mov	r0, r4
    673e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    6742:	782b      	ldrb	r3, [r5, #0]
    6744:	f013 0f01 	tst.w	r3, #1
    6748:	d0c6      	beq.n	66d8 <bt_le_adv_start+0x50>
    674a:	e7bd      	b.n	66c8 <bt_le_adv_start+0x40>
    674c:	f3bf 8f5b 	dmb	ish
    6750:	4b1f      	ldr	r3, [pc, #124]	; (67d0 <bt_le_adv_start+0x148>)
    6752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6754:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(bt_dev.flags,
    6758:	f013 0f04 	tst.w	r3, #4
    675c:	d105      	bne.n	676a <bt_le_adv_start+0xe2>
			set_param->own_addr_type = bt_dev.id_addr.type;
    675e:	4b1c      	ldr	r3, [pc, #112]	; (67d0 <bt_le_adv_start+0x148>)
    6760:	781b      	ldrb	r3, [r3, #0]
    6762:	717b      	strb	r3, [r7, #5]
		set_param->type = BT_LE_ADV_IND;
    6764:	2300      	movs	r3, #0
    6766:	713b      	strb	r3, [r7, #4]
    6768:	e7e0      	b.n	672c <bt_le_adv_start+0xa4>
				set_random_address(&bt_dev.id_addr.a);
    676a:	481a      	ldr	r0, [pc, #104]	; (67d4 <bt_le_adv_start+0x14c>)
    676c:	f7fe fce2 	bl	5134 <set_random_address>
    6770:	e7f5      	b.n	675e <bt_le_adv_start+0xd6>
			err = le_set_private_addr();
    6772:	f7fe fd0f 	bl	5194 <le_set_private_addr>
    6776:	4604      	mov	r4, r0
    6778:	e7d2      	b.n	6720 <bt_le_adv_start+0x98>
			net_buf_unref(buf);
    677a:	4640      	mov	r0, r8
    677c:	f014 f9e2 	bl	1ab44 <net_buf_unref>
			return err;
    6780:	e7dc      	b.n	673c <bt_le_adv_start+0xb4>
			set_param->type = BT_LE_ADV_NONCONN_IND;
    6782:	2303      	movs	r3, #3
    6784:	713b      	strb	r3, [r7, #4]
    6786:	e7d1      	b.n	672c <bt_le_adv_start+0xa4>
	err = set_advertise_enable(true);
    6788:	2001      	movs	r0, #1
    678a:	f7fe fd71 	bl	5270 <set_advertise_enable>
	if (err) {
    678e:	4604      	mov	r4, r0
    6790:	2800      	cmp	r0, #0
    6792:	d1d3      	bne.n	673c <bt_le_adv_start+0xb4>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    6794:	782b      	ldrb	r3, [r5, #0]
    6796:	f013 0f02 	tst.w	r3, #2
    679a:	d1cf      	bne.n	673c <bt_le_adv_start+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    679c:	4b0e      	ldr	r3, [pc, #56]	; (67d8 <bt_le_adv_start+0x150>)
    679e:	f3bf 8f5b 	dmb	ish
    67a2:	e853 2f00 	ldrex	r2, [r3]
    67a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    67aa:	e843 2100 	strex	r1, r2, [r3]
    67ae:	2900      	cmp	r1, #0
    67b0:	d1f7      	bne.n	67a2 <bt_le_adv_start+0x11a>
    67b2:	f3bf 8f5b 	dmb	ish
    67b6:	e7c1      	b.n	673c <bt_le_adv_start+0xb4>
		return -EINVAL;
    67b8:	f06f 0415 	mvn.w	r4, #21
    67bc:	e7be      	b.n	673c <bt_le_adv_start+0xb4>
		return -EALREADY;
    67be:	f06f 0477 	mvn.w	r4, #119	; 0x77
    67c2:	e7bb      	b.n	673c <bt_le_adv_start+0xb4>
		return -ENOBUFS;
    67c4:	f06f 0468 	mvn.w	r4, #104	; 0x68
    67c8:	e7b8      	b.n	673c <bt_le_adv_start+0xb4>
				return -EINVAL;
    67ca:	f06f 0415 	mvn.w	r4, #21
    67ce:	e7b5      	b.n	673c <bt_le_adv_start+0xb4>
    67d0:	2000b970 	.word	0x2000b970
    67d4:	2000b971 	.word	0x2000b971
    67d8:	2000b9e0 	.word	0x2000b9e0

000067dc <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    67dc:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    67de:	4b16      	ldr	r3, [pc, #88]	; (6838 <bt_le_adv_stop+0x5c>)
    67e0:	f103 0270 	add.w	r2, r3, #112	; 0x70
    67e4:	f3bf 8f5b 	dmb	ish
    67e8:	e852 1f00 	ldrex	r1, [r2]
    67ec:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    67f0:	e842 1000 	strex	r0, r1, [r2]
    67f4:	2800      	cmp	r0, #0
    67f6:	d1f7      	bne.n	67e8 <bt_le_adv_stop+0xc>
    67f8:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    67fc:	f3bf 8f5b 	dmb	ish
    6800:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    6802:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    6806:	f3c4 1440 	ubfx	r4, r4, #5, #1
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    680a:	b90c      	cbnz	r4, 6810 <bt_le_adv_stop+0x34>
			le_set_private_addr();
		}
	}

	return 0;
}
    680c:	4620      	mov	r0, r4
    680e:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    6810:	2000      	movs	r0, #0
    6812:	f7fe fd2d 	bl	5270 <set_advertise_enable>
	if (err) {
    6816:	4604      	mov	r4, r0
    6818:	2800      	cmp	r0, #0
    681a:	d1f7      	bne.n	680c <bt_le_adv_stop+0x30>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    681c:	f3bf 8f5b 	dmb	ish
    6820:	4b05      	ldr	r3, [pc, #20]	; (6838 <bt_le_adv_stop+0x5c>)
    6822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6824:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    6828:	f3c3 2340 	ubfx	r3, r3, #9, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    682c:	b90b      	cbnz	r3, 6832 <bt_le_adv_stop+0x56>
	return 0;
    682e:	461c      	mov	r4, r3
    6830:	e7ec      	b.n	680c <bt_le_adv_stop+0x30>
			le_set_private_addr();
    6832:	f7fe fcaf 	bl	5194 <le_set_private_addr>
    6836:	e7e9      	b.n	680c <bt_le_adv_stop+0x30>
    6838:	2000b970 	.word	0x2000b970

0000683c <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    683c:	b538      	push	{r3, r4, r5, lr}
    683e:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    6840:	4808      	ldr	r0, [pc, #32]	; (6864 <bt_buf_get_rx+0x28>)
    6842:	f014 f911 	bl	1aa68 <net_buf_alloc>
#endif

	if (buf) {
    6846:	4604      	mov	r4, r0
    6848:	b150      	cbz	r0, 6860 <bt_buf_get_rx+0x24>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    684a:	2100      	movs	r1, #0
    684c:	f014 f967 	bl	1ab1e <net_buf_reserve>
    6850:	f104 0310 	add.w	r3, r4, #16
    6854:	89e2      	ldrh	r2, [r4, #14]
    6856:	4413      	add	r3, r2
    6858:	3303      	adds	r3, #3
    685a:	f023 0303 	bic.w	r3, r3, #3
	*(u8_t *)net_buf_user_data(buf) = type;
    685e:	701d      	strb	r5, [r3, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    6860:	4620      	mov	r0, r4
    6862:	bd38      	pop	{r3, r4, r5, pc}
    6864:	2000d234 	.word	0x2000d234

00006868 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    6868:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    686a:	f04f 0320 	mov.w	r3, #32
    686e:	f3ef 8211 	mrs	r2, BASEPRI
    6872:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    6876:	4b0f      	ldr	r3, [pc, #60]	; (68b4 <bt_buf_get_cmd_complete+0x4c>)
    6878:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    687c:	2500      	movs	r5, #0
    687e:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6882:	f382 8811 	msr	BASEPRI, r2
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    6886:	b17c      	cbz	r4, 68a8 <bt_buf_get_cmd_complete+0x40>
    6888:	f104 0310 	add.w	r3, r4, #16
    688c:	89e2      	ldrh	r2, [r4, #14]
    688e:	4413      	add	r3, r2
    6890:	3303      	adds	r3, #3
    6892:	f023 0303 	bic.w	r3, r3, #3
    6896:	2201      	movs	r2, #1
    6898:	701a      	strb	r2, [r3, #0]
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    689a:	4629      	mov	r1, r5
    689c:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    689e:	4620      	mov	r0, r4
    68a0:	f014 f93d 	bl	1ab1e <net_buf_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    68a4:	4620      	mov	r0, r4
    68a6:	bd38      	pop	{r3, r4, r5, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    68a8:	4601      	mov	r1, r0
    68aa:	2001      	movs	r0, #1
    68ac:	f7ff ffc6 	bl	683c <bt_buf_get_rx>
    68b0:	4604      	mov	r4, r0
    68b2:	e7f7      	b.n	68a4 <bt_buf_get_cmd_complete+0x3c>
    68b4:	2000b970 	.word	0x2000b970

000068b8 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    68b8:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    68ba:	4b29      	ldr	r3, [pc, #164]	; (6960 <bt_pub_key_gen+0xa8>)
    68bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    68c0:	f003 0306 	and.w	r3, r3, #6
    68c4:	2b06      	cmp	r3, #6
    68c6:	d148      	bne.n	695a <bt_pub_key_gen+0xa2>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
    68c8:	4b26      	ldr	r3, [pc, #152]	; (6964 <bt_pub_key_gen+0xac>)
    68ca:	681a      	ldr	r2, [r3, #0]
    68cc:	6042      	str	r2, [r0, #4]
	pub_key_cb = new_cb;
    68ce:	6018      	str	r0, [r3, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    68d0:	4b25      	ldr	r3, [pc, #148]	; (6968 <bt_pub_key_gen+0xb0>)
    68d2:	f3bf 8f5b 	dmb	ish
    68d6:	e853 2f00 	ldrex	r2, [r3]
    68da:	f042 0110 	orr.w	r1, r2, #16
    68de:	e843 1400 	strex	r4, r1, [r3]
    68e2:	2c00      	cmp	r4, #0
    68e4:	d1f7      	bne.n	68d6 <bt_pub_key_gen+0x1e>
    68e6:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    68ea:	f012 0f10 	tst.w	r2, #16
    68ee:	d002      	beq.n	68f6 <bt_pub_key_gen+0x3e>
		return 0;
    68f0:	2600      	movs	r6, #0
			cb->func(NULL);
		}
	}

	return 0;
}
    68f2:	4630      	mov	r0, r6
    68f4:	bd70      	pop	{r4, r5, r6, pc}
    68f6:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    68f8:	f3bf 8f5b 	dmb	ish
    68fc:	e853 2f00 	ldrex	r2, [r3]
    6900:	f022 0208 	bic.w	r2, r2, #8
    6904:	e843 2100 	strex	r1, r2, [r3]
    6908:	2900      	cmp	r1, #0
    690a:	d1f7      	bne.n	68fc <bt_pub_key_gen+0x44>
    690c:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    6910:	2200      	movs	r2, #0
    6912:	4611      	mov	r1, r2
    6914:	f242 0025 	movw	r0, #8229	; 0x2025
    6918:	f7fe f930 	bl	4b7c <bt_hci_cmd_send_sync>
	if (err) {
    691c:	4606      	mov	r6, r0
    691e:	b910      	cbnz	r0, 6926 <bt_pub_key_gen+0x6e>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6920:	4b10      	ldr	r3, [pc, #64]	; (6964 <bt_pub_key_gen+0xac>)
    6922:	681c      	ldr	r4, [r3, #0]
    6924:	e011      	b.n	694a <bt_pub_key_gen+0x92>
    6926:	4b10      	ldr	r3, [pc, #64]	; (6968 <bt_pub_key_gen+0xb0>)
    6928:	f3bf 8f5b 	dmb	ish
    692c:	e853 2f00 	ldrex	r2, [r3]
    6930:	f022 0210 	bic.w	r2, r2, #16
    6934:	e843 2100 	strex	r1, r2, [r3]
    6938:	2900      	cmp	r1, #0
    693a:	d1f7      	bne.n	692c <bt_pub_key_gen+0x74>
    693c:	f3bf 8f5b 	dmb	ish
		pub_key_cb = NULL;
    6940:	2200      	movs	r2, #0
    6942:	4b08      	ldr	r3, [pc, #32]	; (6964 <bt_pub_key_gen+0xac>)
    6944:	601a      	str	r2, [r3, #0]
		return err;
    6946:	e7d4      	b.n	68f2 <bt_pub_key_gen+0x3a>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6948:	6864      	ldr	r4, [r4, #4]
    694a:	2c00      	cmp	r4, #0
    694c:	d0d1      	beq.n	68f2 <bt_pub_key_gen+0x3a>
		if (cb != new_cb) {
    694e:	42ac      	cmp	r4, r5
    6950:	d0fa      	beq.n	6948 <bt_pub_key_gen+0x90>
			cb->func(NULL);
    6952:	6823      	ldr	r3, [r4, #0]
    6954:	2000      	movs	r0, #0
    6956:	4798      	blx	r3
    6958:	e7f6      	b.n	6948 <bt_pub_key_gen+0x90>
		return -ENOTSUP;
    695a:	f06f 0685 	mvn.w	r6, #133	; 0x85
    695e:	e7c8      	b.n	68f2 <bt_pub_key_gen+0x3a>
    6960:	2000b970 	.word	0x2000b970
    6964:	2000041c 	.word	0x2000041c
    6968:	2000b9e0 	.word	0x2000b9e0

0000696c <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    696c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    696e:	4b21      	ldr	r3, [pc, #132]	; (69f4 <bt_dh_key_gen+0x88>)
    6970:	681b      	ldr	r3, [r3, #0]
    6972:	bbab      	cbnz	r3, 69e0 <bt_dh_key_gen+0x74>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6974:	f3bf 8f5b 	dmb	ish
    6978:	4b1f      	ldr	r3, [pc, #124]	; (69f8 <bt_dh_key_gen+0x8c>)
    697a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    697c:	f3bf 8f5b 	dmb	ish
    6980:	f013 0f10 	tst.w	r3, #16
    6984:	d130      	bne.n	69e8 <bt_dh_key_gen+0x7c>
    6986:	f3bf 8f5b 	dmb	ish
    698a:	4b1b      	ldr	r3, [pc, #108]	; (69f8 <bt_dh_key_gen+0x8c>)
    698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    698e:	f3bf 8f5b 	dmb	ish
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    6992:	f013 0f08 	tst.w	r3, #8
    6996:	d02a      	beq.n	69ee <bt_dh_key_gen+0x82>
    6998:	4604      	mov	r4, r0
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
    699a:	4b16      	ldr	r3, [pc, #88]	; (69f4 <bt_dh_key_gen+0x88>)
    699c:	6019      	str	r1, [r3, #0]

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    699e:	2140      	movs	r1, #64	; 0x40
    69a0:	f242 0026 	movw	r0, #8230	; 0x2026
    69a4:	f7fe f8be 	bl	4b24 <bt_hci_cmd_create>
	if (!buf) {
    69a8:	4605      	mov	r5, r0
    69aa:	b198      	cbz	r0, 69d4 <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    69ac:	2140      	movs	r1, #64	; 0x40
    69ae:	3008      	adds	r0, #8
    69b0:	f014 f914 	bl	1abdc <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    69b4:	2240      	movs	r2, #64	; 0x40
    69b6:	4621      	mov	r1, r4
    69b8:	f7f9 fc82 	bl	2c0 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    69bc:	2200      	movs	r2, #0
    69be:	4629      	mov	r1, r5
    69c0:	f242 0026 	movw	r0, #8230	; 0x2026
    69c4:	f7fe f8da 	bl	4b7c <bt_hci_cmd_send_sync>
	if (err) {
    69c8:	4603      	mov	r3, r0
    69ca:	b158      	cbz	r0, 69e4 <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    69cc:	2100      	movs	r1, #0
    69ce:	4a09      	ldr	r2, [pc, #36]	; (69f4 <bt_dh_key_gen+0x88>)
    69d0:	6011      	str	r1, [r2, #0]
		return err;
    69d2:	e007      	b.n	69e4 <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    69d4:	2200      	movs	r2, #0
    69d6:	4b07      	ldr	r3, [pc, #28]	; (69f4 <bt_dh_key_gen+0x88>)
    69d8:	601a      	str	r2, [r3, #0]
		return -ENOBUFS;
    69da:	f06f 0368 	mvn.w	r3, #104	; 0x68
    69de:	e001      	b.n	69e4 <bt_dh_key_gen+0x78>
		return -EBUSY;
    69e0:	f06f 030f 	mvn.w	r3, #15
	}

	return 0;
}
    69e4:	4618      	mov	r0, r3
    69e6:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    69e8:	f06f 030f 	mvn.w	r3, #15
    69ec:	e7fa      	b.n	69e4 <bt_dh_key_gen+0x78>
		return -EADDRNOTAVAIL;
    69ee:	f06f 037c 	mvn.w	r3, #124	; 0x7c
    69f2:	e7f7      	b.n	69e4 <bt_dh_key_gen+0x78>
    69f4:	200003d8 	.word	0x200003d8
    69f8:	2000b970 	.word	0x2000b970

000069fc <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    69fc:	b538      	push	{r3, r4, r5, lr}
    69fe:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    6a00:	4b06      	ldr	r3, [pc, #24]	; (6a1c <notify_connected+0x20>)
    6a02:	681c      	ldr	r4, [r3, #0]
    6a04:	e000      	b.n	6a08 <notify_connected+0xc>
    6a06:	69a4      	ldr	r4, [r4, #24]
    6a08:	b134      	cbz	r4, 6a18 <notify_connected+0x1c>
		if (cb->connected) {
    6a0a:	6823      	ldr	r3, [r4, #0]
    6a0c:	2b00      	cmp	r3, #0
    6a0e:	d0fa      	beq.n	6a06 <notify_connected+0xa>
			cb->connected(conn, conn->err);
    6a10:	7ae9      	ldrb	r1, [r5, #11]
    6a12:	4628      	mov	r0, r5
    6a14:	4798      	blx	r3
    6a16:	e7f6      	b.n	6a06 <notify_connected+0xa>
		}
	}
}
    6a18:	bd38      	pop	{r3, r4, r5, pc}
    6a1a:	bf00      	nop
    6a1c:	200004f8 	.word	0x200004f8

00006a20 <notify_disconnected>:

static void notify_disconnected(struct bt_conn *conn)
{
    6a20:	b538      	push	{r3, r4, r5, lr}
    6a22:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    6a24:	4b06      	ldr	r3, [pc, #24]	; (6a40 <notify_disconnected+0x20>)
    6a26:	681c      	ldr	r4, [r3, #0]
    6a28:	e000      	b.n	6a2c <notify_disconnected+0xc>
    6a2a:	69a4      	ldr	r4, [r4, #24]
    6a2c:	b134      	cbz	r4, 6a3c <notify_disconnected+0x1c>
		if (cb->disconnected) {
    6a2e:	6863      	ldr	r3, [r4, #4]
    6a30:	2b00      	cmp	r3, #0
    6a32:	d0fa      	beq.n	6a2a <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
    6a34:	7ae9      	ldrb	r1, [r5, #11]
    6a36:	4628      	mov	r0, r5
    6a38:	4798      	blx	r3
    6a3a:	e7f6      	b.n	6a2a <notify_disconnected+0xa>
		}
	}
}
    6a3c:	bd38      	pop	{r3, r4, r5, pc}
    6a3e:	bf00      	nop
    6a40:	200004f8 	.word	0x200004f8

00006a44 <tx_free>:
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    6a44:	2300      	movs	r3, #0
    6a46:	6043      	str	r3, [r0, #4]
	node->next = list->head;
    6a48:	4b04      	ldr	r3, [pc, #16]	; (6a5c <tx_free+0x18>)
    6a4a:	681a      	ldr	r2, [r3, #0]
    6a4c:	6002      	str	r2, [r0, #0]
	list->head = node;
    6a4e:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
    6a50:	685b      	ldr	r3, [r3, #4]
    6a52:	b103      	cbz	r3, 6a56 <tx_free+0x12>
    6a54:	4770      	bx	lr
		list->tail = list->head;
    6a56:	4b01      	ldr	r3, [pc, #4]	; (6a5c <tx_free+0x18>)
    6a58:	6058      	str	r0, [r3, #4]
	sys_slist_prepend(&free_tx, &tx->node);
}
    6a5a:	e7fb      	b.n	6a54 <tx_free+0x10>
    6a5c:	20000698 	.word	0x20000698

00006a60 <add_pending_tx>:
		}
	}
}

static sys_snode_t *add_pending_tx(struct bt_conn *conn, bt_conn_tx_cb_t cb)
{
    6a60:	b410      	push	{r4}
	sys_snode_t *node = list->head;
    6a62:	4a0f      	ldr	r2, [pc, #60]	; (6aa0 <add_pending_tx+0x40>)
    6a64:	6813      	ldr	r3, [r2, #0]
	list->head = node->next;
    6a66:	681c      	ldr	r4, [r3, #0]
    6a68:	6014      	str	r4, [r2, #0]
	if (list->tail == node) {
    6a6a:	6852      	ldr	r2, [r2, #4]
    6a6c:	4293      	cmp	r3, r2
    6a6e:	d011      	beq.n	6a94 <add_pending_tx+0x34>
	BT_DBG("conn %p cb %p", conn, cb);

	__ASSERT(!sys_slist_is_empty(&free_tx), "No free conn TX contexts");

	node = sys_slist_get_not_empty(&free_tx);
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    6a70:	6059      	str	r1, [r3, #4]
	__asm__ volatile(
    6a72:	f04f 0220 	mov.w	r2, #32
    6a76:	f3ef 8111 	mrs	r1, BASEPRI
    6a7a:	f382 8811 	msr	BASEPRI, r2
	node->next = NULL;
    6a7e:	2200      	movs	r2, #0
    6a80:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    6a82:	6982      	ldr	r2, [r0, #24]
    6a84:	b14a      	cbz	r2, 6a9a <add_pending_tx+0x3a>
		list->tail->next = node;
    6a86:	6013      	str	r3, [r2, #0]
		list->tail = node;
    6a88:	6183      	str	r3, [r0, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6a8a:	f381 8811 	msr	BASEPRI, r1
	key = irq_lock();
	sys_slist_append(&conn->tx_pending, node);
	irq_unlock(key);

	return node;
}
    6a8e:	4618      	mov	r0, r3
    6a90:	bc10      	pop	{r4}
    6a92:	4770      	bx	lr
		list->tail = list->head;
    6a94:	4a02      	ldr	r2, [pc, #8]	; (6aa0 <add_pending_tx+0x40>)
    6a96:	6054      	str	r4, [r2, #4]
    6a98:	e7ea      	b.n	6a70 <add_pending_tx+0x10>
		list->tail = node;
    6a9a:	6183      	str	r3, [r0, #24]
		list->head = node;
    6a9c:	6143      	str	r3, [r0, #20]
    6a9e:	e7f4      	b.n	6a8a <add_pending_tx+0x2a>
    6aa0:	20000698 	.word	0x20000698

00006aa4 <remove_pending_tx>:

static void remove_pending_tx(struct bt_conn *conn, sys_snode_t *node)
{
    6aa4:	b510      	push	{r4, lr}
	__asm__ volatile(
    6aa6:	f04f 0320 	mov.w	r3, #32
    6aaa:	f3ef 8411 	mrs	r4, BASEPRI
    6aae:	f383 8811 	msr	BASEPRI, r3
	return list->head;
    6ab2:	6943      	ldr	r3, [r0, #20]
	sys_snode_t *prev = NULL;
    6ab4:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    6ab6:	b163      	cbz	r3, 6ad2 <remove_pending_tx+0x2e>
		if (test == node) {
    6ab8:	4299      	cmp	r1, r3
    6aba:	d002      	beq.n	6ac2 <remove_pending_tx+0x1e>
		prev = test;
    6abc:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    6abe:	681b      	ldr	r3, [r3, #0]
    6ac0:	e7f9      	b.n	6ab6 <remove_pending_tx+0x12>
	if (!prev_node) {
    6ac2:	b162      	cbz	r2, 6ade <remove_pending_tx+0x3a>
		prev_node->next = node->next;
    6ac4:	680b      	ldr	r3, [r1, #0]
    6ac6:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    6ac8:	6983      	ldr	r3, [r0, #24]
    6aca:	4299      	cmp	r1, r3
    6acc:	d00e      	beq.n	6aec <remove_pending_tx+0x48>
	node->next = NULL;
    6ace:	2300      	movs	r3, #0
    6ad0:	600b      	str	r3, [r1, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6ad2:	f384 8811 	msr	BASEPRI, r4

	key = irq_lock();
	sys_slist_find_and_remove(&conn->tx_pending, node);
	irq_unlock(key);

	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    6ad6:	4608      	mov	r0, r1
    6ad8:	f7ff ffb4 	bl	6a44 <tx_free>
    6adc:	bd10      	pop	{r4, pc}
		list->head = node->next;
    6ade:	680b      	ldr	r3, [r1, #0]
    6ae0:	6143      	str	r3, [r0, #20]
		if (list->tail == node) {
    6ae2:	6982      	ldr	r2, [r0, #24]
    6ae4:	4291      	cmp	r1, r2
    6ae6:	d1f2      	bne.n	6ace <remove_pending_tx+0x2a>
			list->tail = list->head;
    6ae8:	6183      	str	r3, [r0, #24]
    6aea:	e7f0      	b.n	6ace <remove_pending_tx+0x2a>
			list->tail = prev_node;
    6aec:	6182      	str	r2, [r0, #24]
    6aee:	e7ee      	b.n	6ace <remove_pending_tx+0x2a>

00006af0 <bt_conn_set_param_le>:

#if defined(CONFIG_BT_CENTRAL)
static void bt_conn_set_param_le(struct bt_conn *conn,
				 const struct bt_le_conn_param *param)
{
	conn->le.interval_max = param->interval_max;
    6af0:	884b      	ldrh	r3, [r1, #2]
    6af2:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	conn->le.latency = param->latency;
    6af6:	888b      	ldrh	r3, [r1, #4]
    6af8:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
	conn->le.timeout = param->timeout;
    6afc:	88cb      	ldrh	r3, [r1, #6]
    6afe:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    6b02:	4770      	bx	lr

00006b04 <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
    6b04:	89c3      	ldrh	r3, [r0, #14]
    6b06:	b903      	cbnz	r3, 6b0a <bt_conn_reset_rx_state+0x6>
    6b08:	4770      	bx	lr
{
    6b0a:	b510      	push	{r4, lr}
    6b0c:	4604      	mov	r4, r0
	net_buf_unref(conn->rx);
    6b0e:	6900      	ldr	r0, [r0, #16]
    6b10:	f014 f818 	bl	1ab44 <net_buf_unref>
	conn->rx = NULL;
    6b14:	2300      	movs	r3, #0
    6b16:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    6b18:	81e3      	strh	r3, [r4, #14]
    6b1a:	bd10      	pop	{r4, pc}

00006b1c <conn_new>:
{
    6b1c:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6b1e:	2300      	movs	r3, #0
    6b20:	b1ab      	cbz	r3, 6b4e <conn_new+0x32>
	struct bt_conn *conn = NULL;
    6b22:	2400      	movs	r4, #0
	if (!conn) {
    6b24:	b18c      	cbz	r4, 6b4a <conn_new+0x2e>
	memset(conn, 0, sizeof(*conn));
    6b26:	229c      	movs	r2, #156	; 0x9c
    6b28:	2100      	movs	r1, #0
    6b2a:	4620      	mov	r0, r4
    6b2c:	f023 fb28 	bl	2a180 <memset>
	atomic_set(&conn->ref, 1);
    6b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6b34:	2201      	movs	r2, #1
    6b36:	f3bf 8f5b 	dmb	ish
    6b3a:	e853 1f00 	ldrex	r1, [r3]
    6b3e:	e843 2000 	strex	r0, r2, [r3]
    6b42:	2800      	cmp	r0, #0
    6b44:	d1f9      	bne.n	6b3a <conn_new+0x1e>
    6b46:	f3bf 8f5b 	dmb	ish
}
    6b4a:	4620      	mov	r0, r4
    6b4c:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    6b4e:	229c      	movs	r2, #156	; 0x9c
    6b50:	fb02 f203 	mul.w	r2, r2, r3
    6b54:	3240      	adds	r2, #64	; 0x40
    6b56:	4907      	ldr	r1, [pc, #28]	; (6b74 <conn_new+0x58>)
    6b58:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6b5a:	f3bf 8f5b 	dmb	ish
    6b5e:	6852      	ldr	r2, [r2, #4]
    6b60:	f3bf 8f5b 	dmb	ish
    6b64:	b10a      	cbz	r2, 6b6a <conn_new+0x4e>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6b66:	3301      	adds	r3, #1
    6b68:	e7da      	b.n	6b20 <conn_new+0x4>
			conn = &conns[i];
    6b6a:	229c      	movs	r2, #156	; 0x9c
    6b6c:	fb02 1403 	mla	r4, r2, r3, r1
			break;
    6b70:	e7d8      	b.n	6b24 <conn_new+0x8>
    6b72:	bf00      	nop
    6b74:	2000050c 	.word	0x2000050c

00006b78 <bt_conn_get_pkts>:
}
    6b78:	4800      	ldr	r0, [pc, #0]	; (6b7c <bt_conn_get_pkts+0x4>)
    6b7a:	4770      	bx	lr
    6b7c:	2000b9fc 	.word	0x2000b9fc

00006b80 <process_unack_tx>:
{
    6b80:	b510      	push	{r4, lr}
    6b82:	4604      	mov	r4, r0
    6b84:	e009      	b.n	6b9a <process_unack_tx+0x1a>
    6b86:	f383 8811 	msr	BASEPRI, r3
		if (!node) {
    6b8a:	b1b0      	cbz	r0, 6bba <process_unack_tx+0x3a>
		tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    6b8c:	f7ff ff5a 	bl	6a44 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
    6b90:	4620      	mov	r0, r4
    6b92:	f7ff fff1 	bl	6b78 <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6b96:	f022 fb20 	bl	291da <_impl_k_sem_give>
	__asm__ volatile(
    6b9a:	f04f 0220 	mov.w	r2, #32
    6b9e:	f3ef 8311 	mrs	r3, BASEPRI
    6ba2:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    6ba6:	6960      	ldr	r0, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    6ba8:	2800      	cmp	r0, #0
    6baa:	d0ec      	beq.n	6b86 <process_unack_tx+0x6>
	list->head = node->next;
    6bac:	6802      	ldr	r2, [r0, #0]
    6bae:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    6bb0:	69a1      	ldr	r1, [r4, #24]
    6bb2:	4288      	cmp	r0, r1
    6bb4:	d1e7      	bne.n	6b86 <process_unack_tx+0x6>
		list->tail = list->head;
    6bb6:	61a2      	str	r2, [r4, #24]
    6bb8:	e7e5      	b.n	6b86 <process_unack_tx+0x6>
    6bba:	bd10      	pop	{r4, pc}

00006bbc <notify_le_param_updated>:
{
    6bbc:	b570      	push	{r4, r5, r6, lr}
    6bbe:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    6bc0:	4b08      	ldr	r3, [pc, #32]	; (6be4 <notify_le_param_updated+0x28>)
    6bc2:	681c      	ldr	r4, [r3, #0]
    6bc4:	e000      	b.n	6bc8 <notify_le_param_updated+0xc>
    6bc6:	69a4      	ldr	r4, [r4, #24]
    6bc8:	b15c      	cbz	r4, 6be2 <notify_le_param_updated+0x26>
		if (cb->le_param_updated) {
    6bca:	68e6      	ldr	r6, [r4, #12]
    6bcc:	2e00      	cmp	r6, #0
    6bce:	d0fa      	beq.n	6bc6 <notify_le_param_updated+0xa>
			cb->le_param_updated(conn, conn->le.interval,
    6bd0:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    6bd4:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    6bd8:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    6bdc:	4628      	mov	r0, r5
    6bde:	47b0      	blx	r6
    6be0:	e7f1      	b.n	6bc6 <notify_le_param_updated+0xa>
}
    6be2:	bd70      	pop	{r4, r5, r6, pc}
    6be4:	200004f8 	.word	0x200004f8

00006be8 <le_param_req>:
{
    6be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6bea:	4606      	mov	r6, r0
    6bec:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    6bee:	4608      	mov	r0, r1
    6bf0:	f7fe fc02 	bl	53f8 <bt_le_conn_params_valid>
    6bf4:	4607      	mov	r7, r0
    6bf6:	b198      	cbz	r0, 6c20 <le_param_req+0x38>
	for (cb = callback_list; cb; cb = cb->_next) {
    6bf8:	4b0a      	ldr	r3, [pc, #40]	; (6c24 <le_param_req+0x3c>)
    6bfa:	681c      	ldr	r4, [r3, #0]
    6bfc:	e000      	b.n	6c00 <le_param_req+0x18>
    6bfe:	69a4      	ldr	r4, [r4, #24]
    6c00:	b174      	cbz	r4, 6c20 <le_param_req+0x38>
		if (!cb->le_param_req) {
    6c02:	68a3      	ldr	r3, [r4, #8]
    6c04:	2b00      	cmp	r3, #0
    6c06:	d0fa      	beq.n	6bfe <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
    6c08:	4629      	mov	r1, r5
    6c0a:	4630      	mov	r0, r6
    6c0c:	4798      	blx	r3
    6c0e:	b130      	cbz	r0, 6c1e <le_param_req+0x36>
		if (!bt_le_conn_params_valid(param)) {
    6c10:	4628      	mov	r0, r5
    6c12:	f7fe fbf1 	bl	53f8 <bt_le_conn_params_valid>
    6c16:	2800      	cmp	r0, #0
    6c18:	d1f1      	bne.n	6bfe <le_param_req+0x16>
			return false;
    6c1a:	4607      	mov	r7, r0
    6c1c:	e000      	b.n	6c20 <le_param_req+0x38>
			return false;
    6c1e:	4607      	mov	r7, r0
}
    6c20:	4638      	mov	r0, r7
    6c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c24:	200004f8 	.word	0x200004f8

00006c28 <bt_conn_identity_resolved>:
{
    6c28:	b570      	push	{r4, r5, r6, lr}
    6c2a:	4605      	mov	r5, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6c2c:	78c3      	ldrb	r3, [r0, #3]
    6c2e:	b923      	cbnz	r3, 6c3a <bt_conn_identity_resolved+0x12>
		rpa = &conn->le.resp_addr;
    6c30:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    6c34:	4b08      	ldr	r3, [pc, #32]	; (6c58 <bt_conn_identity_resolved+0x30>)
    6c36:	681c      	ldr	r4, [r3, #0]
    6c38:	e003      	b.n	6c42 <bt_conn_identity_resolved+0x1a>
		rpa = &conn->le.init_addr;
    6c3a:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    6c3e:	e7f9      	b.n	6c34 <bt_conn_identity_resolved+0xc>
	for (cb = callback_list; cb; cb = cb->_next) {
    6c40:	69a4      	ldr	r4, [r4, #24]
    6c42:	b144      	cbz	r4, 6c56 <bt_conn_identity_resolved+0x2e>
		if (cb->identity_resolved) {
    6c44:	6923      	ldr	r3, [r4, #16]
    6c46:	2b00      	cmp	r3, #0
    6c48:	d0fa      	beq.n	6c40 <bt_conn_identity_resolved+0x18>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    6c4a:	f105 0248 	add.w	r2, r5, #72	; 0x48
    6c4e:	4631      	mov	r1, r6
    6c50:	4628      	mov	r0, r5
    6c52:	4798      	blx	r3
    6c54:	e7f4      	b.n	6c40 <bt_conn_identity_resolved+0x18>
}
    6c56:	bd70      	pop	{r4, r5, r6, pc}
    6c58:	200004f8 	.word	0x200004f8

00006c5c <bt_conn_le_start_encryption>:
{
    6c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c60:	4680      	mov	r8, r0
    6c62:	4617      	mov	r7, r2
    6c64:	461c      	mov	r4, r3
    6c66:	9d08      	ldr	r5, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    6c68:	211c      	movs	r1, #28
    6c6a:	f242 0019 	movw	r0, #8217	; 0x2019
    6c6e:	f7fd ff59 	bl	4b24 <bt_hci_cmd_create>
	if (!buf) {
    6c72:	b338      	cbz	r0, 6cc4 <bt_conn_le_start_encryption+0x68>
    6c74:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    6c76:	211c      	movs	r1, #28
    6c78:	3008      	adds	r0, #8
    6c7a:	f013 ffaf 	bl	1abdc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    6c7e:	f8b8 2000 	ldrh.w	r2, [r8]
    6c82:	4603      	mov	r3, r0
    6c84:	f823 2b02 	strh.w	r2, [r3], #2
	cp->rand = rand;
    6c88:	f8c0 7002 	str.w	r7, [r0, #2]
    6c8c:	605c      	str	r4, [r3, #4]
	cp->ediv = ediv;
    6c8e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    6c92:	8143      	strh	r3, [r0, #10]
	memcpy(cp->ltk, ltk, len);
    6c94:	f100 040c 	add.w	r4, r0, #12
    6c98:	462a      	mov	r2, r5
    6c9a:	9907      	ldr	r1, [sp, #28]
    6c9c:	4620      	mov	r0, r4
    6c9e:	f7f9 fb0f 	bl	2c0 <memcpy>
	if (len < sizeof(cp->ltk)) {
    6ca2:	2d0f      	cmp	r5, #15
    6ca4:	d907      	bls.n	6cb6 <bt_conn_le_start_encryption+0x5a>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    6ca6:	2200      	movs	r2, #0
    6ca8:	4631      	mov	r1, r6
    6caa:	f242 0019 	movw	r0, #8217	; 0x2019
    6cae:	f7fd ff65 	bl	4b7c <bt_hci_cmd_send_sync>
    6cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
    6cb6:	f1c5 0210 	rsb	r2, r5, #16
    6cba:	2100      	movs	r1, #0
    6cbc:	1960      	adds	r0, r4, r5
    6cbe:	f023 fa5f 	bl	2a180 <memset>
    6cc2:	e7f0      	b.n	6ca6 <bt_conn_le_start_encryption+0x4a>
		return -ENOBUFS;
    6cc4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006ccc <start_security>:
{
    6ccc:	b530      	push	{r4, r5, lr}
    6cce:	b085      	sub	sp, #20
    6cd0:	4604      	mov	r4, r0
	switch (conn->role) {
    6cd2:	78c3      	ldrb	r3, [r0, #3]
    6cd4:	b123      	cbz	r3, 6ce0 <start_security+0x14>
    6cd6:	2b01      	cmp	r3, #1
    6cd8:	d052      	beq.n	6d80 <start_security+0xb4>
		return -EINVAL;
    6cda:	f06f 0015 	mvn.w	r0, #21
    6cde:	e051      	b.n	6d84 <start_security+0xb8>
		if (!conn->le.keys) {
    6ce0:	6f03      	ldr	r3, [r0, #112]	; 0x70
    6ce2:	b353      	cbz	r3, 6d3a <start_security+0x6e>
		if (!conn->le.keys ||
    6ce4:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6ce6:	2b00      	cmp	r3, #0
    6ce8:	d036      	beq.n	6d58 <start_security+0x8c>
		    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
    6cea:	899a      	ldrh	r2, [r3, #12]
		if (!conn->le.keys ||
    6cec:	f012 0f24 	tst.w	r2, #36	; 0x24
    6cf0:	d032      	beq.n	6d58 <start_security+0x8c>
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    6cf2:	7a62      	ldrb	r2, [r4, #9]
    6cf4:	2a02      	cmp	r2, #2
    6cf6:	d833      	bhi.n	6d60 <start_security+0x94>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    6cf8:	7a63      	ldrb	r3, [r4, #9]
    6cfa:	2b03      	cmp	r3, #3
    6cfc:	d90d      	bls.n	6d1a <start_security+0x4e>
		    !atomic_test_bit(conn->le.keys->flags,
    6cfe:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6d00:	f3bf 8f5b 	dmb	ish
    6d04:	689b      	ldr	r3, [r3, #8]
    6d06:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    6d0a:	f013 0f01 	tst.w	r3, #1
    6d0e:	d104      	bne.n	6d1a <start_security+0x4e>
		    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    6d10:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6d12:	899b      	ldrh	r3, [r3, #12]
				     BT_KEYS_AUTHENTICATED) &&
    6d14:	f013 0f20 	tst.w	r3, #32
    6d18:	d02e      	beq.n	6d78 <start_security+0xac>
						   conn->le.keys->ltk.rand,
    6d1a:	6f23      	ldr	r3, [r4, #112]	; 0x70
						   conn->le.keys->ltk.val,
    6d1c:	f103 021a 	add.w	r2, r3, #26
						   conn->le.keys->enc_size);
    6d20:	79dd      	ldrb	r5, [r3, #7]
		return bt_conn_le_start_encryption(conn,
    6d22:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    6d26:	9502      	str	r5, [sp, #8]
    6d28:	9201      	str	r2, [sp, #4]
    6d2a:	8b1b      	ldrh	r3, [r3, #24]
    6d2c:	9300      	str	r3, [sp, #0]
    6d2e:	4602      	mov	r2, r0
    6d30:	460b      	mov	r3, r1
    6d32:	4620      	mov	r0, r4
    6d34:	f7ff ff92 	bl	6c5c <bt_conn_le_start_encryption>
    6d38:	e024      	b.n	6d84 <start_security+0xb8>
						     &conn->le.dst);
    6d3a:	f100 0548 	add.w	r5, r0, #72	; 0x48
			conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    6d3e:	4629      	mov	r1, r5
    6d40:	2020      	movs	r0, #32
    6d42:	f006 f96d 	bl	d020 <bt_keys_find>
    6d46:	6720      	str	r0, [r4, #112]	; 0x70
			if (!conn->le.keys) {
    6d48:	2800      	cmp	r0, #0
    6d4a:	d1cb      	bne.n	6ce4 <start_security+0x18>
				conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    6d4c:	4629      	mov	r1, r5
    6d4e:	2004      	movs	r0, #4
    6d50:	f006 f966 	bl	d020 <bt_keys_find>
    6d54:	6720      	str	r0, [r4, #112]	; 0x70
    6d56:	e7c5      	b.n	6ce4 <start_security+0x18>
			return bt_smp_send_pairing_req(conn);
    6d58:	4620      	mov	r0, r4
    6d5a:	f005 ff14 	bl	cb86 <bt_smp_send_pairing_req>
    6d5e:	e011      	b.n	6d84 <start_security+0xb8>
    6d60:	f3bf 8f5b 	dmb	ish
    6d64:	689b      	ldr	r3, [r3, #8]
    6d66:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    6d6a:	f013 0f01 	tst.w	r3, #1
    6d6e:	d1c3      	bne.n	6cf8 <start_security+0x2c>
			return bt_smp_send_pairing_req(conn);
    6d70:	4620      	mov	r0, r4
    6d72:	f005 ff08 	bl	cb86 <bt_smp_send_pairing_req>
    6d76:	e005      	b.n	6d84 <start_security+0xb8>
			return bt_smp_send_pairing_req(conn);
    6d78:	4620      	mov	r0, r4
    6d7a:	f005 ff04 	bl	cb86 <bt_smp_send_pairing_req>
    6d7e:	e001      	b.n	6d84 <start_security+0xb8>
		return bt_smp_send_security_req(conn);
    6d80:	f005 feae 	bl	cae0 <bt_smp_send_security_req>
}
    6d84:	b005      	add	sp, #20
    6d86:	bd30      	pop	{r4, r5, pc}

00006d88 <bt_conn_security_changed>:
{
    6d88:	b538      	push	{r3, r4, r5, lr}
    6d8a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    6d8c:	4b06      	ldr	r3, [pc, #24]	; (6da8 <bt_conn_security_changed+0x20>)
    6d8e:	681c      	ldr	r4, [r3, #0]
    6d90:	e000      	b.n	6d94 <bt_conn_security_changed+0xc>
    6d92:	69a4      	ldr	r4, [r4, #24]
    6d94:	b134      	cbz	r4, 6da4 <bt_conn_security_changed+0x1c>
		if (cb->security_changed) {
    6d96:	6963      	ldr	r3, [r4, #20]
    6d98:	2b00      	cmp	r3, #0
    6d9a:	d0fa      	beq.n	6d92 <bt_conn_security_changed+0xa>
			cb->security_changed(conn, conn->sec_level);
    6d9c:	7a29      	ldrb	r1, [r5, #8]
    6d9e:	4628      	mov	r0, r5
    6da0:	4798      	blx	r3
    6da2:	e7f6      	b.n	6d92 <bt_conn_security_changed+0xa>
}
    6da4:	bd38      	pop	{r3, r4, r5, pc}
    6da6:	bf00      	nop
    6da8:	200004f8 	.word	0x200004f8

00006dac <bt_conn_security>:
	if (conn->state != BT_CONN_CONNECTED) {
    6dac:	7b03      	ldrb	r3, [r0, #12]
    6dae:	2b03      	cmp	r3, #3
    6db0:	d112      	bne.n	6dd8 <bt_conn_security+0x2c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    6db2:	7a03      	ldrb	r3, [r0, #8]
    6db4:	428b      	cmp	r3, r1
    6db6:	d212      	bcs.n	6dde <bt_conn_security+0x32>
    6db8:	7a43      	ldrb	r3, [r0, #9]
    6dba:	4299      	cmp	r1, r3
    6dbc:	d801      	bhi.n	6dc2 <bt_conn_security+0x16>
		return 0;
    6dbe:	2300      	movs	r3, #0
    6dc0:	e00e      	b.n	6de0 <bt_conn_security+0x34>
{
    6dc2:	b510      	push	{r4, lr}
    6dc4:	4604      	mov	r4, r0
	conn->required_sec_level = sec;
    6dc6:	7241      	strb	r1, [r0, #9]
	err = start_security(conn);
    6dc8:	f7ff ff80 	bl	6ccc <start_security>
	if (err) {
    6dcc:	4603      	mov	r3, r0
    6dce:	b108      	cbz	r0, 6dd4 <bt_conn_security+0x28>
		conn->required_sec_level = conn->sec_level;
    6dd0:	7a22      	ldrb	r2, [r4, #8]
    6dd2:	7262      	strb	r2, [r4, #9]
}
    6dd4:	4618      	mov	r0, r3
    6dd6:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    6dd8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    6ddc:	e000      	b.n	6de0 <bt_conn_security+0x34>
		return 0;
    6dde:	2300      	movs	r3, #0
}
    6de0:	4618      	mov	r0, r3
    6de2:	4770      	bx	lr

00006de4 <bt_conn_cb_register>:
	cb->_next = callback_list;
    6de4:	4b02      	ldr	r3, [pc, #8]	; (6df0 <bt_conn_cb_register+0xc>)
    6de6:	681a      	ldr	r2, [r3, #0]
    6de8:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    6dea:	6018      	str	r0, [r3, #0]
    6dec:	4770      	bx	lr
    6dee:	bf00      	nop
    6df0:	200004f8 	.word	0x200004f8

00006df4 <bt_conn_recv>:
{
    6df4:	b570      	push	{r4, r5, r6, lr}
    6df6:	4605      	mov	r5, r0
    6df8:	460c      	mov	r4, r1
	switch (flags) {
    6dfa:	2a01      	cmp	r2, #1
    6dfc:	d01a      	beq.n	6e34 <bt_conn_recv+0x40>
    6dfe:	2a02      	cmp	r2, #2
    6e00:	d149      	bne.n	6e96 <bt_conn_recv+0xa2>
		hdr = (void *)buf->data;
    6e02:	688b      	ldr	r3, [r1, #8]
		len = sys_le16_to_cpu(hdr->len);
    6e04:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    6e06:	89c3      	ldrh	r3, [r0, #14]
    6e08:	b97b      	cbnz	r3, 6e2a <bt_conn_recv+0x36>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    6e0a:	89a3      	ldrh	r3, [r4, #12]
    6e0c:	1af3      	subs	r3, r6, r3
    6e0e:	3304      	adds	r3, #4
    6e10:	b29b      	uxth	r3, r3
    6e12:	81eb      	strh	r3, [r5, #14]
		if (conn->rx_len) {
    6e14:	b963      	cbnz	r3, 6e30 <bt_conn_recv+0x3c>
	hdr = (void *)buf->data;
    6e16:	68a3      	ldr	r3, [r4, #8]
	len = sys_le16_to_cpu(hdr->len);
    6e18:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    6e1a:	3304      	adds	r3, #4
    6e1c:	89a2      	ldrh	r2, [r4, #12]
    6e1e:	4293      	cmp	r3, r2
    6e20:	d03f      	beq.n	6ea2 <bt_conn_recv+0xae>
		net_buf_unref(buf);
    6e22:	4620      	mov	r0, r4
    6e24:	f013 fe8e 	bl	1ab44 <net_buf_unref>
		return;
    6e28:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    6e2a:	f7ff fe6b 	bl	6b04 <bt_conn_reset_rx_state>
    6e2e:	e7ec      	b.n	6e0a <bt_conn_recv+0x16>
			conn->rx = buf;
    6e30:	612c      	str	r4, [r5, #16]
			return;
    6e32:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    6e34:	89c3      	ldrh	r3, [r0, #14]
    6e36:	b1db      	cbz	r3, 6e70 <bt_conn_recv+0x7c>
		if (buf->len > conn->rx_len) {
    6e38:	898e      	ldrh	r6, [r1, #12]
    6e3a:	42b3      	cmp	r3, r6
    6e3c:	d31e      	bcc.n	6e7c <bt_conn_recv+0x88>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    6e3e:	6900      	ldr	r0, [r0, #16]
    6e40:	3008      	adds	r0, #8
    6e42:	f013 ff34 	bl	1acae <net_buf_simple_tailroom>
    6e46:	4286      	cmp	r6, r0
    6e48:	d81e      	bhi.n	6e88 <bt_conn_recv+0x94>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    6e4a:	6928      	ldr	r0, [r5, #16]
    6e4c:	89a2      	ldrh	r2, [r4, #12]
    6e4e:	68a1      	ldr	r1, [r4, #8]
    6e50:	3008      	adds	r0, #8
    6e52:	f013 fec9 	bl	1abe8 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    6e56:	89a2      	ldrh	r2, [r4, #12]
    6e58:	89eb      	ldrh	r3, [r5, #14]
    6e5a:	1a9b      	subs	r3, r3, r2
    6e5c:	81eb      	strh	r3, [r5, #14]
		net_buf_unref(buf);
    6e5e:	4620      	mov	r0, r4
    6e60:	f013 fe70 	bl	1ab44 <net_buf_unref>
		if (conn->rx_len) {
    6e64:	89eb      	ldrh	r3, [r5, #14]
    6e66:	bb03      	cbnz	r3, 6eaa <bt_conn_recv+0xb6>
		buf = conn->rx;
    6e68:	692c      	ldr	r4, [r5, #16]
		conn->rx = NULL;
    6e6a:	612b      	str	r3, [r5, #16]
		conn->rx_len = 0;
    6e6c:	81eb      	strh	r3, [r5, #14]
		break;
    6e6e:	e7d2      	b.n	6e16 <bt_conn_recv+0x22>
			bt_conn_reset_rx_state(conn);
    6e70:	f7ff fe48 	bl	6b04 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    6e74:	4620      	mov	r0, r4
    6e76:	f013 fe65 	bl	1ab44 <net_buf_unref>
			return;
    6e7a:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    6e7c:	f7ff fe42 	bl	6b04 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    6e80:	4620      	mov	r0, r4
    6e82:	f013 fe5f 	bl	1ab44 <net_buf_unref>
			return;
    6e86:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    6e88:	4628      	mov	r0, r5
    6e8a:	f7ff fe3b 	bl	6b04 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    6e8e:	4620      	mov	r0, r4
    6e90:	f013 fe58 	bl	1ab44 <net_buf_unref>
			return;
    6e94:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_reset_rx_state(conn);
    6e96:	f7ff fe35 	bl	6b04 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
    6e9a:	4620      	mov	r0, r4
    6e9c:	f013 fe52 	bl	1ab44 <net_buf_unref>
		return;
    6ea0:	bd70      	pop	{r4, r5, r6, pc}
	bt_l2cap_recv(conn, buf);
    6ea2:	4621      	mov	r1, r4
    6ea4:	4628      	mov	r0, r5
    6ea6:	f001 fd06 	bl	88b6 <bt_l2cap_recv>
    6eaa:	bd70      	pop	{r4, r5, r6, pc}

00006eac <bt_conn_send_cb>:
{
    6eac:	b570      	push	{r4, r5, r6, lr}
    6eae:	4605      	mov	r5, r0
    6eb0:	460c      	mov	r4, r1
    6eb2:	4616      	mov	r6, r2
	pool = net_buf_pool_get(buf->pool_id);
    6eb4:	7988      	ldrb	r0, [r1, #6]
    6eb6:	f013 fdcb 	bl	1aa50 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    6eba:	8ac3      	ldrh	r3, [r0, #22]
    6ebc:	2b03      	cmp	r3, #3
    6ebe:	d911      	bls.n	6ee4 <bt_conn_send_cb+0x38>
	if (conn->state != BT_CONN_CONNECTED) {
    6ec0:	7b2b      	ldrb	r3, [r5, #12]
    6ec2:	2b03      	cmp	r3, #3
    6ec4:	d114      	bne.n	6ef0 <bt_conn_send_cb+0x44>
    6ec6:	f104 0310 	add.w	r3, r4, #16
    6eca:	89e2      	ldrh	r2, [r4, #14]
    6ecc:	4413      	add	r3, r2
    6ece:	3303      	adds	r3, #3
    6ed0:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(buf)->cb = cb;
    6ed4:	601e      	str	r6, [r3, #0]
	net_buf_put(&conn->tx_queue, buf);
    6ed6:	4621      	mov	r1, r4
    6ed8:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    6edc:	f013 fe24 	bl	1ab28 <net_buf_put>
	return 0;
    6ee0:	2000      	movs	r0, #0
}
    6ee2:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    6ee4:	4620      	mov	r0, r4
    6ee6:	f013 fe2d 	bl	1ab44 <net_buf_unref>
		return -EINVAL;
    6eea:	f06f 0015 	mvn.w	r0, #21
    6eee:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    6ef0:	4620      	mov	r0, r4
    6ef2:	f013 fe27 	bl	1ab44 <net_buf_unref>
		return -ENOTCONN;
    6ef6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    6efa:	bd70      	pop	{r4, r5, r6, pc}

00006efc <bt_conn_notify_tx>:
{
    6efc:	b538      	push	{r3, r4, r5, lr}
    6efe:	4605      	mov	r5, r0
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    6f00:	e002      	b.n	6f08 <bt_conn_notify_tx+0xc>
		tx_free(tx);
    6f02:	4620      	mov	r0, r4
    6f04:	f7ff fd9e 	bl	6a44 <tx_free>
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    6f08:	2100      	movs	r1, #0
    6f0a:	f105 001c 	add.w	r0, r5, #28
    6f0e:	f021 fdf5 	bl	28afc <k_queue_get>
    6f12:	4604      	mov	r4, r0
    6f14:	b128      	cbz	r0, 6f22 <bt_conn_notify_tx+0x26>
		if (tx->cb) {
    6f16:	6863      	ldr	r3, [r4, #4]
    6f18:	2b00      	cmp	r3, #0
    6f1a:	d0f2      	beq.n	6f02 <bt_conn_notify_tx+0x6>
			tx->cb(conn);
    6f1c:	4628      	mov	r0, r5
    6f1e:	4798      	blx	r3
    6f20:	e7ef      	b.n	6f02 <bt_conn_notify_tx+0x6>
}
    6f22:	bd38      	pop	{r3, r4, r5, pc}

00006f24 <notify_tx>:
{
    6f24:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6f26:	2400      	movs	r4, #0
    6f28:	b104      	cbz	r4, 6f2c <notify_tx+0x8>
}
    6f2a:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    6f2c:	239c      	movs	r3, #156	; 0x9c
    6f2e:	fb03 f304 	mul.w	r3, r3, r4
    6f32:	3340      	adds	r3, #64	; 0x40
    6f34:	4a0b      	ldr	r2, [pc, #44]	; (6f64 <notify_tx+0x40>)
    6f36:	4413      	add	r3, r2
    6f38:	f3bf 8f5b 	dmb	ish
    6f3c:	685b      	ldr	r3, [r3, #4]
    6f3e:	f3bf 8f5b 	dmb	ish
    6f42:	b13b      	cbz	r3, 6f54 <notify_tx+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    6f44:	239c      	movs	r3, #156	; 0x9c
    6f46:	fb03 2304 	mla	r3, r3, r4, r2
    6f4a:	7b1b      	ldrb	r3, [r3, #12]
    6f4c:	3b03      	subs	r3, #3
    6f4e:	b2db      	uxtb	r3, r3
    6f50:	2b01      	cmp	r3, #1
    6f52:	d901      	bls.n	6f58 <notify_tx+0x34>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6f54:	3401      	adds	r4, #1
    6f56:	e7e7      	b.n	6f28 <notify_tx+0x4>
			bt_conn_notify_tx(&conns[i]);
    6f58:	209c      	movs	r0, #156	; 0x9c
    6f5a:	fb00 2004 	mla	r0, r0, r4, r2
    6f5e:	f7ff ffcd 	bl	6efc <bt_conn_notify_tx>
    6f62:	e7f7      	b.n	6f54 <notify_tx+0x30>
    6f64:	2000050c 	.word	0x2000050c

00006f68 <send_frag>:
{
    6f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f6c:	4606      	mov	r6, r0
    6f6e:	460d      	mov	r5, r1
    6f70:	4690      	mov	r8, r2
    6f72:	461c      	mov	r4, r3
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    6f74:	f7ff fe00 	bl	6b78 <bt_conn_get_pkts>
    6f78:	4607      	mov	r7, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    6f7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6f7e:	f022 f93f 	bl	29200 <_impl_k_sem_take>
	notify_tx();
    6f82:	f7ff ffcf 	bl	6f24 <notify_tx>
	if (conn->state != BT_CONN_CONNECTED) {
    6f86:	7b33      	ldrb	r3, [r6, #12]
    6f88:	2b03      	cmp	r3, #3
    6f8a:	d006      	beq.n	6f9a <send_frag+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6f8c:	4638      	mov	r0, r7
    6f8e:	f022 f924 	bl	291da <_impl_k_sem_give>
	if (always_consume) {
    6f92:	bb4c      	cbnz	r4, 6fe8 <send_frag+0x80>
}
    6f94:	4620      	mov	r0, r4
    6f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_push(buf, sizeof(*hdr));
    6f9a:	2104      	movs	r1, #4
    6f9c:	f105 0008 	add.w	r0, r5, #8
    6fa0:	f013 fe53 	bl	1ac4a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6fa4:	f9b6 3000 	ldrsh.w	r3, [r6]
    6fa8:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
    6fac:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6fb0:	89ab      	ldrh	r3, [r5, #12]
    6fb2:	3b04      	subs	r3, #4
    6fb4:	8043      	strh	r3, [r0, #2]
    6fb6:	f105 0310 	add.w	r3, r5, #16
    6fba:	89ea      	ldrh	r2, [r5, #14]
    6fbc:	4413      	add	r3, r2
    6fbe:	3303      	adds	r3, #3
    6fc0:	f023 0303 	bic.w	r3, r3, #3
	cb = conn_tx(buf)->cb;
    6fc4:	6819      	ldr	r1, [r3, #0]
    6fc6:	2202      	movs	r2, #2
    6fc8:	701a      	strb	r2, [r3, #0]
	node = add_pending_tx(conn, cb);
    6fca:	4630      	mov	r0, r6
    6fcc:	f7ff fd48 	bl	6a60 <add_pending_tx>
    6fd0:	4680      	mov	r8, r0
	err = bt_send(buf);
    6fd2:	4628      	mov	r0, r5
    6fd4:	f7fe fafa 	bl	55cc <bt_send>
	if (err) {
    6fd8:	b908      	cbnz	r0, 6fde <send_frag+0x76>
	return true;
    6fda:	2401      	movs	r4, #1
    6fdc:	e7da      	b.n	6f94 <send_frag+0x2c>
		remove_pending_tx(conn, node);
    6fde:	4641      	mov	r1, r8
    6fe0:	4630      	mov	r0, r6
    6fe2:	f7ff fd5f 	bl	6aa4 <remove_pending_tx>
		goto fail;
    6fe6:	e7d1      	b.n	6f8c <send_frag+0x24>
		net_buf_unref(buf);
    6fe8:	4628      	mov	r0, r5
    6fea:	f013 fdab 	bl	1ab44 <net_buf_unref>
	return false;
    6fee:	2400      	movs	r4, #0
    6ff0:	e7d0      	b.n	6f94 <send_frag+0x2c>
	...

00006ff4 <bt_conn_add_le>:
{
    6ff4:	b538      	push	{r3, r4, r5, lr}
    6ff6:	4605      	mov	r5, r0
	struct bt_conn *conn = conn_new();
    6ff8:	f7ff fd90 	bl	6b1c <conn_new>
	if (!conn) {
    6ffc:	4604      	mov	r4, r0
    6ffe:	b1a0      	cbz	r0, 702a <bt_conn_add_le+0x36>
    7000:	2207      	movs	r2, #7
    7002:	4629      	mov	r1, r5
    7004:	3048      	adds	r0, #72	; 0x48
    7006:	f7f9 f95b 	bl	2c0 <memcpy>
	conn->sec_level = BT_SECURITY_LOW;
    700a:	2301      	movs	r3, #1
    700c:	7223      	strb	r3, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    700e:	7263      	strb	r3, [r4, #9]
	conn->type = BT_CONN_TYPE_LE;
    7010:	2300      	movs	r3, #0
    7012:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    7014:	2318      	movs	r3, #24
    7016:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    701a:	2328      	movs	r3, #40	; 0x28
    701c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    7020:	4903      	ldr	r1, [pc, #12]	; (7030 <bt_conn_add_le+0x3c>)
    7022:	f104 0074 	add.w	r0, r4, #116	; 0x74
    7026:	f022 fea9 	bl	29d7c <k_delayed_work_init>
}
    702a:	4620      	mov	r0, r4
    702c:	bd38      	pop	{r3, r4, r5, pc}
    702e:	bf00      	nop
    7030:	00007631 	.word	0x00007631

00007034 <bt_conn_addr_le_cmp>:
{
    7034:	b538      	push	{r3, r4, r5, lr}
    7036:	4604      	mov	r4, r0
    7038:	460d      	mov	r5, r1
	return memcmp(a, b, sizeof(*a));
    703a:	2207      	movs	r2, #7
    703c:	f100 0148 	add.w	r1, r0, #72	; 0x48
    7040:	4628      	mov	r0, r5
    7042:	f023 f809 	bl	2a058 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    7046:	4603      	mov	r3, r0
    7048:	b140      	cbz	r0, 705c <bt_conn_addr_le_cmp+0x28>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    704a:	78e3      	ldrb	r3, [r4, #3]
    704c:	b143      	cbz	r3, 7060 <bt_conn_addr_le_cmp+0x2c>
    704e:	2207      	movs	r2, #7
    7050:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    7054:	4628      	mov	r0, r5
    7056:	f022 ffff 	bl	2a058 <memcmp>
    705a:	4603      	mov	r3, r0
}
    705c:	4618      	mov	r0, r3
    705e:	bd38      	pop	{r3, r4, r5, pc}
    7060:	2207      	movs	r2, #7
    7062:	f104 0156 	add.w	r1, r4, #86	; 0x56
    7066:	4628      	mov	r0, r5
    7068:	f022 fff6 	bl	2a058 <memcmp>
    706c:	4603      	mov	r3, r0
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
    706e:	e7f5      	b.n	705c <bt_conn_addr_le_cmp+0x28>

00007070 <bt_conn_ref>:
	atomic_inc(&conn->ref);
    7070:	f100 0344 	add.w	r3, r0, #68	; 0x44
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    7074:	f3bf 8f5b 	dmb	ish
    7078:	e853 2f00 	ldrex	r2, [r3]
    707c:	3201      	adds	r2, #1
    707e:	e843 2100 	strex	r1, r2, [r3]
    7082:	2900      	cmp	r1, #0
    7084:	d1f8      	bne.n	7078 <bt_conn_ref+0x8>
    7086:	f3bf 8f5b 	dmb	ish
}
    708a:	4770      	bx	lr

0000708c <bt_conn_lookup_handle>:
{
    708c:	b508      	push	{r3, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    708e:	2300      	movs	r3, #0
    7090:	b10b      	cbz	r3, 7096 <bt_conn_lookup_handle+0xa>
	return NULL;
    7092:	2000      	movs	r0, #0
}
    7094:	bd08      	pop	{r3, pc}
		if (!atomic_get(&conns[i].ref)) {
    7096:	229c      	movs	r2, #156	; 0x9c
    7098:	fb02 f203 	mul.w	r2, r2, r3
    709c:	3240      	adds	r2, #64	; 0x40
    709e:	490f      	ldr	r1, [pc, #60]	; (70dc <bt_conn_lookup_handle+0x50>)
    70a0:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    70a2:	f3bf 8f5b 	dmb	ish
    70a6:	6852      	ldr	r2, [r2, #4]
    70a8:	f3bf 8f5b 	dmb	ish
    70ac:	b13a      	cbz	r2, 70be <bt_conn_lookup_handle+0x32>
		if (conns[i].state != BT_CONN_CONNECTED &&
    70ae:	229c      	movs	r2, #156	; 0x9c
    70b0:	fb02 1203 	mla	r2, r2, r3, r1
    70b4:	7b12      	ldrb	r2, [r2, #12]
    70b6:	3a03      	subs	r2, #3
    70b8:	b2d2      	uxtb	r2, r2
    70ba:	2a01      	cmp	r2, #1
    70bc:	d901      	bls.n	70c2 <bt_conn_lookup_handle+0x36>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    70be:	3301      	adds	r3, #1
    70c0:	e7e6      	b.n	7090 <bt_conn_lookup_handle+0x4>
		if (conns[i].handle == handle) {
    70c2:	229c      	movs	r2, #156	; 0x9c
    70c4:	fb02 f203 	mul.w	r2, r2, r3
    70c8:	5a8a      	ldrh	r2, [r1, r2]
    70ca:	4282      	cmp	r2, r0
    70cc:	d1f7      	bne.n	70be <bt_conn_lookup_handle+0x32>
			return bt_conn_ref(&conns[i]);
    70ce:	209c      	movs	r0, #156	; 0x9c
    70d0:	fb00 1003 	mla	r0, r0, r3, r1
    70d4:	f7ff ffcc 	bl	7070 <bt_conn_ref>
    70d8:	bd08      	pop	{r3, pc}
    70da:	bf00      	nop
    70dc:	2000050c 	.word	0x2000050c

000070e0 <bt_conn_lookup_addr_le>:
{
    70e0:	b570      	push	{r4, r5, r6, lr}
    70e2:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    70e4:	2400      	movs	r4, #0
    70e6:	b10c      	cbz	r4, 70ec <bt_conn_lookup_addr_le+0xc>
	return NULL;
    70e8:	2000      	movs	r0, #0
}
    70ea:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    70ec:	239c      	movs	r3, #156	; 0x9c
    70ee:	fb03 f304 	mul.w	r3, r3, r4
    70f2:	3340      	adds	r3, #64	; 0x40
    70f4:	4a0d      	ldr	r2, [pc, #52]	; (712c <bt_conn_lookup_addr_le+0x4c>)
    70f6:	4413      	add	r3, r2
    70f8:	f3bf 8f5b 	dmb	ish
    70fc:	685b      	ldr	r3, [r3, #4]
    70fe:	f3bf 8f5b 	dmb	ish
    7102:	b123      	cbz	r3, 710e <bt_conn_lookup_addr_le+0x2e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    7104:	239c      	movs	r3, #156	; 0x9c
    7106:	fb03 2304 	mla	r3, r3, r4, r2
    710a:	789b      	ldrb	r3, [r3, #2]
    710c:	b10b      	cbz	r3, 7112 <bt_conn_lookup_addr_le+0x32>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    710e:	3401      	adds	r4, #1
    7110:	e7e9      	b.n	70e6 <bt_conn_lookup_addr_le+0x6>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    7112:	269c      	movs	r6, #156	; 0x9c
    7114:	fb06 2604 	mla	r6, r6, r4, r2
    7118:	4629      	mov	r1, r5
    711a:	4630      	mov	r0, r6
    711c:	f7ff ff8a 	bl	7034 <bt_conn_addr_le_cmp>
    7120:	2800      	cmp	r0, #0
    7122:	d1f4      	bne.n	710e <bt_conn_lookup_addr_le+0x2e>
			return bt_conn_ref(&conns[i]);
    7124:	4630      	mov	r0, r6
    7126:	f7ff ffa3 	bl	7070 <bt_conn_ref>
    712a:	bd70      	pop	{r4, r5, r6, pc}
    712c:	2000050c 	.word	0x2000050c

00007130 <bt_conn_lookup_state_le>:
{
    7130:	b570      	push	{r4, r5, r6, lr}
    7132:	4605      	mov	r5, r0
    7134:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7136:	2400      	movs	r4, #0
    7138:	b10c      	cbz	r4, 713e <bt_conn_lookup_state_le+0xe>
	return NULL;
    713a:	2000      	movs	r0, #0
}
    713c:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    713e:	239c      	movs	r3, #156	; 0x9c
    7140:	fb03 f304 	mul.w	r3, r3, r4
    7144:	3340      	adds	r3, #64	; 0x40
    7146:	4a12      	ldr	r2, [pc, #72]	; (7190 <bt_conn_lookup_state_le+0x60>)
    7148:	4413      	add	r3, r2
    714a:	f3bf 8f5b 	dmb	ish
    714e:	685b      	ldr	r3, [r3, #4]
    7150:	f3bf 8f5b 	dmb	ish
    7154:	b19b      	cbz	r3, 717e <bt_conn_lookup_state_le+0x4e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    7156:	239c      	movs	r3, #156	; 0x9c
    7158:	fb03 2304 	mla	r3, r3, r4, r2
    715c:	789b      	ldrb	r3, [r3, #2]
    715e:	b973      	cbnz	r3, 717e <bt_conn_lookup_state_le+0x4e>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    7160:	b135      	cbz	r5, 7170 <bt_conn_lookup_state_le+0x40>
    7162:	4629      	mov	r1, r5
    7164:	209c      	movs	r0, #156	; 0x9c
    7166:	fb00 2004 	mla	r0, r0, r4, r2
    716a:	f7ff ff63 	bl	7034 <bt_conn_addr_le_cmp>
    716e:	b930      	cbnz	r0, 717e <bt_conn_lookup_state_le+0x4e>
		if (conns[i].state == state) {
    7170:	239c      	movs	r3, #156	; 0x9c
    7172:	4a07      	ldr	r2, [pc, #28]	; (7190 <bt_conn_lookup_state_le+0x60>)
    7174:	fb03 2304 	mla	r3, r3, r4, r2
    7178:	7b1b      	ldrb	r3, [r3, #12]
    717a:	42b3      	cmp	r3, r6
    717c:	d001      	beq.n	7182 <bt_conn_lookup_state_le+0x52>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    717e:	3401      	adds	r4, #1
    7180:	e7da      	b.n	7138 <bt_conn_lookup_state_le+0x8>
			return bt_conn_ref(&conns[i]);
    7182:	209c      	movs	r0, #156	; 0x9c
    7184:	fb00 2004 	mla	r0, r0, r4, r2
    7188:	f7ff ff72 	bl	7070 <bt_conn_ref>
    718c:	bd70      	pop	{r4, r5, r6, pc}
    718e:	bf00      	nop
    7190:	2000050c 	.word	0x2000050c

00007194 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    7194:	3044      	adds	r0, #68	; 0x44
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    7196:	f3bf 8f5b 	dmb	ish
    719a:	e850 3f00 	ldrex	r3, [r0]
    719e:	3b01      	subs	r3, #1
    71a0:	e840 3200 	strex	r2, r3, [r0]
    71a4:	2a00      	cmp	r2, #0
    71a6:	d1f8      	bne.n	719a <bt_conn_unref+0x6>
    71a8:	f3bf 8f5b 	dmb	ish
    71ac:	4770      	bx	lr

000071ae <conn_cleanup>:
{
    71ae:	b510      	push	{r4, lr}
    71b0:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    71b2:	e002      	b.n	71ba <conn_cleanup+0xc>
		net_buf_unref(buf);
    71b4:	4618      	mov	r0, r3
    71b6:	f013 fcc5 	bl	1ab44 <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    71ba:	2100      	movs	r1, #0
    71bc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    71c0:	f013 fc93 	bl	1aaea <net_buf_get>
    71c4:	4603      	mov	r3, r0
    71c6:	2800      	cmp	r0, #0
    71c8:	d1f4      	bne.n	71b4 <conn_cleanup+0x6>
	bt_conn_notify_tx(conn);
    71ca:	4620      	mov	r0, r4
    71cc:	f7ff fe96 	bl	6efc <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    71d0:	4620      	mov	r0, r4
    71d2:	f7ff fc97 	bl	6b04 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    71d6:	4620      	mov	r0, r4
    71d8:	f7ff ffdc 	bl	7194 <bt_conn_unref>
    71dc:	bd10      	pop	{r4, pc}
	...

000071e0 <bt_conn_prepare_events>:
{
    71e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    71e4:	4606      	mov	r6, r0
	conn_change.signaled = 0;
    71e6:	4b30      	ldr	r3, [pc, #192]	; (72a8 <bt_conn_prepare_events+0xc8>)
    71e8:	2400      	movs	r4, #0
    71ea:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    71ec:	4622      	mov	r2, r4
    71ee:	2101      	movs	r1, #1
    71f0:	f021 f93e 	bl	28470 <k_poll_event_init>
    71f4:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    71f6:	b114      	cbz	r4, 71fe <bt_conn_prepare_events+0x1e>
}
    71f8:	4628      	mov	r0, r5
    71fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = &conns[i];
    71fe:	4a2b      	ldr	r2, [pc, #172]	; (72ac <bt_conn_prepare_events+0xcc>)
    7200:	239c      	movs	r3, #156	; 0x9c
    7202:	fb03 f304 	mul.w	r3, r3, r4
    7206:	18d0      	adds	r0, r2, r3
		if (!atomic_get(&conn->ref)) {
    7208:	3340      	adds	r3, #64	; 0x40
    720a:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    720c:	f3bf 8f5b 	dmb	ish
    7210:	685b      	ldr	r3, [r3, #4]
    7212:	f3bf 8f5b 	dmb	ish
    7216:	b143      	cbz	r3, 722a <bt_conn_prepare_events+0x4a>
		if (conn->state == BT_CONN_DISCONNECTED &&
    7218:	7b03      	ldrb	r3, [r0, #12]
    721a:	b143      	cbz	r3, 722e <bt_conn_prepare_events+0x4e>
		if (conn->state != BT_CONN_CONNECTED) {
    721c:	239c      	movs	r3, #156	; 0x9c
    721e:	4a23      	ldr	r2, [pc, #140]	; (72ac <bt_conn_prepare_events+0xcc>)
    7220:	fb03 2304 	mla	r3, r3, r4, r2
    7224:	7b1b      	ldrb	r3, [r3, #12]
    7226:	2b03      	cmp	r3, #3
    7228:	d015      	beq.n	7256 <bt_conn_prepare_events+0x76>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    722a:	3401      	adds	r4, #1
    722c:	e7e3      	b.n	71f6 <bt_conn_prepare_events+0x16>
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    722e:	4603      	mov	r3, r0
    7230:	3304      	adds	r3, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7232:	f3bf 8f5b 	dmb	ish
    7236:	e853 2f00 	ldrex	r2, [r3]
    723a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    723e:	e843 1700 	strex	r7, r1, [r3]
    7242:	2f00      	cmp	r7, #0
    7244:	d1f7      	bne.n	7236 <bt_conn_prepare_events+0x56>
    7246:	f3bf 8f5b 	dmb	ish
		if (conn->state == BT_CONN_DISCONNECTED &&
    724a:	f012 0f40 	tst.w	r2, #64	; 0x40
    724e:	d0e5      	beq.n	721c <bt_conn_prepare_events+0x3c>
			conn_cleanup(conn);
    7250:	f7ff ffad 	bl	71ae <conn_cleanup>
			continue;
    7254:	e7e9      	b.n	722a <bt_conn_prepare_events+0x4a>
		k_poll_event_init(&events[ev_count],
    7256:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    725a:	ea4f 0883 	mov.w	r8, r3, lsl #2
    725e:	44b0      	add	r8, r6
				  &conn->tx_notify);
    7260:	4691      	mov	r9, r2
    7262:	279c      	movs	r7, #156	; 0x9c
    7264:	fb07 f704 	mul.w	r7, r7, r4
    7268:	f107 0318 	add.w	r3, r7, #24
    726c:	4413      	add	r3, r2
		k_poll_event_init(&events[ev_count],
    726e:	3304      	adds	r3, #4
    7270:	2200      	movs	r2, #0
    7272:	2104      	movs	r1, #4
    7274:	4640      	mov	r0, r8
    7276:	f021 f8fb 	bl	28470 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    727a:	1c6b      	adds	r3, r5, #1
    727c:	2201      	movs	r2, #1
    727e:	f888 200c 	strb.w	r2, [r8, #12]
		k_poll_event_init(&events[ev_count],
    7282:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7286:	ea4f 0883 	mov.w	r8, r3, lsl #2
    728a:	44b0      	add	r8, r6
				  &conn->tx_queue);
    728c:	f107 0328 	add.w	r3, r7, #40	; 0x28
    7290:	444b      	add	r3, r9
		k_poll_event_init(&events[ev_count],
    7292:	3304      	adds	r3, #4
    7294:	2200      	movs	r2, #0
    7296:	2104      	movs	r1, #4
    7298:	4640      	mov	r0, r8
    729a:	f021 f8e9 	bl	28470 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    729e:	3502      	adds	r5, #2
    72a0:	2302      	movs	r3, #2
    72a2:	f888 300c 	strb.w	r3, [r8, #12]
    72a6:	e7c0      	b.n	722a <bt_conn_prepare_events+0x4a>
    72a8:	2000baa8 	.word	0x2000baa8
    72ac:	2000050c 	.word	0x2000050c

000072b0 <bt_conn_set_state>:
{
    72b0:	b538      	push	{r3, r4, r5, lr}
	if (conn->state == state) {
    72b2:	7b05      	ldrb	r5, [r0, #12]
    72b4:	428d      	cmp	r5, r1
    72b6:	d00a      	beq.n	72ce <bt_conn_set_state+0x1e>
    72b8:	4604      	mov	r4, r0
	conn->state = state;
    72ba:	7301      	strb	r1, [r0, #12]
	switch (old_state) {
    72bc:	b145      	cbz	r5, 72d0 <bt_conn_set_state+0x20>
    72be:	2d02      	cmp	r5, #2
    72c0:	d009      	beq.n	72d6 <bt_conn_set_state+0x26>
	switch (conn->state) {
    72c2:	7b23      	ldrb	r3, [r4, #12]
    72c4:	2b02      	cmp	r3, #2
    72c6:	d068      	beq.n	739a <bt_conn_set_state+0xea>
    72c8:	2b03      	cmp	r3, #3
    72ca:	d00b      	beq.n	72e4 <bt_conn_set_state+0x34>
    72cc:	b31b      	cbz	r3, 7316 <bt_conn_set_state+0x66>
    72ce:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_ref(conn);
    72d0:	f7ff fece 	bl	7070 <bt_conn_ref>
		break;
    72d4:	e7f5      	b.n	72c2 <bt_conn_set_state+0x12>
		    conn->type == BT_CONN_TYPE_LE) {
    72d6:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    72d8:	2b00      	cmp	r3, #0
    72da:	d1f2      	bne.n	72c2 <bt_conn_set_state+0x12>
			k_delayed_work_cancel(&conn->le.update_work);
    72dc:	3074      	adds	r0, #116	; 0x74
    72de:	f022 fd6b 	bl	29db8 <k_delayed_work_cancel>
    72e2:	e7ee      	b.n	72c2 <bt_conn_set_state+0x12>
		if (conn->type == BT_CONN_TYPE_SCO) {
    72e4:	78a3      	ldrb	r3, [r4, #2]
    72e6:	2b02      	cmp	r3, #2
    72e8:	d0f1      	beq.n	72ce <bt_conn_set_state+0x1e>
		k_fifo_init(&conn->tx_queue);
    72ea:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    72ee:	f021 fbaa 	bl	28a46 <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    72f2:	f104 001c 	add.w	r0, r4, #28
    72f6:	f021 fba6 	bl	28a46 <k_queue_init>
		k_poll_signal(&conn_change, 0);
    72fa:	2100      	movs	r1, #0
    72fc:	482d      	ldr	r0, [pc, #180]	; (73b4 <bt_conn_set_state+0x104>)
    72fe:	f021 fb43 	bl	28988 <k_poll_signal>
	list->head = NULL;
    7302:	2300      	movs	r3, #0
    7304:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
    7306:	6423      	str	r3, [r4, #64]	; 0x40
		bt_l2cap_connected(conn);
    7308:	4620      	mov	r0, r4
    730a:	f001 f87d 	bl	8408 <bt_l2cap_connected>
		notify_connected(conn);
    730e:	4620      	mov	r0, r4
    7310:	f7ff fb74 	bl	69fc <notify_connected>
		break;
    7314:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
    7316:	78a3      	ldrb	r3, [r4, #2]
    7318:	2b02      	cmp	r3, #2
    731a:	d00d      	beq.n	7338 <bt_conn_set_state+0x88>
		if (old_state == BT_CONN_CONNECTED ||
    731c:	1eeb      	subs	r3, r5, #3
    731e:	b2db      	uxtb	r3, r3
    7320:	2b01      	cmp	r3, #1
    7322:	d90d      	bls.n	7340 <bt_conn_set_state+0x90>
		} else if (old_state == BT_CONN_CONNECT) {
    7324:	2d02      	cmp	r5, #2
    7326:	d02d      	beq.n	7384 <bt_conn_set_state+0xd4>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    7328:	2d01      	cmp	r5, #1
    732a:	d1d0      	bne.n	72ce <bt_conn_set_state+0x1e>
			if (conn->err) {
    732c:	7ae3      	ldrb	r3, [r4, #11]
    732e:	bb83      	cbnz	r3, 7392 <bt_conn_set_state+0xe2>
			bt_conn_unref(conn);
    7330:	4620      	mov	r0, r4
    7332:	f7ff ff2f 	bl	7194 <bt_conn_unref>
    7336:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    7338:	4620      	mov	r0, r4
    733a:	f7ff ff2b 	bl	7194 <bt_conn_unref>
			break;
    733e:	bd38      	pop	{r3, r4, r5, pc}
			bt_l2cap_disconnected(conn);
    7340:	4620      	mov	r0, r4
    7342:	f000 fd21 	bl	7d88 <bt_l2cap_disconnected>
			notify_disconnected(conn);
    7346:	4620      	mov	r0, r4
    7348:	f7ff fb6a 	bl	6a20 <notify_disconnected>
			process_unack_tx(conn);
    734c:	4620      	mov	r0, r4
    734e:	f7ff fc17 	bl	6b80 <process_unack_tx>
			if (conn->type == BT_CONN_TYPE_LE) {
    7352:	78a3      	ldrb	r3, [r4, #2]
    7354:	b18b      	cbz	r3, 737a <bt_conn_set_state+0xca>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
    7356:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7358:	f3bf 8f5b 	dmb	ish
    735c:	e854 3f00 	ldrex	r3, [r4]
    7360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7364:	e844 3200 	strex	r2, r3, [r4]
    7368:	2a00      	cmp	r2, #0
    736a:	d1f7      	bne.n	735c <bt_conn_set_state+0xac>
    736c:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
    7370:	2100      	movs	r1, #0
    7372:	4810      	ldr	r0, [pc, #64]	; (73b4 <bt_conn_set_state+0x104>)
    7374:	f021 fb08 	bl	28988 <k_poll_signal>
    7378:	bd38      	pop	{r3, r4, r5, pc}
				k_delayed_work_cancel(&conn->le.update_work);
    737a:	f104 0074 	add.w	r0, r4, #116	; 0x74
    737e:	f022 fd1b 	bl	29db8 <k_delayed_work_cancel>
    7382:	e7e8      	b.n	7356 <bt_conn_set_state+0xa6>
			notify_connected(conn);
    7384:	4620      	mov	r0, r4
    7386:	f7ff fb39 	bl	69fc <notify_connected>
			bt_conn_unref(conn);
    738a:	4620      	mov	r0, r4
    738c:	f7ff ff02 	bl	7194 <bt_conn_unref>
    7390:	bd38      	pop	{r3, r4, r5, pc}
				notify_connected(conn);
    7392:	4620      	mov	r0, r4
    7394:	f7ff fb32 	bl	69fc <notify_connected>
    7398:	e7ca      	b.n	7330 <bt_conn_set_state+0x80>
		if (conn->type == BT_CONN_TYPE_SCO) {
    739a:	78a3      	ldrb	r3, [r4, #2]
    739c:	2b02      	cmp	r3, #2
    739e:	d096      	beq.n	72ce <bt_conn_set_state+0x1e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    73a0:	2b00      	cmp	r3, #0
    73a2:	d194      	bne.n	72ce <bt_conn_set_state+0x1e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    73a4:	f640 32b8 	movw	r2, #3000	; 0xbb8
    73a8:	f104 0174 	add.w	r1, r4, #116	; 0x74
    73ac:	4802      	ldr	r0, [pc, #8]	; (73b8 <bt_conn_set_state+0x108>)
    73ae:	f022 fd5d 	bl	29e6c <k_delayed_work_submit_to_queue>
    73b2:	e78c      	b.n	72ce <bt_conn_set_state+0x1e>
    73b4:	2000baa8 	.word	0x2000baa8
    73b8:	20002c70 	.word	0x20002c70

000073bc <bt_hci_disconnect>:
{
    73bc:	b570      	push	{r4, r5, r6, lr}
    73be:	4605      	mov	r5, r0
    73c0:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    73c2:	2103      	movs	r1, #3
    73c4:	f240 4006 	movw	r0, #1030	; 0x406
    73c8:	f7fd fbac 	bl	4b24 <bt_hci_cmd_create>
	if (!buf) {
    73cc:	b1a8      	cbz	r0, 73fa <bt_hci_disconnect+0x3e>
    73ce:	4604      	mov	r4, r0
	disconn = net_buf_add(buf, sizeof(*disconn));
    73d0:	2103      	movs	r1, #3
    73d2:	3008      	adds	r0, #8
    73d4:	f013 fc02 	bl	1abdc <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    73d8:	882b      	ldrh	r3, [r5, #0]
    73da:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    73dc:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    73de:	4621      	mov	r1, r4
    73e0:	f240 4006 	movw	r0, #1030	; 0x406
    73e4:	f7fe f8fc 	bl	55e0 <bt_hci_cmd_send>
	if (err) {
    73e8:	4604      	mov	r4, r0
    73ea:	b108      	cbz	r0, 73f0 <bt_hci_disconnect+0x34>
}
    73ec:	4620      	mov	r0, r4
    73ee:	bd70      	pop	{r4, r5, r6, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    73f0:	2104      	movs	r1, #4
    73f2:	4628      	mov	r0, r5
    73f4:	f7ff ff5c 	bl	72b0 <bt_conn_set_state>
	return 0;
    73f8:	e7f8      	b.n	73ec <bt_hci_disconnect+0x30>
		return -ENOBUFS;
    73fa:	f06f 0468 	mvn.w	r4, #104	; 0x68
    73fe:	e7f5      	b.n	73ec <bt_hci_disconnect+0x30>

00007400 <bt_conn_get_info>:
	info->type = conn->type;
    7400:	7883      	ldrb	r3, [r0, #2]
    7402:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
    7404:	78c3      	ldrb	r3, [r0, #3]
    7406:	704b      	strb	r3, [r1, #1]
	switch (conn->type) {
    7408:	7883      	ldrb	r3, [r0, #2]
    740a:	b9cb      	cbnz	r3, 7440 <bt_conn_get_info+0x40>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    740c:	78c3      	ldrb	r3, [r0, #3]
    740e:	b983      	cbnz	r3, 7432 <bt_conn_get_info+0x32>
			info->le.src = &conn->le.init_addr;
    7410:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    7414:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.resp_addr;
    7416:	f100 0356 	add.w	r3, r0, #86	; 0x56
    741a:	608b      	str	r3, [r1, #8]
		info->le.interval = conn->le.interval;
    741c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    7420:	818b      	strh	r3, [r1, #12]
		info->le.latency = conn->le.latency;
    7422:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    7426:	81cb      	strh	r3, [r1, #14]
		info->le.timeout = conn->le.timeout;
    7428:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    742c:	820b      	strh	r3, [r1, #16]
		return 0;
    742e:	2000      	movs	r0, #0
    7430:	4770      	bx	lr
			info->le.src = &conn->le.resp_addr;
    7432:	f100 0356 	add.w	r3, r0, #86	; 0x56
    7436:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.init_addr;
    7438:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    743c:	608b      	str	r3, [r1, #8]
    743e:	e7ed      	b.n	741c <bt_conn_get_info+0x1c>
	return -EINVAL;
    7440:	f06f 0015 	mvn.w	r0, #21
}
    7444:	4770      	bx	lr
	...

00007448 <bt_le_set_auto_conn>:
	return conn;
}

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    7448:	b570      	push	{r4, r5, r6, lr}
    744a:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    744c:	460d      	mov	r5, r1
    744e:	b121      	cbz	r1, 745a <bt_le_set_auto_conn+0x12>
    7450:	4608      	mov	r0, r1
    7452:	f7fd ffd1 	bl	53f8 <bt_le_conn_params_valid>
    7456:	2800      	cmp	r0, #0
    7458:	d05a      	beq.n	7510 <bt_le_set_auto_conn+0xc8>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    745a:	4630      	mov	r0, r6
    745c:	f7ff fe40 	bl	70e0 <bt_conn_lookup_addr_le>
	if (!conn) {
    7460:	4604      	mov	r4, r0
    7462:	b1d8      	cbz	r0, 749c <bt_le_set_auto_conn+0x54>
		if (!conn) {
			return -ENOMEM;
		}
	}

	if (param) {
    7464:	b33d      	cbz	r5, 74b6 <bt_le_set_auto_conn+0x6e>
		bt_conn_set_param_le(conn, param);
    7466:	4629      	mov	r1, r5
    7468:	4620      	mov	r0, r4
    746a:	f7ff fb41 	bl	6af0 <bt_conn_set_param_le>

		if (!atomic_test_and_set_bit(conn->flags,
    746e:	1d23      	adds	r3, r4, #4
    7470:	f3bf 8f5b 	dmb	ish
    7474:	e853 2f00 	ldrex	r2, [r3]
    7478:	f042 0101 	orr.w	r1, r2, #1
    747c:	e843 1000 	strex	r0, r1, [r3]
    7480:	2800      	cmp	r0, #0
    7482:	d1f7      	bne.n	7474 <bt_le_set_auto_conn+0x2c>
    7484:	f3bf 8f5b 	dmb	ish
    7488:	f012 0f01 	tst.w	r2, #1
    748c:	d00f      	beq.n	74ae <bt_le_set_auto_conn+0x66>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    748e:	7b23      	ldrb	r3, [r4, #12]
    7490:	b363      	cbz	r3, 74ec <bt_le_set_auto_conn+0xa4>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
		}
		bt_le_scan_update(false);
	}

	bt_conn_unref(conn);
    7492:	4620      	mov	r0, r4
    7494:	f7ff fe7e 	bl	7194 <bt_conn_unref>

	return 0;
    7498:	2000      	movs	r0, #0
    749a:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_add_le(addr);
    749c:	4630      	mov	r0, r6
    749e:	f7ff fda9 	bl	6ff4 <bt_conn_add_le>
		if (!conn) {
    74a2:	4604      	mov	r4, r0
    74a4:	2800      	cmp	r0, #0
    74a6:	d1dd      	bne.n	7464 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    74a8:	f06f 000b 	mvn.w	r0, #11
}
    74ac:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_ref(conn);
    74ae:	4620      	mov	r0, r4
    74b0:	f7ff fdde 	bl	7070 <bt_conn_ref>
    74b4:	e7eb      	b.n	748e <bt_le_set_auto_conn+0x46>
		if (atomic_test_and_clear_bit(conn->flags,
    74b6:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    74b8:	f3bf 8f5b 	dmb	ish
    74bc:	e853 2f00 	ldrex	r2, [r3]
    74c0:	f022 0101 	bic.w	r1, r2, #1
    74c4:	e843 1000 	strex	r0, r1, [r3]
    74c8:	2800      	cmp	r0, #0
    74ca:	d1f7      	bne.n	74bc <bt_le_set_auto_conn+0x74>
    74cc:	f3bf 8f5b 	dmb	ish
    74d0:	f012 0f01 	tst.w	r2, #1
    74d4:	d0db      	beq.n	748e <bt_le_set_auto_conn+0x46>
			bt_conn_unref(conn);
    74d6:	4620      	mov	r0, r4
    74d8:	f7ff fe5c 	bl	7194 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    74dc:	7b23      	ldrb	r3, [r4, #12]
    74de:	2b01      	cmp	r3, #1
    74e0:	d1d5      	bne.n	748e <bt_le_set_auto_conn+0x46>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    74e2:	2100      	movs	r1, #0
    74e4:	4620      	mov	r0, r4
    74e6:	f7ff fee3 	bl	72b0 <bt_conn_set_state>
    74ea:	e7d0      	b.n	748e <bt_le_set_auto_conn+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    74ec:	f3bf 8f5b 	dmb	ish
    74f0:	4b09      	ldr	r3, [pc, #36]	; (7518 <bt_le_set_auto_conn+0xd0>)
    74f2:	681b      	ldr	r3, [r3, #0]
    74f4:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    74f8:	f013 0f02 	tst.w	r3, #2
    74fc:	d0c9      	beq.n	7492 <bt_le_set_auto_conn+0x4a>
		if (param) {
    74fe:	b11d      	cbz	r5, 7508 <bt_le_set_auto_conn+0xc0>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    7500:	2101      	movs	r1, #1
    7502:	4620      	mov	r0, r4
    7504:	f7ff fed4 	bl	72b0 <bt_conn_set_state>
		bt_le_scan_update(false);
    7508:	2000      	movs	r0, #0
    750a:	f7fe f919 	bl	5740 <bt_le_scan_update>
    750e:	e7c0      	b.n	7492 <bt_le_set_auto_conn+0x4a>
		return -EINVAL;
    7510:	f06f 0015 	mvn.w	r0, #21
    7514:	bd70      	pop	{r4, r5, r6, pc}
    7516:	bf00      	nop
    7518:	2000b9e0 	.word	0x2000b9e0

0000751c <bt_conn_disconnect>:
{
    751c:	b538      	push	{r3, r4, r5, lr}
    751e:	4604      	mov	r4, r0
    7520:	460d      	mov	r5, r1
	    conn->type == BT_CONN_TYPE_LE) {
    7522:	7883      	ldrb	r3, [r0, #2]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7524:	b13b      	cbz	r3, 7536 <bt_conn_disconnect+0x1a>
	switch (conn->state) {
    7526:	7b23      	ldrb	r3, [r4, #12]
    7528:	3b01      	subs	r3, #1
    752a:	2b03      	cmp	r3, #3
    752c:	d823      	bhi.n	7576 <bt_conn_disconnect+0x5a>
    752e:	e8df f003 	tbb	[pc, r3]
    7532:	1309      	.short	0x1309
    7534:	071d      	.short	0x071d
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    7536:	2100      	movs	r1, #0
    7538:	3048      	adds	r0, #72	; 0x48
    753a:	f7ff ff85 	bl	7448 <bt_le_set_auto_conn>
    753e:	e7f2      	b.n	7526 <bt_conn_disconnect+0xa>
		return 0;
    7540:	2000      	movs	r0, #0
    7542:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
    7544:	72e5      	strb	r5, [r4, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7546:	2100      	movs	r1, #0
    7548:	4620      	mov	r0, r4
    754a:	f7ff feb1 	bl	72b0 <bt_conn_set_state>
		bt_le_scan_update(false);
    754e:	2000      	movs	r0, #0
    7550:	f7fe f8f6 	bl	5740 <bt_le_scan_update>
		return 0;
    7554:	2000      	movs	r0, #0
    7556:	bd38      	pop	{r3, r4, r5, pc}
			k_delayed_work_cancel(&conn->le.update_work);
    7558:	f104 0074 	add.w	r0, r4, #116	; 0x74
    755c:	f022 fc2c 	bl	29db8 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    7560:	2100      	movs	r1, #0
    7562:	f242 000e 	movw	r0, #8206	; 0x200e
    7566:	f7fe f83b 	bl	55e0 <bt_hci_cmd_send>
    756a:	bd38      	pop	{r3, r4, r5, pc}
		return bt_hci_disconnect(conn, reason);
    756c:	4629      	mov	r1, r5
    756e:	4620      	mov	r0, r4
    7570:	f7ff ff24 	bl	73bc <bt_hci_disconnect>
    7574:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    7576:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    757a:	bd38      	pop	{r3, r4, r5, pc}

0000757c <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    757e:	4607      	mov	r7, r0
    7580:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    7582:	210e      	movs	r1, #14
    7584:	f242 0013 	movw	r0, #8211	; 0x2013
    7588:	f7fd facc 	bl	4b24 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    758c:	b1c8      	cbz	r0, 75c2 <bt_conn_le_conn_update+0x46>
    758e:	4606      	mov	r6, r0
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    7590:	210e      	movs	r1, #14
    7592:	3008      	adds	r0, #8
    7594:	f013 fb22 	bl	1abdc <net_buf_simple_add>
    7598:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    759a:	220e      	movs	r2, #14
    759c:	2100      	movs	r1, #0
    759e:	f022 fdef 	bl	2a180 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    75a2:	883b      	ldrh	r3, [r7, #0]
    75a4:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    75a6:	882b      	ldrh	r3, [r5, #0]
    75a8:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    75aa:	886b      	ldrh	r3, [r5, #2]
    75ac:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    75ae:	88ab      	ldrh	r3, [r5, #4]
    75b0:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    75b2:	88eb      	ldrh	r3, [r5, #6]
    75b4:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    75b6:	4631      	mov	r1, r6
    75b8:	f242 0013 	movw	r0, #8211	; 0x2013
    75bc:	f7fe f810 	bl	55e0 <bt_hci_cmd_send>
    75c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    75c2:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    75c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000075c8 <bt_conn_le_param_update>:
{
    75c8:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    75ca:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    75ce:	880a      	ldrh	r2, [r1, #0]
    75d0:	4293      	cmp	r3, r2
    75d2:	d307      	bcc.n	75e4 <bt_conn_le_param_update+0x1c>
	    conn->le.interval <= param->interval_max &&
    75d4:	884a      	ldrh	r2, [r1, #2]
	if (conn->le.interval >= param->interval_min &&
    75d6:	4293      	cmp	r3, r2
    75d8:	d804      	bhi.n	75e4 <bt_conn_le_param_update+0x1c>
	    conn->le.latency == param->latency &&
    75da:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    75de:	888b      	ldrh	r3, [r1, #4]
	    conn->le.interval <= param->interval_max &&
    75e0:	429a      	cmp	r2, r3
    75e2:	d016      	beq.n	7612 <bt_conn_le_param_update+0x4a>
    75e4:	460d      	mov	r5, r1
    75e6:	4604      	mov	r4, r0
	k_delayed_work_cancel(&conn->le.update_work);
    75e8:	3074      	adds	r0, #116	; 0x74
    75ea:	f022 fbe5 	bl	29db8 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    75ee:	4b0f      	ldr	r3, [pc, #60]	; (762c <bt_conn_le_param_update+0x64>)
    75f0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    75f4:	f013 0f02 	tst.w	r3, #2
    75f8:	d004      	beq.n	7604 <bt_conn_le_param_update+0x3c>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    75fa:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    75fe:	f013 0f02 	tst.w	r3, #2
    7602:	d101      	bne.n	7608 <bt_conn_le_param_update+0x40>
	    (conn->role == BT_HCI_ROLE_MASTER)) {
    7604:	78e3      	ldrb	r3, [r4, #3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    7606:	b963      	cbnz	r3, 7622 <bt_conn_le_param_update+0x5a>
		return bt_conn_le_conn_update(conn, param);
    7608:	4629      	mov	r1, r5
    760a:	4620      	mov	r0, r4
    760c:	f7ff ffb6 	bl	757c <bt_conn_le_conn_update>
    7610:	bd38      	pop	{r3, r4, r5, pc}
	    conn->le.timeout == param->timeout) {
    7612:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    7616:	88cb      	ldrh	r3, [r1, #6]
	    conn->le.latency == param->latency &&
    7618:	429a      	cmp	r2, r3
    761a:	d1e3      	bne.n	75e4 <bt_conn_le_param_update+0x1c>
		return -EALREADY;
    761c:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    7620:	bd38      	pop	{r3, r4, r5, pc}
	return bt_l2cap_update_conn_param(conn, param);
    7622:	4629      	mov	r1, r5
    7624:	4620      	mov	r0, r4
    7626:	f001 f821 	bl	866c <bt_l2cap_update_conn_param>
    762a:	bd38      	pop	{r3, r4, r5, pc}
    762c:	2000b970 	.word	0x2000b970

00007630 <le_conn_update>:
{
    7630:	b500      	push	{lr}
    7632:	b083      	sub	sp, #12
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    7634:	f1a0 0274 	sub.w	r2, r0, #116	; 0x74
	    conn->state == BT_CONN_CONNECT) {
    7638:	f810 3c68 	ldrb.w	r3, [r0, #-104]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    763c:	2b02      	cmp	r3, #2
    763e:	d016      	beq.n	766e <le_conn_update+0x3e>
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    7640:	f830 3c14 	ldrh.w	r3, [r0, #-20]
    7644:	f8ad 3000 	strh.w	r3, [sp]
    7648:	f830 3c12 	ldrh.w	r3, [r0, #-18]
    764c:	f8ad 3002 	strh.w	r3, [sp, #2]
    7650:	f830 3c10 	ldrh.w	r3, [r0, #-16]
    7654:	f8ad 3004 	strh.w	r3, [sp, #4]
    7658:	f830 3c0e 	ldrh.w	r3, [r0, #-14]
    765c:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    7660:	4669      	mov	r1, sp
    7662:	4610      	mov	r0, r2
    7664:	f7ff ffb0 	bl	75c8 <bt_conn_le_param_update>
}
    7668:	b003      	add	sp, #12
    766a:	f85d fb04 	ldr.w	pc, [sp], #4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    766e:	2113      	movs	r1, #19
    7670:	4610      	mov	r0, r2
    7672:	f7ff ff53 	bl	751c <bt_conn_disconnect>
		return;
    7676:	e7f7      	b.n	7668 <le_conn_update+0x38>

00007678 <le_conn_update>:
{
    7678:	b510      	push	{r4, lr}
    767a:	b082      	sub	sp, #8
    767c:	460c      	mov	r4, r1
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    767e:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    7680:	8810      	ldrh	r0, [r2, #0]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    7682:	8893      	ldrh	r3, [r2, #4]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    7684:	88d1      	ldrh	r1, [r2, #6]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    7686:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    7688:	9201      	str	r2, [sp, #4]
    768a:	9100      	str	r1, [sp, #0]
    768c:	2200      	movs	r2, #0
    768e:	4611      	mov	r1, r2
    7690:	f010 fdb6 	bl	18200 <ll_conn_update>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    7694:	b100      	cbz	r0, 7698 <le_conn_update+0x20>
    7696:	200c      	movs	r0, #12
    7698:	f005 fd82 	bl	d1a0 <cmd_status>
    769c:	6020      	str	r0, [r4, #0]
}
    769e:	b002      	add	sp, #8
    76a0:	bd10      	pop	{r4, pc}
	...

000076a4 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    76a4:	b538      	push	{r3, r4, r5, lr}
    76a6:	460d      	mov	r5, r1
	struct net_buf *buf;

	if (!pool) {
    76a8:	4603      	mov	r3, r0
    76aa:	b150      	cbz	r0, 76c2 <bt_conn_create_pdu+0x1e>
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    76ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    76b0:	4618      	mov	r0, r3
    76b2:	f013 f9d9 	bl	1aa68 <net_buf_alloc>
    76b6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    76b8:	1d29      	adds	r1, r5, #4
    76ba:	f013 fa30 	bl	1ab1e <net_buf_reserve>

	return buf;
}
    76be:	4620      	mov	r0, r4
    76c0:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
    76c2:	4b01      	ldr	r3, [pc, #4]	; (76c8 <bt_conn_create_pdu+0x24>)
    76c4:	e7f2      	b.n	76ac <bt_conn_create_pdu+0x8>
    76c6:	bf00      	nop
    76c8:	2000d1f4 	.word	0x2000d1f4

000076cc <create_frag>:
{
    76cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    76ce:	4606      	mov	r6, r0
    76d0:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(NULL, 0);
    76d2:	2100      	movs	r1, #0
    76d4:	4608      	mov	r0, r1
    76d6:	f7ff ffe5 	bl	76a4 <bt_conn_create_pdu>
    76da:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    76dc:	7b33      	ldrb	r3, [r6, #12]
    76de:	2b03      	cmp	r3, #3
    76e0:	d121      	bne.n	7726 <create_frag+0x5a>
    76e2:	f100 0310 	add.w	r3, r0, #16
    76e6:	89c2      	ldrh	r2, [r0, #14]
    76e8:	4413      	add	r3, r2
    76ea:	3303      	adds	r3, #3
    76ec:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(frag)->cb = NULL;
    76f0:	2200      	movs	r2, #0
    76f2:	601a      	str	r2, [r3, #0]
	return bt_dev.le.mtu;
    76f4:	4b10      	ldr	r3, [pc, #64]	; (7738 <create_frag+0x6c>)
    76f6:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    76fa:	f100 0608 	add.w	r6, r0, #8
    76fe:	4630      	mov	r0, r6
    7700:	f013 fad5 	bl	1acae <net_buf_simple_tailroom>
    7704:	4287      	cmp	r7, r0
    7706:	d212      	bcs.n	772e <create_frag+0x62>
	return bt_dev.le.mtu;
    7708:	4b0b      	ldr	r3, [pc, #44]	; (7738 <create_frag+0x6c>)
    770a:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    770e:	463a      	mov	r2, r7
    7710:	f854 1f08 	ldr.w	r1, [r4, #8]!
    7714:	4630      	mov	r0, r6
    7716:	f013 fa67 	bl	1abe8 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    771a:	4639      	mov	r1, r7
    771c:	4620      	mov	r0, r4
    771e:	f013 faaa 	bl	1ac76 <net_buf_simple_pull>
}
    7722:	4628      	mov	r0, r5
    7724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
    7726:	f013 fa0d 	bl	1ab44 <net_buf_unref>
		return NULL;
    772a:	2500      	movs	r5, #0
    772c:	e7f9      	b.n	7722 <create_frag+0x56>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    772e:	4630      	mov	r0, r6
    7730:	f013 fabd 	bl	1acae <net_buf_simple_tailroom>
    7734:	b287      	uxth	r7, r0
    7736:	e7ea      	b.n	770e <create_frag+0x42>
    7738:	2000b970 	.word	0x2000b970

0000773c <send_buf>:
{
    773c:	b538      	push	{r3, r4, r5, lr}
    773e:	4605      	mov	r5, r0
    7740:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
    7742:	898a      	ldrh	r2, [r1, #12]
	return bt_dev.le.mtu;
    7744:	4b1b      	ldr	r3, [pc, #108]	; (77b4 <send_buf+0x78>)
    7746:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
	if (buf->len <= conn_mtu(conn)) {
    774a:	429a      	cmp	r2, r3
    774c:	d91f      	bls.n	778e <send_buf+0x52>
	frag = create_frag(conn, buf);
    774e:	f7ff ffbd 	bl	76cc <create_frag>
	if (!frag) {
    7752:	4601      	mov	r1, r0
    7754:	b350      	cbz	r0, 77ac <send_buf+0x70>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    7756:	2301      	movs	r3, #1
    7758:	2200      	movs	r2, #0
    775a:	4628      	mov	r0, r5
    775c:	f7ff fc04 	bl	6f68 <send_frag>
    7760:	4603      	mov	r3, r0
    7762:	b1c8      	cbz	r0, 7798 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
    7764:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.mtu;
    7766:	4a13      	ldr	r2, [pc, #76]	; (77b4 <send_buf+0x78>)
    7768:	f8b2 2088 	ldrh.w	r2, [r2, #136]	; 0x88
	while (buf->len > conn_mtu(conn)) {
    776c:	429a      	cmp	r2, r3
    776e:	d215      	bcs.n	779c <send_buf+0x60>
		frag = create_frag(conn, buf);
    7770:	4621      	mov	r1, r4
    7772:	4628      	mov	r0, r5
    7774:	f7ff ffaa 	bl	76cc <create_frag>
		if (!frag) {
    7778:	4601      	mov	r1, r0
    777a:	b1c8      	cbz	r0, 77b0 <send_buf+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    777c:	2301      	movs	r3, #1
    777e:	461a      	mov	r2, r3
    7780:	4628      	mov	r0, r5
    7782:	f7ff fbf1 	bl	6f68 <send_frag>
    7786:	4603      	mov	r3, r0
    7788:	2800      	cmp	r0, #0
    778a:	d1eb      	bne.n	7764 <send_buf+0x28>
    778c:	e004      	b.n	7798 <send_buf+0x5c>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    778e:	2300      	movs	r3, #0
    7790:	461a      	mov	r2, r3
    7792:	f7ff fbe9 	bl	6f68 <send_frag>
    7796:	4603      	mov	r3, r0
}
    7798:	4618      	mov	r0, r3
    779a:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, BT_ACL_CONT, false);
    779c:	2300      	movs	r3, #0
    779e:	2201      	movs	r2, #1
    77a0:	4621      	mov	r1, r4
    77a2:	4628      	mov	r0, r5
    77a4:	f7ff fbe0 	bl	6f68 <send_frag>
    77a8:	4603      	mov	r3, r0
    77aa:	e7f5      	b.n	7798 <send_buf+0x5c>
		return false;
    77ac:	2300      	movs	r3, #0
    77ae:	e7f3      	b.n	7798 <send_buf+0x5c>
			return false;
    77b0:	2300      	movs	r3, #0
    77b2:	e7f1      	b.n	7798 <send_buf+0x5c>
    77b4:	2000b970 	.word	0x2000b970

000077b8 <bt_conn_process_tx>:
{
    77b8:	b538      	push	{r3, r4, r5, lr}
    77ba:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    77bc:	7b03      	ldrb	r3, [r0, #12]
    77be:	b97b      	cbnz	r3, 77e0 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    77c0:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    77c2:	f3bf 8f5b 	dmb	ish
    77c6:	e853 2f00 	ldrex	r2, [r3]
    77ca:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    77ce:	e843 1000 	strex	r0, r1, [r3]
    77d2:	2800      	cmp	r0, #0
    77d4:	d1f7      	bne.n	77c6 <bt_conn_process_tx+0xe>
    77d6:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    77da:	f012 0f40 	tst.w	r2, #64	; 0x40
    77de:	d10c      	bne.n	77fa <bt_conn_process_tx+0x42>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    77e0:	2100      	movs	r1, #0
    77e2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    77e6:	f013 f980 	bl	1aaea <net_buf_get>
	BT_ASSERT(buf);
    77ea:	4605      	mov	r5, r0
    77ec:	b148      	cbz	r0, 7802 <bt_conn_process_tx+0x4a>
	if (!send_buf(conn, buf)) {
    77ee:	4601      	mov	r1, r0
    77f0:	4620      	mov	r0, r4
    77f2:	f7ff ffa3 	bl	773c <send_buf>
    77f6:	b150      	cbz	r0, 780e <bt_conn_process_tx+0x56>
    77f8:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
    77fa:	4620      	mov	r0, r4
    77fc:	f7ff fcd7 	bl	71ae <conn_cleanup>
		return;
    7800:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    7802:	4040      	eors	r0, r0
    7804:	f380 8811 	msr	BASEPRI, r0
    7808:	f04f 0004 	mov.w	r0, #4
    780c:	df02      	svc	2
		net_buf_unref(buf);
    780e:	4628      	mov	r0, r5
    7810:	f013 f998 	bl	1ab44 <net_buf_unref>
    7814:	e7f0      	b.n	77f8 <bt_conn_process_tx+0x40>
	...

00007818 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    7818:	4b03      	ldr	r3, [pc, #12]	; (7828 <bt_conn_get_id+0x10>)
    781a:	1ac0      	subs	r0, r0, r3
    781c:	1080      	asrs	r0, r0, #2
    781e:	4b03      	ldr	r3, [pc, #12]	; (782c <bt_conn_get_id+0x14>)
    7820:	fb03 f000 	mul.w	r0, r3, r0
}
    7824:	b2c0      	uxtb	r0, r0
    7826:	4770      	bx	lr
    7828:	2000050c 	.word	0x2000050c
    782c:	96f96f97 	.word	0x96f96f97

00007830 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    7830:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    7832:	2300      	movs	r3, #0
    7834:	e000      	b.n	7838 <bt_conn_init+0x8>
    7836:	3301      	adds	r3, #1
    7838:	2b01      	cmp	r3, #1
    783a:	d80d      	bhi.n	7858 <bt_conn_init+0x28>
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    783c:	491a      	ldr	r1, [pc, #104]	; (78a8 <bt_conn_init+0x78>)
    783e:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
	node->next = list->head;
    7842:	4a1a      	ldr	r2, [pc, #104]	; (78ac <bt_conn_init+0x7c>)
    7844:	6814      	ldr	r4, [r2, #0]
    7846:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
	list->head = node;
    784a:	6010      	str	r0, [r2, #0]
	if (!list->tail) {
    784c:	6852      	ldr	r2, [r2, #4]
    784e:	2a00      	cmp	r2, #0
    7850:	d1f1      	bne.n	7836 <bt_conn_init+0x6>
		list->tail = list->head;
    7852:	4a16      	ldr	r2, [pc, #88]	; (78ac <bt_conn_init+0x7c>)
    7854:	6050      	str	r0, [r2, #4]
    7856:	e7ee      	b.n	7836 <bt_conn_init+0x6>
	}

	bt_att_init();
    7858:	f002 fa68 	bl	9d2c <bt_att_init>

	err = bt_smp_init();
    785c:	f005 fba2 	bl	cfa4 <bt_smp_init>
	if (err) {
    7860:	4605      	mov	r5, r0
    7862:	b108      	cbz	r0, 7868 <bt_conn_init+0x38>
			}
		}
	}

	return 0;
}
    7864:	4628      	mov	r0, r5
    7866:	bd38      	pop	{r3, r4, r5, pc}
	bt_l2cap_init();
    7868:	f000 ff20 	bl	86ac <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    786c:	462c      	mov	r4, r5
    786e:	2c00      	cmp	r4, #0
    7870:	d1f8      	bne.n	7864 <bt_conn_init+0x34>
			struct bt_conn *conn = &conns[i];
    7872:	4a0f      	ldr	r2, [pc, #60]	; (78b0 <bt_conn_init+0x80>)
    7874:	239c      	movs	r3, #156	; 0x9c
    7876:	fb03 f304 	mul.w	r3, r3, r4
    787a:	18d0      	adds	r0, r2, r3
			if (!atomic_get(&conn->ref)) {
    787c:	3340      	adds	r3, #64	; 0x40
    787e:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7880:	f3bf 8f5b 	dmb	ish
    7884:	685b      	ldr	r3, [r3, #4]
    7886:	f3bf 8f5b 	dmb	ish
    788a:	b90b      	cbnz	r3, 7890 <bt_conn_init+0x60>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    788c:	3401      	adds	r4, #1
    788e:	e7ee      	b.n	786e <bt_conn_init+0x3e>
    7890:	f3bf 8f5b 	dmb	ish
    7894:	6843      	ldr	r3, [r0, #4]
    7896:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(conn->flags,
    789a:	f013 0f01 	tst.w	r3, #1
    789e:	d0f5      	beq.n	788c <bt_conn_init+0x5c>
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    78a0:	2101      	movs	r1, #1
    78a2:	f7ff fd05 	bl	72b0 <bt_conn_set_state>
    78a6:	e7f1      	b.n	788c <bt_conn_init+0x5c>
    78a8:	200004fc 	.word	0x200004fc
    78ac:	20000698 	.word	0x20000698
    78b0:	2000050c 	.word	0x2000050c

000078b4 <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    78b4:	4a05      	ldr	r2, [pc, #20]	; (78cc <get_ident+0x18>)
    78b6:	7813      	ldrb	r3, [r2, #0]
    78b8:	3301      	adds	r3, #1
    78ba:	b2db      	uxtb	r3, r3
    78bc:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    78be:	b90b      	cbnz	r3, 78c4 <get_ident+0x10>
		ident++;
    78c0:	3301      	adds	r3, #1
    78c2:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
    78c4:	4b01      	ldr	r3, [pc, #4]	; (78cc <get_ident+0x18>)
    78c6:	7818      	ldrb	r0, [r3, #0]
    78c8:	4770      	bx	lr
    78ca:	bf00      	nop
    78cc:	2000073c 	.word	0x2000073c

000078d0 <__l2cap_lookup_ident>:
	return NULL;
}

static struct bt_l2cap_le_chan *
__l2cap_lookup_ident(struct bt_conn *conn, u16_t ident, bool remove)
{
    78d0:	b430      	push	{r4, r5}
	return list->head;
    78d2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    78d4:	b113      	cbz	r3, 78dc <__l2cap_lookup_ident+0xc>
    78d6:	3b08      	subs	r3, #8
    78d8:	2400      	movs	r4, #0
    78da:	e01b      	b.n	7914 <__l2cap_lookup_ident+0x44>
    78dc:	2300      	movs	r3, #0
    78de:	e7fb      	b.n	78d8 <__l2cap_lookup_ident+0x8>
		if (chan->ident == ident) {
			if (remove) {
    78e0:	b35a      	cbz	r2, 793a <__l2cap_lookup_ident+0x6a>
				sys_slist_remove(&conn->channels, prev,
    78e2:	f103 0208 	add.w	r2, r3, #8
	if (!prev_node) {
    78e6:	b144      	cbz	r4, 78fa <__l2cap_lookup_ident+0x2a>
		prev_node->next = node->next;
    78e8:	6899      	ldr	r1, [r3, #8]
    78ea:	6021      	str	r1, [r4, #0]
		if (list->tail == node) {
    78ec:	6c01      	ldr	r1, [r0, #64]	; 0x40
    78ee:	428a      	cmp	r2, r1
    78f0:	d00a      	beq.n	7908 <__l2cap_lookup_ident+0x38>
	node->next = NULL;
    78f2:	2200      	movs	r2, #0
    78f4:	609a      	str	r2, [r3, #8]
						 &chan->node);
			}
			return BT_L2CAP_LE_CHAN(chan);
    78f6:	4618      	mov	r0, r3
    78f8:	e01d      	b.n	7936 <__l2cap_lookup_ident+0x66>
		list->head = node->next;
    78fa:	6899      	ldr	r1, [r3, #8]
    78fc:	63c1      	str	r1, [r0, #60]	; 0x3c
		if (list->tail == node) {
    78fe:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7900:	4294      	cmp	r4, r2
    7902:	d1f6      	bne.n	78f2 <__l2cap_lookup_ident+0x22>
			list->tail = list->head;
    7904:	6401      	str	r1, [r0, #64]	; 0x40
    7906:	e7f4      	b.n	78f2 <__l2cap_lookup_ident+0x22>
			list->tail = prev_node;
    7908:	6404      	str	r4, [r0, #64]	; 0x40
    790a:	e7f2      	b.n	78f2 <__l2cap_lookup_ident+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    790c:	4625      	mov	r5, r4
    790e:	e00a      	b.n	7926 <__l2cap_lookup_ident+0x56>
    7910:	4623      	mov	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7912:	3b08      	subs	r3, #8
    7914:	b173      	cbz	r3, 7934 <__l2cap_lookup_ident+0x64>
		if (chan->ident == ident) {
    7916:	f893 503c 	ldrb.w	r5, [r3, #60]	; 0x3c
    791a:	428d      	cmp	r5, r1
    791c:	d0e0      	beq.n	78e0 <__l2cap_lookup_ident+0x10>
    791e:	f113 0408 	adds.w	r4, r3, #8
    7922:	d0f3      	beq.n	790c <__l2cap_lookup_ident+0x3c>
	return node->next;
    7924:	689d      	ldr	r5, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7926:	b11d      	cbz	r5, 7930 <__l2cap_lookup_ident+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7928:	2c00      	cmp	r4, #0
    792a:	d0f1      	beq.n	7910 <__l2cap_lookup_ident+0x40>
	return node->next;
    792c:	689b      	ldr	r3, [r3, #8]
    792e:	e7f0      	b.n	7912 <__l2cap_lookup_ident+0x42>
    7930:	2300      	movs	r3, #0
    7932:	e7ef      	b.n	7914 <__l2cap_lookup_ident+0x44>
		}

		prev = &chan->node;
	}

	return NULL;
    7934:	2000      	movs	r0, #0
}
    7936:	bc30      	pop	{r4, r5}
    7938:	4770      	bx	lr
			return BT_L2CAP_LE_CHAN(chan);
    793a:	4618      	mov	r0, r3
    793c:	e7fb      	b.n	7936 <__l2cap_lookup_ident+0x66>
	...

00007940 <l2cap_server_lookup_psm>:
	return list->head;
    7940:	4b0d      	ldr	r3, [pc, #52]	; (7978 <l2cap_server_lookup_psm+0x38>)
    7942:	681b      	ldr	r3, [r3, #0]
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    7944:	b10b      	cbz	r3, 794a <l2cap_server_lookup_psm+0xa>
    7946:	3b08      	subs	r3, #8
    7948:	e006      	b.n	7958 <l2cap_server_lookup_psm+0x18>
    794a:	2300      	movs	r3, #0
    794c:	e004      	b.n	7958 <l2cap_server_lookup_psm+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    794e:	4611      	mov	r1, r2
    7950:	e00a      	b.n	7968 <l2cap_server_lookup_psm+0x28>
	return node->next;
    7952:	689a      	ldr	r2, [r3, #8]
    7954:	f1a2 0308 	sub.w	r3, r2, #8
    7958:	b163      	cbz	r3, 7974 <l2cap_server_lookup_psm+0x34>
		if (server->psm == psm) {
    795a:	881a      	ldrh	r2, [r3, #0]
    795c:	4282      	cmp	r2, r0
    795e:	d009      	beq.n	7974 <l2cap_server_lookup_psm+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7960:	f113 0208 	adds.w	r2, r3, #8
    7964:	d0f3      	beq.n	794e <l2cap_server_lookup_psm+0xe>
	return node->next;
    7966:	6899      	ldr	r1, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    7968:	b111      	cbz	r1, 7970 <l2cap_server_lookup_psm+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    796a:	2a00      	cmp	r2, #0
    796c:	d1f1      	bne.n	7952 <l2cap_server_lookup_psm+0x12>
    796e:	e7f1      	b.n	7954 <l2cap_server_lookup_psm+0x14>
    7970:	2300      	movs	r3, #0
    7972:	e7f1      	b.n	7958 <l2cap_server_lookup_psm+0x18>
			return server;
		}
	}

	return NULL;
}
    7974:	4618      	mov	r0, r3
    7976:	4770      	bx	lr
    7978:	20000748 	.word	0x20000748

0000797c <l2cap_remove_tx_cid>:
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	/* Protect fixed channels against accidental removal */
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    797c:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
    7980:	b29b      	uxth	r3, r3
    7982:	2b3f      	cmp	r3, #63	; 0x3f
    7984:	d835      	bhi.n	79f2 <l2cap_remove_tx_cid+0x76>
	return list->head;
    7986:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7988:	b12b      	cbz	r3, 7996 <l2cap_remove_tx_cid+0x1a>
    798a:	3b08      	subs	r3, #8
    798c:	2200      	movs	r2, #0
    798e:	2b00      	cmp	r3, #0
    7990:	d031      	beq.n	79f6 <l2cap_remove_tx_cid+0x7a>
{
    7992:	b410      	push	{r4}
    7994:	e01c      	b.n	79d0 <l2cap_remove_tx_cid+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7996:	2300      	movs	r3, #0
    7998:	e7f8      	b.n	798c <l2cap_remove_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
			sys_slist_remove(&conn->channels, prev, &chan->node);
    799a:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    799e:	b14a      	cbz	r2, 79b4 <l2cap_remove_tx_cid+0x38>
		prev_node->next = node->next;
    79a0:	689c      	ldr	r4, [r3, #8]
    79a2:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    79a4:	6c04      	ldr	r4, [r0, #64]	; 0x40
    79a6:	42a1      	cmp	r1, r4
    79a8:	d00b      	beq.n	79c2 <l2cap_remove_tx_cid+0x46>
	node->next = NULL;
    79aa:	2200      	movs	r2, #0
    79ac:	609a      	str	r2, [r3, #8]
			return BT_L2CAP_LE_CHAN(chan);
    79ae:	4618      	mov	r0, r3

		prev = &chan->node;
	}

	return NULL;
}
    79b0:	bc10      	pop	{r4}
    79b2:	4770      	bx	lr
		list->head = node->next;
    79b4:	689a      	ldr	r2, [r3, #8]
    79b6:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    79b8:	6c04      	ldr	r4, [r0, #64]	; 0x40
    79ba:	428c      	cmp	r4, r1
    79bc:	d1f5      	bne.n	79aa <l2cap_remove_tx_cid+0x2e>
			list->tail = list->head;
    79be:	6402      	str	r2, [r0, #64]	; 0x40
    79c0:	e7f3      	b.n	79aa <l2cap_remove_tx_cid+0x2e>
			list->tail = prev_node;
    79c2:	6402      	str	r2, [r0, #64]	; 0x40
    79c4:	e7f1      	b.n	79aa <l2cap_remove_tx_cid+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    79c6:	4614      	mov	r4, r2
    79c8:	e00a      	b.n	79e0 <l2cap_remove_tx_cid+0x64>
    79ca:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    79cc:	3b08      	subs	r3, #8
    79ce:	b173      	cbz	r3, 79ee <l2cap_remove_tx_cid+0x72>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    79d0:	f8b3 4040 	ldrh.w	r4, [r3, #64]	; 0x40
    79d4:	42a1      	cmp	r1, r4
    79d6:	d0e0      	beq.n	799a <l2cap_remove_tx_cid+0x1e>
    79d8:	f113 0208 	adds.w	r2, r3, #8
    79dc:	d0f3      	beq.n	79c6 <l2cap_remove_tx_cid+0x4a>
	return node->next;
    79de:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    79e0:	b11c      	cbz	r4, 79ea <l2cap_remove_tx_cid+0x6e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    79e2:	2a00      	cmp	r2, #0
    79e4:	d0f1      	beq.n	79ca <l2cap_remove_tx_cid+0x4e>
	return node->next;
    79e6:	689b      	ldr	r3, [r3, #8]
    79e8:	e7f0      	b.n	79cc <l2cap_remove_tx_cid+0x50>
    79ea:	2300      	movs	r3, #0
    79ec:	e7ef      	b.n	79ce <l2cap_remove_tx_cid+0x52>
	return NULL;
    79ee:	2000      	movs	r0, #0
    79f0:	e7de      	b.n	79b0 <l2cap_remove_tx_cid+0x34>
		return NULL;
    79f2:	2000      	movs	r0, #0
    79f4:	4770      	bx	lr
	return NULL;
    79f6:	2000      	movs	r0, #0
}
    79f8:	4770      	bx	lr

000079fa <l2cap_connected>:

	return 0;
}

static void l2cap_connected(struct bt_l2cap_chan *chan)
{
    79fa:	4770      	bx	lr

000079fc <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    79fc:	4770      	bx	lr
	...

00007a00 <l2cap_accept>:
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    7a00:	2000      	movs	r0, #0
    7a02:	b110      	cbz	r0, 7a0a <l2cap_accept+0xa>
		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    7a04:	f06f 000b 	mvn.w	r0, #11
}
    7a08:	4770      	bx	lr
		if (l2cap->chan.chan.conn) {
    7a0a:	239c      	movs	r3, #156	; 0x9c
    7a0c:	fb03 f300 	mul.w	r3, r3, r0
    7a10:	4a06      	ldr	r2, [pc, #24]	; (7a2c <l2cap_accept+0x2c>)
    7a12:	58d3      	ldr	r3, [r2, r3]
    7a14:	b10b      	cbz	r3, 7a1a <l2cap_accept+0x1a>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    7a16:	3001      	adds	r0, #1
    7a18:	e7f3      	b.n	7a02 <l2cap_accept+0x2>
		l2cap->chan.chan.ops = &ops;
    7a1a:	239c      	movs	r3, #156	; 0x9c
    7a1c:	4a03      	ldr	r2, [pc, #12]	; (7a2c <l2cap_accept+0x2c>)
    7a1e:	fb03 2300 	mla	r3, r3, r0, r2
    7a22:	4a03      	ldr	r2, [pc, #12]	; (7a30 <l2cap_accept+0x30>)
    7a24:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    7a26:	600b      	str	r3, [r1, #0]
		return 0;
    7a28:	4770      	bx	lr
    7a2a:	bf00      	nop
    7a2c:	200006a0 	.word	0x200006a0
    7a30:	2000bac4 	.word	0x2000bac4

00007a34 <l2cap_alloc_frag>:
{
    7a34:	b538      	push	{r3, r4, r5, lr}
    7a36:	4605      	mov	r5, r0
	frag = chan->chan.ops->alloc_buf(&chan->chan);
    7a38:	6843      	ldr	r3, [r0, #4]
    7a3a:	68db      	ldr	r3, [r3, #12]
    7a3c:	4798      	blx	r3
	if (!frag) {
    7a3e:	4604      	mov	r4, r0
    7a40:	b120      	cbz	r0, 7a4c <l2cap_alloc_frag+0x18>
	net_buf_frag_add(chan->_sdu, frag);
    7a42:	4601      	mov	r1, r0
    7a44:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    7a48:	f013 f8ad 	bl	1aba6 <net_buf_frag_add>
}
    7a4c:	4620      	mov	r0, r4
    7a4e:	bd38      	pop	{r3, r4, r5, pc}

00007a50 <l2cap_chan_rx_give_credits>:
{
    7a50:	b538      	push	{r3, r4, r5, lr}
    7a52:	4605      	mov	r5, r0
	while (credits--) {
    7a54:	e004      	b.n	7a60 <l2cap_chan_rx_give_credits+0x10>
    7a56:	f105 0048 	add.w	r0, r5, #72	; 0x48
    7a5a:	f021 fbbe 	bl	291da <_impl_k_sem_give>
    7a5e:	4621      	mov	r1, r4
    7a60:	1e4b      	subs	r3, r1, #1
    7a62:	b29c      	uxth	r4, r3
    7a64:	2900      	cmp	r1, #0
    7a66:	d1f6      	bne.n	7a56 <l2cap_chan_rx_give_credits+0x6>
}
    7a68:	bd38      	pop	{r3, r4, r5, pc}

00007a6a <l2cap_chan_tx_give_credits>:
{
    7a6a:	b538      	push	{r3, r4, r5, lr}
    7a6c:	4605      	mov	r5, r0
	while (credits--) {
    7a6e:	e004      	b.n	7a7a <l2cap_chan_tx_give_credits+0x10>
    7a70:	f105 0068 	add.w	r0, r5, #104	; 0x68
    7a74:	f021 fbb1 	bl	291da <_impl_k_sem_give>
    7a78:	4621      	mov	r1, r4
    7a7a:	1e4b      	subs	r3, r1, #1
    7a7c:	b29c      	uxth	r4, r3
    7a7e:	2900      	cmp	r1, #0
    7a80:	d1f6      	bne.n	7a70 <l2cap_chan_tx_give_credits+0x6>
}
    7a82:	bd38      	pop	{r3, r4, r5, pc}

00007a84 <l2cap_chan_destroy>:
{
    7a84:	b510      	push	{r4, lr}
    7a86:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
    7a88:	3010      	adds	r0, #16
    7a8a:	f022 f995 	bl	29db8 <k_delayed_work_cancel>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    7a8e:	e002      	b.n	7a96 <l2cap_chan_destroy+0x12>
		net_buf_unref(buf);
    7a90:	4618      	mov	r0, r3
    7a92:	f013 f857 	bl	1ab44 <net_buf_unref>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    7a96:	2100      	movs	r1, #0
    7a98:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7a9c:	f013 f825 	bl	1aaea <net_buf_get>
    7aa0:	4603      	mov	r3, r0
    7aa2:	2800      	cmp	r0, #0
    7aa4:	d1f4      	bne.n	7a90 <l2cap_chan_destroy+0xc>
	if (ch->_sdu) {
    7aa6:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    7aaa:	b130      	cbz	r0, 7aba <l2cap_chan_destroy+0x36>
		net_buf_unref(ch->_sdu);
    7aac:	f013 f84a 	bl	1ab44 <net_buf_unref>
		ch->_sdu = NULL;
    7ab0:	2300      	movs	r3, #0
    7ab2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		ch->_sdu_len = 0;
    7ab6:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    7aba:	bd10      	pop	{r4, pc}

00007abc <l2cap_chan_le_get_tx_buf>:
{
    7abc:	b508      	push	{r3, lr}
    7abe:	4603      	mov	r3, r0
	if (ch->tx_buf) {
    7ac0:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    7ac4:	b118      	cbz	r0, 7ace <l2cap_chan_le_get_tx_buf+0x12>
		ch->tx_buf = NULL;
    7ac6:	2200      	movs	r2, #0
    7ac8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		return buf;
    7acc:	bd08      	pop	{r3, pc}
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    7ace:	2100      	movs	r1, #0
    7ad0:	f103 0080 	add.w	r0, r3, #128	; 0x80
    7ad4:	f013 f809 	bl	1aaea <net_buf_get>
}
    7ad8:	bd08      	pop	{r3, pc}

00007ada <l2cap_chan_tx_init>:
{
    7ada:	b510      	push	{r4, lr}
    7adc:	4604      	mov	r4, r0
	memset(&chan->tx, 0, sizeof(chan->tx));
    7ade:	2220      	movs	r2, #32
    7ae0:	2100      	movs	r1, #0
    7ae2:	3060      	adds	r0, #96	; 0x60
    7ae4:	f022 fb4c 	bl	2a180 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    7ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7aec:	2100      	movs	r1, #0
    7aee:	f104 0068 	add.w	r0, r4, #104	; 0x68
    7af2:	f021 fb69 	bl	291c8 <_impl_k_sem_init>
	k_fifo_init(&chan->tx_queue);
    7af6:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7afa:	f020 ffa4 	bl	28a46 <k_queue_init>
    7afe:	bd10      	pop	{r4, pc}

00007b00 <l2cap_chan_rx_init>:
{
    7b00:	b508      	push	{r3, lr}
	if (!chan->rx.mtu) {
    7b02:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7b06:	b913      	cbnz	r3, 7b0e <l2cap_chan_rx_init+0xe>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
    7b08:	2342      	movs	r3, #66	; 0x42
    7b0a:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	if (!chan->rx.init_credits) {
    7b0e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    7b12:	b96b      	cbnz	r3, 7b30 <l2cap_chan_rx_init+0x30>
		if (chan->chan.ops->alloc_buf) {
    7b14:	6843      	ldr	r3, [r0, #4]
    7b16:	68db      	ldr	r3, [r3, #12]
    7b18:	b1cb      	cbz	r3, 7b4e <l2cap_chan_rx_init+0x4e>
			chan->rx.init_credits = (chan->rx.mtu +
    7b1a:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7b1e:	3343      	adds	r3, #67	; 0x43
						 (L2CAP_MAX_LE_MPS - 1)) /
    7b20:	4a0d      	ldr	r2, [pc, #52]	; (7b58 <l2cap_chan_rx_init+0x58>)
    7b22:	fb82 1203 	smull	r1, r2, r2, r3
    7b26:	17db      	asrs	r3, r3, #31
    7b28:	ebc3 1362 	rsb	r3, r3, r2, asr #5
			chan->rx.init_credits = (chan->rx.mtu +
    7b2c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	chan->rx.mps = min(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
    7b30:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7b34:	3302      	adds	r3, #2
    7b36:	2b44      	cmp	r3, #68	; 0x44
    7b38:	bfa8      	it	ge
    7b3a:	2344      	movge	r3, #68	; 0x44
    7b3c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    7b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7b44:	2100      	movs	r1, #0
    7b46:	3048      	adds	r0, #72	; 0x48
    7b48:	f021 fb3e 	bl	291c8 <_impl_k_sem_init>
    7b4c:	bd08      	pop	{r3, pc}
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    7b4e:	2302      	movs	r3, #2
    7b50:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    7b54:	e7ec      	b.n	7b30 <l2cap_chan_rx_init+0x30>
    7b56:	bf00      	nop
    7b58:	78787879 	.word	0x78787879

00007b5c <l2cap_change_security>:
{
    7b5c:	b508      	push	{r3, lr}
	switch (err) {
    7b5e:	2905      	cmp	r1, #5
    7b60:	d00e      	beq.n	7b80 <l2cap_change_security+0x24>
    7b62:	2908      	cmp	r1, #8
    7b64:	d120      	bne.n	7ba8 <l2cap_change_security+0x4c>
		if (chan->chan.required_sec_level >= BT_SECURITY_MEDIUM) {
    7b66:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    7b6a:	2b01      	cmp	r3, #1
    7b6c:	d81f      	bhi.n	7bae <l2cap_change_security+0x52>
		chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    7b6e:	2302      	movs	r3, #2
    7b70:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
	return bt_conn_security(chan->chan.conn, chan->chan.required_sec_level);
    7b74:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
    7b78:	6800      	ldr	r0, [r0, #0]
    7b7a:	f7ff f917 	bl	6dac <bt_conn_security>
    7b7e:	bd08      	pop	{r3, pc}
		if (chan->chan.required_sec_level < BT_SECURITY_MEDIUM) {
    7b80:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    7b84:	2b01      	cmp	r3, #1
    7b86:	d905      	bls.n	7b94 <l2cap_change_security+0x38>
		} else if (chan->chan.required_sec_level < BT_SECURITY_HIGH) {
    7b88:	2b02      	cmp	r3, #2
    7b8a:	d807      	bhi.n	7b9c <l2cap_change_security+0x40>
			chan->chan.required_sec_level = BT_SECURITY_HIGH;
    7b8c:	2303      	movs	r3, #3
    7b8e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    7b92:	e7ef      	b.n	7b74 <l2cap_change_security+0x18>
			chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    7b94:	2302      	movs	r3, #2
    7b96:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    7b9a:	e7eb      	b.n	7b74 <l2cap_change_security+0x18>
		} else if (chan->chan.required_sec_level < BT_SECURITY_FIPS) {
    7b9c:	2b03      	cmp	r3, #3
    7b9e:	d809      	bhi.n	7bb4 <l2cap_change_security+0x58>
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    7ba0:	2304      	movs	r3, #4
    7ba2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    7ba6:	e7e5      	b.n	7b74 <l2cap_change_security+0x18>
		return -EINVAL;
    7ba8:	f06f 0015 	mvn.w	r0, #21
    7bac:	bd08      	pop	{r3, pc}
			return -EALREADY;
    7bae:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7bb2:	bd08      	pop	{r3, pc}
			return -EALREADY;
    7bb4:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    7bb8:	bd08      	pop	{r3, pc}
	...

00007bbc <bt_l2cap_le_fixed_chan_register>:
	sys_slist_append(&le_channels, &chan->node);
    7bbc:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    7bc0:	2200      	movs	r2, #0
    7bc2:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    7bc4:	4a05      	ldr	r2, [pc, #20]	; (7bdc <bt_l2cap_le_fixed_chan_register+0x20>)
    7bc6:	6852      	ldr	r2, [r2, #4]
    7bc8:	b11a      	cbz	r2, 7bd2 <bt_l2cap_le_fixed_chan_register+0x16>
		list->tail->next = node;
    7bca:	6013      	str	r3, [r2, #0]
		list->tail = node;
    7bcc:	4a03      	ldr	r2, [pc, #12]	; (7bdc <bt_l2cap_le_fixed_chan_register+0x20>)
    7bce:	6053      	str	r3, [r2, #4]
    7bd0:	4770      	bx	lr
		list->tail = node;
    7bd2:	4a02      	ldr	r2, [pc, #8]	; (7bdc <bt_l2cap_le_fixed_chan_register+0x20>)
    7bd4:	6053      	str	r3, [r2, #4]
		list->head = node;
    7bd6:	6013      	str	r3, [r2, #0]
    7bd8:	4770      	bx	lr
    7bda:	bf00      	nop
    7bdc:	20000740 	.word	0x20000740

00007be0 <bt_l2cap_chan_remove>:
	return list->head;
    7be0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7be2:	b123      	cbz	r3, 7bee <bt_l2cap_chan_remove+0xe>
    7be4:	3b08      	subs	r3, #8
    7be6:	2200      	movs	r2, #0
    7be8:	b35b      	cbz	r3, 7c42 <bt_l2cap_chan_remove+0x62>
{
    7bea:	b410      	push	{r4}
    7bec:	e01c      	b.n	7c28 <bt_l2cap_chan_remove+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7bee:	2300      	movs	r3, #0
    7bf0:	e7f9      	b.n	7be6 <bt_l2cap_chan_remove+0x6>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    7bf2:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    7bf6:	b142      	cbz	r2, 7c0a <bt_l2cap_chan_remove+0x2a>
		prev_node->next = node->next;
    7bf8:	689c      	ldr	r4, [r3, #8]
    7bfa:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    7bfc:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7bfe:	42a1      	cmp	r1, r4
    7c00:	d00a      	beq.n	7c18 <bt_l2cap_chan_remove+0x38>
	node->next = NULL;
    7c02:	2200      	movs	r2, #0
    7c04:	609a      	str	r2, [r3, #8]
}
    7c06:	bc10      	pop	{r4}
    7c08:	4770      	bx	lr
		list->head = node->next;
    7c0a:	689a      	ldr	r2, [r3, #8]
    7c0c:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    7c0e:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7c10:	428c      	cmp	r4, r1
    7c12:	d1f6      	bne.n	7c02 <bt_l2cap_chan_remove+0x22>
			list->tail = list->head;
    7c14:	6402      	str	r2, [r0, #64]	; 0x40
    7c16:	e7f4      	b.n	7c02 <bt_l2cap_chan_remove+0x22>
			list->tail = prev_node;
    7c18:	6402      	str	r2, [r0, #64]	; 0x40
    7c1a:	e7f2      	b.n	7c02 <bt_l2cap_chan_remove+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7c1c:	4614      	mov	r4, r2
    7c1e:	e009      	b.n	7c34 <bt_l2cap_chan_remove+0x54>
    7c20:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7c22:	3b08      	subs	r3, #8
    7c24:	2b00      	cmp	r3, #0
    7c26:	d0ee      	beq.n	7c06 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
    7c28:	428b      	cmp	r3, r1
    7c2a:	d0e2      	beq.n	7bf2 <bt_l2cap_chan_remove+0x12>
    7c2c:	f113 0208 	adds.w	r2, r3, #8
    7c30:	d0f4      	beq.n	7c1c <bt_l2cap_chan_remove+0x3c>
	return node->next;
    7c32:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7c34:	b11c      	cbz	r4, 7c3e <bt_l2cap_chan_remove+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7c36:	2a00      	cmp	r2, #0
    7c38:	d0f2      	beq.n	7c20 <bt_l2cap_chan_remove+0x40>
	return node->next;
    7c3a:	689b      	ldr	r3, [r3, #8]
    7c3c:	e7f1      	b.n	7c22 <bt_l2cap_chan_remove+0x42>
    7c3e:	2300      	movs	r3, #0
    7c40:	e7f0      	b.n	7c24 <bt_l2cap_chan_remove+0x44>
    7c42:	4770      	bx	lr

00007c44 <bt_l2cap_chan_set_state>:
	chan->state = state;
    7c44:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    7c48:	4770      	bx	lr

00007c4a <bt_l2cap_chan_del>:
{
    7c4a:	b510      	push	{r4, lr}
    7c4c:	4604      	mov	r4, r0
	if (!chan->conn) {
    7c4e:	6803      	ldr	r3, [r0, #0]
    7c50:	b12b      	cbz	r3, 7c5e <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    7c52:	6843      	ldr	r3, [r0, #4]
    7c54:	685b      	ldr	r3, [r3, #4]
    7c56:	b103      	cbz	r3, 7c5a <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    7c58:	4798      	blx	r3
	chan->conn = NULL;
    7c5a:	2300      	movs	r3, #0
    7c5c:	6023      	str	r3, [r4, #0]
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECTED);
    7c5e:	2100      	movs	r1, #0
    7c60:	4620      	mov	r0, r4
    7c62:	f7ff ffef 	bl	7c44 <bt_l2cap_chan_set_state>
	chan->psm = 0;
    7c66:	2300      	movs	r3, #0
    7c68:	8763      	strh	r3, [r4, #58]	; 0x3a
	if (chan->destroy) {
    7c6a:	68e3      	ldr	r3, [r4, #12]
    7c6c:	b10b      	cbz	r3, 7c72 <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
    7c6e:	4620      	mov	r0, r4
    7c70:	4798      	blx	r3
    7c72:	bd10      	pop	{r4, pc}

00007c74 <l2cap_rtx_timeout>:
{
    7c74:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    7c76:	f1a0 0410 	sub.w	r4, r0, #16
    7c7a:	4621      	mov	r1, r4
    7c7c:	f850 0c10 	ldr.w	r0, [r0, #-16]
    7c80:	f7ff ffae 	bl	7be0 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    7c84:	4620      	mov	r0, r4
    7c86:	f7ff ffe0 	bl	7c4a <bt_l2cap_chan_del>
    7c8a:	bd10      	pop	{r4, pc}

00007c8c <le_conn_rsp>:
{
    7c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7c90:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    7c92:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    7c94:	8992      	ldrh	r2, [r2, #12]
    7c96:	2a09      	cmp	r2, #9
    7c98:	d927      	bls.n	7cea <le_conn_rsp+0x5e>
	dcid = sys_le16_to_cpu(rsp->dcid);
    7c9a:	f8b3 a000 	ldrh.w	sl, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    7c9e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    7ca2:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    7ca6:	88df      	ldrh	r7, [r3, #6]
	result = sys_le16_to_cpu(rsp->result);
    7ca8:	891d      	ldrh	r5, [r3, #8]
	if (result == BT_L2CAP_SUCCESS ||
    7caa:	b14d      	cbz	r5, 7cc0 <le_conn_rsp+0x34>
    7cac:	2d05      	cmp	r5, #5
    7cae:	d007      	beq.n	7cc0 <le_conn_rsp+0x34>
	    result == BT_L2CAP_ERR_AUTHENTICATION ||
    7cb0:	2d08      	cmp	r5, #8
    7cb2:	d005      	beq.n	7cc0 <le_conn_rsp+0x34>
		chan = l2cap_remove_ident(conn, ident);
    7cb4:	2201      	movs	r2, #1
    7cb6:	4630      	mov	r0, r6
    7cb8:	f7ff fe0a 	bl	78d0 <__l2cap_lookup_ident>
    7cbc:	4604      	mov	r4, r0
    7cbe:	e004      	b.n	7cca <le_conn_rsp+0x3e>
		chan = l2cap_lookup_ident(conn, ident);
    7cc0:	2200      	movs	r2, #0
    7cc2:	4630      	mov	r0, r6
    7cc4:	f7ff fe04 	bl	78d0 <__l2cap_lookup_ident>
    7cc8:	4604      	mov	r4, r0
	if (!chan) {
    7cca:	b174      	cbz	r4, 7cea <le_conn_rsp+0x5e>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    7ccc:	f104 0010 	add.w	r0, r4, #16
    7cd0:	f022 f872 	bl	29db8 <k_delayed_work_cancel>
	chan->chan.ident = 0;
    7cd4:	2300      	movs	r3, #0
    7cd6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	switch (result) {
    7cda:	2d05      	cmp	r5, #5
    7cdc:	d021      	beq.n	7d22 <le_conn_rsp+0x96>
    7cde:	2d08      	cmp	r5, #8
    7ce0:	d01f      	beq.n	7d22 <le_conn_rsp+0x96>
    7ce2:	b125      	cbz	r5, 7cee <le_conn_rsp+0x62>
		bt_l2cap_chan_del(&chan->chan);
    7ce4:	4620      	mov	r0, r4
    7ce6:	f7ff ffb0 	bl	7c4a <bt_l2cap_chan_del>
    7cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chan->tx.cid = dcid;
    7cee:	f8a4 a060 	strh.w	sl, [r4, #96]	; 0x60
		chan->tx.mtu = mtu;
    7cf2:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
		chan->tx.mps = mps;
    7cf6:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
		bt_l2cap_chan_set_state(&chan->chan, BT_L2CAP_CONNECTED);
    7cfa:	2103      	movs	r1, #3
    7cfc:	4620      	mov	r0, r4
    7cfe:	f7ff ffa1 	bl	7c44 <bt_l2cap_chan_set_state>
		if (chan->chan.ops->connected) {
    7d02:	6863      	ldr	r3, [r4, #4]
    7d04:	681b      	ldr	r3, [r3, #0]
    7d06:	b10b      	cbz	r3, 7d0c <le_conn_rsp+0x80>
			chan->chan.ops->connected(&chan->chan);
    7d08:	4620      	mov	r0, r4
    7d0a:	4798      	blx	r3
		l2cap_chan_tx_give_credits(chan, credits);
    7d0c:	4639      	mov	r1, r7
    7d0e:	4620      	mov	r0, r4
    7d10:	f7ff feab 	bl	7a6a <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_give_credits(chan, chan->rx.init_credits);
    7d14:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
    7d18:	4620      	mov	r0, r4
    7d1a:	f7ff fe99 	bl	7a50 <l2cap_chan_rx_give_credits>
		break;
    7d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (l2cap_change_security(chan, result) == 0) {
    7d22:	4629      	mov	r1, r5
    7d24:	4620      	mov	r0, r4
    7d26:	f7ff ff19 	bl	7b5c <l2cap_change_security>
    7d2a:	2800      	cmp	r0, #0
    7d2c:	d0dd      	beq.n	7cea <le_conn_rsp+0x5e>
		bt_l2cap_chan_remove(conn, &chan->chan);
    7d2e:	4621      	mov	r1, r4
    7d30:	4630      	mov	r0, r6
    7d32:	f7ff ff55 	bl	7be0 <bt_l2cap_chan_remove>
    7d36:	e7d5      	b.n	7ce4 <le_conn_rsp+0x58>

00007d38 <le_disconn_rsp>:
{
    7d38:	b508      	push	{r3, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7d3a:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_disconn_rsp *rsp = (void *)buf->data;
    7d3c:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    7d3e:	8993      	ldrh	r3, [r2, #12]
    7d40:	2b03      	cmp	r3, #3
    7d42:	d800      	bhi.n	7d46 <le_disconn_rsp+0xe>
    7d44:	bd08      	pop	{r3, pc}
	chan = l2cap_remove_tx_cid(conn, dcid);
    7d46:	8809      	ldrh	r1, [r1, #0]
    7d48:	f7ff fe18 	bl	797c <l2cap_remove_tx_cid>
	if (!chan) {
    7d4c:	2800      	cmp	r0, #0
    7d4e:	d0f9      	beq.n	7d44 <le_disconn_rsp+0xc>
	bt_l2cap_chan_del(&chan->chan);
    7d50:	f7ff ff7b 	bl	7c4a <bt_l2cap_chan_del>
    7d54:	e7f6      	b.n	7d44 <le_disconn_rsp+0xc>

00007d56 <reject_cmd>:
{
    7d56:	b508      	push	{r3, lr}
	chan = l2cap_remove_ident(conn, ident);
    7d58:	2201      	movs	r2, #1
    7d5a:	6800      	ldr	r0, [r0, #0]
    7d5c:	f7ff fdb8 	bl	78d0 <__l2cap_lookup_ident>
	if (!chan) {
    7d60:	b108      	cbz	r0, 7d66 <reject_cmd+0x10>
	bt_l2cap_chan_del(&chan->chan);
    7d62:	f7ff ff72 	bl	7c4a <bt_l2cap_chan_del>
    7d66:	bd08      	pop	{r3, pc}

00007d68 <bt_l2cap_chan_add>:
{
    7d68:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
    7d6a:	f101 0308 	add.w	r3, r1, #8
	node->next = NULL;
    7d6e:	2400      	movs	r4, #0
    7d70:	608c      	str	r4, [r1, #8]
	if (!list->tail) {
    7d72:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7d74:	b12c      	cbz	r4, 7d82 <bt_l2cap_chan_add+0x1a>
		list->tail->next = node;
    7d76:	6023      	str	r3, [r4, #0]
		list->tail = node;
    7d78:	6403      	str	r3, [r0, #64]	; 0x40
	chan->conn = conn;
    7d7a:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
    7d7c:	60ca      	str	r2, [r1, #12]
}
    7d7e:	bc10      	pop	{r4}
    7d80:	4770      	bx	lr
		list->tail = node;
    7d82:	6403      	str	r3, [r0, #64]	; 0x40
		list->head = node;
    7d84:	63c3      	str	r3, [r0, #60]	; 0x3c
    7d86:	e7f8      	b.n	7d7a <bt_l2cap_chan_add+0x12>

00007d88 <bt_l2cap_disconnected>:
{
    7d88:	b510      	push	{r4, lr}
	return list->head;
    7d8a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    7d8c:	b140      	cbz	r0, 7da0 <bt_l2cap_disconnected+0x18>
    7d8e:	3808      	subs	r0, #8
    7d90:	b140      	cbz	r0, 7da4 <bt_l2cap_disconnected+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7d92:	f110 0408 	adds.w	r4, r0, #8
    7d96:	d000      	beq.n	7d9a <bt_l2cap_disconnected+0x12>
	return node->next;
    7d98:	6884      	ldr	r4, [r0, #8]
    7d9a:	b12c      	cbz	r4, 7da8 <bt_l2cap_disconnected+0x20>
    7d9c:	3c08      	subs	r4, #8
    7d9e:	e00a      	b.n	7db6 <bt_l2cap_disconnected+0x2e>
    7da0:	2000      	movs	r0, #0
    7da2:	e7f5      	b.n	7d90 <bt_l2cap_disconnected+0x8>
    7da4:	4604      	mov	r4, r0
    7da6:	e006      	b.n	7db6 <bt_l2cap_disconnected+0x2e>
    7da8:	2400      	movs	r4, #0
    7daa:	e004      	b.n	7db6 <bt_l2cap_disconnected+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7dac:	461a      	mov	r2, r3
    7dae:	e00a      	b.n	7dc6 <bt_l2cap_disconnected+0x3e>
    7db0:	3b08      	subs	r3, #8
    7db2:	4620      	mov	r0, r4
    7db4:	461c      	mov	r4, r3
    7db6:	b178      	cbz	r0, 7dd8 <bt_l2cap_disconnected+0x50>
		bt_l2cap_chan_del(chan);
    7db8:	f7ff ff47 	bl	7c4a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    7dbc:	b144      	cbz	r4, 7dd0 <bt_l2cap_disconnected+0x48>
    7dbe:	f114 0308 	adds.w	r3, r4, #8
    7dc2:	d0f3      	beq.n	7dac <bt_l2cap_disconnected+0x24>
	return node->next;
    7dc4:	68a2      	ldr	r2, [r4, #8]
    7dc6:	b12a      	cbz	r2, 7dd4 <bt_l2cap_disconnected+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7dc8:	2b00      	cmp	r3, #0
    7dca:	d0f1      	beq.n	7db0 <bt_l2cap_disconnected+0x28>
	return node->next;
    7dcc:	68a3      	ldr	r3, [r4, #8]
    7dce:	e7ef      	b.n	7db0 <bt_l2cap_disconnected+0x28>
    7dd0:	4623      	mov	r3, r4
    7dd2:	e7ee      	b.n	7db2 <bt_l2cap_disconnected+0x2a>
    7dd4:	2300      	movs	r3, #0
    7dd6:	e7ec      	b.n	7db2 <bt_l2cap_disconnected+0x2a>
}
    7dd8:	bd10      	pop	{r4, pc}

00007dda <bt_l2cap_create_pdu>:
{
    7dda:	b508      	push	{r3, lr}
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    7ddc:	3104      	adds	r1, #4
    7dde:	f7ff fc61 	bl	76a4 <bt_conn_create_pdu>
}
    7de2:	bd08      	pop	{r3, pc}

00007de4 <l2cap_create_le_sig_pdu>:
{
    7de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7de6:	460f      	mov	r7, r1
    7de8:	4616      	mov	r6, r2
    7dea:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu(NULL, 0);
    7dec:	2100      	movs	r1, #0
    7dee:	4608      	mov	r0, r1
    7df0:	f7ff fff3 	bl	7dda <bt_l2cap_create_pdu>
    7df4:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    7df6:	2104      	movs	r1, #4
    7df8:	3008      	adds	r0, #8
    7dfa:	f012 feef 	bl	1abdc <net_buf_simple_add>
	hdr->code = code;
    7dfe:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    7e00:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    7e02:	8045      	strh	r5, [r0, #2]
}
    7e04:	4620      	mov	r0, r4
    7e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007e08 <l2cap_chan_create_seg>:
{
    7e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e0c:	4605      	mov	r5, r0
    7e0e:	460c      	mov	r4, r1
    7e10:	4690      	mov	r8, r2
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    7e12:	7988      	ldrb	r0, [r1, #6]
    7e14:	f012 fe1c 	bl	1aa50 <net_buf_pool_get>
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    7e18:	89a3      	ldrh	r3, [r4, #12]
    7e1a:	4443      	add	r3, r8
    7e1c:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    7e20:	4293      	cmp	r3, r2
    7e22:	d802      	bhi.n	7e2a <l2cap_chan_create_seg+0x22>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    7e24:	8ac3      	ldrh	r3, [r0, #22]
    7e26:	2b03      	cmp	r3, #3
    7e28:	d815      	bhi.n	7e56 <l2cap_chan_create_seg+0x4e>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    7e2a:	79a0      	ldrb	r0, [r4, #6]
    7e2c:	f012 fe10 	bl	1aa50 <net_buf_pool_get>
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    7e30:	8ac3      	ldrh	r3, [r0, #22]
    7e32:	2b03      	cmp	r3, #3
    7e34:	d902      	bls.n	7e3c <l2cap_chan_create_seg+0x34>
	    pool->buf_size >= BT_L2CAP_BUF_SIZE(L2CAP_MAX_LE_MPS)) {
    7e36:	8a83      	ldrh	r3, [r0, #20]
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    7e38:	2b4b      	cmp	r3, #75	; 0x4b
    7e3a:	d82e      	bhi.n	7e9a <l2cap_chan_create_seg+0x92>
	return bt_l2cap_create_pdu(NULL, 0);
    7e3c:	2100      	movs	r1, #0
    7e3e:	4608      	mov	r0, r1
    7e40:	f7ff ffcb 	bl	7dda <bt_l2cap_create_pdu>
    7e44:	4606      	mov	r6, r0
	if (sdu_hdr_len) {
    7e46:	f1b8 0f00 	cmp.w	r8, #0
    7e4a:	d038      	beq.n	7ebe <l2cap_chan_create_seg+0xb6>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    7e4c:	f106 0008 	add.w	r0, r6, #8
    7e50:	4623      	mov	r3, r4
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
    7e52:	2100      	movs	r1, #0
    7e54:	e02e      	b.n	7eb4 <l2cap_chan_create_seg+0xac>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    7e56:	fa1f f688 	uxth.w	r6, r8
    7e5a:	3608      	adds	r6, #8
    7e5c:	b2b6      	uxth	r6, r6
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    7e5e:	f104 0708 	add.w	r7, r4, #8
    7e62:	4638      	mov	r0, r7
    7e64:	f012 ff1f 	bl	1aca6 <net_buf_simple_headroom>
    7e68:	42b0      	cmp	r0, r6
    7e6a:	d3de      	bcc.n	7e2a <l2cap_chan_create_seg+0x22>
    7e6c:	6823      	ldr	r3, [r4, #0]
    7e6e:	2b00      	cmp	r3, #0
    7e70:	d1db      	bne.n	7e2a <l2cap_chan_create_seg+0x22>
		if (sdu_hdr_len) {
    7e72:	f1b8 0f00 	cmp.w	r8, #0
    7e76:	d00b      	beq.n	7e90 <l2cap_chan_create_seg+0x88>
    7e78:	4623      	mov	r3, r4
    7e7a:	2100      	movs	r1, #0
    7e7c:	e002      	b.n	7e84 <l2cap_chan_create_seg+0x7c>

	while (buf) {
		bytes += buf->len;
    7e7e:	899a      	ldrh	r2, [r3, #12]
    7e80:	4411      	add	r1, r2
		buf = buf->frags;
    7e82:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    7e84:	2b00      	cmp	r3, #0
    7e86:	d1fa      	bne.n	7e7e <l2cap_chan_create_seg+0x76>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    7e88:	b289      	uxth	r1, r1
    7e8a:	4638      	mov	r0, r7
    7e8c:	f012 fee5 	bl	1ac5a <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    7e90:	4620      	mov	r0, r4
    7e92:	f012 fe73 	bl	1ab7c <net_buf_ref>
    7e96:	4606      	mov	r6, r0
    7e98:	e02f      	b.n	7efa <l2cap_chan_create_seg+0xf2>
		seg = net_buf_alloc(pool, K_NO_WAIT);
    7e9a:	2100      	movs	r1, #0
    7e9c:	f012 fde4 	bl	1aa68 <net_buf_alloc>
		if (seg) {
    7ea0:	4606      	mov	r6, r0
    7ea2:	2800      	cmp	r0, #0
    7ea4:	d0ca      	beq.n	7e3c <l2cap_chan_create_seg+0x34>
			net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    7ea6:	2108      	movs	r1, #8
    7ea8:	f012 fe39 	bl	1ab1e <net_buf_reserve>
    7eac:	e7cb      	b.n	7e46 <l2cap_chan_create_seg+0x3e>
		bytes += buf->len;
    7eae:	899a      	ldrh	r2, [r3, #12]
    7eb0:	4411      	add	r1, r2
		buf = buf->frags;
    7eb2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    7eb4:	2b00      	cmp	r3, #0
    7eb6:	d1fa      	bne.n	7eae <l2cap_chan_create_seg+0xa6>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    7eb8:	b289      	uxth	r1, r1
    7eba:	f012 fea7 	bl	1ac0c <net_buf_simple_add_le16>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    7ebe:	f106 0708 	add.w	r7, r6, #8
    7ec2:	4638      	mov	r0, r7
    7ec4:	f012 fef3 	bl	1acae <net_buf_simple_tailroom>
    7ec8:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
    7ecc:	eba5 0308 	sub.w	r3, r5, r8
    7ed0:	4298      	cmp	r0, r3
    7ed2:	d315      	bcc.n	7f00 <l2cap_chan_create_seg+0xf8>
    7ed4:	fa1f f888 	uxth.w	r8, r8
    7ed8:	eba5 0508 	sub.w	r5, r5, r8
    7edc:	b2ad      	uxth	r5, r5
	len = min(buf->len, len);
    7ede:	89a0      	ldrh	r0, [r4, #12]
    7ee0:	4285      	cmp	r5, r0
    7ee2:	bf28      	it	cs
    7ee4:	4605      	movcs	r5, r0
	net_buf_add_mem(seg, buf->data, len);
    7ee6:	462a      	mov	r2, r5
    7ee8:	f854 1f08 	ldr.w	r1, [r4, #8]!
    7eec:	4638      	mov	r0, r7
    7eee:	f012 fe7b 	bl	1abe8 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    7ef2:	4629      	mov	r1, r5
    7ef4:	4620      	mov	r0, r4
    7ef6:	f012 febe 	bl	1ac76 <net_buf_simple_pull>
}
    7efa:	4630      	mov	r0, r6
    7efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    7f00:	4638      	mov	r0, r7
    7f02:	f012 fed4 	bl	1acae <net_buf_simple_tailroom>
    7f06:	b285      	uxth	r5, r0
    7f08:	e7e9      	b.n	7ede <l2cap_chan_create_seg+0xd6>

00007f0a <bt_l2cap_send_cb>:
{
    7f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f0c:	4605      	mov	r5, r0
    7f0e:	460f      	mov	r7, r1
    7f10:	4614      	mov	r4, r2
    7f12:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    7f14:	2104      	movs	r1, #4
    7f16:	f102 0008 	add.w	r0, r2, #8
    7f1a:	f012 fe96 	bl	1ac4a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    7f1e:	89a3      	ldrh	r3, [r4, #12]
    7f20:	3b04      	subs	r3, #4
    7f22:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
    7f24:	8047      	strh	r7, [r0, #2]
	bt_conn_send_cb(conn, buf, cb);
    7f26:	4632      	mov	r2, r6
    7f28:	4621      	mov	r1, r4
    7f2a:	4628      	mov	r0, r5
    7f2c:	f7fe ffbe 	bl	6eac <bt_conn_send_cb>
    7f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00007f34 <l2cap_chan_send_req>:
{
    7f34:	b538      	push	{r3, r4, r5, lr}
    7f36:	4604      	mov	r4, r0
    7f38:	460d      	mov	r5, r1
	if (timeout) {
    7f3a:	b94a      	cbnz	r2, 7f50 <l2cap_chan_send_req+0x1c>
		k_delayed_work_cancel(&chan->chan.rtx_work);
    7f3c:	3010      	adds	r0, #16
    7f3e:	f021 ff3b 	bl	29db8 <k_delayed_work_cancel>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    7f42:	2300      	movs	r3, #0
    7f44:	462a      	mov	r2, r5
    7f46:	2105      	movs	r1, #5
    7f48:	6820      	ldr	r0, [r4, #0]
    7f4a:	f7ff ffde 	bl	7f0a <bt_l2cap_send_cb>
    7f4e:	bd38      	pop	{r3, r4, r5, pc}
    7f50:	f100 0110 	add.w	r1, r0, #16
    7f54:	4801      	ldr	r0, [pc, #4]	; (7f5c <l2cap_chan_send_req+0x28>)
    7f56:	f021 ff89 	bl	29e6c <k_delayed_work_submit_to_queue>
    7f5a:	e7f2      	b.n	7f42 <l2cap_chan_send_req+0xe>
    7f5c:	20002c70 	.word	0x20002c70

00007f60 <l2cap_le_conn_req>:
{
    7f60:	b538      	push	{r3, r4, r5, lr}
    7f62:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    7f64:	f7ff fca6 	bl	78b4 <get_ident>
    7f68:	4602      	mov	r2, r0
    7f6a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    7f6e:	230a      	movs	r3, #10
    7f70:	2114      	movs	r1, #20
    7f72:	2000      	movs	r0, #0
    7f74:	f7ff ff36 	bl	7de4 <l2cap_create_le_sig_pdu>
    7f78:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    7f7a:	210a      	movs	r1, #10
    7f7c:	3008      	adds	r0, #8
    7f7e:	f012 fe2d 	bl	1abdc <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    7f82:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    7f84:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    7f86:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    7f8a:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    7f8c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    7f90:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    7f92:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    7f96:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    7f98:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    7f9c:	8103      	strh	r3, [r0, #8]
	l2cap_chan_send_req(ch, buf, L2CAP_CONN_TIMEOUT);
    7f9e:	f649 4240 	movw	r2, #40000	; 0x9c40
    7fa2:	4629      	mov	r1, r5
    7fa4:	4620      	mov	r0, r4
    7fa6:	f7ff ffc5 	bl	7f34 <l2cap_chan_send_req>
}
    7faa:	2000      	movs	r0, #0
    7fac:	bd38      	pop	{r3, r4, r5, pc}

00007fae <l2cap_le_encrypt_change>:
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
    7fae:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    7fb2:	2b01      	cmp	r3, #1
    7fb4:	d000      	beq.n	7fb8 <l2cap_le_encrypt_change+0xa>
    7fb6:	4770      	bx	lr
    7fb8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    7fbc:	2b00      	cmp	r3, #0
    7fbe:	d1fa      	bne.n	7fb6 <l2cap_le_encrypt_change+0x8>
{
    7fc0:	b510      	push	{r4, lr}
    7fc2:	4604      	mov	r4, r0
	if (status) {
    7fc4:	b911      	cbnz	r1, 7fcc <l2cap_le_encrypt_change+0x1e>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
    7fc6:	f7ff ffcb 	bl	7f60 <l2cap_le_conn_req>
    7fca:	bd10      	pop	{r4, pc}
		bt_l2cap_chan_remove(chan->conn, chan);
    7fcc:	4601      	mov	r1, r0
    7fce:	6800      	ldr	r0, [r0, #0]
    7fd0:	f7ff fe06 	bl	7be0 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
    7fd4:	4620      	mov	r0, r4
    7fd6:	f7ff fe38 	bl	7c4a <bt_l2cap_chan_del>
		return;
    7fda:	bd10      	pop	{r4, pc}

00007fdc <bt_l2cap_encrypt_change>:
{
    7fdc:	b538      	push	{r3, r4, r5, lr}
    7fde:	460d      	mov	r5, r1
	return list->head;
    7fe0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7fe2:	b10c      	cbz	r4, 7fe8 <bt_l2cap_encrypt_change+0xc>
    7fe4:	3c08      	subs	r4, #8
    7fe6:	e00a      	b.n	7ffe <bt_l2cap_encrypt_change+0x22>
    7fe8:	2400      	movs	r4, #0
    7fea:	e008      	b.n	7ffe <bt_l2cap_encrypt_change+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7fec:	f114 0308 	adds.w	r3, r4, #8
    7ff0:	d012      	beq.n	8018 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18>
	return node->next;
    7ff2:	68a2      	ldr	r2, [r4, #8]
    7ff4:	b192      	cbz	r2, 801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7ff6:	b103      	cbz	r3, 7ffa <bt_l2cap_encrypt_change+0x1e>
	return node->next;
    7ff8:	68a3      	ldr	r3, [r4, #8]
    7ffa:	f1a3 0408 	sub.w	r4, r3, #8
    7ffe:	b17c      	cbz	r4, 8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>
		l2cap_le_encrypt_change(chan, hci_status);
    8000:	4629      	mov	r1, r5
    8002:	4620      	mov	r0, r4
    8004:	f7ff ffd3 	bl	7fae <l2cap_le_encrypt_change>
		if (chan->ops->encrypt_change) {
    8008:	6863      	ldr	r3, [r4, #4]
    800a:	689b      	ldr	r3, [r3, #8]
    800c:	2b00      	cmp	r3, #0
    800e:	d0ed      	beq.n	7fec <bt_l2cap_encrypt_change+0x10>
			chan->ops->encrypt_change(chan, hci_status);
    8010:	4629      	mov	r1, r5
    8012:	4620      	mov	r0, r4
    8014:	4798      	blx	r3
    8016:	e7e9      	b.n	7fec <bt_l2cap_encrypt_change+0x10>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8018:	461a      	mov	r2, r3
    801a:	e7eb      	b.n	7ff4 <bt_l2cap_encrypt_change+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    801c:	2400      	movs	r4, #0
    801e:	e7ee      	b.n	7ffe <bt_l2cap_encrypt_change+0x22>
}
    8020:	bd38      	pop	{r3, r4, r5, pc}

00008022 <l2cap_chan_update_credits>:
{
    8022:	b570      	push	{r4, r5, r6, lr}
 */
__syscall unsigned int k_sem_count_get(struct k_sem *sem);

static inline unsigned int _impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    8024:	6d04      	ldr	r4, [r0, #80]	; 0x50
	    L2CAP_LE_CREDITS_THRESHOLD(chan->rx.init_credits)) {
    8026:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	if (k_sem_count_get(&chan->rx.credits) >
    802a:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    802e:	d900      	bls.n	8032 <l2cap_chan_update_credits+0x10>
    8030:	bd70      	pop	{r4, r5, r6, pc}
    8032:	460e      	mov	r6, r1
    8034:	4605      	mov	r5, r0
	credits = chan->rx.init_credits - k_sem_count_get(&chan->rx.credits);
    8036:	b2a4      	uxth	r4, r4
    8038:	1b1b      	subs	r3, r3, r4
    803a:	b29c      	uxth	r4, r3
	l2cap_chan_rx_give_credits(chan, credits);
    803c:	4621      	mov	r1, r4
    803e:	f7ff fd07 	bl	7a50 <l2cap_chan_rx_give_credits>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    8042:	f7ff fc37 	bl	78b4 <get_ident>
    8046:	2304      	movs	r3, #4
    8048:	4602      	mov	r2, r0
    804a:	2116      	movs	r1, #22
    804c:	4630      	mov	r0, r6
    804e:	f7ff fec9 	bl	7de4 <l2cap_create_le_sig_pdu>
    8052:	4606      	mov	r6, r0
	ev = net_buf_add(buf, sizeof(*ev));
    8054:	2104      	movs	r1, #4
    8056:	3008      	adds	r0, #8
    8058:	f012 fdc0 	bl	1abdc <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    805c:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    8060:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    8062:	8044      	strh	r4, [r0, #2]
    8064:	2300      	movs	r3, #0
    8066:	4632      	mov	r2, r6
    8068:	2105      	movs	r1, #5
    806a:	6828      	ldr	r0, [r5, #0]
    806c:	f7ff ff4d 	bl	7f0a <bt_l2cap_send_cb>
}
    8070:	e7de      	b.n	8030 <l2cap_chan_update_credits+0xe>

00008072 <l2cap_chan_le_send>:
{
    8072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8074:	4604      	mov	r4, r0
    8076:	460d      	mov	r5, r1
    8078:	4616      	mov	r6, r2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    807a:	2100      	movs	r1, #0
    807c:	3068      	adds	r0, #104	; 0x68
    807e:	f021 f8bf 	bl	29200 <_impl_k_sem_take>
	if (k_sem_take(&ch->tx.credits, K_NO_WAIT)) {
    8082:	b9b0      	cbnz	r0, 80b2 <l2cap_chan_le_send+0x40>
	buf = l2cap_chan_create_seg(ch, buf, sdu_hdr_len);
    8084:	4632      	mov	r2, r6
    8086:	4629      	mov	r1, r5
    8088:	4620      	mov	r0, r4
    808a:	f7ff febd 	bl	7e08 <l2cap_chan_create_seg>
	if (!ch->chan.conn) {
    808e:	6827      	ldr	r7, [r4, #0]
    8090:	b157      	cbz	r7, 80a8 <l2cap_chan_le_send+0x36>
	len = buf->len - sdu_hdr_len;
    8092:	8985      	ldrh	r5, [r0, #12]
    8094:	1bad      	subs	r5, r5, r6
    8096:	2300      	movs	r3, #0
    8098:	4602      	mov	r2, r0
    809a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    809e:	4638      	mov	r0, r7
    80a0:	f7ff ff33 	bl	7f0a <bt_l2cap_send_cb>
}
    80a4:	4628      	mov	r0, r5
    80a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    80a8:	f012 fd4c 	bl	1ab44 <net_buf_unref>
		return -ECONNRESET;
    80ac:	f06f 0567 	mvn.w	r5, #103	; 0x67
    80b0:	e7f8      	b.n	80a4 <l2cap_chan_le_send+0x32>
		return -EAGAIN;
    80b2:	f06f 050a 	mvn.w	r5, #10
    80b6:	e7f5      	b.n	80a4 <l2cap_chan_le_send+0x32>

000080b8 <l2cap_chan_le_send_sdu>:
{
    80b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80bc:	b082      	sub	sp, #8
    80be:	9201      	str	r2, [sp, #4]
	total_len = net_buf_frags_len(*buf) + sent;
    80c0:	680d      	ldr	r5, [r1, #0]
    80c2:	462b      	mov	r3, r5
	size_t bytes = 0;
    80c4:	2200      	movs	r2, #0
    80c6:	e002      	b.n	80ce <l2cap_chan_le_send_sdu+0x16>
		bytes += buf->len;
    80c8:	899c      	ldrh	r4, [r3, #12]
    80ca:	4422      	add	r2, r4
		buf = buf->frags;
    80cc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    80ce:	2b00      	cmp	r3, #0
    80d0:	d1fa      	bne.n	80c8 <l2cap_chan_le_send_sdu+0x10>
    80d2:	9b01      	ldr	r3, [sp, #4]
    80d4:	189c      	adds	r4, r3, r2
	if (total_len > ch->tx.mtu) {
    80d6:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    80da:	4294      	cmp	r4, r2
    80dc:	dc54      	bgt.n	8188 <l2cap_chan_le_send_sdu+0xd0>
	if (!frag->len && frag->frags) {
    80de:	89aa      	ldrh	r2, [r5, #12]
    80e0:	b912      	cbnz	r2, 80e8 <l2cap_chan_le_send_sdu+0x30>
    80e2:	682a      	ldr	r2, [r5, #0]
    80e4:	b102      	cbz	r2, 80e8 <l2cap_chan_le_send_sdu+0x30>
		frag = frag->frags;
    80e6:	4615      	mov	r5, r2
    80e8:	4688      	mov	r8, r1
    80ea:	4607      	mov	r7, r0
	if (!sent) {
    80ec:	b10b      	cbz	r3, 80f2 <l2cap_chan_le_send_sdu+0x3a>
		frag = frag->frags;
    80ee:	2600      	movs	r6, #0
    80f0:	e024      	b.n	813c <l2cap_chan_le_send_sdu+0x84>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
    80f2:	2202      	movs	r2, #2
    80f4:	4629      	mov	r1, r5
    80f6:	f7ff ffbc 	bl	8072 <l2cap_chan_le_send>
		if (ret < 0) {
    80fa:	1e06      	subs	r6, r0, #0
    80fc:	db01      	blt.n	8102 <l2cap_chan_le_send_sdu+0x4a>
		sent = ret;
    80fe:	9601      	str	r6, [sp, #4]
    8100:	e7f5      	b.n	80ee <l2cap_chan_le_send_sdu+0x36>
			if (ret == -EAGAIN) {
    8102:	f116 0f0b 	cmn.w	r6, #11
    8106:	d002      	beq.n	810e <l2cap_chan_le_send_sdu+0x56>
			*buf = frag;
    8108:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    810c:	e038      	b.n	8180 <l2cap_chan_le_send_sdu+0xc8>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    810e:	f105 0010 	add.w	r0, r5, #16
    8112:	89eb      	ldrh	r3, [r5, #14]
    8114:	4418      	add	r0, r3
    8116:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    8118:	2204      	movs	r2, #4
    811a:	eb0d 0102 	add.w	r1, sp, r2
    811e:	f020 0003 	bic.w	r0, r0, #3
    8122:	f7f8 f8cd 	bl	2c0 <memcpy>
    8126:	e7ef      	b.n	8108 <l2cap_chan_le_send_sdu+0x50>
		ret = l2cap_chan_le_send(ch, frag, 0);
    8128:	2200      	movs	r2, #0
    812a:	4629      	mov	r1, r5
    812c:	4638      	mov	r0, r7
    812e:	f7ff ffa0 	bl	8072 <l2cap_chan_le_send>
		if (ret < 0) {
    8132:	1e06      	subs	r6, r0, #0
    8134:	db0e      	blt.n	8154 <l2cap_chan_le_send_sdu+0x9c>
	for (ret = 0; sent < total_len; sent += ret) {
    8136:	9b01      	ldr	r3, [sp, #4]
    8138:	4433      	add	r3, r6
    813a:	9301      	str	r3, [sp, #4]
    813c:	9b01      	ldr	r3, [sp, #4]
    813e:	429c      	cmp	r4, r3
    8140:	dd1b      	ble.n	817a <l2cap_chan_le_send_sdu+0xc2>
		if (!frag->len) {
    8142:	89ab      	ldrh	r3, [r5, #12]
    8144:	2b00      	cmp	r3, #0
    8146:	d1ef      	bne.n	8128 <l2cap_chan_le_send_sdu+0x70>
			frag = net_buf_frag_del(NULL, frag);
    8148:	4629      	mov	r1, r5
    814a:	2000      	movs	r0, #0
    814c:	f012 fd3a 	bl	1abc4 <net_buf_frag_del>
    8150:	4605      	mov	r5, r0
    8152:	e7e9      	b.n	8128 <l2cap_chan_le_send_sdu+0x70>
			if (ret == -EAGAIN) {
    8154:	f116 0f0b 	cmn.w	r6, #11
    8158:	d002      	beq.n	8160 <l2cap_chan_le_send_sdu+0xa8>
			*buf = frag;
    815a:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    815e:	e00f      	b.n	8180 <l2cap_chan_le_send_sdu+0xc8>
    8160:	f105 0010 	add.w	r0, r5, #16
    8164:	89eb      	ldrh	r3, [r5, #14]
    8166:	4418      	add	r0, r3
    8168:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    816a:	2204      	movs	r2, #4
    816c:	eb0d 0102 	add.w	r1, sp, r2
    8170:	f020 0003 	bic.w	r0, r0, #3
    8174:	f7f8 f8a4 	bl	2c0 <memcpy>
    8178:	e7ef      	b.n	815a <l2cap_chan_le_send_sdu+0xa2>
	net_buf_unref(frag);
    817a:	4628      	mov	r0, r5
    817c:	f012 fce2 	bl	1ab44 <net_buf_unref>
}
    8180:	4630      	mov	r0, r6
    8182:	b002      	add	sp, #8
    8184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
    8188:	f06f 0679 	mvn.w	r6, #121	; 0x79
    818c:	e7f8      	b.n	8180 <l2cap_chan_le_send_sdu+0xc8>

0000818e <l2cap_chan_le_send_resume>:
{
    818e:	b510      	push	{r4, lr}
    8190:	b082      	sub	sp, #8
    8192:	4604      	mov	r4, r0
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
    8194:	4620      	mov	r0, r4
    8196:	f7ff fc91 	bl	7abc <l2cap_chan_le_get_tx_buf>
    819a:	9001      	str	r0, [sp, #4]
    819c:	b180      	cbz	r0, 81c0 <l2cap_chan_le_send_resume+0x32>
    819e:	f100 0310 	add.w	r3, r0, #16
    81a2:	89c2      	ldrh	r2, [r0, #14]
    81a4:	4413      	add	r3, r2
    81a6:	3303      	adds	r3, #3
    81a8:	f023 0303 	bic.w	r3, r3, #3
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
    81ac:	681a      	ldr	r2, [r3, #0]
    81ae:	a901      	add	r1, sp, #4
    81b0:	4620      	mov	r0, r4
    81b2:	f7ff ff81 	bl	80b8 <l2cap_chan_le_send_sdu>
		if (sent < 0) {
    81b6:	2800      	cmp	r0, #0
    81b8:	daec      	bge.n	8194 <l2cap_chan_le_send_resume+0x6>
			if (sent == -EAGAIN) {
    81ba:	f110 0f0b 	cmn.w	r0, #11
    81be:	d001      	beq.n	81c4 <l2cap_chan_le_send_resume+0x36>
}
    81c0:	b002      	add	sp, #8
    81c2:	bd10      	pop	{r4, pc}
				ch->tx_buf = buf;
    81c4:	9b01      	ldr	r3, [sp, #4]
    81c6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    81ca:	e7f9      	b.n	81c0 <l2cap_chan_le_send_resume+0x32>

000081cc <l2cap_send_reject>:
{
    81cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    81d0:	4680      	mov	r8, r0
    81d2:	4691      	mov	r9, r2
    81d4:	461e      	mov	r6, r3
    81d6:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    81da:	1cbb      	adds	r3, r7, #2
    81dc:	460a      	mov	r2, r1
    81de:	2101      	movs	r1, #1
    81e0:	2000      	movs	r0, #0
    81e2:	f7ff fdff 	bl	7de4 <l2cap_create_le_sig_pdu>
    81e6:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    81e8:	f100 0508 	add.w	r5, r0, #8
    81ec:	2102      	movs	r1, #2
    81ee:	4628      	mov	r0, r5
    81f0:	f012 fcf4 	bl	1abdc <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    81f4:	f8a0 9000 	strh.w	r9, [r0]
	if (data) {
    81f8:	b126      	cbz	r6, 8204 <l2cap_send_reject+0x38>
		net_buf_add_mem(buf, data, data_len);
    81fa:	463a      	mov	r2, r7
    81fc:	4631      	mov	r1, r6
    81fe:	4628      	mov	r0, r5
    8200:	f012 fcf2 	bl	1abe8 <net_buf_simple_add_mem>
    8204:	2300      	movs	r3, #0
    8206:	4622      	mov	r2, r4
    8208:	2105      	movs	r1, #5
    820a:	4640      	mov	r0, r8
    820c:	f7ff fe7d 	bl	7f0a <bt_l2cap_send_cb>
    8210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008214 <le_conn_param_update_req>:
{
    8214:	b570      	push	{r4, r5, r6, lr}
    8216:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    8218:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    821a:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    821c:	8990      	ldrh	r0, [r2, #12]
    821e:	2807      	cmp	r0, #7
    8220:	d908      	bls.n	8234 <le_conn_param_update_req+0x20>
    8222:	4610      	mov	r0, r2
	if (conn->role != BT_HCI_ROLE_MASTER) {
    8224:	78e2      	ldrb	r2, [r4, #3]
    8226:	b13a      	cbz	r2, 8238 <le_conn_param_update_req+0x24>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    8228:	2200      	movs	r2, #0
    822a:	9200      	str	r2, [sp, #0]
    822c:	4613      	mov	r3, r2
    822e:	4620      	mov	r0, r4
    8230:	f7ff ffcc 	bl	81cc <l2cap_send_reject>
}
    8234:	b004      	add	sp, #16
    8236:	bd70      	pop	{r4, r5, r6, pc}
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    8238:	881a      	ldrh	r2, [r3, #0]
    823a:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    823e:	885a      	ldrh	r2, [r3, #2]
    8240:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    8244:	889a      	ldrh	r2, [r3, #4]
    8246:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    824a:	88db      	ldrh	r3, [r3, #6]
    824c:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    8250:	2302      	movs	r3, #2
    8252:	460a      	mov	r2, r1
    8254:	2113      	movs	r1, #19
    8256:	f7ff fdc5 	bl	7de4 <l2cap_create_le_sig_pdu>
    825a:	4606      	mov	r6, r0
	accepted = le_param_req(conn, &param);
    825c:	a902      	add	r1, sp, #8
    825e:	4620      	mov	r0, r4
    8260:	f7fe fcc2 	bl	6be8 <le_param_req>
    8264:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    8266:	2102      	movs	r1, #2
    8268:	f106 0008 	add.w	r0, r6, #8
    826c:	f012 fcb6 	bl	1abdc <net_buf_simple_add>
	if (accepted) {
    8270:	b17d      	cbz	r5, 8292 <le_conn_param_update_req+0x7e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    8272:	2300      	movs	r3, #0
    8274:	7003      	strb	r3, [r0, #0]
    8276:	7043      	strb	r3, [r0, #1]
    8278:	2300      	movs	r3, #0
    827a:	4632      	mov	r2, r6
    827c:	2105      	movs	r1, #5
    827e:	4620      	mov	r0, r4
    8280:	f7ff fe43 	bl	7f0a <bt_l2cap_send_cb>
	if (accepted) {
    8284:	2d00      	cmp	r5, #0
    8286:	d0d5      	beq.n	8234 <le_conn_param_update_req+0x20>
		bt_conn_le_conn_update(conn, &param);
    8288:	a902      	add	r1, sp, #8
    828a:	4620      	mov	r0, r4
    828c:	f7ff f976 	bl	757c <bt_conn_le_conn_update>
    8290:	e7d0      	b.n	8234 <le_conn_param_update_req+0x20>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    8292:	2301      	movs	r3, #1
    8294:	7003      	strb	r3, [r0, #0]
    8296:	2300      	movs	r3, #0
    8298:	7043      	strb	r3, [r0, #1]
    829a:	e7ed      	b.n	8278 <le_conn_param_update_req+0x64>

0000829c <le_disconn_req>:
{
    829c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82a0:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    82a2:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    82a4:	6897      	ldr	r7, [r2, #8]
	if (buf->len < sizeof(*req)) {
    82a6:	8993      	ldrh	r3, [r2, #12]
    82a8:	2b03      	cmp	r3, #3
    82aa:	d802      	bhi.n	82b2 <le_disconn_req+0x16>
}
    82ac:	b004      	add	sp, #16
    82ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    82b2:	4614      	mov	r4, r2
    82b4:	460d      	mov	r5, r1
	chan = l2cap_remove_tx_cid(conn, scid);
    82b6:	8879      	ldrh	r1, [r7, #2]
    82b8:	4630      	mov	r0, r6
    82ba:	f7ff fb5f 	bl	797c <l2cap_remove_tx_cid>
	if (!chan) {
    82be:	4680      	mov	r8, r0
    82c0:	b1d0      	cbz	r0, 82f8 <le_disconn_req+0x5c>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    82c2:	2304      	movs	r3, #4
    82c4:	462a      	mov	r2, r5
    82c6:	2107      	movs	r1, #7
    82c8:	4620      	mov	r0, r4
    82ca:	f7ff fd8b 	bl	7de4 <l2cap_create_le_sig_pdu>
    82ce:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    82d0:	2104      	movs	r1, #4
    82d2:	3008      	adds	r0, #8
    82d4:	f012 fc82 	bl	1abdc <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    82d8:	f8b8 3040 	ldrh.w	r3, [r8, #64]	; 0x40
    82dc:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    82de:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
    82e2:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    82e4:	4640      	mov	r0, r8
    82e6:	f7ff fcb0 	bl	7c4a <bt_l2cap_chan_del>
    82ea:	2300      	movs	r3, #0
    82ec:	4622      	mov	r2, r4
    82ee:	2105      	movs	r1, #5
    82f0:	4630      	mov	r0, r6
    82f2:	f7ff fe0a 	bl	7f0a <bt_l2cap_send_cb>
    82f6:	e7d9      	b.n	82ac <le_disconn_req+0x10>
		data.scid = req->scid;
    82f8:	887b      	ldrh	r3, [r7, #2]
    82fa:	f8ad 300c 	strh.w	r3, [sp, #12]
		data.dcid = req->dcid;
    82fe:	883b      	ldrh	r3, [r7, #0]
    8300:	f8ad 300e 	strh.w	r3, [sp, #14]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    8304:	2304      	movs	r3, #4
    8306:	9300      	str	r3, [sp, #0]
    8308:	ab03      	add	r3, sp, #12
    830a:	2202      	movs	r2, #2
    830c:	4629      	mov	r1, r5
    830e:	4630      	mov	r0, r6
    8310:	f7ff ff5c 	bl	81cc <l2cap_send_reject>
    8314:	e7ca      	b.n	82ac <le_disconn_req+0x10>

00008316 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
    8316:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    8318:	b108      	cbz	r0, 831e <bt_l2cap_le_lookup_tx_cid+0x8>
    831a:	3808      	subs	r0, #8
    831c:	e006      	b.n	832c <bt_l2cap_le_lookup_tx_cid+0x16>
    831e:	2000      	movs	r0, #0
    8320:	e004      	b.n	832c <bt_l2cap_le_lookup_tx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8322:	461a      	mov	r2, r3
    8324:	e00b      	b.n	833e <bt_l2cap_le_lookup_tx_cid+0x28>
	return node->next;
    8326:	6883      	ldr	r3, [r0, #8]
    8328:	f1a3 0008 	sub.w	r0, r3, #8
    832c:	b168      	cbz	r0, 834a <bt_l2cap_le_lookup_tx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    832e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    8332:	428b      	cmp	r3, r1
    8334:	d009      	beq.n	834a <bt_l2cap_le_lookup_tx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8336:	f110 0308 	adds.w	r3, r0, #8
    833a:	d0f2      	beq.n	8322 <bt_l2cap_le_lookup_tx_cid+0xc>
	return node->next;
    833c:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    833e:	b112      	cbz	r2, 8346 <bt_l2cap_le_lookup_tx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8340:	2b00      	cmp	r3, #0
    8342:	d1f0      	bne.n	8326 <bt_l2cap_le_lookup_tx_cid+0x10>
    8344:	e7f0      	b.n	8328 <bt_l2cap_le_lookup_tx_cid+0x12>
    8346:	2000      	movs	r0, #0
    8348:	e7f0      	b.n	832c <bt_l2cap_le_lookup_tx_cid+0x16>
}
    834a:	4770      	bx	lr

0000834c <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
    834c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    834e:	b108      	cbz	r0, 8354 <bt_l2cap_le_lookup_rx_cid+0x8>
    8350:	3808      	subs	r0, #8
    8352:	e006      	b.n	8362 <bt_l2cap_le_lookup_rx_cid+0x16>
    8354:	2000      	movs	r0, #0
    8356:	e004      	b.n	8362 <bt_l2cap_le_lookup_rx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8358:	461a      	mov	r2, r3
    835a:	e00b      	b.n	8374 <bt_l2cap_le_lookup_rx_cid+0x28>
	return node->next;
    835c:	6883      	ldr	r3, [r0, #8]
    835e:	f1a3 0008 	sub.w	r0, r3, #8
    8362:	b168      	cbz	r0, 8380 <bt_l2cap_le_lookup_rx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    8364:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    8368:	428b      	cmp	r3, r1
    836a:	d009      	beq.n	8380 <bt_l2cap_le_lookup_rx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    836c:	f110 0308 	adds.w	r3, r0, #8
    8370:	d0f2      	beq.n	8358 <bt_l2cap_le_lookup_rx_cid+0xc>
	return node->next;
    8372:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    8374:	b112      	cbz	r2, 837c <bt_l2cap_le_lookup_rx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8376:	2b00      	cmp	r3, #0
    8378:	d1f0      	bne.n	835c <bt_l2cap_le_lookup_rx_cid+0x10>
    837a:	e7f0      	b.n	835e <bt_l2cap_le_lookup_rx_cid+0x12>
    837c:	2000      	movs	r0, #0
    837e:	e7f0      	b.n	8362 <bt_l2cap_le_lookup_rx_cid+0x16>
}
    8380:	4770      	bx	lr

00008382 <l2cap_chan_alloc_cid>:
{
    8382:	b570      	push	{r4, r5, r6, lr}
    8384:	4606      	mov	r6, r0
	if (ch && ch->rx.cid > 0) {
    8386:	460d      	mov	r5, r1
    8388:	b1a1      	cbz	r1, 83b4 <l2cap_chan_alloc_cid+0x32>
    838a:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
    838e:	b9ab      	cbnz	r3, 83bc <l2cap_chan_alloc_cid+0x3a>
    8390:	2440      	movs	r4, #64	; 0x40
    8392:	e001      	b.n	8398 <l2cap_chan_alloc_cid+0x16>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    8394:	3401      	adds	r4, #1
    8396:	b2a4      	uxth	r4, r4
    8398:	2c7f      	cmp	r4, #127	; 0x7f
    839a:	d80d      	bhi.n	83b8 <l2cap_chan_alloc_cid+0x36>
		if (ch && !bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    839c:	2d00      	cmp	r5, #0
    839e:	d0f9      	beq.n	8394 <l2cap_chan_alloc_cid+0x12>
    83a0:	4621      	mov	r1, r4
    83a2:	4630      	mov	r0, r6
    83a4:	f7ff ffd2 	bl	834c <bt_l2cap_le_lookup_rx_cid>
    83a8:	2800      	cmp	r0, #0
    83aa:	d1f3      	bne.n	8394 <l2cap_chan_alloc_cid+0x12>
			ch->rx.cid = cid;
    83ac:	f8a5 4040 	strh.w	r4, [r5, #64]	; 0x40
			return ch;
    83b0:	4628      	mov	r0, r5
    83b2:	bd70      	pop	{r4, r5, r6, pc}
    83b4:	2440      	movs	r4, #64	; 0x40
    83b6:	e7ef      	b.n	8398 <l2cap_chan_alloc_cid+0x16>
	return NULL;
    83b8:	2000      	movs	r0, #0
    83ba:	bd70      	pop	{r4, r5, r6, pc}
		return ch;
    83bc:	4608      	mov	r0, r1
}
    83be:	bd70      	pop	{r4, r5, r6, pc}

000083c0 <l2cap_chan_add>:
{
    83c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    83c2:	4606      	mov	r6, r0
    83c4:	460c      	mov	r4, r1
    83c6:	4617      	mov	r7, r2
	ch = l2cap_chan_alloc_cid(conn, chan);
    83c8:	f7ff ffdb 	bl	8382 <l2cap_chan_alloc_cid>
	if (!ch) {
    83cc:	b1c0      	cbz	r0, 8400 <l2cap_chan_add+0x40>
    83ce:	4605      	mov	r5, r0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    83d0:	490c      	ldr	r1, [pc, #48]	; (8404 <l2cap_chan_add+0x44>)
    83d2:	f104 0010 	add.w	r0, r4, #16
    83d6:	f021 fcd1 	bl	29d7c <k_delayed_work_init>
	bt_l2cap_chan_add(conn, chan, destroy);
    83da:	463a      	mov	r2, r7
    83dc:	4621      	mov	r1, r4
    83de:	4630      	mov	r0, r6
    83e0:	f7ff fcc2 	bl	7d68 <bt_l2cap_chan_add>
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    83e4:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    83e8:	3b40      	subs	r3, #64	; 0x40
    83ea:	b29b      	uxth	r3, r3
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    83ec:	2b3f      	cmp	r3, #63	; 0x3f
    83ee:	d901      	bls.n	83f4 <l2cap_chan_add+0x34>
	return true;
    83f0:	2001      	movs	r0, #1
}
    83f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECT);
    83f4:	2101      	movs	r1, #1
    83f6:	4620      	mov	r0, r4
    83f8:	f7ff fc24 	bl	7c44 <bt_l2cap_chan_set_state>
	return true;
    83fc:	2001      	movs	r0, #1
    83fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
    8400:	2000      	movs	r0, #0
    8402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8404:	00007c75 	.word	0x00007c75

00008408 <bt_l2cap_connected>:
{
    8408:	b530      	push	{r4, r5, lr}
    840a:	b083      	sub	sp, #12
    840c:	4605      	mov	r5, r0
	return list->head;
    840e:	4b18      	ldr	r3, [pc, #96]	; (8470 <bt_l2cap_connected+0x68>)
    8410:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    8412:	b10c      	cbz	r4, 8418 <bt_l2cap_connected+0x10>
    8414:	3c08      	subs	r4, #8
    8416:	e00a      	b.n	842e <bt_l2cap_connected+0x26>
    8418:	2400      	movs	r4, #0
    841a:	e008      	b.n	842e <bt_l2cap_connected+0x26>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    841c:	f114 0308 	adds.w	r3, r4, #8
    8420:	d01f      	beq.n	8462 <bt_l2cap_connected+0x5a>
	return node->next;
    8422:	68a2      	ldr	r2, [r4, #8]
    8424:	b1fa      	cbz	r2, 8466 <bt_l2cap_connected+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8426:	b103      	cbz	r3, 842a <bt_l2cap_connected+0x22>
	return node->next;
    8428:	68a3      	ldr	r3, [r4, #8]
    842a:	f1a3 0408 	sub.w	r4, r3, #8
    842e:	b1e4      	cbz	r4, 846a <bt_l2cap_connected+0x62>
		if (fchan->accept(conn, &chan) < 0) {
    8430:	6863      	ldr	r3, [r4, #4]
    8432:	a901      	add	r1, sp, #4
    8434:	4628      	mov	r0, r5
    8436:	4798      	blx	r3
    8438:	2800      	cmp	r0, #0
    843a:	dbef      	blt.n	841c <bt_l2cap_connected+0x14>
		ch = BT_L2CAP_LE_CHAN(chan);
    843c:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    843e:	8823      	ldrh	r3, [r4, #0]
    8440:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
		ch->tx.cid = fchan->cid;
    8444:	8823      	ldrh	r3, [r4, #0]
    8446:	f8a1 3060 	strh.w	r3, [r1, #96]	; 0x60
		if (!l2cap_chan_add(conn, chan, NULL)) {
    844a:	2200      	movs	r2, #0
    844c:	4628      	mov	r0, r5
    844e:	f7ff ffb7 	bl	83c0 <l2cap_chan_add>
    8452:	b150      	cbz	r0, 846a <bt_l2cap_connected+0x62>
		if (chan->ops->connected) {
    8454:	9801      	ldr	r0, [sp, #4]
    8456:	6843      	ldr	r3, [r0, #4]
    8458:	681b      	ldr	r3, [r3, #0]
    845a:	2b00      	cmp	r3, #0
    845c:	d0de      	beq.n	841c <bt_l2cap_connected+0x14>
			chan->ops->connected(chan);
    845e:	4798      	blx	r3
    8460:	e7dc      	b.n	841c <bt_l2cap_connected+0x14>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8462:	461a      	mov	r2, r3
    8464:	e7de      	b.n	8424 <bt_l2cap_connected+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    8466:	2400      	movs	r4, #0
    8468:	e7e1      	b.n	842e <bt_l2cap_connected+0x26>
}
    846a:	b003      	add	sp, #12
    846c:	bd30      	pop	{r4, r5, pc}
    846e:	bf00      	nop
    8470:	20000740 	.word	0x20000740

00008474 <le_conn_req>:
{
    8474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8478:	b085      	sub	sp, #20
	struct bt_conn *conn = l2cap->chan.chan.conn;
    847a:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    847c:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    847e:	8990      	ldrh	r0, [r2, #12]
    8480:	2809      	cmp	r0, #9
    8482:	d912      	bls.n	84aa <le_conn_req+0x36>
	psm = sys_le16_to_cpu(req->psm);
    8484:	f8b3 9000 	ldrh.w	r9, [r3]
	scid = sys_le16_to_cpu(req->scid);
    8488:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    848c:	fa1f fa88 	uxth.w	sl, r8
	mtu = sys_le16_to_cpu(req->mtu);
    8490:	889e      	ldrh	r6, [r3, #4]
    8492:	b2b0      	uxth	r0, r6
	mps = sys_le16_to_cpu(req->mps);
    8494:	88df      	ldrh	r7, [r3, #6]
    8496:	fa1f fe87 	uxth.w	lr, r7
	credits = sys_le16_to_cpu(req->credits);
    849a:	891d      	ldrh	r5, [r3, #8]
    849c:	fa1f fb85 	uxth.w	fp, r5
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    84a0:	2816      	cmp	r0, #22
    84a2:	d902      	bls.n	84aa <le_conn_req+0x36>
    84a4:	f1be 0f16 	cmp.w	lr, #22
    84a8:	d802      	bhi.n	84b0 <le_conn_req+0x3c>
}
    84aa:	b005      	add	sp, #20
    84ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    84b0:	4610      	mov	r0, r2
    84b2:	460a      	mov	r2, r1
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    84b4:	230a      	movs	r3, #10
    84b6:	2115      	movs	r1, #21
    84b8:	f7ff fc94 	bl	7de4 <l2cap_create_le_sig_pdu>
    84bc:	9000      	str	r0, [sp, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    84be:	210a      	movs	r1, #10
    84c0:	3008      	adds	r0, #8
    84c2:	f012 fb8b 	bl	1abdc <net_buf_simple_add>
    84c6:	9001      	str	r0, [sp, #4]
	memset(rsp, 0, sizeof(*rsp));
    84c8:	220a      	movs	r2, #10
    84ca:	2100      	movs	r1, #0
    84cc:	f021 fe58 	bl	2a180 <memset>
	server = l2cap_server_lookup_psm(psm);
    84d0:	4648      	mov	r0, r9
    84d2:	f7ff fa35 	bl	7940 <l2cap_server_lookup_psm>
	if (!server) {
    84d6:	4681      	mov	r9, r0
    84d8:	b168      	cbz	r0, 84f6 <le_conn_req+0x82>
	if (conn->sec_level < server->sec_level) {
    84da:	7a22      	ldrb	r2, [r4, #8]
    84dc:	7883      	ldrb	r3, [r0, #2]
    84de:	429a      	cmp	r2, r3
    84e0:	d20d      	bcs.n	84fe <le_conn_req+0x8a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_AUTHENTICATION);
    84e2:	2305      	movs	r3, #5
    84e4:	9a01      	ldr	r2, [sp, #4]
    84e6:	8113      	strh	r3, [r2, #8]
    84e8:	2300      	movs	r3, #0
    84ea:	9a00      	ldr	r2, [sp, #0]
    84ec:	2105      	movs	r1, #5
    84ee:	4620      	mov	r0, r4
    84f0:	f7ff fd0b 	bl	7f0a <bt_l2cap_send_cb>
    84f4:	e7d9      	b.n	84aa <le_conn_req+0x36>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_PSM_NOT_SUPP);
    84f6:	2302      	movs	r3, #2
    84f8:	9a01      	ldr	r2, [sp, #4]
    84fa:	8113      	strh	r3, [r2, #8]
		goto rsp;
    84fc:	e7f4      	b.n	84e8 <le_conn_req+0x74>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    84fe:	f1aa 0340 	sub.w	r3, sl, #64	; 0x40
    8502:	b29b      	uxth	r3, r3
    8504:	2b3f      	cmp	r3, #63	; 0x3f
    8506:	d903      	bls.n	8510 <le_conn_req+0x9c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_INVALID_SCID);
    8508:	2309      	movs	r3, #9
    850a:	9a01      	ldr	r2, [sp, #4]
    850c:	8113      	strh	r3, [r2, #8]
		goto rsp;
    850e:	e7eb      	b.n	84e8 <le_conn_req+0x74>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    8510:	4651      	mov	r1, sl
    8512:	4620      	mov	r0, r4
    8514:	f7ff feff 	bl	8316 <bt_l2cap_le_lookup_tx_cid>
    8518:	9003      	str	r0, [sp, #12]
	if (chan) {
    851a:	b118      	cbz	r0, 8524 <le_conn_req+0xb0>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_SCID_IN_USE);
    851c:	230a      	movs	r3, #10
    851e:	9a01      	ldr	r2, [sp, #4]
    8520:	8113      	strh	r3, [r2, #8]
		goto rsp;
    8522:	e7e1      	b.n	84e8 <le_conn_req+0x74>
	if (server->accept(conn, &chan) < 0) {
    8524:	f8d9 3004 	ldr.w	r3, [r9, #4]
    8528:	a903      	add	r1, sp, #12
    852a:	4620      	mov	r0, r4
    852c:	4798      	blx	r3
    852e:	2800      	cmp	r0, #0
    8530:	da03      	bge.n	853a <le_conn_req+0xc6>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    8532:	2304      	movs	r3, #4
    8534:	9a01      	ldr	r2, [sp, #4]
    8536:	8113      	strh	r3, [r2, #8]
		goto rsp;
    8538:	e7d6      	b.n	84e8 <le_conn_req+0x74>
	chan->required_sec_level = server->sec_level;
    853a:	9903      	ldr	r1, [sp, #12]
    853c:	f899 3002 	ldrb.w	r3, [r9, #2]
    8540:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    8544:	4a1e      	ldr	r2, [pc, #120]	; (85c0 <le_conn_req+0x14c>)
    8546:	4620      	mov	r0, r4
    8548:	f7ff ff3a 	bl	83c0 <l2cap_chan_add>
    854c:	b918      	cbnz	r0, 8556 <le_conn_req+0xe2>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    854e:	2304      	movs	r3, #4
    8550:	9a01      	ldr	r2, [sp, #4]
    8552:	8113      	strh	r3, [r2, #8]
    8554:	e7c8      	b.n	84e8 <le_conn_req+0x74>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    8556:	f8dd a00c 	ldr.w	sl, [sp, #12]
		l2cap_chan_tx_init(ch);
    855a:	4650      	mov	r0, sl
    855c:	f7ff fabd 	bl	7ada <l2cap_chan_tx_init>
		ch->tx.cid = scid;
    8560:	f8aa 8060 	strh.w	r8, [sl, #96]	; 0x60
		ch->tx.mps = mps;
    8564:	f8aa 7064 	strh.w	r7, [sl, #100]	; 0x64
		ch->tx.mtu = mtu;
    8568:	f8aa 6062 	strh.w	r6, [sl, #98]	; 0x62
		ch->tx.init_credits = credits;
    856c:	f8aa 5066 	strh.w	r5, [sl, #102]	; 0x66
		l2cap_chan_tx_give_credits(ch, credits);
    8570:	4659      	mov	r1, fp
    8572:	4650      	mov	r0, sl
    8574:	f7ff fa79 	bl	7a6a <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_init(ch);
    8578:	4650      	mov	r0, sl
    857a:	f7ff fac1 	bl	7b00 <l2cap_chan_rx_init>
		l2cap_chan_rx_give_credits(ch, ch->rx.init_credits);
    857e:	f8ba 1046 	ldrh.w	r1, [sl, #70]	; 0x46
    8582:	4650      	mov	r0, sl
    8584:	f7ff fa64 	bl	7a50 <l2cap_chan_rx_give_credits>
		chan->psm = server->psm;
    8588:	9803      	ldr	r0, [sp, #12]
    858a:	f8b9 3000 	ldrh.w	r3, [r9]
    858e:	8743      	strh	r3, [r0, #58]	; 0x3a
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECTED);
    8590:	2103      	movs	r1, #3
    8592:	f7ff fb57 	bl	7c44 <bt_l2cap_chan_set_state>
		if (chan->ops->connected) {
    8596:	9803      	ldr	r0, [sp, #12]
    8598:	6843      	ldr	r3, [r0, #4]
    859a:	681b      	ldr	r3, [r3, #0]
    859c:	b103      	cbz	r3, 85a0 <le_conn_req+0x12c>
			chan->ops->connected(chan);
    859e:	4798      	blx	r3
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    85a0:	f8ba 3040 	ldrh.w	r3, [sl, #64]	; 0x40
    85a4:	9901      	ldr	r1, [sp, #4]
    85a6:	800b      	strh	r3, [r1, #0]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    85a8:	f8ba 3044 	ldrh.w	r3, [sl, #68]	; 0x44
    85ac:	808b      	strh	r3, [r1, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    85ae:	f8ba 3042 	ldrh.w	r3, [sl, #66]	; 0x42
    85b2:	804b      	strh	r3, [r1, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    85b4:	f8ba 3046 	ldrh.w	r3, [sl, #70]	; 0x46
    85b8:	80cb      	strh	r3, [r1, #6]
		rsp->result = BT_L2CAP_SUCCESS;
    85ba:	2300      	movs	r3, #0
    85bc:	810b      	strh	r3, [r1, #8]
    85be:	e793      	b.n	84e8 <le_conn_req+0x74>
    85c0:	00007a85 	.word	0x00007a85

000085c4 <l2cap_le_connect>:

#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static int l2cap_le_connect(struct bt_conn *conn, struct bt_l2cap_le_chan *ch,
			    u16_t psm)
{
	if (psm < L2CAP_LE_PSM_START || psm > L2CAP_LE_PSM_END) {
    85c4:	1e53      	subs	r3, r2, #1
    85c6:	b29b      	uxth	r3, r3
    85c8:	2bfe      	cmp	r3, #254	; 0xfe
    85ca:	d814      	bhi.n	85f6 <l2cap_le_connect+0x32>
{
    85cc:	b570      	push	{r4, r5, r6, lr}
    85ce:	4615      	mov	r5, r2
    85d0:	460c      	mov	r4, r1
    85d2:	4606      	mov	r6, r0
		return -EINVAL;
	}

	l2cap_chan_tx_init(ch);
    85d4:	4608      	mov	r0, r1
    85d6:	f7ff fa80 	bl	7ada <l2cap_chan_tx_init>
	l2cap_chan_rx_init(ch);
    85da:	4620      	mov	r0, r4
    85dc:	f7ff fa90 	bl	7b00 <l2cap_chan_rx_init>

	if (!l2cap_chan_add(conn, &ch->chan, l2cap_chan_destroy)) {
    85e0:	4a08      	ldr	r2, [pc, #32]	; (8604 <l2cap_le_connect+0x40>)
    85e2:	4621      	mov	r1, r4
    85e4:	4630      	mov	r0, r6
    85e6:	f7ff feeb 	bl	83c0 <l2cap_chan_add>
    85ea:	b138      	cbz	r0, 85fc <l2cap_le_connect+0x38>
		return -ENOMEM;
	}

	ch->chan.psm = psm;
    85ec:	8765      	strh	r5, [r4, #58]	; 0x3a

	return l2cap_le_conn_req(ch);
    85ee:	4620      	mov	r0, r4
    85f0:	f7ff fcb6 	bl	7f60 <l2cap_le_conn_req>
    85f4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    85f6:	f06f 0015 	mvn.w	r0, #21
    85fa:	4770      	bx	lr
		return -ENOMEM;
    85fc:	f06f 000b 	mvn.w	r0, #11
}
    8600:	bd70      	pop	{r4, r5, r6, pc}
    8602:	bf00      	nop
    8604:	00007a85 	.word	0x00007a85

00008608 <bt_l2cap_server_register>:
	if (server->psm < L2CAP_LE_PSM_START ||
    8608:	8802      	ldrh	r2, [r0, #0]
    860a:	1e53      	subs	r3, r2, #1
    860c:	b29b      	uxth	r3, r3
    860e:	2bfe      	cmp	r3, #254	; 0xfe
    8610:	d81d      	bhi.n	864e <bt_l2cap_server_register+0x46>
	    server->psm > L2CAP_LE_PSM_END || !server->accept) {
    8612:	6843      	ldr	r3, [r0, #4]
    8614:	b1f3      	cbz	r3, 8654 <bt_l2cap_server_register+0x4c>
	if (server->sec_level > BT_SECURITY_FIPS) {
    8616:	7883      	ldrb	r3, [r0, #2]
    8618:	2b04      	cmp	r3, #4
    861a:	d81e      	bhi.n	865a <bt_l2cap_server_register+0x52>
{
    861c:	b510      	push	{r4, lr}
	} else if (server->sec_level < BT_SECURITY_LOW) {
    861e:	b90b      	cbnz	r3, 8624 <bt_l2cap_server_register+0x1c>
		server->sec_level = BT_SECURITY_LOW;
    8620:	2301      	movs	r3, #1
    8622:	7083      	strb	r3, [r0, #2]
    8624:	4604      	mov	r4, r0
	if (l2cap_server_lookup_psm(server->psm)) {
    8626:	4610      	mov	r0, r2
    8628:	f7ff f98a 	bl	7940 <l2cap_server_lookup_psm>
    862c:	b9c0      	cbnz	r0, 8660 <bt_l2cap_server_register+0x58>
	sys_slist_append(&servers, &server->node);
    862e:	f104 0308 	add.w	r3, r4, #8
	node->next = NULL;
    8632:	2200      	movs	r2, #0
    8634:	60a2      	str	r2, [r4, #8]
	if (!list->tail) {
    8636:	4a0c      	ldr	r2, [pc, #48]	; (8668 <bt_l2cap_server_register+0x60>)
    8638:	6852      	ldr	r2, [r2, #4]
    863a:	b122      	cbz	r2, 8646 <bt_l2cap_server_register+0x3e>
		list->tail->next = node;
    863c:	6013      	str	r3, [r2, #0]
		list->tail = node;
    863e:	4a0a      	ldr	r2, [pc, #40]	; (8668 <bt_l2cap_server_register+0x60>)
    8640:	6053      	str	r3, [r2, #4]
	return 0;
    8642:	2000      	movs	r0, #0
    8644:	bd10      	pop	{r4, pc}
		list->tail = node;
    8646:	4a08      	ldr	r2, [pc, #32]	; (8668 <bt_l2cap_server_register+0x60>)
    8648:	6053      	str	r3, [r2, #4]
		list->head = node;
    864a:	6013      	str	r3, [r2, #0]
    864c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    864e:	f06f 0015 	mvn.w	r0, #21
    8652:	4770      	bx	lr
    8654:	f06f 0015 	mvn.w	r0, #21
    8658:	4770      	bx	lr
		return -EINVAL;
    865a:	f06f 0015 	mvn.w	r0, #21
    865e:	4770      	bx	lr
		return -EADDRINUSE;
    8660:	f06f 006f 	mvn.w	r0, #111	; 0x6f
}
    8664:	bd10      	pop	{r4, pc}
    8666:	bf00      	nop
    8668:	20000748 	.word	0x20000748

0000866c <bt_l2cap_update_conn_param>:
{
    866c:	b570      	push	{r4, r5, r6, lr}
    866e:	4606      	mov	r6, r0
    8670:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    8672:	f7ff f91f 	bl	78b4 <get_ident>
    8676:	2308      	movs	r3, #8
    8678:	4602      	mov	r2, r0
    867a:	2112      	movs	r1, #18
    867c:	2000      	movs	r0, #0
    867e:	f7ff fbb1 	bl	7de4 <l2cap_create_le_sig_pdu>
    8682:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    8684:	2108      	movs	r1, #8
    8686:	4408      	add	r0, r1
    8688:	f012 faa8 	bl	1abdc <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    868c:	8823      	ldrh	r3, [r4, #0]
    868e:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    8690:	8863      	ldrh	r3, [r4, #2]
    8692:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    8694:	88a3      	ldrh	r3, [r4, #4]
    8696:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    8698:	88e3      	ldrh	r3, [r4, #6]
    869a:	80c3      	strh	r3, [r0, #6]
    869c:	2300      	movs	r3, #0
    869e:	462a      	mov	r2, r5
    86a0:	2105      	movs	r1, #5
    86a2:	4630      	mov	r0, r6
    86a4:	f7ff fc31 	bl	7f0a <bt_l2cap_send_cb>
}
    86a8:	2000      	movs	r0, #0
    86aa:	bd70      	pop	{r4, r5, r6, pc}

000086ac <bt_l2cap_init>:
{
    86ac:	b508      	push	{r3, lr}
	bt_l2cap_le_fixed_chan_register(&chan);
    86ae:	4802      	ldr	r0, [pc, #8]	; (86b8 <bt_l2cap_init+0xc>)
    86b0:	f7ff fa84 	bl	7bbc <bt_l2cap_le_fixed_chan_register>
    86b4:	bd08      	pop	{r3, pc}
    86b6:	bf00      	nop
    86b8:	2000bab8 	.word	0x2000bab8

000086bc <bt_l2cap_chan_connect>:
int bt_l2cap_chan_connect(struct bt_conn *conn, struct bt_l2cap_chan *chan,
			  u16_t psm)
{
	BT_DBG("conn %p chan %p psm 0x%04x", conn, chan, psm);

	if (!conn || conn->state != BT_CONN_CONNECTED) {
    86bc:	b188      	cbz	r0, 86e2 <bt_l2cap_chan_connect+0x26>
{
    86be:	b508      	push	{r3, lr}
    86c0:	4603      	mov	r3, r0
	if (!conn || conn->state != BT_CONN_CONNECTED) {
    86c2:	7b00      	ldrb	r0, [r0, #12]
    86c4:	2803      	cmp	r0, #3
    86c6:	d10f      	bne.n	86e8 <bt_l2cap_chan_connect+0x2c>
		return -ENOTCONN;
	}

	if (!chan) {
    86c8:	b189      	cbz	r1, 86ee <bt_l2cap_chan_connect+0x32>
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_connect(conn, chan, psm);
	}

	if (chan->required_sec_level > BT_SECURITY_FIPS) {
    86ca:	f891 003d 	ldrb.w	r0, [r1, #61]	; 0x3d
    86ce:	2804      	cmp	r0, #4
    86d0:	d810      	bhi.n	86f4 <bt_l2cap_chan_connect+0x38>
		return -EINVAL;
	} else if (chan->required_sec_level == BT_SECURITY_NONE) {
    86d2:	b910      	cbnz	r0, 86da <bt_l2cap_chan_connect+0x1e>
		chan->required_sec_level = BT_SECURITY_LOW;
    86d4:	2001      	movs	r0, #1
    86d6:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
    86da:	4618      	mov	r0, r3
	}

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
    86dc:	f7ff ff72 	bl	85c4 <l2cap_le_connect>
    86e0:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
    86e2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    86e6:	4770      	bx	lr
    86e8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    86ec:	bd08      	pop	{r3, pc}
		return -EINVAL;
    86ee:	f06f 0015 	mvn.w	r0, #21
    86f2:	bd08      	pop	{r3, pc}
		return -EINVAL;
    86f4:	f06f 0015 	mvn.w	r0, #21
}
    86f8:	bd08      	pop	{r3, pc}

000086fa <bt_l2cap_chan_disconnect>:

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    86fa:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
    86fc:	6803      	ldr	r3, [r0, #0]
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    86fe:	b30b      	cbz	r3, 8744 <bt_l2cap_chan_disconnect+0x4a>
    8700:	4604      	mov	r4, r0
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    8702:	f7ff f8d7 	bl	78b4 <get_ident>
    8706:	4602      	mov	r2, r0
    8708:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    870c:	2304      	movs	r3, #4
    870e:	2106      	movs	r1, #6
    8710:	2000      	movs	r0, #0
    8712:	f7ff fb67 	bl	7de4 <l2cap_create_le_sig_pdu>
    8716:	4605      	mov	r5, r0
				      ch->chan.ident, sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    8718:	2104      	movs	r1, #4
    871a:	3008      	adds	r0, #8
    871c:	f012 fa5e 	bl	1abdc <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->tx.cid);
    8720:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    8724:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    8726:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    872a:	8043      	strh	r3, [r0, #2]

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
    872c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    8730:	4629      	mov	r1, r5
    8732:	4620      	mov	r0, r4
    8734:	f7ff fbfe 	bl	7f34 <l2cap_chan_send_req>
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);
    8738:	2104      	movs	r1, #4
    873a:	4620      	mov	r0, r4
    873c:	f7ff fa82 	bl	7c44 <bt_l2cap_chan_set_state>

	return 0;
    8740:	2000      	movs	r0, #0
    8742:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    8744:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    8748:	bd38      	pop	{r3, r4, r5, pc}

0000874a <l2cap_chan_le_recv_sdu>:
{
    874a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    874e:	4681      	mov	r9, r0
    8750:	460e      	mov	r6, r1
	if (net_buf_frags_len(chan->_sdu) + buf->len > chan->_sdu_len) {
    8752:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    8756:	4603      	mov	r3, r0
	size_t bytes = 0;
    8758:	2200      	movs	r2, #0
    875a:	e002      	b.n	8762 <l2cap_chan_le_recv_sdu+0x18>
		bytes += buf->len;
    875c:	8999      	ldrh	r1, [r3, #12]
    875e:	440a      	add	r2, r1
		buf = buf->frags;
    8760:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    8762:	2b00      	cmp	r3, #0
    8764:	d1fa      	bne.n	875c <l2cap_chan_le_recv_sdu+0x12>
    8766:	89b3      	ldrh	r3, [r6, #12]
    8768:	441a      	add	r2, r3
    876a:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    876e:	429a      	cmp	r2, r3
    8770:	d803      	bhi.n	877a <l2cap_chan_le_recv_sdu+0x30>
	frag = net_buf_frag_last(chan->_sdu);
    8772:	f012 fa07 	bl	1ab84 <net_buf_frag_last>
    8776:	4680      	mov	r8, r0
	while (buf->len) {
    8778:	e017      	b.n	87aa <l2cap_chan_le_recv_sdu+0x60>
		bt_l2cap_chan_disconnect(&chan->chan);
    877a:	4648      	mov	r0, r9
    877c:	f7ff ffbd 	bl	86fa <bt_l2cap_chan_disconnect>
		return;
    8780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    8784:	f108 0708 	add.w	r7, r8, #8
    8788:	4638      	mov	r0, r7
    878a:	f012 fa90 	bl	1acae <net_buf_simple_tailroom>
    878e:	89b4      	ldrh	r4, [r6, #12]
    8790:	42a0      	cmp	r0, r4
    8792:	d31d      	bcc.n	87d0 <l2cap_chan_le_recv_sdu+0x86>
		net_buf_add_mem(frag, buf->data, len);
    8794:	4635      	mov	r5, r6
    8796:	4622      	mov	r2, r4
    8798:	f855 1f08 	ldr.w	r1, [r5, #8]!
    879c:	4638      	mov	r0, r7
    879e:	f012 fa23 	bl	1abe8 <net_buf_simple_add_mem>
		net_buf_pull(buf, len);
    87a2:	4621      	mov	r1, r4
    87a4:	4628      	mov	r0, r5
    87a6:	f012 fa66 	bl	1ac76 <net_buf_simple_pull>
	while (buf->len) {
    87aa:	89b3      	ldrh	r3, [r6, #12]
    87ac:	b1ab      	cbz	r3, 87da <l2cap_chan_le_recv_sdu+0x90>
		if (!net_buf_tailroom(frag)) {
    87ae:	f108 0008 	add.w	r0, r8, #8
    87b2:	f012 fa7c 	bl	1acae <net_buf_simple_tailroom>
    87b6:	2800      	cmp	r0, #0
    87b8:	d1e4      	bne.n	8784 <l2cap_chan_le_recv_sdu+0x3a>
			frag = l2cap_alloc_frag(chan);
    87ba:	4648      	mov	r0, r9
    87bc:	f7ff f93a 	bl	7a34 <l2cap_alloc_frag>
			if (!frag) {
    87c0:	4680      	mov	r8, r0
    87c2:	2800      	cmp	r0, #0
    87c4:	d1de      	bne.n	8784 <l2cap_chan_le_recv_sdu+0x3a>
				bt_l2cap_chan_disconnect(&chan->chan);
    87c6:	4648      	mov	r0, r9
    87c8:	f7ff ff97 	bl	86fa <bt_l2cap_chan_disconnect>
				return;
    87cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    87d0:	4638      	mov	r0, r7
    87d2:	f012 fa6c 	bl	1acae <net_buf_simple_tailroom>
    87d6:	b284      	uxth	r4, r0
    87d8:	e7dc      	b.n	8794 <l2cap_chan_le_recv_sdu+0x4a>
	if (net_buf_frags_len(chan->_sdu) == chan->_sdu_len) {
    87da:	f8d9 1094 	ldr.w	r1, [r9, #148]	; 0x94
    87de:	460b      	mov	r3, r1
	size_t bytes = 0;
    87e0:	2200      	movs	r2, #0
    87e2:	e002      	b.n	87ea <l2cap_chan_le_recv_sdu+0xa0>
		bytes += buf->len;
    87e4:	8998      	ldrh	r0, [r3, #12]
    87e6:	4402      	add	r2, r0
		buf = buf->frags;
    87e8:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    87ea:	2b00      	cmp	r3, #0
    87ec:	d1fa      	bne.n	87e4 <l2cap_chan_le_recv_sdu+0x9a>
    87ee:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    87f2:	4293      	cmp	r3, r2
    87f4:	d005      	beq.n	8802 <l2cap_chan_le_recv_sdu+0xb8>
	l2cap_chan_update_credits(chan, buf);
    87f6:	4631      	mov	r1, r6
    87f8:	4648      	mov	r0, r9
    87fa:	f7ff fc12 	bl	8022 <l2cap_chan_update_credits>
    87fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chan->chan.ops->recv(&chan->chan, chan->_sdu);
    8802:	f8d9 3004 	ldr.w	r3, [r9, #4]
    8806:	691b      	ldr	r3, [r3, #16]
    8808:	4648      	mov	r0, r9
    880a:	4798      	blx	r3
		net_buf_unref(chan->_sdu);
    880c:	f8d9 0094 	ldr.w	r0, [r9, #148]	; 0x94
    8810:	f012 f998 	bl	1ab44 <net_buf_unref>
		chan->_sdu = NULL;
    8814:	2300      	movs	r3, #0
    8816:	f8c9 3094 	str.w	r3, [r9, #148]	; 0x94
		chan->_sdu_len = 0;
    881a:	f8a9 3098 	strh.w	r3, [r9, #152]	; 0x98
    881e:	e7ea      	b.n	87f6 <l2cap_chan_le_recv_sdu+0xac>

00008820 <l2cap_chan_le_recv>:
{
    8820:	b570      	push	{r4, r5, r6, lr}
    8822:	4604      	mov	r4, r0
    8824:	460d      	mov	r5, r1
    8826:	2100      	movs	r1, #0
    8828:	3048      	adds	r0, #72	; 0x48
    882a:	f020 fce9 	bl	29200 <_impl_k_sem_take>
	if (k_sem_take(&chan->rx.credits, K_NO_WAIT)) {
    882e:	b938      	cbnz	r0, 8840 <l2cap_chan_le_recv+0x20>
	if (chan->_sdu) {
    8830:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    8834:	b143      	cbz	r3, 8848 <l2cap_chan_le_recv+0x28>
		l2cap_chan_le_recv_sdu(chan, buf);
    8836:	4629      	mov	r1, r5
    8838:	4620      	mov	r0, r4
    883a:	f7ff ff86 	bl	874a <l2cap_chan_le_recv_sdu>
		return;
    883e:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    8840:	4620      	mov	r0, r4
    8842:	f7ff ff5a 	bl	86fa <bt_l2cap_chan_disconnect>
		return;
    8846:	bd70      	pop	{r4, r5, r6, pc}
	sdu_len = net_buf_pull_le16(buf);
    8848:	f105 0008 	add.w	r0, r5, #8
    884c:	f012 fa23 	bl	1ac96 <net_buf_simple_pull_le16>
    8850:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    8852:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    8856:	4298      	cmp	r0, r3
    8858:	d80e      	bhi.n	8878 <l2cap_chan_le_recv+0x58>
	if (chan->chan.ops->alloc_buf) {
    885a:	6862      	ldr	r2, [r4, #4]
    885c:	68d3      	ldr	r3, [r2, #12]
    885e:	b19b      	cbz	r3, 8888 <l2cap_chan_le_recv+0x68>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    8860:	4620      	mov	r0, r4
    8862:	4798      	blx	r3
    8864:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
		if (!chan->_sdu) {
    8868:	b150      	cbz	r0, 8880 <l2cap_chan_le_recv+0x60>
		chan->_sdu_len = sdu_len;
    886a:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98
		l2cap_chan_le_recv_sdu(chan, buf);
    886e:	4629      	mov	r1, r5
    8870:	4620      	mov	r0, r4
    8872:	f7ff ff6a 	bl	874a <l2cap_chan_le_recv_sdu>
		return;
    8876:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    8878:	4620      	mov	r0, r4
    887a:	f7ff ff3e 	bl	86fa <bt_l2cap_chan_disconnect>
		return;
    887e:	bd70      	pop	{r4, r5, r6, pc}
			bt_l2cap_chan_disconnect(&chan->chan);
    8880:	4620      	mov	r0, r4
    8882:	f7ff ff3a 	bl	86fa <bt_l2cap_chan_disconnect>
			return;
    8886:	bd70      	pop	{r4, r5, r6, pc}
	chan->chan.ops->recv(&chan->chan, buf);
    8888:	6913      	ldr	r3, [r2, #16]
    888a:	4629      	mov	r1, r5
    888c:	4620      	mov	r0, r4
    888e:	4798      	blx	r3
	l2cap_chan_update_credits(chan, buf);
    8890:	4629      	mov	r1, r5
    8892:	4620      	mov	r0, r4
    8894:	f7ff fbc5 	bl	8022 <l2cap_chan_update_credits>
    8898:	bd70      	pop	{r4, r5, r6, pc}

0000889a <l2cap_chan_recv>:
{
    889a:	b508      	push	{r3, lr}
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    889c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    88a0:	3b40      	subs	r3, #64	; 0x40
    88a2:	b29b      	uxth	r3, r3
    88a4:	2b3f      	cmp	r3, #63	; 0x3f
    88a6:	d903      	bls.n	88b0 <l2cap_chan_recv+0x16>
	chan->ops->recv(chan, buf);
    88a8:	6843      	ldr	r3, [r0, #4]
    88aa:	691b      	ldr	r3, [r3, #16]
    88ac:	4798      	blx	r3
    88ae:	bd08      	pop	{r3, pc}
		l2cap_chan_le_recv(ch, buf);
    88b0:	f7ff ffb6 	bl	8820 <l2cap_chan_le_recv>
		return;
    88b4:	bd08      	pop	{r3, pc}

000088b6 <bt_l2cap_recv>:
{
    88b6:	b570      	push	{r4, r5, r6, lr}
    88b8:	460c      	mov	r4, r1
	struct bt_l2cap_hdr *hdr = (void *)buf->data;
    88ba:	688a      	ldr	r2, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    88bc:	898b      	ldrh	r3, [r1, #12]
    88be:	2b03      	cmp	r3, #3
    88c0:	d912      	bls.n	88e8 <bt_l2cap_recv+0x32>
    88c2:	4605      	mov	r5, r0
	cid = sys_le16_to_cpu(hdr->cid);
    88c4:	8856      	ldrh	r6, [r2, #2]
	net_buf_pull(buf, sizeof(*hdr));
    88c6:	2104      	movs	r1, #4
    88c8:	f104 0008 	add.w	r0, r4, #8
    88cc:	f012 f9d3 	bl	1ac76 <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    88d0:	4631      	mov	r1, r6
    88d2:	4628      	mov	r0, r5
    88d4:	f7ff fd3a 	bl	834c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    88d8:	b150      	cbz	r0, 88f0 <bt_l2cap_recv+0x3a>
	l2cap_chan_recv(chan, buf);
    88da:	4621      	mov	r1, r4
    88dc:	f7ff ffdd 	bl	889a <l2cap_chan_recv>
	net_buf_unref(buf);
    88e0:	4620      	mov	r0, r4
    88e2:	f012 f92f 	bl	1ab44 <net_buf_unref>
    88e6:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    88e8:	4608      	mov	r0, r1
    88ea:	f012 f92b 	bl	1ab44 <net_buf_unref>
		return;
    88ee:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    88f0:	4620      	mov	r0, r4
    88f2:	f012 f927 	bl	1ab44 <net_buf_unref>
		return;
    88f6:	bd70      	pop	{r4, r5, r6, pc}

000088f8 <le_credits>:
{
    88f8:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    88fa:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    88fc:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*ev)) {
    88fe:	8993      	ldrh	r3, [r2, #12]
    8900:	2b03      	cmp	r3, #3
    8902:	d800      	bhi.n	8906 <le_credits+0xe>
    8904:	bd38      	pop	{r3, r4, r5, pc}
	credits = sys_le16_to_cpu(ev->credits);
    8906:	884d      	ldrh	r5, [r1, #2]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    8908:	8809      	ldrh	r1, [r1, #0]
    890a:	f7ff fd04 	bl	8316 <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    890e:	4604      	mov	r4, r0
    8910:	2800      	cmp	r0, #0
    8912:	d0f7      	beq.n	8904 <le_credits+0xc>
    8914:	6f03      	ldr	r3, [r0, #112]	; 0x70
	if (k_sem_count_get(&ch->tx.credits) + credits > UINT16_MAX) {
    8916:	442b      	add	r3, r5
    8918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    891c:	d206      	bcs.n	892c <le_credits+0x34>
	l2cap_chan_tx_give_credits(ch, credits);
    891e:	4629      	mov	r1, r5
    8920:	f7ff f8a3 	bl	7a6a <l2cap_chan_tx_give_credits>
	l2cap_chan_le_send_resume(ch);
    8924:	4620      	mov	r0, r4
    8926:	f7ff fc32 	bl	818e <l2cap_chan_le_send_resume>
    892a:	e7eb      	b.n	8904 <le_credits+0xc>
		bt_l2cap_chan_disconnect(chan);
    892c:	f7ff fee5 	bl	86fa <bt_l2cap_chan_disconnect>
		return;
    8930:	bd38      	pop	{r3, r4, r5, pc}
	...

00008934 <l2cap_recv>:
{
    8934:	b5f0      	push	{r4, r5, r6, r7, lr}
    8936:	b083      	sub	sp, #12
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    8938:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    893a:	898b      	ldrh	r3, [r1, #12]
    893c:	2b03      	cmp	r3, #3
    893e:	d801      	bhi.n	8944 <l2cap_recv+0x10>
}
    8940:	b003      	add	sp, #12
    8942:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8944:	460c      	mov	r4, r1
    8946:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
    8948:	8877      	ldrh	r7, [r6, #2]
	net_buf_pull(buf, sizeof(*hdr));
    894a:	2104      	movs	r1, #4
    894c:	f104 0008 	add.w	r0, r4, #8
    8950:	f012 f991 	bl	1ac76 <net_buf_simple_pull>
	if (buf->len != len) {
    8954:	89a3      	ldrh	r3, [r4, #12]
    8956:	429f      	cmp	r7, r3
    8958:	d1f2      	bne.n	8940 <l2cap_recv+0xc>
	if (!hdr->ident) {
    895a:	7871      	ldrb	r1, [r6, #1]
    895c:	2900      	cmp	r1, #0
    895e:	d0ef      	beq.n	8940 <l2cap_recv+0xc>
	switch (hdr->code) {
    8960:	7833      	ldrb	r3, [r6, #0]
    8962:	3b01      	subs	r3, #1
    8964:	2b15      	cmp	r3, #21
    8966:	d852      	bhi.n	8a0e <l2cap_recv+0xda>
    8968:	a201      	add	r2, pc, #4	; (adr r2, 8970 <l2cap_recv+0x3c>)
    896a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    896e:	bf00      	nop
    8970:	00008a05 	.word	0x00008a05
    8974:	00008a0f 	.word	0x00008a0f
    8978:	00008a0f 	.word	0x00008a0f
    897c:	00008a0f 	.word	0x00008a0f
    8980:	00008a0f 	.word	0x00008a0f
    8984:	000089e7 	.word	0x000089e7
    8988:	000089f1 	.word	0x000089f1
    898c:	00008a0f 	.word	0x00008a0f
    8990:	00008a0f 	.word	0x00008a0f
    8994:	00008a0f 	.word	0x00008a0f
    8998:	00008a0f 	.word	0x00008a0f
    899c:	00008a0f 	.word	0x00008a0f
    89a0:	00008a0f 	.word	0x00008a0f
    89a4:	00008a0f 	.word	0x00008a0f
    89a8:	00008a0f 	.word	0x00008a0f
    89ac:	00008a0f 	.word	0x00008a0f
    89b0:	00008a0f 	.word	0x00008a0f
    89b4:	000089c9 	.word	0x000089c9
    89b8:	00008941 	.word	0x00008941
    89bc:	000089d3 	.word	0x000089d3
    89c0:	000089dd 	.word	0x000089dd
    89c4:	000089fb 	.word	0x000089fb
		le_conn_param_update_req(l2cap, hdr->ident, buf);
    89c8:	4622      	mov	r2, r4
    89ca:	4628      	mov	r0, r5
    89cc:	f7ff fc22 	bl	8214 <le_conn_param_update_req>
		break;
    89d0:	e7b6      	b.n	8940 <l2cap_recv+0xc>
		le_conn_req(l2cap, hdr->ident, buf);
    89d2:	4622      	mov	r2, r4
    89d4:	4628      	mov	r0, r5
    89d6:	f7ff fd4d 	bl	8474 <le_conn_req>
		break;
    89da:	e7b1      	b.n	8940 <l2cap_recv+0xc>
		le_conn_rsp(l2cap, hdr->ident, buf);
    89dc:	4622      	mov	r2, r4
    89de:	4628      	mov	r0, r5
    89e0:	f7ff f954 	bl	7c8c <le_conn_rsp>
		break;
    89e4:	e7ac      	b.n	8940 <l2cap_recv+0xc>
		le_disconn_req(l2cap, hdr->ident, buf);
    89e6:	4622      	mov	r2, r4
    89e8:	4628      	mov	r0, r5
    89ea:	f7ff fc57 	bl	829c <le_disconn_req>
		break;
    89ee:	e7a7      	b.n	8940 <l2cap_recv+0xc>
		le_disconn_rsp(l2cap, hdr->ident, buf);
    89f0:	4622      	mov	r2, r4
    89f2:	4628      	mov	r0, r5
    89f4:	f7ff f9a0 	bl	7d38 <le_disconn_rsp>
		break;
    89f8:	e7a2      	b.n	8940 <l2cap_recv+0xc>
		le_credits(l2cap, hdr->ident, buf);
    89fa:	4622      	mov	r2, r4
    89fc:	4628      	mov	r0, r5
    89fe:	f7ff ff7b 	bl	88f8 <le_credits>
		break;
    8a02:	e79d      	b.n	8940 <l2cap_recv+0xc>
		reject_cmd(l2cap, hdr->ident, buf);
    8a04:	4622      	mov	r2, r4
    8a06:	4628      	mov	r0, r5
    8a08:	f7ff f9a5 	bl	7d56 <reject_cmd>
		break;
    8a0c:	e798      	b.n	8940 <l2cap_recv+0xc>
		l2cap_send_reject(chan->conn, hdr->ident,
    8a0e:	6828      	ldr	r0, [r5, #0]
    8a10:	2200      	movs	r2, #0
    8a12:	9200      	str	r2, [sp, #0]
    8a14:	4613      	mov	r3, r2
    8a16:	f7ff fbd9 	bl	81cc <l2cap_send_reject>
		break;
    8a1a:	e791      	b.n	8940 <l2cap_recv+0xc>

00008a1c <bt_l2cap_chan_send>:

int bt_l2cap_chan_send(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    8a1c:	b510      	push	{r4, lr}
    8a1e:	b082      	sub	sp, #8
    8a20:	9101      	str	r1, [sp, #4]
	int err;

	if (!buf) {
    8a22:	b1f9      	cbz	r1, 8a64 <bt_l2cap_chan_send+0x48>
		return -EINVAL;
	}

	BT_DBG("chan %p buf %p len %zu", chan, buf, net_buf_frags_len(buf));

	if (!chan->conn || chan->conn->state != BT_CONN_CONNECTED) {
    8a24:	6803      	ldr	r3, [r0, #0]
    8a26:	b303      	cbz	r3, 8a6a <bt_l2cap_chan_send+0x4e>
    8a28:	7b1b      	ldrb	r3, [r3, #12]
    8a2a:	2b03      	cmp	r3, #3
    8a2c:	d120      	bne.n	8a70 <bt_l2cap_chan_send+0x54>
    8a2e:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    chan->conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_send(chan, buf);
	}

	err = l2cap_chan_le_send_sdu(BT_L2CAP_LE_CHAN(chan), &buf, 0);
    8a30:	2200      	movs	r2, #0
    8a32:	a901      	add	r1, sp, #4
    8a34:	f7ff fb40 	bl	80b8 <l2cap_chan_le_send_sdu>
	if (err < 0) {
    8a38:	2800      	cmp	r0, #0
    8a3a:	db01      	blt.n	8a40 <bt_l2cap_chan_send+0x24>
		}
		BT_ERR("failed to send message %d", err);
	}

	return err;
}
    8a3c:	b002      	add	sp, #8
    8a3e:	bd10      	pop	{r4, pc}
		if (err == -EAGAIN) {
    8a40:	f110 0f0b 	cmn.w	r0, #11
    8a44:	d1fa      	bne.n	8a3c <bt_l2cap_chan_send+0x20>
			net_buf_put(&(BT_L2CAP_LE_CHAN(chan))->tx_queue, buf);
    8a46:	9901      	ldr	r1, [sp, #4]
    8a48:	f104 0080 	add.w	r0, r4, #128	; 0x80
    8a4c:	f012 f86c 	bl	1ab28 <net_buf_put>
			return *((int *)net_buf_user_data(buf));
    8a50:	9a01      	ldr	r2, [sp, #4]
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    8a52:	f102 0310 	add.w	r3, r2, #16
    8a56:	89d2      	ldrh	r2, [r2, #14]
    8a58:	4413      	add	r3, r2
    8a5a:	3303      	adds	r3, #3
    8a5c:	f023 0303 	bic.w	r3, r3, #3
    8a60:	6818      	ldr	r0, [r3, #0]
    8a62:	e7eb      	b.n	8a3c <bt_l2cap_chan_send+0x20>
		return -EINVAL;
    8a64:	f06f 0015 	mvn.w	r0, #21
    8a68:	e7e8      	b.n	8a3c <bt_l2cap_chan_send+0x20>
		return -ENOTCONN;
    8a6a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8a6e:	e7e5      	b.n	8a3c <bt_l2cap_chan_send+0x20>
    8a70:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8a74:	e7e2      	b.n	8a3c <bt_l2cap_chan_send+0x20>

00008a76 <range_is_valid>:
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    8a76:	b100      	cbz	r0, 8a7a <range_is_valid+0x4>
    8a78:	b919      	cbnz	r1, 8a82 <range_is_valid+0xc>
		if (err) {
    8a7a:	b142      	cbz	r2, 8a8e <range_is_valid+0x18>
			*err = 0;
    8a7c:	2000      	movs	r0, #0
    8a7e:	8010      	strh	r0, [r2, #0]
    8a80:	4770      	bx	lr
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    8a82:	4288      	cmp	r0, r1
    8a84:	d905      	bls.n	8a92 <range_is_valid+0x1c>
		if (err) {
    8a86:	b132      	cbz	r2, 8a96 <range_is_valid+0x20>
			*err = start;
    8a88:	8010      	strh	r0, [r2, #0]
		}
		return false;
    8a8a:	2000      	movs	r0, #0
    8a8c:	4770      	bx	lr
		return false;
    8a8e:	2000      	movs	r0, #0
    8a90:	4770      	bx	lr
	}

	return true;
    8a92:	2001      	movs	r0, #1
    8a94:	4770      	bx	lr
		return false;
    8a96:	2000      	movs	r0, #0
}
    8a98:	4770      	bx	lr

00008a9a <check_perm>:
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       u8_t mask)
{
	if ((mask & BT_GATT_PERM_READ) &&
    8a9a:	f012 0f01 	tst.w	r2, #1
    8a9e:	d007      	beq.n	8ab0 <check_perm+0x16>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    8aa0:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
    8aa2:	f013 0f15 	tst.w	r3, #21
    8aa6:	d101      	bne.n	8aac <check_perm+0x12>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    8aa8:	2002      	movs	r0, #2
    8aaa:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    8aac:	684b      	ldr	r3, [r1, #4]
    8aae:	b1eb      	cbz	r3, 8aec <check_perm+0x52>
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    8ab0:	f012 0f02 	tst.w	r2, #2
    8ab4:	d007      	beq.n	8ac6 <check_perm+0x2c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    8ab6:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
    8ab8:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    8abc:	d101      	bne.n	8ac2 <check_perm+0x28>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    8abe:	2003      	movs	r0, #3
    8ac0:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    8ac2:	688b      	ldr	r3, [r1, #8]
    8ac4:	b1a3      	cbz	r3, 8af0 <check_perm+0x56>
	}

	mask &= attr->perm;
    8ac6:	7c8b      	ldrb	r3, [r1, #18]
    8ac8:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    8aca:	f012 0f30 	tst.w	r2, #48	; 0x30
    8ace:	d004      	beq.n	8ada <check_perm+0x40>
#if defined(CONFIG_BT_SMP)
		if (conn->sec_level < BT_SECURITY_HIGH) {
    8ad0:	7a03      	ldrb	r3, [r0, #8]
    8ad2:	2b02      	cmp	r3, #2
    8ad4:	d801      	bhi.n	8ada <check_perm+0x40>
			return BT_ATT_ERR_AUTHENTICATION;
    8ad6:	2005      	movs	r0, #5
    8ad8:	4770      	bx	lr
#else
		return BT_ATT_ERR_AUTHENTICATION;
#endif /* CONFIG_BT_SMP */
	}

	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    8ada:	f012 0f0c 	tst.w	r2, #12
    8ade:	d009      	beq.n	8af4 <check_perm+0x5a>
#if defined(CONFIG_BT_SMP)
		if (!conn->encrypt) {
    8ae0:	7a83      	ldrb	r3, [r0, #10]
    8ae2:	b90b      	cbnz	r3, 8ae8 <check_perm+0x4e>
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    8ae4:	200f      	movs	r0, #15
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
#endif /* CONFIG_BT_SMP */
	}

	return 0;
}
    8ae6:	4770      	bx	lr
	return 0;
    8ae8:	2000      	movs	r0, #0
    8aea:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    8aec:	2002      	movs	r0, #2
    8aee:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    8af0:	2003      	movs	r0, #3
    8af2:	4770      	bx	lr
	return 0;
    8af4:	2000      	movs	r0, #0
    8af6:	4770      	bx	lr

00008af8 <err_to_att>:

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    8af8:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    8afc:	2bfe      	cmp	r3, #254	; 0xfe
    8afe:	d901      	bls.n	8b04 <err_to_att+0xc>
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    8b00:	200e      	movs	r0, #14
}
    8b02:	4770      	bx	lr
		return -err;
    8b04:	4240      	negs	r0, r0
    8b06:	b2c0      	uxtb	r0, r0
    8b08:	4770      	bx	lr

00008b0a <write_cb>:
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    8b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b0e:	b082      	sub	sp, #8
    8b10:	4606      	mov	r6, r0
    8b12:	460c      	mov	r4, r1
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    8b14:	680f      	ldr	r7, [r1, #0]
    8b16:	222a      	movs	r2, #42	; 0x2a
    8b18:	4601      	mov	r1, r0
    8b1a:	4638      	mov	r0, r7
    8b1c:	f7ff ffbd 	bl	8a9a <check_perm>
    8b20:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    8b22:	b120      	cbz	r0, 8b2e <write_cb+0x24>
		return BT_GATT_ITER_STOP;
    8b24:	2500      	movs	r5, #0
	}

	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}
    8b26:	4628      	mov	r0, r5
    8b28:	b002      	add	sp, #8
    8b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b2e:	4605      	mov	r5, r0
	write = attr->write(data->conn, attr, data->value, data->len,
    8b30:	f8d6 8008 	ldr.w	r8, [r6, #8]
    8b34:	7c23      	ldrb	r3, [r4, #16]
    8b36:	8a62      	ldrh	r2, [r4, #18]
    8b38:	2100      	movs	r1, #0
    8b3a:	9101      	str	r1, [sp, #4]
    8b3c:	9200      	str	r2, [sp, #0]
    8b3e:	68e2      	ldr	r2, [r4, #12]
    8b40:	4631      	mov	r1, r6
    8b42:	4638      	mov	r0, r7
    8b44:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
    8b46:	2800      	cmp	r0, #0
    8b48:	db02      	blt.n	8b50 <write_cb+0x46>
    8b4a:	7c23      	ldrb	r3, [r4, #16]
    8b4c:	4298      	cmp	r0, r3
    8b4e:	d003      	beq.n	8b58 <write_cb+0x4e>
		data->err = err_to_att(write);
    8b50:	f7ff ffd2 	bl	8af8 <err_to_att>
    8b54:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    8b56:	e7e6      	b.n	8b26 <write_cb+0x1c>
	data->err = 0;
    8b58:	2300      	movs	r3, #0
    8b5a:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    8b5c:	2501      	movs	r5, #1
    8b5e:	e7e2      	b.n	8b26 <write_cb+0x1c>

00008b60 <att_prepare_write_req>:

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    8b60:	2006      	movs	r0, #6
    8b62:	4770      	bx	lr

00008b64 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    8b64:	2006      	movs	r0, #6
    8b66:	4770      	bx	lr

00008b68 <att_op_get_type>:
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8b68:	2300      	movs	r3, #0
    8b6a:	2b1a      	cmp	r3, #26
    8b6c:	d80b      	bhi.n	8b86 <att_op_get_type+0x1e>
		if (op == handlers[i].op) {
    8b6e:	4a09      	ldr	r2, [pc, #36]	; (8b94 <att_op_get_type+0x2c>)
    8b70:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    8b74:	4282      	cmp	r2, r0
    8b76:	d001      	beq.n	8b7c <att_op_get_type+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8b78:	3301      	adds	r3, #1
    8b7a:	e7f6      	b.n	8b6a <att_op_get_type+0x2>
			return handlers[i].type;
    8b7c:	4a05      	ldr	r2, [pc, #20]	; (8b94 <att_op_get_type+0x2c>)
    8b7e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8b82:	7898      	ldrb	r0, [r3, #2]
    8b84:	4770      	bx	lr
		}
	}

	if (op & ATT_CMD_MASK) {
    8b86:	f010 0f40 	tst.w	r0, #64	; 0x40
    8b8a:	d101      	bne.n	8b90 <att_op_get_type+0x28>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    8b8c:	2006      	movs	r0, #6
}
    8b8e:	4770      	bx	lr
		return ATT_COMMAND;
    8b90:	2000      	movs	r0, #0
    8b92:	4770      	bx	lr
    8b94:	00030dac 	.word	0x00030dac

00008b98 <att_cb>:
{
    8b98:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    8b9a:	6883      	ldr	r3, [r0, #8]
    8b9c:	7818      	ldrb	r0, [r3, #0]
    8b9e:	f7ff ffe3 	bl	8b68 <att_op_get_type>
    8ba2:	3801      	subs	r0, #1
    8ba4:	2804      	cmp	r0, #4
    8ba6:	d808      	bhi.n	8bba <att_cb+0x22>
    8ba8:	e8df f000 	tbb	[pc, r0]
    8bac:	09070305 	.word	0x09070305
    8bb0:	05          	.byte	0x05
    8bb1:	00          	.byte	0x00
		return att_rsp_sent;
    8bb2:	4804      	ldr	r0, [pc, #16]	; (8bc4 <att_cb+0x2c>)
    8bb4:	bd08      	pop	{r3, pc}
		return att_req_sent;
    8bb6:	4804      	ldr	r0, [pc, #16]	; (8bc8 <att_cb+0x30>)
    8bb8:	bd08      	pop	{r3, pc}
		return att_pdu_sent;
    8bba:	4804      	ldr	r0, [pc, #16]	; (8bcc <att_cb+0x34>)
    8bbc:	bd08      	pop	{r3, pc}
		return att_cfm_sent;
    8bbe:	4804      	ldr	r0, [pc, #16]	; (8bd0 <att_cb+0x38>)
}
    8bc0:	bd08      	pop	{r3, pc}
    8bc2:	bf00      	nop
    8bc4:	00008d0b 	.word	0x00008d0b
    8bc8:	00008d7d 	.word	0x00008d7d
    8bcc:	00008d35 	.word	0x00008d35
    8bd0:	00008d43 	.word	0x00008d43

00008bd4 <read_cb>:
{
    8bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8bd8:	b083      	sub	sp, #12
    8bda:	4606      	mov	r6, r0
    8bdc:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    8bde:	f8d1 8000 	ldr.w	r8, [r1]
	struct bt_conn *conn = att->chan.chan.conn;
    8be2:	f8d8 7000 	ldr.w	r7, [r8]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    8be6:	6888      	ldr	r0, [r1, #8]
    8be8:	2100      	movs	r1, #0
    8bea:	3008      	adds	r0, #8
    8bec:	f011 fff6 	bl	1abdc <net_buf_simple_add>
    8bf0:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    8bf2:	2300      	movs	r3, #0
    8bf4:	7423      	strb	r3, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    8bf6:	2215      	movs	r2, #21
    8bf8:	4631      	mov	r1, r6
    8bfa:	4638      	mov	r0, r7
    8bfc:	f7ff ff4d 	bl	8a9a <check_perm>
    8c00:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    8c02:	b120      	cbz	r0, 8c0e <read_cb+0x3a>
		return BT_GATT_ITER_STOP;
    8c04:	2500      	movs	r5, #0
}
    8c06:	4628      	mov	r0, r5
    8c08:	b003      	add	sp, #12
    8c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8c0e:	4605      	mov	r5, r0
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8c10:	f8d6 9004 	ldr.w	r9, [r6, #4]
    8c14:	68a3      	ldr	r3, [r4, #8]
    8c16:	6899      	ldr	r1, [r3, #8]
    8c18:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, data->offset);
    8c1a:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8c1e:	1a9b      	subs	r3, r3, r2
    8c20:	88a0      	ldrh	r0, [r4, #4]
    8c22:	9000      	str	r0, [sp, #0]
    8c24:	b29b      	uxth	r3, r3
    8c26:	440a      	add	r2, r1
    8c28:	4631      	mov	r1, r6
    8c2a:	4638      	mov	r0, r7
    8c2c:	47c8      	blx	r9
	if (read < 0) {
    8c2e:	1e01      	subs	r1, r0, #0
    8c30:	db05      	blt.n	8c3e <read_cb+0x6a>
	net_buf_add(data->buf, read);
    8c32:	68a0      	ldr	r0, [r4, #8]
    8c34:	3008      	adds	r0, #8
    8c36:	f011 ffd1 	bl	1abdc <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    8c3a:	2501      	movs	r5, #1
    8c3c:	e7e3      	b.n	8c06 <read_cb+0x32>
		data->err = err_to_att(read);
    8c3e:	4608      	mov	r0, r1
    8c40:	f7ff ff5a 	bl	8af8 <err_to_att>
    8c44:	7420      	strb	r0, [r4, #16]
		return BT_GATT_ITER_STOP;
    8c46:	e7de      	b.n	8c06 <read_cb+0x32>

00008c48 <att_chan_get>:
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}

static struct bt_att *att_chan_get(struct bt_conn *conn)
{
    8c48:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    8c4a:	7b03      	ldrb	r3, [r0, #12]
    8c4c:	2b03      	cmp	r3, #3
    8c4e:	d10f      	bne.n	8c70 <att_chan_get+0x28>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    8c50:	2104      	movs	r1, #4
    8c52:	f7ff fb7b 	bl	834c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    8c56:	b168      	cbz	r0, 8c74 <att_chan_get+0x2c>
    8c58:	f3bf 8f5b 	dmb	ish
    8c5c:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    8c60:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att = ATT_CHAN(chan);
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    8c64:	f012 0f04 	tst.w	r2, #4
    8c68:	d100      	bne.n	8c6c <att_chan_get+0x24>
		BT_WARN("ATT context flagged as disconnected");
		return NULL;
	}

	return att;
}
    8c6a:	bd08      	pop	{r3, pc}
		return NULL;
    8c6c:	2000      	movs	r0, #0
    8c6e:	bd08      	pop	{r3, pc}
		return NULL;
    8c70:	2000      	movs	r0, #0
    8c72:	bd08      	pop	{r3, pc}
		return NULL;
    8c74:	2000      	movs	r0, #0
    8c76:	bd08      	pop	{r3, pc}

00008c78 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    8c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CONFIG_BT_SMP */
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    8c7a:	2400      	movs	r4, #0
    8c7c:	b11c      	cbz	r4, 8c86 <bt_att_accept+0xe>
		return 0;
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    8c7e:	f06f 040b 	mvn.w	r4, #11
}
    8c82:	4620      	mov	r0, r4
    8c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (att->chan.chan.conn) {
    8c86:	23ec      	movs	r3, #236	; 0xec
    8c88:	fb03 f304 	mul.w	r3, r3, r4
    8c8c:	4a12      	ldr	r2, [pc, #72]	; (8cd8 <bt_att_accept+0x60>)
    8c8e:	58d3      	ldr	r3, [r2, r3]
    8c90:	b10b      	cbz	r3, 8c96 <bt_att_accept+0x1e>
	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    8c92:	3401      	adds	r4, #1
    8c94:	e7f2      	b.n	8c7c <bt_att_accept+0x4>
    8c96:	460d      	mov	r5, r1
		att->chan.chan.ops = &ops;
    8c98:	480f      	ldr	r0, [pc, #60]	; (8cd8 <bt_att_accept+0x60>)
    8c9a:	23ec      	movs	r3, #236	; 0xec
    8c9c:	fb03 f304 	mul.w	r3, r3, r4
    8ca0:	18c6      	adds	r6, r0, r3
    8ca2:	4a0e      	ldr	r2, [pc, #56]	; (8cdc <bt_att_accept+0x64>)
    8ca4:	6072      	str	r2, [r6, #4]
		atomic_set(att->flags, 0);
    8ca6:	f103 0298 	add.w	r2, r3, #152	; 0x98
    8caa:	4402      	add	r2, r0
    8cac:	3204      	adds	r2, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8cae:	2100      	movs	r1, #0
    8cb0:	f3bf 8f5b 	dmb	ish
    8cb4:	e852 7f00 	ldrex	r7, [r2]
    8cb8:	e842 1e00 	strex	lr, r1, [r2]
    8cbc:	f1be 0f00 	cmp.w	lr, #0
    8cc0:	d1f8      	bne.n	8cb4 <bt_att_accept+0x3c>
    8cc2:	f3bf 8f5b 	dmb	ish
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
    8cc6:	33d0      	adds	r3, #208	; 0xd0
    8cc8:	4418      	add	r0, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    8cca:	2202      	movs	r2, #2
    8ccc:	4611      	mov	r1, r2
    8cce:	3004      	adds	r0, #4
    8cd0:	f020 fa7a 	bl	291c8 <_impl_k_sem_init>
		*chan = &att->chan.chan;
    8cd4:	602e      	str	r6, [r5, #0]
		return 0;
    8cd6:	e7d4      	b.n	8c82 <bt_att_accept+0xa>
    8cd8:	20000750 	.word	0x20000750
    8cdc:	2000bae4 	.word	0x2000bae4

00008ce0 <att_req_destroy>:
{
    8ce0:	b510      	push	{r4, lr}
    8ce2:	4604      	mov	r4, r0
	if (req->buf) {
    8ce4:	6900      	ldr	r0, [r0, #16]
    8ce6:	b108      	cbz	r0, 8cec <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    8ce8:	f011 ff2c 	bl	1ab44 <net_buf_unref>
	if (req->destroy) {
    8cec:	68a3      	ldr	r3, [r4, #8]
    8cee:	b10b      	cbz	r3, 8cf4 <att_req_destroy+0x14>
		req->destroy(req);
    8cf0:	4620      	mov	r0, r4
    8cf2:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    8cf4:	2218      	movs	r2, #24
    8cf6:	2100      	movs	r1, #0
    8cf8:	4620      	mov	r0, r4
    8cfa:	f021 fa41 	bl	2a180 <memset>
    8cfe:	bd10      	pop	{r4, pc}

00008d00 <att_get>:
{
    8d00:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8d02:	2104      	movs	r1, #4
    8d04:	f7ff fb07 	bl	8316 <bt_l2cap_le_lookup_tx_cid>
}
    8d08:	bd08      	pop	{r3, pc}

00008d0a <att_rsp_sent>:
{
    8d0a:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8d0c:	f7ff fff8 	bl	8d00 <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_RSP);
    8d10:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8d14:	f3bf 8f5b 	dmb	ish
    8d18:	e853 2f00 	ldrex	r2, [r3]
    8d1c:	f022 0201 	bic.w	r2, r2, #1
    8d20:	e843 2100 	strex	r1, r2, [r3]
    8d24:	2900      	cmp	r1, #0
    8d26:	d1f7      	bne.n	8d18 <att_rsp_sent+0xe>
    8d28:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    8d2c:	30d4      	adds	r0, #212	; 0xd4
    8d2e:	f020 fa54 	bl	291da <_impl_k_sem_give>
    8d32:	bd08      	pop	{r3, pc}

00008d34 <att_pdu_sent>:
{
    8d34:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8d36:	f7ff ffe3 	bl	8d00 <att_get>
    8d3a:	30d4      	adds	r0, #212	; 0xd4
    8d3c:	f020 fa4d 	bl	291da <_impl_k_sem_give>
    8d40:	bd08      	pop	{r3, pc}

00008d42 <att_cfm_sent>:
{
    8d42:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8d44:	f7ff ffdc 	bl	8d00 <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_CFM);
    8d48:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    8d4c:	f3bf 8f5b 	dmb	ish
    8d50:	e853 2f00 	ldrex	r2, [r3]
    8d54:	f022 0202 	bic.w	r2, r2, #2
    8d58:	e843 2100 	strex	r1, r2, [r3]
    8d5c:	2900      	cmp	r1, #0
    8d5e:	d1f7      	bne.n	8d50 <att_cfm_sent+0xe>
    8d60:	f3bf 8f5b 	dmb	ish
    8d64:	30d4      	adds	r0, #212	; 0xd4
    8d66:	f020 fa38 	bl	291da <_impl_k_sem_give>
    8d6a:	bd08      	pop	{r3, pc}

00008d6c <att_notify>:
{
    8d6c:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    8d6e:	f101 0008 	add.w	r0, r1, #8
    8d72:	f011 ff90 	bl	1ac96 <net_buf_simple_pull_le16>
}
    8d76:	2000      	movs	r0, #0
    8d78:	bd08      	pop	{r3, pc}
	...

00008d7c <att_req_sent>:
{
    8d7c:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
    8d7e:	f7ff ffbf 	bl	8d00 <att_get>
    8d82:	4604      	mov	r4, r0
    8d84:	30d4      	adds	r0, #212	; 0xd4
    8d86:	f020 fa28 	bl	291da <_impl_k_sem_give>
	if (att->req) {
    8d8a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8d8e:	b133      	cbz	r3, 8d9e <att_req_sent+0x22>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    8d90:	f247 5230 	movw	r2, #30000	; 0x7530
    8d94:	f104 01ac 	add.w	r1, r4, #172	; 0xac
    8d98:	4801      	ldr	r0, [pc, #4]	; (8da0 <att_req_sent+0x24>)
    8d9a:	f021 f867 	bl	29e6c <k_delayed_work_submit_to_queue>
    8d9e:	bd10      	pop	{r4, pc}
    8da0:	20002c70 	.word	0x20002c70

00008da4 <read_group_cb>:
{
    8da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8da8:	b084      	sub	sp, #16
    8daa:	4605      	mov	r5, r0
    8dac:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    8dae:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    8db0:	6837      	ldr	r7, [r6, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8db2:	2300      	movs	r3, #0
    8db4:	f88d 3008 	strb.w	r3, [sp, #8]
    8db8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8dbc:	f8ad 300a 	strh.w	r3, [sp, #10]
    8dc0:	a902      	add	r1, sp, #8
    8dc2:	6800      	ldr	r0, [r0, #0]
    8dc4:	f7fb fb8d 	bl	44e2 <bt_uuid_cmp>
    8dc8:	b1a8      	cbz	r0, 8df6 <read_group_cb+0x52>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8dca:	2300      	movs	r3, #0
    8dcc:	f88d 300c 	strb.w	r3, [sp, #12]
    8dd0:	f642 0301 	movw	r3, #10241	; 0x2801
    8dd4:	f8ad 300e 	strh.w	r3, [sp, #14]
    8dd8:	a903      	add	r1, sp, #12
    8dda:	6828      	ldr	r0, [r5, #0]
    8ddc:	f7fb fb81 	bl	44e2 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8de0:	b148      	cbz	r0, 8df6 <read_group_cb+0x52>
		if (data->group && attr->handle > data->group->end_handle) {
    8de2:	6923      	ldr	r3, [r4, #16]
    8de4:	2b00      	cmp	r3, #0
    8de6:	d04c      	beq.n	8e82 <read_group_cb+0xde>
    8de8:	8a2a      	ldrh	r2, [r5, #16]
    8dea:	8859      	ldrh	r1, [r3, #2]
    8dec:	428a      	cmp	r2, r1
    8dee:	d94a      	bls.n	8e86 <read_group_cb+0xe2>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    8df0:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    8df2:	2001      	movs	r0, #1
    8df4:	e039      	b.n	8e6a <read_group_cb+0xc6>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8df6:	6861      	ldr	r1, [r4, #4]
    8df8:	6828      	ldr	r0, [r5, #0]
    8dfa:	f7fb fb72 	bl	44e2 <bt_uuid_cmp>
    8dfe:	2800      	cmp	r0, #0
    8e00:	d130      	bne.n	8e64 <read_group_cb+0xc0>
	if (data->rsp->len &&
    8e02:	68e3      	ldr	r3, [r4, #12]
    8e04:	781a      	ldrb	r2, [r3, #0]
    8e06:	b132      	cbz	r2, 8e16 <read_group_cb+0x72>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8e08:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    8e0c:	68a1      	ldr	r1, [r4, #8]
    8e0e:	8989      	ldrh	r1, [r1, #12]
    8e10:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    8e12:	4293      	cmp	r3, r2
    8e14:	db39      	blt.n	8e8a <read_group_cb+0xe6>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    8e16:	68a0      	ldr	r0, [r4, #8]
    8e18:	2104      	movs	r1, #4
    8e1a:	3008      	adds	r0, #8
    8e1c:	f011 fede 	bl	1abdc <net_buf_simple_add>
    8e20:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    8e22:	8a2b      	ldrh	r3, [r5, #16]
    8e24:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    8e26:	6923      	ldr	r3, [r4, #16]
    8e28:	8a2a      	ldrh	r2, [r5, #16]
    8e2a:	805a      	strh	r2, [r3, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8e2c:	f8d5 8004 	ldr.w	r8, [r5, #4]
    8e30:	68a3      	ldr	r3, [r4, #8]
    8e32:	6899      	ldr	r1, [r3, #8]
    8e34:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    8e36:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8e3a:	1a9b      	subs	r3, r3, r2
    8e3c:	2000      	movs	r0, #0
    8e3e:	9000      	str	r0, [sp, #0]
    8e40:	b29b      	uxth	r3, r3
    8e42:	440a      	add	r2, r1
    8e44:	4629      	mov	r1, r5
    8e46:	4638      	mov	r0, r7
    8e48:	47c0      	blx	r8
	if (read < 0) {
    8e4a:	1e01      	subs	r1, r0, #0
    8e4c:	db1f      	blt.n	8e8e <read_group_cb+0xea>
	if (!data->rsp->len) {
    8e4e:	68e2      	ldr	r2, [r4, #12]
    8e50:	7813      	ldrb	r3, [r2, #0]
    8e52:	b96b      	cbnz	r3, 8e70 <read_group_cb+0xcc>
		data->rsp->len = read + sizeof(*data->group);
    8e54:	1d0b      	adds	r3, r1, #4
    8e56:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    8e58:	68a0      	ldr	r0, [r4, #8]
    8e5a:	3008      	adds	r0, #8
    8e5c:	f011 febe 	bl	1abdc <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    8e60:	2001      	movs	r0, #1
    8e62:	e002      	b.n	8e6a <read_group_cb+0xc6>
		data->group = NULL;
    8e64:	2300      	movs	r3, #0
    8e66:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    8e68:	2001      	movs	r0, #1
}
    8e6a:	b004      	add	sp, #16
    8e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    8e70:	1d0a      	adds	r2, r1, #4
    8e72:	4293      	cmp	r3, r2
    8e74:	d0f0      	beq.n	8e58 <read_group_cb+0xb4>
		data->buf->len -= sizeof(*data->group);
    8e76:	68a2      	ldr	r2, [r4, #8]
    8e78:	8993      	ldrh	r3, [r2, #12]
    8e7a:	3b04      	subs	r3, #4
    8e7c:	8193      	strh	r3, [r2, #12]
		return false;
    8e7e:	2000      	movs	r0, #0
    8e80:	e7f3      	b.n	8e6a <read_group_cb+0xc6>
		return BT_GATT_ITER_CONTINUE;
    8e82:	2001      	movs	r0, #1
    8e84:	e7f1      	b.n	8e6a <read_group_cb+0xc6>
    8e86:	2001      	movs	r0, #1
    8e88:	e7ef      	b.n	8e6a <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    8e8a:	2000      	movs	r0, #0
    8e8c:	e7ed      	b.n	8e6a <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    8e8e:	2000      	movs	r0, #0
    8e90:	e7eb      	b.n	8e6a <read_group_cb+0xc6>

00008e92 <read_type_cb>:
{
    8e92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e96:	b082      	sub	sp, #8
    8e98:	4606      	mov	r6, r0
    8e9a:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    8e9c:	680f      	ldr	r7, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    8e9e:	f8d7 8000 	ldr.w	r8, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8ea2:	6849      	ldr	r1, [r1, #4]
    8ea4:	6800      	ldr	r0, [r0, #0]
    8ea6:	f7fb fb1c 	bl	44e2 <bt_uuid_cmp>
    8eaa:	2800      	cmp	r0, #0
    8eac:	d14d      	bne.n	8f4a <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    8eae:	2215      	movs	r2, #21
    8eb0:	4631      	mov	r1, r6
    8eb2:	4640      	mov	r0, r8
    8eb4:	f7ff fdf1 	bl	8a9a <check_perm>
    8eb8:	4605      	mov	r5, r0
    8eba:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    8ebc:	b130      	cbz	r0, 8ecc <read_type_cb+0x3a>
		if (data->rsp->len) {
    8ebe:	68e3      	ldr	r3, [r4, #12]
    8ec0:	781d      	ldrb	r5, [r3, #0]
    8ec2:	2d00      	cmp	r5, #0
    8ec4:	d042      	beq.n	8f4c <read_type_cb+0xba>
			data->err = 0x00;
    8ec6:	2500      	movs	r5, #0
    8ec8:	7525      	strb	r5, [r4, #20]
    8eca:	e03f      	b.n	8f4c <read_type_cb+0xba>
	data->err = 0x00;
    8ecc:	f04f 0900 	mov.w	r9, #0
    8ed0:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    8ed4:	68a0      	ldr	r0, [r4, #8]
    8ed6:	2102      	movs	r1, #2
    8ed8:	3008      	adds	r0, #8
    8eda:	f011 fe7f 	bl	1abdc <net_buf_simple_add>
    8ede:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    8ee0:	8a33      	ldrh	r3, [r6, #16]
    8ee2:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8ee4:	f8d6 a004 	ldr.w	sl, [r6, #4]
    8ee8:	68a3      	ldr	r3, [r4, #8]
    8eea:	6899      	ldr	r1, [r3, #8]
    8eec:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    8eee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8ef2:	1a9b      	subs	r3, r3, r2
    8ef4:	f8cd 9000 	str.w	r9, [sp]
    8ef8:	b29b      	uxth	r3, r3
    8efa:	440a      	add	r2, r1
    8efc:	4631      	mov	r1, r6
    8efe:	4640      	mov	r0, r8
    8f00:	47d0      	blx	sl
	if (read < 0) {
    8f02:	1e01      	subs	r1, r0, #0
    8f04:	db14      	blt.n	8f30 <read_type_cb+0x9e>
	if (!data->rsp->len) {
    8f06:	68e2      	ldr	r2, [r4, #12]
    8f08:	7813      	ldrb	r3, [r2, #0]
    8f0a:	b9b3      	cbnz	r3, 8f3a <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
    8f0c:	1c8b      	adds	r3, r1, #2
    8f0e:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    8f10:	68a0      	ldr	r0, [r4, #8]
    8f12:	3008      	adds	r0, #8
    8f14:	f011 fe62 	bl	1abdc <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    8f18:	f8b7 5062 	ldrh.w	r5, [r7, #98]	; 0x62
    8f1c:	68a3      	ldr	r3, [r4, #8]
    8f1e:	899b      	ldrh	r3, [r3, #12]
    8f20:	1aed      	subs	r5, r5, r3
    8f22:	68e3      	ldr	r3, [r4, #12]
    8f24:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8f26:	429d      	cmp	r5, r3
    8f28:	bfd4      	ite	le
    8f2a:	2500      	movle	r5, #0
    8f2c:	2501      	movgt	r5, #1
    8f2e:	e00d      	b.n	8f4c <read_type_cb+0xba>
		data->err = err_to_att(read);
    8f30:	4608      	mov	r0, r1
    8f32:	f7ff fde1 	bl	8af8 <err_to_att>
    8f36:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    8f38:	e008      	b.n	8f4c <read_type_cb+0xba>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    8f3a:	1c8a      	adds	r2, r1, #2
    8f3c:	4293      	cmp	r3, r2
    8f3e:	d0e7      	beq.n	8f10 <read_type_cb+0x7e>
		data->buf->len -= sizeof(*data->item);
    8f40:	68a2      	ldr	r2, [r4, #8]
    8f42:	8993      	ldrh	r3, [r2, #12]
    8f44:	3b02      	subs	r3, #2
    8f46:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    8f48:	e000      	b.n	8f4c <read_type_cb+0xba>
		return BT_GATT_ITER_CONTINUE;
    8f4a:	2501      	movs	r5, #1
}
    8f4c:	4628      	mov	r0, r5
    8f4e:	b002      	add	sp, #8
    8f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00008f54 <uuid_create>:
{
    8f54:	b510      	push	{r4, lr}
    8f56:	4604      	mov	r4, r0
	switch (buf->len) {
    8f58:	898b      	ldrh	r3, [r1, #12]
    8f5a:	2b02      	cmp	r3, #2
    8f5c:	d003      	beq.n	8f66 <uuid_create+0x12>
    8f5e:	2b10      	cmp	r3, #16
    8f60:	d00a      	beq.n	8f78 <uuid_create+0x24>
	return false;
    8f62:	2000      	movs	r0, #0
}
    8f64:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    8f66:	2300      	movs	r3, #0
    8f68:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    8f6a:	f101 0008 	add.w	r0, r1, #8
    8f6e:	f011 fe92 	bl	1ac96 <net_buf_simple_pull_le16>
    8f72:	8060      	strh	r0, [r4, #2]
		return true;
    8f74:	2001      	movs	r0, #1
    8f76:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    8f78:	2302      	movs	r3, #2
    8f7a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    8f7e:	898a      	ldrh	r2, [r1, #12]
    8f80:	6889      	ldr	r1, [r1, #8]
    8f82:	f7f7 f99d 	bl	2c0 <memcpy>
		return true;
    8f86:	2001      	movs	r0, #1
    8f88:	bd10      	pop	{r4, pc}

00008f8a <find_info_cb>:
{
    8f8a:	b570      	push	{r4, r5, r6, lr}
    8f8c:	4605      	mov	r5, r0
    8f8e:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    8f90:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    8f92:	688b      	ldr	r3, [r1, #8]
    8f94:	b13b      	cbz	r3, 8fa6 <find_info_cb+0x1c>
	switch (data->rsp->format) {
    8f96:	68a3      	ldr	r3, [r4, #8]
    8f98:	781b      	ldrb	r3, [r3, #0]
    8f9a:	2b01      	cmp	r3, #1
    8f9c:	d011      	beq.n	8fc2 <find_info_cb+0x38>
    8f9e:	2b02      	cmp	r3, #2
    8fa0:	d02b      	beq.n	8ffa <find_info_cb+0x70>
	return BT_GATT_ITER_STOP;
    8fa2:	2000      	movs	r0, #0
    8fa4:	bd70      	pop	{r4, r5, r6, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    8fa6:	6848      	ldr	r0, [r1, #4]
    8fa8:	2101      	movs	r1, #1
    8faa:	3008      	adds	r0, #8
    8fac:	f011 fe16 	bl	1abdc <net_buf_simple_add>
    8fb0:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    8fb2:	682b      	ldr	r3, [r5, #0]
    8fb4:	781b      	ldrb	r3, [r3, #0]
    8fb6:	b913      	cbnz	r3, 8fbe <find_info_cb+0x34>
    8fb8:	2301      	movs	r3, #1
    8fba:	7003      	strb	r3, [r0, #0]
    8fbc:	e7eb      	b.n	8f96 <find_info_cb+0xc>
    8fbe:	2302      	movs	r3, #2
    8fc0:	e7fb      	b.n	8fba <find_info_cb+0x30>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    8fc2:	682b      	ldr	r3, [r5, #0]
    8fc4:	781b      	ldrb	r3, [r3, #0]
    8fc6:	b10b      	cbz	r3, 8fcc <find_info_cb+0x42>
			return BT_GATT_ITER_STOP;
    8fc8:	2000      	movs	r0, #0
    8fca:	bd70      	pop	{r4, r5, r6, pc}
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    8fcc:	6860      	ldr	r0, [r4, #4]
    8fce:	2104      	movs	r1, #4
    8fd0:	3008      	adds	r0, #8
    8fd2:	f011 fe03 	bl	1abdc <net_buf_simple_add>
    8fd6:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    8fd8:	8a2b      	ldrh	r3, [r5, #16]
    8fda:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    8fdc:	68e3      	ldr	r3, [r4, #12]
    8fde:	682a      	ldr	r2, [r5, #0]
    8fe0:	8852      	ldrh	r2, [r2, #2]
    8fe2:	805a      	strh	r2, [r3, #2]
		if (att->chan.tx.mtu - data->buf->len >
    8fe4:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    8fe8:	6862      	ldr	r2, [r4, #4]
    8fea:	8992      	ldrh	r2, [r2, #12]
    8fec:	1a9b      	subs	r3, r3, r2
    8fee:	2b04      	cmp	r3, #4
    8ff0:	d801      	bhi.n	8ff6 <find_info_cb+0x6c>
	return BT_GATT_ITER_STOP;
    8ff2:	2000      	movs	r0, #0
    8ff4:	bd70      	pop	{r4, r5, r6, pc}
			return BT_GATT_ITER_CONTINUE;
    8ff6:	2001      	movs	r0, #1
    8ff8:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    8ffa:	682b      	ldr	r3, [r5, #0]
    8ffc:	781b      	ldrb	r3, [r3, #0]
    8ffe:	2b02      	cmp	r3, #2
    9000:	d001      	beq.n	9006 <find_info_cb+0x7c>
			return BT_GATT_ITER_STOP;
    9002:	2000      	movs	r0, #0
    9004:	bd70      	pop	{r4, r5, r6, pc}
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    9006:	6860      	ldr	r0, [r4, #4]
    9008:	2112      	movs	r1, #18
    900a:	3008      	adds	r0, #8
    900c:	f011 fde6 	bl	1abdc <net_buf_simple_add>
    9010:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    9012:	8a2b      	ldrh	r3, [r5, #16]
    9014:	8003      	strh	r3, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    9016:	68e0      	ldr	r0, [r4, #12]
    9018:	6829      	ldr	r1, [r5, #0]
    901a:	2210      	movs	r2, #16
    901c:	3101      	adds	r1, #1
    901e:	3002      	adds	r0, #2
    9020:	f7f7 f94e 	bl	2c0 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    9024:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    9028:	6862      	ldr	r2, [r4, #4]
    902a:	8992      	ldrh	r2, [r2, #12]
    902c:	1a9b      	subs	r3, r3, r2
    902e:	2b12      	cmp	r3, #18
    9030:	d901      	bls.n	9036 <find_info_cb+0xac>
			return BT_GATT_ITER_CONTINUE;
    9032:	2001      	movs	r0, #1
    9034:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_STOP;
    9036:	2000      	movs	r0, #0
}
    9038:	bd70      	pop	{r4, r5, r6, pc}

0000903a <find_type_cb>:
{
    903a:	b5f0      	push	{r4, r5, r6, r7, lr}
    903c:	b089      	sub	sp, #36	; 0x24
    903e:	4605      	mov	r5, r0
    9040:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    9042:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    9044:	6837      	ldr	r7, [r6, #0]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    9046:	2300      	movs	r3, #0
    9048:	f88d 3018 	strb.w	r3, [sp, #24]
    904c:	f642 0301 	movw	r3, #10241	; 0x2801
    9050:	f8ad 301a 	strh.w	r3, [sp, #26]
    9054:	a906      	add	r1, sp, #24
    9056:	6800      	ldr	r0, [r0, #0]
    9058:	f7fb fa43 	bl	44e2 <bt_uuid_cmp>
    905c:	b920      	cbnz	r0, 9068 <find_type_cb+0x2e>
		data->group = NULL;
    905e:	2300      	movs	r3, #0
    9060:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    9062:	2001      	movs	r0, #1
}
    9064:	b009      	add	sp, #36	; 0x24
    9066:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    9068:	2300      	movs	r3, #0
    906a:	f88d 301c 	strb.w	r3, [sp, #28]
    906e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9072:	f8ad 301e 	strh.w	r3, [sp, #30]
    9076:	a907      	add	r1, sp, #28
    9078:	6828      	ldr	r0, [r5, #0]
    907a:	f7fb fa32 	bl	44e2 <bt_uuid_cmp>
    907e:	b148      	cbz	r0, 9094 <find_type_cb+0x5a>
		if (data->group && attr->handle > data->group->end_handle) {
    9080:	68a3      	ldr	r3, [r4, #8]
    9082:	2b00      	cmp	r3, #0
    9084:	d039      	beq.n	90fa <find_type_cb+0xc0>
    9086:	8a2a      	ldrh	r2, [r5, #16]
    9088:	8859      	ldrh	r1, [r3, #2]
    908a:	428a      	cmp	r2, r1
    908c:	d937      	bls.n	90fe <find_type_cb+0xc4>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    908e:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    9090:	2001      	movs	r0, #1
    9092:	e7e7      	b.n	9064 <find_type_cb+0x2a>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    9094:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    9098:	6862      	ldr	r2, [r4, #4]
    909a:	8992      	ldrh	r2, [r2, #12]
    909c:	1a9b      	subs	r3, r3, r2
    909e:	2b03      	cmp	r3, #3
    90a0:	d801      	bhi.n	90a6 <find_type_cb+0x6c>
		return BT_GATT_ITER_STOP;
    90a2:	2000      	movs	r0, #0
    90a4:	e7de      	b.n	9064 <find_type_cb+0x2a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    90a6:	686e      	ldr	r6, [r5, #4]
    90a8:	2300      	movs	r3, #0
    90aa:	9300      	str	r3, [sp, #0]
    90ac:	2310      	movs	r3, #16
    90ae:	aa02      	add	r2, sp, #8
    90b0:	4629      	mov	r1, r5
    90b2:	4638      	mov	r0, r7
    90b4:	47b0      	blx	r6
	if (read < 0) {
    90b6:	1e02      	subs	r2, r0, #0
    90b8:	db06      	blt.n	90c8 <find_type_cb+0x8e>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    90ba:	7c23      	ldrb	r3, [r4, #16]
    90bc:	429a      	cmp	r2, r3
    90be:	d007      	beq.n	90d0 <find_type_cb+0x96>
		data->group = NULL;
    90c0:	2300      	movs	r3, #0
    90c2:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    90c4:	2001      	movs	r0, #1
    90c6:	e7cd      	b.n	9064 <find_type_cb+0x2a>
		data->group = NULL;
    90c8:	2300      	movs	r3, #0
    90ca:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    90cc:	2001      	movs	r0, #1
    90ce:	e7c9      	b.n	9064 <find_type_cb+0x2a>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    90d0:	a902      	add	r1, sp, #8
    90d2:	68e0      	ldr	r0, [r4, #12]
    90d4:	f020 ffc0 	bl	2a058 <memcmp>
    90d8:	2800      	cmp	r0, #0
    90da:	d1f1      	bne.n	90c0 <find_type_cb+0x86>
	data->err = 0x00;
    90dc:	2300      	movs	r3, #0
    90de:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    90e0:	6860      	ldr	r0, [r4, #4]
    90e2:	2104      	movs	r1, #4
    90e4:	3008      	adds	r0, #8
    90e6:	f011 fd79 	bl	1abdc <net_buf_simple_add>
    90ea:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    90ec:	8a2b      	ldrh	r3, [r5, #16]
    90ee:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    90f0:	68a3      	ldr	r3, [r4, #8]
    90f2:	8a2a      	ldrh	r2, [r5, #16]
    90f4:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    90f6:	2001      	movs	r0, #1
    90f8:	e7b4      	b.n	9064 <find_type_cb+0x2a>
		return BT_GATT_ITER_CONTINUE;
    90fa:	2001      	movs	r0, #1
    90fc:	e7b2      	b.n	9064 <find_type_cb+0x2a>
    90fe:	2001      	movs	r0, #1
    9100:	e7b0      	b.n	9064 <find_type_cb+0x2a>

00009102 <att_change_security>:
{
    9102:	b508      	push	{r3, lr}
	switch (err) {
    9104:	2905      	cmp	r1, #5
    9106:	d008      	beq.n	911a <att_change_security+0x18>
    9108:	290f      	cmp	r1, #15
    910a:	d113      	bne.n	9134 <att_change_security+0x32>
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    910c:	7a03      	ldrb	r3, [r0, #8]
    910e:	2b01      	cmp	r3, #1
    9110:	d813      	bhi.n	913a <att_change_security+0x38>
		sec = BT_SECURITY_MEDIUM;
    9112:	2102      	movs	r1, #2
	return bt_conn_security(conn, sec);
    9114:	f7fd fe4a 	bl	6dac <bt_conn_security>
    9118:	bd08      	pop	{r3, pc}
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    911a:	7a03      	ldrb	r3, [r0, #8]
    911c:	2b01      	cmp	r3, #1
    911e:	d905      	bls.n	912c <att_change_security+0x2a>
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    9120:	2b02      	cmp	r3, #2
    9122:	d905      	bls.n	9130 <att_change_security+0x2e>
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    9124:	2b03      	cmp	r3, #3
    9126:	d80b      	bhi.n	9140 <att_change_security+0x3e>
			sec = BT_SECURITY_FIPS;
    9128:	2104      	movs	r1, #4
    912a:	e7f3      	b.n	9114 <att_change_security+0x12>
			sec = BT_SECURITY_MEDIUM;
    912c:	2102      	movs	r1, #2
    912e:	e7f1      	b.n	9114 <att_change_security+0x12>
			sec = BT_SECURITY_HIGH;
    9130:	2103      	movs	r1, #3
    9132:	e7ef      	b.n	9114 <att_change_security+0x12>
		return -EINVAL;
    9134:	f06f 0015 	mvn.w	r0, #21
    9138:	bd08      	pop	{r3, pc}
			return -EALREADY;
    913a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    913e:	bd08      	pop	{r3, pc}
			return -EALREADY;
    9140:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    9144:	bd08      	pop	{r3, pc}
	...

00009148 <bt_att_connected>:
{
    9148:	b510      	push	{r4, lr}
    914a:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    914c:	2317      	movs	r3, #23
    914e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    9152:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	k_delayed_work_init(&att->timeout_work, att_timeout);
    9156:	4906      	ldr	r1, [pc, #24]	; (9170 <bt_att_connected+0x28>)
    9158:	30ac      	adds	r0, #172	; 0xac
    915a:	f020 fe0f 	bl	29d7c <k_delayed_work_init>
	list->head = NULL;
    915e:	2300      	movs	r3, #0
    9160:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	list->tail = NULL;
    9164:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	bt_gatt_connected(ch->chan.conn);
    9168:	6820      	ldr	r0, [r4, #0]
    916a:	f001 fadd 	bl	a728 <bt_gatt_connected>
    916e:	bd10      	pop	{r4, pc}
    9170:	000094cf 	.word	0x000094cf

00009174 <att_send_req>:
{
    9174:	b570      	push	{r4, r5, r6, lr}
    9176:	4605      	mov	r5, r0
    9178:	460c      	mov	r4, r1
	att->req = req;
    917a:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
	k_sem_take(&att->tx_sem, K_FOREVER);
    917e:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    9182:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9186:	4630      	mov	r0, r6
    9188:	f020 f83a 	bl	29200 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    918c:	682b      	ldr	r3, [r5, #0]
    918e:	7b1b      	ldrb	r3, [r3, #12]
    9190:	2b03      	cmp	r3, #3
    9192:	d019      	beq.n	91c8 <att_send_req+0x54>
    9194:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    9196:	b323      	cbz	r3, 91e2 <att_send_req+0x6e>
	net_buf_simple_save(&req->buf->b, &req->state);
    9198:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    919a:	f106 0008 	add.w	r0, r6, #8
    919e:	f011 fd82 	bl	1aca6 <net_buf_simple_headroom>
    91a2:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    91a4:	89b3      	ldrh	r3, [r6, #12]
    91a6:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    91a8:	682d      	ldr	r5, [r5, #0]
    91aa:	6920      	ldr	r0, [r4, #16]
    91ac:	f011 fce6 	bl	1ab7c <net_buf_ref>
    91b0:	4606      	mov	r6, r0
    91b2:	6920      	ldr	r0, [r4, #16]
    91b4:	f7ff fcf0 	bl	8b98 <att_cb>
    91b8:	4603      	mov	r3, r0
    91ba:	4632      	mov	r2, r6
    91bc:	2104      	movs	r1, #4
    91be:	4628      	mov	r0, r5
    91c0:	f7fe fea3 	bl	7f0a <bt_l2cap_send_cb>
	return 0;
    91c4:	2000      	movs	r0, #0
}
    91c6:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    91c8:	f3bf 8f5b 	dmb	ish
    91cc:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    91d0:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    91d4:	f013 0f04 	tst.w	r3, #4
    91d8:	d101      	bne.n	91de <att_send_req+0x6a>
    91da:	2301      	movs	r3, #1
    91dc:	e7db      	b.n	9196 <att_send_req+0x22>
    91de:	2300      	movs	r3, #0
    91e0:	e7d9      	b.n	9196 <att_send_req+0x22>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    91e2:	4630      	mov	r0, r6
    91e4:	f01f fff9 	bl	291da <_impl_k_sem_give>
		return -ENOTCONN;
    91e8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    91ec:	bd70      	pop	{r4, r5, r6, pc}

000091ee <att_process>:
{
    91ee:	b508      	push	{r3, lr}
	return (!list->head);
    91f0:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    91f4:	b131      	cbz	r1, 9204 <att_process+0x16>
	list->head = node->next;
    91f6:	680b      	ldr	r3, [r1, #0]
    91f8:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
	if (list->tail == node) {
    91fc:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    9200:	4291      	cmp	r1, r2
    9202:	d003      	beq.n	920c <att_process+0x1e>
	if (!node) {
    9204:	b109      	cbz	r1, 920a <att_process+0x1c>
	att_send_req(att, ATT_REQ(node));
    9206:	f7ff ffb5 	bl	9174 <att_send_req>
    920a:	bd08      	pop	{r3, pc}
		list->tail = list->head;
    920c:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
    9210:	e7f8      	b.n	9204 <att_process+0x16>

00009212 <att_handle_rsp>:
{
    9212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9216:	b082      	sub	sp, #8
    9218:	4604      	mov	r4, r0
    921a:	460e      	mov	r6, r1
    921c:	4617      	mov	r7, r2
    921e:	461d      	mov	r5, r3
	k_delayed_work_cancel(&att->timeout_work);
    9220:	30ac      	adds	r0, #172	; 0xac
    9222:	f020 fdc9 	bl	29db8 <k_delayed_work_cancel>
	if (!att->req) {
    9226:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    922a:	b1e3      	cbz	r3, 9266 <att_handle_rsp+0x54>
	if (att->req->buf) {
    922c:	6918      	ldr	r0, [r3, #16]
    922e:	b128      	cbz	r0, 923c <att_handle_rsp+0x2a>
		net_buf_unref(att->req->buf);
    9230:	f011 fc88 	bl	1ab44 <net_buf_unref>
		att->req->buf = NULL;
    9234:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9238:	2200      	movs	r2, #0
    923a:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    923c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9240:	f8d3 8004 	ldr.w	r8, [r3, #4]
	att->req->func = NULL;
    9244:	2200      	movs	r2, #0
    9246:	605a      	str	r2, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    9248:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    924c:	9300      	str	r3, [sp, #0]
    924e:	463b      	mov	r3, r7
    9250:	4632      	mov	r2, r6
    9252:	4629      	mov	r1, r5
    9254:	6820      	ldr	r0, [r4, #0]
    9256:	47c0      	blx	r8
	if (!att->req->func) {
    9258:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    925c:	6843      	ldr	r3, [r0, #4]
    925e:	b14b      	cbz	r3, 9274 <att_handle_rsp+0x62>
	att->req = NULL;
    9260:	2300      	movs	r3, #0
    9262:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	att_process(att);
    9266:	4620      	mov	r0, r4
    9268:	f7ff ffc1 	bl	91ee <att_process>
}
    926c:	2000      	movs	r0, #0
    926e:	b002      	add	sp, #8
    9270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		att_req_destroy(att->req);
    9274:	f7ff fd34 	bl	8ce0 <att_req_destroy>
    9278:	e7f2      	b.n	9260 <att_handle_rsp+0x4e>

0000927a <att_confirm>:
{
    927a:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    927c:	2300      	movs	r3, #0
    927e:	898a      	ldrh	r2, [r1, #12]
    9280:	6889      	ldr	r1, [r1, #8]
    9282:	f7ff ffc6 	bl	9212 <att_handle_rsp>
}
    9286:	bd08      	pop	{r3, pc}

00009288 <att_handle_exec_write_rsp>:
{
    9288:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    928a:	2300      	movs	r3, #0
    928c:	898a      	ldrh	r2, [r1, #12]
    928e:	6889      	ldr	r1, [r1, #8]
    9290:	f7ff ffbf 	bl	9212 <att_handle_rsp>
}
    9294:	bd08      	pop	{r3, pc}

00009296 <att_handle_prepare_write_rsp>:
{
    9296:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9298:	2300      	movs	r3, #0
    929a:	898a      	ldrh	r2, [r1, #12]
    929c:	6889      	ldr	r1, [r1, #8]
    929e:	f7ff ffb8 	bl	9212 <att_handle_rsp>
}
    92a2:	bd08      	pop	{r3, pc}

000092a4 <att_handle_write_rsp>:
{
    92a4:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    92a6:	2300      	movs	r3, #0
    92a8:	898a      	ldrh	r2, [r1, #12]
    92aa:	6889      	ldr	r1, [r1, #8]
    92ac:	f7ff ffb1 	bl	9212 <att_handle_rsp>
}
    92b0:	bd08      	pop	{r3, pc}

000092b2 <att_handle_read_mult_rsp>:
{
    92b2:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    92b4:	2300      	movs	r3, #0
    92b6:	898a      	ldrh	r2, [r1, #12]
    92b8:	6889      	ldr	r1, [r1, #8]
    92ba:	f7ff ffaa 	bl	9212 <att_handle_rsp>
}
    92be:	bd08      	pop	{r3, pc}

000092c0 <att_handle_read_blob_rsp>:
{
    92c0:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    92c2:	2300      	movs	r3, #0
    92c4:	898a      	ldrh	r2, [r1, #12]
    92c6:	6889      	ldr	r1, [r1, #8]
    92c8:	f7ff ffa3 	bl	9212 <att_handle_rsp>
}
    92cc:	bd08      	pop	{r3, pc}

000092ce <att_handle_read_rsp>:
{
    92ce:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    92d0:	2300      	movs	r3, #0
    92d2:	898a      	ldrh	r2, [r1, #12]
    92d4:	6889      	ldr	r1, [r1, #8]
    92d6:	f7ff ff9c 	bl	9212 <att_handle_rsp>
}
    92da:	bd08      	pop	{r3, pc}

000092dc <att_handle_read_type_rsp>:
{
    92dc:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    92de:	2300      	movs	r3, #0
    92e0:	898a      	ldrh	r2, [r1, #12]
    92e2:	6889      	ldr	r1, [r1, #8]
    92e4:	f7ff ff95 	bl	9212 <att_handle_rsp>
}
    92e8:	bd08      	pop	{r3, pc}

000092ea <att_handle_find_type_rsp>:
{
    92ea:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    92ec:	2300      	movs	r3, #0
    92ee:	898a      	ldrh	r2, [r1, #12]
    92f0:	6889      	ldr	r1, [r1, #8]
    92f2:	f7ff ff8e 	bl	9212 <att_handle_rsp>
}
    92f6:	bd08      	pop	{r3, pc}

000092f8 <att_handle_find_info_rsp>:
{
    92f8:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    92fa:	2300      	movs	r3, #0
    92fc:	898a      	ldrh	r2, [r1, #12]
    92fe:	6889      	ldr	r1, [r1, #8]
    9300:	f7ff ff87 	bl	9212 <att_handle_rsp>
}
    9304:	bd08      	pop	{r3, pc}

00009306 <att_mtu_rsp>:
	if (!att) {
    9306:	b1b8      	cbz	r0, 9338 <att_mtu_rsp+0x32>
{
    9308:	b508      	push	{r3, lr}
    930a:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
    930c:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    930e:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    9310:	2b16      	cmp	r3, #22
    9312:	d90b      	bls.n	932c <att_mtu_rsp+0x26>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    9314:	2b41      	cmp	r3, #65	; 0x41
    9316:	bf28      	it	cs
    9318:	2341      	movcs	r3, #65	; 0x41
    931a:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    931e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	return att_handle_rsp(att, rsp, buf->len, 0);
    9322:	2300      	movs	r3, #0
    9324:	8992      	ldrh	r2, [r2, #12]
    9326:	f7ff ff74 	bl	9212 <att_handle_rsp>
    932a:	bd08      	pop	{r3, pc}
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    932c:	2304      	movs	r3, #4
    932e:	2200      	movs	r2, #0
    9330:	4611      	mov	r1, r2
    9332:	f7ff ff6e 	bl	9212 <att_handle_rsp>
    9336:	bd08      	pop	{r3, pc}
		return 0;
    9338:	2000      	movs	r0, #0
    933a:	4770      	bx	lr

0000933c <bt_att_encrypt_change>:
{
    933c:	b570      	push	{r4, r5, r6, lr}
    933e:	4604      	mov	r4, r0
	struct bt_conn *conn = ch->chan.conn;
    9340:	6805      	ldr	r5, [r0, #0]
	if (hci_status) {
    9342:	b941      	cbnz	r1, 9356 <bt_att_encrypt_change+0x1a>
	if (conn->sec_level == BT_SECURITY_LOW) {
    9344:	7a2b      	ldrb	r3, [r5, #8]
    9346:	2b01      	cmp	r3, #1
    9348:	d004      	beq.n	9354 <bt_att_encrypt_change+0x18>
	if (!att->req || !att->req->retrying) {
    934a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    934e:	b10b      	cbz	r3, 9354 <bt_att_encrypt_change+0x18>
    9350:	7d1b      	ldrb	r3, [r3, #20]
    9352:	b933      	cbnz	r3, 9362 <bt_att_encrypt_change+0x26>
    9354:	bd70      	pop	{r4, r5, r6, pc}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    9356:	2305      	movs	r3, #5
    9358:	2200      	movs	r2, #0
    935a:	4611      	mov	r1, r2
    935c:	f7ff ff59 	bl	9212 <att_handle_rsp>
		return;
    9360:	bd70      	pop	{r4, r5, r6, pc}
	k_sem_take(&att->tx_sem, K_FOREVER);
    9362:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    9366:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    936a:	4630      	mov	r0, r6
    936c:	f01f ff48 	bl	29200 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9370:	6823      	ldr	r3, [r4, #0]
    9372:	7b1b      	ldrb	r3, [r3, #12]
    9374:	2b03      	cmp	r3, #3
    9376:	d012      	beq.n	939e <bt_att_encrypt_change+0x62>
    9378:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    937a:	b1eb      	cbz	r3, 93b8 <bt_att_encrypt_change+0x7c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    937c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9380:	691e      	ldr	r6, [r3, #16]
    9382:	4630      	mov	r0, r6
    9384:	f7ff fc08 	bl	8b98 <att_cb>
    9388:	4603      	mov	r3, r0
    938a:	4632      	mov	r2, r6
    938c:	2104      	movs	r1, #4
    938e:	4628      	mov	r0, r5
    9390:	f7fe fdbb 	bl	7f0a <bt_l2cap_send_cb>
	att->req->buf = NULL;
    9394:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9398:	2200      	movs	r2, #0
    939a:	611a      	str	r2, [r3, #16]
    939c:	e7da      	b.n	9354 <bt_att_encrypt_change+0x18>
    939e:	f3bf 8f5b 	dmb	ish
    93a2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    93a6:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    93aa:	f013 0f04 	tst.w	r3, #4
    93ae:	d101      	bne.n	93b4 <bt_att_encrypt_change+0x78>
    93b0:	2301      	movs	r3, #1
    93b2:	e7e2      	b.n	937a <bt_att_encrypt_change+0x3e>
    93b4:	2300      	movs	r3, #0
    93b6:	e7e0      	b.n	937a <bt_att_encrypt_change+0x3e>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    93b8:	4630      	mov	r0, r6
    93ba:	f01f ff0e 	bl	291da <_impl_k_sem_give>
    93be:	bd70      	pop	{r4, r5, r6, pc}

000093c0 <att_error_rsp>:
{
    93c0:	b538      	push	{r3, r4, r5, lr}
    93c2:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
    93c4:	6888      	ldr	r0, [r1, #8]
	if (!att->req) {
    93c6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    93ca:	b1fb      	cbz	r3, 940c <att_error_rsp+0x4c>
	if (att->req->buf) {
    93cc:	691a      	ldr	r2, [r3, #16]
    93ce:	b132      	cbz	r2, 93de <att_error_rsp+0x1e>
	buf->data = buf->__buf + state->offset;
    93d0:	f102 0110 	add.w	r1, r2, #16
    93d4:	899d      	ldrh	r5, [r3, #12]
    93d6:	4429      	add	r1, r5
    93d8:	6091      	str	r1, [r2, #8]
	buf->len = state->len;
    93da:	89db      	ldrh	r3, [r3, #14]
    93dc:	8193      	strh	r3, [r2, #12]
	err = rsp->error;
    93de:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    93e0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    93e4:	7d1b      	ldrb	r3, [r3, #20]
    93e6:	b133      	cbz	r3, 93f6 <att_error_rsp+0x36>
	return att_handle_rsp(att, NULL, 0, err);
    93e8:	462b      	mov	r3, r5
    93ea:	2200      	movs	r2, #0
    93ec:	4611      	mov	r1, r2
    93ee:	4620      	mov	r0, r4
    93f0:	f7ff ff0f 	bl	9212 <att_handle_rsp>
}
    93f4:	bd38      	pop	{r3, r4, r5, pc}
	if (!att_change_security(att->chan.chan.conn, err)) {
    93f6:	4629      	mov	r1, r5
    93f8:	6820      	ldr	r0, [r4, #0]
    93fa:	f7ff fe82 	bl	9102 <att_change_security>
    93fe:	2800      	cmp	r0, #0
    9400:	d1f2      	bne.n	93e8 <att_error_rsp+0x28>
		att->req->retrying = true;
    9402:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9406:	2201      	movs	r2, #1
    9408:	751a      	strb	r2, [r3, #20]
		return 0;
    940a:	bd38      	pop	{r3, r4, r5, pc}
		err = BT_ATT_ERR_UNLIKELY;
    940c:	250e      	movs	r5, #14
    940e:	e7eb      	b.n	93e8 <att_error_rsp+0x28>

00009410 <att_reset>:
{
    9410:	b5f0      	push	{r4, r5, r6, r7, lr}
    9412:	b083      	sub	sp, #12
    9414:	4607      	mov	r7, r0
	atomic_set_bit(att->flags, ATT_DISCONNECTED);
    9416:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    941a:	f3bf 8f5b 	dmb	ish
    941e:	e853 2f00 	ldrex	r2, [r3]
    9422:	f042 0204 	orr.w	r2, r2, #4
    9426:	e843 2100 	strex	r1, r2, [r3]
    942a:	2900      	cmp	r1, #0
    942c:	d1f7      	bne.n	941e <att_reset+0xe>
    942e:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
    9432:	2400      	movs	r4, #0
    9434:	e004      	b.n	9440 <att_reset+0x30>
    9436:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
    943a:	f01f fece 	bl	291da <_impl_k_sem_give>
    943e:	3401      	adds	r4, #1
    9440:	2c01      	cmp	r4, #1
    9442:	ddf8      	ble.n	9436 <att_reset+0x26>
	return list->head;
    9444:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    9448:	b11d      	cbz	r5, 9452 <att_reset+0x42>
    944a:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    944c:	b145      	cbz	r5, 9460 <att_reset+0x50>
	return node->next;
    944e:	682c      	ldr	r4, [r5, #0]
    9450:	e006      	b.n	9460 <att_reset+0x50>
    9452:	462c      	mov	r4, r5
    9454:	e004      	b.n	9460 <att_reset+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9456:	4623      	mov	r3, r4
    9458:	e014      	b.n	9484 <att_reset+0x74>
    945a:	4623      	mov	r3, r4
    945c:	4625      	mov	r5, r4
    945e:	461c      	mov	r4, r3
    9460:	b1c5      	cbz	r5, 9494 <att_reset+0x84>
		if (req->func) {
    9462:	686e      	ldr	r6, [r5, #4]
    9464:	b12e      	cbz	r6, 9472 <att_reset+0x62>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    9466:	9500      	str	r5, [sp, #0]
    9468:	2300      	movs	r3, #0
    946a:	461a      	mov	r2, r3
    946c:	210e      	movs	r1, #14
    946e:	4618      	mov	r0, r3
    9470:	47b0      	blx	r6
		att_req_destroy(req);
    9472:	4628      	mov	r0, r5
    9474:	f7ff fc34 	bl	8ce0 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    9478:	2c00      	cmp	r4, #0
    947a:	d0ee      	beq.n	945a <att_reset+0x4a>
    947c:	4622      	mov	r2, r4
    947e:	2c00      	cmp	r4, #0
    9480:	d0e9      	beq.n	9456 <att_reset+0x46>
	return node->next;
    9482:	6823      	ldr	r3, [r4, #0]
    9484:	b113      	cbz	r3, 948c <att_reset+0x7c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9486:	b11a      	cbz	r2, 9490 <att_reset+0x80>
	return node->next;
    9488:	6823      	ldr	r3, [r4, #0]
    948a:	e7e7      	b.n	945c <att_reset+0x4c>
    948c:	2300      	movs	r3, #0
    948e:	e7e5      	b.n	945c <att_reset+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9490:	2300      	movs	r3, #0
    9492:	e7e3      	b.n	945c <att_reset+0x4c>
	list->head = NULL;
    9494:	2300      	movs	r3, #0
    9496:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	list->tail = NULL;
    949a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	if (!att->req) {
    949e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    94a2:	b12b      	cbz	r3, 94b0 <att_reset+0xa0>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    94a4:	230e      	movs	r3, #14
    94a6:	2200      	movs	r2, #0
    94a8:	4611      	mov	r1, r2
    94aa:	4638      	mov	r0, r7
    94ac:	f7ff feb1 	bl	9212 <att_handle_rsp>
}
    94b0:	b003      	add	sp, #12
    94b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000094b4 <bt_att_disconnected>:
{
    94b4:	b510      	push	{r4, lr}
    94b6:	4604      	mov	r4, r0
	att_reset(att);
    94b8:	f7ff ffaa 	bl	9410 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    94bc:	6820      	ldr	r0, [r4, #0]
    94be:	f001 f93f 	bl	a740 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    94c2:	22ec      	movs	r2, #236	; 0xec
    94c4:	2100      	movs	r1, #0
    94c6:	4620      	mov	r0, r4
    94c8:	f020 fe5a 	bl	2a180 <memset>
    94cc:	bd10      	pop	{r4, pc}

000094ce <att_timeout>:
{
    94ce:	b510      	push	{r4, lr}
    94d0:	4604      	mov	r4, r0
	att_reset(att);
    94d2:	38ac      	subs	r0, #172	; 0xac
    94d4:	f7ff ff9c 	bl	9410 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    94d8:	f854 0cac 	ldr.w	r0, [r4, #-172]
    94dc:	f001 f930 	bl	a740 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    94e0:	2300      	movs	r3, #0
    94e2:	f844 3cac 	str.w	r3, [r4, #-172]
    94e6:	bd10      	pop	{r4, pc}

000094e8 <bt_att_create_pdu>:
{
    94e8:	b538      	push	{r3, r4, r5, lr}
    94ea:	460d      	mov	r5, r1
    94ec:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    94ee:	f7ff fbab 	bl	8c48 <att_chan_get>
	if (!att) {
    94f2:	b180      	cbz	r0, 9516 <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    94f4:	3401      	adds	r4, #1
    94f6:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
    94fa:	429c      	cmp	r4, r3
    94fc:	d80d      	bhi.n	951a <bt_att_create_pdu+0x32>
	buf = bt_l2cap_create_pdu(NULL, 0);
    94fe:	2100      	movs	r1, #0
    9500:	4608      	mov	r0, r1
    9502:	f7fe fc6a 	bl	7dda <bt_l2cap_create_pdu>
    9506:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    9508:	2101      	movs	r1, #1
    950a:	3008      	adds	r0, #8
    950c:	f011 fb66 	bl	1abdc <net_buf_simple_add>
	hdr->code = op;
    9510:	7005      	strb	r5, [r0, #0]
}
    9512:	4620      	mov	r0, r4
    9514:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    9516:	2400      	movs	r4, #0
    9518:	e7fb      	b.n	9512 <bt_att_create_pdu+0x2a>
		return NULL;
    951a:	2400      	movs	r4, #0
    951c:	e7f9      	b.n	9512 <bt_att_create_pdu+0x2a>
	...

00009520 <att_indicate>:
{
    9520:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    9522:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    9524:	f101 0008 	add.w	r0, r1, #8
    9528:	f011 fbb5 	bl	1ac96 <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    952c:	2200      	movs	r2, #0
    952e:	211e      	movs	r1, #30
    9530:	4620      	mov	r0, r4
    9532:	f7ff ffd9 	bl	94e8 <bt_att_create_pdu>
	if (!buf) {
    9536:	b128      	cbz	r0, 9544 <att_indicate+0x24>
    9538:	4602      	mov	r2, r0
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    953a:	4b03      	ldr	r3, [pc, #12]	; (9548 <att_indicate+0x28>)
    953c:	2104      	movs	r1, #4
    953e:	4620      	mov	r0, r4
    9540:	f7fe fce3 	bl	7f0a <bt_l2cap_send_cb>
}
    9544:	2000      	movs	r0, #0
    9546:	bd10      	pop	{r4, pc}
    9548:	00008d43 	.word	0x00008d43

0000954c <att_mtu_req>:
{
    954c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    9550:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    9552:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
    9554:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    9556:	2d16      	cmp	r5, #22
    9558:	d802      	bhi.n	9560 <att_mtu_req+0x14>
		return BT_ATT_ERR_INVALID_PDU;
    955a:	2004      	movs	r0, #4
    955c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9560:	4604      	mov	r4, r0
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    9562:	2202      	movs	r2, #2
    9564:	2103      	movs	r1, #3
    9566:	4638      	mov	r0, r7
    9568:	f7ff ffbe 	bl	94e8 <bt_att_create_pdu>
	if (!pdu) {
    956c:	4680      	mov	r8, r0
    956e:	b1b8      	cbz	r0, 95a0 <att_mtu_req+0x54>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    9570:	2102      	movs	r1, #2
    9572:	3008      	adds	r0, #8
    9574:	f011 fb32 	bl	1abdc <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    9578:	2600      	movs	r6, #0
    957a:	2341      	movs	r3, #65	; 0x41
    957c:	7003      	strb	r3, [r0, #0]
    957e:	7046      	strb	r6, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    9580:	4b09      	ldr	r3, [pc, #36]	; (95a8 <att_mtu_req+0x5c>)
    9582:	4642      	mov	r2, r8
    9584:	2104      	movs	r1, #4
    9586:	4638      	mov	r0, r7
    9588:	f7fe fcbf 	bl	7f0a <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    958c:	2d41      	cmp	r5, #65	; 0x41
    958e:	bf28      	it	cs
    9590:	2541      	movcs	r5, #65	; 0x41
    9592:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    9596:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	return 0;
    959a:	4630      	mov	r0, r6
    959c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    95a0:	200e      	movs	r0, #14
}
    95a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    95a6:	bf00      	nop
    95a8:	00008d0b 	.word	0x00008d0b

000095ac <send_err_rsp>:
	if (!req) {
    95ac:	b901      	cbnz	r1, 95b0 <send_err_rsp+0x4>
    95ae:	4770      	bx	lr
{
    95b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    95b4:	460f      	mov	r7, r1
    95b6:	461d      	mov	r5, r3
    95b8:	4616      	mov	r6, r2
    95ba:	4604      	mov	r4, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    95bc:	2204      	movs	r2, #4
    95be:	2101      	movs	r1, #1
    95c0:	f7ff ff92 	bl	94e8 <bt_att_create_pdu>
	if (!buf) {
    95c4:	4680      	mov	r8, r0
    95c6:	b168      	cbz	r0, 95e4 <send_err_rsp+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    95c8:	2104      	movs	r1, #4
    95ca:	3008      	adds	r0, #8
    95cc:	f011 fb06 	bl	1abdc <net_buf_simple_add>
	rsp->request = req;
    95d0:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
    95d2:	f8a0 6001 	strh.w	r6, [r0, #1]
	rsp->error = err;
    95d6:	70c5      	strb	r5, [r0, #3]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    95d8:	4b03      	ldr	r3, [pc, #12]	; (95e8 <send_err_rsp+0x3c>)
    95da:	4642      	mov	r2, r8
    95dc:	2104      	movs	r1, #4
    95de:	4620      	mov	r0, r4
    95e0:	f7fe fc93 	bl	7f0a <bt_l2cap_send_cb>
    95e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    95e8:	00008d0b 	.word	0x00008d0b

000095ec <bt_att_recv>:
{
    95ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att_hdr *hdr = (void *)buf->data;
    95ee:	688d      	ldr	r5, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    95f0:	898b      	ldrh	r3, [r1, #12]
    95f2:	b903      	cbnz	r3, 95f6 <bt_att_recv+0xa>
    95f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    95f6:	460e      	mov	r6, r1
    95f8:	4607      	mov	r7, r0
	net_buf_pull(buf, sizeof(*hdr));
    95fa:	2101      	movs	r1, #1
    95fc:	f106 0008 	add.w	r0, r6, #8
    9600:	f011 fb39 	bl	1ac76 <net_buf_simple_pull>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9604:	2300      	movs	r3, #0
    9606:	2b1a      	cmp	r3, #26
    9608:	d822      	bhi.n	9650 <bt_att_recv+0x64>
		if (hdr->code == handlers[i].op) {
    960a:	782c      	ldrb	r4, [r5, #0]
    960c:	4a2c      	ldr	r2, [pc, #176]	; (96c0 <bt_att_recv+0xd4>)
    960e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    9612:	4294      	cmp	r4, r2
    9614:	d001      	beq.n	961a <bt_att_recv+0x2e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9616:	3301      	adds	r3, #1
    9618:	e7f5      	b.n	9606 <bt_att_recv+0x1a>
			handler = &handlers[i];
    961a:	4c29      	ldr	r4, [pc, #164]	; (96c0 <bt_att_recv+0xd4>)
    961c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (!handler) {
    9620:	b1c4      	cbz	r4, 9654 <bt_att_recv+0x68>
		if (handler->type == ATT_REQUEST &&
    9622:	78a3      	ldrb	r3, [r4, #2]
    9624:	2b01      	cmp	r3, #1
    9626:	d022      	beq.n	966e <bt_att_recv+0x82>
		} else if (handler->type == ATT_INDICATION &&
    9628:	78a3      	ldrb	r3, [r4, #2]
    962a:	2b05      	cmp	r3, #5
    962c:	d031      	beq.n	9692 <bt_att_recv+0xa6>
	if (buf->len < handler->expect_len) {
    962e:	89b2      	ldrh	r2, [r6, #12]
    9630:	7863      	ldrb	r3, [r4, #1]
    9632:	429a      	cmp	r2, r3
    9634:	d23f      	bcs.n	96b6 <bt_att_recv+0xca>
		err = BT_ATT_ERR_INVALID_PDU;
    9636:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
    9638:	78a2      	ldrb	r2, [r4, #2]
    963a:	2a01      	cmp	r2, #1
    963c:	d1da      	bne.n	95f4 <bt_att_recv+0x8>
    963e:	2800      	cmp	r0, #0
    9640:	d0d8      	beq.n	95f4 <bt_att_recv+0x8>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    9642:	4603      	mov	r3, r0
    9644:	2200      	movs	r2, #0
    9646:	7829      	ldrb	r1, [r5, #0]
    9648:	6838      	ldr	r0, [r7, #0]
    964a:	f7ff ffaf 	bl	95ac <send_err_rsp>
    964e:	e7d1      	b.n	95f4 <bt_att_recv+0x8>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9650:	2400      	movs	r4, #0
    9652:	e7e5      	b.n	9620 <bt_att_recv+0x34>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    9654:	782c      	ldrb	r4, [r5, #0]
    9656:	4620      	mov	r0, r4
    9658:	f7ff fa86 	bl	8b68 <att_op_get_type>
    965c:	2800      	cmp	r0, #0
    965e:	d0c9      	beq.n	95f4 <bt_att_recv+0x8>
			send_err_rsp(chan->conn, hdr->code, 0,
    9660:	2306      	movs	r3, #6
    9662:	2200      	movs	r2, #0
    9664:	4621      	mov	r1, r4
    9666:	6838      	ldr	r0, [r7, #0]
    9668:	f7ff ffa0 	bl	95ac <send_err_rsp>
    966c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    atomic_test_and_set_bit(att->flags, ATT_PENDING_RSP)) {
    966e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    9672:	f3bf 8f5b 	dmb	ish
    9676:	e853 2f00 	ldrex	r2, [r3]
    967a:	f042 0101 	orr.w	r1, r2, #1
    967e:	e843 1000 	strex	r0, r1, [r3]
    9682:	2800      	cmp	r0, #0
    9684:	d1f7      	bne.n	9676 <bt_att_recv+0x8a>
    9686:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    968a:	f012 0f01 	tst.w	r2, #1
    968e:	d0cb      	beq.n	9628 <bt_att_recv+0x3c>
    9690:	e7b0      	b.n	95f4 <bt_att_recv+0x8>
			   atomic_test_and_set_bit(att->flags,
    9692:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    9696:	f3bf 8f5b 	dmb	ish
    969a:	e853 2f00 	ldrex	r2, [r3]
    969e:	f042 0102 	orr.w	r1, r2, #2
    96a2:	e843 1000 	strex	r0, r1, [r3]
    96a6:	2800      	cmp	r0, #0
    96a8:	d1f7      	bne.n	969a <bt_att_recv+0xae>
    96aa:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
    96ae:	f012 0f02 	tst.w	r2, #2
    96b2:	d0bc      	beq.n	962e <bt_att_recv+0x42>
    96b4:	e79e      	b.n	95f4 <bt_att_recv+0x8>
		err = handler->func(att, buf);
    96b6:	6863      	ldr	r3, [r4, #4]
    96b8:	4631      	mov	r1, r6
    96ba:	4638      	mov	r0, r7
    96bc:	4798      	blx	r3
    96be:	e7bb      	b.n	9638 <bt_att_recv+0x4c>
    96c0:	00030dac 	.word	0x00030dac

000096c4 <att_write_rsp>:
{
    96c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    96c8:	b086      	sub	sp, #24
	if (!handle) {
    96ca:	b923      	cbnz	r3, 96d6 <att_write_rsp+0x12>
		return BT_ATT_ERR_INVALID_HANDLE;
    96cc:	2401      	movs	r4, #1
}
    96ce:	4620      	mov	r0, r4
    96d0:	b006      	add	sp, #24
    96d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    96d6:	4698      	mov	r8, r3
    96d8:	4617      	mov	r7, r2
    96da:	460e      	mov	r6, r1
    96dc:	4605      	mov	r5, r0
	memset(&data, 0, sizeof(data));
    96de:	2218      	movs	r2, #24
    96e0:	2100      	movs	r1, #0
    96e2:	4668      	mov	r0, sp
    96e4:	f020 fd4c 	bl	2a180 <memset>
	if (rsp) {
    96e8:	b137      	cbz	r7, 96f8 <att_write_rsp+0x34>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    96ea:	2200      	movs	r2, #0
    96ec:	4639      	mov	r1, r7
    96ee:	4628      	mov	r0, r5
    96f0:	f7ff fefa 	bl	94e8 <bt_att_create_pdu>
    96f4:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    96f6:	b3a0      	cbz	r0, 9762 <att_write_rsp+0x9e>
	data.conn = conn;
    96f8:	9500      	str	r5, [sp, #0]
	data.op = op;
    96fa:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    96fe:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    9702:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    9706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9708:	9303      	str	r3, [sp, #12]
	data.len = len;
    970a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    970e:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9712:	2301      	movs	r3, #1
    9714:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9718:	466b      	mov	r3, sp
    971a:	4a13      	ldr	r2, [pc, #76]	; (9768 <att_write_rsp+0xa4>)
    971c:	4641      	mov	r1, r8
    971e:	4640      	mov	r0, r8
    9720:	f000 ff26 	bl	a570 <bt_gatt_foreach_attr>
	if (data.err) {
    9724:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9728:	b194      	cbz	r4, 9750 <att_write_rsp+0x8c>
		if (rsp) {
    972a:	b91f      	cbnz	r7, 9734 <att_write_rsp+0x70>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    972c:	2e18      	cmp	r6, #24
    972e:	d00c      	beq.n	974a <att_write_rsp+0x86>
    9730:	2400      	movs	r4, #0
    9732:	e7cc      	b.n	96ce <att_write_rsp+0xa>
			net_buf_unref(data.buf);
    9734:	9801      	ldr	r0, [sp, #4]
    9736:	f011 fa05 	bl	1ab44 <net_buf_unref>
			send_err_rsp(conn, op, handle, data.err);
    973a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    973e:	4642      	mov	r2, r8
    9740:	4631      	mov	r1, r6
    9742:	4628      	mov	r0, r5
    9744:	f7ff ff32 	bl	95ac <send_err_rsp>
    9748:	e7f0      	b.n	972c <att_write_rsp+0x68>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    974a:	f89d 4014 	ldrb.w	r4, [sp, #20]
    974e:	e7be      	b.n	96ce <att_write_rsp+0xa>
	if (data.buf) {
    9750:	9a01      	ldr	r2, [sp, #4]
    9752:	2a00      	cmp	r2, #0
    9754:	d0bb      	beq.n	96ce <att_write_rsp+0xa>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    9756:	4b05      	ldr	r3, [pc, #20]	; (976c <att_write_rsp+0xa8>)
    9758:	2104      	movs	r1, #4
    975a:	4628      	mov	r0, r5
    975c:	f7fe fbd5 	bl	7f0a <bt_l2cap_send_cb>
    9760:	e7b5      	b.n	96ce <att_write_rsp+0xa>
			return BT_ATT_ERR_UNLIKELY;
    9762:	240e      	movs	r4, #14
    9764:	e7b3      	b.n	96ce <att_write_rsp+0xa>
    9766:	bf00      	nop
    9768:	00008b0b 	.word	0x00008b0b
    976c:	00008d0b 	.word	0x00008d0b

00009770 <att_signed_write_cmd>:
{
    9770:	b5f0      	push	{r4, r5, r6, r7, lr}
    9772:	b085      	sub	sp, #20
    9774:	460d      	mov	r5, r1
	struct bt_conn *conn = att->chan.chan.conn;
    9776:	6806      	ldr	r6, [r0, #0]
	req = (void *)buf->data;
    9778:	460c      	mov	r4, r1
    977a:	f854 3f08 	ldr.w	r3, [r4, #8]!
	handle = sys_le16_to_cpu(req->handle);
    977e:	881f      	ldrh	r7, [r3, #0]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    9780:	2101      	movs	r1, #1
    9782:	4620      	mov	r0, r4
    9784:	f011 fa61 	bl	1ac4a <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    9788:	4629      	mov	r1, r5
    978a:	4630      	mov	r0, r6
    978c:	f003 faf2 	bl	cd74 <bt_smp_sign_verify>
	if (err) {
    9790:	b110      	cbz	r0, 9798 <att_signed_write_cmd+0x28>
		return 0;
    9792:	2000      	movs	r0, #0
}
    9794:	b005      	add	sp, #20
    9796:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    9798:	2101      	movs	r1, #1
    979a:	4620      	mov	r0, r4
    979c:	f011 fa6b 	bl	1ac76 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    97a0:	2102      	movs	r1, #2
    97a2:	4620      	mov	r0, r4
    97a4:	f011 fa67 	bl	1ac76 <net_buf_simple_pull>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    97a8:	68aa      	ldr	r2, [r5, #8]
			     buf->len - sizeof(struct bt_att_signature));
    97aa:	89ab      	ldrh	r3, [r5, #12]
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    97ac:	3b0c      	subs	r3, #12
    97ae:	b2db      	uxtb	r3, r3
    97b0:	9302      	str	r3, [sp, #8]
    97b2:	9201      	str	r2, [sp, #4]
    97b4:	2100      	movs	r1, #0
    97b6:	9100      	str	r1, [sp, #0]
    97b8:	463b      	mov	r3, r7
    97ba:	460a      	mov	r2, r1
    97bc:	4630      	mov	r0, r6
    97be:	f7ff ff81 	bl	96c4 <att_write_rsp>
    97c2:	e7e7      	b.n	9794 <att_signed_write_cmd+0x24>

000097c4 <att_write_cmd>:
{
    97c4:	b530      	push	{r4, r5, lr}
    97c6:	b085      	sub	sp, #20
    97c8:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    97ca:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    97cc:	f101 0008 	add.w	r0, r1, #8
    97d0:	f011 fa61 	bl	1ac96 <net_buf_simple_pull_le16>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    97d4:	68a3      	ldr	r3, [r4, #8]
    97d6:	7b22      	ldrb	r2, [r4, #12]
    97d8:	9202      	str	r2, [sp, #8]
    97da:	9301      	str	r3, [sp, #4]
    97dc:	2100      	movs	r1, #0
    97de:	9100      	str	r1, [sp, #0]
    97e0:	4603      	mov	r3, r0
    97e2:	460a      	mov	r2, r1
    97e4:	4628      	mov	r0, r5
    97e6:	f7ff ff6d 	bl	96c4 <att_write_rsp>
}
    97ea:	b005      	add	sp, #20
    97ec:	bd30      	pop	{r4, r5, pc}

000097ee <att_write_req>:
{
    97ee:	b530      	push	{r4, r5, lr}
    97f0:	b085      	sub	sp, #20
    97f2:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    97f4:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    97f6:	f101 0008 	add.w	r0, r1, #8
    97fa:	f011 fa4c 	bl	1ac96 <net_buf_simple_pull_le16>
			     handle, 0, buf->data, buf->len);
    97fe:	68a3      	ldr	r3, [r4, #8]
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    9800:	7b22      	ldrb	r2, [r4, #12]
    9802:	9202      	str	r2, [sp, #8]
    9804:	9301      	str	r3, [sp, #4]
    9806:	2300      	movs	r3, #0
    9808:	9300      	str	r3, [sp, #0]
    980a:	4603      	mov	r3, r0
    980c:	2213      	movs	r2, #19
    980e:	2112      	movs	r1, #18
    9810:	4628      	mov	r0, r5
    9812:	f7ff ff57 	bl	96c4 <att_write_rsp>
}
    9816:	b005      	add	sp, #20
    9818:	bd30      	pop	{r4, r5, pc}
	...

0000981c <att_read_group_rsp>:
{
    981c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9820:	b086      	sub	sp, #24
    9822:	4604      	mov	r4, r0
    9824:	4688      	mov	r8, r1
    9826:	4616      	mov	r6, r2
    9828:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    982a:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    982c:	2214      	movs	r2, #20
    982e:	2100      	movs	r1, #0
    9830:	a801      	add	r0, sp, #4
    9832:	f020 fca5 	bl	2a180 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    9836:	2201      	movs	r2, #1
    9838:	2111      	movs	r1, #17
    983a:	4628      	mov	r0, r5
    983c:	f7ff fe54 	bl	94e8 <bt_att_create_pdu>
    9840:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    9842:	b328      	cbz	r0, 9890 <att_read_group_rsp+0x74>
	data.att = att;
    9844:	9401      	str	r4, [sp, #4]
	data.uuid = uuid;
    9846:	f8cd 8008 	str.w	r8, [sp, #8]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    984a:	2101      	movs	r1, #1
    984c:	3008      	adds	r0, #8
    984e:	f011 f9c5 	bl	1abdc <net_buf_simple_add>
    9852:	9004      	str	r0, [sp, #16]
	data.rsp->len = 0;
    9854:	2300      	movs	r3, #0
    9856:	7003      	strb	r3, [r0, #0]
	data.group = NULL;
    9858:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    985a:	ab01      	add	r3, sp, #4
    985c:	4a0f      	ldr	r2, [pc, #60]	; (989c <att_read_group_rsp+0x80>)
    985e:	4639      	mov	r1, r7
    9860:	4630      	mov	r0, r6
    9862:	f000 fe85 	bl	a570 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    9866:	9b04      	ldr	r3, [sp, #16]
    9868:	781c      	ldrb	r4, [r3, #0]
    986a:	b13c      	cbz	r4, 987c <att_read_group_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    986c:	4b0c      	ldr	r3, [pc, #48]	; (98a0 <att_read_group_rsp+0x84>)
    986e:	9a03      	ldr	r2, [sp, #12]
    9870:	2104      	movs	r1, #4
    9872:	4628      	mov	r0, r5
    9874:	f7fe fb49 	bl	7f0a <bt_l2cap_send_cb>
	return 0;
    9878:	2400      	movs	r4, #0
    987a:	e00a      	b.n	9892 <att_read_group_rsp+0x76>
		net_buf_unref(data.buf);
    987c:	9803      	ldr	r0, [sp, #12]
    987e:	f011 f961 	bl	1ab44 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    9882:	230a      	movs	r3, #10
    9884:	4632      	mov	r2, r6
    9886:	2110      	movs	r1, #16
    9888:	4628      	mov	r0, r5
    988a:	f7ff fe8f 	bl	95ac <send_err_rsp>
		return 0;
    988e:	e000      	b.n	9892 <att_read_group_rsp+0x76>
		return BT_ATT_ERR_UNLIKELY;
    9890:	240e      	movs	r4, #14
}
    9892:	4620      	mov	r0, r4
    9894:	b006      	add	sp, #24
    9896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    989a:	bf00      	nop
    989c:	00008da5 	.word	0x00008da5
    98a0:	00008d0b 	.word	0x00008d0b

000098a4 <att_read_group_req>:
{
    98a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98a8:	b088      	sub	sp, #32
	struct bt_conn *conn = att->chan.chan.conn;
    98aa:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    98ac:	898b      	ldrh	r3, [r1, #12]
    98ae:	2b06      	cmp	r3, #6
    98b0:	d005      	beq.n	98be <att_read_group_req+0x1a>
    98b2:	2b14      	cmp	r3, #20
    98b4:	d003      	beq.n	98be <att_read_group_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    98b6:	2004      	movs	r0, #4
}
    98b8:	b008      	add	sp, #32
    98ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98be:	460c      	mov	r4, r1
    98c0:	4605      	mov	r5, r0
	req = (void *)buf->data;
    98c2:	4608      	mov	r0, r1
    98c4:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    98c8:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    98ca:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    98ce:	2104      	movs	r1, #4
    98d0:	f011 f9d1 	bl	1ac76 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    98d4:	4621      	mov	r1, r4
    98d6:	a801      	add	r0, sp, #4
    98d8:	f7ff fb3c 	bl	8f54 <uuid_create>
    98dc:	b908      	cbnz	r0, 98e2 <att_read_group_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    98de:	200e      	movs	r0, #14
    98e0:	e7ea      	b.n	98b8 <att_read_group_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    98e2:	f10d 0216 	add.w	r2, sp, #22
    98e6:	4641      	mov	r1, r8
    98e8:	4638      	mov	r0, r7
    98ea:	f7ff f8c4 	bl	8a76 <range_is_valid>
    98ee:	b1f0      	cbz	r0, 992e <att_read_group_req+0x8a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    98f0:	2300      	movs	r3, #0
    98f2:	f88d 3018 	strb.w	r3, [sp, #24]
    98f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    98fa:	f8ad 301a 	strh.w	r3, [sp, #26]
    98fe:	a906      	add	r1, sp, #24
    9900:	a801      	add	r0, sp, #4
    9902:	f7fa fdee 	bl	44e2 <bt_uuid_cmp>
    9906:	b158      	cbz	r0, 9920 <att_read_group_req+0x7c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    9908:	2300      	movs	r3, #0
    990a:	f88d 301c 	strb.w	r3, [sp, #28]
    990e:	f642 0301 	movw	r3, #10241	; 0x2801
    9912:	f8ad 301e 	strh.w	r3, [sp, #30]
    9916:	a907      	add	r1, sp, #28
    9918:	a801      	add	r0, sp, #4
    991a:	f7fa fde2 	bl	44e2 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    991e:	b978      	cbnz	r0, 9940 <att_read_group_req+0x9c>
	return att_read_group_rsp(att, &u.uuid, start_handle, end_handle);
    9920:	4643      	mov	r3, r8
    9922:	463a      	mov	r2, r7
    9924:	a901      	add	r1, sp, #4
    9926:	4628      	mov	r0, r5
    9928:	f7ff ff78 	bl	981c <att_read_group_rsp>
    992c:	e7c4      	b.n	98b8 <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, err_handle,
    992e:	2301      	movs	r3, #1
    9930:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    9934:	2110      	movs	r1, #16
    9936:	4630      	mov	r0, r6
    9938:	f7ff fe38 	bl	95ac <send_err_rsp>
		return 0;
    993c:	2000      	movs	r0, #0
    993e:	e7bb      	b.n	98b8 <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    9940:	2310      	movs	r3, #16
    9942:	463a      	mov	r2, r7
    9944:	4619      	mov	r1, r3
    9946:	4630      	mov	r0, r6
    9948:	f7ff fe30 	bl	95ac <send_err_rsp>
		return 0;
    994c:	2000      	movs	r0, #0
    994e:	e7b3      	b.n	98b8 <att_read_group_req+0x14>

00009950 <att_read_mult_req>:
{
    9950:	b570      	push	{r4, r5, r6, lr}
    9952:	b086      	sub	sp, #24
    9954:	4605      	mov	r5, r0
    9956:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    9958:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    995a:	2214      	movs	r2, #20
    995c:	2100      	movs	r1, #0
    995e:	a801      	add	r0, sp, #4
    9960:	f020 fc0e 	bl	2a180 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    9964:	2200      	movs	r2, #0
    9966:	210f      	movs	r1, #15
    9968:	4630      	mov	r0, r6
    996a:	f7ff fdbd 	bl	94e8 <bt_att_create_pdu>
    996e:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    9970:	b348      	cbz	r0, 99c6 <att_read_mult_req+0x76>
	data.att = att;
    9972:	9501      	str	r5, [sp, #4]
	while (buf->len >= sizeof(u16_t)) {
    9974:	89a3      	ldrh	r3, [r4, #12]
    9976:	2b01      	cmp	r3, #1
    9978:	d91c      	bls.n	99b4 <att_read_mult_req+0x64>
		handle = net_buf_pull_le16(buf);
    997a:	f104 0008 	add.w	r0, r4, #8
    997e:	f011 f98a 	bl	1ac96 <net_buf_simple_pull_le16>
    9982:	4605      	mov	r5, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    9984:	2301      	movs	r3, #1
    9986:	f88d 3014 	strb.w	r3, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    998a:	ab01      	add	r3, sp, #4
    998c:	4a0f      	ldr	r2, [pc, #60]	; (99cc <att_read_mult_req+0x7c>)
    998e:	4601      	mov	r1, r0
    9990:	f000 fdee 	bl	a570 <bt_gatt_foreach_attr>
		if (data.err) {
    9994:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9998:	2b00      	cmp	r3, #0
    999a:	d0eb      	beq.n	9974 <att_read_mult_req+0x24>
			net_buf_unref(data.buf);
    999c:	9803      	ldr	r0, [sp, #12]
    999e:	f011 f8d1 	bl	1ab44 <net_buf_unref>
			send_err_rsp(conn, BT_ATT_OP_READ_MULT_REQ, handle,
    99a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    99a6:	462a      	mov	r2, r5
    99a8:	210e      	movs	r1, #14
    99aa:	4630      	mov	r0, r6
    99ac:	f7ff fdfe 	bl	95ac <send_err_rsp>
			return 0;
    99b0:	2000      	movs	r0, #0
    99b2:	e006      	b.n	99c2 <att_read_mult_req+0x72>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    99b4:	4b06      	ldr	r3, [pc, #24]	; (99d0 <att_read_mult_req+0x80>)
    99b6:	9a03      	ldr	r2, [sp, #12]
    99b8:	2104      	movs	r1, #4
    99ba:	4630      	mov	r0, r6
    99bc:	f7fe faa5 	bl	7f0a <bt_l2cap_send_cb>
	return 0;
    99c0:	2000      	movs	r0, #0
}
    99c2:	b006      	add	sp, #24
    99c4:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
    99c6:	200e      	movs	r0, #14
    99c8:	e7fb      	b.n	99c2 <att_read_mult_req+0x72>
    99ca:	bf00      	nop
    99cc:	00008bd5 	.word	0x00008bd5
    99d0:	00008d0b 	.word	0x00008d0b

000099d4 <att_read_rsp>:
{
    99d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99d8:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    99da:	6807      	ldr	r7, [r0, #0]
	if (!handle) {
    99dc:	b923      	cbnz	r3, 99e8 <att_read_rsp+0x14>
		return BT_ATT_ERR_INVALID_HANDLE;
    99de:	2401      	movs	r4, #1
}
    99e0:	4620      	mov	r0, r4
    99e2:	b006      	add	sp, #24
    99e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    99e8:	461d      	mov	r5, r3
    99ea:	4616      	mov	r6, r2
    99ec:	4688      	mov	r8, r1
    99ee:	4604      	mov	r4, r0
	memset(&data, 0, sizeof(data));
    99f0:	2214      	movs	r2, #20
    99f2:	2100      	movs	r1, #0
    99f4:	a801      	add	r0, sp, #4
    99f6:	f020 fbc3 	bl	2a180 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    99fa:	2200      	movs	r2, #0
    99fc:	4631      	mov	r1, r6
    99fe:	4638      	mov	r0, r7
    9a00:	f7ff fd72 	bl	94e8 <bt_att_create_pdu>
    9a04:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    9a06:	b318      	cbz	r0, 9a50 <att_read_rsp+0x7c>
	data.att = att;
    9a08:	9401      	str	r4, [sp, #4]
	data.offset = offset;
    9a0a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    9a0e:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9a12:	2301      	movs	r3, #1
    9a14:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9a18:	ab01      	add	r3, sp, #4
    9a1a:	4a0e      	ldr	r2, [pc, #56]	; (9a54 <att_read_rsp+0x80>)
    9a1c:	4629      	mov	r1, r5
    9a1e:	4628      	mov	r0, r5
    9a20:	f000 fda6 	bl	a570 <bt_gatt_foreach_attr>
	if (data.err) {
    9a24:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9a28:	b934      	cbnz	r4, 9a38 <att_read_rsp+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9a2a:	4b0b      	ldr	r3, [pc, #44]	; (9a58 <att_read_rsp+0x84>)
    9a2c:	9a03      	ldr	r2, [sp, #12]
    9a2e:	2104      	movs	r1, #4
    9a30:	4638      	mov	r0, r7
    9a32:	f7fe fa6a 	bl	7f0a <bt_l2cap_send_cb>
	return 0;
    9a36:	e7d3      	b.n	99e0 <att_read_rsp+0xc>
		net_buf_unref(data.buf);
    9a38:	9803      	ldr	r0, [sp, #12]
    9a3a:	f011 f883 	bl	1ab44 <net_buf_unref>
		send_err_rsp(conn, op, handle, data.err);
    9a3e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9a42:	462a      	mov	r2, r5
    9a44:	4641      	mov	r1, r8
    9a46:	4638      	mov	r0, r7
    9a48:	f7ff fdb0 	bl	95ac <send_err_rsp>
		return 0;
    9a4c:	2400      	movs	r4, #0
    9a4e:	e7c7      	b.n	99e0 <att_read_rsp+0xc>
		return BT_ATT_ERR_UNLIKELY;
    9a50:	240e      	movs	r4, #14
    9a52:	e7c5      	b.n	99e0 <att_read_rsp+0xc>
    9a54:	00008bd5 	.word	0x00008bd5
    9a58:	00008d0b 	.word	0x00008d0b

00009a5c <att_read_blob_req>:
{
    9a5c:	b500      	push	{lr}
    9a5e:	b083      	sub	sp, #12
	req = (void *)buf->data;
    9a60:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    9a62:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
    9a64:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    9a66:	9200      	str	r2, [sp, #0]
    9a68:	220d      	movs	r2, #13
    9a6a:	210c      	movs	r1, #12
    9a6c:	f7ff ffb2 	bl	99d4 <att_read_rsp>
}
    9a70:	b003      	add	sp, #12
    9a72:	f85d fb04 	ldr.w	pc, [sp], #4

00009a76 <att_read_req>:
{
    9a76:	b500      	push	{lr}
    9a78:	b083      	sub	sp, #12
	req = (void *)buf->data;
    9a7a:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    9a7c:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    9a7e:	2200      	movs	r2, #0
    9a80:	9200      	str	r2, [sp, #0]
    9a82:	220b      	movs	r2, #11
    9a84:	210a      	movs	r1, #10
    9a86:	f7ff ffa5 	bl	99d4 <att_read_rsp>
}
    9a8a:	b003      	add	sp, #12
    9a8c:	f85d fb04 	ldr.w	pc, [sp], #4

00009a90 <att_read_type_rsp>:
{
    9a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a94:	b086      	sub	sp, #24
    9a96:	4604      	mov	r4, r0
    9a98:	4688      	mov	r8, r1
    9a9a:	4616      	mov	r6, r2
    9a9c:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    9a9e:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    9aa0:	2218      	movs	r2, #24
    9aa2:	2100      	movs	r1, #0
    9aa4:	4668      	mov	r0, sp
    9aa6:	f020 fb6b 	bl	2a180 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    9aaa:	2201      	movs	r2, #1
    9aac:	2109      	movs	r1, #9
    9aae:	4628      	mov	r0, r5
    9ab0:	f7ff fd1a 	bl	94e8 <bt_att_create_pdu>
    9ab4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9ab6:	b340      	cbz	r0, 9b0a <att_read_type_rsp+0x7a>
	data.att = att;
    9ab8:	9400      	str	r4, [sp, #0]
	data.uuid = uuid;
    9aba:	f8cd 8004 	str.w	r8, [sp, #4]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9abe:	2101      	movs	r1, #1
    9ac0:	3008      	adds	r0, #8
    9ac2:	f011 f88b 	bl	1abdc <net_buf_simple_add>
    9ac6:	9003      	str	r0, [sp, #12]
	data.rsp->len = 0;
    9ac8:	2300      	movs	r3, #0
    9aca:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9acc:	230a      	movs	r3, #10
    9ace:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9ad2:	466b      	mov	r3, sp
    9ad4:	4a0f      	ldr	r2, [pc, #60]	; (9b14 <att_read_type_rsp+0x84>)
    9ad6:	4639      	mov	r1, r7
    9ad8:	4630      	mov	r0, r6
    9ada:	f000 fd49 	bl	a570 <bt_gatt_foreach_attr>
	if (data.err) {
    9ade:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9ae2:	b934      	cbnz	r4, 9af2 <att_read_type_rsp+0x62>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9ae4:	4b0c      	ldr	r3, [pc, #48]	; (9b18 <att_read_type_rsp+0x88>)
    9ae6:	9a02      	ldr	r2, [sp, #8]
    9ae8:	2104      	movs	r1, #4
    9aea:	4628      	mov	r0, r5
    9aec:	f7fe fa0d 	bl	7f0a <bt_l2cap_send_cb>
	return 0;
    9af0:	e00c      	b.n	9b0c <att_read_type_rsp+0x7c>
		net_buf_unref(data.buf);
    9af2:	9802      	ldr	r0, [sp, #8]
    9af4:	f011 f826 	bl	1ab44 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, start_handle,
    9af8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9afc:	4632      	mov	r2, r6
    9afe:	2108      	movs	r1, #8
    9b00:	4628      	mov	r0, r5
    9b02:	f7ff fd53 	bl	95ac <send_err_rsp>
		return 0;
    9b06:	2400      	movs	r4, #0
    9b08:	e000      	b.n	9b0c <att_read_type_rsp+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    9b0a:	240e      	movs	r4, #14
}
    9b0c:	4620      	mov	r0, r4
    9b0e:	b006      	add	sp, #24
    9b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b14:	00008e93 	.word	0x00008e93
    9b18:	00008d0b 	.word	0x00008d0b

00009b1c <att_read_type_req>:
{
    9b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b20:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    9b22:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    9b24:	898b      	ldrh	r3, [r1, #12]
    9b26:	2b06      	cmp	r3, #6
    9b28:	d005      	beq.n	9b36 <att_read_type_req+0x1a>
    9b2a:	2b14      	cmp	r3, #20
    9b2c:	d003      	beq.n	9b36 <att_read_type_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    9b2e:	2004      	movs	r0, #4
}
    9b30:	b006      	add	sp, #24
    9b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b36:	460c      	mov	r4, r1
    9b38:	4605      	mov	r5, r0
	req = (void *)buf->data;
    9b3a:	4608      	mov	r0, r1
    9b3c:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    9b40:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9b42:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    9b46:	2104      	movs	r1, #4
    9b48:	f011 f895 	bl	1ac76 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    9b4c:	4621      	mov	r1, r4
    9b4e:	a801      	add	r0, sp, #4
    9b50:	f7ff fa00 	bl	8f54 <uuid_create>
    9b54:	b908      	cbnz	r0, 9b5a <att_read_type_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    9b56:	200e      	movs	r0, #14
    9b58:	e7ea      	b.n	9b30 <att_read_type_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9b5a:	f10d 0216 	add.w	r2, sp, #22
    9b5e:	4641      	mov	r1, r8
    9b60:	4638      	mov	r0, r7
    9b62:	f7fe ff88 	bl	8a76 <range_is_valid>
    9b66:	b130      	cbz	r0, 9b76 <att_read_type_req+0x5a>
	return att_read_type_rsp(att, &u.uuid, start_handle, end_handle);
    9b68:	4643      	mov	r3, r8
    9b6a:	463a      	mov	r2, r7
    9b6c:	a901      	add	r1, sp, #4
    9b6e:	4628      	mov	r0, r5
    9b70:	f7ff ff8e 	bl	9a90 <att_read_type_rsp>
    9b74:	e7dc      	b.n	9b30 <att_read_type_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, err_handle,
    9b76:	2301      	movs	r3, #1
    9b78:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    9b7c:	2108      	movs	r1, #8
    9b7e:	4630      	mov	r0, r6
    9b80:	f7ff fd14 	bl	95ac <send_err_rsp>
		return 0;
    9b84:	2000      	movs	r0, #0
    9b86:	e7d3      	b.n	9b30 <att_read_type_req+0x14>

00009b88 <att_find_type_rsp>:
{
    9b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b8c:	b086      	sub	sp, #24
    9b8e:	4604      	mov	r4, r0
    9b90:	460e      	mov	r6, r1
    9b92:	4617      	mov	r7, r2
    9b94:	4698      	mov	r8, r3
	struct bt_conn *conn = att->chan.chan.conn;
    9b96:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    9b98:	2214      	movs	r2, #20
    9b9a:	2100      	movs	r1, #0
    9b9c:	a801      	add	r0, sp, #4
    9b9e:	f020 faef 	bl	2a180 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    9ba2:	2200      	movs	r2, #0
    9ba4:	2107      	movs	r1, #7
    9ba6:	4628      	mov	r0, r5
    9ba8:	f7ff fc9e 	bl	94e8 <bt_att_create_pdu>
    9bac:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9bae:	b338      	cbz	r0, 9c00 <att_find_type_rsp+0x78>
	data.att = att;
    9bb0:	9401      	str	r4, [sp, #4]
	data.group = NULL;
    9bb2:	2300      	movs	r3, #0
    9bb4:	9303      	str	r3, [sp, #12]
	data.value = value;
    9bb6:	f8cd 8010 	str.w	r8, [sp, #16]
	data.value_len = value_len;
    9bba:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    9bbe:	f88d 3014 	strb.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9bc2:	230a      	movs	r3, #10
    9bc4:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9bc8:	ab01      	add	r3, sp, #4
    9bca:	4a10      	ldr	r2, [pc, #64]	; (9c0c <att_find_type_rsp+0x84>)
    9bcc:	4639      	mov	r1, r7
    9bce:	4630      	mov	r0, r6
    9bd0:	f000 fcce 	bl	a570 <bt_gatt_foreach_attr>
	if (data.err) {
    9bd4:	f89d 4015 	ldrb.w	r4, [sp, #21]
    9bd8:	b934      	cbnz	r4, 9be8 <att_find_type_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9bda:	4b0d      	ldr	r3, [pc, #52]	; (9c10 <att_find_type_rsp+0x88>)
    9bdc:	9a02      	ldr	r2, [sp, #8]
    9bde:	2104      	movs	r1, #4
    9be0:	4628      	mov	r0, r5
    9be2:	f7fe f992 	bl	7f0a <bt_l2cap_send_cb>
	return 0;
    9be6:	e00c      	b.n	9c02 <att_find_type_rsp+0x7a>
		net_buf_unref(data.buf);
    9be8:	9802      	ldr	r0, [sp, #8]
    9bea:	f010 ffab 	bl	1ab44 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    9bee:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9bf2:	4632      	mov	r2, r6
    9bf4:	2106      	movs	r1, #6
    9bf6:	4628      	mov	r0, r5
    9bf8:	f7ff fcd8 	bl	95ac <send_err_rsp>
		return 0;
    9bfc:	2400      	movs	r4, #0
    9bfe:	e000      	b.n	9c02 <att_find_type_rsp+0x7a>
		return BT_ATT_ERR_UNLIKELY;
    9c00:	240e      	movs	r4, #14
}
    9c02:	4620      	mov	r0, r4
    9c04:	b006      	add	sp, #24
    9c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c0a:	bf00      	nop
    9c0c:	0000903b 	.word	0x0000903b
    9c10:	00008d0b 	.word	0x00008d0b

00009c14 <att_find_type_req>:
{
    9c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9c18:	b084      	sub	sp, #16
    9c1a:	4605      	mov	r5, r0
    9c1c:	460f      	mov	r7, r1
	struct bt_conn *conn = att->chan.chan.conn;
    9c1e:	f8d0 9000 	ldr.w	r9, [r0]
	req = (void *)buf->data;
    9c22:	4608      	mov	r0, r1
    9c24:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    9c28:	881c      	ldrh	r4, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9c2a:	885e      	ldrh	r6, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    9c2c:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    9c30:	2106      	movs	r1, #6
    9c32:	f011 f820 	bl	1ac76 <net_buf_simple_pull>
    9c36:	4682      	mov	sl, r0
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9c38:	f10d 020e 	add.w	r2, sp, #14
    9c3c:	4631      	mov	r1, r6
    9c3e:	4620      	mov	r0, r4
    9c40:	f7fe ff19 	bl	8a76 <range_is_valid>
    9c44:	b160      	cbz	r0, 9c60 <att_find_type_req+0x4c>
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
    9c46:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
    9c4a:	d012      	beq.n	9c72 <att_find_type_req+0x5e>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    9c4c:	230a      	movs	r3, #10
    9c4e:	4622      	mov	r2, r4
    9c50:	2106      	movs	r1, #6
    9c52:	4648      	mov	r0, r9
    9c54:	f7ff fcaa 	bl	95ac <send_err_rsp>
		return 0;
    9c58:	2000      	movs	r0, #0
}
    9c5a:	b004      	add	sp, #16
    9c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
    9c60:	2301      	movs	r3, #1
    9c62:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9c66:	2106      	movs	r1, #6
    9c68:	4648      	mov	r0, r9
    9c6a:	f7ff fc9f 	bl	95ac <send_err_rsp>
		return 0;
    9c6e:	2000      	movs	r0, #0
    9c70:	e7f3      	b.n	9c5a <att_find_type_req+0x46>
	return att_find_type_rsp(att, start_handle, end_handle, value,
    9c72:	7b3b      	ldrb	r3, [r7, #12]
    9c74:	9300      	str	r3, [sp, #0]
    9c76:	4653      	mov	r3, sl
    9c78:	4632      	mov	r2, r6
    9c7a:	4621      	mov	r1, r4
    9c7c:	4628      	mov	r0, r5
    9c7e:	f7ff ff83 	bl	9b88 <att_find_type_rsp>
    9c82:	e7ea      	b.n	9c5a <att_find_type_req+0x46>

00009c84 <att_find_info_rsp>:
{
    9c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c86:	b085      	sub	sp, #20
    9c88:	4605      	mov	r5, r0
    9c8a:	460e      	mov	r6, r1
    9c8c:	4617      	mov	r7, r2
	struct bt_conn *conn = att->chan.chan.conn;
    9c8e:	6804      	ldr	r4, [r0, #0]
	memset(&data, 0, sizeof(data));
    9c90:	2210      	movs	r2, #16
    9c92:	2100      	movs	r1, #0
    9c94:	4668      	mov	r0, sp
    9c96:	f020 fa73 	bl	2a180 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    9c9a:	2200      	movs	r2, #0
    9c9c:	2105      	movs	r1, #5
    9c9e:	4620      	mov	r0, r4
    9ca0:	f7ff fc22 	bl	94e8 <bt_att_create_pdu>
    9ca4:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    9ca6:	b1e8      	cbz	r0, 9ce4 <att_find_info_rsp+0x60>
	data.att = att;
    9ca8:	ab04      	add	r3, sp, #16
    9caa:	f843 5d10 	str.w	r5, [r3, #-16]!
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9cae:	4a0e      	ldr	r2, [pc, #56]	; (9ce8 <att_find_info_rsp+0x64>)
    9cb0:	4639      	mov	r1, r7
    9cb2:	4630      	mov	r0, r6
    9cb4:	f000 fc5c 	bl	a570 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    9cb8:	9b02      	ldr	r3, [sp, #8]
    9cba:	b143      	cbz	r3, 9cce <att_find_info_rsp+0x4a>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9cbc:	4b0b      	ldr	r3, [pc, #44]	; (9cec <att_find_info_rsp+0x68>)
    9cbe:	9a01      	ldr	r2, [sp, #4]
    9cc0:	2104      	movs	r1, #4
    9cc2:	4620      	mov	r0, r4
    9cc4:	f7fe f921 	bl	7f0a <bt_l2cap_send_cb>
	return 0;
    9cc8:	2000      	movs	r0, #0
}
    9cca:	b005      	add	sp, #20
    9ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
    9cce:	9801      	ldr	r0, [sp, #4]
    9cd0:	f010 ff38 	bl	1ab44 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, start_handle,
    9cd4:	230a      	movs	r3, #10
    9cd6:	4632      	mov	r2, r6
    9cd8:	2104      	movs	r1, #4
    9cda:	4620      	mov	r0, r4
    9cdc:	f7ff fc66 	bl	95ac <send_err_rsp>
		return 0;
    9ce0:	2000      	movs	r0, #0
    9ce2:	e7f2      	b.n	9cca <att_find_info_rsp+0x46>
		return BT_ATT_ERR_UNLIKELY;
    9ce4:	200e      	movs	r0, #14
    9ce6:	e7f0      	b.n	9cca <att_find_info_rsp+0x46>
    9ce8:	00008f8b 	.word	0x00008f8b
    9cec:	00008d0b 	.word	0x00008d0b

00009cf0 <att_find_info_req>:
{
    9cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cf2:	b083      	sub	sp, #12
    9cf4:	4604      	mov	r4, r0
	struct bt_conn *conn = att->chan.chan.conn;
    9cf6:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    9cf8:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    9cfa:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9cfc:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9cfe:	f10d 0206 	add.w	r2, sp, #6
    9d02:	4631      	mov	r1, r6
    9d04:	4628      	mov	r0, r5
    9d06:	f7fe feb6 	bl	8a76 <range_is_valid>
    9d0a:	b130      	cbz	r0, 9d1a <att_find_info_req+0x2a>
	return att_find_info_rsp(att, start_handle, end_handle);
    9d0c:	4632      	mov	r2, r6
    9d0e:	4629      	mov	r1, r5
    9d10:	4620      	mov	r0, r4
    9d12:	f7ff ffb7 	bl	9c84 <att_find_info_rsp>
}
    9d16:	b003      	add	sp, #12
    9d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, err_handle,
    9d1a:	2301      	movs	r3, #1
    9d1c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9d20:	2104      	movs	r1, #4
    9d22:	4638      	mov	r0, r7
    9d24:	f7ff fc42 	bl	95ac <send_err_rsp>
		return 0;
    9d28:	2000      	movs	r0, #0
    9d2a:	e7f4      	b.n	9d16 <att_find_info_req+0x26>

00009d2c <bt_att_init>:

void bt_att_init(void)
{
    9d2c:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    9d2e:	4803      	ldr	r0, [pc, #12]	; (9d3c <bt_att_init+0x10>)
    9d30:	f7fd ff44 	bl	7bbc <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
    9d34:	f000 fb3c 	bl	a3b0 <bt_gatt_init>
    9d38:	bd08      	pop	{r3, pc}
    9d3a:	bf00      	nop
    9d3c:	2000bad8 	.word	0x2000bad8

00009d40 <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    9d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    9d42:	2800      	cmp	r0, #0
    9d44:	d043      	beq.n	9dce <bt_att_send+0x8e>
    9d46:	4606      	mov	r6, r0
    9d48:	2900      	cmp	r1, #0
    9d4a:	d043      	beq.n	9dd4 <bt_att_send+0x94>
    9d4c:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    9d4e:	f7fe ff7b 	bl	8c48 <att_chan_get>
	if (!att) {
    9d52:	4605      	mov	r5, r0
    9d54:	2800      	cmp	r0, #0
    9d56:	d040      	beq.n	9dda <bt_att_send+0x9a>
		return -ENOTCONN;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    9d58:	f100 07d4 	add.w	r7, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    9d5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9d60:	4638      	mov	r0, r7
    9d62:	f01f fa4d 	bl	29200 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9d66:	682b      	ldr	r3, [r5, #0]
    9d68:	7b1b      	ldrb	r3, [r3, #12]
    9d6a:	2b03      	cmp	r3, #3
    9d6c:	d011      	beq.n	9d92 <bt_att_send+0x52>
    9d6e:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    9d70:	b1e3      	cbz	r3, 9dac <bt_att_send+0x6c>
		BT_WARN("Disconnected");
		k_sem_give(&att->tx_sem);
		return -ENOTCONN;
	}

	hdr = (void *)buf->data;
    9d72:	68a3      	ldr	r3, [r4, #8]

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    9d74:	781b      	ldrb	r3, [r3, #0]
    9d76:	2bd2      	cmp	r3, #210	; 0xd2
    9d78:	d01e      	beq.n	9db8 <bt_att_send+0x78>
			k_sem_give(&att->tx_sem);
			return err;
		}
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));
    9d7a:	4620      	mov	r0, r4
    9d7c:	f7fe ff0c 	bl	8b98 <att_cb>
    9d80:	4603      	mov	r3, r0
    9d82:	4622      	mov	r2, r4
    9d84:	2104      	movs	r1, #4
    9d86:	4630      	mov	r0, r6
    9d88:	f7fe f8bf 	bl	7f0a <bt_l2cap_send_cb>

	return 0;
    9d8c:	2500      	movs	r5, #0
}
    9d8e:	4628      	mov	r0, r5
    9d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9d92:	f3bf 8f5b 	dmb	ish
    9d96:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    9d9a:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9d9e:	f013 0f04 	tst.w	r3, #4
    9da2:	d101      	bne.n	9da8 <bt_att_send+0x68>
    9da4:	2301      	movs	r3, #1
    9da6:	e7e3      	b.n	9d70 <bt_att_send+0x30>
    9da8:	2300      	movs	r3, #0
    9daa:	e7e1      	b.n	9d70 <bt_att_send+0x30>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    9dac:	4638      	mov	r0, r7
    9dae:	f01f fa14 	bl	291da <_impl_k_sem_give>
		return -ENOTCONN;
    9db2:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    9db6:	e7ea      	b.n	9d8e <bt_att_send+0x4e>
		err = bt_smp_sign(conn, buf);
    9db8:	4621      	mov	r1, r4
    9dba:	4630      	mov	r0, r6
    9dbc:	f003 f81a 	bl	cdf4 <bt_smp_sign>
		if (err) {
    9dc0:	4605      	mov	r5, r0
    9dc2:	2800      	cmp	r0, #0
    9dc4:	d0d9      	beq.n	9d7a <bt_att_send+0x3a>
    9dc6:	4638      	mov	r0, r7
    9dc8:	f01f fa07 	bl	291da <_impl_k_sem_give>
			return err;
    9dcc:	e7df      	b.n	9d8e <bt_att_send+0x4e>
		return -EINVAL;
    9dce:	f06f 0515 	mvn.w	r5, #21
    9dd2:	e7dc      	b.n	9d8e <bt_att_send+0x4e>
    9dd4:	f06f 0515 	mvn.w	r5, #21
    9dd8:	e7d9      	b.n	9d8e <bt_att_send+0x4e>
		return -ENOTCONN;
    9dda:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    9dde:	e7d6      	b.n	9d8e <bt_att_send+0x4e>

00009de0 <bt_att_req_send>:
{
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    9de0:	b1e0      	cbz	r0, 9e1c <bt_att_req_send+0x3c>
    9de2:	b1f1      	cbz	r1, 9e22 <bt_att_req_send+0x42>
{
    9de4:	b510      	push	{r4, lr}
    9de6:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    9de8:	f7fe ff2e 	bl	8c48 <att_chan_get>
	if (!att) {
    9dec:	b1e0      	cbz	r0, 9e28 <bt_att_req_send+0x48>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    9dee:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    9df2:	b17a      	cbz	r2, 9e14 <bt_att_req_send+0x34>
	node->next = NULL;
    9df4:	2200      	movs	r2, #0
    9df6:	6022      	str	r2, [r4, #0]
	if (!list->tail) {
    9df8:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    9dfc:	b122      	cbz	r2, 9e08 <bt_att_req_send+0x28>
		list->tail->next = node;
    9dfe:	6014      	str	r4, [r2, #0]
		list->tail = node;
    9e00:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    9e04:	2000      	movs	r0, #0
    9e06:	bd10      	pop	{r4, pc}
		list->tail = node;
    9e08:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		list->head = node;
    9e0c:	f8c0 40a4 	str.w	r4, [r0, #164]	; 0xa4
    9e10:	2000      	movs	r0, #0
    9e12:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    9e14:	4621      	mov	r1, r4
    9e16:	f7ff f9ad 	bl	9174 <att_send_req>
    9e1a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    9e1c:	f06f 0015 	mvn.w	r0, #21
    9e20:	4770      	bx	lr
    9e22:	f06f 0015 	mvn.w	r0, #21
    9e26:	4770      	bx	lr
		return -ENOTCONN;
    9e28:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    9e2c:	bd10      	pop	{r4, pc}

00009e2e <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    9e2e:	4770      	bx	lr

00009e30 <gatt_register>:
};

static struct bt_gatt_service gatt_svc = BT_GATT_SERVICE(gatt_attrs);

static int gatt_register(struct bt_gatt_service *svc)
{
    9e30:	b430      	push	{r4, r5}
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
    9e32:	6804      	ldr	r4, [r0, #0]
	u16_t count = svc->attr_count;
    9e34:	8883      	ldrh	r3, [r0, #4]
	return (!list->head);
    9e36:	4a1c      	ldr	r2, [pc, #112]	; (9ea8 <gatt_register+0x78>)
    9e38:	6812      	ldr	r2, [r2, #0]

	if (sys_slist_is_empty(&db)) {
    9e3a:	b172      	cbz	r2, 9e5a <gatt_register+0x2a>
	return list->tail;
    9e3c:	4a1a      	ldr	r2, [pc, #104]	; (9ea8 <gatt_register+0x78>)
    9e3e:	6852      	ldr	r2, [r2, #4]
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    9e40:	b14a      	cbz	r2, 9e56 <gatt_register+0x26>
    9e42:	3a08      	subs	r2, #8
	handle = last->attrs[last->attr_count - 1].handle;
    9e44:	6815      	ldr	r5, [r2, #0]
    9e46:	8892      	ldrh	r2, [r2, #4]
    9e48:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9e4c:	0091      	lsls	r1, r2, #2
    9e4e:	3914      	subs	r1, #20
    9e50:	4429      	add	r1, r5
    9e52:	8a0a      	ldrh	r2, [r1, #16]
    9e54:	e009      	b.n	9e6a <gatt_register+0x3a>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    9e56:	2200      	movs	r2, #0
    9e58:	e7f4      	b.n	9e44 <gatt_register+0x14>
		handle = 0;
    9e5a:	2200      	movs	r2, #0
    9e5c:	e005      	b.n	9e6a <gatt_register+0x3a>
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
		if (!attrs->handle) {
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
		} else if (attrs->handle > handle) {
    9e5e:	428a      	cmp	r2, r1
    9e60:	d21e      	bcs.n	9ea0 <gatt_register+0x70>
			/* Use existing handle if valid */
			handle = attrs->handle;
    9e62:	460a      	mov	r2, r1
	for (; attrs && count; attrs++, count--) {
    9e64:	3414      	adds	r4, #20
    9e66:	3b01      	subs	r3, #1
    9e68:	b29b      	uxth	r3, r3
    9e6a:	b13c      	cbz	r4, 9e7c <gatt_register+0x4c>
    9e6c:	b133      	cbz	r3, 9e7c <gatt_register+0x4c>
		if (!attrs->handle) {
    9e6e:	8a21      	ldrh	r1, [r4, #16]
    9e70:	2900      	cmp	r1, #0
    9e72:	d1f4      	bne.n	9e5e <gatt_register+0x2e>
			attrs->handle = ++handle;
    9e74:	3201      	adds	r2, #1
    9e76:	b292      	uxth	r2, r2
    9e78:	8222      	strh	r2, [r4, #16]
    9e7a:	e7f3      	b.n	9e64 <gatt_register+0x34>
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
		       attrs, attrs->handle, bt_uuid_str(attrs->uuid),
		       attrs->perm);
	}

	sys_slist_append(&db, &svc->node);
    9e7c:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    9e80:	2200      	movs	r2, #0
    9e82:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    9e84:	4a08      	ldr	r2, [pc, #32]	; (9ea8 <gatt_register+0x78>)
    9e86:	6852      	ldr	r2, [r2, #4]
    9e88:	b12a      	cbz	r2, 9e96 <gatt_register+0x66>
		list->tail->next = node;
    9e8a:	6013      	str	r3, [r2, #0]
		list->tail = node;
    9e8c:	4a06      	ldr	r2, [pc, #24]	; (9ea8 <gatt_register+0x78>)
    9e8e:	6053      	str	r3, [r2, #4]

	return 0;
    9e90:	2000      	movs	r0, #0
}
    9e92:	bc30      	pop	{r4, r5}
    9e94:	4770      	bx	lr
		list->tail = node;
    9e96:	4a04      	ldr	r2, [pc, #16]	; (9ea8 <gatt_register+0x78>)
    9e98:	6053      	str	r3, [r2, #4]
		list->head = node;
    9e9a:	6013      	str	r3, [r2, #0]
	return 0;
    9e9c:	2000      	movs	r0, #0
    9e9e:	e7f8      	b.n	9e92 <gatt_register+0x62>
			return -EINVAL;
    9ea0:	f06f 0015 	mvn.w	r0, #21
    9ea4:	e7f5      	b.n	9e92 <gatt_register+0x62>
    9ea6:	bf00      	nop
    9ea8:	2000083c 	.word	0x2000083c

00009eac <update_range>:
	k_delayed_work_init(&gatt_sc.work, sc_process);
}

static bool update_range(u16_t *start, u16_t *end, u16_t new_start,
			 u16_t new_end)
{
    9eac:	b430      	push	{r4, r5}
	BT_DBG("start 0x%04x end 0x%04x new_start 0x%04x new_end 0x%04x",
	       *start, *end, new_start, new_end);

	/* Check if inside existing range */
	if (new_start >= *start && new_end <= *end) {
    9eae:	8804      	ldrh	r4, [r0, #0]
    9eb0:	4294      	cmp	r4, r2
    9eb2:	d802      	bhi.n	9eba <update_range+0xe>
    9eb4:	880d      	ldrh	r5, [r1, #0]
    9eb6:	429d      	cmp	r5, r3
    9eb8:	d209      	bcs.n	9ece <update_range+0x22>
		return false;
	}

	/* Update range */
	if (*start > new_start) {
    9eba:	4294      	cmp	r4, r2
    9ebc:	d900      	bls.n	9ec0 <update_range+0x14>
		*start = new_start;
    9ebe:	8002      	strh	r2, [r0, #0]
	}

	if (*end < new_end) {
    9ec0:	880a      	ldrh	r2, [r1, #0]
    9ec2:	4293      	cmp	r3, r2
    9ec4:	d905      	bls.n	9ed2 <update_range+0x26>
		*end = new_end;
    9ec6:	800b      	strh	r3, [r1, #0]
	}

	return true;
    9ec8:	2001      	movs	r0, #1
}
    9eca:	bc30      	pop	{r4, r5}
    9ecc:	4770      	bx	lr
		return false;
    9ece:	2000      	movs	r0, #0
    9ed0:	e7fb      	b.n	9eca <update_range+0x1e>
	return true;
    9ed2:	2001      	movs	r0, #1
    9ed4:	e7f9      	b.n	9eca <update_range+0x1e>

00009ed6 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    9ed6:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    9ed8:	2000      	movs	r0, #0
    9eda:	4770      	bx	lr

00009edc <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    9edc:	b510      	push	{r4, lr}
	int i;
	u16_t value = 0x0000;
    9ede:	2400      	movs	r4, #0

	for (i = 0; i < ccc->cfg_len; i++) {
    9ee0:	4623      	mov	r3, r4
    9ee2:	e000      	b.n	9ee6 <gatt_ccc_changed+0xa>
    9ee4:	3301      	adds	r3, #1
    9ee6:	684a      	ldr	r2, [r1, #4]
    9ee8:	429a      	cmp	r2, r3
    9eea:	d907      	bls.n	9efc <gatt_ccc_changed+0x20>
		if (ccc->cfg[i].value > value) {
    9eec:	680a      	ldr	r2, [r1, #0]
    9eee:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    9ef2:	8912      	ldrh	r2, [r2, #8]
    9ef4:	4294      	cmp	r4, r2
    9ef6:	d2f5      	bcs.n	9ee4 <gatt_ccc_changed+0x8>
			value = ccc->cfg[i].value;
    9ef8:	4614      	mov	r4, r2
    9efa:	e7f3      	b.n	9ee4 <gatt_ccc_changed+0x8>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    9efc:	890b      	ldrh	r3, [r1, #8]
    9efe:	429c      	cmp	r4, r3
    9f00:	d003      	beq.n	9f0a <gatt_ccc_changed+0x2e>
		ccc->value = value;
    9f02:	810c      	strh	r4, [r1, #8]
		ccc->cfg_changed(attr, value);
    9f04:	68cb      	ldr	r3, [r1, #12]
    9f06:	4621      	mov	r1, r4
    9f08:	4798      	blx	r3
    9f0a:	bd10      	pop	{r4, pc}

00009f0c <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    9f0c:	b510      	push	{r4, lr}
    9f0e:	9b02      	ldr	r3, [sp, #8]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    9f10:	69dc      	ldr	r4, [r3, #28]
    9f12:	460a      	mov	r2, r1
    9f14:	6999      	ldr	r1, [r3, #24]
    9f16:	47a0      	blx	r4
    9f18:	bd10      	pop	{r4, pc}
	...

00009f1c <sc_indicate_rsp>:
{
    9f1c:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9f1e:	4b0f      	ldr	r3, [pc, #60]	; (9f5c <sc_indicate_rsp+0x40>)
    9f20:	f103 0254 	add.w	r2, r3, #84	; 0x54
    9f24:	f3bf 8f5b 	dmb	ish
    9f28:	e852 1f00 	ldrex	r1, [r2]
    9f2c:	f021 0102 	bic.w	r1, r1, #2
    9f30:	e842 1000 	strex	r0, r1, [r2]
    9f34:	2800      	cmp	r0, #0
    9f36:	d1f7      	bne.n	9f28 <sc_indicate_rsp+0xc>
    9f38:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9f3c:	f3bf 8f5b 	dmb	ish
    9f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    9f42:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    9f46:	f013 0f01 	tst.w	r3, #1
    9f4a:	d100      	bne.n	9f4e <sc_indicate_rsp+0x32>
    9f4c:	bd08      	pop	{r3, pc}
    9f4e:	2200      	movs	r2, #0
    9f50:	4903      	ldr	r1, [pc, #12]	; (9f60 <sc_indicate_rsp+0x44>)
    9f52:	4804      	ldr	r0, [pc, #16]	; (9f64 <sc_indicate_rsp+0x48>)
    9f54:	f01f ff8a 	bl	29e6c <k_delayed_work_submit_to_queue>
}
    9f58:	e7f8      	b.n	9f4c <sc_indicate_rsp+0x30>
    9f5a:	bf00      	nop
    9f5c:	20000844 	.word	0x20000844
    9f60:	20000870 	.word	0x20000870
    9f64:	20002c70 	.word	0x20002c70

00009f68 <sc_indicate>:
{
    9f68:	b510      	push	{r4, lr}
    9f6a:	4604      	mov	r4, r0
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    9f6c:	3054      	adds	r0, #84	; 0x54
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9f6e:	f3bf 8f5b 	dmb	ish
    9f72:	e850 3f00 	ldrex	r3, [r0]
    9f76:	f043 0e01 	orr.w	lr, r3, #1
    9f7a:	e840 ec00 	strex	ip, lr, [r0]
    9f7e:	f1bc 0f00 	cmp.w	ip, #0
    9f82:	d1f6      	bne.n	9f72 <sc_indicate+0xa>
    9f84:	f3bf 8f5b 	dmb	ish
    9f88:	f013 0f01 	tst.w	r3, #1
    9f8c:	d10a      	bne.n	9fa4 <sc_indicate+0x3c>
		sc->start = start;
    9f8e:	8521      	strh	r1, [r4, #40]	; 0x28
		sc->end = end;
    9f90:	8562      	strh	r2, [r4, #42]	; 0x2a
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9f92:	f3bf 8f5b 	dmb	ish
    9f96:	6d63      	ldr	r3, [r4, #84]	; 0x54
    9f98:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    9f9c:	f013 0f02 	tst.w	r3, #2
    9fa0:	d00b      	beq.n	9fba <sc_indicate+0x52>
    9fa2:	bd10      	pop	{r4, pc}
	if (!update_range(&sc->start, &sc->end, start, end)) {
    9fa4:	4613      	mov	r3, r2
    9fa6:	460a      	mov	r2, r1
    9fa8:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    9fac:	f104 0028 	add.w	r0, r4, #40	; 0x28
    9fb0:	f7ff ff7c 	bl	9eac <update_range>
    9fb4:	2800      	cmp	r0, #0
    9fb6:	d1ec      	bne.n	9f92 <sc_indicate+0x2a>
    9fb8:	e7f3      	b.n	9fa2 <sc_indicate+0x3a>
    9fba:	220a      	movs	r2, #10
    9fbc:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    9fc0:	4801      	ldr	r0, [pc, #4]	; (9fc8 <sc_indicate+0x60>)
    9fc2:	f01f ff53 	bl	29e6c <k_delayed_work_submit_to_queue>
    9fc6:	e7ec      	b.n	9fa2 <sc_indicate+0x3a>
    9fc8:	20002c70 	.word	0x20002c70

00009fcc <sc_save>:
	u16_t end;
};

static void sc_save(struct bt_gatt_ccc_cfg *cfg,
		    struct bt_gatt_indicate_params *params)
{
    9fcc:	b510      	push	{r4, lr}
    9fce:	b082      	sub	sp, #8
    9fd0:	4604      	mov	r4, r0
	struct sc_data data;
	struct sc_data *stored;

	memcpy(&data, params->data, params->len);
    9fd2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    9fd4:	6a09      	ldr	r1, [r1, #32]
    9fd6:	a801      	add	r0, sp, #4
    9fd8:	f7f6 f972 	bl	2c0 <memcpy>

	data.start = sys_le16_to_cpu(data.start);
    9fdc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	data.end = sys_le16_to_cpu(data.end);
    9fe0:	f8bd 3006 	ldrh.w	r3, [sp, #6]

	/* Load data stored */
	stored = (struct sc_data *)cfg->data;

	/* Check if there is any change stored */
	if (!stored->start && !stored->end) {
    9fe4:	89a1      	ldrh	r1, [r4, #12]
    9fe6:	b909      	cbnz	r1, 9fec <sc_save+0x20>
    9fe8:	89e1      	ldrh	r1, [r4, #14]
    9fea:	b139      	cbz	r1, 9ffc <sc_save+0x30>
		*stored = data;
		goto done;
	}

	update_range(&stored->start, &stored->end,
    9fec:	f104 010e 	add.w	r1, r4, #14
    9ff0:	f104 000c 	add.w	r0, r4, #12
    9ff4:	f7ff ff5a 	bl	9eac <update_range>
		     data.start, data.end);

done:
	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       stored->start, stored->end);
}
    9ff8:	b002      	add	sp, #8
    9ffa:	bd10      	pop	{r4, pc}
		*stored = data;
    9ffc:	9801      	ldr	r0, [sp, #4]
    9ffe:	60e0      	str	r0, [r4, #12]
		goto done;
    a000:	e7fa      	b.n	9ff8 <sc_save+0x2c>

0000a002 <bt_gatt_attr_write_ccc>:
{
    a002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a006:	f8bd 4020 	ldrh.w	r4, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    a00a:	68cd      	ldr	r5, [r1, #12]
	if (offset > sizeof(u16_t)) {
    a00c:	2c02      	cmp	r4, #2
    a00e:	d84f      	bhi.n	a0b0 <bt_gatt_attr_write_ccc+0xae>
	if (offset + len > sizeof(u16_t)) {
    a010:	4698      	mov	r8, r3
    a012:	441c      	add	r4, r3
    a014:	2c02      	cmp	r4, #2
    a016:	d84e      	bhi.n	a0b6 <bt_gatt_attr_write_ccc+0xb4>
    a018:	460f      	mov	r7, r1
    a01a:	4681      	mov	r9, r0
	return ((u16_t)src[1] << 8) | src[0];
    a01c:	7853      	ldrb	r3, [r2, #1]
    a01e:	7816      	ldrb	r6, [r2, #0]
    a020:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	for (i = 0; i < ccc->cfg_len; i++) {
    a024:	2400      	movs	r4, #0
    a026:	686b      	ldr	r3, [r5, #4]
    a028:	429c      	cmp	r4, r3
    a02a:	d209      	bcs.n	a040 <bt_gatt_attr_write_ccc+0x3e>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a02c:	6829      	ldr	r1, [r5, #0]
    a02e:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    a032:	3101      	adds	r1, #1
    a034:	4648      	mov	r0, r9
    a036:	f7fc fffd 	bl	7034 <bt_conn_addr_le_cmp>
    a03a:	b108      	cbz	r0, a040 <bt_gatt_attr_write_ccc+0x3e>
	for (i = 0; i < ccc->cfg_len; i++) {
    a03c:	3401      	adds	r4, #1
    a03e:	e7f2      	b.n	a026 <bt_gatt_attr_write_ccc+0x24>
	if (i == ccc->cfg_len) {
    a040:	686b      	ldr	r3, [r5, #4]
    a042:	429c      	cmp	r4, r3
    a044:	d026      	beq.n	a094 <bt_gatt_attr_write_ccc+0x92>
	} else if (!value) {
    a046:	b91e      	cbnz	r6, a050 <bt_gatt_attr_write_ccc+0x4e>
		ccc->cfg[i].valid = false;
    a048:	682a      	ldr	r2, [r5, #0]
    a04a:	0123      	lsls	r3, r4, #4
    a04c:	2100      	movs	r1, #0
    a04e:	54d1      	strb	r1, [r2, r3]
	ccc->cfg[i].value = value;
    a050:	682b      	ldr	r3, [r5, #0]
    a052:	0124      	lsls	r4, r4, #4
    a054:	4423      	add	r3, r4
    a056:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    a058:	682b      	ldr	r3, [r5, #0]
    a05a:	441c      	add	r4, r3
    a05c:	8922      	ldrh	r2, [r4, #8]
    a05e:	892b      	ldrh	r3, [r5, #8]
    a060:	429a      	cmp	r2, r3
    a062:	d003      	beq.n	a06c <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
    a064:	4629      	mov	r1, r5
    a066:	4638      	mov	r0, r7
    a068:	f7ff ff38 	bl	9edc <gatt_ccc_changed>
}
    a06c:	4640      	mov	r0, r8
    a06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	memcpy(dst, src, sizeof(*dst));
    a072:	2207      	movs	r2, #7
    a074:	f109 0148 	add.w	r1, r9, #72	; 0x48
    a078:	3001      	adds	r0, #1
    a07a:	f7f6 f921 	bl	2c0 <memcpy>
			if (value) {
    a07e:	b11e      	cbz	r6, a088 <bt_gatt_attr_write_ccc+0x86>
				ccc->cfg[i].valid = true;
    a080:	682b      	ldr	r3, [r5, #0]
    a082:	2201      	movs	r2, #1
    a084:	f803 200a 	strb.w	r2, [r3, sl]
		if (i == ccc->cfg_len) {
    a088:	686b      	ldr	r3, [r5, #4]
    a08a:	429c      	cmp	r4, r3
    a08c:	d1e0      	bne.n	a050 <bt_gatt_attr_write_ccc+0x4e>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    a08e:	f06f 0810 	mvn.w	r8, #16
    a092:	e7eb      	b.n	a06c <bt_gatt_attr_write_ccc+0x6a>
    a094:	2400      	movs	r4, #0
		for (i = 0; i < ccc->cfg_len; i++) {
    a096:	429c      	cmp	r4, r3
    a098:	d2f6      	bcs.n	a088 <bt_gatt_attr_write_ccc+0x86>
			if (ccc->cfg[i].valid) {
    a09a:	682a      	ldr	r2, [r5, #0]
    a09c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    a0a0:	eb02 000a 	add.w	r0, r2, sl
    a0a4:	f812 200a 	ldrb.w	r2, [r2, sl]
    a0a8:	2a00      	cmp	r2, #0
    a0aa:	d0e2      	beq.n	a072 <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    a0ac:	3401      	adds	r4, #1
    a0ae:	e7f2      	b.n	a096 <bt_gatt_attr_write_ccc+0x94>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a0b0:	f06f 0806 	mvn.w	r8, #6
    a0b4:	e7da      	b.n	a06c <bt_gatt_attr_write_ccc+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    a0b6:	f06f 080c 	mvn.w	r8, #12
    a0ba:	e7d7      	b.n	a06c <bt_gatt_attr_write_ccc+0x6a>

0000a0bc <gatt_send>:
{
    a0bc:	b538      	push	{r3, r4, r5, lr}
    a0be:	460d      	mov	r5, r1
	if (params) {
    a0c0:	b153      	cbz	r3, a0d8 <gatt_send+0x1c>
    a0c2:	4619      	mov	r1, r3
		req->buf = buf;
    a0c4:	611d      	str	r5, [r3, #16]
		req->func = func;
    a0c6:	605a      	str	r2, [r3, #4]
		req->destroy = destroy;
    a0c8:	9b04      	ldr	r3, [sp, #16]
    a0ca:	608b      	str	r3, [r1, #8]
		err = bt_att_req_send(conn, req);
    a0cc:	f7ff fe88 	bl	9de0 <bt_att_req_send>
    a0d0:	4604      	mov	r4, r0
	if (err) {
    a0d2:	b92c      	cbnz	r4, a0e0 <gatt_send+0x24>
}
    a0d4:	4620      	mov	r0, r4
    a0d6:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_att_send(conn, buf);
    a0d8:	f7ff fe32 	bl	9d40 <bt_att_send>
    a0dc:	4604      	mov	r4, r0
    a0de:	e7f8      	b.n	a0d2 <gatt_send+0x16>
		net_buf_unref(buf);
    a0e0:	4628      	mov	r0, r5
    a0e2:	f010 fd2f 	bl	1ab44 <net_buf_unref>
	return err;
    a0e6:	e7f5      	b.n	a0d4 <gatt_send+0x18>

0000a0e8 <gatt_indicate>:
{
    a0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0ec:	b082      	sub	sp, #8
    a0ee:	4680      	mov	r8, r0
    a0f0:	460c      	mov	r4, r1
				sizeof(*ind) + params->len);
    a0f2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    a0f4:	3202      	adds	r2, #2
    a0f6:	211d      	movs	r1, #29
    a0f8:	f7ff f9f6 	bl	94e8 <bt_att_create_pdu>
	if (!buf) {
    a0fc:	b1f8      	cbz	r0, a13e <gatt_indicate+0x56>
    a0fe:	4606      	mov	r6, r0
	ind = net_buf_add(buf, sizeof(*ind));
    a100:	f100 0708 	add.w	r7, r0, #8
    a104:	2102      	movs	r1, #2
    a106:	4638      	mov	r0, r7
    a108:	f010 fd68 	bl	1abdc <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    a10c:	69a3      	ldr	r3, [r4, #24]
    a10e:	8a1b      	ldrh	r3, [r3, #16]
    a110:	4605      	mov	r5, r0
    a112:	f825 3b02 	strh.w	r3, [r5], #2
	net_buf_add(buf, params->len);
    a116:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    a118:	4638      	mov	r0, r7
    a11a:	f010 fd5f 	bl	1abdc <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    a11e:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    a120:	6a21      	ldr	r1, [r4, #32]
    a122:	4628      	mov	r0, r5
    a124:	f7f6 f8cc 	bl	2c0 <memcpy>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    a128:	2300      	movs	r3, #0
    a12a:	9300      	str	r3, [sp, #0]
    a12c:	4623      	mov	r3, r4
    a12e:	4a05      	ldr	r2, [pc, #20]	; (a144 <gatt_indicate+0x5c>)
    a130:	4631      	mov	r1, r6
    a132:	4640      	mov	r0, r8
    a134:	f7ff ffc2 	bl	a0bc <gatt_send>
}
    a138:	b002      	add	sp, #8
    a13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOMEM;
    a13e:	f06f 000b 	mvn.w	r0, #11
    a142:	e7f9      	b.n	a138 <gatt_indicate+0x50>
    a144:	00009f0d 	.word	0x00009f0d

0000a148 <gatt_notify>:
{
    a148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a14c:	4680      	mov	r8, r0
    a14e:	468a      	mov	sl, r1
    a150:	4691      	mov	r9, r2
    a152:	461c      	mov	r4, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    a154:	1c9a      	adds	r2, r3, #2
    a156:	211b      	movs	r1, #27
    a158:	f7ff f9c6 	bl	94e8 <bt_att_create_pdu>
	if (!buf) {
    a15c:	b1d8      	cbz	r0, a196 <gatt_notify+0x4e>
    a15e:	4606      	mov	r6, r0
	nfy = net_buf_add(buf, sizeof(*nfy));
    a160:	f100 0708 	add.w	r7, r0, #8
    a164:	2102      	movs	r1, #2
    a166:	4638      	mov	r0, r7
    a168:	f010 fd38 	bl	1abdc <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    a16c:	4605      	mov	r5, r0
    a16e:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    a172:	4621      	mov	r1, r4
    a174:	4638      	mov	r0, r7
    a176:	f010 fd31 	bl	1abdc <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    a17a:	4622      	mov	r2, r4
    a17c:	4649      	mov	r1, r9
    a17e:	4628      	mov	r0, r5
    a180:	f7f6 f89e 	bl	2c0 <memcpy>
    a184:	2300      	movs	r3, #0
    a186:	4632      	mov	r2, r6
    a188:	2104      	movs	r1, #4
    a18a:	4640      	mov	r0, r8
    a18c:	f7fd febd 	bl	7f0a <bt_l2cap_send_cb>
	return 0;
    a190:	2000      	movs	r0, #0
    a192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
    a196:	f06f 000b 	mvn.w	r0, #11
}
    a19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000a1a0 <notify_cb>:

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    a1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a1a4:	b082      	sub	sp, #8
    a1a6:	4604      	mov	r4, r0
    a1a8:	460f      	mov	r7, r1
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    a1aa:	2300      	movs	r3, #0
    a1ac:	f88d 3000 	strb.w	r3, [sp]
    a1b0:	f642 1302 	movw	r3, #10498	; 0x2902
    a1b4:	f8ad 3002 	strh.w	r3, [sp, #2]
    a1b8:	4669      	mov	r1, sp
    a1ba:	6800      	ldr	r0, [r0, #0]
    a1bc:	f7fa f991 	bl	44e2 <bt_uuid_cmp>
    a1c0:	b938      	cbnz	r0, a1d2 <notify_cb+0x32>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a1c2:	68a2      	ldr	r2, [r4, #8]
    a1c4:	4b29      	ldr	r3, [pc, #164]	; (a26c <notify_cb+0xcc>)
    a1c6:	429a      	cmp	r2, r3
    a1c8:	d012      	beq.n	a1f0 <notify_cb+0x50>
		return BT_GATT_ITER_CONTINUE;
    a1ca:	2001      	movs	r0, #1

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    a1cc:	b002      	add	sp, #8
    a1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    a1d2:	6820      	ldr	r0, [r4, #0]
    a1d4:	2300      	movs	r3, #0
    a1d6:	f88d 3004 	strb.w	r3, [sp, #4]
    a1da:	f642 0303 	movw	r3, #10243	; 0x2803
    a1de:	f8ad 3006 	strh.w	r3, [sp, #6]
    a1e2:	a901      	add	r1, sp, #4
    a1e4:	f7fa f97d 	bl	44e2 <bt_uuid_cmp>
    a1e8:	2800      	cmp	r0, #0
    a1ea:	d0ef      	beq.n	a1cc <notify_cb+0x2c>
		return BT_GATT_ITER_CONTINUE;
    a1ec:	2001      	movs	r0, #1
    a1ee:	e7ed      	b.n	a1cc <notify_cb+0x2c>
	ccc = attr->user_data;
    a1f0:	68e5      	ldr	r5, [r4, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    a1f2:	2400      	movs	r4, #0
    a1f4:	e01a      	b.n	a22c <notify_cb+0x8c>
			if (ccc->cfg == sc_ccc_cfg) {
    a1f6:	6828      	ldr	r0, [r5, #0]
    a1f8:	4b1d      	ldr	r3, [pc, #116]	; (a270 <notify_cb+0xd0>)
    a1fa:	4298      	cmp	r0, r3
    a1fc:	d115      	bne.n	a22a <notify_cb+0x8a>
				sc_save(&ccc->cfg[i], data->params);
    a1fe:	6979      	ldr	r1, [r7, #20]
    a200:	4430      	add	r0, r6
    a202:	f7ff fee3 	bl	9fcc <sc_save>
			continue;
    a206:	e010      	b.n	a22a <notify_cb+0x8a>
		if (data->type == BT_GATT_CCC_INDICATE) {
    a208:	88bb      	ldrh	r3, [r7, #4]
    a20a:	2b02      	cmp	r3, #2
    a20c:	d024      	beq.n	a258 <notify_cb+0xb8>
			err = gatt_notify(conn, data->attr->handle, data->data,
    a20e:	68b9      	ldr	r1, [r7, #8]
    a210:	8a3b      	ldrh	r3, [r7, #16]
    a212:	68fa      	ldr	r2, [r7, #12]
    a214:	8a09      	ldrh	r1, [r1, #16]
    a216:	f7ff ff97 	bl	a148 <gatt_notify>
    a21a:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    a21c:	4640      	mov	r0, r8
    a21e:	f7fc ffb9 	bl	7194 <bt_conn_unref>
		if (err < 0) {
    a222:	2e00      	cmp	r6, #0
    a224:	db1f      	blt.n	a266 <notify_cb+0xc6>
		data->err = 0;
    a226:	2300      	movs	r3, #0
    a228:	603b      	str	r3, [r7, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    a22a:	3401      	adds	r4, #1
    a22c:	686b      	ldr	r3, [r5, #4]
    a22e:	429c      	cmp	r4, r3
    a230:	d217      	bcs.n	a262 <notify_cb+0xc2>
		if (ccc->cfg[i].value != data->type) {
    a232:	6828      	ldr	r0, [r5, #0]
    a234:	0126      	lsls	r6, r4, #4
    a236:	4430      	add	r0, r6
    a238:	8902      	ldrh	r2, [r0, #8]
    a23a:	88bb      	ldrh	r3, [r7, #4]
    a23c:	429a      	cmp	r2, r3
    a23e:	d1f4      	bne.n	a22a <notify_cb+0x8a>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    a240:	3001      	adds	r0, #1
    a242:	f7fc ff4d 	bl	70e0 <bt_conn_lookup_addr_le>
		if (!conn) {
    a246:	4680      	mov	r8, r0
    a248:	2800      	cmp	r0, #0
    a24a:	d0d4      	beq.n	a1f6 <notify_cb+0x56>
		if (conn->state != BT_CONN_CONNECTED) {
    a24c:	7b03      	ldrb	r3, [r0, #12]
    a24e:	2b03      	cmp	r3, #3
    a250:	d0da      	beq.n	a208 <notify_cb+0x68>
			bt_conn_unref(conn);
    a252:	f7fc ff9f 	bl	7194 <bt_conn_unref>
			continue;
    a256:	e7e8      	b.n	a22a <notify_cb+0x8a>
			err = gatt_indicate(conn, data->params);
    a258:	6979      	ldr	r1, [r7, #20]
    a25a:	f7ff ff45 	bl	a0e8 <gatt_indicate>
    a25e:	4606      	mov	r6, r0
    a260:	e7dc      	b.n	a21c <notify_cb+0x7c>
	return BT_GATT_ITER_CONTINUE;
    a262:	2001      	movs	r0, #1
    a264:	e7b2      	b.n	a1cc <notify_cb+0x2c>
			return BT_GATT_ITER_STOP;
    a266:	2000      	movs	r0, #0
    a268:	e7b0      	b.n	a1cc <notify_cb+0x2c>
    a26a:	bf00      	nop
    a26c:	0000a003 	.word	0x0000a003
    a270:	2000089c 	.word	0x2000089c

0000a274 <sc_restore>:

static void sc_restore(struct bt_gatt_ccc_cfg *cfg)
{
	struct sc_data *data = (struct sc_data *)cfg->data;

	if (!data->start && !data->end) {
    a274:	8981      	ldrh	r1, [r0, #12]
    a276:	b909      	cbnz	r1, a27c <sc_restore+0x8>
    a278:	89c3      	ldrh	r3, [r0, #14]
    a27a:	b163      	cbz	r3, a296 <sc_restore+0x22>
{
    a27c:	b510      	push	{r4, lr}
    a27e:	4604      	mov	r4, r0
	}

	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       data->start, data->end);

	sc_indicate(&gatt_sc, data->start, data->end);
    a280:	89c2      	ldrh	r2, [r0, #14]
    a282:	4805      	ldr	r0, [pc, #20]	; (a298 <sc_restore+0x24>)
    a284:	f7ff fe70 	bl	9f68 <sc_indicate>

	/* Reset config data */
	memset(cfg->data, 0, sizeof(cfg->data));
    a288:	2204      	movs	r2, #4
    a28a:	2100      	movs	r1, #0
    a28c:	f104 000c 	add.w	r0, r4, #12
    a290:	f01f ff76 	bl	2a180 <memset>
    a294:	bd10      	pop	{r4, pc}
    a296:	4770      	bx	lr
    a298:	20000844 	.word	0x20000844

0000a29c <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a29c:	6882      	ldr	r2, [r0, #8]
    a29e:	4b16      	ldr	r3, [pc, #88]	; (a2f8 <connected_cb+0x5c>)
    a2a0:	429a      	cmp	r2, r3
    a2a2:	d001      	beq.n	a2a8 <connected_cb+0xc>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    a2a4:	2001      	movs	r0, #1
    a2a6:	4770      	bx	lr
{
    a2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a2ac:	460f      	mov	r7, r1
    a2ae:	4680      	mov	r8, r0
	ccc = attr->user_data;
    a2b0:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    a2b2:	2400      	movs	r4, #0
    a2b4:	e004      	b.n	a2c0 <connected_cb+0x24>
				sc_restore(&ccc->cfg[i]);
    a2b6:	4430      	add	r0, r6
    a2b8:	f7ff ffdc 	bl	a274 <sc_restore>
    a2bc:	e019      	b.n	a2f2 <connected_cb+0x56>
	for (i = 0; i < ccc->cfg_len; i++) {
    a2be:	3401      	adds	r4, #1
    a2c0:	686b      	ldr	r3, [r5, #4]
    a2c2:	429c      	cmp	r4, r3
    a2c4:	d215      	bcs.n	a2f2 <connected_cb+0x56>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a2c6:	6829      	ldr	r1, [r5, #0]
    a2c8:	0126      	lsls	r6, r4, #4
    a2ca:	4431      	add	r1, r6
    a2cc:	3101      	adds	r1, #1
    a2ce:	4638      	mov	r0, r7
    a2d0:	f7fc feb0 	bl	7034 <bt_conn_addr_le_cmp>
    a2d4:	2800      	cmp	r0, #0
    a2d6:	d1f2      	bne.n	a2be <connected_cb+0x22>
		if (ccc->cfg[i].value) {
    a2d8:	682b      	ldr	r3, [r5, #0]
    a2da:	4433      	add	r3, r6
    a2dc:	891b      	ldrh	r3, [r3, #8]
    a2de:	2b00      	cmp	r3, #0
    a2e0:	d0ed      	beq.n	a2be <connected_cb+0x22>
			gatt_ccc_changed(attr, ccc);
    a2e2:	4629      	mov	r1, r5
    a2e4:	4640      	mov	r0, r8
    a2e6:	f7ff fdf9 	bl	9edc <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    a2ea:	6828      	ldr	r0, [r5, #0]
    a2ec:	4b03      	ldr	r3, [pc, #12]	; (a2fc <connected_cb+0x60>)
    a2ee:	4298      	cmp	r0, r3
    a2f0:	d0e1      	beq.n	a2b6 <connected_cb+0x1a>
}
    a2f2:	2001      	movs	r0, #1
    a2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a2f8:	0000a003 	.word	0x0000a003
    a2fc:	2000089c 	.word	0x2000089c

0000a300 <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    a300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a304:	6882      	ldr	r2, [r0, #8]
    a306:	4b29      	ldr	r3, [pc, #164]	; (a3ac <disconnected_cb+0xac>)
    a308:	429a      	cmp	r2, r3
    a30a:	d002      	beq.n	a312 <disconnected_cb+0x12>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    a30c:	2001      	movs	r0, #1
    a30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
    a312:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    a314:	892b      	ldrh	r3, [r5, #8]
    a316:	2b00      	cmp	r3, #0
    a318:	d0f8      	beq.n	a30c <disconnected_cb+0xc>
    a31a:	4688      	mov	r8, r1
    a31c:	4607      	mov	r7, r0
    a31e:	2400      	movs	r4, #0
    a320:	e012      	b.n	a348 <disconnected_cb+0x48>
					bt_conn_unref(tmp);
    a322:	f7fc ff37 	bl	7194 <bt_conn_unref>
					return BT_GATT_ITER_CONTINUE;
    a326:	e7f1      	b.n	a30c <disconnected_cb+0xc>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    a328:	f108 0948 	add.w	r9, r8, #72	; 0x48
    a32c:	4648      	mov	r0, r9
    a32e:	f7fc f99f 	bl	6670 <bt_addr_le_is_bonded>
    a332:	bb28      	cbnz	r0, a380 <disconnected_cb+0x80>
				ccc->cfg[i].valid = false;
    a334:	682b      	ldr	r3, [r5, #0]
    a336:	2100      	movs	r1, #0
    a338:	5599      	strb	r1, [r3, r6]
				memset(&ccc->cfg[i].value, 0,
    a33a:	6828      	ldr	r0, [r5, #0]
    a33c:	4430      	add	r0, r6
    a33e:	2202      	movs	r2, #2
    a340:	3008      	adds	r0, #8
    a342:	f01f ff1d 	bl	2a180 <memset>
	for (i = 0; i < ccc->cfg_len; i++) {
    a346:	3401      	adds	r4, #1
    a348:	686b      	ldr	r3, [r5, #4]
    a34a:	429c      	cmp	r4, r3
    a34c:	d220      	bcs.n	a390 <disconnected_cb+0x90>
		if (!ccc->cfg[i].value) {
    a34e:	6829      	ldr	r1, [r5, #0]
    a350:	0126      	lsls	r6, r4, #4
    a352:	4431      	add	r1, r6
    a354:	890b      	ldrh	r3, [r1, #8]
    a356:	2b00      	cmp	r3, #0
    a358:	d0f5      	beq.n	a346 <disconnected_cb+0x46>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a35a:	3101      	adds	r1, #1
    a35c:	4640      	mov	r0, r8
    a35e:	f7fc fe69 	bl	7034 <bt_conn_addr_le_cmp>
    a362:	2800      	cmp	r0, #0
    a364:	d0e0      	beq.n	a328 <disconnected_cb+0x28>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    a366:	6828      	ldr	r0, [r5, #0]
    a368:	4430      	add	r0, r6
    a36a:	3001      	adds	r0, #1
    a36c:	f7fc feb8 	bl	70e0 <bt_conn_lookup_addr_le>
			if (tmp) {
    a370:	2800      	cmp	r0, #0
    a372:	d0e8      	beq.n	a346 <disconnected_cb+0x46>
				if (tmp->state == BT_CONN_CONNECTED) {
    a374:	7b02      	ldrb	r2, [r0, #12]
    a376:	2a03      	cmp	r2, #3
    a378:	d0d3      	beq.n	a322 <disconnected_cb+0x22>
				bt_conn_unref(tmp);
    a37a:	f7fc ff0b 	bl	7194 <bt_conn_unref>
    a37e:	e7e2      	b.n	a346 <disconnected_cb+0x46>
				bt_addr_le_copy(&ccc->cfg[i].peer,
    a380:	6828      	ldr	r0, [r5, #0]
    a382:	4430      	add	r0, r6
    a384:	2207      	movs	r2, #7
    a386:	4649      	mov	r1, r9
    a388:	3001      	adds	r0, #1
    a38a:	f7f5 ff99 	bl	2c0 <memcpy>
    a38e:	e7da      	b.n	a346 <disconnected_cb+0x46>
	memset(&ccc->value, 0, sizeof(ccc->value));
    a390:	2202      	movs	r2, #2
    a392:	2100      	movs	r1, #0
    a394:	f105 0008 	add.w	r0, r5, #8
    a398:	f01f fef2 	bl	2a180 <memset>
	if (ccc->cfg_changed) {
    a39c:	68eb      	ldr	r3, [r5, #12]
    a39e:	2b00      	cmp	r3, #0
    a3a0:	d0b4      	beq.n	a30c <disconnected_cb+0xc>
		ccc->cfg_changed(attr, ccc->value);
    a3a2:	8929      	ldrh	r1, [r5, #8]
    a3a4:	4638      	mov	r0, r7
    a3a6:	4798      	blx	r3
    a3a8:	e7b0      	b.n	a30c <disconnected_cb+0xc>
    a3aa:	bf00      	nop
    a3ac:	0000a003 	.word	0x0000a003

0000a3b0 <bt_gatt_init>:
{
    a3b0:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    a3b2:	4805      	ldr	r0, [pc, #20]	; (a3c8 <bt_gatt_init+0x18>)
    a3b4:	f7ff fd3c 	bl	9e30 <gatt_register>
	gatt_register(&gatt_svc);
    a3b8:	4804      	ldr	r0, [pc, #16]	; (a3cc <bt_gatt_init+0x1c>)
    a3ba:	f7ff fd39 	bl	9e30 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    a3be:	4904      	ldr	r1, [pc, #16]	; (a3d0 <bt_gatt_init+0x20>)
    a3c0:	4804      	ldr	r0, [pc, #16]	; (a3d4 <bt_gatt_init+0x24>)
    a3c2:	f01f fcdb 	bl	29d7c <k_delayed_work_init>
    a3c6:	bd08      	pop	{r3, pc}
    a3c8:	2000bbcc 	.word	0x2000bbcc
    a3cc:	2000bc28 	.word	0x2000bc28
    a3d0:	0000a6a5 	.word	0x0000a6a5
    a3d4:	20000870 	.word	0x20000870

0000a3d8 <bt_gatt_service_register>:
{
    a3d8:	b510      	push	{r4, lr}
    a3da:	b082      	sub	sp, #8
    a3dc:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    a3de:	6803      	ldr	r3, [r0, #0]
    a3e0:	6818      	ldr	r0, [r3, #0]
    a3e2:	2300      	movs	r3, #0
    a3e4:	f88d 3000 	strb.w	r3, [sp]
    a3e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    a3ec:	f8ad 3002 	strh.w	r3, [sp, #2]
    a3f0:	4669      	mov	r1, sp
    a3f2:	f7fa f876 	bl	44e2 <bt_uuid_cmp>
    a3f6:	b300      	cbz	r0, a43a <bt_gatt_service_register+0x62>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    a3f8:	6823      	ldr	r3, [r4, #0]
    a3fa:	6818      	ldr	r0, [r3, #0]
    a3fc:	2300      	movs	r3, #0
    a3fe:	f88d 3004 	strb.w	r3, [sp, #4]
    a402:	f641 0301 	movw	r3, #6145	; 0x1801
    a406:	f8ad 3006 	strh.w	r3, [sp, #6]
    a40a:	a901      	add	r1, sp, #4
    a40c:	f7fa f869 	bl	44e2 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    a410:	b1b0      	cbz	r0, a440 <bt_gatt_service_register+0x68>
	err = gatt_register(svc);
    a412:	4620      	mov	r0, r4
    a414:	f7ff fd0c 	bl	9e30 <gatt_register>
	if (err < 0) {
    a418:	2800      	cmp	r0, #0
    a41a:	db0c      	blt.n	a436 <bt_gatt_service_register+0x5e>
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    a41c:	6821      	ldr	r1, [r4, #0]
		    svc->attrs[svc->attr_count - 1].handle);
    a41e:	88a2      	ldrh	r2, [r4, #4]
    a420:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    a424:	0093      	lsls	r3, r2, #2
    a426:	3b14      	subs	r3, #20
    a428:	440b      	add	r3, r1
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    a42a:	8a1a      	ldrh	r2, [r3, #16]
    a42c:	8a09      	ldrh	r1, [r1, #16]
    a42e:	4806      	ldr	r0, [pc, #24]	; (a448 <bt_gatt_service_register+0x70>)
    a430:	f7ff fd9a 	bl	9f68 <sc_indicate>
	return 0;
    a434:	2000      	movs	r0, #0
}
    a436:	b002      	add	sp, #8
    a438:	bd10      	pop	{r4, pc}
		return -EALREADY;
    a43a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a43e:	e7fa      	b.n	a436 <bt_gatt_service_register+0x5e>
    a440:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a444:	e7f7      	b.n	a436 <bt_gatt_service_register+0x5e>
    a446:	bf00      	nop
    a448:	20000844 	.word	0x20000844

0000a44c <bt_gatt_attr_read>:
{
    a44c:	b510      	push	{r4, lr}
    a44e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    a452:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
    a456:	42a1      	cmp	r1, r4
    a458:	d80c      	bhi.n	a474 <bt_gatt_attr_read+0x28>
    a45a:	4610      	mov	r0, r2
	len = min(buf_len, value_len - offset);
    a45c:	1a64      	subs	r4, r4, r1
    a45e:	42a3      	cmp	r3, r4
    a460:	bfa8      	it	ge
    a462:	4623      	movge	r3, r4
    a464:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    a466:	4622      	mov	r2, r4
    a468:	9b03      	ldr	r3, [sp, #12]
    a46a:	4419      	add	r1, r3
    a46c:	f7f5 ff28 	bl	2c0 <memcpy>
}
    a470:	4620      	mov	r0, r4
    a472:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a474:	f06f 0406 	mvn.w	r4, #6
    a478:	e7fa      	b.n	a470 <bt_gatt_attr_read+0x24>

0000a47a <read_appearance>:
{
    a47a:	b530      	push	{r4, r5, lr}
    a47c:	b087      	sub	sp, #28
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    a47e:	ac06      	add	r4, sp, #24
    a480:	2500      	movs	r5, #0
    a482:	f824 5d02 	strh.w	r5, [r4, #-2]!
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    a486:	2502      	movs	r5, #2
    a488:	9502      	str	r5, [sp, #8]
    a48a:	9401      	str	r4, [sp, #4]
    a48c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    a490:	9400      	str	r4, [sp, #0]
    a492:	f7ff ffdb 	bl	a44c <bt_gatt_attr_read>
}
    a496:	b007      	add	sp, #28
    a498:	bd30      	pop	{r4, r5, pc}
	...

0000a49c <read_name>:
{
    a49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a4a0:	b084      	sub	sp, #16
    a4a2:	4605      	mov	r5, r0
    a4a4:	460e      	mov	r6, r1
    a4a6:	4617      	mov	r7, r2
    a4a8:	4698      	mov	r8, r3
				 strlen(gap_name));
    a4aa:	4c09      	ldr	r4, [pc, #36]	; (a4d0 <read_name+0x34>)
    a4ac:	4620      	mov	r0, r4
    a4ae:	f7f6 f927 	bl	700 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    a4b2:	b280      	uxth	r0, r0
    a4b4:	9002      	str	r0, [sp, #8]
    a4b6:	9401      	str	r4, [sp, #4]
    a4b8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    a4bc:	9300      	str	r3, [sp, #0]
    a4be:	4643      	mov	r3, r8
    a4c0:	463a      	mov	r2, r7
    a4c2:	4631      	mov	r1, r6
    a4c4:	4628      	mov	r0, r5
    a4c6:	f7ff ffc1 	bl	a44c <bt_gatt_attr_read>
}
    a4ca:	b004      	add	sp, #16
    a4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a4d0:	00030ef4 	.word	0x00030ef4

0000a4d4 <bt_gatt_attr_read_service>:
{
    a4d4:	b570      	push	{r4, r5, r6, lr}
    a4d6:	b086      	sub	sp, #24
    a4d8:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
    a4dc:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
    a4de:	7826      	ldrb	r6, [r4, #0]
    a4e0:	b146      	cbz	r6, a4f4 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
    a4e2:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    a4e4:	2610      	movs	r6, #16
    a4e6:	9602      	str	r6, [sp, #8]
    a4e8:	9401      	str	r4, [sp, #4]
    a4ea:	9500      	str	r5, [sp, #0]
    a4ec:	f7ff ffae 	bl	a44c <bt_gatt_attr_read>
}
    a4f0:	b006      	add	sp, #24
    a4f2:	bd70      	pop	{r4, r5, r6, pc}
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    a4f4:	8866      	ldrh	r6, [r4, #2]
    a4f6:	ac06      	add	r4, sp, #24
    a4f8:	f824 6d02 	strh.w	r6, [r4, #-2]!
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
    a4fc:	2602      	movs	r6, #2
    a4fe:	9602      	str	r6, [sp, #8]
    a500:	9401      	str	r4, [sp, #4]
    a502:	9500      	str	r5, [sp, #0]
    a504:	f7ff ffa2 	bl	a44c <bt_gatt_attr_read>
    a508:	e7f2      	b.n	a4f0 <bt_gatt_attr_read_service+0x1c>

0000a50a <bt_gatt_attr_read_ccc>:
{
    a50a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a50e:	b086      	sub	sp, #24
    a510:	4607      	mov	r7, r0
    a512:	4688      	mov	r8, r1
    a514:	4691      	mov	r9, r2
    a516:	469a      	mov	sl, r3
	struct _bt_gatt_ccc *ccc = attr->user_data;
    a518:	68cd      	ldr	r5, [r1, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    a51a:	2400      	movs	r4, #0
    a51c:	686b      	ldr	r3, [r5, #4]
    a51e:	429c      	cmp	r4, r3
    a520:	d20e      	bcs.n	a540 <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a522:	6829      	ldr	r1, [r5, #0]
    a524:	0126      	lsls	r6, r4, #4
    a526:	4431      	add	r1, r6
    a528:	3101      	adds	r1, #1
    a52a:	4638      	mov	r0, r7
    a52c:	f7fc fd82 	bl	7034 <bt_conn_addr_le_cmp>
    a530:	b108      	cbz	r0, a536 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    a532:	3401      	adds	r4, #1
    a534:	e7f2      	b.n	a51c <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    a536:	682b      	ldr	r3, [r5, #0]
    a538:	441e      	add	r6, r3
    a53a:	8933      	ldrh	r3, [r6, #8]
    a53c:	f8ad 3016 	strh.w	r3, [sp, #22]
	if (i == ccc->cfg_len) {
    a540:	686b      	ldr	r3, [r5, #4]
    a542:	429c      	cmp	r4, r3
    a544:	d010      	beq.n	a568 <bt_gatt_attr_read_ccc+0x5e>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    a546:	2302      	movs	r3, #2
    a548:	9302      	str	r3, [sp, #8]
    a54a:	f10d 0316 	add.w	r3, sp, #22
    a54e:	9301      	str	r3, [sp, #4]
    a550:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    a554:	9300      	str	r3, [sp, #0]
    a556:	4653      	mov	r3, sl
    a558:	464a      	mov	r2, r9
    a55a:	4641      	mov	r1, r8
    a55c:	4638      	mov	r0, r7
    a55e:	f7ff ff75 	bl	a44c <bt_gatt_attr_read>
}
    a562:	b006      	add	sp, #24
    a564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		value = 0x0000;
    a568:	2300      	movs	r3, #0
    a56a:	f8ad 3016 	strh.w	r3, [sp, #22]
    a56e:	e7ea      	b.n	a546 <bt_gatt_attr_read_ccc+0x3c>

0000a570 <bt_gatt_foreach_attr>:
{
    a570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a574:	4606      	mov	r6, r0
    a576:	460f      	mov	r7, r1
    a578:	4690      	mov	r8, r2
    a57a:	4699      	mov	r9, r3
	return list->head;
    a57c:	4b15      	ldr	r3, [pc, #84]	; (a5d4 <bt_gatt_foreach_attr+0x64>)
    a57e:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a580:	b10d      	cbz	r5, a586 <bt_gatt_foreach_attr+0x16>
    a582:	3d08      	subs	r5, #8
    a584:	e01e      	b.n	a5c4 <bt_gatt_foreach_attr+0x54>
    a586:	2500      	movs	r5, #0
    a588:	e01c      	b.n	a5c4 <bt_gatt_foreach_attr+0x54>
		for (i = 0; i < svc->attr_count; i++) {
    a58a:	3401      	adds	r4, #1
    a58c:	88ab      	ldrh	r3, [r5, #4]
    a58e:	429c      	cmp	r4, r3
    a590:	da0f      	bge.n	a5b2 <bt_gatt_foreach_attr+0x42>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    a592:	6828      	ldr	r0, [r5, #0]
    a594:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    a598:	0093      	lsls	r3, r2, #2
    a59a:	4418      	add	r0, r3
			if (attr->handle < start_handle ||
    a59c:	8a03      	ldrh	r3, [r0, #16]
    a59e:	42b3      	cmp	r3, r6
    a5a0:	d3f3      	bcc.n	a58a <bt_gatt_foreach_attr+0x1a>
    a5a2:	42bb      	cmp	r3, r7
    a5a4:	d8f1      	bhi.n	a58a <bt_gatt_foreach_attr+0x1a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    a5a6:	4649      	mov	r1, r9
    a5a8:	47c0      	blx	r8
    a5aa:	2800      	cmp	r0, #0
    a5ac:	d1ed      	bne.n	a58a <bt_gatt_foreach_attr+0x1a>
    a5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    a5b2:	f115 0308 	adds.w	r3, r5, #8
    a5b6:	d009      	beq.n	a5cc <bt_gatt_foreach_attr+0x5c>
	return node->next;
    a5b8:	68aa      	ldr	r2, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a5ba:	b14a      	cbz	r2, a5d0 <bt_gatt_foreach_attr+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    a5bc:	b103      	cbz	r3, a5c0 <bt_gatt_foreach_attr+0x50>
	return node->next;
    a5be:	68ab      	ldr	r3, [r5, #8]
    a5c0:	f1a3 0508 	sub.w	r5, r3, #8
    a5c4:	2d00      	cmp	r5, #0
    a5c6:	d0f2      	beq.n	a5ae <bt_gatt_foreach_attr+0x3e>
    a5c8:	2400      	movs	r4, #0
    a5ca:	e7df      	b.n	a58c <bt_gatt_foreach_attr+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    a5cc:	461a      	mov	r2, r3
    a5ce:	e7f4      	b.n	a5ba <bt_gatt_foreach_attr+0x4a>
    a5d0:	2500      	movs	r5, #0
    a5d2:	e7f7      	b.n	a5c4 <bt_gatt_foreach_attr+0x54>
    a5d4:	2000083c 	.word	0x2000083c

0000a5d8 <bt_gatt_attr_next>:
{
    a5d8:	b500      	push	{lr}
    a5da:	b083      	sub	sp, #12
	struct bt_gatt_attr *next = NULL;
    a5dc:	ab02      	add	r3, sp, #8
    a5de:	2200      	movs	r2, #0
    a5e0:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    a5e4:	8a00      	ldrh	r0, [r0, #16]
    a5e6:	3001      	adds	r0, #1
    a5e8:	b280      	uxth	r0, r0
    a5ea:	4a04      	ldr	r2, [pc, #16]	; (a5fc <bt_gatt_attr_next+0x24>)
    a5ec:	4601      	mov	r1, r0
    a5ee:	f7ff ffbf 	bl	a570 <bt_gatt_foreach_attr>
}
    a5f2:	9801      	ldr	r0, [sp, #4]
    a5f4:	b003      	add	sp, #12
    a5f6:	f85d fb04 	ldr.w	pc, [sp], #4
    a5fa:	bf00      	nop
    a5fc:	00009ed7 	.word	0x00009ed7

0000a600 <bt_gatt_attr_read_chrc>:
{
    a600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a604:	b08a      	sub	sp, #40	; 0x28
    a606:	4606      	mov	r6, r0
    a608:	460c      	mov	r4, r1
    a60a:	4617      	mov	r7, r2
    a60c:	4698      	mov	r8, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
    a60e:	68cd      	ldr	r5, [r1, #12]
	pdu.properties = chrc->properties;
    a610:	792b      	ldrb	r3, [r5, #4]
    a612:	f88d 3014 	strb.w	r3, [sp, #20]
	next = bt_gatt_attr_next(attr);
    a616:	4608      	mov	r0, r1
    a618:	f7ff ffde 	bl	a5d8 <bt_gatt_attr_next>
	if (!next) {
    a61c:	b1c0      	cbz	r0, a650 <bt_gatt_attr_read_chrc+0x50>
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    a61e:	8a03      	ldrh	r3, [r0, #16]
    a620:	f8ad 3015 	strh.w	r3, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    a624:	6829      	ldr	r1, [r5, #0]
    a626:	780b      	ldrb	r3, [r1, #0]
    a628:	b9c3      	cbnz	r3, a65c <bt_gatt_attr_read_chrc+0x5c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    a62a:	884b      	ldrh	r3, [r1, #2]
    a62c:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    a630:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    a632:	9302      	str	r3, [sp, #8]
    a634:	ab05      	add	r3, sp, #20
    a636:	9301      	str	r3, [sp, #4]
    a638:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    a63c:	9300      	str	r3, [sp, #0]
    a63e:	4643      	mov	r3, r8
    a640:	463a      	mov	r2, r7
    a642:	4621      	mov	r1, r4
    a644:	4630      	mov	r0, r6
    a646:	f7ff ff01 	bl	a44c <bt_gatt_attr_read>
}
    a64a:	b00a      	add	sp, #40	; 0x28
    a64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu.value_handle = 0x0000;
    a650:	2300      	movs	r3, #0
    a652:	f88d 3015 	strb.w	r3, [sp, #21]
    a656:	f88d 3016 	strb.w	r3, [sp, #22]
    a65a:	e7e3      	b.n	a624 <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    a65c:	2210      	movs	r2, #16
    a65e:	3101      	adds	r1, #1
    a660:	f10d 0017 	add.w	r0, sp, #23
    a664:	f7f5 fe2c 	bl	2c0 <memcpy>
		value_len += 16;
    a668:	2313      	movs	r3, #19
    a66a:	e7e2      	b.n	a632 <bt_gatt_attr_read_chrc+0x32>

0000a66c <bt_gatt_indicate>:
{
    a66c:	b500      	push	{lr}
    a66e:	b087      	sub	sp, #28
	if (conn) {
    a670:	b120      	cbz	r0, a67c <bt_gatt_indicate+0x10>
		return gatt_indicate(conn, params);
    a672:	f7ff fd39 	bl	a0e8 <gatt_indicate>
}
    a676:	b007      	add	sp, #28
    a678:	f85d fb04 	ldr.w	pc, [sp], #4
	nfy.err = -ENOTCONN;
    a67c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    a680:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    a682:	2302      	movs	r3, #2
    a684:	f8ad 3004 	strh.w	r3, [sp, #4]
	nfy.params = params;
    a688:	9105      	str	r1, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    a68a:	6988      	ldr	r0, [r1, #24]
    a68c:	466b      	mov	r3, sp
    a68e:	4a04      	ldr	r2, [pc, #16]	; (a6a0 <bt_gatt_indicate+0x34>)
    a690:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a694:	8a00      	ldrh	r0, [r0, #16]
    a696:	f7ff ff6b 	bl	a570 <bt_gatt_foreach_attr>
	return nfy.err;
    a69a:	9800      	ldr	r0, [sp, #0]
    a69c:	e7eb      	b.n	a676 <bt_gatt_indicate+0xa>
    a69e:	bf00      	nop
    a6a0:	0000a1a1 	.word	0x0000a1a1

0000a6a4 <sc_process>:
{
    a6a4:	b510      	push	{r4, lr}
    a6a6:	b082      	sub	sp, #8
    a6a8:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    a6aa:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    a6ae:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    a6b2:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    a6b6:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    a6ba:	f1a0 012c 	sub.w	r1, r0, #44	; 0x2c
    a6be:	f100 0428 	add.w	r4, r0, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a6c2:	f3bf 8f5b 	dmb	ish
    a6c6:	e854 2f00 	ldrex	r2, [r4]
    a6ca:	f022 0201 	bic.w	r2, r2, #1
    a6ce:	e844 2000 	strex	r0, r2, [r4]
    a6d2:	2800      	cmp	r0, #0
    a6d4:	d1f7      	bne.n	a6c6 <sc_process+0x22>
    a6d6:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    a6da:	2000      	movs	r0, #0
    a6dc:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0;
    a6e0:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    a6e4:	4a0e      	ldr	r2, [pc, #56]	; (a720 <sc_process+0x7c>)
    a6e6:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    a6ea:	4a0e      	ldr	r2, [pc, #56]	; (a724 <sc_process+0x80>)
    a6ec:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    a6f0:	aa01      	add	r2, sp, #4
    a6f2:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    a6f6:	2204      	movs	r2, #4
    a6f8:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    a6fc:	f7ff ffb6 	bl	a66c <bt_gatt_indicate>
    a700:	b108      	cbz	r0, a706 <sc_process+0x62>
}
    a702:	b002      	add	sp, #8
    a704:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a706:	f3bf 8f5b 	dmb	ish
    a70a:	e854 3f00 	ldrex	r3, [r4]
    a70e:	f043 0302 	orr.w	r3, r3, #2
    a712:	e844 3200 	strex	r2, r3, [r4]
    a716:	2a00      	cmp	r2, #0
    a718:	d1f7      	bne.n	a70a <sc_process+0x66>
    a71a:	f3bf 8f5b 	dmb	ish
    a71e:	e7f0      	b.n	a702 <sc_process+0x5e>
    a720:	2000bc00 	.word	0x2000bc00
    a724:	00009f1d 	.word	0x00009f1d

0000a728 <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    a728:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    a72a:	4603      	mov	r3, r0
    a72c:	4a03      	ldr	r2, [pc, #12]	; (a73c <bt_gatt_connected+0x14>)
    a72e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a732:	2001      	movs	r0, #1
    a734:	f7ff ff1c 	bl	a570 <bt_gatt_foreach_attr>
    a738:	bd08      	pop	{r3, pc}
    a73a:	bf00      	nop
    a73c:	0000a29d 	.word	0x0000a29d

0000a740 <bt_gatt_disconnected>:
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    a740:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    a742:	4603      	mov	r3, r0
    a744:	4a03      	ldr	r2, [pc, #12]	; (a754 <bt_gatt_disconnected+0x14>)
    a746:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a74a:	2001      	movs	r0, #1
    a74c:	f7ff ff10 	bl	a570 <bt_gatt_foreach_attr>
    a750:	bd08      	pop	{r3, pc}
    a752:	bf00      	nop
    a754:	0000a301 	.word	0x0000a301

0000a758 <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    a758:	4b11      	ldr	r3, [pc, #68]	; (a7a0 <get_io_capa+0x48>)
    a75a:	681b      	ldr	r3, [r3, #0]
    a75c:	b1db      	cbz	r3, a796 <get_io_capa+0x3e>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    a75e:	681a      	ldr	r2, [r3, #0]
    a760:	b152      	cbz	r2, a778 <get_io_capa+0x20>
    a762:	6859      	ldr	r1, [r3, #4]
    a764:	b141      	cbz	r1, a778 <get_io_capa+0x20>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    a766:	6899      	ldr	r1, [r3, #8]
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    a768:	b109      	cbz	r1, a76e <get_io_capa+0x16>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    a76a:	2004      	movs	r0, #4
    a76c:	4770      	bx	lr
	    (bt_auth->passkey_confirm || !sc_supported)) {
    a76e:	490d      	ldr	r1, [pc, #52]	; (a7a4 <get_io_capa+0x4c>)
    a770:	7809      	ldrb	r1, [r1, #0]
    a772:	b909      	cbnz	r1, a778 <get_io_capa+0x20>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    a774:	2004      	movs	r0, #4
    a776:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    a778:	490a      	ldr	r1, [pc, #40]	; (a7a4 <get_io_capa+0x4c>)
    a77a:	7809      	ldrb	r1, [r1, #0]
    a77c:	b121      	cbz	r1, a788 <get_io_capa+0x30>
    a77e:	b11a      	cbz	r2, a788 <get_io_capa+0x30>
	    bt_auth->passkey_confirm) {
    a780:	6899      	ldr	r1, [r3, #8]
	if (sc_supported && bt_auth->passkey_display &&
    a782:	b109      	cbz	r1, a788 <get_io_capa+0x30>
		return BT_SMP_IO_DISPLAY_YESNO;
    a784:	2001      	movs	r0, #1
    a786:	4770      	bx	lr
	}

	if (bt_auth->passkey_entry) {
    a788:	685b      	ldr	r3, [r3, #4]
    a78a:	b10b      	cbz	r3, a790 <get_io_capa+0x38>
		return BT_SMP_IO_KEYBOARD_ONLY;
    a78c:	2002      	movs	r0, #2
    a78e:	4770      	bx	lr
	}

	if (bt_auth->passkey_display) {
    a790:	b11a      	cbz	r2, a79a <get_io_capa+0x42>
		return BT_SMP_IO_DISPLAY_ONLY;
    a792:	2000      	movs	r0, #0
    a794:	4770      	bx	lr
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    a796:	2003      	movs	r0, #3
    a798:	4770      	bx	lr
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    a79a:	2003      	movs	r0, #3
}
    a79c:	4770      	bx	lr
    a79e:	bf00      	nop
    a7a0:	20002aa8 	.word	0x20002aa8
    a7a4:	20000aa4 	.word	0x20000aa4

0000a7a8 <get_pair_method>:

static u8_t get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    a7a8:	2904      	cmp	r1, #4
    a7aa:	d811      	bhi.n	a7d0 <get_pair_method+0x28>

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    a7ac:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    a7b0:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    a7b4:	4313      	orrs	r3, r2
    a7b6:	f013 0f04 	tst.w	r3, #4
    a7ba:	d00b      	beq.n	a7d4 <get_pair_method+0x2c>
{
    a7bc:	b510      	push	{r4, lr}
    a7be:	460c      	mov	r4, r1
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
    a7c0:	f7ff ffca 	bl	a758 <get_io_capa>
    a7c4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    a7c8:	4c03      	ldr	r4, [pc, #12]	; (a7d8 <get_pair_method+0x30>)
    a7ca:	4421      	add	r1, r4
    a7cc:	5c08      	ldrb	r0, [r1, r0]
    a7ce:	bd10      	pop	{r4, pc}
		return JUST_WORKS;
    a7d0:	2000      	movs	r0, #0
    a7d2:	4770      	bx	lr
		return JUST_WORKS;
    a7d4:	2000      	movs	r0, #0
    a7d6:	4770      	bx	lr
    a7d8:	00030f18 	.word	0x00030f18

0000a7dc <get_encryption_key_size>:
	/*
	 * The smaller value of the initiating and responding devices maximum
	 * encryption key length parameters shall be used as the encryption key
	 * size.
	 */
	return min(req->max_key_size, rsp->max_key_size);
    a7dc:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    a7e0:	f890 00a9 	ldrb.w	r0, [r0, #169]	; 0xa9
}
    a7e4:	4290      	cmp	r0, r2
    a7e6:	bf28      	it	cs
    a7e8:	4610      	movcs	r0, r2
    a7ea:	4770      	bx	lr

0000a7ec <xor_128>:
	return 0;
}

#if !defined(CONFIG_BT_SMP_SC_ONLY)
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
    a7ec:	b430      	push	{r4, r5}
	size_t len = 16;
    a7ee:	2310      	movs	r3, #16

	while (len--) {
    a7f0:	e007      	b.n	a802 <xor_128+0x16>
		*r++ = *p++ ^ *q++;
    a7f2:	7803      	ldrb	r3, [r0, #0]
    a7f4:	780d      	ldrb	r5, [r1, #0]
    a7f6:	406b      	eors	r3, r5
    a7f8:	7013      	strb	r3, [r2, #0]
	while (len--) {
    a7fa:	4623      	mov	r3, r4
		*r++ = *p++ ^ *q++;
    a7fc:	3201      	adds	r2, #1
    a7fe:	3101      	adds	r1, #1
    a800:	3001      	adds	r0, #1
	while (len--) {
    a802:	1e5c      	subs	r4, r3, #1
    a804:	2b00      	cmp	r3, #0
    a806:	d1f4      	bne.n	a7f2 <xor_128+0x6>
	}
}
    a808:	bc30      	pop	{r4, r5}
    a80a:	4770      	bx	lr

0000a80c <legacy_get_pair_method>:
static u8_t legacy_get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;
	u8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    a80c:	2904      	cmp	r1, #4
    a80e:	d819      	bhi.n	a844 <legacy_get_pair_method+0x38>
{
    a810:	b538      	push	{r3, r4, r5, lr}

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    a812:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    a816:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    a81a:	4313      	orrs	r3, r2
    a81c:	f013 0f04 	tst.w	r3, #4
    a820:	d012      	beq.n	a848 <legacy_get_pair_method+0x3c>
    a822:	460c      	mov	r4, r1
    a824:	4605      	mov	r5, r0
		return JUST_WORKS;
	}

	method = gen_method_legacy[remote_io][get_io_capa()];
    a826:	f7ff ff97 	bl	a758 <get_io_capa>
    a82a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    a82e:	4c08      	ldr	r4, [pc, #32]	; (a850 <legacy_get_pair_method+0x44>)
    a830:	4421      	add	r1, r4
    a832:	5c08      	ldrb	r0, [r1, r0]

	/* if both sides have KeyboardDisplay capabilities, initiator displays
	 * and responder inputs
	 */
	if (method == PASSKEY_ROLE) {
    a834:	2804      	cmp	r0, #4
    a836:	d000      	beq.n	a83a <legacy_get_pair_method+0x2e>
			method = PASSKEY_INPUT;
		}
	}

	return method;
}
    a838:	bd38      	pop	{r3, r4, r5, pc}
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a83a:	682b      	ldr	r3, [r5, #0]
    a83c:	78db      	ldrb	r3, [r3, #3]
    a83e:	b92b      	cbnz	r3, a84c <legacy_get_pair_method+0x40>
			method = PASSKEY_DISPLAY;
    a840:	2002      	movs	r0, #2
    a842:	bd38      	pop	{r3, r4, r5, pc}
		return JUST_WORKS;
    a844:	2000      	movs	r0, #0
    a846:	4770      	bx	lr
		return JUST_WORKS;
    a848:	2000      	movs	r0, #0
    a84a:	bd38      	pop	{r3, r4, r5, pc}
			method = PASSKEY_INPUT;
    a84c:	2001      	movs	r0, #1
    a84e:	e7f3      	b.n	a838 <legacy_get_pair_method+0x2c>
    a850:	00030efc 	.word	0x00030efc

0000a854 <get_auth>:

	return 0;
}

static u8_t get_auth(u8_t auth)
{
    a854:	b510      	push	{r4, lr}
	if (sc_supported) {
    a856:	4b09      	ldr	r3, [pc, #36]	; (a87c <get_auth+0x28>)
    a858:	781b      	ldrb	r3, [r3, #0]
    a85a:	b143      	cbz	r3, a86e <get_auth+0x1a>
		auth &= BT_SMP_AUTH_MASK_SC;
    a85c:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    a860:	f7ff ff7a 	bl	a758 <get_io_capa>
    a864:	2803      	cmp	r0, #3
    a866:	d005      	beq.n	a874 <get_auth+0x20>
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
    a868:	f044 0004 	orr.w	r0, r4, #4
	}

	return auth;
}
    a86c:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    a86e:	f000 0407 	and.w	r4, r0, #7
    a872:	e7f5      	b.n	a860 <get_auth+0xc>
		auth &= ~(BT_SMP_AUTH_MITM);
    a874:	f004 000b 	and.w	r0, r4, #11
    a878:	bd10      	pop	{r4, pc}
    a87a:	bf00      	nop
    a87c:	20000aa4 	.word	0x20000aa4

0000a880 <sec_level_reachable>:

static bool sec_level_reachable(struct bt_conn *conn)
{
    a880:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    a882:	7a43      	ldrb	r3, [r0, #9]
    a884:	3b01      	subs	r3, #1
    a886:	2b03      	cmp	r3, #3
    a888:	d818      	bhi.n	a8bc <sec_level_reachable+0x3c>
    a88a:	e8df f003 	tbb	[pc, r3]
    a88e:	0202      	.short	0x0202
    a890:	0a04      	.short	0x0a04
	case BT_SECURITY_LOW:
	case BT_SECURITY_MEDIUM:
		return true;
    a892:	2001      	movs	r0, #1
    a894:	bd08      	pop	{r3, pc}
	case BT_SECURITY_HIGH:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    a896:	f7ff ff5f 	bl	a758 <get_io_capa>
    a89a:	3803      	subs	r0, #3
    a89c:	bf18      	it	ne
    a89e:	2001      	movne	r0, #1
    a8a0:	bd08      	pop	{r3, pc}
	case BT_SECURITY_FIPS:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    a8a2:	f7ff ff59 	bl	a758 <get_io_capa>
    a8a6:	2803      	cmp	r0, #3
    a8a8:	d004      	beq.n	a8b4 <sec_level_reachable+0x34>
    a8aa:	4b05      	ldr	r3, [pc, #20]	; (a8c0 <sec_level_reachable+0x40>)
    a8ac:	781b      	ldrb	r3, [r3, #0]
    a8ae:	b91b      	cbnz	r3, a8b8 <sec_level_reachable+0x38>
    a8b0:	2000      	movs	r0, #0
    a8b2:	bd08      	pop	{r3, pc}
    a8b4:	2000      	movs	r0, #0
    a8b6:	bd08      	pop	{r3, pc}
    a8b8:	2001      	movs	r0, #1
    a8ba:	bd08      	pop	{r3, pc}
		       sc_supported;
	default:
		return false;
    a8bc:	2000      	movs	r0, #0
	}
}
    a8be:	bd08      	pop	{r3, pc}
    a8c0:	20000aa4 	.word	0x20000aa4

0000a8c4 <bt_smp_accept>:
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    a8c4:	2000      	movs	r0, #0
    a8c6:	b110      	cbz	r0, a8ce <bt_smp_accept+0xa>
		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    a8c8:	f06f 000b 	mvn.w	r0, #11
}
    a8cc:	4770      	bx	lr
		if (smp->chan.chan.conn) {
    a8ce:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    a8d2:	fb03 f300 	mul.w	r3, r3, r0
    a8d6:	4a07      	ldr	r2, [pc, #28]	; (a8f4 <bt_smp_accept+0x30>)
    a8d8:	58d3      	ldr	r3, [r2, r3]
    a8da:	b10b      	cbz	r3, a8e0 <bt_smp_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    a8dc:	3001      	adds	r0, #1
    a8de:	e7f2      	b.n	a8c6 <bt_smp_accept+0x2>
		smp->chan.chan.ops = &ops;
    a8e0:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    a8e4:	4a03      	ldr	r2, [pc, #12]	; (a8f4 <bt_smp_accept+0x30>)
    a8e6:	fb03 2300 	mla	r3, r3, r0, r2
    a8ea:	4a03      	ldr	r2, [pc, #12]	; (a8f8 <bt_smp_accept+0x34>)
    a8ec:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
    a8ee:	600b      	str	r3, [r1, #0]
		return 0;
    a8f0:	4770      	bx	lr
    a8f2:	bf00      	nop
    a8f4:	200008bc 	.word	0x200008bc
    a8f8:	2000bc40 	.word	0x2000bc40

0000a8fc <le_sc_supported>:
	/*
	 * If controller based ECC is to be used it must support
	 * "LE Read Local P-256 Public Key" and "LE Generate DH Key" commands.
	 * Otherwise LE SC are not supported.
	 */
	return (bt_dev.supported_commands[34] & 0x02) &&
    a8fc:	4b04      	ldr	r3, [pc, #16]	; (a910 <le_sc_supported+0x14>)
    a8fe:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    a902:	f000 0006 	and.w	r0, r0, #6
	       (bt_dev.supported_commands[34] & 0x04);
}
    a906:	2806      	cmp	r0, #6
    a908:	bf14      	ite	ne
    a90a:	2000      	movne	r0, #0
    a90c:	2001      	moveq	r0, #1
    a90e:	4770      	bx	lr
    a910:	2000b970 	.word	0x2000b970

0000a914 <smp_chan_get>:
{
    a914:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    a916:	2106      	movs	r1, #6
    a918:	f7fd fd18 	bl	834c <bt_l2cap_le_lookup_rx_cid>
}
    a91c:	bd08      	pop	{r3, pc}

0000a91e <smp_create_pdu>:
{
    a91e:	b538      	push	{r3, r4, r5, lr}
    a920:	460d      	mov	r5, r1
	buf = bt_l2cap_create_pdu(NULL, 0);
    a922:	2100      	movs	r1, #0
    a924:	4608      	mov	r0, r1
    a926:	f7fd fa58 	bl	7dda <bt_l2cap_create_pdu>
    a92a:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    a92c:	2101      	movs	r1, #1
    a92e:	3008      	adds	r0, #8
    a930:	f010 f954 	bl	1abdc <net_buf_simple_add>
	hdr->code = op;
    a934:	7005      	strb	r5, [r0, #0]
}
    a936:	4620      	mov	r0, r4
    a938:	bd38      	pop	{r3, r4, r5, pc}

0000a93a <smp_init>:
{
    a93a:	b510      	push	{r4, lr}
    a93c:	4604      	mov	r4, r0
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    a93e:	22e0      	movs	r2, #224	; 0xe0
    a940:	2100      	movs	r1, #0
    a942:	309c      	adds	r0, #156	; 0x9c
    a944:	f01f fc1c 	bl	2a180 <memset>
	if (bt_rand(smp->prnd, 16)) {
    a948:	2110      	movs	r1, #16
    a94a:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    a94e:	f006 fdcf 	bl	114f0 <bt_rand>
    a952:	b110      	cbz	r0, a95a <smp_init+0x20>
		return BT_SMP_ERR_UNSPECIFIED;
    a954:	2308      	movs	r3, #8
}
    a956:	4618      	mov	r0, r3
    a958:	bd10      	pop	{r4, pc}
    a95a:	4603      	mov	r3, r0
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    a95c:	349c      	adds	r4, #156	; 0x9c
    a95e:	f3bf 8f5b 	dmb	ish
    a962:	e854 2f00 	ldrex	r2, [r4]
    a966:	f042 0220 	orr.w	r2, r2, #32
    a96a:	e844 2100 	strex	r1, r2, [r4]
    a96e:	2900      	cmp	r1, #0
    a970:	d1f7      	bne.n	a962 <smp_init+0x28>
    a972:	f3bf 8f5b 	dmb	ish
	return 0;
    a976:	e7ee      	b.n	a956 <smp_init+0x1c>

0000a978 <display_passkey>:
{
    a978:	b538      	push	{r3, r4, r5, lr}
    a97a:	4604      	mov	r4, r0
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    a97c:	2104      	movs	r1, #4
    a97e:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    a982:	f006 fdb5 	bl	114f0 <bt_rand>
    a986:	b108      	cbz	r0, a98c <display_passkey+0x14>
		return BT_SMP_ERR_UNSPECIFIED;
    a988:	2008      	movs	r0, #8
}
    a98a:	bd38      	pop	{r3, r4, r5, pc}
	smp->passkey %= 1000000;
    a98c:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
    a990:	4909      	ldr	r1, [pc, #36]	; (a9b8 <display_passkey+0x40>)
    a992:	fba1 2103 	umull	r2, r1, r1, r3
    a996:	0c89      	lsrs	r1, r1, #18
    a998:	4a08      	ldr	r2, [pc, #32]	; (a9bc <display_passkey+0x44>)
    a99a:	fb02 3111 	mls	r1, r2, r1, r3
    a99e:	f8c4 1174 	str.w	r1, [r4, #372]	; 0x174
	smp->passkey_round = 0;
    a9a2:	2500      	movs	r5, #0
    a9a4:	f884 5178 	strb.w	r5, [r4, #376]	; 0x178
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    a9a8:	4b05      	ldr	r3, [pc, #20]	; (a9c0 <display_passkey+0x48>)
    a9aa:	681b      	ldr	r3, [r3, #0]
    a9ac:	681b      	ldr	r3, [r3, #0]
    a9ae:	6820      	ldr	r0, [r4, #0]
    a9b0:	4798      	blx	r3
	return 0;
    a9b2:	4628      	mov	r0, r5
    a9b4:	bd38      	pop	{r3, r4, r5, pc}
    a9b6:	bf00      	nop
    a9b8:	431bde83 	.word	0x431bde83
    a9bc:	000f4240 	.word	0x000f4240
    a9c0:	20002aa8 	.word	0x20002aa8

0000a9c4 <smp_send>:
{
    a9c4:	b510      	push	{r4, lr}
    a9c6:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    a9c8:	4613      	mov	r3, r2
    a9ca:	460a      	mov	r2, r1
    a9cc:	2106      	movs	r1, #6
    a9ce:	6800      	ldr	r0, [r0, #0]
    a9d0:	f7fd fa9b 	bl	7f0a <bt_l2cap_send_cb>
    a9d4:	f247 5230 	movw	r2, #30000	; 0x7530
    a9d8:	f504 71be 	add.w	r1, r4, #380	; 0x17c
    a9dc:	4801      	ldr	r0, [pc, #4]	; (a9e4 <smp_send+0x20>)
    a9de:	f01f fa45 	bl	29e6c <k_delayed_work_submit_to_queue>
    a9e2:	bd10      	pop	{r4, pc}
    a9e4:	20002c70 	.word	0x20002c70

0000a9e8 <sc_smp_send_dhkey_check>:
{
    a9e8:	b570      	push	{r4, r5, r6, lr}
    a9ea:	4604      	mov	r4, r0
    a9ec:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    a9ee:	2210      	movs	r2, #16
    a9f0:	210d      	movs	r1, #13
    a9f2:	6800      	ldr	r0, [r0, #0]
    a9f4:	f7ff ff93 	bl	a91e <smp_create_pdu>
	if (!buf) {
    a9f8:	b178      	cbz	r0, aa1a <sc_smp_send_dhkey_check+0x32>
    a9fa:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    a9fc:	2110      	movs	r1, #16
    a9fe:	3008      	adds	r0, #8
    aa00:	f010 f8ec 	bl	1abdc <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    aa04:	2210      	movs	r2, #16
    aa06:	4631      	mov	r1, r6
    aa08:	f7f5 fc5a 	bl	2c0 <memcpy>
	smp_send(smp, buf, NULL);
    aa0c:	2200      	movs	r2, #0
    aa0e:	4629      	mov	r1, r5
    aa10:	4620      	mov	r0, r4
    aa12:	f7ff ffd7 	bl	a9c4 <smp_send>
	return 0;
    aa16:	2000      	movs	r0, #0
    aa18:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    aa1a:	2008      	movs	r0, #8
}
    aa1c:	bd70      	pop	{r4, r5, r6, pc}
	...

0000aa20 <sc_send_public_key>:
{
    aa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa22:	4604      	mov	r4, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    aa24:	2240      	movs	r2, #64	; 0x40
    aa26:	210c      	movs	r1, #12
    aa28:	6800      	ldr	r0, [r0, #0]
    aa2a:	f7ff ff78 	bl	a91e <smp_create_pdu>
	if (!req_buf) {
    aa2e:	b1b0      	cbz	r0, aa5e <sc_send_public_key+0x3e>
    aa30:	4605      	mov	r5, r0
	req = net_buf_add(req_buf, sizeof(*req));
    aa32:	2140      	movs	r1, #64	; 0x40
    aa34:	3008      	adds	r0, #8
    aa36:	f010 f8d1 	bl	1abdc <net_buf_simple_add>
    aa3a:	4607      	mov	r7, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    aa3c:	4e09      	ldr	r6, [pc, #36]	; (aa64 <sc_send_public_key+0x44>)
    aa3e:	2220      	movs	r2, #32
    aa40:	4631      	mov	r1, r6
    aa42:	f7f5 fc3d 	bl	2c0 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    aa46:	2220      	movs	r2, #32
    aa48:	18b1      	adds	r1, r6, r2
    aa4a:	18b8      	adds	r0, r7, r2
    aa4c:	f7f5 fc38 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    aa50:	2200      	movs	r2, #0
    aa52:	4629      	mov	r1, r5
    aa54:	4620      	mov	r0, r4
    aa56:	f7ff ffb5 	bl	a9c4 <smp_send>
	return 0;
    aa5a:	2000      	movs	r0, #0
    aa5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    aa5e:	2008      	movs	r0, #8
}
    aa60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa62:	bf00      	nop
    aa64:	20000a64 	.word	0x20000a64

0000aa68 <send_pairing_rsp>:
{
    aa68:	b538      	push	{r3, r4, r5, lr}
    aa6a:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    aa6c:	2206      	movs	r2, #6
    aa6e:	2102      	movs	r1, #2
    aa70:	6800      	ldr	r0, [r0, #0]
    aa72:	f7ff ff54 	bl	a91e <smp_create_pdu>
	if (!rsp_buf) {
    aa76:	b180      	cbz	r0, aa9a <send_pairing_rsp+0x32>
    aa78:	4605      	mov	r5, r0
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    aa7a:	2106      	movs	r1, #6
    aa7c:	3008      	adds	r0, #8
    aa7e:	f010 f8ad 	bl	1abdc <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    aa82:	2206      	movs	r2, #6
    aa84:	f104 01ad 	add.w	r1, r4, #173	; 0xad
    aa88:	f7f5 fc1a 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    aa8c:	2200      	movs	r2, #0
    aa8e:	4629      	mov	r1, r5
    aa90:	4620      	mov	r0, r4
    aa92:	f7ff ff97 	bl	a9c4 <smp_send>
	return 0;
    aa96:	2000      	movs	r0, #0
    aa98:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    aa9a:	2008      	movs	r0, #8
}
    aa9c:	bd38      	pop	{r3, r4, r5, pc}

0000aa9e <smp_send_pairing_random>:
{
    aa9e:	b538      	push	{r3, r4, r5, lr}
    aaa0:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    aaa2:	2210      	movs	r2, #16
    aaa4:	2104      	movs	r1, #4
    aaa6:	6800      	ldr	r0, [r0, #0]
    aaa8:	f7ff ff39 	bl	a91e <smp_create_pdu>
	if (!rsp_buf) {
    aaac:	b180      	cbz	r0, aad0 <smp_send_pairing_random+0x32>
    aaae:	4605      	mov	r5, r0
	req = net_buf_add(rsp_buf, sizeof(*req));
    aab0:	2110      	movs	r1, #16
    aab2:	3008      	adds	r0, #8
    aab4:	f010 f892 	bl	1abdc <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    aab8:	2210      	movs	r2, #16
    aaba:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    aabe:	f7f5 fbff 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    aac2:	2200      	movs	r2, #0
    aac4:	4629      	mov	r1, r5
    aac6:	4620      	mov	r0, r4
    aac8:	f7ff ff7c 	bl	a9c4 <smp_send>
	return 0;
    aacc:	2000      	movs	r0, #0
    aace:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    aad0:	2008      	movs	r0, #8
}
    aad2:	bd38      	pop	{r3, r4, r5, pc}

0000aad4 <bt_smp_aes_cmac>:
{
    aad4:	b570      	push	{r4, r5, r6, lr}
    aad6:	b0c2      	sub	sp, #264	; 0x108
    aad8:	460c      	mov	r4, r1
    aada:	4615      	mov	r5, r2
    aadc:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    aade:	aa16      	add	r2, sp, #88	; 0x58
    aae0:	4601      	mov	r1, r0
    aae2:	4668      	mov	r0, sp
    aae4:	f7f8 fe57 	bl	3796 <tc_cmac_setup>
    aae8:	b180      	cbz	r0, ab0c <bt_smp_aes_cmac+0x38>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    aaea:	462a      	mov	r2, r5
    aaec:	4621      	mov	r1, r4
    aaee:	4668      	mov	r0, sp
    aaf0:	f7f8 fe7e 	bl	37f0 <tc_cmac_update>
    aaf4:	b168      	cbz	r0, ab12 <bt_smp_aes_cmac+0x3e>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    aaf6:	4669      	mov	r1, sp
    aaf8:	4630      	mov	r0, r6
    aafa:	f7f8 fee3 	bl	38c4 <tc_cmac_final>
    aafe:	b110      	cbz	r0, ab06 <bt_smp_aes_cmac+0x32>
	return 0;
    ab00:	2000      	movs	r0, #0
}
    ab02:	b042      	add	sp, #264	; 0x108
    ab04:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    ab06:	f06f 0004 	mvn.w	r0, #4
    ab0a:	e7fa      	b.n	ab02 <bt_smp_aes_cmac+0x2e>
		return -EIO;
    ab0c:	f06f 0004 	mvn.w	r0, #4
    ab10:	e7f7      	b.n	ab02 <bt_smp_aes_cmac+0x2e>
		return -EIO;
    ab12:	f06f 0004 	mvn.w	r0, #4
    ab16:	e7f4      	b.n	ab02 <bt_smp_aes_cmac+0x2e>

0000ab18 <smp_sign_buf>:
{
    ab18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ab1c:	b08b      	sub	sp, #44	; 0x2c
    ab1e:	460d      	mov	r5, r1
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    ab20:	188f      	adds	r7, r1, r2
    ab22:	683b      	ldr	r3, [r7, #0]
    ab24:	9309      	str	r3, [sp, #36]	; 0x24
	sys_mem_swap(m, len + sizeof(cnt));
    ab26:	1d16      	adds	r6, r2, #4
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    ab28:	2300      	movs	r3, #0
    ab2a:	e006      	b.n	ab3a <smp_sign_buf+0x22>
		u8_t tmp = ((u8_t *)buf)[i];
    ab2c:	5cea      	ldrb	r2, [r5, r3]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    ab2e:	1af1      	subs	r1, r6, r3
    ab30:	3901      	subs	r1, #1
    ab32:	5c6c      	ldrb	r4, [r5, r1]
    ab34:	54ec      	strb	r4, [r5, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    ab36:	546a      	strb	r2, [r5, r1]
	for (i = 0; i < (length/2); i++) {
    ab38:	3301      	adds	r3, #1
    ab3a:	ea4f 0856 	mov.w	r8, r6, lsr #1
    ab3e:	4543      	cmp	r3, r8
    ab40:	d3f4      	bcc.n	ab2c <smp_sign_buf+0x14>
	src += length - 1;
    ab42:	300f      	adds	r0, #15
    ab44:	2410      	movs	r4, #16
    ab46:	ab05      	add	r3, sp, #20
    ab48:	e004      	b.n	ab54 <smp_sign_buf+0x3c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ab4a:	7802      	ldrb	r2, [r0, #0]
    ab4c:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    ab4e:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ab50:	3801      	subs	r0, #1
    ab52:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    ab54:	2c00      	cmp	r4, #0
    ab56:	d1f8      	bne.n	ab4a <smp_sign_buf+0x32>
	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    ab58:	ab01      	add	r3, sp, #4
    ab5a:	4632      	mov	r2, r6
    ab5c:	4629      	mov	r1, r5
    ab5e:	a805      	add	r0, sp, #20
    ab60:	f7ff ffb8 	bl	aad4 <bt_smp_aes_cmac>
	if (err) {
    ab64:	4681      	mov	r9, r0
    ab66:	bb08      	cbnz	r0, abac <smp_sign_buf+0x94>
    ab68:	4623      	mov	r3, r4
    ab6a:	e009      	b.n	ab80 <smp_sign_buf+0x68>
		u8_t tmp = ((u8_t *)buf)[i];
    ab6c:	aa01      	add	r2, sp, #4
    ab6e:	5cd0      	ldrb	r0, [r2, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    ab70:	f1c3 010f 	rsb	r1, r3, #15
    ab74:	f812 e001 	ldrb.w	lr, [r2, r1]
    ab78:	f802 e003 	strb.w	lr, [r2, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    ab7c:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
    ab7e:	3301      	adds	r3, #1
    ab80:	2b07      	cmp	r3, #7
    ab82:	d9f3      	bls.n	ab6c <smp_sign_buf+0x54>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    ab84:	2204      	movs	r2, #4
    ab86:	a909      	add	r1, sp, #36	; 0x24
    ab88:	a802      	add	r0, sp, #8
    ab8a:	f7f5 fb99 	bl	2c0 <memcpy>
    ab8e:	e006      	b.n	ab9e <smp_sign_buf+0x86>
		u8_t tmp = ((u8_t *)buf)[i];
    ab90:	5d2a      	ldrb	r2, [r5, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    ab92:	1b33      	subs	r3, r6, r4
    ab94:	3b01      	subs	r3, #1
    ab96:	5ce9      	ldrb	r1, [r5, r3]
    ab98:	5529      	strb	r1, [r5, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    ab9a:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
    ab9c:	3401      	adds	r4, #1
    ab9e:	45a0      	cmp	r8, r4
    aba0:	d8f6      	bhi.n	ab90 <smp_sign_buf+0x78>
	memcpy(sig, tmp + 4, 12);
    aba2:	220c      	movs	r2, #12
    aba4:	a902      	add	r1, sp, #8
    aba6:	4638      	mov	r0, r7
    aba8:	f7f5 fb8a 	bl	2c0 <memcpy>
}
    abac:	4648      	mov	r0, r9
    abae:	b00b      	add	sp, #44	; 0x2c
    abb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000abb4 <smp_f4>:
{
    abb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    abb6:	b097      	sub	sp, #92	; 0x5c
    abb8:	9e1c      	ldr	r6, [sp, #112]	; 0x70
	src += length - 1;
    abba:	301f      	adds	r0, #31
    abbc:	2420      	movs	r4, #32
    abbe:	ad01      	add	r5, sp, #4
    abc0:	e004      	b.n	abcc <smp_f4+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    abc2:	7807      	ldrb	r7, [r0, #0]
    abc4:	702f      	strb	r7, [r5, #0]
	for (; length > 0; length--) {
    abc6:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    abc8:	3801      	subs	r0, #1
    abca:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    abcc:	2c00      	cmp	r4, #0
    abce:	d1f8      	bne.n	abc2 <smp_f4+0xe>
	src += length - 1;
    abd0:	311f      	adds	r1, #31
    abd2:	2020      	movs	r0, #32
    abd4:	ac09      	add	r4, sp, #36	; 0x24
    abd6:	e004      	b.n	abe2 <smp_f4+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    abd8:	780d      	ldrb	r5, [r1, #0]
    abda:	7025      	strb	r5, [r4, #0]
	for (; length > 0; length--) {
    abdc:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    abde:	3901      	subs	r1, #1
    abe0:	3401      	adds	r4, #1
	for (; length > 0; length--) {
    abe2:	2800      	cmp	r0, #0
    abe4:	d1f8      	bne.n	abd8 <smp_f4+0x24>
	m[64] = z;
    abe6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	src += length - 1;
    abea:	320f      	adds	r2, #15
    abec:	2410      	movs	r4, #16
    abee:	ab12      	add	r3, sp, #72	; 0x48
    abf0:	e004      	b.n	abfc <smp_f4+0x48>
		*((u8_t *)dst++) = *((u8_t *)src--);
    abf2:	7811      	ldrb	r1, [r2, #0]
    abf4:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
    abf6:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    abf8:	3a01      	subs	r2, #1
    abfa:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    abfc:	2c00      	cmp	r4, #0
    abfe:	d1f8      	bne.n	abf2 <smp_f4+0x3e>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    ac00:	4633      	mov	r3, r6
    ac02:	2241      	movs	r2, #65	; 0x41
    ac04:	a901      	add	r1, sp, #4
    ac06:	a812      	add	r0, sp, #72	; 0x48
    ac08:	f7ff ff64 	bl	aad4 <bt_smp_aes_cmac>
	if (err) {
    ac0c:	4605      	mov	r5, r0
    ac0e:	b138      	cbz	r0, ac20 <smp_f4+0x6c>
    ac10:	e008      	b.n	ac24 <smp_f4+0x70>
		u8_t tmp = ((u8_t *)buf)[i];
    ac12:	5d32      	ldrb	r2, [r6, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    ac14:	f1c4 030f 	rsb	r3, r4, #15
    ac18:	5cf1      	ldrb	r1, [r6, r3]
    ac1a:	5531      	strb	r1, [r6, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    ac1c:	54f2      	strb	r2, [r6, r3]
	for (i = 0; i < (length/2); i++) {
    ac1e:	3401      	adds	r4, #1
    ac20:	2c07      	cmp	r4, #7
    ac22:	d9f6      	bls.n	ac12 <smp_f4+0x5e>
}
    ac24:	4628      	mov	r0, r5
    ac26:	b017      	add	sp, #92	; 0x5c
    ac28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000ac2c <sc_smp_check_confirm>:
	switch (smp->method) {
    ac2c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    ac30:	2b03      	cmp	r3, #3
    ac32:	d827      	bhi.n	ac84 <sc_smp_check_confirm+0x58>
    ac34:	e8df f003 	tbb	[pc, r3]
    ac38:	0d02020d 	.word	0x0d02020d
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    ac3c:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
    ac40:	f890 2178 	ldrb.w	r2, [r0, #376]	; 0x178
    ac44:	40d3      	lsrs	r3, r2
    ac46:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    ac4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ac4e:	b2db      	uxtb	r3, r3
		break;
    ac50:	e000      	b.n	ac54 <sc_smp_check_confirm+0x28>
		r = 0;
    ac52:	2300      	movs	r3, #0
{
    ac54:	b510      	push	{r4, lr}
    ac56:	b086      	sub	sp, #24
    ac58:	4604      	mov	r4, r0
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    ac5a:	aa02      	add	r2, sp, #8
    ac5c:	9200      	str	r2, [sp, #0]
    ac5e:	f100 02d3 	add.w	r2, r0, #211	; 0xd3
    ac62:	490a      	ldr	r1, [pc, #40]	; (ac8c <sc_smp_check_confirm+0x60>)
    ac64:	30f3      	adds	r0, #243	; 0xf3
    ac66:	f7ff ffa5 	bl	abb4 <smp_f4>
    ac6a:	b110      	cbz	r0, ac72 <sc_smp_check_confirm+0x46>
		return BT_SMP_ERR_UNSPECIFIED;
    ac6c:	2008      	movs	r0, #8
}
    ac6e:	b006      	add	sp, #24
    ac70:	bd10      	pop	{r4, pc}
	if (memcmp(smp->pcnf, cfm, 16)) {
    ac72:	2210      	movs	r2, #16
    ac74:	a902      	add	r1, sp, #8
    ac76:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    ac7a:	f01f f9ed 	bl	2a058 <memcmp>
    ac7e:	b118      	cbz	r0, ac88 <sc_smp_check_confirm+0x5c>
		return BT_SMP_ERR_CONFIRM_FAILED;
    ac80:	2004      	movs	r0, #4
    ac82:	e7f4      	b.n	ac6e <sc_smp_check_confirm+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    ac84:	2008      	movs	r0, #8
    ac86:	4770      	bx	lr
	return 0;
    ac88:	2000      	movs	r0, #0
    ac8a:	e7f0      	b.n	ac6e <sc_smp_check_confirm+0x42>
    ac8c:	20000a64 	.word	0x20000a64

0000ac90 <smp_f5>:
{
    ac90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ac94:	b09b      	sub	sp, #108	; 0x6c
    ac96:	4604      	mov	r4, r0
    ac98:	460e      	mov	r6, r1
    ac9a:	4615      	mov	r5, r2
    ac9c:	461f      	mov	r7, r3
    ac9e:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
    aca2:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	u8_t m[53] = { 0x00, /* counter */
    aca6:	2235      	movs	r2, #53	; 0x35
    aca8:	2100      	movs	r1, #0
    acaa:	a80c      	add	r0, sp, #48	; 0x30
    acac:	f01f fa68 	bl	2a180 <memset>
    acb0:	2362      	movs	r3, #98	; 0x62
    acb2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    acb6:	2374      	movs	r3, #116	; 0x74
    acb8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    acbc:	236c      	movs	r3, #108	; 0x6c
    acbe:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    acc2:	2365      	movs	r3, #101	; 0x65
    acc4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    acc8:	2301      	movs	r3, #1
    acca:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
	src += length - 1;
    acce:	f104 001f 	add.w	r0, r4, #31
    acd2:	2320      	movs	r3, #32
    acd4:	466a      	mov	r2, sp
    acd6:	e004      	b.n	ace2 <smp_f5+0x52>
		*((u8_t *)dst++) = *((u8_t *)src--);
    acd8:	7801      	ldrb	r1, [r0, #0]
    acda:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    acdc:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    acde:	3801      	subs	r0, #1
    ace0:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    ace2:	2b00      	cmp	r3, #0
    ace4:	d1f8      	bne.n	acd8 <smp_f5+0x48>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    ace6:	ab08      	add	r3, sp, #32
    ace8:	2220      	movs	r2, #32
    acea:	4669      	mov	r1, sp
    acec:	4838      	ldr	r0, [pc, #224]	; (add0 <smp_f5+0x140>)
    acee:	f7ff fef1 	bl	aad4 <bt_smp_aes_cmac>
	if (err) {
    acf2:	4686      	mov	lr, r0
    acf4:	2800      	cmp	r0, #0
    acf6:	d166      	bne.n	adc6 <smp_f5+0x136>
	src += length - 1;
    acf8:	360f      	adds	r6, #15
    acfa:	2310      	movs	r3, #16
    acfc:	f10d 0235 	add.w	r2, sp, #53	; 0x35
    ad00:	e004      	b.n	ad0c <smp_f5+0x7c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad02:	7831      	ldrb	r1, [r6, #0]
    ad04:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    ad06:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad08:	3e01      	subs	r6, #1
    ad0a:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    ad0c:	2b00      	cmp	r3, #0
    ad0e:	d1f8      	bne.n	ad02 <smp_f5+0x72>
	src += length - 1;
    ad10:	350f      	adds	r5, #15
    ad12:	2310      	movs	r3, #16
    ad14:	f10d 0245 	add.w	r2, sp, #69	; 0x45
    ad18:	e004      	b.n	ad24 <smp_f5+0x94>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad1a:	7829      	ldrb	r1, [r5, #0]
    ad1c:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    ad1e:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad20:	3d01      	subs	r5, #1
    ad22:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    ad24:	2b00      	cmp	r3, #0
    ad26:	d1f8      	bne.n	ad1a <smp_f5+0x8a>
	m[37] = a1->type;
    ad28:	f817 3b06 	ldrb.w	r3, [r7], #6
    ad2c:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	src += length - 1;
    ad30:	2306      	movs	r3, #6
    ad32:	f10d 0256 	add.w	r2, sp, #86	; 0x56
    ad36:	e004      	b.n	ad42 <smp_f5+0xb2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad38:	7839      	ldrb	r1, [r7, #0]
    ad3a:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    ad3c:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad3e:	3f01      	subs	r7, #1
    ad40:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    ad42:	2b00      	cmp	r3, #0
    ad44:	d1f8      	bne.n	ad38 <smp_f5+0xa8>
	m[44] = a2->type;
    ad46:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ad48:	f813 2b06 	ldrb.w	r2, [r3], #6
    ad4c:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
	src += length - 1;
    ad50:	2406      	movs	r4, #6
    ad52:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
    ad56:	e004      	b.n	ad62 <smp_f5+0xd2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad58:	7819      	ldrb	r1, [r3, #0]
    ad5a:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    ad5c:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad5e:	3b01      	subs	r3, #1
    ad60:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    ad62:	2c00      	cmp	r4, #0
    ad64:	d1f8      	bne.n	ad58 <smp_f5+0xc8>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    ad66:	4643      	mov	r3, r8
    ad68:	2235      	movs	r2, #53	; 0x35
    ad6a:	a90c      	add	r1, sp, #48	; 0x30
    ad6c:	a808      	add	r0, sp, #32
    ad6e:	f7ff feb1 	bl	aad4 <bt_smp_aes_cmac>
	if (err) {
    ad72:	4686      	mov	lr, r0
    ad74:	bb38      	cbnz	r0, adc6 <smp_f5+0x136>
    ad76:	4623      	mov	r3, r4
    ad78:	e00a      	b.n	ad90 <smp_f5+0x100>
		u8_t tmp = ((u8_t *)buf)[i];
    ad7a:	f818 1003 	ldrb.w	r1, [r8, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    ad7e:	f1c3 020f 	rsb	r2, r3, #15
    ad82:	f818 0002 	ldrb.w	r0, [r8, r2]
    ad86:	f808 0003 	strb.w	r0, [r8, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    ad8a:	f808 1002 	strb.w	r1, [r8, r2]
	for (i = 0; i < (length/2); i++) {
    ad8e:	3301      	adds	r3, #1
    ad90:	2b07      	cmp	r3, #7
    ad92:	d9f2      	bls.n	ad7a <smp_f5+0xea>
	m[0] = 0x01;
    ad94:	a91a      	add	r1, sp, #104	; 0x68
    ad96:	2301      	movs	r3, #1
    ad98:	f801 3d38 	strb.w	r3, [r1, #-56]!
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    ad9c:	464b      	mov	r3, r9
    ad9e:	2235      	movs	r2, #53	; 0x35
    ada0:	a808      	add	r0, sp, #32
    ada2:	f7ff fe97 	bl	aad4 <bt_smp_aes_cmac>
	if (err) {
    ada6:	4686      	mov	lr, r0
    ada8:	b158      	cbz	r0, adc2 <smp_f5+0x132>
    adaa:	e00c      	b.n	adc6 <smp_f5+0x136>
		u8_t tmp = ((u8_t *)buf)[i];
    adac:	f819 2004 	ldrb.w	r2, [r9, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    adb0:	f1c4 030f 	rsb	r3, r4, #15
    adb4:	f819 1003 	ldrb.w	r1, [r9, r3]
    adb8:	f809 1004 	strb.w	r1, [r9, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    adbc:	f809 2003 	strb.w	r2, [r9, r3]
	for (i = 0; i < (length/2); i++) {
    adc0:	3401      	adds	r4, #1
    adc2:	2c07      	cmp	r4, #7
    adc4:	d9f2      	bls.n	adac <smp_f5+0x11c>
}
    adc6:	4670      	mov	r0, lr
    adc8:	b01b      	add	sp, #108	; 0x6c
    adca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    adce:	bf00      	nop
    add0:	00030f34 	.word	0x00030f34

0000add4 <smp_f6>:
{
    add4:	b5f0      	push	{r4, r5, r6, r7, lr}
    add6:	b097      	sub	sp, #92	; 0x5c
    add8:	4604      	mov	r4, r0
    adda:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    addc:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    adde:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	src += length - 1;
    ade0:	310f      	adds	r1, #15
    ade2:	2010      	movs	r0, #16
    ade4:	f10d 0e04 	add.w	lr, sp, #4
    ade8:	e007      	b.n	adfa <smp_f6+0x26>
		*((u8_t *)dst++) = *((u8_t *)src--);
    adea:	f891 c000 	ldrb.w	ip, [r1]
    adee:	f88e c000 	strb.w	ip, [lr]
	for (; length > 0; length--) {
    adf2:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    adf4:	3901      	subs	r1, #1
    adf6:	f10e 0e01 	add.w	lr, lr, #1
	for (; length > 0; length--) {
    adfa:	2800      	cmp	r0, #0
    adfc:	d1f5      	bne.n	adea <smp_f6+0x16>
	src += length - 1;
    adfe:	320f      	adds	r2, #15
    ae00:	2110      	movs	r1, #16
    ae02:	a805      	add	r0, sp, #20
    ae04:	e006      	b.n	ae14 <smp_f6+0x40>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae06:	f892 e000 	ldrb.w	lr, [r2]
    ae0a:	f880 e000 	strb.w	lr, [r0]
	for (; length > 0; length--) {
    ae0e:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae10:	3a01      	subs	r2, #1
    ae12:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    ae14:	2900      	cmp	r1, #0
    ae16:	d1f6      	bne.n	ae06 <smp_f6+0x32>
	src += length - 1;
    ae18:	330f      	adds	r3, #15
    ae1a:	2210      	movs	r2, #16
    ae1c:	a909      	add	r1, sp, #36	; 0x24
    ae1e:	e004      	b.n	ae2a <smp_f6+0x56>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae20:	7818      	ldrb	r0, [r3, #0]
    ae22:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    ae24:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae26:	3b01      	subs	r3, #1
    ae28:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    ae2a:	2a00      	cmp	r2, #0
    ae2c:	d1f8      	bne.n	ae20 <smp_f6+0x4c>
	src += length - 1;
    ae2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    ae30:	3302      	adds	r3, #2
    ae32:	2203      	movs	r2, #3
    ae34:	a90d      	add	r1, sp, #52	; 0x34
    ae36:	e004      	b.n	ae42 <smp_f6+0x6e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae38:	7818      	ldrb	r0, [r3, #0]
    ae3a:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    ae3c:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae3e:	3b01      	subs	r3, #1
    ae40:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    ae42:	2a00      	cmp	r2, #0
    ae44:	d1f8      	bne.n	ae38 <smp_f6+0x64>
	m[51] = a1->type;
    ae46:	4631      	mov	r1, r6
    ae48:	f811 3b01 	ldrb.w	r3, [r1], #1
    ae4c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(m + 52, a1->a.val, 6);
    ae50:	2206      	movs	r2, #6
    ae52:	a80e      	add	r0, sp, #56	; 0x38
    ae54:	f7f5 fa34 	bl	2c0 <memcpy>
	src += length - 1;
    ae58:	3606      	adds	r6, #6
    ae5a:	2306      	movs	r3, #6
    ae5c:	aa0e      	add	r2, sp, #56	; 0x38
    ae5e:	e004      	b.n	ae6a <smp_f6+0x96>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae60:	7831      	ldrb	r1, [r6, #0]
    ae62:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    ae64:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae66:	3e01      	subs	r6, #1
    ae68:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    ae6a:	2b00      	cmp	r3, #0
    ae6c:	d1f8      	bne.n	ae60 <smp_f6+0x8c>
	m[58] = a2->type;
    ae6e:	4629      	mov	r1, r5
    ae70:	f811 3b01 	ldrb.w	r3, [r1], #1
    ae74:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	memcpy(m + 59, a2->a.val, 6);
    ae78:	2206      	movs	r2, #6
    ae7a:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
    ae7e:	f7f5 fa1f 	bl	2c0 <memcpy>
	src += length - 1;
    ae82:	3506      	adds	r5, #6
    ae84:	2306      	movs	r3, #6
    ae86:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
    ae8a:	e004      	b.n	ae96 <smp_f6+0xc2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae8c:	7829      	ldrb	r1, [r5, #0]
    ae8e:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    ae90:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae92:	3d01      	subs	r5, #1
    ae94:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    ae96:	2b00      	cmp	r3, #0
    ae98:	d1f8      	bne.n	ae8c <smp_f6+0xb8>
	src += length - 1;
    ae9a:	f104 000f 	add.w	r0, r4, #15
    ae9e:	2410      	movs	r4, #16
    aea0:	ab12      	add	r3, sp, #72	; 0x48
    aea2:	e004      	b.n	aeae <smp_f6+0xda>
		*((u8_t *)dst++) = *((u8_t *)src--);
    aea4:	7802      	ldrb	r2, [r0, #0]
    aea6:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    aea8:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    aeaa:	3801      	subs	r0, #1
    aeac:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    aeae:	2c00      	cmp	r4, #0
    aeb0:	d1f8      	bne.n	aea4 <smp_f6+0xd0>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    aeb2:	463b      	mov	r3, r7
    aeb4:	2241      	movs	r2, #65	; 0x41
    aeb6:	a901      	add	r1, sp, #4
    aeb8:	a812      	add	r0, sp, #72	; 0x48
    aeba:	f7ff fe0b 	bl	aad4 <bt_smp_aes_cmac>
	if (err) {
    aebe:	4605      	mov	r5, r0
    aec0:	b138      	cbz	r0, aed2 <smp_f6+0xfe>
    aec2:	e008      	b.n	aed6 <smp_f6+0x102>
		u8_t tmp = ((u8_t *)buf)[i];
    aec4:	5d3a      	ldrb	r2, [r7, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    aec6:	f1c4 030f 	rsb	r3, r4, #15
    aeca:	5cf9      	ldrb	r1, [r7, r3]
    aecc:	5539      	strb	r1, [r7, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    aece:	54fa      	strb	r2, [r7, r3]
	for (i = 0; i < (length/2); i++) {
    aed0:	3401      	adds	r4, #1
    aed2:	2c07      	cmp	r4, #7
    aed4:	d9f6      	bls.n	aec4 <smp_f6+0xf0>
}
    aed6:	4628      	mov	r0, r5
    aed8:	b017      	add	sp, #92	; 0x5c
    aeda:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000aedc <compute_and_send_master_dhcheck>:
{
    aedc:	b5f0      	push	{r4, r5, r6, r7, lr}
    aede:	b08d      	sub	sp, #52	; 0x34
    aee0:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    aee2:	2210      	movs	r2, #16
    aee4:	2100      	movs	r1, #0
    aee6:	eb0d 0002 	add.w	r0, sp, r2
    aeea:	f01f f949 	bl	2a180 <memset>
	switch (smp->method) {
    aeee:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    aef2:	2b03      	cmp	r3, #3
    aef4:	d84a      	bhi.n	af8c <compute_and_send_master_dhcheck+0xb0>
    aef6:	e8df f003 	tbb	[pc, r3]
    aefa:	0208      	.short	0x0208
    aefc:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    aefe:	2204      	movs	r2, #4
    af00:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    af04:	a804      	add	r0, sp, #16
    af06:	f7f5 f9db 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    af0a:	f104 06c3 	add.w	r6, r4, #195	; 0xc3
    af0e:	f104 07d3 	add.w	r7, r4, #211	; 0xd3
		   &smp->chan.chan.conn->le.init_addr,
    af12:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    af14:	f103 0256 	add.w	r2, r3, #86	; 0x56
    af18:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    af1c:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    af20:	9102      	str	r1, [sp, #8]
    af22:	9501      	str	r5, [sp, #4]
    af24:	9200      	str	r2, [sp, #0]
    af26:	334f      	adds	r3, #79	; 0x4f
    af28:	463a      	mov	r2, r7
    af2a:	4631      	mov	r1, r6
    af2c:	f204 1033 	addw	r0, r4, #307	; 0x133
    af30:	f7ff feae 	bl	ac90 <smp_f5>
    af34:	b110      	cbz	r0, af3c <compute_and_send_master_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    af36:	2008      	movs	r0, #8
}
    af38:	b00d      	add	sp, #52	; 0x34
    af3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    af3c:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    af40:	6823      	ldr	r3, [r4, #0]
    af42:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    af46:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    af48:	a808      	add	r0, sp, #32
    af4a:	9003      	str	r0, [sp, #12]
    af4c:	9302      	str	r3, [sp, #8]
    af4e:	9101      	str	r1, [sp, #4]
    af50:	9200      	str	r2, [sp, #0]
    af52:	ab04      	add	r3, sp, #16
    af54:	463a      	mov	r2, r7
    af56:	4631      	mov	r1, r6
    af58:	4628      	mov	r0, r5
    af5a:	f7ff ff3b 	bl	add4 <smp_f6>
    af5e:	b108      	cbz	r0, af64 <compute_and_send_master_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    af60:	2008      	movs	r0, #8
    af62:	e7e9      	b.n	af38 <compute_and_send_master_dhcheck+0x5c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    af64:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    af68:	f3bf 8f5b 	dmb	ish
    af6c:	e853 2f00 	ldrex	r2, [r3]
    af70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    af74:	e843 2100 	strex	r1, r2, [r3]
    af78:	2900      	cmp	r1, #0
    af7a:	d1f7      	bne.n	af6c <compute_and_send_master_dhcheck+0x90>
    af7c:	f3bf 8f5b 	dmb	ish
	sc_smp_send_dhkey_check(smp, e);
    af80:	a908      	add	r1, sp, #32
    af82:	4620      	mov	r0, r4
    af84:	f7ff fd30 	bl	a9e8 <sc_smp_send_dhkey_check>
	return 0;
    af88:	2000      	movs	r0, #0
    af8a:	e7d5      	b.n	af38 <compute_and_send_master_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    af8c:	2008      	movs	r0, #8
    af8e:	e7d3      	b.n	af38 <compute_and_send_master_dhcheck+0x5c>

0000af90 <compute_and_check_and_send_slave_dhcheck>:
{
    af90:	b5f0      	push	{r4, r5, r6, r7, lr}
    af92:	b091      	sub	sp, #68	; 0x44
    af94:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    af96:	2210      	movs	r2, #16
    af98:	2100      	movs	r1, #0
    af9a:	eb0d 0002 	add.w	r0, sp, r2
    af9e:	f01f f8ef 	bl	2a180 <memset>
	switch (smp->method) {
    afa2:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    afa6:	2b03      	cmp	r3, #3
    afa8:	d866      	bhi.n	b078 <compute_and_check_and_send_slave_dhcheck+0xe8>
    afaa:	e8df f003 	tbb	[pc, r3]
    afae:	0208      	.short	0x0208
    afb0:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    afb2:	2204      	movs	r2, #4
    afb4:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    afb8:	a804      	add	r0, sp, #16
    afba:	f7f5 f981 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    afbe:	f104 06d3 	add.w	r6, r4, #211	; 0xd3
    afc2:	f104 07c3 	add.w	r7, r4, #195	; 0xc3
		   &smp->chan.chan.conn->le.init_addr,
    afc6:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    afc8:	f103 0256 	add.w	r2, r3, #86	; 0x56
    afcc:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    afd0:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    afd4:	9102      	str	r1, [sp, #8]
    afd6:	9501      	str	r5, [sp, #4]
    afd8:	9200      	str	r2, [sp, #0]
    afda:	334f      	adds	r3, #79	; 0x4f
    afdc:	463a      	mov	r2, r7
    afde:	4631      	mov	r1, r6
    afe0:	f204 1033 	addw	r0, r4, #307	; 0x133
    afe4:	f7ff fe54 	bl	ac90 <smp_f5>
    afe8:	b110      	cbz	r0, aff0 <compute_and_check_and_send_slave_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    afea:	2008      	movs	r0, #8
}
    afec:	b011      	add	sp, #68	; 0x44
    afee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    aff0:	f104 02ad 	add.w	r2, r4, #173	; 0xad
		   &smp->chan.chan.conn->le.resp_addr,
    aff4:	6823      	ldr	r3, [r4, #0]
    aff6:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr, e)) {
    affa:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    affc:	a808      	add	r0, sp, #32
    affe:	9003      	str	r0, [sp, #12]
    b000:	9302      	str	r3, [sp, #8]
    b002:	9101      	str	r1, [sp, #4]
    b004:	9200      	str	r2, [sp, #0]
    b006:	ab04      	add	r3, sp, #16
    b008:	4632      	mov	r2, r6
    b00a:	4639      	mov	r1, r7
    b00c:	4628      	mov	r0, r5
    b00e:	f7ff fee1 	bl	add4 <smp_f6>
    b012:	b108      	cbz	r0, b018 <compute_and_check_and_send_slave_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    b014:	2008      	movs	r0, #8
    b016:	e7e9      	b.n	afec <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b018:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    b01c:	6823      	ldr	r3, [r4, #0]
    b01e:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    b022:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b024:	a80c      	add	r0, sp, #48	; 0x30
    b026:	9003      	str	r0, [sp, #12]
    b028:	9302      	str	r3, [sp, #8]
    b02a:	9101      	str	r1, [sp, #4]
    b02c:	9200      	str	r2, [sp, #0]
    b02e:	ab04      	add	r3, sp, #16
    b030:	463a      	mov	r2, r7
    b032:	4631      	mov	r1, r6
    b034:	4628      	mov	r0, r5
    b036:	f7ff fecd 	bl	add4 <smp_f6>
    b03a:	b108      	cbz	r0, b040 <compute_and_check_and_send_slave_dhcheck+0xb0>
		return BT_SMP_ERR_UNSPECIFIED;
    b03c:	2008      	movs	r0, #8
    b03e:	e7d5      	b.n	afec <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (memcmp(smp->e, re, 16)) {
    b040:	2210      	movs	r2, #16
    b042:	a90c      	add	r1, sp, #48	; 0x30
    b044:	f204 1053 	addw	r0, r4, #339	; 0x153
    b048:	f01f f806 	bl	2a058 <memcmp>
    b04c:	b108      	cbz	r0, b052 <compute_and_check_and_send_slave_dhcheck+0xc2>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    b04e:	200b      	movs	r0, #11
    b050:	e7cc      	b.n	afec <compute_and_check_and_send_slave_dhcheck+0x5c>
	sc_smp_send_dhkey_check(smp, e);
    b052:	a908      	add	r1, sp, #32
    b054:	4620      	mov	r0, r4
    b056:	f7ff fcc7 	bl	a9e8 <sc_smp_send_dhkey_check>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b05a:	34a0      	adds	r4, #160	; 0xa0
    b05c:	f3bf 8f5b 	dmb	ish
    b060:	e854 3f00 	ldrex	r3, [r4]
    b064:	f043 0302 	orr.w	r3, r3, #2
    b068:	e844 3200 	strex	r2, r3, [r4]
    b06c:	2a00      	cmp	r2, #0
    b06e:	d1f7      	bne.n	b060 <compute_and_check_and_send_slave_dhcheck+0xd0>
    b070:	f3bf 8f5b 	dmb	ish
	return 0;
    b074:	2000      	movs	r0, #0
    b076:	e7b9      	b.n	afec <compute_and_check_and_send_slave_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    b078:	2008      	movs	r0, #8
    b07a:	e7b7      	b.n	afec <compute_and_check_and_send_slave_dhcheck+0x5c>

0000b07c <smp_g2>:
{
    b07c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b07e:	b099      	sub	sp, #100	; 0x64
    b080:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	src += length - 1;
    b082:	301f      	adds	r0, #31
    b084:	2520      	movs	r5, #32
    b086:	ae04      	add	r6, sp, #16
    b088:	e004      	b.n	b094 <smp_g2+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b08a:	7807      	ldrb	r7, [r0, #0]
    b08c:	7037      	strb	r7, [r6, #0]
	for (; length > 0; length--) {
    b08e:	3d01      	subs	r5, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b090:	3801      	subs	r0, #1
    b092:	3601      	adds	r6, #1
	for (; length > 0; length--) {
    b094:	2d00      	cmp	r5, #0
    b096:	d1f8      	bne.n	b08a <smp_g2+0xe>
	src += length - 1;
    b098:	311f      	adds	r1, #31
    b09a:	2020      	movs	r0, #32
    b09c:	ad0c      	add	r5, sp, #48	; 0x30
    b09e:	e004      	b.n	b0aa <smp_g2+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b0a0:	780e      	ldrb	r6, [r1, #0]
    b0a2:	702e      	strb	r6, [r5, #0]
	for (; length > 0; length--) {
    b0a4:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b0a6:	3901      	subs	r1, #1
    b0a8:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    b0aa:	2800      	cmp	r0, #0
    b0ac:	d1f8      	bne.n	b0a0 <smp_g2+0x24>
	src += length - 1;
    b0ae:	330f      	adds	r3, #15
    b0b0:	2110      	movs	r1, #16
    b0b2:	a814      	add	r0, sp, #80	; 0x50
    b0b4:	e004      	b.n	b0c0 <smp_g2+0x44>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b0b6:	781d      	ldrb	r5, [r3, #0]
    b0b8:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
    b0ba:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b0bc:	3b01      	subs	r3, #1
    b0be:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    b0c0:	2900      	cmp	r1, #0
    b0c2:	d1f8      	bne.n	b0b6 <smp_g2+0x3a>
	src += length - 1;
    b0c4:	320f      	adds	r2, #15
    b0c6:	2310      	movs	r3, #16
    b0c8:	4669      	mov	r1, sp
    b0ca:	e004      	b.n	b0d6 <smp_g2+0x5a>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b0cc:	7810      	ldrb	r0, [r2, #0]
    b0ce:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    b0d0:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b0d2:	3a01      	subs	r2, #1
    b0d4:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    b0d6:	2b00      	cmp	r3, #0
    b0d8:	d1f8      	bne.n	b0cc <smp_g2+0x50>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    b0da:	466b      	mov	r3, sp
    b0dc:	2250      	movs	r2, #80	; 0x50
    b0de:	a904      	add	r1, sp, #16
    b0e0:	4668      	mov	r0, sp
    b0e2:	f7ff fcf7 	bl	aad4 <bt_smp_aes_cmac>
	if (err) {
    b0e6:	4605      	mov	r5, r0
    b0e8:	b110      	cbz	r0, b0f0 <smp_g2+0x74>
}
    b0ea:	4628      	mov	r0, r5
    b0ec:	b019      	add	sp, #100	; 0x64
    b0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(passkey, xs + 12, 4);
    b0f0:	2204      	movs	r2, #4
    b0f2:	a903      	add	r1, sp, #12
    b0f4:	4620      	mov	r0, r4
    b0f6:	f7f5 f8e3 	bl	2c0 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    b0fa:	6822      	ldr	r2, [r4, #0]
    b0fc:	0a13      	lsrs	r3, r2, #8
    b0fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    b102:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b106:	0211      	lsls	r1, r2, #8
    b108:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    b10c:	430b      	orrs	r3, r1
    b10e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    b112:	4a04      	ldr	r2, [pc, #16]	; (b124 <smp_g2+0xa8>)
    b114:	fba2 1203 	umull	r1, r2, r2, r3
    b118:	0c92      	lsrs	r2, r2, #18
    b11a:	4903      	ldr	r1, [pc, #12]	; (b128 <smp_g2+0xac>)
    b11c:	fb01 3212 	mls	r2, r1, r2, r3
    b120:	6022      	str	r2, [r4, #0]
	return 0;
    b122:	e7e2      	b.n	b0ea <smp_g2+0x6e>
    b124:	431bde83 	.word	0x431bde83
    b128:	000f4240 	.word	0x000f4240

0000b12c <smp_send_pairing_confirm>:
{
    b12c:	b570      	push	{r4, r5, r6, lr}
    b12e:	b082      	sub	sp, #8
	struct bt_conn *conn = smp->chan.chan.conn;
    b130:	6806      	ldr	r6, [r0, #0]
	switch (smp->method) {
    b132:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    b136:	2b03      	cmp	r3, #3
    b138:	d83f      	bhi.n	b1ba <smp_send_pairing_confirm+0x8e>
    b13a:	e8df f003 	tbb	[pc, r3]
    b13e:	020d      	.short	0x020d
    b140:	0d02      	.short	0x0d02
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    b142:	f8d0 5174 	ldr.w	r5, [r0, #372]	; 0x174
    b146:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    b14a:	40dd      	lsrs	r5, r3
    b14c:	f005 0501 	and.w	r5, r5, #1
		r |= 0x80;
    b150:	f065 057f 	orn	r5, r5, #127	; 0x7f
    b154:	b2ed      	uxtb	r5, r5
		break;
    b156:	e000      	b.n	b15a <smp_send_pairing_confirm+0x2e>
		r = 0;
    b158:	2500      	movs	r5, #0
    b15a:	4604      	mov	r4, r0
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    b15c:	2210      	movs	r2, #16
    b15e:	2103      	movs	r1, #3
    b160:	4630      	mov	r0, r6
    b162:	f7ff fbdc 	bl	a91e <smp_create_pdu>
	if (!buf) {
    b166:	4606      	mov	r6, r0
    b168:	b348      	cbz	r0, b1be <smp_send_pairing_confirm+0x92>
	req = net_buf_add(buf, sizeof(*req));
    b16a:	2110      	movs	r1, #16
    b16c:	3008      	adds	r0, #8
    b16e:	f00f fd35 	bl	1abdc <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    b172:	9000      	str	r0, [sp, #0]
    b174:	462b      	mov	r3, r5
    b176:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    b17a:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    b17e:	4811      	ldr	r0, [pc, #68]	; (b1c4 <smp_send_pairing_confirm+0x98>)
    b180:	f7ff fd18 	bl	abb4 <smp_f4>
    b184:	b120      	cbz	r0, b190 <smp_send_pairing_confirm+0x64>
		net_buf_unref(buf);
    b186:	4630      	mov	r0, r6
    b188:	f00f fcdc 	bl	1ab44 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    b18c:	2008      	movs	r0, #8
    b18e:	e017      	b.n	b1c0 <smp_send_pairing_confirm+0x94>
	smp_send(smp, buf, NULL);
    b190:	2200      	movs	r2, #0
    b192:	4631      	mov	r1, r6
    b194:	4620      	mov	r0, r4
    b196:	f7ff fc15 	bl	a9c4 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    b19a:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b19e:	f3bf 8f5b 	dmb	ish
    b1a2:	e850 3f00 	ldrex	r3, [r0]
    b1a6:	f023 0301 	bic.w	r3, r3, #1
    b1aa:	e840 3200 	strex	r2, r3, [r0]
    b1ae:	2a00      	cmp	r2, #0
    b1b0:	d1f7      	bne.n	b1a2 <smp_send_pairing_confirm+0x76>
    b1b2:	f3bf 8f5b 	dmb	ish
	return 0;
    b1b6:	2000      	movs	r0, #0
    b1b8:	e002      	b.n	b1c0 <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    b1ba:	2008      	movs	r0, #8
    b1bc:	e000      	b.n	b1c0 <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    b1be:	2008      	movs	r0, #8
}
    b1c0:	b002      	add	sp, #8
    b1c2:	bd70      	pop	{r4, r5, r6, pc}
    b1c4:	20000a64 	.word	0x20000a64

0000b1c8 <smp_c1>:
{
    b1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1cc:	b088      	sub	sp, #32
    b1ce:	4604      	mov	r4, r0
    b1d0:	460f      	mov	r7, r1
    b1d2:	4611      	mov	r1, r2
    b1d4:	4698      	mov	r8, r3
    b1d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b1d8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	p1[0] = ia->type;
    b1da:	782b      	ldrb	r3, [r5, #0]
    b1dc:	f88d 3010 	strb.w	r3, [sp, #16]
	p1[1] = ra->type;
    b1e0:	7833      	ldrb	r3, [r6, #0]
    b1e2:	f88d 3011 	strb.w	r3, [sp, #17]
	memcpy(p1 + 2, preq, 7);
    b1e6:	2207      	movs	r2, #7
    b1e8:	f10d 0012 	add.w	r0, sp, #18
    b1ec:	f7f5 f868 	bl	2c0 <memcpy>
	memcpy(p1 + 9, pres, 7);
    b1f0:	2207      	movs	r2, #7
    b1f2:	4641      	mov	r1, r8
    b1f4:	f10d 0019 	add.w	r0, sp, #25
    b1f8:	f7f5 f862 	bl	2c0 <memcpy>
	xor_128(r, p1, enc_data);
    b1fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b1fe:	a904      	add	r1, sp, #16
    b200:	4638      	mov	r0, r7
    b202:	f7ff faf3 	bl	a7ec <xor_128>
	err = bt_encrypt_le(k, enc_data, enc_data);
    b206:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b208:	4611      	mov	r1, r2
    b20a:	4620      	mov	r0, r4
    b20c:	f006 f98c 	bl	11528 <bt_encrypt_le>
	if (err) {
    b210:	4603      	mov	r3, r0
    b212:	b118      	cbz	r0, b21c <smp_c1+0x54>
}
    b214:	4618      	mov	r0, r3
    b216:	b008      	add	sp, #32
    b218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(p2, ra->a.val, 6);
    b21c:	2206      	movs	r2, #6
    b21e:	1c71      	adds	r1, r6, #1
    b220:	4668      	mov	r0, sp
    b222:	f7f5 f84d 	bl	2c0 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    b226:	2206      	movs	r2, #6
    b228:	1c69      	adds	r1, r5, #1
    b22a:	eb0d 0002 	add.w	r0, sp, r2
    b22e:	f7f5 f847 	bl	2c0 <memcpy>
	memset(p2 + 12, 0, 4);
    b232:	2204      	movs	r2, #4
    b234:	2100      	movs	r1, #0
    b236:	a803      	add	r0, sp, #12
    b238:	f01e ffa2 	bl	2a180 <memset>
	xor_128(enc_data, p2, enc_data);
    b23c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b23e:	4669      	mov	r1, sp
    b240:	4610      	mov	r0, r2
    b242:	f7ff fad3 	bl	a7ec <xor_128>
	return bt_encrypt_le(k, enc_data, enc_data);
    b246:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b248:	4611      	mov	r1, r2
    b24a:	4620      	mov	r0, r4
    b24c:	f006 f96c 	bl	11528 <bt_encrypt_le>
    b250:	4603      	mov	r3, r0
    b252:	e7df      	b.n	b214 <smp_c1+0x4c>

0000b254 <legacy_send_pairing_confirm>:
{
    b254:	b570      	push	{r4, r5, r6, lr}
    b256:	b084      	sub	sp, #16
    b258:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b25a:	6805      	ldr	r5, [r0, #0]
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    b25c:	2210      	movs	r2, #16
    b25e:	2103      	movs	r1, #3
    b260:	4628      	mov	r0, r5
    b262:	f7ff fb5c 	bl	a91e <smp_create_pdu>
	if (!buf) {
    b266:	b370      	cbz	r0, b2c6 <legacy_send_pairing_confirm+0x72>
    b268:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    b26a:	2110      	movs	r1, #16
    b26c:	3008      	adds	r0, #8
    b26e:	f00f fcb5 	bl	1abdc <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    b272:	f105 034f 	add.w	r3, r5, #79	; 0x4f
    b276:	3556      	adds	r5, #86	; 0x56
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    b278:	9002      	str	r0, [sp, #8]
    b27a:	9501      	str	r5, [sp, #4]
    b27c:	9300      	str	r3, [sp, #0]
    b27e:	f104 03ac 	add.w	r3, r4, #172	; 0xac
    b282:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
    b286:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    b28a:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    b28e:	f7ff ff9b 	bl	b1c8 <smp_c1>
    b292:	b120      	cbz	r0, b29e <legacy_send_pairing_confirm+0x4a>
		net_buf_unref(buf);
    b294:	4630      	mov	r0, r6
    b296:	f00f fc55 	bl	1ab44 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    b29a:	2008      	movs	r0, #8
    b29c:	e014      	b.n	b2c8 <legacy_send_pairing_confirm+0x74>
	smp_send(smp, buf, NULL);
    b29e:	2200      	movs	r2, #0
    b2a0:	4631      	mov	r1, r6
    b2a2:	4620      	mov	r0, r4
    b2a4:	f7ff fb8e 	bl	a9c4 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    b2a8:	34a0      	adds	r4, #160	; 0xa0
    b2aa:	f3bf 8f5b 	dmb	ish
    b2ae:	e854 3f00 	ldrex	r3, [r4]
    b2b2:	f023 0301 	bic.w	r3, r3, #1
    b2b6:	e844 3200 	strex	r2, r3, [r4]
    b2ba:	2a00      	cmp	r2, #0
    b2bc:	d1f7      	bne.n	b2ae <legacy_send_pairing_confirm+0x5a>
    b2be:	f3bf 8f5b 	dmb	ish
	return 0;
    b2c2:	2000      	movs	r0, #0
    b2c4:	e000      	b.n	b2c8 <legacy_send_pairing_confirm+0x74>
		return BT_SMP_ERR_UNSPECIFIED;
    b2c6:	2008      	movs	r0, #8
}
    b2c8:	b004      	add	sp, #16
    b2ca:	bd70      	pop	{r4, r5, r6, pc}

0000b2cc <legacy_pairing_confirm>:
{
    b2cc:	b508      	push	{r3, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b2ce:	6803      	ldr	r3, [r0, #0]
    b2d0:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b2d2:	b1c3      	cbz	r3, b306 <legacy_pairing_confirm+0x3a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    b2d4:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b2d8:	f3bf 8f5b 	dmb	ish
    b2dc:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    b2e0:	f3bf 8f5b 	dmb	ish
    b2e4:	f412 7f00 	tst.w	r2, #512	; 0x200
    b2e8:	d01e      	beq.n	b328 <legacy_pairing_confirm+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b2ea:	f3bf 8f5b 	dmb	ish
    b2ee:	e853 2f00 	ldrex	r2, [r3]
    b2f2:	f042 0201 	orr.w	r2, r2, #1
    b2f6:	e843 2100 	strex	r1, r2, [r3]
    b2fa:	2900      	cmp	r1, #0
    b2fc:	d1f7      	bne.n	b2ee <legacy_pairing_confirm+0x22>
    b2fe:	f3bf 8f5b 	dmb	ish
	return 0;
    b302:	2000      	movs	r0, #0
}
    b304:	bd08      	pop	{r3, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    b306:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    b30a:	f3bf 8f5b 	dmb	ish
    b30e:	e853 2f00 	ldrex	r2, [r3]
    b312:	f042 0208 	orr.w	r2, r2, #8
    b316:	e843 2100 	strex	r1, r2, [r3]
    b31a:	2900      	cmp	r1, #0
    b31c:	d1f7      	bne.n	b30e <legacy_pairing_confirm+0x42>
    b31e:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    b322:	f7ff ff97 	bl	b254 <legacy_send_pairing_confirm>
    b326:	bd08      	pop	{r3, pc}
			atomic_set_bit(&smp->allowed_cmds,
    b328:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    b32c:	f3bf 8f5b 	dmb	ish
    b330:	e853 2f00 	ldrex	r2, [r3]
    b334:	f042 0210 	orr.w	r2, r2, #16
    b338:	e843 2100 	strex	r1, r2, [r3]
    b33c:	2900      	cmp	r1, #0
    b33e:	d1f7      	bne.n	b330 <legacy_pairing_confirm+0x64>
    b340:	f3bf 8f5b 	dmb	ish
			return legacy_send_pairing_confirm(smp);
    b344:	f7ff ff86 	bl	b254 <legacy_send_pairing_confirm>
    b348:	bd08      	pop	{r3, pc}

0000b34a <smp_pairing_confirm>:
{
    b34a:	b510      	push	{r4, lr}
    b34c:	4604      	mov	r4, r0
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    b34e:	2210      	movs	r2, #16
    b350:	6889      	ldr	r1, [r1, #8]
    b352:	30b3      	adds	r0, #179	; 0xb3
    b354:	f7f4 ffb4 	bl	2c0 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b358:	6823      	ldr	r3, [r4, #0]
    b35a:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b35c:	b313      	cbz	r3, b3a4 <smp_pairing_confirm+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b35e:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b362:	f3bf 8f5b 	dmb	ish
    b366:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b36a:	f3bf 8f5b 	dmb	ish
    b36e:	f013 0f20 	tst.w	r3, #32
    b372:	d029      	beq.n	b3c8 <smp_pairing_confirm+0x7e>
	switch (smp->method) {
    b374:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b378:	2b01      	cmp	r3, #1
    b37a:	d029      	beq.n	b3d0 <smp_pairing_confirm+0x86>
    b37c:	2b02      	cmp	r3, #2
    b37e:	d150      	bne.n	b422 <smp_pairing_confirm+0xd8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b380:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b384:	f3bf 8f5b 	dmb	ish
    b388:	e853 2f00 	ldrex	r2, [r3]
    b38c:	f042 0210 	orr.w	r2, r2, #16
    b390:	e843 2100 	strex	r1, r2, [r3]
    b394:	2900      	cmp	r1, #0
    b396:	d1f7      	bne.n	b388 <smp_pairing_confirm+0x3e>
    b398:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    b39c:	4620      	mov	r0, r4
    b39e:	f7ff fec5 	bl	b12c <smp_send_pairing_confirm>
    b3a2:	bd10      	pop	{r4, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b3a4:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b3a8:	f3bf 8f5b 	dmb	ish
    b3ac:	e853 2f00 	ldrex	r2, [r3]
    b3b0:	f042 0210 	orr.w	r2, r2, #16
    b3b4:	e843 2100 	strex	r1, r2, [r3]
    b3b8:	2900      	cmp	r1, #0
    b3ba:	d1f7      	bne.n	b3ac <smp_pairing_confirm+0x62>
    b3bc:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_random(smp);
    b3c0:	4620      	mov	r0, r4
    b3c2:	f7ff fb6c 	bl	aa9e <smp_send_pairing_random>
    b3c6:	bd10      	pop	{r4, pc}
		return legacy_pairing_confirm(smp);
    b3c8:	4620      	mov	r0, r4
    b3ca:	f7ff ff7f 	bl	b2cc <legacy_pairing_confirm>
    b3ce:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b3d0:	f3bf 8f5b 	dmb	ish
    b3d4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b3d8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    b3dc:	f413 7f00 	tst.w	r3, #512	; 0x200
    b3e0:	d111      	bne.n	b406 <smp_pairing_confirm+0xbc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b3e2:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b3e6:	f3bf 8f5b 	dmb	ish
    b3ea:	e853 2f00 	ldrex	r2, [r3]
    b3ee:	f042 0210 	orr.w	r2, r2, #16
    b3f2:	e843 2100 	strex	r1, r2, [r3]
    b3f6:	2900      	cmp	r1, #0
    b3f8:	d1f7      	bne.n	b3ea <smp_pairing_confirm+0xa0>
    b3fa:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    b3fe:	4620      	mov	r0, r4
    b400:	f7ff fe94 	bl	b12c <smp_send_pairing_confirm>
    b404:	bd10      	pop	{r4, pc}
    b406:	f3bf 8f5b 	dmb	ish
    b40a:	e852 3f00 	ldrex	r3, [r2]
    b40e:	f043 0301 	orr.w	r3, r3, #1
    b412:	e842 3100 	strex	r1, r3, [r2]
    b416:	2900      	cmp	r1, #0
    b418:	d1f7      	bne.n	b40a <smp_pairing_confirm+0xc0>
    b41a:	f3bf 8f5b 	dmb	ish
			return 0;
    b41e:	2000      	movs	r0, #0
    b420:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    b422:	2008      	movs	r0, #8
}
    b424:	bd10      	pop	{r4, pc}

0000b426 <smp_s1>:
{
    b426:	b570      	push	{r4, r5, r6, lr}
    b428:	4605      	mov	r5, r0
    b42a:	460e      	mov	r6, r1
    b42c:	4611      	mov	r1, r2
    b42e:	461c      	mov	r4, r3
	memcpy(out, r2, 8);
    b430:	2208      	movs	r2, #8
    b432:	4618      	mov	r0, r3
    b434:	f7f4 ff44 	bl	2c0 <memcpy>
	memcpy(out + 8, r1, 8);
    b438:	2208      	movs	r2, #8
    b43a:	4631      	mov	r1, r6
    b43c:	18a0      	adds	r0, r4, r2
    b43e:	f7f4 ff3f 	bl	2c0 <memcpy>
	return bt_encrypt_le(k, out, out);
    b442:	4622      	mov	r2, r4
    b444:	4621      	mov	r1, r4
    b446:	4628      	mov	r0, r5
    b448:	f006 f86e 	bl	11528 <bt_encrypt_le>
}
    b44c:	bd70      	pop	{r4, r5, r6, pc}

0000b44e <smp_reset>:
{
    b44e:	b538      	push	{r3, r4, r5, lr}
    b450:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b452:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
    b454:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    b458:	f01e fcae 	bl	29db8 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
    b45c:	2200      	movs	r2, #0
    b45e:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
	atomic_set(&smp->allowed_cmds, 0);
    b462:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b466:	f3bf 8f5b 	dmb	ish
    b46a:	e853 1f00 	ldrex	r1, [r3]
    b46e:	e843 2000 	strex	r0, r2, [r3]
    b472:	2800      	cmp	r0, #0
    b474:	d1f9      	bne.n	b46a <smp_reset+0x1c>
    b476:	f3bf 8f5b 	dmb	ish
	atomic_set(smp->flags, 0);
    b47a:	34a0      	adds	r4, #160	; 0xa0
    b47c:	f3bf 8f5b 	dmb	ish
    b480:	e854 1f00 	ldrex	r1, [r4]
    b484:	e844 2000 	strex	r0, r2, [r4]
    b488:	2800      	cmp	r0, #0
    b48a:	d1f9      	bne.n	b480 <smp_reset+0x32>
    b48c:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
    b490:	7a69      	ldrb	r1, [r5, #9]
    b492:	7a2a      	ldrb	r2, [r5, #8]
    b494:	4291      	cmp	r1, r2
    b496:	d000      	beq.n	b49a <smp_reset+0x4c>
		conn->required_sec_level = conn->sec_level;
    b498:	726a      	strb	r2, [r5, #9]
	    conn->role == BT_HCI_ROLE_MASTER) {
    b49a:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b49c:	b162      	cbz	r2, b4b8 <smp_reset+0x6a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b49e:	f3bf 8f5b 	dmb	ish
    b4a2:	e853 2f00 	ldrex	r2, [r3]
    b4a6:	f042 0202 	orr.w	r2, r2, #2
    b4aa:	e843 2100 	strex	r1, r2, [r3]
    b4ae:	2900      	cmp	r1, #0
    b4b0:	d1f7      	bne.n	b4a2 <smp_reset+0x54>
    b4b2:	f3bf 8f5b 	dmb	ish
    b4b6:	bd38      	pop	{r3, r4, r5, pc}
    b4b8:	f3bf 8f5b 	dmb	ish
    b4bc:	e853 2f00 	ldrex	r2, [r3]
    b4c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b4c4:	e843 2100 	strex	r1, r2, [r3]
    b4c8:	2900      	cmp	r1, #0
    b4ca:	d1f7      	bne.n	b4bc <smp_reset+0x6e>
    b4cc:	f3bf 8f5b 	dmb	ish
    b4d0:	bd38      	pop	{r3, r4, r5, pc}

0000b4d2 <smp_pairing_complete>:
{
    b4d2:	b508      	push	{r3, lr}
	smp_reset(smp);
    b4d4:	f7ff ffbb 	bl	b44e <smp_reset>
    b4d8:	bd08      	pop	{r3, pc}

0000b4da <smp_error>:
{
    b4da:	b570      	push	{r4, r5, r6, lr}
    b4dc:	4604      	mov	r4, r0
    b4de:	460e      	mov	r6, r1
	smp_pairing_complete(smp, reason);
    b4e0:	f7ff fff7 	bl	b4d2 <smp_pairing_complete>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    b4e4:	2201      	movs	r2, #1
    b4e6:	2105      	movs	r1, #5
    b4e8:	6820      	ldr	r0, [r4, #0]
    b4ea:	f7ff fa18 	bl	a91e <smp_create_pdu>
	if (!buf) {
    b4ee:	b168      	cbz	r0, b50c <smp_error+0x32>
    b4f0:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    b4f2:	2101      	movs	r1, #1
    b4f4:	3008      	adds	r0, #8
    b4f6:	f00f fb71 	bl	1abdc <net_buf_simple_add>
	rsp->reason = reason;
    b4fa:	7006      	strb	r6, [r0, #0]
    b4fc:	2300      	movs	r3, #0
    b4fe:	462a      	mov	r2, r5
    b500:	2106      	movs	r1, #6
    b502:	6820      	ldr	r0, [r4, #0]
    b504:	f7fc fd01 	bl	7f0a <bt_l2cap_send_cb>
	return 0;
    b508:	2000      	movs	r0, #0
    b50a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    b50c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    b510:	bd70      	pop	{r4, r5, r6, pc}
	...

0000b514 <bt_smp_dhkey_ready>:
{
    b514:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b516:	2400      	movs	r4, #0
    b518:	b384      	cbz	r4, b57c <bt_smp_dhkey_ready+0x68>
	struct bt_smp *smp = NULL;
    b51a:	2400      	movs	r4, #0
	if (!smp) {
    b51c:	b36c      	cbz	r4, b57a <bt_smp_dhkey_ready+0x66>
    b51e:	4601      	mov	r1, r0
	if (!dhkey) {
    b520:	2800      	cmp	r0, #0
    b522:	d04b      	beq.n	b5bc <bt_smp_dhkey_ready+0xa8>
	memcpy(smp->dhkey, dhkey, 32);
    b524:	2220      	movs	r2, #32
    b526:	f204 1033 	addw	r0, r4, #307	; 0x133
    b52a:	f7f4 fec9 	bl	2c0 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    b52e:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b532:	f3bf 8f5b 	dmb	ish
    b536:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    b53a:	f3bf 8f5b 	dmb	ish
    b53e:	f412 7f00 	tst.w	r2, #512	; 0x200
    b542:	d140      	bne.n	b5c6 <bt_smp_dhkey_ready+0xb2>
    b544:	f3bf 8f5b 	dmb	ish
    b548:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    b54c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    b550:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    b554:	d144      	bne.n	b5e0 <bt_smp_dhkey_ready+0xcc>
    b556:	f3bf 8f5b 	dmb	ish
    b55a:	681b      	ldr	r3, [r3, #0]
    b55c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    b560:	f413 7f80 	tst.w	r3, #256	; 0x100
    b564:	d009      	beq.n	b57a <bt_smp_dhkey_ready+0x66>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b566:	6823      	ldr	r3, [r4, #0]
    b568:	78db      	ldrb	r3, [r3, #3]
    b56a:	2b00      	cmp	r3, #0
    b56c:	d149      	bne.n	b602 <bt_smp_dhkey_ready+0xee>
			err = compute_and_send_master_dhcheck(smp);
    b56e:	4620      	mov	r0, r4
    b570:	f7ff fcb4 	bl	aedc <compute_and_send_master_dhcheck>
			if (err) {
    b574:	4601      	mov	r1, r0
    b576:	2800      	cmp	r0, #0
    b578:	d13f      	bne.n	b5fa <bt_smp_dhkey_ready+0xe6>
    b57a:	bd10      	pop	{r4, pc}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    b57c:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    b580:	fb03 f304 	mul.w	r3, r3, r4
    b584:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
    b588:	4b23      	ldr	r3, [pc, #140]	; (b618 <bt_smp_dhkey_ready+0x104>)
    b58a:	4413      	add	r3, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b58c:	f3bf 8f5b 	dmb	ish
    b590:	e853 2f00 	ldrex	r2, [r3]
    b594:	f022 0180 	bic.w	r1, r2, #128	; 0x80
    b598:	e843 1e00 	strex	lr, r1, [r3]
    b59c:	f1be 0f00 	cmp.w	lr, #0
    b5a0:	d1f6      	bne.n	b590 <bt_smp_dhkey_ready+0x7c>
    b5a2:	f3bf 8f5b 	dmb	ish
    b5a6:	f012 0f80 	tst.w	r2, #128	; 0x80
    b5aa:	d101      	bne.n	b5b0 <bt_smp_dhkey_ready+0x9c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b5ac:	3401      	adds	r4, #1
    b5ae:	e7b3      	b.n	b518 <bt_smp_dhkey_ready+0x4>
			smp = &bt_smp_pool[i];
    b5b0:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    b5b4:	4b18      	ldr	r3, [pc, #96]	; (b618 <bt_smp_dhkey_ready+0x104>)
    b5b6:	fb02 3404 	mla	r4, r2, r4, r3
			break;
    b5ba:	e7af      	b.n	b51c <bt_smp_dhkey_ready+0x8>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    b5bc:	210b      	movs	r1, #11
    b5be:	4620      	mov	r0, r4
    b5c0:	f7ff ff8b 	bl	b4da <smp_error>
		return;
    b5c4:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b5c6:	f3bf 8f5b 	dmb	ish
    b5ca:	e853 2f00 	ldrex	r2, [r3]
    b5ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    b5d2:	e843 2100 	strex	r1, r2, [r3]
    b5d6:	2900      	cmp	r1, #0
    b5d8:	d1f7      	bne.n	b5ca <bt_smp_dhkey_ready+0xb6>
    b5da:	f3bf 8f5b 	dmb	ish
    b5de:	bd10      	pop	{r4, pc}
    b5e0:	f3bf 8f5b 	dmb	ish
    b5e4:	e853 2f00 	ldrex	r2, [r3]
    b5e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    b5ec:	e843 2100 	strex	r1, r2, [r3]
    b5f0:	2900      	cmp	r1, #0
    b5f2:	d1f7      	bne.n	b5e4 <bt_smp_dhkey_ready+0xd0>
    b5f4:	f3bf 8f5b 	dmb	ish
    b5f8:	bd10      	pop	{r4, pc}
				smp_error(smp, err);
    b5fa:	4620      	mov	r0, r4
    b5fc:	f7ff ff6d 	bl	b4da <smp_error>
    b600:	bd10      	pop	{r4, pc}
		err = compute_and_check_and_send_slave_dhcheck(smp);
    b602:	4620      	mov	r0, r4
    b604:	f7ff fcc4 	bl	af90 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    b608:	4601      	mov	r1, r0
    b60a:	2800      	cmp	r0, #0
    b60c:	d0b5      	beq.n	b57a <bt_smp_dhkey_ready+0x66>
			smp_error(smp, err);
    b60e:	4620      	mov	r0, r4
    b610:	f7ff ff63 	bl	b4da <smp_error>
    b614:	e7b1      	b.n	b57a <bt_smp_dhkey_ready+0x66>
    b616:	bf00      	nop
    b618:	200008bc 	.word	0x200008bc

0000b61c <smp_pairing_failed>:
{
    b61c:	b538      	push	{r3, r4, r5, lr}
    b61e:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b620:	6800      	ldr	r0, [r0, #0]
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    b622:	688d      	ldr	r5, [r1, #8]
	switch (smp->method) {
    b624:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b628:	3b01      	subs	r3, #1
    b62a:	2b02      	cmp	r3, #2
    b62c:	d913      	bls.n	b656 <smp_pairing_failed+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b62e:	f3bf 8f5b 	dmb	ish
    b632:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b636:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b63a:	f013 0f04 	tst.w	r3, #4
    b63e:	d004      	beq.n	b64a <smp_pairing_failed+0x2e>
	    smp->chan.chan.conn->le.keys) {
    b640:	6823      	ldr	r3, [r4, #0]
    b642:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b644:	b108      	cbz	r0, b64a <smp_pairing_failed+0x2e>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    b646:	f001 fd98 	bl	d17a <bt_keys_clear>
	smp_pairing_complete(smp, req->reason);
    b64a:	7829      	ldrb	r1, [r5, #0]
    b64c:	4620      	mov	r0, r4
    b64e:	f7ff ff40 	bl	b4d2 <smp_pairing_complete>
}
    b652:	2000      	movs	r0, #0
    b654:	bd38      	pop	{r3, r4, r5, pc}
		bt_auth->cancel(conn);
    b656:	4b02      	ldr	r3, [pc, #8]	; (b660 <smp_pairing_failed+0x44>)
    b658:	681b      	ldr	r3, [r3, #0]
    b65a:	68db      	ldr	r3, [r3, #12]
    b65c:	4798      	blx	r3
		break;
    b65e:	e7e6      	b.n	b62e <smp_pairing_failed+0x12>
    b660:	20002aa8 	.word	0x20002aa8

0000b664 <bt_smp_disconnected>:
{
    b664:	b538      	push	{r3, r4, r5, lr}
    b666:	4605      	mov	r5, r0
	struct bt_keys *keys = chan->conn->le.keys;
    b668:	6803      	ldr	r3, [r0, #0]
    b66a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	k_delayed_work_cancel(&smp->work);
    b66c:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    b670:	f01e fba2 	bl	29db8 <k_delayed_work_cancel>
	if (keys) {
    b674:	b164      	cbz	r4, b690 <bt_smp_disconnected+0x2c>
		if (!keys->keys ||
    b676:	89a3      	ldrh	r3, [r4, #12]
    b678:	b13b      	cbz	r3, b68a <bt_smp_disconnected+0x26>
    b67a:	f3bf 8f5b 	dmb	ish
    b67e:	68a3      	ldr	r3, [r4, #8]
    b680:	f3bf 8f5b 	dmb	ish
    b684:	f013 0f02 	tst.w	r3, #2
    b688:	d002      	beq.n	b690 <bt_smp_disconnected+0x2c>
			bt_keys_clear(keys);
    b68a:	4620      	mov	r0, r4
    b68c:	f001 fd75 	bl	d17a <bt_keys_clear>
	memset(smp, 0, sizeof(*smp));
    b690:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    b694:	2100      	movs	r1, #0
    b696:	4628      	mov	r0, r5
    b698:	f01e fd72 	bl	2a180 <memset>
    b69c:	bd38      	pop	{r3, r4, r5, pc}

0000b69e <smp_timeout>:
{
    b69e:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    b6a0:	f5a0 75be 	sub.w	r5, r0, #380	; 0x17c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b6a4:	f1a0 04dc 	sub.w	r4, r0, #220	; 0xdc
    b6a8:	f3bf 8f5b 	dmb	ish
    b6ac:	f850 3cdc 	ldr.w	r3, [r0, #-220]
    b6b0:	f3bf 8f5b 	dmb	ish
    b6b4:	f013 0f04 	tst.w	r3, #4
    b6b8:	d004      	beq.n	b6c4 <smp_timeout+0x26>
	    smp->chan.chan.conn->le.keys) {
    b6ba:	682b      	ldr	r3, [r5, #0]
    b6bc:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b6be:	b108      	cbz	r0, b6c4 <smp_timeout+0x26>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    b6c0:	f001 fd5b 	bl	d17a <bt_keys_clear>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    b6c4:	2108      	movs	r1, #8
    b6c6:	4628      	mov	r0, r5
    b6c8:	f7ff ff03 	bl	b4d2 <smp_pairing_complete>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b6cc:	f3bf 8f5b 	dmb	ish
    b6d0:	e854 3f00 	ldrex	r3, [r4]
    b6d4:	f043 0310 	orr.w	r3, r3, #16
    b6d8:	e844 3200 	strex	r2, r3, [r4]
    b6dc:	2a00      	cmp	r2, #0
    b6de:	d1f7      	bne.n	b6d0 <smp_timeout+0x32>
    b6e0:	f3bf 8f5b 	dmb	ish
    b6e4:	bd38      	pop	{r3, r4, r5, pc}
	...

0000b6e8 <legacy_distribute_keys>:
{
    b6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b6ec:	b088      	sub	sp, #32
	struct bt_conn *conn = smp->chan.chan.conn;
    b6ee:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    b6f0:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    b6f2:	f890 3179 	ldrb.w	r3, [r0, #377]	; 0x179
    b6f6:	f013 0f01 	tst.w	r3, #1
    b6fa:	d102      	bne.n	b702 <legacy_distribute_keys+0x1a>
}
    b6fc:	b008      	add	sp, #32
    b6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b702:	4604      	mov	r4, r0
		bt_rand(key, sizeof(key));
    b704:	2110      	movs	r1, #16
    b706:	eb0d 0001 	add.w	r0, sp, r1
    b70a:	f005 fef1 	bl	114f0 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    b70e:	2108      	movs	r1, #8
    b710:	eb0d 0001 	add.w	r0, sp, r1
    b714:	f005 feec 	bl	114f0 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    b718:	2102      	movs	r1, #2
    b71a:	f10d 0006 	add.w	r0, sp, #6
    b71e:	f005 fee7 	bl	114f0 <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    b722:	2210      	movs	r2, #16
    b724:	2106      	movs	r1, #6
    b726:	4628      	mov	r0, r5
    b728:	f7ff f8f9 	bl	a91e <smp_create_pdu>
		if (!buf) {
    b72c:	4607      	mov	r7, r0
    b72e:	2800      	cmp	r0, #0
    b730:	d0e4      	beq.n	b6fc <legacy_distribute_keys+0x14>
		info = net_buf_add(buf, sizeof(*info));
    b732:	2110      	movs	r1, #16
    b734:	3008      	adds	r0, #8
    b736:	f00f fa51 	bl	1abdc <net_buf_simple_add>
    b73a:	4680      	mov	r8, r0
		memcpy(info->ltk, key, keys->enc_size);
    b73c:	79f2      	ldrb	r2, [r6, #7]
    b73e:	a904      	add	r1, sp, #16
    b740:	f7f4 fdbe 	bl	2c0 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    b744:	79f0      	ldrb	r0, [r6, #7]
    b746:	280f      	cmp	r0, #15
    b748:	d93b      	bls.n	b7c2 <legacy_distribute_keys+0xda>
		smp_send(smp, buf, NULL);
    b74a:	2200      	movs	r2, #0
    b74c:	4639      	mov	r1, r7
    b74e:	4620      	mov	r0, r4
    b750:	f7ff f938 	bl	a9c4 <smp_send>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    b754:	220a      	movs	r2, #10
    b756:	2107      	movs	r1, #7
    b758:	4628      	mov	r0, r5
    b75a:	f7ff f8e0 	bl	a91e <smp_create_pdu>
		if (!buf) {
    b75e:	4605      	mov	r5, r0
    b760:	2800      	cmp	r0, #0
    b762:	d0cb      	beq.n	b6fc <legacy_distribute_keys+0x14>
		ident = net_buf_add(buf, sizeof(*ident));
    b764:	210a      	movs	r1, #10
    b766:	3008      	adds	r0, #8
    b768:	f00f fa38 	bl	1abdc <net_buf_simple_add>
		ident->rand = rand;
    b76c:	9b03      	ldr	r3, [sp, #12]
    b76e:	9a02      	ldr	r2, [sp, #8]
    b770:	f8c0 2002 	str.w	r2, [r0, #2]
    b774:	f8c0 3006 	str.w	r3, [r0, #6]
		ident->ediv = ediv;
    b778:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    b77c:	8003      	strh	r3, [r0, #0]
		smp_send(smp, buf, ident_sent);
    b77e:	4a14      	ldr	r2, [pc, #80]	; (b7d0 <legacy_distribute_keys+0xe8>)
    b780:	4629      	mov	r1, r5
    b782:	4620      	mov	r0, r4
    b784:	f7ff f91e 	bl	a9c4 <smp_send>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b788:	f3bf 8f5b 	dmb	ish
    b78c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b790:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b794:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b798:	d0b0      	beq.n	b6fc <legacy_distribute_keys+0x14>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    b79a:	2101      	movs	r1, #1
    b79c:	4630      	mov	r0, r6
    b79e:	f001 fcd5 	bl	d14c <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    b7a2:	2210      	movs	r2, #16
    b7a4:	eb0d 0102 	add.w	r1, sp, r2
    b7a8:	f106 007a 	add.w	r0, r6, #122	; 0x7a
    b7ac:	f7f4 fd88 	bl	2c0 <memcpy>
			keys->slave_ltk.rand = rand;
    b7b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b7b4:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
			keys->slave_ltk.ediv = ediv;
    b7b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    b7bc:	f8a6 3078 	strh.w	r3, [r6, #120]	; 0x78
    b7c0:	e79c      	b.n	b6fc <legacy_distribute_keys+0x14>
			memset(info->ltk + keys->enc_size, 0,
    b7c2:	f1c0 0210 	rsb	r2, r0, #16
    b7c6:	2100      	movs	r1, #0
    b7c8:	4440      	add	r0, r8
    b7ca:	f01e fcd9 	bl	2a180 <memset>
    b7ce:	e7bc      	b.n	b74a <legacy_distribute_keys+0x62>
    b7d0:	0000c403 	.word	0x0000c403

0000b7d4 <bt_smp_distribute_keys>:
{
    b7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    b7d6:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    b7d8:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (!keys) {
    b7da:	b176      	cbz	r6, b7fa <bt_smp_distribute_keys+0x26>
    b7dc:	4604      	mov	r4, r0
    b7de:	f3bf 8f5b 	dmb	ish
    b7e2:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    b7e6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b7ea:	f013 0f20 	tst.w	r3, #32
    b7ee:	d005      	beq.n	b7fc <bt_smp_distribute_keys+0x28>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    b7f0:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    b7f4:	f013 0f04 	tst.w	r3, #4
    b7f8:	d103      	bne.n	b802 <bt_smp_distribute_keys+0x2e>
    b7fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		legacy_distribute_keys(smp);
    b7fc:	f7ff ff74 	bl	b6e8 <legacy_distribute_keys>
    b800:	e7f6      	b.n	b7f0 <bt_smp_distribute_keys+0x1c>
		buf = smp_create_pdu(conn, BT_SMP_CMD_SIGNING_INFO,
    b802:	2210      	movs	r2, #16
    b804:	210a      	movs	r1, #10
    b806:	4628      	mov	r0, r5
    b808:	f7ff f889 	bl	a91e <smp_create_pdu>
		if (!buf) {
    b80c:	4605      	mov	r5, r0
    b80e:	2800      	cmp	r0, #0
    b810:	d0f3      	beq.n	b7fa <bt_smp_distribute_keys+0x26>
		info = net_buf_add(buf, sizeof(*info));
    b812:	2110      	movs	r1, #16
    b814:	3008      	adds	r0, #8
    b816:	f00f f9e1 	bl	1abdc <net_buf_simple_add>
    b81a:	4607      	mov	r7, r0
		bt_rand(info->csrk, sizeof(info->csrk));
    b81c:	2110      	movs	r1, #16
    b81e:	f005 fe67 	bl	114f0 <bt_rand>
    b822:	f3bf 8f5b 	dmb	ish
    b826:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b82a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b82e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b832:	d105      	bne.n	b840 <bt_smp_distribute_keys+0x6c>
		smp_send(smp, buf, sign_info_sent);
    b834:	4a09      	ldr	r2, [pc, #36]	; (b85c <bt_smp_distribute_keys+0x88>)
    b836:	4629      	mov	r1, r5
    b838:	4620      	mov	r0, r4
    b83a:	f7ff f8c3 	bl	a9c4 <smp_send>
    b83e:	e7dc      	b.n	b7fa <bt_smp_distribute_keys+0x26>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    b840:	2108      	movs	r1, #8
    b842:	4630      	mov	r0, r6
    b844:	f001 fc82 	bl	d14c <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    b848:	2210      	movs	r2, #16
    b84a:	4639      	mov	r1, r7
    b84c:	f106 0048 	add.w	r0, r6, #72	; 0x48
    b850:	f7f4 fd36 	bl	2c0 <memcpy>
			keys->local_csrk.cnt = 0;
    b854:	2300      	movs	r3, #0
    b856:	65b3      	str	r3, [r6, #88]	; 0x58
    b858:	e7ec      	b.n	b834 <bt_smp_distribute_keys+0x60>
    b85a:	bf00      	nop
    b85c:	0000c3f9 	.word	0x0000c3f9

0000b860 <bt_smp_encrypt_change>:
	struct bt_conn *conn = chan->conn;
    b860:	6803      	ldr	r3, [r0, #0]
	if (hci_status) {
    b862:	b911      	cbnz	r1, b86a <bt_smp_encrypt_change+0xa>
	if (!smp || !conn->encrypt) {
    b864:	b108      	cbz	r0, b86a <bt_smp_encrypt_change+0xa>
    b866:	7a9a      	ldrb	r2, [r3, #10]
    b868:	b902      	cbnz	r2, b86c <bt_smp_encrypt_change+0xc>
    b86a:	4770      	bx	lr
{
    b86c:	b510      	push	{r4, lr}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    b86e:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b872:	f3bf 8f5b 	dmb	ish
    b876:	e852 1f00 	ldrex	r1, [r2]
    b87a:	f021 0402 	bic.w	r4, r1, #2
    b87e:	e842 4e00 	strex	lr, r4, [r2]
    b882:	f1be 0f00 	cmp.w	lr, #0
    b886:	d1f6      	bne.n	b876 <bt_smp_encrypt_change+0x16>
    b888:	f3bf 8f5b 	dmb	ish
    b88c:	f011 0f02 	tst.w	r1, #2
    b890:	d100      	bne.n	b894 <bt_smp_encrypt_change+0x34>
    b892:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b894:	f3bf 8f5b 	dmb	ish
    b898:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    b89c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    b8a0:	f011 0f08 	tst.w	r1, #8
    b8a4:	d04b      	beq.n	b93e <bt_smp_encrypt_change+0xde>
    b8a6:	f3bf 8f5b 	dmb	ish
    b8aa:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    b8ae:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b8b2:	f011 0f20 	tst.w	r1, #32
    b8b6:	d015      	beq.n	b8e4 <bt_smp_encrypt_change+0x84>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    b8b8:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    b8bc:	f011 0f08 	tst.w	r1, #8
    b8c0:	d004      	beq.n	b8cc <bt_smp_encrypt_change+0x6c>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
    b8c2:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    b8c6:	f011 0f08 	tst.w	r1, #8
    b8ca:	d146      	bne.n	b95a <bt_smp_encrypt_change+0xfa>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    b8cc:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    b8d0:	f021 0108 	bic.w	r1, r1, #8
    b8d4:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    b8d8:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    b8dc:	f021 0108 	bic.w	r1, r1, #8
    b8e0:	f880 117a 	strb.w	r1, [r0, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    b8e4:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    b8e8:	f011 0f01 	tst.w	r1, #1
    b8ec:	d142      	bne.n	b974 <bt_smp_encrypt_change+0x114>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    b8ee:	f011 0f02 	tst.w	r1, #2
    b8f2:	d14f      	bne.n	b994 <bt_smp_encrypt_change+0x134>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    b8f4:	f011 0f04 	tst.w	r1, #4
    b8f8:	d15c      	bne.n	b9b4 <bt_smp_encrypt_change+0x154>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b8fa:	f3bf 8f5b 	dmb	ish
    b8fe:	e852 1f00 	ldrex	r1, [r2]
    b902:	f041 0104 	orr.w	r1, r1, #4
    b906:	e842 1400 	strex	r4, r1, [r2]
    b90a:	2c00      	cmp	r4, #0
    b90c:	d1f7      	bne.n	b8fe <bt_smp_encrypt_change+0x9e>
    b90e:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    b912:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b914:	b91b      	cbnz	r3, b91e <bt_smp_encrypt_change+0xbe>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    b916:	f890 317a 	ldrb.w	r3, [r0, #378]	; 0x17a
    b91a:	2b00      	cmp	r3, #0
    b91c:	d1b9      	bne.n	b892 <bt_smp_encrypt_change+0x32>
    b91e:	4604      	mov	r4, r0
	bt_smp_distribute_keys(smp);
    b920:	f7ff ff58 	bl	b7d4 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    b924:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    b928:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b92c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b930:	2b00      	cmp	r3, #0
    b932:	d1ae      	bne.n	b892 <bt_smp_encrypt_change+0x32>
		smp_pairing_complete(smp, 0);
    b934:	2100      	movs	r1, #0
    b936:	4620      	mov	r0, r4
    b938:	f7ff fdcb 	bl	b4d2 <smp_pairing_complete>
    b93c:	e7a9      	b.n	b892 <bt_smp_encrypt_change+0x32>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    b93e:	309c      	adds	r0, #156	; 0x9c
    b940:	f3bf 8f5b 	dmb	ish
    b944:	e850 3f00 	ldrex	r3, [r0]
    b948:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    b94c:	e840 3200 	strex	r2, r3, [r0]
    b950:	2a00      	cmp	r2, #0
    b952:	d1f7      	bne.n	b944 <bt_smp_encrypt_change+0xe4>
    b954:	f3bf 8f5b 	dmb	ish
    b958:	bd10      	pop	{r4, pc}
    b95a:	f3bf 8f5b 	dmb	ish
    b95e:	e852 1f00 	ldrex	r1, [r2]
    b962:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
    b966:	e842 1400 	strex	r4, r1, [r2]
    b96a:	2c00      	cmp	r4, #0
    b96c:	d1f7      	bne.n	b95e <bt_smp_encrypt_change+0xfe>
    b96e:	f3bf 8f5b 	dmb	ish
    b972:	e7ab      	b.n	b8cc <bt_smp_encrypt_change+0x6c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    b974:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    b978:	f3bf 8f5b 	dmb	ish
    b97c:	e851 4f00 	ldrex	r4, [r1]
    b980:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    b984:	e841 4e00 	strex	lr, r4, [r1]
    b988:	f1be 0f00 	cmp.w	lr, #0
    b98c:	d1f6      	bne.n	b97c <bt_smp_encrypt_change+0x11c>
    b98e:	f3bf 8f5b 	dmb	ish
    b992:	e7b2      	b.n	b8fa <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    b994:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    b998:	f3bf 8f5b 	dmb	ish
    b99c:	e851 4f00 	ldrex	r4, [r1]
    b9a0:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    b9a4:	e841 4e00 	strex	lr, r4, [r1]
    b9a8:	f1be 0f00 	cmp.w	lr, #0
    b9ac:	d1f6      	bne.n	b99c <bt_smp_encrypt_change+0x13c>
    b9ae:	f3bf 8f5b 	dmb	ish
    b9b2:	e7a2      	b.n	b8fa <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    b9b4:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    b9b8:	f3bf 8f5b 	dmb	ish
    b9bc:	e851 4f00 	ldrex	r4, [r1]
    b9c0:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    b9c4:	e841 4e00 	strex	lr, r4, [r1]
    b9c8:	f1be 0f00 	cmp.w	lr, #0
    b9cc:	d1f6      	bne.n	b9bc <bt_smp_encrypt_change+0x15c>
    b9ce:	f3bf 8f5b 	dmb	ish
    b9d2:	e792      	b.n	b8fa <bt_smp_encrypt_change+0x9a>

0000b9d4 <bt_smp_recv>:
{
    b9d4:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_hdr *hdr = (void *)buf->data;
    b9d6:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    b9d8:	898b      	ldrh	r3, [r1, #12]
    b9da:	b903      	cbnz	r3, b9de <bt_smp_recv+0xa>
    b9dc:	bd70      	pop	{r4, r5, r6, pc}
    b9de:	460c      	mov	r4, r1
    b9e0:	4605      	mov	r5, r0
	net_buf_pull(buf, sizeof(*hdr));
    b9e2:	2101      	movs	r1, #1
    b9e4:	f104 0008 	add.w	r0, r4, #8
    b9e8:	f00f f945 	bl	1ac76 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b9ec:	f3bf 8f5b 	dmb	ish
    b9f0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    b9f4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    b9f8:	f013 0f10 	tst.w	r3, #16
    b9fc:	d1ee      	bne.n	b9dc <bt_smp_recv+0x8>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    b9fe:	7833      	ldrb	r3, [r6, #0]
    ba00:	2b0d      	cmp	r3, #13
    ba02:	d824      	bhi.n	ba4e <bt_smp_recv+0x7a>
    ba04:	4a21      	ldr	r2, [pc, #132]	; (ba8c <bt_smp_recv+0xb8>)
    ba06:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    ba0a:	b302      	cbz	r2, ba4e <bt_smp_recv+0x7a>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    ba0c:	f105 029c 	add.w	r2, r5, #156	; 0x9c
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    ba10:	f003 001f 	and.w	r0, r3, #31
    ba14:	2101      	movs	r1, #1
    ba16:	4081      	lsls	r1, r0
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ba18:	095b      	lsrs	r3, r3, #5
    ba1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ba1e:	43c8      	mvns	r0, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ba20:	f3bf 8f5b 	dmb	ish
    ba24:	e853 2f00 	ldrex	r2, [r3]
    ba28:	ea02 0e00 	and.w	lr, r2, r0
    ba2c:	e843 ec00 	strex	ip, lr, [r3]
    ba30:	f1bc 0f00 	cmp.w	ip, #0
    ba34:	d1f6      	bne.n	ba24 <bt_smp_recv+0x50>
    ba36:	f3bf 8f5b 	dmb	ish
    ba3a:	4211      	tst	r1, r2
    ba3c:	d10c      	bne.n	ba58 <bt_smp_recv+0x84>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    ba3e:	7833      	ldrb	r3, [r6, #0]
    ba40:	2b05      	cmp	r3, #5
    ba42:	d0cb      	beq.n	b9dc <bt_smp_recv+0x8>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    ba44:	2108      	movs	r1, #8
    ba46:	4628      	mov	r0, r5
    ba48:	f7ff fd47 	bl	b4da <smp_error>
    ba4c:	bd70      	pop	{r4, r5, r6, pc}
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    ba4e:	2107      	movs	r1, #7
    ba50:	4628      	mov	r0, r5
    ba52:	f7ff fd42 	bl	b4da <smp_error>
		return;
    ba56:	bd70      	pop	{r4, r5, r6, pc}
	if (buf->len != handlers[hdr->code].expect_len) {
    ba58:	89a1      	ldrh	r1, [r4, #12]
    ba5a:	7832      	ldrb	r2, [r6, #0]
    ba5c:	4b0b      	ldr	r3, [pc, #44]	; (ba8c <bt_smp_recv+0xb8>)
    ba5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    ba62:	791b      	ldrb	r3, [r3, #4]
    ba64:	4299      	cmp	r1, r3
    ba66:	d004      	beq.n	ba72 <bt_smp_recv+0x9e>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    ba68:	210a      	movs	r1, #10
    ba6a:	4628      	mov	r0, r5
    ba6c:	f7ff fd35 	bl	b4da <smp_error>
		return;
    ba70:	bd70      	pop	{r4, r5, r6, pc}
	err = handlers[hdr->code].func(smp, buf);
    ba72:	4b06      	ldr	r3, [pc, #24]	; (ba8c <bt_smp_recv+0xb8>)
    ba74:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    ba78:	4621      	mov	r1, r4
    ba7a:	4628      	mov	r0, r5
    ba7c:	4798      	blx	r3
	if (err) {
    ba7e:	4601      	mov	r1, r0
    ba80:	2800      	cmp	r0, #0
    ba82:	d0ab      	beq.n	b9dc <bt_smp_recv+0x8>
		smp_error(smp, err);
    ba84:	4628      	mov	r0, r5
    ba86:	f7ff fd28 	bl	b4da <smp_error>
    ba8a:	e7a7      	b.n	b9dc <bt_smp_recv+0x8>
    ba8c:	00030e84 	.word	0x00030e84

0000ba90 <smp_dhkey_check>:
{
    ba90:	b570      	push	{r4, r5, r6, lr}
    ba92:	b08c      	sub	sp, #48	; 0x30
    ba94:	4605      	mov	r5, r0
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    ba96:	688e      	ldr	r6, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    ba98:	6803      	ldr	r3, [r0, #0]
    ba9a:	78dc      	ldrb	r4, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ba9c:	b12c      	cbz	r4, baaa <smp_dhkey_check+0x1a>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    ba9e:	2c01      	cmp	r4, #1
    baa0:	d058      	beq.n	bb54 <smp_dhkey_check+0xc4>
	return 0;
    baa2:	2400      	movs	r4, #0
}
    baa4:	4620      	mov	r0, r4
    baa6:	b00c      	add	sp, #48	; 0x30
    baa8:	bd70      	pop	{r4, r5, r6, pc}
		memset(r, 0, sizeof(r));
    baaa:	2210      	movs	r2, #16
    baac:	2100      	movs	r1, #0
    baae:	a808      	add	r0, sp, #32
    bab0:	f01e fb66 	bl	2a180 <memset>
		switch (smp->method) {
    bab4:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    bab8:	2b03      	cmp	r3, #3
    baba:	d847      	bhi.n	bb4c <smp_dhkey_check+0xbc>
    babc:	e8df f003 	tbb	[pc, r3]
    bac0:	08020208 	.word	0x08020208
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    bac4:	2204      	movs	r2, #4
    bac6:	f505 71ba 	add.w	r1, r5, #372	; 0x174
    baca:	a808      	add	r0, sp, #32
    bacc:	f7f4 fbf8 	bl	2c0 <memcpy>
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    bad0:	f105 02ad 	add.w	r2, r5, #173	; 0xad
			   &smp->chan.chan.conn->le.resp_addr,
    bad4:	682b      	ldr	r3, [r5, #0]
    bad6:	f103 0156 	add.w	r1, r3, #86	; 0x56
			   &smp->chan.chan.conn->le.init_addr, e)) {
    bada:	334f      	adds	r3, #79	; 0x4f
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    badc:	a804      	add	r0, sp, #16
    bade:	9003      	str	r0, [sp, #12]
    bae0:	9302      	str	r3, [sp, #8]
    bae2:	9101      	str	r1, [sp, #4]
    bae4:	9200      	str	r2, [sp, #0]
    bae6:	ab08      	add	r3, sp, #32
    bae8:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
    baec:	f105 01d3 	add.w	r1, r5, #211	; 0xd3
    baf0:	f205 1063 	addw	r0, r5, #355	; 0x163
    baf4:	f7ff f96e 	bl	add4 <smp_f6>
    baf8:	b108      	cbz	r0, bafe <smp_dhkey_check+0x6e>
			return BT_SMP_ERR_UNSPECIFIED;
    bafa:	2408      	movs	r4, #8
    bafc:	e7d2      	b.n	baa4 <smp_dhkey_check+0x14>
		if (memcmp(e, req->e, 16)) {
    bafe:	2210      	movs	r2, #16
    bb00:	4631      	mov	r1, r6
    bb02:	eb0d 0002 	add.w	r0, sp, r2
    bb06:	f01e faa7 	bl	2a058 <memcmp>
    bb0a:	b108      	cbz	r0, bb10 <smp_dhkey_check+0x80>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    bb0c:	240b      	movs	r4, #11
    bb0e:	e7c9      	b.n	baa4 <smp_dhkey_check+0x14>
		enc_size = get_encryption_key_size(smp);
    bb10:	4628      	mov	r0, r5
    bb12:	f7fe fe63 	bl	a7dc <get_encryption_key_size>
						smp->tk, enc_size) < 0) {
    bb16:	f105 03e3 	add.w	r3, r5, #227	; 0xe3
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    bb1a:	9002      	str	r0, [sp, #8]
    bb1c:	9301      	str	r3, [sp, #4]
    bb1e:	2300      	movs	r3, #0
    bb20:	9300      	str	r3, [sp, #0]
    bb22:	2200      	movs	r2, #0
    bb24:	2300      	movs	r3, #0
    bb26:	6828      	ldr	r0, [r5, #0]
    bb28:	f7fb f898 	bl	6c5c <bt_conn_le_start_encryption>
    bb2c:	2800      	cmp	r0, #0
    bb2e:	db0f      	blt.n	bb50 <smp_dhkey_check+0xc0>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    bb30:	35a0      	adds	r5, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bb32:	f3bf 8f5b 	dmb	ish
    bb36:	e855 3f00 	ldrex	r3, [r5]
    bb3a:	f043 0302 	orr.w	r3, r3, #2
    bb3e:	e845 3200 	strex	r2, r3, [r5]
    bb42:	2a00      	cmp	r2, #0
    bb44:	d1f7      	bne.n	bb36 <smp_dhkey_check+0xa6>
    bb46:	f3bf 8f5b 	dmb	ish
		return 0;
    bb4a:	e7ab      	b.n	baa4 <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    bb4c:	2408      	movs	r4, #8
    bb4e:	e7a9      	b.n	baa4 <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    bb50:	2408      	movs	r4, #8
    bb52:	e7a7      	b.n	baa4 <smp_dhkey_check+0x14>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    bb54:	f100 04a0 	add.w	r4, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bb58:	f3bf 8f5b 	dmb	ish
    bb5c:	e854 3f00 	ldrex	r3, [r4]
    bb60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    bb64:	e844 3200 	strex	r2, r3, [r4]
    bb68:	2a00      	cmp	r2, #0
    bb6a:	d1f7      	bne.n	bb5c <smp_dhkey_check+0xcc>
    bb6c:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
    bb70:	2210      	movs	r2, #16
    bb72:	4631      	mov	r1, r6
    bb74:	f205 1053 	addw	r0, r5, #339	; 0x153
    bb78:	f7f4 fba2 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bb7c:	f3bf 8f5b 	dmb	ish
    bb80:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    bb84:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    bb88:	f013 0f80 	tst.w	r3, #128	; 0x80
    bb8c:	d10d      	bne.n	bbaa <smp_dhkey_check+0x11a>
    bb8e:	f3bf 8f5b 	dmb	ish
    bb92:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    bb96:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    bb9a:	f413 7f00 	tst.w	r3, #512	; 0x200
    bb9e:	d112      	bne.n	bbc6 <smp_dhkey_check+0x136>
		return compute_and_check_and_send_slave_dhcheck(smp);
    bba0:	4628      	mov	r0, r5
    bba2:	f7ff f9f5 	bl	af90 <compute_and_check_and_send_slave_dhcheck>
    bba6:	4604      	mov	r4, r0
    bba8:	e77c      	b.n	baa4 <smp_dhkey_check+0x14>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bbaa:	f3bf 8f5b 	dmb	ish
    bbae:	e854 3f00 	ldrex	r3, [r4]
    bbb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bbb6:	e844 3200 	strex	r2, r3, [r4]
    bbba:	2a00      	cmp	r2, #0
    bbbc:	d1f7      	bne.n	bbae <smp_dhkey_check+0x11e>
    bbbe:	f3bf 8f5b 	dmb	ish
			return 0;
    bbc2:	2400      	movs	r4, #0
    bbc4:	e76e      	b.n	baa4 <smp_dhkey_check+0x14>
    bbc6:	f3bf 8f5b 	dmb	ish
    bbca:	e854 3f00 	ldrex	r3, [r4]
    bbce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bbd2:	e844 3200 	strex	r2, r3, [r4]
    bbd6:	2a00      	cmp	r2, #0
    bbd8:	d1f7      	bne.n	bbca <smp_dhkey_check+0x13a>
    bbda:	f3bf 8f5b 	dmb	ish
			return 0;
    bbde:	2400      	movs	r4, #0
    bbe0:	e760      	b.n	baa4 <smp_dhkey_check+0x14>

0000bbe2 <legacy_pairing_random>:
{
    bbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bbe6:	b088      	sub	sp, #32
    bbe8:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    bbea:	4605      	mov	r5, r0
    bbec:	f855 6be3 	ldr.w	r6, [r5], #227
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    bbf0:	f100 08d3 	add.w	r8, r0, #211	; 0xd3
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    bbf4:	f106 034f 	add.w	r3, r6, #79	; 0x4f
    bbf8:	f106 0256 	add.w	r2, r6, #86	; 0x56
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    bbfc:	a904      	add	r1, sp, #16
    bbfe:	9102      	str	r1, [sp, #8]
    bc00:	9201      	str	r2, [sp, #4]
    bc02:	9300      	str	r3, [sp, #0]
    bc04:	f100 03ac 	add.w	r3, r0, #172	; 0xac
    bc08:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
    bc0c:	4641      	mov	r1, r8
    bc0e:	4628      	mov	r0, r5
    bc10:	f7ff fada 	bl	b1c8 <smp_c1>
	if (err) {
    bc14:	b120      	cbz	r0, bc20 <legacy_pairing_random+0x3e>
		return BT_SMP_ERR_UNSPECIFIED;
    bc16:	2708      	movs	r7, #8
}
    bc18:	4638      	mov	r0, r7
    bc1a:	b008      	add	sp, #32
    bc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    bc20:	2210      	movs	r2, #16
    bc22:	eb0d 0102 	add.w	r1, sp, r2
    bc26:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    bc2a:	f01e fa15 	bl	2a058 <memcmp>
    bc2e:	b108      	cbz	r0, bc34 <legacy_pairing_random+0x52>
		return BT_SMP_ERR_CONFIRM_FAILED;
    bc30:	2704      	movs	r7, #4
    bc32:	e7f1      	b.n	bc18 <legacy_pairing_random+0x36>
	    conn->role == BT_HCI_ROLE_MASTER) {
    bc34:	78f7      	ldrb	r7, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    bc36:	bb3f      	cbnz	r7, bc88 <legacy_pairing_random+0xa6>
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
    bc38:	ab04      	add	r3, sp, #16
    bc3a:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    bc3e:	4641      	mov	r1, r8
    bc40:	4628      	mov	r0, r5
    bc42:	f7ff fbf0 	bl	b426 <smp_s1>
		if (err) {
    bc46:	b108      	cbz	r0, bc4c <legacy_pairing_random+0x6a>
			return BT_SMP_ERR_UNSPECIFIED;
    bc48:	2708      	movs	r7, #8
    bc4a:	e7e5      	b.n	bc18 <legacy_pairing_random+0x36>
						get_encryption_key_size(smp))) {
    bc4c:	4620      	mov	r0, r4
    bc4e:	f7fe fdc5 	bl	a7dc <get_encryption_key_size>
		if (bt_conn_le_start_encryption(conn, 0, 0, tmp,
    bc52:	9002      	str	r0, [sp, #8]
    bc54:	ab04      	add	r3, sp, #16
    bc56:	9301      	str	r3, [sp, #4]
    bc58:	2300      	movs	r3, #0
    bc5a:	9300      	str	r3, [sp, #0]
    bc5c:	2200      	movs	r2, #0
    bc5e:	2300      	movs	r3, #0
    bc60:	4630      	mov	r0, r6
    bc62:	f7fa fffb 	bl	6c5c <bt_conn_le_start_encryption>
    bc66:	b108      	cbz	r0, bc6c <legacy_pairing_random+0x8a>
			return BT_SMP_ERR_UNSPECIFIED;
    bc68:	2708      	movs	r7, #8
    bc6a:	e7d5      	b.n	bc18 <legacy_pairing_random+0x36>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    bc6c:	34a0      	adds	r4, #160	; 0xa0
    bc6e:	f3bf 8f5b 	dmb	ish
    bc72:	e854 3f00 	ldrex	r3, [r4]
    bc76:	f043 0302 	orr.w	r3, r3, #2
    bc7a:	e844 3200 	strex	r2, r3, [r4]
    bc7e:	2a00      	cmp	r2, #0
    bc80:	d1f7      	bne.n	bc72 <legacy_pairing_random+0x90>
    bc82:	f3bf 8f5b 	dmb	ish
		return 0;
    bc86:	e7c7      	b.n	bc18 <legacy_pairing_random+0x36>
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
    bc88:	ab04      	add	r3, sp, #16
    bc8a:	4642      	mov	r2, r8
    bc8c:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    bc90:	4628      	mov	r0, r5
    bc92:	f7ff fbc8 	bl	b426 <smp_s1>
		if (err) {
    bc96:	b108      	cbz	r0, bc9c <legacy_pairing_random+0xba>
			return BT_SMP_ERR_UNSPECIFIED;
    bc98:	2708      	movs	r7, #8
    bc9a:	e7bd      	b.n	bc18 <legacy_pairing_random+0x36>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    bc9c:	2210      	movs	r2, #16
    bc9e:	eb0d 0102 	add.w	r1, sp, r2
    bca2:	4628      	mov	r0, r5
    bca4:	f7f4 fb0c 	bl	2c0 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    bca8:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bcac:	f3bf 8f5b 	dmb	ish
    bcb0:	e853 2f00 	ldrex	r2, [r3]
    bcb4:	f042 0202 	orr.w	r2, r2, #2
    bcb8:	e843 2100 	strex	r1, r2, [r3]
    bcbc:	2900      	cmp	r1, #0
    bcbe:	d1f7      	bne.n	bcb0 <legacy_pairing_random+0xce>
    bcc0:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    bcc4:	4620      	mov	r0, r4
    bcc6:	f7fe feea 	bl	aa9e <smp_send_pairing_random>
	return 0;
    bcca:	2700      	movs	r7, #0
    bccc:	e7a4      	b.n	bc18 <legacy_pairing_random+0x36>
	...

0000bcd0 <smp_pairing_random>:
{
    bcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bcd2:	b085      	sub	sp, #20
    bcd4:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    bcd6:	f100 05d3 	add.w	r5, r0, #211	; 0xd3
    bcda:	2210      	movs	r2, #16
    bcdc:	6889      	ldr	r1, [r1, #8]
    bcde:	4628      	mov	r0, r5
    bce0:	f7f4 faee 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bce4:	f3bf 8f5b 	dmb	ish
    bce8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bcec:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bcf0:	f013 0f20 	tst.w	r3, #32
    bcf4:	d00d      	beq.n	bd12 <smp_pairing_random+0x42>
    bcf6:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    bcfa:	6823      	ldr	r3, [r4, #0]
    bcfc:	78db      	ldrb	r3, [r3, #3]
    bcfe:	b17b      	cbz	r3, bd20 <smp_pairing_random+0x50>
	switch (smp->method) {
    bd00:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    bd04:	2b03      	cmp	r3, #3
    bd06:	f200 8106 	bhi.w	bf16 <smp_pairing_random+0x246>
    bd0a:	e8df f003 	tbb	[pc, r3]
    bd0e:	bfa0      	.short	0xbfa0
    bd10:	81bf      	.short	0x81bf
		return legacy_pairing_random(smp);
    bd12:	4620      	mov	r0, r4
    bd14:	f7ff ff65 	bl	bbe2 <legacy_pairing_random>
    bd18:	4606      	mov	r6, r0
}
    bd1a:	4630      	mov	r0, r6
    bd1c:	b005      	add	sp, #20
    bd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sc_smp_check_confirm(smp);
    bd20:	4620      	mov	r0, r4
    bd22:	f7fe ff83 	bl	ac2c <sc_smp_check_confirm>
		if (err) {
    bd26:	4606      	mov	r6, r0
    bd28:	2800      	cmp	r0, #0
    bd2a:	d1f6      	bne.n	bd1a <smp_pairing_random+0x4a>
		switch (smp->method) {
    bd2c:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    bd30:	2b03      	cmp	r3, #3
    bd32:	f200 80ee 	bhi.w	bf12 <smp_pairing_random+0x242>
    bd36:	e8df f003 	tbb	[pc, r3]
    bd3a:	2e50      	.short	0x2e50
    bd3c:	022e      	.short	0x022e
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
    bd3e:	ab03      	add	r3, sp, #12
    bd40:	9300      	str	r3, [sp, #0]
    bd42:	462b      	mov	r3, r5
    bd44:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    bd48:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    bd4c:	4873      	ldr	r0, [pc, #460]	; (bf1c <smp_pairing_random+0x24c>)
    bd4e:	f7ff f995 	bl	b07c <smp_g2>
    bd52:	b108      	cbz	r0, bd58 <smp_pairing_random+0x88>
				return BT_SMP_ERR_UNSPECIFIED;
    bd54:	2608      	movs	r6, #8
    bd56:	e7e0      	b.n	bd1a <smp_pairing_random+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bd58:	f3bf 8f5b 	dmb	ish
    bd5c:	e857 3f00 	ldrex	r3, [r7]
    bd60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bd64:	e847 3200 	strex	r2, r3, [r7]
    bd68:	2a00      	cmp	r2, #0
    bd6a:	d1f7      	bne.n	bd5c <smp_pairing_random+0x8c>
    bd6c:	f3bf 8f5b 	dmb	ish
    bd70:	f3bf 8f5b 	dmb	ish
    bd74:	e857 3f00 	ldrex	r3, [r7]
    bd78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bd7c:	e847 3200 	strex	r2, r3, [r7]
    bd80:	2a00      	cmp	r2, #0
    bd82:	d1f7      	bne.n	bd74 <smp_pairing_random+0xa4>
    bd84:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    bd88:	4b65      	ldr	r3, [pc, #404]	; (bf20 <smp_pairing_random+0x250>)
    bd8a:	681b      	ldr	r3, [r3, #0]
    bd8c:	689b      	ldr	r3, [r3, #8]
    bd8e:	9903      	ldr	r1, [sp, #12]
    bd90:	6820      	ldr	r0, [r4, #0]
    bd92:	4798      	blx	r3
			return 0;
    bd94:	e7c1      	b.n	bd1a <smp_pairing_random+0x4a>
			smp->passkey_round++;
    bd96:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    bd9a:	3301      	adds	r3, #1
    bd9c:	b2db      	uxtb	r3, r3
    bd9e:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			if (smp->passkey_round == 20) {
    bda2:	2b14      	cmp	r3, #20
    bda4:	d019      	beq.n	bdda <smp_pairing_random+0x10a>
			if (bt_rand(smp->prnd, 16)) {
    bda6:	2110      	movs	r1, #16
    bda8:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    bdac:	f005 fba0 	bl	114f0 <bt_rand>
    bdb0:	b108      	cbz	r0, bdb6 <smp_pairing_random+0xe6>
				return BT_SMP_ERR_UNSPECIFIED;
    bdb2:	2608      	movs	r6, #8
    bdb4:	e7b1      	b.n	bd1a <smp_pairing_random+0x4a>
			atomic_set_bit(&smp->allowed_cmds,
    bdb6:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    bdba:	f3bf 8f5b 	dmb	ish
    bdbe:	e853 2f00 	ldrex	r2, [r3]
    bdc2:	f042 0208 	orr.w	r2, r2, #8
    bdc6:	e843 2100 	strex	r1, r2, [r3]
    bdca:	2900      	cmp	r1, #0
    bdcc:	d1f7      	bne.n	bdbe <smp_pairing_random+0xee>
    bdce:	f3bf 8f5b 	dmb	ish
			smp_send_pairing_confirm(smp);
    bdd2:	4620      	mov	r0, r4
    bdd4:	f7ff f9aa 	bl	b12c <smp_send_pairing_confirm>
			return 0;
    bdd8:	e79f      	b.n	bd1a <smp_pairing_random+0x4a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bdda:	f3bf 8f5b 	dmb	ish
    bdde:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bde2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    bde6:	f013 0f80 	tst.w	r3, #128	; 0x80
    bdea:	d00c      	beq.n	be06 <smp_pairing_random+0x136>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bdec:	f3bf 8f5b 	dmb	ish
    bdf0:	e857 3f00 	ldrex	r3, [r7]
    bdf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bdf8:	e847 3200 	strex	r2, r3, [r7]
    bdfc:	2a00      	cmp	r2, #0
    bdfe:	d1f7      	bne.n	bdf0 <smp_pairing_random+0x120>
    be00:	f3bf 8f5b 	dmb	ish
			return 0;
    be04:	e789      	b.n	bd1a <smp_pairing_random+0x4a>
		return compute_and_send_master_dhcheck(smp);
    be06:	4620      	mov	r0, r4
    be08:	f7ff f868 	bl	aedc <compute_and_send_master_dhcheck>
    be0c:	4606      	mov	r6, r0
    be0e:	e784      	b.n	bd1a <smp_pairing_random+0x4a>
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    be10:	ab03      	add	r3, sp, #12
    be12:	9300      	str	r3, [sp, #0]
    be14:	f104 03c3 	add.w	r3, r4, #195	; 0xc3
    be18:	462a      	mov	r2, r5
    be1a:	4940      	ldr	r1, [pc, #256]	; (bf1c <smp_pairing_random+0x24c>)
    be1c:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    be20:	f7ff f92c 	bl	b07c <smp_g2>
    be24:	b108      	cbz	r0, be2a <smp_pairing_random+0x15a>
			return BT_SMP_ERR_UNSPECIFIED;
    be26:	2608      	movs	r6, #8
    be28:	e777      	b.n	bd1a <smp_pairing_random+0x4a>
    be2a:	f3bf 8f5b 	dmb	ish
    be2e:	e857 3f00 	ldrex	r3, [r7]
    be32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    be36:	e847 3200 	strex	r2, r3, [r7]
    be3a:	2a00      	cmp	r2, #0
    be3c:	d1f7      	bne.n	be2e <smp_pairing_random+0x15e>
    be3e:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    be42:	4b37      	ldr	r3, [pc, #220]	; (bf20 <smp_pairing_random+0x250>)
    be44:	681b      	ldr	r3, [r3, #0]
    be46:	689b      	ldr	r3, [r3, #8]
    be48:	9903      	ldr	r1, [sp, #12]
    be4a:	6820      	ldr	r0, [r4, #0]
    be4c:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    be4e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    be52:	f3bf 8f5b 	dmb	ish
    be56:	e853 2f00 	ldrex	r2, [r3]
    be5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    be5e:	e843 2100 	strex	r1, r2, [r3]
    be62:	2900      	cmp	r1, #0
    be64:	d1f7      	bne.n	be56 <smp_pairing_random+0x186>
    be66:	f3bf 8f5b 	dmb	ish
    be6a:	f3bf 8f5b 	dmb	ish
    be6e:	e857 3f00 	ldrex	r3, [r7]
    be72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    be76:	e847 3200 	strex	r2, r3, [r7]
    be7a:	2a00      	cmp	r2, #0
    be7c:	d1f7      	bne.n	be6e <smp_pairing_random+0x19e>
    be7e:	f3bf 8f5b 	dmb	ish
	smp_send_pairing_random(smp);
    be82:	4620      	mov	r0, r4
    be84:	f7fe fe0b 	bl	aa9e <smp_send_pairing_random>
	return 0;
    be88:	2600      	movs	r6, #0
    be8a:	e746      	b.n	bd1a <smp_pairing_random+0x4a>
		err = sc_smp_check_confirm(smp);
    be8c:	4620      	mov	r0, r4
    be8e:	f7fe fecd 	bl	ac2c <sc_smp_check_confirm>
		if (err) {
    be92:	4606      	mov	r6, r0
    be94:	2800      	cmp	r0, #0
    be96:	f47f af40 	bne.w	bd1a <smp_pairing_random+0x4a>
		atomic_set_bit(&smp->allowed_cmds,
    be9a:	f104 059c 	add.w	r5, r4, #156	; 0x9c
    be9e:	f3bf 8f5b 	dmb	ish
    bea2:	e855 3f00 	ldrex	r3, [r5]
    bea6:	f043 0308 	orr.w	r3, r3, #8
    beaa:	e845 3200 	strex	r2, r3, [r5]
    beae:	2a00      	cmp	r2, #0
    beb0:	d1f7      	bne.n	bea2 <smp_pairing_random+0x1d2>
    beb2:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    beb6:	4620      	mov	r0, r4
    beb8:	f7fe fdf1 	bl	aa9e <smp_send_pairing_random>
		smp->passkey_round++;
    bebc:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    bec0:	3301      	adds	r3, #1
    bec2:	b2db      	uxtb	r3, r3
    bec4:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		if (smp->passkey_round == 20) {
    bec8:	2b14      	cmp	r3, #20
    beca:	d009      	beq.n	bee0 <smp_pairing_random+0x210>
		if (bt_rand(smp->prnd, 16)) {
    becc:	2110      	movs	r1, #16
    bece:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    bed2:	f005 fb0d 	bl	114f0 <bt_rand>
    bed6:	2800      	cmp	r0, #0
    bed8:	f43f af1f 	beq.w	bd1a <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    bedc:	2608      	movs	r6, #8
    bede:	e71c      	b.n	bd1a <smp_pairing_random+0x4a>
    bee0:	f3bf 8f5b 	dmb	ish
    bee4:	e855 3f00 	ldrex	r3, [r5]
    bee8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    beec:	e845 3200 	strex	r2, r3, [r5]
    bef0:	2a00      	cmp	r2, #0
    bef2:	d1f7      	bne.n	bee4 <smp_pairing_random+0x214>
    bef4:	f3bf 8f5b 	dmb	ish
    bef8:	f3bf 8f5b 	dmb	ish
    befc:	e857 3f00 	ldrex	r3, [r7]
    bf00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    bf04:	e847 3200 	strex	r2, r3, [r7]
    bf08:	2a00      	cmp	r2, #0
    bf0a:	d1f7      	bne.n	befc <smp_pairing_random+0x22c>
    bf0c:	f3bf 8f5b 	dmb	ish
			return 0;
    bf10:	e703      	b.n	bd1a <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    bf12:	2608      	movs	r6, #8
    bf14:	e701      	b.n	bd1a <smp_pairing_random+0x4a>
		return BT_SMP_ERR_UNSPECIFIED;
    bf16:	2608      	movs	r6, #8
    bf18:	e6ff      	b.n	bd1a <smp_pairing_random+0x4a>
    bf1a:	bf00      	nop
    bf1c:	20000a64 	.word	0x20000a64
    bf20:	20002aa8 	.word	0x20002aa8

0000bf24 <generate_dhkey>:
{
    bf24:	b510      	push	{r4, lr}
    bf26:	4604      	mov	r4, r0
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    bf28:	490a      	ldr	r1, [pc, #40]	; (bf54 <generate_dhkey+0x30>)
    bf2a:	30f3      	adds	r0, #243	; 0xf3
    bf2c:	f7fa fd1e 	bl	696c <bt_dh_key_gen>
    bf30:	b108      	cbz	r0, bf36 <generate_dhkey+0x12>
		return BT_SMP_ERR_UNSPECIFIED;
    bf32:	2008      	movs	r0, #8
}
    bf34:	bd10      	pop	{r4, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    bf36:	34a0      	adds	r4, #160	; 0xa0
    bf38:	f3bf 8f5b 	dmb	ish
    bf3c:	e854 3f00 	ldrex	r3, [r4]
    bf40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bf44:	e844 3200 	strex	r2, r3, [r4]
    bf48:	2a00      	cmp	r2, #0
    bf4a:	d1f7      	bne.n	bf3c <generate_dhkey+0x18>
    bf4c:	f3bf 8f5b 	dmb	ish
	return 0;
    bf50:	bd10      	pop	{r4, pc}
    bf52:	bf00      	nop
    bf54:	0000b515 	.word	0x0000b515

0000bf58 <smp_public_key_slave>:
{
    bf58:	b510      	push	{r4, lr}
    bf5a:	4604      	mov	r4, r0
	err = sc_send_public_key(smp);
    bf5c:	f7fe fd60 	bl	aa20 <sc_send_public_key>
	if (err) {
    bf60:	4603      	mov	r3, r0
    bf62:	2800      	cmp	r0, #0
    bf64:	d154      	bne.n	c010 <smp_public_key_slave+0xb8>
	switch (smp->method) {
    bf66:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    bf6a:	2b03      	cmp	r3, #3
    bf6c:	d852      	bhi.n	c014 <smp_public_key_slave+0xbc>
    bf6e:	e8df f003 	tbb	[pc, r3]
    bf72:	2a02      	.short	0x2a02
    bf74:	0216      	.short	0x0216
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    bf76:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    bf7a:	f3bf 8f5b 	dmb	ish
    bf7e:	e853 2f00 	ldrex	r2, [r3]
    bf82:	f042 0210 	orr.w	r2, r2, #16
    bf86:	e843 2100 	strex	r1, r2, [r3]
    bf8a:	2900      	cmp	r1, #0
    bf8c:	d1f7      	bne.n	bf7e <smp_public_key_slave+0x26>
    bf8e:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_confirm(smp);
    bf92:	4620      	mov	r0, r4
    bf94:	f7ff f8ca 	bl	b12c <smp_send_pairing_confirm>
		if (err) {
    bf98:	4603      	mov	r3, r0
    bf9a:	b3a8      	cbz	r0, c008 <smp_public_key_slave+0xb0>
    bf9c:	e038      	b.n	c010 <smp_public_key_slave+0xb8>
		err = display_passkey(smp);
    bf9e:	4620      	mov	r0, r4
    bfa0:	f7fe fcea 	bl	a978 <display_passkey>
		if (err) {
    bfa4:	4603      	mov	r3, r0
    bfa6:	bb98      	cbnz	r0, c010 <smp_public_key_slave+0xb8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    bfa8:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    bfac:	f3bf 8f5b 	dmb	ish
    bfb0:	e853 2f00 	ldrex	r2, [r3]
    bfb4:	f042 0208 	orr.w	r2, r2, #8
    bfb8:	e843 2100 	strex	r1, r2, [r3]
    bfbc:	2900      	cmp	r1, #0
    bfbe:	d1f7      	bne.n	bfb0 <smp_public_key_slave+0x58>
    bfc0:	f3bf 8f5b 	dmb	ish
    bfc4:	e020      	b.n	c008 <smp_public_key_slave+0xb0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    bfc6:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    bfca:	f3bf 8f5b 	dmb	ish
    bfce:	e853 2f00 	ldrex	r2, [r3]
    bfd2:	f042 0208 	orr.w	r2, r2, #8
    bfd6:	e843 2100 	strex	r1, r2, [r3]
    bfda:	2900      	cmp	r1, #0
    bfdc:	d1f7      	bne.n	bfce <smp_public_key_slave+0x76>
    bfde:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bfe2:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bfe6:	f3bf 8f5b 	dmb	ish
    bfea:	e853 2f00 	ldrex	r2, [r3]
    bfee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    bff2:	e843 2100 	strex	r1, r2, [r3]
    bff6:	2900      	cmp	r1, #0
    bff8:	d1f7      	bne.n	bfea <smp_public_key_slave+0x92>
    bffa:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(smp->chan.chan.conn);
    bffe:	4b06      	ldr	r3, [pc, #24]	; (c018 <smp_public_key_slave+0xc0>)
    c000:	681b      	ldr	r3, [r3, #0]
    c002:	685b      	ldr	r3, [r3, #4]
    c004:	6820      	ldr	r0, [r4, #0]
    c006:	4798      	blx	r3
	return generate_dhkey(smp);
    c008:	4620      	mov	r0, r4
    c00a:	f7ff ff8b 	bl	bf24 <generate_dhkey>
    c00e:	4603      	mov	r3, r0
}
    c010:	4618      	mov	r0, r3
    c012:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    c014:	2308      	movs	r3, #8
    c016:	e7fb      	b.n	c010 <smp_public_key_slave+0xb8>
    c018:	20002aa8 	.word	0x20002aa8

0000c01c <bt_smp_pkey_ready>:
{
    c01c:	b538      	push	{r3, r4, r5, lr}
	if (!pkey) {
    c01e:	b150      	cbz	r0, c036 <bt_smp_pkey_ready+0x1a>
    c020:	4601      	mov	r1, r0
	memcpy(sc_public_key, pkey, 64);
    c022:	2240      	movs	r2, #64	; 0x40
    c024:	4826      	ldr	r0, [pc, #152]	; (c0c0 <bt_smp_pkey_ready+0xa4>)
    c026:	f7f4 f94b 	bl	2c0 <memcpy>
	sc_local_pkey_valid = true;
    c02a:	2201      	movs	r2, #1
    c02c:	4b25      	ldr	r3, [pc, #148]	; (c0c4 <bt_smp_pkey_ready+0xa8>)
    c02e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    c030:	2400      	movs	r4, #0
    c032:	b124      	cbz	r4, c03e <bt_smp_pkey_ready+0x22>
    c034:	bd38      	pop	{r3, r4, r5, pc}
		sc_local_pkey_valid = false;
    c036:	2200      	movs	r2, #0
    c038:	4b22      	ldr	r3, [pc, #136]	; (c0c4 <bt_smp_pkey_ready+0xa8>)
    c03a:	701a      	strb	r2, [r3, #0]
		return;
    c03c:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_smp *smp = &bt_smp_pool[i];
    c03e:	4a22      	ldr	r2, [pc, #136]	; (c0c8 <bt_smp_pkey_ready+0xac>)
    c040:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c044:	fb03 f304 	mul.w	r3, r3, r4
    c048:	18d5      	adds	r5, r2, r3
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    c04a:	33a0      	adds	r3, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c04c:	f3bf 8f5b 	dmb	ish
    c050:	58d3      	ldr	r3, [r2, r3]
    c052:	f3bf 8f5b 	dmb	ish
    c056:	f013 0f40 	tst.w	r3, #64	; 0x40
    c05a:	d020      	beq.n	c09e <bt_smp_pkey_ready+0x82>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c05c:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c060:	fb03 f304 	mul.w	r3, r3, r4
    c064:	58d3      	ldr	r3, [r2, r3]
    c066:	78db      	ldrb	r3, [r3, #3]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c068:	b9fb      	cbnz	r3, c0aa <bt_smp_pkey_ready+0x8e>
			err = sc_send_public_key(smp);
    c06a:	4628      	mov	r0, r5
    c06c:	f7fe fcd8 	bl	aa20 <sc_send_public_key>
			if (err) {
    c070:	4601      	mov	r1, r0
    c072:	b9b0      	cbnz	r0, c0a2 <bt_smp_pkey_ready+0x86>
			atomic_set_bit(&smp->allowed_cmds,
    c074:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c078:	fb03 f304 	mul.w	r3, r3, r4
    c07c:	f103 0298 	add.w	r2, r3, #152	; 0x98
    c080:	4b11      	ldr	r3, [pc, #68]	; (c0c8 <bt_smp_pkey_ready+0xac>)
    c082:	4413      	add	r3, r2
    c084:	3304      	adds	r3, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c086:	f3bf 8f5b 	dmb	ish
    c08a:	e853 2f00 	ldrex	r2, [r3]
    c08e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    c092:	e843 2100 	strex	r1, r2, [r3]
    c096:	2900      	cmp	r1, #0
    c098:	d1f7      	bne.n	c08a <bt_smp_pkey_ready+0x6e>
    c09a:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    c09e:	3401      	adds	r4, #1
    c0a0:	e7c7      	b.n	c032 <bt_smp_pkey_ready+0x16>
				smp_error(smp, err);
    c0a2:	4628      	mov	r0, r5
    c0a4:	f7ff fa19 	bl	b4da <smp_error>
    c0a8:	e7e4      	b.n	c074 <bt_smp_pkey_ready+0x58>
		err = smp_public_key_slave(smp);
    c0aa:	4628      	mov	r0, r5
    c0ac:	f7ff ff54 	bl	bf58 <smp_public_key_slave>
		if (err) {
    c0b0:	4601      	mov	r1, r0
    c0b2:	2800      	cmp	r0, #0
    c0b4:	d0f3      	beq.n	c09e <bt_smp_pkey_ready+0x82>
			smp_error(smp, err);
    c0b6:	4628      	mov	r0, r5
    c0b8:	f7ff fa0f 	bl	b4da <smp_error>
    c0bc:	e7ef      	b.n	c09e <bt_smp_pkey_ready+0x82>
    c0be:	bf00      	nop
    c0c0:	20000a64 	.word	0x20000a64
    c0c4:	20000a60 	.word	0x20000a60
    c0c8:	200008bc 	.word	0x200008bc

0000c0cc <smp_public_key>:
{
    c0cc:	b570      	push	{r4, r5, r6, lr}
    c0ce:	4604      	mov	r4, r0
	struct bt_smp_public_key *req = (void *)buf->data;
    c0d0:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    c0d2:	f100 05f3 	add.w	r5, r0, #243	; 0xf3
    c0d6:	2220      	movs	r2, #32
    c0d8:	4631      	mov	r1, r6
    c0da:	4628      	mov	r0, r5
    c0dc:	f7f4 f8f0 	bl	2c0 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    c0e0:	2220      	movs	r2, #32
    c0e2:	18b1      	adds	r1, r6, r2
    c0e4:	f204 1013 	addw	r0, r4, #275	; 0x113
    c0e8:	f7f4 f8ea 	bl	2c0 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    c0ec:	2240      	movs	r2, #64	; 0x40
    c0ee:	493d      	ldr	r1, [pc, #244]	; (c1e4 <smp_public_key+0x118>)
    c0f0:	4628      	mov	r0, r5
    c0f2:	f01d ffb1 	bl	2a058 <memcmp>
    c0f6:	b158      	cbz	r0, c110 <smp_public_key+0x44>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c0f8:	6823      	ldr	r3, [r4, #0]
    c0fa:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c0fc:	2b00      	cmp	r3, #0
    c0fe:	d156      	bne.n	c1ae <smp_public_key+0xe2>
		switch (smp->method) {
    c100:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c104:	2b03      	cmp	r3, #3
    c106:	d86a      	bhi.n	c1de <smp_public_key+0x112>
    c108:	e8df f003 	tbb	[pc, r3]
    c10c:	11243d11 	.word	0x11243d11
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    c110:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c114:	f3bf 8f5b 	dmb	ish
    c118:	e853 2f00 	ldrex	r2, [r3]
    c11c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    c120:	e843 2100 	strex	r1, r2, [r3]
    c124:	2900      	cmp	r1, #0
    c126:	d1f7      	bne.n	c118 <smp_public_key+0x4c>
    c128:	f3bf 8f5b 	dmb	ish
    c12c:	e7e4      	b.n	c0f8 <smp_public_key+0x2c>
			atomic_set_bit(&smp->allowed_cmds,
    c12e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c132:	f3bf 8f5b 	dmb	ish
    c136:	e853 2f00 	ldrex	r2, [r3]
    c13a:	f042 0208 	orr.w	r2, r2, #8
    c13e:	e843 2100 	strex	r1, r2, [r3]
    c142:	2900      	cmp	r1, #0
    c144:	d1f7      	bne.n	c136 <smp_public_key+0x6a>
    c146:	f3bf 8f5b 	dmb	ish
		return generate_dhkey(smp);
    c14a:	4620      	mov	r0, r4
    c14c:	f7ff feea 	bl	bf24 <generate_dhkey>
    c150:	4603      	mov	r3, r0
    c152:	e033      	b.n	c1bc <smp_public_key+0xf0>
			err = display_passkey(smp);
    c154:	4620      	mov	r0, r4
    c156:	f7fe fc0f 	bl	a978 <display_passkey>
			if (err) {
    c15a:	4603      	mov	r3, r0
    c15c:	bb70      	cbnz	r0, c1bc <smp_public_key+0xf0>
			atomic_set_bit(&smp->allowed_cmds,
    c15e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c162:	f3bf 8f5b 	dmb	ish
    c166:	e853 2f00 	ldrex	r2, [r3]
    c16a:	f042 0208 	orr.w	r2, r2, #8
    c16e:	e843 2100 	strex	r1, r2, [r3]
    c172:	2900      	cmp	r1, #0
    c174:	d1f7      	bne.n	c166 <smp_public_key+0x9a>
    c176:	f3bf 8f5b 	dmb	ish
			err = smp_send_pairing_confirm(smp);
    c17a:	4620      	mov	r0, r4
    c17c:	f7fe ffd6 	bl	b12c <smp_send_pairing_confirm>
			if (err) {
    c180:	4603      	mov	r3, r0
    c182:	b9d8      	cbnz	r0, c1bc <smp_public_key+0xf0>
    c184:	e7e1      	b.n	c14a <smp_public_key+0x7e>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c186:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c18a:	f3bf 8f5b 	dmb	ish
    c18e:	e853 2f00 	ldrex	r2, [r3]
    c192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    c196:	e843 2100 	strex	r1, r2, [r3]
    c19a:	2900      	cmp	r1, #0
    c19c:	d1f7      	bne.n	c18e <smp_public_key+0xc2>
    c19e:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_entry(smp->chan.chan.conn);
    c1a2:	4b11      	ldr	r3, [pc, #68]	; (c1e8 <smp_public_key+0x11c>)
    c1a4:	681b      	ldr	r3, [r3, #0]
    c1a6:	685b      	ldr	r3, [r3, #4]
    c1a8:	6820      	ldr	r0, [r4, #0]
    c1aa:	4798      	blx	r3
			break;
    c1ac:	e7cd      	b.n	c14a <smp_public_key+0x7e>
	if (!sc_local_pkey_valid) {
    c1ae:	4b0f      	ldr	r3, [pc, #60]	; (c1ec <smp_public_key+0x120>)
    c1b0:	781b      	ldrb	r3, [r3, #0]
    c1b2:	b12b      	cbz	r3, c1c0 <smp_public_key+0xf4>
	err = smp_public_key_slave(smp);
    c1b4:	4620      	mov	r0, r4
    c1b6:	f7ff fecf 	bl	bf58 <smp_public_key_slave>
    c1ba:	4603      	mov	r3, r0
}
    c1bc:	4618      	mov	r0, r3
    c1be:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    c1c0:	34a0      	adds	r4, #160	; 0xa0
    c1c2:	f3bf 8f5b 	dmb	ish
    c1c6:	e854 3f00 	ldrex	r3, [r4]
    c1ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c1ce:	e844 3200 	strex	r2, r3, [r4]
    c1d2:	2a00      	cmp	r2, #0
    c1d4:	d1f7      	bne.n	c1c6 <smp_public_key+0xfa>
    c1d6:	f3bf 8f5b 	dmb	ish
		return 0;
    c1da:	2300      	movs	r3, #0
    c1dc:	e7ee      	b.n	c1bc <smp_public_key+0xf0>
			return BT_SMP_ERR_UNSPECIFIED;
    c1de:	2308      	movs	r3, #8
    c1e0:	e7ec      	b.n	c1bc <smp_public_key+0xf0>
    c1e2:	bf00      	nop
    c1e4:	00030f44 	.word	0x00030f44
    c1e8:	20002aa8 	.word	0x20002aa8
    c1ec:	20000a60 	.word	0x20000a60

0000c1f0 <smp_signing_info>:
{
    c1f0:	b570      	push	{r4, r5, r6, lr}
    c1f2:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c1f4:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c1f6:	f3bf 8f5b 	dmb	ish
    c1fa:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c1fe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c202:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c206:	d111      	bne.n	c22c <smp_signing_info+0x3c>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    c208:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c20c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    c210:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c214:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c216:	b902      	cbnz	r2, c21a <smp_signing_info+0x2a>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c218:	b1ab      	cbz	r3, c246 <smp_signing_info+0x56>
	if (!smp->local_dist && !smp->remote_dist) {
    c21a:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    c21e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c222:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c226:	b193      	cbz	r3, c24e <smp_signing_info+0x5e>
	return 0;
    c228:	2000      	movs	r0, #0
}
    c22a:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_signing_info *req = (void *)buf->data;
    c22c:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    c22e:	f105 0148 	add.w	r1, r5, #72	; 0x48
    c232:	2010      	movs	r0, #16
    c234:	f000 ff8e 	bl	d154 <bt_keys_get_type>
		if (!keys) {
    c238:	b178      	cbz	r0, c25a <smp_signing_info+0x6a>
		memcpy(keys->remote_csrk.val, req->csrk,
    c23a:	2210      	movs	r2, #16
    c23c:	4631      	mov	r1, r6
    c23e:	305c      	adds	r0, #92	; 0x5c
    c240:	f7f4 f83e 	bl	2c0 <memcpy>
    c244:	e7e0      	b.n	c208 <smp_signing_info+0x18>
		bt_smp_distribute_keys(smp);
    c246:	4620      	mov	r0, r4
    c248:	f7ff fac4 	bl	b7d4 <bt_smp_distribute_keys>
    c24c:	e7e5      	b.n	c21a <smp_signing_info+0x2a>
		smp_pairing_complete(smp, 0);
    c24e:	2100      	movs	r1, #0
    c250:	4620      	mov	r0, r4
    c252:	f7ff f93e 	bl	b4d2 <smp_pairing_complete>
	return 0;
    c256:	2000      	movs	r0, #0
    c258:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c25a:	2008      	movs	r0, #8
    c25c:	bd70      	pop	{r4, r5, r6, pc}

0000c25e <smp_ident_info>:
{
    c25e:	b538      	push	{r3, r4, r5, lr}
    c260:	4604      	mov	r4, r0
    c262:	f3bf 8f5b 	dmb	ish
    c266:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c26a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c26e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c272:	d00b      	beq.n	c28c <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
    c274:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    c276:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    c278:	3148      	adds	r1, #72	; 0x48
    c27a:	2002      	movs	r0, #2
    c27c:	f000 ff6a 	bl	d154 <bt_keys_get_type>
		if (!keys) {
    c280:	b198      	cbz	r0, c2aa <smp_ident_info+0x4c>
		memcpy(keys->irk.val, req->irk, 16);
    c282:	2210      	movs	r2, #16
    c284:	4629      	mov	r1, r5
    c286:	3030      	adds	r0, #48	; 0x30
    c288:	f7f4 f81a 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    c28c:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c28e:	f3bf 8f5b 	dmb	ish
    c292:	e854 3f00 	ldrex	r3, [r4]
    c296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c29a:	e844 3200 	strex	r2, r3, [r4]
    c29e:	2a00      	cmp	r2, #0
    c2a0:	d1f7      	bne.n	c292 <smp_ident_info+0x34>
    c2a2:	f3bf 8f5b 	dmb	ish
	return 0;
    c2a6:	2000      	movs	r0, #0
    c2a8:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c2aa:	2008      	movs	r0, #8
}
    c2ac:	bd38      	pop	{r3, r4, r5, pc}

0000c2ae <smp_master_ident>:
{
    c2ae:	b570      	push	{r4, r5, r6, lr}
    c2b0:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c2b2:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c2b4:	f3bf 8f5b 	dmb	ish
    c2b8:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c2bc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c2c0:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c2c4:	d116      	bne.n	c2f4 <smp_master_ident+0x46>
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    c2c6:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c2ca:	f013 0f02 	tst.w	r3, #2
    c2ce:	d127      	bne.n	c320 <smp_master_ident+0x72>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c2d0:	f013 0f04 	tst.w	r3, #4
    c2d4:	d133      	bne.n	c33e <smp_master_ident+0x90>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c2d6:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c2d8:	b91b      	cbnz	r3, c2e2 <smp_master_ident+0x34>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c2da:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c2de:	2b00      	cmp	r3, #0
    c2e0:	d03c      	beq.n	c35c <smp_master_ident+0xae>
	if (!smp->local_dist && !smp->remote_dist) {
    c2e2:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    c2e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c2ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c2ee:	b3cb      	cbz	r3, c364 <smp_master_ident+0xb6>
	return 0;
    c2f0:	2000      	movs	r0, #0
}
    c2f2:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_master_ident *req = (void *)buf->data;
    c2f4:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    c2f6:	f105 0148 	add.w	r1, r5, #72	; 0x48
    c2fa:	2004      	movs	r0, #4
    c2fc:	f000 ff2a 	bl	d154 <bt_keys_get_type>
		if (!keys) {
    c300:	b3b0      	cbz	r0, c370 <smp_master_ident+0xc2>
		keys->ltk.ediv = req->ediv;
    c302:	8832      	ldrh	r2, [r6, #0]
    c304:	8302      	strh	r2, [r0, #24]
		keys->ltk.rand = req->rand;
    c306:	f8d6 1002 	ldr.w	r1, [r6, #2]
    c30a:	f8d6 2006 	ldr.w	r2, [r6, #6]
    c30e:	6101      	str	r1, [r0, #16]
    c310:	6142      	str	r2, [r0, #20]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    c312:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c316:	f023 0301 	bic.w	r3, r3, #1
    c31a:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
    c31e:	e7d2      	b.n	c2c6 <smp_master_ident+0x18>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    c320:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c324:	f3bf 8f5b 	dmb	ish
    c328:	e853 2f00 	ldrex	r2, [r3]
    c32c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    c330:	e843 2100 	strex	r1, r2, [r3]
    c334:	2900      	cmp	r1, #0
    c336:	d1f7      	bne.n	c328 <smp_master_ident+0x7a>
    c338:	f3bf 8f5b 	dmb	ish
    c33c:	e7cb      	b.n	c2d6 <smp_master_ident+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c33e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c342:	f3bf 8f5b 	dmb	ish
    c346:	e853 2f00 	ldrex	r2, [r3]
    c34a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    c34e:	e843 2100 	strex	r1, r2, [r3]
    c352:	2900      	cmp	r1, #0
    c354:	d1f7      	bne.n	c346 <smp_master_ident+0x98>
    c356:	f3bf 8f5b 	dmb	ish
    c35a:	e7bc      	b.n	c2d6 <smp_master_ident+0x28>
		bt_smp_distribute_keys(smp);
    c35c:	4620      	mov	r0, r4
    c35e:	f7ff fa39 	bl	b7d4 <bt_smp_distribute_keys>
    c362:	e7be      	b.n	c2e2 <smp_master_ident+0x34>
		smp_pairing_complete(smp, 0);
    c364:	2100      	movs	r1, #0
    c366:	4620      	mov	r0, r4
    c368:	f7ff f8b3 	bl	b4d2 <smp_pairing_complete>
	return 0;
    c36c:	2000      	movs	r0, #0
    c36e:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c370:	2008      	movs	r0, #8
    c372:	bd70      	pop	{r4, r5, r6, pc}

0000c374 <smp_encrypt_info>:
{
    c374:	b538      	push	{r3, r4, r5, lr}
    c376:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c378:	f3bf 8f5b 	dmb	ish
    c37c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c380:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c384:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c388:	d00b      	beq.n	c3a2 <smp_encrypt_info+0x2e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    c38a:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    c38c:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    c38e:	3148      	adds	r1, #72	; 0x48
    c390:	2004      	movs	r0, #4
    c392:	f000 fedf 	bl	d154 <bt_keys_get_type>
		if (!keys) {
    c396:	b198      	cbz	r0, c3c0 <smp_encrypt_info+0x4c>
		memcpy(keys->ltk.val, req->ltk, 16);
    c398:	2210      	movs	r2, #16
    c39a:	4629      	mov	r1, r5
    c39c:	301a      	adds	r0, #26
    c39e:	f7f3 ff8f 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    c3a2:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c3a4:	f3bf 8f5b 	dmb	ish
    c3a8:	e854 3f00 	ldrex	r3, [r4]
    c3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c3b0:	e844 3200 	strex	r2, r3, [r4]
    c3b4:	2a00      	cmp	r2, #0
    c3b6:	d1f7      	bne.n	c3a8 <smp_encrypt_info+0x34>
    c3b8:	f3bf 8f5b 	dmb	ish
	return 0;
    c3bc:	2000      	movs	r0, #0
    c3be:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c3c0:	2008      	movs	r0, #8
}
    c3c2:	bd38      	pop	{r3, r4, r5, pc}

0000c3c4 <smp_check_complete>:
	if (conn->type == BT_CONN_TYPE_LE) {
    c3c4:	7883      	ldrb	r3, [r0, #2]
    c3c6:	b103      	cbz	r3, c3ca <smp_check_complete+0x6>
    c3c8:	4770      	bx	lr
{
    c3ca:	b510      	push	{r4, lr}
    c3cc:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    c3ce:	2106      	movs	r1, #6
    c3d0:	f7fb ffa1 	bl	8316 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
    c3d4:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    c3d8:	ea21 0104 	bic.w	r1, r1, r4
    c3dc:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		if (!smp->local_dist && !smp->remote_dist) {
    c3e0:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
    c3e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c3e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c3ec:	b103      	cbz	r3, c3f0 <smp_check_complete+0x2c>
    c3ee:	bd10      	pop	{r4, pc}
			smp_pairing_complete(smp, 0);
    c3f0:	2100      	movs	r1, #0
    c3f2:	f7ff f86e 	bl	b4d2 <smp_pairing_complete>
    c3f6:	e7fa      	b.n	c3ee <smp_check_complete+0x2a>

0000c3f8 <sign_info_sent>:
{
    c3f8:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_SIGN);
    c3fa:	2104      	movs	r1, #4
    c3fc:	f7ff ffe2 	bl	c3c4 <smp_check_complete>
    c400:	bd08      	pop	{r3, pc}

0000c402 <ident_sent>:
{
    c402:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
    c404:	2101      	movs	r1, #1
    c406:	f7ff ffdd 	bl	c3c4 <smp_check_complete>
    c40a:	bd08      	pop	{r3, pc}

0000c40c <smp_ident_addr_info>:
{
    c40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    c410:	6806      	ldr	r6, [r0, #0]
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    c412:	688d      	ldr	r5, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    c414:	782b      	ldrb	r3, [r5, #0]
    c416:	b153      	cbz	r3, c42e <smp_ident_addr_info+0x22>
		return true;
	}

	return BT_ADDR_IS_STATIC(&addr->a);
    c418:	79ab      	ldrb	r3, [r5, #6]
    c41a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c41e:	2bc0      	cmp	r3, #192	; 0xc0
    c420:	bf14      	ite	ne
    c422:	2300      	movne	r3, #0
    c424:	2301      	moveq	r3, #1
	if (!bt_addr_le_is_identity(&req->addr)) {
    c426:	b923      	cbnz	r3, c432 <smp_ident_addr_info+0x26>
		return BT_SMP_ERR_INVALID_PARAMS;
    c428:	200a      	movs	r0, #10
    c42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    c42e:	2301      	movs	r3, #1
    c430:	e7f9      	b.n	c426 <smp_ident_addr_info+0x1a>
    c432:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c434:	f3bf 8f5b 	dmb	ish
    c438:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c43c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c440:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c444:	d119      	bne.n	c47a <smp_ident_addr_info+0x6e>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    c446:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c44a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    c44e:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c452:	f013 0f04 	tst.w	r3, #4
    c456:	d14f      	bne.n	c4f8 <smp_ident_addr_info+0xec>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c458:	78f3      	ldrb	r3, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c45a:	b91b      	cbnz	r3, c464 <smp_ident_addr_info+0x58>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c45c:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c460:	2b00      	cmp	r3, #0
    c462:	d058      	beq.n	c516 <smp_ident_addr_info+0x10a>
	if (!smp->local_dist && !smp->remote_dist) {
    c464:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    c468:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c46c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c470:	2b00      	cmp	r3, #0
    c472:	d054      	beq.n	c51e <smp_ident_addr_info+0x112>
	return 0;
    c474:	2000      	movs	r0, #0
}
    c476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    c47a:	f106 0848 	add.w	r8, r6, #72	; 0x48
    c47e:	4641      	mov	r1, r8
    c480:	2002      	movs	r0, #2
    c482:	f000 fe67 	bl	d154 <bt_keys_get_type>
		if (!keys) {
    c486:	4681      	mov	r9, r0
    c488:	2800      	cmp	r0, #0
    c48a:	d04f      	beq.n	c52c <smp_ident_addr_info+0x120>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    c48c:	78f3      	ldrb	r3, [r6, #3]
    c48e:	bb43      	cbnz	r3, c4e2 <smp_ident_addr_info+0xd6>
			dst = &conn->le.resp_addr;
    c490:	f106 0156 	add.w	r1, r6, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
    c494:	780b      	ldrb	r3, [r1, #0]
    c496:	2b01      	cmp	r3, #1
    c498:	d026      	beq.n	c4e8 <smp_ident_addr_info+0xdc>
		return false;
    c49a:	2700      	movs	r7, #0
		if (bt_addr_le_is_rpa(dst)) {
    c49c:	2f00      	cmp	r7, #0
    c49e:	d0d2      	beq.n	c446 <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    c4a0:	2206      	movs	r2, #6
    c4a2:	3101      	adds	r1, #1
    c4a4:	f109 0040 	add.w	r0, r9, #64	; 0x40
    c4a8:	f7f3 ff0a 	bl	2c0 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    c4ac:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
    c4b0:	b13b      	cbz	r3, c4c2 <smp_ident_addr_info+0xb6>
	return BT_ADDR_IS_STATIC(&addr->a);
    c4b2:	f896 704e 	ldrb.w	r7, [r6, #78]	; 0x4e
    c4b6:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    c4ba:	2fc0      	cmp	r7, #192	; 0xc0
    c4bc:	bf14      	ite	ne
    c4be:	2700      	movne	r7, #0
    c4c0:	2701      	moveq	r7, #1
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    c4c2:	2f00      	cmp	r7, #0
    c4c4:	d1bf      	bne.n	c446 <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    c4c6:	2207      	movs	r2, #7
    c4c8:	4629      	mov	r1, r5
    c4ca:	4648      	mov	r0, r9
    c4cc:	f7f3 fef8 	bl	2c0 <memcpy>
    c4d0:	2207      	movs	r2, #7
    c4d2:	4629      	mov	r1, r5
    c4d4:	4640      	mov	r0, r8
    c4d6:	f7f3 fef3 	bl	2c0 <memcpy>
				bt_conn_identity_resolved(conn);
    c4da:	4630      	mov	r0, r6
    c4dc:	f7fa fba4 	bl	6c28 <bt_conn_identity_resolved>
    c4e0:	e7b1      	b.n	c446 <smp_ident_addr_info+0x3a>
			dst = &conn->le.init_addr;
    c4e2:	f106 014f 	add.w	r1, r6, #79	; 0x4f
    c4e6:	e7d5      	b.n	c494 <smp_ident_addr_info+0x88>
	return BT_ADDR_IS_RPA(&addr->a);
    c4e8:	798f      	ldrb	r7, [r1, #6]
    c4ea:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    c4ee:	2f40      	cmp	r7, #64	; 0x40
    c4f0:	bf14      	ite	ne
    c4f2:	2700      	movne	r7, #0
    c4f4:	2701      	moveq	r7, #1
    c4f6:	e7d1      	b.n	c49c <smp_ident_addr_info+0x90>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c4f8:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c4fc:	f3bf 8f5b 	dmb	ish
    c500:	e853 2f00 	ldrex	r2, [r3]
    c504:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    c508:	e843 2100 	strex	r1, r2, [r3]
    c50c:	2900      	cmp	r1, #0
    c50e:	d1f7      	bne.n	c500 <smp_ident_addr_info+0xf4>
    c510:	f3bf 8f5b 	dmb	ish
    c514:	e7a0      	b.n	c458 <smp_ident_addr_info+0x4c>
		bt_smp_distribute_keys(smp);
    c516:	4620      	mov	r0, r4
    c518:	f7ff f95c 	bl	b7d4 <bt_smp_distribute_keys>
    c51c:	e7a2      	b.n	c464 <smp_ident_addr_info+0x58>
		smp_pairing_complete(smp, 0);
    c51e:	2100      	movs	r1, #0
    c520:	4620      	mov	r0, r4
    c522:	f7fe ffd6 	bl	b4d2 <smp_pairing_complete>
	return 0;
    c526:	2000      	movs	r0, #0
    c528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c52c:	2008      	movs	r0, #8
    c52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000c534 <legacy_request_tk>:
{
    c534:	b570      	push	{r4, r5, r6, lr}
    c536:	b082      	sub	sp, #8
    c538:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c53a:	6805      	ldr	r5, [r0, #0]
	keys = bt_keys_find_addr(&conn->le.dst);
    c53c:	f105 0048 	add.w	r0, r5, #72	; 0x48
    c540:	f000 fdea 	bl	d118 <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    c544:	b168      	cbz	r0, c562 <legacy_request_tk+0x2e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c546:	f3bf 8f5b 	dmb	ish
    c54a:	6883      	ldr	r3, [r0, #8]
    c54c:	f3bf 8f5b 	dmb	ish
    c550:	f013 0f01 	tst.w	r3, #1
    c554:	d005      	beq.n	c562 <legacy_request_tk+0x2e>
	    smp->method == JUST_WORKS) {
    c556:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    c55a:	b913      	cbnz	r3, c562 <legacy_request_tk+0x2e>
		return BT_SMP_ERR_UNSPECIFIED;
    c55c:	2008      	movs	r0, #8
}
    c55e:	b002      	add	sp, #8
    c560:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
    c562:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c566:	2b01      	cmp	r3, #1
    c568:	d025      	beq.n	c5b6 <legacy_request_tk+0x82>
    c56a:	2b00      	cmp	r3, #0
    c56c:	d037      	beq.n	c5de <legacy_request_tk+0xaa>
    c56e:	2b02      	cmp	r3, #2
    c570:	d001      	beq.n	c576 <legacy_request_tk+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    c572:	2008      	movs	r0, #8
    c574:	e7f3      	b.n	c55e <legacy_request_tk+0x2a>
		if (bt_rand(&passkey, sizeof(passkey))) {
    c576:	2104      	movs	r1, #4
    c578:	eb0d 0001 	add.w	r0, sp, r1
    c57c:	f004 ffb8 	bl	114f0 <bt_rand>
    c580:	b108      	cbz	r0, c586 <legacy_request_tk+0x52>
			return BT_SMP_ERR_UNSPECIFIED;
    c582:	2008      	movs	r0, #8
    c584:	e7eb      	b.n	c55e <legacy_request_tk+0x2a>
		passkey %= 1000000;
    c586:	9b01      	ldr	r3, [sp, #4]
    c588:	4916      	ldr	r1, [pc, #88]	; (c5e4 <legacy_request_tk+0xb0>)
    c58a:	fba1 2103 	umull	r2, r1, r1, r3
    c58e:	0c89      	lsrs	r1, r1, #18
    c590:	4a15      	ldr	r2, [pc, #84]	; (c5e8 <legacy_request_tk+0xb4>)
    c592:	fb02 3111 	mls	r1, r2, r1, r3
    c596:	ae02      	add	r6, sp, #8
    c598:	f846 1d04 	str.w	r1, [r6, #-4]!
		bt_auth->passkey_display(conn, passkey);
    c59c:	4b13      	ldr	r3, [pc, #76]	; (c5ec <legacy_request_tk+0xb8>)
    c59e:	681b      	ldr	r3, [r3, #0]
    c5a0:	681b      	ldr	r3, [r3, #0]
    c5a2:	4628      	mov	r0, r5
    c5a4:	4798      	blx	r3
		memcpy(smp->tk, &passkey, sizeof(passkey));
    c5a6:	2204      	movs	r2, #4
    c5a8:	4631      	mov	r1, r6
    c5aa:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    c5ae:	f7f3 fe87 	bl	2c0 <memcpy>
	return 0;
    c5b2:	2000      	movs	r0, #0
		break;
    c5b4:	e7d3      	b.n	c55e <legacy_request_tk+0x2a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c5b6:	34a0      	adds	r4, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c5b8:	f3bf 8f5b 	dmb	ish
    c5bc:	e854 3f00 	ldrex	r3, [r4]
    c5c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c5c4:	e844 3200 	strex	r2, r3, [r4]
    c5c8:	2a00      	cmp	r2, #0
    c5ca:	d1f7      	bne.n	c5bc <legacy_request_tk+0x88>
    c5cc:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(conn);
    c5d0:	4b06      	ldr	r3, [pc, #24]	; (c5ec <legacy_request_tk+0xb8>)
    c5d2:	681b      	ldr	r3, [r3, #0]
    c5d4:	685b      	ldr	r3, [r3, #4]
    c5d6:	4628      	mov	r0, r5
    c5d8:	4798      	blx	r3
	return 0;
    c5da:	2000      	movs	r0, #0
		break;
    c5dc:	e7bf      	b.n	c55e <legacy_request_tk+0x2a>
	return 0;
    c5de:	2000      	movs	r0, #0
    c5e0:	e7bd      	b.n	c55e <legacy_request_tk+0x2a>
    c5e2:	bf00      	nop
    c5e4:	431bde83 	.word	0x431bde83
    c5e8:	000f4240 	.word	0x000f4240
    c5ec:	20002aa8 	.word	0x20002aa8

0000c5f0 <legacy_pairing_rsp>:
{
    c5f0:	b538      	push	{r3, r4, r5, lr}
    c5f2:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    c5f4:	f7fe f90a 	bl	a80c <legacy_get_pair_method>
    c5f8:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    c5fc:	bb10      	cbnz	r0, c644 <legacy_pairing_rsp+0x54>
    c5fe:	4604      	mov	r4, r0
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c600:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c604:	f3bf 8f5b 	dmb	ish
    c608:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c60c:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    c610:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    c614:	d016      	beq.n	c644 <legacy_pairing_rsp+0x54>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c616:	4b24      	ldr	r3, [pc, #144]	; (c6a8 <legacy_pairing_rsp+0xb8>)
    c618:	681b      	ldr	r3, [r3, #0]
    c61a:	b19b      	cbz	r3, c644 <legacy_pairing_rsp+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    c61c:	691b      	ldr	r3, [r3, #16]
    c61e:	b18b      	cbz	r3, c644 <legacy_pairing_rsp+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c620:	f3bf 8f5b 	dmb	ish
    c624:	e852 3f00 	ldrex	r3, [r2]
    c628:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c62c:	e842 3100 	strex	r1, r3, [r2]
    c630:	2900      	cmp	r1, #0
    c632:	d1f7      	bne.n	c624 <legacy_pairing_rsp+0x34>
    c634:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    c638:	4b1b      	ldr	r3, [pc, #108]	; (c6a8 <legacy_pairing_rsp+0xb8>)
    c63a:	681b      	ldr	r3, [r3, #0]
    c63c:	691b      	ldr	r3, [r3, #16]
    c63e:	6828      	ldr	r0, [r5, #0]
    c640:	4798      	blx	r3
		return 0;
    c642:	e004      	b.n	c64e <legacy_pairing_rsp+0x5e>
	ret = legacy_request_tk(smp);
    c644:	4628      	mov	r0, r5
    c646:	f7ff ff75 	bl	c534 <legacy_request_tk>
	if (ret) {
    c64a:	4604      	mov	r4, r0
    c64c:	b108      	cbz	r0, c652 <legacy_pairing_rsp+0x62>
}
    c64e:	4620      	mov	r0, r4
    c650:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    c652:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c656:	f3bf 8f5b 	dmb	ish
    c65a:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
    c65e:	f3bf 8f5b 	dmb	ish
    c662:	f412 7f00 	tst.w	r2, #512	; 0x200
    c666:	d00c      	beq.n	c682 <legacy_pairing_rsp+0x92>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c668:	f3bf 8f5b 	dmb	ish
    c66c:	e853 2f00 	ldrex	r2, [r3]
    c670:	f042 0201 	orr.w	r2, r2, #1
    c674:	e843 2100 	strex	r1, r2, [r3]
    c678:	2900      	cmp	r1, #0
    c67a:	d1f7      	bne.n	c66c <legacy_pairing_rsp+0x7c>
    c67c:	f3bf 8f5b 	dmb	ish
	return 0;
    c680:	e7e5      	b.n	c64e <legacy_pairing_rsp+0x5e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c682:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    c686:	f3bf 8f5b 	dmb	ish
    c68a:	e853 2f00 	ldrex	r2, [r3]
    c68e:	f042 0208 	orr.w	r2, r2, #8
    c692:	e843 2100 	strex	r1, r2, [r3]
    c696:	2900      	cmp	r1, #0
    c698:	d1f7      	bne.n	c68a <legacy_pairing_rsp+0x9a>
    c69a:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    c69e:	4628      	mov	r0, r5
    c6a0:	f7fe fdd8 	bl	b254 <legacy_send_pairing_confirm>
    c6a4:	4604      	mov	r4, r0
    c6a6:	e7d2      	b.n	c64e <legacy_pairing_rsp+0x5e>
    c6a8:	20002aa8 	.word	0x20002aa8

0000c6ac <smp_pairing_rsp>:
{
    c6ac:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    c6ae:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    c6b0:	78eb      	ldrb	r3, [r5, #3]
    c6b2:	3b07      	subs	r3, #7
    c6b4:	b2db      	uxtb	r3, r3
    c6b6:	2b09      	cmp	r3, #9
    c6b8:	d902      	bls.n	c6c0 <smp_pairing_rsp+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    c6ba:	2506      	movs	r5, #6
}
    c6bc:	4628      	mov	r0, r5
    c6be:	bd70      	pop	{r4, r5, r6, pc}
    c6c0:	4604      	mov	r4, r0
	smp->local_dist &= rsp->init_key_dist;
    c6c2:	792b      	ldrb	r3, [r5, #4]
    c6c4:	f890 2179 	ldrb.w	r2, [r0, #377]	; 0x179
    c6c8:	4013      	ands	r3, r2
    c6ca:	f880 3179 	strb.w	r3, [r0, #377]	; 0x179
	smp->remote_dist &= rsp->resp_key_dist;
    c6ce:	796b      	ldrb	r3, [r5, #5]
    c6d0:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    c6d4:	4013      	ands	r3, r2
    c6d6:	f880 317a 	strb.w	r3, [r0, #378]	; 0x17a
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    c6da:	2302      	movs	r3, #2
    c6dc:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    c6e0:	2206      	movs	r2, #6
    c6e2:	4629      	mov	r1, r5
    c6e4:	30ad      	adds	r0, #173	; 0xad
    c6e6:	f7f3 fdeb 	bl	2c0 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    c6ea:	78ab      	ldrb	r3, [r5, #2]
    c6ec:	f013 0f08 	tst.w	r3, #8
    c6f0:	d004      	beq.n	c6fc <smp_pairing_rsp+0x50>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    c6f2:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    c6f6:	f013 0f08 	tst.w	r3, #8
    c6fa:	d148      	bne.n	c78e <smp_pairing_rsp+0xe2>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    c6fc:	78ab      	ldrb	r3, [r5, #2]
    c6fe:	f013 0f20 	tst.w	r3, #32
    c702:	d004      	beq.n	c70e <smp_pairing_rsp+0x62>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    c704:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    c708:	f013 0f20 	tst.w	r3, #32
    c70c:	d14e      	bne.n	c7ac <smp_pairing_rsp+0x100>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    c70e:	78ab      	ldrb	r3, [r5, #2]
    c710:	f013 0f01 	tst.w	r3, #1
    c714:	d004      	beq.n	c720 <smp_pairing_rsp+0x74>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    c716:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    c71a:	f013 0f01 	tst.w	r3, #1
    c71e:	d154      	bne.n	c7ca <smp_pairing_rsp+0x11e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c720:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c724:	f3bf 8f5b 	dmb	ish
    c728:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    c72c:	f3bf 8f5b 	dmb	ish
    c730:	f013 0f20 	tst.w	r3, #32
    c734:	d058      	beq.n	c7e8 <smp_pairing_rsp+0x13c>
	smp->method = get_pair_method(smp, rsp->io_capability);
    c736:	7829      	ldrb	r1, [r5, #0]
    c738:	4620      	mov	r0, r4
    c73a:	f7fe f835 	bl	a7a8 <get_pair_method>
    c73e:	4605      	mov	r5, r0
    c740:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	smp->local_dist &= SEND_KEYS_SC;
    c744:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    c748:	f003 0304 	and.w	r3, r3, #4
    c74c:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist &= RECV_KEYS_SC;
    c750:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c754:	f003 0306 	and.w	r3, r3, #6
    c758:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->method == JUST_WORKS) {
    c75c:	2800      	cmp	r0, #0
    c75e:	d049      	beq.n	c7f4 <smp_pairing_rsp+0x148>
	if (!sc_local_pkey_valid) {
    c760:	4b3c      	ldr	r3, [pc, #240]	; (c854 <smp_pairing_rsp+0x1a8>)
    c762:	781b      	ldrb	r3, [r3, #0]
    c764:	2b00      	cmp	r3, #0
    c766:	d067      	beq.n	c838 <smp_pairing_rsp+0x18c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    c768:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c76c:	f3bf 8f5b 	dmb	ish
    c770:	e853 2f00 	ldrex	r2, [r3]
    c774:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    c778:	e843 2100 	strex	r1, r2, [r3]
    c77c:	2900      	cmp	r1, #0
    c77e:	d1f7      	bne.n	c770 <smp_pairing_rsp+0xc4>
    c780:	f3bf 8f5b 	dmb	ish
	return sc_send_public_key(smp);
    c784:	4620      	mov	r0, r4
    c786:	f7fe f94b 	bl	aa20 <sc_send_public_key>
    c78a:	4605      	mov	r5, r0
    c78c:	e796      	b.n	c6bc <smp_pairing_rsp+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    c78e:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c792:	f3bf 8f5b 	dmb	ish
    c796:	e853 2f00 	ldrex	r2, [r3]
    c79a:	f042 0220 	orr.w	r2, r2, #32
    c79e:	e843 2100 	strex	r1, r2, [r3]
    c7a2:	2900      	cmp	r1, #0
    c7a4:	d1f7      	bne.n	c796 <smp_pairing_rsp+0xea>
    c7a6:	f3bf 8f5b 	dmb	ish
    c7aa:	e7a7      	b.n	c6fc <smp_pairing_rsp+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    c7ac:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c7b0:	f3bf 8f5b 	dmb	ish
    c7b4:	e853 2f00 	ldrex	r2, [r3]
    c7b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    c7bc:	e843 2100 	strex	r1, r2, [r3]
    c7c0:	2900      	cmp	r1, #0
    c7c2:	d1f7      	bne.n	c7b4 <smp_pairing_rsp+0x108>
    c7c4:	f3bf 8f5b 	dmb	ish
    c7c8:	e7a1      	b.n	c70e <smp_pairing_rsp+0x62>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    c7ca:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c7ce:	f3bf 8f5b 	dmb	ish
    c7d2:	e853 2f00 	ldrex	r2, [r3]
    c7d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    c7da:	e843 2100 	strex	r1, r2, [r3]
    c7de:	2900      	cmp	r1, #0
    c7e0:	d1f7      	bne.n	c7d2 <smp_pairing_rsp+0x126>
    c7e2:	f3bf 8f5b 	dmb	ish
    c7e6:	e79b      	b.n	c720 <smp_pairing_rsp+0x74>
		return legacy_pairing_rsp(smp, rsp->io_capability);
    c7e8:	7829      	ldrb	r1, [r5, #0]
    c7ea:	4620      	mov	r0, r4
    c7ec:	f7ff ff00 	bl	c5f0 <legacy_pairing_rsp>
    c7f0:	4605      	mov	r5, r0
    c7f2:	e763      	b.n	c6bc <smp_pairing_rsp+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c7f4:	f3bf 8f5b 	dmb	ish
    c7f8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    c7fc:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c800:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    c804:	d0ac      	beq.n	c760 <smp_pairing_rsp+0xb4>
    c806:	4b14      	ldr	r3, [pc, #80]	; (c858 <smp_pairing_rsp+0x1ac>)
    c808:	681b      	ldr	r3, [r3, #0]
    c80a:	2b00      	cmp	r3, #0
    c80c:	d0a8      	beq.n	c760 <smp_pairing_rsp+0xb4>
		    bt_auth && bt_auth->pairing_confirm) {
    c80e:	691b      	ldr	r3, [r3, #16]
    c810:	2b00      	cmp	r3, #0
    c812:	d0a5      	beq.n	c760 <smp_pairing_rsp+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c814:	f3bf 8f5b 	dmb	ish
    c818:	e856 3f00 	ldrex	r3, [r6]
    c81c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c820:	e846 3200 	strex	r2, r3, [r6]
    c824:	2a00      	cmp	r2, #0
    c826:	d1f7      	bne.n	c818 <smp_pairing_rsp+0x16c>
    c828:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    c82c:	4b0a      	ldr	r3, [pc, #40]	; (c858 <smp_pairing_rsp+0x1ac>)
    c82e:	681b      	ldr	r3, [r3, #0]
    c830:	691b      	ldr	r3, [r3, #16]
    c832:	6820      	ldr	r0, [r4, #0]
    c834:	4798      	blx	r3
			return 0;
    c836:	e741      	b.n	c6bc <smp_pairing_rsp+0x10>
    c838:	f3bf 8f5b 	dmb	ish
    c83c:	e856 3f00 	ldrex	r3, [r6]
    c840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c844:	e846 3200 	strex	r2, r3, [r6]
    c848:	2a00      	cmp	r2, #0
    c84a:	d1f7      	bne.n	c83c <smp_pairing_rsp+0x190>
    c84c:	f3bf 8f5b 	dmb	ish
		return 0;
    c850:	2500      	movs	r5, #0
    c852:	e733      	b.n	c6bc <smp_pairing_rsp+0x10>
    c854:	20000a60 	.word	0x20000a60
    c858:	20002aa8 	.word	0x20002aa8

0000c85c <legacy_pairing_req>:
{
    c85c:	b538      	push	{r3, r4, r5, lr}
    c85e:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    c860:	f7fd ffd4 	bl	a80c <legacy_get_pair_method>
    c864:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    c868:	bb10      	cbnz	r0, c8b0 <legacy_pairing_req+0x54>
    c86a:	4604      	mov	r4, r0
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c86c:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c870:	f3bf 8f5b 	dmb	ish
    c874:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c878:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    c87c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    c880:	d116      	bne.n	c8b0 <legacy_pairing_req+0x54>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c882:	4b18      	ldr	r3, [pc, #96]	; (c8e4 <legacy_pairing_req+0x88>)
    c884:	681b      	ldr	r3, [r3, #0]
    c886:	b19b      	cbz	r3, c8b0 <legacy_pairing_req+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    c888:	691b      	ldr	r3, [r3, #16]
    c88a:	b18b      	cbz	r3, c8b0 <legacy_pairing_req+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c88c:	f3bf 8f5b 	dmb	ish
    c890:	e852 3f00 	ldrex	r3, [r2]
    c894:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c898:	e842 3100 	strex	r1, r3, [r2]
    c89c:	2900      	cmp	r1, #0
    c89e:	d1f7      	bne.n	c890 <legacy_pairing_req+0x34>
    c8a0:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    c8a4:	4b0f      	ldr	r3, [pc, #60]	; (c8e4 <legacy_pairing_req+0x88>)
    c8a6:	681b      	ldr	r3, [r3, #0]
    c8a8:	691b      	ldr	r3, [r3, #16]
    c8aa:	6828      	ldr	r0, [r5, #0]
    c8ac:	4798      	blx	r3
		return 0;
    c8ae:	e004      	b.n	c8ba <legacy_pairing_req+0x5e>
	ret = send_pairing_rsp(smp);
    c8b0:	4628      	mov	r0, r5
    c8b2:	f7fe f8d9 	bl	aa68 <send_pairing_rsp>
	if (ret) {
    c8b6:	4604      	mov	r4, r0
    c8b8:	b108      	cbz	r0, c8be <legacy_pairing_req+0x62>
}
    c8ba:	4620      	mov	r0, r4
    c8bc:	bd38      	pop	{r3, r4, r5, pc}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c8be:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    c8c2:	f3bf 8f5b 	dmb	ish
    c8c6:	e853 2f00 	ldrex	r2, [r3]
    c8ca:	f042 0208 	orr.w	r2, r2, #8
    c8ce:	e843 2100 	strex	r1, r2, [r3]
    c8d2:	2900      	cmp	r1, #0
    c8d4:	d1f7      	bne.n	c8c6 <legacy_pairing_req+0x6a>
    c8d6:	f3bf 8f5b 	dmb	ish
	return legacy_request_tk(smp);
    c8da:	4628      	mov	r0, r5
    c8dc:	f7ff fe2a 	bl	c534 <legacy_request_tk>
    c8e0:	4604      	mov	r4, r0
    c8e2:	e7ea      	b.n	c8ba <legacy_pairing_req+0x5e>
    c8e4:	20002aa8 	.word	0x20002aa8

0000c8e8 <smp_pairing_req>:
{
    c8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    c8ea:	688e      	ldr	r6, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    c8ec:	78f3      	ldrb	r3, [r6, #3]
    c8ee:	3b07      	subs	r3, #7
    c8f0:	b2db      	uxtb	r3, r3
    c8f2:	2b09      	cmp	r3, #9
    c8f4:	d902      	bls.n	c8fc <smp_pairing_req+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    c8f6:	2506      	movs	r5, #6
}
    c8f8:	4628      	mov	r0, r5
    c8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c8fc:	4604      	mov	r4, r0
	ret = smp_init(smp);
    c8fe:	f7fe f81c 	bl	a93a <smp_init>
	if (ret) {
    c902:	b108      	cbz	r0, c908 <smp_pairing_req+0x20>
		return ret;
    c904:	b2c5      	uxtb	r5, r0
    c906:	e7f7      	b.n	c8f8 <smp_pairing_req+0x10>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    c908:	2301      	movs	r3, #1
    c90a:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    c90e:	2206      	movs	r2, #6
    c910:	4631      	mov	r1, r6
    c912:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    c916:	f7f3 fcd3 	bl	2c0 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    c91a:	2302      	movs	r3, #2
    c91c:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
	rsp->auth_req = get_auth(req->auth_req);
    c920:	78b0      	ldrb	r0, [r6, #2]
    c922:	f7fd ff97 	bl	a854 <get_auth>
    c926:	4605      	mov	r5, r0
    c928:	f884 00af 	strb.w	r0, [r4, #175]	; 0xaf
	rsp->io_capability = get_io_capa();
    c92c:	f7fd ff14 	bl	a758 <get_io_capa>
    c930:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    c934:	2300      	movs	r3, #0
    c936:	f884 30ae 	strb.w	r3, [r4, #174]	; 0xae
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    c93a:	2310      	movs	r3, #16
    c93c:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    c940:	7933      	ldrb	r3, [r6, #4]
    c942:	f003 0307 	and.w	r3, r3, #7
    c946:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    c94a:	7973      	ldrb	r3, [r6, #5]
    c94c:	f003 0305 	and.w	r3, r3, #5
    c950:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    c954:	f015 0f08 	tst.w	r5, #8
    c958:	d003      	beq.n	c962 <smp_pairing_req+0x7a>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    c95a:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    c95c:	f013 0f08 	tst.w	r3, #8
    c960:	d15b      	bne.n	ca1a <smp_pairing_req+0x132>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    c962:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    c966:	f013 0f20 	tst.w	r3, #32
    c96a:	d003      	beq.n	c974 <smp_pairing_req+0x8c>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    c96c:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    c96e:	f013 0f20 	tst.w	r3, #32
    c972:	d16d      	bne.n	ca50 <smp_pairing_req+0x168>
	smp->local_dist = rsp->resp_key_dist;
    c974:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    c978:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist = rsp->init_key_dist;
    c97c:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    c980:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    c984:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    c988:	f013 0f01 	tst.w	r3, #1
    c98c:	d003      	beq.n	c996 <smp_pairing_req+0xae>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    c98e:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    c990:	f013 0f01 	tst.w	r3, #1
    c994:	d16b      	bne.n	ca6e <smp_pairing_req+0x186>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    c996:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
    c99a:	f3bf 8f5b 	dmb	ish
    c99e:	e857 3f00 	ldrex	r3, [r7]
    c9a2:	f043 0308 	orr.w	r3, r3, #8
    c9a6:	e847 3200 	strex	r2, r3, [r7]
    c9aa:	2a00      	cmp	r2, #0
    c9ac:	d1f7      	bne.n	c99e <smp_pairing_req+0xb6>
    c9ae:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c9b2:	f3bf 8f5b 	dmb	ish
    c9b6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    c9ba:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c9be:	f013 0f20 	tst.w	r3, #32
    c9c2:	d063      	beq.n	ca8c <smp_pairing_req+0x1a4>
	smp->method = get_pair_method(smp, req->io_capability);
    c9c4:	7831      	ldrb	r1, [r6, #0]
    c9c6:	4620      	mov	r0, r4
    c9c8:	f7fd feee 	bl	a7a8 <get_pair_method>
    c9cc:	4605      	mov	r5, r0
    c9ce:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS) {
    c9d2:	2800      	cmp	r0, #0
    c9d4:	d160      	bne.n	ca98 <smp_pairing_req+0x1b0>
    c9d6:	f3bf 8f5b 	dmb	ish
    c9da:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    c9de:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c9e2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    c9e6:	d157      	bne.n	ca98 <smp_pairing_req+0x1b0>
    c9e8:	4b35      	ldr	r3, [pc, #212]	; (cac0 <smp_pairing_req+0x1d8>)
    c9ea:	681b      	ldr	r3, [r3, #0]
    c9ec:	2b00      	cmp	r3, #0
    c9ee:	d053      	beq.n	ca98 <smp_pairing_req+0x1b0>
		    bt_auth && bt_auth->pairing_confirm) {
    c9f0:	691b      	ldr	r3, [r3, #16]
    c9f2:	2b00      	cmp	r3, #0
    c9f4:	d050      	beq.n	ca98 <smp_pairing_req+0x1b0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c9f6:	f3bf 8f5b 	dmb	ish
    c9fa:	e857 3f00 	ldrex	r3, [r7]
    c9fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ca02:	e847 3200 	strex	r2, r3, [r7]
    ca06:	2a00      	cmp	r2, #0
    ca08:	d1f7      	bne.n	c9fa <smp_pairing_req+0x112>
    ca0a:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    ca0e:	4b2c      	ldr	r3, [pc, #176]	; (cac0 <smp_pairing_req+0x1d8>)
    ca10:	681b      	ldr	r3, [r3, #0]
    ca12:	691b      	ldr	r3, [r3, #16]
    ca14:	6820      	ldr	r0, [r4, #0]
    ca16:	4798      	blx	r3
			return 0;
    ca18:	e76e      	b.n	c8f8 <smp_pairing_req+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    ca1a:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    ca1e:	f3bf 8f5b 	dmb	ish
    ca22:	e853 2f00 	ldrex	r2, [r3]
    ca26:	f042 0220 	orr.w	r2, r2, #32
    ca2a:	e843 2100 	strex	r1, r2, [r3]
    ca2e:	2900      	cmp	r1, #0
    ca30:	d1f7      	bne.n	ca22 <smp_pairing_req+0x13a>
    ca32:	f3bf 8f5b 	dmb	ish
		rsp->init_key_dist &= RECV_KEYS_SC;
    ca36:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    ca3a:	f003 0306 	and.w	r3, r3, #6
    ca3e:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		rsp->resp_key_dist &= SEND_KEYS_SC;
    ca42:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    ca46:	f003 0304 	and.w	r3, r3, #4
    ca4a:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    ca4e:	e788      	b.n	c962 <smp_pairing_req+0x7a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    ca50:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    ca54:	f3bf 8f5b 	dmb	ish
    ca58:	e853 2f00 	ldrex	r2, [r3]
    ca5c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    ca60:	e843 2100 	strex	r1, r2, [r3]
    ca64:	2900      	cmp	r1, #0
    ca66:	d1f7      	bne.n	ca58 <smp_pairing_req+0x170>
    ca68:	f3bf 8f5b 	dmb	ish
    ca6c:	e782      	b.n	c974 <smp_pairing_req+0x8c>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    ca6e:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    ca72:	f3bf 8f5b 	dmb	ish
    ca76:	e853 2f00 	ldrex	r2, [r3]
    ca7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    ca7e:	e843 2100 	strex	r1, r2, [r3]
    ca82:	2900      	cmp	r1, #0
    ca84:	d1f7      	bne.n	ca76 <smp_pairing_req+0x18e>
    ca86:	f3bf 8f5b 	dmb	ish
    ca8a:	e784      	b.n	c996 <smp_pairing_req+0xae>
		return legacy_pairing_req(smp, req->io_capability);
    ca8c:	7831      	ldrb	r1, [r6, #0]
    ca8e:	4620      	mov	r0, r4
    ca90:	f7ff fee4 	bl	c85c <legacy_pairing_req>
    ca94:	4605      	mov	r5, r0
    ca96:	e72f      	b.n	c8f8 <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    ca98:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    ca9c:	f3bf 8f5b 	dmb	ish
    caa0:	e853 2f00 	ldrex	r2, [r3]
    caa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    caa8:	e843 2100 	strex	r1, r2, [r3]
    caac:	2900      	cmp	r1, #0
    caae:	d1f7      	bne.n	caa0 <smp_pairing_req+0x1b8>
    cab0:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
    cab4:	4620      	mov	r0, r4
    cab6:	f7fd ffd7 	bl	aa68 <send_pairing_rsp>
    caba:	4605      	mov	r5, r0
    cabc:	e71c      	b.n	c8f8 <smp_pairing_req+0x10>
    cabe:	bf00      	nop
    cac0:	20002aa8 	.word	0x20002aa8

0000cac4 <bt_smp_connected>:
{
    cac4:	b510      	push	{r4, lr}
    cac6:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    cac8:	4904      	ldr	r1, [pc, #16]	; (cadc <bt_smp_connected+0x18>)
    caca:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    cace:	f01d f955 	bl	29d7c <k_delayed_work_init>
	smp_reset(smp);
    cad2:	4620      	mov	r0, r4
    cad4:	f7fe fcbb 	bl	b44e <smp_reset>
    cad8:	bd10      	pop	{r4, pc}
    cada:	bf00      	nop
    cadc:	0000b69f 	.word	0x0000b69f

0000cae0 <bt_smp_send_security_req>:
{
    cae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cae4:	4606      	mov	r6, r0
	smp = smp_chan_get(conn);
    cae6:	f7fd ff15 	bl	a914 <smp_chan_get>
	if (!smp) {
    caea:	b3e8      	cbz	r0, cb68 <bt_smp_send_security_req+0x88>
    caec:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    caee:	f3bf 8f5b 	dmb	ish
    caf2:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    caf6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    cafa:	f013 0f10 	tst.w	r3, #16
    cafe:	d136      	bne.n	cb6e <bt_smp_send_security_req+0x8e>
    cb00:	f3bf 8f5b 	dmb	ish
    cb04:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    cb08:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    cb0c:	f3c5 05c0 	ubfx	r5, r5, #3, #1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    cb10:	bb85      	cbnz	r5, cb74 <bt_smp_send_security_req+0x94>
	if (!sec_level_reachable(conn)) {
    cb12:	4630      	mov	r0, r6
    cb14:	f7fd feb4 	bl	a880 <sec_level_reachable>
    cb18:	b378      	cbz	r0, cb7a <bt_smp_send_security_req+0x9a>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    cb1a:	2201      	movs	r2, #1
    cb1c:	210b      	movs	r1, #11
    cb1e:	4630      	mov	r0, r6
    cb20:	f7fd fefd 	bl	a91e <smp_create_pdu>
	if (!req_buf) {
    cb24:	4607      	mov	r7, r0
    cb26:	b358      	cbz	r0, cb80 <bt_smp_send_security_req+0xa0>
	req = net_buf_add(req_buf, sizeof(*req));
    cb28:	2101      	movs	r1, #1
    cb2a:	3008      	adds	r0, #8
    cb2c:	f00e f856 	bl	1abdc <net_buf_simple_add>
    cb30:	4680      	mov	r8, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    cb32:	2009      	movs	r0, #9
    cb34:	f7fd fe8e 	bl	a854 <get_auth>
    cb38:	f888 0000 	strb.w	r0, [r8]
    cb3c:	2300      	movs	r3, #0
    cb3e:	463a      	mov	r2, r7
    cb40:	2106      	movs	r1, #6
    cb42:	4630      	mov	r0, r6
    cb44:	f7fb f9e1 	bl	7f0a <bt_l2cap_send_cb>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    cb48:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cb4a:	f3bf 8f5b 	dmb	ish
    cb4e:	e854 3f00 	ldrex	r3, [r4]
    cb52:	f043 0320 	orr.w	r3, r3, #32
    cb56:	e844 3200 	strex	r2, r3, [r4]
    cb5a:	2a00      	cmp	r2, #0
    cb5c:	d1f7      	bne.n	cb4e <bt_smp_send_security_req+0x6e>
    cb5e:	f3bf 8f5b 	dmb	ish
}
    cb62:	4628      	mov	r0, r5
    cb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTCONN;
    cb68:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    cb6c:	e7f9      	b.n	cb62 <bt_smp_send_security_req+0x82>
		return -EIO;
    cb6e:	f06f 0504 	mvn.w	r5, #4
    cb72:	e7f6      	b.n	cb62 <bt_smp_send_security_req+0x82>
		return -EBUSY;
    cb74:	f06f 050f 	mvn.w	r5, #15
    cb78:	e7f3      	b.n	cb62 <bt_smp_send_security_req+0x82>
		return -EINVAL;
    cb7a:	f06f 0515 	mvn.w	r5, #21
    cb7e:	e7f0      	b.n	cb62 <bt_smp_send_security_req+0x82>
		return -ENOBUFS;
    cb80:	f06f 0568 	mvn.w	r5, #104	; 0x68
    cb84:	e7ed      	b.n	cb62 <bt_smp_send_security_req+0x82>

0000cb86 <bt_smp_send_pairing_req>:
{
    cb86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cb8a:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    cb8c:	f7fd fec2 	bl	a914 <smp_chan_get>
	if (!smp) {
    cb90:	2800      	cmp	r0, #0
    cb92:	d06b      	beq.n	cc6c <bt_smp_send_pairing_req+0xe6>
    cb94:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    cb96:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cb9a:	f3bf 8f5b 	dmb	ish
    cb9e:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cba2:	f3bf 8f5b 	dmb	ish
    cba6:	f013 0f10 	tst.w	r3, #16
    cbaa:	d162      	bne.n	cc72 <bt_smp_send_pairing_req+0xec>
    cbac:	f3bf 8f5b 	dmb	ish
    cbb0:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cbb4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    cbb8:	f013 0f08 	tst.w	r3, #8
    cbbc:	d15c      	bne.n	cc78 <bt_smp_send_pairing_req+0xf2>
	if (!sec_level_reachable(conn)) {
    cbbe:	4628      	mov	r0, r5
    cbc0:	f7fd fe5e 	bl	a880 <sec_level_reachable>
    cbc4:	2800      	cmp	r0, #0
    cbc6:	d05a      	beq.n	cc7e <bt_smp_send_pairing_req+0xf8>
	if (smp_init(smp)) {
    cbc8:	4620      	mov	r0, r4
    cbca:	f7fd feb6 	bl	a93a <smp_init>
    cbce:	4680      	mov	r8, r0
    cbd0:	2800      	cmp	r0, #0
    cbd2:	d157      	bne.n	cc84 <bt_smp_send_pairing_req+0xfe>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    cbd4:	2206      	movs	r2, #6
    cbd6:	2101      	movs	r1, #1
    cbd8:	4628      	mov	r0, r5
    cbda:	f7fd fea0 	bl	a91e <smp_create_pdu>
	if (!req_buf) {
    cbde:	4607      	mov	r7, r0
    cbe0:	2800      	cmp	r0, #0
    cbe2:	d052      	beq.n	cc8a <bt_smp_send_pairing_req+0x104>
	req = net_buf_add(req_buf, sizeof(*req));
    cbe4:	2106      	movs	r1, #6
    cbe6:	3008      	adds	r0, #8
    cbe8:	f00d fff8 	bl	1abdc <net_buf_simple_add>
    cbec:	4605      	mov	r5, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    cbee:	2009      	movs	r0, #9
    cbf0:	f7fd fe30 	bl	a854 <get_auth>
    cbf4:	70a8      	strb	r0, [r5, #2]
	req->io_capability = get_io_capa();
    cbf6:	f7fd fdaf 	bl	a758 <get_io_capa>
    cbfa:	7028      	strb	r0, [r5, #0]
	req->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    cbfc:	f04f 0900 	mov.w	r9, #0
    cc00:	f885 9001 	strb.w	r9, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    cc04:	2310      	movs	r3, #16
    cc06:	70eb      	strb	r3, [r5, #3]
	req->init_key_dist = SEND_KEYS;
    cc08:	2205      	movs	r2, #5
    cc0a:	712a      	strb	r2, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
    cc0c:	2307      	movs	r3, #7
    cc0e:	716b      	strb	r3, [r5, #5]
	smp->local_dist = SEND_KEYS;
    cc10:	f884 2179 	strb.w	r2, [r4, #377]	; 0x179
	smp->remote_dist = RECV_KEYS;
    cc14:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    cc18:	2301      	movs	r3, #1
    cc1a:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    cc1e:	2206      	movs	r2, #6
    cc20:	4629      	mov	r1, r5
    cc22:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    cc26:	f7f3 fb4b 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    cc2a:	464a      	mov	r2, r9
    cc2c:	4639      	mov	r1, r7
    cc2e:	4620      	mov	r0, r4
    cc30:	f7fd fec8 	bl	a9c4 <smp_send>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    cc34:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cc36:	f3bf 8f5b 	dmb	ish
    cc3a:	e854 3f00 	ldrex	r3, [r4]
    cc3e:	f043 0304 	orr.w	r3, r3, #4
    cc42:	e844 3200 	strex	r2, r3, [r4]
    cc46:	2a00      	cmp	r2, #0
    cc48:	d1f7      	bne.n	cc3a <bt_smp_send_pairing_req+0xb4>
    cc4a:	f3bf 8f5b 	dmb	ish
    cc4e:	f3bf 8f5b 	dmb	ish
    cc52:	e856 3f00 	ldrex	r3, [r6]
    cc56:	f043 0308 	orr.w	r3, r3, #8
    cc5a:	e846 3200 	strex	r2, r3, [r6]
    cc5e:	2a00      	cmp	r2, #0
    cc60:	d1f7      	bne.n	cc52 <bt_smp_send_pairing_req+0xcc>
    cc62:	f3bf 8f5b 	dmb	ish
}
    cc66:	4640      	mov	r0, r8
    cc68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOTCONN;
    cc6c:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    cc70:	e7f9      	b.n	cc66 <bt_smp_send_pairing_req+0xe0>
		return -EIO;
    cc72:	f06f 0804 	mvn.w	r8, #4
    cc76:	e7f6      	b.n	cc66 <bt_smp_send_pairing_req+0xe0>
		return -EBUSY;
    cc78:	f06f 080f 	mvn.w	r8, #15
    cc7c:	e7f3      	b.n	cc66 <bt_smp_send_pairing_req+0xe0>
		return -EINVAL;
    cc7e:	f06f 0815 	mvn.w	r8, #21
    cc82:	e7f0      	b.n	cc66 <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    cc84:	f06f 0868 	mvn.w	r8, #104	; 0x68
    cc88:	e7ed      	b.n	cc66 <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    cc8a:	f06f 0868 	mvn.w	r8, #104	; 0x68
    cc8e:	e7ea      	b.n	cc66 <bt_smp_send_pairing_req+0xe0>

0000cc90 <smp_security_request>:
{
    cc90:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc92:	b085      	sub	sp, #20
    cc94:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    cc96:	6804      	ldr	r4, [r0, #0]
	struct bt_smp_security_request *req = (void *)buf->data;
    cc98:	688b      	ldr	r3, [r1, #8]
	if (sc_supported) {
    cc9a:	4a35      	ldr	r2, [pc, #212]	; (cd70 <smp_security_request+0xe0>)
    cc9c:	7812      	ldrb	r2, [r2, #0]
    cc9e:	b332      	cbz	r2, ccee <smp_security_request+0x5e>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    cca0:	781d      	ldrb	r5, [r3, #0]
    cca2:	f005 050f 	and.w	r5, r5, #15
	if (!conn->le.keys) {
    cca6:	6f23      	ldr	r3, [r4, #112]	; 0x70
    cca8:	b32b      	cbz	r3, ccf6 <smp_security_request+0x66>
	if (!conn->le.keys) {
    ccaa:	6f23      	ldr	r3, [r4, #112]	; 0x70
    ccac:	2b00      	cmp	r3, #0
    ccae:	d039      	beq.n	cd24 <smp_security_request+0x94>
	if ((auth & BT_SMP_AUTH_MITM) &&
    ccb0:	f015 0f04 	tst.w	r5, #4
    ccb4:	d12e      	bne.n	cd14 <smp_security_request+0x84>
	if ((auth & BT_SMP_AUTH_SC) &&
    ccb6:	f015 0f08 	tst.w	r5, #8
    ccba:	d004      	beq.n	ccc6 <smp_security_request+0x36>
	    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    ccbc:	6f23      	ldr	r3, [r4, #112]	; 0x70
    ccbe:	899b      	ldrh	r3, [r3, #12]
	if ((auth & BT_SMP_AUTH_SC) &&
    ccc0:	f013 0f20 	tst.w	r3, #32
    ccc4:	d02e      	beq.n	cd24 <smp_security_request+0x94>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    ccc6:	6f23      	ldr	r3, [r4, #112]	; 0x70
					conn->le.keys->ltk.val,
    ccc8:	f103 021a 	add.w	r2, r3, #26
					conn->le.keys->enc_size) < 0) {
    cccc:	79dd      	ldrb	r5, [r3, #7]
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    ccce:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    ccd2:	9502      	str	r5, [sp, #8]
    ccd4:	9201      	str	r2, [sp, #4]
    ccd6:	8b1b      	ldrh	r3, [r3, #24]
    ccd8:	9300      	str	r3, [sp, #0]
    ccda:	4602      	mov	r2, r0
    ccdc:	460b      	mov	r3, r1
    ccde:	4620      	mov	r0, r4
    cce0:	f7f9 ffbc 	bl	6c5c <bt_conn_le_start_encryption>
    cce4:	2800      	cmp	r0, #0
    cce6:	da24      	bge.n	cd32 <smp_security_request+0xa2>
		return BT_SMP_ERR_UNSPECIFIED;
    cce8:	2008      	movs	r0, #8
}
    ccea:	b005      	add	sp, #20
    ccec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    ccee:	781d      	ldrb	r5, [r3, #0]
    ccf0:	f005 0507 	and.w	r5, r5, #7
    ccf4:	e7d7      	b.n	cca6 <smp_security_request+0x16>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    ccf6:	f104 0748 	add.w	r7, r4, #72	; 0x48
    ccfa:	4639      	mov	r1, r7
    ccfc:	2020      	movs	r0, #32
    ccfe:	f000 f98f 	bl	d020 <bt_keys_find>
    cd02:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys) {
    cd04:	2800      	cmp	r0, #0
    cd06:	d1d0      	bne.n	ccaa <smp_security_request+0x1a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    cd08:	4639      	mov	r1, r7
    cd0a:	2004      	movs	r0, #4
    cd0c:	f000 f988 	bl	d020 <bt_keys_find>
    cd10:	6720      	str	r0, [r4, #112]	; 0x70
    cd12:	e7ca      	b.n	ccaa <smp_security_request+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cd14:	f3bf 8f5b 	dmb	ish
    cd18:	689b      	ldr	r3, [r3, #8]
    cd1a:	f3bf 8f5b 	dmb	ish
	if ((auth & BT_SMP_AUTH_MITM) &&
    cd1e:	f013 0f01 	tst.w	r3, #1
    cd22:	d1c8      	bne.n	ccb6 <smp_security_request+0x26>
	if (bt_smp_send_pairing_req(conn) < 0) {
    cd24:	4620      	mov	r0, r4
    cd26:	f7ff ff2e 	bl	cb86 <bt_smp_send_pairing_req>
    cd2a:	2800      	cmp	r0, #0
    cd2c:	da10      	bge.n	cd50 <smp_security_request+0xc0>
		return BT_SMP_ERR_UNSPECIFIED;
    cd2e:	2008      	movs	r0, #8
    cd30:	e7db      	b.n	ccea <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    cd32:	36a0      	adds	r6, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cd34:	f3bf 8f5b 	dmb	ish
    cd38:	e856 3f00 	ldrex	r3, [r6]
    cd3c:	f043 0302 	orr.w	r3, r3, #2
    cd40:	e846 3200 	strex	r2, r3, [r6]
    cd44:	2a00      	cmp	r2, #0
    cd46:	d1f7      	bne.n	cd38 <smp_security_request+0xa8>
    cd48:	f3bf 8f5b 	dmb	ish
	return 0;
    cd4c:	2000      	movs	r0, #0
    cd4e:	e7cc      	b.n	ccea <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    cd50:	36a0      	adds	r6, #160	; 0xa0
    cd52:	f3bf 8f5b 	dmb	ish
    cd56:	e856 3f00 	ldrex	r3, [r6]
    cd5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    cd5e:	e846 3200 	strex	r2, r3, [r6]
    cd62:	2a00      	cmp	r2, #0
    cd64:	d1f7      	bne.n	cd56 <smp_security_request+0xc6>
    cd66:	f3bf 8f5b 	dmb	ish
	return 0;
    cd6a:	2000      	movs	r0, #0
    cd6c:	e7bd      	b.n	ccea <smp_security_request+0x5a>
    cd6e:	bf00      	nop
    cd70:	20000aa4 	.word	0x20000aa4

0000cd74 <bt_smp_sign_verify>:
{
    cd74:	b530      	push	{r4, r5, lr}
    cd76:	b085      	sub	sp, #20
    cd78:	4605      	mov	r5, r0
    cd7a:	460c      	mov	r4, r1
	return buf->data + buf->len;
    cd7c:	6889      	ldr	r1, [r1, #8]
    cd7e:	89a3      	ldrh	r3, [r4, #12]
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    cd80:	3b0c      	subs	r3, #12
    cd82:	220c      	movs	r2, #12
    cd84:	4419      	add	r1, r3
    cd86:	a801      	add	r0, sp, #4
    cd88:	f7f3 fa9a 	bl	2c0 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    cd8c:	f105 0148 	add.w	r1, r5, #72	; 0x48
    cd90:	2010      	movs	r0, #16
    cd92:	f000 f945 	bl	d020 <bt_keys_find>
	if (!keys) {
    cd96:	b320      	cbz	r0, cde2 <bt_smp_sign_verify+0x6e>
    cd98:	4605      	mov	r5, r0
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    cd9a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    cd9c:	a904      	add	r1, sp, #16
    cd9e:	f841 3d10 	str.w	r3, [r1, #-16]!
    cda2:	68a0      	ldr	r0, [r4, #8]
    cda4:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    cda6:	3b0c      	subs	r3, #12
    cda8:	2204      	movs	r2, #4
    cdaa:	4418      	add	r0, r3
    cdac:	f7f3 fa88 	bl	2c0 <memcpy>
			   buf->len - sizeof(sig));
    cdb0:	89a2      	ldrh	r2, [r4, #12]
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    cdb2:	3a0c      	subs	r2, #12
    cdb4:	b292      	uxth	r2, r2
    cdb6:	68a1      	ldr	r1, [r4, #8]
    cdb8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    cdbc:	f7fd feac 	bl	ab18 <smp_sign_buf>
	if (err) {
    cdc0:	b990      	cbnz	r0, cde8 <bt_smp_sign_verify+0x74>
    cdc2:	68a1      	ldr	r1, [r4, #8]
    cdc4:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    cdc6:	3b0c      	subs	r3, #12
    cdc8:	220c      	movs	r2, #12
    cdca:	4419      	add	r1, r3
    cdcc:	a801      	add	r0, sp, #4
    cdce:	f01d f943 	bl	2a058 <memcmp>
    cdd2:	4602      	mov	r2, r0
    cdd4:	b958      	cbnz	r0, cdee <bt_smp_sign_verify+0x7a>
	keys->remote_csrk.cnt++;
    cdd6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    cdd8:	3301      	adds	r3, #1
    cdda:	66eb      	str	r3, [r5, #108]	; 0x6c
}
    cddc:	4610      	mov	r0, r2
    cdde:	b005      	add	sp, #20
    cde0:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    cde2:	f06f 0201 	mvn.w	r2, #1
    cde6:	e7f9      	b.n	cddc <bt_smp_sign_verify+0x68>
		return -EIO;
    cde8:	f06f 0204 	mvn.w	r2, #4
    cdec:	e7f6      	b.n	cddc <bt_smp_sign_verify+0x68>
		return -EBADMSG;
    cdee:	f06f 024c 	mvn.w	r2, #76	; 0x4c
    cdf2:	e7f3      	b.n	cddc <bt_smp_sign_verify+0x68>

0000cdf4 <bt_smp_sign>:
{
    cdf4:	b530      	push	{r4, r5, lr}
    cdf6:	b083      	sub	sp, #12
    cdf8:	460c      	mov	r4, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, &conn->le.dst);
    cdfa:	f100 0148 	add.w	r1, r0, #72	; 0x48
    cdfe:	2008      	movs	r0, #8
    ce00:	f000 f90e 	bl	d020 <bt_keys_find>
	if (!keys) {
    ce04:	b300      	cbz	r0, ce48 <bt_smp_sign+0x54>
    ce06:	4605      	mov	r5, r0
	net_buf_add(buf, 12);
    ce08:	210c      	movs	r1, #12
    ce0a:	f104 0008 	add.w	r0, r4, #8
    ce0e:	f00d fee5 	bl	1abdc <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    ce12:	6dab      	ldr	r3, [r5, #88]	; 0x58
    ce14:	a902      	add	r1, sp, #8
    ce16:	f841 3d04 	str.w	r3, [r1, #-4]!
    ce1a:	68a0      	ldr	r0, [r4, #8]
    ce1c:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    ce1e:	3b0c      	subs	r3, #12
    ce20:	2204      	movs	r2, #4
    ce22:	4418      	add	r0, r3
    ce24:	f7f3 fa4c 	bl	2c0 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    ce28:	89a2      	ldrh	r2, [r4, #12]
    ce2a:	3a0c      	subs	r2, #12
    ce2c:	b292      	uxth	r2, r2
    ce2e:	68a1      	ldr	r1, [r4, #8]
    ce30:	f105 0048 	add.w	r0, r5, #72	; 0x48
    ce34:	f7fd fe70 	bl	ab18 <smp_sign_buf>
	if (err) {
    ce38:	4602      	mov	r2, r0
    ce3a:	b940      	cbnz	r0, ce4e <bt_smp_sign+0x5a>
	keys->local_csrk.cnt++;
    ce3c:	6dab      	ldr	r3, [r5, #88]	; 0x58
    ce3e:	3301      	adds	r3, #1
    ce40:	65ab      	str	r3, [r5, #88]	; 0x58
}
    ce42:	4610      	mov	r0, r2
    ce44:	b003      	add	sp, #12
    ce46:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    ce48:	f06f 0201 	mvn.w	r2, #1
    ce4c:	e7f9      	b.n	ce42 <bt_smp_sign+0x4e>
		return -EIO;
    ce4e:	f06f 0204 	mvn.w	r2, #4
    ce52:	e7f6      	b.n	ce42 <bt_smp_sign+0x4e>

0000ce54 <bt_smp_update_keys>:
{
    ce54:	b570      	push	{r4, r5, r6, lr}
    ce56:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    ce58:	f7fd fd5c 	bl	a914 <smp_chan_get>
	if (!smp) {
    ce5c:	2800      	cmp	r0, #0
    ce5e:	d03d      	beq.n	cedc <bt_smp_update_keys+0x88>
    ce60:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ce62:	f3bf 8f5b 	dmb	ish
    ce66:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    ce6a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    ce6e:	f013 0f08 	tst.w	r3, #8
    ce72:	d033      	beq.n	cedc <bt_smp_update_keys+0x88>
	if (conn->le.keys) {
    ce74:	6f20      	ldr	r0, [r4, #112]	; 0x70
    ce76:	b108      	cbz	r0, ce7c <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    ce78:	f000 f97f 	bl	d17a <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    ce7c:	f104 0048 	add.w	r0, r4, #72	; 0x48
    ce80:	f000 f8a4 	bl	cfcc <bt_keys_get_addr>
    ce84:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    ce86:	b348      	cbz	r0, cedc <bt_smp_update_keys+0x88>
    ce88:	f3bf 8f5b 	dmb	ish
    ce8c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    ce90:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    ce94:	f413 6f00 	tst.w	r3, #2048	; 0x800
    ce98:	d121      	bne.n	cede <bt_smp_update_keys+0x8a>
	switch (smp->method) {
    ce9a:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    ce9e:	3b01      	subs	r3, #1
    cea0:	2b02      	cmp	r3, #2
    cea2:	d82b      	bhi.n	cefc <bt_smp_update_keys+0xa8>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    cea4:	6f23      	ldr	r3, [r4, #112]	; 0x70
    cea6:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cea8:	f3bf 8f5b 	dmb	ish
    ceac:	e853 2f00 	ldrex	r2, [r3]
    ceb0:	f042 0201 	orr.w	r2, r2, #1
    ceb4:	e843 2100 	strex	r1, r2, [r3]
    ceb8:	2900      	cmp	r1, #0
    ceba:	d1f7      	bne.n	ceac <bt_smp_update_keys+0x58>
    cebc:	f3bf 8f5b 	dmb	ish
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    cec0:	6f26      	ldr	r6, [r4, #112]	; 0x70
    cec2:	4628      	mov	r0, r5
    cec4:	f7fd fc8a 	bl	a7dc <get_encryption_key_size>
    cec8:	71f0      	strb	r0, [r6, #7]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ceca:	f3bf 8f5b 	dmb	ish
    cece:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    ced2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    ced6:	f013 0f20 	tst.w	r3, #32
    ceda:	d11e      	bne.n	cf1a <bt_smp_update_keys+0xc6>
    cedc:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    cede:	6f23      	ldr	r3, [r4, #112]	; 0x70
    cee0:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cee2:	f3bf 8f5b 	dmb	ish
    cee6:	e853 2f00 	ldrex	r2, [r3]
    ceea:	f042 0202 	orr.w	r2, r2, #2
    ceee:	e843 2100 	strex	r1, r2, [r3]
    cef2:	2900      	cmp	r1, #0
    cef4:	d1f7      	bne.n	cee6 <bt_smp_update_keys+0x92>
    cef6:	f3bf 8f5b 	dmb	ish
    cefa:	e7ce      	b.n	ce9a <bt_smp_update_keys+0x46>
		atomic_clear_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    cefc:	6f23      	ldr	r3, [r4, #112]	; 0x70
    cefe:	3308      	adds	r3, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    cf00:	f3bf 8f5b 	dmb	ish
    cf04:	e853 2f00 	ldrex	r2, [r3]
    cf08:	f022 0201 	bic.w	r2, r2, #1
    cf0c:	e843 2100 	strex	r1, r2, [r3]
    cf10:	2900      	cmp	r1, #0
    cf12:	d1f7      	bne.n	cf04 <bt_smp_update_keys+0xb0>
    cf14:	f3bf 8f5b 	dmb	ish
    cf18:	e7d2      	b.n	cec0 <bt_smp_update_keys+0x6c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cf1a:	f3bf 8f5b 	dmb	ish
    cf1e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    cf22:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    cf26:	f413 6f80 	tst.w	r3, #1024	; 0x400
    cf2a:	d0d7      	beq.n	cedc <bt_smp_update_keys+0x88>
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    cf2c:	2120      	movs	r1, #32
    cf2e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    cf30:	f000 f90c 	bl	d14c <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    cf34:	6f20      	ldr	r0, [r4, #112]	; 0x70
    cf36:	2210      	movs	r2, #16
    cf38:	f105 01e3 	add.w	r1, r5, #227	; 0xe3
    cf3c:	301a      	adds	r0, #26
    cf3e:	f7f3 f9bf 	bl	2c0 <memcpy>
		conn->le.keys->ltk.rand = 0;
    cf42:	6f23      	ldr	r3, [r4, #112]	; 0x70
    cf44:	2000      	movs	r0, #0
    cf46:	2100      	movs	r1, #0
    cf48:	e9c3 0104 	strd	r0, r1, [r3, #16]
		conn->le.keys->ltk.ediv = 0;
    cf4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
    cf4e:	2200      	movs	r2, #0
    cf50:	831a      	strh	r2, [r3, #24]
    cf52:	e7c3      	b.n	cedc <bt_smp_update_keys+0x88>

0000cf54 <bt_smp_get_tk>:
{
    cf54:	b570      	push	{r4, r5, r6, lr}
    cf56:	460d      	mov	r5, r1
	smp = smp_chan_get(conn);
    cf58:	f7fd fcdc 	bl	a914 <smp_chan_get>
	if (!smp) {
    cf5c:	b300      	cbz	r0, cfa0 <bt_smp_get_tk+0x4c>
    cf5e:	4604      	mov	r4, r0
    cf60:	f3bf 8f5b 	dmb	ish
    cf64:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cf68:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    cf6c:	f013 0f08 	tst.w	r3, #8
    cf70:	d101      	bne.n	cf76 <bt_smp_get_tk+0x22>
		return false;
    cf72:	2000      	movs	r0, #0
    cf74:	bd70      	pop	{r4, r5, r6, pc}
	enc_size = get_encryption_key_size(smp);
    cf76:	f7fd fc31 	bl	a7dc <get_encryption_key_size>
    cf7a:	4606      	mov	r6, r0
	memcpy(tk, smp->tk, enc_size);
    cf7c:	4602      	mov	r2, r0
    cf7e:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
    cf82:	4628      	mov	r0, r5
    cf84:	f7f3 f99c 	bl	2c0 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
    cf88:	2e0f      	cmp	r6, #15
    cf8a:	d901      	bls.n	cf90 <bt_smp_get_tk+0x3c>
	return true;
    cf8c:	2001      	movs	r0, #1
}
    cf8e:	bd70      	pop	{r4, r5, r6, pc}
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    cf90:	f1c6 0210 	rsb	r2, r6, #16
    cf94:	2100      	movs	r1, #0
    cf96:	19a8      	adds	r0, r5, r6
    cf98:	f01d f8f2 	bl	2a180 <memset>
	return true;
    cf9c:	2001      	movs	r0, #1
    cf9e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    cfa0:	2000      	movs	r0, #0
    cfa2:	bd70      	pop	{r4, r5, r6, pc}

0000cfa4 <bt_smp_init>:

int bt_smp_init(void)
{
    cfa4:	b508      	push	{r3, lr}
	};
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
    cfa6:	f7fd fca9 	bl	a8fc <le_sc_supported>
    cfaa:	4b05      	ldr	r3, [pc, #20]	; (cfc0 <bt_smp_init+0x1c>)
    cfac:	7018      	strb	r0, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    cfae:	4805      	ldr	r0, [pc, #20]	; (cfc4 <bt_smp_init+0x20>)
    cfb0:	f7fa fe04 	bl	7bbc <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    cfb4:	4804      	ldr	r0, [pc, #16]	; (cfc8 <bt_smp_init+0x24>)
    cfb6:	f7f9 fc7f 	bl	68b8 <bt_pub_key_gen>

	return smp_self_test();
}
    cfba:	2000      	movs	r0, #0
    cfbc:	bd08      	pop	{r3, pc}
    cfbe:	bf00      	nop
    cfc0:	20000aa4 	.word	0x20000aa4
    cfc4:	2000bc34 	.word	0x2000bc34
    cfc8:	2000bc54 	.word	0x2000bc54

0000cfcc <bt_keys_get_addr>:
#include "keys.h"

static struct bt_keys key_pool[CONFIG_BT_MAX_PAIRED];

struct bt_keys *bt_keys_get_addr(const bt_addr_le_t *addr)
{
    cfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cfce:	b083      	sub	sp, #12
    cfd0:	4606      	mov	r6, r0
	struct bt_keys *keys;
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    cfd2:	2500      	movs	r5, #0
    cfd4:	b11d      	cbz	r5, cfde <bt_keys_get_addr+0x12>
		}
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    cfd6:	2400      	movs	r4, #0
}
    cfd8:	4620      	mov	r0, r4
    cfda:	b003      	add	sp, #12
    cfdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		keys = &key_pool[i];
    cfde:	00eb      	lsls	r3, r5, #3
    cfe0:	442b      	add	r3, r5
    cfe2:	011a      	lsls	r2, r3, #4
    cfe4:	4c0d      	ldr	r4, [pc, #52]	; (d01c <bt_keys_get_addr+0x50>)
    cfe6:	4414      	add	r4, r2
	return memcmp(a, b, sizeof(*a));
    cfe8:	2207      	movs	r2, #7
    cfea:	4631      	mov	r1, r6
    cfec:	4620      	mov	r0, r4
    cfee:	f01d f833 	bl	2a058 <memcmp>
		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    cff2:	2800      	cmp	r0, #0
    cff4:	d0f0      	beq.n	cfd8 <bt_keys_get_addr+0xc>
		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    cff6:	2300      	movs	r3, #0
    cff8:	9300      	str	r3, [sp, #0]
    cffa:	f8cd 3003 	str.w	r3, [sp, #3]
    cffe:	2207      	movs	r2, #7
    d000:	4669      	mov	r1, sp
    d002:	4620      	mov	r0, r4
    d004:	f01d f828 	bl	2a058 <memcmp>
    d008:	b108      	cbz	r0, d00e <bt_keys_get_addr+0x42>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d00a:	3501      	adds	r5, #1
    d00c:	e7e2      	b.n	cfd4 <bt_keys_get_addr+0x8>
	memcpy(dst, src, sizeof(*dst));
    d00e:	2207      	movs	r2, #7
    d010:	4631      	mov	r1, r6
    d012:	4620      	mov	r0, r4
    d014:	f7f3 f954 	bl	2c0 <memcpy>
			return keys;
    d018:	e7de      	b.n	cfd8 <bt_keys_get_addr+0xc>
    d01a:	bf00      	nop
    d01c:	20000aa8 	.word	0x20000aa8

0000d020 <bt_keys_find>:
		}
	}
}

struct bt_keys *bt_keys_find(int type, const bt_addr_le_t *addr)
{
    d020:	b570      	push	{r4, r5, r6, lr}
    d022:	4605      	mov	r5, r0
    d024:	460e      	mov	r6, r1
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d026:	2400      	movs	r4, #0
    d028:	b10c      	cbz	r4, d02e <bt_keys_find+0xe>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    d02a:	2000      	movs	r0, #0
}
    d02c:	bd70      	pop	{r4, r5, r6, pc}
		if ((key_pool[i].keys & type) &&
    d02e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    d032:	011a      	lsls	r2, r3, #4
    d034:	4b0b      	ldr	r3, [pc, #44]	; (d064 <bt_keys_find+0x44>)
    d036:	4413      	add	r3, r2
    d038:	899b      	ldrh	r3, [r3, #12]
    d03a:	422b      	tst	r3, r5
    d03c:	d101      	bne.n	d042 <bt_keys_find+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d03e:	3401      	adds	r4, #1
    d040:	e7f2      	b.n	d028 <bt_keys_find+0x8>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    d042:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    d046:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    d048:	2207      	movs	r2, #7
    d04a:	4631      	mov	r1, r6
    d04c:	4805      	ldr	r0, [pc, #20]	; (d064 <bt_keys_find+0x44>)
    d04e:	4418      	add	r0, r3
    d050:	f01d f802 	bl	2a058 <memcmp>
		if ((key_pool[i].keys & type) &&
    d054:	2800      	cmp	r0, #0
    d056:	d1f2      	bne.n	d03e <bt_keys_find+0x1e>
			return &key_pool[i];
    d058:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    d05c:	0123      	lsls	r3, r4, #4
    d05e:	4801      	ldr	r0, [pc, #4]	; (d064 <bt_keys_find+0x44>)
    d060:	4418      	add	r0, r3
    d062:	bd70      	pop	{r4, r5, r6, pc}
    d064:	20000aa8 	.word	0x20000aa8

0000d068 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(const bt_addr_le_t *addr)
{
    d068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    d06a:	7803      	ldrb	r3, [r0, #0]
    d06c:	2b01      	cmp	r3, #1
    d06e:	d004      	beq.n	d07a <bt_keys_find_irk+0x12>
		return false;
    d070:	2300      	movs	r3, #0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
    d072:	b153      	cbz	r3, d08a <bt_keys_find_irk+0x22>
    d074:	4605      	mov	r5, r0
    d076:	2400      	movs	r4, #0
    d078:	e00a      	b.n	d090 <bt_keys_find_irk+0x28>
	return BT_ADDR_IS_RPA(&addr->a);
    d07a:	7983      	ldrb	r3, [r0, #6]
    d07c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d080:	2b40      	cmp	r3, #64	; 0x40
    d082:	bf14      	ite	ne
    d084:	2300      	movne	r3, #0
    d086:	2301      	moveq	r3, #1
    d088:	e7f3      	b.n	d072 <bt_keys_find_irk+0xa>
		return NULL;
    d08a:	2000      	movs	r0, #0
    d08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d08e:	3401      	adds	r4, #1
    d090:	b9c4      	cbnz	r4, d0c4 <bt_keys_find_irk+0x5c>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    d092:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    d096:	011a      	lsls	r2, r3, #4
    d098:	4b1e      	ldr	r3, [pc, #120]	; (d114 <bt_keys_find_irk+0xac>)
    d09a:	4413      	add	r3, r2
    d09c:	899b      	ldrh	r3, [r3, #12]
    d09e:	f013 0f02 	tst.w	r3, #2
    d0a2:	d0f4      	beq.n	d08e <bt_keys_find_irk+0x26>
			continue;
		}

		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    d0a4:	4611      	mov	r1, r2
    d0a6:	3140      	adds	r1, #64	; 0x40
	return memcmp(a, b, sizeof(*a));
    d0a8:	2206      	movs	r2, #6
    d0aa:	4b1a      	ldr	r3, [pc, #104]	; (d114 <bt_keys_find_irk+0xac>)
    d0ac:	4419      	add	r1, r3
    d0ae:	1c68      	adds	r0, r5, #1
    d0b0:	f01c ffd2 	bl	2a058 <memcmp>
    d0b4:	2800      	cmp	r0, #0
    d0b6:	d1ea      	bne.n	d08e <bt_keys_find_irk+0x26>
			BT_DBG("cached RPA %s for %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));
			return &key_pool[i];
    d0b8:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    d0bc:	0123      	lsls	r3, r4, #4
    d0be:	4815      	ldr	r0, [pc, #84]	; (d114 <bt_keys_find_irk+0xac>)
    d0c0:	4418      	add	r0, r3
    d0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d0c4:	2400      	movs	r4, #0
    d0c6:	e000      	b.n	d0ca <bt_keys_find_irk+0x62>
		}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d0c8:	3401      	adds	r4, #1
    d0ca:	bb04      	cbnz	r4, d10e <bt_keys_find_irk+0xa6>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    d0cc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    d0d0:	011a      	lsls	r2, r3, #4
    d0d2:	4b10      	ldr	r3, [pc, #64]	; (d114 <bt_keys_find_irk+0xac>)
    d0d4:	4413      	add	r3, r2
    d0d6:	899b      	ldrh	r3, [r3, #12]
    d0d8:	f013 0f02 	tst.w	r3, #2
    d0dc:	d0f4      	beq.n	d0c8 <bt_keys_find_irk+0x60>
			continue;
		}

		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    d0de:	4610      	mov	r0, r2
    d0e0:	3030      	adds	r0, #48	; 0x30
    d0e2:	1c6e      	adds	r6, r5, #1
    d0e4:	4631      	mov	r1, r6
    d0e6:	4b0b      	ldr	r3, [pc, #44]	; (d114 <bt_keys_find_irk+0xac>)
    d0e8:	4418      	add	r0, r3
    d0ea:	f7f7 f987 	bl	43fc <bt_rpa_irk_matches>
    d0ee:	2800      	cmp	r0, #0
    d0f0:	d0ea      	beq.n	d0c8 <bt_keys_find_irk+0x60>
			BT_DBG("RPA %s matches %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));

			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
    d0f2:	4d08      	ldr	r5, [pc, #32]	; (d114 <bt_keys_find_irk+0xac>)
    d0f4:	00e7      	lsls	r7, r4, #3
    d0f6:	193a      	adds	r2, r7, r4
    d0f8:	0113      	lsls	r3, r2, #4
    d0fa:	3340      	adds	r3, #64	; 0x40
	memcpy(dst, src, sizeof(*dst));
    d0fc:	2206      	movs	r2, #6
    d0fe:	4631      	mov	r1, r6
    d100:	18e8      	adds	r0, r5, r3
    d102:	f7f3 f8dd 	bl	2c0 <memcpy>

			return &key_pool[i];
    d106:	443c      	add	r4, r7
    d108:	0120      	lsls	r0, r4, #4
    d10a:	4428      	add	r0, r5
    d10c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
    d10e:	2000      	movs	r0, #0
}
    d110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d112:	bf00      	nop
    d114:	20000aa8 	.word	0x20000aa8

0000d118 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(const bt_addr_le_t *addr)
{
    d118:	b538      	push	{r3, r4, r5, lr}
    d11a:	4605      	mov	r5, r0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d11c:	2400      	movs	r4, #0
    d11e:	b10c      	cbz	r4, d124 <bt_keys_find_addr+0xc>
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    d120:	2000      	movs	r0, #0
}
    d122:	bd38      	pop	{r3, r4, r5, pc}
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    d124:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    d128:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    d12a:	2207      	movs	r2, #7
    d12c:	4629      	mov	r1, r5
    d12e:	4806      	ldr	r0, [pc, #24]	; (d148 <bt_keys_find_addr+0x30>)
    d130:	4418      	add	r0, r3
    d132:	f01c ff91 	bl	2a058 <memcmp>
    d136:	b108      	cbz	r0, d13c <bt_keys_find_addr+0x24>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d138:	3401      	adds	r4, #1
    d13a:	e7f0      	b.n	d11e <bt_keys_find_addr+0x6>
			return &key_pool[i];
    d13c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    d140:	0123      	lsls	r3, r4, #4
    d142:	4801      	ldr	r0, [pc, #4]	; (d148 <bt_keys_find_addr+0x30>)
    d144:	4418      	add	r0, r3
    d146:	bd38      	pop	{r3, r4, r5, pc}
    d148:	20000aa8 	.word	0x20000aa8

0000d14c <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
    d14c:	8983      	ldrh	r3, [r0, #12]
    d14e:	4319      	orrs	r1, r3
    d150:	8181      	strh	r1, [r0, #12]
    d152:	4770      	bx	lr

0000d154 <bt_keys_get_type>:
{
    d154:	b570      	push	{r4, r5, r6, lr}
    d156:	4606      	mov	r6, r0
    d158:	460d      	mov	r5, r1
	keys = bt_keys_find(type, addr);
    d15a:	f7ff ff61 	bl	d020 <bt_keys_find>
	if (keys) {
    d15e:	4604      	mov	r4, r0
    d160:	b108      	cbz	r0, d166 <bt_keys_get_type+0x12>
}
    d162:	4620      	mov	r0, r4
    d164:	bd70      	pop	{r4, r5, r6, pc}
	keys = bt_keys_get_addr(addr);
    d166:	4628      	mov	r0, r5
    d168:	f7ff ff30 	bl	cfcc <bt_keys_get_addr>
	if (!keys) {
    d16c:	4604      	mov	r4, r0
    d16e:	2800      	cmp	r0, #0
    d170:	d0f7      	beq.n	d162 <bt_keys_get_type+0xe>
	bt_keys_add_type(keys, type);
    d172:	4631      	mov	r1, r6
    d174:	f7ff ffea 	bl	d14c <bt_keys_add_type>
	return keys;
    d178:	e7f3      	b.n	d162 <bt_keys_get_type+0xe>

0000d17a <bt_keys_clear>:
}

void bt_keys_clear(struct bt_keys *keys)
{
    d17a:	b508      	push	{r3, lr}
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	memset(keys, 0, sizeof(*keys));
    d17c:	2290      	movs	r2, #144	; 0x90
    d17e:	2100      	movs	r1, #0
    d180:	f01c fffe 	bl	2a180 <memset>
    d184:	bd08      	pop	{r3, pc}

0000d186 <status_cmd_handle>:
}
    d186:	f06f 0015 	mvn.w	r0, #21
    d18a:	4770      	bx	lr

0000d18c <evt_create>:
{
    d18c:	b538      	push	{r3, r4, r5, lr}
    d18e:	460d      	mov	r5, r1
    d190:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    d192:	2102      	movs	r1, #2
    d194:	3008      	adds	r0, #8
    d196:	f00d fd21 	bl	1abdc <net_buf_simple_add>
	hdr->evt = evt;
    d19a:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    d19c:	7044      	strb	r4, [r0, #1]
    d19e:	bd38      	pop	{r3, r4, r5, pc}

0000d1a0 <cmd_status>:
{
    d1a0:	b538      	push	{r3, r4, r5, lr}
    d1a2:	4605      	mov	r5, r0
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    d1a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d1a8:	f7f9 fb5e 	bl	6868 <bt_buf_get_cmd_complete>
    d1ac:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    d1ae:	2204      	movs	r2, #4
    d1b0:	210f      	movs	r1, #15
    d1b2:	f7ff ffeb 	bl	d18c <evt_create>
	cs = net_buf_add(buf, sizeof(*cs));
    d1b6:	2104      	movs	r1, #4
    d1b8:	f104 0008 	add.w	r0, r4, #8
    d1bc:	f00d fd0e 	bl	1abdc <net_buf_simple_add>
	cs->status = status;
    d1c0:	7005      	strb	r5, [r0, #0]
	cs->ncmd = 1;
    d1c2:	2301      	movs	r3, #1
    d1c4:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    d1c6:	4b02      	ldr	r3, [pc, #8]	; (d1d0 <cmd_status+0x30>)
    d1c8:	881b      	ldrh	r3, [r3, #0]
    d1ca:	8043      	strh	r3, [r0, #2]
}
    d1cc:	4620      	mov	r0, r4
    d1ce:	bd38      	pop	{r3, r4, r5, pc}
    d1d0:	20000b38 	.word	0x20000b38

0000d1d4 <disconnect>:
{
    d1d4:	b510      	push	{r4, lr}
    d1d6:	460c      	mov	r4, r1
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    d1d8:	6883      	ldr	r3, [r0, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    d1da:	7899      	ldrb	r1, [r3, #2]
    d1dc:	8818      	ldrh	r0, [r3, #0]
    d1de:	f00b f966 	bl	184ae <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d1e2:	b100      	cbz	r0, d1e6 <disconnect+0x12>
    d1e4:	200c      	movs	r0, #12
    d1e6:	f7ff ffdb 	bl	d1a0 <cmd_status>
    d1ea:	6020      	str	r0, [r4, #0]
    d1ec:	bd10      	pop	{r4, pc}
	...

0000d1f0 <cmd_complete>:
{
    d1f0:	b538      	push	{r3, r4, r5, lr}
    d1f2:	4604      	mov	r4, r0
    d1f4:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    d1f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d1fa:	f7f9 fb35 	bl	6868 <bt_buf_get_cmd_complete>
    d1fe:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    d200:	1cea      	adds	r2, r5, #3
    d202:	b2d2      	uxtb	r2, r2
    d204:	210e      	movs	r1, #14
    d206:	f7ff ffc1 	bl	d18c <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    d20a:	6820      	ldr	r0, [r4, #0]
    d20c:	2103      	movs	r1, #3
    d20e:	3008      	adds	r0, #8
    d210:	f00d fce4 	bl	1abdc <net_buf_simple_add>
	cc->ncmd = 1;
    d214:	2301      	movs	r3, #1
    d216:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    d218:	4b04      	ldr	r3, [pc, #16]	; (d22c <cmd_complete+0x3c>)
    d21a:	881b      	ldrh	r3, [r3, #0]
    d21c:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    d220:	6820      	ldr	r0, [r4, #0]
    d222:	4629      	mov	r1, r5
    d224:	3008      	adds	r0, #8
    d226:	f00d fcd9 	bl	1abdc <net_buf_simple_add>
}
    d22a:	bd38      	pop	{r3, r4, r5, pc}
    d22c:	20000b38 	.word	0x20000b38

0000d230 <set_event_mask_page_2>:
{
    d230:	b570      	push	{r4, r5, r6, lr}
    d232:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask_page_2 *cmd = (void *)buf->data;
    d234:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    d236:	79da      	ldrb	r2, [r3, #7]
    d238:	7999      	ldrb	r1, [r3, #6]
    d23a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    d23e:	7958      	ldrb	r0, [r3, #5]
    d240:	791a      	ldrb	r2, [r3, #4]
    d242:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    d246:	2400      	movs	r4, #0
    d248:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    d24c:	78d9      	ldrb	r1, [r3, #3]
    d24e:	789a      	ldrb	r2, [r3, #2]
    d250:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d254:	7859      	ldrb	r1, [r3, #1]
    d256:	781b      	ldrb	r3, [r3, #0]
    d258:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    d25c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    d260:	ea44 0003 	orr.w	r0, r4, r3
    d264:	4629      	mov	r1, r5
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    d266:	4b04      	ldr	r3, [pc, #16]	; (d278 <set_event_mask_page_2+0x48>)
    d268:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    d26c:	2101      	movs	r1, #1
    d26e:	4630      	mov	r0, r6
    d270:	f7ff ffbe 	bl	d1f0 <cmd_complete>
	ccst->status = 0x00;
    d274:	7004      	strb	r4, [r0, #0]
    d276:	bd70      	pop	{r4, r5, r6, pc}
    d278:	20000bc8 	.word	0x20000bc8

0000d27c <read_local_version_info>:
{
    d27c:	b508      	push	{r3, lr}
    d27e:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d280:	2109      	movs	r1, #9
    d282:	f7ff ffb5 	bl	d1f0 <cmd_complete>
	rp->status = 0x00;
    d286:	2300      	movs	r3, #0
    d288:	7003      	strb	r3, [r0, #0]
	rp->hci_version = BT_HCI_VERSION_5_0;
    d28a:	2209      	movs	r2, #9
    d28c:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
    d28e:	7083      	strb	r3, [r0, #2]
    d290:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    d292:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    d294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d298:	7143      	strb	r3, [r0, #5]
    d29a:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    d29c:	71c3      	strb	r3, [r0, #7]
    d29e:	7203      	strb	r3, [r0, #8]
    d2a0:	bd08      	pop	{r3, pc}

0000d2a2 <le_read_buffer_size>:
{
    d2a2:	b508      	push	{r3, lr}
    d2a4:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d2a6:	2104      	movs	r1, #4
    d2a8:	f7ff ffa2 	bl	d1f0 <cmd_complete>
	rp->status = 0x00;
    d2ac:	2300      	movs	r3, #0
    d2ae:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    d2b0:	221b      	movs	r2, #27
    d2b2:	7042      	strb	r2, [r0, #1]
    d2b4:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    d2b6:	2302      	movs	r3, #2
    d2b8:	70c3      	strb	r3, [r0, #3]
    d2ba:	bd08      	pop	{r3, pc}

0000d2bc <le_read_supp_states>:
{
    d2bc:	b508      	push	{r3, lr}
    d2be:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d2c0:	2109      	movs	r1, #9
    d2c2:	f7ff ff95 	bl	d1f0 <cmd_complete>
	rp->status = 0x00;
    d2c6:	2200      	movs	r2, #0
    d2c8:	7002      	strb	r2, [r0, #0]
	dst[0] = val;
    d2ca:	23ff      	movs	r3, #255	; 0xff
    d2cc:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    d2ce:	7083      	strb	r3, [r0, #2]
	dst[0] = val;
    d2d0:	213f      	movs	r1, #63	; 0x3f
    d2d2:	70c1      	strb	r1, [r0, #3]
	dst[1] = val >> 8;
    d2d4:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
    d2d6:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    d2d8:	2303      	movs	r3, #3
    d2da:	7183      	strb	r3, [r0, #6]
	dst[0] = val;
    d2dc:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
    d2de:	7202      	strb	r2, [r0, #8]
    d2e0:	bd08      	pop	{r3, pc}

0000d2e2 <le_read_adv_chan_tx_power>:
{
    d2e2:	b508      	push	{r3, lr}
    d2e4:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d2e6:	2102      	movs	r1, #2
    d2e8:	f7ff ff82 	bl	d1f0 <cmd_complete>
	rp->status = 0x00;
    d2ec:	2300      	movs	r3, #0
    d2ee:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    d2f0:	7043      	strb	r3, [r0, #1]
    d2f2:	bd08      	pop	{r3, pc}

0000d2f4 <vs_read_version_info>:
{
    d2f4:	b508      	push	{r3, lr}
    d2f6:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d2f8:	210d      	movs	r1, #13
    d2fa:	f7ff ff79 	bl	d1f0 <cmd_complete>
	rp->status = 0x00;
    d2fe:	2300      	movs	r3, #0
    d300:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    d302:	2202      	movs	r2, #2
    d304:	7042      	strb	r2, [r0, #1]
    d306:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    d308:	70c2      	strb	r2, [r0, #3]
    d30a:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    d30c:	7143      	strb	r3, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    d30e:	2201      	movs	r2, #1
    d310:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    d312:	2209      	movs	r2, #9
    d314:	71c2      	strb	r2, [r0, #7]
    d316:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    d318:	2263      	movs	r2, #99	; 0x63
    d31a:	7242      	strb	r2, [r0, #9]
    d31c:	7283      	strb	r3, [r0, #10]
    d31e:	72c3      	strb	r3, [r0, #11]
    d320:	7303      	strb	r3, [r0, #12]
    d322:	bd08      	pop	{r3, pc}

0000d324 <meta_evt>:
{
    d324:	b570      	push	{r4, r5, r6, lr}
    d326:	4604      	mov	r4, r0
    d328:	460e      	mov	r6, r1
    d32a:	4615      	mov	r5, r2
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    d32c:	3201      	adds	r2, #1
    d32e:	b2d2      	uxtb	r2, r2
    d330:	213e      	movs	r1, #62	; 0x3e
    d332:	f7ff ff2b 	bl	d18c <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    d336:	3408      	adds	r4, #8
    d338:	2101      	movs	r1, #1
    d33a:	4620      	mov	r0, r4
    d33c:	f00d fc4e 	bl	1abdc <net_buf_simple_add>
	me->subevent = subevt;
    d340:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
    d342:	4629      	mov	r1, r5
    d344:	4620      	mov	r0, r4
    d346:	f00d fc49 	bl	1abdc <net_buf_simple_add>
}
    d34a:	bd70      	pop	{r4, r5, r6, pc}

0000d34c <le_chan_sel_algo>:
{
    d34c:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d34e:	4b0f      	ldr	r3, [pc, #60]	; (d38c <le_chan_sel_algo+0x40>)
    d350:	e9d3 4500 	ldrd	r4, r5, [r3]
    d354:	2400      	movs	r4, #0
    d356:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    d35a:	ea54 0305 	orrs.w	r3, r4, r5
    d35e:	d008      	beq.n	d372 <le_chan_sel_algo+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    d360:	4b0b      	ldr	r3, [pc, #44]	; (d390 <le_chan_sel_algo+0x44>)
    d362:	e9d3 4500 	ldrd	r4, r5, [r3]
    d366:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
    d36a:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d36c:	ea54 0305 	orrs.w	r3, r4, r5
    d370:	d100      	bne.n	d374 <le_chan_sel_algo+0x28>
    d372:	bd38      	pop	{r3, r4, r5, pc}
    d374:	4613      	mov	r3, r2
    d376:	460d      	mov	r5, r1
    d378:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    d37a:	2203      	movs	r2, #3
    d37c:	2114      	movs	r1, #20
    d37e:	4618      	mov	r0, r3
    d380:	f7ff ffd0 	bl	d324 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    d384:	8005      	strh	r5, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    d386:	78e3      	ldrb	r3, [r4, #3]
    d388:	7083      	strb	r3, [r0, #2]
    d38a:	e7f2      	b.n	d372 <le_chan_sel_algo+0x26>
    d38c:	2000bc60 	.word	0x2000bc60
    d390:	2000bc68 	.word	0x2000bc68

0000d394 <disconn_complete>:
{
    d394:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    d396:	4b11      	ldr	r3, [pc, #68]	; (d3dc <disconn_complete+0x48>)
    d398:	e9d3 4500 	ldrd	r4, r5, [r3]
    d39c:	f004 0410 	and.w	r4, r4, #16
    d3a0:	2500      	movs	r5, #0
    d3a2:	ea54 0305 	orrs.w	r3, r4, r5
    d3a6:	d100      	bne.n	d3aa <disconn_complete+0x16>
    d3a8:	bd70      	pop	{r4, r5, r6, pc}
    d3aa:	4614      	mov	r4, r2
    d3ac:	460e      	mov	r6, r1
    d3ae:	4605      	mov	r5, r0
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    d3b0:	2204      	movs	r2, #4
    d3b2:	2105      	movs	r1, #5
    d3b4:	4620      	mov	r0, r4
    d3b6:	f7ff fee9 	bl	d18c <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d3ba:	2104      	movs	r1, #4
    d3bc:	f104 0008 	add.w	r0, r4, #8
    d3c0:	f00d fc0c 	bl	1abdc <net_buf_simple_add>
	ep->status = 0x00;
    d3c4:	2300      	movs	r3, #0
    d3c6:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d3c8:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    d3cc:	782b      	ldrb	r3, [r5, #0]
    d3ce:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    d3d0:	4a03      	ldr	r2, [pc, #12]	; (d3e0 <disconn_complete+0x4c>)
    d3d2:	6813      	ldr	r3, [r2, #0]
    d3d4:	3b01      	subs	r3, #1
    d3d6:	6013      	str	r3, [r2, #0]
    d3d8:	e7e6      	b.n	d3a8 <disconn_complete+0x14>
    d3da:	bf00      	nop
    d3dc:	2000bc60 	.word	0x2000bc60
    d3e0:	20000b3c 	.word	0x20000b3c

0000d3e4 <enc_refresh_complete>:
{
    d3e4:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    d3e6:	4b0d      	ldr	r3, [pc, #52]	; (d41c <enc_refresh_complete+0x38>)
    d3e8:	e9d3 4500 	ldrd	r4, r5, [r3]
    d3ec:	2400      	movs	r4, #0
    d3ee:	f405 4500 	and.w	r5, r5, #32768	; 0x8000
    d3f2:	ea54 0305 	orrs.w	r3, r4, r5
    d3f6:	d100      	bne.n	d3fa <enc_refresh_complete+0x16>
    d3f8:	bd38      	pop	{r3, r4, r5, pc}
    d3fa:	4614      	mov	r4, r2
    d3fc:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    d3fe:	2203      	movs	r2, #3
    d400:	2130      	movs	r1, #48	; 0x30
    d402:	4620      	mov	r0, r4
    d404:	f7ff fec2 	bl	d18c <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d408:	2103      	movs	r1, #3
    d40a:	f104 0008 	add.w	r0, r4, #8
    d40e:	f00d fbe5 	bl	1abdc <net_buf_simple_add>
	ep->status = 0x00;
    d412:	2300      	movs	r3, #0
    d414:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d416:	f8a0 5001 	strh.w	r5, [r0, #1]
    d41a:	e7ed      	b.n	d3f8 <enc_refresh_complete+0x14>
    d41c:	2000bc60 	.word	0x2000bc60

0000d420 <auth_payload_timeout_exp>:
{
    d420:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    d422:	4b0c      	ldr	r3, [pc, #48]	; (d454 <auth_payload_timeout_exp+0x34>)
    d424:	e9d3 4500 	ldrd	r4, r5, [r3]
    d428:	f404 0400 	and.w	r4, r4, #8388608	; 0x800000
    d42c:	2500      	movs	r5, #0
    d42e:	ea54 0305 	orrs.w	r3, r4, r5
    d432:	d100      	bne.n	d436 <auth_payload_timeout_exp+0x16>
    d434:	bd38      	pop	{r3, r4, r5, pc}
    d436:	4614      	mov	r4, r2
    d438:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    d43a:	2202      	movs	r2, #2
    d43c:	2157      	movs	r1, #87	; 0x57
    d43e:	4620      	mov	r0, r4
    d440:	f7ff fea4 	bl	d18c <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d444:	2102      	movs	r1, #2
    d446:	f104 0008 	add.w	r0, r4, #8
    d44a:	f00d fbc7 	bl	1abdc <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    d44e:	8005      	strh	r5, [r0, #0]
    d450:	e7f0      	b.n	d434 <auth_payload_timeout_exp+0x14>
    d452:	bf00      	nop
    d454:	20000bc8 	.word	0x20000bc8

0000d458 <remote_version_info>:
{
    d458:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    d45a:	4b11      	ldr	r3, [pc, #68]	; (d4a0 <remote_version_info+0x48>)
    d45c:	e9d3 4500 	ldrd	r4, r5, [r3]
    d460:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    d464:	2500      	movs	r5, #0
    d466:	ea54 0305 	orrs.w	r3, r4, r5
    d46a:	d100      	bne.n	d46e <remote_version_info+0x16>
    d46c:	bd70      	pop	{r4, r5, r6, pc}
    d46e:	4615      	mov	r5, r2
    d470:	460e      	mov	r6, r1
    d472:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    d474:	2208      	movs	r2, #8
    d476:	210c      	movs	r1, #12
    d478:	4628      	mov	r0, r5
    d47a:	f7ff fe87 	bl	d18c <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d47e:	2108      	movs	r1, #8
    d480:	1868      	adds	r0, r5, r1
    d482:	f00d fbab 	bl	1abdc <net_buf_simple_add>
	ep->status = 0x00;
    d486:	2300      	movs	r3, #0
    d488:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d48a:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    d48e:	7923      	ldrb	r3, [r4, #4]
    d490:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    d492:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    d496:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    d498:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    d49c:	80c3      	strh	r3, [r0, #6]
    d49e:	e7e5      	b.n	d46c <remote_version_info+0x14>
    d4a0:	2000bc60 	.word	0x2000bc60

0000d4a4 <encrypt_change>:
{
    d4a4:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    d4a6:	4b0f      	ldr	r3, [pc, #60]	; (d4e4 <encrypt_change+0x40>)
    d4a8:	e9d3 4500 	ldrd	r4, r5, [r3]
    d4ac:	f004 0480 	and.w	r4, r4, #128	; 0x80
    d4b0:	2500      	movs	r5, #0
    d4b2:	ea54 0305 	orrs.w	r3, r4, r5
    d4b6:	d100      	bne.n	d4ba <encrypt_change+0x16>
    d4b8:	bd70      	pop	{r4, r5, r6, pc}
    d4ba:	4615      	mov	r5, r2
    d4bc:	460e      	mov	r6, r1
    d4be:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    d4c0:	2204      	movs	r2, #4
    d4c2:	2108      	movs	r1, #8
    d4c4:	4628      	mov	r0, r5
    d4c6:	f7ff fe61 	bl	d18c <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d4ca:	2104      	movs	r1, #4
    d4cc:	f105 0008 	add.w	r0, r5, #8
    d4d0:	f00d fb84 	bl	1abdc <net_buf_simple_add>
	ep->status = err;
    d4d4:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d4d6:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    d4da:	fab4 f384 	clz	r3, r4
    d4de:	095b      	lsrs	r3, r3, #5
    d4e0:	70c3      	strb	r3, [r0, #3]
    d4e2:	e7e9      	b.n	d4b8 <encrypt_change+0x14>
    d4e4:	2000bc60 	.word	0x2000bc60

0000d4e8 <read_remote_ver_info>:
{
    d4e8:	b510      	push	{r4, lr}
    d4ea:	460c      	mov	r4, r1
	struct bt_hci_cp_read_remote_version_info *cmd = (void *)buf->data;
    d4ec:	6883      	ldr	r3, [r0, #8]
	status = ll_version_ind_send(handle);
    d4ee:	8818      	ldrh	r0, [r3, #0]
    d4f0:	f00a ffc7 	bl	18482 <ll_version_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d4f4:	b100      	cbz	r0, d4f8 <read_remote_ver_info+0x10>
    d4f6:	200c      	movs	r0, #12
    d4f8:	f7ff fe52 	bl	d1a0 <cmd_status>
    d4fc:	6020      	str	r0, [r4, #0]
    d4fe:	bd10      	pop	{r4, pc}

0000d500 <link_control_cmd_handle>:
{
    d500:	b508      	push	{r3, lr}
    d502:	460b      	mov	r3, r1
	switch (ocf) {
    d504:	2806      	cmp	r0, #6
    d506:	d004      	beq.n	d512 <link_control_cmd_handle+0x12>
    d508:	281d      	cmp	r0, #29
    d50a:	d008      	beq.n	d51e <link_control_cmd_handle+0x1e>
		return -EINVAL;
    d50c:	f06f 0015 	mvn.w	r0, #21
}
    d510:	bd08      	pop	{r3, pc}
		disconnect(cmd, evt);
    d512:	4611      	mov	r1, r2
    d514:	4618      	mov	r0, r3
    d516:	f7ff fe5d 	bl	d1d4 <disconnect>
	return 0;
    d51a:	2000      	movs	r0, #0
		break;
    d51c:	bd08      	pop	{r3, pc}
		read_remote_ver_info(cmd, evt);
    d51e:	4611      	mov	r1, r2
    d520:	4618      	mov	r0, r3
    d522:	f7ff ffe1 	bl	d4e8 <read_remote_ver_info>
	return 0;
    d526:	2000      	movs	r0, #0
		break;
    d528:	bd08      	pop	{r3, pc}
	...

0000d52c <reset>:
{
    d52c:	b538      	push	{r3, r4, r5, lr}
	dup_count = -1;
    d52e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d532:	4b0f      	ldr	r3, [pc, #60]	; (d570 <reset+0x44>)
    d534:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    d536:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    d53a:	f641 75ff 	movw	r5, #8191	; 0x1fff
    d53e:	4b0d      	ldr	r3, [pc, #52]	; (d574 <reset+0x48>)
    d540:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d544:	2400      	movs	r4, #0
    d546:	2500      	movs	r5, #0
    d548:	4b0b      	ldr	r3, [pc, #44]	; (d578 <reset+0x4c>)
    d54a:	e9c3 4500 	strd	r4, r5, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d54e:	241f      	movs	r4, #31
    d550:	2500      	movs	r5, #0
    d552:	4b0a      	ldr	r3, [pc, #40]	; (d57c <reset+0x50>)
    d554:	e9c3 4500 	strd	r4, r5, [r3]
	if (buf) {
    d558:	b140      	cbz	r0, d56c <reset+0x40>
    d55a:	460c      	mov	r4, r1
		ll_reset();
    d55c:	f00a fc8c 	bl	17e78 <ll_reset>
		ccst = cmd_complete(evt, sizeof(*ccst));
    d560:	2101      	movs	r1, #1
    d562:	4620      	mov	r0, r4
    d564:	f7ff fe44 	bl	d1f0 <cmd_complete>
		ccst->status = 0x00;
    d568:	2300      	movs	r3, #0
    d56a:	7003      	strb	r3, [r0, #0]
    d56c:	bd38      	pop	{r3, r4, r5, pc}
    d56e:	bf00      	nop
    d570:	20000b40 	.word	0x20000b40
    d574:	2000bc60 	.word	0x2000bc60
    d578:	20000bc8 	.word	0x20000bc8
    d57c:	2000bc68 	.word	0x2000bc68

0000d580 <read_tx_power_level>:
{
    d580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d582:	460a      	mov	r2, r1
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    d584:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d586:	881d      	ldrh	r5, [r3, #0]
    d588:	b2ae      	uxth	r6, r5
	type = cmd->type;
    d58a:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    d58c:	2104      	movs	r1, #4
    d58e:	4610      	mov	r0, r2
    d590:	f7ff fe2e 	bl	d1f0 <cmd_complete>
    d594:	4604      	mov	r4, r0
	status = ll_tx_power_level_get(handle, type, &rp->tx_power_level);
    d596:	1cc2      	adds	r2, r0, #3
    d598:	4639      	mov	r1, r7
    d59a:	4630      	mov	r0, r6
    d59c:	f00a ff9d 	bl	184da <ll_tx_power_level_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d5a0:	b120      	cbz	r0, d5ac <read_tx_power_level+0x2c>
    d5a2:	2302      	movs	r3, #2
    d5a4:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d5a6:	f8a4 5001 	strh.w	r5, [r4, #1]
    d5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d5ac:	2300      	movs	r3, #0
    d5ae:	e7f9      	b.n	d5a4 <read_tx_power_level+0x24>

0000d5b0 <read_auth_payload_timeout>:
{
    d5b0:	b570      	push	{r4, r5, r6, lr}
    d5b2:	b082      	sub	sp, #8
    d5b4:	460e      	mov	r6, r1
	struct bt_hci_cp_read_auth_payload_timeout *cmd = (void *)buf->data;
    d5b6:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d5b8:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    d5ba:	f10d 0106 	add.w	r1, sp, #6
    d5be:	b2a0      	uxth	r0, r4
    d5c0:	f00a ff9a 	bl	184f8 <ll_apto_get>
    d5c4:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d5c6:	2105      	movs	r1, #5
    d5c8:	4630      	mov	r0, r6
    d5ca:	f7ff fe11 	bl	d1f0 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d5ce:	b14d      	cbz	r5, d5e4 <read_auth_payload_timeout+0x34>
    d5d0:	230c      	movs	r3, #12
    d5d2:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d5d4:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    d5d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d5dc:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    d5e0:	b002      	add	sp, #8
    d5e2:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d5e4:	2300      	movs	r3, #0
    d5e6:	e7f4      	b.n	d5d2 <read_auth_payload_timeout+0x22>

0000d5e8 <write_auth_payload_timeout>:
{
    d5e8:	b570      	push	{r4, r5, r6, lr}
    d5ea:	460e      	mov	r6, r1
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    d5ec:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d5ee:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    d5f0:	8859      	ldrh	r1, [r3, #2]
    d5f2:	b2a0      	uxth	r0, r4
    d5f4:	f00a ff9c 	bl	18530 <ll_apto_set>
    d5f8:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d5fa:	2103      	movs	r1, #3
    d5fc:	4630      	mov	r0, r6
    d5fe:	f7ff fdf7 	bl	d1f0 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d602:	b125      	cbz	r5, d60e <write_auth_payload_timeout+0x26>
    d604:	230c      	movs	r3, #12
    d606:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d608:	f8a0 4001 	strh.w	r4, [r0, #1]
    d60c:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d60e:	2300      	movs	r3, #0
    d610:	e7f9      	b.n	d606 <write_auth_payload_timeout+0x1e>

0000d612 <ctrl_bb_cmd_handle>:
{
    d612:	b508      	push	{r3, lr}
    d614:	460b      	mov	r3, r1
	switch (ocf) {
    d616:	282d      	cmp	r0, #45	; 0x2d
    d618:	d01f      	beq.n	d65a <ctrl_bb_cmd_handle+0x48>
    d61a:	d908      	bls.n	d62e <ctrl_bb_cmd_handle+0x1c>
    d61c:	287b      	cmp	r0, #123	; 0x7b
    d61e:	d022      	beq.n	d666 <ctrl_bb_cmd_handle+0x54>
    d620:	287c      	cmp	r0, #124	; 0x7c
    d622:	d026      	beq.n	d672 <ctrl_bb_cmd_handle+0x60>
    d624:	2863      	cmp	r0, #99	; 0x63
    d626:	d012      	beq.n	d64e <ctrl_bb_cmd_handle+0x3c>
		return -EINVAL;
    d628:	f06f 0015 	mvn.w	r0, #21
}
    d62c:	bd08      	pop	{r3, pc}
	switch (ocf) {
    d62e:	2801      	cmp	r0, #1
    d630:	d007      	beq.n	d642 <ctrl_bb_cmd_handle+0x30>
    d632:	2803      	cmp	r0, #3
    d634:	d1f8      	bne.n	d628 <ctrl_bb_cmd_handle+0x16>
		reset(cmd, evt);
    d636:	4611      	mov	r1, r2
    d638:	4618      	mov	r0, r3
    d63a:	f7ff ff77 	bl	d52c <reset>
	return 0;
    d63e:	2000      	movs	r0, #0
		break;
    d640:	bd08      	pop	{r3, pc}
		set_event_mask(cmd, evt);
    d642:	4611      	mov	r1, r2
    d644:	4618      	mov	r0, r3
    d646:	f7f7 fd13 	bl	5070 <set_event_mask>
	return 0;
    d64a:	2000      	movs	r0, #0
		break;
    d64c:	bd08      	pop	{r3, pc}
		set_event_mask_page_2(cmd, evt);
    d64e:	4611      	mov	r1, r2
    d650:	4618      	mov	r0, r3
    d652:	f7ff fded 	bl	d230 <set_event_mask_page_2>
	return 0;
    d656:	2000      	movs	r0, #0
		break;
    d658:	bd08      	pop	{r3, pc}
		read_tx_power_level(cmd, evt);
    d65a:	4611      	mov	r1, r2
    d65c:	4618      	mov	r0, r3
    d65e:	f7ff ff8f 	bl	d580 <read_tx_power_level>
	return 0;
    d662:	2000      	movs	r0, #0
		break;
    d664:	bd08      	pop	{r3, pc}
		read_auth_payload_timeout(cmd, evt);
    d666:	4611      	mov	r1, r2
    d668:	4618      	mov	r0, r3
    d66a:	f7ff ffa1 	bl	d5b0 <read_auth_payload_timeout>
	return 0;
    d66e:	2000      	movs	r0, #0
		break;
    d670:	bd08      	pop	{r3, pc}
		write_auth_payload_timeout(cmd, evt);
    d672:	4611      	mov	r1, r2
    d674:	4618      	mov	r0, r3
    d676:	f7ff ffb7 	bl	d5e8 <write_auth_payload_timeout>
	return 0;
    d67a:	2000      	movs	r0, #0
		break;
    d67c:	bd08      	pop	{r3, pc}

0000d67e <read_supported_commands>:
{
    d67e:	b510      	push	{r4, lr}
    d680:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d682:	2141      	movs	r1, #65	; 0x41
    d684:	f7ff fdb4 	bl	d1f0 <cmd_complete>
    d688:	4604      	mov	r4, r0
	rp->status = 0x00;
    d68a:	2100      	movs	r1, #0
    d68c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    d690:	2240      	movs	r2, #64	; 0x40
    d692:	f01c fd75 	bl	2a180 <memset>
	rp->commands[2] |= BIT(7);
    d696:	78e3      	ldrb	r3, [r4, #3]
    d698:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d69c:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    d69e:	79a3      	ldrb	r3, [r4, #6]
    d6a0:	f063 033f 	orn	r3, r3, #63	; 0x3f
    d6a4:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    d6a6:	7ae3      	ldrb	r3, [r4, #11]
    d6a8:	f043 0304 	orr.w	r3, r3, #4
    d6ac:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    d6ae:	7be3      	ldrb	r3, [r4, #15]
    d6b0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    d6b4:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    d6b6:	7c23      	ldrb	r3, [r4, #16]
    d6b8:	f043 0302 	orr.w	r3, r3, #2
    d6bc:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    d6be:	7de3      	ldrb	r3, [r4, #23]
    d6c0:	f043 0304 	orr.w	r3, r3, #4
    d6c4:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    d6c6:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[28] |= BIT(3);
    d6c8:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d6ca:	f062 0208 	orn	r2, r2, #8
    d6ce:	76a2      	strb	r2, [r4, #26]
	rp->commands[26] |= BIT(4) | BIT(5);
    d6d0:	22ff      	movs	r2, #255	; 0xff
    d6d2:	76e2      	strb	r2, [r4, #27]
	rp->commands[28] |= BIT(1) | BIT(2);
    d6d4:	f043 030f 	orr.w	r3, r3, #15
    d6d8:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    d6da:	7863      	ldrb	r3, [r4, #1]
    d6dc:	f043 0320 	orr.w	r3, r3, #32
    d6e0:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    d6e2:	7722      	strb	r2, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    d6e4:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
	rp->commands[32] |= BIT(4) | BIT(5);
    d6e8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    d6ec:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    d6f0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d6f4:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    d6f8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    d6fc:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    d700:	f040 0004 	orr.w	r0, r0, #4
    d704:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	rp->commands[33] |= BIT(6) | BIT(7);
    d708:	f061 010f 	orn	r1, r1, #15
    d70c:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(0);
    d710:	f042 02f9 	orr.w	r2, r2, #249	; 0xf9
    d714:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(3);
    d718:	f043 030f 	orr.w	r3, r3, #15
    d71c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[38] |= BIT(7);
    d720:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    d724:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d728:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    d72c:	bd10      	pop	{r4, pc}

0000d72e <read_local_features>:
{
    d72e:	b510      	push	{r4, lr}
    d730:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d732:	2109      	movs	r1, #9
    d734:	f7ff fd5c 	bl	d1f0 <cmd_complete>
    d738:	4604      	mov	r4, r0
	rp->status = 0x00;
    d73a:	2100      	movs	r1, #0
    d73c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d740:	2208      	movs	r2, #8
    d742:	f01c fd1d 	bl	2a180 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    d746:	2360      	movs	r3, #96	; 0x60
    d748:	7163      	strb	r3, [r4, #5]
    d74a:	bd10      	pop	{r4, pc}

0000d74c <le_read_local_features>:
{
    d74c:	b510      	push	{r4, lr}
    d74e:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d750:	2109      	movs	r1, #9
    d752:	f7ff fd4d 	bl	d1f0 <cmd_complete>
    d756:	4604      	mov	r4, r0
	rp->status = 0x00;
    d758:	2100      	movs	r1, #0
    d75a:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d75e:	2208      	movs	r2, #8
    d760:	f01c fd0e 	bl	2a180 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    d764:	23ff      	movs	r3, #255	; 0xff
    d766:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    d768:	2341      	movs	r3, #65	; 0x41
    d76a:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    d76c:	2301      	movs	r3, #1
    d76e:	70e3      	strb	r3, [r4, #3]
    d770:	bd10      	pop	{r4, pc}

0000d772 <vs_read_supported_commands>:
{
    d772:	b510      	push	{r4, lr}
    d774:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d776:	2141      	movs	r1, #65	; 0x41
    d778:	f7ff fd3a 	bl	d1f0 <cmd_complete>
    d77c:	4604      	mov	r4, r0
	rp->status = 0x00;
    d77e:	2100      	movs	r1, #0
    d780:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    d784:	2240      	movs	r2, #64	; 0x40
    d786:	f01c fcfb 	bl	2a180 <memset>
	rp->commands[0] |= BIT(0) | BIT(1) | BIT(2);
    d78a:	7863      	ldrb	r3, [r4, #1]
	rp->commands[0] |= BIT(5) | BIT(7);
    d78c:	f063 0358 	orn	r3, r3, #88	; 0x58
    d790:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    d792:	78a3      	ldrb	r3, [r4, #2]
    d794:	f043 0303 	orr.w	r3, r3, #3
    d798:	70a3      	strb	r3, [r4, #2]
    d79a:	bd10      	pop	{r4, pc}

0000d79c <vs_read_supported_features>:
{
    d79c:	b508      	push	{r3, lr}
    d79e:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d7a0:	2109      	movs	r1, #9
    d7a2:	f7ff fd25 	bl	d1f0 <cmd_complete>
	rp->status = 0x00;
    d7a6:	2100      	movs	r1, #0
    d7a8:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d7ac:	2208      	movs	r2, #8
    d7ae:	f01c fce7 	bl	2a180 <memset>
    d7b2:	bd08      	pop	{r3, pc}

0000d7b4 <vs_read_static_addrs>:
{
    d7b4:	b510      	push	{r4, lr}
    d7b6:	4608      	mov	r0, r1
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    d7b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d7bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    d7c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d7c4:	d00d      	beq.n	d7e2 <vs_read_static_addrs+0x2e>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    d7c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d7ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    d7ce:	f013 0f01 	tst.w	r3, #1
    d7d2:	d110      	bne.n	d7f6 <vs_read_static_addrs+0x42>
	rp = cmd_complete(evt, sizeof(*rp));
    d7d4:	2102      	movs	r1, #2
    d7d6:	f7ff fd0b 	bl	d1f0 <cmd_complete>
	rp->status = 0x00;
    d7da:	2300      	movs	r3, #0
    d7dc:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    d7de:	7043      	strb	r3, [r0, #1]
    d7e0:	bd10      	pop	{r4, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    d7e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d7e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    d7ea:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    d7ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d7f0:	4293      	cmp	r3, r2
    d7f2:	d1e8      	bne.n	d7c6 <vs_read_static_addrs+0x12>
    d7f4:	e7ee      	b.n	d7d4 <vs_read_static_addrs+0x20>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    d7f6:	2118      	movs	r1, #24
    d7f8:	f7ff fcfa 	bl	d1f0 <cmd_complete>
		rp->status = 0x00;
    d7fc:	2100      	movs	r1, #0
    d7fe:	7001      	strb	r1, [r0, #0]
		rp->num_addrs = 1;
    d800:	2301      	movs	r3, #1
    d802:	7043      	strb	r3, [r0, #1]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    d804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d808:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
    d80c:	7083      	strb	r3, [r0, #2]
	dst[1] = val >> 8;
    d80e:	f3c3 2407 	ubfx	r4, r3, #8, #8
    d812:	70c4      	strb	r4, [r0, #3]
	sys_put_le16(val >> 16, &dst[2]);
    d814:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d816:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    d818:	0a1b      	lsrs	r3, r3, #8
    d81a:	7143      	strb	r3, [r0, #5]
		sys_put_le16(NRF_FICR->DEVICEADDR[1] | 0x0200, &addr->bdaddr.val[4]);
    d81c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    d820:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    d824:	b29b      	uxth	r3, r3
	dst[0] = val;
    d826:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    d828:	0a1b      	lsrs	r3, r3, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    d82a:	f063 033f 	orn	r3, r3, #63	; 0x3f
    d82e:	71c3      	strb	r3, [r0, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    d830:	2210      	movs	r2, #16
    d832:	3008      	adds	r0, #8
    d834:	f01c fca4 	bl	2a180 <memset>
		return;
    d838:	bd10      	pop	{r4, pc}

0000d83a <vs_read_key_hierarchy_roots>:
{
    d83a:	b510      	push	{r4, lr}
    d83c:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d83e:	2121      	movs	r1, #33	; 0x21
    d840:	f7ff fcd6 	bl	d1f0 <cmd_complete>
    d844:	4604      	mov	r4, r0
	rp->status = 0x00;
    d846:	2300      	movs	r3, #0
    d848:	7003      	strb	r3, [r0, #0]
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    d84a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d84e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d856:	d03f      	beq.n	d8d8 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    d858:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d85c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    d860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d864:	d038      	beq.n	d8d8 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    d866:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d86a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    d86e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d872:	d031      	beq.n	d8d8 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    d874:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d878:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    d87c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d880:	d02a      	beq.n	d8d8 <vs_read_key_hierarchy_roots+0x9e>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    d882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d886:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
    d88a:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    d88c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d890:	7081      	strb	r1, [r0, #2]
	sys_put_le16(val >> 16, &dst[2]);
    d892:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d894:	70c3      	strb	r3, [r0, #3]
	dst[1] = val >> 8;
    d896:	0a1b      	lsrs	r3, r3, #8
    d898:	7103      	strb	r3, [r0, #4]
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    d89a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
    d89e:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    d8a0:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d8a4:	7181      	strb	r1, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
    d8a6:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d8a8:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    d8aa:	0a1b      	lsrs	r3, r3, #8
    d8ac:	7203      	strb	r3, [r0, #8]
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    d8ae:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
    d8b2:	7243      	strb	r3, [r0, #9]
	dst[1] = val >> 8;
    d8b4:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d8b8:	7281      	strb	r1, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
    d8ba:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d8bc:	72c3      	strb	r3, [r0, #11]
	dst[1] = val >> 8;
    d8be:	0a1b      	lsrs	r3, r3, #8
    d8c0:	7303      	strb	r3, [r0, #12]
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    d8c2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
    d8c6:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    d8c8:	f3c3 2207 	ubfx	r2, r3, #8, #8
    d8cc:	7382      	strb	r2, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
    d8ce:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d8d0:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    d8d2:	0a1b      	lsrs	r3, r3, #8
    d8d4:	7403      	strb	r3, [r0, #16]
    d8d6:	e004      	b.n	d8e2 <vs_read_key_hierarchy_roots+0xa8>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    d8d8:	2210      	movs	r2, #16
    d8da:	2100      	movs	r1, #0
    d8dc:	1c60      	adds	r0, r4, #1
    d8de:	f01c fc4f 	bl	2a180 <memset>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    d8e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d8e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    d8ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d8ee:	d040      	beq.n	d972 <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    d8f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d8f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    d8f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d8fc:	d039      	beq.n	d972 <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    d8fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    d906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d90a:	d032      	beq.n	d972 <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    d90c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    d914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d918:	d02b      	beq.n	d972 <vs_read_key_hierarchy_roots+0x138>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    d91a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d91e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
    d922:	7463      	strb	r3, [r4, #17]
	dst[1] = val >> 8;
    d924:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d928:	74a1      	strb	r1, [r4, #18]
	sys_put_le16(val >> 16, &dst[2]);
    d92a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d92c:	74e3      	strb	r3, [r4, #19]
	dst[1] = val >> 8;
    d92e:	0a1b      	lsrs	r3, r3, #8
    d930:	7523      	strb	r3, [r4, #20]
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    d932:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
    d936:	7563      	strb	r3, [r4, #21]
	dst[1] = val >> 8;
    d938:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d93c:	75a1      	strb	r1, [r4, #22]
	sys_put_le16(val >> 16, &dst[2]);
    d93e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d940:	75e3      	strb	r3, [r4, #23]
	dst[1] = val >> 8;
    d942:	0a1b      	lsrs	r3, r3, #8
    d944:	7623      	strb	r3, [r4, #24]
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    d946:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
    d94a:	7663      	strb	r3, [r4, #25]
	dst[1] = val >> 8;
    d94c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d950:	76a1      	strb	r1, [r4, #26]
	sys_put_le16(val >> 16, &dst[2]);
    d952:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d954:	76e3      	strb	r3, [r4, #27]
	dst[1] = val >> 8;
    d956:	0a1b      	lsrs	r3, r3, #8
    d958:	7723      	strb	r3, [r4, #28]
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    d95a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
    d95e:	7763      	strb	r3, [r4, #29]
	dst[1] = val >> 8;
    d960:	f3c3 2207 	ubfx	r2, r3, #8, #8
    d964:	77a2      	strb	r2, [r4, #30]
	sys_put_le16(val >> 16, &dst[2]);
    d966:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d968:	77e3      	strb	r3, [r4, #31]
	dst[1] = val >> 8;
    d96a:	0a1b      	lsrs	r3, r3, #8
    d96c:	f884 3020 	strb.w	r3, [r4, #32]
    d970:	bd10      	pop	{r4, pc}
		memset(rp->er, 0x00, sizeof(rp->er));
    d972:	2210      	movs	r2, #16
    d974:	2100      	movs	r1, #0
    d976:	f104 0011 	add.w	r0, r4, #17
    d97a:	f01c fc01 	bl	2a180 <memset>
    d97e:	bd10      	pop	{r4, pc}

0000d980 <read_bd_addr>:
{
    d980:	b508      	push	{r3, lr}
    d982:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d984:	2107      	movs	r1, #7
    d986:	f7ff fc33 	bl	d1f0 <cmd_complete>
	rp->status = 0x00;
    d98a:	2300      	movs	r3, #0
    d98c:	4601      	mov	r1, r0
    d98e:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    d992:	4618      	mov	r0, r3
    d994:	f00b fd64 	bl	19460 <ll_addr_get>
    d998:	bd08      	pop	{r3, pc}

0000d99a <info_cmd_handle>:
{
    d99a:	b508      	push	{r3, lr}
    d99c:	460b      	mov	r3, r1
	switch (ocf) {
    d99e:	3801      	subs	r0, #1
    d9a0:	2808      	cmp	r0, #8
    d9a2:	d81e      	bhi.n	d9e2 <info_cmd_handle+0x48>
    d9a4:	e8df f000 	tbb	[pc, r0]
    d9a8:	1d110b05 	.word	0x1d110b05
    d9ac:	1d1d1d1d 	.word	0x1d1d1d1d
    d9b0:	17          	.byte	0x17
    d9b1:	00          	.byte	0x00
		read_local_version_info(cmd, evt);
    d9b2:	4611      	mov	r1, r2
    d9b4:	4618      	mov	r0, r3
    d9b6:	f7ff fc61 	bl	d27c <read_local_version_info>
	return 0;
    d9ba:	2000      	movs	r0, #0
		break;
    d9bc:	bd08      	pop	{r3, pc}
		read_supported_commands(cmd, evt);
    d9be:	4611      	mov	r1, r2
    d9c0:	4618      	mov	r0, r3
    d9c2:	f7ff fe5c 	bl	d67e <read_supported_commands>
	return 0;
    d9c6:	2000      	movs	r0, #0
		break;
    d9c8:	bd08      	pop	{r3, pc}
		read_local_features(cmd, evt);
    d9ca:	4611      	mov	r1, r2
    d9cc:	4618      	mov	r0, r3
    d9ce:	f7ff feae 	bl	d72e <read_local_features>
	return 0;
    d9d2:	2000      	movs	r0, #0
		break;
    d9d4:	bd08      	pop	{r3, pc}
		read_bd_addr(cmd, evt);
    d9d6:	4611      	mov	r1, r2
    d9d8:	4618      	mov	r0, r3
    d9da:	f7ff ffd1 	bl	d980 <read_bd_addr>
	return 0;
    d9de:	2000      	movs	r0, #0
		break;
    d9e0:	bd08      	pop	{r3, pc}
		return -EINVAL;
    d9e2:	f06f 0015 	mvn.w	r0, #21
}
    d9e6:	bd08      	pop	{r3, pc}

0000d9e8 <le_set_random_address>:
{
    d9e8:	b510      	push	{r4, lr}
    d9ea:	460c      	mov	r4, r1
	ll_addr_set(1, &cmd->bdaddr.val[0]);
    d9ec:	6881      	ldr	r1, [r0, #8]
    d9ee:	2001      	movs	r0, #1
    d9f0:	f00b fd58 	bl	194a4 <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d9f4:	2101      	movs	r1, #1
    d9f6:	4620      	mov	r0, r4
    d9f8:	f7ff fbfa 	bl	d1f0 <cmd_complete>
	ccst->status = 0x00;
    d9fc:	2300      	movs	r3, #0
    d9fe:	7003      	strb	r3, [r0, #0]
    da00:	bd10      	pop	{r4, pc}

0000da02 <vs_write_bd_addr>:
{
    da02:	b510      	push	{r4, lr}
    da04:	460c      	mov	r4, r1
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    da06:	6881      	ldr	r1, [r0, #8]
    da08:	2000      	movs	r0, #0
    da0a:	f00b fd4b 	bl	194a4 <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    da0e:	2101      	movs	r1, #1
    da10:	4620      	mov	r0, r4
    da12:	f7ff fbed 	bl	d1f0 <cmd_complete>
	ccst->status = 0x00;
    da16:	2300      	movs	r3, #0
    da18:	7003      	strb	r3, [r0, #0]
    da1a:	bd10      	pop	{r4, pc}

0000da1c <le_read_wl_size>:
{
    da1c:	b510      	push	{r4, lr}
    da1e:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    da20:	2102      	movs	r1, #2
    da22:	f7ff fbe5 	bl	d1f0 <cmd_complete>
    da26:	4604      	mov	r4, r0
	rp->status = 0x00;
    da28:	2300      	movs	r3, #0
    da2a:	7003      	strb	r3, [r0, #0]
	rp->wl_size = ll_wl_size_get();
    da2c:	f00b ff3a 	bl	198a4 <ll_wl_size_get>
    da30:	7060      	strb	r0, [r4, #1]
    da32:	bd10      	pop	{r4, pc}

0000da34 <le_clear_wl>:
{
    da34:	b510      	push	{r4, lr}
    da36:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    da38:	2101      	movs	r1, #1
    da3a:	f7ff fbd9 	bl	d1f0 <cmd_complete>
    da3e:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    da40:	f00b ff32 	bl	198a8 <ll_wl_clear>
    da44:	7020      	strb	r0, [r4, #0]
    da46:	bd10      	pop	{r4, pc}

0000da48 <le_add_dev_to_wl>:
{
    da48:	b538      	push	{r3, r4, r5, lr}
    da4a:	460d      	mov	r5, r1
	status = ll_wl_add(&cmd->addr);
    da4c:	6880      	ldr	r0, [r0, #8]
    da4e:	f00c f81d 	bl	19a8c <ll_wl_add>
    da52:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    da54:	2101      	movs	r1, #1
    da56:	4628      	mov	r0, r5
    da58:	f7ff fbca 	bl	d1f0 <cmd_complete>
	ccst->status = status;
    da5c:	7004      	strb	r4, [r0, #0]
    da5e:	bd38      	pop	{r3, r4, r5, pc}

0000da60 <le_rem_dev_from_wl>:
{
    da60:	b538      	push	{r3, r4, r5, lr}
    da62:	460d      	mov	r5, r1
	status = ll_wl_remove(&cmd->addr);
    da64:	6880      	ldr	r0, [r0, #8]
    da66:	f00b ff35 	bl	198d4 <ll_wl_remove>
    da6a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    da6c:	2101      	movs	r1, #1
    da6e:	4628      	mov	r0, r5
    da70:	f7ff fbbe 	bl	d1f0 <cmd_complete>
	ccst->status = status;
    da74:	7004      	strb	r4, [r0, #0]
    da76:	bd38      	pop	{r3, r4, r5, pc}

0000da78 <le_encrypt>:
{
    da78:	b510      	push	{r4, lr}
    da7a:	b084      	sub	sp, #16
    da7c:	460c      	mov	r4, r1
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    da7e:	6880      	ldr	r0, [r0, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    da80:	2300      	movs	r3, #0
    da82:	466a      	mov	r2, sp
    da84:	f100 0110 	add.w	r1, r0, #16
    da88:	f001 fc9e 	bl	f3c8 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    da8c:	2111      	movs	r1, #17
    da8e:	4620      	mov	r0, r4
    da90:	f7ff fbae 	bl	d1f0 <cmd_complete>
	rp->status = 0x00;
    da94:	2300      	movs	r3, #0
    da96:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    da9a:	2210      	movs	r2, #16
    da9c:	4669      	mov	r1, sp
    da9e:	f7f2 fc0f 	bl	2c0 <memcpy>
}
    daa2:	b004      	add	sp, #16
    daa4:	bd10      	pop	{r4, pc}
	...

0000daa8 <vs_read_build_info>:
{
    daa8:	b570      	push	{r4, r5, r6, lr}
    daaa:	b08a      	sub	sp, #40	; 0x28
    daac:	460e      	mov	r6, r1
	const char build_info[] = HCI_VS_BUILD_INFO;
    daae:	466c      	mov	r4, sp
    dab0:	4d0c      	ldr	r5, [pc, #48]	; (dae4 <vs_read_build_info+0x3c>)
    dab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    dab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    dab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    dab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    daba:	e895 0003 	ldmia.w	r5, {r0, r1}
    dabe:	f844 0b04 	str.w	r0, [r4], #4
    dac2:	f824 1b02 	strh.w	r1, [r4], #2
    dac6:	0c09      	lsrs	r1, r1, #16
    dac8:	7021      	strb	r1, [r4, #0]
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    daca:	2128      	movs	r1, #40	; 0x28
    dacc:	4630      	mov	r0, r6
    dace:	f7ff fb8f 	bl	d1f0 <cmd_complete>
	rp->status = 0x00;
    dad2:	2300      	movs	r3, #0
    dad4:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    dad8:	2227      	movs	r2, #39	; 0x27
    dada:	4669      	mov	r1, sp
    dadc:	f7f2 fbf0 	bl	2c0 <memcpy>
}
    dae0:	b00a      	add	sp, #40	; 0x28
    dae2:	bd70      	pop	{r4, r5, r6, pc}
    dae4:	00030fd8 	.word	0x00030fd8

0000dae8 <vendor_cmd_handle>:
{
    dae8:	b508      	push	{r3, lr}
    daea:	460b      	mov	r3, r1
	switch (ocf) {
    daec:	3801      	subs	r0, #1
    daee:	2809      	cmp	r0, #9
    daf0:	d830      	bhi.n	db54 <vendor_cmd_handle+0x6c>
    daf2:	e8df f000 	tbb	[pc, r0]
    daf6:	0b05      	.short	0x0b05
    daf8:	1d2f2f11 	.word	0x1d2f2f11
    dafc:	2923172f 	.word	0x2923172f
		vs_read_version_info(cmd, evt);
    db00:	4611      	mov	r1, r2
    db02:	4618      	mov	r0, r3
    db04:	f7ff fbf6 	bl	d2f4 <vs_read_version_info>
	return 0;
    db08:	2000      	movs	r0, #0
		break;
    db0a:	bd08      	pop	{r3, pc}
		vs_read_supported_commands(cmd, evt);
    db0c:	4611      	mov	r1, r2
    db0e:	4618      	mov	r0, r3
    db10:	f7ff fe2f 	bl	d772 <vs_read_supported_commands>
	return 0;
    db14:	2000      	movs	r0, #0
		break;
    db16:	bd08      	pop	{r3, pc}
		vs_read_supported_features(cmd, evt);
    db18:	4611      	mov	r1, r2
    db1a:	4618      	mov	r0, r3
    db1c:	f7ff fe3e 	bl	d79c <vs_read_supported_features>
	return 0;
    db20:	2000      	movs	r0, #0
		break;
    db22:	bd08      	pop	{r3, pc}
		vs_read_build_info(cmd, evt);
    db24:	4611      	mov	r1, r2
    db26:	4618      	mov	r0, r3
    db28:	f7ff ffbe 	bl	daa8 <vs_read_build_info>
	return 0;
    db2c:	2000      	movs	r0, #0
		break;
    db2e:	bd08      	pop	{r3, pc}
		vs_write_bd_addr(cmd, evt);
    db30:	4611      	mov	r1, r2
    db32:	4618      	mov	r0, r3
    db34:	f7ff ff65 	bl	da02 <vs_write_bd_addr>
	return 0;
    db38:	2000      	movs	r0, #0
		break;
    db3a:	bd08      	pop	{r3, pc}
		vs_read_static_addrs(cmd, evt);
    db3c:	4611      	mov	r1, r2
    db3e:	4618      	mov	r0, r3
    db40:	f7ff fe38 	bl	d7b4 <vs_read_static_addrs>
	return 0;
    db44:	2000      	movs	r0, #0
		break;
    db46:	bd08      	pop	{r3, pc}
		vs_read_key_hierarchy_roots(cmd, evt);
    db48:	4611      	mov	r1, r2
    db4a:	4618      	mov	r0, r3
    db4c:	f7ff fe75 	bl	d83a <vs_read_key_hierarchy_roots>
	return 0;
    db50:	2000      	movs	r0, #0
		break;
    db52:	bd08      	pop	{r3, pc}
		return -EINVAL;
    db54:	f06f 0015 	mvn.w	r0, #21
}
    db58:	bd08      	pop	{r3, pc}

0000db5a <le_unknown_rsp>:
{
    db5a:	b508      	push	{r3, lr}
	switch (pdu_data->payload.llctrl.ctrldata.unknown_rsp.type) {
    db5c:	7903      	ldrb	r3, [r0, #4]
    db5e:	2b0e      	cmp	r3, #14
    db60:	d000      	beq.n	db64 <le_unknown_rsp+0xa>
    db62:	bd08      	pop	{r3, pc}
    db64:	4613      	mov	r3, r2
    db66:	460a      	mov	r2, r1
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    db68:	2100      	movs	r1, #0
    db6a:	201a      	movs	r0, #26
    db6c:	f7f8 f966 	bl	5e3c <le_remote_feat_complete>
}
    db70:	e7f7      	b.n	db62 <le_unknown_rsp+0x8>

0000db72 <le_rand>:
{
    db72:	b508      	push	{r3, lr}
    db74:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    db76:	2109      	movs	r1, #9
    db78:	f7ff fb3a 	bl	d1f0 <cmd_complete>
	rp->status = 0x00;
    db7c:	2300      	movs	r3, #0
    db7e:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    db82:	2108      	movs	r1, #8
    db84:	f003 fcb4 	bl	114f0 <bt_rand>
    db88:	bd08      	pop	{r3, pc}

0000db8a <le_set_adv_param>:
{
    db8a:	b570      	push	{r4, r5, r6, lr}
    db8c:	b08c      	sub	sp, #48	; 0x30
    db8e:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
    db90:	6881      	ldr	r1, [r0, #8]
	min_interval = sys_le16_to_cpu(cmd->min_interval);
    db92:	460c      	mov	r4, r1
    db94:	f834 2b07 	ldrh.w	r2, [r4], #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    db98:	790b      	ldrb	r3, [r1, #4]
    db9a:	2000      	movs	r0, #0
    db9c:	900a      	str	r0, [sp, #40]	; 0x28
    db9e:	9009      	str	r0, [sp, #36]	; 0x24
    dba0:	9008      	str	r0, [sp, #32]
    dba2:	9007      	str	r0, [sp, #28]
    dba4:	9006      	str	r0, [sp, #24]
    dba6:	9005      	str	r0, [sp, #20]
    dba8:	7b8e      	ldrb	r6, [r1, #14]
    dbaa:	9604      	str	r6, [sp, #16]
    dbac:	7b4e      	ldrb	r6, [r1, #13]
    dbae:	9603      	str	r6, [sp, #12]
    dbb0:	9402      	str	r4, [sp, #8]
    dbb2:	798c      	ldrb	r4, [r1, #6]
    dbb4:	9401      	str	r4, [sp, #4]
    dbb6:	7949      	ldrb	r1, [r1, #5]
    dbb8:	9100      	str	r1, [sp, #0]
    dbba:	4601      	mov	r1, r0
    dbbc:	f00c fc42 	bl	1a444 <ll_adv_params_set>
    dbc0:	b2c4      	uxtb	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dbc2:	2101      	movs	r1, #1
    dbc4:	4628      	mov	r0, r5
    dbc6:	f7ff fb13 	bl	d1f0 <cmd_complete>
	ccst->status = status;
    dbca:	7004      	strb	r4, [r0, #0]
}
    dbcc:	b00c      	add	sp, #48	; 0x30
    dbce:	bd70      	pop	{r4, r5, r6, pc}

0000dbd0 <le_set_adv_data>:
{
    dbd0:	b510      	push	{r4, lr}
    dbd2:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *cmd = (void *)buf->data;
    dbd4:	6883      	ldr	r3, [r0, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    dbd6:	1c59      	adds	r1, r3, #1
    dbd8:	7818      	ldrb	r0, [r3, #0]
    dbda:	f00c fd57 	bl	1a68c <ll_adv_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    dbde:	2101      	movs	r1, #1
    dbe0:	4620      	mov	r0, r4
    dbe2:	f7ff fb05 	bl	d1f0 <cmd_complete>
	ccst->status = 0x00;
    dbe6:	2300      	movs	r3, #0
    dbe8:	7003      	strb	r3, [r0, #0]
    dbea:	bd10      	pop	{r4, pc}

0000dbec <le_set_scan_rsp_data>:
{
    dbec:	b510      	push	{r4, lr}
    dbee:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_scan_rsp_data *cmd = (void *)buf->data;
    dbf0:	6883      	ldr	r3, [r0, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    dbf2:	1c59      	adds	r1, r3, #1
    dbf4:	7818      	ldrb	r0, [r3, #0]
    dbf6:	f00c fda2 	bl	1a73e <ll_scan_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    dbfa:	2101      	movs	r1, #1
    dbfc:	4620      	mov	r0, r4
    dbfe:	f7ff faf7 	bl	d1f0 <cmd_complete>
	ccst->status = 0x00;
    dc02:	2300      	movs	r3, #0
    dc04:	7003      	strb	r3, [r0, #0]
    dc06:	bd10      	pop	{r4, pc}

0000dc08 <le_set_adv_enable>:
{
    dc08:	b538      	push	{r3, r4, r5, lr}
    dc0a:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
    dc0c:	6883      	ldr	r3, [r0, #8]
	status = ll_adv_enable(cmd->enable);
    dc0e:	7818      	ldrb	r0, [r3, #0]
    dc10:	f00c fdda 	bl	1a7c8 <ll_adv_enable>
    dc14:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dc16:	2101      	movs	r1, #1
    dc18:	4628      	mov	r0, r5
    dc1a:	f7ff fae9 	bl	d1f0 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dc1e:	b114      	cbz	r4, dc26 <le_set_adv_enable+0x1e>
    dc20:	230c      	movs	r3, #12
    dc22:	7003      	strb	r3, [r0, #0]
    dc24:	bd38      	pop	{r3, r4, r5, pc}
    dc26:	2300      	movs	r3, #0
    dc28:	e7fb      	b.n	dc22 <le_set_adv_enable+0x1a>

0000dc2a <le_set_scan_param>:
{
    dc2a:	b530      	push	{r4, r5, lr}
    dc2c:	b083      	sub	sp, #12
    dc2e:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
    dc30:	6884      	ldr	r4, [r0, #8]
	interval = sys_le16_to_cpu(cmd->interval);
    dc32:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	window = sys_le16_to_cpu(cmd->window);
    dc36:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    dc3a:	7820      	ldrb	r0, [r4, #0]
    dc3c:	7963      	ldrb	r3, [r4, #5]
    dc3e:	79a4      	ldrb	r4, [r4, #6]
    dc40:	9400      	str	r4, [sp, #0]
    dc42:	f00c fe53 	bl	1a8ec <ll_scan_params_set>
    dc46:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dc48:	2101      	movs	r1, #1
    dc4a:	4628      	mov	r0, r5
    dc4c:	f7ff fad0 	bl	d1f0 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dc50:	b11c      	cbz	r4, dc5a <le_set_scan_param+0x30>
    dc52:	230c      	movs	r3, #12
    dc54:	7003      	strb	r3, [r0, #0]
}
    dc56:	b003      	add	sp, #12
    dc58:	bd30      	pop	{r4, r5, pc}
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dc5a:	2300      	movs	r3, #0
    dc5c:	e7fa      	b.n	dc54 <le_set_scan_param+0x2a>
	...

0000dc60 <le_set_scan_enable>:
{
    dc60:	b538      	push	{r3, r4, r5, lr}
    dc62:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
    dc64:	6883      	ldr	r3, [r0, #8]
	if (cmd->enable && cmd->filter_dup) {
    dc66:	781a      	ldrb	r2, [r3, #0]
    dc68:	b13a      	cbz	r2, dc7a <le_set_scan_enable+0x1a>
    dc6a:	785a      	ldrb	r2, [r3, #1]
    dc6c:	b12a      	cbz	r2, dc7a <le_set_scan_enable+0x1a>
		dup_count = 0;
    dc6e:	2200      	movs	r2, #0
    dc70:	490b      	ldr	r1, [pc, #44]	; (dca0 <le_set_scan_enable+0x40>)
    dc72:	600a      	str	r2, [r1, #0]
		dup_curr = 0;
    dc74:	490b      	ldr	r1, [pc, #44]	; (dca4 <le_set_scan_enable+0x44>)
    dc76:	600a      	str	r2, [r1, #0]
    dc78:	e003      	b.n	dc82 <le_set_scan_enable+0x22>
		dup_count = -1;
    dc7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    dc7e:	4a08      	ldr	r2, [pc, #32]	; (dca0 <le_set_scan_enable+0x40>)
    dc80:	6011      	str	r1, [r2, #0]
	status = ll_scan_enable(cmd->enable);
    dc82:	7818      	ldrb	r0, [r3, #0]
    dc84:	f00c fe4e 	bl	1a924 <ll_scan_enable>
    dc88:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dc8a:	2101      	movs	r1, #1
    dc8c:	4628      	mov	r0, r5
    dc8e:	f7ff faaf 	bl	d1f0 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dc92:	b114      	cbz	r4, dc9a <le_set_scan_enable+0x3a>
    dc94:	230c      	movs	r3, #12
    dc96:	7003      	strb	r3, [r0, #0]
    dc98:	bd38      	pop	{r3, r4, r5, pc}
    dc9a:	2300      	movs	r3, #0
    dc9c:	e7fb      	b.n	dc96 <le_set_scan_enable+0x36>
    dc9e:	bf00      	nop
    dca0:	20000b40 	.word	0x20000b40
    dca4:	20000b44 	.word	0x20000b44

0000dca8 <le_create_connection>:
{
    dca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcaa:	b087      	sub	sp, #28
    dcac:	460d      	mov	r5, r1
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
    dcae:	6884      	ldr	r4, [r0, #8]
	scan_interval = sys_le16_to_cpu(cmd->scan_interval);
    dcb0:	8820      	ldrh	r0, [r4, #0]
	scan_window = sys_le16_to_cpu(cmd->scan_window);
    dcb2:	8861      	ldrh	r1, [r4, #2]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    dcb4:	f8b4 700f 	ldrh.w	r7, [r4, #15]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    dcb8:	f8b4 e011 	ldrh.w	lr, [r4, #17]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    dcbc:	f8b4 c013 	ldrh.w	ip, [r4, #19]
	status = ll_create_connection(scan_interval, scan_window,
    dcc0:	7922      	ldrb	r2, [r4, #4]
    dcc2:	7963      	ldrb	r3, [r4, #5]
    dcc4:	1da6      	adds	r6, r4, #6
    dcc6:	7b24      	ldrb	r4, [r4, #12]
    dcc8:	f8cd c010 	str.w	ip, [sp, #16]
    dccc:	f8cd e00c 	str.w	lr, [sp, #12]
    dcd0:	9702      	str	r7, [sp, #8]
    dcd2:	9401      	str	r4, [sp, #4]
    dcd4:	9600      	str	r6, [sp, #0]
    dcd6:	f00c fe65 	bl	1a9a4 <ll_create_connection>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    dcda:	b100      	cbz	r0, dcde <le_create_connection+0x36>
    dcdc:	200c      	movs	r0, #12
    dcde:	f7ff fa5f 	bl	d1a0 <cmd_status>
    dce2:	6028      	str	r0, [r5, #0]
}
    dce4:	b007      	add	sp, #28
    dce6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000dce8 <le_create_conn_cancel>:
{
    dce8:	b538      	push	{r3, r4, r5, lr}
    dcea:	460d      	mov	r5, r1
	status = ll_connect_disable();
    dcec:	f00b fa00 	bl	190f0 <ll_connect_disable>
    dcf0:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dcf2:	2101      	movs	r1, #1
    dcf4:	4628      	mov	r0, r5
    dcf6:	f7ff fa7b 	bl	d1f0 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dcfa:	b114      	cbz	r4, dd02 <le_create_conn_cancel+0x1a>
    dcfc:	230c      	movs	r3, #12
    dcfe:	7003      	strb	r3, [r0, #0]
    dd00:	bd38      	pop	{r3, r4, r5, pc}
    dd02:	2300      	movs	r3, #0
    dd04:	e7fb      	b.n	dcfe <le_create_conn_cancel+0x16>

0000dd06 <le_set_host_chan_classif>:
{
    dd06:	b538      	push	{r3, r4, r5, lr}
    dd08:	460d      	mov	r5, r1
	status = ll_chm_update(&cmd->ch_map[0]);
    dd0a:	6880      	ldr	r0, [r0, #8]
    dd0c:	f00a fb08 	bl	18320 <ll_chm_update>
    dd10:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dd12:	2101      	movs	r1, #1
    dd14:	4628      	mov	r0, r5
    dd16:	f7ff fa6b 	bl	d1f0 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dd1a:	b114      	cbz	r4, dd22 <le_set_host_chan_classif+0x1c>
    dd1c:	230c      	movs	r3, #12
    dd1e:	7003      	strb	r3, [r0, #0]
    dd20:	bd38      	pop	{r3, r4, r5, pc}
    dd22:	2300      	movs	r3, #0
    dd24:	e7fb      	b.n	dd1e <le_set_host_chan_classif+0x18>

0000dd26 <le_start_encryption>:
{
    dd26:	b510      	push	{r4, lr}
    dd28:	460c      	mov	r4, r1
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
    dd2a:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    dd2c:	4611      	mov	r1, r2
    dd2e:	f831 0b02 	ldrh.w	r0, [r1], #2
	status = ll_enc_req_send(handle,
    dd32:	f102 030c 	add.w	r3, r2, #12
    dd36:	320a      	adds	r2, #10
    dd38:	f00a fe2c 	bl	18994 <ll_enc_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    dd3c:	b100      	cbz	r0, dd40 <le_start_encryption+0x1a>
    dd3e:	200c      	movs	r0, #12
    dd40:	f7ff fa2e 	bl	d1a0 <cmd_status>
    dd44:	6020      	str	r0, [r4, #0]
    dd46:	bd10      	pop	{r4, pc}

0000dd48 <le_ltk_req_reply>:
{
    dd48:	b570      	push	{r4, r5, r6, lr}
    dd4a:	460e      	mov	r6, r1
	handle = sys_le16_to_cpu(cmd->handle);
    dd4c:	6882      	ldr	r2, [r0, #8]
    dd4e:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    dd52:	2100      	movs	r1, #0
    dd54:	b2a0      	uxth	r0, r4
    dd56:	f00a fb36 	bl	183c6 <ll_start_enc_req_send>
    dd5a:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    dd5c:	2103      	movs	r1, #3
    dd5e:	4630      	mov	r0, r6
    dd60:	f7ff fa46 	bl	d1f0 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dd64:	b125      	cbz	r5, dd70 <le_ltk_req_reply+0x28>
    dd66:	230c      	movs	r3, #12
    dd68:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    dd6a:	f8a0 4001 	strh.w	r4, [r0, #1]
    dd6e:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dd70:	2300      	movs	r3, #0
    dd72:	e7f9      	b.n	dd68 <le_ltk_req_reply+0x20>

0000dd74 <le_ltk_req_neg_reply>:
{
    dd74:	b570      	push	{r4, r5, r6, lr}
    dd76:	460e      	mov	r6, r1
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
    dd78:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    dd7a:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    dd7c:	2200      	movs	r2, #0
    dd7e:	2106      	movs	r1, #6
    dd80:	b2a0      	uxth	r0, r4
    dd82:	f00a fb20 	bl	183c6 <ll_start_enc_req_send>
    dd86:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    dd88:	2103      	movs	r1, #3
    dd8a:	4630      	mov	r0, r6
    dd8c:	f7ff fa30 	bl	d1f0 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dd90:	b125      	cbz	r5, dd9c <le_ltk_req_neg_reply+0x28>
    dd92:	230c      	movs	r3, #12
    dd94:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_le16_to_cpu(handle);
    dd96:	f8a0 4001 	strh.w	r4, [r0, #1]
    dd9a:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dd9c:	2300      	movs	r3, #0
    dd9e:	e7f9      	b.n	dd94 <le_ltk_req_neg_reply+0x20>

0000dda0 <le_read_chan_map>:
{
    dda0:	b570      	push	{r4, r5, r6, lr}
    dda2:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_chan_map *cmd = (void *)buf->data;
    dda4:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    dda6:	8815      	ldrh	r5, [r2, #0]
    dda8:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    ddaa:	2108      	movs	r1, #8
    ddac:	4618      	mov	r0, r3
    ddae:	f7ff fa1f 	bl	d1f0 <cmd_complete>
    ddb2:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    ddb4:	1cc1      	adds	r1, r0, #3
    ddb6:	4630      	mov	r0, r6
    ddb8:	f00a faf0 	bl	1839c <ll_chm_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    ddbc:	b120      	cbz	r0, ddc8 <le_read_chan_map+0x28>
    ddbe:	2302      	movs	r3, #2
    ddc0:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    ddc2:	f8a4 5001 	strh.w	r5, [r4, #1]
    ddc6:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    ddc8:	2300      	movs	r3, #0
    ddca:	e7f9      	b.n	ddc0 <le_read_chan_map+0x20>

0000ddcc <le_read_remote_features>:
{
    ddcc:	b510      	push	{r4, lr}
    ddce:	460c      	mov	r4, r1
	struct bt_hci_cp_le_read_remote_features *cmd = (void *)buf->data;
    ddd0:	6883      	ldr	r3, [r0, #8]
	status = ll_feature_req_send(handle);
    ddd2:	8818      	ldrh	r0, [r3, #0]
    ddd4:	f00a fb3f 	bl	18456 <ll_feature_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    ddd8:	b100      	cbz	r0, dddc <le_read_remote_features+0x10>
    ddda:	200c      	movs	r0, #12
    dddc:	f7ff f9e0 	bl	d1a0 <cmd_status>
    dde0:	6020      	str	r0, [r4, #0]
    dde2:	bd10      	pop	{r4, pc}

0000dde4 <le_conn_param_req_neg_reply>:
{
    dde4:	b570      	push	{r4, r5, r6, lr}
    dde6:	b082      	sub	sp, #8
    dde8:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    ddea:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    ddec:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    ddee:	789a      	ldrb	r2, [r3, #2]
    ddf0:	2300      	movs	r3, #0
    ddf2:	9301      	str	r3, [sp, #4]
    ddf4:	9300      	str	r3, [sp, #0]
    ddf6:	2102      	movs	r1, #2
    ddf8:	b2a0      	uxth	r0, r4
    ddfa:	f00a fa01 	bl	18200 <ll_conn_update>
    ddfe:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    de00:	2103      	movs	r1, #3
    de02:	4630      	mov	r0, r6
    de04:	f7ff f9f4 	bl	d1f0 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    de08:	b12d      	cbz	r5, de16 <le_conn_param_req_neg_reply+0x32>
    de0a:	230c      	movs	r3, #12
    de0c:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    de0e:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    de12:	b002      	add	sp, #8
    de14:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    de16:	2300      	movs	r3, #0
    de18:	e7f8      	b.n	de0c <le_conn_param_req_neg_reply+0x28>

0000de1a <le_set_data_len>:
{
    de1a:	b570      	push	{r4, r5, r6, lr}
    de1c:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
    de1e:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    de20:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    de22:	889a      	ldrh	r2, [r3, #4]
    de24:	8859      	ldrh	r1, [r3, #2]
    de26:	b2a0      	uxth	r0, r4
    de28:	f00a fb99 	bl	1855e <ll_length_req_send>
    de2c:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    de2e:	2103      	movs	r1, #3
    de30:	4630      	mov	r0, r6
    de32:	f7ff f9dd 	bl	d1f0 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    de36:	b125      	cbz	r5, de42 <le_set_data_len+0x28>
    de38:	230c      	movs	r3, #12
    de3a:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    de3c:	f8a0 4001 	strh.w	r4, [r0, #1]
    de40:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    de42:	2300      	movs	r3, #0
    de44:	e7f9      	b.n	de3a <le_set_data_len+0x20>

0000de46 <le_read_default_data_len>:
{
    de46:	b510      	push	{r4, lr}
    de48:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    de4a:	2105      	movs	r1, #5
    de4c:	f7ff f9d0 	bl	d1f0 <cmd_complete>
    de50:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    de52:	1cc1      	adds	r1, r0, #3
    de54:	3001      	adds	r0, #1
    de56:	f00a fba9 	bl	185ac <ll_length_default_get>
	rp->status = 0x00;
    de5a:	2300      	movs	r3, #0
    de5c:	7023      	strb	r3, [r4, #0]
    de5e:	bd10      	pop	{r4, pc}

0000de60 <le_write_default_data_len>:
{
    de60:	b538      	push	{r3, r4, r5, lr}
    de62:	460d      	mov	r5, r1
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
    de64:	6883      	ldr	r3, [r0, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    de66:	8859      	ldrh	r1, [r3, #2]
    de68:	8818      	ldrh	r0, [r3, #0]
    de6a:	f00a fba9 	bl	185c0 <ll_length_default_set>
    de6e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    de70:	2101      	movs	r1, #1
    de72:	4628      	mov	r0, r5
    de74:	f7ff f9bc 	bl	d1f0 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    de78:	b114      	cbz	r4, de80 <le_write_default_data_len+0x20>
    de7a:	231e      	movs	r3, #30
    de7c:	7003      	strb	r3, [r0, #0]
    de7e:	bd38      	pop	{r3, r4, r5, pc}
    de80:	2300      	movs	r3, #0
    de82:	e7fb      	b.n	de7c <le_write_default_data_len+0x1c>

0000de84 <le_read_max_data_len>:
{
    de84:	b510      	push	{r4, lr}
    de86:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    de88:	2109      	movs	r1, #9
    de8a:	f7ff f9b1 	bl	d1f0 <cmd_complete>
    de8e:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    de90:	1dc3      	adds	r3, r0, #7
    de92:	1d42      	adds	r2, r0, #5
    de94:	1cc1      	adds	r1, r0, #3
    de96:	3001      	adds	r0, #1
    de98:	f00a fb9c 	bl	185d4 <ll_length_max_get>
	rp->status = 0x00;
    de9c:	2300      	movs	r3, #0
    de9e:	7023      	strb	r3, [r4, #0]
    dea0:	bd10      	pop	{r4, pc}
	...

0000dea4 <le_phy_upd_complete>:
{
    dea4:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dea6:	4b1a      	ldr	r3, [pc, #104]	; (df10 <le_phy_upd_complete+0x6c>)
    dea8:	e9d3 4500 	ldrd	r4, r5, [r3]
    deac:	2400      	movs	r4, #0
    deae:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    deb2:	ea54 0305 	orrs.w	r3, r4, r5
    deb6:	d008      	beq.n	deca <le_phy_upd_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    deb8:	4b16      	ldr	r3, [pc, #88]	; (df14 <le_phy_upd_complete+0x70>)
    deba:	e9d3 4500 	ldrd	r4, r5, [r3]
    debe:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    dec2:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dec4:	ea54 0305 	orrs.w	r3, r4, r5
    dec8:	d100      	bne.n	decc <le_phy_upd_complete+0x28>
    deca:	bd38      	pop	{r3, r4, r5, pc}
    decc:	4613      	mov	r3, r2
    dece:	460c      	mov	r4, r1
    ded0:	4605      	mov	r5, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    ded2:	2205      	movs	r2, #5
    ded4:	210c      	movs	r1, #12
    ded6:	4618      	mov	r0, r3
    ded8:	f7ff fa24 	bl	d324 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    dedc:	78eb      	ldrb	r3, [r5, #3]
    dede:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    dee0:	f8a0 4001 	strh.w	r4, [r0, #1]
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    dee4:	792a      	ldrb	r2, [r5, #4]
	return __builtin_ffs(op);
    dee6:	fa92 f3a2 	rbit	r3, r2
    deea:	fab3 f383 	clz	r3, r3
    deee:	b90a      	cbnz	r2, def4 <le_phy_upd_complete+0x50>
    def0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    def4:	3301      	adds	r3, #1
    def6:	70c3      	strb	r3, [r0, #3]
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    def8:	796a      	ldrb	r2, [r5, #5]
    defa:	fa92 f3a2 	rbit	r3, r2
    defe:	fab3 f383 	clz	r3, r3
    df02:	b90a      	cbnz	r2, df08 <le_phy_upd_complete+0x64>
    df04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    df08:	3301      	adds	r3, #1
    df0a:	7103      	strb	r3, [r0, #4]
    df0c:	e7dd      	b.n	deca <le_phy_upd_complete+0x26>
    df0e:	bf00      	nop
    df10:	2000bc60 	.word	0x2000bc60
    df14:	2000bc68 	.word	0x2000bc68

0000df18 <le_read_phy>:
{
    df18:	b570      	push	{r4, r5, r6, lr}
    df1a:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
    df1c:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    df1e:	8815      	ldrh	r5, [r2, #0]
    df20:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    df22:	2105      	movs	r1, #5
    df24:	4618      	mov	r0, r3
    df26:	f7ff f963 	bl	d1f0 <cmd_complete>
    df2a:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    df2c:	1d02      	adds	r2, r0, #4
    df2e:	1cc1      	adds	r1, r0, #3
    df30:	4630      	mov	r0, r6
    df32:	f00a fb59 	bl	185e8 <ll_phy_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    df36:	b1c0      	cbz	r0, df6a <le_read_phy+0x52>
    df38:	230c      	movs	r3, #12
    df3a:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    df3c:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    df40:	78e2      	ldrb	r2, [r4, #3]
    df42:	fa92 f3a2 	rbit	r3, r2
    df46:	fab3 f383 	clz	r3, r3
    df4a:	b90a      	cbnz	r2, df50 <le_read_phy+0x38>
    df4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    df50:	3301      	adds	r3, #1
    df52:	70e3      	strb	r3, [r4, #3]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    df54:	7922      	ldrb	r2, [r4, #4]
    df56:	fa92 f3a2 	rbit	r3, r2
    df5a:	fab3 f383 	clz	r3, r3
    df5e:	b90a      	cbnz	r2, df64 <le_read_phy+0x4c>
    df60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    df64:	3301      	adds	r3, #1
    df66:	7123      	strb	r3, [r4, #4]
    df68:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    df6a:	2300      	movs	r3, #0
    df6c:	e7e5      	b.n	df3a <le_read_phy+0x22>

0000df6e <le_set_default_phy>:
{
    df6e:	b538      	push	{r3, r4, r5, lr}
    df70:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    df72:	6883      	ldr	r3, [r0, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    df74:	781a      	ldrb	r2, [r3, #0]
    df76:	f012 0f01 	tst.w	r2, #1
    df7a:	d001      	beq.n	df80 <le_set_default_phy+0x12>
		cmd->tx_phys = 0x07;
    df7c:	2107      	movs	r1, #7
    df7e:	7059      	strb	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    df80:	f012 0f02 	tst.w	r2, #2
    df84:	d001      	beq.n	df8a <le_set_default_phy+0x1c>
		cmd->rx_phys = 0x07;
    df86:	2207      	movs	r2, #7
    df88:	709a      	strb	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    df8a:	7899      	ldrb	r1, [r3, #2]
    df8c:	7858      	ldrb	r0, [r3, #1]
    df8e:	f00a fb3f 	bl	18610 <ll_phy_default_set>
    df92:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    df94:	2101      	movs	r1, #1
    df96:	4628      	mov	r0, r5
    df98:	f7ff f92a 	bl	d1f0 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    df9c:	b114      	cbz	r4, dfa4 <le_set_default_phy+0x36>
    df9e:	231e      	movs	r3, #30
    dfa0:	7003      	strb	r3, [r0, #0]
    dfa2:	bd38      	pop	{r3, r4, r5, pc}
    dfa4:	2300      	movs	r3, #0
    dfa6:	e7fb      	b.n	dfa0 <le_set_default_phy+0x32>

0000dfa8 <le_set_phy>:
{
    dfa8:	b538      	push	{r3, r4, r5, lr}
    dfaa:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    dfac:	6881      	ldr	r1, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    dfae:	8808      	ldrh	r0, [r1, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    dfb0:	f8b1 2005 	ldrh.w	r2, [r1, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    dfb4:	788b      	ldrb	r3, [r1, #2]
    dfb6:	f013 0f01 	tst.w	r3, #1
    dfba:	d001      	beq.n	dfc0 <le_set_phy+0x18>
		cmd->tx_phys = 0x07;
    dfbc:	2507      	movs	r5, #7
    dfbe:	70cd      	strb	r5, [r1, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    dfc0:	f013 0f02 	tst.w	r3, #2
    dfc4:	d001      	beq.n	dfca <le_set_phy+0x22>
		cmd->rx_phys = 0x07;
    dfc6:	2307      	movs	r3, #7
    dfc8:	710b      	strb	r3, [r1, #4]
	if (phy_opts & 0x03) {
    dfca:	f012 0f03 	tst.w	r2, #3
    dfce:	d00c      	beq.n	dfea <le_set_phy+0x42>
		phy_opts -= 1;
    dfd0:	3a01      	subs	r2, #1
		phy_opts &= 1;
    dfd2:	f002 0201 	and.w	r2, r2, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    dfd6:	790b      	ldrb	r3, [r1, #4]
    dfd8:	78c9      	ldrb	r1, [r1, #3]
    dfda:	f00a fb23 	bl	18624 <ll_phy_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    dfde:	b100      	cbz	r0, dfe2 <le_set_phy+0x3a>
    dfe0:	200c      	movs	r0, #12
    dfe2:	f7ff f8dd 	bl	d1a0 <cmd_status>
    dfe6:	6020      	str	r0, [r4, #0]
    dfe8:	bd38      	pop	{r3, r4, r5, pc}
		phy_opts = 0;
    dfea:	2200      	movs	r2, #0
    dfec:	e7f3      	b.n	dfd6 <le_set_phy+0x2e>

0000dfee <le_add_dev_to_rl>:
{
    dfee:	b538      	push	{r3, r4, r5, lr}
    dff0:	460d      	mov	r5, r1
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
    dff2:	6880      	ldr	r0, [r0, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    dff4:	f100 0217 	add.w	r2, r0, #23
    dff8:	1dc1      	adds	r1, r0, #7
    dffa:	f00b fffd 	bl	19ff8 <ll_rl_add>
    dffe:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e000:	2101      	movs	r1, #1
    e002:	4628      	mov	r0, r5
    e004:	f7ff f8f4 	bl	d1f0 <cmd_complete>
	ccst->status = status;
    e008:	7004      	strb	r4, [r0, #0]
    e00a:	bd38      	pop	{r3, r4, r5, pc}

0000e00c <le_rem_dev_from_rl>:
{
    e00c:	b538      	push	{r3, r4, r5, lr}
    e00e:	460d      	mov	r5, r1
	status = ll_rl_remove(&cmd->peer_id_addr);
    e010:	6880      	ldr	r0, [r0, #8]
    e012:	f00c f8af 	bl	1a174 <ll_rl_remove>
    e016:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e018:	2101      	movs	r1, #1
    e01a:	4628      	mov	r0, r5
    e01c:	f7ff f8e8 	bl	d1f0 <cmd_complete>
	ccst->status = status;
    e020:	7004      	strb	r4, [r0, #0]
    e022:	bd38      	pop	{r3, r4, r5, pc}

0000e024 <le_clear_rl>:
{
    e024:	b510      	push	{r4, lr}
    e026:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    e028:	2101      	movs	r1, #1
    e02a:	f7ff f8e1 	bl	d1f0 <cmd_complete>
    e02e:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    e030:	f00b ffd6 	bl	19fe0 <ll_rl_clear>
    e034:	7020      	strb	r0, [r4, #0]
    e036:	bd10      	pop	{r4, pc}

0000e038 <le_read_rl_size>:
{
    e038:	b510      	push	{r4, lr}
    e03a:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e03c:	2102      	movs	r1, #2
    e03e:	f7ff f8d7 	bl	d1f0 <cmd_complete>
    e042:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    e044:	f00b ffca 	bl	19fdc <ll_rl_size_get>
    e048:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    e04a:	2300      	movs	r3, #0
    e04c:	7023      	strb	r3, [r4, #0]
    e04e:	bd10      	pop	{r4, pc}

0000e050 <le_read_peer_rpa>:
{
    e050:	b510      	push	{r4, lr}
    e052:	b082      	sub	sp, #8
    e054:	460c      	mov	r4, r1
	memcpy(dst, src, sizeof(*dst));
    e056:	2207      	movs	r2, #7
    e058:	6881      	ldr	r1, [r0, #8]
    e05a:	4668      	mov	r0, sp
    e05c:	f7f2 f930 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    e060:	2107      	movs	r1, #7
    e062:	4620      	mov	r0, r4
    e064:	f7ff f8c4 	bl	d1f0 <cmd_complete>
    e068:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    e06a:	1c41      	adds	r1, r0, #1
    e06c:	4668      	mov	r0, sp
    e06e:	f00c f925 	bl	1a2bc <ll_rl_crpa_get>
    e072:	7020      	strb	r0, [r4, #0]
}
    e074:	b002      	add	sp, #8
    e076:	bd10      	pop	{r4, pc}

0000e078 <le_read_local_rpa>:
{
    e078:	b510      	push	{r4, lr}
    e07a:	b082      	sub	sp, #8
    e07c:	460c      	mov	r4, r1
    e07e:	2207      	movs	r2, #7
    e080:	6881      	ldr	r1, [r0, #8]
    e082:	4668      	mov	r0, sp
    e084:	f7f2 f91c 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    e088:	2107      	movs	r1, #7
    e08a:	4620      	mov	r0, r4
    e08c:	f7ff f8b0 	bl	d1f0 <cmd_complete>
    e090:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    e092:	1c41      	adds	r1, r0, #1
    e094:	4668      	mov	r0, sp
    e096:	f00c f939 	bl	1a30c <ll_rl_lrpa_get>
    e09a:	7020      	strb	r0, [r4, #0]
}
    e09c:	b002      	add	sp, #8
    e09e:	bd10      	pop	{r4, pc}

0000e0a0 <le_set_addr_res_enable>:
{
    e0a0:	b538      	push	{r3, r4, r5, lr}
    e0a2:	460b      	mov	r3, r1
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
    e0a4:	6882      	ldr	r2, [r0, #8]
	u8_t enable = cmd->enable;
    e0a6:	7815      	ldrb	r5, [r2, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    e0a8:	2101      	movs	r1, #1
    e0aa:	4618      	mov	r0, r3
    e0ac:	f7ff f8a0 	bl	d1f0 <cmd_complete>
    e0b0:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    e0b2:	4628      	mov	r0, r5
    e0b4:	f00c f944 	bl	1a340 <ll_rl_enable>
    e0b8:	7020      	strb	r0, [r4, #0]
    e0ba:	bd38      	pop	{r3, r4, r5, pc}

0000e0bc <le_set_rpa_timeout>:
{
    e0bc:	b510      	push	{r4, lr}
    e0be:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_rpa_timeout *cmd = (void *)buf->data;
    e0c0:	6883      	ldr	r3, [r0, #8]
	ll_rl_timeout_set(timeout);
    e0c2:	8818      	ldrh	r0, [r3, #0]
    e0c4:	f00c f954 	bl	1a370 <ll_rl_timeout_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    e0c8:	2101      	movs	r1, #1
    e0ca:	4620      	mov	r0, r4
    e0cc:	f7ff f890 	bl	d1f0 <cmd_complete>
	ccst->status = 0x00;
    e0d0:	2300      	movs	r3, #0
    e0d2:	7003      	strb	r3, [r0, #0]
    e0d4:	bd10      	pop	{r4, pc}

0000e0d6 <le_set_privacy_mode>:
{
    e0d6:	b538      	push	{r3, r4, r5, lr}
    e0d8:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
    e0da:	6880      	ldr	r0, [r0, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    e0dc:	79c1      	ldrb	r1, [r0, #7]
    e0de:	f00c f951 	bl	1a384 <ll_priv_mode_set>
    e0e2:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e0e4:	2101      	movs	r1, #1
    e0e6:	4628      	mov	r0, r5
    e0e8:	f7ff f882 	bl	d1f0 <cmd_complete>
	ccst->status = status;
    e0ec:	7004      	strb	r4, [r0, #0]
    e0ee:	bd38      	pop	{r3, r4, r5, pc}

0000e0f0 <le_read_tx_power>:
{
    e0f0:	b508      	push	{r3, lr}
    e0f2:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e0f4:	2103      	movs	r1, #3
    e0f6:	f7ff f87b 	bl	d1f0 <cmd_complete>
	rp->status = 0x00;
    e0fa:	4601      	mov	r1, r0
    e0fc:	2300      	movs	r3, #0
    e0fe:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_power_get(&rp->min_tx_power, &rp->max_tx_power);
    e102:	3001      	adds	r0, #1
    e104:	f00a f9f3 	bl	184ee <ll_tx_power_get>
    e108:	bd08      	pop	{r3, pc}

0000e10a <controller_cmd_handle>:
{
    e10a:	b508      	push	{r3, lr}
    e10c:	460b      	mov	r3, r1
	switch (ocf) {
    e10e:	3801      	subs	r0, #1
    e110:	284d      	cmp	r0, #77	; 0x4d
    e112:	f200 8164 	bhi.w	e3de <controller_cmd_handle+0x2d4>
    e116:	e8df f010 	tbh	[pc, r0, lsl #1]
    e11a:	004e      	.short	0x004e
    e11c:	005a0054 	.word	0x005a0054
    e120:	00600162 	.word	0x00600162
    e124:	00960090 	.word	0x00960090
    e128:	00a2009c 	.word	0x00a2009c
    e12c:	00ae00a8 	.word	0x00ae00a8
    e130:	00ba00b4 	.word	0x00ba00b4
    e134:	006600c0 	.word	0x006600c0
    e138:	0072006c 	.word	0x0072006c
    e13c:	00ea0078 	.word	0x00ea0078
    e140:	00de00c6 	.word	0x00de00c6
    e144:	007e00e4 	.word	0x007e00e4
    e148:	00cc0084 	.word	0x00cc0084
    e14c:	00d800d2 	.word	0x00d800d2
    e150:	0162008a 	.word	0x0162008a
    e154:	01620162 	.word	0x01620162
    e158:	00f600f0 	.word	0x00f600f0
    e15c:	010200fc 	.word	0x010200fc
    e160:	01620108 	.word	0x01620108
    e164:	01260162 	.word	0x01260162
    e168:	0132012c 	.word	0x0132012c
    e16c:	013e0138 	.word	0x013e0138
    e170:	014a0144 	.word	0x014a0144
    e174:	010e0150 	.word	0x010e0150
    e178:	011a0114 	.word	0x011a0114
    e17c:	01620120 	.word	0x01620120
    e180:	01620162 	.word	0x01620162
    e184:	01620162 	.word	0x01620162
    e188:	01620162 	.word	0x01620162
    e18c:	01620162 	.word	0x01620162
    e190:	01620162 	.word	0x01620162
    e194:	01620162 	.word	0x01620162
    e198:	01620162 	.word	0x01620162
    e19c:	01620162 	.word	0x01620162
    e1a0:	01620162 	.word	0x01620162
    e1a4:	01620162 	.word	0x01620162
    e1a8:	01620162 	.word	0x01620162
    e1ac:	015c0162 	.word	0x015c0162
    e1b0:	01620162 	.word	0x01620162
    e1b4:	0156      	.short	0x0156
		le_set_event_mask(cmd, evt);
    e1b6:	4611      	mov	r1, r2
    e1b8:	4618      	mov	r0, r3
    e1ba:	f7f6 fe3f 	bl	4e3c <le_set_event_mask>
	return 0;
    e1be:	2000      	movs	r0, #0
		break;
    e1c0:	bd08      	pop	{r3, pc}
		le_read_buffer_size(cmd, evt);
    e1c2:	4611      	mov	r1, r2
    e1c4:	4618      	mov	r0, r3
    e1c6:	f7ff f86c 	bl	d2a2 <le_read_buffer_size>
	return 0;
    e1ca:	2000      	movs	r0, #0
		break;
    e1cc:	bd08      	pop	{r3, pc}
		le_read_local_features(cmd, evt);
    e1ce:	4611      	mov	r1, r2
    e1d0:	4618      	mov	r0, r3
    e1d2:	f7ff fabb 	bl	d74c <le_read_local_features>
	return 0;
    e1d6:	2000      	movs	r0, #0
		break;
    e1d8:	bd08      	pop	{r3, pc}
		le_set_random_address(cmd, evt);
    e1da:	4611      	mov	r1, r2
    e1dc:	4618      	mov	r0, r3
    e1de:	f7ff fc03 	bl	d9e8 <le_set_random_address>
	return 0;
    e1e2:	2000      	movs	r0, #0
		break;
    e1e4:	bd08      	pop	{r3, pc}
		le_read_wl_size(cmd, evt);
    e1e6:	4611      	mov	r1, r2
    e1e8:	4618      	mov	r0, r3
    e1ea:	f7ff fc17 	bl	da1c <le_read_wl_size>
	return 0;
    e1ee:	2000      	movs	r0, #0
		break;
    e1f0:	bd08      	pop	{r3, pc}
		le_clear_wl(cmd, evt);
    e1f2:	4611      	mov	r1, r2
    e1f4:	4618      	mov	r0, r3
    e1f6:	f7ff fc1d 	bl	da34 <le_clear_wl>
	return 0;
    e1fa:	2000      	movs	r0, #0
		break;
    e1fc:	bd08      	pop	{r3, pc}
		le_add_dev_to_wl(cmd, evt);
    e1fe:	4611      	mov	r1, r2
    e200:	4618      	mov	r0, r3
    e202:	f7ff fc21 	bl	da48 <le_add_dev_to_wl>
	return 0;
    e206:	2000      	movs	r0, #0
		break;
    e208:	bd08      	pop	{r3, pc}
		le_rem_dev_from_wl(cmd, evt);
    e20a:	4611      	mov	r1, r2
    e20c:	4618      	mov	r0, r3
    e20e:	f7ff fc27 	bl	da60 <le_rem_dev_from_wl>
	return 0;
    e212:	2000      	movs	r0, #0
		break;
    e214:	bd08      	pop	{r3, pc}
		le_encrypt(cmd, evt);
    e216:	4611      	mov	r1, r2
    e218:	4618      	mov	r0, r3
    e21a:	f7ff fc2d 	bl	da78 <le_encrypt>
	return 0;
    e21e:	2000      	movs	r0, #0
		break;
    e220:	bd08      	pop	{r3, pc}
		le_rand(cmd, evt);
    e222:	4611      	mov	r1, r2
    e224:	4618      	mov	r0, r3
    e226:	f7ff fca4 	bl	db72 <le_rand>
	return 0;
    e22a:	2000      	movs	r0, #0
		break;
    e22c:	bd08      	pop	{r3, pc}
		le_read_supp_states(cmd, evt);
    e22e:	4611      	mov	r1, r2
    e230:	4618      	mov	r0, r3
    e232:	f7ff f843 	bl	d2bc <le_read_supp_states>
	return 0;
    e236:	2000      	movs	r0, #0
		break;
    e238:	bd08      	pop	{r3, pc}
		le_set_adv_param(cmd, evt);
    e23a:	4611      	mov	r1, r2
    e23c:	4618      	mov	r0, r3
    e23e:	f7ff fca4 	bl	db8a <le_set_adv_param>
	return 0;
    e242:	2000      	movs	r0, #0
		break;
    e244:	bd08      	pop	{r3, pc}
		le_read_adv_chan_tx_power(cmd, evt);
    e246:	4611      	mov	r1, r2
    e248:	4618      	mov	r0, r3
    e24a:	f7ff f84a 	bl	d2e2 <le_read_adv_chan_tx_power>
	return 0;
    e24e:	2000      	movs	r0, #0
		break;
    e250:	bd08      	pop	{r3, pc}
		le_set_adv_data(cmd, evt);
    e252:	4611      	mov	r1, r2
    e254:	4618      	mov	r0, r3
    e256:	f7ff fcbb 	bl	dbd0 <le_set_adv_data>
	return 0;
    e25a:	2000      	movs	r0, #0
		break;
    e25c:	bd08      	pop	{r3, pc}
		le_set_scan_rsp_data(cmd, evt);
    e25e:	4611      	mov	r1, r2
    e260:	4618      	mov	r0, r3
    e262:	f7ff fcc3 	bl	dbec <le_set_scan_rsp_data>
	return 0;
    e266:	2000      	movs	r0, #0
		break;
    e268:	bd08      	pop	{r3, pc}
		le_set_adv_enable(cmd, evt);
    e26a:	4611      	mov	r1, r2
    e26c:	4618      	mov	r0, r3
    e26e:	f7ff fccb 	bl	dc08 <le_set_adv_enable>
	return 0;
    e272:	2000      	movs	r0, #0
		break;
    e274:	bd08      	pop	{r3, pc}
		le_set_scan_param(cmd, evt);
    e276:	4611      	mov	r1, r2
    e278:	4618      	mov	r0, r3
    e27a:	f7ff fcd6 	bl	dc2a <le_set_scan_param>
	return 0;
    e27e:	2000      	movs	r0, #0
		break;
    e280:	bd08      	pop	{r3, pc}
		le_set_scan_enable(cmd, evt);
    e282:	4611      	mov	r1, r2
    e284:	4618      	mov	r0, r3
    e286:	f7ff fceb 	bl	dc60 <le_set_scan_enable>
	return 0;
    e28a:	2000      	movs	r0, #0
		break;
    e28c:	bd08      	pop	{r3, pc}
		le_create_connection(cmd, evt);
    e28e:	4611      	mov	r1, r2
    e290:	4618      	mov	r0, r3
    e292:	f7ff fd09 	bl	dca8 <le_create_connection>
	return 0;
    e296:	2000      	movs	r0, #0
		break;
    e298:	bd08      	pop	{r3, pc}
		le_create_conn_cancel(cmd, evt);
    e29a:	4611      	mov	r1, r2
    e29c:	4618      	mov	r0, r3
    e29e:	f7ff fd23 	bl	dce8 <le_create_conn_cancel>
	return 0;
    e2a2:	2000      	movs	r0, #0
		break;
    e2a4:	bd08      	pop	{r3, pc}
		le_set_host_chan_classif(cmd, evt);
    e2a6:	4611      	mov	r1, r2
    e2a8:	4618      	mov	r0, r3
    e2aa:	f7ff fd2c 	bl	dd06 <le_set_host_chan_classif>
	return 0;
    e2ae:	2000      	movs	r0, #0
		break;
    e2b0:	bd08      	pop	{r3, pc}
		le_start_encryption(cmd, evt);
    e2b2:	4611      	mov	r1, r2
    e2b4:	4618      	mov	r0, r3
    e2b6:	f7ff fd36 	bl	dd26 <le_start_encryption>
	return 0;
    e2ba:	2000      	movs	r0, #0
		break;
    e2bc:	bd08      	pop	{r3, pc}
		le_ltk_req_reply(cmd, evt);
    e2be:	4611      	mov	r1, r2
    e2c0:	4618      	mov	r0, r3
    e2c2:	f7ff fd41 	bl	dd48 <le_ltk_req_reply>
	return 0;
    e2c6:	2000      	movs	r0, #0
		break;
    e2c8:	bd08      	pop	{r3, pc}
		le_ltk_req_neg_reply(cmd, evt);
    e2ca:	4611      	mov	r1, r2
    e2cc:	4618      	mov	r0, r3
    e2ce:	f7ff fd51 	bl	dd74 <le_ltk_req_neg_reply>
	return 0;
    e2d2:	2000      	movs	r0, #0
		break;
    e2d4:	bd08      	pop	{r3, pc}
		le_read_chan_map(cmd, evt);
    e2d6:	4611      	mov	r1, r2
    e2d8:	4618      	mov	r0, r3
    e2da:	f7ff fd61 	bl	dda0 <le_read_chan_map>
	return 0;
    e2de:	2000      	movs	r0, #0
		break;
    e2e0:	bd08      	pop	{r3, pc}
		le_read_remote_features(cmd, evt);
    e2e2:	4611      	mov	r1, r2
    e2e4:	4618      	mov	r0, r3
    e2e6:	f7ff fd71 	bl	ddcc <le_read_remote_features>
	return 0;
    e2ea:	2000      	movs	r0, #0
		break;
    e2ec:	bd08      	pop	{r3, pc}
		le_conn_update(cmd, evt);
    e2ee:	4611      	mov	r1, r2
    e2f0:	4618      	mov	r0, r3
    e2f2:	f7f9 f9c1 	bl	7678 <le_conn_update>
	return 0;
    e2f6:	2000      	movs	r0, #0
		break;
    e2f8:	bd08      	pop	{r3, pc}
		le_conn_param_req_reply(cmd, evt);
    e2fa:	4611      	mov	r1, r2
    e2fc:	4618      	mov	r0, r3
    e2fe:	f7f7 fe47 	bl	5f90 <le_conn_param_req_reply>
	return 0;
    e302:	2000      	movs	r0, #0
		break;
    e304:	bd08      	pop	{r3, pc}
		le_conn_param_req_neg_reply(cmd, evt);
    e306:	4611      	mov	r1, r2
    e308:	4618      	mov	r0, r3
    e30a:	f7ff fd6b 	bl	dde4 <le_conn_param_req_neg_reply>
	return 0;
    e30e:	2000      	movs	r0, #0
		break;
    e310:	bd08      	pop	{r3, pc}
		le_set_data_len(cmd, evt);
    e312:	4611      	mov	r1, r2
    e314:	4618      	mov	r0, r3
    e316:	f7ff fd80 	bl	de1a <le_set_data_len>
	return 0;
    e31a:	2000      	movs	r0, #0
		break;
    e31c:	bd08      	pop	{r3, pc}
		le_read_default_data_len(cmd, evt);
    e31e:	4611      	mov	r1, r2
    e320:	4618      	mov	r0, r3
    e322:	f7ff fd90 	bl	de46 <le_read_default_data_len>
	return 0;
    e326:	2000      	movs	r0, #0
		break;
    e328:	bd08      	pop	{r3, pc}
		le_write_default_data_len(cmd, evt);
    e32a:	4611      	mov	r1, r2
    e32c:	4618      	mov	r0, r3
    e32e:	f7ff fd97 	bl	de60 <le_write_default_data_len>
	return 0;
    e332:	2000      	movs	r0, #0
		break;
    e334:	bd08      	pop	{r3, pc}
		le_read_max_data_len(cmd, evt);
    e336:	4611      	mov	r1, r2
    e338:	4618      	mov	r0, r3
    e33a:	f7ff fda3 	bl	de84 <le_read_max_data_len>
	return 0;
    e33e:	2000      	movs	r0, #0
		break;
    e340:	bd08      	pop	{r3, pc}
		le_read_phy(cmd, evt);
    e342:	4611      	mov	r1, r2
    e344:	4618      	mov	r0, r3
    e346:	f7ff fde7 	bl	df18 <le_read_phy>
	return 0;
    e34a:	2000      	movs	r0, #0
		break;
    e34c:	bd08      	pop	{r3, pc}
		le_set_default_phy(cmd, evt);
    e34e:	4611      	mov	r1, r2
    e350:	4618      	mov	r0, r3
    e352:	f7ff fe0c 	bl	df6e <le_set_default_phy>
	return 0;
    e356:	2000      	movs	r0, #0
		break;
    e358:	bd08      	pop	{r3, pc}
		le_set_phy(cmd, evt);
    e35a:	4611      	mov	r1, r2
    e35c:	4618      	mov	r0, r3
    e35e:	f7ff fe23 	bl	dfa8 <le_set_phy>
	return 0;
    e362:	2000      	movs	r0, #0
		break;
    e364:	bd08      	pop	{r3, pc}
		le_add_dev_to_rl(cmd, evt);
    e366:	4611      	mov	r1, r2
    e368:	4618      	mov	r0, r3
    e36a:	f7ff fe40 	bl	dfee <le_add_dev_to_rl>
	return 0;
    e36e:	2000      	movs	r0, #0
		break;
    e370:	bd08      	pop	{r3, pc}
		le_rem_dev_from_rl(cmd, evt);
    e372:	4611      	mov	r1, r2
    e374:	4618      	mov	r0, r3
    e376:	f7ff fe49 	bl	e00c <le_rem_dev_from_rl>
	return 0;
    e37a:	2000      	movs	r0, #0
		break;
    e37c:	bd08      	pop	{r3, pc}
		le_clear_rl(cmd, evt);
    e37e:	4611      	mov	r1, r2
    e380:	4618      	mov	r0, r3
    e382:	f7ff fe4f 	bl	e024 <le_clear_rl>
	return 0;
    e386:	2000      	movs	r0, #0
		break;
    e388:	bd08      	pop	{r3, pc}
		le_read_rl_size(cmd, evt);
    e38a:	4611      	mov	r1, r2
    e38c:	4618      	mov	r0, r3
    e38e:	f7ff fe53 	bl	e038 <le_read_rl_size>
	return 0;
    e392:	2000      	movs	r0, #0
		break;
    e394:	bd08      	pop	{r3, pc}
		le_read_peer_rpa(cmd, evt);
    e396:	4611      	mov	r1, r2
    e398:	4618      	mov	r0, r3
    e39a:	f7ff fe59 	bl	e050 <le_read_peer_rpa>
	return 0;
    e39e:	2000      	movs	r0, #0
		break;
    e3a0:	bd08      	pop	{r3, pc}
		le_read_local_rpa(cmd, evt);
    e3a2:	4611      	mov	r1, r2
    e3a4:	4618      	mov	r0, r3
    e3a6:	f7ff fe67 	bl	e078 <le_read_local_rpa>
	return 0;
    e3aa:	2000      	movs	r0, #0
		break;
    e3ac:	bd08      	pop	{r3, pc}
		le_set_addr_res_enable(cmd, evt);
    e3ae:	4611      	mov	r1, r2
    e3b0:	4618      	mov	r0, r3
    e3b2:	f7ff fe75 	bl	e0a0 <le_set_addr_res_enable>
	return 0;
    e3b6:	2000      	movs	r0, #0
		break;
    e3b8:	bd08      	pop	{r3, pc}
		le_set_rpa_timeout(cmd, evt);
    e3ba:	4611      	mov	r1, r2
    e3bc:	4618      	mov	r0, r3
    e3be:	f7ff fe7d 	bl	e0bc <le_set_rpa_timeout>
	return 0;
    e3c2:	2000      	movs	r0, #0
		break;
    e3c4:	bd08      	pop	{r3, pc}
		le_set_privacy_mode(cmd, evt);
    e3c6:	4611      	mov	r1, r2
    e3c8:	4618      	mov	r0, r3
    e3ca:	f7ff fe84 	bl	e0d6 <le_set_privacy_mode>
	return 0;
    e3ce:	2000      	movs	r0, #0
		break;
    e3d0:	bd08      	pop	{r3, pc}
		le_read_tx_power(cmd, evt);
    e3d2:	4611      	mov	r1, r2
    e3d4:	4618      	mov	r0, r3
    e3d6:	f7ff fe8b 	bl	e0f0 <le_read_tx_power>
	return 0;
    e3da:	2000      	movs	r0, #0
		break;
    e3dc:	bd08      	pop	{r3, pc}
		return -EINVAL;
    e3de:	f06f 0015 	mvn.w	r0, #21
}
    e3e2:	bd08      	pop	{r3, pc}

0000e3e4 <data_buf_overflow>:
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    e3e4:	4b0e      	ldr	r3, [pc, #56]	; (e420 <data_buf_overflow+0x3c>)
    e3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3ea:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    e3ee:	2300      	movs	r3, #0
    e3f0:	4313      	orrs	r3, r2
    e3f2:	d100      	bne.n	e3f6 <data_buf_overflow+0x12>
    e3f4:	4770      	bx	lr
{
    e3f6:	b510      	push	{r4, lr}
    e3f8:	4604      	mov	r4, r0
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    e3fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e3fe:	2001      	movs	r0, #1
    e400:	f7f8 fa1c 	bl	683c <bt_buf_get_rx>
    e404:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    e406:	2201      	movs	r2, #1
    e408:	211a      	movs	r1, #26
    e40a:	f7fe febf 	bl	d18c <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    e40e:	6820      	ldr	r0, [r4, #0]
    e410:	2101      	movs	r1, #1
    e412:	3008      	adds	r0, #8
    e414:	f00c fbe2 	bl	1abdc <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    e418:	2301      	movs	r3, #1
    e41a:	7003      	strb	r3, [r0, #0]
    e41c:	bd10      	pop	{r4, pc}
    e41e:	bf00      	nop
    e420:	2000bc60 	.word	0x2000bc60

0000e424 <encode_data_ctrl>:
{
    e424:	b510      	push	{r4, lr}
    e426:	460c      	mov	r4, r1
	u16_t handle = node_rx->hdr.handle;
    e428:	88c1      	ldrh	r1, [r0, #6]
	switch (pdu_data->payload.llctrl.opcode) {
    e42a:	78e0      	ldrb	r0, [r4, #3]
    e42c:	3803      	subs	r0, #3
    e42e:	2812      	cmp	r0, #18
    e430:	d82e      	bhi.n	e490 <encode_data_ctrl+0x6c>
    e432:	e8df f000 	tbb	[pc, r0]
    e436:	2d0a      	.short	0x2d0a
    e438:	2d290e2d 	.word	0x2d290e2d
    e43c:	192d2d12 	.word	0x192d2d12
    e440:	2d212d1d 	.word	0x2d212d1d
    e444:	252d2d2d 	.word	0x252d2d2d
    e448:	25          	.byte	0x25
    e449:	00          	.byte	0x00
		le_ltk_request(pdu_data, handle, buf);
    e44a:	4620      	mov	r0, r4
    e44c:	f7f7 feec 	bl	6228 <le_ltk_request>
		break;
    e450:	bd10      	pop	{r4, pc}
		encrypt_change(0x00, handle, buf);
    e452:	2000      	movs	r0, #0
    e454:	f7ff f826 	bl	d4a4 <encrypt_change>
		break;
    e458:	bd10      	pop	{r4, pc}
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    e45a:	4613      	mov	r3, r2
    e45c:	460a      	mov	r2, r1
    e45e:	4621      	mov	r1, r4
    e460:	2000      	movs	r0, #0
    e462:	f7f7 fceb 	bl	5e3c <le_remote_feat_complete>
		break;
    e466:	bd10      	pop	{r4, pc}
		remote_version_info(pdu_data, handle, buf);
    e468:	4620      	mov	r0, r4
    e46a:	f7fe fff5 	bl	d458 <remote_version_info>
		break;
    e46e:	bd10      	pop	{r4, pc}
		encrypt_change(pdu_data->payload.llctrl.ctrldata.reject_ind.
    e470:	7920      	ldrb	r0, [r4, #4]
    e472:	f7ff f817 	bl	d4a4 <encrypt_change>
		break;
    e476:	bd10      	pop	{r4, pc}
		le_conn_param_req(pdu_data, handle, buf);
    e478:	4620      	mov	r0, r4
    e47a:	f7f7 fdd7 	bl	602c <le_conn_param_req>
		break;
    e47e:	bd10      	pop	{r4, pc}
		le_data_len_change(pdu_data, handle, buf);
    e480:	4620      	mov	r0, r4
    e482:	f7f6 fa43 	bl	490c <le_data_len_change>
		break;
    e486:	bd10      	pop	{r4, pc}
		le_unknown_rsp(pdu_data, handle, buf);
    e488:	4620      	mov	r0, r4
    e48a:	f7ff fb66 	bl	db5a <le_unknown_rsp>
		break;
    e48e:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    e490:	4040      	eors	r0, r0
    e492:	f380 8811 	msr	BASEPRI, r0
    e496:	f04f 0004 	mov.w	r0, #4
    e49a:	df02      	svc	2

0000e49c <le_advertising_report>:
{
    e49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e4a0:	b082      	sub	sp, #8
    e4a2:	4605      	mov	r5, r0
    e4a4:	460e      	mov	r6, r1
    e4a6:	4691      	mov	r9, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    e4a8:	4b90      	ldr	r3, [pc, #576]	; (e6ec <le_advertising_report+0x250>)
    e4aa:	e893 0003 	ldmia.w	r3, {r0, r1}
    e4ae:	9000      	str	r0, [sp, #0]
    e4b0:	f8ad 1004 	strh.w	r1, [sp, #4]
    e4b4:	0c09      	lsrs	r1, r1, #16
    e4b6:	f88d 1006 	strb.w	r1, [sp, #6]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    e4ba:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e4bc:	330b      	adds	r3, #11
    e4be:	f816 8003 	ldrb.w	r8, [r6, r3]
	if (adv->tx_addr) {
    e4c2:	782b      	ldrb	r3, [r5, #0]
    e4c4:	f013 0f40 	tst.w	r3, #64	; 0x40
    e4c8:	d125      	bne.n	e516 <le_advertising_report+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    e4ca:	4b89      	ldr	r3, [pc, #548]	; (e6f0 <le_advertising_report+0x254>)
    e4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    e4d0:	2200      	movs	r2, #0
    e4d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e4d6:	4313      	orrs	r3, r2
    e4d8:	f000 80b0 	beq.w	e63c <le_advertising_report+0x1a0>
		   offsetof(struct pdu_adv, payload) + adv->len + 2];
    e4dc:	786b      	ldrb	r3, [r5, #1]
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e4de:	330c      	adds	r3, #12
    e4e0:	5cf7      	ldrb	r7, [r6, r3]
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    e4e2:	b947      	cbnz	r7, e4f6 <le_advertising_report+0x5a>
    e4e4:	4b83      	ldr	r3, [pc, #524]	; (e6f4 <le_advertising_report+0x258>)
    e4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    e4ea:	f002 0202 	and.w	r2, r2, #2
    e4ee:	2300      	movs	r3, #0
    e4f0:	4313      	orrs	r3, r2
    e4f2:	f000 80a3 	beq.w	e63c <le_advertising_report+0x1a0>
    e4f6:	b147      	cbz	r7, e50a <le_advertising_report+0x6e>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    e4f8:	4b7e      	ldr	r3, [pc, #504]	; (e6f4 <le_advertising_report+0x258>)
    e4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    e4fe:	f002 020b 	and.w	r2, r2, #11
    e502:	2300      	movs	r3, #0
    e504:	4313      	orrs	r3, r2
    e506:	f000 8099 	beq.w	e63c <le_advertising_report+0x1a0>
	if (dup_count >= 0) {
    e50a:	4b7b      	ldr	r3, [pc, #492]	; (e6f8 <le_advertising_report+0x25c>)
    e50c:	681b      	ldr	r3, [r3, #0]
    e50e:	2b00      	cmp	r3, #0
    e510:	db08      	blt.n	e524 <le_advertising_report+0x88>
    e512:	2400      	movs	r4, #0
    e514:	e009      	b.n	e52a <le_advertising_report+0x8e>
		ll_rl_crpa_set(0x00, NULL, rl_idx,
    e516:	1cab      	adds	r3, r5, #2
    e518:	4642      	mov	r2, r8
    e51a:	2100      	movs	r1, #0
    e51c:	4608      	mov	r0, r1
    e51e:	f00b fea9 	bl	1a274 <ll_rl_crpa_set>
    e522:	e7d2      	b.n	e4ca <le_advertising_report+0x2e>
	return false;
    e524:	2300      	movs	r3, #0
    e526:	e054      	b.n	e5d2 <le_advertising_report+0x136>
		for (i = 0; i < dup_count; i++) {
    e528:	3401      	adds	r4, #1
    e52a:	4b73      	ldr	r3, [pc, #460]	; (e6f8 <le_advertising_report+0x25c>)
    e52c:	681b      	ldr	r3, [r3, #0]
    e52e:	429c      	cmp	r4, r3
    e530:	da26      	bge.n	e580 <le_advertising_report+0xe4>
				    &dup_filter[i].addr.a.val[0],
    e532:	4972      	ldr	r1, [pc, #456]	; (e6fc <le_advertising_report+0x260>)
    e534:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
			if (!memcmp(&adv->payload.adv_ind.addr[0],
    e538:	2206      	movs	r2, #6
    e53a:	3102      	adds	r1, #2
    e53c:	1ca8      	adds	r0, r5, #2
    e53e:	f01b fd8b 	bl	2a058 <memcmp>
    e542:	2800      	cmp	r0, #0
    e544:	d1f0      	bne.n	e528 <le_advertising_report+0x8c>
			    adv->tx_addr == dup_filter[i].addr.type) {
    e546:	782b      	ldrb	r3, [r5, #0]
    e548:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e54c:	4a6b      	ldr	r2, [pc, #428]	; (e6fc <le_advertising_report+0x260>)
    e54e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    e552:	7852      	ldrb	r2, [r2, #1]
				    sizeof(bt_addr_t)) &&
    e554:	4293      	cmp	r3, r2
    e556:	d1e7      	bne.n	e528 <le_advertising_report+0x8c>
				if (dup_filter[i].mask & BIT(adv->type)) {
    e558:	4b68      	ldr	r3, [pc, #416]	; (e6fc <le_advertising_report+0x260>)
    e55a:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
    e55e:	782b      	ldrb	r3, [r5, #0]
    e560:	f003 030f 	and.w	r3, r3, #15
    e564:	fa22 f103 	lsr.w	r1, r2, r3
    e568:	f011 0f01 	tst.w	r1, #1
    e56c:	d171      	bne.n	e652 <le_advertising_report+0x1b6>
				dup_filter[i].mask |= BIT(adv->type);
    e56e:	2101      	movs	r1, #1
    e570:	fa01 f303 	lsl.w	r3, r1, r3
    e574:	431a      	orrs	r2, r3
    e576:	4b61      	ldr	r3, [pc, #388]	; (e6fc <le_advertising_report+0x260>)
    e578:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
				return false;
    e57c:	2300      	movs	r3, #0
    e57e:	e028      	b.n	e5d2 <le_advertising_report+0x136>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    e580:	f8df a17c 	ldr.w	sl, [pc, #380]	; e700 <le_advertising_report+0x264>
    e584:	f8da 0000 	ldr.w	r0, [sl]
    e588:	4c5c      	ldr	r4, [pc, #368]	; (e6fc <le_advertising_report+0x260>)
    e58a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    e58e:	2206      	movs	r2, #6
    e590:	1ca9      	adds	r1, r5, #2
    e592:	3002      	adds	r0, #2
    e594:	f7f1 fe94 	bl	2c0 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    e598:	f8da 3000 	ldr.w	r3, [sl]
    e59c:	782a      	ldrb	r2, [r5, #0]
    e59e:	f3c2 1280 	ubfx	r2, r2, #6, #1
    e5a2:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    e5a6:	704a      	strb	r2, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    e5a8:	782a      	ldrb	r2, [r5, #0]
    e5aa:	f002 010f 	and.w	r1, r2, #15
    e5ae:	2201      	movs	r2, #1
    e5b0:	408a      	lsls	r2, r1
    e5b2:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    e5b6:	4a50      	ldr	r2, [pc, #320]	; (e6f8 <le_advertising_report+0x25c>)
    e5b8:	6812      	ldr	r2, [r2, #0]
    e5ba:	2a0f      	cmp	r2, #15
    e5bc:	dc41      	bgt.n	e642 <le_advertising_report+0x1a6>
			dup_count++;
    e5be:	3201      	adds	r2, #1
    e5c0:	4b4d      	ldr	r3, [pc, #308]	; (e6f8 <le_advertising_report+0x25c>)
    e5c2:	601a      	str	r2, [r3, #0]
			dup_curr = dup_count;
    e5c4:	f8ca 2000 	str.w	r2, [sl]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    e5c8:	4b4d      	ldr	r3, [pc, #308]	; (e700 <le_advertising_report+0x264>)
    e5ca:	681b      	ldr	r3, [r3, #0]
    e5cc:	2b10      	cmp	r3, #16
    e5ce:	d03c      	beq.n	e64a <le_advertising_report+0x1ae>
	return false;
    e5d0:	2300      	movs	r3, #0
	if (dup_found(adv)) {
    e5d2:	bb9b      	cbnz	r3, e63c <le_advertising_report+0x1a0>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    e5d4:	782b      	ldrb	r3, [r5, #0]
    e5d6:	f003 030f 	and.w	r3, r3, #15
    e5da:	2b01      	cmp	r3, #1
    e5dc:	d03b      	beq.n	e656 <le_advertising_report+0x1ba>
		data_len = (adv->len - BDADDR_SIZE);
    e5de:	786c      	ldrb	r4, [r5, #1]
    e5e0:	3c06      	subs	r4, #6
    e5e2:	b2e4      	uxtb	r4, r4
		  offsetof(struct pdu_adv, payload) + adv->len];
    e5e4:	786a      	ldrb	r2, [r5, #1]
    e5e6:	320a      	adds	r2, #10
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e5e8:	f816 a002 	ldrb.w	sl, [r6, r2]
    e5ec:	f1ca 0a00 	rsb	sl, sl, #0
    e5f0:	fa4f fa8a 	sxtb.w	sl, sl
	if (direct) {
    e5f4:	2f00      	cmp	r7, #0
    e5f6:	d041      	beq.n	e67c <le_advertising_report+0x1e0>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    e5f8:	2b01      	cmp	r3, #1
    e5fa:	d12e      	bne.n	e65a <le_advertising_report+0x1be>
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    e5fc:	2211      	movs	r2, #17
    e5fe:	210b      	movs	r1, #11
    e600:	4648      	mov	r0, r9
    e602:	f7fe fe8f 	bl	d324 <meta_evt>
    e606:	4604      	mov	r4, r0
		drp->num_reports = 1;
    e608:	2301      	movs	r3, #1
    e60a:	7003      	strb	r3, [r0, #0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    e60c:	7043      	strb	r3, [r0, #1]
		if (rl_idx < ll_rl_size_get()) {
    e60e:	f00b fce5 	bl	19fdc <ll_rl_size_get>
    e612:	4580      	cmp	r8, r0
    e614:	d227      	bcs.n	e666 <le_advertising_report+0x1ca>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    e616:	1ce2      	adds	r2, r4, #3
    e618:	1ca1      	adds	r1, r4, #2
    e61a:	4640      	mov	r0, r8
    e61c:	f00b fa86 	bl	19b2c <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    e620:	78a3      	ldrb	r3, [r4, #2]
    e622:	3302      	adds	r3, #2
    e624:	70a3      	strb	r3, [r4, #2]
		dir_info->dir_addr.type = 0x1;
    e626:	2301      	movs	r3, #1
    e628:	7263      	strb	r3, [r4, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    e62a:	2206      	movs	r2, #6
    e62c:	f105 0108 	add.w	r1, r5, #8
    e630:	f104 000a 	add.w	r0, r4, #10
    e634:	f7f1 fe44 	bl	2c0 <memcpy>
		dir_info->rssi = rssi;
    e638:	f884 a010 	strb.w	sl, [r4, #16]
}
    e63c:	b002      	add	sp, #8
    e63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
    e642:	3301      	adds	r3, #1
    e644:	4a2e      	ldr	r2, [pc, #184]	; (e700 <le_advertising_report+0x264>)
    e646:	6013      	str	r3, [r2, #0]
    e648:	e7be      	b.n	e5c8 <le_advertising_report+0x12c>
			dup_curr = 0;
    e64a:	2300      	movs	r3, #0
    e64c:	4a2c      	ldr	r2, [pc, #176]	; (e700 <le_advertising_report+0x264>)
    e64e:	6013      	str	r3, [r2, #0]
    e650:	e7bf      	b.n	e5d2 <le_advertising_report+0x136>
					return true;
    e652:	2301      	movs	r3, #1
    e654:	e7bd      	b.n	e5d2 <le_advertising_report+0x136>
		data_len = 0;
    e656:	2400      	movs	r4, #0
    e658:	e7c4      	b.n	e5e4 <le_advertising_report+0x148>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    e65a:	4040      	eors	r0, r0
    e65c:	f380 8811 	msr	BASEPRI, r0
    e660:	f04f 0004 	mov.w	r0, #4
    e664:	df02      	svc	2
			dir_info->addr.type = adv->tx_addr;
    e666:	4629      	mov	r1, r5
    e668:	f811 3b02 	ldrb.w	r3, [r1], #2
    e66c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e670:	70a3      	strb	r3, [r4, #2]
			memcpy(&dir_info->addr.a.val[0],
    e672:	2206      	movs	r2, #6
    e674:	1ce0      	adds	r0, r4, #3
    e676:	f7f1 fe23 	bl	2c0 <memcpy>
    e67a:	e7d4      	b.n	e626 <le_advertising_report+0x18a>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    e67c:	f104 020b 	add.w	r2, r4, #11
    e680:	b2d2      	uxtb	r2, r2
    e682:	2102      	movs	r1, #2
    e684:	4648      	mov	r0, r9
    e686:	f7fe fe4d 	bl	d324 <meta_evt>
    e68a:	4607      	mov	r7, r0
	sep->num_reports = 1;
    e68c:	2301      	movs	r3, #1
    e68e:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    e690:	782b      	ldrb	r3, [r5, #0]
    e692:	f003 030f 	and.w	r3, r3, #15
    e696:	aa02      	add	r2, sp, #8
    e698:	4413      	add	r3, r2
    e69a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    e69e:	7043      	strb	r3, [r0, #1]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    e6a0:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e6a2:	330b      	adds	r3, #11
    e6a4:	5cf6      	ldrb	r6, [r6, r3]
	if (rl_idx < ll_rl_size_get()) {
    e6a6:	f00b fc99 	bl	19fdc <ll_rl_size_get>
    e6aa:	4286      	cmp	r6, r0
    e6ac:	d212      	bcs.n	e6d4 <le_advertising_report+0x238>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    e6ae:	1cfa      	adds	r2, r7, #3
    e6b0:	1cb9      	adds	r1, r7, #2
    e6b2:	4630      	mov	r0, r6
    e6b4:	f00b fa3a 	bl	19b2c <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    e6b8:	78bb      	ldrb	r3, [r7, #2]
    e6ba:	3302      	adds	r3, #2
    e6bc:	70bb      	strb	r3, [r7, #2]
	adv_info->length = data_len;
    e6be:	727c      	strb	r4, [r7, #9]
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    e6c0:	370a      	adds	r7, #10
    e6c2:	4622      	mov	r2, r4
    e6c4:	f105 0108 	add.w	r1, r5, #8
    e6c8:	4638      	mov	r0, r7
    e6ca:	f7f1 fdf9 	bl	2c0 <memcpy>
	*prssi = rssi;
    e6ce:	f807 a004 	strb.w	sl, [r7, r4]
    e6d2:	e7b3      	b.n	e63c <le_advertising_report+0x1a0>
		adv_info->addr.type = adv->tx_addr;
    e6d4:	4629      	mov	r1, r5
    e6d6:	f811 3b02 	ldrb.w	r3, [r1], #2
    e6da:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e6de:	70bb      	strb	r3, [r7, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    e6e0:	2206      	movs	r2, #6
    e6e2:	1cf8      	adds	r0, r7, #3
    e6e4:	f7f1 fdec 	bl	2c0 <memcpy>
    e6e8:	e7e9      	b.n	e6be <le_advertising_report+0x222>
    e6ea:	bf00      	nop
    e6ec:	0002e528 	.word	0x0002e528
    e6f0:	2000bc60 	.word	0x2000bc60
    e6f4:	2000bc68 	.word	0x2000bc68
    e6f8:	20000b40 	.word	0x20000b40
    e6fc:	20000b48 	.word	0x20000b48
    e700:	20000b44 	.word	0x20000b44

0000e704 <le_adv_ext_report>:
		  offsetof(struct pdu_adv, payload) + adv->len];
    e704:	7842      	ldrb	r2, [r0, #1]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    e706:	7803      	ldrb	r3, [r0, #0]
    e708:	f003 030f 	and.w	r3, r3, #15
    e70c:	2b07      	cmp	r3, #7
    e70e:	d000      	beq.n	e712 <le_adv_ext_report+0xe>
    e710:	4770      	bx	lr
    e712:	2a00      	cmp	r2, #0
    e714:	d0fc      	beq.n	e710 <le_adv_ext_report+0xc>
		ptr = (u8_t *)h + sizeof(*h);
    e716:	1d01      	adds	r1, r0, #4
		if (!p->ext_hdr_len) {
    e718:	7883      	ldrb	r3, [r0, #2]
    e71a:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    e71e:	d0f7      	beq.n	e710 <le_adv_ext_report+0xc>
		if (h->adv_addr) {
    e720:	78c3      	ldrb	r3, [r0, #3]
    e722:	f013 0f01 	tst.w	r3, #1
    e726:	d0f3      	beq.n	e710 <le_adv_ext_report+0xc>
{
    e728:	b570      	push	{r4, r5, r6, lr}
    e72a:	b092      	sub	sp, #72	; 0x48
			addr.type = adv->tx_addr;
    e72c:	7803      	ldrb	r3, [r0, #0]
    e72e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e732:	f88d 3018 	strb.w	r3, [sp, #24]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    e736:	2206      	movs	r2, #6
    e738:	f10d 0019 	add.w	r0, sp, #25
    e73c:	f7f1 fdc0 	bl	2c0 <memcpy>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    e740:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e744:	2b03      	cmp	r3, #3
    e746:	d830      	bhi.n	e7aa <le_adv_ext_report+0xa6>
    e748:	e8df f003 	tbb	[pc, r3]
    e74c:	2a252002 	.word	0x2a252002
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    e750:	4919      	ldr	r1, [pc, #100]	; (e7b8 <le_adv_ext_report+0xb4>)
    e752:	a808      	add	r0, sp, #32
    e754:	f01b fe42 	bl	2a3dc <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    e758:	f89d 301e 	ldrb.w	r3, [sp, #30]
    e75c:	f89d 201d 	ldrb.w	r2, [sp, #29]
    e760:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    e764:	f89d 001b 	ldrb.w	r0, [sp, #27]
    e768:	f89d 401a 	ldrb.w	r4, [sp, #26]
    e76c:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e770:	ae08      	add	r6, sp, #32
    e772:	9605      	str	r6, [sp, #20]
    e774:	9504      	str	r5, [sp, #16]
    e776:	9403      	str	r4, [sp, #12]
    e778:	9002      	str	r0, [sp, #8]
    e77a:	9101      	str	r1, [sp, #4]
    e77c:	9200      	str	r2, [sp, #0]
    e77e:	4a0f      	ldr	r2, [pc, #60]	; (e7bc <le_adv_ext_report+0xb8>)
    e780:	211b      	movs	r1, #27
    e782:	a80b      	add	r0, sp, #44	; 0x2c
    e784:	f7f4 fbc4 	bl	2f10 <snprintk>
}
    e788:	b012      	add	sp, #72	; 0x48
    e78a:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    e78c:	490c      	ldr	r1, [pc, #48]	; (e7c0 <le_adv_ext_report+0xbc>)
    e78e:	a808      	add	r0, sp, #32
    e790:	f01b fe24 	bl	2a3dc <strcpy>
    e794:	e7e0      	b.n	e758 <le_adv_ext_report+0x54>
		strcpy(type, "public id");
    e796:	490b      	ldr	r1, [pc, #44]	; (e7c4 <le_adv_ext_report+0xc0>)
    e798:	a808      	add	r0, sp, #32
    e79a:	f01b fe1f 	bl	2a3dc <strcpy>
    e79e:	e7db      	b.n	e758 <le_adv_ext_report+0x54>
		strcpy(type, "random id");
    e7a0:	4909      	ldr	r1, [pc, #36]	; (e7c8 <le_adv_ext_report+0xc4>)
    e7a2:	a808      	add	r0, sp, #32
    e7a4:	f01b fe1a 	bl	2a3dc <strcpy>
    e7a8:	e7d6      	b.n	e758 <le_adv_ext_report+0x54>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e7aa:	4a08      	ldr	r2, [pc, #32]	; (e7cc <le_adv_ext_report+0xc8>)
    e7ac:	210a      	movs	r1, #10
    e7ae:	a808      	add	r0, sp, #32
    e7b0:	f7f4 fbae 	bl	2f10 <snprintk>
    e7b4:	e7d0      	b.n	e758 <le_adv_ext_report+0x54>
    e7b6:	bf00      	nop
    e7b8:	00030f84 	.word	0x00030f84
    e7bc:	00030fb4 	.word	0x00030fb4
    e7c0:	00030f8c 	.word	0x00030f8c
    e7c4:	00030f94 	.word	0x00030f94
    e7c8:	00030fa0 	.word	0x00030fa0
    e7cc:	00030fac 	.word	0x00030fac

0000e7d0 <le_adv_ext_1M_report>:
{
    e7d0:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    e7d2:	2301      	movs	r3, #1
    e7d4:	f7ff ff96 	bl	e704 <le_adv_ext_report>
    e7d8:	bd08      	pop	{r3, pc}

0000e7da <le_adv_ext_coded_report>:
{
    e7da:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    e7dc:	2304      	movs	r3, #4
    e7de:	f7ff ff91 	bl	e704 <le_adv_ext_report>
    e7e2:	bd08      	pop	{r3, pc}

0000e7e4 <le_scan_req_received>:
{
    e7e4:	b570      	push	{r4, r5, r6, lr}
    e7e6:	b092      	sub	sp, #72	; 0x48
    e7e8:	4604      	mov	r4, r0
    e7ea:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e7ec:	4b33      	ldr	r3, [pc, #204]	; (e8bc <le_scan_req_received+0xd8>)
    e7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    e7f2:	2200      	movs	r2, #0
    e7f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e7f8:	4313      	orrs	r3, r2
    e7fa:	d007      	beq.n	e80c <le_scan_req_received+0x28>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    e7fc:	4b30      	ldr	r3, [pc, #192]	; (e8c0 <le_scan_req_received+0xdc>)
    e7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    e802:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    e806:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e808:	4313      	orrs	r3, r2
    e80a:	d146      	bne.n	e89a <le_scan_req_received+0xb6>
		addr.type = adv->tx_addr;
    e80c:	4621      	mov	r1, r4
    e80e:	f811 3b02 	ldrb.w	r3, [r1], #2
    e812:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e816:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    e81a:	2206      	movs	r2, #6
    e81c:	f10d 0019 	add.w	r0, sp, #25
    e820:	f7f1 fd4e 	bl	2c0 <memcpy>
	switch (addr->type) {
    e824:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e828:	2b03      	cmp	r3, #3
    e82a:	d830      	bhi.n	e88e <le_scan_req_received+0xaa>
    e82c:	e8df f003 	tbb	[pc, r3]
    e830:	2a252002 	.word	0x2a252002
		strcpy(type, "public");
    e834:	4923      	ldr	r1, [pc, #140]	; (e8c4 <le_scan_req_received+0xe0>)
    e836:	a808      	add	r0, sp, #32
    e838:	f01b fdd0 	bl	2a3dc <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    e83c:	f89d 301e 	ldrb.w	r3, [sp, #30]
    e840:	f89d 201d 	ldrb.w	r2, [sp, #29]
    e844:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    e848:	f89d 001b 	ldrb.w	r0, [sp, #27]
    e84c:	f89d 401a 	ldrb.w	r4, [sp, #26]
    e850:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e854:	ae08      	add	r6, sp, #32
    e856:	9605      	str	r6, [sp, #20]
    e858:	9504      	str	r5, [sp, #16]
    e85a:	9403      	str	r4, [sp, #12]
    e85c:	9002      	str	r0, [sp, #8]
    e85e:	9101      	str	r1, [sp, #4]
    e860:	9200      	str	r2, [sp, #0]
    e862:	4a19      	ldr	r2, [pc, #100]	; (e8c8 <le_scan_req_received+0xe4>)
    e864:	211b      	movs	r1, #27
    e866:	a80b      	add	r0, sp, #44	; 0x2c
    e868:	f7f4 fb52 	bl	2f10 <snprintk>
}
    e86c:	b012      	add	sp, #72	; 0x48
    e86e:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    e870:	4916      	ldr	r1, [pc, #88]	; (e8cc <le_scan_req_received+0xe8>)
    e872:	a808      	add	r0, sp, #32
    e874:	f01b fdb2 	bl	2a3dc <strcpy>
    e878:	e7e0      	b.n	e83c <le_scan_req_received+0x58>
		strcpy(type, "public id");
    e87a:	4915      	ldr	r1, [pc, #84]	; (e8d0 <le_scan_req_received+0xec>)
    e87c:	a808      	add	r0, sp, #32
    e87e:	f01b fdad 	bl	2a3dc <strcpy>
    e882:	e7db      	b.n	e83c <le_scan_req_received+0x58>
		strcpy(type, "random id");
    e884:	4913      	ldr	r1, [pc, #76]	; (e8d4 <le_scan_req_received+0xf0>)
    e886:	a808      	add	r0, sp, #32
    e888:	f01b fda8 	bl	2a3dc <strcpy>
    e88c:	e7d6      	b.n	e83c <le_scan_req_received+0x58>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e88e:	4a12      	ldr	r2, [pc, #72]	; (e8d8 <le_scan_req_received+0xf4>)
    e890:	210a      	movs	r1, #10
    e892:	a808      	add	r0, sp, #32
    e894:	f7f4 fb3c 	bl	2f10 <snprintk>
    e898:	e7d0      	b.n	e83c <le_scan_req_received+0x58>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    e89a:	2208      	movs	r2, #8
    e89c:	2113      	movs	r1, #19
    e89e:	f7fe fd41 	bl	d324 <meta_evt>
	sep->handle = 0;
    e8a2:	2300      	movs	r3, #0
    e8a4:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    e8a6:	4621      	mov	r1, r4
    e8a8:	f811 3b02 	ldrb.w	r3, [r1], #2
    e8ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e8b0:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    e8b2:	2206      	movs	r2, #6
    e8b4:	3002      	adds	r0, #2
    e8b6:	f7f1 fd03 	bl	2c0 <memcpy>
    e8ba:	e7d7      	b.n	e86c <le_scan_req_received+0x88>
    e8bc:	2000bc60 	.word	0x2000bc60
    e8c0:	2000bc68 	.word	0x2000bc68
    e8c4:	00030f84 	.word	0x00030f84
    e8c8:	00030fb4 	.word	0x00030fb4
    e8cc:	00030f8c 	.word	0x00030f8c
    e8d0:	00030f94 	.word	0x00030f94
    e8d4:	00030fa0 	.word	0x00030fa0
    e8d8:	00030fac 	.word	0x00030fac

0000e8dc <encode_control>:
{
    e8dc:	b510      	push	{r4, lr}
    e8de:	460c      	mov	r4, r1
	handle = node_rx->hdr.handle;
    e8e0:	88c1      	ldrh	r1, [r0, #6]
	switch (node_rx->hdr.type) {
    e8e2:	7903      	ldrb	r3, [r0, #4]
    e8e4:	3b02      	subs	r3, #2
    e8e6:	2b0a      	cmp	r3, #10
    e8e8:	d837      	bhi.n	e95a <encode_control+0x7e>
    e8ea:	e8df f003 	tbb	[pc, r3]
    e8ee:	0b06      	.short	0x0b06
    e8f0:	1e1a1510 	.word	0x1e1a1510
    e8f4:	2e2a2622 	.word	0x2e2a2622
    e8f8:	32          	.byte	0x32
    e8f9:	00          	.byte	0x00
		le_advertising_report(pdu_data, b, buf);
    e8fa:	4601      	mov	r1, r0
    e8fc:	4620      	mov	r0, r4
    e8fe:	f7ff fdcd 	bl	e49c <le_advertising_report>
		break;
    e902:	bd10      	pop	{r4, pc}
		le_adv_ext_1M_report(pdu_data, b, buf);
    e904:	4601      	mov	r1, r0
    e906:	4620      	mov	r0, r4
    e908:	f7ff ff62 	bl	e7d0 <le_adv_ext_1M_report>
		break;
    e90c:	bd10      	pop	{r4, pc}
		le_adv_ext_coded_report(pdu_data, b, buf);
    e90e:	4601      	mov	r1, r0
    e910:	4620      	mov	r0, r4
    e912:	f7ff ff62 	bl	e7da <le_adv_ext_coded_report>
		break;
    e916:	bd10      	pop	{r4, pc}
		le_scan_req_received(pdu_data, b, buf);
    e918:	4601      	mov	r1, r0
    e91a:	4620      	mov	r0, r4
    e91c:	f7ff ff62 	bl	e7e4 <le_scan_req_received>
		break;
    e920:	bd10      	pop	{r4, pc}
		le_conn_complete(pdu_data, handle, buf);
    e922:	4620      	mov	r0, r4
    e924:	f7f7 f99e 	bl	5c64 <le_conn_complete>
		break;
    e928:	bd10      	pop	{r4, pc}
		disconn_complete(pdu_data, handle, buf);
    e92a:	4620      	mov	r0, r4
    e92c:	f7fe fd32 	bl	d394 <disconn_complete>
		break;
    e930:	bd10      	pop	{r4, pc}
		le_conn_update_complete(pdu_data, handle, buf);
    e932:	4620      	mov	r0, r4
    e934:	f7f6 f832 	bl	499c <le_conn_update_complete>
		break;
    e938:	bd10      	pop	{r4, pc}
		enc_refresh_complete(pdu_data, handle, buf);
    e93a:	4620      	mov	r0, r4
    e93c:	f7fe fd52 	bl	d3e4 <enc_refresh_complete>
		break;
    e940:	bd10      	pop	{r4, pc}
		auth_payload_timeout_exp(pdu_data, handle, buf);
    e942:	4620      	mov	r0, r4
    e944:	f7fe fd6c 	bl	d420 <auth_payload_timeout_exp>
		break;
    e948:	bd10      	pop	{r4, pc}
		le_chan_sel_algo(pdu_data, handle, buf);
    e94a:	4620      	mov	r0, r4
    e94c:	f7fe fcfe 	bl	d34c <le_chan_sel_algo>
		break;
    e950:	bd10      	pop	{r4, pc}
		le_phy_upd_complete(pdu_data, handle, buf);
    e952:	4620      	mov	r0, r4
    e954:	f7ff faa6 	bl	dea4 <le_phy_upd_complete>
		return;
    e958:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    e95a:	4040      	eors	r0, r0
    e95c:	f380 8811 	msr	BASEPRI, r0
    e960:	f04f 0004 	mov.w	r0, #4
    e964:	df02      	svc	2
	...

0000e968 <hci_cmd_handle>:
{
    e968:	b510      	push	{r4, lr}
    e96a:	b082      	sub	sp, #8
	struct net_buf *evt = NULL;
    e96c:	2300      	movs	r3, #0
    e96e:	9301      	str	r3, [sp, #4]
	if (cmd->len < sizeof(*chdr)) {
    e970:	8983      	ldrh	r3, [r0, #12]
    e972:	2b02      	cmp	r3, #2
    e974:	d94a      	bls.n	ea0c <hci_cmd_handle+0xa4>
	chdr = (void *)cmd->data;
    e976:	6882      	ldr	r2, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    e978:	8814      	ldrh	r4, [r2, #0]
    e97a:	4926      	ldr	r1, [pc, #152]	; (ea14 <hci_cmd_handle+0xac>)
    e97c:	800c      	strh	r4, [r1, #0]
	if (cmd->len < chdr->param_len) {
    e97e:	7892      	ldrb	r2, [r2, #2]
    e980:	4293      	cmp	r3, r2
    e982:	d345      	bcc.n	ea10 <hci_cmd_handle+0xa8>
    e984:	4604      	mov	r4, r0
	net_buf_pull(cmd, sizeof(*chdr));
    e986:	2103      	movs	r1, #3
    e988:	3008      	adds	r0, #8
    e98a:	f00c f974 	bl	1ac76 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    e98e:	4b21      	ldr	r3, [pc, #132]	; (ea14 <hci_cmd_handle+0xac>)
    e990:	881b      	ldrh	r3, [r3, #0]
    e992:	f3c3 0009 	ubfx	r0, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    e996:	0a9b      	lsrs	r3, r3, #10
    e998:	2b04      	cmp	r3, #4
    e99a:	d01c      	beq.n	e9d6 <hci_cmd_handle+0x6e>
    e99c:	d908      	bls.n	e9b0 <hci_cmd_handle+0x48>
    e99e:	2b08      	cmp	r3, #8
    e9a0:	d023      	beq.n	e9ea <hci_cmd_handle+0x82>
    e9a2:	2b3f      	cmp	r3, #63	; 0x3f
    e9a4:	d026      	beq.n	e9f4 <hci_cmd_handle+0x8c>
    e9a6:	2b05      	cmp	r3, #5
    e9a8:	d01a      	beq.n	e9e0 <hci_cmd_handle+0x78>
		err = -EINVAL;
    e9aa:	f06f 0015 	mvn.w	r0, #21
    e9ae:	e00c      	b.n	e9ca <hci_cmd_handle+0x62>
	switch (BT_OGF(_opcode)) {
    e9b0:	2b01      	cmp	r3, #1
    e9b2:	d006      	beq.n	e9c2 <hci_cmd_handle+0x5a>
    e9b4:	2b03      	cmp	r3, #3
    e9b6:	d1f8      	bne.n	e9aa <hci_cmd_handle+0x42>
		err = ctrl_bb_cmd_handle(ocf, cmd, &evt);
    e9b8:	aa01      	add	r2, sp, #4
    e9ba:	4621      	mov	r1, r4
    e9bc:	f7fe fe29 	bl	d612 <ctrl_bb_cmd_handle>
		break;
    e9c0:	e003      	b.n	e9ca <hci_cmd_handle+0x62>
		err = link_control_cmd_handle(ocf, cmd, &evt);
    e9c2:	aa01      	add	r2, sp, #4
    e9c4:	4621      	mov	r1, r4
    e9c6:	f7fe fd9b 	bl	d500 <link_control_cmd_handle>
	if (err == -EINVAL) {
    e9ca:	f110 0f16 	cmn.w	r0, #22
    e9ce:	d016      	beq.n	e9fe <hci_cmd_handle+0x96>
	return evt;
    e9d0:	9801      	ldr	r0, [sp, #4]
}
    e9d2:	b002      	add	sp, #8
    e9d4:	bd10      	pop	{r4, pc}
		err = info_cmd_handle(ocf, cmd, &evt);
    e9d6:	aa01      	add	r2, sp, #4
    e9d8:	4621      	mov	r1, r4
    e9da:	f7fe ffde 	bl	d99a <info_cmd_handle>
		break;
    e9de:	e7f4      	b.n	e9ca <hci_cmd_handle+0x62>
		err = status_cmd_handle(ocf, cmd, &evt);
    e9e0:	aa01      	add	r2, sp, #4
    e9e2:	4621      	mov	r1, r4
    e9e4:	f7fe fbcf 	bl	d186 <status_cmd_handle>
		break;
    e9e8:	e7ef      	b.n	e9ca <hci_cmd_handle+0x62>
		err = controller_cmd_handle(ocf, cmd, &evt);
    e9ea:	aa01      	add	r2, sp, #4
    e9ec:	4621      	mov	r1, r4
    e9ee:	f7ff fb8c 	bl	e10a <controller_cmd_handle>
		break;
    e9f2:	e7ea      	b.n	e9ca <hci_cmd_handle+0x62>
		err = vendor_cmd_handle(ocf, cmd, &evt);
    e9f4:	aa01      	add	r2, sp, #4
    e9f6:	4621      	mov	r1, r4
    e9f8:	f7ff f876 	bl	dae8 <vendor_cmd_handle>
		break;
    e9fc:	e7e5      	b.n	e9ca <hci_cmd_handle+0x62>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    e9fe:	2101      	movs	r1, #1
    ea00:	a801      	add	r0, sp, #4
    ea02:	f7fe fbf5 	bl	d1f0 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    ea06:	2301      	movs	r3, #1
    ea08:	7003      	strb	r3, [r0, #0]
    ea0a:	e7e1      	b.n	e9d0 <hci_cmd_handle+0x68>
		return NULL;
    ea0c:	2000      	movs	r0, #0
    ea0e:	e7e0      	b.n	e9d2 <hci_cmd_handle+0x6a>
		return NULL;
    ea10:	2000      	movs	r0, #0
    ea12:	e7de      	b.n	e9d2 <hci_cmd_handle+0x6a>
    ea14:	20000b38 	.word	0x20000b38

0000ea18 <hci_acl_handle>:
{
    ea18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    ea1c:	2300      	movs	r3, #0
    ea1e:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    ea20:	8983      	ldrh	r3, [r0, #12]
    ea22:	2b03      	cmp	r3, #3
    ea24:	d93e      	bls.n	eaa4 <hci_acl_handle+0x8c>
    ea26:	4689      	mov	r9, r1
    ea28:	4604      	mov	r4, r0
	acl = (void *)buf->data;
    ea2a:	f850 3f08 	ldr.w	r3, [r0, #8]!
	len = sys_le16_to_cpu(acl->len);
    ea2e:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    ea32:	881e      	ldrh	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    ea34:	2104      	movs	r1, #4
    ea36:	f00c f91e 	bl	1ac76 <net_buf_simple_pull>
	if (buf->len < len) {
    ea3a:	89a3      	ldrh	r3, [r4, #12]
    ea3c:	4598      	cmp	r8, r3
    ea3e:	d835      	bhi.n	eaac <hci_acl_handle+0x94>
	flags = bt_acl_flags(handle);
    ea40:	0b37      	lsrs	r7, r6, #12
	handle = bt_acl_handle(handle);
    ea42:	f3c6 060b 	ubfx	r6, r6, #0, #12
	radio_pdu_node_tx = radio_tx_mem_acquire();
    ea46:	f009 ff1f 	bl	18888 <radio_tx_mem_acquire>
	if (!radio_pdu_node_tx) {
    ea4a:	4605      	mov	r5, r0
    ea4c:	b140      	cbz	r0, ea60 <hci_acl_handle+0x48>
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    ea4e:	b177      	cbz	r7, ea6e <hci_acl_handle+0x56>
    ea50:	2f02      	cmp	r7, #2
    ea52:	d00c      	beq.n	ea6e <hci_acl_handle+0x56>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    ea54:	7903      	ldrb	r3, [r0, #4]
    ea56:	2201      	movs	r2, #1
    ea58:	f362 0301 	bfi	r3, r2, #0, #2
    ea5c:	7103      	strb	r3, [r0, #4]
    ea5e:	e00b      	b.n	ea78 <hci_acl_handle+0x60>
		data_buf_overflow(evt);
    ea60:	4648      	mov	r0, r9
    ea62:	f7ff fcbf 	bl	e3e4 <data_buf_overflow>
		return -ENOBUFS;
    ea66:	f06f 0068 	mvn.w	r0, #104	; 0x68
    ea6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    ea6e:	792b      	ldrb	r3, [r5, #4]
    ea70:	2202      	movs	r2, #2
    ea72:	f362 0301 	bfi	r3, r2, #0, #2
    ea76:	712b      	strb	r3, [r5, #4]
	pdu_data->len = len;
    ea78:	f885 8005 	strb.w	r8, [r5, #5]
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);
    ea7c:	4642      	mov	r2, r8
    ea7e:	68a1      	ldr	r1, [r4, #8]
    ea80:	1de8      	adds	r0, r5, #7
    ea82:	f7f1 fc1d 	bl	2c0 <memcpy>
	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    ea86:	4629      	mov	r1, r5
    ea88:	4630      	mov	r0, r6
    ea8a:	f009 ff0d 	bl	188a8 <radio_tx_mem_enqueue>
    ea8e:	b910      	cbnz	r0, ea96 <hci_acl_handle+0x7e>
	return 0;
    ea90:	2000      	movs	r0, #0
}
    ea92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		radio_tx_mem_release(radio_pdu_node_tx);
    ea96:	4628      	mov	r0, r5
    ea98:	f009 fefe 	bl	18898 <radio_tx_mem_release>
		return -EINVAL;
    ea9c:	f06f 0015 	mvn.w	r0, #21
    eaa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    eaa4:	f06f 0015 	mvn.w	r0, #21
    eaa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    eaac:	f06f 0015 	mvn.w	r0, #21
    eab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000eab4 <hci_acl_encode>:
{
    eab4:	b570      	push	{r4, r5, r6, lr}
	handle = node_rx->hdr.handle;
    eab6:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
    eab8:	7a03      	ldrb	r3, [r0, #8]
    eaba:	f003 0303 	and.w	r3, r3, #3
    eabe:	3b01      	subs	r3, #1
    eac0:	2b01      	cmp	r3, #1
    eac2:	d81d      	bhi.n	eb00 <hci_acl_encode+0x4c>
    eac4:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    eac6:	f101 0508 	add.w	r5, r1, #8
    eaca:	2104      	movs	r1, #4
    eacc:	4628      	mov	r0, r5
    eace:	f00c f885 	bl	1abdc <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    ead2:	7a23      	ldrb	r3, [r4, #8]
    ead4:	f003 0303 	and.w	r3, r3, #3
    ead8:	2b02      	cmp	r3, #2
    eada:	d00e      	beq.n	eafa <hci_acl_encode+0x46>
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    eadc:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    eae0:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    eae2:	7a63      	ldrb	r3, [r4, #9]
    eae4:	8043      	strh	r3, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
    eae6:	7a61      	ldrb	r1, [r4, #9]
    eae8:	4628      	mov	r0, r5
    eaea:	f00c f877 	bl	1abdc <net_buf_simple_add>
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
    eaee:	7a62      	ldrb	r2, [r4, #9]
    eaf0:	f104 010b 	add.w	r1, r4, #11
    eaf4:	f7f1 fbe4 	bl	2c0 <memcpy>
}
    eaf8:	bd70      	pop	{r4, r5, r6, pc}
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    eafa:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    eafe:	e7ef      	b.n	eae0 <hci_acl_encode+0x2c>
		LL_ASSERT(0);
    eb00:	4040      	eors	r0, r0
    eb02:	f380 8811 	msr	BASEPRI, r0
    eb06:	f04f 0004 	mov.w	r0, #4
    eb0a:	df02      	svc	2

0000eb0c <hci_evt_encode>:
{
    eb0c:	b510      	push	{r4, lr}
	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    eb0e:	f100 0408 	add.w	r4, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    eb12:	7903      	ldrb	r3, [r0, #4]
    eb14:	2b01      	cmp	r3, #1
    eb16:	d004      	beq.n	eb22 <hci_evt_encode+0x16>
		encode_control(node_rx, pdu_data, buf);
    eb18:	460a      	mov	r2, r1
    eb1a:	4621      	mov	r1, r4
    eb1c:	f7ff fede 	bl	e8dc <encode_control>
    eb20:	bd10      	pop	{r4, pc}
		encode_data_ctrl(node_rx, pdu_data, buf);
    eb22:	460a      	mov	r2, r1
    eb24:	4621      	mov	r1, r4
    eb26:	f7ff fc7d 	bl	e424 <encode_data_ctrl>
    eb2a:	bd10      	pop	{r4, pc}

0000eb2c <hci_num_cmplt_encode>:
{
    eb2c:	b570      	push	{r4, r5, r6, lr}
    eb2e:	4606      	mov	r6, r0
    eb30:	460d      	mov	r5, r1
    eb32:	4614      	mov	r4, r2
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    eb34:	2205      	movs	r2, #5
    eb36:	2113      	movs	r1, #19
    eb38:	f7fe fb28 	bl	d18c <evt_create>
	ep = net_buf_add(buf, len);
    eb3c:	2105      	movs	r1, #5
    eb3e:	f106 0008 	add.w	r0, r6, #8
    eb42:	f00c f84b 	bl	1abdc <net_buf_simple_add>
	ep->num_handles = num_handles;
    eb46:	2301      	movs	r3, #1
    eb48:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
    eb4a:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    eb4e:	f8a0 4003 	strh.w	r4, [r0, #3]
    eb52:	bd70      	pop	{r4, r5, r6, pc}

0000eb54 <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    eb54:	7903      	ldrb	r3, [r0, #4]
    eb56:	2b01      	cmp	r3, #1
    eb58:	d011      	beq.n	eb7e <hci_get_class+0x2a>
		switch (node_rx->hdr.type) {
    eb5a:	3b02      	subs	r3, #2
    eb5c:	2b0a      	cmp	r3, #10
    eb5e:	d80b      	bhi.n	eb78 <hci_get_class+0x24>
    eb60:	e8df f003 	tbb	[pc, r3]
    eb64:	06060606 	.word	0x06060606
    eb68:	08080816 	.word	0x08080816
    eb6c:	0808      	.short	0x0808
    eb6e:	08          	.byte	0x08
    eb6f:	00          	.byte	0x00
			return HCI_CLASS_EVT_DISCARDABLE;
    eb70:	2001      	movs	r0, #1
    eb72:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    eb74:	2002      	movs	r0, #2
    eb76:	4770      	bx	lr
			return -1;
    eb78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    eb7c:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    eb7e:	7a03      	ldrb	r3, [r0, #8]
    eb80:	f003 0303 	and.w	r3, r3, #3
    eb84:	2b03      	cmp	r3, #3
    eb86:	d001      	beq.n	eb8c <hci_get_class+0x38>
		return HCI_CLASS_ACL_DATA;
    eb88:	2003      	movs	r0, #3
}
    eb8a:	4770      	bx	lr
		return HCI_CLASS_EVT_CONNECTION;
    eb8c:	2002      	movs	r0, #2
    eb8e:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
    eb90:	2000      	movs	r0, #0
    eb92:	4770      	bx	lr

0000eb94 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    eb94:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    eb96:	4802      	ldr	r0, [pc, #8]	; (eba0 <_hci_driver_init+0xc>)
    eb98:	f7f7 fcec 	bl	6574 <bt_hci_driver_register>

	return 0;
}
    eb9c:	2000      	movs	r0, #0
    eb9e:	bd08      	pop	{r3, pc}
    eba0:	00031000 	.word	0x00031000

0000eba4 <acl_handle>:
{
    eba4:	b510      	push	{r4, lr}
    eba6:	b082      	sub	sp, #8
	err = hci_acl_handle(buf, &evt);
    eba8:	a901      	add	r1, sp, #4
    ebaa:	f7ff ff35 	bl	ea18 <hci_acl_handle>
    ebae:	4604      	mov	r4, r0
	if (evt) {
    ebb0:	9801      	ldr	r0, [sp, #4]
    ebb2:	b108      	cbz	r0, ebb8 <acl_handle+0x14>
		bt_recv_prio(evt);
    ebb4:	f7f7 fc8c 	bl	64d0 <bt_recv_prio>
}
    ebb8:	4620      	mov	r0, r4
    ebba:	b002      	add	sp, #8
    ebbc:	bd10      	pop	{r4, pc}

0000ebbe <cmd_handle>:
{
    ebbe:	b508      	push	{r3, lr}
	evt = hci_cmd_handle(buf);
    ebc0:	f7ff fed2 	bl	e968 <hci_cmd_handle>
	if (evt) {
    ebc4:	b108      	cbz	r0, ebca <cmd_handle+0xc>
		bt_recv_prio(evt);
    ebc6:	f7f7 fc83 	bl	64d0 <bt_recv_prio>
}
    ebca:	2000      	movs	r0, #0
    ebcc:	bd08      	pop	{r3, pc}

0000ebce <hci_driver_send>:
{
    ebce:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
    ebd0:	8983      	ldrh	r3, [r0, #12]
    ebd2:	b1cb      	cbz	r3, ec08 <hci_driver_send+0x3a>
    ebd4:	4604      	mov	r4, r0
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    ebd6:	f100 0310 	add.w	r3, r0, #16
    ebda:	89c2      	ldrh	r2, [r0, #14]
    ebdc:	4413      	add	r3, r2
    ebde:	3303      	adds	r3, #3
    ebe0:	f023 0303 	bic.w	r3, r3, #3
	return *(u8_t *)net_buf_user_data(buf);
    ebe4:	781b      	ldrb	r3, [r3, #0]
	switch (type) {
    ebe6:	b13b      	cbz	r3, ebf8 <hci_driver_send+0x2a>
    ebe8:	2b02      	cmp	r3, #2
    ebea:	d110      	bne.n	ec0e <hci_driver_send+0x40>
		err = acl_handle(buf);
    ebec:	f7ff ffda 	bl	eba4 <acl_handle>
    ebf0:	4605      	mov	r5, r0
	if (!err) {
    ebf2:	b12d      	cbz	r5, ec00 <hci_driver_send+0x32>
}
    ebf4:	4628      	mov	r0, r5
    ebf6:	bd38      	pop	{r3, r4, r5, pc}
		err = cmd_handle(buf);
    ebf8:	f7ff ffe1 	bl	ebbe <cmd_handle>
    ebfc:	4605      	mov	r5, r0
		break;
    ebfe:	e7f8      	b.n	ebf2 <hci_driver_send+0x24>
		net_buf_unref(buf);
    ec00:	4620      	mov	r0, r4
    ec02:	f00b ff9f 	bl	1ab44 <net_buf_unref>
    ec06:	e7f5      	b.n	ebf4 <hci_driver_send+0x26>
		return -EINVAL;
    ec08:	f06f 0515 	mvn.w	r5, #21
    ec0c:	e7f2      	b.n	ebf4 <hci_driver_send+0x26>
		return -EINVAL;
    ec0e:	f06f 0515 	mvn.w	r5, #21
    ec12:	e7ef      	b.n	ebf4 <hci_driver_send+0x26>

0000ec14 <prio_recv_thread>:
{
    ec14:	b530      	push	{r4, r5, lr}
    ec16:	b087      	sub	sp, #28
    ec18:	e00f      	b.n	ec3a <prio_recv_thread+0x26>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    ec1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ec1e:	2001      	movs	r0, #1
    ec20:	f7f7 fe0c 	bl	683c <bt_buf_get_rx>
    ec24:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    ec26:	4622      	mov	r2, r4
    ec28:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    ec2c:	f7ff ff7e 	bl	eb2c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    ec30:	4628      	mov	r0, r5
    ec32:	f7f7 fc4d 	bl	64d0 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    ec36:	f01a f977 	bl	28f28 <_impl_k_yield>
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    ec3a:	f10d 0112 	add.w	r1, sp, #18
    ec3e:	a805      	add	r0, sp, #20
    ec40:	f009 fd22 	bl	18688 <radio_rx_get>
    ec44:	4604      	mov	r4, r0
    ec46:	2800      	cmp	r0, #0
    ec48:	d1e7      	bne.n	ec1a <prio_recv_thread+0x6>
		if (node_rx) {
    ec4a:	9b05      	ldr	r3, [sp, #20]
    ec4c:	b133      	cbz	r3, ec5c <prio_recv_thread+0x48>
			radio_rx_dequeue();
    ec4e:	f00a fa5b 	bl	19108 <radio_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    ec52:	9905      	ldr	r1, [sp, #20]
    ec54:	481a      	ldr	r0, [pc, #104]	; (ecc0 <prio_recv_thread+0xac>)
    ec56:	f019 ff29 	bl	28aac <k_queue_append>
    ec5a:	e7ee      	b.n	ec3a <prio_recv_thread+0x26>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    ec5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ec60:	4818      	ldr	r0, [pc, #96]	; (ecc4 <prio_recv_thread+0xb0>)
    ec62:	f01a facd 	bl	29200 <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    ec66:	f01a fb17 	bl	29298 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
    ec6a:	4b17      	ldr	r3, [pc, #92]	; (ecc8 <prio_recv_thread+0xb4>)
    ec6c:	681b      	ldr	r3, [r3, #0]
    ec6e:	1ac3      	subs	r3, r0, r3
    ec70:	f241 3288 	movw	r2, #5000	; 0x1388
    ec74:	4293      	cmp	r3, r2
    ec76:	d9e0      	bls.n	ec3a <prio_recv_thread+0x26>
	for (i = 0; i < size; i++) {
    ec78:	2200      	movs	r2, #0
	size_t unused = 0;
    ec7a:	4613      	mov	r3, r2
    ec7c:	e001      	b.n	ec82 <prio_recv_thread+0x6e>
			unused++;
    ec7e:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    ec80:	3201      	adds	r2, #1
    ec82:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
    ec86:	d203      	bcs.n	ec90 <prio_recv_thread+0x7c>
		if ((unsigned char)stack[i] == 0xaa) {
    ec88:	4910      	ldr	r1, [pc, #64]	; (eccc <prio_recv_thread+0xb8>)
    ec8a:	5c89      	ldrb	r1, [r1, r2]
    ec8c:	29aa      	cmp	r1, #170	; 0xaa
    ec8e:	d0f6      	beq.n	ec7e <prio_recv_thread+0x6a>
	pcnt = ((size - unused) * 100) / size;
    ec90:	f5c3 71e0 	rsb	r1, r3, #448	; 0x1c0
    ec94:	2264      	movs	r2, #100	; 0x64
    ec96:	fb02 f201 	mul.w	r2, r2, r1
    ec9a:	0992      	lsrs	r2, r2, #6
    ec9c:	480c      	ldr	r0, [pc, #48]	; (ecd0 <prio_recv_thread+0xbc>)
    ec9e:	fba0 0202 	umull	r0, r2, r0, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    eca2:	9202      	str	r2, [sp, #8]
    eca4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    eca8:	9201      	str	r2, [sp, #4]
    ecaa:	9100      	str	r1, [sp, #0]
    ecac:	4909      	ldr	r1, [pc, #36]	; (ecd4 <prio_recv_thread+0xc0>)
    ecae:	480a      	ldr	r0, [pc, #40]	; (ecd8 <prio_recv_thread+0xc4>)
    ecb0:	f7f4 f920 	bl	2ef4 <printk>
    ecb4:	f01a faf0 	bl	29298 <_impl_k_uptime_get_32>
			prio_ts = k_uptime_get_32();
    ecb8:	4b03      	ldr	r3, [pc, #12]	; (ecc8 <prio_recv_thread+0xb4>)
    ecba:	6018      	str	r0, [r3, #0]
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    ecbc:	e7bd      	b.n	ec3a <prio_recv_thread+0x26>
    ecbe:	bf00      	nop
    ecc0:	2000d1e4 	.word	0x2000d1e4
    ecc4:	2000d174 	.word	0x2000d174
    ecc8:	20000bd0 	.word	0x20000bd0
    eccc:	20004298 	.word	0x20004298
    ecd0:	2492492d 	.word	0x2492492d
    ecd4:	00031010 	.word	0x00031010
    ecd8:	00030d78 	.word	0x00030d78

0000ecdc <hci_driver_open>:
{
    ecdc:	b530      	push	{r4, r5, lr}
    ecde:	b087      	sub	sp, #28
	err = ll_init(&sem_prio_recv);
    ece0:	4814      	ldr	r0, [pc, #80]	; (ed34 <hci_driver_open+0x58>)
    ece2:	f00a fb39 	bl	19358 <ll_init>
	if (err) {
    ece6:	4605      	mov	r5, r0
    ece8:	b110      	cbz	r0, ecf0 <hci_driver_open+0x14>
}
    ecea:	4628      	mov	r0, r5
    ecec:	b007      	add	sp, #28
    ecee:	bd30      	pop	{r4, r5, pc}
	hci_init(NULL);
    ecf0:	f7f6 fc66 	bl	55c0 <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    ecf4:	2400      	movs	r4, #0
    ecf6:	9405      	str	r4, [sp, #20]
    ecf8:	9404      	str	r4, [sp, #16]
    ecfa:	f06f 0309 	mvn.w	r3, #9
    ecfe:	9303      	str	r3, [sp, #12]
    ed00:	9402      	str	r4, [sp, #8]
    ed02:	9401      	str	r4, [sp, #4]
    ed04:	9400      	str	r4, [sp, #0]
    ed06:	4b0c      	ldr	r3, [pc, #48]	; (ed38 <hci_driver_open+0x5c>)
    ed08:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    ed0c:	490b      	ldr	r1, [pc, #44]	; (ed3c <hci_driver_open+0x60>)
    ed0e:	480c      	ldr	r0, [pc, #48]	; (ed40 <hci_driver_open+0x64>)
    ed10:	f01a fce2 	bl	296d8 <_impl_k_thread_create>
    ed14:	9405      	str	r4, [sp, #20]
    ed16:	9404      	str	r4, [sp, #16]
    ed18:	f06f 0307 	mvn.w	r3, #7
    ed1c:	9303      	str	r3, [sp, #12]
    ed1e:	9402      	str	r4, [sp, #8]
    ed20:	9401      	str	r4, [sp, #4]
    ed22:	9400      	str	r4, [sp, #0]
    ed24:	4b07      	ldr	r3, [pc, #28]	; (ed44 <hci_driver_open+0x68>)
    ed26:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ed2a:	4907      	ldr	r1, [pc, #28]	; (ed48 <hci_driver_open+0x6c>)
    ed2c:	4807      	ldr	r0, [pc, #28]	; (ed4c <hci_driver_open+0x70>)
    ed2e:	f01a fcd3 	bl	296d8 <_impl_k_thread_create>
	return 0;
    ed32:	e7da      	b.n	ecea <hci_driver_open+0xe>
    ed34:	2000d174 	.word	0x2000d174
    ed38:	0000ec15 	.word	0x0000ec15
    ed3c:	20004298 	.word	0x20004298
    ed40:	20002bf4 	.word	0x20002bf4
    ed44:	0000ed51 	.word	0x0000ed51
    ed48:	20004458 	.word	0x20004458
    ed4c:	20002ac0 	.word	0x20002ac0

0000ed50 <recv_thread>:
{
    ed50:	b510      	push	{r4, lr}
    ed52:	b086      	sub	sp, #24
    ed54:	e029      	b.n	edaa <recv_thread+0x5a>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    ed56:	2801      	cmp	r0, #1
    ed58:	d042      	beq.n	ede0 <recv_thread+0x90>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    ed5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ed5e:	2001      	movs	r0, #1
    ed60:	f7f7 fd6c 	bl	683c <bt_buf_get_rx>
    ed64:	4604      	mov	r4, r0
		if (buf) {
    ed66:	b11c      	cbz	r4, ed70 <recv_thread+0x20>
			hci_evt_encode(node_rx, buf);
    ed68:	4621      	mov	r1, r4
    ed6a:	9805      	ldr	r0, [sp, #20]
    ed6c:	f7ff fece 	bl	eb0c <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    ed70:	2100      	movs	r1, #0
    ed72:	9b05      	ldr	r3, [sp, #20]
    ed74:	88d8      	ldrh	r0, [r3, #6]
    ed76:	f009 fd4b 	bl	18810 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    ed7a:	a806      	add	r0, sp, #24
    ed7c:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    ed80:	2200      	movs	r2, #0
    ed82:	601a      	str	r2, [r3, #0]
	radio_rx_mem_release(&node_rx);
    ed84:	f009 fcc0 	bl	18708 <radio_rx_mem_release>
		if (buf) {
    ed88:	b124      	cbz	r4, ed94 <recv_thread+0x44>
			if (buf->len) {
    ed8a:	89a3      	ldrh	r3, [r4, #12]
    ed8c:	b3ab      	cbz	r3, edfa <recv_thread+0xaa>
				bt_recv(buf);
    ed8e:	4620      	mov	r0, r4
    ed90:	f7f7 fb74 	bl	647c <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    ed94:	f01a f8c8 	bl	28f28 <_impl_k_yield>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    ed98:	f01a fa7e 	bl	29298 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
    ed9c:	4b29      	ldr	r3, [pc, #164]	; (ee44 <recv_thread+0xf4>)
    ed9e:	681b      	ldr	r3, [r3, #0]
    eda0:	1ac0      	subs	r0, r0, r3
    eda2:	f241 3388 	movw	r3, #5000	; 0x1388
    eda6:	4298      	cmp	r0, r3
    eda8:	d82b      	bhi.n	ee02 <recv_thread+0xb2>
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    edaa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    edae:	4826      	ldr	r0, [pc, #152]	; (ee48 <recv_thread+0xf8>)
    edb0:	f019 fea4 	bl	28afc <k_queue_get>
		if (node_rx && !buf) {
    edb4:	b1f8      	cbz	r0, edf6 <recv_thread+0xa6>
    edb6:	4604      	mov	r4, r0
	s8_t class = hci_get_class(node_rx);
    edb8:	f7ff fecc 	bl	eb54 <hci_get_class>
    edbc:	9405      	str	r4, [sp, #20]
	switch (class) {
    edbe:	2800      	cmp	r0, #0
    edc0:	db13      	blt.n	edea <recv_thread+0x9a>
    edc2:	2802      	cmp	r0, #2
    edc4:	ddc7      	ble.n	ed56 <recv_thread+0x6>
    edc6:	2803      	cmp	r0, #3
    edc8:	d10f      	bne.n	edea <recv_thread+0x9a>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    edca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    edce:	2003      	movs	r0, #3
    edd0:	f7f7 fd34 	bl	683c <bt_buf_get_rx>
    edd4:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    edd6:	4601      	mov	r1, r0
    edd8:	9805      	ldr	r0, [sp, #20]
    edda:	f7ff fe6b 	bl	eab4 <hci_acl_encode>
    edde:	e7c7      	b.n	ed70 <recv_thread+0x20>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    ede0:	2100      	movs	r1, #0
    ede2:	f7f7 fd2b 	bl	683c <bt_buf_get_rx>
    ede6:	4604      	mov	r4, r0
    ede8:	e7bd      	b.n	ed66 <recv_thread+0x16>
		LL_ASSERT(0);
    edea:	4040      	eors	r0, r0
    edec:	f380 8811 	msr	BASEPRI, r0
    edf0:	f04f 0004 	mov.w	r0, #4
    edf4:	df02      	svc	2
		struct net_buf *buf = NULL;
    edf6:	2400      	movs	r4, #0
    edf8:	e7c6      	b.n	ed88 <recv_thread+0x38>
				net_buf_unref(buf);
    edfa:	4620      	mov	r0, r4
    edfc:	f00b fea2 	bl	1ab44 <net_buf_unref>
    ee00:	e7c8      	b.n	ed94 <recv_thread+0x44>
	for (i = 0; i < size; i++) {
    ee02:	2200      	movs	r2, #0
	size_t unused = 0;
    ee04:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    ee06:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    ee0a:	d206      	bcs.n	ee1a <recv_thread+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
    ee0c:	490f      	ldr	r1, [pc, #60]	; (ee4c <recv_thread+0xfc>)
    ee0e:	5c89      	ldrb	r1, [r1, r2]
    ee10:	29aa      	cmp	r1, #170	; 0xaa
    ee12:	d102      	bne.n	ee1a <recv_thread+0xca>
			unused++;
    ee14:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    ee16:	3201      	adds	r2, #1
    ee18:	e7f5      	b.n	ee06 <recv_thread+0xb6>
	pcnt = ((size - unused) * 100) / size;
    ee1a:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
    ee1e:	2264      	movs	r2, #100	; 0x64
    ee20:	fb02 f201 	mul.w	r2, r2, r1
    ee24:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    ee26:	9202      	str	r2, [sp, #8]
    ee28:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ee2c:	9201      	str	r2, [sp, #4]
    ee2e:	9100      	str	r1, [sp, #0]
    ee30:	4907      	ldr	r1, [pc, #28]	; (ee50 <recv_thread+0x100>)
    ee32:	4808      	ldr	r0, [pc, #32]	; (ee54 <recv_thread+0x104>)
    ee34:	f7f4 f85e 	bl	2ef4 <printk>
    ee38:	f01a fa2e 	bl	29298 <_impl_k_uptime_get_32>
			rx_ts = k_uptime_get_32();
    ee3c:	4b01      	ldr	r3, [pc, #4]	; (ee44 <recv_thread+0xf4>)
    ee3e:	6018      	str	r0, [r3, #0]
    ee40:	e7b3      	b.n	edaa <recv_thread+0x5a>
    ee42:	bf00      	nop
    ee44:	20000bd4 	.word	0x20000bd4
    ee48:	2000d1e4 	.word	0x2000d1e4
    ee4c:	20004458 	.word	0x20004458
    ee50:	00031028 	.word	0x00031028
    ee54:	00030d78 	.word	0x00030d78

0000ee58 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static void *mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT][2];

void mayfly_init(void)
{
    ee58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    ee5a:	2304      	movs	r3, #4
	while (callee_id--) {
    ee5c:	e01d      	b.n	ee9a <mayfly_init+0x42>
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    ee5e:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    ee62:	4911      	ldr	r1, [pc, #68]	; (eea8 <mayfly_init+0x50>)
    ee64:	0065      	lsls	r5, r4, #1
    ee66:	192b      	adds	r3, r5, r4
    ee68:	009a      	lsls	r2, r3, #2
    ee6a:	0073      	lsls	r3, r6, #1
    ee6c:	eb03 0e06 	add.w	lr, r3, r6
    ee70:	ea4f 170e 	mov.w	r7, lr, lsl #4
    ee74:	46be      	mov	lr, r7
    ee76:	443a      	add	r2, r7
    ee78:	440a      	add	r2, r1
    ee7a:	4425      	add	r5, r4
    ee7c:	00af      	lsls	r7, r5, #2
    ee7e:	4477      	add	r7, lr
    ee80:	3204      	adds	r2, #4
    ee82:	4439      	add	r1, r7
    ee84:	4b09      	ldr	r3, [pc, #36]	; (eeac <mayfly_init+0x54>)
    ee86:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    ee8a:	f000 f9f5 	bl	f278 <memq_init>
		while (caller_id--) {
    ee8e:	4623      	mov	r3, r4
    ee90:	1e5c      	subs	r4, r3, #1
    ee92:	b2e4      	uxtb	r4, r4
    ee94:	2b00      	cmp	r3, #0
    ee96:	d1e2      	bne.n	ee5e <mayfly_init+0x6>
	while (callee_id--) {
    ee98:	4633      	mov	r3, r6
    ee9a:	1e5e      	subs	r6, r3, #1
    ee9c:	b2f6      	uxtb	r6, r6
    ee9e:	b10b      	cbz	r3, eea4 <mayfly_init+0x4c>
    eea0:	2304      	movs	r3, #4
    eea2:	e7f5      	b.n	ee90 <mayfly_init+0x38>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    eea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eea6:	bf00      	nop
    eea8:	20000c58 	.word	0x20000c58
    eeac:	20000bd8 	.word	0x20000bd8

0000eeb0 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    eeb0:	b570      	push	{r4, r5, r6, lr}
	if (enable) {
    eeb2:	b1ea      	cbz	r2, eef0 <mayfly_enable+0x40>
    eeb4:	4615      	mov	r5, r2
		if (mft[callee_id][caller_id].enable_req ==
    eeb6:	0042      	lsls	r2, r0, #1
    eeb8:	4402      	add	r2, r0
    eeba:	0093      	lsls	r3, r2, #2
    eebc:	004c      	lsls	r4, r1, #1
    eebe:	440c      	add	r4, r1
    eec0:	0122      	lsls	r2, r4, #4
    eec2:	441a      	add	r2, r3
    eec4:	4b18      	ldr	r3, [pc, #96]	; (ef28 <mayfly_enable+0x78>)
    eec6:	4413      	add	r3, r2
    eec8:	7a1a      	ldrb	r2, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    eeca:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req ==
    eecc:	429a      	cmp	r2, r3
    eece:	d003      	beq.n	eed8 <mayfly_enable+0x28>
			mft[callee_id][caller_id].enable_req++;
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    eed0:	462a      	mov	r2, r5
    eed2:	f00a f9e8 	bl	192a6 <mayfly_enable_cb>
    eed6:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].enable_req++;
    eed8:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    eedc:	00a3      	lsls	r3, r4, #2
    eede:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    eee2:	0134      	lsls	r4, r6, #4
    eee4:	4423      	add	r3, r4
    eee6:	4c10      	ldr	r4, [pc, #64]	; (ef28 <mayfly_enable+0x78>)
    eee8:	4423      	add	r3, r4
    eeea:	3201      	adds	r2, #1
    eeec:	721a      	strb	r2, [r3, #8]
    eeee:	e7ef      	b.n	eed0 <mayfly_enable+0x20>
	} else {
		if (mft[callee_id][caller_id].disable_req ==
    eef0:	0042      	lsls	r2, r0, #1
    eef2:	4402      	add	r2, r0
    eef4:	0093      	lsls	r3, r2, #2
    eef6:	004c      	lsls	r4, r1, #1
    eef8:	440c      	add	r4, r1
    eefa:	0122      	lsls	r2, r4, #4
    eefc:	441a      	add	r2, r3
    eefe:	4b0a      	ldr	r3, [pc, #40]	; (ef28 <mayfly_enable+0x78>)
    ef00:	4413      	add	r3, r2
    ef02:	7a9a      	ldrb	r2, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    ef04:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req ==
    ef06:	429a      	cmp	r2, r3
    ef08:	d000      	beq.n	ef0c <mayfly_enable+0x5c>
    ef0a:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].disable_req++;
    ef0c:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    ef10:	00a3      	lsls	r3, r4, #2
    ef12:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    ef16:	012c      	lsls	r4, r5, #4
    ef18:	4423      	add	r3, r4
    ef1a:	4c03      	ldr	r4, [pc, #12]	; (ef28 <mayfly_enable+0x78>)
    ef1c:	4423      	add	r3, r4
    ef1e:	3201      	adds	r2, #1
    ef20:	729a      	strb	r2, [r3, #10]

			mayfly_pend(caller_id, callee_id);
    ef22:	f00a f9f7 	bl	19314 <mayfly_pend>
		}
	}
}
    ef26:	e7f0      	b.n	ef0a <mayfly_enable+0x5a>
    ef28:	20000c58 	.word	0x20000c58

0000ef2c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    ef2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef2e:	4605      	mov	r5, r0
    ef30:	460e      	mov	r6, r1
    ef32:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    ef34:	b19a      	cbz	r2, ef5e <mayfly_enqueue+0x32>
    ef36:	2101      	movs	r1, #1
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    ef38:	b2c9      	uxtb	r1, r1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    ef3a:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    ef3c:	7823      	ldrb	r3, [r4, #0]
    ef3e:	1a9b      	subs	r3, r3, r2
	if (state != 0) {
    ef40:	f013 0303 	ands.w	r3, r3, #3
    ef44:	d032      	beq.n	efac <mayfly_enqueue+0x80>
		if (chain) {
    ef46:	b371      	cbz	r1, efa6 <mayfly_enqueue+0x7a>
			if (state != 1) {
    ef48:	2b01      	cmp	r3, #1
    ef4a:	d04c      	beq.n	efe6 <mayfly_enqueue+0xba>
				/* mark as ready in queue */
				m->_req = ack + 1;
    ef4c:	3201      	adds	r2, #1
    ef4e:	b2d2      	uxtb	r2, r2
    ef50:	7022      	strb	r2, [r4, #0]

				/* pend the callee for execution */
				mayfly_pend(caller_id, callee_id);
    ef52:	4631      	mov	r1, r6
    ef54:	4628      	mov	r0, r5
    ef56:	f00a f9dd 	bl	19314 <mayfly_pend>

				return 0;
    ef5a:	2000      	movs	r0, #0
    ef5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    ef5e:	f00a f9c6 	bl	192ee <mayfly_prio_is_equal>
    ef62:	b908      	cbnz	r0, ef68 <mayfly_enqueue+0x3c>
		!mayfly_is_enabled(caller_id, callee_id) ||
    ef64:	2101      	movs	r1, #1
    ef66:	e7e7      	b.n	ef38 <mayfly_enqueue+0xc>
    ef68:	4631      	mov	r1, r6
    ef6a:	4628      	mov	r0, r5
    ef6c:	f00a f9ad 	bl	192ca <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    ef70:	b1b8      	cbz	r0, efa2 <mayfly_enqueue+0x76>
		(mft[callee_id][caller_id].disable_req !=
    ef72:	481e      	ldr	r0, [pc, #120]	; (efec <mayfly_enqueue+0xc0>)
    ef74:	0069      	lsls	r1, r5, #1
    ef76:	194a      	adds	r2, r1, r5
    ef78:	0093      	lsls	r3, r2, #2
    ef7a:	0072      	lsls	r2, r6, #1
    ef7c:	eb02 0e06 	add.w	lr, r2, r6
    ef80:	ea4f 170e 	mov.w	r7, lr, lsl #4
    ef84:	46be      	mov	lr, r7
    ef86:	443b      	add	r3, r7
    ef88:	4403      	add	r3, r0
    ef8a:	7a9f      	ldrb	r7, [r3, #10]
		 mft[callee_id][caller_id].disable_ack);
    ef8c:	194b      	adds	r3, r1, r5
    ef8e:	0099      	lsls	r1, r3, #2
    ef90:	4471      	add	r1, lr
    ef92:	4408      	add	r0, r1
    ef94:	7ac3      	ldrb	r3, [r0, #11]
		!mayfly_is_enabled(caller_id, callee_id) ||
    ef96:	429f      	cmp	r7, r3
    ef98:	d001      	beq.n	ef9e <mayfly_enqueue+0x72>
    ef9a:	2101      	movs	r1, #1
    ef9c:	e7cc      	b.n	ef38 <mayfly_enqueue+0xc>
    ef9e:	2100      	movs	r1, #0
    efa0:	e7ca      	b.n	ef38 <mayfly_enqueue+0xc>
    efa2:	2101      	movs	r1, #1
    efa4:	e7c8      	b.n	ef38 <mayfly_enqueue+0xc>
			/* already ready */
			return 1;
		}

		/* mark as done in queue, and fall thru */
		m->_req = ack + 2;
    efa6:	1c93      	adds	r3, r2, #2
    efa8:	b2db      	uxtb	r3, r3
    efaa:	7023      	strb	r3, [r4, #0]
	}

	/* handle mayfly(s) that can be inline */
	if (!chain) {
    efac:	b1b1      	cbz	r1, efdc <mayfly_enqueue+0xb0>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    efae:	3201      	adds	r2, #1
    efb0:	b2d2      	uxtb	r2, r2
    efb2:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m, m->_link, &mft[callee_id][caller_id].tail);
    efb4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    efb8:	009a      	lsls	r2, r3, #2
    efba:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    efbe:	010b      	lsls	r3, r1, #4
    efc0:	441a      	add	r2, r3
    efc2:	4b0a      	ldr	r3, [pc, #40]	; (efec <mayfly_enqueue+0xc0>)
    efc4:	441a      	add	r2, r3
    efc6:	3204      	adds	r2, #4
    efc8:	6861      	ldr	r1, [r4, #4]
    efca:	4620      	mov	r0, r4
    efcc:	f000 f957 	bl	f27e <memq_enqueue>

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    efd0:	4631      	mov	r1, r6
    efd2:	4628      	mov	r0, r5
    efd4:	f00a f99e 	bl	19314 <mayfly_pend>

	return 0;
    efd8:	2000      	movs	r0, #0
    efda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		m->fp(m->param);
    efdc:	68e3      	ldr	r3, [r4, #12]
    efde:	68a0      	ldr	r0, [r4, #8]
    efe0:	4798      	blx	r3
		return 0;
    efe2:	2000      	movs	r0, #0
    efe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return 1;
    efe6:	2001      	movs	r0, #1
}
    efe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    efea:	bf00      	nop
    efec:	20000c58 	.word	0x20000c58

0000eff0 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    eff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eff4:	b085      	sub	sp, #20
    eff6:	4682      	mov	sl, r0
	u8_t disable = 0;
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    eff8:	2304      	movs	r3, #4
	u8_t enable = 0;
    effa:	f04f 0b00 	mov.w	fp, #0
	u8_t disable = 0;
    effe:	f8cd b004 	str.w	fp, [sp, #4]
	while (caller_id--) {
    f002:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    f006:	fa5f f989 	uxtb.w	r9, r9
    f00a:	2b00      	cmp	r3, #0
    f00c:	f000 809b 	beq.w	f146 <mayfly_run+0x156>
		void *link;
		struct mayfly *m = 0;
    f010:	aa04      	add	r2, sp, #16
    f012:	2300      	movs	r3, #0
    f014:	f842 3d04 	str.w	r3, [r2, #-4]!

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    f018:	4657      	mov	r7, sl
    f01a:	464e      	mov	r6, r9
    f01c:	4850      	ldr	r0, [pc, #320]	; (f160 <mayfly_run+0x170>)
    f01e:	ea4f 0149 	mov.w	r1, r9, lsl #1
    f022:	4449      	add	r1, r9
    f024:	008b      	lsls	r3, r1, #2
    f026:	ea4f 014a 	mov.w	r1, sl, lsl #1
    f02a:	4451      	add	r1, sl
    f02c:	010c      	lsls	r4, r1, #4
    f02e:	4423      	add	r3, r4
    f030:	18c4      	adds	r4, r0, r3
    f032:	58c1      	ldr	r1, [r0, r3]
    f034:	6860      	ldr	r0, [r4, #4]
    f036:	f000 f929 	bl	f28c <memq_peek>
    f03a:	4680      	mov	r8, r0
				 mft[callee_id][caller_id].head,
				 (void **)&m);
		while (link) {
    f03c:	e017      	b.n	f06e <mayfly_run+0x7e>
			/* execute work if ready */
			req = m->_req;
			state = (req - m->_ack) & 0x03;
			if (state == 1) {
				/* mark mayfly as ran */
				m->_ack--;
    f03e:	3a01      	subs	r2, #1
    f040:	705a      	strb	r2, [r3, #1]

				/* call the mayfly function */
				m->fp(m->param);
    f042:	9b03      	ldr	r3, [sp, #12]
    f044:	68da      	ldr	r2, [r3, #12]
    f046:	6898      	ldr	r0, [r3, #8]
    f048:	4790      	blx	r2
    f04a:	e01b      	b.n	f084 <mayfly_run+0x94>
				/* reset mayfly state to idle */
				m->_ack = req;
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    f04c:	4944      	ldr	r1, [pc, #272]	; (f160 <mayfly_run+0x170>)
    f04e:	0072      	lsls	r2, r6, #1
    f050:	4432      	add	r2, r6
    f052:	0093      	lsls	r3, r2, #2
    f054:	007a      	lsls	r2, r7, #1
    f056:	443a      	add	r2, r7
    f058:	0110      	lsls	r0, r2, #4
    f05a:	4403      	add	r3, r0
    f05c:	18c8      	adds	r0, r1, r3
    f05e:	aa03      	add	r2, sp, #12
    f060:	58c9      	ldr	r1, [r1, r3]
    f062:	6840      	ldr	r0, [r0, #4]
    f064:	f000 f912 	bl	f28c <memq_peek>
    f068:	4680      	mov	r8, r0
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    f06a:	2c01      	cmp	r4, #1
    f06c:	d026      	beq.n	f0bc <mayfly_run+0xcc>
		while (link) {
    f06e:	f1b8 0f00 	cmp.w	r8, #0
    f072:	d030      	beq.n	f0d6 <mayfly_run+0xe6>
			req = m->_req;
    f074:	9b03      	ldr	r3, [sp, #12]
    f076:	781c      	ldrb	r4, [r3, #0]
			state = (req - m->_ack) & 0x03;
    f078:	785a      	ldrb	r2, [r3, #1]
    f07a:	1aa4      	subs	r4, r4, r2
    f07c:	f004 0403 	and.w	r4, r4, #3
			if (state == 1) {
    f080:	2c01      	cmp	r4, #1
    f082:	d0dc      	beq.n	f03e <mayfly_run+0x4e>
			req = m->_req;
    f084:	9b03      	ldr	r3, [sp, #12]
    f086:	781d      	ldrb	r5, [r3, #0]
    f088:	b2ed      	uxtb	r5, r5
			if (((req - m->_ack) & 0x03) != 1) {
    f08a:	785b      	ldrb	r3, [r3, #1]
    f08c:	1aeb      	subs	r3, r5, r3
    f08e:	f003 0303 	and.w	r3, r3, #3
    f092:	2b01      	cmp	r3, #1
    f094:	d0da      	beq.n	f04c <mayfly_run+0x5c>
				memq_dequeue(mft[callee_id][caller_id].tail,
    f096:	0072      	lsls	r2, r6, #1
    f098:	4432      	add	r2, r6
    f09a:	0093      	lsls	r3, r2, #2
    f09c:	0079      	lsls	r1, r7, #1
    f09e:	4439      	add	r1, r7
    f0a0:	010a      	lsls	r2, r1, #4
    f0a2:	441a      	add	r2, r3
    f0a4:	4b2e      	ldr	r3, [pc, #184]	; (f160 <mayfly_run+0x170>)
    f0a6:	4413      	add	r3, r2
    f0a8:	2200      	movs	r2, #0
    f0aa:	4619      	mov	r1, r3
    f0ac:	6858      	ldr	r0, [r3, #4]
    f0ae:	f000 f8f6 	bl	f29e <memq_dequeue>
				m->_link = link;
    f0b2:	9b03      	ldr	r3, [sp, #12]
    f0b4:	f8c3 8004 	str.w	r8, [r3, #4]
				m->_ack = req;
    f0b8:	705d      	strb	r5, [r3, #1]
    f0ba:	e7c7      	b.n	f04c <mayfly_run+0x5c>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    f0bc:	f1b9 0f00 	cmp.w	r9, #0
    f0c0:	d006      	beq.n	f0d0 <mayfly_run+0xe0>
					mayfly_pend(callee_id, callee_id);
    f0c2:	4651      	mov	r1, sl
    f0c4:	4650      	mov	r0, sl
    f0c6:	f00a f925 	bl	19314 <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
    f0ca:	b005      	add	sp, #20
    f0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (caller_id || link) {
    f0d0:	2800      	cmp	r0, #0
    f0d2:	d0cc      	beq.n	f06e <mayfly_run+0x7e>
    f0d4:	e7f5      	b.n	f0c2 <mayfly_run+0xd2>
		if (mft[callee_id][caller_id].disable_req !=
    f0d6:	ea4f 0249 	mov.w	r2, r9, lsl #1
    f0da:	444a      	add	r2, r9
    f0dc:	0093      	lsls	r3, r2, #2
    f0de:	ea4f 014a 	mov.w	r1, sl, lsl #1
    f0e2:	4451      	add	r1, sl
    f0e4:	010a      	lsls	r2, r1, #4
    f0e6:	441a      	add	r2, r3
    f0e8:	4b1d      	ldr	r3, [pc, #116]	; (f160 <mayfly_run+0x170>)
    f0ea:	4413      	add	r3, r2
    f0ec:	7a99      	ldrb	r1, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    f0ee:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req !=
    f0f0:	4299      	cmp	r1, r3
    f0f2:	d00b      	beq.n	f10c <mayfly_run+0x11c>
			mft[callee_id][caller_id].disable_ack =
    f0f4:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    f0f8:	0093      	lsls	r3, r2, #2
    f0fa:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    f0fe:	0102      	lsls	r2, r0, #4
    f100:	4413      	add	r3, r2
    f102:	4a17      	ldr	r2, [pc, #92]	; (f160 <mayfly_run+0x170>)
    f104:	4413      	add	r3, r2
    f106:	72d9      	strb	r1, [r3, #11]
			disable = 1;
    f108:	2301      	movs	r3, #1
    f10a:	9301      	str	r3, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    f10c:	ea4f 0249 	mov.w	r2, r9, lsl #1
    f110:	444a      	add	r2, r9
    f112:	0093      	lsls	r3, r2, #2
    f114:	ea4f 014a 	mov.w	r1, sl, lsl #1
    f118:	4451      	add	r1, sl
    f11a:	010a      	lsls	r2, r1, #4
    f11c:	441a      	add	r2, r3
    f11e:	4b10      	ldr	r3, [pc, #64]	; (f160 <mayfly_run+0x170>)
    f120:	4413      	add	r3, r2
    f122:	7a19      	ldrb	r1, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    f124:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req !=
    f126:	4299      	cmp	r1, r3
    f128:	d00b      	beq.n	f142 <mayfly_run+0x152>
			mft[callee_id][caller_id].enable_ack =
    f12a:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    f12e:	0093      	lsls	r3, r2, #2
    f130:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    f134:	0102      	lsls	r2, r0, #4
    f136:	4413      	add	r3, r2
    f138:	4a09      	ldr	r2, [pc, #36]	; (f160 <mayfly_run+0x170>)
    f13a:	4413      	add	r3, r2
    f13c:	7259      	strb	r1, [r3, #9]
			enable = 1;
    f13e:	f04f 0b01 	mov.w	fp, #1
	while (caller_id--) {
    f142:	464b      	mov	r3, r9
    f144:	e75d      	b.n	f002 <mayfly_run+0x12>
	if (disable && !enable) {
    f146:	9b01      	ldr	r3, [sp, #4]
    f148:	2b00      	cmp	r3, #0
    f14a:	d0be      	beq.n	f0ca <mayfly_run+0xda>
    f14c:	f1bb 0f00 	cmp.w	fp, #0
    f150:	d1bb      	bne.n	f0ca <mayfly_run+0xda>
		mayfly_enable_cb(callee_id, callee_id, 0);
    f152:	2200      	movs	r2, #0
    f154:	4651      	mov	r1, sl
    f156:	4650      	mov	r0, sl
    f158:	f00a f8a5 	bl	192a6 <mayfly_enable_cb>
    f15c:	e7b5      	b.n	f0ca <mayfly_run+0xda>
    f15e:	bf00      	nop
    f160:	20000c58 	.word	0x20000c58

0000f164 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    f164:	b5f0      	push	{r4, r5, r6, r7, lr}
    f166:	b083      	sub	sp, #12
    f168:	4607      	mov	r7, r0
    f16a:	4608      	mov	r0, r1
	*mem_head = mem_pool;
    f16c:	601f      	str	r7, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    f16e:	1dfb      	adds	r3, r7, #7
    f170:	f023 0303 	bic.w	r3, r3, #3
    f174:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    f176:	460e      	mov	r6, r1
    f178:	3a01      	subs	r2, #1
    f17a:	b295      	uxth	r5, r2
    f17c:	2204      	movs	r2, #4
    f17e:	2100      	movs	r1, #0
    f180:	fb05 7000 	mla	r0, r5, r0, r7
    f184:	f01a fffc 	bl	2a180 <memset>
	       sizeof(mem_pool));
	while (mem_count--) {
    f188:	e00b      	b.n	f1a2 <mem_init+0x3e>
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
    f18a:	fb04 6306 	mla	r3, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    f18e:	443b      	add	r3, r7
    f190:	a902      	add	r1, sp, #8
    f192:	f841 3d04 	str.w	r3, [r1, #-4]!
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    f196:	2204      	movs	r2, #4
    f198:	fb04 7006 	mla	r0, r4, r6, r7
    f19c:	f7f1 f890 	bl	2c0 <memcpy>
	while (mem_count--) {
    f1a0:	4625      	mov	r5, r4
    f1a2:	1e6c      	subs	r4, r5, #1
    f1a4:	b2a4      	uxth	r4, r4
    f1a6:	2d00      	cmp	r5, #0
    f1a8:	d1ef      	bne.n	f18a <mem_init+0x26>
		       (void *)&next, sizeof(next));
	}
}
    f1aa:	b003      	add	sp, #12
    f1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f1ae <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    f1ae:	b570      	push	{r4, r5, r6, lr}
    f1b0:	b082      	sub	sp, #8
	if (*mem_head) {
    f1b2:	6805      	ldr	r5, [r0, #0]
    f1b4:	b1a5      	cbz	r5, f1e0 <mem_acquire+0x32>
    f1b6:	4606      	mov	r6, r0
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    f1b8:	1deb      	adds	r3, r5, #7
    f1ba:	f023 0303 	bic.w	r3, r3, #3
    f1be:	881b      	ldrh	r3, [r3, #0]
					       sizeof(mem_head)));
		free_count--;
    f1c0:	3b01      	subs	r3, #1
    f1c2:	b29c      	uxth	r4, r3

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    f1c4:	2204      	movs	r2, #4
    f1c6:	4629      	mov	r1, r5
    f1c8:	eb0d 0002 	add.w	r0, sp, r2
    f1cc:	f7f1 f878 	bl	2c0 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    f1d0:	9b01      	ldr	r3, [sp, #4]
    f1d2:	b11b      	cbz	r3, f1dc <mem_acquire+0x2e>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    f1d4:	3307      	adds	r3, #7
    f1d6:	f023 0303 	bic.w	r3, r3, #3
    f1da:	801c      	strh	r4, [r3, #0]
				free_count;
		}

		*mem_head = head;
    f1dc:	9b01      	ldr	r3, [sp, #4]
    f1de:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    f1e0:	4628      	mov	r0, r5
    f1e2:	b002      	add	sp, #8
    f1e4:	bd70      	pop	{r4, r5, r6, pc}

0000f1e6 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    f1e6:	b570      	push	{r4, r5, r6, lr}
    f1e8:	4606      	mov	r6, r0
    f1ea:	460d      	mov	r5, r1
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    f1ec:	680b      	ldr	r3, [r1, #0]
    f1ee:	b183      	cbz	r3, f212 <mem_release+0x2c>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    f1f0:	3307      	adds	r3, #7
    f1f2:	f023 0303 	bic.w	r3, r3, #3
    f1f6:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;
    f1f8:	3401      	adds	r4, #1
    f1fa:	b2a4      	uxth	r4, r4

	memcpy(mem, mem_head, sizeof(mem));
    f1fc:	2204      	movs	r2, #4
    f1fe:	4629      	mov	r1, r5
    f200:	4630      	mov	r0, r6
    f202:	f7f1 f85d 	bl	2c0 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    f206:	1df3      	adds	r3, r6, #7
    f208:	f023 0303 	bic.w	r3, r3, #3
    f20c:	801c      	strh	r4, [r3, #0]

	*mem_head = mem;
    f20e:	602e      	str	r6, [r5, #0]
    f210:	bd70      	pop	{r4, r5, r6, pc}
	u16_t free_count = 0;
    f212:	2400      	movs	r4, #0
    f214:	e7f0      	b.n	f1f8 <mem_release+0x12>

0000f216 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    f216:	4603      	mov	r3, r0
    f218:	b120      	cbz	r0, f224 <mem_free_count_get+0xe>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    f21a:	3307      	adds	r3, #7
    f21c:	f023 0303 	bic.w	r3, r3, #3
    f220:	8818      	ldrh	r0, [r3, #0]
    f222:	4770      	bx	lr
	u16_t free_count = 0;
    f224:	2000      	movs	r0, #0
					       sizeof(mem_head)));
	}

	return free_count;
}
    f226:	4770      	bx	lr

0000f228 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    f228:	fb02 0001 	mla	r0, r2, r1, r0
    f22c:	4770      	bx	lr

0000f22e <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    f22e:	1a40      	subs	r0, r0, r1
    f230:	b280      	uxth	r0, r0
}
    f232:	fbb0 f0f2 	udiv	r0, r0, r2
    f236:	4770      	bx	lr

0000f238 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
	src += len;
    f238:	4411      	add	r1, r2
	while (len--) {
    f23a:	e004      	b.n	f246 <mem_rcopy+0xe>
		*dst++ = *--src;
    f23c:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    f240:	7002      	strb	r2, [r0, #0]
	while (len--) {
    f242:	461a      	mov	r2, r3
		*dst++ = *--src;
    f244:	3001      	adds	r0, #1
	while (len--) {
    f246:	1e53      	subs	r3, r2, #1
    f248:	b29b      	uxth	r3, r3
    f24a:	2a00      	cmp	r2, #0
    f24c:	d1f6      	bne.n	f23c <mem_rcopy+0x4>
	}
}
    f24e:	4770      	bx	lr

0000f250 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
	while (len--) {
    f250:	1e4b      	subs	r3, r1, #1
    f252:	b29b      	uxth	r3, r3
    f254:	b171      	cbz	r1, f274 <mem_nz+0x24>
{
    f256:	b410      	push	{r4}
		if (*src++) {
    f258:	1c44      	adds	r4, r0, #1
    f25a:	7802      	ldrb	r2, [r0, #0]
	while (len--) {
    f25c:	4619      	mov	r1, r3
		if (*src++) {
    f25e:	b93a      	cbnz	r2, f270 <mem_nz+0x20>
    f260:	4620      	mov	r0, r4
	while (len--) {
    f262:	3b01      	subs	r3, #1
    f264:	b29b      	uxth	r3, r3
    f266:	2900      	cmp	r1, #0
    f268:	d1f6      	bne.n	f258 <mem_nz+0x8>
			return 1;
		}
	}

	return 0;
    f26a:	2000      	movs	r0, #0
}
    f26c:	bc10      	pop	{r4}
    f26e:	4770      	bx	lr
			return 1;
    f270:	2001      	movs	r0, #1
    f272:	e7fb      	b.n	f26c <mem_nz+0x1c>
	return 0;
    f274:	2000      	movs	r0, #0
}
    f276:	4770      	bx	lr

0000f278 <memq_init>:
inline void *memq_peek(void *tail, void *head, void **mem);

void *memq_init(void *link, void **head, void **tail)
{
	/* head and tail pointer to the initial link node */
	*head = *tail = link;
    f278:	6010      	str	r0, [r2, #0]
    f27a:	6008      	str	r0, [r1, #0]

	return link;
}
    f27c:	4770      	bx	lr

0000f27e <memq_enqueue>:

void *memq_enqueue(void *mem, void *link, void **tail)
{
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;
    f27e:	6813      	ldr	r3, [r2, #0]
    f280:	6019      	str	r1, [r3, #0]

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;
    f282:	6813      	ldr	r3, [r2, #0]
    f284:	6058      	str	r0, [r3, #4]

	/* increment the tail! */
	*tail = link;
    f286:	6011      	str	r1, [r2, #0]

	return link;
}
    f288:	4608      	mov	r0, r1
    f28a:	4770      	bx	lr

0000f28c <memq_peek>:
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    f28c:	4281      	cmp	r1, r0
    f28e:	d004      	beq.n	f29a <memq_peek+0xe>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    f290:	b10a      	cbz	r2, f296 <memq_peek+0xa>
		*mem = *((void **)link + 1);
    f292:	684b      	ldr	r3, [r1, #4]
    f294:	6013      	str	r3, [r2, #0]
	}

	return link;
}
    f296:	4608      	mov	r0, r1
    f298:	4770      	bx	lr
		return 0;
    f29a:	2100      	movs	r1, #0
    f29c:	e7fb      	b.n	f296 <memq_peek+0xa>

0000f29e <memq_dequeue>:
void *memq_dequeue(void *tail, void **head, void **mem)
{
	void *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);
    f29e:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    f2a0:	4283      	cmp	r3, r0
    f2a2:	d006      	beq.n	f2b2 <memq_dequeue+0x14>
	if (mem) {
    f2a4:	b10a      	cbz	r2, f2aa <memq_dequeue+0xc>
		*mem = *((void **)link + 1);
    f2a6:	6858      	ldr	r0, [r3, #4]
    f2a8:	6010      	str	r0, [r2, #0]

	/* increment the head to next link node */
	*head = *((void **)link);
    f2aa:	681a      	ldr	r2, [r3, #0]
    f2ac:	600a      	str	r2, [r1, #0]

	return link;
}
    f2ae:	4618      	mov	r0, r3
    f2b0:	4770      	bx	lr
		return 0;
    f2b2:	2300      	movs	r3, #0
    f2b4:	e7f9      	b.n	f2aa <memq_dequeue+0xc>

0000f2b6 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    f2b6:	b410      	push	{r4}
	u8_t one_count = 0;
    f2b8:	2200      	movs	r2, #0

	while (octets_len--) {
    f2ba:	e008      	b.n	f2ce <util_ones_count_get+0x18>
		u8_t bite;

		bite = *octets;
		while (bite) {
			bite &= (bite - 1);
    f2bc:	1e59      	subs	r1, r3, #1
    f2be:	b249      	sxtb	r1, r1
    f2c0:	400b      	ands	r3, r1
			one_count++;
    f2c2:	3201      	adds	r2, #1
    f2c4:	b2d2      	uxtb	r2, r2
		while (bite) {
    f2c6:	2b00      	cmp	r3, #0
    f2c8:	d1f8      	bne.n	f2bc <util_ones_count_get+0x6>
		}
		octets++;
    f2ca:	3001      	adds	r0, #1
	while (octets_len--) {
    f2cc:	4621      	mov	r1, r4
    f2ce:	1e4b      	subs	r3, r1, #1
    f2d0:	b2dc      	uxtb	r4, r3
    f2d2:	b109      	cbz	r1, f2d8 <util_ones_count_get+0x22>
		bite = *octets;
    f2d4:	7803      	ldrb	r3, [r0, #0]
		while (bite) {
    f2d6:	e7f6      	b.n	f2c6 <util_ones_count_get+0x10>
	}

	return one_count;
}
    f2d8:	4610      	mov	r0, r2
    f2da:	bc10      	pop	{r4}
    f2dc:	4770      	bx	lr
	...

0000f2e0 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    f2e0:	4b05      	ldr	r3, [pc, #20]	; (f2f8 <cntr_init+0x18>)
    f2e2:	2200      	movs	r2, #0
    f2e4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    f2e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    f2ec:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    f2f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    f2f4:	4770      	bx	lr
    f2f6:	bf00      	nop
    f2f8:	4000b000 	.word	0x4000b000

0000f2fc <cntr_start>:
			     RTC_INTENSET_COMPARE1_Msk);
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    f2fc:	4a05      	ldr	r2, [pc, #20]	; (f314 <cntr_start+0x18>)
    f2fe:	7813      	ldrb	r3, [r2, #0]
    f300:	1c59      	adds	r1, r3, #1
    f302:	7011      	strb	r1, [r2, #0]
    f304:	b923      	cbnz	r3, f310 <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    f306:	2201      	movs	r2, #1
    f308:	4b03      	ldr	r3, [pc, #12]	; (f318 <cntr_start+0x1c>)
    f30a:	601a      	str	r2, [r3, #0]

	return 0;
    f30c:	2000      	movs	r0, #0
    f30e:	4770      	bx	lr
		return 1;
    f310:	2001      	movs	r0, #1
}
    f312:	4770      	bx	lr
    f314:	20000d18 	.word	0x20000d18
    f318:	4000b000 	.word	0x4000b000

0000f31c <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    f31c:	4b0a      	ldr	r3, [pc, #40]	; (f348 <cntr_stop+0x2c>)
    f31e:	781b      	ldrb	r3, [r3, #0]
    f320:	b14b      	cbz	r3, f336 <cntr_stop+0x1a>

	if (--_refcount) {
    f322:	3b01      	subs	r3, #1
    f324:	b2db      	uxtb	r3, r3
    f326:	4a08      	ldr	r2, [pc, #32]	; (f348 <cntr_stop+0x2c>)
    f328:	7013      	strb	r3, [r2, #0]
    f32a:	b953      	cbnz	r3, f342 <cntr_stop+0x26>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    f32c:	2201      	movs	r2, #1
    f32e:	4b07      	ldr	r3, [pc, #28]	; (f34c <cntr_stop+0x30>)
    f330:	605a      	str	r2, [r3, #4]

	return 0;
    f332:	2000      	movs	r0, #0
    f334:	4770      	bx	lr
	LL_ASSERT(_refcount);
    f336:	4040      	eors	r0, r0
    f338:	f380 8811 	msr	BASEPRI, r0
    f33c:	f04f 0004 	mov.w	r0, #4
    f340:	df02      	svc	2
		return 1;
    f342:	2001      	movs	r0, #1
}
    f344:	4770      	bx	lr
    f346:	bf00      	nop
    f348:	20000d18 	.word	0x20000d18
    f34c:	4000b000 	.word	0x4000b000

0000f350 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    f350:	4b01      	ldr	r3, [pc, #4]	; (f358 <cntr_cnt_get+0x8>)
    f352:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    f356:	4770      	bx	lr
    f358:	4000b000 	.word	0x4000b000

0000f35c <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    f35c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    f360:	4b01      	ldr	r3, [pc, #4]	; (f368 <cntr_cmp_set+0xc>)
    f362:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    f366:	4770      	bx	lr
    f368:	4000b000 	.word	0x4000b000

0000f36c <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    f36c:	e009      	b.n	f382 <do_ecb+0x16>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
		       (NRF_ECB->ECBDATAPTR != 0)) {
			/*__WFE();*/
		}
		NRF_ECB->TASKS_STOPECB = 1;
    f36e:	4b15      	ldr	r3, [pc, #84]	; (f3c4 <do_ecb+0x58>)
    f370:	2201      	movs	r2, #1
    f372:	605a      	str	r2, [r3, #4]
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    f374:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    f378:	b91b      	cbnz	r3, f382 <do_ecb+0x16>
    f37a:	4b12      	ldr	r3, [pc, #72]	; (f3c4 <do_ecb+0x58>)
    f37c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    f380:	b9d3      	cbnz	r3, f3b8 <do_ecb+0x4c>
		NRF_ECB->TASKS_STOPECB = 1;
    f382:	4b10      	ldr	r3, [pc, #64]	; (f3c4 <do_ecb+0x58>)
    f384:	2201      	movs	r2, #1
    f386:	605a      	str	r2, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    f388:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    f38c:	2100      	movs	r1, #0
    f38e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    f392:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    f396:	601a      	str	r2, [r3, #0]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    f398:	4b0a      	ldr	r3, [pc, #40]	; (f3c4 <do_ecb+0x58>)
    f39a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    f39e:	2b00      	cmp	r3, #0
    f3a0:	d1e5      	bne.n	f36e <do_ecb+0x2>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    f3a2:	4b08      	ldr	r3, [pc, #32]	; (f3c4 <do_ecb+0x58>)
    f3a4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    f3a8:	2b00      	cmp	r3, #0
    f3aa:	d1e0      	bne.n	f36e <do_ecb+0x2>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    f3ac:	4b05      	ldr	r3, [pc, #20]	; (f3c4 <do_ecb+0x58>)
    f3ae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    f3b2:	2b00      	cmp	r3, #0
    f3b4:	d1f0      	bne.n	f398 <do_ecb+0x2c>
    f3b6:	e7da      	b.n	f36e <do_ecb+0x2>

	NRF_ECB->ECBDATAPTR = 0;
    f3b8:	2200      	movs	r2, #0
    f3ba:	4b02      	ldr	r3, [pc, #8]	; (f3c4 <do_ecb+0x58>)
    f3bc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    f3c0:	4770      	bx	lr
    f3c2:	bf00      	nop
    f3c4:	4000e000 	.word	0x4000e000

0000f3c8 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    f3c8:	b570      	push	{r4, r5, r6, lr}
    f3ca:	b08c      	sub	sp, #48	; 0x30
    f3cc:	460e      	mov	r6, r1
    f3ce:	4615      	mov	r5, r2
    f3d0:	461c      	mov	r4, r3
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    f3d2:	2210      	movs	r2, #16
    f3d4:	4601      	mov	r1, r0
    f3d6:	4668      	mov	r0, sp
    f3d8:	f7ff ff2e 	bl	f238 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    f3dc:	2210      	movs	r2, #16
    f3de:	4631      	mov	r1, r6
    f3e0:	eb0d 0002 	add.w	r0, sp, r2
    f3e4:	f7ff ff28 	bl	f238 <mem_rcopy>

	do_ecb(&ecb);
    f3e8:	4668      	mov	r0, sp
    f3ea:	f7ff ffbf 	bl	f36c <do_ecb>

	if (cipher_text_le) {
    f3ee:	b125      	cbz	r5, f3fa <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    f3f0:	2210      	movs	r2, #16
    f3f2:	a908      	add	r1, sp, #32
    f3f4:	4628      	mov	r0, r5
    f3f6:	f7ff ff1f 	bl	f238 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    f3fa:	b124      	cbz	r4, f406 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    f3fc:	2210      	movs	r2, #16
    f3fe:	a908      	add	r1, sp, #32
    f400:	4620      	mov	r0, r4
    f402:	f7f0 ff5d 	bl	2c0 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    f406:	b00c      	add	sp, #48	; 0x30
    f408:	bd70      	pop	{r4, r5, r6, pc}
	...

0000f40c <isr_radio>:
#endif

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
    f40c:	b508      	push	{r3, lr}
	if (sfp_radio_isr) {
    f40e:	4b02      	ldr	r3, [pc, #8]	; (f418 <isr_radio+0xc>)
    f410:	681b      	ldr	r3, [r3, #0]
    f412:	b103      	cbz	r3, f416 <isr_radio+0xa>
		sfp_radio_isr();
    f414:	4798      	blx	r3
    f416:	bd08      	pop	{r3, pc}
    f418:	20000f38 	.word	0x20000f38

0000f41c <radio_isr_set>:
	}
}

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
    f41c:	b508      	push	{r3, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    f41e:	4b07      	ldr	r3, [pc, #28]	; (f43c <radio_isr_set+0x20>)
    f420:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    f422:	2210      	movs	r2, #16
    f424:	4b06      	ldr	r3, [pc, #24]	; (f440 <radio_isr_set+0x24>)
    f426:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    f42a:	2202      	movs	r2, #2
    f42c:	4b05      	ldr	r3, [pc, #20]	; (f444 <radio_isr_set+0x28>)
    f42e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    f432:	2001      	movs	r0, #1
    f434:	f018 fa3c 	bl	278b0 <_arch_irq_enable>
    f438:	bd08      	pop	{r3, pc}
    f43a:	bf00      	nop
    f43c:	20000f38 	.word	0x20000f38
    f440:	40001000 	.word	0x40001000
    f444:	e000e100 	.word	0xe000e100

0000f448 <radio_setup>:
			u32_t volatile PDM;
			u32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    f448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f44c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f450:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    f454:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    f458:	2100      	movs	r1, #0
    f45a:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    f45e:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    f462:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    f466:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    f46a:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    f46e:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    f472:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    f476:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    f47a:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    f47e:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    f482:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    f486:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    f48a:	4770      	bx	lr

0000f48c <radio_reset>:
#endif /* CONFIG_SOC_SERIES_NRF52X */
}

void radio_reset(void)
{
    f48c:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    f48e:	2001      	movs	r0, #1
    f490:	f018 fa1c 	bl	278cc <_arch_irq_disable>

	NRF_RADIO->POWER =
    f494:	4b03      	ldr	r3, [pc, #12]	; (f4a4 <radio_reset+0x18>)
    f496:	2200      	movs	r2, #0
    f498:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
	NRF_RADIO->POWER =
    f49c:	2201      	movs	r2, #1
    f49e:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
    f4a2:	bd08      	pop	{r3, pc}
    f4a4:	40001000 	.word	0x40001000

0000f4a8 <radio_phy_set>:

void radio_phy_set(u8_t phy, u8_t flags)
{
	u32_t mode;

	switch (phy) {
    f4a8:	2802      	cmp	r0, #2
    f4aa:	d106      	bne.n	f4ba <radio_phy_set+0x12>
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
		break;

#elif defined(CONFIG_SOC_SERIES_NRF52X)
	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
    f4ac:	2304      	movs	r3, #4
		break;
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
	}

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    f4ae:	f003 030f 	and.w	r3, r3, #15
    f4b2:	4a03      	ldr	r2, [pc, #12]	; (f4c0 <radio_phy_set+0x18>)
    f4b4:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    f4b8:	4770      	bx	lr
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    f4ba:	2303      	movs	r3, #3
    f4bc:	e7f7      	b.n	f4ae <radio_phy_set+0x6>
    f4be:	bf00      	nop
    f4c0:	40001000 	.word	0x40001000

0000f4c4 <radio_tx_power_set>:
}

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    f4c4:	4b01      	ldr	r3, [pc, #4]	; (f4cc <radio_tx_power_set+0x8>)
    f4c6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    f4ca:	4770      	bx	lr
    f4cc:	40001000 	.word	0x40001000

0000f4d0 <radio_freq_chan_set>:
}

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    f4d0:	4b01      	ldr	r3, [pc, #4]	; (f4d8 <radio_freq_chan_set+0x8>)
    f4d2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    f4d6:	4770      	bx	lr
    f4d8:	40001000 	.word	0x40001000

0000f4dc <radio_whiten_iv_set>:
}

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    f4dc:	4b07      	ldr	r3, [pc, #28]	; (f4fc <radio_whiten_iv_set+0x20>)
    f4de:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554

	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    f4e2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    f4e6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    f4ea:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    f4ee:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    f4f2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    f4f6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    f4fa:	4770      	bx	lr
    f4fc:	40001000 	.word	0x40001000

0000f500 <radio_aa_set>:
			    RADIO_PCNF1_WHITEEN_Msk;
}

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    f500:	4a0a      	ldr	r2, [pc, #40]	; (f52c <radio_aa_set+0x2c>)
    f502:	2300      	movs	r3, #0
    f504:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    f508:	2301      	movs	r3, #1
    f50a:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    f50e:	78c3      	ldrb	r3, [r0, #3]
    f510:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    f514:	7881      	ldrb	r1, [r0, #2]
    f516:	7843      	ldrb	r3, [r0, #1]
    f518:	041b      	lsls	r3, r3, #16
    f51a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    f51e:	7801      	ldrb	r1, [r0, #0]
    f520:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    f524:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    f528:	4770      	bx	lr
    f52a:	bf00      	nop
    f52c:	40001000 	.word	0x40001000

0000f530 <radio_pkt_configure>:
}

void radio_pkt_configure(u8_t bits_len, u8_t max_len, u8_t flags)
{
    f530:	b410      	push	{r4}
	u8_t dc = flags & 0x01; /* Adv or Data channel */
    f532:	f002 0401 	and.w	r4, r2, #1
		bits_len = 5;
	}
#elif defined(CONFIG_SOC_SERIES_NRF52X)
	extra = 0;

	phy = (flags >> 1) & 0x07; /* phy */
    f536:	f3c2 0242 	ubfx	r2, r2, #1, #3
	switch (phy) {
    f53a:	2a02      	cmp	r2, #2
    f53c:	d020      	beq.n	f580 <radio_pkt_configure+0x50>
	case BIT(0):
	default:
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    f53e:	2300      	movs	r3, #0
	}

	/* To use same Data Channel PDU structure with nRF5 specific overhead
	 * byte, include the S1 field in radio packet configuration.
	 */
	if (dc) {
    f540:	b10c      	cbz	r4, f546 <radio_pkt_configure+0x16>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    f542:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    f546:	f000 020f 	and.w	r2, r0, #15
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    f54a:	f1c0 0008 	rsb	r0, r0, #8
    f54e:	0400      	lsls	r0, r0, #16
    f550:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
			    RADIO_PCNF0_LFLEN_Msk) |
    f554:	4310      	orrs	r0, r2
			    RADIO_PCNF0_S1LEN_Msk) |
    f556:	4303      	orrs	r3, r0
    f558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    f55c:	4a0a      	ldr	r2, [pc, #40]	; (f588 <radio_pkt_configure+0x58>)
    f55e:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			   extra;

	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    f562:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    f566:	4b09      	ldr	r3, [pc, #36]	; (f58c <radio_pkt_configure+0x5c>)
    f568:	4003      	ands	r3, r0
    f56a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
			      RADIO_PCNF1_BALEN_Msk | RADIO_PCNF1_ENDIAN_Msk);
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    f56e:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    f572:	4319      	orrs	r1, r3
    f574:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
    f578:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
			    (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			     RADIO_PCNF1_BALEN_Msk) |
			    (((RADIO_PCNF1_ENDIAN_Little) <<
			      RADIO_PCNF1_ENDIAN_Pos) &
			     RADIO_PCNF1_ENDIAN_Msk);
}
    f57c:	bc10      	pop	{r4}
    f57e:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
    f580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    f584:	e7dc      	b.n	f540 <radio_pkt_configure+0x10>
    f586:	bf00      	nop
    f588:	40001000 	.word	0x40001000
    f58c:	fef80000 	.word	0xfef80000

0000f590 <radio_pkt_rx_set>:

void radio_pkt_rx_set(void *rx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
    f590:	4b01      	ldr	r3, [pc, #4]	; (f598 <radio_pkt_rx_set+0x8>)
    f592:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    f596:	4770      	bx	lr
    f598:	40001000 	.word	0x40001000

0000f59c <radio_pkt_tx_set>:
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    f59c:	4b01      	ldr	r3, [pc, #4]	; (f5a4 <radio_pkt_tx_set+0x8>)
    f59e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    f5a2:	4770      	bx	lr
    f5a4:	40001000 	.word	0x40001000

0000f5a8 <radio_tx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 131; /* floor(129.5 + 1.6) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f5a8:	208c      	movs	r0, #140	; 0x8c
    f5aa:	4770      	bx	lr

0000f5ac <radio_tx_chain_delay_get>:
	}
#else /* !CONFIG_SOC_NRF52840 */
	return 1; /* ceil(0.6) */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f5ac:	2001      	movs	r0, #1
    f5ae:	4770      	bx	lr

0000f5b0 <radio_rx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 130; /* ceil(129.5 + 0.2) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f5b0:	208c      	movs	r0, #140	; 0x8c
    f5b2:	4770      	bx	lr

0000f5b4 <radio_rx_chain_delay_get>:
		} else {
			return 20; /* ciel(19.6) */
		}
	}
#else /* !CONFIG_SOC_NRF52840 */
	switch (phy) {
    f5b4:	2802      	cmp	r0, #2
    f5b6:	d101      	bne.n	f5bc <radio_rx_chain_delay_get+0x8>
	default:
	case BIT(0):
		return 10; /* ceil(9.4) */
	case BIT(1):
		return 5; /* ceil(5) */
    f5b8:	2005      	movs	r0, #5
	}
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f5ba:	4770      	bx	lr
		return 10; /* ceil(9.4) */
    f5bc:	200a      	movs	r0, #10
    f5be:	4770      	bx	lr

0000f5c0 <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    f5c0:	2201      	movs	r2, #1
    f5c2:	4b01      	ldr	r3, [pc, #4]	; (f5c8 <radio_rx_enable+0x8>)
    f5c4:	605a      	str	r2, [r3, #4]
    f5c6:	4770      	bx	lr
    f5c8:	40001000 	.word	0x40001000

0000f5cc <radio_tx_enable>:
}

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    f5cc:	2201      	movs	r2, #1
    f5ce:	4b01      	ldr	r3, [pc, #4]	; (f5d4 <radio_tx_enable+0x8>)
    f5d0:	601a      	str	r2, [r3, #0]
    f5d2:	4770      	bx	lr
    f5d4:	40001000 	.word	0x40001000

0000f5d8 <radio_disable>:
	NRF_PPI->CHENCLR = PPI_CHEN_CH9_Msk | PPI_CHEN_CH12_Msk;
	NRF_PPI->TASKS_CHG[0].DIS = 1;
	NRF_PPI->TASKS_CHG[1].DIS = 1;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    f5d8:	4b03      	ldr	r3, [pc, #12]	; (f5e8 <radio_disable+0x10>)
    f5da:	2200      	movs	r2, #0
    f5dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    f5e0:	2201      	movs	r2, #1
    f5e2:	611a      	str	r2, [r3, #16]
    f5e4:	4770      	bx	lr
    f5e6:	bf00      	nop
    f5e8:	40001000 	.word	0x40001000

0000f5ec <radio_status_reset>:
}

void radio_status_reset(void)
{
	NRF_RADIO->EVENTS_READY = 0;
    f5ec:	4b06      	ldr	r3, [pc, #24]	; (f608 <radio_status_reset+0x1c>)
    f5ee:	2200      	movs	r2, #0
    f5f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_ADDRESS = 0;
    f5f4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    f5f8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NRF_RADIO->EVENTS_END = 0;
    f5fc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    f600:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    f604:	4770      	bx	lr
    f606:	bf00      	nop
    f608:	40001000 	.word	0x40001000

0000f60c <radio_is_ready>:
}

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    f60c:	4b03      	ldr	r3, [pc, #12]	; (f61c <radio_is_ready+0x10>)
    f60e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    f612:	3000      	adds	r0, #0
    f614:	bf18      	it	ne
    f616:	2001      	movne	r0, #1
    f618:	4770      	bx	lr
    f61a:	bf00      	nop
    f61c:	40001000 	.word	0x40001000

0000f620 <radio_is_done>:

u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    f620:	4b03      	ldr	r3, [pc, #12]	; (f630 <radio_is_done+0x10>)
    f622:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    f626:	3000      	adds	r0, #0
    f628:	bf18      	it	ne
    f62a:	2001      	movne	r0, #1
    f62c:	4770      	bx	lr
    f62e:	bf00      	nop
    f630:	40001000 	.word	0x40001000

0000f634 <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    f634:	4b03      	ldr	r3, [pc, #12]	; (f644 <radio_is_idle+0x10>)
    f636:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    f63a:	fab0 f080 	clz	r0, r0
    f63e:	0940      	lsrs	r0, r0, #5
    f640:	4770      	bx	lr
    f642:	bf00      	nop
    f644:	40001000 	.word	0x40001000

0000f648 <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
	NRF_RADIO->CRCCNF =
    f648:	4b04      	ldr	r3, [pc, #16]	; (f65c <radio_crc_configure+0x14>)
    f64a:	f240 1203 	movw	r2, #259	; 0x103
    f64e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    f652:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    f656:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    f65a:	4770      	bx	lr
    f65c:	40001000 	.word	0x40001000

0000f660 <radio_crc_is_valid>:
}

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    f660:	4b03      	ldr	r3, [pc, #12]	; (f670 <radio_crc_is_valid+0x10>)
    f662:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    f666:	3000      	adds	r0, #0
    f668:	bf18      	it	ne
    f66a:	2001      	movne	r0, #1
    f66c:	4770      	bx	lr
    f66e:	bf00      	nop
    f670:	40001000 	.word	0x40001000

0000f674 <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    f674:	4800      	ldr	r0, [pc, #0]	; (f678 <radio_pkt_empty_get+0x4>)
    f676:	4770      	bx	lr
    f678:	20000e2c 	.word	0x20000e2c

0000f67c <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    f67c:	4800      	ldr	r0, [pc, #0]	; (f680 <radio_pkt_scratch_get+0x4>)
    f67e:	4770      	bx	lr
    f680:	20000e30 	.word	0x20000e30

0000f684 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy_rx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    f684:	220b      	movs	r2, #11
    f686:	4b02      	ldr	r3, [pc, #8]	; (f690 <radio_switch_complete_and_rx+0xc>)
    f688:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f68c:	4770      	bx	lr
    f68e:	bf00      	nop
    f690:	40001000 	.word	0x40001000

0000f694 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy_rx, u8_t flags_rx, u8_t phy_tx,
				  u8_t flags_tx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    f694:	2207      	movs	r2, #7
    f696:	4b02      	ldr	r3, [pc, #8]	; (f6a0 <radio_switch_complete_and_tx+0xc>)
    f698:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f69c:	4770      	bx	lr
    f69e:	bf00      	nop
    f6a0:	40001000 	.word	0x40001000

0000f6a4 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    f6a4:	2203      	movs	r2, #3
    f6a6:	4b02      	ldr	r3, [pc, #8]	; (f6b0 <radio_switch_complete_and_disable+0xc>)
    f6a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f6ac:	4770      	bx	lr
    f6ae:	bf00      	nop
    f6b0:	40001000 	.word	0x40001000

0000f6b4 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    f6b4:	4a03      	ldr	r2, [pc, #12]	; (f6c4 <radio_rssi_measure+0x10>)
    f6b6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    f6ba:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    f6be:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    f6c2:	4770      	bx	lr
    f6c4:	40001000 	.word	0x40001000

0000f6c8 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    f6c8:	4b01      	ldr	r3, [pc, #4]	; (f6d0 <radio_rssi_get+0x8>)
    f6ca:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    f6ce:	4770      	bx	lr
    f6d0:	40001000 	.word	0x40001000

0000f6d4 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    f6d4:	2200      	movs	r2, #0
    f6d6:	4b02      	ldr	r3, [pc, #8]	; (f6e0 <radio_rssi_status_reset+0xc>)
    f6d8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    f6dc:	4770      	bx	lr
    f6de:	bf00      	nop
    f6e0:	40001000 	.word	0x40001000

0000f6e4 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    f6e4:	4b03      	ldr	r3, [pc, #12]	; (f6f4 <radio_rssi_is_ready+0x10>)
    f6e6:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    f6ea:	3000      	adds	r0, #0
    f6ec:	bf18      	it	ne
    f6ee:	2001      	movne	r0, #1
    f6f0:	4770      	bx	lr
    f6f2:	bf00      	nop
    f6f4:	40001000 	.word	0x40001000

0000f6f8 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    f6f8:	b470      	push	{r4, r5, r6}
	u8_t index;

	for (index = 0; index < 8; index++) {
    f6fa:	2400      	movs	r4, #0
    f6fc:	e019      	b.n	f732 <radio_filter_configure+0x3a>
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    f6fe:	78d5      	ldrb	r5, [r2, #3]
			((u32_t)bdaddr[2] << 16) |
    f700:	7893      	ldrb	r3, [r2, #2]
    f702:	041b      	lsls	r3, r3, #16
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    f704:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
			((u32_t)bdaddr[1] << 8) |
    f708:	7855      	ldrb	r5, [r2, #1]
			((u32_t)bdaddr[2] << 16) |
    f70a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
			bdaddr[0];
    f70e:	7815      	ldrb	r5, [r2, #0]
			((u32_t)bdaddr[1] << 8) |
    f710:	432b      	orrs	r3, r5
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    f712:	4d0c      	ldr	r5, [pc, #48]	; (f744 <radio_filter_configure+0x4c>)
    f714:	f504 76c0 	add.w	r6, r4, #384	; 0x180
    f718:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    f71c:	7956      	ldrb	r6, [r2, #5]
    f71e:	7913      	ldrb	r3, [r2, #4]
    f720:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    f724:	f504 76c4 	add.w	r6, r4, #392	; 0x188
    f728:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		bdaddr += 6;
    f72c:	3206      	adds	r2, #6
	for (index = 0; index < 8; index++) {
    f72e:	3401      	adds	r4, #1
    f730:	b2e4      	uxtb	r4, r4
    f732:	2c07      	cmp	r4, #7
    f734:	d9e3      	bls.n	f6fe <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    f736:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    f73a:	4b02      	ldr	r3, [pc, #8]	; (f744 <radio_filter_configure+0x4c>)
    f73c:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
    f740:	bc70      	pop	{r4, r5, r6}
    f742:	4770      	bx	lr
    f744:	40001000 	.word	0x40001000

0000f748 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    f748:	4a03      	ldr	r2, [pc, #12]	; (f758 <radio_filter_disable+0x10>)
    f74a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    f74e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    f752:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    f756:	4770      	bx	lr
    f758:	40001000 	.word	0x40001000

0000f75c <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    f75c:	4b03      	ldr	r3, [pc, #12]	; (f76c <radio_filter_status_reset+0x10>)
    f75e:	2200      	movs	r2, #0
    f760:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	NRF_RADIO->EVENTS_DEVMISS = 0;
    f764:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    f768:	4770      	bx	lr
    f76a:	bf00      	nop
    f76c:	40001000 	.word	0x40001000

0000f770 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    f770:	4b03      	ldr	r3, [pc, #12]	; (f780 <radio_filter_has_match+0x10>)
    f772:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    f776:	3000      	adds	r0, #0
    f778:	bf18      	it	ne
    f77a:	2001      	movne	r0, #1
    f77c:	4770      	bx	lr
    f77e:	bf00      	nop
    f780:	40001000 	.word	0x40001000

0000f784 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    f784:	4b01      	ldr	r3, [pc, #4]	; (f78c <radio_filter_match_get+0x8>)
    f786:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    f78a:	4770      	bx	lr
    f78c:	40001000 	.word	0x40001000

0000f790 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    f790:	4b04      	ldr	r3, [pc, #16]	; (f7a4 <radio_bc_configure+0x14>)
    f792:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    f796:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f79a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f79e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f7a2:	4770      	bx	lr
    f7a4:	40001000 	.word	0x40001000

0000f7a8 <radio_bc_status_reset>:
}

void radio_bc_status_reset(void)
{
	NRF_RADIO->EVENTS_BCMATCH = 0;
    f7a8:	2200      	movs	r2, #0
    f7aa:	4b02      	ldr	r3, [pc, #8]	; (f7b4 <radio_bc_status_reset+0xc>)
    f7ac:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    f7b0:	4770      	bx	lr
    f7b2:	bf00      	nop
    f7b4:	40001000 	.word	0x40001000

0000f7b8 <radio_bc_has_match>:
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    f7b8:	4b03      	ldr	r3, [pc, #12]	; (f7c8 <radio_bc_has_match+0x10>)
    f7ba:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
}
    f7be:	3000      	adds	r0, #0
    f7c0:	bf18      	it	ne
    f7c2:	2001      	movne	r0, #1
    f7c4:	4770      	bx	lr
    f7c6:	bf00      	nop
    f7c8:	40001000 	.word	0x40001000

0000f7cc <radio_tmr_status_reset>:

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    f7cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    f7d0:	4b04      	ldr	r3, [pc, #16]	; (f7e4 <radio_tmr_status_reset+0x18>)
    f7d2:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	NRF_PPI->CHENCLR =
    f7d6:	f248 027f 	movw	r2, #32895	; 0x807f
    f7da:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    f7de:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    f7e2:	4770      	bx	lr
    f7e4:	4000b000 	.word	0x4000b000

0000f7e8 <radio_tmr_tifs_set>:
}

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
    f7e8:	4b01      	ldr	r3, [pc, #4]	; (f7f0 <radio_tmr_tifs_set+0x8>)
    f7ea:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    f7ee:	4770      	bx	lr
    f7f0:	40001000 	.word	0x40001000

0000f7f4 <radio_tmr_start>:
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    f7f4:	b470      	push	{r4, r5, r6}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    f7f6:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    f7fa:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    f7fe:	4c21      	ldr	r4, [pc, #132]	; (f884 <radio_tmr_start+0x90>)
    f800:	42a3      	cmp	r3, r4
    f802:	d906      	bls.n	f812 <radio_tmr_start+0x1e>
		ticks_start--;
    f804:	3901      	subs	r1, #1
		remainder += 30517578UL;
    f806:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
    f80a:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
    f80e:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
	}
	remainder /= 1000000UL;
    f812:	4b1d      	ldr	r3, [pc, #116]	; (f888 <radio_tmr_start+0x94>)
    f814:	fba3 3202 	umull	r3, r2, r3, r2
    f818:	0c92      	lsrs	r2, r2, #18

	NRF_TIMER0->TASKS_CLEAR = 1;
    f81a:	4b1c      	ldr	r3, [pc, #112]	; (f88c <radio_tmr_start+0x98>)
    f81c:	2401      	movs	r4, #1
    f81e:	60dc      	str	r4, [r3, #12]
	NRF_TIMER0->MODE = 0;
    f820:	2500      	movs	r5, #0
    f822:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	NRF_TIMER0->PRESCALER = 4;
    f826:	2404      	movs	r4, #4
    f828:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    f82c:	2602      	movs	r6, #2
    f82e:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508

	NRF_TIMER0->CC[0] = remainder;
    f832:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    f836:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140

	NRF_RTC0->CC[2] = ticks_start;
    f83a:	4c15      	ldr	r4, [pc, #84]	; (f890 <radio_tmr_start+0x9c>)
    f83c:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    f840:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    f844:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    f848:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    f84c:	4911      	ldr	r1, [pc, #68]	; (f894 <radio_tmr_start+0xa0>)
    f84e:	f504 74a4 	add.w	r4, r4, #328	; 0x148
    f852:	f8c1 4518 	str.w	r4, [r1, #1304]	; 0x518
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    f856:	f8c1 351c 	str.w	r3, [r1, #1308]	; 0x51c
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;
    f85a:	f8c1 6504 	str.w	r6, [r1, #1284]	; 0x504

	NRF_PPI->CH[0].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
    f85e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    f862:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
    f866:	b948      	cbnz	r0, f87c <radio_tmr_start+0x88>
    f868:	490b      	ldr	r1, [pc, #44]	; (f898 <radio_tmr_start+0xa4>)
    f86a:	4b0a      	ldr	r3, [pc, #40]	; (f894 <radio_tmr_start+0xa0>)
    f86c:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
				     (u32_t)&(NRF_RADIO->TASKS_RXEN);
	NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
    f870:	2101      	movs	r1, #1
    f872:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_PPI->CHG[0] = PPI_CHG_CH10_Msk | PPI_CHG_CH13_Msk;
	NRF_PPI->CHG[1] = PPI_CHG_CH11_Msk | PPI_CHG_CH14_Msk;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
    f876:	4610      	mov	r0, r2
    f878:	bc70      	pop	{r4, r5, r6}
    f87a:	4770      	bx	lr
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
    f87c:	f5a1 31f0 	sub.w	r1, r1, #122880	; 0x1e000
    f880:	e7f3      	b.n	f86a <radio_tmr_start+0x76>
    f882:	bf00      	nop
    f884:	7ff0bdbf 	.word	0x7ff0bdbf
    f888:	431bde83 	.word	0x431bde83
    f88c:	40008000 	.word	0x40008000
    f890:	4000b000 	.word	0x4000b000
    f894:	4001f000 	.word	0x4001f000
    f898:	40001004 	.word	0x40001004

0000f89c <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	NRF_TIMER0->TASKS_STOP = 1;
    f89c:	4b02      	ldr	r3, [pc, #8]	; (f8a8 <radio_tmr_stop+0xc>)
    f89e:	2201      	movs	r2, #1
    f8a0:	605a      	str	r2, [r3, #4]
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
    f8a2:	611a      	str	r2, [r3, #16]
    f8a4:	4770      	bx	lr
    f8a6:	bf00      	nop
    f8a8:	40008000 	.word	0x40008000

0000f8ac <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	NRF_TIMER0->CC[1] = hcto;
    f8ac:	4b0e      	ldr	r3, [pc, #56]	; (f8e8 <radio_tmr_hcto_configure+0x3c>)
    f8ae:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	NRF_TIMER0->EVENTS_COMPARE[1] = 0;
    f8b2:	2200      	movs	r2, #0
    f8b4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    f8b8:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    f8bc:	4a0b      	ldr	r2, [pc, #44]	; (f8ec <radio_tmr_hcto_configure+0x40>)
    f8be:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    f8c2:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    f8c6:	3240      	adds	r2, #64	; 0x40
    f8c8:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CH[4].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[1]);
    f8cc:	f502 7280 	add.w	r2, r2, #256	; 0x100
    f8d0:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
	NRF_PPI->CH[4].TEP = (u32_t)&(NRF_RADIO->TASKS_DISABLE);
    f8d4:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    f8d8:	3a34      	subs	r2, #52	; 0x34
    f8da:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_PPI->CHENSET = (PPI_CHEN_CH3_Msk | PPI_CHEN_CH4_Msk);
    f8de:	2218      	movs	r2, #24
    f8e0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    f8e4:	4770      	bx	lr
    f8e6:	bf00      	nop
    f8e8:	40008000 	.word	0x40008000
    f8ec:	40001104 	.word	0x40001104

0000f8f0 <radio_tmr_aa_capture>:
}

void radio_tmr_aa_capture(void)
{
	NRF_PPI->CH[2].EEP = (u32_t)&(NRF_RADIO->EVENTS_READY);
    f8f0:	4b0b      	ldr	r3, [pc, #44]	; (f920 <radio_tmr_aa_capture+0x30>)
    f8f2:	4a0c      	ldr	r2, [pc, #48]	; (f924 <radio_tmr_aa_capture+0x34>)
    f8f4:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	NRF_PPI->CH[2].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[0]);
    f8f8:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    f8fc:	3240      	adds	r2, #64	; 0x40
    f8fe:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    f902:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    f906:	3a3c      	subs	r2, #60	; 0x3c
    f908:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    f90c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    f910:	3240      	adds	r2, #64	; 0x40
    f912:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
    f916:	220c      	movs	r2, #12
    f918:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    f91c:	4770      	bx	lr
    f91e:	bf00      	nop
    f920:	4001f000 	.word	0x4001f000
    f924:	40001100 	.word	0x40001100

0000f928 <radio_tmr_aa_get>:
}

u32_t radio_tmr_aa_get(void)
{
	return NRF_TIMER0->CC[1];
    f928:	4b01      	ldr	r3, [pc, #4]	; (f930 <radio_tmr_aa_get+0x8>)
    f92a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    f92e:	4770      	bx	lr
    f930:	40008000 	.word	0x40008000

0000f934 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    f934:	4b01      	ldr	r3, [pc, #4]	; (f93c <radio_tmr_aa_save+0x8>)
    f936:	6018      	str	r0, [r3, #0]
    f938:	4770      	bx	lr
    f93a:	bf00      	nop
    f93c:	20000f34 	.word	0x20000f34

0000f940 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    f940:	4b01      	ldr	r3, [pc, #4]	; (f948 <radio_tmr_aa_restore+0x8>)
    f942:	6818      	ldr	r0, [r3, #0]
    f944:	4770      	bx	lr
    f946:	bf00      	nop
    f948:	20000f34 	.word	0x20000f34

0000f94c <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return NRF_TIMER0->CC[0];
    f94c:	4b01      	ldr	r3, [pc, #4]	; (f954 <radio_tmr_ready_get+0x8>)
    f94e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    f952:	4770      	bx	lr
    f954:	40008000 	.word	0x40008000

0000f958 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	NRF_PPI->CH[5].EEP = (u32_t)&(NRF_RADIO->EVENTS_END);
    f958:	4b06      	ldr	r3, [pc, #24]	; (f974 <radio_tmr_end_capture+0x1c>)
    f95a:	4a07      	ldr	r2, [pc, #28]	; (f978 <radio_tmr_end_capture+0x20>)
    f95c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	NRF_PPI->CH[5].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    f960:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    f964:	323c      	adds	r2, #60	; 0x3c
    f966:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
	NRF_PPI->CHENSET = PPI_CHEN_CH5_Msk;
    f96a:	2220      	movs	r2, #32
    f96c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    f970:	4770      	bx	lr
    f972:	bf00      	nop
    f974:	4001f000 	.word	0x4001f000
    f978:	4000110c 	.word	0x4000110c

0000f97c <radio_tmr_end_get>:
}

u32_t radio_tmr_end_get(void)
{
	return NRF_TIMER0->CC[2];
    f97c:	4b01      	ldr	r3, [pc, #4]	; (f984 <radio_tmr_end_get+0x8>)
    f97e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    f982:	4770      	bx	lr
    f984:	40008000 	.word	0x40008000

0000f988 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{
    f988:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    f98a:	4b18      	ldr	r3, [pc, #96]	; (f9ec <radio_ccm_rx_pkt_set+0x64>)
    f98c:	2400      	movs	r4, #0
    f98e:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    f992:	2402      	movs	r4, #2
    f994:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
    f998:	42a1      	cmp	r1, r4
    f99a:	d125      	bne.n	f9e8 <radio_ccm_rx_pkt_set+0x60>
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
    f99c:	4914      	ldr	r1, [pc, #80]	; (f9f0 <radio_ccm_rx_pkt_set+0x68>)
		NRF_PPI->CHENSET = PPI_CHEN_CH15_Msk;
		break;
#endif /* CONFIG_SOC_NRF52840 */
	}
#endif
	NRF_CCM->MODE = mode;
    f99e:	4b13      	ldr	r3, [pc, #76]	; (f9ec <radio_ccm_rx_pkt_set+0x64>)
    f9a0:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    f9a4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    f9a8:	4812      	ldr	r0, [pc, #72]	; (f9f4 <radio_ccm_rx_pkt_set+0x6c>)
    f9aa:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    f9ae:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    f9b2:	4a11      	ldr	r2, [pc, #68]	; (f9f8 <radio_ccm_rx_pkt_set+0x70>)
    f9b4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
    f9b8:	2200      	movs	r2, #0
    f9ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    f9be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    f9c2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    f9c6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    f9ca:	4a0c      	ldr	r2, [pc, #48]	; (f9fc <radio_ccm_rx_pkt_set+0x74>)
    f9cc:	490c      	ldr	r1, [pc, #48]	; (fa00 <radio_ccm_rx_pkt_set+0x78>)
    f9ce:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_CCM->TASKS_CRYPT);
    f9d2:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    f9d6:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    f9da:	2140      	movs	r1, #64	; 0x40
    f9dc:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504

	NRF_CCM->TASKS_KSGEN = 1;
    f9e0:	2201      	movs	r2, #1
    f9e2:	601a      	str	r2, [r3, #0]

	return _pkt_scratch;
}
    f9e4:	bc10      	pop	{r4}
    f9e6:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    f9e8:	4906      	ldr	r1, [pc, #24]	; (fa04 <radio_ccm_rx_pkt_set+0x7c>)
    f9ea:	e7d8      	b.n	f99e <radio_ccm_rx_pkt_set+0x16>
    f9ec:	4000f000 	.word	0x4000f000
    f9f0:	01010001 	.word	0x01010001
    f9f4:	20000e30 	.word	0x20000e30
    f9f8:	20000d20 	.word	0x20000d20
    f9fc:	4001f000 	.word	0x4001f000
    fa00:	40001104 	.word	0x40001104
    fa04:	01000001 	.word	0x01000001

0000fa08 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    fa08:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    fa0a:	4b10      	ldr	r3, [pc, #64]	; (fa4c <radio_ccm_tx_pkt_set+0x44>)
    fa0c:	2200      	movs	r2, #0
    fa0e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    fa12:	2402      	movs	r4, #2
    fa14:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    fa18:	4c0d      	ldr	r4, [pc, #52]	; (fa50 <radio_ccm_tx_pkt_set+0x48>)
    fa1a:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    fa1e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    fa22:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    fa26:	480b      	ldr	r0, [pc, #44]	; (fa54 <radio_ccm_tx_pkt_set+0x4c>)
    fa28:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    fa2c:	490a      	ldr	r1, [pc, #40]	; (fa58 <radio_ccm_tx_pkt_set+0x50>)
    fa2e:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    fa32:	2101      	movs	r1, #1
    fa34:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    fa38:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    fa3c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    fa40:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    fa44:	6019      	str	r1, [r3, #0]

	return _pkt_scratch;
}
    fa46:	bc10      	pop	{r4}
    fa48:	4770      	bx	lr
    fa4a:	bf00      	nop
    fa4c:	4000f000 	.word	0x4000f000
    fa50:	01010000 	.word	0x01010000
    fa54:	20000e30 	.word	0x20000e30
    fa58:	20000d20 	.word	0x20000d20

0000fa5c <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    fa5c:	2202      	movs	r2, #2
    fa5e:	4b0d      	ldr	r3, [pc, #52]	; (fa94 <radio_ccm_is_done+0x38>)
    fa60:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    fa64:	e002      	b.n	fa6c <radio_ccm_is_done+0x10>
    fa66:	bf20      	wfe
  __ASM volatile ("sev");
    fa68:	bf40      	sev
  __ASM volatile ("wfe");
    fa6a:	bf20      	wfe
    fa6c:	4b09      	ldr	r3, [pc, #36]	; (fa94 <radio_ccm_is_done+0x38>)
    fa6e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    fa72:	2b00      	cmp	r3, #0
    fa74:	d0f7      	beq.n	fa66 <radio_ccm_is_done+0xa>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    fa76:	4b07      	ldr	r3, [pc, #28]	; (fa94 <radio_ccm_is_done+0x38>)
    fa78:	2202      	movs	r2, #2
    fa7a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    fa7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    fa82:	4a05      	ldr	r2, [pc, #20]	; (fa98 <radio_ccm_is_done+0x3c>)
    fa84:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    fa88:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    fa8c:	fab0 f080 	clz	r0, r0
    fa90:	0940      	lsrs	r0, r0, #5
    fa92:	4770      	bx	lr
    fa94:	4000f000 	.word	0x4000f000
    fa98:	e000e100 	.word	0xe000e100

0000fa9c <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    fa9c:	4b03      	ldr	r3, [pc, #12]	; (faac <radio_ccm_mic_is_valid+0x10>)
    fa9e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    faa2:	3000      	adds	r0, #0
    faa4:	bf18      	it	ne
    faa6:	2001      	movne	r0, #1
    faa8:	4770      	bx	lr
    faaa:	bf00      	nop
    faac:	4000f000 	.word	0x4000f000

0000fab0 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
    fab0:	b510      	push	{r4, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
    fab2:	4c13      	ldr	r4, [pc, #76]	; (fb00 <radio_ar_configure+0x50>)
    fab4:	2303      	movs	r3, #3
    fab6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
    faba:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
    fabe:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
    fac2:	4b10      	ldr	r3, [pc, #64]	; (fb04 <radio_ar_configure+0x54>)
    fac4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    fac8:	3b01      	subs	r3, #1
    faca:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
    face:	4b0e      	ldr	r3, [pc, #56]	; (fb08 <radio_ar_configure+0x58>)
    fad0:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	NRF_AAR->EVENTS_END = 0;
    fad4:	2300      	movs	r3, #0
    fad6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
    fada:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
    fade:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108

	radio_bc_configure(64);
    fae2:	2040      	movs	r0, #64	; 0x40
    fae4:	f7ff fe54 	bl	f790 <radio_bc_configure>
	radio_bc_status_reset();
    fae8:	f7ff fe5e 	bl	f7a8 <radio_bc_status_reset>

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_BCMATCH);
    faec:	4b07      	ldr	r3, [pc, #28]	; (fb0c <radio_ar_configure+0x5c>)
    faee:	4a08      	ldr	r2, [pc, #32]	; (fb10 <radio_ar_configure+0x60>)
    faf0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_AAR->TASKS_START);
    faf4:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    faf8:	2240      	movs	r2, #64	; 0x40
    fafa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    fafe:	bd10      	pop	{r4, pc}
    fb00:	4000f000 	.word	0x4000f000
    fb04:	40001000 	.word	0x40001000
    fb08:	20000d1c 	.word	0x20000d1c
    fb0c:	4001f000 	.word	0x4001f000
    fb10:	40001128 	.word	0x40001128

0000fb14 <radio_ar_match_get>:
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    fb14:	4b01      	ldr	r3, [pc, #4]	; (fb1c <radio_ar_match_get+0x8>)
    fb16:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    fb1a:	4770      	bx	lr
    fb1c:	4000f000 	.word	0x4000f000

0000fb20 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
    fb20:	b508      	push	{r3, lr}
	radio_bc_status_reset();
    fb22:	f7ff fe41 	bl	f7a8 <radio_bc_status_reset>

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    fb26:	2200      	movs	r2, #0
    fb28:	4b01      	ldr	r3, [pc, #4]	; (fb30 <radio_ar_status_reset+0x10>)
    fb2a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    fb2e:	bd08      	pop	{r3, pc}
    fb30:	4000f000 	.word	0x4000f000

0000fb34 <radio_ar_has_match>:
			  AAR_ENABLE_ENABLE_Msk;
}

u32_t radio_ar_has_match(void)
{
    fb34:	b508      	push	{r3, lr}
	return (radio_bc_has_match() &&
    fb36:	f7ff fe3f 	bl	f7b8 <radio_bc_has_match>
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    fb3a:	b168      	cbz	r0, fb58 <radio_ar_has_match+0x24>
		NRF_AAR->EVENTS_END &&
    fb3c:	4b0a      	ldr	r3, [pc, #40]	; (fb68 <radio_ar_has_match+0x34>)
    fb3e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    fb42:	b15b      	cbz	r3, fb5c <radio_ar_has_match+0x28>
		NRF_AAR->EVENTS_RESOLVED &&
    fb44:	4b08      	ldr	r3, [pc, #32]	; (fb68 <radio_ar_has_match+0x34>)
    fb46:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    fb4a:	b14b      	cbz	r3, fb60 <radio_ar_has_match+0x2c>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    fb4c:	4b06      	ldr	r3, [pc, #24]	; (fb68 <radio_ar_has_match+0x34>)
    fb4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    fb52:	b13b      	cbz	r3, fb64 <radio_ar_has_match+0x30>
    fb54:	2000      	movs	r0, #0
    fb56:	bd08      	pop	{r3, pc}
    fb58:	2000      	movs	r0, #0
    fb5a:	bd08      	pop	{r3, pc}
    fb5c:	2000      	movs	r0, #0
    fb5e:	bd08      	pop	{r3, pc}
    fb60:	2000      	movs	r0, #0
    fb62:	bd08      	pop	{r3, pc}
    fb64:	2001      	movs	r0, #1
}
    fb66:	bd08      	pop	{r3, pc}
    fb68:	4000f000 	.word	0x4000f000
    fb6c:	00000000 	.word	0x00000000

0000fb70 <isr>:

static int isr(struct rand *rng, bool store)
{
	u8_t last;

	if (!rng) {
    fb70:	b1f0      	cbz	r0, fbb0 <isr+0x40>
{
    fb72:	b430      	push	{r4, r5}
    fb74:	4602      	mov	r2, r0
		return -ENOBUFS;
	}

	last = rng->last + 1;
    fb76:	78c0      	ldrb	r0, [r0, #3]
    fb78:	1c43      	adds	r3, r0, #1
    fb7a:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    fb7c:	7815      	ldrb	r5, [r2, #0]
    fb7e:	42ab      	cmp	r3, r5
    fb80:	d012      	beq.n	fba8 <isr+0x38>
		last = 0;
	}

	if (last == rng->first) {
    fb82:	7894      	ldrb	r4, [r2, #2]
    fb84:	42a3      	cmp	r3, r4
    fb86:	d016      	beq.n	fbb6 <isr+0x46>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    fb88:	b1c1      	cbz	r1, fbbc <isr+0x4c>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    fb8a:	490f      	ldr	r1, [pc, #60]	; (fbc8 <isr+0x58>)
    fb8c:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    fb90:	4410      	add	r0, r2
    fb92:	7101      	strb	r1, [r0, #4]
	rng->last = last;
    fb94:	70d3      	strb	r3, [r2, #3]

	last = rng->last + 1;
    fb96:	3301      	adds	r3, #1
    fb98:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    fb9a:	429d      	cmp	r5, r3
    fb9c:	d006      	beq.n	fbac <isr+0x3c>
		last = 0;
	}

	if (last == rng->first) {
    fb9e:	42a3      	cmp	r3, r4
    fba0:	d10f      	bne.n	fbc2 <isr+0x52>
		return 0;
    fba2:	2000      	movs	r0, #0
	}

	return -EBUSY;
}
    fba4:	bc30      	pop	{r4, r5}
    fba6:	4770      	bx	lr
		last = 0;
    fba8:	2300      	movs	r3, #0
    fbaa:	e7ea      	b.n	fb82 <isr+0x12>
		last = 0;
    fbac:	2300      	movs	r3, #0
    fbae:	e7f6      	b.n	fb9e <isr+0x2e>
		return -ENOBUFS;
    fbb0:	f06f 0068 	mvn.w	r0, #104	; 0x68
    fbb4:	4770      	bx	lr
		return -ENOBUFS;
    fbb6:	f06f 0068 	mvn.w	r0, #104	; 0x68
    fbba:	e7f3      	b.n	fba4 <isr+0x34>
		return -EBUSY;
    fbbc:	f06f 000f 	mvn.w	r0, #15
    fbc0:	e7f0      	b.n	fba4 <isr+0x34>
	return -EBUSY;
    fbc2:	f06f 000f 	mvn.w	r0, #15
    fbc6:	e7ed      	b.n	fba4 <isr+0x34>
    fbc8:	4000d000 	.word	0x4000d000
    fbcc:	00000000 	.word	0x00000000

0000fbd0 <isr>:

	DEBUG_RADIO_CLOSE(0);
}

static void isr(void)
{
    fbd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fbd4:	b08a      	sub	sp, #40	; 0x28
	u8_t rssi_ready;

	DEBUG_RADIO_ISR(1);

	/* Read radio status and events */
	trx_done = radio_is_done();
    fbd6:	f7ff fd23 	bl	f620 <radio_is_done>
    fbda:	b2c4      	uxtb	r4, r0
	if (trx_done) {
    fbdc:	b9e4      	cbnz	r4, fc18 <isr+0x48>
		devmatch_id = radio_filter_match_get();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    fbde:	46a0      	mov	r8, r4
    fbe0:	46a1      	mov	r9, r4
    fbe2:	4627      	mov	r7, r4
    fbe4:	4626      	mov	r6, r4
		devmatch_id = irkmatch_id = 0xFF;
    fbe6:	25ff      	movs	r5, #255	; 0xff
    fbe8:	46aa      	mov	sl, r5
	}

	/* Clear radio status and events */
	radio_status_reset();
    fbea:	f7ff fcff 	bl	f5ec <radio_status_reset>
	radio_tmr_status_reset();
    fbee:	f7ff fded 	bl	f7cc <radio_tmr_status_reset>
	radio_filter_status_reset();
    fbf2:	f7ff fdb3 	bl	f75c <radio_filter_status_reset>
	radio_ar_status_reset();
    fbf6:	f7ff ff93 	bl	fb20 <radio_ar_status_reset>
	radio_rssi_status_reset();
    fbfa:	f7ff fd6b 	bl	f6d4 <radio_rssi_status_reset>
#if defined(CONFIG_BT_CTLR_GPIO_PA_PIN) || \
    defined(CONFIG_BT_CTLR_GPIO_LNA_PIN)
	radio_gpio_pa_lna_disable();
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

	switch (_radio.state) {
    fbfe:	4bb6      	ldr	r3, [pc, #728]	; (fed8 <isr+0x308>)
    fc00:	7c1b      	ldrb	r3, [r3, #16]
    fc02:	2b05      	cmp	r3, #5
    fc04:	f200 8456 	bhi.w	104b4 <__kernel_ram_size+0x4b4>
    fc08:	e8df f013 	tbh	[pc, r3, lsl #1]
    fc0c:	00e801f3 	.word	0x00e801f3
    fc10:	016e001c 	.word	0x016e001c
    fc14:	016e016e 	.word	0x016e016e
		crc_ok = radio_crc_is_valid();
    fc18:	f7ff fd22 	bl	f660 <radio_crc_is_valid>
    fc1c:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
    fc1e:	f7ff fda7 	bl	f770 <radio_filter_has_match>
    fc22:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
    fc24:	f7ff fdae 	bl	f784 <radio_filter_match_get>
    fc28:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_ok = radio_ar_has_match();
    fc2c:	f7ff ff82 	bl	fb34 <radio_ar_has_match>
    fc30:	fa5f f980 	uxtb.w	r9, r0
		irkmatch_id = radio_ar_match_get();
    fc34:	f7ff ff6e 	bl	fb14 <radio_ar_match_get>
    fc38:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
    fc3a:	f7ff fd53 	bl	f6e4 <radio_rssi_is_ready>
    fc3e:	fa5f f880 	uxtb.w	r8, r0
    fc42:	e7d2      	b.n	fbea <isr+0x1a>
	_radio.state = STATE_RX;
    fc44:	4da4      	ldr	r5, [pc, #656]	; (fed8 <isr+0x308>)
    fc46:	2301      	movs	r3, #1
    fc48:	742b      	strb	r3, [r5, #16]
	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    fc4a:	f7ff fe97 	bl	f97c <radio_tmr_end_get>
    fc4e:	f100 049b 	add.w	r4, r0, #155	; 0x9b
	radio_tmr_tifs_set(RADIO_TIFS);
    fc52:	2096      	movs	r0, #150	; 0x96
    fc54:	f7ff fdc8 	bl	f7e8 <radio_tmr_tifs_set>
	switch (_radio.role) {
    fc58:	7beb      	ldrb	r3, [r5, #15]
    fc5a:	3b01      	subs	r3, #1
    fc5c:	2b03      	cmp	r3, #3
    fc5e:	f200 80b7 	bhi.w	fdd0 <isr+0x200>
    fc62:	e8df f003 	tbb	[pc, r3]
    fc66:	3202      	.short	0x3202
    fc68:	6868      	.short	0x6868
		radio_switch_complete_and_tx(0, 0, 0, 0);
    fc6a:	2300      	movs	r3, #0
    fc6c:	461a      	mov	r2, r3
    fc6e:	4619      	mov	r1, r3
    fc70:	4618      	mov	r0, r3
    fc72:	f7ff fd0f 	bl	f694 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    fc76:	f7ff fd01 	bl	f67c <radio_pkt_scratch_get>
    fc7a:	f7ff fc89 	bl	f590 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    fc7e:	f7ff fcc5 	bl	f60c <radio_is_ready>
    fc82:	b990      	cbnz	r0, fcaa <isr+0xda>
		if (ctrl_rl_enabled()) {
    fc84:	f00a f802 	bl	19c8c <ctrl_rl_enabled>
    fc88:	b9a8      	cbnz	r0, fcb6 <isr+0xe6>
		hcto += radio_rx_chain_delay_get(0, 0);
    fc8a:	2100      	movs	r1, #0
    fc8c:	4608      	mov	r0, r1
    fc8e:	f7ff fc91 	bl	f5b4 <radio_rx_chain_delay_get>
    fc92:	4404      	add	r4, r0
		hcto += addr_us_get(0);
    fc94:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
    fc96:	2100      	movs	r1, #0
    fc98:	4608      	mov	r0, r1
    fc9a:	f7ff fc87 	bl	f5ac <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    fc9e:	1a20      	subs	r0, r4, r0
    fca0:	f7ff fe04 	bl	f8ac <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    fca4:	f7ff fe58 	bl	f958 <radio_tmr_end_capture>
    fca8:	e1a3      	b.n	fff2 <isr+0x422>
		LL_ASSERT(!radio_is_ready());
    fcaa:	4040      	eors	r0, r0
    fcac:	f380 8811 	msr	BASEPRI, r0
    fcb0:	f04f 0004 	mov.w	r0, #4
    fcb4:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
    fcb6:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    fcba:	f009 fd63 	bl	19784 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    fcbe:	4601      	mov	r1, r0
    fcc0:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    fcc4:	f7ff fef4 	bl	fab0 <radio_ar_configure>
    fcc8:	e7df      	b.n	fc8a <isr+0xba>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    fcca:	2300      	movs	r3, #0
    fccc:	461a      	mov	r2, r3
    fcce:	4619      	mov	r1, r3
    fcd0:	4618      	mov	r0, r3
    fcd2:	f7ff fcdf 	bl	f694 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    fcd6:	4b80      	ldr	r3, [pc, #512]	; (fed8 <isr+0x308>)
    fcd8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    fcdc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    fce0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    fce4:	3008      	adds	r0, #8
    fce6:	f7ff fc53 	bl	f590 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    fcea:	f7ff fc8f 	bl	f60c <radio_is_ready>
    fcee:	b990      	cbnz	r0, fd16 <isr+0x146>
		if (ctrl_rl_enabled()) {
    fcf0:	f009 ffcc 	bl	19c8c <ctrl_rl_enabled>
    fcf4:	b9a8      	cbnz	r0, fd22 <isr+0x152>
		hcto += radio_rx_chain_delay_get(0, 0);
    fcf6:	2100      	movs	r1, #0
    fcf8:	4608      	mov	r0, r1
    fcfa:	f7ff fc5b 	bl	f5b4 <radio_rx_chain_delay_get>
    fcfe:	4404      	add	r4, r0
		hcto += addr_us_get(0);
    fd00:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
    fd02:	2100      	movs	r1, #0
    fd04:	4608      	mov	r0, r1
    fd06:	f7ff fc51 	bl	f5ac <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    fd0a:	1a20      	subs	r0, r4, r0
    fd0c:	f7ff fdce 	bl	f8ac <radio_tmr_hcto_configure>
		radio_rssi_measure();
    fd10:	f7ff fcd0 	bl	f6b4 <radio_rssi_measure>
    fd14:	e16d      	b.n	fff2 <isr+0x422>
		LL_ASSERT(!radio_is_ready());
    fd16:	4040      	eors	r0, r0
    fd18:	f380 8811 	msr	BASEPRI, r0
    fd1c:	f04f 0004 	mov.w	r0, #4
    fd20:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
    fd22:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    fd26:	f009 fd2d 	bl	19784 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    fd2a:	4601      	mov	r1, r0
    fd2c:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    fd30:	f7ff febe 	bl	fab0 <radio_ar_configure>
    fd34:	e7df      	b.n	fcf6 <isr+0x126>
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    fd36:	4d68      	ldr	r5, [pc, #416]	; (fed8 <isr+0x308>)
    fd38:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    fd3c:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
					     _radio.conn_curr->phy_tx,
    fd40:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    fd44:	09d3      	lsrs	r3, r2, #7
    fd46:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    fd4a:	2100      	movs	r1, #0
    fd4c:	f000 0007 	and.w	r0, r0, #7
    fd50:	f7ff fca0 	bl	f694 <radio_switch_complete_and_tx>
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    fd54:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
			      packet_rx[_radio.packet_rx_last]->pdu_data);
    fd58:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
    fd5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    fd60:	3108      	adds	r1, #8
    fd62:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    fd66:	f002 fad3 	bl	12310 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    fd6a:	f7ff fc4f 	bl	f60c <radio_is_ready>
    fd6e:	bb20      	cbnz	r0, fdba <isr+0x1ea>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    fd70:	4d59      	ldr	r5, [pc, #356]	; (fed8 <isr+0x308>)
    fd72:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    fd76:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    fd7a:	2101      	movs	r1, #1
    fd7c:	f000 0007 	and.w	r0, r0, #7
    fd80:	f7ff fc18 	bl	f5b4 <radio_rx_chain_delay_get>
    fd84:	4420      	add	r0, r4
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    fd86:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    fd8a:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
    fd8e:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
    fd92:	2b02      	cmp	r3, #2
    fd94:	d01a      	beq.n	fdcc <isr+0x1fc>
    fd96:	2b04      	cmp	r3, #4
    fd98:	d015      	beq.n	fdc6 <isr+0x1f6>
		return 40;
    fd9a:	2428      	movs	r4, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    fd9c:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    fd9e:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
    fda2:	09c1      	lsrs	r1, r0, #7
    fda4:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    fda8:	f7ff fc00 	bl	f5ac <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    fdac:	1a20      	subs	r0, r4, r0
    fdae:	f7ff fd7d 	bl	f8ac <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    fdb2:	2001      	movs	r0, #1
    fdb4:	f002 fb0a 	bl	123cc <packet_tx_enqueue>
    fdb8:	e11b      	b.n	fff2 <isr+0x422>
		LL_ASSERT(!radio_is_ready());
    fdba:	4040      	eors	r0, r0
    fdbc:	f380 8811 	msr	BASEPRI, r0
    fdc0:	f04f 0004 	mov.w	r0, #4
    fdc4:	df02      	svc	2
		return 376;
    fdc6:	f44f 74bc 	mov.w	r4, #376	; 0x178
    fdca:	e7e7      	b.n	fd9c <isr+0x1cc>
		return 24;
    fdcc:	2418      	movs	r4, #24
    fdce:	e7e5      	b.n	fd9c <isr+0x1cc>
		LL_ASSERT(0);
    fdd0:	4040      	eors	r0, r0
    fdd2:	f380 8811 	msr	BASEPRI, r0
    fdd6:	f04f 0004 	mov.w	r0, #4
    fdda:	df02      	svc	2
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    fddc:	b144      	cbz	r4, fdf0 <isr+0x220>
	switch (_radio.role) {
    fdde:	4b3e      	ldr	r3, [pc, #248]	; (fed8 <isr+0x308>)
    fde0:	7bdb      	ldrb	r3, [r3, #15]
    fde2:	3b01      	subs	r3, #1
    fde4:	2b03      	cmp	r3, #3
    fde6:	d879      	bhi.n	fedc <isr+0x30c>
    fde8:	e8df f003 	tbb	[pc, r3]
    fdec:	70701c08 	.word	0x70701c08
		_radio.state = STATE_CLOSE;
    fdf0:	2203      	movs	r2, #3
    fdf2:	4b39      	ldr	r3, [pc, #228]	; (fed8 <isr+0x308>)
    fdf4:	741a      	strb	r2, [r3, #16]
		radio_disable();
    fdf6:	f7ff fbef 	bl	f5d8 <radio_disable>
    fdfa:	e0fa      	b.n	fff2 <isr+0x422>
		if (crc_ok) {
    fdfc:	b94e      	cbnz	r6, fe12 <isr+0x242>
			err = 1;
    fdfe:	2001      	movs	r0, #1
		if (err) {
    fe00:	2800      	cmp	r0, #0
    fe02:	f000 80f6 	beq.w	fff2 <isr+0x422>
			_radio.state = STATE_CLOSE;
    fe06:	2203      	movs	r2, #3
    fe08:	4b33      	ldr	r3, [pc, #204]	; (fed8 <isr+0x308>)
    fe0a:	741a      	strb	r2, [r3, #16]
			radio_disable();
    fe0c:	f7ff fbe4 	bl	f5d8 <radio_disable>
    fe10:	e0ef      	b.n	fff2 <isr+0x422>
			err = isr_rx_adv(devmatch_ok, devmatch_id, irkmatch_ok,
    fe12:	f8cd 8000 	str.w	r8, [sp]
    fe16:	462b      	mov	r3, r5
    fe18:	464a      	mov	r2, r9
    fe1a:	4651      	mov	r1, sl
    fe1c:	4638      	mov	r0, r7
    fe1e:	f007 fc37 	bl	17690 <isr_rx_adv>
    fe22:	e7ed      	b.n	fe00 <isr+0x230>
		rl_idx = devmatch_ok ?
    fe24:	b9a7      	cbnz	r7, fe50 <isr+0x280>
    fe26:	f1b9 0f00 	cmp.w	r9, #0
    fe2a:	d11b      	bne.n	fe64 <isr+0x294>
    fe2c:	24ff      	movs	r4, #255	; 0xff
		if (crc_ok &&
    fe2e:	b9f6      	cbnz	r6, fe6e <isr+0x29e>
			err = 1;
    fe30:	2001      	movs	r0, #1
		if (err) {
    fe32:	2800      	cmp	r0, #0
    fe34:	f000 80dd 	beq.w	fff2 <isr+0x422>
			_radio.state = STATE_CLOSE;
    fe38:	4c27      	ldr	r4, [pc, #156]	; (fed8 <isr+0x308>)
    fe3a:	2303      	movs	r3, #3
    fe3c:	7423      	strb	r3, [r4, #16]
			radio_disable();
    fe3e:	f7ff fbcb 	bl	f5d8 <radio_disable>
			_radio.scanner.state = 0;
    fe42:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    fe46:	f36f 0341 	bfc	r3, #1, #1
    fe4a:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
    fe4e:	e0d0      	b.n	fff2 <isr+0x422>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    fe50:	4b21      	ldr	r3, [pc, #132]	; (fed8 <isr+0x308>)
    fe52:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		rl_idx = devmatch_ok ?
    fe56:	4651      	mov	r1, sl
    fe58:	f3c0 1000 	ubfx	r0, r0, #4, #1
    fe5c:	f009 fc9c 	bl	19798 <ctrl_rl_idx>
    fe60:	4604      	mov	r4, r0
    fe62:	e7e4      	b.n	fe2e <isr+0x25e>
    fe64:	4628      	mov	r0, r5
    fe66:	f009 fccd 	bl	19804 <ctrl_rl_irk_idx>
    fe6a:	4604      	mov	r4, r0
    fe6c:	e7df      	b.n	fe2e <isr+0x25e>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    fe6e:	4b1a      	ldr	r3, [pc, #104]	; (fed8 <isr+0x308>)
    fe70:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fe74:	f013 0f10 	tst.w	r3, #16
    fe78:	d109      	bne.n	fe8e <isr+0x2be>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    fe7a:	b91f      	cbnz	r7, fe84 <isr+0x2b4>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fe7c:	2301      	movs	r3, #1
		if (crc_ok &&
    fe7e:	b9db      	cbnz	r3, feb8 <isr+0x2e8>
			err = 1;
    fe80:	2001      	movs	r0, #1
    fe82:	e7d6      	b.n	fe32 <isr+0x262>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fe84:	4621      	mov	r1, r4
    fe86:	4648      	mov	r0, r9
    fe88:	f009 fe1c 	bl	19ac4 <ctrl_rl_idx_allowed>
    fe8c:	b980      	cbnz	r0, feb0 <isr+0x2e0>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    fe8e:	4b12      	ldr	r3, [pc, #72]	; (fed8 <isr+0x308>)
    fe90:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fe94:	f013 0f10 	tst.w	r3, #16
    fe98:	d00c      	beq.n	feb4 <isr+0x2e4>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    fe9a:	b10f      	cbz	r7, fea0 <isr+0x2d0>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fe9c:	2301      	movs	r3, #1
    fe9e:	e7ee      	b.n	fe7e <isr+0x2ae>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    fea0:	4620      	mov	r0, r4
    fea2:	f009 fcd9 	bl	19858 <ctrl_irk_whitelisted>
    fea6:	b108      	cbz	r0, feac <isr+0x2dc>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    fea8:	2301      	movs	r3, #1
    feaa:	e7e8      	b.n	fe7e <isr+0x2ae>
    feac:	2300      	movs	r3, #0
    feae:	e7e6      	b.n	fe7e <isr+0x2ae>
    feb0:	2301      	movs	r3, #1
    feb2:	e7e4      	b.n	fe7e <isr+0x2ae>
    feb4:	2300      	movs	r3, #0
    feb6:	e7e2      	b.n	fe7e <isr+0x2ae>
			err = isr_rx_scan(devmatch_ok, devmatch_id, irkmatch_ok,
    feb8:	f8cd 8004 	str.w	r8, [sp, #4]
    febc:	9400      	str	r4, [sp, #0]
    febe:	462b      	mov	r3, r5
    fec0:	464a      	mov	r2, r9
    fec2:	4651      	mov	r1, sl
    fec4:	4638      	mov	r0, r7
    fec6:	f006 ffb7 	bl	16e38 <isr_rx_scan>
    feca:	e7b2      	b.n	fe32 <isr+0x262>
		isr_rx_conn(crc_ok, trx_done, rssi_ready);
    fecc:	4642      	mov	r2, r8
    fece:	4621      	mov	r1, r4
    fed0:	4630      	mov	r0, r6
    fed2:	f004 fabb 	bl	1444c <isr_rx_conn>
    fed6:	e08c      	b.n	fff2 <isr+0x422>
    fed8:	20000fec 	.word	0x20000fec
		LL_ASSERT(0);
    fedc:	4040      	eors	r0, r0
    fede:	f380 8811 	msr	BASEPRI, r0
    fee2:	f04f 0004 	mov.w	r0, #4
    fee6:	df02      	svc	2
	switch (_radio.role) {
    fee8:	4bb3      	ldr	r3, [pc, #716]	; (101b8 <__kernel_ram_size+0x1b8>)
    feea:	7bdb      	ldrb	r3, [r3, #15]
    feec:	b2db      	uxtb	r3, r3
    feee:	2b04      	cmp	r3, #4
    fef0:	f200 82b2 	bhi.w	10458 <__kernel_ram_size+0x458>
    fef4:	e8df f013 	tbh	[pc, r3, lsl #1]
    fef8:	000502a0 	.word	0x000502a0
    fefc:	00b5006f 	.word	0x00b5006f
    ff00:	00b5      	.short	0x00b5
	if ((_radio.state == STATE_CLOSE) &&
    ff02:	4bad      	ldr	r3, [pc, #692]	; (101b8 <__kernel_ram_size+0x1b8>)
    ff04:	7c1b      	ldrb	r3, [r3, #16]
    ff06:	2b03      	cmp	r3, #3
    ff08:	d00f      	beq.n	ff2a <isr+0x35a>
		radio_filter_disable();
    ff0a:	f7ff fc1d 	bl	f748 <radio_filter_disable>
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
    ff0e:	4aaa      	ldr	r2, [pc, #680]	; (101b8 <__kernel_ram_size+0x1b8>)
    ff10:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
		pdu_adv = (struct pdu_adv *)
    ff14:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    ff18:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
    ff1c:	3320      	adds	r3, #32
    ff1e:	4413      	add	r3, r2
		if ((_radio.state == STATE_CLOSE) &&
    ff20:	7c12      	ldrb	r2, [r2, #16]
    ff22:	2a03      	cmp	r2, #3
    ff24:	d00f      	beq.n	ff46 <isr+0x376>
	u32_t dont_close = 0;
    ff26:	2300      	movs	r3, #0
    ff28:	e060      	b.n	ffec <isr+0x41c>
	    (_radio.advertiser.chan_map_current != 0)) {
    ff2a:	4ba3      	ldr	r3, [pc, #652]	; (101b8 <__kernel_ram_size+0x1b8>)
    ff2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if ((_radio.state == STATE_CLOSE) &&
    ff30:	f013 0f0e 	tst.w	r3, #14
    ff34:	d0e9      	beq.n	ff0a <isr+0x33a>
		adv_setup();
    ff36:	f002 fca5 	bl	12884 <adv_setup>
		radio_tx_enable();
    ff3a:	f7ff fb47 	bl	f5cc <radio_tx_enable>
		radio_tmr_end_capture();
    ff3e:	f7ff fd0b 	bl	f958 <radio_tmr_end_capture>
		dont_close = 1;
    ff42:	2301      	movs	r3, #1
    ff44:	e052      	b.n	ffec <isr+0x41c>
		    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND)) {
    ff46:	79db      	ldrb	r3, [r3, #7]
    ff48:	f003 030f 	and.w	r3, r3, #15
		if ((_radio.state == STATE_CLOSE) &&
    ff4c:	2b01      	cmp	r3, #1
    ff4e:	d040      	beq.n	ffd2 <isr+0x402>
			rand_isr_get(sizeof(random_delay), &random_delay);
    ff50:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    ff54:	2001      	movs	r0, #1
    ff56:	f000 fb7d 	bl	10654 <rand_isr_get>
			random_delay %= 10;
    ff5a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    ff5e:	4a97      	ldr	r2, [pc, #604]	; (101bc <__kernel_ram_size+0x1bc>)
    ff60:	fba2 1203 	umull	r1, r2, r2, r3
    ff64:	08d2      	lsrs	r2, r2, #3
    ff66:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ff6a:	0051      	lsls	r1, r2, #1
    ff6c:	1a5a      	subs	r2, r3, r1
    ff6e:	b2d2      	uxtb	r2, r2
			random_delay += 1;
    ff70:	3201      	adds	r2, #1
    ff72:	b2d2      	uxtb	r2, r2
    ff74:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
					      TICKER_US_TO_TICKS(random_delay *
    ff78:	b2d2      	uxtb	r2, r2
    ff7a:	4891      	ldr	r0, [pc, #580]	; (101c0 <__kernel_ram_size+0x1c0>)
    ff7c:	fba2 0100 	umull	r0, r1, r2, r0
    ff80:	23e8      	movs	r3, #232	; 0xe8
    ff82:	fb03 1102 	mla	r1, r3, r2, r1
    ff86:	a38a      	add	r3, pc, #552	; (adr r3, 101b0 <__kernel_ram_size+0x1b0>)
    ff88:	e9d3 2300 	ldrd	r2, r3, [r3]
    ff8c:	f7f1 f8b6 	bl	10fc <__aeabi_uldivmod>
			ticker_status =
    ff90:	f640 63a2 	movw	r3, #3746	; 0xea2
    ff94:	9306      	str	r3, [sp, #24]
    ff96:	4b8b      	ldr	r3, [pc, #556]	; (101c4 <__kernel_ram_size+0x1c4>)
    ff98:	9305      	str	r3, [sp, #20]
    ff9a:	2400      	movs	r4, #0
    ff9c:	9404      	str	r4, [sp, #16]
    ff9e:	9403      	str	r4, [sp, #12]
    ffa0:	9402      	str	r4, [sp, #8]
    ffa2:	9401      	str	r4, [sp, #4]
    ffa4:	9400      	str	r4, [sp, #0]
    ffa6:	b283      	uxth	r3, r0
    ffa8:	2205      	movs	r2, #5
    ffaa:	4621      	mov	r1, r4
    ffac:	4620      	mov	r0, r4
    ffae:	f000 fe1d 	bl	10bec <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ffb2:	b130      	cbz	r0, ffc2 <isr+0x3f2>
    ffb4:	2802      	cmp	r0, #2
    ffb6:	d004      	beq.n	ffc2 <isr+0x3f2>
    ffb8:	4b7f      	ldr	r3, [pc, #508]	; (101b8 <__kernel_ram_size+0x1b8>)
    ffba:	7b9b      	ldrb	r3, [r3, #14]
    ffbc:	b2db      	uxtb	r3, r3
    ffbe:	2b05      	cmp	r3, #5
    ffc0:	d101      	bne.n	ffc6 <isr+0x3f6>
	u32_t dont_close = 0;
    ffc2:	2300      	movs	r3, #0
    ffc4:	e012      	b.n	ffec <isr+0x41c>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ffc6:	4040      	eors	r0, r0
    ffc8:	f380 8811 	msr	BASEPRI, r0
    ffcc:	f04f 0004 	mov.w	r0, #4
    ffd0:	df02      	svc	2
	u32_t dont_close = 0;
    ffd2:	2300      	movs	r3, #0
    ffd4:	e00a      	b.n	ffec <isr+0x41c>
	if (_radio.state == STATE_CLOSE) {
    ffd6:	4b78      	ldr	r3, [pc, #480]	; (101b8 <__kernel_ram_size+0x1b8>)
    ffd8:	7c1b      	ldrb	r3, [r3, #16]
    ffda:	2b03      	cmp	r3, #3
    ffdc:	d00c      	beq.n	fff8 <isr+0x428>
		radio_filter_disable();
    ffde:	f7ff fbb3 	bl	f748 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    ffe2:	4b75      	ldr	r3, [pc, #468]	; (101b8 <__kernel_ram_size+0x1b8>)
    ffe4:	7c1b      	ldrb	r3, [r3, #16]
    ffe6:	2b05      	cmp	r3, #5
    ffe8:	d031      	beq.n	1004e <__kernel_ram_size+0x4e>
	u32_t dont_close = 0;
    ffea:	2300      	movs	r3, #0
	if (dont_close) {
    ffec:	2b00      	cmp	r3, #0
    ffee:	f000 8249 	beq.w	10484 <__kernel_ram_size+0x484>
		LL_ASSERT(0);
		break;
	}

	DEBUG_RADIO_ISR(0);
}
    fff2:	b00a      	add	sp, #40	; 0x28
    fff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		radio_tmr_tifs_set(RADIO_TIFS);
    fff8:	2096      	movs	r0, #150	; 0x96
    fffa:	f7ff fbf5 	bl	f7e8 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    fffe:	2300      	movs	r3, #0
   10000:	461a      	mov	r2, r3
   10002:	4619      	mov	r1, r3
   10004:	4618      	mov	r0, r3
   10006:	f7ff fb45 	bl	f694 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
   1000a:	4b6b      	ldr	r3, [pc, #428]	; (101b8 <__kernel_ram_size+0x1b8>)
   1000c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   10010:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   10014:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   10018:	3008      	adds	r0, #8
   1001a:	f7ff fab9 	bl	f590 <radio_pkt_rx_set>
		radio_rssi_measure();
   1001e:	f7ff fb49 	bl	f6b4 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   10022:	f009 fe33 	bl	19c8c <ctrl_rl_enabled>
   10026:	b940      	cbnz	r0, 1003a <__kernel_ram_size+0x3a>
		_radio.state = STATE_RX;
   10028:	2401      	movs	r4, #1
   1002a:	4b63      	ldr	r3, [pc, #396]	; (101b8 <__kernel_ram_size+0x1b8>)
   1002c:	741c      	strb	r4, [r3, #16]
		radio_rx_enable();
   1002e:	f7ff fac7 	bl	f5c0 <radio_rx_enable>
		radio_tmr_end_capture();
   10032:	f7ff fc91 	bl	f958 <radio_tmr_end_capture>
		dont_close = 1;
   10036:	4623      	mov	r3, r4
   10038:	e7d8      	b.n	ffec <isr+0x41c>
			u8_t count, *irks = ctrl_irks_get(&count);
   1003a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   1003e:	f009 fba1 	bl	19784 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   10042:	4601      	mov	r1, r0
   10044:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   10048:	f7ff fd32 	bl	fab0 <radio_ar_configure>
   1004c:	e7ec      	b.n	10028 <__kernel_ram_size+0x28>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1004e:	2400      	movs	r4, #0
   10050:	9400      	str	r4, [sp, #0]
   10052:	4623      	mov	r3, r4
   10054:	2204      	movs	r2, #4
   10056:	4621      	mov	r1, r4
   10058:	4620      	mov	r0, r4
   1005a:	f000 fe15 	bl	10c88 <ticker_stop>
	u32_t dont_close = 0;
   1005e:	4623      	mov	r3, r4
   10060:	e7c4      	b.n	ffec <isr+0x41c>
	if (_radio.conn_curr == 0) {
   10062:	4b55      	ldr	r3, [pc, #340]	; (101b8 <__kernel_ram_size+0x1b8>)
   10064:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   10068:	2800      	cmp	r0, #0
   1006a:	f000 81fb 	beq.w	10464 <__kernel_ram_size+0x464>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   1006e:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   10072:	b141      	cbz	r1, 10086 <__kernel_ram_size+0x86>
   10074:	7bdb      	ldrb	r3, [r3, #15]
   10076:	b2db      	uxtb	r3, r3
   10078:	2b03      	cmp	r3, #3
   1007a:	d046      	beq.n	1010a <__kernel_ram_size+0x10a>
   1007c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   10080:	f013 0f01 	tst.w	r3, #1
   10084:	d141      	bne.n	1010a <__kernel_ram_size+0x10a>
	latency_event = _radio.conn_curr->latency_event;
   10086:	f8b0 802a 	ldrh.w	r8, [r0, #42]	; 0x2a
	elapsed_event = latency_event + 1;
   1008a:	f108 0401 	add.w	r4, r8, #1
   1008e:	b2a4      	uxth	r4, r4
	if (_radio.packet_counter &&
   10090:	4b49      	ldr	r3, [pc, #292]	; (101b8 <__kernel_ram_size+0x1b8>)
   10092:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
   10096:	2b00      	cmp	r3, #0
   10098:	f000 80b8 	beq.w	1020c <__kernel_ram_size+0x20c>
		if (_radio.role == ROLE_SLAVE) {
   1009c:	4b46      	ldr	r3, [pc, #280]	; (101b8 <__kernel_ram_size+0x1b8>)
   1009e:	7bdb      	ldrb	r3, [r3, #15]
   100a0:	b2db      	uxtb	r3, r3
   100a2:	2b03      	cmp	r3, #3
   100a4:	d03c      	beq.n	10120 <__kernel_ram_size+0x120>
		} else if (reason_peer) {
   100a6:	2900      	cmp	r1, #0
   100a8:	f000 80ad 	beq.w	10206 <__kernel_ram_size+0x206>
			_radio.conn_curr->master.terminate_ack = 1;
   100ac:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   100b0:	f043 0301 	orr.w	r3, r3, #1
   100b4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   100b8:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
   100ba:	4635      	mov	r5, r6
		_radio.conn_curr->connect_expire = 0;
   100bc:	4b3e      	ldr	r3, [pc, #248]	; (101b8 <__kernel_ram_size+0x1b8>)
   100be:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   100c2:	2200      	movs	r2, #0
   100c4:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   100c6:	4b3c      	ldr	r3, [pc, #240]	; (101b8 <__kernel_ram_size+0x1b8>)
   100c8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   100cc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   100d0:	2b00      	cmp	r3, #0
   100d2:	f000 80d8 	beq.w	10286 <__kernel_ram_size+0x286>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   100d6:	429c      	cmp	r4, r3
   100d8:	f080 80c9 	bcs.w	1026e <__kernel_ram_size+0x26e>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   100dc:	1b1b      	subs	r3, r3, r4
   100de:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   100e2:	4b35      	ldr	r3, [pc, #212]	; (101b8 <__kernel_ram_size+0x1b8>)
   100e4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   100e8:	2100      	movs	r1, #0
   100ea:	8551      	strh	r1, [r2, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   100ec:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   100f0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   100f4:	2a06      	cmp	r2, #6
   100f6:	f240 8130 	bls.w	1035a <__kernel_ram_size+0x35a>
			else if (_radio.role == ROLE_SLAVE) {
   100fa:	4a2f      	ldr	r2, [pc, #188]	; (101b8 <__kernel_ram_size+0x1b8>)
   100fc:	7bd2      	ldrb	r2, [r2, #15]
   100fe:	b2d2      	uxtb	r2, r2
   10100:	2a03      	cmp	r2, #3
   10102:	f000 80a2 	beq.w	1024a <__kernel_ram_size+0x24a>
	force = 0;
   10106:	2700      	movs	r7, #0
   10108:	e0be      	b.n	10288 <__kernel_ram_size+0x288>
		terminate_ind_rx_enqueue(_radio.conn_curr, reason_peer);
   1010a:	f004 f90b 	bl	14324 <terminate_ind_rx_enqueue>
		connection_release(_radio.conn_curr);
   1010e:	4c2a      	ldr	r4, [pc, #168]	; (101b8 <__kernel_ram_size+0x1b8>)
   10110:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   10114:	f002 f9b2 	bl	1247c <connection_release>
		_radio.conn_curr = NULL;
   10118:	2300      	movs	r3, #0
   1011a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1011e:	e765      	b.n	ffec <isr+0x41c>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   10120:	f7ff fc0e 	bl	f940 <radio_tmr_aa_restore>
   10124:	4682      	mov	sl, r0
						     radio_tmr_ready_get();
   10126:	f7ff fc11 	bl	f94c <radio_tmr_ready_get>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   1012a:	ebaa 0a00 	sub.w	sl, sl, r0
				_radio.conn_curr->slave.window_widening_event_us;
   1012e:	4b22      	ldr	r3, [pc, #136]	; (101b8 <__kernel_ram_size+0x1b8>)
   10130:	f8d3 9110 	ldr.w	r9, [r3, #272]	; 0x110
			window_widening_event_us =
   10134:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
				addr_us_get(_radio.conn_curr->phy_rx);
   10138:	f899 303a 	ldrb.w	r3, [r9, #58]	; 0x3a
   1013c:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
   10140:	2b02      	cmp	r3, #2
   10142:	d031      	beq.n	101a8 <__kernel_ram_size+0x1a8>
   10144:	2b04      	cmp	r3, #4
   10146:	d02c      	beq.n	101a2 <__kernel_ram_size+0x1a2>
		return 40;
   10148:	2628      	movs	r6, #40	; 0x28
				preamble_to_addr_us +
   1014a:	1987      	adds	r7, r0, r6
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   1014c:	3730      	adds	r7, #48	; 0x30
			if (start_to_address_actual_us <=
   1014e:	45ba      	cmp	sl, r7
   10150:	d83c      	bhi.n	101cc <__kernel_ram_size+0x1cc>
					TICKER_US_TO_TICKS(window_widening_event_us);
   10152:	4e1d      	ldr	r6, [pc, #116]	; (101c8 <__kernel_ram_size+0x1c8>)
   10154:	a316      	add	r3, pc, #88	; (adr r3, 101b0 <__kernel_ram_size+0x1b0>)
   10156:	e9d3 2300 	ldrd	r2, r3, [r3]
   1015a:	fba0 0106 	umull	r0, r1, r0, r6
   1015e:	f7f0 ffcd 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
   10162:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
   10164:	eba7 000a 	sub.w	r0, r7, sl
   10168:	a311      	add	r3, pc, #68	; (adr r3, 101b0 <__kernel_ram_size+0x1b0>)
   1016a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1016e:	fba0 0106 	umull	r0, r1, r0, r6
   10172:	f7f0 ffc3 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
   10176:	b286      	uxth	r6, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
   10178:	2200      	movs	r2, #0
   1017a:	f8c9 2060 	str.w	r2, [r9, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   1017e:	4b0e      	ldr	r3, [pc, #56]	; (101b8 <__kernel_ram_size+0x1b8>)
   10180:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   10184:	668a      	str	r2, [r1, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   10186:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1018a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   1018e:	b38a      	cbz	r2, 101f4 <__kernel_ram_size+0x1f4>
				if (pdu_data_tx->len ||
   10190:	7952      	ldrb	r2, [r2, #5]
   10192:	b91a      	cbnz	r2, 1019c <__kernel_ram_size+0x19c>
				    _radio.conn_curr->packet_tx_head_offset) {
   10194:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
				if (pdu_data_tx->len ||
   10198:	2a00      	cmp	r2, #0
   1019a:	d08f      	beq.n	100bc <__kernel_ram_size+0xbc>
					_radio.conn_curr->latency_event = 0;
   1019c:	2200      	movs	r2, #0
   1019e:	855a      	strh	r2, [r3, #42]	; 0x2a
   101a0:	e78c      	b.n	100bc <__kernel_ram_size+0xbc>
		return 376;
   101a2:	f44f 76bc 	mov.w	r6, #376	; 0x178
   101a6:	e7d0      	b.n	1014a <__kernel_ram_size+0x14a>
		return 24;
   101a8:	2618      	movs	r6, #24
   101aa:	e7ce      	b.n	1014a <__kernel_ram_size+0x14a>
   101ac:	f3af 8000 	nop.w
   101b0:	1afd498d 	.word	0x1afd498d
   101b4:	00000007 	.word	0x00000007
   101b8:	20000fec 	.word	0x20000fec
   101bc:	cccccccd 	.word	0xcccccccd
   101c0:	d4a51000 	.word	0xd4a51000
   101c4:	00011bcd 	.word	0x00011bcd
   101c8:	3b9aca00 	.word	0x3b9aca00
					TICKER_US_TO_TICKS(start_to_address_actual_us);
   101cc:	4faa      	ldr	r7, [pc, #680]	; (10478 <__kernel_ram_size+0x478>)
   101ce:	a3a8      	add	r3, pc, #672	; (adr r3, 10470 <__kernel_ram_size+0x470>)
   101d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   101d4:	fbaa 0107 	umull	r0, r1, sl, r7
   101d8:	f7f0 ff90 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
   101dc:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US +
   101de:	f106 0030 	add.w	r0, r6, #48	; 0x30
   101e2:	a3a3      	add	r3, pc, #652	; (adr r3, 10470 <__kernel_ram_size+0x470>)
   101e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   101e8:	fba0 0107 	umull	r0, r1, r0, r7
   101ec:	f7f0 ff86 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
   101f0:	b286      	uxth	r6, r0
   101f2:	e7c1      	b.n	10178 <__kernel_ram_size+0x178>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   101f4:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   101f8:	f012 0f01 	tst.w	r2, #1
   101fc:	f43f af5e 	beq.w	100bc <__kernel_ram_size+0xbc>
					_radio.conn_curr->latency;
   10200:	8cda      	ldrh	r2, [r3, #38]	; 0x26
				_radio.conn_curr->latency_event =
   10202:	855a      	strh	r2, [r3, #42]	; 0x2a
   10204:	e75a      	b.n	100bc <__kernel_ram_size+0xbc>
	ticks_drift_minus = 0;
   10206:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
   10208:	4635      	mov	r5, r6
   1020a:	e757      	b.n	100bc <__kernel_ram_size+0xbc>
	else if (_radio.conn_curr->connect_expire) {
   1020c:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   1020e:	b195      	cbz	r5, 10236 <__kernel_ram_size+0x236>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   10210:	42ac      	cmp	r4, r5
   10212:	d204      	bcs.n	1021e <__kernel_ram_size+0x21e>
			_radio.conn_curr->connect_expire -= elapsed_event;
   10214:	1b2d      	subs	r5, r5, r4
   10216:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   10218:	2500      	movs	r5, #0
	ticks_drift_plus = 0;
   1021a:	462e      	mov	r6, r5
   1021c:	e753      	b.n	100c6 <__kernel_ram_size+0xc6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   1021e:	213e      	movs	r1, #62	; 0x3e
   10220:	f004 f880 	bl	14324 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   10224:	4c95      	ldr	r4, [pc, #596]	; (1047c <__kernel_ram_size+0x47c>)
   10226:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   1022a:	f002 f927 	bl	1247c <connection_release>
			_radio.conn_curr = NULL;
   1022e:	2300      	movs	r3, #0
   10230:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   10234:	e6da      	b.n	ffec <isr+0x41c>
		if (!_radio.conn_curr->supervision_expire) {
   10236:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
   1023a:	b926      	cbnz	r6, 10246 <__kernel_ram_size+0x246>
				_radio.conn_curr->supervision_reload;
   1023c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
   1023e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   10242:	4635      	mov	r5, r6
   10244:	e73f      	b.n	100c6 <__kernel_ram_size+0xc6>
	ticks_drift_minus = 0;
   10246:	462e      	mov	r6, r5
   10248:	e73d      	b.n	100c6 <__kernel_ram_size+0xc6>
				if (latency_event != 0) {
   1024a:	f1b8 0f00 	cmp.w	r8, #0
   1024e:	f040 8086 	bne.w	1035e <__kernel_ram_size+0x35e>
					force = _radio.conn_curr->slave.force & 0x01;
   10252:	6edf      	ldr	r7, [r3, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   10254:	087a      	lsrs	r2, r7, #1
   10256:	66da      	str	r2, [r3, #108]	; 0x6c
					if (force) {
   10258:	f017 0701 	ands.w	r7, r7, #1
   1025c:	d014      	beq.n	10288 <__kernel_ram_size+0x288>
						_radio.conn_curr->slave.force |=
   1025e:	4b87      	ldr	r3, [pc, #540]	; (1047c <__kernel_ram_size+0x47c>)
   10260:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   10264:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   10266:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1026a:	66d3      	str	r3, [r2, #108]	; 0x6c
   1026c:	e00c      	b.n	10288 <__kernel_ram_size+0x288>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   1026e:	2108      	movs	r1, #8
   10270:	f004 f858 	bl	14324 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   10274:	4c81      	ldr	r4, [pc, #516]	; (1047c <__kernel_ram_size+0x47c>)
   10276:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   1027a:	f002 f8ff 	bl	1247c <connection_release>
			_radio.conn_curr = NULL;
   1027e:	2300      	movs	r3, #0
   10280:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   10284:	e6b2      	b.n	ffec <isr+0x41c>
	force = 0;
   10286:	2700      	movs	r7, #0
	if (_radio.conn_curr->procedure_expire != 0) {
   10288:	4b7c      	ldr	r3, [pc, #496]	; (1047c <__kernel_ram_size+0x47c>)
   1028a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   1028e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   10292:	b123      	cbz	r3, 1029e <__kernel_ram_size+0x29e>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   10294:	429c      	cmp	r4, r3
   10296:	d264      	bcs.n	10362 <__kernel_ram_size+0x362>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   10298:	1b1b      	subs	r3, r3, r4
   1029a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   1029e:	4b77      	ldr	r3, [pc, #476]	; (1047c <__kernel_ram_size+0x47c>)
   102a0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   102a4:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   102a8:	b123      	cbz	r3, 102b4 <__kernel_ram_size+0x2b4>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   102aa:	429c      	cmp	r4, r3
   102ac:	d265      	bcs.n	1037a <__kernel_ram_size+0x37a>
			_radio.conn_curr->apto_expire -= elapsed_event;
   102ae:	1b1b      	subs	r3, r3, r4
   102b0:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   102b4:	4b71      	ldr	r3, [pc, #452]	; (1047c <__kernel_ram_size+0x47c>)
   102b6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   102ba:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   102be:	b12b      	cbz	r3, 102cc <__kernel_ram_size+0x2cc>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   102c0:	429c      	cmp	r4, r3
   102c2:	f080 8090 	bcs.w	103e6 <__kernel_ram_size+0x3e6>
			_radio.conn_curr->appto_expire -= elapsed_event;
   102c6:	1b1b      	subs	r3, r3, r4
   102c8:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   102cc:	4b6b      	ldr	r3, [pc, #428]	; (1047c <__kernel_ram_size+0x47c>)
   102ce:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   102d2:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
   102d6:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
   102da:	4299      	cmp	r1, r3
   102dc:	d006      	beq.n	102ec <__kernel_ram_size+0x2ec>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   102de:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
   102e2:	3b01      	subs	r3, #1
   102e4:	b2db      	uxtb	r3, r3
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   102e6:	2b01      	cmp	r3, #1
   102e8:	f240 809b 	bls.w	10422 <__kernel_ram_size+0x422>
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   102ec:	b937      	cbnz	r7, 102fc <__kernel_ram_size+0x2fc>
   102ee:	4b63      	ldr	r3, [pc, #396]	; (1047c <__kernel_ram_size+0x47c>)
   102f0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   102f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   102f6:	4598      	cmp	r8, r3
   102f8:	f000 8096 	beq.w	10428 <__kernel_ram_size+0x428>
		lazy = _radio.conn_curr->latency_event + 1;
   102fc:	4b5f      	ldr	r3, [pc, #380]	; (1047c <__kernel_ram_size+0x47c>)
   102fe:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   10302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   10304:	3301      	adds	r3, #1
   10306:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   10308:	b925      	cbnz	r5, 10314 <__kernel_ram_size+0x314>
   1030a:	b91e      	cbnz	r6, 10314 <__kernel_ram_size+0x314>
   1030c:	b913      	cbnz	r3, 10314 <__kernel_ram_size+0x314>
	    (lazy != 0) || (force != 0)) {
   1030e:	2f00      	cmp	r7, #0
   10310:	f000 80aa 	beq.w	10468 <__kernel_ram_size+0x468>
				    _radio.conn_curr->handle;
   10314:	4a59      	ldr	r2, [pc, #356]	; (1047c <__kernel_ram_size+0x47c>)
   10316:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   1031a:	f892 4020 	ldrb.w	r4, [r2, #32]
   1031e:	3407      	adds	r4, #7
   10320:	b2e4      	uxtb	r4, r4
		ticker_status =
   10322:	9406      	str	r4, [sp, #24]
   10324:	4a56      	ldr	r2, [pc, #344]	; (10480 <__kernel_ram_size+0x480>)
   10326:	9205      	str	r2, [sp, #20]
   10328:	9704      	str	r7, [sp, #16]
   1032a:	9303      	str	r3, [sp, #12]
   1032c:	2000      	movs	r0, #0
   1032e:	9002      	str	r0, [sp, #8]
   10330:	9001      	str	r0, [sp, #4]
   10332:	9600      	str	r6, [sp, #0]
   10334:	462b      	mov	r3, r5
   10336:	4622      	mov	r2, r4
   10338:	4601      	mov	r1, r0
   1033a:	f000 fc57 	bl	10bec <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1033e:	4603      	mov	r3, r0
   10340:	2800      	cmp	r0, #0
   10342:	f43f ae53 	beq.w	ffec <isr+0x41c>
   10346:	2802      	cmp	r0, #2
   10348:	f000 8090 	beq.w	1046c <__kernel_ram_size+0x46c>
   1034c:	4b4b      	ldr	r3, [pc, #300]	; (1047c <__kernel_ram_size+0x47c>)
   1034e:	7b9b      	ldrb	r3, [r3, #14]
   10350:	b2db      	uxtb	r3, r3
   10352:	429c      	cmp	r4, r3
   10354:	d16a      	bne.n	1042c <__kernel_ram_size+0x42c>
	u32_t dont_close = 0;
   10356:	2300      	movs	r3, #0
   10358:	e648      	b.n	ffec <isr+0x41c>
				force = 1;
   1035a:	2701      	movs	r7, #1
   1035c:	e794      	b.n	10288 <__kernel_ram_size+0x288>
					force = 1;
   1035e:	2701      	movs	r7, #1
   10360:	e792      	b.n	10288 <__kernel_ram_size+0x288>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   10362:	2122      	movs	r1, #34	; 0x22
   10364:	f003 ffde 	bl	14324 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   10368:	4c44      	ldr	r4, [pc, #272]	; (1047c <__kernel_ram_size+0x47c>)
   1036a:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   1036e:	f002 f885 	bl	1247c <connection_release>
			_radio.conn_curr = NULL;
   10372:	2300      	movs	r3, #0
   10374:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   10378:	e638      	b.n	ffec <isr+0x41c>
			_radio.conn_curr->apto_expire = 0;
   1037a:	2300      	movs	r3, #0
   1037c:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
   10380:	4b3e      	ldr	r3, [pc, #248]	; (1047c <__kernel_ram_size+0x47c>)
   10382:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   10386:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1038a:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1038c:	429a      	cmp	r2, r3
   1038e:	d318      	bcc.n	103c2 <__kernel_ram_size+0x3c2>
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
   10390:	4b3a      	ldr	r3, [pc, #232]	; (1047c <__kernel_ram_size+0x47c>)
   10392:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   10396:	1ad3      	subs	r3, r2, r3
   10398:	b2db      	uxtb	r3, r3
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
	if (count > packet_rx_acquired_count_get()) {
   1039a:	2b01      	cmp	r3, #1
   1039c:	d91b      	bls.n	103d6 <__kernel_ram_size+0x3d6>
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
   1039e:	4b37      	ldr	r3, [pc, #220]	; (1047c <__kernel_ram_size+0x47c>)
   103a0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   103a4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   103a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   103ac:	b1ab      	cbz	r3, 103da <__kernel_ram_size+0x3da>
			radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   103ae:	4a33      	ldr	r2, [pc, #204]	; (1047c <__kernel_ram_size+0x47c>)
   103b0:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
   103b4:	8c12      	ldrh	r2, [r2, #32]
   103b6:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_APTO;
   103b8:	220a      	movs	r2, #10
   103ba:	711a      	strb	r2, [r3, #4]
			packet_rx_enqueue();
   103bc:	f003 ff3e 	bl	1423c <packet_rx_enqueue>
   103c0:	e778      	b.n	102b4 <__kernel_ram_size+0x2b4>
		return (_radio.packet_rx_count -
   103c2:	492e      	ldr	r1, [pc, #184]	; (1047c <__kernel_ram_size+0x47c>)
   103c4:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   103c8:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   103cc:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   103ce:	fa52 f383 	uxtab	r3, r2, r3
   103d2:	b2db      	uxtb	r3, r3
   103d4:	e7e1      	b.n	1039a <__kernel_ram_size+0x39a>
		return 0;
   103d6:	2300      	movs	r3, #0
   103d8:	e7e8      	b.n	103ac <__kernel_ram_size+0x3ac>
			LL_ASSERT(radio_pdu_node_rx);
   103da:	4040      	eors	r0, r0
   103dc:	f380 8811 	msr	BASEPRI, r0
   103e0:	f04f 0004 	mov.w	r0, #4
   103e4:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
   103e6:	2300      	movs	r3, #0
   103e8:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   103ec:	4b23      	ldr	r3, [pc, #140]	; (1047c <__kernel_ram_size+0x47c>)
   103ee:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   103f2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
   103f6:	2a00      	cmp	r2, #0
   103f8:	f47f af68 	bne.w	102cc <__kernel_ram_size+0x2cc>
			    (_radio.conn_curr->llcp_req ==
   103fc:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
			     _radio.conn_curr->llcp_ack)) {
   10400:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
			if ((_radio.conn_curr->procedure_expire == 0) &&
   10404:	4291      	cmp	r1, r2
   10406:	f47f af61 	bne.w	102cc <__kernel_ram_size+0x2cc>
				_radio.conn_curr->llcp_type = LLCP_PING;
   1040a:	2207      	movs	r2, #7
   1040c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   10410:	4b1a      	ldr	r3, [pc, #104]	; (1047c <__kernel_ram_size+0x47c>)
   10412:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   10416:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   1041a:	3b01      	subs	r3, #1
   1041c:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   10420:	e754      	b.n	102cc <__kernel_ram_size+0x2cc>
		_radio.conn_curr->latency_event = 0;
   10422:	2300      	movs	r3, #0
   10424:	8553      	strh	r3, [r2, #42]	; 0x2a
   10426:	e761      	b.n	102ec <__kernel_ram_size+0x2ec>
	lazy = 0;
   10428:	2300      	movs	r3, #0
   1042a:	e76d      	b.n	10308 <__kernel_ram_size+0x308>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1042c:	4040      	eors	r0, r0
   1042e:	f380 8811 	msr	BASEPRI, r0
   10432:	f04f 0004 	mov.w	r0, #4
   10436:	df02      	svc	2
		LL_ASSERT((_radio.state == STATE_STOP) ||
   10438:	4b10      	ldr	r3, [pc, #64]	; (1047c <__kernel_ram_size+0x47c>)
   1043a:	7c1b      	ldrb	r3, [r3, #16]
   1043c:	3b04      	subs	r3, #4
   1043e:	b2db      	uxtb	r3, r3
   10440:	2b01      	cmp	r3, #1
   10442:	d803      	bhi.n	1044c <__kernel_ram_size+0x44c>
		_radio.state = STATE_NONE;
   10444:	2200      	movs	r2, #0
   10446:	4b0d      	ldr	r3, [pc, #52]	; (1047c <__kernel_ram_size+0x47c>)
   10448:	741a      	strb	r2, [r3, #16]
   1044a:	e5d2      	b.n	fff2 <isr+0x422>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   1044c:	4040      	eors	r0, r0
   1044e:	f380 8811 	msr	BASEPRI, r0
   10452:	f04f 0004 	mov.w	r0, #4
   10456:	df02      	svc	2
		LL_ASSERT(0);
   10458:	4040      	eors	r0, r0
   1045a:	f380 8811 	msr	BASEPRI, r0
   1045e:	f04f 0004 	mov.w	r0, #4
   10462:	df02      	svc	2
	u32_t dont_close = 0;
   10464:	2300      	movs	r3, #0
   10466:	e5c1      	b.n	ffec <isr+0x41c>
   10468:	2300      	movs	r3, #0
   1046a:	e5bf      	b.n	ffec <isr+0x41c>
   1046c:	2300      	movs	r3, #0
   1046e:	e5bd      	b.n	ffec <isr+0x41c>
   10470:	1afd498d 	.word	0x1afd498d
   10474:	00000007 	.word	0x00000007
   10478:	3b9aca00 	.word	0x3b9aca00
   1047c:	20000fec 	.word	0x20000fec
   10480:	00011bed 	.word	0x00011bed
	_radio.role = ROLE_NONE;
   10484:	4d0e      	ldr	r5, [pc, #56]	; (104c0 <__kernel_ram_size+0x4c0>)
   10486:	2400      	movs	r4, #0
   10488:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
   1048a:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
   1048c:	736c      	strb	r4, [r5, #13]
	radio_tmr_stop();
   1048e:	f7ff fa05 	bl	f89c <radio_tmr_stop>
	event_inactive(0, 0, 0, NULL);
   10492:	4623      	mov	r3, r4
   10494:	4622      	mov	r2, r4
   10496:	4621      	mov	r1, r4
   10498:	4620      	mov	r0, r4
   1049a:	f001 fe29 	bl	120f0 <event_inactive>
	clock_control_off(_radio.hf_clock, NULL);
   1049e:	6828      	ldr	r0, [r5, #0]
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
   104a0:	6843      	ldr	r3, [r0, #4]

	return api->off(dev, sys);
   104a2:	685b      	ldr	r3, [r3, #4]
   104a4:	4621      	mov	r1, r4
   104a6:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   104a8:	2201      	movs	r2, #1
   104aa:	4611      	mov	r1, r2
   104ac:	4620      	mov	r0, r4
   104ae:	f7fe fcff 	bl	eeb0 <mayfly_enable>
   104b2:	e59e      	b.n	fff2 <isr+0x422>
		LL_ASSERT(0);
   104b4:	4040      	eors	r0, r0
   104b6:	f380 8811 	msr	BASEPRI, r0
   104ba:	f04f 0004 	mov.w	r0, #4
   104be:	df02      	svc	2
   104c0:	20000fec 	.word	0x20000fec

000104c4 <init>:
{
   104c4:	b410      	push	{r4}
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
   104c6:	1d1c      	adds	r4, r3, #4
   104c8:	42a2      	cmp	r2, r4
   104ca:	d90e      	bls.n	104ea <init+0x26>
	*rng = (struct rand *)context;
   104cc:	6001      	str	r1, [r0, #0]
	p->count = len - offsetof(struct rand, rand);
   104ce:	3a04      	subs	r2, #4
   104d0:	700a      	strb	r2, [r1, #0]
	p->threshold = threshold;
   104d2:	704b      	strb	r3, [r1, #1]
	p->first = p->last = 0;
   104d4:	2300      	movs	r3, #0
   104d6:	70cb      	strb	r3, [r1, #3]
   104d8:	708b      	strb	r3, [r1, #2]
	if (!rng_isr || !rng_thr) {
   104da:	4b0c      	ldr	r3, [pc, #48]	; (1050c <init+0x48>)
   104dc:	681b      	ldr	r3, [r3, #0]
   104de:	b153      	cbz	r3, 104f6 <init+0x32>
   104e0:	4b0b      	ldr	r3, [pc, #44]	; (10510 <init+0x4c>)
   104e2:	681b      	ldr	r3, [r3, #0]
   104e4:	b13b      	cbz	r3, 104f6 <init+0x32>
}
   104e6:	bc10      	pop	{r4}
   104e8:	4770      	bx	lr
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
   104ea:	4040      	eors	r0, r0
   104ec:	f380 8811 	msr	BASEPRI, r0
   104f0:	f04f 0004 	mov.w	r0, #4
   104f4:	df02      	svc	2
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
   104f6:	4b07      	ldr	r3, [pc, #28]	; (10514 <init+0x50>)
   104f8:	2201      	movs	r2, #1
   104fa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_RNG->EVENTS_VALRDY = 0;
   104fe:	2100      	movs	r1, #0
   10500:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   10504:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_RNG->TASKS_START = 1;
   10508:	601a      	str	r2, [r3, #0]
}
   1050a:	e7ec      	b.n	104e6 <init+0x22>
   1050c:	20000f3c 	.word	0x20000f3c
   10510:	20000f40 	.word	0x20000f40
   10514:	4000d000 	.word	0x4000d000

00010518 <get>:
	LL_ASSERT(rng);
   10518:	b1d0      	cbz	r0, 10550 <get+0x38>
{
   1051a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1051e:	4607      	mov	r7, r0
	first = rng->first;
   10520:	f890 e002 	ldrb.w	lr, [r0, #2]
	last = rng->last;
   10524:	78c5      	ldrb	r5, [r0, #3]
	if (first <= last) {
   10526:	45ae      	cmp	lr, r5
   10528:	d82e      	bhi.n	10588 <get+0x70>
		d = &rand[octets];
   1052a:	440a      	add	r2, r1
		s = &rng->rand[first];
   1052c:	eb00 060e 	add.w	r6, r0, lr
   10530:	3604      	adds	r6, #4
		avail = last - first;
   10532:	eba5 040e 	sub.w	r4, r5, lr
   10536:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   10538:	42a1      	cmp	r1, r4
   1053a:	d20f      	bcs.n	1055c <get+0x44>
			remaining = avail - octets;
   1053c:	b2cb      	uxtb	r3, r1
   1053e:	1ae4      	subs	r4, r4, r3
   10540:	fa5f fc84 	uxtb.w	ip, r4
			avail = octets;
   10544:	461c      	mov	r4, r3
		first += avail;
   10546:	44a6      	add	lr, r4
   10548:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
   1054c:	1b08      	subs	r0, r1, r4
		while (avail--) {
   1054e:	e00d      	b.n	1056c <get+0x54>
	LL_ASSERT(rng);
   10550:	4040      	eors	r0, r0
   10552:	f380 8811 	msr	BASEPRI, r0
   10556:	f04f 0004 	mov.w	r0, #4
   1055a:	df02      	svc	2
			remaining = 0;
   1055c:	f04f 0c00 	mov.w	ip, #0
   10560:	e7f1      	b.n	10546 <get+0x2e>
			*(--d) = *s++;
   10562:	7835      	ldrb	r5, [r6, #0]
   10564:	f802 5d01 	strb.w	r5, [r2, #-1]!
		while (avail--) {
   10568:	461c      	mov	r4, r3
			*(--d) = *s++;
   1056a:	3601      	adds	r6, #1
		while (avail--) {
   1056c:	1e63      	subs	r3, r4, #1
   1056e:	b2db      	uxtb	r3, r3
   10570:	2c00      	cmp	r4, #0
   10572:	d1f6      	bne.n	10562 <get+0x4a>
		rng->first = first;
   10574:	f887 e002 	strb.w	lr, [r7, #2]
	if (remaining < rng->threshold) {
   10578:	787b      	ldrb	r3, [r7, #1]
   1057a:	459c      	cmp	ip, r3
   1057c:	d202      	bcs.n	10584 <get+0x6c>
		NRF_RNG->TASKS_START = 1;
   1057e:	2201      	movs	r2, #1
   10580:	4b24      	ldr	r3, [pc, #144]	; (10614 <get+0xfc>)
   10582:	601a      	str	r2, [r3, #0]
}
   10584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		d = &rand[octets];
   10588:	440a      	add	r2, r1
		s = &rng->rand[first];
   1058a:	eb00 080e 	add.w	r8, r0, lr
   1058e:	f108 0804 	add.w	r8, r8, #4
		avail = rng->count - first;
   10592:	7804      	ldrb	r4, [r0, #0]
   10594:	eba4 040e 	sub.w	r4, r4, lr
   10598:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   1059a:	42a1      	cmp	r1, r4
   1059c:	d20d      	bcs.n	105ba <get+0xa2>
			remaining = avail + last - octets;
   1059e:	eb05 0c04 	add.w	ip, r5, r4
   105a2:	fa5f fc8c 	uxtb.w	ip, ip
   105a6:	b2cc      	uxtb	r4, r1
   105a8:	ebac 0c04 	sub.w	ip, ip, r4
   105ac:	fa5f fc8c 	uxtb.w	ip, ip
			first += avail;
   105b0:	44a6      	add	lr, r4
   105b2:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
   105b6:	1b08      	subs	r0, r1, r4
		while (avail--) {
   105b8:	e00a      	b.n	105d0 <get+0xb8>
			remaining = last;
   105ba:	46ac      	mov	ip, r5
			first = 0;
   105bc:	f04f 0e00 	mov.w	lr, #0
   105c0:	e7f9      	b.n	105b6 <get+0x9e>
			*(--d) = *s++;
   105c2:	f898 6000 	ldrb.w	r6, [r8]
   105c6:	f802 6d01 	strb.w	r6, [r2, #-1]!
		while (avail--) {
   105ca:	461c      	mov	r4, r3
			*(--d) = *s++;
   105cc:	f108 0801 	add.w	r8, r8, #1
		while (avail--) {
   105d0:	1e63      	subs	r3, r4, #1
   105d2:	b2db      	uxtb	r3, r3
   105d4:	2c00      	cmp	r4, #0
   105d6:	d1f4      	bne.n	105c2 <get+0xaa>
		if (octets && last) {
   105d8:	b1c8      	cbz	r0, 1060e <get+0xf6>
   105da:	b1c5      	cbz	r5, 1060e <get+0xf6>
			s = &rng->rand[0];
   105dc:	1d3e      	adds	r6, r7, #4
			if (octets < last) {
   105de:	42a8      	cmp	r0, r5
   105e0:	d206      	bcs.n	105f0 <get+0xd8>
				remaining = last - octets;
   105e2:	fa5f fe80 	uxtb.w	lr, r0
   105e6:	eba5 040e 	sub.w	r4, r5, lr
   105ea:	fa5f fc84 	uxtb.w	ip, r4
   105ee:	e001      	b.n	105f4 <get+0xdc>
				remaining = 0;
   105f0:	46a4      	mov	ip, r4
	last = rng->last;
   105f2:	46ae      	mov	lr, r5
			octets -= last;
   105f4:	eba0 000e 	sub.w	r0, r0, lr
			while (last--) {
   105f8:	4671      	mov	r1, lr
   105fa:	e004      	b.n	10606 <get+0xee>
				*(--d) = *s++;
   105fc:	7831      	ldrb	r1, [r6, #0]
   105fe:	f802 1d01 	strb.w	r1, [r2, #-1]!
   10602:	3601      	adds	r6, #1
			while (last--) {
   10604:	4619      	mov	r1, r3
   10606:	1e4b      	subs	r3, r1, #1
   10608:	b2db      	uxtb	r3, r3
   1060a:	2900      	cmp	r1, #0
   1060c:	d1f6      	bne.n	105fc <get+0xe4>
		rng->first = first;
   1060e:	f887 e002 	strb.w	lr, [r7, #2]
   10612:	e7b1      	b.n	10578 <get+0x60>
   10614:	4000d000 	.word	0x4000d000

00010618 <rand_init>:
{
   10618:	b508      	push	{r3, lr}
	init(&rng_thr, context, context_len, threshold);
   1061a:	4613      	mov	r3, r2
   1061c:	460a      	mov	r2, r1
   1061e:	4601      	mov	r1, r0
   10620:	4801      	ldr	r0, [pc, #4]	; (10628 <rand_init+0x10>)
   10622:	f7ff ff4f 	bl	104c4 <init>
   10626:	bd08      	pop	{r3, pc}
   10628:	20000f40 	.word	0x20000f40

0001062c <rand_isr_init>:
{
   1062c:	b508      	push	{r3, lr}
	init(&rng_isr, context, context_len, threshold);
   1062e:	4613      	mov	r3, r2
   10630:	460a      	mov	r2, r1
   10632:	4601      	mov	r1, r0
   10634:	4801      	ldr	r0, [pc, #4]	; (1063c <rand_isr_init+0x10>)
   10636:	f7ff ff45 	bl	104c4 <init>
   1063a:	bd08      	pop	{r3, pc}
   1063c:	20000f3c 	.word	0x20000f3c

00010640 <rand_get>:
{
   10640:	b508      	push	{r3, lr}
	return get(rng_thr, octets, rand);
   10642:	460a      	mov	r2, r1
   10644:	4601      	mov	r1, r0
   10646:	4b02      	ldr	r3, [pc, #8]	; (10650 <rand_get+0x10>)
   10648:	6818      	ldr	r0, [r3, #0]
   1064a:	f7ff ff65 	bl	10518 <get>
}
   1064e:	bd08      	pop	{r3, pc}
   10650:	20000f40 	.word	0x20000f40

00010654 <rand_isr_get>:
{
   10654:	b508      	push	{r3, lr}
	return get(rng_isr, octets, rand);
   10656:	460a      	mov	r2, r1
   10658:	4601      	mov	r1, r0
   1065a:	4b02      	ldr	r3, [pc, #8]	; (10664 <rand_isr_get+0x10>)
   1065c:	6818      	ldr	r0, [r3, #0]
   1065e:	f7ff ff5b 	bl	10518 <get>
}
   10662:	bd08      	pop	{r3, pc}
   10664:	20000f3c 	.word	0x20000f3c

00010668 <isr_rand>:

void isr_rand(void *param)
{
   10668:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
   1066a:	4b10      	ldr	r3, [pc, #64]	; (106ac <isr_rand+0x44>)
   1066c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   10670:	b903      	cbnz	r3, 10674 <isr_rand+0xc>
   10672:	bd08      	pop	{r3, pc}
		int ret;

		ret = isr(rng_isr, true);
   10674:	2101      	movs	r1, #1
   10676:	4b0e      	ldr	r3, [pc, #56]	; (106b0 <isr_rand+0x48>)
   10678:	6818      	ldr	r0, [r3, #0]
   1067a:	f7ff fa79 	bl	fb70 <isr>
		if (ret != -EBUSY) {
   1067e:	f110 0f10 	cmn.w	r0, #16
   10682:	d008      	beq.n	10696 <isr_rand+0x2e>
			ret = isr(rng_thr, (ret == -ENOBUFS));
   10684:	f110 0f69 	cmn.w	r0, #105	; 0x69
   10688:	bf14      	ite	ne
   1068a:	2100      	movne	r1, #0
   1068c:	2101      	moveq	r1, #1
   1068e:	4b09      	ldr	r3, [pc, #36]	; (106b4 <isr_rand+0x4c>)
   10690:	6818      	ldr	r0, [r3, #0]
   10692:	f7ff fa6d 	bl	fb70 <isr>
		}

		NRF_RNG->EVENTS_VALRDY = 0;
   10696:	2200      	movs	r2, #0
   10698:	4b04      	ldr	r3, [pc, #16]	; (106ac <isr_rand+0x44>)
   1069a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (ret != -EBUSY) {
   1069e:	f110 0f10 	cmn.w	r0, #16
   106a2:	d0e6      	beq.n	10672 <isr_rand+0xa>
			NRF_RNG->TASKS_STOP = 1;
   106a4:	2201      	movs	r2, #1
   106a6:	605a      	str	r2, [r3, #4]
		}
	}
}
   106a8:	e7e3      	b.n	10672 <isr_rand+0xa>
   106aa:	bf00      	nop
   106ac:	4000d000 	.word	0x4000d000
   106b0:	20000f3c 	.word	0x20000f3c
   106b4:	20000f40 	.word	0x20000f40

000106b8 <ticker_by_slot_get>:
 * Static Functions
 ****************************************************************************/
static u8_t ticker_by_slot_get(struct ticker_node *node, u8_t ticker_id_head,
			       u32_t ticks_slot)
{
	while (ticker_id_head != TICKER_NULL) {
   106b8:	29ff      	cmp	r1, #255	; 0xff
   106ba:	d012      	beq.n	106e2 <ticker_by_slot_get+0x2a>
{
   106bc:	b430      	push	{r4, r5}
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		ticker = &node[ticker_id_head];
   106be:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   106c2:	00a3      	lsls	r3, r4, #2
   106c4:	18c4      	adds	r4, r0, r3
		ticks_to_expire = ticker->ticks_to_expire;
   106c6:	68a5      	ldr	r5, [r4, #8]

		if (ticks_slot <= ticks_to_expire) {
   106c8:	42aa      	cmp	r2, r5
   106ca:	d906      	bls.n	106da <ticker_by_slot_get+0x22>
			return TICKER_NULL;
		}

		if (ticker->ticks_slot) {
   106cc:	8ae4      	ldrh	r4, [r4, #22]
   106ce:	b92c      	cbnz	r4, 106dc <ticker_by_slot_get+0x24>
			break;
		}

		ticks_slot -= ticks_to_expire;
   106d0:	1b52      	subs	r2, r2, r5
		ticker_id_head = ticker->next;
   106d2:	5cc1      	ldrb	r1, [r0, r3]
	while (ticker_id_head != TICKER_NULL) {
   106d4:	29ff      	cmp	r1, #255	; 0xff
   106d6:	d1f2      	bne.n	106be <ticker_by_slot_get+0x6>
   106d8:	e000      	b.n	106dc <ticker_by_slot_get+0x24>
			return TICKER_NULL;
   106da:	21ff      	movs	r1, #255	; 0xff
	}

	return ticker_id_head;
}
   106dc:	4608      	mov	r0, r1
   106de:	bc30      	pop	{r4, r5}
   106e0:	4770      	bx	lr
   106e2:	4608      	mov	r0, r1
   106e4:	4770      	bx	lr

000106e6 <ticker_by_next_slot_get>:

static void ticker_by_next_slot_get(struct ticker_instance *instance,
				    u8_t *ticker_id_head, u32_t *ticks_current,
				    u32_t *ticks_to_expire)
{
   106e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   106e8:	4694      	mov	ip, r2
	struct ticker_node *ticker;
	struct ticker_node *node;
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;
   106ea:	6807      	ldr	r7, [r0, #0]

	_ticker_id_head = *ticker_id_head;
   106ec:	f891 e000 	ldrb.w	lr, [r1]
	_ticks_to_expire = *ticks_to_expire;
   106f0:	681e      	ldr	r6, [r3, #0]
	if ((_ticker_id_head == TICKER_NULL) ||
   106f2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   106f6:	d004      	beq.n	10702 <ticker_by_next_slot_get+0x1c>
	    (*ticks_current != instance->ticks_current)) {
   106f8:	6942      	ldr	r2, [r0, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   106fa:	f8dc 4000 	ldr.w	r4, [ip]
   106fe:	4294      	cmp	r4, r2
   10700:	d005      	beq.n	1070e <ticker_by_next_slot_get+0x28>
		_ticker_id_head = instance->ticker_id_head;
   10702:	7e04      	ldrb	r4, [r0, #24]
		*ticks_current = instance->ticks_current;
   10704:	6940      	ldr	r0, [r0, #20]
   10706:	f8cc 0000 	str.w	r0, [ip]
		_ticks_to_expire = 0;
   1070a:	2600      	movs	r6, #0
   1070c:	e00a      	b.n	10724 <ticker_by_next_slot_get+0x3e>
	} else {
		ticker = &node[_ticker_id_head];
   1070e:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
   10712:	ea4f 028e 	mov.w	r2, lr, lsl #2
   10716:	4696      	mov	lr, r2
   10718:	18bd      	adds	r5, r7, r2
		_ticker_id_head = ticker->next;
   1071a:	5cbc      	ldrb	r4, [r7, r2]
   1071c:	e002      	b.n	10724 <ticker_by_next_slot_get+0x3e>
	}

	while ((_ticker_id_head != TICKER_NULL) &&
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
		_ticks_to_expire += ticker->ticks_to_expire;
   1071e:	68a8      	ldr	r0, [r5, #8]
   10720:	4406      	add	r6, r0
		_ticker_id_head = ticker->next;
   10722:	5cbc      	ldrb	r4, [r7, r2]
	while ((_ticker_id_head != TICKER_NULL) &&
   10724:	2cff      	cmp	r4, #255	; 0xff
   10726:	d006      	beq.n	10736 <ticker_by_next_slot_get+0x50>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
   10728:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
   1072c:	0082      	lsls	r2, r0, #2
   1072e:	18bd      	adds	r5, r7, r2
   10730:	8ae8      	ldrh	r0, [r5, #22]
	while ((_ticker_id_head != TICKER_NULL) &&
   10732:	2800      	cmp	r0, #0
   10734:	d0f3      	beq.n	1071e <ticker_by_next_slot_get+0x38>
	}

	if (_ticker_id_head != TICKER_NULL) {
   10736:	2cff      	cmp	r4, #255	; 0xff
   10738:	d001      	beq.n	1073e <ticker_by_next_slot_get+0x58>
		_ticks_to_expire += ticker->ticks_to_expire;
   1073a:	68aa      	ldr	r2, [r5, #8]
   1073c:	4416      	add	r6, r2
	}

	*ticker_id_head = _ticker_id_head;
   1073e:	700c      	strb	r4, [r1, #0]
	*ticks_to_expire = _ticks_to_expire;
   10740:	601e      	str	r6, [r3, #0]
   10742:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010744 <ticker_enqueue>:
}

static u8_t ticker_enqueue(struct ticker_instance *instance, u8_t id)
{
   10744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10748:	b085      	sub	sp, #20
   1074a:	4681      	mov	r9, r0
   1074c:	9102      	str	r1, [sp, #8]
	u32_t ticks_to_expire;
	u8_t previous;
	u8_t current;
	u8_t collide;

	node = &instance->node[0];
   1074e:	6806      	ldr	r6, [r0, #0]
	ticker_new = &node[id];
   10750:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   10754:	009b      	lsls	r3, r3, #2
   10756:	9303      	str	r3, [sp, #12]
   10758:	eb06 0a03 	add.w	sl, r6, r3
	ticks_to_expire = ticker_new->ticks_to_expire;
   1075c:	f8da 5008 	ldr.w	r5, [sl, #8]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
   10760:	f890 8018 	ldrb.w	r8, [r0, #24]
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
   10764:	8b47      	ldrh	r7, [r0, #26]
	current = instance->ticker_id_head;
   10766:	4644      	mov	r4, r8
	collide = ticker_id_slot_previous = TICKER_NULL;
   10768:	23ff      	movs	r3, #255	; 0xff
   1076a:	9301      	str	r3, [sp, #4]
	while ((current != TICKER_NULL) &&
   1076c:	e004      	b.n	10778 <ticker_enqueue+0x34>

		if (ticker_current->ticks_slot != 0) {
			ticks_slot_previous = ticker_current->ticks_slot;
			ticker_id_slot_previous = current;
		} else {
			if (ticks_slot_previous > ticks_to_expire_current) {
   1076e:	4297      	cmp	r7, r2
   10770:	d912      	bls.n	10798 <ticker_enqueue+0x54>
				ticks_slot_previous -= ticks_to_expire_current;
   10772:	1abf      	subs	r7, r7, r2
			} else {
				ticks_slot_previous = 0;
			}
		}
		previous = current;
   10774:	46a0      	mov	r8, r4
		current = ticker_current->next;
   10776:	5cf4      	ldrb	r4, [r6, r3]
	while ((current != TICKER_NULL) &&
   10778:	2cff      	cmp	r4, #255	; 0xff
   1077a:	d00f      	beq.n	1079c <ticker_enqueue+0x58>
		 (ticker_current = &node[current])->ticks_to_expire))) {
   1077c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   10780:	0093      	lsls	r3, r2, #2
   10782:	18f1      	adds	r1, r6, r3
		(ticks_to_expire_current =
   10784:	688a      	ldr	r2, [r1, #8]
	while ((current != TICKER_NULL) &&
   10786:	4295      	cmp	r5, r2
   10788:	d908      	bls.n	1079c <ticker_enqueue+0x58>
		ticks_to_expire -= ticks_to_expire_current;
   1078a:	1aad      	subs	r5, r5, r2
		if (ticker_current->ticks_slot != 0) {
   1078c:	8ac9      	ldrh	r1, [r1, #22]
   1078e:	2900      	cmp	r1, #0
   10790:	d0ed      	beq.n	1076e <ticker_enqueue+0x2a>
			ticks_slot_previous = ticker_current->ticks_slot;
   10792:	460f      	mov	r7, r1
			ticker_id_slot_previous = current;
   10794:	9401      	str	r4, [sp, #4]
   10796:	e7ed      	b.n	10774 <ticker_enqueue+0x30>
				ticks_slot_previous = 0;
   10798:	2700      	movs	r7, #0
   1079a:	e7eb      	b.n	10774 <ticker_enqueue+0x30>
	}

	collide = ticker_by_slot_get(&node[0], current,
				     ticks_to_expire + ticker_new->ticks_slot);
   1079c:	f8ba b016 	ldrh.w	fp, [sl, #22]
	collide = ticker_by_slot_get(&node[0], current,
   107a0:	eb05 020b 	add.w	r2, r5, fp
   107a4:	4621      	mov	r1, r4
   107a6:	4630      	mov	r0, r6
   107a8:	f7ff ff86 	bl	106b8 <ticker_by_slot_get>

	if ((ticker_new->ticks_slot == 0) ||
   107ac:	f1bb 0f00 	cmp.w	fp, #0
   107b0:	d007      	beq.n	107c2 <ticker_enqueue+0x7e>
   107b2:	42af      	cmp	r7, r5
   107b4:	d801      	bhi.n	107ba <ticker_enqueue+0x76>
	    ((ticks_slot_previous <= ticks_to_expire) &&
   107b6:	28ff      	cmp	r0, #255	; 0xff
   107b8:	d003      	beq.n	107c2 <ticker_enqueue+0x7e>

		if (current != TICKER_NULL) {
			node[current].ticks_to_expire -= ticks_to_expire;
		}
	} else {
		if (ticks_slot_previous > ticks_to_expire) {
   107ba:	42af      	cmp	r7, r5
   107bc:	d918      	bls.n	107f0 <ticker_enqueue+0xac>
			id = ticker_id_slot_previous;
   107be:	9801      	ldr	r0, [sp, #4]
   107c0:	e016      	b.n	107f0 <ticker_enqueue+0xac>
		ticker_new->ticks_to_expire = ticks_to_expire;
   107c2:	f8ca 5008 	str.w	r5, [sl, #8]
		ticker_new->next = current;
   107c6:	9b03      	ldr	r3, [sp, #12]
   107c8:	54f4      	strb	r4, [r6, r3]
		if (previous == current) {
   107ca:	45a0      	cmp	r8, r4
   107cc:	d013      	beq.n	107f6 <ticker_enqueue+0xb2>
			node[previous].next = id;
   107ce:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
   107d2:	ea4f 0388 	mov.w	r3, r8, lsl #2
   107d6:	f89d 2008 	ldrb.w	r2, [sp, #8]
   107da:	54f2      	strb	r2, [r6, r3]
		if (current != TICKER_NULL) {
   107dc:	2cff      	cmp	r4, #255	; 0xff
   107de:	d00f      	beq.n	10800 <ticker_enqueue+0xbc>
			node[current].ticks_to_expire -= ticks_to_expire;
   107e0:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   107e4:	00a3      	lsls	r3, r4, #2
   107e6:	441e      	add	r6, r3
   107e8:	68b3      	ldr	r3, [r6, #8]
   107ea:	1b5d      	subs	r5, r3, r5
   107ec:	60b5      	str	r5, [r6, #8]
   107ee:	9802      	ldr	r0, [sp, #8]
			id = collide;
		}
	}

	return id;
}
   107f0:	b005      	add	sp, #20
   107f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			instance->ticker_id_head = id;
   107f6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   107fa:	f889 3018 	strb.w	r3, [r9, #24]
   107fe:	e7ed      	b.n	107dc <ticker_enqueue+0x98>
   10800:	9802      	ldr	r0, [sp, #8]
   10802:	e7f5      	b.n	107f0 <ticker_enqueue+0xac>

00010804 <ticker_dequeue>:

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
   10804:	b4f0      	push	{r4, r5, r6, r7}
	u32_t timeout;
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
   10806:	6806      	ldr	r6, [r0, #0]
	previous = instance->ticker_id_head;
   10808:	7e07      	ldrb	r7, [r0, #24]
	current = previous;
   1080a:	463b      	mov	r3, r7
	total = 0;
   1080c:	2500      	movs	r5, #0
	ticker_current = 0;
   1080e:	462c      	mov	r4, r5
	while (current != TICKER_NULL) {
   10810:	2bff      	cmp	r3, #255	; 0xff
   10812:	d00a      	beq.n	1082a <ticker_dequeue+0x26>

		ticker_current = &node[current];
   10814:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
   10818:	00a2      	lsls	r2, r4, #2
   1081a:	18b4      	adds	r4, r6, r2

		if (current == id) {
   1081c:	428b      	cmp	r3, r1
   1081e:	d004      	beq.n	1082a <ticker_dequeue+0x26>
			break;
		}

		total += ticker_current->ticks_to_expire;
   10820:	68a7      	ldr	r7, [r4, #8]
   10822:	443d      	add	r5, r7
		previous = current;
   10824:	461f      	mov	r7, r3
		current = ticker_current->next;
   10826:	5cb3      	ldrb	r3, [r6, r2]
   10828:	e7f2      	b.n	10810 <ticker_dequeue+0xc>
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
   1082a:	2bff      	cmp	r3, #255	; 0xff
   1082c:	d017      	beq.n	1085e <ticker_dequeue+0x5a>
		return 0;
	}

	/* ticker is the first in the list */
	if (previous == current) {
   1082e:	429f      	cmp	r7, r3
   10830:	d012      	beq.n	10858 <ticker_dequeue+0x54>
		instance->ticker_id_head = ticker_current->next;
	}

	/* remaining timeout between next timeout */
	timeout = ticker_current->ticks_to_expire;
   10832:	68a0      	ldr	r0, [r4, #8]

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
   10834:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
   10838:	00bb      	lsls	r3, r7, #2
   1083a:	7822      	ldrb	r2, [r4, #0]
   1083c:	54f2      	strb	r2, [r6, r3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
   1083e:	7823      	ldrb	r3, [r4, #0]
   10840:	2bff      	cmp	r3, #255	; 0xff
   10842:	d006      	beq.n	10852 <ticker_dequeue+0x4e>
		node[ticker_current->next].ticks_to_expire += timeout;
   10844:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   10848:	009a      	lsls	r2, r3, #2
   1084a:	4416      	add	r6, r2
   1084c:	68b3      	ldr	r3, [r6, #8]
   1084e:	4403      	add	r3, r0
   10850:	60b3      	str	r3, [r6, #8]
	}

	return (total + timeout);
   10852:	4428      	add	r0, r5
}
   10854:	bcf0      	pop	{r4, r5, r6, r7}
   10856:	4770      	bx	lr
		instance->ticker_id_head = ticker_current->next;
   10858:	7823      	ldrb	r3, [r4, #0]
   1085a:	7603      	strb	r3, [r0, #24]
   1085c:	e7e9      	b.n	10832 <ticker_dequeue+0x2e>
		return 0;
   1085e:	2000      	movs	r0, #0
   10860:	e7f8      	b.n	10854 <ticker_dequeue+0x50>
	...

00010864 <ticker_remainder_inc>:
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
   10864:	69c3      	ldr	r3, [r0, #28]
   10866:	6a02      	ldr	r2, [r0, #32]
   10868:	4413      	add	r3, r2
   1086a:	6203      	str	r3, [r0, #32]
	if ((ticker->remainder_current < BIT(31)) &&
   1086c:	4a05      	ldr	r2, [pc, #20]	; (10884 <ticker_remainder_inc+0x20>)
   1086e:	441a      	add	r2, r3
   10870:	4905      	ldr	r1, [pc, #20]	; (10888 <ticker_remainder_inc+0x24>)
   10872:	428a      	cmp	r2, r1
   10874:	d804      	bhi.n	10880 <ticker_remainder_inc+0x1c>
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
   10876:	4a05      	ldr	r2, [pc, #20]	; (1088c <ticker_remainder_inc+0x28>)
   10878:	441a      	add	r2, r3
   1087a:	6202      	str	r2, [r0, #32]
		return 1;
   1087c:	2001      	movs	r0, #1
   1087e:	4770      	bx	lr
	}
	return 0;
   10880:	2000      	movs	r0, #0
}
   10882:	4770      	bx	lr
   10884:	ff172b5a 	.word	0xff172b5a
   10888:	7f172b59 	.word	0x7f172b59
   1088c:	fe2e56b6 	.word	0xfe2e56b6

00010890 <ticker_remainder_dec>:

static u8_t ticker_remainder_dec(struct ticker_node *ticker)
{
   10890:	4603      	mov	r3, r0
	u8_t decrement = 0;

	if ((ticker->remainder_current >= BIT(31)) ||
   10892:	6a01      	ldr	r1, [r0, #32]
   10894:	4a07      	ldr	r2, [pc, #28]	; (108b4 <ticker_remainder_dec+0x24>)
   10896:	440a      	add	r2, r1
   10898:	4807      	ldr	r0, [pc, #28]	; (108b8 <ticker_remainder_dec+0x28>)
   1089a:	4282      	cmp	r2, r0
   1089c:	d908      	bls.n	108b0 <ticker_remainder_dec+0x20>
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
   1089e:	4a07      	ldr	r2, [pc, #28]	; (108bc <ticker_remainder_dec+0x2c>)
   108a0:	440a      	add	r2, r1
   108a2:	621a      	str	r2, [r3, #32]
		decrement++;
   108a4:	2001      	movs	r0, #1
	}
	ticker->remainder_current -= ticker->remainder_periodic;
   108a6:	69d9      	ldr	r1, [r3, #28]
   108a8:	6a1a      	ldr	r2, [r3, #32]
   108aa:	1a52      	subs	r2, r2, r1
   108ac:	621a      	str	r2, [r3, #32]

	return decrement;
}
   108ae:	4770      	bx	lr
	u8_t decrement = 0;
   108b0:	2000      	movs	r0, #0
   108b2:	e7f8      	b.n	108a6 <ticker_remainder_dec+0x16>
   108b4:	ff172b5a 	.word	0xff172b5a
   108b8:	7f172b59 	.word	0x7f172b59
   108bc:	01d1a94a 	.word	0x01d1a94a

000108c0 <ticker_job_op_cb>:

static void ticker_job_op_cb(struct ticker_user_op *user_op, u32_t status)
{
   108c0:	b510      	push	{r4, lr}
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   108c2:	2300      	movs	r3, #0
   108c4:	7003      	strb	r3, [r0, #0]
	user_op->status = status;
   108c6:	6201      	str	r1, [r0, #32]
	if (user_op->fp_op_func) {
   108c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
   108ca:	b11c      	cbz	r4, 108d4 <ticker_job_op_cb+0x14>
   108cc:	460a      	mov	r2, r1
		user_op->fp_op_func(user_op->status, user_op->op_context);
   108ce:	6a81      	ldr	r1, [r0, #40]	; 0x28
   108d0:	4610      	mov	r0, r2
   108d2:	47a0      	blx	r4
   108d4:	bd10      	pop	{r4, pc}

000108d6 <ticker_instance1_cmp_set>:
{
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(u32_t value)
{
   108d6:	b508      	push	{r3, lr}
	cntr_cmp_set(1, value);
   108d8:	4601      	mov	r1, r0
   108da:	2001      	movs	r0, #1
   108dc:	f7fe fd3e 	bl	f35c <cntr_cmp_set>
   108e0:	bd08      	pop	{r3, pc}

000108e2 <ticker_instance0_cmp_set>:
{
   108e2:	b508      	push	{r3, lr}
	cntr_cmp_set(0, value);
   108e4:	4601      	mov	r1, r0
   108e6:	2000      	movs	r0, #0
   108e8:	f7fe fd38 	bl	f35c <cntr_cmp_set>
   108ec:	bd08      	pop	{r3, pc}
	...

000108f0 <ticker_instance1_sched>:
{
   108f0:	b508      	push	{r3, lr}
	switch (caller_id) {
   108f2:	2803      	cmp	r0, #3
   108f4:	d841      	bhi.n	1097a <ticker_instance1_sched+0x8a>
   108f6:	e8df f000 	tbb	[pc, r0]
   108fa:	1002      	.short	0x1002
   108fc:	331d      	.short	0x331d
		switch (callee_id) {
   108fe:	2901      	cmp	r1, #1
   10900:	d105      	bne.n	1090e <ticker_instance1_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   10902:	4b21      	ldr	r3, [pc, #132]	; (10988 <ticker_instance1_sched+0x98>)
   10904:	2102      	movs	r1, #2
   10906:	2000      	movs	r0, #0
   10908:	f7fe fb10 	bl	ef2c <mayfly_enqueue>
		break;
   1090c:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   1090e:	4040      	eors	r0, r0
   10910:	f380 8811 	msr	BASEPRI, r0
   10914:	f04f 0004 	mov.w	r0, #4
   10918:	df02      	svc	2
		switch (callee_id) {
   1091a:	2902      	cmp	r1, #2
   1091c:	d104      	bne.n	10928 <ticker_instance1_sched+0x38>
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   1091e:	4b1b      	ldr	r3, [pc, #108]	; (1098c <ticker_instance1_sched+0x9c>)
   10920:	4608      	mov	r0, r1
   10922:	f7fe fb03 	bl	ef2c <mayfly_enqueue>
		break;
   10926:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10928:	4040      	eors	r0, r0
   1092a:	f380 8811 	msr	BASEPRI, r0
   1092e:	f04f 0004 	mov.w	r0, #4
   10932:	df02      	svc	2
		switch (callee_id) {
   10934:	2901      	cmp	r1, #1
   10936:	d007      	beq.n	10948 <ticker_instance1_sched+0x58>
   10938:	2902      	cmp	r1, #2
   1093a:	d00b      	beq.n	10954 <ticker_instance1_sched+0x64>
			LL_ASSERT(0);
   1093c:	4040      	eors	r0, r0
   1093e:	f380 8811 	msr	BASEPRI, r0
   10942:	f04f 0004 	mov.w	r0, #4
   10946:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   10948:	4b11      	ldr	r3, [pc, #68]	; (10990 <ticker_instance1_sched+0xa0>)
   1094a:	2102      	movs	r1, #2
   1094c:	4608      	mov	r0, r1
   1094e:	f7fe faed 	bl	ef2c <mayfly_enqueue>
		break;
   10952:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   10954:	4b0f      	ldr	r3, [pc, #60]	; (10994 <ticker_instance1_sched+0xa4>)
   10956:	2102      	movs	r1, #2
   10958:	4608      	mov	r0, r1
   1095a:	f7fe fae7 	bl	ef2c <mayfly_enqueue>
		break;
   1095e:	bd08      	pop	{r3, pc}
		switch (callee_id) {
   10960:	2902      	cmp	r1, #2
   10962:	d104      	bne.n	1096e <ticker_instance1_sched+0x7e>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   10964:	4b0c      	ldr	r3, [pc, #48]	; (10998 <ticker_instance1_sched+0xa8>)
   10966:	2003      	movs	r0, #3
   10968:	f7fe fae0 	bl	ef2c <mayfly_enqueue>
		break;
   1096c:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   1096e:	4040      	eors	r0, r0
   10970:	f380 8811 	msr	BASEPRI, r0
   10974:	f04f 0004 	mov.w	r0, #4
   10978:	df02      	svc	2
		LL_ASSERT(0);
   1097a:	4040      	eors	r0, r0
   1097c:	f380 8811 	msr	BASEPRI, r0
   10980:	f04f 0004 	mov.w	r0, #4
   10984:	df02      	svc	2
   10986:	bf00      	nop
   10988:	2000bcc0 	.word	0x2000bcc0
   1098c:	2000bcd0 	.word	0x2000bcd0
   10990:	2000bce0 	.word	0x2000bce0
   10994:	2000bcf0 	.word	0x2000bcf0
   10998:	2000bd00 	.word	0x2000bd00

0001099c <ticker_instance1_caller_id_get>:
	switch (user_id) {
   1099c:	1e83      	subs	r3, r0, #2
   1099e:	2b01      	cmp	r3, #1
   109a0:	d800      	bhi.n	109a4 <ticker_instance1_caller_id_get+0x8>
}
   109a2:	4770      	bx	lr
		LL_ASSERT(0);
   109a4:	4040      	eors	r0, r0
   109a6:	f380 8811 	msr	BASEPRI, r0
   109aa:	f04f 0004 	mov.w	r0, #4
   109ae:	df02      	svc	2

000109b0 <ticker_instance0_sched>:
{
   109b0:	b508      	push	{r3, lr}
	switch (caller_id) {
   109b2:	2803      	cmp	r0, #3
   109b4:	d843      	bhi.n	10a3e <ticker_instance0_sched+0x8e>
   109b6:	e8df f000 	tbb	[pc, r0]
   109ba:	1002      	.short	0x1002
   109bc:	341e      	.short	0x341e
		switch (callee_id) {
   109be:	2901      	cmp	r1, #1
   109c0:	d105      	bne.n	109ce <ticker_instance0_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   109c2:	4b22      	ldr	r3, [pc, #136]	; (10a4c <ticker_instance0_sched+0x9c>)
   109c4:	2100      	movs	r1, #0
   109c6:	4608      	mov	r0, r1
   109c8:	f7fe fab0 	bl	ef2c <mayfly_enqueue>
		break;
   109cc:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   109ce:	4040      	eors	r0, r0
   109d0:	f380 8811 	msr	BASEPRI, r0
   109d4:	f04f 0004 	mov.w	r0, #4
   109d8:	df02      	svc	2
		switch (callee_id) {
   109da:	2902      	cmp	r1, #2
   109dc:	d105      	bne.n	109ea <ticker_instance0_sched+0x3a>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   109de:	4b1c      	ldr	r3, [pc, #112]	; (10a50 <ticker_instance0_sched+0xa0>)
   109e0:	2101      	movs	r1, #1
   109e2:	2000      	movs	r0, #0
   109e4:	f7fe faa2 	bl	ef2c <mayfly_enqueue>
		break;
   109e8:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   109ea:	4040      	eors	r0, r0
   109ec:	f380 8811 	msr	BASEPRI, r0
   109f0:	f04f 0004 	mov.w	r0, #4
   109f4:	df02      	svc	2
		switch (callee_id) {
   109f6:	2901      	cmp	r1, #1
   109f8:	d007      	beq.n	10a0a <ticker_instance0_sched+0x5a>
   109fa:	2902      	cmp	r1, #2
   109fc:	d00b      	beq.n	10a16 <ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   109fe:	4040      	eors	r0, r0
   10a00:	f380 8811 	msr	BASEPRI, r0
   10a04:	f04f 0004 	mov.w	r0, #4
   10a08:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   10a0a:	4b12      	ldr	r3, [pc, #72]	; (10a54 <ticker_instance0_sched+0xa4>)
   10a0c:	2100      	movs	r1, #0
   10a0e:	2001      	movs	r0, #1
   10a10:	f7fe fa8c 	bl	ef2c <mayfly_enqueue>
		break;
   10a14:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   10a16:	4b10      	ldr	r3, [pc, #64]	; (10a58 <ticker_instance0_sched+0xa8>)
   10a18:	2101      	movs	r1, #1
   10a1a:	4608      	mov	r0, r1
   10a1c:	f7fe fa86 	bl	ef2c <mayfly_enqueue>
		break;
   10a20:	bd08      	pop	{r3, pc}
		switch (callee_id) {
   10a22:	2902      	cmp	r1, #2
   10a24:	d105      	bne.n	10a32 <ticker_instance0_sched+0x82>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   10a26:	4b0d      	ldr	r3, [pc, #52]	; (10a5c <ticker_instance0_sched+0xac>)
   10a28:	2101      	movs	r1, #1
   10a2a:	2003      	movs	r0, #3
   10a2c:	f7fe fa7e 	bl	ef2c <mayfly_enqueue>
		break;
   10a30:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10a32:	4040      	eors	r0, r0
   10a34:	f380 8811 	msr	BASEPRI, r0
   10a38:	f04f 0004 	mov.w	r0, #4
   10a3c:	df02      	svc	2
		LL_ASSERT(0);
   10a3e:	4040      	eors	r0, r0
   10a40:	f380 8811 	msr	BASEPRI, r0
   10a44:	f04f 0004 	mov.w	r0, #4
   10a48:	df02      	svc	2
   10a4a:	bf00      	nop
   10a4c:	2000bc70 	.word	0x2000bc70
   10a50:	2000bc80 	.word	0x2000bc80
   10a54:	2000bc90 	.word	0x2000bc90
   10a58:	2000bca0 	.word	0x2000bca0
   10a5c:	2000bcb0 	.word	0x2000bcb0

00010a60 <ticker_instance0_caller_id_get>:
	switch (user_id) {
   10a60:	2801      	cmp	r0, #1
   10a62:	d00a      	beq.n	10a7a <ticker_instance0_caller_id_get+0x1a>
   10a64:	b138      	cbz	r0, 10a76 <ticker_instance0_caller_id_get+0x16>
   10a66:	2803      	cmp	r0, #3
   10a68:	d008      	beq.n	10a7c <ticker_instance0_caller_id_get+0x1c>
		LL_ASSERT(0);
   10a6a:	4040      	eors	r0, r0
   10a6c:	f380 8811 	msr	BASEPRI, r0
   10a70:	f04f 0004 	mov.w	r0, #4
   10a74:	df02      	svc	2
		return CALL_ID_WORKER;
   10a76:	2001      	movs	r0, #1
   10a78:	4770      	bx	lr
		return CALL_ID_JOB;
   10a7a:	2002      	movs	r0, #2
}
   10a7c:	4770      	bx	lr
	...

00010a80 <ticker_init>:
/*****************************************************************************
 * Public Interface
 ****************************************************************************/
u32_t ticker_init(u8_t instance_index, u8_t count_node, void *node,
		  u8_t count_user, void *user, u8_t count_op, void *user_op)
{
   10a80:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a82:	9d05      	ldr	r5, [sp, #20]
   10a84:	f89d 4018 	ldrb.w	r4, [sp, #24]
	    (sizeof(struct ticker_user) != TICKER_USER_T_SIZE) ||
	    (sizeof(struct ticker_user_op) != TICKER_USER_OP_T_SIZE)) {
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
   10a88:	4606      	mov	r6, r0
   10a8a:	b118      	cbz	r0, 10a94 <ticker_init+0x14>
   10a8c:	2801      	cmp	r0, #1
   10a8e:	d019      	beq.n	10ac4 <ticker_init+0x44>
		instance->fp_sched = ticker_instance1_sched;
		instance->fp_cmp_set = ticker_instance1_cmp_set;
		break;

	default:
		return TICKER_STATUS_FAILURE;
   10a90:	2001      	movs	r0, #1
   10a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		instance->fp_caller_id_get = ticker_instance0_caller_id_get;
   10a94:	202c      	movs	r0, #44	; 0x2c
   10a96:	4f20      	ldr	r7, [pc, #128]	; (10b18 <ticker_init+0x98>)
   10a98:	fb00 7006 	mla	r0, r0, r6, r7
   10a9c:	4f1f      	ldr	r7, [pc, #124]	; (10b1c <ticker_init+0x9c>)
   10a9e:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance0_sched;
   10aa0:	4f1f      	ldr	r7, [pc, #124]	; (10b20 <ticker_init+0xa0>)
   10aa2:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance0_cmp_set;
   10aa4:	4f1f      	ldr	r7, [pc, #124]	; (10b24 <ticker_init+0xa4>)
   10aa6:	6287      	str	r7, [r0, #40]	; 0x28
	}

	instance->count_node = count_node;
   10aa8:	f8df e06c 	ldr.w	lr, [pc, #108]	; 10b18 <ticker_init+0x98>
   10aac:	202c      	movs	r0, #44	; 0x2c
   10aae:	fb00 f006 	mul.w	r0, r0, r6
   10ab2:	eb0e 0700 	add.w	r7, lr, r0
   10ab6:	7239      	strb	r1, [r7, #8]
	instance->node = node;
   10ab8:	f84e 2000 	str.w	r2, [lr, r0]

	instance->count_user = count_user;
   10abc:	727b      	strb	r3, [r7, #9]
	instance->user = user;
   10abe:	607d      	str	r5, [r7, #4]
	struct ticker_user_op *user_op_ = (void *)user_op;
   10ac0:	9907      	ldr	r1, [sp, #28]

	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
   10ac2:	e015      	b.n	10af0 <ticker_init+0x70>
		instance->fp_caller_id_get = ticker_instance1_caller_id_get;
   10ac4:	202c      	movs	r0, #44	; 0x2c
   10ac6:	4f14      	ldr	r7, [pc, #80]	; (10b18 <ticker_init+0x98>)
   10ac8:	fb00 7006 	mla	r0, r0, r6, r7
   10acc:	4f16      	ldr	r7, [pc, #88]	; (10b28 <ticker_init+0xa8>)
   10ace:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance1_sched;
   10ad0:	4f16      	ldr	r7, [pc, #88]	; (10b2c <ticker_init+0xac>)
   10ad2:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance1_cmp_set;
   10ad4:	4f16      	ldr	r7, [pc, #88]	; (10b30 <ticker_init+0xb0>)
   10ad6:	6287      	str	r7, [r0, #40]	; 0x28
		break;
   10ad8:	e7e6      	b.n	10aa8 <ticker_init+0x28>
		users[count_user].user_op = user_op_;
   10ada:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   10ade:	6059      	str	r1, [r3, #4]
		user_op_ += users[count_user].count_user_op;
   10ae0:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   10ae4:	202c      	movs	r0, #44	; 0x2c
   10ae6:	fb00 1103 	mla	r1, r0, r3, r1
		count_op -= users[count_user].count_user_op;
   10aea:	1ae3      	subs	r3, r4, r3
   10aec:	b2dc      	uxtb	r4, r3
	while (count_user--) {
   10aee:	4613      	mov	r3, r2
   10af0:	1e5a      	subs	r2, r3, #1
   10af2:	b2d2      	uxtb	r2, r2
   10af4:	2b00      	cmp	r3, #0
   10af6:	d1f0      	bne.n	10ada <ticker_init+0x5a>
	}

	if (count_op) {
   10af8:	b964      	cbnz	r4, 10b14 <ticker_init+0x94>
		return TICKER_STATUS_FAILURE;
	}

	instance->ticker_id_head = TICKER_NULL;
   10afa:	222c      	movs	r2, #44	; 0x2c
   10afc:	4b06      	ldr	r3, [pc, #24]	; (10b18 <ticker_init+0x98>)
   10afe:	fb02 3606 	mla	r6, r2, r6, r3
   10b02:	23ff      	movs	r3, #255	; 0xff
   10b04:	7633      	strb	r3, [r6, #24]
	instance->ticker_id_slot_previous = TICKER_NULL;
   10b06:	7673      	strb	r3, [r6, #25]
	instance->ticks_slot_previous = 0;
   10b08:	2000      	movs	r0, #0
   10b0a:	8370      	strh	r0, [r6, #26]
	instance->ticks_current = 0;
   10b0c:	6170      	str	r0, [r6, #20]
	instance->ticks_elapsed_first = 0;
   10b0e:	72b0      	strb	r0, [r6, #10]
	instance->ticks_elapsed_last = 0;
   10b10:	72f0      	strb	r0, [r6, #11]

	return TICKER_STATUS_SUCCESS;
   10b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TICKER_STATUS_FAILURE;
   10b14:	2001      	movs	r0, #1
}
   10b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b18:	20000f44 	.word	0x20000f44
   10b1c:	00010a61 	.word	0x00010a61
   10b20:	000109b1 	.word	0x000109b1
   10b24:	000108e3 	.word	0x000108e3
   10b28:	0001099d 	.word	0x0001099d
   10b2c:	000108f1 	.word	0x000108f1
   10b30:	000108d7 	.word	0x000108d7

00010b34 <ticker_trigger>:
{
	return !!(_instance[instance_index].count_node);
}

void ticker_trigger(u8_t instance_index)
{
   10b34:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
   10b36:	232c      	movs	r3, #44	; 0x2c
   10b38:	4a04      	ldr	r2, [pc, #16]	; (10b4c <ticker_trigger+0x18>)
   10b3a:	fb03 2000 	mla	r0, r3, r0, r2
   10b3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10b40:	b11b      	cbz	r3, 10b4a <ticker_trigger+0x16>
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
   10b42:	2201      	movs	r2, #1
   10b44:	4611      	mov	r1, r2
   10b46:	2000      	movs	r0, #0
   10b48:	4798      	blx	r3
   10b4a:	bd08      	pop	{r3, pc}
   10b4c:	20000f44 	.word	0x20000f44

00010b50 <ticker_start>:
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
   10b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10b54:	242c      	movs	r4, #44	; 0x2c
   10b56:	4d24      	ldr	r5, [pc, #144]	; (10be8 <ticker_start+0x98>)
   10b58:	fb04 5400 	mla	r4, r4, r0, r5
   10b5c:	6866      	ldr	r6, [r4, #4]
   10b5e:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10b62:	f89e 4003 	ldrb.w	r4, [lr, #3]
   10b66:	1c65      	adds	r5, r4, #1
   10b68:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   10b6a:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10b6e:	42b5      	cmp	r5, r6
   10b70:	d300      	bcc.n	10b74 <ticker_start+0x24>
		last = 0;
   10b72:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   10b74:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10b78:	42b5      	cmp	r5, r6
   10b7a:	d032      	beq.n	10be2 <ticker_start+0x92>
   10b7c:	469c      	mov	ip, r3
   10b7e:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10b80:	f8de 3004 	ldr.w	r3, [lr, #4]
   10b84:	f04f 082c 	mov.w	r8, #44	; 0x2c
   10b88:	fb08 f604 	mul.w	r6, r8, r4
   10b8c:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_START;
   10b8e:	2003      	movs	r0, #3
   10b90:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   10b92:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
   10b94:	f8c4 c004 	str.w	ip, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   10b98:	9b06      	ldr	r3, [sp, #24]
   10b9a:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   10b9c:	9b07      	ldr	r3, [sp, #28]
   10b9e:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   10ba0:	9b08      	ldr	r3, [sp, #32]
   10ba2:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   10ba4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   10ba8:	82e3      	strh	r3, [r4, #22]
	user_op->params.start.lazy = lazy;
   10baa:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   10bae:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
   10bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10bb2:	61a3      	str	r3, [r4, #24]
	user_op->params.start.context = context;
   10bb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10bb6:	61e3      	str	r3, [r4, #28]
	user_op->status = TICKER_STATUS_BUSY;
   10bb8:	2602      	movs	r6, #2
   10bba:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   10bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10bbe:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   10bc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10bc2:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   10bc4:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10bc8:	4b07      	ldr	r3, [pc, #28]	; (10be8 <ticker_start+0x98>)
   10bca:	fb08 3307 	mla	r3, r8, r7, r3
   10bce:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   10bd0:	6a1b      	ldr	r3, [r3, #32]
   10bd2:	4608      	mov	r0, r1
   10bd4:	4798      	blx	r3
   10bd6:	2200      	movs	r2, #0
   10bd8:	4631      	mov	r1, r6
   10bda:	47a8      	blx	r5

	return user_op->status;
   10bdc:	6a20      	ldr	r0, [r4, #32]
   10bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10be2:	2001      	movs	r0, #1
}
   10be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10be8:	20000f44 	.word	0x20000f44

00010bec <ticker_update>:

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
   10bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10bf0:	242c      	movs	r4, #44	; 0x2c
   10bf2:	4d24      	ldr	r5, [pc, #144]	; (10c84 <ticker_update+0x98>)
   10bf4:	fb04 5400 	mla	r4, r4, r0, r5
   10bf8:	6866      	ldr	r6, [r4, #4]
   10bfa:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10bfe:	f89e 4003 	ldrb.w	r4, [lr, #3]
   10c02:	1c65      	adds	r5, r4, #1
   10c04:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   10c06:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10c0a:	42b5      	cmp	r5, r6
   10c0c:	d300      	bcc.n	10c10 <ticker_update+0x24>
		last = 0;
   10c0e:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   10c10:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10c14:	42b5      	cmp	r5, r6
   10c16:	d031      	beq.n	10c7c <ticker_update+0x90>
   10c18:	469c      	mov	ip, r3
   10c1a:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10c1c:	f8de 3004 	ldr.w	r3, [lr, #4]
   10c20:	f04f 082c 	mov.w	r8, #44	; 0x2c
   10c24:	fb08 f604 	mul.w	r6, r8, r4
   10c28:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   10c2a:	2004      	movs	r0, #4
   10c2c:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   10c2e:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   10c30:	f8a4 c004 	strh.w	ip, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   10c34:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   10c38:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   10c3a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   10c3e:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   10c40:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   10c44:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
   10c46:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   10c4a:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
   10c4c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   10c50:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
   10c52:	2602      	movs	r6, #2
   10c54:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   10c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10c58:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   10c5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10c5c:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   10c5e:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10c62:	4b08      	ldr	r3, [pc, #32]	; (10c84 <ticker_update+0x98>)
   10c64:	fb08 3307 	mla	r3, r8, r7, r3
   10c68:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   10c6a:	6a1b      	ldr	r3, [r3, #32]
   10c6c:	4608      	mov	r0, r1
   10c6e:	4798      	blx	r3
   10c70:	2200      	movs	r2, #0
   10c72:	4631      	mov	r1, r6
   10c74:	47a8      	blx	r5

	return user_op->status;
   10c76:	6a20      	ldr	r0, [r4, #32]
   10c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10c7c:	2001      	movs	r0, #1
}
   10c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c82:	bf00      	nop
   10c84:	20000f44 	.word	0x20000f44

00010c88 <ticker_stop>:

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
   10c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10c8c:	242c      	movs	r4, #44	; 0x2c
   10c8e:	4d1b      	ldr	r5, [pc, #108]	; (10cfc <ticker_stop+0x74>)
   10c90:	fb04 5400 	mla	r4, r4, r0, r5
   10c94:	6866      	ldr	r6, [r4, #4]
   10c96:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10c9a:	f89e 5003 	ldrb.w	r5, [lr, #3]
   10c9e:	1c6c      	adds	r4, r5, #1
   10ca0:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10ca2:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10ca6:	42b4      	cmp	r4, r6
   10ca8:	d300      	bcc.n	10cac <ticker_stop+0x24>
		last = 0;
   10caa:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   10cac:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10cb0:	42b4      	cmp	r4, r6
   10cb2:	d020      	beq.n	10cf6 <ticker_stop+0x6e>
   10cb4:	4698      	mov	r8, r3
   10cb6:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10cb8:	f8de 3004 	ldr.w	r3, [lr, #4]
   10cbc:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   10cc0:	fb0c f505 	mul.w	r5, ip, r5
   10cc4:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   10cc6:	2005      	movs	r0, #5
   10cc8:	5558      	strb	r0, [r3, r5]
	user_op->id = ticker_id;
   10cca:	7072      	strb	r2, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   10ccc:	2502      	movs	r5, #2
   10cce:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   10cd0:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   10cd4:	9b06      	ldr	r3, [sp, #24]
   10cd6:	62b3      	str	r3, [r6, #40]	; 0x28

	user->last = last;
   10cd8:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10cdc:	4b07      	ldr	r3, [pc, #28]	; (10cfc <ticker_stop+0x74>)
   10cde:	fb0c 3307 	mla	r3, ip, r7, r3
   10ce2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10ce4:	6a1b      	ldr	r3, [r3, #32]
   10ce6:	4608      	mov	r0, r1
   10ce8:	4798      	blx	r3
   10cea:	2200      	movs	r2, #0
   10cec:	4629      	mov	r1, r5
   10cee:	47a0      	blx	r4

	return user_op->status;
   10cf0:	6a30      	ldr	r0, [r6, #32]
   10cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10cf6:	2001      	movs	r0, #1
}
   10cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10cfc:	20000f44 	.word	0x20000f44

00010d00 <ticker_next_slot_get>:

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
   10d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10d04:	242c      	movs	r4, #44	; 0x2c
   10d06:	4d1f      	ldr	r5, [pc, #124]	; (10d84 <ticker_next_slot_get+0x84>)
   10d08:	fb04 5400 	mla	r4, r4, r0, r5
   10d0c:	6866      	ldr	r6, [r4, #4]
   10d0e:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10d12:	f89e 5003 	ldrb.w	r5, [lr, #3]
   10d16:	1c6c      	adds	r4, r5, #1
   10d18:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10d1a:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10d1e:	42b4      	cmp	r4, r6
   10d20:	d300      	bcc.n	10d24 <ticker_next_slot_get+0x24>
		last = 0;
   10d22:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   10d24:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10d28:	42b4      	cmp	r4, r6
   10d2a:	d027      	beq.n	10d7c <ticker_next_slot_get+0x7c>
   10d2c:	469c      	mov	ip, r3
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10d2e:	f8de 3004 	ldr.w	r3, [lr, #4]
   10d32:	f04f 092c 	mov.w	r9, #44	; 0x2c
   10d36:	fb09 f605 	mul.w	r6, r9, r5
   10d3a:	199d      	adds	r5, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   10d3c:	f04f 0802 	mov.w	r8, #2
   10d40:	f803 8006 	strb.w	r8, [r3, r6]
	user_op->id = TICKER_NULL;
   10d44:	23ff      	movs	r3, #255	; 0xff
   10d46:	706b      	strb	r3, [r5, #1]
	user_op->params.slot_get.ticker_id = ticker_id;
   10d48:	606a      	str	r2, [r5, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
   10d4a:	f8c5 c008 	str.w	ip, [r5, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   10d4e:	9b08      	ldr	r3, [sp, #32]
   10d50:	60eb      	str	r3, [r5, #12]
	user_op->status = TICKER_STATUS_BUSY;
   10d52:	f8c5 8020 	str.w	r8, [r5, #32]
	user_op->fp_op_func = fp_op_func;
   10d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10d58:	626b      	str	r3, [r5, #36]	; 0x24
	user_op->op_context = op_context;
   10d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10d5c:	62ab      	str	r3, [r5, #40]	; 0x28

	user->last = last;
   10d5e:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10d62:	4b08      	ldr	r3, [pc, #32]	; (10d84 <ticker_next_slot_get+0x84>)
   10d64:	fb09 3300 	mla	r3, r9, r0, r3
   10d68:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10d6a:	6a1b      	ldr	r3, [r3, #32]
   10d6c:	4608      	mov	r0, r1
   10d6e:	4798      	blx	r3
   10d70:	2200      	movs	r2, #0
   10d72:	4641      	mov	r1, r8
   10d74:	47a0      	blx	r4

	return user_op->status;
   10d76:	6a28      	ldr	r0, [r5, #32]
   10d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   10d7c:	2001      	movs	r0, #1
}
   10d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10d82:	bf00      	nop
   10d84:	20000f44 	.word	0x20000f44

00010d88 <ticker_job_idle_get>:

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
   10d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10d8c:	242c      	movs	r4, #44	; 0x2c
   10d8e:	4d1b      	ldr	r5, [pc, #108]	; (10dfc <ticker_job_idle_get+0x74>)
   10d90:	fb04 5400 	mla	r4, r4, r0, r5
   10d94:	6866      	ldr	r6, [r4, #4]
   10d96:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10d9a:	f89e 5003 	ldrb.w	r5, [lr, #3]
   10d9e:	1c6c      	adds	r4, r5, #1
   10da0:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10da2:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10da6:	42b4      	cmp	r4, r6
   10da8:	d300      	bcc.n	10dac <ticker_job_idle_get+0x24>
		last = 0;
   10daa:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   10dac:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10db0:	42b4      	cmp	r4, r6
   10db2:	d020      	beq.n	10df6 <ticker_job_idle_get+0x6e>
   10db4:	4698      	mov	r8, r3
   10db6:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10db8:	f8de 3004 	ldr.w	r3, [lr, #4]
   10dbc:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   10dc0:	fb0c f505 	mul.w	r5, ip, r5
   10dc4:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
   10dc6:	2001      	movs	r0, #1
   10dc8:	5558      	strb	r0, [r3, r5]
	user_op->id = TICKER_NULL;
   10dca:	23ff      	movs	r3, #255	; 0xff
   10dcc:	7073      	strb	r3, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   10dce:	2502      	movs	r5, #2
   10dd0:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   10dd2:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   10dd4:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28

	user->last = last;
   10dd8:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10ddc:	4b07      	ldr	r3, [pc, #28]	; (10dfc <ticker_job_idle_get+0x74>)
   10dde:	fb0c 3307 	mla	r3, ip, r7, r3
   10de2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10de4:	6a1b      	ldr	r3, [r3, #32]
   10de6:	4608      	mov	r0, r1
   10de8:	4798      	blx	r3
   10dea:	2200      	movs	r2, #0
   10dec:	4629      	mov	r1, r5
   10dee:	47a0      	blx	r4

	return user_op->status;
   10df0:	6a30      	ldr	r0, [r6, #32]
   10df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10df6:	2001      	movs	r0, #1
}
   10df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10dfc:	20000f44 	.word	0x20000f44

00010e00 <ticker_job_sched>:

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
   10e00:	b510      	push	{r4, lr}
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10e02:	232c      	movs	r3, #44	; 0x2c
   10e04:	4a05      	ldr	r2, [pc, #20]	; (10e1c <ticker_job_sched+0x1c>)
   10e06:	fb03 2000 	mla	r0, r3, r0, r2
   10e0a:	6a44      	ldr	r4, [r0, #36]	; 0x24
   10e0c:	6a03      	ldr	r3, [r0, #32]
   10e0e:	4608      	mov	r0, r1
   10e10:	4798      	blx	r3
   10e12:	2200      	movs	r2, #0
   10e14:	2102      	movs	r1, #2
   10e16:	47a0      	blx	r4
   10e18:	bd10      	pop	{r4, pc}
   10e1a:	bf00      	nop
   10e1c:	20000f44 	.word	0x20000f44

00010e20 <ticker_ticks_now_get>:
}

u32_t ticker_ticks_now_get(void)
{
   10e20:	b508      	push	{r3, lr}
	return cntr_cnt_get();
   10e22:	f7fe fa95 	bl	f350 <cntr_cnt_get>
}
   10e26:	bd08      	pop	{r3, pc}

00010e28 <ticker_ticks_diff_get>:

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   10e28:	1a40      	subs	r0, r0, r1
}
   10e2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10e2e:	4770      	bx	lr

00010e30 <ticker_worker>:
{
   10e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->worker_trigger = 1;
   10e34:	2301      	movs	r3, #1
   10e36:	7743      	strb	r3, [r0, #29]
	if (instance->job_guard) {
   10e38:	f890 901c 	ldrb.w	r9, [r0, #28]
   10e3c:	f1b9 0f00 	cmp.w	r9, #0
   10e40:	d147      	bne.n	10ed2 <ticker_worker+0xa2>
	if (instance->ticker_id_head == TICKER_NULL) {
   10e42:	7e03      	ldrb	r3, [r0, #24]
   10e44:	2bff      	cmp	r3, #255	; 0xff
   10e46:	d030      	beq.n	10eaa <ticker_worker+0x7a>
   10e48:	4607      	mov	r7, r0
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   10e4a:	f7fe fa81 	bl	f350 <cntr_cnt_get>
   10e4e:	6979      	ldr	r1, [r7, #20]
   10e50:	f7ff ffea 	bl	10e28 <ticker_ticks_diff_get>
   10e54:	4605      	mov	r5, r0
	ticker_id_head = instance->ticker_id_head;
   10e56:	7e3c      	ldrb	r4, [r7, #24]
	node = &instance->node[0];
   10e58:	f8d7 8000 	ldr.w	r8, [r7]
	ticks_expired = 0;
   10e5c:	2600      	movs	r6, #0
	while (ticker_id_head != TICKER_NULL) {
   10e5e:	2cff      	cmp	r4, #255	; 0xff
   10e60:	d027      	beq.n	10eb2 <ticker_worker+0x82>
		ticker = &node[ticker_id_head];
   10e62:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   10e66:	00a3      	lsls	r3, r4, #2
   10e68:	eb08 0103 	add.w	r1, r8, r3
		ticks_to_expire = ticker->ticks_to_expire;
   10e6c:	688a      	ldr	r2, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10e6e:	4295      	cmp	r5, r2
   10e70:	d31f      	bcc.n	10eb2 <ticker_worker+0x82>
		ticks_elapsed -= ticks_to_expire;
   10e72:	1aad      	subs	r5, r5, r2
		ticks_expired += ticks_to_expire;
   10e74:	4416      	add	r6, r2
		ticker_id_head = ticker->next;
   10e76:	f818 4003 	ldrb.w	r4, [r8, r3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   10e7a:	784b      	ldrb	r3, [r1, #1]
   10e7c:	788a      	ldrb	r2, [r1, #2]
   10e7e:	1a9b      	subs	r3, r3, r2
   10e80:	b2db      	uxtb	r3, r3
   10e82:	2b01      	cmp	r3, #1
   10e84:	d1eb      	bne.n	10e5e <ticker_worker+0x2e>
		ticker->ack--;
   10e86:	3a01      	subs	r2, #1
   10e88:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
   10e8a:	f8d1 a00c 	ldr.w	sl, [r1, #12]
   10e8e:	f1ba 0f00 	cmp.w	sl, #0
   10e92:	d0e4      	beq.n	10e5e <ticker_worker+0x2e>
			ticks_at_expire = (instance->ticks_current +
   10e94:	6978      	ldr	r0, [r7, #20]
   10e96:	4430      	add	r0, r6
					   ticker->ticks_to_expire_minus) &
   10e98:	8a8b      	ldrh	r3, [r1, #20]
					   ticks_expired -
   10e9a:	1ac0      	subs	r0, r0, r3
			ticker->timeout_func(ticks_at_expire,
   10e9c:	690b      	ldr	r3, [r1, #16]
   10e9e:	8b4a      	ldrh	r2, [r1, #26]
   10ea0:	6a09      	ldr	r1, [r1, #32]
   10ea2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10ea6:	47d0      	blx	sl
   10ea8:	e7d9      	b.n	10e5e <ticker_worker+0x2e>
		instance->worker_trigger = 0;
   10eaa:	2300      	movs	r3, #0
   10eac:	7743      	strb	r3, [r0, #29]
		return;
   10eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   10eb2:	7aba      	ldrb	r2, [r7, #10]
   10eb4:	7afb      	ldrb	r3, [r7, #11]
   10eb6:	429a      	cmp	r2, r3
   10eb8:	d00d      	beq.n	10ed6 <ticker_worker+0xa6>
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   10eba:	7afb      	ldrb	r3, [r7, #11]
   10ebc:	3302      	adds	r3, #2
   10ebe:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   10ec2:	605e      	str	r6, [r3, #4]
	instance->worker_trigger = 0;
   10ec4:	2300      	movs	r3, #0
   10ec6:	777b      	strb	r3, [r7, #29]
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
   10ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10eca:	2201      	movs	r2, #1
   10ecc:	2102      	movs	r1, #2
   10ece:	4610      	mov	r0, r2
   10ed0:	4798      	blx	r3
   10ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		last = instance->ticks_elapsed_last + 1;
   10ed6:	3301      	adds	r3, #1
   10ed8:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   10eda:	2b02      	cmp	r3, #2
   10edc:	d001      	beq.n	10ee2 <ticker_worker+0xb2>
		instance->ticks_elapsed_last = last;
   10ede:	72fb      	strb	r3, [r7, #11]
   10ee0:	e7eb      	b.n	10eba <ticker_worker+0x8a>
			last = 0;
   10ee2:	464b      	mov	r3, r9
   10ee4:	e7fb      	b.n	10ede <ticker_worker+0xae>

00010ee6 <ticks_to_expire_prep>:
{
   10ee6:	b570      	push	{r4, r5, r6, lr}
   10ee8:	4606      	mov	r6, r0
   10eea:	4608      	mov	r0, r1
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   10eec:	68b4      	ldr	r4, [r6, #8]
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   10eee:	8ab5      	ldrh	r5, [r6, #20]
	if (((ticks_at_start - ticks_current) & BIT(23)) == 0) {
   10ef0:	1a51      	subs	r1, r2, r1
   10ef2:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
   10ef6:	d10c      	bne.n	10f12 <ticks_to_expire_prep+0x2c>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   10ef8:	4601      	mov	r1, r0
   10efa:	4610      	mov	r0, r2
   10efc:	f7ff ff94 	bl	10e28 <ticker_ticks_diff_get>
   10f00:	4420      	add	r0, r4
	if (ticks_to_expire > ticks_to_expire_minus) {
   10f02:	42a8      	cmp	r0, r5
   10f04:	d812      	bhi.n	10f2c <ticks_to_expire_prep+0x46>
		ticks_to_expire_minus -= ticks_to_expire;
   10f06:	1a28      	subs	r0, r5, r0
   10f08:	b285      	uxth	r5, r0
		ticks_to_expire = 0;
   10f0a:	2000      	movs	r0, #0
	ticker->ticks_to_expire = ticks_to_expire;
   10f0c:	60b0      	str	r0, [r6, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   10f0e:	82b5      	strh	r5, [r6, #20]
   10f10:	bd70      	pop	{r4, r5, r6, pc}
		delta_current_start = ticker_ticks_diff_get(ticks_current,
   10f12:	4611      	mov	r1, r2
   10f14:	f7ff ff88 	bl	10e28 <ticker_ticks_diff_get>
		if (ticks_to_expire > delta_current_start) {
   10f18:	4284      	cmp	r4, r0
   10f1a:	d901      	bls.n	10f20 <ticks_to_expire_prep+0x3a>
			ticks_to_expire -= delta_current_start;
   10f1c:	1a20      	subs	r0, r4, r0
   10f1e:	e7f0      	b.n	10f02 <ticks_to_expire_prep+0x1c>
			    (delta_current_start - ticks_to_expire);
   10f20:	1b00      	subs	r0, r0, r4
			ticks_to_expire_minus +=
   10f22:	fa15 f080 	uxtah	r0, r5, r0
   10f26:	b285      	uxth	r5, r0
			ticks_to_expire = 0;
   10f28:	2000      	movs	r0, #0
   10f2a:	e7ea      	b.n	10f02 <ticks_to_expire_prep+0x1c>
		ticks_to_expire -= ticks_to_expire_minus;
   10f2c:	1b40      	subs	r0, r0, r5
		ticks_to_expire_minus = 0;
   10f2e:	2500      	movs	r5, #0
   10f30:	e7ec      	b.n	10f0c <ticks_to_expire_prep+0x26>

00010f32 <ticker_job>:
{
   10f32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f36:	b08d      	sub	sp, #52	; 0x34
	if (instance->worker_trigger) {
   10f38:	7f43      	ldrb	r3, [r0, #29]
   10f3a:	9301      	str	r3, [sp, #4]
   10f3c:	2b00      	cmp	r3, #0
   10f3e:	f040 8254 	bne.w	113ea <ticker_job+0x4b8>
	instance->job_guard = 1;
   10f42:	2301      	movs	r3, #1
   10f44:	7703      	strb	r3, [r0, #28]
	ticks_previous = instance->ticks_current;
   10f46:	6943      	ldr	r3, [r0, #20]
   10f48:	930b      	str	r3, [sp, #44]	; 0x2c
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   10f4a:	7a83      	ldrb	r3, [r0, #10]
   10f4c:	7ac2      	ldrb	r2, [r0, #11]
   10f4e:	4293      	cmp	r3, r2
   10f50:	d021      	beq.n	10f96 <ticker_job+0x64>
		first = instance->ticks_elapsed_first + 1;
   10f52:	3301      	adds	r3, #1
   10f54:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   10f56:	2b02      	cmp	r3, #2
   10f58:	d100      	bne.n	10f5c <ticker_job+0x2a>
			first = 0;
   10f5a:	9b01      	ldr	r3, [sp, #4]
		instance->ticks_elapsed_first = first;
   10f5c:	7283      	strb	r3, [r0, #10]
		ticks_elapsed =
   10f5e:	3302      	adds	r3, #2
   10f60:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   10f64:	685b      	ldr	r3, [r3, #4]
   10f66:	9303      	str	r3, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   10f68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10f6a:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= 0x00FFFFFF;
   10f6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   10f70:	6143      	str	r3, [r0, #20]
		flag_elapsed = 1;
   10f72:	2301      	movs	r3, #1
   10f74:	9304      	str	r3, [sp, #16]
   10f76:	9000      	str	r0, [sp, #0]
	ticker_id_old_head = instance->ticker_id_head;
   10f78:	7e03      	ldrb	r3, [r0, #24]
   10f7a:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->node[0];
   10f7c:	6803      	ldr	r3, [r0, #0]
   10f7e:	4619      	mov	r1, r3
	users = &instance->user[0];
   10f80:	6843      	ldr	r3, [r0, #4]
   10f82:	9305      	str	r3, [sp, #20]
	count_user = instance->count_user;
   10f84:	7a43      	ldrb	r3, [r0, #9]
	pending = 0;
   10f86:	9a01      	ldr	r2, [sp, #4]
   10f88:	920a      	str	r2, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   10f8a:	f04f 0bff 	mov.w	fp, #255	; 0xff
   10f8e:	f8cd b01c 	str.w	fp, [sp, #28]
   10f92:	468b      	mov	fp, r1
   10f94:	e0cc      	b.n	11130 <ticker_job+0x1fe>
		flag_elapsed = 0;
   10f96:	9b01      	ldr	r3, [sp, #4]
   10f98:	9304      	str	r3, [sp, #16]
		ticks_elapsed = 0;
   10f9a:	2300      	movs	r3, #0
   10f9c:	9303      	str	r3, [sp, #12]
   10f9e:	e7ea      	b.n	10f76 <ticker_job+0x44>
				middle = 0;
   10fa0:	9b01      	ldr	r3, [sp, #4]
   10fa2:	e01d      	b.n	10fe0 <ticker_job+0xae>
			     (user_op->params.update.ticks_drift_plus == 0) &&
   10fa4:	6872      	ldr	r2, [r6, #4]
   10fa6:	bb82      	cbnz	r2, 1100a <ticker_job+0xd8>
			     (user_op->params.update.ticks_slot_plus == 0) &&
   10fa8:	68b2      	ldr	r2, [r6, #8]
   10faa:	bb72      	cbnz	r2, 1100a <ticker_job+0xd8>
			     (user_op->params.update.lazy == 0) &&
   10fac:	68f2      	ldr	r2, [r6, #12]
   10fae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   10fb2:	d12a      	bne.n	1100a <ticker_job+0xd8>
				ticker_job_op_cb(user_op,
   10fb4:	2101      	movs	r1, #1
   10fb6:	4630      	mov	r0, r6
   10fb8:	f7ff fc82 	bl	108c0 <ticker_job_op_cb>
		while (user->middle != user->last) {
   10fbc:	f894 a002 	ldrb.w	sl, [r4, #2]
   10fc0:	78e3      	ldrb	r3, [r4, #3]
   10fc2:	459a      	cmp	sl, r3
   10fc4:	f000 80b3 	beq.w	1112e <ticker_job+0x1fc>
			user_op = &user_ops[user->middle];
   10fc8:	f04f 092c 	mov.w	r9, #44	; 0x2c
   10fcc:	fb09 f90a 	mul.w	r9, r9, sl
   10fd0:	eb08 0609 	add.w	r6, r8, r9
			middle = user->middle + 1;
   10fd4:	f10a 0301 	add.w	r3, sl, #1
   10fd8:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
   10fda:	7822      	ldrb	r2, [r4, #0]
   10fdc:	4293      	cmp	r3, r2
   10fde:	d0df      	beq.n	10fa0 <ticker_job+0x6e>
			user->middle = middle;
   10fe0:	70a3      	strb	r3, [r4, #2]
			ticker = &node[user_op->id];
   10fe2:	7873      	ldrb	r3, [r6, #1]
   10fe4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   10fe8:	009f      	lsls	r7, r3, #2
   10fea:	eb0b 0507 	add.w	r5, fp, r7
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   10fee:	f818 2009 	ldrb.w	r2, [r8, r9]
   10ff2:	2a03      	cmp	r2, #3
   10ff4:	d9e2      	bls.n	10fbc <ticker_job+0x8a>
			state = (ticker->req - ticker->ack) & 0xff;
   10ff6:	786b      	ldrb	r3, [r5, #1]
   10ff8:	78a9      	ldrb	r1, [r5, #2]
   10ffa:	1a5b      	subs	r3, r3, r1
   10ffc:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   10ffe:	2a05      	cmp	r2, #5
   11000:	d8d8      	bhi.n	10fb4 <ticker_job+0x82>
   11002:	2b00      	cmp	r3, #0
   11004:	d0d6      	beq.n	10fb4 <ticker_job+0x82>
			    (state == 0) ||
   11006:	2a04      	cmp	r2, #4
   11008:	d0cc      	beq.n	10fa4 <ticker_job+0x72>
			if (state == 1) {
   1100a:	2b01      	cmp	r3, #1
   1100c:	f040 8085 	bne.w	1111a <ticker_job+0x1e8>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   11010:	7871      	ldrb	r1, [r6, #1]
   11012:	9800      	ldr	r0, [sp, #0]
   11014:	f7ff fbf6 	bl	10804 <ticker_dequeue>
   11018:	60a8      	str	r0, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   1101a:	f818 3009 	ldrb.w	r3, [r8, r9]
   1101e:	2b04      	cmp	r3, #4
   11020:	d00b      	beq.n	1103a <ticker_job+0x108>
		ticker->req = ticker->ack;
   11022:	78ab      	ldrb	r3, [r5, #2]
   11024:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   11026:	9b00      	ldr	r3, [sp, #0]
   11028:	7e5a      	ldrb	r2, [r3, #25]
   1102a:	7873      	ldrb	r3, [r6, #1]
   1102c:	429a      	cmp	r2, r3
   1102e:	d06e      	beq.n	1110e <ticker_job+0x1dc>
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   11030:	2100      	movs	r1, #0
   11032:	4630      	mov	r0, r6
   11034:	f7ff fc44 	bl	108c0 <ticker_job_op_cb>
   11038:	e7c0      	b.n	10fbc <ticker_job+0x8a>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   1103a:	9b00      	ldr	r3, [sp, #0]
   1103c:	695b      	ldr	r3, [r3, #20]
   1103e:	9306      	str	r3, [sp, #24]
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   11040:	4681      	mov	r9, r0
	ticks_now = cntr_cnt_get();
   11042:	f7fe f985 	bl	f350 <cntr_cnt_get>
   11046:	9008      	str	r0, [sp, #32]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   11048:	9906      	ldr	r1, [sp, #24]
   1104a:	f7ff feed 	bl	10e28 <ticker_ticks_diff_get>
   1104e:	9b03      	ldr	r3, [sp, #12]
   11050:	4418      	add	r0, r3
	if (ticks_to_expire > ticks_elapsed) {
   11052:	4581      	cmp	r9, r0
   11054:	d909      	bls.n	1106a <ticker_job+0x138>
		ticks_to_expire -= ticks_elapsed;
   11056:	eba9 0900 	sub.w	r9, r9, r0
	if ((ticker->ticks_periodic != 0) &&
   1105a:	686b      	ldr	r3, [r5, #4]
   1105c:	b37b      	cbz	r3, 110be <ticker_job+0x18c>
	    (user_op->params.update.lazy != 0)) {
   1105e:	89b3      	ldrh	r3, [r6, #12]
	if ((ticker->ticks_periodic != 0) &&
   11060:	b36b      	cbz	r3, 110be <ticker_job+0x18c>
		user_op->params.update.lazy--;
   11062:	3b01      	subs	r3, #1
   11064:	81b3      	strh	r3, [r6, #12]
   11066:	46a2      	mov	sl, r4
   11068:	e011      	b.n	1108e <ticker_job+0x15c>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   1106a:	eba0 0909 	sub.w	r9, r0, r9
   1106e:	8aab      	ldrh	r3, [r5, #20]
   11070:	fa13 f389 	uxtah	r3, r3, r9
   11074:	82ab      	strh	r3, [r5, #20]
		ticks_to_expire = 0;
   11076:	f04f 0900 	mov.w	r9, #0
   1107a:	e7ee      	b.n	1105a <ticker_job+0x128>
					   ticker_remainder_dec(ticker);
   1107c:	4628      	mov	r0, r5
   1107e:	f7ff fc07 	bl	10890 <ticker_remainder_dec>
			ticks_to_expire -= ticker->ticks_periodic +
   11082:	4420      	add	r0, r4
   11084:	eba9 0900 	sub.w	r9, r9, r0
			ticker->lazy_current--;
   11088:	8b6b      	ldrh	r3, [r5, #26]
   1108a:	3b01      	subs	r3, #1
   1108c:	836b      	strh	r3, [r5, #26]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1108e:	686c      	ldr	r4, [r5, #4]
   11090:	454c      	cmp	r4, r9
   11092:	d237      	bcs.n	11104 <ticker_job+0x1d2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   11094:	8b6a      	ldrh	r2, [r5, #26]
   11096:	89b3      	ldrh	r3, [r6, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   11098:	429a      	cmp	r2, r3
   1109a:	d8ef      	bhi.n	1107c <ticker_job+0x14a>
   1109c:	4654      	mov	r4, sl
   1109e:	e009      	b.n	110b4 <ticker_job+0x182>
			ticks_to_expire += ticker->ticks_periodic +
   110a0:	f8d5 a004 	ldr.w	sl, [r5, #4]
					   ticker_remainder_inc(ticker);
   110a4:	4628      	mov	r0, r5
   110a6:	f7ff fbdd 	bl	10864 <ticker_remainder_inc>
			ticks_to_expire += ticker->ticks_periodic +
   110aa:	4450      	add	r0, sl
   110ac:	4481      	add	r9, r0
			ticker->lazy_current++;
   110ae:	8b6b      	ldrh	r3, [r5, #26]
   110b0:	3301      	adds	r3, #1
   110b2:	836b      	strh	r3, [r5, #26]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   110b4:	8b6a      	ldrh	r2, [r5, #26]
   110b6:	89b3      	ldrh	r3, [r6, #12]
   110b8:	429a      	cmp	r2, r3
   110ba:	d3f1      	bcc.n	110a0 <ticker_job+0x16e>
		ticker->lazy_periodic = user_op->params.update.lazy;
   110bc:	832b      	strh	r3, [r5, #24]
				  user_op->params.update.ticks_drift_plus;
   110be:	88b3      	ldrh	r3, [r6, #4]
	ticker->ticks_to_expire = ticks_to_expire +
   110c0:	444b      	add	r3, r9
   110c2:	60ab      	str	r3, [r5, #8]
				user_op->params.update.ticks_drift_minus;
   110c4:	88f3      	ldrh	r3, [r6, #6]
	ticker->ticks_to_expire_minus +=
   110c6:	8aaa      	ldrh	r2, [r5, #20]
   110c8:	4413      	add	r3, r2
   110ca:	82ab      	strh	r3, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   110cc:	9a08      	ldr	r2, [sp, #32]
   110ce:	9906      	ldr	r1, [sp, #24]
   110d0:	4628      	mov	r0, r5
   110d2:	f7ff ff08 	bl	10ee6 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   110d6:	8933      	ldrh	r3, [r6, #8]
   110d8:	8aea      	ldrh	r2, [r5, #22]
   110da:	4413      	add	r3, r2
   110dc:	b29b      	uxth	r3, r3
   110de:	82eb      	strh	r3, [r5, #22]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   110e0:	8972      	ldrh	r2, [r6, #10]
   110e2:	4293      	cmp	r3, r2
   110e4:	d910      	bls.n	11108 <ticker_job+0x1d6>
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   110e6:	1a9b      	subs	r3, r3, r2
   110e8:	82eb      	strh	r3, [r5, #22]
	if (user_op->params.update.force != 0) {
   110ea:	7bb3      	ldrb	r3, [r6, #14]
   110ec:	b103      	cbz	r3, 110f0 <ticker_job+0x1be>
		ticker->force = user_op->params.update.force;
   110ee:	70eb      	strb	r3, [r5, #3]
	ticker->next = *insert_head;
   110f0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   110f4:	f80b 3007 	strb.w	r3, [fp, r7]
	*insert_head = user_op->id;
   110f8:	7873      	ldrb	r3, [r6, #1]
   110fa:	9307      	str	r3, [sp, #28]
		ticker->req++;
   110fc:	786b      	ldrb	r3, [r5, #1]
   110fe:	3301      	adds	r3, #1
   11100:	706b      	strb	r3, [r5, #1]
   11102:	e795      	b.n	11030 <ticker_job+0xfe>
   11104:	4654      	mov	r4, sl
   11106:	e7d5      	b.n	110b4 <ticker_job+0x182>
		ticker->ticks_slot = 0;
   11108:	2300      	movs	r3, #0
   1110a:	82eb      	strh	r3, [r5, #22]
   1110c:	e7ed      	b.n	110ea <ticker_job+0x1b8>
			instance->ticker_id_slot_previous = TICKER_NULL;
   1110e:	23ff      	movs	r3, #255	; 0xff
   11110:	9900      	ldr	r1, [sp, #0]
   11112:	764b      	strb	r3, [r1, #25]
			instance->ticks_slot_previous = 0;
   11114:	2300      	movs	r3, #0
   11116:	834b      	strh	r3, [r1, #26]
   11118:	e78a      	b.n	11030 <ticker_job+0xfe>
				instance->fp_sched(CALL_ID_JOB, CALL_ID_JOB, 1);
   1111a:	9b00      	ldr	r3, [sp, #0]
   1111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1111e:	2201      	movs	r2, #1
   11120:	2102      	movs	r1, #2
   11122:	4608      	mov	r0, r1
   11124:	4798      	blx	r3
				user->middle = prev;
   11126:	f884 a002 	strb.w	sl, [r4, #2]
				pending = 1;
   1112a:	2301      	movs	r3, #1
   1112c:	930a      	str	r3, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   1112e:	9b02      	ldr	r3, [sp, #8]
	while (count_user--) {
   11130:	1e5a      	subs	r2, r3, #1
   11132:	b2d2      	uxtb	r2, r2
   11134:	9202      	str	r2, [sp, #8]
   11136:	b133      	cbz	r3, 11146 <ticker_job+0x214>
		user = &users[count_user];
   11138:	9b05      	ldr	r3, [sp, #20]
   1113a:	9a02      	ldr	r2, [sp, #8]
   1113c:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
		user_ops = &user->user_op[0];
   11140:	f8d4 8004 	ldr.w	r8, [r4, #4]
   11144:	e73a      	b.n	10fbc <ticker_job+0x8a>
   11146:	9306      	str	r3, [sp, #24]
   11148:	f8dd b01c 	ldr.w	fp, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
   1114c:	9b00      	ldr	r3, [sp, #0]
   1114e:	7e1b      	ldrb	r3, [r3, #24]
   11150:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11152:	429a      	cmp	r2, r3
   11154:	d00a      	beq.n	1116c <ticker_job+0x23a>
		flag_compare_update = 1;
   11156:	2301      	movs	r3, #1
   11158:	9308      	str	r3, [sp, #32]
	if (flag_elapsed) {
   1115a:	9b04      	ldr	r3, [sp, #16]
   1115c:	b94b      	cbnz	r3, 11172 <ticker_job+0x240>
	node = &instance->node[0];
   1115e:	9a00      	ldr	r2, [sp, #0]
   11160:	6813      	ldr	r3, [r2, #0]
   11162:	9302      	str	r3, [sp, #8]
	users = &instance->user[0];
   11164:	6853      	ldr	r3, [r2, #4]
   11166:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
   11168:	7a53      	ldrb	r3, [r2, #9]
   1116a:	e117      	b.n	1139c <ticker_job+0x46a>
	flag_compare_update = 0;
   1116c:	9b06      	ldr	r3, [sp, #24]
   1116e:	9308      	str	r3, [sp, #32]
   11170:	e7f3      	b.n	1115a <ticker_job+0x228>
	node = &instance->node[0];
   11172:	9e00      	ldr	r6, [sp, #0]
   11174:	f8d6 9000 	ldr.w	r9, [r6]
	ticks_expired = 0;
   11178:	f04f 0a00 	mov.w	sl, #0
   1117c:	f8cd b004 	str.w	fp, [sp, #4]
   11180:	e02f      	b.n	111e2 <ticker_job+0x2b0>
   11182:	f8dd b004 	ldr.w	fp, [sp, #4]
			ticker->ticks_to_expire -= ticks_elapsed;
   11186:	1a9b      	subs	r3, r3, r2
   11188:	60ab      	str	r3, [r5, #8]
		if (instance->ticker_id_head != ticker_id_old_head) {
   1118a:	9b00      	ldr	r3, [sp, #0]
   1118c:	7e1b      	ldrb	r3, [r3, #24]
   1118e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11190:	429a      	cmp	r2, r3
   11192:	d0e4      	beq.n	1115e <ticker_job+0x22c>
			flag_compare_update = 1;
   11194:	9b04      	ldr	r3, [sp, #16]
   11196:	9308      	str	r3, [sp, #32]
   11198:	e7e1      	b.n	1115e <ticker_job+0x22c>
			instance->ticker_id_slot_previous = TICKER_NULL;
   1119a:	23ff      	movs	r3, #255	; 0xff
   1119c:	7673      	strb	r3, [r6, #25]
			instance->ticks_slot_previous = 0;
   1119e:	2300      	movs	r3, #0
   111a0:	8373      	strh	r3, [r6, #26]
   111a2:	e036      	b.n	11212 <ticker_job+0x2e0>
				ticks_to_expire += ticker->ticks_periodic;
   111a4:	686c      	ldr	r4, [r5, #4]
   111a6:	4404      	add	r4, r0
				ticks_to_expire += ticker_remainder_inc(ticker);
   111a8:	4628      	mov	r0, r5
   111aa:	f7ff fb5b 	bl	10864 <ticker_remainder_inc>
   111ae:	4420      	add	r0, r4
			while (count--) {
   111b0:	463b      	mov	r3, r7
   111b2:	1e5f      	subs	r7, r3, #1
   111b4:	2b00      	cmp	r3, #0
   111b6:	d1f5      	bne.n	111a4 <ticker_job+0x272>
			ticker->ticks_to_expire = ticks_to_expire;
   111b8:	60a8      	str	r0, [r5, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   111ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   111bc:	eb03 020a 	add.w	r2, r3, sl
   111c0:	6971      	ldr	r1, [r6, #20]
   111c2:	4628      	mov	r0, r5
   111c4:	f7ff fe8f 	bl	10ee6 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
   111c8:	8b2b      	ldrh	r3, [r5, #24]
   111ca:	836b      	strh	r3, [r5, #26]
			ticker->force = 0;
   111cc:	2300      	movs	r3, #0
   111ce:	70eb      	strb	r3, [r5, #3]
			ticker->next = *insert_head;
   111d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   111d4:	f809 300b 	strb.w	r3, [r9, fp]
			ticker->req++;
   111d8:	786b      	ldrb	r3, [r5, #1]
   111da:	3301      	adds	r3, #1
   111dc:	706b      	strb	r3, [r5, #1]
			*insert_head = id_expired;
   111de:	f8cd 8004 	str.w	r8, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
   111e2:	f896 8018 	ldrb.w	r8, [r6, #24]
   111e6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   111ea:	d026      	beq.n	1123a <ticker_job+0x308>
		ticker = &node[id_expired];
   111ec:	eb08 03c8 	add.w	r3, r8, r8, lsl #3
   111f0:	ea4f 0b83 	mov.w	fp, r3, lsl #2
   111f4:	eb09 050b 	add.w	r5, r9, fp
		ticks_to_expire = ticker->ticks_to_expire;
   111f8:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   111fa:	9a03      	ldr	r2, [sp, #12]
   111fc:	4293      	cmp	r3, r2
   111fe:	d8c0      	bhi.n	11182 <ticker_job+0x250>
		ticks_elapsed -= ticks_to_expire;
   11200:	9a03      	ldr	r2, [sp, #12]
   11202:	1ad2      	subs	r2, r2, r3
   11204:	9203      	str	r2, [sp, #12]
		ticks_expired += ticks_to_expire;
   11206:	449a      	add	sl, r3
		if (instance->ticks_slot_previous > ticks_to_expire) {
   11208:	8b72      	ldrh	r2, [r6, #26]
   1120a:	4293      	cmp	r3, r2
   1120c:	d2c5      	bcs.n	1119a <ticker_job+0x268>
			instance->ticks_slot_previous -= ticks_to_expire;
   1120e:	1ad3      	subs	r3, r2, r3
   11210:	8373      	strh	r3, [r6, #26]
		if (ticker->ticks_slot != 0) {
   11212:	8aeb      	ldrh	r3, [r5, #22]
   11214:	b11b      	cbz	r3, 1121e <ticker_job+0x2ec>
			instance->ticker_id_slot_previous = id_expired;
   11216:	f886 8019 	strb.w	r8, [r6, #25]
			instance->ticks_slot_previous = ticker->ticks_slot;
   1121a:	8aeb      	ldrh	r3, [r5, #22]
   1121c:	8373      	strh	r3, [r6, #26]
		ticker->ticks_to_expire = 0;
   1121e:	2300      	movs	r3, #0
   11220:	60ab      	str	r3, [r5, #8]
		instance->ticker_id_head = ticker->next;
   11222:	f819 300b 	ldrb.w	r3, [r9, fp]
   11226:	7633      	strb	r3, [r6, #24]
		if (ticker->ticks_periodic != 0) {
   11228:	686b      	ldr	r3, [r5, #4]
   1122a:	b11b      	cbz	r3, 11234 <ticker_job+0x302>
			count = 1 + ticker->lazy_periodic;
   1122c:	8b2b      	ldrh	r3, [r5, #24]
   1122e:	3301      	adds	r3, #1
			ticks_to_expire = 0;
   11230:	2000      	movs	r0, #0
   11232:	e7be      	b.n	111b2 <ticker_job+0x280>
			ticker->req = ticker->ack;
   11234:	78ab      	ldrb	r3, [r5, #2]
   11236:	706b      	strb	r3, [r5, #1]
   11238:	e7d3      	b.n	111e2 <ticker_job+0x2b0>
   1123a:	f8dd b004 	ldr.w	fp, [sp, #4]
   1123e:	e7a4      	b.n	1118a <ticker_job+0x258>
				user_op = &user_ops[user_ops_first];
   11240:	232c      	movs	r3, #44	; 0x2c
   11242:	9a03      	ldr	r2, [sp, #12]
   11244:	fb03 f302 	mul.w	r3, r3, r2
   11248:	9905      	ldr	r1, [sp, #20]
   1124a:	4419      	add	r1, r3
   1124c:	9101      	str	r1, [sp, #4]
				first = user_ops_first + 1;
   1124e:	3201      	adds	r2, #1
   11250:	b2d2      	uxtb	r2, r2
   11252:	4611      	mov	r1, r2
   11254:	9203      	str	r2, [sp, #12]
				if (first == user->count_user_op) {
   11256:	9a04      	ldr	r2, [sp, #16]
   11258:	7812      	ldrb	r2, [r2, #0]
   1125a:	4291      	cmp	r1, r2
   1125c:	d013      	beq.n	11286 <ticker_job+0x354>
				id_insert = user_op->id;
   1125e:	9a01      	ldr	r2, [sp, #4]
   11260:	7857      	ldrb	r7, [r2, #1]
				ticker = &node[id_insert];
   11262:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
   11266:	0094      	lsls	r4, r2, #2
   11268:	9a02      	ldr	r2, [sp, #8]
   1126a:	4414      	add	r4, r2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1126c:	9a05      	ldr	r2, [sp, #20]
   1126e:	5cd3      	ldrb	r3, [r2, r3]
   11270:	2b03      	cmp	r3, #3
   11272:	d16b      	bne.n	1134c <ticker_job+0x41a>
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
   11274:	7862      	ldrb	r2, [r4, #1]
   11276:	78a3      	ldrb	r3, [r4, #2]
   11278:	429a      	cmp	r2, r3
   1127a:	d007      	beq.n	1128c <ticker_job+0x35a>
					ticker_job_op_cb(user_op,
   1127c:	2101      	movs	r1, #1
   1127e:	9801      	ldr	r0, [sp, #4]
   11280:	f7ff fb1e 	bl	108c0 <ticker_job_op_cb>
   11284:	e062      	b.n	1134c <ticker_job+0x41a>
					first = 0;
   11286:	9a06      	ldr	r2, [sp, #24]
   11288:	9203      	str	r2, [sp, #12]
   1128a:	e7e8      	b.n	1125e <ticker_job+0x32c>
				ticker_job_op_start(ticker, user_op,
   1128c:	9b00      	ldr	r3, [sp, #0]
   1128e:	6959      	ldr	r1, [r3, #20]
	ticker->ticks_periodic = start->ticks_periodic;
   11290:	9801      	ldr	r0, [sp, #4]
   11292:	68c3      	ldr	r3, [r0, #12]
   11294:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   11296:	6903      	ldr	r3, [r0, #16]
   11298:	61e3      	str	r3, [r4, #28]
	ticker->lazy_periodic = start->lazy;
   1129a:	8a83      	ldrh	r3, [r0, #20]
   1129c:	8323      	strh	r3, [r4, #24]
	ticker->ticks_slot = start->ticks_slot;
   1129e:	8ac3      	ldrh	r3, [r0, #22]
   112a0:	82e3      	strh	r3, [r4, #22]
	ticker->timeout_func = start->fp_timeout_func;
   112a2:	6983      	ldr	r3, [r0, #24]
   112a4:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   112a6:	69c3      	ldr	r3, [r0, #28]
   112a8:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   112aa:	6883      	ldr	r3, [r0, #8]
   112ac:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
   112ae:	2500      	movs	r5, #0
   112b0:	82a5      	strh	r5, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   112b2:	6842      	ldr	r2, [r0, #4]
   112b4:	4620      	mov	r0, r4
   112b6:	f7ff fe16 	bl	10ee6 <ticks_to_expire_prep>
	ticker->remainder_current = 0;
   112ba:	6225      	str	r5, [r4, #32]
	ticker->lazy_current = 0;
   112bc:	8365      	strh	r5, [r4, #26]
	ticker->force = 1;
   112be:	2301      	movs	r3, #1
   112c0:	70e3      	strb	r3, [r4, #3]
   112c2:	e054      	b.n	1136e <ticker_job+0x43c>
		skip = 0;
   112c4:	f04f 0a00 	mov.w	sl, #0
   112c8:	e00e      	b.n	112e8 <ticker_job+0x3b6>
				skip_collide = 0;
   112ca:	2300      	movs	r3, #0
   112cc:	e021      	b.n	11312 <ticker_job+0x3e0>
		if (ticker->ticks_periodic != 0) {
   112ce:	6865      	ldr	r5, [r4, #4]
   112d0:	2d00      	cmp	r5, #0
   112d2:	d05b      	beq.n	1138c <ticker_job+0x45a>
						   ticker_remainder_inc(ticker);
   112d4:	4620      	mov	r0, r4
   112d6:	f7ff fac5 	bl	10864 <ticker_remainder_inc>
			ticker->ticks_to_expire += ticker->ticks_periodic +
   112da:	4428      	add	r0, r5
   112dc:	68a5      	ldr	r5, [r4, #8]
   112de:	4405      	add	r5, r0
   112e0:	60a5      	str	r5, [r4, #8]
			ticker->lazy_current++;
   112e2:	8b63      	ldrh	r3, [r4, #26]
   112e4:	3301      	adds	r3, #1
   112e6:	8363      	strh	r3, [r4, #26]
	while (id_insert !=
   112e8:	4639      	mov	r1, r7
   112ea:	9800      	ldr	r0, [sp, #0]
   112ec:	f7ff fa2a 	bl	10744 <ticker_enqueue>
   112f0:	4605      	mov	r5, r0
   112f2:	4287      	cmp	r7, r0
   112f4:	d021      	beq.n	1133a <ticker_job+0x408>
		if (id_collide != TICKER_NULL) {
   112f6:	2dff      	cmp	r5, #255	; 0xff
   112f8:	d0e9      	beq.n	112ce <ticker_job+0x39c>
			struct ticker_node *ticker_collide = &node[id_collide];
   112fa:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   112fe:	ea4f 0883 	mov.w	r8, r3, lsl #2
   11302:	eb09 0608 	add.w	r6, r9, r8
			if (ticker_collide->lazy_current >
   11306:	8b73      	ldrh	r3, [r6, #26]
			    ticker_collide->lazy_periodic) {
   11308:	8b32      	ldrh	r2, [r6, #24]
			if (ticker_collide->lazy_current >
   1130a:	4293      	cmp	r3, r2
   1130c:	d9dd      	bls.n	112ca <ticker_job+0x398>
				skip_collide = ticker_collide->lazy_current -
   1130e:	1a9b      	subs	r3, r3, r2
   11310:	b29b      	uxth	r3, r3
			if (ticker_collide->ticks_periodic &&
   11312:	6872      	ldr	r2, [r6, #4]
   11314:	2a00      	cmp	r2, #0
   11316:	d0da      	beq.n	112ce <ticker_job+0x39c>
   11318:	4553      	cmp	r3, sl
   1131a:	d8d8      	bhi.n	112ce <ticker_job+0x39c>
			    ticker_collide->force < ticker->force) {
   1131c:	78f2      	ldrb	r2, [r6, #3]
   1131e:	78e3      	ldrb	r3, [r4, #3]
			    skip_collide <= skip &&
   11320:	429a      	cmp	r2, r3
   11322:	d2d4      	bcs.n	112ce <ticker_job+0x39c>
					ticker_dequeue(instance, id_collide);
   11324:	4629      	mov	r1, r5
   11326:	9800      	ldr	r0, [sp, #0]
   11328:	f7ff fa6c 	bl	10804 <ticker_dequeue>
				ticker_collide->ticks_to_expire =
   1132c:	60b0      	str	r0, [r6, #8]
				ticker_collide->req = ticker_collide->ack;
   1132e:	78b3      	ldrb	r3, [r6, #2]
   11330:	7073      	strb	r3, [r6, #1]
				ticker_collide->next = *insert_head;
   11332:	f809 b008 	strb.w	fp, [r9, r8]
				*insert_head = id_collide;
   11336:	46ab      	mov	fp, r5
   11338:	e7d6      	b.n	112e8 <ticker_job+0x3b6>
	ticker->req = ticker->ack + 1;
   1133a:	78a3      	ldrb	r3, [r4, #2]
   1133c:	3301      	adds	r3, #1
   1133e:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
   11340:	2100      	movs	r1, #0
			if (user_op) {
   11342:	9b01      	ldr	r3, [sp, #4]
   11344:	b113      	cbz	r3, 1134c <ticker_job+0x41a>
				ticker_job_op_cb(user_op, status);
   11346:	4618      	mov	r0, r3
   11348:	f7ff faba 	bl	108c0 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   1134c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   11350:	d01e      	beq.n	11390 <ticker_job+0x45e>
			if (insert_head != TICKER_NULL) {
   11352:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   11356:	f43f af73 	beq.w	11240 <ticker_job+0x30e>
				ticker = &node[id_insert];
   1135a:	eb0b 02cb 	add.w	r2, fp, fp, lsl #3
   1135e:	0093      	lsls	r3, r2, #2
   11360:	9a02      	ldr	r2, [sp, #8]
   11362:	18d4      	adds	r4, r2, r3
				id_insert = insert_head;
   11364:	465f      	mov	r7, fp
				insert_head = ticker->next;
   11366:	f812 b003 	ldrb.w	fp, [r2, r3]
				user_op = NULL;
   1136a:	2300      	movs	r3, #0
   1136c:	9301      	str	r3, [sp, #4]
	struct ticker_node *node = &instance->node[0];
   1136e:	9b00      	ldr	r3, [sp, #0]
   11370:	f8d3 9000 	ldr.w	r9, [r3]
	ticker->next = TICKER_NULL;
   11374:	23ff      	movs	r3, #255	; 0xff
   11376:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
   11378:	f8b4 a01a 	ldrh.w	sl, [r4, #26]
   1137c:	8b23      	ldrh	r3, [r4, #24]
   1137e:	459a      	cmp	sl, r3
   11380:	d9a0      	bls.n	112c4 <ticker_job+0x392>
		skip = ticker->lazy_current -
   11382:	ebaa 0a03 	sub.w	sl, sl, r3
   11386:	fa1f fa8a 	uxth.w	sl, sl
   1138a:	e7ad      	b.n	112e8 <ticker_job+0x3b6>
			return TICKER_STATUS_FAILURE;
   1138c:	2101      	movs	r1, #1
   1138e:	e7d8      	b.n	11342 <ticker_job+0x410>
		       (user_ops_first != user->middle)) {
   11390:	9b04      	ldr	r3, [sp, #16]
   11392:	789b      	ldrb	r3, [r3, #2]
		while ((insert_head != TICKER_NULL) ||
   11394:	9a03      	ldr	r2, [sp, #12]
   11396:	429a      	cmp	r2, r3
   11398:	d1db      	bne.n	11352 <ticker_job+0x420>
	while (count_user--) {
   1139a:	9b07      	ldr	r3, [sp, #28]
   1139c:	1e5a      	subs	r2, r3, #1
   1139e:	b2d2      	uxtb	r2, r2
   113a0:	9207      	str	r2, [sp, #28]
   113a2:	b153      	cbz	r3, 113ba <ticker_job+0x488>
		user = &users[count_user];
   113a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   113a6:	9a07      	ldr	r2, [sp, #28]
   113a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   113ac:	461a      	mov	r2, r3
   113ae:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
   113b0:	685b      	ldr	r3, [r3, #4]
   113b2:	9305      	str	r3, [sp, #20]
		user_ops_first = user->first;
   113b4:	7853      	ldrb	r3, [r2, #1]
   113b6:	9303      	str	r3, [sp, #12]
   113b8:	e7c8      	b.n	1134c <ticker_job+0x41a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   113ba:	9b00      	ldr	r3, [sp, #0]
   113bc:	7e1b      	ldrb	r3, [r3, #24]
   113be:	9a09      	ldr	r2, [sp, #36]	; 0x24
   113c0:	429a      	cmp	r2, r3
   113c2:	d001      	beq.n	113c8 <ticker_job+0x496>
		flag_compare_update = 1;
   113c4:	2301      	movs	r3, #1
   113c6:	9308      	str	r3, [sp, #32]
	if (!pending) {
   113c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   113ca:	b18b      	cbz	r3, 113f0 <ticker_job+0x4be>
	instance->job_guard = 0;
   113cc:	2300      	movs	r3, #0
   113ce:	9a00      	ldr	r2, [sp, #0]
   113d0:	7713      	strb	r3, [r2, #28]
	if (flag_compare_update) {
   113d2:	9b08      	ldr	r3, [sp, #32]
   113d4:	2b00      	cmp	r3, #0
   113d6:	d13f      	bne.n	11458 <ticker_job+0x526>
	if (instance->worker_trigger) {
   113d8:	9b00      	ldr	r3, [sp, #0]
   113da:	7f5b      	ldrb	r3, [r3, #29]
   113dc:	b12b      	cbz	r3, 113ea <ticker_job+0x4b8>
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
   113de:	9b00      	ldr	r3, [sp, #0]
   113e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   113e2:	2201      	movs	r2, #1
   113e4:	4611      	mov	r1, r2
   113e6:	2002      	movs	r0, #2
   113e8:	4798      	blx	r3
}
   113ea:	b00d      	add	sp, #52	; 0x34
   113ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	users = &instance->user[0];
   113f0:	9a00      	ldr	r2, [sp, #0]
   113f2:	f8d2 8004 	ldr.w	r8, [r2, #4]
	count_user = instance->count_user;
   113f6:	7a53      	ldrb	r3, [r2, #9]
   113f8:	e026      	b.n	11448 <ticker_job+0x516>
		uop->status = TICKER_STATUS_SUCCESS;
   113fa:	2300      	movs	r3, #0
   113fc:	623b      	str	r3, [r7, #32]
		fp_op_func = uop->fp_op_func;
   113fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (fp_op_func) {
   11400:	b113      	cbz	r3, 11408 <ticker_job+0x4d6>
		fp_op_func(uop->status, uop->op_context);
   11402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11404:	6a38      	ldr	r0, [r7, #32]
   11406:	4798      	blx	r3
			first = user->first + 1;
   11408:	7863      	ldrb	r3, [r4, #1]
   1140a:	3301      	adds	r3, #1
   1140c:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
   1140e:	7822      	ldrb	r2, [r4, #0]
   11410:	4293      	cmp	r3, r2
   11412:	d016      	beq.n	11442 <ticker_job+0x510>
			user->first = first;
   11414:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   11416:	7862      	ldrb	r2, [r4, #1]
   11418:	78e3      	ldrb	r3, [r4, #3]
   1141a:	429a      	cmp	r2, r3
   1141c:	d013      	beq.n	11446 <ticker_job+0x514>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   1141e:	232c      	movs	r3, #44	; 0x2c
   11420:	fb03 f302 	mul.w	r3, r3, r2
   11424:	18ef      	adds	r7, r5, r3
	switch (uop->op) {
   11426:	5ceb      	ldrb	r3, [r5, r3]
   11428:	2b01      	cmp	r3, #1
   1142a:	d0e6      	beq.n	113fa <ticker_job+0x4c8>
   1142c:	2b02      	cmp	r3, #2
   1142e:	d106      	bne.n	1143e <ticker_job+0x50c>
		ticker_by_next_slot_get(instance,
   11430:	68fb      	ldr	r3, [r7, #12]
   11432:	68ba      	ldr	r2, [r7, #8]
   11434:	6879      	ldr	r1, [r7, #4]
   11436:	9800      	ldr	r0, [sp, #0]
   11438:	f7ff f955 	bl	106e6 <ticker_by_next_slot_get>
   1143c:	e7dd      	b.n	113fa <ticker_job+0x4c8>
	fp_op_func = NULL;
   1143e:	2300      	movs	r3, #0
   11440:	e7de      	b.n	11400 <ticker_job+0x4ce>
				first = 0;
   11442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11444:	e7e6      	b.n	11414 <ticker_job+0x4e2>
	while (count_user--) {
   11446:	4633      	mov	r3, r6
   11448:	1e5e      	subs	r6, r3, #1
   1144a:	b2f6      	uxtb	r6, r6
   1144c:	2b00      	cmp	r3, #0
   1144e:	d0bd      	beq.n	113cc <ticker_job+0x49a>
		user = &users[count_user];
   11450:	eb08 04c6 	add.w	r4, r8, r6, lsl #3
		user_op = &user->user_op[0];
   11454:	6865      	ldr	r5, [r4, #4]
   11456:	e7de      	b.n	11416 <ticker_job+0x4e4>
	if (instance->ticker_id_head == TICKER_NULL) {
   11458:	7e13      	ldrb	r3, [r2, #24]
   1145a:	2bff      	cmp	r3, #255	; 0xff
   1145c:	d02f      	beq.n	114be <ticker_job+0x58c>
	if (ticker_id_old_head == TICKER_NULL) {
   1145e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11460:	2bff      	cmp	r3, #255	; 0xff
   11462:	d034      	beq.n	114ce <ticker_job+0x59c>
	ticker = &instance->node[instance->ticker_id_head];
   11464:	9800      	ldr	r0, [sp, #0]
   11466:	6802      	ldr	r2, [r0, #0]
   11468:	7e03      	ldrb	r3, [r0, #24]
   1146a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1146e:	0099      	lsls	r1, r3, #2
   11470:	440a      	add	r2, r1
	ticks_to_expire = ticker->ticks_to_expire;
   11472:	6897      	ldr	r7, [r2, #8]
	i = 10;
   11474:	250a      	movs	r5, #10
   11476:	4680      	mov	r8, r0
		LL_ASSERT(i);
   11478:	b39d      	cbz	r5, 114e2 <ticker_job+0x5b0>
		i--;
   1147a:	3d01      	subs	r5, #1
		ctr = cntr_cnt_get();
   1147c:	f7fd ff68 	bl	f350 <cntr_cnt_get>
   11480:	4606      	mov	r6, r0
		cc = instance->ticks_current;
   11482:	f8d8 4014 	ldr.w	r4, [r8, #20]
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   11486:	4621      	mov	r1, r4
   11488:	f7ff fcce 	bl	10e28 <ticker_ticks_diff_get>
   1148c:	3003      	adds	r0, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
   1148e:	4287      	cmp	r7, r0
   11490:	bf2c      	ite	cs
   11492:	19e4      	addcs	r4, r4, r7
   11494:	1824      	addcc	r4, r4, r0
		cc &= 0x00FFFFFF;
   11496:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->fp_cmp_set(cc);
   1149a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   1149e:	4620      	mov	r0, r4
   114a0:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   114a2:	f7fd ff55 	bl	f350 <cntr_cnt_get>
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   114a6:	4631      	mov	r1, r6
   114a8:	f7ff fcbe 	bl	10e28 <ticker_ticks_diff_get>
   114ac:	f100 0903 	add.w	r9, r0, #3
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
   114b0:	4631      	mov	r1, r6
   114b2:	4620      	mov	r0, r4
   114b4:	f7ff fcb8 	bl	10e28 <ticker_ticks_diff_get>
   114b8:	4581      	cmp	r9, r0
   114ba:	d8dd      	bhi.n	11478 <ticker_job+0x546>
   114bc:	e78c      	b.n	113d8 <ticker_job+0x4a6>
		if (cntr_stop() == 0) {
   114be:	f7fd ff2d 	bl	f31c <cntr_stop>
   114c2:	2800      	cmp	r0, #0
   114c4:	d188      	bne.n	113d8 <ticker_job+0x4a6>
			instance->ticks_slot_previous = 0;
   114c6:	2300      	movs	r3, #0
   114c8:	9a00      	ldr	r2, [sp, #0]
   114ca:	8353      	strh	r3, [r2, #26]
   114cc:	e784      	b.n	113d8 <ticker_job+0x4a6>
		ticks_current = cntr_cnt_get();
   114ce:	f7fd ff3f 	bl	f350 <cntr_cnt_get>
   114d2:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   114d4:	f7fd ff12 	bl	f2fc <cntr_start>
   114d8:	2800      	cmp	r0, #0
   114da:	d1c3      	bne.n	11464 <ticker_job+0x532>
			instance->ticks_current = ticks_current;
   114dc:	9b00      	ldr	r3, [sp, #0]
   114de:	615c      	str	r4, [r3, #20]
   114e0:	e7c0      	b.n	11464 <ticker_job+0x532>
		LL_ASSERT(i);
   114e2:	4040      	eors	r0, r0
   114e4:	f380 8811 	msr	BASEPRI, r0
   114e8:	f04f 0004 	mov.w	r0, #4
   114ec:	df02      	svc	2
	...

000114f0 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
   114f0:	b570      	push	{r4, r5, r6, lr}
   114f2:	4606      	mov	r6, r0
   114f4:	460c      	mov	r4, r1
	while (len) {
   114f6:	b19c      	cbz	r4, 11520 <bt_rand+0x30>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
   114f8:	4d0a      	ldr	r5, [pc, #40]	; (11524 <bt_rand+0x34>)
   114fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   114fe:	4628      	mov	r0, r5
   11500:	f016 fe48 	bl	28194 <_impl_k_mutex_lock>
		k_mutex_lock(&mutex_rand, K_FOREVER);
		len = rand_get(len, buf);
   11504:	4631      	mov	r1, r6
   11506:	4620      	mov	r0, r4
   11508:	f7ff f89a 	bl	10640 <rand_get>
   1150c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
   1150e:	4628      	mov	r0, r5
   11510:	f016 feaa 	bl	28268 <_impl_k_mutex_unlock>
		k_mutex_unlock(&mutex_rand);
		if (len) {
   11514:	2c00      	cmp	r4, #0
   11516:	d0ee      	beq.n	114f6 <bt_rand+0x6>
   11518:	bf20      	wfe
  __ASM volatile ("sev");
   1151a:	bf40      	sev
  __ASM volatile ("wfe");
   1151c:	bf20      	wfe
   1151e:	e7ea      	b.n	114f6 <bt_rand+0x6>
			cpu_sleep();
		}
	}

	return 0;
}
   11520:	2000      	movs	r0, #0
   11522:	bd70      	pop	{r4, r5, r6, pc}
   11524:	2000d1bc 	.word	0x2000d1bc

00011528 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   11528:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   1152a:	2300      	movs	r3, #0
   1152c:	f7fd ff4c 	bl	f3c8 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   11530:	2000      	movs	r0, #0
   11532:	bd08      	pop	{r3, pc}

00011534 <ticker_if_done>:
	*((u32_t volatile *)ops_context) = status;
   11534:	6008      	str	r0, [r1, #0]
   11536:	4770      	bx	lr

00011538 <mayfly_xtal_start>:
{
   11538:	b508      	push	{r3, lr}
	clock_control_on(_radio.hf_clock, NULL);
   1153a:	4b03      	ldr	r3, [pc, #12]	; (11548 <mayfly_xtal_start+0x10>)
   1153c:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   1153e:	6843      	ldr	r3, [r0, #4]
	return api->on(dev, sys);
   11540:	681b      	ldr	r3, [r3, #0]
   11542:	2100      	movs	r1, #0
   11544:	4798      	blx	r3
   11546:	bd08      	pop	{r3, pc}
   11548:	20000fec 	.word	0x20000fec

0001154c <mayfly_xtal_stop>:
{
   1154c:	b508      	push	{r3, lr}
	clock_control_off(_radio.hf_clock, NULL);
   1154e:	4b03      	ldr	r3, [pc, #12]	; (1155c <mayfly_xtal_stop+0x10>)
   11550:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   11552:	6843      	ldr	r3, [r0, #4]
	return api->off(dev, sys);
   11554:	685b      	ldr	r3, [r3, #4]
   11556:	2100      	movs	r1, #0
   11558:	4798      	blx	r3
   1155a:	bd08      	pop	{r3, pc}
   1155c:	20000fec 	.word	0x20000fec

00011560 <prepare_reduced>:
	if (status == 0) {
   11560:	b918      	cbnz	r0, 1156a <prepare_reduced+0xa>
		hdr->ticks_xtal_to_start |= ((u32_t)1 << 31);
   11562:	680b      	ldr	r3, [r1, #0]
   11564:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11568:	600b      	str	r3, [r1, #0]
   1156a:	4770      	bx	lr

0001156c <prepare_normal>:
	if (status == 0) {
   1156c:	b918      	cbnz	r0, 11576 <prepare_normal+0xa>
		hdr->ticks_xtal_to_start &= ~((u32_t)1 << 31);
   1156e:	680b      	ldr	r3, [r1, #0]
   11570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   11574:	600b      	str	r3, [r1, #0]
   11576:	4770      	bx	lr

00011578 <chan_sel_remap>:
{
   11578:	b470      	push	{r4, r5, r6}
	byte_count = 5;
   1157a:	2405      	movs	r4, #5
	chan_next = 0;
   1157c:	2200      	movs	r2, #0
	while (byte_count--) {
   1157e:	e011      	b.n	115a4 <chan_sel_remap+0x2c>
			chan_next++;
   11580:	3201      	adds	r2, #1
   11582:	b2d2      	uxtb	r2, r2
			bite >>= 1;
   11584:	086d      	lsrs	r5, r5, #1
		while (bit_count--) {
   11586:	461c      	mov	r4, r3
   11588:	1e63      	subs	r3, r4, #1
   1158a:	b2db      	uxtb	r3, r3
   1158c:	b134      	cbz	r4, 1159c <chan_sel_remap+0x24>
			if (bite & 0x01) {
   1158e:	f015 0f01 	tst.w	r5, #1
   11592:	d0f5      	beq.n	11580 <chan_sel_remap+0x8>
				if (chan_index == 0) {
   11594:	b111      	cbz	r1, 1159c <chan_sel_remap+0x24>
				chan_index--;
   11596:	3901      	subs	r1, #1
   11598:	b2c9      	uxtb	r1, r1
   1159a:	e7f1      	b.n	11580 <chan_sel_remap+0x8>
		if (bit_count < 8) {
   1159c:	2b07      	cmp	r3, #7
   1159e:	d907      	bls.n	115b0 <chan_sel_remap+0x38>
		chan_map++;
   115a0:	3001      	adds	r0, #1
	while (byte_count--) {
   115a2:	4634      	mov	r4, r6
   115a4:	1e63      	subs	r3, r4, #1
   115a6:	b2de      	uxtb	r6, r3
   115a8:	b114      	cbz	r4, 115b0 <chan_sel_remap+0x38>
		bite = *chan_map;
   115aa:	7805      	ldrb	r5, [r0, #0]
		bit_count = 8;
   115ac:	2408      	movs	r4, #8
		while (bit_count--) {
   115ae:	e7eb      	b.n	11588 <chan_sel_remap+0x10>
}
   115b0:	4610      	mov	r0, r2
   115b2:	bc70      	pop	{r4, r5, r6}
   115b4:	4770      	bx	lr
	...

000115b8 <chan_sel_1>:
{
   115b8:	b570      	push	{r4, r5, r6, lr}
   115ba:	4605      	mov	r5, r0
   115bc:	f89d 6010 	ldrb.w	r6, [sp, #16]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   115c0:	7804      	ldrb	r4, [r0, #0]
   115c2:	fb02 1101 	mla	r1, r2, r1, r1
   115c6:	4421      	add	r1, r4
   115c8:	4c0f      	ldr	r4, [pc, #60]	; (11608 <chan_sel_1+0x50>)
   115ca:	fb84 2401 	smull	r2, r4, r4, r1
   115ce:	1862      	adds	r2, r4, r1
   115d0:	17cc      	asrs	r4, r1, #31
   115d2:	ebc4 1462 	rsb	r4, r4, r2, asr #5
   115d6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   115da:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   115de:	1b0c      	subs	r4, r1, r4
   115e0:	b2e0      	uxtb	r0, r4
	*chan_use = chan_next;
   115e2:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   115e4:	08c2      	lsrs	r2, r0, #3
   115e6:	5c9a      	ldrb	r2, [r3, r2]
   115e8:	f004 0407 	and.w	r4, r4, #7
   115ec:	fa42 f404 	asr.w	r4, r2, r4
   115f0:	f014 0f01 	tst.w	r4, #1
   115f4:	d107      	bne.n	11606 <chan_sel_1+0x4e>
		chan_index = chan_next % chan_count;
   115f6:	fbb0 f1f6 	udiv	r1, r0, r6
   115fa:	fb06 0111 	mls	r1, r6, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   115fe:	b2c9      	uxtb	r1, r1
   11600:	4618      	mov	r0, r3
   11602:	f7ff ffb9 	bl	11578 <chan_sel_remap>
}
   11606:	bd70      	pop	{r4, r5, r6, pc}
   11608:	dd67c8a7 	.word	0xdd67c8a7

0001160c <chan_rev_8>:
	o = 0;
   1160c:	2300      	movs	r3, #0
	for (iterate = 0; iterate < 8; iterate++) {
   1160e:	461a      	mov	r2, r3
   11610:	e007      	b.n	11622 <chan_rev_8+0x16>
		o <<= 1;
   11612:	005b      	lsls	r3, r3, #1
   11614:	b2db      	uxtb	r3, r3
		o |= (i & 1);
   11616:	f000 0101 	and.w	r1, r0, #1
   1161a:	430b      	orrs	r3, r1
		i >>= 1;
   1161c:	0840      	lsrs	r0, r0, #1
	for (iterate = 0; iterate < 8; iterate++) {
   1161e:	3201      	adds	r2, #1
   11620:	b2d2      	uxtb	r2, r2
   11622:	2a07      	cmp	r2, #7
   11624:	d9f5      	bls.n	11612 <chan_rev_8+0x6>
}
   11626:	4618      	mov	r0, r3
   11628:	4770      	bx	lr

0001162a <chan_perm>:
{
   1162a:	b538      	push	{r3, r4, r5, lr}
   1162c:	4604      	mov	r4, r0
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   1162e:	0a00      	lsrs	r0, r0, #8
   11630:	f7ff ffec 	bl	1160c <chan_rev_8>
   11634:	0205      	lsls	r5, r0, #8
   11636:	b2e0      	uxtb	r0, r4
   11638:	f7ff ffe8 	bl	1160c <chan_rev_8>
   1163c:	b200      	sxth	r0, r0
   1163e:	4328      	orrs	r0, r5
}
   11640:	b280      	uxth	r0, r0
   11642:	bd38      	pop	{r3, r4, r5, pc}

00011644 <chan_mam>:
	return ((u32_t)a * 17 + b) & 0xFFFF;
   11644:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   11648:	fa11 f080 	uxtah	r0, r1, r0
}
   1164c:	b280      	uxth	r0, r0
   1164e:	4770      	bx	lr

00011650 <chan_prn>:
{
   11650:	b538      	push	{r3, r4, r5, lr}
   11652:	460d      	mov	r5, r1
	prn_e = counter ^ chan_id;
   11654:	4048      	eors	r0, r1
	for (iterate = 0; iterate < 3; iterate++) {
   11656:	2400      	movs	r4, #0
   11658:	e006      	b.n	11668 <chan_prn+0x18>
		prn_e = chan_perm(prn_e);
   1165a:	f7ff ffe6 	bl	1162a <chan_perm>
		prn_e = chan_mam(prn_e, chan_id);
   1165e:	4629      	mov	r1, r5
   11660:	f7ff fff0 	bl	11644 <chan_mam>
	for (iterate = 0; iterate < 3; iterate++) {
   11664:	3401      	adds	r4, #1
   11666:	b2e4      	uxtb	r4, r4
   11668:	2c02      	cmp	r4, #2
   1166a:	d9f6      	bls.n	1165a <chan_prn+0xa>
	prn_e ^= chan_id;
   1166c:	4068      	eors	r0, r5
}
   1166e:	b280      	uxth	r0, r0
   11670:	bd38      	pop	{r3, r4, r5, pc}
	...

00011674 <chan_sel_2>:
{
   11674:	b538      	push	{r3, r4, r5, lr}
   11676:	4615      	mov	r5, r2
   11678:	461c      	mov	r4, r3
	prn_e = chan_prn(counter, chan_id);
   1167a:	f7ff ffe9 	bl	11650 <chan_prn>
   1167e:	4601      	mov	r1, r0
	chan_next = prn_e % 37;
   11680:	4a0e      	ldr	r2, [pc, #56]	; (116bc <chan_sel_2+0x48>)
   11682:	fba2 3200 	umull	r3, r2, r2, r0
   11686:	1a80      	subs	r0, r0, r2
   11688:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   1168c:	0952      	lsrs	r2, r2, #5
   1168e:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   11692:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   11696:	1a8a      	subs	r2, r1, r2
   11698:	b2d0      	uxtb	r0, r2
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   1169a:	08c3      	lsrs	r3, r0, #3
   1169c:	5ceb      	ldrb	r3, [r5, r3]
   1169e:	f000 0207 	and.w	r2, r0, #7
   116a2:	4113      	asrs	r3, r2
   116a4:	f013 0f01 	tst.w	r3, #1
   116a8:	d106      	bne.n	116b8 <chan_sel_2+0x44>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
   116aa:	fb04 f101 	mul.w	r1, r4, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
   116ae:	f3c1 4107 	ubfx	r1, r1, #16, #8
   116b2:	4628      	mov	r0, r5
   116b4:	f7ff ff60 	bl	11578 <chan_sel_remap>
}
   116b8:	bd38      	pop	{r3, r4, r5, pc}
   116ba:	bf00      	nop
   116bc:	bacf914d 	.word	0xbacf914d

000116c0 <ctrl_tx_last_enqueue>:
}

static void ctrl_tx_last_enqueue(struct connection *conn,
				 struct radio_pdu_node_tx *node_tx)
{
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   116c0:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   116c4:	681b      	ldr	r3, [r3, #0]
   116c6:	600b      	str	r3, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   116c8:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   116cc:	6019      	str	r1, [r3, #0]
	conn->pkt_tx_ctrl_last = node_tx;
   116ce:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   116d2:	4770      	bx	lr

000116d4 <ctrl_tx_enqueue>:
}

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
   116d4:	b538      	push	{r3, r4, r5, lr}
   116d6:	4604      	mov	r4, r0
   116d8:	460d      	mov	r5, r1
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    !conn->empty &&
   116da:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
	if (
   116de:	f013 0f80 	tst.w	r3, #128	; 0x80
   116e2:	d11f      	bne.n	11724 <ctrl_tx_enqueue+0x50>
	    /* and data/ctrl packet is in the head */
	    conn->pkt_tx_head &&
   116e4:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
	    !conn->empty &&
   116e8:	b1e2      	cbz	r2, 11724 <ctrl_tx_enqueue+0x50>
	    conn->pkt_tx_head &&
   116ea:	f013 0f08 	tst.w	r3, #8
   116ee:	d119      	bne.n	11724 <ctrl_tx_enqueue+0x50>

		/* if data transmited once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   116f0:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   116f4:	429a      	cmp	r2, r3
   116f6:	d007      	beq.n	11708 <ctrl_tx_enqueue+0x34>
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->pkt_tx_ctrl) {
   116f8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   116fc:	b143      	cbz	r3, 11710 <ctrl_tx_enqueue+0x3c>
			node_tx->next = conn->pkt_tx_head->next;
			conn->pkt_tx_head->next = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   116fe:	4629      	mov	r1, r5
   11700:	4620      	mov	r0, r4
   11702:	f7ff ffdd 	bl	116c0 <ctrl_tx_last_enqueue>
   11706:	e014      	b.n	11732 <ctrl_tx_enqueue+0x5e>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   11708:	681b      	ldr	r3, [r3, #0]
   1170a:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
   1170e:	e7f3      	b.n	116f8 <ctrl_tx_enqueue+0x24>
			node_tx->next = conn->pkt_tx_head->next;
   11710:	6813      	ldr	r3, [r2, #0]
   11712:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head->next = node_tx;
   11714:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   11718:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   1171a:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   1171e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   11722:	e006      	b.n	11732 <ctrl_tx_enqueue+0x5e>
		/* No packet needing ACK. */

		/* If first ctrl packet then add it as head else add it to the
		 * tail of the ctrl packets.
		 */
		if (!conn->pkt_tx_ctrl) {
   11724:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   11728:	b133      	cbz	r3, 11738 <ctrl_tx_enqueue+0x64>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   1172a:	4629      	mov	r1, r5
   1172c:	4620      	mov	r0, r4
   1172e:	f7ff ffc7 	bl	116c0 <ctrl_tx_last_enqueue>
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (node_tx->next == 0) {
   11732:	682b      	ldr	r3, [r5, #0]
   11734:	b153      	cbz	r3, 1174c <ctrl_tx_enqueue+0x78>
   11736:	bd38      	pop	{r3, r4, r5, pc}
			node_tx->next = conn->pkt_tx_head;
   11738:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1173c:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head = node_tx;
   1173e:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
			conn->pkt_tx_ctrl = node_tx;
   11742:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   11746:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   1174a:	e7f2      	b.n	11732 <ctrl_tx_enqueue+0x5e>
		conn->pkt_tx_last = node_tx;
   1174c:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
	}
}
   11750:	e7f1      	b.n	11736 <ctrl_tx_enqueue+0x62>

00011752 <ctrl_tx_sec_enqueue>:

static void ctrl_tx_sec_enqueue(struct connection *conn,
				  struct radio_pdu_node_tx *node_tx)
{
   11752:	b508      	push	{r3, lr}
	if (conn->pause_tx) {
   11754:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   11758:	f013 0f08 	tst.w	r3, #8
   1175c:	d010      	beq.n	11780 <ctrl_tx_sec_enqueue+0x2e>
		if (!conn->pkt_tx_ctrl) {
   1175e:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   11762:	b13b      	cbz	r3, 11774 <ctrl_tx_sec_enqueue+0x22>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
		} else {
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   11764:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   11768:	681b      	ldr	r3, [r3, #0]
   1176a:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   1176c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   11770:	6019      	str	r1, [r3, #0]
   11772:	bd08      	pop	{r3, pc}
			node_tx->next = conn->pkt_tx_head;
   11774:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   11778:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   1177a:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
   1177e:	bd08      	pop	{r3, pc}
		}
	} else {
		ctrl_tx_enqueue(conn, node_tx);
   11780:	f7ff ffa8 	bl	116d4 <ctrl_tx_enqueue>
   11784:	bd08      	pop	{r3, pc}
	...

00011788 <conn_update_req>:
}

#if defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
	if (conn->llcp_req != conn->llcp_ack) {
   11788:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   1178c:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   11790:	428b      	cmp	r3, r1
   11792:	d001      	beq.n	11798 <conn_update_req+0x10>
		return 1;
   11794:	2001      	movs	r0, #1
   11796:	4770      	bx	lr
{
   11798:	b530      	push	{r4, r5, lr}
	}

	if (!conn->role) {
   1179a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1179e:	2b00      	cmp	r3, #0
   117a0:	db2a      	blt.n	117f8 <conn_update_req+0x70>
		conn->llcp.conn_upd.win_size = 1;
   117a2:	2401      	movs	r4, #1
   117a4:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   117a8:	2200      	movs	r2, #0
   117aa:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->conn_interval;
   117ae:	8c85      	ldrh	r5, [r0, #36]	; 0x24
   117b0:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->latency;
   117b4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   117b6:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
   117ba:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   117bc:	fb03 f305 	mul.w	r3, r3, r5
					      conn->supervision_reload *
   117c0:	ebc3 1543 	rsb	r5, r3, r3, lsl #5
   117c4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
					      125 / 1000;
   117c8:	4d26      	ldr	r5, [pc, #152]	; (11864 <conn_update_req+0xdc>)
   117ca:	fb85 e503 	smull	lr, r5, r5, r3
   117ce:	17db      	asrs	r3, r3, #31
   117d0:	ebc3 13a5 	rsb	r3, r3, r5, asr #6
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   117d4:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   117d8:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   117dc:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
   117e0:	b2db      	uxtb	r3, r3
   117e2:	f043 0304 	orr.w	r3, r3, #4
   117e6:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78

		conn->llcp_type = LLCP_CONN_UPD;
   117ea:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_ack--;
   117ee:	3901      	subs	r1, #1
   117f0:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75

		return 0;
   117f4:	4610      	mov	r0, r2
   117f6:	bd30      	pop	{r4, r5, pc}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	} else if (conn->common.fex_valid &&
   117f8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   117fc:	f013 0f20 	tst.w	r3, #32
   11800:	d101      	bne.n	11806 <conn_update_req+0x7e>
		return 0;
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
   11802:	2002      	movs	r0, #2
   11804:	bd30      	pop	{r4, r5, pc}
		   (conn->llcp_features &
   11806:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
	} else if (conn->common.fex_valid &&
   1180a:	f013 0f02 	tst.w	r3, #2
   1180e:	d101      	bne.n	11814 <conn_update_req+0x8c>
	return 2;
   11810:	2002      	movs	r0, #2
}
   11812:	bd30      	pop	{r4, r5, pc}
		conn->llcp_conn_param.status = 0;
   11814:	2300      	movs	r3, #0
   11816:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.interval = conn->conn_interval;
   1181a:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   1181c:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
		conn->llcp_conn_param.latency = conn->latency;
   11820:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
   11822:	f8a0 20c6 	strh.w	r2, [r0, #198]	; 0xc6
						conn->supervision_reload *
   11826:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
		conn->llcp_conn_param.timeout = conn->conn_interval *
   11828:	fb02 f201 	mul.w	r2, r2, r1
						conn->supervision_reload *
   1182c:	ebc2 1142 	rsb	r1, r2, r2, lsl #5
   11830:	eb02 0281 	add.w	r2, r2, r1, lsl #2
						125 / 1000;
   11834:	490b      	ldr	r1, [pc, #44]	; (11864 <conn_update_req+0xdc>)
   11836:	fb81 4102 	smull	r4, r1, r1, r2
   1183a:	17d2      	asrs	r2, r2, #31
   1183c:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
		conn->llcp_conn_param.timeout = conn->conn_interval *
   11840:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   11844:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.cmd = 0;
   11848:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
   1184c:	f363 02c3 	bfi	r2, r3, #3, #1
   11850:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
   11854:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   11858:	3a01      	subs	r2, #1
   1185a:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
		return 0;
   1185e:	4618      	mov	r0, r3
   11860:	bd30      	pop	{r4, r5, pc}
   11862:	bf00      	nop
   11864:	10624dd3 	.word	0x10624dd3

00011868 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
   11868:	4a0d      	ldr	r2, [pc, #52]	; (118a0 <rx_fc_lock+0x38>)
   1186a:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   1186e:	b2db      	uxtb	r3, r3
   11870:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   11874:	4293      	cmp	r3, r2
   11876:	d000      	beq.n	1187a <rx_fc_lock+0x12>
   11878:	4770      	bx	lr
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
   1187a:	4a09      	ldr	r2, [pc, #36]	; (118a0 <rx_fc_lock+0x38>)
   1187c:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   11880:	33b8      	adds	r3, #184	; 0xb8
   11882:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   11886:	80d8      	strh	r0, [r3, #6]
		req = _radio.fc_req + 1;
   11888:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   1188c:	3301      	adds	r3, #1
   1188e:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
   11890:	2b03      	cmp	r3, #3
   11892:	d003      	beq.n	1189c <rx_fc_lock+0x34>
			req = 0;
		}
		_radio.fc_req = req;
   11894:	4a02      	ldr	r2, [pc, #8]	; (118a0 <rx_fc_lock+0x38>)
   11896:	f882 317c 	strb.w	r3, [r2, #380]	; 0x17c
	}
}
   1189a:	e7ed      	b.n	11878 <rx_fc_lock+0x10>
			req = 0;
   1189c:	2300      	movs	r3, #0
   1189e:	e7f9      	b.n	11894 <rx_fc_lock+0x2c>
   118a0:	20000fec 	.word	0x20000fec

000118a4 <ticker_success_assert>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   118a4:	b900      	cbnz	r0, 118a8 <ticker_success_assert+0x4>
   118a6:	4770      	bx	lr
   118a8:	4040      	eors	r0, r0
   118aa:	f380 8811 	msr	BASEPRI, r0
   118ae:	f04f 0004 	mov.w	r0, #4
   118b2:	df02      	svc	2

000118b4 <start_enc_rsp_send>:
{
   118b4:	b510      	push	{r4, lr}
   118b6:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   118b8:	b171      	cbz	r1, 118d8 <start_enc_rsp_send+0x24>
   118ba:	460b      	mov	r3, r1
	struct radio_pdu_node_tx *node_tx = NULL;
   118bc:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   118be:	781a      	ldrb	r2, [r3, #0]
   118c0:	f042 0203 	orr.w	r2, r2, #3
   118c4:	701a      	strb	r2, [r3, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   118c6:	2201      	movs	r2, #1
   118c8:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   118ca:	2206      	movs	r2, #6
   118cc:	70da      	strb	r2, [r3, #3]
	if (node_tx) {
   118ce:	b111      	cbz	r1, 118d6 <start_enc_rsp_send+0x22>
		ctrl_tx_enqueue(conn, node_tx);
   118d0:	4620      	mov	r0, r4
   118d2:	f7ff feff 	bl	116d4 <ctrl_tx_enqueue>
   118d6:	bd10      	pop	{r4, pc}
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   118d8:	4806      	ldr	r0, [pc, #24]	; (118f4 <start_enc_rsp_send+0x40>)
   118da:	f7fd fc68 	bl	f1ae <mem_acquire>
		LL_ASSERT(node_tx);
   118de:	4601      	mov	r1, r0
   118e0:	b108      	cbz	r0, 118e6 <start_enc_rsp_send+0x32>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   118e2:	1d03      	adds	r3, r0, #4
   118e4:	e7eb      	b.n	118be <start_enc_rsp_send+0xa>
		LL_ASSERT(node_tx);
   118e6:	4040      	eors	r0, r0
   118e8:	f380 8811 	msr	BASEPRI, r0
   118ec:	f04f 0004 	mov.w	r0, #4
   118f0:	df02      	svc	2
   118f2:	bf00      	nop
   118f4:	20001144 	.word	0x20001144

000118f8 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   118f8:	2801      	cmp	r0, #1
   118fa:	d005      	beq.n	11908 <ticker_stop_adv_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   118fc:	4b0d      	ldr	r3, [pc, #52]	; (11934 <ticker_stop_adv_assert+0x3c>)
   118fe:	7b1b      	ldrb	r3, [r3, #12]
   11900:	b2db      	uxtb	r3, r3
   11902:	2b05      	cmp	r3, #5
   11904:	d00f      	beq.n	11926 <ticker_stop_adv_assert+0x2e>
   11906:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
   11908:	4b0a      	ldr	r3, [pc, #40]	; (11934 <ticker_stop_adv_assert+0x3c>)
   1190a:	7b9b      	ldrb	r3, [r3, #14]
   1190c:	b2db      	uxtb	r3, r3
   1190e:	2b05      	cmp	r3, #5
   11910:	d103      	bne.n	1191a <ticker_stop_adv_assert+0x22>
			_radio.ticker_id_stop = 0;
   11912:	2200      	movs	r2, #0
   11914:	4b07      	ldr	r3, [pc, #28]	; (11934 <ticker_stop_adv_assert+0x3c>)
   11916:	739a      	strb	r2, [r3, #14]
   11918:	4770      	bx	lr
			LL_ASSERT(0);
   1191a:	4040      	eors	r0, r0
   1191c:	f380 8811 	msr	BASEPRI, r0
   11920:	f04f 0004 	mov.w	r0, #4
   11924:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   11926:	4040      	eors	r0, r0
   11928:	f380 8811 	msr	BASEPRI, r0
   1192c:	f04f 0004 	mov.w	r0, #4
   11930:	df02      	svc	2
   11932:	bf00      	nop
   11934:	20000fec 	.word	0x20000fec

00011938 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   11938:	2801      	cmp	r0, #1
   1193a:	d005      	beq.n	11948 <ticker_stop_scan_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   1193c:	4b0d      	ldr	r3, [pc, #52]	; (11974 <ticker_stop_scan_assert+0x3c>)
   1193e:	7b1b      	ldrb	r3, [r3, #12]
   11940:	b2db      	uxtb	r3, r3
   11942:	2b06      	cmp	r3, #6
   11944:	d00f      	beq.n	11966 <ticker_stop_scan_assert+0x2e>
   11946:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
   11948:	4b0a      	ldr	r3, [pc, #40]	; (11974 <ticker_stop_scan_assert+0x3c>)
   1194a:	7b9b      	ldrb	r3, [r3, #14]
   1194c:	b2db      	uxtb	r3, r3
   1194e:	2b06      	cmp	r3, #6
   11950:	d103      	bne.n	1195a <ticker_stop_scan_assert+0x22>
			_radio.ticker_id_stop = 0;
   11952:	2200      	movs	r2, #0
   11954:	4b07      	ldr	r3, [pc, #28]	; (11974 <ticker_stop_scan_assert+0x3c>)
   11956:	739a      	strb	r2, [r3, #14]
   11958:	4770      	bx	lr
			LL_ASSERT(0);
   1195a:	4040      	eors	r0, r0
   1195c:	f380 8811 	msr	BASEPRI, r0
   11960:	f04f 0004 	mov.w	r0, #4
   11964:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   11966:	4040      	eors	r0, r0
   11968:	f380 8811 	msr	BASEPRI, r0
   1196c:	f04f 0004 	mov.w	r0, #4
   11970:	df02      	svc	2
   11972:	bf00      	nop
   11974:	20000fec 	.word	0x20000fec

00011978 <conn_update>:
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   11978:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
   1197c:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   1197e:	1a9b      	subs	r3, r3, r2
   11980:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   11982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11986:	da5b      	bge.n	11a40 <conn_update+0xc8>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11988:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1198c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11990:	429a      	cmp	r2, r3
   11992:	d13d      	bne.n	11a10 <conn_update+0x98>
	if (_radio.conn_upd == 0) {
   11994:	4b2c      	ldr	r3, [pc, #176]	; (11a48 <conn_update+0xd0>)
   11996:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   1199a:	2b00      	cmp	r3, #0
   1199c:	d03e      	beq.n	11a1c <conn_update+0xa4>
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
   1199e:	790b      	ldrb	r3, [r1, #4]
	conn->llcp.conn_upd.win_size =
   119a0:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
   119a4:	f8b1 2005 	ldrh.w	r2, [r1, #5]
   119a8:	f240 43e2 	movw	r3, #1250	; 0x4e2
   119ac:	fb03 f302 	mul.w	r3, r3, r2
	conn->llcp.conn_upd.win_offset_us =
   119b0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
   119b4:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	conn->llcp.conn_upd.interval =
   119b8:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
   119bc:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	conn->llcp.conn_upd.latency =
   119c0:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
   119c4:	f8b1 300b 	ldrh.w	r3, [r1, #11]
	conn->llcp.conn_upd.timeout =
   119c8:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
   119cc:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	conn->llcp.conn_upd.instant =
   119d0:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   119d4:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
   119d8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   119dc:	f36f 0382 	bfc	r3, #2, #1
   119e0:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
   119e4:	2301      	movs	r3, #1
   119e6:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
	conn->llcp_ack--;
   119ea:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   119ee:	3b01      	subs	r3, #1
   119f0:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   119f4:	f890 20c0 	ldrb.w	r2, [r0, #192]	; 0xc0
   119f8:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   119fc:	429a      	cmp	r2, r3
   119fe:	d021      	beq.n	11a44 <conn_update+0xcc>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   11a00:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   11a04:	f003 0307 	and.w	r3, r3, #7
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11a08:	2b04      	cmp	r3, #4
   11a0a:	d015      	beq.n	11a38 <conn_update+0xc0>
	return 0;
   11a0c:	2000      	movs	r0, #0
}
   11a0e:	4770      	bx	lr
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11a10:	4040      	eors	r0, r0
   11a12:	f380 8811 	msr	BASEPRI, r0
   11a16:	f04f 0004 	mov.w	r0, #4
   11a1a:	df02      	svc	2
		LL_ASSERT(conn->role);
   11a1c:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11a20:	2b00      	cmp	r3, #0
   11a22:	da03      	bge.n	11a2c <conn_update+0xb4>
		_radio.conn_upd = conn;
   11a24:	4b08      	ldr	r3, [pc, #32]	; (11a48 <conn_update+0xd0>)
   11a26:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
   11a2a:	e7b8      	b.n	1199e <conn_update+0x26>
		LL_ASSERT(conn->role);
   11a2c:	4040      	eors	r0, r0
   11a2e:	f380 8811 	msr	BASEPRI, r0
   11a32:	f04f 0004 	mov.w	r0, #4
   11a36:	df02      	svc	2
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11a38:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
	return 0;
   11a3c:	2000      	movs	r0, #0
   11a3e:	4770      	bx	lr
		return 1;
   11a40:	2001      	movs	r0, #1
   11a42:	4770      	bx	lr
	return 0;
   11a44:	2000      	movs	r0, #0
   11a46:	4770      	bx	lr
   11a48:	20000fec 	.word	0x20000fec

00011a4c <pause_enc_rsp_send>:
{
   11a4c:	b510      	push	{r4, lr}
   11a4e:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11a50:	480b      	ldr	r0, [pc, #44]	; (11a80 <pause_enc_rsp_send+0x34>)
   11a52:	f7fd fbac 	bl	f1ae <mem_acquire>
	LL_ASSERT(node_tx);
   11a56:	b160      	cbz	r0, 11a72 <pause_enc_rsp_send+0x26>
   11a58:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11a5a:	7903      	ldrb	r3, [r0, #4]
   11a5c:	f043 0303 	orr.w	r3, r3, #3
   11a60:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   11a62:	2301      	movs	r3, #1
   11a64:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11a66:	230b      	movs	r3, #11
   11a68:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   11a6a:	4620      	mov	r0, r4
   11a6c:	f7ff fe32 	bl	116d4 <ctrl_tx_enqueue>
   11a70:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11a72:	4040      	eors	r0, r0
   11a74:	f380 8811 	msr	BASEPRI, r0
   11a78:	f04f 0004 	mov.w	r0, #4
   11a7c:	df02      	svc	2
   11a7e:	bf00      	nop
   11a80:	20001144 	.word	0x20001144

00011a84 <ping_resp_send>:
{
   11a84:	b510      	push	{r4, lr}
   11a86:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11a88:	480b      	ldr	r0, [pc, #44]	; (11ab8 <ping_resp_send+0x34>)
   11a8a:	f7fd fb90 	bl	f1ae <mem_acquire>
	LL_ASSERT(node_tx);
   11a8e:	b160      	cbz	r0, 11aaa <ping_resp_send+0x26>
   11a90:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11a92:	7903      	ldrb	r3, [r0, #4]
   11a94:	f043 0303 	orr.w	r3, r3, #3
   11a98:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   11a9a:	2301      	movs	r3, #1
   11a9c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   11a9e:	2313      	movs	r3, #19
   11aa0:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   11aa2:	4620      	mov	r0, r4
   11aa4:	f7ff fe16 	bl	116d4 <ctrl_tx_enqueue>
   11aa8:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11aaa:	4040      	eors	r0, r0
   11aac:	f380 8811 	msr	BASEPRI, r0
   11ab0:	f04f 0004 	mov.w	r0, #4
   11ab4:	df02      	svc	2
   11ab6:	bf00      	nop
   11ab8:	20001144 	.word	0x20001144

00011abc <length_resp_send>:
{
   11abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11abe:	4604      	mov	r4, r0
   11ac0:	460f      	mov	r7, r1
   11ac2:	4615      	mov	r5, r2
   11ac4:	461e      	mov	r6, r3
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11ac6:	480e      	ldr	r0, [pc, #56]	; (11b00 <length_resp_send+0x44>)
   11ac8:	f7fd fb71 	bl	f1ae <mem_acquire>
	LL_ASSERT(node_tx);
   11acc:	b190      	cbz	r0, 11af4 <length_resp_send+0x38>
   11ace:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11ad0:	7903      	ldrb	r3, [r0, #4]
   11ad2:	f043 0303 	orr.w	r3, r3, #3
   11ad6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11ad8:	2309      	movs	r3, #9
   11ada:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11adc:	2315      	movs	r3, #21
   11ade:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
   11ae0:	8107      	strh	r7, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
   11ae2:	8186      	strh	r6, [r0, #12]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
   11ae4:	8145      	strh	r5, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
   11ae6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   11aea:	81c3      	strh	r3, [r0, #14]
	ctrl_tx_enqueue(conn, node_tx);
   11aec:	4620      	mov	r0, r4
   11aee:	f7ff fdf1 	bl	116d4 <ctrl_tx_enqueue>
   11af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(node_tx);
   11af4:	4040      	eors	r0, r0
   11af6:	f380 8811 	msr	BASEPRI, r0
   11afa:	f04f 0004 	mov.w	r0, #4
   11afe:	df02      	svc	2
   11b00:	20001144 	.word	0x20001144

00011b04 <reject_ext_ind_send>:
{
   11b04:	b570      	push	{r4, r5, r6, lr}
   11b06:	4604      	mov	r4, r0
   11b08:	460e      	mov	r6, r1
   11b0a:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11b0c:	480c      	ldr	r0, [pc, #48]	; (11b40 <reject_ext_ind_send+0x3c>)
   11b0e:	f7fd fb4e 	bl	f1ae <mem_acquire>
	LL_ASSERT(node_tx);
   11b12:	b170      	cbz	r0, 11b32 <reject_ext_ind_send+0x2e>
   11b14:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11b16:	7903      	ldrb	r3, [r0, #4]
   11b18:	f043 0303 	orr.w	r3, r3, #3
   11b1c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11b1e:	2303      	movs	r3, #3
   11b20:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11b22:	2311      	movs	r3, #17
   11b24:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
   11b26:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
   11b28:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   11b2a:	4620      	mov	r0, r4
   11b2c:	f7ff fdd2 	bl	116d4 <ctrl_tx_enqueue>
   11b30:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(node_tx);
   11b32:	4040      	eors	r0, r0
   11b34:	f380 8811 	msr	BASEPRI, r0
   11b38:	f04f 0004 	mov.w	r0, #4
   11b3c:	df02      	svc	2
   11b3e:	bf00      	nop
   11b40:	20001144 	.word	0x20001144

00011b44 <phy_rsp_send>:
{
   11b44:	b510      	push	{r4, lr}
   11b46:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11b48:	4810      	ldr	r0, [pc, #64]	; (11b8c <phy_rsp_send+0x48>)
   11b4a:	f7fd fb30 	bl	f1ae <mem_acquire>
	LL_ASSERT(node_tx);
   11b4e:	b1b0      	cbz	r0, 11b7e <phy_rsp_send+0x3a>
   11b50:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11b52:	7903      	ldrb	r3, [r0, #4]
   11b54:	f043 0303 	orr.w	r3, r3, #3
   11b58:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11b5a:	2303      	movs	r3, #3
   11b5c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   11b5e:	2317      	movs	r3, #23
   11b60:	71c3      	strb	r3, [r0, #7]
		conn->phy_pref_tx;
   11b62:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   11b66:	f3c3 0302 	ubfx	r3, r3, #0, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
   11b6a:	7203      	strb	r3, [r0, #8]
		conn->phy_pref_rx;
   11b6c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   11b70:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
   11b74:	7243      	strb	r3, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   11b76:	4620      	mov	r0, r4
   11b78:	f7ff fdac 	bl	116d4 <ctrl_tx_enqueue>
   11b7c:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11b7e:	4040      	eors	r0, r0
   11b80:	f380 8811 	msr	BASEPRI, r0
   11b84:	f04f 0004 	mov.w	r0, #4
   11b88:	df02      	svc	2
   11b8a:	bf00      	nop
   11b8c:	20001144 	.word	0x20001144

00011b90 <unknown_rsp_send>:
{
   11b90:	b538      	push	{r3, r4, r5, lr}
   11b92:	4604      	mov	r4, r0
   11b94:	460d      	mov	r5, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11b96:	480c      	ldr	r0, [pc, #48]	; (11bc8 <unknown_rsp_send+0x38>)
   11b98:	f7fd fb09 	bl	f1ae <mem_acquire>
	LL_ASSERT(node_tx);
   11b9c:	b168      	cbz	r0, 11bba <unknown_rsp_send+0x2a>
   11b9e:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11ba0:	7903      	ldrb	r3, [r0, #4]
   11ba2:	f043 0303 	orr.w	r3, r3, #3
   11ba6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   11ba8:	2302      	movs	r3, #2
   11baa:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   11bac:	2307      	movs	r3, #7
   11bae:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;
   11bb0:	7205      	strb	r5, [r0, #8]
	ctrl_tx_enqueue(conn, node_tx);
   11bb2:	4620      	mov	r0, r4
   11bb4:	f7ff fd8e 	bl	116d4 <ctrl_tx_enqueue>
   11bb8:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   11bba:	4040      	eors	r0, r0
   11bbc:	f380 8811 	msr	BASEPRI, r0
   11bc0:	f04f 0004 	mov.w	r0, #4
   11bc4:	df02      	svc	2
   11bc6:	bf00      	nop
   11bc8:	20001144 	.word	0x20001144

00011bcc <ticker_update_adv_assert>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   11bcc:	b120      	cbz	r0, 11bd8 <ticker_update_adv_assert+0xc>
   11bce:	4b06      	ldr	r3, [pc, #24]	; (11be8 <ticker_update_adv_assert+0x1c>)
   11bd0:	7b9b      	ldrb	r3, [r3, #14]
   11bd2:	b2db      	uxtb	r3, r3
   11bd4:	2b05      	cmp	r3, #5
   11bd6:	d100      	bne.n	11bda <ticker_update_adv_assert+0xe>
   11bd8:	4770      	bx	lr
   11bda:	4040      	eors	r0, r0
   11bdc:	f380 8811 	msr	BASEPRI, r0
   11be0:	f04f 0004 	mov.w	r0, #4
   11be4:	df02      	svc	2
   11be6:	bf00      	nop
   11be8:	20000fec 	.word	0x20000fec

00011bec <ticker_update_slave_assert>:
	u8_t ticker_id = (u32_t)params & 0xFF;
   11bec:	b2c9      	uxtb	r1, r1
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   11bee:	b120      	cbz	r0, 11bfa <ticker_update_slave_assert+0xe>
   11bf0:	4b05      	ldr	r3, [pc, #20]	; (11c08 <ticker_update_slave_assert+0x1c>)
   11bf2:	7b9b      	ldrb	r3, [r3, #14]
   11bf4:	b2db      	uxtb	r3, r3
   11bf6:	4299      	cmp	r1, r3
   11bf8:	d100      	bne.n	11bfc <ticker_update_slave_assert+0x10>
   11bfa:	4770      	bx	lr
   11bfc:	4040      	eors	r0, r0
   11bfe:	f380 8811 	msr	BASEPRI, r0
   11c02:	f04f 0004 	mov.w	r0, #4
   11c06:	df02      	svc	2
   11c08:	20000fec 	.word	0x20000fec

00011c0c <ticker_op_latency_cancelled>:

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
	struct connection *conn;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   11c0c:	b930      	cbnz	r0, 11c1c <ticker_op_latency_cancelled+0x10>

	conn = (struct connection *)params;
	conn->slave.latency_cancel = 0;
   11c0e:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   11c12:	f36f 0341 	bfc	r3, #1, #1
   11c16:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
   11c1a:	4770      	bx	lr
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   11c1c:	4040      	eors	r0, r0
   11c1e:	f380 8811 	msr	BASEPRI, r0
   11c22:	f04f 0004 	mov.w	r0, #4
   11c26:	df02      	svc	2

00011c28 <packet_rx_allocate>:
{
   11c28:	b570      	push	{r4, r5, r6, lr}
	if (max > _radio.link_rx_data_quota) {
   11c2a:	4b22      	ldr	r3, [pc, #136]	; (11cb4 <packet_rx_allocate+0x8c>)
   11c2c:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
   11c30:	4283      	cmp	r3, r0
   11c32:	d300      	bcc.n	11c36 <packet_rx_allocate+0xe>
   11c34:	4603      	mov	r3, r0
	acquire = _radio.packet_rx_acquire + 1;
   11c36:	4a1f      	ldr	r2, [pc, #124]	; (11cb4 <packet_rx_allocate+0x8c>)
   11c38:	f892 413e 	ldrb.w	r4, [r2, #318]	; 0x13e
   11c3c:	3401      	adds	r4, #1
   11c3e:	b2e4      	uxtb	r4, r4
	if (acquire == _radio.packet_rx_count) {
   11c40:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   11c44:	4294      	cmp	r4, r2
   11c46:	d10d      	bne.n	11c64 <packet_rx_allocate+0x3c>
		acquire = 0;
   11c48:	2400      	movs	r4, #0
   11c4a:	e00b      	b.n	11c64 <packet_rx_allocate+0x3c>
			mem_release(link, &_radio.link_rx_free);
   11c4c:	491a      	ldr	r1, [pc, #104]	; (11cb8 <packet_rx_allocate+0x90>)
   11c4e:	4630      	mov	r0, r6
   11c50:	f7fd fac9 	bl	f1e6 <mem_release>
			break;
   11c54:	bd70      	pop	{r4, r5, r6, pc}
		_radio.link_rx_data_quota--;
   11c56:	4a17      	ldr	r2, [pc, #92]	; (11cb4 <packet_rx_allocate+0x8c>)
   11c58:	f892 3150 	ldrb.w	r3, [r2, #336]	; 0x150
   11c5c:	3b01      	subs	r3, #1
   11c5e:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
	while ((max--) && (acquire != _radio.packet_rx_last)) {
   11c62:	462b      	mov	r3, r5
   11c64:	1e5d      	subs	r5, r3, #1
   11c66:	b2ed      	uxtb	r5, r5
   11c68:	b313      	cbz	r3, 11cb0 <packet_rx_allocate+0x88>
   11c6a:	4b12      	ldr	r3, [pc, #72]	; (11cb4 <packet_rx_allocate+0x8c>)
   11c6c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   11c70:	b2db      	uxtb	r3, r3
   11c72:	429c      	cmp	r4, r3
   11c74:	d01c      	beq.n	11cb0 <packet_rx_allocate+0x88>
		link = mem_acquire(&_radio.link_rx_free);
   11c76:	4810      	ldr	r0, [pc, #64]	; (11cb8 <packet_rx_allocate+0x90>)
   11c78:	f7fd fa99 	bl	f1ae <mem_acquire>
		if (!link) {
   11c7c:	4606      	mov	r6, r0
   11c7e:	b1b8      	cbz	r0, 11cb0 <packet_rx_allocate+0x88>
		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   11c80:	480e      	ldr	r0, [pc, #56]	; (11cbc <packet_rx_allocate+0x94>)
   11c82:	f7fd fa94 	bl	f1ae <mem_acquire>
		if (!radio_pdu_node_rx) {
   11c86:	4602      	mov	r2, r0
   11c88:	2800      	cmp	r0, #0
   11c8a:	d0df      	beq.n	11c4c <packet_rx_allocate+0x24>
		radio_pdu_node_rx->hdr.onion.link = link;
   11c8c:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
   11c8e:	4b09      	ldr	r3, [pc, #36]	; (11cb4 <packet_rx_allocate+0x8c>)
   11c90:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   11c94:	f893 013e 	ldrb.w	r0, [r3, #318]	; 0x13e
   11c98:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		_radio.packet_rx_acquire = acquire;
   11c9c:	f883 413e 	strb.w	r4, [r3, #318]	; 0x13e
		acquire = _radio.packet_rx_acquire + 1;
   11ca0:	3401      	adds	r4, #1
   11ca2:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
   11ca4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
   11ca8:	429c      	cmp	r4, r3
   11caa:	d1d4      	bne.n	11c56 <packet_rx_allocate+0x2e>
			acquire = 0;
   11cac:	2400      	movs	r4, #0
   11cae:	e7d2      	b.n	11c56 <packet_rx_allocate+0x2e>
   11cb0:	bd70      	pop	{r4, r5, r6, pc}
   11cb2:	bf00      	nop
   11cb4:	20000fec 	.word	0x20000fec
   11cb8:	20001130 	.word	0x20001130
   11cbc:	20001118 	.word	0x20001118

00011cc0 <tx_cmplt_get>:
{
   11cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_first = *first;
   11cc4:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
   11cc6:	4294      	cmp	r4, r2
   11cc8:	d043      	beq.n	11d52 <tx_cmplt_get+0x92>
   11cca:	4690      	mov	r8, r2
   11ccc:	4689      	mov	r9, r1
   11cce:	4607      	mov	r7, r0
	*handle = _radio.pkt_release[_first].handle;
   11cd0:	4b21      	ldr	r3, [pc, #132]	; (11d58 <tx_cmplt_get+0x98>)
   11cd2:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   11cd6:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   11cda:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
   11cdc:	2600      	movs	r6, #0
   11cde:	e00f      	b.n	11d00 <tx_cmplt_get+0x40>
			_radio.pkt_release[_first].node_tx =
   11ce0:	2301      	movs	r3, #1
   11ce2:	606b      	str	r3, [r5, #4]
			cmplt++;
   11ce4:	441e      	add	r6, r3
   11ce6:	b2f6      	uxtb	r6, r6
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
   11ce8:	f030 0303 	bics.w	r3, r0, #3
   11cec:	d126      	bne.n	11d3c <tx_cmplt_get+0x7c>
		_first = _first + 1;
   11cee:	3401      	adds	r4, #1
   11cf0:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
   11cf2:	4b19      	ldr	r3, [pc, #100]	; (11d58 <tx_cmplt_get+0x98>)
   11cf4:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   11cf8:	429c      	cmp	r4, r3
   11cfa:	d023      	beq.n	11d44 <tx_cmplt_get+0x84>
	} while (_first != last);
   11cfc:	4544      	cmp	r4, r8
   11cfe:	d023      	beq.n	11d48 <tx_cmplt_get+0x88>
		if (*handle != _radio.pkt_release[_first].handle) {
   11d00:	883a      	ldrh	r2, [r7, #0]
   11d02:	4b15      	ldr	r3, [pc, #84]	; (11d58 <tx_cmplt_get+0x98>)
   11d04:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   11d08:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   11d0c:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   11d10:	429a      	cmp	r2, r3
   11d12:	d119      	bne.n	11d48 <tx_cmplt_get+0x88>
		node_tx = _radio.pkt_release[_first].node_tx;
   11d14:	6868      	ldr	r0, [r5, #4]
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
   11d16:	1d03      	adds	r3, r0, #4
		if ((!node_tx) || (node_tx == (struct radio_pdu_node_tx *)1) ||
   11d18:	2801      	cmp	r0, #1
   11d1a:	d9e1      	bls.n	11ce0 <tx_cmplt_get+0x20>
   11d1c:	f030 0203 	bics.w	r2, r0, #3
   11d20:	d009      	beq.n	11d36 <tx_cmplt_get+0x76>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
   11d22:	b143      	cbz	r3, 11d36 <tx_cmplt_get+0x76>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   11d24:	7943      	ldrb	r3, [r0, #5]
   11d26:	b133      	cbz	r3, 11d36 <tx_cmplt_get+0x76>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
   11d28:	7903      	ldrb	r3, [r0, #4]
   11d2a:	f003 0303 	and.w	r3, r3, #3
   11d2e:	3b01      	subs	r3, #1
   11d30:	b2db      	uxtb	r3, r3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   11d32:	2b01      	cmp	r3, #1
   11d34:	d9d4      	bls.n	11ce0 <tx_cmplt_get+0x20>
			_radio.pkt_release[_first].node_tx =
   11d36:	2302      	movs	r3, #2
   11d38:	606b      	str	r3, [r5, #4]
   11d3a:	e7d5      	b.n	11ce8 <tx_cmplt_get+0x28>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   11d3c:	4907      	ldr	r1, [pc, #28]	; (11d5c <tx_cmplt_get+0x9c>)
   11d3e:	f7fd fa52 	bl	f1e6 <mem_release>
   11d42:	e7d4      	b.n	11cee <tx_cmplt_get+0x2e>
			_first = 0;
   11d44:	2400      	movs	r4, #0
   11d46:	e7d9      	b.n	11cfc <tx_cmplt_get+0x3c>
	*first = _first;
   11d48:	f889 4000 	strb.w	r4, [r9]
}
   11d4c:	4630      	mov	r0, r6
   11d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
   11d52:	2600      	movs	r6, #0
   11d54:	e7fa      	b.n	11d4c <tx_cmplt_get+0x8c>
   11d56:	bf00      	nop
   11d58:	20000fec 	.word	0x20000fec
   11d5c:	2000114c 	.word	0x2000114c

00011d60 <ticker_job_disable>:
{
   11d60:	b508      	push	{r3, lr}
	if (_radio.state != STATE_NONE) {
   11d62:	4b05      	ldr	r3, [pc, #20]	; (11d78 <ticker_job_disable+0x18>)
   11d64:	7c1b      	ldrb	r3, [r3, #16]
   11d66:	b903      	cbnz	r3, 11d6a <ticker_job_disable+0xa>
   11d68:	bd08      	pop	{r3, pc}
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   11d6a:	2200      	movs	r2, #0
   11d6c:	2101      	movs	r1, #1
   11d6e:	4608      	mov	r0, r1
   11d70:	f7fd f89e 	bl	eeb0 <mayfly_enable>
}
   11d74:	e7f8      	b.n	11d68 <ticker_job_disable+0x8>
   11d76:	bf00      	nop
   11d78:	20000fec 	.word	0x20000fec

00011d7c <connection_get>:
	if (handle < _radio.connection_count) {
   11d7c:	4b0d      	ldr	r3, [pc, #52]	; (11db4 <connection_get+0x38>)
   11d7e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   11d82:	4283      	cmp	r3, r0
   11d84:	d910      	bls.n	11da8 <connection_get+0x2c>
{
   11d86:	b510      	push	{r4, lr}
   11d88:	4604      	mov	r4, r0
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
   11d8a:	4602      	mov	r2, r0
   11d8c:	f44f 71aa 	mov.w	r1, #340	; 0x154
   11d90:	4b08      	ldr	r3, [pc, #32]	; (11db4 <connection_get+0x38>)
   11d92:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   11d96:	f7fd fa47 	bl	f228 <mem_get>
		if ((conn) && (conn->handle == handle)) {
   11d9a:	4603      	mov	r3, r0
   11d9c:	b110      	cbz	r0, 11da4 <connection_get+0x28>
   11d9e:	8c02      	ldrh	r2, [r0, #32]
   11da0:	4294      	cmp	r4, r2
   11da2:	d104      	bne.n	11dae <connection_get+0x32>
}
   11da4:	4618      	mov	r0, r3
   11da6:	bd10      	pop	{r4, pc}
	return 0;
   11da8:	2300      	movs	r3, #0
}
   11daa:	4618      	mov	r0, r3
   11dac:	4770      	bx	lr
	return 0;
   11dae:	2300      	movs	r3, #0
   11db0:	e7f8      	b.n	11da4 <connection_get+0x28>
   11db2:	bf00      	nop
   11db4:	20000fec 	.word	0x20000fec

00011db8 <role_disable>:
{
   11db8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11dba:	b087      	sub	sp, #28
   11dbc:	4604      	mov	r4, r0
   11dbe:	460d      	mov	r5, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11dc0:	2302      	movs	r3, #2
   11dc2:	9305      	str	r3, [sp, #20]
	switch (ticker_id_primary) {
   11dc4:	2805      	cmp	r0, #5
   11dc6:	d00d      	beq.n	11de4 <role_disable+0x2c>
   11dc8:	2806      	cmp	r0, #6
   11dca:	d02a      	beq.n	11e22 <role_disable+0x6a>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   11dcc:	2806      	cmp	r0, #6
   11dce:	d957      	bls.n	11e80 <role_disable+0xc8>
			conn_handle = ticker_id_primary -
   11dd0:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
   11dd2:	b280      	uxth	r0, r0
   11dd4:	f7ff ffd2 	bl	11d7c <connection_get>
			if (!conn) {
   11dd8:	2800      	cmp	r0, #0
   11dda:	f000 8153 	beq.w	12084 <role_disable+0x2cc>
			ticks_xtal_to_start =
   11dde:	6806      	ldr	r6, [r0, #0]
			ticks_active_to_start =
   11de0:	6847      	ldr	r7, [r0, #4]
		break;
   11de2:	e023      	b.n	11e2c <role_disable+0x74>
		ticks_xtal_to_start =
   11de4:	4b9f      	ldr	r3, [pc, #636]	; (12064 <role_disable+0x2ac>)
   11de6:	695e      	ldr	r6, [r3, #20]
		ticks_active_to_start =
   11de8:	699f      	ldr	r7, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11dea:	ab05      	add	r3, sp, #20
   11dec:	9300      	str	r3, [sp, #0]
   11dee:	4b9e      	ldr	r3, [pc, #632]	; (12068 <role_disable+0x2b0>)
   11df0:	460a      	mov	r2, r1
   11df2:	2103      	movs	r1, #3
   11df4:	2000      	movs	r0, #0
   11df6:	f7fe ff47 	bl	10c88 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   11dfa:	2802      	cmp	r0, #2
   11dfc:	d00d      	beq.n	11e1a <role_disable+0x62>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   11dfe:	9b05      	ldr	r3, [sp, #20]
   11e00:	b1a3      	cbz	r3, 11e2c <role_disable+0x74>
   11e02:	9b05      	ldr	r3, [sp, #20]
   11e04:	2b01      	cmp	r3, #1
   11e06:	d011      	beq.n	11e2c <role_disable+0x74>
   11e08:	4040      	eors	r0, r0
   11e0a:	f380 8811 	msr	BASEPRI, r0
   11e0e:	f04f 0004 	mov.w	r0, #4
   11e12:	df02      	svc	2
   11e14:	bf20      	wfe
  __ASM volatile ("sev");
   11e16:	bf40      	sev
  __ASM volatile ("wfe");
   11e18:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   11e1a:	9b05      	ldr	r3, [sp, #20]
   11e1c:	2b02      	cmp	r3, #2
   11e1e:	d0f9      	beq.n	11e14 <role_disable+0x5c>
   11e20:	e7ed      	b.n	11dfe <role_disable+0x46>
		ticks_xtal_to_start =
   11e22:	4b90      	ldr	r3, [pc, #576]	; (12064 <role_disable+0x2ac>)
   11e24:	f8d3 60cc 	ldr.w	r6, [r3, #204]	; 0xcc
		ticks_active_to_start =
   11e28:	f8d3 70d0 	ldr.w	r7, [r3, #208]	; 0xd0
	LL_ASSERT(!_radio.ticker_id_stop);
   11e2c:	4b8d      	ldr	r3, [pc, #564]	; (12064 <role_disable+0x2ac>)
   11e2e:	7b9b      	ldrb	r3, [r3, #14]
   11e30:	2b00      	cmp	r3, #0
   11e32:	d12b      	bne.n	11e8c <role_disable+0xd4>
	_radio.ticker_id_stop = ticker_id_primary;
   11e34:	4b8b      	ldr	r3, [pc, #556]	; (12064 <role_disable+0x2ac>)
   11e36:	739c      	strb	r4, [r3, #14]
	ret_cb = TICKER_STATUS_BUSY;
   11e38:	ab06      	add	r3, sp, #24
   11e3a:	2202      	movs	r2, #2
   11e3c:	f843 2d04 	str.w	r2, [r3, #-4]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11e40:	9300      	str	r3, [sp, #0]
   11e42:	4b89      	ldr	r3, [pc, #548]	; (12068 <role_disable+0x2b0>)
   11e44:	4622      	mov	r2, r4
   11e46:	2103      	movs	r1, #3
   11e48:	2000      	movs	r0, #0
   11e4a:	f7fe ff1d 	bl	10c88 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   11e4e:	2802      	cmp	r0, #2
   11e50:	d022      	beq.n	11e98 <role_disable+0xe0>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   11e52:	9b05      	ldr	r3, [sp, #20]
   11e54:	b973      	cbnz	r3, 11e74 <role_disable+0xbc>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
   11e56:	4b83      	ldr	r3, [pc, #524]	; (12064 <role_disable+0x2ac>)
   11e58:	7b1b      	ldrb	r3, [r3, #12]
   11e5a:	b2db      	uxtb	r3, r3
   11e5c:	429c      	cmp	r4, r3
   11e5e:	d02d      	beq.n	11ebc <role_disable+0x104>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
   11e60:	4b80      	ldr	r3, [pc, #512]	; (12064 <role_disable+0x2ac>)
   11e62:	7b5b      	ldrb	r3, [r3, #13]
   11e64:	b2db      	uxtb	r3, r3
   11e66:	429c      	cmp	r4, r3
   11e68:	d028      	beq.n	11ebc <role_disable+0x104>
	if (!_radio.ticker_id_stop) {
   11e6a:	4b7e      	ldr	r3, [pc, #504]	; (12064 <role_disable+0x2ac>)
   11e6c:	7b9b      	ldrb	r3, [r3, #14]
   11e6e:	b90b      	cbnz	r3, 11e74 <role_disable+0xbc>
		ret_cb = TICKER_STATUS_FAILURE;
   11e70:	2301      	movs	r3, #1
   11e72:	9305      	str	r3, [sp, #20]
	_radio.ticker_id_stop = 0;
   11e74:	2200      	movs	r2, #0
   11e76:	4b7b      	ldr	r3, [pc, #492]	; (12064 <role_disable+0x2ac>)
   11e78:	739a      	strb	r2, [r3, #14]
	return ret_cb;
   11e7a:	9805      	ldr	r0, [sp, #20]
}
   11e7c:	b007      	add	sp, #28
   11e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LL_ASSERT(0);
   11e80:	4040      	eors	r0, r0
   11e82:	f380 8811 	msr	BASEPRI, r0
   11e86:	f04f 0004 	mov.w	r0, #4
   11e8a:	df02      	svc	2
	LL_ASSERT(!_radio.ticker_id_stop);
   11e8c:	4040      	eors	r0, r0
   11e8e:	f380 8811 	msr	BASEPRI, r0
   11e92:	f04f 0004 	mov.w	r0, #4
   11e96:	df02      	svc	2
		if (_radio.ticker_id_event == ticker_id_primary) {
   11e98:	4b72      	ldr	r3, [pc, #456]	; (12064 <role_disable+0x2ac>)
   11e9a:	7b5b      	ldrb	r3, [r3, #13]
   11e9c:	b2db      	uxtb	r3, r3
   11e9e:	429c      	cmp	r4, r3
   11ea0:	d108      	bne.n	11eb4 <role_disable+0xfc>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11ea2:	2201      	movs	r2, #1
   11ea4:	4611      	mov	r1, r2
   11ea6:	2003      	movs	r0, #3
   11ea8:	f7fd f802 	bl	eeb0 <mayfly_enable>
   11eac:	e002      	b.n	11eb4 <role_disable+0xfc>
   11eae:	bf20      	wfe
  __ASM volatile ("sev");
   11eb0:	bf40      	sev
  __ASM volatile ("wfe");
   11eb2:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   11eb4:	9b05      	ldr	r3, [sp, #20]
   11eb6:	2b02      	cmp	r3, #2
   11eb8:	d0f9      	beq.n	11eae <role_disable+0xf6>
   11eba:	e7ca      	b.n	11e52 <role_disable+0x9a>
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11ebc:	ab06      	add	r3, sp, #24
   11ebe:	2202      	movs	r2, #2
   11ec0:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11ec4:	9300      	str	r3, [sp, #0]
   11ec6:	4b68      	ldr	r3, [pc, #416]	; (12068 <role_disable+0x2b0>)
   11ec8:	2200      	movs	r2, #0
   11eca:	2103      	movs	r1, #3
   11ecc:	4610      	mov	r0, r2
   11ece:	f7fe fedb 	bl	10c88 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   11ed2:	2802      	cmp	r0, #2
   11ed4:	d029      	beq.n	11f2a <role_disable+0x172>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   11ed6:	9b02      	ldr	r3, [sp, #8]
   11ed8:	2b00      	cmp	r3, #0
   11eda:	d17c      	bne.n	11fd6 <role_disable+0x21e>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11edc:	2302      	movs	r3, #2
   11ede:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   11ee0:	4b60      	ldr	r3, [pc, #384]	; (12064 <role_disable+0x2ac>)
   11ee2:	7b1b      	ldrb	r3, [r3, #12]
   11ee4:	2b00      	cmp	r3, #0
   11ee6:	d02e      	beq.n	11f46 <role_disable+0x18e>
		_radio.ticker_id_prepare = 0;
   11ee8:	2000      	movs	r0, #0
   11eea:	4b5e      	ldr	r3, [pc, #376]	; (12064 <role_disable+0x2ac>)
   11eec:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11eee:	ab03      	add	r3, sp, #12
   11ef0:	9300      	str	r3, [sp, #0]
   11ef2:	4b5d      	ldr	r3, [pc, #372]	; (12068 <role_disable+0x2b0>)
   11ef4:	2201      	movs	r2, #1
   11ef6:	2103      	movs	r1, #3
   11ef8:	f7fe fec6 	bl	10c88 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   11efc:	2802      	cmp	r0, #2
   11efe:	d028      	beq.n	11f52 <role_disable+0x19a>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   11f00:	9b03      	ldr	r3, [sp, #12]
   11f02:	2b00      	cmp	r3, #0
   11f04:	d142      	bne.n	11f8c <role_disable+0x1d4>
			ticks_xtal_to_start &= ~BIT(31);
   11f06:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
   11f0a:	42b7      	cmp	r7, r6
   11f0c:	d92f      	bls.n	11f6e <role_disable+0x1b6>
				retval = mayfly_enqueue(
   11f0e:	4b57      	ldr	r3, [pc, #348]	; (1206c <role_disable+0x2b4>)
   11f10:	2200      	movs	r2, #0
   11f12:	4611      	mov	r1, r2
   11f14:	2003      	movs	r0, #3
   11f16:	f7fd f809 	bl	ef2c <mayfly_enqueue>
				LL_ASSERT(!retval);
   11f1a:	2800      	cmp	r0, #0
   11f1c:	d0a5      	beq.n	11e6a <role_disable+0xb2>
   11f1e:	4040      	eors	r0, r0
   11f20:	f380 8811 	msr	BASEPRI, r0
   11f24:	f04f 0004 	mov.w	r0, #4
   11f28:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11f2a:	2201      	movs	r2, #1
   11f2c:	4611      	mov	r1, r2
   11f2e:	2003      	movs	r0, #3
   11f30:	f7fc ffbe 	bl	eeb0 <mayfly_enable>
		LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   11f34:	9b02      	ldr	r3, [sp, #8]
   11f36:	2b02      	cmp	r3, #2
   11f38:	d1cd      	bne.n	11ed6 <role_disable+0x11e>
   11f3a:	4040      	eors	r0, r0
   11f3c:	f380 8811 	msr	BASEPRI, r0
   11f40:	f04f 0004 	mov.w	r0, #4
   11f44:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare);
   11f46:	4040      	eors	r0, r0
   11f48:	f380 8811 	msr	BASEPRI, r0
   11f4c:	f04f 0004 	mov.w	r0, #4
   11f50:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11f52:	2201      	movs	r2, #1
   11f54:	4611      	mov	r1, r2
   11f56:	2003      	movs	r0, #3
   11f58:	f7fc ffaa 	bl	eeb0 <mayfly_enable>
			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   11f5c:	9b03      	ldr	r3, [sp, #12]
   11f5e:	2b02      	cmp	r3, #2
   11f60:	d1ce      	bne.n	11f00 <role_disable+0x148>
   11f62:	4040      	eors	r0, r0
   11f64:	f380 8811 	msr	BASEPRI, r0
   11f68:	f04f 0004 	mov.w	r0, #4
   11f6c:	df02      	svc	2
				retval = mayfly_enqueue(
   11f6e:	4b40      	ldr	r3, [pc, #256]	; (12070 <role_disable+0x2b8>)
   11f70:	2200      	movs	r2, #0
   11f72:	4611      	mov	r1, r2
   11f74:	2003      	movs	r0, #3
   11f76:	f7fc ffd9 	bl	ef2c <mayfly_enqueue>
				LL_ASSERT(!retval);
   11f7a:	2800      	cmp	r0, #0
   11f7c:	f43f af75 	beq.w	11e6a <role_disable+0xb2>
   11f80:	4040      	eors	r0, r0
   11f82:	f380 8811 	msr	BASEPRI, r0
   11f86:	f04f 0004 	mov.w	r0, #4
   11f8a:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   11f8c:	9b03      	ldr	r3, [sp, #12]
   11f8e:	2b01      	cmp	r3, #1
   11f90:	d11b      	bne.n	11fca <role_disable+0x212>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   11f92:	4b36      	ldr	r3, [pc, #216]	; (1206c <role_disable+0x2b4>)
   11f94:	2200      	movs	r2, #0
   11f96:	4611      	mov	r1, r2
   11f98:	2003      	movs	r0, #3
   11f9a:	f7fc ffc7 	bl	ef2c <mayfly_enqueue>
			LL_ASSERT(!retval);
   11f9e:	b970      	cbnz	r0, 11fbe <role_disable+0x206>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   11fa0:	4b33      	ldr	r3, [pc, #204]	; (12070 <role_disable+0x2b8>)
   11fa2:	2200      	movs	r2, #0
   11fa4:	4611      	mov	r1, r2
   11fa6:	2003      	movs	r0, #3
   11fa8:	f7fc ffc0 	bl	ef2c <mayfly_enqueue>
			LL_ASSERT(!retval);
   11fac:	2800      	cmp	r0, #0
   11fae:	f43f af5c 	beq.w	11e6a <role_disable+0xb2>
   11fb2:	4040      	eors	r0, r0
   11fb4:	f380 8811 	msr	BASEPRI, r0
   11fb8:	f04f 0004 	mov.w	r0, #4
   11fbc:	df02      	svc	2
			LL_ASSERT(!retval);
   11fbe:	4040      	eors	r0, r0
   11fc0:	f380 8811 	msr	BASEPRI, r0
   11fc4:	f04f 0004 	mov.w	r0, #4
   11fc8:	df02      	svc	2
			LL_ASSERT(0);
   11fca:	4040      	eors	r0, r0
   11fcc:	f380 8811 	msr	BASEPRI, r0
   11fd0:	f04f 0004 	mov.w	r0, #4
   11fd4:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   11fd6:	9b02      	ldr	r3, [sp, #8]
   11fd8:	2b01      	cmp	r3, #1
   11fda:	d14d      	bne.n	12078 <role_disable+0x2c0>
		if (ticker_id_stop != TICKER_NULL) {
   11fdc:	2dff      	cmp	r5, #255	; 0xff
   11fde:	d011      	beq.n	12004 <role_disable+0x24c>
			u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11fe0:	ab06      	add	r3, sp, #24
   11fe2:	2202      	movs	r2, #2
   11fe4:	f843 2d08 	str.w	r2, [r3, #-8]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11fe8:	9300      	str	r3, [sp, #0]
   11fea:	4b1f      	ldr	r3, [pc, #124]	; (12068 <role_disable+0x2b0>)
   11fec:	462a      	mov	r2, r5
   11fee:	2103      	movs	r1, #3
   11ff0:	2000      	movs	r0, #0
   11ff2:	f7fe fe49 	bl	10c88 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
   11ff6:	2802      	cmp	r0, #2
   11ff8:	d018      	beq.n	1202c <role_disable+0x274>
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   11ffa:	9b04      	ldr	r3, [sp, #16]
   11ffc:	b113      	cbz	r3, 12004 <role_disable+0x24c>
   11ffe:	9b04      	ldr	r3, [sp, #16]
   12000:	2b01      	cmp	r3, #1
   12002:	d121      	bne.n	12048 <role_disable+0x290>
		if (_radio.role != ROLE_NONE) {
   12004:	4b17      	ldr	r3, [pc, #92]	; (12064 <role_disable+0x2ac>)
   12006:	7bdb      	ldrb	r3, [r3, #15]
   12008:	2b00      	cmp	r3, #0
   1200a:	f43f af2e 	beq.w	11e6a <role_disable+0xb2>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   1200e:	4b19      	ldr	r3, [pc, #100]	; (12074 <role_disable+0x2bc>)
   12010:	2204      	movs	r2, #4
   12012:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   12014:	2200      	movs	r2, #0
   12016:	4611      	mov	r1, r2
   12018:	2003      	movs	r0, #3
   1201a:	f7fc ff87 	bl	ef2c <mayfly_enqueue>
			LL_ASSERT(!retval);
   1201e:	b1e0      	cbz	r0, 1205a <role_disable+0x2a2>
   12020:	4040      	eors	r0, r0
   12022:	f380 8811 	msr	BASEPRI, r0
   12026:	f04f 0004 	mov.w	r0, #4
   1202a:	df02      	svc	2
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
   1202c:	2201      	movs	r2, #1
   1202e:	4611      	mov	r1, r2
   12030:	2003      	movs	r0, #3
   12032:	f7fc ff3d 	bl	eeb0 <mayfly_enable>
				LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   12036:	9b04      	ldr	r3, [sp, #16]
   12038:	2b02      	cmp	r3, #2
   1203a:	d1de      	bne.n	11ffa <role_disable+0x242>
   1203c:	4040      	eors	r0, r0
   1203e:	f380 8811 	msr	BASEPRI, r0
   12042:	f04f 0004 	mov.w	r0, #4
   12046:	df02      	svc	2
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   12048:	4040      	eors	r0, r0
   1204a:	f380 8811 	msr	BASEPRI, r0
   1204e:	f04f 0004 	mov.w	r0, #4
   12052:	df02      	svc	2
   12054:	bf20      	wfe
  __ASM volatile ("sev");
   12056:	bf40      	sev
  __ASM volatile ("wfe");
   12058:	bf20      	wfe
			while (_radio.role != ROLE_NONE) {
   1205a:	4b02      	ldr	r3, [pc, #8]	; (12064 <role_disable+0x2ac>)
   1205c:	7bdb      	ldrb	r3, [r3, #15]
   1205e:	2b00      	cmp	r3, #0
   12060:	d1f8      	bne.n	12054 <role_disable+0x29c>
   12062:	e702      	b.n	11e6a <role_disable+0xb2>
   12064:	20000fec 	.word	0x20000fec
   12068:	00011535 	.word	0x00011535
   1206c:	2000bd50 	.word	0x2000bd50
   12070:	2000be10 	.word	0x2000be10
   12074:	2000bd80 	.word	0x2000bd80
		LL_ASSERT(0);
   12078:	4040      	eors	r0, r0
   1207a:	f380 8811 	msr	BASEPRI, r0
   1207e:	f04f 0004 	mov.w	r0, #4
   12082:	df02      	svc	2
				return 1;
   12084:	2001      	movs	r0, #1
   12086:	e6f9      	b.n	11e7c <role_disable+0xc4>

00012088 <event_stop>:
{
   12088:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   1208a:	4a08      	ldr	r2, [pc, #32]	; (120ac <event_stop+0x24>)
   1208c:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1208e:	4613      	mov	r3, r2
   12090:	2200      	movs	r2, #0
   12092:	4611      	mov	r1, r2
   12094:	4610      	mov	r0, r2
   12096:	f7fc ff49 	bl	ef2c <mayfly_enqueue>
	LL_ASSERT(!retval);
   1209a:	b900      	cbnz	r0, 1209e <event_stop+0x16>
   1209c:	bd08      	pop	{r3, pc}
   1209e:	4040      	eors	r0, r0
   120a0:	f380 8811 	msr	BASEPRI, r0
   120a4:	f04f 0004 	mov.w	r0, #4
   120a8:	df02      	svc	2
   120aa:	bf00      	nop
   120ac:	2000bd60 	.word	0x2000bd60

000120b0 <event_adv_stop>:
{
   120b0:	b500      	push	{lr}
   120b2:	b083      	sub	sp, #12
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   120b4:	2305      	movs	r3, #5
   120b6:	2200      	movs	r2, #0
   120b8:	4611      	mov	r1, r2
   120ba:	4610      	mov	r0, r2
   120bc:	f7ff ffe4 	bl	12088 <event_stop>
	ticker_status =
   120c0:	f241 73e4 	movw	r3, #6116	; 0x17e4
   120c4:	9300      	str	r3, [sp, #0]
   120c6:	4b09      	ldr	r3, [pc, #36]	; (120ec <event_adv_stop+0x3c>)
   120c8:	2205      	movs	r2, #5
   120ca:	2100      	movs	r1, #0
   120cc:	4608      	mov	r0, r1
   120ce:	f7fe fddb 	bl	10c88 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   120d2:	b108      	cbz	r0, 120d8 <event_adv_stop+0x28>
   120d4:	2802      	cmp	r0, #2
   120d6:	d102      	bne.n	120de <event_adv_stop+0x2e>
}
   120d8:	b003      	add	sp, #12
   120da:	f85d fb04 	ldr.w	pc, [sp], #4
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   120de:	4040      	eors	r0, r0
   120e0:	f380 8811 	msr	BASEPRI, r0
   120e4:	f04f 0004 	mov.w	r0, #4
   120e8:	df02      	svc	2
   120ea:	bf00      	nop
   120ec:	00012971 	.word	0x00012971

000120f0 <event_inactive>:
{
   120f0:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   120f2:	4b07      	ldr	r3, [pc, #28]	; (12110 <event_inactive+0x20>)
   120f4:	2200      	movs	r2, #0
   120f6:	4611      	mov	r1, r2
   120f8:	4610      	mov	r0, r2
   120fa:	f7fc ff17 	bl	ef2c <mayfly_enqueue>
	LL_ASSERT(!retval);
   120fe:	b900      	cbnz	r0, 12102 <event_inactive+0x12>
   12100:	bd08      	pop	{r3, pc}
   12102:	4040      	eors	r0, r0
   12104:	f380 8811 	msr	BASEPRI, r0
   12108:	f04f 0004 	mov.w	r0, #4
   1210c:	df02      	svc	2
   1210e:	bf00      	nop
   12110:	2000bd30 	.word	0x2000bd30

00012114 <mayfly_xtal_retain>:
{
   12114:	b508      	push	{r3, lr}
	if (retain) {
   12116:	b1d1      	cbz	r1, 1214e <mayfly_xtal_retain+0x3a>
		if (!s_xtal_retained) {
   12118:	4b1c      	ldr	r3, [pc, #112]	; (1218c <mayfly_xtal_retain+0x78>)
   1211a:	781b      	ldrb	r3, [r3, #0]
   1211c:	b953      	cbnz	r3, 12134 <mayfly_xtal_retain+0x20>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   1211e:	2801      	cmp	r0, #1
   12120:	d109      	bne.n	12136 <mayfly_xtal_retain+0x22>
			s_xtal_retained = 1;
   12122:	2201      	movs	r2, #1
   12124:	4b19      	ldr	r3, [pc, #100]	; (1218c <mayfly_xtal_retain+0x78>)
   12126:	701a      	strb	r2, [r3, #0]
			retval = mayfly_enqueue(caller_id,
   12128:	4b19      	ldr	r3, [pc, #100]	; (12190 <mayfly_xtal_retain+0x7c>)
   1212a:	2200      	movs	r2, #0
   1212c:	4611      	mov	r1, r2
   1212e:	f7fc fefd 	bl	ef2c <mayfly_enqueue>
			LL_ASSERT(!retval);
   12132:	b930      	cbnz	r0, 12142 <mayfly_xtal_retain+0x2e>
   12134:	bd08      	pop	{r3, pc}
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   12136:	4040      	eors	r0, r0
   12138:	f380 8811 	msr	BASEPRI, r0
   1213c:	f04f 0004 	mov.w	r0, #4
   12140:	df02      	svc	2
			LL_ASSERT(!retval);
   12142:	4040      	eors	r0, r0
   12144:	f380 8811 	msr	BASEPRI, r0
   12148:	f04f 0004 	mov.w	r0, #4
   1214c:	df02      	svc	2
		if (s_xtal_retained) {
   1214e:	4b0f      	ldr	r3, [pc, #60]	; (1218c <mayfly_xtal_retain+0x78>)
   12150:	781b      	ldrb	r3, [r3, #0]
   12152:	2b00      	cmp	r3, #0
   12154:	d0ee      	beq.n	12134 <mayfly_xtal_retain+0x20>
			s_xtal_retained = 0;
   12156:	2200      	movs	r2, #0
   12158:	4b0c      	ldr	r3, [pc, #48]	; (1218c <mayfly_xtal_retain+0x78>)
   1215a:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
   1215c:	b138      	cbz	r0, 1216e <mayfly_xtal_retain+0x5a>
   1215e:	2801      	cmp	r0, #1
   12160:	d012      	beq.n	12188 <mayfly_xtal_retain+0x74>
				LL_ASSERT(0);
   12162:	4040      	eors	r0, r0
   12164:	f380 8811 	msr	BASEPRI, r0
   12168:	f04f 0004 	mov.w	r0, #4
   1216c:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
   1216e:	4b09      	ldr	r3, [pc, #36]	; (12194 <mayfly_xtal_retain+0x80>)
			retval = mayfly_enqueue(caller_id,
   12170:	2200      	movs	r2, #0
   12172:	4611      	mov	r1, r2
   12174:	f7fc feda 	bl	ef2c <mayfly_enqueue>
			LL_ASSERT(!retval);
   12178:	2800      	cmp	r0, #0
   1217a:	d0db      	beq.n	12134 <mayfly_xtal_retain+0x20>
   1217c:	4040      	eors	r0, r0
   1217e:	f380 8811 	msr	BASEPRI, r0
   12182:	f04f 0004 	mov.w	r0, #4
   12186:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
   12188:	4b03      	ldr	r3, [pc, #12]	; (12198 <mayfly_xtal_retain+0x84>)
   1218a:	e7f1      	b.n	12170 <mayfly_xtal_retain+0x5c>
   1218c:	20001564 	.word	0x20001564
   12190:	2000bdd0 	.word	0x2000bdd0
   12194:	2000bde0 	.word	0x2000bde0
   12198:	2000bdf0 	.word	0x2000bdf0

0001219c <event_active>:
{
   1219c:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1219e:	4b07      	ldr	r3, [pc, #28]	; (121bc <event_active+0x20>)
   121a0:	2200      	movs	r2, #0
   121a2:	4611      	mov	r1, r2
   121a4:	4610      	mov	r0, r2
   121a6:	f7fc fec1 	bl	ef2c <mayfly_enqueue>
	LL_ASSERT(!retval);
   121aa:	b900      	cbnz	r0, 121ae <event_active+0x12>
   121ac:	bd08      	pop	{r3, pc}
   121ae:	4040      	eors	r0, r0
   121b0:	f380 8811 	msr	BASEPRI, r0
   121b4:	f04f 0004 	mov.w	r0, #4
   121b8:	df02      	svc	2
   121ba:	bf00      	nop
   121bc:	2000bd20 	.word	0x2000bd20

000121c0 <event_xtal>:
{
   121c0:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   121c2:	4b07      	ldr	r3, [pc, #28]	; (121e0 <event_xtal+0x20>)
   121c4:	2200      	movs	r2, #0
   121c6:	4611      	mov	r1, r2
   121c8:	4610      	mov	r0, r2
   121ca:	f7fc feaf 	bl	ef2c <mayfly_enqueue>
	LL_ASSERT(!retval);
   121ce:	b900      	cbnz	r0, 121d2 <event_xtal+0x12>
   121d0:	bd08      	pop	{r3, pc}
   121d2:	4040      	eors	r0, r0
   121d4:	f380 8811 	msr	BASEPRI, r0
   121d8:	f04f 0004 	mov.w	r0, #4
   121dc:	df02      	svc	2
   121de:	bf00      	nop
   121e0:	2000bdc0 	.word	0x2000bdc0

000121e4 <mayfly_radio_active>:
{
   121e4:	b508      	push	{r3, lr}
	if ((u32_t)params) {
   121e6:	b148      	cbz	r0, 121fc <mayfly_radio_active+0x18>
		if (s_active++) {
   121e8:	4a0e      	ldr	r2, [pc, #56]	; (12224 <mayfly_radio_active+0x40>)
   121ea:	7813      	ldrb	r3, [r2, #0]
   121ec:	1c59      	adds	r1, r3, #1
   121ee:	7011      	strb	r1, [r2, #0]
   121f0:	b103      	cbz	r3, 121f4 <mayfly_radio_active+0x10>
   121f2:	bd08      	pop	{r3, pc}
		radio_active_callback(1);
   121f4:	2001      	movs	r0, #1
   121f6:	f007 f8a5 	bl	19344 <radio_active_callback>
   121fa:	bd08      	pop	{r3, pc}
		LL_ASSERT(s_active);
   121fc:	4b09      	ldr	r3, [pc, #36]	; (12224 <mayfly_radio_active+0x40>)
   121fe:	781b      	ldrb	r3, [r3, #0]
   12200:	b14b      	cbz	r3, 12216 <mayfly_radio_active+0x32>
		if (--s_active) {
   12202:	3b01      	subs	r3, #1
   12204:	b2db      	uxtb	r3, r3
   12206:	4a07      	ldr	r2, [pc, #28]	; (12224 <mayfly_radio_active+0x40>)
   12208:	7013      	strb	r3, [r2, #0]
   1220a:	2b00      	cmp	r3, #0
   1220c:	d1f1      	bne.n	121f2 <mayfly_radio_active+0xe>
		radio_active_callback(0);
   1220e:	2000      	movs	r0, #0
   12210:	f007 f898 	bl	19344 <radio_active_callback>
   12214:	e7ed      	b.n	121f2 <mayfly_radio_active+0xe>
		LL_ASSERT(s_active);
   12216:	4040      	eors	r0, r0
   12218:	f380 8811 	msr	BASEPRI, r0
   1221c:	f04f 0004 	mov.w	r0, #4
   12220:	df02      	svc	2
   12222:	bf00      	nop
   12224:	200014d0 	.word	0x200014d0

00012228 <mayfly_radio_inactive>:
{
   12228:	b508      	push	{r3, lr}
	mayfly_radio_active(0);
   1222a:	2000      	movs	r0, #0
   1222c:	f7ff ffda 	bl	121e4 <mayfly_radio_active>
   12230:	bd08      	pop	{r3, pc}
	...

00012234 <mayfly_radio_stop>:
{
   12234:	b538      	push	{r3, r4, r5, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
   12236:	b2c4      	uxtb	r4, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   12238:	1f23      	subs	r3, r4, #4
   1223a:	b2db      	uxtb	r3, r3
   1223c:	2b01      	cmp	r3, #1
   1223e:	d808      	bhi.n	12252 <mayfly_radio_stop+0x1e>
	radio_used = ((_radio.state != STATE_NONE) &&
   12240:	4b10      	ldr	r3, [pc, #64]	; (12284 <mayfly_radio_stop+0x50>)
   12242:	7c1b      	ldrb	r3, [r3, #16]
		      (_radio.state != STATE_STOP) &&
   12244:	b16b      	cbz	r3, 12262 <mayfly_radio_stop+0x2e>
	radio_used = ((_radio.state != STATE_NONE) &&
   12246:	2b04      	cmp	r3, #4
   12248:	d014      	beq.n	12274 <mayfly_radio_stop+0x40>
		      (_radio.state != STATE_STOP) &&
   1224a:	2b05      	cmp	r3, #5
   1224c:	d007      	beq.n	1225e <mayfly_radio_stop+0x2a>
   1224e:	2301      	movs	r3, #1
   12250:	e008      	b.n	12264 <mayfly_radio_stop+0x30>
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   12252:	4040      	eors	r0, r0
   12254:	f380 8811 	msr	BASEPRI, r0
   12258:	f04f 0004 	mov.w	r0, #4
   1225c:	df02      	svc	2
		      (_radio.state != STATE_STOP) &&
   1225e:	2300      	movs	r3, #0
   12260:	e000      	b.n	12264 <mayfly_radio_stop+0x30>
   12262:	2300      	movs	r3, #0
	radio_used = ((_radio.state != STATE_NONE) &&
   12264:	461d      	mov	r5, r3
	if (radio_used || !radio_is_idle()) {
   12266:	b13b      	cbz	r3, 12278 <mayfly_radio_stop+0x44>
		if (radio_used) {
   12268:	b10d      	cbz	r5, 1226e <mayfly_radio_stop+0x3a>
			_radio.state = state;
   1226a:	4b06      	ldr	r3, [pc, #24]	; (12284 <mayfly_radio_stop+0x50>)
   1226c:	741c      	strb	r4, [r3, #16]
		radio_disable();
   1226e:	f7fd f9b3 	bl	f5d8 <radio_disable>
   12272:	bd38      	pop	{r3, r4, r5, pc}
		      (_radio.state != STATE_STOP) &&
   12274:	2300      	movs	r3, #0
   12276:	e7f5      	b.n	12264 <mayfly_radio_stop+0x30>
	if (radio_used || !radio_is_idle()) {
   12278:	f7fd f9dc 	bl	f634 <radio_is_idle>
   1227c:	2800      	cmp	r0, #0
   1227e:	d0f3      	beq.n	12268 <mayfly_radio_stop+0x34>
   12280:	e7f7      	b.n	12272 <mayfly_radio_stop+0x3e>
   12282:	bf00      	nop
   12284:	20000fec 	.word	0x20000fec

00012288 <adv_scan_conn_configure>:
{
   12288:	b508      	push	{r3, lr}
	radio_reset();
   1228a:	f7fd f8ff 	bl	f48c <radio_reset>
	radio_tx_power_set(0);
   1228e:	2000      	movs	r0, #0
   12290:	f7fd f918 	bl	f4c4 <radio_tx_power_set>
	radio_isr_set(isr);
   12294:	4801      	ldr	r0, [pc, #4]	; (1229c <adv_scan_conn_configure+0x14>)
   12296:	f7fd f8c1 	bl	f41c <radio_isr_set>
   1229a:	bd08      	pop	{r3, pc}
   1229c:	0000fbd1 	.word	0x0000fbd1

000122a0 <adv_scan_configure>:
{
   122a0:	b570      	push	{r4, r5, r6, lr}
   122a2:	b082      	sub	sp, #8
   122a4:	4604      	mov	r4, r0
   122a6:	460e      	mov	r6, r1
	u32_t aa = 0x8e89bed6;
   122a8:	ad02      	add	r5, sp, #8
   122aa:	4b0d      	ldr	r3, [pc, #52]	; (122e0 <adv_scan_configure+0x40>)
   122ac:	f845 3d04 	str.w	r3, [r5, #-4]!
	adv_scan_conn_configure();
   122b0:	f7ff ffea 	bl	12288 <adv_scan_conn_configure>
	radio_phy_set(phy, flags);
   122b4:	4631      	mov	r1, r6
   122b6:	4620      	mov	r0, r4
   122b8:	f7fd f8f6 	bl	f4a8 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
   122bc:	4628      	mov	r0, r5
   122be:	f7fd f91f 	bl	f500 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
   122c2:	0062      	lsls	r2, r4, #1
   122c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   122c8:	2125      	movs	r1, #37	; 0x25
   122ca:	2008      	movs	r0, #8
   122cc:	f7fd f930 	bl	f530 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   122d0:	4904      	ldr	r1, [pc, #16]	; (122e4 <adv_scan_configure+0x44>)
   122d2:	f240 605b 	movw	r0, #1627	; 0x65b
   122d6:	f7fd f9b7 	bl	f648 <radio_crc_configure>
}
   122da:	b002      	add	sp, #8
   122dc:	bd70      	pop	{r4, r5, r6, pc}
   122de:	bf00      	nop
   122e0:	8e89bed6 	.word	0x8e89bed6
   122e4:	00555555 	.word	0x00555555

000122e8 <connection_configure>:
{
   122e8:	b510      	push	{r4, lr}
   122ea:	4604      	mov	r4, r0
	adv_scan_conn_configure();
   122ec:	f7ff ffcc 	bl	12288 <adv_scan_conn_configure>
	radio_aa_set(conn->access_addr);
   122f0:	f104 0010 	add.w	r0, r4, #16
   122f4:	f7fd f904 	bl	f500 <radio_aa_set>
			    (((u32_t)conn->crc_init[2] << 16) |
   122f8:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   122fa:	7d63      	ldrb	r3, [r4, #21]
   122fc:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   122fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   12302:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   12304:	4319      	orrs	r1, r3
   12306:	f240 605b 	movw	r0, #1627	; 0x65b
   1230a:	f7fd f99d 	bl	f648 <radio_crc_configure>
   1230e:	bd10      	pop	{r4, pc}

00012310 <rx_packet_set>:
{
   12310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12312:	4605      	mov	r5, r0
   12314:	460f      	mov	r7, r1
	max_rx_octets = conn->max_rx_octets;
   12316:	8e06      	ldrh	r6, [r0, #48]	; 0x30
	phy = conn->phy_rx;
   12318:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
   1231c:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   12320:	2100      	movs	r1, #0
   12322:	4620      	mov	r0, r4
   12324:	f7fd f8c0 	bl	f4a8 <radio_phy_set>
	if (conn->enc_rx) {
   12328:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   1232c:	f013 0f10 	tst.w	r3, #16
   12330:	d10a      	bne.n	12348 <rx_packet_set+0x38>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   12332:	0062      	lsls	r2, r4, #1
   12334:	f042 0201 	orr.w	r2, r2, #1
   12338:	b2f1      	uxtb	r1, r6
   1233a:	2008      	movs	r0, #8
   1233c:	f7fd f8f8 	bl	f530 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
   12340:	4638      	mov	r0, r7
   12342:	f7fd f925 	bl	f590 <radio_pkt_rx_set>
   12346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   12348:	0062      	lsls	r2, r4, #1
   1234a:	1d31      	adds	r1, r6, #4
   1234c:	f042 0201 	orr.w	r2, r2, #1
   12350:	b2c9      	uxtb	r1, r1
   12352:	2008      	movs	r0, #8
   12354:	f7fd f8ec 	bl	f530 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
   12358:	463a      	mov	r2, r7
   1235a:	4621      	mov	r1, r4
   1235c:	f105 00f9 	add.w	r0, r5, #249	; 0xf9
   12360:	f7fd fb12 	bl	f988 <radio_ccm_rx_pkt_set>
   12364:	f7fd f914 	bl	f590 <radio_pkt_rx_set>
   12368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001236a <packet_rx_callback>:
{
   1236a:	b508      	push	{r3, lr}
	radio_event_callback();
   1236c:	f006 ffec 	bl	19348 <radio_event_callback>
   12370:	bd08      	pop	{r3, pc}
	...

00012374 <pdu_node_tx_release>:
{
   12374:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
   12376:	4a14      	ldr	r2, [pc, #80]	; (123c8 <pdu_node_tx_release+0x54>)
   12378:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
   1237c:	3301      	adds	r3, #1
   1237e:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_tx_count) {
   12380:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   12384:	4293      	cmp	r3, r2
   12386:	d017      	beq.n	123b8 <pdu_node_tx_release+0x44>
	LL_ASSERT(last != _radio.packet_release_first);
   12388:	4a0f      	ldr	r2, [pc, #60]	; (123c8 <pdu_node_tx_release+0x54>)
   1238a:	f892 2173 	ldrb.w	r2, [r2, #371]	; 0x173
   1238e:	4293      	cmp	r3, r2
   12390:	d014      	beq.n	123bc <pdu_node_tx_release+0x48>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
   12392:	4a0d      	ldr	r2, [pc, #52]	; (123c8 <pdu_node_tx_release+0x54>)
   12394:	f8d2 416c 	ldr.w	r4, [r2, #364]	; 0x16c
   12398:	f892 5174 	ldrb.w	r5, [r2, #372]	; 0x174
   1239c:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
   123a0:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   123a4:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
   123a8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   123ac:	6041      	str	r1, [r0, #4]
	_radio.packet_release_last = last;
   123ae:	f882 3174 	strb.w	r3, [r2, #372]	; 0x174
	packet_rx_callback();
   123b2:	f7ff ffda 	bl	1236a <packet_rx_callback>
   123b6:	bd38      	pop	{r3, r4, r5, pc}
		last = 0;
   123b8:	2300      	movs	r3, #0
   123ba:	e7e5      	b.n	12388 <pdu_node_tx_release+0x14>
	LL_ASSERT(last != _radio.packet_release_first);
   123bc:	4040      	eors	r0, r0
   123be:	f380 8811 	msr	BASEPRI, r0
   123c2:	f04f 0004 	mov.w	r0, #4
   123c6:	df02      	svc	2
   123c8:	20000fec 	.word	0x20000fec

000123cc <packet_tx_enqueue>:
{
   123cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   123ce:	e016      	b.n	123fe <packet_tx_enqueue+0x32>
			if (conn->pkt_tx_data == 0) {
   123d0:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   123d4:	2b00      	cmp	r3, #0
   123d6:	d040      	beq.n	1245a <packet_tx_enqueue+0x8e>
			if (conn->pkt_tx_last) {
   123d8:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
   123dc:	b103      	cbz	r3, 123e0 <packet_tx_enqueue+0x14>
				conn->pkt_tx_last->next = node_tx_new;
   123de:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_last = node_tx_new;
   123e0:	f8c0 514c 	str.w	r5, [r0, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
   123e4:	4a24      	ldr	r2, [pc, #144]	; (12478 <packet_tx_enqueue+0xac>)
   123e6:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   123ea:	3301      	adds	r3, #1
   123ec:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
   123ee:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   123f2:	4293      	cmp	r3, r2
   123f4:	d03c      	beq.n	12470 <packet_tx_enqueue+0xa4>
		_radio.packet_tx_first = first;
   123f6:	4a20      	ldr	r2, [pc, #128]	; (12478 <packet_tx_enqueue+0xac>)
   123f8:	f882 3171 	strb.w	r3, [r2, #369]	; 0x171
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   123fc:	4638      	mov	r0, r7
   123fe:	1e47      	subs	r7, r0, #1
   12400:	b2ff      	uxtb	r7, r7
   12402:	2800      	cmp	r0, #0
   12404:	d036      	beq.n	12474 <packet_tx_enqueue+0xa8>
   12406:	4a1c      	ldr	r2, [pc, #112]	; (12478 <packet_tx_enqueue+0xac>)
   12408:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   1240c:	b2db      	uxtb	r3, r3
   1240e:	f892 2172 	ldrb.w	r2, [r2, #370]	; 0x172
   12412:	4293      	cmp	r3, r2
   12414:	d02e      	beq.n	12474 <packet_tx_enqueue+0xa8>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   12416:	4b18      	ldr	r3, [pc, #96]	; (12478 <packet_tx_enqueue+0xac>)
   12418:	f8d3 6168 	ldr.w	r6, [r3, #360]	; 0x168
   1241c:	f893 4171 	ldrb.w	r4, [r3, #369]	; 0x171
   12420:	b2e4      	uxtb	r4, r4
   12422:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
		node_tx_new = pdu_data_q_tx->node_tx;
   12426:	6855      	ldr	r5, [r2, #4]
		node_tx_new->next = NULL;
   12428:	2200      	movs	r2, #0
   1242a:	602a      	str	r2, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1242c:	f836 2034 	ldrh.w	r2, [r6, r4, lsl #3]
   12430:	f44f 71aa 	mov.w	r1, #340	; 0x154
   12434:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   12438:	f7fc fef6 	bl	f228 <mem_get>
		if (conn->handle == pdu_data_q_tx->handle) {
   1243c:	8c02      	ldrh	r2, [r0, #32]
   1243e:	f836 3034 	ldrh.w	r3, [r6, r4, lsl #3]
   12442:	429a      	cmp	r2, r3
   12444:	d0c4      	beq.n	123d0 <packet_tx_enqueue+0x4>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   12446:	792b      	ldrb	r3, [r5, #4]
   12448:	f36f 0301 	bfc	r3, #0, #2
   1244c:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
   1244e:	4629      	mov	r1, r5
   12450:	f836 0034 	ldrh.w	r0, [r6, r4, lsl #3]
   12454:	f7ff ff8e 	bl	12374 <pdu_node_tx_release>
   12458:	e7c4      	b.n	123e4 <packet_tx_enqueue+0x18>
				conn->pkt_tx_data = node_tx_new;
   1245a:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
   1245e:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   12462:	2b00      	cmp	r3, #0
   12464:	d1b8      	bne.n	123d8 <packet_tx_enqueue+0xc>
					conn->pkt_tx_head = node_tx_new;
   12466:	f8c0 513c 	str.w	r5, [r0, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
   1246a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
   1246e:	e7b3      	b.n	123d8 <packet_tx_enqueue+0xc>
			first = 0;
   12470:	2300      	movs	r3, #0
   12472:	e7c0      	b.n	123f6 <packet_tx_enqueue+0x2a>
   12474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12476:	bf00      	nop
   12478:	20000fec 	.word	0x20000fec

0001247c <connection_release>:
{
   1247c:	b510      	push	{r4, lr}
   1247e:	b082      	sub	sp, #8
   12480:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   12482:	2201      	movs	r2, #1
   12484:	4611      	mov	r1, r2
   12486:	2000      	movs	r0, #0
   12488:	f7fc fd12 	bl	eeb0 <mayfly_enable>
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   1248c:	8c22      	ldrh	r2, [r4, #32]
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1248e:	3207      	adds	r2, #7
	ticker_status =
   12490:	f242 2345 	movw	r3, #8773	; 0x2245
   12494:	9300      	str	r3, [sp, #0]
   12496:	4b46      	ldr	r3, [pc, #280]	; (125b0 <connection_release+0x134>)
   12498:	b2d2      	uxtb	r2, r2
   1249a:	2100      	movs	r1, #0
   1249c:	4608      	mov	r0, r1
   1249e:	f7fe fbf3 	bl	10c88 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   124a2:	b108      	cbz	r0, 124a8 <connection_release+0x2c>
   124a4:	2802      	cmp	r0, #2
   124a6:	d12a      	bne.n	124fe <connection_release+0x82>
	if ((_radio.state == STATE_ABORT) &&
   124a8:	4b42      	ldr	r3, [pc, #264]	; (125b4 <connection_release+0x138>)
   124aa:	7c1b      	ldrb	r3, [r3, #16]
   124ac:	2b05      	cmp	r3, #5
   124ae:	d13e      	bne.n	1252e <connection_release+0xb2>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   124b0:	4b40      	ldr	r3, [pc, #256]	; (125b4 <connection_release+0x138>)
   124b2:	7b1a      	ldrb	r2, [r3, #12]
   124b4:	b2d2      	uxtb	r2, r2
					  conn->handle))) {
   124b6:	8c23      	ldrh	r3, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   124b8:	3307      	adds	r3, #7
	if ((_radio.state == STATE_ABORT) &&
   124ba:	429a      	cmp	r2, r3
   124bc:	d137      	bne.n	1252e <connection_release+0xb2>
		_radio.ticker_id_prepare = 0;
   124be:	2000      	movs	r0, #0
   124c0:	4b3c      	ldr	r3, [pc, #240]	; (125b4 <connection_release+0x138>)
   124c2:	7318      	strb	r0, [r3, #12]
		ticker_status =
   124c4:	f242 2356 	movw	r3, #8790	; 0x2256
   124c8:	9300      	str	r3, [sp, #0]
   124ca:	4b39      	ldr	r3, [pc, #228]	; (125b0 <connection_release+0x134>)
   124cc:	2201      	movs	r2, #1
   124ce:	4601      	mov	r1, r0
   124d0:	f7fe fbda 	bl	10c88 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   124d4:	b108      	cbz	r0, 124da <connection_release+0x5e>
   124d6:	2802      	cmp	r0, #2
   124d8:	d117      	bne.n	1250a <connection_release+0x8e>
		ticker_status =
   124da:	f242 235d 	movw	r3, #8797	; 0x225d
   124de:	9300      	str	r3, [sp, #0]
   124e0:	4b33      	ldr	r3, [pc, #204]	; (125b0 <connection_release+0x134>)
   124e2:	2200      	movs	r2, #0
   124e4:	4611      	mov	r1, r2
   124e6:	4610      	mov	r0, r2
   124e8:	f7fe fbce 	bl	10c88 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   124ec:	b1f8      	cbz	r0, 1252e <connection_release+0xb2>
   124ee:	2802      	cmp	r0, #2
   124f0:	d01d      	beq.n	1252e <connection_release+0xb2>
   124f2:	4040      	eors	r0, r0
   124f4:	f380 8811 	msr	BASEPRI, r0
   124f8:	f04f 0004 	mov.w	r0, #4
   124fc:	df02      	svc	2
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   124fe:	4040      	eors	r0, r0
   12500:	f380 8811 	msr	BASEPRI, r0
   12504:	f04f 0004 	mov.w	r0, #4
   12508:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1250a:	4040      	eors	r0, r0
   1250c:	f380 8811 	msr	BASEPRI, r0
   12510:	f04f 0004 	mov.w	r0, #4
   12514:	df02      	svc	2
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   12516:	790b      	ldrb	r3, [r1, #4]
   12518:	f36f 0301 	bfc	r3, #0, #2
   1251c:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   1251e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   12522:	681b      	ldr	r3, [r3, #0]
   12524:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
   12528:	8c20      	ldrh	r0, [r4, #32]
   1252a:	f7ff ff23 	bl	12374 <pdu_node_tx_release>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   1252e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   12532:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   12536:	4299      	cmp	r1, r3
   12538:	d00c      	beq.n	12554 <connection_release+0xd8>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   1253a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   1253e:	4299      	cmp	r1, r3
   12540:	d1e9      	bne.n	12516 <connection_release+0x9a>
   12542:	e007      	b.n	12554 <connection_release+0xd8>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   12544:	6803      	ldr	r3, [r0, #0]
   12546:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
   1254a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   1254e:	491a      	ldr	r1, [pc, #104]	; (125b8 <connection_release+0x13c>)
   12550:	f7fc fe49 	bl	f1e6 <mem_release>
	while ((conn->pkt_tx_head) &&
   12554:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   12558:	b118      	cbz	r0, 12562 <connection_release+0xe6>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   1255a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head) &&
   1255e:	4298      	cmp	r0, r3
   12560:	d1f0      	bne.n	12544 <connection_release+0xc8>
	conn->pkt_tx_ctrl = NULL;
   12562:	2300      	movs	r3, #0
   12564:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   12568:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
   1256c:	e00d      	b.n	1258a <connection_release+0x10e>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   1256e:	790b      	ldrb	r3, [r1, #4]
   12570:	f36f 0301 	bfc	r3, #0, #2
   12574:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   12576:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1257a:	681b      	ldr	r3, [r3, #0]
   1257c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
   12580:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
   12584:	8c20      	ldrh	r0, [r4, #32]
   12586:	f7ff fef5 	bl	12374 <pdu_node_tx_release>
	while (conn->pkt_tx_head) {
   1258a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   1258e:	2900      	cmp	r1, #0
   12590:	d1ed      	bne.n	1256e <connection_release+0xf2>
	conn->handle = 0xffff;
   12592:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12596:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
   12598:	4b06      	ldr	r3, [pc, #24]	; (125b4 <connection_release+0x138>)
   1259a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   1259e:	429c      	cmp	r4, r3
   125a0:	d001      	beq.n	125a6 <connection_release+0x12a>
}
   125a2:	b002      	add	sp, #8
   125a4:	bd10      	pop	{r4, pc}
		_radio.conn_upd = NULL;
   125a6:	2200      	movs	r2, #0
   125a8:	4b02      	ldr	r3, [pc, #8]	; (125b4 <connection_release+0x138>)
   125aa:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
}
   125ae:	e7f8      	b.n	125a2 <connection_release+0x126>
   125b0:	000118a5 	.word	0x000118a5
   125b4:	20000fec 	.word	0x20000fec
   125b8:	20001144 	.word	0x20001144

000125bc <chan_map_update>:
{
   125bc:	b538      	push	{r3, r4, r5, lr}
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   125be:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	      conn->event_counter) & 0xffff) > 0x7fff) {
   125c2:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   125c4:	1a9b      	subs	r3, r3, r2
   125c6:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   125c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   125cc:	da22      	bge.n	12614 <chan_map_update+0x58>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   125ce:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   125d2:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   125d6:	429a      	cmp	r2, r3
   125d8:	d116      	bne.n	12608 <chan_map_update+0x4c>
   125da:	460d      	mov	r5, r1
   125dc:	4604      	mov	r4, r0
	memcpy(&conn->llcp.chan_map.chm[0],
   125de:	2205      	movs	r2, #5
   125e0:	3104      	adds	r1, #4
   125e2:	3079      	adds	r0, #121	; 0x79
   125e4:	f7ed fe6c 	bl	2c0 <memcpy>
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
   125e8:	f8b5 3009 	ldrh.w	r3, [r5, #9]
	conn->llcp.chan_map.instant =
   125ec:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
	conn->llcp.chan_map.initiate = 0;
   125f0:	2000      	movs	r0, #0
   125f2:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
	conn->llcp_type = LLCP_CHAN_MAP;
   125f6:	2302      	movs	r3, #2
   125f8:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	conn->llcp_ack--;
   125fc:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   12600:	3b01      	subs	r3, #1
   12602:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	return 0;
   12606:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   12608:	4040      	eors	r0, r0
   1260a:	f380 8811 	msr	BASEPRI, r0
   1260e:	f04f 0004 	mov.w	r0, #4
   12612:	df02      	svc	2
		return 1;
   12614:	2001      	movs	r0, #1
}
   12616:	bd38      	pop	{r3, r4, r5, pc}

00012618 <feature_rsp_send>:
{
   12618:	b538      	push	{r3, r4, r5, lr}
   1261a:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1261c:	4812      	ldr	r0, [pc, #72]	; (12668 <feature_rsp_send+0x50>)
   1261e:	f7fc fdc6 	bl	f1ae <mem_acquire>
	LL_ASSERT(node_tx);
   12622:	b1d8      	cbz	r0, 1265c <feature_rsp_send+0x44>
   12624:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12626:	7903      	ldrb	r3, [r0, #4]
   12628:	f043 0303 	orr.w	r3, r3, #3
   1262c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1262e:	2309      	movs	r3, #9
   12630:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   12632:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
   12634:	2208      	movs	r2, #8
   12636:	2100      	movs	r1, #0
   12638:	4410      	add	r0, r2
   1263a:	f017 fda1 	bl	2a180 <memset>
		conn->llcp_features & 0xFF;
   1263e:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   12642:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
   12644:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   12648:	0a1b      	lsrs	r3, r3, #8
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   1264a:	7263      	strb	r3, [r4, #9]
		(conn->llcp_features >> 16) & 0xFF;
   1264c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   12650:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
   12652:	4621      	mov	r1, r4
   12654:	4628      	mov	r0, r5
   12656:	f7ff f87c 	bl	11752 <ctrl_tx_sec_enqueue>
   1265a:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   1265c:	4040      	eors	r0, r0
   1265e:	f380 8811 	msr	BASEPRI, r0
   12662:	f04f 0004 	mov.w	r0, #4
   12666:	df02      	svc	2
   12668:	20001144 	.word	0x20001144

0001266c <empty_tx_enqueue>:
{
   1266c:	b510      	push	{r4, lr}
   1266e:	4604      	mov	r4, r0
	conn->empty = 1;
   12670:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   12674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12678:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
   1267c:	f7fc fffa 	bl	f674 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12680:	7803      	ldrb	r3, [r0, #0]
   12682:	2201      	movs	r2, #1
   12684:	f362 0301 	bfi	r3, r2, #0, #2
   12688:	7003      	strb	r3, [r0, #0]
	pdu_data_tx->len = 0;
   1268a:	2300      	movs	r3, #0
   1268c:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
   1268e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   12692:	b123      	cbz	r3, 1269e <empty_tx_enqueue+0x32>
		pdu_data_tx->md = 1;
   12694:	7803      	ldrb	r3, [r0, #0]
   12696:	f043 0310 	orr.w	r3, r3, #16
   1269a:	7003      	strb	r3, [r0, #0]
   1269c:	bd10      	pop	{r4, pc}
		pdu_data_tx->md = 0;
   1269e:	7803      	ldrb	r3, [r0, #0]
   126a0:	f36f 1304 	bfc	r3, #4, #1
   126a4:	7003      	strb	r3, [r0, #0]
}
   126a6:	bd10      	pop	{r4, pc}

000126a8 <prepare_pdu_data_tx>:
{
   126a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   126aa:	460c      	mov	r4, r1
	    conn->empty ||
   126ac:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
	if (/* empty packet */
   126b0:	f012 0f80 	tst.w	r2, #128	; 0x80
   126b4:	d109      	bne.n	126ca <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   126b6:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    conn->empty ||
   126ba:	b133      	cbz	r3, 126ca <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   126bc:	f012 0f08 	tst.w	r2, #8
   126c0:	d00e      	beq.n	126e0 <prepare_pdu_data_tx+0x38>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
   126c2:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
   126c6:	4293      	cmp	r3, r2
   126c8:	d00a      	beq.n	126e0 <prepare_pdu_data_tx+0x38>
			_pdu_data_tx = empty_tx_enqueue(conn);
   126ca:	f7ff ffcf 	bl	1266c <empty_tx_enqueue>
   126ce:	4602      	mov	r2, r0
	_pdu_data_tx->rfu = 0;
   126d0:	7813      	ldrb	r3, [r2, #0]
   126d2:	f36f 1347 	bfc	r3, #5, #3
   126d6:	7013      	strb	r3, [r2, #0]
	_pdu_data_tx->resv = 0;
   126d8:	2300      	movs	r3, #0
   126da:	7093      	strb	r3, [r2, #2]
	*pdu_data_tx = _pdu_data_tx;
   126dc:	6022      	str	r2, [r4, #0]
   126de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   126e0:	3304      	adds	r3, #4
					conn->packet_tx_head_offset);
   126e2:	f890 6151 	ldrb.w	r6, [r0, #337]	; 0x151
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   126e6:	199a      	adds	r2, r3, r6
		if (!conn->packet_tx_head_len) {
   126e8:	f890 1150 	ldrb.w	r1, [r0, #336]	; 0x150
   126ec:	b911      	cbnz	r1, 126f4 <prepare_pdu_data_tx+0x4c>
			conn->packet_tx_head_len = _pdu_data_tx->len;
   126ee:	7851      	ldrb	r1, [r2, #1]
   126f0:	f880 1150 	strb.w	r1, [r0, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
   126f4:	b126      	cbz	r6, 12700 <prepare_pdu_data_tx+0x58>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   126f6:	5d99      	ldrb	r1, [r3, r6]
   126f8:	2501      	movs	r5, #1
   126fa:	f365 0101 	bfi	r1, r5, #0, #2
   126fe:	5599      	strb	r1, [r3, r6]
		_pdu_data_tx->len = conn->packet_tx_head_len -
   12700:	f890 5150 	ldrb.w	r5, [r0, #336]	; 0x150
				    conn->packet_tx_head_offset;
   12704:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
		_pdu_data_tx->len = conn->packet_tx_head_len -
   12708:	1a6d      	subs	r5, r5, r1
   1270a:	b2ed      	uxtb	r5, r5
   1270c:	7055      	strb	r5, [r2, #1]
		_pdu_data_tx->md = 0;
   1270e:	5d99      	ldrb	r1, [r3, r6]
   12710:	f36f 1104 	bfc	r1, #4, #1
   12714:	5599      	strb	r1, [r3, r6]
		switch (conn->phy_tx_time) {
   12716:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
   1271a:	f001 0107 	and.w	r1, r1, #7
   1271e:	2902      	cmp	r1, #2
   12720:	d02d      	beq.n	1277e <prepare_pdu_data_tx+0xd6>
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   12722:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   12724:	08c9      	lsrs	r1, r1, #3
   12726:	390a      	subs	r1, #10
   12728:	b289      	uxth	r1, r1
		if (conn->enc_tx) {
   1272a:	f890 70f8 	ldrb.w	r7, [r0, #248]	; 0xf8
   1272e:	f017 0f20 	tst.w	r7, #32
   12732:	d001      	beq.n	12738 <prepare_pdu_data_tx+0x90>
			max_tx_octets -= 4;
   12734:	3904      	subs	r1, #4
   12736:	b289      	uxth	r1, r1
		if (max_tx_octets > conn->max_tx_octets) {
   12738:	8dc7      	ldrh	r7, [r0, #46]	; 0x2e
   1273a:	42b9      	cmp	r1, r7
   1273c:	d800      	bhi.n	12740 <prepare_pdu_data_tx+0x98>
   1273e:	460f      	mov	r7, r1
		if (_pdu_data_tx->len > max_tx_octets) {
   12740:	b2ad      	uxth	r5, r5
   12742:	42af      	cmp	r7, r5
   12744:	d204      	bcs.n	12750 <prepare_pdu_data_tx+0xa8>
			_pdu_data_tx->len = max_tx_octets;
   12746:	7057      	strb	r7, [r2, #1]
			_pdu_data_tx->md = 1;
   12748:	5d99      	ldrb	r1, [r3, r6]
   1274a:	f041 0110 	orr.w	r1, r1, #16
   1274e:	5599      	strb	r1, [r3, r6]
		if (conn->pkt_tx_head->next) {
   12750:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
   12754:	6809      	ldr	r1, [r1, #0]
   12756:	b119      	cbz	r1, 12760 <prepare_pdu_data_tx+0xb8>
			_pdu_data_tx->md = 1;
   12758:	5d99      	ldrb	r1, [r3, r6]
   1275a:	f041 0110 	orr.w	r1, r1, #16
   1275e:	5599      	strb	r1, [r3, r6]
		if (!conn->pkt_tx_ctrl &&
   12760:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   12764:	2b00      	cmp	r3, #0
   12766:	d1b3      	bne.n	126d0 <prepare_pdu_data_tx+0x28>
		    (conn->pkt_tx_head != conn->pkt_tx_data)) {
   12768:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   1276c:	f8d0 1148 	ldr.w	r1, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl &&
   12770:	428b      	cmp	r3, r1
   12772:	d0ad      	beq.n	126d0 <prepare_pdu_data_tx+0x28>
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
   12774:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   12778:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
   1277c:	e7a8      	b.n	126d0 <prepare_pdu_data_tx+0x28>
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   1277e:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   12780:	0889      	lsrs	r1, r1, #2
   12782:	390b      	subs	r1, #11
   12784:	b289      	uxth	r1, r1
			break;
   12786:	e7d0      	b.n	1272a <prepare_pdu_data_tx+0x82>

00012788 <version_ind_send>:
{
   12788:	b510      	push	{r4, lr}
   1278a:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1278c:	4810      	ldr	r0, [pc, #64]	; (127d0 <version_ind_send+0x48>)
   1278e:	f7fc fd0e 	bl	f1ae <mem_acquire>
	LL_ASSERT(node_tx);
   12792:	b1b8      	cbz	r0, 127c4 <version_ind_send+0x3c>
   12794:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12796:	7903      	ldrb	r3, [r0, #4]
   12798:	f043 0303 	orr.w	r3, r3, #3
   1279c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1279e:	2306      	movs	r3, #6
   127a0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   127a2:	230c      	movs	r3, #12
   127a4:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   127a6:	2309      	movs	r3, #9
   127a8:	7203      	strb	r3, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   127aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   127ae:	7243      	strb	r3, [r0, #9]
   127b0:	7283      	strb	r3, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   127b2:	72c3      	strb	r3, [r0, #11]
   127b4:	7303      	strb	r3, [r0, #12]
	ctrl_tx_sec_enqueue(conn, node_tx);
   127b6:	4620      	mov	r0, r4
   127b8:	f7fe ffcb 	bl	11752 <ctrl_tx_sec_enqueue>
	empty_tx_enqueue(conn);
   127bc:	4620      	mov	r0, r4
   127be:	f7ff ff55 	bl	1266c <empty_tx_enqueue>
   127c2:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   127c4:	4040      	eors	r0, r0
   127c6:	f380 8811 	msr	BASEPRI, r0
   127ca:	f04f 0004 	mov.w	r0, #4
   127ce:	df02      	svc	2
   127d0:	20001144 	.word	0x20001144

000127d4 <tx_packet_set>:
{
   127d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   127d6:	4605      	mov	r5, r0
   127d8:	460f      	mov	r7, r1
	max_tx_octets = conn->max_tx_octets;
   127da:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
   127dc:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
   127e0:	f3c1 04c2 	ubfx	r4, r1, #3, #3
	radio_phy_set(phy, flags);
   127e4:	09c9      	lsrs	r1, r1, #7
   127e6:	4620      	mov	r0, r4
   127e8:	f7fc fe5e 	bl	f4a8 <radio_phy_set>
	if (conn->enc_tx) {
   127ec:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   127f0:	f013 0f20 	tst.w	r3, #32
   127f4:	d10a      	bne.n	1280c <tx_packet_set+0x38>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   127f6:	0062      	lsls	r2, r4, #1
   127f8:	f042 0201 	orr.w	r2, r2, #1
   127fc:	b2f1      	uxtb	r1, r6
   127fe:	2008      	movs	r0, #8
   12800:	f7fc fe96 	bl	f530 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   12804:	4638      	mov	r0, r7
   12806:	f7fc fec9 	bl	f59c <radio_pkt_tx_set>
   1280a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
   1280c:	0062      	lsls	r2, r4, #1
   1280e:	1d31      	adds	r1, r6, #4
   12810:	f042 0201 	orr.w	r2, r2, #1
   12814:	b2c9      	uxtb	r1, r1
   12816:	2008      	movs	r0, #8
   12818:	f7fc fe8a 	bl	f530 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
   1281c:	4639      	mov	r1, r7
   1281e:	f505 708d 	add.w	r0, r5, #282	; 0x11a
   12822:	f7fd f8f1 	bl	fa08 <radio_ccm_tx_pkt_set>
   12826:	f7fc feb9 	bl	f59c <radio_pkt_tx_set>
   1282a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001282c <chan_set>:
{
   1282c:	b510      	push	{r4, lr}
   1282e:	4604      	mov	r4, r0
	switch (chan) {
   12830:	2826      	cmp	r0, #38	; 0x26
   12832:	d013      	beq.n	1285c <chan_set+0x30>
   12834:	2827      	cmp	r0, #39	; 0x27
   12836:	d015      	beq.n	12864 <chan_set+0x38>
   12838:	2825      	cmp	r0, #37	; 0x25
   1283a:	d008      	beq.n	1284e <chan_set+0x22>
		if (chan < 11) {
   1283c:	280a      	cmp	r0, #10
   1283e:	d915      	bls.n	1286c <chan_set+0x40>
		} else if (chan < 40) {
   12840:	2827      	cmp	r0, #39	; 0x27
   12842:	d818      	bhi.n	12876 <chan_set+0x4a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
   12844:	3003      	adds	r0, #3
   12846:	0040      	lsls	r0, r0, #1
   12848:	f7fc fe42 	bl	f4d0 <radio_freq_chan_set>
   1284c:	e002      	b.n	12854 <chan_set+0x28>
		radio_freq_chan_set(2);
   1284e:	2002      	movs	r0, #2
   12850:	f7fc fe3e 	bl	f4d0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   12854:	4620      	mov	r0, r4
   12856:	f7fc fe41 	bl	f4dc <radio_whiten_iv_set>
   1285a:	bd10      	pop	{r4, pc}
		radio_freq_chan_set(26);
   1285c:	201a      	movs	r0, #26
   1285e:	f7fc fe37 	bl	f4d0 <radio_freq_chan_set>
		break;
   12862:	e7f7      	b.n	12854 <chan_set+0x28>
		radio_freq_chan_set(80);
   12864:	2050      	movs	r0, #80	; 0x50
   12866:	f7fc fe33 	bl	f4d0 <radio_freq_chan_set>
		break;
   1286a:	e7f3      	b.n	12854 <chan_set+0x28>
			radio_freq_chan_set(4 + (2 * chan));
   1286c:	3002      	adds	r0, #2
   1286e:	0040      	lsls	r0, r0, #1
   12870:	f7fc fe2e 	bl	f4d0 <radio_freq_chan_set>
   12874:	e7ee      	b.n	12854 <chan_set+0x28>
			LL_ASSERT(0);
   12876:	4040      	eors	r0, r0
   12878:	f380 8811 	msr	BASEPRI, r0
   1287c:	f04f 0004 	mov.w	r0, #4
   12880:	df02      	svc	2
	...

00012884 <adv_setup>:
{
   12884:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
   12886:	4a39      	ldr	r2, [pc, #228]	; (1296c <adv_setup+0xe8>)
   12888:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
	    _radio.advertiser.adv_data.last) {
   1288c:	f892 2076 	ldrb.w	r2, [r2, #118]	; 0x76
	if (_radio.advertiser.adv_data.first !=
   12890:	4293      	cmp	r3, r2
   12892:	d037      	beq.n	12904 <adv_setup+0x80>
		first = _radio.advertiser.adv_data.first + 1;
   12894:	3301      	adds	r3, #1
   12896:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   12898:	2b02      	cmp	r3, #2
   1289a:	d031      	beq.n	12900 <adv_setup+0x7c>
		_radio.advertiser.adv_data.first = first;
   1289c:	4a33      	ldr	r2, [pc, #204]	; (1296c <adv_setup+0xe8>)
   1289e:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
		upd = 1;
   128a2:	2101      	movs	r1, #1
	if (_radio.advertiser.scan_data.first != _radio.
   128a4:	4a31      	ldr	r2, [pc, #196]	; (1296c <adv_setup+0xe8>)
   128a6:	f892 30c5 	ldrb.w	r3, [r2, #197]	; 0xc5
	    advertiser.scan_data.last) {
   128aa:	f892 20c6 	ldrb.w	r2, [r2, #198]	; 0xc6
	if (_radio.advertiser.scan_data.first != _radio.
   128ae:	4293      	cmp	r3, r2
   128b0:	d007      	beq.n	128c2 <adv_setup+0x3e>
		first = _radio.advertiser.scan_data.first + 1;
   128b2:	3301      	adds	r3, #1
   128b4:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   128b6:	2b02      	cmp	r3, #2
   128b8:	d026      	beq.n	12908 <adv_setup+0x84>
		_radio.advertiser.scan_data.first = first;
   128ba:	4a2c      	ldr	r2, [pc, #176]	; (1296c <adv_setup+0xe8>)
   128bc:	f882 30c5 	strb.w	r3, [r2, #197]	; 0xc5
		upd = 1;
   128c0:	2101      	movs	r1, #1
			_radio.advertiser.adv_data.first];
   128c2:	4c2a      	ldr	r4, [pc, #168]	; (1296c <adv_setup+0xe8>)
   128c4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
	pdu = (struct pdu_adv *)
   128c8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   128cc:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   128d0:	3320      	adds	r3, #32
   128d2:	441c      	add	r4, r3
   128d4:	1de5      	adds	r5, r4, #7
	if (upd) {
   128d6:	b9c9      	cbnz	r1, 1290c <adv_setup+0x88>
	radio_pkt_tx_set(pdu);
   128d8:	4628      	mov	r0, r5
   128da:	f7fc fe5f 	bl	f59c <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   128de:	79e3      	ldrb	r3, [r4, #7]
   128e0:	f003 030f 	and.w	r3, r3, #15
   128e4:	2b02      	cmp	r3, #2
   128e6:	d020      	beq.n	1292a <adv_setup+0xa6>
   128e8:	2b07      	cmp	r3, #7
   128ea:	d01e      	beq.n	1292a <adv_setup+0xa6>
		_radio.state = STATE_TX;
   128ec:	2202      	movs	r2, #2
   128ee:	4b1f      	ldr	r3, [pc, #124]	; (1296c <adv_setup+0xe8>)
   128f0:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   128f2:	2096      	movs	r0, #150	; 0x96
   128f4:	f7fc ff78 	bl	f7e8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   128f8:	2000      	movs	r0, #0
   128fa:	f7fc fec3 	bl	f684 <radio_switch_complete_and_rx>
   128fe:	e019      	b.n	12934 <adv_setup+0xb0>
			first = 0;
   12900:	2300      	movs	r3, #0
   12902:	e7cb      	b.n	1289c <adv_setup+0x18>
	u8_t upd = 0;
   12904:	2100      	movs	r1, #0
   12906:	e7cd      	b.n	128a4 <adv_setup+0x20>
			first = 0;
   12908:	2300      	movs	r3, #0
   1290a:	e7d6      	b.n	128ba <adv_setup+0x36>
			_radio.advertiser.scan_data.first];
   1290c:	4817      	ldr	r0, [pc, #92]	; (1296c <adv_setup+0xe8>)
   1290e:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
   12912:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   12916:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1291a:	3370      	adds	r3, #112	; 0x70
   1291c:	4418      	add	r0, r3
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
   1291e:	2206      	movs	r2, #6
   12920:	1ca9      	adds	r1, r5, #2
   12922:	3009      	adds	r0, #9
   12924:	f7ed fccc 	bl	2c0 <memcpy>
   12928:	e7d6      	b.n	128d8 <adv_setup+0x54>
		_radio.state = STATE_CLOSE;
   1292a:	2203      	movs	r2, #3
   1292c:	4b0f      	ldr	r3, [pc, #60]	; (1296c <adv_setup+0xe8>)
   1292e:	741a      	strb	r2, [r3, #16]
		radio_switch_complete_and_disable();
   12930:	f7fc feb8 	bl	f6a4 <radio_switch_complete_and_disable>
	bitmap = _radio.advertiser.chan_map_current;
   12934:	4b0d      	ldr	r3, [pc, #52]	; (1296c <adv_setup+0xe8>)
   12936:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   1293a:	f3c2 0142 	ubfx	r1, r2, #1, #3
   1293e:	b2ca      	uxtb	r2, r1
   12940:	4613      	mov	r3, r2
	chan = 0;
   12942:	2000      	movs	r0, #0
	while ((bitmap & 0x01) == 0) {
   12944:	e002      	b.n	1294c <adv_setup+0xc8>
		chan++;
   12946:	3001      	adds	r0, #1
   12948:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
   1294a:	085b      	lsrs	r3, r3, #1
	while ((bitmap & 0x01) == 0) {
   1294c:	f013 0f01 	tst.w	r3, #1
   12950:	d0f9      	beq.n	12946 <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
   12952:	3a01      	subs	r2, #1
	_radio.advertiser.chan_map_current &=
   12954:	4b05      	ldr	r3, [pc, #20]	; (1296c <adv_setup+0xe8>)
   12956:	400a      	ands	r2, r1
   12958:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   1295c:	f362 0143 	bfi	r1, r2, #1, #3
   12960:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	chan_set(37 + chan);
   12964:	3025      	adds	r0, #37	; 0x25
   12966:	f7ff ff61 	bl	1282c <chan_set>
   1296a:	bd38      	pop	{r3, r4, r5, pc}
   1296c:	20000fec 	.word	0x20000fec

00012970 <ticker_stop_adv_stop>:
	if (status != TICKER_STATUS_SUCCESS) {
   12970:	b158      	cbz	r0, 1298a <ticker_stop_adv_stop+0x1a>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   12972:	4b6c      	ldr	r3, [pc, #432]	; (12b24 <ticker_stop_adv_stop+0x1b4>)
   12974:	7b9b      	ldrb	r3, [r3, #14]
   12976:	b2db      	uxtb	r3, r3
   12978:	2b05      	cmp	r3, #5
   1297a:	d100      	bne.n	1297e <ticker_stop_adv_stop+0xe>
   1297c:	4770      	bx	lr
   1297e:	4040      	eors	r0, r0
   12980:	f380 8811 	msr	BASEPRI, r0
   12984:	f04f 0004 	mov.w	r0, #4
   12988:	df02      	svc	2
{
   1298a:	b500      	push	{lr}
   1298c:	b085      	sub	sp, #20
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   1298e:	4b65      	ldr	r3, [pc, #404]	; (12b24 <ticker_stop_adv_stop+0x1b4>)
   12990:	7b1b      	ldrb	r3, [r3, #12]
   12992:	b2db      	uxtb	r3, r3
   12994:	2b05      	cmp	r3, #5
   12996:	d010      	beq.n	129ba <ticker_stop_adv_stop+0x4a>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
   12998:	4b62      	ldr	r3, [pc, #392]	; (12b24 <ticker_stop_adv_stop+0x1b4>)
   1299a:	7b5b      	ldrb	r3, [r3, #13]
   1299c:	b2db      	uxtb	r3, r3
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   1299e:	2b05      	cmp	r3, #5
   129a0:	d00b      	beq.n	129ba <ticker_stop_adv_stop+0x4a>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   129a2:	4b61      	ldr	r3, [pc, #388]	; (12b28 <ticker_stop_adv_stop+0x1b8>)
   129a4:	2200      	movs	r2, #0
   129a6:	4611      	mov	r1, r2
   129a8:	2001      	movs	r0, #1
   129aa:	f7fc fabf 	bl	ef2c <mayfly_enqueue>
	LL_ASSERT(!retval);
   129ae:	2800      	cmp	r0, #0
   129b0:	f040 80b1 	bne.w	12b16 <ticker_stop_adv_stop+0x1a6>
}
   129b4:	b005      	add	sp, #20
   129b6:	f85d fb04 	ldr.w	pc, [sp], #4
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   129ba:	ab04      	add	r3, sp, #16
   129bc:	2202      	movs	r2, #2
   129be:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   129c2:	9300      	str	r3, [sp, #0]
   129c4:	4b59      	ldr	r3, [pc, #356]	; (12b2c <ticker_stop_adv_stop+0x1bc>)
   129c6:	2200      	movs	r2, #0
   129c8:	2101      	movs	r1, #1
   129ca:	4610      	mov	r0, r2
   129cc:	f7fe f95c 	bl	10c88 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   129d0:	2802      	cmp	r0, #2
   129d2:	d02c      	beq.n	12a2e <ticker_stop_adv_stop+0xbe>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   129d4:	9b02      	ldr	r3, [sp, #8]
   129d6:	2b00      	cmp	r3, #0
   129d8:	d17e      	bne.n	12ad8 <ticker_stop_adv_stop+0x168>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   129da:	2302      	movs	r3, #2
   129dc:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   129de:	4b51      	ldr	r3, [pc, #324]	; (12b24 <ticker_stop_adv_stop+0x1b4>)
   129e0:	7b1b      	ldrb	r3, [r3, #12]
   129e2:	2b00      	cmp	r3, #0
   129e4:	d031      	beq.n	12a4a <ticker_stop_adv_stop+0xda>
		_radio.ticker_id_prepare = 0;
   129e6:	2000      	movs	r0, #0
   129e8:	4b4e      	ldr	r3, [pc, #312]	; (12b24 <ticker_stop_adv_stop+0x1b4>)
   129ea:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   129ec:	ab03      	add	r3, sp, #12
   129ee:	9300      	str	r3, [sp, #0]
   129f0:	4b4e      	ldr	r3, [pc, #312]	; (12b2c <ticker_stop_adv_stop+0x1bc>)
   129f2:	2201      	movs	r2, #1
   129f4:	4611      	mov	r1, r2
   129f6:	f7fe f947 	bl	10c88 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   129fa:	2802      	cmp	r0, #2
   129fc:	d02b      	beq.n	12a56 <ticker_stop_adv_stop+0xe6>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   129fe:	9b03      	ldr	r3, [sp, #12]
   12a00:	2b00      	cmp	r3, #0
   12a02:	d144      	bne.n	12a8e <ticker_stop_adv_stop+0x11e>
			if (_radio.advertiser.hdr.ticks_active_to_start >
   12a04:	4b47      	ldr	r3, [pc, #284]	; (12b24 <ticker_stop_adv_stop+0x1b4>)
   12a06:	699a      	ldr	r2, [r3, #24]
			    (_radio.advertiser.hdr.ticks_xtal_to_start &
   12a08:	695b      	ldr	r3, [r3, #20]
   12a0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
   12a0e:	429a      	cmp	r2, r3
   12a10:	d92f      	bls.n	12a72 <ticker_stop_adv_stop+0x102>
				retval = mayfly_enqueue(
   12a12:	4b47      	ldr	r3, [pc, #284]	; (12b30 <ticker_stop_adv_stop+0x1c0>)
   12a14:	2200      	movs	r2, #0
   12a16:	4611      	mov	r1, r2
   12a18:	2001      	movs	r0, #1
   12a1a:	f7fc fa87 	bl	ef2c <mayfly_enqueue>
				LL_ASSERT(!retval);
   12a1e:	2800      	cmp	r0, #0
   12a20:	d0bf      	beq.n	129a2 <ticker_stop_adv_stop+0x32>
   12a22:	4040      	eors	r0, r0
   12a24:	f380 8811 	msr	BASEPRI, r0
   12a28:	f04f 0004 	mov.w	r0, #4
   12a2c:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   12a2e:	2201      	movs	r2, #1
   12a30:	4611      	mov	r1, r2
   12a32:	4610      	mov	r0, r2
   12a34:	f7fc fa3c 	bl	eeb0 <mayfly_enable>
   12a38:	e003      	b.n	12a42 <ticker_stop_adv_stop+0xd2>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a3a:	2101      	movs	r1, #1
   12a3c:	2000      	movs	r0, #0
   12a3e:	f7fe f9df 	bl	10e00 <ticker_job_sched>
		while (ret_cb == TICKER_STATUS_BUSY) {
   12a42:	9b02      	ldr	r3, [sp, #8]
   12a44:	2b02      	cmp	r3, #2
   12a46:	d0f8      	beq.n	12a3a <ticker_stop_adv_stop+0xca>
   12a48:	e7c4      	b.n	129d4 <ticker_stop_adv_stop+0x64>
		LL_ASSERT(_radio.ticker_id_prepare);
   12a4a:	4040      	eors	r0, r0
   12a4c:	f380 8811 	msr	BASEPRI, r0
   12a50:	f04f 0004 	mov.w	r0, #4
   12a54:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   12a56:	2201      	movs	r2, #1
   12a58:	4611      	mov	r1, r2
   12a5a:	4610      	mov	r0, r2
   12a5c:	f7fc fa28 	bl	eeb0 <mayfly_enable>
   12a60:	e003      	b.n	12a6a <ticker_stop_adv_stop+0xfa>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a62:	2101      	movs	r1, #1
   12a64:	2000      	movs	r0, #0
   12a66:	f7fe f9cb 	bl	10e00 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12a6a:	9b03      	ldr	r3, [sp, #12]
   12a6c:	2b02      	cmp	r3, #2
   12a6e:	d0f8      	beq.n	12a62 <ticker_stop_adv_stop+0xf2>
   12a70:	e7c5      	b.n	129fe <ticker_stop_adv_stop+0x8e>
				retval = mayfly_enqueue(
   12a72:	4b30      	ldr	r3, [pc, #192]	; (12b34 <ticker_stop_adv_stop+0x1c4>)
   12a74:	2200      	movs	r2, #0
   12a76:	4611      	mov	r1, r2
   12a78:	2001      	movs	r0, #1
   12a7a:	f7fc fa57 	bl	ef2c <mayfly_enqueue>
				LL_ASSERT(!retval);
   12a7e:	2800      	cmp	r0, #0
   12a80:	d08f      	beq.n	129a2 <ticker_stop_adv_stop+0x32>
   12a82:	4040      	eors	r0, r0
   12a84:	f380 8811 	msr	BASEPRI, r0
   12a88:	f04f 0004 	mov.w	r0, #4
   12a8c:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   12a8e:	9b03      	ldr	r3, [sp, #12]
   12a90:	2b01      	cmp	r3, #1
   12a92:	d11b      	bne.n	12acc <ticker_stop_adv_stop+0x15c>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12a94:	4b26      	ldr	r3, [pc, #152]	; (12b30 <ticker_stop_adv_stop+0x1c0>)
   12a96:	2200      	movs	r2, #0
   12a98:	4611      	mov	r1, r2
   12a9a:	2001      	movs	r0, #1
   12a9c:	f7fc fa46 	bl	ef2c <mayfly_enqueue>
			LL_ASSERT(!retval);
   12aa0:	b970      	cbnz	r0, 12ac0 <ticker_stop_adv_stop+0x150>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12aa2:	4b24      	ldr	r3, [pc, #144]	; (12b34 <ticker_stop_adv_stop+0x1c4>)
   12aa4:	2200      	movs	r2, #0
   12aa6:	4611      	mov	r1, r2
   12aa8:	2001      	movs	r0, #1
   12aaa:	f7fc fa3f 	bl	ef2c <mayfly_enqueue>
			LL_ASSERT(!retval);
   12aae:	2800      	cmp	r0, #0
   12ab0:	f43f af77 	beq.w	129a2 <ticker_stop_adv_stop+0x32>
   12ab4:	4040      	eors	r0, r0
   12ab6:	f380 8811 	msr	BASEPRI, r0
   12aba:	f04f 0004 	mov.w	r0, #4
   12abe:	df02      	svc	2
			LL_ASSERT(!retval);
   12ac0:	4040      	eors	r0, r0
   12ac2:	f380 8811 	msr	BASEPRI, r0
   12ac6:	f04f 0004 	mov.w	r0, #4
   12aca:	df02      	svc	2
			LL_ASSERT(0);
   12acc:	4040      	eors	r0, r0
   12ace:	f380 8811 	msr	BASEPRI, r0
   12ad2:	f04f 0004 	mov.w	r0, #4
   12ad6:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   12ad8:	9b02      	ldr	r3, [sp, #8]
   12ada:	2b01      	cmp	r3, #1
   12adc:	d115      	bne.n	12b0a <ticker_stop_adv_stop+0x19a>
		if (_radio.role != ROLE_NONE) {
   12ade:	4b11      	ldr	r3, [pc, #68]	; (12b24 <ticker_stop_adv_stop+0x1b4>)
   12ae0:	7bdb      	ldrb	r3, [r3, #15]
   12ae2:	2b00      	cmp	r3, #0
   12ae4:	f43f af5d 	beq.w	129a2 <ticker_stop_adv_stop+0x32>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   12ae8:	4b13      	ldr	r3, [pc, #76]	; (12b38 <ticker_stop_adv_stop+0x1c8>)
   12aea:	2204      	movs	r2, #4
   12aec:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12aee:	2200      	movs	r2, #0
   12af0:	4611      	mov	r1, r2
   12af2:	2001      	movs	r0, #1
   12af4:	f7fc fa1a 	bl	ef2c <mayfly_enqueue>
			LL_ASSERT(!retval);
   12af8:	2800      	cmp	r0, #0
   12afa:	f43f af52 	beq.w	129a2 <ticker_stop_adv_stop+0x32>
   12afe:	4040      	eors	r0, r0
   12b00:	f380 8811 	msr	BASEPRI, r0
   12b04:	f04f 0004 	mov.w	r0, #4
   12b08:	df02      	svc	2
		LL_ASSERT(0);
   12b0a:	4040      	eors	r0, r0
   12b0c:	f380 8811 	msr	BASEPRI, r0
   12b10:	f04f 0004 	mov.w	r0, #4
   12b14:	df02      	svc	2
	LL_ASSERT(!retval);
   12b16:	4040      	eors	r0, r0
   12b18:	f380 8811 	msr	BASEPRI, r0
   12b1c:	f04f 0004 	mov.w	r0, #4
   12b20:	df02      	svc	2
   12b22:	bf00      	nop
   12b24:	20000fec 	.word	0x20000fec
   12b28:	2000bd10 	.word	0x2000bd10
   12b2c:	00011535 	.word	0x00011535
   12b30:	2000bd40 	.word	0x2000bd40
   12b34:	2000be00 	.word	0x2000be00
   12b38:	2000bd70 	.word	0x2000bd70
   12b3c:	00000000 	.word	0x00000000

00012b40 <sched_free_win_offset_calc>:
{
   12b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b44:	b091      	sub	sp, #68	; 0x44
   12b46:	9009      	str	r0, [sp, #36]	; 0x24
   12b48:	910a      	str	r1, [sp, #40]	; 0x28
   12b4a:	9207      	str	r2, [sp, #28]
   12b4c:	469b      	mov	fp, r3
   12b4e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   12b50:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
	if (conn_curr->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   12b54:	6803      	ldr	r3, [r0, #0]
   12b56:	2b00      	cmp	r3, #0
   12b58:	db0f      	blt.n	12b7a <sched_free_win_offset_calc+0x3a>
	u32_t ticks_prepare_reduced = 0;
   12b5a:	2300      	movs	r3, #0
   12b5c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   12b5e:	27ff      	movs	r7, #255	; 0xff
   12b60:	f88d 7037 	strb.w	r7, [sp, #55]	; 0x37
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12b64:	2300      	movs	r3, #0
   12b66:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   12b6a:	930f      	str	r3, [sp, #60]	; 0x3c
   12b6c:	930e      	str	r3, [sp, #56]	; 0x38
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12b6e:	461c      	mov	r4, r3
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   12b70:	9706      	str	r7, [sp, #24]
	ticks_slot_prev_abs = 0;
   12b72:	461e      	mov	r6, r3
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   12b74:	9308      	str	r3, [sp, #32]
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12b76:	4698      	mov	r8, r3
   12b78:	e06d      	b.n	12c56 <sched_free_win_offset_calc+0x116>
				conn_curr->hdr.ticks_preempt_to_start;
   12b7a:	6881      	ldr	r1, [r0, #8]
				conn_curr->hdr.ticks_active_to_start :
   12b7c:	6842      	ldr	r2, [r0, #4]
		ticks_prepare_reduced = ((conn_curr->hdr.ticks_xtal_to_start &
   12b7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   12b82:	4291      	cmp	r1, r2
   12b84:	bf2c      	ite	cs
   12b86:	1a5b      	subcs	r3, r3, r1
   12b88:	1a9b      	subcc	r3, r3, r2
   12b8a:	930b      	str	r3, [sp, #44]	; 0x2c
   12b8c:	e7e7      	b.n	12b5e <sched_free_win_offset_calc+0x1e>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12b8e:	2101      	movs	r1, #1
   12b90:	2000      	movs	r0, #0
   12b92:	f7fe f935 	bl	10e00 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12b96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12b98:	2b02      	cmp	r3, #2
   12b9a:	d0f8      	beq.n	12b8e <sched_free_win_offset_calc+0x4e>
   12b9c:	e06c      	b.n	12c78 <sched_free_win_offset_calc+0x138>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12b9e:	4040      	eors	r0, r0
   12ba0:	f380 8811 	msr	BASEPRI, r0
   12ba4:	f04f 0004 	mov.w	r0, #4
   12ba8:	df02      	svc	2
			LL_ASSERT(0);
   12baa:	4040      	eors	r0, r0
   12bac:	f380 8811 	msr	BASEPRI, r0
   12bb0:	f04f 0004 	mov.w	r0, #4
   12bb4:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   12bb6:	f8d9 1008 	ldr.w	r1, [r9, #8]
					conn->hdr.ticks_active_to_start :
   12bba:	f8d9 2004 	ldr.w	r2, [r9, #4]
					((conn->hdr.ticks_xtal_to_start &
   12bbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   12bc2:	4291      	cmp	r1, r2
   12bc4:	bf2c      	ite	cs
   12bc6:	ebc3 0301 	rsbcs	r3, r3, r1
   12bca:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   12bce:	9a05      	ldr	r2, [sp, #20]
   12bd0:	441a      	add	r2, r3
   12bd2:	9205      	str	r2, [sp, #20]
   12bd4:	e085      	b.n	12ce2 <sched_free_win_offset_calc+0x1a2>
					memcpy(win_offset +
   12bd6:	2202      	movs	r2, #2
   12bd8:	a90d      	add	r1, sp, #52	; 0x34
   12bda:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   12bde:	f7ed fb6f 	bl	2c0 <memcpy>
					offset_index++;
   12be2:	3401      	adds	r4, #1
   12be4:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
   12be6:	3728      	adds	r7, #40	; 0x28
				while ((offset_index < *offset_max) &&
   12be8:	782b      	ldrb	r3, [r5, #0]
   12bea:	429c      	cmp	r4, r3
   12bec:	d21f      	bcs.n	12c2e <sched_free_win_offset_calc+0xee>
				       (ticker_ticks_diff_get(ticks_to_expire_normal,
   12bee:	4639      	mov	r1, r7
   12bf0:	9805      	ldr	r0, [sp, #20]
   12bf2:	f7fe f919 	bl	10e28 <ticker_ticks_diff_get>
					 conn->hdr.ticks_slot))) {
   12bf6:	f8d9 300c 	ldr.w	r3, [r9, #12]
							    625 + 1250) +
   12bfa:	4433      	add	r3, r6
   12bfc:	3364      	adds	r3, #100	; 0x64
				while ((offset_index < *offset_max) &&
   12bfe:	4298      	cmp	r0, r3
   12c00:	d315      	bcc.n	12c2e <sched_free_win_offset_calc+0xee>
						TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12c02:	19bb      	adds	r3, r7, r6
   12c04:	485a      	ldr	r0, [pc, #360]	; (12d70 <sched_free_win_offset_calc+0x230>)
   12c06:	fba3 0100 	umull	r0, r1, r3, r0
   12c0a:	2207      	movs	r2, #7
   12c0c:	fb02 1103 	mla	r1, r2, r3, r1
   12c10:	a355      	add	r3, pc, #340	; (adr r3, 12d68 <sched_free_win_offset_calc+0x228>)
   12c12:	e9d3 2300 	ldrd	r2, r3, [r3]
   12c16:	f7ee fa71 	bl	10fc <__aeabi_uldivmod>
								   ticks_slot_prev_abs) / 1250;
   12c1a:	4b56      	ldr	r3, [pc, #344]	; (12d74 <sched_free_win_offset_calc+0x234>)
   12c1c:	fba3 3000 	umull	r3, r0, r3, r0
					_win_offset =
   12c20:	f3c0 208f 	ubfx	r0, r0, #10, #16
   12c24:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
					if (_win_offset >= conn_interval) {
   12c28:	4558      	cmp	r0, fp
   12c2a:	d3d4      	bcc.n	12bd6 <sched_free_win_offset_calc+0x96>
						ticks_to_expire_prev = 0;
   12c2c:	2700      	movs	r7, #0
				*ticks_to_offset_next = ticks_to_expire_prev;
   12c2e:	9b07      	ldr	r3, [sp, #28]
   12c30:	601f      	str	r7, [r3, #0]
				if (_win_offset >= conn_interval) {
   12c32:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   12c36:	459b      	cmp	fp, r3
   12c38:	d95e      	bls.n	12cf8 <sched_free_win_offset_calc+0x1b8>
			ticks_anchor_prev = ticks_anchor;
   12c3a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
			ticker_id_prev = ticker_id;
   12c3e:	f89d 7037 	ldrb.w	r7, [sp, #55]	; 0x37
				conn->hdr.ticks_slot;
   12c42:	f8d9 600c 	ldr.w	r6, [r9, #12]
			ticks_slot_prev_abs =
   12c46:	3664      	adds	r6, #100	; 0x64
			ticks_to_expire_prev = ticks_to_expire_normal;
   12c48:	9b05      	ldr	r3, [sp, #20]
   12c4a:	9308      	str	r3, [sp, #32]
   12c4c:	e000      	b.n	12c50 <sched_free_win_offset_calc+0x110>
			ticker_id_other = ticker_id;
   12c4e:	9206      	str	r2, [sp, #24]
	} while (offset_index < *offset_max);
   12c50:	782b      	ldrb	r3, [r5, #0]
   12c52:	429c      	cmp	r4, r3
   12c54:	d251      	bcs.n	12cfa <sched_free_win_offset_calc+0x1ba>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12c56:	2302      	movs	r3, #2
   12c58:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   12c5a:	ab0c      	add	r3, sp, #48	; 0x30
   12c5c:	9302      	str	r3, [sp, #8]
   12c5e:	4b46      	ldr	r3, [pc, #280]	; (12d78 <sched_free_win_offset_calc+0x238>)
   12c60:	9301      	str	r3, [sp, #4]
   12c62:	ab0e      	add	r3, sp, #56	; 0x38
   12c64:	9300      	str	r3, [sp, #0]
   12c66:	ab0f      	add	r3, sp, #60	; 0x3c
   12c68:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   12c6c:	2101      	movs	r1, #1
   12c6e:	2000      	movs	r0, #0
   12c70:	f7fe f846 	bl	10d00 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   12c74:	2802      	cmp	r0, #2
   12c76:	d08e      	beq.n	12b96 <sched_free_win_offset_calc+0x56>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12c7a:	2b00      	cmp	r3, #0
   12c7c:	d18f      	bne.n	12b9e <sched_free_win_offset_calc+0x5e>
		if (ticker_id == 0xff) {
   12c7e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   12c82:	2aff      	cmp	r2, #255	; 0xff
   12c84:	d039      	beq.n	12cfa <sched_free_win_offset_calc+0x1ba>
		if ((ticker_id_prev != 0xff) &&
   12c86:	2fff      	cmp	r7, #255	; 0xff
   12c88:	d002      	beq.n	12c90 <sched_free_win_offset_calc+0x150>
		    (ticks_anchor != ticks_anchor_prev)) {
   12c8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		if ((ticker_id_prev != 0xff) &&
   12c8c:	4598      	cmp	r8, r3
   12c8e:	d18c      	bne.n	12baa <sched_free_win_offset_calc+0x6a>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   12c90:	2a05      	cmp	r2, #5
   12c92:	d9dd      	bls.n	12c50 <sched_free_win_offset_calc+0x110>
				  _radio.connection_count)) {
   12c94:	4b39      	ldr	r3, [pc, #228]	; (12d7c <sched_free_win_offset_calc+0x23c>)
   12c96:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   12c9a:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   12c9c:	429a      	cmp	r2, r3
   12c9e:	dad7      	bge.n	12c50 <sched_free_win_offset_calc+0x110>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
   12ca0:	2a06      	cmp	r2, #6
   12ca2:	d9d4      	bls.n	12c4e <sched_free_win_offset_calc+0x10e>
		if (ticker_id_other != 0xFF) {
   12ca4:	9b06      	ldr	r3, [sp, #24]
   12ca6:	2bff      	cmp	r3, #255	; 0xff
   12ca8:	d127      	bne.n	12cfa <sched_free_win_offset_calc+0x1ba>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   12caa:	3a07      	subs	r2, #7
   12cac:	b292      	uxth	r2, r2
   12cae:	f44f 71aa 	mov.w	r1, #340	; 0x154
   12cb2:	4b32      	ldr	r3, [pc, #200]	; (12d7c <sched_free_win_offset_calc+0x23c>)
   12cb4:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   12cb8:	f7fc fab6 	bl	f228 <mem_get>
   12cbc:	4681      	mov	r9, r0
		if ((conn != conn_curr) && (is_select || !conn->role)) {
   12cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12cc0:	4283      	cmp	r3, r0
   12cc2:	d0c5      	beq.n	12c50 <sched_free_win_offset_calc+0x110>
   12cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12cc6:	b91b      	cbnz	r3, 12cd0 <sched_free_win_offset_calc+0x190>
   12cc8:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12ccc:	2b00      	cmp	r3, #0
   12cce:	dbbf      	blt.n	12c50 <sched_free_win_offset_calc+0x110>
				ticks_to_expire + ticks_prepare_reduced;
   12cd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			u32_t ticks_to_expire_normal =
   12cd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12cd4:	18d3      	adds	r3, r2, r3
   12cd6:	9305      	str	r3, [sp, #20]
			if (conn->hdr.ticks_xtal_to_start &
   12cd8:	f8d9 3000 	ldr.w	r3, [r9]
   12cdc:	2b00      	cmp	r3, #0
   12cde:	f6ff af6a 	blt.w	12bb6 <sched_free_win_offset_calc+0x76>
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   12ce2:	9b07      	ldr	r3, [sp, #28]
   12ce4:	681f      	ldr	r7, [r3, #0]
   12ce6:	9b05      	ldr	r3, [sp, #20]
   12ce8:	42bb      	cmp	r3, r7
   12cea:	d9a6      	bls.n	12c3a <sched_free_win_offset_calc+0xfa>
				if (ticks_to_expire_prev < *ticks_to_offset_next) {
   12cec:	9a08      	ldr	r2, [sp, #32]
   12cee:	42ba      	cmp	r2, r7
   12cf0:	f4ff af7a 	bcc.w	12be8 <sched_free_win_offset_calc+0xa8>
   12cf4:	4617      	mov	r7, r2
   12cf6:	e777      	b.n	12be8 <sched_free_win_offset_calc+0xa8>
   12cf8:	9708      	str	r7, [sp, #32]
	if (ticker_id == 0xFF) {
   12cfa:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   12cfe:	2bff      	cmp	r3, #255	; 0xff
   12d00:	d003      	beq.n	12d0a <sched_free_win_offset_calc+0x1ca>
	*offset_max = offset_index;
   12d02:	702c      	strb	r4, [r5, #0]
}
   12d04:	b011      	add	sp, #68	; 0x44
   12d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   12d0a:	9b07      	ldr	r3, [sp, #28]
   12d0c:	681f      	ldr	r7, [r3, #0]
   12d0e:	9a08      	ldr	r2, [sp, #32]
   12d10:	42ba      	cmp	r2, r7
   12d12:	d300      	bcc.n	12d16 <sched_free_win_offset_calc+0x1d6>
   12d14:	4617      	mov	r7, r2
		while (offset_index < *offset_max) {
   12d16:	782b      	ldrb	r3, [r5, #0]
   12d18:	429c      	cmp	r4, r3
   12d1a:	d21f      	bcs.n	12d5c <sched_free_win_offset_calc+0x21c>
				TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12d1c:	19bb      	adds	r3, r7, r6
   12d1e:	4814      	ldr	r0, [pc, #80]	; (12d70 <sched_free_win_offset_calc+0x230>)
   12d20:	fba3 0100 	umull	r0, r1, r3, r0
   12d24:	2207      	movs	r2, #7
   12d26:	fb02 1103 	mla	r1, r2, r3, r1
   12d2a:	a30f      	add	r3, pc, #60	; (adr r3, 12d68 <sched_free_win_offset_calc+0x228>)
   12d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12d30:	f7ee f9e4 	bl	10fc <__aeabi_uldivmod>
						   ticks_slot_prev_abs) / 1250;
   12d34:	4b0f      	ldr	r3, [pc, #60]	; (12d74 <sched_free_win_offset_calc+0x234>)
   12d36:	fba3 2300 	umull	r2, r3, r3, r0
			_win_offset =
   12d3a:	f3c3 238f 	ubfx	r3, r3, #10, #16
   12d3e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			if (_win_offset >= conn_interval) {
   12d42:	459b      	cmp	fp, r3
   12d44:	d909      	bls.n	12d5a <sched_free_win_offset_calc+0x21a>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
   12d46:	2202      	movs	r2, #2
   12d48:	a90d      	add	r1, sp, #52	; 0x34
   12d4a:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   12d4e:	f7ed fab7 	bl	2c0 <memcpy>
			offset_index++;
   12d52:	3401      	adds	r4, #1
   12d54:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += TICKER_US_TO_TICKS(1250);
   12d56:	3728      	adds	r7, #40	; 0x28
   12d58:	e7dd      	b.n	12d16 <sched_free_win_offset_calc+0x1d6>
				ticks_to_expire_prev = 0;
   12d5a:	2700      	movs	r7, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   12d5c:	9b07      	ldr	r3, [sp, #28]
   12d5e:	601f      	str	r7, [r3, #0]
   12d60:	e7cf      	b.n	12d02 <sched_free_win_offset_calc+0x1c2>
   12d62:	bf00      	nop
   12d64:	f3af 8000 	nop.w
   12d68:	3b9aca00 	.word	0x3b9aca00
   12d6c:	00000000 	.word	0x00000000
   12d70:	1afd498d 	.word	0x1afd498d
   12d74:	d1b71759 	.word	0xd1b71759
   12d78:	00011535 	.word	0x00011535
   12d7c:	20000fec 	.word	0x20000fec

00012d80 <mayfly_sched_free_win_offset_calc>:
{
   12d80:	b500      	push	{lr}
   12d82:	b085      	sub	sp, #20
	u32_t ticks_to_offset_default = 0;
   12d84:	2300      	movs	r3, #0
   12d86:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
   12d88:	2306      	movs	r3, #6
   12d8a:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
   12d8e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12d92:	2b00      	cmp	r3, #0
   12d94:	db0e      	blt.n	12db4 <mayfly_sched_free_win_offset_calc+0x34>
	ticks_to_offset_next = &ticks_to_offset_default;
   12d96:	aa03      	add	r2, sp, #12
				   (u8_t *)conn->llcp_conn_param.pdu_win_offset0);
   12d98:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
   12d9c:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
   12da0:	9101      	str	r1, [sp, #4]
   12da2:	f10d 010b 	add.w	r1, sp, #11
   12da6:	9100      	str	r1, [sp, #0]
   12da8:	2100      	movs	r1, #0
   12daa:	f7ff fec9 	bl	12b40 <sched_free_win_offset_calc>
}
   12dae:	b005      	add	sp, #20
   12db0:	f85d fb04 	ldr.w	pc, [sp], #4
			conn->slave.ticks_to_offset;
   12db4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		conn->llcp_conn_param.ticks_to_offset_next =
   12db6:	4602      	mov	r2, r0
   12db8:	f842 3fe4 	str.w	r3, [r2, #228]!
   12dbc:	e7ec      	b.n	12d98 <mayfly_sched_free_win_offset_calc+0x18>
	...

00012dc0 <mayfly_sched_win_offset_select>:
{
   12dc0:	b570      	push	{r4, r5, r6, lr}
   12dc2:	b088      	sub	sp, #32
   12dc4:	4606      	mov	r6, r0
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
   12dc6:	ac05      	add	r4, sp, #20
   12dc8:	2500      	movs	r5, #0
   12dca:	9505      	str	r5, [sp, #20]
   12dcc:	9506      	str	r5, [sp, #24]
   12dce:	9507      	str	r5, [sp, #28]
	u8_t offset_m_max = OFFSET_M_MAX;
   12dd0:	2306      	movs	r3, #6
   12dd2:	f88d 3013 	strb.w	r3, [sp, #19]
		TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 * 1250);
   12dd6:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
   12dda:	4843      	ldr	r0, [pc, #268]	; (12ee8 <mayfly_sched_win_offset_select+0x128>)
   12ddc:	fba2 0100 	umull	r0, r1, r2, r0
   12de0:	f240 1323 	movw	r3, #291	; 0x123
   12de4:	fb03 1102 	mla	r1, r3, r2, r1
   12de8:	a33d      	add	r3, pc, #244	; (adr r3, 12ee0 <mayfly_sched_win_offset_select+0x120>)
   12dea:	e9d3 2300 	ldrd	r2, r3, [r3]
   12dee:	f7ee f985 	bl	10fc <__aeabi_uldivmod>
   12df2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ticks_to_offset =
   12df6:	aa08      	add	r2, sp, #32
   12df8:	f842 0d14 	str.w	r0, [r2, #-20]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
   12dfc:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   12e00:	9401      	str	r4, [sp, #4]
   12e02:	f10d 0113 	add.w	r1, sp, #19
   12e06:	9100      	str	r1, [sp, #0]
   12e08:	2101      	movs	r1, #1
   12e0a:	4630      	mov	r0, r6
   12e0c:	f7ff fe98 	bl	12b40 <sched_free_win_offset_calc>
	u8_t has_offset_s = 0;
   12e10:	462c      	mov	r4, r5
	while (offset_index_s < OFFSET_S_MAX) {
   12e12:	e018      	b.n	12e46 <mayfly_sched_win_offset_select+0x86>
			offset_index_m++;
   12e14:	3301      	adds	r3, #1
   12e16:	b2db      	uxtb	r3, r3
		while (offset_index_m < offset_m_max) {
   12e18:	f89d 1013 	ldrb.w	r1, [sp, #19]
   12e1c:	428b      	cmp	r3, r1
   12e1e:	d20e      	bcs.n	12e3e <mayfly_sched_win_offset_select+0x7e>
			if (win_offset_s != 0xffff) {
   12e20:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   12e24:	f64f 70ff 	movw	r0, #65535	; 0xffff
   12e28:	4282      	cmp	r2, r0
   12e2a:	d0f3      	beq.n	12e14 <mayfly_sched_win_offset_select+0x54>
				    win_offset_m[offset_index_m]) {
   12e2c:	a808      	add	r0, sp, #32
   12e2e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   12e32:	f830 0c0c 	ldrh.w	r0, [r0, #-12]
				if (win_offset_s ==
   12e36:	4282      	cmp	r2, r0
   12e38:	d001      	beq.n	12e3e <mayfly_sched_win_offset_select+0x7e>
				has_offset_s = 1;
   12e3a:	2401      	movs	r4, #1
   12e3c:	e7ea      	b.n	12e14 <mayfly_sched_win_offset_select+0x54>
		if (offset_index_m < offset_m_max) {
   12e3e:	428b      	cmp	r3, r1
   12e40:	d30e      	bcc.n	12e60 <mayfly_sched_win_offset_select+0xa0>
		offset_index_s++;
   12e42:	3501      	adds	r5, #1
   12e44:	b2ed      	uxtb	r5, r5
	while (offset_index_s < OFFSET_S_MAX) {
   12e46:	2d05      	cmp	r5, #5
   12e48:	d80a      	bhi.n	12e60 <mayfly_sched_win_offset_select+0xa0>
		       ((u8_t *)&conn->llcp_conn_param.offset0 +
   12e4a:	f106 01ce 	add.w	r1, r6, #206	; 0xce
		memcpy((u8_t *)&win_offset_s,
   12e4e:	2202      	movs	r2, #2
   12e50:	eb01 0145 	add.w	r1, r1, r5, lsl #1
   12e54:	f10d 000a 	add.w	r0, sp, #10
   12e58:	f7ed fa32 	bl	2c0 <memcpy>
		u8_t offset_index_m = 0;
   12e5c:	2300      	movs	r3, #0
		while (offset_index_m < offset_m_max) {
   12e5e:	e7db      	b.n	12e18 <mayfly_sched_win_offset_select+0x58>
	if (offset_index_s < OFFSET_S_MAX) {
   12e60:	2d05      	cmp	r5, #5
   12e62:	d91d      	bls.n	12ea0 <mayfly_sched_win_offset_select+0xe0>
	} else if (!has_offset_s) {
   12e64:	b35c      	cbz	r4, 12ebe <mayfly_sched_win_offset_select+0xfe>
		conn->llcp_ack = conn->llcp_req;
   12e66:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
   12e6a:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		_radio.conn_upd = NULL;
   12e6e:	2200      	movs	r2, #0
   12e70:	4b1e      	ldr	r3, [pc, #120]	; (12eec <mayfly_sched_win_offset_select+0x12c>)
   12e72:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
   12e76:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12e7a:	f813 2c05 	ldrb.w	r2, [r3, #-5]
   12e7e:	f042 0203 	orr.w	r2, r2, #3
   12e82:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
   12e86:	2203      	movs	r2, #3
   12e88:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->payload.llctrl.opcode =
   12e8c:	2211      	movs	r2, #17
   12e8e:	f803 2c02 	strb.w	r2, [r3, #-2]
			reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   12e92:	220f      	movs	r2, #15
   12e94:	f803 2c01 	strb.w	r2, [r3, #-1]
			error_code = 0x20; /* Unsupported parameter value */
   12e98:	2220      	movs	r2, #32
   12e9a:	701a      	strb	r2, [r3, #0]
}
   12e9c:	b008      	add	sp, #32
   12e9e:	bd70      	pop	{r4, r5, r6, pc}
			win_offset_s * 1250;
   12ea0:	a908      	add	r1, sp, #32
   12ea2:	f831 2d16 	ldrh.w	r2, [r1, #-22]!
   12ea6:	f240 43e2 	movw	r3, #1250	; 0x4e2
   12eaa:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   12eae:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   12eb2:	2202      	movs	r2, #2
   12eb4:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   12eb8:	f7ed fa02 	bl	2c0 <memcpy>
   12ebc:	e7ee      	b.n	12e9c <mayfly_sched_win_offset_select+0xdc>
			win_offset_m[0] * 1250;
   12ebe:	a908      	add	r1, sp, #32
   12ec0:	f831 2d0c 	ldrh.w	r2, [r1, #-12]!
   12ec4:	f240 43e2 	movw	r3, #1250	; 0x4e2
   12ec8:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   12ecc:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   12ed0:	2202      	movs	r2, #2
   12ed2:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   12ed6:	f7ed f9f3 	bl	2c0 <memcpy>
   12eda:	e7df      	b.n	12e9c <mayfly_sched_win_offset_select+0xdc>
   12edc:	f3af 8000 	nop.w
   12ee0:	1afd498d 	.word	0x1afd498d
   12ee4:	00000007 	.word	0x00000007
   12ee8:	09ce5400 	.word	0x09ce5400
   12eec:	20000fec 	.word	0x20000fec

00012ef0 <sched_after_mstr_free_slot_get>:
{
   12ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ef4:	b08b      	sub	sp, #44	; 0x2c
   12ef6:	4604      	mov	r4, r0
   12ef8:	468b      	mov	fp, r1
   12efa:	4615      	mov	r5, r2
   12efc:	469a      	mov	sl, r3
	ticker_id = ticker_id_prev = 0xff;
   12efe:	f04f 08ff 	mov.w	r8, #255	; 0xff
   12f02:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   12f06:	2300      	movs	r3, #0
   12f08:	f8ca 3000 	str.w	r3, [sl]
   12f0c:	9308      	str	r3, [sp, #32]
	ticks_slot_prev_abs = 0;
   12f0e:	461f      	mov	r7, r3
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   12f10:	9305      	str	r3, [sp, #20]
   12f12:	e01f      	b.n	12f54 <sched_after_mstr_free_slot_get+0x64>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12f14:	4621      	mov	r1, r4
   12f16:	2000      	movs	r0, #0
   12f18:	f7fd ff72 	bl	10e00 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12f1c:	9b07      	ldr	r3, [sp, #28]
   12f1e:	2b02      	cmp	r3, #2
   12f20:	d0f8      	beq.n	12f14 <sched_after_mstr_free_slot_get+0x24>
   12f22:	e028      	b.n	12f76 <sched_after_mstr_free_slot_get+0x86>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12f24:	4040      	eors	r0, r0
   12f26:	f380 8811 	msr	BASEPRI, r0
   12f2a:	f04f 0004 	mov.w	r0, #4
   12f2e:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   12f30:	6881      	ldr	r1, [r0, #8]
					conn->hdr.ticks_active_to_start :
   12f32:	6842      	ldr	r2, [r0, #4]
					((conn->hdr.ticks_xtal_to_start &
   12f34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   12f38:	4291      	cmp	r1, r2
   12f3a:	bf2c      	ite	cs
   12f3c:	ebc3 0301 	rsbcs	r3, r3, r1
   12f40:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   12f44:	4499      	add	r9, r3
   12f46:	e03a      	b.n	12fbe <sched_after_mstr_free_slot_get+0xce>
			ticker_id_prev = ticker_id;
   12f48:	f89d 8027 	ldrb.w	r8, [sp, #39]	; 0x27
				conn->hdr.ticks_slot;
   12f4c:	68f7      	ldr	r7, [r6, #12]
			ticks_slot_prev_abs =
   12f4e:	3727      	adds	r7, #39	; 0x27
			ticks_to_expire_prev = ticks_to_expire_normal;
   12f50:	f8cd 9014 	str.w	r9, [sp, #20]
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12f54:	2302      	movs	r3, #2
   12f56:	9307      	str	r3, [sp, #28]
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   12f58:	ab07      	add	r3, sp, #28
   12f5a:	9302      	str	r3, [sp, #8]
   12f5c:	4b2c      	ldr	r3, [pc, #176]	; (13010 <sched_after_mstr_free_slot_get+0x120>)
   12f5e:	9301      	str	r3, [sp, #4]
   12f60:	ab08      	add	r3, sp, #32
   12f62:	9300      	str	r3, [sp, #0]
   12f64:	462b      	mov	r3, r5
   12f66:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   12f6a:	4621      	mov	r1, r4
   12f6c:	2000      	movs	r0, #0
   12f6e:	f7fd fec7 	bl	10d00 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   12f72:	2802      	cmp	r0, #2
   12f74:	d0d2      	beq.n	12f1c <sched_after_mstr_free_slot_get+0x2c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12f76:	9b07      	ldr	r3, [sp, #28]
   12f78:	2b00      	cmp	r3, #0
   12f7a:	d1d3      	bne.n	12f24 <sched_after_mstr_free_slot_get+0x34>
		if (ticker_id == 0xff) {
   12f7c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   12f80:	2aff      	cmp	r2, #255	; 0xff
   12f82:	d028      	beq.n	12fd6 <sched_after_mstr_free_slot_get+0xe6>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   12f84:	2a06      	cmp	r2, #6
   12f86:	d9e5      	bls.n	12f54 <sched_after_mstr_free_slot_get+0x64>
				  _radio.connection_count)) {
   12f88:	4b22      	ldr	r3, [pc, #136]	; (13014 <sched_after_mstr_free_slot_get+0x124>)
   12f8a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   12f8e:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   12f90:	429a      	cmp	r2, r3
   12f92:	dadf      	bge.n	12f54 <sched_after_mstr_free_slot_get+0x64>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   12f94:	3a07      	subs	r2, #7
   12f96:	b292      	uxth	r2, r2
   12f98:	f44f 71aa 	mov.w	r1, #340	; 0x154
   12f9c:	4b1d      	ldr	r3, [pc, #116]	; (13014 <sched_after_mstr_free_slot_get+0x124>)
   12f9e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   12fa2:	f7fc f941 	bl	f228 <mem_get>
		if (conn && !conn->role) {
   12fa6:	4606      	mov	r6, r0
   12fa8:	2800      	cmp	r0, #0
   12faa:	d0d3      	beq.n	12f54 <sched_after_mstr_free_slot_get+0x64>
   12fac:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12fb0:	2b00      	cmp	r3, #0
   12fb2:	dbcf      	blt.n	12f54 <sched_after_mstr_free_slot_get+0x64>
			u32_t ticks_to_expire_normal = ticks_to_expire;
   12fb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
			if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   12fb8:	6803      	ldr	r3, [r0, #0]
   12fba:	2b00      	cmp	r3, #0
   12fbc:	dbb8      	blt.n	12f30 <sched_after_mstr_free_slot_get+0x40>
			if ((ticker_id_prev != 0xFF) &&
   12fbe:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   12fc2:	d0c1      	beq.n	12f48 <sched_after_mstr_free_slot_get+0x58>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
   12fc4:	9905      	ldr	r1, [sp, #20]
   12fc6:	4648      	mov	r0, r9
   12fc8:	f7fd ff2e 	bl	10e28 <ticker_ticks_diff_get>
			     (ticks_slot_prev_abs + ticks_slot_abs +
   12fcc:	eb07 030b 	add.w	r3, r7, fp
   12fd0:	3302      	adds	r3, #2
			if ((ticker_id_prev != 0xFF) &&
   12fd2:	4298      	cmp	r0, r3
   12fd4:	d9b8      	bls.n	12f48 <sched_after_mstr_free_slot_get+0x58>
	if (ticker_id_prev != 0xff) {
   12fd6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   12fda:	d010      	beq.n	12ffe <sched_after_mstr_free_slot_get+0x10e>
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12fdc:	9b05      	ldr	r3, [sp, #20]
   12fde:	443b      	add	r3, r7
   12fe0:	461f      	mov	r7, r3
   12fe2:	480d      	ldr	r0, [pc, #52]	; (13018 <sched_after_mstr_free_slot_get+0x128>)
   12fe4:	fba3 0100 	umull	r0, r1, r3, r0
   12fe8:	2307      	movs	r3, #7
   12fea:	fb03 1107 	mla	r1, r3, r7, r1
   12fee:	a306      	add	r3, pc, #24	; (adr r3, 13008 <sched_after_mstr_free_slot_get+0x118>)
   12ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
   12ff4:	f7ee f882 	bl	10fc <__aeabi_uldivmod>
						ticks_slot_prev_abs) +
   12ff8:	3020      	adds	r0, #32
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12ffa:	f8ca 0000 	str.w	r0, [sl]
}
   12ffe:	b00b      	add	sp, #44	; 0x2c
   13000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13004:	f3af 8000 	nop.w
   13008:	3b9aca00 	.word	0x3b9aca00
   1300c:	00000000 	.word	0x00000000
   13010:	00011535 	.word	0x00011535
   13014:	20000fec 	.word	0x20000fec
   13018:	1afd498d 	.word	0x1afd498d
   1301c:	00000000 	.word	0x00000000

00013020 <sched_after_mstr_free_offset_get>:
{
   13020:	b570      	push	{r4, r5, r6, lr}
   13022:	b082      	sub	sp, #8
   13024:	4606      	mov	r6, r0
   13026:	4615      	mov	r5, r2
   13028:	461c      	mov	r4, r3
	u32_t ticks_anchor_offset = ticks_anchor;
   1302a:	aa02      	add	r2, sp, #8
   1302c:	f842 5d04 	str.w	r5, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
   13030:	3127      	adds	r1, #39	; 0x27
   13032:	2001      	movs	r0, #1
   13034:	f7ff ff5c 	bl	12ef0 <sched_after_mstr_free_slot_get>
	if (ticks_anchor_offset != ticks_anchor) {
   13038:	9801      	ldr	r0, [sp, #4]
   1303a:	4285      	cmp	r5, r0
   1303c:	d011      	beq.n	13062 <sched_after_mstr_free_offset_get+0x42>
			TICKER_TICKS_TO_US(ticker_ticks_diff_get(ticks_anchor_offset,
   1303e:	4629      	mov	r1, r5
   13040:	f7fd fef2 	bl	10e28 <ticker_ticks_diff_get>
   13044:	4602      	mov	r2, r0
   13046:	4810      	ldr	r0, [pc, #64]	; (13088 <sched_after_mstr_free_offset_get+0x68>)
   13048:	fba2 0100 	umull	r0, r1, r2, r0
   1304c:	2307      	movs	r3, #7
   1304e:	fb03 1102 	mla	r1, r3, r2, r1
   13052:	a30b      	add	r3, pc, #44	; (adr r3, 13080 <sched_after_mstr_free_offset_get+0x60>)
   13054:	e9d3 2300 	ldrd	r2, r3, [r3]
   13058:	f7ee f850 	bl	10fc <__aeabi_uldivmod>
		*win_offset_us +=
   1305c:	6823      	ldr	r3, [r4, #0]
   1305e:	4418      	add	r0, r3
   13060:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & ((u32_t)1 << 31)) == 0) {
   13062:	6823      	ldr	r3, [r4, #0]
   13064:	2b00      	cmp	r3, #0
   13066:	db09      	blt.n	1307c <sched_after_mstr_free_offset_get+0x5c>
		u32_t conn_interval_us = conn_interval * 1250;
   13068:	f240 40e2 	movw	r0, #1250	; 0x4e2
   1306c:	fb00 f006 	mul.w	r0, r0, r6
		while (*win_offset_us > conn_interval_us) {
   13070:	e001      	b.n	13076 <sched_after_mstr_free_offset_get+0x56>
			*win_offset_us -= conn_interval_us;
   13072:	1a1b      	subs	r3, r3, r0
   13074:	6023      	str	r3, [r4, #0]
		while (*win_offset_us > conn_interval_us) {
   13076:	6823      	ldr	r3, [r4, #0]
   13078:	4298      	cmp	r0, r3
   1307a:	d3fa      	bcc.n	13072 <sched_after_mstr_free_offset_get+0x52>
}
   1307c:	b002      	add	sp, #8
   1307e:	bd70      	pop	{r4, r5, r6, pc}
   13080:	3b9aca00 	.word	0x3b9aca00
   13084:	00000000 	.word	0x00000000
   13088:	1afd498d 	.word	0x1afd498d

0001308c <mayfly_sched_win_offset_use>:
{
   1308c:	b510      	push	{r4, lr}
   1308e:	b082      	sub	sp, #8
   13090:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
   13092:	f100 0384 	add.w	r3, r0, #132	; 0x84
   13096:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   1309a:	68c1      	ldr	r1, [r0, #12]
   1309c:	8c80      	ldrh	r0, [r0, #36]	; 0x24
   1309e:	f7ff ffbf 	bl	13020 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   130a2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   130a6:	4a07      	ldr	r2, [pc, #28]	; (130c4 <mayfly_sched_win_offset_use+0x38>)
   130a8:	fba2 2303 	umull	r2, r3, r2, r3
   130ac:	0a9b      	lsrs	r3, r3, #10
   130ae:	a902      	add	r1, sp, #8
   130b0:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   130b4:	2202      	movs	r2, #2
   130b6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   130ba:	f7ed f901 	bl	2c0 <memcpy>
}
   130be:	b002      	add	sp, #8
   130c0:	bd10      	pop	{r4, pc}
   130c2:	bf00      	nop
   130c4:	d1b71759 	.word	0xd1b71759

000130c8 <mayfly_sched_after_mstr_free_offset_get>:
{
   130c8:	b510      	push	{r4, lr}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
   130ca:	4c05      	ldr	r4, [pc, #20]	; (130e0 <mayfly_sched_after_mstr_free_offset_get+0x18>)
   130cc:	f504 7380 	add.w	r3, r4, #256	; 0x100
   130d0:	4602      	mov	r2, r0
   130d2:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
   130d6:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
   130da:	f7ff ffa1 	bl	13020 <sched_after_mstr_free_offset_get>
   130de:	bd10      	pop	{r4, pc}
   130e0:	20000fec 	.word	0x20000fec

000130e4 <enc_rsp_send>:
{
   130e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   130e8:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   130ea:	4818      	ldr	r0, [pc, #96]	; (1314c <enc_rsp_send+0x68>)
   130ec:	f7fc f85f 	bl	f1ae <mem_acquire>
	LL_ASSERT(node_tx);
   130f0:	b330      	cbz	r0, 13140 <enc_rsp_send+0x5c>
   130f2:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   130f4:	7903      	ldrb	r3, [r0, #4]
   130f6:	f043 0303 	orr.w	r3, r3, #3
   130fa:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   130fc:	230d      	movs	r3, #13
   130fe:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   13100:	2604      	movs	r6, #4
   13102:	71c6      	strb	r6, [r0, #7]
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds);
   13104:	f100 0808 	add.w	r8, r0, #8
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds),
   13108:	4641      	mov	r1, r8
   1310a:	2008      	movs	r0, #8
   1310c:	f7fd faa2 	bl	10654 <rand_isr_get>
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs);
   13110:	f104 0710 	add.w	r7, r4, #16
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs),
   13114:	4639      	mov	r1, r7
   13116:	4630      	mov	r0, r6
   13118:	f7fd fa9c 	bl	10654 <rand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   1311c:	2208      	movs	r2, #8
   1311e:	4641      	mov	r1, r8
   13120:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   13124:	f7ed f8cc 	bl	2c0 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
   13128:	4632      	mov	r2, r6
   1312a:	4639      	mov	r1, r7
   1312c:	f505 708b 	add.w	r0, r5, #278	; 0x116
   13130:	f7ed f8c6 	bl	2c0 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
   13134:	4621      	mov	r1, r4
   13136:	4628      	mov	r0, r5
   13138:	f7fe facc 	bl	116d4 <ctrl_tx_enqueue>
   1313c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(node_tx);
   13140:	4040      	eors	r0, r0
   13142:	f380 8811 	msr	BASEPRI, r0
   13146:	f04f 0004 	mov.w	r0, #4
   1314a:	df02      	svc	2
   1314c:	20001144 	.word	0x20001144

00013150 <enc_req_reused_send>:
{
   13150:	b538      	push	{r3, r4, r5, lr}
   13152:	4605      	mov	r5, r0
   13154:	460c      	mov	r4, r1
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13156:	790b      	ldrb	r3, [r1, #4]
   13158:	f043 0303 	orr.w	r3, r3, #3
   1315c:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   1315e:	2317      	movs	r3, #23
   13160:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   13162:	2303      	movs	r3, #3
   13164:	71cb      	strb	r3, [r1, #7]
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
   13166:	2208      	movs	r2, #8
   13168:	f100 0179 	add.w	r1, r0, #121	; 0x79
   1316c:	18a0      	adds	r0, r4, r2
   1316e:	f7ed f8a7 	bl	2c0 <memcpy>
		conn->llcp.encryption.ediv[0];
   13172:	f895 3081 	ldrb.w	r3, [r5, #129]	; 0x81
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
   13176:	7423      	strb	r3, [r4, #16]
		conn->llcp.encryption.ediv[1];
   13178:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
   1317c:	7463      	strb	r3, [r4, #17]
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm),
   1317e:	f104 0112 	add.w	r1, r4, #18
   13182:	2008      	movs	r0, #8
   13184:	f7fd fa66 	bl	10654 <rand_isr_get>
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm),
   13188:	f104 011a 	add.w	r1, r4, #26
   1318c:	2004      	movs	r0, #4
   1318e:	f7fd fa61 	bl	10654 <rand_isr_get>
   13192:	bd38      	pop	{r3, r4, r5, pc}

00013194 <isr_rx_conn_pkt_ctrl>:
{
   13194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13198:	b082      	sub	sp, #8
   1319a:	4604      	mov	r4, r0
   1319c:	460f      	mov	r7, r1
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   1319e:	f100 0608 	add.w	r6, r0, #8
	if (_radio.conn_curr->role) {
   131a2:	4ba0      	ldr	r3, [pc, #640]	; (13424 <isr_rx_conn_pkt_ctrl+0x290>)
   131a4:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
   131a8:	f995 301d 	ldrsb.w	r3, [r5, #29]
   131ac:	2b00      	cmp	r3, #0
   131ae:	db11      	blt.n	131d4 <isr_rx_conn_pkt_ctrl+0x40>
		switch (pdu_data_rx->payload.llctrl.opcode) {
   131b0:	7ac1      	ldrb	r1, [r0, #11]
   131b2:	2918      	cmp	r1, #24
   131b4:	d82c      	bhi.n	13210 <isr_rx_conn_pkt_ctrl+0x7c>
   131b6:	e8df f001 	tbb	[pc, r1]
   131ba:	2323      	.short	0x2323
   131bc:	2b2b232b 	.word	0x2b2b232b
   131c0:	2b232b2b 	.word	0x2b232b2b
   131c4:	2b2b2b23 	.word	0x2b2b2b23
   131c8:	2b2b2b2b 	.word	0x2b2b2b2b
   131cc:	2b2b2b2b 	.word	0x2b2b2b2b
   131d0:	2b2b      	.short	0x2b2b
   131d2:	23          	.byte	0x23
   131d3:	00          	.byte	0x00
		switch (pdu_data_rx->payload.llctrl.opcode) {
   131d4:	7ac1      	ldrb	r1, [r0, #11]
   131d6:	1f0a      	subs	r2, r1, #4
   131d8:	2a15      	cmp	r2, #21
   131da:	d819      	bhi.n	13210 <isr_rx_conn_pkt_ctrl+0x7c>
   131dc:	e8df f002 	tbb	[pc, r2]
   131e0:	18180b0b 	.word	0x18180b0b
   131e4:	18181818 	.word	0x18181818
   131e8:	180b1818 	.word	0x180b1818
   131ec:	1818180b 	.word	0x1818180b
   131f0:	0b181818 	.word	0x0b181818
   131f4:	0b18      	.short	0x0b18
			unknown_rsp_send(_radio.conn_curr,
   131f6:	4628      	mov	r0, r5
   131f8:	f7fe fcca 	bl	11b90 <unknown_rsp_send>
			return 0;
   131fc:	2400      	movs	r4, #0
   131fe:	e003      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
			unknown_rsp_send(_radio.conn_curr,
   13200:	4628      	mov	r0, r5
   13202:	f7fe fcc5 	bl	11b90 <unknown_rsp_send>
			return 0;
   13206:	2400      	movs	r4, #0
}
   13208:	4620      	mov	r0, r4
   1320a:	b002      	add	sp, #8
   1320c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (pdu_data_rx->payload.llctrl.opcode) {
   13210:	7ae1      	ldrb	r1, [r4, #11]
   13212:	2919      	cmp	r1, #25
   13214:	f200 87e6 	bhi.w	141e4 <isr_rx_conn_pkt_ctrl+0x1050>
   13218:	e8df f011 	tbh	[pc, r1, lsl #1]
   1321c:	002e001a 	.word	0x002e001a
   13220:	0042003d 	.word	0x0042003d
   13224:	00800065 	.word	0x00800065
   13228:	04c60099 	.word	0x04c60099
   1322c:	010600de 	.word	0x010600de
   13230:	014b012d 	.word	0x014b012d
   13234:	01ad0170 	.word	0x01ad0170
   13238:	01c400de 	.word	0x01c400de
   1323c:	0395032d 	.word	0x0395032d
   13240:	04c104bb 	.word	0x04c104bb
   13244:	05180518 	.word	0x05180518
   13248:	06de0606 	.word	0x06de0606
   1324c:	07b9071b 	.word	0x07b9071b
		if (conn_update(_radio.conn_curr, pdu_data_rx) == 0) {
   13250:	4631      	mov	r1, r6
   13252:	4628      	mov	r0, r5
   13254:	f7fe fb90 	bl	11978 <conn_update>
   13258:	b930      	cbnz	r0, 13268 <isr_rx_conn_pkt_ctrl+0xd4>
			_radio.conn_curr->procedure_expire = 0;
   1325a:	4b72      	ldr	r3, [pc, #456]	; (13424 <isr_rx_conn_pkt_ctrl+0x290>)
   1325c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13260:	2400      	movs	r4, #0
   13262:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   13266:	e7cf      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   13268:	4b6e      	ldr	r3, [pc, #440]	; (13424 <isr_rx_conn_pkt_ctrl+0x290>)
   1326a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1326e:	2228      	movs	r2, #40	; 0x28
   13270:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   13274:	2400      	movs	r4, #0
   13276:	e7c7      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
		if (chan_map_update(_radio.conn_curr, pdu_data_rx)) {
   13278:	4631      	mov	r1, r6
   1327a:	4628      	mov	r0, r5
   1327c:	f7ff f99e 	bl	125bc <chan_map_update>
   13280:	2800      	cmp	r0, #0
   13282:	f000 87b5 	beq.w	141f0 <isr_rx_conn_pkt_ctrl+0x105c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   13286:	4b67      	ldr	r3, [pc, #412]	; (13424 <isr_rx_conn_pkt_ctrl+0x290>)
   13288:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1328c:	2228      	movs	r2, #40	; 0x28
   1328e:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   13292:	2400      	movs	r4, #0
   13294:	e7b8      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
			pdu_data_rx->payload.llctrl.ctrldata.terminate_ind.error_code;
   13296:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_terminate.reason_peer =
   13298:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
	u8_t nack = 0;
   1329c:	2400      	movs	r4, #0
		break;
   1329e:	e7b3      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   132a0:	2208      	movs	r2, #8
   132a2:	f104 0116 	add.w	r1, r4, #22
   132a6:	f105 0093 	add.w	r0, r5, #147	; 0x93
   132aa:	f7ed f809 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   132ae:	4d5d      	ldr	r5, [pc, #372]	; (13424 <isr_rx_conn_pkt_ctrl+0x290>)
   132b0:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   132b4:	2204      	movs	r2, #4
   132b6:	f104 011e 	add.w	r1, r4, #30
   132ba:	f500 7089 	add.w	r0, r0, #274	; 0x112
   132be:	f7ec ffff 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   132c2:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   132c6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   132ca:	f043 0304 	orr.w	r3, r3, #4
   132ce:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   132d2:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   132d6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   132da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   132de:	2301      	movs	r3, #1
   132e0:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   132e2:	2400      	movs	r4, #0
		break;
   132e4:	e790      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   132e6:	2208      	movs	r2, #8
   132e8:	f104 010c 	add.w	r1, r4, #12
   132ec:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   132f0:	f7ec ffe6 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   132f4:	4d4b      	ldr	r5, [pc, #300]	; (13424 <isr_rx_conn_pkt_ctrl+0x290>)
   132f6:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   132fa:	2204      	movs	r2, #4
   132fc:	f104 0114 	add.w	r1, r4, #20
   13300:	f500 708b 	add.w	r0, r0, #278	; 0x116
   13304:	f7ec ffdc 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   13308:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   1330c:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13310:	f043 0304 	orr.w	r3, r3, #4
   13314:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t nack = 0;
   13318:	2400      	movs	r4, #0
		break;
   1331a:	e775      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   1331c:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   13320:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   13324:	429a      	cmp	r2, r3
   13326:	d10c      	bne.n	13342 <isr_rx_conn_pkt_ctrl+0x1ae>
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   13328:	2303      	movs	r3, #3
   1332a:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
   1332e:	4b3d      	ldr	r3, [pc, #244]	; (13424 <isr_rx_conn_pkt_ctrl+0x290>)
   13330:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13334:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   13338:	3b01      	subs	r3, #1
   1333a:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
	u8_t nack = 0;
   1333e:	2400      	movs	r4, #0
		break;
   13340:	e762      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   13342:	4040      	eors	r0, r0
   13344:	f380 8811 	msr	BASEPRI, r0
   13348:	f04f 0004 	mov.w	r0, #4
   1334c:	df02      	svc	2
		if (_radio.role == ROLE_SLAVE) {
   1334e:	4b35      	ldr	r3, [pc, #212]	; (13424 <isr_rx_conn_pkt_ctrl+0x290>)
   13350:	7bdb      	ldrb	r3, [r3, #15]
   13352:	b2db      	uxtb	r3, r3
   13354:	2b03      	cmp	r3, #3
   13356:	d027      	beq.n	133a8 <isr_rx_conn_pkt_ctrl+0x214>
			_radio.conn_curr->pause_rx = 0;
   13358:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   1335c:	f36f 0382 	bfc	r3, #2, #1
   13360:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   13364:	4b2f      	ldr	r3, [pc, #188]	; (13424 <isr_rx_conn_pkt_ctrl+0x290>)
   13366:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1336a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1336e:	f36f 02c3 	bfc	r2, #3, #1
   13372:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		if (_radio.conn_curr->refresh) {
   13376:	4b2b      	ldr	r3, [pc, #172]	; (13424 <isr_rx_conn_pkt_ctrl+0x290>)
   13378:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1337c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13380:	f012 0f40 	tst.w	r2, #64	; 0x40
   13384:	d007      	beq.n	13396 <isr_rx_conn_pkt_ctrl+0x202>
			_radio.conn_curr->refresh = 0;
   13386:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1338a:	f36f 1286 	bfc	r2, #6, #1
   1338e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   13392:	2309      	movs	r3, #9
   13394:	7123      	strb	r3, [r4, #4]
		*rx_enqueue = 1;
   13396:	2301      	movs	r3, #1
   13398:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   1339a:	4b22      	ldr	r3, [pc, #136]	; (13424 <isr_rx_conn_pkt_ctrl+0x290>)
   1339c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   133a0:	2400      	movs	r4, #0
   133a2:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   133a6:	e72f      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   133a8:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   133ac:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   133b0:	429a      	cmp	r2, r3
   133b2:	d10b      	bne.n	133cc <isr_rx_conn_pkt_ctrl+0x238>
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   133b4:	2303      	movs	r3, #3
   133b6:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
   133ba:	4b1a      	ldr	r3, [pc, #104]	; (13424 <isr_rx_conn_pkt_ctrl+0x290>)
   133bc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   133c0:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   133c4:	3b01      	subs	r3, #1
   133c6:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   133ca:	e7d4      	b.n	13376 <isr_rx_conn_pkt_ctrl+0x1e2>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   133cc:	4040      	eors	r0, r0
   133ce:	f380 8811 	msr	BASEPRI, r0
   133d2:	f04f 0004 	mov.w	r0, #4
   133d6:	df02      	svc	2
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   133d8:	7b23      	ldrb	r3, [r4, #12]
   133da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   133de:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   133e2:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   133e6:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   133ea:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   133ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   133f0:	7ba2      	ldrb	r2, [r4, #14]
   133f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   133f6:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   133fa:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   133fe:	4013      	ands	r3, r2
   13400:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   13404:	4a07      	ldr	r2, [pc, #28]	; (13424 <isr_rx_conn_pkt_ctrl+0x290>)
   13406:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   1340a:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   1340e:	f043 0320 	orr.w	r3, r3, #32
   13412:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		feature_rsp_send(_radio.conn_curr);
   13416:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   1341a:	f7ff f8fd 	bl	12618 <feature_rsp_send>
	u8_t nack = 0;
   1341e:	2400      	movs	r4, #0
	break;
   13420:	e6f2      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
   13422:	bf00      	nop
   13424:	20000fec 	.word	0x20000fec
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   13428:	7b23      	ldrb	r3, [r4, #12]
   1342a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   1342e:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   13432:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   13436:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   1343a:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   1343c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   13440:	7ba2      	ldrb	r2, [r4, #14]
   13442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   13446:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   1344a:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   1344e:	4013      	ands	r3, r2
   13450:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   13454:	4ad2      	ldr	r2, [pc, #840]	; (137a0 <isr_rx_conn_pkt_ctrl+0x60c>)
   13456:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   1345a:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   1345e:	f043 0320 	orr.w	r3, r3, #32
   13462:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		*rx_enqueue = 1;
   13466:	2301      	movs	r3, #1
   13468:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   1346a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   1346e:	2400      	movs	r4, #0
   13470:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	break;
   13474:	e6c8      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
		pause_enc_rsp_send(_radio.conn_curr);
   13476:	4628      	mov	r0, r5
   13478:	f7fe fae8 	bl	11a4c <pause_enc_rsp_send>
		_radio.conn_curr->pause_rx = 1;
   1347c:	4bc8      	ldr	r3, [pc, #800]	; (137a0 <isr_rx_conn_pkt_ctrl+0x60c>)
   1347e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13482:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   13486:	f042 0204 	orr.w	r2, r2, #4
   1348a:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   1348e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13492:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   13496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1349a:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->enc_rx = 0;
   1349e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   134a2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   134a6:	f36f 1204 	bfc	r2, #4, #1
   134aa:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   134ae:	2400      	movs	r4, #0
		break;
   134b0:	e6aa      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.role == ROLE_MASTER) {
   134b2:	4bbb      	ldr	r3, [pc, #748]	; (137a0 <isr_rx_conn_pkt_ctrl+0x60c>)
   134b4:	7bdb      	ldrb	r3, [r3, #15]
   134b6:	b2db      	uxtb	r3, r3
   134b8:	2b04      	cmp	r3, #4
   134ba:	d00a      	beq.n	134d2 <isr_rx_conn_pkt_ctrl+0x33e>
		_radio.conn_curr->enc_tx = 0;
   134bc:	4bb8      	ldr	r3, [pc, #736]	; (137a0 <isr_rx_conn_pkt_ctrl+0x60c>)
   134be:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   134c2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   134c6:	f36f 1245 	bfc	r2, #5, #1
   134ca:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   134ce:	2400      	movs	r4, #0
		break;
   134d0:	e69a      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
			pause_enc_rsp_send(_radio.conn_curr);
   134d2:	4628      	mov	r0, r5
   134d4:	f7fe faba 	bl	11a4c <pause_enc_rsp_send>
			_radio.conn_curr->pause_rx = 1;
   134d8:	4ab1      	ldr	r2, [pc, #708]	; (137a0 <isr_rx_conn_pkt_ctrl+0x60c>)
   134da:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   134de:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   134e2:	f043 0304 	orr.w	r3, r3, #4
   134e6:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			_radio.conn_curr->enc_rx = 0;
   134ea:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   134ee:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   134f2:	f36f 1204 	bfc	r2, #4, #1
   134f6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   134fa:	e7df      	b.n	134bc <isr_rx_conn_pkt_ctrl+0x328>
			version_ind.version_number;
   134fc:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_version.version_number =
   134fe:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
		_radio.conn_curr->llcp_version. company_id =
   13502:	4ba7      	ldr	r3, [pc, #668]	; (137a0 <isr_rx_conn_pkt_ctrl+0x60c>)
   13504:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
   13508:	f8b4 100d 	ldrh.w	r1, [r4, #13]
		_radio.conn_curr->llcp_version. company_id =
   1350c:	f8a2 10aa 	strh.w	r1, [r2, #170]	; 0xaa
		_radio.conn_curr->llcp_version.sub_version_number =
   13510:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;
   13514:	f8b4 100f 	ldrh.w	r1, [r4, #15]
		_radio.conn_curr->llcp_version.sub_version_number =
   13518:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
		if ((_radio.conn_curr->llcp_version.tx != 0) &&
   1351c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13520:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
   13524:	f003 0303 	and.w	r3, r3, #3
   13528:	2b01      	cmp	r3, #1
   1352a:	d011      	beq.n	13550 <isr_rx_conn_pkt_ctrl+0x3bc>
		_radio.conn_curr->llcp_version.rx = 1;
   1352c:	4a9c      	ldr	r2, [pc, #624]	; (137a0 <isr_rx_conn_pkt_ctrl+0x60c>)
   1352e:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   13532:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
   13536:	f043 0302 	orr.w	r3, r3, #2
   1353a:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
		if (_radio.conn_curr->llcp_version.tx == 0) {
   1353e:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13542:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
   13546:	f012 0f01 	tst.w	r2, #1
   1354a:	d009      	beq.n	13560 <isr_rx_conn_pkt_ctrl+0x3cc>
	u8_t nack = 0;
   1354c:	2400      	movs	r4, #0
   1354e:	e65b      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
			*rx_enqueue = 1;
   13550:	703b      	strb	r3, [r7, #0]
			_radio.conn_curr->procedure_expire = 0;
   13552:	4b93      	ldr	r3, [pc, #588]	; (137a0 <isr_rx_conn_pkt_ctrl+0x60c>)
   13554:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13558:	2200      	movs	r2, #0
   1355a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   1355e:	e7e5      	b.n	1352c <isr_rx_conn_pkt_ctrl+0x398>
			_radio.conn_curr->llcp_version.tx = 1;
   13560:	f042 0201 	orr.w	r2, r2, #1
   13564:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			version_ind_send(_radio.conn_curr);
   13568:	4b8d      	ldr	r3, [pc, #564]	; (137a0 <isr_rx_conn_pkt_ctrl+0x60c>)
   1356a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   1356e:	f7ff f90b 	bl	12788 <version_ind_send>
	u8_t nack = 0;
   13572:	2400      	movs	r4, #0
   13574:	e648      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->pause_rx = 0;
   13576:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   1357a:	f36f 0382 	bfc	r3, #2, #1
   1357e:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   13582:	4b87      	ldr	r3, [pc, #540]	; (137a0 <isr_rx_conn_pkt_ctrl+0x60c>)
   13584:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13588:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   1358c:	f36f 01c3 	bfc	r1, #3, #1
   13590:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   13594:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13598:	2400      	movs	r4, #0
   1359a:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   1359e:	2301      	movs	r3, #1
   135a0:	703b      	strb	r3, [r7, #0]
		break;
   135a2:	e631      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
   135a4:	4a7e      	ldr	r2, [pc, #504]	; (137a0 <isr_rx_conn_pkt_ctrl+0x60c>)
   135a6:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   135aa:	b142      	cbz	r2, 135be <isr_rx_conn_pkt_ctrl+0x42a>
   135ac:	4295      	cmp	r5, r2
   135ae:	d006      	beq.n	135be <isr_rx_conn_pkt_ctrl+0x42a>
			reject_ext_ind_send(_radio.conn_curr,
   135b0:	2220      	movs	r2, #32
   135b2:	210f      	movs	r1, #15
   135b4:	4628      	mov	r0, r5
   135b6:	f7fe faa5 	bl	11b04 <reject_ext_ind_send>
	u8_t nack = 0;
   135ba:	2400      	movs	r4, #0
			break;
   135bc:	e624      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
		if (!_radio.conn_curr->role) {
   135be:	2b00      	cmp	r3, #0
   135c0:	f2c0 80bc 	blt.w	1373c <isr_rx_conn_pkt_ctrl+0x5a8>
			if ((conn->llcp_conn_param.req !=
   135c4:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
					conn->llcp_conn_param.ack) &&
   135c8:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
			if ((conn->llcp_conn_param.req !=
   135cc:	429a      	cmp	r2, r3
   135ce:	d008      	beq.n	135e2 <isr_rx_conn_pkt_ctrl+0x44e>
			    ((conn->llcp_conn_param.state ==
   135d0:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
   135d4:	f013 0307 	ands.w	r3, r3, #7
   135d8:	d016      	beq.n	13608 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_REQ) ||
   135da:	2b04      	cmp	r3, #4
   135dc:	d014      	beq.n	13608 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   135de:	2b05      	cmp	r3, #5
   135e0:	d012      	beq.n	13608 <isr_rx_conn_pkt_ctrl+0x474>
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   135e2:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   135e6:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   135ea:	429a      	cmp	r2, r3
   135ec:	d105      	bne.n	135fa <isr_rx_conn_pkt_ctrl+0x466>
				   (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   135ee:	f895 20f4 	ldrb.w	r2, [r5, #244]	; 0xf4
   135f2:	f895 30f5 	ldrb.w	r3, [r5, #245]	; 0xf5
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   135f6:	429a      	cmp	r2, r3
   135f8:	d00d      	beq.n	13616 <isr_rx_conn_pkt_ctrl+0x482>
				reject_ext_ind_send(_radio.conn_curr,
   135fa:	222a      	movs	r2, #42	; 0x2a
   135fc:	210f      	movs	r1, #15
   135fe:	4628      	mov	r0, r5
   13600:	f7fe fa80 	bl	11b04 <reject_ext_ind_send>
	u8_t nack = 0;
   13604:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   13606:	e5ff      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   13608:	2223      	movs	r2, #35	; 0x23
   1360a:	210f      	movs	r1, #15
   1360c:	4628      	mov	r0, r5
   1360e:	f7fe fa79 	bl	11b04 <reject_ext_ind_send>
	u8_t nack = 0;
   13612:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   13614:	e5f8      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
				if ((cpr->interval_min < 6) ||
   13616:	89a0      	ldrh	r0, [r4, #12]
   13618:	b282      	uxth	r2, r0
   1361a:	2a05      	cmp	r2, #5
   1361c:	d970      	bls.n	13700 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   1361e:	89e3      	ldrh	r3, [r4, #14]
				if ((cpr->interval_min < 6) ||
   13620:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   13624:	d86c      	bhi.n	13700 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   13626:	429a      	cmp	r2, r3
   13628:	d86a      	bhi.n	13700 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->latency > 499) ||
   1362a:	8a22      	ldrh	r2, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
   1362c:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   13630:	d266      	bcs.n	13700 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   13632:	8a61      	ldrh	r1, [r4, #18]
				    (cpr->latency > 499) ||
   13634:	2909      	cmp	r1, #9
   13636:	d963      	bls.n	13700 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   13638:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   1363c:	d860      	bhi.n	13700 <isr_rx_conn_pkt_ctrl+0x56c>
				     ((cpr->latency + 1) *
   1363e:	fb02 3203 	mla	r2, r2, r3, r3
				    (cpr->timeout > 3200) ||
   13642:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   13646:	da5b      	bge.n	13700 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->preferred_periodicity >
   13648:	7d22      	ldrb	r2, [r4, #20]
				      cpr->interval_max)) ||
   1364a:	4293      	cmp	r3, r2
   1364c:	d358      	bcc.n	13700 <isr_rx_conn_pkt_ctrl+0x56c>
				conn->llcp_conn_param.interval = cpr->interval_min;
   1364e:	f8a5 00c4 	strh.w	r0, [r5, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
   13652:	8a23      	ldrh	r3, [r4, #16]
   13654:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
   13658:	8a62      	ldrh	r2, [r4, #18]
   1365a:	b293      	uxth	r3, r2
   1365c:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
					cpr->preferred_periodicity;
   13660:	7d22      	ldrb	r2, [r4, #20]
				conn->llcp_conn_param.preferred_periodicity =
   13662:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
					cpr->reference_conn_event_count;
   13666:	f8b4 2015 	ldrh.w	r2, [r4, #21]
				conn->llcp_conn_param.reference_conn_event_count =
   1366a:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
   1366e:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   13672:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
   13676:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   1367a:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
   1367e:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   13682:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
   13686:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   1368a:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
   1368e:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   13692:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
   13696:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   1369a:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
				     conn->conn_interval) ||
   1369e:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   136a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
				if ((conn->llcp_conn_param.interval !=
   136a4:	4291      	cmp	r1, r2
   136a6:	d10f      	bne.n	136c8 <isr_rx_conn_pkt_ctrl+0x534>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   136a8:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   136aa:	f240 42e2 	movw	r2, #1250	; 0x4e2
   136ae:	fb02 f201 	mul.w	r2, r2, r1
   136b2:	f242 7110 	movw	r1, #10000	; 0x2710
   136b6:	fb01 2303 	mla	r3, r1, r3, r2
   136ba:	3b01      	subs	r3, #1
   136bc:	fb93 f3f2 	sdiv	r3, r3, r2
   136c0:	b29b      	uxth	r3, r3
				     conn->supervision_reload)) {
   136c2:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
				     conn->latency) ||
   136c4:	4293      	cmp	r3, r2
   136c6:	d02c      	beq.n	13722 <isr_rx_conn_pkt_ctrl+0x58e>
					if (conn->pause_tx) {
   136c8:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   136cc:	f013 0f08 	tst.w	r3, #8
   136d0:	d01d      	beq.n	1370e <isr_rx_conn_pkt_ctrl+0x57a>
						conn->llcp_conn_param.state =
   136d2:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   136d6:	2202      	movs	r2, #2
   136d8:	f362 0302 	bfi	r3, r2, #0, #3
   136dc:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.ack--;
   136e0:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   136e4:	3b01      	subs	r3, #1
   136e6:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
				if (_radio.conn_upd == 0) {
   136ea:	4b2d      	ldr	r3, [pc, #180]	; (137a0 <isr_rx_conn_pkt_ctrl+0x60c>)
   136ec:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   136f0:	2b00      	cmp	r3, #0
   136f2:	f040 8580 	bne.w	141f6 <isr_rx_conn_pkt_ctrl+0x1062>
					_radio.conn_upd = conn;
   136f6:	4b2a      	ldr	r3, [pc, #168]	; (137a0 <isr_rx_conn_pkt_ctrl+0x60c>)
   136f8:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   136fc:	2400      	movs	r4, #0
   136fe:	e583      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
					reject_ext_ind_send(conn,
   13700:	221e      	movs	r2, #30
   13702:	210f      	movs	r1, #15
   13704:	4628      	mov	r0, r5
   13706:	f7fe f9fd 	bl	11b04 <reject_ext_ind_send>
	u8_t nack = 0;
   1370a:	2400      	movs	r4, #0
					break;
   1370c:	e57c      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
						*rx_enqueue = 1;
   1370e:	2301      	movs	r3, #1
   13710:	703b      	strb	r3, [r7, #0]
						conn->llcp_conn_param.state =
   13712:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   13716:	2203      	movs	r2, #3
   13718:	f362 0302 	bfi	r3, r2, #0, #3
   1371c:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   13720:	e7de      	b.n	136e0 <isr_rx_conn_pkt_ctrl+0x54c>
					conn->llcp_conn_param.status = 0;
   13722:	2300      	movs	r3, #0
   13724:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
					conn->llcp_conn_param.cmd = 0;
   13728:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.state =
   1372c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   13730:	2201      	movs	r2, #1
   13732:	f362 0302 	bfi	r3, r2, #0, #3
   13736:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   1373a:	e7d1      	b.n	136e0 <isr_rx_conn_pkt_ctrl+0x54c>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   1373c:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
			    _radio.conn_curr->llcp_conn_param.ack) ||
   13740:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   13744:	429a      	cmp	r2, r3
   13746:	d007      	beq.n	13758 <isr_rx_conn_pkt_ctrl+0x5c4>
			   (_radio.conn_curr->llcp_conn_param.state ==
   13748:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
			    _radio.conn_curr->llcp_conn_param.ack) ||
   1374c:	f013 0307 	ands.w	r3, r3, #7
   13750:	d002      	beq.n	13758 <isr_rx_conn_pkt_ctrl+0x5c4>
			    LLCP_CPR_STATE_REQ) ||
   13752:	2b04      	cmp	r3, #4
   13754:	f040 8089 	bne.w	1386a <isr_rx_conn_pkt_ctrl+0x6d6>
			if ((cpr->interval_min < 6) ||
   13758:	89a1      	ldrh	r1, [r4, #12]
   1375a:	b28a      	uxth	r2, r1
   1375c:	2a05      	cmp	r2, #5
   1375e:	d917      	bls.n	13790 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   13760:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   13762:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   13766:	d813      	bhi.n	13790 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   13768:	429a      	cmp	r2, r3
   1376a:	d811      	bhi.n	13790 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->latency > 499) ||
   1376c:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   1376e:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   13772:	d20d      	bcs.n	13790 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   13774:	8a60      	ldrh	r0, [r4, #18]
			    (cpr->latency > 499) ||
   13776:	2809      	cmp	r0, #9
   13778:	d90a      	bls.n	13790 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   1377a:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   1377e:	d807      	bhi.n	13790 <isr_rx_conn_pkt_ctrl+0x5fc>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   13780:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   13784:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
   13788:	da02      	bge.n	13790 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   1378a:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   1378c:	4293      	cmp	r3, r2
   1378e:	d209      	bcs.n	137a4 <isr_rx_conn_pkt_ctrl+0x610>
				reject_ext_ind_send(conn,
   13790:	221e      	movs	r2, #30
   13792:	210f      	movs	r1, #15
   13794:	4628      	mov	r0, r5
   13796:	f7fe f9b5 	bl	11b04 <reject_ext_ind_send>
	u8_t nack = 0;
   1379a:	2400      	movs	r4, #0
				break;
   1379c:	e534      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
   1379e:	bf00      	nop
   137a0:	20000fec 	.word	0x20000fec
			conn->llcp_conn_param.interval = cpr->interval_min;
   137a4:	f8a5 10c4 	strh.w	r1, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   137a8:	8a23      	ldrh	r3, [r4, #16]
   137aa:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   137ae:	8a62      	ldrh	r2, [r4, #18]
   137b0:	b293      	uxth	r3, r2
   137b2:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   137b6:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   137b8:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   137bc:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   137c0:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   137c4:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   137c8:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   137cc:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   137d0:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   137d4:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   137d8:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   137dc:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   137e0:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   137e4:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   137e8:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   137ec:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   137f0:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			     conn->conn_interval) ||
   137f4:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   137f8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
			if ((conn->llcp_conn_param.interval !=
   137fa:	4291      	cmp	r1, r2
   137fc:	d013      	beq.n	13826 <isr_rx_conn_pkt_ctrl+0x692>
				*rx_enqueue = 1;
   137fe:	2301      	movs	r3, #1
   13800:	703b      	strb	r3, [r7, #0]
				conn->llcp_conn_param.state =
   13802:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   13806:	2203      	movs	r2, #3
   13808:	f362 0302 	bfi	r3, r2, #0, #3
   1380c:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
   13810:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   13814:	3b01      	subs	r3, #1
   13816:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
   1381a:	4bcb      	ldr	r3, [pc, #812]	; (13b48 <isr_rx_conn_pkt_ctrl+0x9b4>)
   1381c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   13820:	b1f3      	cbz	r3, 13860 <isr_rx_conn_pkt_ctrl+0x6cc>
	u8_t nack = 0;
   13822:	2400      	movs	r4, #0
   13824:	e4f0      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   13826:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   13828:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1382c:	fb02 f201 	mul.w	r2, r2, r1
   13830:	f242 7110 	movw	r1, #10000	; 0x2710
   13834:	fb01 2303 	mla	r3, r1, r3, r2
   13838:	3b01      	subs	r3, #1
   1383a:	fb93 f3f2 	sdiv	r3, r3, r2
   1383e:	b29b      	uxth	r3, r3
			     conn->supervision_reload)) {
   13840:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
			    (conn->llcp_conn_param.latency != conn->latency) ||
   13842:	4293      	cmp	r3, r2
   13844:	d1db      	bne.n	137fe <isr_rx_conn_pkt_ctrl+0x66a>
				conn->llcp_conn_param.status = 0;
   13846:	2300      	movs	r3, #0
   13848:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
   1384c:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.state =
   13850:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   13854:	2201      	movs	r2, #1
   13856:	f362 0302 	bfi	r3, r2, #0, #3
   1385a:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   1385e:	e7d7      	b.n	13810 <isr_rx_conn_pkt_ctrl+0x67c>
				_radio.conn_upd = conn;
   13860:	4bb9      	ldr	r3, [pc, #740]	; (13b48 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13862:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   13866:	2400      	movs	r4, #0
   13868:	e4ce      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(0);
   1386a:	4040      	eors	r0, r0
   1386c:	f380 8811 	msr	BASEPRI, r0
   13870:	f04f 0004 	mov.w	r0, #4
   13874:	df02      	svc	2
		if (!_radio.conn_curr->role &&
   13876:	2b00      	cmp	r3, #0
   13878:	f2c0 84c0 	blt.w	141fc <isr_rx_conn_pkt_ctrl+0x1068>
		    (_radio.conn_curr->llcp_conn_param.req !=
   1387c:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
		     _radio.conn_curr->llcp_conn_param.ack) &&
   13880:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		if (!_radio.conn_curr->role &&
   13884:	429a      	cmp	r2, r3
   13886:	f000 84bc 	beq.w	14202 <isr_rx_conn_pkt_ctrl+0x106e>
		    (_radio.conn_curr->llcp_conn_param.state ==
   1388a:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   1388e:	f003 0307 	and.w	r3, r3, #7
		     _radio.conn_curr->llcp_conn_param.ack) &&
   13892:	2b04      	cmp	r3, #4
   13894:	d001      	beq.n	1389a <isr_rx_conn_pkt_ctrl+0x706>
	u8_t nack = 0;
   13896:	2400      	movs	r4, #0
   13898:	e4b6      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
			if ((cpr->interval_min < 6) ||
   1389a:	89a2      	ldrh	r2, [r4, #12]
   1389c:	2a05      	cmp	r2, #5
   1389e:	d917      	bls.n	138d0 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   138a0:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   138a2:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   138a6:	d813      	bhi.n	138d0 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   138a8:	429a      	cmp	r2, r3
   138aa:	d811      	bhi.n	138d0 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->latency > 499) ||
   138ac:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   138ae:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   138b2:	d20d      	bcs.n	138d0 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   138b4:	8a61      	ldrh	r1, [r4, #18]
			    (cpr->latency > 499) ||
   138b6:	2909      	cmp	r1, #9
   138b8:	d90a      	bls.n	138d0 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   138ba:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   138be:	d807      	bhi.n	138d0 <isr_rx_conn_pkt_ctrl+0x73c>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   138c0:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   138c4:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   138c8:	da02      	bge.n	138d0 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   138ca:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   138cc:	4293      	cmp	r3, r2
   138ce:	d206      	bcs.n	138de <isr_rx_conn_pkt_ctrl+0x74a>
				reject_ext_ind_send(conn,
   138d0:	221e      	movs	r2, #30
   138d2:	2110      	movs	r1, #16
   138d4:	4628      	mov	r0, r5
   138d6:	f7fe f915 	bl	11b04 <reject_ext_ind_send>
	u8_t nack = 0;
   138da:	2400      	movs	r4, #0
				break;
   138dc:	e494      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->procedure_expire = 0;
   138de:	2300      	movs	r3, #0
   138e0:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
   138e4:	89a2      	ldrh	r2, [r4, #12]
   138e6:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   138ea:	8a22      	ldrh	r2, [r4, #16]
   138ec:	f8a5 20c6 	strh.w	r2, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   138f0:	8a62      	ldrh	r2, [r4, #18]
   138f2:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   138f6:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   138f8:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   138fc:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   13900:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   13904:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   13908:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   1390c:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   13910:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   13914:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   13918:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   1391c:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   13920:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   13924:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   13928:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   1392c:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   13930:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   13934:	f895 20c2 	ldrb.w	r2, [r5, #194]	; 0xc2
   13938:	2101      	movs	r1, #1
   1393a:	f361 0202 	bfi	r2, r1, #0, #3
   1393e:	f885 20c2 	strb.w	r2, [r5, #194]	; 0xc2
	u8_t nack = 0;
   13942:	461c      	mov	r4, r3
   13944:	e460      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
	} else if (_radio.conn_curr->llcp_phy.ack !=
   13946:	4b80      	ldr	r3, [pc, #512]	; (13b48 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13948:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1394c:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
   13950:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
   13954:	4291      	cmp	r1, r2
   13956:	d112      	bne.n	1397e <isr_rx_conn_pkt_ctrl+0x7ea>
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   13958:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
		   _radio.conn_curr->llcp_conn_param.req) {
   1395c:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   13960:	4291      	cmp	r1, r2
   13962:	d14c      	bne.n	139fe <isr_rx_conn_pkt_ctrl+0x86a>
	} else if (_radio.conn_curr->llcp_length.ack !=
   13964:	f893 10e9 	ldrb.w	r1, [r3, #233]	; 0xe9
		   _radio.conn_curr->llcp_length.req) {
   13968:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
   1396c:	4291      	cmp	r1, r2
   1396e:	f000 80ef 	beq.w	13b50 <isr_rx_conn_pkt_ctrl+0x9bc>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   13972:	7b21      	ldrb	r1, [r4, #12]
   13974:	2914      	cmp	r1, #20
   13976:	f000 80cb 	beq.w	13b10 <isr_rx_conn_pkt_ctrl+0x97c>
	u8_t nack = 0;
   1397a:	2400      	movs	r4, #0
   1397c:	e444      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   1397e:	7b23      	ldrb	r3, [r4, #12]
   13980:	2b16      	cmp	r3, #22
   13982:	d001      	beq.n	13988 <isr_rx_conn_pkt_ctrl+0x7f4>
	u8_t nack = 0;
   13984:	2400      	movs	r4, #0
   13986:	e43f      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
		if (rej_ext_ind->error_code != 0x23) {
   13988:	7b63      	ldrb	r3, [r4, #13]
   1398a:	2b23      	cmp	r3, #35	; 0x23
   1398c:	d017      	beq.n	139be <isr_rx_conn_pkt_ctrl+0x82a>
			_radio.conn_curr->llcp_phy.ack =
   1398e:	4b6e      	ldr	r3, [pc, #440]	; (13b48 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13990:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_phy.req;
   13994:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
			_radio.conn_curr->llcp_phy.ack =
   13998:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   1399c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   139a0:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   139a4:	f3c1 01c2 	ubfx	r1, r1, #3, #3
			_radio.conn_curr->phy_tx_time =
   139a8:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
   139ac:	f361 0002 	bfi	r0, r1, #0, #3
   139b0:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
   139b4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   139b8:	2200      	movs	r2, #0
   139ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
   139be:	4b62      	ldr	r3, [pc, #392]	; (13b48 <isr_rx_conn_pkt_ctrl+0x9b4>)
   139c0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   139c4:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   139c8:	f013 0f02 	tst.w	r3, #2
   139cc:	f000 841c 	beq.w	14208 <isr_rx_conn_pkt_ctrl+0x1074>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   139d0:	230c      	movs	r3, #12
   139d2:	7123      	strb	r3, [r4, #4]
		p->status = rej_ext_ind->error_code;
   139d4:	7b63      	ldrb	r3, [r4, #13]
   139d6:	72e3      	strb	r3, [r4, #11]
		p->tx = _radio.conn_curr->phy_tx;
   139d8:	4a5b      	ldr	r2, [pc, #364]	; (13b48 <isr_rx_conn_pkt_ctrl+0x9b4>)
   139da:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   139de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   139e2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   139e6:	7323      	strb	r3, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
   139e8:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   139ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   139f0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   139f4:	7363      	strb	r3, [r4, #13]
		*rx_enqueue = 1;
   139f6:	2301      	movs	r3, #1
   139f8:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   139fa:	2400      	movs	r4, #0
   139fc:	e404      	b.n	13208 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   139fe:	7b23      	ldrb	r3, [r4, #12]
   13a00:	2b0f      	cmp	r3, #15
   13a02:	d002      	beq.n	13a0a <isr_rx_conn_pkt_ctrl+0x876>
	u8_t nack = 0;
   13a04:	2400      	movs	r4, #0
   13a06:	f7ff bbff 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
	conn = _radio.conn_curr;
   13a0a:	4b4f      	ldr	r3, [pc, #316]	; (13b48 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13a0c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
   13a10:	f993 201d 	ldrsb.w	r2, [r3, #29]
   13a14:	2a00      	cmp	r2, #0
   13a16:	db02      	blt.n	13a1e <isr_rx_conn_pkt_ctrl+0x88a>
   13a18:	7b62      	ldrb	r2, [r4, #13]
   13a1a:	2a1a      	cmp	r2, #26
   13a1c:	d037      	beq.n	13a8e <isr_rx_conn_pkt_ctrl+0x8fa>
	else if (rej_ext_ind->error_code != 0x23) {
   13a1e:	7b62      	ldrb	r2, [r4, #13]
   13a20:	2a23      	cmp	r2, #35	; 0x23
   13a22:	d012      	beq.n	13a4a <isr_rx_conn_pkt_ctrl+0x8b6>
		LL_ASSERT(_radio.conn_upd == conn);
   13a24:	4a48      	ldr	r2, [pc, #288]	; (13b48 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13a26:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   13a2a:	4293      	cmp	r3, r2
   13a2c:	d166      	bne.n	13afc <isr_rx_conn_pkt_ctrl+0x968>
		_radio.conn_upd = NULL;
   13a2e:	2200      	movs	r2, #0
   13a30:	4945      	ldr	r1, [pc, #276]	; (13b48 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13a32:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			conn->llcp_conn_param.req;
   13a36:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
		conn->llcp_conn_param.ack =
   13a3a:	f883 10c1 	strb.w	r1, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
   13a3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (conn->role) {
   13a42:	f993 201d 	ldrsb.w	r2, [r3, #29]
   13a46:	2a00      	cmp	r2, #0
   13a48:	db5e      	blt.n	13b08 <isr_rx_conn_pkt_ctrl+0x974>
	if (!conn->llcp_conn_param.cmd) {
   13a4a:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   13a4e:	f012 0f08 	tst.w	r2, #8
   13a52:	f000 83dc 	beq.w	1420e <isr_rx_conn_pkt_ctrl+0x107a>
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   13a56:	2208      	movs	r2, #8
   13a58:	7122      	strb	r2, [r4, #4]
	cp->status = rej_ext_ind->error_code;
   13a5a:	7b62      	ldrb	r2, [r4, #13]
   13a5c:	72e2      	strb	r2, [r4, #11]
	cp->interval = conn->conn_interval;
   13a5e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   13a60:	81a2      	strh	r2, [r4, #12]
	cp->latency = conn->latency;
   13a62:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   13a64:	81e2      	strh	r2, [r4, #14]
	cp->timeout = conn->supervision_reload *
   13a66:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
		      conn->conn_interval * 125 / 1000;
   13a68:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
   13a6a:	fb03 f302 	mul.w	r3, r3, r2
		      conn->conn_interval * 125 / 1000;
   13a6e:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   13a72:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   13a76:	4a35      	ldr	r2, [pc, #212]	; (13b4c <isr_rx_conn_pkt_ctrl+0x9b8>)
   13a78:	fb82 1203 	smull	r1, r2, r2, r3
   13a7c:	17db      	asrs	r3, r3, #31
	cp->timeout = conn->supervision_reload *
   13a7e:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
   13a82:	8223      	strh	r3, [r4, #16]
	*rx_enqueue = 1;
   13a84:	2301      	movs	r3, #1
   13a86:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13a88:	2400      	movs	r4, #0
   13a8a:	f7ff bbbd 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13a8e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   13a92:	f893 0075 	ldrb.w	r0, [r3, #117]	; 0x75
   13a96:	4282      	cmp	r2, r0
   13a98:	d12a      	bne.n	13af0 <isr_rx_conn_pkt_ctrl+0x95c>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   13a9a:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   13a9e:	2105      	movs	r1, #5
   13aa0:	f361 0202 	bfi	r2, r1, #0, #3
   13aa4:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   13aa8:	2501      	movs	r5, #1
   13aaa:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   13aae:	2400      	movs	r4, #0
   13ab0:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   13ab4:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
   13ab8:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   13abc:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
   13ac0:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   13ac4:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
   13ac8:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   13acc:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   13ad0:	f365 0101 	bfi	r1, r5, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   13ad4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   13ad8:	406a      	eors	r2, r5
   13ada:	f362 0182 	bfi	r1, r2, #2, #1
   13ade:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   13ae2:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
		conn->llcp_ack--;
   13ae6:	3801      	subs	r0, #1
   13ae8:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
   13aec:	f7ff bb8c 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13af0:	4040      	eors	r0, r0
   13af2:	f380 8811 	msr	BASEPRI, r0
   13af6:	f04f 0004 	mov.w	r0, #4
   13afa:	df02      	svc	2
		LL_ASSERT(_radio.conn_upd == conn);
   13afc:	4040      	eors	r0, r0
   13afe:	f380 8811 	msr	BASEPRI, r0
   13b02:	f04f 0004 	mov.w	r0, #4
   13b06:	df02      	svc	2
			    conn->llcp_conn_param.ticks_to_offset_next;
   13b08:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
			conn->slave.ticks_to_offset =
   13b0c:	671a      	str	r2, [r3, #112]	; 0x70
   13b0e:	e79c      	b.n	13a4a <isr_rx_conn_pkt_ctrl+0x8b6>
		conn->llcp_length.ack = conn->llcp_length.req;
   13b10:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->procedure_expire = 0;
   13b14:	2200      	movs	r2, #0
   13b16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		conn->pause_tx = 0;
   13b1a:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
   13b1e:	f362 01c3 	bfi	r1, r2, #3, #1
   13b22:	f883 10f8 	strb.w	r1, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   13b26:	2109      	movs	r1, #9
   13b28:	7261      	strb	r1, [r4, #9]
		pdu_data_rx->payload.llctrl.opcode =
   13b2a:	2115      	movs	r1, #21
   13b2c:	72e1      	strb	r1, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   13b2e:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   13b30:	81a1      	strh	r1, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   13b32:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
   13b34:	8221      	strh	r1, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
   13b36:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   13b38:	81e1      	strh	r1, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
   13b3a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   13b3c:	8263      	strh	r3, [r4, #18]
		*rx_enqueue = 1;
   13b3e:	2301      	movs	r3, #1
   13b40:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13b42:	4614      	mov	r4, r2
   13b44:	f7ff bb60 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
   13b48:	20000fec 	.word	0x20000fec
   13b4c:	10624dd3 	.word	0x10624dd3
		switch (rej_ext_ind->reject_opcode) {
   13b50:	7b22      	ldrb	r2, [r4, #12]
   13b52:	2a03      	cmp	r2, #3
   13b54:	f040 835e 	bne.w	14214 <isr_rx_conn_pkt_ctrl+0x1080>
			_radio.conn_curr->pause_rx = 0;
   13b58:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13b5c:	f36f 0282 	bfc	r2, #2, #1
   13b60:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   13b64:	4bcb      	ldr	r3, [pc, #812]	; (13e94 <isr_rx_conn_pkt_ctrl+0xd00>)
   13b66:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13b6a:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   13b6e:	f36f 01c3 	bfc	r1, #3, #1
   13b72:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   13b76:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13b7a:	2300      	movs	r3, #0
   13b7c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
			pdu_rx->payload.llctrl.opcode =
   13b80:	220d      	movs	r2, #13
   13b82:	72e2      	strb	r2, [r4, #11]
				rej_ext_ind->error_code;
   13b84:	7b62      	ldrb	r2, [r4, #13]
			pdu_rx->payload.llctrl.ctrldata.reject_ind.error_code =
   13b86:	7322      	strb	r2, [r4, #12]
			*rx_enqueue = 1;
   13b88:	2201      	movs	r2, #1
   13b8a:	703a      	strb	r2, [r7, #0]
	u8_t nack = 0;
   13b8c:	461c      	mov	r4, r3
   13b8e:	f7ff bb3b 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
		ping_resp_send(_radio.conn_curr);
   13b92:	4628      	mov	r0, r5
   13b94:	f7fd ff76 	bl	11a84 <ping_resp_send>
	u8_t nack = 0;
   13b98:	2400      	movs	r4, #0
		break;
   13b9a:	f7ff bb35 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->procedure_expire = 0;
   13b9e:	2400      	movs	r4, #0
   13ba0:	f8a5 4044 	strh.w	r4, [r5, #68]	; 0x44
		break;
   13ba4:	f7ff bb30 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_length.req !=
   13ba8:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
			   _radio.conn_curr->llcp_length.ack) {
   13bac:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
		} else if (_radio.conn_curr->llcp_length.req !=
   13bb0:	4293      	cmp	r3, r2
   13bb2:	d014      	beq.n	13bde <isr_rx_conn_pkt_ctrl+0xa4a>
			_radio.conn_curr->llcp_length.ack =
   13bb4:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
   13bb8:	4bb6      	ldr	r3, [pc, #728]	; (13e94 <isr_rx_conn_pkt_ctrl+0xd00>)
   13bba:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13bbe:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13bc2:	f36f 02c3 	bfc	r2, #3, #1
   13bc6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			*rx_enqueue = 1;
   13bca:	2301      	movs	r3, #1
   13bcc:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   13bce:	4bb1      	ldr	r3, [pc, #708]	; (13e94 <isr_rx_conn_pkt_ctrl+0xd00>)
   13bd0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13bd4:	2400      	movs	r4, #0
   13bd6:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   13bda:	f7ff bb15 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_phy.req !=
   13bde:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			   _radio.conn_curr->llcp_phy.ack) {
   13be2:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		} else if (_radio.conn_curr->llcp_phy.req !=
   13be6:	4293      	cmp	r3, r2
   13be8:	d02a      	beq.n	13c40 <isr_rx_conn_pkt_ctrl+0xaac>
			_radio.conn_curr->llcp_phy.ack =
   13bea:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   13bee:	49a9      	ldr	r1, [pc, #676]	; (13e94 <isr_rx_conn_pkt_ctrl+0xd00>)
   13bf0:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   13bf4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   13bf8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   13bfc:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
   13c00:	f362 0002 	bfi	r0, r2, #0, #3
   13c04:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
   13c08:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13c0c:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   13c10:	f013 0f02 	tst.w	r3, #2
   13c14:	d0db      	beq.n	13bce <isr_rx_conn_pkt_ctrl+0xa3a>
				radio_pdu_node_rx->hdr.type =
   13c16:	230c      	movs	r3, #12
   13c18:	7123      	strb	r3, [r4, #4]
				p->status = 0;
   13c1a:	2300      	movs	r3, #0
   13c1c:	72e3      	strb	r3, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
   13c1e:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13c22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   13c26:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13c2a:	7323      	strb	r3, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
   13c2c:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13c30:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   13c34:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13c38:	7363      	strb	r3, [r4, #13]
				*rx_enqueue = 1;
   13c3a:	2301      	movs	r3, #1
   13c3c:	703b      	strb	r3, [r7, #0]
   13c3e:	e7c6      	b.n	13bce <isr_rx_conn_pkt_ctrl+0xa3a>
			switch (llctrl->ctrldata.unknown_rsp.type) {
   13c40:	7b23      	ldrb	r3, [r4, #12]
   13c42:	2b12      	cmp	r3, #18
   13c44:	d0c3      	beq.n	13bce <isr_rx_conn_pkt_ctrl+0xa3a>
				*rx_enqueue = 1;
   13c46:	2301      	movs	r3, #1
   13c48:	703b      	strb	r3, [r7, #0]
				break;
   13c4a:	e7c0      	b.n	13bce <isr_rx_conn_pkt_ctrl+0xa3a>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   13c4c:	4b91      	ldr	r3, [pc, #580]	; (13e94 <isr_rx_conn_pkt_ctrl+0xd00>)
   13c4e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   13c52:	8e01      	ldrh	r1, [r0, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   13c54:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
   13c56:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
   13c5a:	f8b0 8034 	ldrh.w	r8, [r0, #52]	; 0x34
	    ((_radio.conn_curr->llcp_length.req ==
   13c5e:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	      _radio.conn_curr->llcp_length.ack) &&
   13c62:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	if (/* Local idle, and Peer request then complete the Peer procedure
   13c66:	429a      	cmp	r2, r3
   13c68:	d020      	beq.n	13cac <isr_rx_conn_pkt_ctrl+0xb18>
	      PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   13c6a:	429a      	cmp	r2, r3
   13c6c:	d007      	beq.n	13c7e <isr_rx_conn_pkt_ctrl+0xaea>
	     ((((_radio.conn_curr->llcp_length.state ==
   13c6e:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
		 LLCP_LENGTH_STATE_REQ) ||
   13c72:	f003 0303 	and.w	r3, r3, #3
	      _radio.conn_curr->llcp_length.ack) &&
   13c76:	2b01      	cmp	r3, #1
   13c78:	d960      	bls.n	13d3c <isr_rx_conn_pkt_ctrl+0xba8>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   13c7a:	2b02      	cmp	r3, #2
   13c7c:	d062      	beq.n	13d44 <isr_rx_conn_pkt_ctrl+0xbb0>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   13c7e:	78f3      	ldrb	r3, [r6, #3]
   13c80:	2b15      	cmp	r3, #21
   13c82:	f040 80cb 	bne.w	13e1c <isr_rx_conn_pkt_ctrl+0xc88>
	u8_t nack = 0;
   13c86:	2400      	movs	r4, #0
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   13c88:	78f3      	ldrb	r3, [r6, #3]
	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
   13c8a:	2b14      	cmp	r3, #20
   13c8c:	f47f aabc 	bne.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   13c90:	2c00      	cmp	r4, #0
   13c92:	f47f aab9 	bne.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
		length_resp_send(_radio.conn_curr, eff_rx_octets, eff_rx_time,
   13c96:	4b7f      	ldr	r3, [pc, #508]	; (13e94 <isr_rx_conn_pkt_ctrl+0xd00>)
   13c98:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   13c9c:	f8cd 8000 	str.w	r8, [sp]
   13ca0:	462b      	mov	r3, r5
   13ca2:	464a      	mov	r2, r9
   13ca4:	f7fd ff0a 	bl	11abc <length_resp_send>
		break;
   13ca8:	f7ff baae 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
	     (pdu_data_rx->payload.llctrl.opcode ==
   13cac:	78f4      	ldrb	r4, [r6, #3]
	      _radio.conn_curr->llcp_length.ack) &&
   13cae:	2c14      	cmp	r4, #20
   13cb0:	d1db      	bne.n	13c6a <isr_rx_conn_pkt_ctrl+0xad6>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   13cb2:	88b3      	ldrh	r3, [r6, #4]
   13cb4:	2b1a      	cmp	r3, #26
   13cb6:	d903      	bls.n	13cc0 <isr_rx_conn_pkt_ctrl+0xb2c>
			eff_tx_octets = min(lr->max_rx_octets,
   13cb8:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   13cba:	429d      	cmp	r5, r3
   13cbc:	bf28      	it	cs
   13cbe:	461d      	movcs	r5, r3
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   13cc0:	f8b6 a008 	ldrh.w	sl, [r6, #8]
   13cc4:	f1ba 0f1a 	cmp.w	sl, #26
   13cc8:	d942      	bls.n	13d50 <isr_rx_conn_pkt_ctrl+0xbbc>
			eff_rx_octets = min(lr->max_tx_octets,
   13cca:	f1ba 0f1b 	cmp.w	sl, #27
   13cce:	bf28      	it	cs
   13cd0:	f04f 0a1b 	movcs.w	sl, #27
		if (lr->max_rx_time >=
   13cd4:	88f3      	ldrh	r3, [r6, #6]
   13cd6:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13cda:	d304      	bcc.n	13ce6 <isr_rx_conn_pkt_ctrl+0xb52>
			eff_tx_time = min(lr->max_rx_time,
   13cdc:	f8b0 8032 	ldrh.w	r8, [r0, #50]	; 0x32
   13ce0:	4598      	cmp	r8, r3
   13ce2:	bf28      	it	cs
   13ce4:	4698      	movcs	r8, r3
		if (lr->max_tx_time >=
   13ce6:	8973      	ldrh	r3, [r6, #10]
   13ce8:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13cec:	d305      	bcc.n	13cfa <isr_rx_conn_pkt_ctrl+0xb66>
			eff_rx_time = min(lr->max_tx_time,
   13cee:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13cf2:	bf28      	it	cs
   13cf4:	f44f 73a4 	movcs.w	r3, #328	; 0x148
   13cf8:	4699      	mov	r9, r3
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
   13cfa:	4551      	cmp	r1, sl
   13cfc:	d066      	beq.n	13dcc <isr_rx_conn_pkt_ctrl+0xc38>
	if (_radio.packet_rx_acquire >=
   13cfe:	4b65      	ldr	r3, [pc, #404]	; (13e94 <isr_rx_conn_pkt_ctrl+0xd00>)
   13d00:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   13d04:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13d08:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   13d0a:	429a      	cmp	r2, r3
   13d0c:	d322      	bcc.n	13d54 <isr_rx_conn_pkt_ctrl+0xbc0>
			_radio.packet_rx_last);
   13d0e:	4b61      	ldr	r3, [pc, #388]	; (13e94 <isr_rx_conn_pkt_ctrl+0xd00>)
   13d10:	f893 413d 	ldrb.w	r4, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   13d14:	1b14      	subs	r4, r2, r4
   13d16:	b2e4      	uxtb	r4, r4
			free_count_rx = packet_rx_acquired_count_get()
   13d18:	b2a4      	uxth	r4, r4
				+ mem_free_count_get(_radio.pkt_rx_data_free);
   13d1a:	4b5e      	ldr	r3, [pc, #376]	; (13e94 <isr_rx_conn_pkt_ctrl+0xd00>)
   13d1c:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   13d20:	f7fb fa79 	bl	f216 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get()
   13d24:	1823      	adds	r3, r4, r0
   13d26:	b29b      	uxth	r3, r3
			LL_ASSERT(free_count_rx <= 0xFF);
   13d28:	2bff      	cmp	r3, #255	; 0xff
   13d2a:	d81d      	bhi.n	13d68 <isr_rx_conn_pkt_ctrl+0xbd4>
			if (_radio.packet_rx_data_count == free_count_rx) {
   13d2c:	4a59      	ldr	r2, [pc, #356]	; (13e94 <isr_rx_conn_pkt_ctrl+0xd00>)
   13d2e:	f892 2136 	ldrb.w	r2, [r2, #310]	; 0x136
   13d32:	4293      	cmp	r3, r2
   13d34:	d01e      	beq.n	13d74 <isr_rx_conn_pkt_ctrl+0xbe0>
   13d36:	4651      	mov	r1, sl
				nack = 1;
   13d38:	2401      	movs	r4, #1
   13d3a:	e7a5      	b.n	13c88 <isr_rx_conn_pkt_ctrl+0xaf4>
	       (pdu_data_rx->payload.llctrl.opcode ==
   13d3c:	78f2      	ldrb	r2, [r6, #3]
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
   13d3e:	2a14      	cmp	r2, #20
   13d40:	d19b      	bne.n	13c7a <isr_rx_conn_pkt_ctrl+0xae6>
   13d42:	e7b6      	b.n	13cb2 <isr_rx_conn_pkt_ctrl+0xb1e>
	       ((pdu_data_rx->payload.llctrl.opcode ==
   13d44:	78f3      	ldrb	r3, [r6, #3]
		 PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) ||
   13d46:	3b14      	subs	r3, #20
   13d48:	b2db      	uxtb	r3, r3
		LLCP_LENGTH_STATE_RSP_WAIT) &&
   13d4a:	2b01      	cmp	r3, #1
   13d4c:	d897      	bhi.n	13c7e <isr_rx_conn_pkt_ctrl+0xaea>
   13d4e:	e7b0      	b.n	13cb2 <isr_rx_conn_pkt_ctrl+0xb1e>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   13d50:	468a      	mov	sl, r1
   13d52:	e7bf      	b.n	13cd4 <isr_rx_conn_pkt_ctrl+0xb40>
		return (_radio.packet_rx_count -
   13d54:	4b4f      	ldr	r3, [pc, #316]	; (13e94 <isr_rx_conn_pkt_ctrl+0xd00>)
   13d56:	f893 413c 	ldrb.w	r4, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   13d5a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   13d5e:	1ae4      	subs	r4, r4, r3
			_radio.packet_rx_last +
   13d60:	fa52 f484 	uxtab	r4, r2, r4
   13d64:	b2e4      	uxtb	r4, r4
   13d66:	e7d7      	b.n	13d18 <isr_rx_conn_pkt_ctrl+0xb84>
			LL_ASSERT(free_count_rx <= 0xFF);
   13d68:	4040      	eors	r0, r0
   13d6a:	f380 8811 	msr	BASEPRI, r0
   13d6e:	f04f 0004 	mov.w	r0, #4
   13d72:	df02      	svc	2
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   13d74:	4b47      	ldr	r3, [pc, #284]	; (13e94 <isr_rx_conn_pkt_ctrl+0xd00>)
   13d76:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13d7a:	85d5      	strh	r5, [r2, #46]	; 0x2e
				_radio.conn_curr->llcp_length.rx_octets =
   13d7c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13d80:	f8a2 a0ec 	strh.w	sl, [r2, #236]	; 0xec
				_radio.conn_curr->llcp_length.tx_octets =
   13d84:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13d88:	f8a2 50ee 	strh.w	r5, [r2, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
   13d8c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13d90:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
   13d94:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13d98:	f8a2 90f0 	strh.w	r9, [r2, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
   13d9c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13da0:	f8a2 80f2 	strh.w	r8, [r2, #242]	; 0xf2
				_radio.conn_curr->llcp_length.ack =
   13da4:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
					(_radio.conn_curr->llcp_length.req - 1);
   13da8:	f891 20e8 	ldrb.w	r2, [r1, #232]	; 0xe8
   13dac:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
   13dae:	f881 20e9 	strb.w	r2, [r1, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
   13db2:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13db6:	f891 20ea 	ldrb.w	r2, [r1, #234]	; 0xea
   13dba:	f042 0203 	orr.w	r2, r2, #3
   13dbe:	f881 20ea 	strb.w	r2, [r1, #234]	; 0xea
				_radio.state = STATE_CLOSE;
   13dc2:	2203      	movs	r2, #3
   13dc4:	741a      	strb	r2, [r3, #16]
   13dc6:	4651      	mov	r1, sl
	u8_t nack = 0;
   13dc8:	2400      	movs	r4, #0
   13dca:	e75d      	b.n	13c88 <isr_rx_conn_pkt_ctrl+0xaf4>
			_radio.conn_curr->pause_tx = 0;
   13dcc:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   13dd0:	f36f 03c3 	bfc	r3, #3, #1
   13dd4:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   13dd8:	4b2e      	ldr	r3, [pc, #184]	; (13e94 <isr_rx_conn_pkt_ctrl+0xd00>)
   13dda:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13dde:	85d5      	strh	r5, [r2, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
   13de0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13de4:	f8a2 9036 	strh.w	r9, [r2, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
   13de8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13dec:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
			_radio.conn_curr->llcp_length.ack =
   13df0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_length.req;
   13df4:	f892 10e8 	ldrb.w	r1, [r2, #232]	; 0xe8
			_radio.conn_curr->llcp_length.ack =
   13df8:	f882 10e9 	strb.w	r1, [r2, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
   13dfc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13e00:	2400      	movs	r4, #0
   13e02:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
			lr->max_rx_octets = eff_rx_octets;
   13e06:	f8a6 a004 	strh.w	sl, [r6, #4]
			lr->max_tx_octets = eff_tx_octets;
   13e0a:	8135      	strh	r5, [r6, #8]
			lr->max_rx_time = eff_rx_time;
   13e0c:	f8a6 9006 	strh.w	r9, [r6, #6]
			lr->max_tx_time = eff_tx_time;
   13e10:	f8a6 800a 	strh.w	r8, [r6, #10]
			*rx_enqueue = 1;
   13e14:	2301      	movs	r3, #1
   13e16:	703b      	strb	r3, [r7, #0]
   13e18:	4651      	mov	r1, sl
   13e1a:	e735      	b.n	13c88 <isr_rx_conn_pkt_ctrl+0xaf4>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   13e1c:	4040      	eors	r0, r0
   13e1e:	f380 8811 	msr	BASEPRI, r0
   13e22:	f04f 0004 	mov.w	r0, #4
   13e26:	df02      	svc	2
		if (_radio.role == ROLE_MASTER) {
   13e28:	4b1a      	ldr	r3, [pc, #104]	; (13e94 <isr_rx_conn_pkt_ctrl+0xd00>)
   13e2a:	7bdb      	ldrb	r3, [r3, #15]
   13e2c:	b2db      	uxtb	r3, r3
   13e2e:	2b04      	cmp	r3, #4
   13e30:	d032      	beq.n	13e98 <isr_rx_conn_pkt_ctrl+0xd04>
			_radio.conn_curr->llcp_phy.state =
   13e32:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   13e36:	2202      	movs	r2, #2
   13e38:	f362 0301 	bfi	r3, r2, #0, #2
   13e3c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			if (_radio.conn_curr->llcp_phy.ack ==
   13e40:	4b14      	ldr	r3, [pc, #80]	; (13e94 <isr_rx_conn_pkt_ctrl+0xd00>)
   13e42:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13e46:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
			    _radio.conn_curr->llcp_phy.req) {
   13e4a:	f893 10f4 	ldrb.w	r1, [r3, #244]	; 0xf4
			if (_radio.conn_curr->llcp_phy.ack ==
   13e4e:	428a      	cmp	r2, r1
   13e50:	f000 8099 	beq.w	13f86 <isr_rx_conn_pkt_ctrl+0xdf2>
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   13e54:	4a0f      	ldr	r2, [pc, #60]	; (13e94 <isr_rx_conn_pkt_ctrl+0xd00>)
   13e56:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   13e5a:	7b61      	ldrb	r1, [r4, #13]
   13e5c:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13e60:	f3c3 0582 	ubfx	r5, r3, #2, #3
   13e64:	4029      	ands	r1, r5
   13e66:	f361 0384 	bfi	r3, r1, #2, #3
   13e6a:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   13e6e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   13e72:	7b21      	ldrb	r1, [r4, #12]
   13e74:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13e78:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   13e7c:	f361 1347 	bfi	r3, r1, #5, #3
   13e80:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			phy_rsp_send(_radio.conn_curr);
   13e84:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   13e88:	f7fd fe5c 	bl	11b44 <phy_rsp_send>
	u8_t nack = 0;
   13e8c:	2400      	movs	r4, #0
   13e8e:	f7ff b9bb 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
   13e92:	bf00      	nop
   13e94:	20000fec 	.word	0x20000fec
			if ((_radio.conn_curr->llcp_phy.ack !=
   13e98:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
   13e9c:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
   13ea0:	429a      	cmp	r2, r3
   13ea2:	d007      	beq.n	13eb4 <isr_rx_conn_pkt_ctrl+0xd20>
			    ((_radio.conn_curr->llcp_phy.state ==
   13ea4:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
			      LLCP_PHY_STATE_RSP_WAIT) ||
   13ea8:	f003 0303 	and.w	r3, r3, #3
   13eac:	3b01      	subs	r3, #1
   13eae:	b2db      	uxtb	r3, r3
			     _radio.conn_curr->llcp_phy.req) &&
   13eb0:	2b02      	cmp	r3, #2
   13eb2:	d913      	bls.n	13edc <isr_rx_conn_pkt_ctrl+0xd48>
			} else if ((_radio.conn_curr->llcp_req !=
   13eb4:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
				    _radio.conn_curr->llcp_ack) ||
   13eb8:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
			} else if ((_radio.conn_curr->llcp_req !=
   13ebc:	429a      	cmp	r2, r3
   13ebe:	d105      	bne.n	13ecc <isr_rx_conn_pkt_ctrl+0xd38>
				   (_radio.conn_curr->llcp_conn_param.req !=
   13ec0:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
				    _radio.conn_curr->llcp_conn_param.ack)) {
   13ec4:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
				    _radio.conn_curr->llcp_ack) ||
   13ec8:	429a      	cmp	r2, r3
   13eca:	d00f      	beq.n	13eec <isr_rx_conn_pkt_ctrl+0xd58>
				reject_ext_ind_send(_radio.conn_curr,
   13ecc:	222a      	movs	r2, #42	; 0x2a
   13ece:	2116      	movs	r1, #22
   13ed0:	4628      	mov	r0, r5
   13ed2:	f7fd fe17 	bl	11b04 <reject_ext_ind_send>
	u8_t nack = 0;
   13ed6:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   13ed8:	f7ff b996 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   13edc:	2223      	movs	r2, #35	; 0x23
   13ede:	2116      	movs	r1, #22
   13ee0:	4628      	mov	r0, r5
   13ee2:	f7fd fe0f 	bl	11b04 <reject_ext_ind_send>
	u8_t nack = 0;
   13ee6:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   13ee8:	f7ff b98e 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
				_radio.conn_curr->llcp_phy.state =
   13eec:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   13ef0:	f043 0303 	orr.w	r3, r3, #3
   13ef4:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   13ef8:	4bce      	ldr	r3, [pc, #824]	; (14234 <isr_rx_conn_pkt_ctrl+0x10a0>)
   13efa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13efe:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
				    _radio.conn_curr->llcp_phy.req) {
   13f02:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
				if (_radio.conn_curr->llcp_phy.ack ==
   13f06:	428b      	cmp	r3, r1
   13f08:	d01a      	beq.n	13f40 <isr_rx_conn_pkt_ctrl+0xdac>
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   13f0a:	49ca      	ldr	r1, [pc, #808]	; (14234 <isr_rx_conn_pkt_ctrl+0x10a0>)
   13f0c:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
   13f10:	7b62      	ldrb	r2, [r4, #13]
   13f12:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13f16:	f3c3 0582 	ubfx	r5, r3, #2, #3
   13f1a:	402a      	ands	r2, r5
   13f1c:	f362 0384 	bfi	r3, r2, #2, #3
   13f20:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   13f24:	f8d1 1110 	ldr.w	r1, [r1, #272]	; 0x110
   13f28:	7b22      	ldrb	r2, [r4, #12]
   13f2a:	f891 30f6 	ldrb.w	r3, [r1, #246]	; 0xf6
   13f2e:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   13f32:	f362 1347 	bfi	r3, r2, #5, #3
   13f36:	f881 30f6 	strb.w	r3, [r1, #246]	; 0xf6
	u8_t nack = 0;
   13f3a:	2400      	movs	r4, #0
   13f3c:	f7ff b964 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
					_radio.conn_curr->llcp_phy.ack--;
   13f40:	3b01      	subs	r3, #1
   13f42:	f882 30f5 	strb.w	r3, [r2, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
   13f46:	4bbb      	ldr	r3, [pc, #748]	; (14234 <isr_rx_conn_pkt_ctrl+0x10a0>)
   13f48:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13f4c:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   13f50:	f36f 0141 	bfc	r1, #1, #1
   13f54:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
   13f58:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_tx;
   13f5c:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
					_radio.conn_curr->llcp_phy.tx =
   13f60:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   13f64:	f360 0184 	bfi	r1, r0, #2, #3
   13f68:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
					_radio.conn_curr->llcp_phy.rx =
   13f6c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_rx;
   13f70:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   13f74:	f3c2 02c2 	ubfx	r2, r2, #3, #3
					_radio.conn_curr->llcp_phy.rx =
   13f78:	f893 10f6 	ldrb.w	r1, [r3, #246]	; 0xf6
   13f7c:	f362 1147 	bfi	r1, r2, #5, #3
   13f80:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
   13f84:	e7c1      	b.n	13f0a <isr_rx_conn_pkt_ctrl+0xd76>
				_radio.conn_curr->llcp_phy.ack--;
   13f86:	3a01      	subs	r2, #1
   13f88:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->llcp_phy.cmd = 0;
   13f8c:	4ba9      	ldr	r3, [pc, #676]	; (14234 <isr_rx_conn_pkt_ctrl+0x10a0>)
   13f8e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13f92:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   13f96:	f36f 0141 	bfc	r1, #1, #1
   13f9a:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
				_radio.conn_curr->llcp_phy.tx =
   13f9e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_tx;
   13fa2:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
				_radio.conn_curr->llcp_phy.tx =
   13fa6:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   13faa:	f360 0184 	bfi	r1, r0, #2, #3
   13fae:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx =
   13fb2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_rx;
   13fb6:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
   13fba:	f3c1 01c2 	ubfx	r1, r1, #3, #3
				_radio.conn_curr->llcp_phy.rx =
   13fbe:	f892 00f6 	ldrb.w	r0, [r2, #246]	; 0xf6
   13fc2:	f361 1047 	bfi	r0, r1, #5, #3
   13fc6:	f882 00f6 	strb.w	r0, [r2, #246]	; 0xf6
				_radio.conn_curr->procedure_expire =
   13fca:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
					_radio.conn_curr->procedure_reload;
   13fce:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
				_radio.conn_curr->procedure_expire =
   13fd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   13fd6:	e73d      	b.n	13e54 <isr_rx_conn_pkt_ctrl+0xcc0>
		if ((_radio.role == ROLE_MASTER) &&
   13fd8:	4b96      	ldr	r3, [pc, #600]	; (14234 <isr_rx_conn_pkt_ctrl+0x10a0>)
   13fda:	7bdb      	ldrb	r3, [r3, #15]
   13fdc:	b2db      	uxtb	r3, r3
   13fde:	2b04      	cmp	r3, #4
   13fe0:	d002      	beq.n	13fe8 <isr_rx_conn_pkt_ctrl+0xe54>
	u8_t nack = 0;
   13fe2:	2400      	movs	r4, #0
   13fe4:	f7ff b910 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
		    (_radio.conn_curr->llcp_phy.ack !=
   13fe8:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		     _radio.conn_curr->llcp_phy.req) &&
   13fec:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
		if ((_radio.role == ROLE_MASTER) &&
   13ff0:	429a      	cmp	r2, r3
   13ff2:	f000 8112 	beq.w	1421a <isr_rx_conn_pkt_ctrl+0x1086>
		    (_radio.conn_curr->llcp_phy.state ==
   13ff6:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   13ffa:	f003 0303 	and.w	r3, r3, #3
		     _radio.conn_curr->llcp_phy.req) &&
   13ffe:	2b02      	cmp	r3, #2
   14000:	d002      	beq.n	14008 <isr_rx_conn_pkt_ctrl+0xe74>
	u8_t nack = 0;
   14002:	2400      	movs	r4, #0
   14004:	f7ff b900 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   14008:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   1400c:	f043 0303 	orr.w	r3, r3, #3
   14010:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   14014:	4a87      	ldr	r2, [pc, #540]	; (14234 <isr_rx_conn_pkt_ctrl+0x10a0>)
   14016:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   1401a:	7b61      	ldrb	r1, [r4, #13]
   1401c:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   14020:	f3c3 0582 	ubfx	r5, r3, #2, #3
   14024:	4029      	ands	r1, r5
   14026:	f361 0384 	bfi	r3, r1, #2, #3
   1402a:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   1402e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   14032:	7b21      	ldrb	r1, [r4, #12]
   14034:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   14038:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   1403c:	f361 1347 	bfi	r3, r1, #5, #3
   14040:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->procedure_expire = 0;
   14044:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   14048:	2400      	movs	r4, #0
   1404a:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   1404e:	f7ff b8db 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
	struct connection *conn = _radio.conn_curr;
   14052:	4b78      	ldr	r3, [pc, #480]	; (14234 <isr_rx_conn_pkt_ctrl+0x10a0>)
   14054:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
   14058:	7b23      	ldrb	r3, [r4, #12]
   1405a:	7b61      	ldrb	r1, [r4, #13]
   1405c:	430b      	orrs	r3, r1
   1405e:	f013 0f07 	tst.w	r3, #7
   14062:	d134      	bne.n	140ce <isr_rx_conn_pkt_ctrl+0xf3a>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   14064:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   14068:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
   1406c:	428b      	cmp	r3, r1
   1406e:	f000 8086 	beq.w	1417e <isr_rx_conn_pkt_ctrl+0xfea>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   14072:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   14076:	f003 0303 	and.w	r3, r3, #3
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   1407a:	2b02      	cmp	r3, #2
   1407c:	d00c      	beq.n	14098 <isr_rx_conn_pkt_ctrl+0xf04>
			return 0;
   1407e:	2300      	movs	r3, #0
		if (phy_upd_ind(radio_pdu_node_rx, rx_enqueue)) {
   14080:	2b00      	cmp	r3, #0
   14082:	f000 80cd 	beq.w	14220 <isr_rx_conn_pkt_ctrl+0x108c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   14086:	4b6b      	ldr	r3, [pc, #428]	; (14234 <isr_rx_conn_pkt_ctrl+0x10a0>)
   14088:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1408c:	2228      	movs	r2, #40	; 0x28
   1408e:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   14092:	2400      	movs	r4, #0
   14094:	f7ff b8b8 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   14098:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
		conn->procedure_expire = 0;
   1409c:	2300      	movs	r3, #0
   1409e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
   140a2:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   140a6:	f013 0f02 	tst.w	r3, #2
   140aa:	d06a      	beq.n	14182 <isr_rx_conn_pkt_ctrl+0xfee>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   140ac:	230c      	movs	r3, #12
   140ae:	7123      	strb	r3, [r4, #4]
		p->status = 0;
   140b0:	2300      	movs	r3, #0
   140b2:	72e3      	strb	r3, [r4, #11]
		p->tx = conn->phy_tx;
   140b4:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   140b8:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   140bc:	7321      	strb	r1, [r4, #12]
		p->rx = conn->phy_rx;
   140be:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
   140c2:	f3c2 0202 	ubfx	r2, r2, #0, #3
   140c6:	7362      	strb	r2, [r4, #13]
		*rx_enqueue = 1;
   140c8:	2201      	movs	r2, #1
   140ca:	703a      	strb	r2, [r7, #0]
   140cc:	e7d8      	b.n	14080 <isr_rx_conn_pkt_ctrl+0xeec>
	if (((p->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   140ce:	89e3      	ldrh	r3, [r4, #14]
   140d0:	8c51      	ldrh	r1, [r2, #34]	; 0x22
   140d2:	1a5b      	subs	r3, r3, r1
   140d4:	b29b      	uxth	r3, r3
   140d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   140da:	da54      	bge.n	14186 <isr_rx_conn_pkt_ctrl+0xff2>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   140dc:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
   140e0:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
   140e4:	428b      	cmp	r3, r1
   140e6:	d134      	bne.n	14152 <isr_rx_conn_pkt_ctrl+0xfbe>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   140e8:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   140ec:	f892 00f4 	ldrb.w	r0, [r2, #244]	; 0xf4
   140f0:	4283      	cmp	r3, r0
   140f2:	d005      	beq.n	14100 <isr_rx_conn_pkt_ctrl+0xf6c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   140f4:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   140f8:	f003 0303 	and.w	r3, r3, #3
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   140fc:	2b02      	cmp	r3, #2
   140fe:	d02e      	beq.n	1415e <isr_rx_conn_pkt_ctrl+0xfca>
	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
   14100:	7b60      	ldrb	r0, [r4, #13]
   14102:	f000 0007 	and.w	r0, r0, #7
   14106:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   1410a:	f360 0384 	bfi	r3, r0, #2, #3
   1410e:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
   14112:	7b25      	ldrb	r5, [r4, #12]
   14114:	b2db      	uxtb	r3, r3
   14116:	f365 1347 	bfi	r3, r5, #5, #3
   1411a:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = p->instant;
   1411e:	89e3      	ldrh	r3, [r4, #14]
   14120:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
	conn->llcp.phy_upd_ind.initiate = 0;
   14124:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   14128:	f36f 0300 	bfc	r3, #0, #1
   1412c:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
   14130:	2408      	movs	r4, #8
   14132:	f882 4076 	strb.w	r4, [r2, #118]	; 0x76
	conn->llcp_ack--;
   14136:	3901      	subs	r1, #1
   14138:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
   1413c:	f003 031c 	and.w	r3, r3, #28
   14140:	b31b      	cbz	r3, 1418a <isr_rx_conn_pkt_ctrl+0xff6>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
   14142:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   14146:	f360 0302 	bfi	r3, r0, #0, #3
   1414a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	return 0;
   1414e:	2300      	movs	r3, #0
   14150:	e796      	b.n	14080 <isr_rx_conn_pkt_ctrl+0xeec>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   14152:	4040      	eors	r0, r0
   14154:	f380 8811 	msr	BASEPRI, r0
   14158:	f04f 0004 	mov.w	r0, #4
   1415c:	df02      	svc	2
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1415e:	f882 00f5 	strb.w	r0, [r2, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   14162:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   14166:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1416a:	f892 0078 	ldrb.w	r0, [r2, #120]	; 0x78
   1416e:	f363 0041 	bfi	r0, r3, #1, #1
   14172:	f882 0078 	strb.w	r0, [r2, #120]	; 0x78
		conn->procedure_expire = 0;
   14176:	2300      	movs	r3, #0
   14178:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
   1417c:	e7c0      	b.n	14100 <isr_rx_conn_pkt_ctrl+0xf6c>
			return 0;
   1417e:	2300      	movs	r3, #0
   14180:	e77e      	b.n	14080 <isr_rx_conn_pkt_ctrl+0xeec>
			return 0;
   14182:	2300      	movs	r3, #0
   14184:	e77c      	b.n	14080 <isr_rx_conn_pkt_ctrl+0xeec>
		return 1;
   14186:	2301      	movs	r3, #1
   14188:	e77a      	b.n	14080 <isr_rx_conn_pkt_ctrl+0xeec>
	return 0;
   1418a:	2300      	movs	r3, #0
   1418c:	e778      	b.n	14080 <isr_rx_conn_pkt_ctrl+0xeec>
		if (!_radio.conn_curr->role) {
   1418e:	2b00      	cmp	r3, #0
   14190:	db49      	blt.n	14226 <isr_rx_conn_pkt_ctrl+0x1092>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
   14192:	7b21      	ldrb	r1, [r4, #12]
   14194:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   14198:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1419c:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   141a0:	f002 0207 	and.w	r2, r2, #7
   141a4:	4313      	orrs	r3, r2
   141a6:	4219      	tst	r1, r3
   141a8:	d040      	beq.n	1422c <isr_rx_conn_pkt_ctrl+0x1098>
			if (conn->llcp_req != conn->llcp_ack) {
   141aa:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   141ae:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   141b2:	429a      	cmp	r2, r3
   141b4:	d002      	beq.n	141bc <isr_rx_conn_pkt_ctrl+0x1028>
	u8_t nack = 0;
   141b6:	2400      	movs	r4, #0
   141b8:	f7ff b826 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
			memcpy(&conn->llcp.chan_map.chm[0],
   141bc:	2205      	movs	r2, #5
   141be:	491e      	ldr	r1, [pc, #120]	; (14238 <isr_rx_conn_pkt_ctrl+0x10a4>)
   141c0:	f105 0079 	add.w	r0, r5, #121	; 0x79
   141c4:	f7ec f87c 	bl	2c0 <memcpy>
			conn->llcp.chan_map.initiate = 1;
   141c8:	2301      	movs	r3, #1
   141ca:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
   141ce:	2302      	movs	r3, #2
   141d0:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
   141d4:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   141d8:	3b01      	subs	r3, #1
   141da:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	u8_t nack = 0;
   141de:	2400      	movs	r4, #0
   141e0:	f7ff b812 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
		unknown_rsp_send(_radio.conn_curr,
   141e4:	4628      	mov	r0, r5
   141e6:	f7fd fcd3 	bl	11b90 <unknown_rsp_send>
	u8_t nack = 0;
   141ea:	2400      	movs	r4, #0
		break;
   141ec:	f7ff b80c 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
	u8_t nack = 0;
   141f0:	2400      	movs	r4, #0
   141f2:	f7ff b809 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
   141f6:	2400      	movs	r4, #0
   141f8:	f7ff b806 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
   141fc:	2400      	movs	r4, #0
   141fe:	f7ff b803 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
   14202:	2400      	movs	r4, #0
   14204:	f7ff b800 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
   14208:	2400      	movs	r4, #0
   1420a:	f7fe bffd 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
   1420e:	2400      	movs	r4, #0
   14210:	f7fe bffa 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
   14214:	2400      	movs	r4, #0
   14216:	f7fe bff7 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
   1421a:	2400      	movs	r4, #0
   1421c:	f7fe bff4 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
   14220:	2400      	movs	r4, #0
   14222:	f7fe bff1 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
   14226:	2400      	movs	r4, #0
   14228:	f7fe bfee 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
   1422c:	2400      	movs	r4, #0
   1422e:	f7fe bfeb 	b.w	13208 <isr_rx_conn_pkt_ctrl+0x74>
   14232:	bf00      	nop
   14234:	20000fec 	.word	0x20000fec
   14238:	20001102 	.word	0x20001102

0001423c <packet_rx_enqueue>:
{
   1423c:	b508      	push	{r3, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   1423e:	4a1a      	ldr	r2, [pc, #104]	; (142a8 <packet_rx_enqueue+0x6c>)
   14240:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   14244:	b2db      	uxtb	r3, r3
   14246:	f892 213e 	ldrb.w	r2, [r2, #318]	; 0x13e
   1424a:	4293      	cmp	r3, r2
   1424c:	d01d      	beq.n	1428a <packet_rx_enqueue+0x4e>
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   1424e:	4a16      	ldr	r2, [pc, #88]	; (142a8 <packet_rx_enqueue+0x6c>)
   14250:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
   14254:	f892 113d 	ldrb.w	r1, [r2, #317]	; 0x13d
   14258:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	link = radio_pdu_node_rx->hdr.onion.link;
   1425c:	6801      	ldr	r1, [r0, #0]
	    _radio.packet_release_last;
   1425e:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   14262:	7003      	strb	r3, [r0, #0]
	last = _radio.packet_rx_last + 1;
   14264:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   14268:	3301      	adds	r3, #1
   1426a:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
   1426c:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   14270:	4293      	cmp	r3, r2
   14272:	d010      	beq.n	14296 <packet_rx_enqueue+0x5a>
	_radio.packet_rx_last = last;
   14274:	4a0c      	ldr	r2, [pc, #48]	; (142a8 <packet_rx_enqueue+0x6c>)
   14276:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	link = memq_enqueue(radio_pdu_node_rx, link,
   1427a:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   1427e:	f7fa fffe 	bl	f27e <memq_enqueue>
	LL_ASSERT(link);
   14282:	b150      	cbz	r0, 1429a <packet_rx_enqueue+0x5e>
	packet_rx_callback();
   14284:	f7fe f871 	bl	1236a <packet_rx_callback>
   14288:	bd08      	pop	{r3, pc}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   1428a:	4040      	eors	r0, r0
   1428c:	f380 8811 	msr	BASEPRI, r0
   14290:	f04f 0004 	mov.w	r0, #4
   14294:	df02      	svc	2
		last = 0;
   14296:	2300      	movs	r3, #0
   14298:	e7ec      	b.n	14274 <packet_rx_enqueue+0x38>
	LL_ASSERT(link);
   1429a:	4040      	eors	r0, r0
   1429c:	f380 8811 	msr	BASEPRI, r0
   142a0:	f04f 0004 	mov.w	r0, #4
   142a4:	df02      	svc	2
   142a6:	bf00      	nop
   142a8:	20000fec 	.word	0x20000fec

000142ac <mayfly_adv_stop>:
{
   142ac:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
   142ae:	4b1c      	ldr	r3, [pc, #112]	; (14320 <mayfly_adv_stop+0x74>)
   142b0:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   142b4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   142b8:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   142ba:	429a      	cmp	r2, r3
   142bc:	d31d      	bcc.n	142fa <mayfly_adv_stop+0x4e>
			_radio.packet_rx_last);
   142be:	4b18      	ldr	r3, [pc, #96]	; (14320 <mayfly_adv_stop+0x74>)
   142c0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   142c4:	1ad3      	subs	r3, r2, r3
   142c6:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   142c8:	b30b      	cbz	r3, 1430e <mayfly_adv_stop+0x62>
	return _radio.packet_rx[_radio.packet_rx_last];
   142ca:	4b15      	ldr	r3, [pc, #84]	; (14320 <mayfly_adv_stop+0x74>)
   142cc:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   142d0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   142d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
	LL_ASSERT(radio_pdu_node_rx);
   142d8:	b1dc      	cbz	r4, 14312 <mayfly_adv_stop+0x66>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   142da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   142de:	80e3      	strh	r3, [r4, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   142e0:	2306      	movs	r3, #6
   142e2:	7123      	strb	r3, [r4, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
   142e4:	221d      	movs	r2, #29
   142e6:	2100      	movs	r1, #0
   142e8:	f104 000b 	add.w	r0, r4, #11
   142ec:	f015 ff48 	bl	2a180 <memset>
	radio_le_conn_cmplt->status = 0x3c;
   142f0:	233c      	movs	r3, #60	; 0x3c
   142f2:	72e3      	strb	r3, [r4, #11]
	packet_rx_enqueue();
   142f4:	f7ff ffa2 	bl	1423c <packet_rx_enqueue>
   142f8:	bd10      	pop	{r4, pc}
		return (_radio.packet_rx_count -
   142fa:	4909      	ldr	r1, [pc, #36]	; (14320 <mayfly_adv_stop+0x74>)
   142fc:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   14300:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   14304:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   14306:	fa52 f383 	uxtab	r3, r2, r3
   1430a:	b2db      	uxtb	r3, r3
   1430c:	e7dc      	b.n	142c8 <mayfly_adv_stop+0x1c>
		return 0;
   1430e:	2400      	movs	r4, #0
   14310:	e7e2      	b.n	142d8 <mayfly_adv_stop+0x2c>
	LL_ASSERT(radio_pdu_node_rx);
   14312:	4040      	eors	r0, r0
   14314:	f380 8811 	msr	BASEPRI, r0
   14318:	f04f 0004 	mov.w	r0, #4
   1431c:	df02      	svc	2
   1431e:	bf00      	nop
   14320:	20000fec 	.word	0x20000fec

00014324 <terminate_ind_rx_enqueue>:
{
   14324:	b510      	push	{r4, lr}
   14326:	4603      	mov	r3, r0
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   14328:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
   1432c:	b1bc      	cbz	r4, 1435e <terminate_ind_rx_enqueue+0x3a>
   1432e:	30b4      	adds	r0, #180	; 0xb4
   14330:	460a      	mov	r2, r1
	radio_pdu_node_rx->hdr.handle = conn->handle;
   14332:	8c19      	ldrh	r1, [r3, #32]
   14334:	f8a3 10ba 	strh.w	r1, [r3, #186]	; 0xba
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   14338:	2107      	movs	r1, #7
   1433a:	f883 10b8 	strb.w	r1, [r3, #184]	; 0xb8
	*((u8_t *)radio_pdu_node_rx->pdu_data) = reason;
   1433e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	    _radio.packet_release_last;
   14342:	4a0d      	ldr	r2, [pc, #52]	; (14378 <terminate_ind_rx_enqueue+0x54>)
   14344:	f892 1174 	ldrb.w	r1, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   14348:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	link = memq_enqueue(radio_pdu_node_rx, link,
   1434c:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   14350:	4621      	mov	r1, r4
   14352:	f7fa ff94 	bl	f27e <memq_enqueue>
	LL_ASSERT(link);
   14356:	b140      	cbz	r0, 1436a <terminate_ind_rx_enqueue+0x46>
	packet_rx_callback();
   14358:	f7fe f807 	bl	1236a <packet_rx_callback>
   1435c:	bd10      	pop	{r4, pc}
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   1435e:	4040      	eors	r0, r0
   14360:	f380 8811 	msr	BASEPRI, r0
   14364:	f04f 0004 	mov.w	r0, #4
   14368:	df02      	svc	2
	LL_ASSERT(link);
   1436a:	4040      	eors	r0, r0
   1436c:	f380 8811 	msr	BASEPRI, r0
   14370:	f04f 0004 	mov.w	r0, #4
   14374:	df02      	svc	2
   14376:	bf00      	nop
   14378:	20000fec 	.word	0x20000fec

0001437c <isr_rx_scan_report>:
{
   1437c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (_radio.packet_rx_acquire >=
   14380:	4b31      	ldr	r3, [pc, #196]	; (14448 <isr_rx_scan_report+0xcc>)
   14382:	f893 413e 	ldrb.w	r4, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   14386:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1438a:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1438c:	429c      	cmp	r4, r3
   1438e:	d327      	bcc.n	143e0 <isr_rx_scan_report+0x64>
			_radio.packet_rx_last);
   14390:	4b2d      	ldr	r3, [pc, #180]	; (14448 <isr_rx_scan_report+0xcc>)
   14392:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   14396:	1ae3      	subs	r3, r4, r3
   14398:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1439a:	2b02      	cmp	r3, #2
   1439c:	d92a      	bls.n	143f4 <isr_rx_scan_report+0x78>
	return _radio.packet_rx[_radio.packet_rx_last];
   1439e:	4b2a      	ldr	r3, [pc, #168]	; (14448 <isr_rx_scan_report+0xcc>)
   143a0:	f8d3 4138 	ldr.w	r4, [r3, #312]	; 0x138
   143a4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   143a8:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
	if (radio_pdu_node_rx == 0) {
   143ac:	2c00      	cmp	r4, #0
   143ae:	d047      	beq.n	14440 <isr_rx_scan_report+0xc4>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   143b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   143b4:	80e3      	strh	r3, [r4, #6]
	} else if (_radio.scanner.phy) {
   143b6:	4b24      	ldr	r3, [pc, #144]	; (14448 <isr_rx_scan_report+0xcc>)
   143b8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   143bc:	f013 0f07 	tst.w	r3, #7
   143c0:	d020      	beq.n	14404 <isr_rx_scan_report+0x88>
		switch (_radio.scanner.phy) {
   143c2:	4b21      	ldr	r3, [pc, #132]	; (14448 <isr_rx_scan_report+0xcc>)
   143c4:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   143c8:	f003 0307 	and.w	r3, r3, #7
   143cc:	2b01      	cmp	r3, #1
   143ce:	d013      	beq.n	143f8 <isr_rx_scan_report+0x7c>
   143d0:	2b04      	cmp	r3, #4
   143d2:	d014      	beq.n	143fe <isr_rx_scan_report+0x82>
			LL_ASSERT(0);
   143d4:	4040      	eors	r0, r0
   143d6:	f380 8811 	msr	BASEPRI, r0
   143da:	f04f 0004 	mov.w	r0, #4
   143de:	df02      	svc	2
		return (_radio.packet_rx_count -
   143e0:	4d19      	ldr	r5, [pc, #100]	; (14448 <isr_rx_scan_report+0xcc>)
   143e2:	f895 313c 	ldrb.w	r3, [r5, #316]	; 0x13c
			_radio.packet_rx_last +
   143e6:	f895 513d 	ldrb.w	r5, [r5, #317]	; 0x13d
		return (_radio.packet_rx_count -
   143ea:	1b5b      	subs	r3, r3, r5
			_radio.packet_rx_last +
   143ec:	fa54 f383 	uxtab	r3, r4, r3
   143f0:	b2db      	uxtb	r3, r3
   143f2:	e7d2      	b.n	1439a <isr_rx_scan_report+0x1e>
		return 0;
   143f4:	2400      	movs	r4, #0
   143f6:	e7d9      	b.n	143ac <isr_rx_scan_report+0x30>
			radio_pdu_node_rx->hdr.type =
   143f8:	2303      	movs	r3, #3
   143fa:	7123      	strb	r3, [r4, #4]
			break;
   143fc:	e004      	b.n	14408 <isr_rx_scan_report+0x8c>
			radio_pdu_node_rx->hdr.type =
   143fe:	2304      	movs	r3, #4
   14400:	7123      	strb	r3, [r4, #4]
			break;
   14402:	e001      	b.n	14408 <isr_rx_scan_report+0x8c>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   14404:	2302      	movs	r3, #2
   14406:	7123      	strb	r3, [r4, #4]
   14408:	4615      	mov	r5, r2
   1440a:	460e      	mov	r6, r1
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
   1440c:	f104 0708 	add.w	r7, r4, #8
			     pdu_adv_rx->len] =
   14410:	f894 8009 	ldrb.w	r8, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   14414:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
   14418:	b968      	cbnz	r0, 14436 <isr_rx_scan_report+0xba>
   1441a:	207f      	movs	r0, #127	; 0x7f
   1441c:	f807 0008 	strb.w	r0, [r7, r8]
			     pdu_adv_rx->len + 1] = rl_idx;
   14420:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   14422:	3303      	adds	r3, #3
			     pdu_adv_rx->len + 1] = rl_idx;
   14424:	54fe      	strb	r6, [r7, r3]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   14426:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   14428:	3304      	adds	r3, #4
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   1442a:	54fd      	strb	r5, [r7, r3]
	packet_rx_enqueue();
   1442c:	f7ff ff06 	bl	1423c <packet_rx_enqueue>
	return 0;
   14430:	2000      	movs	r0, #0
   14432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   14436:	f7fb f947 	bl	f6c8 <radio_rssi_get>
			     pdu_adv_rx->len] =
   1443a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1443e:	e7ed      	b.n	1441c <isr_rx_scan_report+0xa0>
		return 1;
   14440:	2001      	movs	r0, #1
}
   14442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14446:	bf00      	nop
   14448:	20000fec 	.word	0x20000fec

0001444c <isr_rx_conn>:
{
   1444c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14450:	b084      	sub	sp, #16
	u8_t rx_enqueue = 0;
   14452:	2300      	movs	r3, #0
   14454:	f88d 300b 	strb.w	r3, [sp, #11]
	_radio.packet_counter++;
   14458:	4bc1      	ldr	r3, [pc, #772]	; (14760 <isr_rx_conn+0x314>)
   1445a:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
   1445e:	3201      	adds	r2, #1
   14460:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   14464:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14468:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1446c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14470:	2301      	movs	r3, #1
   14472:	712b      	strb	r3, [r5, #4]
	if (crc_ok) {
   14474:	4607      	mov	r7, r0
   14476:	2800      	cmp	r0, #0
   14478:	d143      	bne.n	14502 <isr_rx_conn+0xb6>
		if (_radio.crc_expire == 0) {
   1447a:	4bb9      	ldr	r3, [pc, #740]	; (14760 <isr_rx_conn+0x314>)
   1447c:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
   14480:	b91b      	cbnz	r3, 1448a <isr_rx_conn+0x3e>
			_radio.crc_expire = 2;
   14482:	2202      	movs	r2, #2
   14484:	4bb6      	ldr	r3, [pc, #728]	; (14760 <isr_rx_conn+0x314>)
   14486:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		_radio.crc_expire--;
   1448a:	4bb5      	ldr	r3, [pc, #724]	; (14760 <isr_rx_conn+0x314>)
   1448c:	f893 4115 	ldrb.w	r4, [r3, #277]	; 0x115
   14490:	3c01      	subs	r4, #1
   14492:	b2e4      	uxtb	r4, r4
   14494:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		crc_close = (_radio.crc_expire == 0);
   14498:	fab4 f484 	clz	r4, r4
   1449c:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
   1449e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   144a2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   144a6:	2a00      	cmp	r2, #0
   144a8:	f040 8387 	bne.w	14bba <isr_rx_conn+0x76e>
				_radio.conn_curr->supervision_reload;
   144ac:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
   144ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	struct radio_pdu_node_tx *tx_release = NULL;
   144b2:	2600      	movs	r6, #0
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   144b4:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 14760 <isr_rx_conn+0x314>
   144b8:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   144bc:	f890 80f8 	ldrb.w	r8, [r0, #248]	; 0xf8
   144c0:	ea4f 18d8 	mov.w	r8, r8, lsr #7
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   144c4:	a903      	add	r1, sp, #12
   144c6:	f7fe f8ef 	bl	126a8 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   144ca:	f899 3010 	ldrb.w	r3, [r9, #16]
			STATE_CLOSE : STATE_TX;
   144ce:	2b03      	cmp	r3, #3
   144d0:	f000 8376 	beq.w	14bc0 <isr_rx_conn+0x774>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   144d4:	2c00      	cmp	r4, #0
   144d6:	f040 8372 	bne.w	14bbe <isr_rx_conn+0x772>
   144da:	b147      	cbz	r7, 144ee <isr_rx_conn+0xa2>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   144dc:	7a2b      	ldrb	r3, [r5, #8]
   144de:	f013 0f10 	tst.w	r3, #16
   144e2:	d104      	bne.n	144ee <isr_rx_conn+0xa2>
			 (pdu_data_tx->len == 0)) ||
   144e4:	9b03      	ldr	r3, [sp, #12]
   144e6:	785b      	ldrb	r3, [r3, #1]
			((crc_ok) && (pdu_data_rx->md == 0) &&
   144e8:	2b00      	cmp	r3, #0
   144ea:	f000 83aa 	beq.w	14c42 <isr_rx_conn+0x7f6>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   144ee:	4b9c      	ldr	r3, [pc, #624]	; (14760 <isr_rx_conn+0x314>)
   144f0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   144f4:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
			 (pdu_data_tx->len == 0)) ||
   144f8:	2b00      	cmp	r3, #0
   144fa:	f000 83a4 	beq.w	14c46 <isr_rx_conn+0x7fa>
			STATE_CLOSE : STATE_TX;
   144fe:	2303      	movs	r3, #3
   14500:	e35e      	b.n	14bc0 <isr_rx_conn+0x774>
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   14502:	f105 0808 	add.w	r8, r5, #8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   14506:	7a2a      	ldrb	r2, [r5, #8]
   14508:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1450c:	4b94      	ldr	r3, [pc, #592]	; (14760 <isr_rx_conn+0x314>)
   1450e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14512:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14516:	f003 0301 	and.w	r3, r3, #1
   1451a:	429a      	cmp	r2, r3
   1451c:	f000 81cd 	beq.w	148ba <isr_rx_conn+0x46e>
		_radio.conn_curr->sn++;
   14520:	f083 0301 	eor.w	r3, r3, #1
   14524:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   14528:	f363 0200 	bfi	r2, r3, #0, #1
   1452c:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   14530:	4b8b      	ldr	r3, [pc, #556]	; (14760 <isr_rx_conn+0x314>)
   14532:	7bdb      	ldrb	r3, [r3, #15]
   14534:	b2db      	uxtb	r3, r3
   14536:	2b03      	cmp	r3, #3
   14538:	d02c      	beq.n	14594 <isr_rx_conn+0x148>
		if (_radio.conn_curr->empty == 0) {
   1453a:	4b89      	ldr	r3, [pc, #548]	; (14760 <isr_rx_conn+0x314>)
   1453c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14540:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14544:	f012 0f80 	tst.w	r2, #128	; 0x80
   14548:	f040 81ae 	bne.w	148a8 <isr_rx_conn+0x45c>
			node_tx = _radio.conn_curr->pkt_tx_head;
   1454c:	f8d3 613c 	ldr.w	r6, [r3, #316]	; 0x13c
				(node_tx->pdu_data +
   14550:	f106 0c04 	add.w	ip, r6, #4
				 _radio.conn_curr->packet_tx_head_offset);
   14554:	f893 e151 	ldrb.w	lr, [r3, #337]	; 0x151
			pdu_data_tx = (struct pdu_data *)
   14558:	eb0c 090e 	add.w	r9, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
   1455c:	f899 4001 	ldrb.w	r4, [r9, #1]
			if (pdu_data_tx_len != 0) {
   14560:	2c00      	cmp	r4, #0
   14562:	f000 8145 	beq.w	147f0 <isr_rx_conn+0x3a4>
				if (_radio.conn_curr->enc_tx) {
   14566:	f012 0f20 	tst.w	r2, #32
   1456a:	d00a      	beq.n	14582 <isr_rx_conn+0x136>
					_radio.conn_curr->ccm_tx.counter++;
   1456c:	f8d3 012a 	ldr.w	r0, [r3, #298]	; 0x12a
   14570:	f8d3 112e 	ldr.w	r1, [r3, #302]	; 0x12e
   14574:	3001      	adds	r0, #1
   14576:	f141 0100 	adc.w	r1, r1, #0
   1457a:	f8c3 012a 	str.w	r0, [r3, #298]	; 0x12a
   1457e:	f8c3 112e 	str.w	r1, [r3, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   14582:	f81c 300e 	ldrb.w	r3, [ip, lr]
   14586:	f003 0303 	and.w	r3, r3, #3
   1458a:	2b03      	cmp	r3, #3
   1458c:	d00c      	beq.n	145a8 <isr_rx_conn+0x15c>
	u8_t terminate = 0;
   1458e:	f04f 0900 	mov.w	r9, #0
   14592:	e12e      	b.n	147f2 <isr_rx_conn+0x3a6>
			_radio.conn_curr->slave.latency_enabled = 1;
   14594:	4b72      	ldr	r3, [pc, #456]	; (14760 <isr_rx_conn+0x314>)
   14596:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1459a:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   1459e:	f043 0301 	orr.w	r3, r3, #1
   145a2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   145a6:	e7c8      	b.n	1453a <isr_rx_conn+0xee>
	switch (pdu_data_tx->payload.llctrl.opcode) {
   145a8:	f899 3003 	ldrb.w	r3, [r9, #3]
   145ac:	3b02      	subs	r3, #2
   145ae:	2b16      	cmp	r3, #22
   145b0:	f200 8118 	bhi.w	147e4 <isr_rx_conn+0x398>
   145b4:	e8df f013 	tbh	[pc, r3, lsl #1]
   145b8:	00330017 	.word	0x00330017
   145bc:	01160057 	.word	0x01160057
   145c0:	01160116 	.word	0x01160116
   145c4:	01160116 	.word	0x01160116
   145c8:	007d0063 	.word	0x007d0063
   145cc:	00970116 	.word	0x00970116
   145d0:	01160116 	.word	0x01160116
   145d4:	01160116 	.word	0x01160116
   145d8:	01160116 	.word	0x01160116
   145dc:	011600af 	.word	0x011600af
   145e0:	00e000d6 	.word	0x00e000d6
   145e4:	0106      	.short	0x0106
		_radio.state = STATE_CLOSE;
   145e6:	2203      	movs	r2, #3
   145e8:	4b5d      	ldr	r3, [pc, #372]	; (14760 <isr_rx_conn+0x314>)
   145ea:	741a      	strb	r2, [r3, #16]
		radio_disable();
   145ec:	f7fa fff4 	bl	f5d8 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   145f0:	f7fb f80c 	bl	f60c <radio_is_ready>
   145f4:	b958      	cbnz	r0, 1460e <isr_rx_conn+0x1c2>
		terminate_ind_rx_enqueue(_radio.conn_curr,
   145f6:	4b5a      	ldr	r3, [pc, #360]	; (14760 <isr_rx_conn+0x314>)
   145f8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
   145fc:	f899 1004 	ldrb.w	r1, [r9, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   14600:	2913      	cmp	r1, #19
   14602:	d00a      	beq.n	1461a <isr_rx_conn+0x1ce>
   14604:	f7ff fe8e 	bl	14324 <terminate_ind_rx_enqueue>
		terminate = 1;
   14608:	f04f 0901 	mov.w	r9, #1
   1460c:	e0f1      	b.n	147f2 <isr_rx_conn+0x3a6>
		LL_ASSERT(!radio_is_ready());
   1460e:	4040      	eors	r0, r0
   14610:	f380 8811 	msr	BASEPRI, r0
   14614:	f04f 0004 	mov.w	r0, #4
   14618:	df02      	svc	2
		terminate_ind_rx_enqueue(_radio.conn_curr,
   1461a:	2116      	movs	r1, #22
   1461c:	e7f2      	b.n	14604 <isr_rx_conn+0x1b8>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   1461e:	f8df a140 	ldr.w	sl, [pc, #320]	; 14760 <isr_rx_conn+0x314>
   14622:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   14626:	2208      	movs	r2, #8
   14628:	f109 010e 	add.w	r1, r9, #14
   1462c:	3093      	adds	r0, #147	; 0x93
   1462e:	f7eb fe47 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   14632:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   14636:	2204      	movs	r2, #4
   14638:	f109 0116 	add.w	r1, r9, #22
   1463c:	f500 7089 	add.w	r0, r0, #274	; 0x112
   14640:	f7eb fe3e 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_tx = 1;
   14644:	f8da 2110 	ldr.w	r2, [sl, #272]	; 0x110
   14648:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   1464c:	f043 0308 	orr.w	r3, r3, #8
   14650:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   14654:	f8da 3110 	ldr.w	r3, [sl, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   14658:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   1465c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   14660:	f04f 0900 	mov.w	r9, #0
   14664:	e0c5      	b.n	147f2 <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   14666:	4b3e      	ldr	r3, [pc, #248]	; (14760 <isr_rx_conn+0x314>)
   14668:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1466c:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   14670:	f043 0308 	orr.w	r3, r3, #8
   14674:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   14678:	f04f 0900 	mov.w	r9, #0
   1467c:	e0b9      	b.n	147f2 <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   1467e:	4b38      	ldr	r3, [pc, #224]	; (14760 <isr_rx_conn+0x314>)
   14680:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14684:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   14688:	f042 0208 	orr.w	r2, r2, #8
   1468c:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   14690:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14694:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   14698:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1469c:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   146a0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   146a4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   146a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   146ac:	f04f 0900 	mov.w	r9, #0
   146b0:	e09f      	b.n	147f2 <isr_rx_conn+0x3a6>
		if (_radio.role == ROLE_MASTER) {
   146b2:	4b2b      	ldr	r3, [pc, #172]	; (14760 <isr_rx_conn+0x314>)
   146b4:	7bdb      	ldrb	r3, [r3, #15]
   146b6:	b2db      	uxtb	r3, r3
   146b8:	2b04      	cmp	r3, #4
   146ba:	d00b      	beq.n	146d4 <isr_rx_conn+0x288>
			_radio.conn_curr->pause_tx = 1;
   146bc:	4b28      	ldr	r3, [pc, #160]	; (14760 <isr_rx_conn+0x314>)
   146be:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   146c2:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   146c6:	f043 0308 	orr.w	r3, r3, #8
   146ca:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   146ce:	f04f 0900 	mov.w	r9, #0
   146d2:	e08e      	b.n	147f2 <isr_rx_conn+0x3a6>
			enc_req_reused_send(_radio.conn_curr, *node_tx);
   146d4:	4631      	mov	r1, r6
   146d6:	4b22      	ldr	r3, [pc, #136]	; (14760 <isr_rx_conn+0x314>)
   146d8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   146dc:	f7fe fd38 	bl	13150 <enc_req_reused_send>
			*node_tx = NULL;
   146e0:	2600      	movs	r6, #0
	u8_t terminate = 0;
   146e2:	46b1      	mov	r9, r6
   146e4:	e085      	b.n	147f2 <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_rx = 0;
   146e6:	4b1e      	ldr	r3, [pc, #120]	; (14760 <isr_rx_conn+0x314>)
   146e8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   146ec:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   146f0:	f36f 0182 	bfc	r1, #2, #1
   146f4:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   146f8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   146fc:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   14700:	f36f 01c3 	bfc	r1, #3, #1
   14704:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   14708:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1470c:	f04f 0900 	mov.w	r9, #0
   14710:	f8a3 9044 	strh.w	r9, [r3, #68]	; 0x44
   14714:	e06d      	b.n	147f2 <isr_rx_conn+0x3a6>
		if ((_radio.conn_curr->llcp_length.req !=
   14716:	4b12      	ldr	r3, [pc, #72]	; (14760 <isr_rx_conn+0x314>)
   14718:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1471c:	f893 10e8 	ldrb.w	r1, [r3, #232]	; 0xe8
		     _radio.conn_curr->llcp_length.ack) &&
   14720:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
		if ((_radio.conn_curr->llcp_length.req !=
   14724:	4291      	cmp	r1, r2
   14726:	d060      	beq.n	147ea <isr_rx_conn+0x39e>
		    (_radio.conn_curr->llcp_length.state ==
   14728:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   1472c:	f002 0203 	and.w	r2, r2, #3
		     _radio.conn_curr->llcp_length.ack) &&
   14730:	2a01      	cmp	r2, #1
   14732:	d002      	beq.n	1473a <isr_rx_conn+0x2ee>
	u8_t terminate = 0;
   14734:	f04f 0900 	mov.w	r9, #0
   14738:	e05b      	b.n	147f2 <isr_rx_conn+0x3a6>
			_radio.conn_curr->pause_tx = 1;
   1473a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1473e:	f042 0208 	orr.w	r2, r2, #8
   14742:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   14746:	4b06      	ldr	r3, [pc, #24]	; (14760 <isr_rx_conn+0x314>)
   14748:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1474c:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   14750:	2102      	movs	r1, #2
   14752:	f361 0201 	bfi	r2, r1, #0, #2
   14756:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	u8_t terminate = 0;
   1475a:	f04f 0900 	mov.w	r9, #0
   1475e:	e048      	b.n	147f2 <isr_rx_conn+0x3a6>
   14760:	20000fec 	.word	0x20000fec
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   14764:	4bbe      	ldr	r3, [pc, #760]	; (14a60 <isr_rx_conn+0x614>)
   14766:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1476a:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
   1476e:	2102      	movs	r1, #2
   14770:	f361 0201 	bfi	r2, r1, #0, #2
   14774:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   14778:	4bb9      	ldr	r3, [pc, #740]	; (14a60 <isr_rx_conn+0x614>)
   1477a:	7bdb      	ldrb	r3, [r3, #15]
   1477c:	b2db      	uxtb	r3, r3
   1477e:	2b03      	cmp	r3, #3
   14780:	d002      	beq.n	14788 <isr_rx_conn+0x33c>
	u8_t terminate = 0;
   14782:	f04f 0900 	mov.w	r9, #0
   14786:	e034      	b.n	147f2 <isr_rx_conn+0x3a6>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   14788:	4ab6      	ldr	r2, [pc, #728]	; (14a64 <isr_rx_conn+0x618>)
   1478a:	e892 0003 	ldmia.w	r2, {r0, r1}
   1478e:	e88d 0003 	stmia.w	sp, {r0, r1}
	struct connection *conn = _radio.conn_curr;
   14792:	4bb3      	ldr	r3, [pc, #716]	; (14a60 <isr_rx_conn+0x614>)
   14794:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   14798:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   1479c:	f3c3 0382 	ubfx	r3, r3, #2, #3
   147a0:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   147a4:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   147a8:	430b      	orrs	r3, r1
	conn->phy_tx_time = phy_tx_time[phys];
   147aa:	a904      	add	r1, sp, #16
   147ac:	440b      	add	r3, r1
   147ae:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   147b2:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   147b6:	f361 0302 	bfi	r3, r1, #0, #3
   147ba:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	u8_t terminate = 0;
   147be:	f04f 0900 	mov.w	r9, #0
   147c2:	e016      	b.n	147f2 <isr_rx_conn+0x3a6>
		_radio.conn_curr->phy_tx_time =
   147c4:	4ba6      	ldr	r3, [pc, #664]	; (14a60 <isr_rx_conn+0x614>)
   147c6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   147ca:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   147ce:	f3c2 0282 	ubfx	r2, r2, #2, #3
		_radio.conn_curr->phy_tx_time =
   147d2:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
   147d6:	f362 0102 	bfi	r1, r2, #0, #3
   147da:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
	u8_t terminate = 0;
   147de:	f04f 0900 	mov.w	r9, #0
   147e2:	e006      	b.n	147f2 <isr_rx_conn+0x3a6>
   147e4:	f04f 0900 	mov.w	r9, #0
   147e8:	e003      	b.n	147f2 <isr_rx_conn+0x3a6>
   147ea:	f04f 0900 	mov.w	r9, #0
   147ee:	e000      	b.n	147f2 <isr_rx_conn+0x3a6>
	u8_t terminate = 0;
   147f0:	46a1      	mov	r9, r4
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   147f2:	4b9b      	ldr	r3, [pc, #620]	; (14a60 <isr_rx_conn+0x614>)
   147f4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   147f8:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
   147fc:	4414      	add	r4, r2
   147fe:	b2e4      	uxtb	r4, r4
   14800:	f883 4151 	strb.w	r4, [r3, #337]	; 0x151
			    _radio.conn_curr->packet_tx_head_len) {
   14804:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
			if (_radio.conn_curr->packet_tx_head_offset ==
   14808:	429c      	cmp	r4, r3
   1480a:	d01c      	beq.n	14846 <isr_rx_conn+0x3fa>
	struct radio_pdu_node_tx *tx_release = NULL;
   1480c:	2600      	movs	r6, #0
	if (terminate) {
   1480e:	f1b9 0f00 	cmp.w	r9, #0
   14812:	d155      	bne.n	148c0 <isr_rx_conn+0x474>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   14814:	7a2a      	ldrb	r2, [r5, #8]
   14816:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1481a:	4b91      	ldr	r3, [pc, #580]	; (14a60 <isr_rx_conn+0x614>)
   1481c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14820:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14824:	f3c3 0340 	ubfx	r3, r3, #1, #1
   14828:	429a      	cmp	r2, r3
   1482a:	d053      	beq.n	148d4 <isr_rx_conn+0x488>
	return 0;
   1482c:	2300      	movs	r3, #0
		if (terminate) {
   1482e:	2b00      	cmp	r3, #0
   14830:	f040 81f5 	bne.w	14c1e <isr_rx_conn+0x7d2>
		_radio.crc_expire = 0;
   14834:	4b8a      	ldr	r3, [pc, #552]	; (14a60 <isr_rx_conn+0x614>)
   14836:	2400      	movs	r4, #0
   14838:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		_radio.conn_curr->supervision_expire = 0;
   1483c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14840:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
   14844:	e636      	b.n	144b4 <isr_rx_conn+0x68>
	struct connection *conn = _radio.conn_curr;
   14846:	4b86      	ldr	r3, [pc, #536]	; (14a60 <isr_rx_conn+0x614>)
   14848:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	conn->packet_tx_head_len = 0;
   1484c:	2200      	movs	r2, #0
   1484e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   14852:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   14856:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   1485a:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   1485e:	428a      	cmp	r2, r1
   14860:	d007      	beq.n	14872 <isr_rx_conn+0x426>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   14862:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
   14866:	428a      	cmp	r2, r1
   14868:	d01a      	beq.n	148a0 <isr_rx_conn+0x454>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   1486a:	6812      	ldr	r2, [r2, #0]
   1486c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
   14870:	e7cd      	b.n	1480e <isr_rx_conn+0x3c2>
		if (node_tx) {
   14872:	2e00      	cmp	r6, #0
   14874:	d0cb      	beq.n	1480e <isr_rx_conn+0x3c2>
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   14876:	6812      	ldr	r2, [r2, #0]
   14878:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   1487c:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   14880:	4281      	cmp	r1, r0
   14882:	d007      	beq.n	14894 <isr_rx_conn+0x448>
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   14884:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
   14888:	4977      	ldr	r1, [pc, #476]	; (14a68 <isr_rx_conn+0x61c>)
   1488a:	4630      	mov	r0, r6
   1488c:	f7fa fcab 	bl	f1e6 <mem_release>
	return NULL;
   14890:	2600      	movs	r6, #0
   14892:	e7bc      	b.n	1480e <isr_rx_conn+0x3c2>
				conn->pkt_tx_ctrl = NULL;
   14894:	2200      	movs	r2, #0
   14896:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   1489a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1489e:	e7f3      	b.n	14888 <isr_rx_conn+0x43c>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   148a0:	6809      	ldr	r1, [r1, #0]
   148a2:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
   148a6:	e7e0      	b.n	1486a <isr_rx_conn+0x41e>
			_radio.conn_curr->empty = 0;
   148a8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   148ac:	f36f 12c7 	bfc	r2, #7, #1
   148b0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	struct radio_pdu_node_tx *tx_release = NULL;
   148b4:	2600      	movs	r6, #0
	u8_t terminate = 0;
   148b6:	46b1      	mov	r9, r6
   148b8:	e7a9      	b.n	1480e <isr_rx_conn+0x3c2>
	struct radio_pdu_node_tx *tx_release = NULL;
   148ba:	2600      	movs	r6, #0
	u8_t terminate = 0;
   148bc:	46b1      	mov	r9, r6
   148be:	e7a6      	b.n	1480e <isr_rx_conn+0x3c2>
		connection_release(_radio.conn_curr);
   148c0:	4c67      	ldr	r4, [pc, #412]	; (14a60 <isr_rx_conn+0x614>)
   148c2:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   148c6:	f7fd fdd9 	bl	1247c <connection_release>
		_radio.conn_curr = NULL;
   148ca:	2300      	movs	r3, #0
   148cc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
		return terminate;
   148d0:	464b      	mov	r3, r9
   148d2:	e7ac      	b.n	1482e <isr_rx_conn+0x3e2>
	if (_radio.packet_rx_acquire >=
   148d4:	4a62      	ldr	r2, [pc, #392]	; (14a60 <isr_rx_conn+0x614>)
   148d6:	f892 013e 	ldrb.w	r0, [r2, #318]	; 0x13e
	    _radio.packet_rx_last) {
   148da:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   148de:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   148e0:	4290      	cmp	r0, r2
   148e2:	d347      	bcc.n	14974 <isr_rx_conn+0x528>
			_radio.packet_rx_last);
   148e4:	4b5e      	ldr	r3, [pc, #376]	; (14a60 <isr_rx_conn+0x614>)
   148e6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   148ea:	1ac3      	subs	r3, r0, r3
   148ec:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   148ee:	2b02      	cmp	r3, #2
   148f0:	d94a      	bls.n	14988 <isr_rx_conn+0x53c>
	return _radio.packet_rx[_radio.packet_rx_last];
   148f2:	4b5b      	ldr	r3, [pc, #364]	; (14a60 <isr_rx_conn+0x614>)
   148f4:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   148f8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   148fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   14900:	2b00      	cmp	r3, #0
   14902:	f000 814e 	beq.w	14ba2 <isr_rx_conn+0x756>
	    ((_radio.fc_ena == 0) ||
   14906:	4b56      	ldr	r3, [pc, #344]	; (14a60 <isr_rx_conn+0x614>)
   14908:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
	    (packet_rx_reserve_get(3) != 0) &&
   1490c:	2b00      	cmp	r3, #0
   1490e:	d045      	beq.n	1499c <isr_rx_conn+0x550>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   14910:	4b53      	ldr	r3, [pc, #332]	; (14a60 <isr_rx_conn+0x614>)
   14912:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   14916:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	    ((_radio.fc_ena == 0) ||
   1491a:	429a      	cmp	r2, r3
   1491c:	d036      	beq.n	1498c <isr_rx_conn+0x540>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1491e:	4b50      	ldr	r3, [pc, #320]	; (14a60 <isr_rx_conn+0x614>)
   14920:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	      (_radio.fc_req == _radio.fc_ack)) ||
   14924:	429a      	cmp	r2, r3
   14926:	f000 813e 	beq.w	14ba6 <isr_rx_conn+0x75a>
	      (_radio.fc_req != _radio.fc_ack) &&
   1492a:	4a4d      	ldr	r2, [pc, #308]	; (14a60 <isr_rx_conn+0x614>)
   1492c:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   14930:	b2db      	uxtb	r3, r3
   14932:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   14936:	4293      	cmp	r3, r2
   14938:	f000 8137 	beq.w	14baa <isr_rx_conn+0x75e>
		(((_radio.fc_req == 0) &&
   1493c:	4b48      	ldr	r3, [pc, #288]	; (14a60 <isr_rx_conn+0x614>)
   1493e:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	      (_radio.fc_req != _radio.fc_ack) &&
   14942:	b92b      	cbnz	r3, 14950 <isr_rx_conn+0x504>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
   14944:	4b46      	ldr	r3, [pc, #280]	; (14a60 <isr_rx_conn+0x614>)
   14946:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
		   _radio.conn_curr->handle)) ||
   1494a:	8c0b      	ldrh	r3, [r1, #32]
		(((_radio.fc_req == 0) &&
   1494c:	429a      	cmp	r2, r3
   1494e:	d025      	beq.n	1499c <isr_rx_conn+0x550>
		 ((_radio.fc_req != 0) &&
   14950:	4b43      	ldr	r3, [pc, #268]	; (14a60 <isr_rx_conn+0x614>)
   14952:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		   _radio.conn_curr->handle)) ||
   14956:	2b00      	cmp	r3, #0
   14958:	f000 8129 	beq.w	14bae <isr_rx_conn+0x762>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   1495c:	4b40      	ldr	r3, [pc, #256]	; (14a60 <isr_rx_conn+0x614>)
   1495e:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   14962:	32b7      	adds	r2, #183	; 0xb7
   14964:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   14968:	88da      	ldrh	r2, [r3, #6]
		   _radio.conn_curr->handle)))))) {
   1496a:	8c0b      	ldrh	r3, [r1, #32]
		 ((_radio.fc_req != 0) &&
   1496c:	429a      	cmp	r2, r3
   1496e:	d015      	beq.n	1499c <isr_rx_conn+0x550>
	return 0;
   14970:	2300      	movs	r3, #0
   14972:	e75c      	b.n	1482e <isr_rx_conn+0x3e2>
		return (_radio.packet_rx_count -
   14974:	4a3a      	ldr	r2, [pc, #232]	; (14a60 <isr_rx_conn+0x614>)
   14976:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   1497a:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1497e:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   14980:	fa50 f383 	uxtab	r3, r0, r3
   14984:	b2db      	uxtb	r3, r3
   14986:	e7b2      	b.n	148ee <isr_rx_conn+0x4a2>
		return 0;
   14988:	2300      	movs	r3, #0
   1498a:	e7b9      	b.n	14900 <isr_rx_conn+0x4b4>
	      (_radio.fc_req == _radio.fc_ack)) ||
   1498c:	4834      	ldr	r0, [pc, #208]	; (14a60 <isr_rx_conn+0x614>)
   1498e:	f890 317c 	ldrb.w	r3, [r0, #380]	; 0x17c
   14992:	b2db      	uxtb	r3, r3
   14994:	f890 017d 	ldrb.w	r0, [r0, #381]	; 0x17d
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   14998:	4283      	cmp	r3, r0
   1499a:	d1c0      	bne.n	1491e <isr_rx_conn+0x4d2>
		if (pdu_data_rx->len != 0) {
   1499c:	7a68      	ldrb	r0, [r5, #9]
   1499e:	2800      	cmp	r0, #0
   149a0:	f000 80b8 	beq.w	14b14 <isr_rx_conn+0x6c8>
			if (_radio.conn_curr->enc_rx) {
   149a4:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   149a8:	f013 0f10 	tst.w	r3, #16
   149ac:	d133      	bne.n	14a16 <isr_rx_conn+0x5ca>
		u8_t ccm_rx_increment = 0;
   149ae:	464c      	mov	r4, r9
			if ((_radio.conn_curr->enc_rx &&
   149b0:	4b2b      	ldr	r3, [pc, #172]	; (14a60 <isr_rx_conn+0x614>)
   149b2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   149b6:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   149ba:	f013 0f10 	tst.w	r3, #16
   149be:	d135      	bne.n	14a2c <isr_rx_conn+0x5e0>
			    (_radio.conn_curr->pause_rx &&
   149c0:	4b27      	ldr	r3, [pc, #156]	; (14a60 <isr_rx_conn+0x614>)
   149c2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   149c6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   149ca:	f012 0f04 	tst.w	r2, #4
   149ce:	f000 8082 	beq.w	14ad6 <isr_rx_conn+0x68a>
	u8_t opcode = pdu_data->payload.llctrl.opcode;
   149d2:	f898 1003 	ldrb.w	r1, [r8, #3]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   149d6:	7a2a      	ldrb	r2, [r5, #8]
   149d8:	f002 0203 	and.w	r2, r2, #3
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   149dc:	2a03      	cmp	r2, #3
   149de:	d02a      	beq.n	14a36 <isr_rx_conn+0x5ea>
   149e0:	2201      	movs	r2, #1
			    (_radio.conn_curr->pause_rx &&
   149e2:	2a00      	cmp	r2, #0
   149e4:	d077      	beq.n	14ad6 <isr_rx_conn+0x68a>
				_radio.state = STATE_CLOSE;
   149e6:	2203      	movs	r2, #3
   149e8:	4b1d      	ldr	r3, [pc, #116]	; (14a60 <isr_rx_conn+0x614>)
   149ea:	741a      	strb	r2, [r3, #16]
				radio_disable();
   149ec:	f7fa fdf4 	bl	f5d8 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   149f0:	f7fa fe0c 	bl	f60c <radio_is_ready>
   149f4:	2800      	cmp	r0, #0
   149f6:	d168      	bne.n	14aca <isr_rx_conn+0x67e>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   149f8:	4c19      	ldr	r4, [pc, #100]	; (14a60 <isr_rx_conn+0x614>)
   149fa:	213d      	movs	r1, #61	; 0x3d
   149fc:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   14a00:	f7ff fc90 	bl	14324 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   14a04:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   14a08:	f7fd fd38 	bl	1247c <connection_release>
				_radio.conn_curr = NULL;
   14a0c:	2300      	movs	r3, #0
   14a0e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
				return 1; /* terminated */
   14a12:	2301      	movs	r3, #1
   14a14:	e70b      	b.n	1482e <isr_rx_conn+0x3e2>
				done = radio_ccm_is_done();
   14a16:	f7fb f821 	bl	fa5c <radio_ccm_is_done>
				LL_ASSERT(done);
   14a1a:	b108      	cbz	r0, 14a20 <isr_rx_conn+0x5d4>
				ccm_rx_increment = 1;
   14a1c:	2401      	movs	r4, #1
   14a1e:	e7c7      	b.n	149b0 <isr_rx_conn+0x564>
				LL_ASSERT(done);
   14a20:	4040      	eors	r0, r0
   14a22:	f380 8811 	msr	BASEPRI, r0
   14a26:	f04f 0004 	mov.w	r0, #4
   14a2a:	df02      	svc	2
			     !radio_ccm_mic_is_valid()) ||
   14a2c:	f7fb f836 	bl	fa9c <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   14a30:	2800      	cmp	r0, #0
   14a32:	d0d8      	beq.n	149e6 <isr_rx_conn+0x59a>
   14a34:	e7c4      	b.n	149c0 <isr_rx_conn+0x574>
   14a36:	f993 201d 	ldrsb.w	r2, [r3, #29]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   14a3a:	2a00      	cmp	r2, #0
   14a3c:	db1d      	blt.n	14a7a <isr_rx_conn+0x62e>
		((!conn->refresh &&
   14a3e:	f893 00f8 	ldrb.w	r0, [r3, #248]	; 0xf8
	       (!conn->role &&
   14a42:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   14a46:	d111      	bne.n	14a6c <isr_rx_conn+0x620>
		((!conn->refresh &&
   14a48:	2902      	cmp	r1, #2
   14a4a:	d00f      	beq.n	14a6c <isr_rx_conn+0x620>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14a4c:	2905      	cmp	r1, #5
   14a4e:	d014      	beq.n	14a7a <isr_rx_conn+0x62e>
   14a50:	2906      	cmp	r1, #6
   14a52:	d012      	beq.n	14a7a <isr_rx_conn+0x62e>
   14a54:	290d      	cmp	r1, #13
   14a56:	d010      	beq.n	14a7a <isr_rx_conn+0x62e>
   14a58:	2911      	cmp	r1, #17
   14a5a:	d00e      	beq.n	14a7a <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14a5c:	2201      	movs	r2, #1
   14a5e:	e7c0      	b.n	149e2 <isr_rx_conn+0x596>
   14a60:	20000fec 	.word	0x20000fec
   14a64:	0002e540 	.word	0x0002e540
   14a68:	20001144 	.word	0x20001144
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14a6c:	b128      	cbz	r0, 14a7a <isr_rx_conn+0x62e>
		 (conn->refresh &&
   14a6e:	2902      	cmp	r1, #2
   14a70:	d003      	beq.n	14a7a <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   14a72:	290b      	cmp	r1, #11
   14a74:	d001      	beq.n	14a7a <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   14a76:	2904      	cmp	r1, #4
   14a78:	d1e8      	bne.n	14a4c <isr_rx_conn+0x600>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14a7a:	2a00      	cmp	r2, #0
   14a7c:	db01      	blt.n	14a82 <isr_rx_conn+0x636>
   14a7e:	2200      	movs	r2, #0
   14a80:	e7af      	b.n	149e2 <isr_rx_conn+0x596>
		((!conn->refresh &&
   14a82:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	       (conn->role &&
   14a86:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   14a8a:	d109      	bne.n	14aa0 <isr_rx_conn+0x654>
		((!conn->refresh &&
   14a8c:	2902      	cmp	r1, #2
   14a8e:	d007      	beq.n	14aa0 <isr_rx_conn+0x654>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14a90:	2906      	cmp	r1, #6
   14a92:	d014      	beq.n	14abe <isr_rx_conn+0x672>
   14a94:	290d      	cmp	r1, #13
   14a96:	d014      	beq.n	14ac2 <isr_rx_conn+0x676>
   14a98:	2911      	cmp	r1, #17
   14a9a:	d114      	bne.n	14ac6 <isr_rx_conn+0x67a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14a9c:	2200      	movs	r2, #0
   14a9e:	e7a0      	b.n	149e2 <isr_rx_conn+0x596>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14aa0:	b13a      	cbz	r2, 14ab2 <isr_rx_conn+0x666>
		 (conn->refresh &&
   14aa2:	2902      	cmp	r1, #2
   14aa4:	d007      	beq.n	14ab6 <isr_rx_conn+0x66a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   14aa6:	290b      	cmp	r1, #11
   14aa8:	d007      	beq.n	14aba <isr_rx_conn+0x66e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   14aaa:	2903      	cmp	r1, #3
   14aac:	d1f0      	bne.n	14a90 <isr_rx_conn+0x644>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14aae:	2200      	movs	r2, #0
   14ab0:	e797      	b.n	149e2 <isr_rx_conn+0x596>
   14ab2:	2200      	movs	r2, #0
   14ab4:	e795      	b.n	149e2 <isr_rx_conn+0x596>
   14ab6:	2200      	movs	r2, #0
   14ab8:	e793      	b.n	149e2 <isr_rx_conn+0x596>
   14aba:	2200      	movs	r2, #0
   14abc:	e791      	b.n	149e2 <isr_rx_conn+0x596>
   14abe:	2200      	movs	r2, #0
   14ac0:	e78f      	b.n	149e2 <isr_rx_conn+0x596>
   14ac2:	2200      	movs	r2, #0
   14ac4:	e78d      	b.n	149e2 <isr_rx_conn+0x596>
   14ac6:	2201      	movs	r2, #1
   14ac8:	e78b      	b.n	149e2 <isr_rx_conn+0x596>
				LL_ASSERT(!radio_is_ready());
   14aca:	4040      	eors	r0, r0
   14acc:	f380 8811 	msr	BASEPRI, r0
   14ad0:	f04f 0004 	mov.w	r0, #4
   14ad4:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
   14ad6:	2200      	movs	r2, #0
   14ad8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   14adc:	4b70      	ldr	r3, [pc, #448]	; (14ca0 <isr_rx_conn+0x854>)
   14ade:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14ae2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   14ae6:	7a2b      	ldrb	r3, [r5, #8]
   14ae8:	f013 0303 	ands.w	r3, r3, #3
   14aec:	d00c      	beq.n	14b08 <isr_rx_conn+0x6bc>
   14aee:	2b02      	cmp	r3, #2
   14af0:	d905      	bls.n	14afe <isr_rx_conn+0x6b2>
				nack = isr_rx_conn_pkt_ctrl(radio_pdu_node_rx,
   14af2:	f10d 010b 	add.w	r1, sp, #11
   14af6:	4628      	mov	r0, r5
   14af8:	f7fe fb4c 	bl	13194 <isr_rx_conn_pkt_ctrl>
   14afc:	e030      	b.n	14b60 <isr_rx_conn+0x714>
				*rx_enqueue = 1;
   14afe:	2301      	movs	r3, #1
   14b00:	f88d 300b 	strb.w	r3, [sp, #11]
	u8_t nack = 0;
   14b04:	4648      	mov	r0, r9
   14b06:	e02b      	b.n	14b60 <isr_rx_conn+0x714>
				LL_ASSERT(0);
   14b08:	4040      	eors	r0, r0
   14b0a:	f380 8811 	msr	BASEPRI, r0
   14b0e:	f04f 0004 	mov.w	r0, #4
   14b12:	df02      	svc	2
		} else if ((_radio.conn_curr->enc_rx) ||
   14b14:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14b18:	f013 0f14 	tst.w	r3, #20
   14b1c:	d01f      	beq.n	14b5e <isr_rx_conn+0x712>
			appto_reload_new = (conn->apto_reload >
   14b1e:	f8b1 204a 	ldrh.w	r2, [r1, #74]	; 0x4a
					    (conn->latency + 6)) ?
   14b22:	8ccb      	ldrh	r3, [r1, #38]	; 0x26
   14b24:	1d9c      	adds	r4, r3, #6
			appto_reload_new = (conn->apto_reload >
   14b26:	42a2      	cmp	r2, r4
   14b28:	dd04      	ble.n	14b34 <isr_rx_conn+0x6e8>
					   (conn->apto_reload -
   14b2a:	1ad3      	subs	r3, r2, r3
   14b2c:	b29b      	uxth	r3, r3
			appto_reload_new = (conn->apto_reload >
   14b2e:	3b06      	subs	r3, #6
   14b30:	b29b      	uxth	r3, r3
   14b32:	e000      	b.n	14b36 <isr_rx_conn+0x6ea>
   14b34:	4613      	mov	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   14b36:	f8b1 4046 	ldrh.w	r4, [r1, #70]	; 0x46
   14b3a:	429c      	cmp	r4, r3
   14b3c:	d004      	beq.n	14b48 <isr_rx_conn+0x6fc>
				conn->appto_reload = appto_reload_new;
   14b3e:	f8a1 3046 	strh.w	r3, [r1, #70]	; 0x46
				conn->apto_expire = 0;
   14b42:	2300      	movs	r3, #0
   14b44:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   14b48:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
   14b4c:	bb3b      	cbnz	r3, 14b9e <isr_rx_conn+0x752>
				conn->appto_expire = conn->appto_reload;
   14b4e:	f8b1 3046 	ldrh.w	r3, [r1, #70]	; 0x46
   14b52:	f8a1 3048 	strh.w	r3, [r1, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   14b56:	f8a1 204c 	strh.w	r2, [r1, #76]	; 0x4c
		u8_t ccm_rx_increment = 0;
   14b5a:	4604      	mov	r4, r0
   14b5c:	e000      	b.n	14b60 <isr_rx_conn+0x714>
   14b5e:	4604      	mov	r4, r0
		if (!nack) {
   14b60:	bb38      	cbnz	r0, 14bb2 <isr_rx_conn+0x766>
			_radio.conn_curr->nesn++;
   14b62:	4b4f      	ldr	r3, [pc, #316]	; (14ca0 <isr_rx_conn+0x854>)
   14b64:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14b68:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14b6c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   14b70:	f082 0201 	eor.w	r2, r2, #1
   14b74:	f362 0341 	bfi	r3, r2, #1, #1
   14b78:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			if (ccm_rx_increment) {
   14b7c:	b1dc      	cbz	r4, 14bb6 <isr_rx_conn+0x76a>
				_radio.conn_curr->ccm_rx.counter++;
   14b7e:	4b48      	ldr	r3, [pc, #288]	; (14ca0 <isr_rx_conn+0x854>)
   14b80:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14b84:	f8d1 2109 	ldr.w	r2, [r1, #265]	; 0x109
   14b88:	f8d1 310d 	ldr.w	r3, [r1, #269]	; 0x10d
   14b8c:	3201      	adds	r2, #1
   14b8e:	f143 0300 	adc.w	r3, r3, #0
   14b92:	f8c1 2109 	str.w	r2, [r1, #265]	; 0x109
   14b96:	f8c1 310d 	str.w	r3, [r1, #269]	; 0x10d
	return 0;
   14b9a:	2300      	movs	r3, #0
   14b9c:	e647      	b.n	1482e <isr_rx_conn+0x3e2>
		u8_t ccm_rx_increment = 0;
   14b9e:	4604      	mov	r4, r0
   14ba0:	e7de      	b.n	14b60 <isr_rx_conn+0x714>
	return 0;
   14ba2:	2300      	movs	r3, #0
   14ba4:	e643      	b.n	1482e <isr_rx_conn+0x3e2>
   14ba6:	2300      	movs	r3, #0
   14ba8:	e641      	b.n	1482e <isr_rx_conn+0x3e2>
   14baa:	2300      	movs	r3, #0
   14bac:	e63f      	b.n	1482e <isr_rx_conn+0x3e2>
   14bae:	2300      	movs	r3, #0
   14bb0:	e63d      	b.n	1482e <isr_rx_conn+0x3e2>
   14bb2:	2300      	movs	r3, #0
   14bb4:	e63b      	b.n	1482e <isr_rx_conn+0x3e2>
   14bb6:	2300      	movs	r3, #0
   14bb8:	e639      	b.n	1482e <isr_rx_conn+0x3e2>
	struct radio_pdu_node_tx *tx_release = NULL;
   14bba:	2600      	movs	r6, #0
   14bbc:	e47a      	b.n	144b4 <isr_rx_conn+0x68>
			STATE_CLOSE : STATE_TX;
   14bbe:	2303      	movs	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   14bc0:	4a37      	ldr	r2, [pc, #220]	; (14ca0 <isr_rx_conn+0x854>)
   14bc2:	7413      	strb	r3, [r2, #16]
	if (_radio.state == STATE_CLOSE) {
   14bc4:	2b03      	cmp	r3, #3
   14bc6:	d040      	beq.n	14c4a <isr_rx_conn+0x7fe>
		radio_tmr_tifs_set(RADIO_TIFS);
   14bc8:	2096      	movs	r0, #150	; 0x96
   14bca:	f7fa fe0d 	bl	f7e8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   14bce:	4b34      	ldr	r3, [pc, #208]	; (14ca0 <isr_rx_conn+0x854>)
   14bd0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14bd4:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   14bd8:	f000 0007 	and.w	r0, r0, #7
   14bdc:	f7fa fd52 	bl	f684 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   14be0:	f7fa feba 	bl	f958 <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   14be4:	9a03      	ldr	r2, [sp, #12]
   14be6:	4b2e      	ldr	r3, [pc, #184]	; (14ca0 <isr_rx_conn+0x854>)
   14be8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14bec:	f891 00f8 	ldrb.w	r0, [r1, #248]	; 0xf8
   14bf0:	7811      	ldrb	r1, [r2, #0]
   14bf2:	f360 01c3 	bfi	r1, r0, #3, #1
   14bf6:	7011      	strb	r1, [r2, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   14bf8:	9903      	ldr	r1, [sp, #12]
   14bfa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14bfe:	f892 20f8 	ldrb.w	r2, [r2, #248]	; 0xf8
   14c02:	f3c2 0240 	ubfx	r2, r2, #1, #1
   14c06:	7808      	ldrb	r0, [r1, #0]
   14c08:	f362 0082 	bfi	r0, r2, #2, #1
   14c0c:	7008      	strb	r0, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   14c0e:	9903      	ldr	r1, [sp, #12]
   14c10:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   14c14:	f7fd fdde 	bl	127d4 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   14c18:	f7fa fcf8 	bl	f60c <radio_is_ready>
   14c1c:	bb38      	cbnz	r0, 14c6e <isr_rx_conn+0x822>
	if (!radio_tmr_aa_restore()) {
   14c1e:	f7fa fe8f 	bl	f940 <radio_tmr_aa_restore>
   14c22:	b350      	cbz	r0, 14c7a <isr_rx_conn+0x82e>
	if (!_radio.conn_curr) {
   14c24:	4b1e      	ldr	r3, [pc, #120]	; (14ca0 <isr_rx_conn+0x854>)
   14c26:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14c2a:	b13b      	cbz	r3, 14c3c <isr_rx_conn+0x7f0>
	if (tx_release) {
   14c2c:	b11e      	cbz	r6, 14c36 <isr_rx_conn+0x7ea>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   14c2e:	4631      	mov	r1, r6
   14c30:	8c18      	ldrh	r0, [r3, #32]
   14c32:	f7fd fb9f 	bl	12374 <pdu_node_tx_release>
	if (rx_enqueue) {
   14c36:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14c3a:	bb1b      	cbnz	r3, 14c84 <isr_rx_conn+0x838>
}
   14c3c:	b004      	add	sp, #16
   14c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			STATE_CLOSE : STATE_TX;
   14c42:	2303      	movs	r3, #3
   14c44:	e7bc      	b.n	14bc0 <isr_rx_conn+0x774>
   14c46:	2302      	movs	r3, #2
   14c48:	e7ba      	b.n	14bc0 <isr_rx_conn+0x774>
		if (_radio.role == ROLE_MASTER) {
   14c4a:	7bd3      	ldrb	r3, [r2, #15]
   14c4c:	b2db      	uxtb	r3, r3
   14c4e:	2b04      	cmp	r3, #4
   14c50:	d002      	beq.n	14c58 <isr_rx_conn+0x80c>
			radio_switch_complete_and_disable();
   14c52:	f7fa fd27 	bl	f6a4 <radio_switch_complete_and_disable>
   14c56:	e7c5      	b.n	14be4 <isr_rx_conn+0x798>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   14c58:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   14c5c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14c60:	f368 12c7 	bfi	r2, r8, #7, #1
   14c64:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   14c68:	f7fa fcb6 	bl	f5d8 <radio_disable>
			goto isr_rx_conn_exit;
   14c6c:	e7d7      	b.n	14c1e <isr_rx_conn+0x7d2>
	LL_ASSERT(!radio_is_ready());
   14c6e:	4040      	eors	r0, r0
   14c70:	f380 8811 	msr	BASEPRI, r0
   14c74:	f04f 0004 	mov.w	r0, #4
   14c78:	df02      	svc	2
		radio_tmr_aa_save(radio_tmr_aa_get());
   14c7a:	f7fa fe55 	bl	f928 <radio_tmr_aa_get>
   14c7e:	f7fa fe59 	bl	f934 <radio_tmr_aa_save>
   14c82:	e7cf      	b.n	14c24 <isr_rx_conn+0x7d8>
		rx_fc_lock(_radio.conn_curr->handle);
   14c84:	4c06      	ldr	r4, [pc, #24]	; (14ca0 <isr_rx_conn+0x854>)
   14c86:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14c8a:	8c18      	ldrh	r0, [r3, #32]
   14c8c:	f7fc fdec 	bl	11868 <rx_fc_lock>
		radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   14c90:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14c94:	8c1b      	ldrh	r3, [r3, #32]
   14c96:	80eb      	strh	r3, [r5, #6]
		packet_rx_enqueue();
   14c98:	f7ff fad0 	bl	1423c <packet_rx_enqueue>
	return;
   14c9c:	e7ce      	b.n	14c3c <isr_rx_conn+0x7f0>
   14c9e:	bf00      	nop
   14ca0:	20000fec 	.word	0x20000fec

00014ca4 <prepare_normal_set>:
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14ca4:	6803      	ldr	r3, [r0, #0]
   14ca6:	2b00      	cmp	r3, #0
   14ca8:	db00      	blt.n	14cac <prepare_normal_set+0x8>
   14caa:	4770      	bx	lr
{
   14cac:	b530      	push	{r4, r5, lr}
   14cae:	b089      	sub	sp, #36	; 0x24
			ticks_active_to_start : hdr->ticks_preempt_to_start;
   14cb0:	6885      	ldr	r5, [r0, #8]
			 hdr->ticks_preempt_to_start) ? hdr->
   14cb2:	6844      	ldr	r4, [r0, #4]
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
   14cb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		u32_t ticks_drift_minus =
   14cb8:	42a5      	cmp	r5, r4
   14cba:	bf2c      	ite	cs
   14cbc:	1b5b      	subcs	r3, r3, r5
   14cbe:	1b1b      	subcc	r3, r3, r4
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   14cc0:	b29b      	uxth	r3, r3
		ticker_status =
   14cc2:	9006      	str	r0, [sp, #24]
   14cc4:	480a      	ldr	r0, [pc, #40]	; (14cf0 <prepare_normal_set+0x4c>)
   14cc6:	9005      	str	r0, [sp, #20]
   14cc8:	2000      	movs	r0, #0
   14cca:	9004      	str	r0, [sp, #16]
   14ccc:	9003      	str	r0, [sp, #12]
   14cce:	9002      	str	r0, [sp, #8]
   14cd0:	9301      	str	r3, [sp, #4]
   14cd2:	9300      	str	r3, [sp, #0]
   14cd4:	4603      	mov	r3, r0
   14cd6:	f7fb ff89 	bl	10bec <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14cda:	b108      	cbz	r0, 14ce0 <prepare_normal_set+0x3c>
   14cdc:	2802      	cmp	r0, #2
   14cde:	d101      	bne.n	14ce4 <prepare_normal_set+0x40>
}
   14ce0:	b009      	add	sp, #36	; 0x24
   14ce2:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14ce4:	4040      	eors	r0, r0
   14ce6:	f380 8811 	msr	BASEPRI, r0
   14cea:	f04f 0004 	mov.w	r0, #4
   14cee:	df02      	svc	2
   14cf0:	0001156d 	.word	0x0001156d

00014cf4 <event_common_prepare>:
{
   14cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14cf8:	b08a      	sub	sp, #40	; 0x28
   14cfa:	4681      	mov	r9, r0
   14cfc:	468a      	mov	sl, r1
   14cfe:	4616      	mov	r6, r2
   14d00:	461f      	mov	r7, r3
   14d02:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
   14d06:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
   14d08:	f8d3 8000 	ldr.w	r8, [r3]
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14d0c:	2c00      	cmp	r4, #0
   14d0e:	db25      	blt.n	14d5c <event_common_prepare+0x68>
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
   14d10:	4544      	cmp	r4, r8
   14d12:	d828      	bhi.n	14d66 <event_common_prepare+0x72>
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
   14d14:	4544      	cmp	r4, r8
   14d16:	d251      	bcs.n	14dbc <event_common_prepare+0xc8>
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
   14d18:	eba8 0404 	sub.w	r4, r8, r4
		event_active(0, 0, 0, NULL);
   14d1c:	2300      	movs	r3, #0
   14d1e:	461a      	mov	r2, r3
   14d20:	4619      	mov	r1, r3
   14d22:	4618      	mov	r0, r3
   14d24:	f7fd fa3a 	bl	1219c <event_active>
		ticker_status =
   14d28:	f241 43d1 	movw	r3, #5329	; 0x14d1
   14d2c:	9308      	str	r3, [sp, #32]
   14d2e:	4b5e      	ldr	r3, [pc, #376]	; (14ea8 <event_common_prepare+0x1b4>)
   14d30:	9307      	str	r3, [sp, #28]
   14d32:	2000      	movs	r0, #0
   14d34:	9006      	str	r0, [sp, #24]
   14d36:	4b5d      	ldr	r3, [pc, #372]	; (14eac <event_common_prepare+0x1b8>)
   14d38:	9305      	str	r3, [sp, #20]
   14d3a:	9004      	str	r0, [sp, #16]
   14d3c:	9003      	str	r0, [sp, #12]
   14d3e:	9002      	str	r0, [sp, #8]
   14d40:	9001      	str	r0, [sp, #4]
   14d42:	9400      	str	r4, [sp, #0]
   14d44:	464b      	mov	r3, r9
   14d46:	2201      	movs	r2, #1
   14d48:	4601      	mov	r1, r0
   14d4a:	f7fb ff01 	bl	10b50 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14d4e:	2800      	cmp	r0, #0
   14d50:	f000 8091 	beq.w	14e76 <event_common_prepare+0x182>
   14d54:	2802      	cmp	r0, #2
   14d56:	d12b      	bne.n	14db0 <event_common_prepare+0xbc>
		ticks_to_start = _ticks_active_to_start;
   14d58:	4644      	mov	r4, r8
   14d5a:	e03b      	b.n	14dd4 <event_common_prepare+0xe0>
		_ticks_xtal_to_start =
   14d5c:	9c12      	ldr	r4, [sp, #72]	; 0x48
   14d5e:	4544      	cmp	r4, r8
   14d60:	bf38      	it	cc
   14d62:	4644      	movcc	r4, r8
   14d64:	e7d4      	b.n	14d10 <event_common_prepare+0x1c>
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
   14d66:	eba4 0308 	sub.w	r3, r4, r8
		ticker_status =
   14d6a:	f241 42bc 	movw	r2, #5308	; 0x14bc
   14d6e:	9208      	str	r2, [sp, #32]
   14d70:	4a4d      	ldr	r2, [pc, #308]	; (14ea8 <event_common_prepare+0x1b4>)
   14d72:	9207      	str	r2, [sp, #28]
   14d74:	2000      	movs	r0, #0
   14d76:	9006      	str	r0, [sp, #24]
   14d78:	4a4d      	ldr	r2, [pc, #308]	; (14eb0 <event_common_prepare+0x1bc>)
   14d7a:	9205      	str	r2, [sp, #20]
   14d7c:	9004      	str	r0, [sp, #16]
   14d7e:	9003      	str	r0, [sp, #12]
   14d80:	9002      	str	r0, [sp, #8]
   14d82:	9001      	str	r0, [sp, #4]
   14d84:	9300      	str	r3, [sp, #0]
   14d86:	464b      	mov	r3, r9
   14d88:	2201      	movs	r2, #1
   14d8a:	4601      	mov	r1, r0
   14d8c:	f7fb fee0 	bl	10b50 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14d90:	b108      	cbz	r0, 14d96 <event_common_prepare+0xa2>
   14d92:	2802      	cmp	r0, #2
   14d94:	d106      	bne.n	14da4 <event_common_prepare+0xb0>
		event_xtal(0, 0, 0, NULL);
   14d96:	2300      	movs	r3, #0
   14d98:	461a      	mov	r2, r3
   14d9a:	4619      	mov	r1, r3
   14d9c:	4618      	mov	r0, r3
   14d9e:	f7fd fa0f 	bl	121c0 <event_xtal>
   14da2:	e017      	b.n	14dd4 <event_common_prepare+0xe0>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14da4:	4040      	eors	r0, r0
   14da6:	f380 8811 	msr	BASEPRI, r0
   14daa:	f04f 0004 	mov.w	r0, #4
   14dae:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14db0:	4040      	eors	r0, r0
   14db2:	f380 8811 	msr	BASEPRI, r0
   14db6:	f04f 0004 	mov.w	r0, #4
   14dba:	df02      	svc	2
		event_active(0, 0, 0, NULL);
   14dbc:	2300      	movs	r3, #0
   14dbe:	461a      	mov	r2, r3
   14dc0:	4619      	mov	r1, r3
   14dc2:	4618      	mov	r0, r3
   14dc4:	f7fd f9ea 	bl	1219c <event_active>
		event_xtal(0, 0, 0, NULL);
   14dc8:	2300      	movs	r3, #0
   14dca:	461a      	mov	r2, r3
   14dcc:	4619      	mov	r1, r3
   14dce:	4618      	mov	r0, r3
   14dd0:	f7fd f9f6 	bl	121c0 <event_xtal>
	_radio.remainder_anchor = remainder;
   14dd4:	4b37      	ldr	r3, [pc, #220]	; (14eb4 <event_common_prepare+0x1c0>)
   14dd6:	f8c3 a008 	str.w	sl, [r3, #8]
	ticker_status =
   14dda:	f241 43e9 	movw	r3, #5353	; 0x14e9
   14dde:	9308      	str	r3, [sp, #32]
   14de0:	4b31      	ldr	r3, [pc, #196]	; (14ea8 <event_common_prepare+0x1b4>)
   14de2:	9307      	str	r3, [sp, #28]
   14de4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14de6:	9306      	str	r3, [sp, #24]
   14de8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14dea:	9305      	str	r3, [sp, #20]
   14dec:	2000      	movs	r0, #0
   14dee:	9004      	str	r0, [sp, #16]
   14df0:	9003      	str	r0, [sp, #12]
   14df2:	9002      	str	r0, [sp, #8]
   14df4:	9001      	str	r0, [sp, #4]
   14df6:	9400      	str	r4, [sp, #0]
   14df8:	464b      	mov	r3, r9
   14dfa:	4602      	mov	r2, r0
   14dfc:	4601      	mov	r1, r0
   14dfe:	f7fb fea7 	bl	10b50 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14e02:	b108      	cbz	r0, 14e08 <event_common_prepare+0x114>
   14e04:	2802      	cmp	r0, #2
   14e06:	d138      	bne.n	14e7a <event_common_prepare+0x186>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   14e08:	2305      	movs	r3, #5
   14e0a:	2200      	movs	r2, #0
   14e0c:	4611      	mov	r1, r2
   14e0e:	4610      	mov	r0, r2
   14e10:	f7fd f93a 	bl	12088 <event_stop>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
   14e14:	4b27      	ldr	r3, [pc, #156]	; (14eb4 <event_common_prepare+0x1c0>)
   14e16:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
   14e1a:	4598      	cmp	r8, r3
   14e1c:	d01d      	beq.n	14e5a <event_common_prepare+0x166>
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
   14e1e:	6832      	ldr	r2, [r6, #0]
   14e20:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		u32_t ticks_to_start_new =
   14e24:	429a      	cmp	r2, r3
   14e26:	bf38      	it	cc
   14e28:	461a      	movcc	r2, r3
		*ticks_active_to_start = _radio.ticks_active_to_start;
   14e2a:	603b      	str	r3, [r7, #0]
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
   14e2c:	6833      	ldr	r3, [r6, #0]
   14e2e:	2b00      	cmp	r3, #0
   14e30:	db29      	blt.n	14e86 <event_common_prepare+0x192>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   14e32:	b2a3      	uxth	r3, r4
   14e34:	b292      	uxth	r2, r2
		ticker_status =
   14e36:	f241 5116 	movw	r1, #5398	; 0x1516
   14e3a:	9106      	str	r1, [sp, #24]
   14e3c:	491a      	ldr	r1, [pc, #104]	; (14ea8 <event_common_prepare+0x1b4>)
   14e3e:	9105      	str	r1, [sp, #20]
   14e40:	2000      	movs	r0, #0
   14e42:	9004      	str	r0, [sp, #16]
   14e44:	9003      	str	r0, [sp, #12]
   14e46:	9302      	str	r3, [sp, #8]
   14e48:	9201      	str	r2, [sp, #4]
   14e4a:	9200      	str	r2, [sp, #0]
   14e4c:	462a      	mov	r2, r5
   14e4e:	4601      	mov	r1, r0
   14e50:	f7fb fecc 	bl	10bec <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14e54:	b108      	cbz	r0, 14e5a <event_common_prepare+0x166>
   14e56:	2802      	cmp	r0, #2
   14e58:	d119      	bne.n	14e8e <event_common_prepare+0x19a>
	packet_tx_enqueue(0xFF);
   14e5a:	20ff      	movs	r0, #255	; 0xff
   14e5c:	f7fd fab6 	bl	123cc <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   14e60:	4b15      	ldr	r3, [pc, #84]	; (14eb8 <event_common_prepare+0x1c4>)
   14e62:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   14e64:	2201      	movs	r2, #1
   14e66:	4611      	mov	r1, r2
   14e68:	2000      	movs	r0, #0
   14e6a:	f7fa f85f 	bl	ef2c <mayfly_enqueue>
		LL_ASSERT(!retval);
   14e6e:	b9a0      	cbnz	r0, 14e9a <event_common_prepare+0x1a6>
}
   14e70:	b00a      	add	sp, #40	; 0x28
   14e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ticks_to_start = _ticks_active_to_start;
   14e76:	4644      	mov	r4, r8
   14e78:	e7ac      	b.n	14dd4 <event_common_prepare+0xe0>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14e7a:	4040      	eors	r0, r0
   14e7c:	f380 8811 	msr	BASEPRI, r0
   14e80:	f04f 0004 	mov.w	r0, #4
   14e84:	df02      	svc	2
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
   14e86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   14e8a:	6033      	str	r3, [r6, #0]
   14e8c:	e7d1      	b.n	14e32 <event_common_prepare+0x13e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14e8e:	4040      	eors	r0, r0
   14e90:	f380 8811 	msr	BASEPRI, r0
   14e94:	f04f 0004 	mov.w	r0, #4
   14e98:	df02      	svc	2
		LL_ASSERT(!retval);
   14e9a:	4040      	eors	r0, r0
   14e9c:	f380 8811 	msr	BASEPRI, r0
   14ea0:	f04f 0004 	mov.w	r0, #4
   14ea4:	df02      	svc	2
   14ea6:	bf00      	nop
   14ea8:	000118a5 	.word	0x000118a5
   14eac:	000121c1 	.word	0x000121c1
   14eb0:	0001219d 	.word	0x0001219d
   14eb4:	20000fec 	.word	0x20000fec
   14eb8:	2000be20 	.word	0x2000be20

00014ebc <radio_event_adv_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   14ebc:	4b0d      	ldr	r3, [pc, #52]	; (14ef4 <radio_event_adv_prepare+0x38>)
   14ebe:	7b1b      	ldrb	r3, [r3, #12]
   14ec0:	b993      	cbnz	r3, 14ee8 <radio_event_adv_prepare+0x2c>
{
   14ec2:	b510      	push	{r4, lr}
   14ec4:	b084      	sub	sp, #16
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
   14ec6:	4a0b      	ldr	r2, [pc, #44]	; (14ef4 <radio_event_adv_prepare+0x38>)
   14ec8:	2305      	movs	r3, #5
   14eca:	7313      	strb	r3, [r2, #12]
	event_common_prepare(ticks_at_expire, remainder,
   14ecc:	2400      	movs	r4, #0
   14ece:	9403      	str	r4, [sp, #12]
   14ed0:	4c09      	ldr	r4, [pc, #36]	; (14ef8 <radio_event_adv_prepare+0x3c>)
   14ed2:	9402      	str	r4, [sp, #8]
   14ed4:	9301      	str	r3, [sp, #4]
   14ed6:	69d3      	ldr	r3, [r2, #28]
   14ed8:	9300      	str	r3, [sp, #0]
   14eda:	f102 0318 	add.w	r3, r2, #24
   14ede:	3214      	adds	r2, #20
   14ee0:	f7ff ff08 	bl	14cf4 <event_common_prepare>
}
   14ee4:	b004      	add	sp, #16
   14ee6:	bd10      	pop	{r4, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   14ee8:	4040      	eors	r0, r0
   14eea:	f380 8811 	msr	BASEPRI, r0
   14eee:	f04f 0004 	mov.w	r0, #4
   14ef2:	df02      	svc	2
   14ef4:	20000fec 	.word	0x20000fec
   14ef8:	000167b9 	.word	0x000167b9
   14efc:	00000000 	.word	0x00000000

00014f00 <event_connection_prepare>:
{
   14f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f04:	b08f      	sub	sp, #60	; 0x3c
	LL_ASSERT(!_radio.ticker_id_prepare);
   14f06:	4ccb      	ldr	r4, [pc, #812]	; (15234 <event_connection_prepare+0x334>)
   14f08:	7b24      	ldrb	r4, [r4, #12]
   14f0a:	2c00      	cmp	r4, #0
   14f0c:	d135      	bne.n	14f7a <event_connection_prepare+0x7a>
				   conn->handle;
   14f0e:	8c1d      	ldrh	r5, [r3, #32]
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
   14f10:	3507      	adds	r5, #7
   14f12:	b2ed      	uxtb	r5, r5
   14f14:	4cc7      	ldr	r4, [pc, #796]	; (15234 <event_connection_prepare+0x334>)
   14f16:	7325      	strb	r5, [r4, #12]
	if (conn->role) {
   14f18:	f993 401d 	ldrsb.w	r4, [r3, #29]
   14f1c:	2c00      	cmp	r4, #0
   14f1e:	db32      	blt.n	14f86 <event_connection_prepare+0x86>
   14f20:	461c      	mov	r4, r3
   14f22:	910a      	str	r1, [sp, #40]	; 0x28
   14f24:	4606      	mov	r6, r0
	conn->latency_prepare += lazy;
   14f26:	8d1d      	ldrh	r5, [r3, #40]	; 0x28
   14f28:	4415      	add	r5, r2
   14f2a:	b2ad      	uxth	r5, r5
   14f2c:	851d      	strh	r5, [r3, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
   14f2e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   14f30:	441d      	add	r5, r3
   14f32:	b2ad      	uxth	r5, r5
	if (conn->llcp_ack == conn->llcp_req) {
   14f34:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   14f38:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   14f3c:	429a      	cmp	r2, r3
   14f3e:	d02d      	beq.n	14f9c <event_connection_prepare+0x9c>
	if (conn->llcp_ack != conn->llcp_req) {
   14f40:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   14f44:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   14f48:	429a      	cmp	r2, r3
   14f4a:	f000 861a 	beq.w	15b82 <event_connection_prepare+0xc82>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   14f4e:	2305      	movs	r3, #5
   14f50:	2200      	movs	r2, #0
   14f52:	4611      	mov	r1, r2
   14f54:	4610      	mov	r0, r2
   14f56:	f7fd f897 	bl	12088 <event_stop>
		switch (conn->llcp_type) {
   14f5a:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   14f5e:	3b01      	subs	r3, #1
   14f60:	2b07      	cmp	r3, #7
   14f62:	f201 80d6 	bhi.w	16112 <event_connection_prepare+0x1212>
   14f66:	e8df f013 	tbh	[pc, r3, lsl #1]
   14f6a:	029f      	.short	0x029f
   14f6c:	05b1054e 	.word	0x05b1054e
   14f70:	072706ee 	.word	0x072706ee
   14f74:	07ac08d4 	.word	0x07ac08d4
   14f78:	07c7      	.short	0x07c7
	LL_ASSERT(!_radio.ticker_id_prepare);
   14f7a:	4040      	eors	r0, r0
   14f7c:	f380 8811 	msr	BASEPRI, r0
   14f80:	f04f 0004 	mov.w	r0, #4
   14f84:	df02      	svc	2
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   14f86:	6d5c      	ldr	r4, [r3, #84]	; 0x54
   14f88:	fb02 4404 	mla	r4, r2, r4, r4
		conn->slave.window_widening_prepare_us +=
   14f8c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
   14f8e:	442c      	add	r4, r5
   14f90:	65dc      	str	r4, [r3, #92]	; 0x5c
		    conn->slave.window_widening_max_us) {
   14f92:	6d9d      	ldr	r5, [r3, #88]	; 0x58
		if (conn->slave.window_widening_prepare_us >
   14f94:	42ac      	cmp	r4, r5
   14f96:	d9c3      	bls.n	14f20 <event_connection_prepare+0x20>
			conn->slave.window_widening_prepare_us =
   14f98:	65dd      	str	r5, [r3, #92]	; 0x5c
   14f9a:	e7c1      	b.n	14f20 <event_connection_prepare+0x20>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   14f9c:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   14fa0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   14fa4:	429a      	cmp	r2, r3
   14fa6:	d00b      	beq.n	14fc0 <event_connection_prepare+0xc0>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   14fa8:	2305      	movs	r3, #5
   14faa:	2200      	movs	r2, #0
   14fac:	4611      	mov	r1, r2
   14fae:	4610      	mov	r0, r2
   14fb0:	f7fd f86a 	bl	12088 <event_stop>
	conn_upd = _radio.conn_upd;
   14fb4:	4b9f      	ldr	r3, [pc, #636]	; (15234 <event_connection_prepare+0x334>)
   14fb6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (conn_upd && (conn_upd != conn)) {
   14fba:	b1fb      	cbz	r3, 14ffc <event_connection_prepare+0xfc>
   14fbc:	429c      	cmp	r4, r3
   14fbe:	d01d      	beq.n	14ffc <event_connection_prepare+0xfc>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   14fc0:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
   14fc4:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   14fc8:	429a      	cmp	r2, r3
   14fca:	d0b9      	beq.n	14f40 <event_connection_prepare+0x40>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   14fcc:	2305      	movs	r3, #5
   14fce:	2200      	movs	r2, #0
   14fd0:	4611      	mov	r1, r2
   14fd2:	4610      	mov	r0, r2
   14fd4:	f7fd f858 	bl	12088 <event_stop>
	switch (conn->llcp_phy.state) {
   14fd8:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14fdc:	f003 0303 	and.w	r3, r3, #3
   14fe0:	2b03      	cmp	r3, #3
   14fe2:	f200 8257 	bhi.w	15494 <event_connection_prepare+0x594>
   14fe6:	a201      	add	r2, pc, #4	; (adr r2, 14fec <event_connection_prepare+0xec>)
   14fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14fec:	000152e5 	.word	0x000152e5
   14ff0:	00014f41 	.word	0x00014f41
   14ff4:	00014f41 	.word	0x00014f41
   14ff8:	0001535f 	.word	0x0001535f
	switch (conn->llcp_conn_param.state) {
   14ffc:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   15000:	f003 0307 	and.w	r3, r3, #7
   15004:	2b05      	cmp	r3, #5
   15006:	f200 8167 	bhi.w	152d8 <event_connection_prepare+0x3d8>
   1500a:	a201      	add	r2, pc, #4	; (adr r2, 15010 <event_connection_prepare+0x110>)
   1500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15010:	00015029 	.word	0x00015029
   15014:	000150f3 	.word	0x000150f3
   15018:	00015241 	.word	0x00015241
   1501c:	00014fc1 	.word	0x00014fc1
   15020:	00014fc1 	.word	0x00014fc1
   15024:	00014fc1 	.word	0x00014fc1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15028:	4883      	ldr	r0, [pc, #524]	; (15238 <event_connection_prepare+0x338>)
   1502a:	f7fa f8c0 	bl	f1ae <mem_acquire>
	if (!node_tx) {
   1502e:	4680      	mov	r8, r0
   15030:	2800      	cmp	r0, #0
   15032:	d0c5      	beq.n	14fc0 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   15034:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   15038:	2204      	movs	r2, #4
   1503a:	f362 0302 	bfi	r3, r2, #0, #3
   1503e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15042:	7903      	ldrb	r3, [r0, #4]
   15044:	f043 0303 	orr.w	r3, r3, #3
   15048:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1504a:	2318      	movs	r3, #24
   1504c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   1504e:	230f      	movs	r3, #15
   15050:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   15052:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   15056:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   15058:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   1505c:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   1505e:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   15062:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   15064:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   15068:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
   1506a:	2300      	movs	r3, #0
   1506c:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count = event_counter;
   1506e:	f8a0 5011 	strh.w	r5, [r0, #17]
	p->offset0 = 0x0000;
   15072:	74c3      	strb	r3, [r0, #19]
   15074:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
   15076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1507a:	7543      	strb	r3, [r0, #21]
   1507c:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
   1507e:	75c3      	strb	r3, [r0, #23]
   15080:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
   15082:	7643      	strb	r3, [r0, #25]
   15084:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
   15086:	76c3      	strb	r3, [r0, #27]
   15088:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
   1508a:	7743      	strb	r3, [r0, #29]
   1508c:	7783      	strb	r3, [r0, #30]
	ctrl_tx_enqueue(conn, node_tx);
   1508e:	4601      	mov	r1, r0
   15090:	4620      	mov	r0, r4
   15092:	f7fc fb1f 	bl	116d4 <ctrl_tx_enqueue>
	_radio.conn_upd = conn;
   15096:	4b67      	ldr	r3, [pc, #412]	; (15234 <event_connection_prepare+0x334>)
   15098:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
	conn->procedure_expire = conn->procedure_reload;
   1509c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   150a0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   150a4:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   150a8:	6823      	ldr	r3, [r4, #0]
   150aa:	2b00      	cmp	r3, #0
   150ac:	db13      	blt.n	150d6 <event_connection_prepare+0x1d6>
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
   150ae:	f108 0313 	add.w	r3, r8, #19
   150b2:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		s_mfy_sched_offset.param = (void *)conn;
   150b6:	4b61      	ldr	r3, [pc, #388]	; (1523c <event_connection_prepare+0x33c>)
   150b8:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   150ba:	2201      	movs	r2, #1
   150bc:	4611      	mov	r1, r2
   150be:	2000      	movs	r0, #0
   150c0:	f7f9 ff34 	bl	ef2c <mayfly_enqueue>
		LL_ASSERT(!retval);
   150c4:	2800      	cmp	r0, #0
   150c6:	f43f af7b 	beq.w	14fc0 <event_connection_prepare+0xc0>
   150ca:	4040      	eors	r0, r0
   150cc:	f380 8811 	msr	BASEPRI, r0
   150d0:	f04f 0004 	mov.w	r0, #4
   150d4:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   150d6:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   150d8:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   150da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   150de:	4291      	cmp	r1, r2
   150e0:	bf2c      	ite	cs
   150e2:	ebc3 0301 	rsbcs	r3, r3, r1
   150e6:	ebc3 0302 	rsbcc	r3, r3, r2
			conn->llcp_conn_param.ticks_ref -=
   150ea:	4433      	add	r3, r6
   150ec:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   150f0:	e7dd      	b.n	150ae <event_connection_prepare+0x1ae>
	if (conn->llcp_conn_param.status) {
   150f2:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   150f6:	bbb3      	cbnz	r3, 15166 <event_connection_prepare+0x266>
	if (!conn->role) {
   150f8:	f994 301d 	ldrsb.w	r3, [r4, #29]
   150fc:	2b00      	cmp	r3, #0
   150fe:	db52      	blt.n	151a6 <event_connection_prepare+0x2a6>
		if (conn->llcp_req != conn->llcp_ack) {
   15100:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   15104:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   15108:	429a      	cmp	r2, r3
   1510a:	f47f af59 	bne.w	14fc0 <event_connection_prepare+0xc0>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1510e:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   15112:	2105      	movs	r1, #5
   15114:	f361 0202 	bfi	r2, r1, #0, #3
   15118:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   1511c:	2001      	movs	r0, #1
   1511e:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   15122:	2100      	movs	r1, #0
   15124:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   15128:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
   1512c:	f8a4 107a 	strh.w	r1, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   15130:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
   15134:	f8a4 107c 	strh.w	r1, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   15138:	f8b4 10c8 	ldrh.w	r1, [r4, #200]	; 0xc8
   1513c:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
   15140:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   15144:	f04f 0e02 	mov.w	lr, #2
   15148:	f36e 0101 	bfi	r1, lr, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   1514c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   15150:	4042      	eors	r2, r0
   15152:	f362 0182 	bfi	r1, r2, #2, #1
   15156:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   1515a:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
		conn->llcp_ack--;
   1515e:	3b01      	subs	r3, #1
   15160:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   15164:	e72c      	b.n	14fc0 <event_connection_prepare+0xc0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15166:	4834      	ldr	r0, [pc, #208]	; (15238 <event_connection_prepare+0x338>)
   15168:	f7fa f821 	bl	f1ae <mem_acquire>
		if (!node_tx) {
   1516c:	4601      	mov	r1, r0
   1516e:	2800      	cmp	r0, #0
   15170:	f43f af26 	beq.w	14fc0 <event_connection_prepare+0xc0>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   15174:	7903      	ldrb	r3, [r0, #4]
   15176:	f043 0303 	orr.w	r3, r3, #3
   1517a:	7103      	strb	r3, [r0, #4]
		pdu->payload.llctrl.opcode =
   1517c:	2311      	movs	r3, #17
   1517e:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15180:	2303      	movs	r3, #3
   15182:	7143      	strb	r3, [r0, #5]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   15184:	230f      	movs	r3, #15
   15186:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp_conn_param.status;
   15188:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   1518c:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
   1518e:	4620      	mov	r0, r4
   15190:	f7fc faa0 	bl	116d4 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15194:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   15198:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
   1519c:	2200      	movs	r2, #0
   1519e:	4b25      	ldr	r3, [pc, #148]	; (15234 <event_connection_prepare+0x334>)
   151a0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   151a4:	e70c      	b.n	14fc0 <event_connection_prepare+0xc0>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   151a6:	4824      	ldr	r0, [pc, #144]	; (15238 <event_connection_prepare+0x338>)
   151a8:	f7fa f801 	bl	f1ae <mem_acquire>
	if (!node_tx) {
   151ac:	4601      	mov	r1, r0
   151ae:	2800      	cmp	r0, #0
   151b0:	f43f af06 	beq.w	14fc0 <event_connection_prepare+0xc0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   151b4:	7903      	ldrb	r3, [r0, #4]
   151b6:	f043 0303 	orr.w	r3, r3, #3
   151ba:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   151bc:	2318      	movs	r3, #24
   151be:	7143      	strb	r3, [r0, #5]
	pdu->payload.llctrl.opcode =
   151c0:	2310      	movs	r3, #16
   151c2:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   151c4:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   151c8:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   151ca:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   151ce:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   151d0:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   151d4:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   151d6:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   151da:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   151dc:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   151e0:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count =
   151e2:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   151e6:	f8a0 3011 	strh.w	r3, [r0, #17]
	p->offset0 = conn->llcp_conn_param.offset0;
   151ea:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
   151ee:	f8a0 3013 	strh.w	r3, [r0, #19]
	p->offset1 = conn->llcp_conn_param.offset1;
   151f2:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   151f6:	f8a0 3015 	strh.w	r3, [r0, #21]
	p->offset2 = conn->llcp_conn_param.offset2;
   151fa:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
   151fe:	f8a0 3017 	strh.w	r3, [r0, #23]
	p->offset3 = conn->llcp_conn_param.offset3;
   15202:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   15206:	f8a0 3019 	strh.w	r3, [r0, #25]
	p->offset4 = conn->llcp_conn_param.offset4;
   1520a:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
   1520e:	f8a0 301b 	strh.w	r3, [r0, #27]
	p->offset5 = conn->llcp_conn_param.offset5;
   15212:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
   15216:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
   1521a:	4620      	mov	r0, r4
   1521c:	f7fc fa5a 	bl	116d4 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15220:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   15224:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
   15228:	2200      	movs	r2, #0
   1522a:	4b02      	ldr	r3, [pc, #8]	; (15234 <event_connection_prepare+0x334>)
   1522c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   15230:	e6c6      	b.n	14fc0 <event_connection_prepare+0xc0>
   15232:	bf00      	nop
   15234:	20000fec 	.word	0x20000fec
   15238:	20001144 	.word	0x20001144
   1523c:	2000bdb0 	.word	0x2000bdb0
	if (conn->pause_tx) {
   15240:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15244:	f013 0f08 	tst.w	r3, #8
   15248:	f47f aeba 	bne.w	14fc0 <event_connection_prepare+0xc0>
	if (_radio.packet_rx_acquire >=
   1524c:	4b94      	ldr	r3, [pc, #592]	; (154a0 <event_connection_prepare+0x5a0>)
   1524e:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15252:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15256:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15258:	429a      	cmp	r2, r3
   1525a:	d331      	bcc.n	152c0 <event_connection_prepare+0x3c0>
			_radio.packet_rx_last);
   1525c:	4b90      	ldr	r3, [pc, #576]	; (154a0 <event_connection_prepare+0x5a0>)
   1525e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15262:	1ad3      	subs	r3, r2, r3
   15264:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   15266:	2b01      	cmp	r3, #1
   15268:	d934      	bls.n	152d4 <event_connection_prepare+0x3d4>
	return _radio.packet_rx[_radio.packet_rx_last];
   1526a:	4b8d      	ldr	r3, [pc, #564]	; (154a0 <event_connection_prepare+0x5a0>)
   1526c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   15270:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (!node_rx) {
   15278:	2b00      	cmp	r3, #0
   1527a:	f43f aea1 	beq.w	14fc0 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1527e:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   15282:	2103      	movs	r1, #3
   15284:	f361 0202 	bfi	r2, r1, #0, #3
   15288:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
   1528c:	8c22      	ldrh	r2, [r4, #32]
   1528e:	80da      	strh	r2, [r3, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15290:	2201      	movs	r2, #1
   15292:	711a      	strb	r2, [r3, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   15294:	7a1a      	ldrb	r2, [r3, #8]
   15296:	430a      	orrs	r2, r1
   15298:	721a      	strb	r2, [r3, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1529a:	2218      	movs	r2, #24
   1529c:	725a      	strb	r2, [r3, #9]
	pdu->payload.llctrl.opcode =
   1529e:	220f      	movs	r2, #15
   152a0:	72da      	strb	r2, [r3, #11]
	p->interval_min = conn->llcp_conn_param.interval;
   152a2:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   152a6:	819a      	strh	r2, [r3, #12]
	p->interval_max = conn->llcp_conn_param.interval;
   152a8:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   152ac:	81da      	strh	r2, [r3, #14]
	p->latency = conn->llcp_conn_param.latency;
   152ae:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   152b2:	821a      	strh	r2, [r3, #16]
	p->timeout = conn->llcp_conn_param.timeout;
   152b4:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
   152b8:	825a      	strh	r2, [r3, #18]
	packet_rx_enqueue();
   152ba:	f7fe ffbf 	bl	1423c <packet_rx_enqueue>
   152be:	e67f      	b.n	14fc0 <event_connection_prepare+0xc0>
		return (_radio.packet_rx_count -
   152c0:	4977      	ldr	r1, [pc, #476]	; (154a0 <event_connection_prepare+0x5a0>)
   152c2:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   152c6:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   152ca:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   152cc:	fa52 f383 	uxtab	r3, r2, r3
   152d0:	b2db      	uxtb	r3, r3
   152d2:	e7c8      	b.n	15266 <event_connection_prepare+0x366>
		return 0;
   152d4:	2300      	movs	r3, #0
   152d6:	e7cf      	b.n	15278 <event_connection_prepare+0x378>
		LL_ASSERT(0);
   152d8:	4040      	eors	r0, r0
   152da:	f380 8811 	msr	BASEPRI, r0
   152de:	f04f 0004 	mov.w	r0, #4
   152e2:	df02      	svc	2
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   152e4:	486f      	ldr	r0, [pc, #444]	; (154a4 <event_connection_prepare+0x5a4>)
   152e6:	f7f9 ff62 	bl	f1ae <mem_acquire>
		if (!node_tx) {
   152ea:	4601      	mov	r1, r0
   152ec:	2800      	cmp	r0, #0
   152ee:	f43f ae27 	beq.w	14f40 <event_connection_prepare+0x40>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   152f2:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   152f6:	2201      	movs	r2, #1
   152f8:	f362 0301 	bfi	r3, r2, #0, #2
   152fc:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   15300:	b2db      	uxtb	r3, r3
   15302:	f3c3 0082 	ubfx	r0, r3, #2, #3
   15306:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1530a:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   1530e:	095b      	lsrs	r3, r3, #5
   15310:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
   15314:	f363 00c5 	bfi	r0, r3, #3, #3
   15318:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
   1531c:	f894 00f7 	ldrb.w	r0, [r4, #247]	; 0xf7
   15320:	4613      	mov	r3, r2
   15322:	f360 1386 	bfi	r3, r0, #6, #1
   15326:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1532a:	790b      	ldrb	r3, [r1, #4]
   1532c:	f043 0303 	orr.w	r3, r3, #3
   15330:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15332:	2303      	movs	r3, #3
   15334:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   15336:	2316      	movs	r3, #22
   15338:	71cb      	strb	r3, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
   1533a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1533e:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15342:	720b      	strb	r3, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   15344:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15348:	f3c3 1342 	ubfx	r3, r3, #5, #3
   1534c:	724b      	strb	r3, [r1, #9]
		ctrl_tx_enqueue(conn, node_tx);
   1534e:	4620      	mov	r0, r4
   15350:	f7fc f9c0 	bl	116d4 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   15354:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15358:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   1535c:	e5f0      	b.n	14f40 <event_connection_prepare+0x40>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1535e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   15362:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
   15366:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1536a:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1536e:	f013 0f02 	tst.w	r3, #2
   15372:	d047      	beq.n	15404 <event_connection_prepare+0x504>
			conn->llcp_phy.tx = BIT(1);
   15374:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15378:	2202      	movs	r2, #2
   1537a:	f362 0384 	bfi	r3, r2, #2, #3
   1537e:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
   15382:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15386:	095b      	lsrs	r3, r3, #5
   15388:	f013 0f02 	tst.w	r3, #2
   1538c:	d057      	beq.n	1543e <event_connection_prepare+0x53e>
			conn->llcp_phy.rx = BIT(1);
   1538e:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15392:	2202      	movs	r2, #2
   15394:	f362 1347 	bfi	r3, r2, #5, #3
   15398:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
   1539c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   153a0:	f3c3 0382 	ubfx	r3, r3, #2, #3
   153a4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   153a8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   153ac:	4293      	cmp	r3, r2
   153ae:	d063      	beq.n	15478 <event_connection_prepare+0x578>
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
   153b0:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   153b4:	f363 0284 	bfi	r2, r3, #2, #3
   153b8:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
   153bc:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   153c0:	095b      	lsrs	r3, r3, #5
   153c2:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   153c6:	f002 0207 	and.w	r2, r2, #7
   153ca:	4293      	cmp	r3, r2
   153cc:	d05b      	beq.n	15486 <event_connection_prepare+0x586>
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
   153ce:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   153d2:	f363 1247 	bfi	r2, r3, #5, #3
   153d6:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
   153da:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   153de:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
   153e2:	f3c2 0240 	ubfx	r2, r2, #1, #1
   153e6:	f043 0301 	orr.w	r3, r3, #1
   153ea:	f362 0341 	bfi	r3, r2, #1, #1
   153ee:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
   153f2:	2308      	movs	r3, #8
   153f4:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   153f8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   153fc:	3b01      	subs	r3, #1
   153fe:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   15402:	e59d      	b.n	14f40 <event_connection_prepare+0x40>
		} else if (conn->llcp_phy.tx & BIT(0)) {
   15404:	f013 0f01 	tst.w	r3, #1
   15408:	d007      	beq.n	1541a <event_connection_prepare+0x51a>
			conn->llcp_phy.tx = BIT(0);
   1540a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1540e:	2201      	movs	r2, #1
   15410:	f362 0384 	bfi	r3, r2, #2, #3
   15414:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   15418:	e7b3      	b.n	15382 <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.tx & BIT(2)) {
   1541a:	f013 0f04 	tst.w	r3, #4
   1541e:	d007      	beq.n	15430 <event_connection_prepare+0x530>
			conn->llcp_phy.tx = BIT(2);
   15420:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15424:	2204      	movs	r2, #4
   15426:	f362 0384 	bfi	r3, r2, #2, #3
   1542a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   1542e:	e7a8      	b.n	15382 <event_connection_prepare+0x482>
			conn->llcp_phy.tx = 0;
   15430:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15434:	f36f 0384 	bfc	r3, #2, #3
   15438:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   1543c:	e7a1      	b.n	15382 <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.rx & BIT(0)) {
   1543e:	f013 0f01 	tst.w	r3, #1
   15442:	d007      	beq.n	15454 <event_connection_prepare+0x554>
			conn->llcp_phy.rx = BIT(0);
   15444:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15448:	2201      	movs	r2, #1
   1544a:	f362 1347 	bfi	r3, r2, #5, #3
   1544e:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   15452:	e7a3      	b.n	1539c <event_connection_prepare+0x49c>
		} else if (conn->llcp_phy.rx & BIT(2)) {
   15454:	f013 0f04 	tst.w	r3, #4
   15458:	d007      	beq.n	1546a <event_connection_prepare+0x56a>
			conn->llcp_phy.rx = BIT(2);
   1545a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1545e:	2204      	movs	r2, #4
   15460:	f362 1347 	bfi	r3, r2, #5, #3
   15464:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   15468:	e798      	b.n	1539c <event_connection_prepare+0x49c>
			conn->llcp_phy.rx = 0;
   1546a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1546e:	f36f 1347 	bfc	r3, #5, #3
   15472:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   15476:	e791      	b.n	1539c <event_connection_prepare+0x49c>
			conn->llcp.phy_upd_ind.tx = 0;
   15478:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1547c:	f36f 0384 	bfc	r3, #2, #3
   15480:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   15484:	e79a      	b.n	153bc <event_connection_prepare+0x4bc>
			conn->llcp.phy_upd_ind.rx = 0;
   15486:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1548a:	f36f 1347 	bfc	r3, #5, #3
   1548e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   15492:	e7a2      	b.n	153da <event_connection_prepare+0x4da>
		LL_ASSERT(0);
   15494:	4040      	eors	r0, r0
   15496:	f380 8811 	msr	BASEPRI, r0
   1549a:	f04f 0004 	mov.w	r0, #4
   1549e:	df02      	svc	2
   154a0:	20000fec 	.word	0x20000fec
   154a4:	20001144 	.word	0x20001144
	conn_upd = _radio.conn_upd;
   154a8:	4bb7      	ldr	r3, [pc, #732]	; (15788 <event_connection_prepare+0x888>)
   154aa:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (!conn_upd) {
   154ae:	2b00      	cmp	r3, #0
   154b0:	f000 814b 	beq.w	1574a <event_connection_prepare+0x84a>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   154b4:	f8b4 8080 	ldrh.w	r8, [r4, #128]	; 0x80
   154b8:	eba5 0808 	sub.w	r8, r5, r8
   154bc:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
   154c0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   154c4:	f013 0f03 	tst.w	r3, #3
   154c8:	f040 8143 	bne.w	15752 <event_connection_prepare+0x852>
	} else if (instant_latency <= 0x7FFF) {
   154cc:	f418 4f00 	tst.w	r8, #32768	; 0x8000
   154d0:	f040 8296 	bne.w	15a00 <event_connection_prepare+0xb00>
		conn->llcp_ack = conn->llcp_req;
   154d4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   154d8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   154dc:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
   154e0:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
   154e4:	429a      	cmp	r2, r3
   154e6:	d006      	beq.n	154f6 <event_connection_prepare+0x5f6>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   154e8:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   154ec:	f003 0307 	and.w	r3, r3, #7
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   154f0:	2b05      	cmp	r3, #5
   154f2:	f000 81bb 	beq.w	1586c <event_connection_prepare+0x96c>
		_radio.ticker_id_prepare = 0;
   154f6:	4ba4      	ldr	r3, [pc, #656]	; (15788 <event_connection_prepare+0x888>)
   154f8:	2200      	movs	r2, #0
   154fa:	731a      	strb	r2, [r3, #12]
		if (_radio.conn_upd == conn) {
   154fc:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   15500:	429c      	cmp	r4, r3
   15502:	f000 81b9 	beq.w	15878 <event_connection_prepare+0x978>
		if ((conn->llcp.conn_upd.interval !=
   15506:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
		     conn->conn_interval) ||
   1550a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		if ((conn->llcp.conn_upd.interval !=
   1550c:	429a      	cmp	r2, r3
   1550e:	f000 81b7 	beq.w	15880 <event_connection_prepare+0x980>
	if (_radio.packet_rx_acquire >=
   15512:	4b9d      	ldr	r3, [pc, #628]	; (15788 <event_connection_prepare+0x888>)
   15514:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15518:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1551c:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1551e:	429a      	cmp	r2, r3
   15520:	f0c0 81c7 	bcc.w	158b2 <event_connection_prepare+0x9b2>
			_radio.packet_rx_last);
   15524:	4b98      	ldr	r3, [pc, #608]	; (15788 <event_connection_prepare+0x888>)
   15526:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1552a:	1ad3      	subs	r3, r2, r3
   1552c:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1552e:	2b01      	cmp	r3, #1
   15530:	f240 81c9 	bls.w	158c6 <event_connection_prepare+0x9c6>
	return _radio.packet_rx[_radio.packet_rx_last];
   15534:	4b94      	ldr	r3, [pc, #592]	; (15788 <event_connection_prepare+0x888>)
   15536:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1553a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1553e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   15542:	2b00      	cmp	r3, #0
   15544:	f000 81c1 	beq.w	158ca <event_connection_prepare+0x9ca>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   15548:	8c22      	ldrh	r2, [r4, #32]
   1554a:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1554c:	2208      	movs	r2, #8
   1554e:	711a      	strb	r2, [r3, #4]
			radio_le_conn_update_cmplt->status = 0x00;
   15550:	2200      	movs	r2, #0
   15552:	72da      	strb	r2, [r3, #11]
			radio_le_conn_update_cmplt->interval =
   15554:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   15558:	819a      	strh	r2, [r3, #12]
			radio_le_conn_update_cmplt->latency =
   1555a:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   1555e:	81da      	strh	r2, [r3, #14]
			radio_le_conn_update_cmplt->timeout =
   15560:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   15564:	821a      	strh	r2, [r3, #16]
			packet_rx_enqueue();
   15566:	f7fe fe69 	bl	1423c <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   1556a:	6823      	ldr	r3, [r4, #0]
   1556c:	2b00      	cmp	r3, #0
   1556e:	f2c0 81b2 	blt.w	158d6 <event_connection_prepare+0x9d6>
   15572:	46b1      	mov	r9, r6
		conn_interval_old = instant_latency * conn->conn_interval;
   15574:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   15576:	fb18 f303 	smulbb	r3, r8, r3
   1557a:	b29b      	uxth	r3, r3
			conn->llcp.conn_upd.interval;
   1557c:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
		latency = conn_interval_old /
   15580:	fbb3 fbfa 	udiv	fp, r3, sl
		conn_interval_new = latency *
   15584:	fb1a f00b 	smulbb	r0, sl, fp
   15588:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   1558a:	4283      	cmp	r3, r0
   1558c:	f080 81b1 	bcs.w	158f2 <event_connection_prepare+0x9f2>
				TICKER_US_TO_TICKS((conn_interval_new -
   15590:	1ac3      	subs	r3, r0, r3
   15592:	17d9      	asrs	r1, r3, #31
   15594:	487d      	ldr	r0, [pc, #500]	; (1578c <event_connection_prepare+0x88c>)
   15596:	f240 1223 	movw	r2, #291	; 0x123
   1559a:	fb02 f203 	mul.w	r2, r2, r3
   1559e:	fb00 2201 	mla	r2, r0, r1, r2
   155a2:	fba3 0100 	umull	r0, r1, r3, r0
   155a6:	4411      	add	r1, r2
   155a8:	a375      	add	r3, pc, #468	; (adr r3, 15780 <event_connection_prepare+0x880>)
   155aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   155ae:	f7eb fda5 	bl	10fc <__aeabi_uldivmod>
   155b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire +=
   155b6:	eb00 0309 	add.w	r3, r0, r9
   155ba:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
   155bc:	ebab 0308 	sub.w	r3, fp, r8
   155c0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   155c2:	fa12 f383 	uxtah	r3, r2, r3
   155c6:	8523      	strh	r3, [r4, #40]	; 0x28
			conn->hdr.ticks_active_to_start;
   155c8:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start :
   155ca:	6823      	ldr	r3, [r4, #0]
		ticks_slot_offset =
   155cc:	429a      	cmp	r2, r3
   155ce:	bf38      	it	cc
   155d0:	461a      	movcc	r2, r3
   155d2:	920c      	str	r2, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   155d4:	f240 49e2 	movw	r9, #1250	; 0x4e2
   155d8:	fb09 f90a 	mul.w	r9, r9, sl
		if (conn->role) {
   155dc:	f994 301d 	ldrsb.w	r3, [r4, #29]
   155e0:	2b00      	cmp	r3, #0
   155e2:	f2c0 819d 	blt.w	15920 <event_connection_prepare+0xa20>
				TICKER_US_TO_TICKS(conn->llcp.conn_upd.win_offset_us);
   155e6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   155ea:	a365      	add	r3, pc, #404	; (adr r3, 15780 <event_connection_prepare+0x880>)
   155ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   155f0:	4967      	ldr	r1, [pc, #412]	; (15790 <event_connection_prepare+0x890>)
   155f2:	fba0 0101 	umull	r0, r1, r0, r1
   155f6:	f7eb fd81 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   155fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
   155fe:	f100 0b01 	add.w	fp, r0, #1
		periodic_us = conn_interval_us;
   15602:	46c8      	mov	r8, r9
		conn->conn_interval = conn->llcp.conn_upd.interval;
   15604:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
		conn->latency = conn->llcp.conn_upd.latency;
   15608:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   1560c:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   1560e:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15612:	f242 7110 	movw	r1, #10000	; 0x2710
   15616:	fb01 9303 	mla	r3, r1, r3, r9
   1561a:	3b01      	subs	r3, #1
   1561c:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->supervision_reload =
   15620:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   15622:	4b5c      	ldr	r3, [pc, #368]	; (15794 <event_connection_prepare+0x894>)
   15624:	444b      	add	r3, r9
   15626:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->procedure_reload =
   1562a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1562e:	4b5a      	ldr	r3, [pc, #360]	; (15798 <event_connection_prepare+0x898>)
   15630:	444b      	add	r3, r9
   15632:	fbb3 f9f9 	udiv	r9, r3, r9
   15636:	fa1f f989 	uxth.w	r9, r9
   1563a:	f8a4 904a 	strh.w	r9, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1563e:	1d93      	adds	r3, r2, #6
   15640:	4599      	cmp	r9, r3
   15642:	dd07      	ble.n	15654 <event_connection_prepare+0x754>
				     (conn->apto_reload - (conn->latency + 6)) :
   15644:	eba9 0902 	sub.w	r9, r9, r2
   15648:	fa1f f989 	uxth.w	r9, r9
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1564c:	f1a9 0906 	sub.w	r9, r9, #6
   15650:	fa1f f989 	uxth.w	r9, r9
   15654:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
		if (!conn->llcp.conn_upd.is_internal) {
   15658:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1565c:	f013 0f04 	tst.w	r3, #4
   15660:	d102      	bne.n	15668 <event_connection_prepare+0x768>
			conn->supervision_expire = 0;
   15662:	2300      	movs	r3, #0
   15664:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		mayfly_was_enabled =
   15668:	2101      	movs	r1, #1
   1566a:	2000      	movs	r0, #0
   1566c:	f003 fe2d 	bl	192ca <mayfly_is_enabled>
   15670:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   15672:	2200      	movs	r2, #0
   15674:	2101      	movs	r1, #1
   15676:	4610      	mov	r0, r2
   15678:	f7f9 fc1a 	bl	eeb0 <mayfly_enable>
				    conn->handle, ticker_success_assert,
   1567c:	8c22      	ldrh	r2, [r4, #32]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1567e:	3207      	adds	r2, #7
		ticker_status =
   15680:	f641 13e3 	movw	r3, #6627	; 0x19e3
   15684:	9300      	str	r3, [sp, #0]
   15686:	4b45      	ldr	r3, [pc, #276]	; (1579c <event_connection_prepare+0x89c>)
   15688:	b2d2      	uxtb	r2, r2
   1568a:	2100      	movs	r1, #0
   1568c:	4608      	mov	r0, r1
   1568e:	f7fb fafb 	bl	10c88 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15692:	b110      	cbz	r0, 1569a <event_connection_prepare+0x79a>
   15694:	2802      	cmp	r0, #2
   15696:	f040 819a 	bne.w	159ce <event_connection_prepare+0xace>
				     conn->handle,
   1569a:	f8b4 a020 	ldrh.w	sl, [r4, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1569e:	f10a 0a07 	add.w	sl, sl, #7
   156a2:	fa5f fa8a 	uxtb.w	sl, sl
				     TICKER_US_TO_TICKS(periodic_us),
   156a6:	4b3a      	ldr	r3, [pc, #232]	; (15790 <event_connection_prepare+0x890>)
   156a8:	fba8 2303 	umull	r2, r3, r8, r3
   156ac:	4617      	mov	r7, r2
   156ae:	4698      	mov	r8, r3
   156b0:	a333      	add	r3, pc, #204	; (adr r3, 15780 <event_connection_prepare+0x880>)
   156b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   156b6:	4638      	mov	r0, r7
   156b8:	4641      	mov	r1, r8
   156ba:	f7eb fd1f 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   156be:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   156c2:	930d      	str	r3, [sp, #52]	; 0x34
				     TICKER_REMAINDER(periodic_us),
   156c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   156c8:	2100      	movs	r1, #0
   156ca:	4a35      	ldr	r2, [pc, #212]	; (157a0 <event_connection_prepare+0x8a0>)
   156cc:	2307      	movs	r3, #7
   156ce:	fb03 f300 	mul.w	r3, r3, r0
   156d2:	fb02 3301 	mla	r3, r2, r1, r3
   156d6:	fba0 0102 	umull	r0, r1, r0, r2
   156da:	4419      	add	r1, r3
   156dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   156e0:	2300      	movs	r3, #0
   156e2:	1a3f      	subs	r7, r7, r0
   156e4:	eb68 0801 	sbc.w	r8, r8, r1
   156e8:	4638      	mov	r0, r7
   156ea:	4641      	mov	r1, r8
   156ec:	f7eb fd06 	bl	10fc <__aeabi_uldivmod>
   156f0:	4602      	mov	r2, r0
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   156f2:	68e3      	ldr	r3, [r4, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   156f4:	990c      	ldr	r1, [sp, #48]	; 0x30
   156f6:	440b      	add	r3, r1
   156f8:	b29b      	uxth	r3, r3
   156fa:	f994 101d 	ldrsb.w	r1, [r4, #29]
   156fe:	2900      	cmp	r1, #0
   15700:	f2c0 816b 	blt.w	159da <event_connection_prepare+0xada>
   15704:	4927      	ldr	r1, [pc, #156]	; (157a4 <event_connection_prepare+0x8a4>)
		ticker_status =
   15706:	f641 10f3 	movw	r0, #6643	; 0x19f3
   1570a:	9008      	str	r0, [sp, #32]
   1570c:	4823      	ldr	r0, [pc, #140]	; (1579c <event_connection_prepare+0x89c>)
   1570e:	9007      	str	r0, [sp, #28]
   15710:	9406      	str	r4, [sp, #24]
   15712:	9105      	str	r1, [sp, #20]
   15714:	9304      	str	r3, [sp, #16]
   15716:	2000      	movs	r0, #0
   15718:	9003      	str	r0, [sp, #12]
   1571a:	9202      	str	r2, [sp, #8]
   1571c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1571e:	9301      	str	r3, [sp, #4]
   15720:	f8cd b000 	str.w	fp, [sp]
   15724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15726:	4652      	mov	r2, sl
   15728:	4601      	mov	r1, r0
   1572a:	f7fb fa11 	bl	10b50 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1572e:	b110      	cbz	r0, 15736 <event_connection_prepare+0x836>
   15730:	2802      	cmp	r0, #2
   15732:	f040 8154 	bne.w	159de <event_connection_prepare+0xade>
		if (mayfly_was_enabled) {
   15736:	f1b9 0f00 	cmp.w	r9, #0
   1573a:	f040 8156 	bne.w	159ea <event_connection_prepare+0xaea>
			if (event_conn_upd_prep(conn, event_counter,
   1573e:	f1b9 0f00 	cmp.w	r9, #0
   15742:	f040 821e 	bne.w	15b82 <event_connection_prepare+0xc82>
   15746:	f000 be59 	b.w	163fc <event_connection_prepare+0x14fc>
		_radio.conn_upd = conn;
   1574a:	4b0f      	ldr	r3, [pc, #60]	; (15788 <event_connection_prepare+0x888>)
   1574c:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
   15750:	e6b0      	b.n	154b4 <event_connection_prepare+0x5b4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15752:	4815      	ldr	r0, [pc, #84]	; (157a8 <event_connection_prepare+0x8a8>)
   15754:	f7f9 fd2b 	bl	f1ae <mem_acquire>
		if (!node_tx) {
   15758:	4680      	mov	r8, r0
   1575a:	2800      	cmp	r0, #0
   1575c:	f000 814d 	beq.w	159fa <event_connection_prepare+0xafa>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   15760:	1d03      	adds	r3, r0, #4
		switch (conn->llcp.conn_upd.state) {
   15762:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   15766:	f002 0203 	and.w	r2, r2, #3
   1576a:	2a01      	cmp	r2, #1
   1576c:	d01e      	beq.n	157ac <event_connection_prepare+0x8ac>
   1576e:	2a02      	cmp	r2, #2
   15770:	d066      	beq.n	15840 <event_connection_prepare+0x940>
			LL_ASSERT(0);
   15772:	4040      	eors	r0, r0
   15774:	f380 8811 	msr	BASEPRI, r0
   15778:	f04f 0004 	mov.w	r0, #4
   1577c:	df02      	svc	2
   1577e:	bf00      	nop
   15780:	1afd498d 	.word	0x1afd498d
   15784:	00000007 	.word	0x00000007
   15788:	20000fec 	.word	0x20000fec
   1578c:	09ce5400 	.word	0x09ce5400
   15790:	3b9aca00 	.word	0x3b9aca00
   15794:	026259ff 	.word	0x026259ff
   15798:	01c9c37f 	.word	0x01c9c37f
   1579c:	000118a5 	.word	0x000118a5
   157a0:	1afd498d 	.word	0x1afd498d
   157a4:	00016465 	.word	0x00016465
   157a8:	20001144 	.word	0x20001144
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
   157ac:	49bc      	ldr	r1, [pc, #752]	; (15aa0 <event_connection_prepare+0xba0>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   157ae:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   157b2:	f36f 0201 	bfc	r2, #0, #2
   157b6:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
   157ba:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   157bc:	442a      	add	r2, r5
   157be:	b292      	uxth	r2, r2
   157c0:	3206      	adds	r2, #6
	conn->llcp.conn_upd.instant =
   157c2:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   157c6:	f898 2004 	ldrb.w	r2, [r8, #4]
   157ca:	f042 0203 	orr.w	r2, r2, #3
   157ce:	f888 2004 	strb.w	r2, [r8, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   157d2:	220c      	movs	r2, #12
   157d4:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   157d6:	2200      	movs	r2, #0
   157d8:	70da      	strb	r2, [r3, #3]
		conn->llcp.conn_upd.win_size;
   157da:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
   157de:	711a      	strb	r2, [r3, #4]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   157e0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   157e4:	48af      	ldr	r0, [pc, #700]	; (15aa4 <event_connection_prepare+0xba4>)
   157e6:	fba0 0202 	umull	r0, r2, r0, r2
   157ea:	0a92      	lsrs	r2, r2, #10
   157ec:	f8a3 2005 	strh.w	r2, [r3, #5]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
   157f0:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   157f4:	f8a3 2007 	strh.w	r2, [r3, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
   157f8:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   157fc:	f8a3 2009 	strh.w	r2, [r3, #9]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
   15800:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   15804:	f8a3 200b 	strh.w	r2, [r3, #11]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
   15808:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
   1580c:	f8a3 200d 	strh.w	r2, [r3, #13]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   15810:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   15814:	6820      	ldr	r0, [r4, #0]
   15816:	2800      	cmp	r0, #0
   15818:	db14      	blt.n	15844 <event_connection_prepare+0x944>
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
   1581a:	3305      	adds	r3, #5
   1581c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
   15820:	4ba1      	ldr	r3, [pc, #644]	; (15aa8 <event_connection_prepare+0xba8>)
   15822:	60d9      	str	r1, [r3, #12]
		mayfly_sched_offset->param = (void *)conn;
   15824:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   15826:	2201      	movs	r2, #1
   15828:	4611      	mov	r1, r2
   1582a:	2000      	movs	r0, #0
   1582c:	f7f9 fb7e 	bl	ef2c <mayfly_enqueue>
		LL_ASSERT(!retval);
   15830:	b9b0      	cbnz	r0, 15860 <event_connection_prepare+0x960>
		ctrl_tx_enqueue(conn, node_tx);
   15832:	4641      	mov	r1, r8
   15834:	4620      	mov	r0, r4
   15836:	f7fb ff4d 	bl	116d4 <ctrl_tx_enqueue>
	return 1;
   1583a:	f04f 0901 	mov.w	r9, #1
   1583e:	e77e      	b.n	1573e <event_connection_prepare+0x83e>
			fp_mayfly_select_or_use =
   15840:	499a      	ldr	r1, [pc, #616]	; (15aac <event_connection_prepare+0xbac>)
   15842:	e7b4      	b.n	157ae <event_connection_prepare+0x8ae>
				conn->hdr.ticks_preempt_to_start;
   15844:	68a7      	ldr	r7, [r4, #8]
				conn->hdr.ticks_active_to_start :
   15846:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   15848:	f020 4e00 	bic.w	lr, r0, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   1584c:	4297      	cmp	r7, r2
   1584e:	bf2c      	ite	cs
   15850:	ebce 0207 	rsbcs	r2, lr, r7
   15854:	ebce 0202 	rsbcc	r2, lr, r2
			conn->llcp.conn_upd.ticks_anchor -=
   15858:	4432      	add	r2, r6
   1585a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
   1585e:	e7dc      	b.n	1581a <event_connection_prepare+0x91a>
		LL_ASSERT(!retval);
   15860:	4040      	eors	r0, r0
   15862:	f380 8811 	msr	BASEPRI, r0
   15866:	f04f 0004 	mov.w	r0, #4
   1586a:	df02      	svc	2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1586c:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
   15870:	2300      	movs	r3, #0
   15872:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   15876:	e63e      	b.n	154f6 <event_connection_prepare+0x5f6>
			_radio.conn_upd = NULL;
   15878:	4b8d      	ldr	r3, [pc, #564]	; (15ab0 <event_connection_prepare+0xbb0>)
   1587a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   1587e:	e642      	b.n	15506 <event_connection_prepare+0x606>
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   15880:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   15884:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
		     conn->conn_interval) ||
   15886:	4291      	cmp	r1, r2
   15888:	f47f ae43 	bne.w	15512 <event_connection_prepare+0x612>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
   1588c:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   15890:	f240 41e2 	movw	r1, #1250	; 0x4e2
   15894:	fb01 f103 	mul.w	r1, r1, r3
   15898:	f242 7310 	movw	r3, #10000	; 0x2710
   1589c:	fb03 1302 	mla	r3, r3, r2, r1
   158a0:	3b01      	subs	r3, #1
   158a2:	fb93 f3f1 	sdiv	r3, r3, r1
   158a6:	b29b      	uxth	r3, r3
		     conn->supervision_reload)) {
   158a8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   158aa:	4293      	cmp	r3, r2
   158ac:	f47f ae31 	bne.w	15512 <event_connection_prepare+0x612>
   158b0:	e65b      	b.n	1556a <event_connection_prepare+0x66a>
		return (_radio.packet_rx_count -
   158b2:	497f      	ldr	r1, [pc, #508]	; (15ab0 <event_connection_prepare+0xbb0>)
   158b4:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   158b8:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   158bc:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   158be:	fa52 f383 	uxtab	r3, r2, r3
   158c2:	b2db      	uxtb	r3, r3
   158c4:	e633      	b.n	1552e <event_connection_prepare+0x62e>
		return 0;
   158c6:	2300      	movs	r3, #0
   158c8:	e63b      	b.n	15542 <event_connection_prepare+0x642>
			LL_ASSERT(radio_pdu_node_rx);
   158ca:	4040      	eors	r0, r0
   158cc:	f380 8811 	msr	BASEPRI, r0
   158d0:	f04f 0004 	mov.w	r0, #4
   158d4:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   158d6:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   158d8:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start &= ~((u32_t)1 << 31);
   158da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   158de:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   158e0:	4291      	cmp	r1, r2
   158e2:	bf2c      	ite	cs
   158e4:	ebc3 0301 	rsbcs	r3, r3, r1
   158e8:	ebc3 0302 	rsbcc	r3, r3, r2
   158ec:	eb06 0903 	add.w	r9, r6, r3
   158f0:	e640      	b.n	15574 <event_connection_prepare+0x674>
				TICKER_US_TO_TICKS((conn_interval_old -
   158f2:	1a1b      	subs	r3, r3, r0
   158f4:	17d9      	asrs	r1, r3, #31
   158f6:	486f      	ldr	r0, [pc, #444]	; (15ab4 <event_connection_prepare+0xbb4>)
   158f8:	f240 1223 	movw	r2, #291	; 0x123
   158fc:	fb02 f203 	mul.w	r2, r2, r3
   15900:	fb00 2201 	mla	r2, r0, r1, r2
   15904:	fba3 0100 	umull	r0, r1, r3, r0
   15908:	4411      	add	r1, r2
   1590a:	a363      	add	r3, pc, #396	; (adr r3, 15a98 <event_connection_prepare+0xb98>)
   1590c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15910:	f7eb fbf4 	bl	10fc <__aeabi_uldivmod>
   15914:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   15918:	eba9 0300 	sub.w	r3, r9, r0
   1591c:	930b      	str	r3, [sp, #44]	; 0x2c
   1591e:	e64d      	b.n	155bc <event_connection_prepare+0x6bc>
				conn->slave.window_widening_periodic_us *
   15920:	6d62      	ldr	r2, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
   15922:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   15924:	fb02 3218 	mls	r2, r2, r8, r3
   15928:	65e2      	str	r2, [r4, #92]	; 0x5c
				(((gc_lookup_ppm[_radio.sca] +
   1592a:	4b61      	ldr	r3, [pc, #388]	; (15ab0 <event_connection_prepare+0xbb0>)
   1592c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
   15930:	4861      	ldr	r0, [pc, #388]	; (15ab8 <event_connection_prepare+0xbb8>)
   15932:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
   15936:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   1593a:	f3c1 0182 	ubfx	r1, r1, #2, #3
   1593e:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
				(((gc_lookup_ppm[_radio.sca] +
   15942:	440b      	add	r3, r1
				   gc_lookup_ppm[conn->slave.sca]) *
   15944:	fb03 f309 	mul.w	r3, r3, r9
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   15948:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   1594c:	f203 233f 	addw	r3, r3, #575	; 0x23f
   15950:	495a      	ldr	r1, [pc, #360]	; (15abc <event_connection_prepare+0xbbc>)
   15952:	fba1 1303 	umull	r1, r3, r1, r3
   15956:	ea4f 4893 	mov.w	r8, r3, lsr #18
			conn->slave.window_widening_periodic_us =
   1595a:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
				(conn_interval_us >> 1) - RADIO_TIFS;
   1595e:	ea4f 0359 	mov.w	r3, r9, lsr #1
   15962:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_max_us =
   15964:	65a3      	str	r3, [r4, #88]	; 0x58
				conn->llcp.conn_upd.win_size * 1250;
   15966:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
   1596a:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1596e:	fb01 f100 	mul.w	r1, r1, r0
			conn->slave.window_size_prepare_us =
   15972:	6661      	str	r1, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
   15974:	2100      	movs	r1, #0
   15976:	6721      	str	r1, [r4, #112]	; 0x70
				conn->slave.window_widening_periodic_us *
   15978:	fb08 f00b 	mul.w	r0, r8, fp
			conn->slave.window_widening_prepare_us +=
   1597c:	4402      	add	r2, r0
   1597e:	65e2      	str	r2, [r4, #92]	; 0x5c
			if (conn->slave.window_widening_prepare_us >
   15980:	4293      	cmp	r3, r2
   15982:	d200      	bcs.n	15986 <event_connection_prepare+0xa86>
				conn->slave.window_widening_prepare_us =
   15984:	65e3      	str	r3, [r4, #92]	; 0x5c
				TICKER_US_TO_TICKS(conn->slave.window_widening_periodic_us *
   15986:	f8df b140 	ldr.w	fp, [pc, #320]	; 15ac8 <event_connection_prepare+0xbc8>
   1598a:	a343      	add	r3, pc, #268	; (adr r3, 15a98 <event_connection_prepare+0xb98>)
   1598c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15990:	fba0 010b 	umull	r0, r1, r0, fp
   15994:	f7eb fbb2 	bl	10fc <__aeabi_uldivmod>
   15998:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   1599c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1599e:	1a1b      	subs	r3, r3, r0
   159a0:	930b      	str	r3, [sp, #44]	; 0x2c
				TICKER_US_TO_TICKS((conn->llcp.conn_upd.win_offset_us /
   159a2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   159a6:	4a3f      	ldr	r2, [pc, #252]	; (15aa4 <event_connection_prepare+0xba4>)
   159a8:	fba2 2303 	umull	r2, r3, r2, r3
   159ac:	0a9b      	lsrs	r3, r3, #10
   159ae:	f240 40e2 	movw	r0, #1250	; 0x4e2
   159b2:	fb00 f003 	mul.w	r0, r0, r3
   159b6:	a338      	add	r3, pc, #224	; (adr r3, 15a98 <event_connection_prepare+0xb98>)
   159b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   159bc:	fba0 010b 	umull	r0, r1, r0, fp
   159c0:	f7eb fb9c 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   159c4:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
			periodic_us -=
   159c8:	eba9 0808 	sub.w	r8, r9, r8
   159cc:	e61a      	b.n	15604 <event_connection_prepare+0x704>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   159ce:	4040      	eors	r0, r0
   159d0:	f380 8811 	msr	BASEPRI, r0
   159d4:	f04f 0004 	mov.w	r0, #4
   159d8:	df02      	svc	2
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   159da:	4939      	ldr	r1, [pc, #228]	; (15ac0 <event_connection_prepare+0xbc0>)
   159dc:	e693      	b.n	15706 <event_connection_prepare+0x806>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   159de:	4040      	eors	r0, r0
   159e0:	f380 8811 	msr	BASEPRI, r0
   159e4:	f04f 0004 	mov.w	r0, #4
   159e8:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   159ea:	2201      	movs	r2, #1
   159ec:	4611      	mov	r1, r2
   159ee:	2000      	movs	r0, #0
   159f0:	f7f9 fa5e 	bl	eeb0 <mayfly_enable>
		return 0;
   159f4:	f04f 0900 	mov.w	r9, #0
   159f8:	e6a1      	b.n	1573e <event_connection_prepare+0x83e>
			return 1;
   159fa:	f04f 0901 	mov.w	r9, #1
   159fe:	e69e      	b.n	1573e <event_connection_prepare+0x83e>
	return 1;
   15a00:	f04f 0901 	mov.w	r9, #1
   15a04:	e69b      	b.n	1573e <event_connection_prepare+0x83e>
	if (conn->llcp.chan_map.initiate) {
   15a06:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15a0a:	b9f3      	cbnz	r3, 15a4a <event_connection_prepare+0xb4a>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   15a0c:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15a10:	1aeb      	subs	r3, r5, r3
   15a12:	b29b      	uxth	r3, r3
   15a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15a18:	f280 80b3 	bge.w	15b82 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   15a1c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15a20:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
   15a24:	f104 0817 	add.w	r8, r4, #23
   15a28:	2205      	movs	r2, #5
   15a2a:	f104 0179 	add.w	r1, r4, #121	; 0x79
   15a2e:	4640      	mov	r0, r8
   15a30:	f7ea fc46 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   15a34:	2105      	movs	r1, #5
   15a36:	4640      	mov	r0, r8
   15a38:	f7f9 fc3d 	bl	f2b6 <util_ones_count_get>
		conn->data_chan_count =
   15a3c:	7f63      	ldrb	r3, [r4, #29]
   15a3e:	f360 0305 	bfi	r3, r0, #0, #6
   15a42:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
   15a44:	2301      	movs	r3, #1
   15a46:	7723      	strb	r3, [r4, #28]
   15a48:	e09b      	b.n	15b82 <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15a4a:	481e      	ldr	r0, [pc, #120]	; (15ac4 <event_connection_prepare+0xbc4>)
   15a4c:	f7f9 fbaf 	bl	f1ae <mem_acquire>
		if (node_tx) {
   15a50:	4680      	mov	r8, r0
   15a52:	2800      	cmp	r0, #0
   15a54:	f000 8095 	beq.w	15b82 <event_connection_prepare+0xc82>
			conn->llcp.chan_map.initiate = 0;
   15a58:	2300      	movs	r3, #0
   15a5a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
   15a5e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   15a60:	442b      	add	r3, r5
   15a62:	b29b      	uxth	r3, r3
   15a64:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant =
   15a66:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15a6a:	7903      	ldrb	r3, [r0, #4]
   15a6c:	f043 0303 	orr.w	r3, r3, #3
   15a70:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   15a72:	2308      	movs	r3, #8
   15a74:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   15a76:	2301      	movs	r3, #1
   15a78:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->payload.llctrl.
   15a7a:	2205      	movs	r2, #5
   15a7c:	f104 0179 	add.w	r1, r4, #121	; 0x79
   15a80:	3008      	adds	r0, #8
   15a82:	f7ea fc1d 	bl	2c0 <memcpy>
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
   15a86:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15a8a:	f8a8 300d 	strh.w	r3, [r8, #13]
			ctrl_tx_enqueue(conn, node_tx);
   15a8e:	4641      	mov	r1, r8
   15a90:	4620      	mov	r0, r4
   15a92:	f7fb fe1f 	bl	116d4 <ctrl_tx_enqueue>
   15a96:	e074      	b.n	15b82 <event_connection_prepare+0xc82>
   15a98:	1afd498d 	.word	0x1afd498d
   15a9c:	00000007 	.word	0x00000007
   15aa0:	0001308d 	.word	0x0001308d
   15aa4:	d1b71759 	.word	0xd1b71759
   15aa8:	2000bda0 	.word	0x2000bda0
   15aac:	00012dc1 	.word	0x00012dc1
   15ab0:	20000fec 	.word	0x20000fec
   15ab4:	09ce5400 	.word	0x09ce5400
   15ab8:	00031470 	.word	0x00031470
   15abc:	431bde83 	.word	0x431bde83
   15ac0:	0001645d 	.word	0x0001645d
   15ac4:	20001144 	.word	0x20001144
   15ac8:	3b9aca00 	.word	0x3b9aca00
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15acc:	48d9      	ldr	r0, [pc, #868]	; (15e34 <event_connection_prepare+0xf34>)
   15ace:	f7f9 fb6e 	bl	f1ae <mem_acquire>
	if (node_tx) {
   15ad2:	4680      	mov	r8, r0
   15ad4:	2800      	cmp	r0, #0
   15ad6:	d054      	beq.n	15b82 <event_connection_prepare+0xc82>
		struct pdu_data *pdu_ctrl_tx =
   15ad8:	f100 0904 	add.w	r9, r0, #4
		conn->llcp_ack = conn->llcp_req;
   15adc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15ae0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (!conn->role) {
   15ae4:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15ae8:	2b00      	cmp	r3, #0
   15aea:	f2c0 808c 	blt.w	15c06 <event_connection_prepare+0xd06>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   15aee:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
   15af2:	4653      	mov	r3, sl
   15af4:	2200      	movs	r2, #0
   15af6:	f104 0193 	add.w	r1, r4, #147	; 0x93
   15afa:	f104 0083 	add.w	r0, r4, #131	; 0x83
   15afe:	f7f9 fc63 	bl	f3c8 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
   15b02:	2210      	movs	r2, #16
   15b04:	4651      	mov	r1, sl
   15b06:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   15b0a:	f7ea fbd9 	bl	2c0 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   15b0e:	2208      	movs	r2, #8
   15b10:	f504 7189 	add.w	r1, r4, #274	; 0x112
   15b14:	f204 1033 	addw	r0, r4, #307	; 0x133
   15b18:	f7ea fbd2 	bl	2c0 <memcpy>
			conn->ccm_rx.counter = 0;
   15b1c:	2300      	movs	r3, #0
   15b1e:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   15b22:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   15b26:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   15b2a:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   15b2e:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   15b32:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   15b36:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   15b3a:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
   15b3e:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   15b42:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   15b46:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   15b4a:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
			conn->ccm_rx.direction = 0;
   15b4e:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   15b52:	f363 0200 	bfi	r2, r3, #0, #1
   15b56:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 1;
   15b5a:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   15b5e:	f043 0301 	orr.w	r3, r3, #1
   15b62:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
   15b66:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->enc_tx = 1;
   15b6a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   15b6e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			start_enc_rsp_send(conn, pdu_ctrl_tx);
   15b72:	4649      	mov	r1, r9
   15b74:	4620      	mov	r0, r4
   15b76:	f7fb fe9d 	bl	118b4 <start_enc_rsp_send>
		ctrl_tx_enqueue(conn, node_tx);
   15b7a:	4641      	mov	r1, r8
   15b7c:	4620      	mov	r0, r4
   15b7e:	f7fb fda9 	bl	116d4 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   15b82:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   15b86:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   15b8a:	429a      	cmp	r2, r3
   15b8c:	d021      	beq.n	15bd2 <event_connection_prepare+0xcd2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   15b8e:	2305      	movs	r3, #5
   15b90:	2200      	movs	r2, #0
   15b92:	4611      	mov	r1, r2
   15b94:	4610      	mov	r0, r2
   15b96:	f7fc fa77 	bl	12088 <event_stop>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15b9a:	48a6      	ldr	r0, [pc, #664]	; (15e34 <event_connection_prepare+0xf34>)
   15b9c:	f7f9 fb07 	bl	f1ae <mem_acquire>
		if (node_tx) {
   15ba0:	4601      	mov	r1, r0
   15ba2:	b1b0      	cbz	r0, 15bd2 <event_connection_prepare+0xcd2>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   15ba4:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   15ba8:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15bac:	7903      	ldrb	r3, [r0, #4]
   15bae:	f043 0303 	orr.w	r3, r3, #3
   15bb2:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
   15bb4:	2302      	movs	r3, #2
   15bb6:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   15bb8:	71c3      	strb	r3, [r0, #7]
				error_code = conn->llcp_terminate.reason_own;
   15bba:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   15bbe:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
   15bc0:	4620      	mov	r0, r4
   15bc2:	f7fb fd87 	bl	116d4 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
   15bc6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   15bc8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
			if (conn->procedure_expire <= 1) {
   15bcc:	2b01      	cmp	r3, #1
   15bce:	f240 82a6 	bls.w	1611e <event_connection_prepare+0x121e>
	if (conn->llcp_length.ack != conn->llcp_length.req) {
   15bd2:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   15bd6:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15bda:	429a      	cmp	r2, r3
   15bdc:	f000 83f9 	beq.w	163d2 <event_connection_prepare+0x14d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   15be0:	2305      	movs	r3, #5
   15be2:	2200      	movs	r2, #0
   15be4:	4611      	mov	r1, r2
   15be6:	4610      	mov	r0, r2
   15be8:	f7fc fa4e 	bl	12088 <event_stop>
	switch (conn->llcp_length.state) {
   15bec:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   15bf0:	f003 0303 	and.w	r3, r3, #3
   15bf4:	2b03      	cmp	r3, #3
   15bf6:	f200 8427 	bhi.w	16448 <event_connection_prepare+0x1548>
   15bfa:	e8df f013 	tbh	[pc, r3, lsl #1]
   15bfe:	0299      	.short	0x0299
   15c00:	03ea03ea 	.word	0x03ea03ea
   15c04:	02fa      	.short	0x02fa
		else if (!conn->pause_tx || conn->refresh) {
   15c06:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15c0a:	f003 0348 	and.w	r3, r3, #72	; 0x48
   15c0e:	2b08      	cmp	r3, #8
   15c10:	d079      	beq.n	15d06 <event_connection_prepare+0xe06>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15c12:	7903      	ldrb	r3, [r0, #4]
   15c14:	f043 0303 	orr.w	r3, r3, #3
   15c18:	7103      	strb	r3, [r0, #4]
			if (conn->llcp.encryption.error_code) {
   15c1a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15c1e:	b333      	cbz	r3, 15c6e <event_connection_prepare+0xd6e>
	if (conn->common.fex_valid &&
   15c20:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   15c24:	f013 0f20 	tst.w	r3, #32
   15c28:	d00e      	beq.n	15c48 <event_connection_prepare+0xd48>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
   15c2a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
   15c2e:	f013 0f04 	tst.w	r3, #4
   15c32:	d009      	beq.n	15c48 <event_connection_prepare+0xd48>
		pdu->payload.llctrl.opcode =
   15c34:	2311      	movs	r3, #17
   15c36:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   15c38:	2303      	movs	r3, #3
   15c3a:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
   15c3c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15c40:	7243      	strb	r3, [r0, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
   15c42:	2302      	movs	r3, #2
   15c44:	7143      	strb	r3, [r0, #5]
   15c46:	e009      	b.n	15c5c <event_connection_prepare+0xd5c>
		pdu->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   15c48:	230d      	movs	r3, #13
   15c4a:	f888 3007 	strb.w	r3, [r8, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   15c4e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15c52:	f888 3008 	strb.w	r3, [r8, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   15c56:	2301      	movs	r3, #1
   15c58:	f888 3005 	strb.w	r3, [r8, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, ctrldata);
   15c5c:	f898 3005 	ldrb.w	r3, [r8, #5]
   15c60:	3301      	adds	r3, #1
   15c62:	f888 3005 	strb.w	r3, [r8, #5]
	conn->llcp.encryption.error_code = 0;
   15c66:	2300      	movs	r3, #0
   15c68:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   15c6c:	e785      	b.n	15b7a <event_connection_prepare+0xc7a>
				enc_rsp_send(conn);
   15c6e:	4620      	mov	r0, r4
   15c70:	f7fd fa38 	bl	130e4 <enc_rsp_send>
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
   15c74:	f104 09f9 	add.w	r9, r4, #249	; 0xf9
   15c78:	464b      	mov	r3, r9
   15c7a:	2200      	movs	r2, #0
   15c7c:	f104 0193 	add.w	r1, r4, #147	; 0x93
   15c80:	f104 0083 	add.w	r0, r4, #131	; 0x83
   15c84:	f7f9 fba0 	bl	f3c8 <ecb_encrypt>
				memcpy(&conn->ccm_tx.key[0],
   15c88:	2210      	movs	r2, #16
   15c8a:	4649      	mov	r1, r9
   15c8c:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   15c90:	f7ea fb16 	bl	2c0 <memcpy>
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   15c94:	2208      	movs	r2, #8
   15c96:	f504 7189 	add.w	r1, r4, #274	; 0x112
   15c9a:	f204 1033 	addw	r0, r4, #307	; 0x133
   15c9e:	f7ea fb0f 	bl	2c0 <memcpy>
				conn->ccm_rx.counter = 0;
   15ca2:	2300      	movs	r3, #0
   15ca4:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   15ca8:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   15cac:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   15cb0:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   15cb4:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   15cb8:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   15cbc:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   15cc0:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
				conn->ccm_tx.counter = 0;
   15cc4:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   15cc8:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   15ccc:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   15cd0:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
				conn->ccm_rx.direction = 1;
   15cd4:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   15cd8:	f042 0201 	orr.w	r2, r2, #1
   15cdc:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
				conn->ccm_tx.direction = 0;
   15ce0:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
   15ce4:	f363 0200 	bfi	r2, r3, #0, #1
   15ce8:	f884 2132 	strb.w	r2, [r4, #306]	; 0x132
				conn->enc_rx = 1;
   15cec:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15cf0:	f043 0310 	orr.w	r3, r3, #16
   15cf4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				pdu_ctrl_tx->len =
   15cf8:	2301      	movs	r3, #1
   15cfa:	f888 3005 	strb.w	r3, [r8, #5]
				pdu_ctrl_tx->payload.llctrl.opcode =
   15cfe:	2305      	movs	r3, #5
   15d00:	f888 3007 	strb.w	r3, [r8, #7]
   15d04:	e739      	b.n	15b7a <event_connection_prepare+0xc7a>
			_radio.conn_curr->enc_tx = 1;
   15d06:	f8df 9134 	ldr.w	r9, [pc, #308]	; 15e3c <event_connection_prepare+0xf3c>
   15d0a:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   15d0e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   15d12:	f043 0320 	orr.w	r3, r3, #32
   15d16:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			start_enc_rsp_send(_radio.conn_curr, NULL);
   15d1a:	2100      	movs	r1, #0
   15d1c:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   15d20:	f7fb fdc8 	bl	118b4 <start_enc_rsp_send>
			_radio.conn_curr->pause_rx = 0;
   15d24:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   15d28:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15d2c:	f36f 0282 	bfc	r2, #2, #1
   15d30:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   15d34:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   15d38:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15d3c:	f36f 02c3 	bfc	r2, #3, #1
   15d40:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   15d44:	e719      	b.n	15b7a <event_connection_prepare+0xc7a>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15d46:	483b      	ldr	r0, [pc, #236]	; (15e34 <event_connection_prepare+0xf34>)
   15d48:	f7f9 fa31 	bl	f1ae <mem_acquire>
	if (node_tx) {
   15d4c:	4680      	mov	r8, r0
   15d4e:	2800      	cmp	r0, #0
   15d50:	f43f af17 	beq.w	15b82 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   15d54:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15d58:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
   15d5c:	4b36      	ldr	r3, [pc, #216]	; (15e38 <event_connection_prepare+0xf38>)
   15d5e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15d62:	7903      	ldrb	r3, [r0, #4]
   15d64:	f043 0303 	orr.w	r3, r3, #3
   15d68:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15d6a:	2309      	movs	r3, #9
   15d6c:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   15d6e:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15d72:	2b00      	cmp	r3, #0
   15d74:	db1e      	blt.n	15db4 <event_connection_prepare+0xeb4>
   15d76:	2308      	movs	r3, #8
   15d78:	f888 3007 	strb.w	r3, [r8, #7]
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
   15d7c:	2208      	movs	r2, #8
   15d7e:	2100      	movs	r1, #0
   15d80:	eb08 0002 	add.w	r0, r8, r2
   15d84:	f014 f9fc 	bl	2a180 <memset>
			conn->llcp_features & 0xFF;
   15d88:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   15d8c:	f888 3008 	strb.w	r3, [r8, #8]
			(conn->llcp_features >> 8) & 0xFF;
   15d90:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   15d94:	0a1b      	lsrs	r3, r3, #8
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   15d96:	f888 3009 	strb.w	r3, [r8, #9]
			(conn->llcp_features >> 16) & 0xFF;
   15d9a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   15d9e:	f888 300a 	strb.w	r3, [r8, #10]
		ctrl_tx_enqueue(conn, node_tx);
   15da2:	4641      	mov	r1, r8
   15da4:	4620      	mov	r0, r4
   15da6:	f7fb fc95 	bl	116d4 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   15daa:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15dae:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   15db2:	e6e6      	b.n	15b82 <event_connection_prepare+0xc82>
		pdu_ctrl_tx->payload.llctrl.opcode =
   15db4:	230e      	movs	r3, #14
   15db6:	e7df      	b.n	15d78 <event_connection_prepare+0xe78>
	if (conn->llcp_version.tx == 0) {
   15db8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   15dbc:	f013 0f01 	tst.w	r3, #1
   15dc0:	d03e      	beq.n	15e40 <event_connection_prepare+0xf40>
	} else if (conn->llcp_version.rx != 0) {
   15dc2:	f013 0f02 	tst.w	r3, #2
   15dc6:	d076      	beq.n	15eb6 <event_connection_prepare+0xfb6>
		conn->llcp_ack = conn->llcp_req;
   15dc8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15dcc:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	if (_radio.packet_rx_acquire >=
   15dd0:	4b1a      	ldr	r3, [pc, #104]	; (15e3c <event_connection_prepare+0xf3c>)
   15dd2:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15dd6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15dda:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15ddc:	429a      	cmp	r2, r3
   15dde:	d358      	bcc.n	15e92 <event_connection_prepare+0xf92>
			_radio.packet_rx_last);
   15de0:	4b16      	ldr	r3, [pc, #88]	; (15e3c <event_connection_prepare+0xf3c>)
   15de2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15de6:	1ad3      	subs	r3, r2, r3
   15de8:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   15dea:	2b01      	cmp	r3, #1
   15dec:	d95b      	bls.n	15ea6 <event_connection_prepare+0xfa6>
	return _radio.packet_rx[_radio.packet_rx_last];
   15dee:	4b13      	ldr	r3, [pc, #76]	; (15e3c <event_connection_prepare+0xf3c>)
   15df0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   15df4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(radio_pdu_node_rx);
   15dfc:	2b00      	cmp	r3, #0
   15dfe:	d054      	beq.n	15eaa <event_connection_prepare+0xfaa>
		radio_pdu_node_rx->hdr.handle = conn->handle;
   15e00:	8c22      	ldrh	r2, [r4, #32]
   15e02:	80da      	strh	r2, [r3, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15e04:	2201      	movs	r2, #1
   15e06:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   15e08:	7a1a      	ldrb	r2, [r3, #8]
   15e0a:	f042 0203 	orr.w	r2, r2, #3
   15e0e:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15e10:	2206      	movs	r2, #6
   15e12:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   15e14:	220c      	movs	r2, #12
   15e16:	72da      	strb	r2, [r3, #11]
			conn->llcp_version.version_number;
   15e18:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
   15e1c:	731a      	strb	r2, [r3, #12]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
   15e1e:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   15e22:	f8a3 200d 	strh.w	r2, [r3, #13]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   15e26:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   15e2a:	f8a3 200f 	strh.w	r2, [r3, #15]
		packet_rx_enqueue();
   15e2e:	f7fe fa05 	bl	1423c <packet_rx_enqueue>
   15e32:	e6a6      	b.n	15b82 <event_connection_prepare+0xc82>
   15e34:	20001144 	.word	0x20001144
   15e38:	000141ff 	.word	0x000141ff
   15e3c:	20000fec 	.word	0x20000fec
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15e40:	48b9      	ldr	r0, [pc, #740]	; (16128 <event_connection_prepare+0x1228>)
   15e42:	f7f9 f9b4 	bl	f1ae <mem_acquire>
		if (node_tx) {
   15e46:	4601      	mov	r1, r0
   15e48:	2800      	cmp	r0, #0
   15e4a:	f43f ae9a 	beq.w	15b82 <event_connection_prepare+0xc82>
			conn->llcp_ack = conn->llcp_req;
   15e4e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15e52:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
   15e56:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   15e5a:	f043 0301 	orr.w	r3, r3, #1
   15e5e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15e62:	7903      	ldrb	r3, [r0, #4]
   15e64:	f043 0303 	orr.w	r3, r3, #3
   15e68:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   15e6a:	2306      	movs	r3, #6
   15e6c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   15e6e:	230c      	movs	r3, #12
   15e70:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   15e72:	2309      	movs	r3, #9
   15e74:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   15e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15e7a:	7243      	strb	r3, [r0, #9]
   15e7c:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   15e7e:	72c3      	strb	r3, [r0, #11]
   15e80:	7303      	strb	r3, [r0, #12]
			ctrl_tx_enqueue(conn, node_tx);
   15e82:	4620      	mov	r0, r4
   15e84:	f7fb fc26 	bl	116d4 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
   15e88:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15e8c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   15e90:	e677      	b.n	15b82 <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   15e92:	49a6      	ldr	r1, [pc, #664]	; (1612c <event_connection_prepare+0x122c>)
   15e94:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   15e98:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15e9c:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   15e9e:	fa52 f383 	uxtab	r3, r2, r3
   15ea2:	b2db      	uxtb	r3, r3
   15ea4:	e7a1      	b.n	15dea <event_connection_prepare+0xeea>
		return 0;
   15ea6:	2300      	movs	r3, #0
   15ea8:	e7a8      	b.n	15dfc <event_connection_prepare+0xefc>
		LL_ASSERT(radio_pdu_node_rx);
   15eaa:	4040      	eors	r0, r0
   15eac:	f380 8811 	msr	BASEPRI, r0
   15eb0:	f04f 0004 	mov.w	r0, #4
   15eb4:	df02      	svc	2
		LL_ASSERT(0);
   15eb6:	4040      	eors	r0, r0
   15eb8:	f380 8811 	msr	BASEPRI, r0
   15ebc:	f04f 0004 	mov.w	r0, #4
   15ec0:	df02      	svc	2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15ec2:	4899      	ldr	r0, [pc, #612]	; (16128 <event_connection_prepare+0x1228>)
   15ec4:	f7f9 f973 	bl	f1ae <mem_acquire>
	if (node_tx) {
   15ec8:	4601      	mov	r1, r0
   15eca:	2800      	cmp	r0, #0
   15ecc:	f43f ae59 	beq.w	15b82 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   15ed0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15ed4:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15ed8:	7903      	ldrb	r3, [r0, #4]
   15eda:	f043 0303 	orr.w	r3, r3, #3
   15ede:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   15ee0:	2301      	movs	r3, #1
   15ee2:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   15ee4:	2312      	movs	r3, #18
   15ee6:	71c3      	strb	r3, [r0, #7]
		ctrl_tx_enqueue(conn, node_tx);
   15ee8:	4620      	mov	r0, r4
   15eea:	f7fb fbf3 	bl	116d4 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   15eee:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15ef2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   15ef6:	e644      	b.n	15b82 <event_connection_prepare+0xc82>
	if (conn->llcp.phy_upd_ind.initiate) {
   15ef8:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   15efc:	f012 0f01 	tst.w	r2, #1
   15f00:	d16b      	bne.n	15fda <event_connection_prepare+0x10da>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
   15f02:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   15f06:	1aeb      	subs	r3, r5, r3
   15f08:	b29b      	uxth	r3, r3
   15f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15f0e:	f6bf ae38 	bge.w	15b82 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   15f12:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15f16:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		old_tx = conn->phy_tx;
   15f1a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   15f1e:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		old_rx = conn->phy_rx;
   15f22:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   15f26:	f000 0007 	and.w	r0, r0, #7
		if (conn->llcp.phy_upd_ind.tx) {
   15f2a:	f012 0f1c 	tst.w	r2, #28
   15f2e:	d009      	beq.n	15f44 <event_connection_prepare+0x1044>
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   15f30:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15f34:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15f38:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
   15f3c:	f363 0ec5 	bfi	lr, r3, #3, #3
   15f40:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
   15f44:	f012 0fe0 	tst.w	r2, #224	; 0xe0
   15f48:	d008      	beq.n	15f5c <event_connection_prepare+0x105c>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
   15f4a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15f4e:	095b      	lsrs	r3, r3, #5
   15f50:	f894 e03a 	ldrb.w	lr, [r4, #58]	; 0x3a
   15f54:	f363 0e02 	bfi	lr, r3, #0, #3
   15f58:	f884 e03a 	strb.w	lr, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
   15f5c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   15f60:	f3c3 1e80 	ubfx	lr, r3, #6, #1
   15f64:	f36e 13c7 	bfi	r3, lr, #7, #1
   15f68:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   15f6c:	f012 0f02 	tst.w	r2, #2
   15f70:	d105      	bne.n	15f7e <event_connection_prepare+0x107e>
   15f72:	b2db      	uxtb	r3, r3
   15f74:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   15f78:	4299      	cmp	r1, r3
   15f7a:	f000 80b0 	beq.w	160de <event_connection_prepare+0x11de>
	if (_radio.packet_rx_acquire >=
   15f7e:	4b6b      	ldr	r3, [pc, #428]	; (1612c <event_connection_prepare+0x122c>)
   15f80:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15f84:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15f88:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15f8a:	429a      	cmp	r2, r3
   15f8c:	f0c0 80af 	bcc.w	160ee <event_connection_prepare+0x11ee>
			_radio.packet_rx_last);
   15f90:	4b66      	ldr	r3, [pc, #408]	; (1612c <event_connection_prepare+0x122c>)
   15f92:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15f96:	1ad3      	subs	r3, r2, r3
   15f98:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   15f9a:	2b01      	cmp	r3, #1
   15f9c:	f240 80b1 	bls.w	16102 <event_connection_prepare+0x1202>
	return _radio.packet_rx[_radio.packet_rx_last];
   15fa0:	4b62      	ldr	r3, [pc, #392]	; (1612c <event_connection_prepare+0x122c>)
   15fa2:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   15fa6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   15fae:	2b00      	cmp	r3, #0
   15fb0:	f000 80a9 	beq.w	16106 <event_connection_prepare+0x1206>
		node_rx->hdr.handle = conn->handle;
   15fb4:	8c22      	ldrh	r2, [r4, #32]
   15fb6:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15fb8:	220c      	movs	r2, #12
   15fba:	711a      	strb	r2, [r3, #4]
		p->status = 0;
   15fbc:	2200      	movs	r2, #0
   15fbe:	72da      	strb	r2, [r3, #11]
		p->tx = conn->phy_tx;
   15fc0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   15fc4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   15fc8:	731a      	strb	r2, [r3, #12]
		p->rx = conn->phy_rx;
   15fca:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   15fce:	f3c2 0202 	ubfx	r2, r2, #0, #3
   15fd2:	735a      	strb	r2, [r3, #13]
		packet_rx_enqueue();
   15fd4:	f7fe f932 	bl	1423c <packet_rx_enqueue>
   15fd8:	e5d3      	b.n	15b82 <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15fda:	4853      	ldr	r0, [pc, #332]	; (16128 <event_connection_prepare+0x1228>)
   15fdc:	f7f9 f8e7 	bl	f1ae <mem_acquire>
		if (node_tx) {
   15fe0:	4680      	mov	r8, r0
   15fe2:	2800      	cmp	r0, #0
   15fe4:	f43f adcd 	beq.w	15b82 <event_connection_prepare+0xc82>
			conn->llcp.phy_upd_ind.initiate = 0;
   15fe8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15fec:	f36f 0300 	bfc	r3, #0, #1
   15ff0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
   15ff4:	b2db      	uxtb	r3, r3
   15ff6:	f3c3 0282 	ubfx	r2, r3, #2, #3
   15ffa:	ea52 1353 	orrs.w	r3, r2, r3, lsr #5
   15ffe:	d147      	bne.n	16090 <event_connection_prepare+0x1190>
				conn->llcp_ack = conn->llcp_req;
   16000:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   16004:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
				conn->llcp.phy_upd_ind.instant = 0;
   16008:	2300      	movs	r3, #0
   1600a:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
   1600e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16012:	f013 0f02 	tst.w	r3, #2
   16016:	d041      	beq.n	1609c <event_connection_prepare+0x119c>
	if (_radio.packet_rx_acquire >=
   16018:	4b44      	ldr	r3, [pc, #272]	; (1612c <event_connection_prepare+0x122c>)
   1601a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1601e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16022:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   16024:	429a      	cmp	r2, r3
   16026:	d321      	bcc.n	1606c <event_connection_prepare+0x116c>
			_radio.packet_rx_last);
   16028:	4b40      	ldr	r3, [pc, #256]	; (1612c <event_connection_prepare+0x122c>)
   1602a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1602e:	1ad3      	subs	r3, r2, r3
   16030:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   16032:	2b01      	cmp	r3, #1
   16034:	d924      	bls.n	16080 <event_connection_prepare+0x1180>
	return _radio.packet_rx[_radio.packet_rx_last];
   16036:	4b3d      	ldr	r3, [pc, #244]	; (1612c <event_connection_prepare+0x122c>)
   16038:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1603c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
					LL_ASSERT(node_rx);
   16044:	b1f3      	cbz	r3, 16084 <event_connection_prepare+0x1184>
					node_rx->hdr.handle = conn->handle;
   16046:	8c22      	ldrh	r2, [r4, #32]
   16048:	80da      	strh	r2, [r3, #6]
					node_rx->hdr.type =
   1604a:	220c      	movs	r2, #12
   1604c:	711a      	strb	r2, [r3, #4]
					p->status = 0;
   1604e:	2200      	movs	r2, #0
   16050:	72da      	strb	r2, [r3, #11]
					p->tx = conn->phy_tx;
   16052:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   16056:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   1605a:	731a      	strb	r2, [r3, #12]
					p->rx = conn->phy_rx;
   1605c:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   16060:	f3c2 0202 	ubfx	r2, r2, #0, #3
   16064:	735a      	strb	r2, [r3, #13]
					packet_rx_enqueue();
   16066:	f7fe f8e9 	bl	1423c <packet_rx_enqueue>
   1606a:	e017      	b.n	1609c <event_connection_prepare+0x119c>
		return (_radio.packet_rx_count -
   1606c:	492f      	ldr	r1, [pc, #188]	; (1612c <event_connection_prepare+0x122c>)
   1606e:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   16072:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16076:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   16078:	fa52 f383 	uxtab	r3, r2, r3
   1607c:	b2db      	uxtb	r3, r3
   1607e:	e7d8      	b.n	16032 <event_connection_prepare+0x1132>
		return 0;
   16080:	2300      	movs	r3, #0
   16082:	e7df      	b.n	16044 <event_connection_prepare+0x1144>
					LL_ASSERT(node_rx);
   16084:	4040      	eors	r0, r0
   16086:	f380 8811 	msr	BASEPRI, r0
   1608a:	f04f 0004 	mov.w	r0, #4
   1608e:	df02      	svc	2
								 conn->latency +
   16090:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
				conn->llcp.phy_upd_ind.instant = event_counter +
   16092:	442b      	add	r3, r5
   16094:	b29b      	uxth	r3, r3
								 conn->latency +
   16096:	3306      	adds	r3, #6
				conn->llcp.phy_upd_ind.instant = event_counter +
   16098:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1609c:	f898 3004 	ldrb.w	r3, [r8, #4]
   160a0:	f043 0303 	orr.w	r3, r3, #3
   160a4:	f888 3004 	strb.w	r3, [r8, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   160a8:	2305      	movs	r3, #5
   160aa:	f888 3005 	strb.w	r3, [r8, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   160ae:	2318      	movs	r3, #24
   160b0:	f888 3007 	strb.w	r3, [r8, #7]
			p->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   160b4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   160b8:	f3c3 0382 	ubfx	r3, r3, #2, #3
   160bc:	f888 3008 	strb.w	r3, [r8, #8]
			p->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   160c0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   160c4:	f3c3 1342 	ubfx	r3, r3, #5, #3
   160c8:	f888 3009 	strb.w	r3, [r8, #9]
			p->instant = conn->llcp.phy_upd_ind.instant;
   160cc:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   160d0:	f8a8 300a 	strh.w	r3, [r8, #10]
			ctrl_tx_enqueue(conn, node_tx);
   160d4:	4641      	mov	r1, r8
   160d6:	4620      	mov	r0, r4
   160d8:	f7fb fafc 	bl	116d4 <ctrl_tx_enqueue>
   160dc:	e551      	b.n	15b82 <event_connection_prepare+0xc82>
		    (conn->phy_rx == old_rx)) {
   160de:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   160e2:	f003 0307 	and.w	r3, r3, #7
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   160e6:	4298      	cmp	r0, r3
   160e8:	f47f af49 	bne.w	15f7e <event_connection_prepare+0x107e>
   160ec:	e549      	b.n	15b82 <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   160ee:	490f      	ldr	r1, [pc, #60]	; (1612c <event_connection_prepare+0x122c>)
   160f0:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   160f4:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   160f8:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   160fa:	fa52 f383 	uxtab	r3, r2, r3
   160fe:	b2db      	uxtb	r3, r3
   16100:	e74b      	b.n	15f9a <event_connection_prepare+0x109a>
		return 0;
   16102:	2300      	movs	r3, #0
   16104:	e753      	b.n	15fae <event_connection_prepare+0x10ae>
		LL_ASSERT(node_rx);
   16106:	4040      	eors	r0, r0
   16108:	f380 8811 	msr	BASEPRI, r0
   1610c:	f04f 0004 	mov.w	r0, #4
   16110:	df02      	svc	2
			LL_ASSERT(0);
   16112:	4040      	eors	r0, r0
   16114:	f380 8811 	msr	BASEPRI, r0
   16118:	f04f 0004 	mov.w	r0, #4
   1611c:	df02      	svc	2
				conn->procedure_expire++;
   1611e:	3301      	adds	r3, #1
   16120:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   16124:	e555      	b.n	15bd2 <event_connection_prepare+0xcd2>
   16126:	bf00      	nop
   16128:	20001144 	.word	0x20001144
   1612c:	20000fec 	.word	0x20000fec
	if (_radio.packet_rx_acquire >=
   16130:	4bbf      	ldr	r3, [pc, #764]	; (16430 <event_connection_prepare+0x1530>)
   16132:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16136:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1613a:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1613c:	429a      	cmp	r2, r3
   1613e:	d346      	bcc.n	161ce <event_connection_prepare+0x12ce>
			_radio.packet_rx_last);
   16140:	4bbb      	ldr	r3, [pc, #748]	; (16430 <event_connection_prepare+0x1530>)
   16142:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16146:	eba2 0808 	sub.w	r8, r2, r8
   1614a:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   1614e:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   16152:	4bb7      	ldr	r3, [pc, #732]	; (16430 <event_connection_prepare+0x1530>)
   16154:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   16158:	f7f9 f85d 	bl	f216 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   1615c:	4440      	add	r0, r8
   1615e:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   16160:	28ff      	cmp	r0, #255	; 0xff
   16162:	d840      	bhi.n	161e6 <event_connection_prepare+0x12e6>
		if (_radio.packet_rx_data_count != free_count_rx) {
   16164:	4bb2      	ldr	r3, [pc, #712]	; (16430 <event_connection_prepare+0x1530>)
   16166:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   1616a:	4298      	cmp	r0, r3
   1616c:	f040 8131 	bne.w	163d2 <event_connection_prepare+0x14d2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16170:	48b0      	ldr	r0, [pc, #704]	; (16434 <event_connection_prepare+0x1534>)
   16172:	f7f9 f81c 	bl	f1ae <mem_acquire>
		if (!node_tx) {
   16176:	4601      	mov	r1, r0
   16178:	2800      	cmp	r0, #0
   1617a:	f000 812a 	beq.w	163d2 <event_connection_prepare+0x14d2>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   1617e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   16182:	2201      	movs	r2, #1
   16184:	f362 0301 	bfi	r3, r2, #0, #2
   16188:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   1618c:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   16190:	85a3      	strh	r3, [r4, #44]	; 0x2c
		conn->default_tx_time = conn->llcp_length.tx_time;
   16192:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   16196:	8663      	strh	r3, [r4, #50]	; 0x32
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16198:	7903      	ldrb	r3, [r0, #4]
   1619a:	f043 0303 	orr.w	r3, r3, #3
   1619e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   161a0:	2309      	movs	r3, #9
   161a2:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   161a4:	2314      	movs	r3, #20
   161a6:	71c3      	strb	r3, [r0, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   161a8:	231b      	movs	r3, #27
   161aa:	7203      	strb	r3, [r0, #8]
   161ac:	2300      	movs	r3, #0
   161ae:	7243      	strb	r3, [r0, #9]
		lr->max_tx_octets = conn->default_tx_octets;
   161b0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   161b2:	8183      	strh	r3, [r0, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   161b4:	2348      	movs	r3, #72	; 0x48
   161b6:	7283      	strb	r3, [r0, #10]
   161b8:	72ca      	strb	r2, [r1, #11]
		lr->max_tx_time = conn->default_tx_time;
   161ba:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   161bc:	81c3      	strh	r3, [r0, #14]
		ctrl_tx_enqueue(conn, node_tx);
   161be:	4620      	mov	r0, r4
   161c0:	f7fb fa88 	bl	116d4 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   161c4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   161c8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   161cc:	e101      	b.n	163d2 <event_connection_prepare+0x14d2>
		return (_radio.packet_rx_count -
   161ce:	4b98      	ldr	r3, [pc, #608]	; (16430 <event_connection_prepare+0x1530>)
   161d0:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   161d4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   161d8:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   161dc:	fa52 f888 	uxtab	r8, r2, r8
   161e0:	fa5f f888 	uxtb.w	r8, r8
   161e4:	e7b3      	b.n	1614e <event_connection_prepare+0x124e>
		LL_ASSERT(free_count_rx <= 0xFF);
   161e6:	4040      	eors	r0, r0
   161e8:	f380 8811 	msr	BASEPRI, r0
   161ec:	f04f 0004 	mov.w	r0, #4
   161f0:	df02      	svc	2
	if (_radio.packet_rx_acquire >=
   161f2:	4b8f      	ldr	r3, [pc, #572]	; (16430 <event_connection_prepare+0x1530>)
   161f4:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   161f8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   161fc:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   161fe:	429a      	cmp	r2, r3
   16200:	d352      	bcc.n	162a8 <event_connection_prepare+0x13a8>
			_radio.packet_rx_last);
   16202:	4b8b      	ldr	r3, [pc, #556]	; (16430 <event_connection_prepare+0x1530>)
   16204:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16208:	eba2 0808 	sub.w	r8, r2, r8
   1620c:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   16210:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   16214:	4b86      	ldr	r3, [pc, #536]	; (16430 <event_connection_prepare+0x1530>)
   16216:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   1621a:	f7f8 fffc 	bl	f216 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   1621e:	4440      	add	r0, r8
   16220:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   16222:	28ff      	cmp	r0, #255	; 0xff
   16224:	d84c      	bhi.n	162c0 <event_connection_prepare+0x13c0>
		if (_radio.packet_rx_data_count != free_count_rx) {
   16226:	4b82      	ldr	r3, [pc, #520]	; (16430 <event_connection_prepare+0x1530>)
   16228:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   1622c:	4298      	cmp	r0, r3
   1622e:	d14d      	bne.n	162cc <event_connection_prepare+0x13cc>
		conn->llcp_length.ack = conn->llcp_length.req;
   16230:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   16234:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->procedure_expire = 0;
   16238:	2100      	movs	r1, #0
   1623a:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
   1623e:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 16430 <event_connection_prepare+0x1530>
   16242:	f8d8 3110 	ldr.w	r3, [r8, #272]	; 0x110
   16246:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1624a:	f361 02c3 	bfi	r2, r1, #3, #1
   1624e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
   16252:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   16256:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
   16258:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
   1625c:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
   1625e:	f8d8 0108 	ldr.w	r0, [r8, #264]	; 0x108
   16262:	f7f8 ffd8 	bl	f216 <mem_free_count_get>
		if (_radio.advertiser.conn) {
   16266:	f8d8 30c8 	ldr.w	r3, [r8, #200]	; 0xc8
   1626a:	b10b      	cbz	r3, 16270 <event_connection_prepare+0x1370>
			free_count_conn++;
   1626c:	3001      	adds	r0, #1
   1626e:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
   16270:	4b6f      	ldr	r3, [pc, #444]	; (16430 <event_connection_prepare+0x1530>)
   16272:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   16276:	b10b      	cbz	r3, 1627c <event_connection_prepare+0x137c>
			free_count_conn++;
   16278:	3001      	adds	r0, #1
   1627a:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   1627c:	f8b4 9030 	ldrh.w	r9, [r4, #48]	; 0x30
   16280:	f109 090e 	add.w	r9, r9, #14
   16284:	fa1f f989 	uxth.w	r9, r9
   16288:	f029 0903 	bic.w	r9, r9, #3
   1628c:	fa1f f989 	uxth.w	r9, r9
		if (((free_count_conn + 1) == _radio.connection_count) ||
   16290:	3001      	adds	r0, #1
   16292:	4b67      	ldr	r3, [pc, #412]	; (16430 <event_connection_prepare+0x1530>)
   16294:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   16298:	4298      	cmp	r0, r3
   1629a:	d038      	beq.n	1630e <event_connection_prepare+0x140e>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
   1629c:	4b64      	ldr	r3, [pc, #400]	; (16430 <event_connection_prepare+0x1530>)
   1629e:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
		if (((free_count_conn + 1) == _radio.connection_count) ||
   162a2:	4599      	cmp	r9, r3
   162a4:	d833      	bhi.n	1630e <event_connection_prepare+0x140e>
   162a6:	e066      	b.n	16376 <event_connection_prepare+0x1476>
		return (_radio.packet_rx_count -
   162a8:	4b61      	ldr	r3, [pc, #388]	; (16430 <event_connection_prepare+0x1530>)
   162aa:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   162ae:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   162b2:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   162b6:	fa52 f888 	uxtab	r8, r2, r8
   162ba:	fa5f f888 	uxtb.w	r8, r8
   162be:	e7a7      	b.n	16210 <event_connection_prepare+0x1310>
		LL_ASSERT(free_count_rx <= 0xFF);
   162c0:	4040      	eors	r0, r0
   162c2:	f380 8811 	msr	BASEPRI, r0
   162c6:	f04f 0004 	mov.w	r0, #4
   162ca:	df02      	svc	2
			LL_ASSERT(0);
   162cc:	4040      	eors	r0, r0
   162ce:	f380 8811 	msr	BASEPRI, r0
   162d2:	f04f 0004 	mov.w	r0, #4
   162d6:	df02      	svc	2
					_radio.packet_rx_acquire -= 1;
   162d8:	3b01      	subs	r3, #1
   162da:	4a55      	ldr	r2, [pc, #340]	; (16430 <event_connection_prepare+0x1530>)
   162dc:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   162e0:	4f53      	ldr	r7, [pc, #332]	; (16430 <event_connection_prepare+0x1530>)
   162e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
						_radio.packet_rx_acquire];
   162e6:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   162ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
				mem_release(node_rx->hdr.onion.link,
   162ee:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   162f2:	6818      	ldr	r0, [r3, #0]
   162f4:	f7f8 ff77 	bl	f1e6 <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
   162f8:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
   162fc:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
   16300:	3a01      	subs	r2, #1
   16302:	4293      	cmp	r3, r2
   16304:	da14      	bge.n	16330 <event_connection_prepare+0x1430>
				_radio.link_rx_data_quota++;
   16306:	3301      	adds	r3, #1
   16308:	4a49      	ldr	r2, [pc, #292]	; (16430 <event_connection_prepare+0x1530>)
   1630a:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
			while (_radio.packet_rx_acquire !=
   1630e:	4a48      	ldr	r2, [pc, #288]	; (16430 <event_connection_prepare+0x1530>)
   16310:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
				_radio.packet_rx_last) {
   16314:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   16318:	b2d2      	uxtb	r2, r2
			while (_radio.packet_rx_acquire !=
   1631a:	4293      	cmp	r3, r2
   1631c:	d00e      	beq.n	1633c <event_connection_prepare+0x143c>
				if (_radio.packet_rx_acquire == 0) {
   1631e:	2b00      	cmp	r3, #0
   16320:	d1da      	bne.n	162d8 <event_connection_prepare+0x13d8>
						_radio.packet_rx_count - 1;
   16322:	4a43      	ldr	r2, [pc, #268]	; (16430 <event_connection_prepare+0x1530>)
   16324:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
   16328:	3b01      	subs	r3, #1
					_radio.packet_rx_acquire =
   1632a:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
   1632e:	e7d7      	b.n	162e0 <event_connection_prepare+0x13e0>
				LL_ASSERT(_radio.link_rx_data_quota <
   16330:	4040      	eors	r0, r0
   16332:	f380 8811 	msr	BASEPRI, r0
   16336:	f04f 0004 	mov.w	r0, #4
   1633a:	df02      	svc	2
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   1633c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1633e:	2b29      	cmp	r3, #41	; 0x29
   16340:	d85f      	bhi.n	16402 <event_connection_prepare+0x1502>
				_radio.packet_rx_data_size =
   16342:	2234      	movs	r2, #52	; 0x34
   16344:	4b3a      	ldr	r3, [pc, #232]	; (16430 <event_connection_prepare+0x1530>)
   16346:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				_radio.packet_rx_data_pool_size /
   1634a:	4b39      	ldr	r3, [pc, #228]	; (16430 <event_connection_prepare+0x1530>)
   1634c:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
				_radio.packet_rx_data_size;
   16350:	f8b3 1134 	ldrh.w	r1, [r3, #308]	; 0x134
			_radio.packet_rx_data_count =
   16354:	fbb2 f2f1 	udiv	r2, r2, r1
   16358:	b2d2      	uxtb	r2, r2
   1635a:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
			LL_ASSERT(_radio.packet_rx_data_count);
   1635e:	2a00      	cmp	r2, #0
   16360:	d053      	beq.n	1640a <event_connection_prepare+0x150a>
			mem_init(_radio.pkt_rx_data_pool,
   16362:	4833      	ldr	r0, [pc, #204]	; (16430 <event_connection_prepare+0x1530>)
   16364:	f500 7396 	add.w	r3, r0, #300	; 0x12c
   16368:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
   1636c:	f7f8 fefa 	bl	f164 <mem_init>
			packet_rx_allocate(4);
   16370:	2004      	movs	r0, #4
   16372:	f7fb fc59 	bl	11c28 <packet_rx_allocate>
	if (_radio.packet_rx_acquire >=
   16376:	4b2e      	ldr	r3, [pc, #184]	; (16430 <event_connection_prepare+0x1530>)
   16378:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1637c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16380:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   16382:	429a      	cmp	r2, r3
   16384:	d347      	bcc.n	16416 <event_connection_prepare+0x1516>
			_radio.packet_rx_last);
   16386:	4b2a      	ldr	r3, [pc, #168]	; (16430 <event_connection_prepare+0x1530>)
   16388:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1638c:	1ad3      	subs	r3, r2, r3
   1638e:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   16390:	2b01      	cmp	r3, #1
   16392:	d94a      	bls.n	1642a <event_connection_prepare+0x152a>
	return _radio.packet_rx[_radio.packet_rx_last];
   16394:	4b26      	ldr	r3, [pc, #152]	; (16430 <event_connection_prepare+0x1530>)
   16396:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1639a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1639e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   163a2:	2b00      	cmp	r3, #0
   163a4:	d04a      	beq.n	1643c <event_connection_prepare+0x153c>
		node_rx->hdr.handle = conn->handle;
   163a6:	8c22      	ldrh	r2, [r4, #32]
   163a8:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   163aa:	2201      	movs	r2, #1
   163ac:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   163ae:	7a1a      	ldrb	r2, [r3, #8]
   163b0:	f042 0203 	orr.w	r2, r2, #3
   163b4:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
   163b6:	2209      	movs	r2, #9
   163b8:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   163ba:	2215      	movs	r2, #21
   163bc:	72da      	strb	r2, [r3, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   163be:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   163c0:	819a      	strh	r2, [r3, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   163c2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   163c4:	821a      	strh	r2, [r3, #16]
		lr->max_rx_time = conn->max_rx_time;
   163c6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   163c8:	81da      	strh	r2, [r3, #14]
		lr->max_tx_time = conn->max_tx_time;
   163ca:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   163cc:	825a      	strh	r2, [r3, #18]
		packet_rx_enqueue();
   163ce:	f7fd ff35 	bl	1423c <packet_rx_enqueue>
	event_common_prepare(ticks_at_expire, remainder,
   163d2:	1d23      	adds	r3, r4, #4
   163d4:	68a1      	ldr	r1, [r4, #8]
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   163d6:	8c22      	ldrh	r2, [r4, #32]
	event_common_prepare(ticks_at_expire, remainder,
   163d8:	3207      	adds	r2, #7
   163da:	b2d2      	uxtb	r2, r2
   163dc:	f994 001d 	ldrsb.w	r0, [r4, #29]
   163e0:	2800      	cmp	r0, #0
   163e2:	db37      	blt.n	16454 <event_connection_prepare+0x1554>
   163e4:	4814      	ldr	r0, [pc, #80]	; (16438 <event_connection_prepare+0x1538>)
   163e6:	9403      	str	r4, [sp, #12]
   163e8:	9002      	str	r0, [sp, #8]
   163ea:	9201      	str	r2, [sp, #4]
   163ec:	9100      	str	r1, [sp, #0]
   163ee:	4622      	mov	r2, r4
   163f0:	990a      	ldr	r1, [sp, #40]	; 0x28
   163f2:	4630      	mov	r0, r6
   163f4:	f7fe fc7e 	bl	14cf4 <event_common_prepare>
	conn->event_counter = event_counter + 1;
   163f8:	3501      	adds	r5, #1
   163fa:	8465      	strh	r5, [r4, #34]	; 0x22
}
   163fc:	b00f      	add	sp, #60	; 0x3c
   163fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				_radio.packet_rx_data_size =
   16402:	4b0b      	ldr	r3, [pc, #44]	; (16430 <event_connection_prepare+0x1530>)
   16404:	f8a3 9134 	strh.w	r9, [r3, #308]	; 0x134
   16408:	e79f      	b.n	1634a <event_connection_prepare+0x144a>
			LL_ASSERT(_radio.packet_rx_data_count);
   1640a:	4040      	eors	r0, r0
   1640c:	f380 8811 	msr	BASEPRI, r0
   16410:	f04f 0004 	mov.w	r0, #4
   16414:	df02      	svc	2
		return (_radio.packet_rx_count -
   16416:	4906      	ldr	r1, [pc, #24]	; (16430 <event_connection_prepare+0x1530>)
   16418:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   1641c:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16420:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   16422:	fa52 f383 	uxtab	r3, r2, r3
   16426:	b2db      	uxtb	r3, r3
   16428:	e7b2      	b.n	16390 <event_connection_prepare+0x1490>
		return 0;
   1642a:	2300      	movs	r3, #0
   1642c:	e7b9      	b.n	163a2 <event_connection_prepare+0x14a2>
   1642e:	bf00      	nop
   16430:	20000fec 	.word	0x20000fec
   16434:	20001144 	.word	0x20001144
   16438:	000168b1 	.word	0x000168b1
		LL_ASSERT(node_rx);
   1643c:	4040      	eors	r0, r0
   1643e:	f380 8811 	msr	BASEPRI, r0
   16442:	f04f 0004 	mov.w	r0, #4
   16446:	df02      	svc	2
		LL_ASSERT(0);
   16448:	4040      	eors	r0, r0
   1644a:	f380 8811 	msr	BASEPRI, r0
   1644e:	f04f 0004 	mov.w	r0, #4
   16452:	df02      	svc	2
	event_common_prepare(ticks_at_expire, remainder,
   16454:	4800      	ldr	r0, [pc, #0]	; (16458 <event_connection_prepare+0x1558>)
   16456:	e7c6      	b.n	163e6 <event_connection_prepare+0x14e6>
   16458:	000169ed 	.word	0x000169ed

0001645c <event_slave_prepare>:
{
   1645c:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   1645e:	f7fe fd4f 	bl	14f00 <event_connection_prepare>
   16462:	bd08      	pop	{r3, pc}

00016464 <event_master_prepare>:
{
   16464:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   16466:	f7fe fd4b 	bl	14f00 <event_connection_prepare>
   1646a:	bd08      	pop	{r3, pc}

0001646c <event_scan_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   1646c:	4b20      	ldr	r3, [pc, #128]	; (164f0 <event_scan_prepare+0x84>)
   1646e:	7b1b      	ldrb	r3, [r3, #12]
   16470:	bb23      	cbnz	r3, 164bc <event_scan_prepare+0x50>
{
   16472:	b530      	push	{r4, r5, lr}
   16474:	b085      	sub	sp, #20
   16476:	4605      	mov	r5, r0
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   16478:	4c1d      	ldr	r4, [pc, #116]	; (164f0 <event_scan_prepare+0x84>)
   1647a:	2306      	movs	r3, #6
   1647c:	7323      	strb	r3, [r4, #12]
	event_common_prepare(ticks_at_expire, remainder,
   1647e:	2200      	movs	r2, #0
   16480:	9203      	str	r2, [sp, #12]
   16482:	4a1c      	ldr	r2, [pc, #112]	; (164f4 <event_scan_prepare+0x88>)
   16484:	9202      	str	r2, [sp, #8]
   16486:	9301      	str	r3, [sp, #4]
   16488:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   1648c:	9300      	str	r3, [sp, #0]
   1648e:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   16492:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
   16496:	f7fe fc2d 	bl	14cf4 <event_common_prepare>
	if (_radio.scanner.conn) {
   1649a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   1649e:	b15b      	cbz	r3, 164b8 <event_scan_prepare+0x4c>
		if (_radio.scanner.hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   164a0:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   164a4:	2b00      	cmp	r3, #0
   164a6:	db0f      	blt.n	164c8 <event_scan_prepare+0x5c>
		s_mfy_sched_after_mstr_free_offset_get.param =
   164a8:	4b13      	ldr	r3, [pc, #76]	; (164f8 <event_scan_prepare+0x8c>)
   164aa:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   164ac:	2201      	movs	r2, #1
   164ae:	4611      	mov	r1, r2
   164b0:	2000      	movs	r0, #0
   164b2:	f7f8 fd3b 	bl	ef2c <mayfly_enqueue>
		LL_ASSERT(!retval);
   164b6:	b9a8      	cbnz	r0, 164e4 <event_scan_prepare+0x78>
}
   164b8:	b005      	add	sp, #20
   164ba:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   164bc:	4040      	eors	r0, r0
   164be:	f380 8811 	msr	BASEPRI, r0
   164c2:	f04f 0004 	mov.w	r0, #4
   164c6:	df02      	svc	2
				_radio.scanner.hdr.ticks_preempt_to_start;
   164c8:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
				_radio.scanner.hdr.ticks_active_to_start :
   164cc:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
				((_radio.scanner.hdr.ticks_xtal_to_start &
   164d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   164d4:	4291      	cmp	r1, r2
   164d6:	bf2c      	ite	cs
   164d8:	ebc3 0301 	rsbcs	r3, r3, r1
   164dc:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
   164e0:	441d      	add	r5, r3
   164e2:	e7e1      	b.n	164a8 <event_scan_prepare+0x3c>
		LL_ASSERT(!retval);
   164e4:	4040      	eors	r0, r0
   164e6:	f380 8811 	msr	BASEPRI, r0
   164ea:	f04f 0004 	mov.w	r0, #4
   164ee:	df02      	svc	2
   164f0:	20000fec 	.word	0x20000fec
   164f4:	00016b89 	.word	0x00016b89
   164f8:	2000bd90 	.word	0x2000bd90
   164fc:	00000000 	.word	0x00000000

00016500 <mayfly_xtal_stop_calc>:
{
   16500:	b530      	push	{r4, r5, lr}
   16502:	b08d      	sub	sp, #52	; 0x34
   16504:	4604      	mov	r4, r0
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   16506:	2302      	movs	r3, #2
   16508:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = 0xff;
   1650a:	23ff      	movs	r3, #255	; 0xff
   1650c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	ticks_to_expire = 0;
   16510:	2300      	movs	r3, #0
   16512:	930a      	str	r3, [sp, #40]	; 0x28
   16514:	e012      	b.n	1653c <mayfly_xtal_stop_calc+0x3c>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   16516:	2101      	movs	r1, #1
   16518:	2000      	movs	r0, #0
   1651a:	f7fa fc71 	bl	10e00 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1651e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16520:	2b02      	cmp	r3, #2
   16522:	d0f8      	beq.n	16516 <mayfly_xtal_stop_calc+0x16>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   16524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16526:	b9cb      	cbnz	r3, 1655c <mayfly_xtal_stop_calc+0x5c>
	} while (ticker_id != 0xff &&
   16528:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
			       _radio.connection_count));
   1652c:	2aff      	cmp	r2, #255	; 0xff
   1652e:	d01b      	beq.n	16568 <mayfly_xtal_stop_calc+0x68>
   16530:	4b8b      	ldr	r3, [pc, #556]	; (16760 <mayfly_xtal_stop_calc+0x260>)
   16532:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		 ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   16536:	3307      	adds	r3, #7
	} while (ticker_id != 0xff &&
   16538:	429a      	cmp	r2, r3
   1653a:	db15      	blt.n	16568 <mayfly_xtal_stop_calc+0x68>
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   1653c:	ab0b      	add	r3, sp, #44	; 0x2c
   1653e:	9302      	str	r3, [sp, #8]
   16540:	4b88      	ldr	r3, [pc, #544]	; (16764 <mayfly_xtal_stop_calc+0x264>)
   16542:	9301      	str	r3, [sp, #4]
   16544:	ab0a      	add	r3, sp, #40	; 0x28
   16546:	9300      	str	r3, [sp, #0]
   16548:	ab09      	add	r3, sp, #36	; 0x24
   1654a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   1654e:	2101      	movs	r1, #1
   16550:	2000      	movs	r0, #0
   16552:	f7fa fbd5 	bl	10d00 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   16556:	2802      	cmp	r0, #2
   16558:	d1e4      	bne.n	16524 <mayfly_xtal_stop_calc+0x24>
   1655a:	e7e0      	b.n	1651e <mayfly_xtal_stop_calc+0x1e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   1655c:	4040      	eors	r0, r0
   1655e:	f380 8811 	msr	BASEPRI, r0
   16562:	f04f 0004 	mov.w	r0, #4
   16566:	df02      	svc	2
	if ((ticker_id != 0xff) &&
   16568:	2aff      	cmp	r2, #255	; 0xff
   1656a:	d002      	beq.n	16572 <mayfly_xtal_stop_calc+0x72>
	    (ticks_to_expire <
   1656c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	if ((ticker_id != 0xff) &&
   1656e:	2ba8      	cmp	r3, #168	; 0xa8
   16570:	d91a      	bls.n	165a8 <mayfly_xtal_stop_calc+0xa8>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   16572:	2100      	movs	r1, #0
   16574:	2001      	movs	r0, #1
   16576:	f7fb fdcd 	bl	12114 <mayfly_xtal_retain>
		if ((ticker_id != 0xff) && (ticker_id >= RADIO_TICKER_ID_ADV)) {
   1657a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   1657e:	1f53      	subs	r3, r2, #5
   16580:	b2db      	uxtb	r3, r3
   16582:	2bf9      	cmp	r3, #249	; 0xf9
   16584:	d80e      	bhi.n	165a4 <mayfly_xtal_stop_calc+0xa4>
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   16586:	2a06      	cmp	r2, #6
   16588:	f200 80d1 	bhi.w	1672e <mayfly_xtal_stop_calc+0x22e>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   1658c:	2a05      	cmp	r2, #5
   1658e:	f000 80de 	beq.w	1674e <mayfly_xtal_stop_calc+0x24e>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   16592:	2a06      	cmp	r2, #6
   16594:	f040 80d5 	bne.w	16742 <mayfly_xtal_stop_calc+0x242>
				hdr = &_radio.scanner.hdr;
   16598:	4873      	ldr	r0, [pc, #460]	; (16768 <mayfly_xtal_stop_calc+0x268>)
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
   1659a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   1659e:	2101      	movs	r1, #1
   165a0:	f7fe fb80 	bl	14ca4 <prepare_normal_set>
}
   165a4:	b00d      	add	sp, #52	; 0x34
   165a6:	bd30      	pop	{r4, r5, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
   165a8:	2101      	movs	r1, #1
   165aa:	4608      	mov	r0, r1
   165ac:	f7fb fdb2 	bl	12114 <mayfly_xtal_retain>
		if (ticker_id >= RADIO_TICKER_ID_ADV) {
   165b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   165b4:	2b04      	cmp	r3, #4
   165b6:	d9f5      	bls.n	165a4 <mayfly_xtal_stop_calc+0xa4>
			u8_t ticker_id_current = ((u32_t)params & 0xff);
   165b8:	b2e4      	uxtb	r4, r4
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   165ba:	2b06      	cmp	r3, #6
   165bc:	d82a      	bhi.n	16614 <mayfly_xtal_stop_calc+0x114>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   165be:	2b05      	cmp	r3, #5
   165c0:	d03a      	beq.n	16638 <mayfly_xtal_stop_calc+0x138>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   165c2:	2b06      	cmp	r3, #6
   165c4:	d132      	bne.n	1662c <mayfly_xtal_stop_calc+0x12c>
				hdr = &_radio.scanner.hdr;
   165c6:	4968      	ldr	r1, [pc, #416]	; (16768 <mayfly_xtal_stop_calc+0x268>)
			struct connection *conn = NULL;
   165c8:	2500      	movs	r5, #0
				hdr->ticks_preempt_to_start;
   165ca:	688b      	ldr	r3, [r1, #8]
				hdr->ticks_active_to_start :
   165cc:	684a      	ldr	r2, [r1, #4]
			ticks_prepare_to_start =
   165ce:	429a      	cmp	r2, r3
   165d0:	bf38      	it	cc
   165d2:	461a      	movcc	r2, r3
			if ((hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) != 0) {
   165d4:	680b      	ldr	r3, [r1, #0]
   165d6:	2b00      	cmp	r3, #0
   165d8:	db31      	blt.n	1663e <mayfly_xtal_stop_calc+0x13e>
				if (hdr->ticks_xtal_to_start >
   165da:	429a      	cmp	r2, r3
   165dc:	d336      	bcc.n	1664c <mayfly_xtal_stop_calc+0x14c>
			if (ticker_id_current >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   165de:	2c06      	cmp	r4, #6
   165e0:	d84e      	bhi.n	16680 <mayfly_xtal_stop_calc+0x180>
			struct connection *conn_curr = NULL;
   165e2:	2400      	movs	r4, #0
			if ((conn) && (conn_curr) &&
   165e4:	2d00      	cmp	r5, #0
   165e6:	d0dd      	beq.n	165a4 <mayfly_xtal_stop_calc+0xa4>
   165e8:	2c00      	cmp	r4, #0
   165ea:	d0db      	beq.n	165a4 <mayfly_xtal_stop_calc+0xa4>
			    (conn_curr->conn_interval == conn->conn_interval)) {
   165ec:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   165ee:	8caa      	ldrh	r2, [r5, #36]	; 0x24
			if ((conn) && (conn_curr) &&
   165f0:	4293      	cmp	r3, r2
   165f2:	d1d7      	bne.n	165a4 <mayfly_xtal_stop_calc+0xa4>
					TICKER_US_TO_TICKS(conn->conn_interval * 1250);
   165f4:	b292      	uxth	r2, r2
   165f6:	485d      	ldr	r0, [pc, #372]	; (1676c <mayfly_xtal_stop_calc+0x26c>)
   165f8:	fba2 0100 	umull	r0, r1, r2, r0
   165fc:	f240 1323 	movw	r3, #291	; 0x123
   16600:	fb03 1102 	mla	r1, r3, r2, r1
   16604:	a354      	add	r3, pc, #336	; (adr r3, 16758 <mayfly_xtal_stop_calc+0x258>)
   16606:	e9d3 2300 	ldrd	r2, r3, [r3]
   1660a:	f7ea fd77 	bl	10fc <__aeabi_uldivmod>
				u32_t ticks_conn_interval =
   1660e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				while (ticks_to_expire > ticks_conn_interval) {
   16612:	e050      	b.n	166b6 <mayfly_xtal_stop_calc+0x1b6>
				conn = mem_get(_radio.conn_pool,
   16614:	3b07      	subs	r3, #7
   16616:	b29a      	uxth	r2, r3
   16618:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1661c:	4b50      	ldr	r3, [pc, #320]	; (16760 <mayfly_xtal_stop_calc+0x260>)
   1661e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   16622:	f7f8 fe01 	bl	f228 <mem_get>
   16626:	4605      	mov	r5, r0
				hdr = &conn->hdr;
   16628:	4601      	mov	r1, r0
   1662a:	e7ce      	b.n	165ca <mayfly_xtal_stop_calc+0xca>
				LL_ASSERT(0);
   1662c:	4040      	eors	r0, r0
   1662e:	f380 8811 	msr	BASEPRI, r0
   16632:	f04f 0004 	mov.w	r0, #4
   16636:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   16638:	494d      	ldr	r1, [pc, #308]	; (16770 <mayfly_xtal_stop_calc+0x270>)
			struct connection *conn = NULL;
   1663a:	2500      	movs	r5, #0
   1663c:	e7c5      	b.n	165ca <mayfly_xtal_stop_calc+0xca>
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   1663e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						     (~((u32_t)1 << 31))) -
   16642:	1ad3      	subs	r3, r2, r3
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   16644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16646:	4413      	add	r3, r2
   16648:	930a      	str	r3, [sp, #40]	; 0x28
   1664a:	e7c8      	b.n	165de <mayfly_xtal_stop_calc+0xde>
					u32_t ticks_drift_plus =
   1664c:	1a9b      	subs	r3, r3, r2
						ticker_update(
   1664e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   16652:	b29b      	uxth	r3, r3
					ticker_status =
   16654:	9106      	str	r1, [sp, #24]
   16656:	4947      	ldr	r1, [pc, #284]	; (16774 <mayfly_xtal_stop_calc+0x274>)
   16658:	9105      	str	r1, [sp, #20]
   1665a:	2000      	movs	r0, #0
   1665c:	9004      	str	r0, [sp, #16]
   1665e:	9003      	str	r0, [sp, #12]
   16660:	9302      	str	r3, [sp, #8]
   16662:	9001      	str	r0, [sp, #4]
   16664:	9000      	str	r0, [sp, #0]
   16666:	2101      	movs	r1, #1
   16668:	f7fa fac0 	bl	10bec <ticker_update>
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
   1666c:	2800      	cmp	r0, #0
   1666e:	d0b6      	beq.n	165de <mayfly_xtal_stop_calc+0xde>
   16670:	2802      	cmp	r0, #2
   16672:	d0b4      	beq.n	165de <mayfly_xtal_stop_calc+0xde>
   16674:	4040      	eors	r0, r0
   16676:	f380 8811 	msr	BASEPRI, r0
   1667a:	f04f 0004 	mov.w	r0, #4
   1667e:	df02      	svc	2
					mem_get(_radio.conn_pool,
   16680:	3c07      	subs	r4, #7
				conn_curr =
   16682:	b2a2      	uxth	r2, r4
   16684:	f44f 71aa 	mov.w	r1, #340	; 0x154
   16688:	4b35      	ldr	r3, [pc, #212]	; (16760 <mayfly_xtal_stop_calc+0x260>)
   1668a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   1668e:	f7f8 fdcb 	bl	f228 <mem_get>
   16692:	4604      	mov	r4, r0
					conn_curr->hdr.ticks_preempt_to_start;
   16694:	6883      	ldr	r3, [r0, #8]
					conn_curr->hdr.ticks_active_to_start :
   16696:	6842      	ldr	r2, [r0, #4]
				ticks_prepare_to_start =
   16698:	429a      	cmp	r2, r3
   1669a:	bf38      	it	cc
   1669c:	461a      	movcc	r2, r3
				if ((conn_curr->hdr.ticks_xtal_to_start &
   1669e:	6803      	ldr	r3, [r0, #0]
   166a0:	2b00      	cmp	r3, #0
   166a2:	da9f      	bge.n	165e4 <mayfly_xtal_stop_calc+0xe4>
						((conn_curr->hdr.ticks_xtal_to_start &
   166a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						  (~((u32_t)1 << 31))) -
   166a8:	1a9b      	subs	r3, r3, r2
					ticks_to_expire +=
   166aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   166ac:	4413      	add	r3, r2
   166ae:	930a      	str	r3, [sp, #40]	; 0x28
   166b0:	e798      	b.n	165e4 <mayfly_xtal_stop_calc+0xe4>
					ticks_to_expire -= ticks_conn_interval;
   166b2:	1a1b      	subs	r3, r3, r0
   166b4:	930a      	str	r3, [sp, #40]	; 0x28
				while (ticks_to_expire > ticks_conn_interval) {
   166b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   166b8:	4298      	cmp	r0, r3
   166ba:	d3fa      	bcc.n	166b2 <mayfly_xtal_stop_calc+0x1b2>
   166bc:	f994 101d 	ldrsb.w	r1, [r4, #29]
				if (conn_curr->role && !conn->role &&
   166c0:	2900      	cmp	r1, #0
   166c2:	db1c      	blt.n	166fe <mayfly_xtal_stop_calc+0x1fe>
				} else if (!conn_curr->role && conn->role &&
   166c4:	2900      	cmp	r1, #0
   166c6:	f6ff af6d 	blt.w	165a4 <mayfly_xtal_stop_calc+0xa4>
   166ca:	f995 201d 	ldrsb.w	r2, [r5, #29]
   166ce:	2a00      	cmp	r2, #0
   166d0:	f6bf af68 	bge.w	165a4 <mayfly_xtal_stop_calc+0xa4>
					     conn_curr->hdr.ticks_slot))) {
   166d4:	68e2      	ldr	r2, [r4, #12]
								625) +
   166d6:	323b      	adds	r2, #59	; 0x3b
				} else if (!conn_curr->role && conn->role &&
   166d8:	4293      	cmp	r3, r2
   166da:	f4bf af63 	bcs.w	165a4 <mayfly_xtal_stop_calc+0xa4>
					status = conn_update_req(conn);
   166de:	4628      	mov	r0, r5
   166e0:	f7fb f852 	bl	11788 <conn_update_req>
					if ((status == 2) &&
   166e4:	2802      	cmp	r0, #2
   166e6:	f47f af5d 	bne.w	165a4 <mayfly_xtal_stop_calc+0xa4>
   166ea:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   166ee:	f013 0f02 	tst.w	r3, #2
   166f2:	f43f af57 	beq.w	165a4 <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn_curr);
   166f6:	4620      	mov	r0, r4
   166f8:	f7fb f846 	bl	11788 <conn_update_req>
   166fc:	e752      	b.n	165a4 <mayfly_xtal_stop_calc+0xa4>
				if (conn_curr->role && !conn->role &&
   166fe:	f995 201d 	ldrsb.w	r2, [r5, #29]
   16702:	2a00      	cmp	r2, #0
   16704:	dbde      	blt.n	166c4 <mayfly_xtal_stop_calc+0x1c4>
				      conn_curr->hdr.ticks_slot))) {
   16706:	68e2      	ldr	r2, [r4, #12]
							 625) +
   16708:	323b      	adds	r2, #59	; 0x3b
				if (conn_curr->role && !conn->role &&
   1670a:	4293      	cmp	r3, r2
   1670c:	d2da      	bcs.n	166c4 <mayfly_xtal_stop_calc+0x1c4>
					status = conn_update_req(conn_curr);
   1670e:	4620      	mov	r0, r4
   16710:	f7fb f83a 	bl	11788 <conn_update_req>
					if ((status == 2) &&
   16714:	2802      	cmp	r0, #2
   16716:	f47f af45 	bne.w	165a4 <mayfly_xtal_stop_calc+0xa4>
   1671a:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   1671e:	f013 0f02 	tst.w	r3, #2
   16722:	f43f af3f 	beq.w	165a4 <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn);
   16726:	4628      	mov	r0, r5
   16728:	f7fb f82e 	bl	11788 <conn_update_req>
   1672c:	e73a      	b.n	165a4 <mayfly_xtal_stop_calc+0xa4>
				conn = mem_get(_radio.conn_pool,
   1672e:	3a07      	subs	r2, #7
   16730:	b292      	uxth	r2, r2
   16732:	f44f 71aa 	mov.w	r1, #340	; 0x154
   16736:	4b0a      	ldr	r3, [pc, #40]	; (16760 <mayfly_xtal_stop_calc+0x260>)
   16738:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   1673c:	f7f8 fd74 	bl	f228 <mem_get>
   16740:	e72b      	b.n	1659a <mayfly_xtal_stop_calc+0x9a>
				LL_ASSERT(0);
   16742:	4040      	eors	r0, r0
   16744:	f380 8811 	msr	BASEPRI, r0
   16748:	f04f 0004 	mov.w	r0, #4
   1674c:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   1674e:	4808      	ldr	r0, [pc, #32]	; (16770 <mayfly_xtal_stop_calc+0x270>)
   16750:	e723      	b.n	1659a <mayfly_xtal_stop_calc+0x9a>
   16752:	bf00      	nop
   16754:	f3af 8000 	nop.w
   16758:	1afd498d 	.word	0x1afd498d
   1675c:	00000007 	.word	0x00000007
   16760:	20000fec 	.word	0x20000fec
   16764:	00011535 	.word	0x00011535
   16768:	200010b8 	.word	0x200010b8
   1676c:	09ce5400 	.word	0x09ce5400
   16770:	20001000 	.word	0x20001000
   16774:	00011561 	.word	0x00011561

00016778 <preempt_calc>:
{
   16778:	b570      	push	{r4, r5, r6, lr}
   1677a:	4605      	mov	r5, r0
   1677c:	460e      	mov	r6, r1
   1677e:	4614      	mov	r4, r2
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
   16780:	f7fa fb4e 	bl	10e20 <ticker_ticks_now_get>
	u32_t diff =
   16784:	4621      	mov	r1, r4
   16786:	f7fa fb4f 	bl	10e28 <ticker_ticks_diff_get>
	diff += 3;
   1678a:	1cc4      	adds	r4, r0, #3
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
   1678c:	2c09      	cmp	r4, #9
   1678e:	d801      	bhi.n	16794 <preempt_calc+0x1c>
	return 0;
   16790:	2000      	movs	r0, #0
   16792:	bd70      	pop	{r4, r5, r6, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
   16794:	2100      	movs	r1, #0
   16796:	4608      	mov	r0, r1
   16798:	f7fb fcbc 	bl	12114 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
   1679c:	4632      	mov	r2, r6
   1679e:	2100      	movs	r1, #0
   167a0:	4628      	mov	r0, r5
   167a2:	f7fe fa7f 	bl	14ca4 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
   167a6:	68ab      	ldr	r3, [r5, #8]
   167a8:	441c      	add	r4, r3
		if (diff <
   167aa:	2c26      	cmp	r4, #38	; 0x26
   167ac:	d802      	bhi.n	167b4 <preempt_calc+0x3c>
			hdr->ticks_preempt_to_start = diff;
   167ae:	60ac      	str	r4, [r5, #8]
		return 1;
   167b0:	2001      	movs	r0, #1
   167b2:	bd70      	pop	{r4, r5, r6, pc}
   167b4:	2001      	movs	r0, #1
}
   167b6:	bd70      	pop	{r4, r5, r6, pc}

000167b8 <event_adv>:
{
   167b8:	b538      	push	{r3, r4, r5, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   167ba:	4b3b      	ldr	r3, [pc, #236]	; (168a8 <event_adv+0xf0>)
   167bc:	7bdb      	ldrb	r3, [r3, #15]
   167be:	2b00      	cmp	r3, #0
   167c0:	d142      	bne.n	16848 <event_adv+0x90>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   167c2:	4b39      	ldr	r3, [pc, #228]	; (168a8 <event_adv+0xf0>)
   167c4:	7b1b      	ldrb	r3, [r3, #12]
   167c6:	b2db      	uxtb	r3, r3
   167c8:	2b05      	cmp	r3, #5
   167ca:	d143      	bne.n	16854 <event_adv+0x9c>
   167cc:	4605      	mov	r5, r0
	_radio.role = ROLE_ADV;
   167ce:	4c36      	ldr	r4, [pc, #216]	; (168a8 <event_adv+0xf0>)
   167d0:	2101      	movs	r1, #1
   167d2:	73e1      	strb	r1, [r4, #15]
	_radio.ticker_id_prepare = 0;
   167d4:	2300      	movs	r3, #0
   167d6:	7323      	strb	r3, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
   167d8:	2305      	movs	r3, #5
   167da:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   167dc:	6060      	str	r0, [r4, #4]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   167de:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   167e2:	f000 0007 	and.w	r0, r0, #7
   167e6:	f7fb fd5b 	bl	122a0 <adv_scan_configure>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
   167ea:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   167ee:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   167f2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   167f6:	f363 0243 	bfi	r2, r3, #1, #3
   167fa:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	adv_setup();
   167fe:	f7fc f841 	bl	12884 <adv_setup>
	if (ctrl_rl_enabled()) {
   16802:	f003 fa43 	bl	19c8c <ctrl_rl_enabled>
   16806:	bb58      	cbnz	r0, 16860 <event_adv+0xa8>
	if (_radio.advertiser.filter_policy) {
   16808:	4b27      	ldr	r3, [pc, #156]	; (168a8 <event_adv+0xf0>)
   1680a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1680e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   16812:	d134      	bne.n	1687e <event_adv+0xc6>
	remainder_us = radio_tmr_start(1,
   16814:	4c24      	ldr	r4, [pc, #144]	; (168a8 <event_adv+0xf0>)
   16816:	68a2      	ldr	r2, [r4, #8]
   16818:	f105 0109 	add.w	r1, r5, #9
   1681c:	2001      	movs	r0, #1
   1681e:	f7f8 ffe9 	bl	f7f4 <radio_tmr_start>
	radio_tmr_end_capture();
   16822:	f7f9 f899 	bl	f958 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   16826:	462a      	mov	r2, r5
   16828:	2105      	movs	r1, #5
   1682a:	f104 0014 	add.w	r0, r4, #20
   1682e:	f7ff ffa3 	bl	16778 <preempt_calc>
   16832:	bb68      	cbnz	r0, 16890 <event_adv+0xd8>
		ticker_status =
   16834:	2300      	movs	r3, #0
   16836:	4a1d      	ldr	r2, [pc, #116]	; (168ac <event_adv+0xf4>)
   16838:	4619      	mov	r1, r3
   1683a:	4618      	mov	r0, r3
   1683c:	f7fa faa4 	bl	10d88 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16840:	b108      	cbz	r0, 16846 <event_adv+0x8e>
   16842:	2802      	cmp	r0, #2
   16844:	d129      	bne.n	1689a <event_adv+0xe2>
   16846:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(_radio.role == ROLE_NONE);
   16848:	4040      	eors	r0, r0
   1684a:	f380 8811 	msr	BASEPRI, r0
   1684e:	f04f 0004 	mov.w	r0, #4
   16852:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   16854:	4040      	eors	r0, r0
   16856:	f380 8811 	msr	BASEPRI, r0
   1685a:	f04f 0004 	mov.w	r0, #4
   1685e:	df02      	svc	2
			ctrl_filter_get(!!(_radio.advertiser.filter_policy));
   16860:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   16864:	f013 0fc0 	tst.w	r3, #192	; 0xc0
		struct ll_filter *filter =
   16868:	bf14      	ite	ne
   1686a:	2001      	movne	r0, #1
   1686c:	2000      	moveq	r0, #0
   1686e:	f003 f80f 	bl	19890 <ctrl_filter_get>
		radio_filter_configure(filter->enable_bitmask,
   16872:	1c82      	adds	r2, r0, #2
   16874:	7841      	ldrb	r1, [r0, #1]
   16876:	7800      	ldrb	r0, [r0, #0]
   16878:	f7f8 ff3e 	bl	f6f8 <radio_filter_configure>
   1687c:	e7ca      	b.n	16814 <event_adv+0x5c>
		struct ll_filter *wl = ctrl_filter_get(true);
   1687e:	2001      	movs	r0, #1
   16880:	f003 f806 	bl	19890 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   16884:	1c82      	adds	r2, r0, #2
   16886:	7841      	ldrb	r1, [r0, #1]
   16888:	7800      	ldrb	r0, [r0, #0]
   1688a:	f7f8 ff35 	bl	f6f8 <radio_filter_configure>
   1688e:	e7c1      	b.n	16814 <event_adv+0x5c>
		_radio.state = STATE_STOP;
   16890:	2204      	movs	r2, #4
   16892:	7422      	strb	r2, [r4, #16]
		radio_disable();
   16894:	f7f8 fea0 	bl	f5d8 <radio_disable>
   16898:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1689a:	4040      	eors	r0, r0
   1689c:	f380 8811 	msr	BASEPRI, r0
   168a0:	f04f 0004 	mov.w	r0, #4
   168a4:	df02      	svc	2
   168a6:	bf00      	nop
   168a8:	20000fec 	.word	0x20000fec
   168ac:	00011d61 	.word	0x00011d61

000168b0 <event_master>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   168b0:	4a4c      	ldr	r2, [pc, #304]	; (169e4 <event_master+0x134>)
   168b2:	7bd2      	ldrb	r2, [r2, #15]
   168b4:	2a00      	cmp	r2, #0
   168b6:	d174      	bne.n	169a2 <event_master+0xf2>
{
   168b8:	b530      	push	{r4, r5, lr}
   168ba:	b085      	sub	sp, #20
	LL_ASSERT(_radio.ticker_id_prepare ==
   168bc:	4a49      	ldr	r2, [pc, #292]	; (169e4 <event_master+0x134>)
   168be:	7b12      	ldrb	r2, [r2, #12]
   168c0:	b2d2      	uxtb	r2, r2
   168c2:	8c19      	ldrh	r1, [r3, #32]
   168c4:	1dcc      	adds	r4, r1, #7
   168c6:	42a2      	cmp	r2, r4
   168c8:	d171      	bne.n	169ae <event_master+0xfe>
   168ca:	461c      	mov	r4, r3
   168cc:	4605      	mov	r5, r0
	_radio.role = ROLE_MASTER;
   168ce:	4b45      	ldr	r3, [pc, #276]	; (169e4 <event_master+0x134>)
   168d0:	2204      	movs	r2, #4
   168d2:	73da      	strb	r2, [r3, #15]
	_radio.state = STATE_TX;
   168d4:	2002      	movs	r0, #2
   168d6:	7418      	strb	r0, [r3, #16]
	_radio.ticker_id_prepare = 0;
   168d8:	2200      	movs	r2, #0
   168da:	731a      	strb	r2, [r3, #12]
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   168dc:	3107      	adds	r1, #7
   168de:	b2c9      	uxtb	r1, r1
	_radio.ticker_id_event =
   168e0:	7359      	strb	r1, [r3, #13]
	_radio.ticks_anchor = ticks_at_expire;
   168e2:	605d      	str	r5, [r3, #4]
	_radio.packet_counter = 0;
   168e4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	_radio.crc_expire = 0;
   168e8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
	_radio.conn_curr = conn;
   168ec:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   168f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   168f2:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   168f4:	8522      	strh	r2, [r4, #40]	; 0x28
	packet_tx_enqueue(2);
   168f6:	f7fb fd69 	bl	123cc <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
   168fa:	a903      	add	r1, sp, #12
   168fc:	4620      	mov	r0, r4
   168fe:	f7fb fed3 	bl	126a8 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
   16902:	9b03      	ldr	r3, [sp, #12]
   16904:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
   16908:	781a      	ldrb	r2, [r3, #0]
   1690a:	f361 02c3 	bfi	r2, r1, #3, #1
   1690e:	701a      	strb	r2, [r3, #0]
	pdu_data_tx->nesn = conn->nesn;
   16910:	9a03      	ldr	r2, [sp, #12]
   16912:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   16916:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1691a:	7811      	ldrb	r1, [r2, #0]
   1691c:	f363 0182 	bfi	r1, r3, #2, #1
   16920:	7011      	strb	r1, [r2, #0]
	connection_configure(conn);
   16922:	4620      	mov	r0, r4
   16924:	f7fb fce0 	bl	122e8 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   16928:	2096      	movs	r0, #150	; 0x96
   1692a:	f7f8 ff5d 	bl	f7e8 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
   1692e:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16932:	f000 0007 	and.w	r0, r0, #7
   16936:	f7f8 fea5 	bl	f684 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
   1693a:	9903      	ldr	r1, [sp, #12]
   1693c:	4620      	mov	r0, r4
   1693e:	f7fb ff49 	bl	127d4 <tx_packet_set>
	if (conn->data_chan_sel) {
   16942:	7f63      	ldrb	r3, [r4, #29]
   16944:	f013 0f40 	tst.w	r3, #64	; 0x40
   16948:	d037      	beq.n	169ba <event_master+0x10a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   1694a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   1694c:	3801      	subs	r0, #1
   1694e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16952:	f104 0217 	add.w	r2, r4, #23
   16956:	8be1      	ldrh	r1, [r4, #30]
   16958:	b280      	uxth	r0, r0
   1695a:	f7fa fe8b 	bl	11674 <chan_sel_2>
	chan_set(data_chan_use);
   1695e:	f7fb ff65 	bl	1282c <chan_set>
		remainder_us = radio_tmr_start(1,
   16962:	4b20      	ldr	r3, [pc, #128]	; (169e4 <event_master+0x134>)
   16964:	689a      	ldr	r2, [r3, #8]
   16966:	f105 0109 	add.w	r1, r5, #9
   1696a:	2001      	movs	r0, #1
   1696c:	f7f8 ff42 	bl	f7f4 <radio_tmr_start>
		radio_tmr_end_capture();
   16970:	f7f8 fff2 	bl	f958 <radio_tmr_end_capture>
				      conn->handle), ticks_at_expire)) {
   16974:	8c21      	ldrh	r1, [r4, #32]
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   16976:	3107      	adds	r1, #7
   16978:	462a      	mov	r2, r5
   1697a:	b2c9      	uxtb	r1, r1
   1697c:	4620      	mov	r0, r4
   1697e:	f7ff fefb 	bl	16778 <preempt_calc>
	if (0 !=
   16982:	bb38      	cbnz	r0, 169d4 <event_master+0x124>
		ticker_status =
   16984:	2300      	movs	r3, #0
   16986:	4a18      	ldr	r2, [pc, #96]	; (169e8 <event_master+0x138>)
   16988:	4619      	mov	r1, r3
   1698a:	4618      	mov	r0, r3
   1698c:	f7fa f9fc 	bl	10d88 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16990:	b328      	cbz	r0, 169de <event_master+0x12e>
   16992:	2802      	cmp	r0, #2
   16994:	d023      	beq.n	169de <event_master+0x12e>
   16996:	4040      	eors	r0, r0
   16998:	f380 8811 	msr	BASEPRI, r0
   1699c:	f04f 0004 	mov.w	r0, #4
   169a0:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   169a2:	4040      	eors	r0, r0
   169a4:	f380 8811 	msr	BASEPRI, r0
   169a8:	f04f 0004 	mov.w	r0, #4
   169ac:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   169ae:	4040      	eors	r0, r0
   169b0:	f380 8811 	msr	BASEPRI, r0
   169b4:	f04f 0004 	mov.w	r0, #4
   169b8:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   169ba:	7fa1      	ldrb	r1, [r4, #30]
   169bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   169be:	7f63      	ldrb	r3, [r4, #29]
   169c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   169c4:	9300      	str	r3, [sp, #0]
   169c6:	f104 0317 	add.w	r3, r4, #23
   169ca:	f104 001f 	add.w	r0, r4, #31
   169ce:	f7fa fdf3 	bl	115b8 <chan_sel_1>
   169d2:	e7c4      	b.n	1695e <event_master+0xae>
		_radio.state = STATE_STOP;
   169d4:	2204      	movs	r2, #4
   169d6:	4b03      	ldr	r3, [pc, #12]	; (169e4 <event_master+0x134>)
   169d8:	741a      	strb	r2, [r3, #16]
		radio_disable();
   169da:	f7f8 fdfd 	bl	f5d8 <radio_disable>
}
   169de:	b005      	add	sp, #20
   169e0:	bd30      	pop	{r4, r5, pc}
   169e2:	bf00      	nop
   169e4:	20000fec 	.word	0x20000fec
   169e8:	00011d61 	.word	0x00011d61

000169ec <event_slave>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   169ec:	4a64      	ldr	r2, [pc, #400]	; (16b80 <event_slave+0x194>)
   169ee:	7bd2      	ldrb	r2, [r2, #15]
   169f0:	2a00      	cmp	r2, #0
   169f2:	f040 809d 	bne.w	16b30 <event_slave+0x144>
{
   169f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   169f8:	b083      	sub	sp, #12
	LL_ASSERT(_radio.ticker_id_prepare ==
   169fa:	4a61      	ldr	r2, [pc, #388]	; (16b80 <event_slave+0x194>)
   169fc:	7b11      	ldrb	r1, [r2, #12]
   169fe:	b2c9      	uxtb	r1, r1
   16a00:	8c1a      	ldrh	r2, [r3, #32]
   16a02:	1dd4      	adds	r4, r2, #7
   16a04:	42a1      	cmp	r1, r4
   16a06:	f040 8099 	bne.w	16b3c <event_slave+0x150>
   16a0a:	461c      	mov	r4, r3
   16a0c:	4606      	mov	r6, r0
	_radio.role = ROLE_SLAVE;
   16a0e:	4d5c      	ldr	r5, [pc, #368]	; (16b80 <event_slave+0x194>)
   16a10:	2303      	movs	r3, #3
   16a12:	73eb      	strb	r3, [r5, #15]
	_radio.state = STATE_RX;
   16a14:	2301      	movs	r3, #1
   16a16:	742b      	strb	r3, [r5, #16]
	_radio.ticker_id_prepare = 0;
   16a18:	2700      	movs	r7, #0
   16a1a:	732f      	strb	r7, [r5, #12]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   16a1c:	3207      	adds	r2, #7
   16a1e:	b2d2      	uxtb	r2, r2
	_radio.ticker_id_event =
   16a20:	736a      	strb	r2, [r5, #13]
	_radio.ticks_anchor = ticks_at_expire;
   16a22:	6068      	str	r0, [r5, #4]
	_radio.packet_counter = 0;
   16a24:	f885 7114 	strb.w	r7, [r5, #276]	; 0x114
	_radio.crc_expire = 0;
   16a28:	f885 7115 	strb.w	r7, [r5, #277]	; 0x115
	_radio.conn_curr = conn;
   16a2c:	f8c5 4110 	str.w	r4, [r5, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   16a30:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   16a32:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   16a34:	8527      	strh	r7, [r4, #40]	; 0x28
	connection_configure(conn);
   16a36:	4620      	mov	r0, r4
   16a38:	f7fb fc56 	bl	122e8 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   16a3c:	2096      	movs	r0, #150	; 0x96
   16a3e:	f7f8 fed3 	bl	f7e8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
   16a42:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16a46:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   16a4a:	09d3      	lsrs	r3, r2, #7
   16a4c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   16a50:	4639      	mov	r1, r7
   16a52:	f000 0007 	and.w	r0, r0, #7
   16a56:	f7f8 fe1d 	bl	f694 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   16a5a:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   16a5e:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   16a62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (struct pdu_data *)
   16a66:	3108      	adds	r1, #8
   16a68:	4620      	mov	r0, r4
   16a6a:	f7fb fc51 	bl	12310 <rx_packet_set>
	if (conn->data_chan_sel) {
   16a6e:	7f63      	ldrb	r3, [r4, #29]
   16a70:	f013 0f40 	tst.w	r3, #64	; 0x40
   16a74:	d068      	beq.n	16b48 <event_slave+0x15c>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   16a76:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   16a78:	3801      	subs	r0, #1
   16a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16a7e:	f104 0217 	add.w	r2, r4, #23
   16a82:	8be1      	ldrh	r1, [r4, #30]
   16a84:	b280      	uxth	r0, r0
   16a86:	f7fa fdf5 	bl	11674 <chan_sel_2>
	chan_set(data_chan_use);
   16a8a:	f7fb fecf 	bl	1282c <chan_set>
		conn->slave.window_widening_prepare_us;
   16a8e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
	conn->slave.window_widening_event_us +=
   16a90:	6e22      	ldr	r2, [r4, #96]	; 0x60
   16a92:	4413      	add	r3, r2
   16a94:	6623      	str	r3, [r4, #96]	; 0x60
	conn->slave.window_widening_prepare_us = 0;
   16a96:	2200      	movs	r2, #0
   16a98:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
   16a9a:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (conn->slave.window_widening_event_us >
   16a9c:	4293      	cmp	r3, r2
   16a9e:	d900      	bls.n	16aa2 <event_slave+0xb6>
		conn->slave.window_widening_event_us =
   16aa0:	6622      	str	r2, [r4, #96]	; 0x60
		conn->slave.window_size_prepare_us;
   16aa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_event_us +=
   16aa4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   16aa6:	4413      	add	r3, r2
   16aa8:	66a3      	str	r3, [r4, #104]	; 0x68
	conn->slave.window_size_prepare_us = 0;
   16aaa:	2700      	movs	r7, #0
   16aac:	6667      	str	r7, [r4, #100]	; 0x64
	remainder_us =
   16aae:	4b34      	ldr	r3, [pc, #208]	; (16b80 <event_slave+0x194>)
   16ab0:	689a      	ldr	r2, [r3, #8]
   16ab2:	f106 0109 	add.w	r1, r6, #9
   16ab6:	4638      	mov	r0, r7
   16ab8:	f7f8 fe9c 	bl	f7f4 <radio_tmr_start>
   16abc:	4605      	mov	r5, r0
	radio_tmr_aa_capture();
   16abe:	f7f8 ff17 	bl	f8f0 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   16ac2:	4638      	mov	r0, r7
   16ac4:	f7f8 ff36 	bl	f934 <radio_tmr_aa_save>
	       (conn->slave.window_widening_event_us << 1) +
   16ac8:	6e20      	ldr	r0, [r4, #96]	; 0x60
	       (RADIO_TICKER_JITTER_US << 2) +
   16aca:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	       conn->slave.window_size_event_us;
   16ace:	6ea0      	ldr	r0, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
   16ad0:	4405      	add	r5, r0
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   16ad2:	3550      	adds	r5, #80	; 0x50
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
   16ad4:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16ad8:	f000 0007 	and.w	r0, r0, #7
   16adc:	f7f8 fd68 	bl	f5b0 <radio_rx_ready_delay_get>
   16ae0:	4405      	add	r5, r0
	hcto += addr_us_get(conn->phy_rx);
   16ae2:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16ae6:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   16aea:	2802      	cmp	r0, #2
   16aec:	d03c      	beq.n	16b68 <event_slave+0x17c>
   16aee:	2804      	cmp	r0, #4
   16af0:	d037      	beq.n	16b62 <event_slave+0x176>
		return 40;
   16af2:	2328      	movs	r3, #40	; 0x28
	hcto += addr_us_get(conn->phy_rx);
   16af4:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   16af6:	2101      	movs	r1, #1
   16af8:	f7f8 fd5c 	bl	f5b4 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   16afc:	4428      	add	r0, r5
   16afe:	f7f8 fed5 	bl	f8ac <radio_tmr_hcto_configure>
				      conn->handle), ticks_at_expire) != 0) {
   16b02:	8c21      	ldrh	r1, [r4, #32]
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   16b04:	3107      	adds	r1, #7
   16b06:	4632      	mov	r2, r6
   16b08:	b2c9      	uxtb	r1, r1
   16b0a:	4620      	mov	r0, r4
   16b0c:	f7ff fe34 	bl	16778 <preempt_calc>
   16b10:	bb60      	cbnz	r0, 16b6c <event_slave+0x180>
		ticker_status =
   16b12:	2300      	movs	r3, #0
   16b14:	4a1b      	ldr	r2, [pc, #108]	; (16b84 <event_slave+0x198>)
   16b16:	4619      	mov	r1, r3
   16b18:	4618      	mov	r0, r3
   16b1a:	f7fa f935 	bl	10d88 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16b1e:	b350      	cbz	r0, 16b76 <event_slave+0x18a>
   16b20:	2802      	cmp	r0, #2
   16b22:	d028      	beq.n	16b76 <event_slave+0x18a>
   16b24:	4040      	eors	r0, r0
   16b26:	f380 8811 	msr	BASEPRI, r0
   16b2a:	f04f 0004 	mov.w	r0, #4
   16b2e:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   16b30:	4040      	eors	r0, r0
   16b32:	f380 8811 	msr	BASEPRI, r0
   16b36:	f04f 0004 	mov.w	r0, #4
   16b3a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   16b3c:	4040      	eors	r0, r0
   16b3e:	f380 8811 	msr	BASEPRI, r0
   16b42:	f04f 0004 	mov.w	r0, #4
   16b46:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16b48:	7fa1      	ldrb	r1, [r4, #30]
   16b4a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   16b4c:	7f63      	ldrb	r3, [r4, #29]
   16b4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16b52:	9300      	str	r3, [sp, #0]
   16b54:	f104 0317 	add.w	r3, r4, #23
   16b58:	f104 001f 	add.w	r0, r4, #31
   16b5c:	f7fa fd2c 	bl	115b8 <chan_sel_1>
   16b60:	e793      	b.n	16a8a <event_slave+0x9e>
		return 376;
   16b62:	f44f 73bc 	mov.w	r3, #376	; 0x178
   16b66:	e7c5      	b.n	16af4 <event_slave+0x108>
		return 24;
   16b68:	2318      	movs	r3, #24
   16b6a:	e7c3      	b.n	16af4 <event_slave+0x108>
		_radio.state = STATE_STOP;
   16b6c:	2204      	movs	r2, #4
   16b6e:	4b04      	ldr	r3, [pc, #16]	; (16b80 <event_slave+0x194>)
   16b70:	741a      	strb	r2, [r3, #16]
		radio_disable();
   16b72:	f7f8 fd31 	bl	f5d8 <radio_disable>
	packet_tx_enqueue(2);
   16b76:	2002      	movs	r0, #2
   16b78:	f7fb fc28 	bl	123cc <packet_tx_enqueue>
}
   16b7c:	b003      	add	sp, #12
   16b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16b80:	20000fec 	.word	0x20000fec
   16b84:	00011d61 	.word	0x00011d61

00016b88 <event_scan>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   16b88:	4b67      	ldr	r3, [pc, #412]	; (16d28 <event_scan+0x1a0>)
   16b8a:	7bdb      	ldrb	r3, [r3, #15]
   16b8c:	2b00      	cmp	r3, #0
   16b8e:	f040 808b 	bne.w	16ca8 <event_scan+0x120>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   16b92:	4b65      	ldr	r3, [pc, #404]	; (16d28 <event_scan+0x1a0>)
   16b94:	7b1b      	ldrb	r3, [r3, #12]
   16b96:	b2db      	uxtb	r3, r3
   16b98:	2b06      	cmp	r3, #6
   16b9a:	f040 808b 	bne.w	16cb4 <event_scan+0x12c>
{
   16b9e:	b570      	push	{r4, r5, r6, lr}
   16ba0:	b08c      	sub	sp, #48	; 0x30
   16ba2:	4605      	mov	r5, r0
	_radio.role = ROLE_SCAN;
   16ba4:	4c60      	ldr	r4, [pc, #384]	; (16d28 <event_scan+0x1a0>)
   16ba6:	2302      	movs	r3, #2
   16ba8:	73e3      	strb	r3, [r4, #15]
	_radio.state = STATE_RX;
   16baa:	2101      	movs	r1, #1
   16bac:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_prepare = 0;
   16bae:	2200      	movs	r2, #0
   16bb0:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
   16bb2:	2306      	movs	r3, #6
   16bb4:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   16bb6:	6060      	str	r0, [r4, #4]
	_radio.scanner.state = 0;
   16bb8:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16bbc:	f362 0341 	bfi	r3, r2, #1, #1
   16bc0:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   16bc4:	f894 00dd 	ldrb.w	r0, [r4, #221]	; 0xdd
   16bc8:	f000 0007 	and.w	r0, r0, #7
   16bcc:	f7fb fb68 	bl	122a0 <adv_scan_configure>
	chan_set(37 + _radio.scanner.chan++);
   16bd0:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16bd4:	f3c3 0081 	ubfx	r0, r3, #2, #2
   16bd8:	1c42      	adds	r2, r0, #1
   16bda:	f362 0383 	bfi	r3, r2, #2, #2
   16bde:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
   16be2:	3025      	adds	r0, #37	; 0x25
   16be4:	f7fb fe22 	bl	1282c <chan_set>
	if (_radio.scanner.chan == 3) {
   16be8:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16bec:	f003 030c 	and.w	r3, r3, #12
   16bf0:	2b0c      	cmp	r3, #12
   16bf2:	d065      	beq.n	16cc0 <event_scan+0x138>
	radio_tmr_tifs_set(RADIO_TIFS);
   16bf4:	2096      	movs	r0, #150	; 0x96
   16bf6:	f7f8 fdf7 	bl	f7e8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   16bfa:	2300      	movs	r3, #0
   16bfc:	461a      	mov	r2, r3
   16bfe:	4619      	mov	r1, r3
   16c00:	4618      	mov	r0, r3
   16c02:	f7f8 fd47 	bl	f694 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   16c06:	4b48      	ldr	r3, [pc, #288]	; (16d28 <event_scan+0x1a0>)
   16c08:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16c0c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16c10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   16c14:	3008      	adds	r0, #8
   16c16:	f7f8 fcbb 	bl	f590 <radio_pkt_rx_set>
	radio_rssi_measure();
   16c1a:	f7f8 fd4b 	bl	f6b4 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
   16c1e:	f003 f835 	bl	19c8c <ctrl_rl_enabled>
   16c22:	2800      	cmp	r0, #0
   16c24:	d153      	bne.n	16cce <event_scan+0x146>
	if (_radio.scanner.filter_policy) {
   16c26:	4b40      	ldr	r3, [pc, #256]	; (16d28 <event_scan+0x1a0>)
   16c28:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   16c2c:	f013 0f30 	tst.w	r3, #48	; 0x30
   16c30:	d165      	bne.n	16cfe <event_scan+0x176>
	remainder_us = radio_tmr_start(0,
   16c32:	4c3d      	ldr	r4, [pc, #244]	; (16d28 <event_scan+0x1a0>)
   16c34:	68a2      	ldr	r2, [r4, #8]
   16c36:	f105 0109 	add.w	r1, r5, #9
   16c3a:	2000      	movs	r0, #0
   16c3c:	f7f8 fdda 	bl	f7f4 <radio_tmr_start>
	radio_tmr_end_capture();
   16c40:	f7f8 fe8a 	bl	f958 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
   16c44:	462a      	mov	r2, r5
   16c46:	2106      	movs	r1, #6
   16c48:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   16c4c:	f7ff fd94 	bl	16778 <preempt_calc>
   16c50:	2800      	cmp	r0, #0
   16c52:	d15d      	bne.n	16d10 <event_scan+0x188>
				     _radio.scanner.ticks_window +
   16c54:	4b34      	ldr	r3, [pc, #208]	; (16d28 <event_scan+0x1a0>)
   16c56:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16c5a:	3309      	adds	r3, #9
		ticker_status =
   16c5c:	f641 0287 	movw	r2, #6279	; 0x1887
   16c60:	9208      	str	r2, [sp, #32]
   16c62:	4a32      	ldr	r2, [pc, #200]	; (16d2c <event_scan+0x1a4>)
   16c64:	9207      	str	r2, [sp, #28]
   16c66:	2204      	movs	r2, #4
   16c68:	9206      	str	r2, [sp, #24]
   16c6a:	4931      	ldr	r1, [pc, #196]	; (16d30 <event_scan+0x1a8>)
   16c6c:	9105      	str	r1, [sp, #20]
   16c6e:	2000      	movs	r0, #0
   16c70:	9004      	str	r0, [sp, #16]
   16c72:	9003      	str	r0, [sp, #12]
   16c74:	9002      	str	r0, [sp, #8]
   16c76:	9001      	str	r0, [sp, #4]
   16c78:	9300      	str	r3, [sp, #0]
   16c7a:	462b      	mov	r3, r5
   16c7c:	4601      	mov	r1, r0
   16c7e:	f7f9 ff67 	bl	10b50 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16c82:	b108      	cbz	r0, 16c88 <event_scan+0x100>
   16c84:	2802      	cmp	r0, #2
   16c86:	d149      	bne.n	16d1c <event_scan+0x194>
			ticker_status =
   16c88:	2300      	movs	r3, #0
   16c8a:	4a2a      	ldr	r2, [pc, #168]	; (16d34 <event_scan+0x1ac>)
   16c8c:	4619      	mov	r1, r3
   16c8e:	4618      	mov	r0, r3
   16c90:	f7fa f87a 	bl	10d88 <ticker_job_idle_get>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16c94:	2800      	cmp	r0, #0
   16c96:	d03f      	beq.n	16d18 <event_scan+0x190>
   16c98:	2802      	cmp	r0, #2
   16c9a:	d03d      	beq.n	16d18 <event_scan+0x190>
   16c9c:	4040      	eors	r0, r0
   16c9e:	f380 8811 	msr	BASEPRI, r0
   16ca2:	f04f 0004 	mov.w	r0, #4
   16ca6:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   16ca8:	4040      	eors	r0, r0
   16caa:	f380 8811 	msr	BASEPRI, r0
   16cae:	f04f 0004 	mov.w	r0, #4
   16cb2:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   16cb4:	4040      	eors	r0, r0
   16cb6:	f380 8811 	msr	BASEPRI, r0
   16cba:	f04f 0004 	mov.w	r0, #4
   16cbe:	df02      	svc	2
		_radio.scanner.chan = 0;
   16cc0:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   16cc4:	f36f 0283 	bfc	r2, #2, #2
   16cc8:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
   16ccc:	e792      	b.n	16bf4 <event_scan+0x6c>
			ctrl_filter_get(!!(_radio.scanner.filter_policy & 0x1));
   16cce:	4b16      	ldr	r3, [pc, #88]	; (16d28 <event_scan+0x1a0>)
   16cd0:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		struct ll_filter *filter =
   16cd4:	f3c0 1000 	ubfx	r0, r0, #4, #1
   16cd8:	f002 fdda 	bl	19890 <ctrl_filter_get>
   16cdc:	4604      	mov	r4, r0
		u8_t count, *irks = ctrl_irks_get(&count);
   16cde:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   16ce2:	f002 fd4f 	bl	19784 <ctrl_irks_get>
   16ce6:	4606      	mov	r6, r0
		radio_filter_configure(filter->enable_bitmask,
   16ce8:	1ca2      	adds	r2, r4, #2
   16cea:	7861      	ldrb	r1, [r4, #1]
   16cec:	7820      	ldrb	r0, [r4, #0]
   16cee:	f7f8 fd03 	bl	f6f8 <radio_filter_configure>
		radio_ar_configure(count, irks);
   16cf2:	4631      	mov	r1, r6
   16cf4:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   16cf8:	f7f8 feda 	bl	fab0 <radio_ar_configure>
   16cfc:	e799      	b.n	16c32 <event_scan+0xaa>
		struct ll_filter *wl = ctrl_filter_get(true);
   16cfe:	2001      	movs	r0, #1
   16d00:	f002 fdc6 	bl	19890 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   16d04:	1c82      	adds	r2, r0, #2
   16d06:	7841      	ldrb	r1, [r0, #1]
   16d08:	7800      	ldrb	r0, [r0, #0]
   16d0a:	f7f8 fcf5 	bl	f6f8 <radio_filter_configure>
   16d0e:	e790      	b.n	16c32 <event_scan+0xaa>
		_radio.state = STATE_STOP;
   16d10:	2204      	movs	r2, #4
   16d12:	7422      	strb	r2, [r4, #16]
		radio_disable();
   16d14:	f7f8 fc60 	bl	f5d8 <radio_disable>
}
   16d18:	b00c      	add	sp, #48	; 0x30
   16d1a:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16d1c:	4040      	eors	r0, r0
   16d1e:	f380 8811 	msr	BASEPRI, r0
   16d22:	f04f 0004 	mov.w	r0, #4
   16d26:	df02      	svc	2
   16d28:	20000fec 	.word	0x20000fec
   16d2c:	000118a5 	.word	0x000118a5
   16d30:	00012089 	.word	0x00012089
   16d34:	00011d61 	.word	0x00011d61

00016d38 <access_addr_get>:
{
   16d38:	b5f0      	push	{r4, r5, r6, r7, lr}
   16d3a:	b083      	sub	sp, #12
	retry = 3;
   16d3c:	2403      	movs	r4, #3
   16d3e:	e059      	b.n	16df4 <access_addr_get+0xbc>
	LL_ASSERT(retry);
   16d40:	4040      	eors	r0, r0
   16d42:	f380 8811 	msr	BASEPRI, r0
   16d46:	f04f 0004 	mov.w	r0, #4
   16d4a:	df02      	svc	2
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   16d4c:	9900      	ldr	r1, [sp, #0]
   16d4e:	0fc9      	lsrs	r1, r1, #31
	transitions = 0;
   16d50:	4607      	mov	r7, r0
	bit_idx = 31;
   16d52:	221f      	movs	r2, #31
	consecutive_cnt = 1;
   16d54:	2501      	movs	r5, #1
	while (bit_idx--) {
   16d56:	e010      	b.n	16d7a <access_addr_get+0x42>
			consecutive_cnt++;
   16d58:	3501      	adds	r5, #1
   16d5a:	b2ed      	uxtb	r5, r5
   16d5c:	e01c      	b.n	16d98 <access_addr_get+0x60>
		    ((bit_idx < 28) && (transitions < 1)) ||
   16d5e:	b9ff      	cbnz	r7, 16da0 <access_addr_get+0x68>
			if (consecutive_bit) {
   16d60:	b319      	cbz	r1, 16daa <access_addr_get+0x72>
				access_addr &= ~BIT(bit_idx);
   16d62:	2201      	movs	r2, #1
   16d64:	409a      	lsls	r2, r3
   16d66:	ea26 0602 	bic.w	r6, r6, r2
   16d6a:	9600      	str	r6, [sp, #0]
				consecutive_bit = 0;
   16d6c:	4601      	mov	r1, r0
			transitions++;
   16d6e:	3701      	adds	r7, #1
   16d70:	b2ff      	uxtb	r7, r7
			consecutive_cnt = 1;
   16d72:	2501      	movs	r5, #1
	while (bit_idx--) {
   16d74:	461a      	mov	r2, r3
		if (transitions > 24) {
   16d76:	2f18      	cmp	r7, #24
   16d78:	d81d      	bhi.n	16db6 <access_addr_get+0x7e>
	while (bit_idx--) {
   16d7a:	1e53      	subs	r3, r2, #1
   16d7c:	b2db      	uxtb	r3, r3
   16d7e:	b32a      	cbz	r2, 16dcc <access_addr_get+0x94>
		bit = (access_addr >> bit_idx) & 0x01;
   16d80:	9e00      	ldr	r6, [sp, #0]
   16d82:	469e      	mov	lr, r3
   16d84:	fa26 f203 	lsr.w	r2, r6, r3
   16d88:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   16d8c:	4291      	cmp	r1, r2
   16d8e:	d0e3      	beq.n	16d58 <access_addr_get+0x20>
			transitions++;
   16d90:	3701      	adds	r7, #1
   16d92:	b2ff      	uxtb	r7, r7
			consecutive_bit = bit;
   16d94:	4611      	mov	r1, r2
			consecutive_cnt = 1;
   16d96:	2501      	movs	r5, #1
		if ((consecutive_cnt > 6) ||
   16d98:	2d06      	cmp	r5, #6
   16d9a:	d8e1      	bhi.n	16d60 <access_addr_get+0x28>
   16d9c:	2b1b      	cmp	r3, #27
   16d9e:	d9de      	bls.n	16d5e <access_addr_get+0x26>
		    ((bit_idx < 28) && (transitions < 1)) ||
   16da0:	2b1a      	cmp	r3, #26
   16da2:	d8e7      	bhi.n	16d74 <access_addr_get+0x3c>
		    ((bit_idx < 27) && (transitions < 2))) {
   16da4:	2f01      	cmp	r7, #1
   16da6:	d8e5      	bhi.n	16d74 <access_addr_get+0x3c>
   16da8:	e7da      	b.n	16d60 <access_addr_get+0x28>
				access_addr |= BIT(bit_idx);
   16daa:	2101      	movs	r1, #1
   16dac:	fa01 f203 	lsl.w	r2, r1, r3
   16db0:	4316      	orrs	r6, r2
   16db2:	9600      	str	r6, [sp, #0]
   16db4:	e7db      	b.n	16d6e <access_addr_get+0x36>
			if (consecutive_bit) {
   16db6:	2900      	cmp	r1, #0
   16db8:	d02d      	beq.n	16e16 <access_addr_get+0xde>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   16dba:	f10e 0e01 	add.w	lr, lr, #1
   16dbe:	2301      	movs	r3, #1
   16dc0:	fa03 f30e 	lsl.w	r3, r3, lr
   16dc4:	425b      	negs	r3, r3
   16dc6:	9a00      	ldr	r2, [sp, #0]
   16dc8:	4013      	ands	r3, r2
   16dca:	9300      	str	r3, [sp, #0]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   16dcc:	4b19      	ldr	r3, [pc, #100]	; (16e34 <access_addr_get+0xfc>)
   16dce:	9a00      	ldr	r2, [sp, #0]
   16dd0:	4053      	eors	r3, r2
   16dd2:	a802      	add	r0, sp, #8
   16dd4:	f840 3d04 	str.w	r3, [r0, #-4]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   16dd8:	2104      	movs	r1, #4
   16dda:	f7f8 fa6c 	bl	f2b6 <util_ones_count_get>
   16dde:	2801      	cmp	r0, #1
   16de0:	d908      	bls.n	16df4 <access_addr_get+0xbc>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   16de2:	9800      	ldr	r0, [sp, #0]
   16de4:	b283      	uxth	r3, r0
   16de6:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   16dea:	d120      	bne.n	16e2e <access_addr_get+0xf6>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   16dec:	b2c3      	uxtb	r3, r0
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   16dee:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   16df2:	d11c      	bne.n	16e2e <access_addr_get+0xf6>
	LL_ASSERT(retry);
   16df4:	2c00      	cmp	r4, #0
   16df6:	d0a3      	beq.n	16d40 <access_addr_get+0x8>
	retry--;
   16df8:	3c01      	subs	r4, #1
   16dfa:	b2e4      	uxtb	r4, r4
	len = sizeof(u32_t);
   16dfc:	2004      	movs	r0, #4
	while (len) {
   16dfe:	2800      	cmp	r0, #0
   16e00:	d0a4      	beq.n	16d4c <access_addr_get+0x14>
		len = rand_get(len, (u8_t *)&access_addr);
   16e02:	4669      	mov	r1, sp
   16e04:	f7f9 fc1c 	bl	10640 <rand_get>
   16e08:	b2c0      	uxtb	r0, r0
		if (len) {
   16e0a:	2800      	cmp	r0, #0
   16e0c:	d0f7      	beq.n	16dfe <access_addr_get+0xc6>
   16e0e:	bf20      	wfe
  __ASM volatile ("sev");
   16e10:	bf40      	sev
  __ASM volatile ("wfe");
   16e12:	bf20      	wfe
   16e14:	e7f3      	b.n	16dfe <access_addr_get+0xc6>
				access_addr |= (BIT(bit_idx + 1) - 1);
   16e16:	f10e 0e01 	add.w	lr, lr, #1
   16e1a:	2301      	movs	r3, #1
   16e1c:	fa03 fe0e 	lsl.w	lr, r3, lr
   16e20:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   16e24:	9b00      	ldr	r3, [sp, #0]
   16e26:	ea43 030e 	orr.w	r3, r3, lr
   16e2a:	9300      	str	r3, [sp, #0]
   16e2c:	e7ce      	b.n	16dcc <access_addr_get+0x94>
}
   16e2e:	b003      	add	sp, #12
   16e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16e32:	bf00      	nop
   16e34:	8e89bed6 	.word	0x8e89bed6

00016e38 <isr_rx_scan>:
{
   16e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e3c:	b08f      	sub	sp, #60	; 0x3c
   16e3e:	4617      	mov	r7, r2
   16e40:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
   16e44:	f89d 6064 	ldrb.w	r6, [sp, #100]	; 0x64
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   16e48:	4b99      	ldr	r3, [pc, #612]	; (170b0 <isr_rx_scan+0x278>)
   16e4a:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16e4e:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
   16e52:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
	pdu_adv_rx = (struct pdu_adv *)
   16e56:	f104 0808 	add.w	r8, r4, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   16e5a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   16e5e:	b15b      	cbz	r3, 16e78 <isr_rx_scan+0x40>
   16e60:	4b93      	ldr	r3, [pc, #588]	; (170b0 <isr_rx_scan+0x278>)
   16e62:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   16e66:	b34b      	cbz	r3, 16ebc <isr_rx_scan+0x84>
				      (_radio.fc_req == _radio.fc_ack)) &&
   16e68:	4a91      	ldr	r2, [pc, #580]	; (170b0 <isr_rx_scan+0x278>)
   16e6a:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   16e6e:	b2db      	uxtb	r3, r3
   16e70:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   16e74:	4293      	cmp	r3, r2
   16e76:	d021      	beq.n	16ebc <isr_rx_scan+0x84>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   16e78:	7a23      	ldrb	r3, [r4, #8]
   16e7a:	f013 030f 	ands.w	r3, r3, #15
   16e7e:	f000 82e9 	beq.w	17454 <isr_rx_scan+0x61c>
   16e82:	2b06      	cmp	r3, #6
   16e84:	f000 82e6 	beq.w	17454 <isr_rx_scan+0x61c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   16e88:	2b00      	cmp	r3, #0
   16e8a:	f000 83d9 	beq.w	17640 <isr_rx_scan+0x808>
   16e8e:	2b01      	cmp	r3, #1
   16e90:	f000 8355 	beq.w	1753e <isr_rx_scan+0x706>
	bool dir_report = false;
   16e94:	f04f 0900 	mov.w	r9, #0
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   16e98:	7a23      	ldrb	r3, [r4, #8]
   16e9a:	f003 030f 	and.w	r3, r3, #15
					&dir_report))) ||
   16e9e:	2b02      	cmp	r3, #2
   16ea0:	f000 83d0 	beq.w	17644 <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   16ea4:	2b06      	cmp	r3, #6
   16ea6:	f000 83cd 	beq.w	17644 <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   16eaa:	2b07      	cmp	r3, #7
   16eac:	f000 839f 	beq.w	175ee <isr_rx_scan+0x7b6>
		   (_radio.scanner.phy)) ||
   16eb0:	2b04      	cmp	r3, #4
   16eb2:	f000 83a3 	beq.w	175fc <isr_rx_scan+0x7c4>
		return 1;
   16eb6:	f04f 0a01 	mov.w	sl, #1
   16eba:	e3cb      	b.n	17654 <isr_rx_scan+0x81c>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   16ebc:	4b7c      	ldr	r3, [pc, #496]	; (170b0 <isr_rx_scan+0x278>)
   16ebe:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   16ec2:	f013 0f10 	tst.w	r3, #16
   16ec6:	d072      	beq.n	16fae <isr_rx_scan+0x176>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   16ec8:	7a23      	ldrb	r3, [r4, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   16eca:	f013 030f 	ands.w	r3, r3, #15
   16ece:	f000 80da 	beq.w	17086 <isr_rx_scan+0x24e>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   16ed2:	2b01      	cmp	r3, #1
   16ed4:	f000 808f 	beq.w	16ff6 <isr_rx_scan+0x1be>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   16ed8:	2300      	movs	r3, #0
				      (_radio.fc_req == _radio.fc_ack)) &&
   16eda:	2b00      	cmp	r3, #0
   16edc:	d0cc      	beq.n	16e78 <isr_rx_scan+0x40>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   16ede:	f7f8 fd4d 	bl	f97c <radio_tmr_end_get>
   16ee2:	f200 2916 	addw	r9, r0, #534	; 0x216
	     (TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   16ee6:	4b72      	ldr	r3, [pc, #456]	; (170b0 <isr_rx_scan+0x278>)
   16ee8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   16eec:	4871      	ldr	r0, [pc, #452]	; (170b4 <isr_rx_scan+0x27c>)
   16eee:	fba3 0100 	umull	r0, r1, r3, r0
   16ef2:	2207      	movs	r2, #7
   16ef4:	fb02 1103 	mla	r1, r2, r3, r1
   16ef8:	a36b      	add	r3, pc, #428	; (adr r3, 170a8 <isr_rx_scan+0x270>)
   16efa:	e9d3 2300 	ldrd	r2, r3, [r3]
   16efe:	f7ea f8fd 	bl	10fc <__aeabi_uldivmod>
   16f02:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   16f06:	4581      	cmp	r9, r0
   16f08:	d2b6      	bcs.n	16e78 <isr_rx_scan+0x40>
	if (_radio.packet_rx_acquire >=
   16f0a:	4b69      	ldr	r3, [pc, #420]	; (170b0 <isr_rx_scan+0x278>)
   16f0c:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16f10:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16f14:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   16f16:	429a      	cmp	r2, r3
   16f18:	f0c0 80b7 	bcc.w	1708a <isr_rx_scan+0x252>
			_radio.packet_rx_last);
   16f1c:	4b64      	ldr	r3, [pc, #400]	; (170b0 <isr_rx_scan+0x278>)
   16f1e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16f22:	1ad3      	subs	r3, r2, r3
   16f24:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   16f26:	2b03      	cmp	r3, #3
   16f28:	f240 80b9 	bls.w	1709e <isr_rx_scan+0x266>
	return _radio.packet_rx[_radio.packet_rx_last];
   16f2c:	4b60      	ldr	r3, [pc, #384]	; (170b0 <isr_rx_scan+0x278>)
   16f2e:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16f32:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16f36:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   16f3a:	f1b9 0f00 	cmp.w	r9, #0
   16f3e:	f000 839a 	beq.w	17676 <isr_rx_scan+0x83e>
		_radio.state = STATE_STOP;
   16f42:	f8df a16c 	ldr.w	sl, [pc, #364]	; 170b0 <isr_rx_scan+0x278>
   16f46:	2304      	movs	r3, #4
   16f48:	f88a 3010 	strb.w	r3, [sl, #16]
		conn = _radio.scanner.conn;
   16f4c:	f8da 80fc 	ldr.w	r8, [sl, #252]	; 0xfc
		_radio.scanner.conn = NULL;
   16f50:	2300      	movs	r3, #0
   16f52:	f8ca 30fc 	str.w	r3, [sl, #252]	; 0xfc
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   16f56:	f7f8 fb91 	bl	f67c <radio_pkt_scratch_get>
   16f5a:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   16f5c:	7803      	ldrb	r3, [r0, #0]
   16f5e:	2205      	movs	r2, #5
   16f60:	f362 0303 	bfi	r3, r2, #0, #4
			pdu_adv_tx->chan_sel = 1;
   16f64:	b2db      	uxtb	r3, r3
   16f66:	f043 0320 	orr.w	r3, r3, #32
   16f6a:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   16f6c:	7a23      	ldrb	r3, [r4, #8]
   16f6e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16f72:	7802      	ldrb	r2, [r0, #0]
   16f74:	f363 12c7 	bfi	r2, r3, #7, #1
   16f78:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
   16f7a:	2322      	movs	r3, #34	; 0x22
   16f7c:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   16f7e:	4628      	mov	r0, r5
   16f80:	f002 fbde 	bl	19740 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   16f84:	f89a 30de 	ldrb.w	r3, [sl, #222]	; 0xde
   16f88:	f013 0f01 	tst.w	r3, #1
   16f8c:	f000 8098 	beq.w	170c0 <isr_rx_scan+0x288>
   16f90:	2800      	cmp	r0, #0
   16f92:	f000 8095 	beq.w	170c0 <isr_rx_scan+0x288>
			pdu_adv_tx->tx_addr = 1;
   16f96:	7832      	ldrb	r2, [r6, #0]
   16f98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16f9c:	4633      	mov	r3, r6
   16f9e:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   16fa2:	2206      	movs	r2, #6
   16fa4:	4601      	mov	r1, r0
   16fa6:	4618      	mov	r0, r3
   16fa8:	f7e9 f98a 	bl	2c0 <memcpy>
   16fac:	e096      	b.n	170dc <isr_rx_scan+0x2a4>
	if (rl_idx != FILTER_IDX_NONE) {
   16fae:	2dff      	cmp	r5, #255	; 0xff
   16fb0:	d00a      	beq.n	16fc8 <isr_rx_scan+0x190>
		return (rl_idx == _radio.scanner.rl_idx);
   16fb2:	4b3f      	ldr	r3, [pc, #252]	; (170b0 <isr_rx_scan+0x278>)
   16fb4:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
   16fb8:	429d      	cmp	r5, r3
   16fba:	bf14      	ite	ne
   16fbc:	2300      	movne	r3, #0
   16fbe:	2301      	moveq	r3, #1
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   16fc0:	2b00      	cmp	r3, #0
   16fc2:	d181      	bne.n	16ec8 <isr_rx_scan+0x90>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   16fc4:	2300      	movs	r3, #0
   16fc6:	e788      	b.n	16eda <isr_rx_scan+0xa2>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   16fc8:	4b39      	ldr	r3, [pc, #228]	; (170b0 <isr_rx_scan+0x278>)
   16fca:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   16fce:	f3c2 1280 	ubfx	r2, r2, #6, #1
   16fd2:	7a23      	ldrb	r3, [r4, #8]
   16fd4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16fd8:	429a      	cmp	r2, r3
   16fda:	d001      	beq.n	16fe0 <isr_rx_scan+0x1a8>
   16fdc:	2300      	movs	r3, #0
   16fde:	e7ef      	b.n	16fc0 <isr_rx_scan+0x188>
		(memcmp(&_radio.scanner.adv_addr[0],
   16fe0:	2206      	movs	r2, #6
   16fe2:	f108 0102 	add.w	r1, r8, #2
   16fe6:	4834      	ldr	r0, [pc, #208]	; (170b8 <isr_rx_scan+0x280>)
   16fe8:	f013 f836 	bl	2a058 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   16fec:	b908      	cbnz	r0, 16ff2 <isr_rx_scan+0x1ba>
   16fee:	2301      	movs	r3, #1
   16ff0:	e7e6      	b.n	16fc0 <isr_rx_scan+0x188>
   16ff2:	2300      	movs	r3, #0
   16ff4:	e7e4      	b.n	16fc0 <isr_rx_scan+0x188>
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   16ff6:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   16ff8:	f108 0a08 	add.w	sl, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   16ffc:	462a      	mov	r2, r5
   16ffe:	4651      	mov	r1, sl
   17000:	09c0      	lsrs	r0, r0, #7
   17002:	f002 fe17 	bl	19c34 <ctrl_rl_addr_resolve>
   17006:	4681      	mov	r9, r0
   17008:	b9d0      	cbnz	r0, 17040 <isr_rx_scan+0x208>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   1700a:	4b29      	ldr	r3, [pc, #164]	; (170b0 <isr_rx_scan+0x278>)
   1700c:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   17010:	f013 0f01 	tst.w	r3, #1
   17014:	d119      	bne.n	1704a <isr_rx_scan+0x212>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   17016:	4b26      	ldr	r3, [pc, #152]	; (170b0 <isr_rx_scan+0x278>)
   17018:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   1701c:	7a23      	ldrb	r3, [r4, #8]
   1701e:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   17020:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17024:	d017      	beq.n	17056 <isr_rx_scan+0x21e>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   17026:	4b22      	ldr	r3, [pc, #136]	; (170b0 <isr_rx_scan+0x278>)
   17028:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   1702c:	f013 0f20 	tst.w	r3, #32
   17030:	d003      	beq.n	1703a <isr_rx_scan+0x202>
   17032:	f994 3008 	ldrsb.w	r3, [r4, #8]
   17036:	2b00      	cmp	r3, #0
   17038:	db17      	blt.n	1706a <isr_rx_scan+0x232>
			BDADDR_SIZE) == 0))) ||
   1703a:	f1b9 0f00 	cmp.w	r9, #0
   1703e:	d11d      	bne.n	1707c <isr_rx_scan+0x244>
		((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17040:	f1b9 0f00 	cmp.w	r9, #0
   17044:	d01d      	beq.n	17082 <isr_rx_scan+0x24a>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   17046:	2301      	movs	r3, #1
   17048:	e747      	b.n	16eda <isr_rx_scan+0xa2>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   1704a:	4628      	mov	r0, r5
   1704c:	f002 fb78 	bl	19740 <ctrl_lrpa_get>
   17050:	2800      	cmp	r0, #0
   17052:	d1f5      	bne.n	17040 <isr_rx_scan+0x208>
   17054:	e7df      	b.n	17016 <isr_rx_scan+0x1de>
		(memcmp(&_radio.scanner.init_addr[0],
   17056:	2206      	movs	r2, #6
   17058:	4651      	mov	r1, sl
   1705a:	4818      	ldr	r0, [pc, #96]	; (170bc <isr_rx_scan+0x284>)
   1705c:	f012 fffc 	bl	2a058 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   17060:	2800      	cmp	r0, #0
   17062:	d1e0      	bne.n	17026 <isr_rx_scan+0x1ee>
			BDADDR_SIZE) == 0))) ||
   17064:	f04f 0901 	mov.w	r9, #1
   17068:	e7ea      	b.n	17040 <isr_rx_scan+0x208>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   1706a:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   1706e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17072:	2b40      	cmp	r3, #64	; 0x40
   17074:	d1e1      	bne.n	1703a <isr_rx_scan+0x202>
		return true;
   17076:	f04f 0901 	mov.w	r9, #1
   1707a:	e7de      	b.n	1703a <isr_rx_scan+0x202>
			BDADDR_SIZE) == 0))) ||
   1707c:	f04f 0901 	mov.w	r9, #1
   17080:	e7de      	b.n	17040 <isr_rx_scan+0x208>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   17082:	2300      	movs	r3, #0
   17084:	e729      	b.n	16eda <isr_rx_scan+0xa2>
   17086:	2301      	movs	r3, #1
   17088:	e727      	b.n	16eda <isr_rx_scan+0xa2>
		return (_radio.packet_rx_count -
   1708a:	4909      	ldr	r1, [pc, #36]	; (170b0 <isr_rx_scan+0x278>)
   1708c:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   17090:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   17094:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   17096:	fa52 f383 	uxtab	r3, r2, r3
   1709a:	b2db      	uxtb	r3, r3
   1709c:	e743      	b.n	16f26 <isr_rx_scan+0xee>
		return 0;
   1709e:	f04f 0900 	mov.w	r9, #0
   170a2:	e74a      	b.n	16f3a <isr_rx_scan+0x102>
   170a4:	f3af 8000 	nop.w
   170a8:	3b9aca00 	.word	0x3b9aca00
   170ac:	00000000 	.word	0x00000000
   170b0:	20000fec 	.word	0x20000fec
   170b4:	1afd498d 	.word	0x1afd498d
   170b8:	200010d2 	.word	0x200010d2
   170bc:	200010cc 	.word	0x200010cc
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   170c0:	4962      	ldr	r1, [pc, #392]	; (1724c <isr_rx_scan+0x414>)
   170c2:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   170c6:	09db      	lsrs	r3, r3, #7
   170c8:	7832      	ldrb	r2, [r6, #0]
   170ca:	f363 1286 	bfi	r2, r3, #6, #1
   170ce:	4630      	mov	r0, r6
   170d0:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   170d4:	2206      	movs	r2, #6
   170d6:	31e0      	adds	r1, #224	; 0xe0
   170d8:	f7e9 f8f2 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
   170dc:	f106 0308 	add.w	r3, r6, #8
   170e0:	930b      	str	r3, [sp, #44]	; 0x2c
   170e2:	2206      	movs	r2, #6
   170e4:	f104 010a 	add.w	r1, r4, #10
   170e8:	4618      	mov	r0, r3
   170ea:	f7e9 f8e9 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
   170ee:	2204      	movs	r2, #4
   170f0:	f108 0110 	add.w	r1, r8, #16
   170f4:	f106 000e 	add.w	r0, r6, #14
   170f8:	f7e9 f8e2 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
   170fc:	2203      	movs	r2, #3
   170fe:	f108 0114 	add.w	r1, r8, #20
   17102:	f106 0012 	add.w	r0, r6, #18
   17106:	f7e9 f8db 	bl	2c0 <memcpy>
		pdu_adv_tx->payload.connect_ind.lldata.win_size = 1;
   1710a:	2301      	movs	r3, #1
   1710c:	7573      	strb	r3, [r6, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   1710e:	4b4f      	ldr	r3, [pc, #316]	; (1724c <isr_rx_scan+0x414>)
   17110:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
		conn_interval_us =
   17114:	f240 42e2 	movw	r2, #1250	; 0x4e2
   17118:	fb02 fb03 	mul.w	fp, r2, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   1711c:	f7f8 fc2e 	bl	f97c <radio_tmr_end_get>
   17120:	f500 6adb 	add.w	sl, r0, #1752	; 0x6d8
		if (!_radio.remainder_anchor ||
   17124:	4b49      	ldr	r3, [pc, #292]	; (1724c <isr_rx_scan+0x414>)
   17126:	689b      	ldr	r3, [r3, #8]
   17128:	2b00      	cmp	r3, #0
   1712a:	dd75      	ble.n	17218 <isr_rx_scan+0x3e0>
		if (_radio.scanner.win_offset_us == 0) {
   1712c:	4b47      	ldr	r3, [pc, #284]	; (1724c <isr_rx_scan+0x414>)
   1712e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   17132:	2b00      	cmp	r3, #0
   17134:	d174      	bne.n	17220 <isr_rx_scan+0x3e8>
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
   17136:	75b3      	strb	r3, [r6, #22]
   17138:	75f3      	strb	r3, [r6, #23]
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   1713a:	2100      	movs	r1, #0
   1713c:	4608      	mov	r0, r1
   1713e:	f7f8 fa33 	bl	f5a8 <radio_tx_ready_delay_get>
   17142:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   17146:	2100      	movs	r1, #0
   17148:	4608      	mov	r0, r1
   1714a:	f7f8 fa2f 	bl	f5ac <radio_tx_chain_delay_get>
   1714e:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us += TICKER_TICKS_TO_US(1);
   17152:	f10a 031e 	add.w	r3, sl, #30
   17156:	930c      	str	r3, [sp, #48]	; 0x30
			_radio.scanner.conn_interval;
   17158:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 1724c <isr_rx_scan+0x414>
		pdu_adv_tx->payload.connect_ind.lldata.interval =
   1715c:	f8ba 30f0 	ldrh.w	r3, [sl, #240]	; 0xf0
   17160:	8333      	strh	r3, [r6, #24]
		pdu_adv_tx->payload.connect_ind.lldata.latency =
   17162:	f8ba 30f2 	ldrh.w	r3, [sl, #242]	; 0xf2
   17166:	8373      	strh	r3, [r6, #26]
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
   17168:	f8ba 30f4 	ldrh.w	r3, [sl, #244]	; 0xf4
   1716c:	83b3      	strh	r3, [r6, #28]
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
   1716e:	2205      	movs	r2, #5
   17170:	f108 0117 	add.w	r1, r8, #23
   17174:	f106 001e 	add.w	r0, r6, #30
   17178:	f7e9 f8a2 	bl	2c0 <memcpy>
			conn->data_chan_hop;
   1717c:	f898 201e 	ldrb.w	r2, [r8, #30]
		pdu_adv_tx->payload.connect_ind.lldata.hop =
   17180:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   17184:	f362 0304 	bfi	r3, r2, #0, #5
   17188:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		pdu_adv_tx->payload.connect_ind.lldata.sca = _radio.sca;
   1718c:	f89a 211c 	ldrb.w	r2, [sl, #284]	; 0x11c
   17190:	b2db      	uxtb	r3, r3
   17192:	f362 1347 	bfi	r3, r2, #5, #3
   17196:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		radio_switch_complete_and_disable();
   1719a:	f7f8 fa83 	bl	f6a4 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   1719e:	4630      	mov	r0, r6
   171a0:	f7f8 f9fc 	bl	f59c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   171a4:	f7f8 fa32 	bl	f60c <radio_is_ready>
   171a8:	4682      	mov	sl, r0
   171aa:	2800      	cmp	r0, #0
   171ac:	d148      	bne.n	17240 <isr_rx_scan+0x408>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   171ae:	f44f 72aa 	mov.w	r2, #340	; 0x154
   171b2:	4b26      	ldr	r3, [pc, #152]	; (1724c <isr_rx_scan+0x414>)
   171b4:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   171b8:	4640      	mov	r0, r8
   171ba:	f7f8 f838 	bl	f22e <mem_index_get>
   171be:	f8a8 0020 	strh.w	r0, [r8, #32]
		radio_pdu_node_rx->hdr.handle = conn->handle;
   171c2:	f8a9 0006 	strh.w	r0, [r9, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   171c6:	2206      	movs	r2, #6
   171c8:	f889 2004 	strb.w	r2, [r9, #4]
		radio_le_conn_cmplt->status = 0x00;
   171cc:	2300      	movs	r3, #0
   171ce:	f889 300b 	strb.w	r3, [r9, #11]
		radio_le_conn_cmplt->role = 0x00;
   171d2:	f889 300c 	strb.w	r3, [r9, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   171d6:	4631      	mov	r1, r6
   171d8:	f811 3b02 	ldrb.w	r3, [r1], #2
   171dc:	f3c3 1380 	ubfx	r3, r3, #6, #1
   171e0:	f889 301a 	strb.w	r3, [r9, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   171e4:	f109 001b 	add.w	r0, r9, #27
   171e8:	f7e9 f86a 	bl	2c0 <memcpy>
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   171ec:	b397      	cbz	r7, 17254 <isr_rx_scan+0x41c>
   171ee:	2dff      	cmp	r5, #255	; 0xff
   171f0:	d030      	beq.n	17254 <isr_rx_scan+0x41c>
			ll_rl_id_addr_get(rl_idx,
   171f2:	f109 020e 	add.w	r2, r9, #14
   171f6:	f109 010d 	add.w	r1, r9, #13
   171fa:	4628      	mov	r0, r5
   171fc:	f002 fc96 	bl	19b2c <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   17200:	f899 300d 	ldrb.w	r3, [r9, #13]
   17204:	3302      	adds	r3, #2
   17206:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   1720a:	2206      	movs	r2, #6
   1720c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1720e:	f109 0014 	add.w	r0, r9, #20
   17212:	f7e9 f855 	bl	2c0 <memcpy>
   17216:	e02e      	b.n	17276 <isr_rx_scan+0x43e>
			conn_offset_us -= TICKER_TICKS_TO_US(1);
   17218:	f200 6aba 	addw	sl, r0, #1722	; 0x6ba
   1721c:	e786      	b.n	1712c <isr_rx_scan+0x2f4>
				conn_space_us += conn_interval_us;
   1721e:	445b      	add	r3, fp
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   17220:	2b00      	cmp	r3, #0
   17222:	dbfc      	blt.n	1721e <isr_rx_scan+0x3e6>
   17224:	459a      	cmp	sl, r3
   17226:	d8fa      	bhi.n	1721e <isr_rx_scan+0x3e6>
				(conn_space_us - conn_offset_us) / 1250;
   17228:	eba3 020a 	sub.w	r2, r3, sl
   1722c:	4908      	ldr	r1, [pc, #32]	; (17250 <isr_rx_scan+0x418>)
   1722e:	fba1 1202 	umull	r1, r2, r1, r2
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
   17232:	0a92      	lsrs	r2, r2, #10
   17234:	82f2      	strh	r2, [r6, #22]
			pdu_adv_tx->payload.connect_ind.lldata.win_size++;
   17236:	7d72      	ldrb	r2, [r6, #21]
   17238:	3201      	adds	r2, #1
   1723a:	7572      	strb	r2, [r6, #21]
   1723c:	469a      	mov	sl, r3
   1723e:	e77c      	b.n	1713a <isr_rx_scan+0x302>
		LL_ASSERT(!radio_is_ready());
   17240:	4040      	eors	r0, r0
   17242:	f380 8811 	msr	BASEPRI, r0
   17246:	f04f 0004 	mov.w	r0, #4
   1724a:	df02      	svc	2
   1724c:	20000fec 	.word	0x20000fec
   17250:	d1b71759 	.word	0xd1b71759
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   17254:	2206      	movs	r2, #6
   17256:	2100      	movs	r1, #0
   17258:	f109 0014 	add.w	r0, r9, #20
   1725c:	f012 ff90 	bl	2a180 <memset>
				pdu_adv_tx->rx_addr;
   17260:	7833      	ldrb	r3, [r6, #0]
   17262:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   17266:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   1726a:	2206      	movs	r2, #6
   1726c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1726e:	f109 000e 	add.w	r0, r9, #14
   17272:	f7e9 f825 	bl	2c0 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   17276:	4dce      	ldr	r5, [pc, #824]	; (175b0 <isr_rx_scan+0x778>)
   17278:	f8b5 30f0 	ldrh.w	r3, [r5, #240]	; 0xf0
   1727c:	f8a9 3021 	strh.w	r3, [r9, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
   17280:	f8b5 30f2 	ldrh.w	r3, [r5, #242]	; 0xf2
   17284:	f8a9 3023 	strh.w	r3, [r9, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   17288:	f8b5 30f4 	ldrh.w	r3, [r5, #244]	; 0xf4
   1728c:	f8a9 3025 	strh.w	r3, [r9, #37]	; 0x25
			pdu_adv_tx->payload.connect_ind.lldata.sca;
   17290:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   17294:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   17298:	f889 3027 	strb.w	r3, [r9, #39]	; 0x27
		rx_fc_lock(conn->handle);
   1729c:	f8b8 0020 	ldrh.w	r0, [r8, #32]
   172a0:	f7fa fae2 	bl	11868 <rx_fc_lock>
		packet_rx_enqueue();
   172a4:	f7fc ffca 	bl	1423c <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   172a8:	f895 113e 	ldrb.w	r1, [r5, #318]	; 0x13e
	    _radio.packet_rx_last) {
   172ac:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   172b0:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   172b2:	4291      	cmp	r1, r2
   172b4:	f0c0 80b9 	bcc.w	1742a <isr_rx_scan+0x5f2>
			_radio.packet_rx_last);
   172b8:	f895 313d 	ldrb.w	r3, [r5, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   172bc:	1acb      	subs	r3, r1, r3
   172be:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   172c0:	2b02      	cmp	r3, #2
   172c2:	f240 80bc 	bls.w	1743e <isr_rx_scan+0x606>
	return _radio.packet_rx[_radio.packet_rx_last];
   172c6:	4bba      	ldr	r3, [pc, #744]	; (175b0 <isr_rx_scan+0x778>)
   172c8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   172cc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   172d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   172d4:	2b00      	cmp	r3, #0
   172d6:	f000 80b4 	beq.w	17442 <isr_rx_scan+0x60a>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   172da:	f8b8 2020 	ldrh.w	r2, [r8, #32]
   172de:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   172e0:	220b      	movs	r2, #11
   172e2:	711a      	strb	r2, [r3, #4]
			if (pdu_adv_rx->chan_sel) {
   172e4:	7a22      	ldrb	r2, [r4, #8]
   172e6:	f012 0f20 	tst.w	r2, #32
   172ea:	f000 80b0 	beq.w	1744e <isr_rx_scan+0x616>
					((u16_t)conn->access_addr[1] << 8) |
   172ee:	f898 1011 	ldrb.w	r1, [r8, #17]
					conn->access_addr[0];
   172f2:	f898 2010 	ldrb.w	r2, [r8, #16]
				u16_t aa_ls =
   172f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   172fa:	f898 0013 	ldrb.w	r0, [r8, #19]
					 conn->access_addr[2];
   172fe:	f898 1012 	ldrb.w	r1, [r8, #18]
				u16_t aa_ms =
   17302:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   17306:	f898 001d 	ldrb.w	r0, [r8, #29]
   1730a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1730e:	f888 001d 	strb.w	r0, [r8, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   17312:	404a      	eors	r2, r1
   17314:	f8a8 201e 	strh.w	r2, [r8, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   17318:	2201      	movs	r2, #1
   1731a:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   1731c:	f7fc ff8e 	bl	1423c <packet_rx_enqueue>
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   17320:	4ea3      	ldr	r6, [pc, #652]	; (175b0 <isr_rx_scan+0x778>)
   17322:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   17326:	f8c8 300c 	str.w	r3, [r8, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   1732a:	f8d6 5180 	ldr.w	r5, [r6, #384]	; 0x180
   1732e:	f8c8 5004 	str.w	r5, [r8, #4]
		conn->hdr.ticks_xtal_to_start =
   17332:	2327      	movs	r3, #39	; 0x27
   17334:	f8c8 3000 	str.w	r3, [r8]
		conn->hdr.ticks_preempt_to_start =
   17338:	2400      	movs	r4, #0
   1733a:	f8c8 4008 	str.w	r4, [r8, #8]
		ticks_slot_offset =
   1733e:	429d      	cmp	r5, r3
   17340:	bf38      	it	cc
   17342:	461d      	movcc	r5, r3
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17344:	f44f 63c6 	mov.w	r3, #1584	; 0x630
   17348:	9300      	str	r3, [sp, #0]
   1734a:	4b9a      	ldr	r3, [pc, #616]	; (175b4 <isr_rx_scan+0x77c>)
   1734c:	2206      	movs	r2, #6
   1734e:	4621      	mov	r1, r4
   17350:	4620      	mov	r0, r4
   17352:	f7f9 fc99 	bl	10c88 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   17356:	f240 6131 	movw	r1, #1585	; 0x631
   1735a:	f7fa faed 	bl	11938 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1735e:	9400      	str	r4, [sp, #0]
   17360:	4623      	mov	r3, r4
   17362:	2204      	movs	r2, #4
   17364:	4621      	mov	r1, r4
   17366:	4620      	mov	r0, r4
   17368:	f7f9 fc8e 	bl	10c88 <ticker_stop>
				     conn->handle,
   1736c:	f8b8 3020 	ldrh.w	r3, [r8, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17370:	3307      	adds	r3, #7
   17372:	b2db      	uxtb	r3, r3
   17374:	930b      	str	r3, [sp, #44]	; 0x2c
				     (_radio.ticks_anchor - ticks_slot_offset),
   17376:	6876      	ldr	r6, [r6, #4]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17378:	1b76      	subs	r6, r6, r5
				     TICKER_US_TO_TICKS(conn_space_us),
   1737a:	4f8f      	ldr	r7, [pc, #572]	; (175b8 <isr_rx_scan+0x780>)
   1737c:	a38a      	add	r3, pc, #552	; (adr r3, 175a8 <isr_rx_scan+0x770>)
   1737e:	e9d3 2300 	ldrd	r2, r3, [r3]
   17382:	990c      	ldr	r1, [sp, #48]	; 0x30
   17384:	fba1 0107 	umull	r0, r1, r1, r7
   17388:	f7e9 feb8 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1738c:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
				     TICKER_US_TO_TICKS(conn_interval_us),
   17390:	fbab 1207 	umull	r1, r2, fp, r7
   17394:	468b      	mov	fp, r1
   17396:	4694      	mov	ip, r2
   17398:	a383      	add	r3, pc, #524	; (adr r3, 175a8 <isr_rx_scan+0x770>)
   1739a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1739e:	e9cd bc0c 	strd	fp, ip, [sp, #48]	; 0x30
   173a2:	4658      	mov	r0, fp
   173a4:	4661      	mov	r1, ip
   173a6:	f7e9 fea9 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   173aa:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
				     TICKER_REMAINDER(conn_interval_us),
   173ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   173b2:	2100      	movs	r1, #0
   173b4:	4a81      	ldr	r2, [pc, #516]	; (175bc <isr_rx_scan+0x784>)
   173b6:	2307      	movs	r3, #7
   173b8:	fb03 f300 	mul.w	r3, r3, r0
   173bc:	fb02 3301 	mla	r3, r2, r1, r3
   173c0:	fba0 0102 	umull	r0, r1, r0, r2
   173c4:	4419      	add	r1, r3
   173c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   173ca:	2300      	movs	r3, #0
   173cc:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	; 0x30
   173d0:	ebbb 0b00 	subs.w	fp, fp, r0
   173d4:	eb6c 0c01 	sbc.w	ip, ip, r1
   173d8:	4658      	mov	r0, fp
   173da:	4661      	mov	r1, ip
   173dc:	f7e9 fe8e 	bl	10fc <__aeabi_uldivmod>
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   173e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   173e4:	442b      	add	r3, r5
   173e6:	b29b      	uxth	r3, r3
		ticker_status =
   173e8:	f44f 62c9 	mov.w	r2, #1608	; 0x648
   173ec:	9208      	str	r2, [sp, #32]
   173ee:	4a74      	ldr	r2, [pc, #464]	; (175c0 <isr_rx_scan+0x788>)
   173f0:	9207      	str	r2, [sp, #28]
   173f2:	f8cd 8018 	str.w	r8, [sp, #24]
   173f6:	4a73      	ldr	r2, [pc, #460]	; (175c4 <isr_rx_scan+0x78c>)
   173f8:	9205      	str	r2, [sp, #20]
   173fa:	9304      	str	r3, [sp, #16]
   173fc:	9403      	str	r4, [sp, #12]
   173fe:	9002      	str	r0, [sp, #8]
   17400:	9701      	str	r7, [sp, #4]
   17402:	f8cd 9000 	str.w	r9, [sp]
   17406:	4633      	mov	r3, r6
   17408:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1740a:	4621      	mov	r1, r4
   1740c:	4620      	mov	r0, r4
   1740e:	f7f9 fb9f 	bl	10b50 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17412:	2800      	cmp	r0, #0
   17414:	f000 8132 	beq.w	1767c <isr_rx_scan+0x844>
   17418:	2802      	cmp	r0, #2
   1741a:	f000 811b 	beq.w	17654 <isr_rx_scan+0x81c>
   1741e:	4040      	eors	r0, r0
   17420:	f380 8811 	msr	BASEPRI, r0
   17424:	f04f 0004 	mov.w	r0, #4
   17428:	df02      	svc	2
		return (_radio.packet_rx_count -
   1742a:	4a61      	ldr	r2, [pc, #388]	; (175b0 <isr_rx_scan+0x778>)
   1742c:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   17430:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   17434:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   17436:	fa51 f383 	uxtab	r3, r1, r3
   1743a:	b2db      	uxtb	r3, r3
   1743c:	e740      	b.n	172c0 <isr_rx_scan+0x488>
		return 0;
   1743e:	2300      	movs	r3, #0
   17440:	e748      	b.n	172d4 <isr_rx_scan+0x49c>
			LL_ASSERT(radio_pdu_node_rx);
   17442:	4040      	eors	r0, r0
   17444:	f380 8811 	msr	BASEPRI, r0
   17448:	f04f 0004 	mov.w	r0, #4
   1744c:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   1744e:	2200      	movs	r2, #0
   17450:	72da      	strb	r2, [r3, #11]
   17452:	e763      	b.n	1731c <isr_rx_scan+0x4e4>
		 (_radio.scanner.type != 0) &&
   17454:	4a56      	ldr	r2, [pc, #344]	; (175b0 <isr_rx_scan+0x778>)
   17456:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1745a:	f012 0f08 	tst.w	r2, #8
   1745e:	f43f ad13 	beq.w	16e88 <isr_rx_scan+0x50>
		 (_radio.scanner.conn == 0)) {
   17462:	4a53      	ldr	r2, [pc, #332]	; (175b0 <isr_rx_scan+0x778>)
   17464:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
		 (_radio.scanner.type != 0) &&
   17468:	2a00      	cmp	r2, #0
   1746a:	f47f ad0d 	bne.w	16e88 <isr_rx_scan+0x50>
		err = isr_rx_scan_report(rssi_ready,
   1746e:	b37f      	cbz	r7, 174d0 <isr_rx_scan+0x698>
   17470:	4629      	mov	r1, r5
   17472:	2200      	movs	r2, #0
   17474:	4630      	mov	r0, r6
   17476:	f7fc ff81 	bl	1437c <isr_rx_scan_report>
		if (err) {
   1747a:	4682      	mov	sl, r0
   1747c:	2800      	cmp	r0, #0
   1747e:	f040 80e9 	bne.w	17654 <isr_rx_scan+0x81c>
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   17482:	f7f8 f8fb 	bl	f67c <radio_pkt_scratch_get>
   17486:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   17488:	7803      	ldrb	r3, [r0, #0]
   1748a:	2203      	movs	r2, #3
   1748c:	f362 0303 	bfi	r3, r2, #0, #4
   17490:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   17492:	7a23      	ldrb	r3, [r4, #8]
   17494:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17498:	7802      	ldrb	r2, [r0, #0]
   1749a:	f363 12c7 	bfi	r2, r3, #7, #1
   1749e:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
   174a0:	230c      	movs	r3, #12
   174a2:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   174a4:	4628      	mov	r0, r5
   174a6:	f002 f94b 	bl	19740 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   174aa:	4b41      	ldr	r3, [pc, #260]	; (175b0 <isr_rx_scan+0x778>)
   174ac:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   174b0:	f013 0f01 	tst.w	r3, #1
   174b4:	d00e      	beq.n	174d4 <isr_rx_scan+0x69c>
   174b6:	b168      	cbz	r0, 174d4 <isr_rx_scan+0x69c>
			pdu_adv_tx->tx_addr = 1;
   174b8:	7832      	ldrb	r2, [r6, #0]
   174ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   174be:	4633      	mov	r3, r6
   174c0:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   174c4:	2206      	movs	r2, #6
   174c6:	4601      	mov	r1, r0
   174c8:	4618      	mov	r0, r3
   174ca:	f7e8 fef9 	bl	2c0 <memcpy>
   174ce:	e00f      	b.n	174f0 <isr_rx_scan+0x6b8>
		err = isr_rx_scan_report(rssi_ready,
   174d0:	21ff      	movs	r1, #255	; 0xff
   174d2:	e7ce      	b.n	17472 <isr_rx_scan+0x63a>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   174d4:	4936      	ldr	r1, [pc, #216]	; (175b0 <isr_rx_scan+0x778>)
   174d6:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   174da:	09db      	lsrs	r3, r3, #7
   174dc:	7832      	ldrb	r2, [r6, #0]
   174de:	f363 1286 	bfi	r2, r3, #6, #1
   174e2:	4630      	mov	r0, r6
   174e4:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   174e8:	2206      	movs	r2, #6
   174ea:	31e0      	adds	r1, #224	; 0xe0
   174ec:	f7e8 fee8 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
   174f0:	2206      	movs	r2, #6
   174f2:	f104 010a 	add.w	r1, r4, #10
   174f6:	f106 0008 	add.w	r0, r6, #8
   174fa:	f7e8 fee1 	bl	2c0 <memcpy>
		_radio.scanner.state = 1;
   174fe:	4b2c      	ldr	r3, [pc, #176]	; (175b0 <isr_rx_scan+0x778>)
   17500:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   17504:	f042 0202 	orr.w	r2, r2, #2
   17508:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		_radio.state = STATE_TX;
   1750c:	2202      	movs	r2, #2
   1750e:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   17510:	2096      	movs	r0, #150	; 0x96
   17512:	f7f8 f969 	bl	f7e8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   17516:	2000      	movs	r0, #0
   17518:	f7f8 f8b4 	bl	f684 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   1751c:	4630      	mov	r0, r6
   1751e:	f7f8 f83d 	bl	f59c <radio_pkt_tx_set>
		radio_tmr_end_capture();
   17522:	f7f8 fa19 	bl	f958 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
   17526:	f7f8 f871 	bl	f60c <radio_is_ready>
   1752a:	4682      	mov	sl, r0
   1752c:	2800      	cmp	r0, #0
   1752e:	f000 8091 	beq.w	17654 <isr_rx_scan+0x81c>
   17532:	4040      	eors	r0, r0
   17534:	f380 8811 	msr	BASEPRI, r0
   17538:	f04f 0004 	mov.w	r0, #4
   1753c:	df02      	svc	2
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   1753e:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   17540:	f108 0908 	add.w	r9, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   17544:	462a      	mov	r2, r5
   17546:	4649      	mov	r1, r9
   17548:	09c0      	lsrs	r0, r0, #7
   1754a:	f002 fb73 	bl	19c34 <ctrl_rl_addr_resolve>
   1754e:	4682      	mov	sl, r0
   17550:	2800      	cmp	r0, #0
   17552:	d146      	bne.n	175e2 <isr_rx_scan+0x7aa>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   17554:	4b16      	ldr	r3, [pc, #88]	; (175b0 <isr_rx_scan+0x778>)
   17556:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   1755a:	7a23      	ldrb	r3, [r4, #8]
   1755c:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   1755e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17562:	d00b      	beq.n	1757c <isr_rx_scan+0x744>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   17564:	4b12      	ldr	r3, [pc, #72]	; (175b0 <isr_rx_scan+0x778>)
   17566:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   1756a:	f013 0f20 	tst.w	r3, #32
   1756e:	d02d      	beq.n	175cc <isr_rx_scan+0x794>
   17570:	f994 3008 	ldrsb.w	r3, [r4, #8]
   17574:	2b00      	cmp	r3, #0
   17576:	db0c      	blt.n	17592 <isr_rx_scan+0x75a>
	bool dir_report = false;
   17578:	46d1      	mov	r9, sl
   1757a:	e028      	b.n	175ce <isr_rx_scan+0x796>
		(memcmp(&_radio.scanner.init_addr[0],
   1757c:	2206      	movs	r2, #6
   1757e:	4649      	mov	r1, r9
   17580:	4811      	ldr	r0, [pc, #68]	; (175c8 <isr_rx_scan+0x790>)
   17582:	f012 fd69 	bl	2a058 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   17586:	2800      	cmp	r0, #0
   17588:	d1ec      	bne.n	17564 <isr_rx_scan+0x72c>
	bool dir_report = false;
   1758a:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   1758c:	f04f 0a01 	mov.w	sl, #1
   17590:	e029      	b.n	175e6 <isr_rx_scan+0x7ae>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   17592:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   17596:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1759a:	2b40      	cmp	r3, #64	; 0x40
   1759c:	d01d      	beq.n	175da <isr_rx_scan+0x7a2>
	bool dir_report = false;
   1759e:	46d1      	mov	r9, sl
   175a0:	e015      	b.n	175ce <isr_rx_scan+0x796>
   175a2:	bf00      	nop
   175a4:	f3af 8000 	nop.w
   175a8:	1afd498d 	.word	0x1afd498d
   175ac:	00000007 	.word	0x00000007
   175b0:	20000fec 	.word	0x20000fec
   175b4:	00011939 	.word	0x00011939
   175b8:	3b9aca00 	.word	0x3b9aca00
   175bc:	1afd498d 	.word	0x1afd498d
   175c0:	000118a5 	.word	0x000118a5
   175c4:	00016465 	.word	0x00016465
   175c8:	200010cc 	.word	0x200010cc
   175cc:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   175ce:	f1ba 0f00 	cmp.w	sl, #0
   175d2:	d008      	beq.n	175e6 <isr_rx_scan+0x7ae>
   175d4:	f04f 0a01 	mov.w	sl, #1
   175d8:	e005      	b.n	175e6 <isr_rx_scan+0x7ae>
			*dir_report = true;
   175da:	f04f 0901 	mov.w	r9, #1
		return true;
   175de:	46ca      	mov	sl, r9
   175e0:	e7f5      	b.n	175ce <isr_rx_scan+0x796>
	bool dir_report = false;
   175e2:	f04f 0900 	mov.w	r9, #0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   175e6:	f1ba 0f00 	cmp.w	sl, #0
   175ea:	d12b      	bne.n	17644 <isr_rx_scan+0x80c>
   175ec:	e454      	b.n	16e98 <isr_rx_scan+0x60>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   175ee:	4a26      	ldr	r2, [pc, #152]	; (17688 <isr_rx_scan+0x850>)
   175f0:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
   175f4:	f012 0f07 	tst.w	r2, #7
   175f8:	d124      	bne.n	17644 <isr_rx_scan+0x80c>
   175fa:	e459      	b.n	16eb0 <isr_rx_scan+0x78>
		   (_radio.scanner.state != 0) &&
   175fc:	4b22      	ldr	r3, [pc, #136]	; (17688 <isr_rx_scan+0x850>)
   175fe:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   17602:	f013 0f02 	tst.w	r3, #2
   17606:	d102      	bne.n	1760e <isr_rx_scan+0x7d6>
		return 1;
   17608:	f04f 0a01 	mov.w	sl, #1
   1760c:	e022      	b.n	17654 <isr_rx_scan+0x81c>
	struct pdu_adv *sreq = (struct pdu_adv *)radio_pkt_scratch_get();
   1760e:	f7f8 f835 	bl	f67c <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   17612:	7802      	ldrb	r2, [r0, #0]
   17614:	7a23      	ldrb	r3, [r4, #8]
   17616:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1761a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1761e:	d004      	beq.n	1762a <isr_rx_scan+0x7f2>
   17620:	2300      	movs	r3, #0
		   (_radio.scanner.state != 0) &&
   17622:	b97b      	cbnz	r3, 17644 <isr_rx_scan+0x80c>
		return 1;
   17624:	f04f 0a01 	mov.w	sl, #1
   17628:	e014      	b.n	17654 <isr_rx_scan+0x81c>
		(memcmp(&sreq->payload.scan_req.adv_addr[0],
   1762a:	2206      	movs	r2, #6
   1762c:	f108 0102 	add.w	r1, r8, #2
   17630:	3008      	adds	r0, #8
   17632:	f012 fd11 	bl	2a058 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   17636:	b108      	cbz	r0, 1763c <isr_rx_scan+0x804>
   17638:	2300      	movs	r3, #0
   1763a:	e7f2      	b.n	17622 <isr_rx_scan+0x7ea>
   1763c:	2301      	movs	r3, #1
   1763e:	e7f0      	b.n	17622 <isr_rx_scan+0x7ea>
	bool dir_report = false;
   17640:	f04f 0900 	mov.w	r9, #0
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   17644:	7a63      	ldrb	r3, [r4, #9]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   17646:	b1db      	cbz	r3, 17680 <isr_rx_scan+0x848>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   17648:	4b0f      	ldr	r3, [pc, #60]	; (17688 <isr_rx_scan+0x850>)
   1764a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   1764e:	b12b      	cbz	r3, 1765c <isr_rx_scan+0x824>
		return 1;
   17650:	f04f 0a01 	mov.w	sl, #1
}
   17654:	4650      	mov	r0, sl
   17656:	b00f      	add	sp, #60	; 0x3c
   17658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = isr_rx_scan_report(rssi_ready,
   1765c:	b907      	cbnz	r7, 17660 <isr_rx_scan+0x828>
   1765e:	25ff      	movs	r5, #255	; 0xff
   17660:	464a      	mov	r2, r9
   17662:	4629      	mov	r1, r5
   17664:	4630      	mov	r0, r6
   17666:	f7fc fe89 	bl	1437c <isr_rx_scan_report>
		if (err) {
   1766a:	4682      	mov	sl, r0
   1766c:	2800      	cmp	r0, #0
   1766e:	d1f1      	bne.n	17654 <isr_rx_scan+0x81c>
	return 1;
   17670:	f04f 0a01 	mov.w	sl, #1
   17674:	e7ee      	b.n	17654 <isr_rx_scan+0x81c>
			return 1;
   17676:	f04f 0a01 	mov.w	sl, #1
   1767a:	e7eb      	b.n	17654 <isr_rx_scan+0x81c>
		return 0;
   1767c:	4682      	mov	sl, r0
   1767e:	e7e9      	b.n	17654 <isr_rx_scan+0x81c>
		return 1;
   17680:	f04f 0a01 	mov.w	sl, #1
   17684:	e7e6      	b.n	17654 <isr_rx_scan+0x81c>
   17686:	bf00      	nop
   17688:	20000fec 	.word	0x20000fec
   1768c:	00000000 	.word	0x00000000

00017690 <isr_rx_adv>:
{
   17690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17694:	b08f      	sub	sp, #60	; 0x3c
   17696:	4604      	mov	r4, r0
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   17698:	b9fa      	cbnz	r2, 176da <isr_rx_adv+0x4a>
   1769a:	20ff      	movs	r0, #255	; 0xff
   1769c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
   176a0:	f7f7 ffec 	bl	f67c <radio_pkt_scratch_get>
   176a4:	4680      	mov	r8, r0
		[_radio.advertiser.adv_data.first][0];
   176a6:	4f9d      	ldr	r7, [pc, #628]	; (1791c <isr_rx_adv+0x28c>)
   176a8:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
   176ac:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   176b0:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   176b4:	3320      	adds	r3, #32
   176b6:	441f      	add	r7, r3
   176b8:	1dfd      	adds	r5, r7, #7
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   176ba:	7803      	ldrb	r3, [r0, #0]
   176bc:	f003 030f 	and.w	r3, r3, #15
   176c0:	2b03      	cmp	r3, #3
   176c2:	d00e      	beq.n	176e2 <isr_rx_adv+0x52>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   176c4:	f898 3000 	ldrb.w	r3, [r8]
   176c8:	f003 030f 	and.w	r3, r3, #15
   176cc:	2b05      	cmp	r3, #5
   176ce:	d065      	beq.n	1779c <isr_rx_adv+0x10c>
	return 1;
   176d0:	2301      	movs	r3, #1
}
   176d2:	4618      	mov	r0, r3
   176d4:	b00f      	add	sp, #60	; 0x3c
   176d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   176da:	4618      	mov	r0, r3
   176dc:	f002 f892 	bl	19804 <ctrl_rl_irk_idx>
   176e0:	e7dc      	b.n	1769c <isr_rx_adv+0xc>
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   176e2:	7843      	ldrb	r3, [r0, #1]
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   176e4:	2b0c      	cmp	r3, #12
   176e6:	d1ed      	bne.n	176c4 <isr_rx_adv+0x34>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   176e8:	4b8c      	ldr	r3, [pc, #560]	; (1791c <isr_rx_adv+0x28c>)
   176ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   176ee:	f013 0f40 	tst.w	r3, #64	; 0x40
   176f2:	d030      	beq.n	17756 <isr_rx_adv+0xc6>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   176f4:	4b89      	ldr	r3, [pc, #548]	; (1791c <isr_rx_adv+0x28c>)
   176f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   176fa:	f013 0f40 	tst.w	r3, #64	; 0x40
   176fe:	d04b      	beq.n	17798 <isr_rx_adv+0x108>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   17700:	2c00      	cmp	r4, #0
   17702:	d034      	beq.n	1776e <isr_rx_adv+0xde>
	return (adv->tx_addr == sr->rx_addr) &&
   17704:	79fb      	ldrb	r3, [r7, #7]
   17706:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1770a:	f898 2000 	ldrb.w	r2, [r8]
   1770e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17712:	d034      	beq.n	1777e <isr_rx_adv+0xee>
   17714:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17716:	2b00      	cmp	r3, #0
   17718:	d13c      	bne.n	17794 <isr_rx_adv+0x104>
   1771a:	2300      	movs	r3, #0
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   1771c:	2b00      	cmp	r3, #0
   1771e:	d0d1      	beq.n	176c4 <isr_rx_adv+0x34>
		_radio.state = STATE_CLOSE;
   17720:	4c7e      	ldr	r4, [pc, #504]	; (1791c <isr_rx_adv+0x28c>)
   17722:	2303      	movs	r3, #3
   17724:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
   17726:	f7f7 ffbd 	bl	f6a4 <radio_switch_complete_and_disable>
		     data[_radio.advertiser.scan_data.first][0]);
   1772a:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
		radio_pkt_tx_set(&_radio.advertiser.scan_data.
   1772e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   17732:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   17736:	3370      	adds	r3, #112	; 0x70
   17738:	4423      	add	r3, r4
   1773a:	1dd8      	adds	r0, r3, #7
   1773c:	f7f7 ff2e 	bl	f59c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   17740:	f7f7 ff64 	bl	f60c <radio_is_ready>
   17744:	4603      	mov	r3, r0
   17746:	2800      	cmp	r0, #0
   17748:	d0c3      	beq.n	176d2 <isr_rx_adv+0x42>
   1774a:	4040      	eors	r0, r0
   1774c:	f380 8811 	msr	BASEPRI, r0
   17750:	f04f 0004 	mov.w	r0, #4
   17754:	df02      	svc	2
		 ctrl_rl_addr_allowed(sr->tx_addr,
   17756:	4601      	mov	r1, r0
   17758:	f811 0b02 	ldrb.w	r0, [r1], #2
   1775c:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   17760:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17764:	f002 fa0e 	bl	19b84 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   17768:	2800      	cmp	r0, #0
   1776a:	d1cb      	bne.n	17704 <isr_rx_adv+0x74>
   1776c:	e7c2      	b.n	176f4 <isr_rx_adv+0x64>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1776e:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   17772:	f002 f871 	bl	19858 <ctrl_irk_whitelisted>
   17776:	2800      	cmp	r0, #0
   17778:	d1c4      	bne.n	17704 <isr_rx_adv+0x74>
   1777a:	2300      	movs	r3, #0
   1777c:	e7ce      	b.n	1771c <isr_rx_adv+0x8c>
		 !memcmp(adv->payload.adv_ind.addr,
   1777e:	2206      	movs	r2, #6
   17780:	f108 0108 	add.w	r1, r8, #8
   17784:	1ca8      	adds	r0, r5, #2
   17786:	f012 fc67 	bl	2a058 <memcmp>
	return (adv->tx_addr == sr->rx_addr) &&
   1778a:	b908      	cbnz	r0, 17790 <isr_rx_adv+0x100>
   1778c:	2301      	movs	r3, #1
   1778e:	e7c2      	b.n	17716 <isr_rx_adv+0x86>
   17790:	2300      	movs	r3, #0
   17792:	e7c0      	b.n	17716 <isr_rx_adv+0x86>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17794:	2301      	movs	r3, #1
   17796:	e7c1      	b.n	1771c <isr_rx_adv+0x8c>
   17798:	2300      	movs	r3, #0
   1779a:	e7bf      	b.n	1771c <isr_rx_adv+0x8c>
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   1779c:	f898 3001 	ldrb.w	r3, [r8, #1]
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   177a0:	2b22      	cmp	r3, #34	; 0x22
   177a2:	d001      	beq.n	177a8 <isr_rx_adv+0x118>
	return 1;
   177a4:	2301      	movs	r3, #1
   177a6:	e794      	b.n	176d2 <isr_rx_adv+0x42>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   177a8:	79fb      	ldrb	r3, [r7, #7]
   177aa:	f003 030f 	and.w	r3, r3, #15
   177ae:	2b01      	cmp	r3, #1
   177b0:	d01a      	beq.n	177e8 <isr_rx_adv+0x158>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   177b2:	4b5a      	ldr	r3, [pc, #360]	; (1791c <isr_rx_adv+0x28c>)
   177b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   177b8:	09db      	lsrs	r3, r3, #7
   177ba:	d06d      	beq.n	17898 <isr_rx_adv+0x208>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   177bc:	4b57      	ldr	r3, [pc, #348]	; (1791c <isr_rx_adv+0x28c>)
   177be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   177c2:	09db      	lsrs	r3, r3, #7
   177c4:	f000 8096 	beq.w	178f4 <isr_rx_adv+0x264>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   177c8:	2c00      	cmp	r4, #0
   177ca:	d071      	beq.n	178b0 <isr_rx_adv+0x220>
	return (adv->tx_addr == ci->rx_addr) &&
   177cc:	79fb      	ldrb	r3, [r7, #7]
   177ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
   177d2:	f898 2000 	ldrb.w	r2, [r8]
   177d6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   177da:	d071      	beq.n	178c0 <isr_rx_adv+0x230>
   177dc:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   177de:	2b00      	cmp	r3, #0
   177e0:	f000 809a 	beq.w	17918 <isr_rx_adv+0x288>
   177e4:	2301      	movs	r3, #1
   177e6:	e086      	b.n	178f6 <isr_rx_adv+0x266>
		return ctrl_rl_addr_allowed(ci->tx_addr,
   177e8:	4641      	mov	r1, r8
   177ea:	f811 0b02 	ldrb.w	r0, [r1], #2
   177ee:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   177f2:	f3c0 1080 	ubfx	r0, r0, #6, #1
   177f6:	f002 f9c5 	bl	19b84 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
   177fa:	b908      	cbnz	r0, 17800 <isr_rx_adv+0x170>
   177fc:	2300      	movs	r3, #0
   177fe:	e07a      	b.n	178f6 <isr_rx_adv+0x266>
	return (adv->tx_addr == ci->rx_addr) &&
   17800:	79fb      	ldrb	r3, [r7, #7]
   17802:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17806:	f898 2000 	ldrb.w	r2, [r8]
   1780a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1780e:	d003      	beq.n	17818 <isr_rx_adv+0x188>
   17810:	2300      	movs	r3, #0
					    rl_idx) &&
   17812:	b9db      	cbnz	r3, 1784c <isr_rx_adv+0x1bc>
		       isr_adv_ci_adva_check(adv, ci) &&
   17814:	2300      	movs	r3, #0
   17816:	e06e      	b.n	178f6 <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17818:	79fb      	ldrb	r3, [r7, #7]
   1781a:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   1781e:	2b01      	cmp	r3, #1
   17820:	d008      	beq.n	17834 <isr_rx_adv+0x1a4>
		 (!memcmp(adv->payload.adv_ind.addr,
   17822:	2206      	movs	r2, #6
   17824:	f108 0108 	add.w	r1, r8, #8
   17828:	1ca8      	adds	r0, r5, #2
   1782a:	f012 fc15 	bl	2a058 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   1782e:	b958      	cbnz	r0, 17848 <isr_rx_adv+0x1b8>
	return (adv->tx_addr == ci->rx_addr) &&
   17830:	2301      	movs	r3, #1
   17832:	e7ee      	b.n	17812 <isr_rx_adv+0x182>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   17834:	2206      	movs	r2, #6
   17836:	f108 0108 	add.w	r1, r8, #8
   1783a:	1ca8      	adds	r0, r5, #2
   1783c:	f012 fc0c 	bl	2a058 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17840:	2800      	cmp	r0, #0
   17842:	d1ee      	bne.n	17822 <isr_rx_adv+0x192>
	return (adv->tx_addr == ci->rx_addr) &&
   17844:	2301      	movs	r3, #1
   17846:	e7e4      	b.n	17812 <isr_rx_adv+0x182>
   17848:	2300      	movs	r3, #0
   1784a:	e7e2      	b.n	17812 <isr_rx_adv+0x182>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
   1784c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
	if (rl_idx != FILTER_IDX_NONE) {
   17850:	2bff      	cmp	r3, #255	; 0xff
   17852:	d009      	beq.n	17868 <isr_rx_adv+0x1d8>
		return rl_idx == _radio.advertiser.rl_idx;
   17854:	4a31      	ldr	r2, [pc, #196]	; (1791c <isr_rx_adv+0x28c>)
   17856:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   1785a:	4293      	cmp	r3, r2
   1785c:	bf14      	ite	ne
   1785e:	2300      	movne	r3, #0
   17860:	2301      	moveq	r3, #1
		       isr_adv_ci_adva_check(adv, ci) &&
   17862:	b9bb      	cbnz	r3, 17894 <isr_rx_adv+0x204>
   17864:	2300      	movs	r3, #0
   17866:	e046      	b.n	178f6 <isr_rx_adv+0x266>
	return (adv->rx_addr == ci->tx_addr) &&
   17868:	79fa      	ldrb	r2, [r7, #7]
   1786a:	f898 3000 	ldrb.w	r3, [r8]
   1786e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17872:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17876:	d001      	beq.n	1787c <isr_rx_adv+0x1ec>
   17878:	2300      	movs	r3, #0
   1787a:	e7f2      	b.n	17862 <isr_rx_adv+0x1d2>
	       !memcmp(adv->payload.direct_ind.tgt_addr,
   1787c:	2206      	movs	r2, #6
   1787e:	f108 0102 	add.w	r1, r8, #2
   17882:	f105 0008 	add.w	r0, r5, #8
   17886:	f012 fbe7 	bl	2a058 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   1788a:	b908      	cbnz	r0, 17890 <isr_rx_adv+0x200>
   1788c:	2301      	movs	r3, #1
   1788e:	e7e8      	b.n	17862 <isr_rx_adv+0x1d2>
   17890:	2300      	movs	r3, #0
   17892:	e7e6      	b.n	17862 <isr_rx_adv+0x1d2>
		       isr_adv_ci_adva_check(adv, ci) &&
   17894:	2301      	movs	r3, #1
   17896:	e02e      	b.n	178f6 <isr_rx_adv+0x266>
		 ctrl_rl_addr_allowed(ci->tx_addr,
   17898:	4641      	mov	r1, r8
   1789a:	f811 0b02 	ldrb.w	r0, [r1], #2
   1789e:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   178a2:	f3c0 1080 	ubfx	r0, r0, #6, #1
   178a6:	f002 f96d 	bl	19b84 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   178aa:	2800      	cmp	r0, #0
   178ac:	d18e      	bne.n	177cc <isr_rx_adv+0x13c>
   178ae:	e785      	b.n	177bc <isr_rx_adv+0x12c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   178b0:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   178b4:	f001 ffd0 	bl	19858 <ctrl_irk_whitelisted>
   178b8:	2800      	cmp	r0, #0
   178ba:	d187      	bne.n	177cc <isr_rx_adv+0x13c>
   178bc:	2300      	movs	r3, #0
   178be:	e01a      	b.n	178f6 <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   178c0:	79fb      	ldrb	r3, [r7, #7]
   178c2:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   178c6:	2b01      	cmp	r3, #1
   178c8:	d008      	beq.n	178dc <isr_rx_adv+0x24c>
		 (!memcmp(adv->payload.adv_ind.addr,
   178ca:	2206      	movs	r2, #6
   178cc:	f108 0108 	add.w	r1, r8, #8
   178d0:	1ca8      	adds	r0, r5, #2
   178d2:	f012 fbc1 	bl	2a058 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   178d6:	b958      	cbnz	r0, 178f0 <isr_rx_adv+0x260>
	return (adv->tx_addr == ci->rx_addr) &&
   178d8:	2301      	movs	r3, #1
   178da:	e780      	b.n	177de <isr_rx_adv+0x14e>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   178dc:	2206      	movs	r2, #6
   178de:	f108 0108 	add.w	r1, r8, #8
   178e2:	1ca8      	adds	r0, r5, #2
   178e4:	f012 fbb8 	bl	2a058 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   178e8:	2800      	cmp	r0, #0
   178ea:	d1ee      	bne.n	178ca <isr_rx_adv+0x23a>
	return (adv->tx_addr == ci->rx_addr) &&
   178ec:	2301      	movs	r3, #1
   178ee:	e776      	b.n	177de <isr_rx_adv+0x14e>
   178f0:	2300      	movs	r3, #0
   178f2:	e774      	b.n	177de <isr_rx_adv+0x14e>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   178f4:	2300      	movs	r3, #0
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   178f6:	2b00      	cmp	r3, #0
   178f8:	f000 8232 	beq.w	17d60 <isr_rx_adv+0x6d0>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   178fc:	4b07      	ldr	r3, [pc, #28]	; (1791c <isr_rx_adv+0x28c>)
   178fe:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
   17902:	b16b      	cbz	r3, 17920 <isr_rx_adv+0x290>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   17904:	4a05      	ldr	r2, [pc, #20]	; (1791c <isr_rx_adv+0x28c>)
   17906:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   1790a:	b2db      	uxtb	r3, r3
   1790c:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   17910:	4293      	cmp	r3, r2
   17912:	d005      	beq.n	17920 <isr_rx_adv+0x290>
	return 1;
   17914:	2301      	movs	r3, #1
   17916:	e6dc      	b.n	176d2 <isr_rx_adv+0x42>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17918:	2300      	movs	r3, #0
   1791a:	e7ec      	b.n	178f6 <isr_rx_adv+0x266>
   1791c:	20000fec 	.word	0x20000fec
		   (_radio.advertiser.conn)) {
   17920:	4bd9      	ldr	r3, [pc, #868]	; (17c88 <isr_rx_adv+0x5f8>)
   17922:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   17926:	2b00      	cmp	r3, #0
   17928:	f000 821c 	beq.w	17d64 <isr_rx_adv+0x6d4>
	if (_radio.packet_rx_acquire >=
   1792c:	4bd6      	ldr	r3, [pc, #856]	; (17c88 <isr_rx_adv+0x5f8>)
   1792e:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17932:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17936:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   17938:	429a      	cmp	r2, r3
   1793a:	f0c0 81cf 	bcc.w	17cdc <isr_rx_adv+0x64c>
			_radio.packet_rx_last);
   1793e:	4bd2      	ldr	r3, [pc, #840]	; (17c88 <isr_rx_adv+0x5f8>)
   17940:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   17944:	1ad3      	subs	r3, r2, r3
   17946:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17948:	2b03      	cmp	r3, #3
   1794a:	f240 81d1 	bls.w	17cf0 <isr_rx_adv+0x660>
	return _radio.packet_rx[_radio.packet_rx_last];
   1794e:	4bce      	ldr	r3, [pc, #824]	; (17c88 <isr_rx_adv+0x5f8>)
   17950:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   17954:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17958:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   1795c:	2d00      	cmp	r5, #0
   1795e:	f000 8203 	beq.w	17d68 <isr_rx_adv+0x6d8>
		_radio.state = STATE_STOP;
   17962:	4ec9      	ldr	r6, [pc, #804]	; (17c88 <isr_rx_adv+0x5f8>)
   17964:	f04f 0904 	mov.w	r9, #4
   17968:	f886 9010 	strb.w	r9, [r6, #16]
		radio_disable();
   1796c:	f7f7 fe34 	bl	f5d8 <radio_disable>
		conn = _radio.advertiser.conn;
   17970:	f8d6 40c8 	ldr.w	r4, [r6, #200]	; 0xc8
		_radio.advertiser.conn = NULL;
   17974:	2300      	movs	r3, #0
   17976:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   1797a:	f44f 72aa 	mov.w	r2, #340	; 0x154
   1797e:	f8d6 1104 	ldr.w	r1, [r6, #260]	; 0x104
   17982:	4620      	mov	r0, r4
   17984:	f7f7 fc53 	bl	f22e <mem_index_get>
   17988:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
   1798a:	2203      	movs	r2, #3
   1798c:	f108 0112 	add.w	r1, r8, #18
   17990:	f104 0014 	add.w	r0, r4, #20
   17994:	f7e8 fc94 	bl	2c0 <memcpy>
		memcpy(&conn->access_addr[0],
   17998:	f104 0a10 	add.w	sl, r4, #16
   1799c:	464a      	mov	r2, r9
   1799e:	f108 010e 	add.w	r1, r8, #14
   179a2:	4650      	mov	r0, sl
   179a4:	f7e8 fc8c 	bl	2c0 <memcpy>
		memcpy(&conn->data_chan_map[0],
   179a8:	f104 0617 	add.w	r6, r4, #23
   179ac:	2205      	movs	r2, #5
   179ae:	f108 011e 	add.w	r1, r8, #30
   179b2:	4630      	mov	r0, r6
   179b4:	f7e8 fc84 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   179b8:	2105      	movs	r1, #5
   179ba:	4630      	mov	r0, r6
   179bc:	f7f7 fc7b 	bl	f2b6 <util_ones_count_get>
		conn->data_chan_count =
   179c0:	7f63      	ldrb	r3, [r4, #29]
   179c2:	f360 0305 	bfi	r3, r0, #0, #6
   179c6:	7763      	strb	r3, [r4, #29]
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
   179c8:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   179cc:	f3c3 0304 	ubfx	r3, r3, #0, #5
   179d0:	77a3      	strb	r3, [r4, #30]
			pdu_adv->payload.connect_ind.lldata.interval;
   179d2:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		conn->conn_interval =
   179d6:	84a3      	strh	r3, [r4, #36]	; 0x24
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
   179d8:	f8b8 3018 	ldrh.w	r3, [r8, #24]
   179dc:	f240 46e2 	movw	r6, #1250	; 0x4e2
   179e0:	fb06 f603 	mul.w	r6, r6, r3
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
   179e4:	f8b8 301a 	ldrh.w	r3, [r8, #26]
   179e8:	84e3      	strh	r3, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   179ea:	464a      	mov	r2, r9
   179ec:	4651      	mov	r1, sl
   179ee:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   179f2:	f7e8 fc65 	bl	2c0 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
   179f6:	f8b8 301c 	ldrh.w	r3, [r8, #28]
   179fa:	f242 7210 	movw	r2, #10000	; 0x2710
   179fe:	fb02 6303 	mla	r3, r2, r3, r6
   17a02:	3b01      	subs	r3, #1
   17a04:	fbb3 f3f6 	udiv	r3, r3, r6
		conn->supervision_reload =
   17a08:	87e3      	strh	r3, [r4, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
   17a0a:	4ba0      	ldr	r3, [pc, #640]	; (17c8c <isr_rx_adv+0x5fc>)
   17a0c:	4433      	add	r3, r6
   17a0e:	fbb3 f3f6 	udiv	r3, r3, r6
   17a12:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   17a16:	4b9e      	ldr	r3, [pc, #632]	; (17c90 <isr_rx_adv+0x600>)
   17a18:	4433      	add	r3, r6
   17a1a:	fbb3 f3f6 	udiv	r3, r3, r6
   17a1e:	b29b      	uxth	r3, r3
   17a20:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   17a24:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   17a26:	1d91      	adds	r1, r2, #6
   17a28:	428b      	cmp	r3, r1
   17a2a:	dd03      	ble.n	17a34 <isr_rx_adv+0x3a4>
				     (conn->apto_reload - (conn->latency + 6)) :
   17a2c:	1a9b      	subs	r3, r3, r2
   17a2e:	b29b      	uxth	r3, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   17a30:	3b06      	subs	r3, #6
   17a32:	b29b      	uxth	r3, r3
   17a34:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
		radio_pdu_node_rx->hdr.handle = conn->handle;
   17a38:	8c23      	ldrh	r3, [r4, #32]
   17a3a:	80eb      	strh	r3, [r5, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17a3c:	2206      	movs	r2, #6
   17a3e:	712a      	strb	r2, [r5, #4]
		radio_le_conn_cmplt->status = 0x00;
   17a40:	2300      	movs	r3, #0
   17a42:	72eb      	strb	r3, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
   17a44:	2301      	movs	r3, #1
   17a46:	732b      	strb	r3, [r5, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   17a48:	4641      	mov	r1, r8
   17a4a:	f811 3b08 	ldrb.w	r3, [r1], #8
   17a4e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   17a52:	76ab      	strb	r3, [r5, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   17a54:	f105 001b 	add.w	r0, r5, #27
   17a58:	f7e8 fc32 	bl	2c0 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
   17a5c:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   17a60:	28ff      	cmp	r0, #255	; 0xff
   17a62:	f000 8147 	beq.w	17cf4 <isr_rx_adv+0x664>
			ll_rl_id_addr_get(rl_idx,
   17a66:	f105 020e 	add.w	r2, r5, #14
   17a6a:	f105 010d 	add.w	r1, r5, #13
   17a6e:	f002 f85d 	bl	19b2c <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   17a72:	7b6b      	ldrb	r3, [r5, #13]
   17a74:	3302      	adds	r3, #2
   17a76:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   17a78:	2206      	movs	r2, #6
   17a7a:	f108 0102 	add.w	r1, r8, #2
   17a7e:	f105 0014 	add.w	r0, r5, #20
   17a82:	f7e8 fc1d 	bl	2c0 <memcpy>
			pdu_adv->payload.connect_ind.lldata.interval;
   17a86:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		radio_le_conn_cmplt->interval =
   17a8a:	f8a5 3021 	strh.w	r3, [r5, #33]	; 0x21
			pdu_adv->payload.connect_ind.lldata.latency;
   17a8e:	f8b8 301a 	ldrh.w	r3, [r8, #26]
		radio_le_conn_cmplt->latency =
   17a92:	f8a5 3023 	strh.w	r3, [r5, #35]	; 0x23
			pdu_adv->payload.connect_ind.lldata.timeout;
   17a96:	f8b8 301c 	ldrh.w	r3, [r8, #28]
		radio_le_conn_cmplt->timeout =
   17a9a:	f8a5 3025 	strh.w	r3, [r5, #37]	; 0x25
			pdu_adv->payload.connect_ind.lldata.sca;
   17a9e:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   17aa2:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   17aa6:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		rx_fc_lock(conn->handle);
   17aaa:	8c20      	ldrh	r0, [r4, #32]
   17aac:	f7f9 fedc 	bl	11868 <rx_fc_lock>
		packet_rx_enqueue();
   17ab0:	f7fc fbc4 	bl	1423c <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   17ab4:	4b74      	ldr	r3, [pc, #464]	; (17c88 <isr_rx_adv+0x5f8>)
   17ab6:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17aba:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17abe:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   17ac0:	429a      	cmp	r2, r3
   17ac2:	f0c0 8129 	bcc.w	17d18 <isr_rx_adv+0x688>
			_radio.packet_rx_last);
   17ac6:	4b70      	ldr	r3, [pc, #448]	; (17c88 <isr_rx_adv+0x5f8>)
   17ac8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   17acc:	1ad3      	subs	r3, r2, r3
   17ace:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17ad0:	2b02      	cmp	r3, #2
   17ad2:	f240 812b 	bls.w	17d2c <isr_rx_adv+0x69c>
	return _radio.packet_rx[_radio.packet_rx_last];
   17ad6:	4b6c      	ldr	r3, [pc, #432]	; (17c88 <isr_rx_adv+0x5f8>)
   17ad8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   17adc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   17ae4:	2b00      	cmp	r3, #0
   17ae6:	f000 8123 	beq.w	17d30 <isr_rx_adv+0x6a0>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   17aea:	8c22      	ldrh	r2, [r4, #32]
   17aec:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   17aee:	220b      	movs	r2, #11
   17af0:	711a      	strb	r2, [r3, #4]
			if (pdu_adv->chan_sel) {
   17af2:	f898 2000 	ldrb.w	r2, [r8]
   17af6:	f012 0f20 	tst.w	r2, #32
   17afa:	f000 811f 	beq.w	17d3c <isr_rx_adv+0x6ac>
					((u16_t)conn->access_addr[1] << 8) |
   17afe:	7c61      	ldrb	r1, [r4, #17]
					conn->access_addr[0];
   17b00:	7c22      	ldrb	r2, [r4, #16]
				u16_t aa_ls =
   17b02:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   17b06:	7ce0      	ldrb	r0, [r4, #19]
					 conn->access_addr[2];
   17b08:	7ca1      	ldrb	r1, [r4, #18]
				u16_t aa_ms =
   17b0a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   17b0e:	7f60      	ldrb	r0, [r4, #29]
   17b10:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   17b14:	7760      	strb	r0, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   17b16:	404a      	eors	r2, r1
   17b18:	83e2      	strh	r2, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   17b1a:	2201      	movs	r2, #1
   17b1c:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   17b1e:	f7fc fb8d 	bl	1423c <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
   17b22:	f898 2023 	ldrb.w	r2, [r8, #35]	; 0x23
   17b26:	0952      	lsrs	r2, r2, #5
   17b28:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   17b2c:	f362 0384 	bfi	r3, r2, #2, #3
   17b30:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   17b34:	4d54      	ldr	r5, [pc, #336]	; (17c88 <isr_rx_adv+0x5f8>)
   17b36:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
   17b3a:	4956      	ldr	r1, [pc, #344]	; (17c94 <isr_rx_adv+0x604>)
   17b3c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
			   gc_lookup_ppm[conn->slave.sca]) *
   17b40:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   17b44:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   17b46:	fb03 f306 	mul.w	r3, r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   17b4a:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   17b4e:	f203 233f 	addw	r3, r3, #575	; 0x23f
   17b52:	4a51      	ldr	r2, [pc, #324]	; (17c98 <isr_rx_adv+0x608>)
   17b54:	fba2 2303 	umull	r2, r3, r2, r3
   17b58:	0c9b      	lsrs	r3, r3, #18
		conn->slave.window_widening_periodic_us =
   17b5a:	6563      	str	r3, [r4, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
   17b5c:	0873      	lsrs	r3, r6, #1
   17b5e:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   17b60:	65a3      	str	r3, [r4, #88]	; 0x58
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
   17b62:	f898 3015 	ldrb.w	r3, [r8, #21]
   17b66:	f240 49e2 	movw	r9, #1250	; 0x4e2
   17b6a:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
   17b6e:	66a3      	str	r3, [r4, #104]	; 0x68
		conn->slave.window_size_prepare_us = 0;
   17b70:	f04f 0b00 	mov.w	fp, #0
   17b74:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0);
   17b78:	4658      	mov	r0, fp
   17b7a:	f7f7 fd19 	bl	f5b0 <radio_rx_ready_delay_get>
   17b7e:	4682      	mov	sl, r0
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   17b80:	f200 4052 	addw	r0, r0, #1106	; 0x452
   17b84:	a33e      	add	r3, pc, #248	; (adr r3, 17c80 <isr_rx_adv+0x5f0>)
   17b86:	e9d3 2300 	ldrd	r2, r3, [r3]
   17b8a:	4944      	ldr	r1, [pc, #272]	; (17c9c <isr_rx_adv+0x60c>)
   17b8c:	fba0 0101 	umull	r0, r1, r0, r1
   17b90:	f7e9 fab4 	bl	10fc <__aeabi_uldivmod>
   17b94:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_slot =
   17b98:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   17b9a:	f8d5 5180 	ldr.w	r5, [r5, #384]	; 0x180
   17b9e:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
   17ba0:	2327      	movs	r3, #39	; 0x27
   17ba2:	6023      	str	r3, [r4, #0]
		conn->hdr.ticks_preempt_to_start =
   17ba4:	f8c4 b008 	str.w	fp, [r4, #8]
		ticks_slot_offset =
   17ba8:	429d      	cmp	r5, r3
   17baa:	bf38      	it	cc
   17bac:	461d      	movcc	r5, r3
			conn->slave.window_widening_periodic_us;
   17bae:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn_interval_us -=
   17bb0:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
   17bb2:	f7f7 fee3 	bl	f97c <radio_tmr_end_get>
			((u64_t)pdu_adv->payload.connect_ind.lldata.win_offset +
   17bb6:	f8b8 2016 	ldrh.w	r2, [r8, #22]
   17bba:	b292      	uxth	r2, r2
		conn_offset_us +=
   17bbc:	fb09 9902 	mla	r9, r9, r2, r9
   17bc0:	4481      	add	r9, r0
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   17bc2:	4659      	mov	r1, fp
   17bc4:	4658      	mov	r0, fp
   17bc6:	f7f7 fcf1 	bl	f5ac <radio_tx_chain_delay_get>
   17bca:	eba9 0000 	sub.w	r0, r9, r0
		conn_offset_us -= rx_ready_delay;
   17bce:	eba0 0a0a 	sub.w	sl, r0, sl
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   17bd2:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17bd6:	f240 4372 	movw	r3, #1138	; 0x472
   17bda:	9300      	str	r3, [sp, #0]
   17bdc:	4b30      	ldr	r3, [pc, #192]	; (17ca0 <isr_rx_adv+0x610>)
   17bde:	2205      	movs	r2, #5
   17be0:	4659      	mov	r1, fp
   17be2:	4658      	mov	r0, fp
   17be4:	f7f9 f850 	bl	10c88 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   17be8:	f240 4173 	movw	r1, #1139	; 0x473
   17bec:	f7f9 fe84 	bl	118f8 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   17bf0:	79fb      	ldrb	r3, [r7, #7]
   17bf2:	f003 030f 	and.w	r3, r3, #15
   17bf6:	2b01      	cmp	r3, #1
   17bf8:	f000 80a3 	beq.w	17d42 <isr_rx_adv+0x6b2>
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
   17bfc:	8c23      	ldrh	r3, [r4, #32]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17bfe:	3307      	adds	r3, #7
   17c00:	b2db      	uxtb	r3, r3
   17c02:	930b      	str	r3, [sp, #44]	; 0x2c
		     (_radio.ticks_anchor - ticks_slot_offset),
   17c04:	4b20      	ldr	r3, [pc, #128]	; (17c88 <isr_rx_adv+0x5f8>)
   17c06:	685b      	ldr	r3, [r3, #4]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c08:	eba3 0905 	sub.w	r9, r3, r5
		     TICKER_US_TO_TICKS(conn_offset_us),
   17c0c:	f04f 0800 	mov.w	r8, #0
   17c10:	4f22      	ldr	r7, [pc, #136]	; (17c9c <isr_rx_adv+0x60c>)
   17c12:	a31b      	add	r3, pc, #108	; (adr r3, 17c80 <isr_rx_adv+0x5f0>)
   17c14:	e9d3 2300 	ldrd	r2, r3, [r3]
   17c18:	fbaa 0107 	umull	r0, r1, sl, r7
   17c1c:	f7e9 fa6e 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c20:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
		     TICKER_US_TO_TICKS(conn_interval_us),
   17c24:	fba6 6707 	umull	r6, r7, r6, r7
   17c28:	a315      	add	r3, pc, #84	; (adr r3, 17c80 <isr_rx_adv+0x5f0>)
   17c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   17c2e:	4630      	mov	r0, r6
   17c30:	4639      	mov	r1, r7
   17c32:	f7e9 fa63 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c36:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   17c3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17c3e:	2100      	movs	r1, #0
   17c40:	4a18      	ldr	r2, [pc, #96]	; (17ca4 <isr_rx_adv+0x614>)
   17c42:	2307      	movs	r3, #7
   17c44:	fb03 f300 	mul.w	r3, r3, r0
   17c48:	fb02 3301 	mla	r3, r2, r1, r3
   17c4c:	fba0 0102 	umull	r0, r1, r0, r2
   17c50:	4419      	add	r1, r3
   17c52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17c56:	2300      	movs	r3, #0
   17c58:	1a30      	subs	r0, r6, r0
   17c5a:	eb67 0101 	sbc.w	r1, r7, r1
   17c5e:	f7e9 fa4d 	bl	10fc <__aeabi_uldivmod>
		     (ticks_slot_offset + conn->hdr.ticks_slot),
   17c62:	68e3      	ldr	r3, [r4, #12]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17c64:	442b      	add	r3, r5
   17c66:	b29b      	uxth	r3, r3
   17c68:	f240 428a 	movw	r2, #1162	; 0x48a
   17c6c:	9208      	str	r2, [sp, #32]
   17c6e:	4a0e      	ldr	r2, [pc, #56]	; (17ca8 <isr_rx_adv+0x618>)
   17c70:	9207      	str	r2, [sp, #28]
   17c72:	9406      	str	r4, [sp, #24]
   17c74:	4a0d      	ldr	r2, [pc, #52]	; (17cac <isr_rx_adv+0x61c>)
   17c76:	9205      	str	r2, [sp, #20]
   17c78:	e01a      	b.n	17cb0 <isr_rx_adv+0x620>
   17c7a:	bf00      	nop
   17c7c:	f3af 8000 	nop.w
   17c80:	1afd498d 	.word	0x1afd498d
   17c84:	00000007 	.word	0x00000007
   17c88:	20000fec 	.word	0x20000fec
   17c8c:	026259ff 	.word	0x026259ff
   17c90:	01c9c37f 	.word	0x01c9c37f
   17c94:	00031470 	.word	0x00031470
   17c98:	431bde83 	.word	0x431bde83
   17c9c:	3b9aca00 	.word	0x3b9aca00
   17ca0:	000118f9 	.word	0x000118f9
   17ca4:	1afd498d 	.word	0x1afd498d
   17ca8:	000118a5 	.word	0x000118a5
   17cac:	0001645d 	.word	0x0001645d
   17cb0:	9304      	str	r3, [sp, #16]
   17cb2:	f8cd 800c 	str.w	r8, [sp, #12]
   17cb6:	9002      	str	r0, [sp, #8]
   17cb8:	f8cd b004 	str.w	fp, [sp, #4]
   17cbc:	f8cd a000 	str.w	sl, [sp]
   17cc0:	464b      	mov	r3, r9
   17cc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17cc4:	4641      	mov	r1, r8
   17cc6:	4640      	mov	r0, r8
   17cc8:	f7f8 ff42 	bl	10b50 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17ccc:	4603      	mov	r3, r0
   17cce:	2800      	cmp	r0, #0
   17cd0:	f43f acff 	beq.w	176d2 <isr_rx_adv+0x42>
   17cd4:	2802      	cmp	r0, #2
   17cd6:	d13d      	bne.n	17d54 <isr_rx_adv+0x6c4>
		return 0;
   17cd8:	2300      	movs	r3, #0
   17cda:	e4fa      	b.n	176d2 <isr_rx_adv+0x42>
		return (_radio.packet_rx_count -
   17cdc:	4923      	ldr	r1, [pc, #140]	; (17d6c <isr_rx_adv+0x6dc>)
   17cde:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   17ce2:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   17ce6:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   17ce8:	fa52 f383 	uxtab	r3, r2, r3
   17cec:	b2db      	uxtb	r3, r3
   17cee:	e62b      	b.n	17948 <isr_rx_adv+0x2b8>
		return 0;
   17cf0:	2500      	movs	r5, #0
   17cf2:	e633      	b.n	1795c <isr_rx_adv+0x2cc>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   17cf4:	2206      	movs	r2, #6
   17cf6:	2100      	movs	r1, #0
   17cf8:	f105 0014 	add.w	r0, r5, #20
   17cfc:	f012 fa40 	bl	2a180 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   17d00:	4641      	mov	r1, r8
   17d02:	f811 3b02 	ldrb.w	r3, [r1], #2
   17d06:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17d0a:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   17d0c:	2206      	movs	r2, #6
   17d0e:	f105 000e 	add.w	r0, r5, #14
   17d12:	f7e8 fad5 	bl	2c0 <memcpy>
   17d16:	e6b6      	b.n	17a86 <isr_rx_adv+0x3f6>
		return (_radio.packet_rx_count -
   17d18:	4914      	ldr	r1, [pc, #80]	; (17d6c <isr_rx_adv+0x6dc>)
   17d1a:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   17d1e:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   17d22:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   17d24:	fa52 f383 	uxtab	r3, r2, r3
   17d28:	b2db      	uxtb	r3, r3
   17d2a:	e6d1      	b.n	17ad0 <isr_rx_adv+0x440>
		return 0;
   17d2c:	2300      	movs	r3, #0
   17d2e:	e6d9      	b.n	17ae4 <isr_rx_adv+0x454>
			LL_ASSERT(radio_pdu_node_rx);
   17d30:	4040      	eors	r0, r0
   17d32:	f380 8811 	msr	BASEPRI, r0
   17d36:	f04f 0004 	mov.w	r0, #4
   17d3a:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   17d3c:	2200      	movs	r2, #0
   17d3e:	72da      	strb	r2, [r3, #11]
   17d40:	e6ed      	b.n	17b1e <isr_rx_adv+0x48e>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17d42:	4658      	mov	r0, fp
   17d44:	f8cd b000 	str.w	fp, [sp]
   17d48:	465b      	mov	r3, fp
   17d4a:	2203      	movs	r2, #3
   17d4c:	4659      	mov	r1, fp
   17d4e:	f7f8 ff9b 	bl	10c88 <ticker_stop>
   17d52:	e753      	b.n	17bfc <isr_rx_adv+0x56c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17d54:	4040      	eors	r0, r0
   17d56:	f380 8811 	msr	BASEPRI, r0
   17d5a:	f04f 0004 	mov.w	r0, #4
   17d5e:	df02      	svc	2
	return 1;
   17d60:	2301      	movs	r3, #1
   17d62:	e4b6      	b.n	176d2 <isr_rx_adv+0x42>
   17d64:	2301      	movs	r3, #1
   17d66:	e4b4      	b.n	176d2 <isr_rx_adv+0x42>
			return 1;
   17d68:	2301      	movs	r3, #1
   17d6a:	e4b2      	b.n	176d2 <isr_rx_adv+0x42>
   17d6c:	20000fec 	.word	0x20000fec

00017d70 <radio_init>:
{
   17d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17d74:	f89d e018 	ldrb.w	lr, [sp, #24]
   17d78:	f8bd c01c 	ldrh.w	ip, [sp, #28]
   17d7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   17d7e:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	_radio.hf_clock = hf_clock;
   17d82:	4c3b      	ldr	r4, [pc, #236]	; (17e70 <radio_init+0x100>)
   17d84:	6020      	str	r0, [r4, #0]
	_radio.sca = sca;
   17d86:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
	mem_radio_end = mem_radio + mem_size;
   17d8a:	19a8      	adds	r0, r5, r6
	_radio.connection_count = connection_count_max;
   17d8c:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
	_radio.conn_pool = mem_radio;
   17d90:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   17d94:	f44f 71aa 	mov.w	r1, #340	; 0x154
   17d98:	fb01 5102 	mla	r1, r1, r2, r5
	rx_count_max += 3;
   17d9c:	f103 0803 	add.w	r8, r3, #3
   17da0:	fa5f f888 	uxtb.w	r8, r8
	tx_count_max += 1;
   17da4:	f10e 0701 	add.w	r7, lr, #1
   17da8:	b2ff      	uxtb	r7, r7
	_radio.packet_rx_count = (rx_count_max + 1);
   17daa:	3304      	adds	r3, #4
   17dac:	b2dd      	uxtb	r5, r3
   17dae:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
	_radio.packet_tx_count = (tx_count_max + 1);
   17db2:	f10e 0e02 	add.w	lr, lr, #2
   17db6:	fa5f fe8e 	uxtb.w	lr, lr
   17dba:	f884 e170 	strb.w	lr, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = rx_count_max;
   17dbe:	f884 8150 	strb.w	r8, [r4, #336]	; 0x150
	_radio.packet_rx = (void *)mem_radio;
   17dc2:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
	mem_radio +=
   17dc6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
	_radio.pkt_tx = (void *)mem_radio;
   17dca:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   17dce:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   17dd2:	4471      	add	r1, lr
	_radio.pkt_release = (void *)mem_radio;
   17dd4:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   17dd8:	4471      	add	r1, lr
	_radio.packet_data_octets_max = packet_data_octets_max;
   17dda:	f8a4 c130 	strh.w	ip, [r4, #304]	; 0x130
	    (offsetof(struct pdu_data, payload) +
   17dde:	f10c 0303 	add.w	r3, ip, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   17de2:	2b2a      	cmp	r3, #42	; 0x2a
   17de4:	d931      	bls.n	17e4a <radio_init+0xda>
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   17de6:	f10c 0c0e 	add.w	ip, ip, #14
		_radio.packet_rx_data_pool_size =
   17dea:	f02c 0c03 	bic.w	ip, ip, #3
   17dee:	fb1c f808 	smulbb	r8, ip, r8
   17df2:	f8a4 8132 	strh.w	r8, [r4, #306]	; 0x132
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   17df6:	4c1e      	ldr	r4, [pc, #120]	; (17e70 <radio_init+0x100>)
   17df8:	2334      	movs	r3, #52	; 0x34
   17dfa:	f8a4 3134 	strh.w	r3, [r4, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   17dfe:	f8b4 e132 	ldrh.w	lr, [r4, #306]	; 0x132
   17e02:	4b1c      	ldr	r3, [pc, #112]	; (17e74 <radio_init+0x104>)
   17e04:	fba3 c30e 	umull	ip, r3, r3, lr
   17e08:	091b      	lsrs	r3, r3, #4
   17e0a:	f884 3136 	strb.w	r3, [r4, #310]	; 0x136
	_radio.pkt_rx_data_pool = mem_radio;
   17e0e:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
	mem_radio += _radio.packet_rx_data_pool_size;
   17e12:	4471      	add	r1, lr
	_radio.link_rx_pool = mem_radio;
   17e14:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   17e18:	442a      	add	r2, r5
   17e1a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	_radio.pkt_tx_ctrl_pool = mem_radio;
   17e1e:	f8c4 2154 	str.w	r2, [r4, #340]	; 0x154
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   17e22:	3248      	adds	r2, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   17e24:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   17e28:	330a      	adds	r3, #10
   17e2a:	b29b      	uxth	r3, r3
   17e2c:	f023 0303 	bic.w	r3, r3, #3
   17e30:	b29b      	uxth	r3, r3
	_radio.packet_tx_data_size =
   17e32:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
	_radio.pkt_tx_data_pool = mem_radio;
   17e36:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   17e3a:	fb03 2707 	mla	r7, r3, r7, r2
	if (retcode) {
   17e3e:	1a3f      	subs	r7, r7, r0
   17e40:	d00d      	beq.n	17e5e <radio_init+0xee>
		return (retcode + mem_size);
   17e42:	4437      	add	r7, r6
}
   17e44:	4638      	mov	r0, r7
   17e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   17e4a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   17e4e:	eb08 0883 	add.w	r8, r8, r3, lsl #2
   17e52:	ea4f 0388 	mov.w	r3, r8, lsl #2
		_radio.packet_rx_data_pool_size =
   17e56:	4c06      	ldr	r4, [pc, #24]	; (17e70 <radio_init+0x100>)
   17e58:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
   17e5c:	e7cb      	b.n	17df6 <radio_init+0x86>
	_radio.fc_ena = 1;
   17e5e:	2201      	movs	r2, #1
   17e60:	4b03      	ldr	r3, [pc, #12]	; (17e70 <radio_init+0x100>)
   17e62:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
	common_init();
   17e66:	f7ec ff21 	bl	4cac <common_init>
	radio_setup();
   17e6a:	f7f7 faed 	bl	f448 <radio_setup>
	return retcode;
   17e6e:	e7e9      	b.n	17e44 <radio_init+0xd4>
   17e70:	20000fec 	.word	0x20000fec
   17e74:	4ec4ec4f 	.word	0x4ec4ec4f

00017e78 <ll_reset>:
{
   17e78:	b510      	push	{r4, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   17e7a:	2103      	movs	r1, #3
   17e7c:	2005      	movs	r0, #5
   17e7e:	f7f9 ff9b 	bl	11db8 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   17e82:	2104      	movs	r1, #4
   17e84:	2006      	movs	r0, #6
   17e86:	f7f9 ff97 	bl	11db8 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   17e8a:	2400      	movs	r4, #0
   17e8c:	e006      	b.n	17e9c <ll_reset+0x24>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   17e8e:	1de0      	adds	r0, r4, #7
   17e90:	21ff      	movs	r1, #255	; 0xff
   17e92:	b2c0      	uxtb	r0, r0
   17e94:	f7f9 ff90 	bl	11db8 <role_disable>
	     conn_handle++) {
   17e98:	3401      	adds	r4, #1
   17e9a:	b2a4      	uxth	r4, r4
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   17e9c:	4b1d      	ldr	r3, [pc, #116]	; (17f14 <ll_reset+0x9c>)
   17e9e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   17ea2:	429c      	cmp	r4, r3
   17ea4:	d3f3      	bcc.n	17e8e <ll_reset+0x16>
	_radio.advertiser.is_enabled = 0;
   17ea6:	4b1b      	ldr	r3, [pc, #108]	; (17f14 <ll_reset+0x9c>)
   17ea8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   17eac:	f36f 0200 	bfc	r2, #0, #1
   17eb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	_radio.advertiser.conn = NULL;
   17eb4:	2000      	movs	r0, #0
   17eb6:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
	_radio.scanner.is_enabled = 0;
   17eba:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   17ebe:	f360 0200 	bfi	r2, r0, #0, #1
   17ec2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	_radio.scanner.conn = NULL;
   17ec6:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   17eca:	2234      	movs	r2, #52	; 0x34
   17ecc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   17ed0:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
   17ed4:	4910      	ldr	r1, [pc, #64]	; (17f18 <ll_reset+0xa0>)
   17ed6:	fba1 1202 	umull	r1, r2, r1, r2
   17eda:	0912      	lsrs	r2, r2, #4
   17edc:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	_radio.packet_rx_last = 0;
   17ee0:	f883 013d 	strb.w	r0, [r3, #317]	; 0x13d
	_radio.packet_rx_acquire = 0;
   17ee4:	f883 013e 	strb.w	r0, [r3, #318]	; 0x13e
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   17ee8:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
   17eec:	3a01      	subs	r2, #1
   17eee:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	_radio.packet_tx_first = 0;
   17ef2:	f883 0171 	strb.w	r0, [r3, #369]	; 0x171
	_radio.packet_tx_last = 0;
   17ef6:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
	_radio.packet_release_first = 0;
   17efa:	f883 0173 	strb.w	r0, [r3, #371]	; 0x173
	_radio.packet_release_last = 0;
   17efe:	f883 0174 	strb.w	r0, [r3, #372]	; 0x174
	_radio.fc_ack = _radio.fc_req;
   17f02:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   17f06:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	ll_filter_reset(false);
   17f0a:	f002 fa69 	bl	1a3e0 <ll_filter_reset>
	common_init();
   17f0e:	f7ec fecd 	bl	4cac <common_init>
   17f12:	bd10      	pop	{r4, pc}
   17f14:	20000fec 	.word	0x20000fec
   17f18:	4ec4ec4f 	.word	0x4ec4ec4f

00017f1c <radio_adv_data_get>:
}
   17f1c:	4800      	ldr	r0, [pc, #0]	; (17f20 <radio_adv_data_get+0x4>)
   17f1e:	4770      	bx	lr
   17f20:	20001013 	.word	0x20001013

00017f24 <radio_scan_data_get>:
}
   17f24:	4800      	ldr	r0, [pc, #0]	; (17f28 <radio_scan_data_get+0x4>)
   17f26:	4770      	bx	lr
   17f28:	20001063 	.word	0x20001063

00017f2c <radio_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   17f2c:	4b02      	ldr	r3, [pc, #8]	; (17f38 <radio_adv_is_enabled+0xc>)
   17f2e:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
}
   17f32:	f000 0001 	and.w	r0, r0, #1
   17f36:	4770      	bx	lr
   17f38:	20000fec 	.word	0x20000fec

00017f3c <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   17f3c:	4b06      	ldr	r3, [pc, #24]	; (17f58 <radio_adv_filter_pol_get+0x1c>)
   17f3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   17f42:	f013 0f01 	tst.w	r3, #1
   17f46:	d004      	beq.n	17f52 <radio_adv_filter_pol_get+0x16>
		return _radio.advertiser.filter_policy;
   17f48:	4b03      	ldr	r3, [pc, #12]	; (17f58 <radio_adv_filter_pol_get+0x1c>)
   17f4a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   17f4e:	0980      	lsrs	r0, r0, #6
   17f50:	4770      	bx	lr
	return 0;
   17f52:	2000      	movs	r0, #0
}
   17f54:	4770      	bx	lr
   17f56:	bf00      	nop
   17f58:	20000fec 	.word	0x20000fec

00017f5c <radio_scan_is_enabled>:
	return _radio.scanner.is_enabled;
   17f5c:	4b02      	ldr	r3, [pc, #8]	; (17f68 <radio_scan_is_enabled+0xc>)
   17f5e:	f893 00dc 	ldrb.w	r0, [r3, #220]	; 0xdc
}
   17f62:	f000 0001 	and.w	r0, r0, #1
   17f66:	4770      	bx	lr
   17f68:	20000fec 	.word	0x20000fec

00017f6c <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   17f6c:	4b06      	ldr	r3, [pc, #24]	; (17f88 <radio_scan_filter_pol_get+0x1c>)
   17f6e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   17f72:	f013 0f01 	tst.w	r3, #1
   17f76:	d005      	beq.n	17f84 <radio_scan_filter_pol_get+0x18>
		return _radio.scanner.filter_policy;
   17f78:	4b03      	ldr	r3, [pc, #12]	; (17f88 <radio_scan_filter_pol_get+0x1c>)
   17f7a:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
   17f7e:	f3c0 1001 	ubfx	r0, r0, #4, #2
   17f82:	4770      	bx	lr
	return 0;
   17f84:	2000      	movs	r0, #0
}
   17f86:	4770      	bx	lr
   17f88:	20000fec 	.word	0x20000fec
   17f8c:	00000000 	.word	0x00000000

00017f90 <radio_connect_enable>:
{
   17f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17f94:	b083      	sub	sp, #12
	if (_radio.scanner.conn) {
   17f96:	4c94      	ldr	r4, [pc, #592]	; (181e8 <radio_connect_enable+0x258>)
   17f98:	f8d4 40fc 	ldr.w	r4, [r4, #252]	; 0xfc
   17f9c:	b11c      	cbz	r4, 17fa6 <radio_connect_enable+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   17f9e:	200c      	movs	r0, #12
}
   17fa0:	b003      	add	sp, #12
   17fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17fa6:	461f      	mov	r7, r3
   17fa8:	4616      	mov	r6, r2
   17faa:	460d      	mov	r5, r1
   17fac:	4604      	mov	r4, r0
	link = mem_acquire(&_radio.link_rx_free);
   17fae:	488f      	ldr	r0, [pc, #572]	; (181ec <radio_connect_enable+0x25c>)
   17fb0:	f7f7 f8fd 	bl	f1ae <mem_acquire>
	if (!link) {
   17fb4:	4681      	mov	r9, r0
   17fb6:	2800      	cmp	r0, #0
   17fb8:	f000 810f 	beq.w	181da <radio_connect_enable+0x24a>
	conn = mem_acquire(&_radio.conn_free);
   17fbc:	488c      	ldr	r0, [pc, #560]	; (181f0 <radio_connect_enable+0x260>)
   17fbe:	f7f7 f8f6 	bl	f1ae <mem_acquire>
   17fc2:	9001      	str	r0, [sp, #4]
	if (!conn) {
   17fc4:	2800      	cmp	r0, #0
   17fc6:	f000 8102 	beq.w	181ce <radio_connect_enable+0x23e>
	_radio.scanner.adv_addr_type = adv_addr_type;
   17fca:	f8df 821c 	ldr.w	r8, [pc, #540]	; 181e8 <radio_connect_enable+0x258>
   17fce:	f898 30dd 	ldrb.w	r3, [r8, #221]	; 0xdd
   17fd2:	f364 1386 	bfi	r3, r4, #6, #1
   17fd6:	f888 30dd 	strb.w	r3, [r8, #221]	; 0xdd
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   17fda:	2206      	movs	r2, #6
   17fdc:	4629      	mov	r1, r5
   17fde:	f108 00e6 	add.w	r0, r8, #230	; 0xe6
   17fe2:	f7e8 f96d 	bl	2c0 <memcpy>
	_radio.scanner.conn_interval = interval;
   17fe6:	f8a8 60f0 	strh.w	r6, [r8, #240]	; 0xf0
	_radio.scanner.conn_latency = latency;
   17fea:	f8a8 70f2 	strh.w	r7, [r8, #242]	; 0xf2
	_radio.scanner.conn_timeout = timeout;
   17fee:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   17ff2:	f8a8 30f4 	strh.w	r3, [r8, #244]	; 0xf4
		TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   17ff6:	2100      	movs	r1, #0
   17ff8:	4608      	mov	r0, r1
   17ffa:	f7f7 fad5 	bl	f5a8 <radio_tx_ready_delay_get>
   17ffe:	f200 4052 	addw	r0, r0, #1106	; 0x452
   18002:	2400      	movs	r4, #0
   18004:	a376      	add	r3, pc, #472	; (adr r3, 181e0 <radio_connect_enable+0x250>)
   18006:	e9d3 2300 	ldrd	r2, r3, [r3]
   1800a:	497a      	ldr	r1, [pc, #488]	; (181f4 <radio_connect_enable+0x264>)
   1800c:	fba0 0101 	umull	r0, r1, r0, r1
   18010:	f7e9 f874 	bl	10fc <__aeabi_uldivmod>
   18014:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_conn_slot =
   18018:	f8c8 00f8 	str.w	r0, [r8, #248]	; 0xf8
	conn->handle = 0xFFFF;
   1801c:	9b01      	ldr	r3, [sp, #4]
   1801e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18022:	841a      	strh	r2, [r3, #32]
	conn->llcp_features = RADIO_BLE_FEAT;
   18024:	f502 4284 	add.w	r2, r2, #16896	; 0x4200
   18028:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	access_addr = access_addr_get();
   1802c:	f7fe fe84 	bl	16d38 <access_addr_get>
   18030:	9000      	str	r0, [sp, #0]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   18032:	2204      	movs	r2, #4
   18034:	4669      	mov	r1, sp
   18036:	9801      	ldr	r0, [sp, #4]
   18038:	3010      	adds	r0, #16
   1803a:	f7e8 f941 	bl	2c0 <memcpy>
	memcpy(&conn->crc_init[0], &conn, 3);
   1803e:	a902      	add	r1, sp, #8
   18040:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   18044:	2203      	movs	r2, #3
   18046:	3014      	adds	r0, #20
   18048:	f7e8 f93a 	bl	2c0 <memcpy>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   1804c:	2205      	movs	r2, #5
   1804e:	f508 718b 	add.w	r1, r8, #278	; 0x116
   18052:	9801      	ldr	r0, [sp, #4]
   18054:	3017      	adds	r0, #23
   18056:	f7e8 f933 	bl	2c0 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   1805a:	9b01      	ldr	r3, [sp, #4]
   1805c:	f898 111b 	ldrb.w	r1, [r8, #283]	; 0x11b
   18060:	7f5a      	ldrb	r2, [r3, #29]
   18062:	f361 0205 	bfi	r2, r1, #0, #6
	conn->data_chan_sel = 0;
   18066:	f364 1286 	bfi	r2, r4, #6, #1
   1806a:	775a      	strb	r2, [r3, #29]
	conn->data_chan_hop = 6;
   1806c:	2506      	movs	r5, #6
   1806e:	779d      	strb	r5, [r3, #30]
	conn->data_chan_use = 0;
   18070:	77dc      	strb	r4, [r3, #31]
	conn->event_counter = 0;
   18072:	845c      	strh	r4, [r3, #34]	; 0x22
	conn->conn_interval = _radio.scanner.conn_interval;
   18074:	f8b8 20f0 	ldrh.w	r2, [r8, #240]	; 0xf0
   18078:	849a      	strh	r2, [r3, #36]	; 0x24
	conn->latency_prepare = 0;
   1807a:	851c      	strh	r4, [r3, #40]	; 0x28
	conn->latency_event = 0;
   1807c:	855c      	strh	r4, [r3, #42]	; 0x2a
	conn->latency = _radio.scanner.conn_latency;
   1807e:	f8b8 00f2 	ldrh.w	r0, [r8, #242]	; 0xf2
   18082:	84d8      	strh	r0, [r3, #38]	; 0x26
	conn->default_tx_octets = _radio.default_tx_octets;
   18084:	f8b8 211e 	ldrh.w	r2, [r8, #286]	; 0x11e
   18088:	859a      	strh	r2, [r3, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1808a:	221b      	movs	r2, #27
   1808c:	85da      	strh	r2, [r3, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1808e:	861a      	strh	r2, [r3, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   18090:	f8b8 2120 	ldrh.w	r2, [r8, #288]	; 0x120
   18094:	865a      	strh	r2, [r3, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   18096:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1809a:	869a      	strh	r2, [r3, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   1809c:	86da      	strh	r2, [r3, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   1809e:	f898 1122 	ldrb.w	r1, [r8, #290]	; 0x122
   180a2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   180a6:	f361 0202 	bfi	r2, r1, #0, #3
	conn->phy_tx = BIT(0);
   180aa:	2101      	movs	r1, #1
   180ac:	f361 02c5 	bfi	r2, r1, #3, #3
	conn->phy_flags = 0;
   180b0:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   180b4:	f364 12c7 	bfi	r2, r4, #7, #1
   180b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   180bc:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   180c0:	f361 0202 	bfi	r2, r1, #0, #3
   180c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   180c8:	f898 6124 	ldrb.w	r6, [r8, #292]	; 0x124
   180cc:	b2d2      	uxtb	r2, r2
   180ce:	f366 02c5 	bfi	r2, r6, #3, #3
   180d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_rx = BIT(0);
   180d6:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   180da:	f361 0202 	bfi	r2, r1, #0, #3
   180de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	conn->role = 0;
   180e2:	7f5a      	ldrb	r2, [r3, #29]
   180e4:	f364 12c7 	bfi	r2, r4, #7, #1
   180e8:	775a      	strb	r2, [r3, #29]
	conn->connect_expire = 6;
   180ea:	879d      	strh	r5, [r3, #60]	; 0x3c
	conn->common.fex_valid = 0;
   180ec:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	conn->master.terminate_ack = 0;
   180f0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   180f4:	f364 0200 	bfi	r2, r4, #0, #1
   180f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		(u32_t)_radio.scanner.conn_interval * 1250;
   180fc:	f8b8 10f0 	ldrh.w	r1, [r8, #240]	; 0xf0
	conn_interval_us =
   18100:	f240 42e2 	movw	r2, #1250	; 0x4e2
   18104:	fb02 f101 	mul.w	r1, r2, r1
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   18108:	f8b8 20f4 	ldrh.w	r2, [r8, #244]	; 0xf4
   1810c:	f242 7510 	movw	r5, #10000	; 0x2710
   18110:	fb05 1202 	mla	r2, r5, r2, r1
   18114:	3a01      	subs	r2, #1
   18116:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->supervision_reload =
   1811a:	87da      	strh	r2, [r3, #62]	; 0x3e
	conn->supervision_expire = 0;
   1811c:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   18120:	4a35      	ldr	r2, [pc, #212]	; (181f8 <radio_connect_enable+0x268>)
   18122:	440a      	add	r2, r1
   18124:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->procedure_reload =
   18128:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	conn->procedure_expire = 0;
   1812c:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   18130:	4a32      	ldr	r2, [pc, #200]	; (181fc <radio_connect_enable+0x26c>)
   18132:	440a      	add	r2, r1
   18134:	fbb2 f2f1 	udiv	r2, r2, r1
   18138:	b292      	uxth	r2, r2
   1813a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1813e:	1d81      	adds	r1, r0, #6
   18140:	428a      	cmp	r2, r1
   18142:	dd03      	ble.n	1814c <radio_connect_enable+0x1bc>
			     (conn->apto_reload - (conn->latency + 6)) :
   18144:	1a12      	subs	r2, r2, r0
   18146:	b292      	uxth	r2, r2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   18148:	3a06      	subs	r2, #6
   1814a:	b292      	uxth	r2, r2
   1814c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	conn->apto_expire = 0;
   18150:	2000      	movs	r0, #0
   18152:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
	conn->appto_expire = 0;
   18156:	f8a3 0048 	strh.w	r0, [r3, #72]	; 0x48
	conn->llcp_req = 0;
   1815a:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
	conn->llcp_ack = 0;
   1815e:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
	conn->llcp_version.tx = 0;
   18162:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_version.rx = 0;
   18166:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   1816a:	f360 0241 	bfi	r2, r0, #1, #1
   1816e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_terminate.req = 0;
   18172:	f883 00b0 	strb.w	r0, [r3, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   18176:	f883 00b1 	strb.w	r0, [r3, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   1817a:	f883 00b3 	strb.w	r0, [r3, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   1817e:	f8c3 90b4 	str.w	r9, [r3, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   18182:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   18186:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
	conn->llcp_length.req = 0;
   1818a:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   1818e:	f883 00e9 	strb.w	r0, [r3, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   18192:	f883 00f4 	strb.w	r0, [r3, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   18196:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
	conn->sn = 0;
   1819a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	conn->empty = 0;
   1819e:	f002 0280 	and.w	r2, r2, #128	; 0x80
   181a2:	f360 12c7 	bfi	r2, r0, #7, #1
   181a6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   181aa:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   181ae:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   181b2:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   181b6:	f8c3 0148 	str.w	r0, [r3, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   181ba:	f8c3 014c 	str.w	r0, [r3, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   181be:	f883 0150 	strb.w	r0, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   181c2:	f883 0151 	strb.w	r0, [r3, #337]	; 0x151
	_radio.scanner.conn = conn;
   181c6:	4a08      	ldr	r2, [pc, #32]	; (181e8 <radio_connect_enable+0x258>)
   181c8:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
	return 0;
   181cc:	e6e8      	b.n	17fa0 <radio_connect_enable+0x10>
		mem_release(link, &_radio.link_rx_free);
   181ce:	4907      	ldr	r1, [pc, #28]	; (181ec <radio_connect_enable+0x25c>)
   181d0:	4648      	mov	r0, r9
   181d2:	f7f7 f808 	bl	f1e6 <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   181d6:	2007      	movs	r0, #7
   181d8:	e6e2      	b.n	17fa0 <radio_connect_enable+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   181da:	2007      	movs	r0, #7
   181dc:	e6e0      	b.n	17fa0 <radio_connect_enable+0x10>
   181de:	bf00      	nop
   181e0:	1afd498d 	.word	0x1afd498d
   181e4:	00000007 	.word	0x00000007
   181e8:	20000fec 	.word	0x20000fec
   181ec:	20001130 	.word	0x20001130
   181f0:	200010f4 	.word	0x200010f4
   181f4:	3b9aca00 	.word	0x3b9aca00
   181f8:	026259ff 	.word	0x026259ff
   181fc:	01c9c37f 	.word	0x01c9c37f

00018200 <ll_conn_update>:
{
   18200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18204:	460c      	mov	r4, r1
   18206:	4690      	mov	r8, r2
   18208:	461f      	mov	r7, r3
   1820a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1820e:	f8bd 501c 	ldrh.w	r5, [sp, #28]
	conn = connection_get(handle);
   18212:	f7f9 fdb3 	bl	11d7c <connection_get>
	if (!conn) {
   18216:	2800      	cmp	r0, #0
   18218:	d078      	beq.n	1830c <ll_conn_update+0x10c>
   1821a:	4603      	mov	r3, r0
	if (!cmd) {
   1821c:	b984      	cbnz	r4, 18240 <ll_conn_update+0x40>
		if (conn->common.fex_valid &&
   1821e:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   18222:	f012 0f20 	tst.w	r2, #32
   18226:	d007      	beq.n	18238 <ll_conn_update+0x38>
		    (conn->llcp_features &
   18228:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
		if (conn->common.fex_valid &&
   1822c:	f012 0f02 	tst.w	r2, #2
   18230:	d002      	beq.n	18238 <ll_conn_update+0x38>
			cmd++;
   18232:	3401      	adds	r4, #1
   18234:	b2e4      	uxtb	r4, r4
   18236:	e003      	b.n	18240 <ll_conn_update+0x40>
		} else if (conn->role) {
   18238:	f993 201d 	ldrsb.w	r2, [r3, #29]
   1823c:	2a00      	cmp	r2, #0
   1823e:	db68      	blt.n	18312 <ll_conn_update+0x112>
	if (!cmd) {
   18240:	bb1c      	cbnz	r4, 1828a <ll_conn_update+0x8a>
		if (conn->llcp_req != conn->llcp_ack) {
   18242:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   18246:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
   1824a:	428a      	cmp	r2, r1
   1824c:	d002      	beq.n	18254 <ll_conn_update+0x54>
			return 1;
   1824e:	2001      	movs	r0, #1
   18250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->llcp.conn_upd.win_size = 1;
   18254:	2401      	movs	r4, #1
   18256:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   1825a:	2000      	movs	r0, #0
   1825c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = interval;
   18260:	f8a3 707a 	strh.w	r7, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = latency;
   18264:	f8a3 607c 	strh.w	r6, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   18268:	f8a3 507e 	strh.w	r5, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1826c:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   18270:	f364 0101 	bfi	r1, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   18274:	f360 0182 	bfi	r1, r0, #2, #1
   18278:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   1827c:	f883 4076 	strb.w	r4, [r3, #118]	; 0x76
		conn->llcp_req++;
   18280:	4422      	add	r2, r4
   18282:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   18286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cmd--;
   1828a:	3c01      	subs	r4, #1
		if (cmd) {
   1828c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   18290:	d01c      	beq.n	182cc <ll_conn_update+0xcc>
			if ((conn->llcp_conn_param.req ==
   18292:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
			     conn->llcp_conn_param.ack) ||
   18296:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
			if ((conn->llcp_conn_param.req ==
   1829a:	4291      	cmp	r1, r2
   1829c:	d03c      	beq.n	18318 <ll_conn_update+0x118>
			    (conn->llcp_conn_param.state !=
   1829e:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   182a2:	f002 0207 	and.w	r2, r2, #7
			     conn->llcp_conn_param.ack) ||
   182a6:	2a03      	cmp	r2, #3
   182a8:	d002      	beq.n	182b0 <ll_conn_update+0xb0>
				return 1;
   182aa:	2001      	movs	r0, #1
   182ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = status;
   182b0:	f883 80c3 	strb.w	r8, [r3, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   182b4:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   182b8:	f364 0202 	bfi	r2, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   182bc:	b2d2      	uxtb	r2, r2
   182be:	f042 0208 	orr.w	r2, r2, #8
   182c2:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	return 0;
   182c6:	2000      	movs	r0, #0
   182c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (conn->llcp_conn_param.req !=
   182cc:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
			    conn->llcp_conn_param.ack) {
   182d0:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			if (conn->llcp_conn_param.req !=
   182d4:	428a      	cmp	r2, r1
   182d6:	d002      	beq.n	182de <ll_conn_update+0xde>
				return 1;
   182d8:	2001      	movs	r0, #1
}
   182da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = 0;
   182de:	2000      	movs	r0, #0
   182e0:	f883 00c3 	strb.w	r0, [r3, #195]	; 0xc3
			conn->llcp_conn_param.interval = interval;
   182e4:	f8a3 70c4 	strh.w	r7, [r3, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   182e8:	f8a3 60c6 	strh.w	r6, [r3, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   182ec:	f8a3 50c8 	strh.w	r5, [r3, #200]	; 0xc8
			conn->llcp_conn_param.state = cmd;
   182f0:	f893 10c2 	ldrb.w	r1, [r3, #194]	; 0xc2
   182f4:	f364 0102 	bfi	r1, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   182f8:	b2c9      	uxtb	r1, r1
   182fa:	f041 0108 	orr.w	r1, r1, #8
   182fe:	f883 10c2 	strb.w	r1, [r3, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   18302:	3201      	adds	r2, #1
   18304:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
   18308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 1;
   1830c:	2001      	movs	r0, #1
   1830e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return 1;
   18312:	2001      	movs	r0, #1
   18314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return 1;
   18318:	2001      	movs	r0, #1
   1831a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00018320 <ll_chm_update>:
{
   18320:	b570      	push	{r4, r5, r6, lr}
   18322:	4606      	mov	r6, r0
	memcpy(&_radio.data_chan_map[0], chm,
   18324:	4c1c      	ldr	r4, [pc, #112]	; (18398 <ll_chm_update+0x78>)
   18326:	f504 758b 	add.w	r5, r4, #278	; 0x116
   1832a:	2205      	movs	r2, #5
   1832c:	4601      	mov	r1, r0
   1832e:	4628      	mov	r0, r5
   18330:	f7e7 ffc6 	bl	2c0 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   18334:	2105      	movs	r1, #5
   18336:	4628      	mov	r0, r5
   18338:	f7f6 ffbd 	bl	f2b6 <util_ones_count_get>
	_radio.data_chan_count =
   1833c:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	instance = _radio.connection_count;
   18340:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
	while (instance--) {
   18344:	e000      	b.n	18348 <ll_chm_update+0x28>
{
   18346:	462b      	mov	r3, r5
	while (instance--) {
   18348:	1e5d      	subs	r5, r3, #1
   1834a:	b2ed      	uxtb	r5, r5
   1834c:	b303      	cbz	r3, 18390 <ll_chm_update+0x70>
		conn = connection_get(instance);
   1834e:	4628      	mov	r0, r5
   18350:	f7f9 fd14 	bl	11d7c <connection_get>
		if (!conn || conn->role) {
   18354:	4604      	mov	r4, r0
   18356:	2800      	cmp	r0, #0
   18358:	d0f5      	beq.n	18346 <ll_chm_update+0x26>
   1835a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1835e:	2b00      	cmp	r3, #0
   18360:	dbf1      	blt.n	18346 <ll_chm_update+0x26>
		if (conn->llcp_req != conn->llcp_ack) {
   18362:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   18366:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1836a:	429a      	cmp	r2, r3
   1836c:	d112      	bne.n	18394 <ll_chm_update+0x74>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   1836e:	2205      	movs	r2, #5
   18370:	4631      	mov	r1, r6
   18372:	3079      	adds	r0, #121	; 0x79
   18374:	f7e7 ffa4 	bl	2c0 <memcpy>
		conn->llcp.chan_map.initiate = 1;
   18378:	2301      	movs	r3, #1
   1837a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CHAN_MAP;
   1837e:	2302      	movs	r3, #2
   18380:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_req++;
   18384:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   18388:	3301      	adds	r3, #1
   1838a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   1838e:	e7da      	b.n	18346 <ll_chm_update+0x26>
	return 0;
   18390:	2000      	movs	r0, #0
   18392:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   18394:	2001      	movs	r0, #1
}
   18396:	bd70      	pop	{r4, r5, r6, pc}
   18398:	20000fec 	.word	0x20000fec

0001839c <ll_chm_get>:
{
   1839c:	b538      	push	{r3, r4, r5, lr}
   1839e:	460d      	mov	r5, r1
	conn = connection_get(handle);
   183a0:	f7f9 fcec 	bl	11d7c <connection_get>
	if (!conn) {
   183a4:	4604      	mov	r4, r0
   183a6:	b160      	cbz	r0, 183c2 <ll_chm_get+0x26>
		conn->chm_update = 0;
   183a8:	2300      	movs	r3, #0
   183aa:	7723      	strb	r3, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   183ac:	2205      	movs	r2, #5
   183ae:	f104 0117 	add.w	r1, r4, #23
   183b2:	4628      	mov	r0, r5
   183b4:	f7e7 ff84 	bl	2c0 <memcpy>
	} while (conn->chm_update);
   183b8:	7f23      	ldrb	r3, [r4, #28]
   183ba:	2b00      	cmp	r3, #0
   183bc:	d1f4      	bne.n	183a8 <ll_chm_get+0xc>
	return 0;
   183be:	2000      	movs	r0, #0
   183c0:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   183c2:	2001      	movs	r0, #1
}
   183c4:	bd38      	pop	{r3, r4, r5, pc}

000183c6 <ll_start_enc_req_send>:
{
   183c6:	b570      	push	{r4, r5, r6, lr}
   183c8:	460d      	mov	r5, r1
   183ca:	4616      	mov	r6, r2
	conn = connection_get(handle);
   183cc:	f7f9 fcd6 	bl	11d7c <connection_get>
	if (!conn) {
   183d0:	2800      	cmp	r0, #0
   183d2:	d03e      	beq.n	18452 <ll_start_enc_req_send+0x8c>
   183d4:	4604      	mov	r4, r0
	if (error_code) {
   183d6:	b32d      	cbz	r5, 18424 <ll_start_enc_req_send+0x5e>
		if (conn->refresh == 0) {
   183d8:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   183dc:	f013 0f40 	tst.w	r3, #64	; 0x40
   183e0:	d111      	bne.n	18406 <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   183e2:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   183e6:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   183ea:	4293      	cmp	r3, r2
   183ec:	d001      	beq.n	183f2 <ll_start_enc_req_send+0x2c>
				return 1;
   183ee:	2001      	movs	r0, #1
   183f0:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp.encryption.error_code = error_code;
   183f2:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
			conn->llcp_type = LLCP_ENCRYPTION;
   183f6:	2203      	movs	r2, #3
   183f8:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
			conn->llcp_req++;
   183fc:	3301      	adds	r3, #1
   183fe:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	return 0;
   18402:	2000      	movs	r0, #0
   18404:	bd70      	pop	{r4, r5, r6, pc}
			if (conn->llcp_terminate.ack !=
   18406:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
			    conn->llcp_terminate.req) {
   1840a:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
			if (conn->llcp_terminate.ack !=
   1840e:	429a      	cmp	r2, r3
   18410:	d001      	beq.n	18416 <ll_start_enc_req_send+0x50>
				return 1;
   18412:	2001      	movs	r0, #1
   18414:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp_terminate.reason_own = error_code;
   18416:	f880 50b2 	strb.w	r5, [r0, #178]	; 0xb2
			conn->llcp_terminate.req++;
   1841a:	3301      	adds	r3, #1
   1841c:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   18420:	2000      	movs	r0, #0
   18422:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   18424:	2210      	movs	r2, #16
   18426:	4631      	mov	r1, r6
   18428:	3083      	adds	r0, #131	; 0x83
   1842a:	f7e7 ff49 	bl	2c0 <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
   1842e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   18432:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   18436:	4293      	cmp	r3, r2
   18438:	d001      	beq.n	1843e <ll_start_enc_req_send+0x78>
			return 1;
   1843a:	2001      	movs	r0, #1
}
   1843c:	bd70      	pop	{r4, r5, r6, pc}
		conn->llcp.encryption.error_code = 0;
   1843e:	2000      	movs	r0, #0
   18440:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
   18444:	2203      	movs	r2, #3
   18446:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
		conn->llcp_req++;
   1844a:	3301      	adds	r3, #1
   1844c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   18450:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   18452:	2001      	movs	r0, #1
   18454:	bd70      	pop	{r4, r5, r6, pc}

00018456 <ll_feature_req_send>:
{
   18456:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   18458:	f7f9 fc90 	bl	11d7c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1845c:	b178      	cbz	r0, 1847e <ll_feature_req_send+0x28>
   1845e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   18462:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   18466:	428a      	cmp	r2, r1
   18468:	d001      	beq.n	1846e <ll_feature_req_send+0x18>
		return 1;
   1846a:	2001      	movs	r0, #1
}
   1846c:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   1846e:	2104      	movs	r1, #4
   18470:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   18474:	3201      	adds	r2, #1
   18476:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   1847a:	2000      	movs	r0, #0
   1847c:	bd08      	pop	{r3, pc}
		return 1;
   1847e:	2001      	movs	r0, #1
   18480:	bd08      	pop	{r3, pc}

00018482 <ll_version_ind_send>:
{
   18482:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   18484:	f7f9 fc7a 	bl	11d7c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   18488:	b178      	cbz	r0, 184aa <ll_version_ind_send+0x28>
   1848a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1848e:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   18492:	428a      	cmp	r2, r1
   18494:	d001      	beq.n	1849a <ll_version_ind_send+0x18>
		return 1;
   18496:	2001      	movs	r0, #1
}
   18498:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   1849a:	2105      	movs	r1, #5
   1849c:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   184a0:	3201      	adds	r2, #1
   184a2:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   184a6:	2000      	movs	r0, #0
   184a8:	bd08      	pop	{r3, pc}
		return 1;
   184aa:	2001      	movs	r0, #1
   184ac:	bd08      	pop	{r3, pc}

000184ae <ll_terminate_ind_send>:
{
   184ae:	b510      	push	{r4, lr}
   184b0:	460c      	mov	r4, r1
	conn = connection_get(handle);
   184b2:	f7f9 fc63 	bl	11d7c <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   184b6:	b170      	cbz	r0, 184d6 <ll_terminate_ind_send+0x28>
   184b8:	f890 10b1 	ldrb.w	r1, [r0, #177]	; 0xb1
   184bc:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
   184c0:	4291      	cmp	r1, r2
   184c2:	d001      	beq.n	184c8 <ll_terminate_ind_send+0x1a>
		return 1;
   184c4:	2001      	movs	r0, #1
}
   184c6:	bd10      	pop	{r4, pc}
	conn->llcp_terminate.reason_own = reason;
   184c8:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   184cc:	3201      	adds	r2, #1
   184ce:	f880 20b0 	strb.w	r2, [r0, #176]	; 0xb0
	return 0;
   184d2:	2000      	movs	r0, #0
   184d4:	bd10      	pop	{r4, pc}
		return 1;
   184d6:	2001      	movs	r0, #1
   184d8:	bd10      	pop	{r4, pc}

000184da <ll_tx_power_level_get>:
{
   184da:	b510      	push	{r4, lr}
   184dc:	4614      	mov	r4, r2
	conn = connection_get(handle);
   184de:	f7f9 fc4d 	bl	11d7c <connection_get>
	if (!conn) {
   184e2:	b110      	cbz	r0, 184ea <ll_tx_power_level_get+0x10>
	*tx_power_level = 0;
   184e4:	2000      	movs	r0, #0
   184e6:	7020      	strb	r0, [r4, #0]
	return 0;
   184e8:	bd10      	pop	{r4, pc}
		return 1;
   184ea:	2001      	movs	r0, #1
}
   184ec:	bd10      	pop	{r4, pc}

000184ee <ll_tx_power_get>:
	*min = 0;
   184ee:	2300      	movs	r3, #0
   184f0:	7003      	strb	r3, [r0, #0]
	*max = 0;
   184f2:	700b      	strb	r3, [r1, #0]
   184f4:	4770      	bx	lr
	...

000184f8 <ll_apto_get>:
{
   184f8:	b510      	push	{r4, lr}
   184fa:	460c      	mov	r4, r1
	conn = connection_get(handle);
   184fc:	f7f9 fc3e 	bl	11d7c <connection_get>
	if (!conn) {
   18500:	b188      	cbz	r0, 18526 <ll_apto_get+0x2e>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   18502:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
   18506:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   18508:	fb03 f301 	mul.w	r3, r3, r1
   1850c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   18510:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   18514:	4a05      	ldr	r2, [pc, #20]	; (1852c <ll_apto_get+0x34>)
   18516:	fb82 1203 	smull	r1, r2, r2, r3
   1851a:	17db      	asrs	r3, r3, #31
   1851c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   18520:	8023      	strh	r3, [r4, #0]
	return 0;
   18522:	2000      	movs	r0, #0
   18524:	bd10      	pop	{r4, pc}
		return 1;
   18526:	2001      	movs	r0, #1
}
   18528:	bd10      	pop	{r4, pc}
   1852a:	bf00      	nop
   1852c:	10624dd3 	.word	0x10624dd3

00018530 <ll_apto_set>:
{
   18530:	b510      	push	{r4, lr}
   18532:	460c      	mov	r4, r1
	conn = connection_get(handle);
   18534:	f7f9 fc22 	bl	11d7c <connection_get>
	if (!conn) {
   18538:	b178      	cbz	r0, 1855a <ll_apto_set+0x2a>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   1853a:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   1853c:	f240 43e2 	movw	r3, #1250	; 0x4e2
   18540:	fb03 f301 	mul.w	r3, r3, r1
   18544:	f242 7110 	movw	r1, #10000	; 0x2710
   18548:	fb01 3404 	mla	r4, r1, r4, r3
   1854c:	3c01      	subs	r4, #1
   1854e:	fb94 f4f3 	sdiv	r4, r4, r3
   18552:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   18556:	2000      	movs	r0, #0
   18558:	bd10      	pop	{r4, pc}
		return 1;
   1855a:	2001      	movs	r0, #1
}
   1855c:	bd10      	pop	{r4, pc}

0001855e <ll_length_req_send>:
{
   1855e:	b538      	push	{r3, r4, r5, lr}
   18560:	460d      	mov	r5, r1
   18562:	4614      	mov	r4, r2
	conn = connection_get(handle);
   18564:	f7f9 fc0a 	bl	11d7c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   18568:	b1f0      	cbz	r0, 185a8 <ll_length_req_send+0x4a>
   1856a:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   1856e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   18572:	4291      	cmp	r1, r2
   18574:	d001      	beq.n	1857a <ll_length_req_send+0x1c>
		return 1;
   18576:	2001      	movs	r0, #1
   18578:	bd38      	pop	{r3, r4, r5, pc}
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   1857a:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   1857e:	f890 10e9 	ldrb.w	r1, [r0, #233]	; 0xe9
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   18582:	428a      	cmp	r2, r1
   18584:	d001      	beq.n	1858a <ll_length_req_send+0x2c>
		return 1;
   18586:	2001      	movs	r0, #1
}
   18588:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1858a:	f890 10ea 	ldrb.w	r1, [r0, #234]	; 0xea
   1858e:	f36f 0101 	bfc	r1, #0, #2
   18592:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   18596:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
	conn->llcp_length.tx_time = tx_time;
   1859a:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
	conn->llcp_length.req++;
   1859e:	3201      	adds	r2, #1
   185a0:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
	return 0;
   185a4:	2000      	movs	r0, #0
   185a6:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   185a8:	2001      	movs	r0, #1
   185aa:	bd38      	pop	{r3, r4, r5, pc}

000185ac <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   185ac:	4b03      	ldr	r3, [pc, #12]	; (185bc <ll_length_default_get+0x10>)
   185ae:	f8b3 211e 	ldrh.w	r2, [r3, #286]	; 0x11e
   185b2:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   185b4:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
   185b8:	800b      	strh	r3, [r1, #0]
   185ba:	4770      	bx	lr
   185bc:	20000fec 	.word	0x20000fec

000185c0 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   185c0:	4b03      	ldr	r3, [pc, #12]	; (185d0 <ll_length_default_set+0x10>)
   185c2:	f8a3 011e 	strh.w	r0, [r3, #286]	; 0x11e
	_radio.default_tx_time = max_tx_time;
   185c6:	f8a3 1120 	strh.w	r1, [r3, #288]	; 0x120
}
   185ca:	2000      	movs	r0, #0
   185cc:	4770      	bx	lr
   185ce:	bf00      	nop
   185d0:	20000fec 	.word	0x20000fec

000185d4 <ll_length_max_get>:
{
   185d4:	b410      	push	{r4}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   185d6:	241b      	movs	r4, #27
   185d8:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   185da:	f44f 70a4 	mov.w	r0, #328	; 0x148
   185de:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   185e0:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   185e2:	8018      	strh	r0, [r3, #0]
}
   185e4:	bc10      	pop	{r4}
   185e6:	4770      	bx	lr

000185e8 <ll_phy_get>:
{
   185e8:	b538      	push	{r3, r4, r5, lr}
   185ea:	460d      	mov	r5, r1
   185ec:	4614      	mov	r4, r2
	conn = connection_get(handle);
   185ee:	f7f9 fbc5 	bl	11d7c <connection_get>
	if (!conn) {
   185f2:	b158      	cbz	r0, 1860c <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   185f4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   185f8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   185fc:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   185fe:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   18602:	f3c3 0302 	ubfx	r3, r3, #0, #3
   18606:	7023      	strb	r3, [r4, #0]
	return 0;
   18608:	2000      	movs	r0, #0
   1860a:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   1860c:	2001      	movs	r0, #1
}
   1860e:	bd38      	pop	{r3, r4, r5, pc}

00018610 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   18610:	4b03      	ldr	r3, [pc, #12]	; (18620 <ll_phy_default_set+0x10>)
   18612:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_phy_rx = rx;
   18616:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   1861a:	2000      	movs	r0, #0
   1861c:	4770      	bx	lr
   1861e:	bf00      	nop
   18620:	20000fec 	.word	0x20000fec

00018624 <ll_phy_req_send>:
{
   18624:	b570      	push	{r4, r5, r6, lr}
   18626:	460e      	mov	r6, r1
   18628:	4615      	mov	r5, r2
   1862a:	461c      	mov	r4, r3
	conn = connection_get(handle);
   1862c:	f7f9 fba6 	bl	11d7c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   18630:	b338      	cbz	r0, 18682 <ll_phy_req_send+0x5e>
   18632:	4603      	mov	r3, r0
   18634:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   18638:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   1863c:	4291      	cmp	r1, r2
   1863e:	d001      	beq.n	18644 <ll_phy_req_send+0x20>
		return 1;
   18640:	2001      	movs	r0, #1
   18642:	bd70      	pop	{r4, r5, r6, pc}
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   18644:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
   18648:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1864c:	428a      	cmp	r2, r1
   1864e:	d001      	beq.n	18654 <ll_phy_req_send+0x30>
		return 1;
   18650:	2001      	movs	r0, #1
}
   18652:	bd70      	pop	{r4, r5, r6, pc}
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   18654:	f890 10f6 	ldrb.w	r1, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   18658:	f890 00f7 	ldrb.w	r0, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   1865c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   18660:	f366 0184 	bfi	r1, r6, #2, #3
	conn->llcp_phy.flags = flags;
   18664:	f040 0002 	orr.w	r0, r0, #2
   18668:	f365 0000 	bfi	r0, r5, #0, #1
   1866c:	f883 00f7 	strb.w	r0, [r3, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   18670:	f364 1147 	bfi	r1, r4, #5, #3
   18674:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
	conn->llcp_phy.req++;
   18678:	3201      	adds	r2, #1
   1867a:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	return 0;
   1867e:	2000      	movs	r0, #0
   18680:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   18682:	2001      	movs	r0, #1
   18684:	bd70      	pop	{r4, r5, r6, pc}
	...

00018688 <radio_rx_get>:
{
   18688:	b5f0      	push	{r4, r5, r6, r7, lr}
   1868a:	b083      	sub	sp, #12
   1868c:	4606      	mov	r6, r0
   1868e:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   18690:	4b1b      	ldr	r3, [pc, #108]	; (18700 <radio_rx_get+0x78>)
   18692:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   18696:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   1869a:	429a      	cmp	r2, r3
   1869c:	d024      	beq.n	186e8 <radio_rx_get+0x60>
		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
   1869e:	6857      	ldr	r7, [r2, #4]
		cmplt = tx_cmplt_get(handle,
   186a0:	783a      	ldrb	r2, [r7, #0]
   186a2:	4918      	ldr	r1, [pc, #96]	; (18704 <radio_rx_get+0x7c>)
   186a4:	f7f9 fb0c 	bl	11cc0 <tx_cmplt_get>
		if (!cmplt) {
   186a8:	4605      	mov	r5, r0
   186aa:	b9d0      	cbnz	r0, 186e2 <radio_rx_get+0x5a>
			first = _radio.packet_release_first;
   186ac:	4b14      	ldr	r3, [pc, #80]	; (18700 <radio_rx_get+0x78>)
   186ae:	f893 3173 	ldrb.w	r3, [r3, #371]	; 0x173
   186b2:	f88d 3005 	strb.w	r3, [sp, #5]
			cmplt_curr = 0;
   186b6:	4604      	mov	r4, r0
   186b8:	e000      	b.n	186bc <radio_rx_get+0x34>
   186ba:	4604      	mov	r4, r0
				cmplt_curr = tx_cmplt_get(&handle, &first,
   186bc:	4b10      	ldr	r3, [pc, #64]	; (18700 <radio_rx_get+0x78>)
   186be:	f893 2174 	ldrb.w	r2, [r3, #372]	; 0x174
   186c2:	f10d 0105 	add.w	r1, sp, #5
   186c6:	f10d 0006 	add.w	r0, sp, #6
   186ca:	f7f9 faf9 	bl	11cc0 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   186ce:	2c00      	cmp	r4, #0
   186d0:	d1f3      	bne.n	186ba <radio_rx_get+0x32>
			} while ((cmplt_prev != 0) ||
   186d2:	4284      	cmp	r4, r0
   186d4:	d001      	beq.n	186da <radio_rx_get+0x52>
   186d6:	4604      	mov	r4, r0
   186d8:	e7f0      	b.n	186bc <radio_rx_get+0x34>
			*radio_pdu_node_rx = _radio_pdu_node_rx;
   186da:	6037      	str	r7, [r6, #0]
}
   186dc:	4628      	mov	r0, r5
   186de:	b003      	add	sp, #12
   186e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*radio_pdu_node_rx = NULL;
   186e2:	2300      	movs	r3, #0
   186e4:	6033      	str	r3, [r6, #0]
   186e6:	e7f9      	b.n	186dc <radio_rx_get+0x54>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   186e8:	4905      	ldr	r1, [pc, #20]	; (18700 <radio_rx_get+0x78>)
   186ea:	f891 2174 	ldrb.w	r2, [r1, #372]	; 0x174
   186ee:	f201 1173 	addw	r1, r1, #371	; 0x173
   186f2:	f7f9 fae5 	bl	11cc0 <tx_cmplt_get>
   186f6:	4605      	mov	r5, r0
		*radio_pdu_node_rx = NULL;
   186f8:	2300      	movs	r3, #0
   186fa:	6033      	str	r3, [r6, #0]
   186fc:	e7ee      	b.n	186dc <radio_rx_get+0x54>
   186fe:	bf00      	nop
   18700:	20000fec 	.word	0x20000fec
   18704:	2000115f 	.word	0x2000115f

00018708 <radio_rx_mem_release>:
{
   18708:	b570      	push	{r4, r5, r6, lr}
   1870a:	4606      	mov	r6, r0
	_radio_pdu_node_rx = *radio_pdu_node_rx;
   1870c:	6800      	ldr	r0, [r0, #0]
	while (_radio_pdu_node_rx) {
   1870e:	e003      	b.n	18718 <radio_rx_mem_release+0x10>
			mem_release(_radio_pdu_node_rx_free,
   18710:	491e      	ldr	r1, [pc, #120]	; (1878c <radio_rx_mem_release+0x84>)
   18712:	f7f6 fd68 	bl	f1e6 <mem_release>
{
   18716:	4620      	mov	r0, r4
	while (_radio_pdu_node_rx) {
   18718:	b398      	cbz	r0, 18782 <radio_rx_mem_release+0x7a>
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;
   1871a:	6804      	ldr	r4, [r0, #0]
		switch (_radio_pdu_node_rx_free->hdr.type) {
   1871c:	7903      	ldrb	r3, [r0, #4]
   1871e:	3b01      	subs	r3, #1
   18720:	2b0b      	cmp	r3, #11
   18722:	d828      	bhi.n	18776 <radio_rx_mem_release+0x6e>
   18724:	a201      	add	r2, pc, #4	; (adr r2, 1872c <radio_rx_mem_release+0x24>)
   18726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1872a:	bf00      	nop
   1872c:	00018711 	.word	0x00018711
   18730:	00018711 	.word	0x00018711
   18734:	00018711 	.word	0x00018711
   18738:	00018711 	.word	0x00018711
   1873c:	00018711 	.word	0x00018711
   18740:	00018711 	.word	0x00018711
   18744:	0001875d 	.word	0x0001875d
   18748:	00018711 	.word	0x00018711
   1874c:	00018711 	.word	0x00018711
   18750:	00018711 	.word	0x00018711
   18754:	00018711 	.word	0x00018711
   18758:	00018711 	.word	0x00018711
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1875c:	4d0c      	ldr	r5, [pc, #48]	; (18790 <radio_rx_mem_release+0x88>)
   1875e:	88c2      	ldrh	r2, [r0, #6]
   18760:	f44f 71aa 	mov.w	r1, #340	; 0x154
   18764:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   18768:	f7f6 fd5e 	bl	f228 <mem_get>
			mem_release(conn, &_radio.conn_free);
   1876c:	f505 7184 	add.w	r1, r5, #264	; 0x108
   18770:	f7f6 fd39 	bl	f1e6 <mem_release>
			break;
   18774:	e7cf      	b.n	18716 <radio_rx_mem_release+0xe>
			LL_ASSERT(0);
   18776:	4040      	eors	r0, r0
   18778:	f380 8811 	msr	BASEPRI, r0
   1877c:	f04f 0004 	mov.w	r0, #4
   18780:	df02      	svc	2
	*radio_pdu_node_rx = _radio_pdu_node_rx;
   18782:	6030      	str	r0, [r6, #0]
	packet_rx_allocate(0xff);
   18784:	20ff      	movs	r0, #255	; 0xff
   18786:	f7f9 fa4f 	bl	11c28 <packet_rx_allocate>
   1878a:	bd70      	pop	{r4, r5, r6, pc}
   1878c:	20001118 	.word	0x20001118
   18790:	20000fec 	.word	0x20000fec

00018794 <do_radio_rx_fc_set>:
	if (req == ack) {
   18794:	4291      	cmp	r1, r2
   18796:	d007      	beq.n	187a8 <do_radio_rx_fc_set+0x14>
	} else if (((req == 0) &&
   18798:	bb41      	cbnz	r1, 187ec <do_radio_rx_fc_set+0x58>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   1879a:	4b1c      	ldr	r3, [pc, #112]	; (1880c <do_radio_rx_fc_set+0x78>)
   1879c:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
	} else if (((req == 0) &&
   187a0:	4298      	cmp	r0, r3
   187a2:	d023      	beq.n	187ec <do_radio_rx_fc_set+0x58>
		return 1;
   187a4:	2001      	movs	r0, #1
   187a6:	4770      	bx	lr
{
   187a8:	b430      	push	{r4, r5}
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   187aa:	4b18      	ldr	r3, [pc, #96]	; (1880c <do_radio_rx_fc_set+0x78>)
   187ac:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   187b0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   187b4:	429c      	cmp	r4, r3
   187b6:	d002      	beq.n	187be <do_radio_rx_fc_set+0x2a>
			return 1;
   187b8:	2001      	movs	r0, #1
}
   187ba:	bc30      	pop	{r4, r5}
   187bc:	4770      	bx	lr
			if (ack1 == 0) {
   187be:	b19a      	cbz	r2, 187e8 <do_radio_rx_fc_set+0x54>
			u8_t ack1 = ack;
   187c0:	4613      	mov	r3, r2
			_radio.fc_handle[--ack1] = handle;
   187c2:	3b01      	subs	r3, #1
   187c4:	b2db      	uxtb	r3, r3
   187c6:	4c11      	ldr	r4, [pc, #68]	; (1880c <do_radio_rx_fc_set+0x78>)
   187c8:	f103 05b8 	add.w	r5, r3, #184	; 0xb8
   187cc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
   187d0:	80e8      	strh	r0, [r5, #6]
			_radio.fc_ack = ack1;
   187d2:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
			if (req != _radio.fc_req) {
   187d6:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   187da:	b2db      	uxtb	r3, r3
   187dc:	4299      	cmp	r1, r3
   187de:	d00f      	beq.n	18800 <do_radio_rx_fc_set+0x6c>
				_radio.fc_ack = ack;
   187e0:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
				return 1;
   187e4:	2001      	movs	r0, #1
   187e6:	e7e8      	b.n	187ba <do_radio_rx_fc_set+0x26>
				ack1 = TRIPLE_BUFFER_SIZE;
   187e8:	2303      	movs	r3, #3
   187ea:	e7ea      	b.n	187c2 <do_radio_rx_fc_set+0x2e>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   187ec:	b151      	cbz	r1, 18804 <do_radio_rx_fc_set+0x70>
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   187ee:	31b7      	adds	r1, #183	; 0xb7
   187f0:	4b06      	ldr	r3, [pc, #24]	; (1880c <do_radio_rx_fc_set+0x78>)
   187f2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   187f6:	88cb      	ldrh	r3, [r1, #6]
   187f8:	4298      	cmp	r0, r3
   187fa:	d005      	beq.n	18808 <do_radio_rx_fc_set+0x74>
		return 1;
   187fc:	2001      	movs	r0, #1
   187fe:	4770      	bx	lr
	return 0;
   18800:	2000      	movs	r0, #0
   18802:	e7da      	b.n	187ba <do_radio_rx_fc_set+0x26>
   18804:	4608      	mov	r0, r1
   18806:	4770      	bx	lr
   18808:	2000      	movs	r0, #0
   1880a:	4770      	bx	lr
   1880c:	20000fec 	.word	0x20000fec

00018810 <radio_rx_fc_set>:
{
   18810:	b538      	push	{r3, r4, r5, lr}
   18812:	4604      	mov	r4, r0
	if (_radio.fc_ena) {
   18814:	4b1b      	ldr	r3, [pc, #108]	; (18884 <radio_rx_fc_set+0x74>)
   18816:	f893 017e 	ldrb.w	r0, [r3, #382]	; 0x17e
   1881a:	b338      	cbz	r0, 1886c <radio_rx_fc_set+0x5c>
		u8_t req = _radio.fc_req;
   1881c:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   18820:	b2d5      	uxtb	r5, r2
		u8_t ack = _radio.fc_ack;
   18822:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
		if (fc) {
   18826:	b141      	cbz	r1, 1883a <radio_rx_fc_set+0x2a>
			if (handle != 0xffff) {
   18828:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1882c:	429c      	cmp	r4, r3
   1882e:	d023      	beq.n	18878 <radio_rx_fc_set+0x68>
   18830:	4620      	mov	r0, r4
				return do_radio_rx_fc_set(handle, req, ack);
   18832:	4629      	mov	r1, r5
   18834:	f7ff ffae 	bl	18794 <do_radio_rx_fc_set>
   18838:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   1883a:	4b12      	ldr	r3, [pc, #72]	; (18884 <radio_rx_fc_set+0x74>)
   1883c:	f8d3 0148 	ldr.w	r0, [r3, #328]	; 0x148
   18840:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   18844:	4298      	cmp	r0, r3
   18846:	d001      	beq.n	1884c <radio_rx_fc_set+0x3c>
	return 0;
   18848:	4608      	mov	r0, r1
   1884a:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   1884c:	4295      	cmp	r5, r2
   1884e:	d015      	beq.n	1887c <radio_rx_fc_set+0x6c>
			_radio.fc_ack = req;
   18850:	4b0c      	ldr	r3, [pc, #48]	; (18884 <radio_rx_fc_set+0x74>)
   18852:	f883 517d 	strb.w	r5, [r3, #381]	; 0x17d
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   18856:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   1885a:	4298      	cmp	r0, r3
   1885c:	d010      	beq.n	18880 <radio_rx_fc_set+0x70>
			    (req == _radio.fc_req)) {
   1885e:	4b09      	ldr	r3, [pc, #36]	; (18884 <radio_rx_fc_set+0x74>)
   18860:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
   18864:	b2db      	uxtb	r3, r3
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   18866:	429d      	cmp	r5, r3
   18868:	d001      	beq.n	1886e <radio_rx_fc_set+0x5e>
	return 0;
   1886a:	4608      	mov	r0, r1
}
   1886c:	bd38      	pop	{r3, r4, r5, pc}
				_radio.fc_ack = ack;
   1886e:	4b05      	ldr	r3, [pc, #20]	; (18884 <radio_rx_fc_set+0x74>)
   18870:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	return 0;
   18874:	4608      	mov	r0, r1
   18876:	bd38      	pop	{r3, r4, r5, pc}
   18878:	2000      	movs	r0, #0
   1887a:	bd38      	pop	{r3, r4, r5, pc}
   1887c:	4608      	mov	r0, r1
   1887e:	bd38      	pop	{r3, r4, r5, pc}
   18880:	4608      	mov	r0, r1
   18882:	bd38      	pop	{r3, r4, r5, pc}
   18884:	20000fec 	.word	0x20000fec

00018888 <radio_tx_mem_acquire>:
{
   18888:	b508      	push	{r3, lr}
	return mem_acquire(&_radio.pkt_tx_data_free);
   1888a:	4802      	ldr	r0, [pc, #8]	; (18894 <radio_tx_mem_acquire+0xc>)
   1888c:	f7f6 fc8f 	bl	f1ae <mem_acquire>
}
   18890:	bd08      	pop	{r3, pc}
   18892:	bf00      	nop
   18894:	2000114c 	.word	0x2000114c

00018898 <radio_tx_mem_release>:
{
   18898:	b508      	push	{r3, lr}
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   1889a:	4902      	ldr	r1, [pc, #8]	; (188a4 <radio_tx_mem_release+0xc>)
   1889c:	f7f6 fca3 	bl	f1e6 <mem_release>
   188a0:	bd08      	pop	{r3, pc}
   188a2:	bf00      	nop
   188a4:	2000114c 	.word	0x2000114c

000188a8 <radio_tx_mem_enqueue>:
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
   188a8:	b570      	push	{r4, r5, r6, lr}
   188aa:	b088      	sub	sp, #32
   188ac:	4605      	mov	r5, r0
   188ae:	460e      	mov	r6, r1
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   188b0:	4b36      	ldr	r3, [pc, #216]	; (1898c <radio_tx_mem_enqueue+0xe4>)
   188b2:	f893 4172 	ldrb.w	r4, [r3, #370]	; 0x172
   188b6:	3401      	adds	r4, #1
   188b8:	b2e4      	uxtb	r4, r4
	if (last == _radio.packet_tx_count) {
   188ba:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   188be:	429c      	cmp	r4, r3
   188c0:	d02a      	beq.n	18918 <radio_tx_mem_enqueue+0x70>
		last = 0;
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
   188c2:	4628      	mov	r0, r5
   188c4:	f7f9 fa5a 	bl	11d7c <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   188c8:	4601      	mov	r1, r0
   188ca:	2800      	cmp	r0, #0
   188cc:	d057      	beq.n	1897e <radio_tx_mem_enqueue+0xd6>
   188ce:	4b2f      	ldr	r3, [pc, #188]	; (1898c <radio_tx_mem_enqueue+0xe4>)
   188d0:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
   188d4:	b2db      	uxtb	r3, r3
   188d6:	429c      	cmp	r4, r3
   188d8:	d053      	beq.n	18982 <radio_tx_mem_enqueue+0xda>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   188da:	7972      	ldrb	r2, [r6, #5]
   188dc:	4b2b      	ldr	r3, [pc, #172]	; (1898c <radio_tx_mem_enqueue+0xe4>)
   188de:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
   188e2:	3b07      	subs	r3, #7
   188e4:	429a      	cmp	r2, r3
   188e6:	d819      	bhi.n	1891c <radio_tx_mem_enqueue+0x74>
				    offsetof(struct radio_pdu_node_tx,
					     pdu_data) -
				    offsetof(struct pdu_data, payload)));

	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   188e8:	4b28      	ldr	r3, [pc, #160]	; (1898c <radio_tx_mem_enqueue+0xe4>)
   188ea:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   188ee:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   188f2:	f822 5030 	strh.w	r5, [r2, r0, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
   188f6:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   188fa:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   188fe:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   18902:	6056      	str	r6, [r2, #4]
	_radio.packet_tx_last = last;
   18904:	f883 4172 	strb.w	r4, [r3, #370]	; 0x172

	/* break slave latency */
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   18908:	f991 301d 	ldrsb.w	r3, [r1, #29]
   1890c:	2b00      	cmp	r3, #0
   1890e:	db0b      	blt.n	18928 <radio_tx_mem_enqueue+0x80>
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   18910:	2300      	movs	r3, #0
}
   18912:	4618      	mov	r0, r3
   18914:	b008      	add	sp, #32
   18916:	bd70      	pop	{r4, r5, r6, pc}
		last = 0;
   18918:	2400      	movs	r4, #0
   1891a:	e7d2      	b.n	188c2 <radio_tx_mem_enqueue+0x1a>
	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   1891c:	4040      	eors	r0, r0
   1891e:	f380 8811 	msr	BASEPRI, r0
   18922:	f04f 0004 	mov.w	r0, #4
   18926:	df02      	svc	2
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   18928:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
   1892a:	b363      	cbz	r3, 18986 <radio_tx_mem_enqueue+0xde>
   1892c:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   18930:	f013 0f02 	tst.w	r3, #2
   18934:	d001      	beq.n	1893a <radio_tx_mem_enqueue+0x92>
	return 0;
   18936:	2300      	movs	r3, #0
   18938:	e7eb      	b.n	18912 <radio_tx_mem_enqueue+0x6a>
		conn->slave.latency_cancel = 1;
   1893a:	f043 0302 	orr.w	r3, r3, #2
   1893e:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
				 conn->handle, 0, 0, 0, 0, 1, 0,
   18942:	8c0a      	ldrh	r2, [r1, #32]
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   18944:	3207      	adds	r2, #7
   18946:	9106      	str	r1, [sp, #24]
   18948:	4b11      	ldr	r3, [pc, #68]	; (18990 <radio_tx_mem_enqueue+0xe8>)
   1894a:	9305      	str	r3, [sp, #20]
   1894c:	2000      	movs	r0, #0
   1894e:	9004      	str	r0, [sp, #16]
   18950:	2301      	movs	r3, #1
   18952:	9303      	str	r3, [sp, #12]
   18954:	9002      	str	r0, [sp, #8]
   18956:	9001      	str	r0, [sp, #4]
   18958:	9000      	str	r0, [sp, #0]
   1895a:	4603      	mov	r3, r0
   1895c:	b2d2      	uxtb	r2, r2
   1895e:	2103      	movs	r1, #3
   18960:	f7f8 f944 	bl	10bec <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18964:	4603      	mov	r3, r0
   18966:	2800      	cmp	r0, #0
   18968:	d0d3      	beq.n	18912 <radio_tx_mem_enqueue+0x6a>
   1896a:	2802      	cmp	r0, #2
   1896c:	d101      	bne.n	18972 <radio_tx_mem_enqueue+0xca>
	return 0;
   1896e:	2300      	movs	r3, #0
   18970:	e7cf      	b.n	18912 <radio_tx_mem_enqueue+0x6a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18972:	4040      	eors	r0, r0
   18974:	f380 8811 	msr	BASEPRI, r0
   18978:	f04f 0004 	mov.w	r0, #4
   1897c:	df02      	svc	2
		return 1;
   1897e:	2301      	movs	r3, #1
   18980:	e7c7      	b.n	18912 <radio_tx_mem_enqueue+0x6a>
   18982:	2301      	movs	r3, #1
   18984:	e7c5      	b.n	18912 <radio_tx_mem_enqueue+0x6a>
	return 0;
   18986:	2300      	movs	r3, #0
   18988:	e7c3      	b.n	18912 <radio_tx_mem_enqueue+0x6a>
   1898a:	bf00      	nop
   1898c:	20000fec 	.word	0x20000fec
   18990:	00011c0d 	.word	0x00011c0d

00018994 <ll_enc_req_send>:
{
   18994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18998:	4680      	mov	r8, r0
   1899a:	4689      	mov	r9, r1
   1899c:	4616      	mov	r6, r2
   1899e:	461f      	mov	r7, r3
	conn = connection_get(handle);
   189a0:	f7f9 f9ec 	bl	11d7c <connection_get>
	if (!conn) {
   189a4:	2800      	cmp	r0, #0
   189a6:	d055      	beq.n	18a54 <ll_enc_req_send+0xc0>
   189a8:	4605      	mov	r5, r0
	node_tx = radio_tx_mem_acquire();
   189aa:	f7ff ff6d 	bl	18888 <radio_tx_mem_acquire>
	if (node_tx) {
   189ae:	4604      	mov	r4, r0
   189b0:	2800      	cmp	r0, #0
   189b2:	d051      	beq.n	18a58 <ll_enc_req_send+0xc4>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   189b4:	2210      	movs	r2, #16
   189b6:	4639      	mov	r1, r7
   189b8:	f105 0083 	add.w	r0, r5, #131	; 0x83
   189bc:	f7e7 fc80 	bl	2c0 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   189c0:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   189c4:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   189c8:	d008      	beq.n	189dc <ll_enc_req_send+0x48>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   189ca:	2b30      	cmp	r3, #48	; 0x30
   189cc:	d02d      	beq.n	18a2a <ll_enc_req_send+0x96>
			radio_tx_mem_release(node_tx);
   189ce:	4620      	mov	r0, r4
   189d0:	f7ff ff62 	bl	18898 <radio_tx_mem_release>
			return 1;
   189d4:	2301      	movs	r3, #1
}
   189d6:	4618      	mov	r0, r3
   189d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   189dc:	7923      	ldrb	r3, [r4, #4]
   189de:	f043 0303 	orr.w	r3, r3, #3
   189e2:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   189e4:	2317      	movs	r3, #23
   189e6:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   189e8:	2303      	movs	r3, #3
   189ea:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   189ec:	2208      	movs	r2, #8
   189ee:	4649      	mov	r1, r9
   189f0:	18a0      	adds	r0, r4, r2
   189f2:	f7e7 fc65 	bl	2c0 <memcpy>
			enc_req->ediv[0] = ediv[0];
   189f6:	7833      	ldrb	r3, [r6, #0]
   189f8:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   189fa:	7873      	ldrb	r3, [r6, #1]
   189fc:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   189fe:	2108      	movs	r1, #8
   18a00:	f104 0012 	add.w	r0, r4, #18
   18a04:	f7f8 fd74 	bl	114f0 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   18a08:	2104      	movs	r1, #4
   18a0a:	f104 001a 	add.w	r0, r4, #26
   18a0e:	f7f8 fd6f 	bl	114f0 <bt_rand>
		if (radio_tx_mem_enqueue(handle, node_tx)) {
   18a12:	4621      	mov	r1, r4
   18a14:	4640      	mov	r0, r8
   18a16:	f7ff ff47 	bl	188a8 <radio_tx_mem_enqueue>
   18a1a:	4603      	mov	r3, r0
   18a1c:	2800      	cmp	r0, #0
   18a1e:	d0da      	beq.n	189d6 <ll_enc_req_send+0x42>
			radio_tx_mem_release(node_tx);
   18a20:	4620      	mov	r0, r4
   18a22:	f7ff ff39 	bl	18898 <radio_tx_mem_release>
			return 1;
   18a26:	2301      	movs	r3, #1
   18a28:	e7d5      	b.n	189d6 <ll_enc_req_send+0x42>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   18a2a:	2208      	movs	r2, #8
   18a2c:	4649      	mov	r1, r9
   18a2e:	f105 0079 	add.w	r0, r5, #121	; 0x79
   18a32:	f7e7 fc45 	bl	2c0 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   18a36:	7833      	ldrb	r3, [r6, #0]
   18a38:	f885 3081 	strb.w	r3, [r5, #129]	; 0x81
			conn->llcp.encryption.ediv[1] = ediv[1];
   18a3c:	7873      	ldrb	r3, [r6, #1]
   18a3e:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18a42:	7923      	ldrb	r3, [r4, #4]
   18a44:	f043 0303 	orr.w	r3, r3, #3
   18a48:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   18a4a:	2301      	movs	r3, #1
   18a4c:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   18a4e:	230a      	movs	r3, #10
   18a50:	71e3      	strb	r3, [r4, #7]
   18a52:	e7de      	b.n	18a12 <ll_enc_req_send+0x7e>
		return 1;
   18a54:	2301      	movs	r3, #1
   18a56:	e7be      	b.n	189d6 <ll_enc_req_send+0x42>
	return 1;
   18a58:	2301      	movs	r3, #1
   18a5a:	e7bc      	b.n	189d6 <ll_enc_req_send+0x42>

void __weak ll_adv_scan_state_cb(u8_t bm)
{
   18a5c:	4770      	bx	lr

00018a5e <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   18a5e:	b508      	push	{r3, lr}
	if (bm) {
   18a60:	b910      	cbnz	r0, 18a68 <ll_adv_scan_state_cb+0xa>
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
   18a62:	f000 fe5f 	bl	19724 <rpa_refresh_stop>
   18a66:	bd08      	pop	{r3, pc}
		rpa_refresh_start();
   18a68:	f000 fe48 	bl	196fc <rpa_refresh_start>
   18a6c:	bd08      	pop	{r3, pc}
	...

00018a70 <radio_adv_enable>:
{
   18a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18a74:	b08f      	sub	sp, #60	; 0x3c
   18a76:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   18a7a:	2202      	movs	r2, #2
   18a7c:	920d      	str	r2, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
   18a7e:	4aca      	ldr	r2, [pc, #808]	; (18da8 <radio_adv_enable+0x338>)
   18a80:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   18a84:	f012 0f01 	tst.w	r2, #1
   18a88:	d003      	beq.n	18a92 <radio_adv_enable+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18a8a:	200c      	movs	r0, #12
}
   18a8c:	b00f      	add	sp, #60	; 0x3c
   18a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18a92:	461d      	mov	r5, r3
   18a94:	460c      	mov	r4, r1
   18a96:	4607      	mov	r7, r0
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];
   18a98:	4bc3      	ldr	r3, [pc, #780]	; (18da8 <radio_adv_enable+0x338>)
   18a9a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
	pdu_adv = (struct pdu_adv *)
   18a9e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   18aa2:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
   18aa6:	3220      	adds	r2, #32
   18aa8:	eb03 0802 	add.w	r8, r3, r2
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   18aac:	f898 3007 	ldrb.w	r3, [r8, #7]
   18ab0:	f003 030f 	and.w	r3, r3, #15
   18ab4:	2b01      	cmp	r3, #1
   18ab6:	d97f      	bls.n	18bb8 <radio_adv_enable+0x148>
		conn = NULL;
   18ab8:	2600      	movs	r6, #0
	_radio.advertiser.phy_p = phy_p;
   18aba:	4abb      	ldr	r2, [pc, #748]	; (18da8 <radio_adv_enable+0x338>)
   18abc:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
   18ac0:	f367 0302 	bfi	r3, r7, #0, #3
	_radio.advertiser.chan_map = chan_map;
   18ac4:	a80e      	add	r0, sp, #56	; 0x38
   18ac6:	f810 1d09 	ldrb.w	r1, [r0, #-9]!
   18aca:	f361 03c5 	bfi	r3, r1, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
   18ace:	f365 1387 	bfi	r3, r5, #6, #2
   18ad2:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	_radio.advertiser.rl_idx = rl_idx;
   18ad6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   18ada:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
		_radio.ticks_active_to_start;
   18ade:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
	_radio.advertiser.hdr.ticks_active_to_start =
   18ae2:	6193      	str	r3, [r2, #24]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   18ae4:	2327      	movs	r3, #39	; 0x27
   18ae6:	6153      	str	r3, [r2, #20]
	_radio.advertiser.hdr.ticks_preempt_to_start =
   18ae8:	2300      	movs	r3, #0
   18aea:	61d3      	str	r3, [r2, #28]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   18aec:	2101      	movs	r1, #1
   18aee:	f7f6 fbe2 	bl	f2b6 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   18af2:	f898 5007 	ldrb.w	r5, [r8, #7]
   18af6:	f005 050f 	and.w	r5, r5, #15
   18afa:	2d01      	cmp	r5, #1
   18afc:	f000 8108 	beq.w	18d10 <radio_adv_enable+0x2a0>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   18b00:	2d02      	cmp	r5, #2
   18b02:	f000 8111 	beq.w	18d28 <radio_adv_enable+0x2b8>
			      152 + 376) * chan_cnt;
   18b06:	b280      	uxth	r0, r0
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
   18b08:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18b0c:	ebc0 10c3 	rsb	r0, r0, r3, lsl #7
   18b10:	0080      	lsls	r0, r0, #2
   18b12:	b280      	uxth	r0, r0
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
   18b14:	a3a2      	add	r3, pc, #648	; (adr r3, 18da0 <radio_adv_enable+0x330>)
   18b16:	e9d3 2300 	ldrd	r2, r3, [r3]
   18b1a:	49a4      	ldr	r1, [pc, #656]	; (18dac <radio_adv_enable+0x33c>)
   18b1c:	fba0 0101 	umull	r0, r1, r0, r1
   18b20:	f7e8 faec 	bl	10fc <__aeabi_uldivmod>
   18b24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18b28:	4a9f      	ldr	r2, [pc, #636]	; (18da8 <radio_adv_enable+0x338>)
   18b2a:	6210      	str	r0, [r2, #32]
		_radio.advertiser.hdr.ticks_active_to_start;
   18b2c:	6991      	ldr	r1, [r2, #24]
		_radio.advertiser.hdr.ticks_xtal_to_start :
   18b2e:	6953      	ldr	r3, [r2, #20]
	ticks_slot_offset =
   18b30:	4299      	cmp	r1, r3
   18b32:	bf38      	it	cc
   18b34:	4619      	movcc	r1, r3
   18b36:	4688      	mov	r8, r1
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18b38:	2d01      	cmp	r5, #1
   18b3a:	f000 80ff 	beq.w	18d3c <radio_adv_enable+0x2cc>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18b3e:	f7f8 f96f 	bl	10e20 <ticker_ticks_now_get>
   18b42:	4607      	mov	r7, r0
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
   18b44:	b2a4      	uxth	r4, r4
   18b46:	489a      	ldr	r0, [pc, #616]	; (18db0 <radio_adv_enable+0x340>)
   18b48:	fba4 0100 	umull	r0, r1, r4, r0
   18b4c:	2391      	movs	r3, #145	; 0x91
   18b4e:	fb03 1104 	mla	r1, r3, r4, r1
   18b52:	a393      	add	r3, pc, #588	; (adr r3, 18da0 <radio_adv_enable+0x330>)
   18b54:	e9d3 2300 	ldrd	r2, r3, [r3]
   18b58:	f7e8 fad0 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18b5c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
				      _radio.advertiser.hdr.ticks_slot),
   18b60:	4b91      	ldr	r3, [pc, #580]	; (18da8 <radio_adv_enable+0x338>)
   18b62:	6a1b      	ldr	r3, [r3, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18b64:	4443      	add	r3, r8
   18b66:	b29b      	uxth	r3, r3
		ret =
   18b68:	a90d      	add	r1, sp, #52	; 0x34
   18b6a:	9108      	str	r1, [sp, #32]
   18b6c:	4991      	ldr	r1, [pc, #580]	; (18db4 <radio_adv_enable+0x344>)
   18b6e:	9107      	str	r1, [sp, #28]
   18b70:	2000      	movs	r0, #0
   18b72:	9006      	str	r0, [sp, #24]
   18b74:	4990      	ldr	r1, [pc, #576]	; (18db8 <radio_adv_enable+0x348>)
   18b76:	9105      	str	r1, [sp, #20]
   18b78:	9304      	str	r3, [sp, #16]
   18b7a:	9003      	str	r0, [sp, #12]
   18b7c:	9002      	str	r0, [sp, #8]
   18b7e:	9201      	str	r2, [sp, #4]
   18b80:	9000      	str	r0, [sp, #0]
   18b82:	463b      	mov	r3, r7
   18b84:	2205      	movs	r2, #5
   18b86:	2103      	movs	r1, #3
   18b88:	f7f7 ffe2 	bl	10b50 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   18b8c:	2802      	cmp	r0, #2
   18b8e:	f000 813b 	beq.w	18e08 <radio_adv_enable+0x398>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   18b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18b94:	2b00      	cmp	r3, #0
   18b96:	f040 80f2 	bne.w	18d7e <radio_adv_enable+0x30e>
		_radio.advertiser.is_enabled = 1;
   18b9a:	4b83      	ldr	r3, [pc, #524]	; (18da8 <radio_adv_enable+0x338>)
   18b9c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   18ba0:	f042 0201 	orr.w	r2, r2, #1
   18ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   18ba8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   18bac:	f013 0f01 	tst.w	r3, #1
   18bb0:	f000 812e 	beq.w	18e10 <radio_adv_enable+0x3a0>
		return 0;
   18bb4:	2000      	movs	r0, #0
   18bb6:	e769      	b.n	18a8c <radio_adv_enable+0x1c>
		if (_radio.advertiser.conn) {
   18bb8:	4b7b      	ldr	r3, [pc, #492]	; (18da8 <radio_adv_enable+0x338>)
   18bba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   18bbe:	b10b      	cbz	r3, 18bc4 <radio_adv_enable+0x154>
			return BT_HCI_ERR_CMD_DISALLOWED;
   18bc0:	200c      	movs	r0, #12
   18bc2:	e763      	b.n	18a8c <radio_adv_enable+0x1c>
		link = mem_acquire(&_radio.link_rx_free);
   18bc4:	487d      	ldr	r0, [pc, #500]	; (18dbc <radio_adv_enable+0x34c>)
   18bc6:	f7f6 faf2 	bl	f1ae <mem_acquire>
		if (!link) {
   18bca:	4681      	mov	r9, r0
   18bcc:	2800      	cmp	r0, #0
   18bce:	f000 8124 	beq.w	18e1a <radio_adv_enable+0x3aa>
		conn = mem_acquire(&_radio.conn_free);
   18bd2:	487b      	ldr	r0, [pc, #492]	; (18dc0 <radio_adv_enable+0x350>)
   18bd4:	f7f6 faeb 	bl	f1ae <mem_acquire>
		if (!conn) {
   18bd8:	4606      	mov	r6, r0
   18bda:	2800      	cmp	r0, #0
   18bdc:	f000 8092 	beq.w	18d04 <radio_adv_enable+0x294>
		conn->handle = 0xFFFF;
   18be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18be4:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   18be6:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   18bea:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   18bee:	7f43      	ldrb	r3, [r0, #29]
   18bf0:	f36f 1386 	bfc	r3, #6, #1
   18bf4:	7743      	strb	r3, [r0, #29]
		conn->data_chan_use = 0;
   18bf6:	2300      	movs	r3, #0
   18bf8:	77c3      	strb	r3, [r0, #31]
		conn->event_counter = 0;
   18bfa:	8443      	strh	r3, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
   18bfc:	8503      	strh	r3, [r0, #40]	; 0x28
		conn->latency_event = 0;
   18bfe:	8543      	strh	r3, [r0, #42]	; 0x2a
		conn->default_tx_octets = _radio.default_tx_octets;
   18c00:	4969      	ldr	r1, [pc, #420]	; (18da8 <radio_adv_enable+0x338>)
   18c02:	f8b1 211e 	ldrh.w	r2, [r1, #286]	; 0x11e
   18c06:	8582      	strh	r2, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18c08:	221b      	movs	r2, #27
   18c0a:	85c2      	strh	r2, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18c0c:	8602      	strh	r2, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   18c0e:	f8b1 2120 	ldrh.w	r2, [r1, #288]	; 0x120
   18c12:	8642      	strh	r2, [r0, #50]	; 0x32
		conn->max_tx_time =
   18c14:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18c18:	8682      	strh	r2, [r0, #52]	; 0x34
		conn->max_rx_time =
   18c1a:	86c2      	strh	r2, [r0, #54]	; 0x36
		conn->phy_pref_tx = _radio.default_phy_tx;
   18c1c:	f891 0122 	ldrb.w	r0, [r1, #290]	; 0x122
   18c20:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
   18c24:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_tx = BIT(0);
   18c28:	2001      	movs	r0, #1
   18c2a:	f360 02c5 	bfi	r2, r0, #3, #3
		conn->phy_flags = 0;
   18c2e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   18c32:	f363 12c7 	bfi	r2, r3, #7, #1
   18c36:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   18c3a:	f896 2039 	ldrb.w	r2, [r6, #57]	; 0x39
   18c3e:	f360 0202 	bfi	r2, r0, #0, #3
   18c42:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
   18c46:	f891 e124 	ldrb.w	lr, [r1, #292]	; 0x124
   18c4a:	b2d2      	uxtb	r2, r2
   18c4c:	f36e 02c5 	bfi	r2, lr, #3, #3
   18c50:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_rx = BIT(0);
   18c54:	f896 203a 	ldrb.w	r2, [r6, #58]	; 0x3a
   18c58:	f360 0202 	bfi	r2, r0, #0, #3
   18c5c:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
		conn->role = 1;
   18c60:	7f72      	ldrb	r2, [r6, #29]
   18c62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   18c66:	7772      	strb	r2, [r6, #29]
		conn->connect_expire = 6;
   18c68:	2206      	movs	r2, #6
   18c6a:	87b2      	strh	r2, [r6, #60]	; 0x3c
		conn->common.fex_valid = 0;
   18c6c:	f896 2050 	ldrb.w	r2, [r6, #80]	; 0x50
		conn->slave.latency_cancel = 0;
   18c70:	f002 02de 	and.w	r2, r2, #222	; 0xde
   18c74:	f363 0241 	bfi	r2, r3, #1, #1
   18c78:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
		conn->slave.window_widening_prepare_us = 0;
   18c7c:	65f3      	str	r3, [r6, #92]	; 0x5c
		conn->slave.window_widening_event_us = 0;
   18c7e:	6633      	str	r3, [r6, #96]	; 0x60
		conn->slave.ticks_to_offset = 0;
   18c80:	6733      	str	r3, [r6, #112]	; 0x70
		conn->supervision_expire = 0;
   18c82:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
		conn->procedure_expire = 0;
   18c86:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		conn->apto_expire = 0;
   18c8a:	f8a6 304c 	strh.w	r3, [r6, #76]	; 0x4c
		conn->appto_expire = 0;
   18c8e:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
		conn->llcp_req = 0;
   18c92:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
		conn->llcp_ack = 0;
   18c96:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		conn->llcp_version.tx = 0;
   18c9a:	f896 20a8 	ldrb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_version.rx = 0;
   18c9e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   18ca2:	f363 0241 	bfi	r2, r3, #1, #1
   18ca6:	f886 20a8 	strb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_terminate.req = 0;
   18caa:	f886 30b0 	strb.w	r3, [r6, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   18cae:	f886 30b1 	strb.w	r3, [r6, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   18cb2:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   18cb6:	f8c6 90b4 	str.w	r9, [r6, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   18cba:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   18cbe:	f886 30c1 	strb.w	r3, [r6, #193]	; 0xc1
		conn->llcp_length.req = 0;
   18cc2:	f886 30e8 	strb.w	r3, [r6, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   18cc6:	f886 30e9 	strb.w	r3, [r6, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   18cca:	f886 30f4 	strb.w	r3, [r6, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   18cce:	f886 30f5 	strb.w	r3, [r6, #245]	; 0xf5
		conn->sn = 0;
   18cd2:	f896 20f8 	ldrb.w	r2, [r6, #248]	; 0xf8
		conn->empty = 0;
   18cd6:	f002 0280 	and.w	r2, r2, #128	; 0x80
   18cda:	f363 12c7 	bfi	r2, r3, #7, #1
   18cde:	f886 20f8 	strb.w	r2, [r6, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   18ce2:	f8c6 313c 	str.w	r3, [r6, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   18ce6:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   18cea:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   18cee:	f8c6 3148 	str.w	r3, [r6, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   18cf2:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   18cf6:	f886 3150 	strb.w	r3, [r6, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   18cfa:	f886 3151 	strb.w	r3, [r6, #337]	; 0x151
		_radio.advertiser.conn = conn;
   18cfe:	f8c1 60c8 	str.w	r6, [r1, #200]	; 0xc8
   18d02:	e6da      	b.n	18aba <radio_adv_enable+0x4a>
			mem_release(link, &_radio.link_rx_free);
   18d04:	492d      	ldr	r1, [pc, #180]	; (18dbc <radio_adv_enable+0x34c>)
   18d06:	4648      	mov	r0, r9
   18d08:	f7f6 fa6d 	bl	f1e6 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18d0c:	2007      	movs	r0, #7
   18d0e:	e6bd      	b.n	18a8c <radio_adv_enable+0x1c>
		ticks_slot = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   18d10:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18d14:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   18d18:	ebc0 00c3 	rsb	r0, r0, r3, lsl #3
   18d1c:	0080      	lsls	r0, r0, #2
   18d1e:	b280      	uxth	r0, r0
   18d20:	f500 709c 	add.w	r0, r0, #312	; 0x138
   18d24:	b280      	uxth	r0, r0
   18d26:	e6f5      	b.n	18b14 <radio_adv_enable+0xa4>
		ticks_slot = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   18d28:	b280      	uxth	r0, r0
   18d2a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18d2e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   18d32:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   18d36:	0080      	lsls	r0, r0, #2
   18d38:	b280      	uxth	r0, r0
   18d3a:	e6eb      	b.n	18b14 <radio_adv_enable+0xa4>
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18d3c:	2c00      	cmp	r4, #0
   18d3e:	f47f aefe 	bne.w	18b3e <radio_adv_enable+0xce>
		u32_t ticks_now = ticker_ticks_now_get();
   18d42:	f7f8 f86d 	bl	10e20 <ticker_ticks_now_get>
   18d46:	4604      	mov	r4, r0
				    _radio.advertiser.hdr.ticks_slot),
   18d48:	4b17      	ldr	r3, [pc, #92]	; (18da8 <radio_adv_enable+0x338>)
   18d4a:	6a1b      	ldr	r3, [r3, #32]
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18d4c:	eb08 0203 	add.w	r2, r8, r3
   18d50:	b293      	uxth	r3, r2
   18d52:	a90d      	add	r1, sp, #52	; 0x34
   18d54:	9108      	str	r1, [sp, #32]
   18d56:	4917      	ldr	r1, [pc, #92]	; (18db4 <radio_adv_enable+0x344>)
   18d58:	9107      	str	r1, [sp, #28]
   18d5a:	2000      	movs	r0, #0
   18d5c:	9006      	str	r0, [sp, #24]
   18d5e:	4916      	ldr	r1, [pc, #88]	; (18db8 <radio_adv_enable+0x348>)
   18d60:	9105      	str	r1, [sp, #20]
   18d62:	9304      	str	r3, [sp, #16]
   18d64:	9003      	str	r0, [sp, #12]
   18d66:	9002      	str	r0, [sp, #8]
   18d68:	9201      	str	r2, [sp, #4]
   18d6a:	9000      	str	r0, [sp, #0]
   18d6c:	4623      	mov	r3, r4
   18d6e:	2205      	movs	r2, #5
   18d70:	2103      	movs	r1, #3
   18d72:	f7f7 feed 	bl	10b50 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   18d76:	2802      	cmp	r0, #2
   18d78:	d027      	beq.n	18dca <radio_adv_enable+0x35a>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   18d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18d7c:	b34b      	cbz	r3, 18dd2 <radio_adv_enable+0x362>
	if (conn) {
   18d7e:	2e00      	cmp	r6, #0
   18d80:	d04d      	beq.n	18e1e <radio_adv_enable+0x3ae>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   18d82:	4c09      	ldr	r4, [pc, #36]	; (18da8 <radio_adv_enable+0x338>)
   18d84:	f504 71a2 	add.w	r1, r4, #324	; 0x144
   18d88:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   18d8c:	f7f6 fa2b 	bl	f1e6 <mem_release>
		mem_release(conn, &_radio.conn_free);
   18d90:	f504 7184 	add.w	r1, r4, #264	; 0x108
   18d94:	4630      	mov	r0, r6
   18d96:	f7f6 fa26 	bl	f1e6 <mem_release>
	return BT_HCI_ERR_CMD_DISALLOWED;
   18d9a:	200c      	movs	r0, #12
   18d9c:	e676      	b.n	18a8c <radio_adv_enable+0x1c>
   18d9e:	bf00      	nop
   18da0:	1afd498d 	.word	0x1afd498d
   18da4:	00000007 	.word	0x00000007
   18da8:	20000fec 	.word	0x20000fec
   18dac:	3b9aca00 	.word	0x3b9aca00
   18db0:	84e72a00 	.word	0x84e72a00
   18db4:	00011535 	.word	0x00011535
   18db8:	00014ebd 	.word	0x00014ebd
   18dbc:	20001130 	.word	0x20001130
   18dc0:	200010f4 	.word	0x200010f4
   18dc4:	bf20      	wfe
  __ASM volatile ("sev");
   18dc6:	bf40      	sev
  __ASM volatile ("wfe");
   18dc8:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   18dca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18dcc:	2b02      	cmp	r3, #2
   18dce:	d0f9      	beq.n	18dc4 <radio_adv_enable+0x354>
   18dd0:	e7d3      	b.n	18d7a <radio_adv_enable+0x30a>
		ret_cb = TICKER_STATUS_BUSY;
   18dd2:	ab0e      	add	r3, sp, #56	; 0x38
   18dd4:	2202      	movs	r2, #2
   18dd6:	f843 2d04 	str.w	r2, [r3, #-4]!
		ret =
   18dda:	9308      	str	r3, [sp, #32]
   18ddc:	4b11      	ldr	r3, [pc, #68]	; (18e24 <radio_adv_enable+0x3b4>)
   18dde:	9307      	str	r3, [sp, #28]
   18de0:	2000      	movs	r0, #0
   18de2:	9006      	str	r0, [sp, #24]
   18de4:	4b10      	ldr	r3, [pc, #64]	; (18e28 <radio_adv_enable+0x3b8>)
   18de6:	9305      	str	r3, [sp, #20]
   18de8:	9004      	str	r0, [sp, #16]
   18dea:	9003      	str	r0, [sp, #12]
   18dec:	9002      	str	r0, [sp, #8]
   18dee:	9001      	str	r0, [sp, #4]
   18df0:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   18df4:	9300      	str	r3, [sp, #0]
   18df6:	4623      	mov	r3, r4
   18df8:	2203      	movs	r2, #3
   18dfa:	4611      	mov	r1, r2
   18dfc:	f7f7 fea8 	bl	10b50 <ticker_start>
	    !interval) {
   18e00:	e6c4      	b.n	18b8c <radio_adv_enable+0x11c>
   18e02:	bf20      	wfe
  __ASM volatile ("sev");
   18e04:	bf40      	sev
  __ASM volatile ("wfe");
   18e06:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   18e08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18e0a:	2b02      	cmp	r3, #2
   18e0c:	d0f9      	beq.n	18e02 <radio_adv_enable+0x392>
   18e0e:	e6c0      	b.n	18b92 <radio_adv_enable+0x122>
			ll_adv_scan_state_cb(BIT(0));
   18e10:	2001      	movs	r0, #1
   18e12:	f7ff fe24 	bl	18a5e <ll_adv_scan_state_cb>
		return 0;
   18e16:	2000      	movs	r0, #0
   18e18:	e638      	b.n	18a8c <radio_adv_enable+0x1c>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18e1a:	2007      	movs	r0, #7
   18e1c:	e636      	b.n	18a8c <radio_adv_enable+0x1c>
	return BT_HCI_ERR_CMD_DISALLOWED;
   18e1e:	200c      	movs	r0, #12
   18e20:	e634      	b.n	18a8c <radio_adv_enable+0x1c>
   18e22:	bf00      	nop
   18e24:	00011535 	.word	0x00011535
   18e28:	000120b1 	.word	0x000120b1

00018e2c <radio_adv_disable>:
{
   18e2c:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   18e2e:	2103      	movs	r1, #3
   18e30:	2005      	movs	r0, #5
   18e32:	f7f8 ffc1 	bl	11db8 <role_disable>
	if (!status) {
   18e36:	4604      	mov	r4, r0
   18e38:	b9f0      	cbnz	r0, 18e78 <radio_adv_disable+0x4c>
		_radio.advertiser.is_enabled = 0;
   18e3a:	4b13      	ldr	r3, [pc, #76]	; (18e88 <radio_adv_disable+0x5c>)
   18e3c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   18e40:	f36f 0200 	bfc	r2, #0, #1
   18e44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   18e48:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   18e4c:	f013 0f01 	tst.w	r3, #1
   18e50:	d016      	beq.n	18e80 <radio_adv_disable+0x54>
		conn = _radio.advertiser.conn;
   18e52:	4b0d      	ldr	r3, [pc, #52]	; (18e88 <radio_adv_disable+0x5c>)
   18e54:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
		if (conn) {
   18e58:	b175      	cbz	r5, 18e78 <radio_adv_disable+0x4c>
			_radio.advertiser.conn = NULL;
   18e5a:	461e      	mov	r6, r3
   18e5c:	2300      	movs	r3, #0
   18e5e:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   18e62:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   18e66:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   18e6a:	f7f6 f9bc 	bl	f1e6 <mem_release>
			mem_release(conn, &_radio.conn_free);
   18e6e:	f506 7184 	add.w	r1, r6, #264	; 0x108
   18e72:	4628      	mov	r0, r5
   18e74:	f7f6 f9b7 	bl	f1e6 <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   18e78:	b104      	cbz	r4, 18e7c <radio_adv_disable+0x50>
   18e7a:	240c      	movs	r4, #12
}
   18e7c:	4620      	mov	r0, r4
   18e7e:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   18e80:	f7ff fded 	bl	18a5e <ll_adv_scan_state_cb>
   18e84:	e7e5      	b.n	18e52 <radio_adv_disable+0x26>
   18e86:	bf00      	nop
   18e88:	20000fec 	.word	0x20000fec
   18e8c:	00000000 	.word	0x00000000

00018e90 <radio_scan_enable>:
{
   18e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e94:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   18e96:	2402      	movs	r4, #2
   18e98:	940d      	str	r4, [sp, #52]	; 0x34
	if (_radio.scanner.is_enabled) {
   18e9a:	4c77      	ldr	r4, [pc, #476]	; (19078 <radio_scan_enable+0x1e8>)
   18e9c:	f894 40dc 	ldrb.w	r4, [r4, #220]	; 0xdc
   18ea0:	f014 0f01 	tst.w	r4, #1
   18ea4:	d003      	beq.n	18eae <radio_scan_enable+0x1e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18ea6:	200c      	movs	r0, #12
}
   18ea8:	b00f      	add	sp, #60	; 0x3c
   18eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18eae:	461d      	mov	r5, r3
   18eb0:	4617      	mov	r7, r2
   18eb2:	460e      	mov	r6, r1
	_radio.scanner.type = type;
   18eb4:	4c70      	ldr	r4, [pc, #448]	; (19078 <radio_scan_enable+0x1e8>)
   18eb6:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   18eba:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   18ebe:	f3c0 0042 	ubfx	r0, r0, #1, #3
   18ec2:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   18ec6:	f894 20de 	ldrb.w	r2, [r4, #222]	; 0xde
   18eca:	f89d 1068 	ldrb.w	r1, [sp, #104]	; 0x68
   18ece:	f361 0200 	bfi	r2, r1, #0, #1
   18ed2:	f884 20de 	strb.w	r2, [r4, #222]	; 0xde
	_radio.scanner.rl_idx = rl_idx;
   18ed6:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
   18eda:	f884 20df 	strb.w	r2, [r4, #223]	; 0xdf
	_radio.scanner.init_addr_type = init_addr_type;
   18ede:	f366 13c7 	bfi	r3, r6, #7, #1
   18ee2:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   18ee6:	2206      	movs	r2, #6
   18ee8:	4639      	mov	r1, r7
   18eea:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   18eee:	f7e7 f9e7 	bl	2c0 <memcpy>
		TICKER_US_TO_TICKS((u64_t) window * 625);
   18ef2:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
   18ef6:	4e61      	ldr	r6, [pc, #388]	; (1907c <radio_scan_enable+0x1ec>)
   18ef8:	f04f 0a91 	mov.w	sl, #145	; 0x91
   18efc:	fba2 0106 	umull	r0, r1, r2, r6
   18f00:	fb0a 1102 	mla	r1, sl, r2, r1
   18f04:	a35a      	add	r3, pc, #360	; (adr r3, 19070 <radio_scan_enable+0x1e0>)
   18f06:	e9d3 2300 	ldrd	r2, r3, [r3]
   18f0a:	f7e8 f8f7 	bl	10fc <__aeabi_uldivmod>
   18f0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_window =
   18f12:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
	_radio.scanner.filter_policy = filter_policy;
   18f16:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   18f1a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   18f1e:	f362 1305 	bfi	r3, r2, #4, #2
   18f22:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
		_radio.ticks_active_to_start;
   18f26:	f8d4 9180 	ldr.w	r9, [r4, #384]	; 0x180
	_radio.scanner.hdr.ticks_active_to_start =
   18f2a:	f8c4 90d0 	str.w	r9, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_xtal_to_start =
   18f2e:	2327      	movs	r3, #39	; 0x27
   18f30:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	_radio.scanner.hdr.ticks_preempt_to_start =
   18f34:	2300      	movs	r3, #0
   18f36:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		_radio.scanner.ticks_window +
   18f3a:	f100 0809 	add.w	r8, r0, #9
	_radio.scanner.hdr.ticks_slot =
   18f3e:	f8c4 80d8 	str.w	r8, [r4, #216]	; 0xd8
	ticks_interval = TICKER_US_TO_TICKS((u64_t) interval * 625);
   18f42:	b2aa      	uxth	r2, r5
   18f44:	fba2 6706 	umull	r6, r7, r2, r6
   18f48:	fb0a 7702 	mla	r7, sl, r2, r7
   18f4c:	a348      	add	r3, pc, #288	; (adr r3, 19070 <radio_scan_enable+0x1e0>)
   18f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   18f52:	4630      	mov	r0, r6
   18f54:	4639      	mov	r1, r7
   18f56:	f7e8 f8d1 	bl	10fc <__aeabi_uldivmod>
   18f5a:	4604      	mov	r4, r0
   18f5c:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
	    (ticks_interval -
   18f60:	f1aa 0327 	sub.w	r3, sl, #39	; 0x27
	if (_radio.scanner.hdr.ticks_slot >
   18f64:	4598      	cmp	r8, r3
   18f66:	d902      	bls.n	18f6e <radio_scan_enable+0xde>
		_radio.scanner.hdr.ticks_slot =
   18f68:	4a43      	ldr	r2, [pc, #268]	; (19078 <radio_scan_enable+0x1e8>)
   18f6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
	ticks_slot_offset =
   18f6e:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   18f72:	bf38      	it	cc
   18f74:	f04f 0927 	movcc.w	r9, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   18f78:	f7f7 ff52 	bl	10e20 <ticker_ticks_now_get>
   18f7c:	4683      	mov	fp, r0
	if ((_radio.scanner.conn) ||
   18f7e:	4b3e      	ldr	r3, [pc, #248]	; (19078 <radio_scan_enable+0x1e8>)
   18f80:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   18f84:	2b00      	cmp	r3, #0
   18f86:	d045      	beq.n	19014 <radio_scan_enable+0x184>
		us_offset = 0;
   18f88:	2300      	movs	r3, #0
   18f8a:	930c      	str	r3, [sp, #48]	; 0x30
			   (ticks_anchor + TICKER_US_TO_TICKS(us_offset)), 0,
   18f8c:	f04f 0800 	mov.w	r8, #0
   18f90:	a337      	add	r3, pc, #220	; (adr r3, 19070 <radio_scan_enable+0x1e0>)
   18f92:	e9d3 2300 	ldrd	r2, r3, [r3]
   18f96:	493a      	ldr	r1, [pc, #232]	; (19080 <radio_scan_enable+0x1f0>)
   18f98:	980c      	ldr	r0, [sp, #48]	; 0x30
   18f9a:	fba0 0101 	umull	r0, r1, r0, r1
   18f9e:	f7e8 f8ad 	bl	10fc <__aeabi_uldivmod>
   18fa2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18fa6:	4483      	add	fp, r0
			   TICKER_REMAINDER((u64_t) interval * 625),
   18fa8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   18fac:	2500      	movs	r5, #0
   18fae:	4835      	ldr	r0, [pc, #212]	; (19084 <radio_scan_enable+0x1f4>)
   18fb0:	2307      	movs	r3, #7
   18fb2:	fb03 f304 	mul.w	r3, r3, r4
   18fb6:	fb00 3305 	mla	r3, r0, r5, r3
   18fba:	fba4 0100 	umull	r0, r1, r4, r0
   18fbe:	4419      	add	r1, r3
   18fc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18fc4:	2300      	movs	r3, #0
   18fc6:	1a30      	subs	r0, r6, r0
   18fc8:	eb67 0101 	sbc.w	r1, r7, r1
   18fcc:	f7e8 f896 	bl	10fc <__aeabi_uldivmod>
			    _radio.scanner.hdr.ticks_slot),
   18fd0:	4b29      	ldr	r3, [pc, #164]	; (19078 <radio_scan_enable+0x1e8>)
   18fd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18fd6:	4499      	add	r9, r3
   18fd8:	fa1f f389 	uxth.w	r3, r9
   18fdc:	aa0d      	add	r2, sp, #52	; 0x34
   18fde:	9208      	str	r2, [sp, #32]
   18fe0:	4a29      	ldr	r2, [pc, #164]	; (19088 <radio_scan_enable+0x1f8>)
   18fe2:	9207      	str	r2, [sp, #28]
   18fe4:	f8cd 8018 	str.w	r8, [sp, #24]
   18fe8:	4a28      	ldr	r2, [pc, #160]	; (1908c <radio_scan_enable+0x1fc>)
   18fea:	9205      	str	r2, [sp, #20]
   18fec:	9304      	str	r3, [sp, #16]
   18fee:	f8cd 800c 	str.w	r8, [sp, #12]
   18ff2:	9002      	str	r0, [sp, #8]
   18ff4:	f8cd a004 	str.w	sl, [sp, #4]
   18ff8:	f8cd 8000 	str.w	r8, [sp]
   18ffc:	465b      	mov	r3, fp
   18ffe:	2206      	movs	r2, #6
   19000:	2103      	movs	r1, #3
   19002:	4640      	mov	r0, r8
   19004:	f7f7 fda4 	bl	10b50 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   19008:	2802      	cmp	r0, #2
   1900a:	d017      	beq.n	1903c <radio_scan_enable+0x1ac>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   1900c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1900e:	b1cb      	cbz	r3, 19044 <radio_scan_enable+0x1b4>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19010:	200c      	movs	r0, #12
   19012:	e749      	b.n	18ea8 <radio_scan_enable+0x18>
		u32_t ticks_ref = 0;
   19014:	2300      	movs	r3, #0
   19016:	930b      	str	r3, [sp, #44]	; 0x2c
						_radio.scanner.hdr.ticks_slot),
   19018:	4b17      	ldr	r3, [pc, #92]	; (19078 <radio_scan_enable+0x1e8>)
   1901a:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   1901e:	ab0c      	add	r3, sp, #48	; 0x30
   19020:	aa0b      	add	r2, sp, #44	; 0x2c
   19022:	4449      	add	r1, r9
   19024:	2003      	movs	r0, #3
   19026:	f7f9 ff63 	bl	12ef0 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   1902a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1902c:	2b00      	cmp	r3, #0
   1902e:	d0ad      	beq.n	18f8c <radio_scan_enable+0xfc>
			ticks_anchor = ticks_ref;
   19030:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   19034:	e7aa      	b.n	18f8c <radio_scan_enable+0xfc>
   19036:	bf20      	wfe
  __ASM volatile ("sev");
   19038:	bf40      	sev
  __ASM volatile ("wfe");
   1903a:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   1903c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1903e:	2b02      	cmp	r3, #2
   19040:	d0f9      	beq.n	19036 <radio_scan_enable+0x1a6>
   19042:	e7e3      	b.n	1900c <radio_scan_enable+0x17c>
	_radio.scanner.is_enabled = 1;
   19044:	4b0c      	ldr	r3, [pc, #48]	; (19078 <radio_scan_enable+0x1e8>)
   19046:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1904a:	f042 0201 	orr.w	r2, r2, #1
   1904e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	if (!_radio.advertiser.is_enabled) {
   19052:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   19056:	f013 0f01 	tst.w	r3, #1
   1905a:	d001      	beq.n	19060 <radio_scan_enable+0x1d0>
	return 0;
   1905c:	2000      	movs	r0, #0
   1905e:	e723      	b.n	18ea8 <radio_scan_enable+0x18>
		ll_adv_scan_state_cb(BIT(1));
   19060:	2002      	movs	r0, #2
   19062:	f7ff fcfc 	bl	18a5e <ll_adv_scan_state_cb>
	return 0;
   19066:	2000      	movs	r0, #0
   19068:	e71e      	b.n	18ea8 <radio_scan_enable+0x18>
   1906a:	bf00      	nop
   1906c:	f3af 8000 	nop.w
   19070:	1afd498d 	.word	0x1afd498d
   19074:	00000007 	.word	0x00000007
   19078:	20000fec 	.word	0x20000fec
   1907c:	84e72a00 	.word	0x84e72a00
   19080:	3b9aca00 	.word	0x3b9aca00
   19084:	1afd498d 	.word	0x1afd498d
   19088:	00011535 	.word	0x00011535
   1908c:	0001646d 	.word	0x0001646d

00019090 <radio_scan_disable>:
{
   19090:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   19092:	2104      	movs	r1, #4
   19094:	2006      	movs	r0, #6
   19096:	f7f8 fe8f 	bl	11db8 <role_disable>
	if (!status) {
   1909a:	4604      	mov	r4, r0
   1909c:	b9f0      	cbnz	r0, 190dc <radio_scan_disable+0x4c>
		_radio.scanner.is_enabled = 0;
   1909e:	4b13      	ldr	r3, [pc, #76]	; (190ec <radio_scan_disable+0x5c>)
   190a0:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   190a4:	f36f 0200 	bfc	r2, #0, #1
   190a8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		if (!_radio.advertiser.is_enabled) {
   190ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   190b0:	f013 0f01 	tst.w	r3, #1
   190b4:	d016      	beq.n	190e4 <radio_scan_disable+0x54>
		conn = _radio.scanner.conn;
   190b6:	4b0d      	ldr	r3, [pc, #52]	; (190ec <radio_scan_disable+0x5c>)
   190b8:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
		if (conn) {
   190bc:	b175      	cbz	r5, 190dc <radio_scan_disable+0x4c>
			_radio.scanner.conn = NULL;
   190be:	461e      	mov	r6, r3
   190c0:	2300      	movs	r3, #0
   190c2:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
			mem_release(conn->llcp_terminate.
   190c6:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   190ca:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   190ce:	f7f6 f88a 	bl	f1e6 <mem_release>
			mem_release(conn, &_radio.conn_free);
   190d2:	f506 7184 	add.w	r1, r6, #264	; 0x108
   190d6:	4628      	mov	r0, r5
   190d8:	f7f6 f885 	bl	f1e6 <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   190dc:	b104      	cbz	r4, 190e0 <radio_scan_disable+0x50>
   190de:	240c      	movs	r4, #12
}
   190e0:	4620      	mov	r0, r4
   190e2:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   190e4:	f7ff fcbb 	bl	18a5e <ll_adv_scan_state_cb>
   190e8:	e7e5      	b.n	190b6 <radio_scan_disable+0x26>
   190ea:	bf00      	nop
   190ec:	20000fec 	.word	0x20000fec

000190f0 <ll_connect_disable>:
{
   190f0:	b508      	push	{r3, lr}
	if (_radio.scanner.conn == 0) {
   190f2:	4b04      	ldr	r3, [pc, #16]	; (19104 <ll_connect_disable+0x14>)
   190f4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   190f8:	b113      	cbz	r3, 19100 <ll_connect_disable+0x10>
	status = radio_scan_disable();
   190fa:	f7ff ffc9 	bl	19090 <radio_scan_disable>
	return status;
   190fe:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19100:	200c      	movs	r0, #12
}
   19102:	bd08      	pop	{r3, pc}
   19104:	20000fec 	.word	0x20000fec

00019108 <radio_rx_dequeue>:
{
   19108:	b530      	push	{r4, r5, lr}
   1910a:	b083      	sub	sp, #12
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
   1910c:	aa02      	add	r2, sp, #8
   1910e:	2300      	movs	r3, #0
   19110:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   19114:	4947      	ldr	r1, [pc, #284]	; (19234 <radio_rx_dequeue+0x12c>)
   19116:	f8d1 014c 	ldr.w	r0, [r1, #332]	; 0x14c
   1911a:	f501 71a4 	add.w	r1, r1, #328	; 0x148
   1911e:	f7f6 f8be 	bl	f29e <memq_dequeue>
	LL_ASSERT(link);
   19122:	b178      	cbz	r0, 19144 <radio_rx_dequeue+0x3c>
	mem_release(link, &_radio.link_rx_free);
   19124:	4944      	ldr	r1, [pc, #272]	; (19238 <radio_rx_dequeue+0x130>)
   19126:	f7f6 f85e 	bl	f1e6 <mem_release>
	switch (radio_pdu_node_rx->hdr.type) {
   1912a:	9a01      	ldr	r2, [sp, #4]
   1912c:	7913      	ldrb	r3, [r2, #4]
   1912e:	3b01      	subs	r3, #1
   19130:	2b0b      	cmp	r3, #11
   19132:	d824      	bhi.n	1917e <radio_rx_dequeue+0x76>
   19134:	e8df f003 	tbb	[pc, r3]
   19138:	0c0c0c0c 	.word	0x0c0c0c0c
   1913c:	0c180c0c 	.word	0x0c180c0c
   19140:	0c0c0c0c 	.word	0x0c0c0c0c
	LL_ASSERT(link);
   19144:	4040      	eors	r0, r0
   19146:	f380 8811 	msr	BASEPRI, r0
   1914a:	f04f 0004 	mov.w	r0, #4
   1914e:	df02      	svc	2
		LL_ASSERT(_radio.link_rx_data_quota <
   19150:	4938      	ldr	r1, [pc, #224]	; (19234 <radio_rx_dequeue+0x12c>)
   19152:	f891 3150 	ldrb.w	r3, [r1, #336]	; 0x150
   19156:	f891 113c 	ldrb.w	r1, [r1, #316]	; 0x13c
   1915a:	3901      	subs	r1, #1
   1915c:	428b      	cmp	r3, r1
   1915e:	da08      	bge.n	19172 <radio_rx_dequeue+0x6a>
		_radio.link_rx_data_quota++;
   19160:	3301      	adds	r3, #1
   19162:	4934      	ldr	r1, [pc, #208]	; (19234 <radio_rx_dequeue+0x12c>)
   19164:	f881 3150 	strb.w	r3, [r1, #336]	; 0x150
	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   19168:	7913      	ldrb	r3, [r2, #4]
   1916a:	2b06      	cmp	r3, #6
   1916c:	d00d      	beq.n	1918a <radio_rx_dequeue+0x82>
}
   1916e:	b003      	add	sp, #12
   19170:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(_radio.link_rx_data_quota <
   19172:	4040      	eors	r0, r0
   19174:	f380 8811 	msr	BASEPRI, r0
   19178:	f04f 0004 	mov.w	r0, #4
   1917c:	df02      	svc	2
		LL_ASSERT(0);
   1917e:	4040      	eors	r0, r0
   19180:	f380 8811 	msr	BASEPRI, r0
   19184:	f04f 0004 	mov.w	r0, #4
   19188:	df02      	svc	2
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   1918a:	7ad3      	ldrb	r3, [r2, #11]
   1918c:	2b3c      	cmp	r3, #60	; 0x3c
   1918e:	d002      	beq.n	19196 <radio_rx_dequeue+0x8e>
		    radio_le_conn_cmplt->role) {
   19190:	7b12      	ldrb	r2, [r2, #12]
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   19192:	2a00      	cmp	r2, #0
   19194:	d039      	beq.n	1920a <radio_rx_dequeue+0x102>
			if (radio_le_conn_cmplt->status == 0x3c) {
   19196:	2b3c      	cmp	r3, #60	; 0x3c
   19198:	d02a      	beq.n	191f0 <radio_rx_dequeue+0xe8>
		struct connection *conn = NULL;
   1919a:	2400      	movs	r4, #0
			LL_ASSERT(_radio.advertiser.is_enabled);
   1919c:	4b25      	ldr	r3, [pc, #148]	; (19234 <radio_rx_dequeue+0x12c>)
   1919e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   191a2:	f013 0f01 	tst.w	r3, #1
   191a6:	d02a      	beq.n	191fe <radio_rx_dequeue+0xf6>
			_radio.advertiser.is_enabled = 0;
   191a8:	4b22      	ldr	r3, [pc, #136]	; (19234 <radio_rx_dequeue+0x12c>)
   191aa:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   191ae:	f36f 0200 	bfc	r2, #0, #1
   191b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (conn) {
   191b6:	b15c      	cbz	r4, 191d0 <radio_rx_dequeue+0xc8>
			mem_release(node_rx->hdr.onion.link,
   191b8:	4d1e      	ldr	r5, [pc, #120]	; (19234 <radio_rx_dequeue+0x12c>)
   191ba:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   191be:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   191c2:	f7f6 f810 	bl	f1e6 <mem_release>
			mem_release(conn, &_radio.conn_free);
   191c6:	f505 7184 	add.w	r1, r5, #264	; 0x108
   191ca:	4620      	mov	r0, r4
   191cc:	f7f6 f80b 	bl	f1e6 <mem_release>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   191d0:	4b18      	ldr	r3, [pc, #96]	; (19234 <radio_rx_dequeue+0x12c>)
   191d2:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   191d6:	f002 0201 	and.w	r2, r2, #1
		     _radio.advertiser.is_enabled;
   191da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   191de:	f003 0301 	and.w	r3, r3, #1
		if (!bm) {
   191e2:	ea53 0342 	orrs.w	r3, r3, r2, lsl #1
   191e6:	d1c2      	bne.n	1916e <radio_rx_dequeue+0x66>
			ll_adv_scan_state_cb(0);
   191e8:	2000      	movs	r0, #0
   191ea:	f7ff fc38 	bl	18a5e <ll_adv_scan_state_cb>
}
   191ee:	e7be      	b.n	1916e <radio_rx_dequeue+0x66>
				conn = _radio.advertiser.conn;
   191f0:	4b10      	ldr	r3, [pc, #64]	; (19234 <radio_rx_dequeue+0x12c>)
   191f2:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
				_radio.advertiser.conn = NULL;
   191f6:	2200      	movs	r2, #0
   191f8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
   191fc:	e7ce      	b.n	1919c <radio_rx_dequeue+0x94>
			LL_ASSERT(_radio.advertiser.is_enabled);
   191fe:	4040      	eors	r0, r0
   19200:	f380 8811 	msr	BASEPRI, r0
   19204:	f04f 0004 	mov.w	r0, #4
   19208:	df02      	svc	2
			LL_ASSERT(_radio.scanner.is_enabled);
   1920a:	4b0a      	ldr	r3, [pc, #40]	; (19234 <radio_rx_dequeue+0x12c>)
   1920c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   19210:	f013 0f01 	tst.w	r3, #1
   19214:	d008      	beq.n	19228 <radio_rx_dequeue+0x120>
			_radio.scanner.is_enabled = 0;
   19216:	4b07      	ldr	r3, [pc, #28]	; (19234 <radio_rx_dequeue+0x12c>)
   19218:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1921c:	f36f 0200 	bfc	r2, #0, #1
   19220:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		struct connection *conn = NULL;
   19224:	2400      	movs	r4, #0
   19226:	e7c6      	b.n	191b6 <radio_rx_dequeue+0xae>
			LL_ASSERT(_radio.scanner.is_enabled);
   19228:	4040      	eors	r0, r0
   1922a:	f380 8811 	msr	BASEPRI, r0
   1922e:	f04f 0004 	mov.w	r0, #4
   19232:	df02      	svc	2
   19234:	20000fec 	.word	0x20000fec
   19238:	20001130 	.word	0x20001130

0001923c <radio_nrf5_isr>:
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1923c:	4668      	mov	r0, sp
   1923e:	f020 0107 	bic.w	r1, r0, #7
   19242:	468d      	mov	sp, r1
   19244:	b501      	push	{r0, lr}
{
	isr_radio();
   19246:	f7f6 f8e1 	bl	f40c <isr_radio>

	ISR_DIRECT_PM();
   1924a:	f00e fb75 	bl	27938 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   1924e:	f00e f90f 	bl	27470 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   19252:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   19256:	4685      	mov	sp, r0
   19258:	4770      	bx	lr
	...

0001925c <rtc0_nrf5_isr>:
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   1925c:	b510      	push	{r4, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   1925e:	4b0c      	ldr	r3, [pc, #48]	; (19290 <rtc0_nrf5_isr+0x34>)
   19260:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   19264:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   19268:	b922      	cbnz	r2, 19274 <rtc0_nrf5_isr+0x18>

		ticker_trigger(0);
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   1926a:	b94c      	cbnz	r4, 19280 <rtc0_nrf5_isr+0x24>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;

		ticker_trigger(1);
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   1926c:	2000      	movs	r0, #0
   1926e:	f7f5 febf 	bl	eff0 <mayfly_run>
   19272:	bd10      	pop	{r4, pc}
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   19274:	2000      	movs	r0, #0
   19276:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   1927a:	f7f7 fc5b 	bl	10b34 <ticker_trigger>
   1927e:	e7f4      	b.n	1926a <rtc0_nrf5_isr+0xe>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   19280:	2200      	movs	r2, #0
   19282:	4b03      	ldr	r3, [pc, #12]	; (19290 <rtc0_nrf5_isr+0x34>)
   19284:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		ticker_trigger(1);
   19288:	2001      	movs	r0, #1
   1928a:	f7f7 fc53 	bl	10b34 <ticker_trigger>
   1928e:	e7ed      	b.n	1926c <rtc0_nrf5_isr+0x10>
   19290:	4000b000 	.word	0x4000b000

00019294 <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
   19294:	b508      	push	{r3, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
   19296:	2001      	movs	r0, #1
   19298:	f7f5 feaa 	bl	eff0 <mayfly_run>
   1929c:	bd08      	pop	{r3, pc}

0001929e <rng_nrf5_isr>:
{
   1929e:	b508      	push	{r3, lr}
	isr_rand(arg);
   192a0:	f7f7 f9e2 	bl	10668 <isr_rand>
   192a4:	bd08      	pop	{r3, pc}

000192a6 <mayfly_enable_cb>:
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   192a6:	2901      	cmp	r1, #1
   192a8:	d105      	bne.n	192b6 <mayfly_enable_cb+0x10>
{
   192aa:	b508      	push	{r3, lr}
	if (enable) {
   192ac:	b94a      	cbnz	r2, 192c2 <mayfly_enable_cb+0x1c>
		irq_disable(SWI4_IRQn);
   192ae:	2018      	movs	r0, #24
   192b0:	f00e fb0c 	bl	278cc <_arch_irq_disable>
   192b4:	bd08      	pop	{r3, pc}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   192b6:	4040      	eors	r0, r0
   192b8:	f380 8811 	msr	BASEPRI, r0
   192bc:	f04f 0004 	mov.w	r0, #4
   192c0:	df02      	svc	2
		irq_enable(SWI4_IRQn);
   192c2:	2018      	movs	r0, #24
   192c4:	f00e faf4 	bl	278b0 <_arch_irq_enable>
   192c8:	bd08      	pop	{r3, pc}

000192ca <mayfly_is_enabled>:
{
   192ca:	b508      	push	{r3, lr}
	if (callee_id == MAYFLY_CALL_ID_0) {
   192cc:	b129      	cbz	r1, 192da <mayfly_is_enabled+0x10>
	} else if (callee_id == MAYFLY_CALL_ID_1) {
   192ce:	2901      	cmp	r1, #1
   192d0:	d107      	bne.n	192e2 <mayfly_is_enabled+0x18>
		return irq_is_enabled(SWI4_IRQn);
   192d2:	2018      	movs	r0, #24
   192d4:	f00e fb08 	bl	278e8 <_arch_irq_is_enabled>
   192d8:	bd08      	pop	{r3, pc}
		return irq_is_enabled(RTC0_IRQn);
   192da:	200b      	movs	r0, #11
   192dc:	f00e fb04 	bl	278e8 <_arch_irq_is_enabled>
   192e0:	bd08      	pop	{r3, pc}
	LL_ASSERT(0);
   192e2:	4040      	eors	r0, r0
   192e4:	f380 8811 	msr	BASEPRI, r0
   192e8:	f04f 0004 	mov.w	r0, #4
   192ec:	df02      	svc	2

000192ee <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_1)) ||
   192ee:	4288      	cmp	r0, r1
   192f0:	d009      	beq.n	19306 <mayfly_prio_is_equal+0x18>
	return (caller_id == callee_id) ||
   192f2:	b908      	cbnz	r0, 192f8 <mayfly_prio_is_equal+0xa>
	       ((caller_id == MAYFLY_CALL_ID_0) &&
   192f4:	2901      	cmp	r1, #1
   192f6:	d008      	beq.n	1930a <mayfly_prio_is_equal+0x1c>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   192f8:	2801      	cmp	r0, #1
   192fa:	d001      	beq.n	19300 <mayfly_prio_is_equal+0x12>
   192fc:	2000      	movs	r0, #0
   192fe:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_1) &&
   19300:	b129      	cbz	r1, 1930e <mayfly_prio_is_equal+0x20>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   19302:	2000      	movs	r0, #0
   19304:	4770      	bx	lr
   19306:	2001      	movs	r0, #1
   19308:	4770      	bx	lr
   1930a:	2001      	movs	r0, #1
   1930c:	4770      	bx	lr
   1930e:	2001      	movs	r0, #1
}
   19310:	4770      	bx	lr
	...

00019314 <mayfly_pend>:
	switch (callee_id) {
   19314:	b139      	cbz	r1, 19326 <mayfly_pend+0x12>
   19316:	2901      	cmp	r1, #1
   19318:	d00b      	beq.n	19332 <mayfly_pend+0x1e>
		LL_ASSERT(0);
   1931a:	4040      	eors	r0, r0
   1931c:	f380 8811 	msr	BASEPRI, r0
   19320:	f04f 0004 	mov.w	r0, #4
   19324:	df02      	svc	2
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   19326:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1932a:	4b05      	ldr	r3, [pc, #20]	; (19340 <mayfly_pend+0x2c>)
   1932c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19330:	4770      	bx	lr
   19332:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   19336:	4b02      	ldr	r3, [pc, #8]	; (19340 <mayfly_pend+0x2c>)
   19338:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1933c:	4770      	bx	lr
   1933e:	bf00      	nop
   19340:	e000e100 	.word	0xe000e100

00019344 <radio_active_callback>:
{
   19344:	4770      	bx	lr
	...

00019348 <radio_event_callback>:
{
   19348:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1934a:	4b02      	ldr	r3, [pc, #8]	; (19354 <radio_event_callback+0xc>)
   1934c:	6818      	ldr	r0, [r3, #0]
   1934e:	f00f ff44 	bl	291da <_impl_k_sem_give>
   19352:	bd08      	pop	{r3, pc}
   19354:	20001910 	.word	0x20001910

00019358 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   19358:	b510      	push	{r4, lr}
   1935a:	b086      	sub	sp, #24
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
   1935c:	4b37      	ldr	r3, [pc, #220]	; (1943c <ll_init+0xe4>)
   1935e:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(rand_context, sizeof(rand_context), RAND_THREAD_THRESHOLD);
   19360:	2204      	movs	r2, #4
   19362:	2109      	movs	r1, #9
   19364:	4836      	ldr	r0, [pc, #216]	; (19440 <ll_init+0xe8>)
   19366:	f7f7 f957 	bl	10618 <rand_init>
	rand_isr_init(rand_isr_context, sizeof(rand_isr_context),
   1936a:	220c      	movs	r2, #12
   1936c:	2111      	movs	r1, #17
   1936e:	4835      	ldr	r0, [pc, #212]	; (19444 <ll_init+0xec>)
   19370:	f7f7 f95c 	bl	1062c <rand_isr_init>
		      RAND_ISR_THRESHOLD);

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   19374:	4834      	ldr	r0, [pc, #208]	; (19448 <ll_init+0xf0>)
   19376:	f00e fc69 	bl	27c4c <device_get_binding>
	if (!clk_k32) {
   1937a:	2800      	cmp	r0, #0
   1937c:	d054      	beq.n	19428 <ll_init+0xd0>
	const struct clock_control_driver_api *api = dev->driver_api;
   1937e:	6842      	ldr	r2, [r0, #4]
	return api->on(dev, sys);
   19380:	6812      	ldr	r2, [r2, #0]
   19382:	2101      	movs	r1, #1
   19384:	4790      	blx	r2
	}

	clock_control_on(clk_k32, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: bind and use counter driver */
	cntr_init();
   19386:	f7f5 ffab 	bl	f2e0 <cntr_init>

	mayfly_init();
   1938a:	f7f5 fd65 	bl	ee58 <mayfly_init>

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1938e:	4b2f      	ldr	r3, [pc, #188]	; (1944c <ll_init+0xf4>)
   19390:	2108      	movs	r1, #8
   19392:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   19394:	2203      	movs	r2, #3
   19396:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   19398:	2000      	movs	r0, #0
   1939a:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   1939c:	2202      	movs	r2, #2
   1939e:	761a      	strb	r2, [r3, #24]

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
   193a0:	4a2b      	ldr	r2, [pc, #172]	; (19450 <ll_init+0xf8>)
   193a2:	9202      	str	r2, [sp, #8]
   193a4:	220d      	movs	r2, #13
   193a6:	9201      	str	r2, [sp, #4]
   193a8:	9300      	str	r3, [sp, #0]
   193aa:	2304      	movs	r3, #4
   193ac:	4a29      	ldr	r2, [pc, #164]	; (19454 <ll_init+0xfc>)
   193ae:	f7f7 fb67 	bl	10a80 <ticker_init>
		    &_ticker_nodes[0], MAYFLY_CALLER_COUNT, &_ticker_users[0],
		    TICKER_USER_OPS, &_ticker_user_ops[0]);

	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   193b2:	4829      	ldr	r0, [pc, #164]	; (19458 <ll_init+0x100>)
   193b4:	f00e fc4a 	bl	27c4c <device_get_binding>
	if (!clk_m16) {
   193b8:	2800      	cmp	r0, #0
   193ba:	d038      	beq.n	1942e <ll_init+0xd6>
		return -ENODEV;
	}

	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
   193bc:	f44f 7357 	mov.w	r3, #860	; 0x35c
   193c0:	9304      	str	r3, [sp, #16]
   193c2:	4b26      	ldr	r3, [pc, #152]	; (1945c <ll_init+0x104>)
   193c4:	9303      	str	r3, [sp, #12]
   193c6:	231b      	movs	r3, #27
   193c8:	9302      	str	r3, [sp, #8]
   193ca:	9301      	str	r3, [sp, #4]
   193cc:	2302      	movs	r3, #2
   193ce:	9300      	str	r3, [sp, #0]
   193d0:	2301      	movs	r3, #1
   193d2:	461a      	mov	r2, r3
   193d4:	2107      	movs	r1, #7
   193d6:	f7fe fccb 	bl	17d70 <radio_init>
			 RADIO_CONNECTION_CONTEXT_MAX,
			 RADIO_PACKET_COUNT_RX_MAX,
			 RADIO_PACKET_COUNT_TX_MAX,
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
   193da:	bb58      	cbnz	r0, 19434 <ll_init+0xdc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
		       sizeof(_radio));
		return -ENOMEM;
	}

	ll_filter_reset(true);
   193dc:	2001      	movs	r0, #1
   193de:	f000 ffff 	bl	1a3e0 <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   193e2:	2200      	movs	r2, #0
   193e4:	4611      	mov	r1, r2
   193e6:	2001      	movs	r0, #1
   193e8:	f00e fa8c 	bl	27904 <_irq_priority_set>
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   193ec:	2200      	movs	r2, #0
   193ee:	4611      	mov	r1, r2
   193f0:	200b      	movs	r0, #11
   193f2:	f00e fa87 	bl	27904 <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   193f6:	2200      	movs	r2, #0
   193f8:	4611      	mov	r1, r2
   193fa:	2018      	movs	r0, #24
   193fc:	f00e fa82 	bl	27904 <_irq_priority_set>
		    NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
   19400:	2200      	movs	r2, #0
   19402:	2101      	movs	r1, #1
   19404:	200d      	movs	r0, #13
   19406:	f00e fa7d 	bl	27904 <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
   1940a:	2001      	movs	r0, #1
   1940c:	f00e fa50 	bl	278b0 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   19410:	200b      	movs	r0, #11
   19412:	f00e fa4d 	bl	278b0 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   19416:	2018      	movs	r0, #24
   19418:	f00e fa4a 	bl	278b0 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
   1941c:	200d      	movs	r0, #13
   1941e:	f00e fa47 	bl	278b0 <_arch_irq_enable>

	return 0;
   19422:	2000      	movs	r0, #0
}
   19424:	b006      	add	sp, #24
   19426:	bd10      	pop	{r4, pc}
		return -ENODEV;
   19428:	f06f 0012 	mvn.w	r0, #18
   1942c:	e7fa      	b.n	19424 <ll_init+0xcc>
		return -ENODEV;
   1942e:	f06f 0012 	mvn.w	r0, #18
   19432:	e7f7      	b.n	19424 <ll_init+0xcc>
		return -ENOMEM;
   19434:	f06f 000b 	mvn.w	r0, #11
   19438:	e7f4      	b.n	19424 <ll_init+0xcc>
   1943a:	bf00      	nop
   1943c:	20001910 	.word	0x20001910
   19440:	200018f0 	.word	0x200018f0
   19444:	200018fc 	.word	0x200018fc
   19448:	0002e7b0 	.word	0x0002e7b0
   1944c:	200018d0 	.word	0x200018d0
   19450:	20001694 	.word	0x20001694
   19454:	20001574 	.word	0x20001574
   19458:	0002e7bc 	.word	0x0002e7bc
   1945c:	20001174 	.word	0x20001174

00019460 <ll_addr_get>:
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
}

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type > 1) {
   19460:	2801      	cmp	r0, #1
   19462:	d814      	bhi.n	1948e <ll_addr_get+0x2e>
{
   19464:	b538      	push	{r3, r4, r5, lr}
   19466:	460c      	mov	r4, r1
		return NULL;
	}

	if (addr_type) {
   19468:	b140      	cbz	r0, 1947c <ll_addr_get+0x1c>
		if (bdaddr) {
   1946a:	b191      	cbz	r1, 19492 <ll_addr_get+0x32>
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
   1946c:	4d0b      	ldr	r5, [pc, #44]	; (1949c <ll_addr_get+0x3c>)
   1946e:	2206      	movs	r2, #6
   19470:	4629      	mov	r1, r5
   19472:	4620      	mov	r0, r4
   19474:	f7e6 ff24 	bl	2c0 <memcpy>
		}

		return _ll_context.rnd_addr;
   19478:	4628      	mov	r0, r5
   1947a:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (bdaddr) {
   1947c:	b159      	cbz	r1, 19496 <ll_addr_get+0x36>
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
   1947e:	4d08      	ldr	r5, [pc, #32]	; (194a0 <ll_addr_get+0x40>)
   19480:	2206      	movs	r2, #6
   19482:	4629      	mov	r1, r5
   19484:	4620      	mov	r0, r4
   19486:	f7e6 ff1b 	bl	2c0 <memcpy>
	}

	return _ll_context.pub_addr;
   1948a:	4628      	mov	r0, r5
   1948c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   1948e:	2000      	movs	r0, #0
   19490:	4770      	bx	lr
		return _ll_context.rnd_addr;
   19492:	4802      	ldr	r0, [pc, #8]	; (1949c <ll_addr_get+0x3c>)
   19494:	bd38      	pop	{r3, r4, r5, pc}
	return _ll_context.pub_addr;
   19496:	4802      	ldr	r0, [pc, #8]	; (194a0 <ll_addr_get+0x40>)
}
   19498:	bd38      	pop	{r3, r4, r5, pc}
   1949a:	bf00      	nop
   1949c:	2000156e 	.word	0x2000156e
   194a0:	20001568 	.word	0x20001568

000194a4 <ll_addr_set>:

void ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   194a4:	b508      	push	{r3, lr}
	if (addr_type) {
   194a6:	b920      	cbnz	r0, 194b2 <ll_addr_set+0xe>
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
	} else {
		memcpy(_ll_context.pub_addr, bdaddr, BDADDR_SIZE);
   194a8:	2206      	movs	r2, #6
   194aa:	4804      	ldr	r0, [pc, #16]	; (194bc <ll_addr_set+0x18>)
   194ac:	f7e6 ff08 	bl	2c0 <memcpy>
   194b0:	bd08      	pop	{r3, pc}
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
   194b2:	2206      	movs	r2, #6
   194b4:	4802      	ldr	r0, [pc, #8]	; (194c0 <ll_addr_set+0x1c>)
   194b6:	f7e6 ff03 	bl	2c0 <memcpy>
   194ba:	bd08      	pop	{r3, pc}
   194bc:	20001568 	.word	0x20001568
   194c0:	2000156e 	.word	0x2000156e

000194c4 <wl_clear>:
	for (int i = 0; i < WL_SIZE; i++) {
   194c4:	2300      	movs	r3, #0
   194c6:	e007      	b.n	194d8 <wl_clear+0x14>
		wl[i].taken = 0;
   194c8:	4a05      	ldr	r2, [pc, #20]	; (194e0 <wl_clear+0x1c>)
   194ca:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   194ce:	f36f 0100 	bfc	r1, #0, #1
   194d2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   194d6:	3301      	adds	r3, #1
   194d8:	2b07      	cmp	r3, #7
   194da:	ddf5      	ble.n	194c8 <wl_clear+0x4>
}
   194dc:	4770      	bx	lr
   194de:	bf00      	nop
   194e0:	20001b48 	.word	0x20001b48

000194e4 <filter_clear>:
	filter->enable_bitmask = 0;
   194e4:	2300      	movs	r3, #0
   194e6:	7003      	strb	r3, [r0, #0]
	filter->addr_type_bitmask = 0;
   194e8:	7043      	strb	r3, [r0, #1]
   194ea:	4770      	bx	lr

000194ec <rl_clear>:
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   194ec:	2300      	movs	r3, #0
   194ee:	e009      	b.n	19504 <rl_clear+0x18>
		rl[i].taken = 0;
   194f0:	4907      	ldr	r1, [pc, #28]	; (19510 <rl_clear+0x24>)
   194f2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   194f6:	00c2      	lsls	r2, r0, #3
   194f8:	5c88      	ldrb	r0, [r1, r2]
   194fa:	f36f 0000 	bfc	r0, #0, #1
   194fe:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19500:	3301      	adds	r3, #1
   19502:	b2db      	uxtb	r3, r3
   19504:	2b07      	cmp	r3, #7
   19506:	d9f3      	bls.n	194f0 <rl_clear+0x4>
	peer_irk_count = 0;
   19508:	2200      	movs	r2, #0
   1950a:	4b02      	ldr	r3, [pc, #8]	; (19514 <rl_clear+0x28>)
   1950c:	701a      	strb	r2, [r3, #0]
   1950e:	4770      	bx	lr
   19510:	200019d0 	.word	0x200019d0
   19514:	20001944 	.word	0x20001944

00019518 <wl_find>:
{
   19518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1951a:	4606      	mov	r6, r0
   1951c:	460f      	mov	r7, r1
	if (free) {
   1951e:	4615      	mov	r5, r2
   19520:	b10a      	cbz	r2, 19526 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   19522:	23ff      	movs	r3, #255	; 0xff
   19524:	7013      	strb	r3, [r2, #0]
{
   19526:	2400      	movs	r4, #0
   19528:	e00c      	b.n	19544 <wl_find+0x2c>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1952a:	4816      	ldr	r0, [pc, #88]	; (19584 <wl_find+0x6c>)
   1952c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   19530:	2206      	movs	r2, #6
   19532:	4639      	mov	r1, r7
   19534:	3002      	adds	r0, #2
   19536:	f010 fd8f 	bl	2a058 <memcmp>
   1953a:	b9a0      	cbnz	r0, 19566 <wl_find+0x4e>
			return i;
   1953c:	b2e0      	uxtb	r0, r4
   1953e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*free = i;
   19540:	702c      	strb	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   19542:	3401      	adds	r4, #1
   19544:	2c07      	cmp	r4, #7
   19546:	dc1a      	bgt.n	1957e <wl_find+0x66>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19548:	4b0e      	ldr	r3, [pc, #56]	; (19584 <wl_find+0x6c>)
   1954a:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   1954e:	f013 0f01 	tst.w	r3, #1
   19552:	d008      	beq.n	19566 <wl_find+0x4e>
   19554:	4b0b      	ldr	r3, [pc, #44]	; (19584 <wl_find+0x6c>)
   19556:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   1955a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1955e:	f006 0201 	and.w	r2, r6, #1
   19562:	4293      	cmp	r3, r2
   19564:	d0e1      	beq.n	1952a <wl_find+0x12>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   19566:	2d00      	cmp	r5, #0
   19568:	d0eb      	beq.n	19542 <wl_find+0x2a>
   1956a:	4b06      	ldr	r3, [pc, #24]	; (19584 <wl_find+0x6c>)
   1956c:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   19570:	f013 0f01 	tst.w	r3, #1
   19574:	d1e5      	bne.n	19542 <wl_find+0x2a>
   19576:	782b      	ldrb	r3, [r5, #0]
   19578:	2bff      	cmp	r3, #255	; 0xff
   1957a:	d1e2      	bne.n	19542 <wl_find+0x2a>
   1957c:	e7e0      	b.n	19540 <wl_find+0x28>
	return FILTER_IDX_NONE;
   1957e:	20ff      	movs	r0, #255	; 0xff
}
   19580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19582:	bf00      	nop
   19584:	20001b48 	.word	0x20001b48

00019588 <wl_remove>:
{
   19588:	b508      	push	{r3, lr}
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   1958a:	4601      	mov	r1, r0
   1958c:	f811 0b01 	ldrb.w	r0, [r1], #1
   19590:	2200      	movs	r2, #0
   19592:	f7ff ffc1 	bl	19518 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   19596:	2807      	cmp	r0, #7
   19598:	d901      	bls.n	1959e <wl_remove+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1959a:	2002      	movs	r0, #2
}
   1959c:	bd08      	pop	{r3, pc}
		u8_t j = wl[i].rl_idx;
   1959e:	4b0b      	ldr	r3, [pc, #44]	; (195cc <wl_remove+0x44>)
   195a0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   195a4:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   195a6:	2b07      	cmp	r3, #7
   195a8:	d807      	bhi.n	195ba <wl_remove+0x32>
			rl[j].wl = 0;
   195aa:	4909      	ldr	r1, [pc, #36]	; (195d0 <wl_remove+0x48>)
   195ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   195b0:	00da      	lsls	r2, r3, #3
   195b2:	5c8b      	ldrb	r3, [r1, r2]
   195b4:	f36f 1345 	bfc	r3, #5, #1
   195b8:	548b      	strb	r3, [r1, r2]
		wl[i].taken = 0;
   195ba:	4b04      	ldr	r3, [pc, #16]	; (195cc <wl_remove+0x44>)
   195bc:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   195c0:	f36f 0200 	bfc	r2, #0, #1
   195c4:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
		return 0;
   195c8:	2000      	movs	r0, #0
   195ca:	bd08      	pop	{r3, pc}
   195cc:	20001b48 	.word	0x20001b48
   195d0:	200019d0 	.word	0x200019d0

000195d4 <filter_insert>:
{
   195d4:	b538      	push	{r3, r4, r5, lr}
	filter->enable_bitmask |= BIT(index);
   195d6:	2401      	movs	r4, #1
   195d8:	fa04 f501 	lsl.w	r5, r4, r1
   195dc:	7804      	ldrb	r4, [r0, #0]
   195de:	432c      	orrs	r4, r5
   195e0:	7004      	strb	r4, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   195e2:	f002 0201 	and.w	r2, r2, #1
   195e6:	fa02 f401 	lsl.w	r4, r2, r1
   195ea:	7842      	ldrb	r2, [r0, #1]
   195ec:	4322      	orrs	r2, r4
   195ee:	7042      	strb	r2, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   195f0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   195f4:	004a      	lsls	r2, r1, #1
   195f6:	4410      	add	r0, r2
   195f8:	2206      	movs	r2, #6
   195fa:	4619      	mov	r1, r3
   195fc:	3002      	adds	r0, #2
   195fe:	f7e6 fe5f 	bl	2c0 <memcpy>
   19602:	bd38      	pop	{r3, r4, r5, pc}

00019604 <filter_wl_update>:
{
   19604:	b510      	push	{r4, lr}
	filter_clear(&wl_filter);
   19606:	481b      	ldr	r0, [pc, #108]	; (19674 <filter_wl_update+0x70>)
   19608:	f7ff ff6c 	bl	194e4 <filter_clear>
	for (i = 0; i < WL_SIZE; i++) {
   1960c:	2400      	movs	r4, #0
   1960e:	e00c      	b.n	1962a <filter_wl_update+0x26>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   19610:	4b19      	ldr	r3, [pc, #100]	; (19678 <filter_wl_update+0x74>)
   19612:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
				      wl[i].id_addr.val);
   19616:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1961a:	3302      	adds	r3, #2
   1961c:	f3c2 0240 	ubfx	r2, r2, #1, #1
   19620:	4814      	ldr	r0, [pc, #80]	; (19674 <filter_wl_update+0x70>)
   19622:	f7ff ffd7 	bl	195d4 <filter_insert>
	for (i = 0; i < WL_SIZE; i++) {
   19626:	3401      	adds	r4, #1
   19628:	b2e4      	uxtb	r4, r4
   1962a:	2c07      	cmp	r4, #7
   1962c:	d820      	bhi.n	19670 <filter_wl_update+0x6c>
		if (!wl[i].taken) {
   1962e:	4621      	mov	r1, r4
   19630:	4b11      	ldr	r3, [pc, #68]	; (19678 <filter_wl_update+0x74>)
   19632:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   19636:	f013 0f01 	tst.w	r3, #1
   1963a:	d0f4      	beq.n	19626 <filter_wl_update+0x22>
		j = wl[i].rl_idx;
   1963c:	4b0e      	ldr	r3, [pc, #56]	; (19678 <filter_wl_update+0x74>)
   1963e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   19642:	785b      	ldrb	r3, [r3, #1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19644:	4a0d      	ldr	r2, [pc, #52]	; (1967c <filter_wl_update+0x78>)
   19646:	7812      	ldrb	r2, [r2, #0]
   19648:	2a00      	cmp	r2, #0
   1964a:	d0e1      	beq.n	19610 <filter_wl_update+0xc>
   1964c:	2b07      	cmp	r3, #7
   1964e:	d8df      	bhi.n	19610 <filter_wl_update+0xc>
   19650:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   19654:	00c2      	lsls	r2, r0, #3
   19656:	480a      	ldr	r0, [pc, #40]	; (19680 <filter_wl_update+0x7c>)
   19658:	5c82      	ldrb	r2, [r0, r2]
   1965a:	f012 0f04 	tst.w	r2, #4
   1965e:	d0d7      	beq.n	19610 <filter_wl_update+0xc>
		    rl[j].dev) {
   19660:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   19664:	00da      	lsls	r2, r3, #3
   19666:	5c83      	ldrb	r3, [r0, r2]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19668:	f013 0f10 	tst.w	r3, #16
   1966c:	d0db      	beq.n	19626 <filter_wl_update+0x22>
   1966e:	e7cf      	b.n	19610 <filter_wl_update+0xc>
}
   19670:	bd10      	pop	{r4, pc}
   19672:	bf00      	nop
   19674:	20001b88 	.word	0x20001b88
   19678:	20001b48 	.word	0x20001b48
   1967c:	20001b10 	.word	0x20001b10
   19680:	200019d0 	.word	0x200019d0

00019684 <filter_rl_update>:
{
   19684:	b510      	push	{r4, lr}
	filter_clear(&rl_filter);
   19686:	4810      	ldr	r0, [pc, #64]	; (196c8 <filter_rl_update+0x44>)
   19688:	f7ff ff2c 	bl	194e4 <filter_clear>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1968c:	2400      	movs	r4, #0
   1968e:	e001      	b.n	19694 <filter_rl_update+0x10>
   19690:	3401      	adds	r4, #1
   19692:	b2e4      	uxtb	r4, r4
   19694:	2c07      	cmp	r4, #7
   19696:	d815      	bhi.n	196c4 <filter_rl_update+0x40>
		if (rl[i].taken) {
   19698:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1969c:	00d3      	lsls	r3, r2, #3
   1969e:	4a0b      	ldr	r2, [pc, #44]	; (196cc <filter_rl_update+0x48>)
   196a0:	5cd3      	ldrb	r3, [r2, r3]
   196a2:	f013 0f01 	tst.w	r3, #1
   196a6:	d0f3      	beq.n	19690 <filter_rl_update+0xc>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   196a8:	4611      	mov	r1, r2
   196aa:	00a3      	lsls	r3, r4, #2
   196ac:	4423      	add	r3, r4
   196ae:	00da      	lsls	r2, r3, #3
   196b0:	188b      	adds	r3, r1, r2
   196b2:	5c8a      	ldrb	r2, [r1, r2]
   196b4:	3301      	adds	r3, #1
   196b6:	f3c2 1280 	ubfx	r2, r2, #6, #1
   196ba:	4621      	mov	r1, r4
   196bc:	4802      	ldr	r0, [pc, #8]	; (196c8 <filter_rl_update+0x44>)
   196be:	f7ff ff89 	bl	195d4 <filter_insert>
   196c2:	e7e5      	b.n	19690 <filter_rl_update+0xc>
}
   196c4:	bd10      	pop	{r4, pc}
   196c6:	bf00      	nop
   196c8:	20001b14 	.word	0x20001b14
   196cc:	200019d0 	.word	0x200019d0

000196d0 <rl_access_check>:
{
   196d0:	b508      	push	{r3, lr}
	if (check_ar) {
   196d2:	b110      	cbz	r0, 196da <rl_access_check+0xa>
		if (!rl_enable) {
   196d4:	4b08      	ldr	r3, [pc, #32]	; (196f8 <rl_access_check+0x28>)
   196d6:	781b      	ldrb	r3, [r3, #0]
   196d8:	b15b      	cbz	r3, 196f2 <rl_access_check+0x22>
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   196da:	f7fe fc27 	bl	17f2c <radio_adv_is_enabled>
   196de:	b108      	cbz	r0, 196e4 <rl_access_check+0x14>
   196e0:	2000      	movs	r0, #0
   196e2:	bd08      	pop	{r3, pc}
   196e4:	f7fe fc3a 	bl	17f5c <radio_scan_is_enabled>
   196e8:	b108      	cbz	r0, 196ee <rl_access_check+0x1e>
   196ea:	2000      	movs	r0, #0
}
   196ec:	bd08      	pop	{r3, pc}
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   196ee:	2001      	movs	r0, #1
   196f0:	bd08      	pop	{r3, pc}
			return -1;
   196f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   196f6:	bd08      	pop	{r3, pc}
   196f8:	20001b10 	.word	0x20001b10

000196fc <rpa_refresh_start>:
{
   196fc:	b508      	push	{r3, lr}
	if (!rl_enable) {
   196fe:	4b05      	ldr	r3, [pc, #20]	; (19714 <rpa_refresh_start+0x18>)
   19700:	781b      	ldrb	r3, [r3, #0]
   19702:	b903      	cbnz	r3, 19706 <rpa_refresh_start+0xa>
   19704:	bd08      	pop	{r3, pc}
   19706:	4b04      	ldr	r3, [pc, #16]	; (19718 <rpa_refresh_start+0x1c>)
   19708:	681a      	ldr	r2, [r3, #0]
   1970a:	4904      	ldr	r1, [pc, #16]	; (1971c <rpa_refresh_start+0x20>)
   1970c:	4804      	ldr	r0, [pc, #16]	; (19720 <rpa_refresh_start+0x24>)
   1970e:	f010 fbad 	bl	29e6c <k_delayed_work_submit_to_queue>
   19712:	e7f7      	b.n	19704 <rpa_refresh_start+0x8>
   19714:	20001b10 	.word	0x20001b10
   19718:	20002c5c 	.word	0x20002c5c
   1971c:	20002b28 	.word	0x20002b28
   19720:	20002c70 	.word	0x20002c70

00019724 <rpa_refresh_stop>:
{
   19724:	b508      	push	{r3, lr}
	if (!rl_enable) {
   19726:	4b04      	ldr	r3, [pc, #16]	; (19738 <rpa_refresh_stop+0x14>)
   19728:	781b      	ldrb	r3, [r3, #0]
   1972a:	b903      	cbnz	r3, 1972e <rpa_refresh_stop+0xa>
   1972c:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&rpa_work);
   1972e:	4803      	ldr	r0, [pc, #12]	; (1973c <rpa_refresh_stop+0x18>)
   19730:	f010 fb42 	bl	29db8 <k_delayed_work_cancel>
   19734:	e7fa      	b.n	1972c <rpa_refresh_stop+0x8>
   19736:	bf00      	nop
   19738:	20001b10 	.word	0x20001b10
   1973c:	20002b28 	.word	0x20002b28

00019740 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   19740:	2807      	cmp	r0, #7
   19742:	d816      	bhi.n	19772 <ctrl_lrpa_get+0x32>
   19744:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   19748:	00d3      	lsls	r3, r2, #3
   1974a:	4a0d      	ldr	r2, [pc, #52]	; (19780 <ctrl_lrpa_get+0x40>)
   1974c:	5cd3      	ldrb	r3, [r2, r3]
   1974e:	f013 0f08 	tst.w	r3, #8
   19752:	d010      	beq.n	19776 <ctrl_lrpa_get+0x36>
	    !rl[rl_idx].rpas_ready) {
   19754:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   19758:	00d3      	lsls	r3, r2, #3
   1975a:	4a09      	ldr	r2, [pc, #36]	; (19780 <ctrl_lrpa_get+0x40>)
   1975c:	5cd3      	ldrb	r3, [r2, r3]
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1975e:	f013 0f02 	tst.w	r3, #2
   19762:	d00a      	beq.n	1977a <ctrl_lrpa_get+0x3a>
	return rl[rl_idx].local_rpa;
   19764:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19768:	00c2      	lsls	r2, r0, #3
   1976a:	4b05      	ldr	r3, [pc, #20]	; (19780 <ctrl_lrpa_get+0x40>)
   1976c:	4413      	add	r3, r2
   1976e:	6a58      	ldr	r0, [r3, #36]	; 0x24
   19770:	4770      	bx	lr
		return NULL;
   19772:	2000      	movs	r0, #0
   19774:	4770      	bx	lr
   19776:	2000      	movs	r0, #0
   19778:	4770      	bx	lr
   1977a:	2000      	movs	r0, #0
}
   1977c:	4770      	bx	lr
   1977e:	bf00      	nop
   19780:	200019d0 	.word	0x200019d0

00019784 <ctrl_irks_get>:
	*count = peer_irk_count;
   19784:	4b02      	ldr	r3, [pc, #8]	; (19790 <ctrl_irks_get+0xc>)
   19786:	781b      	ldrb	r3, [r3, #0]
   19788:	7003      	strb	r3, [r0, #0]
}
   1978a:	4802      	ldr	r0, [pc, #8]	; (19794 <ctrl_irks_get+0x10>)
   1978c:	4770      	bx	lr
   1978e:	bf00      	nop
   19790:	20001944 	.word	0x20001944
   19794:	20001950 	.word	0x20001950

00019798 <ctrl_rl_idx>:
	if (whitelist) {
   19798:	b1c8      	cbz	r0, 197ce <ctrl_rl_idx+0x36>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1979a:	2907      	cmp	r1, #7
   1979c:	d80b      	bhi.n	197b6 <ctrl_rl_idx+0x1e>
		LL_ASSERT(wl[devmatch_id].taken);
   1979e:	4b17      	ldr	r3, [pc, #92]	; (197fc <ctrl_rl_idx+0x64>)
   197a0:	f813 3031 	ldrb.w	r3, [r3, r1, lsl #3]
   197a4:	f013 0f01 	tst.w	r3, #1
   197a8:	d00b      	beq.n	197c2 <ctrl_rl_idx+0x2a>
		i = wl[devmatch_id].rl_idx;
   197aa:	4b14      	ldr	r3, [pc, #80]	; (197fc <ctrl_rl_idx+0x64>)
   197ac:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   197b0:	7849      	ldrb	r1, [r1, #1]
}
   197b2:	4608      	mov	r0, r1
   197b4:	4770      	bx	lr
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   197b6:	4040      	eors	r0, r0
   197b8:	f380 8811 	msr	BASEPRI, r0
   197bc:	f04f 0004 	mov.w	r0, #4
   197c0:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   197c2:	4040      	eors	r0, r0
   197c4:	f380 8811 	msr	BASEPRI, r0
   197c8:	f04f 0004 	mov.w	r0, #4
   197cc:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   197ce:	2907      	cmp	r1, #7
   197d0:	d80d      	bhi.n	197ee <ctrl_rl_idx+0x56>
		LL_ASSERT(rl[i].taken);
   197d2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   197d6:	00d3      	lsls	r3, r2, #3
   197d8:	4a09      	ldr	r2, [pc, #36]	; (19800 <ctrl_rl_idx+0x68>)
   197da:	5cd3      	ldrb	r3, [r2, r3]
   197dc:	f013 0f01 	tst.w	r3, #1
   197e0:	d1e7      	bne.n	197b2 <ctrl_rl_idx+0x1a>
   197e2:	4040      	eors	r0, r0
   197e4:	f380 8811 	msr	BASEPRI, r0
   197e8:	f04f 0004 	mov.w	r0, #4
   197ec:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   197ee:	4040      	eors	r0, r0
   197f0:	f380 8811 	msr	BASEPRI, r0
   197f4:	f04f 0004 	mov.w	r0, #4
   197f8:	df02      	svc	2
   197fa:	bf00      	nop
   197fc:	20001b48 	.word	0x20001b48
   19800:	200019d0 	.word	0x200019d0

00019804 <ctrl_rl_irk_idx>:
	LL_ASSERT(irkmatch_id < peer_irk_count);
   19804:	4b11      	ldr	r3, [pc, #68]	; (1984c <ctrl_rl_irk_idx+0x48>)
   19806:	781b      	ldrb	r3, [r3, #0]
   19808:	4283      	cmp	r3, r0
   1980a:	d90c      	bls.n	19826 <ctrl_rl_irk_idx+0x22>
	i = peer_irk_rl_ids[irkmatch_id];
   1980c:	4b10      	ldr	r3, [pc, #64]	; (19850 <ctrl_rl_irk_idx+0x4c>)
   1980e:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   19810:	2807      	cmp	r0, #7
   19812:	d80e      	bhi.n	19832 <ctrl_rl_irk_idx+0x2e>
	LL_ASSERT(rl[i].taken);
   19814:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   19818:	00d3      	lsls	r3, r2, #3
   1981a:	4a0e      	ldr	r2, [pc, #56]	; (19854 <ctrl_rl_irk_idx+0x50>)
   1981c:	5cd3      	ldrb	r3, [r2, r3]
   1981e:	f013 0f01 	tst.w	r3, #1
   19822:	d00c      	beq.n	1983e <ctrl_rl_irk_idx+0x3a>
}
   19824:	4770      	bx	lr
	LL_ASSERT(irkmatch_id < peer_irk_count);
   19826:	4040      	eors	r0, r0
   19828:	f380 8811 	msr	BASEPRI, r0
   1982c:	f04f 0004 	mov.w	r0, #4
   19830:	df02      	svc	2
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   19832:	4040      	eors	r0, r0
   19834:	f380 8811 	msr	BASEPRI, r0
   19838:	f04f 0004 	mov.w	r0, #4
   1983c:	df02      	svc	2
	LL_ASSERT(rl[i].taken);
   1983e:	4040      	eors	r0, r0
   19840:	f380 8811 	msr	BASEPRI, r0
   19844:	f04f 0004 	mov.w	r0, #4
   19848:	df02      	svc	2
   1984a:	bf00      	nop
   1984c:	20001944 	.word	0x20001944
   19850:	20001948 	.word	0x20001948
   19854:	200019d0 	.word	0x200019d0

00019858 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   19858:	2807      	cmp	r0, #7
   1985a:	d815      	bhi.n	19888 <ctrl_irk_whitelisted+0x30>
	LL_ASSERT(rl[rl_idx].taken);
   1985c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   19860:	00d3      	lsls	r3, r2, #3
   19862:	4a0a      	ldr	r2, [pc, #40]	; (1988c <ctrl_irk_whitelisted+0x34>)
   19864:	5cd3      	ldrb	r3, [r2, r3]
   19866:	f013 0f01 	tst.w	r3, #1
   1986a:	d007      	beq.n	1987c <ctrl_irk_whitelisted+0x24>
	return rl[rl_idx].wl;
   1986c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19870:	00c3      	lsls	r3, r0, #3
   19872:	4a06      	ldr	r2, [pc, #24]	; (1988c <ctrl_irk_whitelisted+0x34>)
   19874:	5cd0      	ldrb	r0, [r2, r3]
   19876:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1987a:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   1987c:	4040      	eors	r0, r0
   1987e:	f380 8811 	msr	BASEPRI, r0
   19882:	f04f 0004 	mov.w	r0, #4
   19886:	df02      	svc	2
		return false;
   19888:	2000      	movs	r0, #0
}
   1988a:	4770      	bx	lr
   1988c:	200019d0 	.word	0x200019d0

00019890 <ctrl_filter_get>:
	if (whitelist) {
   19890:	b908      	cbnz	r0, 19896 <ctrl_filter_get+0x6>
	return &rl_filter;
   19892:	4802      	ldr	r0, [pc, #8]	; (1989c <ctrl_filter_get+0xc>)
}
   19894:	4770      	bx	lr
		return &wl_filter;
   19896:	4802      	ldr	r0, [pc, #8]	; (198a0 <ctrl_filter_get+0x10>)
   19898:	4770      	bx	lr
   1989a:	bf00      	nop
   1989c:	20001b14 	.word	0x20001b14
   198a0:	20001b88 	.word	0x20001b88

000198a4 <ll_wl_size_get>:
}
   198a4:	2008      	movs	r0, #8
   198a6:	4770      	bx	lr

000198a8 <ll_wl_clear>:
{
   198a8:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   198aa:	f7fe fb47 	bl	17f3c <radio_adv_filter_pol_get>
   198ae:	b110      	cbz	r0, 198b6 <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   198b0:	240c      	movs	r4, #12
}
   198b2:	4620      	mov	r0, r4
   198b4:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   198b6:	f7fe fb59 	bl	17f6c <radio_scan_filter_pol_get>
   198ba:	f010 0401 	ands.w	r4, r0, #1
   198be:	d001      	beq.n	198c4 <ll_wl_clear+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   198c0:	240c      	movs	r4, #12
   198c2:	e7f6      	b.n	198b2 <ll_wl_clear+0xa>
	wl_clear();
   198c4:	f7ff fdfe 	bl	194c4 <wl_clear>
	wl_anon = 0;
   198c8:	2200      	movs	r2, #0
   198ca:	4b01      	ldr	r3, [pc, #4]	; (198d0 <ll_wl_clear+0x28>)
   198cc:	701a      	strb	r2, [r3, #0]
	return 0;
   198ce:	e7f0      	b.n	198b2 <ll_wl_clear+0xa>
   198d0:	20002ab8 	.word	0x20002ab8

000198d4 <ll_wl_remove>:
{
   198d4:	b510      	push	{r4, lr}
   198d6:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   198d8:	f7fe fb30 	bl	17f3c <radio_adv_filter_pol_get>
   198dc:	b108      	cbz	r0, 198e2 <ll_wl_remove+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   198de:	200c      	movs	r0, #12
   198e0:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   198e2:	f7fe fb43 	bl	17f6c <radio_scan_filter_pol_get>
   198e6:	f010 0001 	ands.w	r0, r0, #1
   198ea:	d001      	beq.n	198f0 <ll_wl_remove+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   198ec:	200c      	movs	r0, #12
}
   198ee:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   198f0:	7823      	ldrb	r3, [r4, #0]
   198f2:	2bff      	cmp	r3, #255	; 0xff
   198f4:	d003      	beq.n	198fe <ll_wl_remove+0x2a>
	return wl_remove(addr);
   198f6:	4620      	mov	r0, r4
   198f8:	f7ff fe46 	bl	19588 <wl_remove>
   198fc:	bd10      	pop	{r4, pc}
		wl_anon = 0;
   198fe:	2200      	movs	r2, #0
   19900:	4b01      	ldr	r3, [pc, #4]	; (19908 <ll_wl_remove+0x34>)
   19902:	701a      	strb	r2, [r3, #0]
		return 0;
   19904:	bd10      	pop	{r4, pc}
   19906:	bf00      	nop
   19908:	20002ab8 	.word	0x20002ab8

0001990c <ll_filters_adv_update>:
{
   1990c:	b508      	push	{r3, lr}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   1990e:	b918      	cbnz	r0, 19918 <ll_filters_adv_update+0xc>
	if (rl_enable && !radio_scan_is_enabled()) {
   19910:	4b09      	ldr	r3, [pc, #36]	; (19938 <ll_filters_adv_update+0x2c>)
   19912:	781b      	ldrb	r3, [r3, #0]
   19914:	b943      	cbnz	r3, 19928 <ll_filters_adv_update+0x1c>
   19916:	bd08      	pop	{r3, pc}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   19918:	f7fe fb28 	bl	17f6c <radio_scan_filter_pol_get>
   1991c:	f010 0f01 	tst.w	r0, #1
   19920:	d1f6      	bne.n	19910 <ll_filters_adv_update+0x4>
		filter_wl_update();
   19922:	f7ff fe6f 	bl	19604 <filter_wl_update>
   19926:	e7f3      	b.n	19910 <ll_filters_adv_update+0x4>
	if (rl_enable && !radio_scan_is_enabled()) {
   19928:	f7fe fb18 	bl	17f5c <radio_scan_is_enabled>
   1992c:	2800      	cmp	r0, #0
   1992e:	d1f2      	bne.n	19916 <ll_filters_adv_update+0xa>
		filter_rl_update();
   19930:	f7ff fea8 	bl	19684 <filter_rl_update>
}
   19934:	e7ef      	b.n	19916 <ll_filters_adv_update+0xa>
   19936:	bf00      	nop
   19938:	20001b10 	.word	0x20001b10

0001993c <ll_filters_scan_update>:
{
   1993c:	b508      	push	{r3, lr}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   1993e:	f010 0f01 	tst.w	r0, #1
   19942:	d103      	bne.n	1994c <ll_filters_scan_update+0x10>
	if (rl_enable && !radio_adv_is_enabled()) {
   19944:	4b08      	ldr	r3, [pc, #32]	; (19968 <ll_filters_scan_update+0x2c>)
   19946:	781b      	ldrb	r3, [r3, #0]
   19948:	b93b      	cbnz	r3, 1995a <ll_filters_scan_update+0x1e>
   1994a:	bd08      	pop	{r3, pc}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   1994c:	f7fe faf6 	bl	17f3c <radio_adv_filter_pol_get>
   19950:	2800      	cmp	r0, #0
   19952:	d1f7      	bne.n	19944 <ll_filters_scan_update+0x8>
		filter_wl_update();
   19954:	f7ff fe56 	bl	19604 <filter_wl_update>
   19958:	e7f4      	b.n	19944 <ll_filters_scan_update+0x8>
	if (rl_enable && !radio_adv_is_enabled()) {
   1995a:	f7fe fae7 	bl	17f2c <radio_adv_is_enabled>
   1995e:	2800      	cmp	r0, #0
   19960:	d1f3      	bne.n	1994a <ll_filters_scan_update+0xe>
		filter_rl_update();
   19962:	f7ff fe8f 	bl	19684 <filter_rl_update>
}
   19966:	e7f0      	b.n	1994a <ll_filters_scan_update+0xe>
   19968:	20001b10 	.word	0x20001b10

0001996c <ll_rl_find>:
{
   1996c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19970:	4607      	mov	r7, r0
   19972:	4688      	mov	r8, r1
	if (free) {
   19974:	4616      	mov	r6, r2
   19976:	b10a      	cbz	r2, 1997c <ll_rl_find+0x10>
		*free = FILTER_IDX_NONE;
   19978:	23ff      	movs	r3, #255	; 0xff
   1997a:	7013      	strb	r3, [r2, #0]
{
   1997c:	2400      	movs	r4, #0
   1997e:	e00e      	b.n	1999e <ll_rl_find+0x32>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19980:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19984:	00d3      	lsls	r3, r2, #3
   19986:	481a      	ldr	r0, [pc, #104]	; (199f0 <ll_rl_find+0x84>)
   19988:	4418      	add	r0, r3
   1998a:	2206      	movs	r2, #6
   1998c:	4641      	mov	r1, r8
   1998e:	3001      	adds	r0, #1
   19990:	f010 fb62 	bl	2a058 <memcmp>
   19994:	b9c8      	cbnz	r0, 199ca <ll_rl_find+0x5e>
   19996:	e027      	b.n	199e8 <ll_rl_find+0x7c>
			*free = i;
   19998:	7034      	strb	r4, [r6, #0]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1999a:	3401      	adds	r4, #1
   1999c:	b2e4      	uxtb	r4, r4
   1999e:	2c07      	cmp	r4, #7
   199a0:	d821      	bhi.n	199e6 <ll_rl_find+0x7a>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   199a2:	4625      	mov	r5, r4
   199a4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   199a8:	00d3      	lsls	r3, r2, #3
   199aa:	4a11      	ldr	r2, [pc, #68]	; (199f0 <ll_rl_find+0x84>)
   199ac:	5cd3      	ldrb	r3, [r2, r3]
   199ae:	f013 0f01 	tst.w	r3, #1
   199b2:	d00a      	beq.n	199ca <ll_rl_find+0x5e>
   199b4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   199b8:	00d3      	lsls	r3, r2, #3
   199ba:	4a0d      	ldr	r2, [pc, #52]	; (199f0 <ll_rl_find+0x84>)
   199bc:	5cd3      	ldrb	r3, [r2, r3]
   199be:	f3c3 1380 	ubfx	r3, r3, #6, #1
   199c2:	f007 0201 	and.w	r2, r7, #1
   199c6:	4293      	cmp	r3, r2
   199c8:	d0da      	beq.n	19980 <ll_rl_find+0x14>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   199ca:	2e00      	cmp	r6, #0
   199cc:	d0e5      	beq.n	1999a <ll_rl_find+0x2e>
   199ce:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   199d2:	00eb      	lsls	r3, r5, #3
   199d4:	4a06      	ldr	r2, [pc, #24]	; (199f0 <ll_rl_find+0x84>)
   199d6:	5cd3      	ldrb	r3, [r2, r3]
   199d8:	f013 0f01 	tst.w	r3, #1
   199dc:	d1dd      	bne.n	1999a <ll_rl_find+0x2e>
   199de:	7833      	ldrb	r3, [r6, #0]
   199e0:	2bff      	cmp	r3, #255	; 0xff
   199e2:	d1da      	bne.n	1999a <ll_rl_find+0x2e>
   199e4:	e7d8      	b.n	19998 <ll_rl_find+0x2c>
	return FILTER_IDX_NONE;
   199e6:	24ff      	movs	r4, #255	; 0xff
}
   199e8:	4620      	mov	r0, r4
   199ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   199ee:	bf00      	nop
   199f0:	200019d0 	.word	0x200019d0

000199f4 <wl_add>:
{
   199f4:	b570      	push	{r4, r5, r6, lr}
   199f6:	b082      	sub	sp, #8
   199f8:	4605      	mov	r5, r0
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   199fa:	4604      	mov	r4, r0
   199fc:	f814 0b01 	ldrb.w	r0, [r4], #1
   19a00:	f10d 0207 	add.w	r2, sp, #7
   19a04:	4621      	mov	r1, r4
   19a06:	f7ff fd87 	bl	19518 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   19a0a:	2807      	cmp	r0, #7
   19a0c:	d802      	bhi.n	19a14 <wl_add+0x20>
		return BT_HCI_ERR_INVALID_PARAM;
   19a0e:	2012      	movs	r0, #18
}
   19a10:	b002      	add	sp, #8
   19a12:	bd70      	pop	{r4, r5, r6, pc}
	} else if (j >= ARRAY_SIZE(wl)) {
   19a14:	f89d 6007 	ldrb.w	r6, [sp, #7]
   19a18:	2e07      	cmp	r6, #7
   19a1a:	d901      	bls.n	19a20 <wl_add+0x2c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   19a1c:	2007      	movs	r0, #7
   19a1e:	e7f7      	b.n	19a10 <wl_add+0x1c>
	wl[i].id_addr_type = id_addr->type & 0x1;
   19a20:	4629      	mov	r1, r5
   19a22:	f811 2b01 	ldrb.w	r2, [r1], #1
   19a26:	4817      	ldr	r0, [pc, #92]	; (19a84 <wl_add+0x90>)
   19a28:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
   19a2c:	f362 0341 	bfi	r3, r2, #1, #1
   19a30:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   19a34:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
	memcpy(dst, src, sizeof(*dst));
   19a38:	2206      	movs	r2, #6
   19a3a:	3002      	adds	r0, #2
   19a3c:	f7e6 fc40 	bl	2c0 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   19a40:	2200      	movs	r2, #0
   19a42:	4621      	mov	r1, r4
   19a44:	7828      	ldrb	r0, [r5, #0]
   19a46:	f7ff ff91 	bl	1996c <ll_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   19a4a:	2807      	cmp	r0, #7
   19a4c:	d814      	bhi.n	19a78 <wl_add+0x84>
		wl[i].rl_idx = j;
   19a4e:	4b0d      	ldr	r3, [pc, #52]	; (19a84 <wl_add+0x90>)
   19a50:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   19a54:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   19a56:	490c      	ldr	r1, [pc, #48]	; (19a88 <wl_add+0x94>)
   19a58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19a5c:	00c3      	lsls	r3, r0, #3
   19a5e:	5cca      	ldrb	r2, [r1, r3]
   19a60:	f042 0220 	orr.w	r2, r2, #32
   19a64:	54ca      	strb	r2, [r1, r3]
	wl[i].taken = 1;
   19a66:	4a07      	ldr	r2, [pc, #28]	; (19a84 <wl_add+0x90>)
   19a68:	f812 3036 	ldrb.w	r3, [r2, r6, lsl #3]
   19a6c:	f043 0301 	orr.w	r3, r3, #1
   19a70:	f802 3036 	strb.w	r3, [r2, r6, lsl #3]
	return 0;
   19a74:	2000      	movs	r0, #0
   19a76:	e7cb      	b.n	19a10 <wl_add+0x1c>
		wl[i].rl_idx = FILTER_IDX_NONE;
   19a78:	4b02      	ldr	r3, [pc, #8]	; (19a84 <wl_add+0x90>)
   19a7a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   19a7e:	22ff      	movs	r2, #255	; 0xff
   19a80:	705a      	strb	r2, [r3, #1]
   19a82:	e7f0      	b.n	19a66 <wl_add+0x72>
   19a84:	20001b48 	.word	0x20001b48
   19a88:	200019d0 	.word	0x200019d0

00019a8c <ll_wl_add>:
{
   19a8c:	b510      	push	{r4, lr}
   19a8e:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19a90:	f7fe fa54 	bl	17f3c <radio_adv_filter_pol_get>
   19a94:	b108      	cbz	r0, 19a9a <ll_wl_add+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19a96:	200c      	movs	r0, #12
   19a98:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19a9a:	f7fe fa67 	bl	17f6c <radio_scan_filter_pol_get>
   19a9e:	f010 0001 	ands.w	r0, r0, #1
   19aa2:	d001      	beq.n	19aa8 <ll_wl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19aa4:	200c      	movs	r0, #12
}
   19aa6:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   19aa8:	7823      	ldrb	r3, [r4, #0]
   19aaa:	2bff      	cmp	r3, #255	; 0xff
   19aac:	d003      	beq.n	19ab6 <ll_wl_add+0x2a>
	return wl_add(addr);
   19aae:	4620      	mov	r0, r4
   19ab0:	f7ff ffa0 	bl	199f4 <wl_add>
   19ab4:	bd10      	pop	{r4, pc}
		wl_anon = 1;
   19ab6:	2201      	movs	r2, #1
   19ab8:	4b01      	ldr	r3, [pc, #4]	; (19ac0 <ll_wl_add+0x34>)
   19aba:	701a      	strb	r2, [r3, #0]
		return 0;
   19abc:	bd10      	pop	{r4, pc}
   19abe:	bf00      	nop
   19ac0:	20002ab8 	.word	0x20002ab8

00019ac4 <ctrl_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   19ac4:	4b17      	ldr	r3, [pc, #92]	; (19b24 <ctrl_rl_idx_allowed+0x60>)
   19ac6:	781b      	ldrb	r3, [r3, #0]
   19ac8:	b32b      	cbz	r3, 19b16 <ctrl_rl_idx_allowed+0x52>
   19aca:	2907      	cmp	r1, #7
   19acc:	d825      	bhi.n	19b1a <ctrl_rl_idx_allowed+0x56>
   19ace:	bb30      	cbnz	r0, 19b1e <ctrl_rl_idx_allowed+0x5a>
	LL_ASSERT(rl[rl_idx].taken);
   19ad0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   19ad4:	00d3      	lsls	r3, r2, #3
   19ad6:	4a14      	ldr	r2, [pc, #80]	; (19b28 <ctrl_rl_idx_allowed+0x64>)
   19ad8:	5cd3      	ldrb	r3, [r2, r3]
   19ada:	f013 0f01 	tst.w	r3, #1
   19ade:	d010      	beq.n	19b02 <ctrl_rl_idx_allowed+0x3e>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19ae0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   19ae4:	00d3      	lsls	r3, r2, #3
   19ae6:	4a10      	ldr	r2, [pc, #64]	; (19b28 <ctrl_rl_idx_allowed+0x64>)
   19ae8:	5cd3      	ldrb	r3, [r2, r3]
   19aea:	f013 0f04 	tst.w	r3, #4
   19aee:	d00e      	beq.n	19b0e <ctrl_rl_idx_allowed+0x4a>
   19af0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   19af4:	00cb      	lsls	r3, r1, #3
   19af6:	5cd3      	ldrb	r3, [r2, r3]
   19af8:	f013 0f10 	tst.w	r3, #16
   19afc:	d009      	beq.n	19b12 <ctrl_rl_idx_allowed+0x4e>
   19afe:	2001      	movs	r0, #1
   19b00:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   19b02:	4040      	eors	r0, r0
   19b04:	f380 8811 	msr	BASEPRI, r0
   19b08:	f04f 0004 	mov.w	r0, #4
   19b0c:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19b0e:	2001      	movs	r0, #1
   19b10:	4770      	bx	lr
   19b12:	2000      	movs	r0, #0
   19b14:	4770      	bx	lr
		return true;
   19b16:	2001      	movs	r0, #1
   19b18:	4770      	bx	lr
   19b1a:	2001      	movs	r0, #1
   19b1c:	4770      	bx	lr
   19b1e:	2001      	movs	r0, #1
}
   19b20:	4770      	bx	lr
   19b22:	bf00      	nop
   19b24:	20001b10 	.word	0x20001b10
   19b28:	200019d0 	.word	0x200019d0

00019b2c <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19b2c:	2807      	cmp	r0, #7
   19b2e:	d81a      	bhi.n	19b66 <ll_rl_id_addr_get+0x3a>
{
   19b30:	b570      	push	{r4, r5, r6, lr}
   19b32:	4603      	mov	r3, r0
	LL_ASSERT(rl[rl_idx].taken);
   19b34:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   19b38:	00ec      	lsls	r4, r5, #3
   19b3a:	4811      	ldr	r0, [pc, #68]	; (19b80 <ll_rl_id_addr_get+0x54>)
   19b3c:	5d00      	ldrb	r0, [r0, r4]
   19b3e:	f010 0f01 	tst.w	r0, #1
   19b42:	d016      	beq.n	19b72 <ll_rl_id_addr_get+0x46>
   19b44:	4610      	mov	r0, r2
	*id_addr_type = rl[rl_idx].id_addr_type;
   19b46:	4d0e      	ldr	r5, [pc, #56]	; (19b80 <ll_rl_id_addr_get+0x54>)
   19b48:	009c      	lsls	r4, r3, #2
   19b4a:	18e6      	adds	r6, r4, r3
   19b4c:	00f2      	lsls	r2, r6, #3
   19b4e:	4616      	mov	r6, r2
   19b50:	5caa      	ldrb	r2, [r5, r2]
   19b52:	f3c2 1280 	ubfx	r2, r2, #6, #1
   19b56:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19b58:	4631      	mov	r1, r6
   19b5a:	4429      	add	r1, r5
   19b5c:	2206      	movs	r2, #6
   19b5e:	3101      	adds	r1, #1
   19b60:	f7e6 fbae 	bl	2c0 <memcpy>
   19b64:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19b66:	4040      	eors	r0, r0
   19b68:	f380 8811 	msr	BASEPRI, r0
   19b6c:	f04f 0004 	mov.w	r0, #4
   19b70:	df02      	svc	2
	LL_ASSERT(rl[rl_idx].taken);
   19b72:	4040      	eors	r0, r0
   19b74:	f380 8811 	msr	BASEPRI, r0
   19b78:	f04f 0004 	mov.w	r0, #4
   19b7c:	df02      	svc	2
   19b7e:	bf00      	nop
   19b80:	200019d0 	.word	0x200019d0

00019b84 <ctrl_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   19b84:	4b29      	ldr	r3, [pc, #164]	; (19c2c <ctrl_rl_addr_allowed+0xa8>)
   19b86:	781b      	ldrb	r3, [r3, #0]
   19b88:	2b00      	cmp	r3, #0
   19b8a:	d04a      	beq.n	19c22 <ctrl_rl_addr_allowed+0x9e>
   19b8c:	7813      	ldrb	r3, [r2, #0]
   19b8e:	2bff      	cmp	r3, #255	; 0xff
   19b90:	d001      	beq.n	19b96 <ctrl_rl_addr_allowed+0x12>
		return true;
   19b92:	2001      	movs	r0, #1
   19b94:	4770      	bx	lr
   19b96:	2300      	movs	r3, #0
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19b98:	2b07      	cmp	r3, #7
   19b9a:	d844      	bhi.n	19c26 <ctrl_rl_addr_allowed+0xa2>
{
   19b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19b9e:	e005      	b.n	19bac <ctrl_rl_addr_allowed+0x28>
			if (j == BDADDR_SIZE) {
   19ba0:	2c06      	cmp	r4, #6
   19ba2:	d026      	beq.n	19bf2 <ctrl_rl_addr_allowed+0x6e>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19ba4:	3301      	adds	r3, #1
   19ba6:	b2db      	uxtb	r3, r3
   19ba8:	2b07      	cmp	r3, #7
   19baa:	d838      	bhi.n	19c1e <ctrl_rl_addr_allowed+0x9a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   19bac:	461e      	mov	r6, r3
   19bae:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   19bb2:	00ec      	lsls	r4, r5, #3
   19bb4:	4d1e      	ldr	r5, [pc, #120]	; (19c30 <ctrl_rl_addr_allowed+0xac>)
   19bb6:	5d2c      	ldrb	r4, [r5, r4]
   19bb8:	f014 0f01 	tst.w	r4, #1
   19bbc:	d0f2      	beq.n	19ba4 <ctrl_rl_addr_allowed+0x20>
   19bbe:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   19bc2:	00ec      	lsls	r4, r5, #3
   19bc4:	4d1a      	ldr	r5, [pc, #104]	; (19c30 <ctrl_rl_addr_allowed+0xac>)
   19bc6:	5d2c      	ldrb	r4, [r5, r4]
   19bc8:	f3c4 1480 	ubfx	r4, r4, #6, #1
   19bcc:	4284      	cmp	r4, r0
   19bce:	d1e9      	bne.n	19ba4 <ctrl_rl_addr_allowed+0x20>
			u8_t *addr = rl[i].id_addr.val;
   19bd0:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   19bd4:	00ec      	lsls	r4, r5, #3
   19bd6:	4d16      	ldr	r5, [pc, #88]	; (19c30 <ctrl_rl_addr_allowed+0xac>)
   19bd8:	4425      	add	r5, r4
   19bda:	3501      	adds	r5, #1
			for (j = 0; j < BDADDR_SIZE; j++) {
   19bdc:	2400      	movs	r4, #0
   19bde:	2c05      	cmp	r4, #5
   19be0:	d8de      	bhi.n	19ba0 <ctrl_rl_addr_allowed+0x1c>
				if (addr[j] != id_addr[j]) {
   19be2:	f815 e004 	ldrb.w	lr, [r5, r4]
   19be6:	5d0f      	ldrb	r7, [r1, r4]
   19be8:	45be      	cmp	lr, r7
   19bea:	d1d9      	bne.n	19ba0 <ctrl_rl_addr_allowed+0x1c>
			for (j = 0; j < BDADDR_SIZE; j++) {
   19bec:	3401      	adds	r4, #1
   19bee:	b2e4      	uxtb	r4, r4
   19bf0:	e7f5      	b.n	19bde <ctrl_rl_addr_allowed+0x5a>
				*rl_idx = i;
   19bf2:	7013      	strb	r3, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   19bf4:	eb06 0286 	add.w	r2, r6, r6, lsl #2
   19bf8:	00d3      	lsls	r3, r2, #3
   19bfa:	4a0d      	ldr	r2, [pc, #52]	; (19c30 <ctrl_rl_addr_allowed+0xac>)
   19bfc:	5cd3      	ldrb	r3, [r2, r3]
   19bfe:	f013 0f04 	tst.w	r3, #4
   19c02:	d00a      	beq.n	19c1a <ctrl_rl_addr_allowed+0x96>
   19c04:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   19c08:	00f3      	lsls	r3, r6, #3
   19c0a:	5cd3      	ldrb	r3, [r2, r3]
   19c0c:	f013 0f10 	tst.w	r3, #16
   19c10:	d101      	bne.n	19c16 <ctrl_rl_addr_allowed+0x92>
   19c12:	2000      	movs	r0, #0
   19c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c16:	2001      	movs	r0, #1
   19c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c1a:	2001      	movs	r0, #1
   19c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
   19c1e:	2001      	movs	r0, #1
   19c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return true;
   19c22:	2001      	movs	r0, #1
   19c24:	4770      	bx	lr
	return true;
   19c26:	2001      	movs	r0, #1
}
   19c28:	4770      	bx	lr
   19c2a:	bf00      	nop
   19c2c:	20001b10 	.word	0x20001b10
   19c30:	200019d0 	.word	0x200019d0

00019c34 <ctrl_rl_addr_resolve>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   19c34:	4b13      	ldr	r3, [pc, #76]	; (19c84 <ctrl_rl_addr_resolve+0x50>)
   19c36:	781b      	ldrb	r3, [r3, #0]
   19c38:	b1db      	cbz	r3, 19c72 <ctrl_rl_addr_resolve+0x3e>
   19c3a:	2a07      	cmp	r2, #7
   19c3c:	d81b      	bhi.n	19c76 <ctrl_rl_addr_resolve+0x42>
{
   19c3e:	b510      	push	{r4, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   19c40:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   19c44:	00e3      	lsls	r3, r4, #3
   19c46:	4c10      	ldr	r4, [pc, #64]	; (19c88 <ctrl_rl_addr_resolve+0x54>)
   19c48:	5ce3      	ldrb	r3, [r4, r3]
   19c4a:	f013 0f08 	tst.w	r3, #8
   19c4e:	d014      	beq.n	19c7a <ctrl_rl_addr_resolve+0x46>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   19c50:	b1a8      	cbz	r0, 19c7e <ctrl_rl_addr_resolve+0x4a>
   19c52:	794b      	ldrb	r3, [r1, #5]
   19c54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19c58:	2b40      	cmp	r3, #64	; 0x40
   19c5a:	d001      	beq.n	19c60 <ctrl_rl_addr_resolve+0x2c>
	return false;
   19c5c:	2000      	movs	r0, #0
}
   19c5e:	bd10      	pop	{r4, pc}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   19c60:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   19c64:	00d3      	lsls	r3, r2, #3
   19c66:	4620      	mov	r0, r4
   19c68:	4418      	add	r0, r3
   19c6a:	3007      	adds	r0, #7
   19c6c:	f7ea fbc6 	bl	43fc <bt_rpa_irk_matches>
   19c70:	bd10      	pop	{r4, pc}
		return false;
   19c72:	2000      	movs	r0, #0
   19c74:	4770      	bx	lr
   19c76:	2000      	movs	r0, #0
   19c78:	4770      	bx	lr
   19c7a:	2000      	movs	r0, #0
   19c7c:	bd10      	pop	{r4, pc}
	return false;
   19c7e:	2000      	movs	r0, #0
   19c80:	bd10      	pop	{r4, pc}
   19c82:	bf00      	nop
   19c84:	20001b10 	.word	0x20001b10
   19c88:	200019d0 	.word	0x200019d0

00019c8c <ctrl_rl_enabled>:
	return rl_enable;
   19c8c:	4b02      	ldr	r3, [pc, #8]	; (19c98 <ctrl_rl_enabled+0xc>)
   19c8e:	7818      	ldrb	r0, [r3, #0]
}
   19c90:	3000      	adds	r0, #0
   19c92:	bf18      	it	ne
   19c94:	2001      	movne	r0, #1
   19c96:	4770      	bx	lr
   19c98:	20001b10 	.word	0x20001b10

00019c9c <ll_rl_pdu_adv_update>:
{
   19c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19c9e:	4605      	mov	r5, r0
   19ca0:	460c      	mov	r4, r1
	u8_t *adva = pdu->type == PDU_ADV_TYPE_SCAN_RSP ?
   19ca2:	780b      	ldrb	r3, [r1, #0]
   19ca4:	f003 030f 	and.w	r3, r3, #15
				  &pdu->payload.scan_rsp.addr[0] :
   19ca8:	2b04      	cmp	r3, #4
   19caa:	d024      	beq.n	19cf6 <ll_rl_pdu_adv_update+0x5a>
   19cac:	1c8f      	adds	r7, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   19cae:	f000 fbc5 	bl	1a43c <ll_adv_set_get>
   19cb2:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   19cb4:	2d07      	cmp	r5, #7
   19cb6:	d826      	bhi.n	19d06 <ll_rl_pdu_adv_update+0x6a>
   19cb8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19cbc:	00d3      	lsls	r3, r2, #3
   19cbe:	4a30      	ldr	r2, [pc, #192]	; (19d80 <ll_rl_pdu_adv_update+0xe4>)
   19cc0:	5cd3      	ldrb	r3, [r2, r3]
   19cc2:	f013 0f08 	tst.w	r3, #8
   19cc6:	d01e      	beq.n	19d06 <ll_rl_pdu_adv_update+0x6a>
		LL_ASSERT(rl[idx].rpas_ready);
   19cc8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19ccc:	00d3      	lsls	r3, r2, #3
   19cce:	4a2c      	ldr	r2, [pc, #176]	; (19d80 <ll_rl_pdu_adv_update+0xe4>)
   19cd0:	5cd3      	ldrb	r3, [r2, r3]
   19cd2:	f013 0f02 	tst.w	r3, #2
   19cd6:	d010      	beq.n	19cfa <ll_rl_pdu_adv_update+0x5e>
		pdu->tx_addr = 1;
   19cd8:	7823      	ldrb	r3, [r4, #0]
   19cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19cde:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   19ce0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19ce4:	00da      	lsls	r2, r3, #3
   19ce6:	4b26      	ldr	r3, [pc, #152]	; (19d80 <ll_rl_pdu_adv_update+0xe4>)
   19ce8:	4413      	add	r3, r2
   19cea:	2206      	movs	r2, #6
   19cec:	6a59      	ldr	r1, [r3, #36]	; 0x24
   19cee:	4638      	mov	r0, r7
   19cf0:	f7e6 fae6 	bl	2c0 <memcpy>
   19cf4:	e014      	b.n	19d20 <ll_rl_pdu_adv_update+0x84>
				  &pdu->payload.scan_rsp.addr[0] :
   19cf6:	1c8f      	adds	r7, r1, #2
   19cf8:	e7d9      	b.n	19cae <ll_rl_pdu_adv_update+0x12>
		LL_ASSERT(rl[idx].rpas_ready);
   19cfa:	4040      	eors	r0, r0
   19cfc:	f380 8811 	msr	BASEPRI, r0
   19d00:	f04f 0004 	mov.w	r0, #4
   19d04:	df02      	svc	2
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   19d06:	7833      	ldrb	r3, [r6, #0]
   19d08:	f3c3 1340 	ubfx	r3, r3, #5, #1
   19d0c:	7822      	ldrb	r2, [r4, #0]
   19d0e:	f363 1286 	bfi	r2, r3, #6, #1
   19d12:	7022      	strb	r2, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   19d14:	7830      	ldrb	r0, [r6, #0]
   19d16:	4639      	mov	r1, r7
   19d18:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19d1c:	f7ff fba0 	bl	19460 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19d20:	7823      	ldrb	r3, [r4, #0]
   19d22:	f003 030f 	and.w	r3, r3, #15
   19d26:	2b01      	cmp	r3, #1
   19d28:	d000      	beq.n	19d2c <ll_rl_pdu_adv_update+0x90>
   19d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   19d2c:	2d07      	cmp	r5, #7
   19d2e:	d807      	bhi.n	19d40 <ll_rl_pdu_adv_update+0xa4>
   19d30:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19d34:	00d3      	lsls	r3, r2, #3
   19d36:	4a12      	ldr	r2, [pc, #72]	; (19d80 <ll_rl_pdu_adv_update+0xe4>)
   19d38:	5cd3      	ldrb	r3, [r2, r3]
   19d3a:	f013 0f04 	tst.w	r3, #4
   19d3e:	d10d      	bne.n	19d5c <ll_rl_pdu_adv_update+0xc0>
			pdu->rx_addr = ll_adv->id_addr_type;
   19d40:	4631      	mov	r1, r6
   19d42:	f811 3b02 	ldrb.w	r3, [r1], #2
   19d46:	09db      	lsrs	r3, r3, #7
   19d48:	7822      	ldrb	r2, [r4, #0]
   19d4a:	f363 12c7 	bfi	r2, r3, #7, #1
   19d4e:	4620      	mov	r0, r4
   19d50:	f800 2b08 	strb.w	r2, [r0], #8
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   19d54:	2206      	movs	r2, #6
   19d56:	f7e6 fab3 	bl	2c0 <memcpy>
}
   19d5a:	e7e6      	b.n	19d2a <ll_rl_pdu_adv_update+0x8e>
			pdu->rx_addr = 1;
   19d5c:	7823      	ldrb	r3, [r4, #0]
   19d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19d62:	4620      	mov	r0, r4
   19d64:	f800 3b08 	strb.w	r3, [r0], #8
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   19d68:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19d6c:	00eb      	lsls	r3, r5, #3
   19d6e:	3318      	adds	r3, #24
   19d70:	4611      	mov	r1, r2
   19d72:	4419      	add	r1, r3
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   19d74:	2206      	movs	r2, #6
   19d76:	4411      	add	r1, r2
   19d78:	f7e6 faa2 	bl	2c0 <memcpy>
   19d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19d7e:	bf00      	nop
   19d80:	200019d0 	.word	0x200019d0

00019d84 <rpa_adv_refresh>:
{
   19d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ll_adv = ll_adv_set_get();
   19d88:	f000 fb58 	bl	1a43c <ll_adv_set_get>
   19d8c:	4606      	mov	r6, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   19d8e:	7803      	ldrb	r3, [r0, #0]
   19d90:	f003 0360 	and.w	r3, r3, #96	; 0x60
   19d94:	2b40      	cmp	r3, #64	; 0x40
   19d96:	d003      	beq.n	19da0 <rpa_adv_refresh+0x1c>
   19d98:	2b60      	cmp	r3, #96	; 0x60
   19d9a:	d001      	beq.n	19da0 <rpa_adv_refresh+0x1c>
   19d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   19da0:	f7fe f8bc 	bl	17f1c <radio_adv_data_get>
   19da4:	4604      	mov	r4, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19da6:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   19daa:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19dae:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   19db2:	1887      	adds	r7, r0, r2
	if (radio_adv_data->first == radio_adv_data->last) {
   19db4:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   19db8:	429d      	cmp	r5, r3
   19dba:	d02d      	beq.n	19e18 <rpa_adv_refresh+0x94>
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   19dbc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19dc0:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   19dc4:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   19dc8:	5ca0      	ldrb	r0, [r4, r2]
   19dca:	5ce1      	ldrb	r1, [r4, r3]
   19dcc:	f360 0103 	bfi	r1, r0, #0, #4
	pdu->rfu = 0;
   19dd0:	f36f 1104 	bfc	r1, #4, #1
   19dd4:	54e1      	strb	r1, [r4, r3]
		pdu->chan_sel = prev->chan_sel;
   19dd6:	5ca2      	ldrb	r2, [r4, r2]
   19dd8:	f3c2 1240 	ubfx	r2, r2, #5, #1
   19ddc:	b2c9      	uxtb	r1, r1
   19dde:	f362 1145 	bfi	r1, r2, #5, #1
   19de2:	54e1      	strb	r1, [r4, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   19de4:	4631      	mov	r1, r6
   19de6:	f811 0b02 	ldrb.w	r0, [r1], #2
   19dea:	2200      	movs	r2, #0
   19dec:	09c0      	lsrs	r0, r0, #7
   19dee:	f7ff fdbd 	bl	1996c <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   19df2:	2807      	cmp	r0, #7
   19df4:	d816      	bhi.n	19e24 <rpa_adv_refresh+0xa0>
	ll_rl_pdu_adv_update(idx, pdu);
   19df6:	4641      	mov	r1, r8
   19df8:	f7ff ff50 	bl	19c9c <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
   19dfc:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->payload.adv_ind.data[0], &prev->payload.adv_ind.data[0],
   19dfe:	3a06      	subs	r2, #6
   19e00:	f107 0108 	add.w	r1, r7, #8
   19e04:	f108 0008 	add.w	r0, r8, #8
   19e08:	f7e6 fa5a 	bl	2c0 <memcpy>
	pdu->len = prev->len;
   19e0c:	787b      	ldrb	r3, [r7, #1]
   19e0e:	f888 3001 	strb.w	r3, [r8, #1]
	radio_adv_data->last = last;
   19e12:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   19e16:	e7c1      	b.n	19d9c <rpa_adv_refresh+0x18>
		last = radio_adv_data->last + 1;
   19e18:	3501      	adds	r5, #1
   19e1a:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   19e1c:	2d02      	cmp	r5, #2
   19e1e:	d1cd      	bne.n	19dbc <rpa_adv_refresh+0x38>
			last = 0;
   19e20:	2500      	movs	r5, #0
   19e22:	e7cb      	b.n	19dbc <rpa_adv_refresh+0x38>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   19e24:	4040      	eors	r0, r0
   19e26:	f380 8811 	msr	BASEPRI, r0
   19e2a:	f04f 0004 	mov.w	r0, #4
   19e2e:	df02      	svc	2

00019e30 <ll_rl_rpa_update>:
{
   19e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e34:	b085      	sub	sp, #20
   19e36:	4681      	mov	r9, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   19e38:	f00f fa44 	bl	292c4 <_impl_k_uptime_get>
   19e3c:	4606      	mov	r6, r0
   19e3e:	460f      	mov	r7, r1
	bool all = timeout || (rpa_last_ms == -1) ||
   19e40:	f1b9 0f00 	cmp.w	r9, #0
   19e44:	d115      	bne.n	19e72 <ll_rl_rpa_update+0x42>
   19e46:	4b57      	ldr	r3, [pc, #348]	; (19fa4 <ll_rl_rpa_update+0x174>)
   19e48:	e9d3 0100 	ldrd	r0, r1, [r3]
   19e4c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   19e50:	bf08      	it	eq
   19e52:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   19e56:	d010      	beq.n	19e7a <ll_rl_rpa_update+0x4a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   19e58:	1a30      	subs	r0, r6, r0
   19e5a:	eb67 0101 	sbc.w	r1, r7, r1
   19e5e:	4b52      	ldr	r3, [pc, #328]	; (19fa8 <ll_rl_rpa_update+0x178>)
   19e60:	681a      	ldr	r2, [r3, #0]
   19e62:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   19e64:	4290      	cmp	r0, r2
   19e66:	eb71 0303 	sbcs.w	r3, r1, r3
   19e6a:	db09      	blt.n	19e80 <ll_rl_rpa_update+0x50>
   19e6c:	f04f 0801 	mov.w	r8, #1
   19e70:	e001      	b.n	19e76 <ll_rl_rpa_update+0x46>
   19e72:	f04f 0801 	mov.w	r8, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19e76:	2400      	movs	r4, #0
   19e78:	e02a      	b.n	19ed0 <ll_rl_rpa_update+0xa0>
	bool all = timeout || (rpa_last_ms == -1) ||
   19e7a:	f04f 0801 	mov.w	r8, #1
   19e7e:	e7fa      	b.n	19e76 <ll_rl_rpa_update+0x46>
   19e80:	f04f 0800 	mov.w	r8, #0
   19e84:	e7f7      	b.n	19e76 <ll_rl_rpa_update+0x46>
		*((u8_t *)dst++) = *((u8_t *)src--);
   19e86:	7818      	ldrb	r0, [r3, #0]
   19e88:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   19e8a:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   19e8c:	3b01      	subs	r3, #1
   19e8e:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   19e90:	2a00      	cmp	r2, #0
   19e92:	d1f8      	bne.n	19e86 <ll_rl_rpa_update+0x56>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   19e94:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19e98:	00d3      	lsls	r3, r2, #3
   19e9a:	3318      	adds	r3, #24
   19e9c:	4943      	ldr	r1, [pc, #268]	; (19fac <ll_rl_rpa_update+0x17c>)
   19e9e:	4419      	add	r1, r3
   19ea0:	3106      	adds	r1, #6
   19ea2:	4668      	mov	r0, sp
   19ea4:	f7ea fabe 	bl	4424 <bt_rpa_create>
				LL_ASSERT(!err);
   19ea8:	2800      	cmp	r0, #0
   19eaa:	d13c      	bne.n	19f26 <ll_rl_rpa_update+0xf6>
			if (rl[i].lirk) {
   19eac:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19eb0:	00d3      	lsls	r3, r2, #3
   19eb2:	4a3e      	ldr	r2, [pc, #248]	; (19fac <ll_rl_rpa_update+0x17c>)
   19eb4:	5cd3      	ldrb	r3, [r2, r3]
   19eb6:	f013 0f08 	tst.w	r3, #8
   19eba:	d13a      	bne.n	19f32 <ll_rl_rpa_update+0x102>
			rl[i].rpas_ready = 1;
   19ebc:	493b      	ldr	r1, [pc, #236]	; (19fac <ll_rl_rpa_update+0x17c>)
   19ebe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19ec2:	00eb      	lsls	r3, r5, #3
   19ec4:	5cca      	ldrb	r2, [r1, r3]
   19ec6:	f042 0202 	orr.w	r2, r2, #2
   19eca:	54ca      	strb	r2, [r1, r3]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19ecc:	3401      	adds	r4, #1
   19ece:	b2e4      	uxtb	r4, r4
   19ed0:	2c07      	cmp	r4, #7
   19ed2:	d854      	bhi.n	19f7e <ll_rl_rpa_update+0x14e>
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   19ed4:	4625      	mov	r5, r4
   19ed6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19eda:	00d3      	lsls	r3, r2, #3
   19edc:	4a33      	ldr	r2, [pc, #204]	; (19fac <ll_rl_rpa_update+0x17c>)
   19ede:	5cd3      	ldrb	r3, [r2, r3]
   19ee0:	f013 0f01 	tst.w	r3, #1
   19ee4:	d0f2      	beq.n	19ecc <ll_rl_rpa_update+0x9c>
   19ee6:	f1b8 0f00 	cmp.w	r8, #0
   19eea:	d107      	bne.n	19efc <ll_rl_rpa_update+0xcc>
   19eec:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19ef0:	00d3      	lsls	r3, r2, #3
   19ef2:	4a2e      	ldr	r2, [pc, #184]	; (19fac <ll_rl_rpa_update+0x17c>)
   19ef4:	5cd3      	ldrb	r3, [r2, r3]
   19ef6:	f013 0f02 	tst.w	r3, #2
   19efa:	d1e7      	bne.n	19ecc <ll_rl_rpa_update+0x9c>
			if (rl[i].pirk) {
   19efc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19f00:	00d3      	lsls	r3, r2, #3
   19f02:	4a2a      	ldr	r2, [pc, #168]	; (19fac <ll_rl_rpa_update+0x17c>)
   19f04:	5cd3      	ldrb	r3, [r2, r3]
   19f06:	f013 0f04 	tst.w	r3, #4
   19f0a:	d0cf      	beq.n	19eac <ll_rl_rpa_update+0x7c>
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   19f0c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19f10:	00da      	lsls	r2, r3, #3
   19f12:	4b26      	ldr	r3, [pc, #152]	; (19fac <ll_rl_rpa_update+0x17c>)
   19f14:	4413      	add	r3, r2
   19f16:	7dda      	ldrb	r2, [r3, #23]
   19f18:	4b25      	ldr	r3, [pc, #148]	; (19fb0 <ll_rl_rpa_update+0x180>)
   19f1a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	src += length - 1;
   19f1e:	330f      	adds	r3, #15
   19f20:	2210      	movs	r2, #16
   19f22:	4669      	mov	r1, sp
   19f24:	e7b4      	b.n	19e90 <ll_rl_rpa_update+0x60>
				LL_ASSERT(!err);
   19f26:	4040      	eors	r0, r0
   19f28:	f380 8811 	msr	BASEPRI, r0
   19f2c:	f04f 0004 	mov.w	r0, #4
   19f30:	df02      	svc	2
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   19f32:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19f36:	00d3      	lsls	r3, r2, #3
   19f38:	481c      	ldr	r0, [pc, #112]	; (19fac <ll_rl_rpa_update+0x17c>)
   19f3a:	4418      	add	r0, r3
   19f3c:	4669      	mov	r1, sp
   19f3e:	3007      	adds	r0, #7
   19f40:	f7ea fa70 	bl	4424 <bt_rpa_create>
				LL_ASSERT(!err);
   19f44:	b9a8      	cbnz	r0, 19f72 <ll_rl_rpa_update+0x142>
				rl[i].local_rpa = &rpa;
   19f46:	00ab      	lsls	r3, r5, #2
   19f48:	442b      	add	r3, r5
   19f4a:	00da      	lsls	r2, r3, #3
   19f4c:	4b17      	ldr	r3, [pc, #92]	; (19fac <ll_rl_rpa_update+0x17c>)
   19f4e:	eb03 0a02 	add.w	sl, r3, r2
   19f52:	f8ca d024 	str.w	sp, [sl, #36]	; 0x24
				bt_addr_copy(&local_rpas[i], &rpa);
   19f56:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   19f5a:	ea4f 0b43 	mov.w	fp, r3, lsl #1
   19f5e:	4b15      	ldr	r3, [pc, #84]	; (19fb4 <ll_rl_rpa_update+0x184>)
   19f60:	449b      	add	fp, r3
   19f62:	2206      	movs	r2, #6
   19f64:	4669      	mov	r1, sp
   19f66:	4658      	mov	r0, fp
   19f68:	f7e6 f9aa 	bl	2c0 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   19f6c:	f8ca b024 	str.w	fp, [sl, #36]	; 0x24
   19f70:	e7a4      	b.n	19ebc <ll_rl_rpa_update+0x8c>
				LL_ASSERT(!err);
   19f72:	4040      	eors	r0, r0
   19f74:	f380 8811 	msr	BASEPRI, r0
   19f78:	f04f 0004 	mov.w	r0, #4
   19f7c:	df02      	svc	2
	if (all) {
   19f7e:	f1b8 0f00 	cmp.w	r8, #0
   19f82:	d002      	beq.n	19f8a <ll_rl_rpa_update+0x15a>
		rpa_last_ms = now;
   19f84:	4b07      	ldr	r3, [pc, #28]	; (19fa4 <ll_rl_rpa_update+0x174>)
   19f86:	e9c3 6700 	strd	r6, r7, [r3]
	if (timeout) {
   19f8a:	f1b9 0f00 	cmp.w	r9, #0
   19f8e:	d102      	bne.n	19f96 <ll_rl_rpa_update+0x166>
}
   19f90:	b005      	add	sp, #20
   19f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (radio_adv_is_enabled()) {
   19f96:	f7fd ffc9 	bl	17f2c <radio_adv_is_enabled>
   19f9a:	2800      	cmp	r0, #0
   19f9c:	d0f8      	beq.n	19f90 <ll_rl_rpa_update+0x160>
			rpa_adv_refresh();
   19f9e:	f7ff fef1 	bl	19d84 <rpa_adv_refresh>
}
   19fa2:	e7f5      	b.n	19f90 <ll_rl_rpa_update+0x160>
   19fa4:	20002ab0 	.word	0x20002ab0
   19fa8:	20002c5c 	.word	0x20002c5c
   19fac:	200019d0 	.word	0x200019d0
   19fb0:	20001950 	.word	0x20001950
   19fb4:	20001914 	.word	0x20001914

00019fb8 <rpa_timeout>:
{
   19fb8:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   19fba:	2001      	movs	r0, #1
   19fbc:	f7ff ff38 	bl	19e30 <ll_rl_rpa_update>
   19fc0:	4b03      	ldr	r3, [pc, #12]	; (19fd0 <rpa_timeout+0x18>)
   19fc2:	681a      	ldr	r2, [r3, #0]
   19fc4:	4903      	ldr	r1, [pc, #12]	; (19fd4 <rpa_timeout+0x1c>)
   19fc6:	4804      	ldr	r0, [pc, #16]	; (19fd8 <rpa_timeout+0x20>)
   19fc8:	f00f ff50 	bl	29e6c <k_delayed_work_submit_to_queue>
   19fcc:	bd08      	pop	{r3, pc}
   19fce:	bf00      	nop
   19fd0:	20002c5c 	.word	0x20002c5c
   19fd4:	20002b28 	.word	0x20002b28
   19fd8:	20002c70 	.word	0x20002c70

00019fdc <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   19fdc:	2008      	movs	r0, #8
   19fde:	4770      	bx	lr

00019fe0 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   19fe0:	b508      	push	{r3, lr}
	if (!rl_access_check(false)) {
   19fe2:	2000      	movs	r0, #0
   19fe4:	f7ff fb74 	bl	196d0 <rl_access_check>
   19fe8:	b908      	cbnz	r0, 19fee <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19fea:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   19fec:	bd08      	pop	{r3, pc}
	rl_clear();
   19fee:	f7ff fa7d 	bl	194ec <rl_clear>
	return 0;
   19ff2:	2000      	movs	r0, #0
   19ff4:	bd08      	pop	{r3, pc}
	...

00019ff8 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   19ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19ffc:	b082      	sub	sp, #8
   19ffe:	4605      	mov	r5, r0
   1a000:	460c      	mov	r4, r1
   1a002:	4616      	mov	r6, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   1a004:	2000      	movs	r0, #0
   1a006:	f7ff fb63 	bl	196d0 <rl_access_check>
   1a00a:	b918      	cbnz	r0, 1a014 <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a00c:	200c      	movs	r0, #12
		rl[i].wl = 0;
	}
	rl[i].taken = 1;

	return 0;
}
   1a00e:	b002      	add	sp, #8
   1a010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   1a014:	462f      	mov	r7, r5
   1a016:	f817 0b01 	ldrb.w	r0, [r7], #1
   1a01a:	f10d 0207 	add.w	r2, sp, #7
   1a01e:	4639      	mov	r1, r7
   1a020:	f7ff fca4 	bl	1996c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a024:	2807      	cmp	r0, #7
   1a026:	d801      	bhi.n	1a02c <ll_rl_add+0x34>
		return BT_HCI_ERR_INVALID_PARAM;
   1a028:	2012      	movs	r0, #18
   1a02a:	e7f0      	b.n	1a00e <ll_rl_add+0x16>
	} else if (j >= ARRAY_SIZE(rl)) {
   1a02c:	f89d 8007 	ldrb.w	r8, [sp, #7]
   1a030:	f1b8 0f07 	cmp.w	r8, #7
   1a034:	d901      	bls.n	1a03a <ll_rl_add+0x42>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1a036:	2007      	movs	r0, #7
   1a038:	e7e9      	b.n	1a00e <ll_rl_add+0x16>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1a03a:	f8df a130 	ldr.w	sl, [pc, #304]	; 1a16c <ll_rl_add+0x174>
   1a03e:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1a042:	4443      	add	r3, r8
   1a044:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   1a048:	eb0a 0009 	add.w	r0, sl, r9
   1a04c:	2206      	movs	r2, #6
   1a04e:	4639      	mov	r1, r7
   1a050:	3001      	adds	r0, #1
   1a052:	f7e6 f935 	bl	2c0 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1a056:	782a      	ldrb	r2, [r5, #0]
   1a058:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1a05c:	f362 1386 	bfi	r3, r2, #6, #1
   1a060:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1a064:	2110      	movs	r1, #16
   1a066:	4620      	mov	r0, r4
   1a068:	f7f5 f8f2 	bl	f250 <mem_nz>
   1a06c:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1a070:	f360 0382 	bfi	r3, r0, #2, #1
   1a074:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1a078:	2110      	movs	r1, #16
   1a07a:	4630      	mov	r0, r6
   1a07c:	f7f5 f8e8 	bl	f250 <mem_nz>
   1a080:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1a084:	f360 03c3 	bfi	r3, r0, #3, #1
   1a088:	f80a 3009 	strb.w	r3, [sl, r9]
	if (rl[i].pirk) {
   1a08c:	f013 0f04 	tst.w	r3, #4
   1a090:	d016      	beq.n	1a0c0 <ll_rl_add+0xc8>
		rl[i].pirk_idx = peer_irk_count;
   1a092:	4933      	ldr	r1, [pc, #204]	; (1a160 <ll_rl_add+0x168>)
   1a094:	780a      	ldrb	r2, [r1, #0]
   1a096:	4653      	mov	r3, sl
   1a098:	444b      	add	r3, r9
   1a09a:	75da      	strb	r2, [r3, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   1a09c:	4b31      	ldr	r3, [pc, #196]	; (1a164 <ll_rl_add+0x16c>)
   1a09e:	f803 8002 	strb.w	r8, [r3, r2]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   1a0a2:	1c53      	adds	r3, r2, #1
   1a0a4:	700b      	strb	r3, [r1, #0]
   1a0a6:	340f      	adds	r4, #15
   1a0a8:	4b2f      	ldr	r3, [pc, #188]	; (1a168 <ll_rl_add+0x170>)
   1a0aa:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1a0ae:	2210      	movs	r2, #16
   1a0b0:	e004      	b.n	1a0bc <ll_rl_add+0xc4>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1a0b2:	7821      	ldrb	r1, [r4, #0]
   1a0b4:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   1a0b6:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1a0b8:	3c01      	subs	r4, #1
   1a0ba:	3301      	adds	r3, #1
	for (; length > 0; length--) {
   1a0bc:	2a00      	cmp	r2, #0
   1a0be:	d1f8      	bne.n	1a0b2 <ll_rl_add+0xba>
	if (rl[i].lirk) {
   1a0c0:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   1a0c4:	00d3      	lsls	r3, r2, #3
   1a0c6:	4a29      	ldr	r2, [pc, #164]	; (1a16c <ll_rl_add+0x174>)
   1a0c8:	5cd3      	ldrb	r3, [r2, r3]
   1a0ca:	f013 0f08 	tst.w	r3, #8
   1a0ce:	d12f      	bne.n	1a130 <ll_rl_add+0x138>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1a0d0:	4e26      	ldr	r6, [pc, #152]	; (1a16c <ll_rl_add+0x174>)
   1a0d2:	ea4f 0488 	mov.w	r4, r8, lsl #2
   1a0d6:	eb04 0208 	add.w	r2, r4, r8
   1a0da:	00d3      	lsls	r3, r2, #3
   1a0dc:	3318      	adds	r3, #24
   1a0de:	2206      	movs	r2, #6
   1a0e0:	2100      	movs	r1, #0
   1a0e2:	18f0      	adds	r0, r6, r3
   1a0e4:	f010 f84c 	bl	2a180 <memset>
	rl[i].rpas_ready = 0;
   1a0e8:	4444      	add	r4, r8
   1a0ea:	00e2      	lsls	r2, r4, #3
   1a0ec:	5cb3      	ldrb	r3, [r6, r2]
	rl[i].dev = 0;
   1a0ee:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1a0f2:	f36f 1304 	bfc	r3, #4, #1
   1a0f6:	54b3      	strb	r3, [r6, r2]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1a0f8:	2200      	movs	r2, #0
   1a0fa:	4639      	mov	r1, r7
   1a0fc:	7828      	ldrb	r0, [r5, #0]
   1a0fe:	f7ff fa0b 	bl	19518 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   1a102:	2807      	cmp	r0, #7
   1a104:	d822      	bhi.n	1a14c <ll_rl_add+0x154>
		wl[j].rl_idx = i;
   1a106:	4b1a      	ldr	r3, [pc, #104]	; (1a170 <ll_rl_add+0x178>)
   1a108:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1a10c:	f880 8001 	strb.w	r8, [r0, #1]
		rl[i].wl = 1;
   1a110:	00e3      	lsls	r3, r4, #3
   1a112:	5cf2      	ldrb	r2, [r6, r3]
   1a114:	f042 0220 	orr.w	r2, r2, #32
   1a118:	54f2      	strb	r2, [r6, r3]
	rl[i].taken = 1;
   1a11a:	4914      	ldr	r1, [pc, #80]	; (1a16c <ll_rl_add+0x174>)
   1a11c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1a120:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   1a124:	5cca      	ldrb	r2, [r1, r3]
   1a126:	f042 0201 	orr.w	r2, r2, #1
   1a12a:	54ca      	strb	r2, [r1, r3]
	return 0;
   1a12c:	2000      	movs	r0, #0
   1a12e:	e76e      	b.n	1a00e <ll_rl_add+0x16>
		memcpy(rl[i].local_irk, lirk, 16);
   1a130:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1a134:	4443      	add	r3, r8
   1a136:	00da      	lsls	r2, r3, #3
   1a138:	4c0c      	ldr	r4, [pc, #48]	; (1a16c <ll_rl_add+0x174>)
   1a13a:	4414      	add	r4, r2
   1a13c:	2210      	movs	r2, #16
   1a13e:	4631      	mov	r1, r6
   1a140:	1de0      	adds	r0, r4, #7
   1a142:	f7e6 f8bd 	bl	2c0 <memcpy>
		rl[i].local_rpa = NULL;
   1a146:	2300      	movs	r3, #0
   1a148:	6263      	str	r3, [r4, #36]	; 0x24
   1a14a:	e7c1      	b.n	1a0d0 <ll_rl_add+0xd8>
		rl[i].wl = 0;
   1a14c:	4a07      	ldr	r2, [pc, #28]	; (1a16c <ll_rl_add+0x174>)
   1a14e:	eb08 0188 	add.w	r1, r8, r8, lsl #2
   1a152:	00cb      	lsls	r3, r1, #3
   1a154:	5cd1      	ldrb	r1, [r2, r3]
   1a156:	f36f 1145 	bfc	r1, #5, #1
   1a15a:	54d1      	strb	r1, [r2, r3]
   1a15c:	e7dd      	b.n	1a11a <ll_rl_add+0x122>
   1a15e:	bf00      	nop
   1a160:	20001944 	.word	0x20001944
   1a164:	20001948 	.word	0x20001948
   1a168:	20001950 	.word	0x20001950
   1a16c:	200019d0 	.word	0x200019d0
   1a170:	20001b48 	.word	0x20001b48

0001a174 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   1a174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a178:	4604      	mov	r4, r0
	u8_t i;

	if (!rl_access_check(false)) {
   1a17a:	2000      	movs	r0, #0
   1a17c:	f7ff faa8 	bl	196d0 <rl_access_check>
   1a180:	b910      	cbnz	r0, 1a188 <ll_rl_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a182:	200c      	movs	r0, #12
   1a184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a188:	4626      	mov	r6, r4
   1a18a:	f816 0b01 	ldrb.w	r0, [r6], #1
   1a18e:	2200      	movs	r2, #0
   1a190:	4631      	mov	r1, r6
   1a192:	f7ff fbeb 	bl	1996c <ll_rl_find>
   1a196:	4605      	mov	r5, r0
	if (i < ARRAY_SIZE(rl)) {
   1a198:	2807      	cmp	r0, #7
   1a19a:	d902      	bls.n	1a1a2 <ll_rl_remove+0x2e>
		}
		rl[i].taken = 0;
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a19c:	2002      	movs	r0, #2
}
   1a19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rl[i].pirk) {
   1a1a2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1a1a6:	00d3      	lsls	r3, r2, #3
   1a1a8:	4a2d      	ldr	r2, [pc, #180]	; (1a260 <ll_rl_remove+0xec>)
   1a1aa:	5cd3      	ldrb	r3, [r2, r3]
   1a1ac:	f013 0f04 	tst.w	r3, #4
   1a1b0:	d03e      	beq.n	1a230 <ll_rl_remove+0xbc>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1a1b2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1a1b6:	00da      	lsls	r2, r3, #3
   1a1b8:	4b29      	ldr	r3, [pc, #164]	; (1a260 <ll_rl_remove+0xec>)
   1a1ba:	4413      	add	r3, r2
   1a1bc:	7ddf      	ldrb	r7, [r3, #23]
   1a1be:	4b29      	ldr	r3, [pc, #164]	; (1a264 <ll_rl_remove+0xf0>)
   1a1c0:	781b      	ldrb	r3, [r3, #0]
   1a1c2:	3b01      	subs	r3, #1
			if (pj && pi != pj) {
   1a1c4:	f013 08ff 	ands.w	r8, r3, #255	; 0xff
   1a1c8:	d02e      	beq.n	1a228 <ll_rl_remove+0xb4>
   1a1ca:	4547      	cmp	r7, r8
   1a1cc:	d02c      	beq.n	1a228 <ll_rl_remove+0xb4>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   1a1ce:	4826      	ldr	r0, [pc, #152]	; (1a268 <ll_rl_remove+0xf4>)
   1a1d0:	2210      	movs	r2, #16
   1a1d2:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   1a1d6:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   1a1da:	f7e6 f871 	bl	2c0 <memcpy>
				for (k = 0;
   1a1de:	2300      	movs	r3, #0
   1a1e0:	e001      	b.n	1a1e6 <ll_rl_remove+0x72>
				     k++) {
   1a1e2:	3301      	adds	r3, #1
   1a1e4:	b2db      	uxtb	r3, r3
				for (k = 0;
   1a1e6:	2b07      	cmp	r3, #7
   1a1e8:	d81e      	bhi.n	1a228 <ll_rl_remove+0xb4>
					if (rl[k].taken && rl[k].pirk &&
   1a1ea:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a1ee:	00ca      	lsls	r2, r1, #3
   1a1f0:	491b      	ldr	r1, [pc, #108]	; (1a260 <ll_rl_remove+0xec>)
   1a1f2:	5c8a      	ldrb	r2, [r1, r2]
   1a1f4:	f012 0f01 	tst.w	r2, #1
   1a1f8:	d0f3      	beq.n	1a1e2 <ll_rl_remove+0x6e>
   1a1fa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a1fe:	00ca      	lsls	r2, r1, #3
   1a200:	4917      	ldr	r1, [pc, #92]	; (1a260 <ll_rl_remove+0xec>)
   1a202:	5c8a      	ldrb	r2, [r1, r2]
   1a204:	f012 0f04 	tst.w	r2, #4
   1a208:	d0eb      	beq.n	1a1e2 <ll_rl_remove+0x6e>
					    rl[k].pirk_idx == pj) {
   1a20a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a20e:	00d1      	lsls	r1, r2, #3
   1a210:	4a13      	ldr	r2, [pc, #76]	; (1a260 <ll_rl_remove+0xec>)
   1a212:	440a      	add	r2, r1
   1a214:	7dd2      	ldrb	r2, [r2, #23]
					if (rl[k].taken && rl[k].pirk &&
   1a216:	4590      	cmp	r8, r2
   1a218:	d1e3      	bne.n	1a1e2 <ll_rl_remove+0x6e>
						rl[k].pirk_idx = pi;
   1a21a:	2128      	movs	r1, #40	; 0x28
   1a21c:	4a10      	ldr	r2, [pc, #64]	; (1a260 <ll_rl_remove+0xec>)
   1a21e:	fb01 2003 	mla	r0, r1, r3, r2
   1a222:	75c7      	strb	r7, [r0, #23]
						peer_irk_rl_ids[pi] = k;
   1a224:	4a11      	ldr	r2, [pc, #68]	; (1a26c <ll_rl_remove+0xf8>)
   1a226:	55d3      	strb	r3, [r2, r7]
			peer_irk_count--;
   1a228:	4a0e      	ldr	r2, [pc, #56]	; (1a264 <ll_rl_remove+0xf0>)
   1a22a:	7813      	ldrb	r3, [r2, #0]
   1a22c:	3b01      	subs	r3, #1
   1a22e:	7013      	strb	r3, [r2, #0]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1a230:	2200      	movs	r2, #0
   1a232:	4631      	mov	r1, r6
   1a234:	7820      	ldrb	r0, [r4, #0]
   1a236:	f7ff f96f 	bl	19518 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   1a23a:	2807      	cmp	r0, #7
   1a23c:	d804      	bhi.n	1a248 <ll_rl_remove+0xd4>
			wl[j].rl_idx = FILTER_IDX_NONE;
   1a23e:	4b0c      	ldr	r3, [pc, #48]	; (1a270 <ll_rl_remove+0xfc>)
   1a240:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1a244:	23ff      	movs	r3, #255	; 0xff
   1a246:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0;
   1a248:	4a05      	ldr	r2, [pc, #20]	; (1a260 <ll_rl_remove+0xec>)
   1a24a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1a24e:	00eb      	lsls	r3, r5, #3
   1a250:	5cd1      	ldrb	r1, [r2, r3]
   1a252:	f36f 0100 	bfc	r1, #0, #1
   1a256:	54d1      	strb	r1, [r2, r3]
		return 0;
   1a258:	2000      	movs	r0, #0
   1a25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a25e:	bf00      	nop
   1a260:	200019d0 	.word	0x200019d0
   1a264:	20001944 	.word	0x20001944
   1a268:	20001950 	.word	0x20001950
   1a26c:	20001948 	.word	0x20001948
   1a270:	20001b48 	.word	0x20001b48

0001a274 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   1a274:	b510      	push	{r4, lr}
   1a276:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   1a278:	795b      	ldrb	r3, [r3, #5]
   1a27a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a27e:	2b40      	cmp	r3, #64	; 0x40
   1a280:	d000      	beq.n	1a284 <ll_rl_crpa_set+0x10>
   1a282:	bd10      	pop	{r4, pc}

		if (id_addr) {
   1a284:	b119      	cbz	r1, 1a28e <ll_rl_crpa_set+0x1a>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   1a286:	2200      	movs	r2, #0
   1a288:	f7ff fb70 	bl	1996c <ll_rl_find>
   1a28c:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1a28e:	2a07      	cmp	r2, #7
   1a290:	d8f7      	bhi.n	1a282 <ll_rl_crpa_set+0xe>
   1a292:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1a296:	00cb      	lsls	r3, r1, #3
   1a298:	4907      	ldr	r1, [pc, #28]	; (1a2b8 <ll_rl_crpa_set+0x44>)
   1a29a:	5ccb      	ldrb	r3, [r1, r3]
   1a29c:	f013 0f01 	tst.w	r3, #1
   1a2a0:	d0ef      	beq.n	1a282 <ll_rl_crpa_set+0xe>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1a2a2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1a2a6:	00d0      	lsls	r0, r2, #3
   1a2a8:	3018      	adds	r0, #24
   1a2aa:	2206      	movs	r2, #6
   1a2ac:	4621      	mov	r1, r4
   1a2ae:	4b02      	ldr	r3, [pc, #8]	; (1a2b8 <ll_rl_crpa_set+0x44>)
   1a2b0:	4418      	add	r0, r3
   1a2b2:	f7e6 f805 	bl	2c0 <memcpy>
				       sizeof(bt_addr_t));
		}
	}
}
   1a2b6:	e7e4      	b.n	1a282 <ll_rl_crpa_set+0xe>
   1a2b8:	200019d0 	.word	0x200019d0

0001a2bc <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   1a2bc:	b538      	push	{r3, r4, r5, lr}
   1a2be:	460d      	mov	r5, r1
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a2c0:	4601      	mov	r1, r0
   1a2c2:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a2c6:	2200      	movs	r2, #0
   1a2c8:	f7ff fb50 	bl	1996c <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1a2cc:	2807      	cmp	r0, #7
   1a2ce:	d901      	bls.n	1a2d4 <ll_rl_crpa_get+0x18>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a2d0:	2002      	movs	r0, #2
   1a2d2:	bd38      	pop	{r3, r4, r5, pc}
   1a2d4:	4604      	mov	r4, r0
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1a2d6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1a2da:	00d8      	lsls	r0, r3, #3
   1a2dc:	3018      	adds	r0, #24
   1a2de:	2106      	movs	r1, #6
   1a2e0:	4b09      	ldr	r3, [pc, #36]	; (1a308 <ll_rl_crpa_get+0x4c>)
   1a2e2:	4418      	add	r0, r3
   1a2e4:	f7f4 ffb4 	bl	f250 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1a2e8:	b908      	cbnz	r0, 1a2ee <ll_rl_crpa_get+0x32>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a2ea:	2002      	movs	r0, #2
}
   1a2ec:	bd38      	pop	{r3, r4, r5, pc}
			bt_addr_copy(crpa, &rl[i].curr_rpa);
   1a2ee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1a2f2:	00e1      	lsls	r1, r4, #3
   1a2f4:	3118      	adds	r1, #24
   1a2f6:	2206      	movs	r2, #6
   1a2f8:	4b03      	ldr	r3, [pc, #12]	; (1a308 <ll_rl_crpa_get+0x4c>)
   1a2fa:	4419      	add	r1, r3
   1a2fc:	4628      	mov	r0, r5
   1a2fe:	f7e5 ffdf 	bl	2c0 <memcpy>
			return 0;
   1a302:	2000      	movs	r0, #0
   1a304:	bd38      	pop	{r3, r4, r5, pc}
   1a306:	bf00      	nop
   1a308:	200019d0 	.word	0x200019d0

0001a30c <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   1a30c:	b510      	push	{r4, lr}
   1a30e:	460c      	mov	r4, r1
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a310:	4601      	mov	r1, r0
   1a312:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a316:	2200      	movs	r2, #0
   1a318:	f7ff fb28 	bl	1996c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a31c:	2807      	cmp	r0, #7
   1a31e:	d901      	bls.n	1a324 <ll_rl_lrpa_get+0x18>
		bt_addr_copy(lrpa, rl[i].local_rpa);
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a320:	2002      	movs	r0, #2
}
   1a322:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   1a324:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a328:	00c2      	lsls	r2, r0, #3
   1a32a:	4b04      	ldr	r3, [pc, #16]	; (1a33c <ll_rl_lrpa_get+0x30>)
   1a32c:	4413      	add	r3, r2
   1a32e:	2206      	movs	r2, #6
   1a330:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1a332:	4620      	mov	r0, r4
   1a334:	f7e5 ffc4 	bl	2c0 <memcpy>
		return 0;
   1a338:	2000      	movs	r0, #0
   1a33a:	bd10      	pop	{r4, pc}
   1a33c:	200019d0 	.word	0x200019d0

0001a340 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   1a340:	b510      	push	{r4, lr}
   1a342:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   1a344:	2000      	movs	r0, #0
   1a346:	f7ff f9c3 	bl	196d0 <rl_access_check>
   1a34a:	b908      	cbnz	r0, 1a350 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a34c:	200c      	movs	r0, #12
   1a34e:	bd10      	pop	{r4, pc}
	}

	switch (enable) {
   1a350:	b11c      	cbz	r4, 1a35a <ll_rl_enable+0x1a>
   1a352:	2c01      	cmp	r4, #1
   1a354:	d005      	beq.n	1a362 <ll_rl_enable+0x22>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   1a356:	2012      	movs	r0, #18
	}

	return 0;
}
   1a358:	bd10      	pop	{r4, pc}
		rl_enable = 0;
   1a35a:	2000      	movs	r0, #0
   1a35c:	4b03      	ldr	r3, [pc, #12]	; (1a36c <ll_rl_enable+0x2c>)
   1a35e:	7018      	strb	r0, [r3, #0]
		break;
   1a360:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   1a362:	2201      	movs	r2, #1
   1a364:	4b01      	ldr	r3, [pc, #4]	; (1a36c <ll_rl_enable+0x2c>)
   1a366:	701a      	strb	r2, [r3, #0]
	return 0;
   1a368:	2000      	movs	r0, #0
		break;
   1a36a:	bd10      	pop	{r4, pc}
   1a36c:	20001b10 	.word	0x20001b10

0001a370 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   1a370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a374:	fb03 f000 	mul.w	r0, r3, r0
   1a378:	4b01      	ldr	r3, [pc, #4]	; (1a380 <ll_rl_timeout_set+0x10>)
   1a37a:	6018      	str	r0, [r3, #0]
   1a37c:	4770      	bx	lr
   1a37e:	bf00      	nop
   1a380:	20002c5c 	.word	0x20002c5c

0001a384 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   1a384:	b538      	push	{r3, r4, r5, lr}
   1a386:	4604      	mov	r4, r0
   1a388:	460d      	mov	r5, r1
	u8_t i;

	if (!rl_access_check(false)) {
   1a38a:	2000      	movs	r0, #0
   1a38c:	f7ff f9a0 	bl	196d0 <rl_access_check>
   1a390:	b908      	cbnz	r0, 1a396 <ll_priv_mode_set+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a392:	200c      	movs	r0, #12
   1a394:	bd38      	pop	{r3, r4, r5, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a396:	4621      	mov	r1, r4
   1a398:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a39c:	2200      	movs	r2, #0
   1a39e:	f7ff fae5 	bl	1996c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a3a2:	2807      	cmp	r0, #7
   1a3a4:	d901      	bls.n	1a3aa <ll_priv_mode_set+0x26>
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
		}
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a3a6:	2002      	movs	r0, #2
   1a3a8:	bd38      	pop	{r3, r4, r5, pc}
		switch (mode) {
   1a3aa:	b11d      	cbz	r5, 1a3b4 <ll_priv_mode_set+0x30>
   1a3ac:	2d01      	cmp	r5, #1
   1a3ae:	d00b      	beq.n	1a3c8 <ll_priv_mode_set+0x44>
			return BT_HCI_ERR_INVALID_PARAM;
   1a3b0:	2012      	movs	r0, #18
	}

	return 0;
}
   1a3b2:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   1a3b4:	4a09      	ldr	r2, [pc, #36]	; (1a3dc <ll_priv_mode_set+0x58>)
   1a3b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a3ba:	00c3      	lsls	r3, r0, #3
   1a3bc:	5cd1      	ldrb	r1, [r2, r3]
   1a3be:	f36f 1104 	bfc	r1, #4, #1
   1a3c2:	54d1      	strb	r1, [r2, r3]
	return 0;
   1a3c4:	2000      	movs	r0, #0
			break;
   1a3c6:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   1a3c8:	4904      	ldr	r1, [pc, #16]	; (1a3dc <ll_priv_mode_set+0x58>)
   1a3ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a3ce:	00c3      	lsls	r3, r0, #3
   1a3d0:	5cca      	ldrb	r2, [r1, r3]
   1a3d2:	f042 0210 	orr.w	r2, r2, #16
   1a3d6:	54ca      	strb	r2, [r1, r3]
	return 0;
   1a3d8:	2000      	movs	r0, #0
			break;
   1a3da:	bd38      	pop	{r3, r4, r5, pc}
   1a3dc:	200019d0 	.word	0x200019d0

0001a3e0 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
   1a3e0:	b538      	push	{r3, r4, r5, lr}
   1a3e2:	4605      	mov	r5, r0
	wl_anon = 0;
   1a3e4:	2400      	movs	r4, #0
   1a3e6:	4b0e      	ldr	r3, [pc, #56]	; (1a420 <ll_filter_reset+0x40>)
   1a3e8:	701c      	strb	r4, [r3, #0]

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();
   1a3ea:	f7ff f86b 	bl	194c4 <wl_clear>

	rl_enable = 0;
   1a3ee:	4b0d      	ldr	r3, [pc, #52]	; (1a424 <ll_filter_reset+0x44>)
   1a3f0:	701c      	strb	r4, [r3, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1a3f2:	4a0d      	ldr	r2, [pc, #52]	; (1a428 <ll_filter_reset+0x48>)
   1a3f4:	4b0d      	ldr	r3, [pc, #52]	; (1a42c <ll_filter_reset+0x4c>)
   1a3f6:	601a      	str	r2, [r3, #0]
	rpa_last_ms = -1;
   1a3f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a3fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a400:	4b0b      	ldr	r3, [pc, #44]	; (1a430 <ll_filter_reset+0x50>)
   1a402:	e9c3 0100 	strd	r0, r1, [r3]
	rl_clear();
   1a406:	f7ff f871 	bl	194ec <rl_clear>
	if (init) {
   1a40a:	b91d      	cbnz	r5, 1a414 <ll_filter_reset+0x34>
		k_delayed_work_init(&rpa_work, rpa_timeout);
	} else {
		k_delayed_work_cancel(&rpa_work);
   1a40c:	4809      	ldr	r0, [pc, #36]	; (1a434 <ll_filter_reset+0x54>)
   1a40e:	f00f fcd3 	bl	29db8 <k_delayed_work_cancel>
   1a412:	bd38      	pop	{r3, r4, r5, pc}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1a414:	4908      	ldr	r1, [pc, #32]	; (1a438 <ll_filter_reset+0x58>)
   1a416:	4807      	ldr	r0, [pc, #28]	; (1a434 <ll_filter_reset+0x54>)
   1a418:	f00f fcb0 	bl	29d7c <k_delayed_work_init>
   1a41c:	bd38      	pop	{r3, r4, r5, pc}
   1a41e:	bf00      	nop
   1a420:	20002ab8 	.word	0x20002ab8
   1a424:	20001b10 	.word	0x20001b10
   1a428:	000dbba0 	.word	0x000dbba0
   1a42c:	20002c5c 	.word	0x20002c5c
   1a430:	20002ab0 	.word	0x20002ab0
   1a434:	20002b28 	.word	0x20002b28
   1a438:	00019fb9 	.word	0x00019fb9

0001a43c <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   1a43c:	4800      	ldr	r0, [pc, #0]	; (1a440 <ll_adv_set_get+0x4>)
   1a43e:	4770      	bx	lr
   1a440:	20001bbc 	.word	0x20001bbc

0001a444 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   1a444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a448:	b087      	sub	sp, #28
   1a44a:	4689      	mov	r9, r1
   1a44c:	4614      	mov	r4, r2
   1a44e:	461e      	mov	r6, r3
   1a450:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   1a454:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   1a458:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1a45c:	4b89      	ldr	r3, [pc, #548]	; (1a684 <ll_adv_params_set+0x240>)
   1a45e:	e893 0003 	ldmia.w	r3, {r0, r1}
   1a462:	9004      	str	r0, [sp, #16]
   1a464:	f8ad 1014 	strh.w	r1, [sp, #20]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
   1a468:	f7fd fd60 	bl	17f2c <radio_adv_is_enabled>
   1a46c:	9001      	str	r0, [sp, #4]
   1a46e:	b128      	cbz	r0, 1a47c <ll_adv_params_set+0x38>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a470:	230c      	movs	r3, #12
   1a472:	9301      	str	r3, [sp, #4]
	if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
	}

	return 0;
}
   1a474:	9801      	ldr	r0, [sp, #4]
   1a476:	b007      	add	sp, #28
   1a478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ll_adv.phy_p = BIT(0);
   1a47c:	4b82      	ldr	r3, [pc, #520]	; (1a688 <ll_adv_params_set+0x244>)
   1a47e:	7a1a      	ldrb	r2, [r3, #8]
   1a480:	2101      	movs	r1, #1
   1a482:	f361 0202 	bfi	r2, r1, #0, #3
   1a486:	721a      	strb	r2, [r3, #8]
	if (adv_type > 0x04) {
   1a488:	2e04      	cmp	r6, #4
   1a48a:	d90f      	bls.n	1a4ac <ll_adv_params_set+0x68>
		if (evt_prop & BIT(4)) {
   1a48c:	f019 0f10 	tst.w	r9, #16
   1a490:	d071      	beq.n	1a576 <ll_adv_params_set+0x132>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   1a492:	4b7c      	ldr	r3, [pc, #496]	; (1a684 <ll_adv_params_set+0x240>)
   1a494:	689b      	ldr	r3, [r3, #8]
   1a496:	9303      	str	r3, [sp, #12]
			adv_type = leg_adv_type[evt_prop & 0x03];
   1a498:	f009 0303 	and.w	r3, r9, #3
   1a49c:	aa06      	add	r2, sp, #24
   1a49e:	4413      	add	r3, r2
   1a4a0:	f813 6c0c 	ldrb.w	r6, [r3, #-12]
			if (evt_prop & BIT(3)) {
   1a4a4:	f019 0f08 	tst.w	r9, #8
   1a4a8:	d000      	beq.n	1a4ac <ll_adv_params_set+0x68>
				adv_type = 0x01;
   1a4aa:	460e      	mov	r6, r1
	if (adv_type != 0x01) {
   1a4ac:	2e01      	cmp	r6, #1
   1a4ae:	d071      	beq.n	1a594 <ll_adv_params_set+0x150>
		ll_adv.interval = interval;
   1a4b0:	4b75      	ldr	r3, [pc, #468]	; (1a688 <ll_adv_params_set+0x244>)
   1a4b2:	60dc      	str	r4, [r3, #12]
	ll_adv.chan_map = chan_map;
   1a4b4:	4a74      	ldr	r2, [pc, #464]	; (1a688 <ll_adv_params_set+0x244>)
   1a4b6:	7813      	ldrb	r3, [r2, #0]
   1a4b8:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
   1a4bc:	f361 0302 	bfi	r3, r1, #0, #3
	ll_adv.filter_policy = filter_policy;
   1a4c0:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
   1a4c4:	f361 03c4 	bfi	r3, r1, #3, #2
   1a4c8:	7013      	strb	r3, [r2, #0]
	radio_adv_data = radio_adv_data_get();
   1a4ca:	f7fd fd27 	bl	17f1c <radio_adv_data_get>
   1a4ce:	4607      	mov	r7, r0
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1a4d0:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
   1a4d4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a4d8:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
   1a4dc:	eb00 0a04 	add.w	sl, r0, r4
	pdu->type = pdu_adv_type[adv_type];
   1a4e0:	ab06      	add	r3, sp, #24
   1a4e2:	441e      	add	r6, r3
   1a4e4:	f816 2c08 	ldrb.w	r2, [r6, #-8]
   1a4e8:	5d03      	ldrb	r3, [r0, r4]
   1a4ea:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0;
   1a4ee:	f36f 1304 	bfc	r3, #4, #1
   1a4f2:	5503      	strb	r3, [r0, r4]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   1a4f4:	f003 030f 	and.w	r3, r3, #15
   1a4f8:	2b01      	cmp	r3, #1
   1a4fa:	d94f      	bls.n	1a59c <ll_adv_params_set+0x158>
		pdu->chan_sel = 0;
   1a4fc:	5d03      	ldrb	r3, [r0, r4]
   1a4fe:	f36f 1345 	bfc	r3, #5, #1
   1a502:	5503      	strb	r3, [r0, r4]
	ll_adv.own_addr_type = own_addr_type;
   1a504:	4a60      	ldr	r2, [pc, #384]	; (1a688 <ll_adv_params_set+0x244>)
   1a506:	7813      	ldrb	r3, [r2, #0]
   1a508:	f368 1346 	bfi	r3, r8, #5, #2
   1a50c:	7013      	strb	r3, [r2, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1a50e:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1a512:	2b40      	cmp	r3, #64	; 0x40
   1a514:	d047      	beq.n	1a5a6 <ll_adv_params_set+0x162>
   1a516:	2b60      	cmp	r3, #96	; 0x60
   1a518:	d045      	beq.n	1a5a6 <ll_adv_params_set+0x162>
	pdu->tx_addr = own_addr_type & 0x1;
   1a51a:	f008 0801 	and.w	r8, r8, #1
   1a51e:	5d3b      	ldrb	r3, [r7, r4]
   1a520:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   1a524:	f36f 13c7 	bfc	r3, #7, #1
   1a528:	553b      	strb	r3, [r7, r4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1a52a:	f003 030f 	and.w	r3, r3, #15
   1a52e:	2b01      	cmp	r3, #1
   1a530:	d044      	beq.n	1a5bc <ll_adv_params_set+0x178>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   1a532:	2b07      	cmp	r3, #7
   1a534:	d050      	beq.n	1a5d8 <ll_adv_params_set+0x194>
	} else if (pdu->len == 0) {
   1a536:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1a53a:	b913      	cbnz	r3, 1a542 <ll_adv_params_set+0xfe>
		pdu->len = BDADDR_SIZE;
   1a53c:	2306      	movs	r3, #6
   1a53e:	f88a 3001 	strb.w	r3, [sl, #1]
	radio_adv_data = radio_scan_data_get();
   1a542:	f7fd fcef 	bl	17f24 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1a546:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
   1a54a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   1a54e:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
   1a552:	1881      	adds	r1, r0, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1a554:	5c83      	ldrb	r3, [r0, r2]
   1a556:	2404      	movs	r4, #4
   1a558:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->tx_addr = own_addr_type & 0x1;
   1a55c:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   1a560:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   1a564:	f36f 13c7 	bfc	r3, #7, #1
   1a568:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   1a56a:	784b      	ldrb	r3, [r1, #1]
   1a56c:	2b00      	cmp	r3, #0
   1a56e:	d181      	bne.n	1a474 <ll_adv_params_set+0x30>
		pdu->len = BDADDR_SIZE;
   1a570:	2306      	movs	r3, #6
   1a572:	704b      	strb	r3, [r1, #1]
   1a574:	e77e      	b.n	1a474 <ll_adv_params_set+0x30>
			if (((evt_prop & 0x03) == 0x03) ||
   1a576:	f009 0303 	and.w	r3, r9, #3
   1a57a:	2b03      	cmp	r3, #3
   1a57c:	d07c      	beq.n	1a678 <ll_adv_params_set+0x234>
   1a57e:	f009 030c 	and.w	r3, r9, #12
   1a582:	2b0c      	cmp	r3, #12
   1a584:	d07b      	beq.n	1a67e <ll_adv_params_set+0x23a>
			ll_adv.phy_p = phy_p;
   1a586:	4b40      	ldr	r3, [pc, #256]	; (1a688 <ll_adv_params_set+0x244>)
   1a588:	7a1a      	ldrb	r2, [r3, #8]
   1a58a:	f365 0202 	bfi	r2, r5, #0, #3
   1a58e:	721a      	strb	r2, [r3, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   1a590:	2605      	movs	r6, #5
   1a592:	e78b      	b.n	1a4ac <ll_adv_params_set+0x68>
		ll_adv.interval = 0;
   1a594:	2200      	movs	r2, #0
   1a596:	4b3c      	ldr	r3, [pc, #240]	; (1a688 <ll_adv_params_set+0x244>)
   1a598:	60da      	str	r2, [r3, #12]
   1a59a:	e78b      	b.n	1a4b4 <ll_adv_params_set+0x70>
		pdu->chan_sel = 1;
   1a59c:	5d03      	ldrb	r3, [r0, r4]
   1a59e:	f043 0320 	orr.w	r3, r3, #32
   1a5a2:	5503      	strb	r3, [r0, r4]
   1a5a4:	e7ae      	b.n	1a504 <ll_adv_params_set+0xc0>
		ll_adv.id_addr_type = direct_addr_type;
   1a5a6:	4838      	ldr	r0, [pc, #224]	; (1a688 <ll_adv_params_set+0x244>)
   1a5a8:	7803      	ldrb	r3, [r0, #0]
   1a5aa:	f36b 13c7 	bfi	r3, fp, #7, #1
   1a5ae:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   1a5b2:	2206      	movs	r2, #6
   1a5b4:	9912      	ldr	r1, [sp, #72]	; 0x48
   1a5b6:	f7e5 fe83 	bl	2c0 <memcpy>
   1a5ba:	e7ae      	b.n	1a51a <ll_adv_params_set+0xd6>
		pdu->rx_addr = direct_addr_type;
   1a5bc:	5d3b      	ldrb	r3, [r7, r4]
   1a5be:	f36b 13c7 	bfi	r3, fp, #7, #1
   1a5c2:	553b      	strb	r3, [r7, r4]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   1a5c4:	2206      	movs	r2, #6
   1a5c6:	9912      	ldr	r1, [sp, #72]	; 0x48
   1a5c8:	f10a 0008 	add.w	r0, sl, #8
   1a5cc:	f7e5 fe78 	bl	2c0 <memcpy>
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
   1a5d0:	230c      	movs	r3, #12
   1a5d2:	f88a 3001 	strb.w	r3, [sl, #1]
   1a5d6:	e7b4      	b.n	1a542 <ll_adv_params_set+0xfe>
		p = (void *)&pdu->payload.adv_ext_ind;
   1a5d8:	f10a 0302 	add.w	r3, sl, #2
		ptr = (u8_t *)h + sizeof(*h);
   1a5dc:	f10a 0104 	add.w	r1, sl, #4
		p->ext_hdr_len = 0;
   1a5e0:	f89a 2002 	ldrb.w	r2, [sl, #2]
		p->adv_mode = evt_prop & 0x03;
   1a5e4:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1a5e8:	f369 1287 	bfi	r2, r9, #6, #2
   1a5ec:	f88a 2002 	strb.w	r2, [sl, #2]
		*(u8_t *)h = 0;
   1a5f0:	2200      	movs	r2, #0
   1a5f2:	f88a 2003 	strb.w	r2, [sl, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   1a5f6:	f019 0f20 	tst.w	r9, #32
   1a5fa:	d10e      	bne.n	1a61a <ll_adv_params_set+0x1d6>
   1a5fc:	f89a 2002 	ldrb.w	r2, [sl, #2]
   1a600:	f012 0fc0 	tst.w	r2, #192	; 0xc0
   1a604:	d109      	bne.n	1a61a <ll_adv_params_set+0x1d6>
   1a606:	2d04      	cmp	r5, #4
   1a608:	d007      	beq.n	1a61a <ll_adv_params_set+0x1d6>
			h->adv_addr = 1;
   1a60a:	f89a 2003 	ldrb.w	r2, [sl, #3]
   1a60e:	f042 0201 	orr.w	r2, r2, #1
   1a612:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr += BDADDR_SIZE;
   1a616:	f10a 010a 	add.w	r1, sl, #10
		if (evt_prop & BIT(6)) {
   1a61a:	f019 0f40 	tst.w	r9, #64	; 0x40
   1a61e:	d006      	beq.n	1a62e <ll_adv_params_set+0x1ea>
			h->tx_pwr = 1;
   1a620:	f89a 2003 	ldrb.w	r2, [sl, #3]
   1a624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1a628:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr++;
   1a62c:	3101      	adds	r1, #1
		len = ptr - (u8_t *)p;
   1a62e:	1acb      	subs	r3, r1, r3
   1a630:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_payload_com_ext_adv,
   1a632:	2b02      	cmp	r3, #2
   1a634:	d916      	bls.n	1a664 <ll_adv_params_set+0x220>
			p->ext_hdr_len = len -
   1a636:	1e58      	subs	r0, r3, #1
   1a638:	f89a 2002 	ldrb.w	r2, [sl, #2]
   1a63c:	f360 0205 	bfi	r2, r0, #0, #6
   1a640:	f88a 2002 	strb.w	r2, [sl, #2]
			pdu->len = len;
   1a644:	f88a 3001 	strb.w	r3, [sl, #1]
		if (h->tx_pwr) {
   1a648:	f89a 3003 	ldrb.w	r3, [sl, #3]
   1a64c:	f013 0f40 	tst.w	r3, #64	; 0x40
   1a650:	f43f af77 	beq.w	1a542 <ll_adv_params_set+0xfe>
			if (tx_pwr) {
   1a654:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1a656:	b16b      	cbz	r3, 1a674 <ll_adv_params_set+0x230>
				if (*tx_pwr != 0x7F) {
   1a658:	781b      	ldrb	r3, [r3, #0]
   1a65a:	2b7f      	cmp	r3, #127	; 0x7f
   1a65c:	d006      	beq.n	1a66c <ll_adv_params_set+0x228>
			*ptr = _tx_pwr;
   1a65e:	f801 3c01 	strb.w	r3, [r1, #-1]
   1a662:	e76e      	b.n	1a542 <ll_adv_params_set+0xfe>
			pdu->len = offsetof(struct pdu_adv_payload_com_ext_adv,
   1a664:	2301      	movs	r3, #1
   1a666:	f88a 3001 	strb.w	r3, [sl, #1]
   1a66a:	e7ed      	b.n	1a648 <ll_adv_params_set+0x204>
					*tx_pwr = _tx_pwr;
   1a66c:	2300      	movs	r3, #0
   1a66e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1a670:	7013      	strb	r3, [r2, #0]
   1a672:	e7f4      	b.n	1a65e <ll_adv_params_set+0x21a>
			_tx_pwr = 0;
   1a674:	2300      	movs	r3, #0
   1a676:	e7f2      	b.n	1a65e <ll_adv_params_set+0x21a>
				return 0x12; /* invalid HCI cmd param */
   1a678:	2312      	movs	r3, #18
   1a67a:	9301      	str	r3, [sp, #4]
   1a67c:	e6fa      	b.n	1a474 <ll_adv_params_set+0x30>
   1a67e:	2312      	movs	r3, #18
   1a680:	9301      	str	r3, [sp, #4]
   1a682:	e6f7      	b.n	1a474 <ll_adv_params_set+0x30>
   1a684:	0002e548 	.word	0x0002e548
   1a688:	20001bbc 	.word	0x20001bbc

0001a68c <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   1a68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a690:	4606      	mov	r6, r0
   1a692:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   1a694:	f7fd fc42 	bl	17f1c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1a698:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   1a69c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a6a0:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   1a6a4:	1881      	adds	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1a6a6:	5c83      	ldrb	r3, [r0, r2]
   1a6a8:	f003 030f 	and.w	r3, r3, #15
   1a6ac:	2b01      	cmp	r3, #1
   1a6ae:	d03e      	beq.n	1a72e <ll_adv_data_set+0xa2>
   1a6b0:	4604      	mov	r4, r0
   1a6b2:	2b07      	cmp	r3, #7
   1a6b4:	d03b      	beq.n	1a72e <ll_adv_data_set+0xa2>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   1a6b6:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   1a6ba:	429d      	cmp	r5, r3
   1a6bc:	d039      	beq.n	1a732 <ll_adv_data_set+0xa6>
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1a6be:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1a6c2:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   1a6c6:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   1a6ca:	f814 e002 	ldrb.w	lr, [r4, r2]
   1a6ce:	5ce0      	ldrb	r0, [r4, r3]
   1a6d0:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
   1a6d4:	f36f 1004 	bfc	r0, #4, #1
   1a6d8:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   1a6da:	5ca0      	ldrb	r0, [r4, r2]
   1a6dc:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1a6e0:	f814 e003 	ldrb.w	lr, [r4, r3]
   1a6e4:	f360 1e45 	bfi	lr, r0, #5, #1
   1a6e8:	f804 e003 	strb.w	lr, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   1a6ec:	5ca0      	ldrb	r0, [r4, r2]
   1a6ee:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a6f2:	fa5f fe8e 	uxtb.w	lr, lr
   1a6f6:	f360 1e86 	bfi	lr, r0, #6, #1
   1a6fa:	f804 e003 	strb.w	lr, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
   1a6fe:	5ca2      	ldrb	r2, [r4, r2]
   1a700:	09d2      	lsrs	r2, r2, #7
   1a702:	fa5f f08e 	uxtb.w	r0, lr
   1a706:	f362 10c7 	bfi	r0, r2, #7, #1
   1a70a:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->payload.adv_ind.addr[0],
   1a70c:	2206      	movs	r2, #6
   1a70e:	3102      	adds	r1, #2
   1a710:	f108 0002 	add.w	r0, r8, #2
   1a714:	f7e5 fdd4 	bl	2c0 <memcpy>
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
   1a718:	4632      	mov	r2, r6
   1a71a:	4639      	mov	r1, r7
   1a71c:	f108 0008 	add.w	r0, r8, #8
   1a720:	f7e5 fdce 	bl	2c0 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   1a724:	3606      	adds	r6, #6
   1a726:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   1a72a:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1a72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_adv_data->last + 1;
   1a732:	3501      	adds	r5, #1
   1a734:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1a736:	2d02      	cmp	r5, #2
   1a738:	d1c1      	bne.n	1a6be <ll_adv_data_set+0x32>
			last = 0;
   1a73a:	2500      	movs	r5, #0
   1a73c:	e7bf      	b.n	1a6be <ll_adv_data_set+0x32>

0001a73e <ll_scan_data_set>:
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   1a73e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a742:	4606      	mov	r6, r0
   1a744:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   1a746:	f7fd fbed 	bl	17f24 <radio_scan_data_get>
   1a74a:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   1a74c:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
   1a750:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   1a754:	429a      	cmp	r2, r3
   1a756:	d031      	beq.n	1a7bc <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
	} else {
		last = radio_scan_data->last;
   1a758:	461d      	mov	r5, r3
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   1a75a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a75e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1a762:	18e1      	adds	r1, r4, r3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   1a764:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a768:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   1a76c:	eb04 0802 	add.w	r8, r4, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1a770:	5ca0      	ldrb	r0, [r4, r2]
   1a772:	f04f 0e04 	mov.w	lr, #4
   1a776:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   1a77a:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   1a77e:	f36f 1045 	bfc	r0, #5, #1
   1a782:	54a0      	strb	r0, [r4, r2]
	pdu->tx_addr = prev->tx_addr;
   1a784:	5ce0      	ldrb	r0, [r4, r3]
   1a786:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a78a:	5ca3      	ldrb	r3, [r4, r2]
   1a78c:	f360 1386 	bfi	r3, r0, #6, #1
	pdu->rx_addr = 0;
   1a790:	f36f 13c7 	bfc	r3, #7, #1
   1a794:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
   1a796:	1db3      	adds	r3, r6, #6
   1a798:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->payload.scan_rsp.addr[0],
   1a79c:	2206      	movs	r2, #6
   1a79e:	3102      	adds	r1, #2
   1a7a0:	f108 0002 	add.w	r0, r8, #2
   1a7a4:	f7e5 fd8c 	bl	2c0 <memcpy>
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);
   1a7a8:	4632      	mov	r2, r6
   1a7aa:	4639      	mov	r1, r7
   1a7ac:	f108 0008 	add.w	r0, r8, #8
   1a7b0:	f7e5 fd86 	bl	2c0 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   1a7b4:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1a7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_scan_data->last + 1;
   1a7bc:	1c5d      	adds	r5, r3, #1
   1a7be:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1a7c0:	2d02      	cmp	r5, #2
   1a7c2:	d1ca      	bne.n	1a75a <ll_scan_data_set+0x1c>
			last = 0;
   1a7c4:	2500      	movs	r5, #0
   1a7c6:	e7c8      	b.n	1a75a <ll_scan_data_set+0x1c>

0001a7c8 <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
   1a7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a7cc:	b082      	sub	sp, #8
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   1a7ce:	b120      	cbz	r0, 1a7da <ll_adv_enable+0x12>
		return radio_adv_disable();
	} else if (radio_adv_is_enabled()) {
   1a7d0:	f7fd fbac 	bl	17f2c <radio_adv_is_enabled>
   1a7d4:	b130      	cbz	r0, 1a7e4 <ll_adv_enable+0x1c>
		return 0;
   1a7d6:	2000      	movs	r0, #0
   1a7d8:	e001      	b.n	1a7de <ll_adv_enable+0x16>
		return radio_adv_disable();
   1a7da:	f7fe fb27 	bl	18e2c <radio_adv_disable>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
   1a7de:	b002      	add	sp, #8
   1a7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   1a7e4:	f7fd fb9a 	bl	17f1c <radio_adv_data_get>
   1a7e8:	4605      	mov	r5, r0
	radio_scan_data = radio_scan_data_get();
   1a7ea:	f7fd fb9b 	bl	17f24 <radio_scan_data_get>
			[radio_adv_data->last][0];
   1a7ee:	f895 204f 	ldrb.w	r2, [r5, #79]	; 0x4f
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   1a7f2:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   1a7f6:	ebc2 04c4 	rsb	r4, r2, r4, lsl #3
   1a7fa:	192e      	adds	r6, r5, r4
			[radio_scan_data->last][0];
   1a7fc:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   1a800:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a804:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1a808:	18c7      	adds	r7, r0, r3
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   1a80a:	5d2b      	ldrb	r3, [r5, r4]
   1a80c:	f003 030f 	and.w	r3, r3, #15
   1a810:	2b07      	cmp	r3, #7
   1a812:	d023      	beq.n	1a85c <ll_adv_enable+0x94>
		ll_filters_adv_update(ll_adv.filter_policy);
   1a814:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1a8e8 <ll_adv_enable+0x120>
   1a818:	f898 0000 	ldrb.w	r0, [r8]
   1a81c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   1a820:	f7ff f874 	bl	1990c <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1a824:	f898 3000 	ldrb.w	r3, [r8]
   1a828:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1a82c:	2b40      	cmp	r3, #64	; 0x40
   1a82e:	d02b      	beq.n	1a888 <ll_adv_enable+0xc0>
   1a830:	2b60      	cmp	r3, #96	; 0x60
   1a832:	d029      	beq.n	1a888 <ll_adv_enable+0xc0>
		bool priv = false;
   1a834:	2300      	movs	r3, #0
	u8_t   rl_idx = FILTER_IDX_NONE;
   1a836:	f04f 08ff 	mov.w	r8, #255	; 0xff
		if (!priv) {
   1a83a:	2b00      	cmp	r3, #0
   1a83c:	d03b      	beq.n	1a8b6 <ll_adv_enable+0xee>
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1a83e:	4b2a      	ldr	r3, [pc, #168]	; (1a8e8 <ll_adv_enable+0x120>)
   1a840:	7a18      	ldrb	r0, [r3, #8]
   1a842:	8999      	ldrh	r1, [r3, #12]
				  ll_adv.chan_map, ll_adv.filter_policy,
   1a844:	781a      	ldrb	r2, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1a846:	f8cd 8000 	str.w	r8, [sp]
   1a84a:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   1a84e:	f002 0207 	and.w	r2, r2, #7
   1a852:	f000 0007 	and.w	r0, r0, #7
   1a856:	f7fe f90b 	bl	18a70 <radio_adv_enable>
	return status;
   1a85a:	e7c0      	b.n	1a7de <ll_adv_enable+0x16>
		ptr = (u8_t *)h + sizeof(*h);
   1a85c:	1d37      	adds	r7, r6, #4
		if (h->adv_addr) {
   1a85e:	78f3      	ldrb	r3, [r6, #3]
   1a860:	f013 0f01 	tst.w	r3, #1
   1a864:	d102      	bne.n	1a86c <ll_adv_enable+0xa4>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1a866:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1a86a:	e7e8      	b.n	1a83e <ll_adv_enable+0x76>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   1a86c:	5d28      	ldrb	r0, [r5, r4]
   1a86e:	2100      	movs	r1, #0
   1a870:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a874:	f7fe fdf4 	bl	19460 <ll_addr_get>
   1a878:	2206      	movs	r2, #6
   1a87a:	4601      	mov	r1, r0
   1a87c:	4638      	mov	r0, r7
   1a87e:	f7e5 fd1f 	bl	2c0 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1a882:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1a886:	e7da      	b.n	1a83e <ll_adv_enable+0x76>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   1a888:	4917      	ldr	r1, [pc, #92]	; (1a8e8 <ll_adv_enable+0x120>)
   1a88a:	f811 0b02 	ldrb.w	r0, [r1], #2
   1a88e:	2200      	movs	r2, #0
   1a890:	09c0      	lsrs	r0, r0, #7
   1a892:	f7ff f86b 	bl	1996c <ll_rl_find>
   1a896:	4680      	mov	r8, r0
			if (rl_idx != FILTER_IDX_NONE) {
   1a898:	28ff      	cmp	r0, #255	; 0xff
   1a89a:	d002      	beq.n	1a8a2 <ll_adv_enable+0xda>
				ll_rl_rpa_update(false);
   1a89c:	2000      	movs	r0, #0
   1a89e:	f7ff fac7 	bl	19e30 <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   1a8a2:	4631      	mov	r1, r6
   1a8a4:	4640      	mov	r0, r8
   1a8a6:	f7ff f9f9 	bl	19c9c <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   1a8aa:	4639      	mov	r1, r7
   1a8ac:	4640      	mov	r0, r8
   1a8ae:	f7ff f9f5 	bl	19c9c <ll_rl_pdu_adv_update>
			priv = true;
   1a8b2:	2301      	movs	r3, #1
   1a8b4:	e7c1      	b.n	1a83a <ll_adv_enable+0x72>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1a8b6:	3602      	adds	r6, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1a8b8:	5d28      	ldrb	r0, [r5, r4]
   1a8ba:	2100      	movs	r1, #0
   1a8bc:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a8c0:	f7fe fdce 	bl	19460 <ll_addr_get>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1a8c4:	2206      	movs	r2, #6
   1a8c6:	4601      	mov	r1, r0
   1a8c8:	4630      	mov	r0, r6
   1a8ca:	f7e5 fcf9 	bl	2c0 <memcpy>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   1a8ce:	3702      	adds	r7, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1a8d0:	5d28      	ldrb	r0, [r5, r4]
   1a8d2:	2100      	movs	r1, #0
   1a8d4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a8d8:	f7fe fdc2 	bl	19460 <ll_addr_get>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   1a8dc:	2206      	movs	r2, #6
   1a8de:	4601      	mov	r1, r0
   1a8e0:	4638      	mov	r0, r7
   1a8e2:	f7e5 fced 	bl	2c0 <memcpy>
   1a8e6:	e7aa      	b.n	1a83e <ll_adv_enable+0x76>
   1a8e8:	20001bbc 	.word	0x20001bbc

0001a8ec <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   1a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a8ee:	4607      	mov	r7, r0
   1a8f0:	460e      	mov	r6, r1
   1a8f2:	4615      	mov	r5, r2
   1a8f4:	461c      	mov	r4, r3
	if (radio_scan_is_enabled()) {
   1a8f6:	f7fd fb31 	bl	17f5c <radio_scan_is_enabled>
   1a8fa:	b110      	cbz	r0, 1a902 <ll_scan_params_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a8fc:	220c      	movs	r2, #12
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
	ll_scan.filter_policy = filter_policy;

	return 0;
}
   1a8fe:	4610      	mov	r0, r2
   1a900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a902:	4602      	mov	r2, r0
	ll_scan.type = type;
   1a904:	4906      	ldr	r1, [pc, #24]	; (1a920 <ll_scan_params_set+0x34>)
   1a906:	790b      	ldrb	r3, [r1, #4]
   1a908:	f367 0303 	bfi	r3, r7, #0, #4
	ll_scan.interval = interval;
   1a90c:	800e      	strh	r6, [r1, #0]
	ll_scan.window = window;
   1a90e:	804d      	strh	r5, [r1, #2]
	ll_scan.own_addr_type = own_addr_type;
   1a910:	f364 1305 	bfi	r3, r4, #4, #2
	ll_scan.filter_policy = filter_policy;
   1a914:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1a918:	f360 1387 	bfi	r3, r0, #6, #2
   1a91c:	710b      	strb	r3, [r1, #4]
	return 0;
   1a91e:	e7ee      	b.n	1a8fe <ll_scan_params_set+0x12>
   1a920:	20001bcc 	.word	0x20001bcc

0001a924 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   1a924:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a926:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   1a928:	b120      	cbz	r0, 1a934 <ll_scan_enable+0x10>
		return radio_scan_disable();
	} else if (radio_scan_is_enabled()) {
   1a92a:	f7fd fb17 	bl	17f5c <radio_scan_is_enabled>
   1a92e:	b128      	cbz	r0, 1a93c <ll_scan_enable+0x18>
		/* Duplicate filtering is processed in the HCI layer */
		return 0;
   1a930:	2000      	movs	r0, #0
   1a932:	e001      	b.n	1a938 <ll_scan_enable+0x14>
		return radio_scan_disable();
   1a934:	f7fe fbac 	bl	19090 <radio_scan_disable>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   1a938:	b005      	add	sp, #20
   1a93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_filters_scan_update(ll_scan.filter_policy);
   1a93c:	4c18      	ldr	r4, [pc, #96]	; (1a9a0 <ll_scan_enable+0x7c>)
   1a93e:	7920      	ldrb	r0, [r4, #4]
   1a940:	0980      	lsrs	r0, r0, #6
   1a942:	f7fe fffb 	bl	1993c <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   1a946:	7923      	ldrb	r3, [r4, #4]
   1a948:	f013 0f01 	tst.w	r3, #1
   1a94c:	d00d      	beq.n	1a96a <ll_scan_enable+0x46>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1a94e:	7923      	ldrb	r3, [r4, #4]
   1a950:	f003 0330 	and.w	r3, r3, #48	; 0x30
	if ((ll_scan.type & 0x1) &&
   1a954:	2b20      	cmp	r3, #32
   1a956:	d003      	beq.n	1a960 <ll_scan_enable+0x3c>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1a958:	2b30      	cmp	r3, #48	; 0x30
   1a95a:	d001      	beq.n	1a960 <ll_scan_enable+0x3c>
	u8_t  rpa_gen = 0;
   1a95c:	2700      	movs	r7, #0
   1a95e:	e005      	b.n	1a96c <ll_scan_enable+0x48>
		ll_rl_rpa_update(false);
   1a960:	2000      	movs	r0, #0
   1a962:	f7ff fa65 	bl	19e30 <ll_rl_rpa_update>
		rpa_gen = 1;
   1a966:	2701      	movs	r7, #1
   1a968:	e000      	b.n	1a96c <ll_scan_enable+0x48>
	u8_t  rpa_gen = 0;
   1a96a:	2700      	movs	r7, #0
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1a96c:	4d0c      	ldr	r5, [pc, #48]	; (1a9a0 <ll_scan_enable+0x7c>)
   1a96e:	792c      	ldrb	r4, [r5, #4]
   1a970:	f004 060f 	and.w	r6, r4, #15
   1a974:	f3c4 1400 	ubfx	r4, r4, #4, #1
   1a978:	2100      	movs	r1, #0
   1a97a:	4620      	mov	r0, r4
   1a97c:	f7fe fd70 	bl	19460 <ll_addr_get>
   1a980:	882b      	ldrh	r3, [r5, #0]
   1a982:	8869      	ldrh	r1, [r5, #2]
				   ll_scan.filter_policy, rpa_gen,
   1a984:	792a      	ldrb	r2, [r5, #4]
   1a986:	0992      	lsrs	r2, r2, #6
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1a988:	25ff      	movs	r5, #255	; 0xff
   1a98a:	9503      	str	r5, [sp, #12]
   1a98c:	9702      	str	r7, [sp, #8]
   1a98e:	9201      	str	r2, [sp, #4]
   1a990:	9100      	str	r1, [sp, #0]
   1a992:	4602      	mov	r2, r0
   1a994:	4621      	mov	r1, r4
   1a996:	4630      	mov	r0, r6
   1a998:	f7fe fa7a 	bl	18e90 <radio_scan_enable>
	return status;
   1a99c:	e7cc      	b.n	1a938 <ll_scan_enable+0x14>
   1a99e:	bf00      	nop
   1a9a0:	20001bcc 	.word	0x20001bcc

0001a9a4 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   1a9a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a9a8:	b085      	sub	sp, #20
   1a9aa:	4607      	mov	r7, r0
   1a9ac:	4688      	mov	r8, r1
   1a9ae:	4615      	mov	r5, r2
   1a9b0:	461e      	mov	r6, r3
   1a9b2:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (radio_scan_is_enabled()) {
   1a9b6:	f7fd fad1 	bl	17f5c <radio_scan_is_enabled>
   1a9ba:	b120      	cbz	r0, 1a9c6 <ll_create_connection+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a9bc:	230c      	movs	r3, #12
#endif
	return radio_scan_enable(0, own_addr_type,
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   1a9be:	4618      	mov	r0, r3
   1a9c0:	b005      	add	sp, #20
   1a9c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   1a9c6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1a9ca:	9300      	str	r3, [sp, #0]
   1a9cc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   1a9d0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   1a9d4:	990c      	ldr	r1, [sp, #48]	; 0x30
   1a9d6:	4630      	mov	r0, r6
   1a9d8:	f7fd fada 	bl	17f90 <radio_connect_enable>
	if (status) {
   1a9dc:	4603      	mov	r3, r0
   1a9de:	2800      	cmp	r0, #0
   1a9e0:	d1ed      	bne.n	1a9be <ll_create_connection+0x1a>
	ll_filters_scan_update(filter_policy);
   1a9e2:	4628      	mov	r0, r5
   1a9e4:	f7fe ffaa 	bl	1993c <ll_filters_scan_update>
	if (!filter_policy && ctrl_rl_enabled()) {
   1a9e8:	b1c5      	cbz	r5, 1aa1c <ll_create_connection+0x78>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1a9ea:	f04f 09ff 	mov.w	r9, #255	; 0xff
	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1a9ee:	1ea3      	subs	r3, r4, #2
   1a9f0:	b2db      	uxtb	r3, r3
   1a9f2:	2b01      	cmp	r3, #1
   1a9f4:	d91f      	bls.n	1aa36 <ll_create_connection+0x92>
	u8_t  rpa_gen = 0;
   1a9f6:	2600      	movs	r6, #0
	return radio_scan_enable(0, own_addr_type,
   1a9f8:	2100      	movs	r1, #0
   1a9fa:	4620      	mov	r0, r4
   1a9fc:	f7fe fd30 	bl	19460 <ll_addr_get>
   1aa00:	f8cd 900c 	str.w	r9, [sp, #12]
   1aa04:	9602      	str	r6, [sp, #8]
   1aa06:	9501      	str	r5, [sp, #4]
   1aa08:	f8cd 8000 	str.w	r8, [sp]
   1aa0c:	463b      	mov	r3, r7
   1aa0e:	4602      	mov	r2, r0
   1aa10:	4621      	mov	r1, r4
   1aa12:	2000      	movs	r0, #0
   1aa14:	f7fe fa3c 	bl	18e90 <radio_scan_enable>
   1aa18:	4603      	mov	r3, r0
   1aa1a:	e7d0      	b.n	1a9be <ll_create_connection+0x1a>
	if (!filter_policy && ctrl_rl_enabled()) {
   1aa1c:	f7ff f936 	bl	19c8c <ctrl_rl_enabled>
   1aa20:	b910      	cbnz	r0, 1aa28 <ll_create_connection+0x84>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1aa22:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1aa26:	e7e2      	b.n	1a9ee <ll_create_connection+0x4a>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   1aa28:	2200      	movs	r2, #0
   1aa2a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1aa2c:	4630      	mov	r0, r6
   1aa2e:	f7fe ff9d 	bl	1996c <ll_rl_find>
   1aa32:	4681      	mov	r9, r0
   1aa34:	e7db      	b.n	1a9ee <ll_create_connection+0x4a>
		ll_rl_rpa_update(false);
   1aa36:	2000      	movs	r0, #0
   1aa38:	f7ff f9fa 	bl	19e30 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   1aa3c:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   1aa40:	2601      	movs	r6, #1
   1aa42:	e7d9      	b.n	1a9f8 <ll_create_connection+0x54>

0001aa44 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1aa44:	4b01      	ldr	r3, [pc, #4]	; (1aa4c <pool_id+0x8>)
   1aa46:	1ac0      	subs	r0, r0, r3
}
   1aa48:	1140      	asrs	r0, r0, #5
   1aa4a:	4770      	bx	lr
   1aa4c:	2000d1f4 	.word	0x2000d1f4

0001aa50 <net_buf_pool_get>:
}
   1aa50:	4b01      	ldr	r3, [pc, #4]	; (1aa58 <net_buf_pool_get+0x8>)
   1aa52:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1aa56:	4770      	bx	lr
   1aa58:	2000d1f4 	.word	0x2000d1f4

0001aa5c <net_buf_reset>:
void net_buf_reset(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf->flags == 0);
	NET_BUF_ASSERT(buf->frags == NULL);

	buf->len   = 0;
   1aa5c:	2300      	movs	r3, #0
   1aa5e:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
   1aa60:	f100 0310 	add.w	r3, r0, #16
   1aa64:	6083      	str	r3, [r0, #8]
   1aa66:	4770      	bx	lr

0001aa68 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
   1aa68:	b570      	push	{r4, r5, r6, lr}
   1aa6a:	4605      	mov	r5, r0
	__asm__ volatile(
   1aa6c:	f04f 0320 	mov.w	r3, #32
   1aa70:	f3ef 8611 	mrs	r6, BASEPRI
   1aa74:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1aa78:	8a43      	ldrh	r3, [r0, #18]
   1aa7a:	b373      	cbz	r3, 1aada <net_buf_alloc+0x72>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1aa7c:	8a02      	ldrh	r2, [r0, #16]
   1aa7e:	4293      	cmp	r3, r2
   1aa80:	d207      	bcs.n	1aa92 <net_buf_alloc+0x2a>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   1aa82:	2100      	movs	r1, #0
   1aa84:	f00e f83a 	bl	28afc <k_queue_get>
			if (buf) {
   1aa88:	4604      	mov	r4, r0
   1aa8a:	b110      	cbz	r0, 1aa92 <net_buf_alloc+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1aa8c:	f386 8811 	msr	BASEPRI, r6
   1aa90:	e019      	b.n	1aac6 <net_buf_alloc+0x5e>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   1aa92:	8a6b      	ldrh	r3, [r5, #18]
   1aa94:	1e5a      	subs	r2, r3, #1
   1aa96:	826a      	strh	r2, [r5, #18]
   1aa98:	f386 8811 	msr	BASEPRI, r6
	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
   1aa9c:	69ea      	ldr	r2, [r5, #28]
   1aa9e:	8a2c      	ldrh	r4, [r5, #16]
   1aaa0:	1ae4      	subs	r4, r4, r3
   1aaa2:	8aab      	ldrh	r3, [r5, #20]
   1aaa4:	3303      	adds	r3, #3
   1aaa6:	f023 0303 	bic.w	r3, r3, #3
   1aaaa:	8ae9      	ldrh	r1, [r5, #22]
   1aaac:	3103      	adds	r1, #3
   1aaae:	f021 0103 	bic.w	r1, r1, #3
   1aab2:	440b      	add	r3, r1
   1aab4:	3310      	adds	r3, #16
   1aab6:	fb03 2404 	mla	r4, r3, r4, r2
	buf->pool_id = pool_id(pool);
   1aaba:	4628      	mov	r0, r5
   1aabc:	f7ff ffc2 	bl	1aa44 <pool_id>
   1aac0:	71a0      	strb	r0, [r4, #6]
	buf->size = pool->buf_size;
   1aac2:	8aab      	ldrh	r3, [r5, #20]
   1aac4:	81e3      	strh	r3, [r4, #14]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
   1aac6:	2301      	movs	r3, #1
   1aac8:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   1aaca:	2300      	movs	r3, #0
   1aacc:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   1aace:	6023      	str	r3, [r4, #0]
	net_buf_reset(buf);
   1aad0:	4620      	mov	r0, r4
   1aad2:	f7ff ffc3 	bl	1aa5c <net_buf_reset>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   1aad6:	4620      	mov	r0, r4
   1aad8:	bd70      	pop	{r4, r5, r6, pc}
   1aada:	f386 8811 	msr	BASEPRI, r6
	buf = k_lifo_get(&pool->free, timeout);
   1aade:	f00e f80d 	bl	28afc <k_queue_get>
	if (!buf) {
   1aae2:	4604      	mov	r4, r0
   1aae4:	2800      	cmp	r0, #0
   1aae6:	d1ee      	bne.n	1aac6 <net_buf_alloc+0x5e>
   1aae8:	e7f5      	b.n	1aad6 <net_buf_alloc+0x6e>

0001aaea <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   1aaea:	b570      	push	{r4, r5, r6, lr}
   1aaec:	4605      	mov	r5, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   1aaee:	f00e f805 	bl	28afc <k_queue_get>
	if (!buf) {
   1aaf2:	4606      	mov	r6, r0
   1aaf4:	b188      	cbz	r0, 1ab1a <net_buf_get+0x30>
   1aaf6:	4604      	mov	r4, r0
   1aaf8:	e009      	b.n	1ab0e <net_buf_get+0x24>

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1aafa:	2100      	movs	r1, #0
   1aafc:	4628      	mov	r0, r5
   1aafe:	f00d fffd 	bl	28afc <k_queue_get>
   1ab02:	6020      	str	r0, [r4, #0]
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1ab04:	7963      	ldrb	r3, [r4, #5]
   1ab06:	f023 0301 	bic.w	r3, r3, #1
   1ab0a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ab0c:	4604      	mov	r4, r0
   1ab0e:	7963      	ldrb	r3, [r4, #5]
   1ab10:	f013 0f01 	tst.w	r3, #1
   1ab14:	d1f1      	bne.n	1aafa <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1ab16:	2300      	movs	r3, #0
   1ab18:	6023      	str	r3, [r4, #0]

	return buf;
}
   1ab1a:	4630      	mov	r0, r6
   1ab1c:	bd70      	pop	{r4, r5, r6, pc}

0001ab1e <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1ab1e:	f100 0310 	add.w	r3, r0, #16
   1ab22:	4419      	add	r1, r3
   1ab24:	6081      	str	r1, [r0, #8]
   1ab26:	4770      	bx	lr

0001ab28 <net_buf_put>:
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1ab28:	b510      	push	{r4, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1ab2a:	460a      	mov	r2, r1
   1ab2c:	e004      	b.n	1ab38 <net_buf_put+0x10>
		tail->flags |= NET_BUF_FRAGS;
   1ab2e:	7953      	ldrb	r3, [r2, #5]
   1ab30:	f043 0301 	orr.w	r3, r3, #1
   1ab34:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1ab36:	4622      	mov	r2, r4
   1ab38:	6814      	ldr	r4, [r2, #0]
   1ab3a:	2c00      	cmp	r4, #0
   1ab3c:	d1f7      	bne.n	1ab2e <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
   1ab3e:	f00d ffc1 	bl	28ac4 <k_queue_append_list>
   1ab42:	bd10      	pop	{r4, pc}

0001ab44 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1ab44:	b538      	push	{r3, r4, r5, lr}
   1ab46:	4604      	mov	r4, r0
	NET_BUF_ASSERT(buf);

	while (buf) {
   1ab48:	e006      	b.n	1ab58 <net_buf_unref+0x14>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ab4a:	79a0      	ldrb	r0, [r4, #6]
   1ab4c:	f7ff ff80 	bl	1aa50 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1ab50:	4621      	mov	r1, r4
   1ab52:	f00d ffb1 	bl	28ab8 <k_queue_prepend>
{
   1ab56:	462c      	mov	r4, r5
	while (buf) {
   1ab58:	b17c      	cbz	r4, 1ab7a <net_buf_unref+0x36>
		struct net_buf *frags = buf->frags;
   1ab5a:	6825      	ldr	r5, [r4, #0]
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   1ab5c:	7923      	ldrb	r3, [r4, #4]
   1ab5e:	3b01      	subs	r3, #1
   1ab60:	b2db      	uxtb	r3, r3
   1ab62:	7123      	strb	r3, [r4, #4]
   1ab64:	b94b      	cbnz	r3, 1ab7a <net_buf_unref+0x36>
			return;
		}

		buf->frags = NULL;
   1ab66:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1ab68:	79a0      	ldrb	r0, [r4, #6]
   1ab6a:	f7ff ff71 	bl	1aa50 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   1ab6e:	6983      	ldr	r3, [r0, #24]
   1ab70:	2b00      	cmp	r3, #0
   1ab72:	d0ea      	beq.n	1ab4a <net_buf_unref+0x6>
			pool->destroy(buf);
   1ab74:	4620      	mov	r0, r4
   1ab76:	4798      	blx	r3
   1ab78:	e7ed      	b.n	1ab56 <net_buf_unref+0x12>
   1ab7a:	bd38      	pop	{r3, r4, r5, pc}

0001ab7c <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1ab7c:	7903      	ldrb	r3, [r0, #4]
   1ab7e:	3301      	adds	r3, #1
   1ab80:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1ab82:	4770      	bx	lr

0001ab84 <net_buf_frag_last>:

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
   1ab84:	e000      	b.n	1ab88 <net_buf_frag_last+0x4>
		buf = buf->frags;
   1ab86:	4618      	mov	r0, r3
	while (buf->frags) {
   1ab88:	6803      	ldr	r3, [r0, #0]
   1ab8a:	2b00      	cmp	r3, #0
   1ab8c:	d1fb      	bne.n	1ab86 <net_buf_frag_last+0x2>
	}

	return buf;
}
   1ab8e:	4770      	bx	lr

0001ab90 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1ab90:	b570      	push	{r4, r5, r6, lr}
   1ab92:	4604      	mov	r4, r0
   1ab94:	460d      	mov	r5, r1
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
   1ab96:	6806      	ldr	r6, [r0, #0]
   1ab98:	b11e      	cbz	r6, 1aba2 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   1ab9a:	4608      	mov	r0, r1
   1ab9c:	f7ff fff2 	bl	1ab84 <net_buf_frag_last>
   1aba0:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1aba2:	6025      	str	r5, [r4, #0]
   1aba4:	bd70      	pop	{r4, r5, r6, pc}

0001aba6 <net_buf_frag_add>:
}

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1aba6:	b538      	push	{r3, r4, r5, lr}
   1aba8:	460d      	mov	r5, r1
	NET_BUF_ASSERT(frag);

	if (!head) {
   1abaa:	b138      	cbz	r0, 1abbc <net_buf_frag_add+0x16>
   1abac:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1abae:	f7ff ffe9 	bl	1ab84 <net_buf_frag_last>
   1abb2:	4629      	mov	r1, r5
   1abb4:	f7ff ffec 	bl	1ab90 <net_buf_frag_insert>

	return head;
   1abb8:	4620      	mov	r0, r4
}
   1abba:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   1abbc:	4608      	mov	r0, r1
   1abbe:	f7ff ffdd 	bl	1ab7c <net_buf_ref>
   1abc2:	bd38      	pop	{r3, r4, r5, pc}

0001abc4 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1abc4:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	NET_BUF_ASSERT(frag);

	if (parent) {
   1abc6:	b108      	cbz	r0, 1abcc <net_buf_frag_del+0x8>
		NET_BUF_ASSERT(parent->frags);
		NET_BUF_ASSERT(parent->frags == frag);
		parent->frags = frag->frags;
   1abc8:	680a      	ldr	r2, [r1, #0]
   1abca:	6002      	str	r2, [r0, #0]
	}

	next_frag = frag->frags;
   1abcc:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1abce:	2300      	movs	r3, #0
   1abd0:	600b      	str	r3, [r1, #0]

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1abd2:	4608      	mov	r0, r1
   1abd4:	f7ff ffb6 	bl	1ab44 <net_buf_unref>
#endif

	return next_frag;
}
   1abd8:	4620      	mov	r0, r4
   1abda:	bd10      	pop	{r4, pc}

0001abdc <net_buf_simple_add>:
	return buf->data + buf->len;
   1abdc:	6802      	ldr	r2, [r0, #0]
   1abde:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1abe0:	4419      	add	r1, r3
   1abe2:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1abe4:	18d0      	adds	r0, r2, r3
   1abe6:	4770      	bx	lr

0001abe8 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1abe8:	b538      	push	{r3, r4, r5, lr}
   1abea:	460d      	mov	r5, r1
   1abec:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1abee:	4611      	mov	r1, r2
   1abf0:	f7ff fff4 	bl	1abdc <net_buf_simple_add>
   1abf4:	4622      	mov	r2, r4
   1abf6:	4629      	mov	r1, r5
   1abf8:	f7e5 fb62 	bl	2c0 <memcpy>
}
   1abfc:	bd38      	pop	{r3, r4, r5, pc}

0001abfe <net_buf_simple_add_u8>:

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1abfe:	b510      	push	{r4, lr}
   1ac00:	460c      	mov	r4, r1
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   1ac02:	2101      	movs	r1, #1
   1ac04:	f7ff ffea 	bl	1abdc <net_buf_simple_add>
	*u8 = val;
   1ac08:	7004      	strb	r4, [r0, #0]

	return u8;
}
   1ac0a:	bd10      	pop	{r4, pc}

0001ac0c <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   1ac0c:	b510      	push	{r4, lr}
   1ac0e:	b082      	sub	sp, #8
   1ac10:	ac02      	add	r4, sp, #8
   1ac12:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1ac16:	2102      	movs	r1, #2
   1ac18:	f7ff ffe0 	bl	1abdc <net_buf_simple_add>
   1ac1c:	2202      	movs	r2, #2
   1ac1e:	4621      	mov	r1, r4
   1ac20:	f7e5 fb4e 	bl	2c0 <memcpy>
}
   1ac24:	b002      	add	sp, #8
   1ac26:	bd10      	pop	{r4, pc}

0001ac28 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   1ac28:	b510      	push	{r4, lr}
   1ac2a:	b082      	sub	sp, #8
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   1ac2c:	0a0b      	lsrs	r3, r1, #8
   1ac2e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1ac32:	ac02      	add	r4, sp, #8
   1ac34:	f824 1d02 	strh.w	r1, [r4, #-2]!
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1ac38:	2102      	movs	r1, #2
   1ac3a:	f7ff ffcf 	bl	1abdc <net_buf_simple_add>
   1ac3e:	2202      	movs	r2, #2
   1ac40:	4621      	mov	r1, r4
   1ac42:	f7e5 fb3d 	bl	2c0 <memcpy>
}
   1ac46:	b002      	add	sp, #8
   1ac48:	bd10      	pop	{r4, pc}

0001ac4a <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1ac4a:	6803      	ldr	r3, [r0, #0]
   1ac4c:	1a5b      	subs	r3, r3, r1
   1ac4e:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1ac50:	8882      	ldrh	r2, [r0, #4]
   1ac52:	4411      	add	r1, r2
   1ac54:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   1ac56:	4618      	mov	r0, r3
   1ac58:	4770      	bx	lr

0001ac5a <net_buf_simple_push_le16>:

void net_buf_simple_push_le16(struct net_buf_simple *buf, u16_t val)
{
   1ac5a:	b510      	push	{r4, lr}
   1ac5c:	b082      	sub	sp, #8
   1ac5e:	ac02      	add	r4, sp, #8
   1ac60:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   1ac64:	2102      	movs	r1, #2
   1ac66:	f7ff fff0 	bl	1ac4a <net_buf_simple_push>
   1ac6a:	2202      	movs	r2, #2
   1ac6c:	4621      	mov	r1, r4
   1ac6e:	f7e5 fb27 	bl	2c0 <memcpy>
}
   1ac72:	b002      	add	sp, #8
   1ac74:	bd10      	pop	{r4, pc}

0001ac76 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1ac76:	8883      	ldrh	r3, [r0, #4]
   1ac78:	1a5b      	subs	r3, r3, r1
   1ac7a:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1ac7c:	6803      	ldr	r3, [r0, #0]
   1ac7e:	4419      	add	r1, r3
   1ac80:	6001      	str	r1, [r0, #0]
}
   1ac82:	4608      	mov	r0, r1
   1ac84:	4770      	bx	lr

0001ac86 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1ac86:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
   1ac88:	6803      	ldr	r3, [r0, #0]
   1ac8a:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1ac8c:	2101      	movs	r1, #1
   1ac8e:	f7ff fff2 	bl	1ac76 <net_buf_simple_pull>

	return val;
}
   1ac92:	4620      	mov	r0, r4
   1ac94:	bd10      	pop	{r4, pc}

0001ac96 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1ac96:	b510      	push	{r4, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1ac98:	6803      	ldr	r3, [r0, #0]
   1ac9a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1ac9c:	2102      	movs	r1, #2
   1ac9e:	f7ff ffea 	bl	1ac76 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1aca2:	4620      	mov	r0, r4
   1aca4:	bd10      	pop	{r4, pc}

0001aca6 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1aca6:	f850 3b08 	ldr.w	r3, [r0], #8
}
   1acaa:	1a18      	subs	r0, r3, r0
   1acac:	4770      	bx	lr

0001acae <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   1acae:	b538      	push	{r3, r4, r5, lr}
   1acb0:	4605      	mov	r5, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1acb2:	88c4      	ldrh	r4, [r0, #6]
   1acb4:	f7ff fff7 	bl	1aca6 <net_buf_simple_headroom>
   1acb8:	1a20      	subs	r0, r4, r0
   1acba:	88ab      	ldrh	r3, [r5, #4]
}
   1acbc:	1ac0      	subs	r0, r0, r3
   1acbe:	bd38      	pop	{r3, r4, r5, pc}

0001acc0 <processing_data>:

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   1acc0:	b510      	push	{r4, lr}
   1acc2:	4604      	mov	r4, r0
	if (!pkt->frags) {
   1acc4:	6883      	ldr	r3, [r0, #8]
   1acc6:	b18b      	cbz	r3, 1acec <processing_data+0x2c>
	if (!is_loopback && !locally_routed) {
   1acc8:	b1b1      	cbz	r1, 1acf8 <processing_data+0x38>
	return net_buf_frags_len(pkt->frags);
}

static inline u8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
   1acca:	68a3      	ldr	r3, [r4, #8]
   1accc:	689b      	ldr	r3, [r3, #8]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   1acce:	781b      	ldrb	r3, [r3, #0]
   1acd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1acd4:	2b60      	cmp	r3, #96	; 0x60
   1acd6:	d01d      	beq.n	1ad14 <processing_data+0x54>
	net_stats.processing_error++;
}

static inline void net_stats_update_ip_errors_protoerr(void)
{
	net_stats.ip_errors.protoerr++;
   1acd8:	4b18      	ldr	r3, [pc, #96]	; (1ad3c <processing_data+0x7c>)
   1acda:	6a1a      	ldr	r2, [r3, #32]
   1acdc:	3201      	adds	r2, #1
   1acde:	621a      	str	r2, [r3, #32]
}

static inline void net_stats_update_ip_errors_vhlerr(void)
{
	net_stats.ip_errors.vhlerr++;
   1ace0:	68da      	ldr	r2, [r3, #12]
   1ace2:	3201      	adds	r2, #1
   1ace4:	60da      	str	r2, [r3, #12]
	return NET_DROP;
   1ace6:	2002      	movs	r0, #2
	switch (process_data(pkt, is_loopback)) {
   1ace8:	bb18      	cbnz	r0, 1ad32 <processing_data+0x72>
   1acea:	bd10      	pop	{r4, pc}
	net_stats.processing_error++;
   1acec:	4a13      	ldr	r2, [pc, #76]	; (1ad3c <processing_data+0x7c>)
   1acee:	6813      	ldr	r3, [r2, #0]
   1acf0:	3301      	adds	r3, #1
   1acf2:	6013      	str	r3, [r2, #0]
		return NET_DROP;
   1acf4:	2002      	movs	r0, #2
   1acf6:	e7f7      	b.n	1ace8 <processing_data+0x28>
	return pkt->iface;
   1acf8:	6940      	ldr	r0, [r0, #20]
 * @return verdict about the packet
 */
static inline enum net_verdict net_if_recv_data(struct net_if *iface,
						struct net_pkt *pkt)
{
	return iface->l2->recv(iface, pkt);
   1acfa:	6843      	ldr	r3, [r0, #4]
   1acfc:	681b      	ldr	r3, [r3, #0]
   1acfe:	4621      	mov	r1, r4
   1ad00:	4798      	blx	r3
		if (ret != NET_CONTINUE) {
   1ad02:	2801      	cmp	r0, #1
   1ad04:	d0e1      	beq.n	1acca <processing_data+0xa>
			if (ret == NET_DROP) {
   1ad06:	2802      	cmp	r0, #2
   1ad08:	d1ee      	bne.n	1ace8 <processing_data+0x28>
   1ad0a:	4a0c      	ldr	r2, [pc, #48]	; (1ad3c <processing_data+0x7c>)
   1ad0c:	6813      	ldr	r3, [r2, #0]
   1ad0e:	3301      	adds	r3, #1
   1ad10:	6013      	str	r3, [r2, #0]
   1ad12:	e7e9      	b.n	1ace8 <processing_data+0x28>
	net_stats.ipv6.sent++;
}

static inline void net_stats_update_ipv6_recv(void)
{
	net_stats.ipv6.recv++;
   1ad14:	4a09      	ldr	r2, [pc, #36]	; (1ad3c <processing_data+0x7c>)
   1ad16:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1ad18:	3301      	adds	r3, #1
   1ad1a:	6253      	str	r3, [r2, #36]	; 0x24
	pkt->family = family;
   1ad1c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1ad20:	220a      	movs	r2, #10
   1ad22:	f362 03c6 	bfi	r3, r2, #3, #4
   1ad26:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		return net_ipv6_process_pkt(pkt);
   1ad2a:	4620      	mov	r0, r4
   1ad2c:	f006 fd1e 	bl	2176c <net_ipv6_process_pkt>
   1ad30:	e7da      	b.n	1ace8 <processing_data+0x28>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   1ad32:	4620      	mov	r0, r4
   1ad34:	f002 fc75 	bl	1d622 <net_pkt_unref>
		break;
	}
}
   1ad38:	e7d7      	b.n	1acea <processing_data+0x2a>
   1ad3a:	bf00      	nop
   1ad3c:	20002b50 	.word	0x20002b50

0001ad40 <net_rx_thread>:

static void net_rx_thread(void)
{
   1ad40:	b510      	push	{r4, lr}
	 * can only be started when RX side is ready to receive packets.
	 * We synchronize the startup of the device so that both RX and TX
	 * are only started fully when both are ready to receive or send
	 * data.
	 */
	net_if_init(&startup_sync);
   1ad42:	4c16      	ldr	r4, [pc, #88]	; (1ad9c <net_rx_thread+0x5c>)
   1ad44:	4620      	mov	r0, r4
   1ad46:	f001 faaf 	bl	1c2a8 <net_if_init>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1ad4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ad4e:	4620      	mov	r0, r4
   1ad50:	f00e fa56 	bl	29200 <_impl_k_sem_take>

	k_sem_take(&startup_sync, K_FOREVER);

	/* This will take the interface up and start everything. */
	net_if_post_init();
   1ad54:	f001 faee 	bl	1c334 <net_if_post_init>
   1ad58:	e010      	b.n	1ad7c <net_rx_thread+0x3c>
	return net_buf_frags_len(pkt->frags);
   1ad5a:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1ad5c:	2200      	movs	r2, #0
   1ad5e:	e002      	b.n	1ad66 <net_rx_thread+0x26>
		bytes += buf->len;
   1ad60:	8999      	ldrh	r1, [r3, #12]
   1ad62:	440a      	add	r2, r1
		buf = buf->frags;
   1ad64:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1ad66:	2b00      	cmp	r3, #0
   1ad68:	d1fa      	bne.n	1ad60 <net_rx_thread+0x20>
	net_stats.bytes.received += bytes;
   1ad6a:	490d      	ldr	r1, [pc, #52]	; (1ada0 <net_rx_thread+0x60>)
   1ad6c:	688b      	ldr	r3, [r1, #8]
   1ad6e:	441a      	add	r2, r3
   1ad70:	608a      	str	r2, [r1, #8]
#endif
		NET_DBG("Received pkt %p len %zu", pkt, pkt_len);

		net_stats_update_bytes_recv(pkt_len);

		processing_data(pkt, false);
   1ad72:	2100      	movs	r1, #0
   1ad74:	f7ff ffa4 	bl	1acc0 <processing_data>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1ad78:	f00e f8d6 	bl	28f28 <_impl_k_yield>
		pkt = k_fifo_get(&rx_queue, K_FOREVER);
   1ad7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ad80:	4808      	ldr	r0, [pc, #32]	; (1ada4 <net_rx_thread+0x64>)
   1ad82:	f00d febb 	bl	28afc <k_queue_get>
	for (i = 0; i < size; i++) {
   1ad86:	2300      	movs	r3, #0
   1ad88:	f240 52db 	movw	r2, #1499	; 0x5db
   1ad8c:	4293      	cmp	r3, r2
   1ad8e:	d8e4      	bhi.n	1ad5a <net_rx_thread+0x1a>
		if ((unsigned char)stack[i] == 0xaa) {
   1ad90:	4a05      	ldr	r2, [pc, #20]	; (1ada8 <net_rx_thread+0x68>)
   1ad92:	5cd2      	ldrb	r2, [r2, r3]
   1ad94:	2aaa      	cmp	r2, #170	; 0xaa
   1ad96:	d1e0      	bne.n	1ad5a <net_rx_thread+0x1a>
	for (i = 0; i < size; i++) {
   1ad98:	3301      	adds	r3, #1
   1ad9a:	e7f5      	b.n	1ad88 <net_rx_thread+0x48>
   1ad9c:	2000d18c 	.word	0x2000d18c
   1ada0:	20002b50 	.word	0x20002b50
   1ada4:	20001bd4 	.word	0x20001bd4
   1ada8:	20004858 	.word	0x20004858

0001adac <init_rx_queue>:
		k_yield();
	}
}

static void init_rx_queue(void)
{
   1adac:	b500      	push	{lr}
   1adae:	b087      	sub	sp, #28
	k_fifo_init(&rx_queue);
   1adb0:	480b      	ldr	r0, [pc, #44]	; (1ade0 <init_rx_queue+0x34>)
   1adb2:	f00d fe48 	bl	28a46 <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1adb6:	2300      	movs	r3, #0
   1adb8:	9305      	str	r3, [sp, #20]
   1adba:	2201      	movs	r2, #1
   1adbc:	9204      	str	r2, [sp, #16]
   1adbe:	f06f 0207 	mvn.w	r2, #7
   1adc2:	9203      	str	r2, [sp, #12]
   1adc4:	9302      	str	r3, [sp, #8]
   1adc6:	9301      	str	r3, [sp, #4]
   1adc8:	9300      	str	r3, [sp, #0]
   1adca:	4b06      	ldr	r3, [pc, #24]	; (1ade4 <init_rx_queue+0x38>)
   1adcc:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1add0:	4905      	ldr	r1, [pc, #20]	; (1ade8 <init_rx_queue+0x3c>)
   1add2:	4806      	ldr	r0, [pc, #24]	; (1adec <init_rx_queue+0x40>)
   1add4:	f00e fc80 	bl	296d8 <_impl_k_thread_create>
	rx_tid = k_thread_create(&rx_thread_data, rx_stack,
				 K_THREAD_STACK_SIZEOF(rx_stack),
				 (k_thread_entry_t)net_rx_thread,
				 NULL, NULL, NULL, K_PRIO_COOP(8),
				 K_ESSENTIAL, K_NO_WAIT);
}
   1add8:	b007      	add	sp, #28
   1adda:	f85d fb04 	ldr.w	pc, [sp], #4
   1adde:	bf00      	nop
   1ade0:	20001bd4 	.word	0x20001bd4
   1ade4:	0001ad41 	.word	0x0001ad41
   1ade8:	20004858 	.word	0x20004858
   1adec:	20001be4 	.word	0x20001be4

0001adf0 <net_init>:

	NET_DBG("Network L2 init done");
}

static int net_init(struct device *unused)
{
   1adf0:	b508      	push	{r3, lr}

	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   1adf2:	f002 ffb2 	bl	1dd5a <net_pkt_init>

	net_context_init();
   1adf6:	f002 faf1 	bl	1d3dc <net_context_init>
	net_icmpv6_init();
   1adfa:	f004 fa0b 	bl	1f214 <net_icmpv6_init>
	net_ipv6_init();
   1adfe:	f006 fe89 	bl	21b14 <net_ipv6_init>
	net_conn_init();
   1ae02:	f00a fb55 	bl	254b0 <net_conn_init>
	net_udp_init();
   1ae06:	f008 fa6b 	bl	232e0 <net_udp_init>
	net_tcp_init();
   1ae0a:	f008 fc4f 	bl	236ac <net_tcp_init>
	net_route_init();
   1ae0e:	f007 ffca 	bl	22da6 <net_route_init>

	l2_init();
	l3_init();

	net_mgmt_event_init();
   1ae12:	f008 f8b3 	bl	22f7c <net_mgmt_event_init>

	init_rx_queue();
   1ae16:	f7ff ffc9 	bl	1adac <init_rx_queue>
		return status;
	}
#endif

	return status;
}
   1ae1a:	2000      	movs	r0, #0
   1ae1c:	bd08      	pop	{r3, pc}
	...

0001ae20 <net_send_data>:
	if (!pkt || !pkt->frags) {
   1ae20:	2800      	cmp	r0, #0
   1ae22:	f000 80bc 	beq.w	1af9e <net_send_data+0x17e>
{
   1ae26:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ae28:	b091      	sub	sp, #68	; 0x44
   1ae2a:	4604      	mov	r4, r0
	if (!pkt || !pkt->frags) {
   1ae2c:	6883      	ldr	r3, [r0, #8]
   1ae2e:	2b00      	cmp	r3, #0
   1ae30:	f000 80b8 	beq.w	1afa4 <net_send_data+0x184>
	return pkt->iface;
   1ae34:	6943      	ldr	r3, [r0, #20]
	if (!net_pkt_iface(pkt)) {
   1ae36:	2b00      	cmp	r3, #0
   1ae38:	f000 80b7 	beq.w	1afaa <net_send_data+0x18a>
	return pkt->family;
   1ae3c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1ae40:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1ae44:	2b0a      	cmp	r3, #10
   1ae46:	d103      	bne.n	1ae50 <net_send_data+0x30>
	net_stats.ipv6.sent++;
   1ae48:	4a59      	ldr	r2, [pc, #356]	; (1afb0 <net_send_data+0x190>)
   1ae4a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1ae4c:	3301      	adds	r3, #1
   1ae4e:	6293      	str	r3, [r2, #40]	; 0x28
   1ae50:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1ae54:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1ae58:	2b0a      	cmp	r3, #10
   1ae5a:	d00b      	beq.n	1ae74 <net_send_data+0x54>
	return 0;
   1ae5c:	2000      	movs	r0, #0
	if (status < 0) {
   1ae5e:	2800      	cmp	r0, #0
   1ae60:	db06      	blt.n	1ae70 <net_send_data+0x50>
	} else if (status > 0) {
   1ae62:	f340 8091 	ble.w	1af88 <net_send_data+0x168>
		processing_data(pkt, true);
   1ae66:	2101      	movs	r1, #1
   1ae68:	4620      	mov	r0, r4
   1ae6a:	f7ff ff29 	bl	1acc0 <processing_data>
		return 0;
   1ae6e:	2000      	movs	r0, #0
}
   1ae70:	b011      	add	sp, #68	; 0x44
   1ae72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return pkt->frags->data;
   1ae74:	68a3      	ldr	r3, [r4, #8]
   1ae76:	689d      	ldr	r5, [r3, #8]
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   1ae78:	3518      	adds	r5, #24
   1ae7a:	f004 fd93 	bl	1f9a4 <net_ipv6_unspecified_address>
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv6_addr_cmp(const struct in6_addr *addr1,
				     const struct in6_addr *addr2)
{
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1ae7e:	2210      	movs	r2, #16
   1ae80:	4601      	mov	r1, r0
   1ae82:	4628      	mov	r0, r5
   1ae84:	f00f f8e8 	bl	2a058 <memcmp>
   1ae88:	2800      	cmp	r0, #0
   1ae8a:	d07a      	beq.n	1af82 <net_send_data+0x162>
   1ae8c:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1ae8e:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1ae90:	f850 3f18 	ldr.w	r3, [r0, #24]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1ae94:	b9ab      	cbnz	r3, 1aec2 <net_send_data+0xa2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1ae96:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1ae98:	2b00      	cmp	r3, #0
   1ae9a:	d141      	bne.n	1af20 <net_send_data+0x100>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1ae9c:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1ae9e:	2b00      	cmp	r3, #0
   1aea0:	d140      	bne.n	1af24 <net_send_data+0x104>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1aea2:	68c2      	ldr	r2, [r0, #12]
   1aea4:	0a13      	lsrs	r3, r2, #8
   1aea6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1aeaa:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1aeae:	0211      	lsls	r1, r2, #8
   1aeb0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1aeb4:	430b      	orrs	r3, r1
   1aeb6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1aeba:	2b01      	cmp	r3, #1
   1aebc:	d034      	beq.n	1af28 <net_send_data+0x108>
   1aebe:	2300      	movs	r3, #0
   1aec0:	e000      	b.n	1aec4 <net_send_data+0xa4>
   1aec2:	2300      	movs	r3, #0
   1aec4:	b393      	cbz	r3, 1af2c <net_send_data+0x10c>
   1aec6:	68a3      	ldr	r3, [r4, #8]
   1aec8:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   1aecc:	ae0c      	add	r6, sp, #48	; 0x30
   1aece:	4675      	mov	r5, lr
   1aed0:	f855 0f08 	ldr.w	r0, [r5, #8]!
   1aed4:	6869      	ldr	r1, [r5, #4]
   1aed6:	68aa      	ldr	r2, [r5, #8]
   1aed8:	68eb      	ldr	r3, [r5, #12]
   1aeda:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1aedc:	ab10      	add	r3, sp, #64	; 0x40
   1aede:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1aee2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1aee6:	af08      	add	r7, sp, #32
   1aee8:	4673      	mov	r3, lr
   1aeea:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1aeee:	6859      	ldr	r1, [r3, #4]
   1aef0:	689a      	ldr	r2, [r3, #8]
   1aef2:	68db      	ldr	r3, [r3, #12]
   1aef4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1aef6:	af08      	add	r7, sp, #32
   1aef8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1aefa:	f8ce 0008 	str.w	r0, [lr, #8]
   1aefe:	6069      	str	r1, [r5, #4]
   1af00:	60aa      	str	r2, [r5, #8]
   1af02:	60eb      	str	r3, [r5, #12]
   1af04:	68a3      	ldr	r3, [r4, #8]
   1af06:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1af08:	ad04      	add	r5, sp, #16
   1af0a:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   1af0e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1af12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1af14:	61b8      	str	r0, [r7, #24]
   1af16:	61f9      	str	r1, [r7, #28]
   1af18:	623a      	str	r2, [r7, #32]
   1af1a:	627b      	str	r3, [r7, #36]	; 0x24
			return 1;
   1af1c:	2001      	movs	r0, #1
   1af1e:	e79e      	b.n	1ae5e <net_send_data+0x3e>
   1af20:	2300      	movs	r3, #0
   1af22:	e7cf      	b.n	1aec4 <net_send_data+0xa4>
   1af24:	2300      	movs	r3, #0
   1af26:	e7cd      	b.n	1aec4 <net_send_data+0xa4>
   1af28:	2301      	movs	r3, #1
   1af2a:	e7cb      	b.n	1aec4 <net_send_data+0xa4>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1af2c:	2100      	movs	r1, #0
   1af2e:	f000 f9c5 	bl	1b2bc <net_if_ipv6_addr_lookup>
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1af32:	2800      	cmp	r0, #0
   1af34:	d1c7      	bne.n	1aec6 <net_send_data+0xa6>
   1af36:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   1af38:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1af3a:	f853 2f08 	ldr.w	r2, [r3, #8]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1af3e:	b99a      	cbnz	r2, 1af68 <net_send_data+0x148>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1af40:	685a      	ldr	r2, [r3, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1af42:	b9aa      	cbnz	r2, 1af70 <net_send_data+0x150>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1af44:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1af46:	b9aa      	cbnz	r2, 1af74 <net_send_data+0x154>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1af48:	68da      	ldr	r2, [r3, #12]
   1af4a:	0a13      	lsrs	r3, r2, #8
   1af4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1af50:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1af54:	0211      	lsls	r1, r2, #8
   1af56:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1af5a:	430b      	orrs	r3, r1
   1af5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1af60:	2b01      	cmp	r3, #1
   1af62:	d009      	beq.n	1af78 <net_send_data+0x158>
   1af64:	2300      	movs	r3, #0
   1af66:	e000      	b.n	1af6a <net_send_data+0x14a>
   1af68:	2300      	movs	r3, #0
   1af6a:	b93b      	cbnz	r3, 1af7c <net_send_data+0x15c>
	return 0;
   1af6c:	2000      	movs	r0, #0
   1af6e:	e776      	b.n	1ae5e <net_send_data+0x3e>
   1af70:	2300      	movs	r3, #0
   1af72:	e7fa      	b.n	1af6a <net_send_data+0x14a>
   1af74:	2300      	movs	r3, #0
   1af76:	e7f8      	b.n	1af6a <net_send_data+0x14a>
   1af78:	2301      	movs	r3, #1
   1af7a:	e7f6      	b.n	1af6a <net_send_data+0x14a>
			return -EADDRNOTAVAIL;
   1af7c:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1af80:	e76d      	b.n	1ae5e <net_send_data+0x3e>
			return -EADDRNOTAVAIL;
   1af82:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1af86:	e76a      	b.n	1ae5e <net_send_data+0x3e>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   1af88:	4621      	mov	r1, r4
   1af8a:	6960      	ldr	r0, [r4, #20]
   1af8c:	f000 ffe0 	bl	1bf50 <net_if_send_data>
   1af90:	2802      	cmp	r0, #2
   1af92:	d001      	beq.n	1af98 <net_send_data+0x178>
	return 0;
   1af94:	2000      	movs	r0, #0
   1af96:	e76b      	b.n	1ae70 <net_send_data+0x50>
		return -EIO;
   1af98:	f06f 0004 	mvn.w	r0, #4
   1af9c:	e768      	b.n	1ae70 <net_send_data+0x50>
		return -ENODATA;
   1af9e:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1afa2:	4770      	bx	lr
   1afa4:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1afa8:	e762      	b.n	1ae70 <net_send_data+0x50>
		return -EINVAL;
   1afaa:	f06f 0015 	mvn.w	r0, #21
   1afae:	e75f      	b.n	1ae70 <net_send_data+0x50>
   1afb0:	20002b50 	.word	0x20002b50

0001afb4 <net_recv_data>:
{
   1afb4:	b508      	push	{r3, lr}
	if (!pkt->frags) {
   1afb6:	688b      	ldr	r3, [r1, #8]
   1afb8:	b19b      	cbz	r3, 1afe2 <net_recv_data+0x2e>
   1afba:	f3bf 8f5b 	dmb	ish
   1afbe:	68c3      	ldr	r3, [r0, #12]
   1afc0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1afc4:	f013 0f01 	tst.w	r3, #1
   1afc8:	d00e      	beq.n	1afe8 <net_recv_data+0x34>
	pkt->iface = iface;
   1afca:	6148      	str	r0, [r1, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1afcc:	7d43      	ldrb	r3, [r0, #21]
   1afce:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1afd2:	7d43      	ldrb	r3, [r0, #21]
   1afd4:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
	k_fifo_put(&rx_queue, pkt);
   1afd8:	4805      	ldr	r0, [pc, #20]	; (1aff0 <net_recv_data+0x3c>)
   1afda:	f00d fd67 	bl	28aac <k_queue_append>
	return 0;
   1afde:	2000      	movs	r0, #0
   1afe0:	bd08      	pop	{r3, pc}
		return -ENODATA;
   1afe2:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1afe6:	bd08      	pop	{r3, pc}
		return -ENETDOWN;
   1afe8:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1afec:	bd08      	pop	{r3, pc}
   1afee:	bf00      	nop
   1aff0:	20001bd4 	.word	0x20001bd4

0001aff4 <ipv6_addr_expired>:
						  lifetime);

	NET_DBG("IPv6 address %s is deprecated",
		net_sprint_ipv6_addr(&ifaddr->address.in6_addr));

	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   1aff4:	2302      	movs	r3, #2
   1aff6:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
   1affa:	4770      	bx	lr

0001affc <prefix_lf_timeout>:
		CONTAINER_OF(work, struct net_if_ipv6_prefix, lifetime);

	NET_DBG("Prefix %s/%d expired",
		net_sprint_ipv6_addr(&prefix->prefix), prefix->len);

	prefix->is_used = false;
   1affc:	2300      	movs	r3, #0
   1affe:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   1b002:	4770      	bx	lr

0001b004 <ipv6_router_expired>:
						    lifetime);

	NET_DBG("IPv6 router %s is expired",
		net_sprint_ipv6_addr(&router->address.in6_addr));

	router->is_used = false;
   1b004:	2300      	movs	r3, #0
   1b006:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1b00a:	4770      	bx	lr

0001b00c <ipv6_addr_find>:
{
   1b00c:	b570      	push	{r4, r5, r6, lr}
   1b00e:	4605      	mov	r5, r0
   1b010:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b012:	2400      	movs	r4, #0
   1b014:	e000      	b.n	1b018 <ipv6_addr_find+0xc>
   1b016:	3401      	adds	r4, #1
   1b018:	2c02      	cmp	r4, #2
   1b01a:	dc19      	bgt.n	1b050 <ipv6_addr_find+0x44>
		if (!iface->ipv6.unicast[i].is_used) {
   1b01c:	236c      	movs	r3, #108	; 0x6c
   1b01e:	fb03 5304 	mla	r3, r3, r4, r5
   1b022:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b026:	2b00      	cmp	r3, #0
   1b028:	d0f5      	beq.n	1b016 <ipv6_addr_find+0xa>
				&iface->ipv6.unicast[i].address.in6_addr)) {
   1b02a:	216c      	movs	r1, #108	; 0x6c
   1b02c:	fb01 f104 	mul.w	r1, r1, r4
   1b030:	3120      	adds	r1, #32
   1b032:	4429      	add	r1, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b034:	2210      	movs	r2, #16
   1b036:	4411      	add	r1, r2
   1b038:	4630      	mov	r0, r6
   1b03a:	f00f f80d 	bl	2a058 <memcmp>
		if (net_ipv6_addr_cmp(addr,
   1b03e:	2800      	cmp	r0, #0
   1b040:	d1e9      	bne.n	1b016 <ipv6_addr_find+0xa>
			return &iface->ipv6.unicast[i];
   1b042:	206c      	movs	r0, #108	; 0x6c
   1b044:	fb00 f004 	mul.w	r0, r0, r4
   1b048:	3020      	adds	r0, #32
   1b04a:	4428      	add	r0, r5
   1b04c:	300c      	adds	r0, #12
   1b04e:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1b050:	2000      	movs	r0, #0
}
   1b052:	bd70      	pop	{r4, r5, r6, pc}

0001b054 <ipv6_prefix_find>:
{
   1b054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b056:	4605      	mov	r5, r0
   1b058:	460e      	mov	r6, r1
   1b05a:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b05c:	2400      	movs	r4, #0
   1b05e:	e000      	b.n	1b062 <ipv6_prefix_find+0xe>
   1b060:	3401      	adds	r4, #1
   1b062:	2c01      	cmp	r4, #1
   1b064:	dc21      	bgt.n	1b0aa <ipv6_prefix_find+0x56>
		if (!iface->ipv6.unicast[i].is_used) {
   1b066:	236c      	movs	r3, #108	; 0x6c
   1b068:	fb03 5304 	mla	r3, r3, r4, r5
   1b06c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b070:	2b00      	cmp	r3, #0
   1b072:	d0f5      	beq.n	1b060 <ipv6_prefix_find+0xc>
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1b074:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1b078:	0099      	lsls	r1, r3, #2
   1b07a:	f501 7100 	add.w	r1, r1, #512	; 0x200
   1b07e:	4429      	add	r1, r5
   1b080:	2210      	movs	r2, #16
   1b082:	4411      	add	r1, r2
   1b084:	4630      	mov	r0, r6
   1b086:	f00e ffe7 	bl	2a058 <memcmp>
   1b08a:	2800      	cmp	r0, #0
   1b08c:	d1e8      	bne.n	1b060 <ipv6_prefix_find+0xc>
		    prefix_len == iface->ipv6.prefix[i].len) {
   1b08e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b092:	0093      	lsls	r3, r2, #2
   1b094:	461a      	mov	r2, r3
   1b096:	442b      	add	r3, r5
   1b098:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1b09c:	42bb      	cmp	r3, r7
   1b09e:	d1df      	bne.n	1b060 <ipv6_prefix_find+0xc>
			return &iface->ipv6.prefix[i];
   1b0a0:	f502 70ec 	add.w	r0, r2, #472	; 0x1d8
   1b0a4:	4428      	add	r0, r5
   1b0a6:	3010      	adds	r0, #16
   1b0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return NULL;
   1b0aa:	2000      	movs	r0, #0
}
   1b0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001b0b0 <net_if_ipv6_start_dad>:
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   1b0b0:	2300      	movs	r3, #0
   1b0b2:	f881 3065 	strb.w	r3, [r1, #101]	; 0x65
   1b0b6:	f3bf 8f5b 	dmb	ish
   1b0ba:	68c3      	ldr	r3, [r0, #12]
   1b0bc:	f3bf 8f5b 	dmb	ish
	if (net_if_is_up(iface)) {
   1b0c0:	f013 0f01 	tst.w	r3, #1
   1b0c4:	d100      	bne.n	1b0c8 <net_if_ipv6_start_dad+0x18>
   1b0c6:	4770      	bx	lr
{
   1b0c8:	b510      	push	{r4, lr}
   1b0ca:	460c      	mov	r4, r1
		ifaddr->dad_count = 1;
   1b0cc:	2301      	movs	r3, #1
   1b0ce:	f881 3066 	strb.w	r3, [r1, #102]	; 0x66
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   1b0d2:	f006 f969 	bl	213a8 <net_ipv6_start_dad>
   1b0d6:	b100      	cbz	r0, 1b0da <net_if_ipv6_start_dad+0x2a>
   1b0d8:	bd10      	pop	{r4, pc}
   1b0da:	2264      	movs	r2, #100	; 0x64
   1b0dc:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   1b0e0:	4801      	ldr	r0, [pc, #4]	; (1b0e8 <net_if_ipv6_start_dad+0x38>)
   1b0e2:	f00e fec3 	bl	29e6c <k_delayed_work_submit_to_queue>
}
   1b0e6:	e7f7      	b.n	1b0d8 <net_if_ipv6_start_dad+0x28>
   1b0e8:	20002c70 	.word	0x20002c70

0001b0ec <net_if_ipv6_prefix_init>:
{
   1b0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b0ee:	b085      	sub	sp, #20
   1b0f0:	4605      	mov	r5, r0
   1b0f2:	460e      	mov	r6, r1
   1b0f4:	461f      	mov	r7, r3
	prefix->is_used = true;
   1b0f6:	2301      	movs	r3, #1
   1b0f8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
	prefix->len = len;
   1b0fc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	net_ipaddr_copy(&prefix->prefix, addr);
   1b100:	466c      	mov	r4, sp
   1b102:	6808      	ldr	r0, [r1, #0]
   1b104:	6849      	ldr	r1, [r1, #4]
   1b106:	68b2      	ldr	r2, [r6, #8]
   1b108:	68f3      	ldr	r3, [r6, #12]
   1b10a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b10c:	466c      	mov	r4, sp
   1b10e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1b110:	62a8      	str	r0, [r5, #40]	; 0x28
   1b112:	62e9      	str	r1, [r5, #44]	; 0x2c
   1b114:	632a      	str	r2, [r5, #48]	; 0x30
   1b116:	636b      	str	r3, [r5, #52]	; 0x34
	k_delayed_work_init(&prefix->lifetime, prefix_lf_timeout);
   1b118:	4907      	ldr	r1, [pc, #28]	; (1b138 <net_if_ipv6_prefix_init+0x4c>)
   1b11a:	4628      	mov	r0, r5
   1b11c:	f00e fe2e 	bl	29d7c <k_delayed_work_init>
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   1b120:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1b124:	d004      	beq.n	1b130 <net_if_ipv6_prefix_init+0x44>
		prefix->is_infinite = false;
   1b126:	2300      	movs	r3, #0
   1b128:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
}
   1b12c:	b005      	add	sp, #20
   1b12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		prefix->is_infinite = true;
   1b130:	2301      	movs	r3, #1
   1b132:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   1b136:	e7f9      	b.n	1b12c <net_if_ipv6_prefix_init+0x40>
   1b138:	0001affd 	.word	0x0001affd

0001b13c <join_mcast_allnodes>:
{
   1b13c:	b500      	push	{lr}
   1b13e:	b085      	sub	sp, #20
					u16_t addr0, u16_t addr1,
					u16_t addr2, u16_t addr3,
					u16_t addr4, u16_t addr5,
					u16_t addr6, u16_t addr7)
{
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1b140:	f240 23ff 	movw	r3, #767	; 0x2ff
   1b144:	f8ad 3000 	strh.w	r3, [sp]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1b148:	2300      	movs	r3, #0
   1b14a:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1b14e:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1b152:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1b156:	f8ad 3008 	strh.w	r3, [sp, #8]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1b15a:	f8ad 300a 	strh.w	r3, [sp, #10]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1b15e:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1b162:	f44f 7380 	mov.w	r3, #256	; 0x100
   1b166:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1b16a:	4669      	mov	r1, sp
   1b16c:	f006 faa4 	bl	216b8 <net_ipv6_mld_join>
}
   1b170:	b005      	add	sp, #20
   1b172:	f85d fb04 	ldr.w	pc, [sp], #4

0001b176 <join_mcast_solicit_node>:
{
   1b176:	b500      	push	{lr}
   1b178:	b085      	sub	sp, #20
	dst->s6_addr[0]   = 0xFF;
   1b17a:	22ff      	movs	r2, #255	; 0xff
   1b17c:	f88d 2000 	strb.w	r2, [sp]
	dst->s6_addr[1]   = 0x02;
   1b180:	2302      	movs	r3, #2
   1b182:	f88d 3001 	strb.w	r3, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1b186:	2300      	movs	r3, #0
   1b188:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1b18c:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1b190:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1b194:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0;
   1b198:	f88d 300a 	strb.w	r3, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1b19c:	2301      	movs	r3, #1
   1b19e:	f88d 300b 	strb.w	r3, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1b1a2:	f88d 200c 	strb.w	r2, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1b1a6:	7b4b      	ldrb	r3, [r1, #13]
   1b1a8:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1b1ac:	89cb      	ldrh	r3, [r1, #14]
   1b1ae:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1b1b2:	4669      	mov	r1, sp
   1b1b4:	f006 fa80 	bl	216b8 <net_ipv6_mld_join>
}
   1b1b8:	b005      	add	sp, #20
   1b1ba:	f85d fb04 	ldr.w	pc, [sp], #4

0001b1be <leave_mcast_all>:
{
   1b1be:	b538      	push	{r3, r4, r5, lr}
   1b1c0:	4605      	mov	r5, r0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b1c2:	2400      	movs	r4, #0
   1b1c4:	e000      	b.n	1b1c8 <leave_mcast_all+0xa>
   1b1c6:	3401      	adds	r4, #1
   1b1c8:	2c04      	cmp	r4, #4
   1b1ca:	dc1a      	bgt.n	1b202 <leave_mcast_all+0x44>
		if (!iface->ipv6.mcast[i].is_used ||
   1b1cc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b1d0:	00d3      	lsls	r3, r2, #3
   1b1d2:	442b      	add	r3, r5
   1b1d4:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b1d8:	f013 0f01 	tst.w	r3, #1
   1b1dc:	d0f3      	beq.n	1b1c6 <leave_mcast_all+0x8>
		    !iface->ipv6.mcast[i].is_joined) {
   1b1de:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b1e2:	00d3      	lsls	r3, r2, #3
   1b1e4:	461a      	mov	r2, r3
   1b1e6:	442b      	add	r3, r5
   1b1e8:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   1b1ec:	f013 0f02 	tst.w	r3, #2
   1b1f0:	d0e9      	beq.n	1b1c6 <leave_mcast_all+0x8>
				   &iface->ipv6.mcast[i].address.in6_addr);
   1b1f2:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1b1f6:	4429      	add	r1, r5
		net_ipv6_mld_leave(iface,
   1b1f8:	3118      	adds	r1, #24
   1b1fa:	4628      	mov	r0, r5
   1b1fc:	f006 fa96 	bl	2172c <net_ipv6_mld_leave>
   1b200:	e7e1      	b.n	1b1c6 <leave_mcast_all+0x8>
}
   1b202:	bd38      	pop	{r3, r4, r5, pc}

0001b204 <net_if_prepare_events>:
{
   1b204:	b570      	push	{r4, r5, r6, lr}
	int ev_count = 0;
   1b206:	2400      	movs	r4, #0
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b208:	4d0a      	ldr	r5, [pc, #40]	; (1b234 <net_if_prepare_events+0x30>)
   1b20a:	e00d      	b.n	1b228 <net_if_prepare_events+0x24>
		k_poll_event_init(&__net_if_event_start[ev_count],
   1b20c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1b210:	0098      	lsls	r0, r3, #2
   1b212:	f105 0318 	add.w	r3, r5, #24
   1b216:	2200      	movs	r2, #0
   1b218:	2104      	movs	r1, #4
   1b21a:	4e07      	ldr	r6, [pc, #28]	; (1b238 <net_if_prepare_events+0x34>)
   1b21c:	4430      	add	r0, r6
   1b21e:	f00d f927 	bl	28470 <k_poll_event_init>
		ev_count++;
   1b222:	3401      	adds	r4, #1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b224:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1b228:	4b04      	ldr	r3, [pc, #16]	; (1b23c <net_if_prepare_events+0x38>)
   1b22a:	429d      	cmp	r5, r3
   1b22c:	d1ee      	bne.n	1b20c <net_if_prepare_events+0x8>
}
   1b22e:	4620      	mov	r0, r4
   1b230:	bd70      	pop	{r4, r5, r6, pc}
   1b232:	bf00      	nop
   1b234:	2000d2c0 	.word	0x2000d2c0
   1b238:	2000d560 	.word	0x2000d560
   1b23c:	2000d560 	.word	0x2000d560

0001b240 <net_if_lookup_by_dev>:
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b240:	4b06      	ldr	r3, [pc, #24]	; (1b25c <net_if_lookup_by_dev+0x1c>)
   1b242:	4a07      	ldr	r2, [pc, #28]	; (1b260 <net_if_lookup_by_dev+0x20>)
   1b244:	4293      	cmp	r3, r2
   1b246:	d005      	beq.n	1b254 <net_if_lookup_by_dev+0x14>
		if (iface->dev == dev) {
   1b248:	681a      	ldr	r2, [r3, #0]
   1b24a:	4282      	cmp	r2, r0
   1b24c:	d003      	beq.n	1b256 <net_if_lookup_by_dev+0x16>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b24e:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
   1b252:	e7f6      	b.n	1b242 <net_if_lookup_by_dev+0x2>
	return NULL;
   1b254:	2300      	movs	r3, #0
}
   1b256:	4618      	mov	r0, r3
   1b258:	4770      	bx	lr
   1b25a:	bf00      	nop
   1b25c:	2000d2c0 	.word	0x2000d2c0
   1b260:	2000d560 	.word	0x2000d560

0001b264 <net_if_get_default>:
	if (__net_if_start == __net_if_end) {
   1b264:	4b03      	ldr	r3, [pc, #12]	; (1b274 <net_if_get_default+0x10>)
   1b266:	4a04      	ldr	r2, [pc, #16]	; (1b278 <net_if_get_default+0x14>)
   1b268:	429a      	cmp	r2, r3
   1b26a:	d001      	beq.n	1b270 <net_if_get_default+0xc>
	return __net_if_start;
   1b26c:	4802      	ldr	r0, [pc, #8]	; (1b278 <net_if_get_default+0x14>)
}
   1b26e:	4770      	bx	lr
		return NULL;
   1b270:	2000      	movs	r0, #0
   1b272:	4770      	bx	lr
   1b274:	2000d560 	.word	0x2000d560
   1b278:	2000d2c0 	.word	0x2000d2c0

0001b27c <net_if_start_rs>:
{
   1b27c:	b510      	push	{r4, lr}
   1b27e:	4604      	mov	r4, r0
	if (!net_ipv6_start_rs(iface)) {
   1b280:	f006 fa16 	bl	216b0 <net_ipv6_start_rs>
   1b284:	b100      	cbz	r0, 1b288 <net_if_start_rs+0xc>
   1b286:	bd10      	pop	{r4, pc}
   1b288:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b28c:	f504 7118 	add.w	r1, r4, #608	; 0x260
   1b290:	4801      	ldr	r0, [pc, #4]	; (1b298 <net_if_start_rs+0x1c>)
   1b292:	f00e fdeb 	bl	29e6c <k_delayed_work_submit_to_queue>
}
   1b296:	e7f6      	b.n	1b286 <net_if_start_rs+0xa>
   1b298:	20002c70 	.word	0x20002c70

0001b29c <rs_timeout>:
{
   1b29c:	b508      	push	{r3, lr}
	struct net_if *iface = CONTAINER_OF(work, struct net_if, ipv6.rs_timer);
   1b29e:	f5a0 7018 	sub.w	r0, r0, #608	; 0x260
	iface->ipv6.rs_count++;
   1b2a2:	f890 3296 	ldrb.w	r3, [r0, #662]	; 0x296
   1b2a6:	3301      	adds	r3, #1
   1b2a8:	b2db      	uxtb	r3, r3
   1b2aa:	f880 3296 	strb.w	r3, [r0, #662]	; 0x296
	if (iface->ipv6.rs_count < RS_COUNT) {
   1b2ae:	2b02      	cmp	r3, #2
   1b2b0:	d900      	bls.n	1b2b4 <rs_timeout+0x18>
   1b2b2:	bd08      	pop	{r3, pc}
		net_if_start_rs(iface);
   1b2b4:	f7ff ffe2 	bl	1b27c <net_if_start_rs>
}
   1b2b8:	e7fb      	b.n	1b2b2 <rs_timeout+0x16>
	...

0001b2bc <net_if_ipv6_addr_lookup>:
{
   1b2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b2c0:	4607      	mov	r7, r0
   1b2c2:	4688      	mov	r8, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b2c4:	4d1b      	ldr	r5, [pc, #108]	; (1b334 <net_if_ipv6_addr_lookup+0x78>)
   1b2c6:	e02d      	b.n	1b324 <net_if_ipv6_addr_lookup+0x68>
			if (net_is_ipv6_prefix(addr->s6_addr,
   1b2c8:	b9ee      	cbnz	r6, 1b306 <net_if_ipv6_addr_lookup+0x4a>
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b2ca:	3401      	adds	r4, #1
   1b2cc:	2c02      	cmp	r4, #2
   1b2ce:	dc27      	bgt.n	1b320 <net_if_ipv6_addr_lookup+0x64>
			if (!iface->ipv6.unicast[i].is_used ||
   1b2d0:	236c      	movs	r3, #108	; 0x6c
   1b2d2:	fb03 5304 	mla	r3, r3, r4, r5
   1b2d6:	f893 6094 	ldrb.w	r6, [r3, #148]	; 0x94
   1b2da:	2e00      	cmp	r6, #0
   1b2dc:	d0f5      	beq.n	1b2ca <net_if_ipv6_addr_lookup+0xe>
			    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1b2de:	236c      	movs	r3, #108	; 0x6c
   1b2e0:	fb03 5304 	mla	r3, r3, r4, r5
   1b2e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
			if (!iface->ipv6.unicast[i].is_used ||
   1b2e6:	2b0a      	cmp	r3, #10
   1b2e8:	d1ef      	bne.n	1b2ca <net_if_ipv6_addr_lookup+0xe>
				iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   1b2ea:	216c      	movs	r1, #108	; 0x6c
   1b2ec:	fb01 f104 	mul.w	r1, r1, r4
   1b2f0:	3120      	adds	r1, #32
   1b2f2:	4429      	add	r1, r5
	if (memcmp(addr1, addr2, bytes)) {
   1b2f4:	2210      	movs	r2, #16
   1b2f6:	4411      	add	r1, r2
   1b2f8:	4638      	mov	r0, r7
   1b2fa:	f00e fead 	bl	2a058 <memcmp>
   1b2fe:	2800      	cmp	r0, #0
   1b300:	d0e2      	beq.n	1b2c8 <net_if_ipv6_addr_lookup+0xc>
		return false;
   1b302:	2600      	movs	r6, #0
   1b304:	e7e0      	b.n	1b2c8 <net_if_ipv6_addr_lookup+0xc>
				if (ret) {
   1b306:	f1b8 0f00 	cmp.w	r8, #0
   1b30a:	d001      	beq.n	1b310 <net_if_ipv6_addr_lookup+0x54>
					*ret = iface;
   1b30c:	f8c8 5000 	str.w	r5, [r8]
				return &iface->ipv6.unicast[i];
   1b310:	206c      	movs	r0, #108	; 0x6c
   1b312:	fb00 f004 	mul.w	r0, r0, r4
   1b316:	3020      	adds	r0, #32
   1b318:	4428      	add	r0, r5
   1b31a:	300c      	adds	r0, #12
   1b31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b320:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1b324:	4b04      	ldr	r3, [pc, #16]	; (1b338 <net_if_ipv6_addr_lookup+0x7c>)
   1b326:	429d      	cmp	r5, r3
   1b328:	d001      	beq.n	1b32e <net_if_ipv6_addr_lookup+0x72>
   1b32a:	2400      	movs	r4, #0
   1b32c:	e7ce      	b.n	1b2cc <net_if_ipv6_addr_lookup+0x10>
	return NULL;
   1b32e:	2000      	movs	r0, #0
}
   1b330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b334:	2000d2c0 	.word	0x2000d2c0
   1b338:	2000d560 	.word	0x2000d560

0001b33c <dad_timeout>:
{
   1b33c:	b530      	push	{r4, r5, lr}
   1b33e:	b083      	sub	sp, #12
	struct net_if_addr *tmp, *ifaddr = CONTAINER_OF(work,
   1b340:	f1a0 053c 	sub.w	r5, r0, #60	; 0x3c
	struct net_if *iface = NULL;
   1b344:	a902      	add	r1, sp, #8
   1b346:	2300      	movs	r3, #0
   1b348:	f841 3d04 	str.w	r3, [r1, #-4]!
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   1b34c:	2301      	movs	r3, #1
   1b34e:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   1b352:	f1a0 0438 	sub.w	r4, r0, #56	; 0x38
   1b356:	4620      	mov	r0, r4
   1b358:	f7ff ffb0 	bl	1b2bc <net_if_ipv6_addr_lookup>
	if (tmp == ifaddr) {
   1b35c:	4285      	cmp	r5, r0
   1b35e:	d001      	beq.n	1b364 <dad_timeout+0x28>
}
   1b360:	b003      	add	sp, #12
   1b362:	bd30      	pop	{r4, r5, pc}
void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length);

static inline void net_mgmt_event_notify(u32_t mgmt_event, struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
   1b364:	2300      	movs	r3, #0
   1b366:	461a      	mov	r2, r3
   1b368:	9901      	ldr	r1, [sp, #4]
   1b36a:	4807      	ldr	r0, [pc, #28]	; (1b388 <dad_timeout+0x4c>)
   1b36c:	f007 fdcc 	bl	22f08 <net_mgmt_event_notify_with_info>
		net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   1b370:	4621      	mov	r1, r4
   1b372:	9801      	ldr	r0, [sp, #4]
   1b374:	f004 faf6 	bl	1f964 <net_ipv6_nbr_rm>
		join_mcast_allnodes(iface);
   1b378:	9801      	ldr	r0, [sp, #4]
   1b37a:	f7ff fedf 	bl	1b13c <join_mcast_allnodes>
		join_mcast_solicit_node(iface, &ifaddr->address.in6_addr);
   1b37e:	4621      	mov	r1, r4
   1b380:	9801      	ldr	r0, [sp, #4]
   1b382:	f7ff fef8 	bl	1b176 <join_mcast_solicit_node>
}
   1b386:	e7eb      	b.n	1b360 <dad_timeout+0x24>
   1b388:	f060000d 	.word	0xf060000d

0001b38c <net_if_ipv6_addr_update_lifetime>:
{
   1b38c:	b508      	push	{r3, lr}
   1b38e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b392:	fb02 f201 	mul.w	r2, r2, r1
   1b396:	f100 0114 	add.w	r1, r0, #20
   1b39a:	4802      	ldr	r0, [pc, #8]	; (1b3a4 <net_if_ipv6_addr_update_lifetime+0x18>)
   1b39c:	f00e fd66 	bl	29e6c <k_delayed_work_submit_to_queue>
   1b3a0:	bd08      	pop	{r3, pc}
   1b3a2:	bf00      	nop
   1b3a4:	20002c70 	.word	0x20002c70

0001b3a8 <net_if_ipv6_addr_add>:
{
   1b3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b3ac:	b084      	sub	sp, #16
   1b3ae:	4605      	mov	r5, r0
   1b3b0:	460e      	mov	r6, r1
   1b3b2:	4690      	mov	r8, r2
   1b3b4:	461f      	mov	r7, r3
	ifaddr = ipv6_addr_find(iface, addr);
   1b3b6:	f7ff fe29 	bl	1b00c <ipv6_addr_find>
	if (ifaddr) {
   1b3ba:	4604      	mov	r4, r0
   1b3bc:	b118      	cbz	r0, 1b3c6 <net_if_ipv6_addr_add+0x1e>
}
   1b3be:	4620      	mov	r0, r4
   1b3c0:	b004      	add	sp, #16
   1b3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b3c6:	2300      	movs	r3, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b3c8:	2b02      	cmp	r3, #2
   1b3ca:	dcf8      	bgt.n	1b3be <net_if_ipv6_addr_add+0x16>
		if (iface->ipv6.unicast[i].is_used) {
   1b3cc:	226c      	movs	r2, #108	; 0x6c
   1b3ce:	fb02 5203 	mla	r2, r2, r3, r5
   1b3d2:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1b3d6:	b10a      	cbz	r2, 1b3dc <net_if_ipv6_addr_add+0x34>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b3d8:	3301      	adds	r3, #1
   1b3da:	e7f5      	b.n	1b3c8 <net_if_ipv6_addr_add+0x20>
		net_if_addr_init(&iface->ipv6.unicast[i], addr, addr_type,
   1b3dc:	f04f 0e6c 	mov.w	lr, #108	; 0x6c
   1b3e0:	fb0e fe03 	mul.w	lr, lr, r3
   1b3e4:	f10e 0e20 	add.w	lr, lr, #32
   1b3e8:	44ae      	add	lr, r5
   1b3ea:	f10e 040c 	add.w	r4, lr, #12
	ifaddr->is_used = true;
   1b3ee:	2301      	movs	r3, #1
   1b3f0:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	ifaddr->address.family = AF_INET6;
   1b3f4:	230a      	movs	r3, #10
   1b3f6:	f8ae 300c 	strh.w	r3, [lr, #12]
	ifaddr->addr_type = addr_type;
   1b3fa:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1b3fe:	46ec      	mov	ip, sp
   1b400:	6830      	ldr	r0, [r6, #0]
   1b402:	6871      	ldr	r1, [r6, #4]
   1b404:	68b2      	ldr	r2, [r6, #8]
   1b406:	68f3      	ldr	r3, [r6, #12]
   1b408:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1b40c:	466e      	mov	r6, sp
   1b40e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1b410:	f8ce 0010 	str.w	r0, [lr, #16]
   1b414:	f8ce 1014 	str.w	r1, [lr, #20]
   1b418:	f8ce 2018 	str.w	r2, [lr, #24]
   1b41c:	f8ce 301c 	str.w	r3, [lr, #28]
	k_delayed_work_init(&ifaddr->dad_timer, dad_timeout);
   1b420:	4910      	ldr	r1, [pc, #64]	; (1b464 <net_if_ipv6_addr_add+0xbc>)
   1b422:	f10e 0048 	add.w	r0, lr, #72	; 0x48
   1b426:	f00e fca9 	bl	29d7c <k_delayed_work_init>
	if (vlifetime) {
   1b42a:	b96f      	cbnz	r7, 1b448 <net_if_ipv6_addr_add+0xa0>
		ifaddr->is_infinite = true;
   1b42c:	2301      	movs	r3, #1
   1b42e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1b432:	4621      	mov	r1, r4
   1b434:	4628      	mov	r0, r5
   1b436:	f7ff fe3b 	bl	1b0b0 <net_if_ipv6_start_dad>
   1b43a:	2300      	movs	r3, #0
   1b43c:	461a      	mov	r2, r3
   1b43e:	4629      	mov	r1, r5
   1b440:	4809      	ldr	r0, [pc, #36]	; (1b468 <net_if_ipv6_addr_add+0xc0>)
   1b442:	f007 fd61 	bl	22f08 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.unicast[i];
   1b446:	e7ba      	b.n	1b3be <net_if_ipv6_addr_add+0x16>
		ifaddr->is_infinite = false;
   1b448:	2300      	movs	r3, #0
   1b44a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		k_delayed_work_init(&ifaddr->lifetime, ipv6_addr_expired);
   1b44e:	4907      	ldr	r1, [pc, #28]	; (1b46c <net_if_ipv6_addr_add+0xc4>)
   1b450:	f104 0014 	add.w	r0, r4, #20
   1b454:	f00e fc92 	bl	29d7c <k_delayed_work_init>
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   1b458:	4639      	mov	r1, r7
   1b45a:	4620      	mov	r0, r4
   1b45c:	f7ff ff96 	bl	1b38c <net_if_ipv6_addr_update_lifetime>
   1b460:	e7e7      	b.n	1b432 <net_if_ipv6_addr_add+0x8a>
   1b462:	bf00      	nop
   1b464:	0001b33d 	.word	0x0001b33d
   1b468:	f0600001 	.word	0xf0600001
   1b46c:	0001aff5 	.word	0x0001aff5

0001b470 <net_if_start_dad>:
{
   1b470:	b570      	push	{r4, r5, r6, lr}
   1b472:	b084      	sub	sp, #16
   1b474:	4605      	mov	r5, r0
	struct in6_addr addr = { };
   1b476:	2300      	movs	r3, #0
   1b478:	9302      	str	r3, [sp, #8]
   1b47a:	9303      	str	r3, [sp, #12]
	net_ipv6_addr_create_iid(&addr, &iface->link_addr);
   1b47c:	f100 0410 	add.w	r4, r0, #16
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	addr->s6_addr[0] = 0xfe;
   1b480:	22fe      	movs	r2, #254	; 0xfe
   1b482:	f88d 2000 	strb.w	r2, [sp]
	addr->s6_addr[1] = 0x80;
   1b486:	2280      	movs	r2, #128	; 0x80
   1b488:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1b48c:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1b490:	9301      	str	r3, [sp, #4]

	switch (lladdr->len) {
   1b492:	7922      	ldrb	r2, [r4, #4]
   1b494:	2a06      	cmp	r2, #6
   1b496:	d020      	beq.n	1b4da <net_if_start_dad+0x6a>
   1b498:	2a08      	cmp	r2, #8
   1b49a:	d044      	beq.n	1b526 <net_if_start_dad+0xb6>
   1b49c:	2a02      	cmp	r2, #2
   1b49e:	d008      	beq.n	1b4b2 <net_if_start_dad+0x42>
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   1b4a0:	2300      	movs	r3, #0
   1b4a2:	2201      	movs	r2, #1
   1b4a4:	4669      	mov	r1, sp
   1b4a6:	4628      	mov	r0, r5
   1b4a8:	f7ff ff7e 	bl	1b3a8 <net_if_ipv6_addr_add>
   1b4ac:	4606      	mov	r6, r0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b4ae:	2400      	movs	r4, #0
   1b4b0:	e045      	b.n	1b53e <net_if_start_dad+0xce>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154) {
   1b4b2:	7963      	ldrb	r3, [r4, #5]
   1b4b4:	2b01      	cmp	r3, #1
   1b4b6:	d1f3      	bne.n	1b4a0 <net_if_start_dad+0x30>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   1b4b8:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   1b4ba:	22ff      	movs	r2, #255	; 0xff
   1b4bc:	f88d 200b 	strb.w	r2, [sp, #11]
			addr->s6_addr[12] = 0xfe;
   1b4c0:	22fe      	movs	r2, #254	; 0xfe
   1b4c2:	f88d 200c 	strb.w	r2, [sp, #12]
			addr->s6_addr[13] = 0;
   1b4c6:	f88d 300d 	strb.w	r3, [sp, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   1b4ca:	6903      	ldr	r3, [r0, #16]
   1b4cc:	781a      	ldrb	r2, [r3, #0]
   1b4ce:	f88d 200e 	strb.w	r2, [sp, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   1b4d2:	785b      	ldrb	r3, [r3, #1]
   1b4d4:	f88d 300f 	strb.w	r3, [sp, #15]
   1b4d8:	e7e2      	b.n	1b4a0 <net_if_start_dad+0x30>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1b4da:	2203      	movs	r2, #3
   1b4dc:	6901      	ldr	r1, [r0, #16]
   1b4de:	a802      	add	r0, sp, #8
   1b4e0:	f7e4 feee 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1b4e4:	23ff      	movs	r3, #255	; 0xff
   1b4e6:	f88d 300b 	strb.w	r3, [sp, #11]
		addr->s6_addr[12] = 0xfe;
   1b4ea:	23fe      	movs	r3, #254	; 0xfe
   1b4ec:	f88d 300c 	strb.w	r3, [sp, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1b4f0:	6929      	ldr	r1, [r5, #16]
   1b4f2:	2203      	movs	r2, #3
   1b4f4:	4411      	add	r1, r2
   1b4f6:	f10d 000d 	add.w	r0, sp, #13
   1b4fa:	f7e4 fee1 	bl	2c0 <memcpy>

#if defined(CONFIG_NET_L2_BT_ZEP1656)
		/* Workaround against older Linux kernel BT IPSP code.
		 * This will be removed eventually.
		 */
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1b4fe:	7963      	ldrb	r3, [r4, #5]
   1b500:	2b02      	cmp	r3, #2
   1b502:	d009      	beq.n	1b518 <net_if_start_dad+0xa8>
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
   1b504:	7963      	ldrb	r3, [r4, #5]
   1b506:	2b03      	cmp	r3, #3
   1b508:	d1ca      	bne.n	1b4a0 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1b50a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1b50e:	f083 0302 	eor.w	r3, r3, #2
   1b512:	f88d 3008 	strb.w	r3, [sp, #8]
   1b516:	e7c3      	b.n	1b4a0 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1b518:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1b51c:	f083 0302 	eor.w	r3, r3, #2
   1b520:	f88d 3008 	strb.w	r3, [sp, #8]
   1b524:	e7ee      	b.n	1b504 <net_if_start_dad+0x94>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1b526:	6901      	ldr	r1, [r0, #16]
   1b528:	a802      	add	r0, sp, #8
   1b52a:	f7e4 fec9 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   1b52e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1b532:	f083 0302 	eor.w	r3, r3, #2
   1b536:	f88d 3008 	strb.w	r3, [sp, #8]
   1b53a:	e7b1      	b.n	1b4a0 <net_if_start_dad+0x30>
   1b53c:	3401      	adds	r4, #1
   1b53e:	2c02      	cmp	r4, #2
   1b540:	dc18      	bgt.n	1b574 <net_if_start_dad+0x104>
		if (!iface->ipv6.unicast[i].is_used ||
   1b542:	236c      	movs	r3, #108	; 0x6c
   1b544:	fb03 5304 	mla	r3, r3, r4, r5
   1b548:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b54c:	2b00      	cmp	r3, #0
   1b54e:	d0f5      	beq.n	1b53c <net_if_start_dad+0xcc>
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1b550:	236c      	movs	r3, #108	; 0x6c
   1b552:	fb03 5304 	mla	r3, r3, r4, r5
   1b556:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   1b558:	2b0a      	cmp	r3, #10
   1b55a:	d1ef      	bne.n	1b53c <net_if_start_dad+0xcc>
		    &iface->ipv6.unicast[i] == ifaddr) {
   1b55c:	216c      	movs	r1, #108	; 0x6c
   1b55e:	fb01 f104 	mul.w	r1, r1, r4
   1b562:	3120      	adds	r1, #32
   1b564:	4429      	add	r1, r5
   1b566:	310c      	adds	r1, #12
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1b568:	428e      	cmp	r6, r1
   1b56a:	d0e7      	beq.n	1b53c <net_if_start_dad+0xcc>
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1b56c:	4628      	mov	r0, r5
   1b56e:	f7ff fd9f 	bl	1b0b0 <net_if_ipv6_start_dad>
   1b572:	e7e3      	b.n	1b53c <net_if_start_dad+0xcc>
}
   1b574:	b004      	add	sp, #16
   1b576:	bd70      	pop	{r4, r5, r6, pc}

0001b578 <net_if_ipv6_maddr_add>:
	return addr->s6_addr[0] == 0xFF;
   1b578:	780b      	ldrb	r3, [r1, #0]
	if (!net_is_ipv6_addr_mcast(addr)) {
   1b57a:	2bff      	cmp	r3, #255	; 0xff
   1b57c:	d134      	bne.n	1b5e8 <net_if_ipv6_maddr_add+0x70>
{
   1b57e:	b570      	push	{r4, r5, r6, lr}
   1b580:	2400      	movs	r4, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b582:	2c04      	cmp	r4, #4
   1b584:	dc2e      	bgt.n	1b5e4 <net_if_ipv6_maddr_add+0x6c>
		if (iface->ipv6.mcast[i].is_used) {
   1b586:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b58a:	00d3      	lsls	r3, r2, #3
   1b58c:	4403      	add	r3, r0
   1b58e:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b592:	f013 0f01 	tst.w	r3, #1
   1b596:	d001      	beq.n	1b59c <net_if_ipv6_maddr_add+0x24>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b598:	3401      	adds	r4, #1
   1b59a:	e7f2      	b.n	1b582 <net_if_ipv6_maddr_add+0xa>
   1b59c:	4605      	mov	r5, r0
		iface->ipv6.mcast[i].is_used = true;
   1b59e:	0066      	lsls	r6, r4, #1
   1b5a0:	1932      	adds	r2, r6, r4
   1b5a2:	00d3      	lsls	r3, r2, #3
   1b5a4:	4403      	add	r3, r0
   1b5a6:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1b5aa:	f042 0201 	orr.w	r2, r2, #1
   1b5ae:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		iface->ipv6.mcast[i].address.family = AF_INET6;
   1b5b2:	220a      	movs	r2, #10
   1b5b4:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
		memcpy(&iface->ipv6.mcast[i].address.in6_addr, addr, 16);
   1b5b8:	1933      	adds	r3, r6, r4
   1b5ba:	00d8      	lsls	r0, r3, #3
   1b5bc:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1b5c0:	4428      	add	r0, r5
   1b5c2:	2210      	movs	r2, #16
   1b5c4:	3018      	adds	r0, #24
   1b5c6:	f7e4 fe7b 	bl	2c0 <memcpy>
   1b5ca:	2300      	movs	r3, #0
   1b5cc:	461a      	mov	r2, r3
   1b5ce:	4629      	mov	r1, r5
   1b5d0:	4806      	ldr	r0, [pc, #24]	; (1b5ec <net_if_ipv6_maddr_add+0x74>)
   1b5d2:	f007 fc99 	bl	22f08 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.mcast[i];
   1b5d6:	4434      	add	r4, r6
   1b5d8:	00e0      	lsls	r0, r4, #3
   1b5da:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1b5de:	4428      	add	r0, r5
   1b5e0:	3010      	adds	r0, #16
   1b5e2:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1b5e4:	2000      	movs	r0, #0
   1b5e6:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1b5e8:	2000      	movs	r0, #0
   1b5ea:	4770      	bx	lr
   1b5ec:	f0600003 	.word	0xf0600003

0001b5f0 <net_if_ipv6_maddr_rm>:
{
   1b5f0:	b570      	push	{r4, r5, r6, lr}
   1b5f2:	4605      	mov	r5, r0
   1b5f4:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b5f6:	2400      	movs	r4, #0
   1b5f8:	e000      	b.n	1b5fc <net_if_ipv6_maddr_rm+0xc>
   1b5fa:	3401      	adds	r4, #1
   1b5fc:	2c04      	cmp	r4, #4
   1b5fe:	dc25      	bgt.n	1b64c <net_if_ipv6_maddr_rm+0x5c>
		if (!iface->ipv6.mcast[i].is_used) {
   1b600:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b604:	00d3      	lsls	r3, r2, #3
   1b606:	461a      	mov	r2, r3
   1b608:	442b      	add	r3, r5
   1b60a:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b60e:	f013 0f01 	tst.w	r3, #1
   1b612:	d0f2      	beq.n	1b5fa <net_if_ipv6_maddr_rm+0xa>
			    &iface->ipv6.mcast[i].address.in6_addr,
   1b614:	f502 70b0 	add.w	r0, r2, #352	; 0x160
   1b618:	4428      	add	r0, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b61a:	2210      	movs	r2, #16
   1b61c:	4631      	mov	r1, r6
   1b61e:	3018      	adds	r0, #24
   1b620:	f00e fd1a 	bl	2a058 <memcmp>
		if (!net_ipv6_addr_cmp(
   1b624:	2800      	cmp	r0, #0
   1b626:	d1e8      	bne.n	1b5fa <net_if_ipv6_maddr_rm+0xa>
		iface->ipv6.mcast[i].is_used = false;
   1b628:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b62c:	00e3      	lsls	r3, r4, #3
   1b62e:	442b      	add	r3, r5
   1b630:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1b634:	f36f 0200 	bfc	r2, #0, #1
   1b638:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
   1b63c:	2300      	movs	r3, #0
   1b63e:	461a      	mov	r2, r3
   1b640:	4629      	mov	r1, r5
   1b642:	4803      	ldr	r0, [pc, #12]	; (1b650 <net_if_ipv6_maddr_rm+0x60>)
   1b644:	f007 fc60 	bl	22f08 <net_mgmt_event_notify_with_info>
		return true;
   1b648:	2001      	movs	r0, #1
   1b64a:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   1b64c:	2000      	movs	r0, #0
}
   1b64e:	bd70      	pop	{r4, r5, r6, pc}
   1b650:	f0600004 	.word	0xf0600004

0001b654 <net_if_ipv6_addr_rm>:
{
   1b654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b658:	b084      	sub	sp, #16
   1b65a:	4606      	mov	r6, r0
   1b65c:	460f      	mov	r7, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b65e:	2400      	movs	r4, #0
   1b660:	e009      	b.n	1b676 <net_if_ipv6_addr_rm+0x22>
			k_delayed_work_cancel(&iface->ipv6.unicast[i].lifetime);
   1b662:	206c      	movs	r0, #108	; 0x6c
   1b664:	fb00 f004 	mul.w	r0, r0, r4
   1b668:	3030      	adds	r0, #48	; 0x30
   1b66a:	4430      	add	r0, r6
   1b66c:	3010      	adds	r0, #16
   1b66e:	f00e fba3 	bl	29db8 <k_delayed_work_cancel>
   1b672:	e01c      	b.n	1b6ae <net_if_ipv6_addr_rm+0x5a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b674:	3401      	adds	r4, #1
   1b676:	2c02      	cmp	r4, #2
   1b678:	dc46      	bgt.n	1b708 <net_if_ipv6_addr_rm+0xb4>
		if (!iface->ipv6.unicast[i].is_used) {
   1b67a:	236c      	movs	r3, #108	; 0x6c
   1b67c:	fb03 6304 	mla	r3, r3, r4, r6
   1b680:	f893 5094 	ldrb.w	r5, [r3, #148]	; 0x94
   1b684:	2d00      	cmp	r5, #0
   1b686:	d0f5      	beq.n	1b674 <net_if_ipv6_addr_rm+0x20>
			    &iface->ipv6.unicast[i].address.in6_addr,
   1b688:	206c      	movs	r0, #108	; 0x6c
   1b68a:	fb00 f004 	mul.w	r0, r0, r4
   1b68e:	3020      	adds	r0, #32
   1b690:	4430      	add	r0, r6
   1b692:	2210      	movs	r2, #16
   1b694:	4639      	mov	r1, r7
   1b696:	4410      	add	r0, r2
   1b698:	f00e fcde 	bl	2a058 <memcmp>
		if (!net_ipv6_addr_cmp(
   1b69c:	2800      	cmp	r0, #0
   1b69e:	d1e9      	bne.n	1b674 <net_if_ipv6_addr_rm+0x20>
		if (!iface->ipv6.unicast[i].is_infinite) {
   1b6a0:	236c      	movs	r3, #108	; 0x6c
   1b6a2:	fb03 6304 	mla	r3, r3, r4, r6
   1b6a6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   1b6aa:	2b00      	cmp	r3, #0
   1b6ac:	d0d9      	beq.n	1b662 <net_if_ipv6_addr_rm+0xe>
		iface->ipv6.unicast[i].is_used = false;
   1b6ae:	236c      	movs	r3, #108	; 0x6c
   1b6b0:	fb03 6404 	mla	r4, r3, r4, r6
   1b6b4:	f04f 0800 	mov.w	r8, #0
   1b6b8:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
	dst->s6_addr[0]   = 0xFF;
   1b6bc:	23ff      	movs	r3, #255	; 0xff
   1b6be:	f88d 3000 	strb.w	r3, [sp]
	dst->s6_addr[1]   = 0x02;
   1b6c2:	2202      	movs	r2, #2
   1b6c4:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1b6c8:	f8ad 8002 	strh.w	r8, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1b6cc:	f8ad 8004 	strh.w	r8, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1b6d0:	f8ad 8006 	strh.w	r8, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1b6d4:	f8ad 8008 	strh.w	r8, [sp, #8]
	dst->s6_addr[10]  = 0;
   1b6d8:	f88d 800a 	strb.w	r8, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1b6dc:	2201      	movs	r2, #1
   1b6de:	f88d 200b 	strb.w	r2, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1b6e2:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1b6e6:	7b7b      	ldrb	r3, [r7, #13]
   1b6e8:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1b6ec:	89fb      	ldrh	r3, [r7, #14]
   1b6ee:	f8ad 300e 	strh.w	r3, [sp, #14]
		net_if_ipv6_maddr_rm(iface, &maddr);
   1b6f2:	4669      	mov	r1, sp
   1b6f4:	4630      	mov	r0, r6
   1b6f6:	f7ff ff7b 	bl	1b5f0 <net_if_ipv6_maddr_rm>
   1b6fa:	4643      	mov	r3, r8
   1b6fc:	4642      	mov	r2, r8
   1b6fe:	4631      	mov	r1, r6
   1b700:	4804      	ldr	r0, [pc, #16]	; (1b714 <net_if_ipv6_addr_rm+0xc0>)
   1b702:	f007 fc01 	bl	22f08 <net_mgmt_event_notify_with_info>
   1b706:	e000      	b.n	1b70a <net_if_ipv6_addr_rm+0xb6>
	return false;
   1b708:	2500      	movs	r5, #0
}
   1b70a:	4628      	mov	r0, r5
   1b70c:	b004      	add	sp, #16
   1b70e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b712:	bf00      	nop
   1b714:	f0600002 	.word	0xf0600002

0001b718 <net_if_ipv6_dad_failed>:
{
   1b718:	b510      	push	{r4, lr}
   1b71a:	b082      	sub	sp, #8
   1b71c:	ab02      	add	r3, sp, #8
   1b71e:	f843 0d04 	str.w	r0, [r3, #-4]!
   1b722:	460c      	mov	r4, r1
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   1b724:	4619      	mov	r1, r3
   1b726:	4620      	mov	r0, r4
   1b728:	f7ff fdc8 	bl	1b2bc <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   1b72c:	b160      	cbz	r0, 1b748 <net_if_ipv6_dad_failed+0x30>
	k_delayed_work_cancel(&ifaddr->dad_timer);
   1b72e:	303c      	adds	r0, #60	; 0x3c
   1b730:	f00e fb42 	bl	29db8 <k_delayed_work_cancel>
   1b734:	2300      	movs	r3, #0
   1b736:	461a      	mov	r2, r3
   1b738:	9901      	ldr	r1, [sp, #4]
   1b73a:	4804      	ldr	r0, [pc, #16]	; (1b74c <net_if_ipv6_dad_failed+0x34>)
   1b73c:	f007 fbe4 	bl	22f08 <net_mgmt_event_notify_with_info>
	net_if_ipv6_addr_rm(iface, addr);
   1b740:	4621      	mov	r1, r4
   1b742:	9801      	ldr	r0, [sp, #4]
   1b744:	f7ff ff86 	bl	1b654 <net_if_ipv6_addr_rm>
}
   1b748:	b002      	add	sp, #8
   1b74a:	bd10      	pop	{r4, pc}
   1b74c:	f060000e 	.word	0xf060000e

0001b750 <net_if_ipv6_maddr_lookup>:
{
   1b750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b752:	4607      	mov	r7, r0
   1b754:	460e      	mov	r6, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b756:	4d22      	ldr	r5, [pc, #136]	; (1b7e0 <net_if_ipv6_maddr_lookup+0x90>)
   1b758:	e034      	b.n	1b7c4 <net_if_ipv6_maddr_lookup+0x74>
		return false;
   1b75a:	2300      	movs	r3, #0
			if (net_is_ipv6_prefix(maddr->s6_addr,
   1b75c:	bb13      	cbnz	r3, 1b7a4 <net_if_ipv6_maddr_lookup+0x54>
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b75e:	3401      	adds	r4, #1
   1b760:	2c04      	cmp	r4, #4
   1b762:	dc2d      	bgt.n	1b7c0 <net_if_ipv6_maddr_lookup+0x70>
			if (!iface->ipv6.mcast[i].is_used ||
   1b764:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b768:	00d3      	lsls	r3, r2, #3
   1b76a:	442b      	add	r3, r5
   1b76c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b770:	f013 0f01 	tst.w	r3, #1
   1b774:	d0f3      	beq.n	1b75e <net_if_ipv6_maddr_lookup+0xe>
			    iface->ipv6.mcast[i].address.family != AF_INET6) {
   1b776:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b77a:	00d3      	lsls	r3, r2, #3
   1b77c:	442b      	add	r3, r5
   1b77e:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
			if (!iface->ipv6.mcast[i].is_used ||
   1b782:	2b0a      	cmp	r3, #10
   1b784:	d1eb      	bne.n	1b75e <net_if_ipv6_maddr_lookup+0xe>
				iface->ipv6.mcast[i].address.in6_addr.s6_addr,
   1b786:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b78a:	00d3      	lsls	r3, r2, #3
   1b78c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1b790:	18e9      	adds	r1, r5, r3
	if (memcmp(addr1, addr2, bytes)) {
   1b792:	2210      	movs	r2, #16
   1b794:	3118      	adds	r1, #24
   1b796:	4638      	mov	r0, r7
   1b798:	f00e fc5e 	bl	2a058 <memcmp>
   1b79c:	2800      	cmp	r0, #0
   1b79e:	d1dc      	bne.n	1b75a <net_if_ipv6_maddr_lookup+0xa>
		return true;
   1b7a0:	2301      	movs	r3, #1
   1b7a2:	e7db      	b.n	1b75c <net_if_ipv6_maddr_lookup+0xc>
				if (ret) {
   1b7a4:	b106      	cbz	r6, 1b7a8 <net_if_ipv6_maddr_lookup+0x58>
					*ret = iface;
   1b7a6:	6035      	str	r5, [r6, #0]
				return &iface->ipv6.mcast[i];
   1b7a8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b7ac:	00e3      	lsls	r3, r4, #3
   1b7ae:	f503 70b0 	add.w	r0, r3, #352	; 0x160
   1b7b2:	4428      	add	r0, r5
   1b7b4:	3010      	adds	r0, #16
   1b7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b7b8:	2400      	movs	r4, #0
   1b7ba:	e7d1      	b.n	1b760 <net_if_ipv6_maddr_lookup+0x10>
   1b7bc:	2400      	movs	r4, #0
   1b7be:	e7cf      	b.n	1b760 <net_if_ipv6_maddr_lookup+0x10>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b7c0:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1b7c4:	4b07      	ldr	r3, [pc, #28]	; (1b7e4 <net_if_ipv6_maddr_lookup+0x94>)
   1b7c6:	429d      	cmp	r5, r3
   1b7c8:	d008      	beq.n	1b7dc <net_if_ipv6_maddr_lookup+0x8c>
		if (ret && *ret && iface != *ret) {
   1b7ca:	2e00      	cmp	r6, #0
   1b7cc:	d0f4      	beq.n	1b7b8 <net_if_ipv6_maddr_lookup+0x68>
   1b7ce:	6833      	ldr	r3, [r6, #0]
   1b7d0:	2b00      	cmp	r3, #0
   1b7d2:	d0f3      	beq.n	1b7bc <net_if_ipv6_maddr_lookup+0x6c>
   1b7d4:	429d      	cmp	r5, r3
   1b7d6:	d1f3      	bne.n	1b7c0 <net_if_ipv6_maddr_lookup+0x70>
   1b7d8:	2400      	movs	r4, #0
   1b7da:	e7c1      	b.n	1b760 <net_if_ipv6_maddr_lookup+0x10>
	return NULL;
   1b7dc:	2000      	movs	r0, #0
}
   1b7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b7e0:	2000d2c0 	.word	0x2000d2c0
   1b7e4:	2000d560 	.word	0x2000d560

0001b7e8 <net_if_mcast_monitor>:
{
   1b7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b7ea:	4605      	mov	r5, r0
   1b7ec:	460e      	mov	r6, r1
   1b7ee:	4617      	mov	r7, r2
	return list->head;
   1b7f0:	4b13      	ldr	r3, [pc, #76]	; (1b840 <net_if_mcast_monitor+0x58>)
   1b7f2:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1b7f4:	b11b      	cbz	r3, 1b7fe <net_if_mcast_monitor+0x16>
   1b7f6:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b7f8:	b173      	cbz	r3, 1b818 <net_if_mcast_monitor+0x30>
	return node->next;
   1b7fa:	681c      	ldr	r4, [r3, #0]
   1b7fc:	e00c      	b.n	1b818 <net_if_mcast_monitor+0x30>
   1b7fe:	461c      	mov	r4, r3
   1b800:	e00a      	b.n	1b818 <net_if_mcast_monitor+0x30>
			mon->cb(iface, addr, is_joined);
   1b802:	689b      	ldr	r3, [r3, #8]
   1b804:	463a      	mov	r2, r7
   1b806:	4631      	mov	r1, r6
   1b808:	4628      	mov	r0, r5
   1b80a:	4798      	blx	r3
   1b80c:	e008      	b.n	1b820 <net_if_mcast_monitor+0x38>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b80e:	4623      	mov	r3, r4
   1b810:	e00c      	b.n	1b82c <net_if_mcast_monitor+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1b812:	4622      	mov	r2, r4
   1b814:	4623      	mov	r3, r4
   1b816:	4614      	mov	r4, r2
   1b818:	b183      	cbz	r3, 1b83c <net_if_mcast_monitor+0x54>
		if (iface == mon->iface) {
   1b81a:	685a      	ldr	r2, [r3, #4]
   1b81c:	42aa      	cmp	r2, r5
   1b81e:	d0f0      	beq.n	1b802 <net_if_mcast_monitor+0x1a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1b820:	2c00      	cmp	r4, #0
   1b822:	d0f6      	beq.n	1b812 <net_if_mcast_monitor+0x2a>
   1b824:	4622      	mov	r2, r4
   1b826:	2c00      	cmp	r4, #0
   1b828:	d0f1      	beq.n	1b80e <net_if_mcast_monitor+0x26>
	return node->next;
   1b82a:	6823      	ldr	r3, [r4, #0]
   1b82c:	b113      	cbz	r3, 1b834 <net_if_mcast_monitor+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b82e:	b11a      	cbz	r2, 1b838 <net_if_mcast_monitor+0x50>
	return node->next;
   1b830:	6822      	ldr	r2, [r4, #0]
   1b832:	e7ef      	b.n	1b814 <net_if_mcast_monitor+0x2c>
   1b834:	2200      	movs	r2, #0
   1b836:	e7ed      	b.n	1b814 <net_if_mcast_monitor+0x2c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b838:	2200      	movs	r2, #0
   1b83a:	e7eb      	b.n	1b814 <net_if_mcast_monitor+0x2c>
}
   1b83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b83e:	bf00      	nop
   1b840:	20001c54 	.word	0x20001c54

0001b844 <net_if_ipv6_prefix_add>:
{
   1b844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b848:	4605      	mov	r5, r0
   1b84a:	460e      	mov	r6, r1
   1b84c:	4617      	mov	r7, r2
   1b84e:	4698      	mov	r8, r3
	if_prefix = ipv6_prefix_find(iface, prefix, len);
   1b850:	f7ff fc00 	bl	1b054 <ipv6_prefix_find>
	if (if_prefix) {
   1b854:	4604      	mov	r4, r0
   1b856:	b110      	cbz	r0, 1b85e <net_if_ipv6_prefix_add+0x1a>
}
   1b858:	4620      	mov	r0, r4
   1b85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b85e:	2300      	movs	r3, #0
   1b860:	e000      	b.n	1b864 <net_if_ipv6_prefix_add+0x20>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b862:	3301      	adds	r3, #1
   1b864:	2b01      	cmp	r3, #1
   1b866:	dcf7      	bgt.n	1b858 <net_if_ipv6_prefix_add+0x14>
		if (iface->ipv6.prefix[i].is_used) {
   1b868:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1b86c:	008a      	lsls	r2, r1, #2
   1b86e:	442a      	add	r2, r5
   1b870:	f892 2222 	ldrb.w	r2, [r2, #546]	; 0x222
   1b874:	2a00      	cmp	r2, #0
   1b876:	d1f4      	bne.n	1b862 <net_if_ipv6_prefix_add+0x1e>
		net_if_ipv6_prefix_init(&iface->ipv6.prefix[i], prefix, len,
   1b878:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1b87c:	009a      	lsls	r2, r3, #2
   1b87e:	f502 74ec 	add.w	r4, r2, #472	; 0x1d8
   1b882:	442c      	add	r4, r5
   1b884:	3410      	adds	r4, #16
   1b886:	4643      	mov	r3, r8
   1b888:	463a      	mov	r2, r7
   1b88a:	4631      	mov	r1, r6
   1b88c:	4620      	mov	r0, r4
   1b88e:	f7ff fc2d 	bl	1b0ec <net_if_ipv6_prefix_init>
   1b892:	2300      	movs	r3, #0
   1b894:	461a      	mov	r2, r3
   1b896:	4629      	mov	r1, r5
   1b898:	4801      	ldr	r0, [pc, #4]	; (1b8a0 <net_if_ipv6_prefix_add+0x5c>)
   1b89a:	f007 fb35 	bl	22f08 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.prefix[i];
   1b89e:	e7db      	b.n	1b858 <net_if_ipv6_prefix_add+0x14>
   1b8a0:	f0600005 	.word	0xf0600005

0001b8a4 <net_if_ipv6_prefix_lookup>:
{
   1b8a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8a8:	4605      	mov	r5, r0
   1b8aa:	4688      	mov	r8, r1
   1b8ac:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b8ae:	2400      	movs	r4, #0
   1b8b0:	e01d      	b.n	1b8ee <net_if_ipv6_prefix_lookup+0x4a>
	if (memcmp(addr1, addr2, bytes)) {
   1b8b2:	4652      	mov	r2, sl
   1b8b4:	4641      	mov	r1, r8
   1b8b6:	4648      	mov	r0, r9
   1b8b8:	f00e fbce 	bl	2a058 <memcmp>
   1b8bc:	b9a0      	cbnz	r0, 1b8e8 <net_if_ipv6_prefix_lookup+0x44>
	if (!remain) {
   1b8be:	f1bb 0f00 	cmp.w	fp, #0
   1b8c2:	d012      	beq.n	1b8ea <net_if_ipv6_prefix_lookup+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1b8c4:	f1cb 0208 	rsb	r2, fp, #8
   1b8c8:	23ff      	movs	r3, #255	; 0xff
   1b8ca:	4093      	lsls	r3, r2
   1b8cc:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1b8d0:	fa03 f30b 	lsl.w	r3, r3, fp
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1b8d4:	f819 200a 	ldrb.w	r2, [r9, sl]
   1b8d8:	f818 100a 	ldrb.w	r1, [r8, sl]
   1b8dc:	404a      	eors	r2, r1
   1b8de:	4213      	tst	r3, r2
   1b8e0:	bf0c      	ite	eq
   1b8e2:	2601      	moveq	r6, #1
   1b8e4:	2600      	movne	r6, #0
   1b8e6:	e000      	b.n	1b8ea <net_if_ipv6_prefix_lookup+0x46>
		return false;
   1b8e8:	2600      	movs	r6, #0
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1b8ea:	b9e6      	cbnz	r6, 1b926 <net_if_ipv6_prefix_lookup+0x82>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b8ec:	3401      	adds	r4, #1
   1b8ee:	2c01      	cmp	r4, #1
   1b8f0:	dc22      	bgt.n	1b938 <net_if_ipv6_prefix_lookup+0x94>
		if (!iface->ipv6.prefix[i].is_used) {
   1b8f2:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b8f6:	0093      	lsls	r3, r2, #2
   1b8f8:	442b      	add	r3, r5
   1b8fa:	f893 6222 	ldrb.w	r6, [r3, #546]	; 0x222
   1b8fe:	2e00      	cmp	r6, #0
   1b900:	d0f4      	beq.n	1b8ec <net_if_ipv6_prefix_lookup+0x48>
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1b902:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b906:	0093      	lsls	r3, r2, #2
   1b908:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1b90c:	442b      	add	r3, r5
   1b90e:	f103 0910 	add.w	r9, r3, #16
	u8_t bits = 128 - length;
   1b912:	f1c7 0380 	rsb	r3, r7, #128	; 0x80
	u8_t bytes = length / 8;
   1b916:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
	u8_t remain = bits % 8;
   1b91a:	f003 0b07 	and.w	fp, r3, #7
	if (length > 128) {
   1b91e:	2f80      	cmp	r7, #128	; 0x80
   1b920:	d9c7      	bls.n	1b8b2 <net_if_ipv6_prefix_lookup+0xe>
		return false;
   1b922:	2600      	movs	r6, #0
   1b924:	e7e1      	b.n	1b8ea <net_if_ipv6_prefix_lookup+0x46>
			return &iface->ipv6.prefix[i];
   1b926:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
   1b92a:	00a3      	lsls	r3, r4, #2
   1b92c:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
   1b930:	4428      	add	r0, r5
   1b932:	3010      	adds	r0, #16
   1b934:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return NULL;
   1b938:	2000      	movs	r0, #0
}
   1b93a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0001b940 <net_if_ipv6_addr_onlink>:
{
   1b940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b944:	4606      	mov	r6, r0
   1b946:	4688      	mov	r8, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1b948:	4d2d      	ldr	r5, [pc, #180]	; (1ba00 <net_if_ipv6_addr_onlink+0xc0>)
   1b94a:	e048      	b.n	1b9de <net_if_ipv6_addr_onlink+0x9e>
	if (memcmp(addr1, addr2, bytes)) {
   1b94c:	465a      	mov	r2, fp
   1b94e:	4641      	mov	r1, r8
   1b950:	4648      	mov	r0, r9
   1b952:	f00e fb81 	bl	2a058 <memcmp>
   1b956:	b9a8      	cbnz	r0, 1b984 <net_if_ipv6_addr_onlink+0x44>
	if (!remain) {
   1b958:	f1ba 0f00 	cmp.w	sl, #0
   1b95c:	d013      	beq.n	1b986 <net_if_ipv6_addr_onlink+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1b95e:	f1ca 0208 	rsb	r2, sl, #8
   1b962:	23ff      	movs	r3, #255	; 0xff
   1b964:	4093      	lsls	r3, r2
   1b966:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1b96a:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1b96e:	f819 300b 	ldrb.w	r3, [r9, fp]
   1b972:	f818 200b 	ldrb.w	r2, [r8, fp]
   1b976:	4053      	eors	r3, r2
   1b978:	ea1a 0f03 	tst.w	sl, r3
   1b97c:	bf0c      	ite	eq
   1b97e:	2701      	moveq	r7, #1
   1b980:	2700      	movne	r7, #0
   1b982:	e000      	b.n	1b986 <net_if_ipv6_addr_onlink+0x46>
		return false;
   1b984:	2700      	movs	r7, #0
			if (tmp->ipv6.prefix[i].is_used &&
   1b986:	bb0f      	cbnz	r7, 1b9cc <net_if_ipv6_addr_onlink+0x8c>
		for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b988:	3401      	adds	r4, #1
   1b98a:	2c01      	cmp	r4, #1
   1b98c:	dc25      	bgt.n	1b9da <net_if_ipv6_addr_onlink+0x9a>
			if (tmp->ipv6.prefix[i].is_used &&
   1b98e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b992:	0093      	lsls	r3, r2, #2
   1b994:	442b      	add	r3, r5
   1b996:	f893 7222 	ldrb.w	r7, [r3, #546]	; 0x222
   1b99a:	2f00      	cmp	r7, #0
   1b99c:	d0f4      	beq.n	1b988 <net_if_ipv6_addr_onlink+0x48>
			    net_is_ipv6_prefix(tmp->ipv6.prefix[i].prefix.
   1b99e:	0122      	lsls	r2, r4, #4
   1b9a0:	1b11      	subs	r1, r2, r4
   1b9a2:	008b      	lsls	r3, r1, #2
   1b9a4:	4619      	mov	r1, r3
   1b9a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1b9aa:	442b      	add	r3, r5
   1b9ac:	f103 0910 	add.w	r9, r3, #16
   1b9b0:	460a      	mov	r2, r1
   1b9b2:	442a      	add	r2, r5
   1b9b4:	f892 3220 	ldrb.w	r3, [r2, #544]	; 0x220
	u8_t bits = 128 - length;
   1b9b8:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   1b9bc:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   1b9c0:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   1b9c4:	2b80      	cmp	r3, #128	; 0x80
   1b9c6:	d9c1      	bls.n	1b94c <net_if_ipv6_addr_onlink+0xc>
		return false;
   1b9c8:	2700      	movs	r7, #0
   1b9ca:	e7dc      	b.n	1b986 <net_if_ipv6_addr_onlink+0x46>
				if (iface) {
   1b9cc:	b1a6      	cbz	r6, 1b9f8 <net_if_ipv6_addr_onlink+0xb8>
					*iface = tmp;
   1b9ce:	6035      	str	r5, [r6, #0]
   1b9d0:	e012      	b.n	1b9f8 <net_if_ipv6_addr_onlink+0xb8>
   1b9d2:	2400      	movs	r4, #0
   1b9d4:	e7d9      	b.n	1b98a <net_if_ipv6_addr_onlink+0x4a>
   1b9d6:	2400      	movs	r4, #0
   1b9d8:	e7d7      	b.n	1b98a <net_if_ipv6_addr_onlink+0x4a>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1b9da:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1b9de:	4b09      	ldr	r3, [pc, #36]	; (1ba04 <net_if_ipv6_addr_onlink+0xc4>)
   1b9e0:	429d      	cmp	r5, r3
   1b9e2:	d008      	beq.n	1b9f6 <net_if_ipv6_addr_onlink+0xb6>
		if (iface && *iface && *iface != tmp) {
   1b9e4:	2e00      	cmp	r6, #0
   1b9e6:	d0f4      	beq.n	1b9d2 <net_if_ipv6_addr_onlink+0x92>
   1b9e8:	6833      	ldr	r3, [r6, #0]
   1b9ea:	2b00      	cmp	r3, #0
   1b9ec:	d0f3      	beq.n	1b9d6 <net_if_ipv6_addr_onlink+0x96>
   1b9ee:	429d      	cmp	r5, r3
   1b9f0:	d1f3      	bne.n	1b9da <net_if_ipv6_addr_onlink+0x9a>
   1b9f2:	2400      	movs	r4, #0
   1b9f4:	e7c9      	b.n	1b98a <net_if_ipv6_addr_onlink+0x4a>
	return false;
   1b9f6:	2700      	movs	r7, #0
}
   1b9f8:	4638      	mov	r0, r7
   1b9fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9fe:	bf00      	nop
   1ba00:	2000d2c0 	.word	0x2000d2c0
   1ba04:	2000d560 	.word	0x2000d560

0001ba08 <net_if_ipv6_prefix_set_timer>:
{
   1ba08:	b508      	push	{r3, lr}
	u32_t timeout = lifetime * MSEC_PER_SEC;
   1ba0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ba0e:	fb02 f201 	mul.w	r2, r2, r1
	if (lifetime > (0xfffffffe / MSEC_PER_SEC)) {
   1ba12:	4b05      	ldr	r3, [pc, #20]	; (1ba28 <net_if_ipv6_prefix_set_timer+0x20>)
   1ba14:	4299      	cmp	r1, r3
   1ba16:	d901      	bls.n	1ba1c <net_if_ipv6_prefix_set_timer+0x14>
		timeout = 0xfffffffe;
   1ba18:	f06f 0201 	mvn.w	r2, #1
   1ba1c:	4601      	mov	r1, r0
   1ba1e:	4803      	ldr	r0, [pc, #12]	; (1ba2c <net_if_ipv6_prefix_set_timer+0x24>)
   1ba20:	f00e fa24 	bl	29e6c <k_delayed_work_submit_to_queue>
   1ba24:	bd08      	pop	{r3, pc}
   1ba26:	bf00      	nop
   1ba28:	00418937 	.word	0x00418937
   1ba2c:	20002c70 	.word	0x20002c70

0001ba30 <net_if_ipv6_prefix_unset_timer>:
{
   1ba30:	b508      	push	{r3, lr}
	if (!prefix->is_used) {
   1ba32:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1ba36:	b903      	cbnz	r3, 1ba3a <net_if_ipv6_prefix_unset_timer+0xa>
   1ba38:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&prefix->lifetime);
   1ba3a:	f00e f9bd 	bl	29db8 <k_delayed_work_cancel>
   1ba3e:	e7fb      	b.n	1ba38 <net_if_ipv6_prefix_unset_timer+0x8>

0001ba40 <net_if_ipv6_prefix_rm>:
{
   1ba40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba44:	4606      	mov	r6, r0
   1ba46:	460f      	mov	r7, r1
   1ba48:	4690      	mov	r8, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1ba4a:	2400      	movs	r4, #0
   1ba4c:	e000      	b.n	1ba50 <net_if_ipv6_prefix_rm+0x10>
   1ba4e:	3401      	adds	r4, #1
   1ba50:	2c01      	cmp	r4, #1
   1ba52:	dc2f      	bgt.n	1bab4 <net_if_ipv6_prefix_rm+0x74>
		if (!iface->ipv6.prefix[i].is_used) {
   1ba54:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1ba58:	0093      	lsls	r3, r2, #2
   1ba5a:	461a      	mov	r2, r3
   1ba5c:	4433      	add	r3, r6
   1ba5e:	f893 5222 	ldrb.w	r5, [r3, #546]	; 0x222
   1ba62:	2d00      	cmp	r5, #0
   1ba64:	d0f3      	beq.n	1ba4e <net_if_ipv6_prefix_rm+0xe>
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1ba66:	f502 7000 	add.w	r0, r2, #512	; 0x200
   1ba6a:	4430      	add	r0, r6
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1ba6c:	2210      	movs	r2, #16
   1ba6e:	4639      	mov	r1, r7
   1ba70:	4410      	add	r0, r2
   1ba72:	f00e faf1 	bl	2a058 <memcmp>
   1ba76:	2800      	cmp	r0, #0
   1ba78:	d1e9      	bne.n	1ba4e <net_if_ipv6_prefix_rm+0xe>
		    iface->ipv6.prefix[i].len != len) {
   1ba7a:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1ba7e:	0093      	lsls	r3, r2, #2
   1ba80:	4433      	add	r3, r6
   1ba82:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1ba86:	4543      	cmp	r3, r8
   1ba88:	d1e1      	bne.n	1ba4e <net_if_ipv6_prefix_rm+0xe>
		net_if_ipv6_prefix_unset_timer(&iface->ipv6.prefix[i]);
   1ba8a:	0127      	lsls	r7, r4, #4
   1ba8c:	1b3a      	subs	r2, r7, r4
   1ba8e:	0093      	lsls	r3, r2, #2
   1ba90:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   1ba94:	18f0      	adds	r0, r6, r3
   1ba96:	3010      	adds	r0, #16
   1ba98:	f7ff ffca 	bl	1ba30 <net_if_ipv6_prefix_unset_timer>
		iface->ipv6.prefix[i].is_used = false;
   1ba9c:	1b3c      	subs	r4, r7, r4
   1ba9e:	00a3      	lsls	r3, r4, #2
   1baa0:	4433      	add	r3, r6
   1baa2:	2200      	movs	r2, #0
   1baa4:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
   1baa8:	4613      	mov	r3, r2
   1baaa:	4631      	mov	r1, r6
   1baac:	4803      	ldr	r0, [pc, #12]	; (1babc <net_if_ipv6_prefix_rm+0x7c>)
   1baae:	f007 fa2b 	bl	22f08 <net_mgmt_event_notify_with_info>
		return true;
   1bab2:	e000      	b.n	1bab6 <net_if_ipv6_prefix_rm+0x76>
	return false;
   1bab4:	2500      	movs	r5, #0
}
   1bab6:	4628      	mov	r0, r5
   1bab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1babc:	f0600006 	.word	0xf0600006

0001bac0 <net_if_ipv6_router_lookup>:
{
   1bac0:	b570      	push	{r4, r5, r6, lr}
   1bac2:	4605      	mov	r5, r0
   1bac4:	460e      	mov	r6, r1
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bac6:	2400      	movs	r4, #0
   1bac8:	2c00      	cmp	r4, #0
   1baca:	dd01      	ble.n	1bad0 <net_if_ipv6_router_lookup+0x10>
	return NULL;
   1bacc:	2000      	movs	r0, #0
}
   1bace:	bd70      	pop	{r4, r5, r6, pc}
		if (!routers[i].is_used ||
   1bad0:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1bad4:	009a      	lsls	r2, r3, #2
   1bad6:	4b11      	ldr	r3, [pc, #68]	; (1bb1c <net_if_ipv6_router_lookup+0x5c>)
   1bad8:	4413      	add	r3, r2
   1bada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1bade:	b123      	cbz	r3, 1baea <net_if_ipv6_router_lookup+0x2a>
		    routers[i].address.family != AF_INET6 ||
   1bae0:	4b0e      	ldr	r3, [pc, #56]	; (1bb1c <net_if_ipv6_router_lookup+0x5c>)
   1bae2:	4413      	add	r3, r2
   1bae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
		if (!routers[i].is_used ||
   1bae6:	2b0a      	cmp	r3, #10
   1bae8:	d001      	beq.n	1baee <net_if_ipv6_router_lookup+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1baea:	3401      	adds	r4, #1
   1baec:	e7ec      	b.n	1bac8 <net_if_ipv6_router_lookup+0x8>
		    routers[i].iface != iface) {
   1baee:	4b0b      	ldr	r3, [pc, #44]	; (1bb1c <net_if_ipv6_router_lookup+0x5c>)
   1baf0:	4413      	add	r3, r2
   1baf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		    routers[i].address.family != AF_INET6 ||
   1baf4:	42ab      	cmp	r3, r5
   1baf6:	d1f8      	bne.n	1baea <net_if_ipv6_router_lookup+0x2a>
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
   1baf8:	eb04 1204 	add.w	r2, r4, r4, lsl #4
   1bafc:	0093      	lsls	r3, r2, #2
   1bafe:	3328      	adds	r3, #40	; 0x28
   1bb00:	4a06      	ldr	r2, [pc, #24]	; (1bb1c <net_if_ipv6_router_lookup+0x5c>)
   1bb02:	4413      	add	r3, r2
   1bb04:	2210      	movs	r2, #16
   1bb06:	4631      	mov	r1, r6
   1bb08:	1d18      	adds	r0, r3, #4
   1bb0a:	f00e faa5 	bl	2a058 <memcmp>
   1bb0e:	2800      	cmp	r0, #0
   1bb10:	d1eb      	bne.n	1baea <net_if_ipv6_router_lookup+0x2a>
			return &routers[i];
   1bb12:	2344      	movs	r3, #68	; 0x44
   1bb14:	4801      	ldr	r0, [pc, #4]	; (1bb1c <net_if_ipv6_router_lookup+0x5c>)
   1bb16:	fb03 0004 	mla	r0, r3, r4, r0
   1bb1a:	bd70      	pop	{r4, r5, r6, pc}
   1bb1c:	20001c5c 	.word	0x20001c5c

0001bb20 <net_if_ipv6_router_find_default>:
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bb20:	2300      	movs	r3, #0
   1bb22:	2b00      	cmp	r3, #0
   1bb24:	dd01      	ble.n	1bb2a <net_if_ipv6_router_find_default+0xa>
	return NULL;
   1bb26:	2000      	movs	r0, #0
}
   1bb28:	4770      	bx	lr
		if (!routers[i].is_used ||
   1bb2a:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   1bb2e:	0091      	lsls	r1, r2, #2
   1bb30:	4a0e      	ldr	r2, [pc, #56]	; (1bb6c <net_if_ipv6_router_find_default+0x4c>)
   1bb32:	440a      	add	r2, r1
   1bb34:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
   1bb38:	b14a      	cbz	r2, 1bb4e <net_if_ipv6_router_find_default+0x2e>
		    !routers[i].is_default ||
   1bb3a:	4a0c      	ldr	r2, [pc, #48]	; (1bb6c <net_if_ipv6_router_find_default+0x4c>)
   1bb3c:	440a      	add	r2, r1
   1bb3e:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
		if (!routers[i].is_used ||
   1bb42:	b122      	cbz	r2, 1bb4e <net_if_ipv6_router_find_default+0x2e>
		    routers[i].address.family != AF_INET6) {
   1bb44:	4a09      	ldr	r2, [pc, #36]	; (1bb6c <net_if_ipv6_router_find_default+0x4c>)
   1bb46:	440a      	add	r2, r1
   1bb48:	8d12      	ldrh	r2, [r2, #40]	; 0x28
		    !routers[i].is_default ||
   1bb4a:	2a0a      	cmp	r2, #10
   1bb4c:	d001      	beq.n	1bb52 <net_if_ipv6_router_find_default+0x32>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bb4e:	3301      	adds	r3, #1
   1bb50:	e7e7      	b.n	1bb22 <net_if_ipv6_router_find_default+0x2>
		if (iface && iface != routers[i].iface) {
   1bb52:	b120      	cbz	r0, 1bb5e <net_if_ipv6_router_find_default+0x3e>
   1bb54:	4a05      	ldr	r2, [pc, #20]	; (1bb6c <net_if_ipv6_router_find_default+0x4c>)
   1bb56:	440a      	add	r2, r1
   1bb58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
   1bb5a:	4290      	cmp	r0, r2
   1bb5c:	d1f7      	bne.n	1bb4e <net_if_ipv6_router_find_default+0x2e>
		return &routers[i];
   1bb5e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1bb62:	009a      	lsls	r2, r3, #2
   1bb64:	4801      	ldr	r0, [pc, #4]	; (1bb6c <net_if_ipv6_router_find_default+0x4c>)
   1bb66:	4410      	add	r0, r2
   1bb68:	4770      	bx	lr
   1bb6a:	bf00      	nop
   1bb6c:	20001c5c 	.word	0x20001c5c

0001bb70 <net_if_ipv6_router_update_lifetime>:
}

void net_if_ipv6_router_update_lifetime(struct net_if_router *router,
					u32_t lifetime)
{
   1bb70:	b508      	push	{r3, lr}
   1bb72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bb76:	fb02 f201 	mul.w	r2, r2, r1
   1bb7a:	4601      	mov	r1, r0
   1bb7c:	4801      	ldr	r0, [pc, #4]	; (1bb84 <net_if_ipv6_router_update_lifetime+0x14>)
   1bb7e:	f00e f975 	bl	29e6c <k_delayed_work_submit_to_queue>
   1bb82:	bd08      	pop	{r3, pc}
   1bb84:	20002c70 	.word	0x20002c70

0001bb88 <net_if_ipv6_router_add>:
}

struct net_if_router *net_if_ipv6_router_add(struct net_if *iface,
					     struct in6_addr *addr,
					     u16_t lifetime)
{
   1bb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb8c:	b084      	sub	sp, #16
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bb8e:	2300      	movs	r3, #0
   1bb90:	2b00      	cmp	r3, #0
   1bb92:	dd04      	ble.n	1bb9e <net_if_ipv6_router_add+0x16>
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_ADD, iface);

		return &routers[i];
	}

	return NULL;
   1bb94:	2400      	movs	r4, #0
}
   1bb96:	4620      	mov	r0, r4
   1bb98:	b004      	add	sp, #16
   1bb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (routers[i].is_used) {
   1bb9e:	eb03 1403 	add.w	r4, r3, r3, lsl #4
   1bba2:	00a5      	lsls	r5, r4, #2
   1bba4:	4c20      	ldr	r4, [pc, #128]	; (1bc28 <net_if_ipv6_router_add+0xa0>)
   1bba6:	442c      	add	r4, r5
   1bba8:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
   1bbac:	b10c      	cbz	r4, 1bbb2 <net_if_ipv6_router_add+0x2a>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bbae:	3301      	adds	r3, #1
   1bbb0:	e7ee      	b.n	1bb90 <net_if_ipv6_router_add+0x8>
   1bbb2:	4616      	mov	r6, r2
   1bbb4:	460f      	mov	r7, r1
   1bbb6:	4680      	mov	r8, r0
		net_if_router_init(&routers[i], iface, addr, lifetime);
   1bbb8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1bbbc:	009a      	lsls	r2, r3, #2
   1bbbe:	4c1a      	ldr	r4, [pc, #104]	; (1bc28 <net_if_ipv6_router_add+0xa0>)
   1bbc0:	4414      	add	r4, r2
	router->is_used = true;
   1bbc2:	2301      	movs	r3, #1
   1bbc4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	router->iface = iface;
   1bbc8:	63e0      	str	r0, [r4, #60]	; 0x3c
	router->address.family = AF_INET6;
   1bbca:	230a      	movs	r3, #10
   1bbcc:	8523      	strh	r3, [r4, #40]	; 0x28
	net_ipaddr_copy(&router->address.in6_addr, addr);
   1bbce:	466d      	mov	r5, sp
   1bbd0:	6808      	ldr	r0, [r1, #0]
   1bbd2:	6849      	ldr	r1, [r1, #4]
   1bbd4:	68ba      	ldr	r2, [r7, #8]
   1bbd6:	68fb      	ldr	r3, [r7, #12]
   1bbd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1bbda:	466d      	mov	r5, sp
   1bbdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1bbde:	62e0      	str	r0, [r4, #44]	; 0x2c
   1bbe0:	6321      	str	r1, [r4, #48]	; 0x30
   1bbe2:	6362      	str	r2, [r4, #52]	; 0x34
   1bbe4:	63a3      	str	r3, [r4, #56]	; 0x38
	if (lifetime) {
   1bbe6:	b966      	cbnz	r6, 1bc02 <net_if_ipv6_router_add+0x7a>
		router->is_default = false;
   1bbe8:	2300      	movs	r3, #0
   1bbea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = true;
   1bbee:	2301      	movs	r3, #1
   1bbf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1bbf4:	2300      	movs	r3, #0
   1bbf6:	461a      	mov	r2, r3
   1bbf8:	4641      	mov	r1, r8
   1bbfa:	480c      	ldr	r0, [pc, #48]	; (1bc2c <net_if_ipv6_router_add+0xa4>)
   1bbfc:	f007 f984 	bl	22f08 <net_mgmt_event_notify_with_info>
		return &routers[i];
   1bc00:	e7c9      	b.n	1bb96 <net_if_ipv6_router_add+0xe>
		router->is_default = true;
   1bc02:	2301      	movs	r3, #1
   1bc04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = false;
   1bc08:	2300      	movs	r3, #0
   1bc0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   1bc0e:	4908      	ldr	r1, [pc, #32]	; (1bc30 <net_if_ipv6_router_add+0xa8>)
   1bc10:	4620      	mov	r0, r4
   1bc12:	f00e f8b3 	bl	29d7c <k_delayed_work_init>
   1bc16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bc1a:	fb02 f206 	mul.w	r2, r2, r6
   1bc1e:	4621      	mov	r1, r4
   1bc20:	4804      	ldr	r0, [pc, #16]	; (1bc34 <net_if_ipv6_router_add+0xac>)
   1bc22:	f00e f923 	bl	29e6c <k_delayed_work_submit_to_queue>
   1bc26:	e7e5      	b.n	1bbf4 <net_if_ipv6_router_add+0x6c>
   1bc28:	20001c5c 	.word	0x20001c5c
   1bc2c:	f0600009 	.word	0xf0600009
   1bc30:	0001b005 	.word	0x0001b005
   1bc34:	20002c70 	.word	0x20002c70

0001bc38 <net_if_ipv6_router_rm>:

bool net_if_ipv6_router_rm(struct net_if_router *router)
{
   1bc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bc3c:	2400      	movs	r4, #0
   1bc3e:	2c00      	cmp	r4, #0
   1bc40:	dd03      	ble.n	1bc4a <net_if_ipv6_router_rm+0x12>
			i, net_sprint_ipv6_addr(&routers[i].address.in6_addr));

		return true;
	}

	return false;
   1bc42:	2500      	movs	r5, #0
}
   1bc44:	4628      	mov	r0, r5
   1bc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!routers[i].is_used) {
   1bc4a:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1bc4e:	009a      	lsls	r2, r3, #2
   1bc50:	4b0d      	ldr	r3, [pc, #52]	; (1bc88 <net_if_ipv6_router_rm+0x50>)
   1bc52:	4413      	add	r3, r2
   1bc54:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
   1bc58:	b11d      	cbz	r5, 1bc62 <net_if_ipv6_router_rm+0x2a>
		if (&routers[i] != router) {
   1bc5a:	4b0b      	ldr	r3, [pc, #44]	; (1bc88 <net_if_ipv6_router_rm+0x50>)
   1bc5c:	4413      	add	r3, r2
   1bc5e:	4283      	cmp	r3, r0
   1bc60:	d001      	beq.n	1bc66 <net_if_ipv6_router_rm+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bc62:	3401      	adds	r4, #1
   1bc64:	e7eb      	b.n	1bc3e <net_if_ipv6_router_rm+0x6>
		k_delayed_work_cancel(&routers[i].lifetime);
   1bc66:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1bc88 <net_if_ipv6_router_rm+0x50>
   1bc6a:	4617      	mov	r7, r2
   1bc6c:	4447      	add	r7, r8
   1bc6e:	4638      	mov	r0, r7
   1bc70:	f00e f8a2 	bl	29db8 <k_delayed_work_cancel>
		routers[i].is_used = false;
   1bc74:	2200      	movs	r2, #0
   1bc76:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
   1bc7a:	4613      	mov	r3, r2
   1bc7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1bc7e:	4803      	ldr	r0, [pc, #12]	; (1bc8c <net_if_ipv6_router_rm+0x54>)
   1bc80:	f007 f942 	bl	22f08 <net_mgmt_event_notify_with_info>
		return true;
   1bc84:	e7de      	b.n	1bc44 <net_if_ipv6_router_rm+0xc>
   1bc86:	bf00      	nop
   1bc88:	20001c5c 	.word	0x20001c5c
   1bc8c:	f060000a 	.word	0xf060000a

0001bc90 <net_if_ipv6_get_ll>:

struct in6_addr *net_if_ipv6_get_ll(struct net_if *iface,
				    enum net_addr_state addr_state)
{
   1bc90:	b430      	push	{r4, r5}
   1bc92:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bc94:	2300      	movs	r3, #0
   1bc96:	e006      	b.n	1bca6 <net_if_ipv6_get_ll+0x16>
		if (!iface->ipv6.unicast[i].is_used ||
		    (addr_state != NET_ADDR_ANY_STATE &&
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1bc98:	226c      	movs	r2, #108	; 0x6c
   1bc9a:	fb02 4203 	mla	r2, r2, r3, r4
   1bc9e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1bca0:	2a0a      	cmp	r2, #10
   1bca2:	d014      	beq.n	1bcce <net_if_ipv6_get_ll+0x3e>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bca4:	3301      	adds	r3, #1
   1bca6:	2b02      	cmp	r3, #2
   1bca8:	dc1d      	bgt.n	1bce6 <net_if_ipv6_get_ll+0x56>
		if (!iface->ipv6.unicast[i].is_used ||
   1bcaa:	226c      	movs	r2, #108	; 0x6c
   1bcac:	fb02 4203 	mla	r2, r2, r3, r4
   1bcb0:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1bcb4:	2a00      	cmp	r2, #0
   1bcb6:	d0f5      	beq.n	1bca4 <net_if_ipv6_get_ll+0x14>
   1bcb8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1bcbc:	d0ec      	beq.n	1bc98 <net_if_ipv6_get_ll+0x8>
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1bcbe:	226c      	movs	r2, #108	; 0x6c
   1bcc0:	fb02 4203 	mla	r2, r2, r3, r4
   1bcc4:	f992 2091 	ldrsb.w	r2, [r2, #145]	; 0x91
		    (addr_state != NET_ADDR_ANY_STATE &&
   1bcc8:	4291      	cmp	r1, r2
   1bcca:	d1eb      	bne.n	1bca4 <net_if_ipv6_get_ll+0x14>
   1bccc:	e7e4      	b.n	1bc98 <net_if_ipv6_get_ll+0x8>
			continue;
		}
		if (net_is_ipv6_ll_addr(&iface->ipv6.unicast[i].address.in6_addr)) {
   1bcce:	206c      	movs	r0, #108	; 0x6c
   1bcd0:	fb00 f003 	mul.w	r0, r0, r3
   1bcd4:	3020      	adds	r0, #32
   1bcd6:	4420      	add	r0, r4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1bcd8:	f830 5f10 	ldrh.w	r5, [r0, #16]!
   1bcdc:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1bce0:	4295      	cmp	r5, r2
   1bce2:	d1df      	bne.n	1bca4 <net_if_ipv6_get_ll+0x14>
   1bce4:	e000      	b.n	1bce8 <net_if_ipv6_get_ll+0x58>
			return &iface->ipv6.unicast[i].address.in6_addr;
		}
	}

	return NULL;
   1bce6:	2000      	movs	r0, #0
}
   1bce8:	bc30      	pop	{r4, r5}
   1bcea:	4770      	bx	lr

0001bcec <net_if_ipv6_select_src_addr>:
	return src;
}

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
						   struct in6_addr *dst)
{
   1bcec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bcf0:	4607      	mov	r7, r0
   1bcf2:	880a      	ldrh	r2, [r1, #0]
	struct in6_addr *src = NULL;
	u8_t best_match = 0;
	struct net_if *iface;

	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   1bcf4:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1bcf8:	429a      	cmp	r2, r3
   1bcfa:	f000 80d7 	beq.w	1beac <net_if_ipv6_select_src_addr+0x1c0>
	return addr->s6_addr[0] == 0xFF;
   1bcfe:	780b      	ldrb	r3, [r1, #0]
   1bd00:	2bff      	cmp	r3, #255	; 0xff
   1bd02:	d004      	beq.n	1bd0e <net_if_ipv6_select_src_addr+0x22>
	u8_t best_match = 0;
   1bd04:	f04f 0900 	mov.w	r9, #0
   1bd08:	4e74      	ldr	r6, [pc, #464]	; (1bedc <net_if_ipv6_select_src_addr+0x1f0>)
   1bd0a:	46c8      	mov	r8, r9
   1bd0c:	e05b      	b.n	1bdc6 <net_if_ipv6_select_src_addr+0xda>
   1bd0e:	4c73      	ldr	r4, [pc, #460]	; (1bedc <net_if_ipv6_select_src_addr+0x1f0>)
   1bd10:	e0c0      	b.n	1be94 <net_if_ipv6_select_src_addr+0x1a8>
	    addr->address.family == AF_INET6 &&
   1bd12:	246c      	movs	r4, #108	; 0x6c
   1bd14:	fb04 640e 	mla	r4, r4, lr, r6
   1bd18:	8da4      	ldrh	r4, [r4, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1bd1a:	2c0a      	cmp	r4, #10
   1bd1c:	d01e      	beq.n	1bd5c <net_if_ipv6_select_src_addr+0x70>
	return false;
   1bd1e:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bd20:	bb8b      	cbnz	r3, 1bd86 <net_if_ipv6_select_src_addr+0x9a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bd22:	f10e 0e01 	add.w	lr, lr, #1
   1bd26:	fa5f fe8e 	uxtb.w	lr, lr
   1bd2a:	f1be 0f02 	cmp.w	lr, #2
   1bd2e:	d846      	bhi.n	1bdbe <net_if_ipv6_select_src_addr+0xd2>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bd30:	46f4      	mov	ip, lr
   1bd32:	236c      	movs	r3, #108	; 0x6c
   1bd34:	fb03 f30e 	mul.w	r3, r3, lr
   1bd38:	f103 0220 	add.w	r2, r3, #32
   1bd3c:	4432      	add	r2, r6
   1bd3e:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1bd40:	4433      	add	r3, r6
   1bd42:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1bd46:	2b00      	cmp	r3, #0
   1bd48:	d0ea      	beq.n	1bd20 <net_if_ipv6_select_src_addr+0x34>
   1bd4a:	246c      	movs	r4, #108	; 0x6c
   1bd4c:	fb04 640e 	mla	r4, r4, lr, r6
   1bd50:	f994 4091 	ldrsb.w	r4, [r4, #145]	; 0x91
   1bd54:	2c01      	cmp	r4, #1
   1bd56:	d0dc      	beq.n	1bd12 <net_if_ipv6_select_src_addr+0x26>
	return false;
   1bd58:	2300      	movs	r3, #0
   1bd5a:	e7e1      	b.n	1bd20 <net_if_ipv6_select_src_addr+0x34>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1bd5c:	8894      	ldrh	r4, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1bd5e:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1bd62:	4294      	cmp	r4, r2
   1bd64:	d1dc      	bne.n	1bd20 <net_if_ipv6_select_src_addr+0x34>
	return false;
   1bd66:	2300      	movs	r3, #0
   1bd68:	e7da      	b.n	1bd20 <net_if_ipv6_select_src_addr+0x34>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1bd6a:	4055      	eors	r5, r2
			for (k = 0; k < 8; k++) {
   1bd6c:	2300      	movs	r3, #0
   1bd6e:	2b07      	cmp	r3, #7
   1bd70:	d81b      	bhi.n	1bdaa <net_if_ipv6_select_src_addr+0xbe>
				if (!(xor & 0x80)) {
   1bd72:	f015 0f80 	tst.w	r5, #128	; 0x80
   1bd76:	d118      	bne.n	1bdaa <net_if_ipv6_select_src_addr+0xbe>
					len++;
   1bd78:	3401      	adds	r4, #1
   1bd7a:	b2e4      	uxtb	r4, r4
					xor <<= 1;
   1bd7c:	006d      	lsls	r5, r5, #1
   1bd7e:	b2ed      	uxtb	r5, r5
			for (k = 0; k < 8; k++) {
   1bd80:	3301      	adds	r3, #1
   1bd82:	b2db      	uxtb	r3, r3
   1bd84:	e7f3      	b.n	1bd6e <net_if_ipv6_select_src_addr+0x82>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bd86:	2400      	movs	r4, #0
   1bd88:	4623      	mov	r3, r4
	for (j = 0; j < 16; j++) {
   1bd8a:	2b0f      	cmp	r3, #15
   1bd8c:	d80d      	bhi.n	1bdaa <net_if_ipv6_select_src_addr+0xbe>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1bd8e:	5ccd      	ldrb	r5, [r1, r3]
   1bd90:	226c      	movs	r2, #108	; 0x6c
   1bd92:	fb02 620c 	mla	r2, r2, ip, r6
   1bd96:	441a      	add	r2, r3
   1bd98:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1bd9c:	4295      	cmp	r5, r2
   1bd9e:	d1e4      	bne.n	1bd6a <net_if_ipv6_select_src_addr+0x7e>
			len += 8;
   1bda0:	3408      	adds	r4, #8
   1bda2:	b2e4      	uxtb	r4, r4
	for (j = 0; j < 16; j++) {
   1bda4:	3301      	adds	r3, #1
   1bda6:	b2db      	uxtb	r3, r3
   1bda8:	e7ef      	b.n	1bd8a <net_if_ipv6_select_src_addr+0x9e>
		if (len >= *best_so_far) {
   1bdaa:	454c      	cmp	r4, r9
   1bdac:	d3b9      	bcc.n	1bd22 <net_if_ipv6_select_src_addr+0x36>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1bdae:	206c      	movs	r0, #108	; 0x6c
   1bdb0:	fb00 f00c 	mul.w	r0, r0, ip
   1bdb4:	3020      	adds	r0, #32
   1bdb6:	4430      	add	r0, r6
   1bdb8:	3010      	adds	r0, #16
			*best_so_far = len;
   1bdba:	46a1      	mov	r9, r4
   1bdbc:	e7b1      	b.n	1bd22 <net_if_ipv6_select_src_addr+0x36>
		     iface++) {
			struct in6_addr *addr;

			addr = net_if_ipv6_get_best_match(iface, dst,
							  &best_match);
			if (addr) {
   1bdbe:	b150      	cbz	r0, 1bdd6 <net_if_ipv6_select_src_addr+0xea>
		     iface++) {
   1bdc0:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
   1bdc4:	4680      	mov	r8, r0
		for (iface = __net_if_start;
   1bdc6:	b947      	cbnz	r7, 1bdda <net_if_ipv6_select_src_addr+0xee>
		     !dst_iface && iface != __net_if_end;
   1bdc8:	4b45      	ldr	r3, [pc, #276]	; (1bee0 <net_if_ipv6_select_src_addr+0x1f4>)
   1bdca:	429e      	cmp	r6, r3
   1bdcc:	d005      	beq.n	1bdda <net_if_ipv6_select_src_addr+0xee>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bdce:	f04f 0e00 	mov.w	lr, #0
	struct in6_addr *src = NULL;
   1bdd2:	4670      	mov	r0, lr
   1bdd4:	e7a9      	b.n	1bd2a <net_if_ipv6_select_src_addr+0x3e>
			if (addr) {
   1bdd6:	4640      	mov	r0, r8
   1bdd8:	e7f2      	b.n	1bdc0 <net_if_ipv6_select_src_addr+0xd4>
				src = addr;
			}
		}

		/* If caller has supplied interface, then use that */
		if (dst_iface) {
   1bdda:	2f00      	cmp	r7, #0
   1bddc:	d073      	beq.n	1bec6 <net_if_ipv6_select_src_addr+0x1da>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bdde:	2500      	movs	r5, #0
	struct in6_addr *src = NULL;
   1bde0:	46a8      	mov	r8, r5
   1bde2:	e009      	b.n	1bdf8 <net_if_ipv6_select_src_addr+0x10c>
	    addr->address.family == AF_INET6 &&
   1bde4:	206c      	movs	r0, #108	; 0x6c
   1bde6:	fb00 7005 	mla	r0, r0, r5, r7
   1bdea:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1bdec:	280a      	cmp	r0, #10
   1bdee:	d01b      	beq.n	1be28 <net_if_ipv6_select_src_addr+0x13c>
	return false;
   1bdf0:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bdf2:	bb73      	cbnz	r3, 1be52 <net_if_ipv6_select_src_addr+0x166>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bdf4:	3501      	adds	r5, #1
   1bdf6:	b2ed      	uxtb	r5, r5
   1bdf8:	2d02      	cmp	r5, #2
   1bdfa:	d864      	bhi.n	1bec6 <net_if_ipv6_select_src_addr+0x1da>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bdfc:	462e      	mov	r6, r5
   1bdfe:	236c      	movs	r3, #108	; 0x6c
   1be00:	fb03 f305 	mul.w	r3, r3, r5
   1be04:	f103 0220 	add.w	r2, r3, #32
   1be08:	443a      	add	r2, r7
   1be0a:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1be0c:	443b      	add	r3, r7
   1be0e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1be12:	2b00      	cmp	r3, #0
   1be14:	d0ed      	beq.n	1bdf2 <net_if_ipv6_select_src_addr+0x106>
   1be16:	206c      	movs	r0, #108	; 0x6c
   1be18:	fb00 7005 	mla	r0, r0, r5, r7
   1be1c:	f990 0091 	ldrsb.w	r0, [r0, #145]	; 0x91
   1be20:	2801      	cmp	r0, #1
   1be22:	d0df      	beq.n	1bde4 <net_if_ipv6_select_src_addr+0xf8>
	return false;
   1be24:	2300      	movs	r3, #0
   1be26:	e7e4      	b.n	1bdf2 <net_if_ipv6_select_src_addr+0x106>
   1be28:	8890      	ldrh	r0, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1be2a:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1be2e:	4290      	cmp	r0, r2
   1be30:	d1df      	bne.n	1bdf2 <net_if_ipv6_select_src_addr+0x106>
	return false;
   1be32:	2300      	movs	r3, #0
   1be34:	e7dd      	b.n	1bdf2 <net_if_ipv6_select_src_addr+0x106>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1be36:	4054      	eors	r4, r2
			for (k = 0; k < 8; k++) {
   1be38:	2300      	movs	r3, #0
   1be3a:	2b07      	cmp	r3, #7
   1be3c:	d81b      	bhi.n	1be76 <net_if_ipv6_select_src_addr+0x18a>
				if (!(xor & 0x80)) {
   1be3e:	f014 0f80 	tst.w	r4, #128	; 0x80
   1be42:	d118      	bne.n	1be76 <net_if_ipv6_select_src_addr+0x18a>
					len++;
   1be44:	3001      	adds	r0, #1
   1be46:	b2c0      	uxtb	r0, r0
					xor <<= 1;
   1be48:	0064      	lsls	r4, r4, #1
   1be4a:	b2e4      	uxtb	r4, r4
			for (k = 0; k < 8; k++) {
   1be4c:	3301      	adds	r3, #1
   1be4e:	b2db      	uxtb	r3, r3
   1be50:	e7f3      	b.n	1be3a <net_if_ipv6_select_src_addr+0x14e>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1be52:	2000      	movs	r0, #0
   1be54:	4603      	mov	r3, r0
	for (j = 0; j < 16; j++) {
   1be56:	2b0f      	cmp	r3, #15
   1be58:	d80d      	bhi.n	1be76 <net_if_ipv6_select_src_addr+0x18a>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1be5a:	5ccc      	ldrb	r4, [r1, r3]
   1be5c:	226c      	movs	r2, #108	; 0x6c
   1be5e:	fb02 7206 	mla	r2, r2, r6, r7
   1be62:	441a      	add	r2, r3
   1be64:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1be68:	4294      	cmp	r4, r2
   1be6a:	d1e4      	bne.n	1be36 <net_if_ipv6_select_src_addr+0x14a>
			len += 8;
   1be6c:	3008      	adds	r0, #8
   1be6e:	b2c0      	uxtb	r0, r0
	for (j = 0; j < 16; j++) {
   1be70:	3301      	adds	r3, #1
   1be72:	b2db      	uxtb	r3, r3
   1be74:	e7ef      	b.n	1be56 <net_if_ipv6_select_src_addr+0x16a>
		if (len >= *best_so_far) {
   1be76:	4548      	cmp	r0, r9
   1be78:	d3bc      	bcc.n	1bdf4 <net_if_ipv6_select_src_addr+0x108>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1be7a:	f04f 086c 	mov.w	r8, #108	; 0x6c
   1be7e:	fb08 f806 	mul.w	r8, r8, r6
   1be82:	f108 0820 	add.w	r8, r8, #32
   1be86:	44b8      	add	r8, r7
   1be88:	f108 0810 	add.w	r8, r8, #16
			*best_so_far = len;
   1be8c:	4681      	mov	r9, r0
   1be8e:	e7b1      	b.n	1bdf4 <net_if_ipv6_select_src_addr+0x108>
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
		     iface++) {
   1be90:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
		for (iface = __net_if_start;
   1be94:	b97f      	cbnz	r7, 1beb6 <net_if_ipv6_select_src_addr+0x1ca>
		     !dst_iface && iface != __net_if_end;
   1be96:	4b12      	ldr	r3, [pc, #72]	; (1bee0 <net_if_ipv6_select_src_addr+0x1f4>)
   1be98:	429c      	cmp	r4, r3
   1be9a:	d009      	beq.n	1beb0 <net_if_ipv6_select_src_addr+0x1c4>
			struct in6_addr *addr;

			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   1be9c:	2101      	movs	r1, #1
   1be9e:	4620      	mov	r0, r4
   1bea0:	f7ff fef6 	bl	1bc90 <net_if_ipv6_get_ll>
			if (addr) {
   1bea4:	4680      	mov	r8, r0
   1bea6:	2800      	cmp	r0, #0
   1bea8:	d0f2      	beq.n	1be90 <net_if_ipv6_select_src_addr+0x1a4>
   1beaa:	e006      	b.n	1beba <net_if_ipv6_select_src_addr+0x1ce>
   1beac:	4c0b      	ldr	r4, [pc, #44]	; (1bedc <net_if_ipv6_select_src_addr+0x1f0>)
   1beae:	e7f1      	b.n	1be94 <net_if_ipv6_select_src_addr+0x1a8>
	struct in6_addr *src = NULL;
   1beb0:	f04f 0800 	mov.w	r8, #0
   1beb4:	e001      	b.n	1beba <net_if_ipv6_select_src_addr+0x1ce>
   1beb6:	f04f 0800 	mov.w	r8, #0
				src = addr;
				break;
			}
		}

		if (dst_iface) {
   1beba:	b127      	cbz	r7, 1bec6 <net_if_ipv6_select_src_addr+0x1da>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1bebc:	2101      	movs	r1, #1
   1bebe:	4638      	mov	r0, r7
   1bec0:	f7ff fee6 	bl	1bc90 <net_if_ipv6_get_ll>
   1bec4:	4680      	mov	r8, r0
		}
	}

	if (!src) {
   1bec6:	f1b8 0f00 	cmp.w	r8, #0
   1beca:	d002      	beq.n	1bed2 <net_if_ipv6_select_src_addr+0x1e6>
		return net_ipv6_unspecified_address();
	}

	return src;
   1becc:	4640      	mov	r0, r8
}
   1bece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return net_ipv6_unspecified_address();
   1bed2:	f003 fd67 	bl	1f9a4 <net_ipv6_unspecified_address>
   1bed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1beda:	bf00      	nop
   1bedc:	2000d2c0 	.word	0x2000d2c0
   1bee0:	2000d560 	.word	0x2000d560

0001bee4 <net_if_ipv6_calc_reachable_time>:

u32_t net_if_ipv6_calc_reachable_time(struct net_if *iface)
{
   1bee4:	b510      	push	{r4, lr}
   1bee6:	4604      	mov	r4, r0
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
		sys_rand32_get() %
   1bee8:	f7e6 f86a 	bl	1fc0 <sys_rand32_get>
		(MAX_RANDOM_FACTOR * iface->ipv6.base_reachable_time -
   1beec:	f8d4 3288 	ldr.w	r3, [r4, #648]	; 0x288
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
   1bef0:	fbb0 f2f3 	udiv	r2, r0, r3
		 MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time);
}
   1bef4:	fb03 0012 	mls	r0, r3, r2, r0
   1bef8:	bd10      	pop	{r4, pc}
	...

0001befc <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   1befc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1befe:	4605      	mov	r5, r0
   1bf00:	460e      	mov	r6, r1
   1bf02:	4617      	mov	r7, r2
	return list->head;
   1bf04:	4b11      	ldr	r3, [pc, #68]	; (1bf4c <net_if_call_link_cb+0x50>)
   1bf06:	681b      	ldr	r3, [r3, #0]
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1bf08:	b11b      	cbz	r3, 1bf12 <net_if_call_link_cb+0x16>
   1bf0a:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1bf0c:	b143      	cbz	r3, 1bf20 <net_if_call_link_cb+0x24>
	return node->next;
   1bf0e:	681c      	ldr	r4, [r3, #0]
   1bf10:	e006      	b.n	1bf20 <net_if_call_link_cb+0x24>
   1bf12:	461c      	mov	r4, r3
   1bf14:	e004      	b.n	1bf20 <net_if_call_link_cb+0x24>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1bf16:	4623      	mov	r3, r4
   1bf18:	e00e      	b.n	1bf38 <net_if_call_link_cb+0x3c>
   1bf1a:	4622      	mov	r2, r4
   1bf1c:	4623      	mov	r3, r4
   1bf1e:	4614      	mov	r4, r2
   1bf20:	b193      	cbz	r3, 1bf48 <net_if_call_link_cb+0x4c>
		link->cb(iface, lladdr, status);
   1bf22:	685b      	ldr	r3, [r3, #4]
   1bf24:	463a      	mov	r2, r7
   1bf26:	4631      	mov	r1, r6
   1bf28:	4628      	mov	r0, r5
   1bf2a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1bf2c:	2c00      	cmp	r4, #0
   1bf2e:	d0f4      	beq.n	1bf1a <net_if_call_link_cb+0x1e>
   1bf30:	4622      	mov	r2, r4
   1bf32:	2c00      	cmp	r4, #0
   1bf34:	d0ef      	beq.n	1bf16 <net_if_call_link_cb+0x1a>
	return node->next;
   1bf36:	6823      	ldr	r3, [r4, #0]
   1bf38:	b113      	cbz	r3, 1bf40 <net_if_call_link_cb+0x44>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1bf3a:	b11a      	cbz	r2, 1bf44 <net_if_call_link_cb+0x48>
	return node->next;
   1bf3c:	6822      	ldr	r2, [r4, #0]
   1bf3e:	e7ed      	b.n	1bf1c <net_if_call_link_cb+0x20>
   1bf40:	2200      	movs	r2, #0
   1bf42:	e7eb      	b.n	1bf1c <net_if_call_link_cb+0x20>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1bf44:	2200      	movs	r2, #0
   1bf46:	e7e9      	b.n	1bf1c <net_if_call_link_cb+0x20>
	}
}
   1bf48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bf4a:	bf00      	nop
   1bf4c:	20001c4c 	.word	0x20001c4c

0001bf50 <net_if_send_data>:
{
   1bf50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf54:	4606      	mov	r6, r0
   1bf56:	460c      	mov	r4, r1
	return pkt->context;
   1bf58:	68cf      	ldr	r7, [r1, #12]
	return &pkt->lladdr_src;
}

static inline struct net_linkaddr *net_pkt_ll_dst(struct net_pkt *pkt)
{
	return &pkt->lladdr_dst;
   1bf5a:	f101 0928 	add.w	r9, r1, #40	; 0x28
	return pkt->token;
   1bf5e:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1bf62:	f3bf 8f5b 	dmb	ish
   1bf66:	68c3      	ldr	r3, [r0, #12]
   1bf68:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1bf6c:	f013 0f01 	tst.w	r3, #1
   1bf70:	d10a      	bne.n	1bf88 <net_if_send_data+0x38>
		status = -ENETDOWN;
   1bf72:	f06f 0872 	mvn.w	r8, #114	; 0x72
		verdict = NET_DROP;
   1bf76:	2502      	movs	r5, #2
	if (context && verdict == NET_DROP) {
   1bf78:	b10f      	cbz	r7, 1bf7e <net_if_send_data+0x2e>
   1bf7a:	2d02      	cmp	r5, #2
   1bf7c:	d02e      	beq.n	1bfdc <net_if_send_data+0x8c>
	if (verdict == NET_DROP && dst->addr) {
   1bf7e:	2d02      	cmp	r5, #2
   1bf80:	d050      	beq.n	1c024 <net_if_send_data+0xd4>
}
   1bf82:	4628      	mov	r0, r5
   1bf84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf88:	f3bf 8f5b 	dmb	ish
   1bf8c:	68c3      	ldr	r3, [r0, #12]
   1bf8e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1bf92:	f013 0f02 	tst.w	r3, #2
   1bf96:	d101      	bne.n	1bf9c <net_if_send_data+0x4c>
	    !net_pkt_ll_src(pkt)->addr) {
   1bf98:	6a0b      	ldr	r3, [r1, #32]
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1bf9a:	b173      	cbz	r3, 1bfba <net_if_send_data+0x6a>
	return pkt->family;
   1bf9c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1bfa0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1bfa4:	2b0a      	cmp	r3, #10
   1bfa6:	d00f      	beq.n	1bfc8 <net_if_send_data+0x78>
   1bfa8:	4621      	mov	r1, r4
	verdict = iface->l2->send(iface, pkt);
   1bfaa:	6873      	ldr	r3, [r6, #4]
   1bfac:	685b      	ldr	r3, [r3, #4]
   1bfae:	4630      	mov	r0, r6
   1bfb0:	4798      	blx	r3
   1bfb2:	4605      	mov	r5, r0
	int status = -EIO;
   1bfb4:	f06f 0804 	mvn.w	r8, #4
   1bfb8:	e7de      	b.n	1bf78 <net_if_send_data+0x28>
	return net_if_get_link_addr(pkt->iface);
   1bfba:	694b      	ldr	r3, [r1, #20]
		net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   1bfbc:	691a      	ldr	r2, [r3, #16]
   1bfbe:	620a      	str	r2, [r1, #32]
		net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   1bfc0:	7d1b      	ldrb	r3, [r3, #20]
   1bfc2:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
   1bfc6:	e7e9      	b.n	1bf9c <net_if_send_data+0x4c>
		pkt = net_ipv6_prepare_for_send(pkt);
   1bfc8:	4620      	mov	r0, r4
   1bfca:	f005 f9fb 	bl	213c4 <net_ipv6_prepare_for_send>
		if (!pkt) {
   1bfce:	4601      	mov	r1, r0
   1bfd0:	2800      	cmp	r0, #0
   1bfd2:	d1ea      	bne.n	1bfaa <net_if_send_data+0x5a>
	int status = -EIO;
   1bfd4:	f06f 0804 	mvn.w	r8, #4
			verdict = NET_CONTINUE;
   1bfd8:	2501      	movs	r5, #1
   1bfda:	e7cd      	b.n	1bf78 <net_if_send_data+0x28>
	if (!context) {
   1bfdc:	2f00      	cmp	r7, #0
   1bfde:	d0ce      	beq.n	1bf7e <net_if_send_data+0x2e>
	if (context->send_cb) {
   1bfe0:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
   1bfe4:	f1bb 0f00 	cmp.w	fp, #0
   1bfe8:	d004      	beq.n	1bff4 <net_if_send_data+0xa4>
		context->send_cb(context, status, token, context->user_data);
   1bfea:	683b      	ldr	r3, [r7, #0]
   1bfec:	4652      	mov	r2, sl
   1bfee:	4641      	mov	r1, r8
   1bff0:	4638      	mov	r0, r7
   1bff2:	47d8      	blx	fp
static inline
enum net_ip_protocol net_context_get_ip_proto(struct net_context *context)
{
	NET_ASSERT(context);

	if (context->flags & NET_CONTEXT_PROTO) {
   1bff4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1bff8:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bffc:	d009      	beq.n	1c012 <net_if_send_data+0xc2>
		return IPPROTO_TCP;
   1bffe:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c000:	2b11      	cmp	r3, #17
   1c002:	d008      	beq.n	1c016 <net_if_send_data+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c004:	2b06      	cmp	r3, #6
   1c006:	d1ba      	bne.n	1bf7e <net_if_send_data+0x2e>
	net_stats.tcp.resent += bytes;
}

static inline void net_stats_update_tcp_seg_sent(void)
{
	net_stats.tcp.sent++;
   1c008:	4a0b      	ldr	r2, [pc, #44]	; (1c038 <net_if_send_data+0xe8>)
   1c00a:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1c00c:	3301      	adds	r3, #1
   1c00e:	6593      	str	r3, [r2, #88]	; 0x58
   1c010:	e7b5      	b.n	1bf7e <net_if_send_data+0x2e>
	}

	return IPPROTO_UDP;
   1c012:	2311      	movs	r3, #17
   1c014:	e7f4      	b.n	1c000 <net_if_send_data+0xb0>
	net_stats.udp.sent++;
   1c016:	4a08      	ldr	r2, [pc, #32]	; (1c038 <net_if_send_data+0xe8>)
   1c018:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1c01c:	3301      	adds	r3, #1
   1c01e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1c022:	e7ac      	b.n	1bf7e <net_if_send_data+0x2e>
	if (verdict == NET_DROP && dst->addr) {
   1c024:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c026:	2b00      	cmp	r3, #0
   1c028:	d0ab      	beq.n	1bf82 <net_if_send_data+0x32>
		net_if_call_link_cb(iface, dst, status);
   1c02a:	4642      	mov	r2, r8
   1c02c:	4649      	mov	r1, r9
   1c02e:	4630      	mov	r0, r6
   1c030:	f7ff ff64 	bl	1befc <net_if_call_link_cb>
   1c034:	e7a5      	b.n	1bf82 <net_if_send_data+0x32>
   1c036:	bf00      	nop
   1c038:	20002b50 	.word	0x20002b50

0001c03c <net_if_tx>:
{
   1c03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c040:	4606      	mov	r6, r0
	const struct net_if_api *api = iface->dev->driver_api;
   1c042:	f850 3b18 	ldr.w	r3, [r0], #24
   1c046:	f8d3 9004 	ldr.w	r9, [r3, #4]
	pkt = k_fifo_get(&iface->tx_queue, K_NO_WAIT);
   1c04a:	2100      	movs	r1, #0
   1c04c:	f00c fd56 	bl	28afc <k_queue_get>
	if (!pkt) {
   1c050:	2800      	cmp	r0, #0
   1c052:	d062      	beq.n	1c11a <net_if_tx+0xde>
   1c054:	4605      	mov	r5, r0
	return &pkt->lladdr_dst;
   1c056:	f100 0828 	add.w	r8, r0, #40	; 0x28
	return pkt->context;
   1c05a:	68c7      	ldr	r7, [r0, #12]
	return pkt->token;
   1c05c:	f8d0 a010 	ldr.w	sl, [r0, #16]
   1c060:	f3bf 8f5b 	dmb	ish
   1c064:	68f3      	ldr	r3, [r6, #12]
   1c066:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1c06a:	f013 0f01 	tst.w	r3, #1
   1c06e:	d039      	beq.n	1c0e4 <net_if_tx+0xa8>
	return net_buf_frags_len(pkt->frags);
   1c070:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1c072:	2400      	movs	r4, #0
   1c074:	e002      	b.n	1c07c <net_if_tx+0x40>
		bytes += buf->len;
   1c076:	899a      	ldrh	r2, [r3, #12]
   1c078:	4414      	add	r4, r2
		buf = buf->frags;
   1c07a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c07c:	2b00      	cmp	r3, #0
   1c07e:	d1fa      	bne.n	1c076 <net_if_tx+0x3a>
	pkt->sent_or_eof = sent;
   1c080:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
	pkt->pkt_queued = send;
   1c084:	f043 0301 	orr.w	r3, r3, #1
   1c088:	f36f 0341 	bfc	r3, #1, #1
   1c08c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		status = api->send(iface, pkt);
   1c090:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1c094:	4629      	mov	r1, r5
   1c096:	4630      	mov	r0, r6
   1c098:	4798      	blx	r3
   1c09a:	4681      	mov	r9, r0
	if (status < 0) {
   1c09c:	f1b9 0f00 	cmp.w	r9, #0
   1c0a0:	db23      	blt.n	1c0ea <net_if_tx+0xae>
	net_stats.bytes.sent += bytes;
   1c0a2:	4a21      	ldr	r2, [pc, #132]	; (1c128 <net_if_tx+0xec>)
   1c0a4:	6853      	ldr	r3, [r2, #4]
   1c0a6:	441c      	add	r4, r3
   1c0a8:	6054      	str	r4, [r2, #4]
	if (context) {
   1c0aa:	b18f      	cbz	r7, 1c0d0 <net_if_tx+0x94>
	if (!context) {
   1c0ac:	b187      	cbz	r7, 1c0d0 <net_if_tx+0x94>
	if (context->send_cb) {
   1c0ae:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   1c0b0:	b124      	cbz	r4, 1c0bc <net_if_tx+0x80>
		context->send_cb(context, status, token, context->user_data);
   1c0b2:	683b      	ldr	r3, [r7, #0]
   1c0b4:	4652      	mov	r2, sl
   1c0b6:	4649      	mov	r1, r9
   1c0b8:	4638      	mov	r0, r7
   1c0ba:	47a0      	blx	r4
	if (context->flags & NET_CONTEXT_PROTO) {
   1c0bc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1c0c0:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c0c4:	d01b      	beq.n	1c0fe <net_if_tx+0xc2>
		return IPPROTO_TCP;
   1c0c6:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c0c8:	2b11      	cmp	r3, #17
   1c0ca:	d01a      	beq.n	1c102 <net_if_tx+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c0cc:	2b06      	cmp	r3, #6
   1c0ce:	d01f      	beq.n	1c110 <net_if_tx+0xd4>
	if (dst->addr) {
   1c0d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c0d2:	b32b      	cbz	r3, 1c120 <net_if_tx+0xe4>
		net_if_call_link_cb(iface, dst, status);
   1c0d4:	464a      	mov	r2, r9
   1c0d6:	4641      	mov	r1, r8
   1c0d8:	4630      	mov	r0, r6
   1c0da:	f7ff ff0f 	bl	1befc <net_if_call_link_cb>
	return true;
   1c0de:	2001      	movs	r0, #1
   1c0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status = -ENETDOWN;
   1c0e4:	f06f 0972 	mvn.w	r9, #114	; 0x72
   1c0e8:	e7d8      	b.n	1c09c <net_if_tx+0x60>
	pkt->sent_or_eof = sent;
   1c0ea:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1c0ee:	f36f 0300 	bfc	r3, #0, #1
   1c0f2:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		net_pkt_unref(pkt);
   1c0f6:	4628      	mov	r0, r5
   1c0f8:	f001 fa93 	bl	1d622 <net_pkt_unref>
   1c0fc:	e7d5      	b.n	1c0aa <net_if_tx+0x6e>
	return IPPROTO_UDP;
   1c0fe:	2311      	movs	r3, #17
   1c100:	e7e2      	b.n	1c0c8 <net_if_tx+0x8c>
	net_stats.udp.sent++;
   1c102:	4a09      	ldr	r2, [pc, #36]	; (1c128 <net_if_tx+0xec>)
   1c104:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1c108:	3301      	adds	r3, #1
   1c10a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1c10e:	e7df      	b.n	1c0d0 <net_if_tx+0x94>
	net_stats.tcp.sent++;
   1c110:	4a05      	ldr	r2, [pc, #20]	; (1c128 <net_if_tx+0xec>)
   1c112:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1c114:	3301      	adds	r3, #1
   1c116:	6593      	str	r3, [r2, #88]	; 0x58
   1c118:	e7da      	b.n	1c0d0 <net_if_tx+0x94>
		return false;
   1c11a:	2000      	movs	r0, #0
   1c11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return true;
   1c120:	2001      	movs	r0, #1
}
   1c122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c126:	bf00      	nop
   1c128:	20002b50 	.word	0x20002b50

0001c12c <net_if_flush_tx>:
	return (!list->head);
   1c12c:	6983      	ldr	r3, [r0, #24]
	if (k_fifo_is_empty(&iface->tx_queue)) {
   1c12e:	b14b      	cbz	r3, 1c144 <net_if_flush_tx+0x18>
{
   1c130:	b510      	push	{r4, lr}
   1c132:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1c134:	f00c fef8 	bl	28f28 <_impl_k_yield>
		if (!net_if_tx(iface)) {
   1c138:	4620      	mov	r0, r4
   1c13a:	f7ff ff7f 	bl	1c03c <net_if_tx>
   1c13e:	2800      	cmp	r0, #0
   1c140:	d1fa      	bne.n	1c138 <net_if_flush_tx+0xc>
   1c142:	bd10      	pop	{r4, pc}
   1c144:	4770      	bx	lr

0001c146 <net_if_process_events>:
{
   1c146:	b538      	push	{r3, r4, r5, lr}
   1c148:	4604      	mov	r4, r0
   1c14a:	460d      	mov	r5, r1
	for (; ev_count; event++, ev_count--) {
   1c14c:	e001      	b.n	1c152 <net_if_process_events+0xc>
   1c14e:	3414      	adds	r4, #20
   1c150:	3d01      	subs	r5, #1
   1c152:	b145      	cbz	r5, 1c166 <net_if_process_events+0x20>
		switch (event->state) {
   1c154:	7b63      	ldrb	r3, [r4, #13]
   1c156:	091b      	lsrs	r3, r3, #4
   1c158:	2b04      	cmp	r3, #4
   1c15a:	d1f8      	bne.n	1c14e <net_if_process_events+0x8>
			iface = CONTAINER_OF(event->fifo, struct net_if,
   1c15c:	6920      	ldr	r0, [r4, #16]
			net_if_tx(iface);
   1c15e:	3818      	subs	r0, #24
   1c160:	f7ff ff6c 	bl	1c03c <net_if_tx>
			break;
   1c164:	e7f3      	b.n	1c14e <net_if_process_events+0x8>
}
   1c166:	bd38      	pop	{r3, r4, r5, pc}

0001c168 <net_if_tx_thread>:
{
   1c168:	b538      	push	{r3, r4, r5, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1c16a:	f00d f836 	bl	291da <_impl_k_sem_give>
		ev_count = net_if_prepare_events();
   1c16e:	f7ff f849 	bl	1b204 <net_if_prepare_events>
   1c172:	4605      	mov	r5, r0
		ret = k_poll(__net_if_event_start, ev_count, K_FOREVER);
   1c174:	4c06      	ldr	r4, [pc, #24]	; (1c190 <net_if_tx_thread+0x28>)
   1c176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c17a:	4601      	mov	r1, r0
   1c17c:	4620      	mov	r0, r4
   1c17e:	f00c f98b 	bl	28498 <k_poll>
		net_if_process_events(__net_if_event_start, ev_count);
   1c182:	4629      	mov	r1, r5
   1c184:	4620      	mov	r0, r4
   1c186:	f7ff ffde 	bl	1c146 <net_if_process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1c18a:	f00c fecd 	bl	28f28 <_impl_k_yield>
   1c18e:	e7ee      	b.n	1c16e <net_if_tx_thread+0x6>
   1c190:	2000d560 	.word	0x2000d560

0001c194 <net_if_get_by_index>:

struct net_if *net_if_get_by_index(u8_t index)
{
	if (&__net_if_start[index] >= __net_if_end) {
   1c194:	4a05      	ldr	r2, [pc, #20]	; (1c1ac <net_if_get_by_index+0x18>)
   1c196:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   1c19a:	fb03 2000 	mla	r0, r3, r0, r2
   1c19e:	4b04      	ldr	r3, [pc, #16]	; (1c1b0 <net_if_get_by_index+0x1c>)
   1c1a0:	4298      	cmp	r0, r3
   1c1a2:	d200      	bcs.n	1c1a6 <net_if_get_by_index+0x12>
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index];
}
   1c1a4:	4770      	bx	lr
		return NULL;
   1c1a6:	2000      	movs	r0, #0
   1c1a8:	e7fc      	b.n	1c1a4 <net_if_get_by_index+0x10>
   1c1aa:	bf00      	nop
   1c1ac:	2000d2c0 	.word	0x2000d2c0
   1c1b0:	2000d560 	.word	0x2000d560

0001c1b4 <net_if_get_by_iface>:

u8_t net_if_get_by_iface(struct net_if *iface)
{
	NET_ASSERT(iface >= __net_if_start && iface < __net_if_end);

	return iface - __net_if_start;
   1c1b4:	4b03      	ldr	r3, [pc, #12]	; (1c1c4 <net_if_get_by_iface+0x10>)
   1c1b6:	1ac0      	subs	r0, r0, r3
   1c1b8:	1140      	asrs	r0, r0, #5
   1c1ba:	4b03      	ldr	r3, [pc, #12]	; (1c1c8 <net_if_get_by_iface+0x14>)
   1c1bc:	fb03 f000 	mul.w	r0, r3, r0
}
   1c1c0:	b2c0      	uxtb	r0, r0
   1c1c2:	4770      	bx	lr
   1c1c4:	2000d2c0 	.word	0x2000d2c0
   1c1c8:	3cf3cf3d 	.word	0x3cf3cf3d

0001c1cc <net_if_foreach>:

void net_if_foreach(net_if_cb_t cb, void *user_data)
{
   1c1cc:	b570      	push	{r4, r5, r6, lr}
   1c1ce:	4606      	mov	r6, r0
   1c1d0:	460d      	mov	r5, r1
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c1d2:	4c05      	ldr	r4, [pc, #20]	; (1c1e8 <net_if_foreach+0x1c>)
   1c1d4:	e004      	b.n	1c1e0 <net_if_foreach+0x14>
		cb(iface, user_data);
   1c1d6:	4629      	mov	r1, r5
   1c1d8:	4620      	mov	r0, r4
   1c1da:	47b0      	blx	r6
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c1dc:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1c1e0:	4b02      	ldr	r3, [pc, #8]	; (1c1ec <net_if_foreach+0x20>)
   1c1e2:	429c      	cmp	r4, r3
   1c1e4:	d1f7      	bne.n	1c1d6 <net_if_foreach+0xa>
	}
}
   1c1e6:	bd70      	pop	{r4, r5, r6, pc}
   1c1e8:	2000d2c0 	.word	0x2000d2c0
   1c1ec:	2000d560 	.word	0x2000d560

0001c1f0 <net_if_up>:

int net_if_up(struct net_if *iface)
{
   1c1f0:	b570      	push	{r4, r5, r6, lr}
   1c1f2:	f3bf 8f5b 	dmb	ish
   1c1f6:	68c5      	ldr	r5, [r0, #12]
   1c1f8:	f3bf 8f5b 	dmb	ish
	int status;

	NET_DBG("iface %p", iface);

	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1c1fc:	f015 0501 	ands.w	r5, r5, #1
   1c200:	d123      	bne.n	1c24a <net_if_up+0x5a>
   1c202:	f100 060c 	add.w	r6, r0, #12
   1c206:	4604      	mov	r4, r0
		return 0;
	}

	/* If the L2 does not support enable just set the flag */
	if (!iface->l2->enable) {
   1c208:	6843      	ldr	r3, [r0, #4]
   1c20a:	68db      	ldr	r3, [r3, #12]
   1c20c:	b11b      	cbz	r3, 1c216 <net_if_up+0x26>
		goto done;
	}

	/* Notify L2 to enable the interface */
	status = iface->l2->enable(iface, true);
   1c20e:	2101      	movs	r1, #1
   1c210:	4798      	blx	r3
	if (status < 0) {
   1c212:	2800      	cmp	r0, #0
   1c214:	db1b      	blt.n	1c24e <net_if_up+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c216:	f3bf 8f5b 	dmb	ish
   1c21a:	e856 3f00 	ldrex	r3, [r6]
   1c21e:	f043 0301 	orr.w	r3, r3, #1
   1c222:	e846 3200 	strex	r2, r3, [r6]
   1c226:	2a00      	cmp	r2, #0
   1c228:	d1f7      	bne.n	1c21a <net_if_up+0x2a>
   1c22a:	f3bf 8f5b 	dmb	ish
done:
	atomic_set_bit(iface->flags, NET_IF_UP);

#if defined(CONFIG_NET_IPV6_DAD)
	NET_DBG("Starting DAD for iface %p", iface);
	net_if_start_dad(iface);
   1c22e:	4620      	mov	r0, r4
   1c230:	f7ff f91e 	bl	1b470 <net_if_start_dad>
	join_mcast_solicit_node(iface, &iface->ipv6.mcast[0].address.in6_addr);
#endif

#if defined(CONFIG_NET_IPV6_ND)
	NET_DBG("Starting ND/RS for iface %p", iface);
	net_if_start_rs(iface);
   1c234:	4620      	mov	r0, r4
   1c236:	f7ff f821 	bl	1b27c <net_if_start_rs>
   1c23a:	2300      	movs	r3, #0
   1c23c:	461a      	mov	r2, r3
   1c23e:	4621      	mov	r1, r4
   1c240:	4804      	ldr	r0, [pc, #16]	; (1c254 <net_if_up+0x64>)
   1c242:	f006 fe61 	bl	22f08 <net_mgmt_event_notify_with_info>
#endif

	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   1c246:	4628      	mov	r0, r5
   1c248:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   1c24a:	2500      	movs	r5, #0
   1c24c:	e7fb      	b.n	1c246 <net_if_up+0x56>
		return status;
   1c24e:	4605      	mov	r5, r0
   1c250:	e7f9      	b.n	1c246 <net_if_up+0x56>
   1c252:	bf00      	nop
   1c254:	d0010002 	.word	0xd0010002

0001c258 <net_if_down>:

int net_if_down(struct net_if *iface)
{
   1c258:	b510      	push	{r4, lr}
   1c25a:	4604      	mov	r4, r0
	int status;

	NET_DBG("iface %p", iface);

	leave_mcast_all(iface);
   1c25c:	f7fe ffaf 	bl	1b1be <leave_mcast_all>

	net_if_flush_tx(iface);
   1c260:	4620      	mov	r0, r4
   1c262:	f7ff ff63 	bl	1c12c <net_if_flush_tx>

	/* If the L2 does not support enable just clear the flag */
	if (!iface->l2->enable) {
   1c266:	6863      	ldr	r3, [r4, #4]
   1c268:	68db      	ldr	r3, [r3, #12]
   1c26a:	b123      	cbz	r3, 1c276 <net_if_down+0x1e>
		goto done;
	}

	/* Notify L2 to disable the interface */
	status = iface->l2->enable(iface, false);
   1c26c:	2100      	movs	r1, #0
   1c26e:	4620      	mov	r0, r4
   1c270:	4798      	blx	r3
	if (status < 0) {
   1c272:	2800      	cmp	r0, #0
   1c274:	db14      	blt.n	1c2a0 <net_if_down+0x48>
		return status;
	}

done:
	atomic_clear_bit(iface->flags, NET_IF_UP);
   1c276:	f104 030c 	add.w	r3, r4, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c27a:	f3bf 8f5b 	dmb	ish
   1c27e:	e853 2f00 	ldrex	r2, [r3]
   1c282:	f022 0201 	bic.w	r2, r2, #1
   1c286:	e843 2100 	strex	r1, r2, [r3]
   1c28a:	2900      	cmp	r1, #0
   1c28c:	d1f7      	bne.n	1c27e <net_if_down+0x26>
   1c28e:	f3bf 8f5b 	dmb	ish
   1c292:	2300      	movs	r3, #0
   1c294:	461a      	mov	r2, r3
   1c296:	4621      	mov	r1, r4
   1c298:	4802      	ldr	r0, [pc, #8]	; (1c2a4 <net_if_down+0x4c>)
   1c29a:	f006 fe35 	bl	22f08 <net_mgmt_event_notify_with_info>

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);

	return 0;
   1c29e:	2000      	movs	r0, #0
}
   1c2a0:	bd10      	pop	{r4, pc}
   1c2a2:	bf00      	nop
   1c2a4:	d0010001 	.word	0xd0010001

0001c2a8 <net_if_init>:

void net_if_init(struct k_sem *startup_sync)
{
   1c2a8:	b570      	push	{r4, r5, r6, lr}
   1c2aa:	b086      	sub	sp, #24
   1c2ac:	4606      	mov	r6, r0
	struct net_if *iface;

	NET_DBG("");

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c2ae:	4c1b      	ldr	r4, [pc, #108]	; (1c31c <net_if_init+0x74>)
   1c2b0:	e01b      	b.n	1c2ea <net_if_init+0x42>
	const struct net_if_api *api = iface->dev->driver_api;
   1c2b2:	4620      	mov	r0, r4
   1c2b4:	f850 3b18 	ldr.w	r3, [r0], #24
   1c2b8:	685d      	ldr	r5, [r3, #4]
	k_fifo_init(&iface->tx_queue);
   1c2ba:	f00c fbc4 	bl	28a46 <k_queue_init>
	api->init(iface);
   1c2be:	682b      	ldr	r3, [r5, #0]
   1c2c0:	4620      	mov	r0, r4
   1c2c2:	4798      	blx	r3
#if defined(CONFIG_NET_IPV4)
		iface->ipv4.ttl = CONFIG_NET_INITIAL_TTL;
#endif

#if defined(CONFIG_NET_IPV6)
		iface->ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   1c2c4:	2340      	movs	r3, #64	; 0x40
   1c2c6:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
		iface->ipv6.base_reachable_time = REACHABLE_TIME;
   1c2ca:	f247 5330 	movw	r3, #30000	; 0x7530
   1c2ce:	f8c4 3288 	str.w	r3, [r4, #648]	; 0x288
 *
 * @param iface Network interface
 */
static inline void net_if_ipv6_set_reachable_time(struct net_if *iface)
{
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1c2d2:	4620      	mov	r0, r4
   1c2d4:	f7ff fe06 	bl	1bee4 <net_if_ipv6_calc_reachable_time>
   1c2d8:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c

		net_if_ipv6_set_reachable_time(iface);

#if defined(CONFIG_NET_IPV6_ND)
		k_delayed_work_init(&iface->ipv6.rs_timer, rs_timeout);
   1c2dc:	4910      	ldr	r1, [pc, #64]	; (1c320 <net_if_init+0x78>)
   1c2de:	f504 7018 	add.w	r0, r4, #608	; 0x260
   1c2e2:	f00d fd4b 	bl	29d7c <k_delayed_work_init>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c2e6:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1c2ea:	4b0e      	ldr	r3, [pc, #56]	; (1c324 <net_if_init+0x7c>)
   1c2ec:	429c      	cmp	r4, r3
   1c2ee:	d1e0      	bne.n	1c2b2 <net_if_init+0xa>
#endif
#endif
	}

	if (iface == __net_if_start) {
   1c2f0:	4b0a      	ldr	r3, [pc, #40]	; (1c31c <net_if_init+0x74>)
   1c2f2:	429c      	cmp	r4, r3
   1c2f4:	d010      	beq.n	1c318 <net_if_init+0x70>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1c2f6:	2300      	movs	r3, #0
   1c2f8:	9305      	str	r3, [sp, #20]
   1c2fa:	2201      	movs	r2, #1
   1c2fc:	9204      	str	r2, [sp, #16]
   1c2fe:	f06f 0208 	mvn.w	r2, #8
   1c302:	9203      	str	r2, [sp, #12]
   1c304:	9302      	str	r3, [sp, #8]
   1c306:	9301      	str	r3, [sp, #4]
   1c308:	9600      	str	r6, [sp, #0]
   1c30a:	4b07      	ldr	r3, [pc, #28]	; (1c328 <net_if_init+0x80>)
   1c30c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1c310:	4906      	ldr	r1, [pc, #24]	; (1c32c <net_if_init+0x84>)
   1c312:	4807      	ldr	r0, [pc, #28]	; (1c330 <net_if_init+0x88>)
   1c314:	f00d f9e0 	bl	296d8 <_impl_k_thread_create>
	k_thread_create(&tx_thread_data, tx_stack,
			K_THREAD_STACK_SIZEOF(tx_stack),
			(k_thread_entry_t)net_if_tx_thread,
			startup_sync, NULL, NULL, K_PRIO_COOP(7),
			K_ESSENTIAL, K_NO_WAIT);
}
   1c318:	b006      	add	sp, #24
   1c31a:	bd70      	pop	{r4, r5, r6, pc}
   1c31c:	2000d2c0 	.word	0x2000d2c0
   1c320:	0001b29d 	.word	0x0001b29d
   1c324:	2000d560 	.word	0x2000d560
   1c328:	0001c169 	.word	0x0001c169
   1c32c:	20004e38 	.word	0x20004e38
   1c330:	20000490 	.word	0x20000490

0001c334 <net_if_post_init>:

void net_if_post_init(void)
{
   1c334:	b510      	push	{r4, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c336:	4c05      	ldr	r4, [pc, #20]	; (1c34c <net_if_post_init+0x18>)
   1c338:	e004      	b.n	1c344 <net_if_post_init+0x10>
		net_if_up(iface);
   1c33a:	4620      	mov	r0, r4
   1c33c:	f7ff ff58 	bl	1c1f0 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c340:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1c344:	4b02      	ldr	r3, [pc, #8]	; (1c350 <net_if_post_init+0x1c>)
   1c346:	429c      	cmp	r4, r3
   1c348:	d1f7      	bne.n	1c33a <net_if_post_init+0x6>

	/* RPL init must be done after the network interface is up
	 * as the RPL code wants to add multicast address to interface.
	 */
	net_rpl_init();
}
   1c34a:	bd10      	pop	{r4, pc}
   1c34c:	2000d2c0 	.word	0x2000d2c0
   1c350:	2000d560 	.word	0x2000d560

0001c354 <check_used_port>:

static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   1c354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c356:	4605      	mov	r5, r0
   1c358:	460e      	mov	r6, r1
   1c35a:	4617      	mov	r7, r2
	int i;

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c35c:	2400      	movs	r4, #0
   1c35e:	e003      	b.n	1c368 <check_used_port+0x14>
   1c360:	2311      	movs	r3, #17
		if (!net_context_is_used(&contexts[i])) {
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1c362:	42ab      	cmp	r3, r5
   1c364:	d010      	beq.n	1c388 <check_used_port+0x34>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c366:	3401      	adds	r4, #1
   1c368:	2c05      	cmp	r4, #5
   1c36a:	dc2b      	bgt.n	1c3c4 <check_used_port+0x70>
	return context->flags & NET_CONTEXT_IN_USE;
   1c36c:	2368      	movs	r3, #104	; 0x68
   1c36e:	4a16      	ldr	r2, [pc, #88]	; (1c3c8 <check_used_port+0x74>)
   1c370:	fb03 2304 	mla	r3, r3, r4, r2
   1c374:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1c378:	f013 0f01 	tst.w	r3, #1
   1c37c:	d0f3      	beq.n	1c366 <check_used_port+0x12>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c37e:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c382:	d0ed      	beq.n	1c360 <check_used_port+0xc>
		return IPPROTO_TCP;
   1c384:	2306      	movs	r3, #6
   1c386:	e7ec      	b.n	1c362 <check_used_port+0xe>
		      net_sin((struct sockaddr *)&
   1c388:	2368      	movs	r3, #104	; 0x68
   1c38a:	fb03 f304 	mul.w	r3, r3, r4
   1c38e:	3308      	adds	r3, #8
   1c390:	4a0d      	ldr	r2, [pc, #52]	; (1c3c8 <check_used_port+0x74>)
   1c392:	4413      	add	r3, r2
			      contexts[i].local)->sin_port == local_port)) {
   1c394:	885a      	ldrh	r2, [r3, #2]
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1c396:	42b2      	cmp	r2, r6
   1c398:	d1e5      	bne.n	1c366 <check_used_port+0x12>
			continue;
		}

		if (local_addr->sa_family == AF_INET6) {
   1c39a:	883a      	ldrh	r2, [r7, #0]
   1c39c:	2a0a      	cmp	r2, #10
   1c39e:	d007      	beq.n	1c3b0 <check_used_port+0x5c>
				      local_addr)->sin6_addr)) {
				return -EEXIST;
			}
		} else {
			if (net_ipv4_addr_cmp(
				    net_sin_ptr(&contexts[i].local)->
   1c3a0:	685b      	ldr	r3, [r3, #4]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1c3a2:	681a      	ldr	r2, [r3, #0]
   1c3a4:	687b      	ldr	r3, [r7, #4]
			if (net_ipv4_addr_cmp(
   1c3a6:	429a      	cmp	r2, r3
   1c3a8:	d1dd      	bne.n	1c366 <check_used_port+0x12>
							      sin_addr,
				    &((struct sockaddr_in *)
				      local_addr)->sin_addr)) {
				return -EEXIST;
   1c3aa:	f06f 0010 	mvn.w	r0, #16
			}
		}
	}

	return 0;
}
   1c3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1c3b0:	2210      	movs	r2, #16
   1c3b2:	1d39      	adds	r1, r7, #4
   1c3b4:	6858      	ldr	r0, [r3, #4]
   1c3b6:	f00d fe4f 	bl	2a058 <memcmp>
			if (net_ipv6_addr_cmp(
   1c3ba:	2800      	cmp	r0, #0
   1c3bc:	d1d3      	bne.n	1c366 <check_used_port+0x12>
				return -EEXIST;
   1c3be:	f06f 0010 	mvn.w	r0, #16
   1c3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
   1c3c4:	2000      	movs	r0, #0
   1c3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c3c8:	20001ca0 	.word	0x20001ca0

0001c3cc <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   1c3cc:	b570      	push	{r4, r5, r6, lr}
   1c3ce:	4606      	mov	r6, r0
   1c3d0:	460d      	mov	r5, r1
	if (!net_sin(addr)->sin_port) {
   1c3d2:	884c      	ldrh	r4, [r1, #2]
   1c3d4:	b16c      	cbz	r4, 1c3f2 <find_available_port+0x26>

		return htons(local_port);
	}

	return net_sin(addr)->sin_port;
}
   1c3d6:	4620      	mov	r0, r4
   1c3d8:	bd70      	pop	{r4, r5, r6, pc}
	return IPPROTO_UDP;
   1c3da:	2011      	movs	r0, #17
				 htons(local_port), addr) == -EEXIST);
   1c3dc:	0a1c      	lsrs	r4, r3, #8
   1c3de:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
		} while (check_used_port(
   1c3e2:	b29c      	uxth	r4, r3
   1c3e4:	462a      	mov	r2, r5
   1c3e6:	4621      	mov	r1, r4
   1c3e8:	f7ff ffb4 	bl	1c354 <check_used_port>
				 htons(local_port), addr) == -EEXIST);
   1c3ec:	f110 0f11 	cmn.w	r0, #17
   1c3f0:	d1f1      	bne.n	1c3d6 <find_available_port+0xa>
			local_port = sys_rand32_get() | 0x8000;
   1c3f2:	f7e5 fde5 	bl	1fc0 <sys_rand32_get>
   1c3f6:	ea6f 4040 	mvn.w	r0, r0, lsl #17
   1c3fa:	ea6f 4050 	mvn.w	r0, r0, lsr #17
   1c3fe:	b283      	uxth	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1c400:	f896 205d 	ldrb.w	r2, [r6, #93]	; 0x5d
   1c404:	f012 0f40 	tst.w	r2, #64	; 0x40
   1c408:	d0e7      	beq.n	1c3da <find_available_port+0xe>
		return IPPROTO_TCP;
   1c40a:	2006      	movs	r0, #6
   1c40c:	e7e6      	b.n	1c3dc <find_available_port+0x10>

0001c40e <queue_fin>:
	return ret;
}

#if defined(CONFIG_NET_TCP)
static void queue_fin(struct net_context *ctx)
{
   1c40e:	b500      	push	{lr}
   1c410:	b087      	sub	sp, #28
   1c412:	4603      	mov	r3, r0
	struct net_pkt *pkt = NULL;
   1c414:	2200      	movs	r2, #0
   1c416:	a906      	add	r1, sp, #24
   1c418:	f841 2d04 	str.w	r2, [r1, #-4]!
	int ret;

	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1c41c:	6e00      	ldr	r0, [r0, #96]	; 0x60
				      NULL, &ctx->remote, &pkt);
   1c41e:	3314      	adds	r3, #20
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1c420:	9102      	str	r1, [sp, #8]
   1c422:	9301      	str	r3, [sp, #4]
   1c424:	9200      	str	r2, [sp, #0]
   1c426:	4613      	mov	r3, r2
   1c428:	2101      	movs	r1, #1
   1c42a:	f007 f9dd 	bl	237e8 <net_tcp_prepare_segment>
	if (ret || !pkt) {
   1c42e:	b928      	cbnz	r0, 1c43c <queue_fin+0x2e>
   1c430:	9805      	ldr	r0, [sp, #20]
   1c432:	b118      	cbz	r0, 1c43c <queue_fin+0x2e>
		return;
	}

	ret = net_tcp_send_pkt(pkt);
   1c434:	f007 fcdc 	bl	23df0 <net_tcp_send_pkt>
	if (ret < 0) {
   1c438:	2800      	cmp	r0, #0
   1c43a:	db02      	blt.n	1c442 <queue_fin+0x34>
		net_pkt_unref(pkt);
	}
}
   1c43c:	b007      	add	sp, #28
   1c43e:	f85d fb04 	ldr.w	pc, [sp], #4
		net_pkt_unref(pkt);
   1c442:	9805      	ldr	r0, [sp, #20]
   1c444:	f001 f8ed 	bl	1d622 <net_pkt_unref>
   1c448:	e7f8      	b.n	1c43c <queue_fin+0x2e>

0001c44a <tcp_hdr_len>:

	return ret;
}

static int tcp_hdr_len(struct net_pkt *pkt)
{
   1c44a:	b500      	push	{lr}
   1c44c:	b087      	sub	sp, #28
	struct net_tcp_hdr hdr, *tcp_hdr;

	/* "Offset": 4-bit field in high nibble, units of dwords */
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1c44e:	a901      	add	r1, sp, #4
   1c450:	f007 fb1c 	bl	23a8c <net_tcp_get_hdr>
	if (tcp_hdr) {
   1c454:	b128      	cbz	r0, 1c462 <tcp_hdr_len+0x18>
		return 4 * (tcp_hdr->offset >> 4);
   1c456:	7b00      	ldrb	r0, [r0, #12]
   1c458:	0900      	lsrs	r0, r0, #4
   1c45a:	0080      	lsls	r0, r0, #2
	}

	return 0;
}
   1c45c:	b007      	add	sp, #28
   1c45e:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
   1c462:	2000      	movs	r0, #0
   1c464:	e7fa      	b.n	1c45c <tcp_hdr_len+0x12>

0001c466 <set_appdata_values>:

	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
}

static void set_appdata_values(struct net_pkt *pkt, enum net_ip_protocol proto)
{
   1c466:	b570      	push	{r4, r5, r6, lr}
   1c468:	b082      	sub	sp, #8
   1c46a:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   1c46c:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1c46e:	2400      	movs	r4, #0
   1c470:	e002      	b.n	1c478 <set_appdata_values+0x12>
		bytes += buf->len;
   1c472:	899a      	ldrh	r2, [r3, #12]
   1c474:	4414      	add	r4, r2
		buf = buf->frags;
   1c476:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c478:	2b00      	cmp	r3, #0
   1c47a:	d1fa      	bne.n	1c472 <set_appdata_values+0xc>
	u16_t proto_len = 0;
	struct net_buf *frag;
	u16_t offset;

#if defined(CONFIG_NET_UDP)
	if (proto == IPPROTO_UDP) {
   1c47c:	2911      	cmp	r1, #17
   1c47e:	d020      	beq.n	1c4c2 <set_appdata_values+0x5c>
	u16_t proto_len = 0;
   1c480:	2600      	movs	r6, #0
		proto_len = sizeof(struct net_udp_hdr);
	}
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (proto == IPPROTO_TCP) {
   1c482:	2906      	cmp	r1, #6
   1c484:	d01f      	beq.n	1c4c6 <set_appdata_values+0x60>
		proto_len = tcp_hdr_len(pkt);
	}
#endif /* CONFIG_NET_TCP */

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1c486:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1c48a:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1c48e:	4419      	add	r1, r3
   1c490:	4431      	add	r1, r6
   1c492:	f10d 0206 	add.w	r2, sp, #6
   1c496:	b289      	uxth	r1, r1
   1c498:	4628      	mov	r0, r5
   1c49a:	f001 fb91 	bl	1dbc0 <net_frag_get_pos>
				proto_len,
				&offset);
	if (frag) {
   1c49e:	b120      	cbz	r0, 1c4aa <set_appdata_values+0x44>
		net_pkt_set_appdata(pkt, frag->data + offset);
   1c4a0:	6883      	ldr	r3, [r0, #8]
   1c4a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1c4a6:	4413      	add	r3, r2
	pkt->appdata = data;
   1c4a8:	61ab      	str	r3, [r5, #24]
	}

	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1c4aa:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1c4ae:	1ae3      	subs	r3, r4, r3
   1c4b0:	b29b      	uxth	r3, r3
			       net_pkt_ipv6_ext_len(pkt) - proto_len);
   1c4b2:	f895 403b 	ldrb.w	r4, [r5, #59]	; 0x3b
	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1c4b6:	1b1b      	subs	r3, r3, r4
   1c4b8:	b29b      	uxth	r3, r3
   1c4ba:	1b9b      	subs	r3, r3, r6
	pkt->appdatalen = len;
   1c4bc:	862b      	strh	r3, [r5, #48]	; 0x30

	NET_ASSERT_INFO(net_pkt_appdatalen(pkt) < total_len,
			"Wrong appdatalen %u, total %zu",
			net_pkt_appdatalen(pkt), total_len);
}
   1c4be:	b002      	add	sp, #8
   1c4c0:	bd70      	pop	{r4, r5, r6, pc}
		proto_len = sizeof(struct net_udp_hdr);
   1c4c2:	2608      	movs	r6, #8
   1c4c4:	e7dd      	b.n	1c482 <set_appdata_values+0x1c>
		proto_len = tcp_hdr_len(pkt);
   1c4c6:	4628      	mov	r0, r5
   1c4c8:	f7ff ffbf 	bl	1c44a <tcp_hdr_len>
   1c4cc:	b286      	uxth	r6, r0
   1c4ce:	e7da      	b.n	1c486 <set_appdata_values+0x20>

0001c4d0 <packet_received>:

static enum net_verdict packet_received(struct net_conn *conn,
					struct net_pkt *pkt,
					void *user_data)
{
   1c4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c4d2:	460d      	mov	r5, r1
   1c4d4:	4616      	mov	r6, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c4d6:	2300      	movs	r3, #0
   1c4d8:	e000      	b.n	1c4dc <packet_received+0xc>
   1c4da:	3301      	adds	r3, #1
   1c4dc:	2b05      	cmp	r3, #5
   1c4de:	dc12      	bgt.n	1c506 <packet_received+0x36>
	return context->flags & NET_CONTEXT_IN_USE;
   1c4e0:	2268      	movs	r2, #104	; 0x68
   1c4e2:	4926      	ldr	r1, [pc, #152]	; (1c57c <packet_received+0xac>)
   1c4e4:	fb02 1203 	mla	r2, r2, r3, r1
   1c4e8:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1c4ec:	f012 0f01 	tst.w	r2, #1
   1c4f0:	d0f3      	beq.n	1c4da <packet_received+0xa>
		if (contexts[i].conn_handler == conn_handler) {
   1c4f2:	2268      	movs	r2, #104	; 0x68
   1c4f4:	fb02 1203 	mla	r2, r2, r3, r1
   1c4f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1c4fa:	4290      	cmp	r0, r2
   1c4fc:	d1ed      	bne.n	1c4da <packet_received+0xa>
			return &contexts[i];
   1c4fe:	2268      	movs	r2, #104	; 0x68
   1c500:	fb02 1403 	mla	r4, r2, r3, r1
   1c504:	e000      	b.n	1c508 <packet_received+0x38>
	return NULL;
   1c506:	2400      	movs	r4, #0
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
   1c508:	6968      	ldr	r0, [r5, #20]
   1c50a:	f7ff fe53 	bl	1c1b4 <net_if_get_by_iface>
   1c50e:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
	pkt->context = ctx;
   1c512:	60ec      	str	r4, [r5, #12]

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */

	if (!context->recv_cb) {
   1c514:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c516:	b373      	cbz	r3, 1c576 <packet_received+0xa6>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c518:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c51c:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c520:	d017      	beq.n	1c552 <packet_received+0x82>
		return IPPROTO_TCP;
   1c522:	2206      	movs	r2, #6
		return NET_DROP;
	}

	if (net_context_get_ip_proto(context) != IPPROTO_TCP) {
   1c524:	2a06      	cmp	r2, #6
   1c526:	d016      	beq.n	1c556 <packet_received+0x86>
		/* TCP packets get appdata earlier in tcp_established(). */
		set_appdata_values(pkt, IPPROTO_UDP);
   1c528:	2111      	movs	r1, #17
   1c52a:	4628      	mov	r0, r5
   1c52c:	f7ff ff9b 	bl	1c466 <set_appdata_values>
	return pkt->appdatalen;
   1c530:	8e29      	ldrh	r1, [r5, #48]	; 0x30
	net_stats.tcp.bytes.received += bytes;
   1c532:	4a13      	ldr	r2, [pc, #76]	; (1c580 <packet_received+0xb0>)
   1c534:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1c536:	440b      	add	r3, r1
   1c538:	64d3      	str	r3, [r2, #76]	; 0x4c
		net_pkt_appdata(pkt), net_pkt_appdatalen(pkt),
		net_pkt_get_len(pkt));

	net_stats_update_tcp_recv(net_pkt_appdatalen(pkt));

	context->recv_cb(context, pkt, 0, user_data);
   1c53a:	6b27      	ldr	r7, [r4, #48]	; 0x30
   1c53c:	4633      	mov	r3, r6
   1c53e:	2200      	movs	r2, #0
   1c540:	4629      	mov	r1, r5
   1c542:	4620      	mov	r0, r4
   1c544:	47b8      	blx	r7
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1c546:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1c54a:	f00c fe46 	bl	291da <_impl_k_sem_give>

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	k_sem_give(&context->recv_data_wait);
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return NET_OK;
   1c54e:	2000      	movs	r0, #0
   1c550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1c552:	2211      	movs	r2, #17
   1c554:	e7e6      	b.n	1c524 <packet_received+0x54>
	if (context->flags & NET_CONTEXT_TYPE) {
   1c556:	f013 0f20 	tst.w	r3, #32
   1c55a:	d00a      	beq.n	1c572 <packet_received+0xa2>
		return SOCK_STREAM;
   1c55c:	2301      	movs	r3, #1
	else if (net_context_get_type(context) == SOCK_STREAM) {
   1c55e:	2b01      	cmp	r3, #1
   1c560:	d1e6      	bne.n	1c530 <packet_received+0x60>
   1c562:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
		if (net_pkt_appdatalen(pkt) == 0) {
   1c564:	2b00      	cmp	r3, #0
   1c566:	d1e3      	bne.n	1c530 <packet_received+0x60>
			net_pkt_unref(pkt);
   1c568:	4628      	mov	r0, r5
   1c56a:	f001 f85a 	bl	1d622 <net_pkt_unref>
			return NET_OK;
   1c56e:	2000      	movs	r0, #0
   1c570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return SOCK_DGRAM;
   1c572:	2302      	movs	r3, #2
   1c574:	e7f3      	b.n	1c55e <packet_received+0x8e>
		return NET_DROP;
   1c576:	2002      	movs	r0, #2
}
   1c578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c57a:	bf00      	nop
   1c57c:	20001ca0 	.word	0x20001ca0
   1c580:	20002b50 	.word	0x20002b50

0001c584 <send_reset>:
{
   1c584:	b510      	push	{r4, lr}
   1c586:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1c588:	aa02      	add	r2, sp, #8
   1c58a:	2300      	movs	r3, #0
   1c58c:	f842 3d04 	str.w	r3, [r2, #-4]!
	ret = net_tcp_prepare_reset(context->tcp, remote, &pkt);
   1c590:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1c592:	f007 f85a 	bl	2364a <net_tcp_prepare_reset>
	if (ret || !pkt) {
   1c596:	4604      	mov	r4, r0
   1c598:	b928      	cbnz	r0, 1c5a6 <send_reset+0x22>
   1c59a:	9801      	ldr	r0, [sp, #4]
   1c59c:	b118      	cbz	r0, 1c5a6 <send_reset+0x22>
	ret = net_send_data(pkt);
   1c59e:	f7fe fc3f 	bl	1ae20 <net_send_data>
	if (ret < 0) {
   1c5a2:	1e04      	subs	r4, r0, #0
   1c5a4:	db02      	blt.n	1c5ac <send_reset+0x28>
}
   1c5a6:	4620      	mov	r0, r4
   1c5a8:	b002      	add	sp, #8
   1c5aa:	bd10      	pop	{r4, pc}
		net_pkt_unref(pkt);
   1c5ac:	9801      	ldr	r0, [sp, #4]
   1c5ae:	f001 f838 	bl	1d622 <net_pkt_unref>
   1c5b2:	e7f8      	b.n	1c5a6 <send_reset+0x22>

0001c5b4 <send_ack>:
{
   1c5b4:	b510      	push	{r4, lr}
   1c5b6:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1c5b8:	2300      	movs	r3, #0
   1c5ba:	9301      	str	r3, [sp, #4]
	if (!force && context->tcp->send_ack == context->tcp->sent_ack) {
   1c5bc:	b932      	cbnz	r2, 1c5cc <send_ack+0x18>
   1c5be:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1c5c0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1c5c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1c5c8:	429a      	cmp	r2, r3
   1c5ca:	d011      	beq.n	1c5f0 <send_ack+0x3c>
	ret = net_tcp_prepare_ack(context->tcp, remote, &pkt);
   1c5cc:	aa01      	add	r2, sp, #4
   1c5ce:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1c5d0:	f007 f99c 	bl	2390c <net_tcp_prepare_ack>
	if (ret) {
   1c5d4:	4604      	mov	r4, r0
   1c5d6:	b110      	cbz	r0, 1c5de <send_ack+0x2a>
}
   1c5d8:	4620      	mov	r0, r4
   1c5da:	b002      	add	sp, #8
   1c5dc:	bd10      	pop	{r4, pc}
	ret = net_tcp_send_pkt(pkt);
   1c5de:	9801      	ldr	r0, [sp, #4]
   1c5e0:	f007 fc06 	bl	23df0 <net_tcp_send_pkt>
	if (ret < 0) {
   1c5e4:	1e04      	subs	r4, r0, #0
   1c5e6:	daf7      	bge.n	1c5d8 <send_ack+0x24>
		net_pkt_unref(pkt);
   1c5e8:	9801      	ldr	r0, [sp, #4]
   1c5ea:	f001 f81a 	bl	1d622 <net_pkt_unref>
   1c5ee:	e7f3      	b.n	1c5d8 <send_ack+0x24>
		return 0;
   1c5f0:	2400      	movs	r4, #0
   1c5f2:	e7f1      	b.n	1c5d8 <send_ack+0x24>

0001c5f4 <_tcp_synack_received>:
	switch (net_tcp_get_state(context->tcp)) {
   1c5f4:	6e13      	ldr	r3, [r2, #96]	; 0x60
 *
 * @param tcp TCP context
 */
static inline enum net_tcp_state net_tcp_get_state(const struct net_tcp *tcp)
{
	return (enum net_tcp_state)tcp->state;
   1c5f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1c5fa:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1c5fe:	2b02      	cmp	r3, #2
   1c600:	d001      	beq.n	1c606 <_tcp_synack_received+0x12>
}
   1c602:	2002      	movs	r0, #2
   1c604:	4770      	bx	lr
{
   1c606:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c608:	b09f      	sub	sp, #124	; 0x7c
   1c60a:	4615      	mov	r5, r2
   1c60c:	460c      	mov	r4, r1
	context->iface = net_if_get_by_iface(iface);
   1c60e:	6948      	ldr	r0, [r1, #20]
   1c610:	f7ff fdd0 	bl	1c1b4 <net_if_get_by_iface>
   1c614:	f885 005c 	strb.w	r0, [r5, #92]	; 0x5c
	pkt->context = ctx;
   1c618:	60e5      	str	r5, [r4, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1c61a:	a911      	add	r1, sp, #68	; 0x44
   1c61c:	4620      	mov	r0, r4
   1c61e:	f007 fa35 	bl	23a8c <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1c622:	4606      	mov	r6, r0
   1c624:	b1f8      	cbz	r0, 1c666 <_tcp_synack_received+0x72>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {
   1c626:	7b43      	ldrb	r3, [r0, #13]
   1c628:	f013 0f04 	tst.w	r3, #4
   1c62c:	d11e      	bne.n	1c66c <_tcp_synack_received+0x78>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_SYN) {
   1c62e:	f013 0f02 	tst.w	r3, #2
   1c632:	d013      	beq.n	1c65c <_tcp_synack_received+0x68>
		context->tcp->send_ack =
   1c634:	6e2a      	ldr	r2, [r5, #96]	; 0x60
	return ((u16_t)src[0] << 8) | src[1];
   1c636:	7901      	ldrb	r1, [r0, #4]
   1c638:	7943      	ldrb	r3, [r0, #5]
   1c63a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1c63e:	7980      	ldrb	r0, [r0, #6]
   1c640:	79f3      	ldrb	r3, [r6, #7]
   1c642:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1c646:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			sys_get_be32(tcp_hdr->seq) + 1;
   1c64a:	3301      	adds	r3, #1
		context->tcp->send_ack =
   1c64c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		context->tcp->recv_max_ack = context->tcp->send_seq + 1;
   1c650:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1c652:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1c656:	3301      	adds	r3, #1
   1c658:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	if (NET_TCP_FLAGS(tcp_hdr) == (NET_TCP_SYN | NET_TCP_ACK)) {
   1c65c:	7b73      	ldrb	r3, [r6, #13]
   1c65e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c662:	2b12      	cmp	r3, #18
   1c664:	d019      	beq.n	1c69a <_tcp_synack_received+0xa6>
}
   1c666:	2002      	movs	r0, #2
   1c668:	b01f      	add	sp, #124	; 0x7c
   1c66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1c66c:	4621      	mov	r1, r4
   1c66e:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c670:	f007 fa87 	bl	23b82 <net_tcp_validate_seq>
   1c674:	b160      	cbz	r0, 1c690 <_tcp_synack_received+0x9c>
	net_stats.tcp.drop++;
}

static inline void net_stats_update_tcp_seg_rst(void)
{
	net_stats.tcp.rst++;
   1c676:	4a40      	ldr	r2, [pc, #256]	; (1c778 <_tcp_synack_received+0x184>)
   1c678:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1c67a:	3301      	adds	r3, #1
   1c67c:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->connect_cb) {
   1c67e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1c680:	2b00      	cmp	r3, #0
   1c682:	d0f0      	beq.n	1c666 <_tcp_synack_received+0x72>
			context->connect_cb(context, -ECONNREFUSED,
   1c684:	682a      	ldr	r2, [r5, #0]
   1c686:	f06f 016e 	mvn.w	r1, #110	; 0x6e
   1c68a:	4628      	mov	r0, r5
   1c68c:	4798      	blx	r3
   1c68e:	e7ea      	b.n	1c666 <_tcp_synack_received+0x72>
	net_stats.tcp.ackerr++;
}

static inline void net_stats_update_tcp_seg_rsterr(void)
{
	net_stats.tcp.rsterr++;
   1c690:	4a39      	ldr	r2, [pc, #228]	; (1c778 <_tcp_synack_received+0x184>)
   1c692:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1c694:	3301      	adds	r3, #1
   1c696:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1c698:	e7e5      	b.n	1c666 <_tcp_synack_received+0x72>
	return pkt->family;
   1c69a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1c69e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_pkt_family(pkt) == AF_INET6) {
   1c6a2:	2b0a      	cmp	r3, #10
   1c6a4:	d1df      	bne.n	1c666 <_tcp_synack_received+0x72>
			r6addr.sin6_family = AF_INET6;
   1c6a6:	f04f 0e0a 	mov.w	lr, #10
   1c6aa:	f8ad e014 	strh.w	lr, [sp, #20]
			r6addr.sin6_port = tcp_hdr->src_port;
   1c6ae:	8833      	ldrh	r3, [r6, #0]
   1c6b0:	f8ad 3016 	strh.w	r3, [sp, #22]
	return pkt->frags->data;
   1c6b4:	68a7      	ldr	r7, [r4, #8]
			net_ipaddr_copy(&r6addr.sin6_addr,
   1c6b6:	ac16      	add	r4, sp, #88	; 0x58
   1c6b8:	68bb      	ldr	r3, [r7, #8]
   1c6ba:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1c6be:	6859      	ldr	r1, [r3, #4]
   1c6c0:	689a      	ldr	r2, [r3, #8]
   1c6c2:	68db      	ldr	r3, [r3, #12]
   1c6c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1c6c6:	ac06      	add	r4, sp, #24
   1c6c8:	ab16      	add	r3, sp, #88	; 0x58
   1c6ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1c6cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			l6addr.sin6_family = AF_INET6;
   1c6d0:	f8ad e02c 	strh.w	lr, [sp, #44]	; 0x2c
			l6addr.sin6_port = htons(tcp_hdr->dst_port);
   1c6d4:	8872      	ldrh	r2, [r6, #2]
   1c6d6:	0a13      	lsrs	r3, r2, #8
   1c6d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1c6dc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
			net_ipaddr_copy(&l6addr.sin6_addr,
   1c6e0:	ac1a      	add	r4, sp, #104	; 0x68
   1c6e2:	68bb      	ldr	r3, [r7, #8]
   1c6e4:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1c6e8:	6859      	ldr	r1, [r3, #4]
   1c6ea:	689a      	ldr	r2, [r3, #8]
   1c6ec:	68db      	ldr	r3, [r3, #12]
   1c6ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1c6f0:	ac0c      	add	r4, sp, #48	; 0x30
   1c6f2:	ab1e      	add	r3, sp, #120	; 0x78
   1c6f4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c6f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		net_tcp_unregister(context->conn_handler);
   1c6fc:	462c      	mov	r4, r5
	return net_conn_unregister(handle);
   1c6fe:	f854 0f2c 	ldr.w	r0, [r4, #44]!
   1c702:	f008 fcdb 	bl	250bc <net_conn_unregister>
				       ntohs(tcp_hdr->src_port),
   1c706:	8832      	ldrh	r2, [r6, #0]
   1c708:	0a13      	lsrs	r3, r2, #8
   1c70a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				       ntohs(tcp_hdr->dst_port),
   1c70e:	8871      	ldrh	r1, [r6, #2]
   1c710:	0a0a      	lsrs	r2, r1, #8
   1c712:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		ret = net_tcp_register(raddr,
   1c716:	b292      	uxth	r2, r2
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1c718:	9403      	str	r4, [sp, #12]
   1c71a:	9502      	str	r5, [sp, #8]
   1c71c:	4917      	ldr	r1, [pc, #92]	; (1c77c <_tcp_synack_received+0x188>)
   1c71e:	9101      	str	r1, [sp, #4]
   1c720:	9200      	str	r2, [sp, #0]
   1c722:	b29b      	uxth	r3, r3
   1c724:	aa0b      	add	r2, sp, #44	; 0x2c
   1c726:	a905      	add	r1, sp, #20
   1c728:	2006      	movs	r0, #6
   1c72a:	f008 fce5 	bl	250f8 <net_conn_register>
		if (ret < 0) {
   1c72e:	2800      	cmp	r0, #0
   1c730:	db1c      	blt.n	1c76c <_tcp_synack_received+0x178>
		net_tcp_change_state(context->tcp, NET_TCP_ESTABLISHED);
   1c732:	2104      	movs	r1, #4
   1c734:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c736:	f006 ffba 	bl	236ae <net_tcp_change_state>
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1c73a:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1c73e:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1c742:	f043 0304 	orr.w	r3, r3, #4
   1c746:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
		send_ack(context, raddr, false);
   1c74a:	2200      	movs	r2, #0
   1c74c:	a905      	add	r1, sp, #20
   1c74e:	4628      	mov	r0, r5
   1c750:	f7ff ff30 	bl	1c5b4 <send_ack>
		k_sem_give(&context->tcp->connect_wait);
   1c754:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c756:	30ac      	adds	r0, #172	; 0xac
   1c758:	f00c fd3f 	bl	291da <_impl_k_sem_give>
		if (context->connect_cb) {
   1c75c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1c75e:	2b00      	cmp	r3, #0
   1c760:	d081      	beq.n	1c666 <_tcp_synack_received+0x72>
			context->connect_cb(context, 0, context->user_data);
   1c762:	682a      	ldr	r2, [r5, #0]
   1c764:	2100      	movs	r1, #0
   1c766:	4628      	mov	r0, r5
   1c768:	4798      	blx	r3
   1c76a:	e77c      	b.n	1c666 <_tcp_synack_received+0x72>
			send_reset(context, raddr);
   1c76c:	a905      	add	r1, sp, #20
   1c76e:	4628      	mov	r0, r5
   1c770:	f7ff ff08 	bl	1c584 <send_reset>
			return NET_DROP;
   1c774:	e777      	b.n	1c666 <_tcp_synack_received+0x72>
   1c776:	bf00      	nop
   1c778:	20002b50 	.word	0x20002b50
   1c77c:	0001ccd5 	.word	0x0001ccd5

0001c780 <create_udp_packet>:
{
   1c780:	b570      	push	{r4, r5, r6, lr}
	return pkt->family;
   1c782:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
   1c786:	f3c4 04c3 	ubfx	r4, r4, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1c78a:	2c0a      	cmp	r4, #10
   1c78c:	d118      	bne.n	1c7c0 <create_udp_packet+0x40>
   1c78e:	461e      	mov	r6, r3
   1c790:	4615      	mov	r5, r2
   1c792:	4604      	mov	r4, r0
		pkt = net_ipv6_create(context, pkt, NULL, &addr6->sin6_addr);
   1c794:	1d13      	adds	r3, r2, #4
   1c796:	2200      	movs	r2, #0
   1c798:	f003 f9a4 	bl	1fae4 <net_ipv6_create>
   1c79c:	4601      	mov	r1, r0
				     net_pkt_ip_hdr_len(pkt) +
   1c79e:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
				     net_pkt_ipv6_ext_len(pkt),
   1c7a2:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
		tmp = net_udp_insert(context, pkt,
   1c7a6:	886b      	ldrh	r3, [r5, #2]
   1c7a8:	4402      	add	r2, r0
   1c7aa:	4620      	mov	r0, r4
   1c7ac:	f006 fd90 	bl	232d0 <net_udp_insert>
		if (!tmp) {
   1c7b0:	4605      	mov	r5, r0
   1c7b2:	b140      	cbz	r0, 1c7c6 <create_udp_packet+0x46>
		r = net_ipv6_finalize(context, pkt);
   1c7b4:	4601      	mov	r1, r0
   1c7b6:	4620      	mov	r0, r4
   1c7b8:	f003 fbf0 	bl	1ff9c <net_ipv6_finalize>
	*out_pkt = pkt;
   1c7bc:	6035      	str	r5, [r6, #0]
	return r;
   1c7be:	bd70      	pop	{r4, r5, r6, pc}
		return -EPROTONOSUPPORT;
   1c7c0:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   1c7c4:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1c7c6:	f06f 000b 	mvn.w	r0, #11
}
   1c7ca:	bd70      	pop	{r4, r5, r6, pc}

0001c7cc <send_data>:
{
   1c7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c7d0:	4604      	mov	r4, r0
   1c7d2:	4615      	mov	r5, r2
   1c7d4:	9e06      	ldr	r6, [sp, #24]
   1c7d6:	9f07      	ldr	r7, [sp, #28]
	context->send_cb = cb;
   1c7d8:	6342      	str	r2, [r0, #52]	; 0x34
	context->user_data = user_data;
   1c7da:	6007      	str	r7, [r0, #0]
	pkt->token = token;
   1c7dc:	610e      	str	r6, [r1, #16]
	if (context->flags & NET_CONTEXT_PROTO) {
   1c7de:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1c7e2:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c7e6:	d011      	beq.n	1c80c <send_data+0x40>
		return IPPROTO_TCP;
   1c7e8:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c7ea:	2b11      	cmp	r3, #17
   1c7ec:	d010      	beq.n	1c810 <send_data+0x44>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c7ee:	2b06      	cmp	r3, #6
   1c7f0:	d113      	bne.n	1c81a <send_data+0x4e>
		int ret = net_tcp_send_data(context);
   1c7f2:	4620      	mov	r0, r4
   1c7f4:	f007 fbf8 	bl	23fe8 <net_tcp_send_data>
   1c7f8:	4680      	mov	r8, r0
		if (cb) {
   1c7fa:	b125      	cbz	r5, 1c806 <send_data+0x3a>
			cb(context, ret, token, user_data);
   1c7fc:	463b      	mov	r3, r7
   1c7fe:	4632      	mov	r2, r6
   1c800:	4601      	mov	r1, r0
   1c802:	4620      	mov	r0, r4
   1c804:	47a8      	blx	r5
}
   1c806:	4640      	mov	r0, r8
   1c808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return IPPROTO_UDP;
   1c80c:	2311      	movs	r3, #17
   1c80e:	e7ec      	b.n	1c7ea <send_data+0x1e>
		return net_send_data(pkt);
   1c810:	4608      	mov	r0, r1
   1c812:	f7fe fb05 	bl	1ae20 <net_send_data>
   1c816:	4680      	mov	r8, r0
   1c818:	e7f5      	b.n	1c806 <send_data+0x3a>
	return -EPROTONOSUPPORT;
   1c81a:	f06f 087a 	mvn.w	r8, #122	; 0x7a
   1c81e:	e7f2      	b.n	1c806 <send_data+0x3a>

0001c820 <net_context_get>:
{
   1c820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (family == AF_INET) {
   1c824:	2802      	cmp	r0, #2
   1c826:	f000 80e9 	beq.w	1c9fc <net_context_get+0x1dc>
	if (family != AF_INET && family != AF_INET6) {
   1c82a:	280a      	cmp	r0, #10
   1c82c:	f040 80e9 	bne.w	1ca02 <net_context_get+0x1e2>
	if (type != SOCK_DGRAM && type != SOCK_STREAM) {
   1c830:	1e4c      	subs	r4, r1, #1
   1c832:	b2e4      	uxtb	r4, r4
   1c834:	2c01      	cmp	r4, #1
   1c836:	f200 80e7 	bhi.w	1ca08 <net_context_get+0x1e8>
	if (ip_proto != IPPROTO_UDP && ip_proto != IPPROTO_TCP) {
   1c83a:	2a11      	cmp	r2, #17
   1c83c:	d002      	beq.n	1c844 <net_context_get+0x24>
   1c83e:	2a06      	cmp	r2, #6
   1c840:	f040 80e5 	bne.w	1ca0e <net_context_get+0x1ee>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1c844:	2901      	cmp	r1, #1
   1c846:	d01c      	beq.n	1c882 <net_context_get+0x62>
   1c848:	2902      	cmp	r1, #2
   1c84a:	d01f      	beq.n	1c88c <net_context_get+0x6c>
	if (!context) {
   1c84c:	2b00      	cmp	r3, #0
   1c84e:	f000 80e1 	beq.w	1ca14 <net_context_get+0x1f4>
   1c852:	461f      	mov	r7, r3
   1c854:	4690      	mov	r8, r2
   1c856:	460e      	mov	r6, r1
   1c858:	4681      	mov	r9, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1c85a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c85e:	4870      	ldr	r0, [pc, #448]	; (1ca20 <net_context_get+0x200>)
   1c860:	f00c fcce 	bl	29200 <_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c864:	2400      	movs	r4, #0
   1c866:	2c05      	cmp	r4, #5
   1c868:	f300 80c5 	bgt.w	1c9f6 <net_context_get+0x1d6>
	return context->flags & NET_CONTEXT_IN_USE;
   1c86c:	2568      	movs	r5, #104	; 0x68
   1c86e:	4b6d      	ldr	r3, [pc, #436]	; (1ca24 <net_context_get+0x204>)
   1c870:	fb05 3504 	mla	r5, r5, r4, r3
   1c874:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
		if (net_context_is_used(&contexts[i])) {
   1c878:	f013 0f01 	tst.w	r3, #1
   1c87c:	d00b      	beq.n	1c896 <net_context_get+0x76>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c87e:	3401      	adds	r4, #1
   1c880:	e7f1      	b.n	1c866 <net_context_get+0x46>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1c882:	2a11      	cmp	r2, #17
   1c884:	d1e0      	bne.n	1c848 <net_context_get+0x28>
		return -EOPNOTSUPP;
   1c886:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1c88a:	e076      	b.n	1c97a <net_context_get+0x15a>
	    (type == SOCK_DGRAM && ip_proto == IPPROTO_TCP)) {
   1c88c:	2a06      	cmp	r2, #6
   1c88e:	d1dd      	bne.n	1c84c <net_context_get+0x2c>
		return -EOPNOTSUPP;
   1c890:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1c894:	e071      	b.n	1c97a <net_context_get+0x15a>
		if (ip_proto == IPPROTO_TCP) {
   1c896:	f1b8 0f06 	cmp.w	r8, #6
   1c89a:	d071      	beq.n	1c980 <net_context_get+0x160>
		contexts[i].flags = 0;
   1c89c:	f04f 0a68 	mov.w	sl, #104	; 0x68
   1c8a0:	4b60      	ldr	r3, [pc, #384]	; (1ca24 <net_context_get+0x204>)
   1c8a2:	fb0a 3a04 	mla	sl, sl, r4, r3
   1c8a6:	2300      	movs	r3, #0
   1c8a8:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
		atomic_set(&contexts[i].refcount, 1);
   1c8ac:	f10a 0304 	add.w	r3, sl, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c8b0:	2201      	movs	r2, #1
   1c8b2:	f3bf 8f5b 	dmb	ish
   1c8b6:	e853 1f00 	ldrex	r1, [r3]
   1c8ba:	e843 2000 	strex	r0, r2, [r3]
   1c8be:	2800      	cmp	r0, #0
   1c8c0:	d1f9      	bne.n	1c8b6 <net_context_get+0x96>
   1c8c2:	f3bf 8f5b 	dmb	ish
	if (family == AF_INET6) {
   1c8c6:	f1b9 0f0a 	cmp.w	r9, #10
   1c8ca:	d06d      	beq.n	1c9a8 <net_context_get+0x188>
	context->flags &= ~NET_CONTEXT_FAMILY;
   1c8cc:	2368      	movs	r3, #104	; 0x68
   1c8ce:	4a55      	ldr	r2, [pc, #340]	; (1ca24 <net_context_get+0x204>)
   1c8d0:	fb03 2304 	mla	r3, r3, r4, r2
   1c8d4:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1c8d8:	f022 0210 	bic.w	r2, r2, #16
   1c8dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (type == SOCK_STREAM) {
   1c8e0:	2e01      	cmp	r6, #1
   1c8e2:	d068      	beq.n	1c9b6 <net_context_get+0x196>
	context->flags &= ~NET_CONTEXT_TYPE;
   1c8e4:	2368      	movs	r3, #104	; 0x68
   1c8e6:	4a4f      	ldr	r2, [pc, #316]	; (1ca24 <net_context_get+0x204>)
   1c8e8:	fb03 2304 	mla	r3, r3, r4, r2
   1c8ec:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1c8f0:	f022 0220 	bic.w	r2, r2, #32
   1c8f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (ip_proto == IPPROTO_TCP) {
   1c8f8:	f1b8 0f06 	cmp.w	r8, #6
   1c8fc:	d066      	beq.n	1c9cc <net_context_get+0x1ac>
	context->flags &= ~NET_CONTEXT_PROTO;
   1c8fe:	2368      	movs	r3, #104	; 0x68
   1c900:	4a48      	ldr	r2, [pc, #288]	; (1ca24 <net_context_get+0x204>)
   1c902:	fb03 2304 	mla	r3, r3, r4, r2
   1c906:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1c90a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1c90e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   1c912:	f8df 8110 	ldr.w	r8, [pc, #272]	; 1ca24 <net_context_get+0x204>
   1c916:	2568      	movs	r5, #104	; 0x68
   1c918:	fb05 f504 	mul.w	r5, r5, r4
   1c91c:	eb08 0305 	add.w	r3, r8, r5
   1c920:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1c924:	f042 0201 	orr.w	r2, r2, #1
   1c928:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].iface = 0;
   1c92c:	2600      	movs	r6, #0
   1c92e:	f883 605c 	strb.w	r6, [r3, #92]	; 0x5c
		memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   1c932:	f105 0010 	add.w	r0, r5, #16
   1c936:	4440      	add	r0, r8
   1c938:	2218      	movs	r2, #24
   1c93a:	4631      	mov	r1, r6
   1c93c:	3004      	adds	r0, #4
   1c93e:	f00d fc1f 	bl	2a180 <memset>
		memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
   1c942:	3508      	adds	r5, #8
   1c944:	4445      	add	r5, r8
   1c946:	220c      	movs	r2, #12
   1c948:	4631      	mov	r1, r6
   1c94a:	4628      	mov	r0, r5
   1c94c:	f00d fc18 	bl	2a180 <memset>
		if (family == AF_INET6) {
   1c950:	f1b9 0f0a 	cmp.w	r9, #10
   1c954:	d045      	beq.n	1c9e2 <net_context_get+0x1c2>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   1c956:	2068      	movs	r0, #104	; 0x68
   1c958:	fb00 f404 	mul.w	r4, r0, r4
   1c95c:	3440      	adds	r4, #64	; 0x40
   1c95e:	4831      	ldr	r0, [pc, #196]	; (1ca24 <net_context_get+0x204>)
   1c960:	4420      	add	r0, r4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1c962:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c966:	2101      	movs	r1, #1
   1c968:	3004      	adds	r0, #4
   1c96a:	f00c fc2d 	bl	291c8 <_impl_k_sem_init>
		*context = &contexts[i];
   1c96e:	f8c7 a000 	str.w	sl, [r7]
		ret = 0;
   1c972:	2400      	movs	r4, #0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1c974:	482a      	ldr	r0, [pc, #168]	; (1ca20 <net_context_get+0x200>)
   1c976:	f00c fc30 	bl	291da <_impl_k_sem_give>
}
   1c97a:	4620      	mov	r0, r4
   1c97c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			contexts[i].tcp = net_tcp_alloc(&contexts[i]);
   1c980:	2568      	movs	r5, #104	; 0x68
   1c982:	4b28      	ldr	r3, [pc, #160]	; (1ca24 <net_context_get+0x204>)
   1c984:	fb05 3504 	mla	r5, r5, r4, r3
   1c988:	4628      	mov	r0, r5
   1c98a:	f006 fdab 	bl	234e4 <net_tcp_alloc>
   1c98e:	6628      	str	r0, [r5, #96]	; 0x60
			if (!contexts[i].tcp) {
   1c990:	2800      	cmp	r0, #0
   1c992:	d042      	beq.n	1ca1a <net_context_get+0x1fa>
			k_delayed_work_init(&contexts[i].tcp->ack_timer,
   1c994:	4924      	ldr	r1, [pc, #144]	; (1ca28 <net_context_get+0x208>)
   1c996:	3008      	adds	r0, #8
   1c998:	f00d f9f0 	bl	29d7c <k_delayed_work_init>
			k_delayed_work_init(&contexts[i].tcp->fin_timer,
   1c99c:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c99e:	4923      	ldr	r1, [pc, #140]	; (1ca2c <net_context_get+0x20c>)
   1c9a0:	3030      	adds	r0, #48	; 0x30
   1c9a2:	f00d f9eb 	bl	29d7c <k_delayed_work_init>
   1c9a6:	e779      	b.n	1c89c <net_context_get+0x7c>
		context->flags |= NET_CONTEXT_FAMILY;
   1c9a8:	f89a 205d 	ldrb.w	r2, [sl, #93]	; 0x5d
   1c9ac:	f042 0210 	orr.w	r2, r2, #16
   1c9b0:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
   1c9b4:	e794      	b.n	1c8e0 <net_context_get+0xc0>
		context->flags |= NET_CONTEXT_TYPE;
   1c9b6:	2368      	movs	r3, #104	; 0x68
   1c9b8:	4a1a      	ldr	r2, [pc, #104]	; (1ca24 <net_context_get+0x204>)
   1c9ba:	fb03 2304 	mla	r3, r3, r4, r2
   1c9be:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1c9c2:	f042 0220 	orr.w	r2, r2, #32
   1c9c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1c9ca:	e795      	b.n	1c8f8 <net_context_get+0xd8>
		context->flags |= NET_CONTEXT_PROTO;
   1c9cc:	2368      	movs	r3, #104	; 0x68
   1c9ce:	4a15      	ldr	r2, [pc, #84]	; (1ca24 <net_context_get+0x204>)
   1c9d0:	fb03 2304 	mla	r3, r3, r4, r2
   1c9d4:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1c9d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1c9dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1c9e0:	e797      	b.n	1c912 <net_context_get+0xf2>
			addr6->sin6_port = find_available_port(&contexts[i],
   1c9e2:	4629      	mov	r1, r5
   1c9e4:	4650      	mov	r0, sl
   1c9e6:	f7ff fcf1 	bl	1c3cc <find_available_port>
   1c9ea:	8068      	strh	r0, [r5, #2]
			if (!addr6->sin6_port) {
   1c9ec:	2800      	cmp	r0, #0
   1c9ee:	d1b2      	bne.n	1c956 <net_context_get+0x136>
				return -EADDRINUSE;
   1c9f0:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   1c9f4:	e7c1      	b.n	1c97a <net_context_get+0x15a>
	int i, ret = -ENOENT;
   1c9f6:	f06f 0401 	mvn.w	r4, #1
   1c9fa:	e7bb      	b.n	1c974 <net_context_get+0x154>
		return -EPFNOSUPPORT;
   1c9fc:	f06f 045f 	mvn.w	r4, #95	; 0x5f
   1ca00:	e7bb      	b.n	1c97a <net_context_get+0x15a>
		return -EAFNOSUPPORT;
   1ca02:	f06f 0469 	mvn.w	r4, #105	; 0x69
   1ca06:	e7b8      	b.n	1c97a <net_context_get+0x15a>
		return -EPROTOTYPE;
   1ca08:	f06f 046a 	mvn.w	r4, #106	; 0x6a
   1ca0c:	e7b5      	b.n	1c97a <net_context_get+0x15a>
		return -EPROTONOSUPPORT;
   1ca0e:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   1ca12:	e7b2      	b.n	1c97a <net_context_get+0x15a>
		return -EINVAL;
   1ca14:	f06f 0415 	mvn.w	r4, #21
   1ca18:	e7af      	b.n	1c97a <net_context_get+0x15a>
				return -ENOBUFS;
   1ca1a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1ca1e:	e7ac      	b.n	1c97a <net_context_get+0x15a>
   1ca20:	20001f10 	.word	0x20001f10
   1ca24:	20001ca0 	.word	0x20001ca0
   1ca28:	0001caf9 	.word	0x0001caf9
   1ca2c:	0001caed 	.word	0x0001caed

0001ca30 <net_context_ref>:
	int old_rc = atomic_inc(&context->refcount);
   1ca30:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ca32:	f3bf 8f5b 	dmb	ish
   1ca36:	e853 0f00 	ldrex	r0, [r3]
   1ca3a:	1c42      	adds	r2, r0, #1
   1ca3c:	e843 2100 	strex	r1, r2, [r3]
   1ca40:	2900      	cmp	r1, #0
   1ca42:	d1f8      	bne.n	1ca36 <net_context_ref+0x6>
   1ca44:	f3bf 8f5b 	dmb	ish
}
   1ca48:	3001      	adds	r0, #1
   1ca4a:	4770      	bx	lr

0001ca4c <net_context_unref>:
{
   1ca4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int old_rc = atomic_dec(&context->refcount);
   1ca4e:	1d02      	adds	r2, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1ca50:	f3bf 8f5b 	dmb	ish
   1ca54:	e852 3f00 	ldrex	r3, [r2]
   1ca58:	1e59      	subs	r1, r3, #1
   1ca5a:	e842 1400 	strex	r4, r1, [r2]
   1ca5e:	2c00      	cmp	r4, #0
   1ca60:	d1f8      	bne.n	1ca54 <net_context_unref+0x8>
   1ca62:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
   1ca66:	2b01      	cmp	r3, #1
   1ca68:	d001      	beq.n	1ca6e <net_context_unref+0x22>
		return old_rc - 1;
   1ca6a:	1e58      	subs	r0, r3, #1
   1ca6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ca6e:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1ca70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ca74:	481b      	ldr	r0, [pc, #108]	; (1cae4 <net_context_unref+0x98>)
   1ca76:	f00c fbc3 	bl	29200 <_impl_k_sem_take>
	if (context->tcp) {
   1ca7a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1ca7c:	b13b      	cbz	r3, 1ca8e <net_context_unref+0x42>
   1ca7e:	2500      	movs	r5, #0
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1ca80:	2d00      	cmp	r5, #0
   1ca82:	dd15      	ble.n	1cab0 <net_context_unref+0x64>
		net_tcp_release(context->tcp);
   1ca84:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1ca86:	f006 fe3d 	bl	23704 <net_tcp_release>
		context->tcp = NULL;
   1ca8a:	2300      	movs	r3, #0
   1ca8c:	6623      	str	r3, [r4, #96]	; 0x60
	if (context->conn_handler) {
   1ca8e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1ca90:	b118      	cbz	r0, 1ca9a <net_context_unref+0x4e>
		net_conn_unregister(context->conn_handler);
   1ca92:	f008 fb13 	bl	250bc <net_conn_unregister>
		context->conn_handler = NULL;
   1ca96:	2300      	movs	r3, #0
   1ca98:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1ca9a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	context->flags &= ~NET_CONTEXT_IN_USE;
   1ca9e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   1caa2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1caa6:	480f      	ldr	r0, [pc, #60]	; (1cae4 <net_context_unref+0x98>)
   1caa8:	f00c fb97 	bl	291da <_impl_k_sem_give>
	return 0;
   1caac:	2000      	movs	r0, #0
}
   1caae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (tcp_backlog[i].tcp != context->tcp) {
   1cab0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1cab4:	0113      	lsls	r3, r2, #4
   1cab6:	4a0c      	ldr	r2, [pc, #48]	; (1cae8 <net_context_unref+0x9c>)
   1cab8:	58d2      	ldr	r2, [r2, r3]
   1caba:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1cabc:	429a      	cmp	r2, r3
   1cabe:	d001      	beq.n	1cac4 <net_context_unref+0x78>
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1cac0:	3501      	adds	r5, #1
   1cac2:	e7dd      	b.n	1ca80 <net_context_unref+0x34>
			k_delayed_work_cancel(&tcp_backlog[i].ack_timer);
   1cac4:	4f08      	ldr	r7, [pc, #32]	; (1cae8 <net_context_unref+0x9c>)
   1cac6:	00ae      	lsls	r6, r5, #2
   1cac8:	1972      	adds	r2, r6, r5
   1caca:	0113      	lsls	r3, r2, #4
   1cacc:	3328      	adds	r3, #40	; 0x28
   1cace:	18f8      	adds	r0, r7, r3
   1cad0:	f00d f972 	bl	29db8 <k_delayed_work_cancel>
			memset(&tcp_backlog[i], 0, sizeof(tcp_backlog[i]));
   1cad4:	442e      	add	r6, r5
   1cad6:	0130      	lsls	r0, r6, #4
   1cad8:	2250      	movs	r2, #80	; 0x50
   1cada:	2100      	movs	r1, #0
   1cadc:	4438      	add	r0, r7
   1cade:	f00d fb4f 	bl	2a180 <memset>
   1cae2:	e7ed      	b.n	1cac0 <net_context_unref+0x74>
   1cae4:	20001f10 	.word	0x20001f10
   1cae8:	20001f28 	.word	0x20001f28

0001caec <handle_fin_timeout>:
{
   1caec:	b508      	push	{r3, lr}
	net_context_unref(tcp->context);
   1caee:	f850 0c30 	ldr.w	r0, [r0, #-48]
   1caf2:	f7ff ffab 	bl	1ca4c <net_context_unref>
   1caf6:	bd08      	pop	{r3, pc}

0001caf8 <handle_ack_timeout>:
	return (enum net_tcp_state)tcp->state;
   1caf8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1cafc:	f3c3 3343 	ubfx	r3, r3, #13, #4
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   1cb00:	2b06      	cmp	r3, #6
   1cb02:	d000      	beq.n	1cb06 <handle_ack_timeout+0xe>
   1cb04:	4770      	bx	lr
{
   1cb06:	b510      	push	{r4, lr}
   1cb08:	f1a0 0208 	sub.w	r2, r0, #8
   1cb0c:	4604      	mov	r4, r0
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   1cb0e:	2100      	movs	r1, #0
   1cb10:	4610      	mov	r0, r2
   1cb12:	f006 fdcc 	bl	236ae <net_tcp_change_state>
		net_context_unref(tcp->context);
   1cb16:	f854 0c08 	ldr.w	r0, [r4, #-8]
   1cb1a:	f7ff ff97 	bl	1ca4c <net_context_unref>
   1cb1e:	bd10      	pop	{r4, pc}

0001cb20 <tcp_synack_received>:
NET_CONN_CB(tcp_synack_received)
   1cb20:	b570      	push	{r4, r5, r6, lr}
   1cb22:	4605      	mov	r5, r0
   1cb24:	460e      	mov	r6, r1
   1cb26:	4614      	mov	r4, r2
   1cb28:	4610      	mov	r0, r2
   1cb2a:	f7ff ff81 	bl	1ca30 <net_context_ref>
   1cb2e:	4622      	mov	r2, r4
   1cb30:	4631      	mov	r1, r6
   1cb32:	4628      	mov	r0, r5
   1cb34:	f7ff fd5e 	bl	1c5f4 <_tcp_synack_received>
   1cb38:	4605      	mov	r5, r0
   1cb3a:	4620      	mov	r0, r4
   1cb3c:	f7ff ff86 	bl	1ca4c <net_context_unref>
   1cb40:	4628      	mov	r0, r5
   1cb42:	bd70      	pop	{r4, r5, r6, pc}

0001cb44 <_tcp_established>:
{
   1cb44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cb48:	b087      	sub	sp, #28
   1cb4a:	4607      	mov	r7, r0
   1cb4c:	460e      	mov	r6, r1
   1cb4e:	4614      	mov	r4, r2
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1cb50:	a901      	add	r1, sp, #4
   1cb52:	4630      	mov	r0, r6
   1cb54:	f006 ff9a 	bl	23a8c <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1cb58:	2800      	cmp	r0, #0
   1cb5a:	f000 80b5 	beq.w	1ccc8 <_tcp_established+0x184>
   1cb5e:	4605      	mov	r5, r0
	if (net_tcp_get_state(context->tcp) < NET_TCP_ESTABLISHED) {
   1cb60:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1cb62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1cb66:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1cb6a:	2b03      	cmp	r3, #3
   1cb6c:	d804      	bhi.n	1cb78 <_tcp_established+0x34>
		return NET_DROP;
   1cb6e:	2502      	movs	r5, #2
}
   1cb70:	4628      	mov	r0, r5
   1cb72:	b007      	add	sp, #28
   1cb74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	tcp_flags = NET_TCP_FLAGS(tcp_hdr);
   1cb78:	f890 800d 	ldrb.w	r8, [r0, #13]
	if (tcp_flags & NET_TCP_ACK) {
   1cb7c:	f018 0f10 	tst.w	r8, #16
   1cb80:	d116      	bne.n	1cbb0 <_tcp_established+0x6c>
	if (tcp_flags & NET_TCP_RST) {
   1cb82:	f018 0f04 	tst.w	r8, #4
   1cb86:	d121      	bne.n	1cbcc <_tcp_established+0x88>
	return ((u16_t)src[0] << 8) | src[1];
   1cb88:	792a      	ldrb	r2, [r5, #4]
   1cb8a:	796b      	ldrb	r3, [r5, #5]
   1cb8c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   1cb90:	79a9      	ldrb	r1, [r5, #6]
   1cb92:	79eb      	ldrb	r3, [r5, #7]
   1cb94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1cb98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			    context->tcp->send_ack) < 0) {
   1cb9c:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   1cb9e:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline s32_t net_tcp_seq_cmp(u32_t seq1, u32_t seq2)
{
	return (s32_t)(seq1 - seq2);
   1cba2:	1a99      	subs	r1, r3, r2
   1cba4:	2900      	cmp	r1, #0
   1cba6:	db2e      	blt.n	1cc06 <_tcp_established+0xc2>
	if (sys_get_be32(tcp_hdr->seq) - context->tcp->send_ack) {
   1cba8:	429a      	cmp	r2, r3
   1cbaa:	d033      	beq.n	1cc14 <_tcp_established+0xd0>
		return NET_DROP;
   1cbac:	2502      	movs	r5, #2
   1cbae:	e7df      	b.n	1cb70 <_tcp_established+0x2c>
	return ((u16_t)src[0] << 8) | src[1];
   1cbb0:	7a03      	ldrb	r3, [r0, #8]
   1cbb2:	7a41      	ldrb	r1, [r0, #9]
   1cbb4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1cbb8:	7a82      	ldrb	r2, [r0, #10]
   1cbba:	7ac3      	ldrb	r3, [r0, #11]
   1cbbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		net_tcp_ack_received(context,
   1cbc0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1cbc4:	4620      	mov	r0, r4
   1cbc6:	f007 fa49 	bl	2405c <net_tcp_ack_received>
   1cbca:	e7da      	b.n	1cb82 <_tcp_established+0x3e>
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1cbcc:	4631      	mov	r1, r6
   1cbce:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1cbd0:	f006 ffd7 	bl	23b82 <net_tcp_validate_seq>
   1cbd4:	b928      	cbnz	r0, 1cbe2 <_tcp_established+0x9e>
   1cbd6:	4a3d      	ldr	r2, [pc, #244]	; (1cccc <_tcp_established+0x188>)
   1cbd8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1cbda:	3301      	adds	r3, #1
   1cbdc:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1cbde:	2502      	movs	r5, #2
   1cbe0:	e7c6      	b.n	1cb70 <_tcp_established+0x2c>
	net_stats.tcp.rst++;
   1cbe2:	4a3a      	ldr	r2, [pc, #232]	; (1cccc <_tcp_established+0x188>)
   1cbe4:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1cbe6:	3301      	adds	r3, #1
   1cbe8:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->recv_cb) {
   1cbea:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1cbec:	b135      	cbz	r5, 1cbfc <_tcp_established+0xb8>
					 context->tcp->recv_user_data);
   1cbee:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, -ECONNRESET,
   1cbf0:	685b      	ldr	r3, [r3, #4]
   1cbf2:	f06f 0267 	mvn.w	r2, #103	; 0x67
   1cbf6:	2100      	movs	r1, #0
   1cbf8:	4620      	mov	r0, r4
   1cbfa:	47a8      	blx	r5
		net_context_unref(context);
   1cbfc:	4620      	mov	r0, r4
   1cbfe:	f7ff ff25 	bl	1ca4c <net_context_unref>
		return NET_DROP;
   1cc02:	2502      	movs	r5, #2
   1cc04:	e7b4      	b.n	1cb70 <_tcp_established+0x2c>
		send_ack(context, &conn->remote_addr, true);
   1cc06:	2201      	movs	r2, #1
   1cc08:	4639      	mov	r1, r7
   1cc0a:	4620      	mov	r0, r4
   1cc0c:	f7ff fcd2 	bl	1c5b4 <send_ack>
		return NET_DROP;
   1cc10:	2502      	movs	r5, #2
   1cc12:	e7ad      	b.n	1cb70 <_tcp_established+0x2c>
	set_appdata_values(pkt, IPPROTO_TCP);
   1cc14:	2106      	movs	r1, #6
   1cc16:	4630      	mov	r0, r6
   1cc18:	f7ff fc25 	bl	1c466 <set_appdata_values>
	return pkt->appdatalen;
   1cc1c:	f8b6 9030 	ldrh.w	r9, [r6, #48]	; 0x30
	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   1cc20:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1cc22:	f006 fcc5 	bl	235b0 <net_tcp_get_recv_wnd>
   1cc26:	4581      	cmp	r9, r0
   1cc28:	d901      	bls.n	1cc2e <_tcp_established+0xea>
		return NET_DROP;
   1cc2a:	2502      	movs	r5, #2
   1cc2c:	e7a0      	b.n	1cb70 <_tcp_established+0x2c>
	ret = packet_received(conn, pkt, context->tcp->recv_user_data);
   1cc2e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1cc30:	685a      	ldr	r2, [r3, #4]
   1cc32:	4631      	mov	r1, r6
   1cc34:	4638      	mov	r0, r7
   1cc36:	f7ff fc4b 	bl	1c4d0 <packet_received>
   1cc3a:	4605      	mov	r5, r0
	context->tcp->send_ack += data_len;
   1cc3c:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1cc3e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1cc42:	444b      	add	r3, r9
   1cc44:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	if (tcp_flags & NET_TCP_FIN) {
   1cc48:	f018 0f01 	tst.w	r8, #1
   1cc4c:	d022      	beq.n	1cc94 <_tcp_established+0x150>
		context->tcp->fin_rcvd = 1;
   1cc4e:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1cc50:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   1cc54:	f043 0304 	orr.w	r3, r3, #4
   1cc58:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
		if (net_tcp_get_state(context->tcp) == NET_TCP_ESTABLISHED) {
   1cc5c:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1cc5e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   1cc62:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1cc66:	2b04      	cmp	r3, #4
   1cc68:	d02a      	beq.n	1ccc0 <_tcp_established+0x17c>
		context->tcp->send_ack += 1;
   1cc6a:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1cc6c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1cc70:	3301      	adds	r3, #1
   1cc72:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		if (context->recv_cb) {
   1cc76:	6b26      	ldr	r6, [r4, #48]	; 0x30
   1cc78:	b12e      	cbz	r6, 1cc86 <_tcp_established+0x142>
					 context->tcp->recv_user_data);
   1cc7a:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, 0,
   1cc7c:	685b      	ldr	r3, [r3, #4]
   1cc7e:	2200      	movs	r2, #0
   1cc80:	4611      	mov	r1, r2
   1cc82:	4620      	mov	r0, r4
   1cc84:	47b0      	blx	r6
		k_delayed_work_submit(&context->tcp->ack_timer, ACK_TIMEOUT);
   1cc86:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1cc88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cc8c:	3108      	adds	r1, #8
   1cc8e:	4810      	ldr	r0, [pc, #64]	; (1ccd0 <_tcp_established+0x18c>)
   1cc90:	f00d f8ec 	bl	29e6c <k_delayed_work_submit_to_queue>
	send_ack(context, &conn->remote_addr, false);
   1cc94:	2200      	movs	r2, #0
   1cc96:	4639      	mov	r1, r7
   1cc98:	4620      	mov	r0, r4
   1cc9a:	f7ff fc8b 	bl	1c5b4 <send_ack>
	if (sys_slist_is_empty(&context->tcp->sent_list)
   1cc9e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1cca0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   1cca4:	2a00      	cmp	r2, #0
   1cca6:	f47f af63 	bne.w	1cb70 <_tcp_established+0x2c>
	    && context->tcp->fin_sent) {
   1ccaa:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
   1ccae:	f003 0306 	and.w	r3, r3, #6
   1ccb2:	2b06      	cmp	r3, #6
   1ccb4:	f47f af5c 	bne.w	1cb70 <_tcp_established+0x2c>
		net_context_unref(context);
   1ccb8:	4620      	mov	r0, r4
   1ccba:	f7ff fec7 	bl	1ca4c <net_context_unref>
   1ccbe:	e757      	b.n	1cb70 <_tcp_established+0x2c>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSE_WAIT);
   1ccc0:	2105      	movs	r1, #5
   1ccc2:	f006 fcf4 	bl	236ae <net_tcp_change_state>
   1ccc6:	e7d0      	b.n	1cc6a <_tcp_established+0x126>
		return NET_DROP;
   1ccc8:	2502      	movs	r5, #2
   1ccca:	e751      	b.n	1cb70 <_tcp_established+0x2c>
   1cccc:	20002b50 	.word	0x20002b50
   1ccd0:	20002c70 	.word	0x20002c70

0001ccd4 <tcp_established>:
NET_CONN_CB(tcp_established)
   1ccd4:	b570      	push	{r4, r5, r6, lr}
   1ccd6:	4605      	mov	r5, r0
   1ccd8:	460e      	mov	r6, r1
   1ccda:	4614      	mov	r4, r2
   1ccdc:	4610      	mov	r0, r2
   1ccde:	f7ff fea7 	bl	1ca30 <net_context_ref>
   1cce2:	4622      	mov	r2, r4
   1cce4:	4631      	mov	r1, r6
   1cce6:	4628      	mov	r0, r5
   1cce8:	f7ff ff2c 	bl	1cb44 <_tcp_established>
   1ccec:	4605      	mov	r5, r0
   1ccee:	4620      	mov	r0, r4
   1ccf0:	f7ff feac 	bl	1ca4c <net_context_unref>
   1ccf4:	4628      	mov	r0, r5
   1ccf6:	bd70      	pop	{r4, r5, r6, pc}

0001ccf8 <net_context_put>:
	if (!PART_OF_ARRAY(contexts, context)) {
   1ccf8:	b390      	cbz	r0, 1cd60 <net_context_put+0x68>
{
   1ccfa:	b510      	push	{r4, lr}
   1ccfc:	4604      	mov	r4, r0
	if (!PART_OF_ARRAY(contexts, context)) {
   1ccfe:	4a1d      	ldr	r2, [pc, #116]	; (1cd74 <net_context_put+0x7c>)
   1cd00:	4290      	cmp	r0, r2
   1cd02:	d330      	bcc.n	1cd66 <net_context_put+0x6e>
   1cd04:	f502 721c 	add.w	r2, r2, #624	; 0x270
   1cd08:	4290      	cmp	r0, r2
   1cd0a:	d22f      	bcs.n	1cd6c <net_context_put+0x74>
	context->connect_cb = NULL;
   1cd0c:	2200      	movs	r2, #0
   1cd0e:	6382      	str	r2, [r0, #56]	; 0x38
	context->recv_cb = NULL;
   1cd10:	6302      	str	r2, [r0, #48]	; 0x30
	context->send_cb = NULL;
   1cd12:	6342      	str	r2, [r0, #52]	; 0x34
	if (context->flags & NET_CONTEXT_PROTO) {
   1cd14:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   1cd18:	f012 0f40 	tst.w	r2, #64	; 0x40
   1cd1c:	d007      	beq.n	1cd2e <net_context_put+0x36>
		return IPPROTO_TCP;
   1cd1e:	2106      	movs	r1, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1cd20:	2906      	cmp	r1, #6
   1cd22:	d006      	beq.n	1cd32 <net_context_put+0x3a>
	net_context_unref(context);
   1cd24:	4620      	mov	r0, r4
   1cd26:	f7ff fe91 	bl	1ca4c <net_context_unref>
	return 0;
   1cd2a:	2000      	movs	r0, #0
   1cd2c:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1cd2e:	2111      	movs	r1, #17
   1cd30:	e7f6      	b.n	1cd20 <net_context_put+0x28>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1cd32:	f3c2 0241 	ubfx	r2, r2, #1, #2
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   1cd36:	2a02      	cmp	r2, #2
   1cd38:	d001      	beq.n	1cd3e <net_context_put+0x46>
   1cd3a:	2a03      	cmp	r2, #3
   1cd3c:	d1f2      	bne.n	1cd24 <net_context_put+0x2c>
		    && !context->tcp->fin_rcvd) {
   1cd3e:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1cd40:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
   1cd44:	f013 0f04 	tst.w	r3, #4
   1cd48:	d1ec      	bne.n	1cd24 <net_context_put+0x2c>
   1cd4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cd4e:	3130      	adds	r1, #48	; 0x30
   1cd50:	4809      	ldr	r0, [pc, #36]	; (1cd78 <net_context_put+0x80>)
   1cd52:	f00d f88b 	bl	29e6c <k_delayed_work_submit_to_queue>
			queue_fin(context);
   1cd56:	4620      	mov	r0, r4
   1cd58:	f7ff fb59 	bl	1c40e <queue_fin>
			return 0;
   1cd5c:	2000      	movs	r0, #0
   1cd5e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1cd60:	f06f 0015 	mvn.w	r0, #21
   1cd64:	4770      	bx	lr
   1cd66:	f06f 0015 	mvn.w	r0, #21
   1cd6a:	bd10      	pop	{r4, pc}
   1cd6c:	f06f 0015 	mvn.w	r0, #21
}
   1cd70:	bd10      	pop	{r4, pc}
   1cd72:	bf00      	nop
   1cd74:	20001ca0 	.word	0x20001ca0
   1cd78:	20002c70 	.word	0x20002c70

0001cd7c <net_context_bind>:
	if (context->conn_handler) {
   1cd7c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1cd7e:	2b00      	cmp	r3, #0
   1cd80:	d15c      	bne.n	1ce3c <net_context_bind+0xc0>
	if (addr->sa_family == AF_INET6) {
   1cd82:	880b      	ldrh	r3, [r1, #0]
   1cd84:	2b0a      	cmp	r3, #10
   1cd86:	d15d      	bne.n	1ce44 <net_context_bind+0xc8>
{
   1cd88:	b570      	push	{r4, r5, r6, lr}
   1cd8a:	b082      	sub	sp, #8
		struct net_if *iface = NULL;
   1cd8c:	2300      	movs	r3, #0
   1cd8e:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1cd90:	2a17      	cmp	r2, #23
   1cd92:	d945      	bls.n	1ce20 <net_context_bind+0xa4>
   1cd94:	460d      	mov	r5, r1
   1cd96:	4604      	mov	r4, r0
	return addr->s6_addr[0] == 0xFF;
   1cd98:	790b      	ldrb	r3, [r1, #4]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1cd9a:	2bff      	cmp	r3, #255	; 0xff
   1cd9c:	d009      	beq.n	1cdb2 <net_context_bind+0x36>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1cd9e:	684b      	ldr	r3, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cda0:	b983      	cbnz	r3, 1cdc4 <net_context_bind+0x48>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1cda2:	688b      	ldr	r3, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1cda4:	bb2b      	cbnz	r3, 1cdf2 <net_context_bind+0x76>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cda6:	68cb      	ldr	r3, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1cda8:	bb2b      	cbnz	r3, 1cdf6 <net_context_bind+0x7a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1cdaa:	690b      	ldr	r3, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cdac:	b32b      	cbz	r3, 1cdfa <net_context_bind+0x7e>
   1cdae:	2300      	movs	r3, #0
   1cdb0:	e009      	b.n	1cdc6 <net_context_bind+0x4a>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   1cdb2:	a901      	add	r1, sp, #4
   1cdb4:	1d28      	adds	r0, r5, #4
   1cdb6:	f7fe fccb 	bl	1b750 <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   1cdba:	4606      	mov	r6, r0
   1cdbc:	2800      	cmp	r0, #0
   1cdbe:	d034      	beq.n	1ce2a <net_context_bind+0xae>
			ptr = &maddr->address.in6_addr;
   1cdc0:	3608      	adds	r6, #8
   1cdc2:	e007      	b.n	1cdd4 <net_context_bind+0x58>
   1cdc4:	2300      	movs	r3, #0
		} else if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1cdc6:	b1d3      	cbz	r3, 1cdfe <net_context_bind+0x82>
			iface = net_if_get_default();
   1cdc8:	f7fe fa4c 	bl	1b264 <net_if_get_default>
   1cdcc:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   1cdce:	f002 fde9 	bl	1f9a4 <net_ipv6_unspecified_address>
   1cdd2:	4606      	mov	r6, r0
		if (!iface) {
   1cdd4:	9801      	ldr	r0, [sp, #4]
   1cdd6:	b370      	cbz	r0, 1ce36 <net_context_bind+0xba>
	context->iface = net_if_get_by_iface(iface);
   1cdd8:	f7ff f9ec 	bl	1c1b4 <net_if_get_by_iface>
   1cddc:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1cde0:	230a      	movs	r3, #10
   1cde2:	8123      	strh	r3, [r4, #8]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   1cde4:	60e6      	str	r6, [r4, #12]
		if (addr6->sin6_port) {
   1cde6:	8869      	ldrh	r1, [r5, #2]
   1cde8:	b989      	cbnz	r1, 1ce0e <net_context_bind+0x92>
				net_sin6_ptr(&context->local)->sin6_port;
   1cdea:	8963      	ldrh	r3, [r4, #10]
			addr6->sin6_port =
   1cdec:	806b      	strh	r3, [r5, #2]
		return 0;
   1cdee:	2300      	movs	r3, #0
   1cdf0:	e018      	b.n	1ce24 <net_context_bind+0xa8>
   1cdf2:	2300      	movs	r3, #0
   1cdf4:	e7e7      	b.n	1cdc6 <net_context_bind+0x4a>
   1cdf6:	2300      	movs	r3, #0
   1cdf8:	e7e5      	b.n	1cdc6 <net_context_bind+0x4a>
   1cdfa:	2301      	movs	r3, #1
   1cdfc:	e7e3      	b.n	1cdc6 <net_context_bind+0x4a>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   1cdfe:	a901      	add	r1, sp, #4
   1ce00:	1d28      	adds	r0, r5, #4
   1ce02:	f7fe fa5b 	bl	1b2bc <net_if_ipv6_addr_lookup>
			if (!ifaddr) {
   1ce06:	4606      	mov	r6, r0
   1ce08:	b190      	cbz	r0, 1ce30 <net_context_bind+0xb4>
			ptr = &ifaddr->address.in6_addr;
   1ce0a:	3604      	adds	r6, #4
   1ce0c:	e7e2      	b.n	1cdd4 <net_context_bind+0x58>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   1ce0e:	462a      	mov	r2, r5
   1ce10:	4618      	mov	r0, r3
   1ce12:	f7ff fa9f 	bl	1c354 <check_used_port>
			if (!ret) {
   1ce16:	4603      	mov	r3, r0
   1ce18:	b920      	cbnz	r0, 1ce24 <net_context_bind+0xa8>
					addr6->sin6_port;
   1ce1a:	886a      	ldrh	r2, [r5, #2]
				net_sin6_ptr(&context->local)->sin6_port =
   1ce1c:	8162      	strh	r2, [r4, #10]
   1ce1e:	e001      	b.n	1ce24 <net_context_bind+0xa8>
			return -EINVAL;
   1ce20:	f06f 0315 	mvn.w	r3, #21
}
   1ce24:	4618      	mov	r0, r3
   1ce26:	b002      	add	sp, #8
   1ce28:	bd70      	pop	{r4, r5, r6, pc}
				return -ENOENT;
   1ce2a:	f06f 0301 	mvn.w	r3, #1
   1ce2e:	e7f9      	b.n	1ce24 <net_context_bind+0xa8>
				return -ENOENT;
   1ce30:	f06f 0301 	mvn.w	r3, #1
   1ce34:	e7f6      	b.n	1ce24 <net_context_bind+0xa8>
			return -EADDRNOTAVAIL;
   1ce36:	f06f 037c 	mvn.w	r3, #124	; 0x7c
   1ce3a:	e7f3      	b.n	1ce24 <net_context_bind+0xa8>
		return -EISCONN;
   1ce3c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
}
   1ce40:	4618      	mov	r0, r3
   1ce42:	4770      	bx	lr
	return -EINVAL;
   1ce44:	f06f 0315 	mvn.w	r3, #21
   1ce48:	e7fa      	b.n	1ce40 <net_context_bind+0xc4>

0001ce4a <bind_default>:
	if (context->flags & NET_CONTEXT_FAMILY) {
   1ce4a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1ce4e:	f013 0f10 	tst.w	r3, #16
   1ce52:	d006      	beq.n	1ce62 <bind_default+0x18>
		return AF_INET6;
   1ce54:	230a      	movs	r3, #10
	if (family == AF_INET6) {
   1ce56:	2b0a      	cmp	r3, #10
   1ce58:	d120      	bne.n	1ce9c <bind_default+0x52>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1ce5a:	68c3      	ldr	r3, [r0, #12]
   1ce5c:	b11b      	cbz	r3, 1ce66 <bind_default+0x1c>
			return 0;
   1ce5e:	2000      	movs	r0, #0
   1ce60:	4770      	bx	lr
	return AF_INET;
   1ce62:	2302      	movs	r3, #2
   1ce64:	e7f7      	b.n	1ce56 <bind_default+0xc>
{
   1ce66:	b530      	push	{r4, r5, lr}
   1ce68:	b087      	sub	sp, #28
   1ce6a:	4604      	mov	r4, r0
		addr6.sin6_family = AF_INET6;
   1ce6c:	ad06      	add	r5, sp, #24
   1ce6e:	230a      	movs	r3, #10
   1ce70:	f825 3d18 	strh.w	r3, [r5, #-24]!
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   1ce74:	f002 fd96 	bl	1f9a4 <net_ipv6_unspecified_address>
   1ce78:	2210      	movs	r2, #16
   1ce7a:	4601      	mov	r1, r0
   1ce7c:	a801      	add	r0, sp, #4
   1ce7e:	f7e3 fa1f 	bl	2c0 <memcpy>
			find_available_port(context,
   1ce82:	4629      	mov	r1, r5
   1ce84:	4620      	mov	r0, r4
   1ce86:	f7ff faa1 	bl	1c3cc <find_available_port>
		addr6.sin6_port =
   1ce8a:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   1ce8e:	2218      	movs	r2, #24
   1ce90:	4629      	mov	r1, r5
   1ce92:	4620      	mov	r0, r4
   1ce94:	f7ff ff72 	bl	1cd7c <net_context_bind>
}
   1ce98:	b007      	add	sp, #28
   1ce9a:	bd30      	pop	{r4, r5, pc}
	return -EINVAL;
   1ce9c:	f06f 0015 	mvn.w	r0, #21
   1cea0:	4770      	bx	lr

0001cea2 <sendto>:
{
   1cea2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cea4:	b085      	sub	sp, #20
   1cea6:	9003      	str	r0, [sp, #12]
	return pkt->context;
   1cea8:	68c5      	ldr	r5, [r0, #12]
	return context->flags & NET_CONTEXT_IN_USE;
   1ceaa:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1ceae:	f010 0f01 	tst.w	r0, #1
   1ceb2:	d072      	beq.n	1cf9a <sendto+0xf8>
	if (context->flags & NET_CONTEXT_PROTO) {
   1ceb4:	f010 0f40 	tst.w	r0, #64	; 0x40
   1ceb8:	d01f      	beq.n	1cefa <sendto+0x58>
		return IPPROTO_TCP;
   1ceba:	f04f 0e06 	mov.w	lr, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1cebe:	f1be 0f06 	cmp.w	lr, #6
   1cec2:	d01d      	beq.n	1cf00 <sendto+0x5e>
   1cec4:	461f      	mov	r7, r3
   1cec6:	4616      	mov	r6, r2
   1cec8:	460c      	mov	r4, r1
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1ceca:	f1be 0f11 	cmp.w	lr, #17
   1cece:	d024      	beq.n	1cf1a <sendto+0x78>
	if (!dst_addr) {
   1ced0:	2c00      	cmp	r4, #0
   1ced2:	d068      	beq.n	1cfa6 <sendto+0x104>
	if (net_pkt_family(pkt) == AF_INET6) {
   1ced4:	9903      	ldr	r1, [sp, #12]
	return pkt->family;
   1ced6:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1ceda:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1cede:	2b0a      	cmp	r3, #10
   1cee0:	d164      	bne.n	1cfac <sendto+0x10a>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1cee2:	2e17      	cmp	r6, #23
   1cee4:	d965      	bls.n	1cfb2 <sendto+0x110>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1cee6:	6863      	ldr	r3, [r4, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cee8:	b9f3      	cbnz	r3, 1cf28 <sendto+0x86>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1ceea:	68a3      	ldr	r3, [r4, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1ceec:	bb63      	cbnz	r3, 1cf48 <sendto+0xa6>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1ceee:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1cef0:	bb63      	cbnz	r3, 1cf4c <sendto+0xaa>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1cef2:	6923      	ldr	r3, [r4, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cef4:	b363      	cbz	r3, 1cf50 <sendto+0xae>
   1cef6:	2300      	movs	r3, #0
   1cef8:	e017      	b.n	1cf2a <sendto+0x88>
	return IPPROTO_UDP;
   1cefa:	f04f 0e11 	mov.w	lr, #17
   1cefe:	e7de      	b.n	1cebe <sendto+0x1c>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1cf00:	f3c0 0041 	ubfx	r0, r0, #1, #2
		if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   1cf04:	2802      	cmp	r0, #2
   1cf06:	d14b      	bne.n	1cfa0 <sendto+0xfe>
		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1cf08:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1cf0a:	f8b0 00a4 	ldrh.w	r0, [r0, #164]	; 0xa4
   1cf0e:	f410 7f80 	tst.w	r0, #256	; 0x100
   1cf12:	d0d7      	beq.n	1cec4 <sendto+0x22>
			return -ESHUTDOWN;
   1cf14:	f06f 036d 	mvn.w	r3, #109	; 0x6d
   1cf18:	e03c      	b.n	1cf94 <sendto+0xf2>
		ret = bind_default(context);
   1cf1a:	4628      	mov	r0, r5
   1cf1c:	f7ff ff95 	bl	1ce4a <bind_default>
		if (ret) {
   1cf20:	4603      	mov	r3, r0
   1cf22:	2800      	cmp	r0, #0
   1cf24:	d0d4      	beq.n	1ced0 <sendto+0x2e>
   1cf26:	e035      	b.n	1cf94 <sendto+0xf2>
   1cf28:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1cf2a:	2b00      	cmp	r3, #0
   1cf2c:	d144      	bne.n	1cfb8 <sendto+0x116>
	if (context->flags & NET_CONTEXT_PROTO) {
   1cf2e:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1cf32:	f013 0f40 	tst.w	r3, #64	; 0x40
   1cf36:	d00d      	beq.n	1cf54 <sendto+0xb2>
		return IPPROTO_TCP;
   1cf38:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1cf3a:	2b11      	cmp	r3, #17
   1cf3c:	d00c      	beq.n	1cf58 <sendto+0xb6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1cf3e:	2b06      	cmp	r3, #6
   1cf40:	d13d      	bne.n	1cfbe <sendto+0x11c>
	return net_buf_frags_len(pkt->frags);
   1cf42:	688a      	ldr	r2, [r1, #8]
	size_t bytes = 0;
   1cf44:	2000      	movs	r0, #0
   1cf46:	e011      	b.n	1cf6c <sendto+0xca>
   1cf48:	2300      	movs	r3, #0
   1cf4a:	e7ee      	b.n	1cf2a <sendto+0x88>
   1cf4c:	2300      	movs	r3, #0
   1cf4e:	e7ec      	b.n	1cf2a <sendto+0x88>
   1cf50:	2301      	movs	r3, #1
   1cf52:	e7ea      	b.n	1cf2a <sendto+0x88>
	return IPPROTO_UDP;
   1cf54:	2311      	movs	r3, #17
   1cf56:	e7f0      	b.n	1cf3a <sendto+0x98>
		ret = create_udp_packet(context, pkt, dst_addr, &pkt);
   1cf58:	ab03      	add	r3, sp, #12
   1cf5a:	4622      	mov	r2, r4
   1cf5c:	4628      	mov	r0, r5
   1cf5e:	f7ff fc0f 	bl	1c780 <create_udp_packet>
   1cf62:	4603      	mov	r3, r0
   1cf64:	e009      	b.n	1cf7a <sendto+0xd8>
		bytes += buf->len;
   1cf66:	8994      	ldrh	r4, [r2, #12]
   1cf68:	4420      	add	r0, r4
		buf = buf->frags;
   1cf6a:	6812      	ldr	r2, [r2, #0]
	while (buf) {
   1cf6c:	2a00      	cmp	r2, #0
   1cf6e:	d1fa      	bne.n	1cf66 <sendto+0xc4>
	pkt->appdatalen = len;
   1cf70:	8608      	strh	r0, [r1, #48]	; 0x30
		ret = net_tcp_queue_data(context, pkt);
   1cf72:	4628      	mov	r0, r5
   1cf74:	f006 fd08 	bl	23988 <net_tcp_queue_data>
   1cf78:	4603      	mov	r3, r0
	if (ret < 0) {
   1cf7a:	2b00      	cmp	r3, #0
   1cf7c:	db0a      	blt.n	1cf94 <sendto+0xf2>
	return send_data(context, pkt, cb, timeout, token, user_data);
   1cf7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1cf80:	9301      	str	r3, [sp, #4]
   1cf82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1cf84:	9300      	str	r3, [sp, #0]
   1cf86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cf88:	463a      	mov	r2, r7
   1cf8a:	9903      	ldr	r1, [sp, #12]
   1cf8c:	4628      	mov	r0, r5
   1cf8e:	f7ff fc1d 	bl	1c7cc <send_data>
   1cf92:	4603      	mov	r3, r0
}
   1cf94:	4618      	mov	r0, r3
   1cf96:	b005      	add	sp, #20
   1cf98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBADF;
   1cf9a:	f06f 0308 	mvn.w	r3, #8
   1cf9e:	e7f9      	b.n	1cf94 <sendto+0xf2>
			return -ENOTCONN;
   1cfa0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1cfa4:	e7f6      	b.n	1cf94 <sendto+0xf2>
		return -EDESTADDRREQ;
   1cfa6:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1cfaa:	e7f3      	b.n	1cf94 <sendto+0xf2>
		return -EINVAL;
   1cfac:	f06f 0315 	mvn.w	r3, #21
   1cfb0:	e7f0      	b.n	1cf94 <sendto+0xf2>
			return -EINVAL;
   1cfb2:	f06f 0315 	mvn.w	r3, #21
   1cfb6:	e7ed      	b.n	1cf94 <sendto+0xf2>
			return -EDESTADDRREQ;
   1cfb8:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1cfbc:	e7ea      	b.n	1cf94 <sendto+0xf2>
		return -EPROTONOSUPPORT;
   1cfbe:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   1cfc2:	e7e7      	b.n	1cf94 <sendto+0xf2>

0001cfc4 <recv_udp>:
#if defined(CONFIG_NET_UDP)
static int recv_udp(struct net_context *context,
		    net_context_recv_cb_t cb,
		    s32_t timeout,
		    void *user_data)
{
   1cfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cfc6:	b08f      	sub	sp, #60	; 0x3c
   1cfc8:	4604      	mov	r4, r0
   1cfca:	460d      	mov	r5, r1
   1cfcc:	461e      	mov	r6, r3
	struct sockaddr local_addr = {
   1cfce:	2300      	movs	r3, #0
   1cfd0:	9304      	str	r3, [sp, #16]
   1cfd2:	9305      	str	r3, [sp, #20]
   1cfd4:	9306      	str	r3, [sp, #24]
   1cfd6:	9307      	str	r3, [sp, #28]
   1cfd8:	9308      	str	r3, [sp, #32]
   1cfda:	9309      	str	r3, [sp, #36]	; 0x24
	if (context->flags & NET_CONTEXT_FAMILY) {
   1cfdc:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1cfe0:	f013 0f10 	tst.w	r3, #16
   1cfe4:	d037      	beq.n	1d056 <recv_udp+0x92>
		return AF_INET6;
   1cfe6:	230a      	movs	r3, #10
   1cfe8:	f8ad 3010 	strh.w	r3, [sp, #16]
	u16_t lport = 0;
	int ret;

	ARG_UNUSED(timeout);

	if (context->conn_handler) {
   1cfec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1cfee:	b118      	cbz	r0, 1cff8 <recv_udp+0x34>
		net_conn_unregister(context->conn_handler);
   1cff0:	f008 f864 	bl	250bc <net_conn_unregister>
		context->conn_handler = NULL;
   1cff4:	2300      	movs	r3, #0
   1cff6:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	ret = bind_default(context);
   1cff8:	4620      	mov	r0, r4
   1cffa:	f7ff ff26 	bl	1ce4a <bind_default>
	if (ret) {
   1cffe:	4603      	mov	r3, r0
   1d000:	bb30      	cbnz	r0, 1d050 <recv_udp+0x8c>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d002:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   1d006:	f017 0f10 	tst.w	r7, #16
   1d00a:	d026      	beq.n	1d05a <recv_udp+0x96>
		return AF_INET6;
   1d00c:	230a      	movs	r3, #10
		return ret;
	}

#if defined(CONFIG_NET_IPV6)
	if (net_context_get_family(context) == AF_INET6) {
   1d00e:	2b0a      	cmp	r3, #10
   1d010:	d025      	beq.n	1d05e <recv_udp+0x9a>
	u16_t lport = 0;
   1d012:	f04f 0e00 	mov.w	lr, #0
	struct sockaddr *laddr = NULL;
   1d016:	4672      	mov	r2, lr

		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
	}
#endif /* CONFIG_NET_IPV4 */

	context->recv_cb = cb;
   1d018:	6325      	str	r5, [r4, #48]	; 0x30
	if (context->flags & NET_CONTEXT_PROTO) {
   1d01a:	f017 0f40 	tst.w	r7, #64	; 0x40
   1d01e:	d037      	beq.n	1d090 <recv_udp+0xcc>
		return IPPROTO_TCP;
   1d020:	2006      	movs	r0, #6

	ret = net_conn_register(net_context_get_ip_proto(context),
   1d022:	f017 0f80 	tst.w	r7, #128	; 0x80
   1d026:	d135      	bne.n	1d094 <recv_udp+0xd0>
   1d028:	2100      	movs	r1, #0
				context->flags & NET_CONTEXT_REMOTE_ADDR_SET ?
							&context->remote : NULL,
				laddr,
				ntohs(net_sin(&context->remote)->sin_port),
   1d02a:	8ae5      	ldrh	r5, [r4, #22]
   1d02c:	022b      	lsls	r3, r5, #8
   1d02e:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
				ntohs(lport),
   1d032:	ea4f 251e 	mov.w	r5, lr, lsr #8
   1d036:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   1d03a:	b2ad      	uxth	r5, r5
   1d03c:	342c      	adds	r4, #44	; 0x2c
   1d03e:	9403      	str	r4, [sp, #12]
   1d040:	9602      	str	r6, [sp, #8]
   1d042:	4c16      	ldr	r4, [pc, #88]	; (1d09c <recv_udp+0xd8>)
   1d044:	9401      	str	r4, [sp, #4]
   1d046:	9500      	str	r5, [sp, #0]
   1d048:	b29b      	uxth	r3, r3
   1d04a:	f008 f855 	bl	250f8 <net_conn_register>
   1d04e:	4603      	mov	r3, r0
				packet_received,
				user_data,
				&context->conn_handler);

	return ret;
}
   1d050:	4618      	mov	r0, r3
   1d052:	b00f      	add	sp, #60	; 0x3c
   1d054:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   1d056:	2302      	movs	r3, #2
   1d058:	e7c6      	b.n	1cfe8 <recv_udp+0x24>
   1d05a:	2302      	movs	r3, #2
   1d05c:	e7d7      	b.n	1d00e <recv_udp+0x4a>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1d05e:	68e3      	ldr	r3, [r4, #12]
   1d060:	b1a3      	cbz	r3, 1d08c <recv_udp+0xc8>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1d062:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1d066:	6818      	ldr	r0, [r3, #0]
   1d068:	6859      	ldr	r1, [r3, #4]
   1d06a:	689a      	ldr	r2, [r3, #8]
   1d06c:	68db      	ldr	r3, [r3, #12]
   1d06e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1d072:	f10d 0e14 	add.w	lr, sp, #20
   1d076:	ab0e      	add	r3, sp, #56	; 0x38
   1d078:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1d07c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
			laddr = &local_addr;
   1d080:	aa04      	add	r2, sp, #16
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
   1d082:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
		net_sin6(&local_addr)->sin6_port =
   1d086:	f8ad e012 	strh.w	lr, [sp, #18]
   1d08a:	e7c5      	b.n	1d018 <recv_udp+0x54>
	struct sockaddr *laddr = NULL;
   1d08c:	2200      	movs	r2, #0
   1d08e:	e7f8      	b.n	1d082 <recv_udp+0xbe>
	return IPPROTO_UDP;
   1d090:	2011      	movs	r0, #17
   1d092:	e7c6      	b.n	1d022 <recv_udp+0x5e>
	ret = net_conn_register(net_context_get_ip_proto(context),
   1d094:	f104 0114 	add.w	r1, r4, #20
   1d098:	e7c7      	b.n	1d02a <recv_udp+0x66>
   1d09a:	bf00      	nop
   1d09c:	0001c4d1 	.word	0x0001c4d1

0001d0a0 <net_context_connect>:
{
   1d0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d0a4:	b090      	sub	sp, #64	; 0x40
	return context->flags & NET_CONTEXT_IN_USE;
   1d0a6:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1d0aa:	f014 0f01 	tst.w	r4, #1
   1d0ae:	f000 80c9 	beq.w	1d244 <net_context_connect+0x1a4>
   1d0b2:	461f      	mov	r7, r3
   1d0b4:	4615      	mov	r5, r2
   1d0b6:	460e      	mov	r6, r1
   1d0b8:	4604      	mov	r4, r0
	ret = bind_default(context);
   1d0ba:	f7ff fec6 	bl	1ce4a <bind_default>
	if (ret) {
   1d0be:	4680      	mov	r8, r0
   1d0c0:	2800      	cmp	r0, #0
   1d0c2:	f040 80c1 	bne.w	1d248 <net_context_connect+0x1a8>
	if (addr->sa_family != net_context_get_family(context)) {
   1d0c6:	8831      	ldrh	r1, [r6, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d0c8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d0cc:	f013 0f10 	tst.w	r3, #16
   1d0d0:	d02b      	beq.n	1d12a <net_context_connect+0x8a>
		return AF_INET6;
   1d0d2:	220a      	movs	r2, #10
   1d0d4:	4291      	cmp	r1, r2
   1d0d6:	f040 80bb 	bne.w	1d250 <net_context_connect+0x1b0>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1d0da:	f3c3 0341 	ubfx	r3, r3, #1, #2
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   1d0de:	2b03      	cmp	r3, #3
   1d0e0:	f000 80b9 	beq.w	1d256 <net_context_connect+0x1b6>
	if (net_context_get_family(context) == AF_INET6) {
   1d0e4:	2a0a      	cmp	r2, #10
   1d0e6:	f040 80b9 	bne.w	1d25c <net_context_connect+0x1bc>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1d0ea:	2d17      	cmp	r5, #23
   1d0ec:	f240 80b9 	bls.w	1d262 <net_context_connect+0x1c2>
	return addr->s6_addr[0] == 0xFF;
   1d0f0:	7e23      	ldrb	r3, [r4, #24]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1d0f2:	2bff      	cmp	r3, #255	; 0xff
   1d0f4:	f000 80b8 	beq.w	1d268 <net_context_connect+0x1c8>
		memcpy(&addr6->sin6_addr, &net_sin6(addr)->sin6_addr,
   1d0f8:	2210      	movs	r2, #16
   1d0fa:	1d31      	adds	r1, r6, #4
   1d0fc:	f104 0018 	add.w	r0, r4, #24
   1d100:	f7e3 f8de 	bl	2c0 <memcpy>
		addr6->sin6_port = net_sin6(addr)->sin6_port;
   1d104:	f8b6 c002 	ldrh.w	ip, [r6, #2]
   1d108:	f8a4 c016 	strh.w	ip, [r4, #22]
		addr6->sin6_family = AF_INET6;
   1d10c:	230a      	movs	r3, #10
   1d10e:	82a3      	strh	r3, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d110:	69a3      	ldr	r3, [r4, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d112:	b963      	cbnz	r3, 1d12e <net_context_connect+0x8e>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d114:	69e3      	ldr	r3, [r4, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d116:	2b00      	cmp	r3, #0
   1d118:	d174      	bne.n	1d204 <net_context_connect+0x164>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d11a:	6a23      	ldr	r3, [r4, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d11c:	2b00      	cmp	r3, #0
   1d11e:	d173      	bne.n	1d208 <net_context_connect+0x168>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1d120:	6a63      	ldr	r3, [r4, #36]	; 0x24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d122:	2b00      	cmp	r3, #0
   1d124:	d072      	beq.n	1d20c <net_context_connect+0x16c>
   1d126:	4643      	mov	r3, r8
   1d128:	e002      	b.n	1d130 <net_context_connect+0x90>
	return AF_INET;
   1d12a:	2202      	movs	r2, #2
   1d12c:	e7d2      	b.n	1d0d4 <net_context_connect+0x34>
   1d12e:	4643      	mov	r3, r8
		if (!net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1d130:	f013 0f01 	tst.w	r3, #1
   1d134:	d16c      	bne.n	1d210 <net_context_connect+0x170>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1d136:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d13a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d13e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1d142:	230a      	movs	r3, #10
   1d144:	8123      	strh	r3, [r4, #8]
		net_sin6(&local_addr)->sin6_family = AF_INET6;
   1d146:	f8ad 3018 	strh.w	r3, [sp, #24]
		net_sin6(&local_addr)->sin6_port = lport =
   1d14a:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
   1d14e:	f8ad e01a 	strh.w	lr, [sp, #26]
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1d152:	68e3      	ldr	r3, [r4, #12]
   1d154:	2b00      	cmp	r3, #0
   1d156:	d062      	beq.n	1d21e <net_context_connect+0x17e>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1d158:	ad0c      	add	r5, sp, #48	; 0x30
   1d15a:	6818      	ldr	r0, [r3, #0]
   1d15c:	6859      	ldr	r1, [r3, #4]
   1d15e:	689a      	ldr	r2, [r3, #8]
   1d160:	68db      	ldr	r3, [r3, #12]
   1d162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1d164:	ad07      	add	r5, sp, #28
   1d166:	ab10      	add	r3, sp, #64	; 0x40
   1d168:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1d16c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
   1d170:	aa06      	add	r2, sp, #24
	if (context->flags & NET_CONTEXT_TYPE) {
   1d172:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d176:	f013 0f20 	tst.w	r3, #32
   1d17a:	d052      	beq.n	1d222 <net_context_connect+0x182>
		return SOCK_STREAM;
   1d17c:	2301      	movs	r3, #1
	if (net_context_get_type(context) == SOCK_DGRAM) {
   1d17e:	2b02      	cmp	r3, #2
   1d180:	d051      	beq.n	1d226 <net_context_connect+0x186>
	if (net_context_get_type(context) != SOCK_STREAM) {
   1d182:	2b01      	cmp	r3, #1
   1d184:	d173      	bne.n	1d26e <net_context_connect+0x1ce>
			       ntohs(rport),
   1d186:	ea4f 231c 	mov.w	r3, ip, lsr #8
   1d18a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			       ntohs(lport),
   1d18e:	ea4f 211e 	mov.w	r1, lr, lsr #8
   1d192:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
	ret = net_tcp_register(addr,
   1d196:	b289      	uxth	r1, r1
   1d198:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1d19c:	9003      	str	r0, [sp, #12]
   1d19e:	9402      	str	r4, [sp, #8]
   1d1a0:	4835      	ldr	r0, [pc, #212]	; (1d278 <net_context_connect+0x1d8>)
   1d1a2:	9001      	str	r0, [sp, #4]
   1d1a4:	9100      	str	r1, [sp, #0]
   1d1a6:	b29b      	uxth	r3, r3
   1d1a8:	4631      	mov	r1, r6
   1d1aa:	2006      	movs	r0, #6
   1d1ac:	f007 ffa4 	bl	250f8 <net_conn_register>
	if (ret < 0) {
   1d1b0:	2800      	cmp	r0, #0
   1d1b2:	db5f      	blt.n	1d274 <net_context_connect+0x1d4>
	context->connect_cb = cb;
   1d1b4:	63a7      	str	r7, [r4, #56]	; 0x38
	context->user_data = user_data;
   1d1b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1d1b8:	6023      	str	r3, [r4, #0]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1d1ba:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d1be:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1d1c2:	f043 0302 	orr.w	r3, r3, #2
   1d1c6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   1d1ca:	2102      	movs	r1, #2
   1d1cc:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1d1ce:	f006 fa6e 	bl	236ae <net_tcp_change_state>
	struct net_pkt *pkt = NULL;
   1d1d2:	2200      	movs	r2, #0
   1d1d4:	ab10      	add	r3, sp, #64	; 0x40
   1d1d6:	f843 2d2c 	str.w	r2, [r3, #-44]!
	ret = net_tcp_prepare_segment(context->tcp, flags, NULL, 0,
   1d1da:	9302      	str	r3, [sp, #8]
   1d1dc:	9601      	str	r6, [sp, #4]
   1d1de:	9200      	str	r2, [sp, #0]
   1d1e0:	4613      	mov	r3, r2
   1d1e2:	2102      	movs	r1, #2
   1d1e4:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1d1e6:	f006 faff 	bl	237e8 <net_tcp_prepare_segment>
	if (ret) {
   1d1ea:	b310      	cbz	r0, 1d232 <net_context_connect+0x192>
	if (timeout != 0 && k_sem_take(&context->tcp->connect_wait, timeout)) {
   1d1ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d1ee:	b35b      	cbz	r3, 1d248 <net_context_connect+0x1a8>
   1d1f0:	6e20      	ldr	r0, [r4, #96]	; 0x60
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1d1f2:	4619      	mov	r1, r3
   1d1f4:	30ac      	adds	r0, #172	; 0xac
   1d1f6:	f00c f803 	bl	29200 <_impl_k_sem_take>
   1d1fa:	4680      	mov	r8, r0
   1d1fc:	b320      	cbz	r0, 1d248 <net_context_connect+0x1a8>
		return -ETIMEDOUT;
   1d1fe:	f06f 0873 	mvn.w	r8, #115	; 0x73
   1d202:	e021      	b.n	1d248 <net_context_connect+0x1a8>
   1d204:	4643      	mov	r3, r8
   1d206:	e793      	b.n	1d130 <net_context_connect+0x90>
   1d208:	4643      	mov	r3, r8
   1d20a:	e791      	b.n	1d130 <net_context_connect+0x90>
   1d20c:	2301      	movs	r3, #1
   1d20e:	e78f      	b.n	1d130 <net_context_connect+0x90>
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   1d210:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d218:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   1d21c:	e791      	b.n	1d142 <net_context_connect+0xa2>
	struct sockaddr *laddr = NULL;
   1d21e:	2200      	movs	r2, #0
   1d220:	e7a7      	b.n	1d172 <net_context_connect+0xd2>
	return SOCK_DGRAM;
   1d222:	2302      	movs	r3, #2
   1d224:	e7ab      	b.n	1d17e <net_context_connect+0xde>
		if (cb) {
   1d226:	b17f      	cbz	r7, 1d248 <net_context_connect+0x1a8>
			cb(context, 0, user_data);
   1d228:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1d22a:	2100      	movs	r1, #0
   1d22c:	4620      	mov	r0, r4
   1d22e:	47b8      	blx	r7
   1d230:	e00a      	b.n	1d248 <net_context_connect+0x1a8>
	ret = net_send_data(pkt);
   1d232:	9805      	ldr	r0, [sp, #20]
   1d234:	f7fd fdf4 	bl	1ae20 <net_send_data>
	if (ret < 0) {
   1d238:	2800      	cmp	r0, #0
   1d23a:	dad7      	bge.n	1d1ec <net_context_connect+0x14c>
		net_pkt_unref(pkt);
   1d23c:	9805      	ldr	r0, [sp, #20]
   1d23e:	f000 f9f0 	bl	1d622 <net_pkt_unref>
   1d242:	e7d3      	b.n	1d1ec <net_context_connect+0x14c>
		return -EBADF;
   1d244:	f06f 0808 	mvn.w	r8, #8
}
   1d248:	4640      	mov	r0, r8
   1d24a:	b010      	add	sp, #64	; 0x40
   1d24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   1d250:	f06f 0815 	mvn.w	r8, #21
   1d254:	e7f8      	b.n	1d248 <net_context_connect+0x1a8>
		return -EOPNOTSUPP;
   1d256:	f06f 085e 	mvn.w	r8, #94	; 0x5e
   1d25a:	e7f5      	b.n	1d248 <net_context_connect+0x1a8>
		return -EINVAL; /* Not IPv4 or IPv6 */
   1d25c:	f06f 0815 	mvn.w	r8, #21
   1d260:	e7f2      	b.n	1d248 <net_context_connect+0x1a8>
			return -EINVAL;
   1d262:	f06f 0815 	mvn.w	r8, #21
   1d266:	e7ef      	b.n	1d248 <net_context_connect+0x1a8>
			return -EADDRNOTAVAIL;
   1d268:	f06f 087c 	mvn.w	r8, #124	; 0x7c
   1d26c:	e7ec      	b.n	1d248 <net_context_connect+0x1a8>
		return -ENOTSUP;
   1d26e:	f06f 0885 	mvn.w	r8, #133	; 0x85
   1d272:	e7e9      	b.n	1d248 <net_context_connect+0x1a8>
		return ret;
   1d274:	4680      	mov	r8, r0
   1d276:	e7e7      	b.n	1d248 <net_context_connect+0x1a8>
   1d278:	0001cb21 	.word	0x0001cb21

0001d27c <net_context_send>:
{
   1d27c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d27e:	b085      	sub	sp, #20
	return pkt->context;
   1d280:	68c4      	ldr	r4, [r0, #12]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1d282:	f994 505d 	ldrsb.w	r5, [r4, #93]	; 0x5d
   1d286:	2d00      	cmp	r5, #0
   1d288:	da17      	bge.n	1d2ba <net_context_send+0x3e>
	    !net_sin(&context->remote)->sin_port) {
   1d28a:	8ae5      	ldrh	r5, [r4, #22]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1d28c:	b1c5      	cbz	r5, 1d2c0 <net_context_send+0x44>
	return pkt->family;
   1d28e:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
   1d292:	f3c5 05c3 	ubfx	r5, r5, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1d296:	2d0a      	cmp	r5, #10
   1d298:	d00d      	beq.n	1d2b6 <net_context_send+0x3a>
		addrlen = 0;
   1d29a:	2700      	movs	r7, #0
   1d29c:	461e      	mov	r6, r3
   1d29e:	460b      	mov	r3, r1
	return sendto(pkt, &context->remote, addrlen, cb, timeout, token,
   1d2a0:	990a      	ldr	r1, [sp, #40]	; 0x28
   1d2a2:	9102      	str	r1, [sp, #8]
   1d2a4:	9601      	str	r6, [sp, #4]
   1d2a6:	9200      	str	r2, [sp, #0]
   1d2a8:	463a      	mov	r2, r7
   1d2aa:	f104 0114 	add.w	r1, r4, #20
   1d2ae:	f7ff fdf8 	bl	1cea2 <sendto>
}
   1d2b2:	b005      	add	sp, #20
   1d2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		addrlen = sizeof(struct sockaddr_in6);
   1d2b6:	2718      	movs	r7, #24
   1d2b8:	e7f0      	b.n	1d29c <net_context_send+0x20>
		return -EDESTADDRREQ;
   1d2ba:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1d2be:	e7f8      	b.n	1d2b2 <net_context_send+0x36>
   1d2c0:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1d2c4:	e7f5      	b.n	1d2b2 <net_context_send+0x36>

0001d2c6 <net_context_sendto>:
{
   1d2c6:	b510      	push	{r4, lr}
   1d2c8:	b084      	sub	sp, #16
   1d2ca:	461c      	mov	r4, r3
	return pkt->context;
   1d2cc:	68c3      	ldr	r3, [r0, #12]
	if (context->flags & NET_CONTEXT_PROTO) {
   1d2ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   1d2d2:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d2d6:	d00d      	beq.n	1d2f4 <net_context_sendto+0x2e>
		return IPPROTO_TCP;
   1d2d8:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d2da:	2b06      	cmp	r3, #6
   1d2dc:	d00c      	beq.n	1d2f8 <net_context_sendto+0x32>
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   1d2de:	9b08      	ldr	r3, [sp, #32]
   1d2e0:	9302      	str	r3, [sp, #8]
   1d2e2:	9b07      	ldr	r3, [sp, #28]
   1d2e4:	9301      	str	r3, [sp, #4]
   1d2e6:	9b06      	ldr	r3, [sp, #24]
   1d2e8:	9300      	str	r3, [sp, #0]
   1d2ea:	4623      	mov	r3, r4
   1d2ec:	f7ff fdd9 	bl	1cea2 <sendto>
}
   1d2f0:	b004      	add	sp, #16
   1d2f2:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1d2f4:	2311      	movs	r3, #17
   1d2f6:	e7f0      	b.n	1d2da <net_context_sendto+0x14>
		return net_context_send(pkt, cb, timeout, token, user_data);
   1d2f8:	9b08      	ldr	r3, [sp, #32]
   1d2fa:	9300      	str	r3, [sp, #0]
   1d2fc:	9b07      	ldr	r3, [sp, #28]
   1d2fe:	9a06      	ldr	r2, [sp, #24]
   1d300:	4621      	mov	r1, r4
   1d302:	f7ff ffbb 	bl	1d27c <net_context_send>
   1d306:	e7f3      	b.n	1d2f0 <net_context_sendto+0x2a>

0001d308 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     s32_t timeout,
		     void *user_data)
{
   1d308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return context->flags & NET_CONTEXT_IN_USE;
   1d30a:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
   1d30e:	f014 0f01 	tst.w	r4, #1
   1d312:	d030      	beq.n	1d376 <net_context_recv+0x6e>
	if (context->flags & NET_CONTEXT_PROTO) {
   1d314:	f014 0f40 	tst.w	r4, #64	; 0x40
   1d318:	d023      	beq.n	1d362 <net_context_recv+0x5a>
		return IPPROTO_TCP;
   1d31a:	2606      	movs	r6, #6
   1d31c:	4617      	mov	r7, r2
   1d31e:	4605      	mov	r5, r0
			context, cb, timeout, user_data);
	}
#endif /* CONFIG_NET_OFFLOAD */

#if defined(CONFIG_NET_UDP)
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1d320:	2e11      	cmp	r6, #17
   1d322:	d020      	beq.n	1d366 <net_context_recv+0x5e>
		}
	} else
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d324:	2e06      	cmp	r6, #6
   1d326:	d129      	bne.n	1d37c <net_context_recv+0x74>
		NET_ASSERT(context->tcp);

		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1d328:	6e02      	ldr	r2, [r0, #96]	; 0x60
   1d32a:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
   1d32e:	f410 7f80 	tst.w	r0, #256	; 0x100
   1d332:	d126      	bne.n	1d382 <net_context_recv+0x7a>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1d334:	f3c4 0441 	ubfx	r4, r4, #1, #2
			return -ESHUTDOWN;
		} else if (net_context_get_state(context)
   1d338:	2c02      	cmp	r4, #2
   1d33a:	d125      	bne.n	1d388 <net_context_recv+0x80>
			   != NET_CONTEXT_CONNECTED) {
			return -ENOTCONN;
		}

		context->recv_cb = cb;
   1d33c:	6329      	str	r1, [r5, #48]	; 0x30
		context->tcp->recv_user_data = user_data;
   1d33e:	6053      	str	r3, [r2, #4]
	{
		return -EPROTOTYPE;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (timeout) {
   1d340:	b32f      	cbz	r7, 1d38e <net_context_recv+0x86>
		/* Make sure we have the lock, then the packet_received()
		 * callback will release the semaphore when data has been
		 * received.
		 */
		while (k_sem_take(&context->recv_data_wait, K_NO_WAIT)) {
   1d342:	f105 0444 	add.w	r4, r5, #68	; 0x44
   1d346:	2100      	movs	r1, #0
   1d348:	4620      	mov	r0, r4
   1d34a:	f00b ff59 	bl	29200 <_impl_k_sem_take>
   1d34e:	4606      	mov	r6, r0
   1d350:	2800      	cmp	r0, #0
   1d352:	d1f6      	bne.n	1d342 <net_context_recv+0x3a>
   1d354:	4639      	mov	r1, r7
   1d356:	4620      	mov	r0, r4
   1d358:	f00b ff52 	bl	29200 <_impl_k_sem_take>
			;
		}

		if (!k_sem_take(&context->recv_data_wait, timeout)) {
   1d35c:	b140      	cbz	r0, 1d370 <net_context_recv+0x68>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return 0;
}
   1d35e:	4630      	mov	r0, r6
   1d360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1d362:	2611      	movs	r6, #17
   1d364:	e7da      	b.n	1d31c <net_context_recv+0x14>
		int ret = recv_udp(context, cb, timeout, user_data);
   1d366:	f7ff fe2d 	bl	1cfc4 <recv_udp>
		if (ret < 0) {
   1d36a:	1e06      	subs	r6, r0, #0
   1d36c:	dae8      	bge.n	1d340 <net_context_recv+0x38>
   1d36e:	e7f6      	b.n	1d35e <net_context_recv+0x56>
			return -ETIMEDOUT;
   1d370:	f06f 0673 	mvn.w	r6, #115	; 0x73
   1d374:	e7f3      	b.n	1d35e <net_context_recv+0x56>
		return -EBADF;
   1d376:	f06f 0608 	mvn.w	r6, #8
   1d37a:	e7f0      	b.n	1d35e <net_context_recv+0x56>
		return -EPROTOTYPE;
   1d37c:	f06f 066a 	mvn.w	r6, #106	; 0x6a
   1d380:	e7ed      	b.n	1d35e <net_context_recv+0x56>
			return -ESHUTDOWN;
   1d382:	f06f 066d 	mvn.w	r6, #109	; 0x6d
   1d386:	e7ea      	b.n	1d35e <net_context_recv+0x56>
			return -ENOTCONN;
   1d388:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   1d38c:	e7e7      	b.n	1d35e <net_context_recv+0x56>
	return 0;
   1d38e:	2600      	movs	r6, #0
   1d390:	e7e5      	b.n	1d35e <net_context_recv+0x56>
	...

0001d394 <net_context_foreach>:
#else
	return -EPROTOTYPE;
#endif
}
void net_context_foreach(net_context_cb_t cb, void *user_data)
{
   1d394:	b570      	push	{r4, r5, r6, lr}
   1d396:	4606      	mov	r6, r0
   1d398:	460d      	mov	r5, r1
   1d39a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d39e:	480d      	ldr	r0, [pc, #52]	; (1d3d4 <net_context_foreach+0x40>)
   1d3a0:	f00b ff2e 	bl	29200 <_impl_k_sem_take>
	int i;

	k_sem_take(&contexts_lock, K_FOREVER);

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1d3a4:	2400      	movs	r4, #0
   1d3a6:	e000      	b.n	1d3aa <net_context_foreach+0x16>
   1d3a8:	3401      	adds	r4, #1
   1d3aa:	2c05      	cmp	r4, #5
   1d3ac:	dc0e      	bgt.n	1d3cc <net_context_foreach+0x38>
	return context->flags & NET_CONTEXT_IN_USE;
   1d3ae:	2368      	movs	r3, #104	; 0x68
   1d3b0:	4a09      	ldr	r2, [pc, #36]	; (1d3d8 <net_context_foreach+0x44>)
   1d3b2:	fb03 2304 	mla	r3, r3, r4, r2
   1d3b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1d3ba:	f013 0f01 	tst.w	r3, #1
   1d3be:	d0f3      	beq.n	1d3a8 <net_context_foreach+0x14>
			continue;
		}

		cb(&contexts[i], user_data);
   1d3c0:	4629      	mov	r1, r5
   1d3c2:	2068      	movs	r0, #104	; 0x68
   1d3c4:	fb00 2004 	mla	r0, r0, r4, r2
   1d3c8:	47b0      	blx	r6
   1d3ca:	e7ed      	b.n	1d3a8 <net_context_foreach+0x14>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1d3cc:	4801      	ldr	r0, [pc, #4]	; (1d3d4 <net_context_foreach+0x40>)
   1d3ce:	f00b ff04 	bl	291da <_impl_k_sem_give>
   1d3d2:	bd70      	pop	{r4, r5, r6, pc}
   1d3d4:	20001f10 	.word	0x20001f10
   1d3d8:	20001ca0 	.word	0x20001ca0

0001d3dc <net_context_init>:

	k_sem_give(&contexts_lock);
}

void net_context_init(void)
{
   1d3dc:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1d3de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d3e2:	2101      	movs	r1, #1
   1d3e4:	4801      	ldr	r0, [pc, #4]	; (1d3ec <net_context_init+0x10>)
   1d3e6:	f00b feef 	bl	291c8 <_impl_k_sem_init>
   1d3ea:	bd08      	pop	{r3, pc}
   1d3ec:	20001f10 	.word	0x20001f10

0001d3f0 <net_pkt_get_reserve>:
#else /* CONFIG_NET_DEBUG_NET_PKT */
struct net_pkt *net_pkt_get_reserve(struct k_mem_slab *slab,
				    u16_t reserve_head,
				    s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1d3f0:	b570      	push	{r4, r5, r6, lr}
   1d3f2:	b082      	sub	sp, #8
   1d3f4:	4604      	mov	r4, r0
   1d3f6:	460d      	mov	r5, r1
   1d3f8:	4616      	mov	r6, r2
	struct net_pkt *pkt;
	int ret;

	if (k_is_in_isr()) {
   1d3fa:	f00c f863 	bl	294c4 <k_is_in_isr>
   1d3fe:	b198      	cbz	r0, 1d428 <net_pkt_get_reserve+0x38>
		ret = k_mem_slab_alloc(slab, (void **)&pkt, K_NO_WAIT);
   1d400:	2200      	movs	r2, #0
   1d402:	a901      	add	r1, sp, #4
   1d404:	4620      	mov	r0, r4
   1d406:	f00a fde9 	bl	27fdc <k_mem_slab_alloc>
	} else {
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
	}

	if (ret) {
   1d40a:	b998      	cbnz	r0, 1d434 <net_pkt_get_reserve+0x44>
		return NULL;
	}

	memset(pkt, 0, sizeof(struct net_pkt));
   1d40c:	2244      	movs	r2, #68	; 0x44
   1d40e:	2100      	movs	r1, #0
   1d410:	9801      	ldr	r0, [sp, #4]
   1d412:	f00c feb5 	bl	2a180 <memset>

	net_pkt_set_ll_reserve(pkt, reserve_head);
   1d416:	9801      	ldr	r0, [sp, #4]
	pkt->ll_reserve = len;
   1d418:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32

	pkt->ref = 1;
   1d41c:	2301      	movs	r3, #1
   1d41e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	pkt->slab = slab;
   1d422:	6044      	str	r4, [r0, #4]
	NET_DBG("%s [%u] pkt %p reserve %u ref %d (%s():%d)",
		slab2str(slab), k_mem_slab_num_free_get(slab),
		pkt, reserve_head, pkt->ref, caller, line);
#endif
	return pkt;
}
   1d424:	b002      	add	sp, #8
   1d426:	bd70      	pop	{r4, r5, r6, pc}
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   1d428:	4632      	mov	r2, r6
   1d42a:	a901      	add	r1, sp, #4
   1d42c:	4620      	mov	r0, r4
   1d42e:	f00a fdd5 	bl	27fdc <k_mem_slab_alloc>
   1d432:	e7ea      	b.n	1d40a <net_pkt_get_reserve+0x1a>
		return NULL;
   1d434:	2000      	movs	r0, #0
   1d436:	e7f5      	b.n	1d424 <net_pkt_get_reserve+0x34>

0001d438 <net_pkt_get>:
#else
static struct net_pkt *net_pkt_get(struct k_mem_slab *slab,
				   struct net_context *context,
				   s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1d438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_pkt *pkt;

	if (!context) {
   1d43a:	2900      	cmp	r1, #0
   1d43c:	d038      	beq.n	1d4b0 <net_pkt_get+0x78>
   1d43e:	460c      	mov	r4, r1
   1d440:	4617      	mov	r7, r2
   1d442:	4606      	mov	r6, r0
	return net_if_get_by_index(context->iface);
   1d444:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1d448:	f7fe fea4 	bl	1c194 <net_if_get_by_index>
   1d44c:	4605      	mov	r5, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d44e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d452:	f013 0f10 	tst.w	r3, #16
   1d456:	d024      	beq.n	1d4a2 <net_pkt_get+0x6a>
		return AF_INET6;
   1d458:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1d45a:	2b0a      	cmp	r3, #10
   1d45c:	d023      	beq.n	1d4a6 <net_pkt_get+0x6e>
	struct in6_addr *addr6 = NULL;
   1d45e:	2100      	movs	r1, #0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1d460:	686b      	ldr	r3, [r5, #4]
   1d462:	689b      	ldr	r3, [r3, #8]
   1d464:	4628      	mov	r0, r5
   1d466:	4798      	blx	r3
#if defined(CONFIG_NET_DEBUG_NET_PKT)
	pkt = net_pkt_get_reserve_debug(slab,
					net_if_get_ll_reserve(iface, addr6),
					timeout, caller, line);
#else
	pkt = net_pkt_get_reserve(slab, net_if_get_ll_reserve(iface, addr6),
   1d468:	463a      	mov	r2, r7
   1d46a:	4601      	mov	r1, r0
   1d46c:	4630      	mov	r0, r6
   1d46e:	f7ff ffbf 	bl	1d3f0 <net_pkt_get_reserve>
				  timeout);
#endif
	if (pkt) {
   1d472:	4603      	mov	r3, r0
   1d474:	b198      	cbz	r0, 1d49e <net_pkt_get+0x66>
	pkt->context = ctx;
   1d476:	60c4      	str	r4, [r0, #12]
	pkt->iface = iface;
   1d478:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1d47a:	7d6a      	ldrb	r2, [r5, #21]
   1d47c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1d480:	7d6a      	ldrb	r2, [r5, #21]
   1d482:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d486:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   1d48a:	f012 0f10 	tst.w	r2, #16
   1d48e:	d00d      	beq.n	1d4ac <net_pkt_get+0x74>
		return AF_INET6;
   1d490:	210a      	movs	r1, #10
	pkt->family = family;
   1d492:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1d496:	f361 02c6 	bfi	r2, r1, #3, #4
   1d49a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					   net_context_get_family(context));
		}
	}

	return pkt;
}
   1d49e:	4618      	mov	r0, r3
   1d4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return AF_INET;
   1d4a2:	2302      	movs	r3, #2
   1d4a4:	e7d9      	b.n	1d45a <net_pkt_get+0x22>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1d4a6:	f104 0118 	add.w	r1, r4, #24
   1d4aa:	e7d9      	b.n	1d460 <net_pkt_get+0x28>
   1d4ac:	2102      	movs	r1, #2
   1d4ae:	e7f0      	b.n	1d492 <net_pkt_get+0x5a>
		return NULL;
   1d4b0:	2300      	movs	r3, #0
   1d4b2:	e7f4      	b.n	1d49e <net_pkt_get+0x66>

0001d4b4 <net_pkt_get_reserve_data>:
{
   1d4b4:	b570      	push	{r4, r5, r6, lr}
   1d4b6:	4604      	mov	r4, r0
   1d4b8:	460d      	mov	r5, r1
   1d4ba:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   1d4bc:	f00c f802 	bl	294c4 <k_is_in_isr>
   1d4c0:	b158      	cbz	r0, 1d4da <net_pkt_get_reserve_data+0x26>
		frag = net_buf_alloc(pool, K_NO_WAIT);
   1d4c2:	2100      	movs	r1, #0
   1d4c4:	4620      	mov	r0, r4
   1d4c6:	f7fd facf 	bl	1aa68 <net_buf_alloc>
   1d4ca:	4604      	mov	r4, r0
	if (!frag) {
   1d4cc:	b11c      	cbz	r4, 1d4d6 <net_pkt_get_reserve_data+0x22>
	net_buf_reserve(frag, reserve_head);
   1d4ce:	4629      	mov	r1, r5
   1d4d0:	4620      	mov	r0, r4
   1d4d2:	f7fd fb24 	bl	1ab1e <net_buf_reserve>
}
   1d4d6:	4620      	mov	r0, r4
   1d4d8:	bd70      	pop	{r4, r5, r6, pc}
		frag = net_buf_alloc(pool, timeout);
   1d4da:	4631      	mov	r1, r6
   1d4dc:	4620      	mov	r0, r4
   1d4de:	f7fd fac3 	bl	1aa68 <net_buf_alloc>
   1d4e2:	4604      	mov	r4, r0
   1d4e4:	e7f2      	b.n	1d4cc <net_pkt_get_reserve_data+0x18>

0001d4e6 <_pkt_get_data>:
{
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_buf *frag;

	if (!context) {
   1d4e6:	b1f1      	cbz	r1, 1d526 <_pkt_get_data+0x40>
{
   1d4e8:	b570      	push	{r4, r5, r6, lr}
   1d4ea:	460c      	mov	r4, r1
   1d4ec:	4616      	mov	r6, r2
   1d4ee:	4605      	mov	r5, r0
	return net_if_get_by_index(context->iface);
   1d4f0:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1d4f4:	f7fe fe4e 	bl	1c194 <net_if_get_by_index>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d4f8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d4fc:	f013 0f10 	tst.w	r3, #16
   1d500:	d00c      	beq.n	1d51c <_pkt_get_data+0x36>
		return AF_INET6;
   1d502:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1d504:	2b0a      	cmp	r3, #10
   1d506:	d00b      	beq.n	1d520 <_pkt_get_data+0x3a>
	struct in6_addr *addr6 = NULL;
   1d508:	2100      	movs	r1, #0
   1d50a:	6843      	ldr	r3, [r0, #4]
   1d50c:	689b      	ldr	r3, [r3, #8]
   1d50e:	4798      	blx	r3
	frag = net_pkt_get_reserve_data_debug(pool,
					      net_if_get_ll_reserve(iface,
								    addr6),
					      timeout, caller, line);
#else
	frag = net_pkt_get_reserve_data(pool,
   1d510:	4632      	mov	r2, r6
   1d512:	4601      	mov	r1, r0
   1d514:	4628      	mov	r0, r5
   1d516:	f7ff ffcd 	bl	1d4b4 <net_pkt_get_reserve_data>
					net_if_get_ll_reserve(iface, addr6),
					timeout);
#endif
	return frag;
   1d51a:	bd70      	pop	{r4, r5, r6, pc}
	return AF_INET;
   1d51c:	2302      	movs	r3, #2
   1d51e:	e7f1      	b.n	1d504 <_pkt_get_data+0x1e>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1d520:	f104 0118 	add.w	r1, r4, #24
   1d524:	e7f1      	b.n	1d50a <_pkt_get_data+0x24>
		return NULL;
   1d526:	2000      	movs	r0, #0
   1d528:	4770      	bx	lr
	...

0001d52c <net_pkt_get_reserve_rx>:
{
   1d52c:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&rx_pkts, reserve_head, timeout);
   1d52e:	460a      	mov	r2, r1
   1d530:	4601      	mov	r1, r0
   1d532:	4802      	ldr	r0, [pc, #8]	; (1d53c <net_pkt_get_reserve_rx+0x10>)
   1d534:	f7ff ff5c 	bl	1d3f0 <net_pkt_get_reserve>
}
   1d538:	bd08      	pop	{r3, pc}
   1d53a:	bf00      	nop
   1d53c:	2000d0f4 	.word	0x2000d0f4

0001d540 <net_pkt_get_reserve_tx>:
{
   1d540:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&tx_pkts, reserve_head, timeout);
   1d542:	460a      	mov	r2, r1
   1d544:	4601      	mov	r1, r0
   1d546:	4802      	ldr	r0, [pc, #8]	; (1d550 <net_pkt_get_reserve_tx+0x10>)
   1d548:	f7ff ff52 	bl	1d3f0 <net_pkt_get_reserve>
}
   1d54c:	bd08      	pop	{r3, pc}
   1d54e:	bf00      	nop
   1d550:	2000d110 	.word	0x2000d110

0001d554 <net_pkt_get_reserve_rx_data>:
{
   1d554:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&rx_bufs, reserve_head, timeout);
   1d556:	460a      	mov	r2, r1
   1d558:	4601      	mov	r1, r0
   1d55a:	4802      	ldr	r0, [pc, #8]	; (1d564 <net_pkt_get_reserve_rx_data+0x10>)
   1d55c:	f7ff ffaa 	bl	1d4b4 <net_pkt_get_reserve_data>
}
   1d560:	bd08      	pop	{r3, pc}
   1d562:	bf00      	nop
   1d564:	2000d274 	.word	0x2000d274

0001d568 <net_pkt_get_reserve_tx_data>:
{
   1d568:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&tx_bufs, reserve_head, timeout);
   1d56a:	460a      	mov	r2, r1
   1d56c:	4601      	mov	r1, r0
   1d56e:	4802      	ldr	r0, [pc, #8]	; (1d578 <net_pkt_get_reserve_tx_data+0x10>)
   1d570:	f7ff ffa0 	bl	1d4b4 <net_pkt_get_reserve_data>
}
   1d574:	bd08      	pop	{r3, pc}
   1d576:	bf00      	nop
   1d578:	2000d294 	.word	0x2000d294

0001d57c <net_pkt_get_frag>:
{
   1d57c:	b538      	push	{r3, r4, r5, lr}
   1d57e:	4604      	mov	r4, r0
   1d580:	460d      	mov	r5, r1
	return pkt->context;
   1d582:	68c3      	ldr	r3, [r0, #12]
	if (context && context->data_pool) {
   1d584:	b143      	cbz	r3, 1d598 <net_pkt_get_frag+0x1c>
   1d586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d588:	b133      	cbz	r3, 1d598 <net_pkt_get_frag+0x1c>
		return net_pkt_get_reserve_data(context->data_pool(),
   1d58a:	4798      	blx	r3
   1d58c:	462a      	mov	r2, r5
   1d58e:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
   1d592:	f7ff ff8f 	bl	1d4b4 <net_pkt_get_reserve_data>
   1d596:	bd38      	pop	{r3, r4, r5, pc}
	if (pkt->slab == &rx_pkts) {
   1d598:	6862      	ldr	r2, [r4, #4]
   1d59a:	4b07      	ldr	r3, [pc, #28]	; (1d5b8 <net_pkt_get_frag+0x3c>)
   1d59c:	429a      	cmp	r2, r3
   1d59e:	d005      	beq.n	1d5ac <net_pkt_get_frag+0x30>
	return net_pkt_get_reserve_tx_data(net_pkt_ll_reserve(pkt),
   1d5a0:	4629      	mov	r1, r5
   1d5a2:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1d5a6:	f7ff ffdf 	bl	1d568 <net_pkt_get_reserve_tx_data>
}
   1d5aa:	bd38      	pop	{r3, r4, r5, pc}
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   1d5ac:	4629      	mov	r1, r5
   1d5ae:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1d5b2:	f7ff ffcf 	bl	1d554 <net_pkt_get_reserve_rx_data>
   1d5b6:	bd38      	pop	{r3, r4, r5, pc}
   1d5b8:	2000d0f4 	.word	0x2000d0f4

0001d5bc <net_pkt_get_tx>:

	return net_pkt_get(&rx_pkts, context, timeout);
}

struct net_pkt *net_pkt_get_tx(struct net_context *context, s32_t timeout)
{
   1d5bc:	b538      	push	{r3, r4, r5, lr}
   1d5be:	4604      	mov	r4, r0
   1d5c0:	460d      	mov	r5, r1
	if (context->tx_slab) {
   1d5c2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1d5c4:	b133      	cbz	r3, 1d5d4 <net_pkt_get_tx+0x18>
		return context->tx_slab();
   1d5c6:	4798      	blx	r3

	NET_ASSERT_INFO(context, "TX context not set");

	slab = get_tx_slab(context);

	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1d5c8:	b130      	cbz	r0, 1d5d8 <net_pkt_get_tx+0x1c>
   1d5ca:	462a      	mov	r2, r5
   1d5cc:	4621      	mov	r1, r4
   1d5ce:	f7ff ff33 	bl	1d438 <net_pkt_get>
}
   1d5d2:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1d5d4:	2000      	movs	r0, #0
   1d5d6:	e7f7      	b.n	1d5c8 <net_pkt_get_tx+0xc>
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1d5d8:	4800      	ldr	r0, [pc, #0]	; (1d5dc <net_pkt_get_tx+0x20>)
   1d5da:	e7f6      	b.n	1d5ca <net_pkt_get_tx+0xe>
   1d5dc:	2000d110 	.word	0x2000d110

0001d5e0 <net_pkt_get_data>:

struct net_buf *net_pkt_get_data(struct net_context *context, s32_t timeout)
{
   1d5e0:	b538      	push	{r3, r4, r5, lr}
   1d5e2:	4604      	mov	r4, r0
   1d5e4:	460d      	mov	r5, r1
	if (context->data_pool) {
   1d5e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1d5e8:	b133      	cbz	r3, 1d5f8 <net_pkt_get_data+0x18>
		return context->data_pool();
   1d5ea:	4798      	blx	r3
	pool = get_data_pool(context);

	/* The context is not known in RX path so we can only have TX
	 * data here.
	 */
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1d5ec:	b130      	cbz	r0, 1d5fc <net_pkt_get_data+0x1c>
   1d5ee:	462a      	mov	r2, r5
   1d5f0:	4621      	mov	r1, r4
   1d5f2:	f7ff ff78 	bl	1d4e6 <_pkt_get_data>
}
   1d5f6:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1d5f8:	2000      	movs	r0, #0
   1d5fa:	e7f7      	b.n	1d5ec <net_pkt_get_data+0xc>
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1d5fc:	4800      	ldr	r0, [pc, #0]	; (1d600 <net_pkt_get_data+0x20>)
   1d5fe:	e7f6      	b.n	1d5ee <net_pkt_get_data+0xe>
   1d600:	2000d294 	.word	0x2000d294

0001d604 <net_pkt_ref>:
				  int line)
#else
struct net_pkt *net_pkt_ref(struct net_pkt *pkt)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!pkt) {
   1d604:	4603      	mov	r3, r0
   1d606:	b120      	cbz	r0, 1d612 <net_pkt_ref+0xe>
	NET_DBG("%s [%d] pkt %p ref %d (%s():%d)",
		slab2str(pkt->slab), k_mem_slab_num_free_get(pkt->slab),
		pkt, pkt->ref + 1, caller, line);
#endif

	pkt->ref++;
   1d608:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
   1d60c:	3201      	adds	r2, #1
   1d60e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

	return pkt;
}
   1d612:	4618      	mov	r0, r3
   1d614:	4770      	bx	lr

0001d616 <net_pkt_frag_unref>:
			      const char *caller, int line)
#else
void net_pkt_frag_unref(struct net_buf *frag)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!frag) {
   1d616:	b118      	cbz	r0, 1d620 <net_pkt_frag_unref+0xa>
{
   1d618:	b508      	push	{r3, lr}

	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif
	net_buf_unref(frag);
   1d61a:	f7fd fa93 	bl	1ab44 <net_buf_unref>
   1d61e:	bd08      	pop	{r3, pc}
   1d620:	4770      	bx	lr

0001d622 <net_pkt_unref>:
{
   1d622:	b500      	push	{lr}
   1d624:	b083      	sub	sp, #12
   1d626:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   1d628:	b188      	cbz	r0, 1d64e <net_pkt_unref+0x2c>
	if (!pkt->ref) {
   1d62a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1d62e:	b173      	cbz	r3, 1d64e <net_pkt_unref+0x2c>
	if (--pkt->ref > 0) {
   1d630:	3b01      	subs	r3, #1
   1d632:	b2db      	uxtb	r3, r3
   1d634:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1d638:	b94b      	cbnz	r3, 1d64e <net_pkt_unref+0x2c>
	if (pkt->frags) {
   1d63a:	6880      	ldr	r0, [r0, #8]
   1d63c:	b108      	cbz	r0, 1d642 <net_pkt_unref+0x20>
		net_pkt_frag_unref(pkt->frags);
   1d63e:	f7ff ffea 	bl	1d616 <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   1d642:	a902      	add	r1, sp, #8
   1d644:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   1d648:	6858      	ldr	r0, [r3, #4]
   1d64a:	f00a fcf5 	bl	28038 <k_mem_slab_free>
}
   1d64e:	b003      	add	sp, #12
   1d650:	f85d fb04 	ldr.w	pc, [sp], #4

0001d654 <net_pkt_frag_del>:
#else
struct net_buf *net_pkt_frag_del(struct net_pkt *pkt,
				 struct net_buf *parent,
				 struct net_buf *frag)
#endif
{
   1d654:	b510      	push	{r4, lr}
   1d656:	4604      	mov	r4, r0
   1d658:	4608      	mov	r0, r1
	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif

	if (pkt->frags == frag && !parent) {
   1d65a:	68a3      	ldr	r3, [r4, #8]
   1d65c:	4293      	cmp	r3, r2
   1d65e:	d003      	beq.n	1d668 <net_pkt_frag_del+0x14>
		pkt->frags = tmp;

		return tmp;
	}

	return net_buf_frag_del(parent, frag);
   1d660:	4611      	mov	r1, r2
   1d662:	f7fd faaf 	bl	1abc4 <net_buf_frag_del>
}
   1d666:	bd10      	pop	{r4, pc}
	if (pkt->frags == frag && !parent) {
   1d668:	2900      	cmp	r1, #0
   1d66a:	d1f9      	bne.n	1d660 <net_pkt_frag_del+0xc>
		tmp = net_buf_frag_del(NULL, frag);
   1d66c:	4611      	mov	r1, r2
   1d66e:	f7fd faa9 	bl	1abc4 <net_buf_frag_del>
		pkt->frags = tmp;
   1d672:	60a0      	str	r0, [r4, #8]
		return tmp;
   1d674:	bd10      	pop	{r4, pc}

0001d676 <net_pkt_frag_add>:
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	/* We do not use net_buf_frag_add() as this one will refcount
	 * the frag once more if !pkt->frags
	 */
	if (!pkt->frags) {
   1d676:	6883      	ldr	r3, [r0, #8]
   1d678:	b143      	cbz	r3, 1d68c <net_pkt_frag_add+0x16>
{
   1d67a:	b510      	push	{r4, lr}
   1d67c:	460c      	mov	r4, r1
		pkt->frags = frag;
		return;
	}

	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   1d67e:	4618      	mov	r0, r3
   1d680:	f7fd fa80 	bl	1ab84 <net_buf_frag_last>
   1d684:	4621      	mov	r1, r4
   1d686:	f7fd fa83 	bl	1ab90 <net_buf_frag_insert>
   1d68a:	bd10      	pop	{r4, pc}
		pkt->frags = frag;
   1d68c:	6081      	str	r1, [r0, #8]
		return;
   1d68e:	4770      	bx	lr

0001d690 <net_pkt_frag_insert>:
void net_pkt_frag_insert_debug(struct net_pkt *pkt, struct net_buf *frag,
			       const char *caller, int line)
#else
void net_pkt_frag_insert(struct net_pkt *pkt, struct net_buf *frag)
#endif
{
   1d690:	b538      	push	{r3, r4, r5, lr}
   1d692:	4604      	mov	r4, r0
   1d694:	460d      	mov	r5, r1
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	net_buf_frag_last(frag)->frags = pkt->frags;
   1d696:	4608      	mov	r0, r1
   1d698:	f7fd fa74 	bl	1ab84 <net_buf_frag_last>
   1d69c:	68a3      	ldr	r3, [r4, #8]
   1d69e:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
   1d6a0:	60a5      	str	r5, [r4, #8]
   1d6a2:	bd38      	pop	{r3, r4, r5, pc}

0001d6a4 <net_pkt_copy>:
}

struct net_buf *net_pkt_copy(struct net_pkt *pkt, size_t amount,
			     size_t reserve, s32_t timeout)
{
   1d6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d6a8:	b085      	sub	sp, #20
   1d6aa:	9002      	str	r0, [sp, #8]
   1d6ac:	460d      	mov	r5, r1
   1d6ae:	4614      	mov	r4, r2
   1d6b0:	9303      	str	r3, [sp, #12]
	struct net_buf *frag, *first, *orig;
	u8_t *orig_data;
	size_t orig_len;

	orig = pkt->frags;
   1d6b2:	f8d0 a008 	ldr.w	sl, [r0, #8]

	frag = net_pkt_get_frag(pkt, timeout);
   1d6b6:	4619      	mov	r1, r3
   1d6b8:	f7ff ff60 	bl	1d57c <net_pkt_get_frag>
	if (!frag) {
   1d6bc:	9001      	str	r0, [sp, #4]
   1d6be:	b1b8      	cbz	r0, 1d6f0 <net_pkt_copy+0x4c>
		return NULL;
	}

	if (reserve > net_buf_tailroom(frag)) {
   1d6c0:	f100 0608 	add.w	r6, r0, #8
   1d6c4:	4630      	mov	r0, r6
   1d6c6:	f7fd faf2 	bl	1acae <net_buf_simple_tailroom>
   1d6ca:	42a0      	cmp	r0, r4
   1d6cc:	d30b      	bcc.n	1d6e6 <net_pkt_copy+0x42>
			reserve, net_buf_tailroom(frag));
		net_pkt_frag_unref(frag);
		return NULL;
	}

	net_buf_add(frag, reserve);
   1d6ce:	4621      	mov	r1, r4
   1d6d0:	4630      	mov	r0, r6
   1d6d2:	f7fd fa83 	bl	1abdc <net_buf_simple_add>
	first = frag;

	NET_DBG("Copying frag %p with %zu bytes and reserving %zu bytes",
		first, amount, reserve);

	if (!orig->len) {
   1d6d6:	f8ba 700c 	ldrh.w	r7, [sl, #12]
   1d6da:	b14f      	cbz	r7, 1d6f0 <net_pkt_copy+0x4c>
		NET_DBG("Original fragment empty!");
		return frag;
	}

	orig_len = orig->len;
	orig_data = orig->data;
   1d6dc:	f8da 9008 	ldr.w	r9, [sl, #8]
	frag = net_pkt_get_frag(pkt, timeout);
   1d6e0:	f8dd b004 	ldr.w	fp, [sp, #4]

	while (orig && amount) {
   1d6e4:	e01c      	b.n	1d720 <net_pkt_copy+0x7c>
		net_pkt_frag_unref(frag);
   1d6e6:	9801      	ldr	r0, [sp, #4]
   1d6e8:	f7ff ff95 	bl	1d616 <net_pkt_frag_unref>
		return NULL;
   1d6ec:	2300      	movs	r3, #0
   1d6ee:	9301      	str	r3, [sp, #4]
			orig_data = orig->data;
		}
	}

	return first;
}
   1d6f0:	9801      	ldr	r0, [sp, #4]
   1d6f2:	b005      	add	sp, #20
   1d6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_len = amount;
   1d6f8:	46a8      	mov	r8, r5
		if ((copy_len - left_len) >= 0) {
   1d6fa:	eba8 0304 	sub.w	r3, r8, r4
   1d6fe:	2b00      	cmp	r3, #0
   1d700:	db2e      	blt.n	1d760 <net_pkt_copy+0xbc>
			amount -= left_len;
   1d702:	1b2d      	subs	r5, r5, r4
			memcpy(net_buf_add(frag, left_len), orig_data,
   1d704:	4621      	mov	r1, r4
   1d706:	4630      	mov	r0, r6
   1d708:	f7fd fa68 	bl	1abdc <net_buf_simple_add>
   1d70c:	4622      	mov	r2, r4
   1d70e:	4649      	mov	r1, r9
   1d710:	f7e2 fdd6 	bl	2c0 <memcpy>
			if (!net_buf_tailroom(frag)) {
   1d714:	4630      	mov	r0, r6
   1d716:	f7fd faca 	bl	1acae <net_buf_simple_tailroom>
   1d71a:	b180      	cbz	r0, 1d73e <net_pkt_copy+0x9a>
			orig_len -= left_len;
   1d71c:	1b3f      	subs	r7, r7, r4
			orig_data += left_len;
   1d71e:	44a1      	add	r9, r4
	while (orig && amount) {
   1d720:	f1ba 0f00 	cmp.w	sl, #0
   1d724:	d0e4      	beq.n	1d6f0 <net_pkt_copy+0x4c>
   1d726:	2d00      	cmp	r5, #0
   1d728:	d0e2      	beq.n	1d6f0 <net_pkt_copy+0x4c>
		int left_len = net_buf_tailroom(frag);
   1d72a:	f10b 0608 	add.w	r6, fp, #8
   1d72e:	4630      	mov	r0, r6
   1d730:	f7fd fabd 	bl	1acae <net_buf_simple_tailroom>
   1d734:	4604      	mov	r4, r0
		if (amount > orig_len) {
   1d736:	42bd      	cmp	r5, r7
   1d738:	d9de      	bls.n	1d6f8 <net_pkt_copy+0x54>
			copy_len = orig_len;
   1d73a:	46b8      	mov	r8, r7
   1d73c:	e7dd      	b.n	1d6fa <net_pkt_copy+0x56>
				struct net_buf *new_frag =
   1d73e:	9903      	ldr	r1, [sp, #12]
   1d740:	9802      	ldr	r0, [sp, #8]
   1d742:	f7ff ff1b 	bl	1d57c <net_pkt_get_frag>
				if (!new_frag) {
   1d746:	4606      	mov	r6, r0
   1d748:	b128      	cbz	r0, 1d756 <net_pkt_copy+0xb2>
				net_buf_frag_add(frag, new_frag);
   1d74a:	4601      	mov	r1, r0
   1d74c:	4658      	mov	r0, fp
   1d74e:	f7fd fa2a 	bl	1aba6 <net_buf_frag_add>
				frag = new_frag;
   1d752:	46b3      	mov	fp, r6
   1d754:	e7e2      	b.n	1d71c <net_pkt_copy+0x78>
					net_pkt_frag_unref(first);
   1d756:	9801      	ldr	r0, [sp, #4]
   1d758:	f7ff ff5d 	bl	1d616 <net_pkt_frag_unref>
					return NULL;
   1d75c:	9601      	str	r6, [sp, #4]
   1d75e:	e7c7      	b.n	1d6f0 <net_pkt_copy+0x4c>
			amount -= copy_len;
   1d760:	eba5 0508 	sub.w	r5, r5, r8
			memcpy(net_buf_add(frag, copy_len), orig_data,
   1d764:	4641      	mov	r1, r8
   1d766:	4630      	mov	r0, r6
   1d768:	f7fd fa38 	bl	1abdc <net_buf_simple_add>
   1d76c:	4642      	mov	r2, r8
   1d76e:	4649      	mov	r1, r9
   1d770:	f7e2 fda6 	bl	2c0 <memcpy>
		orig = orig->frags;
   1d774:	f8da a000 	ldr.w	sl, [sl]
		if (orig) {
   1d778:	f1ba 0f00 	cmp.w	sl, #0
   1d77c:	d0d0      	beq.n	1d720 <net_pkt_copy+0x7c>
			orig_len = orig->len;
   1d77e:	f8ba 700c 	ldrh.w	r7, [sl, #12]
			orig_data = orig->data;
   1d782:	f8da 9008 	ldr.w	r9, [sl, #8]
   1d786:	e7cb      	b.n	1d720 <net_pkt_copy+0x7c>

0001d788 <net_frag_linear_copy>:

int net_frag_linear_copy(struct net_buf *dst, struct net_buf *src,
			 u16_t offset, u16_t len)
{
   1d788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d78c:	4680      	mov	r8, r0
   1d78e:	460e      	mov	r6, r1
   1d790:	4615      	mov	r5, r2
   1d792:	4699      	mov	r9, r3
	u16_t to_copy;
	u16_t copied;

	if (dst->size < len) {
   1d794:	89c3      	ldrh	r3, [r0, #14]
   1d796:	454b      	cmp	r3, r9
   1d798:	d206      	bcs.n	1d7a8 <net_frag_linear_copy+0x20>
		return -ENOMEM;
   1d79a:	f06f 000b 	mvn.w	r0, #11
   1d79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	/* find the right fragment to start copying from */
	while (src && offset >= src->len) {
		offset -= src->len;
   1d7a2:	1a6d      	subs	r5, r5, r1
   1d7a4:	b2ad      	uxth	r5, r5
		src = src->frags;
   1d7a6:	6836      	ldr	r6, [r6, #0]
	while (src && offset >= src->len) {
   1d7a8:	b336      	cbz	r6, 1d7f8 <net_frag_linear_copy+0x70>
   1d7aa:	89b1      	ldrh	r1, [r6, #12]
   1d7ac:	428d      	cmp	r5, r1
   1d7ae:	d2f8      	bcs.n	1d7a2 <net_frag_linear_copy+0x1a>
   1d7b0:	2700      	movs	r7, #0
   1d7b2:	e015      	b.n	1d7e0 <net_frag_linear_copy+0x58>
	}

	/* traverse the fragment chain until len bytes are copied */
	copied = 0;
	while (src && len > 0) {
		to_copy = min(len, src->len - offset);
   1d7b4:	89b4      	ldrh	r4, [r6, #12]
   1d7b6:	1b64      	subs	r4, r4, r5
   1d7b8:	454c      	cmp	r4, r9
   1d7ba:	bfa8      	it	ge
   1d7bc:	464c      	movge	r4, r9
   1d7be:	b2a4      	uxth	r4, r4
		memcpy(dst->data + copied, src->data + offset, to_copy);
   1d7c0:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1d7c4:	68b1      	ldr	r1, [r6, #8]
   1d7c6:	4622      	mov	r2, r4
   1d7c8:	4429      	add	r1, r5
   1d7ca:	4438      	add	r0, r7
   1d7cc:	f7e2 fd78 	bl	2c0 <memcpy>

		copied += to_copy;
   1d7d0:	4427      	add	r7, r4
   1d7d2:	b2bf      	uxth	r7, r7
		/* to_copy is always <= len */
		len -= to_copy;
   1d7d4:	eba9 0404 	sub.w	r4, r9, r4
   1d7d8:	fa1f f984 	uxth.w	r9, r4
		src = src->frags;
   1d7dc:	6836      	ldr	r6, [r6, #0]
		/* after the first iteration, this value will be 0 */
		offset = 0;
   1d7de:	2500      	movs	r5, #0
	while (src && len > 0) {
   1d7e0:	b116      	cbz	r6, 1d7e8 <net_frag_linear_copy+0x60>
   1d7e2:	f1b9 0f00 	cmp.w	r9, #0
   1d7e6:	d1e5      	bne.n	1d7b4 <net_frag_linear_copy+0x2c>
	}

	if (len > 0) {
   1d7e8:	f1b9 0f00 	cmp.w	r9, #0
   1d7ec:	d106      	bne.n	1d7fc <net_frag_linear_copy+0x74>
		return -ENOMEM;
	}

	dst->len = copied;
   1d7ee:	f8a8 700c 	strh.w	r7, [r8, #12]

	return 0;
   1d7f2:	2000      	movs	r0, #0
   1d7f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d7f8:	2700      	movs	r7, #0
   1d7fa:	e7f1      	b.n	1d7e0 <net_frag_linear_copy+0x58>
		return -ENOMEM;
   1d7fc:	f06f 000b 	mvn.w	r0, #11
}
   1d800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d804 <net_pkt_compact>:

	return copied;
}

bool net_pkt_compact(struct net_pkt *pkt)
{
   1d804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d808:	4680      	mov	r8, r0
	struct net_buf *frag, *prev;

	NET_DBG("Compacting data in pkt %p", pkt);

	frag = pkt->frags;
   1d80a:	6884      	ldr	r4, [r0, #8]
	prev = NULL;
   1d80c:	2700      	movs	r7, #0

	while (frag) {
   1d80e:	e009      	b.n	1d824 <net_pkt_compact+0x20>
			 */
			size_t copy_len;

			copy_len = frag->frags->len;
			if (copy_len > net_buf_tailroom(frag)) {
				copy_len = net_buf_tailroom(frag);
   1d810:	4630      	mov	r0, r6
   1d812:	f7fd fa4c 	bl	1acae <net_buf_simple_tailroom>
   1d816:	4605      	mov	r5, r0
   1d818:	e011      	b.n	1d83e <net_pkt_compact+0x3a>

				/* Then check next fragment */
				continue;
			}
		} else {
			if (!frag->len) {
   1d81a:	89a3      	ldrh	r3, [r4, #12]
   1d81c:	2b00      	cmp	r3, #0
   1d81e:	d030      	beq.n	1d882 <net_pkt_compact+0x7e>

				break;
			}
		}

		prev = frag;
   1d820:	4627      	mov	r7, r4
		frag = frag->frags;
   1d822:	6824      	ldr	r4, [r4, #0]
	while (frag) {
   1d824:	2c00      	cmp	r4, #0
   1d826:	d031      	beq.n	1d88c <net_pkt_compact+0x88>
		if (frag->frags) {
   1d828:	6823      	ldr	r3, [r4, #0]
   1d82a:	2b00      	cmp	r3, #0
   1d82c:	d0f5      	beq.n	1d81a <net_pkt_compact+0x16>
			copy_len = frag->frags->len;
   1d82e:	899d      	ldrh	r5, [r3, #12]
			if (copy_len > net_buf_tailroom(frag)) {
   1d830:	f104 0608 	add.w	r6, r4, #8
   1d834:	4630      	mov	r0, r6
   1d836:	f7fd fa3a 	bl	1acae <net_buf_simple_tailroom>
   1d83a:	4285      	cmp	r5, r0
   1d83c:	d8e8      	bhi.n	1d810 <net_pkt_compact+0xc>
	return buf->data + buf->len;
   1d83e:	68a0      	ldr	r0, [r4, #8]
   1d840:	89a3      	ldrh	r3, [r4, #12]
			memcpy(net_buf_tail(frag), frag->frags->data, copy_len);
   1d842:	6821      	ldr	r1, [r4, #0]
   1d844:	462a      	mov	r2, r5
   1d846:	6889      	ldr	r1, [r1, #8]
   1d848:	4418      	add	r0, r3
   1d84a:	f7e2 fd39 	bl	2c0 <memcpy>
			net_buf_add(frag, copy_len);
   1d84e:	4629      	mov	r1, r5
   1d850:	4630      	mov	r0, r6
   1d852:	f7fd f9c3 	bl	1abdc <net_buf_simple_add>
			memmove(frag->frags->data,
   1d856:	6823      	ldr	r3, [r4, #0]
   1d858:	6898      	ldr	r0, [r3, #8]
				frag->frags->len - copy_len);
   1d85a:	899a      	ldrh	r2, [r3, #12]
			memmove(frag->frags->data,
   1d85c:	1b52      	subs	r2, r2, r5
   1d85e:	1941      	adds	r1, r0, r5
   1d860:	f00c fc2a 	bl	2a0b8 <memmove>
			frag->frags->len -= copy_len;
   1d864:	6822      	ldr	r2, [r4, #0]
   1d866:	8993      	ldrh	r3, [r2, #12]
   1d868:	1b5d      	subs	r5, r3, r5
   1d86a:	8195      	strh	r5, [r2, #12]
			if (net_buf_tailroom(frag)) {
   1d86c:	4630      	mov	r0, r6
   1d86e:	f7fd fa1e 	bl	1acae <net_buf_simple_tailroom>
   1d872:	2800      	cmp	r0, #0
   1d874:	d0d4      	beq.n	1d820 <net_pkt_compact+0x1c>
				net_pkt_frag_del(pkt, frag, frag->frags);
   1d876:	6822      	ldr	r2, [r4, #0]
   1d878:	4621      	mov	r1, r4
   1d87a:	4640      	mov	r0, r8
   1d87c:	f7ff feea 	bl	1d654 <net_pkt_frag_del>
				continue;
   1d880:	e7d0      	b.n	1d824 <net_pkt_compact+0x20>
				net_pkt_frag_del(pkt, prev, frag);
   1d882:	4622      	mov	r2, r4
   1d884:	4639      	mov	r1, r7
   1d886:	4640      	mov	r0, r8
   1d888:	f7ff fee4 	bl	1d654 <net_pkt_frag_del>
	}

	return true;
}
   1d88c:	2001      	movs	r0, #1
   1d88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d892 <net_pkt_append>:
	return 0;
}

u16_t net_pkt_append(struct net_pkt *pkt, u16_t len, const u8_t *data,
		    s32_t timeout)
{
   1d892:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_buf *frag;

	if (!pkt || !data) {
   1d896:	b3d0      	cbz	r0, 1d90e <net_pkt_append+0x7c>
   1d898:	460c      	mov	r4, r1
   1d89a:	4690      	mov	r8, r2
   1d89c:	469a      	mov	sl, r3
   1d89e:	4681      	mov	r9, r0
   1d8a0:	b3ca      	cbz	r2, 1d916 <net_pkt_append+0x84>
		return 0;
	}

	if (!pkt->frags) {
   1d8a2:	6883      	ldr	r3, [r0, #8]
   1d8a4:	b133      	cbz	r3, 1d8b4 <net_pkt_append+0x22>
	struct net_buf *frag = net_buf_frag_last(pkt->frags);
   1d8a6:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1d8aa:	f7fd f96b 	bl	1ab84 <net_buf_frag_last>
   1d8ae:	4605      	mov	r5, r0
	u16_t added_len = 0;
   1d8b0:	2700      	movs	r7, #0
   1d8b2:	e024      	b.n	1d8fe <net_pkt_append+0x6c>
		frag = net_pkt_get_frag(pkt, timeout);
   1d8b4:	4651      	mov	r1, sl
   1d8b6:	f7ff fe61 	bl	1d57c <net_pkt_get_frag>
		if (!frag) {
   1d8ba:	4601      	mov	r1, r0
   1d8bc:	b368      	cbz	r0, 1d91a <net_pkt_append+0x88>
			return 0;
		}

		net_pkt_frag_add(pkt, frag);
   1d8be:	4648      	mov	r0, r9
   1d8c0:	f7ff fed9 	bl	1d676 <net_pkt_frag_add>
   1d8c4:	e7ef      	b.n	1d8a6 <net_pkt_append+0x14>
		u16_t count = min(len, net_buf_tailroom(frag));
   1d8c6:	4628      	mov	r0, r5
   1d8c8:	f7fd f9f1 	bl	1acae <net_buf_simple_tailroom>
   1d8cc:	b286      	uxth	r6, r0
		void *data = net_buf_add(frag, count);
   1d8ce:	4631      	mov	r1, r6
   1d8d0:	4628      	mov	r0, r5
   1d8d2:	f7fd f983 	bl	1abdc <net_buf_simple_add>
		memcpy(data, value, count);
   1d8d6:	4632      	mov	r2, r6
   1d8d8:	4641      	mov	r1, r8
   1d8da:	f7e2 fcf1 	bl	2c0 <memcpy>
		len -= count;
   1d8de:	1ba4      	subs	r4, r4, r6
   1d8e0:	b2a4      	uxth	r4, r4
		added_len += count;
   1d8e2:	4437      	add	r7, r6
   1d8e4:	b2bf      	uxth	r7, r7
		value += count;
   1d8e6:	44b0      	add	r8, r6
		if (len == 0) {
   1d8e8:	b194      	cbz	r4, 1d910 <net_pkt_append+0x7e>
		frag = net_pkt_get_frag(pkt, timeout);
   1d8ea:	4651      	mov	r1, sl
   1d8ec:	4648      	mov	r0, r9
   1d8ee:	f7ff fe45 	bl	1d57c <net_pkt_get_frag>
		if (!frag) {
   1d8f2:	4605      	mov	r5, r0
   1d8f4:	b160      	cbz	r0, 1d910 <net_pkt_append+0x7e>
		net_pkt_frag_add(pkt, frag);
   1d8f6:	4601      	mov	r1, r0
   1d8f8:	4648      	mov	r0, r9
   1d8fa:	f7ff febc 	bl	1d676 <net_pkt_frag_add>
		u16_t count = min(len, net_buf_tailroom(frag));
   1d8fe:	3508      	adds	r5, #8
   1d900:	4628      	mov	r0, r5
   1d902:	f7fd f9d4 	bl	1acae <net_buf_simple_tailroom>
   1d906:	4284      	cmp	r4, r0
   1d908:	d2dd      	bcs.n	1d8c6 <net_pkt_append+0x34>
   1d90a:	4626      	mov	r6, r4
   1d90c:	e7df      	b.n	1d8ce <net_pkt_append+0x3c>
		return 0;
   1d90e:	2700      	movs	r7, #0
	}

	return net_pkt_append_bytes(pkt, data, len, timeout);
}
   1d910:	4638      	mov	r0, r7
   1d912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   1d916:	2700      	movs	r7, #0
   1d918:	e7fa      	b.n	1d910 <net_pkt_append+0x7e>
			return 0;
   1d91a:	2700      	movs	r7, #0
   1d91c:	e7f8      	b.n	1d910 <net_pkt_append+0x7e>

0001d91e <net_frag_read>:
	return NULL;
}

struct net_buf *net_frag_read(struct net_buf *frag, u16_t offset,
			      u16_t *pos, u16_t len, u8_t *data)
{
   1d91e:	b4f0      	push	{r4, r5, r6, r7}
   1d920:	9e04      	ldr	r6, [sp, #16]
	if (!frag) {
   1d922:	4604      	mov	r4, r0
   1d924:	b188      	cbz	r0, 1d94a <net_frag_read+0x2c>
	while (frag) {
   1d926:	b17c      	cbz	r4, 1d948 <net_frag_read+0x2a>
		if (offset == frag->len) {
   1d928:	89a0      	ldrh	r0, [r4, #12]
   1d92a:	4288      	cmp	r0, r1
   1d92c:	d005      	beq.n	1d93a <net_frag_read+0x1c>
		} else if (offset < frag->len) {
   1d92e:	4288      	cmp	r0, r1
   1d930:	d807      	bhi.n	1d942 <net_frag_read+0x24>
		offset -= frag->len;
   1d932:	1a09      	subs	r1, r1, r0
   1d934:	b289      	uxth	r1, r1
		frag = frag->frags;
   1d936:	6824      	ldr	r4, [r4, #0]
   1d938:	e7f5      	b.n	1d926 <net_frag_read+0x8>
			*pos = 0;
   1d93a:	2100      	movs	r1, #0
   1d93c:	8011      	strh	r1, [r2, #0]
			return frag->frags;
   1d93e:	6820      	ldr	r0, [r4, #0]
   1d940:	e003      	b.n	1d94a <net_frag_read+0x2c>
			*pos = offset;
   1d942:	8011      	strh	r1, [r2, #0]
			return frag;
   1d944:	4620      	mov	r0, r4
   1d946:	e000      	b.n	1d94a <net_frag_read+0x2c>
	return NULL;
   1d948:	4620      	mov	r0, r4
	u16_t copy = 0;

	frag = adjust_offset(frag, offset, pos);
	if (!frag) {
   1d94a:	b350      	cbz	r0, 1d9a2 <net_frag_read+0x84>
   1d94c:	2500      	movs	r5, #0
   1d94e:	e00d      	b.n	1d96c <net_frag_read+0x4e>
	while (len-- > 0 && frag) {
		if (data) {
			frag = net_frag_read_byte(frag, *pos,
						  pos, data + copy++);
		} else {
			frag = net_frag_read_byte(frag, *pos, pos, NULL);
   1d950:	8813      	ldrh	r3, [r2, #0]
	*pos = offset + 1;
   1d952:	3301      	adds	r3, #1
   1d954:	b29b      	uxth	r3, r3
   1d956:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1d958:	8984      	ldrh	r4, [r0, #12]
   1d95a:	42a3      	cmp	r3, r4
   1d95c:	d304      	bcc.n	1d968 <net_frag_read+0x4a>
		*pos = 0;
   1d95e:	2300      	movs	r3, #0
   1d960:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1d962:	6800      	ldr	r0, [r0, #0]
   1d964:	e000      	b.n	1d968 <net_frag_read+0x4a>
						  pos, data + copy++);
   1d966:	4625      	mov	r5, r4
   1d968:	460b      	mov	r3, r1
		}

		/* Error: Still reamining length to be read, but no data. */
		if (!frag && len) {
   1d96a:	b1c0      	cbz	r0, 1d99e <net_frag_read+0x80>
	while (len-- > 0 && frag) {
   1d96c:	1e59      	subs	r1, r3, #1
   1d96e:	b289      	uxth	r1, r1
   1d970:	b1db      	cbz	r3, 1d9aa <net_frag_read+0x8c>
   1d972:	b1d0      	cbz	r0, 1d9aa <net_frag_read+0x8c>
		if (data) {
   1d974:	2e00      	cmp	r6, #0
   1d976:	d0eb      	beq.n	1d950 <net_frag_read+0x32>
			frag = net_frag_read_byte(frag, *pos,
   1d978:	8813      	ldrh	r3, [r2, #0]
						  pos, data + copy++);
   1d97a:	1c6c      	adds	r4, r5, #1
   1d97c:	b2a4      	uxth	r4, r4
	if (data) {
   1d97e:	42ee      	cmn	r6, r5
   1d980:	d002      	beq.n	1d988 <net_frag_read+0x6a>
		*data = frag->data[offset];
   1d982:	6887      	ldr	r7, [r0, #8]
   1d984:	5cff      	ldrb	r7, [r7, r3]
   1d986:	5577      	strb	r7, [r6, r5]
	*pos = offset + 1;
   1d988:	3301      	adds	r3, #1
   1d98a:	b29b      	uxth	r3, r3
   1d98c:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1d98e:	8985      	ldrh	r5, [r0, #12]
   1d990:	42ab      	cmp	r3, r5
   1d992:	d3e8      	bcc.n	1d966 <net_frag_read+0x48>
		*pos = 0;
   1d994:	2300      	movs	r3, #0
   1d996:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1d998:	6800      	ldr	r0, [r0, #0]
						  pos, data + copy++);
   1d99a:	4625      	mov	r5, r4
   1d99c:	e7e4      	b.n	1d968 <net_frag_read+0x4a>
		if (!frag && len) {
   1d99e:	2900      	cmp	r1, #0
   1d9a0:	d0e4      	beq.n	1d96c <net_frag_read+0x4e>
	}

	return frag;

error:
	*pos = 0xffff;
   1d9a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d9a6:	8013      	strh	r3, [r2, #0]

	return NULL;
   1d9a8:	2000      	movs	r0, #0
}
   1d9aa:	bcf0      	pop	{r4, r5, r6, r7}
   1d9ac:	4770      	bx	lr

0001d9ae <net_frag_read_be16>:

struct net_buf *net_frag_read_be16(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u16_t *value)
{
   1d9ae:	b510      	push	{r4, lr}
   1d9b0:	b084      	sub	sp, #16
   1d9b2:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v16[2];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u16_t), v16);
   1d9b4:	ab03      	add	r3, sp, #12
   1d9b6:	9300      	str	r3, [sp, #0]
   1d9b8:	2302      	movs	r3, #2
   1d9ba:	f7ff ffb0 	bl	1d91e <net_frag_read>

	*value = v16[0] << 8 | v16[1];
   1d9be:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1d9c2:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1d9c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d9ca:	8023      	strh	r3, [r4, #0]

	return ret_frag;
}
   1d9cc:	b004      	add	sp, #16
   1d9ce:	bd10      	pop	{r4, pc}

0001d9d0 <net_frag_read_be32>:

struct net_buf *net_frag_read_be32(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u32_t *value)
{
   1d9d0:	b510      	push	{r4, lr}
   1d9d2:	b084      	sub	sp, #16
   1d9d4:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v32[4];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u32_t), v32);
   1d9d6:	ab03      	add	r3, sp, #12
   1d9d8:	9300      	str	r3, [sp, #0]
   1d9da:	2304      	movs	r3, #4
   1d9dc:	f7ff ff9f 	bl	1d91e <net_frag_read>

	*value = v32[0] << 24 | v32[1] << 16 | v32[2] << 8 | v32[3];
   1d9e0:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1d9e4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1d9e8:	041b      	lsls	r3, r3, #16
   1d9ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1d9ee:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1d9f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d9f6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1d9fa:	4313      	orrs	r3, r2
   1d9fc:	6023      	str	r3, [r4, #0]

	return ret_frag;
}
   1d9fe:	b004      	add	sp, #16
   1da00:	bd10      	pop	{r4, pc}

0001da02 <net_pkt_write>:

struct net_buf *net_pkt_write(struct net_pkt *pkt, struct net_buf *frag,
			      u16_t offset, u16_t *pos,
			      u16_t len, u8_t *data,
			      s32_t timeout)
{
   1da02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da06:	b083      	sub	sp, #12
   1da08:	9201      	str	r2, [sp, #4]
   1da0a:	469b      	mov	fp, r3
   1da0c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1da10:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	if (!pkt) {
   1da12:	2800      	cmp	r0, #0
   1da14:	d06d      	beq.n	1daf2 <net_pkt_write+0xf0>
   1da16:	460c      	mov	r4, r1
   1da18:	4682      	mov	sl, r0
   1da1a:	4615      	mov	r5, r2
	if (data) {
   1da1c:	b364      	cbz	r4, 1da78 <net_pkt_write+0x76>
		if (!frag) {
   1da1e:	2c00      	cmp	r4, #0
   1da20:	d065      	beq.n	1daee <net_pkt_write+0xec>
		if (offset < frag->len) {
   1da22:	89a3      	ldrh	r3, [r4, #12]
   1da24:	42ab      	cmp	r3, r5
   1da26:	d863      	bhi.n	1daf0 <net_pkt_write+0xee>
		if (offset == frag->len) {
   1da28:	d032      	beq.n	1da90 <net_pkt_write+0x8e>
		if (offset > frag->len) {
   1da2a:	42ab      	cmp	r3, r5
   1da2c:	d2f6      	bcs.n	1da1c <net_pkt_write+0x1a>
			offset -= frag->len;
   1da2e:	1aed      	subs	r5, r5, r3
   1da30:	b2ad      	uxth	r5, r5
			tailroom = net_buf_tailroom(frag);
   1da32:	f104 0908 	add.w	r9, r4, #8
   1da36:	4648      	mov	r0, r9
   1da38:	f7fd f939 	bl	1acae <net_buf_simple_tailroom>
   1da3c:	fa1f f880 	uxth.w	r8, r0
			if (offset < tailroom) {
   1da40:	4545      	cmp	r5, r8
   1da42:	d33a      	bcc.n	1daba <net_pkt_write+0xb8>
			if (offset == tailroom) {
   1da44:	4545      	cmp	r5, r8
   1da46:	d03e      	beq.n	1dac6 <net_pkt_write+0xc4>
			if (offset > tailroom) {
   1da48:	4545      	cmp	r5, r8
   1da4a:	d9e7      	bls.n	1da1c <net_pkt_write+0x1a>
				net_buf_add(frag, tailroom);
   1da4c:	b281      	uxth	r1, r0
   1da4e:	4648      	mov	r0, r9
   1da50:	f7fd f8c4 	bl	1abdc <net_buf_simple_add>
				offset -= tailroom;
   1da54:	eba5 0508 	sub.w	r5, r5, r8
   1da58:	b2ad      	uxth	r5, r5
				frag = check_and_create_data(pkt,
   1da5a:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1da5c:	2c00      	cmp	r4, #0
   1da5e:	d1dd      	bne.n	1da1c <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1da60:	990e      	ldr	r1, [sp, #56]	; 0x38
   1da62:	4650      	mov	r0, sl
   1da64:	f7ff fd8a 	bl	1d57c <net_pkt_get_frag>
	if (!frag) {
   1da68:	4604      	mov	r4, r0
   1da6a:	2800      	cmp	r0, #0
   1da6c:	d0d6      	beq.n	1da1c <net_pkt_write+0x1a>
	net_pkt_frag_add(pkt, frag);
   1da6e:	4601      	mov	r1, r0
   1da70:	4650      	mov	r0, sl
   1da72:	f7ff fe00 	bl	1d676 <net_pkt_frag_add>
   1da76:	e7d1      	b.n	1da1c <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1da78:	990e      	ldr	r1, [sp, #56]	; 0x38
   1da7a:	4650      	mov	r0, sl
   1da7c:	f7ff fd7e 	bl	1d57c <net_pkt_get_frag>
	if (!frag) {
   1da80:	4604      	mov	r4, r0
   1da82:	2800      	cmp	r0, #0
   1da84:	d0cb      	beq.n	1da1e <net_pkt_write+0x1c>
	net_pkt_frag_add(pkt, frag);
   1da86:	4601      	mov	r1, r0
   1da88:	4650      	mov	r0, sl
   1da8a:	f7ff fdf4 	bl	1d676 <net_pkt_frag_add>
   1da8e:	e7c6      	b.n	1da1e <net_pkt_write+0x1c>
			if (net_buf_tailroom(frag)) {
   1da90:	f104 0008 	add.w	r0, r4, #8
   1da94:	f7fd f90b 	bl	1acae <net_buf_simple_tailroom>
   1da98:	bb50      	cbnz	r0, 1daf0 <net_pkt_write+0xee>
			return check_and_create_data(pkt, frag->frags,
   1da9a:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1da9c:	b10c      	cbz	r4, 1daa2 <net_pkt_write+0xa0>
			*pos = 0;
   1da9e:	2500      	movs	r5, #0
   1daa0:	e026      	b.n	1daf0 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1daa2:	990e      	ldr	r1, [sp, #56]	; 0x38
   1daa4:	4650      	mov	r0, sl
   1daa6:	f7ff fd69 	bl	1d57c <net_pkt_get_frag>
	if (!frag) {
   1daaa:	4604      	mov	r4, r0
   1daac:	2800      	cmp	r0, #0
   1daae:	d0f6      	beq.n	1da9e <net_pkt_write+0x9c>
	net_pkt_frag_add(pkt, frag);
   1dab0:	4601      	mov	r1, r0
   1dab2:	4650      	mov	r0, sl
   1dab4:	f7ff fddf 	bl	1d676 <net_pkt_frag_add>
   1dab8:	e7f1      	b.n	1da9e <net_pkt_write+0x9c>
				net_buf_add(frag, offset);
   1daba:	4629      	mov	r1, r5
   1dabc:	4648      	mov	r0, r9
   1dabe:	f7fd f88d 	bl	1abdc <net_buf_simple_add>
				*pos = frag->len;
   1dac2:	89a5      	ldrh	r5, [r4, #12]
   1dac4:	e014      	b.n	1daf0 <net_pkt_write+0xee>
				net_buf_add(frag, tailroom);
   1dac6:	b281      	uxth	r1, r0
   1dac8:	4648      	mov	r0, r9
   1daca:	f7fd f887 	bl	1abdc <net_buf_simple_add>
				return check_and_create_data(pkt,
   1dace:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1dad0:	b10c      	cbz	r4, 1dad6 <net_pkt_write+0xd4>
				*pos = 0;
   1dad2:	2500      	movs	r5, #0
   1dad4:	e00c      	b.n	1daf0 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1dad6:	990e      	ldr	r1, [sp, #56]	; 0x38
   1dad8:	4650      	mov	r0, sl
   1dada:	f7ff fd4f 	bl	1d57c <net_pkt_get_frag>
	if (!frag) {
   1dade:	4604      	mov	r4, r0
   1dae0:	2800      	cmp	r0, #0
   1dae2:	d0f6      	beq.n	1dad2 <net_pkt_write+0xd0>
	net_pkt_frag_add(pkt, frag);
   1dae4:	4601      	mov	r1, r0
   1dae6:	4650      	mov	r0, sl
   1dae8:	f7ff fdc5 	bl	1d676 <net_pkt_frag_add>
   1daec:	e7f1      	b.n	1dad2 <net_pkt_write+0xd0>
		if (!frag) {
   1daee:	9d01      	ldr	r5, [sp, #4]
		NET_ERR("Invalid packet");
		goto error;
	}

	frag = adjust_write_offset(pkt, frag, offset, &offset, timeout);
	if (!frag) {
   1daf0:	b96c      	cbnz	r4, 1db0e <net_pkt_write+0x10c>
			net_pkt_frag_add(pkt, frag);
		}
	} while (1);

error:
	*pos = 0xffff;
   1daf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1daf6:	f8ab 3000 	strh.w	r3, [fp]

	return NULL;
   1dafa:	2000      	movs	r0, #0
   1dafc:	e02d      	b.n	1db5a <net_pkt_write+0x158>
		len -= count;
   1dafe:	eba6 0608 	sub.w	r6, r6, r8
   1db02:	b2b6      	uxth	r6, r6
		if (len == 0) {
   1db04:	b32e      	cbz	r6, 1db52 <net_pkt_write+0x150>
		data += count;
   1db06:	4447      	add	r7, r8
		frag = frag->frags;
   1db08:	6824      	ldr	r4, [r4, #0]
		if (!frag) {
   1db0a:	b34c      	cbz	r4, 1db60 <net_pkt_write+0x15e>
		offset = 0;
   1db0c:	2500      	movs	r5, #0
		u16_t space = frag->size - net_buf_headroom(frag) - offset;
   1db0e:	f8b4 800e 	ldrh.w	r8, [r4, #14]
   1db12:	f104 0908 	add.w	r9, r4, #8
   1db16:	4648      	mov	r0, r9
   1db18:	f7fd f8c5 	bl	1aca6 <net_buf_simple_headroom>
   1db1c:	eba8 0800 	sub.w	r8, r8, r0
   1db20:	fa1f f888 	uxth.w	r8, r8
   1db24:	eba8 0805 	sub.w	r8, r8, r5
   1db28:	fa1f f888 	uxth.w	r8, r8
		u16_t count = min(len, space);
   1db2c:	45b0      	cmp	r8, r6
   1db2e:	bf28      	it	cs
   1db30:	46b0      	movcs	r8, r6
		memcpy(frag->data + offset, data, count);
   1db32:	68a0      	ldr	r0, [r4, #8]
   1db34:	4642      	mov	r2, r8
   1db36:	4639      	mov	r1, r7
   1db38:	4428      	add	r0, r5
   1db3a:	f7e2 fbc1 	bl	2c0 <memcpy>
		size_to_add = offset + count - frag->len;
   1db3e:	eb05 0108 	add.w	r1, r5, r8
   1db42:	89a3      	ldrh	r3, [r4, #12]
   1db44:	1ac9      	subs	r1, r1, r3
		if (size_to_add > 0) {
   1db46:	2900      	cmp	r1, #0
   1db48:	ddd9      	ble.n	1dafe <net_pkt_write+0xfc>
			net_buf_add(frag, size_to_add);
   1db4a:	4648      	mov	r0, r9
   1db4c:	f7fd f846 	bl	1abdc <net_buf_simple_add>
   1db50:	e7d5      	b.n	1dafe <net_pkt_write+0xfc>
			*pos = offset + count;
   1db52:	4445      	add	r5, r8
   1db54:	f8ab 5000 	strh.w	r5, [fp]
			return frag;
   1db58:	4620      	mov	r0, r4
}
   1db5a:	b003      	add	sp, #12
   1db5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			frag = net_pkt_get_frag(pkt, timeout);
   1db60:	990e      	ldr	r1, [sp, #56]	; 0x38
   1db62:	4650      	mov	r0, sl
   1db64:	f7ff fd0a 	bl	1d57c <net_pkt_get_frag>
			if (!frag) {
   1db68:	4604      	mov	r4, r0
   1db6a:	2800      	cmp	r0, #0
   1db6c:	d0c1      	beq.n	1daf2 <net_pkt_write+0xf0>
			net_pkt_frag_add(pkt, frag);
   1db6e:	4601      	mov	r1, r0
   1db70:	4650      	mov	r0, sl
   1db72:	f7ff fd80 	bl	1d676 <net_pkt_frag_add>
   1db76:	e7c9      	b.n	1db0c <net_pkt_write+0x10a>

0001db78 <net_pkt_get_info>:
void net_pkt_get_info(struct k_mem_slab **rx,
		      struct k_mem_slab **tx,
		      struct net_buf_pool **rx_data,
		      struct net_buf_pool **tx_data)
{
	if (rx) {
   1db78:	b170      	cbz	r0, 1db98 <net_pkt_get_info+0x20>
{
   1db7a:	b410      	push	{r4}
   1db7c:	4604      	mov	r4, r0
		*rx = &rx_pkts;
   1db7e:	480c      	ldr	r0, [pc, #48]	; (1dbb0 <net_pkt_get_info+0x38>)
   1db80:	6020      	str	r0, [r4, #0]
	}

	if (tx) {
   1db82:	b109      	cbz	r1, 1db88 <net_pkt_get_info+0x10>
		*tx = &tx_pkts;
   1db84:	480b      	ldr	r0, [pc, #44]	; (1dbb4 <net_pkt_get_info+0x3c>)
   1db86:	6008      	str	r0, [r1, #0]
	}

	if (rx_data) {
   1db88:	b10a      	cbz	r2, 1db8e <net_pkt_get_info+0x16>
		*rx_data = &rx_bufs;
   1db8a:	490b      	ldr	r1, [pc, #44]	; (1dbb8 <net_pkt_get_info+0x40>)
   1db8c:	6011      	str	r1, [r2, #0]
	}

	if (tx_data) {
   1db8e:	b10b      	cbz	r3, 1db94 <net_pkt_get_info+0x1c>
		*tx_data = &tx_bufs;
   1db90:	4a0a      	ldr	r2, [pc, #40]	; (1dbbc <net_pkt_get_info+0x44>)
   1db92:	601a      	str	r2, [r3, #0]
	}
}
   1db94:	bc10      	pop	{r4}
   1db96:	4770      	bx	lr
	if (tx) {
   1db98:	b109      	cbz	r1, 1db9e <net_pkt_get_info+0x26>
		*tx = &tx_pkts;
   1db9a:	4806      	ldr	r0, [pc, #24]	; (1dbb4 <net_pkt_get_info+0x3c>)
   1db9c:	6008      	str	r0, [r1, #0]
	if (rx_data) {
   1db9e:	b10a      	cbz	r2, 1dba4 <net_pkt_get_info+0x2c>
		*rx_data = &rx_bufs;
   1dba0:	4905      	ldr	r1, [pc, #20]	; (1dbb8 <net_pkt_get_info+0x40>)
   1dba2:	6011      	str	r1, [r2, #0]
	if (tx_data) {
   1dba4:	2b00      	cmp	r3, #0
   1dba6:	d0f6      	beq.n	1db96 <net_pkt_get_info+0x1e>
		*tx_data = &tx_bufs;
   1dba8:	4a04      	ldr	r2, [pc, #16]	; (1dbbc <net_pkt_get_info+0x44>)
   1dbaa:	601a      	str	r2, [r3, #0]
   1dbac:	4770      	bx	lr
   1dbae:	bf00      	nop
   1dbb0:	2000d0f4 	.word	0x2000d0f4
   1dbb4:	2000d110 	.word	0x2000d110
   1dbb8:	2000d274 	.word	0x2000d274
   1dbbc:	2000d294 	.word	0x2000d294

0001dbc0 <net_frag_get_pos>:
#endif /* CONFIG_NET_DEBUG_NET_PKT */

struct net_buf *net_frag_get_pos(struct net_pkt *pkt,
				 u16_t offset,
				 u16_t *pos)
{
   1dbc0:	b500      	push	{lr}
   1dbc2:	b083      	sub	sp, #12
	struct net_buf *frag;

	frag = net_frag_skip(pkt->frags, offset, pos, 0);
   1dbc4:	6880      	ldr	r0, [r0, #8]
 */
static inline struct net_buf *net_frag_skip(struct net_buf *frag,
					    u16_t offset,
					    u16_t *pos, u16_t len)
{
	return net_frag_read(frag, offset, pos, len, NULL);
   1dbc6:	2300      	movs	r3, #0
   1dbc8:	9300      	str	r3, [sp, #0]
   1dbca:	f7ff fea8 	bl	1d91e <net_frag_read>
	if (!frag) {
		return NULL;
	}

	return frag;
}
   1dbce:	b003      	add	sp, #12
   1dbd0:	f85d fb04 	ldr.w	pc, [sp], #4

0001dbd4 <net_pkt_icmp_data>:
#else
#define too_short_msg(...)
#endif

struct net_icmp_hdr *net_pkt_icmp_data(struct net_pkt *pkt)
{
   1dbd4:	b500      	push	{lr}
   1dbd6:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1dbd8:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1dbdc:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1dbe0:	f10d 0206 	add.w	r2, sp, #6
   1dbe4:	4419      	add	r1, r3
   1dbe6:	f7ff ffeb 	bl	1dbc0 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1dbea:	b130      	cbz	r0, 1dbfa <net_pkt_icmp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("icmp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_icmp_hdr *)(frag->data + offset);
   1dbec:	6880      	ldr	r0, [r0, #8]
   1dbee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dbf2:	4418      	add	r0, r3
}
   1dbf4:	b003      	add	sp, #12
   1dbf6:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1dbfa:	2000      	movs	r0, #0
   1dbfc:	e7fa      	b.n	1dbf4 <net_pkt_icmp_data+0x20>

0001dbfe <net_pkt_icmp_opt_data>:

u8_t *net_pkt_icmp_opt_data(struct net_pkt *pkt, size_t opt_len)
{
   1dbfe:	b500      	push	{lr}
   1dc00:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1dc02:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) + opt_len,
   1dc06:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1dc0a:	4413      	add	r3, r2
	frag = net_frag_get_pos(pkt,
   1dc0c:	4419      	add	r1, r3
   1dc0e:	f10d 0206 	add.w	r2, sp, #6
   1dc12:	b289      	uxth	r1, r1
   1dc14:	f7ff ffd4 	bl	1dbc0 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1dc18:	b130      	cbz	r0, 1dc28 <net_pkt_icmp_opt_data+0x2a>
		/* We tried to read past the end of the data */
		too_short_msg("icmp opt data", pkt, offset, opt_len);
		return NULL;
	}

	return frag->data + offset;
   1dc1a:	6880      	ldr	r0, [r0, #8]
   1dc1c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dc20:	4418      	add	r0, r3
}
   1dc22:	b003      	add	sp, #12
   1dc24:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1dc28:	2000      	movs	r0, #0
   1dc2a:	e7fa      	b.n	1dc22 <net_pkt_icmp_opt_data+0x24>

0001dc2c <net_pkt_udp_data>:

struct net_udp_hdr *net_pkt_udp_data(struct net_pkt *pkt)
{
   1dc2c:	b500      	push	{lr}
   1dc2e:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1dc30:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1dc34:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1dc38:	f10d 0206 	add.w	r2, sp, #6
   1dc3c:	4419      	add	r1, r3
   1dc3e:	f7ff ffbf 	bl	1dbc0 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1dc42:	b130      	cbz	r0, 1dc52 <net_pkt_udp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("udp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_udp_hdr *)(frag->data + offset);
   1dc44:	6880      	ldr	r0, [r0, #8]
   1dc46:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dc4a:	4418      	add	r0, r3
}
   1dc4c:	b003      	add	sp, #12
   1dc4e:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1dc52:	2000      	movs	r0, #0
   1dc54:	e7fa      	b.n	1dc4c <net_pkt_udp_data+0x20>

0001dc56 <net_pkt_tcp_data>:

struct net_tcp_hdr *net_pkt_tcp_data(struct net_pkt *pkt)
{
   1dc56:	b500      	push	{lr}
   1dc58:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1dc5a:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1dc5e:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1dc62:	f10d 0206 	add.w	r2, sp, #6
   1dc66:	4419      	add	r1, r3
   1dc68:	f7ff ffaa 	bl	1dbc0 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1dc6c:	b130      	cbz	r0, 1dc7c <net_pkt_tcp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("tcp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_tcp_hdr *)(frag->data + offset);
   1dc6e:	6880      	ldr	r0, [r0, #8]
   1dc70:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dc74:	4418      	add	r0, r3
}
   1dc76:	b003      	add	sp, #12
   1dc78:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1dc7c:	2000      	movs	r0, #0
   1dc7e:	e7fa      	b.n	1dc76 <net_pkt_tcp_data+0x20>

0001dc80 <net_pkt_clone>:

struct net_pkt *net_pkt_clone(struct net_pkt *pkt, s32_t timeout)
{
   1dc80:	b570      	push	{r4, r5, r6, lr}
   1dc82:	b082      	sub	sp, #8
	struct net_pkt *clone;
	struct net_buf *frag;
	u16_t pos;

	if (!pkt) {
   1dc84:	4605      	mov	r5, r0
   1dc86:	2800      	cmp	r0, #0
   1dc88:	d065      	beq.n	1dd56 <net_pkt_clone+0xd6>
   1dc8a:	460e      	mov	r6, r1
		return NULL;
	}

	clone = net_pkt_get_reserve(pkt->slab, 0, timeout);
   1dc8c:	460a      	mov	r2, r1
   1dc8e:	2100      	movs	r1, #0
   1dc90:	6840      	ldr	r0, [r0, #4]
   1dc92:	f7ff fbad 	bl	1d3f0 <net_pkt_get_reserve>
	if (!clone) {
   1dc96:	4604      	mov	r4, r0
   1dc98:	2800      	cmp	r0, #0
   1dc9a:	d054      	beq.n	1dd46 <net_pkt_clone+0xc6>
		return NULL;
	}

	clone->frags = NULL;
   1dc9c:	2300      	movs	r3, #0
   1dc9e:	6083      	str	r3, [r0, #8]

	if (pkt->frags) {
   1dca0:	68ab      	ldr	r3, [r5, #8]
   1dca2:	b173      	cbz	r3, 1dcc2 <net_pkt_clone+0x42>
   1dca4:	2100      	movs	r1, #0
   1dca6:	e002      	b.n	1dcae <net_pkt_clone+0x2e>
		bytes += buf->len;
   1dca8:	899a      	ldrh	r2, [r3, #12]
   1dcaa:	4411      	add	r1, r2
		buf = buf->frags;
   1dcac:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1dcae:	2b00      	cmp	r3, #0
   1dcb0:	d1fa      	bne.n	1dca8 <net_pkt_clone+0x28>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1dcb2:	4633      	mov	r3, r6
   1dcb4:	2200      	movs	r2, #0
   1dcb6:	4628      	mov	r0, r5
   1dcb8:	f7ff fcf4 	bl	1d6a4 <net_pkt_copy>
		clone->frags = net_pkt_copy_all(pkt, 0, timeout);
   1dcbc:	60a0      	str	r0, [r4, #8]
		if (!clone->frags) {
   1dcbe:	2800      	cmp	r0, #0
   1dcc0:	d044      	beq.n	1dd4c <net_pkt_clone+0xcc>
			net_pkt_unref(clone);
			return NULL;
		}
	}

	clone->context = pkt->context;
   1dcc2:	68eb      	ldr	r3, [r5, #12]
   1dcc4:	60e3      	str	r3, [r4, #12]
	clone->token = pkt->token;
   1dcc6:	692b      	ldr	r3, [r5, #16]
   1dcc8:	6123      	str	r3, [r4, #16]
	clone->iface = pkt->iface;
   1dcca:	696b      	ldr	r3, [r5, #20]
   1dccc:	6163      	str	r3, [r4, #20]

	if (clone->frags) {
   1dcce:	68a3      	ldr	r3, [r4, #8]
   1dcd0:	b1db      	cbz	r3, 1dd0a <net_pkt_clone+0x8a>
		frag = net_frag_get_pos(clone, net_pkt_ip_hdr_len(pkt), &pos);
   1dcd2:	f10d 0206 	add.w	r2, sp, #6
   1dcd6:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   1dcda:	4620      	mov	r0, r4
   1dcdc:	f7ff ff70 	bl	1dbc0 <net_frag_get_pos>

		net_pkt_set_appdata(clone, frag->data + pos);
   1dce0:	6883      	ldr	r3, [r0, #8]
   1dce2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1dce6:	4413      	add	r3, r2
	pkt->appdata = data;
   1dce8:	61a3      	str	r3, [r4, #24]
	return pkt->appdatalen;
   1dcea:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
	pkt->appdatalen = len;
   1dcec:	8623      	strh	r3, [r4, #48]	; 0x30

		/* The link header pointers are only usable if there is
		 * a fragment that we copied because those pointers point
		 * to start of the fragment which we do not have right now.
		 */
		memcpy(&clone->lladdr_src, &pkt->lladdr_src,
   1dcee:	2208      	movs	r2, #8
   1dcf0:	f105 0120 	add.w	r1, r5, #32
   1dcf4:	f104 0020 	add.w	r0, r4, #32
   1dcf8:	f7e2 fae2 	bl	2c0 <memcpy>
		       sizeof(clone->lladdr_src));
		memcpy(&clone->lladdr_dst, &pkt->lladdr_dst,
   1dcfc:	2208      	movs	r2, #8
   1dcfe:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1dd02:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1dd06:	f7e2 fadb 	bl	2c0 <memcpy>
	pkt->next_hdr = hdr;
   1dd0a:	2300      	movs	r3, #0
   1dd0c:	61e3      	str	r3, [r4, #28]
	return pkt->ip_hdr_len;
   1dd0e:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	pkt->ip_hdr_len = len;
   1dd12:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->family;
   1dd16:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1dd1a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	pkt->family = family;
   1dd1e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1dd22:	f363 02c6 	bfi	r2, r3, #3, #4
   1dd26:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	net_pkt_set_ip_hdr_len(clone, net_pkt_ip_hdr_len(pkt));

	net_pkt_set_family(clone, net_pkt_family(pkt));

#if defined(CONFIG_NET_IPV6)
	clone->ipv6_hop_limit = pkt->ipv6_hop_limit;
   1dd2a:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   1dd2e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	clone->ipv6_ext_len = pkt->ipv6_ext_len;
   1dd32:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   1dd36:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	clone->ipv6_ext_opt_len = pkt->ipv6_ext_opt_len;
   1dd3a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1dd3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	clone->ipv6_prev_hdr_start = pkt->ipv6_prev_hdr_start;
   1dd42:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   1dd44:	87e3      	strh	r3, [r4, #62]	; 0x3e
#endif

	NET_DBG("Cloned %p to %p", pkt, clone);

	return clone;
}
   1dd46:	4620      	mov	r0, r4
   1dd48:	b002      	add	sp, #8
   1dd4a:	bd70      	pop	{r4, r5, r6, pc}
			net_pkt_unref(clone);
   1dd4c:	4620      	mov	r0, r4
   1dd4e:	f7ff fc68 	bl	1d622 <net_pkt_unref>
			return NULL;
   1dd52:	2400      	movs	r4, #0
   1dd54:	e7f7      	b.n	1dd46 <net_pkt_clone+0xc6>
		return NULL;
   1dd56:	4604      	mov	r4, r0
   1dd58:	e7f5      	b.n	1dd46 <net_pkt_clone+0xc6>

0001dd5a <net_pkt_init>:

void net_pkt_init(void)
{
   1dd5a:	4770      	bx	lr

0001dd5c <net_value_to_udec>:
	*(ptr - 1) = '\0';
	return buf;
}

static int net_value_to_udec(char *buf, u32_t value, int precision)
{
   1dd5c:	b470      	push	{r4, r5, r6}
	int i;
	int temp;
	char *start = buf;

	divisor = 1000000000;
	if (precision < 0)
   1dd5e:	2a00      	cmp	r2, #0
   1dd60:	db03      	blt.n	1dd6a <net_value_to_udec+0xe>
	for (i = 9; i >= 0; i--, divisor /= 10) {
		temp = value / divisor;
		value = value % divisor;
		if ((precision > i) || (temp != 0)) {
			precision = i;
			*buf++ = (char) (temp + '0');
   1dd62:	4606      	mov	r6, r0
   1dd64:	2409      	movs	r4, #9
   1dd66:	4b0e      	ldr	r3, [pc, #56]	; (1dda0 <net_value_to_udec+0x44>)
   1dd68:	e00a      	b.n	1dd80 <net_value_to_udec+0x24>
		precision = 1;
   1dd6a:	2201      	movs	r2, #1
   1dd6c:	e7f9      	b.n	1dd62 <net_value_to_udec+0x6>
			*buf++ = (char) (temp + '0');
   1dd6e:	3530      	adds	r5, #48	; 0x30
   1dd70:	7035      	strb	r5, [r6, #0]
			precision = i;
   1dd72:	4622      	mov	r2, r4
			*buf++ = (char) (temp + '0');
   1dd74:	3601      	adds	r6, #1
	for (i = 9; i >= 0; i--, divisor /= 10) {
   1dd76:	3c01      	subs	r4, #1
   1dd78:	4d0a      	ldr	r5, [pc, #40]	; (1dda4 <net_value_to_udec+0x48>)
   1dd7a:	fba5 5303 	umull	r5, r3, r5, r3
   1dd7e:	08db      	lsrs	r3, r3, #3
   1dd80:	2c00      	cmp	r4, #0
   1dd82:	db08      	blt.n	1dd96 <net_value_to_udec+0x3a>
		temp = value / divisor;
   1dd84:	fbb1 f5f3 	udiv	r5, r1, r3
		value = value % divisor;
   1dd88:	fb03 1115 	mls	r1, r3, r5, r1
		if ((precision > i) || (temp != 0)) {
   1dd8c:	42a2      	cmp	r2, r4
   1dd8e:	dcee      	bgt.n	1dd6e <net_value_to_udec+0x12>
   1dd90:	2d00      	cmp	r5, #0
   1dd92:	d0f0      	beq.n	1dd76 <net_value_to_udec+0x1a>
   1dd94:	e7eb      	b.n	1dd6e <net_value_to_udec+0x12>
		}
	}
	*buf = 0;
   1dd96:	2300      	movs	r3, #0
   1dd98:	7033      	strb	r3, [r6, #0]

	return buf - start;
}
   1dd9a:	1a30      	subs	r0, r6, r0
   1dd9c:	bc70      	pop	{r4, r5, r6}
   1dd9e:	4770      	bx	lr
   1dda0:	3b9aca00 	.word	0x3b9aca00
   1dda4:	cccccccd 	.word	0xcccccccd

0001dda8 <calc_chksum>:

	return 0;
}

static u16_t calc_chksum(u16_t sum, const u8_t *ptr, u16_t len)
{
   1dda8:	b410      	push	{r4}
	u16_t tmp;
	const u8_t *end;

	end = ptr + len - 1;
   1ddaa:	3a01      	subs	r2, #1
   1ddac:	440a      	add	r2, r1

	while (ptr < end) {
   1ddae:	e000      	b.n	1ddb2 <calc_chksum+0xa>
		tmp = (ptr[0] << 8) + ptr[1];
		sum += tmp;
		if (sum < tmp) {
			sum++;
		}
		ptr += 2;
   1ddb0:	3102      	adds	r1, #2
	while (ptr < end) {
   1ddb2:	4291      	cmp	r1, r2
   1ddb4:	d20b      	bcs.n	1ddce <calc_chksum+0x26>
		tmp = (ptr[0] << 8) + ptr[1];
   1ddb6:	780c      	ldrb	r4, [r1, #0]
   1ddb8:	784b      	ldrb	r3, [r1, #1]
   1ddba:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   1ddbe:	b29b      	uxth	r3, r3
		sum += tmp;
   1ddc0:	4418      	add	r0, r3
   1ddc2:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1ddc4:	4283      	cmp	r3, r0
   1ddc6:	d9f3      	bls.n	1ddb0 <calc_chksum+0x8>
			sum++;
   1ddc8:	3001      	adds	r0, #1
   1ddca:	b280      	uxth	r0, r0
   1ddcc:	e7f0      	b.n	1ddb0 <calc_chksum+0x8>
	}

	if (ptr == end) {
   1ddce:	d001      	beq.n	1ddd4 <calc_chksum+0x2c>
			sum++;
		}
	}

	return sum;
}
   1ddd0:	bc10      	pop	{r4}
   1ddd2:	4770      	bx	lr
		tmp = ptr[0] << 8;
   1ddd4:	780b      	ldrb	r3, [r1, #0]
   1ddd6:	021b      	lsls	r3, r3, #8
		sum += tmp;
   1ddd8:	4418      	add	r0, r3
   1ddda:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1dddc:	4283      	cmp	r3, r0
   1ddde:	d9f7      	bls.n	1ddd0 <calc_chksum+0x28>
			sum++;
   1dde0:	3001      	adds	r0, #1
   1dde2:	b280      	uxth	r0, r0
   1dde4:	e7f4      	b.n	1ddd0 <calc_chksum+0x28>

0001dde6 <convert_port>:
	return false;
}

#if defined(CONFIG_NET_IPV6) || defined(CONFIG_NET_IPV4)
static bool convert_port(const char *buf, u16_t *port)
{
   1dde6:	b530      	push	{r4, r5, lr}
   1dde8:	b083      	sub	sp, #12
   1ddea:	4604      	mov	r4, r0
   1ddec:	460d      	mov	r5, r1
	unsigned long tmp;
	char *endptr;

	tmp = strtoul(buf, &endptr, 10);
   1ddee:	220a      	movs	r2, #10
   1ddf0:	a901      	add	r1, sp, #4
   1ddf2:	f00c ff99 	bl	2ad28 <strtoul>
	if ((endptr == buf && tmp == 0) ||
   1ddf6:	9b01      	ldr	r3, [sp, #4]
   1ddf8:	429c      	cmp	r4, r3
   1ddfa:	d008      	beq.n	1de0e <convert_port+0x28>
	    !(*buf != '\0' && *endptr == '\0') ||
   1ddfc:	7822      	ldrb	r2, [r4, #0]
	if ((endptr == buf && tmp == 0) ||
   1ddfe:	b16a      	cbz	r2, 1de1c <convert_port+0x36>
	    !(*buf != '\0' && *endptr == '\0') ||
   1de00:	781b      	ldrb	r3, [r3, #0]
   1de02:	b973      	cbnz	r3, 1de22 <convert_port+0x3c>
	    ((unsigned long)(unsigned short)tmp != tmp)) {
   1de04:	b283      	uxth	r3, r0
	    !(*buf != '\0' && *endptr == '\0') ||
   1de06:	4298      	cmp	r0, r3
   1de08:	d005      	beq.n	1de16 <convert_port+0x30>
		return false;
   1de0a:	2000      	movs	r0, #0
   1de0c:	e007      	b.n	1de1e <convert_port+0x38>
	if ((endptr == buf && tmp == 0) ||
   1de0e:	2800      	cmp	r0, #0
   1de10:	d1f4      	bne.n	1ddfc <convert_port+0x16>
		return false;
   1de12:	2000      	movs	r0, #0
   1de14:	e003      	b.n	1de1e <convert_port+0x38>
	}

	*port = tmp;
   1de16:	802b      	strh	r3, [r5, #0]

	return true;
   1de18:	2001      	movs	r0, #1
   1de1a:	e000      	b.n	1de1e <convert_port+0x38>
		return false;
   1de1c:	2000      	movs	r0, #0
}
   1de1e:	b003      	add	sp, #12
   1de20:	bd30      	pop	{r4, r5, pc}
		return false;
   1de22:	2000      	movs	r0, #0
   1de24:	e7fb      	b.n	1de1e <convert_port+0x38>

0001de26 <net_byte_to_hex>:
{
   1de26:	b430      	push	{r4, r5}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1de28:	090c      	lsrs	r4, r1, #4
   1de2a:	2500      	movs	r5, #0
   1de2c:	e00a      	b.n	1de44 <net_byte_to_hex+0x1e>
		if (i == 0 && !pad && !val) {
   1de2e:	b96b      	cbnz	r3, 1de4c <net_byte_to_hex+0x26>
   1de30:	b12c      	cbz	r4, 1de3e <net_byte_to_hex+0x18>
   1de32:	e00b      	b.n	1de4c <net_byte_to_hex+0x26>
			*ptr++ = (char) (val - 10 + base);
   1de34:	4414      	add	r4, r2
   1de36:	b2e4      	uxtb	r4, r4
   1de38:	3c0a      	subs	r4, #10
   1de3a:	7004      	strb	r4, [r0, #0]
   1de3c:	3001      	adds	r0, #1
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1de3e:	3501      	adds	r5, #1
   1de40:	f001 040f 	and.w	r4, r1, #15
   1de44:	2d01      	cmp	r5, #1
   1de46:	dc07      	bgt.n	1de58 <net_byte_to_hex+0x32>
		if (i == 0 && !pad && !val) {
   1de48:	2d00      	cmp	r5, #0
   1de4a:	d0f0      	beq.n	1de2e <net_byte_to_hex+0x8>
		if (val < 10) {
   1de4c:	2c09      	cmp	r4, #9
   1de4e:	dcf1      	bgt.n	1de34 <net_byte_to_hex+0xe>
			*ptr++ = (char) (val + '0');
   1de50:	3430      	adds	r4, #48	; 0x30
   1de52:	7004      	strb	r4, [r0, #0]
   1de54:	3001      	adds	r0, #1
   1de56:	e7f2      	b.n	1de3e <net_byte_to_hex+0x18>
	*ptr = '\0';
   1de58:	2300      	movs	r3, #0
   1de5a:	7003      	strb	r3, [r0, #0]
}
   1de5c:	bc30      	pop	{r4, r5}
   1de5e:	4770      	bx	lr

0001de60 <net_sprint_ll_addr_buf>:
{
   1de60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1de64:	4607      	mov	r7, r0
   1de66:	460e      	mov	r6, r1
   1de68:	4690      	mov	r8, r2
	switch (ll_len) {
   1de6a:	2906      	cmp	r1, #6
   1de6c:	d002      	beq.n	1de74 <net_sprint_ll_addr_buf+0x14>
   1de6e:	2908      	cmp	r1, #8
   1de70:	d000      	beq.n	1de74 <net_sprint_ll_addr_buf+0x14>
		len = 6;
   1de72:	2606      	movs	r6, #6
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1de74:	b2dd      	uxtb	r5, r3
	char *ptr = buf;
   1de76:	4640      	mov	r0, r8
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1de78:	2400      	movs	r4, #0
   1de7a:	e00c      	b.n	1de96 <net_sprint_ll_addr_buf+0x36>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
   1de7c:	2301      	movs	r3, #1
   1de7e:	2241      	movs	r2, #65	; 0x41
   1de80:	5d39      	ldrb	r1, [r7, r4]
   1de82:	f7ff ffd0 	bl	1de26 <net_byte_to_hex>
   1de86:	4602      	mov	r2, r0
		*ptr++ = ':';
   1de88:	3001      	adds	r0, #1
   1de8a:	233a      	movs	r3, #58	; 0x3a
   1de8c:	7013      	strb	r3, [r2, #0]
		blen -= 3;
   1de8e:	3d03      	subs	r5, #3
   1de90:	b2ed      	uxtb	r5, r5
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1de92:	3401      	adds	r4, #1
   1de94:	b2e4      	uxtb	r4, r4
   1de96:	42b4      	cmp	r4, r6
   1de98:	d201      	bcs.n	1de9e <net_sprint_ll_addr_buf+0x3e>
   1de9a:	2d00      	cmp	r5, #0
   1de9c:	d1ee      	bne.n	1de7c <net_sprint_ll_addr_buf+0x1c>
	if (!(ptr - buf)) {
   1de9e:	4540      	cmp	r0, r8
   1dea0:	d005      	beq.n	1deae <net_sprint_ll_addr_buf+0x4e>
	*(ptr - 1) = '\0';
   1dea2:	2300      	movs	r3, #0
   1dea4:	f800 3c01 	strb.w	r3, [r0, #-1]
	return buf;
   1dea8:	4640      	mov	r0, r8
   1deaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
   1deae:	2000      	movs	r0, #0
}
   1deb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001deb4 <net_addr_ntop>:
{
   1deb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1deb8:	b087      	sub	sp, #28
	unsigned char zeros[8] = { 0 };
   1deba:	2300      	movs	r3, #0
   1debc:	9304      	str	r3, [sp, #16]
   1debe:	9305      	str	r3, [sp, #20]
	if (family == AF_INET6) {
   1dec0:	280a      	cmp	r0, #10
   1dec2:	d011      	beq.n	1dee8 <net_addr_ntop+0x34>
	} else if (family == AF_INET) {
   1dec4:	2802      	cmp	r0, #2
   1dec6:	f040 80c8 	bne.w	1e05a <net_addr_ntop+0x1a6>
		addr = (struct in_addr *)src;
   1deca:	9101      	str	r1, [sp, #4]
		len = 4;
   1decc:	f04f 0804 	mov.w	r8, #4
		delim = '.';
   1ded0:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
	s8_t pos = -1;
   1ded4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1;
   1ded8:	f04f 0a01 	mov.w	sl, #1
   1dedc:	9202      	str	r2, [sp, #8]
   1dede:	9003      	str	r0, [sp, #12]
	char *ptr = dst;
   1dee0:	4616      	mov	r6, r2
	bool needcolon = false;
   1dee2:	2500      	movs	r5, #0
	for (i = 0; i < len; i++) {
   1dee4:	462c      	mov	r4, r5
   1dee6:	e072      	b.n	1dfce <net_addr_ntop+0x11a>
		w = (u16_t *)addr6->s6_addr16;
   1dee8:	460f      	mov	r7, r1
		for (i = 0; i < 8; i++) {
   1deea:	461d      	mov	r5, r3
   1deec:	e001      	b.n	1def2 <net_addr_ntop+0x3e>
   1deee:	3501      	adds	r5, #1
   1def0:	b2ed      	uxtb	r5, r5
   1def2:	2d07      	cmp	r5, #7
   1def4:	d810      	bhi.n	1df18 <net_addr_ntop+0x64>
   1def6:	462b      	mov	r3, r5
			for (j = i; j < 8; j++) {
   1def8:	2b07      	cmp	r3, #7
   1defa:	d8f8      	bhi.n	1deee <net_addr_ntop+0x3a>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1defc:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
   1df00:	2900      	cmp	r1, #0
   1df02:	d1f4      	bne.n	1deee <net_addr_ntop+0x3a>
				zeros[i]++;
   1df04:	a906      	add	r1, sp, #24
   1df06:	194c      	adds	r4, r1, r5
   1df08:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1df0c:	3101      	adds	r1, #1
   1df0e:	f804 1c08 	strb.w	r1, [r4, #-8]
			for (j = i; j < 8; j++) {
   1df12:	3301      	adds	r3, #1
   1df14:	b2db      	uxtb	r3, r3
   1df16:	e7ef      	b.n	1def8 <net_addr_ntop+0x44>
   1df18:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1df1c:	f04f 0a01 	mov.w	sl, #1
   1df20:	2300      	movs	r3, #0
   1df22:	e001      	b.n	1df28 <net_addr_ntop+0x74>
		for (i = 0; i < 8; i++) {
   1df24:	3301      	adds	r3, #1
   1df26:	b2db      	uxtb	r3, r3
   1df28:	2b07      	cmp	r3, #7
   1df2a:	d809      	bhi.n	1df40 <net_addr_ntop+0x8c>
			if (zeros[i] > longest) {
   1df2c:	a906      	add	r1, sp, #24
   1df2e:	4419      	add	r1, r3
   1df30:	f811 1c08 	ldrb.w	r1, [r1, #-8]
   1df34:	458a      	cmp	sl, r1
   1df36:	d2f5      	bcs.n	1df24 <net_addr_ntop+0x70>
				pos = i;
   1df38:	fa4f f983 	sxtb.w	r9, r3
				longest = zeros[i];
   1df3c:	468a      	mov	sl, r1
   1df3e:	e7f1      	b.n	1df24 <net_addr_ntop+0x70>
		if (longest == 1) {
   1df40:	f1ba 0f01 	cmp.w	sl, #1
   1df44:	d004      	beq.n	1df50 <net_addr_ntop+0x9c>
		len = 8;
   1df46:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1df4a:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
   1df4e:	e7c5      	b.n	1dedc <net_addr_ntop+0x28>
		len = 8;
   1df50:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1df54:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
			pos = -1;
   1df58:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1df5c:	e7be      	b.n	1dedc <net_addr_ntop+0x28>
			value = (u32_t)addr->s4_addr[i];
   1df5e:	9a01      	ldr	r2, [sp, #4]
   1df60:	5cd1      	ldrb	r1, [r2, r3]
   1df62:	b28b      	uxth	r3, r1
			if (value == 0) {
   1df64:	b93b      	cbnz	r3, 1df76 <net_addr_ntop+0xc2>
				*ptr++ = '0';
   1df66:	4633      	mov	r3, r6
   1df68:	2230      	movs	r2, #48	; 0x30
   1df6a:	f803 2b02 	strb.w	r2, [r3], #2
				*ptr++ = delim;
   1df6e:	f886 b001 	strb.w	fp, [r6, #1]
   1df72:	461e      	mov	r6, r3
				continue;
   1df74:	e029      	b.n	1dfca <net_addr_ntop+0x116>
			l = net_value_to_udec(ptr, value, 0);
   1df76:	2200      	movs	r2, #0
   1df78:	4630      	mov	r0, r6
   1df7a:	f7ff feef 	bl	1dd5c <net_value_to_udec>
			ptr += l;
   1df7e:	fa56 f080 	uxtab	r0, r6, r0
			*ptr++ = delim;
   1df82:	1c46      	adds	r6, r0, #1
   1df84:	f880 b000 	strb.w	fp, [r0]
			continue;
   1df88:	e01f      	b.n	1dfca <net_addr_ntop+0x116>
			if (needcolon || i == 0) {
   1df8a:	b905      	cbnz	r5, 1df8e <net_addr_ntop+0xda>
   1df8c:	b95c      	cbnz	r4, 1dfa6 <net_addr_ntop+0xf2>
				*ptr++ = ':';
   1df8e:	1c73      	adds	r3, r6, #1
   1df90:	223a      	movs	r2, #58	; 0x3a
   1df92:	7032      	strb	r2, [r6, #0]
			*ptr++ = ':';
   1df94:	1c5e      	adds	r6, r3, #1
   1df96:	223a      	movs	r2, #58	; 0x3a
   1df98:	701a      	strb	r2, [r3, #0]
			i += longest - 1;
   1df9a:	4454      	add	r4, sl
   1df9c:	b2e4      	uxtb	r4, r4
   1df9e:	3c01      	subs	r4, #1
   1dfa0:	b2e4      	uxtb	r4, r4
			needcolon = false;
   1dfa2:	2500      	movs	r5, #0
			continue;
   1dfa4:	e011      	b.n	1dfca <net_addr_ntop+0x116>
   1dfa6:	4633      	mov	r3, r6
   1dfa8:	e7f4      	b.n	1df94 <net_addr_ntop+0xe0>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   1dfaa:	2300      	movs	r3, #0
   1dfac:	2261      	movs	r2, #97	; 0x61
   1dfae:	4630      	mov	r0, r6
   1dfb0:	f7ff ff39 	bl	1de26 <net_byte_to_hex>
   1dfb4:	e002      	b.n	1dfbc <net_addr_ntop+0x108>
					*ptr++ = (char) (bh - 10 + 'a');
   1dfb6:	1c70      	adds	r0, r6, #1
   1dfb8:	3157      	adds	r1, #87	; 0x57
   1dfba:	7031      	strb	r1, [r6, #0]
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1dfbc:	2301      	movs	r3, #1
   1dfbe:	2261      	movs	r2, #97	; 0x61
   1dfc0:	4629      	mov	r1, r5
   1dfc2:	f7ff ff30 	bl	1de26 <net_byte_to_hex>
   1dfc6:	4606      	mov	r6, r0
		needcolon = true;
   1dfc8:	2501      	movs	r5, #1
	for (i = 0; i < len; i++) {
   1dfca:	3401      	adds	r4, #1
   1dfcc:	b2e4      	uxtb	r4, r4
   1dfce:	4623      	mov	r3, r4
   1dfd0:	45a0      	cmp	r8, r4
   1dfd2:	dd31      	ble.n	1e038 <net_addr_ntop+0x184>
		if (len == 4) {
   1dfd4:	f1b8 0f04 	cmp.w	r8, #4
   1dfd8:	d0c1      	beq.n	1df5e <net_addr_ntop+0xaa>
		if (i == pos) {
   1dfda:	454b      	cmp	r3, r9
   1dfdc:	d0d5      	beq.n	1df8a <net_addr_ntop+0xd6>
		if (needcolon) {
   1dfde:	b115      	cbz	r5, 1dfe6 <net_addr_ntop+0x132>
			*ptr++ = ':';
   1dfe0:	233a      	movs	r3, #58	; 0x3a
   1dfe2:	7033      	strb	r3, [r6, #0]
   1dfe4:	3601      	adds	r6, #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   1dfe6:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
   1dfea:	021d      	lsls	r5, r3, #8
   1dfec:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
   1dff0:	b22d      	sxth	r5, r5
		bh = value >> 8;
   1dff2:	f3c5 2107 	ubfx	r1, r5, #8, #8
		bl = value & 0xff;
   1dff6:	b2ed      	uxtb	r5, r5
		if (bh) {
   1dff8:	b139      	cbz	r1, 1e00a <net_addr_ntop+0x156>
			if (bh > 0x0f) {
   1dffa:	290f      	cmp	r1, #15
   1dffc:	d8d5      	bhi.n	1dfaa <net_addr_ntop+0xf6>
				if (bh < 10) {
   1dffe:	2909      	cmp	r1, #9
   1e000:	d8d9      	bhi.n	1dfb6 <net_addr_ntop+0x102>
					*ptr++ = (char)(bh + '0');
   1e002:	1c70      	adds	r0, r6, #1
   1e004:	3130      	adds	r1, #48	; 0x30
   1e006:	7031      	strb	r1, [r6, #0]
   1e008:	e7d8      	b.n	1dfbc <net_addr_ntop+0x108>
		} else if (bl > 0x0f) {
   1e00a:	2d0f      	cmp	r5, #15
   1e00c:	d806      	bhi.n	1e01c <net_addr_ntop+0x168>
			if (bl < 10) {
   1e00e:	2d09      	cmp	r5, #9
   1e010:	d80d      	bhi.n	1e02e <net_addr_ntop+0x17a>
				*ptr++ = (char)(bl + '0');
   1e012:	3530      	adds	r5, #48	; 0x30
   1e014:	7035      	strb	r5, [r6, #0]
   1e016:	3601      	adds	r6, #1
		needcolon = true;
   1e018:	2501      	movs	r5, #1
   1e01a:	e7d6      	b.n	1dfca <net_addr_ntop+0x116>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1e01c:	2300      	movs	r3, #0
   1e01e:	2261      	movs	r2, #97	; 0x61
   1e020:	4629      	mov	r1, r5
   1e022:	4630      	mov	r0, r6
   1e024:	f7ff feff 	bl	1de26 <net_byte_to_hex>
   1e028:	4606      	mov	r6, r0
		needcolon = true;
   1e02a:	2501      	movs	r5, #1
   1e02c:	e7cd      	b.n	1dfca <net_addr_ntop+0x116>
				*ptr++ = (char) (bl - 10 + 'a');
   1e02e:	3557      	adds	r5, #87	; 0x57
   1e030:	7035      	strb	r5, [r6, #0]
   1e032:	3601      	adds	r6, #1
		needcolon = true;
   1e034:	2501      	movs	r5, #1
   1e036:	e7c8      	b.n	1dfca <net_addr_ntop+0x116>
	if (!(ptr - dst)) {
   1e038:	9b02      	ldr	r3, [sp, #8]
   1e03a:	429e      	cmp	r6, r3
   1e03c:	d00f      	beq.n	1e05e <net_addr_ntop+0x1aa>
	if (family == AF_INET) {
   1e03e:	9b03      	ldr	r3, [sp, #12]
   1e040:	2b02      	cmp	r3, #2
   1e042:	d005      	beq.n	1e050 <net_addr_ntop+0x19c>
		*ptr = '\0';
   1e044:	2300      	movs	r3, #0
   1e046:	7033      	strb	r3, [r6, #0]
	return dst;
   1e048:	9802      	ldr	r0, [sp, #8]
}
   1e04a:	b007      	add	sp, #28
   1e04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*(ptr - 1) = '\0';
   1e050:	2300      	movs	r3, #0
   1e052:	f806 3c01 	strb.w	r3, [r6, #-1]
	return dst;
   1e056:	9802      	ldr	r0, [sp, #8]
   1e058:	e7f7      	b.n	1e04a <net_addr_ntop+0x196>
		return NULL;
   1e05a:	2000      	movs	r0, #0
   1e05c:	e7f5      	b.n	1e04a <net_addr_ntop+0x196>
		return NULL;
   1e05e:	2000      	movs	r0, #0
   1e060:	e7f3      	b.n	1e04a <net_addr_ntop+0x196>

0001e062 <net_addr_pton>:
{
   1e062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e066:	b082      	sub	sp, #8
   1e068:	460d      	mov	r5, r1
   1e06a:	4616      	mov	r6, r2
	if (family == AF_INET) {
   1e06c:	2802      	cmp	r0, #2
   1e06e:	d010      	beq.n	1e092 <net_addr_pton+0x30>
	} else if (family == AF_INET6) {
   1e070:	280a      	cmp	r0, #10
   1e072:	f040 80c6 	bne.w	1e202 <net_addr_pton+0x1a0>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1e076:	212e      	movs	r1, #46	; 0x2e
   1e078:	4628      	mov	r0, r5
   1e07a:	f00c f93b 	bl	2a2f4 <strchr>
   1e07e:	b378      	cbz	r0, 1e0e0 <net_addr_pton+0x7e>
   1e080:	2706      	movs	r7, #6
		if (*src == ':') {
   1e082:	782b      	ldrb	r3, [r5, #0]
   1e084:	2b3a      	cmp	r3, #58	; 0x3a
   1e086:	d02d      	beq.n	1e0e4 <net_addr_pton+0x82>
		len = strlen(src);
   1e088:	4628      	mov	r0, r5
   1e08a:	f7e2 fb39 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1e08e:	2300      	movs	r3, #0
   1e090:	e02b      	b.n	1e0ea <net_addr_pton+0x88>
		len = strlen(src);
   1e092:	4608      	mov	r0, r1
   1e094:	f7e2 fb34 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1e098:	2300      	movs	r3, #0
   1e09a:	e000      	b.n	1e09e <net_addr_pton+0x3c>
   1e09c:	3301      	adds	r3, #1
   1e09e:	4283      	cmp	r3, r0
   1e0a0:	d20a      	bcs.n	1e0b8 <net_addr_pton+0x56>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1e0a2:	5ce9      	ldrb	r1, [r5, r3]
   1e0a4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1e0a8:	b2d2      	uxtb	r2, r2
   1e0aa:	2a09      	cmp	r2, #9
   1e0ac:	d9f6      	bls.n	1e09c <net_addr_pton+0x3a>
   1e0ae:	292e      	cmp	r1, #46	; 0x2e
   1e0b0:	d0f4      	beq.n	1e09c <net_addr_pton+0x3a>
				return -EINVAL;
   1e0b2:	f06f 0015 	mvn.w	r0, #21
   1e0b6:	e0a9      	b.n	1e20c <net_addr_pton+0x1aa>
		memset(addr, 0, sizeof(struct in_addr));
   1e0b8:	2204      	movs	r2, #4
   1e0ba:	2100      	movs	r1, #0
   1e0bc:	4630      	mov	r0, r6
   1e0be:	f00c f85f 	bl	2a180 <memset>
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1e0c2:	2400      	movs	r4, #0
   1e0c4:	e008      	b.n	1e0d8 <net_addr_pton+0x76>
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1e0c6:	220a      	movs	r2, #10
   1e0c8:	a901      	add	r1, sp, #4
   1e0ca:	4628      	mov	r0, r5
   1e0cc:	f00c fd72 	bl	2abb4 <strtol>
   1e0d0:	5530      	strb	r0, [r6, r4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1e0d2:	3401      	adds	r4, #1
			src = ++endptr;
   1e0d4:	9d01      	ldr	r5, [sp, #4]
   1e0d6:	3501      	adds	r5, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1e0d8:	2c03      	cmp	r4, #3
   1e0da:	d9f4      	bls.n	1e0c6 <net_addr_pton+0x64>
	return 0;
   1e0dc:	2000      	movs	r0, #0
   1e0de:	e095      	b.n	1e20c <net_addr_pton+0x1aa>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1e0e0:	2708      	movs	r7, #8
   1e0e2:	e7ce      	b.n	1e082 <net_addr_pton+0x20>
			src++;
   1e0e4:	3501      	adds	r5, #1
   1e0e6:	e7cf      	b.n	1e088 <net_addr_pton+0x26>
		for (i = 0; i < len; i++) {
   1e0e8:	3301      	adds	r3, #1
   1e0ea:	4283      	cmp	r3, r0
   1e0ec:	da16      	bge.n	1e11c <net_addr_pton+0xba>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1e0ee:	5ce9      	ldrb	r1, [r5, r3]
   1e0f0:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1e0f4:	b2d2      	uxtb	r2, r2
   1e0f6:	2a09      	cmp	r2, #9
   1e0f8:	d9f6      	bls.n	1e0e8 <net_addr_pton+0x86>
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1e0fa:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   1e0fe:	b2d2      	uxtb	r2, r2
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1e100:	2a05      	cmp	r2, #5
   1e102:	d9f1      	bls.n	1e0e8 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1e104:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   1e108:	b2d2      	uxtb	r2, r2
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1e10a:	2a05      	cmp	r2, #5
   1e10c:	d9ec      	bls.n	1e0e8 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1e10e:	292e      	cmp	r1, #46	; 0x2e
   1e110:	d0ea      	beq.n	1e0e8 <net_addr_pton+0x86>
			    src[i] != '.' && src[i] != ':')
   1e112:	293a      	cmp	r1, #58	; 0x3a
   1e114:	d0e8      	beq.n	1e0e8 <net_addr_pton+0x86>
				return -EINVAL;
   1e116:	f06f 0015 	mvn.w	r0, #21
   1e11a:	e077      	b.n	1e20c <net_addr_pton+0x1aa>
   1e11c:	2400      	movs	r4, #0
   1e11e:	e001      	b.n	1e124 <net_addr_pton+0xc2>
				src++;
   1e120:	3501      	adds	r5, #1
		for (i = 0; i < expected_groups; i++) {
   1e122:	3401      	adds	r4, #1
   1e124:	42bc      	cmp	r4, r7
   1e126:	da3c      	bge.n	1e1a2 <net_addr_pton+0x140>
			if (!src || *src == '\0') {
   1e128:	2d00      	cmp	r5, #0
   1e12a:	d06d      	beq.n	1e208 <net_addr_pton+0x1a6>
   1e12c:	782b      	ldrb	r3, [r5, #0]
   1e12e:	2b00      	cmp	r3, #0
   1e130:	d06f      	beq.n	1e212 <net_addr_pton+0x1b0>
			if (*src != ':') {
   1e132:	2b3a      	cmp	r3, #58	; 0x3a
   1e134:	d023      	beq.n	1e17e <net_addr_pton+0x11c>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1e136:	2210      	movs	r2, #16
   1e138:	2100      	movs	r1, #0
   1e13a:	4628      	mov	r0, r5
   1e13c:	f00c fd3a 	bl	2abb4 <strtol>
   1e140:	f3c0 2807 	ubfx	r8, r0, #8, #8
   1e144:	2210      	movs	r2, #16
   1e146:	2100      	movs	r1, #0
   1e148:	4628      	mov	r0, r5
   1e14a:	f00c fd33 	bl	2abb4 <strtol>
   1e14e:	ea48 2000 	orr.w	r0, r8, r0, lsl #8
   1e152:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
				src = strchr(src, ':');
   1e156:	213a      	movs	r1, #58	; 0x3a
   1e158:	4628      	mov	r0, r5
   1e15a:	f00c f8cb 	bl	2a2f4 <strchr>
				if (!src && i < expected_groups - 1) {
   1e15e:	4605      	mov	r5, r0
   1e160:	2800      	cmp	r0, #0
   1e162:	d1dd      	bne.n	1e120 <net_addr_pton+0xbe>
   1e164:	1e7b      	subs	r3, r7, #1
   1e166:	429c      	cmp	r4, r3
   1e168:	dada      	bge.n	1e120 <net_addr_pton+0xbe>
					return -EINVAL;
   1e16a:	f06f 0015 	mvn.w	r0, #21
   1e16e:	e04d      	b.n	1e20c <net_addr_pton+0x1aa>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1e170:	eb06 0244 	add.w	r2, r6, r4, lsl #1
   1e174:	2300      	movs	r3, #0
   1e176:	f806 3014 	strb.w	r3, [r6, r4, lsl #1]
   1e17a:	7053      	strb	r3, [r2, #1]
			for (; i < expected_groups; i++) {
   1e17c:	3401      	adds	r4, #1
   1e17e:	42bc      	cmp	r4, r7
   1e180:	dbf6      	blt.n	1e170 <net_addr_pton+0x10e>
			tmp = strrchr(src, ':');
   1e182:	213a      	movs	r1, #58	; 0x3a
   1e184:	4628      	mov	r0, r5
   1e186:	f00c fa0b 	bl	2a5a0 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1e18a:	4285      	cmp	r5, r0
   1e18c:	d003      	beq.n	1e196 <net_addr_pton+0x134>
			if (expected_groups == 6) {
   1e18e:	2f06      	cmp	r7, #6
   1e190:	d00b      	beq.n	1e1aa <net_addr_pton+0x148>
			i = expected_groups - 1;
   1e192:	1e7c      	subs	r4, r7, #1
   1e194:	e00f      	b.n	1e1b6 <net_addr_pton+0x154>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1e196:	2f06      	cmp	r7, #6
   1e198:	d002      	beq.n	1e1a0 <net_addr_pton+0x13e>
   1e19a:	786b      	ldrb	r3, [r5, #1]
   1e19c:	2b00      	cmp	r3, #0
   1e19e:	d1f6      	bne.n	1e18e <net_addr_pton+0x12c>
				src++;
   1e1a0:	3501      	adds	r5, #1
		if (expected_groups == 6) {
   1e1a2:	2f06      	cmp	r7, #6
   1e1a4:	d029      	beq.n	1e1fa <net_addr_pton+0x198>
	return 0;
   1e1a6:	2000      	movs	r0, #0
   1e1a8:	e030      	b.n	1e20c <net_addr_pton+0x1aa>
				tmp--;
   1e1aa:	3801      	subs	r0, #1
   1e1ac:	e7f1      	b.n	1e192 <net_addr_pton+0x130>
			} while (tmp-- != src);
   1e1ae:	1e43      	subs	r3, r0, #1
   1e1b0:	4285      	cmp	r5, r0
   1e1b2:	d005      	beq.n	1e1c0 <net_addr_pton+0x15e>
   1e1b4:	4618      	mov	r0, r3
				if (*tmp == ':') {
   1e1b6:	7803      	ldrb	r3, [r0, #0]
   1e1b8:	2b3a      	cmp	r3, #58	; 0x3a
   1e1ba:	d1f8      	bne.n	1e1ae <net_addr_pton+0x14c>
					i--;
   1e1bc:	3c01      	subs	r4, #1
   1e1be:	e7f6      	b.n	1e1ae <net_addr_pton+0x14c>
			src++;
   1e1c0:	3501      	adds	r5, #1
   1e1c2:	e7ae      	b.n	1e122 <net_addr_pton+0xc0>
				src++;
   1e1c4:	3501      	adds	r5, #1
			for (i = 0; i < 4; i++) {
   1e1c6:	3401      	adds	r4, #1
   1e1c8:	2c03      	cmp	r4, #3
   1e1ca:	dc18      	bgt.n	1e1fe <net_addr_pton+0x19c>
				if (!src || !*src) {
   1e1cc:	b325      	cbz	r5, 1e218 <net_addr_pton+0x1b6>
   1e1ce:	782b      	ldrb	r3, [r5, #0]
   1e1d0:	b32b      	cbz	r3, 1e21e <net_addr_pton+0x1bc>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1e1d2:	f104 070c 	add.w	r7, r4, #12
   1e1d6:	220a      	movs	r2, #10
   1e1d8:	2100      	movs	r1, #0
   1e1da:	4628      	mov	r0, r5
   1e1dc:	f00c fcea 	bl	2abb4 <strtol>
   1e1e0:	55f0      	strb	r0, [r6, r7]
				src = strchr(src, '.');
   1e1e2:	212e      	movs	r1, #46	; 0x2e
   1e1e4:	4628      	mov	r0, r5
   1e1e6:	f00c f885 	bl	2a2f4 <strchr>
				if (!src && i < 3) {
   1e1ea:	4605      	mov	r5, r0
   1e1ec:	2800      	cmp	r0, #0
   1e1ee:	d1e9      	bne.n	1e1c4 <net_addr_pton+0x162>
   1e1f0:	2c02      	cmp	r4, #2
   1e1f2:	dce7      	bgt.n	1e1c4 <net_addr_pton+0x162>
					return -EINVAL;
   1e1f4:	f06f 0015 	mvn.w	r0, #21
   1e1f8:	e008      	b.n	1e20c <net_addr_pton+0x1aa>
   1e1fa:	2400      	movs	r4, #0
   1e1fc:	e7e4      	b.n	1e1c8 <net_addr_pton+0x166>
	return 0;
   1e1fe:	2000      	movs	r0, #0
   1e200:	e004      	b.n	1e20c <net_addr_pton+0x1aa>
		return -EINVAL;
   1e202:	f06f 0015 	mvn.w	r0, #21
   1e206:	e001      	b.n	1e20c <net_addr_pton+0x1aa>
				return -EINVAL;
   1e208:	f06f 0015 	mvn.w	r0, #21
}
   1e20c:	b002      	add	sp, #8
   1e20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return -EINVAL;
   1e212:	f06f 0015 	mvn.w	r0, #21
   1e216:	e7f9      	b.n	1e20c <net_addr_pton+0x1aa>
					return -EINVAL;
   1e218:	f06f 0015 	mvn.w	r0, #21
   1e21c:	e7f6      	b.n	1e20c <net_addr_pton+0x1aa>
   1e21e:	f06f 0015 	mvn.w	r0, #21
   1e222:	e7f3      	b.n	1e20c <net_addr_pton+0x1aa>

0001e224 <parse_ipv6>:
#endif /* CONFIG_NET_IPV6 || CONFIG_NET_IPV4 */

#if defined(CONFIG_NET_IPV6)
static bool parse_ipv6(const char *str, size_t str_len,
		       struct sockaddr *addr, bool has_port)
{
   1e224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e228:	b08f      	sub	sp, #60	; 0x3c
   1e22a:	4605      	mov	r5, r0
   1e22c:	4688      	mov	r8, r1
   1e22e:	4617      	mov	r7, r2
   1e230:	461e      	mov	r6, r3
	struct in6_addr *addr6;
	char ipaddr[INET6_ADDRSTRLEN + 1];
	int end, len, ret, i;
	u16_t port;

	len = min(INET6_ADDRSTRLEN, str_len);
   1e232:	460c      	mov	r4, r1
   1e234:	292e      	cmp	r1, #46	; 0x2e
   1e236:	bf28      	it	cs
   1e238:	242e      	movcs	r4, #46	; 0x2e

	for (i = 0; i < len; i++) {
   1e23a:	2300      	movs	r3, #0
   1e23c:	42a3      	cmp	r3, r4
   1e23e:	da04      	bge.n	1e24a <parse_ipv6+0x26>
		if (!str[i]) {
   1e240:	5cea      	ldrb	r2, [r5, r3]
   1e242:	b10a      	cbz	r2, 1e248 <parse_ipv6+0x24>
	for (i = 0; i < len; i++) {
   1e244:	3301      	adds	r3, #1
   1e246:	e7f9      	b.n	1e23c <parse_ipv6+0x18>
			len = i;
   1e248:	461c      	mov	r4, r3
			break;
		}
	}

	if (has_port) {
   1e24a:	b18e      	cbz	r6, 1e270 <parse_ipv6+0x4c>
		/* IPv6 address with port number */
		ptr = memchr(str, ']', len);
   1e24c:	4622      	mov	r2, r4
   1e24e:	215d      	movs	r1, #93	; 0x5d
   1e250:	4628      	mov	r0, r5
   1e252:	f7e1 ffe5 	bl	220 <memchr>
		if (!ptr) {
   1e256:	4681      	mov	r9, r0
   1e258:	2800      	cmp	r0, #0
   1e25a:	d043      	beq.n	1e2e4 <parse_ipv6+0xc0>
			return false;
		}

		end = min(len, ptr - (str + 1));
   1e25c:	1c69      	adds	r1, r5, #1
   1e25e:	1a43      	subs	r3, r0, r1
   1e260:	429c      	cmp	r4, r3
   1e262:	bfa8      	it	ge
   1e264:	461c      	movge	r4, r3
		memcpy(ipaddr, str + 1, end);
   1e266:	4622      	mov	r2, r4
   1e268:	a802      	add	r0, sp, #8
   1e26a:	f7e2 f829 	bl	2c0 <memcpy>
   1e26e:	e006      	b.n	1e27e <parse_ipv6+0x5a>
	} else {
		end = len;
		memcpy(ipaddr, str, end);
   1e270:	4622      	mov	r2, r4
   1e272:	4629      	mov	r1, r5
   1e274:	a802      	add	r0, sp, #8
   1e276:	f7e2 f823 	bl	2c0 <memcpy>
	char *ptr = NULL;
   1e27a:	f04f 0900 	mov.w	r9, #0
	}

	ipaddr[end] = '\0';
   1e27e:	2200      	movs	r2, #0
   1e280:	ab0e      	add	r3, sp, #56	; 0x38
   1e282:	4423      	add	r3, r4
   1e284:	f803 2c30 	strb.w	r2, [r3, #-48]

	addr6 = &net_sin6(addr)->sin6_addr;

	ret = net_addr_pton(AF_INET6, ipaddr, addr6);
   1e288:	1d3a      	adds	r2, r7, #4
   1e28a:	a902      	add	r1, sp, #8
   1e28c:	200a      	movs	r0, #10
   1e28e:	f7ff fee8 	bl	1e062 <net_addr_pton>
	if (ret < 0) {
   1e292:	2800      	cmp	r0, #0
   1e294:	db28      	blt.n	1e2e8 <parse_ipv6+0xc4>
		return false;
	}

	net_sin6(addr)->sin6_family = AF_INET6;
   1e296:	230a      	movs	r3, #10
   1e298:	803b      	strh	r3, [r7, #0]

	if (!has_port) {
   1e29a:	b33e      	cbz	r6, 1e2ec <parse_ipv6+0xc8>
		return true;
	}

	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
   1e29c:	f109 0301 	add.w	r3, r9, #1
   1e2a0:	4445      	add	r5, r8
   1e2a2:	42ab      	cmp	r3, r5
   1e2a4:	d223      	bcs.n	1e2ee <parse_ipv6+0xca>
   1e2a6:	f899 3001 	ldrb.w	r3, [r9, #1]
   1e2aa:	2b3a      	cmp	r3, #58	; 0x3a
   1e2ac:	d11f      	bne.n	1e2ee <parse_ipv6+0xca>
		len = str_len - end;
   1e2ae:	eba8 0404 	sub.w	r4, r8, r4

		/* Re-use the ipaddr buf for port conversion */
		memcpy(ipaddr, ptr + 2, len);
   1e2b2:	4622      	mov	r2, r4
   1e2b4:	f109 0102 	add.w	r1, r9, #2
   1e2b8:	a802      	add	r0, sp, #8
   1e2ba:	f7e2 f801 	bl	2c0 <memcpy>
		ipaddr[len] = '\0';
   1e2be:	ab0e      	add	r3, sp, #56	; 0x38
   1e2c0:	441c      	add	r4, r3
   1e2c2:	2300      	movs	r3, #0
   1e2c4:	f804 3c30 	strb.w	r3, [r4, #-48]

		ret = convert_port(ipaddr, &port);
   1e2c8:	f10d 0106 	add.w	r1, sp, #6
   1e2cc:	a802      	add	r0, sp, #8
   1e2ce:	f7ff fd8a 	bl	1dde6 <convert_port>
		if (!ret) {
   1e2d2:	4606      	mov	r6, r0
   1e2d4:	b158      	cbz	r0, 1e2ee <parse_ipv6+0xca>
			return false;
		}

		net_sin6(addr)->sin6_port = htons(port);
   1e2d6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1e2da:	0a13      	lsrs	r3, r2, #8
   1e2dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e2e0:	807b      	strh	r3, [r7, #2]
   1e2e2:	e004      	b.n	1e2ee <parse_ipv6+0xca>
			return false;
   1e2e4:	2600      	movs	r6, #0
   1e2e6:	e002      	b.n	1e2ee <parse_ipv6+0xca>
		return false;
   1e2e8:	2600      	movs	r6, #0
   1e2ea:	e000      	b.n	1e2ee <parse_ipv6+0xca>
		return true;
   1e2ec:	2601      	movs	r6, #1
			net_addr_ntop(AF_INET6, addr6,
				      ipaddr, sizeof(ipaddr) - 1));
	}

	return true;
}
   1e2ee:	4630      	mov	r0, r6
   1e2f0:	b00f      	add	sp, #60	; 0x3c
   1e2f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001e2f6 <net_calc_chksum>:
	return pkt->family;
   1e2f6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1e2fa:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1e2fe:	2b0a      	cmp	r3, #10
   1e300:	d001      	beq.n	1e306 <net_calc_chksum+0x10>
		return 0;
   1e302:	2000      	movs	r0, #0
   1e304:	4770      	bx	lr
{
   1e306:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e308:	b085      	sub	sp, #20
   1e30a:	4604      	mov	r4, r0
	return pkt->frags->data;
   1e30c:	6885      	ldr	r5, [r0, #8]
   1e30e:	68a8      	ldr	r0, [r5, #8]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1e310:	7902      	ldrb	r2, [r0, #4]
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1e312:	7943      	ldrb	r3, [r0, #5]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1e314:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1e318:	b29b      	uxth	r3, r3
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1e31a:	f894 703b 	ldrb.w	r7, [r4, #59]	; 0x3b
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1e31e:	1bdb      	subs	r3, r3, r7
		sum = calc_chksum(upper_layer_len + proto,
   1e320:	fa11 f383 	uxtah	r3, r1, r3
   1e324:	2220      	movs	r2, #32
   1e326:	f100 0108 	add.w	r1, r0, #8
   1e32a:	b298      	uxth	r0, r3
   1e32c:	f7ff fd3c 	bl	1dda8 <calc_chksum>
   1e330:	4606      	mov	r6, r0
	u16_t proto_len = net_pkt_ip_hdr_len(pkt) +
   1e332:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
	return net_frag_read(frag, offset, pos, len, NULL);
   1e336:	2300      	movs	r3, #0
   1e338:	9300      	str	r3, [sp, #0]
   1e33a:	f10d 020e 	add.w	r2, sp, #14
   1e33e:	4439      	add	r1, r7
   1e340:	4628      	mov	r0, r5
   1e342:	f7ff faec 	bl	1d91e <net_frag_read>
	if (!frag) {
   1e346:	4605      	mov	r5, r0
   1e348:	b318      	cbz	r0, 1e392 <net_calc_chksum+0x9c>
	ptr = frag->data + offset;
   1e34a:	6881      	ldr	r1, [r0, #8]
   1e34c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e350:	4419      	add	r1, r3
	len = frag->len - offset;
   1e352:	8984      	ldrh	r4, [r0, #12]
   1e354:	1ae4      	subs	r4, r4, r3
   1e356:	b224      	sxth	r4, r4
   1e358:	e003      	b.n	1e362 <net_calc_chksum+0x6c>
			len = frag->len - 1;
   1e35a:	89ac      	ldrh	r4, [r5, #12]
   1e35c:	3c01      	subs	r4, #1
   1e35e:	b224      	sxth	r4, r4
			ptr++;
   1e360:	3101      	adds	r1, #1
	while (frag) {
   1e362:	b1bd      	cbz	r5, 1e394 <net_calc_chksum+0x9e>
		sum = calc_chksum(sum, ptr, len);
   1e364:	b2a4      	uxth	r4, r4
   1e366:	4622      	mov	r2, r4
   1e368:	4630      	mov	r0, r6
   1e36a:	f7ff fd1d 	bl	1dda8 <calc_chksum>
   1e36e:	4606      	mov	r6, r0
		frag = frag->frags;
   1e370:	682d      	ldr	r5, [r5, #0]
		if (!frag) {
   1e372:	b17d      	cbz	r5, 1e394 <net_calc_chksum+0x9e>
		ptr = frag->data;
   1e374:	68a9      	ldr	r1, [r5, #8]
		if (len % 2) {
   1e376:	f014 0f01 	tst.w	r4, #1
   1e37a:	d007      	beq.n	1e38c <net_calc_chksum+0x96>
			u16_t tmp = *ptr;
   1e37c:	780b      	ldrb	r3, [r1, #0]
			sum += tmp;
   1e37e:	441e      	add	r6, r3
   1e380:	b2b6      	uxth	r6, r6
			if (sum < tmp) {
   1e382:	42b3      	cmp	r3, r6
   1e384:	d9e9      	bls.n	1e35a <net_calc_chksum+0x64>
				sum++;
   1e386:	3601      	adds	r6, #1
   1e388:	b2b6      	uxth	r6, r6
   1e38a:	e7e6      	b.n	1e35a <net_calc_chksum+0x64>
			len = frag->len;
   1e38c:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
   1e390:	e7e7      	b.n	1e362 <net_calc_chksum+0x6c>
		return 0;
   1e392:	2600      	movs	r6, #0
	sum = (sum == 0) ? 0xffff : htons(sum);
   1e394:	b91e      	cbnz	r6, 1e39e <net_calc_chksum+0xa8>
   1e396:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   1e39a:	b005      	add	sp, #20
   1e39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sum = (sum == 0) ? 0xffff : htons(sum);
   1e39e:	0a30      	lsrs	r0, r6, #8
   1e3a0:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   1e3a4:	b280      	uxth	r0, r0
   1e3a6:	e7f8      	b.n	1e39a <net_calc_chksum+0xa4>

0001e3a8 <net_header_fits>:
	if (hdr && hdr > pkt->frags->data &&
   1e3a8:	460b      	mov	r3, r1
   1e3aa:	b151      	cbz	r1, 1e3c2 <net_header_fits+0x1a>
   1e3ac:	6880      	ldr	r0, [r0, #8]
   1e3ae:	6881      	ldr	r1, [r0, #8]
   1e3b0:	428b      	cmp	r3, r1
   1e3b2:	d908      	bls.n	1e3c6 <net_header_fits+0x1e>
	    (hdr + hdr_size) <= (pkt->frags->data + pkt->frags->len)) {
   1e3b4:	4413      	add	r3, r2
   1e3b6:	8982      	ldrh	r2, [r0, #12]
   1e3b8:	4411      	add	r1, r2
	if (hdr && hdr > pkt->frags->data &&
   1e3ba:	428b      	cmp	r3, r1
   1e3bc:	d905      	bls.n	1e3ca <net_header_fits+0x22>
	return false;
   1e3be:	2000      	movs	r0, #0
   1e3c0:	4770      	bx	lr
   1e3c2:	2000      	movs	r0, #0
   1e3c4:	4770      	bx	lr
   1e3c6:	2000      	movs	r0, #0
   1e3c8:	4770      	bx	lr
		return true;
   1e3ca:	2001      	movs	r0, #1
}
   1e3cc:	4770      	bx	lr

0001e3ce <net_ipaddr_parse>:

bool net_ipaddr_parse(const char *str, size_t str_len, struct sockaddr *addr)
{
	int i, count;

	if (!str || str_len == 0) {
   1e3ce:	b1d8      	cbz	r0, 1e408 <net_ipaddr_parse+0x3a>
{
   1e3d0:	b538      	push	{r3, r4, r5, lr}
	if (!str || str_len == 0) {
   1e3d2:	b1d9      	cbz	r1, 1e40c <net_ipaddr_parse+0x3e>
		return false;
	}

	/* We cannot accept empty string here */
	if (*str == '\0') {
   1e3d4:	7804      	ldrb	r4, [r0, #0]
   1e3d6:	b1dc      	cbz	r4, 1e410 <net_ipaddr_parse+0x42>
		return false;
	}

	if (*str == '[') {
   1e3d8:	2c5b      	cmp	r4, #91	; 0x5b
   1e3da:	d002      	beq.n	1e3e2 <net_ipaddr_parse+0x14>
   1e3dc:	2500      	movs	r5, #0
   1e3de:	462b      	mov	r3, r5
   1e3e0:	e004      	b.n	1e3ec <net_ipaddr_parse+0x1e>
#if defined(CONFIG_NET_IPV6)
		return parse_ipv6(str, str_len, addr, true);
   1e3e2:	2301      	movs	r3, #1
   1e3e4:	f7ff ff1e 	bl	1e224 <parse_ipv6>
   1e3e8:	bd38      	pop	{r3, r4, r5, pc}
#else
		return false;
#endif /* CONFIG_NET_IPV6 */
	}

	for (count = i = 0; str[i] && i < str_len; i++) {
   1e3ea:	3301      	adds	r3, #1
   1e3ec:	5cc4      	ldrb	r4, [r0, r3]
   1e3ee:	b12c      	cbz	r4, 1e3fc <net_ipaddr_parse+0x2e>
   1e3f0:	4299      	cmp	r1, r3
   1e3f2:	d903      	bls.n	1e3fc <net_ipaddr_parse+0x2e>
		if (str[i] == ':') {
   1e3f4:	2c3a      	cmp	r4, #58	; 0x3a
   1e3f6:	d1f8      	bne.n	1e3ea <net_ipaddr_parse+0x1c>
			count++;
   1e3f8:	3501      	adds	r5, #1
   1e3fa:	e7f6      	b.n	1e3ea <net_ipaddr_parse+0x1c>
		}
	}

	if (count == 1) {
   1e3fc:	2d01      	cmp	r5, #1
   1e3fe:	d009      	beq.n	1e414 <net_ipaddr_parse+0x46>
#if defined(CONFIG_NET_IPV4) && !defined(CONFIG_NET_IPV6)
	return parse_ipv4(str, str_len, addr, false);
#endif

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	return parse_ipv6(str, str_len, addr, false);
   1e400:	2300      	movs	r3, #0
   1e402:	f7ff ff0f 	bl	1e224 <parse_ipv6>
   1e406:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1e408:	2000      	movs	r0, #0
   1e40a:	4770      	bx	lr
   1e40c:	2000      	movs	r0, #0
   1e40e:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1e410:	2000      	movs	r0, #0
   1e412:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1e414:	2000      	movs	r0, #0
#endif
}
   1e416:	bd38      	pop	{r3, r4, r5, pc}

0001e418 <net_bt_reserve>:
{
	ARG_UNUSED(iface);
	ARG_UNUSED(unused);

	return 0;
}
   1e418:	2000      	movs	r0, #0
   1e41a:	4770      	bx	lr

0001e41c <net_bt_enable>:
	return iface->dev;
   1e41c:	6803      	ldr	r3, [r0, #0]

static int net_bt_enable(struct net_if *iface, bool state)
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e41e:	689b      	ldr	r3, [r3, #8]

	NET_DBG("iface %p %s", iface, state ? "up" : "down");

	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   1e420:	b129      	cbz	r1, 1e42e <net_bt_enable+0x12>
   1e422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1e426:	2b03      	cmp	r3, #3
   1e428:	d103      	bne.n	1e432 <net_bt_enable+0x16>
		return -ENETDOWN;
	}

	return 0;
   1e42a:	2000      	movs	r0, #0
   1e42c:	4770      	bx	lr
   1e42e:	2000      	movs	r0, #0
   1e430:	4770      	bx	lr
		return -ENETDOWN;
   1e432:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1e436:	4770      	bx	lr

0001e438 <ipsp_accept>:

static int ipsp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
	NET_DBG("Incoming conn %p", conn);

	if (bt_context_data.ipsp_chan.chan.conn) {
   1e438:	4b04      	ldr	r3, [pc, #16]	; (1e44c <ipsp_accept+0x14>)
   1e43a:	685b      	ldr	r3, [r3, #4]
   1e43c:	b91b      	cbnz	r3, 1e446 <ipsp_accept+0xe>
		NET_ERR("No channels available");
		return -ENOMEM;
	}

	*chan = &bt_context_data.ipsp_chan.chan;
   1e43e:	4b04      	ldr	r3, [pc, #16]	; (1e450 <ipsp_accept+0x18>)
   1e440:	600b      	str	r3, [r1, #0]

	return 0;
   1e442:	2000      	movs	r0, #0
   1e444:	4770      	bx	lr
		return -ENOMEM;
   1e446:	f06f 000b 	mvn.w	r0, #11
}
   1e44a:	4770      	bx	lr
   1e44c:	2000be30 	.word	0x2000be30
   1e450:	2000be34 	.word	0x2000be34

0001e454 <net_bt_send>:
{
   1e454:	b538      	push	{r3, r4, r5, lr}
   1e456:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e458:	689d      	ldr	r5, [r3, #8]
	return pkt->family;
   1e45a:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1e45e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) != AF_INET6) {
   1e462:	2b0a      	cmp	r3, #10
   1e464:	d001      	beq.n	1e46a <net_bt_send+0x16>
		return NET_DROP;
   1e466:	2002      	movs	r0, #2
   1e468:	bd38      	pop	{r3, r4, r5, pc}
   1e46a:	460c      	mov	r4, r1
	if (!net_6lo_compress(pkt, true, NULL)) {
   1e46c:	2200      	movs	r2, #0
   1e46e:	2101      	movs	r1, #1
   1e470:	4620      	mov	r0, r4
   1e472:	f003 fe95 	bl	221a0 <net_6lo_compress>
   1e476:	b908      	cbnz	r0, 1e47c <net_bt_send+0x28>
		return NET_DROP;
   1e478:	2002      	movs	r0, #2
}
   1e47a:	bd38      	pop	{r3, r4, r5, pc}
	net_if_queue_tx(ctxt->iface, pkt);
   1e47c:	6828      	ldr	r0, [r5, #0]
	k_fifo_put(&iface->tx_queue, pkt);
   1e47e:	4621      	mov	r1, r4
   1e480:	3018      	adds	r0, #24
   1e482:	f00a fb13 	bl	28aac <k_queue_append>
	return NET_OK;
   1e486:	2000      	movs	r0, #0
   1e488:	bd38      	pop	{r3, r4, r5, pc}

0001e48a <net_bt_recv>:
{
   1e48a:	b508      	push	{r3, lr}
	if (!net_6lo_uncompress(pkt)) {
   1e48c:	4608      	mov	r0, r1
   1e48e:	f004 fad4 	bl	22a3a <net_6lo_uncompress>
   1e492:	b908      	cbnz	r0, 1e498 <net_bt_recv+0xe>
		return NET_DROP;
   1e494:	2002      	movs	r0, #2
   1e496:	bd08      	pop	{r3, pc}
	return NET_CONTINUE;
   1e498:	2001      	movs	r0, #1
}
   1e49a:	bd08      	pop	{r3, pc}

0001e49c <connected>:
	return bt_l2cap_chan_disconnect(&ctxt->ipsp_chan.chan);
}

static void connected(struct bt_conn *conn, u8_t err)
{
	if (err) {
   1e49c:	b951      	cbnz	r1, 1e4b4 <connected+0x18>
{
   1e49e:	b508      	push	{r3, lr}
		NET_ERR("Failed to connect to %s (%u)\n", addr, err);
#endif
		return;
	}

	if (conn != default_conn) {
   1e4a0:	4b05      	ldr	r3, [pc, #20]	; (1e4b8 <connected+0x1c>)
   1e4a2:	681b      	ldr	r3, [r3, #0]
   1e4a4:	4283      	cmp	r3, r0
   1e4a6:	d000      	beq.n	1e4aa <connected+0xe>
   1e4a8:	bd08      	pop	{r3, pc}
		return;
	}

	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
   1e4aa:	2223      	movs	r2, #35	; 0x23
   1e4ac:	4903      	ldr	r1, [pc, #12]	; (1e4bc <connected+0x20>)
   1e4ae:	f7ea f905 	bl	86bc <bt_l2cap_chan_connect>
   1e4b2:	e7f9      	b.n	1e4a8 <connected+0xc>
   1e4b4:	4770      	bx	lr
   1e4b6:	bf00      	nop
   1e4b8:	20001f78 	.word	0x20001f78
   1e4bc:	2000be34 	.word	0x2000be34

0001e4c0 <ipsp_recv>:
{
   1e4c0:	b570      	push	{r4, r5, r6, lr}
   1e4c2:	4605      	mov	r5, r0
   1e4c4:	460e      	mov	r6, r1
	pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1e4c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e4ca:	2000      	movs	r0, #0
   1e4cc:	f7ff f82e 	bl	1d52c <net_pkt_get_reserve_rx>
   1e4d0:	4604      	mov	r4, r0
	net_pkt_ll_dst(pkt)->addr = ctxt->src.val;
   1e4d2:	f105 039c 	add.w	r3, r5, #156	; 0x9c
   1e4d6:	6283      	str	r3, [r0, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = sizeof(ctxt->src);
   1e4d8:	2206      	movs	r2, #6
   1e4da:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   1e4de:	2302      	movs	r3, #2
   1e4e0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	net_pkt_ll_src(pkt)->addr = ctxt->dst.val;
   1e4e4:	f105 01a2 	add.w	r1, r5, #162	; 0xa2
   1e4e8:	6201      	str	r1, [r0, #32]
	net_pkt_ll_src(pkt)->len = sizeof(ctxt->dst);
   1e4ea:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
	net_pkt_ll_src(pkt)->type = NET_LINK_BLUETOOTH;
   1e4ee:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	net_pkt_frag_add(pkt, net_buf_ref(buf));
   1e4f2:	4630      	mov	r0, r6
   1e4f4:	f7fc fb42 	bl	1ab7c <net_buf_ref>
   1e4f8:	4601      	mov	r1, r0
   1e4fa:	4620      	mov	r0, r4
   1e4fc:	f7ff f8bb 	bl	1d676 <net_pkt_frag_add>
	if (net_recv_data(ctxt->iface, pkt) < 0) {
   1e500:	4621      	mov	r1, r4
   1e502:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1e506:	f7fc fd55 	bl	1afb4 <net_recv_data>
   1e50a:	2800      	cmp	r0, #0
   1e50c:	db00      	blt.n	1e510 <ipsp_recv+0x50>
   1e50e:	bd70      	pop	{r4, r5, r6, pc}
		net_pkt_unref(pkt);
   1e510:	4620      	mov	r0, r4
   1e512:	f7ff f886 	bl	1d622 <net_pkt_unref>
}
   1e516:	e7fa      	b.n	1e50e <ipsp_recv+0x4e>

0001e518 <ipsp_alloc_buf>:
{
   1e518:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_rx_data(0, K_FOREVER);
   1e51a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e51e:	2000      	movs	r0, #0
   1e520:	f7ff f818 	bl	1d554 <net_pkt_get_reserve_rx_data>
}
   1e524:	bd08      	pop	{r3, pc}
	...

0001e528 <ipsp_disconnected>:
{
   1e528:	b510      	push	{r4, lr}
   1e52a:	4604      	mov	r4, r0
	net_if_down(ctxt->iface);
   1e52c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1e530:	f7fd fe92 	bl	1c258 <net_if_down>
	if (chan->conn != default_conn) {
   1e534:	6823      	ldr	r3, [r4, #0]
   1e536:	4a05      	ldr	r2, [pc, #20]	; (1e54c <ipsp_disconnected+0x24>)
   1e538:	6810      	ldr	r0, [r2, #0]
   1e53a:	4283      	cmp	r3, r0
   1e53c:	d000      	beq.n	1e540 <ipsp_disconnected+0x18>
   1e53e:	bd10      	pop	{r4, pc}
	bt_conn_unref(default_conn);
   1e540:	f7e8 fe28 	bl	7194 <bt_conn_unref>
	default_conn = NULL;
   1e544:	2200      	movs	r2, #0
   1e546:	4b01      	ldr	r3, [pc, #4]	; (1e54c <ipsp_disconnected+0x24>)
   1e548:	601a      	str	r2, [r3, #0]
   1e54a:	e7f8      	b.n	1e53e <ipsp_disconnected+0x16>
   1e54c:	20001f78 	.word	0x20001f78

0001e550 <disconnected>:
			      L2CAP_IPSP_PSM);
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
   1e550:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_L2_BT)
	char addr[BT_ADDR_LE_STR_LEN];
#endif

	if (conn != default_conn) {
   1e552:	4b06      	ldr	r3, [pc, #24]	; (1e56c <disconnected+0x1c>)
   1e554:	681b      	ldr	r3, [r3, #0]
   1e556:	4283      	cmp	r3, r0
   1e558:	d000      	beq.n	1e55c <disconnected+0xc>
   1e55a:	bd08      	pop	{r3, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

	NET_DBG("Disconnected: %s (reason %u)\n", addr, reason);
#endif

	bt_conn_unref(default_conn);
   1e55c:	4618      	mov	r0, r3
   1e55e:	f7e8 fe19 	bl	7194 <bt_conn_unref>
	default_conn = NULL;
   1e562:	2200      	movs	r2, #0
   1e564:	4b01      	ldr	r3, [pc, #4]	; (1e56c <disconnected+0x1c>)
   1e566:	601a      	str	r2, [r3, #0]
   1e568:	e7f7      	b.n	1e55a <disconnected+0xa>
   1e56a:	bf00      	nop
   1e56c:	20001f78 	.word	0x20001f78

0001e570 <ipsp_connected>:
{
   1e570:	b570      	push	{r4, r5, r6, lr}
   1e572:	b08e      	sub	sp, #56	; 0x38
   1e574:	4604      	mov	r4, r0
	if (bt_conn_get_info(chan->conn, &info) < 0) {
   1e576:	a909      	add	r1, sp, #36	; 0x24
   1e578:	6800      	ldr	r0, [r0, #0]
   1e57a:	f7e8 ff41 	bl	7400 <bt_conn_get_info>
   1e57e:	2800      	cmp	r0, #0
   1e580:	db06      	blt.n	1e590 <ipsp_connected+0x20>
	sys_memcpy_swap(ctxt->src.val, info.le.src->a.val, sizeof(ctxt->src));
   1e582:	f104 069c 	add.w	r6, r4, #156	; 0x9c
   1e586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	src += length - 1;
   1e588:	3306      	adds	r3, #6
   1e58a:	4631      	mov	r1, r6
   1e58c:	2206      	movs	r2, #6
   1e58e:	e008      	b.n	1e5a2 <ipsp_connected+0x32>
		bt_l2cap_chan_disconnect(chan);
   1e590:	4620      	mov	r0, r4
   1e592:	f7ea f8b2 	bl	86fa <bt_l2cap_chan_disconnect>
   1e596:	e05a      	b.n	1e64e <ipsp_connected+0xde>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e598:	7818      	ldrb	r0, [r3, #0]
   1e59a:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   1e59c:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e59e:	3b01      	subs	r3, #1
   1e5a0:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   1e5a2:	2a00      	cmp	r2, #0
   1e5a4:	d1f8      	bne.n	1e598 <ipsp_connected+0x28>
	sys_memcpy_swap(ctxt->dst.val, info.le.dst->a.val, sizeof(ctxt->dst));
   1e5a6:	f104 01a2 	add.w	r1, r4, #162	; 0xa2
   1e5aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	src += length - 1;
   1e5ac:	3306      	adds	r3, #6
   1e5ae:	4608      	mov	r0, r1
   1e5b0:	2206      	movs	r2, #6
   1e5b2:	e004      	b.n	1e5be <ipsp_connected+0x4e>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e5b4:	781d      	ldrb	r5, [r3, #0]
   1e5b6:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
   1e5b8:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e5ba:	3b01      	subs	r3, #1
   1e5bc:	3001      	adds	r0, #1
	for (; length > 0; length--) {
   1e5be:	2a00      	cmp	r2, #0
   1e5c0:	d1f8      	bne.n	1e5b4 <ipsp_connected+0x44>
	net_if_set_link_addr(ctxt->iface, ctxt->src.val, sizeof(ctxt->src.val),
   1e5c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e5c6:	f3bf 8f5b 	dmb	ish
   1e5ca:	68da      	ldr	r2, [r3, #12]
   1e5cc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1e5d0:	f012 0f01 	tst.w	r2, #1
   1e5d4:	d104      	bne.n	1e5e0 <ipsp_connected+0x70>
	iface->link_addr.addr = addr;
   1e5d6:	611e      	str	r6, [r3, #16]
	iface->link_addr.len = len;
   1e5d8:	2206      	movs	r2, #6
   1e5da:	751a      	strb	r2, [r3, #20]
	iface->link_addr.type = type;
   1e5dc:	2202      	movs	r2, #2
   1e5de:	755a      	strb	r2, [r3, #21]
	ll.addr = ctxt->dst.val;
   1e5e0:	9107      	str	r1, [sp, #28]
	ll.len = sizeof(ctxt->dst.val);
   1e5e2:	2306      	movs	r3, #6
   1e5e4:	f88d 3020 	strb.w	r3, [sp, #32]
	ll.type = NET_LINK_BLUETOOTH;
   1e5e8:	2302      	movs	r3, #2
   1e5ea:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	addr->s6_addr[0] = 0xfe;
   1e5ee:	23fe      	movs	r3, #254	; 0xfe
   1e5f0:	f88d 300c 	strb.w	r3, [sp, #12]
	addr->s6_addr[1] = 0x80;
   1e5f4:	2380      	movs	r3, #128	; 0x80
   1e5f6:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1e5fa:	2300      	movs	r3, #0
   1e5fc:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1e600:	9304      	str	r3, [sp, #16]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1e602:	2203      	movs	r2, #3
   1e604:	a805      	add	r0, sp, #20
   1e606:	f7e1 fe5b 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1e60a:	23ff      	movs	r3, #255	; 0xff
   1e60c:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   1e610:	23fe      	movs	r3, #254	; 0xfe
   1e612:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1e616:	2203      	movs	r2, #3
   1e618:	9907      	ldr	r1, [sp, #28]
   1e61a:	4411      	add	r1, r2
   1e61c:	f10d 0019 	add.w	r0, sp, #25
   1e620:	f7e1 fe4e 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1e624:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1e628:	2b02      	cmp	r3, #2
   1e62a:	d012      	beq.n	1e652 <ipsp_connected+0xe2>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1e62c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1e630:	2b03      	cmp	r3, #3
   1e632:	d015      	beq.n	1e660 <ipsp_connected+0xf0>
	net_ipv6_nbr_add(ctxt->iface, &in6, &ll, false,
   1e634:	2305      	movs	r3, #5
   1e636:	9300      	str	r3, [sp, #0]
   1e638:	2300      	movs	r3, #0
   1e63a:	aa07      	add	r2, sp, #28
   1e63c:	a903      	add	r1, sp, #12
   1e63e:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1e642:	f002 f903 	bl	2084c <net_ipv6_nbr_add>
	net_if_up(ctxt->iface);
   1e646:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1e64a:	f7fd fdd1 	bl	1c1f0 <net_if_up>
}
   1e64e:	b00e      	add	sp, #56	; 0x38
   1e650:	bd70      	pop	{r4, r5, r6, pc}
			addr->s6_addr[8] ^= 0x02;
   1e652:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1e656:	f083 0302 	eor.w	r3, r3, #2
   1e65a:	f88d 3014 	strb.w	r3, [sp, #20]
   1e65e:	e7e5      	b.n	1e62c <ipsp_connected+0xbc>
			addr->s6_addr[8] ^= 0x02;
   1e660:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1e664:	f083 0302 	eor.w	r3, r3, #2
   1e668:	f88d 3014 	strb.w	r3, [sp, #20]
   1e66c:	e7e2      	b.n	1e634 <ipsp_connected+0xc4>
	...

0001e670 <net_bt_init>:
	.disconnected = disconnected,
};
#endif /* CONFIG_NET_L2_BT_MGMT */

static int net_bt_init(struct device *dev)
{
   1e670:	b508      	push	{r3, lr}
	NET_DBG("dev %p driver_data %p", dev, dev->driver_data);

#if defined(CONFIG_NET_L2_BT_MGMT)
	bt_conn_cb_register(&conn_callbacks);
   1e672:	4804      	ldr	r0, [pc, #16]	; (1e684 <net_bt_init+0x14>)
   1e674:	f7e8 fbb6 	bl	6de4 <bt_conn_cb_register>
#endif
	bt_l2cap_server_register(&server);
   1e678:	4803      	ldr	r0, [pc, #12]	; (1e688 <net_bt_init+0x18>)
   1e67a:	f7e9 ffc5 	bl	8608 <bt_l2cap_server_register>

	return 0;
}
   1e67e:	2000      	movs	r0, #0
   1e680:	bd08      	pop	{r3, pc}
   1e682:	bf00      	nop
   1e684:	2000bee4 	.word	0x2000bee4
   1e688:	2000bf14 	.word	0x2000bf14

0001e68c <bt_iface_send>:
{
   1e68c:	b538      	push	{r3, r4, r5, lr}
	return iface->dev;
   1e68e:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e690:	689c      	ldr	r4, [r3, #8]
	frags = pkt->frags;
   1e692:	688d      	ldr	r5, [r1, #8]
	pkt->frags = NULL;
   1e694:	2300      	movs	r3, #0
   1e696:	608b      	str	r3, [r1, #8]
	net_pkt_unref(pkt);
   1e698:	4608      	mov	r0, r1
   1e69a:	f7fe ffc2 	bl	1d622 <net_pkt_unref>
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   1e69e:	4629      	mov	r1, r5
   1e6a0:	1d20      	adds	r0, r4, #4
   1e6a2:	f7ea f9bb 	bl	8a1c <bt_l2cap_chan_send>
}
   1e6a6:	bd38      	pop	{r3, r4, r5, pc}

0001e6a8 <bt_iface_init>:
   1e6a8:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e6aa:	689b      	ldr	r3, [r3, #8]
	ctxt->iface = iface;
   1e6ac:	6018      	str	r0, [r3, #0]
	atomic_set_bit(iface->flags, NET_IF_POINTOPOINT);
   1e6ae:	300c      	adds	r0, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e6b0:	f3bf 8f5b 	dmb	ish
   1e6b4:	e850 3f00 	ldrex	r3, [r0]
   1e6b8:	f043 0302 	orr.w	r3, r3, #2
   1e6bc:	e840 3200 	strex	r2, r3, [r0]
   1e6c0:	2a00      	cmp	r2, #0
   1e6c2:	d1f7      	bne.n	1e6b4 <bt_iface_init+0xc>
   1e6c4:	f3bf 8f5b 	dmb	ish
   1e6c8:	4770      	bx	lr
	...

0001e6cc <net_mgmt_NET_REQUEST_BT_ADVERTISE>:
{
   1e6cc:	b510      	push	{r4, lr}
   1e6ce:	b086      	sub	sp, #24
   1e6d0:	4614      	mov	r4, r2
	if (!strcmp(data, "on")) {
   1e6d2:	4913      	ldr	r1, [pc, #76]	; (1e720 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x54>)
   1e6d4:	4610      	mov	r0, r2
   1e6d6:	f7e1 fe97 	bl	408 <strcmp>
   1e6da:	b140      	cbz	r0, 1e6ee <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x22>
	} else if (!strcmp(data, "off")) {
   1e6dc:	4911      	ldr	r1, [pc, #68]	; (1e724 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x58>)
   1e6de:	4620      	mov	r0, r4
   1e6e0:	f7e1 fe92 	bl	408 <strcmp>
   1e6e4:	b9c0      	cbnz	r0, 1e718 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x4c>
		return bt_le_adv_stop();
   1e6e6:	f7e8 f879 	bl	67dc <bt_le_adv_stop>
}
   1e6ea:	b006      	add	sp, #24
   1e6ec:	bd10      	pop	{r4, pc}
		return bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   1e6ee:	2300      	movs	r3, #0
   1e6f0:	9303      	str	r3, [sp, #12]
   1e6f2:	9304      	str	r3, [sp, #16]
   1e6f4:	9305      	str	r3, [sp, #20]
   1e6f6:	2301      	movs	r3, #1
   1e6f8:	f88d 300c 	strb.w	r3, [sp, #12]
   1e6fc:	22a0      	movs	r2, #160	; 0xa0
   1e6fe:	f8ad 200e 	strh.w	r2, [sp, #14]
   1e702:	22f0      	movs	r2, #240	; 0xf0
   1e704:	f8ad 2010 	strh.w	r2, [sp, #16]
   1e708:	9300      	str	r3, [sp, #0]
   1e70a:	4b07      	ldr	r3, [pc, #28]	; (1e728 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x5c>)
   1e70c:	2202      	movs	r2, #2
   1e70e:	4907      	ldr	r1, [pc, #28]	; (1e72c <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x60>)
   1e710:	a803      	add	r0, sp, #12
   1e712:	f7e7 ffb9 	bl	6688 <bt_le_adv_start>
   1e716:	e7e8      	b.n	1e6ea <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
		return -EINVAL;
   1e718:	f06f 0015 	mvn.w	r0, #21
   1e71c:	e7e5      	b.n	1e6ea <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
   1e71e:	bf00      	nop
   1e720:	00031490 	.word	0x00031490
   1e724:	00031494 	.word	0x00031494
   1e728:	00031498 	.word	0x00031498
   1e72c:	00031480 	.word	0x00031480

0001e730 <net_icmpv6_register_handler>:
	node->next = list->head;
   1e730:	4b04      	ldr	r3, [pc, #16]	; (1e744 <net_icmpv6_register_handler+0x14>)
   1e732:	681a      	ldr	r2, [r3, #0]
   1e734:	6002      	str	r2, [r0, #0]
	list->head = node;
   1e736:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   1e738:	685b      	ldr	r3, [r3, #4]
   1e73a:	b103      	cbz	r3, 1e73e <net_icmpv6_register_handler+0xe>
   1e73c:	4770      	bx	lr
		list->tail = list->head;
   1e73e:	4b01      	ldr	r3, [pc, #4]	; (1e744 <net_icmpv6_register_handler+0x14>)
   1e740:	6058      	str	r0, [r3, #4]
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
   1e742:	e7fb      	b.n	1e73c <net_icmpv6_register_handler+0xc>
   1e744:	20001f7c 	.word	0x20001f7c

0001e748 <net_icmpv6_unregister_handler>:

void net_icmpv6_unregister_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_find_and_remove(&handlers, &handler->node);
   1e748:	4601      	mov	r1, r0
	return list->head;
   1e74a:	4b10      	ldr	r3, [pc, #64]	; (1e78c <net_icmpv6_unregister_handler+0x44>)
   1e74c:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   1e74e:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1e750:	b1d3      	cbz	r3, 1e788 <net_icmpv6_unregister_handler+0x40>
		if (test == node) {
   1e752:	4299      	cmp	r1, r3
   1e754:	d002      	beq.n	1e75c <net_icmpv6_unregister_handler+0x14>
		prev = test;
   1e756:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1e758:	681b      	ldr	r3, [r3, #0]
   1e75a:	e7f9      	b.n	1e750 <net_icmpv6_unregister_handler+0x8>
	if (!prev_node) {
   1e75c:	b142      	cbz	r2, 1e770 <net_icmpv6_unregister_handler+0x28>
		prev_node->next = node->next;
   1e75e:	6803      	ldr	r3, [r0, #0]
   1e760:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   1e762:	4b0a      	ldr	r3, [pc, #40]	; (1e78c <net_icmpv6_unregister_handler+0x44>)
   1e764:	685b      	ldr	r3, [r3, #4]
   1e766:	4298      	cmp	r0, r3
   1e768:	d00b      	beq.n	1e782 <net_icmpv6_unregister_handler+0x3a>
	node->next = NULL;
   1e76a:	2300      	movs	r3, #0
   1e76c:	6003      	str	r3, [r0, #0]
   1e76e:	4770      	bx	lr
		list->head = node->next;
   1e770:	6802      	ldr	r2, [r0, #0]
   1e772:	4b06      	ldr	r3, [pc, #24]	; (1e78c <net_icmpv6_unregister_handler+0x44>)
   1e774:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   1e776:	685b      	ldr	r3, [r3, #4]
   1e778:	4298      	cmp	r0, r3
   1e77a:	d1f6      	bne.n	1e76a <net_icmpv6_unregister_handler+0x22>
			list->tail = list->head;
   1e77c:	4b03      	ldr	r3, [pc, #12]	; (1e78c <net_icmpv6_unregister_handler+0x44>)
   1e77e:	605a      	str	r2, [r3, #4]
   1e780:	e7f3      	b.n	1e76a <net_icmpv6_unregister_handler+0x22>
			list->tail = prev_node;
   1e782:	4b02      	ldr	r3, [pc, #8]	; (1e78c <net_icmpv6_unregister_handler+0x44>)
   1e784:	605a      	str	r2, [r3, #4]
   1e786:	e7f0      	b.n	1e76a <net_icmpv6_unregister_handler+0x22>
   1e788:	4770      	bx	lr
   1e78a:	bf00      	nop
   1e78c:	20001f7c 	.word	0x20001f7c

0001e790 <net_icmpv6_set_chksum>:
#define echo_reply_debug(pkt)
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

struct net_buf *net_icmpv6_set_chksum(struct net_pkt *pkt,
				      struct net_buf *frag)
{
   1e790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e794:	b086      	sub	sp, #24
   1e796:	4606      	mov	r6, r0
   1e798:	460d      	mov	r5, r1
	struct net_icmp_hdr *icmp_hdr;
	u16_t chksum = 0;
   1e79a:	2300      	movs	r3, #0
   1e79c:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	icmp_hdr = net_pkt_icmp_data(pkt);
   1e7a0:	f7ff fa18 	bl	1dbd4 <net_pkt_icmp_data>
   1e7a4:	4604      	mov	r4, r0
 */
static inline
struct net_icmp_hdr *net_icmp_header_fits(struct net_pkt *pkt,
					  struct net_icmp_hdr *hdr)
{
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1e7a6:	2204      	movs	r2, #4
   1e7a8:	4601      	mov	r1, r0
   1e7aa:	4630      	mov	r0, r6
   1e7ac:	f7ff fdfc 	bl	1e3a8 <net_header_fits>
   1e7b0:	b170      	cbz	r0, 1e7d0 <net_icmpv6_set_chksum+0x40>
		return hdr;
   1e7b2:	4623      	mov	r3, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1e7b4:	b173      	cbz	r3, 1e7d4 <net_icmpv6_set_chksum+0x44>
		icmp_hdr->chksum = 0;
   1e7b6:	2300      	movs	r3, #0
   1e7b8:	70a3      	strb	r3, [r4, #2]
   1e7ba:	70e3      	strb	r3, [r4, #3]
extern u16_t net_calc_chksum_ipv4(struct net_pkt *pkt);
#endif /* CONFIG_NET_IPV4 */

static inline u16_t net_calc_chksum_icmpv6(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1e7bc:	213a      	movs	r1, #58	; 0x3a
   1e7be:	4630      	mov	r0, r6
   1e7c0:	f7ff fd99 	bl	1e2f6 <net_calc_chksum>
		icmp_hdr->chksum = ~net_calc_chksum_icmpv6(pkt);
   1e7c4:	43c0      	mvns	r0, r0
   1e7c6:	8060      	strh	r0, [r4, #2]

		return frag;
   1e7c8:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   1e7ca:	b006      	add	sp, #24
   1e7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1e7d0:	2300      	movs	r3, #0
   1e7d2:	e7ef      	b.n	1e7b4 <net_icmpv6_set_chksum+0x24>
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1e7d4:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1e7d8:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1e7dc:	441a      	add	r2, r3
   1e7de:	3202      	adds	r2, #2
   1e7e0:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   1e7e4:	f8cd 8008 	str.w	r8, [sp, #8]
   1e7e8:	f10d 0416 	add.w	r4, sp, #22
   1e7ec:	9401      	str	r4, [sp, #4]
   1e7ee:	2702      	movs	r7, #2
   1e7f0:	9700      	str	r7, [sp, #0]
   1e7f2:	ab05      	add	r3, sp, #20
   1e7f4:	b292      	uxth	r2, r2
   1e7f6:	4629      	mov	r1, r5
   1e7f8:	4630      	mov	r0, r6
   1e7fa:	f7ff f902 	bl	1da02 <net_pkt_write>
   1e7fe:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1e800:	213a      	movs	r1, #58	; 0x3a
   1e802:	4630      	mov	r0, r6
   1e804:	f7ff fd77 	bl	1e2f6 <net_calc_chksum>
	chksum = ~net_calc_chksum_icmpv6(pkt);
   1e808:	43c0      	mvns	r0, r0
   1e80a:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1e80e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1e812:	3a02      	subs	r2, #2
   1e814:	f8cd 8008 	str.w	r8, [sp, #8]
   1e818:	9401      	str	r4, [sp, #4]
   1e81a:	9700      	str	r7, [sp, #0]
   1e81c:	ab05      	add	r3, sp, #20
   1e81e:	b292      	uxth	r2, r2
   1e820:	4629      	mov	r1, r5
   1e822:	4630      	mov	r0, r6
   1e824:	f7ff f8ed 	bl	1da02 <net_pkt_write>
	return frag;
   1e828:	e7cf      	b.n	1e7ca <net_icmpv6_set_chksum+0x3a>

0001e82a <net_icmpv6_get_hdr>:

struct net_icmp_hdr *net_icmpv6_get_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1e82a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e82c:	b085      	sub	sp, #20
   1e82e:	4605      	mov	r5, r0
   1e830:	460f      	mov	r7, r1
	/* If the ICMP header can fit the first fragment, then access it
	 * directly (fast path), otherwise read the values one by one
	 * using net_frag_read*() functions (slow path).
	 */

	icmp_hdr = net_pkt_icmp_data(pkt);
   1e832:	f7ff f9cf 	bl	1dbd4 <net_pkt_icmp_data>
   1e836:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1e838:	2204      	movs	r2, #4
   1e83a:	4601      	mov	r1, r0
   1e83c:	4628      	mov	r0, r5
   1e83e:	f7ff fdb3 	bl	1e3a8 <net_header_fits>
   1e842:	b120      	cbz	r0, 1e84e <net_icmpv6_get_hdr+0x24>
		return hdr;
   1e844:	4626      	mov	r6, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1e846:	b126      	cbz	r6, 1e852 <net_icmpv6_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1e848:	4620      	mov	r0, r4
   1e84a:	b005      	add	sp, #20
   1e84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   1e84e:	2600      	movs	r6, #0
   1e850:	e7f9      	b.n	1e846 <net_icmpv6_get_hdr+0x1c>
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e852:	68a8      	ldr	r0, [r5, #8]
   1e854:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt), &pos, &hdr->type);
   1e858:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
static inline struct net_buf *net_frag_read_u8(struct net_buf *frag,
					      u16_t offset,
					      u16_t *pos,
					      u8_t *value)
{
	return net_frag_read(frag, offset, pos, 1, value);
   1e85c:	9700      	str	r7, [sp, #0]
   1e85e:	2301      	movs	r3, #1
   1e860:	f10d 020e 	add.w	r2, sp, #14
   1e864:	4421      	add	r1, r4
   1e866:	f7ff f85a 	bl	1d91e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->code);
   1e86a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e86e:	1c7b      	adds	r3, r7, #1
   1e870:	9300      	str	r3, [sp, #0]
   1e872:	2301      	movs	r3, #1
   1e874:	f10d 020e 	add.w	r2, sp, #14
   1e878:	f7ff f851 	bl	1d91e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1e87c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   1e880:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1e882:	9300      	str	r3, [sp, #0]
   1e884:	2302      	movs	r3, #2
   1e886:	f10d 020e 	add.w	r2, sp, #14
   1e88a:	f7ff f848 	bl	1d91e <net_frag_read>
	if (!frag) {
   1e88e:	b108      	cbz	r0, 1e894 <net_icmpv6_get_hdr+0x6a>
	return hdr;
   1e890:	463c      	mov	r4, r7
   1e892:	e7d9      	b.n	1e848 <net_icmpv6_get_hdr+0x1e>
		return NULL;
   1e894:	4634      	mov	r4, r6
   1e896:	e7d7      	b.n	1e848 <net_icmpv6_get_hdr+0x1e>

0001e898 <net_icmpv6_set_hdr>:

struct net_icmp_hdr *net_icmpv6_set_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1e898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e89c:	b086      	sub	sp, #24
   1e89e:	4606      	mov	r6, r0
   1e8a0:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1e8a2:	2204      	movs	r2, #4
   1e8a4:	f7ff fd80 	bl	1e3a8 <net_header_fits>
   1e8a8:	b128      	cbz	r0, 1e8b6 <net_icmpv6_set_hdr+0x1e>
		return hdr;
   1e8aa:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_icmp_header_fits(pkt, hdr)) {
   1e8ac:	b12d      	cbz	r5, 1e8ba <net_icmpv6_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1e8ae:	4620      	mov	r0, r4
   1e8b0:	b006      	add	sp, #24
   1e8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1e8b6:	2500      	movs	r5, #0
   1e8b8:	e7f8      	b.n	1e8ac <net_icmpv6_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e8ba:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt), &pos,
   1e8be:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e8c2:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1e8c6:	9702      	str	r7, [sp, #8]
   1e8c8:	9401      	str	r4, [sp, #4]
   1e8ca:	f04f 0801 	mov.w	r8, #1
   1e8ce:	f8cd 8000 	str.w	r8, [sp]
   1e8d2:	f10d 0316 	add.w	r3, sp, #22
   1e8d6:	440a      	add	r2, r1
   1e8d8:	68b1      	ldr	r1, [r6, #8]
   1e8da:	4630      	mov	r0, r6
   1e8dc:	f7ff f891 	bl	1da02 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->code),
   1e8e0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1e8e4:	eb04 0308 	add.w	r3, r4, r8
   1e8e8:	9702      	str	r7, [sp, #8]
   1e8ea:	9301      	str	r3, [sp, #4]
   1e8ec:	f8cd 8000 	str.w	r8, [sp]
   1e8f0:	f10d 0316 	add.w	r3, sp, #22
   1e8f4:	4601      	mov	r1, r0
   1e8f6:	4630      	mov	r0, r6
   1e8f8:	f7ff f883 	bl	1da02 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1e8fc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   1e900:	1ca3      	adds	r3, r4, #2
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1e902:	9702      	str	r7, [sp, #8]
   1e904:	9301      	str	r3, [sp, #4]
   1e906:	2302      	movs	r3, #2
   1e908:	9300      	str	r3, [sp, #0]
   1e90a:	f10d 0316 	add.w	r3, sp, #22
   1e90e:	4601      	mov	r1, r0
   1e910:	4630      	mov	r0, r6
   1e912:	f7ff f876 	bl	1da02 <net_pkt_write>
	if (!frag) {
   1e916:	2800      	cmp	r0, #0
   1e918:	d1c9      	bne.n	1e8ae <net_icmpv6_set_hdr+0x16>
		return NULL;
   1e91a:	462c      	mov	r4, r5
   1e91c:	e7c7      	b.n	1e8ae <net_icmpv6_set_hdr+0x16>
	...

0001e920 <handle_echo_request>:

	return hdr;
}

static enum net_verdict handle_echo_request(struct net_pkt *orig)
{
   1e920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e924:	b09a      	sub	sp, #104	; 0x68
   1e926:	4606      	mov	r6, r0
	return pkt->iface;
   1e928:	6945      	ldr	r5, [r0, #20]

	echo_request_debug(orig);

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1e92a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1e92e:	2000      	movs	r0, #0
   1e930:	f7fe fe06 	bl	1d540 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1e934:	2800      	cmp	r0, #0
   1e936:	f000 80a1 	beq.w	1ea7c <handle_echo_request+0x15c>
   1e93a:	4604      	mov	r4, r0
	return pkt->frags->data;
   1e93c:	68b3      	ldr	r3, [r6, #8]
	size_t bytes = 0;
   1e93e:	2100      	movs	r1, #0
   1e940:	e002      	b.n	1e948 <handle_echo_request+0x28>
		bytes += buf->len;
   1e942:	899a      	ldrh	r2, [r3, #12]
   1e944:	4411      	add	r1, r2
		buf = buf->frags;
   1e946:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1e948:	2b00      	cmp	r3, #0
   1e94a:	d1fa      	bne.n	1e942 <handle_echo_request+0x22>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1e94c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1e950:	2200      	movs	r2, #0
   1e952:	4630      	mov	r0, r6
   1e954:	f7fe fea6 	bl	1d6a4 <net_pkt_copy>

	payload_len = sys_get_be16(NET_IPV6_HDR(orig)->len) -
		sizeof(NET_ICMPH_LEN) - NET_ICMPV6_UNUSED_LEN;

	frag = net_pkt_copy_all(orig, 0, PKT_WAIT_TIME);
	if (!frag) {
   1e958:	4607      	mov	r7, r0
   1e95a:	2800      	cmp	r0, #0
   1e95c:	f000 808b 	beq.w	1ea76 <handle_echo_request+0x156>
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1e960:	4601      	mov	r1, r0
   1e962:	4620      	mov	r0, r4
   1e964:	f7fe fe87 	bl	1d676 <net_pkt_frag_add>
	pkt->family = family;
   1e968:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1e96c:	220a      	movs	r2, #10
   1e96e:	f362 03c6 	bfi	r3, r2, #3, #4
   1e972:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1e976:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1e978:	7d6b      	ldrb	r3, [r5, #21]
   1e97a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1e97e:	7d6b      	ldrb	r3, [r5, #21]
   1e980:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1e984:	f107 0008 	add.w	r0, r7, #8
   1e988:	f7fc f98d 	bl	1aca6 <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1e98c:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ip_hdr_len = len;
   1e990:	2328      	movs	r3, #40	; 0x28
   1e992:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->ipv6_ext_len;
   1e996:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));

	if (net_pkt_ipv6_ext_len(orig)) {
   1e99a:	2b00      	cmp	r3, #0
   1e99c:	d076      	beq.n	1ea8c <handle_echo_request+0x16c>
	pkt->ipv6_ext_len = len;
   1e99e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1e9a2:	68a3      	ldr	r3, [r4, #8]
   1e9a4:	689b      	ldr	r3, [r3, #8]
	} else {
		net_pkt_set_ipv6_ext_len(pkt, 0);
	}

	/* Set up IPv6 Header fields */
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1e9a6:	2260      	movs	r2, #96	; 0x60
   1e9a8:	701a      	strb	r2, [r3, #0]
   1e9aa:	68a3      	ldr	r3, [r4, #8]
   1e9ac:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1e9ae:	2300      	movs	r3, #0
   1e9b0:	7053      	strb	r3, [r2, #1]
   1e9b2:	68a2      	ldr	r2, [r4, #8]
   1e9b4:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1e9b6:	7093      	strb	r3, [r2, #2]
   1e9b8:	70d3      	strb	r3, [r2, #3]
   1e9ba:	68a3      	ldr	r3, [r4, #8]
   1e9bc:	689b      	ldr	r3, [r3, #8]
	return iface->ipv6.hop_limit;
   1e9be:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
	NET_IPV6_HDR(pkt)->hop_limit = net_if_ipv6_get_hop_limit(iface);
   1e9c2:	71da      	strb	r2, [r3, #7]
   1e9c4:	68a3      	ldr	r3, [r4, #8]
   1e9c6:	f8d3 c008 	ldr.w	ip, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   1e9ca:	f89c 3018 	ldrb.w	r3, [ip, #24]

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   1e9ce:	2bff      	cmp	r3, #255	; 0xff
   1e9d0:	d060      	beq.n	1ea94 <handle_echo_request+0x174>
   1e9d2:	68b3      	ldr	r3, [r6, #8]
   1e9d4:	689d      	ldr	r5, [r3, #8]
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1e9d6:	af0e      	add	r7, sp, #56	; 0x38
   1e9d8:	462b      	mov	r3, r5
   1e9da:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1e9de:	6859      	ldr	r1, [r3, #4]
   1e9e0:	689a      	ldr	r2, [r3, #8]
   1e9e2:	68db      	ldr	r3, [r3, #12]
   1e9e4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1e9e6:	af01      	add	r7, sp, #4
   1e9e8:	ab0e      	add	r3, sp, #56	; 0x38
   1e9ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1e9ec:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e9f0:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
   1e9f4:	462b      	mov	r3, r5
   1e9f6:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1e9fa:	6859      	ldr	r1, [r3, #4]
   1e9fc:	689a      	ldr	r2, [r3, #8]
   1e9fe:	68db      	ldr	r3, [r3, #12]
   1ea00:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1ea04:	ad12      	add	r5, sp, #72	; 0x48
   1ea06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ea08:	f8cc 0008 	str.w	r0, [ip, #8]
   1ea0c:	f8cc 100c 	str.w	r1, [ip, #12]
   1ea10:	f8cc 2010 	str.w	r2, [ip, #16]
   1ea14:	f8cc 3014 	str.w	r3, [ip, #20]
   1ea18:	68a3      	ldr	r3, [r4, #8]
   1ea1a:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1ea1e:	ad16      	add	r5, sp, #88	; 0x58
   1ea20:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1ea24:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1ea28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ea2a:	f8ce 0018 	str.w	r0, [lr, #24]
   1ea2e:	f8ce 101c 	str.w	r1, [lr, #28]
   1ea32:	f8ce 2020 	str.w	r2, [lr, #32]
   1ea36:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
			goto drop;
		}
#endif
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1ea3a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1ea3c:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1ea3e:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   1ea42:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	/* We must not set the destination ll address here but trust
	 * that it is set properly using a value from neighbor cache.
	 */
	net_pkt_ll_dst(pkt)->addr = NULL;
   1ea46:	2500      	movs	r5, #0
   1ea48:	62a5      	str	r5, [r4, #40]	; 0x28

	/* ICMPv6 fields */
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1ea4a:	a905      	add	r1, sp, #20
   1ea4c:	4620      	mov	r0, r4
   1ea4e:	f7ff feec 	bl	1e82a <net_icmpv6_get_hdr>
   1ea52:	4601      	mov	r1, r0
	icmp_hdr->type = NET_ICMPV6_ECHO_REPLY;
   1ea54:	2381      	movs	r3, #129	; 0x81
   1ea56:	7003      	strb	r3, [r0, #0]
	icmp_hdr->code = 0;
   1ea58:	7045      	strb	r5, [r0, #1]
	icmp_hdr->chksum = 0;
   1ea5a:	7085      	strb	r5, [r0, #2]
   1ea5c:	70c5      	strb	r5, [r0, #3]
	net_icmpv6_set_hdr(pkt, icmp_hdr);
   1ea5e:	4620      	mov	r0, r4
   1ea60:	f7ff ff1a 	bl	1e898 <net_icmpv6_set_hdr>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1ea64:	68a1      	ldr	r1, [r4, #8]
   1ea66:	4620      	mov	r0, r4
   1ea68:	f7ff fe92 	bl	1e790 <net_icmpv6_set_chksum>

	echo_reply_debug(pkt);

	if (net_send_data(pkt) < 0) {
   1ea6c:	4620      	mov	r0, r4
   1ea6e:	f7fc f9d7 	bl	1ae20 <net_send_data>
   1ea72:	42a8      	cmp	r0, r5
   1ea74:	da3c      	bge.n	1eaf0 <handle_echo_request+0x1d0>
	net_stats_update_icmp_sent();

	return NET_OK;

drop:
	net_pkt_unref(pkt);
   1ea76:	4620      	mov	r0, r4
   1ea78:	f7fe fdd3 	bl	1d622 <net_pkt_unref>
	net_stats.icmp.drop++;
   1ea7c:	4a21      	ldr	r2, [pc, #132]	; (1eb04 <handle_echo_request+0x1e4>)
   1ea7e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1ea80:	3301      	adds	r3, #1
   1ea82:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return NET_DROP;
   1ea84:	2002      	movs	r0, #2
}
   1ea86:	b01a      	add	sp, #104	; 0x68
   1ea88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pkt->ipv6_ext_len = len;
   1ea8c:	2300      	movs	r3, #0
   1ea8e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   1ea92:	e786      	b.n	1e9a2 <handle_echo_request+0x82>
	return pkt->frags->data;
   1ea94:	68b3      	ldr	r3, [r6, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1ea96:	af06      	add	r7, sp, #24
   1ea98:	689b      	ldr	r3, [r3, #8]
   1ea9a:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1ea9e:	6859      	ldr	r1, [r3, #4]
   1eaa0:	689a      	ldr	r2, [r3, #8]
   1eaa2:	68db      	ldr	r3, [r3, #12]
   1eaa4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1eaa6:	af06      	add	r7, sp, #24
   1eaa8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1eaaa:	f8cc 0018 	str.w	r0, [ip, #24]
   1eaae:	f8cc 101c 	str.w	r1, [ip, #28]
   1eab2:	f8cc 2020 	str.w	r2, [ip, #32]
   1eab6:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1eaba:	68a3      	ldr	r3, [r4, #8]
   1eabc:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1eac0:	68b3      	ldr	r3, [r6, #8]
   1eac2:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1eac4:	3118      	adds	r1, #24
   1eac6:	4628      	mov	r0, r5
   1eac8:	f7fd f910 	bl	1bcec <net_if_ipv6_select_src_addr>
   1eacc:	4603      	mov	r3, r0
   1eace:	ad0a      	add	r5, sp, #40	; 0x28
   1ead0:	6800      	ldr	r0, [r0, #0]
   1ead2:	6859      	ldr	r1, [r3, #4]
   1ead4:	689a      	ldr	r2, [r3, #8]
   1ead6:	68db      	ldr	r3, [r3, #12]
   1ead8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1eada:	ad0a      	add	r5, sp, #40	; 0x28
   1eadc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1eade:	f8c8 0008 	str.w	r0, [r8, #8]
   1eae2:	f8c8 100c 	str.w	r1, [r8, #12]
   1eae6:	f8c8 2010 	str.w	r2, [r8, #16]
   1eaea:	f8c8 3014 	str.w	r3, [r8, #20]
   1eaee:	e7a4      	b.n	1ea3a <handle_echo_request+0x11a>
	net_pkt_unref(orig);
   1eaf0:	4630      	mov	r0, r6
   1eaf2:	f7fe fd96 	bl	1d622 <net_pkt_unref>
	net_stats.icmp.sent++;
   1eaf6:	4a03      	ldr	r2, [pc, #12]	; (1eb04 <handle_echo_request+0x1e4>)
   1eaf8:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1eafa:	3301      	adds	r3, #1
   1eafc:	6393      	str	r3, [r2, #56]	; 0x38
	return NET_OK;
   1eafe:	4628      	mov	r0, r5
   1eb00:	e7c1      	b.n	1ea86 <handle_echo_request+0x166>
   1eb02:	bf00      	nop
   1eb04:	20002b50 	.word	0x20002b50

0001eb08 <net_icmpv6_get_ns_hdr>:
{
   1eb08:	b570      	push	{r4, r5, r6, lr}
   1eb0a:	b084      	sub	sp, #16
   1eb0c:	4605      	mov	r5, r0
   1eb0e:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1eb10:	2104      	movs	r1, #4
   1eb12:	f7ff f874 	bl	1dbfe <net_pkt_icmp_opt_data>
   1eb16:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1eb18:	2214      	movs	r2, #20
   1eb1a:	4601      	mov	r1, r0
   1eb1c:	4628      	mov	r0, r5
   1eb1e:	f7ff fc43 	bl	1e3a8 <net_header_fits>
   1eb22:	b110      	cbz	r0, 1eb2a <net_icmpv6_get_ns_hdr+0x22>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1eb24:	4620      	mov	r0, r4
}
   1eb26:	b004      	add	sp, #16
   1eb28:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read(pkt->frags,
   1eb2a:	68a8      	ldr	r0, [r5, #8]
			     net_pkt_ip_hdr_len(pkt) +
   1eb2c:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1eb30:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1eb34:	4419      	add	r1, r3
	frag = net_frag_read(pkt->frags,
   1eb36:	3108      	adds	r1, #8
			     &pos, sizeof(struct in6_addr), (u8_t *)&hdr->tgt);
   1eb38:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(pkt->frags,
   1eb3a:	9300      	str	r3, [sp, #0]
   1eb3c:	2310      	movs	r3, #16
   1eb3e:	f10d 020e 	add.w	r2, sp, #14
   1eb42:	b289      	uxth	r1, r1
   1eb44:	f7fe feeb 	bl	1d91e <net_frag_read>
	if (!frag) {
   1eb48:	2800      	cmp	r0, #0
   1eb4a:	d0ec      	beq.n	1eb26 <net_icmpv6_get_ns_hdr+0x1e>
	return hdr;
   1eb4c:	4630      	mov	r0, r6
   1eb4e:	e7ea      	b.n	1eb26 <net_icmpv6_get_ns_hdr+0x1e>

0001eb50 <net_icmpv6_set_ns_hdr>:
{
   1eb50:	b570      	push	{r4, r5, r6, lr}
   1eb52:	b086      	sub	sp, #24
   1eb54:	4605      	mov	r5, r0
   1eb56:	460e      	mov	r6, r1
	const u32_t reserved = 0;
   1eb58:	2300      	movs	r3, #0
   1eb5a:	9305      	str	r3, [sp, #20]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1eb5c:	2104      	movs	r1, #4
   1eb5e:	f7ff f84e 	bl	1dbfe <net_pkt_icmp_opt_data>
   1eb62:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1eb64:	2214      	movs	r2, #20
   1eb66:	4601      	mov	r1, r0
   1eb68:	4628      	mov	r0, r5
   1eb6a:	f7ff fc1d 	bl	1e3a8 <net_header_fits>
   1eb6e:	b110      	cbz	r0, 1eb76 <net_icmpv6_set_ns_hdr+0x26>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1eb70:	4620      	mov	r0, r4
}
   1eb72:	b006      	add	sp, #24
   1eb74:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1eb76:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1eb7a:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1eb7e:	441a      	add	r2, r3
   1eb80:	3204      	adds	r2, #4
   1eb82:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1eb86:	9402      	str	r4, [sp, #8]
   1eb88:	ab05      	add	r3, sp, #20
   1eb8a:	9301      	str	r3, [sp, #4]
   1eb8c:	2304      	movs	r3, #4
   1eb8e:	9300      	str	r3, [sp, #0]
   1eb90:	f10d 0312 	add.w	r3, sp, #18
   1eb94:	b292      	uxth	r2, r2
   1eb96:	68a9      	ldr	r1, [r5, #8]
   1eb98:	4628      	mov	r0, r5
   1eb9a:	f7fe ff32 	bl	1da02 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1eb9e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1eba2:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1eba4:	9402      	str	r4, [sp, #8]
   1eba6:	9301      	str	r3, [sp, #4]
   1eba8:	2310      	movs	r3, #16
   1ebaa:	9300      	str	r3, [sp, #0]
   1ebac:	f10d 0312 	add.w	r3, sp, #18
   1ebb0:	4601      	mov	r1, r0
   1ebb2:	4628      	mov	r0, r5
   1ebb4:	f7fe ff25 	bl	1da02 <net_pkt_write>
	if (!frag) {
   1ebb8:	2800      	cmp	r0, #0
   1ebba:	d0da      	beq.n	1eb72 <net_icmpv6_set_ns_hdr+0x22>
	return hdr;
   1ebbc:	4630      	mov	r0, r6
   1ebbe:	e7d8      	b.n	1eb72 <net_icmpv6_set_ns_hdr+0x22>

0001ebc0 <net_icmpv6_get_nd_opt_hdr>:
{
   1ebc0:	b570      	push	{r4, r5, r6, lr}
   1ebc2:	b084      	sub	sp, #16
   1ebc4:	4605      	mov	r5, r0
   1ebc6:	460e      	mov	r6, r1
	return pkt->ipv6_ext_opt_len;
   1ebc8:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1ebcc:	3104      	adds	r1, #4
   1ebce:	f7ff f816 	bl	1dbfe <net_pkt_icmp_opt_data>
   1ebd2:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ebd4:	2202      	movs	r2, #2
   1ebd6:	4601      	mov	r1, r0
   1ebd8:	4628      	mov	r0, r5
   1ebda:	f7ff fbe5 	bl	1e3a8 <net_header_fits>
   1ebde:	b110      	cbz	r0, 1ebe6 <net_icmpv6_get_nd_opt_hdr+0x26>
		return (struct net_icmpv6_nd_opt_hdr *)opt_data;
   1ebe0:	4620      	mov	r0, r4
}
   1ebe2:	b004      	add	sp, #16
   1ebe4:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags,
   1ebe6:	68a8      	ldr	r0, [r5, #8]
				net_pkt_ip_hdr_len(pkt) +
   1ebe8:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1ebec:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1ebf0:	4419      	add	r1, r3
				net_pkt_ipv6_ext_opt_len(pkt),
   1ebf2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
				sizeof(struct net_icmp_hdr) +
   1ebf6:	4419      	add	r1, r3
   1ebf8:	b289      	uxth	r1, r1
	frag = net_frag_read_u8(pkt->frags,
   1ebfa:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1ebfc:	9600      	str	r6, [sp, #0]
   1ebfe:	2301      	movs	r3, #1
   1ec00:	f10d 020e 	add.w	r2, sp, #14
   1ec04:	b289      	uxth	r1, r1
   1ec06:	f7fe fe8a 	bl	1d91e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->len);
   1ec0a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ec0e:	1c73      	adds	r3, r6, #1
   1ec10:	9300      	str	r3, [sp, #0]
   1ec12:	2301      	movs	r3, #1
   1ec14:	f10d 020e 	add.w	r2, sp, #14
   1ec18:	f7fe fe81 	bl	1d91e <net_frag_read>
	if (!frag) {
   1ec1c:	2800      	cmp	r0, #0
   1ec1e:	d0e0      	beq.n	1ebe2 <net_icmpv6_get_nd_opt_hdr+0x22>
	return hdr;
   1ec20:	4630      	mov	r0, r6
   1ec22:	e7de      	b.n	1ebe2 <net_icmpv6_get_nd_opt_hdr+0x22>

0001ec24 <net_icmpv6_get_na_hdr>:
{
   1ec24:	b570      	push	{r4, r5, r6, lr}
   1ec26:	b084      	sub	sp, #16
   1ec28:	4605      	mov	r5, r0
   1ec2a:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ec2c:	2104      	movs	r1, #4
   1ec2e:	f7fe ffe6 	bl	1dbfe <net_pkt_icmp_opt_data>
   1ec32:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ec34:	2214      	movs	r2, #20
   1ec36:	4601      	mov	r1, r0
   1ec38:	4628      	mov	r0, r5
   1ec3a:	f7ff fbb5 	bl	1e3a8 <net_header_fits>
   1ec3e:	b110      	cbz	r0, 1ec46 <net_icmpv6_get_na_hdr+0x22>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1ec40:	4620      	mov	r0, r4
}
   1ec42:	b004      	add	sp, #16
   1ec44:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ec46:	68a8      	ldr	r0, [r5, #8]
   1ec48:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1ec4c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ec50:	4419      	add	r1, r3
   1ec52:	3104      	adds	r1, #4
   1ec54:	9600      	str	r6, [sp, #0]
   1ec56:	2301      	movs	r3, #1
   1ec58:	f10d 020e 	add.w	r2, sp, #14
   1ec5c:	b289      	uxth	r1, r1
   1ec5e:	f7fe fe5e 	bl	1d91e <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 3); /* reserved */
   1ec62:	f8bd 100e 	ldrh.w	r1, [sp, #14]
	return net_frag_read(frag, offset, pos, len, NULL);
   1ec66:	2300      	movs	r3, #0
   1ec68:	9300      	str	r3, [sp, #0]
   1ec6a:	2303      	movs	r3, #3
   1ec6c:	f10d 020e 	add.w	r2, sp, #14
   1ec70:	f7fe fe55 	bl	1d91e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1ec74:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->tgt);
   1ec78:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1ec7a:	9300      	str	r3, [sp, #0]
   1ec7c:	2310      	movs	r3, #16
   1ec7e:	f10d 020e 	add.w	r2, sp, #14
   1ec82:	f7fe fe4c 	bl	1d91e <net_frag_read>
	if (!frag) {
   1ec86:	2800      	cmp	r0, #0
   1ec88:	d0db      	beq.n	1ec42 <net_icmpv6_get_na_hdr+0x1e>
	return hdr;
   1ec8a:	4630      	mov	r0, r6
   1ec8c:	e7d9      	b.n	1ec42 <net_icmpv6_get_na_hdr+0x1e>

0001ec8e <net_icmpv6_set_na_hdr>:
{
   1ec8e:	b570      	push	{r4, r5, r6, lr}
   1ec90:	b086      	sub	sp, #24
   1ec92:	4605      	mov	r5, r0
   1ec94:	460e      	mov	r6, r1
	const u8_t reserved[3] = { 0 };
   1ec96:	2300      	movs	r3, #0
   1ec98:	f8ad 3014 	strh.w	r3, [sp, #20]
   1ec9c:	f88d 3016 	strb.w	r3, [sp, #22]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1eca0:	2104      	movs	r1, #4
   1eca2:	f7fe ffac 	bl	1dbfe <net_pkt_icmp_opt_data>
   1eca6:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1eca8:	2214      	movs	r2, #20
   1ecaa:	4601      	mov	r1, r0
   1ecac:	4628      	mov	r0, r5
   1ecae:	f7ff fb7b 	bl	1e3a8 <net_header_fits>
   1ecb2:	b110      	cbz	r0, 1ecba <net_icmpv6_set_na_hdr+0x2c>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1ecb4:	4620      	mov	r0, r4
}
   1ecb6:	b006      	add	sp, #24
   1ecb8:	bd70      	pop	{r4, r5, r6, pc}
			     net_pkt_ip_hdr_len(pkt) +
   1ecba:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1ecbe:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1ecc2:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, pkt->frags,
   1ecc4:	3204      	adds	r2, #4
   1ecc6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1ecca:	9402      	str	r4, [sp, #8]
   1eccc:	9601      	str	r6, [sp, #4]
   1ecce:	2301      	movs	r3, #1
   1ecd0:	9300      	str	r3, [sp, #0]
   1ecd2:	f10d 0312 	add.w	r3, sp, #18
   1ecd6:	b292      	uxth	r2, r2
   1ecd8:	68a9      	ldr	r1, [r5, #8]
   1ecda:	4628      	mov	r0, r5
   1ecdc:	f7fe fe91 	bl	1da02 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(reserved),
   1ece0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1ece4:	9402      	str	r4, [sp, #8]
   1ece6:	ab05      	add	r3, sp, #20
   1ece8:	9301      	str	r3, [sp, #4]
   1ecea:	2303      	movs	r3, #3
   1ecec:	9300      	str	r3, [sp, #0]
   1ecee:	f10d 0312 	add.w	r3, sp, #18
   1ecf2:	4601      	mov	r1, r0
   1ecf4:	4628      	mov	r0, r5
   1ecf6:	f7fe fe84 	bl	1da02 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1ecfa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1ecfe:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1ed00:	9402      	str	r4, [sp, #8]
   1ed02:	9301      	str	r3, [sp, #4]
   1ed04:	2310      	movs	r3, #16
   1ed06:	9300      	str	r3, [sp, #0]
   1ed08:	f10d 0312 	add.w	r3, sp, #18
   1ed0c:	4601      	mov	r1, r0
   1ed0e:	4628      	mov	r0, r5
   1ed10:	f7fe fe77 	bl	1da02 <net_pkt_write>
	if (!frag) {
   1ed14:	2800      	cmp	r0, #0
   1ed16:	d0ce      	beq.n	1ecb6 <net_icmpv6_set_na_hdr+0x28>
	return hdr;
   1ed18:	4630      	mov	r0, r6
   1ed1a:	e7cc      	b.n	1ecb6 <net_icmpv6_set_na_hdr+0x28>

0001ed1c <net_icmpv6_get_ra_hdr>:
{
   1ed1c:	b570      	push	{r4, r5, r6, lr}
   1ed1e:	b084      	sub	sp, #16
   1ed20:	4606      	mov	r6, r0
   1ed22:	460d      	mov	r5, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ed24:	2104      	movs	r1, #4
   1ed26:	f7fe ff6a 	bl	1dbfe <net_pkt_icmp_opt_data>
   1ed2a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ed2c:	220c      	movs	r2, #12
   1ed2e:	4601      	mov	r1, r0
   1ed30:	4630      	mov	r0, r6
   1ed32:	f7ff fb39 	bl	1e3a8 <net_header_fits>
   1ed36:	b110      	cbz	r0, 1ed3e <net_icmpv6_get_ra_hdr+0x22>
		return (struct net_icmpv6_ra_hdr *)opt_data;
   1ed38:	4620      	mov	r0, r4
}
   1ed3a:	b004      	add	sp, #16
   1ed3c:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ed3e:	68b0      	ldr	r0, [r6, #8]
   1ed40:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1ed44:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ed48:	4419      	add	r1, r3
   1ed4a:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1ed4c:	9500      	str	r5, [sp, #0]
   1ed4e:	2301      	movs	r3, #1
   1ed50:	f10d 020e 	add.w	r2, sp, #14
   1ed54:	b289      	uxth	r1, r1
   1ed56:	f7fe fde2 	bl	1d91e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   1ed5a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ed5e:	1c6b      	adds	r3, r5, #1
   1ed60:	9300      	str	r3, [sp, #0]
   1ed62:	2301      	movs	r3, #1
   1ed64:	f10d 020e 	add.w	r2, sp, #14
   1ed68:	f7fe fdd9 	bl	1d91e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1ed6c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->router_lifetime);
   1ed70:	1cab      	adds	r3, r5, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1ed72:	9300      	str	r3, [sp, #0]
   1ed74:	2302      	movs	r3, #2
   1ed76:	f10d 020e 	add.w	r2, sp, #14
   1ed7a:	f7fe fdd0 	bl	1d91e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1ed7e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->reachable_time);
   1ed82:	1d2b      	adds	r3, r5, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1ed84:	9300      	str	r3, [sp, #0]
   1ed86:	2304      	movs	r3, #4
   1ed88:	f10d 020e 	add.w	r2, sp, #14
   1ed8c:	f7fe fdc7 	bl	1d91e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1ed90:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->retrans_timer);
   1ed94:	f105 0308 	add.w	r3, r5, #8
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1ed98:	9300      	str	r3, [sp, #0]
   1ed9a:	2304      	movs	r3, #4
   1ed9c:	f10d 020e 	add.w	r2, sp, #14
   1eda0:	f7fe fdbd 	bl	1d91e <net_frag_read>
	if (!frag) {
   1eda4:	2800      	cmp	r0, #0
   1eda6:	d0c8      	beq.n	1ed3a <net_icmpv6_get_ra_hdr+0x1e>
	return hdr;
   1eda8:	4628      	mov	r0, r5
   1edaa:	e7c6      	b.n	1ed3a <net_icmpv6_get_ra_hdr+0x1e>

0001edac <net_icmpv6_send_error>:

int net_icmpv6_send_error(struct net_pkt *orig, u8_t type, u8_t code,
			  u32_t param)
{
   1edac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1edb0:	b09f      	sub	sp, #124	; 0x7c
   1edb2:	4605      	mov	r5, r0
   1edb4:	4688      	mov	r8, r1
   1edb6:	4692      	mov	sl, r2
   1edb8:	4699      	mov	r9, r3
	return pkt->frags->data;
   1edba:	6883      	ldr	r3, [r0, #8]
   1edbc:	689b      	ldr	r3, [r3, #8]
	struct net_buf *frag;
	struct net_if *iface;
	size_t extra_len, reserve;
	int err = -EIO;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   1edbe:	799b      	ldrb	r3, [r3, #6]
   1edc0:	2b3a      	cmp	r3, #58	; 0x3a
   1edc2:	d01d      	beq.n	1ee00 <net_icmpv6_send_error+0x54>
	return pkt->iface;
   1edc4:	696f      	ldr	r7, [r5, #20]
		}
	}

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1edc6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1edca:	2000      	movs	r0, #0
   1edcc:	f7fe fbb8 	bl	1d540 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1edd0:	4604      	mov	r4, r0
   1edd2:	2800      	cmp	r0, #0
   1edd4:	f000 8141 	beq.w	1f05a <net_icmpv6_send_error+0x2ae>
	return pkt->frags->data;
   1edd8:	68ab      	ldr	r3, [r5, #8]
   1edda:	6899      	ldr	r1, [r3, #8]
	 * to store the param variable.
	 */
	reserve = sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr) +
		NET_ICMPV6_UNUSED_LEN;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_UDP) {
   1eddc:	798b      	ldrb	r3, [r1, #6]
   1edde:	2b11      	cmp	r3, #17
   1ede0:	d019      	beq.n	1ee16 <net_icmpv6_send_error+0x6a>
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_udp_hdr);
	} else if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_TCP) {
   1ede2:	2b06      	cmp	r3, #6
   1ede4:	d019      	beq.n	1ee1a <net_icmpv6_send_error+0x6e>
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1ede6:	687b      	ldr	r3, [r7, #4]
   1ede8:	689b      	ldr	r3, [r3, #8]
   1edea:	3118      	adds	r1, #24
   1edec:	4638      	mov	r0, r7
   1edee:	4798      	blx	r3
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_tcp_hdr);
	} else {
		size_t space = CONFIG_NET_BUF_DATA_SIZE -
   1edf0:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
			net_if_get_ll_reserve(iface,
					      &NET_IPV6_HDR(orig)->dst);

		if (reserve > space) {
   1edf4:	282f      	cmp	r0, #47	; 0x2f
   1edf6:	f240 80de 	bls.w	1efb6 <net_icmpv6_send_error+0x20a>
			extra_len = 0;
		} else {
			extra_len = space - reserve;
   1edfa:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
   1edfe:	e00d      	b.n	1ee1c <net_icmpv6_send_error+0x70>
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1ee00:	a906      	add	r1, sp, #24
   1ee02:	f7ff fd12 	bl	1e82a <net_icmpv6_get_hdr>
   1ee06:	b118      	cbz	r0, 1ee10 <net_icmpv6_send_error+0x64>
		    icmp_hdr->code < 128) {
   1ee08:	f99d 3019 	ldrsb.w	r3, [sp, #25]
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1ee0c:	2b00      	cmp	r3, #0
   1ee0e:	dbd9      	blt.n	1edc4 <net_icmpv6_send_error+0x18>
			err = -EINVAL;
   1ee10:	f06f 0515 	mvn.w	r5, #21
   1ee14:	e119      	b.n	1f04a <net_icmpv6_send_error+0x29e>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1ee16:	2630      	movs	r6, #48	; 0x30
   1ee18:	e000      	b.n	1ee1c <net_icmpv6_send_error+0x70>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1ee1a:	263c      	movs	r6, #60	; 0x3c
	}

	/* We only copy minimal IPv6 + next header from original message.
	 * This is so that the memory pressure is minimized.
	 */
	frag = net_pkt_copy(orig, extra_len, reserve, PKT_WAIT_TIME);
   1ee1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1ee20:	2230      	movs	r2, #48	; 0x30
   1ee22:	4631      	mov	r1, r6
   1ee24:	4628      	mov	r0, r5
   1ee26:	f7fe fc3d 	bl	1d6a4 <net_pkt_copy>
	if (!frag) {
   1ee2a:	4683      	mov	fp, r0
   1ee2c:	2800      	cmp	r0, #0
   1ee2e:	f000 8104 	beq.w	1f03a <net_icmpv6_send_error+0x28e>
		err = -ENOMEM;
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1ee32:	4601      	mov	r1, r0
   1ee34:	4620      	mov	r0, r4
   1ee36:	f7fe fc1e 	bl	1d676 <net_pkt_frag_add>
	pkt->family = family;
   1ee3a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1ee3e:	220a      	movs	r2, #10
   1ee40:	f362 03c6 	bfi	r3, r2, #3, #4
   1ee44:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1ee48:	6167      	str	r7, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1ee4a:	7d7b      	ldrb	r3, [r7, #21]
   1ee4c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1ee50:	7d7b      	ldrb	r3, [r7, #21]
   1ee52:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1ee56:	f10b 0008 	add.w	r0, fp, #8
   1ee5a:	f7fb ff24 	bl	1aca6 <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1ee5e:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ipv6_ext_len = len;
   1ee62:	2000      	movs	r0, #0
   1ee64:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
	net_pkt_set_ipv6_ext_len(pkt, 0);

	setup_ipv6_header(pkt, extra_len, net_if_ipv6_get_hop_limit(iface),
   1ee68:	b2b6      	uxth	r6, r6
	return iface->ipv6.hop_limit;
   1ee6a:	f897 3294 	ldrb.w	r3, [r7, #660]	; 0x294
   1ee6e:	f88d 8014 	strb.w	r8, [sp, #20]
   1ee72:	f88d a015 	strb.w	sl, [sp, #21]
	struct net_buf *frag = pkt->frags;
   1ee76:	68a1      	ldr	r1, [r4, #8]
	const u32_t unused = 0;
   1ee78:	9006      	str	r0, [sp, #24]
	return pkt->frags->data;
   1ee7a:	688a      	ldr	r2, [r1, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1ee7c:	f04f 0e60 	mov.w	lr, #96	; 0x60
   1ee80:	f882 e000 	strb.w	lr, [r2]
   1ee84:	68a2      	ldr	r2, [r4, #8]
   1ee86:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1ee88:	7050      	strb	r0, [r2, #1]
   1ee8a:	68a2      	ldr	r2, [r4, #8]
   1ee8c:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1ee8e:	7090      	strb	r0, [r2, #2]
   1ee90:	70d0      	strb	r0, [r2, #3]
	sys_put_be16(NET_ICMPH_LEN + extra_len + NET_ICMPV6_UNUSED_LEN,
   1ee92:	3608      	adds	r6, #8
   1ee94:	b2b6      	uxth	r6, r6
   1ee96:	68a2      	ldr	r2, [r4, #8]
   1ee98:	6892      	ldr	r2, [r2, #8]
	dst[0] = val >> 8;
   1ee9a:	0a30      	lsrs	r0, r6, #8
   1ee9c:	7110      	strb	r0, [r2, #4]
	dst[1] = val;
   1ee9e:	7156      	strb	r6, [r2, #5]
   1eea0:	68a2      	ldr	r2, [r4, #8]
   1eea2:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1eea4:	203a      	movs	r0, #58	; 0x3a
   1eea6:	7190      	strb	r0, [r2, #6]
   1eea8:	68a2      	ldr	r2, [r4, #8]
   1eeaa:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->hop_limit = hop_limit;
   1eeac:	71d3      	strb	r3, [r2, #7]
	pkt->ip_hdr_len = len;
   1eeae:	2228      	movs	r2, #40	; 0x28
   1eeb0:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt), &pos,
   1eeb4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1eeb8:	9602      	str	r6, [sp, #8]
   1eeba:	ab05      	add	r3, sp, #20
   1eebc:	9301      	str	r3, [sp, #4]
   1eebe:	f04f 0a01 	mov.w	sl, #1
   1eec2:	f8cd a000 	str.w	sl, [sp]
   1eec6:	f10d 0316 	add.w	r3, sp, #22
   1eeca:	4620      	mov	r0, r4
   1eecc:	f7fe fd99 	bl	1da02 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(icmp_code),
   1eed0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1eed4:	9602      	str	r6, [sp, #8]
   1eed6:	f10d 0315 	add.w	r3, sp, #21
   1eeda:	9301      	str	r3, [sp, #4]
   1eedc:	f8cd a000 	str.w	sl, [sp]
   1eee0:	f10d 0316 	add.w	r3, sp, #22
   1eee4:	4601      	mov	r1, r0
   1eee6:	4620      	mov	r0, r4
   1eee8:	f7fe fd8b 	bl	1da02 <net_pkt_write>
	net_pkt_write(pkt, frag, pos, &pos, 4, (u8_t *)&unused, PKT_WAIT_TIME);
   1eeec:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1eef0:	9602      	str	r6, [sp, #8]
   1eef2:	ab06      	add	r3, sp, #24
   1eef4:	9301      	str	r3, [sp, #4]
   1eef6:	2304      	movs	r3, #4
   1eef8:	9300      	str	r3, [sp, #0]
   1eefa:	f10d 0316 	add.w	r3, sp, #22
   1eefe:	4601      	mov	r1, r0
   1ef00:	4620      	mov	r0, r4
   1ef02:	f7fe fd7e 	bl	1da02 <net_pkt_write>
			  type, code);

	/* Depending on error option, we store the param into the ICMP message.
	 */
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   1ef06:	f1b8 0f04 	cmp.w	r8, #4
   1ef0a:	d056      	beq.n	1efba <net_icmpv6_send_error+0x20e>
	return pkt->frags->data;
   1ef0c:	68ab      	ldr	r3, [r5, #8]
   1ef0e:	689e      	ldr	r6, [r3, #8]
   1ef10:	7e33      	ldrb	r3, [r6, #24]
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
			     sizeof(struct net_icmp_hdr));
	}

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(orig)->dst)) {
   1ef12:	2bff      	cmp	r3, #255	; 0xff
   1ef14:	d05f      	beq.n	1efd6 <net_icmpv6_send_error+0x22a>
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1ef16:	af12      	add	r7, sp, #72	; 0x48
   1ef18:	4633      	mov	r3, r6
   1ef1a:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1ef1e:	6859      	ldr	r1, [r3, #4]
   1ef20:	689a      	ldr	r2, [r3, #8]
   1ef22:	68db      	ldr	r3, [r3, #12]
   1ef24:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1ef26:	af06      	add	r7, sp, #24
   1ef28:	ab12      	add	r3, sp, #72	; 0x48
   1ef2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1ef2c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   1ef30:	68a3      	ldr	r3, [r4, #8]
   1ef32:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1ef36:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   1ef3a:	4633      	mov	r3, r6
   1ef3c:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1ef40:	6859      	ldr	r1, [r3, #4]
   1ef42:	689a      	ldr	r2, [r3, #8]
   1ef44:	68db      	ldr	r3, [r3, #12]
   1ef46:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1ef4a:	ae16      	add	r6, sp, #88	; 0x58
   1ef4c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1ef4e:	f8cc 0008 	str.w	r0, [ip, #8]
   1ef52:	f8cc 100c 	str.w	r1, [ip, #12]
   1ef56:	f8cc 2010 	str.w	r2, [ip, #16]
   1ef5a:	f8cc 3014 	str.w	r3, [ip, #20]
   1ef5e:	68a3      	ldr	r3, [r4, #8]
   1ef60:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1ef64:	ae1a      	add	r6, sp, #104	; 0x68
   1ef66:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1ef6a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1ef6e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1ef70:	f8ce 0018 	str.w	r0, [lr, #24]
   1ef74:	f8ce 101c 	str.w	r1, [lr, #28]
   1ef78:	f8ce 2020 	str.w	r2, [lr, #32]
   1ef7c:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1ef80:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1ef82:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1ef84:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1ef88:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	net_pkt_ll_dst(pkt)->addr = net_pkt_ll_src(orig)->addr;
   1ef8c:	6a2b      	ldr	r3, [r5, #32]
   1ef8e:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = net_pkt_ll_src(orig)->len;
   1ef90:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1ef94:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	/* Clear and then set the chksum */
	frag = net_icmpv6_set_chksum(pkt, pkt->frags);
   1ef98:	68a1      	ldr	r1, [r4, #8]
   1ef9a:	4620      	mov	r0, r4
   1ef9c:	f7ff fbf8 	bl	1e790 <net_icmpv6_set_chksum>
			" from %s to %s", type, code, param,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1efa0:	4620      	mov	r0, r4
   1efa2:	f7fb ff3d 	bl	1ae20 <net_send_data>
   1efa6:	2800      	cmp	r0, #0
   1efa8:	db4a      	blt.n	1f040 <net_icmpv6_send_error+0x294>
   1efaa:	4a2d      	ldr	r2, [pc, #180]	; (1f060 <net_icmpv6_send_error+0x2b4>)
   1efac:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1efae:	3301      	adds	r3, #1
   1efb0:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1efb2:	2500      	movs	r5, #0
   1efb4:	e04d      	b.n	1f052 <net_icmpv6_send_error+0x2a6>
			extra_len = 0;
   1efb6:	2600      	movs	r6, #0
   1efb8:	e730      	b.n	1ee1c <net_icmpv6_send_error+0x70>
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
   1efba:	4620      	mov	r0, r4
   1efbc:	f7fe fe0a 	bl	1dbd4 <net_pkt_icmp_data>
	sys_put_be16(val >> 16, dst);
   1efc0:	ea4f 4319 	mov.w	r3, r9, lsr #16
	dst[0] = val >> 8;
   1efc4:	0a1a      	lsrs	r2, r3, #8
   1efc6:	7102      	strb	r2, [r0, #4]
	dst[1] = val;
   1efc8:	7143      	strb	r3, [r0, #5]
	dst[0] = val >> 8;
   1efca:	f3c9 2307 	ubfx	r3, r9, #8, #8
   1efce:	7183      	strb	r3, [r0, #6]
	dst[1] = val;
   1efd0:	f880 9007 	strb.w	r9, [r0, #7]
   1efd4:	e79a      	b.n	1ef0c <net_icmpv6_send_error+0x160>
   1efd6:	68a3      	ldr	r3, [r4, #8]
   1efd8:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1efdc:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1efe0:	4633      	mov	r3, r6
   1efe2:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1efe6:	6859      	ldr	r1, [r3, #4]
   1efe8:	689a      	ldr	r2, [r3, #8]
   1efea:	68db      	ldr	r3, [r3, #12]
   1efec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1eff0:	ae0a      	add	r6, sp, #40	; 0x28
   1eff2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1eff4:	f8cc 0018 	str.w	r0, [ip, #24]
   1eff8:	f8cc 101c 	str.w	r1, [ip, #28]
   1effc:	f8cc 2020 	str.w	r2, [ip, #32]
   1f000:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1f004:	68a3      	ldr	r3, [r4, #8]
   1f006:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1f00a:	68ab      	ldr	r3, [r5, #8]
   1f00c:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1f00e:	3118      	adds	r1, #24
   1f010:	4638      	mov	r0, r7
   1f012:	f7fc fe6b 	bl	1bcec <net_if_ipv6_select_src_addr>
   1f016:	4603      	mov	r3, r0
   1f018:	ae0e      	add	r6, sp, #56	; 0x38
   1f01a:	6800      	ldr	r0, [r0, #0]
   1f01c:	6859      	ldr	r1, [r3, #4]
   1f01e:	689a      	ldr	r2, [r3, #8]
   1f020:	68db      	ldr	r3, [r3, #12]
   1f022:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1f024:	ae0e      	add	r6, sp, #56	; 0x38
   1f026:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f028:	f8c8 0008 	str.w	r0, [r8, #8]
   1f02c:	f8c8 100c 	str.w	r1, [r8, #12]
   1f030:	f8c8 2010 	str.w	r2, [r8, #16]
   1f034:	f8c8 3014 	str.w	r3, [r8, #20]
   1f038:	e7a2      	b.n	1ef80 <net_icmpv6_send_error+0x1d4>
		err = -ENOMEM;
   1f03a:	f06f 050b 	mvn.w	r5, #11
   1f03e:	e001      	b.n	1f044 <net_icmpv6_send_error+0x298>
	int err = -EIO;
   1f040:	f06f 0504 	mvn.w	r5, #4
	}

drop:
	net_pkt_unref(pkt);
   1f044:	4620      	mov	r0, r4
   1f046:	f7fe faec 	bl	1d622 <net_pkt_unref>
	net_stats.icmp.drop++;
   1f04a:	4a05      	ldr	r2, [pc, #20]	; (1f060 <net_icmpv6_send_error+0x2b4>)
   1f04c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1f04e:	3301      	adds	r3, #1
   1f050:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return err;
}
   1f052:	4628      	mov	r0, r5
   1f054:	b01f      	add	sp, #124	; 0x7c
   1f056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = -ENOMEM;
   1f05a:	f06f 050b 	mvn.w	r5, #11
   1f05e:	e7f4      	b.n	1f04a <net_icmpv6_send_error+0x29e>
   1f060:	20002b50 	.word	0x20002b50

0001f064 <net_icmpv6_send_echo_request>:

int net_icmpv6_send_echo_request(struct net_if *iface,
				 struct in6_addr *dst,
				 u16_t identifier,
				 u16_t sequence)
{
   1f064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f068:	b08d      	sub	sp, #52	; 0x34
   1f06a:	4605      	mov	r5, r0
   1f06c:	460e      	mov	r6, r1
   1f06e:	4692      	mov	sl, r2
   1f070:	4699      	mov	r9, r3
	const struct in6_addr *src;
	struct net_pkt *pkt;

	src = net_if_ipv6_select_src_addr(iface, dst);
   1f072:	f7fc fe3b 	bl	1bcec <net_if_ipv6_select_src_addr>
   1f076:	4680      	mov	r8, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1f078:	686b      	ldr	r3, [r5, #4]
   1f07a:	689b      	ldr	r3, [r3, #8]
   1f07c:	4631      	mov	r1, r6
   1f07e:	4628      	mov	r0, r5
   1f080:	4798      	blx	r3

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1f082:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f086:	f7fe fa5b 	bl	1d540 <net_pkt_get_reserve_tx>
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt, src, dst, iface, IPPROTO_ICMPV6);
   1f08a:	273a      	movs	r7, #58	; 0x3a
   1f08c:	9700      	str	r7, [sp, #0]
   1f08e:	462b      	mov	r3, r5
   1f090:	4632      	mov	r2, r6
   1f092:	4641      	mov	r1, r8
   1f094:	f000 fcc1 	bl	1fa1a <net_ipv6_create_raw>
   1f098:	4604      	mov	r4, r0
	pkt->family = family;
   1f09a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1f09e:	220a      	movs	r2, #10
   1f0a0:	f362 03c6 	bfi	r3, r2, #3, #4
   1f0a4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	pkt->iface = iface;
   1f0a8:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f0aa:	7d6b      	ldrb	r3, [r5, #21]
   1f0ac:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f0b0:	7d6b      	ldrb	r3, [r5, #21]
   1f0b2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
   1f0b6:	aa0c      	add	r2, sp, #48	; 0x30
   1f0b8:	2380      	movs	r3, #128	; 0x80
   1f0ba:	f802 3d23 	strb.w	r3, [r2, #-35]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f0be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f0c2:	2101      	movs	r1, #1
   1f0c4:	f7fe fbe5 	bl	1d892 <net_pkt_append>
   1f0c8:	f04f 0b00 	mov.w	fp, #0
   1f0cc:	aa0c      	add	r2, sp, #48	; 0x30
   1f0ce:	f802 bd24 	strb.w	fp, [r2, #-36]!
   1f0d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f0d6:	2101      	movs	r1, #1
   1f0d8:	4620      	mov	r0, r4
   1f0da:	f7fe fbda 	bl	1d892 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f0de:	ad0c      	add	r5, sp, #48	; 0x30
   1f0e0:	f825 bd22 	strh.w	fp, [r5, #-34]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f0e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f0e8:	462a      	mov	r2, r5
   1f0ea:	2102      	movs	r1, #2
   1f0ec:	4620      	mov	r0, r4
   1f0ee:	f7fe fbd0 	bl	1d892 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f0f2:	ea4f 221a 	mov.w	r2, sl, lsr #8
   1f0f6:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
   1f0fa:	f8ad 200e 	strh.w	r2, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f0fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f102:	462a      	mov	r2, r5
   1f104:	2102      	movs	r1, #2
   1f106:	4620      	mov	r0, r4
   1f108:	f7fe fbc3 	bl	1d892 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f10c:	ea4f 2319 	mov.w	r3, r9, lsr #8
   1f110:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   1f114:	f8ad 300e 	strh.w	r3, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f11c:	462a      	mov	r2, r5
   1f11e:	2102      	movs	r1, #2
   1f120:	4620      	mov	r0, r4
   1f122:	f7fe fbb6 	bl	1d892 <net_pkt_append>
	return pkt->frags->data;
   1f126:	68a3      	ldr	r3, [r4, #8]
   1f128:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_pkt_append_u8(pkt, 0);   /* code */
	net_pkt_append_be16(pkt, 0); /* checksum */
	net_pkt_append_be16(pkt, identifier);
	net_pkt_append_be16(pkt, sequence);

	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1f12c:	ad04      	add	r5, sp, #16
   1f12e:	f8d8 0000 	ldr.w	r0, [r8]
   1f132:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1f136:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1f13a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1f13e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f140:	ad04      	add	r5, sp, #16
   1f142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f144:	f8cc 0008 	str.w	r0, [ip, #8]
   1f148:	f8cc 100c 	str.w	r1, [ip, #12]
   1f14c:	f8cc 2010 	str.w	r2, [ip, #16]
   1f150:	f8cc 3014 	str.w	r3, [ip, #20]
   1f154:	68a3      	ldr	r3, [r4, #8]
   1f156:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1f15a:	ad08      	add	r5, sp, #32
   1f15c:	6830      	ldr	r0, [r6, #0]
   1f15e:	6871      	ldr	r1, [r6, #4]
   1f160:	68b2      	ldr	r2, [r6, #8]
   1f162:	68f3      	ldr	r3, [r6, #12]
   1f164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f166:	ad08      	add	r5, sp, #32
   1f168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f16a:	f8ce 0018 	str.w	r0, [lr, #24]
   1f16e:	f8ce 101c 	str.w	r1, [lr, #28]
   1f172:	f8ce 2020 	str.w	r2, [lr, #32]
   1f176:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24

	/* Clear and then set the chksum */
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1f17a:	68a1      	ldr	r1, [r4, #8]
   1f17c:	4620      	mov	r0, r4
   1f17e:	f7ff fb07 	bl	1e790 <net_icmpv6_set_chksum>

	if (net_ipv6_finalize_raw(pkt, IPPROTO_ICMPV6) < 0) {
   1f182:	4639      	mov	r1, r7
   1f184:	4620      	mov	r0, r4
   1f186:	f000 fce6 	bl	1fb56 <net_ipv6_finalize_raw>
   1f18a:	4558      	cmp	r0, fp
   1f18c:	db0c      	blt.n	1f1a8 <net_icmpv6_send_echo_request+0x144>
			" from %s to %s", NET_ICMPV6_ECHO_REQUEST,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1f18e:	4620      	mov	r0, r4
   1f190:	f7fb fe46 	bl	1ae20 <net_send_data>
   1f194:	4558      	cmp	r0, fp
   1f196:	db07      	blt.n	1f1a8 <net_icmpv6_send_echo_request+0x144>
	net_stats.icmp.sent++;
   1f198:	4a08      	ldr	r2, [pc, #32]	; (1f1bc <net_icmpv6_send_echo_request+0x158>)
   1f19a:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1f19c:	3301      	adds	r3, #1
   1f19e:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1f1a0:	4658      	mov	r0, fp
drop:
	net_pkt_unref(pkt);
	net_stats_update_icmp_drop();

	return -EIO;
}
   1f1a2:	b00d      	add	sp, #52	; 0x34
   1f1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_pkt_unref(pkt);
   1f1a8:	4620      	mov	r0, r4
   1f1aa:	f7fe fa3a 	bl	1d622 <net_pkt_unref>
	net_stats.icmp.drop++;
   1f1ae:	4a03      	ldr	r2, [pc, #12]	; (1f1bc <net_icmpv6_send_echo_request+0x158>)
   1f1b0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1f1b2:	3301      	adds	r3, #1
   1f1b4:	63d3      	str	r3, [r2, #60]	; 0x3c
	return -EIO;
   1f1b6:	f06f 0004 	mvn.w	r0, #4
   1f1ba:	e7f2      	b.n	1f1a2 <net_icmpv6_send_echo_request+0x13e>
   1f1bc:	20002b50 	.word	0x20002b50

0001f1c0 <net_icmpv6_input>:

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  u8_t type, u8_t code)
{
   1f1c0:	b538      	push	{r3, r4, r5, lr}
	net_stats.icmp.recv++;
   1f1c2:	4c12      	ldr	r4, [pc, #72]	; (1f20c <net_icmpv6_input+0x4c>)
   1f1c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f1c6:	3301      	adds	r3, #1
   1f1c8:	6363      	str	r3, [r4, #52]	; 0x34
	return list->head;
   1f1ca:	4b11      	ldr	r3, [pc, #68]	; (1f210 <net_icmpv6_input+0x50>)
   1f1cc:	681b      	ldr	r3, [r3, #0]
   1f1ce:	e005      	b.n	1f1dc <net_icmpv6_input+0x1c>
	struct net_icmpv6_handler *cb;

	net_stats_update_icmp_recv();

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1f1d0:	461d      	mov	r5, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1f1d2:	b17b      	cbz	r3, 1f1f4 <net_icmpv6_input+0x34>
	return node->next;
   1f1d4:	681c      	ldr	r4, [r3, #0]
   1f1d6:	b18c      	cbz	r4, 1f1fc <net_icmpv6_input+0x3c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1f1d8:	b175      	cbz	r5, 1f1f8 <net_icmpv6_input+0x38>
	return node->next;
   1f1da:	681b      	ldr	r3, [r3, #0]
   1f1dc:	b183      	cbz	r3, 1f200 <net_icmpv6_input+0x40>
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   1f1de:	791c      	ldrb	r4, [r3, #4]
   1f1e0:	428c      	cmp	r4, r1
   1f1e2:	d1f5      	bne.n	1f1d0 <net_icmpv6_input+0x10>
   1f1e4:	795c      	ldrb	r4, [r3, #5]
   1f1e6:	4294      	cmp	r4, r2
   1f1e8:	d001      	beq.n	1f1ee <net_icmpv6_input+0x2e>
   1f1ea:	2c00      	cmp	r4, #0
   1f1ec:	d1f0      	bne.n	1f1d0 <net_icmpv6_input+0x10>
			return cb->handler(pkt);
   1f1ee:	689b      	ldr	r3, [r3, #8]
   1f1f0:	4798      	blx	r3
   1f1f2:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1f1f4:	461c      	mov	r4, r3
   1f1f6:	e7ee      	b.n	1f1d6 <net_icmpv6_input+0x16>
   1f1f8:	2300      	movs	r3, #0
   1f1fa:	e7ef      	b.n	1f1dc <net_icmpv6_input+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1f1fc:	2300      	movs	r3, #0
   1f1fe:	e7ed      	b.n	1f1dc <net_icmpv6_input+0x1c>
	net_stats.icmp.drop++;
   1f200:	4a02      	ldr	r2, [pc, #8]	; (1f20c <net_icmpv6_input+0x4c>)
   1f202:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1f204:	3301      	adds	r3, #1
   1f206:	63d3      	str	r3, [r2, #60]	; 0x3c
		}
	}

	net_stats_update_icmp_drop();

	return NET_DROP;
   1f208:	2002      	movs	r0, #2
}
   1f20a:	bd38      	pop	{r3, r4, r5, pc}
   1f20c:	20002b50 	.word	0x20002b50
   1f210:	20001f7c 	.word	0x20001f7c

0001f214 <net_icmpv6_init>:
	.code = 0,
	.handler = handle_echo_request,
};

void net_icmpv6_init(void)
{
   1f214:	b508      	push	{r3, lr}
	net_icmpv6_register_handler(&echo_request_handler);
   1f216:	4802      	ldr	r0, [pc, #8]	; (1f220 <net_icmpv6_init+0xc>)
   1f218:	f7ff fa8a 	bl	1e730 <net_icmpv6_register_handler>
   1f21c:	bd08      	pop	{r3, pc}
   1f21e:	bf00      	nop
   1f220:	2000bf20 	.word	0x2000bf20

0001f224 <net_nbr_unref>:
void net_nbr_unref_debug(struct net_nbr *nbr, const char *caller, int line)
#define net_nbr_unref(nbr) net_nbr_unref_debug(nbr, __func__, __LINE__)
#else
void net_nbr_unref(struct net_nbr *nbr)
#endif
{
   1f224:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref - 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref - 1);
#endif
	if (--nbr->ref) {
   1f226:	7803      	ldrb	r3, [r0, #0]
   1f228:	3b01      	subs	r3, #1
   1f22a:	b2db      	uxtb	r3, r3
   1f22c:	7003      	strb	r3, [r0, #0]
   1f22e:	b913      	cbnz	r3, 1f236 <net_nbr_unref+0x12>
		return;
	}

	if (nbr->remove) {
   1f230:	6903      	ldr	r3, [r0, #16]
   1f232:	b103      	cbz	r3, 1f236 <net_nbr_unref+0x12>
		nbr->remove(nbr);
   1f234:	4798      	blx	r3
   1f236:	bd08      	pop	{r3, pc}

0001f238 <net_nbr_ref>:
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref + 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref + 1);
#endif
	nbr->ref++;
   1f238:	7803      	ldrb	r3, [r0, #0]
   1f23a:	3301      	adds	r3, #1
   1f23c:	7003      	strb	r3, [r0, #0]

	return nbr;
}
   1f23e:	4770      	bx	lr

0001f240 <net_nbr_get>:

struct net_nbr *net_nbr_get(struct net_nbr_table *table)
{
	int i;

	for (i = 0; i < table->nbr_count; i++) {
   1f240:	2100      	movs	r1, #0
   1f242:	8903      	ldrh	r3, [r0, #8]
   1f244:	4299      	cmp	r1, r3
   1f246:	da17      	bge.n	1f278 <net_nbr_get+0x38>
{
   1f248:	b510      	push	{r4, lr}
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   1f24a:	6802      	ldr	r2, [r0, #0]
			  start->size + start->extra_data_size) * idx));
   1f24c:	8853      	ldrh	r3, [r2, #2]
   1f24e:	8894      	ldrh	r4, [r2, #4]
   1f250:	4423      	add	r3, r4
   1f252:	3314      	adds	r3, #20
   1f254:	fb03 f301 	mul.w	r3, r3, r1
	return (struct net_nbr *)((void *)start +
   1f258:	18d4      	adds	r4, r2, r3

		if (!nbr->ref) {
   1f25a:	5cd3      	ldrb	r3, [r2, r3]
   1f25c:	b12b      	cbz	r3, 1f26a <net_nbr_get+0x2a>
	for (i = 0; i < table->nbr_count; i++) {
   1f25e:	3101      	adds	r1, #1
   1f260:	8903      	ldrh	r3, [r0, #8]
   1f262:	4299      	cmp	r1, r3
   1f264:	dbf1      	blt.n	1f24a <net_nbr_get+0xa>

			return net_nbr_ref(nbr);
		}
	}

	return NULL;
   1f266:	2000      	movs	r0, #0
}
   1f268:	bd10      	pop	{r4, pc}
			nbr->data = nbr->__nbr;
   1f26a:	f104 0314 	add.w	r3, r4, #20
   1f26e:	60e3      	str	r3, [r4, #12]
			return net_nbr_ref(nbr);
   1f270:	4620      	mov	r0, r4
   1f272:	f7ff ffe1 	bl	1f238 <net_nbr_ref>
   1f276:	bd10      	pop	{r4, pc}
	return NULL;
   1f278:	2000      	movs	r0, #0
   1f27a:	4770      	bx	lr

0001f27c <net_nbr_link>:
int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 struct net_linkaddr *lladdr)
{
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1f27c:	7843      	ldrb	r3, [r0, #1]
   1f27e:	2bff      	cmp	r3, #255	; 0xff
   1f280:	d158      	bne.n	1f334 <net_nbr_link+0xb8>
{
   1f282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f286:	4690      	mov	r8, r2
   1f288:	460f      	mov	r7, r1
   1f28a:	4606      	mov	r6, r0
   1f28c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f290:	2400      	movs	r4, #0
   1f292:	e008      	b.n	1f2a6 <net_nbr_link+0x2a>
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1f294:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1f298:	4b2a      	ldr	r3, [pc, #168]	; (1f344 <net_nbr_link+0xc8>)
   1f29a:	4413      	add	r3, r2
   1f29c:	7a1b      	ldrb	r3, [r3, #8]
   1f29e:	b933      	cbnz	r3, 1f2ae <net_nbr_link+0x32>
			avail = i;
   1f2a0:	4625      	mov	r5, r4
   1f2a2:	e004      	b.n	1f2ae <net_nbr_link+0x32>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f2a4:	3401      	adds	r4, #1
   1f2a6:	2c07      	cmp	r4, #7
   1f2a8:	dc1e      	bgt.n	1f2e8 <net_nbr_link+0x6c>
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1f2aa:	2d00      	cmp	r5, #0
   1f2ac:	dbf2      	blt.n	1f294 <net_nbr_link+0x18>
		}

		if (net_neighbor_lladdr[i].ref &&
   1f2ae:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1f2b2:	4b24      	ldr	r3, [pc, #144]	; (1f344 <net_nbr_link+0xc8>)
   1f2b4:	4413      	add	r3, r2
   1f2b6:	7a1b      	ldrb	r3, [r3, #8]
   1f2b8:	2b00      	cmp	r3, #0
   1f2ba:	d0f3      	beq.n	1f2a4 <net_nbr_link+0x28>
		    !memcmp(lladdr->addr,
			    net_neighbor_lladdr[i].lladdr.addr,
   1f2bc:	4921      	ldr	r1, [pc, #132]	; (1f344 <net_nbr_link+0xc8>)
   1f2be:	4411      	add	r1, r2
		    !memcmp(lladdr->addr,
   1f2c0:	f898 2004 	ldrb.w	r2, [r8, #4]
   1f2c4:	3102      	adds	r1, #2
   1f2c6:	f8d8 0000 	ldr.w	r0, [r8]
   1f2ca:	f00a fec5 	bl	2a058 <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   1f2ce:	4603      	mov	r3, r0
   1f2d0:	2800      	cmp	r0, #0
   1f2d2:	d1e7      	bne.n	1f2a4 <net_nbr_link+0x28>
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   1f2d4:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
   1f2d8:	4a1a      	ldr	r2, [pc, #104]	; (1f344 <net_nbr_link+0xc8>)
   1f2da:	440a      	add	r2, r1
   1f2dc:	7a11      	ldrb	r1, [r2, #8]
   1f2de:	3101      	adds	r1, #1
   1f2e0:	7211      	strb	r1, [r2, #8]

			nbr->idx = i;
   1f2e2:	7074      	strb	r4, [r6, #1]
			nbr->iface = iface;
   1f2e4:	60b7      	str	r7, [r6, #8]

			return 0;
   1f2e6:	e019      	b.n	1f31c <net_nbr_link+0xa0>
		}
	}

	if (avail < 0) {
   1f2e8:	2d00      	cmp	r5, #0
   1f2ea:	db27      	blt.n	1f33c <net_nbr_link+0xc0>
	}

	/* There was no existing entry in the lladdr cache,
	 * so allocate one for this lladdr.
	 */
	net_neighbor_lladdr[avail].ref++;
   1f2ec:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
   1f2f0:	4b14      	ldr	r3, [pc, #80]	; (1f344 <net_nbr_link+0xc8>)
   1f2f2:	4413      	add	r3, r2
   1f2f4:	7a1a      	ldrb	r2, [r3, #8]
   1f2f6:	3201      	adds	r2, #1
   1f2f8:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   1f2fa:	7075      	strb	r5, [r6, #1]

	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   1f2fc:	f8d8 1000 	ldr.w	r1, [r8]
   1f300:	f898 2004 	ldrb.w	r2, [r8, #4]
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   1f304:	b109      	cbz	r1, 1f30a <net_nbr_link+0x8e>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1f306:	2a06      	cmp	r2, #6
   1f308:	d90b      	bls.n	1f322 <net_nbr_link+0xa6>
			 lladdr->len);
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   1f30a:	f898 2004 	ldrb.w	r2, [r8, #4]
   1f30e:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1f312:	4b0c      	ldr	r3, [pc, #48]	; (1f344 <net_nbr_link+0xc8>)
   1f314:	441d      	add	r5, r3
   1f316:	706a      	strb	r2, [r5, #1]

	nbr->iface = iface;
   1f318:	60b7      	str	r7, [r6, #8]

	return 0;
   1f31a:	2300      	movs	r3, #0
}
   1f31c:	4618      	mov	r0, r3
   1f31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
   1f322:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   1f326:	4807      	ldr	r0, [pc, #28]	; (1f344 <net_nbr_link+0xc8>)
   1f328:	4418      	add	r0, r3
   1f32a:	7042      	strb	r2, [r0, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1f32c:	3002      	adds	r0, #2
   1f32e:	f7e0 ffc7 	bl	2c0 <memcpy>
   1f332:	e7ea      	b.n	1f30a <net_nbr_link+0x8e>
		return -EALREADY;
   1f334:	f06f 0377 	mvn.w	r3, #119	; 0x77
}
   1f338:	4618      	mov	r0, r3
   1f33a:	4770      	bx	lr
		return -ENOENT;
   1f33c:	f06f 0301 	mvn.w	r3, #1
   1f340:	e7ec      	b.n	1f31c <net_nbr_link+0xa0>
   1f342:	bf00      	nop
   1f344:	20001f84 	.word	0x20001f84

0001f348 <net_nbr_get_lladdr>:
{
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
			"idx %d >= max %d", idx,
			CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
   1f348:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   1f34c:	4b01      	ldr	r3, [pc, #4]	; (1f354 <net_nbr_get_lladdr+0xc>)
   1f34e:	4418      	add	r0, r3
   1f350:	4770      	bx	lr
   1f352:	bf00      	nop
   1f354:	20001f84 	.word	0x20001f84

0001f358 <ipv6_nbr_set_state>:
	bool is_router;
};

static inline struct net_ipv6_nbr_data *net_ipv6_nbr_data(struct net_nbr *nbr)
{
	return (struct net_ipv6_nbr_data *)nbr->data;
   1f358:	68c2      	ldr	r2, [r0, #12]
}

static void ipv6_nbr_set_state(struct net_nbr *nbr,
			       enum net_ipv6_nbr_state new_state)
{
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   1f35a:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
   1f35e:	428b      	cmp	r3, r1
   1f360:	d003      	beq.n	1f36a <ipv6_nbr_set_state+0x12>
   1f362:	2b05      	cmp	r3, #5
   1f364:	d001      	beq.n	1f36a <ipv6_nbr_set_state+0x12>

	NET_DBG("nbr %p %s -> %s", nbr,
		net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state),
		net_ipv6_nbr_state2str(new_state));

	net_ipv6_nbr_data(nbr)->state = new_state;
   1f366:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
   1f36a:	4770      	bx	lr

0001f36c <iface_cb>:
	net_nbr_cb_t cb;
	void *user_data;
};

static void iface_cb(struct net_if *iface, void *user_data)
{
   1f36c:	b570      	push	{r4, r5, r6, lr}
   1f36e:	4605      	mov	r5, r0
   1f370:	460e      	mov	r6, r1
	struct iface_cb_data *data = user_data;
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f372:	2400      	movs	r4, #0
   1f374:	e000      	b.n	1f378 <iface_cb+0xc>
   1f376:	3401      	adds	r4, #1
   1f378:	2c07      	cmp	r4, #7
   1f37a:	dc0c      	bgt.n	1f396 <iface_cb+0x2a>
	return &net_neighbor_pool[idx].nbr;
   1f37c:	4a06      	ldr	r2, [pc, #24]	; (1f398 <iface_cb+0x2c>)
   1f37e:	01e3      	lsls	r3, r4, #7
   1f380:	18d0      	adds	r0, r2, r3
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref || nbr->iface != iface) {
   1f382:	5cd3      	ldrb	r3, [r2, r3]
   1f384:	2b00      	cmp	r3, #0
   1f386:	d0f6      	beq.n	1f376 <iface_cb+0xa>
   1f388:	6883      	ldr	r3, [r0, #8]
   1f38a:	42ab      	cmp	r3, r5
   1f38c:	d1f3      	bne.n	1f376 <iface_cb+0xa>
			continue;
		}

		data->cb(nbr, data->user_data);
   1f38e:	6833      	ldr	r3, [r6, #0]
   1f390:	6871      	ldr	r1, [r6, #4]
   1f392:	4798      	blx	r3
   1f394:	e7ef      	b.n	1f376 <iface_cb+0xa>
	}
}
   1f396:	bd70      	pop	{r4, r5, r6, pc}
   1f398:	2000bf50 	.word	0x2000bf50

0001f39c <iface_cb>:

	return "<unknown type>";
}

static void iface_cb(struct net_if *iface, void *user_data)
{
   1f39c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f39e:	b085      	sub	sp, #20
   1f3a0:	4605      	mov	r5, r0
	const char *extra;
	int i, count;

	ARG_UNUSED(user_data);

	printk("\nInterface %p (%s)\n", iface, iface2str(iface, &extra));
   1f3a2:	a903      	add	r1, sp, #12
   1f3a4:	f004 ff0a 	bl	241bc <iface2str>
   1f3a8:	4602      	mov	r2, r0
   1f3aa:	4629      	mov	r1, r5
   1f3ac:	4885      	ldr	r0, [pc, #532]	; (1f5c4 <iface_cb+0x228>)
   1f3ae:	f7e3 fda1 	bl	2ef4 <printk>
	printk("=======================%s\n", extra);
   1f3b2:	9903      	ldr	r1, [sp, #12]
   1f3b4:	4884      	ldr	r0, [pc, #528]	; (1f5c8 <iface_cb+0x22c>)
   1f3b6:	f7e3 fd9d 	bl	2ef4 <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f3ba:	f3bf 8f5b 	dmb	ish
   1f3be:	68eb      	ldr	r3, [r5, #12]
   1f3c0:	f3bf 8f5b 	dmb	ish

	if (!net_if_is_up(iface)) {
   1f3c4:	f013 0f01 	tst.w	r3, #1
   1f3c8:	d014      	beq.n	1f3f4 <iface_cb+0x58>
#if NET_LOG_ENABLED > 0
static inline char *net_sprint_ll_addr(const u8_t *ll, u8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   1f3ca:	2318      	movs	r3, #24
   1f3cc:	4a7f      	ldr	r2, [pc, #508]	; (1f5cc <iface_cb+0x230>)
   1f3ce:	7d29      	ldrb	r1, [r5, #20]
   1f3d0:	6928      	ldr	r0, [r5, #16]
   1f3d2:	f7fe fd45 	bl	1de60 <net_sprint_ll_addr_buf>
		printk("Interface is down.\n");
		return;
	}

	printk("Link addr : %s\n", net_sprint_ll_addr(iface->link_addr.addr,
   1f3d6:	4601      	mov	r1, r0
   1f3d8:	487d      	ldr	r0, [pc, #500]	; (1f5d0 <iface_cb+0x234>)
   1f3da:	f7e3 fd8b 	bl	2ef4 <printk>
						      iface->link_addr.len));
	printk("MTU       : %d\n", iface->mtu);
   1f3de:	8d29      	ldrh	r1, [r5, #40]	; 0x28
   1f3e0:	487c      	ldr	r0, [pc, #496]	; (1f5d4 <iface_cb+0x238>)
   1f3e2:	f7e3 fd87 	bl	2ef4 <printk>

#if defined(CONFIG_NET_IPV6)
	count = 0;

	printk("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
   1f3e6:	2103      	movs	r1, #3
   1f3e8:	487b      	ldr	r0, [pc, #492]	; (1f5d8 <iface_cb+0x23c>)
   1f3ea:	f7e3 fd83 	bl	2ef4 <printk>
	count = 0;
   1f3ee:	2700      	movs	r7, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1f3f0:	463c      	mov	r4, r7
   1f3f2:	e02e      	b.n	1f452 <iface_cb+0xb6>
		printk("Interface is down.\n");
   1f3f4:	4879      	ldr	r0, [pc, #484]	; (1f5dc <iface_cb+0x240>)
   1f3f6:	f7e3 fd7d 	bl	2ef4 <printk>
   1f3fa:	e0db      	b.n	1f5b4 <iface_cb+0x218>
		return "<unknown type>";
   1f3fc:	4a78      	ldr	r2, [pc, #480]	; (1f5e0 <iface_cb+0x244>)
   1f3fe:	e006      	b.n	1f40e <iface_cb+0x72>
		return "DHCP";
   1f400:	4a78      	ldr	r2, [pc, #480]	; (1f5e4 <iface_cb+0x248>)
   1f402:	e004      	b.n	1f40e <iface_cb+0x72>
		return "manual";
   1f404:	4a78      	ldr	r2, [pc, #480]	; (1f5e8 <iface_cb+0x24c>)
   1f406:	e002      	b.n	1f40e <iface_cb+0x72>
	return "<invalid type>";
   1f408:	4a78      	ldr	r2, [pc, #480]	; (1f5ec <iface_cb+0x250>)
   1f40a:	e000      	b.n	1f40e <iface_cb+0x72>
		return "autoconf";
   1f40c:	4a78      	ldr	r2, [pc, #480]	; (1f5f0 <iface_cb+0x254>)

		if (!unicast->is_used) {
			continue;
		}

		printk("\t%s %s %s%s\n",
   1f40e:	236c      	movs	r3, #108	; 0x6c
   1f410:	fb03 5304 	mla	r3, r3, r4, r5
   1f414:	f993 3091 	ldrsb.w	r3, [r3, #145]	; 0x91
	switch (addr_state) {
   1f418:	3301      	adds	r3, #1
   1f41a:	2b03      	cmp	r3, #3
   1f41c:	d809      	bhi.n	1f432 <iface_cb+0x96>
   1f41e:	e8df f003 	tbb	[pc, r3]
   1f422:	0a02      	.short	0x0a02
   1f424:	0604      	.short	0x0604
		return "<unknown state>";
   1f426:	4b73      	ldr	r3, [pc, #460]	; (1f5f4 <iface_cb+0x258>)
   1f428:	e006      	b.n	1f438 <iface_cb+0x9c>
		return "preferred";
   1f42a:	4b73      	ldr	r3, [pc, #460]	; (1f5f8 <iface_cb+0x25c>)
   1f42c:	e004      	b.n	1f438 <iface_cb+0x9c>
		return "deprecated";
   1f42e:	4b73      	ldr	r3, [pc, #460]	; (1f5fc <iface_cb+0x260>)
   1f430:	e002      	b.n	1f438 <iface_cb+0x9c>
	return "<invalid state>";
   1f432:	4b73      	ldr	r3, [pc, #460]	; (1f600 <iface_cb+0x264>)
   1f434:	e000      	b.n	1f438 <iface_cb+0x9c>
		return "tentative";
   1f436:	4b73      	ldr	r3, [pc, #460]	; (1f604 <iface_cb+0x268>)
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
		       addrtype2str(unicast->addr_type),
		       addrstate2str(unicast->addr_state),
		       unicast->is_infinite ? " infinite" : "");
   1f438:	266c      	movs	r6, #108	; 0x6c
   1f43a:	fb06 5604 	mla	r6, r6, r4, r5
   1f43e:	f896 0093 	ldrb.w	r0, [r6, #147]	; 0x93
		printk("\t%s %s %s%s\n",
   1f442:	b368      	cbz	r0, 1f4a0 <iface_cb+0x104>
   1f444:	4870      	ldr	r0, [pc, #448]	; (1f608 <iface_cb+0x26c>)
   1f446:	9000      	str	r0, [sp, #0]
   1f448:	4870      	ldr	r0, [pc, #448]	; (1f60c <iface_cb+0x270>)
   1f44a:	f7e3 fd53 	bl	2ef4 <printk>
		count++;
   1f44e:	3701      	adds	r7, #1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1f450:	3401      	adds	r4, #1
   1f452:	2c02      	cmp	r4, #2
   1f454:	dc26      	bgt.n	1f4a4 <iface_cb+0x108>
		if (!unicast->is_used) {
   1f456:	236c      	movs	r3, #108	; 0x6c
   1f458:	fb03 5304 	mla	r3, r3, r4, r5
   1f45c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1f460:	2b00      	cmp	r3, #0
   1f462:	d0f5      	beq.n	1f450 <iface_cb+0xb4>
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
   1f464:	266c      	movs	r6, #108	; 0x6c
   1f466:	fb06 f604 	mul.w	r6, r6, r4
   1f46a:	f106 0120 	add.w	r1, r6, #32
   1f46e:	4429      	add	r1, r5
static inline char *net_sprint_ipv6_addr(const struct in6_addr *addr)
{
#if defined(CONFIG_NET_IPV6)
	static char buf[NET_IPV6_ADDR_LEN];

	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   1f470:	2328      	movs	r3, #40	; 0x28
   1f472:	4a67      	ldr	r2, [pc, #412]	; (1f610 <iface_cb+0x274>)
   1f474:	3110      	adds	r1, #16
   1f476:	200a      	movs	r0, #10
   1f478:	f7fe fd1c 	bl	1deb4 <net_addr_ntop>
   1f47c:	4601      	mov	r1, r0
		printk("\t%s %s %s%s\n",
   1f47e:	442e      	add	r6, r5
   1f480:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
	switch (addr_type) {
   1f484:	2b03      	cmp	r3, #3
   1f486:	d8bf      	bhi.n	1f408 <iface_cb+0x6c>
   1f488:	a201      	add	r2, pc, #4	; (adr r2, 1f490 <iface_cb+0xf4>)
   1f48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f48e:	bf00      	nop
   1f490:	0001f3fd 	.word	0x0001f3fd
   1f494:	0001f40d 	.word	0x0001f40d
   1f498:	0001f401 	.word	0x0001f401
   1f49c:	0001f405 	.word	0x0001f405
		printk("\t%s %s %s%s\n",
   1f4a0:	485c      	ldr	r0, [pc, #368]	; (1f614 <iface_cb+0x278>)
   1f4a2:	e7d0      	b.n	1f446 <iface_cb+0xaa>
	}

	if (count == 0) {
   1f4a4:	b137      	cbz	r7, 1f4b4 <iface_cb+0x118>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 multicast addresses (max %d):\n", NET_IF_MAX_IPV6_MADDR);
   1f4a6:	2105      	movs	r1, #5
   1f4a8:	485b      	ldr	r0, [pc, #364]	; (1f618 <iface_cb+0x27c>)
   1f4aa:	f7e3 fd23 	bl	2ef4 <printk>
	count = 0;
   1f4ae:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1f4b0:	4634      	mov	r4, r6
   1f4b2:	e004      	b.n	1f4be <iface_cb+0x122>
		printk("\t<none>\n");
   1f4b4:	4859      	ldr	r0, [pc, #356]	; (1f61c <iface_cb+0x280>)
   1f4b6:	f7e3 fd1d 	bl	2ef4 <printk>
   1f4ba:	e7f4      	b.n	1f4a6 <iface_cb+0x10a>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1f4bc:	3401      	adds	r4, #1
   1f4be:	2c04      	cmp	r4, #4
   1f4c0:	dc18      	bgt.n	1f4f4 <iface_cb+0x158>
		mcast = &iface->ipv6.mcast[i];

		if (!mcast->is_used) {
   1f4c2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1f4c6:	00d3      	lsls	r3, r2, #3
   1f4c8:	461a      	mov	r2, r3
   1f4ca:	442b      	add	r3, r5
   1f4cc:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1f4d0:	f013 0f01 	tst.w	r3, #1
   1f4d4:	d0f2      	beq.n	1f4bc <iface_cb+0x120>
			continue;
		}

		printk("\t%s\n",
		       net_sprint_ipv6_addr(&mcast->address.in6_addr));
   1f4d6:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1f4da:	4429      	add	r1, r5
   1f4dc:	2328      	movs	r3, #40	; 0x28
   1f4de:	4a4c      	ldr	r2, [pc, #304]	; (1f610 <iface_cb+0x274>)
   1f4e0:	3118      	adds	r1, #24
   1f4e2:	200a      	movs	r0, #10
   1f4e4:	f7fe fce6 	bl	1deb4 <net_addr_ntop>
		printk("\t%s\n",
   1f4e8:	4601      	mov	r1, r0
   1f4ea:	484d      	ldr	r0, [pc, #308]	; (1f620 <iface_cb+0x284>)
   1f4ec:	f7e3 fd02 	bl	2ef4 <printk>

		count++;
   1f4f0:	3601      	adds	r6, #1
   1f4f2:	e7e3      	b.n	1f4bc <iface_cb+0x120>
	}

	if (count == 0) {
   1f4f4:	b136      	cbz	r6, 1f504 <iface_cb+0x168>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
   1f4f6:	2102      	movs	r1, #2
   1f4f8:	484a      	ldr	r0, [pc, #296]	; (1f624 <iface_cb+0x288>)
   1f4fa:	f7e3 fcfb 	bl	2ef4 <printk>
	count = 0;
   1f4fe:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1f500:	4634      	mov	r4, r6
   1f502:	e009      	b.n	1f518 <iface_cb+0x17c>
		printk("\t<none>\n");
   1f504:	4845      	ldr	r0, [pc, #276]	; (1f61c <iface_cb+0x280>)
   1f506:	f7e3 fcf5 	bl	2ef4 <printk>
   1f50a:	e7f4      	b.n	1f4f6 <iface_cb+0x15a>

		if (!prefix->is_used) {
			continue;
		}

		printk("\t%s/%d%s\n",
   1f50c:	4b41      	ldr	r3, [pc, #260]	; (1f614 <iface_cb+0x278>)
   1f50e:	4846      	ldr	r0, [pc, #280]	; (1f628 <iface_cb+0x28c>)
   1f510:	f7e3 fcf0 	bl	2ef4 <printk>
		       net_sprint_ipv6_addr(&prefix->prefix),
		       prefix->len,
		       prefix->is_infinite ? " infinite" : "");

		count++;
   1f514:	3601      	adds	r6, #1
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1f516:	3401      	adds	r4, #1
   1f518:	2c01      	cmp	r4, #1
   1f51a:	dc1e      	bgt.n	1f55a <iface_cb+0x1be>
		if (!prefix->is_used) {
   1f51c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1f520:	0093      	lsls	r3, r2, #2
   1f522:	461a      	mov	r2, r3
   1f524:	442b      	add	r3, r5
   1f526:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
   1f52a:	2b00      	cmp	r3, #0
   1f52c:	d0f3      	beq.n	1f516 <iface_cb+0x17a>
		       net_sprint_ipv6_addr(&prefix->prefix),
   1f52e:	0127      	lsls	r7, r4, #4
   1f530:	f502 7100 	add.w	r1, r2, #512	; 0x200
   1f534:	4429      	add	r1, r5
   1f536:	2328      	movs	r3, #40	; 0x28
   1f538:	4a35      	ldr	r2, [pc, #212]	; (1f610 <iface_cb+0x274>)
   1f53a:	3110      	adds	r1, #16
   1f53c:	200a      	movs	r0, #10
   1f53e:	f7fe fcb9 	bl	1deb4 <net_addr_ntop>
   1f542:	4601      	mov	r1, r0
		       prefix->len,
   1f544:	1b3f      	subs	r7, r7, r4
   1f546:	00bb      	lsls	r3, r7, #2
   1f548:	442b      	add	r3, r5
   1f54a:	f893 2220 	ldrb.w	r2, [r3, #544]	; 0x220
		       prefix->is_infinite ? " infinite" : "");
   1f54e:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
		printk("\t%s/%d%s\n",
   1f552:	2b00      	cmp	r3, #0
   1f554:	d0da      	beq.n	1f50c <iface_cb+0x170>
   1f556:	4b2c      	ldr	r3, [pc, #176]	; (1f608 <iface_cb+0x26c>)
   1f558:	e7d9      	b.n	1f50e <iface_cb+0x172>
	}

	if (count == 0) {
   1f55a:	b36e      	cbz	r6, 1f5b8 <iface_cb+0x21c>
		printk("\t<none>\n");
	}

	router = net_if_ipv6_router_find_default(iface, NULL);
   1f55c:	2100      	movs	r1, #0
   1f55e:	4628      	mov	r0, r5
   1f560:	f7fc fade 	bl	1bb20 <net_if_ipv6_router_find_default>
	if (router) {
   1f564:	4604      	mov	r4, r0
   1f566:	b188      	cbz	r0, 1f58c <iface_cb+0x1f0>
		printk("IPv6 default router :\n");
   1f568:	4830      	ldr	r0, [pc, #192]	; (1f62c <iface_cb+0x290>)
   1f56a:	f7e3 fcc3 	bl	2ef4 <printk>
   1f56e:	2328      	movs	r3, #40	; 0x28
   1f570:	4a27      	ldr	r2, [pc, #156]	; (1f610 <iface_cb+0x274>)
   1f572:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   1f576:	200a      	movs	r0, #10
   1f578:	f7fe fc9c 	bl	1deb4 <net_addr_ntop>
   1f57c:	4601      	mov	r1, r0
		printk("\t%s%s\n",
		       net_sprint_ipv6_addr(&router->address.in6_addr),
		       router->is_infinite ? " infinite" : "");
   1f57e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		printk("\t%s%s\n",
   1f582:	b1eb      	cbz	r3, 1f5c0 <iface_cb+0x224>
   1f584:	4a20      	ldr	r2, [pc, #128]	; (1f608 <iface_cb+0x26c>)
   1f586:	482a      	ldr	r0, [pc, #168]	; (1f630 <iface_cb+0x294>)
   1f588:	f7e3 fcb4 	bl	2ef4 <printk>
	}

	printk("IPv6 hop limit           : %d\n", iface->ipv6.hop_limit);
   1f58c:	f895 1294 	ldrb.w	r1, [r5, #660]	; 0x294
   1f590:	4828      	ldr	r0, [pc, #160]	; (1f634 <iface_cb+0x298>)
   1f592:	f7e3 fcaf 	bl	2ef4 <printk>
	printk("IPv6 base reachable time : %d\n",
   1f596:	f8d5 1288 	ldr.w	r1, [r5, #648]	; 0x288
   1f59a:	4827      	ldr	r0, [pc, #156]	; (1f638 <iface_cb+0x29c>)
   1f59c:	f7e3 fcaa 	bl	2ef4 <printk>
	       iface->ipv6.base_reachable_time);
	printk("IPv6 reachable time      : %d\n", iface->ipv6.reachable_time);
   1f5a0:	f8d5 128c 	ldr.w	r1, [r5, #652]	; 0x28c
   1f5a4:	4825      	ldr	r0, [pc, #148]	; (1f63c <iface_cb+0x2a0>)
   1f5a6:	f7e3 fca5 	bl	2ef4 <printk>
	printk("IPv6 retransmit timer    : %d\n", iface->ipv6.retrans_timer);
   1f5aa:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
   1f5ae:	4824      	ldr	r0, [pc, #144]	; (1f640 <iface_cb+0x2a4>)
   1f5b0:	f7e3 fca0 	bl	2ef4 <printk>
	       net_sprint_ipv4_addr(&iface->dhcpv4.requested_ip));
	printk("DHCPv4 state      : %s\n",
	       net_dhcpv4_state_name(iface->dhcpv4.state));
	printk("DHCPv4 attempts   : %d\n", iface->dhcpv4.attempts);
#endif /* CONFIG_NET_DHCPV4 */
}
   1f5b4:	b005      	add	sp, #20
   1f5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("\t<none>\n");
   1f5b8:	4818      	ldr	r0, [pc, #96]	; (1f61c <iface_cb+0x280>)
   1f5ba:	f7e3 fc9b 	bl	2ef4 <printk>
   1f5be:	e7cd      	b.n	1f55c <iface_cb+0x1c0>
		printk("\t%s%s\n",
   1f5c0:	4a14      	ldr	r2, [pc, #80]	; (1f614 <iface_cb+0x278>)
   1f5c2:	e7e0      	b.n	1f586 <iface_cb+0x1ea>
   1f5c4:	00031634 	.word	0x00031634
   1f5c8:	000317e4 	.word	0x000317e4
   1f5cc:	20002510 	.word	0x20002510
   1f5d0:	0003165c 	.word	0x0003165c
   1f5d4:	0003166c 	.word	0x0003166c
   1f5d8:	0003167c 	.word	0x0003167c
   1f5dc:	00031648 	.word	0x00031648
   1f5e0:	0003159c 	.word	0x0003159c
   1f5e4:	000315d4 	.word	0x000315d4
   1f5e8:	000315dc 	.word	0x000315dc
   1f5ec:	000315e4 	.word	0x000315e4
   1f5f0:	000315c8 	.word	0x000315c8
   1f5f4:	000315f4 	.word	0x000315f4
   1f5f8:	00031610 	.word	0x00031610
   1f5fc:	0003161c 	.word	0x0003161c
   1f600:	000314e8 	.word	0x000314e8
   1f604:	00031604 	.word	0x00031604
   1f608:	00031628 	.word	0x00031628
   1f60c:	000316a0 	.word	0x000316a0
   1f610:	20002528 	.word	0x20002528
   1f614:	0002ea98 	.word	0x0002ea98
   1f618:	000316bc 	.word	0x000316bc
   1f61c:	000316b0 	.word	0x000316b0
   1f620:	000316e0 	.word	0x000316e0
   1f624:	000316e8 	.word	0x000316e8
   1f628:	00031704 	.word	0x00031704
   1f62c:	00031710 	.word	0x00031710
   1f630:	00031728 	.word	0x00031728
   1f634:	00031730 	.word	0x00031730
   1f638:	00031750 	.word	0x00031750
   1f63c:	00031770 	.word	0x00031770
   1f640:	00031790 	.word	0x00031790

0001f644 <net_neighbor_data_remove>:
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
				lladdr, is_router, state);
}

void net_neighbor_data_remove(struct net_nbr *nbr)
{
   1f644:	4770      	bx	lr

0001f646 <net_neighbor_table_clear>:

	return;
}

void net_neighbor_table_clear(struct net_nbr_table *table)
{
   1f646:	4770      	bx	lr

0001f648 <nbr_lookup>:
{
   1f648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f64a:	460e      	mov	r6, r1
   1f64c:	4617      	mov	r7, r2
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f64e:	2400      	movs	r4, #0
   1f650:	e000      	b.n	1f654 <nbr_lookup+0xc>
   1f652:	3401      	adds	r4, #1
   1f654:	2c07      	cmp	r4, #7
   1f656:	dc11      	bgt.n	1f67c <nbr_lookup+0x34>
	return &net_neighbor_pool[idx].nbr;
   1f658:	4a0a      	ldr	r2, [pc, #40]	; (1f684 <nbr_lookup+0x3c>)
   1f65a:	01e3      	lsls	r3, r4, #7
   1f65c:	18d5      	adds	r5, r2, r3
		if (!nbr->ref) {
   1f65e:	5cd3      	ldrb	r3, [r2, r3]
   1f660:	2b00      	cmp	r3, #0
   1f662:	d0f6      	beq.n	1f652 <nbr_lookup+0xa>
		if (nbr->iface == iface &&
   1f664:	68ab      	ldr	r3, [r5, #8]
   1f666:	42b3      	cmp	r3, r6
   1f668:	d1f3      	bne.n	1f652 <nbr_lookup+0xa>
   1f66a:	68e8      	ldr	r0, [r5, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1f66c:	2210      	movs	r2, #16
   1f66e:	4639      	mov	r1, r7
   1f670:	3004      	adds	r0, #4
   1f672:	f00a fcf1 	bl	2a058 <memcmp>
   1f676:	2800      	cmp	r0, #0
   1f678:	d1eb      	bne.n	1f652 <nbr_lookup+0xa>
   1f67a:	e000      	b.n	1f67e <nbr_lookup+0x36>
	return NULL;
   1f67c:	2500      	movs	r5, #0
}
   1f67e:	4628      	mov	r0, r5
   1f680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f682:	bf00      	nop
   1f684:	2000bf50 	.word	0x2000bf50

0001f688 <nbr_clear_ns_pending>:
{
   1f688:	b510      	push	{r4, lr}
   1f68a:	4604      	mov	r4, r0
	k_delayed_work_cancel(&data->send_ns);
   1f68c:	303c      	adds	r0, #60	; 0x3c
   1f68e:	f00a fb93 	bl	29db8 <k_delayed_work_cancel>
	if (data->pending) {
   1f692:	6820      	ldr	r0, [r4, #0]
   1f694:	b118      	cbz	r0, 1f69e <nbr_clear_ns_pending+0x16>
		net_pkt_unref(data->pending);
   1f696:	f7fd ffc4 	bl	1d622 <net_pkt_unref>
		data->pending = NULL;
   1f69a:	2300      	movs	r3, #0
   1f69c:	6023      	str	r3, [r4, #0]
   1f69e:	bd10      	pop	{r4, pc}

0001f6a0 <ns_reply_timeout>:
{
   1f6a0:	b538      	push	{r3, r4, r5, lr}
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   1f6a2:	f1a0 013c 	sub.w	r1, r0, #60	; 0x3c
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f6a6:	2300      	movs	r3, #0
   1f6a8:	2b07      	cmp	r3, #7
   1f6aa:	dc07      	bgt.n	1f6bc <ns_reply_timeout+0x1c>
	return &net_neighbor_pool[idx].nbr;
   1f6ac:	4c0d      	ldr	r4, [pc, #52]	; (1f6e4 <ns_reply_timeout+0x44>)
   1f6ae:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   1f6b2:	68e2      	ldr	r2, [r4, #12]
   1f6b4:	4291      	cmp	r1, r2
   1f6b6:	d002      	beq.n	1f6be <ns_reply_timeout+0x1e>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f6b8:	3301      	adds	r3, #1
   1f6ba:	e7f5      	b.n	1f6a8 <ns_reply_timeout+0x8>
	return NULL;
   1f6bc:	2400      	movs	r4, #0
	if (!nbr) {
   1f6be:	b184      	cbz	r4, 1f6e2 <ns_reply_timeout+0x42>
	if (!data->pending) {
   1f6c0:	f850 3c3c 	ldr.w	r3, [r0, #-60]
   1f6c4:	b16b      	cbz	r3, 1f6e2 <ns_reply_timeout+0x42>
   1f6c6:	4605      	mov	r5, r0
	net_pkt_unref(data->pending);
   1f6c8:	4618      	mov	r0, r3
   1f6ca:	f7fd ffaa 	bl	1d622 <net_pkt_unref>
	net_pkt_unref(data->pending);
   1f6ce:	f855 0c3c 	ldr.w	r0, [r5, #-60]
   1f6d2:	f7fd ffa6 	bl	1d622 <net_pkt_unref>
	data->pending = NULL;
   1f6d6:	2300      	movs	r3, #0
   1f6d8:	f845 3c3c 	str.w	r3, [r5, #-60]
	net_nbr_unref(nbr);
   1f6dc:	4620      	mov	r0, r4
   1f6de:	f7ff fda1 	bl	1f224 <net_nbr_unref>
   1f6e2:	bd38      	pop	{r3, r4, r5, pc}
   1f6e4:	2000bf50 	.word	0x2000bf50

0001f6e8 <nbr_init>:
{
   1f6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f6ec:	b084      	sub	sp, #16
   1f6ee:	4604      	mov	r4, r0
   1f6f0:	4616      	mov	r6, r2
   1f6f2:	4698      	mov	r8, r3
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1f6f4:	23ff      	movs	r3, #255	; 0xff
   1f6f6:	7043      	strb	r3, [r0, #1]
	nbr->iface = iface;
   1f6f8:	6081      	str	r1, [r0, #8]
   1f6fa:	68c7      	ldr	r7, [r0, #12]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   1f6fc:	466d      	mov	r5, sp
   1f6fe:	6810      	ldr	r0, [r2, #0]
   1f700:	6851      	ldr	r1, [r2, #4]
   1f702:	6892      	ldr	r2, [r2, #8]
   1f704:	68f3      	ldr	r3, [r6, #12]
   1f706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f708:	466d      	mov	r5, sp
   1f70a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f70c:	6078      	str	r0, [r7, #4]
   1f70e:	60b9      	str	r1, [r7, #8]
   1f710:	60fa      	str	r2, [r7, #12]
   1f712:	613b      	str	r3, [r7, #16]
	ipv6_nbr_set_state(nbr, state);
   1f714:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
   1f718:	4620      	mov	r0, r4
   1f71a:	f7ff fe1d 	bl	1f358 <ipv6_nbr_set_state>
   1f71e:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   1f720:	f883 8069 	strb.w	r8, [r3, #105]	; 0x69
   1f724:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->pending = NULL;
   1f726:	2200      	movs	r2, #0
   1f728:	601a      	str	r2, [r3, #0]
   1f72a:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->reachable,
   1f72c:	4905      	ldr	r1, [pc, #20]	; (1f744 <nbr_init+0x5c>)
   1f72e:	3014      	adds	r0, #20
   1f730:	f00a fb24 	bl	29d7c <k_delayed_work_init>
   1f734:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->send_ns,
   1f736:	4904      	ldr	r1, [pc, #16]	; (1f748 <nbr_init+0x60>)
   1f738:	303c      	adds	r0, #60	; 0x3c
   1f73a:	f00a fb1f 	bl	29d7c <k_delayed_work_init>
}
   1f73e:	b004      	add	sp, #16
   1f740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f744:	00021275 	.word	0x00021275
   1f748:	0001f6a1 	.word	0x0001f6a1

0001f74c <nbr_new>:
{
   1f74c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f74e:	b083      	sub	sp, #12
   1f750:	4605      	mov	r5, r0
   1f752:	460e      	mov	r6, r1
   1f754:	461f      	mov	r7, r3
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   1f756:	4807      	ldr	r0, [pc, #28]	; (1f774 <nbr_new+0x28>)
   1f758:	f7ff fd72 	bl	1f240 <net_nbr_get>
	if (!nbr) {
   1f75c:	4604      	mov	r4, r0
   1f75e:	b128      	cbz	r0, 1f76c <nbr_new+0x20>
	nbr_init(nbr, iface, addr, true, state);
   1f760:	9700      	str	r7, [sp, #0]
   1f762:	2301      	movs	r3, #1
   1f764:	4632      	mov	r2, r6
   1f766:	4629      	mov	r1, r5
   1f768:	f7ff ffbe 	bl	1f6e8 <nbr_init>
}
   1f76c:	4620      	mov	r0, r4
   1f76e:	b003      	add	sp, #12
   1f770:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f772:	bf00      	nop
   1f774:	2000bf44 	.word	0x2000bf44

0001f778 <nbr_new>:
}

static struct net_nbr *nbr_new(struct net_if *iface,
			       struct in6_addr *addr,
			       u8_t prefix_len)
{
   1f778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f77c:	b084      	sub	sp, #16
   1f77e:	4604      	mov	r4, r0
   1f780:	460e      	mov	r6, r1
   1f782:	4690      	mov	r8, r2
	struct net_nbr *nbr = net_nbr_get(&net_nbr_routes.table);
   1f784:	480c      	ldr	r0, [pc, #48]	; (1f7b8 <nbr_new+0x40>)
   1f786:	f7ff fd5b 	bl	1f240 <net_nbr_get>

	if (!nbr) {
   1f78a:	4605      	mov	r5, r0
   1f78c:	b180      	cbz	r0, 1f7b0 <nbr_new+0x38>
		return NULL;
	}

	nbr->iface = iface;
   1f78e:	6084      	str	r4, [r0, #8]
	return (struct net_route_entry *)nbr->data;
   1f790:	68c7      	ldr	r7, [r0, #12]

	net_ipaddr_copy(&net_route_data(nbr)->addr, addr);
   1f792:	466c      	mov	r4, sp
   1f794:	6830      	ldr	r0, [r6, #0]
   1f796:	6871      	ldr	r1, [r6, #4]
   1f798:	68b2      	ldr	r2, [r6, #8]
   1f79a:	68f3      	ldr	r3, [r6, #12]
   1f79c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1f79e:	466c      	mov	r4, sp
   1f7a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1f7a2:	6138      	str	r0, [r7, #16]
   1f7a4:	6179      	str	r1, [r7, #20]
   1f7a6:	61ba      	str	r2, [r7, #24]
   1f7a8:	61fb      	str	r3, [r7, #28]
	return (struct net_route_entry *)nbr->data;
   1f7aa:	68eb      	ldr	r3, [r5, #12]
	net_route_data(nbr)->prefix_len = prefix_len;
   1f7ac:	f883 8020 	strb.w	r8, [r3, #32]
		nbr->idx, nbr, iface,
		net_sprint_ipv6_addr(&net_route_data(nbr)->addr),
		prefix_len);

	return nbr;
}
   1f7b0:	4628      	mov	r0, r5
   1f7b2:	b004      	add	sp, #16
   1f7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f7b8:	2000c368 	.word	0x2000c368

0001f7bc <update_ll_reserve>:
 * Thus we need to check it here. Note that this cannot happen for IPv4
 * as 802.15.4 supports IPv6 only.
 */
static struct net_pkt *update_ll_reserve(struct net_pkt *pkt,
					 struct in6_addr *addr)
{
   1f7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f7c0:	4682      	mov	sl, r0
	return pkt->forwarding;
   1f7c2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38

	/* No need to do anything if we are forwarding the packet
	 * as we already know everything about the destination of
	 * the packet.
	 */
	if (net_pkt_forwarding(pkt)) {
   1f7c6:	f013 0f04 	tst.w	r3, #4
   1f7ca:	d002      	beq.n	1f7d2 <update_ll_reserve+0x16>
			pos = 0;
		}
	}

	return pkt;
}
   1f7cc:	4650      	mov	r0, sl
   1f7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return pkt->iface;
   1f7d2:	6940      	ldr	r0, [r0, #20]
   1f7d4:	6843      	ldr	r3, [r0, #4]
   1f7d6:	689b      	ldr	r3, [r3, #8]
   1f7d8:	4798      	blx	r3
	if (reserve == net_pkt_ll_reserve(pkt)) {
   1f7da:	f89a 3032 	ldrb.w	r3, [sl, #50]	; 0x32
   1f7de:	4283      	cmp	r3, r0
   1f7e0:	d0f4      	beq.n	1f7cc <update_ll_reserve+0x10>
	pkt->ll_reserve = len;
   1f7e2:	f88a 0032 	strb.w	r0, [sl, #50]	; 0x32
	orig_frag = pkt->frags;
   1f7e6:	f8da 7008 	ldr.w	r7, [sl, #8]
	copy_len = orig_frag->len;
   1f7ea:	89be      	ldrh	r6, [r7, #12]
	pkt->frags = NULL;
   1f7ec:	2400      	movs	r4, #0
   1f7ee:	f8ca 4008 	str.w	r4, [sl, #8]
	frag = NULL;
   1f7f2:	46a1      	mov	r9, r4
	pos = 0;
   1f7f4:	46a0      	mov	r8, r4
	while (orig_frag) {
   1f7f6:	e020      	b.n	1f83a <update_ll_reserve+0x7e>
			frag = net_pkt_get_frag(pkt, K_FOREVER);
   1f7f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f7fc:	4650      	mov	r0, sl
   1f7fe:	f7fd febd 	bl	1d57c <net_pkt_get_frag>
   1f802:	4681      	mov	r9, r0
			net_pkt_frag_add(pkt, frag);
   1f804:	4601      	mov	r1, r0
   1f806:	4650      	mov	r0, sl
   1f808:	f7fd ff35 	bl	1d676 <net_pkt_frag_add>
			room_len = net_buf_tailroom(frag);
   1f80c:	f109 0008 	add.w	r0, r9, #8
   1f810:	f7fb fa4d 	bl	1acae <net_buf_simple_tailroom>
   1f814:	b284      	uxth	r4, r0
   1f816:	e014      	b.n	1f842 <update_ll_reserve+0x86>
			memcpy(net_buf_add(frag, room_len),
   1f818:	4621      	mov	r1, r4
   1f81a:	f109 0008 	add.w	r0, r9, #8
   1f81e:	f7fb f9dd 	bl	1abdc <net_buf_simple_add>
			       orig_frag->data + pos, room_len);
   1f822:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, room_len),
   1f824:	4622      	mov	r2, r4
   1f826:	4441      	add	r1, r8
   1f828:	f7e0 fd4a 	bl	2c0 <memcpy>
			copy_len -= room_len;
   1f82c:	1b36      	subs	r6, r6, r4
   1f82e:	b2b6      	uxth	r6, r6
			pos += room_len;
   1f830:	4444      	add	r4, r8
   1f832:	fa1f f884 	uxth.w	r8, r4
			room_len = 0;
   1f836:	2400      	movs	r4, #0
		if (!copy_len) {
   1f838:	b19e      	cbz	r6, 1f862 <update_ll_reserve+0xa6>
	while (orig_frag) {
   1f83a:	2f00      	cmp	r7, #0
   1f83c:	d0c6      	beq.n	1f7cc <update_ll_reserve+0x10>
		if (!room_len) {
   1f83e:	2c00      	cmp	r4, #0
   1f840:	d0da      	beq.n	1f7f8 <update_ll_reserve+0x3c>
		if (room_len >= copy_len) {
   1f842:	42b4      	cmp	r4, r6
   1f844:	d3e8      	bcc.n	1f818 <update_ll_reserve+0x5c>
			memcpy(net_buf_add(frag, copy_len),
   1f846:	4631      	mov	r1, r6
   1f848:	f109 0008 	add.w	r0, r9, #8
   1f84c:	f7fb f9c6 	bl	1abdc <net_buf_simple_add>
			       orig_frag->data + pos, copy_len);
   1f850:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, copy_len),
   1f852:	4632      	mov	r2, r6
   1f854:	4441      	add	r1, r8
   1f856:	f7e0 fd33 	bl	2c0 <memcpy>
			room_len -= copy_len;
   1f85a:	1ba4      	subs	r4, r4, r6
   1f85c:	b2a4      	uxth	r4, r4
			copy_len = 0;
   1f85e:	2600      	movs	r6, #0
   1f860:	e7ea      	b.n	1f838 <update_ll_reserve+0x7c>
			orig_frag = orig_frag->frags;
   1f862:	683d      	ldr	r5, [r7, #0]
			tmp->frags = NULL;
   1f864:	2300      	movs	r3, #0
   1f866:	603b      	str	r3, [r7, #0]
			net_pkt_frag_unref(tmp);
   1f868:	4638      	mov	r0, r7
   1f86a:	f7fd fed4 	bl	1d616 <net_pkt_frag_unref>
			if (!orig_frag) {
   1f86e:	2d00      	cmp	r5, #0
   1f870:	d0ac      	beq.n	1f7cc <update_ll_reserve+0x10>
			orig_frag = orig_frag->frags;
   1f872:	462f      	mov	r7, r5
			pos = 0;
   1f874:	46b0      	mov	r8, r6
			copy_len = orig_frag->len;
   1f876:	89ae      	ldrh	r6, [r5, #12]
   1f878:	e7df      	b.n	1f83a <update_ll_reserve+0x7e>

0001f87a <setup_headers>:
	       llao_len - lladdr->len - 2);
}

static void setup_headers(struct net_pkt *pkt, u8_t nd6_len,
			  u8_t icmp_type)
{
   1f87a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f87c:	4604      	mov	r4, r0
   1f87e:	460e      	mov	r6, r1
   1f880:	4617      	mov	r7, r2
	net_buf_add(pkt->frags,
   1f882:	6880      	ldr	r0, [r0, #8]
   1f884:	212c      	movs	r1, #44	; 0x2c
   1f886:	3008      	adds	r0, #8
   1f888:	f7fb f9a8 	bl	1abdc <net_buf_simple_add>
	return pkt->frags->data;
   1f88c:	68a3      	ldr	r3, [r4, #8]
   1f88e:	689b      	ldr	r3, [r3, #8]
		    sizeof(struct net_ipv6_hdr) +
		    sizeof(struct net_icmp_hdr));

	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1f890:	2260      	movs	r2, #96	; 0x60
   1f892:	701a      	strb	r2, [r3, #0]
   1f894:	68a3      	ldr	r3, [r4, #8]
   1f896:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1f898:	2500      	movs	r5, #0
   1f89a:	705d      	strb	r5, [r3, #1]
   1f89c:	68a3      	ldr	r3, [r4, #8]
   1f89e:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1f8a0:	709d      	strb	r5, [r3, #2]
   1f8a2:	70dd      	strb	r5, [r3, #3]
   1f8a4:	68a3      	ldr	r3, [r4, #8]
   1f8a6:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[0] = 0;
   1f8a8:	711d      	strb	r5, [r3, #4]
   1f8aa:	68a3      	ldr	r3, [r4, #8]
   1f8ac:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;
   1f8ae:	3604      	adds	r6, #4
   1f8b0:	715e      	strb	r6, [r3, #5]
   1f8b2:	68a3      	ldr	r3, [r4, #8]
   1f8b4:	689b      	ldr	r3, [r3, #8]

	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1f8b6:	223a      	movs	r2, #58	; 0x3a
   1f8b8:	719a      	strb	r2, [r3, #6]
   1f8ba:	68a3      	ldr	r3, [r4, #8]
   1f8bc:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   1f8be:	22ff      	movs	r2, #255	; 0xff
   1f8c0:	71da      	strb	r2, [r3, #7]

	/* In this special case where we know there are no long extension
	 * headers, so we can use this header cast.
	 */
	net_pkt_icmp_data(pkt)->type = icmp_type;
   1f8c2:	4620      	mov	r0, r4
   1f8c4:	f7fe f986 	bl	1dbd4 <net_pkt_icmp_data>
   1f8c8:	7007      	strb	r7, [r0, #0]
	net_pkt_icmp_data(pkt)->code = 0;
   1f8ca:	4620      	mov	r0, r4
   1f8cc:	f7fe f982 	bl	1dbd4 <net_pkt_icmp_data>
   1f8d0:	7045      	strb	r5, [r0, #1]
   1f8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f8d4 <nbr_free>:
{
   1f8d4:	b538      	push	{r3, r4, r5, lr}
   1f8d6:	4604      	mov	r4, r0
   1f8d8:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   1f8da:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1f8de:	f00a fa6b 	bl	29db8 <k_delayed_work_cancel>
	if (data->pending) {
   1f8e2:	6828      	ldr	r0, [r5, #0]
   1f8e4:	b118      	cbz	r0, 1f8ee <nbr_free+0x1a>
		net_pkt_unref(data->pending);
   1f8e6:	f7fd fe9c 	bl	1d622 <net_pkt_unref>
		data->pending = NULL;
   1f8ea:	2300      	movs	r3, #0
   1f8ec:	602b      	str	r3, [r5, #0]
   1f8ee:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1f8f0:	3014      	adds	r0, #20
   1f8f2:	f00a fa61 	bl	29db8 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1f8f6:	4620      	mov	r0, r4
   1f8f8:	f7ff fc94 	bl	1f224 <net_nbr_unref>
   1f8fc:	bd38      	pop	{r3, r4, r5, pc}
	...

0001f900 <net_ipv6_nbr_state2str>:
	switch (state) {
   1f900:	2805      	cmp	r0, #5
   1f902:	d80e      	bhi.n	1f922 <net_ipv6_nbr_state2str+0x22>
   1f904:	e8df f000 	tbb	[pc, r0]
   1f908:	07050f03 	.word	0x07050f03
   1f90c:	0b09      	.short	0x0b09
		return "incomplete";
   1f90e:	4807      	ldr	r0, [pc, #28]	; (1f92c <net_ipv6_nbr_state2str+0x2c>)
   1f910:	4770      	bx	lr
		return "stale";
   1f912:	4807      	ldr	r0, [pc, #28]	; (1f930 <net_ipv6_nbr_state2str+0x30>)
   1f914:	4770      	bx	lr
		return "delay";
   1f916:	4807      	ldr	r0, [pc, #28]	; (1f934 <net_ipv6_nbr_state2str+0x34>)
   1f918:	4770      	bx	lr
		return "probe";
   1f91a:	4807      	ldr	r0, [pc, #28]	; (1f938 <net_ipv6_nbr_state2str+0x38>)
   1f91c:	4770      	bx	lr
		return "static";
   1f91e:	4807      	ldr	r0, [pc, #28]	; (1f93c <net_ipv6_nbr_state2str+0x3c>)
   1f920:	4770      	bx	lr
	return "<invalid state>";
   1f922:	4807      	ldr	r0, [pc, #28]	; (1f940 <net_ipv6_nbr_state2str+0x40>)
   1f924:	4770      	bx	lr
		return "reachable";
   1f926:	4807      	ldr	r0, [pc, #28]	; (1f944 <net_ipv6_nbr_state2str+0x44>)
}
   1f928:	4770      	bx	lr
   1f92a:	bf00      	nop
   1f92c:	000314b0 	.word	0x000314b0
   1f930:	000314c8 	.word	0x000314c8
   1f934:	000314d0 	.word	0x000314d0
   1f938:	000314d8 	.word	0x000314d8
   1f93c:	000314e0 	.word	0x000314e0
   1f940:	000314e8 	.word	0x000314e8
   1f944:	000314bc 	.word	0x000314bc

0001f948 <net_ipv6_nbr_foreach>:
{
   1f948:	b500      	push	{lr}
   1f94a:	b083      	sub	sp, #12
	struct iface_cb_data cb_data = {
   1f94c:	9000      	str	r0, [sp, #0]
   1f94e:	9101      	str	r1, [sp, #4]
	net_if_foreach(iface_cb, &cb_data);
   1f950:	4669      	mov	r1, sp
   1f952:	4803      	ldr	r0, [pc, #12]	; (1f960 <net_ipv6_nbr_foreach+0x18>)
   1f954:	f7fc fc3a 	bl	1c1cc <net_if_foreach>
}
   1f958:	b003      	add	sp, #12
   1f95a:	f85d fb04 	ldr.w	pc, [sp], #4
   1f95e:	bf00      	nop
   1f960:	0001f36d 	.word	0x0001f36d

0001f964 <net_ipv6_nbr_rm>:
{
   1f964:	b538      	push	{r3, r4, r5, lr}
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1f966:	460a      	mov	r2, r1
   1f968:	4601      	mov	r1, r0
   1f96a:	480d      	ldr	r0, [pc, #52]	; (1f9a0 <net_ipv6_nbr_rm+0x3c>)
   1f96c:	f7ff fe6c 	bl	1f648 <nbr_lookup>
	if (!nbr) {
   1f970:	b1a0      	cbz	r0, 1f99c <net_ipv6_nbr_rm+0x38>
   1f972:	4604      	mov	r4, r0
   1f974:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   1f976:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1f97a:	f00a fa1d 	bl	29db8 <k_delayed_work_cancel>
	if (data->pending) {
   1f97e:	6828      	ldr	r0, [r5, #0]
   1f980:	b118      	cbz	r0, 1f98a <net_ipv6_nbr_rm+0x26>
		net_pkt_unref(data->pending);
   1f982:	f7fd fe4e 	bl	1d622 <net_pkt_unref>
		data->pending = NULL;
   1f986:	2300      	movs	r3, #0
   1f988:	602b      	str	r3, [r5, #0]
   1f98a:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1f98c:	3014      	adds	r0, #20
   1f98e:	f00a fa13 	bl	29db8 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1f992:	4620      	mov	r0, r4
   1f994:	f7ff fc46 	bl	1f224 <net_nbr_unref>
	return true;
   1f998:	2001      	movs	r0, #1
   1f99a:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1f99c:	2000      	movs	r0, #0
}
   1f99e:	bd38      	pop	{r3, r4, r5, pc}
   1f9a0:	2000bf44 	.word	0x2000bf44

0001f9a4 <net_ipv6_unspecified_address>:
}
   1f9a4:	4800      	ldr	r0, [pc, #0]	; (1f9a8 <net_ipv6_unspecified_address+0x4>)
   1f9a6:	4770      	bx	lr
   1f9a8:	000314a0 	.word	0x000314a0

0001f9ac <create_mldv2>:

static struct net_pkt *create_mldv2(struct net_pkt *pkt,
				    const struct in6_addr *addr,
				    u16_t record_type,
				    u8_t num_sources)
{
   1f9ac:	b570      	push	{r4, r5, r6, lr}
   1f9ae:	b082      	sub	sp, #8
   1f9b0:	4604      	mov	r4, r0
   1f9b2:	460e      	mov	r6, r1
   1f9b4:	461d      	mov	r5, r3
   1f9b6:	a902      	add	r1, sp, #8
   1f9b8:	f801 2d03 	strb.w	r2, [r1, #-3]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f9bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f9c0:	460a      	mov	r2, r1
   1f9c2:	2101      	movs	r1, #1
   1f9c4:	f7fd ff65 	bl	1d892 <net_pkt_append>
   1f9c8:	aa02      	add	r2, sp, #8
   1f9ca:	2300      	movs	r3, #0
   1f9cc:	f802 3d04 	strb.w	r3, [r2, #-4]!
   1f9d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f9d4:	2101      	movs	r1, #1
   1f9d6:	4620      	mov	r0, r4
   1f9d8:	f7fd ff5b 	bl	1d892 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f9dc:	022b      	lsls	r3, r5, #8
   1f9de:	aa02      	add	r2, sp, #8
   1f9e0:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f9e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f9e8:	2102      	movs	r1, #2
   1f9ea:	4620      	mov	r0, r4
   1f9ec:	f7fd ff51 	bl	1d892 <net_pkt_append>
   1f9f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f9f4:	4632      	mov	r2, r6
   1f9f6:	2110      	movs	r1, #16
   1f9f8:	4620      	mov	r0, r4
   1f9fa:	f7fd ff4a 	bl	1d892 <net_pkt_append>
	net_pkt_append_u8(pkt, 0); /* aux data len */
	net_pkt_append_be16(pkt, num_sources); /* number of addresses */
	net_pkt_append_all(pkt, sizeof(struct in6_addr), addr->s6_addr,
			K_FOREVER);

	if (num_sources > 0) {
   1f9fe:	b915      	cbnz	r5, 1fa06 <create_mldv2+0x5a>
				net_ipv6_unspecified_address()->s6_addr,
				K_FOREVER);
	}

	return pkt;
}
   1fa00:	4620      	mov	r0, r4
   1fa02:	b002      	add	sp, #8
   1fa04:	bd70      	pop	{r4, r5, r6, pc}
				net_ipv6_unspecified_address()->s6_addr,
   1fa06:	f7ff ffcd 	bl	1f9a4 <net_ipv6_unspecified_address>
   1fa0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fa0e:	4602      	mov	r2, r0
   1fa10:	2110      	movs	r1, #16
   1fa12:	4620      	mov	r0, r4
   1fa14:	f7fd ff3d 	bl	1d892 <net_pkt_append>
   1fa18:	e7f2      	b.n	1fa00 <create_mldv2+0x54>

0001fa1a <net_ipv6_create_raw>:
{
   1fa1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fa1e:	b088      	sub	sp, #32
   1fa20:	4604      	mov	r4, r0
   1fa22:	460e      	mov	r6, r1
   1fa24:	4617      	mov	r7, r2
   1fa26:	461d      	mov	r5, r3
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1fa28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fa2c:	f7fd fda6 	bl	1d57c <net_pkt_get_frag>
   1fa30:	4680      	mov	r8, r0
	net_pkt_frag_insert(pkt, header);
   1fa32:	4601      	mov	r1, r0
   1fa34:	4620      	mov	r0, r4
   1fa36:	f7fd fe2b 	bl	1d690 <net_pkt_frag_insert>
	return pkt->frags->data;
   1fa3a:	68a3      	ldr	r3, [r4, #8]
   1fa3c:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1fa3e:	2260      	movs	r2, #96	; 0x60
   1fa40:	701a      	strb	r2, [r3, #0]
   1fa42:	68a3      	ldr	r3, [r4, #8]
   1fa44:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1fa46:	2300      	movs	r3, #0
   1fa48:	7053      	strb	r3, [r2, #1]
   1fa4a:	68a2      	ldr	r2, [r4, #8]
   1fa4c:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1fa4e:	7093      	strb	r3, [r2, #2]
   1fa50:	70d3      	strb	r3, [r2, #3]
   1fa52:	68a2      	ldr	r2, [r4, #8]
   1fa54:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = 0;
   1fa56:	7193      	strb	r3, [r2, #6]
   1fa58:	68a3      	ldr	r3, [r4, #8]
   1fa5a:	689b      	ldr	r3, [r3, #8]
	return pkt->ipv6_hop_limit;
   1fa5c:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
	NET_IPV6_HDR(pkt)->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   1fa60:	71da      	strb	r2, [r3, #7]
	return pkt->frags->data;
   1fa62:	68a3      	ldr	r3, [r4, #8]
   1fa64:	689b      	ldr	r3, [r3, #8]
	if (NET_IPV6_HDR(pkt)->hop_limit == 0) {
   1fa66:	79da      	ldrb	r2, [r3, #7]
   1fa68:	b912      	cbnz	r2, 1fa70 <net_ipv6_create_raw+0x56>
	return iface->ipv6.hop_limit;
   1fa6a:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
		NET_IPV6_HDR(pkt)->hop_limit =
   1fa6e:	71da      	strb	r2, [r3, #7]
   1fa70:	68a3      	ldr	r3, [r4, #8]
   1fa72:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1fa76:	466d      	mov	r5, sp
   1fa78:	6838      	ldr	r0, [r7, #0]
   1fa7a:	6879      	ldr	r1, [r7, #4]
   1fa7c:	68ba      	ldr	r2, [r7, #8]
   1fa7e:	68fb      	ldr	r3, [r7, #12]
   1fa80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1fa82:	466d      	mov	r5, sp
   1fa84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1fa86:	f8ce 0018 	str.w	r0, [lr, #24]
   1fa8a:	f8ce 101c 	str.w	r1, [lr, #28]
   1fa8e:	f8ce 2020 	str.w	r2, [lr, #32]
   1fa92:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
   1fa96:	68a3      	ldr	r3, [r4, #8]
   1fa98:	689f      	ldr	r7, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1fa9a:	6830      	ldr	r0, [r6, #0]
   1fa9c:	6871      	ldr	r1, [r6, #4]
   1fa9e:	68b2      	ldr	r2, [r6, #8]
   1faa0:	68f3      	ldr	r3, [r6, #12]
   1faa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1faa4:	ad04      	add	r5, sp, #16
   1faa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1faa8:	60b8      	str	r0, [r7, #8]
   1faaa:	60f9      	str	r1, [r7, #12]
   1faac:	613a      	str	r2, [r7, #16]
   1faae:	617b      	str	r3, [r7, #20]
	pkt->ipv6_ext_len = len;
   1fab0:	2300      	movs	r3, #0
   1fab2:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1fab6:	68a3      	ldr	r3, [r4, #8]
   1fab8:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->nexthdr = next_header;
   1faba:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   1fabe:	719a      	strb	r2, [r3, #6]
	pkt->ip_hdr_len = len;
   1fac0:	2128      	movs	r1, #40	; 0x28
   1fac2:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
	pkt->family = family;
   1fac6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1faca:	220a      	movs	r2, #10
   1facc:	f362 03c6 	bfi	r3, r2, #3, #4
   1fad0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_buf_add(header, sizeof(struct net_ipv6_hdr));
   1fad4:	f108 0008 	add.w	r0, r8, #8
   1fad8:	f7fb f880 	bl	1abdc <net_buf_simple_add>
}
   1fadc:	4620      	mov	r0, r4
   1fade:	b008      	add	sp, #32
   1fae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fae4 <net_ipv6_create>:
{
   1fae4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fae6:	b083      	sub	sp, #12
   1fae8:	4605      	mov	r5, r0
   1faea:	460e      	mov	r6, r1
   1faec:	461f      	mov	r7, r3
	if (!src) {
   1faee:	4614      	mov	r4, r2
   1faf0:	b14a      	cbz	r2, 1fb06 <net_ipv6_create+0x22>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1faf2:	6823      	ldr	r3, [r4, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1faf4:	b94b      	cbnz	r3, 1fb0a <net_ipv6_create+0x26>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1faf6:	6863      	ldr	r3, [r4, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1faf8:	b9fb      	cbnz	r3, 1fb3a <net_ipv6_create+0x56>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fafa:	68a3      	ldr	r3, [r4, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1fafc:	b9fb      	cbnz	r3, 1fb3e <net_ipv6_create+0x5a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1fafe:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fb00:	b1fb      	cbz	r3, 1fb42 <net_ipv6_create+0x5e>
   1fb02:	2300      	movs	r3, #0
   1fb04:	e002      	b.n	1fb0c <net_ipv6_create+0x28>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   1fb06:	68c4      	ldr	r4, [r0, #12]
   1fb08:	e7f3      	b.n	1faf2 <net_ipv6_create+0xe>
   1fb0a:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(src)
   1fb0c:	b9db      	cbnz	r3, 1fb46 <net_ipv6_create+0x62>
	return addr->s6_addr[0] == 0xFF;
   1fb0e:	7823      	ldrb	r3, [r4, #0]
	    || net_is_ipv6_addr_mcast(src)) {
   1fb10:	2bff      	cmp	r3, #255	; 0xff
   1fb12:	d018      	beq.n	1fb46 <net_ipv6_create+0x62>
	return net_if_get_by_index(context->iface);
   1fb14:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
   1fb18:	f7fc fb3c 	bl	1c194 <net_if_get_by_index>
   1fb1c:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1fb1e:	f895 205d 	ldrb.w	r2, [r5, #93]	; 0x5d
   1fb22:	f012 0f40 	tst.w	r2, #64	; 0x40
   1fb26:	d114      	bne.n	1fb52 <net_ipv6_create+0x6e>
	return IPPROTO_UDP;
   1fb28:	2211      	movs	r2, #17
	return net_ipv6_create_raw(pkt,
   1fb2a:	9200      	str	r2, [sp, #0]
   1fb2c:	463a      	mov	r2, r7
   1fb2e:	4621      	mov	r1, r4
   1fb30:	4630      	mov	r0, r6
   1fb32:	f7ff ff72 	bl	1fa1a <net_ipv6_create_raw>
}
   1fb36:	b003      	add	sp, #12
   1fb38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fb3a:	2300      	movs	r3, #0
   1fb3c:	e7e6      	b.n	1fb0c <net_ipv6_create+0x28>
   1fb3e:	2300      	movs	r3, #0
   1fb40:	e7e4      	b.n	1fb0c <net_ipv6_create+0x28>
   1fb42:	2301      	movs	r3, #1
   1fb44:	e7e2      	b.n	1fb0c <net_ipv6_create+0x28>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1fb46:	4639      	mov	r1, r7
   1fb48:	6970      	ldr	r0, [r6, #20]
   1fb4a:	f7fc f8cf 	bl	1bcec <net_if_ipv6_select_src_addr>
   1fb4e:	4604      	mov	r4, r0
   1fb50:	e7e0      	b.n	1fb14 <net_ipv6_create+0x30>
		return IPPROTO_TCP;
   1fb52:	2206      	movs	r2, #6
   1fb54:	e7e9      	b.n	1fb2a <net_ipv6_create+0x46>

0001fb56 <net_ipv6_finalize_raw>:
{
   1fb56:	b538      	push	{r3, r4, r5, lr}
   1fb58:	4605      	mov	r5, r0
   1fb5a:	460c      	mov	r4, r1
	net_pkt_compact(pkt);
   1fb5c:	f7fd fe52 	bl	1d804 <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   1fb60:	68a8      	ldr	r0, [r5, #8]
   1fb62:	4603      	mov	r3, r0
	size_t bytes = 0;
   1fb64:	2200      	movs	r2, #0
   1fb66:	e002      	b.n	1fb6e <net_ipv6_finalize_raw+0x18>
		bytes += buf->len;
   1fb68:	8999      	ldrh	r1, [r3, #12]
   1fb6a:	440a      	add	r2, r1
		buf = buf->frags;
   1fb6c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1fb6e:	2b00      	cmp	r3, #0
   1fb70:	d1fa      	bne.n	1fb68 <net_ipv6_finalize_raw+0x12>
	total_len -= sizeof(struct net_ipv6_hdr);
   1fb72:	3a28      	subs	r2, #40	; 0x28
	return pkt->frags->data;
   1fb74:	6883      	ldr	r3, [r0, #8]
	NET_IPV6_HDR(pkt)->len[0] = total_len / 256;
   1fb76:	0a11      	lsrs	r1, r2, #8
   1fb78:	7119      	strb	r1, [r3, #4]
   1fb7a:	68ab      	ldr	r3, [r5, #8]
   1fb7c:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = total_len - NET_IPV6_HDR(pkt)->len[0] * 256;
   1fb7e:	715a      	strb	r2, [r3, #5]
	if (next_header == IPPROTO_UDP) {
   1fb80:	2c11      	cmp	r4, #17
   1fb82:	d005      	beq.n	1fb90 <net_ipv6_finalize_raw+0x3a>
	if (next_header == IPPROTO_TCP) {
   1fb84:	2c06      	cmp	r4, #6
   1fb86:	d008      	beq.n	1fb9a <net_ipv6_finalize_raw+0x44>
	if (next_header == IPPROTO_ICMPV6) {
   1fb88:	2c3a      	cmp	r4, #58	; 0x3a
   1fb8a:	d00b      	beq.n	1fba4 <net_ipv6_finalize_raw+0x4e>
}
   1fb8c:	2000      	movs	r0, #0
   1fb8e:	bd38      	pop	{r3, r4, r5, pc}
		net_udp_set_chksum(pkt, pkt->frags);
   1fb90:	68a9      	ldr	r1, [r5, #8]
   1fb92:	4628      	mov	r0, r5
   1fb94:	f003 fa9b 	bl	230ce <net_udp_set_chksum>
   1fb98:	e7f8      	b.n	1fb8c <net_ipv6_finalize_raw+0x36>
		net_tcp_set_chksum(pkt, pkt->frags);
   1fb9a:	68a9      	ldr	r1, [r5, #8]
   1fb9c:	4628      	mov	r0, r5
   1fb9e:	f004 f8da 	bl	23d56 <net_tcp_set_chksum>
   1fba2:	e7f3      	b.n	1fb8c <net_ipv6_finalize_raw+0x36>
		net_icmpv6_set_chksum(pkt, pkt->frags);
   1fba4:	68a9      	ldr	r1, [r5, #8]
   1fba6:	4628      	mov	r0, r5
   1fba8:	f7fe fdf2 	bl	1e790 <net_icmpv6_set_chksum>
   1fbac:	e7ee      	b.n	1fb8c <net_ipv6_finalize_raw+0x36>
	...

0001fbb0 <send_mldv2_raw>:

static int send_mldv2_raw(struct net_if *iface, struct net_buf *frags)
{
   1fbb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fbb4:	b08d      	sub	sp, #52	; 0x34
   1fbb6:	4680      	mov	r8, r0
   1fbb8:	4689      	mov	r9, r1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1fbba:	f240 23ff 	movw	r3, #767	; 0x2ff
   1fbbe:	f8ad 3020 	strh.w	r3, [sp, #32]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1fbc2:	2500      	movs	r5, #0
   1fbc4:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1fbc8:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1fbcc:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1fbd0:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1fbd4:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1fbd8:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1fbdc:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
   1fbe0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1fbe4:	6843      	ldr	r3, [r0, #4]
   1fbe6:	689b      	ldr	r3, [r3, #8]
   1fbe8:	a908      	add	r1, sp, #32
   1fbea:	4798      	blx	r3
	int ret;

	/* Sent to all MLDv2-capable routers */
	net_ipv6_addr_create(&dst, 0xff02, 0, 0, 0, 0, 0, 0, 0x0016);

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1fbec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fbf0:	f7fd fca6 	bl	1d540 <net_pkt_get_reserve_tx>
   1fbf4:	4604      	mov	r4, r0
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt,
   1fbf6:	a908      	add	r1, sp, #32
   1fbf8:	4640      	mov	r0, r8
   1fbfa:	f7fc f877 	bl	1bcec <net_if_ipv6_select_src_addr>
   1fbfe:	9500      	str	r5, [sp, #0]
   1fc00:	4643      	mov	r3, r8
   1fc02:	aa08      	add	r2, sp, #32
   1fc04:	4601      	mov	r1, r0
   1fc06:	4620      	mov	r0, r4
   1fc08:	f7ff ff07 	bl	1fa1a <net_ipv6_create_raw>
   1fc0c:	4604      	mov	r4, r0
   1fc0e:	6883      	ldr	r3, [r0, #8]
   1fc10:	689b      	ldr	r3, [r3, #8]
				  net_if_ipv6_select_src_addr(iface, &dst),
				  &dst,
				  iface,
				  NET_IPV6_NEXTHDR_HBHO);

	NET_IPV6_HDR(pkt)->hop_limit = 1; /* RFC 3810 ch 7.4 */
   1fc12:	2601      	movs	r6, #1
   1fc14:	71de      	strb	r6, [r3, #7]

	net_pkt_set_ipv6_hdr_prev(pkt, pkt->frags->len);
   1fc16:	6883      	ldr	r3, [r0, #8]
   1fc18:	899b      	ldrh	r3, [r3, #12]
	pkt->ipv6_prev_hdr_start = offset;
   1fc1a:	87c3      	strh	r3, [r0, #62]	; 0x3e
   1fc1c:	aa0c      	add	r2, sp, #48	; 0x30
   1fc1e:	233a      	movs	r3, #58	; 0x3a
   1fc20:	f802 3d15 	strb.w	r3, [r2, #-21]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fc24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fc28:	4631      	mov	r1, r6
   1fc2a:	f7fd fe32 	bl	1d892 <net_pkt_append>
   1fc2e:	aa0c      	add	r2, sp, #48	; 0x30
   1fc30:	f802 5d16 	strb.w	r5, [r2, #-22]!
   1fc34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fc38:	4631      	mov	r1, r6
   1fc3a:	4620      	mov	r0, r4
   1fc3c:	f7fd fe29 	bl	1d892 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1fc40:	af0c      	add	r7, sp, #48	; 0x30
   1fc42:	f240 2305 	movw	r3, #517	; 0x205
   1fc46:	f827 3d14 	strh.w	r3, [r7, #-20]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fc4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fc4e:	463a      	mov	r2, r7
   1fc50:	2102      	movs	r1, #2
   1fc52:	4620      	mov	r0, r4
   1fc54:	f7fd fe1d 	bl	1d892 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1fc58:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fc5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fc60:	463a      	mov	r2, r7
   1fc62:	2102      	movs	r1, #2
   1fc64:	4620      	mov	r0, r4
   1fc66:	f7fd fe14 	bl	1d892 <net_pkt_append>
   1fc6a:	aa0c      	add	r2, sp, #48	; 0x30
   1fc6c:	f802 5d17 	strb.w	r5, [r2, #-23]!
   1fc70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fc74:	4631      	mov	r1, r6
   1fc76:	4620      	mov	r0, r4
   1fc78:	f7fd fe0b 	bl	1d892 <net_pkt_append>
   1fc7c:	aa0c      	add	r2, sp, #48	; 0x30
   1fc7e:	f802 5d18 	strb.w	r5, [r2, #-24]!
   1fc82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fc86:	4631      	mov	r1, r6
   1fc88:	4620      	mov	r0, r4
   1fc8a:	f7fd fe02 	bl	1d892 <net_pkt_append>
   1fc8e:	aa0c      	add	r2, sp, #48	; 0x30
   1fc90:	238f      	movs	r3, #143	; 0x8f
   1fc92:	f802 3d19 	strb.w	r3, [r2, #-25]!
   1fc96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fc9a:	4631      	mov	r1, r6
   1fc9c:	4620      	mov	r0, r4
   1fc9e:	f7fd fdf8 	bl	1d892 <net_pkt_append>
   1fca2:	aa0c      	add	r2, sp, #48	; 0x30
   1fca4:	f802 5d1a 	strb.w	r5, [r2, #-26]!
   1fca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fcac:	4631      	mov	r1, r6
   1fcae:	4620      	mov	r0, r4
   1fcb0:	f7fd fdef 	bl	1d892 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1fcb4:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fcb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fcbc:	463a      	mov	r2, r7
   1fcbe:	2102      	movs	r1, #2
   1fcc0:	4620      	mov	r0, r4
   1fcc2:	f7fd fde6 	bl	1d892 <net_pkt_append>
	/* ICMPv6 header */
	net_pkt_append_u8(pkt, NET_ICMPV6_MLDv2); /* type */
	net_pkt_append_u8(pkt, 0); /* code */
	net_pkt_append_be16(pkt, 0); /* chksum */

	pkt->frags->len = NET_IPV6ICMPH_LEN + ROUTER_ALERT_LEN;
   1fcc6:	68a3      	ldr	r3, [r4, #8]
   1fcc8:	2234      	movs	r2, #52	; 0x34
   1fcca:	819a      	strh	r2, [r3, #12]
	pkt->iface = iface;
   1fccc:	f8c4 8014 	str.w	r8, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1fcd0:	f898 3015 	ldrb.w	r3, [r8, #21]
   1fcd4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1fcd8:	f898 3015 	ldrb.w	r3, [r8, #21]
   1fcdc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	u16_t value = sys_cpu_to_be16(data);
   1fce0:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fce8:	463a      	mov	r2, r7
   1fcea:	2102      	movs	r1, #2
   1fcec:	4620      	mov	r0, r4
   1fcee:	f7fd fdd0 	bl	1d892 <net_pkt_append>
	net_pkt_set_iface(pkt, iface);

	net_pkt_append_be16(pkt, 0); /* reserved field */

	/* Insert the actual multicast record(s) here */
	net_pkt_frag_add(pkt, frags);
   1fcf2:	4649      	mov	r1, r9
   1fcf4:	4620      	mov	r0, r4
   1fcf6:	f7fd fcbe 	bl	1d676 <net_pkt_frag_add>

	ret = net_ipv6_finalize_raw(pkt, NET_IPV6_NEXTHDR_HBHO);
   1fcfa:	4629      	mov	r1, r5
   1fcfc:	4620      	mov	r0, r4
   1fcfe:	f7ff ff2a 	bl	1fb56 <net_ipv6_finalize_raw>
	if (ret < 0) {
   1fd02:	1e05      	subs	r5, r0, #0
   1fd04:	db35      	blt.n	1fd72 <send_mldv2_raw+0x1c2>
	pkt->ipv6_ext_len = len;
   1fd06:	2308      	movs	r3, #8
   1fd08:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		goto drop;
	}

	net_pkt_set_ipv6_ext_len(pkt, ROUTER_ALERT_LEN);

	net_pkt_write_be16(pkt, pkt->frags,
   1fd0c:	68a6      	ldr	r6, [r4, #8]
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1fd0e:	213a      	movs	r1, #58	; 0x3a
   1fd10:	4620      	mov	r0, r4
   1fd12:	f7fe faf0 	bl	1e2f6 <net_calc_chksum>
			   NET_IPV6H_LEN + ROUTER_ALERT_LEN + 2,
			   &pos, ntohs(~net_calc_chksum_icmpv6(pkt)));
   1fd16:	ea6f 2020 	mvn.w	r0, r0, asr #8
   1fd1a:	b2c5      	uxtb	r5, r0
   1fd1c:	213a      	movs	r1, #58	; 0x3a
   1fd1e:	4620      	mov	r0, r4
   1fd20:	f7fe fae9 	bl	1e2f6 <net_calc_chksum>
   1fd24:	43c0      	mvns	r0, r0
   1fd26:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
	net_pkt_write_be16(pkt, pkt->frags,
   1fd2a:	b280      	uxth	r0, r0
						 struct net_buf *frag,
						 u16_t offset,
						 u16_t *pos,
						 u16_t data)
{
	u16_t value = htons(data);
   1fd2c:	0a03      	lsrs	r3, r0, #8
   1fd2e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   1fd32:	f8ad 001c 	strh.w	r0, [sp, #28]

	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   1fd36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fd3a:	9302      	str	r3, [sp, #8]
   1fd3c:	ab07      	add	r3, sp, #28
   1fd3e:	9301      	str	r3, [sp, #4]
   1fd40:	2302      	movs	r3, #2
   1fd42:	9300      	str	r3, [sp, #0]
   1fd44:	f10d 031e 	add.w	r3, sp, #30
   1fd48:	2232      	movs	r2, #50	; 0x32
   1fd4a:	4631      	mov	r1, r6
   1fd4c:	4620      	mov	r0, r4
   1fd4e:	f7fd fe58 	bl	1da02 <net_pkt_write>

	ret = net_send_data(pkt);
   1fd52:	4620      	mov	r0, r4
   1fd54:	f7fb f864 	bl	1ae20 <net_send_data>
	if (ret < 0) {
   1fd58:	1e05      	subs	r5, r0, #0
   1fd5a:	db0a      	blt.n	1fd72 <send_mldv2_raw+0x1c2>
	net_stats.icmp.sent++;
   1fd5c:	4b0d      	ldr	r3, [pc, #52]	; (1fd94 <send_mldv2_raw+0x1e4>)
   1fd5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1fd60:	3201      	adds	r2, #1
   1fd62:	639a      	str	r2, [r3, #56]	; 0x38
	net_stats.ipv6_mld.recv++;
}

static inline void net_stats_update_ipv6_mld_sent(void)
{
	net_stats.ipv6_mld.sent++;
   1fd64:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1fd68:	3201      	adds	r2, #1
   1fd6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}

	net_stats_update_icmp_sent();
	net_stats_update_ipv6_mld_sent();

	return 0;
   1fd6e:	2500      	movs	r5, #0
   1fd70:	e00b      	b.n	1fd8a <send_mldv2_raw+0x1da>

drop:
	net_pkt_unref(pkt);
   1fd72:	4620      	mov	r0, r4
   1fd74:	f7fd fc55 	bl	1d622 <net_pkt_unref>
	net_stats.icmp.drop++;
   1fd78:	4b06      	ldr	r3, [pc, #24]	; (1fd94 <send_mldv2_raw+0x1e4>)
   1fd7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1fd7c:	3201      	adds	r2, #1
   1fd7e:	63da      	str	r2, [r3, #60]	; 0x3c
}

static inline void net_stats_update_ipv6_mld_drop(void)
{
	net_stats.ipv6_mld.drop++;
   1fd80:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   1fd84:	3201      	adds	r2, #1
   1fd86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_stats_update_icmp_drop();
	net_stats_update_ipv6_mld_drop();

	return ret;
}
   1fd8a:	4628      	mov	r0, r5
   1fd8c:	b00d      	add	sp, #52	; 0x34
   1fd8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1fd92:	bf00      	nop
   1fd94:	20002b50 	.word	0x20002b50

0001fd98 <send_mldv2>:

static int send_mldv2(struct net_if *iface, const struct in6_addr *addr,
		      u8_t mode)
{
   1fd98:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fd9a:	b083      	sub	sp, #12
   1fd9c:	4605      	mov	r5, r0
   1fd9e:	460e      	mov	r6, r1
   1fda0:	4617      	mov	r7, r2
   1fda2:	6843      	ldr	r3, [r0, #4]
   1fda4:	689b      	ldr	r3, [r3, #8]
   1fda6:	2100      	movs	r1, #0
   1fda8:	4798      	blx	r3
	struct net_pkt *pkt;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1fdaa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fdae:	f7fd fbc7 	bl	1d540 <net_pkt_get_reserve_tx>
   1fdb2:	4604      	mov	r4, r0
	u16_t value = sys_cpu_to_be16(data);
   1fdb4:	aa02      	add	r2, sp, #8
   1fdb6:	f44f 7380 	mov.w	r3, #256	; 0x100
   1fdba:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fdbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fdc2:	2102      	movs	r1, #2
   1fdc4:	f7fd fd65 	bl	1d892 <net_pkt_append>
				     K_FOREVER);

	net_pkt_append_be16(pkt, 1); /* number of records */

	pkt = create_mldv2(pkt, addr, mode, 1);
   1fdc8:	2301      	movs	r3, #1
   1fdca:	463a      	mov	r2, r7
   1fdcc:	4631      	mov	r1, r6
   1fdce:	4620      	mov	r0, r4
   1fdd0:	f7ff fdec 	bl	1f9ac <create_mldv2>
   1fdd4:	4604      	mov	r4, r0

	ret = send_mldv2_raw(iface, pkt->frags);
   1fdd6:	6881      	ldr	r1, [r0, #8]
   1fdd8:	4628      	mov	r0, r5
   1fdda:	f7ff fee9 	bl	1fbb0 <send_mldv2_raw>
   1fdde:	4605      	mov	r5, r0

	pkt->frags = NULL;
   1fde0:	2300      	movs	r3, #0
   1fde2:	60a3      	str	r3, [r4, #8]

	net_pkt_unref(pkt);
   1fde4:	4620      	mov	r0, r4
   1fde6:	f7fd fc1c 	bl	1d622 <net_pkt_unref>

	return ret;
}
   1fdea:	4628      	mov	r0, r5
   1fdec:	b003      	add	sp, #12
   1fdee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fdf0 <send_mld_report>:

	return ret;
}

static void send_mld_report(struct net_if *iface)
{
   1fdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fdf2:	b087      	sub	sp, #28
   1fdf4:	4605      	mov	r5, r0
   1fdf6:	6843      	ldr	r3, [r0, #4]
   1fdf8:	689b      	ldr	r3, [r3, #8]
   1fdfa:	2100      	movs	r1, #0
   1fdfc:	4798      	blx	r3
	struct net_pkt *pkt;
	int i, count = 0;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1fdfe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fe02:	f7fd fb9d 	bl	1d540 <net_pkt_get_reserve_tx>
   1fe06:	4606      	mov	r6, r0
   1fe08:	2400      	movs	r4, #0
   1fe0a:	aa06      	add	r2, sp, #24
   1fe0c:	f802 4d04 	strb.w	r4, [r2, #-4]!
   1fe10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe14:	2101      	movs	r1, #1
   1fe16:	f7fd fd3c 	bl	1d892 <net_pkt_append>
	int i, count = 0;
   1fe1a:	4627      	mov	r7, r4
				     K_FOREVER);

	net_pkt_append_u8(pkt, 0); /* This will be the record count */

	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1fe1c:	e000      	b.n	1fe20 <send_mld_report+0x30>
   1fe1e:	3401      	adds	r4, #1
   1fe20:	2c04      	cmp	r4, #4
   1fe22:	dc1e      	bgt.n	1fe62 <send_mld_report+0x72>
		if (!iface->ipv6.mcast[i].is_used ||
   1fe24:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1fe28:	00d3      	lsls	r3, r2, #3
   1fe2a:	442b      	add	r3, r5
   1fe2c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1fe30:	f013 0f01 	tst.w	r3, #1
   1fe34:	d0f3      	beq.n	1fe1e <send_mld_report+0x2e>
		    !iface->ipv6.mcast[i].is_joined) {
   1fe36:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1fe3a:	00d3      	lsls	r3, r2, #3
   1fe3c:	461a      	mov	r2, r3
   1fe3e:	442b      	add	r3, r5
   1fe40:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   1fe44:	f013 0f02 	tst.w	r3, #2
   1fe48:	d0e9      	beq.n	1fe1e <send_mld_report+0x2e>
			continue;
		}

		pkt = create_mldv2(pkt, &iface->ipv6.mcast[i].address.in6_addr,
   1fe4a:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1fe4e:	4429      	add	r1, r5
   1fe50:	2300      	movs	r3, #0
   1fe52:	2202      	movs	r2, #2
   1fe54:	3118      	adds	r1, #24
   1fe56:	4630      	mov	r0, r6
   1fe58:	f7ff fda8 	bl	1f9ac <create_mldv2>
   1fe5c:	4606      	mov	r6, r0
				   NET_IPV6_MLDv2_MODE_IS_EXCLUDE, 0);
		count++;
   1fe5e:	3701      	adds	r7, #1
   1fe60:	e7dd      	b.n	1fe1e <send_mld_report+0x2e>
	}

	if (count > 0) {
   1fe62:	2f00      	cmp	r7, #0
   1fe64:	dd16      	ble.n	1fe94 <send_mld_report+0xa4>
		u16_t pos;

		/* Write back the record count */
		net_pkt_write_u8(pkt, pkt->frags, 0, &pos, count);
   1fe66:	68b1      	ldr	r1, [r6, #8]
   1fe68:	f88d 7015 	strb.w	r7, [sp, #21]
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u8_t),
   1fe6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe70:	9302      	str	r3, [sp, #8]
   1fe72:	f10d 0315 	add.w	r3, sp, #21
   1fe76:	9301      	str	r3, [sp, #4]
   1fe78:	2301      	movs	r3, #1
   1fe7a:	9300      	str	r3, [sp, #0]
   1fe7c:	f10d 0316 	add.w	r3, sp, #22
   1fe80:	2200      	movs	r2, #0
   1fe82:	4630      	mov	r0, r6
   1fe84:	f7fd fdbd 	bl	1da02 <net_pkt_write>

		send_mldv2_raw(iface, pkt->frags);
   1fe88:	68b1      	ldr	r1, [r6, #8]
   1fe8a:	4628      	mov	r0, r5
   1fe8c:	f7ff fe90 	bl	1fbb0 <send_mldv2_raw>

		pkt->frags = NULL;
   1fe90:	2300      	movs	r3, #0
   1fe92:	60b3      	str	r3, [r6, #8]
	}

	net_pkt_unref(pkt);
   1fe94:	4630      	mov	r0, r6
   1fe96:	f7fd fbc4 	bl	1d622 <net_pkt_unref>
}
   1fe9a:	b007      	add	sp, #28
   1fe9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0001fea0 <handle_mld_query>:

static enum net_verdict handle_mld_query(struct net_pkt *pkt)
{
   1fea0:	b570      	push	{r4, r5, r6, lr}
   1fea2:	b08a      	sub	sp, #40	; 0x28
   1fea4:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   1fea6:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1fea8:	2200      	movs	r2, #0
   1feaa:	e002      	b.n	1feb2 <handle_mld_query+0x12>
		bytes += buf->len;
   1feac:	8999      	ldrh	r1, [r3, #12]
   1feae:	440a      	add	r2, r1
		buf = buf->frags;
   1feb0:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1feb2:	2b00      	cmp	r3, #0
   1feb4:	d1fa      	bne.n	1feac <handle_mld_query+0xc>
	u16_t total_len = net_pkt_get_len(pkt);
   1feb6:	b294      	uxth	r4, r2
	net_stats.ipv6_mld.recv++;
   1feb8:	4a37      	ldr	r2, [pc, #220]	; (1ff98 <handle_mld_query+0xf8>)
   1feba:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1febe:	3301      	adds	r3, #1
   1fec0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	net_stats_update_ipv6_mld_recv();

	/* offset tells now where the ICMPv6 header is starting */
	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1fec4:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1fec8:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1fecc:	4419      	add	r1, r3
	frag = net_frag_get_pos(pkt,
   1fece:	3104      	adds	r1, #4
   1fed0:	f10d 0212 	add.w	r2, sp, #18
   1fed4:	b289      	uxth	r1, r1
   1fed6:	4628      	mov	r0, r5
   1fed8:	f7fd fe72 	bl	1dbc0 <net_frag_get_pos>
				sizeof(struct net_icmp_hdr),
				&offset);

	frag = net_frag_read_be16(frag, offset, &pos, &max_rsp_code);
   1fedc:	f10d 0316 	add.w	r3, sp, #22
   1fee0:	aa04      	add	r2, sp, #16
   1fee2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1fee6:	f7fd fd62 	bl	1d9ae <net_frag_read_be16>
	frag = net_frag_skip(frag, pos, &pos, 2); /* two reserved bytes */
   1feea:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	return net_frag_read(frag, offset, pos, len, NULL);
   1feee:	2600      	movs	r6, #0
   1fef0:	9600      	str	r6, [sp, #0]
   1fef2:	2302      	movs	r3, #2
   1fef4:	aa04      	add	r2, sp, #16
   1fef6:	f7fd fd12 	bl	1d91e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(mcast), mcast.s6_addr);
   1fefa:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1fefe:	ab06      	add	r3, sp, #24
   1ff00:	9300      	str	r3, [sp, #0]
   1ff02:	2310      	movs	r3, #16
   1ff04:	eb0d 0203 	add.w	r2, sp, r3
   1ff08:	f7fd fd09 	bl	1d91e <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 2); /* skip S, QRV & QQIC */
   1ff0c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1ff10:	9600      	str	r6, [sp, #0]
   1ff12:	2302      	movs	r3, #2
   1ff14:	aa04      	add	r2, sp, #16
   1ff16:	f7fd fd02 	bl	1d91e <net_frag_read>
	frag = net_frag_read_be16(pkt->frags, pos, &pos, &num_src);
   1ff1a:	ab05      	add	r3, sp, #20
   1ff1c:	aa04      	add	r2, sp, #16
   1ff1e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1ff22:	68a8      	ldr	r0, [r5, #8]
   1ff24:	f7fd fd43 	bl	1d9ae <net_frag_read_be16>
	if (!frag && pos == 0xffff) {
   1ff28:	b358      	cbz	r0, 1ff82 <handle_mld_query+0xe2>
		goto drop;
	}

	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   1ff2a:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
		sizeof(struct in6_addr) * num_src;
   1ff2e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1ff32:	0112      	lsls	r2, r2, #4
   1ff34:	b292      	uxth	r2, r2
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
   1ff36:	4413      	add	r3, r2
   1ff38:	b29b      	uxth	r3, r3
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   1ff3a:	3344      	adds	r3, #68	; 0x44
   1ff3c:	b29b      	uxth	r3, r3

	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1ff3e:	429c      	cmp	r4, r3
   1ff40:	d307      	bcc.n	1ff52 <handle_mld_query+0xb2>
   1ff42:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   1ff46:	d804      	bhi.n	1ff52 <handle_mld_query+0xb2>
	return pkt->frags->data;
   1ff48:	68ab      	ldr	r3, [r5, #8]
   1ff4a:	689b      	ldr	r3, [r3, #8]
	     (NET_IPV6_HDR(pkt)->hop_limit != 1))) {
   1ff4c:	79db      	ldrb	r3, [r3, #7]
	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1ff4e:	2b01      	cmp	r3, #1
   1ff50:	d006      	beq.n	1ff60 <handle_mld_query+0xc0>
		struct net_icmp_hdr hdr, *icmp_hdr;

		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1ff52:	a903      	add	r1, sp, #12
   1ff54:	4628      	mov	r0, r5
   1ff56:	f7fe fc68 	bl	1e82a <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1ff5a:	b148      	cbz	r0, 1ff70 <handle_mld_query+0xd0>
   1ff5c:	7843      	ldrb	r3, [r0, #1]
   1ff5e:	b93b      	cbnz	r3, 1ff70 <handle_mld_query+0xd0>
			goto drop;
		}
	}

	/* Currently we only support a unspecified address query. */
	if (!net_ipv6_addr_cmp(&mcast, net_ipv6_unspecified_address())) {
   1ff60:	f7ff fd20 	bl	1f9a4 <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1ff64:	2210      	movs	r2, #16
   1ff66:	4601      	mov	r1, r0
   1ff68:	a806      	add	r0, sp, #24
   1ff6a:	f00a f875 	bl	2a058 <memcmp>
   1ff6e:	b178      	cbz	r0, 1ff90 <handle_mld_query+0xf0>
	net_stats.ipv6_mld.drop++;
   1ff70:	4a09      	ldr	r2, [pc, #36]	; (1ff98 <handle_mld_query+0xf8>)
   1ff72:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   1ff76:	3301      	adds	r3, #1
   1ff78:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

drop:
	net_stats_update_ipv6_mld_drop();

	return NET_DROP;
}
   1ff7c:	2002      	movs	r0, #2
   1ff7e:	b00a      	add	sp, #40	; 0x28
   1ff80:	bd70      	pop	{r4, r5, r6, pc}
	if (!frag && pos == 0xffff) {
   1ff82:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   1ff86:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ff8a:	429a      	cmp	r2, r3
   1ff8c:	d1cd      	bne.n	1ff2a <handle_mld_query+0x8a>
   1ff8e:	e7ef      	b.n	1ff70 <handle_mld_query+0xd0>
	send_mld_report(net_pkt_iface(pkt));
   1ff90:	6968      	ldr	r0, [r5, #20]
   1ff92:	f7ff ff2d 	bl	1fdf0 <send_mld_report>
   1ff96:	e7eb      	b.n	1ff70 <handle_mld_query+0xd0>
   1ff98:	20002b50 	.word	0x20002b50

0001ff9c <net_ipv6_finalize>:
{
   1ff9c:	b508      	push	{r3, lr}
   1ff9e:	460b      	mov	r3, r1
	if (context->flags & NET_CONTEXT_PROTO) {
   1ffa0:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   1ffa4:	f012 0f40 	tst.w	r2, #64	; 0x40
   1ffa8:	d104      	bne.n	1ffb4 <net_ipv6_finalize+0x18>
	return IPPROTO_UDP;
   1ffaa:	2111      	movs	r1, #17
	return net_ipv6_finalize_raw(pkt, net_context_get_ip_proto(context));
   1ffac:	4618      	mov	r0, r3
   1ffae:	f7ff fdd2 	bl	1fb56 <net_ipv6_finalize_raw>
}
   1ffb2:	bd08      	pop	{r3, pc}
		return IPPROTO_TCP;
   1ffb4:	2106      	movs	r1, #6
   1ffb6:	e7f9      	b.n	1ffac <net_ipv6_finalize+0x10>

0001ffb8 <net_ipv6_nbr_lookup>:
{
   1ffb8:	b508      	push	{r3, lr}
	return nbr_lookup(&net_neighbor.table, iface, addr);
   1ffba:	460a      	mov	r2, r1
   1ffbc:	4601      	mov	r1, r0
   1ffbe:	4802      	ldr	r0, [pc, #8]	; (1ffc8 <net_ipv6_nbr_lookup+0x10>)
   1ffc0:	f7ff fb42 	bl	1f648 <nbr_lookup>
}
   1ffc4:	bd08      	pop	{r3, pc}
   1ffc6:	bf00      	nop
   1ffc8:	2000bf44 	.word	0x2000bf44

0001ffcc <net_ipv6_send_na>:
{
   1ffcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ffd0:	b093      	sub	sp, #76	; 0x4c
   1ffd2:	4605      	mov	r5, r0
   1ffd4:	468b      	mov	fp, r1
   1ffd6:	4692      	mov	sl, r2
   1ffd8:	4699      	mov	r9, r3
   1ffda:	6843      	ldr	r3, [r0, #4]
   1ffdc:	689b      	ldr	r3, [r3, #8]
   1ffde:	4611      	mov	r1, r2
   1ffe0:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1ffe2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ffe6:	f7fd faab 	bl	1d540 <net_pkt_get_reserve_tx>
   1ffea:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   1ffec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fff0:	f7fd fac4 	bl	1d57c <net_pkt_get_frag>
   1fff4:	4607      	mov	r7, r0
	net_pkt_frag_add(pkt, frag);
   1fff6:	4601      	mov	r1, r0
   1fff8:	4620      	mov	r0, r4
   1fffa:	f7fd fb3c 	bl	1d676 <net_pkt_frag_add>
	pkt->iface = iface;
   1fffe:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20000:	7d6b      	ldrb	r3, [r5, #21]
   20002:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20006:	7d6b      	ldrb	r3, [r5, #21]
   20008:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   2000c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   20010:	220a      	movs	r2, #10
   20012:	f362 03c6 	bfi	r3, r2, #3, #4
   20016:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   2001a:	2328      	movs	r3, #40	; 0x28
   2001c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   20020:	68a3      	ldr	r3, [r4, #8]
   20022:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   20024:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   20028:	461a      	mov	r2, r3
   2002a:	2100      	movs	r1, #0
   2002c:	1ac0      	subs	r0, r0, r3
   2002e:	f00a f8a7 	bl	2a180 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   20032:	2300      	movs	r3, #0
   20034:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   20036:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (iface->link_addr.len == 6) {
   2003a:	7d2b      	ldrb	r3, [r5, #20]
   2003c:	2b06      	cmp	r3, #6
   2003e:	f000 8092 	beq.w	20166 <net_ipv6_send_na+0x19a>
	} else if (iface->link_addr.len == 8) {
   20042:	2b08      	cmp	r3, #8
   20044:	f000 808d 	beq.w	20162 <net_ipv6_send_na+0x196>
	return 0;
   20048:	2600      	movs	r6, #0
	pkt->ipv6_ext_len = len;
   2004a:	f04f 0800 	mov.w	r8, #0
   2004e:	f884 803b 	strb.w	r8, [r4, #59]	; 0x3b
	setup_headers(pkt, sizeof(struct net_icmpv6_na_hdr) + llao_len,
   20052:	f106 0514 	add.w	r5, r6, #20
   20056:	2288      	movs	r2, #136	; 0x88
   20058:	f005 01fc 	and.w	r1, r5, #252	; 0xfc
   2005c:	4620      	mov	r0, r4
   2005e:	f7ff fc0c 	bl	1f87a <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   20062:	4629      	mov	r1, r5
   20064:	f107 0008 	add.w	r0, r7, #8
   20068:	f7fa fdb8 	bl	1abdc <net_buf_simple_add>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   2006c:	a901      	add	r1, sp, #4
   2006e:	4620      	mov	r0, r4
   20070:	f7fe fdd8 	bl	1ec24 <net_icmpv6_get_na_hdr>
   20074:	4607      	mov	r7, r0
	return pkt->frags->data;
   20076:	68a3      	ldr	r3, [r4, #8]
   20078:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   2007c:	ad06      	add	r5, sp, #24
   2007e:	f8db 0000 	ldr.w	r0, [fp]
   20082:	f8db 1004 	ldr.w	r1, [fp, #4]
   20086:	f8db 2008 	ldr.w	r2, [fp, #8]
   2008a:	f8db 300c 	ldr.w	r3, [fp, #12]
   2008e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20090:	ad06      	add	r5, sp, #24
   20092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20094:	f8ce 0008 	str.w	r0, [lr, #8]
   20098:	f8ce 100c 	str.w	r1, [lr, #12]
   2009c:	f8ce 2010 	str.w	r2, [lr, #16]
   200a0:	f8ce 3014 	str.w	r3, [lr, #20]
   200a4:	68a3      	ldr	r3, [r4, #8]
   200a6:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   200aa:	ad0a      	add	r5, sp, #40	; 0x28
   200ac:	f8da 0000 	ldr.w	r0, [sl]
   200b0:	f8da 1004 	ldr.w	r1, [sl, #4]
   200b4:	f8da 2008 	ldr.w	r2, [sl, #8]
   200b8:	f8da 300c 	ldr.w	r3, [sl, #12]
   200bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   200be:	ad0a      	add	r5, sp, #40	; 0x28
   200c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   200c2:	f8cc 0018 	str.w	r0, [ip, #24]
   200c6:	f8cc 101c 	str.w	r1, [ip, #28]
   200ca:	f8cc 2020 	str.w	r2, [ip, #32]
   200ce:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   200d2:	ad0e      	add	r5, sp, #56	; 0x38
   200d4:	f8d9 0000 	ldr.w	r0, [r9]
   200d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
   200dc:	f8d9 2008 	ldr.w	r2, [r9, #8]
   200e0:	f8d9 300c 	ldr.w	r3, [r9, #12]
   200e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   200e6:	ad0e      	add	r5, sp, #56	; 0x38
   200e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   200ea:	6078      	str	r0, [r7, #4]
   200ec:	60b9      	str	r1, [r7, #8]
   200ee:	60fa      	str	r2, [r7, #12]
   200f0:	613b      	str	r3, [r7, #16]
	return pkt->iface;
   200f2:	f8d4 a014 	ldr.w	sl, [r4, #20]
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   200f6:	4620      	mov	r0, r4
   200f8:	f7fd fd6c 	bl	1dbd4 <net_pkt_icmp_data>
	set_llao(&net_pkt_iface(pkt)->link_addr,
   200fc:	f100 0518 	add.w	r5, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   20100:	2302      	movs	r3, #2
   20102:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   20104:	08f3      	lsrs	r3, r6, #3
   20106:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   20108:	f89a 2014 	ldrb.w	r2, [sl, #20]
   2010c:	f8da 1010 	ldr.w	r1, [sl, #16]
   20110:	301a      	adds	r0, #26
   20112:	f7e0 f8d5 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   20116:	f89a 2014 	ldrb.w	r2, [sl, #20]
   2011a:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   2011c:	1ab2      	subs	r2, r6, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   2011e:	3a02      	subs	r2, #2
   20120:	4641      	mov	r1, r8
   20122:	4428      	add	r0, r5
   20124:	f00a f82c 	bl	2a180 <memset>
	na_hdr->flags = flags;
   20128:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   2012c:	703b      	strb	r3, [r7, #0]
	net_icmpv6_set_na_hdr(pkt, na_hdr);
   2012e:	4639      	mov	r1, r7
   20130:	4620      	mov	r0, r4
   20132:	f7fe fdac 	bl	1ec8e <net_icmpv6_set_na_hdr>
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   20136:	68a3      	ldr	r3, [r4, #8]
		sizeof(struct net_icmpv6_na_hdr) + llao_len;
   20138:	3640      	adds	r6, #64	; 0x40
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   2013a:	819e      	strh	r6, [r3, #12]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   2013c:	68a1      	ldr	r1, [r4, #8]
   2013e:	4620      	mov	r0, r4
   20140:	f7fe fb26 	bl	1e790 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   20144:	4620      	mov	r0, r4
   20146:	f7fa fe6b 	bl	1ae20 <net_send_data>
   2014a:	4540      	cmp	r0, r8
   2014c:	db0d      	blt.n	2016a <net_ipv6_send_na+0x19e>
	net_stats.ipv6_nd.sent++;
   2014e:	4a0d      	ldr	r2, [pc, #52]	; (20184 <net_ipv6_send_na+0x1b8>)
   20150:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   20154:	3301      	adds	r3, #1
   20156:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   2015a:	4640      	mov	r0, r8
}
   2015c:	b013      	add	sp, #76	; 0x4c
   2015e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   20162:	2610      	movs	r6, #16
   20164:	e771      	b.n	2004a <net_ipv6_send_na+0x7e>
		return 8;
   20166:	2608      	movs	r6, #8
   20168:	e76f      	b.n	2004a <net_ipv6_send_na+0x7e>
	net_pkt_unref(pkt);
   2016a:	4620      	mov	r0, r4
   2016c:	f7fd fa59 	bl	1d622 <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   20170:	4a04      	ldr	r2, [pc, #16]	; (20184 <net_ipv6_send_na+0x1b8>)
   20172:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   20176:	3301      	adds	r3, #1
   20178:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   2017c:	f06f 0015 	mvn.w	r0, #21
   20180:	e7ec      	b.n	2015c <net_ipv6_send_na+0x190>
   20182:	bf00      	nop
   20184:	20002b50 	.word	0x20002b50

00020188 <net_ipv6_nbr_set_reachable_timer>:
{
   20188:	b508      	push	{r3, lr}
   2018a:	68c9      	ldr	r1, [r1, #12]
   2018c:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
   20190:	3114      	adds	r1, #20
   20192:	4802      	ldr	r0, [pc, #8]	; (2019c <net_ipv6_nbr_set_reachable_timer+0x14>)
   20194:	f009 fe6a 	bl	29e6c <k_delayed_work_submit_to_queue>
   20198:	bd08      	pop	{r3, pc}
   2019a:	bf00      	nop
   2019c:	20002c70 	.word	0x20002c70

000201a0 <handle_na_input>:
{
   201a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   201a4:	b090      	sub	sp, #64	; 0x40
   201a6:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   201a8:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   201aa:	2200      	movs	r2, #0
   201ac:	e002      	b.n	201b4 <handle_na_input+0x14>
		bytes += buf->len;
   201ae:	8999      	ldrh	r1, [r3, #12]
   201b0:	440a      	add	r2, r1
		buf = buf->frags;
   201b2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   201b4:	2b00      	cmp	r3, #0
   201b6:	d1fa      	bne.n	201ae <handle_na_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   201b8:	b295      	uxth	r5, r2
	na_hdr = net_icmpv6_get_na_hdr(pkt, &nahdr);
   201ba:	a90a      	add	r1, sp, #40	; 0x28
   201bc:	4620      	mov	r0, r4
   201be:	f7fe fd31 	bl	1ec24 <net_icmpv6_get_na_hdr>
   201c2:	4607      	mov	r7, r0
	net_stats.ipv6_nd.recv++;
   201c4:	4aaf      	ldr	r2, [pc, #700]	; (20484 <handle_na_input+0x2e4>)
   201c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   201ca:	3301      	adds	r3, #1
   201cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   201d0:	2d41      	cmp	r5, #65	; 0x41
   201d2:	d904      	bls.n	201de <handle_na_input+0x3e>
	return pkt->frags->data;
   201d4:	68a3      	ldr	r3, [r4, #8]
   201d6:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   201d8:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   201da:	2bff      	cmp	r3, #255	; 0xff
   201dc:	d010      	beq.n	20200 <handle_na_input+0x60>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   201de:	a905      	add	r1, sp, #20
   201e0:	4620      	mov	r0, r4
   201e2:	f7fe fb22 	bl	1e82a <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   201e6:	b108      	cbz	r0, 201ec <handle_na_input+0x4c>
   201e8:	7843      	ldrb	r3, [r0, #1]
   201ea:	b1cb      	cbz	r3, 20220 <handle_na_input+0x80>
	net_stats.ipv6_nd.drop++;
   201ec:	4aa5      	ldr	r2, [pc, #660]	; (20484 <handle_na_input+0x2e4>)
   201ee:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   201f2:	3301      	adds	r3, #1
   201f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   201f8:	2002      	movs	r0, #2
}
   201fa:	b010      	add	sp, #64	; 0x40
   201fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return addr->s6_addr[0] == 0xFF;
   20200:	7903      	ldrb	r3, [r0, #4]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   20202:	2bff      	cmp	r3, #255	; 0xff
   20204:	d0eb      	beq.n	201de <handle_na_input+0x3e>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20206:	a905      	add	r1, sp, #20
   20208:	4620      	mov	r0, r4
   2020a:	f7fe fd0b 	bl	1ec24 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   2020e:	7803      	ldrb	r3, [r0, #0]
	    net_is_ipv6_addr_mcast(&na_hdr->tgt) ||
   20210:	f013 0f40 	tst.w	r3, #64	; 0x40
   20214:	d004      	beq.n	20220 <handle_na_input+0x80>
   20216:	68a3      	ldr	r3, [r4, #8]
   20218:	689b      	ldr	r3, [r3, #8]
   2021a:	7e1b      	ldrb	r3, [r3, #24]
	    (net_is_solicited(pkt) &&
   2021c:	2bff      	cmp	r3, #255	; 0xff
   2021e:	d0de      	beq.n	201de <handle_na_input+0x3e>
	pkt->ipv6_ext_opt_len = len;
   20220:	2314      	movs	r3, #20
   20222:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   20226:	a90f      	add	r1, sp, #60	; 0x3c
   20228:	4620      	mov	r0, r4
   2022a:	f7fe fcc9 	bl	1ebc0 <net_icmpv6_get_nd_opt_hdr>
	return net_buf_frags_len(pkt->frags);
   2022e:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   20230:	2600      	movs	r6, #0
	while (buf) {
   20232:	b11b      	cbz	r3, 2023c <handle_na_input+0x9c>
		bytes += buf->len;
   20234:	899a      	ldrh	r2, [r3, #12]
   20236:	4416      	add	r6, r2
		buf = buf->frags;
   20238:	681b      	ldr	r3, [r3, #0]
   2023a:	e7fa      	b.n	20232 <handle_na_input+0x92>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   2023c:	3e2c      	subs	r6, #44	; 0x2c
	u16_t tllao_offset = 0;
   2023e:	2500      	movs	r5, #0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   20240:	e00b      	b.n	2025a <handle_na_input+0xba>
					     (nd_opt_hdr->len << 3));
   20242:	00db      	lsls	r3, r3, #3
   20244:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   20246:	4413      	add	r3, r2
   20248:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   2024a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   2024e:	4293      	cmp	r3, r2
   20250:	d9cc      	bls.n	201ec <handle_na_input+0x4c>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   20252:	a90f      	add	r1, sp, #60	; 0x3c
   20254:	4620      	mov	r0, r4
   20256:	f7fe fcb3 	bl	1ebc0 <net_icmpv6_get_nd_opt_hdr>
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   2025a:	b190      	cbz	r0, 20282 <handle_na_input+0xe2>
	return pkt->ipv6_ext_opt_len;
   2025c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   20260:	4296      	cmp	r6, r2
   20262:	d90e      	bls.n	20282 <handle_na_input+0xe2>
		if (!nd_opt_hdr->len) {
   20264:	7843      	ldrb	r3, [r0, #1]
   20266:	b163      	cbz	r3, 20282 <handle_na_input+0xe2>
		switch (nd_opt_hdr->type) {
   20268:	7801      	ldrb	r1, [r0, #0]
   2026a:	2902      	cmp	r1, #2
   2026c:	d1e9      	bne.n	20242 <handle_na_input+0xa2>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   2026e:	f894 5033 	ldrb.w	r5, [r4, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   20272:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   20276:	440d      	add	r5, r1
				sizeof(struct net_icmp_hdr) +
   20278:	4415      	add	r5, r2
   2027a:	b2ad      	uxth	r5, r5
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   2027c:	3506      	adds	r5, #6
   2027e:	b2ad      	uxth	r5, r5
			break;
   20280:	e7df      	b.n	20242 <handle_na_input+0xa2>
	return pkt->iface;
   20282:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   20286:	f107 0904 	add.w	r9, r7, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   2028a:	2600      	movs	r6, #0
   2028c:	e003      	b.n	20296 <handle_na_input+0xf6>
		if (net_is_ipv6_prefix(addr->s6_addr,
   2028e:	f1ba 0f00 	cmp.w	sl, #0
   20292:	d11f      	bne.n	202d4 <handle_na_input+0x134>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20294:	3601      	adds	r6, #1
   20296:	2e02      	cmp	r6, #2
   20298:	dc23      	bgt.n	202e2 <handle_na_input+0x142>
		if (!iface->ipv6.unicast[i].is_used ||
   2029a:	236c      	movs	r3, #108	; 0x6c
   2029c:	fb03 8306 	mla	r3, r3, r6, r8
   202a0:	f893 a094 	ldrb.w	sl, [r3, #148]	; 0x94
   202a4:	f1ba 0f00 	cmp.w	sl, #0
   202a8:	d0f4      	beq.n	20294 <handle_na_input+0xf4>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   202aa:	236c      	movs	r3, #108	; 0x6c
   202ac:	fb03 8306 	mla	r3, r3, r6, r8
   202b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   202b2:	2b0a      	cmp	r3, #10
   202b4:	d1ee      	bne.n	20294 <handle_na_input+0xf4>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   202b6:	216c      	movs	r1, #108	; 0x6c
   202b8:	fb01 f106 	mul.w	r1, r1, r6
   202bc:	3120      	adds	r1, #32
   202be:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   202c0:	2210      	movs	r2, #16
   202c2:	4411      	add	r1, r2
   202c4:	4648      	mov	r0, r9
   202c6:	f009 fec7 	bl	2a058 <memcmp>
   202ca:	2800      	cmp	r0, #0
   202cc:	d0df      	beq.n	2028e <handle_na_input+0xee>
		return false;
   202ce:	f04f 0a00 	mov.w	sl, #0
   202d2:	e7dc      	b.n	2028e <handle_na_input+0xee>
			return &iface->ipv6.unicast[i];
   202d4:	236c      	movs	r3, #108	; 0x6c
   202d6:	fb03 f306 	mul.w	r3, r3, r6
   202da:	3320      	adds	r3, #32
   202dc:	4443      	add	r3, r8
   202de:	330c      	adds	r3, #12
   202e0:	e000      	b.n	202e4 <handle_na_input+0x144>
	return NULL;
   202e2:	2300      	movs	r3, #0
	if (ifaddr) {
   202e4:	b17b      	cbz	r3, 20306 <handle_na_input+0x166>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   202e6:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
   202ea:	2b00      	cmp	r3, #0
   202ec:	f47f af7e 	bne.w	201ec <handle_na_input+0x4c>
   202f0:	6960      	ldr	r0, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   202f2:	88ba      	ldrh	r2, [r7, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   202f4:	f248 03fe 	movw	r3, #33022	; 0x80fe
   202f8:	429a      	cmp	r2, r3
   202fa:	f43f af77 	beq.w	201ec <handle_na_input+0x4c>
	net_if_ipv6_dad_failed(iface, addr);
   202fe:	4649      	mov	r1, r9
   20300:	f7fb fa0a 	bl	1b718 <net_if_ipv6_dad_failed>
   20304:	e772      	b.n	201ec <handle_na_input+0x4c>
	struct net_linkaddr_storage lladdr = { 0 };
   20306:	2300      	movs	r3, #0
   20308:	9303      	str	r3, [sp, #12]
   2030a:	9304      	str	r3, [sp, #16]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
   2030c:	1d3a      	adds	r2, r7, #4
   2030e:	6961      	ldr	r1, [r4, #20]
   20310:	485d      	ldr	r0, [pc, #372]	; (20488 <handle_na_input+0x2e8>)
   20312:	f7ff f999 	bl	1f648 <nbr_lookup>
	if (!nbr) {
   20316:	4606      	mov	r6, r0
   20318:	2800      	cmp	r0, #0
   2031a:	f000 8107 	beq.w	2052c <handle_na_input+0x38c>
	if (tllao_offset) {
   2031e:	b995      	cbnz	r5, 20346 <handle_na_input+0x1a6>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   20320:	7873      	ldrb	r3, [r6, #1]
   20322:	2bff      	cmp	r3, #255	; 0xff
   20324:	d135      	bne.n	20392 <handle_na_input+0x1f2>
		if (!tllao_offset) {
   20326:	bb2d      	cbnz	r5, 20374 <handle_na_input+0x1d4>
			return false;
   20328:	2300      	movs	r3, #0
	if (!handle_na_neighbor(pkt, na_hdr, tllao_offset)) {
   2032a:	2b00      	cmp	r3, #0
   2032c:	f43f af5e 	beq.w	201ec <handle_na_input+0x4c>
	net_pkt_unref(pkt);
   20330:	4620      	mov	r0, r4
   20332:	f7fd f976 	bl	1d622 <net_pkt_unref>
	net_stats.ipv6_nd.sent++;
   20336:	4a53      	ldr	r2, [pc, #332]	; (20484 <handle_na_input+0x2e4>)
   20338:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   2033c:	3301      	adds	r3, #1
   2033e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return NET_OK;
   20342:	2000      	movs	r0, #0
   20344:	e759      	b.n	201fa <handle_na_input+0x5a>
   20346:	6963      	ldr	r3, [r4, #20]
		lladdr.len = net_pkt_iface(pkt)->link_addr.len;
   20348:	7d1b      	ldrb	r3, [r3, #20]
   2034a:	f88d 300d 	strb.w	r3, [sp, #13]
		frag = net_frag_read(pkt->frags, tllao_offset,
   2034e:	f10d 020e 	add.w	r2, sp, #14
   20352:	9200      	str	r2, [sp, #0]
   20354:	f10d 020a 	add.w	r2, sp, #10
   20358:	4629      	mov	r1, r5
   2035a:	68a0      	ldr	r0, [r4, #8]
   2035c:	f7fd fadf 	bl	1d91e <net_frag_read>
		if (!frag && pos == 0xffff) {
   20360:	2800      	cmp	r0, #0
   20362:	d1dd      	bne.n	20320 <handle_na_input+0x180>
   20364:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   20368:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2036c:	429a      	cmp	r2, r3
   2036e:	d1d7      	bne.n	20320 <handle_na_input+0x180>
			return false;
   20370:	2300      	movs	r3, #0
   20372:	e7da      	b.n	2032a <handle_na_input+0x18a>
		nbr_lladdr.len = lladdr.len;
   20374:	f89d 300d 	ldrb.w	r3, [sp, #13]
   20378:	f88d 3018 	strb.w	r3, [sp, #24]
		nbr_lladdr.addr = lladdr.addr;
   2037c:	aa10      	add	r2, sp, #64	; 0x40
   2037e:	f10d 030e 	add.w	r3, sp, #14
   20382:	f842 3d2c 	str.w	r3, [r2, #-44]!
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   20386:	6961      	ldr	r1, [r4, #20]
   20388:	4630      	mov	r0, r6
   2038a:	f7fe ff77 	bl	1f27c <net_nbr_link>
   2038e:	2800      	cmp	r0, #0
   20390:	d14a      	bne.n	20428 <handle_na_input+0x288>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   20392:	7870      	ldrb	r0, [r6, #1]
   20394:	f7fe ffd8 	bl	1f348 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   20398:	4680      	mov	r8, r0
   2039a:	2800      	cmp	r0, #0
   2039c:	f000 80c8 	beq.w	20530 <handle_na_input+0x390>
	if (tllao_offset) {
   203a0:	2d00      	cmp	r5, #0
   203a2:	d145      	bne.n	20430 <handle_na_input+0x290>
	bool lladdr_changed = false;
   203a4:	2700      	movs	r7, #0
   203a6:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   203a8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   203ac:	2b00      	cmp	r3, #0
   203ae:	d155      	bne.n	2045c <handle_na_input+0x2bc>
		if (!tllao_offset) {
   203b0:	2d00      	cmp	r5, #0
   203b2:	f000 80bf 	beq.w	20534 <handle_na_input+0x394>
		if (lladdr_changed) {
   203b6:	b11f      	cbz	r7, 203c0 <handle_na_input+0x220>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   203b8:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   203bc:	2a06      	cmp	r2, #6
   203be:	d941      	bls.n	20444 <handle_na_input+0x2a4>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   203c0:	a905      	add	r1, sp, #20
   203c2:	4620      	mov	r0, r4
   203c4:	f7fe fc2e 	bl	1ec24 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   203c8:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   203ca:	f013 0f40 	tst.w	r3, #64	; 0x40
   203ce:	d040      	beq.n	20452 <handle_na_input+0x2b2>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   203d0:	2101      	movs	r1, #1
   203d2:	4630      	mov	r0, r6
   203d4:	f7fe ffc0 	bl	1f358 <ipv6_nbr_set_state>
   203d8:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->ns_count = 0;
   203da:	2200      	movs	r2, #0
   203dc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   203e0:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   203e2:	3014      	adds	r0, #20
   203e4:	f009 fce8 	bl	29db8 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   203e8:	4631      	mov	r1, r6
   203ea:	6960      	ldr	r0, [r4, #20]
   203ec:	f7ff fecc 	bl	20188 <net_ipv6_nbr_set_reachable_timer>
   203f0:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   203f2:	a905      	add	r1, sp, #20
   203f4:	4620      	mov	r0, r4
   203f6:	f7fe fc15 	bl	1ec24 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   203fa:	7803      	ldrb	r3, [r0, #0]
   203fc:	09db      	lsrs	r3, r3, #7
		net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   203fe:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   20402:	68f3      	ldr	r3, [r6, #12]
	pending = net_ipv6_nbr_data(nbr)->pending;
   20404:	681d      	ldr	r5, [r3, #0]
	if (pending) {
   20406:	2d00      	cmp	r5, #0
   20408:	f000 8098 	beq.w	2053c <handle_na_input+0x39c>
		if (net_send_data(pending) < 0) {
   2040c:	4628      	mov	r0, r5
   2040e:	f7fa fd07 	bl	1ae20 <net_send_data>
   20412:	2800      	cmp	r0, #0
   20414:	f2c0 8086 	blt.w	20524 <handle_na_input+0x384>
   20418:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->pending = NULL;
   2041a:	2200      	movs	r2, #0
   2041c:	601a      	str	r2, [r3, #0]
		net_pkt_unref(pending);
   2041e:	4628      	mov	r0, r5
   20420:	f7fd f8ff 	bl	1d622 <net_pkt_unref>
	return true;
   20424:	2301      	movs	r3, #1
   20426:	e780      	b.n	2032a <handle_na_input+0x18a>
			nbr_free(nbr);
   20428:	4630      	mov	r0, r6
   2042a:	f7ff fa53 	bl	1f8d4 <nbr_free>
   2042e:	e77b      	b.n	20328 <handle_na_input+0x188>
		lladdr_changed = memcmp(lladdr.addr,
   20430:	7842      	ldrb	r2, [r0, #1]
   20432:	1c81      	adds	r1, r0, #2
   20434:	f10d 000e 	add.w	r0, sp, #14
   20438:	f009 fe0e 	bl	2a058 <memcmp>
   2043c:	1c07      	adds	r7, r0, #0
   2043e:	bf18      	it	ne
   20440:	2701      	movne	r7, #1
   20442:	e7b0      	b.n	203a6 <handle_na_input+0x206>
	memcpy(lladdr_store->addr, new_addr, new_len);
   20444:	f10d 010e 	add.w	r1, sp, #14
   20448:	f108 0002 	add.w	r0, r8, #2
   2044c:	f7df ff38 	bl	2c0 <memcpy>
   20450:	e7b6      	b.n	203c0 <handle_na_input+0x220>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   20452:	2102      	movs	r1, #2
   20454:	4630      	mov	r0, r6
   20456:	f7fe ff7f 	bl	1f358 <ipv6_nbr_set_state>
   2045a:	e7c9      	b.n	203f0 <handle_na_input+0x250>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   2045c:	a905      	add	r1, sp, #20
   2045e:	4620      	mov	r0, r4
   20460:	f7fe fbe0 	bl	1ec24 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   20464:	7803      	ldrb	r3, [r0, #0]
	if (!net_is_override(pkt) && lladdr_changed) {
   20466:	f013 0f20 	tst.w	r3, #32
   2046a:	d10f      	bne.n	2048c <handle_na_input+0x2ec>
   2046c:	b177      	cbz	r7, 2048c <handle_na_input+0x2ec>
   2046e:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state ==
   20470:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   20474:	2b01      	cmp	r3, #1
   20476:	d15f      	bne.n	20538 <handle_na_input+0x398>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   20478:	2102      	movs	r1, #2
   2047a:	4630      	mov	r0, r6
   2047c:	f7fe ff6c 	bl	1f358 <ipv6_nbr_set_state>
		return false;
   20480:	2300      	movs	r3, #0
   20482:	e752      	b.n	2032a <handle_na_input+0x18a>
   20484:	20002b50 	.word	0x20002b50
   20488:	2000bf44 	.word	0x2000bf44
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   2048c:	a905      	add	r1, sp, #20
   2048e:	4620      	mov	r0, r4
   20490:	f7fe fbc8 	bl	1ec24 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   20494:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   20496:	f013 0f20 	tst.w	r3, #32
   2049a:	d018      	beq.n	204ce <handle_na_input+0x32e>
		if (lladdr_changed) {
   2049c:	b14f      	cbz	r7, 204b2 <handle_na_input+0x312>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   2049e:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   204a2:	2a06      	cmp	r2, #6
   204a4:	d805      	bhi.n	204b2 <handle_na_input+0x312>
	memcpy(lladdr_store->addr, new_addr, new_len);
   204a6:	f10d 010e 	add.w	r1, sp, #14
   204aa:	f108 0002 	add.w	r0, r8, #2
   204ae:	f7df ff07 	bl	2c0 <memcpy>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   204b2:	a905      	add	r1, sp, #20
   204b4:	4620      	mov	r0, r4
   204b6:	f7fe fbb5 	bl	1ec24 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   204ba:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   204bc:	f013 0f40 	tst.w	r3, #64	; 0x40
   204c0:	d11e      	bne.n	20500 <handle_na_input+0x360>
			if (lladdr_changed) {
   204c2:	b17f      	cbz	r7, 204e4 <handle_na_input+0x344>
				ipv6_nbr_set_state(nbr,
   204c4:	2102      	movs	r1, #2
   204c6:	4630      	mov	r0, r6
   204c8:	f7fe ff46 	bl	1f358 <ipv6_nbr_set_state>
   204cc:	e00a      	b.n	204e4 <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   204ce:	a905      	add	r1, sp, #20
   204d0:	4620      	mov	r0, r4
   204d2:	f7fe fba7 	bl	1ec24 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   204d6:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   204d8:	f013 0f20 	tst.w	r3, #32
   204dc:	d102      	bne.n	204e4 <handle_na_input+0x344>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   204de:	b10d      	cbz	r5, 204e4 <handle_na_input+0x344>
   204e0:	2f00      	cmp	r7, #0
   204e2:	d0db      	beq.n	2049c <handle_na_input+0x2fc>
   204e4:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->is_router && !net_is_router(pkt)) {
   204e6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   204ea:	b9b3      	cbnz	r3, 2051a <handle_na_input+0x37a>
   204ec:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   204ee:	a905      	add	r1, sp, #20
   204f0:	4620      	mov	r0, r4
   204f2:	f7fe fb97 	bl	1ec24 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   204f6:	7803      	ldrb	r3, [r0, #0]
   204f8:	09db      	lsrs	r3, r3, #7
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   204fa:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   204fe:	e780      	b.n	20402 <handle_na_input+0x262>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   20500:	2101      	movs	r1, #1
   20502:	4630      	mov	r0, r6
   20504:	f7fe ff28 	bl	1f358 <ipv6_nbr_set_state>
   20508:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   2050a:	3014      	adds	r0, #20
   2050c:	f009 fc54 	bl	29db8 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   20510:	4631      	mov	r1, r6
   20512:	6960      	ldr	r0, [r4, #20]
   20514:	f7ff fe38 	bl	20188 <net_ipv6_nbr_set_reachable_timer>
   20518:	e7e4      	b.n	204e4 <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   2051a:	a905      	add	r1, sp, #20
   2051c:	4620      	mov	r0, r4
   2051e:	f7fe fb81 	bl	1ec24 <net_icmpv6_get_na_hdr>
   20522:	e7e3      	b.n	204ec <handle_na_input+0x34c>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   20524:	68f0      	ldr	r0, [r6, #12]
   20526:	f7ff f8af 	bl	1f688 <nbr_clear_ns_pending>
   2052a:	e778      	b.n	2041e <handle_na_input+0x27e>
		return false;
   2052c:	2300      	movs	r3, #0
   2052e:	e6fc      	b.n	2032a <handle_na_input+0x18a>
		return false;
   20530:	2300      	movs	r3, #0
   20532:	e6fa      	b.n	2032a <handle_na_input+0x18a>
			return false;
   20534:	2300      	movs	r3, #0
   20536:	e6f8      	b.n	2032a <handle_na_input+0x18a>
		return false;
   20538:	2300      	movs	r3, #0
   2053a:	e6f6      	b.n	2032a <handle_na_input+0x18a>
	return true;
   2053c:	2301      	movs	r3, #1
   2053e:	e6f4      	b.n	2032a <handle_na_input+0x18a>

00020540 <net_ipv6_send_ns>:
{
   20540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20544:	b09d      	sub	sp, #116	; 0x74
   20546:	4605      	mov	r5, r0
   20548:	9101      	str	r1, [sp, #4]
   2054a:	4691      	mov	r9, r2
   2054c:	461e      	mov	r6, r3
   2054e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   20550:	f89d b09c 	ldrb.w	fp, [sp, #156]	; 0x9c
	return iface->l2->reserve(iface, (void *)dst_ip6);
   20554:	6843      	ldr	r3, [r0, #4]
   20556:	689b      	ldr	r3, [r3, #8]
   20558:	4631      	mov	r1, r6
   2055a:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   2055c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20560:	f7fc ffee 	bl	1d540 <net_pkt_get_reserve_tx>
   20564:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   20566:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2056a:	f7fd f807 	bl	1d57c <net_pkt_get_frag>
   2056e:	4682      	mov	sl, r0
	net_pkt_frag_add(pkt, frag);
   20570:	4601      	mov	r1, r0
   20572:	4620      	mov	r0, r4
   20574:	f7fd f87f 	bl	1d676 <net_pkt_frag_add>
	pkt->iface = iface;
   20578:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   2057a:	7d6b      	ldrb	r3, [r5, #21]
   2057c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20580:	7d6b      	ldrb	r3, [r5, #21]
   20582:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   20586:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2058a:	220a      	movs	r2, #10
   2058c:	f362 03c6 	bfi	r3, r2, #3, #4
   20590:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   20594:	2328      	movs	r3, #40	; 0x28
   20596:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	pkt->ipv6_ext_len = len;
   2059a:	2500      	movs	r5, #0
   2059c:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
	return pkt->frags->data;
   205a0:	68a3      	ldr	r3, [r4, #8]
   205a2:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   205a4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   205a8:	461a      	mov	r2, r3
   205aa:	4629      	mov	r1, r5
   205ac:	1ac0      	subs	r0, r0, r3
   205ae:	f009 fde7 	bl	2a180 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   205b2:	6225      	str	r5, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   205b4:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return pkt->iface;
   205b8:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   205ba:	7d1b      	ldrb	r3, [r3, #20]
   205bc:	2b06      	cmp	r3, #6
   205be:	f000 808b 	beq.w	206d8 <net_ipv6_send_ns+0x198>
	} else if (iface->link_addr.len == 8) {
   205c2:	2b08      	cmp	r3, #8
   205c4:	f000 8085 	beq.w	206d2 <net_ipv6_send_ns+0x192>
	return 0;
   205c8:	f04f 0800 	mov.w	r8, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   205cc:	2287      	movs	r2, #135	; 0x87
   205ce:	f108 0114 	add.w	r1, r8, #20
   205d2:	4620      	mov	r0, r4
   205d4:	f7ff f951 	bl	1f87a <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   205d8:	f10a 0a08 	add.w	sl, sl, #8
   205dc:	2114      	movs	r1, #20
   205de:	4650      	mov	r0, sl
   205e0:	f7fa fafc 	bl	1abdc <net_buf_simple_add>
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &hdr);
   205e4:	a903      	add	r1, sp, #12
   205e6:	4620      	mov	r0, r4
   205e8:	f7fe fa8e 	bl	1eb08 <net_icmpv6_get_ns_hdr>
   205ec:	4605      	mov	r5, r0
	if (!dst) {
   205ee:	2e00      	cmp	r6, #0
   205f0:	d075      	beq.n	206de <net_ipv6_send_ns+0x19e>
	return pkt->frags->data;
   205f2:	68a3      	ldr	r3, [r4, #8]
   205f4:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   205f8:	f10d 0c20 	add.w	ip, sp, #32
   205fc:	6830      	ldr	r0, [r6, #0]
   205fe:	6871      	ldr	r1, [r6, #4]
   20600:	68b2      	ldr	r2, [r6, #8]
   20602:	68f3      	ldr	r3, [r6, #12]
   20604:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   20608:	ae08      	add	r6, sp, #32
   2060a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2060c:	f8ce 0018 	str.w	r0, [lr, #24]
   20610:	f8ce 101c 	str.w	r1, [lr, #28]
   20614:	f8ce 2020 	str.w	r2, [lr, #32]
   20618:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   2061c:	ae0c      	add	r6, sp, #48	; 0x30
   2061e:	6838      	ldr	r0, [r7, #0]
   20620:	6879      	ldr	r1, [r7, #4]
   20622:	68ba      	ldr	r2, [r7, #8]
   20624:	68fb      	ldr	r3, [r7, #12]
   20626:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20628:	1d2f      	adds	r7, r5, #4
   2062a:	ae0c      	add	r6, sp, #48	; 0x30
   2062c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2062e:	6068      	str	r0, [r5, #4]
   20630:	6079      	str	r1, [r7, #4]
   20632:	60ba      	str	r2, [r7, #8]
   20634:	60fb      	str	r3, [r7, #12]
	net_icmpv6_set_ns_hdr(pkt, ns_hdr);
   20636:	4629      	mov	r1, r5
   20638:	4620      	mov	r0, r4
   2063a:	f7fe fa89 	bl	1eb50 <net_icmpv6_set_ns_hdr>
	if (is_my_address) {
   2063e:	f1bb 0f00 	cmp.w	fp, #0
   20642:	d06a      	beq.n	2071a <net_ipv6_send_ns+0x1da>
   20644:	68a3      	ldr	r3, [r4, #8]
   20646:	689f      	ldr	r7, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   20648:	f7ff f9ac 	bl	1f9a4 <net_ipv6_unspecified_address>
   2064c:	4603      	mov	r3, r0
   2064e:	ae10      	add	r6, sp, #64	; 0x40
   20650:	6800      	ldr	r0, [r0, #0]
   20652:	6859      	ldr	r1, [r3, #4]
   20654:	689a      	ldr	r2, [r3, #8]
   20656:	68db      	ldr	r3, [r3, #12]
   20658:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2065a:	ae10      	add	r6, sp, #64	; 0x40
   2065c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2065e:	60b8      	str	r0, [r7, #8]
   20660:	60f9      	str	r1, [r7, #12]
   20662:	613a      	str	r2, [r7, #16]
   20664:	617b      	str	r3, [r7, #20]
   20666:	68a3      	ldr	r3, [r4, #8]
   20668:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->len[1] -= llao_len;
   2066a:	795a      	ldrb	r2, [r3, #5]
   2066c:	eba2 0808 	sub.w	r8, r2, r8
   20670:	f883 8005 	strb.w	r8, [r3, #5]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   20674:	68a1      	ldr	r1, [r4, #8]
   20676:	4620      	mov	r0, r4
   20678:	f7fe f88a 	bl	1e790 <net_icmpv6_set_chksum>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &ns_hdr->tgt);
   2067c:	3504      	adds	r5, #4
   2067e:	462a      	mov	r2, r5
   20680:	6961      	ldr	r1, [r4, #20]
   20682:	486f      	ldr	r0, [pc, #444]	; (20840 <net_ipv6_send_ns+0x300>)
   20684:	f7fe ffe0 	bl	1f648 <nbr_lookup>
	if (!nbr) {
   20688:	4606      	mov	r6, r0
   2068a:	2800      	cmp	r0, #0
   2068c:	f000 80ad 	beq.w	207ea <net_ipv6_send_ns+0x2aa>
	if (pending) {
   20690:	9801      	ldr	r0, [sp, #4]
   20692:	b170      	cbz	r0, 206b2 <net_ipv6_send_ns+0x172>
   20694:	68f5      	ldr	r5, [r6, #12]
		if (!net_ipv6_nbr_data(nbr)->pending) {
   20696:	682b      	ldr	r3, [r5, #0]
   20698:	2b00      	cmp	r3, #0
   2069a:	f040 80b1 	bne.w	20800 <net_ipv6_send_ns+0x2c0>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   2069e:	f7fc ffb1 	bl	1d604 <net_pkt_ref>
   206a2:	6028      	str	r0, [r5, #0]
   206a4:	68f1      	ldr	r1, [r6, #12]
   206a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   206aa:	313c      	adds	r1, #60	; 0x3c
   206ac:	4865      	ldr	r0, [pc, #404]	; (20844 <net_ipv6_send_ns+0x304>)
   206ae:	f009 fbdd 	bl	29e6c <k_delayed_work_submit_to_queue>
	if (net_send_data(pkt) < 0) {
   206b2:	4620      	mov	r0, r4
   206b4:	f7fa fbb4 	bl	1ae20 <net_send_data>
   206b8:	2800      	cmp	r0, #0
   206ba:	f2c0 80b0 	blt.w	2081e <net_ipv6_send_ns+0x2de>
   206be:	4a62      	ldr	r2, [pc, #392]	; (20848 <net_ipv6_send_ns+0x308>)
   206c0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   206c4:	3301      	adds	r3, #1
   206c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   206ca:	2000      	movs	r0, #0
}
   206cc:	b01d      	add	sp, #116	; 0x74
   206ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   206d2:	f04f 0810 	mov.w	r8, #16
   206d6:	e779      	b.n	205cc <net_ipv6_send_ns+0x8c>
		return 8;
   206d8:	f04f 0808 	mov.w	r8, #8
   206dc:	e776      	b.n	205cc <net_ipv6_send_ns+0x8c>
   206de:	68a3      	ldr	r3, [r4, #8]
   206e0:	689b      	ldr	r3, [r3, #8]
	dst->s6_addr[0]   = 0xFF;
   206e2:	21ff      	movs	r1, #255	; 0xff
   206e4:	7619      	strb	r1, [r3, #24]
	dst->s6_addr[1]   = 0x02;
   206e6:	2202      	movs	r2, #2
   206e8:	765a      	strb	r2, [r3, #25]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   206ea:	2200      	movs	r2, #0
   206ec:	769a      	strb	r2, [r3, #26]
   206ee:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   206f0:	771a      	strb	r2, [r3, #28]
   206f2:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   206f4:	779a      	strb	r2, [r3, #30]
   206f6:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   206f8:	f883 2020 	strb.w	r2, [r3, #32]
   206fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	dst->s6_addr[10]  = 0;
   20700:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	dst->s6_addr[11]  = 0x01;
   20704:	2201      	movs	r2, #1
   20706:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	dst->s6_addr[12]  = 0xFF;
   2070a:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	dst->s6_addr[13]  = src->s6_addr[13];
   2070e:	7b7a      	ldrb	r2, [r7, #13]
   20710:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   20714:	89fa      	ldrh	r2, [r7, #14]
   20716:	84da      	strh	r2, [r3, #38]	; 0x26
   20718:	e780      	b.n	2061c <net_ipv6_send_ns+0xdc>
		if (src) {
   2071a:	f1b9 0f00 	cmp.w	r9, #0
   2071e:	d025      	beq.n	2076c <net_ipv6_send_ns+0x22c>
   20720:	68a3      	ldr	r3, [r4, #8]
   20722:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   20726:	ae14      	add	r6, sp, #80	; 0x50
   20728:	f8d9 0000 	ldr.w	r0, [r9]
   2072c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   20730:	f8d9 2008 	ldr.w	r2, [r9, #8]
   20734:	f8d9 300c 	ldr.w	r3, [r9, #12]
   20738:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2073a:	ae14      	add	r6, sp, #80	; 0x50
   2073c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2073e:	f8ce 0008 	str.w	r0, [lr, #8]
   20742:	f8ce 100c 	str.w	r1, [lr, #12]
   20746:	f8ce 2010 	str.w	r2, [lr, #16]
   2074a:	f8ce 3014 	str.w	r3, [lr, #20]
   2074e:	68a3      	ldr	r3, [r4, #8]
   20750:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20752:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20754:	b9fa      	cbnz	r2, 20796 <net_ipv6_send_ns+0x256>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20756:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20758:	2a00      	cmp	r2, #0
   2075a:	d140      	bne.n	207de <net_ipv6_send_ns+0x29e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2075c:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2075e:	2a00      	cmp	r2, #0
   20760:	d13f      	bne.n	207e2 <net_ipv6_send_ns+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   20762:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20764:	2b00      	cmp	r3, #0
   20766:	d03e      	beq.n	207e6 <net_ipv6_send_ns+0x2a6>
   20768:	2300      	movs	r3, #0
   2076a:	e015      	b.n	20798 <net_ipv6_send_ns+0x258>
   2076c:	68a3      	ldr	r3, [r4, #8]
   2076e:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   20770:	f107 0118 	add.w	r1, r7, #24
   20774:	6960      	ldr	r0, [r4, #20]
   20776:	f7fb fab9 	bl	1bcec <net_if_ipv6_select_src_addr>
   2077a:	4603      	mov	r3, r0
   2077c:	ae18      	add	r6, sp, #96	; 0x60
   2077e:	6800      	ldr	r0, [r0, #0]
   20780:	6859      	ldr	r1, [r3, #4]
   20782:	689a      	ldr	r2, [r3, #8]
   20784:	68db      	ldr	r3, [r3, #12]
   20786:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20788:	ae18      	add	r6, sp, #96	; 0x60
   2078a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2078c:	60b8      	str	r0, [r7, #8]
   2078e:	60f9      	str	r1, [r7, #12]
   20790:	613a      	str	r2, [r7, #16]
   20792:	617b      	str	r3, [r7, #20]
   20794:	e7db      	b.n	2074e <net_ipv6_send_ns+0x20e>
   20796:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   20798:	bbab      	cbnz	r3, 20806 <net_ipv6_send_ns+0x2c6>
		net_buf_add(frag, llao_len);
   2079a:	4641      	mov	r1, r8
   2079c:	4650      	mov	r0, sl
   2079e:	f7fa fa1d 	bl	1abdc <net_buf_simple_add>
	return pkt->iface;
   207a2:	f8d4 9014 	ldr.w	r9, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   207a6:	4620      	mov	r0, r4
   207a8:	f7fd fa14 	bl	1dbd4 <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   207ac:	f100 0618 	add.w	r6, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   207b0:	2301      	movs	r3, #1
   207b2:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   207b4:	ea4f 03d8 	mov.w	r3, r8, lsr #3
   207b8:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   207ba:	f899 2014 	ldrb.w	r2, [r9, #20]
   207be:	f8d9 1010 	ldr.w	r1, [r9, #16]
   207c2:	301a      	adds	r0, #26
   207c4:	f7df fd7c 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   207c8:	f899 2014 	ldrb.w	r2, [r9, #20]
   207cc:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   207ce:	eba8 0202 	sub.w	r2, r8, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   207d2:	3a02      	subs	r2, #2
   207d4:	2100      	movs	r1, #0
   207d6:	4430      	add	r0, r6
   207d8:	f009 fcd2 	bl	2a180 <memset>
   207dc:	e74a      	b.n	20674 <net_ipv6_send_ns+0x134>
   207de:	2300      	movs	r3, #0
   207e0:	e7da      	b.n	20798 <net_ipv6_send_ns+0x258>
   207e2:	2300      	movs	r3, #0
   207e4:	e7d8      	b.n	20798 <net_ipv6_send_ns+0x258>
   207e6:	2301      	movs	r3, #1
   207e8:	e7d6      	b.n	20798 <net_ipv6_send_ns+0x258>
		nbr = nbr_new(net_pkt_iface(pkt), &ns_hdr->tgt, false,
   207ea:	2300      	movs	r3, #0
   207ec:	461a      	mov	r2, r3
   207ee:	4629      	mov	r1, r5
   207f0:	6960      	ldr	r0, [r4, #20]
   207f2:	f7fe ffab 	bl	1f74c <nbr_new>
		if (!nbr) {
   207f6:	4606      	mov	r6, r0
   207f8:	2800      	cmp	r0, #0
   207fa:	f47f af49 	bne.w	20690 <net_ipv6_send_ns+0x150>
   207fe:	e002      	b.n	20806 <net_ipv6_send_ns+0x2c6>
			net_pkt_unref(pending);
   20800:	9801      	ldr	r0, [sp, #4]
   20802:	f7fc ff0e 	bl	1d622 <net_pkt_unref>
	net_pkt_unref(pkt);
   20806:	4620      	mov	r0, r4
   20808:	f7fc ff0b 	bl	1d622 <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   2080c:	4a0e      	ldr	r2, [pc, #56]	; (20848 <net_ipv6_send_ns+0x308>)
   2080e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   20812:	3301      	adds	r3, #1
   20814:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   20818:	f06f 0015 	mvn.w	r0, #21
   2081c:	e756      	b.n	206cc <net_ipv6_send_ns+0x18c>
		if (pending) {
   2081e:	9b01      	ldr	r3, [sp, #4]
   20820:	2b00      	cmp	r3, #0
   20822:	d0f0      	beq.n	20806 <net_ipv6_send_ns+0x2c6>
   20824:	68f5      	ldr	r5, [r6, #12]
	k_delayed_work_cancel(&data->send_ns);
   20826:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   2082a:	f009 fac5 	bl	29db8 <k_delayed_work_cancel>
	if (data->pending) {
   2082e:	6828      	ldr	r0, [r5, #0]
   20830:	2800      	cmp	r0, #0
   20832:	d0e8      	beq.n	20806 <net_ipv6_send_ns+0x2c6>
		net_pkt_unref(data->pending);
   20834:	f7fc fef5 	bl	1d622 <net_pkt_unref>
		data->pending = NULL;
   20838:	2300      	movs	r3, #0
   2083a:	602b      	str	r3, [r5, #0]
   2083c:	e7e3      	b.n	20806 <net_ipv6_send_ns+0x2c6>
   2083e:	bf00      	nop
   20840:	2000bf44 	.word	0x2000bf44
   20844:	20002c70 	.word	0x20002c70
   20848:	20002b50 	.word	0x20002b50

0002084c <net_ipv6_nbr_add>:
{
   2084c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20850:	b083      	sub	sp, #12
   20852:	4605      	mov	r5, r0
   20854:	460e      	mov	r6, r1
   20856:	4617      	mov	r7, r2
   20858:	4698      	mov	r8, r3
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   2085a:	460a      	mov	r2, r1
   2085c:	4601      	mov	r1, r0
   2085e:	482c      	ldr	r0, [pc, #176]	; (20910 <net_ipv6_nbr_add+0xc4>)
   20860:	f7fe fef2 	bl	1f648 <nbr_lookup>
	if (!nbr) {
   20864:	4604      	mov	r4, r0
   20866:	b180      	cbz	r0, 2088a <net_ipv6_nbr_add+0x3e>
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   20868:	463a      	mov	r2, r7
   2086a:	4629      	mov	r1, r5
   2086c:	4620      	mov	r0, r4
   2086e:	f7fe fd05 	bl	1f27c <net_nbr_link>
   20872:	f110 0f78 	cmn.w	r0, #120	; 0x78
   20876:	d013      	beq.n	208a0 <net_ipv6_nbr_add+0x54>
   20878:	68e3      	ldr	r3, [r4, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   2087a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   2087e:	2b00      	cmp	r3, #0
   20880:	d03c      	beq.n	208fc <net_ipv6_nbr_add+0xb0>
}
   20882:	4620      	mov	r0, r4
   20884:	b003      	add	sp, #12
   20886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nbr = nbr_new(iface, addr, is_router, state);
   2088a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   2088e:	4642      	mov	r2, r8
   20890:	4631      	mov	r1, r6
   20892:	4628      	mov	r0, r5
   20894:	f7fe ff5a 	bl	1f74c <nbr_new>
		if (!nbr) {
   20898:	4604      	mov	r4, r0
   2089a:	2800      	cmp	r0, #0
   2089c:	d1e4      	bne.n	20868 <net_ipv6_nbr_add+0x1c>
   2089e:	e7f0      	b.n	20882 <net_ipv6_nbr_add+0x36>
   208a0:	68e3      	ldr	r3, [r4, #12]
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   208a2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   208a6:	2b05      	cmp	r3, #5
   208a8:	d0e6      	beq.n	20878 <net_ipv6_nbr_add+0x2c>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   208aa:	7860      	ldrb	r0, [r4, #1]
   208ac:	f7fe fd4c 	bl	1f348 <net_nbr_get_lladdr>
   208b0:	4680      	mov	r8, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   208b2:	f100 0902 	add.w	r9, r0, #2
   208b6:	793a      	ldrb	r2, [r7, #4]
   208b8:	6839      	ldr	r1, [r7, #0]
   208ba:	4648      	mov	r0, r9
   208bc:	f009 fbcc 	bl	2a058 <memcmp>
   208c0:	b190      	cbz	r0, 208e8 <net_ipv6_nbr_add+0x9c>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   208c2:	6839      	ldr	r1, [r7, #0]
   208c4:	793a      	ldrb	r2, [r7, #4]
	if (!lladdr_store || !new_addr) {
   208c6:	f1b8 0f00 	cmp.w	r8, #0
   208ca:	d002      	beq.n	208d2 <net_ipv6_nbr_add+0x86>
   208cc:	b109      	cbz	r1, 208d2 <net_ipv6_nbr_add+0x86>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   208ce:	2a06      	cmp	r2, #6
   208d0:	d904      	bls.n	208dc <net_ipv6_nbr_add+0x90>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   208d2:	2102      	movs	r1, #2
   208d4:	4620      	mov	r0, r4
   208d6:	f7fe fd3f 	bl	1f358 <ipv6_nbr_set_state>
   208da:	e7cd      	b.n	20878 <net_ipv6_nbr_add+0x2c>
	lladdr_store->len = new_len;
   208dc:	f888 2001 	strb.w	r2, [r8, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   208e0:	4648      	mov	r0, r9
   208e2:	f7df fced 	bl	2c0 <memcpy>
   208e6:	e7f4      	b.n	208d2 <net_ipv6_nbr_add+0x86>
   208e8:	68e3      	ldr	r3, [r4, #12]
		} else if (net_ipv6_nbr_data(nbr)->state ==
   208ea:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   208ee:	2b00      	cmp	r3, #0
   208f0:	d1c2      	bne.n	20878 <net_ipv6_nbr_add+0x2c>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   208f2:	2102      	movs	r1, #2
   208f4:	4620      	mov	r0, r4
   208f6:	f7fe fd2f 	bl	1f358 <ipv6_nbr_set_state>
   208fa:	e7bd      	b.n	20878 <net_ipv6_nbr_add+0x2c>
		net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   208fc:	2100      	movs	r1, #0
   208fe:	9101      	str	r1, [sp, #4]
   20900:	9600      	str	r6, [sp, #0]
   20902:	460b      	mov	r3, r1
   20904:	460a      	mov	r2, r1
   20906:	4628      	mov	r0, r5
   20908:	f7ff fe1a 	bl	20540 <net_ipv6_send_ns>
   2090c:	e7b9      	b.n	20882 <net_ipv6_nbr_add+0x36>
   2090e:	bf00      	nop
   20910:	2000bf44 	.word	0x2000bf44

00020914 <handle_ra_input>:
{
   20914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20918:	b098      	sub	sp, #96	; 0x60
   2091a:	4606      	mov	r6, r0
	return net_buf_frags_len(pkt->frags);
   2091c:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   2091e:	2200      	movs	r2, #0
   20920:	e002      	b.n	20928 <handle_ra_input+0x14>
		bytes += buf->len;
   20922:	8999      	ldrh	r1, [r3, #12]
   20924:	440a      	add	r2, r1
		buf = buf->frags;
   20926:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   20928:	2b00      	cmp	r3, #0
   2092a:	d1fa      	bne.n	20922 <handle_ra_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   2092c:	b292      	uxth	r2, r2
	net_stats.ipv6_nd.recv++;
   2092e:	49b7      	ldr	r1, [pc, #732]	; (20c0c <handle_ra_input+0x2f8>)
   20930:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   20934:	3301      	adds	r3, #1
   20936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   2093a:	2a39      	cmp	r2, #57	; 0x39
   2093c:	d904      	bls.n	20948 <handle_ra_input+0x34>
	return pkt->frags->data;
   2093e:	68b3      	ldr	r3, [r6, #8]
   20940:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   20942:	79da      	ldrb	r2, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   20944:	2aff      	cmp	r2, #255	; 0xff
   20946:	d010      	beq.n	2096a <handle_ra_input+0x56>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &icmphdr);
   20948:	a907      	add	r1, sp, #28
   2094a:	4630      	mov	r0, r6
   2094c:	f7fd ff6d 	bl	1e82a <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   20950:	b108      	cbz	r0, 20956 <handle_ra_input+0x42>
   20952:	7843      	ldrb	r3, [r0, #1]
   20954:	b173      	cbz	r3, 20974 <handle_ra_input+0x60>
	net_stats.ipv6_nd.drop++;
   20956:	4aad      	ldr	r2, [pc, #692]	; (20c0c <handle_ra_input+0x2f8>)
   20958:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   2095c:	3301      	adds	r3, #1
   2095e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   20962:	2002      	movs	r0, #2
}
   20964:	b018      	add	sp, #96	; 0x60
   20966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   2096a:	891a      	ldrh	r2, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   2096c:	f248 03fe 	movw	r3, #33022	; 0x80fe
   20970:	429a      	cmp	r2, r3
   20972:	d1e9      	bne.n	20948 <handle_ra_input+0x34>
	offset = sizeof(struct net_ipv6_hdr) + net_pkt_ipv6_ext_len(pkt) +
   20974:	f896 103b 	ldrb.w	r1, [r6, #59]	; 0x3b
   20978:	312c      	adds	r1, #44	; 0x2c
   2097a:	ac18      	add	r4, sp, #96	; 0x60
   2097c:	f824 1d1c 	strh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, 1, value);
   20980:	f10d 0347 	add.w	r3, sp, #71	; 0x47
   20984:	9300      	str	r3, [sp, #0]
   20986:	2301      	movs	r3, #1
   20988:	4622      	mov	r2, r4
   2098a:	68b0      	ldr	r0, [r6, #8]
   2098c:	f7fc ffc7 	bl	1d91e <net_frag_read>
	frag = net_frag_skip(frag, offset, &offset, 1); /* flags */
   20990:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	return net_frag_read(frag, offset, pos, len, NULL);
   20994:	2300      	movs	r3, #0
   20996:	9300      	str	r3, [sp, #0]
   20998:	2301      	movs	r3, #1
   2099a:	4622      	mov	r2, r4
   2099c:	f7fc ffbf 	bl	1d91e <net_frag_read>
	if (!frag) {
   209a0:	4604      	mov	r4, r0
   209a2:	2800      	cmp	r0, #0
   209a4:	d0d7      	beq.n	20956 <handle_ra_input+0x42>
	if (hop_limit) {
   209a6:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   209aa:	b113      	cbz	r3, 209b2 <handle_ra_input+0x9e>
	return pkt->iface;
   209ac:	6972      	ldr	r2, [r6, #20]
	iface->ipv6.hop_limit = hop_limit;
   209ae:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
	frag = net_frag_read_be16(frag, offset, &offset, &router_lifetime);
   209b2:	f10d 0352 	add.w	r3, sp, #82	; 0x52
   209b6:	aa11      	add	r2, sp, #68	; 0x44
   209b8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   209bc:	4620      	mov	r0, r4
   209be:	f7fc fff6 	bl	1d9ae <net_frag_read_be16>
	frag = net_frag_read_be32(frag, offset, &offset, &reachable_time);
   209c2:	ab13      	add	r3, sp, #76	; 0x4c
   209c4:	aa11      	add	r2, sp, #68	; 0x44
   209c6:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   209ca:	f7fd f801 	bl	1d9d0 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, offset, &offset, &retrans_timer);
   209ce:	ab12      	add	r3, sp, #72	; 0x48
   209d0:	aa11      	add	r2, sp, #68	; 0x44
   209d2:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   209d6:	f7fc fffb 	bl	1d9d0 <net_frag_read_be32>
	if (!frag) {
   209da:	4605      	mov	r5, r0
   209dc:	2800      	cmp	r0, #0
   209de:	d0ba      	beq.n	20956 <handle_ra_input+0x42>
	ra_hdr = net_icmpv6_get_ra_hdr(pkt, &hdr);
   209e0:	a915      	add	r1, sp, #84	; 0x54
   209e2:	4630      	mov	r0, r6
   209e4:	f7fe f99a 	bl	1ed1c <net_icmpv6_get_ra_hdr>
	if (reachable_time &&
   209e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   209ea:	b16b      	cbz	r3, 20a08 <handle_ra_input+0xf4>
   209ec:	6972      	ldr	r2, [r6, #20]
	return iface->ipv6.reachable_time;
   209ee:	f8d2 428c 	ldr.w	r4, [r2, #652]	; 0x28c
	     ra_hdr->reachable_time)) {
   209f2:	6841      	ldr	r1, [r0, #4]
	if (reachable_time &&
   209f4:	428c      	cmp	r4, r1
   209f6:	d007      	beq.n	20a08 <handle_ra_input+0xf4>
	iface->ipv6.base_reachable_time = reachable_time;
   209f8:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   209fc:	6974      	ldr	r4, [r6, #20]
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   209fe:	4620      	mov	r0, r4
   20a00:	f7fb fa70 	bl	1bee4 <net_if_ipv6_calc_reachable_time>
   20a04:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c
	if (retrans_timer) {
   20a08:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20a0a:	b113      	cbz	r3, 20a12 <handle_ra_input+0xfe>
   20a0c:	6972      	ldr	r2, [r6, #20]
 * @param retrans_timer New retransmit timer
 */
static inline void net_if_ipv6_set_retrans_timer(struct net_if *iface,
						 u32_t retrans_timer)
{
	iface->ipv6.retrans_timer = retrans_timer;
   20a0e:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	struct net_nbr *nbr = NULL;
   20a12:	2700      	movs	r7, #0
   20a14:	e060      	b.n	20ad8 <handle_ra_input+0x1c4>
			frag = handle_ra_neighbor(pkt, frag, length, offset,
   20a16:	f89d 4043 	ldrb.w	r4, [sp, #67]	; 0x43
   20a1a:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   20a1e:	2306      	movs	r3, #6
   20a20:	f88d 301d 	strb.w	r3, [sp, #29]
	lladdr.len = NET_LINK_ADDR_MAX_LENGTH;
   20a24:	f88d 3010 	strb.w	r3, [sp, #16]
	lladdr.addr = llstorage.addr;
   20a28:	f10d 031e 	add.w	r3, sp, #30
   20a2c:	9303      	str	r3, [sp, #12]
	if (net_pkt_ll_src(pkt)->len < lladdr.len) {
   20a2e:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   20a32:	2b05      	cmp	r3, #5
   20a34:	d801      	bhi.n	20a3a <handle_ra_input+0x126>
		lladdr.len = net_pkt_ll_src(pkt)->len;
   20a36:	f88d 3010 	strb.w	r3, [sp, #16]
	frag = net_frag_read(frag, offset, pos, lladdr.len, lladdr.addr);
   20a3a:	f89d 3010 	ldrb.w	r3, [sp, #16]
   20a3e:	f10d 021e 	add.w	r2, sp, #30
   20a42:	9200      	str	r2, [sp, #0]
   20a44:	aa11      	add	r2, sp, #68	; 0x44
   20a46:	4641      	mov	r1, r8
   20a48:	4628      	mov	r0, r5
   20a4a:	f7fc ff68 	bl	1d91e <net_frag_read>
	if (!frag && offset) {
   20a4e:	4605      	mov	r5, r0
   20a50:	b318      	cbz	r0, 20a9a <handle_ra_input+0x186>
	padding = len * 8 - 2 - lladdr.len;
   20a52:	00e3      	lsls	r3, r4, #3
   20a54:	b2db      	uxtb	r3, r3
   20a56:	f89d 2010 	ldrb.w	r2, [sp, #16]
   20a5a:	1a9b      	subs	r3, r3, r2
   20a5c:	b2db      	uxtb	r3, r3
   20a5e:	3b02      	subs	r3, #2
	if (padding) {
   20a60:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   20a64:	d009      	beq.n	20a7a <handle_ra_input+0x166>
		frag = net_frag_read(frag, *pos, pos, padding, NULL);
   20a66:	aa18      	add	r2, sp, #96	; 0x60
   20a68:	f832 1d1c 	ldrh.w	r1, [r2, #-28]!
   20a6c:	2000      	movs	r0, #0
   20a6e:	9000      	str	r0, [sp, #0]
   20a70:	4628      	mov	r0, r5
   20a72:	f7fc ff54 	bl	1d91e <net_frag_read>
		if (!frag && *pos) {
   20a76:	4605      	mov	r5, r0
   20a78:	b198      	cbz	r0, 20aa2 <handle_ra_input+0x18e>
	return pkt->frags->data;
   20a7a:	68b3      	ldr	r3, [r6, #8]
   20a7c:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   20a7e:	2302      	movs	r3, #2
   20a80:	9300      	str	r3, [sp, #0]
   20a82:	2301      	movs	r3, #1
   20a84:	aa03      	add	r2, sp, #12
   20a86:	3108      	adds	r1, #8
   20a88:	6970      	ldr	r0, [r6, #20]
   20a8a:	f7ff fedf 	bl	2084c <net_ipv6_nbr_add>
   20a8e:	4607      	mov	r7, r0
			if (!frag && offset) {
   20a90:	bb15      	cbnz	r5, 20ad8 <handle_ra_input+0x1c4>
   20a92:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20a96:	b1fb      	cbz	r3, 20ad8 <handle_ra_input+0x1c4>
   20a98:	e75d      	b.n	20956 <handle_ra_input+0x42>
	if (!frag && offset) {
   20a9a:	f1b8 0f00 	cmp.w	r8, #0
   20a9e:	d0d8      	beq.n	20a52 <handle_ra_input+0x13e>
   20aa0:	e7f6      	b.n	20a90 <handle_ra_input+0x17c>
		if (!frag && *pos) {
   20aa2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20aa6:	2b00      	cmp	r3, #0
   20aa8:	d0e7      	beq.n	20a7a <handle_ra_input+0x166>
   20aaa:	e7f1      	b.n	20a90 <handle_ra_input+0x17c>
			frag = net_frag_skip(frag, offset, &offset, 2);
   20aac:	ac18      	add	r4, sp, #96	; 0x60
   20aae:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, len, NULL);
   20ab2:	2300      	movs	r3, #0
   20ab4:	9300      	str	r3, [sp, #0]
   20ab6:	2302      	movs	r3, #2
   20ab8:	4622      	mov	r2, r4
   20aba:	f7fc ff30 	bl	1d91e <net_frag_read>
			frag = net_frag_read_be32(frag, offset, &offset, &mtu);
   20abe:	ab0f      	add	r3, sp, #60	; 0x3c
   20ac0:	4622      	mov	r2, r4
   20ac2:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20ac6:	f7fc ff83 	bl	1d9d0 <net_frag_read_be32>
			if (!frag && offset) {
   20aca:	4605      	mov	r5, r0
   20acc:	2800      	cmp	r0, #0
   20ace:	d03b      	beq.n	20b48 <handle_ra_input+0x234>
	return pkt->iface;
   20ad0:	6973      	ldr	r3, [r6, #20]
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   20ad2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
	iface->mtu = mtu;
   20ad6:	851a      	strh	r2, [r3, #40]	; 0x28
	while (frag) {
   20ad8:	2d00      	cmp	r5, #0
   20ada:	f000 8170 	beq.w	20dbe <handle_ra_input+0x4aa>
		frag = net_frag_read(frag, offset, &offset, 1, &type);
   20ade:	ac18      	add	r4, sp, #96	; 0x60
   20ae0:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
   20ae4:	f10d 0342 	add.w	r3, sp, #66	; 0x42
   20ae8:	9300      	str	r3, [sp, #0]
   20aea:	2301      	movs	r3, #1
   20aec:	4622      	mov	r2, r4
   20aee:	4628      	mov	r0, r5
   20af0:	f7fc ff15 	bl	1d91e <net_frag_read>
		frag = net_frag_read(frag, offset, &offset, 1, &length);
   20af4:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20af8:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   20afc:	9300      	str	r3, [sp, #0]
   20afe:	2301      	movs	r3, #1
   20b00:	4622      	mov	r2, r4
   20b02:	f7fc ff0c 	bl	1d91e <net_frag_read>
		if (!frag) {
   20b06:	4605      	mov	r5, r0
   20b08:	2800      	cmp	r0, #0
   20b0a:	f43f af24 	beq.w	20956 <handle_ra_input+0x42>
		switch (type) {
   20b0e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   20b12:	2b03      	cmp	r3, #3
   20b14:	d01d      	beq.n	20b52 <handle_ra_input+0x23e>
   20b16:	2b05      	cmp	r3, #5
   20b18:	d0c8      	beq.n	20aac <handle_ra_input+0x198>
   20b1a:	2b01      	cmp	r3, #1
   20b1c:	f43f af7b 	beq.w	20a16 <handle_ra_input+0x102>
			frag = net_frag_skip(frag, offset, &offset,
   20b20:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
					     length * 8 - 2);
   20b24:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   20b28:	00db      	lsls	r3, r3, #3
			frag = net_frag_skip(frag, offset, &offset,
   20b2a:	3b02      	subs	r3, #2
   20b2c:	b29b      	uxth	r3, r3
	return net_frag_read(frag, offset, pos, len, NULL);
   20b2e:	2200      	movs	r2, #0
   20b30:	9200      	str	r2, [sp, #0]
   20b32:	aa11      	add	r2, sp, #68	; 0x44
   20b34:	f7fc fef3 	bl	1d91e <net_frag_read>
			if (!frag && offset) {
   20b38:	4605      	mov	r5, r0
   20b3a:	2800      	cmp	r0, #0
   20b3c:	d1cc      	bne.n	20ad8 <handle_ra_input+0x1c4>
   20b3e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20b42:	2b00      	cmp	r3, #0
   20b44:	d0c8      	beq.n	20ad8 <handle_ra_input+0x1c4>
   20b46:	e706      	b.n	20956 <handle_ra_input+0x42>
			if (!frag && offset) {
   20b48:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20b4c:	2b00      	cmp	r3, #0
   20b4e:	d0bf      	beq.n	20ad0 <handle_ra_input+0x1bc>
   20b50:	e701      	b.n	20956 <handle_ra_input+0x42>
			frag = handle_ra_prefix(pkt, frag, length, offset,
   20b52:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   20b56:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	prefix_info.type = NET_ICMPV6_ND_OPT_PREFIX_INFO;
   20b5a:	2203      	movs	r2, #3
   20b5c:	f88d 201c 	strb.w	r2, [sp, #28]
	prefix_info.len = len * 8 - 2;
   20b60:	4093      	lsls	r3, r2
   20b62:	b2db      	uxtb	r3, r3
   20b64:	3b02      	subs	r3, #2
   20b66:	f88d 301d 	strb.w	r3, [sp, #29]
	frag = net_frag_read(frag, offset, pos, 1, &prefix_info.prefix_len);
   20b6a:	f10d 031e 	add.w	r3, sp, #30
   20b6e:	9300      	str	r3, [sp, #0]
   20b70:	2301      	movs	r3, #1
   20b72:	aa11      	add	r2, sp, #68	; 0x44
   20b74:	f7fc fed3 	bl	1d91e <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, 1, &prefix_info.flags);
   20b78:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20b7c:	f10d 031f 	add.w	r3, sp, #31
   20b80:	9300      	str	r3, [sp, #0]
   20b82:	2301      	movs	r3, #1
   20b84:	aa11      	add	r2, sp, #68	; 0x44
   20b86:	f7fc feca 	bl	1d91e <net_frag_read>
	frag = net_frag_read_be32(frag, *pos, pos, &prefix_info.valid_lifetime);
   20b8a:	ab08      	add	r3, sp, #32
   20b8c:	aa11      	add	r2, sp, #68	; 0x44
   20b8e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20b92:	f7fc ff1d 	bl	1d9d0 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, *pos, pos,
   20b96:	ab09      	add	r3, sp, #36	; 0x24
   20b98:	aa11      	add	r2, sp, #68	; 0x44
   20b9a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20b9e:	f7fc ff17 	bl	1d9d0 <net_frag_read_be32>
	frag = net_frag_skip(frag, *pos, pos, 4);
   20ba2:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20ba6:	2300      	movs	r3, #0
   20ba8:	9300      	str	r3, [sp, #0]
   20baa:	2304      	movs	r3, #4
   20bac:	aa11      	add	r2, sp, #68	; 0x44
   20bae:	f7fc feb6 	bl	1d91e <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, sizeof(struct in6_addr),
   20bb2:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20bb6:	ab0b      	add	r3, sp, #44	; 0x2c
   20bb8:	9300      	str	r3, [sp, #0]
   20bba:	2310      	movs	r3, #16
   20bbc:	aa11      	add	r2, sp, #68	; 0x44
   20bbe:	f7fc feae 	bl	1d91e <net_frag_read>
	if (!frag && *pos) {
   20bc2:	4605      	mov	r5, r0
   20bc4:	b320      	cbz	r0, 20c10 <handle_ra_input+0x2fc>
	if (prefix_info.valid_lifetime >= prefix_info.preferred_lifetime &&
   20bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20bc8:	9a08      	ldr	r2, [sp, #32]
   20bca:	429a      	cmp	r2, r3
   20bcc:	d314      	bcc.n	20bf8 <handle_ra_input+0x2e4>
   20bce:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   20bd2:	f248 03fe 	movw	r3, #33022	; 0x80fe
   20bd6:	429a      	cmp	r2, r3
   20bd8:	d00e      	beq.n	20bf8 <handle_ra_input+0x2e4>
		if (prefix_info.flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   20bda:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   20bde:	2b00      	cmp	r3, #0
   20be0:	db1b      	blt.n	20c1a <handle_ra_input+0x306>
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   20be2:	f89d 301f 	ldrb.w	r3, [sp, #31]
   20be6:	f013 0f40 	tst.w	r3, #64	; 0x40
   20bea:	d005      	beq.n	20bf8 <handle_ra_input+0x2e4>
		    prefix_info.valid_lifetime &&
   20bec:	9b08      	ldr	r3, [sp, #32]
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   20bee:	b11b      	cbz	r3, 20bf8 <handle_ra_input+0x2e4>
		    (prefix_info.prefix_len == NET_IPV6_DEFAULT_PREFIX_LEN)) {
   20bf0:	f89d 301e 	ldrb.w	r3, [sp, #30]
		    prefix_info.valid_lifetime &&
   20bf4:	2b40      	cmp	r3, #64	; 0x40
   20bf6:	d03e      	beq.n	20c76 <handle_ra_input+0x362>
			if (!frag && offset) {
   20bf8:	2d00      	cmp	r5, #0
   20bfa:	f47f af6d 	bne.w	20ad8 <handle_ra_input+0x1c4>
   20bfe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20c02:	2b00      	cmp	r3, #0
   20c04:	f43f af68 	beq.w	20ad8 <handle_ra_input+0x1c4>
   20c08:	e6a5      	b.n	20956 <handle_ra_input+0x42>
   20c0a:	bf00      	nop
   20c0c:	20002b50 	.word	0x20002b50
	if (!frag && *pos) {
   20c10:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20c14:	2b00      	cmp	r3, #0
   20c16:	d0d6      	beq.n	20bc6 <handle_ra_input+0x2b2>
   20c18:	e7ee      	b.n	20bf8 <handle_ra_input+0x2e4>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   20c1a:	f89d 201e 	ldrb.w	r2, [sp, #30]
   20c1e:	a90b      	add	r1, sp, #44	; 0x2c
   20c20:	6970      	ldr	r0, [r6, #20]
   20c22:	f7fa fe3f 	bl	1b8a4 <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   20c26:	4603      	mov	r3, r0
   20c28:	b160      	cbz	r0, 20c44 <handle_ra_input+0x330>
	switch (prefix_info->valid_lifetime) {
   20c2a:	9a08      	ldr	r2, [sp, #32]
   20c2c:	b1ba      	cbz	r2, 20c5e <handle_ra_input+0x34a>
   20c2e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   20c32:	d01c      	beq.n	20c6e <handle_ra_input+0x35a>
	prefix->is_infinite = is_infinite;
   20c34:	2200      	movs	r2, #0
   20c36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		net_if_ipv6_prefix_set_timer(prefix,
   20c3a:	9908      	ldr	r1, [sp, #32]
   20c3c:	4618      	mov	r0, r3
   20c3e:	f7fa fee3 	bl	1ba08 <net_if_ipv6_prefix_set_timer>
   20c42:	e7ce      	b.n	20be2 <handle_ra_input+0x2ce>
		if (!prefix_info->valid_lifetime) {
   20c44:	9b08      	ldr	r3, [sp, #32]
   20c46:	2b00      	cmp	r3, #0
   20c48:	d0cb      	beq.n	20be2 <handle_ra_input+0x2ce>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   20c4a:	f89d 201e 	ldrb.w	r2, [sp, #30]
   20c4e:	a90b      	add	r1, sp, #44	; 0x2c
   20c50:	6970      	ldr	r0, [r6, #20]
   20c52:	f7fa fdf7 	bl	1b844 <net_if_ipv6_prefix_add>
		if (prefix) {
   20c56:	4603      	mov	r3, r0
   20c58:	2800      	cmp	r0, #0
   20c5a:	d1e6      	bne.n	20c2a <handle_ra_input+0x316>
   20c5c:	e7c1      	b.n	20be2 <handle_ra_input+0x2ce>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   20c5e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   20c62:	f103 0128 	add.w	r1, r3, #40	; 0x28
   20c66:	6970      	ldr	r0, [r6, #20]
   20c68:	f7fa feea 	bl	1ba40 <net_if_ipv6_prefix_rm>
   20c6c:	e7b9      	b.n	20be2 <handle_ra_input+0x2ce>
   20c6e:	2201      	movs	r2, #1
   20c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   20c74:	e7b5      	b.n	20be2 <handle_ra_input+0x2ce>
	struct in6_addr addr = { };
   20c76:	2300      	movs	r3, #0
   20c78:	9305      	str	r3, [sp, #20]
   20c7a:	9306      	str	r3, [sp, #24]
	return pkt->iface;
   20c7c:	6974      	ldr	r4, [r6, #20]
	return &iface->link_addr;
   20c7e:	f104 0810 	add.w	r8, r4, #16
	addr->s6_addr[0] = 0xfe;
   20c82:	22fe      	movs	r2, #254	; 0xfe
   20c84:	f88d 200c 	strb.w	r2, [sp, #12]
	addr->s6_addr[1] = 0x80;
   20c88:	2280      	movs	r2, #128	; 0x80
   20c8a:	f88d 200d 	strb.w	r2, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   20c8e:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   20c92:	9304      	str	r3, [sp, #16]
	switch (lladdr->len) {
   20c94:	f898 2004 	ldrb.w	r2, [r8, #4]
   20c98:	2a06      	cmp	r2, #6
   20c9a:	d032      	beq.n	20d02 <handle_ra_input+0x3ee>
   20c9c:	2a08      	cmp	r2, #8
   20c9e:	d058      	beq.n	20d52 <handle_ra_input+0x43e>
   20ca0:	2a02      	cmp	r2, #2
   20ca2:	d018      	beq.n	20cd6 <handle_ra_input+0x3c2>
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   20ca4:	2208      	movs	r2, #8
   20ca6:	a90b      	add	r1, sp, #44	; 0x2c
   20ca8:	a803      	add	r0, sp, #12
   20caa:	f7df fb09 	bl	2c0 <memcpy>
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   20cae:	2100      	movs	r1, #0
   20cb0:	a803      	add	r0, sp, #12
   20cb2:	f7fa fb03 	bl	1b2bc <net_if_ipv6_addr_lookup>
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   20cb6:	4604      	mov	r4, r0
   20cb8:	b118      	cbz	r0, 20cc2 <handle_ra_input+0x3ae>
   20cba:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   20cbe:	2b01      	cmp	r3, #1
   20cc0:	d052      	beq.n	20d68 <handle_ra_input+0x454>
		if (prefix_info->valid_lifetime ==
   20cc2:	9b08      	ldr	r3, [sp, #32]
   20cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   20cc8:	d072      	beq.n	20db0 <handle_ra_input+0x49c>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   20cca:	2201      	movs	r2, #1
   20ccc:	a903      	add	r1, sp, #12
   20cce:	6970      	ldr	r0, [r6, #20]
   20cd0:	f7fa fb6a 	bl	1b3a8 <net_if_ipv6_addr_add>
   20cd4:	e790      	b.n	20bf8 <handle_ra_input+0x2e4>
		if (lladdr->type == NET_LINK_IEEE802154) {
   20cd6:	f898 3005 	ldrb.w	r3, [r8, #5]
   20cda:	2b01      	cmp	r3, #1
   20cdc:	d1e2      	bne.n	20ca4 <handle_ra_input+0x390>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   20cde:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   20ce0:	22ff      	movs	r2, #255	; 0xff
   20ce2:	f88d 2017 	strb.w	r2, [sp, #23]
			addr->s6_addr[12] = 0xfe;
   20ce6:	22fe      	movs	r2, #254	; 0xfe
   20ce8:	f88d 2018 	strb.w	r2, [sp, #24]
			addr->s6_addr[13] = 0;
   20cec:	f88d 3019 	strb.w	r3, [sp, #25]
			addr->s6_addr[14] = lladdr->addr[0];
   20cf0:	6923      	ldr	r3, [r4, #16]
   20cf2:	781b      	ldrb	r3, [r3, #0]
   20cf4:	f88d 301a 	strb.w	r3, [sp, #26]
			addr->s6_addr[15] = lladdr->addr[1];
   20cf8:	6923      	ldr	r3, [r4, #16]
   20cfa:	785b      	ldrb	r3, [r3, #1]
   20cfc:	f88d 301b 	strb.w	r3, [sp, #27]
   20d00:	e7d0      	b.n	20ca4 <handle_ra_input+0x390>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   20d02:	2203      	movs	r2, #3
   20d04:	6921      	ldr	r1, [r4, #16]
   20d06:	a805      	add	r0, sp, #20
   20d08:	f7df fada 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   20d0c:	23ff      	movs	r3, #255	; 0xff
   20d0e:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   20d12:	23fe      	movs	r3, #254	; 0xfe
   20d14:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   20d18:	6921      	ldr	r1, [r4, #16]
   20d1a:	2203      	movs	r2, #3
   20d1c:	4411      	add	r1, r2
   20d1e:	f10d 0019 	add.w	r0, sp, #25
   20d22:	f7df facd 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   20d26:	f898 3005 	ldrb.w	r3, [r8, #5]
   20d2a:	2b02      	cmp	r3, #2
   20d2c:	d00a      	beq.n	20d44 <handle_ra_input+0x430>
		if (lladdr->type == NET_LINK_ETHERNET) {
   20d2e:	f898 3005 	ldrb.w	r3, [r8, #5]
   20d32:	2b03      	cmp	r3, #3
   20d34:	d1b6      	bne.n	20ca4 <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   20d36:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20d3a:	f083 0302 	eor.w	r3, r3, #2
   20d3e:	f88d 3014 	strb.w	r3, [sp, #20]
   20d42:	e7af      	b.n	20ca4 <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   20d44:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20d48:	f083 0302 	eor.w	r3, r3, #2
   20d4c:	f88d 3014 	strb.w	r3, [sp, #20]
   20d50:	e7ed      	b.n	20d2e <handle_ra_input+0x41a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   20d52:	6921      	ldr	r1, [r4, #16]
   20d54:	a805      	add	r0, sp, #20
   20d56:	f7df fab3 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   20d5a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20d5e:	f083 0302 	eor.w	r3, r3, #2
   20d62:	f88d 3014 	strb.w	r3, [sp, #20]
   20d66:	e79d      	b.n	20ca4 <handle_ra_input+0x390>
		if (prefix_info->valid_lifetime ==
   20d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
   20d6c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   20d70:	d015      	beq.n	20d9e <handle_ra_input+0x48a>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   20d72:	f5b8 5fe1 	cmp.w	r8, #7200	; 0x1c20
   20d76:	d80a      	bhi.n	20d8e <handle_ra_input+0x47a>
	return _timeout_remaining_get(&work->timeout);
   20d78:	3020      	adds	r0, #32
   20d7a:	f008 ff79 	bl	29c70 <_timeout_remaining_get>
	return k_delayed_work_remaining_get(work) / MSEC_PER_SEC;
   20d7e:	4a30      	ldr	r2, [pc, #192]	; (20e40 <handle_ra_input+0x52c>)
   20d80:	fb82 3200 	smull	r3, r2, r2, r0
   20d84:	17c3      	asrs	r3, r0, #31
   20d86:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   20d8a:	4598      	cmp	r8, r3
   20d8c:	d90a      	bls.n	20da4 <handle_ra_input+0x490>
			net_if_ipv6_addr_update_lifetime(ifaddr,
   20d8e:	9908      	ldr	r1, [sp, #32]
   20d90:	4620      	mov	r0, r4
   20d92:	f7fa fafb 	bl	1b38c <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   20d96:	2300      	movs	r3, #0
   20d98:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   20d9c:	e72c      	b.n	20bf8 <handle_ra_input+0x2e4>
   20d9e:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
   20da2:	e729      	b.n	20bf8 <handle_ra_input+0x2e4>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   20da4:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   20da8:	4620      	mov	r0, r4
   20daa:	f7fa faef 	bl	1b38c <net_if_ipv6_addr_update_lifetime>
   20dae:	e7f2      	b.n	20d96 <handle_ra_input+0x482>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   20db0:	2300      	movs	r3, #0
   20db2:	2201      	movs	r2, #1
   20db4:	a903      	add	r1, sp, #12
   20db6:	6970      	ldr	r0, [r6, #20]
   20db8:	f7fa faf6 	bl	1b3a8 <net_if_ipv6_addr_add>
   20dbc:	e71c      	b.n	20bf8 <handle_ra_input+0x2e4>
	return pkt->frags->data;
   20dbe:	68b3      	ldr	r3, [r6, #8]
   20dc0:	6899      	ldr	r1, [r3, #8]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt),
   20dc2:	3108      	adds	r1, #8
   20dc4:	6970      	ldr	r0, [r6, #20]
   20dc6:	f7fa fe7b 	bl	1bac0 <net_if_ipv6_router_lookup>
	if (router) {
   20dca:	4603      	mov	r3, r0
   20dcc:	b350      	cbz	r0, 20e24 <handle_ra_input+0x510>
		if (!router_lifetime) {
   20dce:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
   20dd2:	b321      	cbz	r1, 20e1e <handle_ra_input+0x50a>
			if (nbr) {
   20dd4:	b11f      	cbz	r7, 20dde <handle_ra_input+0x4ca>
   20dd6:	68fa      	ldr	r2, [r7, #12]
				net_ipv6_nbr_data(nbr)->is_router = true;
   20dd8:	2001      	movs	r0, #1
   20dda:	f882 0069 	strb.w	r0, [r2, #105]	; 0x69
			net_if_ipv6_router_update_lifetime(router,
   20dde:	4618      	mov	r0, r3
   20de0:	f7fa fec6 	bl	1bb70 <net_if_ipv6_router_update_lifetime>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   20de4:	b18f      	cbz	r7, 20e0a <handle_ra_input+0x4f6>
   20de6:	68fb      	ldr	r3, [r7, #12]
   20de8:	6818      	ldr	r0, [r3, #0]
   20dea:	b170      	cbz	r0, 20e0a <handle_ra_input+0x4f6>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   20dec:	f7fa f818 	bl	1ae20 <net_send_data>
   20df0:	2800      	cmp	r0, #0
   20df2:	db20      	blt.n	20e36 <handle_ra_input+0x522>
   20df4:	68fc      	ldr	r4, [r7, #12]
	k_delayed_work_cancel(&data->send_ns);
   20df6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   20dfa:	f008 ffdd 	bl	29db8 <k_delayed_work_cancel>
	if (data->pending) {
   20dfe:	6820      	ldr	r0, [r4, #0]
   20e00:	b118      	cbz	r0, 20e0a <handle_ra_input+0x4f6>
		net_pkt_unref(data->pending);
   20e02:	f7fc fc0e 	bl	1d622 <net_pkt_unref>
		data->pending = NULL;
   20e06:	2300      	movs	r3, #0
   20e08:	6023      	str	r3, [r4, #0]
	return pkt->iface;
   20e0a:	6970      	ldr	r0, [r6, #20]
	k_delayed_work_cancel(&net_pkt_iface(pkt)->ipv6.rs_timer);
   20e0c:	f500 7018 	add.w	r0, r0, #608	; 0x260
   20e10:	f008 ffd2 	bl	29db8 <k_delayed_work_cancel>
	net_pkt_unref(pkt);
   20e14:	4630      	mov	r0, r6
   20e16:	f7fc fc04 	bl	1d622 <net_pkt_unref>
	return NET_OK;
   20e1a:	2000      	movs	r0, #0
   20e1c:	e5a2      	b.n	20964 <handle_ra_input+0x50>
			net_if_ipv6_router_rm(router);
   20e1e:	f7fa ff0b 	bl	1bc38 <net_if_ipv6_router_rm>
   20e22:	e7df      	b.n	20de4 <handle_ra_input+0x4d0>
	return pkt->frags->data;
   20e24:	68b3      	ldr	r3, [r6, #8]
   20e26:	6899      	ldr	r1, [r3, #8]
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   20e28:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
   20e2c:	3108      	adds	r1, #8
   20e2e:	6970      	ldr	r0, [r6, #20]
   20e30:	f7fa feaa 	bl	1bb88 <net_if_ipv6_router_add>
   20e34:	e7d6      	b.n	20de4 <handle_ra_input+0x4d0>
   20e36:	68fb      	ldr	r3, [r7, #12]
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   20e38:	6818      	ldr	r0, [r3, #0]
   20e3a:	f7fc fbf2 	bl	1d622 <net_pkt_unref>
   20e3e:	e7d9      	b.n	20df4 <handle_ra_input+0x4e0>
   20e40:	10624dd3 	.word	0x10624dd3

00020e44 <handle_ns_input>:
{
   20e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e48:	b0a5      	sub	sp, #148	; 0x94
   20e4a:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   20e4c:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   20e4e:	2200      	movs	r2, #0
   20e50:	e002      	b.n	20e58 <handle_ns_input+0x14>
		bytes += buf->len;
   20e52:	8999      	ldrh	r1, [r3, #12]
   20e54:	440a      	add	r2, r1
		buf = buf->frags;
   20e56:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   20e58:	2b00      	cmp	r3, #0
   20e5a:	d1fa      	bne.n	20e52 <handle_ns_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   20e5c:	b295      	uxth	r5, r2
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &nshdr);
   20e5e:	a90a      	add	r1, sp, #40	; 0x28
   20e60:	4620      	mov	r0, r4
   20e62:	f7fd fe51 	bl	1eb08 <net_icmpv6_get_ns_hdr>
   20e66:	4606      	mov	r6, r0
	net_stats.ipv6_nd.recv++;
   20e68:	4aa6      	ldr	r2, [pc, #664]	; (21104 <handle_ns_input+0x2c0>)
   20e6a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   20e6e:	3301      	adds	r3, #1
   20e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   20e74:	2d3f      	cmp	r5, #63	; 0x3f
   20e76:	d904      	bls.n	20e82 <handle_ns_input+0x3e>
	return pkt->frags->data;
   20e78:	68a3      	ldr	r3, [r4, #8]
   20e7a:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT)) {
   20e7c:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   20e7e:	2bff      	cmp	r3, #255	; 0xff
   20e80:	d002      	beq.n	20e88 <handle_ns_input+0x44>
	return addr->s6_addr[0] == 0xFF;
   20e82:	7933      	ldrb	r3, [r6, #4]
		if (net_is_ipv6_addr_mcast(&ns_hdr->tgt)) {
   20e84:	2bff      	cmp	r3, #255	; 0xff
   20e86:	d00a      	beq.n	20e9e <handle_ns_input+0x5a>
	pkt->ipv6_ext_opt_len = len;
   20e88:	2314      	movs	r3, #20
   20e8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   20e8e:	a90f      	add	r1, sp, #60	; 0x3c
   20e90:	4620      	mov	r0, r4
   20e92:	f7fd fe95 	bl	1ebc0 <net_icmpv6_get_nd_opt_hdr>
   20e96:	4607      	mov	r7, r0
	return net_buf_frags_len(pkt->frags);
   20e98:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   20e9a:	2500      	movs	r5, #0
   20e9c:	e00e      	b.n	20ebc <handle_ns_input+0x78>
			icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   20e9e:	a908      	add	r1, sp, #32
   20ea0:	4620      	mov	r0, r4
   20ea2:	f7fd fcc2 	bl	1e82a <net_icmpv6_get_hdr>
			if (!icmp_hdr || icmp_hdr->code != 0) {
   20ea6:	2800      	cmp	r0, #0
   20ea8:	f000 80b7 	beq.w	2101a <handle_ns_input+0x1d6>
   20eac:	7843      	ldrb	r3, [r0, #1]
   20eae:	2b00      	cmp	r3, #0
   20eb0:	f040 80b3 	bne.w	2101a <handle_ns_input+0x1d6>
   20eb4:	e7e8      	b.n	20e88 <handle_ns_input+0x44>
		bytes += buf->len;
   20eb6:	899a      	ldrh	r2, [r3, #12]
   20eb8:	4415      	add	r5, r2
		buf = buf->frags;
   20eba:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   20ebc:	2b00      	cmp	r3, #0
   20ebe:	d1fa      	bne.n	20eb6 <handle_ns_input+0x72>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   20ec0:	3d2c      	subs	r5, #44	; 0x2c
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   20ec2:	e042      	b.n	20f4a <handle_ns_input+0x106>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20ec4:	2100      	movs	r1, #0
			if (net_is_ipv6_addr_unspecified(
   20ec6:	2900      	cmp	r1, #0
   20ec8:	f040 80a7 	bne.w	2101a <handle_ns_input+0x1d6>
					   net_pkt_ip_hdr_len(pkt) +
   20ecc:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
					   net_pkt_ipv6_ext_len(pkt) +
   20ed0:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
					   net_pkt_ip_hdr_len(pkt) +
   20ed4:	4401      	add	r1, r0
					   sizeof(struct net_icmp_hdr) +
   20ed6:	4411      	add	r1, r2
   20ed8:	b289      	uxth	r1, r1
			handle_ns_neighbor(pkt, nd_opt_hdr->len,
   20eda:	3106      	adds	r1, #6
	lladdr.len = 8 * ll_len - 2;
   20edc:	00db      	lsls	r3, r3, #3
   20ede:	b2db      	uxtb	r3, r3
   20ee0:	3b02      	subs	r3, #2
   20ee2:	b2db      	uxtb	r3, r3
   20ee4:	f88d 3019 	strb.w	r3, [sp, #25]
	frag = net_frag_read(pkt->frags, sllao_offset,
   20ee8:	f10d 021a 	add.w	r2, sp, #26
   20eec:	9200      	str	r2, [sp, #0]
   20eee:	f10d 0216 	add.w	r2, sp, #22
   20ef2:	b289      	uxth	r1, r1
   20ef4:	68a0      	ldr	r0, [r4, #8]
   20ef6:	f7fc fd12 	bl	1d91e <net_frag_read>
	if (!frag && pos == 0xffff) {
   20efa:	2800      	cmp	r0, #0
   20efc:	d042      	beq.n	20f84 <handle_ns_input+0x140>
	nbr_lladdr.len = lladdr.len;
   20efe:	f89d 3019 	ldrb.w	r3, [sp, #25]
   20f02:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	nbr_lladdr.addr = lladdr.addr;
   20f06:	f10d 021a 	add.w	r2, sp, #26
   20f0a:	9208      	str	r2, [sp, #32]
	if (net_pkt_ll_src(pkt)->len < nbr_lladdr.len) {
   20f0c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   20f10:	4293      	cmp	r3, r2
   20f12:	d901      	bls.n	20f18 <handle_ns_input+0xd4>
		nbr_lladdr.len = net_pkt_ll_src(pkt)->len;
   20f14:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return pkt->frags->data;
   20f18:	68a3      	ldr	r3, [r4, #8]
   20f1a:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   20f1c:	2300      	movs	r3, #0
   20f1e:	9300      	str	r3, [sp, #0]
   20f20:	aa08      	add	r2, sp, #32
   20f22:	3108      	adds	r1, #8
   20f24:	6960      	ldr	r0, [r4, #20]
   20f26:	f7ff fc91 	bl	2084c <net_ipv6_nbr_add>
	return pkt->ipv6_ext_opt_len;
   20f2a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
					     (nd_opt_hdr->len << 3));
   20f2e:	787b      	ldrb	r3, [r7, #1]
   20f30:	00db      	lsls	r3, r3, #3
   20f32:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   20f34:	4413      	add	r3, r2
   20f36:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   20f38:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   20f3c:	429a      	cmp	r2, r3
   20f3e:	d26c      	bcs.n	2101a <handle_ns_input+0x1d6>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   20f40:	a90f      	add	r1, sp, #60	; 0x3c
   20f42:	4620      	mov	r0, r4
   20f44:	f7fd fe3c 	bl	1ebc0 <net_icmpv6_get_nd_opt_hdr>
   20f48:	4607      	mov	r7, r0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   20f4a:	b317      	cbz	r7, 20f92 <handle_ns_input+0x14e>
	return pkt->ipv6_ext_opt_len;
   20f4c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   20f50:	4295      	cmp	r5, r2
   20f52:	d91e      	bls.n	20f92 <handle_ns_input+0x14e>
		if (!nd_opt_hdr->len) {
   20f54:	787b      	ldrb	r3, [r7, #1]
   20f56:	b1e3      	cbz	r3, 20f92 <handle_ns_input+0x14e>
		switch (nd_opt_hdr->type) {
   20f58:	7839      	ldrb	r1, [r7, #0]
   20f5a:	2901      	cmp	r1, #1
   20f5c:	d1e5      	bne.n	20f2a <handle_ns_input+0xe6>
	return pkt->frags->data;
   20f5e:	68a1      	ldr	r1, [r4, #8]
   20f60:	6889      	ldr	r1, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20f62:	6888      	ldr	r0, [r1, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20f64:	2800      	cmp	r0, #0
   20f66:	d1ad      	bne.n	20ec4 <handle_ns_input+0x80>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20f68:	68c8      	ldr	r0, [r1, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20f6a:	b928      	cbnz	r0, 20f78 <handle_ns_input+0x134>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20f6c:	6908      	ldr	r0, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20f6e:	b928      	cbnz	r0, 20f7c <handle_ns_input+0x138>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   20f70:	6949      	ldr	r1, [r1, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20f72:	b129      	cbz	r1, 20f80 <handle_ns_input+0x13c>
   20f74:	2100      	movs	r1, #0
   20f76:	e7a6      	b.n	20ec6 <handle_ns_input+0x82>
   20f78:	2100      	movs	r1, #0
   20f7a:	e7a4      	b.n	20ec6 <handle_ns_input+0x82>
   20f7c:	2100      	movs	r1, #0
   20f7e:	e7a2      	b.n	20ec6 <handle_ns_input+0x82>
   20f80:	2101      	movs	r1, #1
   20f82:	e7a0      	b.n	20ec6 <handle_ns_input+0x82>
	if (!frag && pos == 0xffff) {
   20f84:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20f8c:	429a      	cmp	r2, r3
   20f8e:	d1b6      	bne.n	20efe <handle_ns_input+0xba>
   20f90:	e7cb      	b.n	20f2a <handle_ns_input+0xe6>
	return pkt->iface;
   20f92:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   20f96:	f106 0904 	add.w	r9, r6, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20f9a:	2500      	movs	r5, #0
   20f9c:	e001      	b.n	20fa2 <handle_ns_input+0x15e>
		if (net_is_ipv6_prefix(addr->s6_addr,
   20f9e:	b9ef      	cbnz	r7, 20fdc <handle_ns_input+0x198>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20fa0:	3501      	adds	r5, #1
   20fa2:	2d02      	cmp	r5, #2
   20fa4:	dc21      	bgt.n	20fea <handle_ns_input+0x1a6>
		if (!iface->ipv6.unicast[i].is_used ||
   20fa6:	236c      	movs	r3, #108	; 0x6c
   20fa8:	fb03 8305 	mla	r3, r3, r5, r8
   20fac:	f893 7094 	ldrb.w	r7, [r3, #148]	; 0x94
   20fb0:	2f00      	cmp	r7, #0
   20fb2:	d0f5      	beq.n	20fa0 <handle_ns_input+0x15c>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   20fb4:	236c      	movs	r3, #108	; 0x6c
   20fb6:	fb03 8305 	mla	r3, r3, r5, r8
   20fba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   20fbc:	2b0a      	cmp	r3, #10
   20fbe:	d1ef      	bne.n	20fa0 <handle_ns_input+0x15c>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   20fc0:	216c      	movs	r1, #108	; 0x6c
   20fc2:	fb01 f105 	mul.w	r1, r1, r5
   20fc6:	3120      	adds	r1, #32
   20fc8:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   20fca:	2210      	movs	r2, #16
   20fcc:	4411      	add	r1, r2
   20fce:	4648      	mov	r0, r9
   20fd0:	f009 f842 	bl	2a058 <memcmp>
   20fd4:	2800      	cmp	r0, #0
   20fd6:	d0e2      	beq.n	20f9e <handle_ns_input+0x15a>
		return false;
   20fd8:	2700      	movs	r7, #0
   20fda:	e7e0      	b.n	20f9e <handle_ns_input+0x15a>
			return &iface->ipv6.unicast[i];
   20fdc:	236c      	movs	r3, #108	; 0x6c
   20fde:	fb03 f505 	mul.w	r5, r3, r5
   20fe2:	3520      	adds	r5, #32
   20fe4:	4445      	add	r5, r8
   20fe6:	350c      	adds	r5, #12
   20fe8:	e000      	b.n	20fec <handle_ns_input+0x1a8>
	return NULL;
   20fea:	2500      	movs	r5, #0
	if (!ifaddr) {
   20fec:	b1ad      	cbz	r5, 2101a <handle_ns_input+0x1d6>
	return pkt->frags->data;
   20fee:	68a3      	ldr	r3, [r4, #8]
   20ff0:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20ff2:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20ff4:	b93b      	cbnz	r3, 21006 <handle_ns_input+0x1c2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20ff6:	68c3      	ldr	r3, [r0, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20ff8:	b9cb      	cbnz	r3, 2102e <handle_ns_input+0x1ea>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20ffa:	6903      	ldr	r3, [r0, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20ffc:	b9cb      	cbnz	r3, 21032 <handle_ns_input+0x1ee>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   20ffe:	6943      	ldr	r3, [r0, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21000:	b1cb      	cbz	r3, 21036 <handle_ns_input+0x1f2>
   21002:	2300      	movs	r3, #0
   21004:	e000      	b.n	21008 <handle_ns_input+0x1c4>
   21006:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   21008:	2b00      	cmp	r3, #0
   2100a:	d07d      	beq.n	21108 <handle_ns_input+0x2c4>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   2100c:	6982      	ldr	r2, [r0, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2100e:	f240 23ff 	movw	r3, #767	; 0x2ff
   21012:	429a      	cmp	r2, r3
   21014:	d011      	beq.n	2103a <handle_ns_input+0x1f6>
   21016:	2300      	movs	r3, #0
		if (!net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   21018:	bb0b      	cbnz	r3, 2105e <handle_ns_input+0x21a>
	net_stats.ipv6_nd.drop++;
   2101a:	4a3a      	ldr	r2, [pc, #232]	; (21104 <handle_ns_input+0x2c0>)
   2101c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   21020:	3301      	adds	r3, #1
   21022:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   21026:	2002      	movs	r0, #2
}
   21028:	b025      	add	sp, #148	; 0x94
   2102a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2102e:	2300      	movs	r3, #0
   21030:	e7ea      	b.n	21008 <handle_ns_input+0x1c4>
   21032:	2300      	movs	r3, #0
   21034:	e7e8      	b.n	21008 <handle_ns_input+0x1c4>
   21036:	2301      	movs	r3, #1
   21038:	e7e6      	b.n	21008 <handle_ns_input+0x1c4>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   2103a:	69c3      	ldr	r3, [r0, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   2103c:	b95b      	cbnz	r3, 21056 <handle_ns_input+0x212>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2103e:	6a03      	ldr	r3, [r0, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   21040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   21044:	d001      	beq.n	2104a <handle_ns_input+0x206>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21046:	2300      	movs	r3, #0
   21048:	e7e6      	b.n	21018 <handle_ns_input+0x1d4>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   2104a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2104c:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2104e:	2bff      	cmp	r3, #255	; 0xff
   21050:	d003      	beq.n	2105a <handle_ns_input+0x216>
   21052:	2300      	movs	r3, #0
   21054:	e7e0      	b.n	21018 <handle_ns_input+0x1d4>
   21056:	2300      	movs	r3, #0
   21058:	e7de      	b.n	21018 <handle_ns_input+0x1d4>
   2105a:	2301      	movs	r3, #1
   2105c:	e7dc      	b.n	21018 <handle_ns_input+0x1d4>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   2105e:	f995 3065 	ldrsb.w	r3, [r5, #101]	; 0x65
   21062:	b94b      	cbnz	r3, 21078 <handle_ns_input+0x234>
	return pkt->iface;
   21064:	6960      	ldr	r0, [r4, #20]
			dad_failed(net_pkt_iface(pkt),
   21066:	1d29      	adds	r1, r5, #4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   21068:	88aa      	ldrh	r2, [r5, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   2106a:	f248 03fe 	movw	r3, #33022	; 0x80fe
   2106e:	429a      	cmp	r2, r3
   21070:	d0d3      	beq.n	2101a <handle_ns_input+0x1d6>
	net_if_ipv6_dad_failed(iface, addr);
   21072:	f7fa fb51 	bl	1b718 <net_if_ipv6_dad_failed>
   21076:	e7d0      	b.n	2101a <handle_ns_input+0x1d6>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   21078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2107c:	7603      	strb	r3, [r0, #24]
   2107e:	2300      	movs	r3, #0
   21080:	2202      	movs	r2, #2
   21082:	7642      	strb	r2, [r0, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   21084:	7683      	strb	r3, [r0, #26]
   21086:	76c3      	strb	r3, [r0, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   21088:	7703      	strb	r3, [r0, #28]
   2108a:	7743      	strb	r3, [r0, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   2108c:	7783      	strb	r3, [r0, #30]
   2108e:	77c3      	strb	r3, [r0, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   21090:	f880 3020 	strb.w	r3, [r0, #32]
   21094:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   21098:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
   2109c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   210a0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
   210a4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   210a8:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
   210ac:	2301      	movs	r3, #1
   210ae:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	return pkt->frags->data;
   210b2:	68a3      	ldr	r3, [r4, #8]
   210b4:	f8d3 8008 	ldr.w	r8, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   210b8:	f108 0118 	add.w	r1, r8, #24
   210bc:	6960      	ldr	r0, [r4, #20]
   210be:	f7fa fe15 	bl	1bcec <net_if_ipv6_select_src_addr>
   210c2:	4603      	mov	r3, r0
   210c4:	ae10      	add	r6, sp, #64	; 0x40
   210c6:	6800      	ldr	r0, [r0, #0]
   210c8:	6859      	ldr	r1, [r3, #4]
   210ca:	689a      	ldr	r2, [r3, #8]
   210cc:	68db      	ldr	r3, [r3, #12]
   210ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   210d0:	ae10      	add	r6, sp, #64	; 0x40
   210d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   210d4:	f8c8 0008 	str.w	r0, [r8, #8]
   210d8:	f8c8 100c 	str.w	r1, [r8, #12]
   210dc:	f8c8 2010 	str.w	r2, [r8, #16]
   210e0:	f8c8 3014 	str.w	r3, [r8, #20]
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   210e4:	2320      	movs	r3, #32
   210e6:	68a2      	ldr	r2, [r4, #8]
   210e8:	6891      	ldr	r1, [r2, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   210ea:	9300      	str	r3, [sp, #0]
   210ec:	1d2b      	adds	r3, r5, #4
   210ee:	f101 0218 	add.w	r2, r1, #24
   210f2:	3108      	adds	r1, #8
   210f4:	6960      	ldr	r0, [r4, #20]
   210f6:	f7fe ff69 	bl	1ffcc <net_ipv6_send_na>
	if (!ret) {
   210fa:	2800      	cmp	r0, #0
   210fc:	f000 80b5 	beq.w	2126a <handle_ns_input+0x426>
	return NET_DROP;
   21100:	2002      	movs	r0, #2
   21102:	e791      	b.n	21028 <handle_ns_input+0x1e4>
   21104:	20002b50 	.word	0x20002b50
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   21108:	2100      	movs	r1, #0
   2110a:	3008      	adds	r0, #8
   2110c:	f7fa f8d6 	bl	1b2bc <net_if_ipv6_addr_lookup>
	if (net_is_my_ipv6_addr(&NET_IPV6_HDR(pkt)->src)) {
   21110:	4607      	mov	r7, r0
   21112:	2800      	cmp	r0, #0
   21114:	d181      	bne.n	2101a <handle_ns_input+0x1d6>
   21116:	68a3      	ldr	r3, [r4, #8]
   21118:	f8d3 8008 	ldr.w	r8, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   2111c:	f8d8 2018 	ldr.w	r2, [r8, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21120:	f240 23ff 	movw	r3, #767	; 0x2ff
   21124:	429a      	cmp	r2, r3
   21126:	d02b      	beq.n	21180 <handle_ns_input+0x33c>
   21128:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   2112a:	9303      	str	r3, [sp, #12]
   2112c:	2b00      	cmp	r3, #0
   2112e:	d03c      	beq.n	211aa <handle_ns_input+0x366>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   21130:	af14      	add	r7, sp, #80	; 0x50
   21132:	4643      	mov	r3, r8
   21134:	f853 0f08 	ldr.w	r0, [r3, #8]!
   21138:	6859      	ldr	r1, [r3, #4]
   2113a:	689a      	ldr	r2, [r3, #8]
   2113c:	68db      	ldr	r3, [r3, #12]
   2113e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   21140:	af14      	add	r7, sp, #80	; 0x50
   21142:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   21144:	f8c8 0018 	str.w	r0, [r8, #24]
   21148:	f8c8 101c 	str.w	r1, [r8, #28]
   2114c:	f8c8 2020 	str.w	r2, [r8, #32]
   21150:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
   21154:	68a3      	ldr	r3, [r4, #8]
   21156:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   2115a:	af18      	add	r7, sp, #96	; 0x60
   2115c:	f856 0f04 	ldr.w	r0, [r6, #4]!
   21160:	6871      	ldr	r1, [r6, #4]
   21162:	68b2      	ldr	r2, [r6, #8]
   21164:	68f3      	ldr	r3, [r6, #12]
   21166:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   21168:	ae18      	add	r6, sp, #96	; 0x60
   2116a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2116c:	f8ce 0008 	str.w	r0, [lr, #8]
   21170:	f8ce 100c 	str.w	r1, [lr, #12]
   21174:	f8ce 2010 	str.w	r2, [lr, #16]
   21178:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   2117c:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   2117e:	e7b2      	b.n	210e6 <handle_ns_input+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   21180:	f8d8 301c 	ldr.w	r3, [r8, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   21184:	b96b      	cbnz	r3, 211a2 <handle_ns_input+0x35e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21186:	f8d8 3020 	ldr.w	r3, [r8, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   2118a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2118e:	d001      	beq.n	21194 <handle_ns_input+0x350>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21190:	2300      	movs	r3, #0
   21192:	e7ca      	b.n	2112a <handle_ns_input+0x2e6>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   21194:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   21198:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2119a:	2bff      	cmp	r3, #255	; 0xff
   2119c:	d003      	beq.n	211a6 <handle_ns_input+0x362>
   2119e:	2300      	movs	r3, #0
   211a0:	e7c3      	b.n	2112a <handle_ns_input+0x2e6>
   211a2:	2300      	movs	r3, #0
   211a4:	e7c1      	b.n	2112a <handle_ns_input+0x2e6>
   211a6:	2301      	movs	r3, #1
   211a8:	e7bf      	b.n	2112a <handle_ns_input+0x2e6>
	return pkt->iface;
   211aa:	f8d4 a014 	ldr.w	sl, [r4, #20]
	if (net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   211ae:	f108 0818 	add.w	r8, r8, #24
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   211b2:	f04f 0900 	mov.w	r9, #0
   211b6:	e004      	b.n	211c2 <handle_ns_input+0x37e>
		return false;
   211b8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   211bc:	e01e      	b.n	211fc <handle_ns_input+0x3b8>
   211be:	f109 0901 	add.w	r9, r9, #1
   211c2:	f1b9 0f02 	cmp.w	r9, #2
   211c6:	dc22      	bgt.n	2120e <handle_ns_input+0x3ca>
		if (!iface->ipv6.unicast[i].is_used ||
   211c8:	236c      	movs	r3, #108	; 0x6c
   211ca:	fb03 a309 	mla	r3, r3, r9, sl
   211ce:	f893 b094 	ldrb.w	fp, [r3, #148]	; 0x94
   211d2:	f1bb 0f00 	cmp.w	fp, #0
   211d6:	d0f2      	beq.n	211be <handle_ns_input+0x37a>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   211d8:	236c      	movs	r3, #108	; 0x6c
   211da:	fb03 a309 	mla	r3, r3, r9, sl
   211de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   211e0:	2b0a      	cmp	r3, #10
   211e2:	d1ec      	bne.n	211be <handle_ns_input+0x37a>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   211e4:	216c      	movs	r1, #108	; 0x6c
   211e6:	fb01 f109 	mul.w	r1, r1, r9
   211ea:	3120      	adds	r1, #32
   211ec:	4451      	add	r1, sl
	if (memcmp(addr1, addr2, bytes)) {
   211ee:	2210      	movs	r2, #16
   211f0:	4411      	add	r1, r2
   211f2:	4640      	mov	r0, r8
   211f4:	f008 ff30 	bl	2a058 <memcmp>
   211f8:	2800      	cmp	r0, #0
   211fa:	d1dd      	bne.n	211b8 <handle_ns_input+0x374>
		if (net_is_ipv6_prefix(addr->s6_addr,
   211fc:	f1bb 0f00 	cmp.w	fp, #0
   21200:	d0dd      	beq.n	211be <handle_ns_input+0x37a>
			return &iface->ipv6.unicast[i];
   21202:	276c      	movs	r7, #108	; 0x6c
   21204:	fb07 f709 	mul.w	r7, r7, r9
   21208:	3720      	adds	r7, #32
   2120a:	4457      	add	r7, sl
   2120c:	370c      	adds	r7, #12
   2120e:	2f00      	cmp	r7, #0
   21210:	f43f af03 	beq.w	2101a <handle_ns_input+0x1d6>
	return pkt->frags->data;
   21214:	68a3      	ldr	r3, [r4, #8]
   21216:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   2121a:	af1c      	add	r7, sp, #112	; 0x70
   2121c:	4663      	mov	r3, ip
   2121e:	f853 0f08 	ldr.w	r0, [r3, #8]!
   21222:	6859      	ldr	r1, [r3, #4]
   21224:	689a      	ldr	r2, [r3, #8]
   21226:	68db      	ldr	r3, [r3, #12]
   21228:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   2122a:	af1c      	add	r7, sp, #112	; 0x70
   2122c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2122e:	f8cc 0018 	str.w	r0, [ip, #24]
   21232:	f8cc 101c 	str.w	r1, [ip, #28]
   21236:	f8cc 2020 	str.w	r2, [ip, #32]
   2123a:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   2123e:	68a3      	ldr	r3, [r4, #8]
   21240:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   21244:	af20      	add	r7, sp, #128	; 0x80
   21246:	f856 0f04 	ldr.w	r0, [r6, #4]!
   2124a:	6871      	ldr	r1, [r6, #4]
   2124c:	68b2      	ldr	r2, [r6, #8]
   2124e:	68f3      	ldr	r3, [r6, #12]
   21250:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   21252:	ae20      	add	r6, sp, #128	; 0x80
   21254:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   21256:	f8ce 0008 	str.w	r0, [lr, #8]
   2125a:	f8ce 100c 	str.w	r1, [lr, #12]
   2125e:	f8ce 2010 	str.w	r2, [lr, #16]
   21262:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   21266:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   21268:	e73d      	b.n	210e6 <handle_ns_input+0x2a2>
		net_pkt_unref(pkt);
   2126a:	4620      	mov	r0, r4
   2126c:	f7fc f9d9 	bl	1d622 <net_pkt_unref>
		return NET_OK;
   21270:	2000      	movs	r0, #0
   21272:	e6d9      	b.n	21028 <handle_ns_input+0x1e4>

00021274 <nd_reachable_timeout>:
{
   21274:	b530      	push	{r4, r5, lr}
   21276:	b083      	sub	sp, #12
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   21278:	f1a0 0514 	sub.w	r5, r0, #20
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   2127c:	2300      	movs	r3, #0
   2127e:	2b07      	cmp	r3, #7
   21280:	dc07      	bgt.n	21292 <nd_reachable_timeout+0x1e>
	return &net_neighbor_pool[idx].nbr;
   21282:	4c47      	ldr	r4, [pc, #284]	; (213a0 <nd_reachable_timeout+0x12c>)
   21284:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   21288:	68e2      	ldr	r2, [r4, #12]
   2128a:	4295      	cmp	r5, r2
   2128c:	d002      	beq.n	21294 <nd_reachable_timeout+0x20>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   2128e:	3301      	adds	r3, #1
   21290:	e7f5      	b.n	2127e <nd_reachable_timeout+0xa>
	return NULL;
   21292:	2400      	movs	r4, #0
	if (!data || !nbr) {
   21294:	b38d      	cbz	r5, 212fa <nd_reachable_timeout+0x86>
   21296:	b384      	cbz	r4, 212fa <nd_reachable_timeout+0x86>
   21298:	4603      	mov	r3, r0
	switch (data->state) {
   2129a:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   2129e:	2a04      	cmp	r2, #4
   212a0:	d82b      	bhi.n	212fa <nd_reachable_timeout+0x86>
   212a2:	e8df f002 	tbb	[pc, r2]
   212a6:	2703      	.short	0x2703
   212a8:	3f2c      	.short	0x3f2c
   212aa:	45          	.byte	0x45
   212ab:	00          	.byte	0x00
		if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   212ac:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   212b0:	2a02      	cmp	r2, #2
   212b2:	d912      	bls.n	212da <nd_reachable_timeout+0x66>
   212b4:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   212b6:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   212ba:	f008 fd7d 	bl	29db8 <k_delayed_work_cancel>
	if (data->pending) {
   212be:	6828      	ldr	r0, [r5, #0]
   212c0:	b118      	cbz	r0, 212ca <nd_reachable_timeout+0x56>
		net_pkt_unref(data->pending);
   212c2:	f7fc f9ae 	bl	1d622 <net_pkt_unref>
		data->pending = NULL;
   212c6:	2300      	movs	r3, #0
   212c8:	602b      	str	r3, [r5, #0]
   212ca:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   212cc:	3014      	adds	r0, #20
   212ce:	f008 fd73 	bl	29db8 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   212d2:	4620      	mov	r0, r4
   212d4:	f7fd ffa6 	bl	1f224 <net_nbr_unref>
   212d8:	e00f      	b.n	212fa <nd_reachable_timeout+0x86>
			data->ns_count++;
   212da:	3201      	adds	r2, #1
   212dc:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   212e0:	68a0      	ldr	r0, [r4, #8]
   212e2:	2100      	movs	r1, #0
   212e4:	9101      	str	r1, [sp, #4]
   212e6:	3b10      	subs	r3, #16
   212e8:	9300      	str	r3, [sp, #0]
   212ea:	460b      	mov	r3, r1
   212ec:	460a      	mov	r2, r1
   212ee:	f7ff f927 	bl	20540 <net_ipv6_send_ns>
   212f2:	e002      	b.n	212fa <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_STALE;
   212f4:	2202      	movs	r2, #2
   212f6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
}
   212fa:	b003      	add	sp, #12
   212fc:	bd30      	pop	{r4, r5, pc}
   212fe:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   21300:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   21304:	f008 fd58 	bl	29db8 <k_delayed_work_cancel>
	if (data->pending) {
   21308:	6828      	ldr	r0, [r5, #0]
   2130a:	b118      	cbz	r0, 21314 <nd_reachable_timeout+0xa0>
		net_pkt_unref(data->pending);
   2130c:	f7fc f989 	bl	1d622 <net_pkt_unref>
		data->pending = NULL;
   21310:	2300      	movs	r3, #0
   21312:	602b      	str	r3, [r5, #0]
   21314:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   21316:	3014      	adds	r0, #20
   21318:	f008 fd4e 	bl	29db8 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   2131c:	4620      	mov	r0, r4
   2131e:	f7fd ff81 	bl	1f224 <net_nbr_unref>
   21322:	e7ea      	b.n	212fa <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_PROBE;
   21324:	2204      	movs	r2, #4
   21326:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		data->ns_count = 0;
   2132a:	2200      	movs	r2, #0
   2132c:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
		if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   21330:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
   21334:	2a02      	cmp	r2, #2
   21336:	d91f      	bls.n	21378 <nd_reachable_timeout+0x104>
			router = net_if_ipv6_router_lookup(nbr->iface,
   21338:	f1a3 0110 	sub.w	r1, r3, #16
   2133c:	68a0      	ldr	r0, [r4, #8]
   2133e:	f7fa fbbf 	bl	1bac0 <net_if_ipv6_router_lookup>
			if (router && !router->is_infinite) {
   21342:	2800      	cmp	r0, #0
   21344:	d0d9      	beq.n	212fa <nd_reachable_timeout+0x86>
   21346:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
   2134a:	2a00      	cmp	r2, #0
   2134c:	d1d5      	bne.n	212fa <nd_reachable_timeout+0x86>
				net_if_ipv6_router_rm(router);
   2134e:	f7fa fc73 	bl	1bc38 <net_if_ipv6_router_rm>
   21352:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   21354:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   21358:	f008 fd2e 	bl	29db8 <k_delayed_work_cancel>
	if (data->pending) {
   2135c:	6828      	ldr	r0, [r5, #0]
   2135e:	b118      	cbz	r0, 21368 <nd_reachable_timeout+0xf4>
		net_pkt_unref(data->pending);
   21360:	f7fc f95f 	bl	1d622 <net_pkt_unref>
		data->pending = NULL;
   21364:	2300      	movs	r3, #0
   21366:	602b      	str	r3, [r5, #0]
   21368:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   2136a:	3014      	adds	r0, #20
   2136c:	f008 fd24 	bl	29db8 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   21370:	4620      	mov	r0, r4
   21372:	f7fd ff57 	bl	1f224 <net_nbr_unref>
   21376:	e7c0      	b.n	212fa <nd_reachable_timeout+0x86>
			data->ns_count++;
   21378:	3201      	adds	r2, #1
   2137a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   2137e:	68a0      	ldr	r0, [r4, #8]
   21380:	2100      	movs	r1, #0
   21382:	9101      	str	r1, [sp, #4]
   21384:	3b10      	subs	r3, #16
   21386:	9300      	str	r3, [sp, #0]
   21388:	460b      	mov	r3, r1
   2138a:	460a      	mov	r2, r1
   2138c:	f7ff f8d8 	bl	20540 <net_ipv6_send_ns>
   21390:	68e1      	ldr	r1, [r4, #12]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   21392:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21396:	3114      	adds	r1, #20
   21398:	4802      	ldr	r0, [pc, #8]	; (213a4 <nd_reachable_timeout+0x130>)
   2139a:	f008 fd67 	bl	29e6c <k_delayed_work_submit_to_queue>
   2139e:	e7ac      	b.n	212fa <nd_reachable_timeout+0x86>
   213a0:	2000bf50 	.word	0x2000bf50
   213a4:	20002c70 	.word	0x20002c70

000213a8 <net_ipv6_start_dad>:
{
   213a8:	b500      	push	{lr}
   213aa:	b083      	sub	sp, #12
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   213ac:	2301      	movs	r3, #1
   213ae:	9301      	str	r3, [sp, #4]
   213b0:	3104      	adds	r1, #4
   213b2:	9100      	str	r1, [sp, #0]
   213b4:	2300      	movs	r3, #0
   213b6:	461a      	mov	r2, r3
   213b8:	4619      	mov	r1, r3
   213ba:	f7ff f8c1 	bl	20540 <net_ipv6_send_ns>
}
   213be:	b003      	add	sp, #12
   213c0:	f85d fb04 	ldr.w	pc, [sp], #4

000213c4 <net_ipv6_prepare_for_send>:
{
   213c4:	b570      	push	{r4, r5, r6, lr}
   213c6:	b084      	sub	sp, #16
	struct net_if *iface = NULL;
   213c8:	2300      	movs	r3, #0
   213ca:	9303      	str	r3, [sp, #12]
	return pkt->iface;
   213cc:	6943      	ldr	r3, [r0, #20]
   213ce:	f3bf 8f5b 	dmb	ish
   213d2:	68db      	ldr	r3, [r3, #12]
   213d4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(net_pkt_iface(pkt)->flags, NET_IF_POINTOPOINT)) {
   213d8:	f013 0f02 	tst.w	r3, #2
   213dc:	d108      	bne.n	213f0 <net_ipv6_prepare_for_send+0x2c>
   213de:	4604      	mov	r4, r0
	if (net_pkt_ll_dst(pkt)->addr ||
   213e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
   213e2:	b13b      	cbz	r3, 213f4 <net_ipv6_prepare_for_send+0x30>
	return pkt->frags->data;
   213e4:	68a3      	ldr	r3, [r4, #8]
   213e6:	6899      	ldr	r1, [r3, #8]
		return update_ll_reserve(pkt, &NET_IPV6_HDR(pkt)->dst);
   213e8:	3118      	adds	r1, #24
   213ea:	4620      	mov	r0, r4
   213ec:	f7fe f9e6 	bl	1f7bc <update_ll_reserve>
}
   213f0:	b004      	add	sp, #16
   213f2:	bd70      	pop	{r4, r5, r6, pc}
   213f4:	6883      	ldr	r3, [r0, #8]
   213f6:	6899      	ldr	r1, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   213f8:	7e0b      	ldrb	r3, [r1, #24]
	if (net_pkt_ll_dst(pkt)->addr ||
   213fa:	2bff      	cmp	r3, #255	; 0xff
   213fc:	d0f2      	beq.n	213e4 <net_ipv6_prepare_for_send+0x20>
	if (net_if_ipv6_addr_onlink(&iface,
   213fe:	3118      	adds	r1, #24
   21400:	a803      	add	r0, sp, #12
   21402:	f7fa fa9d 	bl	1b940 <net_if_ipv6_addr_onlink>
   21406:	b348      	cbz	r0, 2145c <net_ipv6_prepare_for_send+0x98>
   21408:	68a3      	ldr	r3, [r4, #8]
   2140a:	689d      	ldr	r5, [r3, #8]
		nexthop = &NET_IPV6_HDR(pkt)->dst;
   2140c:	3518      	adds	r5, #24
		net_pkt_set_iface(pkt, iface);
   2140e:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   21410:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   21412:	7d5a      	ldrb	r2, [r3, #21]
   21414:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21418:	7d5b      	ldrb	r3, [r3, #21]
   2141a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	if (!iface) {
   2141e:	9b03      	ldr	r3, [sp, #12]
   21420:	2b00      	cmp	r3, #0
   21422:	d03e      	beq.n	214a2 <net_ipv6_prepare_for_send+0xde>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), nexthop);
   21424:	462a      	mov	r2, r5
   21426:	6961      	ldr	r1, [r4, #20]
   21428:	4832      	ldr	r0, [pc, #200]	; (214f4 <net_ipv6_prepare_for_send+0x130>)
   2142a:	f7fe f90d 	bl	1f648 <nbr_lookup>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   2142e:	4606      	mov	r6, r0
   21430:	2800      	cmp	r0, #0
   21432:	d051      	beq.n	214d8 <net_ipv6_prepare_for_send+0x114>
   21434:	7840      	ldrb	r0, [r0, #1]
   21436:	28ff      	cmp	r0, #255	; 0xff
   21438:	d04e      	beq.n	214d8 <net_ipv6_prepare_for_send+0x114>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   2143a:	f7fd ff85 	bl	1f348 <net_nbr_get_lladdr>
		net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   2143e:	1c83      	adds	r3, r0, #2
   21440:	62a3      	str	r3, [r4, #40]	; 0x28
		net_pkt_ll_dst(pkt)->len = lladdr->len;
   21442:	7843      	ldrb	r3, [r0, #1]
   21444:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   21448:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   2144a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   2144e:	2b02      	cmp	r3, #2
   21450:	d036      	beq.n	214c0 <net_ipv6_prepare_for_send+0xfc>
		return update_ll_reserve(pkt, nexthop);
   21452:	4629      	mov	r1, r5
   21454:	4620      	mov	r0, r4
   21456:	f7fe f9b1 	bl	1f7bc <update_ll_reserve>
   2145a:	e7c9      	b.n	213f0 <net_ipv6_prepare_for_send+0x2c>
	return pkt->frags->data;
   2145c:	68a3      	ldr	r3, [r4, #8]
   2145e:	6899      	ldr	r1, [r3, #8]
		route = net_route_lookup(NULL, &NET_IPV6_HDR(pkt)->dst);
   21460:	3118      	adds	r1, #24
   21462:	2000      	movs	r0, #0
   21464:	f001 fb26 	bl	22ab4 <net_route_lookup>
		if (route) {
   21468:	4606      	mov	r6, r0
   2146a:	b160      	cbz	r0, 21486 <net_ipv6_prepare_for_send+0xc2>
			nexthop = net_route_get_nexthop(route);
   2146c:	f001 fc06 	bl	22c7c <net_route_get_nexthop>
			if (!nexthop) {
   21470:	4605      	mov	r5, r0
   21472:	2800      	cmp	r0, #0
   21474:	d1d3      	bne.n	2141e <net_ipv6_prepare_for_send+0x5a>
				net_route_del(route);
   21476:	4630      	mov	r0, r6
   21478:	f001 fbac 	bl	22bd4 <net_route_del>
				net_pkt_unref(pkt);
   2147c:	4620      	mov	r0, r4
   2147e:	f7fc f8d0 	bl	1d622 <net_pkt_unref>
				return NULL;
   21482:	2000      	movs	r0, #0
   21484:	e7b4      	b.n	213f0 <net_ipv6_prepare_for_send+0x2c>
   21486:	68a3      	ldr	r3, [r4, #8]
   21488:	6899      	ldr	r1, [r3, #8]
			router = net_if_ipv6_router_find_default(NULL,
   2148a:	3118      	adds	r1, #24
   2148c:	2000      	movs	r0, #0
   2148e:	f7fa fb47 	bl	1bb20 <net_if_ipv6_router_find_default>
			if (!router) {
   21492:	4605      	mov	r5, r0
   21494:	b108      	cbz	r0, 2149a <net_ipv6_prepare_for_send+0xd6>
			nexthop = &router->address.in6_addr;
   21496:	352c      	adds	r5, #44	; 0x2c
   21498:	e7c1      	b.n	2141e <net_ipv6_prepare_for_send+0x5a>
   2149a:	68a3      	ldr	r3, [r4, #8]
   2149c:	689d      	ldr	r5, [r3, #8]
				nexthop = &NET_IPV6_HDR(pkt)->dst;
   2149e:	3518      	adds	r5, #24
				goto try_send;
   214a0:	e7c0      	b.n	21424 <net_ipv6_prepare_for_send+0x60>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   214a2:	4629      	mov	r1, r5
   214a4:	a803      	add	r0, sp, #12
   214a6:	f7fa fa4b 	bl	1b940 <net_if_ipv6_addr_onlink>
   214aa:	2800      	cmp	r0, #0
   214ac:	d0ba      	beq.n	21424 <net_ipv6_prepare_for_send+0x60>
			net_pkt_set_iface(pkt, iface);
   214ae:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   214b0:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   214b2:	7d5a      	ldrb	r2, [r3, #21]
   214b4:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   214b8:	7d5b      	ldrb	r3, [r3, #21]
   214ba:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   214be:	e7b1      	b.n	21424 <net_ipv6_prepare_for_send+0x60>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   214c0:	2103      	movs	r1, #3
   214c2:	4630      	mov	r0, r6
   214c4:	f7fd ff48 	bl	1f358 <ipv6_nbr_set_state>
   214c8:	68f1      	ldr	r1, [r6, #12]
   214ca:	f241 3288 	movw	r2, #5000	; 0x1388
   214ce:	3114      	adds	r1, #20
   214d0:	4809      	ldr	r0, [pc, #36]	; (214f8 <net_ipv6_prepare_for_send+0x134>)
   214d2:	f008 fccb 	bl	29e6c <k_delayed_work_submit_to_queue>
   214d6:	e7bc      	b.n	21452 <net_ipv6_prepare_for_send+0x8e>
	return pkt->iface;
   214d8:	6960      	ldr	r0, [r4, #20]
	return pkt->frags->data;
   214da:	68a3      	ldr	r3, [r4, #8]
   214dc:	689a      	ldr	r2, [r3, #8]
	if (net_ipv6_send_ns(net_pkt_iface(pkt),
   214de:	2600      	movs	r6, #0
   214e0:	9601      	str	r6, [sp, #4]
   214e2:	9500      	str	r5, [sp, #0]
   214e4:	4633      	mov	r3, r6
   214e6:	3208      	adds	r2, #8
   214e8:	4621      	mov	r1, r4
   214ea:	f7ff f829 	bl	20540 <net_ipv6_send_ns>
		return NULL;
   214ee:	4630      	mov	r0, r6
   214f0:	e77e      	b.n	213f0 <net_ipv6_prepare_for_send+0x2c>
   214f2:	bf00      	nop
   214f4:	2000bf44 	.word	0x2000bf44
   214f8:	20002c70 	.word	0x20002c70

000214fc <net_ipv6_send_rs>:
{
   214fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21500:	b084      	sub	sp, #16
   21502:	4605      	mov	r5, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   21504:	6843      	ldr	r3, [r0, #4]
   21506:	689b      	ldr	r3, [r3, #8]
   21508:	2100      	movs	r1, #0
   2150a:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   2150c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21510:	f7fc f816 	bl	1d540 <net_pkt_get_reserve_tx>
   21514:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   21516:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2151a:	f7fc f82f 	bl	1d57c <net_pkt_get_frag>
   2151e:	4606      	mov	r6, r0
	net_pkt_frag_add(pkt, frag);
   21520:	4601      	mov	r1, r0
   21522:	4620      	mov	r0, r4
   21524:	f7fc f8a7 	bl	1d676 <net_pkt_frag_add>
	pkt->iface = iface;
   21528:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   2152a:	7d6b      	ldrb	r3, [r5, #21]
   2152c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21530:	7d6b      	ldrb	r3, [r5, #21]
   21532:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   21536:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2153a:	220a      	movs	r2, #10
   2153c:	f362 03c6 	bfi	r3, r2, #3, #4
   21540:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   21544:	2328      	movs	r3, #40	; 0x28
   21546:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   2154a:	68a3      	ldr	r3, [r4, #8]
   2154c:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   2154e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   21552:	461a      	mov	r2, r3
   21554:	2100      	movs	r1, #0
   21556:	1ac0      	subs	r0, r0, r3
   21558:	f008 fe12 	bl	2a180 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   2155c:	2200      	movs	r2, #0
   2155e:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   21560:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	return pkt->frags->data;
   21564:	68a3      	ldr	r3, [r4, #8]
   21566:	689b      	ldr	r3, [r3, #8]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   21568:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2156c:	7619      	strb	r1, [r3, #24]
   2156e:	2102      	movs	r1, #2
   21570:	7659      	strb	r1, [r3, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   21572:	769a      	strb	r2, [r3, #26]
   21574:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   21576:	771a      	strb	r2, [r3, #28]
   21578:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   2157a:	779a      	strb	r2, [r3, #30]
   2157c:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   2157e:	f883 2020 	strb.w	r2, [r3, #32]
   21582:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   21586:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   2158a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   2158e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   21592:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   21596:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   2159a:	2201      	movs	r2, #1
   2159c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
   215a0:	68a3      	ldr	r3, [r4, #8]
   215a2:	f8d3 8008 	ldr.w	r8, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   215a6:	f108 0118 	add.w	r1, r8, #24
   215aa:	4628      	mov	r0, r5
   215ac:	f7fa fb9e 	bl	1bcec <net_if_ipv6_select_src_addr>
   215b0:	4603      	mov	r3, r0
   215b2:	466d      	mov	r5, sp
   215b4:	6800      	ldr	r0, [r0, #0]
   215b6:	6859      	ldr	r1, [r3, #4]
   215b8:	689a      	ldr	r2, [r3, #8]
   215ba:	68db      	ldr	r3, [r3, #12]
   215bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   215be:	466d      	mov	r5, sp
   215c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   215c2:	f8c8 0008 	str.w	r0, [r8, #8]
   215c6:	f8c8 100c 	str.w	r1, [r8, #12]
   215ca:	f8c8 2010 	str.w	r2, [r8, #16]
   215ce:	f8c8 3014 	str.w	r3, [r8, #20]
   215d2:	68a3      	ldr	r3, [r4, #8]
   215d4:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   215d6:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   215d8:	b93a      	cbnz	r2, 215ea <net_ipv6_send_rs+0xee>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   215da:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   215dc:	b982      	cbnz	r2, 21600 <net_ipv6_send_rs+0x104>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   215de:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   215e0:	b982      	cbnz	r2, 21604 <net_ipv6_send_rs+0x108>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   215e2:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   215e4:	b183      	cbz	r3, 21608 <net_ipv6_send_rs+0x10c>
   215e6:	2300      	movs	r3, #0
   215e8:	e000      	b.n	215ec <net_ipv6_send_rs+0xf0>
   215ea:	2300      	movs	r3, #0
	if (!unspec_src) {
   215ec:	461f      	mov	r7, r3
   215ee:	b97b      	cbnz	r3, 21610 <net_ipv6_send_rs+0x114>
	return pkt->iface;
   215f0:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   215f2:	7d1b      	ldrb	r3, [r3, #20]
   215f4:	2b06      	cmp	r3, #6
   215f6:	d02a      	beq.n	2164e <net_ipv6_send_rs+0x152>
	} else if (iface->link_addr.len == 8) {
   215f8:	2b08      	cmp	r3, #8
   215fa:	d007      	beq.n	2160c <net_ipv6_send_rs+0x110>
	return 0;
   215fc:	2500      	movs	r5, #0
   215fe:	e008      	b.n	21612 <net_ipv6_send_rs+0x116>
   21600:	2300      	movs	r3, #0
   21602:	e7f3      	b.n	215ec <net_ipv6_send_rs+0xf0>
   21604:	2300      	movs	r3, #0
   21606:	e7f1      	b.n	215ec <net_ipv6_send_rs+0xf0>
   21608:	2301      	movs	r3, #1
   2160a:	e7ef      	b.n	215ec <net_ipv6_send_rs+0xf0>
		return 16;
   2160c:	2510      	movs	r5, #16
   2160e:	e000      	b.n	21612 <net_ipv6_send_rs+0x116>
	u8_t llao_len = 0;
   21610:	2500      	movs	r5, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   21612:	2285      	movs	r2, #133	; 0x85
   21614:	1d29      	adds	r1, r5, #4
   21616:	4620      	mov	r0, r4
   21618:	f7fe f92f 	bl	1f87a <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   2161c:	3608      	adds	r6, #8
   2161e:	2104      	movs	r1, #4
   21620:	4630      	mov	r0, r6
   21622:	f7f9 fadb 	bl	1abdc <net_buf_simple_add>
	if (!unspec_src) {
   21626:	b1a7      	cbz	r7, 21652 <net_ipv6_send_rs+0x156>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   21628:	68a1      	ldr	r1, [r4, #8]
   2162a:	4620      	mov	r0, r4
   2162c:	f7fd f8b0 	bl	1e790 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   21630:	4620      	mov	r0, r4
   21632:	f7f9 fbf5 	bl	1ae20 <net_send_data>
   21636:	2800      	cmp	r0, #0
   21638:	db2b      	blt.n	21692 <net_ipv6_send_rs+0x196>
	net_stats.ipv6_nd.sent++;
   2163a:	4a1c      	ldr	r2, [pc, #112]	; (216ac <net_ipv6_send_rs+0x1b0>)
   2163c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   21640:	3301      	adds	r3, #1
   21642:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   21646:	2000      	movs	r0, #0
}
   21648:	b004      	add	sp, #16
   2164a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 8;
   2164e:	2508      	movs	r5, #8
   21650:	e7df      	b.n	21612 <net_ipv6_send_rs+0x116>
		net_buf_add(frag, llao_len);
   21652:	4629      	mov	r1, r5
   21654:	4630      	mov	r0, r6
   21656:	f7f9 fac1 	bl	1abdc <net_buf_simple_add>
   2165a:	f8d4 8014 	ldr.w	r8, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   2165e:	4620      	mov	r0, r4
   21660:	f7fc fab8 	bl	1dbd4 <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   21664:	f100 0608 	add.w	r6, r0, #8
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   21668:	2301      	movs	r3, #1
   2166a:	7203      	strb	r3, [r0, #8]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   2166c:	08eb      	lsrs	r3, r5, #3
   2166e:	7243      	strb	r3, [r0, #9]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   21670:	f898 2014 	ldrb.w	r2, [r8, #20]
   21674:	f8d8 1010 	ldr.w	r1, [r8, #16]
   21678:	300a      	adds	r0, #10
   2167a:	f7de fe21 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   2167e:	f898 2014 	ldrb.w	r2, [r8, #20]
   21682:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   21684:	1aaa      	subs	r2, r5, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   21686:	3a02      	subs	r2, #2
   21688:	2100      	movs	r1, #0
   2168a:	4430      	add	r0, r6
   2168c:	f008 fd78 	bl	2a180 <memset>
   21690:	e7ca      	b.n	21628 <net_ipv6_send_rs+0x12c>
	net_pkt_unref(pkt);
   21692:	4620      	mov	r0, r4
   21694:	f7fb ffc5 	bl	1d622 <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   21698:	4a04      	ldr	r2, [pc, #16]	; (216ac <net_ipv6_send_rs+0x1b0>)
   2169a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   2169e:	3301      	adds	r3, #1
   216a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   216a4:	f06f 0015 	mvn.w	r0, #21
   216a8:	e7ce      	b.n	21648 <net_ipv6_send_rs+0x14c>
   216aa:	bf00      	nop
   216ac:	20002b50 	.word	0x20002b50

000216b0 <net_ipv6_start_rs>:
{
   216b0:	b508      	push	{r3, lr}
	return net_ipv6_send_rs(iface);
   216b2:	f7ff ff23 	bl	214fc <net_ipv6_send_rs>
}
   216b6:	bd08      	pop	{r3, pc}

000216b8 <net_ipv6_mld_join>:
{
   216b8:	b570      	push	{r4, r5, r6, lr}
   216ba:	b082      	sub	sp, #8
   216bc:	ab02      	add	r3, sp, #8
   216be:	f843 0d04 	str.w	r0, [r3, #-4]!
   216c2:	460d      	mov	r5, r1
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   216c4:	4619      	mov	r1, r3
   216c6:	4628      	mov	r0, r5
   216c8:	f7fa f842 	bl	1b750 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   216cc:	4604      	mov	r4, r0
   216ce:	b118      	cbz	r0, 216d8 <net_ipv6_mld_join+0x20>
	return addr->is_joined;
   216d0:	7803      	ldrb	r3, [r0, #0]
   216d2:	f013 0f02 	tst.w	r3, #2
   216d6:	d123      	bne.n	21720 <net_ipv6_mld_join+0x68>
	if (!maddr) {
   216d8:	b1c4      	cbz	r4, 2170c <net_ipv6_mld_join+0x54>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   216da:	2202      	movs	r2, #2
   216dc:	4629      	mov	r1, r5
   216de:	9801      	ldr	r0, [sp, #4]
   216e0:	f7fe fb5a 	bl	1fd98 <send_mldv2>
	if (ret < 0) {
   216e4:	1e06      	subs	r6, r0, #0
   216e6:	db0e      	blt.n	21706 <net_ipv6_mld_join+0x4e>
	addr->is_joined = true;
   216e8:	7823      	ldrb	r3, [r4, #0]
   216ea:	f043 0302 	orr.w	r3, r3, #2
   216ee:	7023      	strb	r3, [r4, #0]
	net_if_mcast_monitor(iface, addr, true);
   216f0:	2201      	movs	r2, #1
   216f2:	4629      	mov	r1, r5
   216f4:	9801      	ldr	r0, [sp, #4]
   216f6:	f7fa f877 	bl	1b7e8 <net_if_mcast_monitor>
   216fa:	2300      	movs	r3, #0
   216fc:	461a      	mov	r2, r3
   216fe:	9901      	ldr	r1, [sp, #4]
   21700:	4809      	ldr	r0, [pc, #36]	; (21728 <net_ipv6_mld_join+0x70>)
   21702:	f001 fc01 	bl	22f08 <net_mgmt_event_notify_with_info>
}
   21706:	4630      	mov	r0, r6
   21708:	b002      	add	sp, #8
   2170a:	bd70      	pop	{r4, r5, r6, pc}
		maddr = net_if_ipv6_maddr_add(iface, addr);
   2170c:	4629      	mov	r1, r5
   2170e:	9801      	ldr	r0, [sp, #4]
   21710:	f7f9 ff32 	bl	1b578 <net_if_ipv6_maddr_add>
		if (!maddr) {
   21714:	4604      	mov	r4, r0
   21716:	2800      	cmp	r0, #0
   21718:	d1df      	bne.n	216da <net_ipv6_mld_join+0x22>
			return -ENOMEM;
   2171a:	f06f 060b 	mvn.w	r6, #11
   2171e:	e7f2      	b.n	21706 <net_ipv6_mld_join+0x4e>
		return -EALREADY;
   21720:	f06f 0677 	mvn.w	r6, #119	; 0x77
   21724:	e7ef      	b.n	21706 <net_ipv6_mld_join+0x4e>
   21726:	bf00      	nop
   21728:	f0600007 	.word	0xf0600007

0002172c <net_ipv6_mld_leave>:
{
   2172c:	b570      	push	{r4, r5, r6, lr}
   2172e:	4604      	mov	r4, r0
   21730:	460d      	mov	r5, r1
	if (!net_if_ipv6_maddr_rm(iface, addr)) {
   21732:	f7f9 ff5d 	bl	1b5f0 <net_if_ipv6_maddr_rm>
   21736:	b198      	cbz	r0, 21760 <net_ipv6_mld_leave+0x34>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_INCLUDE);
   21738:	2201      	movs	r2, #1
   2173a:	4629      	mov	r1, r5
   2173c:	4620      	mov	r0, r4
   2173e:	f7fe fb2b 	bl	1fd98 <send_mldv2>
	if (ret < 0) {
   21742:	1e06      	subs	r6, r0, #0
   21744:	db0a      	blt.n	2175c <net_ipv6_mld_leave+0x30>
	net_if_mcast_monitor(iface, addr, false);
   21746:	2200      	movs	r2, #0
   21748:	4629      	mov	r1, r5
   2174a:	4620      	mov	r0, r4
   2174c:	f7fa f84c 	bl	1b7e8 <net_if_mcast_monitor>
   21750:	2300      	movs	r3, #0
   21752:	461a      	mov	r2, r3
   21754:	4621      	mov	r1, r4
   21756:	4804      	ldr	r0, [pc, #16]	; (21768 <net_ipv6_mld_leave+0x3c>)
   21758:	f001 fbd6 	bl	22f08 <net_mgmt_event_notify_with_info>
}
   2175c:	4630      	mov	r0, r6
   2175e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   21760:	f06f 0615 	mvn.w	r6, #21
   21764:	e7fa      	b.n	2175c <net_ipv6_mld_leave+0x30>
   21766:	bf00      	nop
   21768:	f0600008 	.word	0xf0600008

0002176c <net_ipv6_process_pkt>:
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
		proto == IPPROTO_TCP);
}

enum net_verdict net_ipv6_process_pkt(struct net_pkt *pkt)
{
   2176c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21770:	b089      	sub	sp, #36	; 0x24
	return pkt->frags->data;
   21772:	6884      	ldr	r4, [r0, #8]
   21774:	68a7      	ldr	r7, [r4, #8]
	size_t bytes = 0;
   21776:	2300      	movs	r3, #0
   21778:	e002      	b.n	21780 <net_ipv6_process_pkt+0x14>
		bytes += buf->len;
   2177a:	89a2      	ldrh	r2, [r4, #12]
   2177c:	4413      	add	r3, r2
		buf = buf->frags;
   2177e:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   21780:	2c00      	cmp	r4, #0
   21782:	d1fa      	bne.n	2177a <net_ipv6_process_pkt+0xe>
	struct net_ipv6_hdr *hdr = NET_IPV6_HDR(pkt);
	int real_len = net_pkt_get_len(pkt);
   21784:	461e      	mov	r6, r3
	int pkt_len = (hdr->len[0] << 8) + hdr->len[1] + sizeof(*hdr);
   21786:	7939      	ldrb	r1, [r7, #4]
   21788:	797a      	ldrb	r2, [r7, #5]
   2178a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   2178e:	3228      	adds	r2, #40	; 0x28
	u8_t next, next_hdr, length;
	u8_t first_option;
	u16_t offset, total_len = 0;
	u8_t ext_bitmap;

	if (real_len != pkt_len) {
   21790:	4293      	cmp	r3, r2
   21792:	d007      	beq.n	217a4 <net_ipv6_process_pkt+0x38>
	net_stats.ipv6.drop++;
   21794:	4abd      	ldr	r2, [pc, #756]	; (21a8c <net_ipv6_process_pkt+0x320>)
   21796:	6b13      	ldr	r3, [r2, #48]	; 0x30
   21798:	3301      	adds	r3, #1
   2179a:	6313      	str	r3, [r2, #48]	; 0x30
		return NET_DROP;
#endif
	}

drop:
	return NET_DROP;
   2179c:	2002      	movs	r0, #2

	NET_DBG("Unknown next header type");
	net_stats_update_ip_errors_protoerr();

	return NET_DROP;
}
   2179e:	b009      	add	sp, #36	; 0x24
   217a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return addr->s6_addr[0] == 0xFF;
   217a4:	7a3b      	ldrb	r3, [r7, #8]
	if (net_is_ipv6_addr_mcast(&hdr->src)) {
   217a6:	2bff      	cmp	r3, #255	; 0xff
   217a8:	d105      	bne.n	217b6 <net_ipv6_process_pkt+0x4a>
   217aa:	4ab8      	ldr	r2, [pc, #736]	; (21a8c <net_ipv6_process_pkt+0x320>)
   217ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
   217ae:	3301      	adds	r3, #1
   217b0:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   217b2:	2002      	movs	r0, #2
   217b4:	e7f3      	b.n	2179e <net_ipv6_process_pkt+0x32>
   217b6:	4605      	mov	r5, r0
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   217b8:	f107 0818 	add.w	r8, r7, #24
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   217bc:	2100      	movs	r1, #0
   217be:	4640      	mov	r0, r8
   217c0:	f7f9 fd7c 	bl	1b2bc <net_if_ipv6_addr_lookup>
   217c4:	2800      	cmp	r0, #0
   217c6:	d06f      	beq.n	218a8 <net_ipv6_process_pkt+0x13c>
	net_pkt_set_next_hdr(pkt, &hdr->nexthdr);
   217c8:	1dbb      	adds	r3, r7, #6
	pkt->next_hdr = hdr;
   217ca:	61eb      	str	r3, [r5, #28]
	pkt->ipv6_ext_len = len;
   217cc:	2300      	movs	r3, #0
   217ce:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	pkt->ip_hdr_len = len;
   217d2:	2328      	movs	r3, #40	; 0x28
   217d4:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	next = *(net_pkt_next_hdr(pkt));
   217d8:	f897 9006 	ldrb.w	r9, [r7, #6]
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   217dc:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   217e0:	f000 80b0 	beq.w	21944 <net_ipv6_process_pkt+0x1d8>
   217e4:	f1b9 0f11 	cmp.w	r9, #17
   217e8:	f000 80ae 	beq.w	21948 <net_ipv6_process_pkt+0x1dc>
   217ec:	f1b9 0f06 	cmp.w	r9, #6
   217f0:	f000 80a6 	beq.w	21940 <net_ipv6_process_pkt+0x1d4>
   217f4:	2300      	movs	r3, #0
	if (is_upper_layer_protocol_header(next)) {
   217f6:	2b00      	cmp	r3, #0
   217f8:	f040 8166 	bne.w	21ac8 <net_ipv6_process_pkt+0x35c>
	frag = pkt->frags;
   217fc:	f8d5 a008 	ldr.w	sl, [r5, #8]
	offset = sizeof(struct net_ipv6_hdr);
   21800:	2328      	movs	r3, #40	; 0x28
   21802:	f8ad 301c 	strh.w	r3, [sp, #28]
	next = hdr->nexthdr;
   21806:	464f      	mov	r7, r9
	ext_bitmap = 0;
   21808:	2300      	movs	r3, #0
   2180a:	9303      	str	r3, [sp, #12]
	u16_t offset, total_len = 0;
   2180c:	9302      	str	r3, [sp, #8]
   2180e:	46a3      	mov	fp, r4
   21810:	4654      	mov	r4, sl
	while (frag) {
   21812:	2c00      	cmp	r4, #0
   21814:	f000 8156 	beq.w	21ac4 <net_ipv6_process_pkt+0x358>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   21818:	2f3a      	cmp	r7, #58	; 0x3a
   2181a:	f000 8099 	beq.w	21950 <net_ipv6_process_pkt+0x1e4>
   2181e:	2f11      	cmp	r7, #17
   21820:	f000 8098 	beq.w	21954 <net_ipv6_process_pkt+0x1e8>
   21824:	2f06      	cmp	r7, #6
   21826:	f000 8091 	beq.w	2194c <net_ipv6_process_pkt+0x1e0>
   2182a:	2300      	movs	r3, #0
		if (is_upper_layer_protocol_header(next)) {
   2182c:	2b00      	cmp	r3, #0
   2182e:	f040 8093 	bne.w	21958 <net_ipv6_process_pkt+0x1ec>
		start_of_ext = offset;
   21832:	f10d 0820 	add.w	r8, sp, #32
   21836:	f838 1d04 	ldrh.w	r1, [r8, #-4]!
	return net_frag_read(frag, offset, pos, 1, value);
   2183a:	f10d 031f 	add.w	r3, sp, #31
   2183e:	9300      	str	r3, [sp, #0]
   21840:	2301      	movs	r3, #1
   21842:	4642      	mov	r2, r8
   21844:	4620      	mov	r0, r4
   21846:	f7fc f86a 	bl	1d91e <net_frag_read>
		frag = net_frag_read_u8(frag, offset, &offset, &length);
   2184a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   2184e:	f10d 031e 	add.w	r3, sp, #30
   21852:	9300      	str	r3, [sp, #0]
   21854:	2301      	movs	r3, #1
   21856:	4642      	mov	r2, r8
   21858:	f7fc f861 	bl	1d91e <net_frag_read>
		if (!frag && offset == 0xffff) {
   2185c:	4604      	mov	r4, r0
   2185e:	2800      	cmp	r0, #0
   21860:	f000 8081 	beq.w	21966 <net_ipv6_process_pkt+0x1fa>
		length = length * 8 + 8;
   21864:	f89d 801e 	ldrb.w	r8, [sp, #30]
   21868:	f108 0801 	add.w	r8, r8, #1
   2186c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   21870:	fa5f f888 	uxtb.w	r8, r8
   21874:	f88d 801e 	strb.w	r8, [sp, #30]
		total_len += length;
   21878:	fa1f f888 	uxth.w	r8, r8
   2187c:	9b02      	ldr	r3, [sp, #8]
   2187e:	4443      	add	r3, r8
   21880:	b29b      	uxth	r3, r3
   21882:	9302      	str	r3, [sp, #8]
		switch (next) {
   21884:	2f00      	cmp	r7, #0
   21886:	d077      	beq.n	21978 <net_ipv6_process_pkt+0x20c>
   21888:	2f3b      	cmp	r7, #59	; 0x3b
   2188a:	d073      	beq.n	21974 <net_ipv6_process_pkt+0x208>
			      offset - 1);
   2188c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   21890:	3b01      	subs	r3, #1
   21892:	2201      	movs	r2, #1
   21894:	2104      	movs	r1, #4
   21896:	4628      	mov	r0, r5
   21898:	f7fd fa88 	bl	1edac <net_icmpv6_send_error>
	net_stats.ip_errors.protoerr++;
   2189c:	4a7b      	ldr	r2, [pc, #492]	; (21a8c <net_ipv6_process_pkt+0x320>)
   2189e:	6a13      	ldr	r3, [r2, #32]
   218a0:	3301      	adds	r3, #1
   218a2:	6213      	str	r3, [r2, #32]
	return NET_DROP;
   218a4:	2002      	movs	r0, #2
   218a6:	e77a      	b.n	2179e <net_ipv6_process_pkt+0x32>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   218a8:	2100      	movs	r1, #0
   218aa:	4640      	mov	r0, r8
   218ac:	f7f9 ff50 	bl	1b750 <net_if_ipv6_maddr_lookup>
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   218b0:	2800      	cmp	r0, #0
   218b2:	d189      	bne.n	217c8 <net_ipv6_process_pkt+0x5c>
	return addr->s6_addr[0] == 0xFF;
   218b4:	7e3b      	ldrb	r3, [r7, #24]
	    !net_is_my_ipv6_maddr(&hdr->dst) &&
   218b6:	2bff      	cmp	r3, #255	; 0xff
   218b8:	d086      	beq.n	217c8 <net_ipv6_process_pkt+0x5c>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   218ba:	f8d8 3000 	ldr.w	r3, [r8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   218be:	bb8b      	cbnz	r3, 21924 <net_ipv6_process_pkt+0x1b8>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   218c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   218c4:	bb83      	cbnz	r3, 21928 <net_ipv6_process_pkt+0x1bc>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   218c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   218ca:	bb7b      	cbnz	r3, 2192c <net_ipv6_process_pkt+0x1c0>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   218cc:	f8d8 200c 	ldr.w	r2, [r8, #12]
   218d0:	0a13      	lsrs	r3, r2, #8
   218d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   218d6:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   218da:	0211      	lsls	r1, r2, #8
   218dc:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   218e0:	430b      	orrs	r3, r1
   218e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   218e6:	2b01      	cmp	r3, #1
   218e8:	d022      	beq.n	21930 <net_ipv6_process_pkt+0x1c4>
   218ea:	2300      	movs	r3, #0
	    !net_is_ipv6_addr_mcast(&hdr->dst) &&
   218ec:	2b00      	cmp	r3, #0
   218ee:	f47f af6b 	bne.w	217c8 <net_ipv6_process_pkt+0x5c>
		if (net_route_get_info(net_pkt_iface(pkt), &hdr->dst, &route,
   218f2:	ab06      	add	r3, sp, #24
   218f4:	aa05      	add	r2, sp, #20
   218f6:	4641      	mov	r1, r8
   218f8:	6968      	ldr	r0, [r5, #20]
   218fa:	f001 f9f5 	bl	22ce8 <net_route_get_info>
   218fe:	b1c8      	cbz	r0, 21934 <net_ipv6_process_pkt+0x1c8>
			if (route) {
   21900:	9b05      	ldr	r3, [sp, #20]
   21902:	b13b      	cbz	r3, 21914 <net_ipv6_process_pkt+0x1a8>
				net_pkt_set_iface(pkt, route->iface);
   21904:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   21906:	616b      	str	r3, [r5, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   21908:	7d5a      	ldrb	r2, [r3, #21]
   2190a:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   2190e:	7d5b      	ldrb	r3, [r3, #21]
   21910:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
			ret = net_route_packet(pkt, nexthop);
   21914:	9906      	ldr	r1, [sp, #24]
   21916:	4628      	mov	r0, r5
   21918:	f001 fa0c 	bl	22d34 <net_route_packet>
			if (ret < 0) {
   2191c:	2800      	cmp	r0, #0
   2191e:	db09      	blt.n	21934 <net_ipv6_process_pkt+0x1c8>
				return NET_OK;
   21920:	2000      	movs	r0, #0
   21922:	e73c      	b.n	2179e <net_ipv6_process_pkt+0x32>
   21924:	2300      	movs	r3, #0
   21926:	e7e1      	b.n	218ec <net_ipv6_process_pkt+0x180>
   21928:	2300      	movs	r3, #0
   2192a:	e7df      	b.n	218ec <net_ipv6_process_pkt+0x180>
   2192c:	2300      	movs	r3, #0
   2192e:	e7dd      	b.n	218ec <net_ipv6_process_pkt+0x180>
   21930:	2301      	movs	r3, #1
   21932:	e7db      	b.n	218ec <net_ipv6_process_pkt+0x180>
	net_stats.ipv6.drop++;
   21934:	4a55      	ldr	r2, [pc, #340]	; (21a8c <net_ipv6_process_pkt+0x320>)
   21936:	6b13      	ldr	r3, [r2, #48]	; 0x30
   21938:	3301      	adds	r3, #1
   2193a:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   2193c:	2002      	movs	r0, #2
   2193e:	e72e      	b.n	2179e <net_ipv6_process_pkt+0x32>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   21940:	2301      	movs	r3, #1
   21942:	e758      	b.n	217f6 <net_ipv6_process_pkt+0x8a>
   21944:	2301      	movs	r3, #1
   21946:	e756      	b.n	217f6 <net_ipv6_process_pkt+0x8a>
   21948:	2301      	movs	r3, #1
   2194a:	e754      	b.n	217f6 <net_ipv6_process_pkt+0x8a>
   2194c:	2301      	movs	r3, #1
   2194e:	e76d      	b.n	2182c <net_ipv6_process_pkt+0xc0>
   21950:	2301      	movs	r3, #1
   21952:	e76b      	b.n	2182c <net_ipv6_process_pkt+0xc0>
   21954:	2301      	movs	r3, #1
   21956:	e769      	b.n	2182c <net_ipv6_process_pkt+0xc0>
			net_pkt_set_ipv6_ext_len(pkt, offset -
   21958:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2195c:	3b28      	subs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   2195e:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
   21962:	46b9      	mov	r9, r7
   21964:	e0b2      	b.n	21acc <net_ipv6_process_pkt+0x360>
		if (!frag && offset == 0xffff) {
   21966:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   2196a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2196e:	429a      	cmp	r2, r3
   21970:	f47f af78 	bne.w	21864 <net_ipv6_process_pkt+0xf8>
	return NET_DROP;
   21974:	2002      	movs	r0, #2
   21976:	e712      	b.n	2179e <net_ipv6_process_pkt+0x32>
			if (first_option != NET_IPV6_NEXTHDR_HBHO) {
   21978:	f1b9 0f00 	cmp.w	r9, #0
   2197c:	d186      	bne.n	2188c <net_ipv6_process_pkt+0x120>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   2197e:	9a03      	ldr	r2, [sp, #12]
   21980:	f012 0f01 	tst.w	r2, #1
   21984:	d182      	bne.n	2188c <net_ipv6_process_pkt+0x120>
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   21986:	f042 0301 	orr.w	r3, r2, #1
   2198a:	9303      	str	r3, [sp, #12]
			frag = handle_ext_hdr_options(pkt, frag, real_len,
   2198c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
	if (len > total_len) {
   21990:	4546      	cmp	r6, r8
   21992:	f2c0 8094 	blt.w	21abe <net_ipv6_process_pkt+0x352>
	return net_frag_read(frag, offset, pos, 1, value);
   21996:	f10d 0313 	add.w	r3, sp, #19
   2199a:	9300      	str	r3, [sp, #0]
   2199c:	2301      	movs	r3, #1
   2199e:	aa06      	add	r2, sp, #24
   219a0:	4620      	mov	r0, r4
   219a2:	f7fb ffbc 	bl	1d91e <net_frag_read>
	frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   219a6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   219aa:	ab05      	add	r3, sp, #20
   219ac:	9300      	str	r3, [sp, #0]
   219ae:	2301      	movs	r3, #1
   219b0:	aa06      	add	r2, sp, #24
   219b2:	f7fb ffb4 	bl	1d91e <net_frag_read>
	if (!frag && loc == 0xffff) {
   219b6:	4604      	mov	r4, r0
   219b8:	b108      	cbz	r0, 219be <net_ipv6_process_pkt+0x252>
   219ba:	2702      	movs	r7, #2
   219bc:	e027      	b.n	21a0e <net_ipv6_process_pkt+0x2a2>
   219be:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   219c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   219c6:	429a      	cmp	r2, r3
   219c8:	d068      	beq.n	21a9c <net_ipv6_process_pkt+0x330>
   219ca:	2702      	movs	r7, #2
   219cc:	e01f      	b.n	21a0e <net_ipv6_process_pkt+0x2a2>
			length++;
   219ce:	3701      	adds	r7, #1
   219d0:	b2bf      	uxth	r7, r7
			loc--;
   219d2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   219d6:	3b01      	subs	r3, #1
   219d8:	f8ad 3018 	strh.w	r3, [sp, #24]
		if (length >= len) {
   219dc:	45b8      	cmp	r8, r7
   219de:	d960      	bls.n	21aa2 <net_ipv6_process_pkt+0x336>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_type);
   219e0:	f10d 0a20 	add.w	sl, sp, #32
   219e4:	f83a 1d08 	ldrh.w	r1, [sl, #-8]!
   219e8:	f10d 0313 	add.w	r3, sp, #19
   219ec:	9300      	str	r3, [sp, #0]
   219ee:	2301      	movs	r3, #1
   219f0:	4652      	mov	r2, sl
   219f2:	4620      	mov	r0, r4
   219f4:	f7fb ff93 	bl	1d91e <net_frag_read>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   219f8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   219fc:	ab05      	add	r3, sp, #20
   219fe:	9300      	str	r3, [sp, #0]
   21a00:	2301      	movs	r3, #1
   21a02:	4652      	mov	r2, sl
   21a04:	f7fb ff8b 	bl	1d91e <net_frag_read>
		if (!frag && loc == 0xffff) {
   21a08:	4604      	mov	r4, r0
   21a0a:	2800      	cmp	r0, #0
   21a0c:	d040      	beq.n	21a90 <net_ipv6_process_pkt+0x324>
	while (frag && (length < len)) {
   21a0e:	2c00      	cmp	r4, #0
   21a10:	d047      	beq.n	21aa2 <net_ipv6_process_pkt+0x336>
   21a12:	45b8      	cmp	r8, r7
   21a14:	d945      	bls.n	21aa2 <net_ipv6_process_pkt+0x336>
		switch (opt_type) {
   21a16:	f89d 3013 	ldrb.w	r3, [sp, #19]
   21a1a:	2b00      	cmp	r3, #0
   21a1c:	d0d7      	beq.n	219ce <net_ipv6_process_pkt+0x262>
   21a1e:	2b01      	cmp	r3, #1
   21a20:	d009      	beq.n	21a36 <net_ipv6_process_pkt+0x2ca>
	switch (opt_type & 0xc0) {
   21a22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   21a26:	2b80      	cmp	r3, #128	; 0x80
   21a28:	d019      	beq.n	21a5e <net_ipv6_process_pkt+0x2f2>
   21a2a:	2bc0      	cmp	r3, #192	; 0xc0
   21a2c:	d012      	beq.n	21a54 <net_ipv6_process_pkt+0x2e8>
   21a2e:	2b40      	cmp	r3, #64	; 0x40
   21a30:	d00e      	beq.n	21a50 <net_ipv6_process_pkt+0x2e4>
	return pkt;
   21a32:	462b      	mov	r3, r5
   21a34:	e01a      	b.n	21a6c <net_ipv6_process_pkt+0x300>
			length += opt_len + 2;
   21a36:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21a3a:	441f      	add	r7, r3
   21a3c:	b2bf      	uxth	r7, r7
   21a3e:	3702      	adds	r7, #2
   21a40:	b2bf      	uxth	r7, r7
			loc += opt_len + 2;
   21a42:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21a46:	4413      	add	r3, r2
   21a48:	3302      	adds	r3, #2
   21a4a:	f8ad 3018 	strh.w	r3, [sp, #24]
   21a4e:	e7c5      	b.n	219dc <net_ipv6_process_pkt+0x270>
		return NULL;
   21a50:	2300      	movs	r3, #0
   21a52:	e00b      	b.n	21a6c <net_ipv6_process_pkt+0x300>
	return pkt->frags->data;
   21a54:	68ab      	ldr	r3, [r5, #8]
   21a56:	689b      	ldr	r3, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   21a58:	7e1b      	ldrb	r3, [r3, #24]
		if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   21a5a:	2bff      	cmp	r3, #255	; 0xff
   21a5c:	d013      	beq.n	21a86 <net_ipv6_process_pkt+0x31a>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   21a5e:	463b      	mov	r3, r7
   21a60:	2202      	movs	r2, #2
   21a62:	2104      	movs	r1, #4
   21a64:	4628      	mov	r0, r5
   21a66:	f7fd f9a1 	bl	1edac <net_icmpv6_send_error>
		return NULL;
   21a6a:	2300      	movs	r3, #0
			if (!check_unknown_option(pkt, opt_type, length)) {
   21a6c:	b1b3      	cbz	r3, 21a9c <net_ipv6_process_pkt+0x330>
			length += opt_len + 2;
   21a6e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21a72:	441f      	add	r7, r3
   21a74:	b2bf      	uxth	r7, r7
   21a76:	3702      	adds	r7, #2
   21a78:	b2bf      	uxth	r7, r7
			loc += opt_len;
   21a7a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21a7e:	4413      	add	r3, r2
   21a80:	f8ad 3018 	strh.w	r3, [sp, #24]
   21a84:	e7aa      	b.n	219dc <net_ipv6_process_pkt+0x270>
			return NULL;
   21a86:	2300      	movs	r3, #0
   21a88:	e7f0      	b.n	21a6c <net_ipv6_process_pkt+0x300>
   21a8a:	bf00      	nop
   21a8c:	20002b50 	.word	0x20002b50
		if (!frag && loc == 0xffff) {
   21a90:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21a98:	429a      	cmp	r2, r3
   21a9a:	d1b8      	bne.n	21a0e <net_ipv6_process_pkt+0x2a2>
	return NULL;
   21a9c:	465c      	mov	r4, fp
	*verdict = NET_DROP;
   21a9e:	2302      	movs	r3, #2
   21aa0:	e007      	b.n	21ab2 <net_ipv6_process_pkt+0x346>
	if (length != len) {
   21aa2:	45b8      	cmp	r8, r7
   21aa4:	d1fa      	bne.n	21a9c <net_ipv6_process_pkt+0x330>
	*pos += length;
   21aa6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   21aaa:	441f      	add	r7, r3
   21aac:	f8ad 701c 	strh.w	r7, [sp, #28]
	*verdict = NET_CONTINUE;
   21ab0:	2301      	movs	r3, #1
		if (verdict == NET_DROP) {
   21ab2:	2b02      	cmp	r3, #2
   21ab4:	f43f af5e 	beq.w	21974 <net_ipv6_process_pkt+0x208>
		next = next_hdr;
   21ab8:	f89d 701f 	ldrb.w	r7, [sp, #31]
   21abc:	e6a9      	b.n	21812 <net_ipv6_process_pkt+0xa6>
		return NULL;
   21abe:	465c      	mov	r4, fp
		*verdict = NET_DROP;
   21ac0:	2302      	movs	r3, #2
   21ac2:	e7f6      	b.n	21ab2 <net_ipv6_process_pkt+0x346>
   21ac4:	46b9      	mov	r9, r7
   21ac6:	e001      	b.n	21acc <net_ipv6_process_pkt+0x360>
	u16_t offset, total_len = 0;
   21ac8:	2300      	movs	r3, #0
   21aca:	9302      	str	r3, [sp, #8]
	if (total_len > 0) {
   21acc:	9b02      	ldr	r3, [sp, #8]
   21ace:	b10b      	cbz	r3, 21ad4 <net_ipv6_process_pkt+0x368>
	pkt->ipv6_ext_len = len;
   21ad0:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	switch (next) {
   21ad4:	f1b9 0f11 	cmp.w	r9, #17
   21ad8:	d011      	beq.n	21afe <net_ipv6_process_pkt+0x392>
   21ada:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   21ade:	d004      	beq.n	21aea <net_ipv6_process_pkt+0x37e>
   21ae0:	f1b9 0f06 	cmp.w	r9, #6
   21ae4:	d010      	beq.n	21b08 <net_ipv6_process_pkt+0x39c>
	return NET_DROP;
   21ae6:	2002      	movs	r0, #2
   21ae8:	e659      	b.n	2179e <net_ipv6_process_pkt+0x32>
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   21aea:	a906      	add	r1, sp, #24
   21aec:	4628      	mov	r0, r5
   21aee:	f7fc fe9c 	bl	1e82a <net_icmpv6_get_hdr>
	return net_icmpv6_input(pkt, icmp_hdr->type, icmp_hdr->code);
   21af2:	7842      	ldrb	r2, [r0, #1]
   21af4:	7801      	ldrb	r1, [r0, #0]
   21af6:	4628      	mov	r0, r5
   21af8:	f7fd fb62 	bl	1f1c0 <net_icmpv6_input>
		return process_icmpv6_pkt(pkt, hdr);
   21afc:	e64f      	b.n	2179e <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_UDP, pkt);
   21afe:	4629      	mov	r1, r5
   21b00:	2011      	movs	r0, #17
   21b02:	f003 fbd3 	bl	252ac <net_conn_input>
   21b06:	e64a      	b.n	2179e <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_TCP, pkt);
   21b08:	4629      	mov	r1, r5
   21b0a:	2006      	movs	r0, #6
   21b0c:	f003 fbce 	bl	252ac <net_conn_input>
   21b10:	e645      	b.n	2179e <net_ipv6_process_pkt+0x32>
   21b12:	bf00      	nop

00021b14 <net_ipv6_init>:

void net_ipv6_init(void)
{
   21b14:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   21b16:	4806      	ldr	r0, [pc, #24]	; (21b30 <net_ipv6_init+0x1c>)
   21b18:	f7fc fe0a 	bl	1e730 <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   21b1c:	4805      	ldr	r0, [pc, #20]	; (21b34 <net_ipv6_init+0x20>)
   21b1e:	f7fc fe07 	bl	1e730 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   21b22:	4805      	ldr	r0, [pc, #20]	; (21b38 <net_ipv6_init+0x24>)
   21b24:	f7fc fe04 	bl	1e730 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_MLD)
	net_icmpv6_register_handler(&mld_query_input_handler);
   21b28:	4804      	ldr	r0, [pc, #16]	; (21b3c <net_ipv6_init+0x28>)
   21b2a:	f7fc fe01 	bl	1e730 <net_icmpv6_register_handler>
   21b2e:	bd08      	pop	{r3, pc}
   21b30:	2000c350 	.word	0x2000c350
   21b34:	2000bf38 	.word	0x2000bf38
   21b38:	2000c35c 	.word	0x2000c35c
   21b3c:	2000bf2c 	.word	0x2000bf2c

00021b40 <uncompress_IPHC_header>:
	}
}
#endif

static inline bool uncompress_IPHC_header(struct net_pkt *pkt)
{
   21b40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(CONFIG_NET_6LO_CONTEXT)
	struct net_6lo_context *src = NULL;
	struct net_6lo_context *dst = NULL;
#endif

	if (CIPHC[1] & NET_6LO_IPHC_CID_1) {
   21b44:	6883      	ldr	r3, [r0, #8]
   21b46:	689b      	ldr	r3, [r3, #8]
   21b48:	f993 3001 	ldrsb.w	r3, [r3, #1]
   21b4c:	2b00      	cmp	r3, #0
   21b4e:	f2c0 831e 	blt.w	2218e <uncompress_IPHC_header+0x64e>
   21b52:	4604      	mov	r4, r0
		NET_WARN("Context based uncompression not enabled");
		return false;
#endif
	}

	frag = net_pkt_get_frag(pkt, NET_6LO_RX_PKT_TIMEOUT);
   21b54:	2164      	movs	r1, #100	; 0x64
   21b56:	f7fb fd11 	bl	1d57c <net_pkt_get_frag>
	if (!frag) {
   21b5a:	4607      	mov	r7, r0
   21b5c:	2800      	cmp	r0, #0
   21b5e:	f000 8319 	beq.w	22194 <uncompress_IPHC_header+0x654>
		return false;
	}

	ipv6 = (struct net_ipv6_hdr *)(frag->data);
   21b62:	6886      	ldr	r6, [r0, #8]

	/* Version is always 6 */
	ipv6->vtc = 0x60;
   21b64:	2360      	movs	r3, #96	; 0x60
   21b66:	7033      	strb	r3, [r6, #0]
	pkt->ip_hdr_len = len;
   21b68:	2328      	movs	r3, #40	; 0x28
   21b6a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   21b6e:	68a3      	ldr	r3, [r4, #8]
   21b70:	689a      	ldr	r2, [r3, #8]
   21b72:	7813      	ldrb	r3, [r2, #0]
   21b74:	f003 0318 	and.w	r3, r3, #24
   21b78:	2b18      	cmp	r3, #24
   21b7a:	d863      	bhi.n	21c44 <uncompress_IPHC_header+0x104>
   21b7c:	e8df f003 	tbb	[pc, r3]
   21b80:	6262620d 	.word	0x6262620d
   21b84:	62626262 	.word	0x62626262
   21b88:	6262623c 	.word	0x6262623c
   21b8c:	62626262 	.word	0x62626262
   21b90:	6262624c 	.word	0x6262624c
   21b94:	62626262 	.word	0x62626262
   21b98:	5c          	.byte	0x5c
   21b99:	00          	.byte	0x00
		tcl = CIPHC[offset++];
   21b9a:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   21b9c:	0993      	lsrs	r3, r2, #6
   21b9e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   21ba2:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   21ba4:	7832      	ldrb	r2, [r6, #0]
   21ba6:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   21baa:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   21bac:	68a2      	ldr	r2, [r4, #8]
   21bae:	6892      	ldr	r2, [r2, #8]
   21bb0:	f992 2003 	ldrsb.w	r2, [r2, #3]
   21bb4:	f002 020f 	and.w	r2, r2, #15
   21bb8:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
   21bbc:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   21bbe:	68a3      	ldr	r3, [r4, #8]
   21bc0:	6899      	ldr	r1, [r3, #8]
   21bc2:	2202      	movs	r2, #2
   21bc4:	3104      	adds	r1, #4
   21bc6:	18b0      	adds	r0, r6, r2
   21bc8:	f7de fb7a 	bl	2c0 <memcpy>
		offset += 2;
   21bcc:	2506      	movs	r5, #6
	net_pkt_set_ip_hdr_len(pkt, NET_IPV6H_LEN);

	/* Uncompress Traffic class and Flow label */
	offset = uncompress_tfl(pkt, ipv6, offset);

	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   21bce:	68a3      	ldr	r3, [r4, #8]
   21bd0:	689b      	ldr	r3, [r3, #8]
   21bd2:	781a      	ldrb	r2, [r3, #0]
   21bd4:	f012 0f04 	tst.w	r2, #4
   21bd8:	d103      	bne.n	21be2 <uncompress_IPHC_header+0xa2>
		ipv6->nexthdr = CIPHC[offset];
   21bda:	5d5b      	ldrb	r3, [r3, r5]
   21bdc:	71b3      	strb	r3, [r6, #6]
		offset++;
   21bde:	3501      	adds	r5, #1
   21be0:	b2ed      	uxtb	r5, r5
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   21be2:	68a3      	ldr	r3, [r4, #8]
   21be4:	689a      	ldr	r2, [r3, #8]
   21be6:	7813      	ldrb	r3, [r2, #0]
   21be8:	f003 0303 	and.w	r3, r3, #3
   21bec:	2b03      	cmp	r3, #3
   21bee:	d82f      	bhi.n	21c50 <uncompress_IPHC_header+0x110>
   21bf0:	e8df f003 	tbb	[pc, r3]
   21bf4:	4f4c492a 	.word	0x4f4c492a
		tcl = ((CIPHC[offset] & 0xF0) >> 6);
   21bf8:	7893      	ldrb	r3, [r2, #2]
   21bfa:	099a      	lsrs	r2, r3, #6
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   21bfc:	f003 030f 	and.w	r3, r3, #15
   21c00:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   21c04:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   21c06:	68a3      	ldr	r3, [r4, #8]
   21c08:	6899      	ldr	r1, [r3, #8]
   21c0a:	2202      	movs	r2, #2
   21c0c:	3103      	adds	r1, #3
   21c0e:	18b0      	adds	r0, r6, r2
   21c10:	f7de fb56 	bl	2c0 <memcpy>
		offset += 2;
   21c14:	2505      	movs	r5, #5
   21c16:	e7da      	b.n	21bce <uncompress_IPHC_header+0x8e>
		tcl = CIPHC[offset];
   21c18:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   21c1a:	0993      	lsrs	r3, r2, #6
   21c1c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   21c20:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   21c22:	7832      	ldrb	r2, [r6, #0]
   21c24:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   21c28:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = (tcl & 0x0F) << 4;
   21c2a:	011b      	lsls	r3, r3, #4
   21c2c:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   21c2e:	2300      	movs	r3, #0
   21c30:	70b3      	strb	r3, [r6, #2]
   21c32:	70f3      	strb	r3, [r6, #3]
		offset++;
   21c34:	2503      	movs	r5, #3
   21c36:	e7ca      	b.n	21bce <uncompress_IPHC_header+0x8e>
		ipv6->tcflow = 0;
   21c38:	2300      	movs	r3, #0
   21c3a:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   21c3c:	70b3      	strb	r3, [r6, #2]
   21c3e:	70f3      	strb	r3, [r6, #3]
   21c40:	2502      	movs	r5, #2
   21c42:	e7c4      	b.n	21bce <uncompress_IPHC_header+0x8e>
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   21c44:	2502      	movs	r5, #2
   21c46:	e7c2      	b.n	21bce <uncompress_IPHC_header+0x8e>
		ipv6->hop_limit = CIPHC[offset++];
   21c48:	1c6b      	adds	r3, r5, #1
   21c4a:	5d52      	ldrb	r2, [r2, r5]
   21c4c:	71f2      	strb	r2, [r6, #7]
   21c4e:	b2dd      	uxtb	r5, r3

	/* Uncompress Hoplimit */
	offset = uncompress_hoplimit(pkt, ipv6, offset);

	/* First set to zero and copy relevant bits */
	memset(&ipv6->src.s6_addr[0], 0, 16);
   21c50:	2210      	movs	r2, #16
   21c52:	2100      	movs	r1, #0
   21c54:	f106 0008 	add.w	r0, r6, #8
   21c58:	f008 fa92 	bl	2a180 <memset>
	memset(&ipv6->dst.s6_addr[0], 0, 16);
   21c5c:	2210      	movs	r2, #16
   21c5e:	2100      	movs	r1, #0
   21c60:	f106 0018 	add.w	r0, r6, #24
   21c64:	f008 fa8c 	bl	2a180 <memset>

	/* Uncompress Source Address */
	if (CIPHC[1] & NET_6LO_IPHC_SAC_1) {
   21c68:	68a3      	ldr	r3, [r4, #8]
   21c6a:	689b      	ldr	r3, [r3, #8]
   21c6c:	785b      	ldrb	r3, [r3, #1]
   21c6e:	f013 0f40 	tst.w	r3, #64	; 0x40
   21c72:	d011      	beq.n	21c98 <uncompress_IPHC_header+0x158>
		NET_DBG("SAC_1");

		if ((CIPHC[1] & NET_6LO_IPHC_SAM_11) == NET_6LO_IPHC_SAM_00) {
   21c74:	f013 0f30 	tst.w	r3, #48	; 0x30
   21c78:	d05e      	beq.n	21d38 <uncompress_IPHC_header+0x1f8>
	}

	return true;

fail:
	net_pkt_frag_unref(frag);
   21c7a:	4638      	mov	r0, r7
   21c7c:	f7fb fccb 	bl	1d616 <net_pkt_frag_unref>
	return false;
   21c80:	2000      	movs	r0, #0
   21c82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ipv6->hop_limit = 1;
   21c86:	2301      	movs	r3, #1
   21c88:	71f3      	strb	r3, [r6, #7]
   21c8a:	e7e1      	b.n	21c50 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 64;
   21c8c:	2340      	movs	r3, #64	; 0x40
   21c8e:	71f3      	strb	r3, [r6, #7]
   21c90:	e7de      	b.n	21c50 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 255;
   21c92:	23ff      	movs	r3, #255	; 0xff
   21c94:	71f3      	strb	r3, [r6, #7]
   21c96:	e7db      	b.n	21c50 <uncompress_IPHC_header+0x110>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   21c98:	68a3      	ldr	r3, [r4, #8]
   21c9a:	6899      	ldr	r1, [r3, #8]
   21c9c:	784b      	ldrb	r3, [r1, #1]
   21c9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
   21ca2:	2b10      	cmp	r3, #16
   21ca4:	d059      	beq.n	21d5a <uncompress_IPHC_header+0x21a>
   21ca6:	d93e      	bls.n	21d26 <uncompress_IPHC_header+0x1e6>
   21ca8:	2b20      	cmp	r3, #32
   21caa:	d065      	beq.n	21d78 <uncompress_IPHC_header+0x238>
   21cac:	2b30      	cmp	r3, #48	; 0x30
   21cae:	d143      	bne.n	21d38 <uncompress_IPHC_header+0x1f8>
		net_ipv6_addr_create_iid(&ipv6->src, net_pkt_ll_src(pkt));
   21cb0:	f106 0808 	add.w	r8, r6, #8
	return &pkt->lladdr_src;
   21cb4:	f104 0920 	add.w	r9, r4, #32
	addr->s6_addr[0] = 0xfe;
   21cb8:	23fe      	movs	r3, #254	; 0xfe
   21cba:	7233      	strb	r3, [r6, #8]
	addr->s6_addr[1] = 0x80;
   21cbc:	2380      	movs	r3, #128	; 0x80
   21cbe:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   21cc2:	2300      	movs	r3, #0
   21cc4:	f888 3002 	strb.w	r3, [r8, #2]
   21cc8:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   21ccc:	f888 3004 	strb.w	r3, [r8, #4]
   21cd0:	f888 3005 	strb.w	r3, [r8, #5]
   21cd4:	f888 3006 	strb.w	r3, [r8, #6]
   21cd8:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   21cdc:	f899 2004 	ldrb.w	r2, [r9, #4]
   21ce0:	2a06      	cmp	r2, #6
   21ce2:	d05b      	beq.n	21d9c <uncompress_IPHC_header+0x25c>
   21ce4:	2a08      	cmp	r2, #8
   21ce6:	f000 8082 	beq.w	21dee <uncompress_IPHC_header+0x2ae>
   21cea:	2a02      	cmp	r2, #2
   21cec:	d124      	bne.n	21d38 <uncompress_IPHC_header+0x1f8>
		if (lladdr->type == NET_LINK_IEEE802154) {
   21cee:	f899 3005 	ldrb.w	r3, [r9, #5]
   21cf2:	2b01      	cmp	r3, #1
   21cf4:	d120      	bne.n	21d38 <uncompress_IPHC_header+0x1f8>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   21cf6:	2300      	movs	r3, #0
   21cf8:	f888 3008 	strb.w	r3, [r8, #8]
   21cfc:	f888 3009 	strb.w	r3, [r8, #9]
   21d00:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   21d04:	22ff      	movs	r2, #255	; 0xff
   21d06:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   21d0a:	22fe      	movs	r2, #254	; 0xfe
   21d0c:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   21d10:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   21d14:	6a23      	ldr	r3, [r4, #32]
   21d16:	781b      	ldrb	r3, [r3, #0]
   21d18:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   21d1c:	6a23      	ldr	r3, [r4, #32]
   21d1e:	785b      	ldrb	r3, [r3, #1]
   21d20:	f888 300f 	strb.w	r3, [r8, #15]
   21d24:	e008      	b.n	21d38 <uncompress_IPHC_header+0x1f8>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   21d26:	b93b      	cbnz	r3, 21d38 <uncompress_IPHC_header+0x1f8>
		memcpy(ipv6->src.s6_addr, &CIPHC[offset], 16);
   21d28:	2210      	movs	r2, #16
   21d2a:	4429      	add	r1, r5
   21d2c:	f106 0008 	add.w	r0, r6, #8
   21d30:	f7de fac6 	bl	2c0 <memcpy>
		offset += 16;
   21d34:	3510      	adds	r5, #16
   21d36:	b2ed      	uxtb	r5, r5
	if (CIPHC[1] & NET_6LO_IPHC_M_1) {
   21d38:	68a3      	ldr	r3, [r4, #8]
   21d3a:	6899      	ldr	r1, [r3, #8]
   21d3c:	784b      	ldrb	r3, [r1, #1]
   21d3e:	f013 0f08 	tst.w	r3, #8
   21d42:	d160      	bne.n	21e06 <uncompress_IPHC_header+0x2c6>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   21d44:	f003 0303 	and.w	r3, r3, #3
   21d48:	2b03      	cmp	r3, #3
   21d4a:	f200 80ad 	bhi.w	21ea8 <uncompress_IPHC_header+0x368>
   21d4e:	e8df f013 	tbh	[pc, r3, lsl #1]
   21d52:	00a3      	.short	0x00a3
   21d54:	00e500d6 	.word	0x00e500d6
   21d58:	00f9      	.short	0x00f9
		ipv6->src.s6_addr[0] = 0xFE;
   21d5a:	23fe      	movs	r3, #254	; 0xfe
   21d5c:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   21d5e:	2380      	movs	r3, #128	; 0x80
   21d60:	7273      	strb	r3, [r6, #9]
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   21d62:	68a3      	ldr	r3, [r4, #8]
   21d64:	6899      	ldr	r1, [r3, #8]
   21d66:	2208      	movs	r2, #8
   21d68:	4429      	add	r1, r5
   21d6a:	f106 0010 	add.w	r0, r6, #16
   21d6e:	f7de faa7 	bl	2c0 <memcpy>
		offset += 8;
   21d72:	3508      	adds	r5, #8
   21d74:	b2ed      	uxtb	r5, r5
   21d76:	e7df      	b.n	21d38 <uncompress_IPHC_header+0x1f8>
		ipv6->src.s6_addr[0] = 0xFE;
   21d78:	23fe      	movs	r3, #254	; 0xfe
   21d7a:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   21d7c:	2280      	movs	r2, #128	; 0x80
   21d7e:	7272      	strb	r2, [r6, #9]
		ipv6->src.s6_addr[11] = 0xFF;
   21d80:	22ff      	movs	r2, #255	; 0xff
   21d82:	74f2      	strb	r2, [r6, #19]
		ipv6->src.s6_addr[12] = 0xFE;
   21d84:	7533      	strb	r3, [r6, #20]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   21d86:	68a3      	ldr	r3, [r4, #8]
   21d88:	6899      	ldr	r1, [r3, #8]
   21d8a:	2202      	movs	r2, #2
   21d8c:	4429      	add	r1, r5
   21d8e:	f106 0016 	add.w	r0, r6, #22
   21d92:	f7de fa95 	bl	2c0 <memcpy>
		offset += 2;
   21d96:	3502      	adds	r5, #2
   21d98:	b2ed      	uxtb	r5, r5
   21d9a:	e7cd      	b.n	21d38 <uncompress_IPHC_header+0x1f8>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   21d9c:	2203      	movs	r2, #3
   21d9e:	6a21      	ldr	r1, [r4, #32]
   21da0:	f108 0008 	add.w	r0, r8, #8
   21da4:	f7de fa8c 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   21da8:	23ff      	movs	r3, #255	; 0xff
   21daa:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   21dae:	23fe      	movs	r3, #254	; 0xfe
   21db0:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   21db4:	6a21      	ldr	r1, [r4, #32]
   21db6:	2203      	movs	r2, #3
   21db8:	4411      	add	r1, r2
   21dba:	f108 000d 	add.w	r0, r8, #13
   21dbe:	f7de fa7f 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   21dc2:	f899 3005 	ldrb.w	r3, [r9, #5]
   21dc6:	2b02      	cmp	r3, #2
   21dc8:	d00a      	beq.n	21de0 <uncompress_IPHC_header+0x2a0>
		if (lladdr->type == NET_LINK_ETHERNET) {
   21dca:	f899 3005 	ldrb.w	r3, [r9, #5]
   21dce:	2b03      	cmp	r3, #3
   21dd0:	d1b2      	bne.n	21d38 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   21dd2:	f898 3008 	ldrb.w	r3, [r8, #8]
   21dd6:	f083 0302 	eor.w	r3, r3, #2
   21dda:	f888 3008 	strb.w	r3, [r8, #8]
   21dde:	e7ab      	b.n	21d38 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   21de0:	f898 3008 	ldrb.w	r3, [r8, #8]
   21de4:	f083 0302 	eor.w	r3, r3, #2
   21de8:	f888 3008 	strb.w	r3, [r8, #8]
   21dec:	e7ed      	b.n	21dca <uncompress_IPHC_header+0x28a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   21dee:	6a21      	ldr	r1, [r4, #32]
   21df0:	f108 0008 	add.w	r0, r8, #8
   21df4:	f7de fa64 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   21df8:	f898 3008 	ldrb.w	r3, [r8, #8]
   21dfc:	f083 0302 	eor.w	r3, r3, #2
   21e00:	f888 3008 	strb.w	r3, [r8, #8]
   21e04:	e798      	b.n	21d38 <uncompress_IPHC_header+0x1f8>
	if (CIPHC[1] & NET_6LO_IPHC_DAC_1) {
   21e06:	784b      	ldrb	r3, [r1, #1]
   21e08:	f013 0f04 	tst.w	r3, #4
   21e0c:	d142      	bne.n	21e94 <uncompress_IPHC_header+0x354>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   21e0e:	f003 0303 	and.w	r3, r3, #3
   21e12:	2b03      	cmp	r3, #3
   21e14:	d848      	bhi.n	21ea8 <uncompress_IPHC_header+0x368>
   21e16:	e8df f003 	tbb	[pc, r3]
   21e1a:	0b02      	.short	0x0b02
   21e1c:	311e      	.short	0x311e
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   21e1e:	2210      	movs	r2, #16
   21e20:	4429      	add	r1, r5
   21e22:	f106 0018 	add.w	r0, r6, #24
   21e26:	f7de fa4b 	bl	2c0 <memcpy>
		offset += 16;
   21e2a:	3510      	adds	r5, #16
   21e2c:	b2ed      	uxtb	r5, r5
   21e2e:	e03b      	b.n	21ea8 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   21e30:	23ff      	movs	r3, #255	; 0xff
   21e32:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   21e34:	68a3      	ldr	r3, [r4, #8]
   21e36:	689b      	ldr	r3, [r3, #8]
   21e38:	1c69      	adds	r1, r5, #1
   21e3a:	5d5b      	ldrb	r3, [r3, r5]
   21e3c:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[11], &CIPHC[offset], 5);
   21e3e:	68a3      	ldr	r3, [r4, #8]
   21e40:	689b      	ldr	r3, [r3, #8]
   21e42:	2205      	movs	r2, #5
   21e44:	fa53 f181 	uxtab	r1, r3, r1
   21e48:	f106 0023 	add.w	r0, r6, #35	; 0x23
   21e4c:	f7de fa38 	bl	2c0 <memcpy>
		offset += 5;
   21e50:	3506      	adds	r5, #6
   21e52:	b2ed      	uxtb	r5, r5
   21e54:	e028      	b.n	21ea8 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   21e56:	23ff      	movs	r3, #255	; 0xff
   21e58:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   21e5a:	68a3      	ldr	r3, [r4, #8]
   21e5c:	689b      	ldr	r3, [r3, #8]
   21e5e:	1c69      	adds	r1, r5, #1
   21e60:	5d5b      	ldrb	r3, [r3, r5]
   21e62:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[13], &CIPHC[offset], 3);
   21e64:	68a3      	ldr	r3, [r4, #8]
   21e66:	689b      	ldr	r3, [r3, #8]
   21e68:	2203      	movs	r2, #3
   21e6a:	fa53 f181 	uxtab	r1, r3, r1
   21e6e:	f106 0025 	add.w	r0, r6, #37	; 0x25
   21e72:	f7de fa25 	bl	2c0 <memcpy>
		offset += 3;
   21e76:	3504      	adds	r5, #4
   21e78:	b2ed      	uxtb	r5, r5
   21e7a:	e015      	b.n	21ea8 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   21e7c:	23ff      	movs	r3, #255	; 0xff
   21e7e:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x02;
   21e80:	2302      	movs	r3, #2
   21e82:	7673      	strb	r3, [r6, #25]
		ipv6->dst.s6_addr[15] = CIPHC[offset++];
   21e84:	68a3      	ldr	r3, [r4, #8]
   21e86:	689a      	ldr	r2, [r3, #8]
   21e88:	1c6b      	adds	r3, r5, #1
   21e8a:	5d52      	ldrb	r2, [r2, r5]
   21e8c:	f886 2027 	strb.w	r2, [r6, #39]	; 0x27
   21e90:	b2dd      	uxtb	r5, r3
   21e92:	e009      	b.n	21ea8 <uncompress_IPHC_header+0x368>
		return 0;
   21e94:	2500      	movs	r5, #0
   21e96:	e007      	b.n	21ea8 <uncompress_IPHC_header+0x368>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   21e98:	2210      	movs	r2, #16
   21e9a:	4429      	add	r1, r5
   21e9c:	f106 0018 	add.w	r0, r6, #24
   21ea0:	f7de fa0e 	bl	2c0 <memcpy>
		offset += 16;
   21ea4:	3510      	adds	r5, #16
   21ea6:	b2ed      	uxtb	r5, r5
	net_buf_add(frag, NET_IPV6H_LEN);
   21ea8:	f107 0a08 	add.w	sl, r7, #8
   21eac:	2128      	movs	r1, #40	; 0x28
   21eae:	4650      	mov	r0, sl
   21eb0:	f7f8 fe94 	bl	1abdc <net_buf_simple_add>
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   21eb4:	68a3      	ldr	r3, [r4, #8]
   21eb6:	689b      	ldr	r3, [r3, #8]
   21eb8:	781a      	ldrb	r2, [r3, #0]
   21eba:	f012 0f04 	tst.w	r2, #4
   21ebe:	f000 8114 	beq.w	220ea <uncompress_IPHC_header+0x5aa>
	if ((CIPHC[offset] & 0xF0) != NET_6LO_NHC_UDP_BARE) {
   21ec2:	5d5b      	ldrb	r3, [r3, r5]
   21ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   21ec8:	2bf0      	cmp	r3, #240	; 0xf0
   21eca:	f47f aed6 	bne.w	21c7a <uncompress_IPHC_header+0x13a>
	ipv6->nexthdr = IPPROTO_UDP;
   21ece:	2311      	movs	r3, #17
   21ed0:	71b3      	strb	r3, [r6, #6]
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   21ed2:	f8d7 b008 	ldr.w	fp, [r7, #8]
   21ed6:	f10b 0928 	add.w	r9, fp, #40	; 0x28
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   21eda:	68a3      	ldr	r3, [r4, #8]
   21edc:	6898      	ldr	r0, [r3, #8]
   21ede:	f810 8005 	ldrb.w	r8, [r0, r5]
   21ee2:	f008 0808 	and.w	r8, r8, #8
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   21ee6:	1c69      	adds	r1, r5, #1
   21ee8:	b2c9      	uxtb	r1, r1
   21eea:	5d43      	ldrb	r3, [r0, r5]
   21eec:	f003 0303 	and.w	r3, r3, #3
   21ef0:	2b03      	cmp	r3, #3
   21ef2:	f200 80ed 	bhi.w	220d0 <uncompress_IPHC_header+0x590>
   21ef6:	e8df f003 	tbb	[pc, r3]
   21efa:	ae95      	.short	0xae95
   21efc:	d3c0      	.short	0xd3c0
		ipv6->dst.s6_addr[0] = 0xFE;
   21efe:	23fe      	movs	r3, #254	; 0xfe
   21f00:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   21f02:	2380      	movs	r3, #128	; 0x80
   21f04:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[8], &CIPHC[offset], 8);
   21f06:	68a3      	ldr	r3, [r4, #8]
   21f08:	6899      	ldr	r1, [r3, #8]
   21f0a:	2208      	movs	r2, #8
   21f0c:	4429      	add	r1, r5
   21f0e:	f106 0020 	add.w	r0, r6, #32
   21f12:	f7de f9d5 	bl	2c0 <memcpy>
		offset += 8;
   21f16:	3508      	adds	r5, #8
   21f18:	b2ed      	uxtb	r5, r5
   21f1a:	e7c5      	b.n	21ea8 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFE;
   21f1c:	23fe      	movs	r3, #254	; 0xfe
   21f1e:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   21f20:	2280      	movs	r2, #128	; 0x80
   21f22:	7672      	strb	r2, [r6, #25]
		ipv6->dst.s6_addr[11] = 0xFF;
   21f24:	22ff      	movs	r2, #255	; 0xff
   21f26:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
		ipv6->dst.s6_addr[12] = 0xFE;
   21f2a:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   21f2e:	68a3      	ldr	r3, [r4, #8]
   21f30:	6899      	ldr	r1, [r3, #8]
   21f32:	2202      	movs	r2, #2
   21f34:	4429      	add	r1, r5
   21f36:	f106 0026 	add.w	r0, r6, #38	; 0x26
   21f3a:	f7de f9c1 	bl	2c0 <memcpy>
		offset += 2;
   21f3e:	3502      	adds	r5, #2
   21f40:	b2ed      	uxtb	r5, r5
   21f42:	e7b1      	b.n	21ea8 <uncompress_IPHC_header+0x368>
		net_ipv6_addr_create_iid(&ipv6->dst, net_pkt_ll_dst(pkt));
   21f44:	f106 0818 	add.w	r8, r6, #24
	return &pkt->lladdr_dst;
   21f48:	f104 0928 	add.w	r9, r4, #40	; 0x28
	addr->s6_addr[0] = 0xfe;
   21f4c:	23fe      	movs	r3, #254	; 0xfe
   21f4e:	7633      	strb	r3, [r6, #24]
	addr->s6_addr[1] = 0x80;
   21f50:	2380      	movs	r3, #128	; 0x80
   21f52:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   21f56:	2300      	movs	r3, #0
   21f58:	f888 3002 	strb.w	r3, [r8, #2]
   21f5c:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   21f60:	f888 3004 	strb.w	r3, [r8, #4]
   21f64:	f888 3005 	strb.w	r3, [r8, #5]
   21f68:	f888 3006 	strb.w	r3, [r8, #6]
   21f6c:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   21f70:	f899 2004 	ldrb.w	r2, [r9, #4]
   21f74:	2a06      	cmp	r2, #6
   21f76:	d01f      	beq.n	21fb8 <uncompress_IPHC_header+0x478>
   21f78:	2a08      	cmp	r2, #8
   21f7a:	d047      	beq.n	2200c <uncompress_IPHC_header+0x4cc>
   21f7c:	2a02      	cmp	r2, #2
   21f7e:	d193      	bne.n	21ea8 <uncompress_IPHC_header+0x368>
		if (lladdr->type == NET_LINK_IEEE802154) {
   21f80:	f899 3005 	ldrb.w	r3, [r9, #5]
   21f84:	2b01      	cmp	r3, #1
   21f86:	d18f      	bne.n	21ea8 <uncompress_IPHC_header+0x368>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   21f88:	2300      	movs	r3, #0
   21f8a:	f888 3008 	strb.w	r3, [r8, #8]
   21f8e:	f888 3009 	strb.w	r3, [r8, #9]
   21f92:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   21f96:	22ff      	movs	r2, #255	; 0xff
   21f98:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   21f9c:	22fe      	movs	r2, #254	; 0xfe
   21f9e:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   21fa2:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   21fa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21fa8:	781b      	ldrb	r3, [r3, #0]
   21faa:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   21fae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21fb0:	785b      	ldrb	r3, [r3, #1]
   21fb2:	f888 300f 	strb.w	r3, [r8, #15]
   21fb6:	e777      	b.n	21ea8 <uncompress_IPHC_header+0x368>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   21fb8:	2203      	movs	r2, #3
   21fba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21fbc:	f108 0008 	add.w	r0, r8, #8
   21fc0:	f7de f97e 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   21fc4:	23ff      	movs	r3, #255	; 0xff
   21fc6:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   21fca:	23fe      	movs	r3, #254	; 0xfe
   21fcc:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   21fd0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21fd2:	2203      	movs	r2, #3
   21fd4:	4411      	add	r1, r2
   21fd6:	f108 000d 	add.w	r0, r8, #13
   21fda:	f7de f971 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   21fde:	f899 3005 	ldrb.w	r3, [r9, #5]
   21fe2:	2b02      	cmp	r3, #2
   21fe4:	d00b      	beq.n	21ffe <uncompress_IPHC_header+0x4be>
		if (lladdr->type == NET_LINK_ETHERNET) {
   21fe6:	f899 3005 	ldrb.w	r3, [r9, #5]
   21fea:	2b03      	cmp	r3, #3
   21fec:	f47f af5c 	bne.w	21ea8 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   21ff0:	f898 3008 	ldrb.w	r3, [r8, #8]
   21ff4:	f083 0302 	eor.w	r3, r3, #2
   21ff8:	f888 3008 	strb.w	r3, [r8, #8]
   21ffc:	e754      	b.n	21ea8 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   21ffe:	f898 3008 	ldrb.w	r3, [r8, #8]
   22002:	f083 0302 	eor.w	r3, r3, #2
   22006:	f888 3008 	strb.w	r3, [r8, #8]
   2200a:	e7ec      	b.n	21fe6 <uncompress_IPHC_header+0x4a6>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   2200c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2200e:	f108 0008 	add.w	r0, r8, #8
   22012:	f7de f955 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   22016:	f898 3008 	ldrb.w	r3, [r8, #8]
   2201a:	f083 0302 	eor.w	r3, r3, #2
   2201e:	f888 3008 	strb.w	r3, [r8, #8]
   22022:	e741      	b.n	21ea8 <uncompress_IPHC_header+0x368>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   22024:	2202      	movs	r2, #2
   22026:	4401      	add	r1, r0
   22028:	4648      	mov	r0, r9
   2202a:	f7de f949 	bl	2c0 <memcpy>
		offset += 2;
   2202e:	1ce9      	adds	r1, r5, #3
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   22030:	68a3      	ldr	r3, [r4, #8]
   22032:	689b      	ldr	r3, [r3, #8]
   22034:	2202      	movs	r2, #2
   22036:	fa53 f181 	uxtab	r1, r3, r1
   2203a:	eb09 0002 	add.w	r0, r9, r2
   2203e:	f7de f93f 	bl	2c0 <memcpy>
		offset += 2;
   22042:	3505      	adds	r5, #5
   22044:	b2ed      	uxtb	r5, r5
	if (!chksum) {
   22046:	f1b8 0f00 	cmp.w	r8, #0
   2204a:	d043      	beq.n	220d4 <uncompress_IPHC_header+0x594>
	net_buf_add(frag, NET_UDPH_LEN);
   2204c:	2108      	movs	r1, #8
   2204e:	4650      	mov	r0, sl
   22050:	f7f8 fdc4 	bl	1abdc <net_buf_simple_add>
   22054:	e04c      	b.n	220f0 <uncompress_IPHC_header+0x5b0>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   22056:	2202      	movs	r2, #2
   22058:	4401      	add	r1, r0
   2205a:	4648      	mov	r0, r9
   2205c:	f7de f930 	bl	2c0 <memcpy>
		offset += 2;
   22060:	1ceb      	adds	r3, r5, #3
   22062:	b2db      	uxtb	r3, r3
		udp->dst_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   22064:	68a2      	ldr	r2, [r4, #8]
   22066:	6892      	ldr	r2, [r2, #8]
   22068:	5cd3      	ldrb	r3, [r2, r3]
   2206a:	021b      	lsls	r3, r3, #8
   2206c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   22070:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   22074:	3504      	adds	r5, #4
   22076:	b2ed      	uxtb	r5, r5
   22078:	e7e5      	b.n	22046 <uncompress_IPHC_header+0x506>
		udp->src_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   2207a:	5c43      	ldrb	r3, [r0, r1]
   2207c:	021b      	lsls	r3, r3, #8
   2207e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   22082:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		offset++;
   22086:	1ca9      	adds	r1, r5, #2
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   22088:	68a3      	ldr	r3, [r4, #8]
   2208a:	689b      	ldr	r3, [r3, #8]
   2208c:	2202      	movs	r2, #2
   2208e:	fa53 f181 	uxtab	r1, r3, r1
   22092:	eb09 0002 	add.w	r0, r9, r2
   22096:	f7de f913 	bl	2c0 <memcpy>
		offset += 2;
   2209a:	3504      	adds	r5, #4
   2209c:	b2ed      	uxtb	r5, r5
   2209e:	e7d2      	b.n	22046 <uncompress_IPHC_header+0x506>
		udp->src_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   220a0:	5c43      	ldrb	r3, [r0, r1]
   220a2:	091b      	lsrs	r3, r3, #4
   220a4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
   220a8:	021b      	lsls	r3, r3, #8
   220aa:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   220ae:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		udp->dst_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   220b2:	68a3      	ldr	r3, [r4, #8]
   220b4:	689b      	ldr	r3, [r3, #8]
   220b6:	5c5b      	ldrb	r3, [r3, r1]
   220b8:	021b      	lsls	r3, r3, #8
   220ba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   220be:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
   220c2:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   220c6:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   220ca:	3502      	adds	r5, #2
   220cc:	b2ed      	uxtb	r5, r5
   220ce:	e7ba      	b.n	22046 <uncompress_IPHC_header+0x506>
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   220d0:	460d      	mov	r5, r1
   220d2:	e7b8      	b.n	22046 <uncompress_IPHC_header+0x506>
		memcpy(&udp->chksum, &CIPHC[offset], 2);
   220d4:	68a3      	ldr	r3, [r4, #8]
   220d6:	6899      	ldr	r1, [r3, #8]
   220d8:	2202      	movs	r2, #2
   220da:	4429      	add	r1, r5
   220dc:	f10b 002e 	add.w	r0, fp, #46	; 0x2e
   220e0:	f7de f8ee 	bl	2c0 <memcpy>
		offset += 2;
   220e4:	3502      	adds	r5, #2
   220e6:	b2ed      	uxtb	r5, r5
   220e8:	e7b0      	b.n	2204c <uncompress_IPHC_header+0x50c>
	u8_t chksum = 0;
   220ea:	f04f 0800 	mov.w	r8, #0
	struct net_udp_hdr *udp = NULL;
   220ee:	46c1      	mov	r9, r8
	if (pkt->frags->len < offset) {
   220f0:	68a3      	ldr	r3, [r4, #8]
   220f2:	899a      	ldrh	r2, [r3, #12]
   220f4:	fa1f fa85 	uxth.w	sl, r5
   220f8:	4552      	cmp	r2, sl
   220fa:	f4ff adbe 	bcc.w	21c7a <uncompress_IPHC_header+0x13a>
	memmove(pkt->frags->data, pkt->frags->data + offset,
   220fe:	6898      	ldr	r0, [r3, #8]
   22100:	1b52      	subs	r2, r2, r5
   22102:	1941      	adds	r1, r0, r5
   22104:	f007 ffd8 	bl	2a0b8 <memmove>
	pkt->frags->len -= offset;
   22108:	68a2      	ldr	r2, [r4, #8]
   2210a:	8993      	ldrh	r3, [r2, #12]
   2210c:	eba3 0a0a 	sub.w	sl, r3, sl
   22110:	f8a2 a00c 	strh.w	sl, [r2, #12]
	return pkt->ll_reserve;
   22114:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	if (net_pkt_ll_reserve(pkt)) {
   22118:	b94a      	cbnz	r2, 2212e <uncompress_IPHC_header+0x5ee>
	net_pkt_frag_insert(pkt, frag);
   2211a:	4639      	mov	r1, r7
   2211c:	4620      	mov	r0, r4
   2211e:	f7fb fab7 	bl	1d690 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   22122:	4620      	mov	r0, r4
   22124:	f7fb fb6e 	bl	1d804 <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   22128:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   2212a:	2200      	movs	r2, #0
   2212c:	e00b      	b.n	22146 <uncompress_IPHC_header+0x606>
		memcpy(frag->data - net_pkt_ll_reserve(pkt),
   2212e:	68bb      	ldr	r3, [r7, #8]
   22130:	4250      	negs	r0, r2
	return pkt->frags->data;
   22132:	68a1      	ldr	r1, [r4, #8]
   22134:	6889      	ldr	r1, [r1, #8]
   22136:	4401      	add	r1, r0
   22138:	4418      	add	r0, r3
   2213a:	f7de f8c1 	bl	2c0 <memcpy>
   2213e:	e7ec      	b.n	2211a <uncompress_IPHC_header+0x5da>
		bytes += buf->len;
   22140:	8999      	ldrh	r1, [r3, #12]
   22142:	440a      	add	r2, r1
		buf = buf->frags;
   22144:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   22146:	2b00      	cmp	r3, #0
   22148:	d1fa      	bne.n	22140 <uncompress_IPHC_header+0x600>
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   2214a:	b293      	uxth	r3, r2
   2214c:	3b28      	subs	r3, #40	; 0x28
   2214e:	b29b      	uxth	r3, r3
	ipv6->len[0] = len >> 8;
   22150:	0a1a      	lsrs	r2, r3, #8
   22152:	7132      	strb	r2, [r6, #4]
	ipv6->len[1] = (u8_t)len;
   22154:	7173      	strb	r3, [r6, #5]
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   22156:	79b1      	ldrb	r1, [r6, #6]
   22158:	2911      	cmp	r1, #17
   2215a:	d002      	beq.n	22162 <uncompress_IPHC_header+0x622>
	return true;
   2215c:	2001      	movs	r0, #1
   2215e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   22162:	f1b9 0f00 	cmp.w	r9, #0
   22166:	d018      	beq.n	2219a <uncompress_IPHC_header+0x65a>
		udp->len = htons(len);
   22168:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   2216c:	f8a9 3004 	strh.w	r3, [r9, #4]
		if (chksum) {
   22170:	f1b8 0f00 	cmp.w	r8, #0
   22174:	d102      	bne.n	2217c <uncompress_IPHC_header+0x63c>
	return true;
   22176:	2001      	movs	r0, #1
}
   22178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_calc_chksum(pkt, IPPROTO_UDP);
   2217c:	4620      	mov	r0, r4
   2217e:	f7fc f8ba 	bl	1e2f6 <net_calc_chksum>
			udp->chksum = ~net_calc_chksum_udp(pkt);
   22182:	43c0      	mvns	r0, r0
   22184:	f8a9 0006 	strh.w	r0, [r9, #6]
	return true;
   22188:	2001      	movs	r0, #1
   2218a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   2218e:	2000      	movs	r0, #0
   22190:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   22194:	2000      	movs	r0, #0
   22196:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return true;
   2219a:	2001      	movs	r0, #1
   2219c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000221a0 <net_6lo_compress>:
	return true;
}

bool net_6lo_compress(struct net_pkt *pkt, bool iphc,
		      fragment_handler_t fragment)
{
   221a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221a4:	b085      	sub	sp, #20
   221a6:	4604      	mov	r4, r0
   221a8:	4617      	mov	r7, r2
	if (iphc) {
   221aa:	460d      	mov	r5, r1
   221ac:	b9f9      	cbnz	r1, 221ee <net_6lo_compress+0x4e>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   221ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   221b2:	f7fb f9e3 	bl	1d57c <net_pkt_get_frag>
	if (!frag) {
   221b6:	4606      	mov	r6, r0
   221b8:	2800      	cmp	r0, #0
   221ba:	f000 8438 	beq.w	22a2e <net_6lo_compress+0x88e>
	frag->data[0] = NET_6LO_DISPATCH_IPV6;
   221be:	f850 3f08 	ldr.w	r3, [r0, #8]!
   221c2:	2241      	movs	r2, #65	; 0x41
   221c4:	701a      	strb	r2, [r3, #0]
	net_buf_add(frag, 1);
   221c6:	2101      	movs	r1, #1
   221c8:	f7f8 fd08 	bl	1abdc <net_buf_simple_add>
	net_pkt_frag_insert(pkt, frag);
   221cc:	4631      	mov	r1, r6
   221ce:	4620      	mov	r0, r4
   221d0:	f7fb fa5e 	bl	1d690 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   221d4:	4620      	mov	r0, r4
   221d6:	f7fb fb15 	bl	1d804 <net_pkt_compact>
	if (fragment) {
   221da:	2f00      	cmp	r7, #0
   221dc:	f000 842a 	beq.w	22a34 <net_6lo_compress+0x894>
		return fragment(pkt, -1);
   221e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   221e4:	4620      	mov	r0, r4
   221e6:	47b8      	blx	r7
		return compress_IPHC_header(pkt, fragment);
	} else {
		return compress_ipv6_header(pkt, fragment);
	}
}
   221e8:	b005      	add	sp, #20
   221ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   221ee:	6883      	ldr	r3, [r0, #8]
   221f0:	689e      	ldr	r6, [r3, #8]
	if (pkt->frags->len < NET_IPV6H_LEN) {
   221f2:	899b      	ldrh	r3, [r3, #12]
   221f4:	2b27      	cmp	r3, #39	; 0x27
   221f6:	f240 8411 	bls.w	22a1c <net_6lo_compress+0x87c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   221fa:	79b2      	ldrb	r2, [r6, #6]
   221fc:	2a11      	cmp	r2, #17
   221fe:	d02f      	beq.n	22260 <net_6lo_compress+0xc0>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   22200:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22204:	4620      	mov	r0, r4
   22206:	f7fb f9b9 	bl	1d57c <net_pkt_get_frag>
	if (!frag) {
   2220a:	4680      	mov	r8, r0
   2220c:	2800      	cmp	r0, #0
   2220e:	f000 8408 	beq.w	22a22 <net_6lo_compress+0x882>
	IPHC[offset++] = NET_6LO_DISPATCH_IPHC;
   22212:	6883      	ldr	r3, [r0, #8]
   22214:	2260      	movs	r2, #96	; 0x60
   22216:	701a      	strb	r2, [r3, #0]
	IPHC[offset++] = 0;
   22218:	6883      	ldr	r3, [r0, #8]
   2221a:	2200      	movs	r2, #0
   2221c:	705a      	strb	r2, [r3, #1]
	tcl = ((ipv6->vtc & 0x0F) << 4) | ((ipv6->tcflow & 0xF0) >> 4);
   2221e:	7830      	ldrb	r0, [r6, #0]
   22220:	7871      	ldrb	r1, [r6, #1]
   22222:	090b      	lsrs	r3, r1, #4
   22224:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   22228:	b2db      	uxtb	r3, r3
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   2222a:	089a      	lsrs	r2, r3, #2
   2222c:	ea42 1383 	orr.w	r3, r2, r3, lsl #6
   22230:	b25b      	sxtb	r3, r3
   22232:	b2da      	uxtb	r2, r3
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   22234:	f011 0f0f 	tst.w	r1, #15
   22238:	d121      	bne.n	2227e <net_6lo_compress+0xde>
   2223a:	f8b6 e002 	ldrh.w	lr, [r6, #2]
   2223e:	f1be 0f00 	cmp.w	lr, #0
   22242:	d11c      	bne.n	2227e <net_6lo_compress+0xde>
		if (((ipv6->vtc & 0x0F) == 0) && ((ipv6->tcflow & 0xF0) == 0)) {
   22244:	f010 0f0f 	tst.w	r0, #15
   22248:	d10e      	bne.n	22268 <net_6lo_compress+0xc8>
   2224a:	f011 0ff0 	tst.w	r1, #240	; 0xf0
   2224e:	d10b      	bne.n	22268 <net_6lo_compress+0xc8>
			IPHC[0] |= NET_6LO_IPHC_TF_11;
   22250:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22254:	7813      	ldrb	r3, [r2, #0]
   22256:	f043 0318 	orr.w	r3, r3, #24
   2225a:	7013      	strb	r3, [r2, #0]
   2225c:	2202      	movs	r2, #2
   2225e:	e025      	b.n	222ac <net_6lo_compress+0x10c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   22260:	2b2f      	cmp	r3, #47	; 0x2f
   22262:	d8cd      	bhi.n	22200 <net_6lo_compress+0x60>
		return false;
   22264:	2000      	movs	r0, #0
   22266:	e7bf      	b.n	221e8 <net_6lo_compress+0x48>
			IPHC[0] |= NET_6LO_IPHC_TF_10;
   22268:	f8d8 1008 	ldr.w	r1, [r8, #8]
   2226c:	780b      	ldrb	r3, [r1, #0]
   2226e:	f043 0310 	orr.w	r3, r3, #16
   22272:	700b      	strb	r3, [r1, #0]
			IPHC[offset++] = tcl;
   22274:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22278:	709a      	strb	r2, [r3, #2]
   2227a:	2203      	movs	r2, #3
   2227c:	e016      	b.n	222ac <net_6lo_compress+0x10c>
		if (((ipv6->vtc & 0x0F) == 0) && (ipv6->tcflow & 0x30)) {
   2227e:	f010 0f0f 	tst.w	r0, #15
   22282:	d102      	bne.n	2228a <net_6lo_compress+0xea>
   22284:	f011 0f30 	tst.w	r1, #48	; 0x30
   22288:	d128      	bne.n	222dc <net_6lo_compress+0x13c>
			IPHC[0] |= NET_6LO_IPHC_TF_00;
   2228a:	f8d8 3008 	ldr.w	r3, [r8, #8]
			IPHC[offset++] = tcl;
   2228e:	709a      	strb	r2, [r3, #2]
			IPHC[offset++] = ipv6->tcflow & 0x0F;
   22290:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22294:	7873      	ldrb	r3, [r6, #1]
   22296:	f003 030f 	and.w	r3, r3, #15
   2229a:	70d3      	strb	r3, [r2, #3]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   2229c:	f8d8 0008 	ldr.w	r0, [r8, #8]
   222a0:	2202      	movs	r2, #2
   222a2:	18b1      	adds	r1, r6, r2
   222a4:	3004      	adds	r0, #4
   222a6:	f7de f80b 	bl	2c0 <memcpy>
			offset += 2;
   222aa:	2206      	movs	r2, #6
	if (ipv6->nexthdr == IPPROTO_UDP) {
   222ac:	79b3      	ldrb	r3, [r6, #6]
   222ae:	2b11      	cmp	r3, #17
   222b0:	d02d      	beq.n	2230e <net_6lo_compress+0x16e>
		IPHC[offset++] = ipv6->nexthdr;
   222b2:	f8d8 1008 	ldr.w	r1, [r8, #8]
   222b6:	f102 0901 	add.w	r9, r2, #1
   222ba:	548b      	strb	r3, [r1, r2]
	switch (ipv6->hop_limit) {
   222bc:	79f3      	ldrb	r3, [r6, #7]
   222be:	2b40      	cmp	r3, #64	; 0x40
   222c0:	d040      	beq.n	22344 <net_6lo_compress+0x1a4>
   222c2:	2bff      	cmp	r3, #255	; 0xff
   222c4:	d045      	beq.n	22352 <net_6lo_compress+0x1b2>
   222c6:	2b01      	cmp	r3, #1
   222c8:	d029      	beq.n	2231e <net_6lo_compress+0x17e>
		IPHC[offset++] = ipv6->hop_limit;
   222ca:	f8d8 1008 	ldr.w	r1, [r8, #8]
   222ce:	f109 0201 	add.w	r2, r9, #1
   222d2:	f801 3009 	strb.w	r3, [r1, r9]
   222d6:	fa5f f982 	uxtb.w	r9, r2
   222da:	e026      	b.n	2232a <net_6lo_compress+0x18a>
			IPHC[0] |= NET_6LO_IPHC_TF_01;
   222dc:	f8d8 1008 	ldr.w	r1, [r8, #8]
   222e0:	780a      	ldrb	r2, [r1, #0]
   222e2:	f042 0208 	orr.w	r2, r2, #8
   222e6:	700a      	strb	r2, [r1, #0]
			IPHC[offset++] = (tcl & 0xC0) | (ipv6->tcflow & 0x0F);
   222e8:	f8d8 2008 	ldr.w	r2, [r8, #8]
   222ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   222f0:	f996 1001 	ldrsb.w	r1, [r6, #1]
   222f4:	f001 010f 	and.w	r1, r1, #15
   222f8:	430b      	orrs	r3, r1
   222fa:	7093      	strb	r3, [r2, #2]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   222fc:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22300:	2202      	movs	r2, #2
   22302:	18b1      	adds	r1, r6, r2
   22304:	3003      	adds	r0, #3
   22306:	f7dd ffdb 	bl	2c0 <memcpy>
			offset += 2;
   2230a:	2205      	movs	r2, #5
   2230c:	e7ce      	b.n	222ac <net_6lo_compress+0x10c>
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   2230e:	f8d8 1008 	ldr.w	r1, [r8, #8]
   22312:	780b      	ldrb	r3, [r1, #0]
   22314:	f043 0304 	orr.w	r3, r3, #4
   22318:	700b      	strb	r3, [r1, #0]
   2231a:	4691      	mov	r9, r2
   2231c:	e7ce      	b.n	222bc <net_6lo_compress+0x11c>
		IPHC[0] |= NET_6LO_IPHC_HLIM1;
   2231e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22322:	7813      	ldrb	r3, [r2, #0]
   22324:	f043 0301 	orr.w	r3, r3, #1
   22328:	7013      	strb	r3, [r2, #0]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2232a:	68b3      	ldr	r3, [r6, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2232c:	b9c3      	cbnz	r3, 22360 <net_6lo_compress+0x1c0>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2232e:	68f3      	ldr	r3, [r6, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   22330:	2b00      	cmp	r3, #0
   22332:	d176      	bne.n	22422 <net_6lo_compress+0x282>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22334:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   22336:	2b00      	cmp	r3, #0
   22338:	d175      	bne.n	22426 <net_6lo_compress+0x286>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   2233a:	6973      	ldr	r3, [r6, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2233c:	2b00      	cmp	r3, #0
   2233e:	d074      	beq.n	2242a <net_6lo_compress+0x28a>
   22340:	2300      	movs	r3, #0
   22342:	e00e      	b.n	22362 <net_6lo_compress+0x1c2>
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   22344:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22348:	7813      	ldrb	r3, [r2, #0]
   2234a:	f043 0302 	orr.w	r3, r3, #2
   2234e:	7013      	strb	r3, [r2, #0]
   22350:	e7eb      	b.n	2232a <net_6lo_compress+0x18a>
		IPHC[0] |= NET_6LO_IPHC_HLIM255;
   22352:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22356:	7813      	ldrb	r3, [r2, #0]
   22358:	f043 0303 	orr.w	r3, r3, #3
   2235c:	7013      	strb	r3, [r2, #0]
   2235e:	e7e4      	b.n	2232a <net_6lo_compress+0x18a>
   22360:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&ipv6->src)) {
   22362:	2b00      	cmp	r3, #0
   22364:	d163      	bne.n	2242e <net_6lo_compress+0x28e>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   22366:	8932      	ldrh	r2, [r6, #8]
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   22368:	f248 03fe 	movw	r3, #33022	; 0x80fe
   2236c:	429a      	cmp	r2, r3
   2236e:	d065      	beq.n	2243c <net_6lo_compress+0x29c>
		IPHC[1] |= NET_6LO_IPHC_SAM_00;
   22370:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], ipv6->src.s6_addr,
   22374:	2210      	movs	r2, #16
   22376:	f106 0108 	add.w	r1, r6, #8
   2237a:	4448      	add	r0, r9
   2237c:	f7dd ffa0 	bl	2c0 <memcpy>
		offset += sizeof(struct in6_addr);
   22380:	f109 0910 	add.w	r9, r9, #16
   22384:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   22388:	f1b9 0f00 	cmp.w	r9, #0
   2238c:	f000 812d 	beq.w	225ea <net_6lo_compress+0x44a>
	return addr->s6_addr[0] == 0xFF;
   22390:	7e33      	ldrb	r3, [r6, #24]
	if (net_is_ipv6_addr_mcast(&ipv6->dst)) {
   22392:	2bff      	cmp	r3, #255	; 0xff
   22394:	f000 812e 	beq.w	225f4 <net_6lo_compress+0x454>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   22398:	8b32      	ldrh	r2, [r6, #24]
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   2239a:	f248 03fe 	movw	r3, #33022	; 0x80fe
   2239e:	429a      	cmp	r2, r3
   223a0:	f000 81bf 	beq.w	22722 <net_6lo_compress+0x582>
		IPHC[1] |= NET_6LO_IPHC_DAM_00;
   223a4:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   223a8:	2210      	movs	r2, #16
   223aa:	f106 0118 	add.w	r1, r6, #24
   223ae:	4448      	add	r0, r9
   223b0:	f7dd ff86 	bl	2c0 <memcpy>
		offset += 16;
   223b4:	f109 0910 	add.w	r9, r9, #16
   223b8:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   223bc:	f1b9 0f00 	cmp.w	r9, #0
   223c0:	f000 8287 	beq.w	228d2 <net_6lo_compress+0x732>
	if (ipv6->nexthdr != IPPROTO_UDP) {
   223c4:	79b3      	ldrb	r3, [r6, #6]
   223c6:	2b11      	cmp	r3, #17
   223c8:	f000 8288 	beq.w	228dc <net_6lo_compress+0x73c>
	compressed = NET_IPV6H_LEN;
   223cc:	2628      	movs	r6, #40	; 0x28
	net_buf_add(frag, offset);
   223ce:	f108 0a08 	add.w	sl, r8, #8
   223d2:	4649      	mov	r1, r9
   223d4:	4650      	mov	r0, sl
   223d6:	f7f8 fc01 	bl	1abdc <net_buf_simple_add>
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   223da:	f8d8 0008 	ldr.w	r0, [r8, #8]
   223de:	68a3      	ldr	r3, [r4, #8]
   223e0:	6899      	ldr	r1, [r3, #8]
	       pkt->frags->len - compressed);
   223e2:	899a      	ldrh	r2, [r3, #12]
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   223e4:	1b92      	subs	r2, r2, r6
   223e6:	4431      	add	r1, r6
   223e8:	4448      	add	r0, r9
   223ea:	f7dd ff69 	bl	2c0 <memcpy>
	net_buf_add(frag, pkt->frags->len - compressed);
   223ee:	68a3      	ldr	r3, [r4, #8]
   223f0:	8999      	ldrh	r1, [r3, #12]
   223f2:	1b89      	subs	r1, r1, r6
   223f4:	4650      	mov	r0, sl
   223f6:	f7f8 fbf1 	bl	1abdc <net_buf_simple_add>
	net_pkt_frag_del(pkt, NULL, pkt->frags);
   223fa:	68a2      	ldr	r2, [r4, #8]
   223fc:	2100      	movs	r1, #0
   223fe:	4620      	mov	r0, r4
   22400:	f7fb f928 	bl	1d654 <net_pkt_frag_del>
	net_pkt_frag_insert(pkt, frag);
   22404:	4641      	mov	r1, r8
   22406:	4620      	mov	r0, r4
   22408:	f7fb f942 	bl	1d690 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   2240c:	4620      	mov	r0, r4
   2240e:	f7fb f9f9 	bl	1d804 <net_pkt_compact>
	if (fragment) {
   22412:	2f00      	cmp	r7, #0
   22414:	f000 8308 	beq.w	22a28 <net_6lo_compress+0x888>
		return fragment(pkt, compressed - offset);
   22418:	eba6 0109 	sub.w	r1, r6, r9
   2241c:	4620      	mov	r0, r4
   2241e:	47b8      	blx	r7
   22420:	e6e2      	b.n	221e8 <net_6lo_compress+0x48>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22422:	2300      	movs	r3, #0
   22424:	e79d      	b.n	22362 <net_6lo_compress+0x1c2>
   22426:	2300      	movs	r3, #0
   22428:	e79b      	b.n	22362 <net_6lo_compress+0x1c2>
   2242a:	2301      	movs	r3, #1
   2242c:	e799      	b.n	22362 <net_6lo_compress+0x1c2>
		IPHC[1] |= NET_6LO_IPHC_SAC_1;
   2242e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22432:	7853      	ldrb	r3, [r2, #1]
   22434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22438:	7053      	strb	r3, [r2, #1]
   2243a:	e7a5      	b.n	22388 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   2243c:	8973      	ldrh	r3, [r6, #10]
   2243e:	b91b      	cbnz	r3, 22448 <net_6lo_compress+0x2a8>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   22440:	68f3      	ldr	r3, [r6, #12]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22442:	b33b      	cbz	r3, 22494 <net_6lo_compress+0x2f4>
   22444:	2300      	movs	r3, #0
   22446:	e000      	b.n	2244a <net_6lo_compress+0x2aa>
   22448:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   2244a:	9301      	str	r3, [sp, #4]
   2244c:	2b00      	cmp	r3, #0
   2244e:	d08f      	beq.n	22370 <net_6lo_compress+0x1d0>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   22450:	6933      	ldr	r3, [r6, #16]
   22452:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   22456:	d01f      	beq.n	22498 <net_6lo_compress+0x2f8>
   22458:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->src)) {
   2245a:	469a      	mov	sl, r3
   2245c:	bb1b      	cbnz	r3, 224a6 <net_6lo_compress+0x306>
			if (!net_pkt_ll_src(pkt)) {
   2245e:	f114 0320 	adds.w	r3, r4, #32
   22462:	f000 80bf 	beq.w	225e4 <net_6lo_compress+0x444>
	if (!addr || !lladdr) {
   22466:	f116 0b08 	adds.w	fp, r6, #8
   2246a:	d008      	beq.n	2247e <net_6lo_compress+0x2de>
   2246c:	b13b      	cbz	r3, 2247e <net_6lo_compress+0x2de>
	switch (lladdr->len) {
   2246e:	791a      	ldrb	r2, [r3, #4]
   22470:	2a06      	cmp	r2, #6
   22472:	d03e      	beq.n	224f2 <net_6lo_compress+0x352>
   22474:	2a08      	cmp	r2, #8
   22476:	f000 808c 	beq.w	22592 <net_6lo_compress+0x3f2>
   2247a:	2a02      	cmp	r2, #2
   2247c:	d026      	beq.n	224cc <net_6lo_compress+0x32c>
			if (net_ipv6_addr_based_on_ll(&ipv6->src,
   2247e:	f1ba 0f00 	cmp.w	sl, #0
   22482:	f000 809c 	beq.w	225be <net_6lo_compress+0x41e>
				IPHC[1] |= NET_6LO_IPHC_SAM_11;
   22486:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2248a:	7853      	ldrb	r3, [r2, #1]
   2248c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   22490:	7053      	strb	r3, [r2, #1]
   22492:	e779      	b.n	22388 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22494:	2301      	movs	r3, #1
   22496:	e7d8      	b.n	2244a <net_6lo_compress+0x2aa>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   22498:	8ab3      	ldrh	r3, [r6, #20]
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   2249a:	2bfe      	cmp	r3, #254	; 0xfe
   2249c:	d001      	beq.n	224a2 <net_6lo_compress+0x302>
   2249e:	2300      	movs	r3, #0
   224a0:	e7db      	b.n	2245a <net_6lo_compress+0x2ba>
   224a2:	2301      	movs	r3, #1
   224a4:	e7d9      	b.n	2245a <net_6lo_compress+0x2ba>
			IPHC[1] |= NET_6LO_IPHC_SAM_10;
   224a6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   224aa:	7853      	ldrb	r3, [r2, #1]
   224ac:	f043 0320 	orr.w	r3, r3, #32
   224b0:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->src.s6_addr[14], 2);
   224b2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   224b6:	2202      	movs	r2, #2
   224b8:	f106 0116 	add.w	r1, r6, #22
   224bc:	4448      	add	r0, r9
   224be:	f7dd feff 	bl	2c0 <memcpy>
			offset += 2;
   224c2:	f109 0902 	add.w	r9, r9, #2
   224c6:	fa5f f989 	uxtb.w	r9, r9
   224ca:	e75d      	b.n	22388 <net_6lo_compress+0x1e8>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   224cc:	6a21      	ldr	r1, [r4, #32]
   224ce:	f10b 000e 	add.w	r0, fp, #14
   224d2:	f007 fdc1 	bl	2a058 <memcmp>
   224d6:	2800      	cmp	r0, #0
   224d8:	d1d1      	bne.n	2247e <net_6lo_compress+0x2de>
		    addr->s6_addr[10] == 0 &&
   224da:	f8db 3008 	ldr.w	r3, [fp, #8]
   224de:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   224e2:	d1cc      	bne.n	2247e <net_6lo_compress+0x2de>
		    addr->s6_addr[12] == 0xfe) {
   224e4:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   224e8:	2bfe      	cmp	r3, #254	; 0xfe
   224ea:	d1c8      	bne.n	2247e <net_6lo_compress+0x2de>
			return true;
   224ec:	f8dd a004 	ldr.w	sl, [sp, #4]
   224f0:	e7c5      	b.n	2247e <net_6lo_compress+0x2de>
		if (lladdr->type == NET_LINK_ETHERNET) {
   224f2:	795b      	ldrb	r3, [r3, #5]
   224f4:	2b03      	cmp	r3, #3
   224f6:	d026      	beq.n	22546 <net_6lo_compress+0x3a6>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   224f8:	2b02      	cmp	r3, #2
   224fa:	d1c0      	bne.n	2247e <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   224fc:	6a21      	ldr	r1, [r4, #32]
   224fe:	2202      	movs	r2, #2
   22500:	3101      	adds	r1, #1
   22502:	f10b 0009 	add.w	r0, fp, #9
   22506:	f007 fda7 	bl	2a058 <memcmp>
   2250a:	2800      	cmp	r0, #0
   2250c:	d1b7      	bne.n	2247e <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   2250e:	6a21      	ldr	r1, [r4, #32]
   22510:	2203      	movs	r2, #3
   22512:	4411      	add	r1, r2
   22514:	f10b 000d 	add.w	r0, fp, #13
   22518:	f007 fd9e 	bl	2a058 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   2251c:	2800      	cmp	r0, #0
   2251e:	d1ae      	bne.n	2247e <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   22520:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22524:	2bff      	cmp	r3, #255	; 0xff
   22526:	d1aa      	bne.n	2247e <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe
   22528:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   2252c:	2bfe      	cmp	r3, #254	; 0xfe
   2252e:	d1a6      	bne.n	2247e <net_6lo_compress+0x2de>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   22530:	f89b 3008 	ldrb.w	r3, [fp, #8]
   22534:	f083 0302 	eor.w	r3, r3, #2
   22538:	6a22      	ldr	r2, [r4, #32]
   2253a:	7812      	ldrb	r2, [r2, #0]
   2253c:	4293      	cmp	r3, r2
   2253e:	d19e      	bne.n	2247e <net_6lo_compress+0x2de>
				return true;
   22540:	f8dd a004 	ldr.w	sl, [sp, #4]
   22544:	e79b      	b.n	2247e <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22546:	6a21      	ldr	r1, [r4, #32]
   22548:	2202      	movs	r2, #2
   2254a:	3101      	adds	r1, #1
   2254c:	f10b 0009 	add.w	r0, fp, #9
   22550:	f007 fd82 	bl	2a058 <memcmp>
   22554:	2800      	cmp	r0, #0
   22556:	d192      	bne.n	2247e <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22558:	6a21      	ldr	r1, [r4, #32]
   2255a:	2203      	movs	r2, #3
   2255c:	4411      	add	r1, r2
   2255e:	f10b 000d 	add.w	r0, fp, #13
   22562:	f007 fd79 	bl	2a058 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22566:	2800      	cmp	r0, #0
   22568:	d189      	bne.n	2247e <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   2256a:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   2256e:	2bff      	cmp	r3, #255	; 0xff
   22570:	d185      	bne.n	2247e <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe &&
   22572:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   22576:	2bfe      	cmp	r3, #254	; 0xfe
   22578:	d181      	bne.n	2247e <net_6lo_compress+0x2de>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   2257a:	f89b 3008 	ldrb.w	r3, [fp, #8]
   2257e:	f083 0302 	eor.w	r3, r3, #2
   22582:	6a22      	ldr	r2, [r4, #32]
   22584:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   22586:	4293      	cmp	r3, r2
   22588:	f47f af79 	bne.w	2247e <net_6lo_compress+0x2de>
				return true;
   2258c:	f8dd a004 	ldr.w	sl, [sp, #4]
   22590:	e775      	b.n	2247e <net_6lo_compress+0x2de>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   22592:	6a21      	ldr	r1, [r4, #32]
   22594:	3a01      	subs	r2, #1
   22596:	3101      	adds	r1, #1
   22598:	f10b 0009 	add.w	r0, fp, #9
   2259c:	f007 fd5c 	bl	2a058 <memcmp>
   225a0:	2800      	cmp	r0, #0
   225a2:	f47f af6c 	bne.w	2247e <net_6lo_compress+0x2de>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   225a6:	f89b 3008 	ldrb.w	r3, [fp, #8]
   225aa:	f083 0302 	eor.w	r3, r3, #2
   225ae:	6a22      	ldr	r2, [r4, #32]
   225b0:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   225b2:	4293      	cmp	r3, r2
   225b4:	f47f af63 	bne.w	2247e <net_6lo_compress+0x2de>
			return true;
   225b8:	f8dd a004 	ldr.w	sl, [sp, #4]
   225bc:	e75f      	b.n	2247e <net_6lo_compress+0x2de>
				IPHC[1] |= NET_6LO_IPHC_SAM_01;
   225be:	f8d8 2008 	ldr.w	r2, [r8, #8]
   225c2:	7853      	ldrb	r3, [r2, #1]
   225c4:	f043 0310 	orr.w	r3, r3, #16
   225c8:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->src.s6_addr[8], 8);
   225ca:	f8d8 0008 	ldr.w	r0, [r8, #8]
   225ce:	2208      	movs	r2, #8
   225d0:	f106 0110 	add.w	r1, r6, #16
   225d4:	4448      	add	r0, r9
   225d6:	f7dd fe73 	bl	2c0 <memcpy>
				offset += 8;
   225da:	f109 0908 	add.w	r9, r9, #8
   225de:	fa5f f989 	uxtb.w	r9, r9
   225e2:	e6d1      	b.n	22388 <net_6lo_compress+0x1e8>
				return 0;
   225e4:	f04f 0900 	mov.w	r9, #0
   225e8:	e6ce      	b.n	22388 <net_6lo_compress+0x1e8>
		net_pkt_frag_unref(frag);
   225ea:	4640      	mov	r0, r8
   225ec:	f7fb f813 	bl	1d616 <net_pkt_frag_unref>
		return false;
   225f0:	2000      	movs	r0, #0
   225f2:	e5f9      	b.n	221e8 <net_6lo_compress+0x48>
	IPHC[1] |= NET_6LO_IPHC_M_1;
   225f4:	f8d8 2008 	ldr.w	r2, [r8, #8]
   225f8:	7853      	ldrb	r3, [r2, #1]
   225fa:	f043 0308 	orr.w	r3, r3, #8
   225fe:	7053      	strb	r3, [r2, #1]
	return ((addr->s6_addr[1] == 0x02) &&
   22600:	7e73      	ldrb	r3, [r6, #25]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22602:	2b02      	cmp	r3, #2
   22604:	d00a      	beq.n	2261c <net_6lo_compress+0x47c>
   22606:	2300      	movs	r3, #0
	if (net_6lo_maddr_8_bit_compressible(&ipv6->dst)) {
   22608:	b9db      	cbnz	r3, 22642 <net_6lo_compress+0x4a2>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   2260a:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   2260c:	bb63      	cbnz	r3, 22668 <net_6lo_compress+0x4c8>
   2260e:	6a32      	ldr	r2, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22610:	bba2      	cbnz	r2, 2267c <net_6lo_compress+0x4dc>
		 (addr->s6_addr[12] == 0x00));
   22612:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22616:	b39a      	cbz	r2, 22680 <net_6lo_compress+0x4e0>
   22618:	2200      	movs	r2, #0
   2261a:	e026      	b.n	2266a <net_6lo_compress+0x4ca>
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   2261c:	8b73      	ldrh	r3, [r6, #26]
	return ((addr->s6_addr[1] == 0x02) &&
   2261e:	b943      	cbnz	r3, 22632 <net_6lo_compress+0x492>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22620:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22622:	b943      	cbnz	r3, 22636 <net_6lo_compress+0x496>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22624:	6a33      	ldr	r3, [r6, #32]
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22626:	b943      	cbnz	r3, 2263a <net_6lo_compress+0x49a>
		 (addr->s6_addr[14] == 0x00));
   22628:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   2262c:	b13b      	cbz	r3, 2263e <net_6lo_compress+0x49e>
   2262e:	2300      	movs	r3, #0
   22630:	e7ea      	b.n	22608 <net_6lo_compress+0x468>
   22632:	2300      	movs	r3, #0
   22634:	e7e8      	b.n	22608 <net_6lo_compress+0x468>
   22636:	2300      	movs	r3, #0
   22638:	e7e6      	b.n	22608 <net_6lo_compress+0x468>
   2263a:	2300      	movs	r3, #0
   2263c:	e7e4      	b.n	22608 <net_6lo_compress+0x468>
   2263e:	2301      	movs	r3, #1
   22640:	e7e2      	b.n	22608 <net_6lo_compress+0x468>
		IPHC[1] |= NET_6LO_IPHC_DAM_11;
   22642:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22646:	7853      	ldrb	r3, [r2, #1]
   22648:	f043 0303 	orr.w	r3, r3, #3
   2264c:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[15], 1);
   2264e:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22652:	2201      	movs	r2, #1
   22654:	f106 0127 	add.w	r1, r6, #39	; 0x27
   22658:	4448      	add	r0, r9
   2265a:	f7dd fe31 	bl	2c0 <memcpy>
		offset++;
   2265e:	f109 0901 	add.w	r9, r9, #1
   22662:	fa5f f989 	uxtb.w	r9, r9
   22666:	e6a9      	b.n	223bc <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22668:	2200      	movs	r2, #0
	} else if (net_6lo_maddr_32_bit_compressible(&ipv6->dst)) {
   2266a:	b95a      	cbnz	r2, 22684 <net_6lo_compress+0x4e4>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   2266c:	bb43      	cbnz	r3, 226c0 <net_6lo_compress+0x520>
   2266e:	8c33      	ldrh	r3, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22670:	bbab      	cbnz	r3, 226de <net_6lo_compress+0x53e>
		 (addr->s6_addr[10] == 0x00));
   22672:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   22676:	b3a3      	cbz	r3, 226e2 <net_6lo_compress+0x542>
   22678:	2300      	movs	r3, #0
   2267a:	e022      	b.n	226c2 <net_6lo_compress+0x522>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   2267c:	2200      	movs	r2, #0
   2267e:	e7f4      	b.n	2266a <net_6lo_compress+0x4ca>
   22680:	2201      	movs	r2, #1
   22682:	e7f2      	b.n	2266a <net_6lo_compress+0x4ca>
		IPHC[1] |= NET_6LO_IPHC_DAM_10;
   22684:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22688:	7853      	ldrb	r3, [r2, #1]
   2268a:	f043 0302 	orr.w	r3, r3, #2
   2268e:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   22690:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22694:	2201      	movs	r2, #1
   22696:	f106 0119 	add.w	r1, r6, #25
   2269a:	4448      	add	r0, r9
   2269c:	f7dd fe10 	bl	2c0 <memcpy>
		offset++;
   226a0:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   226a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   226a8:	2203      	movs	r2, #3
   226aa:	f106 0125 	add.w	r1, r6, #37	; 0x25
   226ae:	fa53 f080 	uxtab	r0, r3, r0
   226b2:	f7dd fe05 	bl	2c0 <memcpy>
		offset += 3;
   226b6:	f109 0904 	add.w	r9, r9, #4
   226ba:	fa5f f989 	uxtb.w	r9, r9
   226be:	e67d      	b.n	223bc <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   226c0:	2300      	movs	r3, #0
	} else if (net_6lo_maddr_48_bit_compressible(&ipv6->dst)) {
   226c2:	b983      	cbnz	r3, 226e6 <net_6lo_compress+0x546>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   226c4:	f8d8 0008 	ldr.w	r0, [r8, #8]
   226c8:	2210      	movs	r2, #16
   226ca:	f106 0118 	add.w	r1, r6, #24
   226ce:	4448      	add	r0, r9
   226d0:	f7dd fdf6 	bl	2c0 <memcpy>
		offset += 16;
   226d4:	f109 0910 	add.w	r9, r9, #16
   226d8:	fa5f f989 	uxtb.w	r9, r9
   226dc:	e66e      	b.n	223bc <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   226de:	2300      	movs	r3, #0
   226e0:	e7ef      	b.n	226c2 <net_6lo_compress+0x522>
   226e2:	2301      	movs	r3, #1
   226e4:	e7ed      	b.n	226c2 <net_6lo_compress+0x522>
		IPHC[1] |= NET_6LO_IPHC_DAM_01;
   226e6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   226ea:	7853      	ldrb	r3, [r2, #1]
   226ec:	f043 0301 	orr.w	r3, r3, #1
   226f0:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   226f2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   226f6:	2201      	movs	r2, #1
   226f8:	f106 0119 	add.w	r1, r6, #25
   226fc:	4448      	add	r0, r9
   226fe:	f7dd fddf 	bl	2c0 <memcpy>
		offset++;
   22702:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   22706:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2270a:	2205      	movs	r2, #5
   2270c:	f106 0123 	add.w	r1, r6, #35	; 0x23
   22710:	fa53 f080 	uxtab	r0, r3, r0
   22714:	f7dd fdd4 	bl	2c0 <memcpy>
		offset += 5;
   22718:	f109 0906 	add.w	r9, r9, #6
   2271c:	fa5f f989 	uxtb.w	r9, r9
   22720:	e64c      	b.n	223bc <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22722:	8b73      	ldrh	r3, [r6, #26]
   22724:	b91b      	cbnz	r3, 2272e <net_6lo_compress+0x58e>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   22726:	69f3      	ldr	r3, [r6, #28]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22728:	b343      	cbz	r3, 2277c <net_6lo_compress+0x5dc>
   2272a:	2300      	movs	r3, #0
   2272c:	e000      	b.n	22730 <net_6lo_compress+0x590>
   2272e:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   22730:	9301      	str	r3, [sp, #4]
   22732:	2b00      	cmp	r3, #0
   22734:	f43f ae36 	beq.w	223a4 <net_6lo_compress+0x204>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   22738:	6a33      	ldr	r3, [r6, #32]
   2273a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   2273e:	d01f      	beq.n	22780 <net_6lo_compress+0x5e0>
   22740:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->dst)) {
   22742:	469a      	mov	sl, r3
   22744:	bb1b      	cbnz	r3, 2278e <net_6lo_compress+0x5ee>
			if (!net_pkt_ll_dst(pkt)) {
   22746:	f114 0328 	adds.w	r3, r4, #40	; 0x28
   2274a:	f000 80bf 	beq.w	228cc <net_6lo_compress+0x72c>
	if (!addr || !lladdr) {
   2274e:	f116 0b18 	adds.w	fp, r6, #24
   22752:	d008      	beq.n	22766 <net_6lo_compress+0x5c6>
   22754:	b13b      	cbz	r3, 22766 <net_6lo_compress+0x5c6>
	switch (lladdr->len) {
   22756:	791a      	ldrb	r2, [r3, #4]
   22758:	2a06      	cmp	r2, #6
   2275a:	d03e      	beq.n	227da <net_6lo_compress+0x63a>
   2275c:	2a08      	cmp	r2, #8
   2275e:	f000 808c 	beq.w	2287a <net_6lo_compress+0x6da>
   22762:	2a02      	cmp	r2, #2
   22764:	d026      	beq.n	227b4 <net_6lo_compress+0x614>
			if (net_ipv6_addr_based_on_ll(&ipv6->dst,
   22766:	f1ba 0f00 	cmp.w	sl, #0
   2276a:	f000 809c 	beq.w	228a6 <net_6lo_compress+0x706>
				IPHC[1] |= NET_6LO_IPHC_DAM_11;
   2276e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22772:	7853      	ldrb	r3, [r2, #1]
   22774:	f043 0303 	orr.w	r3, r3, #3
   22778:	7053      	strb	r3, [r2, #1]
   2277a:	e61f      	b.n	223bc <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   2277c:	2301      	movs	r3, #1
   2277e:	e7d7      	b.n	22730 <net_6lo_compress+0x590>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   22780:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   22782:	2bfe      	cmp	r3, #254	; 0xfe
   22784:	d001      	beq.n	2278a <net_6lo_compress+0x5ea>
   22786:	2300      	movs	r3, #0
   22788:	e7db      	b.n	22742 <net_6lo_compress+0x5a2>
   2278a:	2301      	movs	r3, #1
   2278c:	e7d9      	b.n	22742 <net_6lo_compress+0x5a2>
			IPHC[1] |= NET_6LO_IPHC_DAM_10;
   2278e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22792:	7853      	ldrb	r3, [r2, #1]
   22794:	f043 0302 	orr.w	r3, r3, #2
   22798:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->dst.s6_addr[14], 2);
   2279a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2279e:	2202      	movs	r2, #2
   227a0:	f106 0126 	add.w	r1, r6, #38	; 0x26
   227a4:	4448      	add	r0, r9
   227a6:	f7dd fd8b 	bl	2c0 <memcpy>
			offset += 2;
   227aa:	f109 0902 	add.w	r9, r9, #2
   227ae:	fa5f f989 	uxtb.w	r9, r9
   227b2:	e603      	b.n	223bc <net_6lo_compress+0x21c>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   227b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   227b6:	f10b 000e 	add.w	r0, fp, #14
   227ba:	f007 fc4d 	bl	2a058 <memcmp>
   227be:	2800      	cmp	r0, #0
   227c0:	d1d1      	bne.n	22766 <net_6lo_compress+0x5c6>
		    addr->s6_addr[10] == 0 &&
   227c2:	f8db 3008 	ldr.w	r3, [fp, #8]
   227c6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   227ca:	d1cc      	bne.n	22766 <net_6lo_compress+0x5c6>
		    addr->s6_addr[12] == 0xfe) {
   227cc:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   227d0:	2bfe      	cmp	r3, #254	; 0xfe
   227d2:	d1c8      	bne.n	22766 <net_6lo_compress+0x5c6>
			return true;
   227d4:	f8dd a004 	ldr.w	sl, [sp, #4]
   227d8:	e7c5      	b.n	22766 <net_6lo_compress+0x5c6>
		if (lladdr->type == NET_LINK_ETHERNET) {
   227da:	795b      	ldrb	r3, [r3, #5]
   227dc:	2b03      	cmp	r3, #3
   227de:	d026      	beq.n	2282e <net_6lo_compress+0x68e>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   227e0:	2b02      	cmp	r3, #2
   227e2:	d1c0      	bne.n	22766 <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   227e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   227e6:	2202      	movs	r2, #2
   227e8:	3101      	adds	r1, #1
   227ea:	f10b 0009 	add.w	r0, fp, #9
   227ee:	f007 fc33 	bl	2a058 <memcmp>
   227f2:	2800      	cmp	r0, #0
   227f4:	d1b7      	bne.n	22766 <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   227f6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   227f8:	2203      	movs	r2, #3
   227fa:	4411      	add	r1, r2
   227fc:	f10b 000d 	add.w	r0, fp, #13
   22800:	f007 fc2a 	bl	2a058 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22804:	2800      	cmp	r0, #0
   22806:	d1ae      	bne.n	22766 <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   22808:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   2280c:	2bff      	cmp	r3, #255	; 0xff
   2280e:	d1aa      	bne.n	22766 <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe
   22810:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   22814:	2bfe      	cmp	r3, #254	; 0xfe
   22816:	d1a6      	bne.n	22766 <net_6lo_compress+0x5c6>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   22818:	f89b 3008 	ldrb.w	r3, [fp, #8]
   2281c:	f083 0302 	eor.w	r3, r3, #2
   22820:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   22822:	7812      	ldrb	r2, [r2, #0]
   22824:	4293      	cmp	r3, r2
   22826:	d19e      	bne.n	22766 <net_6lo_compress+0x5c6>
				return true;
   22828:	f8dd a004 	ldr.w	sl, [sp, #4]
   2282c:	e79b      	b.n	22766 <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   2282e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22830:	2202      	movs	r2, #2
   22832:	3101      	adds	r1, #1
   22834:	f10b 0009 	add.w	r0, fp, #9
   22838:	f007 fc0e 	bl	2a058 <memcmp>
   2283c:	2800      	cmp	r0, #0
   2283e:	d192      	bne.n	22766 <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22840:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22842:	2203      	movs	r2, #3
   22844:	4411      	add	r1, r2
   22846:	f10b 000d 	add.w	r0, fp, #13
   2284a:	f007 fc05 	bl	2a058 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   2284e:	2800      	cmp	r0, #0
   22850:	d189      	bne.n	22766 <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   22852:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22856:	2bff      	cmp	r3, #255	; 0xff
   22858:	d185      	bne.n	22766 <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe &&
   2285a:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   2285e:	2bfe      	cmp	r3, #254	; 0xfe
   22860:	d181      	bne.n	22766 <net_6lo_compress+0x5c6>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   22862:	f89b 3008 	ldrb.w	r3, [fp, #8]
   22866:	f083 0302 	eor.w	r3, r3, #2
   2286a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   2286c:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   2286e:	4293      	cmp	r3, r2
   22870:	f47f af79 	bne.w	22766 <net_6lo_compress+0x5c6>
				return true;
   22874:	f8dd a004 	ldr.w	sl, [sp, #4]
   22878:	e775      	b.n	22766 <net_6lo_compress+0x5c6>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   2287a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2287c:	3a01      	subs	r2, #1
   2287e:	3101      	adds	r1, #1
   22880:	f10b 0009 	add.w	r0, fp, #9
   22884:	f007 fbe8 	bl	2a058 <memcmp>
   22888:	2800      	cmp	r0, #0
   2288a:	f47f af6c 	bne.w	22766 <net_6lo_compress+0x5c6>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   2288e:	f89b 3008 	ldrb.w	r3, [fp, #8]
   22892:	f083 0302 	eor.w	r3, r3, #2
   22896:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   22898:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   2289a:	4293      	cmp	r3, r2
   2289c:	f47f af63 	bne.w	22766 <net_6lo_compress+0x5c6>
			return true;
   228a0:	f8dd a004 	ldr.w	sl, [sp, #4]
   228a4:	e75f      	b.n	22766 <net_6lo_compress+0x5c6>
				IPHC[1] |= NET_6LO_IPHC_DAM_01;
   228a6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   228aa:	7853      	ldrb	r3, [r2, #1]
   228ac:	f043 0301 	orr.w	r3, r3, #1
   228b0:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->dst.s6_addr[8], 8);
   228b2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   228b6:	2208      	movs	r2, #8
   228b8:	f106 0120 	add.w	r1, r6, #32
   228bc:	4448      	add	r0, r9
   228be:	f7dd fcff 	bl	2c0 <memcpy>
				offset += 8;
   228c2:	f109 0908 	add.w	r9, r9, #8
   228c6:	fa5f f989 	uxtb.w	r9, r9
   228ca:	e577      	b.n	223bc <net_6lo_compress+0x21c>
				return 0;
   228cc:	f04f 0900 	mov.w	r9, #0
   228d0:	e574      	b.n	223bc <net_6lo_compress+0x21c>
		net_pkt_frag_unref(frag);
   228d2:	4640      	mov	r0, r8
   228d4:	f7fa fe9f 	bl	1d616 <net_pkt_frag_unref>
		return false;
   228d8:	2000      	movs	r0, #0
   228da:	e485      	b.n	221e8 <net_6lo_compress+0x48>
		udp = net_udp_get_hdr(pkt, &hdr);
   228dc:	a902      	add	r1, sp, #8
   228de:	4620      	mov	r0, r4
   228e0:	f000 fc68 	bl	231b4 <net_udp_get_hdr>
   228e4:	4606      	mov	r6, r0
		IPHC[offset] = NET_6LO_NHC_UDP_BARE;
   228e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   228ea:	22f0      	movs	r2, #240	; 0xf0
   228ec:	f803 2009 	strb.w	r2, [r3, r9]
	if ((((htons(udp->src_port) >> 4) & 0xFFF) ==
   228f0:	8802      	ldrh	r2, [r0, #0]
   228f2:	0a13      	lsrs	r3, r2, #8
   228f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   228f8:	b29b      	uxth	r3, r3
   228fa:	f640 720b 	movw	r2, #3851	; 0xf0b
   228fe:	ebb2 1f13 	cmp.w	r2, r3, lsr #4
   22902:	d025      	beq.n	22950 <net_6lo_compress+0x7b0>
	} else if (((htons(udp->dst_port) >> 8) & 0xFF) ==
   22904:	8872      	ldrh	r2, [r6, #2]
   22906:	b2d2      	uxtb	r2, r2
   22908:	2af0      	cmp	r2, #240	; 0xf0
   2290a:	d046      	beq.n	2299a <net_6lo_compress+0x7fa>
	} else if (((htons(udp->src_port) >> 8) & 0xFF) ==
   2290c:	0a1b      	lsrs	r3, r3, #8
   2290e:	2bf0      	cmp	r3, #240	; 0xf0
   22910:	d062      	beq.n	229d8 <net_6lo_compress+0x838>
		offset++;
   22912:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 4);
   22916:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2291a:	2204      	movs	r2, #4
   2291c:	4631      	mov	r1, r6
   2291e:	fa53 f080 	uxtab	r0, r3, r0
   22922:	f7dd fccd 	bl	2c0 <memcpy>
		offset += 4;
   22926:	f109 0905 	add.w	r9, r9, #5
   2292a:	fa5f f989 	uxtb.w	r9, r9
	memcpy(&IPHC[offset], &udp->chksum, 2);
   2292e:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22932:	2202      	movs	r2, #2
   22934:	1db1      	adds	r1, r6, #6
   22936:	4448      	add	r0, r9
   22938:	f7dd fcc2 	bl	2c0 <memcpy>
	offset += 2;
   2293c:	f109 0902 	add.w	r9, r9, #2
   22940:	fa5f f989 	uxtb.w	r9, r9
		net_udp_set_hdr(pkt, udp);
   22944:	4631      	mov	r1, r6
   22946:	4620      	mov	r0, r4
   22948:	f000 fc74 	bl	23234 <net_udp_set_hdr>
		compressed += NET_UDPH_LEN;
   2294c:	2630      	movs	r6, #48	; 0x30
   2294e:	e53e      	b.n	223ce <net_6lo_compress+0x22e>
	    (((htons(udp->dst_port) >> 4) & 0xFFF) ==
   22950:	8841      	ldrh	r1, [r0, #2]
   22952:	0a0a      	lsrs	r2, r1, #8
   22954:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   22958:	f3c2 120b 	ubfx	r2, r2, #4, #12
	    NET_6LO_NHC_UDP_4_BIT_PORT) &&
   2295c:	f640 710b 	movw	r1, #3851	; 0xf0b
   22960:	428a      	cmp	r2, r1
   22962:	d1cf      	bne.n	22904 <net_6lo_compress+0x764>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_11;
   22964:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22968:	f812 3009 	ldrb.w	r3, [r2, r9]
   2296c:	f043 0303 	orr.w	r3, r3, #3
   22970:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   22974:	f109 0101 	add.w	r1, r9, #1
   22978:	b2c9      	uxtb	r1, r1
		tmp = (u8_t)(htons(udp->src_port));
   2297a:	8803      	ldrh	r3, [r0, #0]
   2297c:	0a1b      	lsrs	r3, r3, #8
		tmp = tmp << 4;
   2297e:	011b      	lsls	r3, r3, #4
   22980:	b2db      	uxtb	r3, r3
		tmp |= (((u8_t)(htons(udp->dst_port))) & 0x0F);
   22982:	8842      	ldrh	r2, [r0, #2]
   22984:	f3c2 2203 	ubfx	r2, r2, #8, #4
   22988:	4313      	orrs	r3, r2
		IPHC[offset++] = tmp;
   2298a:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2298e:	f109 0902 	add.w	r9, r9, #2
   22992:	fa5f f989 	uxtb.w	r9, r9
   22996:	5453      	strb	r3, [r2, r1]
   22998:	e7c9      	b.n	2292e <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_01;
   2299a:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2299e:	f812 3009 	ldrb.w	r3, [r2, r9]
   229a2:	f043 0301 	orr.w	r3, r3, #1
   229a6:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   229aa:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 2);
   229ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
   229b2:	2202      	movs	r2, #2
   229b4:	4631      	mov	r1, r6
   229b6:	fa53 f080 	uxtab	r0, r3, r0
   229ba:	f7dd fc81 	bl	2c0 <memcpy>
		offset += 2;
   229be:	f109 0303 	add.w	r3, r9, #3
   229c2:	b2db      	uxtb	r3, r3
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   229c4:	f8d8 1008 	ldr.w	r1, [r8, #8]
   229c8:	f109 0904 	add.w	r9, r9, #4
   229cc:	fa5f f989 	uxtb.w	r9, r9
   229d0:	8872      	ldrh	r2, [r6, #2]
   229d2:	0a12      	lsrs	r2, r2, #8
   229d4:	54ca      	strb	r2, [r1, r3]
   229d6:	e7aa      	b.n	2292e <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_10;
   229d8:	f8d8 2008 	ldr.w	r2, [r8, #8]
   229dc:	f812 3009 	ldrb.w	r3, [r2, r9]
   229e0:	f043 0302 	orr.w	r3, r3, #2
   229e4:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   229e8:	f109 0301 	add.w	r3, r9, #1
   229ec:	fa5f fe83 	uxtb.w	lr, r3
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   229f0:	f109 0002 	add.w	r0, r9, #2
   229f4:	4631      	mov	r1, r6
   229f6:	f831 2b02 	ldrh.w	r2, [r1], #2
   229fa:	0a12      	lsrs	r2, r2, #8
   229fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22a00:	f803 200e 	strb.w	r2, [r3, lr]
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   22a04:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22a08:	2202      	movs	r2, #2
   22a0a:	fa53 f080 	uxtab	r0, r3, r0
   22a0e:	f7dd fc57 	bl	2c0 <memcpy>
		offset += 2;
   22a12:	f109 0904 	add.w	r9, r9, #4
   22a16:	fa5f f989 	uxtb.w	r9, r9
   22a1a:	e788      	b.n	2292e <net_6lo_compress+0x78e>
		return false;
   22a1c:	2000      	movs	r0, #0
   22a1e:	f7ff bbe3 	b.w	221e8 <net_6lo_compress+0x48>
		return false;
   22a22:	2000      	movs	r0, #0
   22a24:	f7ff bbe0 	b.w	221e8 <net_6lo_compress+0x48>
	return true;
   22a28:	4628      	mov	r0, r5
		return compress_IPHC_header(pkt, fragment);
   22a2a:	f7ff bbdd 	b.w	221e8 <net_6lo_compress+0x48>
		return false;
   22a2e:	4628      	mov	r0, r5
   22a30:	f7ff bbda 	b.w	221e8 <net_6lo_compress+0x48>
	return true;
   22a34:	2001      	movs	r0, #1
		return compress_ipv6_header(pkt, fragment);
   22a36:	f7ff bbd7 	b.w	221e8 <net_6lo_compress+0x48>

00022a3a <net_6lo_uncompress>:

bool net_6lo_uncompress(struct net_pkt *pkt)
{
   22a3a:	b510      	push	{r4, lr}
	NET_ASSERT(pkt && pkt->frags);

	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   22a3c:	6883      	ldr	r3, [r0, #8]
   22a3e:	689b      	ldr	r3, [r3, #8]
   22a40:	781b      	ldrb	r3, [r3, #0]
   22a42:	f003 0260 	and.w	r2, r3, #96	; 0x60
   22a46:	2a60      	cmp	r2, #96	; 0x60
   22a48:	d005      	beq.n	22a56 <net_6lo_uncompress+0x1c>
	    NET_6LO_DISPATCH_IPHC) {
		/* Uncompress IPHC header */
		return uncompress_IPHC_header(pkt);

	} else if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPV6) ==
   22a4a:	f003 0341 	and.w	r3, r3, #65	; 0x41
   22a4e:	2b41      	cmp	r3, #65	; 0x41
   22a50:	d004      	beq.n	22a5c <net_6lo_uncompress+0x22>
		return uncompress_ipv6_header(pkt);
	}

	NET_DBG("pkt %p is not compressed", pkt);

	return true;
   22a52:	2001      	movs	r0, #1
}
   22a54:	bd10      	pop	{r4, pc}
		return uncompress_IPHC_header(pkt);
   22a56:	f7ff f873 	bl	21b40 <uncompress_IPHC_header>
   22a5a:	bd10      	pop	{r4, pc}
	struct net_buf *frag = pkt->frags;
   22a5c:	6884      	ldr	r4, [r0, #8]
	memmove(frag->data, frag->data + 1, frag->len - 1);
   22a5e:	68a0      	ldr	r0, [r4, #8]
   22a60:	89a2      	ldrh	r2, [r4, #12]
   22a62:	3a01      	subs	r2, #1
   22a64:	1c41      	adds	r1, r0, #1
   22a66:	f007 fb27 	bl	2a0b8 <memmove>
	frag->len -= 1;
   22a6a:	89a3      	ldrh	r3, [r4, #12]
   22a6c:	3b01      	subs	r3, #1
   22a6e:	81a3      	strh	r3, [r4, #12]
		return uncompress_ipv6_header(pkt);
   22a70:	2001      	movs	r0, #1
   22a72:	bd10      	pop	{r4, pc}

00022a74 <net_route_entry_remove>:
{
   22a74:	4770      	bx	lr

00022a76 <net_route_entries_table_clear>:
{
   22a76:	4770      	bx	lr

00022a78 <nbr_nexthop_put>:

	return nbr;
}

static int nbr_nexthop_put(struct net_nbr *nbr)
{
   22a78:	b508      	push	{r3, lr}
	NET_ASSERT(nbr);

	NET_DBG("[%d] nbr %p iface %p", nbr->idx, nbr, nbr->iface);

	net_nbr_unref(nbr);
   22a7a:	f7fc fbd3 	bl	1f224 <net_nbr_unref>

	return 0;
}
   22a7e:	2000      	movs	r0, #0
   22a80:	bd08      	pop	{r3, pc}
	...

00022a84 <net_route_get_nbr>:
{
   22a84:	b430      	push	{r4, r5}
   22a86:	4605      	mov	r5, r0
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   22a88:	2300      	movs	r3, #0
   22a8a:	e000      	b.n	22a8e <net_route_get_nbr+0xa>
   22a8c:	3301      	adds	r3, #1
   22a8e:	2b07      	cmp	r3, #7
   22a90:	dc0b      	bgt.n	22aaa <net_route_get_nbr+0x26>
	return &net_route_entries_pool[idx].nbr;
   22a92:	4c07      	ldr	r4, [pc, #28]	; (22ab0 <net_route_get_nbr+0x2c>)
   22a94:	00da      	lsls	r2, r3, #3
   22a96:	1ad2      	subs	r2, r2, r3
   22a98:	00d1      	lsls	r1, r2, #3
   22a9a:	1860      	adds	r0, r4, r1
		if (!nbr->ref) {
   22a9c:	5c62      	ldrb	r2, [r4, r1]
   22a9e:	2a00      	cmp	r2, #0
   22aa0:	d0f4      	beq.n	22a8c <net_route_get_nbr+0x8>
		if (nbr->data == (u8_t *)route) {
   22aa2:	68c2      	ldr	r2, [r0, #12]
   22aa4:	42aa      	cmp	r2, r5
   22aa6:	d1f1      	bne.n	22a8c <net_route_get_nbr+0x8>
   22aa8:	e000      	b.n	22aac <net_route_get_nbr+0x28>
	return NULL;
   22aaa:	2000      	movs	r0, #0
}
   22aac:	bc30      	pop	{r4, r5}
   22aae:	4770      	bx	lr
   22ab0:	2000c374 	.word	0x2000c374

00022ab4 <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   22ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ab8:	b083      	sub	sp, #12
   22aba:	4606      	mov	r6, r0
   22abc:	9101      	str	r1, [sp, #4]
	struct net_route_entry *route, *found = NULL;
	u8_t longest_match = 0;
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   22abe:	2400      	movs	r4, #0
	u8_t longest_match = 0;
   22ac0:	4625      	mov	r5, r4
	struct net_route_entry *route, *found = NULL;
   22ac2:	4627      	mov	r7, r4
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   22ac4:	e00b      	b.n	22ade <net_route_lookup+0x2a>
	return (struct net_route_entry *)nbr->data;
   22ac6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   22aca:	00da      	lsls	r2, r3, #3
   22acc:	4b3f      	ldr	r3, [pc, #252]	; (22bcc <net_route_lookup+0x118>)
   22ace:	4413      	add	r3, r2
   22ad0:	f8d3 800c 	ldr.w	r8, [r3, #12]
			continue;
		}

		route = net_route_data(nbr);

		if (route->prefix_len >= longest_match &&
   22ad4:	f898 3020 	ldrb.w	r3, [r8, #32]
   22ad8:	429d      	cmp	r5, r3
   22ada:	d917      	bls.n	22b0c <net_route_lookup+0x58>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   22adc:	3401      	adds	r4, #1
   22ade:	2c07      	cmp	r4, #7
   22ae0:	dc46      	bgt.n	22b70 <net_route_lookup+0xbc>
   22ae2:	f015 0f80 	tst.w	r5, #128	; 0x80
   22ae6:	d143      	bne.n	22b70 <net_route_lookup+0xbc>
		if (!nbr->ref) {
   22ae8:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   22aec:	00d3      	lsls	r3, r2, #3
   22aee:	4a37      	ldr	r2, [pc, #220]	; (22bcc <net_route_lookup+0x118>)
   22af0:	5cd3      	ldrb	r3, [r2, r3]
   22af2:	2b00      	cmp	r3, #0
   22af4:	d0f2      	beq.n	22adc <net_route_lookup+0x28>
		if (iface && nbr->iface != iface) {
   22af6:	2e00      	cmp	r6, #0
   22af8:	d0e5      	beq.n	22ac6 <net_route_lookup+0x12>
   22afa:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   22afe:	00da      	lsls	r2, r3, #3
   22b00:	4b32      	ldr	r3, [pc, #200]	; (22bcc <net_route_lookup+0x118>)
   22b02:	4413      	add	r3, r2
   22b04:	689b      	ldr	r3, [r3, #8]
   22b06:	429e      	cmp	r6, r3
   22b08:	d1e8      	bne.n	22adc <net_route_lookup+0x28>
   22b0a:	e7dc      	b.n	22ac6 <net_route_lookup+0x12>
		    net_is_ipv6_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
   22b0c:	f108 0910 	add.w	r9, r8, #16
	u8_t bits = 128 - length;
   22b10:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   22b14:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   22b18:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   22b1c:	2b80      	cmp	r3, #128	; 0x80
   22b1e:	d906      	bls.n	22b2e <net_route_lookup+0x7a>
		return false;
   22b20:	2300      	movs	r3, #0
		if (route->prefix_len >= longest_match &&
   22b22:	2b00      	cmp	r3, #0
   22b24:	d0da      	beq.n	22adc <net_route_lookup+0x28>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   22b26:	f898 5020 	ldrb.w	r5, [r8, #32]
			found = route;
   22b2a:	4647      	mov	r7, r8
   22b2c:	e7d6      	b.n	22adc <net_route_lookup+0x28>
	if (memcmp(addr1, addr2, bytes)) {
   22b2e:	465a      	mov	r2, fp
   22b30:	4649      	mov	r1, r9
   22b32:	9801      	ldr	r0, [sp, #4]
   22b34:	f007 fa90 	bl	2a058 <memcmp>
   22b38:	b9b0      	cbnz	r0, 22b68 <net_route_lookup+0xb4>
	if (!remain) {
   22b3a:	f1ba 0f00 	cmp.w	sl, #0
   22b3e:	d015      	beq.n	22b6c <net_route_lookup+0xb8>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   22b40:	f1ca 0208 	rsb	r2, sl, #8
   22b44:	23ff      	movs	r3, #255	; 0xff
   22b46:	4093      	lsls	r3, r2
   22b48:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   22b4c:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   22b50:	9b01      	ldr	r3, [sp, #4]
   22b52:	f813 300b 	ldrb.w	r3, [r3, fp]
   22b56:	f819 200b 	ldrb.w	r2, [r9, fp]
   22b5a:	4053      	eors	r3, r2
   22b5c:	ea1a 0f03 	tst.w	sl, r3
   22b60:	bf0c      	ite	eq
   22b62:	2301      	moveq	r3, #1
   22b64:	2300      	movne	r3, #0
   22b66:	e7dc      	b.n	22b22 <net_route_lookup+0x6e>
		return false;
   22b68:	2300      	movs	r3, #0
   22b6a:	e7da      	b.n	22b22 <net_route_lookup+0x6e>
		return true;
   22b6c:	2301      	movs	r3, #1
   22b6e:	e7d8      	b.n	22b22 <net_route_lookup+0x6e>
		}
	}

	if (found) {
   22b70:	b1c7      	cbz	r7, 22ba4 <net_route_lookup+0xf0>
	sys_slist_find_and_remove(&routes, &route->node);
   22b72:	463a      	mov	r2, r7
	return list->head;
   22b74:	4b16      	ldr	r3, [pc, #88]	; (22bd0 <net_route_lookup+0x11c>)
   22b76:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   22b78:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22b7a:	b16b      	cbz	r3, 22b98 <net_route_lookup+0xe4>
		if (test == node) {
   22b7c:	429a      	cmp	r2, r3
   22b7e:	d002      	beq.n	22b86 <net_route_lookup+0xd2>
		prev = test;
   22b80:	4619      	mov	r1, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22b82:	681b      	ldr	r3, [r3, #0]
   22b84:	e7f9      	b.n	22b7a <net_route_lookup+0xc6>
	if (!prev_node) {
   22b86:	b189      	cbz	r1, 22bac <net_route_lookup+0xf8>
		prev_node->next = node->next;
   22b88:	683b      	ldr	r3, [r7, #0]
   22b8a:	600b      	str	r3, [r1, #0]
		if (list->tail == node) {
   22b8c:	4b10      	ldr	r3, [pc, #64]	; (22bd0 <net_route_lookup+0x11c>)
   22b8e:	685b      	ldr	r3, [r3, #4]
   22b90:	429a      	cmp	r2, r3
   22b92:	d014      	beq.n	22bbe <net_route_lookup+0x10a>
	node->next = NULL;
   22b94:	2300      	movs	r3, #0
   22b96:	603b      	str	r3, [r7, #0]
	node->next = list->head;
   22b98:	4b0d      	ldr	r3, [pc, #52]	; (22bd0 <net_route_lookup+0x11c>)
   22b9a:	6819      	ldr	r1, [r3, #0]
   22b9c:	6039      	str	r1, [r7, #0]
	list->head = node;
   22b9e:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
   22ba0:	685b      	ldr	r3, [r3, #4]
   22ba2:	b17b      	cbz	r3, 22bc4 <net_route_lookup+0x110>

		update_route_access(found);
	}

	return found;
}
   22ba4:	4638      	mov	r0, r7
   22ba6:	b003      	add	sp, #12
   22ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		list->head = node->next;
   22bac:	6839      	ldr	r1, [r7, #0]
   22bae:	4b08      	ldr	r3, [pc, #32]	; (22bd0 <net_route_lookup+0x11c>)
   22bb0:	6019      	str	r1, [r3, #0]
		if (list->tail == node) {
   22bb2:	685b      	ldr	r3, [r3, #4]
   22bb4:	429a      	cmp	r2, r3
   22bb6:	d1ed      	bne.n	22b94 <net_route_lookup+0xe0>
			list->tail = list->head;
   22bb8:	4b05      	ldr	r3, [pc, #20]	; (22bd0 <net_route_lookup+0x11c>)
   22bba:	6059      	str	r1, [r3, #4]
   22bbc:	e7ea      	b.n	22b94 <net_route_lookup+0xe0>
			list->tail = prev_node;
   22bbe:	4b04      	ldr	r3, [pc, #16]	; (22bd0 <net_route_lookup+0x11c>)
   22bc0:	6059      	str	r1, [r3, #4]
   22bc2:	e7e7      	b.n	22b94 <net_route_lookup+0xe0>
		list->tail = list->head;
   22bc4:	4b02      	ldr	r3, [pc, #8]	; (22bd0 <net_route_lookup+0x11c>)
   22bc6:	605a      	str	r2, [r3, #4]
	return found;
   22bc8:	e7ec      	b.n	22ba4 <net_route_lookup+0xf0>
   22bca:	bf00      	nop
   22bcc:	2000c374 	.word	0x2000c374
   22bd0:	20001fcc 	.word	0x20001fcc

00022bd4 <net_route_del>:
int net_route_del(struct net_route_entry *route)
{
	struct net_nbr *nbr;
	struct net_route_nexthop *nexthop_route;

	if (!route) {
   22bd4:	2800      	cmp	r0, #0
   22bd6:	d046      	beq.n	22c66 <net_route_del+0x92>
{
   22bd8:	b538      	push	{r3, r4, r5, lr}
   22bda:	4604      	mov	r4, r0
		return -EINVAL;
	}

	sys_slist_find_and_remove(&routes, &route->node);
   22bdc:	4601      	mov	r1, r0
	return list->head;
   22bde:	4b25      	ldr	r3, [pc, #148]	; (22c74 <net_route_del+0xa0>)
   22be0:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   22be2:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22be4:	b16b      	cbz	r3, 22c02 <net_route_del+0x2e>
		if (test == node) {
   22be6:	4299      	cmp	r1, r3
   22be8:	d002      	beq.n	22bf0 <net_route_del+0x1c>
		prev = test;
   22bea:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22bec:	681b      	ldr	r3, [r3, #0]
   22bee:	e7f9      	b.n	22be4 <net_route_del+0x10>
	if (!prev_node) {
   22bf0:	b1aa      	cbz	r2, 22c1e <net_route_del+0x4a>
		prev_node->next = node->next;
   22bf2:	6823      	ldr	r3, [r4, #0]
   22bf4:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   22bf6:	4b1f      	ldr	r3, [pc, #124]	; (22c74 <net_route_del+0xa0>)
   22bf8:	685b      	ldr	r3, [r3, #4]
   22bfa:	429c      	cmp	r4, r3
   22bfc:	d018      	beq.n	22c30 <net_route_del+0x5c>
	node->next = NULL;
   22bfe:	2300      	movs	r3, #0
   22c00:	6023      	str	r3, [r4, #0]

	nbr = net_route_get_nbr(route);
   22c02:	4620      	mov	r0, r4
   22c04:	f7ff ff3e 	bl	22a84 <net_route_get_nbr>
	if (!nbr) {
   22c08:	4605      	mov	r5, r0
   22c0a:	2800      	cmp	r0, #0
   22c0c:	d02e      	beq.n	22c6c <net_route_del+0x98>
   22c0e:	2300      	movs	r3, #0
   22c10:	461a      	mov	r2, r3
   22c12:	6881      	ldr	r1, [r0, #8]
   22c14:	4818      	ldr	r0, [pc, #96]	; (22c78 <net_route_del+0xa4>)
   22c16:	f000 f977 	bl	22f08 <net_mgmt_event_notify_with_info>
	return list->head;
   22c1a:	6864      	ldr	r4, [r4, #4]
   22c1c:	e011      	b.n	22c42 <net_route_del+0x6e>
		list->head = node->next;
   22c1e:	6822      	ldr	r2, [r4, #0]
   22c20:	4b14      	ldr	r3, [pc, #80]	; (22c74 <net_route_del+0xa0>)
   22c22:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   22c24:	685b      	ldr	r3, [r3, #4]
   22c26:	429c      	cmp	r4, r3
   22c28:	d1e9      	bne.n	22bfe <net_route_del+0x2a>
			list->tail = list->head;
   22c2a:	4b12      	ldr	r3, [pc, #72]	; (22c74 <net_route_del+0xa0>)
   22c2c:	605a      	str	r2, [r3, #4]
   22c2e:	e7e6      	b.n	22bfe <net_route_del+0x2a>
			list->tail = prev_node;
   22c30:	4b10      	ldr	r3, [pc, #64]	; (22c74 <net_route_del+0xa0>)
   22c32:	605a      	str	r2, [r3, #4]
   22c34:	e7e3      	b.n	22bfe <net_route_del+0x2a>

	net_route_info("Deleted", route, &route->addr);

	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, nbr->iface);

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22c36:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22c38:	b154      	cbz	r4, 22c50 <net_route_del+0x7c>
	return node->next;
   22c3a:	6823      	ldr	r3, [r4, #0]
   22c3c:	b153      	cbz	r3, 22c54 <net_route_del+0x80>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22c3e:	b15a      	cbz	r2, 22c58 <net_route_del+0x84>
	return node->next;
   22c40:	6824      	ldr	r4, [r4, #0]
   22c42:	b15c      	cbz	r4, 22c5c <net_route_del+0x88>
		if (!nexthop_route->nbr) {
   22c44:	6860      	ldr	r0, [r4, #4]
   22c46:	2800      	cmp	r0, #0
   22c48:	d0f5      	beq.n	22c36 <net_route_del+0x62>
			continue;
		}

		nbr_nexthop_put(nexthop_route->nbr);
   22c4a:	f7ff ff15 	bl	22a78 <nbr_nexthop_put>
   22c4e:	e7f2      	b.n	22c36 <net_route_del+0x62>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22c50:	4623      	mov	r3, r4
   22c52:	e7f3      	b.n	22c3c <net_route_del+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22c54:	2400      	movs	r4, #0
   22c56:	e7f4      	b.n	22c42 <net_route_del+0x6e>
   22c58:	2400      	movs	r4, #0
   22c5a:	e7f2      	b.n	22c42 <net_route_del+0x6e>
	net_nbr_unref(nbr);
   22c5c:	4628      	mov	r0, r5
   22c5e:	f7fc fae1 	bl	1f224 <net_nbr_unref>
	}

	nbr_free(nbr);

	return 0;
   22c62:	2000      	movs	r0, #0
   22c64:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   22c66:	f06f 0015 	mvn.w	r0, #21
   22c6a:	4770      	bx	lr
		return -ENOENT;
   22c6c:	f06f 0001 	mvn.w	r0, #1
}
   22c70:	bd38      	pop	{r3, r4, r5, pc}
   22c72:	bf00      	nop
   22c74:	20001fcc 	.word	0x20001fcc
   22c78:	f060000c 	.word	0xf060000c

00022c7c <net_route_get_nexthop>:
struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   22c7c:	b1b8      	cbz	r0, 22cae <net_route_get_nexthop+0x32>
	return list->head;
   22c7e:	6843      	ldr	r3, [r0, #4]
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22c80:	b19b      	cbz	r3, 22caa <net_route_get_nexthop+0x2e>
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   22c82:	685a      	ldr	r2, [r3, #4]
   22c84:	7851      	ldrb	r1, [r2, #1]
   22c86:	29ff      	cmp	r1, #255	; 0xff
   22c88:	d002      	beq.n	22c90 <net_route_get_nexthop+0x14>
   22c8a:	68d0      	ldr	r0, [r2, #12]
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
		NET_ASSERT(ipv6_nbr_data);

		addr = &ipv6_nbr_data->addr;
   22c8c:	3004      	adds	r0, #4
		NET_ASSERT(addr);

		return addr;
   22c8e:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22c90:	4619      	mov	r1, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22c92:	b123      	cbz	r3, 22c9e <net_route_get_nexthop+0x22>
	return node->next;
   22c94:	681a      	ldr	r2, [r3, #0]
   22c96:	b132      	cbz	r2, 22ca6 <net_route_get_nexthop+0x2a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22c98:	b119      	cbz	r1, 22ca2 <net_route_get_nexthop+0x26>
	return node->next;
   22c9a:	681b      	ldr	r3, [r3, #0]
   22c9c:	e7f0      	b.n	22c80 <net_route_get_nexthop+0x4>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22c9e:	461a      	mov	r2, r3
   22ca0:	e7f9      	b.n	22c96 <net_route_get_nexthop+0x1a>
   22ca2:	2300      	movs	r3, #0
   22ca4:	e7ec      	b.n	22c80 <net_route_get_nexthop+0x4>
   22ca6:	2300      	movs	r3, #0
   22ca8:	e7ea      	b.n	22c80 <net_route_get_nexthop+0x4>
	}

	return NULL;
   22caa:	2000      	movs	r0, #0
   22cac:	4770      	bx	lr
		return NULL;
   22cae:	2000      	movs	r0, #0
}
   22cb0:	4770      	bx	lr
	...

00022cb4 <net_route_foreach>:

int net_route_foreach(net_route_cb_t cb, void *user_data)
{
   22cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22cb6:	4607      	mov	r7, r0
   22cb8:	460e      	mov	r6, r1
	int i, ret = 0;
   22cba:	2500      	movs	r5, #0

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   22cbc:	462c      	mov	r4, r5
   22cbe:	e000      	b.n	22cc2 <net_route_foreach+0xe>
   22cc0:	3401      	adds	r4, #1
   22cc2:	2c07      	cmp	r4, #7
   22cc4:	dc0b      	bgt.n	22cde <net_route_foreach+0x2a>
	return (struct net_route_entry *)nbr->data;
   22cc6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   22cca:	00da      	lsls	r2, r3, #3
   22ccc:	4b05      	ldr	r3, [pc, #20]	; (22ce4 <net_route_foreach+0x30>)
   22cce:	4413      	add	r3, r2
   22cd0:	68d8      	ldr	r0, [r3, #12]
		if (!nbr) {
			continue;
		}

		route = net_route_data(nbr);
		if (!route) {
   22cd2:	2800      	cmp	r0, #0
   22cd4:	d0f4      	beq.n	22cc0 <net_route_foreach+0xc>
			continue;
		}

		cb(route, user_data);
   22cd6:	4631      	mov	r1, r6
   22cd8:	47b8      	blx	r7

		ret++;
   22cda:	3501      	adds	r5, #1
   22cdc:	e7f0      	b.n	22cc0 <net_route_foreach+0xc>
	}

	return ret;
}
   22cde:	4628      	mov	r0, r5
   22ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22ce2:	bf00      	nop
   22ce4:	2000c374 	.word	0x2000c374

00022ce8 <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   22ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22cea:	4607      	mov	r7, r0
   22cec:	460c      	mov	r4, r1
   22cee:	4615      	mov	r5, r2
   22cf0:	461e      	mov	r6, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   22cf2:	f7fd f961 	bl	1ffb8 <net_ipv6_nbr_lookup>
   22cf6:	b120      	cbz	r0, 22d02 <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   22cf8:	2300      	movs	r3, #0
   22cfa:	602b      	str	r3, [r5, #0]
		*nexthop = dst;
   22cfc:	6034      	str	r4, [r6, #0]

		return true;
   22cfe:	2001      	movs	r0, #1
   22d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	*route = net_route_lookup(iface, dst);
   22d02:	4621      	mov	r1, r4
   22d04:	4638      	mov	r0, r7
   22d06:	f7ff fed5 	bl	22ab4 <net_route_lookup>
   22d0a:	6028      	str	r0, [r5, #0]
	if (*route) {
   22d0c:	b130      	cbz	r0, 22d1c <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   22d0e:	f7ff ffb5 	bl	22c7c <net_route_get_nexthop>
   22d12:	6030      	str	r0, [r6, #0]
		if (!*nexthop) {
   22d14:	b108      	cbz	r0, 22d1a <net_route_get_info+0x32>
			return false;
		}

		return true;
   22d16:	2001      	movs	r0, #1
   22d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else {
		/* No specific route to this host, use the default
		 * route instead.
		 */
		router = net_if_ipv6_router_find_default(NULL, dst);
   22d1c:	4621      	mov	r1, r4
   22d1e:	2000      	movs	r0, #0
   22d20:	f7f8 fefe 	bl	1bb20 <net_if_ipv6_router_find_default>
		if (!router) {
   22d24:	4603      	mov	r3, r0
   22d26:	b118      	cbz	r0, 22d30 <net_route_get_info+0x48>
			return false;
		}

		*nexthop = &router->address.in6_addr;
   22d28:	332c      	adds	r3, #44	; 0x2c
   22d2a:	6033      	str	r3, [r6, #0]

		return true;
   22d2c:	2001      	movs	r0, #1
   22d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   22d30:	2000      	movs	r0, #0
	}

	return false;
}
   22d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022d34 <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   22d34:	b570      	push	{r4, r5, r6, lr}
   22d36:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(net_pkt_iface(pkt), nexthop);
   22d38:	6940      	ldr	r0, [r0, #20]
   22d3a:	f7fd f93d 	bl	1ffb8 <net_ipv6_nbr_lookup>
	if (!nbr) {
   22d3e:	b330      	cbz	r0, 22d8e <net_route_packet+0x5a>
		NET_DBG("Cannot find %s neighbor.",
			net_sprint_ipv6_addr(nexthop));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   22d40:	7840      	ldrb	r0, [r0, #1]
   22d42:	f7fc fb01 	bl	1f348 <net_nbr_get_lladdr>
	if (!lladdr) {
   22d46:	4605      	mov	r5, r0
   22d48:	b320      	cbz	r0, 22d94 <net_route_packet+0x60>
		NET_DBG("Cannot find %s neighbor link layer address.",
			net_sprint_ipv6_addr(nexthop));
		return -ESRCH;
	}

	if (!net_pkt_ll_src(pkt)->addr) {
   22d4a:	6a20      	ldr	r0, [r4, #32]
   22d4c:	b328      	cbz	r0, 22d9a <net_route_packet+0x66>
	}

	/* Sanitycheck: If src and dst ll addresses are going to be same,
	 * then something went wrong in route lookup.
	 */
	if (!memcmp(net_pkt_ll_src(pkt)->addr, lladdr->addr, lladdr->len)) {
   22d4e:	1cae      	adds	r6, r5, #2
   22d50:	786a      	ldrb	r2, [r5, #1]
   22d52:	4631      	mov	r1, r6
   22d54:	f007 f980 	bl	2a058 <memcmp>
   22d58:	b310      	cbz	r0, 22da0 <net_route_packet+0x6c>
	pkt->forwarding = forward;
   22d5a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   22d5e:	f043 0304 	orr.w	r3, r3, #4
   22d62:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return net_if_get_link_addr(pkt->iface);
   22d66:	6963      	ldr	r3, [r4, #20]
	net_pkt_set_forwarding(pkt, true);

	/* Set the destination and source ll address in the packet.
	 * We set the destination address to be the nexthop recipient.
	 */
	net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   22d68:	691a      	ldr	r2, [r3, #16]
   22d6a:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->type = net_pkt_ll_if(pkt)->type;
   22d6c:	7d5a      	ldrb	r2, [r3, #21]
   22d6e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   22d72:	7d1b      	ldrb	r3, [r3, #20]
   22d74:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   22d78:	62a6      	str	r6, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->type = lladdr->type;
   22d7a:	782b      	ldrb	r3, [r5, #0]
   22d7c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_ll_dst(pkt)->len = lladdr->len;
   22d80:	786b      	ldrb	r3, [r5, #1]
   22d82:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	return net_send_data(pkt);
   22d86:	4620      	mov	r0, r4
   22d88:	f7f8 f84a 	bl	1ae20 <net_send_data>
   22d8c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   22d8e:	f06f 0001 	mvn.w	r0, #1
   22d92:	bd70      	pop	{r4, r5, r6, pc}
		return -ESRCH;
   22d94:	f06f 0002 	mvn.w	r0, #2
   22d98:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22d9a:	f06f 0015 	mvn.w	r0, #21
   22d9e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22da0:	f06f 0015 	mvn.w	r0, #21
}
   22da4:	bd70      	pop	{r4, r5, r6, pc}

00022da6 <net_route_init>:

void net_route_init(void)
{
   22da6:	4770      	bx	lr

00022da8 <mgmt_thread>:
			  K_THREAD_STACK_SIZEOF(mgmt_stack));
#endif
}

static void mgmt_thread(void)
{
   22da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22daa:	e079      	b.n	22ea0 <mgmt_thread+0xf8>
		out_event = 0;
   22dac:	2100      	movs	r1, #0
   22dae:	4a48      	ldr	r2, [pc, #288]	; (22ed0 <mgmt_thread+0x128>)
   22db0:	8011      	strh	r1, [r2, #0]
   22db2:	e089      	b.n	22ec8 <mgmt_thread+0x120>
		return NULL;
   22db4:	2600      	movs	r6, #0
		k_sem_take(&network_event, K_FOREVER);

		NET_DBG("Handling events, forwarding it relevantly");

		mgmt_event = mgmt_pop_event();
		if (!mgmt_event) {
   22db6:	b13e      	cbz	r6, 22dc8 <mgmt_thread+0x20>
	return list->head;
   22db8:	4b46      	ldr	r3, [pc, #280]	; (22ed4 <mgmt_thread+0x12c>)
   22dba:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22dbc:	b15d      	cbz	r5, 22dd6 <mgmt_thread+0x2e>
   22dbe:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22dc0:	b105      	cbz	r5, 22dc4 <mgmt_thread+0x1c>
	return node->next;
   22dc2:	682c      	ldr	r4, [r5, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22dc4:	2700      	movs	r7, #0
   22dc6:	e01f      	b.n	22e08 <mgmt_thread+0x60>
   22dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22dcc:	2100      	movs	r1, #0
   22dce:	4842      	ldr	r0, [pc, #264]	; (22ed8 <mgmt_thread+0x130>)
   22dd0:	f006 f9fa 	bl	291c8 <_impl_k_sem_init>
			NET_DBG("Some event got probably lost (%u)",
				k_sem_count_get(&network_event));

			k_sem_init(&network_event, 0, UINT_MAX);

			continue;
   22dd4:	e064      	b.n	22ea0 <mgmt_thread+0xf8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22dd6:	462c      	mov	r4, r5
   22dd8:	e7f4      	b.n	22dc4 <mgmt_thread+0x1c>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
   22dda:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   22dde:	d04c      	beq.n	22e7a <mgmt_thread+0xd2>
			struct mgmt_event_wait *sync_data =
   22de0:	686a      	ldr	r2, [r5, #4]
			if (sync_data->iface &&
   22de2:	6993      	ldr	r3, [r2, #24]
   22de4:	2b00      	cmp	r3, #0
   22de6:	d02c      	beq.n	22e42 <mgmt_thread+0x9a>
			    sync_data->iface != mgmt_event->iface) {
   22de8:	6870      	ldr	r0, [r6, #4]
			if (sync_data->iface &&
   22dea:	4283      	cmp	r3, r0
   22dec:	d029      	beq.n	22e42 <mgmt_thread+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22dee:	2c00      	cmp	r4, #0
   22df0:	d04b      	beq.n	22e8a <mgmt_thread+0xe2>
   22df2:	4622      	mov	r2, r4
   22df4:	2c00      	cmp	r4, #0
   22df6:	d046      	beq.n	22e86 <mgmt_thread+0xde>
	return node->next;
   22df8:	6823      	ldr	r3, [r4, #0]
   22dfa:	2b00      	cmp	r3, #0
   22dfc:	d047      	beq.n	22e8e <mgmt_thread+0xe6>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22dfe:	2a00      	cmp	r2, #0
   22e00:	d047      	beq.n	22e92 <mgmt_thread+0xea>
	return node->next;
   22e02:	6823      	ldr	r3, [r4, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22e04:	4625      	mov	r5, r4
   22e06:	461c      	mov	r4, r3
   22e08:	2d00      	cmp	r5, #0
   22e0a:	d044      	beq.n	22e96 <mgmt_thread+0xee>
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   22e0c:	6831      	ldr	r1, [r6, #0]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   22e0e:	68aa      	ldr	r2, [r5, #8]
   22e10:	0f13      	lsrs	r3, r2, #28
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   22e12:	ea03 7311 	and.w	r3, r3, r1, lsr #28
   22e16:	f013 0f03 	tst.w	r3, #3
   22e1a:	d0e8      	beq.n	22dee <mgmt_thread+0x46>
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   22e1c:	0c13      	lsrs	r3, r2, #16
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) &
   22e1e:	ea03 4311 	and.w	r3, r3, r1, lsr #16
   22e22:	f3c3 030a 	ubfx	r3, r3, #0, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   22e26:	2b00      	cmp	r3, #0
   22e28:	d0e1      	beq.n	22dee <mgmt_thread+0x46>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   22e2a:	b28b      	uxth	r3, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   22e2c:	2b00      	cmp	r3, #0
   22e2e:	d0d4      	beq.n	22dda <mgmt_thread+0x32>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   22e30:	b293      	uxth	r3, r2
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   22e32:	2b00      	cmp	r3, #0
   22e34:	d0d1      	beq.n	22dda <mgmt_thread+0x32>
		     !(NET_MGMT_GET_COMMAND(mgmt_event->event) &
   22e36:	ea01 0302 	and.w	r3, r1, r2
   22e3a:	b29b      	uxth	r3, r3
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   22e3c:	2b00      	cmp	r3, #0
   22e3e:	d0d6      	beq.n	22dee <mgmt_thread+0x46>
   22e40:	e7cb      	b.n	22dda <mgmt_thread+0x32>
			cb->raised_event = mgmt_event->event;
   22e42:	60a9      	str	r1, [r5, #8]
			sync_data->iface = mgmt_event->iface;
   22e44:	6873      	ldr	r3, [r6, #4]
   22e46:	6193      	str	r3, [r2, #24]
	if (!prev_node) {
   22e48:	b15f      	cbz	r7, 22e62 <mgmt_thread+0xba>
		prev_node->next = node->next;
   22e4a:	682b      	ldr	r3, [r5, #0]
   22e4c:	603b      	str	r3, [r7, #0]
		if (list->tail == node) {
   22e4e:	4b21      	ldr	r3, [pc, #132]	; (22ed4 <mgmt_thread+0x12c>)
   22e50:	685b      	ldr	r3, [r3, #4]
   22e52:	429d      	cmp	r5, r3
   22e54:	d00e      	beq.n	22e74 <mgmt_thread+0xcc>
	node->next = NULL;
   22e56:	2300      	movs	r3, #0
   22e58:	602b      	str	r3, [r5, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   22e5a:	6868      	ldr	r0, [r5, #4]
   22e5c:	f006 f9bd 	bl	291da <_impl_k_sem_give>
   22e60:	e7c5      	b.n	22dee <mgmt_thread+0x46>
		list->head = node->next;
   22e62:	682a      	ldr	r2, [r5, #0]
   22e64:	4b1b      	ldr	r3, [pc, #108]	; (22ed4 <mgmt_thread+0x12c>)
   22e66:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   22e68:	685b      	ldr	r3, [r3, #4]
   22e6a:	429d      	cmp	r5, r3
   22e6c:	d1f3      	bne.n	22e56 <mgmt_thread+0xae>
			list->tail = list->head;
   22e6e:	4b19      	ldr	r3, [pc, #100]	; (22ed4 <mgmt_thread+0x12c>)
   22e70:	605a      	str	r2, [r3, #4]
   22e72:	e7f0      	b.n	22e56 <mgmt_thread+0xae>
			list->tail = prev_node;
   22e74:	4b17      	ldr	r3, [pc, #92]	; (22ed4 <mgmt_thread+0x12c>)
   22e76:	605f      	str	r7, [r3, #4]
   22e78:	e7ed      	b.n	22e56 <mgmt_thread+0xae>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   22e7a:	686b      	ldr	r3, [r5, #4]
   22e7c:	6872      	ldr	r2, [r6, #4]
   22e7e:	4628      	mov	r0, r5
   22e80:	4798      	blx	r3
			prev = &cb->node;
   22e82:	462f      	mov	r7, r5
   22e84:	e7b3      	b.n	22dee <mgmt_thread+0x46>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22e86:	4623      	mov	r3, r4
   22e88:	e7b7      	b.n	22dfa <mgmt_thread+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22e8a:	4623      	mov	r3, r4
   22e8c:	e7ba      	b.n	22e04 <mgmt_thread+0x5c>
   22e8e:	2300      	movs	r3, #0
   22e90:	e7b8      	b.n	22e04 <mgmt_thread+0x5c>
   22e92:	2300      	movs	r3, #0
   22e94:	e7b6      	b.n	22e04 <mgmt_thread+0x5c>
	mgmt_event->event = 0;
   22e96:	2300      	movs	r3, #0
   22e98:	6033      	str	r3, [r6, #0]
	mgmt_event->iface = NULL;
   22e9a:	6073      	str	r3, [r6, #4]
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   22e9c:	f006 f844 	bl	28f28 <_impl_k_yield>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   22ea0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22ea4:	480c      	ldr	r0, [pc, #48]	; (22ed8 <mgmt_thread+0x130>)
   22ea6:	f006 f9ab 	bl	29200 <_impl_k_sem_take>
	if (!events[out_event].event) {
   22eaa:	4b09      	ldr	r3, [pc, #36]	; (22ed0 <mgmt_thread+0x128>)
   22eac:	881b      	ldrh	r3, [r3, #0]
   22eae:	4a0b      	ldr	r2, [pc, #44]	; (22edc <mgmt_thread+0x134>)
   22eb0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   22eb4:	2a00      	cmp	r2, #0
   22eb6:	f43f af7d 	beq.w	22db4 <mgmt_thread+0xc>
	out_event++;
   22eba:	1c5a      	adds	r2, r3, #1
   22ebc:	b292      	uxth	r2, r2
   22ebe:	4904      	ldr	r1, [pc, #16]	; (22ed0 <mgmt_thread+0x128>)
   22ec0:	800a      	strh	r2, [r1, #0]
	if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   22ec2:	2a02      	cmp	r2, #2
   22ec4:	f43f af72 	beq.w	22dac <mgmt_thread+0x4>
	return &events[o_idx];
   22ec8:	4e04      	ldr	r6, [pc, #16]	; (22edc <mgmt_thread+0x134>)
   22eca:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   22ece:	e772      	b.n	22db6 <mgmt_thread+0xe>
   22ed0:	2000205c 	.word	0x2000205c
   22ed4:	20001fd4 	.word	0x20001fd4
   22ed8:	2000d12c 	.word	0x2000d12c
   22edc:	20001fdc 	.word	0x20001fdc

00022ee0 <net_mgmt_add_event_callback>:
	node->next = list->head;
   22ee0:	4b07      	ldr	r3, [pc, #28]	; (22f00 <net_mgmt_add_event_callback+0x20>)
   22ee2:	681a      	ldr	r2, [r3, #0]
   22ee4:	6002      	str	r2, [r0, #0]
	list->head = node;
   22ee6:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   22ee8:	685b      	ldr	r3, [r3, #4]
   22eea:	b12b      	cbz	r3, 22ef8 <net_mgmt_add_event_callback+0x18>
{
	NET_DBG("Adding event callback %p", cb);

	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);
   22eec:	6881      	ldr	r1, [r0, #8]
	global_event_mask |= event_mask;
   22eee:	4a05      	ldr	r2, [pc, #20]	; (22f04 <net_mgmt_add_event_callback+0x24>)
   22ef0:	6813      	ldr	r3, [r2, #0]
   22ef2:	430b      	orrs	r3, r1
   22ef4:	6013      	str	r3, [r2, #0]
   22ef6:	4770      	bx	lr
		list->tail = list->head;
   22ef8:	4b01      	ldr	r3, [pc, #4]	; (22f00 <net_mgmt_add_event_callback+0x20>)
   22efa:	6058      	str	r0, [r3, #4]
   22efc:	e7f6      	b.n	22eec <net_mgmt_add_event_callback+0xc>
   22efe:	bf00      	nop
   22f00:	20001fd4 	.word	0x20001fd4
   22f04:	20001fec 	.word	0x20001fec

00022f08 <net_mgmt_event_notify_with_info>:
	return ((mgmt_event & global_event_mask) == mgmt_event);
   22f08:	4b17      	ldr	r3, [pc, #92]	; (22f68 <net_mgmt_event_notify_with_info+0x60>)
   22f0a:	681b      	ldr	r3, [r3, #0]
}

void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length)
{
	if (mgmt_is_event_handled(mgmt_event)) {
   22f0c:	ea30 0303 	bics.w	r3, r0, r3
   22f10:	d000      	beq.n	22f14 <net_mgmt_event_notify_with_info+0xc>
   22f12:	4770      	bx	lr
{
   22f14:	b510      	push	{r4, lr}
	events[in_event].event = mgmt_event;
   22f16:	4c15      	ldr	r4, [pc, #84]	; (22f6c <net_mgmt_event_notify_with_info+0x64>)
   22f18:	8823      	ldrh	r3, [r4, #0]
   22f1a:	4a15      	ldr	r2, [pc, #84]	; (22f70 <net_mgmt_event_notify_with_info+0x68>)
   22f1c:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
	events[in_event].iface = iface;
   22f20:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   22f24:	6051      	str	r1, [r2, #4]
	in_event++;
   22f26:	3301      	adds	r3, #1
   22f28:	b29b      	uxth	r3, r3
   22f2a:	8023      	strh	r3, [r4, #0]
	if (in_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   22f2c:	2b02      	cmp	r3, #2
   22f2e:	d009      	beq.n	22f44 <net_mgmt_event_notify_with_info+0x3c>
	if (in_event == out_event) {
   22f30:	4b0e      	ldr	r3, [pc, #56]	; (22f6c <net_mgmt_event_notify_with_info+0x64>)
   22f32:	881a      	ldrh	r2, [r3, #0]
   22f34:	4b0f      	ldr	r3, [pc, #60]	; (22f74 <net_mgmt_event_notify_with_info+0x6c>)
   22f36:	881b      	ldrh	r3, [r3, #0]
   22f38:	429a      	cmp	r2, r3
   22f3a:	d006      	beq.n	22f4a <net_mgmt_event_notify_with_info+0x42>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   22f3c:	480e      	ldr	r0, [pc, #56]	; (22f78 <net_mgmt_event_notify_with_info+0x70>)
   22f3e:	f006 f94c 	bl	291da <_impl_k_sem_give>
   22f42:	bd10      	pop	{r4, pc}
		in_event = 0;
   22f44:	2200      	movs	r2, #0
   22f46:	8022      	strh	r2, [r4, #0]
   22f48:	e7f2      	b.n	22f30 <net_mgmt_event_notify_with_info+0x28>
		u16_t o_idx = out_event + 1;
   22f4a:	3301      	adds	r3, #1
   22f4c:	b29b      	uxth	r3, r3
		if (o_idx == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   22f4e:	2b02      	cmp	r3, #2
   22f50:	d007      	beq.n	22f62 <net_mgmt_event_notify_with_info+0x5a>
		if (events[o_idx].event) {
   22f52:	4a07      	ldr	r2, [pc, #28]	; (22f70 <net_mgmt_event_notify_with_info+0x68>)
   22f54:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   22f58:	2a00      	cmp	r2, #0
   22f5a:	d0ef      	beq.n	22f3c <net_mgmt_event_notify_with_info+0x34>
			out_event = o_idx;
   22f5c:	4a05      	ldr	r2, [pc, #20]	; (22f74 <net_mgmt_event_notify_with_info+0x6c>)
   22f5e:	8013      	strh	r3, [r2, #0]
   22f60:	e7ec      	b.n	22f3c <net_mgmt_event_notify_with_info+0x34>
			o_idx = 0;
   22f62:	2300      	movs	r3, #0
   22f64:	e7f5      	b.n	22f52 <net_mgmt_event_notify_with_info+0x4a>
   22f66:	bf00      	nop
   22f68:	20001fec 	.word	0x20001fec
   22f6c:	20001ff0 	.word	0x20001ff0
   22f70:	20001fdc 	.word	0x20001fdc
   22f74:	2000205c 	.word	0x2000205c
   22f78:	2000d12c 	.word	0x2000d12c

00022f7c <net_mgmt_event_init>:
	return mgmt_event_wait_call(iface, mgmt_event_mask,
				    raised_event, NULL, info, timeout);
}

void net_mgmt_event_init(void)
{
   22f7c:	b510      	push	{r4, lr}
   22f7e:	b086      	sub	sp, #24
	list->head = NULL;
   22f80:	4b0f      	ldr	r3, [pc, #60]	; (22fc0 <net_mgmt_event_init+0x44>)
   22f82:	2400      	movs	r4, #0
   22f84:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   22f86:	605c      	str	r4, [r3, #4]
	sys_slist_init(&event_callbacks);
	global_event_mask = 0;
   22f88:	4b0e      	ldr	r3, [pc, #56]	; (22fc4 <net_mgmt_event_init+0x48>)
   22f8a:	601c      	str	r4, [r3, #0]

	in_event = 0;
   22f8c:	4b0e      	ldr	r3, [pc, #56]	; (22fc8 <net_mgmt_event_init+0x4c>)
   22f8e:	801c      	strh	r4, [r3, #0]
	out_event = 0;
   22f90:	4b0e      	ldr	r3, [pc, #56]	; (22fcc <net_mgmt_event_init+0x50>)
   22f92:	801c      	strh	r4, [r3, #0]

	memset(events, 0,
   22f94:	2210      	movs	r2, #16
   22f96:	4621      	mov	r1, r4
   22f98:	480d      	ldr	r0, [pc, #52]	; (22fd0 <net_mgmt_event_init+0x54>)
   22f9a:	f007 f8f1 	bl	2a180 <memset>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   22f9e:	9405      	str	r4, [sp, #20]
   22fa0:	9404      	str	r4, [sp, #16]
   22fa2:	f06f 0308 	mvn.w	r3, #8
   22fa6:	9303      	str	r3, [sp, #12]
   22fa8:	9402      	str	r4, [sp, #8]
   22faa:	9401      	str	r4, [sp, #4]
   22fac:	9400      	str	r4, [sp, #0]
   22fae:	4b09      	ldr	r3, [pc, #36]	; (22fd4 <net_mgmt_event_init+0x58>)
   22fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
   22fb4:	4908      	ldr	r1, [pc, #32]	; (22fd8 <net_mgmt_event_init+0x5c>)
   22fb6:	4809      	ldr	r0, [pc, #36]	; (22fdc <net_mgmt_event_init+0x60>)
   22fb8:	f006 fb8e 	bl	296d8 <_impl_k_thread_create>
			K_PRIO_COOP(CONFIG_NET_MGMT_EVENT_THREAD_PRIO), 0, 0);

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
   22fbc:	b006      	add	sp, #24
   22fbe:	bd10      	pop	{r4, pc}
   22fc0:	20001fd4 	.word	0x20001fd4
   22fc4:	20001fec 	.word	0x20001fec
   22fc8:	20001ff0 	.word	0x20001ff0
   22fcc:	2000205c 	.word	0x2000205c
   22fd0:	20001fdc 	.word	0x20001fdc
   22fd4:	00022da9 	.word	0x00022da9
   22fd8:	200099c0 	.word	0x200099c0
   22fdc:	20001ff4 	.word	0x20001ff4

00022fe0 <net_udp_insert_raw>:

struct net_pkt *net_udp_insert_raw(struct net_pkt *pkt,
				   u16_t offset,
				   u16_t src_port,
				   u16_t dst_port)
{
   22fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   22fe2:	b085      	sub	sp, #20
   22fe4:	4605      	mov	r5, r0
   22fe6:	f8ad 2006 	strh.w	r2, [sp, #6]
   22fea:	f8ad 3004 	strh.w	r3, [sp, #4]
	struct net_buf *frag, *prev, *udp;
	u16_t pos;

	frag = net_frag_get_pos(pkt, offset, &pos);
   22fee:	f10d 020e 	add.w	r2, sp, #14
   22ff2:	f7fa fde5 	bl	1dbc0 <net_frag_get_pos>
	if (!frag && pos == 0xffff) {
   22ff6:	4602      	mov	r2, r0
   22ff8:	b168      	cbz	r0, 23016 <net_udp_insert_raw+0x36>
	}

	/* We can only insert the UDP header between existing two
	 * fragments.
	 */
	if (frag && pos != 0) {
   22ffa:	b11a      	cbz	r2, 23004 <net_udp_insert_raw+0x24>
   22ffc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   23000:	2b00      	cmp	r3, #0
   23002:	d15c      	bne.n	230be <net_udp_insert_raw+0xde>
		NET_DBG("Cannot insert UDP data into offset %d", offset);
		return NULL;
	}

	if (pkt->frags != frag) {
   23004:	68ab      	ldr	r3, [r5, #8]
   23006:	429a      	cmp	r2, r3
   23008:	d00d      	beq.n	23026 <net_udp_insert_raw+0x46>
		struct net_buf *tmp = pkt->frags;

		prev = NULL;

		while (tmp->frags) {
   2300a:	681c      	ldr	r4, [r3, #0]
   2300c:	b174      	cbz	r4, 2302c <net_udp_insert_raw+0x4c>
			if (tmp->frags == frag) {
   2300e:	42a2      	cmp	r2, r4
   23010:	d00b      	beq.n	2302a <net_udp_insert_raw+0x4a>
				prev = tmp;
				break;
			}

			tmp = tmp->frags;
   23012:	4623      	mov	r3, r4
   23014:	e7f9      	b.n	2300a <net_udp_insert_raw+0x2a>
	if (!frag && pos == 0xffff) {
   23016:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2301a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2301e:	4299      	cmp	r1, r3
   23020:	d1eb      	bne.n	22ffa <net_udp_insert_raw+0x1a>
		return NULL;
   23022:	2000      	movs	r0, #0
   23024:	e049      	b.n	230ba <net_udp_insert_raw+0xda>
		}
	} else {
		prev = pkt->frags;
   23026:	461c      	mov	r4, r3
   23028:	e000      	b.n	2302c <net_udp_insert_raw+0x4c>
				prev = tmp;
   2302a:	461c      	mov	r4, r3
	}

	if (!prev) {
   2302c:	2c00      	cmp	r4, #0
   2302e:	d048      	beq.n	230c2 <net_udp_insert_raw+0xe2>
		goto fail;
	}

	udp = net_pkt_get_frag(pkt, PKT_WAIT_TIME);
   23030:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   23034:	4628      	mov	r0, r5
   23036:	f7fa faa1 	bl	1d57c <net_pkt_get_frag>
	if (!udp) {
   2303a:	4607      	mov	r7, r0
   2303c:	2800      	cmp	r0, #0
   2303e:	d042      	beq.n	230c6 <net_udp_insert_raw+0xe6>
		goto fail;
	}

	/* Source and destination ports are already in network byte order */
	net_buf_add_mem(udp, &src_port, sizeof(src_port));
   23040:	f100 0608 	add.w	r6, r0, #8
   23044:	2202      	movs	r2, #2
   23046:	f10d 0106 	add.w	r1, sp, #6
   2304a:	4630      	mov	r0, r6
   2304c:	f7f7 fdcc 	bl	1abe8 <net_buf_simple_add_mem>
	net_buf_add_mem(udp, &dst_port, sizeof(dst_port));
   23050:	2202      	movs	r2, #2
   23052:	a901      	add	r1, sp, #4
   23054:	4630      	mov	r0, r6
   23056:	f7f7 fdc7 	bl	1abe8 <net_buf_simple_add_mem>
	return net_buf_frags_len(pkt->frags);
   2305a:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   2305c:	2200      	movs	r2, #0
   2305e:	e002      	b.n	23066 <net_udp_insert_raw+0x86>
		bytes += buf->len;
   23060:	8999      	ldrh	r1, [r3, #12]
   23062:	440a      	add	r2, r1
		buf = buf->frags;
   23064:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   23066:	2b00      	cmp	r3, #0
   23068:	d1fa      	bne.n	23060 <net_udp_insert_raw+0x80>

	net_buf_add_be16(udp, net_pkt_get_len(pkt) -
   2306a:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   2306e:	1a51      	subs	r1, r2, r1
   23070:	b289      	uxth	r1, r1
   23072:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
   23076:	1a89      	subs	r1, r1, r2
   23078:	b289      	uxth	r1, r1
   2307a:	3108      	adds	r1, #8
   2307c:	b289      	uxth	r1, r1
   2307e:	4630      	mov	r0, r6
   23080:	f7f7 fdd2 	bl	1ac28 <net_buf_simple_add_be16>
			 net_pkt_ip_hdr_len(pkt) -
			 net_pkt_ipv6_ext_len(pkt) +
			 sizeof(struct net_udp_hdr));

	net_buf_add_be16(udp, 0); /* chksum */
   23084:	2100      	movs	r1, #0
   23086:	4630      	mov	r0, r6
   23088:	f7f7 fdce 	bl	1ac28 <net_buf_simple_add_be16>

	net_buf_frag_insert(prev, udp);
   2308c:	4639      	mov	r1, r7
   2308e:	4620      	mov	r0, r4
   23090:	f7f7 fd7e 	bl	1ab90 <net_buf_frag_insert>

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   23094:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   23098:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   2309c:	4419      	add	r1, r3
   2309e:	3108      	adds	r1, #8
   230a0:	f10d 020e 	add.w	r2, sp, #14
   230a4:	b289      	uxth	r1, r1
   230a6:	4628      	mov	r0, r5
   230a8:	f7fa fd8a 	bl	1dbc0 <net_frag_get_pos>
				sizeof(struct net_udp_hdr),
				&pos);
	if (frag) {
   230ac:	b168      	cbz	r0, 230ca <net_udp_insert_raw+0xea>
		net_pkt_set_appdata(pkt, frag->data + pos);
   230ae:	6883      	ldr	r3, [r0, #8]
   230b0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   230b4:	4413      	add	r3, r2
	pkt->appdata = data;
   230b6:	61ab      	str	r3, [r5, #24]
	}

	return pkt;
   230b8:	4628      	mov	r0, r5

fail:
	NET_DBG("Cannot insert UDP header into %p", pkt);
	return NULL;
}
   230ba:	b005      	add	sp, #20
   230bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   230be:	2000      	movs	r0, #0
   230c0:	e7fb      	b.n	230ba <net_udp_insert_raw+0xda>
	return NULL;
   230c2:	2000      	movs	r0, #0
   230c4:	e7f9      	b.n	230ba <net_udp_insert_raw+0xda>
   230c6:	2000      	movs	r0, #0
   230c8:	e7f7      	b.n	230ba <net_udp_insert_raw+0xda>
	return pkt;
   230ca:	4628      	mov	r0, r5
   230cc:	e7f5      	b.n	230ba <net_udp_insert_raw+0xda>

000230ce <net_udp_set_chksum>:

struct net_buf *net_udp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   230ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   230d2:	b086      	sub	sp, #24
   230d4:	4606      	mov	r6, r0
   230d6:	460d      	mov	r5, r1
	struct net_udp_hdr *hdr;
	u16_t chksum = 0;
   230d8:	2300      	movs	r3, #0
   230da:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   230de:	f7fa fda5 	bl	1dc2c <net_pkt_udp_data>
   230e2:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   230e4:	2208      	movs	r2, #8
   230e6:	4601      	mov	r1, r0
   230e8:	4630      	mov	r0, r6
   230ea:	f7fb f95d 	bl	1e3a8 <net_header_fits>
   230ee:	b170      	cbz	r0, 2310e <net_udp_set_chksum+0x40>
		return hdr;
   230f0:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   230f2:	b173      	cbz	r3, 23112 <net_udp_set_chksum+0x44>
		hdr->chksum = 0;
   230f4:	2300      	movs	r3, #0
   230f6:	71a3      	strb	r3, [r4, #6]
   230f8:	71e3      	strb	r3, [r4, #7]
	return net_calc_chksum(pkt, IPPROTO_UDP);
   230fa:	2111      	movs	r1, #17
   230fc:	4630      	mov	r0, r6
   230fe:	f7fb f8fa 	bl	1e2f6 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_udp(pkt);
   23102:	43c0      	mvns	r0, r0
   23104:	80e0      	strh	r0, [r4, #6]

		return frag;
   23106:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   23108:	b006      	add	sp, #24
   2310a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   2310e:	2300      	movs	r3, #0
   23110:	e7ef      	b.n	230f2 <net_udp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   23112:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   23116:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   2311a:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   2311c:	3206      	adds	r2, #6
   2311e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   23122:	f8cd 8008 	str.w	r8, [sp, #8]
   23126:	f10d 0416 	add.w	r4, sp, #22
   2312a:	9401      	str	r4, [sp, #4]
   2312c:	2702      	movs	r7, #2
   2312e:	9700      	str	r7, [sp, #0]
   23130:	ab05      	add	r3, sp, #20
   23132:	b292      	uxth	r2, r2
   23134:	4629      	mov	r1, r5
   23136:	4630      	mov	r0, r6
   23138:	f7fa fc63 	bl	1da02 <net_pkt_write>
   2313c:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_UDP);
   2313e:	2111      	movs	r1, #17
   23140:	4630      	mov	r0, r6
   23142:	f7fb f8d8 	bl	1e2f6 <net_calc_chksum>
	chksum = ~net_calc_chksum_udp(pkt);
   23146:	43c0      	mvns	r0, r0
   23148:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   2314c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   23150:	3a02      	subs	r2, #2
   23152:	f8cd 8008 	str.w	r8, [sp, #8]
   23156:	9401      	str	r4, [sp, #4]
   23158:	9700      	str	r7, [sp, #0]
   2315a:	ab05      	add	r3, sp, #20
   2315c:	b292      	uxth	r2, r2
   2315e:	4629      	mov	r1, r5
   23160:	4630      	mov	r0, r6
   23162:	f7fa fc4e 	bl	1da02 <net_pkt_write>
	return frag;
   23166:	e7cf      	b.n	23108 <net_udp_set_chksum+0x3a>

00023168 <net_udp_get_chksum>:

u16_t net_udp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   23168:	b570      	push	{r4, r5, r6, lr}
   2316a:	b084      	sub	sp, #16
   2316c:	4605      	mov	r5, r0
   2316e:	460e      	mov	r6, r1
	struct net_udp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   23170:	f7fa fd5c 	bl	1dc2c <net_pkt_udp_data>
   23174:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23176:	2208      	movs	r2, #8
   23178:	4601      	mov	r1, r0
   2317a:	4628      	mov	r0, r5
   2317c:	f7fb f914 	bl	1e3a8 <net_header_fits>
   23180:	b120      	cbz	r0, 2318c <net_udp_get_chksum+0x24>
		return hdr;
   23182:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   23184:	b123      	cbz	r3, 23190 <net_udp_get_chksum+0x28>
		return hdr->chksum;
   23186:	88e0      	ldrh	r0, [r4, #6]
			     2 + 2 + 2 /* src + dst + len */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   23188:	b004      	add	sp, #16
   2318a:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   2318c:	2300      	movs	r3, #0
   2318e:	e7f9      	b.n	23184 <net_udp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   23190:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   23194:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   23198:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   2319a:	3106      	adds	r1, #6
   2319c:	f10d 030e 	add.w	r3, sp, #14
   231a0:	9300      	str	r3, [sp, #0]
   231a2:	2302      	movs	r3, #2
   231a4:	aa03      	add	r2, sp, #12
   231a6:	b289      	uxth	r1, r1
   231a8:	4630      	mov	r0, r6
   231aa:	f7fa fbb8 	bl	1d91e <net_frag_read>
	return chksum;
   231ae:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   231b2:	e7e9      	b.n	23188 <net_udp_get_chksum+0x20>

000231b4 <net_udp_get_hdr>:

struct net_udp_hdr *net_udp_get_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   231b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   231b6:	b085      	sub	sp, #20
   231b8:	4605      	mov	r5, r0
   231ba:	460f      	mov	r7, r1
	struct net_udp_hdr *udp_hdr;
	struct net_buf *frag;
	u16_t pos;

	udp_hdr = net_pkt_udp_data(pkt);
   231bc:	f7fa fd36 	bl	1dc2c <net_pkt_udp_data>
   231c0:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   231c2:	2208      	movs	r2, #8
   231c4:	4601      	mov	r1, r0
   231c6:	4628      	mov	r0, r5
   231c8:	f7fb f8ee 	bl	1e3a8 <net_header_fits>
   231cc:	b120      	cbz	r0, 231d8 <net_udp_get_hdr+0x24>
		return hdr;
   231ce:	4626      	mov	r6, r4
	if (net_udp_header_fits(pkt, udp_hdr)) {
   231d0:	b126      	cbz	r6, 231dc <net_udp_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   231d2:	4620      	mov	r0, r4
   231d4:	b005      	add	sp, #20
   231d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   231d8:	2600      	movs	r6, #0
   231da:	e7f9      	b.n	231d0 <net_udp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   231dc:	68a8      	ldr	r0, [r5, #8]
   231de:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   231e2:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   231e6:	9700      	str	r7, [sp, #0]
   231e8:	2302      	movs	r3, #2
   231ea:	f10d 020e 	add.w	r2, sp, #14
   231ee:	4421      	add	r1, r4
   231f0:	f7fa fb95 	bl	1d91e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   231f4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   231f8:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   231fa:	9300      	str	r3, [sp, #0]
   231fc:	2302      	movs	r3, #2
   231fe:	f10d 020e 	add.w	r2, sp, #14
   23202:	f7fa fb8c 	bl	1d91e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   23206:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->len);
   2320a:	1d3b      	adds	r3, r7, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   2320c:	9300      	str	r3, [sp, #0]
   2320e:	2302      	movs	r3, #2
   23210:	f10d 020e 	add.w	r2, sp, #14
   23214:	f7fa fb83 	bl	1d91e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23218:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   2321c:	1dbb      	adds	r3, r7, #6
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   2321e:	9300      	str	r3, [sp, #0]
   23220:	2302      	movs	r3, #2
   23222:	f10d 020e 	add.w	r2, sp, #14
   23226:	f7fa fb7a 	bl	1d91e <net_frag_read>
	if (!frag) {
   2322a:	b108      	cbz	r0, 23230 <net_udp_get_hdr+0x7c>
	return hdr;
   2322c:	463c      	mov	r4, r7
   2322e:	e7d0      	b.n	231d2 <net_udp_get_hdr+0x1e>
		return NULL;
   23230:	4634      	mov	r4, r6
   23232:	e7ce      	b.n	231d2 <net_udp_get_hdr+0x1e>

00023234 <net_udp_set_hdr>:

struct net_udp_hdr *net_udp_set_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   23234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23238:	b086      	sub	sp, #24
   2323a:	4606      	mov	r6, r0
   2323c:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2323e:	2208      	movs	r2, #8
   23240:	f7fb f8b2 	bl	1e3a8 <net_header_fits>
   23244:	b128      	cbz	r0, 23252 <net_udp_set_hdr+0x1e>
		return hdr;
   23246:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_udp_header_fits(pkt, hdr)) {
   23248:	b12d      	cbz	r5, 23256 <net_udp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   2324a:	4620      	mov	r0, r4
   2324c:	b006      	add	sp, #24
   2324e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   23252:	2500      	movs	r5, #0
   23254:	e7f8      	b.n	23248 <net_udp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23256:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   2325a:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2325e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   23262:	f8cd 8008 	str.w	r8, [sp, #8]
   23266:	9401      	str	r4, [sp, #4]
   23268:	2702      	movs	r7, #2
   2326a:	9700      	str	r7, [sp, #0]
   2326c:	f10d 0316 	add.w	r3, sp, #22
   23270:	440a      	add	r2, r1
   23272:	68b1      	ldr	r1, [r6, #8]
   23274:	4630      	mov	r0, r6
   23276:	f7fa fbc4 	bl	1da02 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   2327a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, PKT_WAIT_TIME);
   2327e:	19e3      	adds	r3, r4, r7
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   23280:	f8cd 8008 	str.w	r8, [sp, #8]
   23284:	9301      	str	r3, [sp, #4]
   23286:	9700      	str	r7, [sp, #0]
   23288:	f10d 0316 	add.w	r3, sp, #22
   2328c:	4601      	mov	r1, r0
   2328e:	4630      	mov	r0, r6
   23290:	f7fa fbb7 	bl	1da02 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   23294:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->len, PKT_WAIT_TIME);
   23298:	1d23      	adds	r3, r4, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   2329a:	f8cd 8008 	str.w	r8, [sp, #8]
   2329e:	9301      	str	r3, [sp, #4]
   232a0:	9700      	str	r7, [sp, #0]
   232a2:	f10d 0316 	add.w	r3, sp, #22
   232a6:	4601      	mov	r1, r0
   232a8:	4630      	mov	r0, r6
   232aa:	f7fa fbaa 	bl	1da02 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   232ae:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   232b2:	1da3      	adds	r3, r4, #6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   232b4:	f8cd 8008 	str.w	r8, [sp, #8]
   232b8:	9301      	str	r3, [sp, #4]
   232ba:	9700      	str	r7, [sp, #0]
   232bc:	f10d 0316 	add.w	r3, sp, #22
   232c0:	4601      	mov	r1, r0
   232c2:	4630      	mov	r0, r6
   232c4:	f7fa fb9d 	bl	1da02 <net_pkt_write>
	if (!frag) {
   232c8:	2800      	cmp	r0, #0
   232ca:	d1be      	bne.n	2324a <net_udp_set_hdr+0x16>
		return NULL;
   232cc:	462c      	mov	r4, r5
   232ce:	e7bc      	b.n	2324a <net_udp_set_hdr+0x16>

000232d0 <net_udp_insert>:

struct net_pkt *net_udp_insert(struct net_context *context,
			       struct net_pkt *pkt,
			       u16_t offset,
			       u16_t port)
{
   232d0:	b510      	push	{r4, lr}
   232d2:	460c      	mov	r4, r1
   232d4:	4611      	mov	r1, r2
	return net_udp_insert_raw(pkt,
   232d6:	8942      	ldrh	r2, [r0, #10]
   232d8:	4620      	mov	r0, r4
   232da:	f7ff fe81 	bl	22fe0 <net_udp_insert_raw>
				  offset,
				  net_sin((struct sockaddr *)
					  &context->local)->sin_port,
				  port);
}
   232de:	bd10      	pop	{r4, pc}

000232e0 <net_udp_init>:
{
	return net_conn_unregister(handle);
}

void net_udp_init(void)
{
   232e0:	4770      	bx	lr

000232e2 <abort_connection>:
			pkt = net_pkt_ref(pkt);				\
		}							\
	} while (0)

static void abort_connection(struct net_tcp *tcp)
{
   232e2:	b538      	push	{r3, r4, r5, lr}
	struct net_context *ctx = tcp->context;
   232e4:	6804      	ldr	r4, [r0, #0]

	NET_DBG("[%p] segment retransmission exceeds %d, resetting context %p",
		tcp, CONFIG_NET_TCP_RETRY_COUNT, ctx);

	if (ctx->recv_cb) {
   232e6:	6b25      	ldr	r5, [r4, #48]	; 0x30
   232e8:	b12d      	cbz	r5, 232f6 <abort_connection+0x14>
		ctx->recv_cb(ctx, NULL, -ECONNRESET, tcp->recv_user_data);
   232ea:	6843      	ldr	r3, [r0, #4]
   232ec:	f06f 0267 	mvn.w	r2, #103	; 0x67
   232f0:	2100      	movs	r1, #0
   232f2:	4620      	mov	r0, r4
   232f4:	47a8      	blx	r5
	}

	net_context_unref(ctx);
   232f6:	4620      	mov	r0, r4
   232f8:	f7f9 fba8 	bl	1ca4c <net_context_unref>
   232fc:	bd38      	pop	{r3, r4, r5, pc}

000232fe <restart_timer>:

	return net_send_data(pkt);
}

static void restart_timer(struct net_tcp *tcp)
{
   232fe:	b510      	push	{r4, lr}
   23300:	4604      	mov	r4, r0
	return (!list->head);
   23302:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   23306:	b17b      	cbz	r3, 23328 <restart_timer+0x2a>
		tcp->flags |= NET_TCP_RETRYING;
   23308:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   2330c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   23310:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		tcp->retry_timeout_shift = 0;
   23314:	f36f 0304 	bfc	r3, #0, #5
   23318:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   2331c:	2200      	movs	r2, #0
   2331e:	21c8      	movs	r1, #200	; 0xc8
   23320:	3058      	adds	r0, #88	; 0x58
   23322:	f006 fb63 	bl	299ec <_impl_k_timer_start>
   23326:	bd10      	pop	{r4, pc}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   23328:	3058      	adds	r0, #88	; 0x58
   2332a:	f006 fc17 	bl	29b5c <_impl_k_timer_stop>
			k_timer_start(&tcp->retry_timer, TIME_WAIT_MS, 0);
			net_context_ref(tcp->context);
		}
	} else {
		k_timer_stop(&tcp->retry_timer);
		tcp->flags &= ~NET_TCP_RETRYING;
   2332e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   23332:	f3c3 1247 	ubfx	r2, r3, #5, #8
   23336:	f022 0210 	bic.w	r2, r2, #16
   2333a:	f362 134c 	bfi	r3, r2, #5, #8
   2333e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
   23342:	bd10      	pop	{r4, pc}

00023344 <ack_timer_cancel>:
{
   23344:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->ack_timer);
   23346:	3008      	adds	r0, #8
   23348:	f006 fd36 	bl	29db8 <k_delayed_work_cancel>
   2334c:	bd08      	pop	{r3, pc}

0002334e <fin_timer_cancel>:
{
   2334e:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->fin_timer);
   23350:	3030      	adds	r0, #48	; 0x30
   23352:	f006 fd31 	bl	29db8 <k_delayed_work_cancel>
   23356:	bd08      	pop	{r3, pc}

00023358 <finalize_segment>:
{
   23358:	b508      	push	{r3, lr}
	return pkt->family;
   2335a:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   2335e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   23362:	2b0a      	cmp	r3, #10
   23364:	d001      	beq.n	2336a <finalize_segment+0x12>
	return 0;
   23366:	2000      	movs	r0, #0
}
   23368:	bd08      	pop	{r3, pc}
		return net_ipv6_finalize(context, pkt);
   2336a:	f7fc fe17 	bl	1ff9c <net_ipv6_finalize>
   2336e:	bd08      	pop	{r3, pc}

00023370 <prepare_segment>:
{
   23370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23374:	b085      	sub	sp, #20
   23376:	4606      	mov	r6, r0
   23378:	460d      	mov	r5, r1
	struct net_context *context = tcp->context;
   2337a:	6807      	ldr	r7, [r0, #0]
	if (pkt) {
   2337c:	b192      	cbz	r2, 233a4 <prepare_segment+0x34>
   2337e:	4614      	mov	r4, r2
		tail = pkt->frags;
   23380:	f8d2 8008 	ldr.w	r8, [r2, #8]
		pkt->frags = NULL;
   23384:	2300      	movs	r3, #0
   23386:	6093      	str	r3, [r2, #8]
		pkt_allocated = false;
   23388:	469a      	mov	sl, r3
   2338a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2338e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   23392:	2b0a      	cmp	r3, #10
   23394:	d013      	beq.n	233be <prepare_segment+0x4e>
		if (pkt_allocated) {
   23396:	f1ba 0f00 	cmp.w	sl, #0
   2339a:	d174      	bne.n	23486 <prepare_segment+0x116>
		return NULL;
   2339c:	2000      	movs	r0, #0
}
   2339e:	b005      	add	sp, #20
   233a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt = net_pkt_get_tx(context, ALLOC_TIMEOUT);
   233a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   233a8:	4638      	mov	r0, r7
   233aa:	f7fa f907 	bl	1d5bc <net_pkt_get_tx>
		if (!pkt) {
   233ae:	4604      	mov	r4, r0
   233b0:	2800      	cmp	r0, #0
   233b2:	d0f4      	beq.n	2339e <prepare_segment+0x2e>
		pkt_allocated = true;
   233b4:	f04f 0a01 	mov.w	sl, #1
	struct net_buf *header, *tail = NULL;
   233b8:	f04f 0800 	mov.w	r8, #0
   233bc:	e7e5      	b.n	2338a <prepare_segment+0x1a>
				net_sin6_ptr(segment->src_addr)->sin6_addr,
   233be:	692a      	ldr	r2, [r5, #16]
				&(net_sin6(segment->dst_addr)->sin6_addr));
   233c0:	696b      	ldr	r3, [r5, #20]
		net_ipv6_create(tcp->context, pkt,
   233c2:	3304      	adds	r3, #4
   233c4:	6852      	ldr	r2, [r2, #4]
   233c6:	4621      	mov	r1, r4
   233c8:	6830      	ldr	r0, [r6, #0]
   233ca:	f7fc fb8b 	bl	1fae4 <net_ipv6_create>
		dst_port = net_sin6(segment->dst_addr)->sin6_port;
   233ce:	696b      	ldr	r3, [r5, #20]
   233d0:	f8b3 b002 	ldrh.w	fp, [r3, #2]
		src_port = ((struct sockaddr_in6_ptr *)&context->local)->
   233d4:	897b      	ldrh	r3, [r7, #10]
   233d6:	9302      	str	r3, [sp, #8]
	return pkt->frags->data;
   233d8:	68a3      	ldr	r3, [r4, #8]
   233da:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_TCP;
   233dc:	2206      	movs	r2, #6
   233de:	719a      	strb	r2, [r3, #6]
	header = net_pkt_get_data(context, ALLOC_TIMEOUT);
   233e0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   233e4:	4638      	mov	r0, r7
   233e6:	f7fa f8fb 	bl	1d5e0 <net_pkt_get_data>
	if (!header) {
   233ea:	9001      	str	r0, [sp, #4]
   233ec:	2800      	cmp	r0, #0
   233ee:	d04f      	beq.n	23490 <prepare_segment+0x120>
	net_pkt_frag_add(pkt, header);
   233f0:	9e01      	ldr	r6, [sp, #4]
   233f2:	4631      	mov	r1, r6
   233f4:	4620      	mov	r0, r4
   233f6:	f7fa f93e 	bl	1d676 <net_pkt_frag_add>
	tcp_hdr = (struct net_tcp_hdr *)net_buf_add(header, NET_TCPH_LEN);
   233fa:	2114      	movs	r1, #20
   233fc:	f106 0008 	add.w	r0, r6, #8
   23400:	f7f7 fbec 	bl	1abdc <net_buf_simple_add>
   23404:	4606      	mov	r6, r0
	if (segment->options && segment->optlen) {
   23406:	68eb      	ldr	r3, [r5, #12]
   23408:	9303      	str	r3, [sp, #12]
   2340a:	2b00      	cmp	r3, #0
   2340c:	d05d      	beq.n	234ca <prepare_segment+0x15a>
   2340e:	f895 900b 	ldrb.w	r9, [r5, #11]
   23412:	f1b9 0f00 	cmp.w	r9, #0
   23416:	d145      	bne.n	234a4 <prepare_segment+0x134>
	tcp_hdr->offset = (NET_TCPH_LEN + optlen) << 2;
   23418:	f109 0914 	add.w	r9, r9, #20
   2341c:	fa5f f989 	uxtb.w	r9, r9
   23420:	ea4f 0989 	mov.w	r9, r9, lsl #2
   23424:	f886 900c 	strb.w	r9, [r6, #12]
	tcp_hdr->src_port = src_port;
   23428:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2342c:	8033      	strh	r3, [r6, #0]
	tcp_hdr->dst_port = dst_port;
   2342e:	f8a6 b002 	strh.w	fp, [r6, #2]
	sys_put_be32(segment->seq, tcp_hdr->seq);
   23432:	682b      	ldr	r3, [r5, #0]
	sys_put_be16(val >> 16, dst);
   23434:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   23436:	0a11      	lsrs	r1, r2, #8
   23438:	7131      	strb	r1, [r6, #4]
	dst[1] = val;
   2343a:	7172      	strb	r2, [r6, #5]
	dst[0] = val >> 8;
   2343c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   23440:	71b2      	strb	r2, [r6, #6]
	dst[1] = val;
   23442:	71f3      	strb	r3, [r6, #7]
	sys_put_be32(segment->ack, tcp_hdr->ack);
   23444:	686b      	ldr	r3, [r5, #4]
	sys_put_be16(val >> 16, dst);
   23446:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   23448:	0a11      	lsrs	r1, r2, #8
   2344a:	7231      	strb	r1, [r6, #8]
	dst[1] = val;
   2344c:	7272      	strb	r2, [r6, #9]
	dst[0] = val >> 8;
   2344e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   23452:	72b2      	strb	r2, [r6, #10]
	dst[1] = val;
   23454:	72f3      	strb	r3, [r6, #11]
	tcp_hdr->flags = segment->flags;
   23456:	7aab      	ldrb	r3, [r5, #10]
   23458:	7373      	strb	r3, [r6, #13]
	sys_put_be16(segment->wnd, tcp_hdr->wnd);
   2345a:	892b      	ldrh	r3, [r5, #8]
	dst[0] = val >> 8;
   2345c:	0a1a      	lsrs	r2, r3, #8
   2345e:	73b2      	strb	r2, [r6, #14]
	dst[1] = val;
   23460:	73f3      	strb	r3, [r6, #15]
	tcp_hdr->urg[0] = 0;
   23462:	2300      	movs	r3, #0
   23464:	74b3      	strb	r3, [r6, #18]
	tcp_hdr->urg[1] = 0;
   23466:	74f3      	strb	r3, [r6, #19]
	if (tail) {
   23468:	f1b8 0f00 	cmp.w	r8, #0
   2346c:	d003      	beq.n	23476 <prepare_segment+0x106>
		net_pkt_frag_add(pkt, tail);
   2346e:	4641      	mov	r1, r8
   23470:	4620      	mov	r0, r4
   23472:	f7fa f900 	bl	1d676 <net_pkt_frag_add>
	if (finalize_segment(context, pkt) < 0) {
   23476:	4621      	mov	r1, r4
   23478:	4638      	mov	r0, r7
   2347a:	f7ff ff6d 	bl	23358 <finalize_segment>
   2347e:	2800      	cmp	r0, #0
   23480:	db26      	blt.n	234d0 <prepare_segment+0x160>
	return pkt;
   23482:	4620      	mov	r0, r4
   23484:	e78b      	b.n	2339e <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   23486:	4620      	mov	r0, r4
   23488:	f7fa f8cb 	bl	1d622 <net_pkt_unref>
		return NULL;
   2348c:	2000      	movs	r0, #0
   2348e:	e786      	b.n	2339e <prepare_segment+0x2e>
		if (pkt_allocated) {
   23490:	f1ba 0f00 	cmp.w	sl, #0
   23494:	d101      	bne.n	2349a <prepare_segment+0x12a>
		return NULL;
   23496:	2000      	movs	r0, #0
   23498:	e781      	b.n	2339e <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   2349a:	4620      	mov	r0, r4
   2349c:	f7fa f8c1 	bl	1d622 <net_pkt_unref>
		return NULL;
   234a0:	2000      	movs	r0, #0
   234a2:	e77c      	b.n	2339e <prepare_segment+0x2e>
	memcpy(net_buf_add(header, len), data, len);
   234a4:	4649      	mov	r1, r9
   234a6:	9801      	ldr	r0, [sp, #4]
   234a8:	3008      	adds	r0, #8
   234aa:	f7f7 fb97 	bl	1abdc <net_buf_simple_add>
   234ae:	464a      	mov	r2, r9
   234b0:	9903      	ldr	r1, [sp, #12]
   234b2:	f7dc ff05 	bl	2c0 <memcpy>
	if ((len & 0x3u) != 0u) {
   234b6:	f019 0f03 	tst.w	r9, #3
   234ba:	d0ad      	beq.n	23418 <prepare_segment+0xa8>
		optlen = (len & 0xfffCu) + 4u;
   234bc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
   234c0:	f109 0904 	add.w	r9, r9, #4
   234c4:	fa5f f989 	uxtb.w	r9, r9
   234c8:	e7a6      	b.n	23418 <prepare_segment+0xa8>
	u8_t optlen = 0;
   234ca:	f04f 0900 	mov.w	r9, #0
   234ce:	e7a3      	b.n	23418 <prepare_segment+0xa8>
		if (pkt_allocated) {
   234d0:	f1ba 0f00 	cmp.w	sl, #0
   234d4:	d101      	bne.n	234da <prepare_segment+0x16a>
		return NULL;
   234d6:	2000      	movs	r0, #0
   234d8:	e761      	b.n	2339e <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   234da:	4620      	mov	r0, r4
   234dc:	f7fa f8a1 	bl	1d622 <net_pkt_unref>
		return NULL;
   234e0:	2000      	movs	r0, #0
   234e2:	e75c      	b.n	2339e <prepare_segment+0x2e>

000234e4 <net_tcp_alloc>:
{
   234e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   234e6:	f04f 0320 	mov.w	r3, #32
   234ea:	f3ef 8411 	mrs	r4, BASEPRI
   234ee:	f383 8811 	msr	BASEPRI, r3
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   234f2:	2300      	movs	r3, #0
   234f4:	2b05      	cmp	r3, #5
   234f6:	dc18      	bgt.n	2352a <net_tcp_alloc+0x46>
	return tcp->flags & NET_TCP_IN_USE;
   234f8:	22c8      	movs	r2, #200	; 0xc8
   234fa:	492b      	ldr	r1, [pc, #172]	; (235a8 <net_tcp_alloc+0xc4>)
   234fc:	fb02 1203 	mla	r2, r2, r3, r1
   23500:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
   23504:	f3c2 1247 	ubfx	r2, r2, #5, #8
		if (!net_tcp_is_used(&tcp_context[i])) {
   23508:	f012 0f01 	tst.w	r2, #1
   2350c:	d001      	beq.n	23512 <net_tcp_alloc+0x2e>
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   2350e:	3301      	adds	r3, #1
   23510:	e7f0      	b.n	234f4 <net_tcp_alloc+0x10>
			tcp_context[i].flags |= NET_TCP_IN_USE;
   23512:	21c8      	movs	r1, #200	; 0xc8
   23514:	4d24      	ldr	r5, [pc, #144]	; (235a8 <net_tcp_alloc+0xc4>)
   23516:	fb01 5103 	mla	r1, r1, r3, r5
   2351a:	f042 0201 	orr.w	r2, r2, #1
   2351e:	f8b1 50a4 	ldrh.w	r5, [r1, #164]	; 0xa4
   23522:	f362 154c 	bfi	r5, r2, #5, #8
   23526:	f8a1 50a4 	strh.w	r5, [r1, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2352a:	f384 8811 	msr	BASEPRI, r4
	if (i >= NET_MAX_TCP_CONTEXT) {
   2352e:	2b05      	cmp	r3, #5
   23530:	dc37      	bgt.n	235a2 <net_tcp_alloc+0xbe>
   23532:	4607      	mov	r7, r0
	memset(&tcp_context[i], 0, sizeof(struct net_tcp));
   23534:	4e1c      	ldr	r6, [pc, #112]	; (235a8 <net_tcp_alloc+0xc4>)
   23536:	22c8      	movs	r2, #200	; 0xc8
   23538:	fb02 f403 	mul.w	r4, r2, r3
   2353c:	1935      	adds	r5, r6, r4
   2353e:	2100      	movs	r1, #0
   23540:	4628      	mov	r0, r5
   23542:	f006 fe1d 	bl	2a180 <memset>
	tcp_context[i].flags = NET_TCP_IN_USE;
   23546:	f8b5 20a4 	ldrh.w	r2, [r5, #164]	; 0xa4
   2354a:	2101      	movs	r1, #1
   2354c:	f361 124c 	bfi	r2, r1, #5, #8
   23550:	f8a5 20a4 	strh.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].state = NET_TCP_CLOSED;
   23554:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   23558:	f36f 3250 	bfc	r2, #13, #4
   2355c:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].context = context;
   23560:	5137      	str	r7, [r6, r4]
	return sys_rand32_get();
   23562:	f7de fd2d 	bl	1fc0 <sys_rand32_get>
	tcp_context[i].send_seq = tcp_init_isn();
   23566:	f8c5 0098 	str.w	r0, [r5, #152]	; 0x98
	tcp_context[i].recv_max_ack = tcp_context[i].send_seq + 1u;
   2356a:	3001      	adds	r0, #1
   2356c:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
	tcp_context[i].recv_wnd = min(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   23570:	f44f 63a0 	mov.w	r3, #1280	; 0x500
   23574:	f8a5 30c4 	strh.w	r3, [r5, #196]	; 0xc4
	tcp_context[i].accept_cb = NULL;
   23578:	2700      	movs	r7, #0
   2357a:	f8c5 70a8 	str.w	r7, [r5, #168]	; 0xa8
	k_timer_init(&tcp_context[i].retry_timer, tcp_retry_expired, NULL);
   2357e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   23582:	463a      	mov	r2, r7
   23584:	4909      	ldr	r1, [pc, #36]	; (235ac <net_tcp_alloc+0xc8>)
   23586:	4430      	add	r0, r6
   23588:	f006 fa1c 	bl	299c4 <k_timer_init>
	k_sem_init(&tcp_context[i].connect_wait, 0, UINT_MAX);
   2358c:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
   23590:	18f0      	adds	r0, r6, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   23592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23596:	4639      	mov	r1, r7
   23598:	3004      	adds	r0, #4
   2359a:	f005 fe15 	bl	291c8 <_impl_k_sem_init>
}
   2359e:	4628      	mov	r0, r5
   235a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   235a2:	2500      	movs	r5, #0
   235a4:	e7fb      	b.n	2359e <net_tcp_alloc+0xba>
   235a6:	bf00      	nop
   235a8:	20002060 	.word	0x20002060
   235ac:	00023f21 	.word	0x00023f21

000235b0 <net_tcp_get_recv_wnd>:
}
   235b0:	f8b0 00c4 	ldrh.w	r0, [r0, #196]	; 0xc4
   235b4:	4770      	bx	lr

000235b6 <net_tcp_get_recv_mss>:
{
   235b6:	b508      	push	{r3, lr}
	sa_family_t family = net_context_get_family(tcp->context);
   235b8:	6802      	ldr	r2, [r0, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   235ba:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
   235be:	f013 0f10 	tst.w	r3, #16
   235c2:	d006      	beq.n	235d2 <net_tcp_get_recv_mss+0x1c>
		return AF_INET6;
   235c4:	230a      	movs	r3, #10
	if (family == AF_INET) {
   235c6:	2b02      	cmp	r3, #2
   235c8:	d019      	beq.n	235fe <net_tcp_get_recv_mss+0x48>
	else if (family == AF_INET6) {
   235ca:	2b0a      	cmp	r3, #10
   235cc:	d003      	beq.n	235d6 <net_tcp_get_recv_mss+0x20>
	return 0;
   235ce:	2000      	movs	r0, #0
}
   235d0:	bd08      	pop	{r3, pc}
	return AF_INET;
   235d2:	2302      	movs	r3, #2
   235d4:	e7f7      	b.n	235c6 <net_tcp_get_recv_mss+0x10>
	return net_if_get_by_index(context->iface);
   235d6:	f892 005c 	ldrb.w	r0, [r2, #92]	; 0x5c
   235da:	f7f8 fddb 	bl	1c194 <net_if_get_by_index>
		if (iface && iface->mtu >= NET_IPV6TCPH_LEN) {
   235de:	b120      	cbz	r0, 235ea <net_tcp_get_recv_mss+0x34>
   235e0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   235e2:	283b      	cmp	r0, #59	; 0x3b
   235e4:	d903      	bls.n	235ee <net_tcp_get_recv_mss+0x38>
			mss = iface->mtu - NET_IPV6TCPH_LEN;
   235e6:	383c      	subs	r0, #60	; 0x3c
   235e8:	e002      	b.n	235f0 <net_tcp_get_recv_mss+0x3a>
		int mss = 0;
   235ea:	2000      	movs	r0, #0
   235ec:	e000      	b.n	235f0 <net_tcp_get_recv_mss+0x3a>
   235ee:	2000      	movs	r0, #0
		if (mss < NET_IPV6_MTU) {
   235f0:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
   235f4:	da01      	bge.n	235fa <net_tcp_get_recv_mss+0x44>
			mss = NET_IPV6_MTU;
   235f6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
		return mss;
   235fa:	b280      	uxth	r0, r0
   235fc:	bd08      	pop	{r3, pc}
		return 0;
   235fe:	2000      	movs	r0, #0
   23600:	bd08      	pop	{r3, pc}

00023602 <net_tcp_set_syn_opt>:
{
   23602:	b570      	push	{r4, r5, r6, lr}
   23604:	460e      	mov	r6, r1
   23606:	4614      	mov	r4, r2
	*optionlen = 0;
   23608:	2300      	movs	r3, #0
   2360a:	7013      	strb	r3, [r2, #0]
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   2360c:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   23610:	f413 6f80 	tst.w	r3, #1024	; 0x400
   23614:	d00f      	beq.n	23636 <net_tcp_set_syn_opt+0x34>
		recv_mss = 0;
   23616:	2000      	movs	r0, #0
	UNALIGNED_PUT(htonl((u32_t)recv_mss | NET_TCP_MSS_HEADER),
   23618:	7822      	ldrb	r2, [r4, #0]
   2361a:	0203      	lsls	r3, r0, #8
   2361c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   23620:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   23624:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   23628:	f040 0002 	orr.w	r0, r0, #2
   2362c:	50b0      	str	r0, [r6, r2]
	*optionlen += NET_TCP_MSS_SIZE;
   2362e:	7823      	ldrb	r3, [r4, #0]
   23630:	3304      	adds	r3, #4
   23632:	7023      	strb	r3, [r4, #0]
   23634:	bd70      	pop	{r4, r5, r6, pc}
   23636:	4605      	mov	r5, r0
		recv_mss = net_tcp_get_recv_mss(tcp);
   23638:	f7ff ffbd 	bl	235b6 <net_tcp_get_recv_mss>
		tcp->flags |= NET_TCP_RECV_MSS_SET;
   2363c:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   23640:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   23644:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
   23648:	e7e6      	b.n	23618 <net_tcp_set_syn_opt+0x16>

0002364a <net_tcp_prepare_reset>:
{
   2364a:	b510      	push	{r4, lr}
   2364c:	b086      	sub	sp, #24
	struct tcp_segment segment = { 0 };
   2364e:	2300      	movs	r3, #0
   23650:	9300      	str	r3, [sp, #0]
   23652:	9301      	str	r3, [sp, #4]
   23654:	9302      	str	r3, [sp, #8]
   23656:	9303      	str	r3, [sp, #12]
   23658:	9304      	str	r3, [sp, #16]
   2365a:	9305      	str	r3, [sp, #20]
	if ((net_context_get_state(tcp->context) != NET_CONTEXT_UNCONNECTED) &&
   2365c:	6803      	ldr	r3, [r0, #0]
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   2365e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   23662:	f013 0f06 	tst.w	r3, #6
   23666:	d01a      	beq.n	2369e <net_tcp_prepare_reset+0x54>
	return (enum net_tcp_state)tcp->state;
   23668:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   2366c:	f3c3 3343 	ubfx	r3, r3, #13, #4
   23670:	2b02      	cmp	r3, #2
   23672:	d014      	beq.n	2369e <net_tcp_prepare_reset+0x54>
	    (net_tcp_get_state(tcp) != NET_TCP_SYN_SENT) &&
   23674:	2b09      	cmp	r3, #9
   23676:	d012      	beq.n	2369e <net_tcp_prepare_reset+0x54>
   23678:	4614      	mov	r4, r2
		segment.ack = tcp->send_ack;
   2367a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   2367e:	9301      	str	r3, [sp, #4]
		segment.flags = NET_TCP_RST | NET_TCP_ACK;
   23680:	2314      	movs	r3, #20
   23682:	f88d 300a 	strb.w	r3, [sp, #10]
		segment.seq = tcp->send_seq;
   23686:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   2368a:	9300      	str	r3, [sp, #0]
		segment.src_addr = &tcp->context->local;
   2368c:	6803      	ldr	r3, [r0, #0]
   2368e:	3308      	adds	r3, #8
   23690:	9304      	str	r3, [sp, #16]
		segment.dst_addr = remote;
   23692:	9105      	str	r1, [sp, #20]
		*pkt = prepare_segment(tcp, &segment, NULL);
   23694:	2200      	movs	r2, #0
   23696:	4669      	mov	r1, sp
   23698:	f7ff fe6a 	bl	23370 <prepare_segment>
   2369c:	6020      	str	r0, [r4, #0]
}
   2369e:	2000      	movs	r0, #0
   236a0:	b006      	add	sp, #24
   236a2:	bd10      	pop	{r4, pc}

000236a4 <net_tcp_state_str>:
}
   236a4:	4800      	ldr	r0, [pc, #0]	; (236a8 <net_tcp_state_str+0x4>)
   236a6:	4770      	bx	lr
   236a8:	0002ea98 	.word	0x0002ea98

000236ac <net_tcp_init>:
		}
	}
}

void net_tcp_init(void)
{
   236ac:	4770      	bx	lr

000236ae <net_tcp_change_state>:
   236ae:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   236b2:	f3c3 3343 	ubfx	r3, r3, #13, #4
void net_tcp_change_state(struct net_tcp *tcp,
			  enum net_tcp_state new_state)
{
	NET_ASSERT(tcp);

	if (net_tcp_get_state(tcp) == new_state) {
   236b6:	428b      	cmp	r3, r1
   236b8:	d022      	beq.n	23700 <net_tcp_change_state+0x52>

#if defined(CONFIG_NET_DEBUG_TCP)
	validate_state_transition(tcp->state, new_state);
#endif /* CONFIG_NET_DEBUG_TCP */

	tcp->state = new_state;
   236ba:	f001 010f 	and.w	r1, r1, #15
   236be:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   236c2:	f361 3350 	bfi	r3, r1, #13, #4
   236c6:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   236ca:	b9c9      	cbnz	r1, 23700 <net_tcp_change_state+0x52>
		return;
	}

	if (!tcp->context) {
   236cc:	6803      	ldr	r3, [r0, #0]
   236ce:	b1bb      	cbz	r3, 23700 <net_tcp_change_state+0x52>
{
   236d0:	b530      	push	{r4, r5, lr}
   236d2:	b083      	sub	sp, #12
   236d4:	4604      	mov	r4, r0
		return;
	}

	/* Remove any port handlers if we are closing */
	if (tcp->context->conn_handler) {
   236d6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   236d8:	b120      	cbz	r0, 236e4 <net_tcp_change_state+0x36>
	return net_conn_unregister(handle);
   236da:	f001 fcef 	bl	250bc <net_conn_unregister>
		net_tcp_unregister(tcp->context->conn_handler);
		tcp->context->conn_handler = NULL;
   236de:	6823      	ldr	r3, [r4, #0]
   236e0:	2200      	movs	r2, #0
   236e2:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if (tcp->accept_cb) {
   236e4:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
   236e8:	b145      	cbz	r5, 236fc <net_tcp_change_state+0x4e>
		tcp->accept_cb(tcp->context,
   236ea:	6820      	ldr	r0, [r4, #0]
   236ec:	6803      	ldr	r3, [r0, #0]
   236ee:	9300      	str	r3, [sp, #0]
   236f0:	f06f 037d 	mvn.w	r3, #125	; 0x7d
   236f4:	2218      	movs	r2, #24
   236f6:	f100 0114 	add.w	r1, r0, #20
   236fa:	47a8      	blx	r5
			       &tcp->context->remote,
			       sizeof(struct sockaddr),
			       -ENETRESET,
			       tcp->context->user_data);
	}
}
   236fc:	b003      	add	sp, #12
   236fe:	bd30      	pop	{r4, r5, pc}
   23700:	4770      	bx	lr
	...

00023704 <net_tcp_release>:
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   23704:	2800      	cmp	r0, #0
   23706:	d064      	beq.n	237d2 <net_tcp_release+0xce>
{
   23708:	b538      	push	{r3, r4, r5, lr}
   2370a:	4605      	mov	r5, r0
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   2370c:	4b35      	ldr	r3, [pc, #212]	; (237e4 <net_tcp_release+0xe0>)
   2370e:	4298      	cmp	r0, r3
   23710:	d362      	bcc.n	237d8 <net_tcp_release+0xd4>
   23712:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
   23716:	4298      	cmp	r0, r3
   23718:	d261      	bcs.n	237de <net_tcp_release+0xda>
	return list->head;
   2371a:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   2371e:	b140      	cbz	r0, 23732 <net_tcp_release+0x2e>
   23720:	3834      	subs	r0, #52	; 0x34
   23722:	b140      	cbz	r0, 23736 <net_tcp_release+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23724:	f110 0434 	adds.w	r4, r0, #52	; 0x34
   23728:	d000      	beq.n	2372c <net_tcp_release+0x28>
	return node->next;
   2372a:	6b44      	ldr	r4, [r0, #52]	; 0x34
   2372c:	b12c      	cbz	r4, 2373a <net_tcp_release+0x36>
   2372e:	3c34      	subs	r4, #52	; 0x34
   23730:	e00d      	b.n	2374e <net_tcp_release+0x4a>
   23732:	2000      	movs	r0, #0
   23734:	e7f5      	b.n	23722 <net_tcp_release+0x1e>
   23736:	4604      	mov	r4, r0
   23738:	e009      	b.n	2374e <net_tcp_release+0x4a>
   2373a:	2400      	movs	r4, #0
   2373c:	e007      	b.n	2374e <net_tcp_release+0x4a>
			list->tail = list->head;
   2373e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
   23742:	e00e      	b.n	23762 <net_tcp_release+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23744:	461a      	mov	r2, r3
   23746:	e015      	b.n	23774 <net_tcp_release+0x70>
   23748:	3b34      	subs	r3, #52	; 0x34
   2374a:	4620      	mov	r0, r4
   2374c:	461c      	mov	r4, r3
   2374e:	b1d0      	cbz	r0, 23786 <net_tcp_release+0x82>
		sys_slist_remove(&tcp->sent_list, NULL, &pkt->sent_list);
   23750:	f100 0334 	add.w	r3, r0, #52	; 0x34
		list->head = node->next;
   23754:	6b42      	ldr	r2, [r0, #52]	; 0x34
   23756:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
		if (list->tail == node) {
   2375a:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
   2375e:	428b      	cmp	r3, r1
   23760:	d0ed      	beq.n	2373e <net_tcp_release+0x3a>
	node->next = NULL;
   23762:	2300      	movs	r3, #0
   23764:	6343      	str	r3, [r0, #52]	; 0x34
		net_pkt_unref(pkt);
   23766:	f7f9 ff5c 	bl	1d622 <net_pkt_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   2376a:	b144      	cbz	r4, 2377e <net_tcp_release+0x7a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2376c:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   23770:	d0e8      	beq.n	23744 <net_tcp_release+0x40>
	return node->next;
   23772:	6b62      	ldr	r2, [r4, #52]	; 0x34
   23774:	b12a      	cbz	r2, 23782 <net_tcp_release+0x7e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23776:	2b00      	cmp	r3, #0
   23778:	d0e6      	beq.n	23748 <net_tcp_release+0x44>
	return node->next;
   2377a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2377c:	e7e4      	b.n	23748 <net_tcp_release+0x44>
   2377e:	4623      	mov	r3, r4
   23780:	e7e3      	b.n	2374a <net_tcp_release+0x46>
   23782:	2300      	movs	r3, #0
   23784:	e7e1      	b.n	2374a <net_tcp_release+0x46>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   23786:	f105 0058 	add.w	r0, r5, #88	; 0x58
   2378a:	f006 f9e7 	bl	29b5c <_impl_k_timer_stop>
	sem->count = 0;
   2378e:	2400      	movs	r4, #0
   23790:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
	ack_timer_cancel(tcp);
   23794:	4628      	mov	r0, r5
   23796:	f7ff fdd5 	bl	23344 <ack_timer_cancel>
	fin_timer_cancel(tcp);
   2379a:	4628      	mov	r0, r5
   2379c:	f7ff fdd7 	bl	2334e <fin_timer_cancel>
	net_tcp_change_state(tcp, NET_TCP_CLOSED);
   237a0:	4621      	mov	r1, r4
   237a2:	4628      	mov	r0, r5
   237a4:	f7ff ff83 	bl	236ae <net_tcp_change_state>
	tcp->context = NULL;
   237a8:	602c      	str	r4, [r5, #0]
	__asm__ volatile(
   237aa:	f04f 0320 	mov.w	r3, #32
   237ae:	f3ef 8111 	mrs	r1, BASEPRI
   237b2:	f383 8811 	msr	BASEPRI, r3
	tcp->flags &= ~(NET_TCP_IN_USE | NET_TCP_RECV_MSS_SET);
   237b6:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   237ba:	f3c3 1247 	ubfx	r2, r3, #5, #8
   237be:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   237c2:	f362 134c 	bfi	r3, r2, #5, #8
   237c6:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   237ca:	f381 8811 	msr	BASEPRI, r1
	return 0;
   237ce:	4620      	mov	r0, r4
   237d0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   237d2:	f06f 0015 	mvn.w	r0, #21
   237d6:	4770      	bx	lr
   237d8:	f06f 0015 	mvn.w	r0, #21
   237dc:	bd38      	pop	{r3, r4, r5, pc}
   237de:	f06f 0015 	mvn.w	r0, #21
}
   237e2:	bd38      	pop	{r3, r4, r5, pc}
   237e4:	20002060 	.word	0x20002060

000237e8 <net_tcp_prepare_segment>:
{
   237e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   237ec:	b086      	sub	sp, #24
   237ee:	4604      	mov	r4, r0
   237f0:	460d      	mov	r5, r1
   237f2:	4692      	mov	sl, r2
   237f4:	4699      	mov	r9, r3
   237f6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   237f8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
	struct tcp_segment segment = { 0 };
   237fc:	2300      	movs	r3, #0
   237fe:	9300      	str	r3, [sp, #0]
   23800:	9301      	str	r3, [sp, #4]
   23802:	9302      	str	r3, [sp, #8]
   23804:	9303      	str	r3, [sp, #12]
   23806:	9304      	str	r3, [sp, #16]
   23808:	9305      	str	r3, [sp, #20]
	if (!local) {
   2380a:	2f00      	cmp	r7, #0
   2380c:	d050      	beq.n	238b0 <net_tcp_prepare_segment+0xc8>
	seq = tcp->send_seq;
   2380e:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
	if (flags & NET_TCP_ACK) {
   23812:	f015 0f10 	tst.w	r5, #16
   23816:	d009      	beq.n	2382c <net_tcp_prepare_segment+0x44>
	return (enum net_tcp_state)tcp->state;
   23818:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   2381c:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_1) {
   23820:	2b07      	cmp	r3, #7
   23822:	d048      	beq.n	238b6 <net_tcp_prepare_segment+0xce>
		} else if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_2) {
   23824:	2b08      	cmp	r3, #8
   23826:	d055      	beq.n	238d4 <net_tcp_prepare_segment+0xec>
		} else if (net_tcp_get_state(tcp) == NET_TCP_CLOSE_WAIT) {
   23828:	2b05      	cmp	r3, #5
   2382a:	d058      	beq.n	238de <net_tcp_prepare_segment+0xf6>
	if (flags & NET_TCP_FIN) {
   2382c:	f015 0f01 	tst.w	r5, #1
   23830:	d010      	beq.n	23854 <net_tcp_prepare_segment+0x6c>
		tcp->flags |= NET_TCP_FINAL_SENT;
   23832:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   23836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2383a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		flags |= NET_TCP_ACK;
   2383e:	f045 0510 	orr.w	r5, r5, #16
		seq += 2;
   23842:	3602      	adds	r6, #2
   23844:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   23848:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   2384c:	2b04      	cmp	r3, #4
   2384e:	d053      	beq.n	238f8 <net_tcp_prepare_segment+0x110>
   23850:	2b03      	cmp	r3, #3
   23852:	d051      	beq.n	238f8 <net_tcp_prepare_segment+0x110>
	if (flags & NET_TCP_SYN) {
   23854:	f015 0f02 	tst.w	r5, #2
   23858:	d000      	beq.n	2385c <net_tcp_prepare_segment+0x74>
		seq++;
   2385a:	3601      	adds	r6, #1
	wnd = net_tcp_get_recv_wnd(tcp);
   2385c:	4620      	mov	r0, r4
   2385e:	f7ff fea7 	bl	235b0 <net_tcp_get_recv_wnd>
	segment.src_addr = (struct sockaddr_ptr *)local;
   23862:	9704      	str	r7, [sp, #16]
	segment.dst_addr = remote;
   23864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   23866:	9305      	str	r3, [sp, #20]
	segment.seq = tcp->send_seq;
   23868:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2386c:	9300      	str	r3, [sp, #0]
	segment.ack = tcp->send_ack;
   2386e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   23872:	9301      	str	r3, [sp, #4]
	segment.flags = flags;
   23874:	f88d 500a 	strb.w	r5, [sp, #10]
	segment.wnd = wnd;
   23878:	f8ad 0008 	strh.w	r0, [sp, #8]
	segment.options = options;
   2387c:	f8cd a00c 	str.w	sl, [sp, #12]
	segment.optlen = optlen;
   23880:	f88d 900b 	strb.w	r9, [sp, #11]
	*send_pkt = prepare_segment(tcp, &segment, *send_pkt);
   23884:	f8d8 2000 	ldr.w	r2, [r8]
   23888:	4669      	mov	r1, sp
   2388a:	4620      	mov	r0, r4
   2388c:	f7ff fd70 	bl	23370 <prepare_segment>
   23890:	f8c8 0000 	str.w	r0, [r8]
	if (!*send_pkt) {
   23894:	b3a8      	cbz	r0, 23902 <net_tcp_prepare_segment+0x11a>
	tcp->send_seq = seq;
   23896:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
	if (net_tcp_seq_greater(tcp->send_seq, tcp->recv_max_ack)) {
   2389a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	return (s32_t)(seq1 - seq2);
   2389e:	1af3      	subs	r3, r6, r3
   238a0:	2b00      	cmp	r3, #0
   238a2:	dd31      	ble.n	23908 <net_tcp_prepare_segment+0x120>
		tcp->recv_max_ack = tcp->send_seq;
   238a4:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
	return 0;
   238a8:	2000      	movs	r0, #0
}
   238aa:	b006      	add	sp, #24
   238ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		local = &tcp->context->local;
   238b0:	6807      	ldr	r7, [r0, #0]
   238b2:	3708      	adds	r7, #8
   238b4:	e7ab      	b.n	2380e <net_tcp_prepare_segment+0x26>
			if (flags & NET_TCP_FIN) {
   238b6:	f015 0f01 	tst.w	r5, #1
   238ba:	d006      	beq.n	238ca <net_tcp_prepare_segment+0xe2>
				flags &= ~NET_TCP_FIN;
   238bc:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   238c0:	2109      	movs	r1, #9
   238c2:	4620      	mov	r0, r4
   238c4:	f7ff fef3 	bl	236ae <net_tcp_change_state>
   238c8:	e7b0      	b.n	2382c <net_tcp_prepare_segment+0x44>
				net_tcp_change_state(tcp, NET_TCP_CLOSING);
   238ca:	210a      	movs	r1, #10
   238cc:	4620      	mov	r0, r4
   238ce:	f7ff feee 	bl	236ae <net_tcp_change_state>
   238d2:	e7ab      	b.n	2382c <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   238d4:	2109      	movs	r1, #9
   238d6:	4620      	mov	r0, r4
   238d8:	f7ff fee9 	bl	236ae <net_tcp_change_state>
   238dc:	e7a6      	b.n	2382c <net_tcp_prepare_segment+0x44>
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   238de:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   238e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   238e6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			flags |= NET_TCP_FIN;
   238ea:	f045 0501 	orr.w	r5, r5, #1
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   238ee:	2106      	movs	r1, #6
   238f0:	4620      	mov	r0, r4
   238f2:	f7ff fedc 	bl	236ae <net_tcp_change_state>
   238f6:	e799      	b.n	2382c <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_1);
   238f8:	2107      	movs	r1, #7
   238fa:	4620      	mov	r0, r4
   238fc:	f7ff fed7 	bl	236ae <net_tcp_change_state>
   23900:	e7a8      	b.n	23854 <net_tcp_prepare_segment+0x6c>
		return -EINVAL;
   23902:	f06f 0015 	mvn.w	r0, #21
   23906:	e7d0      	b.n	238aa <net_tcp_prepare_segment+0xc2>
	return 0;
   23908:	2000      	movs	r0, #0
   2390a:	e7ce      	b.n	238aa <net_tcp_prepare_segment+0xc2>

0002390c <net_tcp_prepare_ack>:
{
   2390c:	b570      	push	{r4, r5, r6, lr}
   2390e:	b088      	sub	sp, #32
   23910:	4604      	mov	r4, r0
   23912:	460d      	mov	r5, r1
   23914:	4616      	mov	r6, r2
   23916:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   2391a:	f3c3 3343 	ubfx	r3, r3, #13, #4
	switch (net_tcp_get_state(tcp)) {
   2391e:	2b03      	cmp	r3, #3
   23920:	d011      	beq.n	23946 <net_tcp_prepare_ack+0x3a>
   23922:	d327      	bcc.n	23974 <net_tcp_prepare_ack+0x68>
   23924:	3b06      	subs	r3, #6
   23926:	2b01      	cmp	r3, #1
   23928:	d824      	bhi.n	23974 <net_tcp_prepare_ack+0x68>
		tcp->send_seq--;
   2392a:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   2392e:	3b01      	subs	r3, #1
   23930:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		return net_tcp_prepare_segment(tcp, NET_TCP_FIN | NET_TCP_ACK,
   23934:	9202      	str	r2, [sp, #8]
   23936:	9101      	str	r1, [sp, #4]
   23938:	2200      	movs	r2, #0
   2393a:	9200      	str	r2, [sp, #0]
   2393c:	4613      	mov	r3, r2
   2393e:	2111      	movs	r1, #17
   23940:	f7ff ff52 	bl	237e8 <net_tcp_prepare_segment>
   23944:	e014      	b.n	23970 <net_tcp_prepare_ack+0x64>
		tcp->send_seq--;
   23946:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   2394a:	3b01      	subs	r3, #1
   2394c:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		net_tcp_set_syn_opt(tcp, options, &optionlen);
   23950:	f10d 0217 	add.w	r2, sp, #23
   23954:	a906      	add	r1, sp, #24
   23956:	f7ff fe54 	bl	23602 <net_tcp_set_syn_opt>
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   2395a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2395e:	9602      	str	r6, [sp, #8]
   23960:	9501      	str	r5, [sp, #4]
   23962:	2200      	movs	r2, #0
   23964:	9200      	str	r2, [sp, #0]
   23966:	aa06      	add	r2, sp, #24
   23968:	2112      	movs	r1, #18
   2396a:	4620      	mov	r0, r4
   2396c:	f7ff ff3c 	bl	237e8 <net_tcp_prepare_segment>
}
   23970:	b008      	add	sp, #32
   23972:	bd70      	pop	{r4, r5, r6, pc}
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   23974:	9602      	str	r6, [sp, #8]
   23976:	9501      	str	r5, [sp, #4]
   23978:	2200      	movs	r2, #0
   2397a:	9200      	str	r2, [sp, #0]
   2397c:	4613      	mov	r3, r2
   2397e:	2110      	movs	r1, #16
   23980:	4620      	mov	r0, r4
   23982:	f7ff ff31 	bl	237e8 <net_tcp_prepare_segment>
   23986:	e7f3      	b.n	23970 <net_tcp_prepare_ack+0x64>

00023988 <net_tcp_queue_data>:
{
   23988:	b570      	push	{r4, r5, r6, lr}
   2398a:	b086      	sub	sp, #24
   2398c:	4605      	mov	r5, r0
   2398e:	9105      	str	r1, [sp, #20]
	struct net_conn *conn = (struct net_conn *)context->conn_handler;
   23990:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	return net_buf_frags_len(pkt->frags);
   23992:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   23994:	2400      	movs	r4, #0
   23996:	e002      	b.n	2399e <net_tcp_queue_data+0x16>
		bytes += buf->len;
   23998:	899a      	ldrh	r2, [r3, #12]
   2399a:	4414      	add	r4, r2
		buf = buf->frags;
   2399c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2399e:	2b00      	cmp	r3, #0
   239a0:	d1fa      	bne.n	23998 <net_tcp_queue_data+0x10>
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   239a2:	ab05      	add	r3, sp, #20
   239a4:	9302      	str	r3, [sp, #8]
   239a6:	9001      	str	r0, [sp, #4]
   239a8:	2200      	movs	r2, #0
   239aa:	9200      	str	r2, [sp, #0]
   239ac:	4613      	mov	r3, r2
   239ae:	2118      	movs	r1, #24
   239b0:	6e28      	ldr	r0, [r5, #96]	; 0x60
   239b2:	f7ff ff19 	bl	237e8 <net_tcp_prepare_segment>
	if (ret) {
   239b6:	4606      	mov	r6, r0
   239b8:	bb10      	cbnz	r0, 23a00 <net_tcp_queue_data+0x78>
	context->tcp->send_seq += data_len;
   239ba:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   239bc:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   239c0:	4423      	add	r3, r4
   239c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	net_stats.tcp.bytes.sent += bytes;
   239c6:	4a1b      	ldr	r2, [pc, #108]	; (23a34 <net_tcp_queue_data+0xac>)
   239c8:	6c93      	ldr	r3, [r2, #72]	; 0x48
   239ca:	441c      	add	r4, r3
   239cc:	6494      	str	r4, [r2, #72]	; 0x48
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   239ce:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   239d0:	9905      	ldr	r1, [sp, #20]
   239d2:	f101 0234 	add.w	r2, r1, #52	; 0x34
	node->next = NULL;
   239d6:	6348      	str	r0, [r1, #52]	; 0x34
	if (!list->tail) {
   239d8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   239dc:	b199      	cbz	r1, 23a06 <net_tcp_queue_data+0x7e>
		list->tail->next = node;
   239de:	600a      	str	r2, [r1, #0]
		list->tail = node;
   239e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (k_timer_remaining_get(&context->tcp->retry_timer) == 0) {
   239e4:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return _timeout_remaining_get(&timer->timeout);
   239e6:	3058      	adds	r0, #88	; 0x58
   239e8:	f006 f942 	bl	29c70 <_timeout_remaining_get>
   239ec:	b180      	cbz	r0, 23a10 <net_tcp_queue_data+0x88>
	do_ref_if_needed(context->tcp, pkt);
   239ee:	9805      	ldr	r0, [sp, #20]
	return pkt->family;
   239f0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   239f4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   239f8:	2b0a      	cmp	r3, #10
   239fa:	d015      	beq.n	23a28 <net_tcp_queue_data+0xa0>
   239fc:	f7f9 fe02 	bl	1d604 <net_pkt_ref>
}
   23a00:	4630      	mov	r0, r6
   23a02:	b006      	add	sp, #24
   23a04:	bd70      	pop	{r4, r5, r6, pc}
		list->tail = node;
   23a06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		list->head = node;
   23a0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   23a0e:	e7e9      	b.n	239e4 <net_tcp_queue_data+0x5c>
		k_timer_start(&context->tcp->retry_timer,
   23a10:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return ((u32_t)1 << tcp->retry_timeout_shift) * INIT_RETRY_MS;
   23a12:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
   23a16:	f003 031f 	and.w	r3, r3, #31
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   23a1a:	2200      	movs	r2, #0
   23a1c:	21c8      	movs	r1, #200	; 0xc8
   23a1e:	4099      	lsls	r1, r3
   23a20:	3058      	adds	r0, #88	; 0x58
   23a22:	f005 ffe3 	bl	299ec <_impl_k_timer_start>
   23a26:	e7e2      	b.n	239ee <net_tcp_queue_data+0x66>
	do_ref_if_needed(context->tcp, pkt);
   23a28:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   23a2c:	2b02      	cmp	r3, #2
   23a2e:	d1e5      	bne.n	239fc <net_tcp_queue_data+0x74>
   23a30:	e7e6      	b.n	23a00 <net_tcp_queue_data+0x78>
   23a32:	bf00      	nop
   23a34:	20002b50 	.word	0x20002b50

00023a38 <net_tcp_foreach>:

void net_tcp_foreach(net_tcp_cb_t cb, void *user_data)
{
   23a38:	b570      	push	{r4, r5, r6, lr}
   23a3a:	4606      	mov	r6, r0
   23a3c:	460d      	mov	r5, r1
	__asm__ volatile(
   23a3e:	f04f 0320 	mov.w	r3, #32
   23a42:	f3ef 8111 	mrs	r1, BASEPRI
   23a46:	f383 8811 	msr	BASEPRI, r3
	int i, key;

	key = irq_lock();

	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   23a4a:	2400      	movs	r4, #0
   23a4c:	e000      	b.n	23a50 <net_tcp_foreach+0x18>
   23a4e:	3401      	adds	r4, #1
   23a50:	2c05      	cmp	r4, #5
   23a52:	dc16      	bgt.n	23a82 <net_tcp_foreach+0x4a>
	return tcp->flags & NET_TCP_IN_USE;
   23a54:	23c8      	movs	r3, #200	; 0xc8
   23a56:	4a0c      	ldr	r2, [pc, #48]	; (23a88 <net_tcp_foreach+0x50>)
   23a58:	fb03 2304 	mla	r3, r3, r4, r2
   23a5c:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
		if (!net_tcp_is_used(&tcp_context[i])) {
   23a60:	f013 0f20 	tst.w	r3, #32
   23a64:	d0f3      	beq.n	23a4e <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   23a66:	f381 8811 	msr	BASEPRI, r1
			continue;
		}

		irq_unlock(key);

		cb(&tcp_context[i], user_data);
   23a6a:	4629      	mov	r1, r5
   23a6c:	20c8      	movs	r0, #200	; 0xc8
   23a6e:	fb00 2004 	mla	r0, r0, r4, r2
   23a72:	47b0      	blx	r6
	__asm__ volatile(
   23a74:	f04f 0320 	mov.w	r3, #32
   23a78:	f3ef 8111 	mrs	r1, BASEPRI
   23a7c:	f383 8811 	msr	BASEPRI, r3
   23a80:	e7e5      	b.n	23a4e <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   23a82:	f381 8811 	msr	BASEPRI, r1
   23a86:	bd70      	pop	{r4, r5, r6, pc}
   23a88:	20002060 	.word	0x20002060

00023a8c <net_tcp_get_hdr>:
					+ net_tcp_get_recv_wnd(tcp)) < 0);
}

struct net_tcp_hdr *net_tcp_get_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   23a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   23a8e:	b085      	sub	sp, #20
   23a90:	4605      	mov	r5, r0
   23a92:	460e      	mov	r6, r1
	struct net_tcp_hdr *tcp_hdr;
	struct net_buf *frag;
	u16_t pos;

	tcp_hdr = net_pkt_tcp_data(pkt);
   23a94:	f7fa f8df 	bl	1dc56 <net_pkt_tcp_data>
   23a98:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23a9a:	2214      	movs	r2, #20
   23a9c:	4601      	mov	r1, r0
   23a9e:	4628      	mov	r0, r5
   23aa0:	f7fa fc82 	bl	1e3a8 <net_header_fits>
   23aa4:	b120      	cbz	r0, 23ab0 <net_tcp_get_hdr+0x24>
		return hdr;
   23aa6:	4627      	mov	r7, r4
	if (net_tcp_header_fits(pkt, tcp_hdr)) {
   23aa8:	b127      	cbz	r7, 23ab4 <net_tcp_get_hdr+0x28>

		return NULL;
	}

	return hdr;
}
   23aaa:	4620      	mov	r0, r4
   23aac:	b005      	add	sp, #20
   23aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   23ab0:	2700      	movs	r7, #0
   23ab2:	e7f9      	b.n	23aa8 <net_tcp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23ab4:	68a8      	ldr	r0, [r5, #8]
   23ab6:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   23aba:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23abe:	9600      	str	r6, [sp, #0]
   23ac0:	2302      	movs	r3, #2
   23ac2:	f10d 020e 	add.w	r2, sp, #14
   23ac6:	4421      	add	r1, r4
   23ac8:	f7f9 ff29 	bl	1d91e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   23acc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   23ad0:	1cb3      	adds	r3, r6, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   23ad2:	9300      	str	r3, [sp, #0]
   23ad4:	2302      	movs	r3, #2
   23ad6:	f10d 020e 	add.w	r2, sp, #14
   23ada:	f7f9 ff20 	bl	1d91e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->seq), hdr->seq);
   23ade:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23ae2:	1d33      	adds	r3, r6, #4
   23ae4:	9300      	str	r3, [sp, #0]
   23ae6:	2304      	movs	r3, #4
   23ae8:	f10d 020e 	add.w	r2, sp, #14
   23aec:	f7f9 ff17 	bl	1d91e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->ack), hdr->ack);
   23af0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23af4:	f106 0308 	add.w	r3, r6, #8
   23af8:	9300      	str	r3, [sp, #0]
   23afa:	2304      	movs	r3, #4
   23afc:	f10d 020e 	add.w	r2, sp, #14
   23b00:	f7f9 ff0d 	bl	1d91e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->offset);
   23b04:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23b08:	f106 030c 	add.w	r3, r6, #12
	return net_frag_read(frag, offset, pos, 1, value);
   23b0c:	9300      	str	r3, [sp, #0]
   23b0e:	2301      	movs	r3, #1
   23b10:	f10d 020e 	add.w	r2, sp, #14
   23b14:	f7f9 ff03 	bl	1d91e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   23b18:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23b1c:	f106 030d 	add.w	r3, r6, #13
   23b20:	9300      	str	r3, [sp, #0]
   23b22:	2301      	movs	r3, #1
   23b24:	f10d 020e 	add.w	r2, sp, #14
   23b28:	f7f9 fef9 	bl	1d91e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd);
   23b2c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23b30:	f106 030e 	add.w	r3, r6, #14
   23b34:	9300      	str	r3, [sp, #0]
   23b36:	2302      	movs	r3, #2
   23b38:	f10d 020e 	add.w	r2, sp, #14
   23b3c:	f7f9 feef 	bl	1d91e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23b40:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   23b44:	f106 0310 	add.w	r3, r6, #16
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23b48:	9300      	str	r3, [sp, #0]
   23b4a:	2302      	movs	r3, #2
   23b4c:	f10d 020e 	add.w	r2, sp, #14
   23b50:	f7f9 fee5 	bl	1d91e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->urg), hdr->urg);
   23b54:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23b58:	f106 0312 	add.w	r3, r6, #18
   23b5c:	9300      	str	r3, [sp, #0]
   23b5e:	2302      	movs	r3, #2
   23b60:	f10d 020e 	add.w	r2, sp, #14
   23b64:	f7f9 fedb 	bl	1d91e <net_frag_read>
	if (!frag && pos == 0xffff) {
   23b68:	b108      	cbz	r0, 23b6e <net_tcp_get_hdr+0xe2>
	return hdr;
   23b6a:	4634      	mov	r4, r6
   23b6c:	e79d      	b.n	23aaa <net_tcp_get_hdr+0x1e>
	if (!frag && pos == 0xffff) {
   23b6e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   23b72:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23b76:	429a      	cmp	r2, r3
   23b78:	d001      	beq.n	23b7e <net_tcp_get_hdr+0xf2>
	return hdr;
   23b7a:	4634      	mov	r4, r6
   23b7c:	e795      	b.n	23aaa <net_tcp_get_hdr+0x1e>
		return NULL;
   23b7e:	463c      	mov	r4, r7
   23b80:	e793      	b.n	23aaa <net_tcp_get_hdr+0x1e>

00023b82 <net_tcp_validate_seq>:
{
   23b82:	b570      	push	{r4, r5, r6, lr}
   23b84:	b086      	sub	sp, #24
   23b86:	4606      	mov	r6, r0
   23b88:	4608      	mov	r0, r1
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   23b8a:	a901      	add	r1, sp, #4
   23b8c:	f7ff ff7e 	bl	23a8c <net_tcp_get_hdr>
	if (!tcp_hdr) {
   23b90:	b1e8      	cbz	r0, 23bce <net_tcp_validate_seq+0x4c>
   23b92:	4603      	mov	r3, r0
	return ((u16_t)src[0] << 8) | src[1];
   23b94:	7900      	ldrb	r0, [r0, #4]
   23b96:	795c      	ldrb	r4, [r3, #5]
   23b98:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   23b9c:	799a      	ldrb	r2, [r3, #6]
   23b9e:	79dc      	ldrb	r4, [r3, #7]
   23ba0:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   23ba4:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	return (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   23ba8:	f8d6 509c 	ldr.w	r5, [r6, #156]	; 0x9c
   23bac:	1b63      	subs	r3, r4, r5
				tcp->send_ack) >= 0) &&
   23bae:	2b00      	cmp	r3, #0
   23bb0:	db0b      	blt.n	23bca <net_tcp_validate_seq+0x48>
					+ net_tcp_get_recv_wnd(tcp)) < 0);
   23bb2:	4630      	mov	r0, r6
   23bb4:	f7ff fcfc 	bl	235b0 <net_tcp_get_recv_wnd>
		(net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   23bb8:	4428      	add	r0, r5
   23bba:	1a24      	subs	r4, r4, r0
				tcp->send_ack) >= 0) &&
   23bbc:	2c00      	cmp	r4, #0
   23bbe:	db02      	blt.n	23bc6 <net_tcp_validate_seq+0x44>
   23bc0:	2000      	movs	r0, #0
}
   23bc2:	b006      	add	sp, #24
   23bc4:	bd70      	pop	{r4, r5, r6, pc}
				tcp->send_ack) >= 0) &&
   23bc6:	2001      	movs	r0, #1
   23bc8:	e7fb      	b.n	23bc2 <net_tcp_validate_seq+0x40>
   23bca:	2000      	movs	r0, #0
   23bcc:	e7f9      	b.n	23bc2 <net_tcp_validate_seq+0x40>
		return false;
   23bce:	2000      	movs	r0, #0
   23bd0:	e7f7      	b.n	23bc2 <net_tcp_validate_seq+0x40>

00023bd2 <net_tcp_set_hdr>:

struct net_tcp_hdr *net_tcp_set_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   23bd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23bd6:	b087      	sub	sp, #28
   23bd8:	4605      	mov	r5, r0
   23bda:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23bdc:	2214      	movs	r2, #20
   23bde:	f7fa fbe3 	bl	1e3a8 <net_header_fits>
   23be2:	b128      	cbz	r0, 23bf0 <net_tcp_set_hdr+0x1e>
		return hdr;
   23be4:	4626      	mov	r6, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_tcp_header_fits(pkt, hdr)) {
   23be6:	b12e      	cbz	r6, 23bf4 <net_tcp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   23be8:	4620      	mov	r0, r4
   23bea:	b007      	add	sp, #28
   23bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return NULL;
   23bf0:	2600      	movs	r6, #0
   23bf2:	e7f8      	b.n	23be6 <net_tcp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23bf4:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   23bf8:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23bfc:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
   23c00:	9702      	str	r7, [sp, #8]
   23c02:	9401      	str	r4, [sp, #4]
   23c04:	f04f 0802 	mov.w	r8, #2
   23c08:	f8cd 8000 	str.w	r8, [sp]
   23c0c:	f10d 0316 	add.w	r3, sp, #22
   23c10:	440a      	add	r2, r1
   23c12:	68a9      	ldr	r1, [r5, #8]
   23c14:	4628      	mov	r0, r5
   23c16:	f7f9 fef4 	bl	1da02 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   23c1a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, ALLOC_TIMEOUT);
   23c1e:	eb04 0308 	add.w	r3, r4, r8
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   23c22:	9702      	str	r7, [sp, #8]
   23c24:	9301      	str	r3, [sp, #4]
   23c26:	f8cd 8000 	str.w	r8, [sp]
   23c2a:	f10d 0316 	add.w	r3, sp, #22
   23c2e:	4601      	mov	r1, r0
   23c30:	4628      	mov	r0, r5
   23c32:	f7f9 fee6 	bl	1da02 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->seq), hdr->seq,
   23c36:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23c3a:	1d23      	adds	r3, r4, #4
   23c3c:	9702      	str	r7, [sp, #8]
   23c3e:	9301      	str	r3, [sp, #4]
   23c40:	f04f 0904 	mov.w	r9, #4
   23c44:	f8cd 9000 	str.w	r9, [sp]
   23c48:	f10d 0316 	add.w	r3, sp, #22
   23c4c:	4601      	mov	r1, r0
   23c4e:	4628      	mov	r0, r5
   23c50:	f7f9 fed7 	bl	1da02 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->ack), hdr->ack,
   23c54:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23c58:	f104 0308 	add.w	r3, r4, #8
   23c5c:	9702      	str	r7, [sp, #8]
   23c5e:	9301      	str	r3, [sp, #4]
   23c60:	f8cd 9000 	str.w	r9, [sp]
   23c64:	f10d 0316 	add.w	r3, sp, #22
   23c68:	4601      	mov	r1, r0
   23c6a:	4628      	mov	r0, r5
   23c6c:	f7f9 fec9 	bl	1da02 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->offset),
   23c70:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23c74:	f104 030c 	add.w	r3, r4, #12
   23c78:	9702      	str	r7, [sp, #8]
   23c7a:	9301      	str	r3, [sp, #4]
   23c7c:	f04f 0901 	mov.w	r9, #1
   23c80:	f8cd 9000 	str.w	r9, [sp]
   23c84:	f10d 0316 	add.w	r3, sp, #22
   23c88:	4601      	mov	r1, r0
   23c8a:	4628      	mov	r0, r5
   23c8c:	f7f9 feb9 	bl	1da02 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->flags),
   23c90:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23c94:	f104 030d 	add.w	r3, r4, #13
   23c98:	9702      	str	r7, [sp, #8]
   23c9a:	9301      	str	r3, [sp, #4]
   23c9c:	f8cd 9000 	str.w	r9, [sp]
   23ca0:	f10d 0316 	add.w	r3, sp, #22
   23ca4:	4601      	mov	r1, r0
   23ca6:	4628      	mov	r0, r5
   23ca8:	f7f9 feab 	bl	1da02 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd,
   23cac:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23cb0:	f104 030e 	add.w	r3, r4, #14
   23cb4:	9702      	str	r7, [sp, #8]
   23cb6:	9301      	str	r3, [sp, #4]
   23cb8:	f8cd 8000 	str.w	r8, [sp]
   23cbc:	f10d 0316 	add.w	r3, sp, #22
   23cc0:	4601      	mov	r1, r0
   23cc2:	4628      	mov	r0, r5
   23cc4:	f7f9 fe9d 	bl	1da02 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   23cc8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, ALLOC_TIMEOUT);
   23ccc:	f104 0310 	add.w	r3, r4, #16
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   23cd0:	9702      	str	r7, [sp, #8]
   23cd2:	9301      	str	r3, [sp, #4]
   23cd4:	f8cd 8000 	str.w	r8, [sp]
   23cd8:	f10d 0316 	add.w	r3, sp, #22
   23cdc:	4601      	mov	r1, r0
   23cde:	4628      	mov	r0, r5
   23ce0:	f7f9 fe8f 	bl	1da02 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->urg), hdr->urg,
   23ce4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23ce8:	f104 0312 	add.w	r3, r4, #18
   23cec:	9702      	str	r7, [sp, #8]
   23cee:	9301      	str	r3, [sp, #4]
   23cf0:	f8cd 8000 	str.w	r8, [sp]
   23cf4:	f10d 0316 	add.w	r3, sp, #22
   23cf8:	4601      	mov	r1, r0
   23cfa:	4628      	mov	r0, r5
   23cfc:	f7f9 fe81 	bl	1da02 <net_pkt_write>
	if (!frag) {
   23d00:	2800      	cmp	r0, #0
   23d02:	f47f af71 	bne.w	23be8 <net_tcp_set_hdr+0x16>
		return NULL;
   23d06:	4634      	mov	r4, r6
   23d08:	e76e      	b.n	23be8 <net_tcp_set_hdr+0x16>

00023d0a <net_tcp_get_chksum>:

u16_t net_tcp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   23d0a:	b570      	push	{r4, r5, r6, lr}
   23d0c:	b084      	sub	sp, #16
   23d0e:	4605      	mov	r5, r0
   23d10:	460e      	mov	r6, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   23d12:	f7f9 ffa0 	bl	1dc56 <net_pkt_tcp_data>
   23d16:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23d18:	2214      	movs	r2, #20
   23d1a:	4601      	mov	r1, r0
   23d1c:	4628      	mov	r0, r5
   23d1e:	f7fa fb43 	bl	1e3a8 <net_header_fits>
   23d22:	b120      	cbz	r0, 23d2e <net_tcp_get_chksum+0x24>
		return hdr;
   23d24:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   23d26:	b123      	cbz	r3, 23d32 <net_tcp_get_chksum+0x28>
		return hdr->chksum;
   23d28:	8a20      	ldrh	r0, [r4, #16]
			     1 + 1 + 2 /* offset + flags + wnd */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   23d2a:	b004      	add	sp, #16
   23d2c:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   23d2e:	2300      	movs	r3, #0
   23d30:	e7f9      	b.n	23d26 <net_tcp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   23d32:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   23d36:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   23d3a:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   23d3c:	3110      	adds	r1, #16
   23d3e:	f10d 030e 	add.w	r3, sp, #14
   23d42:	9300      	str	r3, [sp, #0]
   23d44:	2302      	movs	r3, #2
   23d46:	aa03      	add	r2, sp, #12
   23d48:	b289      	uxth	r1, r1
   23d4a:	4630      	mov	r0, r6
   23d4c:	f7f9 fde7 	bl	1d91e <net_frag_read>
	return chksum;
   23d50:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   23d54:	e7e9      	b.n	23d2a <net_tcp_get_chksum+0x20>

00023d56 <net_tcp_set_chksum>:

struct net_buf *net_tcp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   23d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23d5a:	b086      	sub	sp, #24
   23d5c:	4606      	mov	r6, r0
   23d5e:	460d      	mov	r5, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum = 0;
   23d60:	2300      	movs	r3, #0
   23d62:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   23d66:	f7f9 ff76 	bl	1dc56 <net_pkt_tcp_data>
   23d6a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23d6c:	2214      	movs	r2, #20
   23d6e:	4601      	mov	r1, r0
   23d70:	4630      	mov	r0, r6
   23d72:	f7fa fb19 	bl	1e3a8 <net_header_fits>
   23d76:	b170      	cbz	r0, 23d96 <net_tcp_set_chksum+0x40>
		return hdr;
   23d78:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   23d7a:	b173      	cbz	r3, 23d9a <net_tcp_set_chksum+0x44>
		hdr->chksum = 0;
   23d7c:	2300      	movs	r3, #0
   23d7e:	7423      	strb	r3, [r4, #16]
   23d80:	7463      	strb	r3, [r4, #17]
	return net_calc_chksum(pkt, IPPROTO_TCP);
   23d82:	2106      	movs	r1, #6
   23d84:	4630      	mov	r0, r6
   23d86:	f7fa fab6 	bl	1e2f6 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_tcp(pkt);
   23d8a:	43c0      	mvns	r0, r0
   23d8c:	8220      	strh	r0, [r4, #16]

		return frag;
   23d8e:	4628      	mov	r0, r5
			     (u8_t *)&chksum, ALLOC_TIMEOUT);

	NET_ASSERT(frag);

	return frag;
}
   23d90:	b006      	add	sp, #24
   23d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   23d96:	2300      	movs	r3, #0
   23d98:	e7ef      	b.n	23d7a <net_tcp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   23d9a:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   23d9e:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   23da2:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   23da4:	3210      	adds	r2, #16
   23da6:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
   23daa:	f8cd 8008 	str.w	r8, [sp, #8]
   23dae:	f10d 0416 	add.w	r4, sp, #22
   23db2:	9401      	str	r4, [sp, #4]
   23db4:	2702      	movs	r7, #2
   23db6:	9700      	str	r7, [sp, #0]
   23db8:	ab05      	add	r3, sp, #20
   23dba:	b292      	uxth	r2, r2
   23dbc:	4629      	mov	r1, r5
   23dbe:	4630      	mov	r0, r6
   23dc0:	f7f9 fe1f 	bl	1da02 <net_pkt_write>
   23dc4:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_TCP);
   23dc6:	2106      	movs	r1, #6
   23dc8:	4630      	mov	r0, r6
   23dca:	f7fa fa94 	bl	1e2f6 <net_calc_chksum>
	chksum = ~net_calc_chksum_tcp(pkt);
   23dce:	43c0      	mvns	r0, r0
   23dd0:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   23dd4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   23dd8:	3a02      	subs	r2, #2
   23dda:	f8cd 8008 	str.w	r8, [sp, #8]
   23dde:	9401      	str	r4, [sp, #4]
   23de0:	9700      	str	r7, [sp, #0]
   23de2:	ab05      	add	r3, sp, #20
   23de4:	b292      	uxth	r2, r2
   23de6:	4629      	mov	r1, r5
   23de8:	4630      	mov	r0, r6
   23dea:	f7f9 fe0a 	bl	1da02 <net_pkt_write>
	return frag;
   23dee:	e7cf      	b.n	23d90 <net_tcp_set_chksum+0x3a>

00023df0 <net_tcp_send_pkt>:
{
   23df0:	b570      	push	{r4, r5, r6, lr}
   23df2:	b086      	sub	sp, #24
   23df4:	4605      	mov	r5, r0
	return pkt->context;
   23df6:	68c6      	ldr	r6, [r0, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   23df8:	a901      	add	r1, sp, #4
   23dfa:	f7ff fe47 	bl	23a8c <net_tcp_get_hdr>
	if (!tcp_hdr) {
   23dfe:	2800      	cmp	r0, #0
   23e00:	f000 8086 	beq.w	23f10 <net_tcp_send_pkt+0x120>
   23e04:	4604      	mov	r4, r0
	return ((u16_t)src[0] << 8) | src[1];
   23e06:	7a02      	ldrb	r2, [r0, #8]
   23e08:	7a43      	ldrb	r3, [r0, #9]
   23e0a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   23e0e:	7a81      	ldrb	r1, [r0, #10]
   23e10:	7ac3      	ldrb	r3, [r0, #11]
   23e12:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   23e16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	if (sys_get_be32(tcp_hdr->ack) != ctx->tcp->send_ack) {
   23e1a:	6e32      	ldr	r2, [r6, #96]	; 0x60
   23e1c:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
   23e20:	429a      	cmp	r2, r3
   23e22:	d039      	beq.n	23e98 <net_tcp_send_pkt+0xa8>
	sys_put_be16(val >> 16, dst);
   23e24:	0c13      	lsrs	r3, r2, #16
	dst[0] = val >> 8;
   23e26:	0a19      	lsrs	r1, r3, #8
   23e28:	7201      	strb	r1, [r0, #8]
	dst[1] = val;
   23e2a:	7243      	strb	r3, [r0, #9]
	dst[0] = val >> 8;
   23e2c:	f3c2 2307 	ubfx	r3, r2, #8, #8
   23e30:	7283      	strb	r3, [r0, #10]
	dst[1] = val;
   23e32:	72c2      	strb	r2, [r0, #11]
		calc_chksum = true;
   23e34:	2201      	movs	r2, #1
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   23e36:	6e33      	ldr	r3, [r6, #96]	; 0x60
   23e38:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   23e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   23e40:	4299      	cmp	r1, r3
   23e42:	d007      	beq.n	23e54 <net_tcp_send_pkt+0x64>
		(tcp_hdr->flags & NET_TCP_ACK) == 0) {
   23e44:	7b63      	ldrb	r3, [r4, #13]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   23e46:	f013 0f10 	tst.w	r3, #16
   23e4a:	d103      	bne.n	23e54 <net_tcp_send_pkt+0x64>
		tcp_hdr->flags |= NET_TCP_ACK;
   23e4c:	f043 0310 	orr.w	r3, r3, #16
   23e50:	7363      	strb	r3, [r4, #13]
		calc_chksum = true;
   23e52:	2201      	movs	r2, #1
	if (calc_chksum) {
   23e54:	bb12      	cbnz	r2, 23e9c <net_tcp_send_pkt+0xac>
	if (tcp_hdr->flags & NET_TCP_FIN) {
   23e56:	7b63      	ldrb	r3, [r4, #13]
   23e58:	f013 0f01 	tst.w	r3, #1
   23e5c:	d006      	beq.n	23e6c <net_tcp_send_pkt+0x7c>
		ctx->tcp->fin_sent = 1;
   23e5e:	6e32      	ldr	r2, [r6, #96]	; 0x60
   23e60:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   23e64:	f043 0302 	orr.w	r3, r3, #2
   23e68:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
	ctx->tcp->sent_ack = ctx->tcp->send_ack;
   23e6c:	6e33      	ldr	r3, [r6, #96]	; 0x60
   23e6e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   23e72:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_tcp_set_hdr(pkt, tcp_hdr);
   23e76:	4621      	mov	r1, r4
   23e78:	4628      	mov	r0, r5
   23e7a:	f7ff feaa 	bl	23bd2 <net_tcp_set_hdr>
	return pkt->family;
   23e7e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   23e82:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (is_6lo_technology(pkt)) {
   23e86:	2b0a      	cmp	r3, #10
   23e88:	d00d      	beq.n	23ea6 <net_tcp_send_pkt+0xb6>
	return net_send_data(pkt);
   23e8a:	4628      	mov	r0, r5
   23e8c:	f7f6 ffc8 	bl	1ae20 <net_send_data>
   23e90:	4604      	mov	r4, r0
}
   23e92:	4620      	mov	r0, r4
   23e94:	b006      	add	sp, #24
   23e96:	bd70      	pop	{r4, r5, r6, pc}
	bool calc_chksum = false;
   23e98:	2200      	movs	r2, #0
   23e9a:	e7cc      	b.n	23e36 <net_tcp_send_pkt+0x46>
		net_tcp_set_chksum(pkt, pkt->frags);
   23e9c:	68a9      	ldr	r1, [r5, #8]
   23e9e:	4628      	mov	r0, r5
   23ea0:	f7ff ff59 	bl	23d56 <net_tcp_set_chksum>
   23ea4:	e7d7      	b.n	23e56 <net_tcp_send_pkt+0x66>
	if (is_6lo_technology(pkt)) {
   23ea6:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   23eaa:	2b02      	cmp	r3, #2
   23eac:	d1ed      	bne.n	23e8a <net_tcp_send_pkt+0x9a>
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   23eae:	6e33      	ldr	r3, [r6, #96]	; 0x60
	return list->head;
   23eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   23eb4:	b10b      	cbz	r3, 23eba <net_tcp_send_pkt+0xca>
   23eb6:	3b34      	subs	r3, #52	; 0x34
   23eb8:	e006      	b.n	23ec8 <net_tcp_send_pkt+0xd8>
   23eba:	2300      	movs	r3, #0
   23ebc:	e004      	b.n	23ec8 <net_tcp_send_pkt+0xd8>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23ebe:	4611      	mov	r1, r2
   23ec0:	e009      	b.n	23ed6 <net_tcp_send_pkt+0xe6>
	return node->next;
   23ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   23ec4:	f1a2 0334 	sub.w	r3, r2, #52	; 0x34
   23ec8:	b163      	cbz	r3, 23ee4 <net_tcp_send_pkt+0xf4>
			if (check_pkt == pkt) {
   23eca:	42ab      	cmp	r3, r5
   23ecc:	d009      	beq.n	23ee2 <net_tcp_send_pkt+0xf2>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23ece:	f113 0234 	adds.w	r2, r3, #52	; 0x34
   23ed2:	d0f4      	beq.n	23ebe <net_tcp_send_pkt+0xce>
	return node->next;
   23ed4:	6b59      	ldr	r1, [r3, #52]	; 0x34
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   23ed6:	b111      	cbz	r1, 23ede <net_tcp_send_pkt+0xee>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23ed8:	2a00      	cmp	r2, #0
   23eda:	d1f2      	bne.n	23ec2 <net_tcp_send_pkt+0xd2>
   23edc:	e7f2      	b.n	23ec4 <net_tcp_send_pkt+0xd4>
   23ede:	2300      	movs	r3, #0
   23ee0:	e7f2      	b.n	23ec8 <net_tcp_send_pkt+0xd8>
				pkt_in_slist = true;
   23ee2:	2301      	movs	r3, #1
		if (pkt_in_slist) {
   23ee4:	2b00      	cmp	r3, #0
   23ee6:	d0d0      	beq.n	23e8a <net_tcp_send_pkt+0x9a>
			new_pkt = net_pkt_clone(pkt, ALLOC_TIMEOUT);
   23ee8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   23eec:	4628      	mov	r0, r5
   23eee:	f7f9 fec7 	bl	1dc80 <net_pkt_clone>
			if (!new_pkt) {
   23ef2:	4605      	mov	r5, r0
   23ef4:	b178      	cbz	r0, 23f16 <net_tcp_send_pkt+0x126>
			ret = net_send_data(new_pkt);
   23ef6:	f7f6 ff93 	bl	1ae20 <net_send_data>
			if (ret < 0) {
   23efa:	1e04      	subs	r4, r0, #0
   23efc:	db04      	blt.n	23f08 <net_tcp_send_pkt+0x118>
	net_stats.tcp.rexmit++;
   23efe:	4a07      	ldr	r2, [pc, #28]	; (23f1c <net_tcp_send_pkt+0x12c>)
   23f00:	6f13      	ldr	r3, [r2, #112]	; 0x70
   23f02:	3301      	adds	r3, #1
   23f04:	6713      	str	r3, [r2, #112]	; 0x70
   23f06:	e7c4      	b.n	23e92 <net_tcp_send_pkt+0xa2>
				net_pkt_unref(new_pkt);
   23f08:	4628      	mov	r0, r5
   23f0a:	f7f9 fb8a 	bl	1d622 <net_pkt_unref>
   23f0e:	e7c0      	b.n	23e92 <net_tcp_send_pkt+0xa2>
		return -EMSGSIZE;
   23f10:	f06f 0479 	mvn.w	r4, #121	; 0x79
   23f14:	e7bd      	b.n	23e92 <net_tcp_send_pkt+0xa2>
				return -ENOMEM;
   23f16:	f06f 040b 	mvn.w	r4, #11
   23f1a:	e7ba      	b.n	23e92 <net_tcp_send_pkt+0xa2>
   23f1c:	20002b50 	.word	0x20002b50

00023f20 <tcp_retry_expired>:
	return (!list->head);
   23f20:	6b43      	ldr	r3, [r0, #52]	; 0x34
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   23f22:	2b00      	cmp	r3, #0
   23f24:	d05c      	beq.n	23fe0 <tcp_retry_expired+0xc0>
{
   23f26:	b510      	push	{r4, lr}
   23f28:	f1a0 0158 	sub.w	r1, r0, #88	; 0x58
   23f2c:	4604      	mov	r4, r0
		tcp->retry_timeout_shift++;
   23f2e:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   23f32:	f002 031f 	and.w	r3, r2, #31
   23f36:	3301      	adds	r3, #1
   23f38:	f003 031f 	and.w	r3, r3, #31
   23f3c:	f363 0204 	bfi	r2, r3, #0, #5
   23f40:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   23f44:	2b09      	cmp	r3, #9
   23f46:	dc2f      	bgt.n	23fa8 <tcp_retry_expired+0x88>
   23f48:	2200      	movs	r2, #0
   23f4a:	21c8      	movs	r1, #200	; 0xc8
   23f4c:	4099      	lsls	r1, r3
   23f4e:	f005 fd4d 	bl	299ec <_impl_k_timer_start>
	return list->head;
   23f52:	6b63      	ldr	r3, [r4, #52]	; 0x34
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   23f54:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
	return pkt->sent_or_eof;
   23f58:	791a      	ldrb	r2, [r3, #4]
		if (net_pkt_sent(pkt)) {
   23f5a:	f012 0f01 	tst.w	r2, #1
   23f5e:	d00d      	beq.n	23f7c <tcp_retry_expired+0x5c>
	return pkt->family;
   23f60:	f3c2 02c3 	ubfx	r2, r2, #3, #4
			do_ref_if_needed(tcp, pkt);
   23f64:	2a0a      	cmp	r2, #10
   23f66:	d023      	beq.n	23fb0 <tcp_retry_expired+0x90>
   23f68:	4620      	mov	r0, r4
   23f6a:	f7f9 fb4b 	bl	1d604 <net_pkt_ref>
   23f6e:	4604      	mov	r4, r0
	pkt->sent_or_eof = sent;
   23f70:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23f74:	f36f 0300 	bfc	r3, #0, #1
   23f78:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->pkt_queued = send;
   23f7c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23f80:	f043 0302 	orr.w	r3, r3, #2
   23f84:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   23f88:	4620      	mov	r0, r4
   23f8a:	f7ff ff31 	bl	23df0 <net_tcp_send_pkt>
   23f8e:	2800      	cmp	r0, #0
   23f90:	db13      	blt.n	23fba <tcp_retry_expired+0x9a>
	return pkt->family;
   23f92:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23f96:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   23f9a:	2b0a      	cmp	r3, #10
   23f9c:	d01b      	beq.n	23fd6 <tcp_retry_expired+0xb6>
   23f9e:	4a11      	ldr	r2, [pc, #68]	; (23fe4 <tcp_retry_expired+0xc4>)
   23fa0:	6f13      	ldr	r3, [r2, #112]	; 0x70
   23fa2:	3301      	adds	r3, #1
   23fa4:	6713      	str	r3, [r2, #112]	; 0x70
   23fa6:	bd10      	pop	{r4, pc}
			abort_connection(tcp);
   23fa8:	4608      	mov	r0, r1
   23faa:	f7ff f99a 	bl	232e2 <abort_connection>
			return;
   23fae:	bd10      	pop	{r4, pc}
			do_ref_if_needed(tcp, pkt);
   23fb0:	f813 3c07 	ldrb.w	r3, [r3, #-7]
   23fb4:	2b02      	cmp	r3, #2
   23fb6:	d1d7      	bne.n	23f68 <tcp_retry_expired+0x48>
   23fb8:	e7da      	b.n	23f70 <tcp_retry_expired+0x50>
   23fba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23fbe:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   23fc2:	2b0a      	cmp	r3, #10
   23fc4:	d103      	bne.n	23fce <tcp_retry_expired+0xae>
   23fc6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   23fca:	2b02      	cmp	r3, #2
   23fcc:	d0e1      	beq.n	23f92 <tcp_retry_expired+0x72>
			net_pkt_unref(pkt);
   23fce:	4620      	mov	r0, r4
   23fd0:	f7f9 fb27 	bl	1d622 <net_pkt_unref>
   23fd4:	bd10      	pop	{r4, pc}
			    !is_6lo_technology(pkt)) {
   23fd6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   23fda:	2b02      	cmp	r3, #2
   23fdc:	d1df      	bne.n	23f9e <tcp_retry_expired+0x7e>
   23fde:	e7e2      	b.n	23fa6 <tcp_retry_expired+0x86>
   23fe0:	4770      	bx	lr
   23fe2:	bf00      	nop
   23fe4:	20002b50 	.word	0x20002b50

00023fe8 <net_tcp_send_data>:
{
   23fe8:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   23fea:	6e03      	ldr	r3, [r0, #96]	; 0x60
   23fec:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
   23ff0:	b10c      	cbz	r4, 23ff6 <net_tcp_send_data+0xe>
   23ff2:	3c34      	subs	r4, #52	; 0x34
   23ff4:	e013      	b.n	2401e <net_tcp_send_data+0x36>
   23ff6:	2400      	movs	r4, #0
   23ff8:	e011      	b.n	2401e <net_tcp_send_data+0x36>
				net_pkt_unref(pkt);
   23ffa:	4620      	mov	r0, r4
   23ffc:	f7f9 fb11 	bl	1d622 <net_pkt_unref>
	pkt->pkt_queued = send;
   24000:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   24004:	f043 0302 	orr.w	r3, r3, #2
   24008:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2400c:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   24010:	d01e      	beq.n	24050 <net_tcp_send_data+0x68>
	return node->next;
   24012:	6b62      	ldr	r2, [r4, #52]	; 0x34
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   24014:	b1f2      	cbz	r2, 24054 <net_tcp_send_data+0x6c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24016:	b103      	cbz	r3, 2401a <net_tcp_send_data+0x32>
	return node->next;
   24018:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2401a:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
   2401e:	b1dc      	cbz	r4, 24058 <net_tcp_send_data+0x70>
	return pkt->pkt_queued;
   24020:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		if (net_pkt_queued(pkt)) {
   24024:	f013 0f02 	tst.w	r3, #2
   24028:	d1f0      	bne.n	2400c <net_tcp_send_data+0x24>
		if (!net_pkt_sent(pkt)) {
   2402a:	f013 0f01 	tst.w	r3, #1
   2402e:	d1ed      	bne.n	2400c <net_tcp_send_data+0x24>
			ret = net_tcp_send_pkt(pkt);
   24030:	4620      	mov	r0, r4
   24032:	f7ff fedd 	bl	23df0 <net_tcp_send_pkt>
			if (ret < 0 && !is_6lo_technology(pkt)) {
   24036:	2800      	cmp	r0, #0
   24038:	dae2      	bge.n	24000 <net_tcp_send_data+0x18>
	return pkt->family;
   2403a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2403e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   24042:	2b0a      	cmp	r3, #10
   24044:	d1d9      	bne.n	23ffa <net_tcp_send_data+0x12>
   24046:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   2404a:	2b02      	cmp	r3, #2
   2404c:	d1d5      	bne.n	23ffa <net_tcp_send_data+0x12>
   2404e:	e7d7      	b.n	24000 <net_tcp_send_data+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24050:	461a      	mov	r2, r3
   24052:	e7df      	b.n	24014 <net_tcp_send_data+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   24054:	2400      	movs	r4, #0
   24056:	e7e2      	b.n	2401e <net_tcp_send_data+0x36>
}
   24058:	2000      	movs	r0, #0
   2405a:	bd10      	pop	{r4, pc}

0002405c <net_tcp_ack_received>:
{
   2405c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24060:	b087      	sub	sp, #28
   24062:	4681      	mov	r9, r0
   24064:	4688      	mov	r8, r1
	struct net_tcp *tcp = ctx->tcp;
   24066:	6e05      	ldr	r5, [r0, #96]	; 0x60
	return (!list->head);
   24068:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   2406c:	b10b      	cbz	r3, 24072 <net_tcp_ack_received+0x16>
		valid_ack = true;
   2406e:	2700      	movs	r7, #0
   24070:	e033      	b.n	240da <net_tcp_ack_received+0x7e>
	net_stats.tcp.ackerr++;
   24072:	4a51      	ldr	r2, [pc, #324]	; (241b8 <net_tcp_ack_received+0x15c>)
   24074:	6e53      	ldr	r3, [r2, #100]	; 0x64
   24076:	3301      	adds	r3, #1
   24078:	6653      	str	r3, [r2, #100]	; 0x64
   2407a:	e7f8      	b.n	2406e <net_tcp_ack_received+0x12>
		list->head = node->next;
   2407c:	6823      	ldr	r3, [r4, #0]
   2407e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   24082:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   24086:	42a2      	cmp	r2, r4
   24088:	d005      	beq.n	24096 <net_tcp_ack_received+0x3a>
	node->next = NULL;
   2408a:	2300      	movs	r3, #0
   2408c:	6023      	str	r3, [r4, #0]
			net_pkt_unref(pkt);
   2408e:	4630      	mov	r0, r6
   24090:	f7f9 fac7 	bl	1d622 <net_pkt_unref>
   24094:	e021      	b.n	240da <net_tcp_ack_received+0x7e>
			list->tail = list->head;
   24096:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   2409a:	e7f6      	b.n	2408a <net_tcp_ack_received+0x2e>
   2409c:	4a46      	ldr	r2, [pc, #280]	; (241b8 <net_tcp_ack_received+0x15c>)
   2409e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   240a0:	3301      	adds	r3, #1
   240a2:	6653      	str	r3, [r2, #100]	; 0x64
	if (valid_ack && net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED) {
   240a4:	b12f      	cbz	r7, 240b2 <net_tcp_ack_received+0x56>
	return (enum net_tcp_state)tcp->state;
   240a6:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   240aa:	f3c3 3343 	ubfx	r3, r3, #13, #4
   240ae:	2b04      	cmp	r3, #4
   240b0:	d046      	beq.n	24140 <net_tcp_ack_received+0xe4>
}
   240b2:	b007      	add	sp, #28
   240b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_2);
   240b8:	2108      	movs	r1, #8
   240ba:	4628      	mov	r0, r5
   240bc:	f7ff faf7 	bl	236ae <net_tcp_change_state>
		list->head = node->next;
   240c0:	6823      	ldr	r3, [r4, #0]
   240c2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   240c6:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   240ca:	42a2      	cmp	r2, r4
   240cc:	d035      	beq.n	2413a <net_tcp_ack_received+0xde>
	node->next = NULL;
   240ce:	2300      	movs	r3, #0
   240d0:	6023      	str	r3, [r4, #0]
		net_pkt_unref(pkt);
   240d2:	4630      	mov	r0, r6
   240d4:	f7f9 faa5 	bl	1d622 <net_pkt_unref>
		valid_ack = true;
   240d8:	2701      	movs	r7, #1
	return (!list->head);
   240da:	f8d5 408c 	ldr.w	r4, [r5, #140]	; 0x8c
	while (!sys_slist_is_empty(list)) {
   240de:	2c00      	cmp	r4, #0
   240e0:	d0e0      	beq.n	240a4 <net_tcp_ack_received+0x48>
		pkt = CONTAINER_OF(head, struct net_pkt, sent_list);
   240e2:	f1a4 0634 	sub.w	r6, r4, #52	; 0x34
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   240e6:	a901      	add	r1, sp, #4
   240e8:	4630      	mov	r0, r6
   240ea:	f7ff fccf 	bl	23a8c <net_tcp_get_hdr>
		if (!tcp_hdr) {
   240ee:	4602      	mov	r2, r0
   240f0:	2800      	cmp	r0, #0
   240f2:	d0c3      	beq.n	2407c <net_tcp_ack_received+0x20>
	return ((u16_t)src[0] << 8) | src[1];
   240f4:	7903      	ldrb	r3, [r0, #4]
   240f6:	7941      	ldrb	r1, [r0, #5]
   240f8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   240fc:	7980      	ldrb	r0, [r0, #6]
   240fe:	79d3      	ldrb	r3, [r2, #7]
   24100:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   24104:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	return pkt->appdatalen;
   24108:	f834 3c04 	ldrh.w	r3, [r4, #-4]
		seq = sys_get_be32(tcp_hdr->seq) + net_pkt_appdatalen(pkt) - 1;
   2410c:	440b      	add	r3, r1
   2410e:	3b01      	subs	r3, #1
   24110:	eba8 0303 	sub.w	r3, r8, r3
		if (!net_tcp_seq_greater(ack, seq)) {
   24114:	2b00      	cmp	r3, #0
   24116:	ddc1      	ble.n	2409c <net_tcp_ack_received+0x40>
		if (tcp_hdr->flags & NET_TCP_FIN) {
   24118:	7b53      	ldrb	r3, [r2, #13]
   2411a:	f013 0f01 	tst.w	r3, #1
   2411e:	d0cf      	beq.n	240c0 <net_tcp_ack_received+0x64>
   24120:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   24124:	f3c3 3343 	ubfx	r3, r3, #13, #4
			if (s == NET_TCP_FIN_WAIT_1) {
   24128:	2b07      	cmp	r3, #7
   2412a:	d0c5      	beq.n	240b8 <net_tcp_ack_received+0x5c>
			} else if (s == NET_TCP_CLOSING) {
   2412c:	2b0a      	cmp	r3, #10
   2412e:	d1c7      	bne.n	240c0 <net_tcp_ack_received+0x64>
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   24130:	2109      	movs	r1, #9
   24132:	4628      	mov	r0, r5
   24134:	f7ff fabb 	bl	236ae <net_tcp_change_state>
   24138:	e7c2      	b.n	240c0 <net_tcp_ack_received+0x64>
			list->tail = list->head;
   2413a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   2413e:	e7c6      	b.n	240ce <net_tcp_ack_received+0x72>
		restart_timer(ctx->tcp);
   24140:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
   24144:	f7ff f8db 	bl	232fe <restart_timer>
		if (ctx->tcp->flags & NET_TCP_RETRYING) {
   24148:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
   2414c:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
   24150:	f412 7f00 	tst.w	r2, #512	; 0x200
   24154:	d0ad      	beq.n	240b2 <net_tcp_ack_received+0x56>
	return list->head;
   24156:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   2415a:	b108      	cbz	r0, 24160 <net_tcp_ack_received+0x104>
   2415c:	3834      	subs	r0, #52	; 0x34
   2415e:	e013      	b.n	24188 <net_tcp_ack_received+0x12c>
   24160:	2000      	movs	r0, #0
   24162:	e011      	b.n	24188 <net_tcp_ack_received+0x12c>
					do_ref_if_needed(ctx->tcp, pkt);
   24164:	f7f9 fa4e 	bl	1d604 <net_pkt_ref>
	pkt->sent_or_eof = sent;
   24168:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   2416c:	f36f 0300 	bfc	r3, #0, #1
   24170:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   24174:	b140      	cbz	r0, 24188 <net_tcp_ack_received+0x12c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24176:	f110 0334 	adds.w	r3, r0, #52	; 0x34
   2417a:	d014      	beq.n	241a6 <net_tcp_ack_received+0x14a>
	return node->next;
   2417c:	6b42      	ldr	r2, [r0, #52]	; 0x34
   2417e:	b1a2      	cbz	r2, 241aa <net_tcp_ack_received+0x14e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24180:	b103      	cbz	r3, 24184 <net_tcp_ack_received+0x128>
	return node->next;
   24182:	6b43      	ldr	r3, [r0, #52]	; 0x34
   24184:	f1a3 0034 	sub.w	r0, r3, #52	; 0x34
   24188:	b188      	cbz	r0, 241ae <net_tcp_ack_received+0x152>
	return pkt->sent_or_eof;
   2418a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
				if (net_pkt_sent(pkt)) {
   2418e:	f013 0f01 	tst.w	r3, #1
   24192:	d0ef      	beq.n	24174 <net_tcp_ack_received+0x118>
	return pkt->family;
   24194:	f3c3 03c3 	ubfx	r3, r3, #3, #4
					do_ref_if_needed(ctx->tcp, pkt);
   24198:	2b0a      	cmp	r3, #10
   2419a:	d1e3      	bne.n	24164 <net_tcp_ack_received+0x108>
   2419c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   241a0:	2b02      	cmp	r3, #2
   241a2:	d1df      	bne.n	24164 <net_tcp_ack_received+0x108>
   241a4:	e7e0      	b.n	24168 <net_tcp_ack_received+0x10c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   241a6:	461a      	mov	r2, r3
   241a8:	e7e9      	b.n	2417e <net_tcp_ack_received+0x122>
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   241aa:	2000      	movs	r0, #0
   241ac:	e7ec      	b.n	24188 <net_tcp_ack_received+0x12c>
			net_tcp_send_data(ctx);
   241ae:	4648      	mov	r0, r9
   241b0:	f7ff ff1a 	bl	23fe8 <net_tcp_send_data>
}
   241b4:	e77d      	b.n	240b2 <net_tcp_ack_received+0x56>
   241b6:	bf00      	nop
   241b8:	20002b50 	.word	0x20002b50

000241bc <iface2str>:
	if (iface->l2 == &NET_L2_GET_NAME(BLUETOOTH)) {
   241bc:	6842      	ldr	r2, [r0, #4]
   241be:	4b08      	ldr	r3, [pc, #32]	; (241e0 <iface2str+0x24>)
   241c0:	429a      	cmp	r2, r3
   241c2:	d004      	beq.n	241ce <iface2str+0x12>
	if (extra) {
   241c4:	b151      	cbz	r1, 241dc <iface2str+0x20>
		*extra = "==============";
   241c6:	4b07      	ldr	r3, [pc, #28]	; (241e4 <iface2str+0x28>)
   241c8:	600b      	str	r3, [r1, #0]
	return "<unknown type>";
   241ca:	4807      	ldr	r0, [pc, #28]	; (241e8 <iface2str+0x2c>)
   241cc:	4770      	bx	lr
		if (extra) {
   241ce:	b119      	cbz	r1, 241d8 <iface2str+0x1c>
			*extra = "=========";
   241d0:	4b06      	ldr	r3, [pc, #24]	; (241ec <iface2str+0x30>)
   241d2:	600b      	str	r3, [r1, #0]
		return "Bluetooth";
   241d4:	4806      	ldr	r0, [pc, #24]	; (241f0 <iface2str+0x34>)
   241d6:	4770      	bx	lr
   241d8:	4805      	ldr	r0, [pc, #20]	; (241f0 <iface2str+0x34>)
   241da:	4770      	bx	lr
	return "<unknown type>";
   241dc:	4802      	ldr	r0, [pc, #8]	; (241e8 <iface2str+0x2c>)
}
   241de:	4770      	bx	lr
   241e0:	0002e4dc 	.word	0x0002e4dc
   241e4:	000315b8 	.word	0x000315b8
   241e8:	0003159c 	.word	0x0003159c
   241ec:	000315ac 	.word	0x000315ac
   241f0:	00031590 	.word	0x00031590

000241f4 <slab_pool_found_already>:
				    struct k_mem_slab *slab,
				    struct net_buf_pool *pool)
{
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   241f4:	2300      	movs	r3, #0
   241f6:	2b05      	cmp	r3, #5
   241f8:	dc18      	bgt.n	2422c <slab_pool_found_already+0x38>
{
   241fa:	b410      	push	{r4}
   241fc:	e008      	b.n	24210 <slab_pool_found_already+0x1c>
		if (slab) {
			if (info->tx_slabs[i] == slab) {
				return true;
			}
		} else {
			if (info->data_pools[i] == pool) {
   241fe:	f103 0408 	add.w	r4, r3, #8
   24202:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   24206:	4294      	cmp	r4, r2
   24208:	d00e      	beq.n	24228 <slab_pool_found_already+0x34>
	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   2420a:	3301      	adds	r3, #1
   2420c:	2b05      	cmp	r3, #5
   2420e:	dc08      	bgt.n	24222 <slab_pool_found_already+0x2e>
		if (slab) {
   24210:	2900      	cmp	r1, #0
   24212:	d0f4      	beq.n	241fe <slab_pool_found_already+0xa>
			if (info->tx_slabs[i] == slab) {
   24214:	1c9c      	adds	r4, r3, #2
   24216:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   2421a:	42a1      	cmp	r1, r4
   2421c:	d1f5      	bne.n	2420a <slab_pool_found_already+0x16>
				return true;
   2421e:	2001      	movs	r0, #1
   24220:	e000      	b.n	24224 <slab_pool_found_already+0x30>
				return true;
			}
		}
	}

	return false;
   24222:	2000      	movs	r0, #0
}
   24224:	bc10      	pop	{r4}
   24226:	4770      	bx	lr
				return true;
   24228:	2001      	movs	r0, #1
   2422a:	e7fb      	b.n	24224 <slab_pool_found_already+0x30>
	return false;
   2422c:	2000      	movs	r0, #0
}
   2422e:	4770      	bx	lr

00024230 <net_shell_cmd_allocs>:
{
   24230:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_NET_PKT to see allocations.\n");
   24232:	4802      	ldr	r0, [pc, #8]	; (2423c <net_shell_cmd_allocs+0xc>)
   24234:	f7de fe5e 	bl	2ef4 <printk>
}
   24238:	2000      	movs	r0, #0
   2423a:	bd08      	pop	{r3, pc}
   2423c:	00031894 	.word	0x00031894

00024240 <net_shell_cmd_app>:
{
   24240:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_APP and either CONFIG_NET_APP_CLIENT "
   24242:	4802      	ldr	r0, [pc, #8]	; (2424c <net_shell_cmd_app+0xc>)
   24244:	f7de fe56 	bl	2ef4 <printk>
}
   24248:	2000      	movs	r0, #0
   2424a:	bd08      	pop	{r3, pc}
   2424c:	000318cc 	.word	0x000318cc

00024250 <net_shell_cmd_arp>:
{
   24250:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_ARP, CONFIG_NET_IPV4 and "
   24252:	4802      	ldr	r0, [pc, #8]	; (2425c <net_shell_cmd_arp+0xc>)
   24254:	f7de fe4e 	bl	2ef4 <printk>
}
   24258:	2000      	movs	r0, #0
   2425a:	bd08      	pop	{r3, pc}
   2425c:	00031950 	.word	0x00031950

00024260 <net_shell_cmd_dns>:
{
   24260:	b508      	push	{r3, lr}
	printk("DNS resolver not supported.\n");
   24262:	4802      	ldr	r0, [pc, #8]	; (2426c <net_shell_cmd_dns+0xc>)
   24264:	f7de fe46 	bl	2ef4 <printk>
}
   24268:	2000      	movs	r0, #0
   2426a:	bd08      	pop	{r3, pc}
   2426c:	00031a50 	.word	0x00031a50

00024270 <net_shell_cmd_http>:
{
   24270:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_HTTP_CONN and CONFIG_HTTP_SERVER "
   24272:	4802      	ldr	r0, [pc, #8]	; (2427c <net_shell_cmd_http+0xc>)
   24274:	f7de fe3e 	bl	2ef4 <printk>
}
   24278:	2000      	movs	r0, #0
   2427a:	bd08      	pop	{r3, pc}
   2427c:	00031a70 	.word	0x00031a70

00024280 <context_info>:
	return context->flags & NET_CONTEXT_IN_USE;
   24280:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
#if defined(CONFIG_NET_CONTEXT_NET_PKT_POOL)
	struct ctx_info *info = user_data;
	struct k_mem_slab *slab;
	struct net_buf_pool *pool;

	if (!net_context_is_used(context)) {
   24284:	f013 0f01 	tst.w	r3, #1
   24288:	d032      	beq.n	242f0 <context_info+0x70>
{
   2428a:	b570      	push	{r4, r5, r6, lr}
   2428c:	460d      	mov	r5, r1
   2428e:	4604      	mov	r4, r0
		return;
	}

	if (context->tx_slab) {
   24290:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   24292:	b19b      	cbz	r3, 242bc <context_info+0x3c>
		slab = context->tx_slab();
   24294:	4798      	blx	r3
   24296:	4606      	mov	r6, r0

		if (slab_pool_found_already(info, slab, NULL)) {
   24298:	2200      	movs	r2, #0
   2429a:	4601      	mov	r1, r0
   2429c:	4628      	mov	r0, r5
   2429e:	f7ff ffa9 	bl	241f4 <slab_pool_found_already>
   242a2:	b100      	cbz	r0, 242a6 <context_info+0x26>
   242a4:	bd70      	pop	{r4, r5, r6, pc}
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%zu\t%u\t%u\tETX\n",
		       slab, slab->num_blocks * slab->block_size,
		       slab->num_blocks, k_mem_slab_num_free_get(slab));
#else
		printk("%p\t%d\tETX\n", slab, slab->num_blocks);
   242a6:	68b2      	ldr	r2, [r6, #8]
   242a8:	4631      	mov	r1, r6
   242aa:	4812      	ldr	r0, [pc, #72]	; (242f4 <context_info+0x74>)
   242ac:	f7de fe22 	bl	2ef4 <printk>
#endif
		info->are_external_pools = true;
   242b0:	2301      	movs	r3, #1
   242b2:	712b      	strb	r3, [r5, #4]
		info->tx_slabs[info->pos] = slab;
   242b4:	682b      	ldr	r3, [r5, #0]
   242b6:	3302      	adds	r3, #2
   242b8:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
	}

	if (context->data_pool) {
   242bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
   242be:	b19b      	cbz	r3, 242e8 <context_info+0x68>
		pool = context->data_pool();
   242c0:	4798      	blx	r3
   242c2:	4604      	mov	r4, r0

		if (slab_pool_found_already(info, NULL, pool)) {
   242c4:	4602      	mov	r2, r0
   242c6:	2100      	movs	r1, #0
   242c8:	4628      	mov	r0, r5
   242ca:	f7ff ff93 	bl	241f4 <slab_pool_found_already>
   242ce:	2800      	cmp	r0, #0
   242d0:	d1e8      	bne.n	242a4 <context_info+0x24>
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%d\t%d\t%d\tEDATA (%s)\n",
		       pool, pool->pool_size, pool->buf_count,
		       pool->avail_count, pool->name);
#else
		printk("%p\t%d\tEDATA\n", pool, pool->buf_count);
   242d2:	8a22      	ldrh	r2, [r4, #16]
   242d4:	4621      	mov	r1, r4
   242d6:	4808      	ldr	r0, [pc, #32]	; (242f8 <context_info+0x78>)
   242d8:	f7de fe0c 	bl	2ef4 <printk>
#endif
		info->are_external_pools = true;
   242dc:	2301      	movs	r3, #1
   242de:	712b      	strb	r3, [r5, #4]
		info->data_pools[info->pos] = pool;
   242e0:	682b      	ldr	r3, [r5, #0]
   242e2:	3308      	adds	r3, #8
   242e4:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	}

	info->pos++;
   242e8:	682b      	ldr	r3, [r5, #0]
   242ea:	3301      	adds	r3, #1
   242ec:	602b      	str	r3, [r5, #0]
   242ee:	e7d9      	b.n	242a4 <context_info+0x24>
   242f0:	4770      	bx	lr
   242f2:	bf00      	nop
   242f4:	00031554 	.word	0x00031554
   242f8:	00031560 	.word	0x00031560

000242fc <net_shell_cmd_rpl>:
}

#endif /* CONFIG_NET_RPL */

int net_shell_cmd_rpl(int argc, char *argv[])
{
   242fc:	b508      	push	{r3, lr}
		printk("No parents found.\n");
	}

	printk("\n");
#else
	printk("RPL not enabled, set CONFIG_NET_RPL to enable it.\n");
   242fe:	4802      	ldr	r0, [pc, #8]	; (24308 <net_shell_cmd_rpl+0xc>)
   24300:	f7de fdf8 	bl	2ef4 <printk>
#endif

	return 0;
}
   24304:	2000      	movs	r0, #0
   24306:	bd08      	pop	{r3, pc}
   24308:	00031c80 	.word	0x00031c80

0002430c <net_shell_cmd_stacks>:
extern K_THREAD_STACK_DEFINE(sys_work_q_stack,
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);
#endif

int net_shell_cmd_stacks(int argc, char *argv[])
{
   2430c:	b530      	push	{r4, r5, lr}
   2430e:	b087      	sub	sp, #28
	struct net_stack_info *info;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	for (info = __net_stack_start; info != __net_stack_end; info++) {
   24310:	4d3f      	ldr	r5, [pc, #252]	; (24410 <net_shell_cmd_stacks+0x104>)
   24312:	e011      	b.n	24338 <net_shell_cmd_stacks+0x2c>
						unsigned *unused)
{
	*unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	*pcnt = ((size - *unused) * 100) / size;
   24314:	1a81      	subs	r1, r0, r2
   24316:	2364      	movs	r3, #100	; 0x64
   24318:	fb03 f301 	mul.w	r3, r3, r1
   2431c:	fbb3 f3f0 	udiv	r3, r3, r0
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
					     info->size, &pcnt, &unused);

#if defined(CONFIG_INIT_STACKS)
		printk("%s [%s] stack size %zu/%zu bytes unused %u usage"
   24320:	9304      	str	r3, [sp, #16]
   24322:	9003      	str	r0, [sp, #12]
   24324:	9102      	str	r1, [sp, #8]
   24326:	9201      	str	r2, [sp, #4]
   24328:	9000      	str	r0, [sp, #0]
   2432a:	68eb      	ldr	r3, [r5, #12]
   2432c:	68aa      	ldr	r2, [r5, #8]
   2432e:	6869      	ldr	r1, [r5, #4]
   24330:	4838      	ldr	r0, [pc, #224]	; (24414 <net_shell_cmd_stacks+0x108>)
   24332:	f7de fddf 	bl	2ef4 <printk>
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   24336:	3514      	adds	r5, #20
   24338:	4b37      	ldr	r3, [pc, #220]	; (24418 <net_shell_cmd_stacks+0x10c>)
   2433a:	429d      	cmp	r5, r3
   2433c:	d00b      	beq.n	24356 <net_shell_cmd_stacks+0x4a>
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
   2433e:	682c      	ldr	r4, [r5, #0]
   24340:	6928      	ldr	r0, [r5, #16]
   24342:	2300      	movs	r3, #0
	size_t unused = 0;
   24344:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   24346:	4298      	cmp	r0, r3
   24348:	d9e4      	bls.n	24314 <net_shell_cmd_stacks+0x8>
		if ((unsigned char)stack[i] == 0xaa) {
   2434a:	5ce1      	ldrb	r1, [r4, r3]
   2434c:	29aa      	cmp	r1, #170	; 0xaa
   2434e:	d1e1      	bne.n	24314 <net_shell_cmd_stacks+0x8>
			unused++;
   24350:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   24352:	3301      	adds	r3, #1
   24354:	e7f7      	b.n	24346 <net_shell_cmd_stacks+0x3a>
   24356:	2300      	movs	r3, #0
   24358:	461a      	mov	r2, r3
   2435a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   2435e:	d206      	bcs.n	2436e <net_shell_cmd_stacks+0x62>
		if ((unsigned char)stack[i] == 0xaa) {
   24360:	492e      	ldr	r1, [pc, #184]	; (2441c <net_shell_cmd_stacks+0x110>)
   24362:	5cc9      	ldrb	r1, [r1, r3]
   24364:	29aa      	cmp	r1, #170	; 0xaa
   24366:	d102      	bne.n	2436e <net_shell_cmd_stacks+0x62>
			unused++;
   24368:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   2436a:	3301      	adds	r3, #1
   2436c:	e7f5      	b.n	2435a <net_shell_cmd_stacks+0x4e>
   2436e:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   24372:	2364      	movs	r3, #100	; 0x64
   24374:	fb03 f301 	mul.w	r3, r3, r1
   24378:	0adb      	lsrs	r3, r3, #11

#if defined(CONFIG_INIT_STACKS)
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_main_stack),
				     K_THREAD_STACK_SIZEOF(_main_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   2437a:	9304      	str	r3, [sp, #16]
   2437c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   24380:	9303      	str	r3, [sp, #12]
   24382:	9102      	str	r1, [sp, #8]
   24384:	9201      	str	r2, [sp, #4]
   24386:	9300      	str	r3, [sp, #0]
   24388:	4a25      	ldr	r2, [pc, #148]	; (24420 <net_shell_cmd_stacks+0x114>)
   2438a:	4926      	ldr	r1, [pc, #152]	; (24424 <net_shell_cmd_stacks+0x118>)
   2438c:	4826      	ldr	r0, [pc, #152]	; (24428 <net_shell_cmd_stacks+0x11c>)
   2438e:	f7de fdb1 	bl	2ef4 <printk>
   24392:	2300      	movs	r3, #0
	size_t unused = 0;
   24394:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   24396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   2439a:	d206      	bcs.n	243aa <net_shell_cmd_stacks+0x9e>
		if ((unsigned char)stack[i] == 0xaa) {
   2439c:	4923      	ldr	r1, [pc, #140]	; (2442c <net_shell_cmd_stacks+0x120>)
   2439e:	5cc9      	ldrb	r1, [r1, r3]
   243a0:	29aa      	cmp	r1, #170	; 0xaa
   243a2:	d102      	bne.n	243aa <net_shell_cmd_stacks+0x9e>
			unused++;
   243a4:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   243a6:	3301      	adds	r3, #1
   243a8:	e7f5      	b.n	24396 <net_shell_cmd_stacks+0x8a>
   243aa:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   243ae:	2364      	movs	r3, #100	; 0x64
   243b0:	fb03 f301 	mul.w	r3, r3, r1
   243b4:	0adb      	lsrs	r3, r3, #11
	       CONFIG_MAIN_STACK_SIZE - unused, CONFIG_MAIN_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_interrupt_stack),
				     K_THREAD_STACK_SIZEOF(_interrupt_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   243b6:	9304      	str	r3, [sp, #16]
   243b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   243bc:	9303      	str	r3, [sp, #12]
   243be:	9102      	str	r1, [sp, #8]
   243c0:	9201      	str	r2, [sp, #4]
   243c2:	9300      	str	r3, [sp, #0]
   243c4:	4a1a      	ldr	r2, [pc, #104]	; (24430 <net_shell_cmd_stacks+0x124>)
   243c6:	491b      	ldr	r1, [pc, #108]	; (24434 <net_shell_cmd_stacks+0x128>)
   243c8:	4817      	ldr	r0, [pc, #92]	; (24428 <net_shell_cmd_stacks+0x11c>)
   243ca:	f7de fd93 	bl	2ef4 <printk>
   243ce:	2300      	movs	r3, #0
	size_t unused = 0;
   243d0:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   243d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   243d6:	d206      	bcs.n	243e6 <net_shell_cmd_stacks+0xda>
		if ((unsigned char)stack[i] == 0xaa) {
   243d8:	4917      	ldr	r1, [pc, #92]	; (24438 <net_shell_cmd_stacks+0x12c>)
   243da:	5cc9      	ldrb	r1, [r1, r3]
   243dc:	29aa      	cmp	r1, #170	; 0xaa
   243de:	d102      	bne.n	243e6 <net_shell_cmd_stacks+0xda>
			unused++;
   243e0:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   243e2:	3301      	adds	r3, #1
   243e4:	e7f5      	b.n	243d2 <net_shell_cmd_stacks+0xc6>
   243e6:	f5c2 6180 	rsb	r1, r2, #1024	; 0x400
   243ea:	2364      	movs	r3, #100	; 0x64
   243ec:	fb03 f301 	mul.w	r3, r3, r1
   243f0:	0a9b      	lsrs	r3, r3, #10
	       CONFIG_ISR_STACK_SIZE - unused, CONFIG_ISR_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(sys_work_q_stack),
				     K_THREAD_STACK_SIZEOF(sys_work_q_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   243f2:	9304      	str	r3, [sp, #16]
   243f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   243f8:	9303      	str	r3, [sp, #12]
   243fa:	9102      	str	r1, [sp, #8]
   243fc:	9201      	str	r2, [sp, #4]
   243fe:	9300      	str	r3, [sp, #0]
   24400:	4a0e      	ldr	r2, [pc, #56]	; (2443c <net_shell_cmd_stacks+0x130>)
   24402:	490f      	ldr	r1, [pc, #60]	; (24440 <net_shell_cmd_stacks+0x134>)
   24404:	4808      	ldr	r0, [pc, #32]	; (24428 <net_shell_cmd_stacks+0x11c>)
   24406:	f7de fd75 	bl	2ef4 <printk>
#else
	printk("Enable CONFIG_INIT_STACKS to see usage information.\n");
#endif

	return 0;
}
   2440a:	2000      	movs	r0, #0
   2440c:	b007      	add	sp, #28
   2440e:	bd30      	pop	{r4, r5, pc}
   24410:	2000d574 	.word	0x2000d574
   24414:	00031cb4 	.word	0x00031cb4
   24418:	2000d5b0 	.word	0x2000d5b0
   2441c:	2000a420 	.word	0x2000a420
   24420:	00031cf8 	.word	0x00031cf8
   24424:	00031d04 	.word	0x00031d04
   24428:	00031d0c 	.word	0x00031d0c
   2442c:	2000ad60 	.word	0x2000ad60
   24430:	00031d4c 	.word	0x00031d4c
   24434:	00031d60 	.word	0x00031d60
   24438:	2000b560 	.word	0x2000b560
   2443c:	00031d64 	.word	0x00031d64
   24440:	00031d78 	.word	0x00031d78

00024444 <net_shell_cmd_stats>:

int net_shell_cmd_stats(int argc, char *argv[])
{
   24444:	b510      	push	{r4, lr}
   24446:	b082      	sub	sp, #8
	printk("IPv6 recv      %d\tsent\t%d\tdrop\t%d\tforwarded\t%d\n",
   24448:	4c34      	ldr	r4, [pc, #208]	; (2451c <net_shell_cmd_stats+0xd8>)
   2444a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2444c:	9300      	str	r3, [sp, #0]
   2444e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   24450:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   24452:	6a61      	ldr	r1, [r4, #36]	; 0x24
   24454:	4832      	ldr	r0, [pc, #200]	; (24520 <net_shell_cmd_stats+0xdc>)
   24456:	f7de fd4d 	bl	2ef4 <printk>
	printk("IPv6 ND recv   %d\tsent\t%d\tdrop\t%d\n",
   2445a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   2445e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   24462:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   24466:	482f      	ldr	r0, [pc, #188]	; (24524 <net_shell_cmd_stats+0xe0>)
   24468:	f7de fd44 	bl	2ef4 <printk>
	printk("IPv6 MLD recv  %d\tsent\t%d\tdrop\t%d\n",
   2446c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   24470:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   24474:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   24478:	482b      	ldr	r0, [pc, #172]	; (24528 <net_shell_cmd_stats+0xe4>)
   2447a:	f7de fd3b 	bl	2ef4 <printk>
	printk("IP vhlerr      %d\thblener\t%d\tlblener\t%d\n",
   2447e:	6963      	ldr	r3, [r4, #20]
   24480:	6922      	ldr	r2, [r4, #16]
   24482:	68e1      	ldr	r1, [r4, #12]
   24484:	4829      	ldr	r0, [pc, #164]	; (2452c <net_shell_cmd_stats+0xe8>)
   24486:	f7de fd35 	bl	2ef4 <printk>
	printk("IP fragerr     %d\tchkerr\t%d\tprotoer\t%d\n",
   2448a:	6a23      	ldr	r3, [r4, #32]
   2448c:	69e2      	ldr	r2, [r4, #28]
   2448e:	69a1      	ldr	r1, [r4, #24]
   24490:	4827      	ldr	r0, [pc, #156]	; (24530 <net_shell_cmd_stats+0xec>)
   24492:	f7de fd2f 	bl	2ef4 <printk>
	printk("ICMP recv      %d\tsent\t%d\tdrop\t%d\n",
   24496:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   24498:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2449a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2449c:	4825      	ldr	r0, [pc, #148]	; (24534 <net_shell_cmd_stats+0xf0>)
   2449e:	f7de fd29 	bl	2ef4 <printk>
	printk("ICMP typeer    %d\tchkerr\t%d\n",
   244a2:	6c62      	ldr	r2, [r4, #68]	; 0x44
   244a4:	6c21      	ldr	r1, [r4, #64]	; 0x40
   244a6:	4824      	ldr	r0, [pc, #144]	; (24538 <net_shell_cmd_stats+0xf4>)
   244a8:	f7de fd24 	bl	2ef4 <printk>
	printk("UDP recv       %d\tsent\t%d\tdrop\t%d\n",
   244ac:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   244ae:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   244b2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   244b6:	4821      	ldr	r0, [pc, #132]	; (2453c <net_shell_cmd_stats+0xf8>)
   244b8:	f7de fd1c 	bl	2ef4 <printk>
	printk("UDP chkerr     %d\n",
   244bc:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   244c0:	481f      	ldr	r0, [pc, #124]	; (24540 <net_shell_cmd_stats+0xfc>)
   244c2:	f7de fd17 	bl	2ef4 <printk>
	printk("TCP bytes recv %u\tsent\t%d\n",
   244c6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   244c8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   244ca:	481e      	ldr	r0, [pc, #120]	; (24544 <net_shell_cmd_stats+0x100>)
   244cc:	f7de fd12 	bl	2ef4 <printk>
	printk("TCP seg recv   %d\tsent\t%d\tdrop\t%d\n",
   244d0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   244d2:	6da2      	ldr	r2, [r4, #88]	; 0x58
   244d4:	6d61      	ldr	r1, [r4, #84]	; 0x54
   244d6:	481c      	ldr	r0, [pc, #112]	; (24548 <net_shell_cmd_stats+0x104>)
   244d8:	f7de fd0c 	bl	2ef4 <printk>
	printk("TCP seg resent %d\tchkerr\t%d\tackerr\t%d\n",
   244dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   244de:	6e22      	ldr	r2, [r4, #96]	; 0x60
   244e0:	6d21      	ldr	r1, [r4, #80]	; 0x50
   244e2:	481a      	ldr	r0, [pc, #104]	; (2454c <net_shell_cmd_stats+0x108>)
   244e4:	f7de fd06 	bl	2ef4 <printk>
	printk("TCP seg rsterr %d\trst\t%d\tre-xmit\t%d\n",
   244e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
   244ea:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   244ec:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   244ee:	4818      	ldr	r0, [pc, #96]	; (24550 <net_shell_cmd_stats+0x10c>)
   244f0:	f7de fd00 	bl	2ef4 <printk>
	printk("TCP conn drop  %d\tconnrst\t%d\n",
   244f4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   244f6:	6f61      	ldr	r1, [r4, #116]	; 0x74
   244f8:	4816      	ldr	r0, [pc, #88]	; (24554 <net_shell_cmd_stats+0x110>)
   244fa:	f7de fcfb 	bl	2ef4 <printk>
	printk("Bytes received %u\n", GET_STAT(bytes.received));
   244fe:	68a1      	ldr	r1, [r4, #8]
   24500:	4815      	ldr	r0, [pc, #84]	; (24558 <net_shell_cmd_stats+0x114>)
   24502:	f7de fcf7 	bl	2ef4 <printk>
	printk("Bytes sent     %u\n", GET_STAT(bytes.sent));
   24506:	6861      	ldr	r1, [r4, #4]
   24508:	4814      	ldr	r0, [pc, #80]	; (2455c <net_shell_cmd_stats+0x118>)
   2450a:	f7de fcf3 	bl	2ef4 <printk>
	printk("Processing err %d\n", GET_STAT(processing_error));
   2450e:	6821      	ldr	r1, [r4, #0]
   24510:	4813      	ldr	r0, [pc, #76]	; (24560 <net_shell_cmd_stats+0x11c>)
   24512:	f7de fcef 	bl	2ef4 <printk>
#else
	printk("Network statistics not compiled in.\n");
#endif

	return 0;
}
   24516:	2000      	movs	r0, #0
   24518:	b002      	add	sp, #8
   2451a:	bd10      	pop	{r4, pc}
   2451c:	20002b50 	.word	0x20002b50
   24520:	00031d80 	.word	0x00031d80
   24524:	00031db0 	.word	0x00031db0
   24528:	00031dd4 	.word	0x00031dd4
   2452c:	00031df8 	.word	0x00031df8
   24530:	00031e24 	.word	0x00031e24
   24534:	00031e4c 	.word	0x00031e4c
   24538:	00031e70 	.word	0x00031e70
   2453c:	00031e90 	.word	0x00031e90
   24540:	00031eb4 	.word	0x00031eb4
   24544:	00031ec8 	.word	0x00031ec8
   24548:	00031ee4 	.word	0x00031ee4
   2454c:	00031f08 	.word	0x00031f08
   24550:	00031f30 	.word	0x00031f30
   24554:	00031f58 	.word	0x00031f58
   24558:	00031f78 	.word	0x00031f78
   2455c:	00031f8c 	.word	0x00031f8c
   24560:	00031fa0 	.word	0x00031fa0

00024564 <tcp_sent_cb>:

static void tcp_sent_cb(struct net_context *context,
			int status,
			void *token,
			void *user_data)
{
   24564:	b508      	push	{r3, lr}
	printk("Message sent\n");
   24566:	4802      	ldr	r0, [pc, #8]	; (24570 <tcp_sent_cb+0xc>)
   24568:	f7de fcc4 	bl	2ef4 <printk>
   2456c:	bd08      	pop	{r3, pc}
   2456e:	bf00      	nop
   24570:	00032260 	.word	0x00032260

00024574 <net_shell_cmd_conn>:
{
   24574:	b510      	push	{r4, lr}
   24576:	b082      	sub	sp, #8
	int count = 0;
   24578:	ac02      	add	r4, sp, #8
   2457a:	2300      	movs	r3, #0
   2457c:	f844 3d04 	str.w	r3, [r4, #-4]!
	printk("     Context   \tIface         Flags "
   24580:	4810      	ldr	r0, [pc, #64]	; (245c4 <net_shell_cmd_conn+0x50>)
   24582:	f7de fcb7 	bl	2ef4 <printk>
	net_context_foreach(context_cb, &count);
   24586:	4621      	mov	r1, r4
   24588:	480f      	ldr	r0, [pc, #60]	; (245c8 <net_shell_cmd_conn+0x54>)
   2458a:	f7f8 ff03 	bl	1d394 <net_context_foreach>
	if (count == 0) {
   2458e:	9b01      	ldr	r3, [sp, #4]
   24590:	b17b      	cbz	r3, 245b2 <net_shell_cmd_conn+0x3e>
	printk("\nTCP        Src port  Dst port   Send-Seq   Send-Ack  MSS"
   24592:	490e      	ldr	r1, [pc, #56]	; (245cc <net_shell_cmd_conn+0x58>)
   24594:	480e      	ldr	r0, [pc, #56]	; (245d0 <net_shell_cmd_conn+0x5c>)
   24596:	f7de fcad 	bl	2ef4 <printk>
	count = 0;
   2459a:	a902      	add	r1, sp, #8
   2459c:	2300      	movs	r3, #0
   2459e:	f841 3d04 	str.w	r3, [r1, #-4]!
	net_tcp_foreach(tcp_cb, &count);
   245a2:	480c      	ldr	r0, [pc, #48]	; (245d4 <net_shell_cmd_conn+0x60>)
   245a4:	f7ff fa48 	bl	23a38 <net_tcp_foreach>
	if (count == 0) {
   245a8:	9b01      	ldr	r3, [sp, #4]
   245aa:	b133      	cbz	r3, 245ba <net_shell_cmd_conn+0x46>
}
   245ac:	2000      	movs	r0, #0
   245ae:	b002      	add	sp, #8
   245b0:	bd10      	pop	{r4, pc}
		printk("No connections\n");
   245b2:	4809      	ldr	r0, [pc, #36]	; (245d8 <net_shell_cmd_conn+0x64>)
   245b4:	f7de fc9e 	bl	2ef4 <printk>
   245b8:	e7eb      	b.n	24592 <net_shell_cmd_conn+0x1e>
		printk("No TCP connections\n");
   245ba:	4808      	ldr	r0, [pc, #32]	; (245dc <net_shell_cmd_conn+0x68>)
   245bc:	f7de fc9a 	bl	2ef4 <printk>
   245c0:	e7f4      	b.n	245ac <net_shell_cmd_conn+0x38>
   245c2:	bf00      	nop
   245c4:	000319ac 	.word	0x000319ac
   245c8:	00024751 	.word	0x00024751
   245cc:	0002ea98 	.word	0x0002ea98
   245d0:	000319fc 	.word	0x000319fc
   245d4:	000245e1 	.word	0x000245e1
   245d8:	000319ec 	.word	0x000319ec
   245dc:	00031a3c 	.word	0x00031a3c

000245e0 <tcp_cb>:
{
   245e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   245e4:	b084      	sub	sp, #16
   245e6:	4604      	mov	r4, r0
   245e8:	460f      	mov	r7, r1
	u16_t recv_mss = net_tcp_get_recv_mss(tcp);
   245ea:	f7fe ffe4 	bl	235b6 <net_tcp_get_recv_mss>
   245ee:	4680      	mov	r8, r0
	       ntohs(net_sin6_ptr(&tcp->context->local)->sin6_port),
   245f0:	6823      	ldr	r3, [r4, #0]
   245f2:	895a      	ldrh	r2, [r3, #10]
   245f4:	0215      	lsls	r5, r2, #8
   245f6:	ea45 2512 	orr.w	r5, r5, r2, lsr #8
   245fa:	b2ad      	uxth	r5, r5
	       ntohs(net_sin6(&tcp->context->remote)->sin6_port),
   245fc:	8adb      	ldrh	r3, [r3, #22]
   245fe:	021e      	lsls	r6, r3, #8
   24600:	ea46 2613 	orr.w	r6, r6, r3, lsr #8
   24604:	b2b6      	uxth	r6, r6
	printk("%p    %5u     %5u %10u %10u %5u   %s\n",
   24606:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
   2460a:	f8d4 a09c 	ldr.w	sl, [r4, #156]	; 0x9c
   2460e:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   24612:	f3c0 3043 	ubfx	r0, r0, #13, #4
   24616:	f7ff f845 	bl	236a4 <net_tcp_state_str>
   2461a:	9003      	str	r0, [sp, #12]
   2461c:	f8cd 8008 	str.w	r8, [sp, #8]
   24620:	f8cd a004 	str.w	sl, [sp, #4]
   24624:	f8cd 9000 	str.w	r9, [sp]
   24628:	4633      	mov	r3, r6
   2462a:	462a      	mov	r2, r5
   2462c:	4621      	mov	r1, r4
   2462e:	4804      	ldr	r0, [pc, #16]	; (24640 <tcp_cb+0x60>)
   24630:	f7de fc60 	bl	2ef4 <printk>
	(*count)++;
   24634:	683b      	ldr	r3, [r7, #0]
   24636:	3301      	adds	r3, #1
   24638:	603b      	str	r3, [r7, #0]
}
   2463a:	b004      	add	sp, #16
   2463c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24640:	000321bc 	.word	0x000321bc

00024644 <get_addresses>:
{
   24644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24648:	b083      	sub	sp, #12
   2464a:	460d      	mov	r5, r1
   2464c:	4616      	mov	r6, r2
   2464e:	461f      	mov	r7, r3
	if (context->local.family == AF_INET6) {
   24650:	8903      	ldrh	r3, [r0, #8]
   24652:	2b0a      	cmp	r3, #10
   24654:	d008      	beq.n	24668 <get_addresses+0x24>
	if (context->local.family == AF_UNSPEC) {
   24656:	b393      	cbz	r3, 246be <get_addresses+0x7a>
		snprintk(addr_local, local_len, "AF_UNK(%d)",
   24658:	4a1c      	ldr	r2, [pc, #112]	; (246cc <get_addresses+0x88>)
   2465a:	4631      	mov	r1, r6
   2465c:	4628      	mov	r0, r5
   2465e:	f7de fc57 	bl	2f10 <snprintk>
}
   24662:	b003      	add	sp, #12
   24664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24668:	4604      	mov	r4, r0
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   2466a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 246d4 <get_addresses+0x90>
   2466e:	2328      	movs	r3, #40	; 0x28
   24670:	464a      	mov	r2, r9
   24672:	68c1      	ldr	r1, [r0, #12]
   24674:	200a      	movs	r0, #10
   24676:	f7f9 fc1d 	bl	1deb4 <net_addr_ntop>
			 ntohs(net_sin6_ptr(&context->local)->sin6_port));
   2467a:	8962      	ldrh	r2, [r4, #10]
   2467c:	0213      	lsls	r3, r2, #8
   2467e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   24682:	b29b      	uxth	r3, r3
		snprintk(addr_local, local_len, "[%s]:%u",
   24684:	f8df 8050 	ldr.w	r8, [pc, #80]	; 246d8 <get_addresses+0x94>
   24688:	9300      	str	r3, [sp, #0]
   2468a:	4603      	mov	r3, r0
   2468c:	4642      	mov	r2, r8
   2468e:	4631      	mov	r1, r6
   24690:	4628      	mov	r0, r5
   24692:	f7de fc3d 	bl	2f10 <snprintk>
   24696:	2328      	movs	r3, #40	; 0x28
   24698:	464a      	mov	r2, r9
   2469a:	f104 0118 	add.w	r1, r4, #24
   2469e:	200a      	movs	r0, #10
   246a0:	f7f9 fc08 	bl	1deb4 <net_addr_ntop>
			 ntohs(net_sin6(&context->remote)->sin6_port));
   246a4:	8ae2      	ldrh	r2, [r4, #22]
   246a6:	0213      	lsls	r3, r2, #8
   246a8:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   246ac:	b29b      	uxth	r3, r3
		snprintk(addr_remote, remote_len, "[%s]:%u",
   246ae:	9300      	str	r3, [sp, #0]
   246b0:	4603      	mov	r3, r0
   246b2:	4642      	mov	r2, r8
   246b4:	990a      	ldr	r1, [sp, #40]	; 0x28
   246b6:	4638      	mov	r0, r7
   246b8:	f7de fc2a 	bl	2f10 <snprintk>
   246bc:	e7d1      	b.n	24662 <get_addresses+0x1e>
		snprintk(addr_local, local_len, "AF_UNSPEC");
   246be:	4a04      	ldr	r2, [pc, #16]	; (246d0 <get_addresses+0x8c>)
   246c0:	4631      	mov	r1, r6
   246c2:	4628      	mov	r0, r5
   246c4:	f7de fc24 	bl	2f10 <snprintk>
   246c8:	e7cb      	b.n	24662 <get_addresses+0x1e>
   246ca:	bf00      	nop
   246cc:	00031584 	.word	0x00031584
   246d0:	00031578 	.word	0x00031578
   246d4:	20002528 	.word	0x20002528
   246d8:	00031570 	.word	0x00031570

000246dc <print_connect_info>:
{
   246dc:	b570      	push	{r4, r5, r6, lr}
	switch (family) {
   246de:	2802      	cmp	r0, #2
   246e0:	d008      	beq.n	246f4 <print_connect_info+0x18>
   246e2:	460d      	mov	r5, r1
   246e4:	4614      	mov	r4, r2
   246e6:	280a      	cmp	r0, #10
   246e8:	d008      	beq.n	246fc <print_connect_info+0x20>
		printk("Unknown protocol family (%d)\n", family);
   246ea:	4601      	mov	r1, r0
   246ec:	4813      	ldr	r0, [pc, #76]	; (2473c <print_connect_info+0x60>)
   246ee:	f7de fc01 	bl	2ef4 <printk>
   246f2:	bd70      	pop	{r4, r5, r6, pc}
		printk("IPv4 not supported\n");
   246f4:	4812      	ldr	r0, [pc, #72]	; (24740 <print_connect_info+0x64>)
   246f6:	f7de fbfd 	bl	2ef4 <printk>
		break;
   246fa:	bd70      	pop	{r4, r5, r6, pc}
   246fc:	4e11      	ldr	r6, [pc, #68]	; (24744 <print_connect_info+0x68>)
   246fe:	2328      	movs	r3, #40	; 0x28
   24700:	4632      	mov	r2, r6
   24702:	3104      	adds	r1, #4
   24704:	200a      	movs	r0, #10
   24706:	f7f9 fbd5 	bl	1deb4 <net_addr_ntop>
		       ntohs(net_sin6(myaddr)->sin6_port));
   2470a:	886b      	ldrh	r3, [r5, #2]
   2470c:	021a      	lsls	r2, r3, #8
   2470e:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("Connecting from [%s]:%u ",
   24712:	b292      	uxth	r2, r2
   24714:	4601      	mov	r1, r0
   24716:	480c      	ldr	r0, [pc, #48]	; (24748 <print_connect_info+0x6c>)
   24718:	f7de fbec 	bl	2ef4 <printk>
   2471c:	2328      	movs	r3, #40	; 0x28
   2471e:	4632      	mov	r2, r6
   24720:	1d21      	adds	r1, r4, #4
   24722:	200a      	movs	r0, #10
   24724:	f7f9 fbc6 	bl	1deb4 <net_addr_ntop>
		       ntohs(net_sin6(addr)->sin6_port));
   24728:	8863      	ldrh	r3, [r4, #2]
   2472a:	021a      	lsls	r2, r3, #8
   2472c:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("to [%s]:%u\n",
   24730:	b292      	uxth	r2, r2
   24732:	4601      	mov	r1, r0
   24734:	4805      	ldr	r0, [pc, #20]	; (2474c <print_connect_info+0x70>)
   24736:	f7de fbdd 	bl	2ef4 <printk>
		break;
   2473a:	bd70      	pop	{r4, r5, r6, pc}
   2473c:	00032154 	.word	0x00032154
   24740:	00032118 	.word	0x00032118
   24744:	20002528 	.word	0x20002528
   24748:	0003212c 	.word	0x0003212c
   2474c:	00032148 	.word	0x00032148

00024750 <context_cb>:
{
   24750:	b5f0      	push	{r4, r5, r6, r7, lr}
   24752:	b09f      	sub	sp, #124	; 0x7c
   24754:	4604      	mov	r4, r0
   24756:	460d      	mov	r5, r1
	char addr_remote[ADDR_LEN + 7] = "";
   24758:	2100      	movs	r1, #0
   2475a:	9106      	str	r1, [sp, #24]
   2475c:	222b      	movs	r2, #43	; 0x2b
   2475e:	a807      	add	r0, sp, #28
   24760:	f005 fd0e 	bl	2a180 <memset>
	get_addresses(context, addr_local, sizeof(addr_local),
   24764:	222f      	movs	r2, #47	; 0x2f
   24766:	9200      	str	r2, [sp, #0]
   24768:	ab06      	add	r3, sp, #24
   2476a:	a912      	add	r1, sp, #72	; 0x48
   2476c:	4620      	mov	r0, r4
   2476e:	f7ff ff69 	bl	24644 <get_addresses>
	       (*count) + 1, context,
   24772:	682e      	ldr	r6, [r5, #0]
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   24774:	3601      	adds	r6, #1
	return net_if_get_by_index(context->iface);
   24776:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
   2477a:	f7f7 fd0b 	bl	1c194 <net_if_get_by_index>
   2477e:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   24780:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   24784:	f012 0f10 	tst.w	r2, #16
   24788:	d022      	beq.n	247d0 <context_cb+0x80>
		return AF_INET6;
   2478a:	210a      	movs	r1, #10
   2478c:	290a      	cmp	r1, #10
   2478e:	d021      	beq.n	247d4 <context_cb+0x84>
   24790:	2134      	movs	r1, #52	; 0x34
	if (context->flags & NET_CONTEXT_TYPE) {
   24792:	f012 0f20 	tst.w	r2, #32
   24796:	d01f      	beq.n	247d8 <context_cb+0x88>
		return SOCK_STREAM;
   24798:	2001      	movs	r0, #1
   2479a:	2802      	cmp	r0, #2
   2479c:	d01e      	beq.n	247dc <context_cb+0x8c>
   2479e:	2053      	movs	r0, #83	; 0x53
	if (context->flags & NET_CONTEXT_PROTO) {
   247a0:	f012 0f40 	tst.w	r2, #64	; 0x40
   247a4:	d01c      	beq.n	247e0 <context_cb+0x90>
		return IPPROTO_TCP;
   247a6:	2206      	movs	r2, #6
   247a8:	2a11      	cmp	r2, #17
   247aa:	d01b      	beq.n	247e4 <context_cb+0x94>
   247ac:	2754      	movs	r7, #84	; 0x54
   247ae:	aa06      	add	r2, sp, #24
   247b0:	9204      	str	r2, [sp, #16]
   247b2:	aa12      	add	r2, sp, #72	; 0x48
   247b4:	9203      	str	r2, [sp, #12]
   247b6:	9702      	str	r7, [sp, #8]
   247b8:	9001      	str	r0, [sp, #4]
   247ba:	9100      	str	r1, [sp, #0]
   247bc:	4622      	mov	r2, r4
   247be:	4631      	mov	r1, r6
   247c0:	4809      	ldr	r0, [pc, #36]	; (247e8 <context_cb+0x98>)
   247c2:	f7de fb97 	bl	2ef4 <printk>
	(*count)++;
   247c6:	682b      	ldr	r3, [r5, #0]
   247c8:	3301      	adds	r3, #1
   247ca:	602b      	str	r3, [r5, #0]
}
   247cc:	b01f      	add	sp, #124	; 0x7c
   247ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   247d0:	2102      	movs	r1, #2
   247d2:	e7db      	b.n	2478c <context_cb+0x3c>
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   247d4:	2136      	movs	r1, #54	; 0x36
   247d6:	e7dc      	b.n	24792 <context_cb+0x42>
	return SOCK_DGRAM;
   247d8:	2002      	movs	r0, #2
   247da:	e7de      	b.n	2479a <context_cb+0x4a>
   247dc:	2044      	movs	r0, #68	; 0x44
   247de:	e7df      	b.n	247a0 <context_cb+0x50>
	return IPPROTO_UDP;
   247e0:	2211      	movs	r2, #17
   247e2:	e7e1      	b.n	247a8 <context_cb+0x58>
   247e4:	2755      	movs	r7, #85	; 0x55
   247e6:	e7e2      	b.n	247ae <context_cb+0x5e>
   247e8:	00031530 	.word	0x00031530

000247ec <net_shell_cmd_iface>:
{
   247ec:	b508      	push	{r3, lr}
	net_if_foreach(iface_cb, NULL);
   247ee:	2100      	movs	r1, #0
   247f0:	4802      	ldr	r0, [pc, #8]	; (247fc <net_shell_cmd_iface+0x10>)
   247f2:	f7f7 fceb 	bl	1c1cc <net_if_foreach>
}
   247f6:	2000      	movs	r0, #0
   247f8:	bd08      	pop	{r3, pc}
   247fa:	bf00      	nop
   247fc:	0001f39d 	.word	0x0001f39d

00024800 <net_shell_cmd_route>:
{
   24800:	b508      	push	{r3, lr}
	net_if_foreach(iface_per_route_cb, NULL);
   24802:	2100      	movs	r1, #0
   24804:	4802      	ldr	r0, [pc, #8]	; (24810 <net_shell_cmd_route+0x10>)
   24806:	f7f7 fce1 	bl	1c1cc <net_if_foreach>
}
   2480a:	2000      	movs	r0, #0
   2480c:	bd08      	pop	{r3, pc}
   2480e:	bf00      	nop
   24810:	00024c3d 	.word	0x00024c3d

00024814 <net_shell_cmd_mem>:
{
   24814:	b500      	push	{lr}
   24816:	b093      	sub	sp, #76	; 0x4c
	net_pkt_get_info(&rx, &tx, &rx_data, &tx_data);
   24818:	ab0e      	add	r3, sp, #56	; 0x38
   2481a:	aa0f      	add	r2, sp, #60	; 0x3c
   2481c:	a910      	add	r1, sp, #64	; 0x40
   2481e:	a811      	add	r0, sp, #68	; 0x44
   24820:	f7f9 f9aa 	bl	1db78 <net_pkt_get_info>
	printk("Fragment length %d bytes\n", CONFIG_NET_BUF_DATA_SIZE);
   24824:	f44f 7100 	mov.w	r1, #512	; 0x200
   24828:	4819      	ldr	r0, [pc, #100]	; (24890 <net_shell_cmd_mem+0x7c>)
   2482a:	f7de fb63 	bl	2ef4 <printk>
	printk("Network buffer pools:\n");
   2482e:	4819      	ldr	r0, [pc, #100]	; (24894 <net_shell_cmd_mem+0x80>)
   24830:	f7de fb60 	bl	2ef4 <printk>
	printk("(CONFIG_NET_BUF_POOL_USAGE to see free #s)\n");
   24834:	4818      	ldr	r0, [pc, #96]	; (24898 <net_shell_cmd_mem+0x84>)
   24836:	f7de fb5d 	bl	2ef4 <printk>
	printk("Address\t\tTotal\tName\n");
   2483a:	4818      	ldr	r0, [pc, #96]	; (2489c <net_shell_cmd_mem+0x88>)
   2483c:	f7de fb5a 	bl	2ef4 <printk>
	printk("%p\t%d\tRX\n", rx, rx->num_blocks);
   24840:	9911      	ldr	r1, [sp, #68]	; 0x44
   24842:	688a      	ldr	r2, [r1, #8]
   24844:	4816      	ldr	r0, [pc, #88]	; (248a0 <net_shell_cmd_mem+0x8c>)
   24846:	f7de fb55 	bl	2ef4 <printk>
	printk("%p\t%d\tTX\n", tx, tx->num_blocks);
   2484a:	9910      	ldr	r1, [sp, #64]	; 0x40
   2484c:	688a      	ldr	r2, [r1, #8]
   2484e:	4815      	ldr	r0, [pc, #84]	; (248a4 <net_shell_cmd_mem+0x90>)
   24850:	f7de fb50 	bl	2ef4 <printk>
	printk("%p\t%d\tRX DATA\n", rx_data, rx_data->buf_count);
   24854:	990f      	ldr	r1, [sp, #60]	; 0x3c
   24856:	8a0a      	ldrh	r2, [r1, #16]
   24858:	4813      	ldr	r0, [pc, #76]	; (248a8 <net_shell_cmd_mem+0x94>)
   2485a:	f7de fb4b 	bl	2ef4 <printk>
	printk("%p\t%d\tTX DATA\n", tx_data, tx_data->buf_count);
   2485e:	990e      	ldr	r1, [sp, #56]	; 0x38
   24860:	8a0a      	ldrh	r2, [r1, #16]
   24862:	4812      	ldr	r0, [pc, #72]	; (248ac <net_shell_cmd_mem+0x98>)
   24864:	f7de fb46 	bl	2ef4 <printk>
		memset(&info, 0, sizeof(info));
   24868:	2238      	movs	r2, #56	; 0x38
   2486a:	2100      	movs	r1, #0
   2486c:	4668      	mov	r0, sp
   2486e:	f005 fc87 	bl	2a180 <memset>
		net_context_foreach(context_info, &info);
   24872:	4669      	mov	r1, sp
   24874:	480e      	ldr	r0, [pc, #56]	; (248b0 <net_shell_cmd_mem+0x9c>)
   24876:	f7f8 fd8d 	bl	1d394 <net_context_foreach>
		if (!info.are_external_pools) {
   2487a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2487e:	b11b      	cbz	r3, 24888 <net_shell_cmd_mem+0x74>
}
   24880:	2000      	movs	r0, #0
   24882:	b013      	add	sp, #76	; 0x4c
   24884:	f85d fb04 	ldr.w	pc, [sp], #4
			printk("No external memory pools found.\n");
   24888:	480a      	ldr	r0, [pc, #40]	; (248b4 <net_shell_cmd_mem+0xa0>)
   2488a:	f7de fb33 	bl	2ef4 <printk>
   2488e:	e7f7      	b.n	24880 <net_shell_cmd_mem+0x6c>
   24890:	00031ad4 	.word	0x00031ad4
   24894:	00031af0 	.word	0x00031af0
   24898:	00031b08 	.word	0x00031b08
   2489c:	00031b34 	.word	0x00031b34
   248a0:	00031b4c 	.word	0x00031b4c
   248a4:	00031b58 	.word	0x00031b58
   248a8:	00031b64 	.word	0x00031b64
   248ac:	00031b74 	.word	0x00031b74
   248b0:	00024281 	.word	0x00024281
   248b4:	00031b84 	.word	0x00031b84

000248b8 <net_shell_cmd_nbr>:
{
   248b8:	b510      	push	{r4, lr}
   248ba:	b086      	sub	sp, #24
	int count = 0;
   248bc:	2300      	movs	r3, #0
   248be:	9305      	str	r3, [sp, #20]
	if (argv[arg]) {
   248c0:	6848      	ldr	r0, [r1, #4]
   248c2:	b1d8      	cbz	r0, 248fc <net_shell_cmd_nbr+0x44>
   248c4:	460c      	mov	r4, r1
		if (strcmp(argv[arg], "rm")) {
   248c6:	4920      	ldr	r1, [pc, #128]	; (24948 <net_shell_cmd_nbr+0x90>)
   248c8:	f7db fd9e 	bl	408 <strcmp>
   248cc:	b9f8      	cbnz	r0, 2490e <net_shell_cmd_nbr+0x56>
		if (!argv[++arg]) {
   248ce:	68a1      	ldr	r1, [r4, #8]
   248d0:	b311      	cbz	r1, 24918 <net_shell_cmd_nbr+0x60>
		ret = net_addr_pton(AF_INET6, argv[arg], &addr);
   248d2:	aa01      	add	r2, sp, #4
   248d4:	200a      	movs	r0, #10
   248d6:	f7f9 fbc4 	bl	1e062 <net_addr_pton>
		if (ret < 0) {
   248da:	2800      	cmp	r0, #0
   248dc:	db20      	blt.n	24920 <net_shell_cmd_nbr+0x68>
		if (!net_ipv6_nbr_rm(NULL, &addr)) {
   248de:	a901      	add	r1, sp, #4
   248e0:	2000      	movs	r0, #0
   248e2:	f7fb f83f 	bl	1f964 <net_ipv6_nbr_rm>
   248e6:	bb00      	cbnz	r0, 2492a <net_shell_cmd_nbr+0x72>
   248e8:	2328      	movs	r3, #40	; 0x28
   248ea:	4a18      	ldr	r2, [pc, #96]	; (2494c <net_shell_cmd_nbr+0x94>)
   248ec:	a901      	add	r1, sp, #4
   248ee:	200a      	movs	r0, #10
   248f0:	f7f9 fae0 	bl	1deb4 <net_addr_ntop>
			printk("Cannot remove neighbor %s\n",
   248f4:	4601      	mov	r1, r0
   248f6:	4816      	ldr	r0, [pc, #88]	; (24950 <net_shell_cmd_nbr+0x98>)
   248f8:	f7de fafc 	bl	2ef4 <printk>
	net_ipv6_nbr_foreach(nbr_cb, &count);
   248fc:	a905      	add	r1, sp, #20
   248fe:	4815      	ldr	r0, [pc, #84]	; (24954 <net_shell_cmd_nbr+0x9c>)
   24900:	f7fb f822 	bl	1f948 <net_ipv6_nbr_foreach>
	if (count == 0) {
   24904:	9b05      	ldr	r3, [sp, #20]
   24906:	b1db      	cbz	r3, 24940 <net_shell_cmd_nbr+0x88>
}
   24908:	2000      	movs	r0, #0
   2490a:	b006      	add	sp, #24
   2490c:	bd10      	pop	{r4, pc}
			printk("Unknown command '%s'\n", argv[arg]);
   2490e:	6861      	ldr	r1, [r4, #4]
   24910:	4811      	ldr	r0, [pc, #68]	; (24958 <net_shell_cmd_nbr+0xa0>)
   24912:	f7de faef 	bl	2ef4 <printk>
			return 0;
   24916:	e7f7      	b.n	24908 <net_shell_cmd_nbr+0x50>
			printk("Neighbor IPv6 address missing.\n");
   24918:	4810      	ldr	r0, [pc, #64]	; (2495c <net_shell_cmd_nbr+0xa4>)
   2491a:	f7de faeb 	bl	2ef4 <printk>
			return 0;
   2491e:	e7f3      	b.n	24908 <net_shell_cmd_nbr+0x50>
			printk("Cannot parse '%s'\n", argv[arg]);
   24920:	68a1      	ldr	r1, [r4, #8]
   24922:	480f      	ldr	r0, [pc, #60]	; (24960 <net_shell_cmd_nbr+0xa8>)
   24924:	f7de fae6 	bl	2ef4 <printk>
			return 0;
   24928:	e7ee      	b.n	24908 <net_shell_cmd_nbr+0x50>
   2492a:	2328      	movs	r3, #40	; 0x28
   2492c:	4a07      	ldr	r2, [pc, #28]	; (2494c <net_shell_cmd_nbr+0x94>)
   2492e:	a901      	add	r1, sp, #4
   24930:	200a      	movs	r0, #10
   24932:	f7f9 fabf 	bl	1deb4 <net_addr_ntop>
			printk("Neighbor %s removed.\n",
   24936:	4601      	mov	r1, r0
   24938:	480a      	ldr	r0, [pc, #40]	; (24964 <net_shell_cmd_nbr+0xac>)
   2493a:	f7de fadb 	bl	2ef4 <printk>
   2493e:	e7dd      	b.n	248fc <net_shell_cmd_nbr+0x44>
		printk("No neighbors.\n");
   24940:	4809      	ldr	r0, [pc, #36]	; (24968 <net_shell_cmd_nbr+0xb0>)
   24942:	f7de fad7 	bl	2ef4 <printk>
   24946:	e7df      	b.n	24908 <net_shell_cmd_nbr+0x50>
   24948:	00031ba8 	.word	0x00031ba8
   2494c:	20002528 	.word	0x20002528
   24950:	00031bf8 	.word	0x00031bf8
   24954:	00024a11 	.word	0x00024a11
   24958:	00031bac 	.word	0x00031bac
   2495c:	00031bc4 	.word	0x00031bc4
   24960:	00031be4 	.word	0x00031be4
   24964:	00031c14 	.word	0x00031c14
   24968:	00031c2c 	.word	0x00031c2c

0002496c <route_cb>:
{
   2496c:	b538      	push	{r3, r4, r5, lr}
	if (entry->iface != iface) {
   2496e:	68c3      	ldr	r3, [r0, #12]
   24970:	428b      	cmp	r3, r1
   24972:	d000      	beq.n	24976 <route_cb+0xa>
   24974:	bd38      	pop	{r3, r4, r5, pc}
   24976:	4604      	mov	r4, r0
   24978:	2328      	movs	r3, #40	; 0x28
   2497a:	4a1e      	ldr	r2, [pc, #120]	; (249f4 <route_cb+0x88>)
   2497c:	f100 0110 	add.w	r1, r0, #16
   24980:	200a      	movs	r0, #10
   24982:	f7f9 fa97 	bl	1deb4 <net_addr_ntop>
	printk("IPv6 prefix : %s/%d\n",
   24986:	f894 2020 	ldrb.w	r2, [r4, #32]
   2498a:	4601      	mov	r1, r0
   2498c:	481a      	ldr	r0, [pc, #104]	; (249f8 <route_cb+0x8c>)
   2498e:	f7de fab1 	bl	2ef4 <printk>
	return list->head;
   24992:	6864      	ldr	r4, [r4, #4]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24994:	2500      	movs	r5, #0
   24996:	e009      	b.n	249ac <route_cb+0x40>
			printk("addr : <unknown>\n");
   24998:	4818      	ldr	r0, [pc, #96]	; (249fc <route_cb+0x90>)
   2499a:	f7de faab 	bl	2ef4 <printk>
		count++;
   2499e:	3501      	adds	r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   249a0:	4622      	mov	r2, r4
   249a2:	b1dc      	cbz	r4, 249dc <route_cb+0x70>
	return node->next;
   249a4:	6823      	ldr	r3, [r4, #0]
   249a6:	b1db      	cbz	r3, 249e0 <route_cb+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   249a8:	b1e2      	cbz	r2, 249e4 <route_cb+0x78>
	return node->next;
   249aa:	6824      	ldr	r4, [r4, #0]
   249ac:	b1e4      	cbz	r4, 249e8 <route_cb+0x7c>
		if (!nexthop_route->nbr) {
   249ae:	6861      	ldr	r1, [r4, #4]
   249b0:	2900      	cmp	r1, #0
   249b2:	d0f5      	beq.n	249a0 <route_cb+0x34>
		printk("\tneighbor : %p\t", nexthop_route->nbr);
   249b4:	4812      	ldr	r0, [pc, #72]	; (24a00 <route_cb+0x94>)
   249b6:	f7de fa9d 	bl	2ef4 <printk>
		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   249ba:	6863      	ldr	r3, [r4, #4]
   249bc:	7858      	ldrb	r0, [r3, #1]
   249be:	28ff      	cmp	r0, #255	; 0xff
   249c0:	d0ea      	beq.n	24998 <route_cb+0x2c>
			lladdr = net_nbr_get_lladdr(nexthop_route->nbr->idx);
   249c2:	f7fa fcc1 	bl	1f348 <net_nbr_get_lladdr>
	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   249c6:	2318      	movs	r3, #24
   249c8:	4a0e      	ldr	r2, [pc, #56]	; (24a04 <route_cb+0x98>)
   249ca:	7841      	ldrb	r1, [r0, #1]
   249cc:	3002      	adds	r0, #2
   249ce:	f7f9 fa47 	bl	1de60 <net_sprint_ll_addr_buf>
			printk("addr : %s\n",
   249d2:	4601      	mov	r1, r0
   249d4:	480c      	ldr	r0, [pc, #48]	; (24a08 <route_cb+0x9c>)
   249d6:	f7de fa8d 	bl	2ef4 <printk>
   249da:	e7e0      	b.n	2499e <route_cb+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   249dc:	4623      	mov	r3, r4
   249de:	e7e2      	b.n	249a6 <route_cb+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   249e0:	2400      	movs	r4, #0
   249e2:	e7e3      	b.n	249ac <route_cb+0x40>
   249e4:	2400      	movs	r4, #0
   249e6:	e7e1      	b.n	249ac <route_cb+0x40>
	if (count == 0) {
   249e8:	2d00      	cmp	r5, #0
   249ea:	d1c3      	bne.n	24974 <route_cb+0x8>
		printk("\t<none>\n");
   249ec:	4807      	ldr	r0, [pc, #28]	; (24a0c <route_cb+0xa0>)
   249ee:	f7de fa81 	bl	2ef4 <printk>
   249f2:	e7bf      	b.n	24974 <route_cb+0x8>
   249f4:	20002528 	.word	0x20002528
   249f8:	00032174 	.word	0x00032174
   249fc:	0003219c 	.word	0x0003219c
   24a00:	0003218c 	.word	0x0003218c
   24a04:	20002510 	.word	0x20002510
   24a08:	000321b0 	.word	0x000321b0
   24a0c:	000316b0 	.word	0x000316b0

00024a10 <nbr_cb>:
{
   24a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a14:	b08f      	sub	sp, #60	; 0x3c
   24a16:	4604      	mov	r4, r0
   24a18:	460d      	mov	r5, r1
	if (*count == 0) {
   24a1a:	680b      	ldr	r3, [r1, #0]
   24a1c:	2b00      	cmp	r3, #0
   24a1e:	d052      	beq.n	24ac6 <nbr_cb+0xb6>
	(*count)++;
   24a20:	682b      	ldr	r3, [r5, #0]
   24a22:	3301      	adds	r3, #1
   24a24:	602b      	str	r3, [r5, #0]
   24a26:	68e3      	ldr	r3, [r4, #12]
	state_str = net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state);
   24a28:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
   24a2c:	f7fa ff68 	bl	1f900 <net_ipv6_nbr_state2str>
   24a30:	900b      	str	r0, [sp, #44]	; 0x2c
	if (strlen(state_str) == 5) {
   24a32:	f7db fe65 	bl	700 <strlen>
   24a36:	2805      	cmp	r0, #5
   24a38:	d04a      	beq.n	24ad0 <nbr_cb+0xc0>
	char *state_pad = "";
   24a3a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 24ae4 <nbr_cb+0xd4>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24a3e:	682b      	ldr	r3, [r5, #0]
   24a40:	930c      	str	r3, [sp, #48]	; 0x30
   24a42:	68a3      	ldr	r3, [r4, #8]
   24a44:	930d      	str	r3, [sp, #52]	; 0x34
   24a46:	68e0      	ldr	r0, [r4, #12]
	       net_ipv6_nbr_data(nbr)->link_metric,
   24a48:	f8b0 5066 	ldrh.w	r5, [r0, #102]	; 0x66
	       nbr->ref,
   24a4c:	7826      	ldrb	r6, [r4, #0]
	       net_ipv6_nbr_data(nbr)->ns_count,
   24a4e:	f890 7068 	ldrb.w	r7, [r0, #104]	; 0x68
	       net_ipv6_nbr_data(nbr)->is_router,
   24a52:	f890 8069 	ldrb.w	r8, [r0, #105]	; 0x69
	return _timeout_remaining_get(&work->timeout);
   24a56:	3020      	adds	r0, #32
   24a58:	f005 f90a 	bl	29c70 <_timeout_remaining_get>
   24a5c:	4682      	mov	sl, r0
	       nbr->idx == NET_NBR_LLADDR_UNKNOWN ? "?" :
   24a5e:	7860      	ldrb	r0, [r4, #1]
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24a60:	28ff      	cmp	r0, #255	; 0xff
   24a62:	d038      	beq.n	24ad6 <nbr_cb+0xc6>
		       net_nbr_get_lladdr(nbr->idx)->addr,
   24a64:	f7fa fc70 	bl	1f348 <net_nbr_get_lladdr>
   24a68:	f100 0b02 	add.w	fp, r0, #2
		       net_nbr_get_lladdr(nbr->idx)->len),
   24a6c:	7860      	ldrb	r0, [r4, #1]
   24a6e:	f7fa fc6b 	bl	1f348 <net_nbr_get_lladdr>
   24a72:	2318      	movs	r3, #24
   24a74:	4a19      	ldr	r2, [pc, #100]	; (24adc <nbr_cb+0xcc>)
   24a76:	7841      	ldrb	r1, [r0, #1]
   24a78:	4658      	mov	r0, fp
   24a7a:	f7f9 f9f1 	bl	1de60 <net_sprint_ll_addr_buf>
   24a7e:	4683      	mov	fp, r0
	       net_nbr_get_lladdr(nbr->idx)->len == 8 ? "" : padding,
   24a80:	7860      	ldrb	r0, [r4, #1]
   24a82:	f7fa fc61 	bl	1f348 <net_nbr_get_lladdr>
   24a86:	68e1      	ldr	r1, [r4, #12]
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   24a88:	2328      	movs	r3, #40	; 0x28
   24a8a:	4a15      	ldr	r2, [pc, #84]	; (24ae0 <nbr_cb+0xd0>)
   24a8c:	3104      	adds	r1, #4
   24a8e:	200a      	movs	r0, #10
   24a90:	f7f9 fa10 	bl	1deb4 <net_addr_ntop>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24a94:	9009      	str	r0, [sp, #36]	; 0x24
   24a96:	4b13      	ldr	r3, [pc, #76]	; (24ae4 <nbr_cb+0xd4>)
   24a98:	9308      	str	r3, [sp, #32]
   24a9a:	f8cd b01c 	str.w	fp, [sp, #28]
   24a9e:	f8cd a018 	str.w	sl, [sp, #24]
   24aa2:	f8cd 9014 	str.w	r9, [sp, #20]
   24aa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24aa8:	9304      	str	r3, [sp, #16]
   24aaa:	f8cd 800c 	str.w	r8, [sp, #12]
   24aae:	9702      	str	r7, [sp, #8]
   24ab0:	9601      	str	r6, [sp, #4]
   24ab2:	9500      	str	r5, [sp, #0]
   24ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24ab6:	4622      	mov	r2, r4
   24ab8:	990c      	ldr	r1, [sp, #48]	; 0x30
   24aba:	480b      	ldr	r0, [pc, #44]	; (24ae8 <nbr_cb+0xd8>)
   24abc:	f7de fa1a 	bl	2ef4 <printk>
}
   24ac0:	b00f      	add	sp, #60	; 0x3c
   24ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printk("     Neighbor   Interface        Flags State     "
   24ac6:	4907      	ldr	r1, [pc, #28]	; (24ae4 <nbr_cb+0xd4>)
   24ac8:	4808      	ldr	r0, [pc, #32]	; (24aec <nbr_cb+0xdc>)
   24aca:	f7de fa13 	bl	2ef4 <printk>
   24ace:	e7a7      	b.n	24a20 <nbr_cb+0x10>
		state_pad = "    ";
   24ad0:	f8df 901c 	ldr.w	r9, [pc, #28]	; 24af0 <nbr_cb+0xe0>
   24ad4:	e7b3      	b.n	24a3e <nbr_cb+0x2e>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24ad6:	f8df b01c 	ldr.w	fp, [pc, #28]	; 24af4 <nbr_cb+0xe4>
   24ada:	e7d1      	b.n	24a80 <nbr_cb+0x70>
   24adc:	20002510 	.word	0x20002510
   24ae0:	20002528 	.word	0x20002528
   24ae4:	0002ea98 	.word	0x0002ea98
   24ae8:	00031864 	.word	0x00031864
   24aec:	0003180c 	.word	0x0003180c
   24af0:	00031800 	.word	0x00031800
   24af4:	00031808 	.word	0x00031808

00024af8 <_ping_ipv6>:
{
   24af8:	b570      	push	{r4, r5, r6, lr}
   24afa:	b084      	sub	sp, #16
   24afc:	4605      	mov	r5, r0
	struct net_if *iface = net_if_get_default();
   24afe:	f7f6 fbb1 	bl	1b264 <net_if_get_default>
   24b02:	4604      	mov	r4, r0
	if (net_addr_pton(AF_INET6, host, &ipv6_target) < 0) {
   24b04:	466a      	mov	r2, sp
   24b06:	4629      	mov	r1, r5
   24b08:	200a      	movs	r0, #10
   24b0a:	f7f9 faaa 	bl	1e062 <net_addr_pton>
   24b0e:	2800      	cmp	r0, #0
   24b10:	db26      	blt.n	24b60 <_ping_ipv6+0x68>
	net_icmpv6_register_handler(&ping6_handler);
   24b12:	4815      	ldr	r0, [pc, #84]	; (24b68 <_ping_ipv6+0x70>)
   24b14:	f7f9 fe0c 	bl	1e730 <net_icmpv6_register_handler>
	nbr = net_ipv6_nbr_lookup(NULL, &ipv6_target);
   24b18:	4669      	mov	r1, sp
   24b1a:	2000      	movs	r0, #0
   24b1c:	f7fb fa4c 	bl	1ffb8 <net_ipv6_nbr_lookup>
	if (nbr) {
   24b20:	b100      	cbz	r0, 24b24 <_ping_ipv6+0x2c>
		iface = nbr->iface;
   24b22:	6884      	ldr	r4, [r0, #8]
	route = net_route_lookup(NULL, &ipv6_target);
   24b24:	4669      	mov	r1, sp
   24b26:	2000      	movs	r0, #0
   24b28:	f7fd ffc4 	bl	22ab4 <net_route_lookup>
	if (route) {
   24b2c:	b100      	cbz	r0, 24b30 <_ping_ipv6+0x38>
		iface = route->iface;
   24b2e:	68c4      	ldr	r4, [r0, #12]
					   sys_rand32_get(),
   24b30:	f7dd fa46 	bl	1fc0 <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   24b34:	b286      	uxth	r6, r0
					   sys_rand32_get());
   24b36:	f7dd fa43 	bl	1fc0 <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   24b3a:	b283      	uxth	r3, r0
   24b3c:	4632      	mov	r2, r6
   24b3e:	4669      	mov	r1, sp
   24b40:	4620      	mov	r0, r4
   24b42:	f7fa fa8f 	bl	1f064 <net_icmpv6_send_echo_request>
	if (ret) {
   24b46:	4604      	mov	r4, r0
   24b48:	b930      	cbnz	r0, 24b58 <_ping_ipv6+0x60>
		printk("Sent a ping to %s\n", host);
   24b4a:	4629      	mov	r1, r5
   24b4c:	4807      	ldr	r0, [pc, #28]	; (24b6c <_ping_ipv6+0x74>)
   24b4e:	f7de f9d1 	bl	2ef4 <printk>
}
   24b52:	4620      	mov	r0, r4
   24b54:	b004      	add	sp, #16
   24b56:	bd70      	pop	{r4, r5, r6, pc}
	net_icmpv6_unregister_handler(&ping6_handler);
   24b58:	4803      	ldr	r0, [pc, #12]	; (24b68 <_ping_ipv6+0x70>)
   24b5a:	f7f9 fdf5 	bl	1e748 <net_icmpv6_unregister_handler>
   24b5e:	e7f8      	b.n	24b52 <_ping_ipv6+0x5a>
		return -EINVAL;
   24b60:	f06f 0415 	mvn.w	r4, #21
   24b64:	e7f5      	b.n	24b52 <_ping_ipv6+0x5a>
   24b66:	bf00      	nop
   24b68:	2000c5f4 	.word	0x2000c5f4
   24b6c:	0003151c 	.word	0x0003151c

00024b70 <net_shell_cmd_ping>:
{
   24b70:	b510      	push	{r4, lr}
   24b72:	460c      	mov	r4, r1
	if (!strcmp(argv[0], "ping")) {
   24b74:	4912      	ldr	r1, [pc, #72]	; (24bc0 <net_shell_cmd_ping+0x50>)
   24b76:	6820      	ldr	r0, [r4, #0]
   24b78:	f7db fc46 	bl	408 <strcmp>
   24b7c:	b958      	cbnz	r0, 24b96 <net_shell_cmd_ping+0x26>
		host = argv[1];
   24b7e:	6860      	ldr	r0, [r4, #4]
	ret = _ping_ipv6(host);
   24b80:	f7ff ffba 	bl	24af8 <_ping_ipv6>
	if (!ret) {
   24b84:	b168      	cbz	r0, 24ba2 <net_shell_cmd_ping+0x32>
	} else if (ret == -EIO) {
   24b86:	f110 0f05 	cmn.w	r0, #5
   24b8a:	d006      	beq.n	24b9a <net_shell_cmd_ping+0x2a>
			printk("Invalid IP address\n");
   24b8c:	480d      	ldr	r0, [pc, #52]	; (24bc4 <net_shell_cmd_ping+0x54>)
   24b8e:	f7de f9b1 	bl	2ef4 <printk>
}
   24b92:	2000      	movs	r0, #0
   24b94:	bd10      	pop	{r4, pc}
		host = argv[2];
   24b96:	68a0      	ldr	r0, [r4, #8]
   24b98:	e7f2      	b.n	24b80 <net_shell_cmd_ping+0x10>
		printk("Cannot send IPv6 ping\n");
   24b9a:	480b      	ldr	r0, [pc, #44]	; (24bc8 <net_shell_cmd_ping+0x58>)
   24b9c:	f7de f9aa 	bl	2ef4 <printk>
		return 0;
   24ba0:	e7f7      	b.n	24b92 <net_shell_cmd_ping+0x22>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   24ba2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   24ba6:	4809      	ldr	r0, [pc, #36]	; (24bcc <net_shell_cmd_ping+0x5c>)
   24ba8:	f004 fb2a 	bl	29200 <_impl_k_sem_take>
	if (ret == -EAGAIN) {
   24bac:	f110 0f0b 	cmn.w	r0, #11
   24bb0:	d1ef      	bne.n	24b92 <net_shell_cmd_ping+0x22>
		printk("Ping timeout\n");
   24bb2:	4807      	ldr	r0, [pc, #28]	; (24bd0 <net_shell_cmd_ping+0x60>)
   24bb4:	f7de f99e 	bl	2ef4 <printk>
	net_icmpv6_unregister_handler(&ping6_handler);
   24bb8:	4806      	ldr	r0, [pc, #24]	; (24bd4 <net_shell_cmd_ping+0x64>)
   24bba:	f7f9 fdc5 	bl	1e748 <net_icmpv6_unregister_handler>
   24bbe:	e7e8      	b.n	24b92 <net_shell_cmd_ping+0x22>
   24bc0:	00031c3c 	.word	0x00031c3c
   24bc4:	00031c5c 	.word	0x00031c5c
   24bc8:	00031c44 	.word	0x00031c44
   24bcc:	2000d144 	.word	0x2000d144
   24bd0:	00031c70 	.word	0x00031c70
   24bd4:	2000c5f4 	.word	0x2000c5f4

00024bd8 <_handle_ipv6_echo_reply>:
{
   24bd8:	b530      	push	{r4, r5, lr}
   24bda:	b08b      	sub	sp, #44	; 0x2c
   24bdc:	4605      	mov	r5, r0
	return pkt->frags->data;
   24bde:	6883      	ldr	r3, [r0, #8]
   24be0:	6899      	ldr	r1, [r3, #8]
   24be2:	4c11      	ldr	r4, [pc, #68]	; (24c28 <_handle_ipv6_echo_reply+0x50>)
   24be4:	2328      	movs	r3, #40	; 0x28
   24be6:	4622      	mov	r2, r4
   24be8:	3118      	adds	r1, #24
   24bea:	200a      	movs	r0, #10
   24bec:	f7f9 f962 	bl	1deb4 <net_addr_ntop>
	snprintk(addr, sizeof(addr), "%s",
   24bf0:	4603      	mov	r3, r0
   24bf2:	4a0e      	ldr	r2, [pc, #56]	; (24c2c <_handle_ipv6_echo_reply+0x54>)
   24bf4:	2128      	movs	r1, #40	; 0x28
   24bf6:	4668      	mov	r0, sp
   24bf8:	f7de f98a 	bl	2f10 <snprintk>
   24bfc:	68ab      	ldr	r3, [r5, #8]
   24bfe:	6899      	ldr	r1, [r3, #8]
   24c00:	2328      	movs	r3, #40	; 0x28
   24c02:	4622      	mov	r2, r4
   24c04:	3108      	adds	r1, #8
   24c06:	200a      	movs	r0, #10
   24c08:	f7f9 f954 	bl	1deb4 <net_addr_ntop>
	printk("Received echo reply from %s to %s\n",
   24c0c:	466a      	mov	r2, sp
   24c0e:	4601      	mov	r1, r0
   24c10:	4807      	ldr	r0, [pc, #28]	; (24c30 <_handle_ipv6_echo_reply+0x58>)
   24c12:	f7de f96f 	bl	2ef4 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   24c16:	4807      	ldr	r0, [pc, #28]	; (24c34 <_handle_ipv6_echo_reply+0x5c>)
   24c18:	f004 fadf 	bl	291da <_impl_k_sem_give>
	net_icmpv6_unregister_handler(&ping6_handler);
   24c1c:	4806      	ldr	r0, [pc, #24]	; (24c38 <_handle_ipv6_echo_reply+0x60>)
   24c1e:	f7f9 fd93 	bl	1e748 <net_icmpv6_unregister_handler>
}
   24c22:	2000      	movs	r0, #0
   24c24:	b00b      	add	sp, #44	; 0x2c
   24c26:	bd30      	pop	{r4, r5, pc}
   24c28:	20002528 	.word	0x20002528
   24c2c:	0002e5cc 	.word	0x0002e5cc
   24c30:	000314f8 	.word	0x000314f8
   24c34:	2000d144 	.word	0x2000d144
   24c38:	2000c5f4 	.word	0x2000c5f4

00024c3c <iface_per_route_cb>:
{
   24c3c:	b510      	push	{r4, lr}
   24c3e:	b082      	sub	sp, #8
   24c40:	4604      	mov	r4, r0
	printk("\nIPv6 routes for interface %p (%s)\n", iface,
   24c42:	a901      	add	r1, sp, #4
   24c44:	f7ff faba 	bl	241bc <iface2str>
   24c48:	4602      	mov	r2, r0
   24c4a:	4621      	mov	r1, r4
   24c4c:	4806      	ldr	r0, [pc, #24]	; (24c68 <iface_per_route_cb+0x2c>)
   24c4e:	f7de f951 	bl	2ef4 <printk>
	printk("=======================================%s\n", extra);
   24c52:	9901      	ldr	r1, [sp, #4]
   24c54:	4805      	ldr	r0, [pc, #20]	; (24c6c <iface_per_route_cb+0x30>)
   24c56:	f7de f94d 	bl	2ef4 <printk>
	net_route_foreach(route_cb, iface);
   24c5a:	4621      	mov	r1, r4
   24c5c:	4804      	ldr	r0, [pc, #16]	; (24c70 <iface_per_route_cb+0x34>)
   24c5e:	f7fe f829 	bl	22cb4 <net_route_foreach>
}
   24c62:	b002      	add	sp, #8
   24c64:	bd10      	pop	{r4, pc}
   24c66:	bf00      	nop
   24c68:	000317b0 	.word	0x000317b0
   24c6c:	000317d4 	.word	0x000317d4
   24c70:	0002496d 	.word	0x0002496d

00024c74 <tcp_connected>:
{
   24c74:	b510      	push	{r4, lr}
	if (status < 0) {
   24c76:	2900      	cmp	r1, #0
   24c78:	db03      	blt.n	24c82 <tcp_connected+0xe>
		printk("TCP connected\n");
   24c7a:	4807      	ldr	r0, [pc, #28]	; (24c98 <tcp_connected+0x24>)
   24c7c:	f7de f93a 	bl	2ef4 <printk>
   24c80:	bd10      	pop	{r4, pc}
   24c82:	4604      	mov	r4, r0
		printk("TCP connection failed (%d)\n", status);
   24c84:	4805      	ldr	r0, [pc, #20]	; (24c9c <tcp_connected+0x28>)
   24c86:	f7de f935 	bl	2ef4 <printk>
		net_context_put(context);
   24c8a:	4620      	mov	r0, r4
   24c8c:	f7f8 f834 	bl	1ccf8 <net_context_put>
		tcp_ctx = NULL;
   24c90:	2200      	movs	r2, #0
   24c92:	4b03      	ldr	r3, [pc, #12]	; (24ca0 <tcp_connected+0x2c>)
   24c94:	601a      	str	r2, [r3, #0]
   24c96:	bd10      	pop	{r4, pc}
   24c98:	00032250 	.word	0x00032250
   24c9c:	00032234 	.word	0x00032234
   24ca0:	20002550 	.word	0x20002550

00024ca4 <get_my_ipv6_addr>:
{
   24ca4:	b538      	push	{r3, r4, r5, lr}
   24ca6:	460c      	mov	r4, r1
	my6addr = net_if_ipv6_select_src_addr(iface,
   24ca8:	1d0d      	adds	r5, r1, #4
   24caa:	4629      	mov	r1, r5
   24cac:	f7f7 f81e 	bl	1bcec <net_if_ipv6_select_src_addr>
	memcpy(&net_sin6(myaddr)->sin6_addr, my6addr, sizeof(struct in6_addr));
   24cb0:	2210      	movs	r2, #16
   24cb2:	4601      	mov	r1, r0
   24cb4:	4628      	mov	r0, r5
   24cb6:	f7db fb03 	bl	2c0 <memcpy>
	net_sin6(myaddr)->sin6_port = 0; /* let the IP stack to select */
   24cba:	2300      	movs	r3, #0
   24cbc:	8063      	strh	r3, [r4, #2]
   24cbe:	bd38      	pop	{r3, r4, r5, pc}

00024cc0 <tcp_connect>:
{
   24cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   24cc2:	b08f      	sub	sp, #60	; 0x3c
   24cc4:	4607      	mov	r7, r0
   24cc6:	460c      	mov	r4, r1
   24cc8:	4615      	mov	r5, r2
	struct net_if *iface = net_if_get_default();
   24cca:	f7f6 facb 	bl	1b264 <net_if_get_default>
   24cce:	4606      	mov	r6, r0
	ret = net_addr_pton(AF_INET6, host, &net_sin6(&addr)->sin6_addr);
   24cd0:	aa09      	add	r2, sp, #36	; 0x24
   24cd2:	4639      	mov	r1, r7
   24cd4:	200a      	movs	r0, #10
   24cd6:	f7f9 f9c4 	bl	1e062 <net_addr_pton>
	if (ret < 0) {
   24cda:	2800      	cmp	r0, #0
   24cdc:	db34      	blt.n	24d48 <tcp_connect+0x88>
	net_sin6(&addr)->sin6_port = htons(port);
   24cde:	0a21      	lsrs	r1, r4, #8
   24ce0:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   24ce4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
	nbr = net_ipv6_nbr_lookup(NULL, &net_sin6(&addr)->sin6_addr);
   24ce8:	a909      	add	r1, sp, #36	; 0x24
   24cea:	2000      	movs	r0, #0
   24cec:	f7fb f964 	bl	1ffb8 <net_ipv6_nbr_lookup>
	if (nbr) {
   24cf0:	b100      	cbz	r0, 24cf4 <tcp_connect+0x34>
		iface = nbr->iface;
   24cf2:	6886      	ldr	r6, [r0, #8]
	get_my_ipv6_addr(iface, &myaddr);
   24cf4:	a902      	add	r1, sp, #8
   24cf6:	4630      	mov	r0, r6
   24cf8:	f7ff ffd4 	bl	24ca4 <get_my_ipv6_addr>
	family = addr.sa_family = myaddr.sa_family = AF_INET6;
   24cfc:	240a      	movs	r4, #10
   24cfe:	f8ad 4008 	strh.w	r4, [sp, #8]
   24d02:	aa0e      	add	r2, sp, #56	; 0x38
   24d04:	f822 4d18 	strh.w	r4, [r2, #-24]!
	print_connect_info(family, &myaddr, &addr);
   24d08:	a902      	add	r1, sp, #8
   24d0a:	4620      	mov	r0, r4
   24d0c:	f7ff fce6 	bl	246dc <print_connect_info>
	ret = net_context_get(family, SOCK_STREAM, IPPROTO_TCP, ctx);
   24d10:	462b      	mov	r3, r5
   24d12:	2206      	movs	r2, #6
   24d14:	2101      	movs	r1, #1
   24d16:	4620      	mov	r0, r4
   24d18:	f7f7 fd82 	bl	1c820 <net_context_get>
	if (ret < 0) {
   24d1c:	1e04      	subs	r4, r0, #0
   24d1e:	db18      	blt.n	24d52 <tcp_connect+0x92>
	ret = net_context_bind(*ctx, &myaddr, addrlen);
   24d20:	2218      	movs	r2, #24
   24d22:	a902      	add	r1, sp, #8
   24d24:	6828      	ldr	r0, [r5, #0]
   24d26:	f7f8 f829 	bl	1cd7c <net_context_bind>
	if (ret < 0) {
   24d2a:	1e04      	subs	r4, r0, #0
   24d2c:	db16      	blt.n	24d5c <tcp_connect+0x9c>
	return net_context_connect(*ctx, &addr, addrlen, tcp_connected,
   24d2e:	6828      	ldr	r0, [r5, #0]
   24d30:	2300      	movs	r3, #0
   24d32:	9301      	str	r3, [sp, #4]
   24d34:	9300      	str	r3, [sp, #0]
   24d36:	4b0c      	ldr	r3, [pc, #48]	; (24d68 <tcp_connect+0xa8>)
   24d38:	2218      	movs	r2, #24
   24d3a:	a908      	add	r1, sp, #32
   24d3c:	f7f8 f9b0 	bl	1d0a0 <net_context_connect>
   24d40:	4604      	mov	r4, r0
}
   24d42:	4620      	mov	r0, r4
   24d44:	b00f      	add	sp, #60	; 0x3c
   24d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("Invalid IPv6 address\n");
   24d48:	4808      	ldr	r0, [pc, #32]	; (24d6c <tcp_connect+0xac>)
   24d4a:	f7de f8d3 	bl	2ef4 <printk>
		return 0;
   24d4e:	2400      	movs	r4, #0
   24d50:	e7f7      	b.n	24d42 <tcp_connect+0x82>
		printk("Cannot get TCP context (%d)\n", ret);
   24d52:	4621      	mov	r1, r4
   24d54:	4806      	ldr	r0, [pc, #24]	; (24d70 <tcp_connect+0xb0>)
   24d56:	f7de f8cd 	bl	2ef4 <printk>
		return ret;
   24d5a:	e7f2      	b.n	24d42 <tcp_connect+0x82>
		printk("Cannot bind TCP (%d)\n", ret);
   24d5c:	4621      	mov	r1, r4
   24d5e:	4805      	ldr	r0, [pc, #20]	; (24d74 <tcp_connect+0xb4>)
   24d60:	f7de f8c8 	bl	2ef4 <printk>
		return ret;
   24d64:	e7ed      	b.n	24d42 <tcp_connect+0x82>
   24d66:	bf00      	nop
   24d68:	00024c75 	.word	0x00024c75
   24d6c:	000321e4 	.word	0x000321e4
   24d70:	000321fc 	.word	0x000321fc
   24d74:	0003221c 	.word	0x0003221c

00024d78 <net_shell_cmd_tcp>:
}
#endif

int net_shell_cmd_tcp(int argc, char *argv[])
{
   24d78:	b5f0      	push	{r4, r5, r6, r7, lr}
   24d7a:	b083      	sub	sp, #12
#if defined(CONFIG_NET_TCP)
	int arg = 1;
	int ret;

	if (argv[arg]) {
   24d7c:	6848      	ldr	r0, [r1, #4]
   24d7e:	2800      	cmp	r0, #0
   24d80:	f000 8099 	beq.w	24eb6 <net_shell_cmd_tcp+0x13e>
   24d84:	460c      	mov	r4, r1
		if (!strcmp(argv[arg], "connect")) {
   24d86:	4954      	ldr	r1, [pc, #336]	; (24ed8 <net_shell_cmd_tcp+0x160>)
   24d88:	f7db fb3e 	bl	408 <strcmp>
   24d8c:	4605      	mov	r5, r0
   24d8e:	bb20      	cbnz	r0, 24dda <net_shell_cmd_tcp+0x62>
			/* tcp connect <ip> port */
			char *ip;
			u16_t port;

			if (tcp_ctx && net_context_is_used(tcp_ctx)) {
   24d90:	4b52      	ldr	r3, [pc, #328]	; (24edc <net_shell_cmd_tcp+0x164>)
   24d92:	681b      	ldr	r3, [r3, #0]
   24d94:	b123      	cbz	r3, 24da0 <net_shell_cmd_tcp+0x28>
	return context->flags & NET_CONTEXT_IN_USE;
   24d96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   24d9a:	f013 0f01 	tst.w	r3, #1
   24d9e:	d110      	bne.n	24dc2 <net_shell_cmd_tcp+0x4a>
				printk("Already connected\n");
				return 0;
			}

			if (!argv[++arg]) {
   24da0:	68a6      	ldr	r6, [r4, #8]
   24da2:	b196      	cbz	r6, 24dca <net_shell_cmd_tcp+0x52>
				return 0;
			}

			ip = argv[arg];

			if (!argv[++arg]) {
   24da4:	68e0      	ldr	r0, [r4, #12]
   24da6:	b1a0      	cbz	r0, 24dd2 <net_shell_cmd_tcp+0x5a>
				printk("Peer port missing.\n");
				return 0;
			}

			port = strtol(argv[arg], NULL, 10);
   24da8:	220a      	movs	r2, #10
   24daa:	2100      	movs	r1, #0
   24dac:	f005 ff02 	bl	2abb4 <strtol>

			return tcp_connect(ip, port, &tcp_ctx);
   24db0:	4a4a      	ldr	r2, [pc, #296]	; (24edc <net_shell_cmd_tcp+0x164>)
   24db2:	b281      	uxth	r1, r0
   24db4:	4630      	mov	r0, r6
   24db6:	f7ff ff83 	bl	24cc0 <tcp_connect>
   24dba:	4605      	mov	r5, r0
#else
	printk("TCP not enabled.\n");
#endif /* CONFIG_NET_TCP */

	return 0;
}
   24dbc:	4628      	mov	r0, r5
   24dbe:	b003      	add	sp, #12
   24dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printk("Already connected\n");
   24dc2:	4847      	ldr	r0, [pc, #284]	; (24ee0 <net_shell_cmd_tcp+0x168>)
   24dc4:	f7de f896 	bl	2ef4 <printk>
				return 0;
   24dc8:	e7f8      	b.n	24dbc <net_shell_cmd_tcp+0x44>
				printk("Peer IP address missing.\n");
   24dca:	4846      	ldr	r0, [pc, #280]	; (24ee4 <net_shell_cmd_tcp+0x16c>)
   24dcc:	f7de f892 	bl	2ef4 <printk>
				return 0;
   24dd0:	e7f4      	b.n	24dbc <net_shell_cmd_tcp+0x44>
				printk("Peer port missing.\n");
   24dd2:	4845      	ldr	r0, [pc, #276]	; (24ee8 <net_shell_cmd_tcp+0x170>)
   24dd4:	f7de f88e 	bl	2ef4 <printk>
				return 0;
   24dd8:	e7f0      	b.n	24dbc <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "send")) {
   24dda:	4944      	ldr	r1, [pc, #272]	; (24eec <net_shell_cmd_tcp+0x174>)
   24ddc:	6860      	ldr	r0, [r4, #4]
   24dde:	f7db fb13 	bl	408 <strcmp>
   24de2:	4605      	mov	r5, r0
   24de4:	2800      	cmp	r0, #0
   24de6:	d140      	bne.n	24e6a <net_shell_cmd_tcp+0xf2>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   24de8:	4b3c      	ldr	r3, [pc, #240]	; (24edc <net_shell_cmd_tcp+0x164>)
   24dea:	6818      	ldr	r0, [r3, #0]
   24dec:	b300      	cbz	r0, 24e30 <net_shell_cmd_tcp+0xb8>
   24dee:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   24df2:	f013 0f01 	tst.w	r3, #1
   24df6:	d01b      	beq.n	24e30 <net_shell_cmd_tcp+0xb8>
			if (!argv[++arg]) {
   24df8:	68a3      	ldr	r3, [r4, #8]
   24dfa:	b1eb      	cbz	r3, 24e38 <net_shell_cmd_tcp+0xc0>
			pkt = net_pkt_get_tx(tcp_ctx, TCP_TIMEOUT);
   24dfc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   24e00:	f7f8 fbdc 	bl	1d5bc <net_pkt_get_tx>
			if (!pkt) {
   24e04:	4606      	mov	r6, r0
   24e06:	b1d8      	cbz	r0, 24e40 <net_shell_cmd_tcp+0xc8>
			ret = net_pkt_append_all(pkt, strlen(argv[arg]),
   24e08:	68a0      	ldr	r0, [r4, #8]
   24e0a:	f7db fc79 	bl	700 <strlen>
   24e0e:	b287      	uxth	r7, r0
	return net_pkt_append(pkt, len, data, timeout) == len;
   24e10:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   24e14:	68a2      	ldr	r2, [r4, #8]
   24e16:	4639      	mov	r1, r7
   24e18:	4630      	mov	r0, r6
   24e1a:	f7f8 fd3a 	bl	1d892 <net_pkt_append>
			if (!ret) {
   24e1e:	4287      	cmp	r7, r0
   24e20:	d012      	beq.n	24e48 <net_shell_cmd_tcp+0xd0>
				printk("Cannot build msg (out of pkts)\n");
   24e22:	4833      	ldr	r0, [pc, #204]	; (24ef0 <net_shell_cmd_tcp+0x178>)
   24e24:	f7de f866 	bl	2ef4 <printk>
				net_pkt_unref(pkt);
   24e28:	4630      	mov	r0, r6
   24e2a:	f7f8 fbfa 	bl	1d622 <net_pkt_unref>
				return 0;
   24e2e:	e7c5      	b.n	24dbc <net_shell_cmd_tcp+0x44>
				printk("Not connected\n");
   24e30:	4830      	ldr	r0, [pc, #192]	; (24ef4 <net_shell_cmd_tcp+0x17c>)
   24e32:	f7de f85f 	bl	2ef4 <printk>
				return 0;
   24e36:	e7c1      	b.n	24dbc <net_shell_cmd_tcp+0x44>
				printk("No data to send.\n");
   24e38:	482f      	ldr	r0, [pc, #188]	; (24ef8 <net_shell_cmd_tcp+0x180>)
   24e3a:	f7de f85b 	bl	2ef4 <printk>
				return 0;
   24e3e:	e7bd      	b.n	24dbc <net_shell_cmd_tcp+0x44>
				printk("Out of pkts, msg cannot be sent.\n");
   24e40:	482e      	ldr	r0, [pc, #184]	; (24efc <net_shell_cmd_tcp+0x184>)
   24e42:	f7de f857 	bl	2ef4 <printk>
				return 0;
   24e46:	e7b9      	b.n	24dbc <net_shell_cmd_tcp+0x44>
			ret = net_context_send(pkt, tcp_sent_cb, TCP_TIMEOUT,
   24e48:	2300      	movs	r3, #0
   24e4a:	9300      	str	r3, [sp, #0]
   24e4c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   24e50:	492b      	ldr	r1, [pc, #172]	; (24f00 <net_shell_cmd_tcp+0x188>)
   24e52:	4630      	mov	r0, r6
   24e54:	f7f8 fa12 	bl	1d27c <net_context_send>
			if (ret < 0) {
   24e58:	1e01      	subs	r1, r0, #0
   24e5a:	daaf      	bge.n	24dbc <net_shell_cmd_tcp+0x44>
				printk("Cannot send msg (%d)\n", ret);
   24e5c:	4829      	ldr	r0, [pc, #164]	; (24f04 <net_shell_cmd_tcp+0x18c>)
   24e5e:	f7de f849 	bl	2ef4 <printk>
				net_pkt_unref(pkt);
   24e62:	4630      	mov	r0, r6
   24e64:	f7f8 fbdd 	bl	1d622 <net_pkt_unref>
				return 0;
   24e68:	e7a8      	b.n	24dbc <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "close")) {
   24e6a:	4927      	ldr	r1, [pc, #156]	; (24f08 <net_shell_cmd_tcp+0x190>)
   24e6c:	6860      	ldr	r0, [r4, #4]
   24e6e:	f7db facb 	bl	408 <strcmp>
   24e72:	4605      	mov	r5, r0
   24e74:	b9d0      	cbnz	r0, 24eac <net_shell_cmd_tcp+0x134>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   24e76:	4b19      	ldr	r3, [pc, #100]	; (24edc <net_shell_cmd_tcp+0x164>)
   24e78:	6818      	ldr	r0, [r3, #0]
   24e7a:	b120      	cbz	r0, 24e86 <net_shell_cmd_tcp+0x10e>
   24e7c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   24e80:	f013 0f01 	tst.w	r3, #1
   24e84:	d103      	bne.n	24e8e <net_shell_cmd_tcp+0x116>
				printk("Not connected\n");
   24e86:	481b      	ldr	r0, [pc, #108]	; (24ef4 <net_shell_cmd_tcp+0x17c>)
   24e88:	f7de f834 	bl	2ef4 <printk>
				return 0;
   24e8c:	e796      	b.n	24dbc <net_shell_cmd_tcp+0x44>
			ret = net_context_put(tcp_ctx);
   24e8e:	f7f7 ff33 	bl	1ccf8 <net_context_put>
			if (ret < 0) {
   24e92:	1e01      	subs	r1, r0, #0
   24e94:	db06      	blt.n	24ea4 <net_shell_cmd_tcp+0x12c>
			printk("Connection closed.\n");
   24e96:	481d      	ldr	r0, [pc, #116]	; (24f0c <net_shell_cmd_tcp+0x194>)
   24e98:	f7de f82c 	bl	2ef4 <printk>
			tcp_ctx = NULL;
   24e9c:	2200      	movs	r2, #0
   24e9e:	4b0f      	ldr	r3, [pc, #60]	; (24edc <net_shell_cmd_tcp+0x164>)
   24ea0:	601a      	str	r2, [r3, #0]
			return 0;
   24ea2:	e78b      	b.n	24dbc <net_shell_cmd_tcp+0x44>
				printk("Cannot close the connection (%d)\n",
   24ea4:	481a      	ldr	r0, [pc, #104]	; (24f10 <net_shell_cmd_tcp+0x198>)
   24ea6:	f7de f825 	bl	2ef4 <printk>
				return 0;
   24eaa:	e787      	b.n	24dbc <net_shell_cmd_tcp+0x44>
		printk("Unknown command '%s'\n", argv[arg]);
   24eac:	6861      	ldr	r1, [r4, #4]
   24eae:	4819      	ldr	r0, [pc, #100]	; (24f14 <net_shell_cmd_tcp+0x19c>)
   24eb0:	f7de f820 	bl	2ef4 <printk>
		goto usage;
   24eb4:	e002      	b.n	24ebc <net_shell_cmd_tcp+0x144>
		printk("Invalid command.\n");
   24eb6:	4818      	ldr	r0, [pc, #96]	; (24f18 <net_shell_cmd_tcp+0x1a0>)
   24eb8:	f7de f81c 	bl	2ef4 <printk>
		printk("Usage:\n");
   24ebc:	4817      	ldr	r0, [pc, #92]	; (24f1c <net_shell_cmd_tcp+0x1a4>)
   24ebe:	f7de f819 	bl	2ef4 <printk>
		printk("\ttcp connect <ipaddr> port\n");
   24ec2:	4817      	ldr	r0, [pc, #92]	; (24f20 <net_shell_cmd_tcp+0x1a8>)
   24ec4:	f7de f816 	bl	2ef4 <printk>
		printk("\ttcp send <data>\n");
   24ec8:	4816      	ldr	r0, [pc, #88]	; (24f24 <net_shell_cmd_tcp+0x1ac>)
   24eca:	f7de f813 	bl	2ef4 <printk>
		printk("\ttcp close\n");
   24ece:	4816      	ldr	r0, [pc, #88]	; (24f28 <net_shell_cmd_tcp+0x1b0>)
   24ed0:	f7de f810 	bl	2ef4 <printk>
	return 0;
   24ed4:	2500      	movs	r5, #0
   24ed6:	e771      	b.n	24dbc <net_shell_cmd_tcp+0x44>
   24ed8:	0002e728 	.word	0x0002e728
   24edc:	20002550 	.word	0x20002550
   24ee0:	00031fb4 	.word	0x00031fb4
   24ee4:	00031fc8 	.word	0x00031fc8
   24ee8:	00031fe4 	.word	0x00031fe4
   24eec:	00031ff8 	.word	0x00031ff8
   24ef0:	00032048 	.word	0x00032048
   24ef4:	00032000 	.word	0x00032000
   24ef8:	00032010 	.word	0x00032010
   24efc:	00032024 	.word	0x00032024
   24f00:	00024565 	.word	0x00024565
   24f04:	00032068 	.word	0x00032068
   24f08:	00032080 	.word	0x00032080
   24f0c:	000320ac 	.word	0x000320ac
   24f10:	00032088 	.word	0x00032088
   24f14:	00031bac 	.word	0x00031bac
   24f18:	000320c0 	.word	0x000320c0
   24f1c:	000320d4 	.word	0x000320d4
   24f20:	000320dc 	.word	0x000320dc
   24f24:	000320f8 	.word	0x000320f8
   24f28:	0003210c 	.word	0x0003210c

00024f2c <find_conn_handler>:
static int find_conn_handler(enum net_ip_protocol proto,
			     const struct sockaddr *remote_addr,
			     const struct sockaddr *local_addr,
			     u16_t remote_port,
			     u16_t local_port)
{
   24f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24f30:	4605      	mov	r5, r0
   24f32:	460e      	mov	r6, r1
   24f34:	4617      	mov	r7, r2
   24f36:	4699      	mov	r9, r3
   24f38:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   24f3c:	2400      	movs	r4, #0
   24f3e:	e012      	b.n	24f66 <find_conn_handler+0x3a>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   24f40:	f013 0f02 	tst.w	r3, #2
   24f44:	d10e      	bne.n	24f64 <find_conn_handler+0x38>
				continue;
			}
		}

		if (local_addr) {
   24f46:	2f00      	cmp	r7, #0
   24f48:	d051      	beq.n	24fee <find_conn_handler+0xc2>
			if (!(conns[i].flags & NET_CONN_LOCAL_ADDR_SET)) {
   24f4a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   24f4e:	009a      	lsls	r2, r3, #2
   24f50:	4b3c      	ldr	r3, [pc, #240]	; (25044 <find_conn_handler+0x118>)
   24f52:	4413      	add	r3, r2
   24f54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24f58:	f013 0f04 	tst.w	r3, #4
   24f5c:	d002      	beq.n	24f64 <find_conn_handler+0x38>
				continue;
			}

#if defined(CONFIG_NET_IPV6)
			if (local_addr->sa_family == AF_INET6 &&
   24f5e:	883b      	ldrh	r3, [r7, #0]
   24f60:	2b0a      	cmp	r3, #10
   24f62:	d030      	beq.n	24fc6 <find_conn_handler+0x9a>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   24f64:	3401      	adds	r4, #1
   24f66:	2c03      	cmp	r4, #3
   24f68:	dc67      	bgt.n	2503a <find_conn_handler+0x10e>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   24f6a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   24f6e:	009a      	lsls	r2, r3, #2
   24f70:	4b34      	ldr	r3, [pc, #208]	; (25044 <find_conn_handler+0x118>)
   24f72:	4413      	add	r3, r2
   24f74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24f78:	f013 0f01 	tst.w	r3, #1
   24f7c:	d0f2      	beq.n	24f64 <find_conn_handler+0x38>
		if (conns[i].proto != proto) {
   24f7e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24f82:	0091      	lsls	r1, r2, #2
   24f84:	4a2f      	ldr	r2, [pc, #188]	; (25044 <find_conn_handler+0x118>)
   24f86:	440a      	add	r2, r1
   24f88:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   24f8c:	42aa      	cmp	r2, r5
   24f8e:	d1e9      	bne.n	24f64 <find_conn_handler+0x38>
		if (remote_addr) {
   24f90:	2e00      	cmp	r6, #0
   24f92:	d0d5      	beq.n	24f40 <find_conn_handler+0x14>
			if (!(conns[i].flags & NET_CONN_REMOTE_ADDR_SET)) {
   24f94:	f013 0f02 	tst.w	r3, #2
   24f98:	d0e4      	beq.n	24f64 <find_conn_handler+0x38>
			if (remote_addr->sa_family == AF_INET6 &&
   24f9a:	8833      	ldrh	r3, [r6, #0]
   24f9c:	2b0a      	cmp	r3, #10
   24f9e:	d1e1      	bne.n	24f64 <find_conn_handler+0x38>
			    conns[i].remote_addr.sa_family) {
   24fa0:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
   24fa4:	008a      	lsls	r2, r1, #2
   24fa6:	4927      	ldr	r1, [pc, #156]	; (25044 <find_conn_handler+0x118>)
   24fa8:	5a8a      	ldrh	r2, [r1, r2]
			if (remote_addr->sa_family == AF_INET6 &&
   24faa:	4293      	cmp	r3, r2
   24fac:	d1da      	bne.n	24f64 <find_conn_handler+0x38>
					    &net_sin6(&conns[i].remote_addr)->
   24fae:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24fb2:	0093      	lsls	r3, r2, #2
   24fb4:	4419      	add	r1, r3
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   24fb6:	2210      	movs	r2, #16
   24fb8:	3104      	adds	r1, #4
   24fba:	1d30      	adds	r0, r6, #4
   24fbc:	f005 f84c 	bl	2a058 <memcmp>
				if (!net_ipv6_addr_cmp(
   24fc0:	2800      	cmp	r0, #0
   24fc2:	d1cf      	bne.n	24f64 <find_conn_handler+0x38>
   24fc4:	e7bf      	b.n	24f46 <find_conn_handler+0x1a>
			    local_addr->sa_family ==
			    conns[i].local_addr.sa_family) {
   24fc6:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24fca:	0091      	lsls	r1, r2, #2
   24fcc:	4a1d      	ldr	r2, [pc, #116]	; (25044 <find_conn_handler+0x118>)
   24fce:	440a      	add	r2, r1
   24fd0:	8b12      	ldrh	r2, [r2, #24]
			if (local_addr->sa_family == AF_INET6 &&
   24fd2:	4293      	cmp	r3, r2
   24fd4:	d1c6      	bne.n	24f64 <find_conn_handler+0x38>
				if (!net_ipv6_addr_cmp(
					    &net_sin6(local_addr)->sin6_addr,
					    &net_sin6(&conns[i].local_addr)->
   24fd6:	460b      	mov	r3, r1
   24fd8:	3318      	adds	r3, #24
   24fda:	4a1a      	ldr	r2, [pc, #104]	; (25044 <find_conn_handler+0x118>)
   24fdc:	4413      	add	r3, r2
   24fde:	2210      	movs	r2, #16
   24fe0:	1d19      	adds	r1, r3, #4
   24fe2:	1d38      	adds	r0, r7, #4
   24fe4:	f005 f838 	bl	2a058 <memcmp>
				if (!net_ipv6_addr_cmp(
   24fe8:	2800      	cmp	r0, #0
   24fea:	d1bb      	bne.n	24f64 <find_conn_handler+0x38>
   24fec:	e009      	b.n	25002 <find_conn_handler+0xd6>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   24fee:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   24ff2:	009a      	lsls	r2, r3, #2
   24ff4:	4b13      	ldr	r3, [pc, #76]	; (25044 <find_conn_handler+0x118>)
   24ff6:	4413      	add	r3, r2
   24ff8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24ffc:	f013 0f04 	tst.w	r3, #4
   25000:	d1b0      	bne.n	24f64 <find_conn_handler+0x38>
				continue;
			}
		}

		if (net_sin(&conns[i].remote_addr)->sin_port !=
   25002:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25006:	009a      	lsls	r2, r3, #2
   25008:	4b0e      	ldr	r3, [pc, #56]	; (25044 <find_conn_handler+0x118>)
   2500a:	4413      	add	r3, r2
   2500c:	885a      	ldrh	r2, [r3, #2]
		    htons(remote_port)) {
   2500e:	ea4f 2319 	mov.w	r3, r9, lsr #8
   25012:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   25016:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].remote_addr)->sin_port !=
   25018:	429a      	cmp	r2, r3
   2501a:	d1a3      	bne.n	24f64 <find_conn_handler+0x38>
			continue;
		}

		if (net_sin(&conns[i].local_addr)->sin_port !=
   2501c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25020:	0093      	lsls	r3, r2, #2
   25022:	3318      	adds	r3, #24
   25024:	4a07      	ldr	r2, [pc, #28]	; (25044 <find_conn_handler+0x118>)
   25026:	4413      	add	r3, r2
   25028:	885a      	ldrh	r2, [r3, #2]
		    htons(local_port)) {
   2502a:	ea4f 2318 	mov.w	r3, r8, lsr #8
   2502e:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
   25032:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].local_addr)->sin_port !=
   25034:	429a      	cmp	r2, r3
   25036:	d195      	bne.n	24f64 <find_conn_handler+0x38>
   25038:	e001      	b.n	2503e <find_conn_handler+0x112>
		}

		return i;
	}

	return -ENOENT;
   2503a:	f06f 0401 	mvn.w	r4, #1
}
   2503e:	4620      	mov	r0, r4
   25040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25044:	200005a8 	.word	0x200005a8

00025048 <check_addr>:
}

static bool check_addr(struct net_pkt *pkt,
		       struct sockaddr *addr,
		       bool is_remote)
{
   25048:	b538      	push	{r3, r4, r5, lr}
	if (addr->sa_family != net_pkt_family(pkt)) {
   2504a:	880c      	ldrh	r4, [r1, #0]
	return pkt->family;
   2504c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   25050:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   25054:	b29d      	uxth	r5, r3
   25056:	42ac      	cmp	r4, r5
   25058:	d002      	beq.n	25060 <check_addr+0x18>
		return false;
   2505a:	2400      	movs	r4, #0
		}
	}
#endif /* CONFIG_NET_IPV4 */

	return true;
}
   2505c:	4620      	mov	r0, r4
   2505e:	bd38      	pop	{r3, r4, r5, pc}
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   25060:	2b0a      	cmp	r3, #10
   25062:	d001      	beq.n	25068 <check_addr+0x20>
	return true;
   25064:	2401      	movs	r4, #1
   25066:	e7f9      	b.n	2505c <check_addr+0x14>
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   25068:	2c0a      	cmp	r4, #10
   2506a:	d001      	beq.n	25070 <check_addr+0x28>
	return true;
   2506c:	2401      	movs	r4, #1
   2506e:	e7f5      	b.n	2505c <check_addr+0x14>
		if (is_remote) {
   25070:	b162      	cbz	r2, 2508c <check_addr+0x44>
	return pkt->frags->data;
   25072:	6883      	ldr	r3, [r0, #8]
   25074:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->src;
   25076:	3308      	adds	r3, #8
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25078:	684a      	ldr	r2, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2507a:	b95a      	cbnz	r2, 25094 <check_addr+0x4c>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2507c:	688a      	ldr	r2, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2507e:	b9ba      	cbnz	r2, 250b0 <check_addr+0x68>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25080:	68ca      	ldr	r2, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25082:	b9ba      	cbnz	r2, 250b4 <check_addr+0x6c>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   25084:	690a      	ldr	r2, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25086:	b1ba      	cbz	r2, 250b8 <check_addr+0x70>
   25088:	2200      	movs	r2, #0
   2508a:	e004      	b.n	25096 <check_addr+0x4e>
   2508c:	6883      	ldr	r3, [r0, #8]
   2508e:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->dst;
   25090:	3318      	adds	r3, #24
   25092:	e7f1      	b.n	25078 <check_addr+0x30>
   25094:	2200      	movs	r2, #0
		if (!net_is_ipv6_addr_unspecified(
   25096:	4614      	mov	r4, r2
   25098:	2a00      	cmp	r2, #0
   2509a:	d1df      	bne.n	2505c <check_addr+0x14>
   2509c:	4608      	mov	r0, r1
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   2509e:	2210      	movs	r2, #16
   250a0:	4619      	mov	r1, r3
   250a2:	3004      	adds	r0, #4
   250a4:	f004 ffd8 	bl	2a058 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   250a8:	2800      	cmp	r0, #0
   250aa:	d1d7      	bne.n	2505c <check_addr+0x14>
		return true;
   250ac:	2401      	movs	r4, #1
   250ae:	e7d5      	b.n	2505c <check_addr+0x14>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   250b0:	2200      	movs	r2, #0
   250b2:	e7f0      	b.n	25096 <check_addr+0x4e>
   250b4:	2200      	movs	r2, #0
   250b6:	e7ee      	b.n	25096 <check_addr+0x4e>
   250b8:	2201      	movs	r2, #1
   250ba:	e7ec      	b.n	25096 <check_addr+0x4e>

000250bc <net_conn_unregister>:
{
   250bc:	b508      	push	{r3, lr}
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   250be:	4b0d      	ldr	r3, [pc, #52]	; (250f4 <net_conn_unregister+0x38>)
   250c0:	4298      	cmp	r0, r3
   250c2:	d30d      	bcc.n	250e0 <net_conn_unregister+0x24>
   250c4:	33f0      	adds	r3, #240	; 0xf0
   250c6:	4298      	cmp	r0, r3
   250c8:	d80d      	bhi.n	250e6 <net_conn_unregister+0x2a>
	if (!(conn->flags & NET_CONN_IN_USE)) {
   250ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   250ce:	f013 0f01 	tst.w	r3, #1
   250d2:	d00b      	beq.n	250ec <net_conn_unregister+0x30>
	memset(conn, 0, sizeof(*conn));
   250d4:	223c      	movs	r2, #60	; 0x3c
   250d6:	2100      	movs	r1, #0
   250d8:	f005 f852 	bl	2a180 <memset>
	return 0;
   250dc:	2000      	movs	r0, #0
   250de:	bd08      	pop	{r3, pc}
		return -EINVAL;
   250e0:	f06f 0015 	mvn.w	r0, #21
   250e4:	bd08      	pop	{r3, pc}
   250e6:	f06f 0015 	mvn.w	r0, #21
   250ea:	bd08      	pop	{r3, pc}
		return -ENOENT;
   250ec:	f06f 0001 	mvn.w	r0, #1
}
   250f0:	bd08      	pop	{r3, pc}
   250f2:	bf00      	nop
   250f4:	200005a8 	.word	0x200005a8

000250f8 <net_conn_register>:
{
   250f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   250fc:	b082      	sub	sp, #8
   250fe:	4681      	mov	r9, r0
   25100:	460d      	mov	r5, r1
   25102:	4616      	mov	r6, r2
   25104:	4698      	mov	r8, r3
   25106:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	i = find_conn_handler(proto, remote_addr, local_addr, remote_port,
   2510a:	9700      	str	r7, [sp, #0]
   2510c:	f7ff ff0e 	bl	24f2c <find_conn_handler>
	if (i != -ENOENT) {
   25110:	f110 0f02 	cmn.w	r0, #2
   25114:	f040 80ba 	bne.w	2528c <net_conn_register+0x194>
   25118:	2400      	movs	r4, #0
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2511a:	2c03      	cmp	r4, #3
   2511c:	f300 80aa 	bgt.w	25274 <net_conn_register+0x17c>
		if (conns[i].flags & NET_CONN_IN_USE) {
   25120:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25124:	009a      	lsls	r2, r3, #2
   25126:	4b60      	ldr	r3, [pc, #384]	; (252a8 <net_conn_register+0x1b0>)
   25128:	4413      	add	r3, r2
   2512a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   2512e:	f013 0f01 	tst.w	r3, #1
   25132:	d001      	beq.n	25138 <net_conn_register+0x40>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   25134:	3401      	adds	r4, #1
   25136:	e7f0      	b.n	2511a <net_conn_register+0x22>
		if (remote_addr) {
   25138:	2d00      	cmp	r5, #0
   2513a:	d04b      	beq.n	251d4 <net_conn_register+0xdc>
			if (remote_addr->sa_family == AF_INET6) {
   2513c:	882b      	ldrh	r3, [r5, #0]
   2513e:	2b0a      	cmp	r3, #10
   25140:	f040 80a7 	bne.w	25292 <net_conn_register+0x19a>
				memcpy(&conns[i].remote_addr, remote_addr,
   25144:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25148:	0093      	lsls	r3, r2, #2
   2514a:	2218      	movs	r2, #24
   2514c:	4629      	mov	r1, r5
   2514e:	4856      	ldr	r0, [pc, #344]	; (252a8 <net_conn_register+0x1b0>)
   25150:	4418      	add	r0, r3
   25152:	f7db f8b5 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25156:	686b      	ldr	r3, [r5, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25158:	b93b      	cbnz	r3, 2516a <net_conn_register+0x72>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2515a:	68ab      	ldr	r3, [r5, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2515c:	bb8b      	cbnz	r3, 251c2 <net_conn_register+0xca>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2515e:	68eb      	ldr	r3, [r5, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25160:	bb8b      	cbnz	r3, 251c6 <net_conn_register+0xce>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   25162:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25164:	b38b      	cbz	r3, 251ca <net_conn_register+0xd2>
   25166:	2300      	movs	r3, #0
   25168:	e000      	b.n	2516c <net_conn_register+0x74>
   2516a:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   2516c:	b37b      	cbz	r3, 251ce <net_conn_register+0xd6>
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   2516e:	f04f 0a08 	mov.w	sl, #8
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   25172:	0122      	lsls	r2, r4, #4
   25174:	1b12      	subs	r2, r2, r4
   25176:	0091      	lsls	r1, r2, #2
   25178:	4b4b      	ldr	r3, [pc, #300]	; (252a8 <net_conn_register+0x1b0>)
   2517a:	440b      	add	r3, r1
   2517c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   25180:	f042 0202 	orr.w	r2, r2, #2
   25184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (local_addr) {
   25188:	2e00      	cmp	r6, #0
   2518a:	d036      	beq.n	251fa <net_conn_register+0x102>
			if (local_addr->sa_family == AF_INET6) {
   2518c:	8833      	ldrh	r3, [r6, #0]
   2518e:	2b0a      	cmp	r3, #10
   25190:	f040 8082 	bne.w	25298 <net_conn_register+0x1a0>
				memcpy(&conns[i].local_addr, local_addr,
   25194:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25198:	0098      	lsls	r0, r3, #2
   2519a:	3018      	adds	r0, #24
   2519c:	2218      	movs	r2, #24
   2519e:	4631      	mov	r1, r6
   251a0:	4b41      	ldr	r3, [pc, #260]	; (252a8 <net_conn_register+0x1b0>)
   251a2:	4418      	add	r0, r3
   251a4:	f7db f88c 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   251a8:	6873      	ldr	r3, [r6, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   251aa:	b9b3      	cbnz	r3, 251da <net_conn_register+0xe2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   251ac:	68b3      	ldr	r3, [r6, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   251ae:	2b00      	cmp	r3, #0
   251b0:	d163      	bne.n	2527a <net_conn_register+0x182>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   251b2:	68f3      	ldr	r3, [r6, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   251b4:	2b00      	cmp	r3, #0
   251b6:	d162      	bne.n	2527e <net_conn_register+0x186>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   251b8:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   251ba:	2b00      	cmp	r3, #0
   251bc:	d061      	beq.n	25282 <net_conn_register+0x18a>
   251be:	2300      	movs	r3, #0
   251c0:	e00c      	b.n	251dc <net_conn_register+0xe4>
   251c2:	2300      	movs	r3, #0
   251c4:	e7d2      	b.n	2516c <net_conn_register+0x74>
   251c6:	2300      	movs	r3, #0
   251c8:	e7d0      	b.n	2516c <net_conn_register+0x74>
   251ca:	2301      	movs	r3, #1
   251cc:	e7ce      	b.n	2516c <net_conn_register+0x74>
					rank |= NET_RANK_REMOTE_SPEC_ADDR;
   251ce:	f04f 0a20 	mov.w	sl, #32
   251d2:	e7ce      	b.n	25172 <net_conn_register+0x7a>
	u8_t rank = 0;
   251d4:	f04f 0a00 	mov.w	sl, #0
   251d8:	e7d6      	b.n	25188 <net_conn_register+0x90>
   251da:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   251dc:	2b00      	cmp	r3, #0
   251de:	d052      	beq.n	25286 <net_conn_register+0x18e>
					rank |= NET_RANK_LOCAL_UNSPEC_ADDR;
   251e0:	f04a 0a04 	orr.w	sl, sl, #4
			conns[i].flags |= NET_CONN_LOCAL_ADDR_SET;
   251e4:	0122      	lsls	r2, r4, #4
   251e6:	1b12      	subs	r2, r2, r4
   251e8:	0091      	lsls	r1, r2, #2
   251ea:	4b2f      	ldr	r3, [pc, #188]	; (252a8 <net_conn_register+0x1b0>)
   251ec:	440b      	add	r3, r1
   251ee:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   251f2:	f042 0204 	orr.w	r2, r2, #4
   251f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (remote_addr && local_addr) {
   251fa:	b125      	cbz	r5, 25206 <net_conn_register+0x10e>
   251fc:	b11e      	cbz	r6, 25206 <net_conn_register+0x10e>
			if (remote_addr->sa_family != local_addr->sa_family) {
   251fe:	882a      	ldrh	r2, [r5, #0]
   25200:	8833      	ldrh	r3, [r6, #0]
   25202:	429a      	cmp	r2, r3
   25204:	d14b      	bne.n	2529e <net_conn_register+0x1a6>
		if (remote_port) {
   25206:	f1b8 0f00 	cmp.w	r8, #0
   2520a:	d00c      	beq.n	25226 <net_conn_register+0x12e>
			rank |= NET_RANK_REMOTE_PORT;
   2520c:	f04a 0a02 	orr.w	sl, sl, #2
			net_sin(&conns[i].remote_addr)->sin_port =
   25210:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25214:	009a      	lsls	r2, r3, #2
   25216:	4b24      	ldr	r3, [pc, #144]	; (252a8 <net_conn_register+0x1b0>)
   25218:	4413      	add	r3, r2
				htons(remote_port);
   2521a:	ea4f 2218 	mov.w	r2, r8, lsr #8
   2521e:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
			net_sin(&conns[i].remote_addr)->sin_port =
   25222:	f8a3 8002 	strh.w	r8, [r3, #2]
		if (local_port) {
   25226:	b15f      	cbz	r7, 25240 <net_conn_register+0x148>
			rank |= NET_RANK_LOCAL_PORT;
   25228:	f04a 0a01 	orr.w	sl, sl, #1
			net_sin(&conns[i].local_addr)->sin_port =
   2522c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25230:	0093      	lsls	r3, r2, #2
   25232:	3318      	adds	r3, #24
   25234:	4a1c      	ldr	r2, [pc, #112]	; (252a8 <net_conn_register+0x1b0>)
   25236:	4413      	add	r3, r2
				htons(local_port);
   25238:	0a3a      	lsrs	r2, r7, #8
   2523a:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
			net_sin(&conns[i].local_addr)->sin_port =
   2523e:	805f      	strh	r7, [r3, #2]
		conns[i].flags |= NET_CONN_IN_USE;
   25240:	0122      	lsls	r2, r4, #4
   25242:	1b12      	subs	r2, r2, r4
   25244:	0091      	lsls	r1, r2, #2
   25246:	4b18      	ldr	r3, [pc, #96]	; (252a8 <net_conn_register+0x1b0>)
   25248:	440b      	add	r3, r1
   2524a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   2524e:	f042 0201 	orr.w	r2, r2, #1
   25252:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		conns[i].cb = cb;
   25256:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   25258:	631a      	str	r2, [r3, #48]	; 0x30
		conns[i].user_data = user_data;
   2525a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2525c:	635a      	str	r2, [r3, #52]	; 0x34
		conns[i].rank = rank;
   2525e:	f883 a03a 	strb.w	sl, [r3, #58]	; 0x3a
		conns[i].proto = proto;
   25262:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
		if (handle) {
   25266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   25268:	b1e3      	cbz	r3, 252a4 <net_conn_register+0x1ac>
			*handle = (struct net_conn_handle *)&conns[i];
   2526a:	4b0f      	ldr	r3, [pc, #60]	; (252a8 <net_conn_register+0x1b0>)
   2526c:	440b      	add	r3, r1
   2526e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   25270:	6013      	str	r3, [r2, #0]
		return 0;
   25272:	2000      	movs	r0, #0
}
   25274:	b002      	add	sp, #8
   25276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2527a:	2300      	movs	r3, #0
   2527c:	e7ae      	b.n	251dc <net_conn_register+0xe4>
   2527e:	2300      	movs	r3, #0
   25280:	e7ac      	b.n	251dc <net_conn_register+0xe4>
   25282:	2301      	movs	r3, #1
   25284:	e7aa      	b.n	251dc <net_conn_register+0xe4>
					rank |= NET_RANK_LOCAL_SPEC_ADDR;
   25286:	f04a 0a10 	orr.w	sl, sl, #16
   2528a:	e7ab      	b.n	251e4 <net_conn_register+0xec>
		return -EALREADY;
   2528c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   25290:	e7f0      	b.n	25274 <net_conn_register+0x17c>
				return -EINVAL;
   25292:	f06f 0015 	mvn.w	r0, #21
   25296:	e7ed      	b.n	25274 <net_conn_register+0x17c>
				return -EINVAL;
   25298:	f06f 0015 	mvn.w	r0, #21
   2529c:	e7ea      	b.n	25274 <net_conn_register+0x17c>
				return -EINVAL;
   2529e:	f06f 0015 	mvn.w	r0, #21
   252a2:	e7e7      	b.n	25274 <net_conn_register+0x17c>
		return 0;
   252a4:	2000      	movs	r0, #0
   252a6:	e7e5      	b.n	25274 <net_conn_register+0x17c>
   252a8:	200005a8 	.word	0x200005a8

000252ac <net_conn_input>:
#endif /* CONFIG_NET_IPV4 */
	}
}

enum net_verdict net_conn_input(enum net_ip_protocol proto, struct net_pkt *pkt)
{
   252ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   252b0:	b089      	sub	sp, #36	; 0x24
   252b2:	4605      	mov	r5, r0
   252b4:	460e      	mov	r6, r1

	/* This is only used for getting source and destination ports.
	 * Because both TCP and UDP header have these in the same
	 * location, we can check them both using the UDP struct.
	 */
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   252b6:	2811      	cmp	r0, #17
   252b8:	d005      	beq.n	252c6 <net_conn_input+0x1a>
		}

		src_port = udp_hdr->src_port;
		dst_port = udp_hdr->dst_port;
		chksum = udp_hdr->chksum;
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   252ba:	2806      	cmp	r0, #6
   252bc:	d015      	beq.n	252ea <net_conn_input+0x3e>
		src_port = tcp_hdr->src_port;
		dst_port = tcp_hdr->dst_port;
		chksum = tcp_hdr->chksum;
	} else {
		NET_DBG("No UDP or TCP configured, dropping packet.");
		return NET_DROP;
   252be:	2002      	movs	r0, #2

drop:
	net_stats_update_per_proto_drop(proto);

	return NET_DROP;
}
   252c0:	b009      	add	sp, #36	; 0x24
   252c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   252c6:	a903      	add	r1, sp, #12
   252c8:	4630      	mov	r0, r6
   252ca:	f7fd ff73 	bl	231b4 <net_udp_get_hdr>
		if (!udp_hdr) {
   252ce:	b150      	cbz	r0, 252e6 <net_conn_input+0x3a>
		src_port = udp_hdr->src_port;
   252d0:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = udp_hdr->dst_port;
   252d4:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = udp_hdr->chksum;
   252d8:	f8b0 a006 	ldrh.w	sl, [r0, #6]
	s16_t best_rank = -1;
   252dc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	int i, best_match = -1;
   252e0:	4647      	mov	r7, r8
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   252e2:	2400      	movs	r4, #0
   252e4:	e01b      	b.n	2531e <net_conn_input+0x72>
			return NET_DROP;
   252e6:	2002      	movs	r0, #2
   252e8:	e7ea      	b.n	252c0 <net_conn_input+0x14>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   252ea:	a903      	add	r1, sp, #12
   252ec:	4630      	mov	r0, r6
   252ee:	f7fe fbcd 	bl	23a8c <net_tcp_get_hdr>
		if (!tcp_hdr) {
   252f2:	b130      	cbz	r0, 25302 <net_conn_input+0x56>
		src_port = tcp_hdr->src_port;
   252f4:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = tcp_hdr->dst_port;
   252f8:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = tcp_hdr->chksum;
   252fc:	f8b0 a010 	ldrh.w	sl, [r0, #16]
   25300:	e7ec      	b.n	252dc <net_conn_input+0x30>
			return NET_DROP;
   25302:	2002      	movs	r0, #2
   25304:	e7dc      	b.n	252c0 <net_conn_input+0x14>
		if (net_sin(&conns[i].local_addr)->sin_port) {
   25306:	ebc4 1004 	rsb	r0, r4, r4, lsl #4
   2530a:	0082      	lsls	r2, r0, #2
   2530c:	3218      	adds	r2, #24
   2530e:	4866      	ldr	r0, [pc, #408]	; (254a8 <net_conn_input+0x1fc>)
   25310:	1882      	adds	r2, r0, r2
   25312:	9201      	str	r2, [sp, #4]
   25314:	8852      	ldrh	r2, [r2, #2]
   25316:	b1fa      	cbz	r2, 25358 <net_conn_input+0xac>
			if (net_sin(&conns[i].local_addr)->sin_port !=
   25318:	4593      	cmp	fp, r2
   2531a:	d01d      	beq.n	25358 <net_conn_input+0xac>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2531c:	3401      	adds	r4, #1
   2531e:	2c03      	cmp	r4, #3
   25320:	dc4d      	bgt.n	253be <net_conn_input+0x112>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   25322:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25326:	009a      	lsls	r2, r3, #2
   25328:	4b5f      	ldr	r3, [pc, #380]	; (254a8 <net_conn_input+0x1fc>)
   2532a:	4413      	add	r3, r2
   2532c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   25330:	f013 0f01 	tst.w	r3, #1
   25334:	d0f2      	beq.n	2531c <net_conn_input+0x70>
		if (conns[i].proto != proto) {
   25336:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   2533a:	0091      	lsls	r1, r2, #2
   2533c:	4a5a      	ldr	r2, [pc, #360]	; (254a8 <net_conn_input+0x1fc>)
   2533e:	440a      	add	r2, r1
   25340:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   25344:	4295      	cmp	r5, r2
   25346:	d1e9      	bne.n	2531c <net_conn_input+0x70>
		if (net_sin(&conns[i].remote_addr)->sin_port) {
   25348:	4a57      	ldr	r2, [pc, #348]	; (254a8 <net_conn_input+0x1fc>)
   2534a:	4411      	add	r1, r2
   2534c:	884a      	ldrh	r2, [r1, #2]
   2534e:	2a00      	cmp	r2, #0
   25350:	d0d9      	beq.n	25306 <net_conn_input+0x5a>
			if (net_sin(&conns[i].remote_addr)->sin_port !=
   25352:	4591      	cmp	r9, r2
   25354:	d1e2      	bne.n	2531c <net_conn_input+0x70>
   25356:	e7d6      	b.n	25306 <net_conn_input+0x5a>
		if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   25358:	f013 0f02 	tst.w	r3, #2
   2535c:	d120      	bne.n	253a0 <net_conn_input+0xf4>
		if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   2535e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25362:	009a      	lsls	r2, r3, #2
   25364:	4b50      	ldr	r3, [pc, #320]	; (254a8 <net_conn_input+0x1fc>)
   25366:	4413      	add	r3, r2
   25368:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   2536c:	f013 0f04 	tst.w	r3, #4
   25370:	d11d      	bne.n	253ae <net_conn_input+0x102>
		if (best_match >= 0 &&
   25372:	2f00      	cmp	r7, #0
   25374:	db07      	blt.n	25386 <net_conn_input+0xda>
		    net_sin(&conns[best_match].remote_addr)->sin_port) {
   25376:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
   2537a:	009a      	lsls	r2, r3, #2
   2537c:	4b4a      	ldr	r3, [pc, #296]	; (254a8 <net_conn_input+0x1fc>)
   2537e:	4413      	add	r3, r2
   25380:	885b      	ldrh	r3, [r3, #2]
		if (best_match >= 0 &&
   25382:	2b00      	cmp	r3, #0
   25384:	d1ca      	bne.n	2531c <net_conn_input+0x70>
		if (best_rank < conns[i].rank) {
   25386:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2538a:	009a      	lsls	r2, r3, #2
   2538c:	4b46      	ldr	r3, [pc, #280]	; (254a8 <net_conn_input+0x1fc>)
   2538e:	4413      	add	r3, r2
   25390:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   25394:	4598      	cmp	r8, r3
   25396:	dac1      	bge.n	2531c <net_conn_input+0x70>
			best_rank = conns[i].rank;
   25398:	fa0f f883 	sxth.w	r8, r3
			best_match = i;
   2539c:	4627      	mov	r7, r4
   2539e:	e7bd      	b.n	2531c <net_conn_input+0x70>
			if (!check_addr(pkt, &conns[i].remote_addr, true)) {
   253a0:	2201      	movs	r2, #1
   253a2:	4630      	mov	r0, r6
   253a4:	f7ff fe50 	bl	25048 <check_addr>
   253a8:	2800      	cmp	r0, #0
   253aa:	d0b7      	beq.n	2531c <net_conn_input+0x70>
   253ac:	e7d7      	b.n	2535e <net_conn_input+0xb2>
			if (!check_addr(pkt, &conns[i].local_addr, false)) {
   253ae:	2200      	movs	r2, #0
   253b0:	9901      	ldr	r1, [sp, #4]
   253b2:	4630      	mov	r0, r6
   253b4:	f7ff fe48 	bl	25048 <check_addr>
   253b8:	2800      	cmp	r0, #0
   253ba:	d0af      	beq.n	2531c <net_conn_input+0x70>
   253bc:	e7d9      	b.n	25372 <net_conn_input+0xc6>
	if (best_match >= 0) {
   253be:	2f00      	cmp	r7, #0
   253c0:	db44      	blt.n	2544c <net_conn_input+0x1a0>
		if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   253c2:	2d11      	cmp	r5, #17
   253c4:	d014      	beq.n	253f0 <net_conn_input+0x144>
		} else if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   253c6:	2d06      	cmp	r5, #6
   253c8:	d023      	beq.n	25412 <net_conn_input+0x166>
		if (conns[best_match].cb(&conns[best_match], pkt,
   253ca:	4c37      	ldr	r4, [pc, #220]	; (254a8 <net_conn_input+0x1fc>)
   253cc:	013a      	lsls	r2, r7, #4
   253ce:	1bd1      	subs	r1, r2, r7
   253d0:	008b      	lsls	r3, r1, #2
   253d2:	4423      	add	r3, r4
   253d4:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   253d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   253da:	4631      	mov	r1, r6
   253dc:	4618      	mov	r0, r3
   253de:	47c0      	blx	r8
   253e0:	2802      	cmp	r0, #2
   253e2:	d03d      	beq.n	25460 <net_conn_input+0x1b4>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   253e4:	2d11      	cmp	r5, #17
   253e6:	d023      	beq.n	25430 <net_conn_input+0x184>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   253e8:	2d06      	cmp	r5, #6
   253ea:	d029      	beq.n	25440 <net_conn_input+0x194>
		return NET_OK;
   253ec:	2000      	movs	r0, #0
   253ee:	e767      	b.n	252c0 <net_conn_input+0x14>
			net_udp_set_chksum(pkt, pkt->frags);
   253f0:	68b1      	ldr	r1, [r6, #8]
   253f2:	4630      	mov	r0, r6
   253f4:	f7fd fe6b 	bl	230ce <net_udp_set_chksum>
			chksum_calc = net_udp_get_chksum(pkt, pkt->frags);
   253f8:	68b1      	ldr	r1, [r6, #8]
   253fa:	4630      	mov	r0, r6
   253fc:	f7fd feb4 	bl	23168 <net_udp_get_chksum>
			if (chksum != chksum_calc) {
   25400:	4582      	cmp	sl, r0
   25402:	d0e2      	beq.n	253ca <net_conn_input+0x11e>
	net_stats.udp.chkerr++;
   25404:	4a29      	ldr	r2, [pc, #164]	; (254ac <net_conn_input+0x200>)
   25406:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   2540a:	3301      	adds	r3, #1
   2540c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
   25410:	e026      	b.n	25460 <net_conn_input+0x1b4>
			net_tcp_set_chksum(pkt, pkt->frags);
   25412:	68b1      	ldr	r1, [r6, #8]
   25414:	4630      	mov	r0, r6
   25416:	f7fe fc9e 	bl	23d56 <net_tcp_set_chksum>
			chksum_calc = net_tcp_get_chksum(pkt, pkt->frags);
   2541a:	68b1      	ldr	r1, [r6, #8]
   2541c:	4630      	mov	r0, r6
   2541e:	f7fe fc74 	bl	23d0a <net_tcp_get_chksum>
			if (chksum != chksum_calc) {
   25422:	4582      	cmp	sl, r0
   25424:	d0d1      	beq.n	253ca <net_conn_input+0x11e>
	net_stats.tcp.chkerr++;
   25426:	4a21      	ldr	r2, [pc, #132]	; (254ac <net_conn_input+0x200>)
   25428:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2542a:	3301      	adds	r3, #1
   2542c:	6613      	str	r3, [r2, #96]	; 0x60
   2542e:	e017      	b.n	25460 <net_conn_input+0x1b4>
	net_stats.udp.recv++;
   25430:	4a1e      	ldr	r2, [pc, #120]	; (254ac <net_conn_input+0x200>)
   25432:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   25436:	3301      	adds	r3, #1
   25438:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		return NET_OK;
   2543c:	2000      	movs	r0, #0
   2543e:	e73f      	b.n	252c0 <net_conn_input+0x14>
	net_stats.tcp.recv++;
   25440:	4a1a      	ldr	r2, [pc, #104]	; (254ac <net_conn_input+0x200>)
   25442:	6d53      	ldr	r3, [r2, #84]	; 0x54
   25444:	3301      	adds	r3, #1
   25446:	6553      	str	r3, [r2, #84]	; 0x54
   25448:	2000      	movs	r0, #0
   2544a:	e739      	b.n	252c0 <net_conn_input+0x14>
	return pkt->family;
   2544c:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   25450:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6 &&
   25454:	2b0a      	cmp	r3, #10
   25456:	d009      	beq.n	2546c <net_conn_input+0x1c0>
	if (net_pkt_family(pkt) == AF_INET6) {
   25458:	2b0a      	cmp	r3, #10
   2545a:	d00d      	beq.n	25478 <net_conn_input+0x1cc>
		if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   2545c:	2d06      	cmp	r5, #6
   2545e:	d012      	beq.n	25486 <net_conn_input+0x1da>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   25460:	2d11      	cmp	r5, #17
   25462:	d015      	beq.n	25490 <net_conn_input+0x1e4>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   25464:	2d06      	cmp	r5, #6
   25466:	d019      	beq.n	2549c <net_conn_input+0x1f0>
	return NET_DROP;
   25468:	2002      	movs	r0, #2
   2546a:	e729      	b.n	252c0 <net_conn_input+0x14>
	return pkt->frags->data;
   2546c:	68b2      	ldr	r2, [r6, #8]
   2546e:	6892      	ldr	r2, [r2, #8]
	return addr->s6_addr[0] == 0xFF;
   25470:	7e12      	ldrb	r2, [r2, #24]
	if (net_pkt_family(pkt) == AF_INET6 &&
   25472:	2aff      	cmp	r2, #255	; 0xff
   25474:	d1f0      	bne.n	25458 <net_conn_input+0x1ac>
   25476:	e7f3      	b.n	25460 <net_conn_input+0x1b4>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   25478:	2300      	movs	r3, #0
   2547a:	2204      	movs	r2, #4
   2547c:	2101      	movs	r1, #1
   2547e:	4630      	mov	r0, r6
   25480:	f7f9 fc94 	bl	1edac <net_icmpv6_send_error>
   25484:	e7ea      	b.n	2545c <net_conn_input+0x1b0>
	net_stats.tcp.connrst++;
   25486:	4a09      	ldr	r2, [pc, #36]	; (254ac <net_conn_input+0x200>)
   25488:	6f93      	ldr	r3, [r2, #120]	; 0x78
   2548a:	3301      	adds	r3, #1
   2548c:	6793      	str	r3, [r2, #120]	; 0x78
   2548e:	e7e7      	b.n	25460 <net_conn_input+0x1b4>
	net_stats.udp.drop++;
   25490:	4a06      	ldr	r2, [pc, #24]	; (254ac <net_conn_input+0x200>)
   25492:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   25494:	3301      	adds	r3, #1
   25496:	67d3      	str	r3, [r2, #124]	; 0x7c
	return NET_DROP;
   25498:	2002      	movs	r0, #2
   2549a:	e711      	b.n	252c0 <net_conn_input+0x14>
	net_stats.tcp.drop++;
   2549c:	4a03      	ldr	r2, [pc, #12]	; (254ac <net_conn_input+0x200>)
   2549e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   254a0:	3301      	adds	r3, #1
   254a2:	65d3      	str	r3, [r2, #92]	; 0x5c
   254a4:	2002      	movs	r0, #2
   254a6:	e70b      	b.n	252c0 <net_conn_input+0x14>
   254a8:	200005a8 	.word	0x200005a8
   254ac:	20002b50 	.word	0x20002b50

000254b0 <net_conn_init>:
		cb(&conns[i], user_data);
	}
}

void net_conn_init(void)
{
   254b0:	4770      	bx	lr

000254b2 <compute_rlen_size>:
 * @retval -EINVAL
 */
static
int compute_rlen_size(u16_t *size, u32_t len)
{
	if (len <= 127) {
   254b2:	297f      	cmp	r1, #127	; 0x7f
   254b4:	d912      	bls.n	254dc <compute_rlen_size+0x2a>
		*size = 1;
	} else if (len >= 128 && len <= 16383) {
   254b6:	f1a1 0380 	sub.w	r3, r1, #128	; 0x80
   254ba:	f5b3 5f7e 	cmp.w	r3, #16256	; 0x3f80
   254be:	d311      	bcc.n	254e4 <compute_rlen_size+0x32>
		*size = 2;
	} else if (len >= 16384 && len <= 2097151) {
   254c0:	f5a1 4380 	sub.w	r3, r1, #16384	; 0x4000
   254c4:	f5b3 1ffe 	cmp.w	r3, #2080768	; 0x1fc000
   254c8:	d310      	bcc.n	254ec <compute_rlen_size+0x3a>
		*size = 3;
	} else if (len >= 2097152 && len <= 268435455) {
   254ca:	f5a1 1100 	sub.w	r1, r1, #2097152	; 0x200000
   254ce:	f1b1 6f7e 	cmp.w	r1, #266338304	; 0xfe00000
   254d2:	d20f      	bcs.n	254f4 <compute_rlen_size+0x42>
		*size = 4;
   254d4:	2304      	movs	r3, #4
   254d6:	8003      	strh	r3, [r0, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   254d8:	2000      	movs	r0, #0
   254da:	4770      	bx	lr
		*size = 1;
   254dc:	2301      	movs	r3, #1
   254de:	8003      	strh	r3, [r0, #0]
	return 0;
   254e0:	2000      	movs	r0, #0
   254e2:	4770      	bx	lr
		*size = 2;
   254e4:	2302      	movs	r3, #2
   254e6:	8003      	strh	r3, [r0, #0]
	return 0;
   254e8:	2000      	movs	r0, #0
   254ea:	4770      	bx	lr
		*size = 3;
   254ec:	2303      	movs	r3, #3
   254ee:	8003      	strh	r3, [r0, #0]
	return 0;
   254f0:	2000      	movs	r0, #0
   254f2:	4770      	bx	lr
		return -EINVAL;
   254f4:	f06f 0015 	mvn.w	r0, #21
}
   254f8:	4770      	bx	lr

000254fa <rlen_encode>:
 * @param [in] len Value to encode
 *
 * @retval 0 always
 */
static int rlen_encode(u8_t *buf, u32_t len)
{
   254fa:	b410      	push	{r4}
	u8_t encoded;
	u8_t i;

	i = 0;
   254fc:	2200      	movs	r2, #0
   254fe:	e004      	b.n	2550a <rlen_encode+0x10>
		 * set the top bit of this byte
		 */
		if (len > 0) {
			encoded = encoded | 128;
		}
		buf[i++] = encoded;
   25500:	1c53      	adds	r3, r2, #1
   25502:	b2db      	uxtb	r3, r3
   25504:	5484      	strb	r4, [r0, r2]
	} while (len > 0);
   25506:	b139      	cbz	r1, 25518 <rlen_encode+0x1e>
		buf[i++] = encoded;
   25508:	461a      	mov	r2, r3
		encoded = len % 128;
   2550a:	f001 047f 	and.w	r4, r1, #127	; 0x7f
		if (len > 0) {
   2550e:	09c9      	lsrs	r1, r1, #7
   25510:	d0f6      	beq.n	25500 <rlen_encode+0x6>
			encoded = encoded | 128;
   25512:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   25516:	e7f3      	b.n	25500 <rlen_encode+0x6>

	return 0;
}
   25518:	2000      	movs	r0, #0
   2551a:	bc10      	pop	{r4}
   2551c:	4770      	bx	lr

0002551e <rlen_decode>:
 * @retval 0 on success
 * @retval -ENOMEM if size < 4
 */
static int rlen_decode(u32_t *rlen, u16_t *rlen_size,
		       u8_t *buf, u16_t size)
{
   2551e:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t value = 0;
	u32_t mult = 1;
	u16_t i = 0;
   25520:	2400      	movs	r4, #0
	u32_t mult = 1;
   25522:	2601      	movs	r6, #1
	u32_t value = 0;
   25524:	4627      	mov	r7, r4
   25526:	e000      	b.n	2552a <rlen_decode+0xc>
	do {
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
			return -ENOMEM;
		}

		encoded = buf[i++];
   25528:	462c      	mov	r4, r5
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
   2552a:	2c03      	cmp	r4, #3
   2552c:	d810      	bhi.n	25550 <rlen_decode+0x32>
   2552e:	429c      	cmp	r4, r3
   25530:	d211      	bcs.n	25556 <rlen_decode+0x38>
		encoded = buf[i++];
   25532:	1c65      	adds	r5, r4, #1
   25534:	b2ad      	uxth	r5, r5
   25536:	5d14      	ldrb	r4, [r2, r4]
		value += (encoded & 127) * mult;
   25538:	f004 0e7f 	and.w	lr, r4, #127	; 0x7f
   2553c:	fb0e 7706 	mla	r7, lr, r6, r7
		mult *= 128;
   25540:	01f6      	lsls	r6, r6, #7
	} while ((encoded & 128) != 0);
   25542:	f014 0f80 	tst.w	r4, #128	; 0x80
   25546:	d1ef      	bne.n	25528 <rlen_decode+0xa>

	*rlen = value;
   25548:	6007      	str	r7, [r0, #0]
	*rlen_size = i;
   2554a:	800d      	strh	r5, [r1, #0]

	return 0;
   2554c:	2000      	movs	r0, #0
   2554e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -ENOMEM;
   25550:	f06f 000b 	mvn.w	r0, #11
   25554:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25556:	f06f 000b 	mvn.w	r0, #11
}
   2555a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002555c <pack_pkt_id>:
 * @retval -ENOMEM if size < 4
 */
static
int pack_pkt_id(u8_t *buf, u16_t *length, u16_t size,
		enum mqtt_packet type, u8_t reserved, u16_t pkt_id)
{
   2555c:	b410      	push	{r4}
   2555e:	f8bd 4008 	ldrh.w	r4, [sp, #8]
	if (size < MSG_PKTID_ONLY_SIZE) {
   25562:	2a03      	cmp	r2, #3
   25564:	d912      	bls.n	2558c <pack_pkt_id+0x30>
		return -ENOMEM;
	}

	buf[0] = (type << 4) + (reserved & 0x0F);
   25566:	011b      	lsls	r3, r3, #4
   25568:	b2db      	uxtb	r3, r3
   2556a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   2556e:	f002 020f 	and.w	r2, r2, #15
   25572:	4413      	add	r3, r2
   25574:	7003      	strb	r3, [r0, #0]
	buf[1] = PACKET_ID_SIZE;
   25576:	2302      	movs	r3, #2
   25578:	7043      	strb	r3, [r0, #1]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + PACKET_ID_SIZE));
   2557a:	0a23      	lsrs	r3, r4, #8
   2557c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   25580:	8043      	strh	r3, [r0, #2]
	*length = MSG_PKTID_ONLY_SIZE;
   25582:	2304      	movs	r3, #4
   25584:	800b      	strh	r3, [r1, #0]

	return 0;
   25586:	2000      	movs	r0, #0
}
   25588:	bc10      	pop	{r4}
   2558a:	4770      	bx	lr
		return -ENOMEM;
   2558c:	f06f 000b 	mvn.w	r0, #11
   25590:	e7fa      	b.n	25588 <pack_pkt_id+0x2c>

00025592 <pack_zerolen>:
 */
static
int pack_zerolen(u8_t *buf, u16_t *length, u16_t size,
		 enum mqtt_packet pkt_type, u8_t reserved)
{
	if (size < MSG_ZEROLEN_SIZE) {
   25592:	2a01      	cmp	r2, #1
   25594:	d90d      	bls.n	255b2 <pack_zerolen+0x20>
		return -ENOMEM;
	}

	buf[0] = (pkt_type << 4) + (reserved & 0x0F);
   25596:	011b      	lsls	r3, r3, #4
   25598:	b2db      	uxtb	r3, r3
   2559a:	f89d 2000 	ldrb.w	r2, [sp]
   2559e:	f002 020f 	and.w	r2, r2, #15
   255a2:	4413      	add	r3, r2
   255a4:	7003      	strb	r3, [r0, #0]
	buf[1] = 0x00;
   255a6:	2300      	movs	r3, #0
   255a8:	7043      	strb	r3, [r0, #1]
	*length = MSG_ZEROLEN_SIZE;
   255aa:	2202      	movs	r2, #2
   255ac:	800a      	strh	r2, [r1, #0]

	return 0;
   255ae:	4618      	mov	r0, r3
   255b0:	4770      	bx	lr
		return -ENOMEM;
   255b2:	f06f 000b 	mvn.w	r0, #11
}
   255b6:	4770      	bx	lr

000255b8 <unpack_pktid>:
 */
static
int unpack_pktid(u8_t *buf, u16_t length, enum mqtt_packet *type,
		 u8_t *reserved, u16_t *pkt_id)
{
	if (length < MSG_PKTID_ONLY_SIZE) {
   255b8:	2903      	cmp	r1, #3
   255ba:	d911      	bls.n	255e0 <unpack_pktid+0x28>
		return -EINVAL;
	}

	if (buf[1] != PACKET_ID_SIZE) {
   255bc:	7841      	ldrb	r1, [r0, #1]
   255be:	2902      	cmp	r1, #2
   255c0:	d111      	bne.n	255e6 <unpack_pktid+0x2e>
		return -EINVAL;
	}

	*type = buf[0] >> 4;
   255c2:	7801      	ldrb	r1, [r0, #0]
   255c4:	0909      	lsrs	r1, r1, #4
   255c6:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   255c8:	7802      	ldrb	r2, [r0, #0]
   255ca:	f002 020f 	and.w	r2, r2, #15
   255ce:	701a      	strb	r2, [r3, #0]
	*pkt_id = ntohs(*(u16_t *)(buf + 2));
   255d0:	8842      	ldrh	r2, [r0, #2]
   255d2:	0a13      	lsrs	r3, r2, #8
   255d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   255d8:	9a00      	ldr	r2, [sp, #0]
   255da:	8013      	strh	r3, [r2, #0]

	return 0;
   255dc:	2000      	movs	r0, #0
   255de:	4770      	bx	lr
		return -EINVAL;
   255e0:	f06f 0015 	mvn.w	r0, #21
   255e4:	4770      	bx	lr
		return -EINVAL;
   255e6:	f06f 0015 	mvn.w	r0, #21
}
   255ea:	4770      	bx	lr

000255ec <unpack_pktid_validate>:
 * @retval -EINVAL
 */
static
int unpack_pktid_validate(u8_t *buf, u16_t length, u16_t *pkt_id,
			  u8_t expected_type, u8_t expected_reserv)
{
   255ec:	b510      	push	{r4, lr}
   255ee:	b084      	sub	sp, #16
   255f0:	461c      	mov	r4, r3
	enum mqtt_packet type;
	u8_t reserved;
	int rc;

	rc = unpack_pktid(buf, length, &type, &reserved, pkt_id);
   255f2:	9200      	str	r2, [sp, #0]
   255f4:	f10d 030e 	add.w	r3, sp, #14
   255f8:	f10d 020f 	add.w	r2, sp, #15
   255fc:	f7ff ffdc 	bl	255b8 <unpack_pktid>
	if (rc != 0) {
   25600:	4603      	mov	r3, r0
   25602:	b948      	cbnz	r0, 25618 <unpack_pktid_validate+0x2c>
		return rc;
	}

	if (type != expected_type || reserved != expected_reserv) {
   25604:	f89d 200f 	ldrb.w	r2, [sp, #15]
   25608:	42a2      	cmp	r2, r4
   2560a:	d10b      	bne.n	25624 <unpack_pktid_validate+0x38>
   2560c:	f89d 100e 	ldrb.w	r1, [sp, #14]
   25610:	f89d 2018 	ldrb.w	r2, [sp, #24]
   25614:	4291      	cmp	r1, r2
   25616:	d102      	bne.n	2561e <unpack_pktid_validate+0x32>
		return -EINVAL;
	}

	return 0;
}
   25618:	4618      	mov	r0, r3
   2561a:	b004      	add	sp, #16
   2561c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2561e:	f06f 0315 	mvn.w	r3, #21
   25622:	e7f9      	b.n	25618 <unpack_pktid_validate+0x2c>
   25624:	f06f 0315 	mvn.w	r3, #21
   25628:	e7f6      	b.n	25618 <unpack_pktid_validate+0x2c>

0002562a <unpack_zerolen>:
 */
static
int unpack_zerolen(u8_t *buf, u16_t length, enum mqtt_packet *pkt_type,
		   u8_t *reserved)
{
	if (length < MSG_ZEROLEN_SIZE) {
   2562a:	2901      	cmp	r1, #1
   2562c:	d90d      	bls.n	2564a <unpack_zerolen+0x20>
		return -EINVAL;
	}

	*pkt_type = buf[0] >> 4;
   2562e:	7801      	ldrb	r1, [r0, #0]
   25630:	0909      	lsrs	r1, r1, #4
   25632:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   25634:	7802      	ldrb	r2, [r0, #0]
   25636:	f002 020f 	and.w	r2, r2, #15
   2563a:	701a      	strb	r2, [r3, #0]

	if (buf[1] != 0) {
   2563c:	7843      	ldrb	r3, [r0, #1]
   2563e:	b90b      	cbnz	r3, 25644 <unpack_zerolen+0x1a>
		return -EINVAL;
	}

	return 0;
   25640:	2000      	movs	r0, #0
}
   25642:	4770      	bx	lr
		return -EINVAL;
   25644:	f06f 0015 	mvn.w	r0, #21
   25648:	4770      	bx	lr
		return -EINVAL;
   2564a:	f06f 0015 	mvn.w	r0, #21
   2564e:	4770      	bx	lr

00025650 <unpack_zerolen_validate>:
 */
static
int unpack_zerolen_validate(u8_t *buf, u16_t length,
			    enum mqtt_packet expected_type,
			    u8_t expected_reserved)
{
   25650:	b530      	push	{r4, r5, lr}
   25652:	b083      	sub	sp, #12
   25654:	4614      	mov	r4, r2
   25656:	461d      	mov	r5, r3
	enum mqtt_packet pkt_type;
	u8_t reserved;
	int rc;

	rc = unpack_zerolen(buf, length, &pkt_type, &reserved);
   25658:	f10d 0306 	add.w	r3, sp, #6
   2565c:	f10d 0207 	add.w	r2, sp, #7
   25660:	f7ff ffe3 	bl	2562a <unpack_zerolen>
	if (rc != 0) {
   25664:	4603      	mov	r3, r0
   25666:	b938      	cbnz	r0, 25678 <unpack_zerolen_validate+0x28>
		return rc;
	}

	if (pkt_type != expected_type || reserved != expected_reserved) {
   25668:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2566c:	42a2      	cmp	r2, r4
   2566e:	d109      	bne.n	25684 <unpack_zerolen_validate+0x34>
   25670:	f89d 2006 	ldrb.w	r2, [sp, #6]
   25674:	42aa      	cmp	r2, r5
   25676:	d102      	bne.n	2567e <unpack_zerolen_validate+0x2e>
		return -EINVAL;
	}

	return 0;
}
   25678:	4618      	mov	r0, r3
   2567a:	b003      	add	sp, #12
   2567c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2567e:	f06f 0315 	mvn.w	r3, #21
   25682:	e7f9      	b.n	25678 <unpack_zerolen_validate+0x28>
   25684:	f06f 0315 	mvn.w	r3, #21
   25688:	e7f6      	b.n	25678 <unpack_zerolen_validate+0x28>

0002568a <mqtt_pack_puback>:
{
   2568a:	b500      	push	{lr}
   2568c:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBACK, 0, pkt_id);
   2568e:	9301      	str	r3, [sp, #4]
   25690:	2300      	movs	r3, #0
   25692:	9300      	str	r3, [sp, #0]
   25694:	2304      	movs	r3, #4
   25696:	f7ff ff61 	bl	2555c <pack_pkt_id>
}
   2569a:	b003      	add	sp, #12
   2569c:	f85d fb04 	ldr.w	pc, [sp], #4

000256a0 <mqtt_pack_pubrec>:
{
   256a0:	b500      	push	{lr}
   256a2:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREC, 0, pkt_id);
   256a4:	9301      	str	r3, [sp, #4]
   256a6:	2300      	movs	r3, #0
   256a8:	9300      	str	r3, [sp, #0]
   256aa:	2305      	movs	r3, #5
   256ac:	f7ff ff56 	bl	2555c <pack_pkt_id>
}
   256b0:	b003      	add	sp, #12
   256b2:	f85d fb04 	ldr.w	pc, [sp], #4

000256b6 <mqtt_pack_pubrel>:
{
   256b6:	b500      	push	{lr}
   256b8:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREL, PUBREL_RESERVED,
   256ba:	9301      	str	r3, [sp, #4]
   256bc:	2302      	movs	r3, #2
   256be:	9300      	str	r3, [sp, #0]
   256c0:	2306      	movs	r3, #6
   256c2:	f7ff ff4b 	bl	2555c <pack_pkt_id>
}
   256c6:	b003      	add	sp, #12
   256c8:	f85d fb04 	ldr.w	pc, [sp], #4

000256cc <mqtt_pack_pubcomp>:
{
   256cc:	b500      	push	{lr}
   256ce:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBCOMP, 0, pkt_id);
   256d0:	9301      	str	r3, [sp, #4]
   256d2:	2300      	movs	r3, #0
   256d4:	9300      	str	r3, [sp, #0]
   256d6:	2307      	movs	r3, #7
   256d8:	f7ff ff40 	bl	2555c <pack_pkt_id>
}
   256dc:	b003      	add	sp, #12
   256de:	f85d fb04 	ldr.w	pc, [sp], #4

000256e2 <mqtt_pack_connect>:
{
   256e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   256e6:	b082      	sub	sp, #8
   256e8:	4605      	mov	r5, r0
   256ea:	460e      	mov	r6, r1
   256ec:	4617      	mov	r7, r2
   256ee:	461c      	mov	r4, r3
	pkt_size += msg->client_id_len;
   256f0:	891b      	ldrh	r3, [r3, #8]
   256f2:	1c99      	adds	r1, r3, #2
   256f4:	b289      	uxth	r1, r1
	if (msg->will_flag) {
   256f6:	7aa2      	ldrb	r2, [r4, #10]
   256f8:	f012 0f01 	tst.w	r2, #1
   256fc:	d009      	beq.n	25712 <mqtt_pack_connect+0x30>
		pkt_size += INT_SIZE;
   256fe:	1d19      	adds	r1, r3, #4
		pkt_size += msg->will_topic_len;
   25700:	8aa3      	ldrh	r3, [r4, #20]
   25702:	fa13 f181 	uxtah	r1, r3, r1
   25706:	b289      	uxth	r1, r1
		pkt_size += INT_SIZE;
   25708:	3102      	adds	r1, #2
		pkt_size += msg->will_msg_len;
   2570a:	8ba3      	ldrh	r3, [r4, #28]
   2570c:	fa13 f181 	uxtah	r1, r3, r1
   25710:	b289      	uxth	r1, r1
	if (msg->user_name) {
   25712:	6a23      	ldr	r3, [r4, #32]
   25714:	b123      	cbz	r3, 25720 <mqtt_pack_connect+0x3e>
		pkt_size += INT_SIZE;
   25716:	3102      	adds	r1, #2
		pkt_size += msg->user_name_len;
   25718:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   2571a:	fa13 f181 	uxtah	r1, r3, r1
   2571e:	b289      	uxth	r1, r1
	if (msg->password) {
   25720:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25722:	b123      	cbz	r3, 2572e <mqtt_pack_connect+0x4c>
		pkt_size += INT_SIZE;
   25724:	3102      	adds	r1, #2
		pkt_size += msg->password_len;
   25726:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   25728:	fa13 f181 	uxtah	r1, r3, r1
   2572c:	b289      	uxth	r1, r1
	pkt_size += CONNECT_VARIABLE_HDR_SIZE;
   2572e:	310a      	adds	r1, #10
   25730:	fa1f fa81 	uxth.w	sl, r1
	rc = compute_rlen_size(&rlen_size, pkt_size);
   25734:	4651      	mov	r1, sl
   25736:	f10d 0006 	add.w	r0, sp, #6
   2573a:	f7ff feba 	bl	254b2 <compute_rlen_size>
	if (rc != 0) {
   2573e:	4681      	mov	r9, r0
   25740:	2800      	cmp	r0, #0
   25742:	f040 80b6 	bne.w	258b2 <mqtt_pack_connect+0x1d0>
	total_buf_size = PACKET_TYPE_SIZE + rlen_size + pkt_size;
   25746:	f8bd 8006 	ldrh.w	r8, [sp, #6]
   2574a:	44d0      	add	r8, sl
   2574c:	fa1f f888 	uxth.w	r8, r8
   25750:	f108 0801 	add.w	r8, r8, #1
   25754:	fa1f f888 	uxth.w	r8, r8
	if (total_buf_size > size) {
   25758:	45b8      	cmp	r8, r7
   2575a:	f200 80ad 	bhi.w	258b8 <mqtt_pack_connect+0x1d6>
	buf[0] = MQTT_CONNECT << 4;
   2575e:	4628      	mov	r0, r5
   25760:	2310      	movs	r3, #16
   25762:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, pkt_size);
   25766:	4651      	mov	r1, sl
   25768:	f7ff fec7 	bl	254fa <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   2576c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   25770:	1c43      	adds	r3, r0, #1
   25772:	b29b      	uxth	r3, r3
	buf[offset + 0] = 0x00;
   25774:	2200      	movs	r2, #0
   25776:	54ea      	strb	r2, [r5, r3]
	buf[offset + 1] = 0x04;
   25778:	1c59      	adds	r1, r3, #1
   2577a:	2204      	movs	r2, #4
   2577c:	546a      	strb	r2, [r5, r1]
	buf[offset + 2] = 'M';
   2577e:	1c99      	adds	r1, r3, #2
   25780:	274d      	movs	r7, #77	; 0x4d
   25782:	546f      	strb	r7, [r5, r1]
	buf[offset + 3] = 'Q';
   25784:	1cd9      	adds	r1, r3, #3
   25786:	2751      	movs	r7, #81	; 0x51
   25788:	546f      	strb	r7, [r5, r1]
	buf[offset + 4] = 'T';
   2578a:	189f      	adds	r7, r3, r2
   2578c:	2154      	movs	r1, #84	; 0x54
   2578e:	55e9      	strb	r1, [r5, r7]
	buf[offset + 5] = 'T';
   25790:	1d5f      	adds	r7, r3, #5
   25792:	55e9      	strb	r1, [r5, r7]
	buf[offset + 6] = 0x04;
   25794:	1d99      	adds	r1, r3, #6
   25796:	546a      	strb	r2, [r5, r1]
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   25798:	1ddf      	adds	r7, r3, #7
   2579a:	6a22      	ldr	r2, [r4, #32]
   2579c:	2a00      	cmp	r2, #0
   2579e:	d05f      	beq.n	25860 <mqtt_pack_connect+0x17e>
   257a0:	f06f 017f 	mvn.w	r1, #127	; 0x7f
			  (msg->password_len ? 1 << 6 : 0) |
   257a4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   257a6:	2a00      	cmp	r2, #0
   257a8:	d05c      	beq.n	25864 <mqtt_pack_connect+0x182>
   257aa:	2240      	movs	r2, #64	; 0x40
   257ac:	4311      	orrs	r1, r2
			  (msg->will_retain ? 1 << 5 : 0) |
   257ae:	7b22      	ldrb	r2, [r4, #12]
			  (msg->password_len ? 1 << 6 : 0) |
   257b0:	f012 0f01 	tst.w	r2, #1
   257b4:	d058      	beq.n	25868 <mqtt_pack_connect+0x186>
   257b6:	2220      	movs	r2, #32
   257b8:	4311      	orrs	r1, r2
			  ((msg->will_qos & 0x03) << 3) |
   257ba:	7ae2      	ldrb	r2, [r4, #11]
   257bc:	00d2      	lsls	r2, r2, #3
   257be:	f002 0218 	and.w	r2, r2, #24
			  (msg->will_retain ? 1 << 5 : 0) |
   257c2:	430a      	orrs	r2, r1
			  (msg->will_flag ? 1 << 2 : 0) |
   257c4:	7aa1      	ldrb	r1, [r4, #10]
			  ((msg->will_qos & 0x03) << 3) |
   257c6:	f011 0f01 	tst.w	r1, #1
   257ca:	d04f      	beq.n	2586c <mqtt_pack_connect+0x18a>
   257cc:	2104      	movs	r1, #4
   257ce:	4311      	orrs	r1, r2
			  (msg->clean_session ? 1 << 1 : 0);
   257d0:	7822      	ldrb	r2, [r4, #0]
			  (msg->will_flag ? 1 << 2 : 0) |
   257d2:	f012 0f01 	tst.w	r2, #1
   257d6:	d04b      	beq.n	25870 <mqtt_pack_connect+0x18e>
   257d8:	2202      	movs	r2, #2
   257da:	430a      	orrs	r2, r1
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   257dc:	55ea      	strb	r2, [r5, r7]
	UNALIGNED_PUT(htons(msg->keep_alive), (u16_t *)(buf + offset + 8));
   257de:	3308      	adds	r3, #8
   257e0:	8be1      	ldrh	r1, [r4, #30]
   257e2:	0a0a      	lsrs	r2, r1, #8
   257e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   257e8:	52ea      	strh	r2, [r5, r3]
	offset += 8 + INT_SIZE;
   257ea:	f100 030b 	add.w	r3, r0, #11
   257ee:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->client_id_len),
   257f0:	8921      	ldrh	r1, [r4, #8]
   257f2:	0a0a      	lsrs	r2, r1, #8
   257f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   257f8:	52ea      	strh	r2, [r5, r3]
	offset += INT_SIZE;
   257fa:	300d      	adds	r0, #13
   257fc:	b287      	uxth	r7, r0
	memcpy(buf + offset, msg->client_id, msg->client_id_len);
   257fe:	8922      	ldrh	r2, [r4, #8]
   25800:	6861      	ldr	r1, [r4, #4]
   25802:	19e8      	adds	r0, r5, r7
   25804:	f7da fd5c 	bl	2c0 <memcpy>
	offset += msg->client_id_len;
   25808:	8920      	ldrh	r0, [r4, #8]
   2580a:	4438      	add	r0, r7
   2580c:	b280      	uxth	r0, r0
	if (msg->will_flag) {
   2580e:	7aa3      	ldrb	r3, [r4, #10]
   25810:	f013 0f01 	tst.w	r3, #1
   25814:	d12e      	bne.n	25874 <mqtt_pack_connect+0x192>
	if (msg->user_name) {
   25816:	6a23      	ldr	r3, [r4, #32]
   25818:	b173      	cbz	r3, 25838 <mqtt_pack_connect+0x156>
		UNALIGNED_PUT(htons(msg->user_name_len),
   2581a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   2581c:	0a13      	lsrs	r3, r2, #8
   2581e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25822:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   25824:	3002      	adds	r0, #2
   25826:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->user_name, msg->user_name_len);
   25828:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   2582a:	6a21      	ldr	r1, [r4, #32]
   2582c:	19e8      	adds	r0, r5, r7
   2582e:	f7da fd47 	bl	2c0 <memcpy>
		offset += msg->user_name_len;
   25832:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
   25834:	4438      	add	r0, r7
   25836:	b280      	uxth	r0, r0
	if (msg->password) {
   25838:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2583a:	b15b      	cbz	r3, 25854 <mqtt_pack_connect+0x172>
		UNALIGNED_PUT(htons(msg->password_len),
   2583c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   2583e:	0a13      	lsrs	r3, r2, #8
   25840:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25844:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   25846:	3002      	adds	r0, #2
		memcpy(buf + offset, msg->password, msg->password_len);
   25848:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   2584a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2584c:	fa15 f080 	uxtah	r0, r5, r0
   25850:	f7da fd36 	bl	2c0 <memcpy>
	*length = total_buf_size;
   25854:	f8a6 8000 	strh.w	r8, [r6]
}
   25858:	4648      	mov	r0, r9
   2585a:	b002      	add	sp, #8
   2585c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   25860:	2100      	movs	r1, #0
   25862:	e79f      	b.n	257a4 <mqtt_pack_connect+0xc2>
   25864:	2200      	movs	r2, #0
   25866:	e7a1      	b.n	257ac <mqtt_pack_connect+0xca>
			  (msg->password_len ? 1 << 6 : 0) |
   25868:	2200      	movs	r2, #0
   2586a:	e7a5      	b.n	257b8 <mqtt_pack_connect+0xd6>
			  ((msg->will_qos & 0x03) << 3) |
   2586c:	2100      	movs	r1, #0
   2586e:	e7ae      	b.n	257ce <mqtt_pack_connect+0xec>
			  (msg->will_flag ? 1 << 2 : 0) |
   25870:	2200      	movs	r2, #0
   25872:	e7b2      	b.n	257da <mqtt_pack_connect+0xf8>
		UNALIGNED_PUT(htons(msg->will_topic_len),
   25874:	8aa2      	ldrh	r2, [r4, #20]
   25876:	0a13      	lsrs	r3, r2, #8
   25878:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2587c:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   2587e:	3002      	adds	r0, #2
   25880:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->will_topic,
   25882:	8aa2      	ldrh	r2, [r4, #20]
   25884:	6921      	ldr	r1, [r4, #16]
   25886:	19e8      	adds	r0, r5, r7
   25888:	f7da fd1a 	bl	2c0 <memcpy>
		offset += msg->will_topic_len;
   2588c:	8aa0      	ldrh	r0, [r4, #20]
   2588e:	4407      	add	r7, r0
   25890:	b2bf      	uxth	r7, r7
		UNALIGNED_PUT(htons(msg->will_msg_len),
   25892:	8ba2      	ldrh	r2, [r4, #28]
   25894:	0a13      	lsrs	r3, r2, #8
   25896:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2589a:	53eb      	strh	r3, [r5, r7]
		offset += INT_SIZE;
   2589c:	3702      	adds	r7, #2
   2589e:	b2bf      	uxth	r7, r7
		memcpy(buf + offset, msg->will_msg, msg->will_msg_len);
   258a0:	8ba2      	ldrh	r2, [r4, #28]
   258a2:	69a1      	ldr	r1, [r4, #24]
   258a4:	19e8      	adds	r0, r5, r7
   258a6:	f7da fd0b 	bl	2c0 <memcpy>
		offset += msg->will_msg_len;
   258aa:	8ba0      	ldrh	r0, [r4, #28]
   258ac:	4438      	add	r0, r7
   258ae:	b280      	uxth	r0, r0
   258b0:	e7b1      	b.n	25816 <mqtt_pack_connect+0x134>
		return -EINVAL;
   258b2:	f06f 0915 	mvn.w	r9, #21
   258b6:	e7cf      	b.n	25858 <mqtt_pack_connect+0x176>
		return -ENOMEM;
   258b8:	f06f 090b 	mvn.w	r9, #11
   258bc:	e7cc      	b.n	25858 <mqtt_pack_connect+0x176>
	...

000258c0 <mqtt_unpack_suback>:
{
   258c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   258c4:	b087      	sub	sp, #28
   258c6:	461d      	mov	r5, r3
   258c8:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   258cc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	*pkt_id = 0;
   258ce:	2300      	movs	r3, #0
   258d0:	8013      	strh	r3, [r2, #0]
	*items = 0;
   258d2:	702b      	strb	r3, [r5, #0]
	if (elements <= 0) {
   258d4:	2f00      	cmp	r7, #0
   258d6:	d037      	beq.n	25948 <mqtt_unpack_suback+0x88>
   258d8:	4604      	mov	r4, r0
   258da:	4689      	mov	r9, r1
   258dc:	4690      	mov	r8, r2
	if ((buf[0] & 0xF0) != (MQTT_SUBACK << 4)) {
   258de:	7803      	ldrb	r3, [r0, #0]
   258e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
   258e4:	2a90      	cmp	r2, #144	; 0x90
   258e6:	d138      	bne.n	2595a <mqtt_unpack_suback+0x9a>
	rc = rlen_decode(&rlen, &rlen_size, buf + PACKET_TYPE_SIZE,
   258e8:	1e4b      	subs	r3, r1, #1
   258ea:	b29b      	uxth	r3, r3
   258ec:	1c42      	adds	r2, r0, #1
   258ee:	f10d 0116 	add.w	r1, sp, #22
   258f2:	a804      	add	r0, sp, #16
   258f4:	f7ff fe13 	bl	2551e <rlen_decode>
	if (rc != 0) {
   258f8:	4603      	mov	r3, r0
   258fa:	2800      	cmp	r0, #0
   258fc:	d136      	bne.n	2596c <mqtt_unpack_suback+0xac>
	if (PACKET_TYPE_SIZE + rlen + rlen_size > length) {
   258fe:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   25902:	9804      	ldr	r0, [sp, #16]
   25904:	180a      	adds	r2, r1, r0
   25906:	3201      	adds	r2, #1
   25908:	454a      	cmp	r2, r9
   2590a:	d838      	bhi.n	2597e <mqtt_unpack_suback+0xbe>
	offset = PACKET_TYPE_SIZE + rlen_size;
   2590c:	1c4a      	adds	r2, r1, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   2590e:	fa14 f282 	uxtah	r2, r4, r2
   25912:	8810      	ldrh	r0, [r2, #0]
	*pkt_id = ntohs(val_u16);
   25914:	0a02      	lsrs	r2, r0, #8
   25916:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   2591a:	f8a8 2000 	strh.w	r2, [r8]
	offset += PACKET_ID_SIZE;
   2591e:	3103      	adds	r1, #3
   25920:	b289      	uxth	r1, r1
	*items = rlen - PACKET_ID_SIZE;
   25922:	9a04      	ldr	r2, [sp, #16]
   25924:	3a02      	subs	r2, #2
   25926:	b2d2      	uxtb	r2, r2
   25928:	702a      	strb	r2, [r5, #0]
	if (*items > elements) {
   2592a:	4297      	cmp	r7, r2
   2592c:	d335      	bcc.n	2599a <mqtt_unpack_suback+0xda>
   2592e:	2200      	movs	r2, #0
	for (i = 0; i < *items; i++) {
   25930:	7828      	ldrb	r0, [r5, #0]
   25932:	4282      	cmp	r2, r0
   25934:	d242      	bcs.n	259bc <mqtt_unpack_suback+0xfc>
		qos = *(buf + offset);
   25936:	5c60      	ldrb	r0, [r4, r1]
		if (qos < MQTT_QoS0 || qos > MQTT_QoS2) {
   25938:	2802      	cmp	r0, #2
   2593a:	d837      	bhi.n	259ac <mqtt_unpack_suback+0xec>
		granted_qos[i] = qos;
   2593c:	54b0      	strb	r0, [r6, r2]
		offset += QoS_SIZE;
   2593e:	3101      	adds	r1, #1
   25940:	b289      	uxth	r1, r1
	for (i = 0; i < *items; i++) {
   25942:	3201      	adds	r2, #1
   25944:	b2d2      	uxtb	r2, r2
   25946:	e7f3      	b.n	25930 <mqtt_unpack_suback+0x70>
		printk("[%s:%d] elements <= 0\n", __func__, __LINE__);
   25948:	f240 321a 	movw	r2, #794	; 0x31a
   2594c:	491d      	ldr	r1, [pc, #116]	; (259c4 <mqtt_unpack_suback+0x104>)
   2594e:	481e      	ldr	r0, [pc, #120]	; (259c8 <mqtt_unpack_suback+0x108>)
   25950:	f7dd fad0 	bl	2ef4 <printk>
		return -EINVAL;
   25954:	f06f 0315 	mvn.w	r3, #21
   25958:	e030      	b.n	259bc <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] buf[0](%x) != MQTT_SUBACK << 4\n", __func__, __LINE__, buf[0]);
   2595a:	f240 321f 	movw	r2, #799	; 0x31f
   2595e:	4919      	ldr	r1, [pc, #100]	; (259c4 <mqtt_unpack_suback+0x104>)
   25960:	481a      	ldr	r0, [pc, #104]	; (259cc <mqtt_unpack_suback+0x10c>)
   25962:	f7dd fac7 	bl	2ef4 <printk>
		return -EINVAL;
   25966:	f06f 0315 	mvn.w	r3, #21
   2596a:	e027      	b.n	259bc <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] rlen_decode returned %d\n", __func__, __LINE__, rc);
   2596c:	f240 3226 	movw	r2, #806	; 0x326
   25970:	4914      	ldr	r1, [pc, #80]	; (259c4 <mqtt_unpack_suback+0x104>)
   25972:	4817      	ldr	r0, [pc, #92]	; (259d0 <mqtt_unpack_suback+0x110>)
   25974:	f7dd fabe 	bl	2ef4 <printk>
		return -EINVAL;
   25978:	f06f 0315 	mvn.w	r3, #21
   2597c:	e01e      	b.n	259bc <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] PACKET_TYPE_SIZE(%d) + rlen(%d) + rlen_size(%d) > length(%d)\n"
   2597e:	f8cd 9008 	str.w	r9, [sp, #8]
   25982:	9101      	str	r1, [sp, #4]
   25984:	9000      	str	r0, [sp, #0]
   25986:	2301      	movs	r3, #1
   25988:	f240 322d 	movw	r2, #813	; 0x32d
   2598c:	490d      	ldr	r1, [pc, #52]	; (259c4 <mqtt_unpack_suback+0x104>)
   2598e:	4811      	ldr	r0, [pc, #68]	; (259d4 <mqtt_unpack_suback+0x114>)
   25990:	f7dd fab0 	bl	2ef4 <printk>
		return -EINVAL;
   25994:	f06f 0315 	mvn.w	r3, #21
   25998:	e010      	b.n	259bc <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] not enough space to store elements\n", __func__, __LINE__);
   2599a:	f240 323b 	movw	r2, #827	; 0x33b
   2599e:	4909      	ldr	r1, [pc, #36]	; (259c4 <mqtt_unpack_suback+0x104>)
   259a0:	480d      	ldr	r0, [pc, #52]	; (259d8 <mqtt_unpack_suback+0x118>)
   259a2:	f7dd faa7 	bl	2ef4 <printk>
		return -EINVAL;
   259a6:	f06f 0315 	mvn.w	r3, #21
   259aa:	e007      	b.n	259bc <mqtt_unpack_suback+0xfc>
			printk("[%s:%d] invalid qos\n", __func__, __LINE__);
   259ac:	f240 3242 	movw	r2, #834	; 0x342
   259b0:	4904      	ldr	r1, [pc, #16]	; (259c4 <mqtt_unpack_suback+0x104>)
   259b2:	480a      	ldr	r0, [pc, #40]	; (259dc <mqtt_unpack_suback+0x11c>)
   259b4:	f7dd fa9e 	bl	2ef4 <printk>
			return -EINVAL;
   259b8:	f06f 0315 	mvn.w	r3, #21
}
   259bc:	4618      	mov	r0, r3
   259be:	b007      	add	sp, #28
   259c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   259c4:	00032270 	.word	0x00032270
   259c8:	00032284 	.word	0x00032284
   259cc:	0003229c 	.word	0x0003229c
   259d0:	000322c4 	.word	0x000322c4
   259d4:	000322e8 	.word	0x000322e8
   259d8:	00032330 	.word	0x00032330
   259dc:	0003235c 	.word	0x0003235c

000259e0 <mqtt_pack_publish>:
{
   259e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   259e4:	b083      	sub	sp, #12
	if (msg->qos < MQTT_QoS0 || msg->qos > MQTT_QoS2) {
   259e6:	785c      	ldrb	r4, [r3, #1]
   259e8:	2c02      	cmp	r4, #2
   259ea:	d860      	bhi.n	25aae <mqtt_pack_publish+0xce>
	payload = INT_SIZE + msg->topic_len +
   259ec:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
   259f0:	2c00      	cmp	r4, #0
   259f2:	d057      	beq.n	25aa4 <mqtt_pack_publish+0xc4>
   259f4:	f04f 0e02 	mov.w	lr, #2
   259f8:	461c      	mov	r4, r3
   259fa:	4615      	mov	r5, r2
   259fc:	460f      	mov	r7, r1
   259fe:	4606      	mov	r6, r0
   25a00:	eb0e 030c 	add.w	r3, lr, ip
		  (msg->qos > MQTT_QoS0 ? PACKET_ID_SIZE : 0) + msg->msg_len;
   25a04:	8aa2      	ldrh	r2, [r4, #20]
   25a06:	fa12 f383 	uxtah	r3, r2, r3
   25a0a:	b29b      	uxth	r3, r3
	payload = INT_SIZE + msg->topic_len +
   25a0c:	3302      	adds	r3, #2
   25a0e:	fa1f f983 	uxth.w	r9, r3
	rc = compute_rlen_size(&rlen_size, payload);
   25a12:	4649      	mov	r1, r9
   25a14:	f10d 0006 	add.w	r0, sp, #6
   25a18:	f7ff fd4b 	bl	254b2 <compute_rlen_size>
	if (rc != 0) {
   25a1c:	4680      	mov	r8, r0
   25a1e:	2800      	cmp	r0, #0
   25a20:	d148      	bne.n	25ab4 <mqtt_pack_publish+0xd4>
	if (PACKET_TYPE_SIZE + rlen_size + payload > size) {
   25a22:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   25a26:	3301      	adds	r3, #1
   25a28:	444b      	add	r3, r9
   25a2a:	42ab      	cmp	r3, r5
   25a2c:	dc45      	bgt.n	25aba <mqtt_pack_publish+0xda>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25a2e:	7823      	ldrb	r3, [r4, #0]
   25a30:	2b00      	cmp	r3, #0
   25a32:	d03a      	beq.n	25aaa <mqtt_pack_publish+0xca>
   25a34:	2338      	movs	r3, #56	; 0x38
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   25a36:	7862      	ldrb	r2, [r4, #1]
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25a38:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   25a3c:	b25b      	sxtb	r3, r3
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   25a3e:	78a2      	ldrb	r2, [r4, #2]
   25a40:	2a00      	cmp	r2, #0
   25a42:	bf18      	it	ne
   25a44:	f043 0301 	orrne.w	r3, r3, #1
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25a48:	4630      	mov	r0, r6
   25a4a:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, payload);
   25a4e:	4649      	mov	r1, r9
   25a50:	f7ff fd53 	bl	254fa <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   25a54:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   25a58:	1c6b      	adds	r3, r5, #1
   25a5a:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->topic_len), (u16_t *)(buf + offset));
   25a5c:	89a1      	ldrh	r1, [r4, #12]
   25a5e:	0a0a      	lsrs	r2, r1, #8
   25a60:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   25a64:	52f2      	strh	r2, [r6, r3]
	offset += INT_SIZE;
   25a66:	3503      	adds	r5, #3
   25a68:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->topic, msg->topic_len);
   25a6a:	89a2      	ldrh	r2, [r4, #12]
   25a6c:	68a1      	ldr	r1, [r4, #8]
   25a6e:	1970      	adds	r0, r6, r5
   25a70:	f7da fc26 	bl	2c0 <memcpy>
	offset += msg->topic_len;
   25a74:	89a3      	ldrh	r3, [r4, #12]
   25a76:	441d      	add	r5, r3
   25a78:	b2ad      	uxth	r5, r5
	if (msg->qos > MQTT_QoS0) {
   25a7a:	7863      	ldrb	r3, [r4, #1]
   25a7c:	b133      	cbz	r3, 25a8c <mqtt_pack_publish+0xac>
		UNALIGNED_PUT(htons(msg->pkt_id), (u16_t *)(buf + offset));
   25a7e:	88a2      	ldrh	r2, [r4, #4]
   25a80:	0a13      	lsrs	r3, r2, #8
   25a82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25a86:	5373      	strh	r3, [r6, r5]
		offset += PACKET_ID_SIZE;
   25a88:	3502      	adds	r5, #2
   25a8a:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->msg, msg->msg_len);
   25a8c:	8aa2      	ldrh	r2, [r4, #20]
   25a8e:	6921      	ldr	r1, [r4, #16]
   25a90:	1970      	adds	r0, r6, r5
   25a92:	f7da fc15 	bl	2c0 <memcpy>
	offset += msg->msg_len;
   25a96:	8aa3      	ldrh	r3, [r4, #20]
   25a98:	441d      	add	r5, r3
	*length = offset;
   25a9a:	803d      	strh	r5, [r7, #0]
}
   25a9c:	4640      	mov	r0, r8
   25a9e:	b003      	add	sp, #12
   25aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	payload = INT_SIZE + msg->topic_len +
   25aa4:	f04f 0e00 	mov.w	lr, #0
   25aa8:	e7a6      	b.n	259f8 <mqtt_pack_publish+0x18>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25aaa:	2330      	movs	r3, #48	; 0x30
   25aac:	e7c3      	b.n	25a36 <mqtt_pack_publish+0x56>
		return -EINVAL;
   25aae:	f06f 0815 	mvn.w	r8, #21
   25ab2:	e7f3      	b.n	25a9c <mqtt_pack_publish+0xbc>
		return -EINVAL;
   25ab4:	f06f 0815 	mvn.w	r8, #21
   25ab8:	e7f0      	b.n	25a9c <mqtt_pack_publish+0xbc>
		return -ENOMEM;
   25aba:	f06f 080b 	mvn.w	r8, #11
   25abe:	e7ed      	b.n	25a9c <mqtt_pack_publish+0xbc>

00025ac0 <mqtt_unpack_publish>:
{
   25ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   25ac2:	b083      	sub	sp, #12
	if (buf[0] >> 4 != MQTT_PUBLISH) {
   25ac4:	7807      	ldrb	r7, [r0, #0]
   25ac6:	093b      	lsrs	r3, r7, #4
   25ac8:	2b03      	cmp	r3, #3
   25aca:	d148      	bne.n	25b5e <mqtt_unpack_publish+0x9e>
   25acc:	4615      	mov	r5, r2
   25ace:	460e      	mov	r6, r1
   25ad0:	4604      	mov	r4, r0
	msg->dup = (buf[0] & 0x08) >> 3;
   25ad2:	f3c7 07c0 	ubfx	r7, r7, #3, #1
   25ad6:	7017      	strb	r7, [r2, #0]
	msg->qos = (buf[0] & 0x06) >> 1;
   25ad8:	7803      	ldrb	r3, [r0, #0]
   25ada:	f3c3 0341 	ubfx	r3, r3, #1, #2
   25ade:	7053      	strb	r3, [r2, #1]
	msg->retain = buf[0] & 0x01;
   25ae0:	4602      	mov	r2, r0
   25ae2:	f812 3b01 	ldrb.w	r3, [r2], #1
   25ae6:	f003 0301 	and.w	r3, r3, #1
   25aea:	70ab      	strb	r3, [r5, #2]
	rc = rlen_decode(&rmlen, &rmlen_size, buf + PACKET_TYPE_SIZE,
   25aec:	1e4b      	subs	r3, r1, #1
   25aee:	b29b      	uxth	r3, r3
   25af0:	f10d 0106 	add.w	r1, sp, #6
   25af4:	4668      	mov	r0, sp
   25af6:	f7ff fd12 	bl	2551e <rlen_decode>
	if (rc != 0) {
   25afa:	4607      	mov	r7, r0
   25afc:	2800      	cmp	r0, #0
   25afe:	d131      	bne.n	25b64 <mqtt_unpack_publish+0xa4>
	if ((PACKET_TYPE_SIZE + rmlen_size + rmlen) > length) {
   25b00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   25b04:	9b00      	ldr	r3, [sp, #0]
   25b06:	4413      	add	r3, r2
   25b08:	3301      	adds	r3, #1
   25b0a:	42b3      	cmp	r3, r6
   25b0c:	d82d      	bhi.n	25b6a <mqtt_unpack_publish+0xaa>
	offset = PACKET_TYPE_SIZE + rmlen_size;
   25b0e:	1c53      	adds	r3, r2, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   25b10:	fa14 f383 	uxtah	r3, r4, r3
   25b14:	8819      	ldrh	r1, [r3, #0]
	msg->topic_len = ntohs(val_u16);
   25b16:	0a0b      	lsrs	r3, r1, #8
   25b18:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   25b1c:	b29b      	uxth	r3, r3
   25b1e:	81ab      	strh	r3, [r5, #12]
	offset += INT_SIZE;
   25b20:	3203      	adds	r2, #3
   25b22:	b292      	uxth	r2, r2
	if (offset + msg->topic_len > length) {
   25b24:	18d1      	adds	r1, r2, r3
   25b26:	42b1      	cmp	r1, r6
   25b28:	dc22      	bgt.n	25b70 <mqtt_unpack_publish+0xb0>
	msg->topic = (char *)(buf + offset);
   25b2a:	18a1      	adds	r1, r4, r2
   25b2c:	60a9      	str	r1, [r5, #8]
	offset += msg->topic_len;
   25b2e:	4413      	add	r3, r2
   25b30:	b29b      	uxth	r3, r3
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   25b32:	5ae1      	ldrh	r1, [r4, r3]
	if (msg->qos == MQTT_QoS1 || msg->qos == MQTT_QoS2) {
   25b34:	786a      	ldrb	r2, [r5, #1]
   25b36:	3a01      	subs	r2, #1
   25b38:	b2d2      	uxtb	r2, r2
   25b3a:	2a01      	cmp	r2, #1
   25b3c:	d908      	bls.n	25b50 <mqtt_unpack_publish+0x90>
		msg->pkt_id = 0;
   25b3e:	2200      	movs	r2, #0
   25b40:	80aa      	strh	r2, [r5, #4]
	msg->msg_len = length - offset;
   25b42:	1af6      	subs	r6, r6, r3
   25b44:	82ae      	strh	r6, [r5, #20]
	msg->msg = buf + offset;
   25b46:	4423      	add	r3, r4
   25b48:	612b      	str	r3, [r5, #16]
}
   25b4a:	4638      	mov	r0, r7
   25b4c:	b003      	add	sp, #12
   25b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msg->pkt_id = ntohs(val_u16);
   25b50:	0a0a      	lsrs	r2, r1, #8
   25b52:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   25b56:	80a9      	strh	r1, [r5, #4]
		offset += PACKET_ID_SIZE;
   25b58:	3302      	adds	r3, #2
   25b5a:	b29b      	uxth	r3, r3
   25b5c:	e7f1      	b.n	25b42 <mqtt_unpack_publish+0x82>
		return -EINVAL;
   25b5e:	f06f 0715 	mvn.w	r7, #21
   25b62:	e7f2      	b.n	25b4a <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25b64:	f06f 0715 	mvn.w	r7, #21
   25b68:	e7ef      	b.n	25b4a <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25b6a:	f06f 0715 	mvn.w	r7, #21
   25b6e:	e7ec      	b.n	25b4a <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25b70:	f06f 0715 	mvn.w	r7, #21
   25b74:	e7e9      	b.n	25b4a <mqtt_unpack_publish+0x8a>

00025b76 <mqtt_unpack_connack>:
	if (length < CONNACK_SIZE) {
   25b76:	2903      	cmp	r1, #3
   25b78:	d90d      	bls.n	25b96 <mqtt_unpack_connack+0x20>
	if (buf[0] != (MQTT_CONNACK << 4) || buf[1] != 2) {
   25b7a:	7801      	ldrb	r1, [r0, #0]
   25b7c:	2920      	cmp	r1, #32
   25b7e:	d10d      	bne.n	25b9c <mqtt_unpack_connack+0x26>
   25b80:	7841      	ldrb	r1, [r0, #1]
   25b82:	2902      	cmp	r1, #2
   25b84:	d10d      	bne.n	25ba2 <mqtt_unpack_connack+0x2c>
	if (buf[2] > 1) {
   25b86:	7881      	ldrb	r1, [r0, #2]
   25b88:	2901      	cmp	r1, #1
   25b8a:	d80d      	bhi.n	25ba8 <mqtt_unpack_connack+0x32>
	*session = buf[2];
   25b8c:	7011      	strb	r1, [r2, #0]
	*connect_rc = buf[3];
   25b8e:	78c2      	ldrb	r2, [r0, #3]
   25b90:	701a      	strb	r2, [r3, #0]
	return 0;
   25b92:	2000      	movs	r0, #0
   25b94:	4770      	bx	lr
		return -EINVAL;
   25b96:	f06f 0015 	mvn.w	r0, #21
   25b9a:	4770      	bx	lr
		return -EINVAL;
   25b9c:	f06f 0015 	mvn.w	r0, #21
   25ba0:	4770      	bx	lr
   25ba2:	f06f 0015 	mvn.w	r0, #21
   25ba6:	4770      	bx	lr
		return -EINVAL;
   25ba8:	f06f 0015 	mvn.w	r0, #21
}
   25bac:	4770      	bx	lr

00025bae <mqtt_pack_disconnect>:
{
   25bae:	b500      	push	{lr}
   25bb0:	b083      	sub	sp, #12
	return pack_zerolen(buf, length, size, MQTT_DISCONNECT, 0x00);
   25bb2:	2300      	movs	r3, #0
   25bb4:	9300      	str	r3, [sp, #0]
   25bb6:	230e      	movs	r3, #14
   25bb8:	f7ff fceb 	bl	25592 <pack_zerolen>
}
   25bbc:	b003      	add	sp, #12
   25bbe:	f85d fb04 	ldr.w	pc, [sp], #4

00025bc2 <mqtt_unpack_puback>:
{
   25bc2:	b500      	push	{lr}
   25bc4:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBACK,
   25bc6:	2300      	movs	r3, #0
   25bc8:	9300      	str	r3, [sp, #0]
   25bca:	2304      	movs	r3, #4
   25bcc:	f7ff fd0e 	bl	255ec <unpack_pktid_validate>
}
   25bd0:	b003      	add	sp, #12
   25bd2:	f85d fb04 	ldr.w	pc, [sp], #4

00025bd6 <mqtt_unpack_pubrec>:
{
   25bd6:	b500      	push	{lr}
   25bd8:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREC,
   25bda:	2300      	movs	r3, #0
   25bdc:	9300      	str	r3, [sp, #0]
   25bde:	2305      	movs	r3, #5
   25be0:	f7ff fd04 	bl	255ec <unpack_pktid_validate>
}
   25be4:	b003      	add	sp, #12
   25be6:	f85d fb04 	ldr.w	pc, [sp], #4

00025bea <mqtt_unpack_pubrel>:
{
   25bea:	b500      	push	{lr}
   25bec:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREL,
   25bee:	2302      	movs	r3, #2
   25bf0:	9300      	str	r3, [sp, #0]
   25bf2:	2306      	movs	r3, #6
   25bf4:	f7ff fcfa 	bl	255ec <unpack_pktid_validate>
}
   25bf8:	b003      	add	sp, #12
   25bfa:	f85d fb04 	ldr.w	pc, [sp], #4

00025bfe <mqtt_unpack_pubcomp>:
{
   25bfe:	b500      	push	{lr}
   25c00:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBCOMP,
   25c02:	2300      	movs	r3, #0
   25c04:	9300      	str	r3, [sp, #0]
   25c06:	2307      	movs	r3, #7
   25c08:	f7ff fcf0 	bl	255ec <unpack_pktid_validate>
}
   25c0c:	b003      	add	sp, #12
   25c0e:	f85d fb04 	ldr.w	pc, [sp], #4

00025c12 <mqtt_unpack_pingresp>:
{
	return unpack_zerolen_validate(buf, length, MQTT_PINGREQ, 0x00);
}

int mqtt_unpack_pingresp(u8_t *buf, u16_t length)
{
   25c12:	b508      	push	{r3, lr}
	return unpack_zerolen_validate(buf, length, MQTT_PINGRESP, 0x00);
   25c14:	2300      	movs	r3, #0
   25c16:	220d      	movs	r2, #13
   25c18:	f7ff fd1a 	bl	25650 <unpack_zerolen_validate>
}
   25c1c:	bd08      	pop	{r3, pc}
	...

00025c20 <mqtt_rx_pub_msgs>:
 * @retval -EINVAL on error
 */
static
int mqtt_rx_pub_msgs(struct mqtt_ctx *ctx, struct net_buf *rx,
		     enum mqtt_packet type)
{
   25c20:	b5f0      	push	{r4, r5, r6, r7, lr}
   25c22:	b083      	sub	sp, #12
	u16_t pkt_id;
	u16_t len;
	u8_t *data;
	int rc;

	switch (type) {
   25c24:	1f13      	subs	r3, r2, #4
   25c26:	2b03      	cmp	r3, #3
   25c28:	d840      	bhi.n	25cac <mqtt_rx_pub_msgs+0x8c>
   25c2a:	e8df f003 	tbb	[pc, r3]
   25c2e:	0502      	.short	0x0502
   25c30:	0b08      	.short	0x0b08
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   25c32:	2600      	movs	r6, #0
	case MQTT_PUBACK:
		unpack = mqtt_unpack_puback;
   25c34:	4f22      	ldr	r7, [pc, #136]	; (25cc0 <mqtt_rx_pub_msgs+0xa0>)
   25c36:	e007      	b.n	25c48 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBCOMP:
		unpack = mqtt_unpack_pubcomp;
		break;
	case MQTT_PUBREC:
		unpack = mqtt_unpack_pubrec;
		response = mqtt_tx_pubrel;
   25c38:	4e22      	ldr	r6, [pc, #136]	; (25cc4 <mqtt_rx_pub_msgs+0xa4>)
		unpack = mqtt_unpack_pubrec;
   25c3a:	4f23      	ldr	r7, [pc, #140]	; (25cc8 <mqtt_rx_pub_msgs+0xa8>)
		break;
   25c3c:	e004      	b.n	25c48 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBREL:
		unpack = mqtt_unpack_pubrel;
		response = mqtt_tx_pubcomp;
   25c3e:	4e23      	ldr	r6, [pc, #140]	; (25ccc <mqtt_rx_pub_msgs+0xac>)
		unpack = mqtt_unpack_pubrel;
   25c40:	4f23      	ldr	r7, [pc, #140]	; (25cd0 <mqtt_rx_pub_msgs+0xb0>)
		break;
   25c42:	e001      	b.n	25c48 <mqtt_rx_pub_msgs+0x28>
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   25c44:	2600      	movs	r6, #0
		unpack = mqtt_unpack_pubcomp;
   25c46:	4f23      	ldr	r7, [pc, #140]	; (25cd4 <mqtt_rx_pub_msgs+0xb4>)
   25c48:	4614      	mov	r4, r2
   25c4a:	460b      	mov	r3, r1
   25c4c:	4605      	mov	r5, r0

	data = rx->data;
	len = rx->len;

	/* 4 bytes message */
	rc = unpack(data, len, &pkt_id);
   25c4e:	f10d 0206 	add.w	r2, sp, #6
   25c52:	8989      	ldrh	r1, [r1, #12]
   25c54:	6898      	ldr	r0, [r3, #8]
   25c56:	47b8      	blx	r7
	if (rc != 0) {
   25c58:	bb58      	cbnz	r0, 25cb2 <mqtt_rx_pub_msgs+0x92>
	}

	/* Only MQTT_APP_SUBSCRIBER, MQTT_APP_PUBLISHER_SUBSCRIBER and
	 * MQTT_APP_SERVER apps must receive the MQTT_PUBREL msg.
	 */
	if (type == MQTT_PUBREL) {
   25c5a:	2c06      	cmp	r4, #6
   25c5c:	d012      	beq.n	25c84 <mqtt_rx_pub_msgs+0x64>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
		} else {
			rc = -EINVAL;
		}
	} else {
		rc = ctx->publish_tx(ctx, pkt_id, type);
   25c5e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   25c62:	4622      	mov	r2, r4
   25c64:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   25c68:	4628      	mov	r0, r5
   25c6a:	4798      	blx	r3
   25c6c:	4603      	mov	r3, r0
	}

	if (rc != 0) {
   25c6e:	bb1b      	cbnz	r3, 25cb8 <mqtt_rx_pub_msgs+0x98>
		return -EINVAL;
	}

	if (!response)  {
   25c70:	b12e      	cbz	r6, 25c7e <mqtt_rx_pub_msgs+0x5e>
		return 0;
	}

	rc = response(ctx, pkt_id);
   25c72:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   25c76:	4628      	mov	r0, r5
   25c78:	47b0      	blx	r6
	if (rc != 0) {
   25c7a:	4603      	mov	r3, r0
   25c7c:	b998      	cbnz	r0, 25ca6 <mqtt_rx_pub_msgs+0x86>
		return -EINVAL;
	}

	return 0;
}
   25c7e:	4618      	mov	r0, r3
   25c80:	b003      	add	sp, #12
   25c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctx->app_type != MQTT_APP_PUBLISHER) {
   25c84:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   25c88:	2b01      	cmp	r3, #1
   25c8a:	d009      	beq.n	25ca0 <mqtt_rx_pub_msgs+0x80>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
   25c8c:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
   25c90:	2306      	movs	r3, #6
   25c92:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   25c96:	2100      	movs	r1, #0
   25c98:	4628      	mov	r0, r5
   25c9a:	47a0      	blx	r4
   25c9c:	4603      	mov	r3, r0
   25c9e:	e7e6      	b.n	25c6e <mqtt_rx_pub_msgs+0x4e>
			rc = -EINVAL;
   25ca0:	f06f 0315 	mvn.w	r3, #21
   25ca4:	e7e3      	b.n	25c6e <mqtt_rx_pub_msgs+0x4e>
		return -EINVAL;
   25ca6:	f06f 0315 	mvn.w	r3, #21
   25caa:	e7e8      	b.n	25c7e <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   25cac:	f06f 0315 	mvn.w	r3, #21
   25cb0:	e7e5      	b.n	25c7e <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   25cb2:	f06f 0315 	mvn.w	r3, #21
   25cb6:	e7e2      	b.n	25c7e <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   25cb8:	f06f 0315 	mvn.w	r3, #21
   25cbc:	e7df      	b.n	25c7e <mqtt_rx_pub_msgs+0x5e>
   25cbe:	bf00      	nop
   25cc0:	00025bc3 	.word	0x00025bc3
   25cc4:	00025db7 	.word	0x00025db7
   25cc8:	00025bd7 	.word	0x00025bd7
   25ccc:	00025dad 	.word	0x00025dad
   25cd0:	00025beb 	.word	0x00025beb
   25cd4:	00025bff 	.word	0x00025bff

00025cd8 <app_connected>:
	return rc;
}

static
void app_connected(struct net_app_ctx *ctx, int status, void *data)
{
   25cd8:	4770      	bx	lr

00025cda <app_recv>:
	struct mqtt_ctx *mqtt = (struct mqtt_ctx *)data;

	/* net_app_ctx is already referenced to by the mqtt_ctx struct */
	ARG_UNUSED(ctx);

	if (status || !pkt) {
   25cda:	b96a      	cbnz	r2, 25cf8 <app_recv+0x1e>
   25cdc:	b161      	cbz	r1, 25cf8 <app_recv+0x1e>
{
   25cde:	b510      	push	{r4, lr}
   25ce0:	460c      	mov	r4, r1
	return pkt->appdatalen;
   25ce2:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
		return;
	}

	if (net_pkt_appdatalen(pkt) == 0) {
   25ce4:	b91a      	cbnz	r2, 25cee <app_recv+0x14>
	}

	mqtt->rcv(mqtt, pkt);

lb_exit:
	net_pkt_unref(pkt);
   25ce6:	4620      	mov	r0, r4
   25ce8:	f7f7 fc9b 	bl	1d622 <net_pkt_unref>
   25cec:	bd10      	pop	{r4, pc}
	mqtt->rcv(mqtt, pkt);
   25cee:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   25cf2:	4618      	mov	r0, r3
   25cf4:	4790      	blx	r2
   25cf6:	e7f6      	b.n	25ce6 <app_recv+0xc>
   25cf8:	4770      	bx	lr

00025cfa <mqtt_tx_pub_msgs>:
{
   25cfa:	b570      	push	{r4, r5, r6, lr}
   25cfc:	b084      	sub	sp, #16
   25cfe:	4604      	mov	r4, r0
	switch (pkt_type) {
   25d00:	3a04      	subs	r2, #4
   25d02:	2a03      	cmp	r2, #3
   25d04:	d849      	bhi.n	25d9a <mqtt_tx_pub_msgs+0xa0>
   25d06:	e8df f002 	tbb	[pc, r2]
   25d0a:	2c02      	.short	0x2c02
   25d0c:	2434      	.short	0x2434
		rc = mqtt_pack_puback(msg, &len, sizeof(msg), id);
   25d0e:	460b      	mov	r3, r1
   25d10:	2204      	movs	r2, #4
   25d12:	f10d 010a 	add.w	r1, sp, #10
   25d16:	a803      	add	r0, sp, #12
   25d18:	f7ff fcb7 	bl	2568a <mqtt_pack_puback>
	if (rc != 0) {
   25d1c:	2800      	cmp	r0, #0
   25d1e:	d13f      	bne.n	25da0 <mqtt_tx_pub_msgs+0xa6>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25d20:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   25d22:	2100      	movs	r1, #0
   25d24:	4620      	mov	r0, r4
   25d26:	f000 fe09 	bl	2693c <net_app_get_net_pkt>
	if (tx == NULL) {
   25d2a:	4605      	mov	r5, r0
   25d2c:	2800      	cmp	r0, #0
   25d2e:	d03a      	beq.n	25da6 <mqtt_tx_pub_msgs+0xac>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   25d30:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   25d34:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25d36:	aa03      	add	r2, sp, #12
   25d38:	4631      	mov	r1, r6
   25d3a:	f7f7 fdaa 	bl	1d892 <net_pkt_append>
	if (rc != true) {
   25d3e:	4286      	cmp	r6, r0
   25d40:	d01f      	beq.n	25d82 <mqtt_tx_pub_msgs+0x88>
		rc = -ENOMEM;
   25d42:	f06f 040b 	mvn.w	r4, #11
	net_pkt_unref(tx);
   25d46:	4628      	mov	r0, r5
   25d48:	f7f7 fc6b 	bl	1d622 <net_pkt_unref>
}
   25d4c:	4620      	mov	r0, r4
   25d4e:	b004      	add	sp, #16
   25d50:	bd70      	pop	{r4, r5, r6, pc}
		rc = mqtt_pack_pubcomp(msg, &len, sizeof(msg), id);
   25d52:	460b      	mov	r3, r1
   25d54:	2204      	movs	r2, #4
   25d56:	f10d 010a 	add.w	r1, sp, #10
   25d5a:	a803      	add	r0, sp, #12
   25d5c:	f7ff fcb6 	bl	256cc <mqtt_pack_pubcomp>
		break;
   25d60:	e7dc      	b.n	25d1c <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrec(msg, &len, sizeof(msg), id);
   25d62:	460b      	mov	r3, r1
   25d64:	2204      	movs	r2, #4
   25d66:	f10d 010a 	add.w	r1, sp, #10
   25d6a:	a803      	add	r0, sp, #12
   25d6c:	f7ff fc98 	bl	256a0 <mqtt_pack_pubrec>
		break;
   25d70:	e7d4      	b.n	25d1c <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrel(msg, &len, sizeof(msg), id);
   25d72:	460b      	mov	r3, r1
   25d74:	2204      	movs	r2, #4
   25d76:	f10d 010a 	add.w	r1, sp, #10
   25d7a:	a803      	add	r0, sp, #12
   25d7c:	f7ff fc9b 	bl	256b6 <mqtt_pack_pubrel>
		break;
   25d80:	e7cc      	b.n	25d1c <mqtt_tx_pub_msgs+0x22>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   25d82:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25d84:	2200      	movs	r2, #0
   25d86:	9201      	str	r2, [sp, #4]
   25d88:	9300      	str	r3, [sp, #0]
   25d8a:	4613      	mov	r3, r2
   25d8c:	4629      	mov	r1, r5
   25d8e:	4620      	mov	r0, r4
   25d90:	f000 fd58 	bl	26844 <net_app_send_pkt>
	if (rc < 0) {
   25d94:	1e04      	subs	r4, r0, #0
   25d96:	dad9      	bge.n	25d4c <mqtt_tx_pub_msgs+0x52>
   25d98:	e7d5      	b.n	25d46 <mqtt_tx_pub_msgs+0x4c>
		return -EINVAL;
   25d9a:	f06f 0415 	mvn.w	r4, #21
   25d9e:	e7d5      	b.n	25d4c <mqtt_tx_pub_msgs+0x52>
		return -EINVAL;
   25da0:	f06f 0415 	mvn.w	r4, #21
   25da4:	e7d2      	b.n	25d4c <mqtt_tx_pub_msgs+0x52>
		return -ENOMEM;
   25da6:	f06f 040b 	mvn.w	r4, #11
   25daa:	e7cf      	b.n	25d4c <mqtt_tx_pub_msgs+0x52>

00025dac <mqtt_tx_pubcomp>:
{
   25dac:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBCOMP);
   25dae:	2207      	movs	r2, #7
   25db0:	f7ff ffa3 	bl	25cfa <mqtt_tx_pub_msgs>
}
   25db4:	bd08      	pop	{r3, pc}

00025db6 <mqtt_tx_pubrel>:
{
   25db6:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREL);
   25db8:	2206      	movs	r2, #6
   25dba:	f7ff ff9e 	bl	25cfa <mqtt_tx_pub_msgs>
}
   25dbe:	bd08      	pop	{r3, pc}

00025dc0 <mqtt_linearize_packet>:
{
   25dc0:	b570      	push	{r4, r5, r6, lr}
	return pkt->appdatalen;
   25dc2:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
	if (data_len < min_size || data_len > CONFIG_MQTT_MSG_MAX_SIZE) {
   25dc4:	42aa      	cmp	r2, r5
   25dc6:	d820      	bhi.n	25e0a <mqtt_linearize_packet+0x4a>
   25dc8:	2d80      	cmp	r5, #128	; 0x80
   25dca:	d820      	bhi.n	25e0e <mqtt_linearize_packet+0x4e>
   25dcc:	460c      	mov	r4, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   25dce:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   25dd0:	4810      	ldr	r0, [pc, #64]	; (25e14 <mqtt_linearize_packet+0x54>)
   25dd2:	f7f4 fe49 	bl	1aa68 <net_buf_alloc>
	if (data == NULL) {
   25dd6:	4606      	mov	r6, r0
   25dd8:	b180      	cbz	r0, 25dfc <mqtt_linearize_packet+0x3c>
	return net_buf_frags_len(pkt->frags);
   25dda:	68a1      	ldr	r1, [r4, #8]
   25ddc:	460c      	mov	r4, r1
	size_t bytes = 0;
   25dde:	2200      	movs	r2, #0
   25de0:	e002      	b.n	25de8 <mqtt_linearize_packet+0x28>
		bytes += buf->len;
   25de2:	89a3      	ldrh	r3, [r4, #12]
   25de4:	441a      	add	r2, r3
		buf = buf->frags;
   25de6:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   25de8:	2c00      	cmp	r4, #0
   25dea:	d1fa      	bne.n	25de2 <mqtt_linearize_packet+0x22>
	offset = net_pkt_get_len(rx) - data_len;
   25dec:	b292      	uxth	r2, r2
   25dee:	1b52      	subs	r2, r2, r5
	rc = net_frag_linear_copy(data, rx->frags, offset, data_len);
   25df0:	462b      	mov	r3, r5
   25df2:	b292      	uxth	r2, r2
   25df4:	4630      	mov	r0, r6
   25df6:	f7f7 fcc7 	bl	1d788 <net_frag_linear_copy>
	if (rc != 0) {
   25dfa:	b908      	cbnz	r0, 25e00 <mqtt_linearize_packet+0x40>
}
   25dfc:	4630      	mov	r0, r6
   25dfe:	bd70      	pop	{r4, r5, r6, pc}
	net_pkt_frag_unref(data);
   25e00:	4630      	mov	r0, r6
   25e02:	f7f7 fc08 	bl	1d616 <net_pkt_frag_unref>
	return NULL;
   25e06:	4626      	mov	r6, r4
   25e08:	e7f8      	b.n	25dfc <mqtt_linearize_packet+0x3c>
		return NULL;
   25e0a:	2600      	movs	r6, #0
   25e0c:	e7f6      	b.n	25dfc <mqtt_linearize_packet+0x3c>
   25e0e:	2600      	movs	r6, #0
   25e10:	e7f4      	b.n	25dfc <mqtt_linearize_packet+0x3c>
   25e12:	bf00      	nop
   25e14:	2000d254 	.word	0x2000d254

00025e18 <mqtt_tx_connect>:
{
   25e18:	b570      	push	{r4, r5, r6, lr}
   25e1a:	b082      	sub	sp, #8
   25e1c:	4604      	mov	r4, r0
   25e1e:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   25e20:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   25e22:	481d      	ldr	r0, [pc, #116]	; (25e98 <mqtt_tx_connect+0x80>)
   25e24:	f7f4 fe20 	bl	1aa68 <net_buf_alloc>
	if (data == NULL) {
   25e28:	b398      	cbz	r0, 25e92 <mqtt_tx_connect+0x7a>
   25e2a:	4605      	mov	r5, r0
	ctx->clean_session = msg->clean_session ? 1 : 0;
   25e2c:	7832      	ldrb	r2, [r6, #0]
   25e2e:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   25e32:	f362 0300 	bfi	r3, r2, #0, #1
   25e36:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	rc = mqtt_pack_connect(data->data, &data->len, MSG_SIZE, msg);
   25e3a:	4633      	mov	r3, r6
   25e3c:	2280      	movs	r2, #128	; 0x80
   25e3e:	f100 010c 	add.w	r1, r0, #12
   25e42:	6880      	ldr	r0, [r0, #8]
   25e44:	f7ff fc4d 	bl	256e2 <mqtt_pack_connect>
	if (rc != 0) {
   25e48:	b9c0      	cbnz	r0, 25e7c <mqtt_tx_connect+0x64>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25e4a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   25e4c:	2100      	movs	r1, #0
   25e4e:	4620      	mov	r0, r4
   25e50:	f000 fd74 	bl	2693c <net_app_get_net_pkt>
	if (tx == NULL) {
   25e54:	4606      	mov	r6, r0
   25e56:	b1c8      	cbz	r0, 25e8c <mqtt_tx_connect+0x74>
	net_pkt_frag_add(tx, data);
   25e58:	4629      	mov	r1, r5
   25e5a:	f7f7 fc0c 	bl	1d676 <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   25e5e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25e60:	2200      	movs	r2, #0
   25e62:	9201      	str	r2, [sp, #4]
   25e64:	9300      	str	r3, [sp, #0]
   25e66:	4613      	mov	r3, r2
   25e68:	4631      	mov	r1, r6
   25e6a:	4620      	mov	r0, r4
   25e6c:	f000 fcea 	bl	26844 <net_app_send_pkt>
	if (rc < 0) {
   25e70:	1e04      	subs	r4, r0, #0
   25e72:	da08      	bge.n	25e86 <mqtt_tx_connect+0x6e>
		net_pkt_unref(tx);
   25e74:	4630      	mov	r0, r6
   25e76:	f7f7 fbd4 	bl	1d622 <net_pkt_unref>
   25e7a:	e004      	b.n	25e86 <mqtt_tx_connect+0x6e>
		rc = -EINVAL;
   25e7c:	f06f 0415 	mvn.w	r4, #21
	net_pkt_frag_unref(data);
   25e80:	4628      	mov	r0, r5
   25e82:	f7f7 fbc8 	bl	1d616 <net_pkt_frag_unref>
}
   25e86:	4620      	mov	r0, r4
   25e88:	b002      	add	sp, #8
   25e8a:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   25e8c:	f06f 040b 	mvn.w	r4, #11
   25e90:	e7f6      	b.n	25e80 <mqtt_tx_connect+0x68>
		return -ENOMEM;
   25e92:	f06f 040b 	mvn.w	r4, #11
   25e96:	e7f6      	b.n	25e86 <mqtt_tx_connect+0x6e>
   25e98:	2000d254 	.word	0x2000d254

00025e9c <mqtt_tx_disconnect>:
{
   25e9c:	b570      	push	{r4, r5, r6, lr}
   25e9e:	b084      	sub	sp, #16
   25ea0:	4604      	mov	r4, r0
	rc = mqtt_pack_disconnect(msg, &len, sizeof(msg));
   25ea2:	2202      	movs	r2, #2
   25ea4:	f10d 010a 	add.w	r1, sp, #10
   25ea8:	a803      	add	r0, sp, #12
   25eaa:	f7ff fe80 	bl	25bae <mqtt_pack_disconnect>
	if (rc != 0) {
   25eae:	bb78      	cbnz	r0, 25f10 <mqtt_tx_disconnect+0x74>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25eb0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   25eb2:	2100      	movs	r1, #0
   25eb4:	4620      	mov	r0, r4
   25eb6:	f000 fd41 	bl	2693c <net_app_get_net_pkt>
	if (tx == NULL) {
   25eba:	4605      	mov	r5, r0
   25ebc:	b358      	cbz	r0, 25f16 <mqtt_tx_disconnect+0x7a>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   25ebe:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   25ec2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25ec4:	aa03      	add	r2, sp, #12
   25ec6:	4631      	mov	r1, r6
   25ec8:	f7f7 fce3 	bl	1d892 <net_pkt_append>
	if (rc != true) {
   25ecc:	4286      	cmp	r6, r0
   25ece:	d007      	beq.n	25ee0 <mqtt_tx_disconnect+0x44>
		rc = -ENOMEM;
   25ed0:	f06f 060b 	mvn.w	r6, #11
	net_pkt_unref(tx);
   25ed4:	4628      	mov	r0, r5
   25ed6:	f7f7 fba4 	bl	1d622 <net_pkt_unref>
}
   25eda:	4630      	mov	r0, r6
   25edc:	b004      	add	sp, #16
   25ede:	bd70      	pop	{r4, r5, r6, pc}
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   25ee0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25ee2:	2200      	movs	r2, #0
   25ee4:	9201      	str	r2, [sp, #4]
   25ee6:	9300      	str	r3, [sp, #0]
   25ee8:	4613      	mov	r3, r2
   25eea:	4629      	mov	r1, r5
   25eec:	4620      	mov	r0, r4
   25eee:	f000 fca9 	bl	26844 <net_app_send_pkt>
	if (rc < 0) {
   25ef2:	1e06      	subs	r6, r0, #0
   25ef4:	dbee      	blt.n	25ed4 <mqtt_tx_disconnect+0x38>
	ctx->connected = 0;
   25ef6:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   25efa:	f36f 0341 	bfc	r3, #1, #1
   25efe:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->disconnect) {
   25f02:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   25f06:	2b00      	cmp	r3, #0
   25f08:	d0e7      	beq.n	25eda <mqtt_tx_disconnect+0x3e>
		ctx->disconnect(ctx);
   25f0a:	4620      	mov	r0, r4
   25f0c:	4798      	blx	r3
   25f0e:	e7e4      	b.n	25eda <mqtt_tx_disconnect+0x3e>
		return -EINVAL;
   25f10:	f06f 0615 	mvn.w	r6, #21
   25f14:	e7e1      	b.n	25eda <mqtt_tx_disconnect+0x3e>
		return -ENOMEM;
   25f16:	f06f 060b 	mvn.w	r6, #11
   25f1a:	e7de      	b.n	25eda <mqtt_tx_disconnect+0x3e>

00025f1c <mqtt_tx_puback>:
{
   25f1c:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBACK);
   25f1e:	2204      	movs	r2, #4
   25f20:	f7ff feeb 	bl	25cfa <mqtt_tx_pub_msgs>
}
   25f24:	bd08      	pop	{r3, pc}

00025f26 <mqtt_tx_pubrec>:
{
   25f26:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREC);
   25f28:	2205      	movs	r2, #5
   25f2a:	f7ff fee6 	bl	25cfa <mqtt_tx_pub_msgs>
}
   25f2e:	bd08      	pop	{r3, pc}

00025f30 <mqtt_tx_publish>:
{
   25f30:	b570      	push	{r4, r5, r6, lr}
   25f32:	b082      	sub	sp, #8
   25f34:	4605      	mov	r5, r0
   25f36:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   25f38:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   25f3a:	481a      	ldr	r0, [pc, #104]	; (25fa4 <mqtt_tx_publish+0x74>)
   25f3c:	f7f4 fd94 	bl	1aa68 <net_buf_alloc>
	if (data == NULL) {
   25f40:	b360      	cbz	r0, 25f9c <mqtt_tx_publish+0x6c>
   25f42:	4604      	mov	r4, r0
	rc = mqtt_pack_publish(data->data, &data->len, data->size, msg);
   25f44:	4633      	mov	r3, r6
   25f46:	89c2      	ldrh	r2, [r0, #14]
   25f48:	f100 010c 	add.w	r1, r0, #12
   25f4c:	6880      	ldr	r0, [r0, #8]
   25f4e:	f7ff fd47 	bl	259e0 <mqtt_pack_publish>
	if (rc != 0) {
   25f52:	b9c0      	cbnz	r0, 25f86 <mqtt_tx_publish+0x56>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25f54:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   25f56:	2100      	movs	r1, #0
   25f58:	4628      	mov	r0, r5
   25f5a:	f000 fcef 	bl	2693c <net_app_get_net_pkt>
	if (tx == NULL) {
   25f5e:	4606      	mov	r6, r0
   25f60:	b1c8      	cbz	r0, 25f96 <mqtt_tx_publish+0x66>
	net_pkt_frag_add(tx, data);
   25f62:	4621      	mov	r1, r4
   25f64:	f7f7 fb87 	bl	1d676 <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   25f68:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   25f6a:	2200      	movs	r2, #0
   25f6c:	9201      	str	r2, [sp, #4]
   25f6e:	9300      	str	r3, [sp, #0]
   25f70:	4613      	mov	r3, r2
   25f72:	4631      	mov	r1, r6
   25f74:	4628      	mov	r0, r5
   25f76:	f000 fc65 	bl	26844 <net_app_send_pkt>
	if (rc < 0) {
   25f7a:	1e05      	subs	r5, r0, #0
   25f7c:	da08      	bge.n	25f90 <mqtt_tx_publish+0x60>
		net_pkt_unref(tx);
   25f7e:	4630      	mov	r0, r6
   25f80:	f7f7 fb4f 	bl	1d622 <net_pkt_unref>
   25f84:	e004      	b.n	25f90 <mqtt_tx_publish+0x60>
		rc = -EINVAL;
   25f86:	f06f 0515 	mvn.w	r5, #21
	net_pkt_frag_unref(data);
   25f8a:	4620      	mov	r0, r4
   25f8c:	f7f7 fb43 	bl	1d616 <net_pkt_frag_unref>
}
   25f90:	4628      	mov	r0, r5
   25f92:	b002      	add	sp, #8
   25f94:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   25f96:	f06f 050b 	mvn.w	r5, #11
   25f9a:	e7f6      	b.n	25f8a <mqtt_tx_publish+0x5a>
		return -ENOMEM;
   25f9c:	f06f 050b 	mvn.w	r5, #11
   25fa0:	e7f6      	b.n	25f90 <mqtt_tx_publish+0x60>
   25fa2:	bf00      	nop
   25fa4:	2000d254 	.word	0x2000d254

00025fa8 <mqtt_rx_connack>:
{
   25fa8:	b570      	push	{r4, r5, r6, lr}
   25faa:	b082      	sub	sp, #8
   25fac:	4604      	mov	r4, r0
   25fae:	4608      	mov	r0, r1
   25fb0:	4616      	mov	r6, r2
	rc = mqtt_unpack_connack(data, len, &session, &connect_rc);
   25fb2:	f10d 0307 	add.w	r3, sp, #7
   25fb6:	f10d 0206 	add.w	r2, sp, #6
   25fba:	8989      	ldrh	r1, [r1, #12]
   25fbc:	6880      	ldr	r0, [r0, #8]
   25fbe:	f7ff fdda 	bl	25b76 <mqtt_unpack_connack>
	if (rc != 0) {
   25fc2:	b998      	cbnz	r0, 25fec <mqtt_rx_connack+0x44>
   25fc4:	4605      	mov	r5, r0
	switch (clean_session) {
   25fc6:	2e01      	cmp	r6, #1
   25fc8:	d113      	bne.n	25ff2 <mqtt_rx_connack+0x4a>
		if (/*session == 0 && */connect_rc == 0) {
   25fca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25fce:	b99b      	cbnz	r3, 25ff8 <mqtt_rx_connack+0x50>
	ctx->connected = 1;
   25fd0:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   25fd4:	f043 0302 	orr.w	r3, r3, #2
   25fd8:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->connect) {
   25fdc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   25fe0:	b10b      	cbz	r3, 25fe6 <mqtt_rx_connack+0x3e>
		ctx->connect(ctx);
   25fe2:	4620      	mov	r0, r4
   25fe4:	4798      	blx	r3
}
   25fe6:	4628      	mov	r0, r5
   25fe8:	b002      	add	sp, #8
   25fea:	bd70      	pop	{r4, r5, r6, pc}
		rc = -EINVAL;
   25fec:	f06f 0515 	mvn.w	r5, #21
   25ff0:	e7f9      	b.n	25fe6 <mqtt_rx_connack+0x3e>
		rc = -EINVAL;
   25ff2:	f06f 0515 	mvn.w	r5, #21
   25ff6:	e7f6      	b.n	25fe6 <mqtt_rx_connack+0x3e>
			rc = -EINVAL;
   25ff8:	f06f 0515 	mvn.w	r5, #21
	return rc;
   25ffc:	e7f3      	b.n	25fe6 <mqtt_rx_connack+0x3e>

00025ffe <mqtt_rx_puback>:
{
   25ffe:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBACK);
   26000:	2204      	movs	r2, #4
   26002:	f7ff fe0d 	bl	25c20 <mqtt_rx_pub_msgs>
}
   26006:	bd08      	pop	{r3, pc}

00026008 <mqtt_rx_pubcomp>:
{
   26008:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBCOMP);
   2600a:	2207      	movs	r2, #7
   2600c:	f7ff fe08 	bl	25c20 <mqtt_rx_pub_msgs>
}
   26010:	bd08      	pop	{r3, pc}

00026012 <mqtt_rx_pubrec>:
{
   26012:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREC);
   26014:	2205      	movs	r2, #5
   26016:	f7ff fe03 	bl	25c20 <mqtt_rx_pub_msgs>
}
   2601a:	bd08      	pop	{r3, pc}

0002601c <mqtt_rx_pubrel>:
{
   2601c:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREL);
   2601e:	2206      	movs	r2, #6
   26020:	f7ff fdfe 	bl	25c20 <mqtt_rx_pub_msgs>
}
   26024:	bd08      	pop	{r3, pc}

00026026 <mqtt_rx_pingresp>:
{
   26026:	b508      	push	{r3, lr}
   26028:	460b      	mov	r3, r1
	rc = mqtt_unpack_pingresp(rx->data, rx->len);
   2602a:	8989      	ldrh	r1, [r1, #12]
   2602c:	6898      	ldr	r0, [r3, #8]
   2602e:	f7ff fdf0 	bl	25c12 <mqtt_unpack_pingresp>
	if (rc != 0) {
   26032:	4603      	mov	r3, r0
   26034:	b908      	cbnz	r0, 2603a <mqtt_rx_pingresp+0x14>
}
   26036:	4618      	mov	r0, r3
   26038:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2603a:	f06f 0315 	mvn.w	r3, #21
   2603e:	e7fa      	b.n	26036 <mqtt_rx_pingresp+0x10>

00026040 <mqtt_rx_suback>:
{
   26040:	b530      	push	{r4, r5, lr}
   26042:	b085      	sub	sp, #20
   26044:	4604      	mov	r4, r0
	data = rx->data;
   26046:	6888      	ldr	r0, [r1, #8]
	len = rx->len;
   26048:	8989      	ldrh	r1, [r1, #12]
	rc = mqtt_unpack_suback(data, len, &pkt_id, &items,
   2604a:	ab03      	add	r3, sp, #12
   2604c:	9301      	str	r3, [sp, #4]
   2604e:	2301      	movs	r3, #1
   26050:	9300      	str	r3, [sp, #0]
   26052:	f10d 0309 	add.w	r3, sp, #9
   26056:	f10d 020a 	add.w	r2, sp, #10
   2605a:	f7ff fc31 	bl	258c0 <mqtt_unpack_suback>
	if (rc != 0) {
   2605e:	b988      	cbnz	r0, 26084 <mqtt_rx_suback+0x44>
	if (!ctx->subscribe) {
   26060:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   26064:	b18d      	cbz	r5, 2608a <mqtt_rx_suback+0x4a>
	rc = ctx->subscribe(ctx, pkt_id, items, suback_qos);
   26066:	ab03      	add	r3, sp, #12
   26068:	f89d 2009 	ldrb.w	r2, [sp, #9]
   2606c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   26070:	4620      	mov	r0, r4
   26072:	47a8      	blx	r5
	if (rc != 0) {
   26074:	4603      	mov	r3, r0
   26076:	b910      	cbnz	r0, 2607e <mqtt_rx_suback+0x3e>
}
   26078:	4618      	mov	r0, r3
   2607a:	b005      	add	sp, #20
   2607c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2607e:	f06f 0315 	mvn.w	r3, #21
   26082:	e7f9      	b.n	26078 <mqtt_rx_suback+0x38>
		return -EINVAL;
   26084:	f06f 0315 	mvn.w	r3, #21
   26088:	e7f6      	b.n	26078 <mqtt_rx_suback+0x38>
		return -EINVAL;
   2608a:	f06f 0315 	mvn.w	r3, #21
   2608e:	e7f3      	b.n	26078 <mqtt_rx_suback+0x38>

00026090 <mqtt_rx_publish>:
{
   26090:	b530      	push	{r4, r5, lr}
   26092:	b087      	sub	sp, #28
   26094:	4604      	mov	r4, r0
   26096:	460b      	mov	r3, r1
	rc = mqtt_unpack_publish(rx->data, rx->len, &msg);
   26098:	466a      	mov	r2, sp
   2609a:	8989      	ldrh	r1, [r1, #12]
   2609c:	6898      	ldr	r0, [r3, #8]
   2609e:	f7ff fd0f 	bl	25ac0 <mqtt_unpack_publish>
	if (rc != 0) {
   260a2:	bb00      	cbnz	r0, 260e6 <mqtt_rx_publish+0x56>
	rc = ctx->publish_rx(ctx, &msg, msg.pkt_id, MQTT_PUBLISH);
   260a4:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
   260a8:	2303      	movs	r3, #3
   260aa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   260ae:	4669      	mov	r1, sp
   260b0:	4620      	mov	r0, r4
   260b2:	47a8      	blx	r5
	if (rc != 0) {
   260b4:	4602      	mov	r2, r0
   260b6:	b9c8      	cbnz	r0, 260ec <mqtt_rx_publish+0x5c>
	switch (msg.qos) {
   260b8:	f89d 3001 	ldrb.w	r3, [sp, #1]
   260bc:	2b01      	cmp	r3, #1
   260be:	d00b      	beq.n	260d8 <mqtt_rx_publish+0x48>
   260c0:	b13b      	cbz	r3, 260d2 <mqtt_rx_publish+0x42>
   260c2:	2b02      	cmp	r3, #2
   260c4:	d115      	bne.n	260f2 <mqtt_rx_publish+0x62>
		rc = mqtt_tx_pubrec(ctx, msg.pkt_id);
   260c6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   260ca:	4620      	mov	r0, r4
   260cc:	f7ff ff2b 	bl	25f26 <mqtt_tx_pubrec>
   260d0:	4602      	mov	r2, r0
}
   260d2:	4610      	mov	r0, r2
   260d4:	b007      	add	sp, #28
   260d6:	bd30      	pop	{r4, r5, pc}
		rc = mqtt_tx_puback(ctx, msg.pkt_id);
   260d8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   260dc:	4620      	mov	r0, r4
   260de:	f7ff ff1d 	bl	25f1c <mqtt_tx_puback>
   260e2:	4602      	mov	r2, r0
		break;
   260e4:	e7f5      	b.n	260d2 <mqtt_rx_publish+0x42>
		return -EINVAL;
   260e6:	f06f 0215 	mvn.w	r2, #21
   260ea:	e7f2      	b.n	260d2 <mqtt_rx_publish+0x42>
		return -EINVAL;
   260ec:	f06f 0215 	mvn.w	r2, #21
   260f0:	e7ef      	b.n	260d2 <mqtt_rx_publish+0x42>
		rc = -EINVAL;
   260f2:	f06f 0215 	mvn.w	r2, #21
   260f6:	e7ec      	b.n	260d2 <mqtt_rx_publish+0x42>

000260f8 <mqtt_parser>:
{
   260f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   260fa:	4606      	mov	r6, r0
	data = mqtt_linearize_packet(ctx, rx, MQTT_PUBLISHER_MIN_MSG_SIZE);
   260fc:	2202      	movs	r2, #2
   260fe:	f7ff fe5f 	bl	25dc0 <mqtt_linearize_packet>
	if (!data) {
   26102:	2800      	cmp	r0, #0
   26104:	d057      	beq.n	261b6 <mqtt_parser+0xbe>
   26106:	4604      	mov	r4, r0
	pkt_type = MQTT_PACKET_TYPE(data->data[0]);
   26108:	6883      	ldr	r3, [r0, #8]
   2610a:	781b      	ldrb	r3, [r3, #0]
   2610c:	091b      	lsrs	r3, r3, #4
   2610e:	b29f      	uxth	r7, r3
	switch (pkt_type) {
   26110:	3b02      	subs	r3, #2
   26112:	2b0b      	cmp	r3, #11
   26114:	d84c      	bhi.n	261b0 <mqtt_parser+0xb8>
   26116:	e8df f003 	tbb	[pc, r3]
   2611a:	3906      	.short	0x3906
   2611c:	2d3f2716 	.word	0x2d3f2716
   26120:	4b4b454b 	.word	0x4b4b454b
   26124:	334b      	.short	0x334b
		if (!ctx->connected) {
   26126:	f896 30a9 	ldrb.w	r3, [r6, #169]	; 0xa9
   2612a:	f013 0f02 	tst.w	r3, #2
   2612e:	d002      	beq.n	26136 <mqtt_parser+0x3e>
			rc = -EINVAL;
   26130:	f06f 0515 	mvn.w	r5, #21
   26134:	e00c      	b.n	26150 <mqtt_parser+0x58>
			rc = mqtt_rx_connack(ctx, data, ctx->clean_session);
   26136:	f003 0201 	and.w	r2, r3, #1
   2613a:	4601      	mov	r1, r0
   2613c:	4630      	mov	r0, r6
   2613e:	f7ff ff33 	bl	25fa8 <mqtt_rx_connack>
   26142:	4605      	mov	r5, r0
   26144:	e004      	b.n	26150 <mqtt_parser+0x58>
		rc = mqtt_rx_puback(ctx, data);
   26146:	4601      	mov	r1, r0
   26148:	4630      	mov	r0, r6
   2614a:	f7ff ff58 	bl	25ffe <mqtt_rx_puback>
   2614e:	4605      	mov	r5, r0
	if (rc != 0 && ctx->malformed) {
   26150:	b12d      	cbz	r5, 2615e <mqtt_parser+0x66>
   26152:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
   26156:	b113      	cbz	r3, 2615e <mqtt_parser+0x66>
		ctx->malformed(ctx, pkt_type);
   26158:	4639      	mov	r1, r7
   2615a:	4630      	mov	r0, r6
   2615c:	4798      	blx	r3
	net_pkt_frag_unref(data);
   2615e:	4620      	mov	r0, r4
   26160:	f7f7 fa59 	bl	1d616 <net_pkt_frag_unref>
}
   26164:	4628      	mov	r0, r5
   26166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = mqtt_rx_pubrec(ctx, data);
   26168:	4601      	mov	r1, r0
   2616a:	4630      	mov	r0, r6
   2616c:	f7ff ff51 	bl	26012 <mqtt_rx_pubrec>
   26170:	4605      	mov	r5, r0
		break;
   26172:	e7ed      	b.n	26150 <mqtt_parser+0x58>
		rc = mqtt_rx_pubcomp(ctx, data);
   26174:	4601      	mov	r1, r0
   26176:	4630      	mov	r0, r6
   26178:	f7ff ff46 	bl	26008 <mqtt_rx_pubcomp>
   2617c:	4605      	mov	r5, r0
		break;
   2617e:	e7e7      	b.n	26150 <mqtt_parser+0x58>
		rc = mqtt_rx_pingresp(ctx, data);
   26180:	4601      	mov	r1, r0
   26182:	4630      	mov	r0, r6
   26184:	f7ff ff4f 	bl	26026 <mqtt_rx_pingresp>
   26188:	4605      	mov	r5, r0
		break;
   2618a:	e7e1      	b.n	26150 <mqtt_parser+0x58>
		rc = mqtt_rx_publish(ctx, data);
   2618c:	4601      	mov	r1, r0
   2618e:	4630      	mov	r0, r6
   26190:	f7ff ff7e 	bl	26090 <mqtt_rx_publish>
   26194:	4605      	mov	r5, r0
		break;
   26196:	e7db      	b.n	26150 <mqtt_parser+0x58>
		rc = mqtt_rx_pubrel(ctx, data);
   26198:	4601      	mov	r1, r0
   2619a:	4630      	mov	r0, r6
   2619c:	f7ff ff3e 	bl	2601c <mqtt_rx_pubrel>
   261a0:	4605      	mov	r5, r0
		break;
   261a2:	e7d5      	b.n	26150 <mqtt_parser+0x58>
		rc = mqtt_rx_suback(ctx, data);
   261a4:	4601      	mov	r1, r0
   261a6:	4630      	mov	r0, r6
   261a8:	f7ff ff4a 	bl	26040 <mqtt_rx_suback>
   261ac:	4605      	mov	r5, r0
		break;
   261ae:	e7cf      	b.n	26150 <mqtt_parser+0x58>
		rc = -EINVAL;
   261b0:	f06f 0515 	mvn.w	r5, #21
   261b4:	e7cc      	b.n	26150 <mqtt_parser+0x58>
		return -ENOMEM;
   261b6:	f06f 050b 	mvn.w	r5, #11
   261ba:	e7d3      	b.n	26164 <mqtt_parser+0x6c>

000261bc <mqtt_connect>:
}

int mqtt_connect(struct mqtt_ctx *ctx)
{
   261bc:	b530      	push	{r4, r5, lr}
   261be:	b087      	sub	sp, #28
	int rc = 0;

	if (!ctx) {
   261c0:	b348      	cbz	r0, 26216 <mqtt_connect+0x5a>
   261c2:	4604      	mov	r4, r0
	}

	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
			NULL,
			NULL,
			ctx->peer_addr_str,
   261c4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
   261c8:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
   261cc:	6f81      	ldr	r1, [r0, #120]	; 0x78
					  const char *peer_addr_str,
					  u16_t peer_port,
					  s32_t timeout,
					  void *user_data)
{
	return net_app_init_client(ctx,
   261ce:	9004      	str	r0, [sp, #16]
   261d0:	9103      	str	r1, [sp, #12]
   261d2:	9202      	str	r2, [sp, #8]
   261d4:	9301      	str	r3, [sp, #4]
   261d6:	2300      	movs	r3, #0
   261d8:	9300      	str	r3, [sp, #0]
   261da:	2206      	movs	r2, #6
   261dc:	2101      	movs	r1, #1
   261de:	f000 f913 	bl	26408 <net_app_init_client>
			ctx->peer_port,
			ctx->net_init_timeout,
			ctx);
	if (rc < 0) {
   261e2:	1e05      	subs	r5, r0, #0
   261e4:	db0e      	blt.n	26204 <mqtt_connect+0x48>
		goto error_connect;
	}

	rc = net_app_set_cb(&ctx->net_app_ctx,
   261e6:	2300      	movs	r3, #0
   261e8:	9300      	str	r3, [sp, #0]
   261ea:	4a0c      	ldr	r2, [pc, #48]	; (2621c <mqtt_connect+0x60>)
   261ec:	490c      	ldr	r1, [pc, #48]	; (26220 <mqtt_connect+0x64>)
   261ee:	4620      	mov	r0, r4
   261f0:	f000 fb11 	bl	26816 <net_app_set_cb>
			app_connected,
			app_recv,
			NULL,
			NULL);
	if (rc < 0) {
   261f4:	1e05      	subs	r5, r0, #0
   261f6:	db05      	blt.n	26204 <mqtt_connect+0x48>
	if (rc < 0) {
		goto error_connect;
	}
#endif

	rc = net_app_connect(&ctx->net_app_ctx, ctx->net_timeout);
   261f8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   261fa:	4620      	mov	r0, r4
   261fc:	f000 f9ec 	bl	265d8 <net_app_connect>
	if (rc < 0) {
   26200:	1e05      	subs	r5, r0, #0
   26202:	da05      	bge.n	26210 <mqtt_connect+0x54>

	return rc;

error_connect:
	/* clean net app context, so mqtt_connect() can be called repeatedly */
	net_app_close(&ctx->net_app_ctx);
   26204:	4620      	mov	r0, r4
   26206:	f000 fbbd 	bl	26984 <net_app_close>
	net_app_release(&ctx->net_app_ctx);
   2620a:	4620      	mov	r0, r4
   2620c:	f000 fab8 	bl	26780 <net_app_release>

	return rc;
}
   26210:	4628      	mov	r0, r5
   26212:	b007      	add	sp, #28
   26214:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
   26216:	f06f 050d 	mvn.w	r5, #13
   2621a:	e7f9      	b.n	26210 <mqtt_connect+0x54>
   2621c:	00025cdb 	.word	0x00025cdb
   26220:	00025cd9 	.word	0x00025cd9

00026224 <mqtt_init>:

int mqtt_init(struct mqtt_ctx *ctx, enum mqtt_app app_type)
{
	/* So far, only clean session = 1 is supported */
	ctx->clean_session = 1;
   26224:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
	ctx->connected = 0;
   26228:	f043 0301 	orr.w	r3, r3, #1
   2622c:	f36f 0341 	bfc	r3, #1, #1
   26230:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9

	ctx->app_type = app_type;
   26234:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
	ctx->rcv = mqtt_parser;
   26238:	4b02      	ldr	r3, [pc, #8]	; (26244 <mqtt_init+0x20>)
   2623a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	k_sem_init(&ctx->tls_hs_wait, 0, 1);
#endif

	return 0;
}
   2623e:	2000      	movs	r0, #0
   26240:	4770      	bx	lr
   26242:	bf00      	nop
   26244:	000260f9 	.word	0x000260f9

00026248 <mqtt_close>:

int mqtt_close(struct mqtt_ctx *ctx)
{
	if (!ctx) {
   26248:	b178      	cbz	r0, 2626a <mqtt_close+0x22>
{
   2624a:	b510      	push	{r4, lr}
   2624c:	4604      	mov	r4, r0
		return -EFAULT;
	}

	if (ctx->net_app_ctx.is_init) {
   2624e:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   26252:	f012 0f01 	tst.w	r2, #1
   26256:	d101      	bne.n	2625c <mqtt_close+0x14>
		net_app_close(&ctx->net_app_ctx);
		net_app_release(&ctx->net_app_ctx);
	}

	return 0;
   26258:	2000      	movs	r0, #0
}
   2625a:	bd10      	pop	{r4, pc}
		net_app_close(&ctx->net_app_ctx);
   2625c:	f000 fb92 	bl	26984 <net_app_close>
		net_app_release(&ctx->net_app_ctx);
   26260:	4620      	mov	r0, r4
   26262:	f000 fa8d 	bl	26780 <net_app_release>
	return 0;
   26266:	2000      	movs	r0, #0
   26268:	bd10      	pop	{r4, pc}
		return -EFAULT;
   2626a:	f06f 000d 	mvn.w	r0, #13
   2626e:	4770      	bx	lr

00026270 <net_app_init>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

int net_app_init(const char *app_info, u32_t flags, s32_t timeout)
{
   26270:	b570      	push	{r4, r5, r6, lr}
   26272:	460c      	mov	r4, r1
   26274:	4616      	mov	r6, r2
#define LOOP_DIVIDER 10
	struct net_if *iface = net_if_get_default();
   26276:	f7f4 fff5 	bl	1b264 <net_if_get_default>
	int loop = timeout / LOOP_DIVIDER;
   2627a:	4b20      	ldr	r3, [pc, #128]	; (262fc <net_app_init+0x8c>)
   2627c:	fb83 2306 	smull	r2, r3, r3, r6
   26280:	17f5      	asrs	r5, r6, #31
   26282:	ebc5 05a3 	rsb	r5, r5, r3, asr #2

	if (app_info) {
		NET_INFO("%s", app_info);
	}

	if (!iface) {
   26286:	b380      	cbz	r0, 262ea <net_app_init+0x7a>
		NET_ERR("No network interfaces");
		return -ENODEV;
	}

	if (flags & NET_APP_NEED_IPV6) {
   26288:	f014 0f02 	tst.w	r4, #2
   2628c:	d114      	bne.n	262b8 <net_app_init+0x48>
	int count = 0;
   2628e:	2100      	movs	r1, #0
		count++;
	}

	if (flags & NET_APP_NEED_IPV4) {
   26290:	f014 0f04 	tst.w	r4, #4
   26294:	d000      	beq.n	26298 <net_app_init+0x28>
		count++;
   26296:	3101      	adds	r1, #1
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   26298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2629c:	4818      	ldr	r0, [pc, #96]	; (26300 <net_app_init+0x90>)
   2629e:	f002 ff93 	bl	291c8 <_impl_k_sem_init>

	setup_dhcpv4(iface);

	setup_ipv6(iface, flags);

	if (timeout < 0) {
   262a2:	2e00      	cmp	r6, #0
   262a4:	db0a      	blt.n	262bc <net_app_init+0x4c>
		count = -1;
	} else if (timeout == 0) {
   262a6:	b166      	cbz	r6, 262c2 <net_app_init+0x52>
		count = 0;
	} else {
		count = timeout / 1000 + 1;
   262a8:	4a16      	ldr	r2, [pc, #88]	; (26304 <net_app_init+0x94>)
   262aa:	fb82 3206 	smull	r3, r2, r2, r6
   262ae:	17f3      	asrs	r3, r6, #31
   262b0:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   262b4:	3301      	adds	r3, #1
   262b6:	e007      	b.n	262c8 <net_app_init+0x58>
		count++;
   262b8:	2101      	movs	r1, #1
   262ba:	e7e9      	b.n	26290 <net_app_init+0x20>
		count = -1;
   262bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   262c0:	e002      	b.n	262c8 <net_app_init+0x58>
		count = 0;
   262c2:	2300      	movs	r3, #0
   262c4:	e000      	b.n	262c8 <net_app_init+0x58>
   262c6:	4623      	mov	r3, r4
	}

	/* Loop here until until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (count--) {
   262c8:	1e5c      	subs	r4, r3, #1
   262ca:	b153      	cbz	r3, 262e2 <net_app_init+0x72>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   262cc:	4629      	mov	r1, r5
   262ce:	480e      	ldr	r0, [pc, #56]	; (26308 <net_app_init+0x98>)
   262d0:	f002 ff96 	bl	29200 <_impl_k_sem_take>
		if (k_sem_take(&waiter, loop)) {
   262d4:	2800      	cmp	r0, #0
   262d6:	d0f6      	beq.n	262c6 <net_app_init+0x56>
	return sem->count;
   262d8:	4b09      	ldr	r3, [pc, #36]	; (26300 <net_app_init+0x90>)
   262da:	689a      	ldr	r2, [r3, #8]
   262dc:	4623      	mov	r3, r4
			if (!k_sem_count_get(&counter)) {
   262de:	2a00      	cmp	r2, #0
   262e0:	d1f2      	bne.n	262c8 <net_app_init+0x58>
				break;
			}
		}
	}

	if (!count && timeout) {
   262e2:	b92c      	cbnz	r4, 262f0 <net_app_init+0x80>
   262e4:	b936      	cbnz	r6, 262f4 <net_app_init+0x84>
		NET_ERR("Timeout while waiting setup");
		return -ETIMEDOUT;
	}

	return 0;
   262e6:	2000      	movs	r0, #0
   262e8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   262ea:	f06f 0012 	mvn.w	r0, #18
   262ee:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   262f0:	2000      	movs	r0, #0
   262f2:	bd70      	pop	{r4, r5, r6, pc}
		return -ETIMEDOUT;
   262f4:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
   262f8:	bd70      	pop	{r4, r5, r6, pc}
   262fa:	bf00      	nop
   262fc:	66666667 	.word	0x66666667
   26300:	20002554 	.word	0x20002554
   26304:	10624dd3 	.word	0x10624dd3
   26308:	2000d1a4 	.word	0x2000d1a4

0002630c <init_net_app>:

#if defined(CONFIG_NET_APP_AUTO_INIT)
static int init_net_app(struct device *device)
{
   2630c:	b508      	push	{r3, lr}
	ret = _net_app_ieee802154_setup();
	if (ret < 0) {
		NET_ERR("Cannot setup IEEE 802.15.4 interface (%d)", ret);
	}

	ret = _net_app_bt_setup();
   2630e:	f000 fb5b 	bl	269c8 <_net_app_bt_setup>
	if (IS_ENABLED(CONFIG_NET_APP_NEED_IPV4)) {
		flags |= NET_APP_NEED_IPV4;
	}

	/* Initialize the application automatically if needed */
	ret = net_app_init("Initializing network", flags,
   26312:	f247 5230 	movw	r2, #30000	; 0x7530
   26316:	2100      	movs	r1, #0
   26318:	4801      	ldr	r0, [pc, #4]	; (26320 <init_net_app+0x14>)
   2631a:	f7ff ffa9 	bl	26270 <net_app_init>
	if (ret < 0) {
		NET_ERR("Network initialization failed (%d)", ret);
	}

	return ret;
}
   2631e:	bd08      	pop	{r3, pc}
   26320:	00032374 	.word	0x00032374

00026324 <try_resolve>:
		NET_ERR("Cannot resolve %s (%d)", peer_addr_str, ret);
	}

	return ret;
#endif
}
   26324:	f06f 0015 	mvn.w	r0, #21
   26328:	4770      	bx	lr

0002632a <set_remote_addr>:
static int set_remote_addr(struct net_app_ctx *ctx,
			   struct sockaddr *remote_addr,
			   const char *peer_addr_str,
			   bool peer_addr_ok,
			   s32_t timeout)
{
   2632a:	b510      	push	{r4, lr}
   2632c:	4604      	mov	r4, r0
   2632e:	4610      	mov	r0, r2
	int ret;

	if (peer_addr_ok && remote_addr->sa_family == AF_INET6) {
   26330:	461a      	mov	r2, r3
   26332:	b113      	cbz	r3, 2633a <set_remote_addr+0x10>
   26334:	880b      	ldrh	r3, [r1, #0]
   26336:	2b0a      	cmp	r3, #10
   26338:	d00e      	beq.n	26358 <set_remote_addr+0x2e>
#else
		return -EAFNOSUPPORT;
#endif
	}

	if (peer_addr_ok && remote_addr->sa_family == AF_INET) {
   2633a:	b112      	cbz	r2, 26342 <set_remote_addr+0x18>
   2633c:	880b      	ldrh	r3, [r1, #0]
   2633e:	2b02      	cmp	r3, #2
   26340:	d012      	beq.n	26368 <set_remote_addr+0x3e>
#endif
	}

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	/* Could be hostname, try DNS if configured. */
	ret = try_resolve(ctx, peer_addr_str, DNS_QUERY_TYPE_AAAA, timeout);
   26342:	9b02      	ldr	r3, [sp, #8]
   26344:	221c      	movs	r2, #28
   26346:	4601      	mov	r1, r0
   26348:	4620      	mov	r0, r4
   2634a:	f7ff ffeb 	bl	26324 <try_resolve>
	if (ret < 0) {
   2634e:	2800      	cmp	r0, #0
   26350:	db0c      	blt.n	2636c <set_remote_addr+0x42>
		return ret;
	}

	ctx->default_ctx = &ctx->ipv6;
   26352:	6364      	str	r4, [r4, #52]	; 0x34
	return 0;
   26354:	2000      	movs	r0, #0
   26356:	bd10      	pop	{r4, pc}
		memcpy(&ctx->ipv6.remote, remote_addr,
   26358:	2218      	movs	r2, #24
   2635a:	f104 001c 	add.w	r0, r4, #28
   2635e:	f7d9 ffaf 	bl	2c0 <memcpy>
		ctx->default_ctx = &ctx->ipv6;
   26362:	6364      	str	r4, [r4, #52]	; 0x34
		return 0;
   26364:	2000      	movs	r0, #0
   26366:	bd10      	pop	{r4, pc}
		return -EAFNOSUPPORT;
   26368:	f06f 0069 	mvn.w	r0, #105	; 0x69
	}

	ctx->default_ctx = &ctx->ipv4;
	return 0;
#endif /* IPV4 && IPV6 */
}
   2636c:	bd10      	pop	{r4, pc}

0002636e <close_net_ctx>:
}

static void close_net_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	if (ctx->ipv6.ctx) {
   2636e:	6803      	ldr	r3, [r0, #0]
   26370:	b13b      	cbz	r3, 26382 <close_net_ctx+0x14>
{
   26372:	b510      	push	{r4, lr}
   26374:	4604      	mov	r4, r0
		net_context_put(ctx->ipv6.ctx);
   26376:	4618      	mov	r0, r3
   26378:	f7f6 fcbe 	bl	1ccf8 <net_context_put>
		ctx->ipv6.ctx = NULL;
   2637c:	2300      	movs	r3, #0
   2637e:	6023      	str	r3, [r4, #0]
   26380:	bd10      	pop	{r4, pc}
   26382:	4770      	bx	lr

00026384 <get_port_number>:
	if (peer_addr_str[0] == '[') {
   26384:	7803      	ldrb	r3, [r0, #0]
   26386:	2b5b      	cmp	r3, #91	; 0x5b
   26388:	d002      	beq.n	26390 <get_port_number+0xc>
   2638a:	2300      	movs	r3, #0
   2638c:	4619      	mov	r1, r3
   2638e:	e019      	b.n	263c4 <get_port_number+0x40>
{
   26390:	b570      	push	{r4, r5, r6, lr}
   26392:	460d      	mov	r5, r1
   26394:	4604      	mov	r4, r0
		ptr = strstr(peer_addr_str, "]:");
   26396:	4913      	ldr	r1, [pc, #76]	; (263e4 <get_port_number+0x60>)
   26398:	f004 fa6c 	bl	2a874 <strstr>
		if (!ptr) {
   2639c:	4606      	mov	r6, r0
   2639e:	b1f0      	cbz	r0, 263de <get_port_number+0x5a>
		end = min(INET6_ADDRSTRLEN, ptr - (peer_addr_str + 1));
   263a0:	1c61      	adds	r1, r4, #1
   263a2:	1a44      	subs	r4, r0, r1
   263a4:	2c2e      	cmp	r4, #46	; 0x2e
   263a6:	bfa8      	it	ge
   263a8:	242e      	movge	r4, #46	; 0x2e
		memcpy(buf, peer_addr_str + 1, end);
   263aa:	4622      	mov	r2, r4
   263ac:	4628      	mov	r0, r5
   263ae:	f7d9 ff87 	bl	2c0 <memcpy>
		buf[end] = '\0';
   263b2:	2100      	movs	r1, #0
   263b4:	5529      	strb	r1, [r5, r4]
		port = strtol(ptr + 2, NULL, 10);
   263b6:	220a      	movs	r2, #10
   263b8:	1cb0      	adds	r0, r6, #2
   263ba:	f004 fbfb 	bl	2abb4 <strtol>
   263be:	b280      	uxth	r0, r0
		return port;
   263c0:	bd70      	pop	{r4, r5, r6, pc}
		i++;
   263c2:	3301      	adds	r3, #1
	while (peer_addr_str[i]) {
   263c4:	5cc2      	ldrb	r2, [r0, r3]
   263c6:	b11a      	cbz	r2, 263d0 <get_port_number+0x4c>
		if (peer_addr_str[i] == ':') {
   263c8:	2a3a      	cmp	r2, #58	; 0x3a
   263ca:	d1fa      	bne.n	263c2 <get_port_number+0x3e>
			count++;
   263cc:	3101      	adds	r1, #1
   263ce:	e7f8      	b.n	263c2 <get_port_number+0x3e>
	if (count == 1) {
   263d0:	2901      	cmp	r1, #1
   263d2:	d001      	beq.n	263d8 <get_port_number+0x54>
	return 0;
   263d4:	2000      	movs	r0, #0
   263d6:	4770      	bx	lr
		return -EAFNOSUPPORT;
   263d8:	f06f 0069 	mvn.w	r0, #105	; 0x69
   263dc:	4770      	bx	lr
			return -EINVAL;
   263de:	f06f 0015 	mvn.w	r0, #21
   263e2:	bd70      	pop	{r4, r5, r6, pc}
   263e4:	0003238c 	.word	0x0003238c

000263e8 <_app_connected>:
}

static void _app_connected(struct net_context *net_ctx,
			   int status,
			   void *user_data)
{
   263e8:	b538      	push	{r3, r4, r5, lr}
   263ea:	460d      	mov	r5, r1
   263ec:	4614      	mov	r4, r2
	if (ctx->is_tls) {
		k_sem_give(&ctx->client.connect_wait);
	}
#endif

	net_context_recv(net_ctx, ctx->recv_cb, K_NO_WAIT, ctx);
   263ee:	4613      	mov	r3, r2
   263f0:	2200      	movs	r2, #0
   263f2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   263f4:	f7f6 ff88 	bl	1d308 <net_context_recv>
		 */
		NET_DBG("Postponing TLS connection cb for ctx %p", ctx);
	} else
#endif
	{
		if (ctx->cb.connect) {
   263f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   263fa:	b11b      	cbz	r3, 26404 <_app_connected+0x1c>
			ctx->cb.connect(ctx, status, ctx->user_data);
   263fc:	6f22      	ldr	r2, [r4, #112]	; 0x70
   263fe:	4629      	mov	r1, r5
   26400:	4620      	mov	r0, r4
   26402:	4798      	blx	r3
   26404:	bd38      	pop	{r3, r4, r5, pc}
	...

00026408 <net_app_init_client>:
{
   26408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2640c:	b09a      	sub	sp, #104	; 0x68
   2640e:	9e22      	ldr	r6, [sp, #136]	; 0x88
   26410:	f8bd 8090 	ldrh.w	r8, [sp, #144]	; 0x90
	if (!ctx) {
   26414:	2800      	cmp	r0, #0
   26416:	f000 80c9 	beq.w	265ac <net_app_init_client+0x1a4>
   2641a:	4604      	mov	r4, r0
	if (ctx->is_init) {
   2641c:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   26420:	f010 0f01 	tst.w	r0, #1
   26424:	f040 80c5 	bne.w	265b2 <net_app_init_client+0x1aa>
   26428:	4699      	mov	r9, r3
   2642a:	4617      	mov	r7, r2
   2642c:	460d      	mov	r5, r1
	memset(&addr, 0, sizeof(addr));
   2642e:	2218      	movs	r2, #24
   26430:	2100      	movs	r1, #0
   26432:	a802      	add	r0, sp, #8
   26434:	f003 fea4 	bl	2a180 <memset>
	memset(&remote_addr, 0, sizeof(remote_addr));
   26438:	2218      	movs	r2, #24
   2643a:	2100      	movs	r1, #0
   2643c:	a808      	add	r0, sp, #32
   2643e:	f003 fe9f 	bl	2a180 <memset>
	if (peer_addr) {
   26442:	2e00      	cmp	r6, #0
   26444:	d03c      	beq.n	264c0 <net_app_init_client+0xb8>
		memcpy(&remote_addr, peer_addr, sizeof(remote_addr));
   26446:	2218      	movs	r2, #24
   26448:	4631      	mov	r1, r6
   2644a:	a808      	add	r0, sp, #32
   2644c:	f7d9 ff38 	bl	2c0 <memcpy>
	int ret, addr_ok = false;
   26450:	f04f 0a00 	mov.w	sl, #0
	if (client_addr) {
   26454:	f1b9 0f00 	cmp.w	r9, #0
   26458:	d05e      	beq.n	26518 <net_app_init_client+0x110>
		memcpy(&addr, client_addr, sizeof(addr));
   2645a:	2218      	movs	r2, #24
   2645c:	4649      	mov	r1, r9
   2645e:	a802      	add	r0, sp, #8
   26460:	f7d9 ff2e 	bl	2c0 <memcpy>
		if (addr.sa_family != remote_addr.sa_family) {
   26464:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   26468:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2646c:	429a      	cmp	r2, r3
   2646e:	f040 80a3 	bne.w	265b8 <net_app_init_client+0x1b0>
	ctx->app_type = NET_APP_CLIENT;
   26472:	2302      	movs	r3, #2
   26474:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	ctx->user_data = user_data;
   26478:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2647a:	6723      	str	r3, [r4, #112]	; 0x70
	ctx->send_data = net_context_sendto;
   2647c:	4b54      	ldr	r3, [pc, #336]	; (265d0 <net_app_init_client+0x1c8>)
   2647e:	63a3      	str	r3, [r4, #56]	; 0x38
	ctx->recv_cb = _net_app_received;
   26480:	4b54      	ldr	r3, [pc, #336]	; (265d4 <net_app_init_client+0x1cc>)
   26482:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->proto = proto;
   26484:	f884 7075 	strb.w	r7, [r4, #117]	; 0x75
	ctx->sock_type = sock_type;
   26488:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
	ret = _net_app_config_local_ctx(ctx, sock_type, proto, &addr);
   2648c:	ab02      	add	r3, sp, #8
   2648e:	463a      	mov	r2, r7
   26490:	4629      	mov	r1, r5
   26492:	4620      	mov	r0, r4
   26494:	f000 f949 	bl	2672a <_net_app_config_local_ctx>
	if (ret < 0) {
   26498:	1e05      	subs	r5, r0, #0
   2649a:	db42      	blt.n	26522 <net_app_init_client+0x11a>
	if (peer_addr) {
   2649c:	2e00      	cmp	r6, #0
   2649e:	d04c      	beq.n	2653a <net_app_init_client+0x132>
		if (peer_addr->sa_family == AF_INET) {
   264a0:	8833      	ldrh	r3, [r6, #0]
   264a2:	2b02      	cmp	r3, #2
   264a4:	f000 808b 	beq.w	265be <net_app_init_client+0x1b6>
		} else if (peer_addr->sa_family == AF_INET6) {
   264a8:	2b0a      	cmp	r3, #10
   264aa:	d03e      	beq.n	2652a <net_app_init_client+0x122>
	ctx->is_init = true;
   264ac:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   264b0:	f043 0301 	orr.w	r3, r3, #1
   264b4:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
}
   264b8:	4628      	mov	r0, r5
   264ba:	b01a      	add	sp, #104	; 0x68
   264bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (peer_addr_str) {
   264c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   264c2:	b333      	cbz	r3, 26512 <net_app_init_client+0x10a>
		ret = get_port_number(peer_addr_str, base_addr_str,
   264c4:	222f      	movs	r2, #47	; 0x2f
   264c6:	a90e      	add	r1, sp, #56	; 0x38
   264c8:	4618      	mov	r0, r3
   264ca:	f7ff ff5b 	bl	26384 <get_port_number>
		if (ret > 0) {
   264ce:	2800      	cmp	r0, #0
   264d0:	dd17      	ble.n	26502 <net_app_init_client+0xfa>
			peer_port = ret;
   264d2:	fa1f f880 	uxth.w	r8, r0
			base_peer_addr = base_addr_str;
   264d6:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
		addr_ok = net_ipaddr_parse(base_peer_addr,
   264da:	4650      	mov	r0, sl
   264dc:	f7da f910 	bl	700 <strlen>
   264e0:	aa08      	add	r2, sp, #32
   264e2:	4601      	mov	r1, r0
   264e4:	4650      	mov	r0, sl
   264e6:	f7f7 ff72 	bl	1e3ce <net_ipaddr_parse>
   264ea:	4682      	mov	sl, r0
		if (remote_addr.sa_family == AF_INET6) {
   264ec:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   264f0:	2b0a      	cmp	r3, #10
   264f2:	d1af      	bne.n	26454 <net_app_init_client+0x4c>
			net_sin6(&remote_addr)->sin6_port = htons(peer_port);
   264f4:	ea4f 2318 	mov.w	r3, r8, lsr #8
   264f8:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
   264fc:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
   26500:	e7a8      	b.n	26454 <net_app_init_client+0x4c>
			strncpy(base_addr_str, peer_addr_str,
   26502:	222e      	movs	r2, #46	; 0x2e
   26504:	9923      	ldr	r1, [sp, #140]	; 0x8c
   26506:	a80e      	add	r0, sp, #56	; 0x38
   26508:	f004 f818 	bl	2a53c <strncpy>
	const char *base_peer_addr = peer_addr_str;
   2650c:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
   26510:	e7e3      	b.n	264da <net_app_init_client+0xd2>
	int ret, addr_ok = false;
   26512:	f04f 0a00 	mov.w	sl, #0
   26516:	e79d      	b.n	26454 <net_app_init_client+0x4c>
		addr.sa_family = remote_addr.sa_family;
   26518:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2651c:	f8ad 3008 	strh.w	r3, [sp, #8]
   26520:	e7a7      	b.n	26472 <net_app_init_client+0x6a>
		close_net_ctx(ctx);
   26522:	4620      	mov	r0, r4
   26524:	f7ff ff23 	bl	2636e <close_net_ctx>
		goto fail;
   26528:	e7c6      	b.n	264b8 <net_app_init_client+0xb0>
			memcpy(&ctx->ipv6.remote, peer_addr,
   2652a:	2218      	movs	r2, #24
   2652c:	4631      	mov	r1, r6
   2652e:	f104 001c 	add.w	r0, r4, #28
   26532:	f7d9 fec5 	bl	2c0 <memcpy>
			ctx->default_ctx = &ctx->ipv6;
   26536:	6364      	str	r4, [r4, #52]	; 0x34
   26538:	e7b8      	b.n	264ac <net_app_init_client+0xa4>
	if (!peer_addr_str) {
   2653a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2653c:	b363      	cbz	r3, 26598 <net_app_init_client+0x190>
	ret = set_remote_addr(ctx, &remote_addr, base_addr_str,
   2653e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   26540:	9300      	str	r3, [sp, #0]
   26542:	f11a 0300 	adds.w	r3, sl, #0
   26546:	bf18      	it	ne
   26548:	2301      	movne	r3, #1
   2654a:	aa0e      	add	r2, sp, #56	; 0x38
   2654c:	a908      	add	r1, sp, #32
   2654e:	4620      	mov	r0, r4
   26550:	f7ff feeb 	bl	2632a <set_remote_addr>
	if (ret < 0) {
   26554:	1e05      	subs	r5, r0, #0
   26556:	db25      	blt.n	265a4 <net_app_init_client+0x19c>
	if (!ctx->default_ctx ||
   26558:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2655a:	b39b      	cbz	r3, 265c4 <net_app_init_client+0x1bc>
	    ctx->default_ctx->remote.sa_family == AF_UNSPEC) {
   2655c:	8b9b      	ldrh	r3, [r3, #28]
	if (!ctx->default_ctx ||
   2655e:	b3a3      	cbz	r3, 265ca <net_app_init_client+0x1c2>
	if (ctx->ipv6.remote.sa_family == AF_INET6) {
   26560:	8ba3      	ldrh	r3, [r4, #28]
   26562:	2b0a      	cmp	r3, #10
   26564:	d1a2      	bne.n	264ac <net_app_init_client+0xa4>
		ctx->ipv6.local.sa_family = AF_INET6;
   26566:	4625      	mov	r5, r4
   26568:	f825 3f04 	strh.w	r3, [r5, #4]!
		_net_app_set_local_addr(&ctx->ipv6.local, NULL,
   2656c:	88e2      	ldrh	r2, [r4, #6]
   2656e:	2100      	movs	r1, #0
   26570:	4628      	mov	r0, r5
   26572:	f000 f8a3 	bl	266bc <_net_app_set_local_addr>
		ret = _net_app_set_net_ctx(ctx, ctx->ipv6.ctx,
   26576:	6821      	ldr	r1, [r4, #0]
   26578:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   2657c:	9300      	str	r3, [sp, #0]
   2657e:	2318      	movs	r3, #24
   26580:	462a      	mov	r2, r5
   26582:	4620      	mov	r0, r4
   26584:	f000 f886 	bl	26694 <_net_app_set_net_ctx>
		if (ret < 0) {
   26588:	1e05      	subs	r5, r0, #0
   2658a:	da8f      	bge.n	264ac <net_app_init_client+0xa4>
			net_context_put(ctx->ipv6.ctx);
   2658c:	6820      	ldr	r0, [r4, #0]
   2658e:	f7f6 fbb3 	bl	1ccf8 <net_context_put>
			ctx->ipv6.ctx = NULL;
   26592:	2300      	movs	r3, #0
   26594:	6023      	str	r3, [r4, #0]
   26596:	e789      	b.n	264ac <net_app_init_client+0xa4>
		close_net_ctx(ctx);
   26598:	4620      	mov	r0, r4
   2659a:	f7ff fee8 	bl	2636e <close_net_ctx>
		ret = -EINVAL;
   2659e:	f06f 0515 	mvn.w	r5, #21
		goto fail;
   265a2:	e789      	b.n	264b8 <net_app_init_client+0xb0>
		close_net_ctx(ctx);
   265a4:	4620      	mov	r0, r4
   265a6:	f7ff fee2 	bl	2636e <close_net_ctx>
		goto fail;
   265aa:	e785      	b.n	264b8 <net_app_init_client+0xb0>
		return -EINVAL;
   265ac:	f06f 0515 	mvn.w	r5, #21
   265b0:	e782      	b.n	264b8 <net_app_init_client+0xb0>
		return -EALREADY;
   265b2:	f06f 0577 	mvn.w	r5, #119	; 0x77
   265b6:	e77f      	b.n	264b8 <net_app_init_client+0xb0>
			return -EINVAL;
   265b8:	f06f 0515 	mvn.w	r5, #21
   265bc:	e77c      	b.n	264b8 <net_app_init_client+0xb0>
			return -EPROTONOSUPPORT;
   265be:	f06f 057a 	mvn.w	r5, #122	; 0x7a
   265c2:	e779      	b.n	264b8 <net_app_init_client+0xb0>
		return -EPFNOSUPPORT;
   265c4:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   265c8:	e776      	b.n	264b8 <net_app_init_client+0xb0>
   265ca:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   265ce:	e773      	b.n	264b8 <net_app_init_client+0xb0>
   265d0:	0001d2c7 	.word	0x0001d2c7
   265d4:	0002666b 	.word	0x0002666b

000265d8 <net_app_connect>:
{
	struct net_context *net_ctx;
	bool started = false;
	int ret;

	if (!ctx) {
   265d8:	b1d0      	cbz	r0, 26610 <net_app_connect+0x38>
{
   265da:	b570      	push	{r4, r5, r6, lr}
   265dc:	b082      	sub	sp, #8
   265de:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   265e0:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   265e4:	f012 0f01 	tst.w	r2, #1
   265e8:	d015      	beq.n	26616 <net_app_connect+0x3e>
		return -ENOENT;
	}

	if (ctx->app_type != NET_APP_CLIENT) {
   265ea:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
   265ee:	2a02      	cmp	r2, #2
   265f0:	d114      	bne.n	2661c <net_app_connect+0x44>
   265f2:	460d      	mov	r5, r1
		return -EINVAL;
	}

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   265f4:	2100      	movs	r1, #0
   265f6:	f000 f8df 	bl	267b8 <_net_app_select_net_ctx>
	if (!net_ctx) {
   265fa:	b190      	cbz	r0, 26622 <net_app_connect+0x4a>
		}
	} else
#endif /* CONFIG_NET_APP_DTLS */
	{
		ret = net_context_connect(net_ctx,
					  &ctx->default_ctx->remote,
   265fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
		ret = net_context_connect(net_ctx,
   265fe:	9401      	str	r4, [sp, #4]
   26600:	9500      	str	r5, [sp, #0]
   26602:	4b09      	ldr	r3, [pc, #36]	; (26628 <net_app_connect+0x50>)
   26604:	2218      	movs	r2, #24
   26606:	311c      	adds	r1, #28
   26608:	f7f6 fd4a 	bl	1d0a0 <net_context_connect>
		}
#endif
	}

	return ret;
}
   2660c:	b002      	add	sp, #8
   2660e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   26610:	f06f 0015 	mvn.w	r0, #21
   26614:	4770      	bx	lr
		return -ENOENT;
   26616:	f06f 0001 	mvn.w	r0, #1
   2661a:	e7f7      	b.n	2660c <net_app_connect+0x34>
		return -EINVAL;
   2661c:	f06f 0015 	mvn.w	r0, #21
   26620:	e7f4      	b.n	2660c <net_app_connect+0x34>
		return -EAFNOSUPPORT;
   26622:	f06f 0069 	mvn.w	r0, #105	; 0x69
   26626:	e7f1      	b.n	2660c <net_app_connect+0x34>
   26628:	000263e9 	.word	0x000263e9

0002662c <select_default_ctx>:

#if defined(CONFIG_NET_APP_SERVER) || defined(CONFIG_NET_APP_CLIENT)
static void select_default_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	ctx->default_ctx = &ctx->ipv6;
   2662c:	6340      	str	r0, [r0, #52]	; 0x34
   2662e:	4770      	bx	lr

00026630 <_app_send>:
	struct net_app_ctx *ctx = user_data;

	ARG_UNUSED(ctx);

#if defined(CONFIG_NET_APP_CLIENT)
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   26630:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   26634:	2802      	cmp	r0, #2
   26636:	d000      	beq.n	2663a <_app_send+0xa>
   26638:	4770      	bx	lr
{
   2663a:	b510      	push	{r4, lr}
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   2663c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   2663e:	b114      	cbz	r4, 26646 <_app_send+0x16>
   26640:	4618      	mov	r0, r3
		ctx->cb.send(ctx, status, token, ctx->user_data);
   26642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   26644:	47a0      	blx	r4
   26646:	bd10      	pop	{r4, pc}

00026648 <setup_ipv6_ctx>:
{
   26648:	b510      	push	{r4, lr}
   2664a:	4604      	mov	r4, r0
	ret = net_context_get(AF_INET6, sock_type, proto, &ctx->ipv6.ctx);
   2664c:	4603      	mov	r3, r0
   2664e:	200a      	movs	r0, #10
   26650:	f7f6 f8e6 	bl	1c820 <net_context_get>
	if (ret < 0) {
   26654:	2800      	cmp	r0, #0
   26656:	db05      	blt.n	26664 <setup_ipv6_ctx+0x1c>
	net_context_setup_pools(ctx->ipv6.ctx, ctx->tx_slab,
   26658:	6823      	ldr	r3, [r4, #0]
   2665a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   2665c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
					   net_pkt_get_slab_func_t tx_slab,
					   net_pkt_get_pool_func_t data_pool)
{
	NET_ASSERT(context);

	context->tx_slab = tx_slab;
   2665e:	63d9      	str	r1, [r3, #60]	; 0x3c
	context->data_pool = data_pool;
   26660:	641a      	str	r2, [r3, #64]	; 0x40
}
   26662:	bd10      	pop	{r4, pc}
		ctx->ipv6.ctx = NULL;
   26664:	2300      	movs	r3, #0
   26666:	6023      	str	r3, [r4, #0]
		return ret;
   26668:	bd10      	pop	{r4, pc}

0002666a <_net_app_received>:
	if (ctx->app_type == NET_APP_CLIENT) {
   2666a:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   2666e:	2802      	cmp	r0, #2
   26670:	d000      	beq.n	26674 <_net_app_received+0xa>
   26672:	4770      	bx	lr
{
   26674:	b538      	push	{r3, r4, r5, lr}
   26676:	4618      	mov	r0, r3
   26678:	4614      	mov	r4, r2
		if (!pkt) {
   2667a:	b121      	cbz	r1, 26686 <_net_app_received+0x1c>
		if (ctx->cb.recv) {
   2667c:	6c1d      	ldr	r5, [r3, #64]	; 0x40
   2667e:	b10d      	cbz	r5, 26684 <_net_app_received+0x1a>
			ctx->cb.recv(ctx, pkt, status, ctx->user_data);
   26680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   26682:	47a8      	blx	r5
   26684:	bd38      	pop	{r3, r4, r5, pc}
			if (ctx->cb.close) {
   26686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   26688:	2b00      	cmp	r3, #0
   2668a:	d0fb      	beq.n	26684 <_net_app_received+0x1a>
				ctx->cb.close(ctx, status, ctx->user_data);
   2668c:	6f02      	ldr	r2, [r0, #112]	; 0x70
   2668e:	4621      	mov	r1, r4
   26690:	4798      	blx	r3
   26692:	bd38      	pop	{r3, r4, r5, pc}

00026694 <_net_app_set_net_ctx>:
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   26694:	b161      	cbz	r1, 266b0 <_net_app_set_net_ctx+0x1c>
{
   26696:	b510      	push	{r4, lr}
   26698:	4614      	mov	r4, r2
   2669a:	4608      	mov	r0, r1
	return context->flags & NET_CONTEXT_IN_USE;
   2669c:	f891 205d 	ldrb.w	r2, [r1, #93]	; 0x5d
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   266a0:	f012 0f01 	tst.w	r2, #1
   266a4:	d007      	beq.n	266b6 <_net_app_set_net_ctx+0x22>
   266a6:	461a      	mov	r2, r3
   266a8:	4621      	mov	r1, r4
	ret = net_context_bind(net_ctx, addr, socklen);
   266aa:	f7f6 fb67 	bl	1cd7c <net_context_bind>
	return ret;
   266ae:	bd10      	pop	{r4, pc}
		return -ENOENT;
   266b0:	f06f 0001 	mvn.w	r0, #1
   266b4:	4770      	bx	lr
   266b6:	f06f 0001 	mvn.w	r0, #1
}
   266ba:	bd10      	pop	{r4, pc}

000266bc <_net_app_set_local_addr>:
{
   266bc:	b570      	push	{r4, r5, r6, lr}
   266be:	b084      	sub	sp, #16
   266c0:	4604      	mov	r4, r0
	if (myaddr) {
   266c2:	b169      	cbz	r1, 266e0 <_net_app_set_local_addr+0x24>
		if (addr->sa_family == AF_INET) {
   266c4:	8800      	ldrh	r0, [r0, #0]
   266c6:	2802      	cmp	r0, #2
   266c8:	d029      	beq.n	2671e <_net_app_set_local_addr+0x62>
		} else if (addr->sa_family == AF_INET6) {
   266ca:	280a      	cmp	r0, #10
   266cc:	d12a      	bne.n	26724 <_net_app_set_local_addr+0x68>
			net_sin6(addr)->sin6_port = htons(port);
   266ce:	0a13      	lsrs	r3, r2, #8
   266d0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   266d4:	8062      	strh	r2, [r4, #2]
		return net_addr_pton(addr->sa_family, myaddr, inaddr);
   266d6:	1d22      	adds	r2, r4, #4
   266d8:	f7f7 fcc3 	bl	1e062 <net_addr_pton>
}
   266dc:	b004      	add	sp, #16
   266de:	bd70      	pop	{r4, r5, r6, pc}
	if (addr->sa_family == AF_INET6) {
   266e0:	8803      	ldrh	r3, [r0, #0]
   266e2:	2b0a      	cmp	r3, #10
   266e4:	d003      	beq.n	266ee <_net_app_set_local_addr+0x32>
	} else if (addr->sa_family == AF_INET) {
   266e6:	2b02      	cmp	r3, #2
   266e8:	d016      	beq.n	26718 <_net_app_set_local_addr+0x5c>
	return 0;
   266ea:	2000      	movs	r0, #0
   266ec:	e7f6      	b.n	266dc <_net_app_set_local_addr+0x20>
		net_ipaddr_copy(&net_sin6(addr)->sin6_addr,
   266ee:	f7f9 f959 	bl	1f9a4 <net_ipv6_unspecified_address>
   266f2:	4601      	mov	r1, r0
   266f4:	2000      	movs	r0, #0
   266f6:	f7f5 faf9 	bl	1bcec <net_if_ipv6_select_src_addr>
   266fa:	4603      	mov	r3, r0
   266fc:	466d      	mov	r5, sp
   266fe:	6800      	ldr	r0, [r0, #0]
   26700:	6859      	ldr	r1, [r3, #4]
   26702:	689a      	ldr	r2, [r3, #8]
   26704:	68db      	ldr	r3, [r3, #12]
   26706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   26708:	466d      	mov	r5, sp
   2670a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2670c:	6060      	str	r0, [r4, #4]
   2670e:	60a1      	str	r1, [r4, #8]
   26710:	60e2      	str	r2, [r4, #12]
   26712:	6123      	str	r3, [r4, #16]
	return 0;
   26714:	2000      	movs	r0, #0
   26716:	e7e1      	b.n	266dc <_net_app_set_local_addr+0x20>
		return -EPFNOSUPPORT;
   26718:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   2671c:	e7de      	b.n	266dc <_net_app_set_local_addr+0x20>
			return -EPFNOSUPPORT;
   2671e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26722:	e7db      	b.n	266dc <_net_app_set_local_addr+0x20>
			return -EAFNOSUPPORT;
   26724:	f06f 0069 	mvn.w	r0, #105	; 0x69
   26728:	e7d8      	b.n	266dc <_net_app_set_local_addr+0x20>

0002672a <_net_app_config_local_ctx>:
{
   2672a:	b538      	push	{r3, r4, r5, lr}
   2672c:	4604      	mov	r4, r0
	if (!addr) {
   2672e:	b163      	cbz	r3, 2674a <_net_app_config_local_ctx+0x20>
		if (addr->sa_family == AF_INET6) {
   26730:	881b      	ldrh	r3, [r3, #0]
   26732:	2b0a      	cmp	r3, #10
   26734:	d015      	beq.n	26762 <_net_app_config_local_ctx+0x38>
		} else if (addr->sa_family == AF_INET) {
   26736:	2b02      	cmp	r3, #2
   26738:	d01c      	beq.n	26774 <_net_app_config_local_ctx+0x4a>
		} else if (addr->sa_family == AF_UNSPEC) {
   2673a:	b9f3      	cbnz	r3, 2677a <_net_app_config_local_ctx+0x50>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   2673c:	4620      	mov	r0, r4
   2673e:	f7ff ff83 	bl	26648 <setup_ipv6_ctx>
   26742:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   26744:	6364      	str	r4, [r4, #52]	; 0x34
}
   26746:	4628      	mov	r0, r5
   26748:	bd38      	pop	{r3, r4, r5, pc}
		if (ctx->ipv6.local.sa_family == AF_INET6 ||
   2674a:	8883      	ldrh	r3, [r0, #4]
   2674c:	2b0a      	cmp	r3, #10
   2674e:	d000      	beq.n	26752 <_net_app_config_local_ctx+0x28>
   26750:	b96b      	cbnz	r3, 2676e <_net_app_config_local_ctx+0x44>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   26752:	4620      	mov	r0, r4
   26754:	f7ff ff78 	bl	26648 <setup_ipv6_ctx>
   26758:	4605      	mov	r5, r0
		select_default_ctx(ctx);
   2675a:	4620      	mov	r0, r4
   2675c:	f7ff ff66 	bl	2662c <select_default_ctx>
   26760:	e7f1      	b.n	26746 <_net_app_config_local_ctx+0x1c>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   26762:	4620      	mov	r0, r4
   26764:	f7ff ff70 	bl	26648 <setup_ipv6_ctx>
   26768:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   2676a:	6364      	str	r4, [r4, #52]	; 0x34
   2676c:	e7eb      	b.n	26746 <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   2676e:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   26772:	e7e8      	b.n	26746 <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   26774:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   26778:	e7e5      	b.n	26746 <_net_app_config_local_ctx+0x1c>
			ret = -EINVAL;
   2677a:	f06f 0515 	mvn.w	r5, #21
	return ret;
   2677e:	e7e2      	b.n	26746 <_net_app_config_local_ctx+0x1c>

00026780 <net_app_release>:
	if (!ctx) {
   26780:	b1a0      	cbz	r0, 267ac <net_app_release+0x2c>
{
   26782:	b510      	push	{r4, lr}
   26784:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   26786:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   2678a:	f013 0f01 	tst.w	r3, #1
   2678e:	d010      	beq.n	267b2 <net_app_release+0x32>
	if (ctx->ipv6.ctx) {
   26790:	6800      	ldr	r0, [r0, #0]
   26792:	b118      	cbz	r0, 2679c <net_app_release+0x1c>
		net_context_put(ctx->ipv6.ctx);
   26794:	f7f6 fab0 	bl	1ccf8 <net_context_put>
		ctx->ipv6.ctx = NULL;
   26798:	2300      	movs	r3, #0
   2679a:	6023      	str	r3, [r4, #0]
	ctx->is_init = false;
   2679c:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   267a0:	f36f 0300 	bfc	r3, #0, #1
   267a4:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
	return 0;
   267a8:	2000      	movs	r0, #0
   267aa:	bd10      	pop	{r4, pc}
		return -EINVAL;
   267ac:	f06f 0015 	mvn.w	r0, #21
   267b0:	4770      	bx	lr
		return -ENOENT;
   267b2:	f06f 0001 	mvn.w	r0, #1
}
   267b6:	bd10      	pop	{r4, pc}

000267b8 <_net_app_select_net_ctx>:
	if (ctx->app_type == NET_APP_CLIENT) {
   267b8:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   267bc:	2b02      	cmp	r3, #2
   267be:	d128      	bne.n	26812 <_net_app_select_net_ctx+0x5a>
	if (ctx->proto == IPPROTO_UDP) {
   267c0:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   267c4:	2b11      	cmp	r3, #17
   267c6:	d009      	beq.n	267dc <_net_app_select_net_ctx+0x24>
		if (!dst) {
   267c8:	b1c1      	cbz	r1, 267fc <_net_app_select_net_ctx+0x44>
			if (dst->sa_family == AF_INET) {
   267ca:	880b      	ldrh	r3, [r1, #0]
   267cc:	2b02      	cmp	r3, #2
   267ce:	d01c      	beq.n	2680a <_net_app_select_net_ctx+0x52>
			if (dst->sa_family == AF_INET6) {
   267d0:	2b0a      	cmp	r3, #10
   267d2:	d016      	beq.n	26802 <_net_app_select_net_ctx+0x4a>
			if (dst->sa_family == AF_UNSPEC) {
   267d4:	b9db      	cbnz	r3, 2680e <_net_app_select_net_ctx+0x56>
				return ctx->default_ctx->ctx;
   267d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   267d8:	6818      	ldr	r0, [r3, #0]
   267da:	4770      	bx	lr
		if (!dst) {
   267dc:	b131      	cbz	r1, 267ec <_net_app_select_net_ctx+0x34>
			if (ctx->is_tls) {
   267de:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   267e2:	f013 0f02 	tst.w	r3, #2
   267e6:	d0f0      	beq.n	267ca <_net_app_select_net_ctx+0x12>
				return NULL;
   267e8:	2000      	movs	r0, #0
   267ea:	4770      	bx	lr
			if (ctx->is_tls) {
   267ec:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   267f0:	f013 0f02 	tst.w	r3, #2
   267f4:	d107      	bne.n	26806 <_net_app_select_net_ctx+0x4e>
				return ctx->default_ctx->ctx;
   267f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   267f8:	6818      	ldr	r0, [r3, #0]
   267fa:	4770      	bx	lr
			return ctx->default_ctx->ctx;
   267fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
   267fe:	6818      	ldr	r0, [r3, #0]
   26800:	4770      	bx	lr
				return ctx->ipv6.ctx;
   26802:	6800      	ldr	r0, [r0, #0]
   26804:	4770      	bx	lr
				return NULL;
   26806:	2000      	movs	r0, #0
   26808:	4770      	bx	lr
				return NULL;
   2680a:	2000      	movs	r0, #0
   2680c:	4770      	bx	lr
	return NULL;
   2680e:	2000      	movs	r0, #0
   26810:	4770      	bx	lr
	struct net_context *net_ctx = NULL;
   26812:	2000      	movs	r0, #0
}
   26814:	4770      	bx	lr

00026816 <net_app_set_cb>:
	if (!ctx) {
   26816:	b170      	cbz	r0, 26836 <net_app_set_cb+0x20>
{
   26818:	b410      	push	{r4}
   2681a:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   2681c:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   26820:	f010 0f01 	tst.w	r0, #1
   26824:	d00a      	beq.n	2683c <net_app_set_cb+0x26>
	ctx->cb.connect = connect_cb;
   26826:	63e1      	str	r1, [r4, #60]	; 0x3c
	ctx->cb.recv = recv_cb;
   26828:	6422      	str	r2, [r4, #64]	; 0x40
	ctx->cb.send = send_cb;
   2682a:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->cb.close = close_cb;
   2682c:	9b01      	ldr	r3, [sp, #4]
   2682e:	64a3      	str	r3, [r4, #72]	; 0x48
	return 0;
   26830:	2000      	movs	r0, #0
}
   26832:	bc10      	pop	{r4}
   26834:	4770      	bx	lr
		return -EINVAL;
   26836:	f06f 0015 	mvn.w	r0, #21
   2683a:	4770      	bx	lr
		return -ENOENT;
   2683c:	f06f 0001 	mvn.w	r0, #1
   26840:	e7f7      	b.n	26832 <net_app_set_cb+0x1c>
	...

00026844 <net_app_send_pkt>:
		     s32_t timeout,
		     void *user_data_send)
{
	int ret;

	if (!ctx) {
   26844:	2800      	cmp	r0, #0
   26846:	d064      	beq.n	26912 <net_app_send_pkt+0xce>
{
   26848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2684c:	b08a      	sub	sp, #40	; 0x28
   2684e:	460d      	mov	r5, r1
   26850:	4616      	mov	r6, r2
   26852:	461f      	mov	r7, r3
   26854:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   26856:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   2685a:	f013 0f01 	tst.w	r3, #1
   2685e:	d05b      	beq.n	26918 <net_app_send_pkt+0xd4>
	return pkt->appdatalen;
   26860:	8e08      	ldrh	r0, [r1, #48]	; 0x30
	 * will be put back just before sending the packet. Normally the
	 * data that is sent does not contain IP header, but if the caller
	 * replies the packet directly back, the IP header could be there
	 * at this point.
	 */
	if (net_pkt_appdatalen(pkt) > 0) {
   26862:	b188      	cbz	r0, 26888 <net_app_send_pkt+0x44>
		int header_len;

		header_len = net_buf_frags_len(pkt->frags) -
   26864:	f8d1 e008 	ldr.w	lr, [r1, #8]
   26868:	4673      	mov	r3, lr
	size_t bytes = 0;
   2686a:	2100      	movs	r1, #0
   2686c:	e002      	b.n	26874 <net_app_send_pkt+0x30>
		bytes += buf->len;
   2686e:	899a      	ldrh	r2, [r3, #12]
   26870:	4411      	add	r1, r2
		buf = buf->frags;
   26872:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   26874:	2b00      	cmp	r3, #0
   26876:	d1fa      	bne.n	2686e <net_app_send_pkt+0x2a>
   26878:	1a09      	subs	r1, r1, r0
			net_pkt_appdatalen(pkt);
		if (header_len > 0) {
   2687a:	2900      	cmp	r1, #0
   2687c:	dd0d      	ble.n	2689a <net_app_send_pkt+0x56>
			net_buf_pull(pkt->frags, header_len);
   2687e:	f10e 0008 	add.w	r0, lr, #8
   26882:	f7f4 f9f8 	bl	1ac76 <net_buf_simple_pull>
   26886:	e008      	b.n	2689a <net_app_send_pkt+0x56>
		}
	} else {
		net_pkt_set_appdatalen(pkt, net_buf_frags_len(pkt->frags));
   26888:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   2688a:	2200      	movs	r2, #0
   2688c:	e002      	b.n	26894 <net_app_send_pkt+0x50>
		bytes += buf->len;
   2688e:	8999      	ldrh	r1, [r3, #12]
   26890:	440a      	add	r2, r1
		buf = buf->frags;
   26892:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   26894:	2b00      	cmp	r3, #0
   26896:	d1fa      	bne.n	2688e <net_app_send_pkt+0x4a>
	pkt->appdatalen = len;
   26898:	862a      	strh	r2, [r5, #48]	; 0x30
	}

	if (ctx->proto == IPPROTO_UDP) {
   2689a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   2689e:	2b11      	cmp	r3, #17
   268a0:	d00e      	beq.n	268c0 <net_app_send_pkt+0x7c>
				}
			}
		}
	}

	ret = ctx->send_data(pkt, dst, dst_len, _app_send, timeout,
   268a2:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
   268a6:	9402      	str	r4, [sp, #8]
   268a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   268aa:	9301      	str	r3, [sp, #4]
   268ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
   268ae:	9300      	str	r3, [sp, #0]
   268b0:	4b21      	ldr	r3, [pc, #132]	; (26938 <net_app_send_pkt+0xf4>)
   268b2:	463a      	mov	r2, r7
   268b4:	4631      	mov	r1, r6
   268b6:	4628      	mov	r0, r5
   268b8:	47c0      	blx	r8
	if (ret < 0) {
		NET_DBG("Cannot send to peer (%d)", ret);
	}

	return ret;
}
   268ba:	b00a      	add	sp, #40	; 0x28
   268bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!dst) {
   268c0:	b1de      	cbz	r6, 268fa <net_app_send_pkt+0xb6>
	return pkt->family;
   268c2:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   268c6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   268ca:	2b02      	cmp	r3, #2
   268cc:	d02d      	beq.n	2692a <net_app_send_pkt+0xe6>
				if (net_pkt_family(pkt) == AF_INET6) {
   268ce:	2b0a      	cmp	r3, #10
   268d0:	d12e      	bne.n	26930 <net_app_send_pkt+0xec>
					net_ipaddr_copy(
   268d2:	af04      	add	r7, sp, #16
   268d4:	6830      	ldr	r0, [r6, #0]
   268d6:	6871      	ldr	r1, [r6, #4]
   268d8:	68b2      	ldr	r2, [r6, #8]
   268da:	68f3      	ldr	r3, [r6, #12]
   268dc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   268de:	6930      	ldr	r0, [r6, #16]
   268e0:	6971      	ldr	r1, [r6, #20]
   268e2:	c703      	stmia	r7!, {r0, r1}
   268e4:	af04      	add	r7, sp, #16
   268e6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   268e8:	61e0      	str	r0, [r4, #28]
   268ea:	6221      	str	r1, [r4, #32]
   268ec:	6262      	str	r2, [r4, #36]	; 0x24
   268ee:	62a3      	str	r3, [r4, #40]	; 0x28
   268f0:	cf03      	ldmia	r7!, {r0, r1}
   268f2:	62e0      	str	r0, [r4, #44]	; 0x2c
   268f4:	6321      	str	r1, [r4, #48]	; 0x30
					dst_len = sizeof(struct sockaddr_in6);
   268f6:	2718      	movs	r7, #24
   268f8:	e7d3      	b.n	268a2 <net_app_send_pkt+0x5e>
   268fa:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   268fe:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   26902:	2b02      	cmp	r3, #2
   26904:	d00b      	beq.n	2691e <net_app_send_pkt+0xda>
				if (net_pkt_family(pkt) == AF_INET6) {
   26906:	2b0a      	cmp	r3, #10
   26908:	d10c      	bne.n	26924 <net_app_send_pkt+0xe0>
					dst = &ctx->ipv6.remote;
   2690a:	f104 061c 	add.w	r6, r4, #28
					dst_len = sizeof(struct sockaddr_in6);
   2690e:	2718      	movs	r7, #24
   26910:	e7c7      	b.n	268a2 <net_app_send_pkt+0x5e>
		return -EINVAL;
   26912:	f06f 0015 	mvn.w	r0, #21
   26916:	4770      	bx	lr
		return -ENOENT;
   26918:	f06f 0001 	mvn.w	r0, #1
   2691c:	e7cd      	b.n	268ba <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   2691e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26922:	e7ca      	b.n	268ba <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   26924:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26928:	e7c7      	b.n	268ba <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   2692a:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   2692e:	e7c4      	b.n	268ba <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   26930:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26934:	e7c1      	b.n	268ba <net_app_send_pkt+0x76>
   26936:	bf00      	nop
   26938:	00026631 	.word	0x00026631

0002693c <net_app_get_net_pkt>:
}

struct net_pkt *net_app_get_net_pkt(struct net_app_ctx *ctx,
				    sa_family_t family,
				    s32_t timeout)
{
   2693c:	b510      	push	{r4, lr}
   2693e:	b086      	sub	sp, #24
	struct net_context *net_ctx;
	struct sockaddr dst = { 0 };
   26940:	2300      	movs	r3, #0
   26942:	9300      	str	r3, [sp, #0]
   26944:	9301      	str	r3, [sp, #4]
   26946:	9302      	str	r3, [sp, #8]
   26948:	9303      	str	r3, [sp, #12]
   2694a:	9304      	str	r3, [sp, #16]
   2694c:	9305      	str	r3, [sp, #20]

	if (!ctx) {
   2694e:	b198      	cbz	r0, 26978 <net_app_get_net_pkt+0x3c>
   26950:	4603      	mov	r3, r0
		return NULL;
	}

	if (!ctx->is_init) {
   26952:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   26956:	f010 0f01 	tst.w	r0, #1
   2695a:	d00f      	beq.n	2697c <net_app_get_net_pkt+0x40>
   2695c:	4618      	mov	r0, r3
   2695e:	4614      	mov	r4, r2
   26960:	460b      	mov	r3, r1
		return NULL;
	}

	dst.sa_family = family;
   26962:	a906      	add	r1, sp, #24
   26964:	f821 3d18 	strh.w	r3, [r1, #-24]!

	net_ctx = _net_app_select_net_ctx(ctx, &dst);
   26968:	f7ff ff26 	bl	267b8 <_net_app_select_net_ctx>
	if (!net_ctx) {
   2696c:	b140      	cbz	r0, 26980 <net_app_get_net_pkt+0x44>
		return NULL;
	}

	return net_pkt_get_tx(net_ctx, timeout);
   2696e:	4621      	mov	r1, r4
   26970:	f7f6 fe24 	bl	1d5bc <net_pkt_get_tx>
}
   26974:	b006      	add	sp, #24
   26976:	bd10      	pop	{r4, pc}
		return NULL;
   26978:	2000      	movs	r0, #0
   2697a:	e7fb      	b.n	26974 <net_app_get_net_pkt+0x38>
		return NULL;
   2697c:	2000      	movs	r0, #0
   2697e:	e7f9      	b.n	26974 <net_app_get_net_pkt+0x38>
		return NULL;
   26980:	2000      	movs	r0, #0
   26982:	e7f7      	b.n	26974 <net_app_get_net_pkt+0x38>

00026984 <net_app_close>:

int net_app_close(struct net_app_ctx *ctx)
{
	struct net_context *net_ctx;

	if (!ctx) {
   26984:	b1c0      	cbz	r0, 269b8 <net_app_close+0x34>
{
   26986:	b538      	push	{r3, r4, r5, lr}
   26988:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   2698a:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   2698e:	f013 0f01 	tst.w	r3, #1
   26992:	d014      	beq.n	269be <net_app_close+0x3a>
		ctx->tls.close_requested = true;
		return -EINPROGRESS;
	}
#endif

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   26994:	2100      	movs	r1, #0
   26996:	f7ff ff0f 	bl	267b8 <_net_app_select_net_ctx>
   2699a:	4605      	mov	r5, r0

	if (ctx->cb.close) {
   2699c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2699e:	b11b      	cbz	r3, 269a8 <net_app_close+0x24>
		ctx->cb.close(ctx, 0, ctx->user_data);
   269a0:	6f22      	ldr	r2, [r4, #112]	; 0x70
   269a2:	2100      	movs	r1, #0
   269a4:	4620      	mov	r0, r4
   269a6:	4798      	blx	r3
			}
		}
	}
#endif

	if (net_ctx) {
   269a8:	b165      	cbz	r5, 269c4 <net_app_close+0x40>
		net_ctx->net_app = NULL;
   269aa:	2400      	movs	r4, #0
   269ac:	666c      	str	r4, [r5, #100]	; 0x64
		net_context_put(net_ctx);
   269ae:	4628      	mov	r0, r5
   269b0:	f7f6 f9a2 	bl	1ccf8 <net_context_put>
	}

	return 0;
   269b4:	4620      	mov	r0, r4
   269b6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   269b8:	f06f 0015 	mvn.w	r0, #21
   269bc:	4770      	bx	lr
		return -ENOENT;
   269be:	f06f 0001 	mvn.w	r0, #1
   269c2:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   269c4:	2000      	movs	r0, #0
}
   269c6:	bd38      	pop	{r3, r4, r5, pc}

000269c8 <_net_app_bt_setup>:

static struct bt_gatt_service ipss_svc = BT_GATT_SERVICE(attrs);
#endif

int _net_app_bt_setup(void)
{
   269c8:	b510      	push	{r4, lr}
	struct net_if *iface;
	struct device *dev;
	int err;

	err = bt_enable(NULL);
   269ca:	2000      	movs	r0, #0
   269cc:	f7df fdea 	bl	65a4 <bt_enable>
	if (err < 0 && err != -EALREADY) {
   269d0:	1e03      	subs	r3, r0, #0
   269d2:	db14      	blt.n	269fe <_net_app_bt_setup+0x36>
		return err;
	}

	dev = device_get_binding("net_bt");
   269d4:	4810      	ldr	r0, [pc, #64]	; (26a18 <_net_app_bt_setup+0x50>)
   269d6:	f001 f939 	bl	27c4c <device_get_binding>
	if (!dev) {
   269da:	b1b8      	cbz	r0, 26a0c <_net_app_bt_setup+0x44>
		return -ENODEV;
	}

	iface = net_if_lookup_by_dev(dev);
   269dc:	f7f4 fc30 	bl	1b240 <net_if_lookup_by_dev>
	if (!iface) {
   269e0:	4604      	mov	r4, r0
   269e2:	b1b0      	cbz	r0, 26a12 <_net_app_bt_setup+0x4a>
		return -EINVAL;
	}

#if defined(CONFIG_NET_APP_BT_NODE)
	bt_gatt_service_register(&ipss_svc);
   269e4:	480d      	ldr	r0, [pc, #52]	; (26a1c <_net_app_bt_setup+0x54>)
   269e6:	f7e3 fcf7 	bl	a3d8 <bt_gatt_service_register>

	if (net_mgmt(NET_REQUEST_BT_ADVERTISE, iface, ADV_STR,
   269ea:	2303      	movs	r3, #3
   269ec:	4a0c      	ldr	r2, [pc, #48]	; (26a20 <_net_app_bt_setup+0x58>)
   269ee:	4621      	mov	r1, r4
   269f0:	480c      	ldr	r0, [pc, #48]	; (26a24 <_net_app_bt_setup+0x5c>)
   269f2:	f7f7 fe6b 	bl	1e6cc <net_mgmt_NET_REQUEST_BT_ADVERTISE>
   269f6:	4603      	mov	r3, r0
   269f8:	b928      	cbnz	r0, 26a06 <_net_app_bt_setup+0x3e>
		return -EINVAL;
	}
#endif

	return 0;
}
   269fa:	4618      	mov	r0, r3
   269fc:	bd10      	pop	{r4, pc}
	if (err < 0 && err != -EALREADY) {
   269fe:	f113 0f78 	cmn.w	r3, #120	; 0x78
   26a02:	d1fa      	bne.n	269fa <_net_app_bt_setup+0x32>
   26a04:	e7e6      	b.n	269d4 <_net_app_bt_setup+0xc>
		return -EINVAL;
   26a06:	f06f 0315 	mvn.w	r3, #21
   26a0a:	e7f6      	b.n	269fa <_net_app_bt_setup+0x32>
		return -ENODEV;
   26a0c:	f06f 0312 	mvn.w	r3, #18
   26a10:	e7f3      	b.n	269fa <_net_app_bt_setup+0x32>
		return -EINVAL;
   26a12:	f06f 0315 	mvn.w	r3, #21
   26a16:	e7f0      	b.n	269fa <_net_app_bt_setup+0x32>
   26a18:	00031068 	.word	0x00031068
   26a1c:	2000c614 	.word	0x2000c614
   26a20:	00031490 	.word	0x00031490
   26a24:	61550001 	.word	0x61550001

00026a28 <shell_run>:
#include <init.h>

#define SHELL_PROMPT "shell> "

int shell_run(struct device *dev)
{
   26a28:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	shell_init(SHELL_PROMPT);
   26a2a:	4802      	ldr	r0, [pc, #8]	; (26a34 <shell_run+0xc>)
   26a2c:	f000 fbbe 	bl	271ac <shell_init>
	return 0;
}
   26a30:	2000      	movs	r0, #0
   26a32:	bd08      	pop	{r3, pc}
   26a34:	00032390 	.word	0x00032390

00026a38 <get_prompt>:

static shell_cmd_function_t app_cmd_handler;
static shell_prompt_function_t app_prompt_handler;

static const char *get_prompt(void)
{
   26a38:	b508      	push	{r3, lr}
	if (app_prompt_handler) {
   26a3a:	4b0f      	ldr	r3, [pc, #60]	; (26a78 <get_prompt+0x40>)
   26a3c:	681b      	ldr	r3, [r3, #0]
   26a3e:	b123      	cbz	r3, 26a4a <get_prompt+0x12>
		const char *str;

		str = app_prompt_handler();
   26a40:	4798      	blx	r3
		if (str) {
   26a42:	4603      	mov	r3, r0
   26a44:	b108      	cbz	r0, 26a4a <get_prompt+0x12>

		return default_module_prompt;
	}

	return prompt;
}
   26a46:	4618      	mov	r0, r3
   26a48:	bd08      	pop	{r3, pc}
	if (default_module != -1) {
   26a4a:	4b0c      	ldr	r3, [pc, #48]	; (26a7c <get_prompt+0x44>)
   26a4c:	681b      	ldr	r3, [r3, #0]
   26a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26a52:	d00c      	beq.n	26a6e <get_prompt+0x36>
		if (__shell_cmd_start[default_module].prompt) {
   26a54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26a58:	009a      	lsls	r2, r3, #2
   26a5a:	4b09      	ldr	r3, [pc, #36]	; (26a80 <get_prompt+0x48>)
   26a5c:	4413      	add	r3, r2
   26a5e:	689b      	ldr	r3, [r3, #8]
   26a60:	b143      	cbz	r3, 26a74 <get_prompt+0x3c>
			ret = __shell_cmd_start[default_module].prompt();
   26a62:	4798      	blx	r3
			if (ret) {
   26a64:	4603      	mov	r3, r0
   26a66:	2800      	cmp	r0, #0
   26a68:	d1ed      	bne.n	26a46 <get_prompt+0xe>
		return default_module_prompt;
   26a6a:	4b06      	ldr	r3, [pc, #24]	; (26a84 <get_prompt+0x4c>)
   26a6c:	e7eb      	b.n	26a46 <get_prompt+0xe>
	return prompt;
   26a6e:	4b06      	ldr	r3, [pc, #24]	; (26a88 <get_prompt+0x50>)
   26a70:	681b      	ldr	r3, [r3, #0]
   26a72:	e7e8      	b.n	26a46 <get_prompt+0xe>
		return default_module_prompt;
   26a74:	4b03      	ldr	r3, [pc, #12]	; (26a84 <get_prompt+0x4c>)
   26a76:	e7e6      	b.n	26a46 <get_prompt+0xe>
   26a78:	20002570 	.word	0x20002570
   26a7c:	2000c620 	.word	0x2000c620
   26a80:	2000d0e8 	.word	0x2000d0e8
   26a84:	20002720 	.word	0x20002720
   26a88:	20002738 	.word	0x20002738

00026a8c <exit_module>:
	return set_default_module(argv[1]);
}

static int exit_module(int argc, char *argv[])
{
	if (argc == 1) {
   26a8c:	2801      	cmp	r0, #1
   26a8e:	d001      	beq.n	26a94 <exit_module+0x8>
		default_module = -1;
	}

	return 0;
}
   26a90:	2000      	movs	r0, #0
   26a92:	4770      	bx	lr
		default_module = -1;
   26a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26a98:	4b01      	ldr	r3, [pc, #4]	; (26aa0 <exit_module+0x14>)
   26a9a:	601a      	str	r2, [r3, #0]
   26a9c:	e7f8      	b.n	26a90 <exit_module+0x4>
   26a9e:	bf00      	nop
   26aa0:	2000c620 	.word	0x2000c620

00026aa4 <print_module_commands>:
{
   26aa4:	b538      	push	{r3, r4, r5, lr}
   26aa6:	4605      	mov	r5, r0
	printk("help\n");
   26aa8:	480a      	ldr	r0, [pc, #40]	; (26ad4 <print_module_commands+0x30>)
   26aaa:	f7dc fa23 	bl	2ef4 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26aae:	2400      	movs	r4, #0
   26ab0:	e003      	b.n	26aba <print_module_commands+0x16>
		printk("%s\n", shell_module->commands[i].cmd_name);
   26ab2:	4809      	ldr	r0, [pc, #36]	; (26ad8 <print_module_commands+0x34>)
   26ab4:	f7dc fa1e 	bl	2ef4 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26ab8:	3401      	adds	r4, #1
   26aba:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26abe:	009a      	lsls	r2, r3, #2
   26ac0:	4b06      	ldr	r3, [pc, #24]	; (26adc <print_module_commands+0x38>)
   26ac2:	4413      	add	r3, r2
   26ac4:	6859      	ldr	r1, [r3, #4]
   26ac6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26aca:	0093      	lsls	r3, r2, #2
   26acc:	58c9      	ldr	r1, [r1, r3]
   26ace:	2900      	cmp	r1, #0
   26ad0:	d1ef      	bne.n	26ab2 <print_module_commands+0xe>
}
   26ad2:	bd38      	pop	{r3, r4, r5, pc}
   26ad4:	0003244c 	.word	0x0003244c
   26ad8:	00031668 	.word	0x00031668
   26adc:	2000d0e8 	.word	0x2000d0e8

00026ae0 <line2argv>:
{
   26ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26ae2:	4604      	mov	r4, r0
   26ae4:	460e      	mov	r6, r1
   26ae6:	4617      	mov	r7, r2
	if (!strlen(str)) {
   26ae8:	f7d9 fe0a 	bl	700 <strlen>
   26aec:	b918      	cbnz	r0, 26af6 <line2argv+0x16>
   26aee:	4605      	mov	r5, r0
}
   26af0:	4628      	mov	r0, r5
   26af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		str++;
   26af4:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   26af6:	7823      	ldrb	r3, [r4, #0]
   26af8:	2b20      	cmp	r3, #32
   26afa:	d0fb      	beq.n	26af4 <line2argv+0x14>
	if (!*str) {
   26afc:	b30b      	cbz	r3, 26b42 <line2argv+0x62>
	argv[argc++] = str;
   26afe:	6034      	str	r4, [r6, #0]
   26b00:	2501      	movs	r5, #1
	while ((str = strchr(str, ' '))) {
   26b02:	e00a      	b.n	26b1a <line2argv+0x3a>
			str++;
   26b04:	3401      	adds	r4, #1
		while (*str && *str == ' ') {
   26b06:	7823      	ldrb	r3, [r4, #0]
   26b08:	2b20      	cmp	r3, #32
   26b0a:	d0fb      	beq.n	26b04 <line2argv+0x24>
		if (!*str) {
   26b0c:	b1ab      	cbz	r3, 26b3a <line2argv+0x5a>
		argv[argc++] = str;
   26b0e:	1c6b      	adds	r3, r5, #1
   26b10:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
		if (argc == size) {
   26b14:	42bb      	cmp	r3, r7
   26b16:	d00a      	beq.n	26b2e <line2argv+0x4e>
		argv[argc++] = str;
   26b18:	461d      	mov	r5, r3
	while ((str = strchr(str, ' '))) {
   26b1a:	2120      	movs	r1, #32
   26b1c:	4620      	mov	r0, r4
   26b1e:	f003 fbe9 	bl	2a2f4 <strchr>
   26b22:	4603      	mov	r3, r0
   26b24:	b148      	cbz	r0, 26b3a <line2argv+0x5a>
		*str++ = '\0';
   26b26:	1c5c      	adds	r4, r3, #1
   26b28:	2200      	movs	r2, #0
   26b2a:	701a      	strb	r2, [r3, #0]
		while (*str && *str == ' ') {
   26b2c:	e7eb      	b.n	26b06 <line2argv+0x26>
			printk("Too many parameters (max %zu)\n", size - 1);
   26b2e:	1e79      	subs	r1, r7, #1
   26b30:	4805      	ldr	r0, [pc, #20]	; (26b48 <line2argv+0x68>)
   26b32:	f7dc f9df 	bl	2ef4 <printk>
			return 0;
   26b36:	2500      	movs	r5, #0
   26b38:	e7da      	b.n	26af0 <line2argv+0x10>
	argv[argc] = NULL;
   26b3a:	2300      	movs	r3, #0
   26b3c:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	return argc;
   26b40:	e7d6      	b.n	26af0 <line2argv+0x10>
		return 0;
   26b42:	2500      	movs	r5, #0
   26b44:	e7d4      	b.n	26af0 <line2argv+0x10>
   26b46:	bf00      	nop
   26b48:	0003242c 	.word	0x0003242c

00026b4c <get_destination_module>:
{
   26b4c:	b538      	push	{r3, r4, r5, lr}
   26b4e:	4605      	mov	r5, r0
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   26b50:	2400      	movs	r4, #0
   26b52:	4a0c      	ldr	r2, [pc, #48]	; (26b84 <get_destination_module+0x38>)
   26b54:	4b0c      	ldr	r3, [pc, #48]	; (26b88 <get_destination_module+0x3c>)
   26b56:	1a9b      	subs	r3, r3, r2
   26b58:	109b      	asrs	r3, r3, #2
   26b5a:	4a0c      	ldr	r2, [pc, #48]	; (26b8c <get_destination_module+0x40>)
   26b5c:	fb02 f303 	mul.w	r3, r2, r3
   26b60:	429c      	cmp	r4, r3
   26b62:	da0b      	bge.n	26b7c <get_destination_module+0x30>
		if (!strncmp(module_str,
   26b64:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26b68:	0093      	lsls	r3, r2, #2
   26b6a:	2214      	movs	r2, #20
   26b6c:	4905      	ldr	r1, [pc, #20]	; (26b84 <get_destination_module+0x38>)
   26b6e:	58c9      	ldr	r1, [r1, r3]
   26b70:	4628      	mov	r0, r5
   26b72:	f003 fc91 	bl	2a498 <strncmp>
   26b76:	b118      	cbz	r0, 26b80 <get_destination_module+0x34>
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   26b78:	3401      	adds	r4, #1
   26b7a:	e7ea      	b.n	26b52 <get_destination_module+0x6>
	return -1;
   26b7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   26b80:	4620      	mov	r0, r4
   26b82:	bd38      	pop	{r3, r4, r5, pc}
   26b84:	2000d0e8 	.word	0x2000d0e8
   26b88:	2000d0f4 	.word	0x2000d0f4
   26b8c:	aaaaaaab 	.word	0xaaaaaaab

00026b90 <set_default_module>:
{
   26b90:	b538      	push	{r3, r4, r5, lr}
   26b92:	4604      	mov	r4, r0
	if (strlen(name) > MODULE_NAME_MAX_LEN) {
   26b94:	f7d9 fdb4 	bl	700 <strlen>
   26b98:	2814      	cmp	r0, #20
   26b9a:	d813      	bhi.n	26bc4 <set_default_module+0x34>
	module = get_destination_module(name);
   26b9c:	4620      	mov	r0, r4
   26b9e:	f7ff ffd5 	bl	26b4c <get_destination_module>
	if (module == -1) {
   26ba2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26ba6:	d014      	beq.n	26bd2 <set_default_module+0x42>
	default_module = module;
   26ba8:	4b0d      	ldr	r3, [pc, #52]	; (26be0 <set_default_module+0x50>)
   26baa:	6018      	str	r0, [r3, #0]
	strncpy(default_module_prompt, name, MODULE_NAME_MAX_LEN);
   26bac:	4d0d      	ldr	r5, [pc, #52]	; (26be4 <set_default_module+0x54>)
   26bae:	2214      	movs	r2, #20
   26bb0:	4621      	mov	r1, r4
   26bb2:	4628      	mov	r0, r5
   26bb4:	f003 fcc2 	bl	2a53c <strncpy>
	strcat(default_module_prompt, "> ");
   26bb8:	490b      	ldr	r1, [pc, #44]	; (26be8 <set_default_module+0x58>)
   26bba:	4628      	mov	r0, r5
   26bbc:	f003 fb7a 	bl	2a2b4 <strcat>
	return 0;
   26bc0:	2000      	movs	r0, #0
}
   26bc2:	bd38      	pop	{r3, r4, r5, pc}
		printk("Module name %s is too long, default is not changed\n",
   26bc4:	4621      	mov	r1, r4
   26bc6:	4809      	ldr	r0, [pc, #36]	; (26bec <set_default_module+0x5c>)
   26bc8:	f7dc f994 	bl	2ef4 <printk>
		return -EINVAL;
   26bcc:	f06f 0015 	mvn.w	r0, #21
   26bd0:	bd38      	pop	{r3, r4, r5, pc}
		printk("Illegal module %s, default is not changed\n", name);
   26bd2:	4621      	mov	r1, r4
   26bd4:	4806      	ldr	r0, [pc, #24]	; (26bf0 <set_default_module+0x60>)
   26bd6:	f7dc f98d 	bl	2ef4 <printk>
		return -EINVAL;
   26bda:	f06f 0015 	mvn.w	r0, #21
   26bde:	bd38      	pop	{r3, r4, r5, pc}
   26be0:	2000c620 	.word	0x2000c620
   26be4:	20002720 	.word	0x20002720
   26be8:	000324b4 	.word	0x000324b4
   26bec:	00032454 	.word	0x00032454
   26bf0:	00032488 	.word	0x00032488

00026bf4 <select_module>:
{
   26bf4:	b508      	push	{r3, lr}
	if (argc == 1) {
   26bf6:	2801      	cmp	r0, #1
   26bf8:	d003      	beq.n	26c02 <select_module+0xe>
	return set_default_module(argv[1]);
   26bfa:	6848      	ldr	r0, [r1, #4]
   26bfc:	f7ff ffc8 	bl	26b90 <set_default_module>
}
   26c00:	bd08      	pop	{r3, pc}
		default_module = -1;
   26c02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26c06:	4b02      	ldr	r3, [pc, #8]	; (26c10 <select_module+0x1c>)
   26c08:	601a      	str	r2, [r3, #0]
		return 0;
   26c0a:	2000      	movs	r0, #0
   26c0c:	bd08      	pop	{r3, pc}
   26c0e:	bf00      	nop
   26c10:	2000c620 	.word	0x2000c620

00026c14 <get_command_and_module>:
{
   26c14:	b538      	push	{r3, r4, r5, lr}
   26c16:	4604      	mov	r4, r0
	*module = -1;
   26c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26c1c:	600b      	str	r3, [r1, #0]
	if (!argv[0]) {
   26c1e:	6800      	ldr	r0, [r0, #0]
   26c20:	b140      	cbz	r0, 26c34 <get_command_and_module+0x20>
   26c22:	460d      	mov	r5, r1
	if (default_module == -1) {
   26c24:	4b12      	ldr	r3, [pc, #72]	; (26c70 <get_command_and_module+0x5c>)
   26c26:	681b      	ldr	r3, [r3, #0]
   26c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26c2c:	d007      	beq.n	26c3e <get_command_and_module+0x2a>
	*module = default_module;
   26c2e:	600b      	str	r3, [r1, #0]
	return argv[0];
   26c30:	6820      	ldr	r0, [r4, #0]
}
   26c32:	bd38      	pop	{r3, r4, r5, pc}
		printk("Unrecognized command\n");
   26c34:	480f      	ldr	r0, [pc, #60]	; (26c74 <get_command_and_module+0x60>)
   26c36:	f7dc f95d 	bl	2ef4 <printk>
		return NULL;
   26c3a:	2000      	movs	r0, #0
   26c3c:	bd38      	pop	{r3, r4, r5, pc}
		if (!argv[1] || argv[1][0] == '\0') {
   26c3e:	6863      	ldr	r3, [r4, #4]
   26c40:	b14b      	cbz	r3, 26c56 <get_command_and_module+0x42>
   26c42:	781b      	ldrb	r3, [r3, #0]
   26c44:	b13b      	cbz	r3, 26c56 <get_command_and_module+0x42>
		*module = get_destination_module(argv[0]);
   26c46:	f7ff ff81 	bl	26b4c <get_destination_module>
   26c4a:	6028      	str	r0, [r5, #0]
		if (*module == -1) {
   26c4c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26c50:	d007      	beq.n	26c62 <get_command_and_module+0x4e>
		return argv[1];
   26c52:	6860      	ldr	r0, [r4, #4]
   26c54:	bd38      	pop	{r3, r4, r5, pc}
			printk("Unrecognized command: %s\n", argv[0]);
   26c56:	4601      	mov	r1, r0
   26c58:	4807      	ldr	r0, [pc, #28]	; (26c78 <get_command_and_module+0x64>)
   26c5a:	f7dc f94b 	bl	2ef4 <printk>
			return NULL;
   26c5e:	2000      	movs	r0, #0
   26c60:	bd38      	pop	{r3, r4, r5, pc}
			printk("Illegal module %s\n", argv[0]);
   26c62:	6821      	ldr	r1, [r4, #0]
   26c64:	4805      	ldr	r0, [pc, #20]	; (26c7c <get_command_and_module+0x68>)
   26c66:	f7dc f945 	bl	2ef4 <printk>
			return NULL;
   26c6a:	2000      	movs	r0, #0
   26c6c:	bd38      	pop	{r3, r4, r5, pc}
   26c6e:	bf00      	nop
   26c70:	2000c620 	.word	0x2000c620
   26c74:	000323e4 	.word	0x000323e4
   26c78:	000323fc 	.word	0x000323fc
   26c7c:	00032418 	.word	0x00032418

00026c80 <get_cb>:

static shell_cmd_function_t get_cb(int *argc, char *argv[], int *module)
{
   26c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const char *first_string = argv[0];
   26c82:	680c      	ldr	r4, [r1, #0]
	const struct shell_module *shell_module;
	const char *command;
	int i;

	if (!first_string || first_string[0] == '\0') {
   26c84:	b15c      	cbz	r4, 26c9e <get_cb+0x1e>
   26c86:	4606      	mov	r6, r0
   26c88:	460d      	mov	r5, r1
   26c8a:	4617      	mov	r7, r2
   26c8c:	7823      	ldrb	r3, [r4, #0]
   26c8e:	b133      	cbz	r3, 26c9e <get_cb+0x1e>
		printk("Illegal parameter\n");
		return NULL;
	}

	if (!strcmp(first_string, "help")) {
   26c90:	4929      	ldr	r1, [pc, #164]	; (26d38 <get_cb+0xb8>)
   26c92:	4620      	mov	r0, r4
   26c94:	f7d9 fbb8 	bl	408 <strcmp>
   26c98:	b930      	cbnz	r0, 26ca8 <get_cb+0x28>
		return show_help;
   26c9a:	4828      	ldr	r0, [pc, #160]	; (26d3c <get_cb+0xbc>)
   26c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printk("Illegal parameter\n");
   26c9e:	4828      	ldr	r0, [pc, #160]	; (26d40 <get_cb+0xc0>)
   26ca0:	f7dc f928 	bl	2ef4 <printk>
		return NULL;
   26ca4:	2000      	movs	r0, #0
   26ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "select")) {
   26ca8:	4926      	ldr	r1, [pc, #152]	; (26d44 <get_cb+0xc4>)
   26caa:	4620      	mov	r0, r4
   26cac:	f7d9 fbac 	bl	408 <strcmp>
   26cb0:	b908      	cbnz	r0, 26cb6 <get_cb+0x36>
		return select_module;
   26cb2:	4825      	ldr	r0, [pc, #148]	; (26d48 <get_cb+0xc8>)
   26cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "exit")) {
   26cb6:	4925      	ldr	r1, [pc, #148]	; (26d4c <get_cb+0xcc>)
   26cb8:	4620      	mov	r0, r4
   26cba:	f7d9 fba5 	bl	408 <strcmp>
   26cbe:	2800      	cmp	r0, #0
   26cc0:	d034      	beq.n	26d2c <get_cb+0xac>
		return exit_module;
	}

	if ((*argc == 1) && (default_module == -1)) {
   26cc2:	6833      	ldr	r3, [r6, #0]
   26cc4:	2b01      	cmp	r3, #1
   26cc6:	d01c      	beq.n	26d02 <get_cb+0x82>
		printk("Missing parameter\n");
		return NULL;
	}

	command = get_command_and_module(argv, module);
   26cc8:	4639      	mov	r1, r7
   26cca:	4628      	mov	r0, r5
   26ccc:	f7ff ffa2 	bl	26c14 <get_command_and_module>
   26cd0:	4606      	mov	r6, r0
	if ((*module == -1) || (command == NULL)) {
   26cd2:	683d      	ldr	r5, [r7, #0]
   26cd4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   26cd8:	d02a      	beq.n	26d30 <get_cb+0xb0>
   26cda:	b358      	cbz	r0, 26d34 <get_cb+0xb4>
   26cdc:	2400      	movs	r4, #0
		return NULL;
	}

	shell_module = &__shell_cmd_start[*module];
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26cde:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26ce2:	009a      	lsls	r2, r3, #2
   26ce4:	4b1a      	ldr	r3, [pc, #104]	; (26d50 <get_cb+0xd0>)
   26ce6:	4413      	add	r3, r2
   26ce8:	6859      	ldr	r1, [r3, #4]
   26cea:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26cee:	0093      	lsls	r3, r2, #2
   26cf0:	461f      	mov	r7, r3
   26cf2:	58c9      	ldr	r1, [r1, r3]
   26cf4:	b1c1      	cbz	r1, 26d28 <get_cb+0xa8>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   26cf6:	4630      	mov	r0, r6
   26cf8:	f7d9 fb86 	bl	408 <strcmp>
   26cfc:	b158      	cbz	r0, 26d16 <get_cb+0x96>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26cfe:	3401      	adds	r4, #1
   26d00:	e7ed      	b.n	26cde <get_cb+0x5e>
	if ((*argc == 1) && (default_module == -1)) {
   26d02:	4b14      	ldr	r3, [pc, #80]	; (26d54 <get_cb+0xd4>)
   26d04:	681b      	ldr	r3, [r3, #0]
   26d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26d0a:	d1dd      	bne.n	26cc8 <get_cb+0x48>
		printk("Missing parameter\n");
   26d0c:	4812      	ldr	r0, [pc, #72]	; (26d58 <get_cb+0xd8>)
   26d0e:	f7dc f8f1 	bl	2ef4 <printk>
		return NULL;
   26d12:	2000      	movs	r0, #0
   26d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return shell_module->commands[i].cb;
   26d16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   26d1a:	00aa      	lsls	r2, r5, #2
   26d1c:	4b0c      	ldr	r3, [pc, #48]	; (26d50 <get_cb+0xd0>)
   26d1e:	4413      	add	r3, r2
   26d20:	685b      	ldr	r3, [r3, #4]
   26d22:	441f      	add	r7, r3
   26d24:	6878      	ldr	r0, [r7, #4]
   26d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	return NULL;
   26d28:	2000      	movs	r0, #0
   26d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return exit_module;
   26d2c:	480b      	ldr	r0, [pc, #44]	; (26d5c <get_cb+0xdc>)
   26d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   26d30:	2000      	movs	r0, #0
   26d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26d34:	2000      	movs	r0, #0
}
   26d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26d38:	000323b8 	.word	0x000323b8
   26d3c:	00026e01 	.word	0x00026e01
   26d40:	000323a4 	.word	0x000323a4
   26d44:	000323c0 	.word	0x000323c0
   26d48:	00026bf5 	.word	0x00026bf5
   26d4c:	000323c8 	.word	0x000323c8
   26d50:	2000d0e8 	.word	0x2000d0e8
   26d54:	2000c620 	.word	0x2000c620
   26d58:	000323d0 	.word	0x000323d0
   26d5c:	00026a8d 	.word	0x00026a8d

00026d60 <show_cmd_help>:
{
   26d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26d64:	b083      	sub	sp, #12
   26d66:	4607      	mov	r7, r0
	int module = -1;
   26d68:	a902      	add	r1, sp, #8
   26d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26d6e:	f841 3d04 	str.w	r3, [r1, #-4]!
	command = get_command_and_module(argv, &module);
   26d72:	f7ff ff4f 	bl	26c14 <get_command_and_module>
	if ((module == -1) || (command == NULL)) {
   26d76:	9d01      	ldr	r5, [sp, #4]
   26d78:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   26d7c:	d031      	beq.n	26de2 <show_cmd_help+0x82>
   26d7e:	4606      	mov	r6, r0
   26d80:	b390      	cbz	r0, 26de8 <show_cmd_help+0x88>
   26d82:	2400      	movs	r4, #0
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26d84:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26d88:	009a      	lsls	r2, r3, #2
   26d8a:	4b19      	ldr	r3, [pc, #100]	; (26df0 <show_cmd_help+0x90>)
   26d8c:	4413      	add	r3, r2
   26d8e:	6859      	ldr	r1, [r3, #4]
   26d90:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26d94:	0093      	lsls	r3, r2, #2
   26d96:	4698      	mov	r8, r3
   26d98:	58c9      	ldr	r1, [r1, r3]
   26d9a:	b1c1      	cbz	r1, 26dce <show_cmd_help+0x6e>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   26d9c:	4630      	mov	r0, r6
   26d9e:	f7d9 fb33 	bl	408 <strcmp>
   26da2:	4681      	mov	r9, r0
   26da4:	b108      	cbz	r0, 26daa <show_cmd_help+0x4a>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26da6:	3401      	adds	r4, #1
   26da8:	e7ec      	b.n	26d84 <show_cmd_help+0x24>
			       shell_module->commands[i].cmd_name,
   26daa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   26dae:	00aa      	lsls	r2, r5, #2
   26db0:	4b0f      	ldr	r3, [pc, #60]	; (26df0 <show_cmd_help+0x90>)
   26db2:	4413      	add	r3, r2
   26db4:	685b      	ldr	r3, [r3, #4]
   26db6:	eb03 0208 	add.w	r2, r3, r8
			printk("%s %s\n",
   26dba:	f853 1008 	ldr.w	r1, [r3, r8]
			       shell_module->commands[i].help ?
   26dbe:	6892      	ldr	r2, [r2, #8]
			printk("%s %s\n",
   26dc0:	b11a      	cbz	r2, 26dca <show_cmd_help+0x6a>
   26dc2:	480c      	ldr	r0, [pc, #48]	; (26df4 <show_cmd_help+0x94>)
   26dc4:	f7dc f896 	bl	2ef4 <printk>
			return 0;
   26dc8:	e007      	b.n	26dda <show_cmd_help+0x7a>
			printk("%s %s\n",
   26dca:	4a0b      	ldr	r2, [pc, #44]	; (26df8 <show_cmd_help+0x98>)
   26dcc:	e7f9      	b.n	26dc2 <show_cmd_help+0x62>
	printk("Unrecognized command: %s\n", argv[0]);
   26dce:	6839      	ldr	r1, [r7, #0]
   26dd0:	480a      	ldr	r0, [pc, #40]	; (26dfc <show_cmd_help+0x9c>)
   26dd2:	f7dc f88f 	bl	2ef4 <printk>
	return -EINVAL;
   26dd6:	f06f 0915 	mvn.w	r9, #21
}
   26dda:	4648      	mov	r0, r9
   26ddc:	b003      	add	sp, #12
   26dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return 0;
   26de2:	f04f 0900 	mov.w	r9, #0
   26de6:	e7f8      	b.n	26dda <show_cmd_help+0x7a>
   26de8:	f04f 0900 	mov.w	r9, #0
   26dec:	e7f5      	b.n	26dda <show_cmd_help+0x7a>
   26dee:	bf00      	nop
   26df0:	2000d0e8 	.word	0x2000d0e8
   26df4:	000324e4 	.word	0x000324e4
   26df8:	0002ea98 	.word	0x0002ea98
   26dfc:	000323fc 	.word	0x000323fc

00026e00 <show_help>:
{
   26e00:	b510      	push	{r4, lr}
   26e02:	460c      	mov	r4, r1
	if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   26e04:	2802      	cmp	r0, #2
   26e06:	dc12      	bgt.n	26e2e <show_help+0x2e>
   26e08:	4b23      	ldr	r3, [pc, #140]	; (26e98 <show_help+0x98>)
   26e0a:	681b      	ldr	r3, [r3, #0]
   26e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26e10:	d001      	beq.n	26e16 <show_help+0x16>
   26e12:	2802      	cmp	r0, #2
   26e14:	d00b      	beq.n	26e2e <show_help+0x2e>
	if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   26e16:	2802      	cmp	r0, #2
   26e18:	d00d      	beq.n	26e36 <show_help+0x36>
   26e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26e1e:	d001      	beq.n	26e24 <show_help+0x24>
   26e20:	2801      	cmp	r0, #1
   26e22:	d008      	beq.n	26e36 <show_help+0x36>
		printk("Available modules:\n");
   26e24:	481d      	ldr	r0, [pc, #116]	; (26e9c <show_help+0x9c>)
   26e26:	f7dc f865 	bl	2ef4 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   26e2a:	2400      	movs	r4, #0
   26e2c:	e025      	b.n	26e7a <show_help+0x7a>
		return show_cmd_help(&argv[1]);
   26e2e:	1d20      	adds	r0, r4, #4
   26e30:	f7ff ff96 	bl	26d60 <show_cmd_help>
   26e34:	bd10      	pop	{r4, pc}
		if (default_module == -1) {
   26e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26e3a:	d007      	beq.n	26e4c <show_help+0x4c>
		print_module_commands(module);
   26e3c:	4618      	mov	r0, r3
   26e3e:	f7ff fe31 	bl	26aa4 <print_module_commands>
		printk("\nEnter 'exit' to leave current module.\n");
   26e42:	4817      	ldr	r0, [pc, #92]	; (26ea0 <show_help+0xa0>)
   26e44:	f7dc f856 	bl	2ef4 <printk>
	return 0;
   26e48:	2000      	movs	r0, #0
		printk("\nEnter 'exit' to leave current module.\n");
   26e4a:	bd10      	pop	{r4, pc}
			module = get_destination_module(argv[1]);
   26e4c:	6860      	ldr	r0, [r4, #4]
   26e4e:	f7ff fe7d 	bl	26b4c <get_destination_module>
   26e52:	4603      	mov	r3, r0
			if (module == -1) {
   26e54:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26e58:	d1f0      	bne.n	26e3c <show_help+0x3c>
				printk("Illegal module %s\n", argv[1]);
   26e5a:	6861      	ldr	r1, [r4, #4]
   26e5c:	4811      	ldr	r0, [pc, #68]	; (26ea4 <show_help+0xa4>)
   26e5e:	f7dc f849 	bl	2ef4 <printk>
				return -EINVAL;
   26e62:	f06f 0015 	mvn.w	r0, #21
   26e66:	bd10      	pop	{r4, pc}
			printk("%s\n", __shell_cmd_start[module].module_name);
   26e68:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26e6c:	0093      	lsls	r3, r2, #2
   26e6e:	4a0e      	ldr	r2, [pc, #56]	; (26ea8 <show_help+0xa8>)
   26e70:	58d1      	ldr	r1, [r2, r3]
   26e72:	480e      	ldr	r0, [pc, #56]	; (26eac <show_help+0xac>)
   26e74:	f7dc f83e 	bl	2ef4 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   26e78:	3401      	adds	r4, #1
   26e7a:	4a0b      	ldr	r2, [pc, #44]	; (26ea8 <show_help+0xa8>)
   26e7c:	4b0c      	ldr	r3, [pc, #48]	; (26eb0 <show_help+0xb0>)
   26e7e:	1a9b      	subs	r3, r3, r2
   26e80:	109b      	asrs	r3, r3, #2
   26e82:	4a0c      	ldr	r2, [pc, #48]	; (26eb4 <show_help+0xb4>)
   26e84:	fb02 f303 	mul.w	r3, r2, r3
   26e88:	429c      	cmp	r4, r3
   26e8a:	dbed      	blt.n	26e68 <show_help+0x68>
		printk("\nTo select a module, enter 'select <module name>'.\n");
   26e8c:	480a      	ldr	r0, [pc, #40]	; (26eb8 <show_help+0xb8>)
   26e8e:	f7dc f831 	bl	2ef4 <printk>
	return 0;
   26e92:	2000      	movs	r0, #0
}
   26e94:	bd10      	pop	{r4, pc}
   26e96:	bf00      	nop
   26e98:	2000c620 	.word	0x2000c620
   26e9c:	00032514 	.word	0x00032514
   26ea0:	000324ec 	.word	0x000324ec
   26ea4:	00032418 	.word	0x00032418
   26ea8:	2000d0e8 	.word	0x2000d0e8
   26eac:	00031668 	.word	0x00031668
   26eb0:	2000d0f4 	.word	0x2000d0f4
   26eb4:	aaaaaaab 	.word	0xaaaaaaab
   26eb8:	00032528 	.word	0x00032528

00026ebc <get_command_to_complete>:
		k_fifo_put(&avail_queue, cmd);
	}
}

static int get_command_to_complete(char *str, char **command_prefix)
{
   26ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26ec0:	b086      	sub	sp, #24
   26ec2:	4604      	mov	r4, r0
   26ec4:	4688      	mov	r8, r1
	char dest_str[MODULE_NAME_MAX_LEN];
	int dest = -1;
	char *start;

	/* remove ' ' at the beginning of the line */
	while (*str && *str == ' ') {
   26ec6:	e000      	b.n	26eca <get_command_to_complete+0xe>
		str++;
   26ec8:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   26eca:	7823      	ldrb	r3, [r4, #0]
   26ecc:	2b20      	cmp	r3, #32
   26ece:	d0fb      	beq.n	26ec8 <get_command_to_complete+0xc>
	}

	if (!*str) {
   26ed0:	b3a3      	cbz	r3, 26f3c <get_command_to_complete+0x80>
		return -1;
	}

	start = str;

	if (default_module != -1) {
   26ed2:	4b1f      	ldr	r3, [pc, #124]	; (26f50 <get_command_to_complete+0x94>)
   26ed4:	681d      	ldr	r5, [r3, #0]
   26ed6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   26eda:	d001      	beq.n	26ee0 <get_command_to_complete+0x24>
		dest = default_module;
		/* caller function already checks str len and put '\0' */
		*command_prefix = str;
   26edc:	f8c8 4000 	str.w	r4, [r8]

	/*
	 * In case of a default module: only one parameter is possible.
	 * Otherwise, only two parameters are possibles.
	 */
	str = strchr(str, ' ');
   26ee0:	2120      	movs	r1, #32
   26ee2:	4620      	mov	r0, r4
   26ee4:	f003 fa06 	bl	2a2f4 <strchr>
   26ee8:	4606      	mov	r6, r0
	if (default_module != -1) {
   26eea:	4b19      	ldr	r3, [pc, #100]	; (26f50 <get_command_to_complete+0x94>)
   26eec:	681f      	ldr	r7, [r3, #0]
   26eee:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   26ef2:	d004      	beq.n	26efe <get_command_to_complete+0x42>
		return (str == NULL) ? dest : -1;
   26ef4:	bb28      	cbnz	r0, 26f42 <get_command_to_complete+0x86>
	*command_prefix = str;
	str = strchr(str, ' ');

	/* only two parameters are possibles in case of no default module */
	return (str == NULL) ? dest : -1;
}
   26ef6:	4628      	mov	r0, r5
   26ef8:	b006      	add	sp, #24
   26efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (str == NULL) {
   26efe:	b318      	cbz	r0, 26f48 <get_command_to_complete+0x8c>
	if ((str - start + 1) >= MODULE_NAME_MAX_LEN) {
   26f00:	1b05      	subs	r5, r0, r4
   26f02:	1c6a      	adds	r2, r5, #1
   26f04:	2a13      	cmp	r2, #19
   26f06:	dc21      	bgt.n	26f4c <get_command_to_complete+0x90>
	strncpy(dest_str, start, (str - start + 1));
   26f08:	4621      	mov	r1, r4
   26f0a:	a801      	add	r0, sp, #4
   26f0c:	f003 fb16 	bl	2a53c <strncpy>
	dest_str[str - start] = '\0';
   26f10:	ab06      	add	r3, sp, #24
   26f12:	441d      	add	r5, r3
   26f14:	2300      	movs	r3, #0
   26f16:	f805 3c14 	strb.w	r3, [r5, #-20]
	dest = get_destination_module(dest_str);
   26f1a:	a801      	add	r0, sp, #4
   26f1c:	f7ff fe16 	bl	26b4c <get_destination_module>
   26f20:	4605      	mov	r5, r0
	if (dest == -1) {
   26f22:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26f26:	d0e6      	beq.n	26ef6 <get_command_to_complete+0x3a>
	str++;
   26f28:	1c70      	adds	r0, r6, #1
	*command_prefix = str;
   26f2a:	f8c8 0000 	str.w	r0, [r8]
	str = strchr(str, ' ');
   26f2e:	2120      	movs	r1, #32
   26f30:	f003 f9e0 	bl	2a2f4 <strchr>
	return (str == NULL) ? dest : -1;
   26f34:	2800      	cmp	r0, #0
   26f36:	d0de      	beq.n	26ef6 <get_command_to_complete+0x3a>
   26f38:	463d      	mov	r5, r7
   26f3a:	e7dc      	b.n	26ef6 <get_command_to_complete+0x3a>
		return -1;
   26f3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26f40:	e7d9      	b.n	26ef6 <get_command_to_complete+0x3a>
		return (str == NULL) ? dest : -1;
   26f42:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26f46:	e7d6      	b.n	26ef6 <get_command_to_complete+0x3a>
		return -1;
   26f48:	463d      	mov	r5, r7
   26f4a:	e7d4      	b.n	26ef6 <get_command_to_complete+0x3a>
		return -1;
   26f4c:	463d      	mov	r5, r7
   26f4e:	e7d2      	b.n	26ef6 <get_command_to_complete+0x3a>
   26f50:	2000c620 	.word	0x2000c620

00026f54 <completion>:

static u8_t completion(char *line, u8_t len)
{
   26f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26f58:	b087      	sub	sp, #28
   26f5a:	9002      	str	r0, [sp, #8]
	int common_chars = -1, space = 0;
	int i, dest, command_len;
	const struct shell_module *module;
	char *command_prefix;

	if (len >= (MODULE_NAME_MAX_LEN + COMMAND_MAX_LEN - 1)) {
   26f5c:	2944      	cmp	r1, #68	; 0x44
   26f5e:	d903      	bls.n	26f68 <completion+0x14>
		return 0;
   26f60:	2000      	movs	r0, #0
		printk(" ");
		line[len] = ' ';
	}

	return common_chars - command_len + space;
}
   26f62:	b007      	add	sp, #28
   26f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26f68:	4689      	mov	r9, r1
	line[len] = '\0';
   26f6a:	2300      	movs	r3, #0
   26f6c:	5443      	strb	r3, [r0, r1]
	dest = get_command_to_complete(line, &command_prefix);
   26f6e:	a905      	add	r1, sp, #20
   26f70:	f7ff ffa4 	bl	26ebc <get_command_to_complete>
   26f74:	4605      	mov	r5, r0
	if (dest == -1) {
   26f76:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26f7a:	f000 808f 	beq.w	2709c <completion+0x148>
	command_len = strlen(command_prefix);
   26f7e:	9805      	ldr	r0, [sp, #20]
   26f80:	f7d9 fbbe 	bl	700 <strlen>
   26f84:	9001      	str	r0, [sp, #4]
	for (i = 0; module->commands[i].cmd_name; i++) {
   26f86:	f04f 0b00 	mov.w	fp, #0
	int common_chars = -1, space = 0;
   26f8a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	const char *first_match = NULL;
   26f8e:	465f      	mov	r7, fp
   26f90:	9003      	str	r0, [sp, #12]
	for (i = 0; module->commands[i].cmd_name; i++) {
   26f92:	e01f      	b.n	26fd4 <completion+0x80>
			first_match = module->commands[i].cmd_name;
   26f94:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26f98:	009a      	lsls	r2, r3, #2
   26f9a:	4b42      	ldr	r3, [pc, #264]	; (270a4 <completion+0x150>)
   26f9c:	4413      	add	r3, r2
   26f9e:	685b      	ldr	r3, [r3, #4]
   26fa0:	f853 700a 	ldr.w	r7, [r3, sl]
			continue;
   26fa4:	e014      	b.n	26fd0 <completion+0x7c>
			printk("\n%s\n", first_match);
   26fa6:	4639      	mov	r1, r7
   26fa8:	483f      	ldr	r0, [pc, #252]	; (270a8 <completion+0x154>)
   26faa:	f7db ffa3 	bl	2ef4 <printk>
			common_chars = strlen(first_match);
   26fae:	4638      	mov	r0, r7
   26fb0:	f7d9 fba6 	bl	700 <strlen>
   26fb4:	4606      	mov	r6, r0
		for (j = 0; j < common_chars; j++) {
   26fb6:	e026      	b.n	27006 <completion+0xb2>
		printk("%s\n", module->commands[i].cmd_name);
   26fb8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26fbc:	009a      	lsls	r2, r3, #2
   26fbe:	4b39      	ldr	r3, [pc, #228]	; (270a4 <completion+0x150>)
   26fc0:	4413      	add	r3, r2
   26fc2:	685b      	ldr	r3, [r3, #4]
   26fc4:	f853 100a 	ldr.w	r1, [r3, sl]
   26fc8:	4838      	ldr	r0, [pc, #224]	; (270ac <completion+0x158>)
   26fca:	f7db ff93 	bl	2ef4 <printk>
		common_chars = j;
   26fce:	4626      	mov	r6, r4
	for (i = 0; module->commands[i].cmd_name; i++) {
   26fd0:	f10b 0b01 	add.w	fp, fp, #1
   26fd4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26fd8:	009a      	lsls	r2, r3, #2
   26fda:	4b32      	ldr	r3, [pc, #200]	; (270a4 <completion+0x150>)
   26fdc:	4413      	add	r3, r2
   26fde:	685a      	ldr	r2, [r3, #4]
   26fe0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   26fe4:	ea4f 0a83 	mov.w	sl, r3, lsl #2
   26fe8:	46d0      	mov	r8, sl
   26fea:	f852 100a 	ldr.w	r1, [r2, sl]
   26fee:	b1d1      	cbz	r1, 27026 <completion+0xd2>
		if (strncmp(command_prefix,
   26ff0:	9a01      	ldr	r2, [sp, #4]
   26ff2:	9805      	ldr	r0, [sp, #20]
   26ff4:	f003 fa50 	bl	2a498 <strncmp>
   26ff8:	4604      	mov	r4, r0
   26ffa:	2800      	cmp	r0, #0
   26ffc:	d1e8      	bne.n	26fd0 <completion+0x7c>
		if (!first_match) {
   26ffe:	2f00      	cmp	r7, #0
   27000:	d0c8      	beq.n	26f94 <completion+0x40>
		if (first_match && (common_chars < 0)) {
   27002:	2e00      	cmp	r6, #0
   27004:	dbcf      	blt.n	26fa6 <completion+0x52>
		for (j = 0; j < common_chars; j++) {
   27006:	42a6      	cmp	r6, r4
   27008:	ddd6      	ble.n	26fb8 <completion+0x64>
			if (first_match[j] != module->commands[i].cmd_name[j]) {
   2700a:	5d39      	ldrb	r1, [r7, r4]
   2700c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   27010:	009a      	lsls	r2, r3, #2
   27012:	4b24      	ldr	r3, [pc, #144]	; (270a4 <completion+0x150>)
   27014:	4413      	add	r3, r2
   27016:	685b      	ldr	r3, [r3, #4]
   27018:	f853 3008 	ldr.w	r3, [r3, r8]
   2701c:	5d1b      	ldrb	r3, [r3, r4]
   2701e:	4299      	cmp	r1, r3
   27020:	d1ca      	bne.n	26fb8 <completion+0x64>
		for (j = 0; j < common_chars; j++) {
   27022:	3401      	adds	r4, #1
   27024:	e7ef      	b.n	27006 <completion+0xb2>
   27026:	f8dd a00c 	ldr.w	sl, [sp, #12]
	if (!first_match) {
   2702a:	2f00      	cmp	r7, #0
   2702c:	d038      	beq.n	270a0 <completion+0x14c>
	if (common_chars >= 0) {
   2702e:	2e00      	cmp	r6, #0
   27030:	db0d      	blt.n	2704e <completion+0xfa>
		printk("%s", get_prompt());
   27032:	f7ff fd01 	bl	26a38 <get_prompt>
   27036:	4c1e      	ldr	r4, [pc, #120]	; (270b0 <completion+0x15c>)
   27038:	4601      	mov	r1, r0
   2703a:	4620      	mov	r0, r4
   2703c:	f7db ff5a 	bl	2ef4 <printk>
		printk("%s", line);
   27040:	9d02      	ldr	r5, [sp, #8]
   27042:	4629      	mov	r1, r5
   27044:	4620      	mov	r0, r4
   27046:	f7db ff55 	bl	2ef4 <printk>
	int common_chars = -1, space = 0;
   2704a:	2400      	movs	r4, #0
   2704c:	e015      	b.n	2707a <completion+0x126>
		common_chars = strlen(first_match);
   2704e:	4638      	mov	r0, r7
   27050:	f7d9 fb56 	bl	700 <strlen>
   27054:	4606      	mov	r6, r0
		space = 1;
   27056:	2401      	movs	r4, #1
   27058:	9d02      	ldr	r5, [sp, #8]
	for (i = command_len; i < common_chars; i++) {
   2705a:	e00e      	b.n	2707a <completion+0x126>
		printk("%c", first_match[i]);
   2705c:	f817 100a 	ldrb.w	r1, [r7, sl]
   27060:	4814      	ldr	r0, [pc, #80]	; (270b4 <completion+0x160>)
   27062:	f7db ff47 	bl	2ef4 <printk>
		line[len++] = first_match[i];
   27066:	f109 0301 	add.w	r3, r9, #1
   2706a:	f817 200a 	ldrb.w	r2, [r7, sl]
   2706e:	f805 2009 	strb.w	r2, [r5, r9]
	for (i = command_len; i < common_chars; i++) {
   27072:	f10a 0a01 	add.w	sl, sl, #1
		line[len++] = first_match[i];
   27076:	fa5f f983 	uxtb.w	r9, r3
	for (i = command_len; i < common_chars; i++) {
   2707a:	4556      	cmp	r6, sl
   2707c:	dcee      	bgt.n	2705c <completion+0x108>
	if (space) {
   2707e:	b92c      	cbnz	r4, 2708c <completion+0x138>
	return common_chars - command_len + space;
   27080:	9b01      	ldr	r3, [sp, #4]
   27082:	1af0      	subs	r0, r6, r3
   27084:	fa54 f080 	uxtab	r0, r4, r0
   27088:	b2c0      	uxtb	r0, r0
   2708a:	e76a      	b.n	26f62 <completion+0xe>
		printk(" ");
   2708c:	480a      	ldr	r0, [pc, #40]	; (270b8 <completion+0x164>)
   2708e:	f7db ff31 	bl	2ef4 <printk>
		line[len] = ' ';
   27092:	2320      	movs	r3, #32
   27094:	9a02      	ldr	r2, [sp, #8]
   27096:	f802 3009 	strb.w	r3, [r2, r9]
   2709a:	e7f1      	b.n	27080 <completion+0x12c>
		return 0;
   2709c:	2000      	movs	r0, #0
   2709e:	e760      	b.n	26f62 <completion+0xe>
		return 0;
   270a0:	2000      	movs	r0, #0
   270a2:	e75e      	b.n	26f62 <completion+0xe>
   270a4:	2000d0e8 	.word	0x2000d0e8
   270a8:	00032398 	.word	0x00032398
   270ac:	00031668 	.word	0x00031668
   270b0:	0002e5cc 	.word	0x0002e5cc
   270b4:	000323a0 	.word	0x000323a0
   270b8:	000329ec 	.word	0x000329ec

000270bc <line_queue_init>:
{
   270bc:	b510      	push	{r4, lr}
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   270be:	2400      	movs	r4, #0
   270c0:	e008      	b.n	270d4 <line_queue_init+0x18>
		k_fifo_put(&avail_queue, &buf[i]);
   270c2:	eb04 1244 	add.w	r2, r4, r4, lsl #5
   270c6:	0093      	lsls	r3, r2, #2
   270c8:	4904      	ldr	r1, [pc, #16]	; (270dc <line_queue_init+0x20>)
   270ca:	4419      	add	r1, r3
   270cc:	4804      	ldr	r0, [pc, #16]	; (270e0 <line_queue_init+0x24>)
   270ce:	f001 fced 	bl	28aac <k_queue_append>
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   270d2:	3401      	adds	r4, #1
   270d4:	2c02      	cmp	r4, #2
   270d6:	ddf4      	ble.n	270c2 <line_queue_init+0x6>
}
   270d8:	bd10      	pop	{r4, pc}
   270da:	bf00      	nop
   270dc:	20002584 	.word	0x20002584
   270e0:	20002574 	.word	0x20002574

000270e4 <shell_exec>:
{
   270e4:	b510      	push	{r4, lr}
   270e6:	b08e      	sub	sp, #56	; 0x38
	int module = default_module;
   270e8:	4b1e      	ldr	r3, [pc, #120]	; (27164 <shell_exec+0x80>)
   270ea:	681b      	ldr	r3, [r3, #0]
   270ec:	9301      	str	r3, [sp, #4]
	argc = line2argv(line, argv, ARRAY_SIZE(argv));
   270ee:	220b      	movs	r2, #11
   270f0:	a903      	add	r1, sp, #12
   270f2:	f7ff fcf5 	bl	26ae0 <line2argv>
   270f6:	9002      	str	r0, [sp, #8]
	if (!argc) {
   270f8:	2800      	cmp	r0, #0
   270fa:	d02f      	beq.n	2715c <shell_exec+0x78>
	cb = get_cb(&argc, argv, &module);
   270fc:	aa01      	add	r2, sp, #4
   270fe:	a903      	add	r1, sp, #12
   27100:	a802      	add	r0, sp, #8
   27102:	f7ff fdbd 	bl	26c80 <get_cb>
	if (!cb) {
   27106:	4602      	mov	r2, r0
   27108:	b168      	cbz	r0, 27126 <shell_exec+0x42>
	if (module != -1 && module != default_module) {
   2710a:	9b01      	ldr	r3, [sp, #4]
   2710c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27110:	d017      	beq.n	27142 <shell_exec+0x5e>
   27112:	4914      	ldr	r1, [pc, #80]	; (27164 <shell_exec+0x80>)
   27114:	6809      	ldr	r1, [r1, #0]
   27116:	428b      	cmp	r3, r1
   27118:	d013      	beq.n	27142 <shell_exec+0x5e>
		err = cb(argc - 1, &argv[1]);
   2711a:	a904      	add	r1, sp, #16
   2711c:	9802      	ldr	r0, [sp, #8]
   2711e:	3801      	subs	r0, #1
   27120:	4790      	blx	r2
   27122:	4604      	mov	r4, r0
   27124:	e011      	b.n	2714a <shell_exec+0x66>
		if (app_cmd_handler != NULL) {
   27126:	4b10      	ldr	r3, [pc, #64]	; (27168 <shell_exec+0x84>)
   27128:	681a      	ldr	r2, [r3, #0]
   2712a:	2a00      	cmp	r2, #0
   2712c:	d1ed      	bne.n	2710a <shell_exec+0x26>
	printk("Unrecognized command: %s\n", argv);
   2712e:	9903      	ldr	r1, [sp, #12]
   27130:	480e      	ldr	r0, [pc, #56]	; (2716c <shell_exec+0x88>)
   27132:	f7db fedf 	bl	2ef4 <printk>
	printk("Type 'help' for list of available commands\n");
   27136:	480e      	ldr	r0, [pc, #56]	; (27170 <shell_exec+0x8c>)
   27138:	f7db fedc 	bl	2ef4 <printk>
			return -EINVAL;
   2713c:	f06f 0415 	mvn.w	r4, #21
   27140:	e005      	b.n	2714e <shell_exec+0x6a>
		err = cb(argc, argv);
   27142:	a903      	add	r1, sp, #12
   27144:	9802      	ldr	r0, [sp, #8]
   27146:	4790      	blx	r2
   27148:	4604      	mov	r4, r0
	if (err < 0) {
   2714a:	2c00      	cmp	r4, #0
   2714c:	db02      	blt.n	27154 <shell_exec+0x70>
}
   2714e:	4620      	mov	r0, r4
   27150:	b00e      	add	sp, #56	; 0x38
   27152:	bd10      	pop	{r4, pc}
		show_cmd_help(argv);
   27154:	a803      	add	r0, sp, #12
   27156:	f7ff fe03 	bl	26d60 <show_cmd_help>
   2715a:	e7f8      	b.n	2714e <shell_exec+0x6a>
		return -EINVAL;
   2715c:	f06f 0415 	mvn.w	r4, #21
   27160:	e7f5      	b.n	2714e <shell_exec+0x6a>
   27162:	bf00      	nop
   27164:	2000c620 	.word	0x2000c620
   27168:	2000256c 	.word	0x2000256c
   2716c:	000323fc 	.word	0x000323fc
   27170:	000324b8 	.word	0x000324b8

00027174 <shell>:
{
   27174:	b510      	push	{r4, lr}
		printk("%s", get_prompt());
   27176:	f7ff fc5f 	bl	26a38 <get_prompt>
   2717a:	4601      	mov	r1, r0
   2717c:	4808      	ldr	r0, [pc, #32]	; (271a0 <shell+0x2c>)
   2717e:	f7db feb9 	bl	2ef4 <printk>
		cmd = k_fifo_get(&cmds_queue, K_FOREVER);
   27182:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   27186:	4807      	ldr	r0, [pc, #28]	; (271a4 <shell+0x30>)
   27188:	f001 fcb8 	bl	28afc <k_queue_get>
   2718c:	4604      	mov	r4, r0
		shell_exec(cmd->line);
   2718e:	3004      	adds	r0, #4
   27190:	f7ff ffa8 	bl	270e4 <shell_exec>
		k_fifo_put(&avail_queue, cmd);
   27194:	4621      	mov	r1, r4
   27196:	4804      	ldr	r0, [pc, #16]	; (271a8 <shell+0x34>)
   27198:	f001 fc88 	bl	28aac <k_queue_append>
   2719c:	e7eb      	b.n	27176 <shell+0x2>
   2719e:	bf00      	nop
   271a0:	0002e5cc 	.word	0x0002e5cc
   271a4:	20002710 	.word	0x20002710
   271a8:	20002574 	.word	0x20002574

000271ac <shell_init>:


void shell_init(const char *str)
{
   271ac:	b510      	push	{r4, lr}
   271ae:	b086      	sub	sp, #24
   271b0:	4604      	mov	r4, r0
	k_fifo_init(&cmds_queue);
   271b2:	4812      	ldr	r0, [pc, #72]	; (271fc <shell_init+0x50>)
   271b4:	f001 fc47 	bl	28a46 <k_queue_init>
	k_fifo_init(&avail_queue);
   271b8:	4811      	ldr	r0, [pc, #68]	; (27200 <shell_init+0x54>)
   271ba:	f001 fc44 	bl	28a46 <k_queue_init>

	line_queue_init();
   271be:	f7ff ff7d 	bl	270bc <line_queue_init>

	prompt = str ? str : "";
   271c2:	b1c4      	cbz	r4, 271f6 <shell_init+0x4a>
   271c4:	4b0f      	ldr	r3, [pc, #60]	; (27204 <shell_init+0x58>)
   271c6:	601c      	str	r4, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   271c8:	2300      	movs	r3, #0
   271ca:	9305      	str	r3, [sp, #20]
   271cc:	9304      	str	r3, [sp, #16]
   271ce:	f06f 0208 	mvn.w	r2, #8
   271d2:	9203      	str	r2, [sp, #12]
   271d4:	9302      	str	r3, [sp, #8]
   271d6:	9301      	str	r3, [sp, #4]
   271d8:	9300      	str	r3, [sp, #0]
   271da:	4b0b      	ldr	r3, [pc, #44]	; (27208 <shell_init+0x5c>)
   271dc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   271e0:	490a      	ldr	r1, [pc, #40]	; (2720c <shell_init+0x60>)
   271e2:	480b      	ldr	r0, [pc, #44]	; (27210 <shell_init+0x64>)
   271e4:	f002 fa78 	bl	296d8 <_impl_k_thread_create>
	k_thread_create(&shell_thread, stack, STACKSIZE, shell, NULL, NULL,
			NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	/* Register serial console handler */
#ifdef CONFIG_UART_CONSOLE
	uart_register_input(&avail_queue, &cmds_queue, completion);
   271e8:	4a0a      	ldr	r2, [pc, #40]	; (27214 <shell_init+0x68>)
   271ea:	4904      	ldr	r1, [pc, #16]	; (271fc <shell_init+0x50>)
   271ec:	4804      	ldr	r0, [pc, #16]	; (27200 <shell_init+0x54>)
   271ee:	f7da fec1 	bl	1f74 <uart_register_input>
#endif
#ifdef CONFIG_TELNET_CONSOLE
	telnet_register_input(&avail_queue, &cmds_queue, completion);
#endif
}
   271f2:	b006      	add	sp, #24
   271f4:	bd10      	pop	{r4, pc}
	prompt = str ? str : "";
   271f6:	4c08      	ldr	r4, [pc, #32]	; (27218 <shell_init+0x6c>)
   271f8:	e7e4      	b.n	271c4 <shell_init+0x18>
   271fa:	bf00      	nop
   271fc:	20002710 	.word	0x20002710
   27200:	20002574 	.word	0x20002574
   27204:	20002738 	.word	0x20002738
   27208:	00027175 	.word	0x00027175
   2720c:	20009c50 	.word	0x20009c50
   27210:	2000273c 	.word	0x2000273c
   27214:	00026f55 	.word	0x00026f55
   27218:	0002ea98 	.word	0x0002ea98

0002721c <ftpan_32>:
#define __SYSTEM_CLOCK_64M (64000000UL)

#ifdef CONFIG_SOC_NRF52832
static bool ftpan_32(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   2721c:	4b0e      	ldr	r3, [pc, #56]	; (27258 <ftpan_32+0x3c>)
   2721e:	781b      	ldrb	r3, [r3, #0]
   27220:	2b06      	cmp	r3, #6
   27222:	d001      	beq.n	27228 <ftpan_32+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   27224:	2000      	movs	r0, #0
   27226:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   27228:	4b0c      	ldr	r3, [pc, #48]	; (2725c <ftpan_32+0x40>)
   2722a:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   2722c:	f013 0f0f 	tst.w	r3, #15
   27230:	d10e      	bne.n	27250 <ftpan_32+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   27232:	4b0b      	ldr	r3, [pc, #44]	; (27260 <ftpan_32+0x44>)
   27234:	681b      	ldr	r3, [r3, #0]
   27236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   2723a:	2b30      	cmp	r3, #48	; 0x30
   2723c:	d001      	beq.n	27242 <ftpan_32+0x26>
	return false;
   2723e:	2000      	movs	r0, #0
   27240:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   27242:	4b08      	ldr	r3, [pc, #32]	; (27264 <ftpan_32+0x48>)
   27244:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   27246:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   2724a:	d003      	beq.n	27254 <ftpan_32+0x38>
	return false;
   2724c:	2000      	movs	r0, #0
   2724e:	4770      	bx	lr
   27250:	2000      	movs	r0, #0
   27252:	4770      	bx	lr
			return true;
   27254:	2001      	movs	r0, #1
}
   27256:	4770      	bx	lr
   27258:	f0000fe0 	.word	0xf0000fe0
   2725c:	f0000fe4 	.word	0xf0000fe4
   27260:	f0000fe8 	.word	0xf0000fe8
   27264:	f0000fec 	.word	0xf0000fec

00027268 <ftpan_37>:

static bool ftpan_37(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27268:	4b0e      	ldr	r3, [pc, #56]	; (272a4 <ftpan_37+0x3c>)
   2726a:	781b      	ldrb	r3, [r3, #0]
   2726c:	2b06      	cmp	r3, #6
   2726e:	d001      	beq.n	27274 <ftpan_37+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   27270:	2000      	movs	r0, #0
   27272:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   27274:	4b0c      	ldr	r3, [pc, #48]	; (272a8 <ftpan_37+0x40>)
   27276:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27278:	f013 0f0f 	tst.w	r3, #15
   2727c:	d10e      	bne.n	2729c <ftpan_37+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   2727e:	4b0b      	ldr	r3, [pc, #44]	; (272ac <ftpan_37+0x44>)
   27280:	681b      	ldr	r3, [r3, #0]
   27282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   27286:	2b30      	cmp	r3, #48	; 0x30
   27288:	d001      	beq.n	2728e <ftpan_37+0x26>
	return false;
   2728a:	2000      	movs	r0, #0
   2728c:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   2728e:	4b08      	ldr	r3, [pc, #32]	; (272b0 <ftpan_37+0x48>)
   27290:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   27292:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   27296:	d003      	beq.n	272a0 <ftpan_37+0x38>
	return false;
   27298:	2000      	movs	r0, #0
   2729a:	4770      	bx	lr
   2729c:	2000      	movs	r0, #0
   2729e:	4770      	bx	lr
			return true;
   272a0:	2001      	movs	r0, #1
}
   272a2:	4770      	bx	lr
   272a4:	f0000fe0 	.word	0xf0000fe0
   272a8:	f0000fe4 	.word	0xf0000fe4
   272ac:	f0000fe8 	.word	0xf0000fe8
   272b0:	f0000fec 	.word	0xf0000fec

000272b4 <ftpan_36>:

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   272b4:	4b0e      	ldr	r3, [pc, #56]	; (272f0 <ftpan_36+0x3c>)
   272b6:	781b      	ldrb	r3, [r3, #0]
   272b8:	2b06      	cmp	r3, #6
   272ba:	d001      	beq.n	272c0 <ftpan_36+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   272bc:	2000      	movs	r0, #0
   272be:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   272c0:	4b0c      	ldr	r3, [pc, #48]	; (272f4 <ftpan_36+0x40>)
   272c2:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   272c4:	f013 0f0f 	tst.w	r3, #15
   272c8:	d10e      	bne.n	272e8 <ftpan_36+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   272ca:	4b0b      	ldr	r3, [pc, #44]	; (272f8 <ftpan_36+0x44>)
   272cc:	681b      	ldr	r3, [r3, #0]
   272ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   272d2:	2b30      	cmp	r3, #48	; 0x30
   272d4:	d001      	beq.n	272da <ftpan_36+0x26>
	return false;
   272d6:	2000      	movs	r0, #0
   272d8:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   272da:	4b08      	ldr	r3, [pc, #32]	; (272fc <ftpan_36+0x48>)
   272dc:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   272de:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   272e2:	d003      	beq.n	272ec <ftpan_36+0x38>
	return false;
   272e4:	2000      	movs	r0, #0
   272e6:	4770      	bx	lr
   272e8:	2000      	movs	r0, #0
   272ea:	4770      	bx	lr
			return true;
   272ec:	2001      	movs	r0, #1
}
   272ee:	4770      	bx	lr
   272f0:	f0000fe0 	.word	0xf0000fe0
   272f4:	f0000fe4 	.word	0xf0000fe4
   272f8:	f0000fe8 	.word	0xf0000fe8
   272fc:	f0000fec 	.word	0xf0000fec

00027300 <errata_136_nrf52832>:

static bool errata_136_nrf52832(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27300:	4b0f      	ldr	r3, [pc, #60]	; (27340 <errata_136_nrf52832+0x40>)
   27302:	781b      	ldrb	r3, [r3, #0]
   27304:	2b06      	cmp	r3, #6
   27306:	d001      	beq.n	2730c <errata_136_nrf52832+0xc>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
			return true;
		}
	}

	return false;
   27308:	2000      	movs	r0, #0
   2730a:	4770      	bx	lr
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   2730c:	4b0d      	ldr	r3, [pc, #52]	; (27344 <errata_136_nrf52832+0x44>)
   2730e:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27310:	f013 0f0f 	tst.w	r3, #15
   27314:	d10b      	bne.n	2732e <errata_136_nrf52832+0x2e>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
   27316:	4b0c      	ldr	r3, [pc, #48]	; (27348 <errata_136_nrf52832+0x48>)
   27318:	681b      	ldr	r3, [r3, #0]
   2731a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   2731e:	2b30      	cmp	r3, #48	; 0x30
   27320:	d007      	beq.n	27332 <errata_136_nrf52832+0x32>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
   27322:	2b40      	cmp	r3, #64	; 0x40
   27324:	d007      	beq.n	27336 <errata_136_nrf52832+0x36>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
   27326:	2b50      	cmp	r3, #80	; 0x50
   27328:	d007      	beq.n	2733a <errata_136_nrf52832+0x3a>
	return false;
   2732a:	2000      	movs	r0, #0
   2732c:	4770      	bx	lr
   2732e:	2000      	movs	r0, #0
   27330:	4770      	bx	lr
			return true;
   27332:	2001      	movs	r0, #1
   27334:	4770      	bx	lr
			return true;
   27336:	2001      	movs	r0, #1
   27338:	4770      	bx	lr
			return true;
   2733a:	2001      	movs	r0, #1
}
   2733c:	4770      	bx	lr
   2733e:	bf00      	nop
   27340:	f0000fe0 	.word	0xf0000fe0
   27344:	f0000fe4 	.word	0xf0000fe4
   27348:	f0000fe8 	.word	0xf0000fe8

0002734c <nordicsemi_nrf52832_init>:

static void nordicsemi_nrf52832_init(void)
{
   2734c:	b508      	push	{r3, lr}
	/* Workaround for FTPAN-32 "DIF: Debug session automatically
	* enables TracePort pins" found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_32()) {
   2734e:	f7ff ff65 	bl	2721c <ftpan_32>
   27352:	b120      	cbz	r0, 2735e <nordicsemi_nrf52832_init+0x12>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   27354:	4a32      	ldr	r2, [pc, #200]	; (27420 <nordicsemi_nrf52832_init+0xd4>)
   27356:	68d3      	ldr	r3, [r2, #12]
   27358:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   2735c:	60d3      	str	r3, [r2, #12]

	/* Workaround for FTPAN-37 "AMLI: EasyDMA is slow with Radio,
	* ECB, AAR and CCM." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_37()) {
   2735e:	f7ff ff83 	bl	27268 <ftpan_37>
   27362:	b110      	cbz	r0, 2736a <nordicsemi_nrf52832_init+0x1e>
		*(volatile u32_t *)0x400005A0 = 0x3;
   27364:	2203      	movs	r2, #3
   27366:	4b2f      	ldr	r3, [pc, #188]	; (27424 <nordicsemi_nrf52832_init+0xd8>)
   27368:	601a      	str	r2, [r3, #0]

	/* Workaround for FTPAN-36 "CLOCK: Some registers are not
	* reset when expected." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_36()) {
   2736a:	f7ff ffa3 	bl	272b4 <ftpan_36>
   2736e:	b130      	cbz	r0, 2737e <nordicsemi_nrf52832_init+0x32>
		NRF_CLOCK->EVENTS_DONE = 0;
   27370:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27374:	2200      	movs	r2, #0
   27376:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
   2737a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	/* Workaround for Errata 136 "System: Bits in RESETREAS are set when
	 * they should not be" found at the Errata document for your device
	 * located at https://infocenter.nordicsemi.com/
	 */
	if (errata_136_nrf52832()) {
   2737e:	f7ff ffbf 	bl	27300 <errata_136_nrf52832>
   27382:	b160      	cbz	r0, 2739e <nordicsemi_nrf52832_init+0x52>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
   27384:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27388:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   2738c:	f013 0f01 	tst.w	r3, #1
   27390:	d005      	beq.n	2739e <nordicsemi_nrf52832_init+0x52>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
   27392:	f06f 0201 	mvn.w	r2, #1
   27396:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2739a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	* defined, pin reset will not be available. One GPIO (see
	* Product Specification to see which one) will then be
	* reserved for PinReset and not available as normal GPIO.
	*/
#if defined(CONFIG_GPIO_AS_PINRESET)
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   2739e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   273a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   273a6:	2b00      	cmp	r3, #0
   273a8:	db06      	blt.n	273b8 <nordicsemi_nrf52832_init+0x6c>
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   273aa:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   273ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   273b2:	2b00      	cmp	r3, #0
   273b4:	db00      	blt.n	273b8 <nordicsemi_nrf52832_init+0x6c>
   273b6:	bd08      	pop	{r3, pc}
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   273b8:	2201      	movs	r2, #1
   273ba:	4b1b      	ldr	r3, [pc, #108]	; (27428 <nordicsemi_nrf52832_init+0xdc>)
   273bc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   273c0:	4b19      	ldr	r3, [pc, #100]	; (27428 <nordicsemi_nrf52832_init+0xdc>)
   273c2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   273c6:	2b00      	cmp	r3, #0
   273c8:	d0fa      	beq.n	273c0 <nordicsemi_nrf52832_init+0x74>
			;
		}
		NRF_UICR->PSELRESET[0] = 21;
   273ca:	2215      	movs	r2, #21
   273cc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   273d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   273d4:	4b14      	ldr	r3, [pc, #80]	; (27428 <nordicsemi_nrf52832_init+0xdc>)
   273d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   273da:	2b00      	cmp	r3, #0
   273dc:	d0fa      	beq.n	273d4 <nordicsemi_nrf52832_init+0x88>
			;
		}
		NRF_UICR->PSELRESET[1] = 21;
   273de:	2215      	movs	r2, #21
   273e0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   273e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   273e8:	4b0f      	ldr	r3, [pc, #60]	; (27428 <nordicsemi_nrf52832_init+0xdc>)
   273ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   273ee:	2b00      	cmp	r3, #0
   273f0:	d0fa      	beq.n	273e8 <nordicsemi_nrf52832_init+0x9c>
			;
		}
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   273f2:	2200      	movs	r2, #0
   273f4:	4b0c      	ldr	r3, [pc, #48]	; (27428 <nordicsemi_nrf52832_init+0xdc>)
   273f6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   273fa:	4b0b      	ldr	r3, [pc, #44]	; (27428 <nordicsemi_nrf52832_init+0xdc>)
   273fc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   27400:	2b00      	cmp	r3, #0
   27402:	d0fa      	beq.n	273fa <nordicsemi_nrf52832_init+0xae>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   27404:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   27408:	4908      	ldr	r1, [pc, #32]	; (2742c <nordicsemi_nrf52832_init+0xe0>)
   2740a:	68ca      	ldr	r2, [r1, #12]
   2740c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   27410:	4b07      	ldr	r3, [pc, #28]	; (27430 <nordicsemi_nrf52832_init+0xe4>)
   27412:	4313      	orrs	r3, r2
   27414:	60cb      	str	r3, [r1, #12]
   27416:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   2741a:	bf00      	nop
   2741c:	e7fd      	b.n	2741a <nordicsemi_nrf52832_init+0xce>
   2741e:	bf00      	nop
   27420:	e000edf0 	.word	0xe000edf0
   27424:	400005a0 	.word	0x400005a0
   27428:	4001e000 	.word	0x4001e000
   2742c:	e000ed00 	.word	0xe000ed00
   27430:	05fa0004 	.word	0x05fa0004

00027434 <clock_init>:

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK_64M;

static void clock_init(void)
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
   27434:	4a01      	ldr	r2, [pc, #4]	; (2743c <clock_init+0x8>)
   27436:	4b02      	ldr	r3, [pc, #8]	; (27440 <clock_init+0xc>)
   27438:	601a      	str	r2, [r3, #0]
   2743a:	4770      	bx	lr
   2743c:	03d09000 	.word	0x03d09000
   27440:	2000c624 	.word	0x2000c624

00027444 <nordicsemi_nrf52_init>:
}

static int nordicsemi_nrf52_init(struct device *arg)
{
   27444:	b510      	push	{r4, lr}
	__asm__ volatile(
   27446:	f04f 0320 	mov.w	r3, #32
   2744a:	f3ef 8411 	mrs	r4, BASEPRI
   2744e:	f383 8811 	msr	BASEPRI, r3
	ARG_UNUSED(arg);

	key = irq_lock();

#ifdef CONFIG_SOC_NRF52832
	nordicsemi_nrf52832_init();
   27452:	f7ff ff7b 	bl	2734c <nordicsemi_nrf52832_init>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   27456:	4b05      	ldr	r3, [pc, #20]	; (2746c <nordicsemi_nrf52_init+0x28>)
   27458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2745c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2745e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

	_ClearFaults();

	/* Setup master clock */
	clock_init();
   27460:	f7ff ffe8 	bl	27434 <clock_init>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27464:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   27468:	2000      	movs	r0, #0
   2746a:	bd10      	pop	{r4, pc}
   2746c:	e000ed00 	.word	0xe000ed00

00027470 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   27470:	4808      	ldr	r0, [pc, #32]	; (27494 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   27472:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
   27474:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
   27476:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
   27478:	d80b      	bhi.n	27492 <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
   2747a:	6980      	ldr	r0, [r0, #24]
    cmp r0, r1
   2747c:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   2747e:	d008      	beq.n	27492 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
   27480:	b500      	push	{lr}
    bl _update_time_slice_before_swap
   27482:	f001 fd1f 	bl	28ec4 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
   27486:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   2748a:	4903      	ldr	r1, [pc, #12]	; (27498 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   2748c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   27490:	600a      	str	r2, [r1, #0]

00027492 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
   27492:	4770      	bx	lr
    ldr r0, =_kernel
   27494:	20002878 	.word	0x20002878
    ldr r1, =_SCS_ICSR
   27498:	e000ed04 	.word	0xe000ed04

0002749c <_IntLibInit>:
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
   2749c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   2749e:	e00a      	b.n	274b6 <_IntLibInit+0x1a>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   274a0:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) < 0)
   274a2:	2b00      	cmp	r3, #0
   274a4:	db0a      	blt.n	274bc <_IntLibInit+0x20>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   274a6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   274aa:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   274ae:	2120      	movs	r1, #32
   274b0:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
	for (; irq < CONFIG_NUM_IRQS; irq++) {
   274b4:	3201      	adds	r2, #1
   274b6:	2a26      	cmp	r2, #38	; 0x26
   274b8:	ddf2      	ble.n	274a0 <_IntLibInit+0x4>
	}
}
   274ba:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   274bc:	f002 010f 	and.w	r1, r2, #15
   274c0:	4b02      	ldr	r3, [pc, #8]	; (274cc <_IntLibInit+0x30>)
   274c2:	440b      	add	r3, r1
   274c4:	2120      	movs	r1, #32
   274c6:	7619      	strb	r1, [r3, #24]
   274c8:	e7f4      	b.n	274b4 <_IntLibInit+0x18>
   274ca:	bf00      	nop
   274cc:	e000ecfc 	.word	0xe000ecfc

000274d0 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   274d0:	490e      	ldr	r1, [pc, #56]	; (2750c <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   274d2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   274d4:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   274d8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
   274da:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M)
    stmia r0, {v1-v8, ip}
   274de:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   274e2:	4f0b      	ldr	r7, [pc, #44]	; (27510 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   274e4:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   274e8:	2020      	movs	r0, #32
    msr BASEPRI, r0
   274ea:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
   274ee:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   274f0:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
   274f2:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
   274f4:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
   274f6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   274f8:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   274fa:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_mem_domain
    pop {r2, lr}
#endif /* CONFIG_USERSPACE */

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   274fe:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   27502:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
   27506:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
   2750a:	4770      	bx	lr
    ldr r1, =_kernel
   2750c:	20002878 	.word	0x20002878
    ldr v4, =_SCS_ICSR
   27510:	e000ed04 	.word	0xe000ed04

00027514 <__svc>:
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)

    tst lr, #0x4    /* did we come from thread mode ? */
   27514:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   27518:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   2751a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   2751e:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   27522:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
   27524:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 1: irq_offload (if configured)
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
   27528:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    beq _context_switch
   2752c:	d001      	beq.n	27532 <_context_switch>

    cmp r1, #2
   2752e:	2902      	cmp	r1, #2
    beq _oops
   27530:	d007      	beq.n	27542 <_oops>

00027532 <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
   27532:	4040      	eors	r0, r0
    msr BASEPRI, r0
   27534:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
   27538:	4904      	ldr	r1, [pc, #16]	; (2754c <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
   2753a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
   2753e:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
   27540:	4770      	bx	lr

00027542 <_oops>:

_oops:
    push {lr}
   27542:	b500      	push	{lr}
    blx _do_kernel_oops
   27544:	f000 fa82 	bl	27a4c <_do_kernel_oops>
    pop {pc}
   27548:	bd00      	pop	{pc}
   2754a:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
   2754c:	e000ed04 	.word	0xe000ed04

00027550 <__swap>:
    mov lr,r3
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
    ldr r1, =_kernel
   27550:	4904      	ldr	r1, [pc, #16]	; (27564 <__swap+0x14>)
    ldr r2, [r1, #_kernel_offset_to_current]
   27552:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
   27554:	6610      	str	r0, [r2, #96]	; 0x60

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
   27556:	4904      	ldr	r1, [pc, #16]	; (27568 <__swap+0x18>)
    ldr r1, [r1]
   27558:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
   2755a:	6651      	str	r1, [r2, #100]	; 0x64
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
#elif defined(CONFIG_ARMV7_M)
    svc #0
   2755c:	df00      	svc	0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
   2755e:	6e50      	ldr	r0, [r2, #100]	; 0x64
    bx lr
   27560:	4770      	bx	lr
   27562:	0000      	.short	0x0000
    ldr r1, =_kernel
   27564:	20002878 	.word	0x20002878
    ldr r1, =_k_neg_eagain
   27568:	000329c0 	.word	0x000329c0

0002756c <_DebugMonitor>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _DebugMonitor(const NANO_ESF *esf)
{
   2756c:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
   2756e:	4802      	ldr	r0, [pc, #8]	; (27578 <_DebugMonitor+0xc>)
   27570:	f7db fcc0 	bl	2ef4 <printk>
   27574:	bd08      	pop	{r3, pc}
   27576:	bf00      	nop
   27578:	000325fc 	.word	0x000325fc

0002757c <_ReservedException>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _ReservedException(const NANO_ESF *esf, int fault)
{
   2757c:	b508      	push	{r3, lr}
   2757e:	460a      	mov	r2, r1
	ARG_UNUSED(esf);

	PR_EXC("***** %s %d) *****\n",
   27580:	290f      	cmp	r1, #15
   27582:	dd05      	ble.n	27590 <_ReservedException+0x14>
   27584:	4903      	ldr	r1, [pc, #12]	; (27594 <_ReservedException+0x18>)
   27586:	3a10      	subs	r2, #16
   27588:	4803      	ldr	r0, [pc, #12]	; (27598 <_ReservedException+0x1c>)
   2758a:	f7db fcb3 	bl	2ef4 <printk>
   2758e:	bd08      	pop	{r3, pc}
   27590:	4902      	ldr	r1, [pc, #8]	; (2759c <_ReservedException+0x20>)
   27592:	e7f8      	b.n	27586 <_ReservedException+0xa>
   27594:	00032784 	.word	0x00032784
   27598:	000327a0 	.word	0x000327a0
   2759c:	0003276c 	.word	0x0003276c

000275a0 <_FaultThreadShow>:
{
   275a0:	b510      	push	{r4, lr}
   275a2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   275a4:	f001 fc60 	bl	28e68 <_impl_k_current_get>
	PR_EXC("  Executing thread ID (thread): %p\n"
   275a8:	69a2      	ldr	r2, [r4, #24]
   275aa:	4601      	mov	r1, r0
   275ac:	4801      	ldr	r0, [pc, #4]	; (275b4 <_FaultThreadShow+0x14>)
   275ae:	f7db fca1 	bl	2ef4 <printk>
   275b2:	bd10      	pop	{r4, pc}
   275b4:	00032634 	.word	0x00032634

000275b8 <_MpuFault>:
{
   275b8:	b538      	push	{r3, r4, r5, lr}
   275ba:	4604      	mov	r4, r0
   275bc:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
   275be:	481e      	ldr	r0, [pc, #120]	; (27638 <_MpuFault+0x80>)
   275c0:	f7db fc98 	bl	2ef4 <printk>
	_FaultThreadShow(esf);
   275c4:	4620      	mov	r0, r4
   275c6:	f7ff ffeb 	bl	275a0 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_MSTKERR_Msk) {
   275ca:	4b1c      	ldr	r3, [pc, #112]	; (2763c <_MpuFault+0x84>)
   275cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   275ce:	f013 0f10 	tst.w	r3, #16
   275d2:	d10f      	bne.n	275f4 <_MpuFault+0x3c>
	} else if (SCB->CFSR & CFSR_MUNSTKERR_Msk) {
   275d4:	4b19      	ldr	r3, [pc, #100]	; (2763c <_MpuFault+0x84>)
   275d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   275d8:	f013 0f08 	tst.w	r3, #8
   275dc:	d10e      	bne.n	275fc <_MpuFault+0x44>
	} else if (SCB->CFSR & CFSR_DACCVIOL_Msk) {
   275de:	4b17      	ldr	r3, [pc, #92]	; (2763c <_MpuFault+0x84>)
   275e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   275e2:	f013 0f02 	tst.w	r3, #2
   275e6:	d10d      	bne.n	27604 <_MpuFault+0x4c>
	} else if (SCB->CFSR & CFSR_IACCVIOL_Msk) {
   275e8:	4b14      	ldr	r3, [pc, #80]	; (2763c <_MpuFault+0x84>)
   275ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   275ec:	f013 0f01 	tst.w	r3, #1
   275f0:	d11d      	bne.n	2762e <_MpuFault+0x76>
   275f2:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   275f4:	4812      	ldr	r0, [pc, #72]	; (27640 <_MpuFault+0x88>)
   275f6:	f7db fc7d 	bl	2ef4 <printk>
   275fa:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   275fc:	4811      	ldr	r0, [pc, #68]	; (27644 <_MpuFault+0x8c>)
   275fe:	f7db fc79 	bl	2ef4 <printk>
   27602:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Data Access Violation\n");
   27604:	4810      	ldr	r0, [pc, #64]	; (27648 <_MpuFault+0x90>)
   27606:	f7db fc75 	bl	2ef4 <printk>
		if (SCB->CFSR & CFSR_MMARVALID_Msk) {
   2760a:	4b0c      	ldr	r3, [pc, #48]	; (2763c <_MpuFault+0x84>)
   2760c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2760e:	f013 0f80 	tst.w	r3, #128	; 0x80
   27612:	d0ee      	beq.n	275f2 <_MpuFault+0x3a>
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->MMFAR);
   27614:	4b09      	ldr	r3, [pc, #36]	; (2763c <_MpuFault+0x84>)
   27616:	6b59      	ldr	r1, [r3, #52]	; 0x34
   27618:	480c      	ldr	r0, [pc, #48]	; (2764c <_MpuFault+0x94>)
   2761a:	f7db fc6b 	bl	2ef4 <printk>
			if (fromHardFault) {
   2761e:	2d00      	cmp	r5, #0
   27620:	d0e7      	beq.n	275f2 <_MpuFault+0x3a>
				SCB->CFSR &= ~CFSR_MMARVALID_Msk;
   27622:	4a06      	ldr	r2, [pc, #24]	; (2763c <_MpuFault+0x84>)
   27624:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2762a:	6293      	str	r3, [r2, #40]	; 0x28
   2762c:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction Access Violation\n");
   2762e:	4808      	ldr	r0, [pc, #32]	; (27650 <_MpuFault+0x98>)
   27630:	f7db fc60 	bl	2ef4 <printk>
}
   27634:	e7dd      	b.n	275f2 <_MpuFault+0x3a>
   27636:	bf00      	nop
   27638:	000326dc 	.word	0x000326dc
   2763c:	e000ed00 	.word	0xe000ed00
   27640:	000326f4 	.word	0x000326f4
   27644:	00032708 	.word	0x00032708
   27648:	0003271c 	.word	0x0003271c
   2764c:	00032738 	.word	0x00032738
   27650:	0003274c 	.word	0x0003274c

00027654 <_BusFault>:
{
   27654:	b538      	push	{r3, r4, r5, lr}
   27656:	4604      	mov	r4, r0
   27658:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
   2765a:	4827      	ldr	r0, [pc, #156]	; (276f8 <_BusFault+0xa4>)
   2765c:	f7db fc4a 	bl	2ef4 <printk>
	_FaultThreadShow(esf);
   27660:	4620      	mov	r0, r4
   27662:	f7ff ff9d 	bl	275a0 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_STKERR_Msk) {
   27666:	4b25      	ldr	r3, [pc, #148]	; (276fc <_BusFault+0xa8>)
   27668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2766a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   2766e:	d114      	bne.n	2769a <_BusFault+0x46>
	} else if (SCB->CFSR & CFSR_UNSTKERR_Msk) {
   27670:	4b22      	ldr	r3, [pc, #136]	; (276fc <_BusFault+0xa8>)
   27672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27674:	f413 6f00 	tst.w	r3, #2048	; 0x800
   27678:	d113      	bne.n	276a2 <_BusFault+0x4e>
	} else if (SCB->CFSR & CFSR_PRECISERR_Msk) {
   2767a:	4b20      	ldr	r3, [pc, #128]	; (276fc <_BusFault+0xa8>)
   2767c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2767e:	f413 7f00 	tst.w	r3, #512	; 0x200
   27682:	d112      	bne.n	276aa <_BusFault+0x56>
	} else if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   27684:	4b1d      	ldr	r3, [pc, #116]	; (276fc <_BusFault+0xa8>)
   27686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27688:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2768c:	d12b      	bne.n	276e6 <_BusFault+0x92>
	} else if (SCB->CFSR & CFSR_IBUSERR_Msk) {
   2768e:	4b1b      	ldr	r3, [pc, #108]	; (276fc <_BusFault+0xa8>)
   27690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27692:	f413 7f80 	tst.w	r3, #256	; 0x100
   27696:	d12a      	bne.n	276ee <_BusFault+0x9a>
   27698:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   2769a:	4819      	ldr	r0, [pc, #100]	; (27700 <_BusFault+0xac>)
   2769c:	f7db fc2a 	bl	2ef4 <printk>
   276a0:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   276a2:	4818      	ldr	r0, [pc, #96]	; (27704 <_BusFault+0xb0>)
   276a4:	f7db fc26 	bl	2ef4 <printk>
   276a8:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Precise data bus error\n");
   276aa:	4817      	ldr	r0, [pc, #92]	; (27708 <_BusFault+0xb4>)
   276ac:	f7db fc22 	bl	2ef4 <printk>
		if (SCB->CFSR & CFSR_BFARVALID_Msk) {
   276b0:	4b12      	ldr	r3, [pc, #72]	; (276fc <_BusFault+0xa8>)
   276b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   276b4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   276b8:	d108      	bne.n	276cc <_BusFault+0x78>
		if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   276ba:	4b10      	ldr	r3, [pc, #64]	; (276fc <_BusFault+0xa8>)
   276bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   276be:	f413 6f80 	tst.w	r3, #1024	; 0x400
   276c2:	d0e9      	beq.n	27698 <_BusFault+0x44>
			PR_EXC("  Imprecise data bus error\n");
   276c4:	4811      	ldr	r0, [pc, #68]	; (2770c <_BusFault+0xb8>)
   276c6:	f7db fc15 	bl	2ef4 <printk>
   276ca:	bd38      	pop	{r3, r4, r5, pc}
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->BFAR);
   276cc:	4b0b      	ldr	r3, [pc, #44]	; (276fc <_BusFault+0xa8>)
   276ce:	6b99      	ldr	r1, [r3, #56]	; 0x38
   276d0:	480f      	ldr	r0, [pc, #60]	; (27710 <_BusFault+0xbc>)
   276d2:	f7db fc0f 	bl	2ef4 <printk>
			if (fromHardFault) {
   276d6:	2d00      	cmp	r5, #0
   276d8:	d0ef      	beq.n	276ba <_BusFault+0x66>
				SCB->CFSR &= ~CFSR_BFARVALID_Msk;
   276da:	4a08      	ldr	r2, [pc, #32]	; (276fc <_BusFault+0xa8>)
   276dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
   276de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   276e2:	6293      	str	r3, [r2, #40]	; 0x28
   276e4:	e7e9      	b.n	276ba <_BusFault+0x66>
		PR_EXC("  Imprecise data bus error\n");
   276e6:	4809      	ldr	r0, [pc, #36]	; (2770c <_BusFault+0xb8>)
   276e8:	f7db fc04 	bl	2ef4 <printk>
   276ec:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction bus error\n");
   276ee:	4809      	ldr	r0, [pc, #36]	; (27714 <_BusFault+0xc0>)
   276f0:	f7db fc00 	bl	2ef4 <printk>
}
   276f4:	e7d0      	b.n	27698 <_BusFault+0x44>
   276f6:	bf00      	nop
   276f8:	00032590 	.word	0x00032590
   276fc:	e000ed00 	.word	0xe000ed00
   27700:	000326f4 	.word	0x000326f4
   27704:	00032708 	.word	0x00032708
   27708:	000325a8 	.word	0x000325a8
   2770c:	000325c4 	.word	0x000325c4
   27710:	00032738 	.word	0x00032738
   27714:	000325e0 	.word	0x000325e0

00027718 <_UsageFault>:
{
   27718:	b510      	push	{r4, lr}
   2771a:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
   2771c:	4821      	ldr	r0, [pc, #132]	; (277a4 <_UsageFault+0x8c>)
   2771e:	f7db fbe9 	bl	2ef4 <printk>
	_FaultThreadShow(esf);
   27722:	4620      	mov	r0, r4
   27724:	f7ff ff3c 	bl	275a0 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_DIVBYZERO_Msk) {
   27728:	4b1f      	ldr	r3, [pc, #124]	; (277a8 <_UsageFault+0x90>)
   2772a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2772c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   27730:	d120      	bne.n	27774 <_UsageFault+0x5c>
	if (SCB->CFSR & CFSR_UNALIGNED_Msk) {
   27732:	4b1d      	ldr	r3, [pc, #116]	; (277a8 <_UsageFault+0x90>)
   27734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27736:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   2773a:	d11f      	bne.n	2777c <_UsageFault+0x64>
	if (SCB->CFSR & CFSR_NOCP_Msk) {
   2773c:	4b1a      	ldr	r3, [pc, #104]	; (277a8 <_UsageFault+0x90>)
   2773e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27740:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   27744:	d11e      	bne.n	27784 <_UsageFault+0x6c>
	if (SCB->CFSR & CFSR_INVPC_Msk) {
   27746:	4b18      	ldr	r3, [pc, #96]	; (277a8 <_UsageFault+0x90>)
   27748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2774a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   2774e:	d11d      	bne.n	2778c <_UsageFault+0x74>
	if (SCB->CFSR & CFSR_INVSTATE_Msk) {
   27750:	4b15      	ldr	r3, [pc, #84]	; (277a8 <_UsageFault+0x90>)
   27752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27754:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   27758:	d11c      	bne.n	27794 <_UsageFault+0x7c>
	if (SCB->CFSR & CFSR_UNDEFINSTR_Msk) {
   2775a:	4b13      	ldr	r3, [pc, #76]	; (277a8 <_UsageFault+0x90>)
   2775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2775e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   27762:	d11b      	bne.n	2779c <_UsageFault+0x84>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   27764:	4a10      	ldr	r2, [pc, #64]	; (277a8 <_UsageFault+0x90>)
   27766:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27768:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   2776c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   27770:	6293      	str	r3, [r2, #40]	; 0x28
   27772:	bd10      	pop	{r4, pc}
		PR_EXC("  Division by zero\n");
   27774:	480d      	ldr	r0, [pc, #52]	; (277ac <_UsageFault+0x94>)
   27776:	f7db fbbd 	bl	2ef4 <printk>
   2777a:	e7da      	b.n	27732 <_UsageFault+0x1a>
		PR_EXC("  Unaligned memory access\n");
   2777c:	480c      	ldr	r0, [pc, #48]	; (277b0 <_UsageFault+0x98>)
   2777e:	f7db fbb9 	bl	2ef4 <printk>
   27782:	e7db      	b.n	2773c <_UsageFault+0x24>
		PR_EXC("  No coprocessor instructions\n");
   27784:	480b      	ldr	r0, [pc, #44]	; (277b4 <_UsageFault+0x9c>)
   27786:	f7db fbb5 	bl	2ef4 <printk>
   2778a:	e7dc      	b.n	27746 <_UsageFault+0x2e>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
   2778c:	480a      	ldr	r0, [pc, #40]	; (277b8 <_UsageFault+0xa0>)
   2778e:	f7db fbb1 	bl	2ef4 <printk>
   27792:	e7dd      	b.n	27750 <_UsageFault+0x38>
		PR_EXC("  Illegal use of the EPSR\n");
   27794:	4809      	ldr	r0, [pc, #36]	; (277bc <_UsageFault+0xa4>)
   27796:	f7db fbad 	bl	2ef4 <printk>
   2779a:	e7de      	b.n	2775a <_UsageFault+0x42>
		PR_EXC("  Attempt to execute undefined instruction\n");
   2779c:	4808      	ldr	r0, [pc, #32]	; (277c0 <_UsageFault+0xa8>)
   2779e:	f7db fba9 	bl	2ef4 <printk>
   277a2:	e7df      	b.n	27764 <_UsageFault+0x4c>
   277a4:	000327b4 	.word	0x000327b4
   277a8:	e000ed00 	.word	0xe000ed00
   277ac:	000327d0 	.word	0x000327d0
   277b0:	000327e4 	.word	0x000327e4
   277b4:	00032800 	.word	0x00032800
   277b8:	00032820 	.word	0x00032820
   277bc:	00032848 	.word	0x00032848
   277c0:	00032864 	.word	0x00032864

000277c4 <_HardFault>:
{
   277c4:	b510      	push	{r4, lr}
   277c6:	4604      	mov	r4, r0
	PR_EXC("***** HARD FAULT *****\n");
   277c8:	4816      	ldr	r0, [pc, #88]	; (27824 <_HardFault+0x60>)
   277ca:	f7db fb93 	bl	2ef4 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
   277ce:	4b16      	ldr	r3, [pc, #88]	; (27828 <_HardFault+0x64>)
   277d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   277d2:	f013 0f02 	tst.w	r3, #2
   277d6:	d105      	bne.n	277e4 <_HardFault+0x20>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
   277d8:	4b13      	ldr	r3, [pc, #76]	; (27828 <_HardFault+0x64>)
   277da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   277dc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   277e0:	d104      	bne.n	277ec <_HardFault+0x28>
   277e2:	bd10      	pop	{r4, pc}
		PR_EXC("  Bus fault on vector table read\n");
   277e4:	4811      	ldr	r0, [pc, #68]	; (2782c <_HardFault+0x68>)
   277e6:	f7db fb85 	bl	2ef4 <printk>
   277ea:	bd10      	pop	{r4, pc}
		PR_EXC("  Fault escalation (see below)\n");
   277ec:	4810      	ldr	r0, [pc, #64]	; (27830 <_HardFault+0x6c>)
   277ee:	f7db fb81 	bl	2ef4 <printk>
		if (SCB_MMFSR) {
   277f2:	4b10      	ldr	r3, [pc, #64]	; (27834 <_HardFault+0x70>)
   277f4:	781b      	ldrb	r3, [r3, #0]
   277f6:	b95b      	cbnz	r3, 27810 <_HardFault+0x4c>
		} else if (SCB_BFSR) {
   277f8:	4b0f      	ldr	r3, [pc, #60]	; (27838 <_HardFault+0x74>)
   277fa:	781b      	ldrb	r3, [r3, #0]
   277fc:	b96b      	cbnz	r3, 2781a <_HardFault+0x56>
		} else if (SCB_UFSR) {
   277fe:	4b0f      	ldr	r3, [pc, #60]	; (2783c <_HardFault+0x78>)
   27800:	881b      	ldrh	r3, [r3, #0]
   27802:	b29b      	uxth	r3, r3
   27804:	2b00      	cmp	r3, #0
   27806:	d0ec      	beq.n	277e2 <_HardFault+0x1e>
			_UsageFault(esf);
   27808:	4620      	mov	r0, r4
   2780a:	f7ff ff85 	bl	27718 <_UsageFault>
}
   2780e:	e7e8      	b.n	277e2 <_HardFault+0x1e>
			_MpuFault(esf, 1);
   27810:	2101      	movs	r1, #1
   27812:	4620      	mov	r0, r4
   27814:	f7ff fed0 	bl	275b8 <_MpuFault>
   27818:	bd10      	pop	{r4, pc}
			_BusFault(esf, 1);
   2781a:	2101      	movs	r1, #1
   2781c:	4620      	mov	r0, r4
   2781e:	f7ff ff19 	bl	27654 <_BusFault>
   27822:	bd10      	pop	{r4, pc}
   27824:	00032680 	.word	0x00032680
   27828:	e000ed00 	.word	0xe000ed00
   2782c:	00032698 	.word	0x00032698
   27830:	000326bc 	.word	0x000326bc
   27834:	e000ed28 	.word	0xe000ed28
   27838:	e000ed29 	.word	0xe000ed29
   2783c:	e000ed2c 	.word	0xe000ed2c

00027840 <_FaultDump>:
 *   Address: 0xff001234
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
   27840:	b508      	push	{r3, lr}
	switch (fault) {
   27842:	1ecb      	subs	r3, r1, #3
   27844:	2b09      	cmp	r3, #9
   27846:	d817      	bhi.n	27878 <_FaultDump+0x38>
   27848:	e8df f003 	tbb	[pc, r3]
   2784c:	100c0805 	.word	0x100c0805
   27850:	16161616 	.word	0x16161616
   27854:	1316      	.short	0x1316
	case 3:
		_HardFault(esf);
   27856:	f7ff ffb5 	bl	277c4 <_HardFault>
		break;
   2785a:	bd08      	pop	{r3, pc}
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	case 4:
		_MpuFault(esf, 0);
   2785c:	2100      	movs	r1, #0
   2785e:	f7ff feab 	bl	275b8 <_MpuFault>
		break;
   27862:	bd08      	pop	{r3, pc}
	case 5:
		_BusFault(esf, 0);
   27864:	2100      	movs	r1, #0
   27866:	f7ff fef5 	bl	27654 <_BusFault>
		break;
   2786a:	bd08      	pop	{r3, pc}
	case 6:
		_UsageFault(esf);
   2786c:	f7ff ff54 	bl	27718 <_UsageFault>
		break;
   27870:	bd08      	pop	{r3, pc}
	case 12:
		_DebugMonitor(esf);
   27872:	f7ff fe7b 	bl	2756c <_DebugMonitor>
		break;
   27876:	bd08      	pop	{r3, pc}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	default:
		_ReservedException(esf, fault);
   27878:	f7ff fe80 	bl	2757c <_ReservedException>
   2787c:	bd08      	pop	{r3, pc}
	...

00027880 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
   27880:	b510      	push	{r4, lr}
   27882:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   27884:	4b05      	ldr	r3, [pc, #20]	; (2789c <_Fault+0x1c>)
   27886:	6859      	ldr	r1, [r3, #4]

	FAULT_DUMP(esf, fault);
   27888:	f3c1 0108 	ubfx	r1, r1, #0, #9
   2788c:	f7ff ffd8 	bl	27840 <_FaultDump>

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
   27890:	4621      	mov	r1, r4
   27892:	2000      	movs	r0, #0
   27894:	f000 f8e0 	bl	27a58 <_SysFatalErrorHandler>
   27898:	bd10      	pop	{r4, pc}
   2789a:	bf00      	nop
   2789c:	e000ed00 	.word	0xe000ed00

000278a0 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   278a0:	4a02      	ldr	r2, [pc, #8]	; (278ac <_FaultInit+0xc>)
   278a2:	6953      	ldr	r3, [r2, #20]
   278a4:	f043 0310 	orr.w	r3, r3, #16
   278a8:	6153      	str	r3, [r2, #20]
   278aa:	4770      	bx	lr
   278ac:	e000ed00 	.word	0xe000ed00

000278b0 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   278b0:	b243      	sxtb	r3, r0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   278b2:	095b      	lsrs	r3, r3, #5
   278b4:	f000 001f 	and.w	r0, r0, #31
   278b8:	2201      	movs	r2, #1
   278ba:	fa02 f000 	lsl.w	r0, r2, r0
   278be:	4a02      	ldr	r2, [pc, #8]	; (278c8 <_arch_irq_enable+0x18>)
   278c0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   278c4:	4770      	bx	lr
   278c6:	bf00      	nop
   278c8:	e000e100 	.word	0xe000e100

000278cc <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   278cc:	b243      	sxtb	r3, r0
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   278ce:	095b      	lsrs	r3, r3, #5
   278d0:	f000 001f 	and.w	r0, r0, #31
   278d4:	2201      	movs	r2, #1
   278d6:	fa02 f000 	lsl.w	r0, r2, r0
   278da:	3320      	adds	r3, #32
   278dc:	4a01      	ldr	r2, [pc, #4]	; (278e4 <_arch_irq_disable+0x18>)
   278de:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   278e2:	4770      	bx	lr
   278e4:	e000e100 	.word	0xe000e100

000278e8 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
   278e8:	0942      	lsrs	r2, r0, #5
   278ea:	4b05      	ldr	r3, [pc, #20]	; (27900 <_arch_irq_is_enabled+0x18>)
   278ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   278f0:	f000 001f 	and.w	r0, r0, #31
   278f4:	2301      	movs	r3, #1
   278f6:	fa03 f000 	lsl.w	r0, r3, r0
}
   278fa:	4010      	ands	r0, r2
   278fc:	4770      	bx	lr
   278fe:	bf00      	nop
   27900:	e000e100 	.word	0xe000e100

00027904 <_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   27904:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   27906:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) < 0)
   27908:	2b00      	cmp	r3, #0
   2790a:	db08      	blt.n	2791e <_irq_priority_set+0x1a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2790c:	0149      	lsls	r1, r1, #5
   2790e:	b2c9      	uxtb	r1, r1
   27910:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   27914:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   27918:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   2791c:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2791e:	f000 000f 	and.w	r0, r0, #15
   27922:	0149      	lsls	r1, r1, #5
   27924:	b2c9      	uxtb	r1, r1
   27926:	4b01      	ldr	r3, [pc, #4]	; (2792c <_irq_priority_set+0x28>)
   27928:	5419      	strb	r1, [r3, r0]
   2792a:	4770      	bx	lr
   2792c:	e000ed14 	.word	0xe000ed14

00027930 <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
   27930:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	__reserved();
   27932:	f000 f847 	bl	279c4 <__bus_fault>
   27936:	bd08      	pop	{r3, pc}

00027938 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   27938:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   2793a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	if (_kernel.idle) {
   2793c:	4b04      	ldr	r3, [pc, #16]	; (27950 <_arch_isr_direct_pm+0x18>)
   2793e:	6958      	ldr	r0, [r3, #20]
   27940:	b908      	cbnz	r0, 27946 <_arch_isr_direct_pm+0xe>
	}

#if defined(CONFIG_ARMV6_M)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("cpsie i" : : : "memory");
   27942:	b662      	cpsie	i
   27944:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   27946:	2200      	movs	r2, #0
   27948:	615a      	str	r2, [r3, #20]
		_sys_power_save_idle_exit(idle_val);
   2794a:	f000 f9b5 	bl	27cb8 <_sys_power_save_idle_exit>
   2794e:	e7f8      	b.n	27942 <_arch_isr_direct_pm+0xa>
   27950:	20002878 	.word	0x20002878

00027954 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   27954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27956:	4605      	mov	r5, r0
   27958:	460c      	mov	r4, r1
   2795a:	4616      	mov	r6, r2
   2795c:	461f      	mov	r7, r3
	ARG_UNUSED(pStack);
	ARG_UNUSED(stackSize);
#endif

#ifdef CONFIG_INIT_STACKS
	memset(pStack, 0xaa, stackSize);
   2795e:	21aa      	movs	r1, #170	; 0xaa
   27960:	4620      	mov	r0, r4
   27962:	f002 fc0d 	bl	2a180 <memset>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   27966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27968:	2204      	movs	r2, #4
   2796a:	9909      	ldr	r1, [sp, #36]	; 0x24
   2796c:	4628      	mov	r0, r5
   2796e:	f001 ff51 	bl	29814 <_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   27972:	2300      	movs	r3, #0
   27974:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
   27976:	652b      	str	r3, [r5, #80]	; 0x50
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
   27978:	65ac      	str	r4, [r5, #88]	; 0x58
	thread->stack_info.size = (u32_t)stackSize;
   2797a:	65ee      	str	r6, [r5, #92]	; 0x5c
	struct __esf *pInitCtx;
	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   2797c:	f1a6 0120 	sub.w	r1, r6, #32
   27980:	4421      	add	r1, r4
   27982:	f021 0107 	bic.w	r1, r1, #7
						     sizeof(struct __esf)));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
   27986:	4a08      	ldr	r2, [pc, #32]	; (279a8 <_new_thread+0x54>)
   27988:	f022 0201 	bic.w	r2, r2, #1
   2798c:	618a      	str	r2, [r1, #24]
	pInitCtx->a1 = (u32_t)pEntry;
   2798e:	600f      	str	r7, [r1, #0]
	pInitCtx->a2 = (u32_t)parameter1;
   27990:	9a06      	ldr	r2, [sp, #24]
   27992:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
   27994:	9a07      	ldr	r2, [sp, #28]
   27996:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
   27998:	9a08      	ldr	r2, [sp, #32]
   2799a:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
   2799c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   279a0:	61ca      	str	r2, [r1, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
   279a2:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
   279a4:	662b      	str	r3, [r5, #96]	; 0x60
   279a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   279a8:	000294fd 	.word	0x000294fd

000279ac <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
   279ac:	4901      	ldr	r1, [pc, #4]	; (279b4 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   279ae:	2210      	movs	r2, #16
	str r2, [r1]
   279b0:	600a      	str	r2, [r1, #0]
	bx lr
   279b2:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   279b4:	e000ed10 	.word	0xe000ed10

000279b8 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M)
	cpsie i
#elif defined(CONFIG_ARMV7_M)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   279b8:	4040      	eors	r0, r0
	msr BASEPRI, r0
   279ba:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
   279be:	bf30      	wfi

	bx lr
   279c0:	4770      	bx	lr
   279c2:	bf00      	nop

000279c4 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M)
	/* force unlock interrupts */
	eors.n r0, r0
   279c4:	4040      	eors	r0, r0
	msr BASEPRI, r0
   279c6:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
   279ca:	f8df c01c 	ldr.w	ip, [pc, #28]	; 279e8 <__bus_fault+0x24>
	ldr ip, [ip]
   279ce:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
   279d2:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
   279d6:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
   279d8:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
   279dc:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
   279e0:	b500      	push	{lr}
	bl _Fault
   279e2:	f7ff ff4d 	bl	27880 <_Fault>

	pop {pc}
   279e6:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
   279e8:	e000ed04 	.word	0xe000ed04

000279ec <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   279ec:	b538      	push	{r3, r4, r5, lr}
   279ee:	4604      	mov	r4, r0
   279f0:	460d      	mov	r5, r1
	switch (reason) {
   279f2:	2804      	cmp	r0, #4
   279f4:	d017      	beq.n	27a26 <_NanoFatalErrorHandler+0x3a>
   279f6:	2805      	cmp	r0, #5
   279f8:	d019      	beq.n	27a2e <_NanoFatalErrorHandler+0x42>
   279fa:	2803      	cmp	r0, #3
   279fc:	d004      	beq.n	27a08 <_NanoFatalErrorHandler+0x1c>
	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
   279fe:	4601      	mov	r1, r0
   27a00:	480d      	ldr	r0, [pc, #52]	; (27a38 <_NanoFatalErrorHandler+0x4c>)
   27a02:	f7db fa77 	bl	2ef4 <printk>
		break;
   27a06:	e002      	b.n	27a0e <_NanoFatalErrorHandler+0x22>
		printk("**** Kernel Allocation Failure! ****\n");
   27a08:	480c      	ldr	r0, [pc, #48]	; (27a3c <_NanoFatalErrorHandler+0x50>)
   27a0a:	f7db fa73 	bl	2ef4 <printk>
   27a0e:	f001 fa2b 	bl	28e68 <_impl_k_current_get>
	}
	printk("Current thread ID = %p\n"
   27a12:	69aa      	ldr	r2, [r5, #24]
   27a14:	4601      	mov	r1, r0
   27a16:	480a      	ldr	r0, [pc, #40]	; (27a40 <_NanoFatalErrorHandler+0x54>)
   27a18:	f7db fa6c 	bl	2ef4 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
   27a1c:	4629      	mov	r1, r5
   27a1e:	4620      	mov	r0, r4
   27a20:	f000 f81a 	bl	27a58 <_SysFatalErrorHandler>
   27a24:	bd38      	pop	{r3, r4, r5, pc}
		printk("***** Kernel OOPS! *****\n");
   27a26:	4807      	ldr	r0, [pc, #28]	; (27a44 <_NanoFatalErrorHandler+0x58>)
   27a28:	f7db fa64 	bl	2ef4 <printk>
		break;
   27a2c:	e7ef      	b.n	27a0e <_NanoFatalErrorHandler+0x22>
		printk("***** Kernel Panic! *****\n");
   27a2e:	4806      	ldr	r0, [pc, #24]	; (27a48 <_NanoFatalErrorHandler+0x5c>)
   27a30:	f7db fa60 	bl	2ef4 <printk>
		break;
   27a34:	e7eb      	b.n	27a0e <_NanoFatalErrorHandler+0x22>
   27a36:	bf00      	nop
   27a38:	000328f0 	.word	0x000328f0
   27a3c:	00032890 	.word	0x00032890
   27a40:	00032914 	.word	0x00032914
   27a44:	000328b8 	.word	0x000328b8
   27a48:	000328d4 	.word	0x000328d4

00027a4c <_do_kernel_oops>:
}

void _do_kernel_oops(const NANO_ESF *esf)
{
   27a4c:	b508      	push	{r3, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
   27a4e:	4601      	mov	r1, r0
   27a50:	6800      	ldr	r0, [r0, #0]
   27a52:	f7ff ffcb 	bl	279ec <_NanoFatalErrorHandler>
   27a56:	bd08      	pop	{r3, pc}

00027a58 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
   27a58:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   27a5a:	2805      	cmp	r0, #5
   27a5c:	d00c      	beq.n	27a78 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
   27a5e:	f001 fd31 	bl	294c4 <k_is_in_isr>
   27a62:	b910      	cbnz	r0, 27a6a <_SysFatalErrorHandler+0x12>
   27a64:	f001 fd42 	bl	294ec <_is_thread_essential>
   27a68:	b158      	cbz	r0, 27a82 <_SysFatalErrorHandler+0x2a>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
   27a6a:	f001 fd2b 	bl	294c4 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
   27a6e:	b130      	cbz	r0, 27a7e <_SysFatalErrorHandler+0x26>
   27a70:	4908      	ldr	r1, [pc, #32]	; (27a94 <_SysFatalErrorHandler+0x3c>)
   27a72:	4809      	ldr	r0, [pc, #36]	; (27a98 <_SysFatalErrorHandler+0x40>)
   27a74:	f7db fa3e 	bl	2ef4 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
   27a78:	f7ff ff9e 	bl	279b8 <k_cpu_idle>
   27a7c:	e7fc      	b.n	27a78 <_SysFatalErrorHandler+0x20>
		printk("Fatal fault in %s! Spinning...\n",
   27a7e:	4907      	ldr	r1, [pc, #28]	; (27a9c <_SysFatalErrorHandler+0x44>)
   27a80:	e7f7      	b.n	27a72 <_SysFatalErrorHandler+0x1a>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
   27a82:	4c07      	ldr	r4, [pc, #28]	; (27aa0 <_SysFatalErrorHandler+0x48>)
   27a84:	68a1      	ldr	r1, [r4, #8]
   27a86:	4807      	ldr	r0, [pc, #28]	; (27aa4 <_SysFatalErrorHandler+0x4c>)
   27a88:	f7db fa34 	bl	2ef4 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   27a8c:	68a0      	ldr	r0, [r4, #8]
   27a8e:	f000 f80b 	bl	27aa8 <_impl_k_thread_abort>
	return;
   27a92:	bd10      	pop	{r4, pc}
   27a94:	00031d60 	.word	0x00031d60
   27a98:	00032964 	.word	0x00032964
   27a9c:	00032950 	.word	0x00032950
   27aa0:	20002878 	.word	0x20002878
   27aa4:	00032984 	.word	0x00032984

00027aa8 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
   27aa8:	b538      	push	{r3, r4, r5, lr}
   27aaa:	4605      	mov	r5, r0
	__asm__ volatile(
   27aac:	f04f 0320 	mov.w	r3, #32
   27ab0:	f3ef 8411 	mrs	r4, BASEPRI
   27ab4:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
   27ab8:	f001 fe28 	bl	2970c <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
   27abc:	4b0b      	ldr	r3, [pc, #44]	; (27aec <_impl_k_thread_abort+0x44>)
   27abe:	689b      	ldr	r3, [r3, #8]
   27ac0:	429d      	cmp	r5, r3
   27ac2:	d003      	beq.n	27acc <_impl_k_thread_abort+0x24>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
   27ac4:	4620      	mov	r0, r4
   27ac6:	f001 fa03 	bl	28ed0 <_reschedule_threads>
   27aca:	bd38      	pop	{r3, r4, r5, pc}
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   27acc:	4b08      	ldr	r3, [pc, #32]	; (27af0 <_impl_k_thread_abort+0x48>)
   27ace:	685b      	ldr	r3, [r3, #4]
   27ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   27ad4:	b12b      	cbz	r3, 27ae2 <_impl_k_thread_abort+0x3a>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   27ad6:	4a06      	ldr	r2, [pc, #24]	; (27af0 <_impl_k_thread_abort+0x48>)
   27ad8:	6853      	ldr	r3, [r2, #4]
   27ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   27ade:	6053      	str	r3, [r2, #4]
   27ae0:	e7f0      	b.n	27ac4 <_impl_k_thread_abort+0x1c>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   27ae2:	f001 f9ef 	bl	28ec4 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   27ae6:	4620      	mov	r0, r4
   27ae8:	f7ff fd32 	bl	27550 <__swap>
   27aec:	20002878 	.word	0x20002878
   27af0:	e000ed00 	.word	0xe000ed00

00027af4 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
   27af4:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   27af6:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   27af8:	4a0b      	ldr	r2, [pc, #44]	; (27b28 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   27afa:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   27afc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M)
	ittt ne
   27afe:	bf1e      	ittt	ne
	movne	r1, #0
   27b00:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   27b02:	6151      	strne	r1, [r2, #20]
		blxne	_sys_power_save_idle_exit
   27b04:	f000 f8d8 	blne	27cb8 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   27b08:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
   27b0a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M)
	sub r0, r0, #16	/* get IRQ number */
   27b0e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   27b12:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
   27b16:	4905      	ldr	r1, [pc, #20]	; (27b2c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   27b18:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   27b1a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
   27b1c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M)
	pop {lr}
   27b1e:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
   27b22:	f7ff bca5 	b.w	27470 <_ExcExit>
   27b26:	0000      	.short	0x0000
	ldr r2, =_kernel
   27b28:	20002878 	.word	0x20002878
	ldr r1, =_sw_isr_table
   27b2c:	000000dc 	.word	0x000000dc

00027b30 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   27b30:	2020      	movs	r0, #32
    msr BASEPRI, r0
   27b32:	f380 8811 	msr	BASEPRI, r0
    /* board-specific watchdog initialization is necessary */
    bl _WdogInit
#endif

#ifdef CONFIG_INIT_STACKS
    ldr r0, =_interrupt_stack
   27b36:	4809      	ldr	r0, [pc, #36]	; (27b5c <__reset+0x2c>)
    ldr r1, =0xaa
   27b38:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE
   27b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
   27b40:	f002 fb1e 	bl	2a180 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
   27b44:	4805      	ldr	r0, [pc, #20]	; (27b5c <__reset+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   27b46:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   27b4a:	1840      	adds	r0, r0, r1
    msr PSP, r0
   27b4c:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
   27b50:	2002      	movs	r0, #2
    msr CONTROL, r0
   27b52:	f380 8814 	msr	CONTROL, r0

    b _PrepC
   27b56:	f000 b807 	b.w	27b68 <_PrepC>
   27b5a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   27b5c:	2000ad60 	.word	0x2000ad60

00027b60 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
   27b60:	bf30      	wfi
    b _SysNmiOnReset
   27b62:	f7ff bffd 	b.w	27b60 <_SysNmiOnReset>
   27b66:	bf00      	nop

00027b68 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
   27b68:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   27b6a:	4a07      	ldr	r2, [pc, #28]	; (27b88 <_PrepC+0x20>)
   27b6c:	4b07      	ldr	r3, [pc, #28]	; (27b8c <_PrepC+0x24>)
   27b6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   27b72:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   27b74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   27b78:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
   27b7c:	f000 f9d6 	bl	27f2c <_bss_zero>
	_data_copy();
   27b80:	f000 f9e0 	bl	27f44 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
   27b84:	f000 fa00 	bl	27f88 <_Cstart>
   27b88:	e000ed00 	.word	0xe000ed00
   27b8c:	00000000 	.word	0x00000000

00027b90 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   27b90:	b508      	push	{r3, lr}
	handler();
   27b92:	f7ff ffe5 	bl	27b60 <_SysNmiOnReset>
	_ExcExit();
   27b96:	f7ff fc6b 	bl	27470 <_ExcExit>
   27b9a:	bd08      	pop	{r3, pc}

00027b9c <_region_init>:

static void _region_init(u32_t index, u32_t region_addr,
			 u32_t region_attr)
{
	/* Select the region you want to access */
	ARM_MPU_DEV->rnr = index;
   27b9c:	4b05      	ldr	r3, [pc, #20]	; (27bb4 <_region_init+0x18>)
   27b9e:	6098      	str	r0, [r3, #8]
	/* Configure the region */
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   27ba0:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
   27ba4:	4308      	orrs	r0, r1
   27ba6:	f040 0010 	orr.w	r0, r0, #16
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   27baa:	60d8      	str	r0, [r3, #12]
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
   27bac:	f042 0201 	orr.w	r2, r2, #1
   27bb0:	611a      	str	r2, [r3, #16]
   27bb2:	4770      	bx	lr
   27bb4:	e000ed90 	.word	0xe000ed90

00027bb8 <_arm_mpu_config>:
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
   27bb8:	4b14      	ldr	r3, [pc, #80]	; (27c0c <_arm_mpu_config+0x54>)
   27bba:	681a      	ldr	r2, [r3, #0]
	u32_t type = ARM_MPU_DEV->type;
   27bbc:	4b14      	ldr	r3, [pc, #80]	; (27c10 <_arm_mpu_config+0x58>)
   27bbe:	681b      	ldr	r3, [r3, #0]
	if (mpu_config.num_regions > _get_num_regions()) {
   27bc0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   27bc4:	429a      	cmp	r2, r3
   27bc6:	d81f      	bhi.n	27c08 <_arm_mpu_config+0x50>
{
   27bc8:	b510      	push	{r4, lr}
		return;
	}

	/* Disable MPU */
	ARM_MPU_DEV->ctrl = 0;
   27bca:	2400      	movs	r4, #0
   27bcc:	4b10      	ldr	r3, [pc, #64]	; (27c10 <_arm_mpu_config+0x58>)
   27bce:	605c      	str	r4, [r3, #4]

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   27bd0:	e00b      	b.n	27bea <_arm_mpu_config+0x32>
		_region_init(r_index,
			     mpu_config.mpu_regions[r_index].base,
   27bd2:	4b0e      	ldr	r3, [pc, #56]	; (27c0c <_arm_mpu_config+0x54>)
   27bd4:	6859      	ldr	r1, [r3, #4]
   27bd6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   27bda:	0093      	lsls	r3, r2, #2
   27bdc:	18ca      	adds	r2, r1, r3
		_region_init(r_index,
   27bde:	6892      	ldr	r2, [r2, #8]
   27be0:	58c9      	ldr	r1, [r1, r3]
   27be2:	4620      	mov	r0, r4
   27be4:	f7ff ffda 	bl	27b9c <_region_init>
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   27be8:	3401      	adds	r4, #1
   27bea:	4b08      	ldr	r3, [pc, #32]	; (27c0c <_arm_mpu_config+0x54>)
   27bec:	681b      	ldr	r3, [r3, #0]
   27bee:	429c      	cmp	r4, r3
   27bf0:	d3ef      	bcc.n	27bd2 <_arm_mpu_config+0x1a>
			     mpu_config.mpu_regions[r_index].attr);
	}

	/* Enable MPU */
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
   27bf2:	2205      	movs	r2, #5
   27bf4:	4b06      	ldr	r3, [pc, #24]	; (27c10 <_arm_mpu_config+0x58>)
   27bf6:	605a      	str	r2, [r3, #4]

	arm_mpu_enabled = 1;
   27bf8:	2201      	movs	r2, #1
   27bfa:	4b06      	ldr	r3, [pc, #24]	; (27c14 <_arm_mpu_config+0x5c>)
   27bfc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
   27bfe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   27c02:	f3bf 8f6f 	isb	sy
   27c06:	bd10      	pop	{r4, pc}
   27c08:	4770      	bx	lr
   27c0a:	bf00      	nop
   27c0c:	2000c628 	.word	0x2000c628
   27c10:	e000ed90 	.word	0xe000ed90
   27c14:	200027a4 	.word	0x200027a4

00027c18 <arm_mpu_init>:
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
   27c18:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);

	_arm_mpu_config();
   27c1a:	f7ff ffcd 	bl	27bb8 <_arm_mpu_config>

	return 0;
}
   27c1e:	2000      	movs	r0, #0
   27c20:	bd08      	pop	{r3, pc}
	...

00027c24 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   27c24:	b538      	push	{r3, r4, r5, lr}
   27c26:	4605      	mov	r5, r0
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   27c28:	4b07      	ldr	r3, [pc, #28]	; (27c48 <_sys_device_do_config_level+0x24>)
   27c2a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   27c2e:	e004      	b.n	27c3a <_sys_device_do_config_level+0x16>
								info++) {
		struct device_config *device = info->config;
   27c30:	6823      	ldr	r3, [r4, #0]

		device->init(info);
   27c32:	685b      	ldr	r3, [r3, #4]
   27c34:	4620      	mov	r0, r4
   27c36:	4798      	blx	r3
								info++) {
   27c38:	340c      	adds	r4, #12
	for (info = config_levels[level]; info < config_levels[level+1];
   27c3a:	1c6b      	adds	r3, r5, #1
   27c3c:	4a02      	ldr	r2, [pc, #8]	; (27c48 <_sys_device_do_config_level+0x24>)
   27c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   27c42:	429c      	cmp	r4, r3
   27c44:	d3f4      	bcc.n	27c30 <_sys_device_do_config_level+0xc>
		_k_object_init(info);
	}
}
   27c46:	bd38      	pop	{r3, r4, r5, pc}
   27c48:	000329ac 	.word	0x000329ac

00027c4c <device_get_binding>:

struct device *device_get_binding(const char *name)
{
   27c4c:	b538      	push	{r3, r4, r5, lr}
   27c4e:	4605      	mov	r5, r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   27c50:	4c0a      	ldr	r4, [pc, #40]	; (27c7c <device_get_binding+0x30>)
   27c52:	e000      	b.n	27c56 <device_get_binding+0xa>
   27c54:	340c      	adds	r4, #12
   27c56:	4b0a      	ldr	r3, [pc, #40]	; (27c80 <device_get_binding+0x34>)
   27c58:	429c      	cmp	r4, r3
   27c5a:	d00c      	beq.n	27c76 <device_get_binding+0x2a>
		if (!info->driver_api) {
   27c5c:	6863      	ldr	r3, [r4, #4]
   27c5e:	2b00      	cmp	r3, #0
   27c60:	d0f8      	beq.n	27c54 <device_get_binding+0x8>
			continue;
		}

		if (name == info->config->name) {
   27c62:	6823      	ldr	r3, [r4, #0]
   27c64:	6819      	ldr	r1, [r3, #0]
   27c66:	42a9      	cmp	r1, r5
   27c68:	d006      	beq.n	27c78 <device_get_binding+0x2c>
			return info;
		}

		if (!strcmp(name, info->config->name)) {
   27c6a:	4628      	mov	r0, r5
   27c6c:	f7d8 fbcc 	bl	408 <strcmp>
   27c70:	2800      	cmp	r0, #0
   27c72:	d1ef      	bne.n	27c54 <device_get_binding+0x8>
   27c74:	e000      	b.n	27c78 <device_get_binding+0x2c>
			return info;
		}
	}

	return NULL;
   27c76:	2400      	movs	r4, #0
}
   27c78:	4620      	mov	r0, r4
   27c7a:	bd38      	pop	{r3, r4, r5, pc}
   27c7c:	2000d028 	.word	0x2000d028
   27c80:	2000d0e8 	.word	0x2000d0e8

00027c84 <set_kernel_idle_time_in_ticks>:
 *
 * @return N/A
 */
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
	_kernel.idle = ticks;
   27c84:	4b01      	ldr	r3, [pc, #4]	; (27c8c <set_kernel_idle_time_in_ticks+0x8>)
   27c86:	6158      	str	r0, [r3, #20]
   27c88:	4770      	bx	lr
   27c8a:	bf00      	nop
   27c8c:	20002878 	.word	0x20002878

00027c90 <_sys_power_save_idle>:
#else
#define set_kernel_idle_time_in_ticks(x) do { } while (0)
#endif

static void _sys_power_save_idle(s32_t ticks)
{
   27c90:	b510      	push	{r4, lr}
   27c92:	4604      	mov	r4, r0
			k_cpu_idle();
			return;
		}
	}
#endif
	if (_must_enter_tickless_idle(ticks)) {
   27c94:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27c98:	d003      	beq.n	27ca2 <_sys_power_save_idle+0x12>
   27c9a:	4b06      	ldr	r3, [pc, #24]	; (27cb4 <_sys_power_save_idle+0x24>)
   27c9c:	681b      	ldr	r3, [r3, #0]
   27c9e:	4298      	cmp	r0, r3
   27ca0:	db02      	blt.n	27ca8 <_sys_power_save_idle+0x18>
		/*
		 * In the case of tickless kernel, timer driver should
		 * reprogram timer only if the currently programmed time
		 * duration is smaller than the idle time.
		 */
		_timer_idle_enter(ticks);
   27ca2:	4620      	mov	r0, r4
   27ca4:	f7da fb9a 	bl	23dc <_timer_idle_enter>
	}

	set_kernel_idle_time_in_ticks(ticks);
   27ca8:	4620      	mov	r0, r4
   27caa:	f7ff ffeb 	bl	27c84 <set_kernel_idle_time_in_ticks>
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
   27cae:	f7ff fe83 	bl	279b8 <k_cpu_idle>
   27cb2:	bd10      	pop	{r4, pc}
   27cb4:	2000c66c 	.word	0x2000c66c

00027cb8 <_sys_power_save_idle_exit>:
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
   27cb8:	b508      	push	{r3, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   27cba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27cbe:	d003      	beq.n	27cc8 <_sys_power_save_idle_exit+0x10>
   27cc0:	4b03      	ldr	r3, [pc, #12]	; (27cd0 <_sys_power_save_idle_exit+0x18>)
   27cc2:	681b      	ldr	r3, [r3, #0]
   27cc4:	4298      	cmp	r0, r3
   27cc6:	db01      	blt.n	27ccc <_sys_power_save_idle_exit+0x14>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   27cc8:	f7da fb9e 	bl	2408 <_timer_idle_exit>
   27ccc:	bd08      	pop	{r3, pc}
   27cce:	bf00      	nop
   27cd0:	2000c66c 	.word	0x2000c66c

00027cd4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   27cd4:	b508      	push	{r3, lr}
   27cd6:	e005      	b.n	27ce4 <idle+0x10>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27cd8:	2300      	movs	r3, #0
   27cda:	e00e      	b.n	27cfa <idle+0x26>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   27cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__idle_time_stamp = (u64_t)k_cycle_get_32();
#endif

	for (;;) {
		(void)irq_lock();
		_sys_power_save_idle(_get_next_timeout_expiry());
   27ce0:	f7ff ffd6 	bl	27c90 <_sys_power_save_idle>
   27ce4:	f04f 0220 	mov.w	r2, #32
   27ce8:	f3ef 8311 	mrs	r3, BASEPRI
   27cec:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   27cf0:	4a04      	ldr	r2, [pc, #16]	; (27d04 <idle+0x30>)
   27cf2:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27cf6:	4293      	cmp	r3, r2
   27cf8:	d0ee      	beq.n	27cd8 <idle+0x4>
   27cfa:	2b00      	cmp	r3, #0
   27cfc:	d0ee      	beq.n	27cdc <idle+0x8>
   27cfe:	6918      	ldr	r0, [r3, #16]
   27d00:	e7ee      	b.n	27ce0 <idle+0xc>
   27d02:	bf00      	nop
   27d04:	20002878 	.word	0x20002878

00027d08 <switch_to_main_thread>:

	kernel_arch_init();
}

static void switch_to_main_thread(void)
{
   27d08:	b480      	push	{r7}
   27d0a:	af00      	add	r7, sp, #0
	/* get high address of the stack, i.e. its start (stack grows down) */
	char *start_of_main_stack;

	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   27d0c:	4b07      	ldr	r3, [pc, #28]	; (27d2c <switch_to_main_thread+0x24>)
   27d0e:	f023 0307 	bic.w	r3, r3, #7

	_current = main_thread;
   27d12:	4907      	ldr	r1, [pc, #28]	; (27d30 <switch_to_main_thread+0x28>)
   27d14:	4a07      	ldr	r2, [pc, #28]	; (27d34 <switch_to_main_thread+0x2c>)
   27d16:	6091      	str	r1, [r2, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   27d18:	4c07      	ldr	r4, [pc, #28]	; (27d38 <switch_to_main_thread+0x30>)
   27d1a:	4a08      	ldr	r2, [pc, #32]	; (27d3c <switch_to_main_thread+0x34>)
   27d1c:	f383 8809 	msr	PSP, r3
   27d20:	2100      	movs	r1, #0
   27d22:	f381 8811 	msr	BASEPRI, r1
   27d26:	4610      	mov	r0, r2
   27d28:	4720      	bx	r4
   27d2a:	bf00      	nop
   27d2c:	2000ac20 	.word	0x2000ac20
   27d30:	20002810 	.word	0x20002810
   27d34:	20002878 	.word	0x20002878
   27d38:	000294fd 	.word	0x000294fd
   27d3c:	00027f61 	.word	0x00027f61

00027d40 <prepare_multithreading>:
{
   27d40:	b5f0      	push	{r4, r5, r6, r7, lr}
   27d42:	b087      	sub	sp, #28
	_IntLibInit();
   27d44:	f7ff fbaa 	bl	2749c <_IntLibInit>
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   27d48:	2300      	movs	r3, #0
   27d4a:	e007      	b.n	27d5c <prepare_multithreading+0x1c>
		sys_dlist_init(&_ready_q.q[ii]);
   27d4c:	1d18      	adds	r0, r3, #4
   27d4e:	4927      	ldr	r1, [pc, #156]	; (27dec <prepare_multithreading+0xac>)
   27d50:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
	list->head = (sys_dnode_t *)list;
   27d54:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
	list->tail = (sys_dnode_t *)list;
   27d58:	6052      	str	r2, [r2, #4]
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   27d5a:	3301      	adds	r3, #1
   27d5c:	2b1f      	cmp	r3, #31
   27d5e:	ddf5      	ble.n	27d4c <prepare_multithreading+0xc>
	_ready_q.cache = _main_thread;
   27d60:	4e22      	ldr	r6, [pc, #136]	; (27dec <prepare_multithreading+0xac>)
   27d62:	4d23      	ldr	r5, [pc, #140]	; (27df0 <prepare_multithreading+0xb0>)
   27d64:	61b5      	str	r5, [r6, #24]
	_setup_new_thread(_main_thread, _main_stack,
   27d66:	2701      	movs	r7, #1
   27d68:	9704      	str	r7, [sp, #16]
   27d6a:	2400      	movs	r4, #0
   27d6c:	9403      	str	r4, [sp, #12]
   27d6e:	9402      	str	r4, [sp, #8]
   27d70:	9401      	str	r4, [sp, #4]
   27d72:	9400      	str	r4, [sp, #0]
   27d74:	4b1f      	ldr	r3, [pc, #124]	; (27df4 <prepare_multithreading+0xb4>)
   27d76:	f44f 6200 	mov.w	r2, #2048	; 0x800
   27d7a:	491f      	ldr	r1, [pc, #124]	; (27df8 <prepare_multithreading+0xb8>)
   27d7c:	4628      	mov	r0, r5
   27d7e:	f001 fc9b 	bl	296b8 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   27d82:	7a6b      	ldrb	r3, [r5, #9]
   27d84:	f023 0304 	bic.w	r3, r3, #4
   27d88:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
   27d8a:	4628      	mov	r0, r5
   27d8c:	f000 ff08 	bl	28ba0 <_add_thread_to_ready_q>
	_setup_new_thread(_idle_thread, _idle_stack,
   27d90:	4d1a      	ldr	r5, [pc, #104]	; (27dfc <prepare_multithreading+0xbc>)
   27d92:	9704      	str	r7, [sp, #16]
   27d94:	230f      	movs	r3, #15
   27d96:	9303      	str	r3, [sp, #12]
   27d98:	9402      	str	r4, [sp, #8]
   27d9a:	9401      	str	r4, [sp, #4]
   27d9c:	9400      	str	r4, [sp, #0]
   27d9e:	4b18      	ldr	r3, [pc, #96]	; (27e00 <prepare_multithreading+0xc0>)
   27da0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   27da4:	4917      	ldr	r1, [pc, #92]	; (27e04 <prepare_multithreading+0xc4>)
   27da6:	4628      	mov	r0, r5
   27da8:	f001 fc86 	bl	296b8 <_setup_new_thread>
   27dac:	7a6b      	ldrb	r3, [r5, #9]
   27dae:	f023 0304 	bic.w	r3, r3, #4
   27db2:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_idle_thread);
   27db4:	4628      	mov	r0, r5
   27db6:	f000 fef3 	bl	28ba0 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
   27dba:	f106 030c 	add.w	r3, r6, #12
   27dbe:	60f3      	str	r3, [r6, #12]
	list->tail = (sys_dnode_t *)list;
   27dc0:	6133      	str	r3, [r6, #16]
 *
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   27dc2:	4b11      	ldr	r3, [pc, #68]	; (27e08 <prepare_multithreading+0xc8>)
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
   27dc4:	f383 8808 	msr	MSP, r3
   27dc8:	4b10      	ldr	r3, [pc, #64]	; (27e0c <prepare_multithreading+0xcc>)
   27dca:	22e0      	movs	r2, #224	; 0xe0
   27dcc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   27dd0:	77dc      	strb	r4, [r3, #31]
   27dd2:	761c      	strb	r4, [r3, #24]
   27dd4:	765c      	strb	r4, [r3, #25]
   27dd6:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   27dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   27dda:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   27dde:	625a      	str	r2, [r3, #36]	; 0x24
	_FaultInit();
   27de0:	f7ff fd5e 	bl	278a0 <_FaultInit>
	_CpuIdleInit();
   27de4:	f7ff fde2 	bl	279ac <_CpuIdleInit>
}
   27de8:	b007      	add	sp, #28
   27dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27dec:	20002878 	.word	0x20002878
   27df0:	20002810 	.word	0x20002810
   27df4:	00027f61 	.word	0x00027f61
   27df8:	2000a420 	.word	0x2000a420
   27dfc:	200027a8 	.word	0x200027a8
   27e00:	00027cd5 	.word	0x00027cd5
   27e04:	2000ac20 	.word	0x2000ac20
   27e08:	2000b560 	.word	0x2000b560
   27e0c:	e000ed00 	.word	0xe000ed00

00027e10 <k_call_stacks_analyze>:
{
   27e10:	b500      	push	{lr}
   27e12:	b085      	sub	sp, #20
	printk("Kernel stacks:\n");
   27e14:	483a      	ldr	r0, [pc, #232]	; (27f00 <k_call_stacks_analyze+0xf0>)
   27e16:	f7db f86d 	bl	2ef4 <printk>
   27e1a:	2200      	movs	r2, #0
	size_t unused = 0;
   27e1c:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   27e1e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   27e22:	d206      	bcs.n	27e32 <k_call_stacks_analyze+0x22>
		if ((unsigned char)stack[i] == 0xaa) {
   27e24:	4937      	ldr	r1, [pc, #220]	; (27f04 <k_call_stacks_analyze+0xf4>)
   27e26:	5c89      	ldrb	r1, [r1, r2]
   27e28:	29aa      	cmp	r1, #170	; 0xaa
   27e2a:	d102      	bne.n	27e32 <k_call_stacks_analyze+0x22>
			unused++;
   27e2c:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   27e2e:	3201      	adds	r2, #1
   27e30:	e7f5      	b.n	27e1e <k_call_stacks_analyze+0xe>
	pcnt = ((size - unused) * 100) / size;
   27e32:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   27e36:	2264      	movs	r2, #100	; 0x64
   27e38:	fb02 f201 	mul.w	r2, r2, r1
   27e3c:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   27e3e:	9202      	str	r2, [sp, #8]
   27e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
   27e44:	9201      	str	r2, [sp, #4]
   27e46:	9100      	str	r1, [sp, #0]
   27e48:	492f      	ldr	r1, [pc, #188]	; (27f08 <k_call_stacks_analyze+0xf8>)
   27e4a:	4830      	ldr	r0, [pc, #192]	; (27f0c <k_call_stacks_analyze+0xfc>)
   27e4c:	f7db f852 	bl	2ef4 <printk>
	for (i = 0; i < size; i++) {
   27e50:	2200      	movs	r2, #0
	size_t unused = 0;
   27e52:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   27e54:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
   27e58:	d206      	bcs.n	27e68 <k_call_stacks_analyze+0x58>
		if ((unsigned char)stack[i] == 0xaa) {
   27e5a:	492d      	ldr	r1, [pc, #180]	; (27f10 <k_call_stacks_analyze+0x100>)
   27e5c:	5c89      	ldrb	r1, [r1, r2]
   27e5e:	29aa      	cmp	r1, #170	; 0xaa
   27e60:	d102      	bne.n	27e68 <k_call_stacks_analyze+0x58>
			unused++;
   27e62:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   27e64:	3201      	adds	r2, #1
   27e66:	e7f5      	b.n	27e54 <k_call_stacks_analyze+0x44>
	pcnt = ((size - unused) * 100) / size;
   27e68:	f5c3 71a0 	rsb	r1, r3, #320	; 0x140
   27e6c:	2264      	movs	r2, #100	; 0x64
   27e6e:	fb02 f201 	mul.w	r2, r2, r1
   27e72:	4828      	ldr	r0, [pc, #160]	; (27f14 <k_call_stacks_analyze+0x104>)
   27e74:	fba0 0202 	umull	r0, r2, r0, r2
   27e78:	0a12      	lsrs	r2, r2, #8
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   27e7a:	9202      	str	r2, [sp, #8]
   27e7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   27e80:	9201      	str	r2, [sp, #4]
   27e82:	9100      	str	r1, [sp, #0]
   27e84:	4924      	ldr	r1, [pc, #144]	; (27f18 <k_call_stacks_analyze+0x108>)
   27e86:	4821      	ldr	r0, [pc, #132]	; (27f0c <k_call_stacks_analyze+0xfc>)
   27e88:	f7db f834 	bl	2ef4 <printk>
	for (i = 0; i < size; i++) {
   27e8c:	2200      	movs	r2, #0
	size_t unused = 0;
   27e8e:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   27e90:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   27e94:	d206      	bcs.n	27ea4 <k_call_stacks_analyze+0x94>
		if ((unsigned char)stack[i] == 0xaa) {
   27e96:	4921      	ldr	r1, [pc, #132]	; (27f1c <k_call_stacks_analyze+0x10c>)
   27e98:	5c89      	ldrb	r1, [r1, r2]
   27e9a:	29aa      	cmp	r1, #170	; 0xaa
   27e9c:	d102      	bne.n	27ea4 <k_call_stacks_analyze+0x94>
			unused++;
   27e9e:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   27ea0:	3201      	adds	r2, #1
   27ea2:	e7f5      	b.n	27e90 <k_call_stacks_analyze+0x80>
	pcnt = ((size - unused) * 100) / size;
   27ea4:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   27ea8:	2264      	movs	r2, #100	; 0x64
   27eaa:	fb02 f201 	mul.w	r2, r2, r1
   27eae:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   27eb0:	9202      	str	r2, [sp, #8]
   27eb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   27eb6:	9201      	str	r2, [sp, #4]
   27eb8:	9100      	str	r1, [sp, #0]
   27eba:	4919      	ldr	r1, [pc, #100]	; (27f20 <k_call_stacks_analyze+0x110>)
   27ebc:	4813      	ldr	r0, [pc, #76]	; (27f0c <k_call_stacks_analyze+0xfc>)
   27ebe:	f7db f819 	bl	2ef4 <printk>
	for (i = 0; i < size; i++) {
   27ec2:	2200      	movs	r2, #0
	size_t unused = 0;
   27ec4:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   27ec6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   27eca:	d206      	bcs.n	27eda <k_call_stacks_analyze+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
   27ecc:	4915      	ldr	r1, [pc, #84]	; (27f24 <k_call_stacks_analyze+0x114>)
   27ece:	5c89      	ldrb	r1, [r1, r2]
   27ed0:	29aa      	cmp	r1, #170	; 0xaa
   27ed2:	d102      	bne.n	27eda <k_call_stacks_analyze+0xca>
			unused++;
   27ed4:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   27ed6:	3201      	adds	r2, #1
   27ed8:	e7f5      	b.n	27ec6 <k_call_stacks_analyze+0xb6>
	pcnt = ((size - unused) * 100) / size;
   27eda:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
   27ede:	2264      	movs	r2, #100	; 0x64
   27ee0:	fb02 f201 	mul.w	r2, r2, r1
   27ee4:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   27ee6:	9202      	str	r2, [sp, #8]
   27ee8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   27eec:	9201      	str	r2, [sp, #4]
   27eee:	9100      	str	r1, [sp, #0]
   27ef0:	490d      	ldr	r1, [pc, #52]	; (27f28 <k_call_stacks_analyze+0x118>)
   27ef2:	4806      	ldr	r0, [pc, #24]	; (27f0c <k_call_stacks_analyze+0xfc>)
   27ef4:	f7da fffe 	bl	2ef4 <printk>
}
   27ef8:	b005      	add	sp, #20
   27efa:	f85d fb04 	ldr.w	pc, [sp], #4
   27efe:	bf00      	nop
   27f00:	000329c8 	.word	0x000329c8
   27f04:	2000a420 	.word	0x2000a420
   27f08:	000329d8 	.word	0x000329d8
   27f0c:	00030d78 	.word	0x00030d78
   27f10:	2000ac20 	.word	0x2000ac20
   27f14:	cccccccd 	.word	0xcccccccd
   27f18:	000329e4 	.word	0x000329e4
   27f1c:	2000ad60 	.word	0x2000ad60
   27f20:	000329f0 	.word	0x000329f0
   27f24:	2000b560 	.word	0x2000b560
   27f28:	000329fc 	.word	0x000329fc

00027f2c <_bss_zero>:
{
   27f2c:	b508      	push	{r3, lr}
		 ((u32_t) &__bss_end - (u32_t) &__bss_start));
   27f2e:	4803      	ldr	r0, [pc, #12]	; (27f3c <_bss_zero+0x10>)
	memset(&__bss_start, 0,
   27f30:	4a03      	ldr	r2, [pc, #12]	; (27f40 <_bss_zero+0x14>)
   27f32:	1a12      	subs	r2, r2, r0
   27f34:	2100      	movs	r1, #0
   27f36:	f002 f923 	bl	2a180 <memset>
   27f3a:	bd08      	pop	{r3, pc}
   27f3c:	20000000 	.word	0x20000000
   27f40:	20002d10 	.word	0x20002d10

00027f44 <_data_copy>:
{
   27f44:	b508      	push	{r3, lr}
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
   27f46:	4803      	ldr	r0, [pc, #12]	; (27f54 <_data_copy+0x10>)
	memcpy(&__data_ram_start, &__data_rom_start,
   27f48:	4a03      	ldr	r2, [pc, #12]	; (27f58 <_data_copy+0x14>)
   27f4a:	1a12      	subs	r2, r2, r0
   27f4c:	4903      	ldr	r1, [pc, #12]	; (27f5c <_data_copy+0x18>)
   27f4e:	f7d8 f9b7 	bl	2c0 <memcpy>
   27f52:	bd08      	pop	{r3, pc}
   27f54:	2000b960 	.word	0x2000b960
   27f58:	2000d5b4 	.word	0x2000d5b4
   27f5c:	00032c84 	.word	0x00032c84

00027f60 <_main>:
{
   27f60:	b508      	push	{r3, lr}
	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   27f62:	2002      	movs	r0, #2
   27f64:	f7ff fe5e 	bl	27c24 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   27f68:	2003      	movs	r0, #3
   27f6a:	f7ff fe5b 	bl	27c24 <_sys_device_do_config_level>
	_init_static_threads();
   27f6e:	f001 fc11 	bl	29794 <_init_static_threads>
	main();
   27f72:	f7d9 fcd1 	bl	1918 <main>
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   27f76:	4a03      	ldr	r2, [pc, #12]	; (27f84 <_main+0x24>)
   27f78:	7a13      	ldrb	r3, [r2, #8]
   27f7a:	f023 0301 	bic.w	r3, r3, #1
   27f7e:	7213      	strb	r3, [r2, #8]
   27f80:	bd08      	pop	{r3, pc}
   27f82:	bf00      	nop
   27f84:	20002810 	.word	0x20002810

00027f88 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   27f88:	b508      	push	{r3, lr}
	 * Initialize kernel data structures. This step includes
	 * initializing the interrupt subsystem, which must be performed
	 * before the hardware initialization phase.
	 */

	prepare_multithreading(dummy_thread);
   27f8a:	2000      	movs	r0, #0
   27f8c:	f7ff fed8 	bl	27d40 <prepare_multithreading>

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   27f90:	2000      	movs	r0, #0
   27f92:	f7ff fe47 	bl	27c24 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   27f96:	2001      	movs	r0, #1
   27f98:	f7ff fe44 	bl	27c24 <_sys_device_do_config_level>
	__stack_chk_guard = (void *)sys_rand32_get();
#endif

	/* display boot banner */

	switch_to_main_thread();
   27f9c:	f7ff feb4 	bl	27d08 <switch_to_main_thread>

00027fa0 <create_free_list>:
static void create_free_list(struct k_mem_slab *slab)
{
	u32_t j;
	char *p;

	slab->free_list = NULL;
   27fa0:	2200      	movs	r2, #0
   27fa2:	6142      	str	r2, [r0, #20]
	p = slab->buffer;
   27fa4:	6903      	ldr	r3, [r0, #16]

	for (j = 0; j < slab->num_blocks; j++) {
   27fa6:	e005      	b.n	27fb4 <create_free_list+0x14>
		*(char **)p = slab->free_list;
   27fa8:	6941      	ldr	r1, [r0, #20]
   27faa:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   27fac:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   27fae:	68c1      	ldr	r1, [r0, #12]
   27fb0:	440b      	add	r3, r1
	for (j = 0; j < slab->num_blocks; j++) {
   27fb2:	3201      	adds	r2, #1
   27fb4:	6881      	ldr	r1, [r0, #8]
   27fb6:	428a      	cmp	r2, r1
   27fb8:	d3f6      	bcc.n	27fa8 <create_free_list+0x8>
	}
}
   27fba:	4770      	bx	lr

00027fbc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   27fbc:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   27fbe:	4c05      	ldr	r4, [pc, #20]	; (27fd4 <init_mem_slab_module+0x18>)
   27fc0:	e003      	b.n	27fca <init_mem_slab_module+0xe>
	     slab < _k_mem_slab_list_end;
	     slab++) {
		create_free_list(slab);
   27fc2:	4620      	mov	r0, r4
   27fc4:	f7ff ffec 	bl	27fa0 <create_free_list>
	     slab++) {
   27fc8:	341c      	adds	r4, #28
	for (slab = _k_mem_slab_list_start;
   27fca:	4b03      	ldr	r3, [pc, #12]	; (27fd8 <init_mem_slab_module+0x1c>)
   27fcc:	429c      	cmp	r4, r3
   27fce:	d3f8      	bcc.n	27fc2 <init_mem_slab_module+0x6>
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
	}
	return 0;
}
   27fd0:	2000      	movs	r0, #0
   27fd2:	bd10      	pop	{r4, pc}
   27fd4:	2000d0f4 	.word	0x2000d0f4
   27fd8:	2000d12c 	.word	0x2000d12c

00027fdc <k_mem_slab_alloc>:

	_k_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   27fdc:	b538      	push	{r3, r4, r5, lr}
   27fde:	f04f 0320 	mov.w	r3, #32
   27fe2:	f3ef 8411 	mrs	r4, BASEPRI
   27fe6:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	int result;

	if (slab->free_list != NULL) {
   27fea:	6943      	ldr	r3, [r0, #20]
   27fec:	b15b      	cbz	r3, 28006 <k_mem_slab_alloc+0x2a>
		/* take a free block */
		*mem = slab->free_list;
   27fee:	600b      	str	r3, [r1, #0]
		slab->free_list = *(char **)(slab->free_list);
   27ff0:	6943      	ldr	r3, [r0, #20]
   27ff2:	681b      	ldr	r3, [r3, #0]
   27ff4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   27ff6:	6983      	ldr	r3, [r0, #24]
   27ff8:	3301      	adds	r3, #1
   27ffa:	6183      	str	r3, [r0, #24]
		result = 0;
   27ffc:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27ffe:	f384 8811 	msr	BASEPRI, r4
	}

	irq_unlock(key);

	return result;
}
   28002:	4618      	mov	r0, r3
   28004:	bd38      	pop	{r3, r4, r5, pc}
	} else if (timeout == K_NO_WAIT) {
   28006:	b922      	cbnz	r2, 28012 <k_mem_slab_alloc+0x36>
		*mem = NULL;
   28008:	2300      	movs	r3, #0
   2800a:	600b      	str	r3, [r1, #0]
		result = -ENOMEM;
   2800c:	f06f 030b 	mvn.w	r3, #11
   28010:	e7f5      	b.n	27ffe <k_mem_slab_alloc+0x22>
   28012:	460d      	mov	r5, r1
		_pend_current_thread(&slab->wait_q, timeout);
   28014:	4611      	mov	r1, r2
   28016:	f000 fed7 	bl	28dc8 <_pend_current_thread>
	_update_time_slice_before_swap();
   2801a:	f000 ff53 	bl	28ec4 <_update_time_slice_before_swap>
	return __swap(key);
   2801e:	4620      	mov	r0, r4
   28020:	f7ff fa96 	bl	27550 <__swap>
		if (result == 0) {
   28024:	4603      	mov	r3, r0
   28026:	2800      	cmp	r0, #0
   28028:	d1eb      	bne.n	28002 <k_mem_slab_alloc+0x26>
			*mem = _current->base.swap_data;
   2802a:	4a02      	ldr	r2, [pc, #8]	; (28034 <k_mem_slab_alloc+0x58>)
   2802c:	6892      	ldr	r2, [r2, #8]
   2802e:	68d2      	ldr	r2, [r2, #12]
   28030:	602a      	str	r2, [r5, #0]
   28032:	e7e6      	b.n	28002 <k_mem_slab_alloc+0x26>
   28034:	20002878 	.word	0x20002878

00028038 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   28038:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2803a:	f04f 0320 	mov.w	r3, #32
   2803e:	f3ef 8411 	mrs	r4, BASEPRI
   28042:	f383 8811 	msr	BASEPRI, r3
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   28046:	4b3d      	ldr	r3, [pc, #244]	; (2813c <k_mem_slab_free+0x104>)
   28048:	681b      	ldr	r3, [r3, #0]
   2804a:	2b00      	cmp	r3, #0
   2804c:	d13a      	bne.n	280c4 <k_mem_slab_free+0x8c>
	return list->head == list;
   2804e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28050:	4298      	cmp	r0, r3
   28052:	d048      	beq.n	280e6 <k_mem_slab_free+0xae>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   28054:	b14b      	cbz	r3, 2806a <k_mem_slab_free+0x32>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   28056:	685a      	ldr	r2, [r3, #4]
   28058:	681d      	ldr	r5, [r3, #0]
   2805a:	6015      	str	r5, [r2, #0]
	node->next->prev = node->prev;
   2805c:	681a      	ldr	r2, [r3, #0]
   2805e:	685d      	ldr	r5, [r3, #4]
   28060:	6055      	str	r5, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28062:	7a5a      	ldrb	r2, [r3, #9]
   28064:	f022 0202 	bic.w	r2, r2, #2
   28068:	725a      	strb	r2, [r3, #9]
	int key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&slab->wait_q);

	if (pending_thread) {
   2806a:	2b00      	cmp	r3, #0
   2806c:	d05c      	beq.n	28128 <k_mem_slab_free+0xf0>
		_set_thread_return_value_with_data(pending_thread, 0, *mem);
   2806e:	680a      	ldr	r2, [r1, #0]
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   28070:	2100      	movs	r1, #0
   28072:	6659      	str	r1, [r3, #100]	; 0x64
	thread->base.swap_data = data;
   28074:	60da      	str	r2, [r3, #12]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   28076:	6a19      	ldr	r1, [r3, #32]
   28078:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2807c:	d013      	beq.n	280a6 <k_mem_slab_free+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2807e:	f103 0210 	add.w	r2, r3, #16
	return list->tail == node;
   28082:	482f      	ldr	r0, [pc, #188]	; (28140 <k_mem_slab_free+0x108>)
   28084:	6900      	ldr	r0, [r0, #16]
   28086:	4282      	cmp	r2, r0
   28088:	d004      	beq.n	28094 <k_mem_slab_free+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2808a:	b102      	cbz	r2, 2808e <k_mem_slab_free+0x56>
	return (node == list->tail) ? NULL : node->next;
   2808c:	691a      	ldr	r2, [r3, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2808e:	6910      	ldr	r0, [r2, #16]
   28090:	4401      	add	r1, r0
   28092:	6111      	str	r1, [r2, #16]
	node->prev->next = node->next;
   28094:	695a      	ldr	r2, [r3, #20]
   28096:	6919      	ldr	r1, [r3, #16]
   28098:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   2809a:	691a      	ldr	r2, [r3, #16]
   2809c:	6959      	ldr	r1, [r3, #20]
   2809e:	6051      	str	r1, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   280a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   280a4:	621a      	str	r2, [r3, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   280a6:	7a5a      	ldrb	r2, [r3, #9]
   280a8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   280ac:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   280ae:	f012 0f1b 	tst.w	r2, #27
   280b2:	d11c      	bne.n	280ee <k_mem_slab_free+0xb6>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   280b4:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   280b6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   280ba:	d016      	beq.n	280ea <k_mem_slab_free+0xb2>
   280bc:	2200      	movs	r2, #0
   280be:	e017      	b.n	280f0 <k_mem_slab_free+0xb8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   280c0:	2300      	movs	r3, #0
   280c2:	e003      	b.n	280cc <k_mem_slab_free+0x94>
   280c4:	4605      	mov	r5, r0
	return list->head == list;
   280c6:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   280c8:	4298      	cmp	r0, r3
   280ca:	d0f9      	beq.n	280c0 <k_mem_slab_free+0x88>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   280cc:	2b00      	cmp	r3, #0
   280ce:	d0c1      	beq.n	28054 <k_mem_slab_free+0x1c>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   280d0:	6a1a      	ldr	r2, [r3, #32]
			if (_is_thread_timeout_expired(thread)) {
   280d2:	f112 0f02 	cmn.w	r2, #2
   280d6:	d1bd      	bne.n	28054 <k_mem_slab_free+0x1c>
	return (node == list->tail) ? NULL : node->next;
   280d8:	686a      	ldr	r2, [r5, #4]
   280da:	4293      	cmp	r3, r2
   280dc:	d001      	beq.n	280e2 <k_mem_slab_free+0xaa>
   280de:	681b      	ldr	r3, [r3, #0]
   280e0:	e7f4      	b.n	280cc <k_mem_slab_free+0x94>
   280e2:	2300      	movs	r3, #0
   280e4:	e7f2      	b.n	280cc <k_mem_slab_free+0x94>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   280e6:	2300      	movs	r3, #0
   280e8:	e7b4      	b.n	28054 <k_mem_slab_free+0x1c>
	return !(_is_thread_prevented_from_running(thread) ||
   280ea:	2201      	movs	r2, #1
   280ec:	e000      	b.n	280f0 <k_mem_slab_free+0xb8>
   280ee:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   280f0:	b94a      	cbnz	r2, 28106 <k_mem_slab_free+0xce>
	return _is_preempt(_current) && __must_switch_threads();
   280f2:	4b13      	ldr	r3, [pc, #76]	; (28140 <k_mem_slab_free+0x108>)
   280f4:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   280f6:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   280f8:	2b7f      	cmp	r3, #127	; 0x7f
   280fa:	d908      	bls.n	2810e <k_mem_slab_free+0xd6>
   280fc:	2300      	movs	r3, #0
		_abort_thread_timeout(pending_thread);
		_ready_thread(pending_thread);
		if (_must_switch_threads()) {
   280fe:	b96b      	cbnz	r3, 2811c <k_mem_slab_free+0xe4>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28100:	f384 8811 	msr	BASEPRI, r4
   28104:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   28106:	4618      	mov	r0, r3
   28108:	f000 fd4a 	bl	28ba0 <_add_thread_to_ready_q>
   2810c:	e7f1      	b.n	280f2 <k_mem_slab_free+0xba>
	return _is_preempt(_current) && __must_switch_threads();
   2810e:	f000 fe6b 	bl	28de8 <__must_switch_threads>
   28112:	4603      	mov	r3, r0
   28114:	2800      	cmp	r0, #0
   28116:	d0f2      	beq.n	280fe <k_mem_slab_free+0xc6>
   28118:	2301      	movs	r3, #1
   2811a:	e7f0      	b.n	280fe <k_mem_slab_free+0xc6>
	_update_time_slice_before_swap();
   2811c:	f000 fed2 	bl	28ec4 <_update_time_slice_before_swap>
	return __swap(key);
   28120:	4620      	mov	r0, r4
   28122:	f7ff fa15 	bl	27550 <__swap>
   28126:	bd38      	pop	{r3, r4, r5, pc}
			_Swap(key);
			return;
		}
	} else {
		**(char ***)mem = slab->free_list;
   28128:	680b      	ldr	r3, [r1, #0]
   2812a:	6942      	ldr	r2, [r0, #20]
   2812c:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   2812e:	680b      	ldr	r3, [r1, #0]
   28130:	6143      	str	r3, [r0, #20]
		slab->num_used--;
   28132:	6983      	ldr	r3, [r0, #24]
   28134:	3b01      	subs	r3, #1
   28136:	6183      	str	r3, [r0, #24]
   28138:	e7e2      	b.n	28100 <k_mem_slab_free+0xc8>
   2813a:	bf00      	nop
   2813c:	20002c60 	.word	0x20002c60
   28140:	20002878 	.word	0x20002878

00028144 <new_prio_for_inheritance>:
}
#endif

static int new_prio_for_inheritance(int target, int limit)
{
	int new_prio = _is_prio_higher(target, limit) ? target : limit;
   28144:	4288      	cmp	r0, r1
   28146:	da00      	bge.n	2814a <new_prio_for_inheritance+0x6>
   28148:	4601      	mov	r1, r0
	return _is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2814a:	2900      	cmp	r1, #0
   2814c:	db01      	blt.n	28152 <new_prio_for_inheritance+0xe>
   2814e:	4608      	mov	r0, r1
   28150:	4770      	bx	lr
   28152:	2000      	movs	r0, #0

	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}
   28154:	4770      	bx	lr

00028156 <adjust_owner_prio>:

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
   28156:	b538      	push	{r3, r4, r5, lr}
	if (mutex->owner->base.prio != new_prio) {
   28158:	6884      	ldr	r4, [r0, #8]
   2815a:	f994 300a 	ldrsb.w	r3, [r4, #10]
   2815e:	428b      	cmp	r3, r1
   28160:	d00e      	beq.n	28180 <adjust_owner_prio+0x2a>
	u8_t state = thread->base.thread_state;
   28162:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28164:	f013 0f1f 	tst.w	r3, #31
   28168:	d107      	bne.n	2817a <adjust_owner_prio+0x24>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2816a:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2816c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28170:	d001      	beq.n	28176 <adjust_owner_prio+0x20>
   28172:	2300      	movs	r3, #0
   28174:	e002      	b.n	2817c <adjust_owner_prio+0x26>
   28176:	2301      	movs	r3, #1
   28178:	e000      	b.n	2817c <adjust_owner_prio+0x26>
   2817a:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2817c:	b90b      	cbnz	r3, 28182 <adjust_owner_prio+0x2c>
		thread->base.prio = prio;
   2817e:	72a1      	strb	r1, [r4, #10]
   28180:	bd38      	pop	{r3, r4, r5, pc}
   28182:	460d      	mov	r5, r1
		_remove_thread_from_ready_q(thread);
   28184:	4620      	mov	r0, r4
   28186:	f000 fd2b 	bl	28be0 <_remove_thread_from_ready_q>
		thread->base.prio = prio;
   2818a:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
   2818c:	4620      	mov	r0, r4
   2818e:	f000 fd07 	bl	28ba0 <_add_thread_to_ready_q>
   28192:	bd38      	pop	{r3, r4, r5, pc}

00028194 <_impl_k_mutex_lock>:
		_thread_priority_set(mutex->owner, new_prio);
	}
}

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   28194:	b570      	push	{r4, r5, r6, lr}
   28196:	4604      	mov	r4, r0
	--_current->base.sched_locked;
   28198:	4b32      	ldr	r3, [pc, #200]	; (28264 <_impl_k_mutex_lock+0xd0>)
   2819a:	689a      	ldr	r2, [r3, #8]
   2819c:	7ad3      	ldrb	r3, [r2, #11]
   2819e:	3b01      	subs	r3, #1
   281a0:	72d3      	strb	r3, [r2, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   281a2:	68c3      	ldr	r3, [r0, #12]
   281a4:	b97b      	cbnz	r3, 281c6 <_impl_k_mutex_lock+0x32>

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
					_current->base.prio :
   281a6:	2b00      	cmp	r3, #0
   281a8:	d133      	bne.n	28212 <_impl_k_mutex_lock+0x7e>
   281aa:	4a2e      	ldr	r2, [pc, #184]	; (28264 <_impl_k_mutex_lock+0xd0>)
   281ac:	6892      	ldr	r2, [r2, #8]
   281ae:	f992 200a 	ldrsb.w	r2, [r2, #10]
		mutex->owner_orig_prio = mutex->lock_count == 0 ?
   281b2:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   281b4:	3301      	adds	r3, #1
   281b6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   281b8:	4b2a      	ldr	r3, [pc, #168]	; (28264 <_impl_k_mutex_lock+0xd0>)
   281ba:	689b      	ldr	r3, [r3, #8]
   281bc:	60a3      	str	r3, [r4, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
   281be:	f000 fea1 	bl	28f04 <k_sched_unlock>

		return 0;
   281c2:	2000      	movs	r0, #0
   281c4:	bd70      	pop	{r4, r5, r6, pc}
   281c6:	460d      	mov	r5, r1
	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   281c8:	6881      	ldr	r1, [r0, #8]
   281ca:	4a26      	ldr	r2, [pc, #152]	; (28264 <_impl_k_mutex_lock+0xd0>)
   281cc:	6892      	ldr	r2, [r2, #8]
   281ce:	4291      	cmp	r1, r2
   281d0:	d0e9      	beq.n	281a6 <_impl_k_mutex_lock+0x12>
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
   281d2:	b305      	cbz	r5, 28216 <_impl_k_mutex_lock+0x82>
	if (_is_prio_higher(_current->prio, mutex->owner->prio)) {
		new_prio = _current->prio;
	}
	new_prio = _get_new_prio_with_ceiling(new_prio);
#endif
	new_prio = new_prio_for_inheritance(_current->base.prio,
   281d4:	f991 100a 	ldrsb.w	r1, [r1, #10]
   281d8:	f992 000a 	ldrsb.w	r0, [r2, #10]
   281dc:	f7ff ffb2 	bl	28144 <new_prio_for_inheritance>
	__asm__ volatile(
   281e0:	f04f 0320 	mov.w	r3, #32
   281e4:	f3ef 8611 	mrs	r6, BASEPRI
   281e8:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   281ec:	68a3      	ldr	r3, [r4, #8]
   281ee:	f993 300a 	ldrsb.w	r3, [r3, #10]
   281f2:	4298      	cmp	r0, r3
   281f4:	db14      	blt.n	28220 <_impl_k_mutex_lock+0x8c>
		adjust_owner_prio(mutex, new_prio);
	}

	_pend_current_thread(&mutex->wait_q, timeout);
   281f6:	4629      	mov	r1, r5
   281f8:	4620      	mov	r0, r4
   281fa:	f000 fde5 	bl	28dc8 <_pend_current_thread>
	_update_time_slice_before_swap();
   281fe:	f000 fe61 	bl	28ec4 <_update_time_slice_before_swap>
	return __swap(key);
   28202:	4630      	mov	r0, r6
   28204:	f7ff f9a4 	bl	27550 <__swap>
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
   28208:	b978      	cbnz	r0, 2822a <_impl_k_mutex_lock+0x96>
		k_sched_unlock();
   2820a:	f000 fe7b 	bl	28f04 <k_sched_unlock>
		return 0;
   2820e:	2000      	movs	r0, #0
   28210:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
   28212:	6922      	ldr	r2, [r4, #16]
   28214:	e7cd      	b.n	281b2 <_impl_k_mutex_lock+0x1e>
		k_sched_unlock();
   28216:	f000 fe75 	bl	28f04 <k_sched_unlock>
		return -EBUSY;
   2821a:	f06f 000f 	mvn.w	r0, #15
   2821e:	bd70      	pop	{r4, r5, r6, pc}
		adjust_owner_prio(mutex, new_prio);
   28220:	4601      	mov	r1, r0
   28222:	4620      	mov	r0, r4
   28224:	f7ff ff97 	bl	28156 <adjust_owner_prio>
   28228:	e7e5      	b.n	281f6 <_impl_k_mutex_lock+0x62>
	return list->head == list;
   2822a:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2822c:	429c      	cmp	r4, r3
   2822e:	d016      	beq.n	2825e <_impl_k_mutex_lock+0xca>
	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
   28230:	6921      	ldr	r1, [r4, #16]
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
						     new_prio) : new_prio;
   28232:	b123      	cbz	r3, 2823e <_impl_k_mutex_lock+0xaa>
   28234:	f993 000a 	ldrsb.w	r0, [r3, #10]
   28238:	f7ff ff84 	bl	28144 <new_prio_for_inheritance>
   2823c:	4601      	mov	r1, r0
   2823e:	f04f 0320 	mov.w	r3, #32
   28242:	f3ef 8511 	mrs	r5, BASEPRI
   28246:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = irq_lock();
	adjust_owner_prio(mutex, new_prio);
   2824a:	4620      	mov	r0, r4
   2824c:	f7ff ff83 	bl	28156 <adjust_owner_prio>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28250:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(key);

	k_sched_unlock();
   28254:	f000 fe56 	bl	28f04 <k_sched_unlock>

	return -EAGAIN;
   28258:	f06f 000a 	mvn.w	r0, #10
}
   2825c:	bd70      	pop	{r4, r5, r6, pc}
   2825e:	2300      	movs	r3, #0
   28260:	e7e6      	b.n	28230 <_impl_k_mutex_lock+0x9c>
   28262:	bf00      	nop
   28264:	20002878 	.word	0x20002878

00028268 <_impl_k_mutex_unlock>:
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
   28268:	b570      	push	{r4, r5, r6, lr}
   2826a:	4b40      	ldr	r3, [pc, #256]	; (2836c <_impl_k_mutex_unlock+0x104>)
   2826c:	689a      	ldr	r2, [r3, #8]
   2826e:	7ad3      	ldrb	r3, [r2, #11]
   28270:	3b01      	subs	r3, #1
   28272:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
   28274:	68c3      	ldr	r3, [r0, #12]
   28276:	3b01      	subs	r3, #1
   28278:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
   2827a:	2b00      	cmp	r3, #0
   2827c:	d143      	bne.n	28306 <_impl_k_mutex_unlock+0x9e>
   2827e:	4605      	mov	r5, r0
	__asm__ volatile(
   28280:	f04f 0320 	mov.w	r3, #32
   28284:	f3ef 8611 	mrs	r6, BASEPRI
   28288:	f383 8811 	msr	BASEPRI, r3
		return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2828c:	6901      	ldr	r1, [r0, #16]
   2828e:	f7ff ff62 	bl	28156 <adjust_owner_prio>

	struct k_thread *new_owner = _unpend_first_thread(&mutex->wait_q);
   28292:	462a      	mov	r2, r5
	if (_handling_timeouts) {
   28294:	4b36      	ldr	r3, [pc, #216]	; (28370 <_impl_k_mutex_unlock+0x108>)
   28296:	681b      	ldr	r3, [r3, #0]
   28298:	2b00      	cmp	r3, #0
   2829a:	d139      	bne.n	28310 <_impl_k_mutex_unlock+0xa8>
	return list->head == list;
   2829c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2829e:	42a5      	cmp	r5, r4
   282a0:	d046      	beq.n	28330 <_impl_k_mutex_unlock+0xc8>
	if (thread) {
   282a2:	b14c      	cbz	r4, 282b8 <_impl_k_mutex_unlock+0x50>
	node->prev->next = node->next;
   282a4:	6863      	ldr	r3, [r4, #4]
   282a6:	6822      	ldr	r2, [r4, #0]
   282a8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   282aa:	6823      	ldr	r3, [r4, #0]
   282ac:	6862      	ldr	r2, [r4, #4]
   282ae:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   282b0:	7a63      	ldrb	r3, [r4, #9]
   282b2:	f023 0302 	bic.w	r3, r3, #2
   282b6:	7263      	strb	r3, [r4, #9]

	K_DEBUG("new owner of mutex %p: %p (prio: %d)\n",
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner) {
   282b8:	2c00      	cmp	r4, #0
   282ba:	d051      	beq.n	28360 <_impl_k_mutex_unlock+0xf8>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   282bc:	6a22      	ldr	r2, [r4, #32]
   282be:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   282c2:	d013      	beq.n	282ec <_impl_k_mutex_unlock+0x84>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   282c4:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   282c8:	4928      	ldr	r1, [pc, #160]	; (2836c <_impl_k_mutex_unlock+0x104>)
   282ca:	6909      	ldr	r1, [r1, #16]
   282cc:	428b      	cmp	r3, r1
   282ce:	d004      	beq.n	282da <_impl_k_mutex_unlock+0x72>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   282d0:	b103      	cbz	r3, 282d4 <_impl_k_mutex_unlock+0x6c>
	return (node == list->tail) ? NULL : node->next;
   282d2:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   282d4:	6919      	ldr	r1, [r3, #16]
   282d6:	440a      	add	r2, r1
   282d8:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   282da:	6963      	ldr	r3, [r4, #20]
   282dc:	6922      	ldr	r2, [r4, #16]
   282de:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   282e0:	6923      	ldr	r3, [r4, #16]
   282e2:	6962      	ldr	r2, [r4, #20]
   282e4:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   282e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   282ea:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   282ec:	7a63      	ldrb	r3, [r4, #9]
   282ee:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   282f2:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   282f4:	f013 0f1b 	tst.w	r3, #27
   282f8:	d11e      	bne.n	28338 <_impl_k_mutex_unlock+0xd0>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   282fa:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   282fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28300:	d018      	beq.n	28334 <_impl_k_mutex_unlock+0xcc>
   28302:	2300      	movs	r3, #0
   28304:	e019      	b.n	2833a <_impl_k_mutex_unlock+0xd2>
		k_sched_unlock();
   28306:	f000 fdfd 	bl	28f04 <k_sched_unlock>
		return;
   2830a:	bd70      	pop	{r4, r5, r6, pc}
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2830c:	2400      	movs	r4, #0
   2830e:	e002      	b.n	28316 <_impl_k_mutex_unlock+0xae>
	return list->head == list;
   28310:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28312:	42a5      	cmp	r5, r4
   28314:	d0fa      	beq.n	2830c <_impl_k_mutex_unlock+0xa4>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   28316:	2c00      	cmp	r4, #0
   28318:	d0c3      	beq.n	282a2 <_impl_k_mutex_unlock+0x3a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   2831a:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   2831c:	f113 0f02 	cmn.w	r3, #2
   28320:	d1bf      	bne.n	282a2 <_impl_k_mutex_unlock+0x3a>
	return (node == list->tail) ? NULL : node->next;
   28322:	6853      	ldr	r3, [r2, #4]
   28324:	429c      	cmp	r4, r3
   28326:	d001      	beq.n	2832c <_impl_k_mutex_unlock+0xc4>
   28328:	6824      	ldr	r4, [r4, #0]
   2832a:	e7f4      	b.n	28316 <_impl_k_mutex_unlock+0xae>
   2832c:	2400      	movs	r4, #0
   2832e:	e7f2      	b.n	28316 <_impl_k_mutex_unlock+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28330:	2400      	movs	r4, #0
   28332:	e7b6      	b.n	282a2 <_impl_k_mutex_unlock+0x3a>
	return !(_is_thread_prevented_from_running(thread) ||
   28334:	2301      	movs	r3, #1
   28336:	e000      	b.n	2833a <_impl_k_mutex_unlock+0xd2>
   28338:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2833a:	b96b      	cbnz	r3, 28358 <_impl_k_mutex_unlock+0xf0>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2833c:	f386 8811 	msr	BASEPRI, r6
   28340:	2300      	movs	r3, #0
   28342:	6663      	str	r3, [r4, #100]	; 0x64
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
   28344:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
   28346:	68eb      	ldr	r3, [r5, #12]
   28348:	3301      	adds	r3, #1
   2834a:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
   2834c:	f994 300a 	ldrsb.w	r3, [r4, #10]
   28350:	612b      	str	r3, [r5, #16]
	} else {
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
   28352:	f000 fdd7 	bl	28f04 <k_sched_unlock>
   28356:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   28358:	4620      	mov	r0, r4
   2835a:	f000 fc21 	bl	28ba0 <_add_thread_to_ready_q>
   2835e:	e7ed      	b.n	2833c <_impl_k_mutex_unlock+0xd4>
   28360:	f386 8811 	msr	BASEPRI, r6
		mutex->owner = NULL;
   28364:	2300      	movs	r3, #0
   28366:	60ab      	str	r3, [r5, #8]
   28368:	e7f3      	b.n	28352 <_impl_k_mutex_unlock+0xea>
   2836a:	bf00      	nop
   2836c:	20002878 	.word	0x20002878
   28370:	20002c60 	.word	0x20002c60

00028374 <_signal_poll_event>:
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   28374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28376:	4604      	mov	r4, r0
   28378:	460d      	mov	r5, r1
	*must_reschedule = 0;
   2837a:	2300      	movs	r3, #0
   2837c:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   2837e:	6883      	ldr	r3, [r0, #8]
   28380:	2b00      	cmp	r3, #0
   28382:	d042      	beq.n	2840a <_signal_poll_event+0x96>
   28384:	4616      	mov	r6, r2
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   28386:	6818      	ldr	r0, [r3, #0]
	thread->base.thread_state &= ~states;
   28388:	7a43      	ldrb	r3, [r0, #9]
   2838a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2838e:	7243      	strb	r3, [r0, #9]

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   28390:	f013 0f02 	tst.w	r3, #2
   28394:	d039      	beq.n	2840a <_signal_poll_event+0x96>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   28396:	6a03      	ldr	r3, [r0, #32]
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   28398:	f113 0f02 	cmn.w	r3, #2
   2839c:	d060      	beq.n	28460 <_signal_poll_event+0xec>
	node->prev->next = node->next;
   2839e:	6843      	ldr	r3, [r0, #4]
   283a0:	6802      	ldr	r2, [r0, #0]
   283a2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   283a4:	6803      	ldr	r3, [r0, #0]
   283a6:	6842      	ldr	r2, [r0, #4]
   283a8:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   283aa:	7a43      	ldrb	r3, [r0, #9]
   283ac:	f023 0302 	bic.w	r3, r3, #2
   283b0:	7243      	strb	r3, [r0, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   283b2:	6a02      	ldr	r2, [r0, #32]
   283b4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   283b8:	d013      	beq.n	283e2 <_signal_poll_event+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   283ba:	f100 0310 	add.w	r3, r0, #16
	return list->tail == node;
   283be:	492a      	ldr	r1, [pc, #168]	; (28468 <_signal_poll_event+0xf4>)
   283c0:	6909      	ldr	r1, [r1, #16]
   283c2:	428b      	cmp	r3, r1
   283c4:	d004      	beq.n	283d0 <_signal_poll_event+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   283c6:	b103      	cbz	r3, 283ca <_signal_poll_event+0x56>
	return (node == list->tail) ? NULL : node->next;
   283c8:	6903      	ldr	r3, [r0, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   283ca:	6919      	ldr	r1, [r3, #16]
   283cc:	440a      	add	r2, r1
   283ce:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   283d0:	6943      	ldr	r3, [r0, #20]
   283d2:	6902      	ldr	r2, [r0, #16]
   283d4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   283d6:	6903      	ldr	r3, [r0, #16]
   283d8:	6942      	ldr	r2, [r0, #20]
   283da:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   283dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   283e0:	6203      	str	r3, [r0, #32]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
   283e2:	b965      	cbnz	r5, 283fe <_signal_poll_event+0x8a>
   283e4:	f06f 0303 	mvn.w	r3, #3
   283e8:	6643      	str	r3, [r0, #100]	; 0x64
	u8_t state = thread->base.thread_state;
   283ea:	7a43      	ldrb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   283ec:	f013 0f1f 	tst.w	r3, #31
   283f0:	d109      	bne.n	28406 <_signal_poll_event+0x92>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   283f2:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   283f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   283f8:	d003      	beq.n	28402 <_signal_poll_event+0x8e>
   283fa:	2700      	movs	r7, #0
   283fc:	e004      	b.n	28408 <_signal_poll_event+0x94>
   283fe:	2300      	movs	r3, #0
   28400:	e7f2      	b.n	283e8 <_signal_poll_event+0x74>
   28402:	2701      	movs	r7, #1
   28404:	e000      	b.n	28408 <_signal_poll_event+0x94>
   28406:	2700      	movs	r7, #0
				 state == K_POLL_STATE_NOT_READY ? -EINTR : 0);

	if (!_is_thread_ready(thread)) {
   28408:	b947      	cbnz	r7, 2841c <_signal_poll_event+0xa8>
	event->poller = NULL;
   2840a:	2000      	movs	r0, #0
   2840c:	60a0      	str	r0, [r4, #8]
	event->state |= state;
   2840e:	7b63      	ldrb	r3, [r4, #13]
   28410:	ea45 1513 	orr.w	r5, r5, r3, lsr #4
   28414:	f365 1307 	bfi	r3, r5, #4, #4
   28418:	7363      	strb	r3, [r4, #13]
	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();

ready_event:
	set_event_ready(event, state);
	return 0;
   2841a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_add_thread_to_ready_q(thread);
   2841c:	f000 fbc0 	bl	28ba0 <_add_thread_to_ready_q>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
   28420:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   28424:	2b0d      	cmp	r3, #13
   28426:	d807      	bhi.n	28438 <_signal_poll_event+0xc4>
   28428:	b19b      	cbz	r3, 28452 <_signal_poll_event+0xde>
   2842a:	4b10      	ldr	r3, [pc, #64]	; (2846c <_signal_poll_event+0xf8>)
   2842c:	685b      	ldr	r3, [r3, #4]
   2842e:	f413 6f00 	tst.w	r3, #2048	; 0x800
   28432:	d010      	beq.n	28456 <_signal_poll_event+0xe2>
   28434:	2300      	movs	r3, #0
   28436:	e000      	b.n	2843a <_signal_poll_event+0xc6>
   28438:	463b      	mov	r3, r7
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   2843a:	b973      	cbnz	r3, 2845a <_signal_poll_event+0xe6>
	return _is_preempt(_current) && __must_switch_threads();
   2843c:	4a0a      	ldr	r2, [pc, #40]	; (28468 <_signal_poll_event+0xf4>)
   2843e:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   28440:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   28442:	2a7f      	cmp	r2, #127	; 0x7f
   28444:	d80a      	bhi.n	2845c <_signal_poll_event+0xe8>
   28446:	f000 fccf 	bl	28de8 <__must_switch_threads>
   2844a:	4603      	mov	r3, r0
   2844c:	b130      	cbz	r0, 2845c <_signal_poll_event+0xe8>
   2844e:	463b      	mov	r3, r7
   28450:	e004      	b.n	2845c <_signal_poll_event+0xe8>
   28452:	2300      	movs	r3, #0
   28454:	e7f1      	b.n	2843a <_signal_poll_event+0xc6>
   28456:	463b      	mov	r3, r7
   28458:	e7ef      	b.n	2843a <_signal_poll_event+0xc6>
   2845a:	2300      	movs	r3, #0
   2845c:	6033      	str	r3, [r6, #0]
   2845e:	e7d4      	b.n	2840a <_signal_poll_event+0x96>
		return -EAGAIN;
   28460:	f06f 000a 	mvn.w	r0, #10
}
   28464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28466:	bf00      	nop
   28468:	20002878 	.word	0x20002878
   2846c:	e000ed00 	.word	0xe000ed00

00028470 <k_poll_event_init>:
{
   28470:	b430      	push	{r4, r5}
	event->poller = NULL;
   28472:	2500      	movs	r5, #0
   28474:	6085      	str	r5, [r0, #8]
	event->type = type;
   28476:	7b44      	ldrb	r4, [r0, #13]
   28478:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
   2847c:	f365 1407 	bfi	r4, r5, #4, #4
   28480:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   28482:	7b81      	ldrb	r1, [r0, #14]
   28484:	f362 0100 	bfi	r1, r2, #0, #1
   28488:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   2848a:	89c2      	ldrh	r2, [r0, #14]
   2848c:	f365 024f 	bfi	r2, r5, #1, #15
   28490:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   28492:	6103      	str	r3, [r0, #16]
}
   28494:	bc30      	pop	{r4, r5}
   28496:	4770      	bx	lr

00028498 <k_poll>:
{
   28498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2849c:	b085      	sub	sp, #20
   2849e:	4691      	mov	r9, r2
	__asm__ volatile(
   284a0:	f04f 0320 	mov.w	r3, #32
   284a4:	f3ef 8511 	mrs	r5, BASEPRI
   284a8:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
   284ac:	4ab7      	ldr	r2, [pc, #732]	; (2878c <k_poll+0x2f4>)
   284ae:	6894      	ldr	r4, [r2, #8]
	thread->base.thread_state |= states;
   284b0:	7a63      	ldrb	r3, [r4, #9]
   284b2:	f043 0320 	orr.w	r3, r3, #32
   284b6:	7263      	strb	r3, [r4, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   284b8:	f385 8811 	msr	BASEPRI, r5
	struct _poller poller = { .thread = _current };
   284bc:	6893      	ldr	r3, [r2, #8]
   284be:	9303      	str	r3, [sp, #12]
	for (int ii = 0; ii < num_events; ii++) {
   284c0:	2300      	movs	r3, #0
	int last_registered = -1, rc;
   284c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
   284c6:	e01e      	b.n	28506 <k_poll+0x6e>
		if (k_sem_count_get(event->sem) > 0) {
   284c8:	6917      	ldr	r7, [r2, #16]
   284ca:	68bf      	ldr	r7, [r7, #8]
   284cc:	b14f      	cbz	r7, 284e2 <k_poll+0x4a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   284ce:	f04f 0e02 	mov.w	lr, #2
			return 1;
   284d2:	2701      	movs	r7, #1
   284d4:	e005      	b.n	284e2 <k_poll+0x4a>
		if (!k_queue_is_empty(event->queue)) {
   284d6:	6917      	ldr	r7, [r2, #16]
	return (!list->head);
   284d8:	683f      	ldr	r7, [r7, #0]
   284da:	b117      	cbz	r7, 284e2 <k_poll+0x4a>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   284dc:	f04f 0e04 	mov.w	lr, #4
			return 1;
   284e0:	2701      	movs	r7, #1
		if (is_condition_met(&events[ii], &state)) {
   284e2:	b387      	cbz	r7, 28546 <k_poll+0xae>
	event->poller = NULL;
   284e4:	2500      	movs	r5, #0
   284e6:	6095      	str	r5, [r2, #8]
	event->state |= state;
   284e8:	7b55      	ldrb	r5, [r2, #13]
   284ea:	ea4e 1715 	orr.w	r7, lr, r5, lsr #4
   284ee:	f367 1507 	bfi	r5, r7, #4, #4
   284f2:	7355      	strb	r5, [r2, #13]
			clear_polling_state(_current);
   284f4:	4aa5      	ldr	r2, [pc, #660]	; (2878c <k_poll+0x2f4>)
   284f6:	6895      	ldr	r5, [r2, #8]
	thread->base.thread_state &= ~states;
   284f8:	7a6a      	ldrb	r2, [r5, #9]
   284fa:	f022 0220 	bic.w	r2, r2, #32
   284fe:	726a      	strb	r2, [r5, #9]
   28500:	f386 8811 	msr	BASEPRI, r6
	for (int ii = 0; ii < num_events; ii++) {
   28504:	3301      	adds	r3, #1
   28506:	428b      	cmp	r3, r1
   28508:	f280 8191 	bge.w	2882e <k_poll+0x396>
	__asm__ volatile(
   2850c:	f04f 0220 	mov.w	r2, #32
   28510:	f3ef 8611 	mrs	r6, BASEPRI
   28514:	f382 8811 	msr	BASEPRI, r2
		if (is_condition_met(&events[ii], &state)) {
   28518:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   2851c:	0095      	lsls	r5, r2, #2
   2851e:	1942      	adds	r2, r0, r5
	switch (event->type) {
   28520:	7b57      	ldrb	r7, [r2, #13]
   28522:	f007 070f 	and.w	r7, r7, #15
   28526:	2f02      	cmp	r7, #2
   28528:	d0ce      	beq.n	284c8 <k_poll+0x30>
   2852a:	2f04      	cmp	r7, #4
   2852c:	d0d3      	beq.n	284d6 <k_poll+0x3e>
   2852e:	2f01      	cmp	r7, #1
   28530:	d001      	beq.n	28536 <k_poll+0x9e>
		return 0;
   28532:	2700      	movs	r7, #0
   28534:	e7d5      	b.n	284e2 <k_poll+0x4a>
		if (event->signal->signaled) {
   28536:	6917      	ldr	r7, [r2, #16]
   28538:	68bf      	ldr	r7, [r7, #8]
   2853a:	2f00      	cmp	r7, #0
   2853c:	d0d1      	beq.n	284e2 <k_poll+0x4a>
			*state = K_POLL_STATE_SIGNALED;
   2853e:	f04f 0e01 	mov.w	lr, #1
			return 1;
   28542:	4677      	mov	r7, lr
   28544:	e7cd      	b.n	284e2 <k_poll+0x4a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
   28546:	f1b9 0f00 	cmp.w	r9, #0
   2854a:	d0d9      	beq.n	28500 <k_poll+0x68>
	return _is_thread_polling(_current);
   2854c:	4f8f      	ldr	r7, [pc, #572]	; (2878c <k_poll+0x2f4>)
   2854e:	68bf      	ldr	r7, [r7, #8]
	return !!(thread->base.thread_state & state);
   28550:	7a7f      	ldrb	r7, [r7, #9]
		} else if (timeout != K_NO_WAIT && is_polling()) {
   28552:	f017 0f20 	tst.w	r7, #32
   28556:	d0d3      	beq.n	28500 <k_poll+0x68>
	switch (event->type) {
   28558:	7b57      	ldrb	r7, [r2, #13]
   2855a:	f007 070f 	and.w	r7, r7, #15
   2855e:	2f02      	cmp	r7, #2
   28560:	d008      	beq.n	28574 <k_poll+0xdc>
   28562:	2f04      	cmp	r7, #4
   28564:	d07a      	beq.n	2865c <k_poll+0x1c4>
   28566:	2f01      	cmp	r7, #1
   28568:	f000 80ec 	beq.w	28744 <k_poll+0x2ac>
	event->poller = poller;
   2856c:	ad03      	add	r5, sp, #12
   2856e:	6095      	str	r5, [r2, #8]
				++last_registered;
   28570:	3401      	adds	r4, #1
   28572:	e7c5      	b.n	28500 <k_poll+0x68>
		add_event(&event->sem->poll_events, event, poller);
   28574:	6917      	ldr	r7, [r2, #16]
   28576:	f107 0c10 	add.w	ip, r7, #16
	return list->head == list;
   2857a:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2857e:	45c4      	cmp	ip, r8
   28580:	d010      	beq.n	285a4 <k_poll+0x10c>
   28582:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   28586:	b17f      	cbz	r7, 285a8 <k_poll+0x110>
   28588:	68bf      	ldr	r7, [r7, #8]
   2858a:	683f      	ldr	r7, [r7, #0]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   2858c:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   28590:	9f03      	ldr	r7, [sp, #12]
   28592:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   28596:	45da      	cmp	sl, fp
   28598:	db06      	blt.n	285a8 <k_poll+0x110>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2859a:	45c4      	cmp	ip, r8
   2859c:	d12e      	bne.n	285fc <k_poll+0x164>
   2859e:	f04f 0800 	mov.w	r8, #0
   285a2:	e02b      	b.n	285fc <k_poll+0x164>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   285a4:	2700      	movs	r7, #0
   285a6:	e7ee      	b.n	28586 <k_poll+0xee>
	node->next = list;
   285a8:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   285ac:	f8dc 5004 	ldr.w	r5, [ip, #4]
   285b0:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   285b2:	f8dc 5004 	ldr.w	r5, [ip, #4]
   285b6:	602a      	str	r2, [r5, #0]
	list->tail = node;
   285b8:	f8cc 2004 	str.w	r2, [ip, #4]
   285bc:	e7d6      	b.n	2856c <k_poll+0xd4>
	if (!insert_point) {
   285be:	f1b8 0f00 	cmp.w	r8, #0
   285c2:	d00a      	beq.n	285da <k_poll+0x142>
		node->prev = insert_point->prev;
   285c4:	f8d8 7004 	ldr.w	r7, [r8, #4]
   285c8:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   285ca:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   285ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
   285d2:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   285d4:	f8c8 2004 	str.w	r2, [r8, #4]
   285d8:	e7c8      	b.n	2856c <k_poll+0xd4>
	node->next = list;
   285da:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   285de:	f8dc 5004 	ldr.w	r5, [ip, #4]
   285e2:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   285e4:	f8dc 5004 	ldr.w	r5, [ip, #4]
   285e8:	602a      	str	r2, [r5, #0]
	list->tail = node;
   285ea:	f8cc 2004 	str.w	r2, [ip, #4]
   285ee:	e7bd      	b.n	2856c <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   285f0:	4647      	mov	r7, r8
   285f2:	e017      	b.n	28624 <k_poll+0x18c>
	return (node == list->tail) ? NULL : node->next;
   285f4:	2700      	movs	r7, #0
   285f6:	e015      	b.n	28624 <k_poll+0x18c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   285f8:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   285fc:	f1b8 0f00 	cmp.w	r8, #0
   28600:	d021      	beq.n	28646 <k_poll+0x1ae>
					       pending->poller->thread)) {
   28602:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   28606:	683f      	ldr	r7, [r7, #0]
   28608:	f997 700a 	ldrsb.w	r7, [r7, #10]
   2860c:	45bb      	cmp	fp, r7
   2860e:	dbd6      	blt.n	285be <k_poll+0x126>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   28610:	46c2      	mov	sl, r8
   28612:	f1b8 0f00 	cmp.w	r8, #0
   28616:	d0eb      	beq.n	285f0 <k_poll+0x158>
	return (node == list->tail) ? NULL : node->next;
   28618:	f8dc 7004 	ldr.w	r7, [ip, #4]
   2861c:	45b8      	cmp	r8, r7
   2861e:	d0e9      	beq.n	285f4 <k_poll+0x15c>
   28620:	f8d8 7000 	ldr.w	r7, [r8]
   28624:	b167      	cbz	r7, 28640 <k_poll+0x1a8>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28626:	f1ba 0f00 	cmp.w	sl, #0
   2862a:	d0e5      	beq.n	285f8 <k_poll+0x160>
	return (node == list->tail) ? NULL : node->next;
   2862c:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28630:	45ba      	cmp	sl, r7
   28632:	d002      	beq.n	2863a <k_poll+0x1a2>
   28634:	f8d8 8000 	ldr.w	r8, [r8]
   28638:	e7e0      	b.n	285fc <k_poll+0x164>
   2863a:	f04f 0800 	mov.w	r8, #0
   2863e:	e7dd      	b.n	285fc <k_poll+0x164>
   28640:	f04f 0800 	mov.w	r8, #0
   28644:	e7da      	b.n	285fc <k_poll+0x164>
	node->next = list;
   28646:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   2864a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2864e:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28650:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28654:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28656:	f8cc 2004 	str.w	r2, [ip, #4]
   2865a:	e787      	b.n	2856c <k_poll+0xd4>
		add_event(&event->queue->poll_events, event, poller);
   2865c:	6917      	ldr	r7, [r2, #16]
   2865e:	f107 0c08 	add.w	ip, r7, #8
	return list->head == list;
   28662:	f8d7 8008 	ldr.w	r8, [r7, #8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   28666:	45c4      	cmp	ip, r8
   28668:	d010      	beq.n	2868c <k_poll+0x1f4>
   2866a:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   2866e:	b17f      	cbz	r7, 28690 <k_poll+0x1f8>
   28670:	68bf      	ldr	r7, [r7, #8]
   28672:	683f      	ldr	r7, [r7, #0]
   28674:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   28678:	9f03      	ldr	r7, [sp, #12]
   2867a:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   2867e:	45da      	cmp	sl, fp
   28680:	db06      	blt.n	28690 <k_poll+0x1f8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28682:	45c4      	cmp	ip, r8
   28684:	d12e      	bne.n	286e4 <k_poll+0x24c>
   28686:	f04f 0800 	mov.w	r8, #0
   2868a:	e02b      	b.n	286e4 <k_poll+0x24c>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2868c:	2700      	movs	r7, #0
   2868e:	e7ee      	b.n	2866e <k_poll+0x1d6>
	node->next = list;
   28690:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28694:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28698:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   2869a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2869e:	602a      	str	r2, [r5, #0]
	list->tail = node;
   286a0:	f8cc 2004 	str.w	r2, [ip, #4]
   286a4:	e762      	b.n	2856c <k_poll+0xd4>
	if (!insert_point) {
   286a6:	f1b8 0f00 	cmp.w	r8, #0
   286aa:	d00a      	beq.n	286c2 <k_poll+0x22a>
		node->prev = insert_point->prev;
   286ac:	f8d8 7004 	ldr.w	r7, [r8, #4]
   286b0:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   286b2:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   286b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   286ba:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   286bc:	f8c8 2004 	str.w	r2, [r8, #4]
   286c0:	e754      	b.n	2856c <k_poll+0xd4>
	node->next = list;
   286c2:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   286c6:	f8dc 5004 	ldr.w	r5, [ip, #4]
   286ca:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   286cc:	f8dc 5004 	ldr.w	r5, [ip, #4]
   286d0:	602a      	str	r2, [r5, #0]
	list->tail = node;
   286d2:	f8cc 2004 	str.w	r2, [ip, #4]
   286d6:	e749      	b.n	2856c <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   286d8:	4647      	mov	r7, r8
   286da:	e017      	b.n	2870c <k_poll+0x274>
	return (node == list->tail) ? NULL : node->next;
   286dc:	2700      	movs	r7, #0
   286de:	e015      	b.n	2870c <k_poll+0x274>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   286e0:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   286e4:	f1b8 0f00 	cmp.w	r8, #0
   286e8:	d021      	beq.n	2872e <k_poll+0x296>
					       pending->poller->thread)) {
   286ea:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   286ee:	683f      	ldr	r7, [r7, #0]
   286f0:	f997 700a 	ldrsb.w	r7, [r7, #10]
   286f4:	45bb      	cmp	fp, r7
   286f6:	dbd6      	blt.n	286a6 <k_poll+0x20e>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   286f8:	46c2      	mov	sl, r8
   286fa:	f1b8 0f00 	cmp.w	r8, #0
   286fe:	d0eb      	beq.n	286d8 <k_poll+0x240>
	return (node == list->tail) ? NULL : node->next;
   28700:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28704:	45b8      	cmp	r8, r7
   28706:	d0e9      	beq.n	286dc <k_poll+0x244>
   28708:	f8d8 7000 	ldr.w	r7, [r8]
   2870c:	b167      	cbz	r7, 28728 <k_poll+0x290>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2870e:	f1ba 0f00 	cmp.w	sl, #0
   28712:	d0e5      	beq.n	286e0 <k_poll+0x248>
	return (node == list->tail) ? NULL : node->next;
   28714:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28718:	45ba      	cmp	sl, r7
   2871a:	d002      	beq.n	28722 <k_poll+0x28a>
   2871c:	f8d8 8000 	ldr.w	r8, [r8]
   28720:	e7e0      	b.n	286e4 <k_poll+0x24c>
   28722:	f04f 0800 	mov.w	r8, #0
   28726:	e7dd      	b.n	286e4 <k_poll+0x24c>
   28728:	f04f 0800 	mov.w	r8, #0
   2872c:	e7da      	b.n	286e4 <k_poll+0x24c>
	node->next = list;
   2872e:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28732:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28736:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28738:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2873c:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2873e:	f8cc 2004 	str.w	r2, [ip, #4]
   28742:	e713      	b.n	2856c <k_poll+0xd4>
		add_event(&event->signal->poll_events, event, poller);
   28744:	f8d2 c010 	ldr.w	ip, [r2, #16]
	return list->head == list;
   28748:	f8dc 8000 	ldr.w	r8, [ip]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2874c:	45c4      	cmp	ip, r8
   2874e:	d010      	beq.n	28772 <k_poll+0x2da>
   28750:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   28754:	b17f      	cbz	r7, 28776 <k_poll+0x2de>
   28756:	68bf      	ldr	r7, [r7, #8]
   28758:	683f      	ldr	r7, [r7, #0]
   2875a:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   2875e:	9f03      	ldr	r7, [sp, #12]
   28760:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   28764:	45da      	cmp	sl, fp
   28766:	db06      	blt.n	28776 <k_poll+0x2de>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28768:	45c4      	cmp	ip, r8
   2876a:	d130      	bne.n	287ce <k_poll+0x336>
   2876c:	f04f 0800 	mov.w	r8, #0
   28770:	e02d      	b.n	287ce <k_poll+0x336>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   28772:	2700      	movs	r7, #0
   28774:	e7ee      	b.n	28754 <k_poll+0x2bc>
	node->next = list;
   28776:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   2877a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2877e:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28780:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28784:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28786:	f8cc 2004 	str.w	r2, [ip, #4]
   2878a:	e6ef      	b.n	2856c <k_poll+0xd4>
   2878c:	20002878 	.word	0x20002878
	if (!insert_point) {
   28790:	f1b8 0f00 	cmp.w	r8, #0
   28794:	d00a      	beq.n	287ac <k_poll+0x314>
		node->prev = insert_point->prev;
   28796:	f8d8 7004 	ldr.w	r7, [r8, #4]
   2879a:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   2879c:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   287a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
   287a4:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   287a6:	f8c8 2004 	str.w	r2, [r8, #4]
   287aa:	e6df      	b.n	2856c <k_poll+0xd4>
	node->next = list;
   287ac:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   287b0:	f8dc 5004 	ldr.w	r5, [ip, #4]
   287b4:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   287b6:	f8dc 5004 	ldr.w	r5, [ip, #4]
   287ba:	602a      	str	r2, [r5, #0]
	list->tail = node;
   287bc:	f8cc 2004 	str.w	r2, [ip, #4]
   287c0:	e6d4      	b.n	2856c <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   287c2:	4647      	mov	r7, r8
   287c4:	e017      	b.n	287f6 <k_poll+0x35e>
	return (node == list->tail) ? NULL : node->next;
   287c6:	2700      	movs	r7, #0
   287c8:	e015      	b.n	287f6 <k_poll+0x35e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   287ca:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   287ce:	f1b8 0f00 	cmp.w	r8, #0
   287d2:	d021      	beq.n	28818 <k_poll+0x380>
					       pending->poller->thread)) {
   287d4:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   287d8:	683f      	ldr	r7, [r7, #0]
   287da:	f997 700a 	ldrsb.w	r7, [r7, #10]
   287de:	45bb      	cmp	fp, r7
   287e0:	dbd6      	blt.n	28790 <k_poll+0x2f8>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   287e2:	46c2      	mov	sl, r8
   287e4:	f1b8 0f00 	cmp.w	r8, #0
   287e8:	d0eb      	beq.n	287c2 <k_poll+0x32a>
	return (node == list->tail) ? NULL : node->next;
   287ea:	f8dc 7004 	ldr.w	r7, [ip, #4]
   287ee:	45b8      	cmp	r8, r7
   287f0:	d0e9      	beq.n	287c6 <k_poll+0x32e>
   287f2:	f8d8 7000 	ldr.w	r7, [r8]
   287f6:	b167      	cbz	r7, 28812 <k_poll+0x37a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   287f8:	f1ba 0f00 	cmp.w	sl, #0
   287fc:	d0e5      	beq.n	287ca <k_poll+0x332>
	return (node == list->tail) ? NULL : node->next;
   287fe:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28802:	45ba      	cmp	sl, r7
   28804:	d002      	beq.n	2880c <k_poll+0x374>
   28806:	f8d8 8000 	ldr.w	r8, [r8]
   2880a:	e7e0      	b.n	287ce <k_poll+0x336>
   2880c:	f04f 0800 	mov.w	r8, #0
   28810:	e7dd      	b.n	287ce <k_poll+0x336>
   28812:	f04f 0800 	mov.w	r8, #0
   28816:	e7da      	b.n	287ce <k_poll+0x336>
	node->next = list;
   28818:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   2881c:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28820:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28822:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28826:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28828:	f8cc 2004 	str.w	r2, [ip, #4]
   2882c:	e69e      	b.n	2856c <k_poll+0xd4>
   2882e:	f04f 0320 	mov.w	r3, #32
   28832:	f3ef 8511 	mrs	r5, BASEPRI
   28836:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
   2883a:	4b46      	ldr	r3, [pc, #280]	; (28954 <k_poll+0x4bc>)
   2883c:	689a      	ldr	r2, [r3, #8]
	return !!(thread->base.thread_state & state);
   2883e:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
   28840:	f013 0f20 	tst.w	r3, #32
   28844:	d047      	beq.n	288d6 <k_poll+0x43e>
	thread->base.thread_state &= ~states;
   28846:	f023 0320 	bic.w	r3, r3, #32
   2884a:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
   2884c:	f1b9 0f00 	cmp.w	r9, #0
   28850:	d049      	beq.n	288e6 <k_poll+0x44e>
   28852:	4649      	mov	r1, r9
   28854:	4606      	mov	r6, r0
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   28856:	a801      	add	r0, sp, #4
   28858:	9001      	str	r0, [sp, #4]
   2885a:	9002      	str	r0, [sp, #8]
	_pend_current_thread(&wait_q, timeout);
   2885c:	f000 fab4 	bl	28dc8 <_pend_current_thread>
	_update_time_slice_before_swap();
   28860:	f000 fb30 	bl	28ec4 <_update_time_slice_before_swap>
	return __swap(key);
   28864:	4628      	mov	r0, r5
   28866:	f7fe fe73 	bl	27550 <__swap>
   2886a:	f04f 0320 	mov.w	r3, #32
   2886e:	f3ef 8e11 	mrs	lr, BASEPRI
   28872:	f383 8811 	msr	BASEPRI, r3
   28876:	4675      	mov	r5, lr
   28878:	e049      	b.n	2890e <k_poll+0x476>
	node->prev->next = node->next;
   2887a:	6853      	ldr	r3, [r2, #4]
   2887c:	5847      	ldr	r7, [r0, r1]
   2887e:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28880:	5843      	ldr	r3, [r0, r1]
   28882:	6852      	ldr	r2, [r2, #4]
   28884:	605a      	str	r2, [r3, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28886:	f386 8811 	msr	BASEPRI, r6
	__asm__ volatile(
   2888a:	f04f 0320 	mov.w	r3, #32
   2888e:	f3ef 8611 	mrs	r6, BASEPRI
   28892:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   28896:	3c01      	subs	r4, #1
   28898:	2c00      	cmp	r4, #0
   2889a:	db1e      	blt.n	288da <k_poll+0x442>
		clear_event_registration(&events[last_registered]);
   2889c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   288a0:	0099      	lsls	r1, r3, #2
   288a2:	1842      	adds	r2, r0, r1
	event->poller = NULL;
   288a4:	2300      	movs	r3, #0
   288a6:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   288a8:	7b53      	ldrb	r3, [r2, #13]
   288aa:	f003 030f 	and.w	r3, r3, #15
   288ae:	2b02      	cmp	r3, #2
   288b0:	d0e3      	beq.n	2887a <k_poll+0x3e2>
   288b2:	2b04      	cmp	r3, #4
   288b4:	d008      	beq.n	288c8 <k_poll+0x430>
   288b6:	2b01      	cmp	r3, #1
   288b8:	d1e5      	bne.n	28886 <k_poll+0x3ee>
	node->prev->next = node->next;
   288ba:	6853      	ldr	r3, [r2, #4]
   288bc:	5847      	ldr	r7, [r0, r1]
   288be:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   288c0:	5843      	ldr	r3, [r0, r1]
   288c2:	6852      	ldr	r2, [r2, #4]
   288c4:	605a      	str	r2, [r3, #4]
   288c6:	e7de      	b.n	28886 <k_poll+0x3ee>
	node->prev->next = node->next;
   288c8:	6853      	ldr	r3, [r2, #4]
   288ca:	5847      	ldr	r7, [r0, r1]
   288cc:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   288ce:	5843      	ldr	r3, [r0, r1]
   288d0:	6852      	ldr	r2, [r2, #4]
   288d2:	605a      	str	r2, [r3, #4]
   288d4:	e7d7      	b.n	28886 <k_poll+0x3ee>
   288d6:	462e      	mov	r6, r5
   288d8:	e7de      	b.n	28898 <k_poll+0x400>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   288da:	f385 8811 	msr	BASEPRI, r5
		return 0;
   288de:	2000      	movs	r0, #0
}
   288e0:	b005      	add	sp, #20
   288e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   288e6:	f385 8811 	msr	BASEPRI, r5
		return -EAGAIN;
   288ea:	f06f 000a 	mvn.w	r0, #10
   288ee:	e7f7      	b.n	288e0 <k_poll+0x448>
	node->prev->next = node->next;
   288f0:	6853      	ldr	r3, [r2, #4]
   288f2:	5877      	ldr	r7, [r6, r1]
   288f4:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   288f6:	5873      	ldr	r3, [r6, r1]
   288f8:	6852      	ldr	r2, [r2, #4]
   288fa:	605a      	str	r2, [r3, #4]
   288fc:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
   28900:	f04f 0320 	mov.w	r3, #32
   28904:	f3ef 8511 	mrs	r5, BASEPRI
   28908:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   2890c:	3c01      	subs	r4, #1
   2890e:	2c00      	cmp	r4, #0
   28910:	db1c      	blt.n	2894c <k_poll+0x4b4>
		clear_event_registration(&events[last_registered]);
   28912:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   28916:	0099      	lsls	r1, r3, #2
   28918:	1872      	adds	r2, r6, r1
	event->poller = NULL;
   2891a:	2300      	movs	r3, #0
   2891c:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   2891e:	7b53      	ldrb	r3, [r2, #13]
   28920:	f003 030f 	and.w	r3, r3, #15
   28924:	2b02      	cmp	r3, #2
   28926:	d0e3      	beq.n	288f0 <k_poll+0x458>
   28928:	2b04      	cmp	r3, #4
   2892a:	d008      	beq.n	2893e <k_poll+0x4a6>
   2892c:	2b01      	cmp	r3, #1
   2892e:	d1e5      	bne.n	288fc <k_poll+0x464>
	node->prev->next = node->next;
   28930:	6853      	ldr	r3, [r2, #4]
   28932:	5877      	ldr	r7, [r6, r1]
   28934:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28936:	5873      	ldr	r3, [r6, r1]
   28938:	6852      	ldr	r2, [r2, #4]
   2893a:	605a      	str	r2, [r3, #4]
   2893c:	e7de      	b.n	288fc <k_poll+0x464>
	node->prev->next = node->next;
   2893e:	6853      	ldr	r3, [r2, #4]
   28940:	5877      	ldr	r7, [r6, r1]
   28942:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28944:	5873      	ldr	r3, [r6, r1]
   28946:	6852      	ldr	r2, [r2, #4]
   28948:	605a      	str	r2, [r3, #4]
   2894a:	e7d7      	b.n	288fc <k_poll+0x464>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2894c:	f38e 8811 	msr	BASEPRI, lr
	return swap_rc;
   28950:	e7c6      	b.n	288e0 <k_poll+0x448>
   28952:	bf00      	nop
   28954:	20002878 	.word	0x20002878

00028958 <_handle_obj_poll_events>:
	return list->head == list;
   28958:	6803      	ldr	r3, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
   2895a:	4298      	cmp	r0, r3
   2895c:	d010      	beq.n	28980 <_handle_obj_poll_events+0x28>
	node->prev->next = node->next;
   2895e:	685a      	ldr	r2, [r3, #4]
   28960:	6818      	ldr	r0, [r3, #0]
   28962:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   28964:	681a      	ldr	r2, [r3, #0]
   28966:	6858      	ldr	r0, [r3, #4]
   28968:	6050      	str	r0, [r2, #4]
{
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
   2896a:	b15b      	cbz	r3, 28984 <_handle_obj_poll_events+0x2c>
{
   2896c:	b500      	push	{lr}
   2896e:	b083      	sub	sp, #12
		return 0;
	}

	(void)_signal_poll_event(poll_event, state, &must_reschedule);
   28970:	aa01      	add	r2, sp, #4
   28972:	4618      	mov	r0, r3
   28974:	f7ff fcfe 	bl	28374 <_signal_poll_event>
	return must_reschedule;
   28978:	9801      	ldr	r0, [sp, #4]
}
   2897a:	b003      	add	sp, #12
   2897c:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   28980:	2300      	movs	r3, #0
   28982:	e7f2      	b.n	2896a <_handle_obj_poll_events+0x12>
		return 0;
   28984:	2000      	movs	r0, #0
   28986:	4770      	bx	lr

00028988 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   28988:	b530      	push	{r4, r5, lr}
   2898a:	b083      	sub	sp, #12
	__asm__ volatile(
   2898c:	f04f 0320 	mov.w	r3, #32
   28990:	f3ef 8511 	mrs	r5, BASEPRI
   28994:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
   28998:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1;
   2899a:	2301      	movs	r3, #1
   2899c:	6083      	str	r3, [r0, #8]
	return list->head == list;
   2899e:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   289a0:	4298      	cmp	r0, r3
   289a2:	d013      	beq.n	289cc <k_poll_signal+0x44>
	node->prev->next = node->next;
   289a4:	685a      	ldr	r2, [r3, #4]
   289a6:	6819      	ldr	r1, [r3, #0]
   289a8:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   289aa:	681a      	ldr	r2, [r3, #0]
   289ac:	6859      	ldr	r1, [r3, #4]
   289ae:	6051      	str	r1, [r2, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
   289b0:	b173      	cbz	r3, 289d0 <k_poll_signal+0x48>
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   289b2:	aa01      	add	r2, sp, #4
   289b4:	2101      	movs	r1, #1
   289b6:	4618      	mov	r0, r3
   289b8:	f7ff fcdc 	bl	28374 <_signal_poll_event>
   289bc:	4604      	mov	r4, r0
				    &must_reschedule);

	if (must_reschedule) {
   289be:	9b01      	ldr	r3, [sp, #4]
   289c0:	b953      	cbnz	r3, 289d8 <k_poll_signal+0x50>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   289c2:	f385 8811 	msr	BASEPRI, r5
	} else {
		irq_unlock(key);
	}

	return rc;
}
   289c6:	4620      	mov	r0, r4
   289c8:	b003      	add	sp, #12
   289ca:	bd30      	pop	{r4, r5, pc}
		return NULL;
   289cc:	2300      	movs	r3, #0
   289ce:	e7ef      	b.n	289b0 <k_poll_signal+0x28>
   289d0:	f385 8811 	msr	BASEPRI, r5
		return 0;
   289d4:	2400      	movs	r4, #0
   289d6:	e7f6      	b.n	289c6 <k_poll_signal+0x3e>
	_update_time_slice_before_swap();
   289d8:	f000 fa74 	bl	28ec4 <_update_time_slice_before_swap>
	return __swap(key);
   289dc:	4628      	mov	r0, r5
   289de:	f7fe fdb7 	bl	27550 <__swap>
   289e2:	e7f0      	b.n	289c6 <k_poll_signal+0x3e>

000289e4 <k_queue_poll>:
	sys_slist_init(list);
}

#if defined(CONFIG_POLL)
static void *k_queue_poll(struct k_queue *queue, s32_t timeout)
{
   289e4:	b530      	push	{r4, r5, lr}
   289e6:	b087      	sub	sp, #28
   289e8:	4604      	mov	r4, r0
   289ea:	460d      	mov	r5, r1
	struct k_poll_event event;
	int err;
	unsigned int key;
	void *val;

	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   289ec:	4603      	mov	r3, r0
   289ee:	2200      	movs	r2, #0
   289f0:	2104      	movs	r1, #4
   289f2:	eb0d 0001 	add.w	r0, sp, r1
   289f6:	f7ff fd3b 	bl	28470 <k_poll_event_init>
   289fa:	e005      	b.n	28a08 <k_queue_poll+0x24>
   289fc:	f383 8811 	msr	BASEPRI, r3
		 * irq_lock.
		 */
		key = irq_lock();
		val = sys_slist_get(&queue->data_q);
		irq_unlock(key);
	} while (!val && timeout == K_FOREVER);
   28a00:	b9f8      	cbnz	r0, 28a42 <k_queue_poll+0x5e>
   28a02:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   28a06:	d11c      	bne.n	28a42 <k_queue_poll+0x5e>
		event.state = K_POLL_STATE_NOT_READY;
   28a08:	f89d 3011 	ldrb.w	r3, [sp, #17]
   28a0c:	f36f 1307 	bfc	r3, #4, #4
   28a10:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   28a14:	462a      	mov	r2, r5
   28a16:	2101      	movs	r1, #1
   28a18:	a801      	add	r0, sp, #4
   28a1a:	f7ff fd3d 	bl	28498 <k_poll>
		if (err) {
   28a1e:	b978      	cbnz	r0, 28a40 <k_queue_poll+0x5c>
	__asm__ volatile(
   28a20:	f04f 0220 	mov.w	r2, #32
   28a24:	f3ef 8311 	mrs	r3, BASEPRI
   28a28:	f382 8811 	msr	BASEPRI, r2
   28a2c:	6820      	ldr	r0, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   28a2e:	2800      	cmp	r0, #0
   28a30:	d0e4      	beq.n	289fc <k_queue_poll+0x18>
	list->head = node->next;
   28a32:	6802      	ldr	r2, [r0, #0]
   28a34:	6022      	str	r2, [r4, #0]
	if (list->tail == node) {
   28a36:	6861      	ldr	r1, [r4, #4]
   28a38:	4288      	cmp	r0, r1
   28a3a:	d1df      	bne.n	289fc <k_queue_poll+0x18>
		list->tail = list->head;
   28a3c:	6062      	str	r2, [r4, #4]
   28a3e:	e7dd      	b.n	289fc <k_queue_poll+0x18>
			return NULL;
   28a40:	2000      	movs	r0, #0

	return val;
}
   28a42:	b007      	add	sp, #28
   28a44:	bd30      	pop	{r4, r5, pc}

00028a46 <k_queue_init>:
	list->head = NULL;
   28a46:	2300      	movs	r3, #0
   28a48:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   28a4a:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   28a4c:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   28a50:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   28a52:	60c3      	str	r3, [r0, #12]
   28a54:	4770      	bx	lr

00028a56 <k_queue_insert>:
{
   28a56:	b510      	push	{r4, lr}
   28a58:	f04f 0320 	mov.w	r3, #32
   28a5c:	f3ef 8411 	mrs	r4, BASEPRI
   28a60:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
   28a64:	b159      	cbz	r1, 28a7e <k_queue_insert+0x28>
	} else if (!prev->next) {
   28a66:	680b      	ldr	r3, [r1, #0]
   28a68:	b18b      	cbz	r3, 28a8e <k_queue_insert+0x38>
		node->next = prev->next;
   28a6a:	6013      	str	r3, [r2, #0]
		prev->next = node;
   28a6c:	600a      	str	r2, [r1, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
   28a6e:	2104      	movs	r1, #4
   28a70:	3008      	adds	r0, #8
   28a72:	f7ff ff71 	bl	28958 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   28a76:	b998      	cbnz	r0, 28aa0 <k_queue_insert+0x4a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28a78:	f384 8811 	msr	BASEPRI, r4
   28a7c:	bd10      	pop	{r4, pc}
	node->next = list->head;
   28a7e:	6803      	ldr	r3, [r0, #0]
   28a80:	6013      	str	r3, [r2, #0]
	list->head = node;
   28a82:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   28a84:	6843      	ldr	r3, [r0, #4]
   28a86:	2b00      	cmp	r3, #0
   28a88:	d1f1      	bne.n	28a6e <k_queue_insert+0x18>
		list->tail = list->head;
   28a8a:	6042      	str	r2, [r0, #4]
   28a8c:	e7ef      	b.n	28a6e <k_queue_insert+0x18>
	node->next = NULL;
   28a8e:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
   28a90:	6843      	ldr	r3, [r0, #4]
   28a92:	b113      	cbz	r3, 28a9a <k_queue_insert+0x44>
		list->tail->next = node;
   28a94:	601a      	str	r2, [r3, #0]
		list->tail = node;
   28a96:	6042      	str	r2, [r0, #4]
   28a98:	e7e9      	b.n	28a6e <k_queue_insert+0x18>
		list->tail = node;
   28a9a:	6042      	str	r2, [r0, #4]
		list->head = node;
   28a9c:	6002      	str	r2, [r0, #0]
   28a9e:	e7e6      	b.n	28a6e <k_queue_insert+0x18>
	_update_time_slice_before_swap();
   28aa0:	f000 fa10 	bl	28ec4 <_update_time_slice_before_swap>
	return __swap(key);
   28aa4:	4620      	mov	r0, r4
   28aa6:	f7fe fd53 	bl	27550 <__swap>
   28aaa:	bd10      	pop	{r4, pc}

00028aac <k_queue_append>:
{
   28aac:	b508      	push	{r3, lr}
	return k_queue_insert(queue, queue->data_q.tail, data);
   28aae:	460a      	mov	r2, r1
   28ab0:	6841      	ldr	r1, [r0, #4]
   28ab2:	f7ff ffd0 	bl	28a56 <k_queue_insert>
   28ab6:	bd08      	pop	{r3, pc}

00028ab8 <k_queue_prepend>:
{
   28ab8:	b508      	push	{r3, lr}
	return k_queue_insert(queue, NULL, data);
   28aba:	460a      	mov	r2, r1
   28abc:	2100      	movs	r1, #0
   28abe:	f7ff ffca 	bl	28a56 <k_queue_insert>
   28ac2:	bd08      	pop	{r3, pc}

00028ac4 <k_queue_append_list>:
{
   28ac4:	b510      	push	{r4, lr}
	__asm__ volatile(
   28ac6:	f04f 0320 	mov.w	r3, #32
   28aca:	f3ef 8411 	mrs	r4, BASEPRI
   28ace:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
   28ad2:	6843      	ldr	r3, [r0, #4]
   28ad4:	b14b      	cbz	r3, 28aea <k_queue_append_list+0x26>
		list->tail->next = (sys_snode_t *)head;
   28ad6:	6019      	str	r1, [r3, #0]
		list->tail = (sys_snode_t *)tail;
   28ad8:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
   28ada:	2104      	movs	r1, #4
   28adc:	3008      	adds	r0, #8
   28ade:	f7ff ff3b 	bl	28958 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   28ae2:	b928      	cbnz	r0, 28af0 <k_queue_append_list+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28ae4:	f384 8811 	msr	BASEPRI, r4
   28ae8:	bd10      	pop	{r4, pc}
		list->head = (sys_snode_t *)head;
   28aea:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
   28aec:	6042      	str	r2, [r0, #4]
   28aee:	e7f4      	b.n	28ada <k_queue_append_list+0x16>
	_update_time_slice_before_swap();
   28af0:	f000 f9e8 	bl	28ec4 <_update_time_slice_before_swap>
	return __swap(key);
   28af4:	4620      	mov	r0, r4
   28af6:	f7fe fd2b 	bl	27550 <__swap>
   28afa:	bd10      	pop	{r4, pc}

00028afc <k_queue_get>:
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   28afc:	b510      	push	{r4, lr}
	__asm__ volatile(
   28afe:	f04f 0320 	mov.w	r3, #32
   28b02:	f3ef 8211 	mrs	r2, BASEPRI
   28b06:	f383 8811 	msr	BASEPRI, r3
	return (!list->head);
   28b0a:	6803      	ldr	r3, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   28b0c:	b153      	cbz	r3, 28b24 <k_queue_get+0x28>
	list->head = node->next;
   28b0e:	6819      	ldr	r1, [r3, #0]
   28b10:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
   28b12:	6844      	ldr	r4, [r0, #4]
   28b14:	42a3      	cmp	r3, r4
   28b16:	d003      	beq.n	28b20 <k_queue_get+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28b18:	f382 8811 	msr	BASEPRI, r2
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
   28b1c:	4618      	mov	r0, r3
   28b1e:	bd10      	pop	{r4, pc}
		list->tail = list->head;
   28b20:	6041      	str	r1, [r0, #4]
   28b22:	e7f9      	b.n	28b18 <k_queue_get+0x1c>
	}

	if (timeout == K_NO_WAIT) {
   28b24:	b121      	cbz	r1, 28b30 <k_queue_get+0x34>
   28b26:	f382 8811 	msr	BASEPRI, r2
	}

#if defined(CONFIG_POLL)
	irq_unlock(key);

	return k_queue_poll(queue, timeout);
   28b2a:	f7ff ff5b 	bl	289e4 <k_queue_poll>
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   28b2e:	bd10      	pop	{r4, pc}
   28b30:	f382 8811 	msr	BASEPRI, r2
		return NULL;
   28b34:	2000      	movs	r0, #0
   28b36:	bd10      	pop	{r4, pc}

00028b38 <_set_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   28b38:	3010      	adds	r0, #16
   28b3a:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   28b3c:	f000 001f 	and.w	r0, r0, #31
   28b40:	2201      	movs	r2, #1
   28b42:	fa02 f000 	lsl.w	r0, r2, r0
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   28b46:	1d9a      	adds	r2, r3, #6
   28b48:	4b03      	ldr	r3, [pc, #12]	; (28b58 <_set_ready_q_prio_bit+0x20>)
   28b4a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   28b4e:	685a      	ldr	r2, [r3, #4]
   28b50:	4302      	orrs	r2, r0
   28b52:	605a      	str	r2, [r3, #4]
   28b54:	4770      	bx	lr
   28b56:	bf00      	nop
   28b58:	20002878 	.word	0x20002878

00028b5c <_clear_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   28b5c:	3010      	adds	r0, #16
   28b5e:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   28b60:	f000 001f 	and.w	r0, r0, #31
   28b64:	2201      	movs	r2, #1
   28b66:	fa02 f000 	lsl.w	r0, r2, r0
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
   28b6a:	1d9a      	adds	r2, r3, #6
   28b6c:	4b03      	ldr	r3, [pc, #12]	; (28b7c <_clear_ready_q_prio_bit+0x20>)
   28b6e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   28b72:	685a      	ldr	r2, [r3, #4]
   28b74:	ea22 0200 	bic.w	r2, r2, r0
   28b78:	605a      	str	r2, [r3, #4]
   28b7a:	4770      	bx	lr
   28b7c:	20002878 	.word	0x20002878

00028b80 <_get_ready_q_head>:
	ready_range = _ready_q.prio_bmap[0];
   28b80:	4b06      	ldr	r3, [pc, #24]	; (28b9c <_get_ready_q_head+0x1c>)
   28b82:	69da      	ldr	r2, [r3, #28]
	return __builtin_ffs(op);
   28b84:	fa92 f3a2 	rbit	r3, r2
   28b88:	fab3 f383 	clz	r3, r3
   28b8c:	b90a      	cbnz	r2, 28b92 <_get_ready_q_head+0x12>
   28b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return list->head;
   28b92:	3304      	adds	r3, #4

	struct k_thread *thread =
		(struct k_thread *)sys_dlist_peek_head_not_empty(list);

	return thread;
}
   28b94:	4a01      	ldr	r2, [pc, #4]	; (28b9c <_get_ready_q_head+0x1c>)
   28b96:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   28b9a:	4770      	bx	lr
   28b9c:	20002878 	.word	0x20002878

00028ba0 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   28ba0:	b570      	push	{r4, r5, r6, lr}
   28ba2:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   28ba4:	f990 000a 	ldrsb.w	r0, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   28ba8:	4e0c      	ldr	r6, [pc, #48]	; (28bdc <_add_thread_to_ready_q+0x3c>)
   28baa:	f100 0514 	add.w	r5, r0, #20
   28bae:	eb06 05c5 	add.w	r5, r6, r5, lsl #3

	_set_ready_q_prio_bit(thread->base.prio);
   28bb2:	f7ff ffc1 	bl	28b38 <_set_ready_q_prio_bit>
	node->next = list;
   28bb6:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   28bb8:	686b      	ldr	r3, [r5, #4]
   28bba:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   28bbc:	686b      	ldr	r3, [r5, #4]
   28bbe:	601c      	str	r4, [r3, #0]
	list->tail = node;
   28bc0:	606c      	str	r4, [r5, #4]
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   28bc2:	69b3      	ldr	r3, [r6, #24]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   28bc4:	f994 200a 	ldrsb.w	r2, [r4, #10]
   28bc8:	f993 100a 	ldrsb.w	r1, [r3, #10]
   28bcc:	4291      	cmp	r1, r2
   28bce:	dc02      	bgt.n	28bd6 <_add_thread_to_ready_q+0x36>
   28bd0:	4a02      	ldr	r2, [pc, #8]	; (28bdc <_add_thread_to_ready_q+0x3c>)
   28bd2:	6193      	str	r3, [r2, #24]
   28bd4:	bd70      	pop	{r4, r5, r6, pc}
   28bd6:	4623      	mov	r3, r4
   28bd8:	e7fa      	b.n	28bd0 <_add_thread_to_ready_q+0x30>
   28bda:	bf00      	nop
   28bdc:	20002878 	.word	0x20002878

00028be0 <_remove_thread_from_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   28be0:	b538      	push	{r3, r4, r5, lr}
   28be2:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   28be4:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   28be8:	4a0e      	ldr	r2, [pc, #56]	; (28c24 <_remove_thread_from_ready_q+0x44>)
   28bea:	3314      	adds	r3, #20
   28bec:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
	node->prev->next = node->next;
   28bf0:	6840      	ldr	r0, [r0, #4]
   28bf2:	6825      	ldr	r5, [r4, #0]
   28bf4:	6005      	str	r5, [r0, #0]
	node->next->prev = node->prev;
   28bf6:	6820      	ldr	r0, [r4, #0]
   28bf8:	6865      	ldr	r5, [r4, #4]
   28bfa:	6045      	str	r5, [r0, #4]
	return list->head == list;
   28bfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   28c00:	4299      	cmp	r1, r3
   28c02:	d006      	beq.n	28c12 <_remove_thread_from_ready_q+0x32>
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   28c04:	4b07      	ldr	r3, [pc, #28]	; (28c24 <_remove_thread_from_ready_q+0x44>)
   28c06:	6998      	ldr	r0, [r3, #24]
   28c08:	4284      	cmp	r4, r0
   28c0a:	d007      	beq.n	28c1c <_remove_thread_from_ready_q+0x3c>
   28c0c:	4b05      	ldr	r3, [pc, #20]	; (28c24 <_remove_thread_from_ready_q+0x44>)
   28c0e:	6198      	str	r0, [r3, #24]
   28c10:	bd38      	pop	{r3, r4, r5, pc}
		_clear_ready_q_prio_bit(thread->base.prio);
   28c12:	f994 000a 	ldrsb.w	r0, [r4, #10]
   28c16:	f7ff ffa1 	bl	28b5c <_clear_ready_q_prio_bit>
   28c1a:	e7f3      	b.n	28c04 <_remove_thread_from_ready_q+0x24>
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   28c1c:	f7ff ffb0 	bl	28b80 <_get_ready_q_head>
   28c20:	e7f4      	b.n	28c0c <_remove_thread_from_ready_q+0x2c>
   28c22:	bf00      	nop
   28c24:	20002878 	.word	0x20002878

00028c28 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   28c28:	b538      	push	{r3, r4, r5, lr}
   28c2a:	680b      	ldr	r3, [r1, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28c2c:	4299      	cmp	r1, r3
   28c2e:	d115      	bne.n	28c5c <_pend_thread+0x34>
   28c30:	2300      	movs	r3, #0
   28c32:	e013      	b.n	28c5c <_pend_thread+0x34>
	if (!insert_point) {
   28c34:	b133      	cbz	r3, 28c44 <_pend_thread+0x1c>
		node->prev = insert_point->prev;
   28c36:	685c      	ldr	r4, [r3, #4]
   28c38:	6044      	str	r4, [r0, #4]
		node->next = insert_point;
   28c3a:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   28c3c:	685c      	ldr	r4, [r3, #4]
   28c3e:	6020      	str	r0, [r4, #0]
		insert_point->prev = node;
   28c40:	6058      	str	r0, [r3, #4]
   28c42:	e02b      	b.n	28c9c <_pend_thread+0x74>
	node->next = list;
   28c44:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   28c46:	684b      	ldr	r3, [r1, #4]
   28c48:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   28c4a:	684b      	ldr	r3, [r1, #4]
   28c4c:	6018      	str	r0, [r3, #0]
	list->tail = node;
   28c4e:	6048      	str	r0, [r1, #4]
   28c50:	e024      	b.n	28c9c <_pend_thread+0x74>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28c52:	461d      	mov	r5, r3
   28c54:	e010      	b.n	28c78 <_pend_thread+0x50>
	return (node == list->tail) ? NULL : node->next;
   28c56:	2500      	movs	r5, #0
   28c58:	e00e      	b.n	28c78 <_pend_thread+0x50>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28c5a:	2300      	movs	r3, #0
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   28c5c:	b1c3      	cbz	r3, 28c90 <_pend_thread+0x68>
   28c5e:	f990 500a 	ldrsb.w	r5, [r0, #10]
   28c62:	f993 400a 	ldrsb.w	r4, [r3, #10]
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   28c66:	42a5      	cmp	r5, r4
   28c68:	dbe4      	blt.n	28c34 <_pend_thread+0xc>
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   28c6a:	461c      	mov	r4, r3
   28c6c:	2b00      	cmp	r3, #0
   28c6e:	d0f0      	beq.n	28c52 <_pend_thread+0x2a>
	return (node == list->tail) ? NULL : node->next;
   28c70:	684d      	ldr	r5, [r1, #4]
   28c72:	42ab      	cmp	r3, r5
   28c74:	d0ef      	beq.n	28c56 <_pend_thread+0x2e>
   28c76:	681d      	ldr	r5, [r3, #0]
   28c78:	b145      	cbz	r5, 28c8c <_pend_thread+0x64>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28c7a:	2c00      	cmp	r4, #0
   28c7c:	d0ed      	beq.n	28c5a <_pend_thread+0x32>
	return (node == list->tail) ? NULL : node->next;
   28c7e:	684d      	ldr	r5, [r1, #4]
   28c80:	42ac      	cmp	r4, r5
   28c82:	d001      	beq.n	28c88 <_pend_thread+0x60>
   28c84:	681b      	ldr	r3, [r3, #0]
   28c86:	e7e9      	b.n	28c5c <_pend_thread+0x34>
   28c88:	2300      	movs	r3, #0
   28c8a:	e7e7      	b.n	28c5c <_pend_thread+0x34>
   28c8c:	2300      	movs	r3, #0
   28c8e:	e7e5      	b.n	28c5c <_pend_thread+0x34>
	node->next = list;
   28c90:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   28c92:	684b      	ldr	r3, [r1, #4]
   28c94:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   28c96:	684b      	ldr	r3, [r1, #4]
   28c98:	6018      	str	r0, [r3, #0]
	list->tail = node;
   28c9a:	6048      	str	r0, [r1, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   28c9c:	7a44      	ldrb	r4, [r0, #9]
   28c9e:	f044 0402 	orr.w	r4, r4, #2
   28ca2:	7244      	strb	r4, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   28ca4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28ca8:	f000 8089 	beq.w	28dbe <_pend_thread+0x196>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   28cac:	f102 0309 	add.w	r3, r2, #9
   28cb0:	4a43      	ldr	r2, [pc, #268]	; (28dc0 <_pend_thread+0x198>)
   28cb2:	fba2 2303 	umull	r2, r3, r2, r3
   28cb6:	08db      	lsrs	r3, r3, #3
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);
   28cb8:	3301      	adds	r3, #1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   28cba:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   28cbe:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   28cc0:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   28cc2:	60e1      	str	r1, [r4, #12]
	if (!timeout_in_ticks) {
   28cc4:	b133      	cbz	r3, 28cd4 <_pend_thread+0xac>
	return list->head == list;
   28cc6:	4a3f      	ldr	r2, [pc, #252]	; (28dc4 <_pend_thread+0x19c>)
   28cc8:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28ccc:	4293      	cmp	r3, r2
   28cce:	d151      	bne.n	28d74 <_pend_thread+0x14c>
   28cd0:	2300      	movs	r3, #0
   28cd2:	e04f      	b.n	28d74 <_pend_thread+0x14c>
	__asm__ volatile(
   28cd4:	f04f 0320 	mov.w	r3, #32
   28cd8:	f3ef 8511 	mrs	r5, BASEPRI
   28cdc:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   28ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28ce4:	6123      	str	r3, [r4, #16]
	if (thread) {
   28ce6:	b320      	cbz	r0, 28d32 <_pend_thread+0x10a>
	if (timeout_obj->wait_q) {
   28ce8:	68e3      	ldr	r3, [r4, #12]
   28cea:	b15b      	cbz	r3, 28d04 <_pend_thread+0xdc>
	node->prev->next = node->next;
   28cec:	6843      	ldr	r3, [r0, #4]
   28cee:	6802      	ldr	r2, [r0, #0]
   28cf0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28cf2:	6803      	ldr	r3, [r0, #0]
   28cf4:	6842      	ldr	r2, [r0, #4]
   28cf6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28cf8:	7a43      	ldrb	r3, [r0, #9]
   28cfa:	f023 0302 	bic.w	r3, r3, #2
   28cfe:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   28d00:	2300      	movs	r3, #0
   28d02:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28d04:	7a43      	ldrb	r3, [r0, #9]
   28d06:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28d0a:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28d0c:	f013 0f1b 	tst.w	r3, #27
   28d10:	d107      	bne.n	28d22 <_pend_thread+0xfa>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28d12:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28d18:	d001      	beq.n	28d1e <_pend_thread+0xf6>
   28d1a:	2300      	movs	r3, #0
   28d1c:	e002      	b.n	28d24 <_pend_thread+0xfc>
   28d1e:	2301      	movs	r3, #1
   28d20:	e000      	b.n	28d24 <_pend_thread+0xfc>
   28d22:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28d24:	b913      	cbnz	r3, 28d2c <_pend_thread+0x104>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28d26:	f385 8811 	msr	BASEPRI, r5
   28d2a:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   28d2c:	f7ff ff38 	bl	28ba0 <_add_thread_to_ready_q>
   28d30:	e7f9      	b.n	28d26 <_pend_thread+0xfe>
   28d32:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   28d36:	6963      	ldr	r3, [r4, #20]
   28d38:	2b00      	cmp	r3, #0
   28d3a:	d040      	beq.n	28dbe <_pend_thread+0x196>
			timeout->func(timeout);
   28d3c:	4620      	mov	r0, r4
   28d3e:	4798      	blx	r3
   28d40:	bd38      	pop	{r3, r4, r5, pc}
			in_q->delta_ticks_from_prev -= *delta;
   28d42:	1a8a      	subs	r2, r1, r2
   28d44:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   28d46:	b133      	cbz	r3, 28d56 <_pend_thread+0x12e>
		node->prev = insert_point->prev;
   28d48:	685a      	ldr	r2, [r3, #4]
   28d4a:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   28d4c:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   28d4e:	685a      	ldr	r2, [r3, #4]
   28d50:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   28d52:	605c      	str	r4, [r3, #4]
   28d54:	bd38      	pop	{r3, r4, r5, pc}
	node->next = list;
   28d56:	4b1b      	ldr	r3, [pc, #108]	; (28dc4 <_pend_thread+0x19c>)
   28d58:	f103 020c 	add.w	r2, r3, #12
   28d5c:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   28d5e:	691a      	ldr	r2, [r3, #16]
   28d60:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28d62:	691a      	ldr	r2, [r3, #16]
   28d64:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28d66:	611c      	str	r4, [r3, #16]
   28d68:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28d6a:	4619      	mov	r1, r3
   28d6c:	e011      	b.n	28d92 <_pend_thread+0x16a>
	return (node == list->tail) ? NULL : node->next;
   28d6e:	2100      	movs	r1, #0
   28d70:	e00f      	b.n	28d92 <_pend_thread+0x16a>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28d72:	2300      	movs	r3, #0
   28d74:	b1d3      	cbz	r3, 28dac <_pend_thread+0x184>
		if (*delta <= in_q->delta_ticks_from_prev) {
   28d76:	6922      	ldr	r2, [r4, #16]
   28d78:	6919      	ldr	r1, [r3, #16]
   28d7a:	428a      	cmp	r2, r1
   28d7c:	dde1      	ble.n	28d42 <_pend_thread+0x11a>
		*delta -= in_q->delta_ticks_from_prev;
   28d7e:	1a52      	subs	r2, r2, r1
   28d80:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28d82:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28d84:	2b00      	cmp	r3, #0
   28d86:	d0f0      	beq.n	28d6a <_pend_thread+0x142>
	return (node == list->tail) ? NULL : node->next;
   28d88:	490e      	ldr	r1, [pc, #56]	; (28dc4 <_pend_thread+0x19c>)
   28d8a:	6909      	ldr	r1, [r1, #16]
   28d8c:	428b      	cmp	r3, r1
   28d8e:	d0ee      	beq.n	28d6e <_pend_thread+0x146>
   28d90:	6819      	ldr	r1, [r3, #0]
   28d92:	2900      	cmp	r1, #0
   28d94:	d0ed      	beq.n	28d72 <_pend_thread+0x14a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28d96:	b12a      	cbz	r2, 28da4 <_pend_thread+0x17c>
	return (node == list->tail) ? NULL : node->next;
   28d98:	490a      	ldr	r1, [pc, #40]	; (28dc4 <_pend_thread+0x19c>)
   28d9a:	6909      	ldr	r1, [r1, #16]
   28d9c:	428a      	cmp	r2, r1
   28d9e:	d003      	beq.n	28da8 <_pend_thread+0x180>
   28da0:	681b      	ldr	r3, [r3, #0]
   28da2:	e7e7      	b.n	28d74 <_pend_thread+0x14c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28da4:	2300      	movs	r3, #0
   28da6:	e7e5      	b.n	28d74 <_pend_thread+0x14c>
	return (node == list->tail) ? NULL : node->next;
   28da8:	2300      	movs	r3, #0
   28daa:	e7e3      	b.n	28d74 <_pend_thread+0x14c>
	node->next = list;
   28dac:	4b05      	ldr	r3, [pc, #20]	; (28dc4 <_pend_thread+0x19c>)
   28dae:	f103 020c 	add.w	r2, r3, #12
   28db2:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   28db4:	691a      	ldr	r2, [r3, #16]
   28db6:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28db8:	691a      	ldr	r2, [r3, #16]
   28dba:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28dbc:	611c      	str	r4, [r3, #16]
   28dbe:	bd38      	pop	{r3, r4, r5, pc}
   28dc0:	cccccccd 	.word	0xcccccccd
   28dc4:	20002878 	.word	0x20002878

00028dc8 <_pend_current_thread>:
}

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   28dc8:	b570      	push	{r4, r5, r6, lr}
   28dca:	4605      	mov	r5, r0
   28dcc:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(_current);
   28dce:	4c05      	ldr	r4, [pc, #20]	; (28de4 <_pend_current_thread+0x1c>)
   28dd0:	68a0      	ldr	r0, [r4, #8]
   28dd2:	f7ff ff05 	bl	28be0 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   28dd6:	4632      	mov	r2, r6
   28dd8:	4629      	mov	r1, r5
   28dda:	68a0      	ldr	r0, [r4, #8]
   28ddc:	f7ff ff24 	bl	28c28 <_pend_thread>
   28de0:	bd70      	pop	{r4, r5, r6, pc}
   28de2:	bf00      	nop
   28de4:	20002878 	.word	0x20002878

00028de8 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
   28de8:	4b09      	ldr	r3, [pc, #36]	; (28e10 <__must_switch_threads+0x28>)
   28dea:	69db      	ldr	r3, [r3, #28]
	return __builtin_ffs(op);
   28dec:	fa93 f0a3 	rbit	r0, r3
   28df0:	fab0 f080 	clz	r0, r0
   28df4:	b90b      	cbnz	r3, 28dfa <__must_switch_threads+0x12>
   28df6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
   28dfa:	3810      	subs	r0, #16

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   28dfc:	4b04      	ldr	r3, [pc, #16]	; (28e10 <__must_switch_threads+0x28>)
   28dfe:	689b      	ldr	r3, [r3, #8]
   28e00:	f993 300a 	ldrsb.w	r3, [r3, #10]
#else
	return 0;
#endif
}
   28e04:	4283      	cmp	r3, r0
   28e06:	bfd4      	ite	le
   28e08:	2000      	movle	r0, #0
   28e0a:	2001      	movgt	r0, #1
   28e0c:	4770      	bx	lr
   28e0e:	bf00      	nop
   28e10:	20002878 	.word	0x20002878

00028e14 <_move_thread_to_end_of_prio_q>:
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   28e14:	f990 200a 	ldrsb.w	r2, [r0, #10]
	return prio + _NUM_COOP_PRIO;
   28e18:	f102 0310 	add.w	r3, r2, #16
	sys_dlist_t *q = &_ready_q.q[q_index];
   28e1c:	3214      	adds	r2, #20
   28e1e:	4911      	ldr	r1, [pc, #68]	; (28e64 <_move_thread_to_end_of_prio_q+0x50>)
   28e20:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	return list->tail == node;
   28e24:	6851      	ldr	r1, [r2, #4]

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   28e26:	4288      	cmp	r0, r1
   28e28:	d01a      	beq.n	28e60 <_move_thread_to_end_of_prio_q+0x4c>
{
   28e2a:	b510      	push	{r4, lr}
	node->prev->next = node->next;
   28e2c:	6841      	ldr	r1, [r0, #4]
   28e2e:	6804      	ldr	r4, [r0, #0]
   28e30:	600c      	str	r4, [r1, #0]
	node->next->prev = node->prev;
   28e32:	6801      	ldr	r1, [r0, #0]
   28e34:	6844      	ldr	r4, [r0, #4]
   28e36:	604c      	str	r4, [r1, #4]
	node->next = list;
   28e38:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
   28e3a:	4a0a      	ldr	r2, [pc, #40]	; (28e64 <_move_thread_to_end_of_prio_q+0x50>)
   28e3c:	3304      	adds	r3, #4
   28e3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   28e42:	6859      	ldr	r1, [r3, #4]
   28e44:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
   28e46:	6859      	ldr	r1, [r3, #4]
   28e48:	6008      	str	r0, [r1, #0]
	list->tail = node;
   28e4a:	6058      	str	r0, [r3, #4]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   28e4c:	6993      	ldr	r3, [r2, #24]
   28e4e:	4298      	cmp	r0, r3
   28e50:	d002      	beq.n	28e58 <_move_thread_to_end_of_prio_q+0x44>
   28e52:	4a04      	ldr	r2, [pc, #16]	; (28e64 <_move_thread_to_end_of_prio_q+0x50>)
   28e54:	6193      	str	r3, [r2, #24]
   28e56:	bd10      	pop	{r4, pc}
   28e58:	f7ff fe92 	bl	28b80 <_get_ready_q_head>
   28e5c:	4603      	mov	r3, r0
   28e5e:	e7f8      	b.n	28e52 <_move_thread_to_end_of_prio_q+0x3e>
   28e60:	4770      	bx	lr
   28e62:	bf00      	nop
   28e64:	20002878 	.word	0x20002878

00028e68 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   28e68:	4b01      	ldr	r3, [pc, #4]	; (28e70 <_impl_k_current_get+0x8>)
   28e6a:	6898      	ldr	r0, [r3, #8]
   28e6c:	4770      	bx	lr
   28e6e:	bf00      	nop
   28e70:	20002878 	.word	0x20002878

00028e74 <_is_thread_time_slicing>:
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   28e74:	4b0f      	ldr	r3, [pc, #60]	; (28eb4 <_is_thread_time_slicing+0x40>)
   28e76:	681b      	ldr	r3, [r3, #0]
   28e78:	2b00      	cmp	r3, #0
   28e7a:	dd14      	ble.n	28ea6 <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
   28e7c:	4b0e      	ldr	r3, [pc, #56]	; (28eb8 <_is_thread_time_slicing+0x44>)
   28e7e:	681b      	ldr	r3, [r3, #0]
   28e80:	4298      	cmp	r0, r3
   28e82:	d012      	beq.n	28eaa <_is_thread_time_slicing+0x36>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   28e84:	f990 300a 	ldrsb.w	r3, [r0, #10]
   28e88:	4a0c      	ldr	r2, [pc, #48]	; (28ebc <_is_thread_time_slicing+0x48>)
   28e8a:	6812      	ldr	r2, [r2, #0]
   28e8c:	4293      	cmp	r3, r2
   28e8e:	db0e      	blt.n	28eae <_is_thread_time_slicing+0x3a>
	return list->head != list->tail;
   28e90:	4a0b      	ldr	r2, [pc, #44]	; (28ec0 <_is_thread_time_slicing+0x4c>)
   28e92:	3314      	adds	r3, #20
   28e94:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   28e98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   28e9c:	685b      	ldr	r3, [r3, #4]
   28e9e:	1ac0      	subs	r0, r0, r3
   28ea0:	bf18      	it	ne
   28ea2:	2001      	movne	r0, #1
	}

	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	return sys_dlist_has_multiple_nodes(q);
   28ea4:	4770      	bx	lr
		return 0;
   28ea6:	2000      	movs	r0, #0
   28ea8:	4770      	bx	lr
   28eaa:	2000      	movs	r0, #0
   28eac:	4770      	bx	lr
   28eae:	2000      	movs	r0, #0
}
   28eb0:	4770      	bx	lr
   28eb2:	bf00      	nop
   28eb4:	20002998 	.word	0x20002998
   28eb8:	000329c4 	.word	0x000329c4
   28ebc:	2000299c 	.word	0x2000299c
   28ec0:	20002878 	.word	0x20002878

00028ec4 <_update_time_slice_before_swap>:
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   28ec4:	2200      	movs	r2, #0
   28ec6:	4b01      	ldr	r3, [pc, #4]	; (28ecc <_update_time_slice_before_swap+0x8>)
   28ec8:	601a      	str	r2, [r3, #0]
   28eca:	4770      	bx	lr
   28ecc:	20002c64 	.word	0x20002c64

00028ed0 <_reschedule_threads>:
{
   28ed0:	b510      	push	{r4, lr}
   28ed2:	4604      	mov	r4, r0
	return _is_preempt(_current) && __must_switch_threads();
   28ed4:	4b0a      	ldr	r3, [pc, #40]	; (28f00 <_reschedule_threads+0x30>)
   28ed6:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   28ed8:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   28eda:	2b7f      	cmp	r3, #127	; 0x7f
   28edc:	d805      	bhi.n	28eea <_reschedule_threads+0x1a>
   28ede:	f7ff ff83 	bl	28de8 <__must_switch_threads>
   28ee2:	4603      	mov	r3, r0
   28ee4:	b110      	cbz	r0, 28eec <_reschedule_threads+0x1c>
   28ee6:	2301      	movs	r3, #1
   28ee8:	e000      	b.n	28eec <_reschedule_threads+0x1c>
   28eea:	2300      	movs	r3, #0
	if (_must_switch_threads()) {
   28eec:	b913      	cbnz	r3, 28ef4 <_reschedule_threads+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28eee:	f384 8811 	msr	BASEPRI, r4
   28ef2:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   28ef4:	f7ff ffe6 	bl	28ec4 <_update_time_slice_before_swap>
	return __swap(key);
   28ef8:	4620      	mov	r0, r4
   28efa:	f7fe fb29 	bl	27550 <__swap>
   28efe:	bd10      	pop	{r4, pc}
   28f00:	20002878 	.word	0x20002878

00028f04 <k_sched_unlock>:
{
   28f04:	b508      	push	{r3, lr}
	__asm__ volatile(
   28f06:	f04f 0320 	mov.w	r3, #32
   28f0a:	f3ef 8011 	mrs	r0, BASEPRI
   28f0e:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
   28f12:	4b04      	ldr	r3, [pc, #16]	; (28f24 <k_sched_unlock+0x20>)
   28f14:	689a      	ldr	r2, [r3, #8]
   28f16:	7ad3      	ldrb	r3, [r2, #11]
   28f18:	3301      	adds	r3, #1
   28f1a:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
   28f1c:	f7ff ffd8 	bl	28ed0 <_reschedule_threads>
   28f20:	bd08      	pop	{r3, pc}
   28f22:	bf00      	nop
   28f24:	20002878 	.word	0x20002878

00028f28 <_impl_k_yield>:
{
   28f28:	b538      	push	{r3, r4, r5, lr}
   28f2a:	f04f 0320 	mov.w	r3, #32
   28f2e:	f3ef 8511 	mrs	r5, BASEPRI
   28f32:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
   28f36:	4c08      	ldr	r4, [pc, #32]	; (28f58 <_impl_k_yield+0x30>)
   28f38:	68a0      	ldr	r0, [r4, #8]
   28f3a:	f7ff ff6b 	bl	28e14 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
   28f3e:	68a2      	ldr	r2, [r4, #8]
	return _ready_q.cache;
   28f40:	69a3      	ldr	r3, [r4, #24]
   28f42:	429a      	cmp	r2, r3
   28f44:	d005      	beq.n	28f52 <_impl_k_yield+0x2a>
	_update_time_slice_before_swap();
   28f46:	f7ff ffbd 	bl	28ec4 <_update_time_slice_before_swap>
	return __swap(key);
   28f4a:	4628      	mov	r0, r5
   28f4c:	f7fe fb00 	bl	27550 <__swap>
   28f50:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28f52:	f385 8811 	msr	BASEPRI, r5
   28f56:	bd38      	pop	{r3, r4, r5, pc}
   28f58:	20002878 	.word	0x20002878

00028f5c <_impl_k_sleep>:
{
   28f5c:	b570      	push	{r4, r5, r6, lr}
   28f5e:	b082      	sub	sp, #8
	if (duration == 0) {
   28f60:	b308      	cbz	r0, 28fa6 <_impl_k_sleep+0x4a>
   28f62:	4603      	mov	r3, r0
   28f64:	3309      	adds	r3, #9
   28f66:	4a4f      	ldr	r2, [pc, #316]	; (290a4 <_impl_k_sleep+0x148>)
   28f68:	fba2 2303 	umull	r2, r3, r2, r3
   28f6c:	08db      	lsrs	r3, r3, #3
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
   28f6e:	3301      	adds	r3, #1
   28f70:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
   28f72:	f04f 0320 	mov.w	r3, #32
   28f76:	f3ef 8511 	mrs	r5, BASEPRI
   28f7a:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
   28f7e:	4c4a      	ldr	r4, [pc, #296]	; (290a8 <_impl_k_sleep+0x14c>)
   28f80:	68a0      	ldr	r0, [r4, #8]
   28f82:	f7ff fe2d 	bl	28be0 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
   28f86:	68a0      	ldr	r0, [r4, #8]
   28f88:	9b01      	ldr	r3, [sp, #4]
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   28f8a:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   28f8e:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   28f90:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   28f92:	2200      	movs	r2, #0
   28f94:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   28f96:	b14b      	cbz	r3, 28fac <_impl_k_sleep+0x50>
	return list->head == list;
   28f98:	4a43      	ldr	r2, [pc, #268]	; (290a8 <_impl_k_sleep+0x14c>)
   28f9a:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28f9e:	4293      	cmp	r3, r2
   28fa0:	d154      	bne.n	2904c <_impl_k_sleep+0xf0>
   28fa2:	2300      	movs	r3, #0
   28fa4:	e052      	b.n	2904c <_impl_k_sleep+0xf0>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   28fa6:	f7ff ffbf 	bl	28f28 <_impl_k_yield>
   28faa:	e079      	b.n	290a0 <_impl_k_sleep+0x144>
   28fac:	f04f 0320 	mov.w	r3, #32
   28fb0:	f3ef 8611 	mrs	r6, BASEPRI
   28fb4:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   28fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28fbc:	6123      	str	r3, [r4, #16]
	if (thread) {
   28fbe:	b320      	cbz	r0, 2900a <_impl_k_sleep+0xae>
	if (timeout_obj->wait_q) {
   28fc0:	68e3      	ldr	r3, [r4, #12]
   28fc2:	b15b      	cbz	r3, 28fdc <_impl_k_sleep+0x80>
	node->prev->next = node->next;
   28fc4:	6843      	ldr	r3, [r0, #4]
   28fc6:	6802      	ldr	r2, [r0, #0]
   28fc8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28fca:	6803      	ldr	r3, [r0, #0]
   28fcc:	6842      	ldr	r2, [r0, #4]
   28fce:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28fd0:	7a43      	ldrb	r3, [r0, #9]
   28fd2:	f023 0302 	bic.w	r3, r3, #2
   28fd6:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   28fd8:	2300      	movs	r3, #0
   28fda:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28fdc:	7a43      	ldrb	r3, [r0, #9]
   28fde:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28fe2:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28fe4:	f013 0f1b 	tst.w	r3, #27
   28fe8:	d107      	bne.n	28ffa <_impl_k_sleep+0x9e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28fea:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28ff0:	d001      	beq.n	28ff6 <_impl_k_sleep+0x9a>
   28ff2:	2300      	movs	r3, #0
   28ff4:	e002      	b.n	28ffc <_impl_k_sleep+0xa0>
   28ff6:	2301      	movs	r3, #1
   28ff8:	e000      	b.n	28ffc <_impl_k_sleep+0xa0>
   28ffa:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28ffc:	b913      	cbnz	r3, 29004 <_impl_k_sleep+0xa8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28ffe:	f386 8811 	msr	BASEPRI, r6
   29002:	e048      	b.n	29096 <_impl_k_sleep+0x13a>
		_add_thread_to_ready_q(thread);
   29004:	f7ff fdcc 	bl	28ba0 <_add_thread_to_ready_q>
   29008:	e7f9      	b.n	28ffe <_impl_k_sleep+0xa2>
   2900a:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   2900e:	6963      	ldr	r3, [r4, #20]
   29010:	2b00      	cmp	r3, #0
   29012:	d040      	beq.n	29096 <_impl_k_sleep+0x13a>
			timeout->func(timeout);
   29014:	4620      	mov	r0, r4
   29016:	4798      	blx	r3
   29018:	e03d      	b.n	29096 <_impl_k_sleep+0x13a>
			in_q->delta_ticks_from_prev -= *delta;
   2901a:	1a8a      	subs	r2, r1, r2
   2901c:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   2901e:	b133      	cbz	r3, 2902e <_impl_k_sleep+0xd2>
		node->prev = insert_point->prev;
   29020:	685a      	ldr	r2, [r3, #4]
   29022:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   29024:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   29026:	685a      	ldr	r2, [r3, #4]
   29028:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   2902a:	605c      	str	r4, [r3, #4]
   2902c:	e033      	b.n	29096 <_impl_k_sleep+0x13a>
	node->next = list;
   2902e:	4b1e      	ldr	r3, [pc, #120]	; (290a8 <_impl_k_sleep+0x14c>)
   29030:	f103 020c 	add.w	r2, r3, #12
   29034:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   29036:	691a      	ldr	r2, [r3, #16]
   29038:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2903a:	691a      	ldr	r2, [r3, #16]
   2903c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2903e:	611c      	str	r4, [r3, #16]
   29040:	e029      	b.n	29096 <_impl_k_sleep+0x13a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29042:	4619      	mov	r1, r3
   29044:	e011      	b.n	2906a <_impl_k_sleep+0x10e>
	return (node == list->tail) ? NULL : node->next;
   29046:	2100      	movs	r1, #0
   29048:	e00f      	b.n	2906a <_impl_k_sleep+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2904a:	2300      	movs	r3, #0
   2904c:	b1d3      	cbz	r3, 29084 <_impl_k_sleep+0x128>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2904e:	6922      	ldr	r2, [r4, #16]
   29050:	6919      	ldr	r1, [r3, #16]
   29052:	428a      	cmp	r2, r1
   29054:	dde1      	ble.n	2901a <_impl_k_sleep+0xbe>
		*delta -= in_q->delta_ticks_from_prev;
   29056:	1a52      	subs	r2, r2, r1
   29058:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2905a:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2905c:	2b00      	cmp	r3, #0
   2905e:	d0f0      	beq.n	29042 <_impl_k_sleep+0xe6>
	return (node == list->tail) ? NULL : node->next;
   29060:	4911      	ldr	r1, [pc, #68]	; (290a8 <_impl_k_sleep+0x14c>)
   29062:	6909      	ldr	r1, [r1, #16]
   29064:	428b      	cmp	r3, r1
   29066:	d0ee      	beq.n	29046 <_impl_k_sleep+0xea>
   29068:	6819      	ldr	r1, [r3, #0]
   2906a:	2900      	cmp	r1, #0
   2906c:	d0ed      	beq.n	2904a <_impl_k_sleep+0xee>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2906e:	b12a      	cbz	r2, 2907c <_impl_k_sleep+0x120>
	return (node == list->tail) ? NULL : node->next;
   29070:	490d      	ldr	r1, [pc, #52]	; (290a8 <_impl_k_sleep+0x14c>)
   29072:	6909      	ldr	r1, [r1, #16]
   29074:	428a      	cmp	r2, r1
   29076:	d003      	beq.n	29080 <_impl_k_sleep+0x124>
   29078:	681b      	ldr	r3, [r3, #0]
   2907a:	e7e7      	b.n	2904c <_impl_k_sleep+0xf0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2907c:	2300      	movs	r3, #0
   2907e:	e7e5      	b.n	2904c <_impl_k_sleep+0xf0>
	return (node == list->tail) ? NULL : node->next;
   29080:	2300      	movs	r3, #0
   29082:	e7e3      	b.n	2904c <_impl_k_sleep+0xf0>
	node->next = list;
   29084:	4b08      	ldr	r3, [pc, #32]	; (290a8 <_impl_k_sleep+0x14c>)
   29086:	f103 020c 	add.w	r2, r3, #12
   2908a:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   2908c:	691a      	ldr	r2, [r3, #16]
   2908e:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29090:	691a      	ldr	r2, [r3, #16]
   29092:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29094:	611c      	str	r4, [r3, #16]
	_update_time_slice_before_swap();
   29096:	f7ff ff15 	bl	28ec4 <_update_time_slice_before_swap>
	return __swap(key);
   2909a:	4628      	mov	r0, r5
   2909c:	f7fe fa58 	bl	27550 <__swap>
}
   290a0:	b002      	add	sp, #8
   290a2:	bd70      	pop	{r4, r5, r6, pc}
   290a4:	cccccccd 	.word	0xcccccccd
   290a8:	20002878 	.word	0x20002878

000290ac <do_sem_give>:
	sem->count += (sem->count != sem->limit);
}

/* returns 1 if _Swap() will need to be invoked, 0 otherwise */
static int do_sem_give(struct k_sem *sem)
{
   290ac:	b510      	push	{r4, lr}
	if (_handling_timeouts) {
   290ae:	4b43      	ldr	r3, [pc, #268]	; (291bc <do_sem_give+0x110>)
   290b0:	681b      	ldr	r3, [r3, #0]
   290b2:	2b00      	cmp	r3, #0
   290b4:	d136      	bne.n	29124 <do_sem_give+0x78>
	return list->head == list;
   290b6:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   290b8:	42a0      	cmp	r0, r4
   290ba:	d044      	beq.n	29146 <do_sem_give+0x9a>
	if (thread) {
   290bc:	b14c      	cbz	r4, 290d2 <do_sem_give+0x26>
	node->prev->next = node->next;
   290be:	6863      	ldr	r3, [r4, #4]
   290c0:	6822      	ldr	r2, [r4, #0]
   290c2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   290c4:	6823      	ldr	r3, [r4, #0]
   290c6:	6862      	ldr	r2, [r4, #4]
   290c8:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   290ca:	7a63      	ldrb	r3, [r4, #9]
   290cc:	f023 0302 	bic.w	r3, r3, #2
   290d0:	7263      	strb	r3, [r4, #9]
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);

	if (!thread) {
   290d2:	2c00      	cmp	r4, #0
   290d4:	d039      	beq.n	2914a <do_sem_give+0x9e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   290d6:	6a22      	ldr	r2, [r4, #32]
   290d8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   290dc:	d013      	beq.n	29106 <do_sem_give+0x5a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   290de:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   290e2:	4937      	ldr	r1, [pc, #220]	; (291c0 <do_sem_give+0x114>)
   290e4:	6909      	ldr	r1, [r1, #16]
   290e6:	428b      	cmp	r3, r1
   290e8:	d004      	beq.n	290f4 <do_sem_give+0x48>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   290ea:	b103      	cbz	r3, 290ee <do_sem_give+0x42>
	return (node == list->tail) ? NULL : node->next;
   290ec:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   290ee:	6919      	ldr	r1, [r3, #16]
   290f0:	440a      	add	r2, r1
   290f2:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   290f4:	6963      	ldr	r3, [r4, #20]
   290f6:	6922      	ldr	r2, [r4, #16]
   290f8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   290fa:	6923      	ldr	r3, [r4, #16]
   290fc:	6962      	ldr	r2, [r4, #20]
   290fe:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29104:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29106:	7a63      	ldrb	r3, [r4, #9]
   29108:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2910c:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2910e:	f013 0f1b 	tst.w	r3, #27
   29112:	d128      	bne.n	29166 <do_sem_give+0xba>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29114:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2911a:	d022      	beq.n	29162 <do_sem_give+0xb6>
   2911c:	2300      	movs	r3, #0
   2911e:	e023      	b.n	29168 <do_sem_give+0xbc>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29120:	2400      	movs	r4, #0
   29122:	e003      	b.n	2912c <do_sem_give+0x80>
   29124:	4602      	mov	r2, r0
	return list->head == list;
   29126:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29128:	42a0      	cmp	r0, r4
   2912a:	d0f9      	beq.n	29120 <do_sem_give+0x74>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   2912c:	2c00      	cmp	r4, #0
   2912e:	d0c5      	beq.n	290bc <do_sem_give+0x10>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   29130:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   29132:	f113 0f02 	cmn.w	r3, #2
   29136:	d1c1      	bne.n	290bc <do_sem_give+0x10>
	return (node == list->tail) ? NULL : node->next;
   29138:	6853      	ldr	r3, [r2, #4]
   2913a:	429c      	cmp	r4, r3
   2913c:	d001      	beq.n	29142 <do_sem_give+0x96>
   2913e:	6824      	ldr	r4, [r4, #0]
   29140:	e7f4      	b.n	2912c <do_sem_give+0x80>
   29142:	2400      	movs	r4, #0
   29144:	e7f2      	b.n	2912c <do_sem_give+0x80>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29146:	2400      	movs	r4, #0
   29148:	e7b8      	b.n	290bc <do_sem_give+0x10>
	sem->count += (sem->count != sem->limit);
   2914a:	6883      	ldr	r3, [r0, #8]
   2914c:	68c2      	ldr	r2, [r0, #12]
   2914e:	4293      	cmp	r3, r2
   29150:	bf18      	it	ne
   29152:	3301      	addne	r3, #1
   29154:	6083      	str	r3, [r0, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
   29156:	2102      	movs	r1, #2
   29158:	3010      	adds	r0, #16
   2915a:	f7ff fbfd 	bl	28958 <_handle_obj_poll_events>
   2915e:	4603      	mov	r3, r0
		increment_count_up_to_limit(sem);
		return handle_poll_events(sem);
   29160:	e01c      	b.n	2919c <do_sem_give+0xf0>
	return !(_is_thread_prevented_from_running(thread) ||
   29162:	2301      	movs	r3, #1
   29164:	e000      	b.n	29168 <do_sem_give+0xbc>
   29166:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29168:	b96b      	cbnz	r3, 29186 <do_sem_give+0xda>
   2916a:	2300      	movs	r3, #0
   2916c:	6663      	str	r3, [r4, #100]	; 0x64
   2916e:	f3ef 8305 	mrs	r3, IPSR
   29172:	2b0d      	cmp	r3, #13
   29174:	d80b      	bhi.n	2918e <do_sem_give+0xe2>
   29176:	b19b      	cbz	r3, 291a0 <do_sem_give+0xf4>
   29178:	4b12      	ldr	r3, [pc, #72]	; (291c4 <do_sem_give+0x118>)
   2917a:	685b      	ldr	r3, [r3, #4]
   2917c:	f413 6f00 	tst.w	r3, #2048	; 0x800
   29180:	d010      	beq.n	291a4 <do_sem_give+0xf8>
   29182:	2300      	movs	r3, #0
   29184:	e004      	b.n	29190 <do_sem_give+0xe4>
		_add_thread_to_ready_q(thread);
   29186:	4620      	mov	r0, r4
   29188:	f7ff fd0a 	bl	28ba0 <_add_thread_to_ready_q>
   2918c:	e7ed      	b.n	2916a <do_sem_give+0xbe>
   2918e:	2301      	movs	r3, #1
	}
	(void)_abort_thread_timeout(thread);
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);

	return !_is_in_isr() && _must_switch_threads();
   29190:	b98b      	cbnz	r3, 291b6 <do_sem_give+0x10a>
	return _is_preempt(_current) && __must_switch_threads();
   29192:	4a0b      	ldr	r2, [pc, #44]	; (291c0 <do_sem_give+0x114>)
   29194:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   29196:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   29198:	2a7f      	cmp	r2, #127	; 0x7f
   2919a:	d905      	bls.n	291a8 <do_sem_give+0xfc>
}
   2919c:	4618      	mov	r0, r3
   2919e:	bd10      	pop	{r4, pc}
   291a0:	2300      	movs	r3, #0
   291a2:	e7f5      	b.n	29190 <do_sem_give+0xe4>
   291a4:	2301      	movs	r3, #1
   291a6:	e7f3      	b.n	29190 <do_sem_give+0xe4>
   291a8:	f7ff fe1e 	bl	28de8 <__must_switch_threads>
   291ac:	4603      	mov	r3, r0
   291ae:	2800      	cmp	r0, #0
   291b0:	d0f4      	beq.n	2919c <do_sem_give+0xf0>
   291b2:	2301      	movs	r3, #1
   291b4:	e7f2      	b.n	2919c <do_sem_give+0xf0>
	return !_is_in_isr() && _must_switch_threads();
   291b6:	2300      	movs	r3, #0
   291b8:	e7f0      	b.n	2919c <do_sem_give+0xf0>
   291ba:	bf00      	nop
   291bc:	20002c60 	.word	0x20002c60
   291c0:	20002878 	.word	0x20002878
   291c4:	e000ed00 	.word	0xe000ed00

000291c8 <_impl_k_sem_init>:
	sem->count = initial_count;
   291c8:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   291ca:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   291cc:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   291ce:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   291d0:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   291d4:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   291d6:	6143      	str	r3, [r0, #20]
   291d8:	4770      	bx	lr

000291da <_impl_k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   291da:	b510      	push	{r4, lr}
	__asm__ volatile(
   291dc:	f04f 0320 	mov.w	r3, #32
   291e0:	f3ef 8411 	mrs	r4, BASEPRI
   291e4:	f383 8811 	msr	BASEPRI, r3
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   291e8:	f7ff ff60 	bl	290ac <do_sem_give>
   291ec:	b910      	cbnz	r0, 291f4 <_impl_k_sem_give+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   291ee:	f384 8811 	msr	BASEPRI, r4
   291f2:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   291f4:	f7ff fe66 	bl	28ec4 <_update_time_slice_before_swap>
	return __swap(key);
   291f8:	4620      	mov	r0, r4
   291fa:	f7fe f9a9 	bl	27550 <__swap>
   291fe:	bd10      	pop	{r4, pc}

00029200 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   29200:	b510      	push	{r4, lr}
	__asm__ volatile(
   29202:	f04f 0320 	mov.w	r3, #32
   29206:	f3ef 8411 	mrs	r4, BASEPRI
   2920a:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   2920e:	6883      	ldr	r3, [r0, #8]
   29210:	b12b      	cbz	r3, 2921e <_impl_k_sem_take+0x1e>
		sem->count--;
   29212:	3b01      	subs	r3, #1
   29214:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29216:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   2921a:	2000      	movs	r0, #0
   2921c:	bd10      	pop	{r4, pc}
	}

	if (timeout == K_NO_WAIT) {
   2921e:	b139      	cbz	r1, 29230 <_impl_k_sem_take+0x30>
		irq_unlock(key);
		return -EBUSY;
	}

	_pend_current_thread(&sem->wait_q, timeout);
   29220:	f7ff fdd2 	bl	28dc8 <_pend_current_thread>
	_update_time_slice_before_swap();
   29224:	f7ff fe4e 	bl	28ec4 <_update_time_slice_before_swap>
	return __swap(key);
   29228:	4620      	mov	r0, r4
   2922a:	f7fe f991 	bl	27550 <__swap>

	return _Swap(key);
}
   2922e:	bd10      	pop	{r4, pc}
   29230:	f384 8811 	msr	BASEPRI, r4
		return -EBUSY;
   29234:	f06f 000f 	mvn.w	r0, #15
   29238:	bd10      	pop	{r4, pc}
	...

0002923c <handle_time_slicing>:
 *   in this function and at thread level
 * - _time_slice_duration does not have to be protected, since it can only
 *   change at thread level
 */
static void handle_time_slicing(s32_t ticks)
{
   2923c:	b538      	push	{r3, r4, r5, lr}
   2923e:	4604      	mov	r4, r0
#ifdef CONFIG_TICKLESS_KERNEL
	next_ts = 0;
#endif
	if (!_is_thread_time_slicing(_current)) {
   29240:	4b0f      	ldr	r3, [pc, #60]	; (29280 <handle_time_slicing+0x44>)
   29242:	6898      	ldr	r0, [r3, #8]
   29244:	f7ff fe16 	bl	28e74 <_is_thread_time_slicing>
   29248:	b150      	cbz	r0, 29260 <handle_time_slicing+0x24>
	return (u64_t)ticks * _ms_per_tick;
   2924a:	00a2      	lsls	r2, r4, #2
   2924c:	1912      	adds	r2, r2, r4
   2924e:	1892      	adds	r2, r2, r2
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
   29250:	490c      	ldr	r1, [pc, #48]	; (29284 <handle_time_slicing+0x48>)
   29252:	680b      	ldr	r3, [r1, #0]
   29254:	441a      	add	r2, r3
   29256:	600a      	str	r2, [r1, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   29258:	4b0b      	ldr	r3, [pc, #44]	; (29288 <handle_time_slicing+0x4c>)
   2925a:	681b      	ldr	r3, [r3, #0]
   2925c:	429a      	cmp	r2, r3
   2925e:	da00      	bge.n	29262 <handle_time_slicing+0x26>
   29260:	bd38      	pop	{r3, r4, r5, pc}

		unsigned int key;

		_time_slice_elapsed = 0;
   29262:	2200      	movs	r2, #0
   29264:	600a      	str	r2, [r1, #0]
	__asm__ volatile(
   29266:	f04f 0320 	mov.w	r3, #32
   2926a:	f3ef 8411 	mrs	r4, BASEPRI
   2926e:	f383 8811 	msr	BASEPRI, r3

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
   29272:	4b03      	ldr	r3, [pc, #12]	; (29280 <handle_time_slicing+0x44>)
   29274:	6898      	ldr	r0, [r3, #8]
   29276:	f7ff fdcd 	bl	28e14 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2927a:	f384 8811 	msr	BASEPRI, r4
   2927e:	e7ef      	b.n	29260 <handle_time_slicing+0x24>
   29280:	20002878 	.word	0x20002878
   29284:	20002c64 	.word	0x20002c64
   29288:	20002998 	.word	0x20002998

0002928c <_tick_get_32>:
	return (u32_t)_sys_clock_tick_count;
   2928c:	4b01      	ldr	r3, [pc, #4]	; (29294 <_tick_get_32+0x8>)
   2928e:	e9d3 0100 	ldrd	r0, r1, [r3]
}
   29292:	4770      	bx	lr
   29294:	20002c68 	.word	0x20002c68

00029298 <_impl_k_uptime_get_32>:
{
   29298:	b538      	push	{r3, r4, r5, lr}
	return __ticks_to_ms(_tick_get_32());
   2929a:	f7ff fff7 	bl	2928c <_tick_get_32>
   2929e:	0082      	lsls	r2, r0, #2
   292a0:	1810      	adds	r0, r2, r0
   292a2:	1800      	adds	r0, r0, r0
}
   292a4:	bd38      	pop	{r3, r4, r5, pc}
	...

000292a8 <_tick_get>:
	__asm__ volatile(
   292a8:	f04f 0220 	mov.w	r2, #32
   292ac:	f3ef 8311 	mrs	r3, BASEPRI
   292b0:	f382 8811 	msr	BASEPRI, r2
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   292b4:	4a02      	ldr	r2, [pc, #8]	; (292c0 <_tick_get+0x18>)
   292b6:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   292ba:	f383 8811 	msr	BASEPRI, r3
}
   292be:	4770      	bx	lr
   292c0:	20002c68 	.word	0x20002c68

000292c4 <_impl_k_uptime_get>:
{
   292c4:	b510      	push	{r4, lr}
	return __ticks_to_ms(_tick_get());
   292c6:	f7ff ffef 	bl	292a8 <_tick_get>
   292ca:	008c      	lsls	r4, r1, #2
   292cc:	0082      	lsls	r2, r0, #2
   292ce:	ea44 7390 	orr.w	r3, r4, r0, lsr #30
   292d2:	1880      	adds	r0, r0, r2
   292d4:	4159      	adcs	r1, r3
   292d6:	1800      	adds	r0, r0, r0
   292d8:	4149      	adcs	r1, r1
}
   292da:	bd10      	pop	{r4, pc}

000292dc <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   292dc:	b570      	push	{r4, r5, r6, lr}
   292de:	b082      	sub	sp, #8
   292e0:	4605      	mov	r5, r0
	__asm__ volatile(
   292e2:	f04f 0320 	mov.w	r3, #32
   292e6:	f3ef 8011 	mrs	r0, BASEPRI
   292ea:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   292ee:	496a      	ldr	r1, [pc, #424]	; (29498 <_nano_sys_clock_tick_announce+0x1bc>)
   292f0:	e9d1 2300 	ldrd	r2, r3, [r1]
   292f4:	1952      	adds	r2, r2, r5
   292f6:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   292fa:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   292fe:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   29302:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
   29306:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
   2930a:	f04f 0320 	mov.w	r3, #32
   2930e:	f3ef 8111 	mrs	r1, BASEPRI
   29312:	f383 8811 	msr	BASEPRI, r3
   29316:	4608      	mov	r0, r1
	return list->head == list;
   29318:	4b60      	ldr	r3, [pc, #384]	; (2949c <_nano_sys_clock_tick_announce+0x1c0>)
   2931a:	f853 2f0c 	ldr.w	r2, [r3, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2931e:	429a      	cmp	r2, r3
   29320:	d02b      	beq.n	2937a <_nano_sys_clock_tick_announce+0x9e>
	if (!head) {
   29322:	b362      	cbz	r2, 2937e <_nano_sys_clock_tick_announce+0xa2>
	head->delta_ticks_from_prev -= ticks;
   29324:	6913      	ldr	r3, [r2, #16]
   29326:	1b5b      	subs	r3, r3, r5
   29328:	6113      	str	r3, [r2, #16]
	sys_dnode_t *next = &head->node;
   2932a:	4613      	mov	r3, r2
	_handling_timeouts = 1;
   2932c:	2101      	movs	r1, #1
   2932e:	4a5c      	ldr	r2, [pc, #368]	; (294a0 <_nano_sys_clock_tick_announce+0x1c4>)
   29330:	6011      	str	r1, [r2, #0]
	while (timeout && timeout->delta_ticks_from_prev == 0) {
   29332:	b33b      	cbz	r3, 29384 <_nano_sys_clock_tick_announce+0xa8>
   29334:	691a      	ldr	r2, [r3, #16]
   29336:	bb2a      	cbnz	r2, 29384 <_nano_sys_clock_tick_announce+0xa8>
	node->prev->next = node->next;
   29338:	685a      	ldr	r2, [r3, #4]
   2933a:	6819      	ldr	r1, [r3, #0]
   2933c:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   2933e:	681a      	ldr	r2, [r3, #0]
   29340:	6859      	ldr	r1, [r3, #4]
   29342:	6051      	str	r1, [r2, #4]
	node->next = list->head;
   29344:	aa02      	add	r2, sp, #8
   29346:	f852 1d08 	ldr.w	r1, [r2, #-8]!
   2934a:	6019      	str	r1, [r3, #0]
	node->prev = list;
   2934c:	605a      	str	r2, [r3, #4]
	list->head->prev = node;
   2934e:	9a00      	ldr	r2, [sp, #0]
   29350:	6053      	str	r3, [r2, #4]
	list->head = node;
   29352:	9300      	str	r3, [sp, #0]
		timeout->delta_ticks_from_prev = _EXPIRED;
   29354:	f06f 0201 	mvn.w	r2, #1
   29358:	611a      	str	r2, [r3, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2935a:	f380 8811 	msr	BASEPRI, r0
	__asm__ volatile(
   2935e:	f04f 0220 	mov.w	r2, #32
   29362:	f3ef 8311 	mrs	r3, BASEPRI
   29366:	f382 8811 	msr	BASEPRI, r2
   2936a:	4618      	mov	r0, r3
	return list->head == list;
   2936c:	4a4b      	ldr	r2, [pc, #300]	; (2949c <_nano_sys_clock_tick_announce+0x1c0>)
   2936e:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29372:	4293      	cmp	r3, r2
   29374:	d1dd      	bne.n	29332 <_nano_sys_clock_tick_announce+0x56>
   29376:	2300      	movs	r3, #0
   29378:	e7db      	b.n	29332 <_nano_sys_clock_tick_announce+0x56>
   2937a:	2200      	movs	r2, #0
   2937c:	e7d1      	b.n	29322 <_nano_sys_clock_tick_announce+0x46>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2937e:	f381 8811 	msr	BASEPRI, r1
   29382:	e084      	b.n	2948e <_nano_sys_clock_tick_announce+0x1b2>
   29384:	f380 8811 	msr	BASEPRI, r0
	return list->head == list;
   29388:	aa02      	add	r2, sp, #8
   2938a:	f852 3d08 	ldr.w	r3, [r2, #-8]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2938e:	4293      	cmp	r3, r2
   29390:	d00d      	beq.n	293ae <_nano_sys_clock_tick_announce+0xd2>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   29392:	b193      	cbz	r3, 293ba <_nano_sys_clock_tick_announce+0xde>
   29394:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29396:	b163      	cbz	r3, 293b2 <_nano_sys_clock_tick_announce+0xd6>
	return (node == list->tail) ? NULL : node->next;
   29398:	9901      	ldr	r1, [sp, #4]
   2939a:	428b      	cmp	r3, r1
   2939c:	d00b      	beq.n	293b6 <_nano_sys_clock_tick_announce+0xda>
   2939e:	6819      	ldr	r1, [r3, #0]
   293a0:	b169      	cbz	r1, 293be <_nano_sys_clock_tick_announce+0xe2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   293a2:	b172      	cbz	r2, 293c2 <_nano_sys_clock_tick_announce+0xe6>
	return (node == list->tail) ? NULL : node->next;
   293a4:	9901      	ldr	r1, [sp, #4]
   293a6:	428a      	cmp	r2, r1
   293a8:	d00d      	beq.n	293c6 <_nano_sys_clock_tick_announce+0xea>
   293aa:	681c      	ldr	r4, [r3, #0]
   293ac:	e027      	b.n	293fe <_nano_sys_clock_tick_announce+0x122>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   293ae:	2300      	movs	r3, #0
   293b0:	e7ef      	b.n	29392 <_nano_sys_clock_tick_announce+0xb6>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   293b2:	4619      	mov	r1, r3
   293b4:	e7f4      	b.n	293a0 <_nano_sys_clock_tick_announce+0xc4>
	return (node == list->tail) ? NULL : node->next;
   293b6:	2100      	movs	r1, #0
   293b8:	e7f2      	b.n	293a0 <_nano_sys_clock_tick_announce+0xc4>
   293ba:	461c      	mov	r4, r3
   293bc:	e01f      	b.n	293fe <_nano_sys_clock_tick_announce+0x122>
   293be:	2400      	movs	r4, #0
   293c0:	e01d      	b.n	293fe <_nano_sys_clock_tick_announce+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   293c2:	2400      	movs	r4, #0
   293c4:	e01b      	b.n	293fe <_nano_sys_clock_tick_announce+0x122>
	return (node == list->tail) ? NULL : node->next;
   293c6:	2400      	movs	r4, #0
   293c8:	e019      	b.n	293fe <_nano_sys_clock_tick_announce+0x122>
	return !(_is_thread_prevented_from_running(thread) ||
   293ca:	2301      	movs	r3, #1
   293cc:	e000      	b.n	293d0 <_nano_sys_clock_tick_announce+0xf4>
   293ce:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   293d0:	2b00      	cmp	r3, #0
   293d2:	d142      	bne.n	2945a <_nano_sys_clock_tick_announce+0x17e>
   293d4:	f386 8811 	msr	BASEPRI, r6
   293d8:	2c00      	cmp	r4, #0
   293da:	d04d      	beq.n	29478 <_nano_sys_clock_tick_announce+0x19c>
   293dc:	4623      	mov	r3, r4
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   293de:	2c00      	cmp	r4, #0
   293e0:	d046      	beq.n	29470 <_nano_sys_clock_tick_announce+0x194>
	return (node == list->tail) ? NULL : node->next;
   293e2:	9a01      	ldr	r2, [sp, #4]
   293e4:	4294      	cmp	r4, r2
   293e6:	d045      	beq.n	29474 <_nano_sys_clock_tick_announce+0x198>
   293e8:	6822      	ldr	r2, [r4, #0]
   293ea:	2a00      	cmp	r2, #0
   293ec:	d046      	beq.n	2947c <_nano_sys_clock_tick_announce+0x1a0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   293ee:	2b00      	cmp	r3, #0
   293f0:	d046      	beq.n	29480 <_nano_sys_clock_tick_announce+0x1a4>
	return (node == list->tail) ? NULL : node->next;
   293f2:	9a01      	ldr	r2, [sp, #4]
   293f4:	4293      	cmp	r3, r2
   293f6:	d045      	beq.n	29484 <_nano_sys_clock_tick_announce+0x1a8>
   293f8:	6822      	ldr	r2, [r4, #0]
   293fa:	4623      	mov	r3, r4
   293fc:	4614      	mov	r4, r2
   293fe:	2b00      	cmp	r3, #0
   29400:	d042      	beq.n	29488 <_nano_sys_clock_tick_announce+0x1ac>
	node->prev->next = node->next;
   29402:	685a      	ldr	r2, [r3, #4]
   29404:	6819      	ldr	r1, [r3, #0]
   29406:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   29408:	681a      	ldr	r2, [r3, #0]
   2940a:	6859      	ldr	r1, [r3, #4]
   2940c:	6051      	str	r1, [r2, #4]
	struct k_thread *thread = timeout->thread;
   2940e:	6898      	ldr	r0, [r3, #8]
	__asm__ volatile(
   29410:	f04f 0220 	mov.w	r2, #32
   29414:	f3ef 8611 	mrs	r6, BASEPRI
   29418:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   2941c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29420:	611a      	str	r2, [r3, #16]
	if (thread) {
   29422:	b1e8      	cbz	r0, 29460 <_nano_sys_clock_tick_announce+0x184>
	if (timeout_obj->wait_q) {
   29424:	68db      	ldr	r3, [r3, #12]
   29426:	b15b      	cbz	r3, 29440 <_nano_sys_clock_tick_announce+0x164>
	node->prev->next = node->next;
   29428:	6843      	ldr	r3, [r0, #4]
   2942a:	6802      	ldr	r2, [r0, #0]
   2942c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2942e:	6803      	ldr	r3, [r0, #0]
   29430:	6842      	ldr	r2, [r0, #4]
   29432:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29434:	7a43      	ldrb	r3, [r0, #9]
   29436:	f023 0302 	bic.w	r3, r3, #2
   2943a:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   2943c:	2300      	movs	r3, #0
   2943e:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29440:	7a43      	ldrb	r3, [r0, #9]
   29442:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29446:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29448:	f013 0f1b 	tst.w	r3, #27
   2944c:	d1bf      	bne.n	293ce <_nano_sys_clock_tick_announce+0xf2>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2944e:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29454:	d0b9      	beq.n	293ca <_nano_sys_clock_tick_announce+0xee>
   29456:	2300      	movs	r3, #0
   29458:	e7ba      	b.n	293d0 <_nano_sys_clock_tick_announce+0xf4>
		_add_thread_to_ready_q(thread);
   2945a:	f7ff fba1 	bl	28ba0 <_add_thread_to_ready_q>
   2945e:	e7b9      	b.n	293d4 <_nano_sys_clock_tick_announce+0xf8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29460:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   29464:	695a      	ldr	r2, [r3, #20]
   29466:	2a00      	cmp	r2, #0
   29468:	d0b6      	beq.n	293d8 <_nano_sys_clock_tick_announce+0xfc>
			timeout->func(timeout);
   2946a:	4618      	mov	r0, r3
   2946c:	4790      	blx	r2
   2946e:	e7b3      	b.n	293d8 <_nano_sys_clock_tick_announce+0xfc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29470:	4622      	mov	r2, r4
   29472:	e7ba      	b.n	293ea <_nano_sys_clock_tick_announce+0x10e>
	return (node == list->tail) ? NULL : node->next;
   29474:	2200      	movs	r2, #0
   29476:	e7b8      	b.n	293ea <_nano_sys_clock_tick_announce+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   29478:	4622      	mov	r2, r4
   2947a:	e7be      	b.n	293fa <_nano_sys_clock_tick_announce+0x11e>
   2947c:	2200      	movs	r2, #0
   2947e:	e7bc      	b.n	293fa <_nano_sys_clock_tick_announce+0x11e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29480:	2200      	movs	r2, #0
   29482:	e7ba      	b.n	293fa <_nano_sys_clock_tick_announce+0x11e>
	return (node == list->tail) ? NULL : node->next;
   29484:	2200      	movs	r2, #0
   29486:	e7b8      	b.n	293fa <_nano_sys_clock_tick_announce+0x11e>
	_handling_timeouts = 0;
   29488:	2200      	movs	r2, #0
   2948a:	4b05      	ldr	r3, [pc, #20]	; (294a0 <_nano_sys_clock_tick_announce+0x1c4>)
   2948c:	601a      	str	r2, [r3, #0]
	irq_unlock(key);
#endif
	handle_timeouts(ticks);

	/* time slicing is basically handled like just yet another timeout */
	handle_time_slicing(ticks);
   2948e:	4628      	mov	r0, r5
   29490:	f7ff fed4 	bl	2923c <handle_time_slicing>
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   29494:	b002      	add	sp, #8
   29496:	bd70      	pop	{r4, r5, r6, pc}
   29498:	20002c68 	.word	0x20002c68
   2949c:	20002878 	.word	0x20002878
   294a0:	20002c60 	.word	0x20002c60

000294a4 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   294a4:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   294a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   294aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   294ae:	4903      	ldr	r1, [pc, #12]	; (294bc <k_sys_work_q_init+0x18>)
   294b0:	4803      	ldr	r0, [pc, #12]	; (294c0 <k_sys_work_q_init+0x1c>)
   294b2:	f000 fc49 	bl	29d48 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   294b6:	2000      	movs	r0, #0
   294b8:	bd08      	pop	{r3, pc}
   294ba:	bf00      	nop
   294bc:	2000b560 	.word	0x2000b560
   294c0:	20002c70 	.word	0x20002c70

000294c4 <k_is_in_isr>:
   294c4:	f3ef 8305 	mrs	r3, IPSR
   294c8:	2b0d      	cmp	r3, #13
   294ca:	d807      	bhi.n	294dc <k_is_in_isr+0x18>
   294cc:	b143      	cbz	r3, 294e0 <k_is_in_isr+0x1c>
   294ce:	4b06      	ldr	r3, [pc, #24]	; (294e8 <k_is_in_isr+0x24>)
   294d0:	685b      	ldr	r3, [r3, #4]
   294d2:	f413 6f00 	tst.w	r3, #2048	; 0x800
   294d6:	d005      	beq.n	294e4 <k_is_in_isr+0x20>
   294d8:	2000      	movs	r0, #0
   294da:	4770      	bx	lr
   294dc:	2001      	movs	r0, #1
   294de:	4770      	bx	lr
   294e0:	2000      	movs	r0, #0
   294e2:	4770      	bx	lr
   294e4:	2001      	movs	r0, #1


int k_is_in_isr(void)
{
	return _is_in_isr();
}
   294e6:	4770      	bx	lr
   294e8:	e000ed00 	.word	0xe000ed00

000294ec <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
   294ec:	4b02      	ldr	r3, [pc, #8]	; (294f8 <_is_thread_essential+0xc>)
   294ee:	689b      	ldr	r3, [r3, #8]
   294f0:	7a18      	ldrb	r0, [r3, #8]
}
   294f2:	f000 0001 	and.w	r0, r0, #1
   294f6:	4770      	bx	lr
   294f8:	20002878 	.word	0x20002878

000294fc <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   294fc:	b508      	push	{r3, lr}
   294fe:	4604      	mov	r4, r0
   29500:	4608      	mov	r0, r1
   29502:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   29504:	461a      	mov	r2, r3
   29506:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   29508:	f7ff fcae 	bl	28e68 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   2950c:	f7fe facc 	bl	27aa8 <_impl_k_thread_abort>

00029510 <_impl_k_thread_start>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
void _impl_k_thread_start(struct k_thread *thread)
{
   29510:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   29512:	f04f 0320 	mov.w	r3, #32
   29516:	f3ef 8411 	mrs	r4, BASEPRI
   2951a:	f383 8811 	msr	BASEPRI, r3
	return !(thread->base.thread_state & _THREAD_PRESTART);
   2951e:	7a43      	ldrb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	if (_has_thread_started(thread)) {
   29520:	f013 0f04 	tst.w	r3, #4
   29524:	d00b      	beq.n	2953e <_impl_k_thread_start+0x2e>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29526:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2952a:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2952c:	f013 0f1b 	tst.w	r3, #27
   29530:	d10a      	bne.n	29548 <_impl_k_thread_start+0x38>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29532:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29538:	d004      	beq.n	29544 <_impl_k_thread_start+0x34>
   2953a:	2500      	movs	r5, #0
   2953c:	e005      	b.n	2954a <_impl_k_thread_start+0x3a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2953e:	f384 8811 	msr	BASEPRI, r4
   29542:	bd38      	pop	{r3, r4, r5, pc}
   29544:	2501      	movs	r5, #1
   29546:	e000      	b.n	2954a <_impl_k_thread_start+0x3a>
   29548:	2500      	movs	r5, #0
		return;
	}

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
   2954a:	b915      	cbnz	r5, 29552 <_impl_k_thread_start+0x42>
   2954c:	f384 8811 	msr	BASEPRI, r4
   29550:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   29552:	f7ff fb25 	bl	28ba0 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
   29556:	4b0a      	ldr	r3, [pc, #40]	; (29580 <_impl_k_thread_start+0x70>)
   29558:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2955a:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   2955c:	2b7f      	cmp	r3, #127	; 0x7f
   2955e:	d908      	bls.n	29572 <_impl_k_thread_start+0x62>
   29560:	2300      	movs	r3, #0
		if (_must_switch_threads()) {
   29562:	2b00      	cmp	r3, #0
   29564:	d0f2      	beq.n	2954c <_impl_k_thread_start+0x3c>
	_update_time_slice_before_swap();
   29566:	f7ff fcad 	bl	28ec4 <_update_time_slice_before_swap>
	return __swap(key);
   2956a:	4620      	mov	r0, r4
   2956c:	f7fd fff0 	bl	27550 <__swap>
   29570:	bd38      	pop	{r3, r4, r5, pc}
   29572:	f7ff fc39 	bl	28de8 <__must_switch_threads>
   29576:	4603      	mov	r3, r0
   29578:	2800      	cmp	r0, #0
   2957a:	d0f2      	beq.n	29562 <_impl_k_thread_start+0x52>
   2957c:	462b      	mov	r3, r5
   2957e:	e7f0      	b.n	29562 <_impl_k_thread_start+0x52>
   29580:	20002878 	.word	0x20002878

00029584 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
   29584:	b570      	push	{r4, r5, r6, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   29586:	b1d1      	cbz	r1, 295be <schedule_new_thread+0x3a>
   29588:	460b      	mov	r3, r1
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   2958a:	3309      	adds	r3, #9
   2958c:	4a47      	ldr	r2, [pc, #284]	; (296ac <schedule_new_thread+0x128>)
   2958e:	fba2 2303 	umull	r2, r3, r2, r3
   29592:	08db      	lsrs	r3, r3, #3
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   29594:	3301      	adds	r3, #1
	__asm__ volatile(
   29596:	f04f 0220 	mov.w	r2, #32
   2959a:	f3ef 8511 	mrs	r5, BASEPRI
   2959e:	f382 8811 	msr	BASEPRI, r2
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   295a2:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   295a6:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   295a8:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   295aa:	2200      	movs	r2, #0
   295ac:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   295ae:	b14b      	cbz	r3, 295c4 <schedule_new_thread+0x40>
	return list->head == list;
   295b0:	4a3f      	ldr	r2, [pc, #252]	; (296b0 <schedule_new_thread+0x12c>)
   295b2:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   295b6:	4293      	cmp	r3, r2
   295b8:	d152      	bne.n	29660 <schedule_new_thread+0xdc>
   295ba:	2300      	movs	r3, #0
   295bc:	e050      	b.n	29660 <schedule_new_thread+0xdc>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   295be:	f7ff ffa7 	bl	29510 <_impl_k_thread_start>
   295c2:	bd70      	pop	{r4, r5, r6, pc}
   295c4:	f04f 0320 	mov.w	r3, #32
   295c8:	f3ef 8611 	mrs	r6, BASEPRI
   295cc:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   295d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   295d4:	6123      	str	r3, [r4, #16]
	if (thread) {
   295d6:	b320      	cbz	r0, 29622 <schedule_new_thread+0x9e>
	if (timeout_obj->wait_q) {
   295d8:	68e3      	ldr	r3, [r4, #12]
   295da:	b15b      	cbz	r3, 295f4 <schedule_new_thread+0x70>
	node->prev->next = node->next;
   295dc:	6843      	ldr	r3, [r0, #4]
   295de:	6802      	ldr	r2, [r0, #0]
   295e0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   295e2:	6803      	ldr	r3, [r0, #0]
   295e4:	6842      	ldr	r2, [r0, #4]
   295e6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   295e8:	7a43      	ldrb	r3, [r0, #9]
   295ea:	f023 0302 	bic.w	r3, r3, #2
   295ee:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   295f0:	2300      	movs	r3, #0
   295f2:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   295f4:	7a43      	ldrb	r3, [r0, #9]
   295f6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   295fa:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   295fc:	f013 0f1b 	tst.w	r3, #27
   29600:	d107      	bne.n	29612 <schedule_new_thread+0x8e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29602:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29608:	d001      	beq.n	2960e <schedule_new_thread+0x8a>
   2960a:	2300      	movs	r3, #0
   2960c:	e002      	b.n	29614 <schedule_new_thread+0x90>
   2960e:	2301      	movs	r3, #1
   29610:	e000      	b.n	29614 <schedule_new_thread+0x90>
   29612:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29614:	b913      	cbnz	r3, 2961c <schedule_new_thread+0x98>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29616:	f386 8811 	msr	BASEPRI, r6
   2961a:	e044      	b.n	296a6 <schedule_new_thread+0x122>
		_add_thread_to_ready_q(thread);
   2961c:	f7ff fac0 	bl	28ba0 <_add_thread_to_ready_q>
   29620:	e7f9      	b.n	29616 <schedule_new_thread+0x92>
   29622:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   29626:	6963      	ldr	r3, [r4, #20]
   29628:	2b00      	cmp	r3, #0
   2962a:	d03c      	beq.n	296a6 <schedule_new_thread+0x122>
			timeout->func(timeout);
   2962c:	4620      	mov	r0, r4
   2962e:	4798      	blx	r3
   29630:	e039      	b.n	296a6 <schedule_new_thread+0x122>
			in_q->delta_ticks_from_prev -= *delta;
   29632:	1a8a      	subs	r2, r1, r2
   29634:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29636:	b133      	cbz	r3, 29646 <schedule_new_thread+0xc2>
		node->prev = insert_point->prev;
   29638:	685a      	ldr	r2, [r3, #4]
   2963a:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   2963c:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   2963e:	685a      	ldr	r2, [r3, #4]
   29640:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   29642:	605c      	str	r4, [r3, #4]
   29644:	e02f      	b.n	296a6 <schedule_new_thread+0x122>
	node->next = list;
   29646:	4b1b      	ldr	r3, [pc, #108]	; (296b4 <schedule_new_thread+0x130>)
   29648:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   2964a:	685a      	ldr	r2, [r3, #4]
   2964c:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2964e:	685a      	ldr	r2, [r3, #4]
   29650:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29652:	605c      	str	r4, [r3, #4]
   29654:	e027      	b.n	296a6 <schedule_new_thread+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29656:	4619      	mov	r1, r3
   29658:	e011      	b.n	2967e <schedule_new_thread+0xfa>
	return (node == list->tail) ? NULL : node->next;
   2965a:	2100      	movs	r1, #0
   2965c:	e00f      	b.n	2967e <schedule_new_thread+0xfa>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2965e:	2300      	movs	r3, #0
   29660:	b1d3      	cbz	r3, 29698 <schedule_new_thread+0x114>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29662:	6922      	ldr	r2, [r4, #16]
   29664:	6919      	ldr	r1, [r3, #16]
   29666:	428a      	cmp	r2, r1
   29668:	dde3      	ble.n	29632 <schedule_new_thread+0xae>
		*delta -= in_q->delta_ticks_from_prev;
   2966a:	1a52      	subs	r2, r2, r1
   2966c:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2966e:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29670:	2b00      	cmp	r3, #0
   29672:	d0f0      	beq.n	29656 <schedule_new_thread+0xd2>
	return (node == list->tail) ? NULL : node->next;
   29674:	490e      	ldr	r1, [pc, #56]	; (296b0 <schedule_new_thread+0x12c>)
   29676:	6909      	ldr	r1, [r1, #16]
   29678:	428b      	cmp	r3, r1
   2967a:	d0ee      	beq.n	2965a <schedule_new_thread+0xd6>
   2967c:	6819      	ldr	r1, [r3, #0]
   2967e:	2900      	cmp	r1, #0
   29680:	d0ed      	beq.n	2965e <schedule_new_thread+0xda>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29682:	b12a      	cbz	r2, 29690 <schedule_new_thread+0x10c>
	return (node == list->tail) ? NULL : node->next;
   29684:	490a      	ldr	r1, [pc, #40]	; (296b0 <schedule_new_thread+0x12c>)
   29686:	6909      	ldr	r1, [r1, #16]
   29688:	428a      	cmp	r2, r1
   2968a:	d003      	beq.n	29694 <schedule_new_thread+0x110>
   2968c:	681b      	ldr	r3, [r3, #0]
   2968e:	e7e7      	b.n	29660 <schedule_new_thread+0xdc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29690:	2300      	movs	r3, #0
   29692:	e7e5      	b.n	29660 <schedule_new_thread+0xdc>
	return (node == list->tail) ? NULL : node->next;
   29694:	2300      	movs	r3, #0
   29696:	e7e3      	b.n	29660 <schedule_new_thread+0xdc>
	node->next = list;
   29698:	4b06      	ldr	r3, [pc, #24]	; (296b4 <schedule_new_thread+0x130>)
   2969a:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   2969c:	685a      	ldr	r2, [r3, #4]
   2969e:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   296a0:	685a      	ldr	r2, [r3, #4]
   296a2:	6014      	str	r4, [r2, #0]
	list->tail = node;
   296a4:	605c      	str	r4, [r3, #4]
   296a6:	f385 8811 	msr	BASEPRI, r5
   296aa:	bd70      	pop	{r4, r5, r6, pc}
   296ac:	cccccccd 	.word	0xcccccccd
   296b0:	20002878 	.word	0x20002878
   296b4:	20002884 	.word	0x20002884

000296b8 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   296b8:	b510      	push	{r4, lr}
   296ba:	b086      	sub	sp, #24
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   296bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   296be:	9404      	str	r4, [sp, #16]
   296c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   296c2:	9403      	str	r4, [sp, #12]
   296c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   296c6:	9402      	str	r4, [sp, #8]
   296c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   296ca:	9401      	str	r4, [sp, #4]
   296cc:	9c08      	ldr	r4, [sp, #32]
   296ce:	9400      	str	r4, [sp, #0]
   296d0:	f7fe f940 	bl	27954 <_new_thread>

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
   296d4:	b006      	add	sp, #24
   296d6:	bd10      	pop	{r4, pc}

000296d8 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   296d8:	b570      	push	{r4, r5, r6, lr}
   296da:	b086      	sub	sp, #24
   296dc:	4604      	mov	r4, r0
   296de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   296e0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   296e2:	9604      	str	r6, [sp, #16]
   296e4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   296e6:	9603      	str	r6, [sp, #12]
   296e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   296ea:	9602      	str	r6, [sp, #8]
   296ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   296ee:	9601      	str	r6, [sp, #4]
   296f0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   296f2:	9600      	str	r6, [sp, #0]
   296f4:	f7ff ffe0 	bl	296b8 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   296f8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   296fc:	d003      	beq.n	29706 <_impl_k_thread_create+0x2e>
		schedule_new_thread(new_thread, delay);
   296fe:	4629      	mov	r1, r5
   29700:	4620      	mov	r0, r4
   29702:	f7ff ff3f 	bl	29584 <schedule_new_thread>
	}
	return new_thread;
}
   29706:	4620      	mov	r0, r4
   29708:	b006      	add	sp, #24
   2970a:	bd70      	pop	{r4, r5, r6, pc}

0002970c <_k_thread_single_abort>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
   2970c:	b510      	push	{r4, lr}
   2970e:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   29710:	6d03      	ldr	r3, [r0, #80]	; 0x50
   29712:	b103      	cbz	r3, 29716 <_k_thread_single_abort+0xa>
		thread->fn_abort();
   29714:	4798      	blx	r3
	u8_t state = thread->base.thread_state;
   29716:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29718:	f013 0f1f 	tst.w	r3, #31
   2971c:	d107      	bne.n	2972e <_k_thread_single_abort+0x22>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2971e:	6a22      	ldr	r2, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29720:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29724:	d001      	beq.n	2972a <_k_thread_single_abort+0x1e>
   29726:	2200      	movs	r2, #0
   29728:	e002      	b.n	29730 <_k_thread_single_abort+0x24>
   2972a:	2201      	movs	r2, #1
   2972c:	e000      	b.n	29730 <_k_thread_single_abort+0x24>
   2972e:	2200      	movs	r2, #0
	}

	if (_is_thread_ready(thread)) {
   29730:	bb4a      	cbnz	r2, 29786 <_k_thread_single_abort+0x7a>
		_remove_thread_from_ready_q(thread);
	} else {
		if (_is_thread_pending(thread)) {
   29732:	f013 0f02 	tst.w	r3, #2
   29736:	d009      	beq.n	2974c <_k_thread_single_abort+0x40>
	node->prev->next = node->next;
   29738:	6863      	ldr	r3, [r4, #4]
   2973a:	6822      	ldr	r2, [r4, #0]
   2973c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2973e:	6823      	ldr	r3, [r4, #0]
   29740:	6862      	ldr	r2, [r4, #4]
   29742:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29744:	7a63      	ldrb	r3, [r4, #9]
   29746:	f023 0302 	bic.w	r3, r3, #2
   2974a:	7263      	strb	r3, [r4, #9]
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2974c:	6a21      	ldr	r1, [r4, #32]
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
   2974e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   29752:	d013      	beq.n	2977c <_k_thread_single_abort+0x70>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29754:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   29758:	4a0d      	ldr	r2, [pc, #52]	; (29790 <_k_thread_single_abort+0x84>)
   2975a:	6912      	ldr	r2, [r2, #16]
   2975c:	4293      	cmp	r3, r2
   2975e:	d004      	beq.n	2976a <_k_thread_single_abort+0x5e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29760:	b103      	cbz	r3, 29764 <_k_thread_single_abort+0x58>
	return (node == list->tail) ? NULL : node->next;
   29762:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29764:	691a      	ldr	r2, [r3, #16]
   29766:	440a      	add	r2, r1
   29768:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   2976a:	6963      	ldr	r3, [r4, #20]
   2976c:	6922      	ldr	r2, [r4, #16]
   2976e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29770:	6923      	ldr	r3, [r4, #16]
   29772:	6962      	ldr	r2, [r4, #20]
   29774:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2977a:	6223      	str	r3, [r4, #32]
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   2977c:	7a63      	ldrb	r3, [r4, #9]
   2977e:	f043 0308 	orr.w	r3, r3, #8
   29782:	7263      	strb	r3, [r4, #9]
   29784:	bd10      	pop	{r4, pc}
		_remove_thread_from_ready_q(thread);
   29786:	4620      	mov	r0, r4
   29788:	f7ff fa2a 	bl	28be0 <_remove_thread_from_ready_q>
   2978c:	e7f6      	b.n	2977c <_k_thread_single_abort+0x70>
   2978e:	bf00      	nop
   29790:	20002878 	.word	0x20002878

00029794 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   29794:	b530      	push	{r4, r5, lr}
   29796:	b087      	sub	sp, #28
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   29798:	4c1b      	ldr	r4, [pc, #108]	; (29808 <_init_static_threads+0x74>)
   2979a:	e012      	b.n	297c2 <_init_static_threads+0x2e>
		_setup_new_thread(
   2979c:	6a23      	ldr	r3, [r4, #32]
   2979e:	9304      	str	r3, [sp, #16]
   297a0:	69e3      	ldr	r3, [r4, #28]
   297a2:	9303      	str	r3, [sp, #12]
   297a4:	69a3      	ldr	r3, [r4, #24]
   297a6:	9302      	str	r3, [sp, #8]
   297a8:	6963      	ldr	r3, [r4, #20]
   297aa:	9301      	str	r3, [sp, #4]
   297ac:	6923      	ldr	r3, [r4, #16]
   297ae:	9300      	str	r3, [sp, #0]
   297b0:	68e3      	ldr	r3, [r4, #12]
   297b2:	68a2      	ldr	r2, [r4, #8]
   297b4:	6861      	ldr	r1, [r4, #4]
   297b6:	6820      	ldr	r0, [r4, #0]
   297b8:	f7ff ff7e 	bl	296b8 <_setup_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
   297bc:	6823      	ldr	r3, [r4, #0]
   297be:	64dc      	str	r4, [r3, #76]	; 0x4c
	_FOREACH_STATIC_THREAD(thread_data) {
   297c0:	3430      	adds	r4, #48	; 0x30
   297c2:	4b12      	ldr	r3, [pc, #72]	; (2980c <_init_static_threads+0x78>)
   297c4:	429c      	cmp	r4, r3
   297c6:	d3e9      	bcc.n	2979c <_init_static_threads+0x8>
	--_current->base.sched_locked;
   297c8:	4b11      	ldr	r3, [pc, #68]	; (29810 <_init_static_threads+0x7c>)
   297ca:	689a      	ldr	r2, [r3, #8]
   297cc:	7ad3      	ldrb	r3, [r2, #11]
   297ce:	3b01      	subs	r3, #1
   297d0:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   297d2:	f04f 0320 	mov.w	r3, #32
   297d6:	f3ef 8511 	mrs	r5, BASEPRI
   297da:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   297de:	4c0a      	ldr	r4, [pc, #40]	; (29808 <_init_static_threads+0x74>)
   297e0:	e000      	b.n	297e4 <_init_static_threads+0x50>
   297e2:	3430      	adds	r4, #48	; 0x30
   297e4:	4b09      	ldr	r3, [pc, #36]	; (2980c <_init_static_threads+0x78>)
   297e6:	429c      	cmp	r4, r3
   297e8:	d207      	bcs.n	297fa <_init_static_threads+0x66>
		if (thread_data->init_delay != K_FOREVER) {
   297ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
   297ec:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   297f0:	d0f7      	beq.n	297e2 <_init_static_threads+0x4e>
			schedule_new_thread(thread_data->init_thread,
   297f2:	6820      	ldr	r0, [r4, #0]
   297f4:	f7ff fec6 	bl	29584 <schedule_new_thread>
   297f8:	e7f3      	b.n	297e2 <_init_static_threads+0x4e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   297fa:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
   297fe:	f7ff fb81 	bl	28f04 <k_sched_unlock>
}
   29802:	b007      	add	sp, #28
   29804:	bd30      	pop	{r4, r5, pc}
   29806:	bf00      	nop
   29808:	2000d0f4 	.word	0x2000d0f4
   2980c:	2000d0f4 	.word	0x2000d0f4
   29810:	20002878 	.word	0x20002878

00029814 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   29814:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   29816:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;
   29818:	7281      	strb	r1, [r0, #10]

	thread_base->sched_locked = 0;
   2981a:	2300      	movs	r3, #0
   2981c:	72c3      	strb	r3, [r0, #11]
	t->delta_ticks_from_prev = _INACTIVE;
   2981e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29822:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
   29824:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
   29826:	6183      	str	r3, [r0, #24]
	t->func = func;
   29828:	6243      	str	r3, [r0, #36]	; 0x24
   2982a:	4770      	bx	lr

0002982c <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
   2982c:	b570      	push	{r4, r5, r6, lr}
   2982e:	4604      	mov	r4, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   29830:	6a83      	ldr	r3, [r0, #40]	; 0x28
   29832:	2b00      	cmp	r3, #0
   29834:	f340 8088 	ble.w	29948 <_timer_expiration_handler+0x11c>
	__asm__ volatile(
   29838:	f04f 0320 	mov.w	r3, #32
   2983c:	f3ef 8511 	mrs	r5, BASEPRI
   29840:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
   29844:	f100 0218 	add.w	r2, r0, #24
   29848:	6a83      	ldr	r3, [r0, #40]	; 0x28
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2984a:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   2984c:	2100      	movs	r1, #0
   2984e:	6081      	str	r1, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   29850:	60c2      	str	r2, [r0, #12]
	if (!timeout_in_ticks) {
   29852:	b133      	cbz	r3, 29862 <_timer_expiration_handler+0x36>
	return list->head == list;
   29854:	4a59      	ldr	r2, [pc, #356]	; (299bc <_timer_expiration_handler+0x190>)
   29856:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2985a:	4293      	cmp	r3, r2
   2985c:	d14f      	bne.n	298fe <_timer_expiration_handler+0xd2>
   2985e:	2300      	movs	r3, #0
   29860:	e04d      	b.n	298fe <_timer_expiration_handler+0xd2>
	struct k_thread *thread = timeout->thread;
   29862:	4608      	mov	r0, r1
   29864:	f04f 0320 	mov.w	r3, #32
   29868:	f3ef 8611 	mrs	r6, BASEPRI
   2986c:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   29870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29874:	6123      	str	r3, [r4, #16]
	if (thread) {
   29876:	b319      	cbz	r1, 298c0 <_timer_expiration_handler+0x94>
	if (timeout_obj->wait_q) {
   29878:	68e3      	ldr	r3, [r4, #12]
   2987a:	b153      	cbz	r3, 29892 <_timer_expiration_handler+0x66>
	node->prev->next = node->next;
   2987c:	684b      	ldr	r3, [r1, #4]
   2987e:	680a      	ldr	r2, [r1, #0]
   29880:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29882:	680b      	ldr	r3, [r1, #0]
   29884:	684a      	ldr	r2, [r1, #4]
   29886:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29888:	7a4b      	ldrb	r3, [r1, #9]
   2988a:	f023 0302 	bic.w	r3, r3, #2
   2988e:	724b      	strb	r3, [r1, #9]
		thread->base.timeout.wait_q = NULL;
   29890:	61c1      	str	r1, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29892:	7a43      	ldrb	r3, [r0, #9]
   29894:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29898:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2989a:	f013 0f1b 	tst.w	r3, #27
   2989e:	d107      	bne.n	298b0 <_timer_expiration_handler+0x84>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   298a0:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   298a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   298a6:	d001      	beq.n	298ac <_timer_expiration_handler+0x80>
   298a8:	2300      	movs	r3, #0
   298aa:	e002      	b.n	298b2 <_timer_expiration_handler+0x86>
   298ac:	2301      	movs	r3, #1
   298ae:	e000      	b.n	298b2 <_timer_expiration_handler+0x86>
   298b0:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   298b2:	b913      	cbnz	r3, 298ba <_timer_expiration_handler+0x8e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   298b4:	f386 8811 	msr	BASEPRI, r6
   298b8:	e044      	b.n	29944 <_timer_expiration_handler+0x118>
		_add_thread_to_ready_q(thread);
   298ba:	f7ff f971 	bl	28ba0 <_add_thread_to_ready_q>
   298be:	e7f9      	b.n	298b4 <_timer_expiration_handler+0x88>
   298c0:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   298c4:	6963      	ldr	r3, [r4, #20]
   298c6:	2b00      	cmp	r3, #0
   298c8:	d03c      	beq.n	29944 <_timer_expiration_handler+0x118>
			timeout->func(timeout);
   298ca:	4620      	mov	r0, r4
   298cc:	4798      	blx	r3
   298ce:	e039      	b.n	29944 <_timer_expiration_handler+0x118>
			in_q->delta_ticks_from_prev -= *delta;
   298d0:	1a8a      	subs	r2, r1, r2
   298d2:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   298d4:	b133      	cbz	r3, 298e4 <_timer_expiration_handler+0xb8>
		node->prev = insert_point->prev;
   298d6:	685a      	ldr	r2, [r3, #4]
   298d8:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   298da:	6023      	str	r3, [r4, #0]
		insert_point->prev->next = node;
   298dc:	685a      	ldr	r2, [r3, #4]
   298de:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   298e0:	605c      	str	r4, [r3, #4]
   298e2:	e02f      	b.n	29944 <_timer_expiration_handler+0x118>
	node->next = list;
   298e4:	4b36      	ldr	r3, [pc, #216]	; (299c0 <_timer_expiration_handler+0x194>)
   298e6:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   298e8:	685a      	ldr	r2, [r3, #4]
   298ea:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   298ec:	685a      	ldr	r2, [r3, #4]
   298ee:	6014      	str	r4, [r2, #0]
	list->tail = node;
   298f0:	605c      	str	r4, [r3, #4]
   298f2:	e027      	b.n	29944 <_timer_expiration_handler+0x118>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   298f4:	4619      	mov	r1, r3
   298f6:	e011      	b.n	2991c <_timer_expiration_handler+0xf0>
	return (node == list->tail) ? NULL : node->next;
   298f8:	2100      	movs	r1, #0
   298fa:	e00f      	b.n	2991c <_timer_expiration_handler+0xf0>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   298fc:	2300      	movs	r3, #0
   298fe:	b1d3      	cbz	r3, 29936 <_timer_expiration_handler+0x10a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29900:	6902      	ldr	r2, [r0, #16]
   29902:	6919      	ldr	r1, [r3, #16]
   29904:	428a      	cmp	r2, r1
   29906:	dde3      	ble.n	298d0 <_timer_expiration_handler+0xa4>
		*delta -= in_q->delta_ticks_from_prev;
   29908:	1a52      	subs	r2, r2, r1
   2990a:	6102      	str	r2, [r0, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2990c:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2990e:	2b00      	cmp	r3, #0
   29910:	d0f0      	beq.n	298f4 <_timer_expiration_handler+0xc8>
	return (node == list->tail) ? NULL : node->next;
   29912:	492a      	ldr	r1, [pc, #168]	; (299bc <_timer_expiration_handler+0x190>)
   29914:	6909      	ldr	r1, [r1, #16]
   29916:	428b      	cmp	r3, r1
   29918:	d0ee      	beq.n	298f8 <_timer_expiration_handler+0xcc>
   2991a:	6819      	ldr	r1, [r3, #0]
   2991c:	2900      	cmp	r1, #0
   2991e:	d0ed      	beq.n	298fc <_timer_expiration_handler+0xd0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29920:	b12a      	cbz	r2, 2992e <_timer_expiration_handler+0x102>
	return (node == list->tail) ? NULL : node->next;
   29922:	4926      	ldr	r1, [pc, #152]	; (299bc <_timer_expiration_handler+0x190>)
   29924:	6909      	ldr	r1, [r1, #16]
   29926:	428a      	cmp	r2, r1
   29928:	d003      	beq.n	29932 <_timer_expiration_handler+0x106>
   2992a:	681b      	ldr	r3, [r3, #0]
   2992c:	e7e7      	b.n	298fe <_timer_expiration_handler+0xd2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2992e:	2300      	movs	r3, #0
   29930:	e7e5      	b.n	298fe <_timer_expiration_handler+0xd2>
	return (node == list->tail) ? NULL : node->next;
   29932:	2300      	movs	r3, #0
   29934:	e7e3      	b.n	298fe <_timer_expiration_handler+0xd2>
	node->next = list;
   29936:	4b22      	ldr	r3, [pc, #136]	; (299c0 <_timer_expiration_handler+0x194>)
   29938:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   2993a:	685a      	ldr	r2, [r3, #4]
   2993c:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2993e:	685a      	ldr	r2, [r3, #4]
   29940:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29942:	605c      	str	r4, [r3, #4]
   29944:	f385 8811 	msr	BASEPRI, r5
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   29948:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2994a:	3301      	adds	r3, #1
   2994c:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   2994e:	6a23      	ldr	r3, [r4, #32]
   29950:	b10b      	cbz	r3, 29956 <_timer_expiration_handler+0x12a>
		timer->expiry_fn(timer);
   29952:	4620      	mov	r0, r4
   29954:	4798      	blx	r3
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);
   29956:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   2995a:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2995c:	42a3      	cmp	r3, r4
   2995e:	d01d      	beq.n	2999c <_timer_expiration_handler+0x170>

	if (!thread) {
   29960:	b334      	cbz	r4, 299b0 <_timer_expiration_handler+0x184>
	node->prev->next = node->next;
   29962:	6863      	ldr	r3, [r4, #4]
   29964:	6822      	ldr	r2, [r4, #0]
   29966:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29968:	6823      	ldr	r3, [r4, #0]
   2996a:	6862      	ldr	r2, [r4, #4]
   2996c:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2996e:	7a63      	ldrb	r3, [r4, #9]
   29970:	f023 0302 	bic.w	r3, r3, #2
   29974:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   29976:	f04f 0320 	mov.w	r3, #32
   2997a:	f3ef 8511 	mrs	r5, BASEPRI
   2997e:	f383 8811 	msr	BASEPRI, r3
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29982:	7a63      	ldrb	r3, [r4, #9]
   29984:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29988:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2998a:	f013 0f1b 	tst.w	r3, #27
   2998e:	d109      	bne.n	299a4 <_timer_expiration_handler+0x178>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29990:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29996:	d003      	beq.n	299a0 <_timer_expiration_handler+0x174>
   29998:	2300      	movs	r3, #0
   2999a:	e004      	b.n	299a6 <_timer_expiration_handler+0x17a>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2999c:	2400      	movs	r4, #0
   2999e:	e7df      	b.n	29960 <_timer_expiration_handler+0x134>
   299a0:	2301      	movs	r3, #1
   299a2:	e000      	b.n	299a6 <_timer_expiration_handler+0x17a>
   299a4:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   299a6:	b923      	cbnz	r3, 299b2 <_timer_expiration_handler+0x186>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   299a8:	f385 8811 	msr	BASEPRI, r5
   299ac:	2300      	movs	r3, #0
   299ae:	6663      	str	r3, [r4, #100]	; 0x64
   299b0:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   299b2:	4620      	mov	r0, r4
   299b4:	f7ff f8f4 	bl	28ba0 <_add_thread_to_ready_q>
   299b8:	e7f6      	b.n	299a8 <_timer_expiration_handler+0x17c>
   299ba:	bf00      	nop
   299bc:	20002878 	.word	0x20002878
   299c0:	20002884 	.word	0x20002884

000299c4 <k_timer_init>:

void k_timer_init(struct k_timer *timer,
		  void (*expiry_fn)(struct k_timer *),
		  void (*stop_fn)(struct k_timer *))
{
	timer->expiry_fn = expiry_fn;
   299c4:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   299c6:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0;
   299c8:	2300      	movs	r3, #0
   299ca:	62c3      	str	r3, [r0, #44]	; 0x2c

	sys_dlist_init(&timer->wait_q);
   299cc:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   299d0:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   299d2:	61c2      	str	r2, [r0, #28]
	t->delta_ticks_from_prev = _INACTIVE;
   299d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   299d8:	6102      	str	r2, [r0, #16]
	t->wait_q = NULL;
   299da:	60c3      	str	r3, [r0, #12]
	t->thread = NULL;
   299dc:	6083      	str	r3, [r0, #8]
	t->func = func;
   299de:	4a02      	ldr	r2, [pc, #8]	; (299e8 <k_timer_init+0x24>)
   299e0:	6142      	str	r2, [r0, #20]
	_init_timeout(&timer->timeout, _timer_expiration_handler);
	SYS_TRACING_OBJ_INIT(k_timer, timer);

	timer->user_data = NULL;
   299e2:	6303      	str	r3, [r0, #48]	; 0x30
   299e4:	4770      	bx	lr
   299e6:	bf00      	nop
   299e8:	0002982d 	.word	0x0002982d

000299ec <_impl_k_timer_start>:
	_k_object_init(timer);
}


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   299ec:	b530      	push	{r4, r5, lr}
   299ee:	b083      	sub	sp, #12
   299f0:	3209      	adds	r2, #9
   299f2:	4b57      	ldr	r3, [pc, #348]	; (29b50 <_impl_k_timer_start+0x164>)
   299f4:	fba3 4202 	umull	r4, r2, r3, r2
   299f8:	08d2      	lsrs	r2, r2, #3
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
   299fa:	9201      	str	r2, [sp, #4]
   299fc:	3109      	adds	r1, #9
   299fe:	fba3 3101 	umull	r3, r1, r3, r1
   29a02:	08c9      	lsrs	r1, r1, #3
	duration_in_ticks = _ms_to_ticks(duration);
   29a04:	9100      	str	r1, [sp, #0]
	__asm__ volatile(
   29a06:	f04f 0320 	mov.w	r3, #32
   29a0a:	f3ef 8411 	mrs	r4, BASEPRI
   29a0e:	f383 8811 	msr	BASEPRI, r3

	unsigned int key = irq_lock();

	if (timer->timeout.delta_ticks_from_prev != _INACTIVE) {
   29a12:	6901      	ldr	r1, [r0, #16]
   29a14:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   29a18:	d012      	beq.n	29a40 <_impl_k_timer_start+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29a1a:	4603      	mov	r3, r0
	return list->tail == node;
   29a1c:	4a4d      	ldr	r2, [pc, #308]	; (29b54 <_impl_k_timer_start+0x168>)
   29a1e:	6912      	ldr	r2, [r2, #16]
   29a20:	4290      	cmp	r0, r2
   29a22:	d004      	beq.n	29a2e <_impl_k_timer_start+0x42>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29a24:	b100      	cbz	r0, 29a28 <_impl_k_timer_start+0x3c>
	return (node == list->tail) ? NULL : node->next;
   29a26:	6803      	ldr	r3, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29a28:	691a      	ldr	r2, [r3, #16]
   29a2a:	440a      	add	r2, r1
   29a2c:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   29a2e:	6843      	ldr	r3, [r0, #4]
   29a30:	6802      	ldr	r2, [r0, #0]
   29a32:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29a34:	6803      	ldr	r3, [r0, #0]
   29a36:	6842      	ldr	r2, [r0, #4]
   29a38:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29a3e:	6103      	str	r3, [r0, #16]
		_abort_timeout(&timer->timeout);
	}

	timer->period = period_in_ticks;
   29a40:	9b01      	ldr	r3, [sp, #4]
   29a42:	6283      	str	r3, [r0, #40]	; 0x28
	timer->status = 0;
   29a44:	2200      	movs	r2, #0
   29a46:	62c2      	str	r2, [r0, #44]	; 0x2c
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
   29a48:	4605      	mov	r5, r0
   29a4a:	f100 0118 	add.w	r1, r0, #24
   29a4e:	9b00      	ldr	r3, [sp, #0]
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   29a50:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   29a52:	6082      	str	r2, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   29a54:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
   29a56:	b133      	cbz	r3, 29a66 <_impl_k_timer_start+0x7a>
	return list->head == list;
   29a58:	4a3e      	ldr	r2, [pc, #248]	; (29b54 <_impl_k_timer_start+0x168>)
   29a5a:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29a5e:	4293      	cmp	r3, r2
   29a60:	d14f      	bne.n	29b02 <_impl_k_timer_start+0x116>
   29a62:	2300      	movs	r3, #0
   29a64:	e04d      	b.n	29b02 <_impl_k_timer_start+0x116>
	struct k_thread *thread = timeout->thread;
   29a66:	4613      	mov	r3, r2
   29a68:	f04f 0220 	mov.w	r2, #32
   29a6c:	f3ef 8511 	mrs	r5, BASEPRI
   29a70:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   29a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29a78:	6102      	str	r2, [r0, #16]
	if (thread) {
   29a7a:	b323      	cbz	r3, 29ac6 <_impl_k_timer_start+0xda>
	if (timeout_obj->wait_q) {
   29a7c:	68c2      	ldr	r2, [r0, #12]
   29a7e:	b152      	cbz	r2, 29a96 <_impl_k_timer_start+0xaa>
	node->prev->next = node->next;
   29a80:	685a      	ldr	r2, [r3, #4]
   29a82:	6819      	ldr	r1, [r3, #0]
   29a84:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   29a86:	681a      	ldr	r2, [r3, #0]
   29a88:	6859      	ldr	r1, [r3, #4]
   29a8a:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29a8c:	7a5a      	ldrb	r2, [r3, #9]
   29a8e:	f022 0202 	bic.w	r2, r2, #2
   29a92:	725a      	strb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
   29a94:	61db      	str	r3, [r3, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29a96:	7a5a      	ldrb	r2, [r3, #9]
   29a98:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   29a9c:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29a9e:	f012 0f1b 	tst.w	r2, #27
   29aa2:	d107      	bne.n	29ab4 <_impl_k_timer_start+0xc8>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29aa4:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29aa6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29aaa:	d001      	beq.n	29ab0 <_impl_k_timer_start+0xc4>
   29aac:	2200      	movs	r2, #0
   29aae:	e002      	b.n	29ab6 <_impl_k_timer_start+0xca>
   29ab0:	2201      	movs	r2, #1
   29ab2:	e000      	b.n	29ab6 <_impl_k_timer_start+0xca>
   29ab4:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   29ab6:	b912      	cbnz	r2, 29abe <_impl_k_timer_start+0xd2>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29ab8:	f385 8811 	msr	BASEPRI, r5
   29abc:	e044      	b.n	29b48 <_impl_k_timer_start+0x15c>
		_add_thread_to_ready_q(thread);
   29abe:	4618      	mov	r0, r3
   29ac0:	f7ff f86e 	bl	28ba0 <_add_thread_to_ready_q>
   29ac4:	e7f8      	b.n	29ab8 <_impl_k_timer_start+0xcc>
   29ac6:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   29aca:	6943      	ldr	r3, [r0, #20]
   29acc:	2b00      	cmp	r3, #0
   29ace:	d03b      	beq.n	29b48 <_impl_k_timer_start+0x15c>
			timeout->func(timeout);
   29ad0:	4798      	blx	r3
   29ad2:	e039      	b.n	29b48 <_impl_k_timer_start+0x15c>
			in_q->delta_ticks_from_prev -= *delta;
   29ad4:	1a8a      	subs	r2, r1, r2
   29ad6:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29ad8:	b133      	cbz	r3, 29ae8 <_impl_k_timer_start+0xfc>
		node->prev = insert_point->prev;
   29ada:	685a      	ldr	r2, [r3, #4]
   29adc:	6042      	str	r2, [r0, #4]
		node->next = insert_point;
   29ade:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   29ae0:	685a      	ldr	r2, [r3, #4]
   29ae2:	6010      	str	r0, [r2, #0]
		insert_point->prev = node;
   29ae4:	6058      	str	r0, [r3, #4]
   29ae6:	e02f      	b.n	29b48 <_impl_k_timer_start+0x15c>
	node->next = list;
   29ae8:	4b1b      	ldr	r3, [pc, #108]	; (29b58 <_impl_k_timer_start+0x16c>)
   29aea:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   29aec:	685a      	ldr	r2, [r3, #4]
   29aee:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   29af0:	685a      	ldr	r2, [r3, #4]
   29af2:	6010      	str	r0, [r2, #0]
	list->tail = node;
   29af4:	6058      	str	r0, [r3, #4]
   29af6:	e027      	b.n	29b48 <_impl_k_timer_start+0x15c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29af8:	4619      	mov	r1, r3
   29afa:	e011      	b.n	29b20 <_impl_k_timer_start+0x134>
	return (node == list->tail) ? NULL : node->next;
   29afc:	2100      	movs	r1, #0
   29afe:	e00f      	b.n	29b20 <_impl_k_timer_start+0x134>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29b00:	2300      	movs	r3, #0
   29b02:	b1d3      	cbz	r3, 29b3a <_impl_k_timer_start+0x14e>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29b04:	692a      	ldr	r2, [r5, #16]
   29b06:	6919      	ldr	r1, [r3, #16]
   29b08:	428a      	cmp	r2, r1
   29b0a:	dde3      	ble.n	29ad4 <_impl_k_timer_start+0xe8>
		*delta -= in_q->delta_ticks_from_prev;
   29b0c:	1a52      	subs	r2, r2, r1
   29b0e:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29b10:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29b12:	2b00      	cmp	r3, #0
   29b14:	d0f0      	beq.n	29af8 <_impl_k_timer_start+0x10c>
	return (node == list->tail) ? NULL : node->next;
   29b16:	490f      	ldr	r1, [pc, #60]	; (29b54 <_impl_k_timer_start+0x168>)
   29b18:	6909      	ldr	r1, [r1, #16]
   29b1a:	428b      	cmp	r3, r1
   29b1c:	d0ee      	beq.n	29afc <_impl_k_timer_start+0x110>
   29b1e:	6819      	ldr	r1, [r3, #0]
   29b20:	2900      	cmp	r1, #0
   29b22:	d0ed      	beq.n	29b00 <_impl_k_timer_start+0x114>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29b24:	b12a      	cbz	r2, 29b32 <_impl_k_timer_start+0x146>
	return (node == list->tail) ? NULL : node->next;
   29b26:	490b      	ldr	r1, [pc, #44]	; (29b54 <_impl_k_timer_start+0x168>)
   29b28:	6909      	ldr	r1, [r1, #16]
   29b2a:	428a      	cmp	r2, r1
   29b2c:	d003      	beq.n	29b36 <_impl_k_timer_start+0x14a>
   29b2e:	681b      	ldr	r3, [r3, #0]
   29b30:	e7e7      	b.n	29b02 <_impl_k_timer_start+0x116>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29b32:	2300      	movs	r3, #0
   29b34:	e7e5      	b.n	29b02 <_impl_k_timer_start+0x116>
	return (node == list->tail) ? NULL : node->next;
   29b36:	2300      	movs	r3, #0
   29b38:	e7e3      	b.n	29b02 <_impl_k_timer_start+0x116>
	node->next = list;
   29b3a:	4b07      	ldr	r3, [pc, #28]	; (29b58 <_impl_k_timer_start+0x16c>)
   29b3c:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   29b3e:	685a      	ldr	r2, [r3, #4]
   29b40:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   29b42:	685a      	ldr	r2, [r3, #4]
   29b44:	6010      	str	r0, [r2, #0]
	list->tail = node;
   29b46:	6058      	str	r0, [r3, #4]
   29b48:	f384 8811 	msr	BASEPRI, r4
	irq_unlock(key);
}
   29b4c:	b003      	add	sp, #12
   29b4e:	bd30      	pop	{r4, r5, pc}
   29b50:	cccccccd 	.word	0xcccccccd
   29b54:	20002878 	.word	0x20002878
   29b58:	20002884 	.word	0x20002884

00029b5c <_impl_k_timer_stop>:
	return 0;
}
#endif

void _impl_k_timer_stop(struct k_timer *timer)
{
   29b5c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   29b5e:	f04f 0320 	mov.w	r3, #32
   29b62:	f3ef 8411 	mrs	r4, BASEPRI
   29b66:	f383 8811 	msr	BASEPRI, r3
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29b6a:	6903      	ldr	r3, [r0, #16]
   29b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29b70:	d042      	beq.n	29bf8 <_impl_k_timer_stop+0x9c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29b72:	4602      	mov	r2, r0
	return list->tail == node;
   29b74:	493b      	ldr	r1, [pc, #236]	; (29c64 <_impl_k_timer_stop+0x108>)
   29b76:	6909      	ldr	r1, [r1, #16]
   29b78:	4288      	cmp	r0, r1
   29b7a:	d004      	beq.n	29b86 <_impl_k_timer_stop+0x2a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29b7c:	b100      	cbz	r0, 29b80 <_impl_k_timer_stop+0x24>
	return (node == list->tail) ? NULL : node->next;
   29b7e:	6802      	ldr	r2, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29b80:	6911      	ldr	r1, [r2, #16]
   29b82:	440b      	add	r3, r1
   29b84:	6113      	str	r3, [r2, #16]
	node->prev->next = node->next;
   29b86:	6843      	ldr	r3, [r0, #4]
   29b88:	6802      	ldr	r2, [r0, #0]
   29b8a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29b8c:	6803      	ldr	r3, [r0, #0]
   29b8e:	6842      	ldr	r2, [r0, #4]
   29b90:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29b96:	6103      	str	r3, [r0, #16]
	return 0;
   29b98:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29b9a:	f384 8811 	msr	BASEPRI, r4
	int key = irq_lock();
	int inactive = (_abort_timeout(&timer->timeout) == _INACTIVE);

	irq_unlock(key);

	if (inactive) {
   29b9e:	2b00      	cmp	r3, #0
   29ba0:	d15f      	bne.n	29c62 <_impl_k_timer_stop+0x106>
   29ba2:	4604      	mov	r4, r0
		return;
	}

	if (timer->stop_fn) {
   29ba4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29ba6:	b103      	cbz	r3, 29baa <_impl_k_timer_stop+0x4e>
		timer->stop_fn(timer);
   29ba8:	4798      	blx	r3
	__asm__ volatile(
   29baa:	f04f 0320 	mov.w	r3, #32
   29bae:	f3ef 8511 	mrs	r5, BASEPRI
   29bb2:	f383 8811 	msr	BASEPRI, r3
	}

	key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&timer->wait_q);
   29bb6:	f104 0218 	add.w	r2, r4, #24
	if (_handling_timeouts) {
   29bba:	4b2b      	ldr	r3, [pc, #172]	; (29c68 <_impl_k_timer_stop+0x10c>)
   29bbc:	681b      	ldr	r3, [r3, #0]
   29bbe:	b9f3      	cbnz	r3, 29bfe <_impl_k_timer_stop+0xa2>
	return list->head == list;
   29bc0:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29bc2:	4282      	cmp	r2, r0
   29bc4:	d02c      	beq.n	29c20 <_impl_k_timer_stop+0xc4>
	if (thread) {
   29bc6:	b148      	cbz	r0, 29bdc <_impl_k_timer_stop+0x80>
	node->prev->next = node->next;
   29bc8:	6843      	ldr	r3, [r0, #4]
   29bca:	6802      	ldr	r2, [r0, #0]
   29bcc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29bce:	6803      	ldr	r3, [r0, #0]
   29bd0:	6842      	ldr	r2, [r0, #4]
   29bd2:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29bd4:	7a43      	ldrb	r3, [r0, #9]
   29bd6:	f023 0302 	bic.w	r3, r3, #2
   29bda:	7243      	strb	r3, [r0, #9]

	if (pending_thread) {
   29bdc:	b330      	cbz	r0, 29c2c <_impl_k_timer_stop+0xd0>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29bde:	7a43      	ldrb	r3, [r0, #9]
   29be0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29be4:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29be6:	f013 0f1b 	tst.w	r3, #27
   29bea:	d11d      	bne.n	29c28 <_impl_k_timer_stop+0xcc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29bec:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29bf2:	d017      	beq.n	29c24 <_impl_k_timer_stop+0xc8>
   29bf4:	2300      	movs	r3, #0
   29bf6:	e018      	b.n	29c2a <_impl_k_timer_stop+0xce>
		return _INACTIVE;
   29bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29bfc:	e7cd      	b.n	29b9a <_impl_k_timer_stop+0x3e>
	return list->head == list;
   29bfe:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29c00:	4282      	cmp	r2, r0
   29c02:	d102      	bne.n	29c0a <_impl_k_timer_stop+0xae>
   29c04:	2000      	movs	r0, #0
   29c06:	e000      	b.n	29c0a <_impl_k_timer_stop+0xae>
	return (node == list->tail) ? NULL : node->next;
   29c08:	6800      	ldr	r0, [r0, #0]
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   29c0a:	2800      	cmp	r0, #0
   29c0c:	d0db      	beq.n	29bc6 <_impl_k_timer_stop+0x6a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   29c0e:	6a03      	ldr	r3, [r0, #32]
			if (_is_thread_timeout_expired(thread)) {
   29c10:	f113 0f02 	cmn.w	r3, #2
   29c14:	d1d7      	bne.n	29bc6 <_impl_k_timer_stop+0x6a>
   29c16:	6853      	ldr	r3, [r2, #4]
   29c18:	4298      	cmp	r0, r3
   29c1a:	d1f5      	bne.n	29c08 <_impl_k_timer_stop+0xac>
   29c1c:	2000      	movs	r0, #0
   29c1e:	e7f4      	b.n	29c0a <_impl_k_timer_stop+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29c20:	2000      	movs	r0, #0
   29c22:	e7d0      	b.n	29bc6 <_impl_k_timer_stop+0x6a>
	return !(_is_thread_prevented_from_running(thread) ||
   29c24:	2301      	movs	r3, #1
   29c26:	e000      	b.n	29c2a <_impl_k_timer_stop+0xce>
   29c28:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29c2a:	b95b      	cbnz	r3, 29c44 <_impl_k_timer_stop+0xe8>
   29c2c:	f3ef 8305 	mrs	r3, IPSR
   29c30:	2b0d      	cmp	r3, #13
   29c32:	d80a      	bhi.n	29c4a <_impl_k_timer_stop+0xee>
   29c34:	b173      	cbz	r3, 29c54 <_impl_k_timer_stop+0xf8>
   29c36:	4b0d      	ldr	r3, [pc, #52]	; (29c6c <_impl_k_timer_stop+0x110>)
   29c38:	685b      	ldr	r3, [r3, #4]
   29c3a:	f413 6f00 	tst.w	r3, #2048	; 0x800
   29c3e:	d00b      	beq.n	29c58 <_impl_k_timer_stop+0xfc>
   29c40:	2300      	movs	r3, #0
   29c42:	e003      	b.n	29c4c <_impl_k_timer_stop+0xf0>
		_add_thread_to_ready_q(thread);
   29c44:	f7fe ffac 	bl	28ba0 <_add_thread_to_ready_q>
   29c48:	e7f0      	b.n	29c2c <_impl_k_timer_stop+0xd0>
   29c4a:	2301      	movs	r3, #1
		_ready_thread(pending_thread);
	}

	if (_is_in_isr()) {
   29c4c:	b133      	cbz	r3, 29c5c <_impl_k_timer_stop+0x100>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29c4e:	f385 8811 	msr	BASEPRI, r5
   29c52:	bd38      	pop	{r3, r4, r5, pc}
   29c54:	2300      	movs	r3, #0
   29c56:	e7f9      	b.n	29c4c <_impl_k_timer_stop+0xf0>
   29c58:	2301      	movs	r3, #1
   29c5a:	e7f7      	b.n	29c4c <_impl_k_timer_stop+0xf0>
		irq_unlock(key);
	} else {
		_reschedule_threads(key);
   29c5c:	4628      	mov	r0, r5
   29c5e:	f7ff f937 	bl	28ed0 <_reschedule_threads>
   29c62:	bd38      	pop	{r3, r4, r5, pc}
   29c64:	20002878 	.word	0x20002878
   29c68:	20002c60 	.word	0x20002c60
   29c6c:	e000ed00 	.word	0xe000ed00

00029c70 <_timeout_remaining_get>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_timer_status_sync, K_OBJ_TIMER, struct k_timer *);
#endif

s32_t _timeout_remaining_get(struct _timeout *timeout)
{
   29c70:	b430      	push	{r4, r5}
	__asm__ volatile(
   29c72:	f04f 0320 	mov.w	r3, #32
   29c76:	f3ef 8411 	mrs	r4, BASEPRI
   29c7a:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	s32_t remaining_ticks;

	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29c7e:	6903      	ldr	r3, [r0, #16]
   29c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29c84:	d017      	beq.n	29cb6 <_timeout_remaining_get+0x46>
	return list->head == list;
   29c86:	4a10      	ldr	r2, [pc, #64]	; (29cc8 <_timeout_remaining_get+0x58>)
   29c88:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29c8c:	4293      	cmp	r3, r2
   29c8e:	d001      	beq.n	29c94 <_timeout_remaining_get+0x24>
		 * and summing up the various tick deltas involved
		 */
		struct _timeout *t =
			(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

		remaining_ticks = t->delta_ticks_from_prev;
   29c90:	6919      	ldr	r1, [r3, #16]
		while (t != timeout) {
   29c92:	e005      	b.n	29ca0 <_timeout_remaining_get+0x30>
   29c94:	2300      	movs	r3, #0
   29c96:	e7fb      	b.n	29c90 <_timeout_remaining_get+0x20>
	return (node == list->tail) ? NULL : node->next;
   29c98:	2200      	movs	r2, #0
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
								   &t->node);
			remaining_ticks += t->delta_ticks_from_prev;
   29c9a:	6913      	ldr	r3, [r2, #16]
   29c9c:	4419      	add	r1, r3
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   29c9e:	4613      	mov	r3, r2
		while (t != timeout) {
   29ca0:	4283      	cmp	r3, r0
   29ca2:	d009      	beq.n	29cb8 <_timeout_remaining_get+0x48>
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   29ca4:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29ca6:	2b00      	cmp	r3, #0
   29ca8:	d0f7      	beq.n	29c9a <_timeout_remaining_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   29caa:	4a07      	ldr	r2, [pc, #28]	; (29cc8 <_timeout_remaining_get+0x58>)
   29cac:	6912      	ldr	r2, [r2, #16]
   29cae:	4293      	cmp	r3, r2
   29cb0:	d0f2      	beq.n	29c98 <_timeout_remaining_get+0x28>
   29cb2:	681a      	ldr	r2, [r3, #0]
   29cb4:	e7f1      	b.n	29c9a <_timeout_remaining_get+0x2a>
		remaining_ticks = 0;
   29cb6:	2100      	movs	r1, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29cb8:	f384 8811 	msr	BASEPRI, r4
	return (u64_t)ticks * _ms_per_tick;
   29cbc:	008a      	lsls	r2, r1, #2
   29cbe:	1850      	adds	r0, r2, r1
   29cc0:	1800      	adds	r0, r0, r0
		}
	}

	irq_unlock(key);
	return __ticks_to_ms(remaining_ticks);
}
   29cc2:	bc30      	pop	{r4, r5}
   29cc4:	4770      	bx	lr
   29cc6:	bf00      	nop
   29cc8:	20002878 	.word	0x20002878

00029ccc <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   29ccc:	b538      	push	{r3, r4, r5, lr}
   29cce:	4604      	mov	r4, r0
   29cd0:	e003      	b.n	29cda <work_q_main+0xe>
		handler = work->handler;

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
					      K_WORK_STATE_PENDING)) {
			handler(work);
   29cd2:	4610      	mov	r0, r2
   29cd4:	47a8      	blx	r5
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   29cd6:	f7ff f927 	bl	28f28 <_impl_k_yield>
		work = k_queue_get(&work_q->queue, K_FOREVER);
   29cda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   29cde:	4620      	mov	r0, r4
   29ce0:	f7fe ff0c 	bl	28afc <k_queue_get>
		if (!work) {
   29ce4:	4602      	mov	r2, r0
   29ce6:	2800      	cmp	r0, #0
   29ce8:	d0f7      	beq.n	29cda <work_q_main+0xe>
		handler = work->handler;
   29cea:	6845      	ldr	r5, [r0, #4]
		if (atomic_test_and_clear_bit(work->flags,
   29cec:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29cf0:	f3bf 8f5b 	dmb	ish
   29cf4:	e853 1f00 	ldrex	r1, [r3]
   29cf8:	f021 0001 	bic.w	r0, r1, #1
   29cfc:	e843 0e00 	strex	lr, r0, [r3]
   29d00:	f1be 0f00 	cmp.w	lr, #0
   29d04:	d1f6      	bne.n	29cf4 <work_q_main+0x28>
   29d06:	f3bf 8f5b 	dmb	ish
   29d0a:	f011 0f01 	tst.w	r1, #1
   29d0e:	d0e2      	beq.n	29cd6 <work_q_main+0xa>
   29d10:	e7df      	b.n	29cd2 <work_q_main+0x6>

00029d12 <work_timeout>:
	_k_object_init(work_q);
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
static void work_timeout(struct _timeout *t)
{
   29d12:	b510      	push	{r4, lr}
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   29d14:	6984      	ldr	r4, [r0, #24]
   29d16:	f1a0 010c 	sub.w	r1, r0, #12
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   29d1a:	1f03      	subs	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29d1c:	f3bf 8f5b 	dmb	ish
   29d20:	e853 2f00 	ldrex	r2, [r3]
   29d24:	f042 0001 	orr.w	r0, r2, #1
   29d28:	e843 0e00 	strex	lr, r0, [r3]
   29d2c:	f1be 0f00 	cmp.w	lr, #0
   29d30:	d1f6      	bne.n	29d20 <work_timeout+0xe>
   29d32:	f3bf 8f5b 	dmb	ish
   29d36:	f012 0f01 	tst.w	r2, #1
   29d3a:	d000      	beq.n	29d3e <work_timeout+0x2c>
   29d3c:	bd10      	pop	{r4, pc}
		k_queue_append(&work_q->queue, work);
   29d3e:	4620      	mov	r0, r4
   29d40:	f7fe feb4 	bl	28aac <k_queue_append>
}
   29d44:	e7fa      	b.n	29d3c <work_timeout+0x2a>
	...

00029d48 <k_work_q_start>:
{
   29d48:	b5f0      	push	{r4, r5, r6, r7, lr}
   29d4a:	b087      	sub	sp, #28
   29d4c:	4604      	mov	r4, r0
   29d4e:	460d      	mov	r5, r1
   29d50:	4616      	mov	r6, r2
   29d52:	461f      	mov	r7, r3
	k_queue_init(&work_q->queue);
   29d54:	f7fe fe77 	bl	28a46 <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   29d58:	2300      	movs	r3, #0
   29d5a:	9305      	str	r3, [sp, #20]
   29d5c:	9304      	str	r3, [sp, #16]
   29d5e:	9703      	str	r7, [sp, #12]
   29d60:	9302      	str	r3, [sp, #8]
   29d62:	9301      	str	r3, [sp, #4]
   29d64:	9400      	str	r4, [sp, #0]
   29d66:	4b04      	ldr	r3, [pc, #16]	; (29d78 <k_work_q_start+0x30>)
   29d68:	4632      	mov	r2, r6
   29d6a:	4629      	mov	r1, r5
   29d6c:	f104 0010 	add.w	r0, r4, #16
   29d70:	f7ff fcb2 	bl	296d8 <_impl_k_thread_create>
}
   29d74:	b007      	add	sp, #28
   29d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29d78:	00029ccd 	.word	0x00029ccd

00029d7c <k_delayed_work_init>:

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   29d7c:	b500      	push	{lr}
	atomic_clear_bit(work->flags, K_WORK_STATE_PENDING);
   29d7e:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29d82:	f3bf 8f5b 	dmb	ish
   29d86:	e853 2f00 	ldrex	r2, [r3]
   29d8a:	f022 0201 	bic.w	r2, r2, #1
   29d8e:	e843 2e00 	strex	lr, r2, [r3]
   29d92:	f1be 0f00 	cmp.w	lr, #0
   29d96:	d1f6      	bne.n	29d86 <k_delayed_work_init+0xa>
   29d98:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
   29d9c:	6041      	str	r1, [r0, #4]
	t->delta_ticks_from_prev = _INACTIVE;
   29d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29da2:	61c3      	str	r3, [r0, #28]
	t->wait_q = NULL;
   29da4:	2300      	movs	r3, #0
   29da6:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   29da8:	6143      	str	r3, [r0, #20]
	t->func = func;
   29daa:	4a02      	ldr	r2, [pc, #8]	; (29db4 <k_delayed_work_init+0x38>)
   29dac:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   29dae:	6243      	str	r3, [r0, #36]	; 0x24
   29db0:	f85d fb04 	ldr.w	pc, [sp], #4
   29db4:	00029d13 	.word	0x00029d13

00029db8 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   29db8:	b430      	push	{r4, r5}
	__asm__ volatile(
   29dba:	f04f 0320 	mov.w	r3, #32
   29dbe:	f3ef 8411 	mrs	r4, BASEPRI
   29dc2:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   29dc6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29dc8:	b18b      	cbz	r3, 29dee <k_delayed_work_cancel+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29dca:	f3bf 8f5b 	dmb	ish
   29dce:	6883      	ldr	r3, [r0, #8]
   29dd0:	f3bf 8f5b 	dmb	ish
		irq_unlock(key);
		return -EINVAL;
	}

	if (k_work_pending(&work->work)) {
   29dd4:	f013 0f01 	tst.w	r3, #1
   29dd8:	d02d      	beq.n	29e36 <k_delayed_work_cancel+0x7e>
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   29dda:	6a45      	ldr	r5, [r0, #36]	; 0x24
   29ddc:	4601      	mov	r1, r0
	return list->head;
   29dde:	682b      	ldr	r3, [r5, #0]
	sys_snode_t *prev = NULL;
   29de0:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   29de2:	b193      	cbz	r3, 29e0a <k_delayed_work_cancel+0x52>
		if (test == node) {
   29de4:	4299      	cmp	r1, r3
   29de6:	d007      	beq.n	29df8 <k_delayed_work_cancel+0x40>
		prev = test;
   29de8:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   29dea:	681b      	ldr	r3, [r3, #0]
   29dec:	e7f9      	b.n	29de2 <k_delayed_work_cancel+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29dee:	f384 8811 	msr	BASEPRI, r4
		return -EINVAL;
   29df2:	f06f 0015 	mvn.w	r0, #21
   29df6:	e00e      	b.n	29e16 <k_delayed_work_cancel+0x5e>
	if (!prev_node) {
   29df8:	b17a      	cbz	r2, 29e1a <k_delayed_work_cancel+0x62>
		prev_node->next = node->next;
   29dfa:	6803      	ldr	r3, [r0, #0]
   29dfc:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   29dfe:	686b      	ldr	r3, [r5, #4]
   29e00:	4298      	cmp	r0, r3
   29e02:	d011      	beq.n	29e28 <k_delayed_work_cancel+0x70>
	node->next = NULL;
   29e04:	2300      	movs	r3, #0
   29e06:	6003      	str	r3, [r0, #0]
			return true;
   29e08:	2301      	movs	r3, #1
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   29e0a:	b17b      	cbz	r3, 29e2c <k_delayed_work_cancel+0x74>
	} else {
		_abort_timeout(&work->timeout);
	}

	/* Detach from workqueue */
	work->work_q = NULL;
   29e0c:	2300      	movs	r3, #0
   29e0e:	6243      	str	r3, [r0, #36]	; 0x24
   29e10:	f384 8811 	msr	BASEPRI, r4

	irq_unlock(key);

	return 0;
   29e14:	4618      	mov	r0, r3
}
   29e16:	bc30      	pop	{r4, r5}
   29e18:	4770      	bx	lr
		list->head = node->next;
   29e1a:	6803      	ldr	r3, [r0, #0]
   29e1c:	602b      	str	r3, [r5, #0]
		if (list->tail == node) {
   29e1e:	686a      	ldr	r2, [r5, #4]
   29e20:	4290      	cmp	r0, r2
   29e22:	d1ef      	bne.n	29e04 <k_delayed_work_cancel+0x4c>
			list->tail = list->head;
   29e24:	606b      	str	r3, [r5, #4]
   29e26:	e7ed      	b.n	29e04 <k_delayed_work_cancel+0x4c>
			list->tail = prev_node;
   29e28:	606a      	str	r2, [r5, #4]
   29e2a:	e7eb      	b.n	29e04 <k_delayed_work_cancel+0x4c>
   29e2c:	f384 8811 	msr	BASEPRI, r4
			return -EINVAL;
   29e30:	f06f 0015 	mvn.w	r0, #21
   29e34:	e7ef      	b.n	29e16 <k_delayed_work_cancel+0x5e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29e36:	69c2      	ldr	r2, [r0, #28]
   29e38:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29e3c:	d0e6      	beq.n	29e0c <k_delayed_work_cancel+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29e3e:	f100 030c 	add.w	r3, r0, #12
	return list->tail == node;
   29e42:	4909      	ldr	r1, [pc, #36]	; (29e68 <k_delayed_work_cancel+0xb0>)
   29e44:	6909      	ldr	r1, [r1, #16]
   29e46:	428b      	cmp	r3, r1
   29e48:	d004      	beq.n	29e54 <k_delayed_work_cancel+0x9c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29e4a:	b103      	cbz	r3, 29e4e <k_delayed_work_cancel+0x96>
	return (node == list->tail) ? NULL : node->next;
   29e4c:	68c3      	ldr	r3, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29e4e:	6919      	ldr	r1, [r3, #16]
   29e50:	440a      	add	r2, r1
   29e52:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   29e54:	6903      	ldr	r3, [r0, #16]
   29e56:	68c2      	ldr	r2, [r0, #12]
   29e58:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29e5a:	68c3      	ldr	r3, [r0, #12]
   29e5c:	6902      	ldr	r2, [r0, #16]
   29e5e:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29e64:	61c3      	str	r3, [r0, #28]
   29e66:	e7d1      	b.n	29e0c <k_delayed_work_cancel+0x54>
   29e68:	20002878 	.word	0x20002878

00029e6c <k_delayed_work_submit_to_queue>:
{
   29e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   29e6e:	f04f 0320 	mov.w	r3, #32
   29e72:	f3ef 8711 	mrs	r7, BASEPRI
   29e76:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   29e7a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   29e7c:	b113      	cbz	r3, 29e84 <k_delayed_work_submit_to_queue+0x18>
   29e7e:	4283      	cmp	r3, r0
   29e80:	f040 80b4 	bne.w	29fec <k_delayed_work_submit_to_queue+0x180>
   29e84:	4614      	mov	r4, r2
   29e86:	460e      	mov	r6, r1
   29e88:	4605      	mov	r5, r0
	if (work->work_q == work_q) {
   29e8a:	4283      	cmp	r3, r0
   29e8c:	d016      	beq.n	29ebc <k_delayed_work_submit_to_queue+0x50>
	work->work_q = work_q;
   29e8e:	6275      	str	r5, [r6, #36]	; 0x24
	if (!delay) {
   29e90:	b1d4      	cbz	r4, 29ec8 <k_delayed_work_submit_to_queue+0x5c>
		_add_timeout(NULL, &work->timeout, NULL,
   29e92:	f106 050c 	add.w	r5, r6, #12
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   29e96:	f104 0309 	add.w	r3, r4, #9
   29e9a:	4c57      	ldr	r4, [pc, #348]	; (29ff8 <k_delayed_work_submit_to_queue+0x18c>)
   29e9c:	fba4 2303 	umull	r2, r3, r4, r3
   29ea0:	08db      	lsrs	r3, r3, #3
   29ea2:	3301      	adds	r3, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   29ea4:	612b      	str	r3, [r5, #16]
	timeout->thread = thread;
   29ea6:	2200      	movs	r2, #0
   29ea8:	60aa      	str	r2, [r5, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   29eaa:	60ea      	str	r2, [r5, #12]
	if (!timeout_in_ticks) {
   29eac:	b32b      	cbz	r3, 29efa <k_delayed_work_submit_to_queue+0x8e>
	return list->head == list;
   29eae:	4a53      	ldr	r2, [pc, #332]	; (29ffc <k_delayed_work_submit_to_queue+0x190>)
   29eb0:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29eb4:	4293      	cmp	r3, r2
   29eb6:	d172      	bne.n	29f9e <k_delayed_work_submit_to_queue+0x132>
   29eb8:	2300      	movs	r3, #0
   29eba:	e070      	b.n	29f9e <k_delayed_work_submit_to_queue+0x132>
		err = k_delayed_work_cancel(work);
   29ebc:	4608      	mov	r0, r1
   29ebe:	f7ff ff7b 	bl	29db8 <k_delayed_work_cancel>
		if (err < 0) {
   29ec2:	2800      	cmp	r0, #0
   29ec4:	dae3      	bge.n	29e8e <k_delayed_work_submit_to_queue+0x22>
   29ec6:	e08e      	b.n	29fe6 <k_delayed_work_submit_to_queue+0x17a>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   29ec8:	f106 0308 	add.w	r3, r6, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29ecc:	f3bf 8f5b 	dmb	ish
   29ed0:	e853 2f00 	ldrex	r2, [r3]
   29ed4:	f042 0101 	orr.w	r1, r2, #1
   29ed8:	e843 1000 	strex	r0, r1, [r3]
   29edc:	2800      	cmp	r0, #0
   29ede:	d1f7      	bne.n	29ed0 <k_delayed_work_submit_to_queue+0x64>
   29ee0:	f3bf 8f5b 	dmb	ish
   29ee4:	f012 0f01 	tst.w	r2, #1
   29ee8:	d001      	beq.n	29eee <k_delayed_work_submit_to_queue+0x82>
	err = 0;
   29eea:	2000      	movs	r0, #0
   29eec:	e07b      	b.n	29fe6 <k_delayed_work_submit_to_queue+0x17a>
		k_queue_append(&work_q->queue, work);
   29eee:	4631      	mov	r1, r6
   29ef0:	4628      	mov	r0, r5
   29ef2:	f7fe fddb 	bl	28aac <k_queue_append>
   29ef6:	2000      	movs	r0, #0
   29ef8:	e075      	b.n	29fe6 <k_delayed_work_submit_to_queue+0x17a>
	struct k_thread *thread = timeout->thread;
   29efa:	4610      	mov	r0, r2
   29efc:	f04f 0320 	mov.w	r3, #32
   29f00:	f3ef 8411 	mrs	r4, BASEPRI
   29f04:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   29f08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29f0c:	612b      	str	r3, [r5, #16]
	if (thread) {
   29f0e:	b322      	cbz	r2, 29f5a <k_delayed_work_submit_to_queue+0xee>
	if (timeout_obj->wait_q) {
   29f10:	68eb      	ldr	r3, [r5, #12]
   29f12:	b153      	cbz	r3, 29f2a <k_delayed_work_submit_to_queue+0xbe>
	node->prev->next = node->next;
   29f14:	6853      	ldr	r3, [r2, #4]
   29f16:	6812      	ldr	r2, [r2, #0]
   29f18:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29f1a:	6803      	ldr	r3, [r0, #0]
   29f1c:	6842      	ldr	r2, [r0, #4]
   29f1e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29f20:	7a43      	ldrb	r3, [r0, #9]
   29f22:	f023 0302 	bic.w	r3, r3, #2
   29f26:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   29f28:	61c0      	str	r0, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29f2a:	7a43      	ldrb	r3, [r0, #9]
   29f2c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29f30:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29f32:	f013 0f1b 	tst.w	r3, #27
   29f36:	d107      	bne.n	29f48 <k_delayed_work_submit_to_queue+0xdc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29f38:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29f3e:	d001      	beq.n	29f44 <k_delayed_work_submit_to_queue+0xd8>
   29f40:	2300      	movs	r3, #0
   29f42:	e002      	b.n	29f4a <k_delayed_work_submit_to_queue+0xde>
   29f44:	2301      	movs	r3, #1
   29f46:	e000      	b.n	29f4a <k_delayed_work_submit_to_queue+0xde>
   29f48:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29f4a:	b91b      	cbnz	r3, 29f54 <k_delayed_work_submit_to_queue+0xe8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29f4c:	f384 8811 	msr	BASEPRI, r4
   29f50:	2000      	movs	r0, #0
   29f52:	e048      	b.n	29fe6 <k_delayed_work_submit_to_queue+0x17a>
		_add_thread_to_ready_q(thread);
   29f54:	f7fe fe24 	bl	28ba0 <_add_thread_to_ready_q>
   29f58:	e7f8      	b.n	29f4c <k_delayed_work_submit_to_queue+0xe0>
   29f5a:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
   29f5e:	696b      	ldr	r3, [r5, #20]
   29f60:	2b00      	cmp	r3, #0
   29f62:	d046      	beq.n	29ff2 <k_delayed_work_submit_to_queue+0x186>
			timeout->func(timeout);
   29f64:	4628      	mov	r0, r5
   29f66:	4798      	blx	r3
   29f68:	2000      	movs	r0, #0
   29f6a:	e03c      	b.n	29fe6 <k_delayed_work_submit_to_queue+0x17a>
			in_q->delta_ticks_from_prev -= *delta;
   29f6c:	1aa2      	subs	r2, r4, r2
   29f6e:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29f70:	b13b      	cbz	r3, 29f82 <k_delayed_work_submit_to_queue+0x116>
		node->prev = insert_point->prev;
   29f72:	685a      	ldr	r2, [r3, #4]
   29f74:	606a      	str	r2, [r5, #4]
		node->next = insert_point;
   29f76:	60f3      	str	r3, [r6, #12]
		insert_point->prev->next = node;
   29f78:	685a      	ldr	r2, [r3, #4]
   29f7a:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   29f7c:	605d      	str	r5, [r3, #4]
   29f7e:	2000      	movs	r0, #0
   29f80:	e031      	b.n	29fe6 <k_delayed_work_submit_to_queue+0x17a>
	node->next = list;
   29f82:	4b1f      	ldr	r3, [pc, #124]	; (2a000 <k_delayed_work_submit_to_queue+0x194>)
   29f84:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   29f86:	685a      	ldr	r2, [r3, #4]
   29f88:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   29f8a:	685a      	ldr	r2, [r3, #4]
   29f8c:	6015      	str	r5, [r2, #0]
	list->tail = node;
   29f8e:	605d      	str	r5, [r3, #4]
   29f90:	2000      	movs	r0, #0
   29f92:	e028      	b.n	29fe6 <k_delayed_work_submit_to_queue+0x17a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29f94:	4619      	mov	r1, r3
   29f96:	e011      	b.n	29fbc <k_delayed_work_submit_to_queue+0x150>
	return (node == list->tail) ? NULL : node->next;
   29f98:	2100      	movs	r1, #0
   29f9a:	e00f      	b.n	29fbc <k_delayed_work_submit_to_queue+0x150>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29f9c:	2300      	movs	r3, #0
   29f9e:	b1d3      	cbz	r3, 29fd6 <k_delayed_work_submit_to_queue+0x16a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29fa0:	692a      	ldr	r2, [r5, #16]
   29fa2:	691c      	ldr	r4, [r3, #16]
   29fa4:	42a2      	cmp	r2, r4
   29fa6:	dde1      	ble.n	29f6c <k_delayed_work_submit_to_queue+0x100>
		*delta -= in_q->delta_ticks_from_prev;
   29fa8:	1b12      	subs	r2, r2, r4
   29faa:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29fac:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29fae:	2b00      	cmp	r3, #0
   29fb0:	d0f0      	beq.n	29f94 <k_delayed_work_submit_to_queue+0x128>
	return (node == list->tail) ? NULL : node->next;
   29fb2:	4912      	ldr	r1, [pc, #72]	; (29ffc <k_delayed_work_submit_to_queue+0x190>)
   29fb4:	6909      	ldr	r1, [r1, #16]
   29fb6:	428b      	cmp	r3, r1
   29fb8:	d0ee      	beq.n	29f98 <k_delayed_work_submit_to_queue+0x12c>
   29fba:	6819      	ldr	r1, [r3, #0]
   29fbc:	2900      	cmp	r1, #0
   29fbe:	d0ed      	beq.n	29f9c <k_delayed_work_submit_to_queue+0x130>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29fc0:	b12a      	cbz	r2, 29fce <k_delayed_work_submit_to_queue+0x162>
	return (node == list->tail) ? NULL : node->next;
   29fc2:	490e      	ldr	r1, [pc, #56]	; (29ffc <k_delayed_work_submit_to_queue+0x190>)
   29fc4:	6909      	ldr	r1, [r1, #16]
   29fc6:	428a      	cmp	r2, r1
   29fc8:	d003      	beq.n	29fd2 <k_delayed_work_submit_to_queue+0x166>
   29fca:	681b      	ldr	r3, [r3, #0]
   29fcc:	e7e7      	b.n	29f9e <k_delayed_work_submit_to_queue+0x132>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29fce:	2300      	movs	r3, #0
   29fd0:	e7e5      	b.n	29f9e <k_delayed_work_submit_to_queue+0x132>
	return (node == list->tail) ? NULL : node->next;
   29fd2:	2300      	movs	r3, #0
   29fd4:	e7e3      	b.n	29f9e <k_delayed_work_submit_to_queue+0x132>
	node->next = list;
   29fd6:	4b0a      	ldr	r3, [pc, #40]	; (2a000 <k_delayed_work_submit_to_queue+0x194>)
   29fd8:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   29fda:	685a      	ldr	r2, [r3, #4]
   29fdc:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   29fde:	685a      	ldr	r2, [r3, #4]
   29fe0:	6015      	str	r5, [r2, #0]
	list->tail = node;
   29fe2:	605d      	str	r5, [r3, #4]
   29fe4:	2000      	movs	r0, #0
   29fe6:	f387 8811 	msr	BASEPRI, r7
}
   29fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EADDRINUSE;
   29fec:	f06f 006f 	mvn.w	r0, #111	; 0x6f
   29ff0:	e7f9      	b.n	29fe6 <k_delayed_work_submit_to_queue+0x17a>
	err = 0;
   29ff2:	2000      	movs	r0, #0
   29ff4:	e7f7      	b.n	29fe6 <k_delayed_work_submit_to_queue+0x17a>
   29ff6:	bf00      	nop
   29ff8:	cccccccd 	.word	0xcccccccd
   29ffc:	20002878 	.word	0x20002878
   2a000:	20002884 	.word	0x20002884

0002a004 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   2a004:	4770      	bx	lr
	...

0002a008 <__locale_ctype_ptr_l>:
   2a008:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2a00c:	4770      	bx	lr
   2a00e:	bf00      	nop

0002a010 <__locale_ctype_ptr>:
   2a010:	4b04      	ldr	r3, [pc, #16]	; (2a024 <__locale_ctype_ptr+0x14>)
   2a012:	4a05      	ldr	r2, [pc, #20]	; (2a028 <__locale_ctype_ptr+0x18>)
   2a014:	681b      	ldr	r3, [r3, #0]
   2a016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2a018:	2b00      	cmp	r3, #0
   2a01a:	bf08      	it	eq
   2a01c:	4613      	moveq	r3, r2
   2a01e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   2a022:	4770      	bx	lr
   2a024:	2000c7e8 	.word	0x2000c7e8
   2a028:	2000c67c 	.word	0x2000c67c

0002a02c <__ascii_mbtowc>:
   2a02c:	b082      	sub	sp, #8
   2a02e:	b149      	cbz	r1, 2a044 <__ascii_mbtowc+0x18>
   2a030:	b15a      	cbz	r2, 2a04a <__ascii_mbtowc+0x1e>
   2a032:	b16b      	cbz	r3, 2a050 <__ascii_mbtowc+0x24>
   2a034:	7813      	ldrb	r3, [r2, #0]
   2a036:	600b      	str	r3, [r1, #0]
   2a038:	7812      	ldrb	r2, [r2, #0]
   2a03a:	1c10      	adds	r0, r2, #0
   2a03c:	bf18      	it	ne
   2a03e:	2001      	movne	r0, #1
   2a040:	b002      	add	sp, #8
   2a042:	4770      	bx	lr
   2a044:	a901      	add	r1, sp, #4
   2a046:	2a00      	cmp	r2, #0
   2a048:	d1f3      	bne.n	2a032 <__ascii_mbtowc+0x6>
   2a04a:	4610      	mov	r0, r2
   2a04c:	b002      	add	sp, #8
   2a04e:	4770      	bx	lr
   2a050:	f06f 0001 	mvn.w	r0, #1
   2a054:	e7f4      	b.n	2a040 <__ascii_mbtowc+0x14>
   2a056:	bf00      	nop

0002a058 <memcmp>:
   2a058:	2a03      	cmp	r2, #3
   2a05a:	b470      	push	{r4, r5, r6}
   2a05c:	d922      	bls.n	2a0a4 <memcmp+0x4c>
   2a05e:	ea40 0301 	orr.w	r3, r0, r1
   2a062:	079b      	lsls	r3, r3, #30
   2a064:	d011      	beq.n	2a08a <memcmp+0x32>
   2a066:	7803      	ldrb	r3, [r0, #0]
   2a068:	780c      	ldrb	r4, [r1, #0]
   2a06a:	42a3      	cmp	r3, r4
   2a06c:	d11d      	bne.n	2a0aa <memcmp+0x52>
   2a06e:	440a      	add	r2, r1
   2a070:	3101      	adds	r1, #1
   2a072:	e005      	b.n	2a080 <memcmp+0x28>
   2a074:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2a078:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a07c:	42a3      	cmp	r3, r4
   2a07e:	d114      	bne.n	2a0aa <memcmp+0x52>
   2a080:	4291      	cmp	r1, r2
   2a082:	d1f7      	bne.n	2a074 <memcmp+0x1c>
   2a084:	2000      	movs	r0, #0
   2a086:	bc70      	pop	{r4, r5, r6}
   2a088:	4770      	bx	lr
   2a08a:	680d      	ldr	r5, [r1, #0]
   2a08c:	6806      	ldr	r6, [r0, #0]
   2a08e:	42ae      	cmp	r6, r5
   2a090:	460c      	mov	r4, r1
   2a092:	4603      	mov	r3, r0
   2a094:	f101 0104 	add.w	r1, r1, #4
   2a098:	f100 0004 	add.w	r0, r0, #4
   2a09c:	d108      	bne.n	2a0b0 <memcmp+0x58>
   2a09e:	3a04      	subs	r2, #4
   2a0a0:	2a03      	cmp	r2, #3
   2a0a2:	d8f2      	bhi.n	2a08a <memcmp+0x32>
   2a0a4:	2a00      	cmp	r2, #0
   2a0a6:	d1de      	bne.n	2a066 <memcmp+0xe>
   2a0a8:	e7ec      	b.n	2a084 <memcmp+0x2c>
   2a0aa:	1b18      	subs	r0, r3, r4
   2a0ac:	bc70      	pop	{r4, r5, r6}
   2a0ae:	4770      	bx	lr
   2a0b0:	4621      	mov	r1, r4
   2a0b2:	4618      	mov	r0, r3
   2a0b4:	e7d7      	b.n	2a066 <memcmp+0xe>
   2a0b6:	bf00      	nop

0002a0b8 <memmove>:
   2a0b8:	4288      	cmp	r0, r1
   2a0ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a0bc:	d90d      	bls.n	2a0da <memmove+0x22>
   2a0be:	188b      	adds	r3, r1, r2
   2a0c0:	4298      	cmp	r0, r3
   2a0c2:	d20a      	bcs.n	2a0da <memmove+0x22>
   2a0c4:	1884      	adds	r4, r0, r2
   2a0c6:	2a00      	cmp	r2, #0
   2a0c8:	d051      	beq.n	2a16e <memmove+0xb6>
   2a0ca:	4622      	mov	r2, r4
   2a0cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2a0d0:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2a0d4:	4299      	cmp	r1, r3
   2a0d6:	d1f9      	bne.n	2a0cc <memmove+0x14>
   2a0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a0da:	2a0f      	cmp	r2, #15
   2a0dc:	d948      	bls.n	2a170 <memmove+0xb8>
   2a0de:	ea41 0300 	orr.w	r3, r1, r0
   2a0e2:	079b      	lsls	r3, r3, #30
   2a0e4:	d146      	bne.n	2a174 <memmove+0xbc>
   2a0e6:	f100 0410 	add.w	r4, r0, #16
   2a0ea:	f101 0310 	add.w	r3, r1, #16
   2a0ee:	4615      	mov	r5, r2
   2a0f0:	f853 6c10 	ldr.w	r6, [r3, #-16]
   2a0f4:	f844 6c10 	str.w	r6, [r4, #-16]
   2a0f8:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   2a0fc:	f844 6c0c 	str.w	r6, [r4, #-12]
   2a100:	f853 6c08 	ldr.w	r6, [r3, #-8]
   2a104:	f844 6c08 	str.w	r6, [r4, #-8]
   2a108:	3d10      	subs	r5, #16
   2a10a:	f853 6c04 	ldr.w	r6, [r3, #-4]
   2a10e:	f844 6c04 	str.w	r6, [r4, #-4]
   2a112:	2d0f      	cmp	r5, #15
   2a114:	f103 0310 	add.w	r3, r3, #16
   2a118:	f104 0410 	add.w	r4, r4, #16
   2a11c:	d8e8      	bhi.n	2a0f0 <memmove+0x38>
   2a11e:	f1a2 0310 	sub.w	r3, r2, #16
   2a122:	f023 030f 	bic.w	r3, r3, #15
   2a126:	f002 0e0f 	and.w	lr, r2, #15
   2a12a:	3310      	adds	r3, #16
   2a12c:	f1be 0f03 	cmp.w	lr, #3
   2a130:	4419      	add	r1, r3
   2a132:	4403      	add	r3, r0
   2a134:	d921      	bls.n	2a17a <memmove+0xc2>
   2a136:	1f1e      	subs	r6, r3, #4
   2a138:	460d      	mov	r5, r1
   2a13a:	4674      	mov	r4, lr
   2a13c:	3c04      	subs	r4, #4
   2a13e:	f855 7b04 	ldr.w	r7, [r5], #4
   2a142:	f846 7f04 	str.w	r7, [r6, #4]!
   2a146:	2c03      	cmp	r4, #3
   2a148:	d8f8      	bhi.n	2a13c <memmove+0x84>
   2a14a:	f1ae 0404 	sub.w	r4, lr, #4
   2a14e:	f024 0403 	bic.w	r4, r4, #3
   2a152:	3404      	adds	r4, #4
   2a154:	4421      	add	r1, r4
   2a156:	4423      	add	r3, r4
   2a158:	f002 0203 	and.w	r2, r2, #3
   2a15c:	b162      	cbz	r2, 2a178 <memmove+0xc0>
   2a15e:	3b01      	subs	r3, #1
   2a160:	440a      	add	r2, r1
   2a162:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a166:	f803 4f01 	strb.w	r4, [r3, #1]!
   2a16a:	428a      	cmp	r2, r1
   2a16c:	d1f9      	bne.n	2a162 <memmove+0xaa>
   2a16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a170:	4603      	mov	r3, r0
   2a172:	e7f3      	b.n	2a15c <memmove+0xa4>
   2a174:	4603      	mov	r3, r0
   2a176:	e7f2      	b.n	2a15e <memmove+0xa6>
   2a178:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a17a:	4672      	mov	r2, lr
   2a17c:	e7ee      	b.n	2a15c <memmove+0xa4>
   2a17e:	bf00      	nop

0002a180 <memset>:
   2a180:	b470      	push	{r4, r5, r6}
   2a182:	0786      	lsls	r6, r0, #30
   2a184:	d046      	beq.n	2a214 <memset+0x94>
   2a186:	1e54      	subs	r4, r2, #1
   2a188:	2a00      	cmp	r2, #0
   2a18a:	d041      	beq.n	2a210 <memset+0x90>
   2a18c:	b2ca      	uxtb	r2, r1
   2a18e:	4603      	mov	r3, r0
   2a190:	e002      	b.n	2a198 <memset+0x18>
   2a192:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   2a196:	d33b      	bcc.n	2a210 <memset+0x90>
   2a198:	f803 2b01 	strb.w	r2, [r3], #1
   2a19c:	079d      	lsls	r5, r3, #30
   2a19e:	d1f8      	bne.n	2a192 <memset+0x12>
   2a1a0:	2c03      	cmp	r4, #3
   2a1a2:	d92e      	bls.n	2a202 <memset+0x82>
   2a1a4:	b2cd      	uxtb	r5, r1
   2a1a6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   2a1aa:	2c0f      	cmp	r4, #15
   2a1ac:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   2a1b0:	d919      	bls.n	2a1e6 <memset+0x66>
   2a1b2:	f103 0210 	add.w	r2, r3, #16
   2a1b6:	4626      	mov	r6, r4
   2a1b8:	3e10      	subs	r6, #16
   2a1ba:	2e0f      	cmp	r6, #15
   2a1bc:	f842 5c10 	str.w	r5, [r2, #-16]
   2a1c0:	f842 5c0c 	str.w	r5, [r2, #-12]
   2a1c4:	f842 5c08 	str.w	r5, [r2, #-8]
   2a1c8:	f842 5c04 	str.w	r5, [r2, #-4]
   2a1cc:	f102 0210 	add.w	r2, r2, #16
   2a1d0:	d8f2      	bhi.n	2a1b8 <memset+0x38>
   2a1d2:	f1a4 0210 	sub.w	r2, r4, #16
   2a1d6:	f022 020f 	bic.w	r2, r2, #15
   2a1da:	f004 040f 	and.w	r4, r4, #15
   2a1de:	3210      	adds	r2, #16
   2a1e0:	2c03      	cmp	r4, #3
   2a1e2:	4413      	add	r3, r2
   2a1e4:	d90d      	bls.n	2a202 <memset+0x82>
   2a1e6:	461e      	mov	r6, r3
   2a1e8:	4622      	mov	r2, r4
   2a1ea:	3a04      	subs	r2, #4
   2a1ec:	2a03      	cmp	r2, #3
   2a1ee:	f846 5b04 	str.w	r5, [r6], #4
   2a1f2:	d8fa      	bhi.n	2a1ea <memset+0x6a>
   2a1f4:	1f22      	subs	r2, r4, #4
   2a1f6:	f022 0203 	bic.w	r2, r2, #3
   2a1fa:	3204      	adds	r2, #4
   2a1fc:	4413      	add	r3, r2
   2a1fe:	f004 0403 	and.w	r4, r4, #3
   2a202:	b12c      	cbz	r4, 2a210 <memset+0x90>
   2a204:	b2c9      	uxtb	r1, r1
   2a206:	441c      	add	r4, r3
   2a208:	f803 1b01 	strb.w	r1, [r3], #1
   2a20c:	429c      	cmp	r4, r3
   2a20e:	d1fb      	bne.n	2a208 <memset+0x88>
   2a210:	bc70      	pop	{r4, r5, r6}
   2a212:	4770      	bx	lr
   2a214:	4614      	mov	r4, r2
   2a216:	4603      	mov	r3, r0
   2a218:	e7c2      	b.n	2a1a0 <memset+0x20>
   2a21a:	bf00      	nop

0002a21c <snprintf>:
   2a21c:	b40c      	push	{r2, r3}
   2a21e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a220:	4b23      	ldr	r3, [pc, #140]	; (2a2b0 <snprintf+0x94>)
   2a222:	1e0c      	subs	r4, r1, #0
   2a224:	b09d      	sub	sp, #116	; 0x74
   2a226:	681d      	ldr	r5, [r3, #0]
   2a228:	db3d      	blt.n	2a2a6 <snprintf+0x8a>
   2a22a:	f44f 7302 	mov.w	r3, #520	; 0x208
   2a22e:	9002      	str	r0, [sp, #8]
   2a230:	9006      	str	r0, [sp, #24]
   2a232:	f8ad 3014 	strh.w	r3, [sp, #20]
   2a236:	ae23      	add	r6, sp, #140	; 0x8c
   2a238:	d017      	beq.n	2a26a <snprintf+0x4e>
   2a23a:	3c01      	subs	r4, #1
   2a23c:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2a23e:	9404      	str	r4, [sp, #16]
   2a240:	4633      	mov	r3, r6
   2a242:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2a246:	a902      	add	r1, sp, #8
   2a248:	4628      	mov	r0, r5
   2a24a:	9407      	str	r4, [sp, #28]
   2a24c:	9601      	str	r6, [sp, #4]
   2a24e:	f8ad 7016 	strh.w	r7, [sp, #22]
   2a252:	f000 fd7f 	bl	2ad54 <_svfprintf_r>
   2a256:	1c42      	adds	r2, r0, #1
   2a258:	db1b      	blt.n	2a292 <snprintf+0x76>
   2a25a:	9b02      	ldr	r3, [sp, #8]
   2a25c:	2200      	movs	r2, #0
   2a25e:	701a      	strb	r2, [r3, #0]
   2a260:	b01d      	add	sp, #116	; 0x74
   2a262:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2a266:	b002      	add	sp, #8
   2a268:	4770      	bx	lr
   2a26a:	4633      	mov	r3, r6
   2a26c:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2a270:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2a272:	9404      	str	r4, [sp, #16]
   2a274:	a902      	add	r1, sp, #8
   2a276:	4628      	mov	r0, r5
   2a278:	9407      	str	r4, [sp, #28]
   2a27a:	9601      	str	r6, [sp, #4]
   2a27c:	f8ad 7016 	strh.w	r7, [sp, #22]
   2a280:	f000 fd68 	bl	2ad54 <_svfprintf_r>
   2a284:	1c43      	adds	r3, r0, #1
   2a286:	db07      	blt.n	2a298 <snprintf+0x7c>
   2a288:	b01d      	add	sp, #116	; 0x74
   2a28a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2a28e:	b002      	add	sp, #8
   2a290:	4770      	bx	lr
   2a292:	238b      	movs	r3, #139	; 0x8b
   2a294:	602b      	str	r3, [r5, #0]
   2a296:	e7e0      	b.n	2a25a <snprintf+0x3e>
   2a298:	238b      	movs	r3, #139	; 0x8b
   2a29a:	602b      	str	r3, [r5, #0]
   2a29c:	b01d      	add	sp, #116	; 0x74
   2a29e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2a2a2:	b002      	add	sp, #8
   2a2a4:	4770      	bx	lr
   2a2a6:	238b      	movs	r3, #139	; 0x8b
   2a2a8:	602b      	str	r3, [r5, #0]
   2a2aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a2ae:	e7eb      	b.n	2a288 <snprintf+0x6c>
   2a2b0:	2000c7e8 	.word	0x2000c7e8

0002a2b4 <strcat>:
   2a2b4:	0783      	lsls	r3, r0, #30
   2a2b6:	b510      	push	{r4, lr}
   2a2b8:	4604      	mov	r4, r0
   2a2ba:	d110      	bne.n	2a2de <strcat+0x2a>
   2a2bc:	6802      	ldr	r2, [r0, #0]
   2a2be:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2a2c2:	ea23 0302 	bic.w	r3, r3, r2
   2a2c6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2a2ca:	d108      	bne.n	2a2de <strcat+0x2a>
   2a2cc:	f850 2f04 	ldr.w	r2, [r0, #4]!
   2a2d0:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2a2d4:	ea23 0302 	bic.w	r3, r3, r2
   2a2d8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2a2dc:	d0f6      	beq.n	2a2cc <strcat+0x18>
   2a2de:	7803      	ldrb	r3, [r0, #0]
   2a2e0:	b11b      	cbz	r3, 2a2ea <strcat+0x36>
   2a2e2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2a2e6:	2b00      	cmp	r3, #0
   2a2e8:	d1fb      	bne.n	2a2e2 <strcat+0x2e>
   2a2ea:	f000 f877 	bl	2a3dc <strcpy>
   2a2ee:	4620      	mov	r0, r4
   2a2f0:	bd10      	pop	{r4, pc}
   2a2f2:	bf00      	nop

0002a2f4 <strchr>:
   2a2f4:	b2c9      	uxtb	r1, r1
   2a2f6:	2900      	cmp	r1, #0
   2a2f8:	d041      	beq.n	2a37e <strchr+0x8a>
   2a2fa:	0782      	lsls	r2, r0, #30
   2a2fc:	b4f0      	push	{r4, r5, r6, r7}
   2a2fe:	d067      	beq.n	2a3d0 <strchr+0xdc>
   2a300:	7803      	ldrb	r3, [r0, #0]
   2a302:	2b00      	cmp	r3, #0
   2a304:	d068      	beq.n	2a3d8 <strchr+0xe4>
   2a306:	4299      	cmp	r1, r3
   2a308:	d037      	beq.n	2a37a <strchr+0x86>
   2a30a:	1c43      	adds	r3, r0, #1
   2a30c:	e004      	b.n	2a318 <strchr+0x24>
   2a30e:	f813 0b01 	ldrb.w	r0, [r3], #1
   2a312:	b390      	cbz	r0, 2a37a <strchr+0x86>
   2a314:	4281      	cmp	r1, r0
   2a316:	d02f      	beq.n	2a378 <strchr+0x84>
   2a318:	079a      	lsls	r2, r3, #30
   2a31a:	461c      	mov	r4, r3
   2a31c:	d1f7      	bne.n	2a30e <strchr+0x1a>
   2a31e:	6825      	ldr	r5, [r4, #0]
   2a320:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
   2a324:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
   2a328:	ea83 0605 	eor.w	r6, r3, r5
   2a32c:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
   2a330:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   2a334:	ea20 0006 	bic.w	r0, r0, r6
   2a338:	ea22 0205 	bic.w	r2, r2, r5
   2a33c:	4302      	orrs	r2, r0
   2a33e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2a342:	d111      	bne.n	2a368 <strchr+0x74>
   2a344:	4620      	mov	r0, r4
   2a346:	f850 6f04 	ldr.w	r6, [r0, #4]!
   2a34a:	ea83 0706 	eor.w	r7, r3, r6
   2a34e:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
   2a352:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
   2a356:	ea25 0507 	bic.w	r5, r5, r7
   2a35a:	ea22 0206 	bic.w	r2, r2, r6
   2a35e:	432a      	orrs	r2, r5
   2a360:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2a364:	d0ef      	beq.n	2a346 <strchr+0x52>
   2a366:	4604      	mov	r4, r0
   2a368:	7820      	ldrb	r0, [r4, #0]
   2a36a:	b918      	cbnz	r0, 2a374 <strchr+0x80>
   2a36c:	e005      	b.n	2a37a <strchr+0x86>
   2a36e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   2a372:	b110      	cbz	r0, 2a37a <strchr+0x86>
   2a374:	4281      	cmp	r1, r0
   2a376:	d1fa      	bne.n	2a36e <strchr+0x7a>
   2a378:	4620      	mov	r0, r4
   2a37a:	bcf0      	pop	{r4, r5, r6, r7}
   2a37c:	4770      	bx	lr
   2a37e:	0783      	lsls	r3, r0, #30
   2a380:	d024      	beq.n	2a3cc <strchr+0xd8>
   2a382:	7803      	ldrb	r3, [r0, #0]
   2a384:	2b00      	cmp	r3, #0
   2a386:	d0f9      	beq.n	2a37c <strchr+0x88>
   2a388:	1c43      	adds	r3, r0, #1
   2a38a:	e003      	b.n	2a394 <strchr+0xa0>
   2a38c:	7802      	ldrb	r2, [r0, #0]
   2a38e:	3301      	adds	r3, #1
   2a390:	2a00      	cmp	r2, #0
   2a392:	d0f3      	beq.n	2a37c <strchr+0x88>
   2a394:	0799      	lsls	r1, r3, #30
   2a396:	4618      	mov	r0, r3
   2a398:	d1f8      	bne.n	2a38c <strchr+0x98>
   2a39a:	6819      	ldr	r1, [r3, #0]
   2a39c:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2a3a0:	ea22 0201 	bic.w	r2, r2, r1
   2a3a4:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2a3a8:	d108      	bne.n	2a3bc <strchr+0xc8>
   2a3aa:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2a3ae:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2a3b2:	ea22 0201 	bic.w	r2, r2, r1
   2a3b6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2a3ba:	d0f6      	beq.n	2a3aa <strchr+0xb6>
   2a3bc:	781a      	ldrb	r2, [r3, #0]
   2a3be:	4618      	mov	r0, r3
   2a3c0:	b142      	cbz	r2, 2a3d4 <strchr+0xe0>
   2a3c2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2a3c6:	2b00      	cmp	r3, #0
   2a3c8:	d1fb      	bne.n	2a3c2 <strchr+0xce>
   2a3ca:	4770      	bx	lr
   2a3cc:	4603      	mov	r3, r0
   2a3ce:	e7e4      	b.n	2a39a <strchr+0xa6>
   2a3d0:	4604      	mov	r4, r0
   2a3d2:	e7a4      	b.n	2a31e <strchr+0x2a>
   2a3d4:	4618      	mov	r0, r3
   2a3d6:	4770      	bx	lr
   2a3d8:	4618      	mov	r0, r3
   2a3da:	e7ce      	b.n	2a37a <strchr+0x86>

0002a3dc <strcpy>:
   2a3dc:	ea80 0201 	eor.w	r2, r0, r1
   2a3e0:	4684      	mov	ip, r0
   2a3e2:	f012 0f03 	tst.w	r2, #3
   2a3e6:	d14f      	bne.n	2a488 <strcpy+0xac>
   2a3e8:	f011 0f03 	tst.w	r1, #3
   2a3ec:	d132      	bne.n	2a454 <strcpy+0x78>
   2a3ee:	f84d 4d04 	str.w	r4, [sp, #-4]!
   2a3f2:	f011 0f04 	tst.w	r1, #4
   2a3f6:	f851 3b04 	ldr.w	r3, [r1], #4
   2a3fa:	d00b      	beq.n	2a414 <strcpy+0x38>
   2a3fc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2a400:	439a      	bics	r2, r3
   2a402:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2a406:	bf04      	itt	eq
   2a408:	f84c 3b04 	streq.w	r3, [ip], #4
   2a40c:	f851 3b04 	ldreq.w	r3, [r1], #4
   2a410:	d116      	bne.n	2a440 <strcpy+0x64>
   2a412:	bf00      	nop
   2a414:	f851 4b04 	ldr.w	r4, [r1], #4
   2a418:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2a41c:	439a      	bics	r2, r3
   2a41e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2a422:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   2a426:	d10b      	bne.n	2a440 <strcpy+0x64>
   2a428:	f84c 3b04 	str.w	r3, [ip], #4
   2a42c:	43a2      	bics	r2, r4
   2a42e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2a432:	bf04      	itt	eq
   2a434:	f851 3b04 	ldreq.w	r3, [r1], #4
   2a438:	f84c 4b04 	streq.w	r4, [ip], #4
   2a43c:	d0ea      	beq.n	2a414 <strcpy+0x38>
   2a43e:	4623      	mov	r3, r4
   2a440:	f80c 3b01 	strb.w	r3, [ip], #1
   2a444:	f013 0fff 	tst.w	r3, #255	; 0xff
   2a448:	ea4f 2333 	mov.w	r3, r3, ror #8
   2a44c:	d1f8      	bne.n	2a440 <strcpy+0x64>
   2a44e:	f85d 4b04 	ldr.w	r4, [sp], #4
   2a452:	4770      	bx	lr
   2a454:	f011 0f01 	tst.w	r1, #1
   2a458:	d006      	beq.n	2a468 <strcpy+0x8c>
   2a45a:	f811 2b01 	ldrb.w	r2, [r1], #1
   2a45e:	f80c 2b01 	strb.w	r2, [ip], #1
   2a462:	2a00      	cmp	r2, #0
   2a464:	bf08      	it	eq
   2a466:	4770      	bxeq	lr
   2a468:	f011 0f02 	tst.w	r1, #2
   2a46c:	d0bf      	beq.n	2a3ee <strcpy+0x12>
   2a46e:	f831 2b02 	ldrh.w	r2, [r1], #2
   2a472:	f012 0fff 	tst.w	r2, #255	; 0xff
   2a476:	bf16      	itet	ne
   2a478:	f82c 2b02 	strhne.w	r2, [ip], #2
   2a47c:	f88c 2000 	strbeq.w	r2, [ip]
   2a480:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   2a484:	d1b3      	bne.n	2a3ee <strcpy+0x12>
   2a486:	4770      	bx	lr
   2a488:	f811 2b01 	ldrb.w	r2, [r1], #1
   2a48c:	f80c 2b01 	strb.w	r2, [ip], #1
   2a490:	2a00      	cmp	r2, #0
   2a492:	d1f9      	bne.n	2a488 <strcpy+0xac>
   2a494:	4770      	bx	lr
   2a496:	bf00      	nop

0002a498 <strncmp>:
   2a498:	2a00      	cmp	r2, #0
   2a49a:	d041      	beq.n	2a520 <strncmp+0x88>
   2a49c:	ea40 0301 	orr.w	r3, r0, r1
   2a4a0:	f013 0303 	ands.w	r3, r3, #3
   2a4a4:	b4f0      	push	{r4, r5, r6, r7}
   2a4a6:	d125      	bne.n	2a4f4 <strncmp+0x5c>
   2a4a8:	2a03      	cmp	r2, #3
   2a4aa:	d923      	bls.n	2a4f4 <strncmp+0x5c>
   2a4ac:	6804      	ldr	r4, [r0, #0]
   2a4ae:	680d      	ldr	r5, [r1, #0]
   2a4b0:	42ac      	cmp	r4, r5
   2a4b2:	d11f      	bne.n	2a4f4 <strncmp+0x5c>
   2a4b4:	3a04      	subs	r2, #4
   2a4b6:	d038      	beq.n	2a52a <strncmp+0x92>
   2a4b8:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   2a4bc:	ea25 0404 	bic.w	r4, r5, r4
   2a4c0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2a4c4:	d12e      	bne.n	2a524 <strncmp+0x8c>
   2a4c6:	3004      	adds	r0, #4
   2a4c8:	3104      	adds	r1, #4
   2a4ca:	e00f      	b.n	2a4ec <strncmp+0x54>
   2a4cc:	f850 3b04 	ldr.w	r3, [r0], #4
   2a4d0:	680e      	ldr	r6, [r1, #0]
   2a4d2:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   2a4d6:	42b3      	cmp	r3, r6
   2a4d8:	ea24 0403 	bic.w	r4, r4, r3
   2a4dc:	f101 0104 	add.w	r1, r1, #4
   2a4e0:	d126      	bne.n	2a530 <strncmp+0x98>
   2a4e2:	3a04      	subs	r2, #4
   2a4e4:	d021      	beq.n	2a52a <strncmp+0x92>
   2a4e6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2a4ea:	d11b      	bne.n	2a524 <strncmp+0x8c>
   2a4ec:	2a03      	cmp	r2, #3
   2a4ee:	4607      	mov	r7, r0
   2a4f0:	460d      	mov	r5, r1
   2a4f2:	d8eb      	bhi.n	2a4cc <strncmp+0x34>
   2a4f4:	7805      	ldrb	r5, [r0, #0]
   2a4f6:	780c      	ldrb	r4, [r1, #0]
   2a4f8:	42ac      	cmp	r4, r5
   2a4fa:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   2a4fe:	d11a      	bne.n	2a536 <strncmp+0x9e>
   2a500:	b183      	cbz	r3, 2a524 <strncmp+0x8c>
   2a502:	b914      	cbnz	r4, 2a50a <strncmp+0x72>
   2a504:	e00e      	b.n	2a524 <strncmp+0x8c>
   2a506:	b16b      	cbz	r3, 2a524 <strncmp+0x8c>
   2a508:	b17a      	cbz	r2, 2a52a <strncmp+0x92>
   2a50a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   2a50e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2a512:	42a2      	cmp	r2, r4
   2a514:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   2a518:	d0f5      	beq.n	2a506 <strncmp+0x6e>
   2a51a:	1b10      	subs	r0, r2, r4
   2a51c:	bcf0      	pop	{r4, r5, r6, r7}
   2a51e:	4770      	bx	lr
   2a520:	4610      	mov	r0, r2
   2a522:	4770      	bx	lr
   2a524:	2000      	movs	r0, #0
   2a526:	bcf0      	pop	{r4, r5, r6, r7}
   2a528:	4770      	bx	lr
   2a52a:	4610      	mov	r0, r2
   2a52c:	bcf0      	pop	{r4, r5, r6, r7}
   2a52e:	4770      	bx	lr
   2a530:	4629      	mov	r1, r5
   2a532:	4638      	mov	r0, r7
   2a534:	e7de      	b.n	2a4f4 <strncmp+0x5c>
   2a536:	462a      	mov	r2, r5
   2a538:	e7ef      	b.n	2a51a <strncmp+0x82>
   2a53a:	bf00      	nop

0002a53c <strncpy>:
   2a53c:	ea40 0301 	orr.w	r3, r0, r1
   2a540:	f013 0f03 	tst.w	r3, #3
   2a544:	b470      	push	{r4, r5, r6}
   2a546:	4603      	mov	r3, r0
   2a548:	d024      	beq.n	2a594 <strncpy+0x58>
   2a54a:	b1a2      	cbz	r2, 2a576 <strncpy+0x3a>
   2a54c:	780c      	ldrb	r4, [r1, #0]
   2a54e:	701c      	strb	r4, [r3, #0]
   2a550:	3a01      	subs	r2, #1
   2a552:	3301      	adds	r3, #1
   2a554:	3101      	adds	r1, #1
   2a556:	b13c      	cbz	r4, 2a568 <strncpy+0x2c>
   2a558:	b16a      	cbz	r2, 2a576 <strncpy+0x3a>
   2a55a:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a55e:	f803 4b01 	strb.w	r4, [r3], #1
   2a562:	3a01      	subs	r2, #1
   2a564:	2c00      	cmp	r4, #0
   2a566:	d1f7      	bne.n	2a558 <strncpy+0x1c>
   2a568:	b12a      	cbz	r2, 2a576 <strncpy+0x3a>
   2a56a:	441a      	add	r2, r3
   2a56c:	2100      	movs	r1, #0
   2a56e:	f803 1b01 	strb.w	r1, [r3], #1
   2a572:	429a      	cmp	r2, r3
   2a574:	d1fb      	bne.n	2a56e <strncpy+0x32>
   2a576:	bc70      	pop	{r4, r5, r6}
   2a578:	4770      	bx	lr
   2a57a:	460e      	mov	r6, r1
   2a57c:	f851 5b04 	ldr.w	r5, [r1], #4
   2a580:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   2a584:	ea24 0405 	bic.w	r4, r4, r5
   2a588:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2a58c:	d105      	bne.n	2a59a <strncpy+0x5e>
   2a58e:	f843 5b04 	str.w	r5, [r3], #4
   2a592:	3a04      	subs	r2, #4
   2a594:	2a03      	cmp	r2, #3
   2a596:	d8f0      	bhi.n	2a57a <strncpy+0x3e>
   2a598:	e7d7      	b.n	2a54a <strncpy+0xe>
   2a59a:	4631      	mov	r1, r6
   2a59c:	e7d6      	b.n	2a54c <strncpy+0x10>
   2a59e:	bf00      	nop

0002a5a0 <strrchr>:
   2a5a0:	b171      	cbz	r1, 2a5c0 <strrchr+0x20>
   2a5a2:	b538      	push	{r3, r4, r5, lr}
   2a5a4:	4603      	mov	r3, r0
   2a5a6:	460c      	mov	r4, r1
   2a5a8:	2500      	movs	r5, #0
   2a5aa:	e001      	b.n	2a5b0 <strrchr+0x10>
   2a5ac:	1c43      	adds	r3, r0, #1
   2a5ae:	4605      	mov	r5, r0
   2a5b0:	4618      	mov	r0, r3
   2a5b2:	4621      	mov	r1, r4
   2a5b4:	f7ff fe9e 	bl	2a2f4 <strchr>
   2a5b8:	2800      	cmp	r0, #0
   2a5ba:	d1f7      	bne.n	2a5ac <strrchr+0xc>
   2a5bc:	4628      	mov	r0, r5
   2a5be:	bd38      	pop	{r3, r4, r5, pc}
   2a5c0:	f7ff be98 	b.w	2a2f4 <strchr>

0002a5c4 <critical_factorization>:
   2a5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a5c8:	f04f 0e01 	mov.w	lr, #1
   2a5cc:	4674      	mov	r4, lr
   2a5ce:	2500      	movs	r5, #0
   2a5d0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a5d4:	192b      	adds	r3, r5, r4
   2a5d6:	428b      	cmp	r3, r1
   2a5d8:	eb00 0706 	add.w	r7, r0, r6
   2a5dc:	d20d      	bcs.n	2a5fa <critical_factorization+0x36>
   2a5de:	5d3f      	ldrb	r7, [r7, r4]
   2a5e0:	f810 c003 	ldrb.w	ip, [r0, r3]
   2a5e4:	45bc      	cmp	ip, r7
   2a5e6:	d22d      	bcs.n	2a644 <critical_factorization+0x80>
   2a5e8:	461d      	mov	r5, r3
   2a5ea:	2401      	movs	r4, #1
   2a5ec:	eba3 0e06 	sub.w	lr, r3, r6
   2a5f0:	192b      	adds	r3, r5, r4
   2a5f2:	428b      	cmp	r3, r1
   2a5f4:	eb00 0706 	add.w	r7, r0, r6
   2a5f8:	d3f1      	bcc.n	2a5de <critical_factorization+0x1a>
   2a5fa:	f04f 0801 	mov.w	r8, #1
   2a5fe:	f8c2 e000 	str.w	lr, [r2]
   2a602:	4644      	mov	r4, r8
   2a604:	2500      	movs	r5, #0
   2a606:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2a60a:	192b      	adds	r3, r5, r4
   2a60c:	4299      	cmp	r1, r3
   2a60e:	eb00 0e07 	add.w	lr, r0, r7
   2a612:	d90e      	bls.n	2a632 <critical_factorization+0x6e>
   2a614:	f81e e004 	ldrb.w	lr, [lr, r4]
   2a618:	f810 c003 	ldrb.w	ip, [r0, r3]
   2a61c:	45f4      	cmp	ip, lr
   2a61e:	d918      	bls.n	2a652 <critical_factorization+0x8e>
   2a620:	461d      	mov	r5, r3
   2a622:	2401      	movs	r4, #1
   2a624:	eba3 0807 	sub.w	r8, r3, r7
   2a628:	192b      	adds	r3, r5, r4
   2a62a:	4299      	cmp	r1, r3
   2a62c:	eb00 0e07 	add.w	lr, r0, r7
   2a630:	d8f0      	bhi.n	2a614 <critical_factorization+0x50>
   2a632:	3701      	adds	r7, #1
   2a634:	1c70      	adds	r0, r6, #1
   2a636:	4287      	cmp	r7, r0
   2a638:	bf24      	itt	cs
   2a63a:	f8c2 8000 	strcs.w	r8, [r2]
   2a63e:	4638      	movcs	r0, r7
   2a640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a644:	d00c      	beq.n	2a660 <critical_factorization+0x9c>
   2a646:	f04f 0e01 	mov.w	lr, #1
   2a64a:	462e      	mov	r6, r5
   2a64c:	4674      	mov	r4, lr
   2a64e:	4475      	add	r5, lr
   2a650:	e7c0      	b.n	2a5d4 <critical_factorization+0x10>
   2a652:	d00b      	beq.n	2a66c <critical_factorization+0xa8>
   2a654:	f04f 0801 	mov.w	r8, #1
   2a658:	462f      	mov	r7, r5
   2a65a:	4644      	mov	r4, r8
   2a65c:	4445      	add	r5, r8
   2a65e:	e7d4      	b.n	2a60a <critical_factorization+0x46>
   2a660:	4574      	cmp	r4, lr
   2a662:	bf12      	itee	ne
   2a664:	3401      	addne	r4, #1
   2a666:	461d      	moveq	r5, r3
   2a668:	2401      	moveq	r4, #1
   2a66a:	e7b3      	b.n	2a5d4 <critical_factorization+0x10>
   2a66c:	4544      	cmp	r4, r8
   2a66e:	bf12      	itee	ne
   2a670:	3401      	addne	r4, #1
   2a672:	461d      	moveq	r5, r3
   2a674:	2401      	moveq	r4, #1
   2a676:	e7c8      	b.n	2a60a <critical_factorization+0x46>

0002a678 <two_way_long_needle>:
   2a678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a67c:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
   2a680:	4616      	mov	r6, r2
   2a682:	4605      	mov	r5, r0
   2a684:	468b      	mov	fp, r1
   2a686:	4610      	mov	r0, r2
   2a688:	4619      	mov	r1, r3
   2a68a:	aa03      	add	r2, sp, #12
   2a68c:	461c      	mov	r4, r3
   2a68e:	f7ff ff99 	bl	2a5c4 <critical_factorization>
   2a692:	ab03      	add	r3, sp, #12
   2a694:	4681      	mov	r9, r0
   2a696:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
   2a69a:	f843 4f04 	str.w	r4, [r3, #4]!
   2a69e:	4293      	cmp	r3, r2
   2a6a0:	d1fb      	bne.n	2a69a <two_way_long_needle+0x22>
   2a6a2:	b14c      	cbz	r4, 2a6b8 <two_way_long_needle+0x40>
   2a6a4:	1e63      	subs	r3, r4, #1
   2a6a6:	1e72      	subs	r2, r6, #1
   2a6a8:	a804      	add	r0, sp, #16
   2a6aa:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2a6ae:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   2a6b2:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   2a6b6:	d2f8      	bcs.n	2a6aa <two_way_long_needle+0x32>
   2a6b8:	9903      	ldr	r1, [sp, #12]
   2a6ba:	464a      	mov	r2, r9
   2a6bc:	4431      	add	r1, r6
   2a6be:	4630      	mov	r0, r6
   2a6c0:	f7ff fcca 	bl	2a058 <memcmp>
   2a6c4:	2800      	cmp	r0, #0
   2a6c6:	d16f      	bne.n	2a7a8 <two_way_long_needle+0x130>
   2a6c8:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   2a6cc:	9300      	str	r3, [sp, #0]
   2a6ce:	18f3      	adds	r3, r6, r3
   2a6d0:	4682      	mov	sl, r0
   2a6d2:	9301      	str	r3, [sp, #4]
   2a6d4:	4623      	mov	r3, r4
   2a6d6:	4680      	mov	r8, r0
   2a6d8:	4654      	mov	r4, sl
   2a6da:	4658      	mov	r0, fp
   2a6dc:	469a      	mov	sl, r3
   2a6de:	eb08 070a 	add.w	r7, r8, sl
   2a6e2:	1a3a      	subs	r2, r7, r0
   2a6e4:	2100      	movs	r1, #0
   2a6e6:	4428      	add	r0, r5
   2a6e8:	f7d5 fd9a 	bl	220 <memchr>
   2a6ec:	2800      	cmp	r0, #0
   2a6ee:	d156      	bne.n	2a79e <two_way_long_needle+0x126>
   2a6f0:	2f00      	cmp	r7, #0
   2a6f2:	d054      	beq.n	2a79e <two_way_long_needle+0x126>
   2a6f4:	19eb      	adds	r3, r5, r7
   2a6f6:	aa04      	add	r2, sp, #16
   2a6f8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2a6fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2a700:	b14b      	cbz	r3, 2a716 <two_way_long_needle+0x9e>
   2a702:	b124      	cbz	r4, 2a70e <two_way_long_needle+0x96>
   2a704:	9a03      	ldr	r2, [sp, #12]
   2a706:	4293      	cmp	r3, r2
   2a708:	d201      	bcs.n	2a70e <two_way_long_needle+0x96>
   2a70a:	ebaa 0302 	sub.w	r3, sl, r2
   2a70e:	4498      	add	r8, r3
   2a710:	2400      	movs	r4, #0
   2a712:	4638      	mov	r0, r7
   2a714:	e7e3      	b.n	2a6de <two_way_long_needle+0x66>
   2a716:	454c      	cmp	r4, r9
   2a718:	4623      	mov	r3, r4
   2a71a:	f10a 3eff 	add.w	lr, sl, #4294967295	; 0xffffffff
   2a71e:	bf38      	it	cc
   2a720:	464b      	movcc	r3, r9
   2a722:	4573      	cmp	r3, lr
   2a724:	d213      	bcs.n	2a74e <two_way_long_needle+0xd6>
   2a726:	eb08 0203 	add.w	r2, r8, r3
   2a72a:	f816 c003 	ldrb.w	ip, [r6, r3]
   2a72e:	5ca8      	ldrb	r0, [r5, r2]
   2a730:	4584      	cmp	ip, r0
   2a732:	442a      	add	r2, r5
   2a734:	eb06 0103 	add.w	r1, r6, r3
   2a738:	d006      	beq.n	2a748 <two_way_long_needle+0xd0>
   2a73a:	e02c      	b.n	2a796 <two_way_long_needle+0x11e>
   2a73c:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   2a740:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2a744:	4584      	cmp	ip, r0
   2a746:	d126      	bne.n	2a796 <two_way_long_needle+0x11e>
   2a748:	3301      	adds	r3, #1
   2a74a:	4573      	cmp	r3, lr
   2a74c:	d3f6      	bcc.n	2a73c <two_way_long_needle+0xc4>
   2a74e:	454c      	cmp	r4, r9
   2a750:	9900      	ldr	r1, [sp, #0]
   2a752:	f080 8089 	bcs.w	2a868 <two_way_long_needle+0x1f0>
   2a756:	9b00      	ldr	r3, [sp, #0]
   2a758:	eb08 0203 	add.w	r2, r8, r3
   2a75c:	9b01      	ldr	r3, [sp, #4]
   2a75e:	5ca8      	ldrb	r0, [r5, r2]
   2a760:	781b      	ldrb	r3, [r3, #0]
   2a762:	4298      	cmp	r0, r3
   2a764:	442a      	add	r2, r5
   2a766:	d17f      	bne.n	2a868 <two_way_long_needle+0x1f0>
   2a768:	9801      	ldr	r0, [sp, #4]
   2a76a:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   2a76e:	e006      	b.n	2a77e <two_way_long_needle+0x106>
   2a770:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   2a774:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   2a778:	45f4      	cmp	ip, lr
   2a77a:	d103      	bne.n	2a784 <two_way_long_needle+0x10c>
   2a77c:	4619      	mov	r1, r3
   2a77e:	1e4b      	subs	r3, r1, #1
   2a780:	459b      	cmp	fp, r3
   2a782:	d1f5      	bne.n	2a770 <two_way_long_needle+0xf8>
   2a784:	3401      	adds	r4, #1
   2a786:	428c      	cmp	r4, r1
   2a788:	d870      	bhi.n	2a86c <two_way_long_needle+0x1f4>
   2a78a:	9c03      	ldr	r4, [sp, #12]
   2a78c:	4638      	mov	r0, r7
   2a78e:	44a0      	add	r8, r4
   2a790:	ebaa 0404 	sub.w	r4, sl, r4
   2a794:	e7a3      	b.n	2a6de <two_way_long_needle+0x66>
   2a796:	f1c9 0201 	rsb	r2, r9, #1
   2a79a:	4490      	add	r8, r2
   2a79c:	e7b7      	b.n	2a70e <two_way_long_needle+0x96>
   2a79e:	2000      	movs	r0, #0
   2a7a0:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   2a7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a7a8:	eba4 0309 	sub.w	r3, r4, r9
   2a7ac:	454b      	cmp	r3, r9
   2a7ae:	bf38      	it	cc
   2a7b0:	464b      	movcc	r3, r9
   2a7b2:	3301      	adds	r3, #1
   2a7b4:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   2a7b8:	9303      	str	r3, [sp, #12]
   2a7ba:	eb06 0308 	add.w	r3, r6, r8
   2a7be:	4658      	mov	r0, fp
   2a7c0:	f04f 0a00 	mov.w	sl, #0
   2a7c4:	46cb      	mov	fp, r9
   2a7c6:	4699      	mov	r9, r3
   2a7c8:	eb0a 0704 	add.w	r7, sl, r4
   2a7cc:	1a3a      	subs	r2, r7, r0
   2a7ce:	2100      	movs	r1, #0
   2a7d0:	4428      	add	r0, r5
   2a7d2:	f7d5 fd25 	bl	220 <memchr>
   2a7d6:	2800      	cmp	r0, #0
   2a7d8:	d1e1      	bne.n	2a79e <two_way_long_needle+0x126>
   2a7da:	2f00      	cmp	r7, #0
   2a7dc:	d0df      	beq.n	2a79e <two_way_long_needle+0x126>
   2a7de:	19eb      	adds	r3, r5, r7
   2a7e0:	aa04      	add	r2, sp, #16
   2a7e2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2a7e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2a7ea:	bba3      	cbnz	r3, 2a856 <two_way_long_needle+0x1de>
   2a7ec:	1e61      	subs	r1, r4, #1
   2a7ee:	458b      	cmp	fp, r1
   2a7f0:	d215      	bcs.n	2a81e <two_way_long_needle+0x1a6>
   2a7f2:	eb0a 020b 	add.w	r2, sl, fp
   2a7f6:	f816 300b 	ldrb.w	r3, [r6, fp]
   2a7fa:	f815 e002 	ldrb.w	lr, [r5, r2]
   2a7fe:	459e      	cmp	lr, r3
   2a800:	442a      	add	r2, r5
   2a802:	eb06 000b 	add.w	r0, r6, fp
   2a806:	465b      	mov	r3, fp
   2a808:	d006      	beq.n	2a818 <two_way_long_needle+0x1a0>
   2a80a:	e027      	b.n	2a85c <two_way_long_needle+0x1e4>
   2a80c:	f810 cf01 	ldrb.w	ip, [r0, #1]!
   2a810:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   2a814:	45f4      	cmp	ip, lr
   2a816:	d121      	bne.n	2a85c <two_way_long_needle+0x1e4>
   2a818:	3301      	adds	r3, #1
   2a81a:	428b      	cmp	r3, r1
   2a81c:	d3f6      	bcc.n	2a80c <two_way_long_needle+0x194>
   2a81e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2a822:	d011      	beq.n	2a848 <two_way_long_needle+0x1d0>
   2a824:	eb0a 0208 	add.w	r2, sl, r8
   2a828:	f899 1000 	ldrb.w	r1, [r9]
   2a82c:	5cab      	ldrb	r3, [r5, r2]
   2a82e:	4299      	cmp	r1, r3
   2a830:	442a      	add	r2, r5
   2a832:	d10f      	bne.n	2a854 <two_way_long_needle+0x1dc>
   2a834:	464b      	mov	r3, r9
   2a836:	e005      	b.n	2a844 <two_way_long_needle+0x1cc>
   2a838:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2a83c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2a840:	4288      	cmp	r0, r1
   2a842:	d107      	bne.n	2a854 <two_way_long_needle+0x1dc>
   2a844:	42b3      	cmp	r3, r6
   2a846:	d1f7      	bne.n	2a838 <two_way_long_needle+0x1c0>
   2a848:	eb05 000a 	add.w	r0, r5, sl
   2a84c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   2a850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a854:	9b03      	ldr	r3, [sp, #12]
   2a856:	449a      	add	sl, r3
   2a858:	4638      	mov	r0, r7
   2a85a:	e7b5      	b.n	2a7c8 <two_way_long_needle+0x150>
   2a85c:	f1cb 0201 	rsb	r2, fp, #1
   2a860:	4492      	add	sl, r2
   2a862:	449a      	add	sl, r3
   2a864:	4638      	mov	r0, r7
   2a866:	e7af      	b.n	2a7c8 <two_way_long_needle+0x150>
   2a868:	4649      	mov	r1, r9
   2a86a:	e78b      	b.n	2a784 <two_way_long_needle+0x10c>
   2a86c:	eb05 0008 	add.w	r0, r5, r8
   2a870:	e796      	b.n	2a7a0 <two_way_long_needle+0x128>
   2a872:	bf00      	nop

0002a874 <strstr>:
   2a874:	7802      	ldrb	r2, [r0, #0]
   2a876:	2a00      	cmp	r2, #0
   2a878:	f000 8101 	beq.w	2aa7e <strstr+0x20a>
   2a87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a880:	f891 8000 	ldrb.w	r8, [r1]
   2a884:	b085      	sub	sp, #20
   2a886:	4644      	mov	r4, r8
   2a888:	f1b8 0f00 	cmp.w	r8, #0
   2a88c:	d016      	beq.n	2a8bc <strstr+0x48>
   2a88e:	4686      	mov	lr, r0
   2a890:	f101 0c01 	add.w	ip, r1, #1
   2a894:	2701      	movs	r7, #1
   2a896:	e003      	b.n	2a8a0 <strstr+0x2c>
   2a898:	f813 4b01 	ldrb.w	r4, [r3], #1
   2a89c:	b16c      	cbz	r4, 2a8ba <strstr+0x46>
   2a89e:	469c      	mov	ip, r3
   2a8a0:	42a2      	cmp	r2, r4
   2a8a2:	bf14      	ite	ne
   2a8a4:	2700      	movne	r7, #0
   2a8a6:	f007 0701 	andeq.w	r7, r7, #1
   2a8aa:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
   2a8ae:	4663      	mov	r3, ip
   2a8b0:	2a00      	cmp	r2, #0
   2a8b2:	d1f1      	bne.n	2a898 <strstr+0x24>
   2a8b4:	f89c 3000 	ldrb.w	r3, [ip]
   2a8b8:	b9fb      	cbnz	r3, 2a8fa <strstr+0x86>
   2a8ba:	b117      	cbz	r7, 2a8c2 <strstr+0x4e>
   2a8bc:	b005      	add	sp, #20
   2a8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a8c2:	460e      	mov	r6, r1
   2a8c4:	4605      	mov	r5, r0
   2a8c6:	4641      	mov	r1, r8
   2a8c8:	3001      	adds	r0, #1
   2a8ca:	ebac 0406 	sub.w	r4, ip, r6
   2a8ce:	f7ff fd11 	bl	2a2f4 <strchr>
   2a8d2:	4607      	mov	r7, r0
   2a8d4:	b188      	cbz	r0, 2a8fa <strstr+0x86>
   2a8d6:	2c01      	cmp	r4, #1
   2a8d8:	d0f0      	beq.n	2a8bc <strstr+0x48>
   2a8da:	1928      	adds	r0, r5, r4
   2a8dc:	4287      	cmp	r7, r0
   2a8de:	bf94      	ite	ls
   2a8e0:	1bc1      	subls	r1, r0, r7
   2a8e2:	2101      	movhi	r1, #1
   2a8e4:	2c1f      	cmp	r4, #31
   2a8e6:	468b      	mov	fp, r1
   2a8e8:	d90b      	bls.n	2a902 <strstr+0x8e>
   2a8ea:	4623      	mov	r3, r4
   2a8ec:	4632      	mov	r2, r6
   2a8ee:	4638      	mov	r0, r7
   2a8f0:	f7ff fec2 	bl	2a678 <two_way_long_needle>
   2a8f4:	b005      	add	sp, #20
   2a8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a8fa:	2000      	movs	r0, #0
   2a8fc:	b005      	add	sp, #20
   2a8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a902:	aa03      	add	r2, sp, #12
   2a904:	4621      	mov	r1, r4
   2a906:	4630      	mov	r0, r6
   2a908:	f7ff fe5c 	bl	2a5c4 <critical_factorization>
   2a90c:	9903      	ldr	r1, [sp, #12]
   2a90e:	4680      	mov	r8, r0
   2a910:	4602      	mov	r2, r0
   2a912:	4431      	add	r1, r6
   2a914:	4630      	mov	r0, r6
   2a916:	f7ff fb9f 	bl	2a058 <memcmp>
   2a91a:	2800      	cmp	r0, #0
   2a91c:	d157      	bne.n	2a9ce <strstr+0x15a>
   2a91e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2a922:	9300      	str	r3, [sp, #0]
   2a924:	18f3      	adds	r3, r6, r3
   2a926:	4681      	mov	r9, r0
   2a928:	4605      	mov	r5, r0
   2a92a:	9301      	str	r3, [sp, #4]
   2a92c:	4658      	mov	r0, fp
   2a92e:	46b2      	mov	sl, r6
   2a930:	1966      	adds	r6, r4, r5
   2a932:	1a32      	subs	r2, r6, r0
   2a934:	2100      	movs	r1, #0
   2a936:	4438      	add	r0, r7
   2a938:	f7d5 fc72 	bl	220 <memchr>
   2a93c:	2800      	cmp	r0, #0
   2a93e:	d1dc      	bne.n	2a8fa <strstr+0x86>
   2a940:	2e00      	cmp	r6, #0
   2a942:	d0da      	beq.n	2a8fa <strstr+0x86>
   2a944:	45c8      	cmp	r8, r9
   2a946:	4643      	mov	r3, r8
   2a948:	bf38      	it	cc
   2a94a:	464b      	movcc	r3, r9
   2a94c:	429c      	cmp	r4, r3
   2a94e:	d912      	bls.n	2a976 <strstr+0x102>
   2a950:	195a      	adds	r2, r3, r5
   2a952:	f81a 1003 	ldrb.w	r1, [sl, r3]
   2a956:	5cb8      	ldrb	r0, [r7, r2]
   2a958:	4281      	cmp	r1, r0
   2a95a:	443a      	add	r2, r7
   2a95c:	eb0a 0e03 	add.w	lr, sl, r3
   2a960:	d006      	beq.n	2a970 <strstr+0xfc>
   2a962:	e02c      	b.n	2a9be <strstr+0x14a>
   2a964:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   2a968:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2a96c:	4288      	cmp	r0, r1
   2a96e:	d126      	bne.n	2a9be <strstr+0x14a>
   2a970:	3301      	adds	r3, #1
   2a972:	429c      	cmp	r4, r3
   2a974:	d1f6      	bne.n	2a964 <strstr+0xf0>
   2a976:	45c8      	cmp	r8, r9
   2a978:	9900      	ldr	r1, [sp, #0]
   2a97a:	f240 8083 	bls.w	2aa84 <strstr+0x210>
   2a97e:	9b00      	ldr	r3, [sp, #0]
   2a980:	18ea      	adds	r2, r5, r3
   2a982:	9b01      	ldr	r3, [sp, #4]
   2a984:	5cb8      	ldrb	r0, [r7, r2]
   2a986:	781b      	ldrb	r3, [r3, #0]
   2a988:	4298      	cmp	r0, r3
   2a98a:	443a      	add	r2, r7
   2a98c:	d17a      	bne.n	2aa84 <strstr+0x210>
   2a98e:	9801      	ldr	r0, [sp, #4]
   2a990:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
   2a994:	e006      	b.n	2a9a4 <strstr+0x130>
   2a996:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   2a99a:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   2a99e:	45f4      	cmp	ip, lr
   2a9a0:	d103      	bne.n	2a9aa <strstr+0x136>
   2a9a2:	4619      	mov	r1, r3
   2a9a4:	1e4b      	subs	r3, r1, #1
   2a9a6:	455b      	cmp	r3, fp
   2a9a8:	d1f5      	bne.n	2a996 <strstr+0x122>
   2a9aa:	f109 0901 	add.w	r9, r9, #1
   2a9ae:	4589      	cmp	r9, r1
   2a9b0:	d857      	bhi.n	2aa62 <strstr+0x1ee>
   2a9b2:	9b03      	ldr	r3, [sp, #12]
   2a9b4:	4630      	mov	r0, r6
   2a9b6:	441d      	add	r5, r3
   2a9b8:	eba4 0903 	sub.w	r9, r4, r3
   2a9bc:	e7b8      	b.n	2a930 <strstr+0xbc>
   2a9be:	f1c8 0201 	rsb	r2, r8, #1
   2a9c2:	4415      	add	r5, r2
   2a9c4:	441d      	add	r5, r3
   2a9c6:	f04f 0900 	mov.w	r9, #0
   2a9ca:	4630      	mov	r0, r6
   2a9cc:	e7b0      	b.n	2a930 <strstr+0xbc>
   2a9ce:	eba4 0308 	sub.w	r3, r4, r8
   2a9d2:	4543      	cmp	r3, r8
   2a9d4:	bf38      	it	cc
   2a9d6:	4643      	movcc	r3, r8
   2a9d8:	3301      	adds	r3, #1
   2a9da:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
   2a9de:	9303      	str	r3, [sp, #12]
   2a9e0:	eb06 0309 	add.w	r3, r6, r9
   2a9e4:	4658      	mov	r0, fp
   2a9e6:	2500      	movs	r5, #0
   2a9e8:	46bb      	mov	fp, r7
   2a9ea:	469a      	mov	sl, r3
   2a9ec:	1967      	adds	r7, r4, r5
   2a9ee:	1a3a      	subs	r2, r7, r0
   2a9f0:	2100      	movs	r1, #0
   2a9f2:	4458      	add	r0, fp
   2a9f4:	f7d5 fc14 	bl	220 <memchr>
   2a9f8:	2800      	cmp	r0, #0
   2a9fa:	f47f af7e 	bne.w	2a8fa <strstr+0x86>
   2a9fe:	2f00      	cmp	r7, #0
   2aa00:	f43f af7b 	beq.w	2a8fa <strstr+0x86>
   2aa04:	4544      	cmp	r4, r8
   2aa06:	d915      	bls.n	2aa34 <strstr+0x1c0>
   2aa08:	eb08 0205 	add.w	r2, r8, r5
   2aa0c:	f816 3008 	ldrb.w	r3, [r6, r8]
   2aa10:	f81b 0002 	ldrb.w	r0, [fp, r2]
   2aa14:	4298      	cmp	r0, r3
   2aa16:	445a      	add	r2, fp
   2aa18:	eb06 0108 	add.w	r1, r6, r8
   2aa1c:	4643      	mov	r3, r8
   2aa1e:	d006      	beq.n	2aa2e <strstr+0x1ba>
   2aa20:	e023      	b.n	2aa6a <strstr+0x1f6>
   2aa22:	f811 ef01 	ldrb.w	lr, [r1, #1]!
   2aa26:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2aa2a:	4586      	cmp	lr, r0
   2aa2c:	d11d      	bne.n	2aa6a <strstr+0x1f6>
   2aa2e:	3301      	adds	r3, #1
   2aa30:	429c      	cmp	r4, r3
   2aa32:	d1f6      	bne.n	2aa22 <strstr+0x1ae>
   2aa34:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   2aa38:	d012      	beq.n	2aa60 <strstr+0x1ec>
   2aa3a:	eb05 0209 	add.w	r2, r5, r9
   2aa3e:	f89a 3000 	ldrb.w	r3, [sl]
   2aa42:	f81b 1002 	ldrb.w	r1, [fp, r2]
   2aa46:	4299      	cmp	r1, r3
   2aa48:	445a      	add	r2, fp
   2aa4a:	d114      	bne.n	2aa76 <strstr+0x202>
   2aa4c:	4653      	mov	r3, sl
   2aa4e:	e005      	b.n	2aa5c <strstr+0x1e8>
   2aa50:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2aa54:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2aa58:	4288      	cmp	r0, r1
   2aa5a:	d10c      	bne.n	2aa76 <strstr+0x202>
   2aa5c:	42b3      	cmp	r3, r6
   2aa5e:	d1f7      	bne.n	2aa50 <strstr+0x1dc>
   2aa60:	465f      	mov	r7, fp
   2aa62:	1978      	adds	r0, r7, r5
   2aa64:	b005      	add	sp, #20
   2aa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aa6a:	f1c8 0201 	rsb	r2, r8, #1
   2aa6e:	4415      	add	r5, r2
   2aa70:	441d      	add	r5, r3
   2aa72:	4638      	mov	r0, r7
   2aa74:	e7ba      	b.n	2a9ec <strstr+0x178>
   2aa76:	9b03      	ldr	r3, [sp, #12]
   2aa78:	4638      	mov	r0, r7
   2aa7a:	441d      	add	r5, r3
   2aa7c:	e7b6      	b.n	2a9ec <strstr+0x178>
   2aa7e:	780b      	ldrb	r3, [r1, #0]
   2aa80:	b913      	cbnz	r3, 2aa88 <strstr+0x214>
   2aa82:	4770      	bx	lr
   2aa84:	4641      	mov	r1, r8
   2aa86:	e790      	b.n	2a9aa <strstr+0x136>
   2aa88:	2000      	movs	r0, #0
   2aa8a:	4770      	bx	lr

0002aa8c <_strtol_l.isra.0>:
   2aa8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aa90:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2aa94:	460f      	mov	r7, r1
   2aa96:	4680      	mov	r8, r0
   2aa98:	4616      	mov	r6, r2
   2aa9a:	461d      	mov	r5, r3
   2aa9c:	468a      	mov	sl, r1
   2aa9e:	e000      	b.n	2aaa2 <_strtol_l.isra.0+0x16>
   2aaa0:	46a2      	mov	sl, r4
   2aaa2:	4654      	mov	r4, sl
   2aaa4:	4648      	mov	r0, r9
   2aaa6:	f814 bb01 	ldrb.w	fp, [r4], #1
   2aaaa:	f7ff faad 	bl	2a008 <__locale_ctype_ptr_l>
   2aaae:	4458      	add	r0, fp
   2aab0:	7842      	ldrb	r2, [r0, #1]
   2aab2:	f012 0208 	ands.w	r2, r2, #8
   2aab6:	d1f3      	bne.n	2aaa0 <_strtol_l.isra.0+0x14>
   2aab8:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   2aabc:	d04f      	beq.n	2ab5e <_strtol_l.isra.0+0xd2>
   2aabe:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   2aac2:	bf04      	itt	eq
   2aac4:	f894 b000 	ldrbeq.w	fp, [r4]
   2aac8:	f10a 0402 	addeq.w	r4, sl, #2
   2aacc:	b11d      	cbz	r5, 2aad6 <_strtol_l.isra.0+0x4a>
   2aace:	2d10      	cmp	r5, #16
   2aad0:	d056      	beq.n	2ab80 <_strtol_l.isra.0+0xf4>
   2aad2:	46ac      	mov	ip, r5
   2aad4:	e004      	b.n	2aae0 <_strtol_l.isra.0+0x54>
   2aad6:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2aada:	d060      	beq.n	2ab9e <_strtol_l.isra.0+0x112>
   2aadc:	250a      	movs	r5, #10
   2aade:	46ac      	mov	ip, r5
   2aae0:	2a00      	cmp	r2, #0
   2aae2:	bf0c      	ite	eq
   2aae4:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   2aae8:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   2aaec:	2100      	movs	r1, #0
   2aaee:	fbb9 fefc 	udiv	lr, r9, ip
   2aaf2:	4608      	mov	r0, r1
   2aaf4:	fb0c 9a1e 	mls	sl, ip, lr, r9
   2aaf8:	e005      	b.n	2ab06 <_strtol_l.isra.0+0x7a>
   2aafa:	d029      	beq.n	2ab50 <_strtol_l.isra.0+0xc4>
   2aafc:	fb0c 3000 	mla	r0, ip, r0, r3
   2ab00:	2101      	movs	r1, #1
   2ab02:	f814 bb01 	ldrb.w	fp, [r4], #1
   2ab06:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   2ab0a:	2b09      	cmp	r3, #9
   2ab0c:	d905      	bls.n	2ab1a <_strtol_l.isra.0+0x8e>
   2ab0e:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   2ab12:	2b19      	cmp	r3, #25
   2ab14:	d80b      	bhi.n	2ab2e <_strtol_l.isra.0+0xa2>
   2ab16:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   2ab1a:	429d      	cmp	r5, r3
   2ab1c:	dd0f      	ble.n	2ab3e <_strtol_l.isra.0+0xb2>
   2ab1e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2ab22:	d0ee      	beq.n	2ab02 <_strtol_l.isra.0+0x76>
   2ab24:	4586      	cmp	lr, r0
   2ab26:	d2e8      	bcs.n	2aafa <_strtol_l.isra.0+0x6e>
   2ab28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2ab2c:	e7e9      	b.n	2ab02 <_strtol_l.isra.0+0x76>
   2ab2e:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   2ab32:	2b19      	cmp	r3, #25
   2ab34:	d803      	bhi.n	2ab3e <_strtol_l.isra.0+0xb2>
   2ab36:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   2ab3a:	429d      	cmp	r5, r3
   2ab3c:	dcef      	bgt.n	2ab1e <_strtol_l.isra.0+0x92>
   2ab3e:	1c4b      	adds	r3, r1, #1
   2ab40:	d013      	beq.n	2ab6a <_strtol_l.isra.0+0xde>
   2ab42:	b102      	cbz	r2, 2ab46 <_strtol_l.isra.0+0xba>
   2ab44:	4240      	negs	r0, r0
   2ab46:	b146      	cbz	r6, 2ab5a <_strtol_l.isra.0+0xce>
   2ab48:	b9c1      	cbnz	r1, 2ab7c <_strtol_l.isra.0+0xf0>
   2ab4a:	6037      	str	r7, [r6, #0]
   2ab4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ab50:	459a      	cmp	sl, r3
   2ab52:	dad3      	bge.n	2aafc <_strtol_l.isra.0+0x70>
   2ab54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2ab58:	e7d3      	b.n	2ab02 <_strtol_l.isra.0+0x76>
   2ab5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ab5e:	f894 b000 	ldrb.w	fp, [r4]
   2ab62:	2201      	movs	r2, #1
   2ab64:	f10a 0402 	add.w	r4, sl, #2
   2ab68:	e7b0      	b.n	2aacc <_strtol_l.isra.0+0x40>
   2ab6a:	2322      	movs	r3, #34	; 0x22
   2ab6c:	f8c8 3000 	str.w	r3, [r8]
   2ab70:	b1ee      	cbz	r6, 2abae <_strtol_l.isra.0+0x122>
   2ab72:	1e67      	subs	r7, r4, #1
   2ab74:	4648      	mov	r0, r9
   2ab76:	6037      	str	r7, [r6, #0]
   2ab78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ab7c:	4681      	mov	r9, r0
   2ab7e:	e7f8      	b.n	2ab72 <_strtol_l.isra.0+0xe6>
   2ab80:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2ab84:	d1a5      	bne.n	2aad2 <_strtol_l.isra.0+0x46>
   2ab86:	7823      	ldrb	r3, [r4, #0]
   2ab88:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2ab8c:	2b58      	cmp	r3, #88	; 0x58
   2ab8e:	d1a0      	bne.n	2aad2 <_strtol_l.isra.0+0x46>
   2ab90:	f04f 0c10 	mov.w	ip, #16
   2ab94:	f894 b001 	ldrb.w	fp, [r4, #1]
   2ab98:	4665      	mov	r5, ip
   2ab9a:	3402      	adds	r4, #2
   2ab9c:	e7a0      	b.n	2aae0 <_strtol_l.isra.0+0x54>
   2ab9e:	7823      	ldrb	r3, [r4, #0]
   2aba0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2aba4:	2b58      	cmp	r3, #88	; 0x58
   2aba6:	d0f3      	beq.n	2ab90 <_strtol_l.isra.0+0x104>
   2aba8:	2508      	movs	r5, #8
   2abaa:	46ac      	mov	ip, r5
   2abac:	e798      	b.n	2aae0 <_strtol_l.isra.0+0x54>
   2abae:	4648      	mov	r0, r9
   2abb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002abb4 <strtol>:
   2abb4:	b530      	push	{r4, r5, lr}
   2abb6:	4c08      	ldr	r4, [pc, #32]	; (2abd8 <strtol+0x24>)
   2abb8:	4b08      	ldr	r3, [pc, #32]	; (2abdc <strtol+0x28>)
   2abba:	6825      	ldr	r5, [r4, #0]
   2abbc:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2abbe:	b083      	sub	sp, #12
   2abc0:	2c00      	cmp	r4, #0
   2abc2:	bf08      	it	eq
   2abc4:	461c      	moveq	r4, r3
   2abc6:	9400      	str	r4, [sp, #0]
   2abc8:	4613      	mov	r3, r2
   2abca:	460a      	mov	r2, r1
   2abcc:	4601      	mov	r1, r0
   2abce:	4628      	mov	r0, r5
   2abd0:	f7ff ff5c 	bl	2aa8c <_strtol_l.isra.0>
   2abd4:	b003      	add	sp, #12
   2abd6:	bd30      	pop	{r4, r5, pc}
   2abd8:	2000c7e8 	.word	0x2000c7e8
   2abdc:	2000c67c 	.word	0x2000c67c

0002abe0 <_strtoul_l.isra.0>:
   2abe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2abe4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2abe8:	460e      	mov	r6, r1
   2abea:	4607      	mov	r7, r0
   2abec:	4615      	mov	r5, r2
   2abee:	4698      	mov	r8, r3
   2abf0:	468a      	mov	sl, r1
   2abf2:	e000      	b.n	2abf6 <_strtoul_l.isra.0+0x16>
   2abf4:	46a2      	mov	sl, r4
   2abf6:	4654      	mov	r4, sl
   2abf8:	4648      	mov	r0, r9
   2abfa:	f814 bb01 	ldrb.w	fp, [r4], #1
   2abfe:	f7ff fa03 	bl	2a008 <__locale_ctype_ptr_l>
   2ac02:	4458      	add	r0, fp
   2ac04:	7840      	ldrb	r0, [r0, #1]
   2ac06:	f010 0008 	ands.w	r0, r0, #8
   2ac0a:	d1f3      	bne.n	2abf4 <_strtoul_l.isra.0+0x14>
   2ac0c:	4659      	mov	r1, fp
   2ac0e:	292d      	cmp	r1, #45	; 0x2d
   2ac10:	d059      	beq.n	2acc6 <_strtoul_l.isra.0+0xe6>
   2ac12:	292b      	cmp	r1, #43	; 0x2b
   2ac14:	bf04      	itt	eq
   2ac16:	7821      	ldrbeq	r1, [r4, #0]
   2ac18:	f10a 0402 	addeq.w	r4, sl, #2
   2ac1c:	f1b8 0f00 	cmp.w	r8, #0
   2ac20:	d00c      	beq.n	2ac3c <_strtoul_l.isra.0+0x5c>
   2ac22:	f1b8 0f10 	cmp.w	r8, #16
   2ac26:	d053      	beq.n	2acd0 <_strtoul_l.isra.0+0xf0>
   2ac28:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2ac2c:	fbbc fcf8 	udiv	ip, ip, r8
   2ac30:	fb08 fa0c 	mul.w	sl, r8, ip
   2ac34:	ea6f 0a0a 	mvn.w	sl, sl
   2ac38:	46c1      	mov	r9, r8
   2ac3a:	e008      	b.n	2ac4e <_strtoul_l.isra.0+0x6e>
   2ac3c:	2930      	cmp	r1, #48	; 0x30
   2ac3e:	d058      	beq.n	2acf2 <_strtoul_l.isra.0+0x112>
   2ac40:	f04f 080a 	mov.w	r8, #10
   2ac44:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 2ad24 <_strtoul_l.isra.0+0x144>
   2ac48:	46c1      	mov	r9, r8
   2ac4a:	f04f 0a05 	mov.w	sl, #5
   2ac4e:	2300      	movs	r3, #0
   2ac50:	469e      	mov	lr, r3
   2ac52:	e005      	b.n	2ac60 <_strtoul_l.isra.0+0x80>
   2ac54:	d02a      	beq.n	2acac <_strtoul_l.isra.0+0xcc>
   2ac56:	fb09 2e0e 	mla	lr, r9, lr, r2
   2ac5a:	2301      	movs	r3, #1
   2ac5c:	f814 1b01 	ldrb.w	r1, [r4], #1
   2ac60:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   2ac64:	2a09      	cmp	r2, #9
   2ac66:	d905      	bls.n	2ac74 <_strtoul_l.isra.0+0x94>
   2ac68:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   2ac6c:	2a19      	cmp	r2, #25
   2ac6e:	d80a      	bhi.n	2ac86 <_strtoul_l.isra.0+0xa6>
   2ac70:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   2ac74:	4590      	cmp	r8, r2
   2ac76:	dd0e      	ble.n	2ac96 <_strtoul_l.isra.0+0xb6>
   2ac78:	2b00      	cmp	r3, #0
   2ac7a:	db01      	blt.n	2ac80 <_strtoul_l.isra.0+0xa0>
   2ac7c:	45e6      	cmp	lr, ip
   2ac7e:	d9e9      	bls.n	2ac54 <_strtoul_l.isra.0+0x74>
   2ac80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ac84:	e7ea      	b.n	2ac5c <_strtoul_l.isra.0+0x7c>
   2ac86:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   2ac8a:	2a19      	cmp	r2, #25
   2ac8c:	d803      	bhi.n	2ac96 <_strtoul_l.isra.0+0xb6>
   2ac8e:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   2ac92:	4590      	cmp	r8, r2
   2ac94:	dcf0      	bgt.n	2ac78 <_strtoul_l.isra.0+0x98>
   2ac96:	2b00      	cmp	r3, #0
   2ac98:	db0d      	blt.n	2acb6 <_strtoul_l.isra.0+0xd6>
   2ac9a:	b108      	cbz	r0, 2aca0 <_strtoul_l.isra.0+0xc0>
   2ac9c:	f1ce 0e00 	rsb	lr, lr, #0
   2aca0:	b10d      	cbz	r5, 2aca6 <_strtoul_l.isra.0+0xc6>
   2aca2:	b973      	cbnz	r3, 2acc2 <_strtoul_l.isra.0+0xe2>
   2aca4:	602e      	str	r6, [r5, #0]
   2aca6:	4670      	mov	r0, lr
   2aca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2acac:	4552      	cmp	r2, sl
   2acae:	ddd2      	ble.n	2ac56 <_strtoul_l.isra.0+0x76>
   2acb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2acb4:	e7d2      	b.n	2ac5c <_strtoul_l.isra.0+0x7c>
   2acb6:	2322      	movs	r3, #34	; 0x22
   2acb8:	603b      	str	r3, [r7, #0]
   2acba:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   2acbe:	2d00      	cmp	r5, #0
   2acc0:	d0f1      	beq.n	2aca6 <_strtoul_l.isra.0+0xc6>
   2acc2:	1e66      	subs	r6, r4, #1
   2acc4:	e7ee      	b.n	2aca4 <_strtoul_l.isra.0+0xc4>
   2acc6:	7821      	ldrb	r1, [r4, #0]
   2acc8:	2001      	movs	r0, #1
   2acca:	f10a 0402 	add.w	r4, sl, #2
   2acce:	e7a5      	b.n	2ac1c <_strtoul_l.isra.0+0x3c>
   2acd0:	2930      	cmp	r1, #48	; 0x30
   2acd2:	d11b      	bne.n	2ad0c <_strtoul_l.isra.0+0x12c>
   2acd4:	7823      	ldrb	r3, [r4, #0]
   2acd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2acda:	2b58      	cmp	r3, #88	; 0x58
   2acdc:	d11c      	bne.n	2ad18 <_strtoul_l.isra.0+0x138>
   2acde:	f04f 0910 	mov.w	r9, #16
   2ace2:	7861      	ldrb	r1, [r4, #1]
   2ace4:	46c8      	mov	r8, r9
   2ace6:	f04f 0a0f 	mov.w	sl, #15
   2acea:	3402      	adds	r4, #2
   2acec:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2acf0:	e7ad      	b.n	2ac4e <_strtoul_l.isra.0+0x6e>
   2acf2:	7823      	ldrb	r3, [r4, #0]
   2acf4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2acf8:	2b58      	cmp	r3, #88	; 0x58
   2acfa:	d0f0      	beq.n	2acde <_strtoul_l.isra.0+0xfe>
   2acfc:	f04f 0808 	mov.w	r8, #8
   2ad00:	46c1      	mov	r9, r8
   2ad02:	f04f 0a07 	mov.w	sl, #7
   2ad06:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   2ad0a:	e7a0      	b.n	2ac4e <_strtoul_l.isra.0+0x6e>
   2ad0c:	f04f 0a0f 	mov.w	sl, #15
   2ad10:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2ad14:	46c1      	mov	r9, r8
   2ad16:	e79a      	b.n	2ac4e <_strtoul_l.isra.0+0x6e>
   2ad18:	46c1      	mov	r9, r8
   2ad1a:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2ad1e:	f04f 0a0f 	mov.w	sl, #15
   2ad22:	e794      	b.n	2ac4e <_strtoul_l.isra.0+0x6e>
   2ad24:	19999999 	.word	0x19999999

0002ad28 <strtoul>:
   2ad28:	b530      	push	{r4, r5, lr}
   2ad2a:	4c08      	ldr	r4, [pc, #32]	; (2ad4c <strtoul+0x24>)
   2ad2c:	4b08      	ldr	r3, [pc, #32]	; (2ad50 <strtoul+0x28>)
   2ad2e:	6825      	ldr	r5, [r4, #0]
   2ad30:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2ad32:	b083      	sub	sp, #12
   2ad34:	2c00      	cmp	r4, #0
   2ad36:	bf08      	it	eq
   2ad38:	461c      	moveq	r4, r3
   2ad3a:	9400      	str	r4, [sp, #0]
   2ad3c:	4613      	mov	r3, r2
   2ad3e:	460a      	mov	r2, r1
   2ad40:	4601      	mov	r1, r0
   2ad42:	4628      	mov	r0, r5
   2ad44:	f7ff ff4c 	bl	2abe0 <_strtoul_l.isra.0>
   2ad48:	b003      	add	sp, #12
   2ad4a:	bd30      	pop	{r4, r5, pc}
   2ad4c:	2000c7e8 	.word	0x2000c7e8
   2ad50:	2000c67c 	.word	0x2000c67c

0002ad54 <_svfprintf_r>:
   2ad54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ad58:	b0c3      	sub	sp, #268	; 0x10c
   2ad5a:	460c      	mov	r4, r1
   2ad5c:	910b      	str	r1, [sp, #44]	; 0x2c
   2ad5e:	4692      	mov	sl, r2
   2ad60:	930f      	str	r3, [sp, #60]	; 0x3c
   2ad62:	900c      	str	r0, [sp, #48]	; 0x30
   2ad64:	f002 f9f2 	bl	2d14c <_localeconv_r>
   2ad68:	6803      	ldr	r3, [r0, #0]
   2ad6a:	931a      	str	r3, [sp, #104]	; 0x68
   2ad6c:	4618      	mov	r0, r3
   2ad6e:	f7d5 fcc7 	bl	700 <strlen>
   2ad72:	89a3      	ldrh	r3, [r4, #12]
   2ad74:	9019      	str	r0, [sp, #100]	; 0x64
   2ad76:	0619      	lsls	r1, r3, #24
   2ad78:	d503      	bpl.n	2ad82 <_svfprintf_r+0x2e>
   2ad7a:	6923      	ldr	r3, [r4, #16]
   2ad7c:	2b00      	cmp	r3, #0
   2ad7e:	f001 8003 	beq.w	2bd88 <_svfprintf_r+0x1034>
   2ad82:	2300      	movs	r3, #0
   2ad84:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   2ad88:	9313      	str	r3, [sp, #76]	; 0x4c
   2ad8a:	9315      	str	r3, [sp, #84]	; 0x54
   2ad8c:	9314      	str	r3, [sp, #80]	; 0x50
   2ad8e:	9327      	str	r3, [sp, #156]	; 0x9c
   2ad90:	9326      	str	r3, [sp, #152]	; 0x98
   2ad92:	9318      	str	r3, [sp, #96]	; 0x60
   2ad94:	931b      	str	r3, [sp, #108]	; 0x6c
   2ad96:	9309      	str	r3, [sp, #36]	; 0x24
   2ad98:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   2ad9c:	46c8      	mov	r8, r9
   2ad9e:	9316      	str	r3, [sp, #88]	; 0x58
   2ada0:	9317      	str	r3, [sp, #92]	; 0x5c
   2ada2:	f89a 3000 	ldrb.w	r3, [sl]
   2ada6:	4654      	mov	r4, sl
   2ada8:	b1e3      	cbz	r3, 2ade4 <_svfprintf_r+0x90>
   2adaa:	2b25      	cmp	r3, #37	; 0x25
   2adac:	d102      	bne.n	2adb4 <_svfprintf_r+0x60>
   2adae:	e019      	b.n	2ade4 <_svfprintf_r+0x90>
   2adb0:	2b25      	cmp	r3, #37	; 0x25
   2adb2:	d003      	beq.n	2adbc <_svfprintf_r+0x68>
   2adb4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2adb8:	2b00      	cmp	r3, #0
   2adba:	d1f9      	bne.n	2adb0 <_svfprintf_r+0x5c>
   2adbc:	eba4 050a 	sub.w	r5, r4, sl
   2adc0:	b185      	cbz	r5, 2ade4 <_svfprintf_r+0x90>
   2adc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2adc4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2adc6:	f8c8 a000 	str.w	sl, [r8]
   2adca:	3301      	adds	r3, #1
   2adcc:	442a      	add	r2, r5
   2adce:	2b07      	cmp	r3, #7
   2add0:	f8c8 5004 	str.w	r5, [r8, #4]
   2add4:	9227      	str	r2, [sp, #156]	; 0x9c
   2add6:	9326      	str	r3, [sp, #152]	; 0x98
   2add8:	dc7f      	bgt.n	2aeda <_svfprintf_r+0x186>
   2adda:	f108 0808 	add.w	r8, r8, #8
   2adde:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ade0:	442b      	add	r3, r5
   2ade2:	9309      	str	r3, [sp, #36]	; 0x24
   2ade4:	7823      	ldrb	r3, [r4, #0]
   2ade6:	2b00      	cmp	r3, #0
   2ade8:	d07f      	beq.n	2aeea <_svfprintf_r+0x196>
   2adea:	2300      	movs	r3, #0
   2adec:	461a      	mov	r2, r3
   2adee:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2adf2:	4619      	mov	r1, r3
   2adf4:	930d      	str	r3, [sp, #52]	; 0x34
   2adf6:	469b      	mov	fp, r3
   2adf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2adfc:	7863      	ldrb	r3, [r4, #1]
   2adfe:	900a      	str	r0, [sp, #40]	; 0x28
   2ae00:	f104 0a01 	add.w	sl, r4, #1
   2ae04:	f10a 0a01 	add.w	sl, sl, #1
   2ae08:	f1a3 0020 	sub.w	r0, r3, #32
   2ae0c:	2858      	cmp	r0, #88	; 0x58
   2ae0e:	f200 83c1 	bhi.w	2b594 <_svfprintf_r+0x840>
   2ae12:	e8df f010 	tbh	[pc, r0, lsl #1]
   2ae16:	0238      	.short	0x0238
   2ae18:	03bf03bf 	.word	0x03bf03bf
   2ae1c:	03bf0240 	.word	0x03bf0240
   2ae20:	03bf03bf 	.word	0x03bf03bf
   2ae24:	03bf03bf 	.word	0x03bf03bf
   2ae28:	024503bf 	.word	0x024503bf
   2ae2c:	03bf0203 	.word	0x03bf0203
   2ae30:	026b005d 	.word	0x026b005d
   2ae34:	028603bf 	.word	0x028603bf
   2ae38:	039d039d 	.word	0x039d039d
   2ae3c:	039d039d 	.word	0x039d039d
   2ae40:	039d039d 	.word	0x039d039d
   2ae44:	039d039d 	.word	0x039d039d
   2ae48:	03bf039d 	.word	0x03bf039d
   2ae4c:	03bf03bf 	.word	0x03bf03bf
   2ae50:	03bf03bf 	.word	0x03bf03bf
   2ae54:	03bf03bf 	.word	0x03bf03bf
   2ae58:	03bf03bf 	.word	0x03bf03bf
   2ae5c:	033703bf 	.word	0x033703bf
   2ae60:	03bf0357 	.word	0x03bf0357
   2ae64:	03bf0357 	.word	0x03bf0357
   2ae68:	03bf03bf 	.word	0x03bf03bf
   2ae6c:	039803bf 	.word	0x039803bf
   2ae70:	03bf03bf 	.word	0x03bf03bf
   2ae74:	03bf03ad 	.word	0x03bf03ad
   2ae78:	03bf03bf 	.word	0x03bf03bf
   2ae7c:	03bf03bf 	.word	0x03bf03bf
   2ae80:	03bf0259 	.word	0x03bf0259
   2ae84:	031e03bf 	.word	0x031e03bf
   2ae88:	03bf03bf 	.word	0x03bf03bf
   2ae8c:	03bf03bf 	.word	0x03bf03bf
   2ae90:	03bf03bf 	.word	0x03bf03bf
   2ae94:	03bf03bf 	.word	0x03bf03bf
   2ae98:	03bf03bf 	.word	0x03bf03bf
   2ae9c:	02db02c6 	.word	0x02db02c6
   2aea0:	03570357 	.word	0x03570357
   2aea4:	028b0357 	.word	0x028b0357
   2aea8:	03bf02db 	.word	0x03bf02db
   2aeac:	029003bf 	.word	0x029003bf
   2aeb0:	029d03bf 	.word	0x029d03bf
   2aeb4:	02b401cc 	.word	0x02b401cc
   2aeb8:	03bf0208 	.word	0x03bf0208
   2aebc:	03bf01e1 	.word	0x03bf01e1
   2aec0:	03bf007e 	.word	0x03bf007e
   2aec4:	020d03bf 	.word	0x020d03bf
   2aec8:	980d      	ldr	r0, [sp, #52]	; 0x34
   2aeca:	930f      	str	r3, [sp, #60]	; 0x3c
   2aecc:	4240      	negs	r0, r0
   2aece:	900d      	str	r0, [sp, #52]	; 0x34
   2aed0:	f04b 0b04 	orr.w	fp, fp, #4
   2aed4:	f89a 3000 	ldrb.w	r3, [sl]
   2aed8:	e794      	b.n	2ae04 <_svfprintf_r+0xb0>
   2aeda:	aa25      	add	r2, sp, #148	; 0x94
   2aedc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2aede:	980c      	ldr	r0, [sp, #48]	; 0x30
   2aee0:	f002 ff0a 	bl	2dcf8 <__ssprint_r>
   2aee4:	b940      	cbnz	r0, 2aef8 <_svfprintf_r+0x1a4>
   2aee6:	46c8      	mov	r8, r9
   2aee8:	e779      	b.n	2adde <_svfprintf_r+0x8a>
   2aeea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   2aeec:	b123      	cbz	r3, 2aef8 <_svfprintf_r+0x1a4>
   2aeee:	980c      	ldr	r0, [sp, #48]	; 0x30
   2aef0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2aef2:	aa25      	add	r2, sp, #148	; 0x94
   2aef4:	f002 ff00 	bl	2dcf8 <__ssprint_r>
   2aef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2aefa:	899b      	ldrh	r3, [r3, #12]
   2aefc:	f013 0f40 	tst.w	r3, #64	; 0x40
   2af00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2af02:	bf18      	it	ne
   2af04:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2af08:	9309      	str	r3, [sp, #36]	; 0x24
   2af0a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2af0c:	b043      	add	sp, #268	; 0x10c
   2af0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2af12:	f01b 0f20 	tst.w	fp, #32
   2af16:	9311      	str	r3, [sp, #68]	; 0x44
   2af18:	f040 81dd 	bne.w	2b2d6 <_svfprintf_r+0x582>
   2af1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2af1e:	f01b 0f10 	tst.w	fp, #16
   2af22:	4613      	mov	r3, r2
   2af24:	f040 856e 	bne.w	2ba04 <_svfprintf_r+0xcb0>
   2af28:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2af2c:	f000 856a 	beq.w	2ba04 <_svfprintf_r+0xcb0>
   2af30:	8814      	ldrh	r4, [r2, #0]
   2af32:	3204      	adds	r2, #4
   2af34:	2500      	movs	r5, #0
   2af36:	2301      	movs	r3, #1
   2af38:	920f      	str	r2, [sp, #60]	; 0x3c
   2af3a:	2700      	movs	r7, #0
   2af3c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2af40:	990a      	ldr	r1, [sp, #40]	; 0x28
   2af42:	1c4a      	adds	r2, r1, #1
   2af44:	f000 8265 	beq.w	2b412 <_svfprintf_r+0x6be>
   2af48:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   2af4c:	9207      	str	r2, [sp, #28]
   2af4e:	ea54 0205 	orrs.w	r2, r4, r5
   2af52:	f040 8264 	bne.w	2b41e <_svfprintf_r+0x6ca>
   2af56:	2900      	cmp	r1, #0
   2af58:	f040 843c 	bne.w	2b7d4 <_svfprintf_r+0xa80>
   2af5c:	2b00      	cmp	r3, #0
   2af5e:	f040 84d7 	bne.w	2b910 <_svfprintf_r+0xbbc>
   2af62:	f01b 0301 	ands.w	r3, fp, #1
   2af66:	930e      	str	r3, [sp, #56]	; 0x38
   2af68:	f000 8604 	beq.w	2bb74 <_svfprintf_r+0xe20>
   2af6c:	ae42      	add	r6, sp, #264	; 0x108
   2af6e:	2330      	movs	r3, #48	; 0x30
   2af70:	f806 3d41 	strb.w	r3, [r6, #-65]!
   2af74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2af76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2af78:	4293      	cmp	r3, r2
   2af7a:	bfb8      	it	lt
   2af7c:	4613      	movlt	r3, r2
   2af7e:	9308      	str	r3, [sp, #32]
   2af80:	2300      	movs	r3, #0
   2af82:	9312      	str	r3, [sp, #72]	; 0x48
   2af84:	b117      	cbz	r7, 2af8c <_svfprintf_r+0x238>
   2af86:	9b08      	ldr	r3, [sp, #32]
   2af88:	3301      	adds	r3, #1
   2af8a:	9308      	str	r3, [sp, #32]
   2af8c:	9b07      	ldr	r3, [sp, #28]
   2af8e:	f013 0302 	ands.w	r3, r3, #2
   2af92:	9310      	str	r3, [sp, #64]	; 0x40
   2af94:	d002      	beq.n	2af9c <_svfprintf_r+0x248>
   2af96:	9b08      	ldr	r3, [sp, #32]
   2af98:	3302      	adds	r3, #2
   2af9a:	9308      	str	r3, [sp, #32]
   2af9c:	9b07      	ldr	r3, [sp, #28]
   2af9e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   2afa2:	f040 830e 	bne.w	2b5c2 <_svfprintf_r+0x86e>
   2afa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2afa8:	9a08      	ldr	r2, [sp, #32]
   2afaa:	eba3 0b02 	sub.w	fp, r3, r2
   2afae:	f1bb 0f00 	cmp.w	fp, #0
   2afb2:	f340 8306 	ble.w	2b5c2 <_svfprintf_r+0x86e>
   2afb6:	f1bb 0f10 	cmp.w	fp, #16
   2afba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2afbc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2afbe:	dd29      	ble.n	2b014 <_svfprintf_r+0x2c0>
   2afc0:	4643      	mov	r3, r8
   2afc2:	4621      	mov	r1, r4
   2afc4:	46a8      	mov	r8, r5
   2afc6:	2710      	movs	r7, #16
   2afc8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2afca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2afcc:	e006      	b.n	2afdc <_svfprintf_r+0x288>
   2afce:	f1ab 0b10 	sub.w	fp, fp, #16
   2afd2:	f1bb 0f10 	cmp.w	fp, #16
   2afd6:	f103 0308 	add.w	r3, r3, #8
   2afda:	dd18      	ble.n	2b00e <_svfprintf_r+0x2ba>
   2afdc:	3201      	adds	r2, #1
   2afde:	48b7      	ldr	r0, [pc, #732]	; (2b2bc <_svfprintf_r+0x568>)
   2afe0:	9226      	str	r2, [sp, #152]	; 0x98
   2afe2:	3110      	adds	r1, #16
   2afe4:	2a07      	cmp	r2, #7
   2afe6:	9127      	str	r1, [sp, #156]	; 0x9c
   2afe8:	e883 0081 	stmia.w	r3, {r0, r7}
   2afec:	ddef      	ble.n	2afce <_svfprintf_r+0x27a>
   2afee:	aa25      	add	r2, sp, #148	; 0x94
   2aff0:	4629      	mov	r1, r5
   2aff2:	4620      	mov	r0, r4
   2aff4:	f002 fe80 	bl	2dcf8 <__ssprint_r>
   2aff8:	2800      	cmp	r0, #0
   2affa:	f47f af7d 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2affe:	f1ab 0b10 	sub.w	fp, fp, #16
   2b002:	f1bb 0f10 	cmp.w	fp, #16
   2b006:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2b008:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2b00a:	464b      	mov	r3, r9
   2b00c:	dce6      	bgt.n	2afdc <_svfprintf_r+0x288>
   2b00e:	4645      	mov	r5, r8
   2b010:	460c      	mov	r4, r1
   2b012:	4698      	mov	r8, r3
   2b014:	3201      	adds	r2, #1
   2b016:	4ba9      	ldr	r3, [pc, #676]	; (2b2bc <_svfprintf_r+0x568>)
   2b018:	9226      	str	r2, [sp, #152]	; 0x98
   2b01a:	445c      	add	r4, fp
   2b01c:	2a07      	cmp	r2, #7
   2b01e:	9427      	str	r4, [sp, #156]	; 0x9c
   2b020:	e888 0808 	stmia.w	r8, {r3, fp}
   2b024:	f300 8498 	bgt.w	2b958 <_svfprintf_r+0xc04>
   2b028:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2b02c:	f108 0808 	add.w	r8, r8, #8
   2b030:	b177      	cbz	r7, 2b050 <_svfprintf_r+0x2fc>
   2b032:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b034:	3301      	adds	r3, #1
   2b036:	3401      	adds	r4, #1
   2b038:	f10d 0177 	add.w	r1, sp, #119	; 0x77
   2b03c:	2201      	movs	r2, #1
   2b03e:	2b07      	cmp	r3, #7
   2b040:	9427      	str	r4, [sp, #156]	; 0x9c
   2b042:	9326      	str	r3, [sp, #152]	; 0x98
   2b044:	e888 0006 	stmia.w	r8, {r1, r2}
   2b048:	f300 83db 	bgt.w	2b802 <_svfprintf_r+0xaae>
   2b04c:	f108 0808 	add.w	r8, r8, #8
   2b050:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2b052:	b16b      	cbz	r3, 2b070 <_svfprintf_r+0x31c>
   2b054:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b056:	3301      	adds	r3, #1
   2b058:	3402      	adds	r4, #2
   2b05a:	a91e      	add	r1, sp, #120	; 0x78
   2b05c:	2202      	movs	r2, #2
   2b05e:	2b07      	cmp	r3, #7
   2b060:	9427      	str	r4, [sp, #156]	; 0x9c
   2b062:	9326      	str	r3, [sp, #152]	; 0x98
   2b064:	e888 0006 	stmia.w	r8, {r1, r2}
   2b068:	f300 83d6 	bgt.w	2b818 <_svfprintf_r+0xac4>
   2b06c:	f108 0808 	add.w	r8, r8, #8
   2b070:	2d80      	cmp	r5, #128	; 0x80
   2b072:	f000 8315 	beq.w	2b6a0 <_svfprintf_r+0x94c>
   2b076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b078:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b07a:	1a9f      	subs	r7, r3, r2
   2b07c:	2f00      	cmp	r7, #0
   2b07e:	dd36      	ble.n	2b0ee <_svfprintf_r+0x39a>
   2b080:	2f10      	cmp	r7, #16
   2b082:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b084:	4d8e      	ldr	r5, [pc, #568]	; (2b2c0 <_svfprintf_r+0x56c>)
   2b086:	dd27      	ble.n	2b0d8 <_svfprintf_r+0x384>
   2b088:	4642      	mov	r2, r8
   2b08a:	4621      	mov	r1, r4
   2b08c:	46b0      	mov	r8, r6
   2b08e:	f04f 0b10 	mov.w	fp, #16
   2b092:	462e      	mov	r6, r5
   2b094:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b096:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b098:	e004      	b.n	2b0a4 <_svfprintf_r+0x350>
   2b09a:	3f10      	subs	r7, #16
   2b09c:	2f10      	cmp	r7, #16
   2b09e:	f102 0208 	add.w	r2, r2, #8
   2b0a2:	dd15      	ble.n	2b0d0 <_svfprintf_r+0x37c>
   2b0a4:	3301      	adds	r3, #1
   2b0a6:	3110      	adds	r1, #16
   2b0a8:	2b07      	cmp	r3, #7
   2b0aa:	9127      	str	r1, [sp, #156]	; 0x9c
   2b0ac:	9326      	str	r3, [sp, #152]	; 0x98
   2b0ae:	e882 0840 	stmia.w	r2, {r6, fp}
   2b0b2:	ddf2      	ble.n	2b09a <_svfprintf_r+0x346>
   2b0b4:	aa25      	add	r2, sp, #148	; 0x94
   2b0b6:	4629      	mov	r1, r5
   2b0b8:	4620      	mov	r0, r4
   2b0ba:	f002 fe1d 	bl	2dcf8 <__ssprint_r>
   2b0be:	2800      	cmp	r0, #0
   2b0c0:	f47f af1a 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2b0c4:	3f10      	subs	r7, #16
   2b0c6:	2f10      	cmp	r7, #16
   2b0c8:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2b0ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b0cc:	464a      	mov	r2, r9
   2b0ce:	dce9      	bgt.n	2b0a4 <_svfprintf_r+0x350>
   2b0d0:	4635      	mov	r5, r6
   2b0d2:	460c      	mov	r4, r1
   2b0d4:	4646      	mov	r6, r8
   2b0d6:	4690      	mov	r8, r2
   2b0d8:	3301      	adds	r3, #1
   2b0da:	443c      	add	r4, r7
   2b0dc:	2b07      	cmp	r3, #7
   2b0de:	9427      	str	r4, [sp, #156]	; 0x9c
   2b0e0:	9326      	str	r3, [sp, #152]	; 0x98
   2b0e2:	e888 00a0 	stmia.w	r8, {r5, r7}
   2b0e6:	f300 8381 	bgt.w	2b7ec <_svfprintf_r+0xa98>
   2b0ea:	f108 0808 	add.w	r8, r8, #8
   2b0ee:	9b07      	ldr	r3, [sp, #28]
   2b0f0:	05df      	lsls	r7, r3, #23
   2b0f2:	f100 8268 	bmi.w	2b5c6 <_svfprintf_r+0x872>
   2b0f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b0f8:	990e      	ldr	r1, [sp, #56]	; 0x38
   2b0fa:	f8c8 6000 	str.w	r6, [r8]
   2b0fe:	3301      	adds	r3, #1
   2b100:	440c      	add	r4, r1
   2b102:	2b07      	cmp	r3, #7
   2b104:	9427      	str	r4, [sp, #156]	; 0x9c
   2b106:	f8c8 1004 	str.w	r1, [r8, #4]
   2b10a:	9326      	str	r3, [sp, #152]	; 0x98
   2b10c:	f300 834d 	bgt.w	2b7aa <_svfprintf_r+0xa56>
   2b110:	f108 0808 	add.w	r8, r8, #8
   2b114:	9b07      	ldr	r3, [sp, #28]
   2b116:	075b      	lsls	r3, r3, #29
   2b118:	d53a      	bpl.n	2b190 <_svfprintf_r+0x43c>
   2b11a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b11c:	9a08      	ldr	r2, [sp, #32]
   2b11e:	1a9d      	subs	r5, r3, r2
   2b120:	2d00      	cmp	r5, #0
   2b122:	dd35      	ble.n	2b190 <_svfprintf_r+0x43c>
   2b124:	2d10      	cmp	r5, #16
   2b126:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b128:	dd20      	ble.n	2b16c <_svfprintf_r+0x418>
   2b12a:	2610      	movs	r6, #16
   2b12c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2b12e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   2b132:	e004      	b.n	2b13e <_svfprintf_r+0x3ea>
   2b134:	3d10      	subs	r5, #16
   2b136:	2d10      	cmp	r5, #16
   2b138:	f108 0808 	add.w	r8, r8, #8
   2b13c:	dd16      	ble.n	2b16c <_svfprintf_r+0x418>
   2b13e:	3301      	adds	r3, #1
   2b140:	4a5e      	ldr	r2, [pc, #376]	; (2b2bc <_svfprintf_r+0x568>)
   2b142:	9326      	str	r3, [sp, #152]	; 0x98
   2b144:	3410      	adds	r4, #16
   2b146:	2b07      	cmp	r3, #7
   2b148:	9427      	str	r4, [sp, #156]	; 0x9c
   2b14a:	e888 0044 	stmia.w	r8, {r2, r6}
   2b14e:	ddf1      	ble.n	2b134 <_svfprintf_r+0x3e0>
   2b150:	aa25      	add	r2, sp, #148	; 0x94
   2b152:	4659      	mov	r1, fp
   2b154:	4638      	mov	r0, r7
   2b156:	f002 fdcf 	bl	2dcf8 <__ssprint_r>
   2b15a:	2800      	cmp	r0, #0
   2b15c:	f47f aecc 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2b160:	3d10      	subs	r5, #16
   2b162:	2d10      	cmp	r5, #16
   2b164:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b166:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b168:	46c8      	mov	r8, r9
   2b16a:	dce8      	bgt.n	2b13e <_svfprintf_r+0x3ea>
   2b16c:	3301      	adds	r3, #1
   2b16e:	4a53      	ldr	r2, [pc, #332]	; (2b2bc <_svfprintf_r+0x568>)
   2b170:	9326      	str	r3, [sp, #152]	; 0x98
   2b172:	442c      	add	r4, r5
   2b174:	2b07      	cmp	r3, #7
   2b176:	9427      	str	r4, [sp, #156]	; 0x9c
   2b178:	e888 0024 	stmia.w	r8, {r2, r5}
   2b17c:	dd08      	ble.n	2b190 <_svfprintf_r+0x43c>
   2b17e:	aa25      	add	r2, sp, #148	; 0x94
   2b180:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b182:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b184:	f002 fdb8 	bl	2dcf8 <__ssprint_r>
   2b188:	2800      	cmp	r0, #0
   2b18a:	f47f aeb5 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2b18e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b190:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b192:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2b194:	9908      	ldr	r1, [sp, #32]
   2b196:	428a      	cmp	r2, r1
   2b198:	bfac      	ite	ge
   2b19a:	189b      	addge	r3, r3, r2
   2b19c:	185b      	addlt	r3, r3, r1
   2b19e:	9309      	str	r3, [sp, #36]	; 0x24
   2b1a0:	2c00      	cmp	r4, #0
   2b1a2:	f040 830d 	bne.w	2b7c0 <_svfprintf_r+0xa6c>
   2b1a6:	2300      	movs	r3, #0
   2b1a8:	9326      	str	r3, [sp, #152]	; 0x98
   2b1aa:	46c8      	mov	r8, r9
   2b1ac:	e5f9      	b.n	2ada2 <_svfprintf_r+0x4e>
   2b1ae:	9311      	str	r3, [sp, #68]	; 0x44
   2b1b0:	f01b 0320 	ands.w	r3, fp, #32
   2b1b4:	f040 81e3 	bne.w	2b57e <_svfprintf_r+0x82a>
   2b1b8:	f01b 0210 	ands.w	r2, fp, #16
   2b1bc:	f040 842e 	bne.w	2ba1c <_svfprintf_r+0xcc8>
   2b1c0:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   2b1c4:	f000 842a 	beq.w	2ba1c <_svfprintf_r+0xcc8>
   2b1c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2b1ca:	4613      	mov	r3, r2
   2b1cc:	460a      	mov	r2, r1
   2b1ce:	3204      	adds	r2, #4
   2b1d0:	880c      	ldrh	r4, [r1, #0]
   2b1d2:	920f      	str	r2, [sp, #60]	; 0x3c
   2b1d4:	2500      	movs	r5, #0
   2b1d6:	e6b0      	b.n	2af3a <_svfprintf_r+0x1e6>
   2b1d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b1da:	9311      	str	r3, [sp, #68]	; 0x44
   2b1dc:	6816      	ldr	r6, [r2, #0]
   2b1de:	2400      	movs	r4, #0
   2b1e0:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
   2b1e4:	1d15      	adds	r5, r2, #4
   2b1e6:	2e00      	cmp	r6, #0
   2b1e8:	f000 86a7 	beq.w	2bf3a <_svfprintf_r+0x11e6>
   2b1ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2b1ee:	1c53      	adds	r3, r2, #1
   2b1f0:	f000 8609 	beq.w	2be06 <_svfprintf_r+0x10b2>
   2b1f4:	4621      	mov	r1, r4
   2b1f6:	4630      	mov	r0, r6
   2b1f8:	f7d5 f812 	bl	220 <memchr>
   2b1fc:	2800      	cmp	r0, #0
   2b1fe:	f000 86e1 	beq.w	2bfc4 <_svfprintf_r+0x1270>
   2b202:	1b83      	subs	r3, r0, r6
   2b204:	930e      	str	r3, [sp, #56]	; 0x38
   2b206:	940a      	str	r4, [sp, #40]	; 0x28
   2b208:	950f      	str	r5, [sp, #60]	; 0x3c
   2b20a:	f8cd b01c 	str.w	fp, [sp, #28]
   2b20e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2b212:	9308      	str	r3, [sp, #32]
   2b214:	9412      	str	r4, [sp, #72]	; 0x48
   2b216:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2b21a:	e6b3      	b.n	2af84 <_svfprintf_r+0x230>
   2b21c:	f89a 3000 	ldrb.w	r3, [sl]
   2b220:	2201      	movs	r2, #1
   2b222:	212b      	movs	r1, #43	; 0x2b
   2b224:	e5ee      	b.n	2ae04 <_svfprintf_r+0xb0>
   2b226:	f04b 0b20 	orr.w	fp, fp, #32
   2b22a:	f89a 3000 	ldrb.w	r3, [sl]
   2b22e:	e5e9      	b.n	2ae04 <_svfprintf_r+0xb0>
   2b230:	9311      	str	r3, [sp, #68]	; 0x44
   2b232:	2a00      	cmp	r2, #0
   2b234:	f040 8795 	bne.w	2c162 <_svfprintf_r+0x140e>
   2b238:	4b22      	ldr	r3, [pc, #136]	; (2b2c4 <_svfprintf_r+0x570>)
   2b23a:	9318      	str	r3, [sp, #96]	; 0x60
   2b23c:	f01b 0f20 	tst.w	fp, #32
   2b240:	f040 8111 	bne.w	2b466 <_svfprintf_r+0x712>
   2b244:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b246:	f01b 0f10 	tst.w	fp, #16
   2b24a:	4613      	mov	r3, r2
   2b24c:	f040 83e1 	bne.w	2ba12 <_svfprintf_r+0xcbe>
   2b250:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2b254:	f000 83dd 	beq.w	2ba12 <_svfprintf_r+0xcbe>
   2b258:	3304      	adds	r3, #4
   2b25a:	8814      	ldrh	r4, [r2, #0]
   2b25c:	930f      	str	r3, [sp, #60]	; 0x3c
   2b25e:	2500      	movs	r5, #0
   2b260:	f01b 0f01 	tst.w	fp, #1
   2b264:	f000 810c 	beq.w	2b480 <_svfprintf_r+0x72c>
   2b268:	ea54 0305 	orrs.w	r3, r4, r5
   2b26c:	f000 8108 	beq.w	2b480 <_svfprintf_r+0x72c>
   2b270:	2330      	movs	r3, #48	; 0x30
   2b272:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   2b276:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   2b27a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   2b27e:	f04b 0b02 	orr.w	fp, fp, #2
   2b282:	2302      	movs	r3, #2
   2b284:	e659      	b.n	2af3a <_svfprintf_r+0x1e6>
   2b286:	f89a 3000 	ldrb.w	r3, [sl]
   2b28a:	2900      	cmp	r1, #0
   2b28c:	f47f adba 	bne.w	2ae04 <_svfprintf_r+0xb0>
   2b290:	2201      	movs	r2, #1
   2b292:	2120      	movs	r1, #32
   2b294:	e5b6      	b.n	2ae04 <_svfprintf_r+0xb0>
   2b296:	f04b 0b01 	orr.w	fp, fp, #1
   2b29a:	f89a 3000 	ldrb.w	r3, [sl]
   2b29e:	e5b1      	b.n	2ae04 <_svfprintf_r+0xb0>
   2b2a0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2b2a2:	6823      	ldr	r3, [r4, #0]
   2b2a4:	930d      	str	r3, [sp, #52]	; 0x34
   2b2a6:	4618      	mov	r0, r3
   2b2a8:	2800      	cmp	r0, #0
   2b2aa:	4623      	mov	r3, r4
   2b2ac:	f103 0304 	add.w	r3, r3, #4
   2b2b0:	f6ff ae0a 	blt.w	2aec8 <_svfprintf_r+0x174>
   2b2b4:	930f      	str	r3, [sp, #60]	; 0x3c
   2b2b6:	f89a 3000 	ldrb.w	r3, [sl]
   2b2ba:	e5a3      	b.n	2ae04 <_svfprintf_r+0xb0>
   2b2bc:	00032a54 	.word	0x00032a54
   2b2c0:	00032a64 	.word	0x00032a64
   2b2c4:	00032a38 	.word	0x00032a38
   2b2c8:	f04b 0b10 	orr.w	fp, fp, #16
   2b2cc:	f01b 0f20 	tst.w	fp, #32
   2b2d0:	9311      	str	r3, [sp, #68]	; 0x44
   2b2d2:	f43f ae23 	beq.w	2af1c <_svfprintf_r+0x1c8>
   2b2d6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2b2d8:	3507      	adds	r5, #7
   2b2da:	f025 0307 	bic.w	r3, r5, #7
   2b2de:	f103 0208 	add.w	r2, r3, #8
   2b2e2:	e9d3 4500 	ldrd	r4, r5, [r3]
   2b2e6:	920f      	str	r2, [sp, #60]	; 0x3c
   2b2e8:	2301      	movs	r3, #1
   2b2ea:	e626      	b.n	2af3a <_svfprintf_r+0x1e6>
   2b2ec:	f89a 3000 	ldrb.w	r3, [sl]
   2b2f0:	2b2a      	cmp	r3, #42	; 0x2a
   2b2f2:	f10a 0401 	add.w	r4, sl, #1
   2b2f6:	f000 8727 	beq.w	2c148 <_svfprintf_r+0x13f4>
   2b2fa:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2b2fe:	2809      	cmp	r0, #9
   2b300:	46a2      	mov	sl, r4
   2b302:	f200 86ad 	bhi.w	2c060 <_svfprintf_r+0x130c>
   2b306:	2300      	movs	r3, #0
   2b308:	461c      	mov	r4, r3
   2b30a:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2b30e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2b312:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2b316:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2b31a:	2809      	cmp	r0, #9
   2b31c:	d9f5      	bls.n	2b30a <_svfprintf_r+0x5b6>
   2b31e:	940a      	str	r4, [sp, #40]	; 0x28
   2b320:	e572      	b.n	2ae08 <_svfprintf_r+0xb4>
   2b322:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   2b326:	f89a 3000 	ldrb.w	r3, [sl]
   2b32a:	e56b      	b.n	2ae04 <_svfprintf_r+0xb0>
   2b32c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   2b330:	f89a 3000 	ldrb.w	r3, [sl]
   2b334:	e566      	b.n	2ae04 <_svfprintf_r+0xb0>
   2b336:	f89a 3000 	ldrb.w	r3, [sl]
   2b33a:	2b6c      	cmp	r3, #108	; 0x6c
   2b33c:	bf03      	ittte	eq
   2b33e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   2b342:	f04b 0b20 	orreq.w	fp, fp, #32
   2b346:	f10a 0a01 	addeq.w	sl, sl, #1
   2b34a:	f04b 0b10 	orrne.w	fp, fp, #16
   2b34e:	e559      	b.n	2ae04 <_svfprintf_r+0xb0>
   2b350:	2a00      	cmp	r2, #0
   2b352:	f040 8711 	bne.w	2c178 <_svfprintf_r+0x1424>
   2b356:	f01b 0f20 	tst.w	fp, #32
   2b35a:	f040 84f9 	bne.w	2bd50 <_svfprintf_r+0xffc>
   2b35e:	f01b 0f10 	tst.w	fp, #16
   2b362:	f040 84ac 	bne.w	2bcbe <_svfprintf_r+0xf6a>
   2b366:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2b36a:	f000 84a8 	beq.w	2bcbe <_svfprintf_r+0xf6a>
   2b36e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b370:	6813      	ldr	r3, [r2, #0]
   2b372:	3204      	adds	r2, #4
   2b374:	920f      	str	r2, [sp, #60]	; 0x3c
   2b376:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   2b37a:	801a      	strh	r2, [r3, #0]
   2b37c:	e511      	b.n	2ada2 <_svfprintf_r+0x4e>
   2b37e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2b380:	4bb3      	ldr	r3, [pc, #716]	; (2b650 <_svfprintf_r+0x8fc>)
   2b382:	680c      	ldr	r4, [r1, #0]
   2b384:	9318      	str	r3, [sp, #96]	; 0x60
   2b386:	2230      	movs	r2, #48	; 0x30
   2b388:	2378      	movs	r3, #120	; 0x78
   2b38a:	3104      	adds	r1, #4
   2b38c:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   2b390:	9311      	str	r3, [sp, #68]	; 0x44
   2b392:	f04b 0b02 	orr.w	fp, fp, #2
   2b396:	910f      	str	r1, [sp, #60]	; 0x3c
   2b398:	2500      	movs	r5, #0
   2b39a:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   2b39e:	2302      	movs	r3, #2
   2b3a0:	e5cb      	b.n	2af3a <_svfprintf_r+0x1e6>
   2b3a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2b3a4:	9311      	str	r3, [sp, #68]	; 0x44
   2b3a6:	680a      	ldr	r2, [r1, #0]
   2b3a8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2b3ac:	2300      	movs	r3, #0
   2b3ae:	460a      	mov	r2, r1
   2b3b0:	461f      	mov	r7, r3
   2b3b2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2b3b6:	3204      	adds	r2, #4
   2b3b8:	2301      	movs	r3, #1
   2b3ba:	9308      	str	r3, [sp, #32]
   2b3bc:	f8cd b01c 	str.w	fp, [sp, #28]
   2b3c0:	970a      	str	r7, [sp, #40]	; 0x28
   2b3c2:	9712      	str	r7, [sp, #72]	; 0x48
   2b3c4:	920f      	str	r2, [sp, #60]	; 0x3c
   2b3c6:	930e      	str	r3, [sp, #56]	; 0x38
   2b3c8:	ae28      	add	r6, sp, #160	; 0xa0
   2b3ca:	e5df      	b.n	2af8c <_svfprintf_r+0x238>
   2b3cc:	9311      	str	r3, [sp, #68]	; 0x44
   2b3ce:	2a00      	cmp	r2, #0
   2b3d0:	f040 86ea 	bne.w	2c1a8 <_svfprintf_r+0x1454>
   2b3d4:	f01b 0f20 	tst.w	fp, #32
   2b3d8:	d15d      	bne.n	2b496 <_svfprintf_r+0x742>
   2b3da:	f01b 0f10 	tst.w	fp, #16
   2b3de:	f040 8308 	bne.w	2b9f2 <_svfprintf_r+0xc9e>
   2b3e2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2b3e6:	f000 8304 	beq.w	2b9f2 <_svfprintf_r+0xc9e>
   2b3ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2b3ec:	f9b1 4000 	ldrsh.w	r4, [r1]
   2b3f0:	3104      	adds	r1, #4
   2b3f2:	17e5      	asrs	r5, r4, #31
   2b3f4:	4622      	mov	r2, r4
   2b3f6:	462b      	mov	r3, r5
   2b3f8:	910f      	str	r1, [sp, #60]	; 0x3c
   2b3fa:	2a00      	cmp	r2, #0
   2b3fc:	f173 0300 	sbcs.w	r3, r3, #0
   2b400:	db58      	blt.n	2b4b4 <_svfprintf_r+0x760>
   2b402:	990a      	ldr	r1, [sp, #40]	; 0x28
   2b404:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2b408:	1c4a      	adds	r2, r1, #1
   2b40a:	f04f 0301 	mov.w	r3, #1
   2b40e:	f47f ad9b 	bne.w	2af48 <_svfprintf_r+0x1f4>
   2b412:	ea54 0205 	orrs.w	r2, r4, r5
   2b416:	f000 81df 	beq.w	2b7d8 <_svfprintf_r+0xa84>
   2b41a:	f8cd b01c 	str.w	fp, [sp, #28]
   2b41e:	2b01      	cmp	r3, #1
   2b420:	f000 827b 	beq.w	2b91a <_svfprintf_r+0xbc6>
   2b424:	2b02      	cmp	r3, #2
   2b426:	f040 8206 	bne.w	2b836 <_svfprintf_r+0xae2>
   2b42a:	9818      	ldr	r0, [sp, #96]	; 0x60
   2b42c:	464e      	mov	r6, r9
   2b42e:	0923      	lsrs	r3, r4, #4
   2b430:	f004 010f 	and.w	r1, r4, #15
   2b434:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   2b438:	092a      	lsrs	r2, r5, #4
   2b43a:	461c      	mov	r4, r3
   2b43c:	4615      	mov	r5, r2
   2b43e:	5c43      	ldrb	r3, [r0, r1]
   2b440:	f806 3d01 	strb.w	r3, [r6, #-1]!
   2b444:	ea54 0305 	orrs.w	r3, r4, r5
   2b448:	d1f1      	bne.n	2b42e <_svfprintf_r+0x6da>
   2b44a:	eba9 0306 	sub.w	r3, r9, r6
   2b44e:	930e      	str	r3, [sp, #56]	; 0x38
   2b450:	e590      	b.n	2af74 <_svfprintf_r+0x220>
   2b452:	9311      	str	r3, [sp, #68]	; 0x44
   2b454:	2a00      	cmp	r2, #0
   2b456:	f040 86a3 	bne.w	2c1a0 <_svfprintf_r+0x144c>
   2b45a:	4b7e      	ldr	r3, [pc, #504]	; (2b654 <_svfprintf_r+0x900>)
   2b45c:	9318      	str	r3, [sp, #96]	; 0x60
   2b45e:	f01b 0f20 	tst.w	fp, #32
   2b462:	f43f aeef 	beq.w	2b244 <_svfprintf_r+0x4f0>
   2b466:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2b468:	3507      	adds	r5, #7
   2b46a:	f025 0307 	bic.w	r3, r5, #7
   2b46e:	f103 0208 	add.w	r2, r3, #8
   2b472:	f01b 0f01 	tst.w	fp, #1
   2b476:	920f      	str	r2, [sp, #60]	; 0x3c
   2b478:	e9d3 4500 	ldrd	r4, r5, [r3]
   2b47c:	f47f aef4 	bne.w	2b268 <_svfprintf_r+0x514>
   2b480:	2302      	movs	r3, #2
   2b482:	e55a      	b.n	2af3a <_svfprintf_r+0x1e6>
   2b484:	9311      	str	r3, [sp, #68]	; 0x44
   2b486:	2a00      	cmp	r2, #0
   2b488:	f040 8686 	bne.w	2c198 <_svfprintf_r+0x1444>
   2b48c:	f04b 0b10 	orr.w	fp, fp, #16
   2b490:	f01b 0f20 	tst.w	fp, #32
   2b494:	d0a1      	beq.n	2b3da <_svfprintf_r+0x686>
   2b496:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2b498:	3507      	adds	r5, #7
   2b49a:	f025 0507 	bic.w	r5, r5, #7
   2b49e:	e9d5 2300 	ldrd	r2, r3, [r5]
   2b4a2:	2a00      	cmp	r2, #0
   2b4a4:	f105 0108 	add.w	r1, r5, #8
   2b4a8:	461d      	mov	r5, r3
   2b4aa:	f173 0300 	sbcs.w	r3, r3, #0
   2b4ae:	910f      	str	r1, [sp, #60]	; 0x3c
   2b4b0:	4614      	mov	r4, r2
   2b4b2:	daa6      	bge.n	2b402 <_svfprintf_r+0x6ae>
   2b4b4:	272d      	movs	r7, #45	; 0x2d
   2b4b6:	4264      	negs	r4, r4
   2b4b8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   2b4bc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2b4c0:	2301      	movs	r3, #1
   2b4c2:	e53d      	b.n	2af40 <_svfprintf_r+0x1ec>
   2b4c4:	9311      	str	r3, [sp, #68]	; 0x44
   2b4c6:	2a00      	cmp	r2, #0
   2b4c8:	f040 8662 	bne.w	2c190 <_svfprintf_r+0x143c>
   2b4cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2b4ce:	3507      	adds	r5, #7
   2b4d0:	f025 0307 	bic.w	r3, r5, #7
   2b4d4:	f103 0208 	add.w	r2, r3, #8
   2b4d8:	920f      	str	r2, [sp, #60]	; 0x3c
   2b4da:	681a      	ldr	r2, [r3, #0]
   2b4dc:	9215      	str	r2, [sp, #84]	; 0x54
   2b4de:	685b      	ldr	r3, [r3, #4]
   2b4e0:	9314      	str	r3, [sp, #80]	; 0x50
   2b4e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2b4e4:	9d15      	ldr	r5, [sp, #84]	; 0x54
   2b4e6:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   2b4ea:	4628      	mov	r0, r5
   2b4ec:	4621      	mov	r1, r4
   2b4ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b4f2:	4b59      	ldr	r3, [pc, #356]	; (2b658 <_svfprintf_r+0x904>)
   2b4f4:	f7d5 fdc4 	bl	1080 <__aeabi_dcmpun>
   2b4f8:	2800      	cmp	r0, #0
   2b4fa:	f040 834a 	bne.w	2bb92 <_svfprintf_r+0xe3e>
   2b4fe:	4628      	mov	r0, r5
   2b500:	4621      	mov	r1, r4
   2b502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b506:	4b54      	ldr	r3, [pc, #336]	; (2b658 <_svfprintf_r+0x904>)
   2b508:	f7d5 fd9c 	bl	1044 <__aeabi_dcmple>
   2b50c:	2800      	cmp	r0, #0
   2b50e:	f040 8340 	bne.w	2bb92 <_svfprintf_r+0xe3e>
   2b512:	a815      	add	r0, sp, #84	; 0x54
   2b514:	c80d      	ldmia	r0, {r0, r2, r3}
   2b516:	9914      	ldr	r1, [sp, #80]	; 0x50
   2b518:	f7d5 fd8a 	bl	1030 <__aeabi_dcmplt>
   2b51c:	2800      	cmp	r0, #0
   2b51e:	f040 8530 	bne.w	2bf82 <_svfprintf_r+0x122e>
   2b522:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2b526:	4e4d      	ldr	r6, [pc, #308]	; (2b65c <_svfprintf_r+0x908>)
   2b528:	4b4d      	ldr	r3, [pc, #308]	; (2b660 <_svfprintf_r+0x90c>)
   2b52a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   2b52e:	9007      	str	r0, [sp, #28]
   2b530:	9811      	ldr	r0, [sp, #68]	; 0x44
   2b532:	2203      	movs	r2, #3
   2b534:	2100      	movs	r1, #0
   2b536:	9208      	str	r2, [sp, #32]
   2b538:	910a      	str	r1, [sp, #40]	; 0x28
   2b53a:	2847      	cmp	r0, #71	; 0x47
   2b53c:	bfd8      	it	le
   2b53e:	461e      	movle	r6, r3
   2b540:	920e      	str	r2, [sp, #56]	; 0x38
   2b542:	9112      	str	r1, [sp, #72]	; 0x48
   2b544:	e51e      	b.n	2af84 <_svfprintf_r+0x230>
   2b546:	f04b 0b08 	orr.w	fp, fp, #8
   2b54a:	f89a 3000 	ldrb.w	r3, [sl]
   2b54e:	e459      	b.n	2ae04 <_svfprintf_r+0xb0>
   2b550:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2b554:	2300      	movs	r3, #0
   2b556:	461c      	mov	r4, r3
   2b558:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2b55c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2b560:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2b564:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2b568:	2809      	cmp	r0, #9
   2b56a:	d9f5      	bls.n	2b558 <_svfprintf_r+0x804>
   2b56c:	940d      	str	r4, [sp, #52]	; 0x34
   2b56e:	e44b      	b.n	2ae08 <_svfprintf_r+0xb4>
   2b570:	f04b 0b10 	orr.w	fp, fp, #16
   2b574:	9311      	str	r3, [sp, #68]	; 0x44
   2b576:	f01b 0320 	ands.w	r3, fp, #32
   2b57a:	f43f ae1d 	beq.w	2b1b8 <_svfprintf_r+0x464>
   2b57e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2b580:	3507      	adds	r5, #7
   2b582:	f025 0307 	bic.w	r3, r5, #7
   2b586:	f103 0208 	add.w	r2, r3, #8
   2b58a:	e9d3 4500 	ldrd	r4, r5, [r3]
   2b58e:	920f      	str	r2, [sp, #60]	; 0x3c
   2b590:	2300      	movs	r3, #0
   2b592:	e4d2      	b.n	2af3a <_svfprintf_r+0x1e6>
   2b594:	9311      	str	r3, [sp, #68]	; 0x44
   2b596:	2a00      	cmp	r2, #0
   2b598:	f040 85e7 	bne.w	2c16a <_svfprintf_r+0x1416>
   2b59c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2b59e:	2a00      	cmp	r2, #0
   2b5a0:	f43f aca3 	beq.w	2aeea <_svfprintf_r+0x196>
   2b5a4:	2300      	movs	r3, #0
   2b5a6:	2101      	movs	r1, #1
   2b5a8:	461f      	mov	r7, r3
   2b5aa:	9108      	str	r1, [sp, #32]
   2b5ac:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2b5b0:	f8cd b01c 	str.w	fp, [sp, #28]
   2b5b4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2b5b8:	930a      	str	r3, [sp, #40]	; 0x28
   2b5ba:	9312      	str	r3, [sp, #72]	; 0x48
   2b5bc:	910e      	str	r1, [sp, #56]	; 0x38
   2b5be:	ae28      	add	r6, sp, #160	; 0xa0
   2b5c0:	e4e4      	b.n	2af8c <_svfprintf_r+0x238>
   2b5c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b5c4:	e534      	b.n	2b030 <_svfprintf_r+0x2dc>
   2b5c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b5c8:	2b65      	cmp	r3, #101	; 0x65
   2b5ca:	f340 80a7 	ble.w	2b71c <_svfprintf_r+0x9c8>
   2b5ce:	a815      	add	r0, sp, #84	; 0x54
   2b5d0:	c80d      	ldmia	r0, {r0, r2, r3}
   2b5d2:	9914      	ldr	r1, [sp, #80]	; 0x50
   2b5d4:	f7d5 fd22 	bl	101c <__aeabi_dcmpeq>
   2b5d8:	2800      	cmp	r0, #0
   2b5da:	f000 8150 	beq.w	2b87e <_svfprintf_r+0xb2a>
   2b5de:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b5e0:	4a20      	ldr	r2, [pc, #128]	; (2b664 <_svfprintf_r+0x910>)
   2b5e2:	f8c8 2000 	str.w	r2, [r8]
   2b5e6:	3301      	adds	r3, #1
   2b5e8:	3401      	adds	r4, #1
   2b5ea:	2201      	movs	r2, #1
   2b5ec:	2b07      	cmp	r3, #7
   2b5ee:	9427      	str	r4, [sp, #156]	; 0x9c
   2b5f0:	9326      	str	r3, [sp, #152]	; 0x98
   2b5f2:	f8c8 2004 	str.w	r2, [r8, #4]
   2b5f6:	f300 836a 	bgt.w	2bcce <_svfprintf_r+0xf7a>
   2b5fa:	f108 0808 	add.w	r8, r8, #8
   2b5fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2b600:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2b602:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b604:	4293      	cmp	r3, r2
   2b606:	db03      	blt.n	2b610 <_svfprintf_r+0x8bc>
   2b608:	9b07      	ldr	r3, [sp, #28]
   2b60a:	07dd      	lsls	r5, r3, #31
   2b60c:	f57f ad82 	bpl.w	2b114 <_svfprintf_r+0x3c0>
   2b610:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b612:	9919      	ldr	r1, [sp, #100]	; 0x64
   2b614:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2b616:	f8c8 2000 	str.w	r2, [r8]
   2b61a:	3301      	adds	r3, #1
   2b61c:	440c      	add	r4, r1
   2b61e:	2b07      	cmp	r3, #7
   2b620:	f8c8 1004 	str.w	r1, [r8, #4]
   2b624:	9427      	str	r4, [sp, #156]	; 0x9c
   2b626:	9326      	str	r3, [sp, #152]	; 0x98
   2b628:	f300 839e 	bgt.w	2bd68 <_svfprintf_r+0x1014>
   2b62c:	f108 0808 	add.w	r8, r8, #8
   2b630:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2b632:	1e5e      	subs	r6, r3, #1
   2b634:	2e00      	cmp	r6, #0
   2b636:	f77f ad6d 	ble.w	2b114 <_svfprintf_r+0x3c0>
   2b63a:	2e10      	cmp	r6, #16
   2b63c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b63e:	4d0a      	ldr	r5, [pc, #40]	; (2b668 <_svfprintf_r+0x914>)
   2b640:	f340 81f5 	ble.w	2ba2e <_svfprintf_r+0xcda>
   2b644:	4622      	mov	r2, r4
   2b646:	2710      	movs	r7, #16
   2b648:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2b64c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2b64e:	e013      	b.n	2b678 <_svfprintf_r+0x924>
   2b650:	00032a38 	.word	0x00032a38
   2b654:	00032a24 	.word	0x00032a24
   2b658:	7fefffff 	.word	0x7fefffff
   2b65c:	00032a18 	.word	0x00032a18
   2b660:	00032a14 	.word	0x00032a14
   2b664:	0003258c 	.word	0x0003258c
   2b668:	00032a64 	.word	0x00032a64
   2b66c:	f108 0808 	add.w	r8, r8, #8
   2b670:	3e10      	subs	r6, #16
   2b672:	2e10      	cmp	r6, #16
   2b674:	f340 81da 	ble.w	2ba2c <_svfprintf_r+0xcd8>
   2b678:	3301      	adds	r3, #1
   2b67a:	3210      	adds	r2, #16
   2b67c:	2b07      	cmp	r3, #7
   2b67e:	9227      	str	r2, [sp, #156]	; 0x9c
   2b680:	9326      	str	r3, [sp, #152]	; 0x98
   2b682:	e888 00a0 	stmia.w	r8, {r5, r7}
   2b686:	ddf1      	ble.n	2b66c <_svfprintf_r+0x918>
   2b688:	aa25      	add	r2, sp, #148	; 0x94
   2b68a:	4621      	mov	r1, r4
   2b68c:	4658      	mov	r0, fp
   2b68e:	f002 fb33 	bl	2dcf8 <__ssprint_r>
   2b692:	2800      	cmp	r0, #0
   2b694:	f47f ac30 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2b698:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2b69a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b69c:	46c8      	mov	r8, r9
   2b69e:	e7e7      	b.n	2b670 <_svfprintf_r+0x91c>
   2b6a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b6a2:	9a08      	ldr	r2, [sp, #32]
   2b6a4:	1a9f      	subs	r7, r3, r2
   2b6a6:	2f00      	cmp	r7, #0
   2b6a8:	f77f ace5 	ble.w	2b076 <_svfprintf_r+0x322>
   2b6ac:	2f10      	cmp	r7, #16
   2b6ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b6b0:	4db6      	ldr	r5, [pc, #728]	; (2b98c <_svfprintf_r+0xc38>)
   2b6b2:	dd27      	ble.n	2b704 <_svfprintf_r+0x9b0>
   2b6b4:	4642      	mov	r2, r8
   2b6b6:	4621      	mov	r1, r4
   2b6b8:	46b0      	mov	r8, r6
   2b6ba:	f04f 0b10 	mov.w	fp, #16
   2b6be:	462e      	mov	r6, r5
   2b6c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b6c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b6c4:	e004      	b.n	2b6d0 <_svfprintf_r+0x97c>
   2b6c6:	3f10      	subs	r7, #16
   2b6c8:	2f10      	cmp	r7, #16
   2b6ca:	f102 0208 	add.w	r2, r2, #8
   2b6ce:	dd15      	ble.n	2b6fc <_svfprintf_r+0x9a8>
   2b6d0:	3301      	adds	r3, #1
   2b6d2:	3110      	adds	r1, #16
   2b6d4:	2b07      	cmp	r3, #7
   2b6d6:	9127      	str	r1, [sp, #156]	; 0x9c
   2b6d8:	9326      	str	r3, [sp, #152]	; 0x98
   2b6da:	e882 0840 	stmia.w	r2, {r6, fp}
   2b6de:	ddf2      	ble.n	2b6c6 <_svfprintf_r+0x972>
   2b6e0:	aa25      	add	r2, sp, #148	; 0x94
   2b6e2:	4629      	mov	r1, r5
   2b6e4:	4620      	mov	r0, r4
   2b6e6:	f002 fb07 	bl	2dcf8 <__ssprint_r>
   2b6ea:	2800      	cmp	r0, #0
   2b6ec:	f47f ac04 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2b6f0:	3f10      	subs	r7, #16
   2b6f2:	2f10      	cmp	r7, #16
   2b6f4:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2b6f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b6f8:	464a      	mov	r2, r9
   2b6fa:	dce9      	bgt.n	2b6d0 <_svfprintf_r+0x97c>
   2b6fc:	4635      	mov	r5, r6
   2b6fe:	460c      	mov	r4, r1
   2b700:	4646      	mov	r6, r8
   2b702:	4690      	mov	r8, r2
   2b704:	3301      	adds	r3, #1
   2b706:	443c      	add	r4, r7
   2b708:	2b07      	cmp	r3, #7
   2b70a:	9427      	str	r4, [sp, #156]	; 0x9c
   2b70c:	9326      	str	r3, [sp, #152]	; 0x98
   2b70e:	e888 00a0 	stmia.w	r8, {r5, r7}
   2b712:	f300 8232 	bgt.w	2bb7a <_svfprintf_r+0xe26>
   2b716:	f108 0808 	add.w	r8, r8, #8
   2b71a:	e4ac      	b.n	2b076 <_svfprintf_r+0x322>
   2b71c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2b71e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2b720:	2b01      	cmp	r3, #1
   2b722:	f340 81fe 	ble.w	2bb22 <_svfprintf_r+0xdce>
   2b726:	3701      	adds	r7, #1
   2b728:	3401      	adds	r4, #1
   2b72a:	2301      	movs	r3, #1
   2b72c:	2f07      	cmp	r7, #7
   2b72e:	9427      	str	r4, [sp, #156]	; 0x9c
   2b730:	9726      	str	r7, [sp, #152]	; 0x98
   2b732:	f8c8 6000 	str.w	r6, [r8]
   2b736:	f8c8 3004 	str.w	r3, [r8, #4]
   2b73a:	f300 8203 	bgt.w	2bb44 <_svfprintf_r+0xdf0>
   2b73e:	f108 0808 	add.w	r8, r8, #8
   2b742:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2b744:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2b746:	f8c8 3000 	str.w	r3, [r8]
   2b74a:	3701      	adds	r7, #1
   2b74c:	4414      	add	r4, r2
   2b74e:	2f07      	cmp	r7, #7
   2b750:	9427      	str	r4, [sp, #156]	; 0x9c
   2b752:	9726      	str	r7, [sp, #152]	; 0x98
   2b754:	f8c8 2004 	str.w	r2, [r8, #4]
   2b758:	f300 8200 	bgt.w	2bb5c <_svfprintf_r+0xe08>
   2b75c:	f108 0808 	add.w	r8, r8, #8
   2b760:	a815      	add	r0, sp, #84	; 0x54
   2b762:	c80d      	ldmia	r0, {r0, r2, r3}
   2b764:	9914      	ldr	r1, [sp, #80]	; 0x50
   2b766:	f7d5 fc59 	bl	101c <__aeabi_dcmpeq>
   2b76a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2b76c:	2800      	cmp	r0, #0
   2b76e:	f040 8101 	bne.w	2b974 <_svfprintf_r+0xc20>
   2b772:	3b01      	subs	r3, #1
   2b774:	3701      	adds	r7, #1
   2b776:	3601      	adds	r6, #1
   2b778:	441c      	add	r4, r3
   2b77a:	2f07      	cmp	r7, #7
   2b77c:	9726      	str	r7, [sp, #152]	; 0x98
   2b77e:	9427      	str	r4, [sp, #156]	; 0x9c
   2b780:	f8c8 6000 	str.w	r6, [r8]
   2b784:	f8c8 3004 	str.w	r3, [r8, #4]
   2b788:	f300 8127 	bgt.w	2b9da <_svfprintf_r+0xc86>
   2b78c:	f108 0808 	add.w	r8, r8, #8
   2b790:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2b792:	f8c8 2004 	str.w	r2, [r8, #4]
   2b796:	3701      	adds	r7, #1
   2b798:	4414      	add	r4, r2
   2b79a:	ab21      	add	r3, sp, #132	; 0x84
   2b79c:	2f07      	cmp	r7, #7
   2b79e:	9427      	str	r4, [sp, #156]	; 0x9c
   2b7a0:	9726      	str	r7, [sp, #152]	; 0x98
   2b7a2:	f8c8 3000 	str.w	r3, [r8]
   2b7a6:	f77f acb3 	ble.w	2b110 <_svfprintf_r+0x3bc>
   2b7aa:	aa25      	add	r2, sp, #148	; 0x94
   2b7ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b7ae:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b7b0:	f002 faa2 	bl	2dcf8 <__ssprint_r>
   2b7b4:	2800      	cmp	r0, #0
   2b7b6:	f47f ab9f 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2b7ba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b7bc:	46c8      	mov	r8, r9
   2b7be:	e4a9      	b.n	2b114 <_svfprintf_r+0x3c0>
   2b7c0:	aa25      	add	r2, sp, #148	; 0x94
   2b7c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b7c4:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b7c6:	f002 fa97 	bl	2dcf8 <__ssprint_r>
   2b7ca:	2800      	cmp	r0, #0
   2b7cc:	f43f aceb 	beq.w	2b1a6 <_svfprintf_r+0x452>
   2b7d0:	f7ff bb92 	b.w	2aef8 <_svfprintf_r+0x1a4>
   2b7d4:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2b7d8:	2b01      	cmp	r3, #1
   2b7da:	f000 8134 	beq.w	2ba46 <_svfprintf_r+0xcf2>
   2b7de:	2b02      	cmp	r3, #2
   2b7e0:	d125      	bne.n	2b82e <_svfprintf_r+0xada>
   2b7e2:	f8cd b01c 	str.w	fp, [sp, #28]
   2b7e6:	2400      	movs	r4, #0
   2b7e8:	2500      	movs	r5, #0
   2b7ea:	e61e      	b.n	2b42a <_svfprintf_r+0x6d6>
   2b7ec:	aa25      	add	r2, sp, #148	; 0x94
   2b7ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b7f0:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b7f2:	f002 fa81 	bl	2dcf8 <__ssprint_r>
   2b7f6:	2800      	cmp	r0, #0
   2b7f8:	f47f ab7e 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2b7fc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b7fe:	46c8      	mov	r8, r9
   2b800:	e475      	b.n	2b0ee <_svfprintf_r+0x39a>
   2b802:	aa25      	add	r2, sp, #148	; 0x94
   2b804:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b806:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b808:	f002 fa76 	bl	2dcf8 <__ssprint_r>
   2b80c:	2800      	cmp	r0, #0
   2b80e:	f47f ab73 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2b812:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b814:	46c8      	mov	r8, r9
   2b816:	e41b      	b.n	2b050 <_svfprintf_r+0x2fc>
   2b818:	aa25      	add	r2, sp, #148	; 0x94
   2b81a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b81c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b81e:	f002 fa6b 	bl	2dcf8 <__ssprint_r>
   2b822:	2800      	cmp	r0, #0
   2b824:	f47f ab68 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2b828:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b82a:	46c8      	mov	r8, r9
   2b82c:	e420      	b.n	2b070 <_svfprintf_r+0x31c>
   2b82e:	f8cd b01c 	str.w	fp, [sp, #28]
   2b832:	2400      	movs	r4, #0
   2b834:	2500      	movs	r5, #0
   2b836:	4649      	mov	r1, r9
   2b838:	e000      	b.n	2b83c <_svfprintf_r+0xae8>
   2b83a:	4631      	mov	r1, r6
   2b83c:	08e2      	lsrs	r2, r4, #3
   2b83e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   2b842:	08e8      	lsrs	r0, r5, #3
   2b844:	f004 0307 	and.w	r3, r4, #7
   2b848:	4605      	mov	r5, r0
   2b84a:	4614      	mov	r4, r2
   2b84c:	3330      	adds	r3, #48	; 0x30
   2b84e:	ea54 0205 	orrs.w	r2, r4, r5
   2b852:	f801 3c01 	strb.w	r3, [r1, #-1]
   2b856:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
   2b85a:	d1ee      	bne.n	2b83a <_svfprintf_r+0xae6>
   2b85c:	9a07      	ldr	r2, [sp, #28]
   2b85e:	07d2      	lsls	r2, r2, #31
   2b860:	f57f adf3 	bpl.w	2b44a <_svfprintf_r+0x6f6>
   2b864:	2b30      	cmp	r3, #48	; 0x30
   2b866:	f43f adf0 	beq.w	2b44a <_svfprintf_r+0x6f6>
   2b86a:	3902      	subs	r1, #2
   2b86c:	2330      	movs	r3, #48	; 0x30
   2b86e:	f806 3c01 	strb.w	r3, [r6, #-1]
   2b872:	eba9 0301 	sub.w	r3, r9, r1
   2b876:	930e      	str	r3, [sp, #56]	; 0x38
   2b878:	460e      	mov	r6, r1
   2b87a:	f7ff bb7b 	b.w	2af74 <_svfprintf_r+0x220>
   2b87e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2b880:	2900      	cmp	r1, #0
   2b882:	f340 822e 	ble.w	2bce2 <_svfprintf_r+0xf8e>
   2b886:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2b888:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2b88a:	4293      	cmp	r3, r2
   2b88c:	bfa8      	it	ge
   2b88e:	4613      	movge	r3, r2
   2b890:	2b00      	cmp	r3, #0
   2b892:	461f      	mov	r7, r3
   2b894:	dd0d      	ble.n	2b8b2 <_svfprintf_r+0xb5e>
   2b896:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b898:	f8c8 6000 	str.w	r6, [r8]
   2b89c:	3301      	adds	r3, #1
   2b89e:	443c      	add	r4, r7
   2b8a0:	2b07      	cmp	r3, #7
   2b8a2:	9427      	str	r4, [sp, #156]	; 0x9c
   2b8a4:	f8c8 7004 	str.w	r7, [r8, #4]
   2b8a8:	9326      	str	r3, [sp, #152]	; 0x98
   2b8aa:	f300 831f 	bgt.w	2beec <_svfprintf_r+0x1198>
   2b8ae:	f108 0808 	add.w	r8, r8, #8
   2b8b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2b8b4:	2f00      	cmp	r7, #0
   2b8b6:	bfa8      	it	ge
   2b8b8:	1bdb      	subge	r3, r3, r7
   2b8ba:	2b00      	cmp	r3, #0
   2b8bc:	461f      	mov	r7, r3
   2b8be:	f340 80d6 	ble.w	2ba6e <_svfprintf_r+0xd1a>
   2b8c2:	2f10      	cmp	r7, #16
   2b8c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b8c6:	4d31      	ldr	r5, [pc, #196]	; (2b98c <_svfprintf_r+0xc38>)
   2b8c8:	f340 81ed 	ble.w	2bca6 <_svfprintf_r+0xf52>
   2b8cc:	4642      	mov	r2, r8
   2b8ce:	4621      	mov	r1, r4
   2b8d0:	46b0      	mov	r8, r6
   2b8d2:	f04f 0b10 	mov.w	fp, #16
   2b8d6:	462e      	mov	r6, r5
   2b8d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b8da:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b8dc:	e004      	b.n	2b8e8 <_svfprintf_r+0xb94>
   2b8de:	3208      	adds	r2, #8
   2b8e0:	3f10      	subs	r7, #16
   2b8e2:	2f10      	cmp	r7, #16
   2b8e4:	f340 81db 	ble.w	2bc9e <_svfprintf_r+0xf4a>
   2b8e8:	3301      	adds	r3, #1
   2b8ea:	3110      	adds	r1, #16
   2b8ec:	2b07      	cmp	r3, #7
   2b8ee:	9127      	str	r1, [sp, #156]	; 0x9c
   2b8f0:	9326      	str	r3, [sp, #152]	; 0x98
   2b8f2:	e882 0840 	stmia.w	r2, {r6, fp}
   2b8f6:	ddf2      	ble.n	2b8de <_svfprintf_r+0xb8a>
   2b8f8:	aa25      	add	r2, sp, #148	; 0x94
   2b8fa:	4629      	mov	r1, r5
   2b8fc:	4620      	mov	r0, r4
   2b8fe:	f002 f9fb 	bl	2dcf8 <__ssprint_r>
   2b902:	2800      	cmp	r0, #0
   2b904:	f47f aaf8 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2b908:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2b90a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b90c:	464a      	mov	r2, r9
   2b90e:	e7e7      	b.n	2b8e0 <_svfprintf_r+0xb8c>
   2b910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b912:	930e      	str	r3, [sp, #56]	; 0x38
   2b914:	464e      	mov	r6, r9
   2b916:	f7ff bb2d 	b.w	2af74 <_svfprintf_r+0x220>
   2b91a:	2d00      	cmp	r5, #0
   2b91c:	bf08      	it	eq
   2b91e:	2c0a      	cmpeq	r4, #10
   2b920:	f0c0 808f 	bcc.w	2ba42 <_svfprintf_r+0xcee>
   2b924:	464e      	mov	r6, r9
   2b926:	4620      	mov	r0, r4
   2b928:	4629      	mov	r1, r5
   2b92a:	220a      	movs	r2, #10
   2b92c:	2300      	movs	r3, #0
   2b92e:	f7d5 fbe5 	bl	10fc <__aeabi_uldivmod>
   2b932:	3230      	adds	r2, #48	; 0x30
   2b934:	f806 2d01 	strb.w	r2, [r6, #-1]!
   2b938:	4620      	mov	r0, r4
   2b93a:	4629      	mov	r1, r5
   2b93c:	2300      	movs	r3, #0
   2b93e:	220a      	movs	r2, #10
   2b940:	f7d5 fbdc 	bl	10fc <__aeabi_uldivmod>
   2b944:	4604      	mov	r4, r0
   2b946:	460d      	mov	r5, r1
   2b948:	ea54 0305 	orrs.w	r3, r4, r5
   2b94c:	d1eb      	bne.n	2b926 <_svfprintf_r+0xbd2>
   2b94e:	eba9 0306 	sub.w	r3, r9, r6
   2b952:	930e      	str	r3, [sp, #56]	; 0x38
   2b954:	f7ff bb0e 	b.w	2af74 <_svfprintf_r+0x220>
   2b958:	aa25      	add	r2, sp, #148	; 0x94
   2b95a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b95c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b95e:	f002 f9cb 	bl	2dcf8 <__ssprint_r>
   2b962:	2800      	cmp	r0, #0
   2b964:	f47f aac8 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2b968:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2b96c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b96e:	46c8      	mov	r8, r9
   2b970:	f7ff bb5e 	b.w	2b030 <_svfprintf_r+0x2dc>
   2b974:	1e5e      	subs	r6, r3, #1
   2b976:	2e00      	cmp	r6, #0
   2b978:	f77f af0a 	ble.w	2b790 <_svfprintf_r+0xa3c>
   2b97c:	2e10      	cmp	r6, #16
   2b97e:	4d03      	ldr	r5, [pc, #12]	; (2b98c <_svfprintf_r+0xc38>)
   2b980:	dd22      	ble.n	2b9c8 <_svfprintf_r+0xc74>
   2b982:	4622      	mov	r2, r4
   2b984:	f04f 0b10 	mov.w	fp, #16
   2b988:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b98a:	e006      	b.n	2b99a <_svfprintf_r+0xc46>
   2b98c:	00032a64 	.word	0x00032a64
   2b990:	3e10      	subs	r6, #16
   2b992:	2e10      	cmp	r6, #16
   2b994:	f108 0808 	add.w	r8, r8, #8
   2b998:	dd15      	ble.n	2b9c6 <_svfprintf_r+0xc72>
   2b99a:	3701      	adds	r7, #1
   2b99c:	3210      	adds	r2, #16
   2b99e:	2f07      	cmp	r7, #7
   2b9a0:	9227      	str	r2, [sp, #156]	; 0x9c
   2b9a2:	9726      	str	r7, [sp, #152]	; 0x98
   2b9a4:	e888 0820 	stmia.w	r8, {r5, fp}
   2b9a8:	ddf2      	ble.n	2b990 <_svfprintf_r+0xc3c>
   2b9aa:	aa25      	add	r2, sp, #148	; 0x94
   2b9ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b9ae:	4620      	mov	r0, r4
   2b9b0:	f002 f9a2 	bl	2dcf8 <__ssprint_r>
   2b9b4:	2800      	cmp	r0, #0
   2b9b6:	f47f aa9f 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2b9ba:	3e10      	subs	r6, #16
   2b9bc:	2e10      	cmp	r6, #16
   2b9be:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2b9c0:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2b9c2:	46c8      	mov	r8, r9
   2b9c4:	dce9      	bgt.n	2b99a <_svfprintf_r+0xc46>
   2b9c6:	4614      	mov	r4, r2
   2b9c8:	3701      	adds	r7, #1
   2b9ca:	4434      	add	r4, r6
   2b9cc:	2f07      	cmp	r7, #7
   2b9ce:	9427      	str	r4, [sp, #156]	; 0x9c
   2b9d0:	9726      	str	r7, [sp, #152]	; 0x98
   2b9d2:	e888 0060 	stmia.w	r8, {r5, r6}
   2b9d6:	f77f aed9 	ble.w	2b78c <_svfprintf_r+0xa38>
   2b9da:	aa25      	add	r2, sp, #148	; 0x94
   2b9dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b9de:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b9e0:	f002 f98a 	bl	2dcf8 <__ssprint_r>
   2b9e4:	2800      	cmp	r0, #0
   2b9e6:	f47f aa87 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2b9ea:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b9ec:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2b9ee:	46c8      	mov	r8, r9
   2b9f0:	e6ce      	b.n	2b790 <_svfprintf_r+0xa3c>
   2b9f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b9f4:	6814      	ldr	r4, [r2, #0]
   2b9f6:	4613      	mov	r3, r2
   2b9f8:	3304      	adds	r3, #4
   2b9fa:	17e5      	asrs	r5, r4, #31
   2b9fc:	930f      	str	r3, [sp, #60]	; 0x3c
   2b9fe:	4622      	mov	r2, r4
   2ba00:	462b      	mov	r3, r5
   2ba02:	e4fa      	b.n	2b3fa <_svfprintf_r+0x6a6>
   2ba04:	3204      	adds	r2, #4
   2ba06:	681c      	ldr	r4, [r3, #0]
   2ba08:	920f      	str	r2, [sp, #60]	; 0x3c
   2ba0a:	2301      	movs	r3, #1
   2ba0c:	2500      	movs	r5, #0
   2ba0e:	f7ff ba94 	b.w	2af3a <_svfprintf_r+0x1e6>
   2ba12:	681c      	ldr	r4, [r3, #0]
   2ba14:	3304      	adds	r3, #4
   2ba16:	930f      	str	r3, [sp, #60]	; 0x3c
   2ba18:	2500      	movs	r5, #0
   2ba1a:	e421      	b.n	2b260 <_svfprintf_r+0x50c>
   2ba1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2ba1e:	460a      	mov	r2, r1
   2ba20:	3204      	adds	r2, #4
   2ba22:	680c      	ldr	r4, [r1, #0]
   2ba24:	920f      	str	r2, [sp, #60]	; 0x3c
   2ba26:	2500      	movs	r5, #0
   2ba28:	f7ff ba87 	b.w	2af3a <_svfprintf_r+0x1e6>
   2ba2c:	4614      	mov	r4, r2
   2ba2e:	3301      	adds	r3, #1
   2ba30:	4434      	add	r4, r6
   2ba32:	2b07      	cmp	r3, #7
   2ba34:	9427      	str	r4, [sp, #156]	; 0x9c
   2ba36:	9326      	str	r3, [sp, #152]	; 0x98
   2ba38:	e888 0060 	stmia.w	r8, {r5, r6}
   2ba3c:	f77f ab68 	ble.w	2b110 <_svfprintf_r+0x3bc>
   2ba40:	e6b3      	b.n	2b7aa <_svfprintf_r+0xa56>
   2ba42:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2ba46:	f8cd b01c 	str.w	fp, [sp, #28]
   2ba4a:	ae42      	add	r6, sp, #264	; 0x108
   2ba4c:	3430      	adds	r4, #48	; 0x30
   2ba4e:	2301      	movs	r3, #1
   2ba50:	f806 4d41 	strb.w	r4, [r6, #-65]!
   2ba54:	930e      	str	r3, [sp, #56]	; 0x38
   2ba56:	f7ff ba8d 	b.w	2af74 <_svfprintf_r+0x220>
   2ba5a:	aa25      	add	r2, sp, #148	; 0x94
   2ba5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2ba5e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2ba60:	f002 f94a 	bl	2dcf8 <__ssprint_r>
   2ba64:	2800      	cmp	r0, #0
   2ba66:	f47f aa47 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2ba6a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2ba6c:	46c8      	mov	r8, r9
   2ba6e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2ba70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2ba72:	429a      	cmp	r2, r3
   2ba74:	db44      	blt.n	2bb00 <_svfprintf_r+0xdac>
   2ba76:	9b07      	ldr	r3, [sp, #28]
   2ba78:	07d9      	lsls	r1, r3, #31
   2ba7a:	d441      	bmi.n	2bb00 <_svfprintf_r+0xdac>
   2ba7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2ba7e:	9812      	ldr	r0, [sp, #72]	; 0x48
   2ba80:	1a9a      	subs	r2, r3, r2
   2ba82:	1a1d      	subs	r5, r3, r0
   2ba84:	4295      	cmp	r5, r2
   2ba86:	bfa8      	it	ge
   2ba88:	4615      	movge	r5, r2
   2ba8a:	2d00      	cmp	r5, #0
   2ba8c:	dd0e      	ble.n	2baac <_svfprintf_r+0xd58>
   2ba8e:	9926      	ldr	r1, [sp, #152]	; 0x98
   2ba90:	f8c8 5004 	str.w	r5, [r8, #4]
   2ba94:	3101      	adds	r1, #1
   2ba96:	4406      	add	r6, r0
   2ba98:	442c      	add	r4, r5
   2ba9a:	2907      	cmp	r1, #7
   2ba9c:	f8c8 6000 	str.w	r6, [r8]
   2baa0:	9427      	str	r4, [sp, #156]	; 0x9c
   2baa2:	9126      	str	r1, [sp, #152]	; 0x98
   2baa4:	f300 823b 	bgt.w	2bf1e <_svfprintf_r+0x11ca>
   2baa8:	f108 0808 	add.w	r8, r8, #8
   2baac:	2d00      	cmp	r5, #0
   2baae:	bfac      	ite	ge
   2bab0:	1b56      	subge	r6, r2, r5
   2bab2:	4616      	movlt	r6, r2
   2bab4:	2e00      	cmp	r6, #0
   2bab6:	f77f ab2d 	ble.w	2b114 <_svfprintf_r+0x3c0>
   2baba:	2e10      	cmp	r6, #16
   2babc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2babe:	4db0      	ldr	r5, [pc, #704]	; (2bd80 <_svfprintf_r+0x102c>)
   2bac0:	ddb5      	ble.n	2ba2e <_svfprintf_r+0xcda>
   2bac2:	4622      	mov	r2, r4
   2bac4:	2710      	movs	r7, #16
   2bac6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2baca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2bacc:	e004      	b.n	2bad8 <_svfprintf_r+0xd84>
   2bace:	f108 0808 	add.w	r8, r8, #8
   2bad2:	3e10      	subs	r6, #16
   2bad4:	2e10      	cmp	r6, #16
   2bad6:	dda9      	ble.n	2ba2c <_svfprintf_r+0xcd8>
   2bad8:	3301      	adds	r3, #1
   2bada:	3210      	adds	r2, #16
   2badc:	2b07      	cmp	r3, #7
   2bade:	9227      	str	r2, [sp, #156]	; 0x9c
   2bae0:	9326      	str	r3, [sp, #152]	; 0x98
   2bae2:	e888 00a0 	stmia.w	r8, {r5, r7}
   2bae6:	ddf2      	ble.n	2bace <_svfprintf_r+0xd7a>
   2bae8:	aa25      	add	r2, sp, #148	; 0x94
   2baea:	4621      	mov	r1, r4
   2baec:	4658      	mov	r0, fp
   2baee:	f002 f903 	bl	2dcf8 <__ssprint_r>
   2baf2:	2800      	cmp	r0, #0
   2baf4:	f47f aa00 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2baf8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2bafa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bafc:	46c8      	mov	r8, r9
   2bafe:	e7e8      	b.n	2bad2 <_svfprintf_r+0xd7e>
   2bb00:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bb02:	9819      	ldr	r0, [sp, #100]	; 0x64
   2bb04:	991a      	ldr	r1, [sp, #104]	; 0x68
   2bb06:	f8c8 1000 	str.w	r1, [r8]
   2bb0a:	3301      	adds	r3, #1
   2bb0c:	4404      	add	r4, r0
   2bb0e:	2b07      	cmp	r3, #7
   2bb10:	9427      	str	r4, [sp, #156]	; 0x9c
   2bb12:	f8c8 0004 	str.w	r0, [r8, #4]
   2bb16:	9326      	str	r3, [sp, #152]	; 0x98
   2bb18:	f300 81f5 	bgt.w	2bf06 <_svfprintf_r+0x11b2>
   2bb1c:	f108 0808 	add.w	r8, r8, #8
   2bb20:	e7ac      	b.n	2ba7c <_svfprintf_r+0xd28>
   2bb22:	9b07      	ldr	r3, [sp, #28]
   2bb24:	07da      	lsls	r2, r3, #31
   2bb26:	f53f adfe 	bmi.w	2b726 <_svfprintf_r+0x9d2>
   2bb2a:	3701      	adds	r7, #1
   2bb2c:	3401      	adds	r4, #1
   2bb2e:	2301      	movs	r3, #1
   2bb30:	2f07      	cmp	r7, #7
   2bb32:	9427      	str	r4, [sp, #156]	; 0x9c
   2bb34:	9726      	str	r7, [sp, #152]	; 0x98
   2bb36:	f8c8 6000 	str.w	r6, [r8]
   2bb3a:	f8c8 3004 	str.w	r3, [r8, #4]
   2bb3e:	f77f ae25 	ble.w	2b78c <_svfprintf_r+0xa38>
   2bb42:	e74a      	b.n	2b9da <_svfprintf_r+0xc86>
   2bb44:	aa25      	add	r2, sp, #148	; 0x94
   2bb46:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bb48:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bb4a:	f002 f8d5 	bl	2dcf8 <__ssprint_r>
   2bb4e:	2800      	cmp	r0, #0
   2bb50:	f47f a9d2 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2bb54:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bb56:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2bb58:	46c8      	mov	r8, r9
   2bb5a:	e5f2      	b.n	2b742 <_svfprintf_r+0x9ee>
   2bb5c:	aa25      	add	r2, sp, #148	; 0x94
   2bb5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bb60:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bb62:	f002 f8c9 	bl	2dcf8 <__ssprint_r>
   2bb66:	2800      	cmp	r0, #0
   2bb68:	f47f a9c6 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2bb6c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bb6e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2bb70:	46c8      	mov	r8, r9
   2bb72:	e5f5      	b.n	2b760 <_svfprintf_r+0xa0c>
   2bb74:	464e      	mov	r6, r9
   2bb76:	f7ff b9fd 	b.w	2af74 <_svfprintf_r+0x220>
   2bb7a:	aa25      	add	r2, sp, #148	; 0x94
   2bb7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bb7e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bb80:	f002 f8ba 	bl	2dcf8 <__ssprint_r>
   2bb84:	2800      	cmp	r0, #0
   2bb86:	f47f a9b7 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2bb8a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bb8c:	46c8      	mov	r8, r9
   2bb8e:	f7ff ba72 	b.w	2b076 <_svfprintf_r+0x322>
   2bb92:	9c15      	ldr	r4, [sp, #84]	; 0x54
   2bb94:	4622      	mov	r2, r4
   2bb96:	4620      	mov	r0, r4
   2bb98:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2bb9a:	4623      	mov	r3, r4
   2bb9c:	4621      	mov	r1, r4
   2bb9e:	f7d5 fa6f 	bl	1080 <__aeabi_dcmpun>
   2bba2:	2800      	cmp	r0, #0
   2bba4:	f040 8286 	bne.w	2c0b4 <_svfprintf_r+0x1360>
   2bba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bbaa:	3301      	adds	r3, #1
   2bbac:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2bbae:	f023 0320 	bic.w	r3, r3, #32
   2bbb2:	930e      	str	r3, [sp, #56]	; 0x38
   2bbb4:	f000 81e2 	beq.w	2bf7c <_svfprintf_r+0x1228>
   2bbb8:	2b47      	cmp	r3, #71	; 0x47
   2bbba:	f000 811e 	beq.w	2bdfa <_svfprintf_r+0x10a6>
   2bbbe:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   2bbc2:	9307      	str	r3, [sp, #28]
   2bbc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2bbc6:	1e1f      	subs	r7, r3, #0
   2bbc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2bbca:	9308      	str	r3, [sp, #32]
   2bbcc:	bfbb      	ittet	lt
   2bbce:	463b      	movlt	r3, r7
   2bbd0:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   2bbd4:	2300      	movge	r3, #0
   2bbd6:	232d      	movlt	r3, #45	; 0x2d
   2bbd8:	9310      	str	r3, [sp, #64]	; 0x40
   2bbda:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2bbdc:	2b66      	cmp	r3, #102	; 0x66
   2bbde:	f000 81bb 	beq.w	2bf58 <_svfprintf_r+0x1204>
   2bbe2:	2b46      	cmp	r3, #70	; 0x46
   2bbe4:	f000 80df 	beq.w	2bda6 <_svfprintf_r+0x1052>
   2bbe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2bbea:	9a08      	ldr	r2, [sp, #32]
   2bbec:	2b45      	cmp	r3, #69	; 0x45
   2bbee:	bf0c      	ite	eq
   2bbf0:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   2bbf2:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   2bbf4:	a823      	add	r0, sp, #140	; 0x8c
   2bbf6:	a920      	add	r1, sp, #128	; 0x80
   2bbf8:	bf08      	it	eq
   2bbfa:	1c5d      	addeq	r5, r3, #1
   2bbfc:	9004      	str	r0, [sp, #16]
   2bbfe:	9103      	str	r1, [sp, #12]
   2bc00:	a81f      	add	r0, sp, #124	; 0x7c
   2bc02:	2102      	movs	r1, #2
   2bc04:	463b      	mov	r3, r7
   2bc06:	9002      	str	r0, [sp, #8]
   2bc08:	9501      	str	r5, [sp, #4]
   2bc0a:	9100      	str	r1, [sp, #0]
   2bc0c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bc0e:	f000 fb73 	bl	2c2f8 <_dtoa_r>
   2bc12:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2bc14:	2b67      	cmp	r3, #103	; 0x67
   2bc16:	4606      	mov	r6, r0
   2bc18:	f040 81e0 	bne.w	2bfdc <_svfprintf_r+0x1288>
   2bc1c:	f01b 0f01 	tst.w	fp, #1
   2bc20:	f000 8246 	beq.w	2c0b0 <_svfprintf_r+0x135c>
   2bc24:	1974      	adds	r4, r6, r5
   2bc26:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2bc28:	9808      	ldr	r0, [sp, #32]
   2bc2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2bc2c:	4639      	mov	r1, r7
   2bc2e:	f7d5 f9f5 	bl	101c <__aeabi_dcmpeq>
   2bc32:	2800      	cmp	r0, #0
   2bc34:	f040 8165 	bne.w	2bf02 <_svfprintf_r+0x11ae>
   2bc38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2bc3a:	42a3      	cmp	r3, r4
   2bc3c:	d206      	bcs.n	2bc4c <_svfprintf_r+0xef8>
   2bc3e:	2130      	movs	r1, #48	; 0x30
   2bc40:	1c5a      	adds	r2, r3, #1
   2bc42:	9223      	str	r2, [sp, #140]	; 0x8c
   2bc44:	7019      	strb	r1, [r3, #0]
   2bc46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2bc48:	429c      	cmp	r4, r3
   2bc4a:	d8f9      	bhi.n	2bc40 <_svfprintf_r+0xeec>
   2bc4c:	1b9b      	subs	r3, r3, r6
   2bc4e:	9313      	str	r3, [sp, #76]	; 0x4c
   2bc50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2bc52:	2b47      	cmp	r3, #71	; 0x47
   2bc54:	f000 80e9 	beq.w	2be2a <_svfprintf_r+0x10d6>
   2bc58:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2bc5a:	2b65      	cmp	r3, #101	; 0x65
   2bc5c:	f340 81cd 	ble.w	2bffa <_svfprintf_r+0x12a6>
   2bc60:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2bc62:	2b66      	cmp	r3, #102	; 0x66
   2bc64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2bc66:	9312      	str	r3, [sp, #72]	; 0x48
   2bc68:	f000 819e 	beq.w	2bfa8 <_svfprintf_r+0x1254>
   2bc6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bc6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2bc70:	4619      	mov	r1, r3
   2bc72:	4291      	cmp	r1, r2
   2bc74:	f300 818a 	bgt.w	2bf8c <_svfprintf_r+0x1238>
   2bc78:	f01b 0f01 	tst.w	fp, #1
   2bc7c:	f040 8213 	bne.w	2c0a6 <_svfprintf_r+0x1352>
   2bc80:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2bc84:	9308      	str	r3, [sp, #32]
   2bc86:	2367      	movs	r3, #103	; 0x67
   2bc88:	920e      	str	r2, [sp, #56]	; 0x38
   2bc8a:	9311      	str	r3, [sp, #68]	; 0x44
   2bc8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2bc8e:	2b00      	cmp	r3, #0
   2bc90:	f040 80c4 	bne.w	2be1c <_svfprintf_r+0x10c8>
   2bc94:	930a      	str	r3, [sp, #40]	; 0x28
   2bc96:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2bc9a:	f7ff b973 	b.w	2af84 <_svfprintf_r+0x230>
   2bc9e:	4635      	mov	r5, r6
   2bca0:	460c      	mov	r4, r1
   2bca2:	4646      	mov	r6, r8
   2bca4:	4690      	mov	r8, r2
   2bca6:	3301      	adds	r3, #1
   2bca8:	443c      	add	r4, r7
   2bcaa:	2b07      	cmp	r3, #7
   2bcac:	9427      	str	r4, [sp, #156]	; 0x9c
   2bcae:	9326      	str	r3, [sp, #152]	; 0x98
   2bcb0:	e888 00a0 	stmia.w	r8, {r5, r7}
   2bcb4:	f73f aed1 	bgt.w	2ba5a <_svfprintf_r+0xd06>
   2bcb8:	f108 0808 	add.w	r8, r8, #8
   2bcbc:	e6d7      	b.n	2ba6e <_svfprintf_r+0xd1a>
   2bcbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2bcc0:	6813      	ldr	r3, [r2, #0]
   2bcc2:	3204      	adds	r2, #4
   2bcc4:	920f      	str	r2, [sp, #60]	; 0x3c
   2bcc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2bcc8:	601a      	str	r2, [r3, #0]
   2bcca:	f7ff b86a 	b.w	2ada2 <_svfprintf_r+0x4e>
   2bcce:	aa25      	add	r2, sp, #148	; 0x94
   2bcd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bcd2:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bcd4:	f002 f810 	bl	2dcf8 <__ssprint_r>
   2bcd8:	2800      	cmp	r0, #0
   2bcda:	f47f a90d 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2bcde:	46c8      	mov	r8, r9
   2bce0:	e48d      	b.n	2b5fe <_svfprintf_r+0x8aa>
   2bce2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bce4:	4a27      	ldr	r2, [pc, #156]	; (2bd84 <_svfprintf_r+0x1030>)
   2bce6:	f8c8 2000 	str.w	r2, [r8]
   2bcea:	3301      	adds	r3, #1
   2bcec:	3401      	adds	r4, #1
   2bcee:	2201      	movs	r2, #1
   2bcf0:	2b07      	cmp	r3, #7
   2bcf2:	9427      	str	r4, [sp, #156]	; 0x9c
   2bcf4:	9326      	str	r3, [sp, #152]	; 0x98
   2bcf6:	f8c8 2004 	str.w	r2, [r8, #4]
   2bcfa:	dc72      	bgt.n	2bde2 <_svfprintf_r+0x108e>
   2bcfc:	f108 0808 	add.w	r8, r8, #8
   2bd00:	b929      	cbnz	r1, 2bd0e <_svfprintf_r+0xfba>
   2bd02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bd04:	b91b      	cbnz	r3, 2bd0e <_svfprintf_r+0xfba>
   2bd06:	9b07      	ldr	r3, [sp, #28]
   2bd08:	07d8      	lsls	r0, r3, #31
   2bd0a:	f57f aa03 	bpl.w	2b114 <_svfprintf_r+0x3c0>
   2bd0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bd10:	9819      	ldr	r0, [sp, #100]	; 0x64
   2bd12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2bd14:	f8c8 2000 	str.w	r2, [r8]
   2bd18:	3301      	adds	r3, #1
   2bd1a:	4602      	mov	r2, r0
   2bd1c:	4422      	add	r2, r4
   2bd1e:	2b07      	cmp	r3, #7
   2bd20:	9227      	str	r2, [sp, #156]	; 0x9c
   2bd22:	f8c8 0004 	str.w	r0, [r8, #4]
   2bd26:	9326      	str	r3, [sp, #152]	; 0x98
   2bd28:	f300 818d 	bgt.w	2c046 <_svfprintf_r+0x12f2>
   2bd2c:	f108 0808 	add.w	r8, r8, #8
   2bd30:	2900      	cmp	r1, #0
   2bd32:	f2c0 8165 	blt.w	2c000 <_svfprintf_r+0x12ac>
   2bd36:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2bd38:	f8c8 6000 	str.w	r6, [r8]
   2bd3c:	3301      	adds	r3, #1
   2bd3e:	188c      	adds	r4, r1, r2
   2bd40:	2b07      	cmp	r3, #7
   2bd42:	9427      	str	r4, [sp, #156]	; 0x9c
   2bd44:	9326      	str	r3, [sp, #152]	; 0x98
   2bd46:	f8c8 1004 	str.w	r1, [r8, #4]
   2bd4a:	f77f a9e1 	ble.w	2b110 <_svfprintf_r+0x3bc>
   2bd4e:	e52c      	b.n	2b7aa <_svfprintf_r+0xa56>
   2bd50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2bd52:	9909      	ldr	r1, [sp, #36]	; 0x24
   2bd54:	6813      	ldr	r3, [r2, #0]
   2bd56:	17cd      	asrs	r5, r1, #31
   2bd58:	4608      	mov	r0, r1
   2bd5a:	3204      	adds	r2, #4
   2bd5c:	4629      	mov	r1, r5
   2bd5e:	920f      	str	r2, [sp, #60]	; 0x3c
   2bd60:	e9c3 0100 	strd	r0, r1, [r3]
   2bd64:	f7ff b81d 	b.w	2ada2 <_svfprintf_r+0x4e>
   2bd68:	aa25      	add	r2, sp, #148	; 0x94
   2bd6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bd6c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bd6e:	f001 ffc3 	bl	2dcf8 <__ssprint_r>
   2bd72:	2800      	cmp	r0, #0
   2bd74:	f47f a8c0 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2bd78:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bd7a:	46c8      	mov	r8, r9
   2bd7c:	e458      	b.n	2b630 <_svfprintf_r+0x8dc>
   2bd7e:	bf00      	nop
   2bd80:	00032a64 	.word	0x00032a64
   2bd84:	0003258c 	.word	0x0003258c
   2bd88:	2140      	movs	r1, #64	; 0x40
   2bd8a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bd8c:	f001 f9ec 	bl	2d168 <_malloc_r>
   2bd90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2bd92:	6010      	str	r0, [r2, #0]
   2bd94:	6110      	str	r0, [r2, #16]
   2bd96:	2800      	cmp	r0, #0
   2bd98:	f000 81f2 	beq.w	2c180 <_svfprintf_r+0x142c>
   2bd9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2bd9e:	2340      	movs	r3, #64	; 0x40
   2bda0:	6153      	str	r3, [r2, #20]
   2bda2:	f7fe bfee 	b.w	2ad82 <_svfprintf_r+0x2e>
   2bda6:	a823      	add	r0, sp, #140	; 0x8c
   2bda8:	a920      	add	r1, sp, #128	; 0x80
   2bdaa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2bdac:	9004      	str	r0, [sp, #16]
   2bdae:	9103      	str	r1, [sp, #12]
   2bdb0:	a81f      	add	r0, sp, #124	; 0x7c
   2bdb2:	2103      	movs	r1, #3
   2bdb4:	9002      	str	r0, [sp, #8]
   2bdb6:	9a08      	ldr	r2, [sp, #32]
   2bdb8:	9401      	str	r4, [sp, #4]
   2bdba:	463b      	mov	r3, r7
   2bdbc:	9100      	str	r1, [sp, #0]
   2bdbe:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bdc0:	f000 fa9a 	bl	2c2f8 <_dtoa_r>
   2bdc4:	4625      	mov	r5, r4
   2bdc6:	4606      	mov	r6, r0
   2bdc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2bdca:	2b46      	cmp	r3, #70	; 0x46
   2bdcc:	eb06 0405 	add.w	r4, r6, r5
   2bdd0:	f47f af29 	bne.w	2bc26 <_svfprintf_r+0xed2>
   2bdd4:	7833      	ldrb	r3, [r6, #0]
   2bdd6:	2b30      	cmp	r3, #48	; 0x30
   2bdd8:	f000 8178 	beq.w	2c0cc <_svfprintf_r+0x1378>
   2bddc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   2bdde:	442c      	add	r4, r5
   2bde0:	e721      	b.n	2bc26 <_svfprintf_r+0xed2>
   2bde2:	aa25      	add	r2, sp, #148	; 0x94
   2bde4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bde6:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bde8:	f001 ff86 	bl	2dcf8 <__ssprint_r>
   2bdec:	2800      	cmp	r0, #0
   2bdee:	f47f a883 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2bdf2:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2bdf4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bdf6:	46c8      	mov	r8, r9
   2bdf8:	e782      	b.n	2bd00 <_svfprintf_r+0xfac>
   2bdfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bdfc:	2b00      	cmp	r3, #0
   2bdfe:	bf08      	it	eq
   2be00:	2301      	moveq	r3, #1
   2be02:	930a      	str	r3, [sp, #40]	; 0x28
   2be04:	e6db      	b.n	2bbbe <_svfprintf_r+0xe6a>
   2be06:	4630      	mov	r0, r6
   2be08:	940a      	str	r4, [sp, #40]	; 0x28
   2be0a:	f7d4 fc79 	bl	700 <strlen>
   2be0e:	950f      	str	r5, [sp, #60]	; 0x3c
   2be10:	900e      	str	r0, [sp, #56]	; 0x38
   2be12:	f8cd b01c 	str.w	fp, [sp, #28]
   2be16:	4603      	mov	r3, r0
   2be18:	f7ff b9f9 	b.w	2b20e <_svfprintf_r+0x4ba>
   2be1c:	272d      	movs	r7, #45	; 0x2d
   2be1e:	2300      	movs	r3, #0
   2be20:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2be24:	930a      	str	r3, [sp, #40]	; 0x28
   2be26:	f7ff b8ae 	b.w	2af86 <_svfprintf_r+0x232>
   2be2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2be2c:	9312      	str	r3, [sp, #72]	; 0x48
   2be2e:	461a      	mov	r2, r3
   2be30:	3303      	adds	r3, #3
   2be32:	db04      	blt.n	2be3e <_svfprintf_r+0x10ea>
   2be34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2be36:	4619      	mov	r1, r3
   2be38:	4291      	cmp	r1, r2
   2be3a:	f6bf af17 	bge.w	2bc6c <_svfprintf_r+0xf18>
   2be3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2be40:	3b02      	subs	r3, #2
   2be42:	9311      	str	r3, [sp, #68]	; 0x44
   2be44:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   2be48:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   2be4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2be4e:	3b01      	subs	r3, #1
   2be50:	2b00      	cmp	r3, #0
   2be52:	931f      	str	r3, [sp, #124]	; 0x7c
   2be54:	bfbd      	ittte	lt
   2be56:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   2be58:	f1c3 0301 	rsblt	r3, r3, #1
   2be5c:	222d      	movlt	r2, #45	; 0x2d
   2be5e:	222b      	movge	r2, #43	; 0x2b
   2be60:	2b09      	cmp	r3, #9
   2be62:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   2be66:	f340 8116 	ble.w	2c096 <_svfprintf_r+0x1342>
   2be6a:	f10d 0493 	add.w	r4, sp, #147	; 0x93
   2be6e:	4620      	mov	r0, r4
   2be70:	4dab      	ldr	r5, [pc, #684]	; (2c120 <_svfprintf_r+0x13cc>)
   2be72:	e000      	b.n	2be76 <_svfprintf_r+0x1122>
   2be74:	4610      	mov	r0, r2
   2be76:	fb85 1203 	smull	r1, r2, r5, r3
   2be7a:	17d9      	asrs	r1, r3, #31
   2be7c:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   2be80:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   2be84:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   2be88:	3230      	adds	r2, #48	; 0x30
   2be8a:	2909      	cmp	r1, #9
   2be8c:	f800 2c01 	strb.w	r2, [r0, #-1]
   2be90:	460b      	mov	r3, r1
   2be92:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   2be96:	dced      	bgt.n	2be74 <_svfprintf_r+0x1120>
   2be98:	3330      	adds	r3, #48	; 0x30
   2be9a:	3802      	subs	r0, #2
   2be9c:	b2d9      	uxtb	r1, r3
   2be9e:	4284      	cmp	r4, r0
   2bea0:	f802 1c01 	strb.w	r1, [r2, #-1]
   2bea4:	f240 8165 	bls.w	2c172 <_svfprintf_r+0x141e>
   2bea8:	f10d 0086 	add.w	r0, sp, #134	; 0x86
   2beac:	4613      	mov	r3, r2
   2beae:	e001      	b.n	2beb4 <_svfprintf_r+0x1160>
   2beb0:	f813 1b01 	ldrb.w	r1, [r3], #1
   2beb4:	f800 1b01 	strb.w	r1, [r0], #1
   2beb8:	42a3      	cmp	r3, r4
   2beba:	d1f9      	bne.n	2beb0 <_svfprintf_r+0x115c>
   2bebc:	3301      	adds	r3, #1
   2bebe:	1a9b      	subs	r3, r3, r2
   2bec0:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   2bec4:	4413      	add	r3, r2
   2bec6:	aa21      	add	r2, sp, #132	; 0x84
   2bec8:	1a9b      	subs	r3, r3, r2
   2beca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2becc:	931b      	str	r3, [sp, #108]	; 0x6c
   2bece:	2a01      	cmp	r2, #1
   2bed0:	4413      	add	r3, r2
   2bed2:	930e      	str	r3, [sp, #56]	; 0x38
   2bed4:	f340 8119 	ble.w	2c10a <_svfprintf_r+0x13b6>
   2bed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2beda:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2bedc:	4413      	add	r3, r2
   2bede:	930e      	str	r3, [sp, #56]	; 0x38
   2bee0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2bee4:	9308      	str	r3, [sp, #32]
   2bee6:	2300      	movs	r3, #0
   2bee8:	9312      	str	r3, [sp, #72]	; 0x48
   2beea:	e6cf      	b.n	2bc8c <_svfprintf_r+0xf38>
   2beec:	aa25      	add	r2, sp, #148	; 0x94
   2beee:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bef0:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bef2:	f001 ff01 	bl	2dcf8 <__ssprint_r>
   2bef6:	2800      	cmp	r0, #0
   2bef8:	f47e affe 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2befc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2befe:	46c8      	mov	r8, r9
   2bf00:	e4d7      	b.n	2b8b2 <_svfprintf_r+0xb5e>
   2bf02:	4623      	mov	r3, r4
   2bf04:	e6a2      	b.n	2bc4c <_svfprintf_r+0xef8>
   2bf06:	aa25      	add	r2, sp, #148	; 0x94
   2bf08:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bf0a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bf0c:	f001 fef4 	bl	2dcf8 <__ssprint_r>
   2bf10:	2800      	cmp	r0, #0
   2bf12:	f47e aff1 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2bf16:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2bf18:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bf1a:	46c8      	mov	r8, r9
   2bf1c:	e5ae      	b.n	2ba7c <_svfprintf_r+0xd28>
   2bf1e:	aa25      	add	r2, sp, #148	; 0x94
   2bf20:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bf22:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bf24:	f001 fee8 	bl	2dcf8 <__ssprint_r>
   2bf28:	2800      	cmp	r0, #0
   2bf2a:	f47e afe5 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2bf2e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2bf30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bf32:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bf34:	1a9a      	subs	r2, r3, r2
   2bf36:	46c8      	mov	r8, r9
   2bf38:	e5b8      	b.n	2baac <_svfprintf_r+0xd58>
   2bf3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bf3c:	9612      	str	r6, [sp, #72]	; 0x48
   2bf3e:	2b06      	cmp	r3, #6
   2bf40:	bf28      	it	cs
   2bf42:	2306      	movcs	r3, #6
   2bf44:	960a      	str	r6, [sp, #40]	; 0x28
   2bf46:	4637      	mov	r7, r6
   2bf48:	9308      	str	r3, [sp, #32]
   2bf4a:	950f      	str	r5, [sp, #60]	; 0x3c
   2bf4c:	f8cd b01c 	str.w	fp, [sp, #28]
   2bf50:	930e      	str	r3, [sp, #56]	; 0x38
   2bf52:	4e74      	ldr	r6, [pc, #464]	; (2c124 <_svfprintf_r+0x13d0>)
   2bf54:	f7ff b816 	b.w	2af84 <_svfprintf_r+0x230>
   2bf58:	a823      	add	r0, sp, #140	; 0x8c
   2bf5a:	a920      	add	r1, sp, #128	; 0x80
   2bf5c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2bf5e:	9004      	str	r0, [sp, #16]
   2bf60:	9103      	str	r1, [sp, #12]
   2bf62:	a81f      	add	r0, sp, #124	; 0x7c
   2bf64:	2103      	movs	r1, #3
   2bf66:	9002      	str	r0, [sp, #8]
   2bf68:	9a08      	ldr	r2, [sp, #32]
   2bf6a:	9501      	str	r5, [sp, #4]
   2bf6c:	463b      	mov	r3, r7
   2bf6e:	9100      	str	r1, [sp, #0]
   2bf70:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bf72:	f000 f9c1 	bl	2c2f8 <_dtoa_r>
   2bf76:	4606      	mov	r6, r0
   2bf78:	1944      	adds	r4, r0, r5
   2bf7a:	e72b      	b.n	2bdd4 <_svfprintf_r+0x1080>
   2bf7c:	2306      	movs	r3, #6
   2bf7e:	930a      	str	r3, [sp, #40]	; 0x28
   2bf80:	e61d      	b.n	2bbbe <_svfprintf_r+0xe6a>
   2bf82:	272d      	movs	r7, #45	; 0x2d
   2bf84:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2bf88:	f7ff bacd 	b.w	2b526 <_svfprintf_r+0x7d2>
   2bf8c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2bf8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bf90:	4413      	add	r3, r2
   2bf92:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2bf94:	930e      	str	r3, [sp, #56]	; 0x38
   2bf96:	2a00      	cmp	r2, #0
   2bf98:	f340 80b0 	ble.w	2c0fc <_svfprintf_r+0x13a8>
   2bf9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2bfa0:	9308      	str	r3, [sp, #32]
   2bfa2:	2367      	movs	r3, #103	; 0x67
   2bfa4:	9311      	str	r3, [sp, #68]	; 0x44
   2bfa6:	e671      	b.n	2bc8c <_svfprintf_r+0xf38>
   2bfa8:	2b00      	cmp	r3, #0
   2bfaa:	f340 80c3 	ble.w	2c134 <_svfprintf_r+0x13e0>
   2bfae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2bfb0:	2a00      	cmp	r2, #0
   2bfb2:	f040 8099 	bne.w	2c0e8 <_svfprintf_r+0x1394>
   2bfb6:	f01b 0f01 	tst.w	fp, #1
   2bfba:	f040 8095 	bne.w	2c0e8 <_svfprintf_r+0x1394>
   2bfbe:	9308      	str	r3, [sp, #32]
   2bfc0:	930e      	str	r3, [sp, #56]	; 0x38
   2bfc2:	e663      	b.n	2bc8c <_svfprintf_r+0xf38>
   2bfc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bfc6:	9308      	str	r3, [sp, #32]
   2bfc8:	930e      	str	r3, [sp, #56]	; 0x38
   2bfca:	900a      	str	r0, [sp, #40]	; 0x28
   2bfcc:	950f      	str	r5, [sp, #60]	; 0x3c
   2bfce:	f8cd b01c 	str.w	fp, [sp, #28]
   2bfd2:	9012      	str	r0, [sp, #72]	; 0x48
   2bfd4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2bfd8:	f7fe bfd4 	b.w	2af84 <_svfprintf_r+0x230>
   2bfdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2bfde:	2b47      	cmp	r3, #71	; 0x47
   2bfe0:	f47f ae20 	bne.w	2bc24 <_svfprintf_r+0xed0>
   2bfe4:	f01b 0f01 	tst.w	fp, #1
   2bfe8:	f47f aeee 	bne.w	2bdc8 <_svfprintf_r+0x1074>
   2bfec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2bfee:	1b9b      	subs	r3, r3, r6
   2bff0:	9313      	str	r3, [sp, #76]	; 0x4c
   2bff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2bff4:	2b47      	cmp	r3, #71	; 0x47
   2bff6:	f43f af18 	beq.w	2be2a <_svfprintf_r+0x10d6>
   2bffa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2bffc:	9312      	str	r3, [sp, #72]	; 0x48
   2bffe:	e721      	b.n	2be44 <_svfprintf_r+0x10f0>
   2c000:	424f      	negs	r7, r1
   2c002:	3110      	adds	r1, #16
   2c004:	4d48      	ldr	r5, [pc, #288]	; (2c128 <_svfprintf_r+0x13d4>)
   2c006:	da2f      	bge.n	2c068 <_svfprintf_r+0x1314>
   2c008:	2410      	movs	r4, #16
   2c00a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2c00e:	e004      	b.n	2c01a <_svfprintf_r+0x12c6>
   2c010:	f108 0808 	add.w	r8, r8, #8
   2c014:	3f10      	subs	r7, #16
   2c016:	2f10      	cmp	r7, #16
   2c018:	dd26      	ble.n	2c068 <_svfprintf_r+0x1314>
   2c01a:	3301      	adds	r3, #1
   2c01c:	3210      	adds	r2, #16
   2c01e:	2b07      	cmp	r3, #7
   2c020:	9227      	str	r2, [sp, #156]	; 0x9c
   2c022:	9326      	str	r3, [sp, #152]	; 0x98
   2c024:	f8c8 5000 	str.w	r5, [r8]
   2c028:	f8c8 4004 	str.w	r4, [r8, #4]
   2c02c:	ddf0      	ble.n	2c010 <_svfprintf_r+0x12bc>
   2c02e:	aa25      	add	r2, sp, #148	; 0x94
   2c030:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c032:	4658      	mov	r0, fp
   2c034:	f001 fe60 	bl	2dcf8 <__ssprint_r>
   2c038:	2800      	cmp	r0, #0
   2c03a:	f47e af5d 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2c03e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c040:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c042:	46c8      	mov	r8, r9
   2c044:	e7e6      	b.n	2c014 <_svfprintf_r+0x12c0>
   2c046:	aa25      	add	r2, sp, #148	; 0x94
   2c048:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c04a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c04c:	f001 fe54 	bl	2dcf8 <__ssprint_r>
   2c050:	2800      	cmp	r0, #0
   2c052:	f47e af51 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2c056:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c058:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c05a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c05c:	46c8      	mov	r8, r9
   2c05e:	e667      	b.n	2bd30 <_svfprintf_r+0xfdc>
   2c060:	2000      	movs	r0, #0
   2c062:	900a      	str	r0, [sp, #40]	; 0x28
   2c064:	f7fe bed0 	b.w	2ae08 <_svfprintf_r+0xb4>
   2c068:	3301      	adds	r3, #1
   2c06a:	443a      	add	r2, r7
   2c06c:	2b07      	cmp	r3, #7
   2c06e:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c072:	9227      	str	r2, [sp, #156]	; 0x9c
   2c074:	9326      	str	r3, [sp, #152]	; 0x98
   2c076:	f108 0808 	add.w	r8, r8, #8
   2c07a:	f77f ae5c 	ble.w	2bd36 <_svfprintf_r+0xfe2>
   2c07e:	aa25      	add	r2, sp, #148	; 0x94
   2c080:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c082:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c084:	f001 fe38 	bl	2dcf8 <__ssprint_r>
   2c088:	2800      	cmp	r0, #0
   2c08a:	f47e af35 	bne.w	2aef8 <_svfprintf_r+0x1a4>
   2c08e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c090:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c092:	46c8      	mov	r8, r9
   2c094:	e64f      	b.n	2bd36 <_svfprintf_r+0xfe2>
   2c096:	3330      	adds	r3, #48	; 0x30
   2c098:	2230      	movs	r2, #48	; 0x30
   2c09a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   2c09e:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   2c0a2:	ab22      	add	r3, sp, #136	; 0x88
   2c0a4:	e70f      	b.n	2bec6 <_svfprintf_r+0x1172>
   2c0a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c0a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c0aa:	4413      	add	r3, r2
   2c0ac:	930e      	str	r3, [sp, #56]	; 0x38
   2c0ae:	e775      	b.n	2bf9c <_svfprintf_r+0x1248>
   2c0b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c0b2:	e5cb      	b.n	2bc4c <_svfprintf_r+0xef8>
   2c0b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2c0b6:	4e1d      	ldr	r6, [pc, #116]	; (2c12c <_svfprintf_r+0x13d8>)
   2c0b8:	2b00      	cmp	r3, #0
   2c0ba:	bfb6      	itet	lt
   2c0bc:	272d      	movlt	r7, #45	; 0x2d
   2c0be:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   2c0c2:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
   2c0c6:	4b1a      	ldr	r3, [pc, #104]	; (2c130 <_svfprintf_r+0x13dc>)
   2c0c8:	f7ff ba2f 	b.w	2b52a <_svfprintf_r+0x7d6>
   2c0cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2c0ce:	9808      	ldr	r0, [sp, #32]
   2c0d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2c0d2:	4639      	mov	r1, r7
   2c0d4:	f7d4 ffa2 	bl	101c <__aeabi_dcmpeq>
   2c0d8:	2800      	cmp	r0, #0
   2c0da:	f47f ae7f 	bne.w	2bddc <_svfprintf_r+0x1088>
   2c0de:	f1c5 0501 	rsb	r5, r5, #1
   2c0e2:	951f      	str	r5, [sp, #124]	; 0x7c
   2c0e4:	442c      	add	r4, r5
   2c0e6:	e59e      	b.n	2bc26 <_svfprintf_r+0xed2>
   2c0e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c0ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c0ec:	4413      	add	r3, r2
   2c0ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c0f0:	441a      	add	r2, r3
   2c0f2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2c0f6:	920e      	str	r2, [sp, #56]	; 0x38
   2c0f8:	9308      	str	r3, [sp, #32]
   2c0fa:	e5c7      	b.n	2bc8c <_svfprintf_r+0xf38>
   2c0fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c0fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2c100:	f1c3 0301 	rsb	r3, r3, #1
   2c104:	441a      	add	r2, r3
   2c106:	4613      	mov	r3, r2
   2c108:	e7d0      	b.n	2c0ac <_svfprintf_r+0x1358>
   2c10a:	f01b 0301 	ands.w	r3, fp, #1
   2c10e:	9312      	str	r3, [sp, #72]	; 0x48
   2c110:	f47f aee2 	bne.w	2bed8 <_svfprintf_r+0x1184>
   2c114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c116:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c11a:	9308      	str	r3, [sp, #32]
   2c11c:	e5b6      	b.n	2bc8c <_svfprintf_r+0xf38>
   2c11e:	bf00      	nop
   2c120:	66666667 	.word	0x66666667
   2c124:	00032a4c 	.word	0x00032a4c
   2c128:	00032a64 	.word	0x00032a64
   2c12c:	00032a20 	.word	0x00032a20
   2c130:	00032a1c 	.word	0x00032a1c
   2c134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c136:	b913      	cbnz	r3, 2c13e <_svfprintf_r+0x13ea>
   2c138:	f01b 0f01 	tst.w	fp, #1
   2c13c:	d002      	beq.n	2c144 <_svfprintf_r+0x13f0>
   2c13e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2c140:	3301      	adds	r3, #1
   2c142:	e7d4      	b.n	2c0ee <_svfprintf_r+0x139a>
   2c144:	2301      	movs	r3, #1
   2c146:	e73a      	b.n	2bfbe <_svfprintf_r+0x126a>
   2c148:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2c14a:	f89a 3001 	ldrb.w	r3, [sl, #1]
   2c14e:	6828      	ldr	r0, [r5, #0]
   2c150:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   2c154:	900a      	str	r0, [sp, #40]	; 0x28
   2c156:	4628      	mov	r0, r5
   2c158:	3004      	adds	r0, #4
   2c15a:	46a2      	mov	sl, r4
   2c15c:	900f      	str	r0, [sp, #60]	; 0x3c
   2c15e:	f7fe be51 	b.w	2ae04 <_svfprintf_r+0xb0>
   2c162:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c166:	f7ff b867 	b.w	2b238 <_svfprintf_r+0x4e4>
   2c16a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c16e:	f7ff ba15 	b.w	2b59c <_svfprintf_r+0x848>
   2c172:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   2c176:	e6a6      	b.n	2bec6 <_svfprintf_r+0x1172>
   2c178:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c17c:	f7ff b8eb 	b.w	2b356 <_svfprintf_r+0x602>
   2c180:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2c182:	230c      	movs	r3, #12
   2c184:	6013      	str	r3, [r2, #0]
   2c186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c18a:	9309      	str	r3, [sp, #36]	; 0x24
   2c18c:	f7fe bebd 	b.w	2af0a <_svfprintf_r+0x1b6>
   2c190:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c194:	f7ff b99a 	b.w	2b4cc <_svfprintf_r+0x778>
   2c198:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c19c:	f7ff b976 	b.w	2b48c <_svfprintf_r+0x738>
   2c1a0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c1a4:	f7ff b959 	b.w	2b45a <_svfprintf_r+0x706>
   2c1a8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c1ac:	f7ff b912 	b.w	2b3d4 <_svfprintf_r+0x680>

0002c1b0 <__ascii_wctomb>:
   2c1b0:	b121      	cbz	r1, 2c1bc <__ascii_wctomb+0xc>
   2c1b2:	2aff      	cmp	r2, #255	; 0xff
   2c1b4:	d804      	bhi.n	2c1c0 <__ascii_wctomb+0x10>
   2c1b6:	700a      	strb	r2, [r1, #0]
   2c1b8:	2001      	movs	r0, #1
   2c1ba:	4770      	bx	lr
   2c1bc:	4608      	mov	r0, r1
   2c1be:	4770      	bx	lr
   2c1c0:	238a      	movs	r3, #138	; 0x8a
   2c1c2:	6003      	str	r3, [r0, #0]
   2c1c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c1c8:	4770      	bx	lr
   2c1ca:	bf00      	nop

0002c1cc <quorem>:
   2c1cc:	6902      	ldr	r2, [r0, #16]
   2c1ce:	690b      	ldr	r3, [r1, #16]
   2c1d0:	4293      	cmp	r3, r2
   2c1d2:	f300 808d 	bgt.w	2c2f0 <quorem+0x124>
   2c1d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c1da:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   2c1de:	f101 0714 	add.w	r7, r1, #20
   2c1e2:	f100 0b14 	add.w	fp, r0, #20
   2c1e6:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   2c1ea:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   2c1ee:	ea4f 0488 	mov.w	r4, r8, lsl #2
   2c1f2:	b083      	sub	sp, #12
   2c1f4:	3201      	adds	r2, #1
   2c1f6:	fbb3 f9f2 	udiv	r9, r3, r2
   2c1fa:	eb0b 0304 	add.w	r3, fp, r4
   2c1fe:	9400      	str	r4, [sp, #0]
   2c200:	eb07 0a04 	add.w	sl, r7, r4
   2c204:	9301      	str	r3, [sp, #4]
   2c206:	f1b9 0f00 	cmp.w	r9, #0
   2c20a:	d039      	beq.n	2c280 <quorem+0xb4>
   2c20c:	2500      	movs	r5, #0
   2c20e:	462e      	mov	r6, r5
   2c210:	46bc      	mov	ip, r7
   2c212:	46de      	mov	lr, fp
   2c214:	f85c 4b04 	ldr.w	r4, [ip], #4
   2c218:	f8de 3000 	ldr.w	r3, [lr]
   2c21c:	b2a2      	uxth	r2, r4
   2c21e:	fb09 5502 	mla	r5, r9, r2, r5
   2c222:	0c22      	lsrs	r2, r4, #16
   2c224:	0c2c      	lsrs	r4, r5, #16
   2c226:	fb09 4202 	mla	r2, r9, r2, r4
   2c22a:	b2ad      	uxth	r5, r5
   2c22c:	1b75      	subs	r5, r6, r5
   2c22e:	b296      	uxth	r6, r2
   2c230:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   2c234:	fa15 f383 	uxtah	r3, r5, r3
   2c238:	eb06 4623 	add.w	r6, r6, r3, asr #16
   2c23c:	b29b      	uxth	r3, r3
   2c23e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2c242:	45e2      	cmp	sl, ip
   2c244:	ea4f 4512 	mov.w	r5, r2, lsr #16
   2c248:	f84e 3b04 	str.w	r3, [lr], #4
   2c24c:	ea4f 4626 	mov.w	r6, r6, asr #16
   2c250:	d2e0      	bcs.n	2c214 <quorem+0x48>
   2c252:	9b00      	ldr	r3, [sp, #0]
   2c254:	f85b 3003 	ldr.w	r3, [fp, r3]
   2c258:	b993      	cbnz	r3, 2c280 <quorem+0xb4>
   2c25a:	9c01      	ldr	r4, [sp, #4]
   2c25c:	1f23      	subs	r3, r4, #4
   2c25e:	459b      	cmp	fp, r3
   2c260:	d20c      	bcs.n	2c27c <quorem+0xb0>
   2c262:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2c266:	b94b      	cbnz	r3, 2c27c <quorem+0xb0>
   2c268:	f1a4 0308 	sub.w	r3, r4, #8
   2c26c:	e002      	b.n	2c274 <quorem+0xa8>
   2c26e:	681a      	ldr	r2, [r3, #0]
   2c270:	3b04      	subs	r3, #4
   2c272:	b91a      	cbnz	r2, 2c27c <quorem+0xb0>
   2c274:	459b      	cmp	fp, r3
   2c276:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2c27a:	d3f8      	bcc.n	2c26e <quorem+0xa2>
   2c27c:	f8c0 8010 	str.w	r8, [r0, #16]
   2c280:	4604      	mov	r4, r0
   2c282:	f001 fc2b 	bl	2dadc <__mcmp>
   2c286:	2800      	cmp	r0, #0
   2c288:	db2e      	blt.n	2c2e8 <quorem+0x11c>
   2c28a:	f109 0901 	add.w	r9, r9, #1
   2c28e:	465d      	mov	r5, fp
   2c290:	2300      	movs	r3, #0
   2c292:	f857 1b04 	ldr.w	r1, [r7], #4
   2c296:	6828      	ldr	r0, [r5, #0]
   2c298:	b28a      	uxth	r2, r1
   2c29a:	1a9a      	subs	r2, r3, r2
   2c29c:	0c0b      	lsrs	r3, r1, #16
   2c29e:	fa12 f280 	uxtah	r2, r2, r0
   2c2a2:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   2c2a6:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2c2aa:	b292      	uxth	r2, r2
   2c2ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2c2b0:	45ba      	cmp	sl, r7
   2c2b2:	f845 2b04 	str.w	r2, [r5], #4
   2c2b6:	ea4f 4323 	mov.w	r3, r3, asr #16
   2c2ba:	d2ea      	bcs.n	2c292 <quorem+0xc6>
   2c2bc:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   2c2c0:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   2c2c4:	b982      	cbnz	r2, 2c2e8 <quorem+0x11c>
   2c2c6:	1f1a      	subs	r2, r3, #4
   2c2c8:	4593      	cmp	fp, r2
   2c2ca:	d20b      	bcs.n	2c2e4 <quorem+0x118>
   2c2cc:	f853 2c04 	ldr.w	r2, [r3, #-4]
   2c2d0:	b942      	cbnz	r2, 2c2e4 <quorem+0x118>
   2c2d2:	3b08      	subs	r3, #8
   2c2d4:	e002      	b.n	2c2dc <quorem+0x110>
   2c2d6:	681a      	ldr	r2, [r3, #0]
   2c2d8:	3b04      	subs	r3, #4
   2c2da:	b91a      	cbnz	r2, 2c2e4 <quorem+0x118>
   2c2dc:	459b      	cmp	fp, r3
   2c2de:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2c2e2:	d3f8      	bcc.n	2c2d6 <quorem+0x10a>
   2c2e4:	f8c4 8010 	str.w	r8, [r4, #16]
   2c2e8:	4648      	mov	r0, r9
   2c2ea:	b003      	add	sp, #12
   2c2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c2f0:	2000      	movs	r0, #0
   2c2f2:	4770      	bx	lr
   2c2f4:	0000      	movs	r0, r0
	...

0002c2f8 <_dtoa_r>:
   2c2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c2fc:	6c01      	ldr	r1, [r0, #64]	; 0x40
   2c2fe:	b09b      	sub	sp, #108	; 0x6c
   2c300:	4604      	mov	r4, r0
   2c302:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   2c304:	4692      	mov	sl, r2
   2c306:	469b      	mov	fp, r3
   2c308:	b141      	cbz	r1, 2c31c <_dtoa_r+0x24>
   2c30a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2c30c:	604a      	str	r2, [r1, #4]
   2c30e:	2301      	movs	r3, #1
   2c310:	4093      	lsls	r3, r2
   2c312:	608b      	str	r3, [r1, #8]
   2c314:	f001 fa0a 	bl	2d72c <_Bfree>
   2c318:	2300      	movs	r3, #0
   2c31a:	6423      	str	r3, [r4, #64]	; 0x40
   2c31c:	f1bb 0f00 	cmp.w	fp, #0
   2c320:	465d      	mov	r5, fp
   2c322:	db35      	blt.n	2c390 <_dtoa_r+0x98>
   2c324:	2300      	movs	r3, #0
   2c326:	6033      	str	r3, [r6, #0]
   2c328:	4b9d      	ldr	r3, [pc, #628]	; (2c5a0 <_dtoa_r+0x2a8>)
   2c32a:	43ab      	bics	r3, r5
   2c32c:	d015      	beq.n	2c35a <_dtoa_r+0x62>
   2c32e:	4650      	mov	r0, sl
   2c330:	4659      	mov	r1, fp
   2c332:	2200      	movs	r2, #0
   2c334:	2300      	movs	r3, #0
   2c336:	f7d4 fe71 	bl	101c <__aeabi_dcmpeq>
   2c33a:	4680      	mov	r8, r0
   2c33c:	2800      	cmp	r0, #0
   2c33e:	d02d      	beq.n	2c39c <_dtoa_r+0xa4>
   2c340:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2c342:	2301      	movs	r3, #1
   2c344:	6013      	str	r3, [r2, #0]
   2c346:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2c348:	2b00      	cmp	r3, #0
   2c34a:	f000 80bd 	beq.w	2c4c8 <_dtoa_r+0x1d0>
   2c34e:	4895      	ldr	r0, [pc, #596]	; (2c5a4 <_dtoa_r+0x2ac>)
   2c350:	6018      	str	r0, [r3, #0]
   2c352:	3801      	subs	r0, #1
   2c354:	b01b      	add	sp, #108	; 0x6c
   2c356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c35a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2c35c:	f242 730f 	movw	r3, #9999	; 0x270f
   2c360:	6013      	str	r3, [r2, #0]
   2c362:	f1ba 0f00 	cmp.w	sl, #0
   2c366:	d10d      	bne.n	2c384 <_dtoa_r+0x8c>
   2c368:	f3c5 0513 	ubfx	r5, r5, #0, #20
   2c36c:	b955      	cbnz	r5, 2c384 <_dtoa_r+0x8c>
   2c36e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2c370:	488d      	ldr	r0, [pc, #564]	; (2c5a8 <_dtoa_r+0x2b0>)
   2c372:	2b00      	cmp	r3, #0
   2c374:	d0ee      	beq.n	2c354 <_dtoa_r+0x5c>
   2c376:	f100 0308 	add.w	r3, r0, #8
   2c37a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   2c37c:	6013      	str	r3, [r2, #0]
   2c37e:	b01b      	add	sp, #108	; 0x6c
   2c380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c384:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2c386:	4889      	ldr	r0, [pc, #548]	; (2c5ac <_dtoa_r+0x2b4>)
   2c388:	2b00      	cmp	r3, #0
   2c38a:	d0e3      	beq.n	2c354 <_dtoa_r+0x5c>
   2c38c:	1cc3      	adds	r3, r0, #3
   2c38e:	e7f4      	b.n	2c37a <_dtoa_r+0x82>
   2c390:	2301      	movs	r3, #1
   2c392:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   2c396:	6033      	str	r3, [r6, #0]
   2c398:	46ab      	mov	fp, r5
   2c39a:	e7c5      	b.n	2c328 <_dtoa_r+0x30>
   2c39c:	aa18      	add	r2, sp, #96	; 0x60
   2c39e:	ab19      	add	r3, sp, #100	; 0x64
   2c3a0:	9201      	str	r2, [sp, #4]
   2c3a2:	9300      	str	r3, [sp, #0]
   2c3a4:	4652      	mov	r2, sl
   2c3a6:	465b      	mov	r3, fp
   2c3a8:	4620      	mov	r0, r4
   2c3aa:	f001 fc37 	bl	2dc1c <__d2b>
   2c3ae:	0d2b      	lsrs	r3, r5, #20
   2c3b0:	4681      	mov	r9, r0
   2c3b2:	d071      	beq.n	2c498 <_dtoa_r+0x1a0>
   2c3b4:	f3cb 0213 	ubfx	r2, fp, #0, #20
   2c3b8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   2c3bc:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2c3be:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   2c3c2:	4650      	mov	r0, sl
   2c3c4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   2c3c8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   2c3cc:	2200      	movs	r2, #0
   2c3ce:	4b78      	ldr	r3, [pc, #480]	; (2c5b0 <_dtoa_r+0x2b8>)
   2c3d0:	f7d4 fa08 	bl	7e4 <__aeabi_dsub>
   2c3d4:	a36c      	add	r3, pc, #432	; (adr r3, 2c588 <_dtoa_r+0x290>)
   2c3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   2c3da:	f7d4 fbb7 	bl	b4c <__aeabi_dmul>
   2c3de:	a36c      	add	r3, pc, #432	; (adr r3, 2c590 <_dtoa_r+0x298>)
   2c3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   2c3e4:	f7d4 fa00 	bl	7e8 <__adddf3>
   2c3e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2c3ec:	4630      	mov	r0, r6
   2c3ee:	f7d4 fb47 	bl	a80 <__aeabi_i2d>
   2c3f2:	a369      	add	r3, pc, #420	; (adr r3, 2c598 <_dtoa_r+0x2a0>)
   2c3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   2c3f8:	f7d4 fba8 	bl	b4c <__aeabi_dmul>
   2c3fc:	4602      	mov	r2, r0
   2c3fe:	460b      	mov	r3, r1
   2c400:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2c404:	f7d4 f9f0 	bl	7e8 <__adddf3>
   2c408:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2c40c:	f7d4 fe4e 	bl	10ac <__aeabi_d2iz>
   2c410:	2200      	movs	r2, #0
   2c412:	9002      	str	r0, [sp, #8]
   2c414:	2300      	movs	r3, #0
   2c416:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2c41a:	f7d4 fe09 	bl	1030 <__aeabi_dcmplt>
   2c41e:	2800      	cmp	r0, #0
   2c420:	f040 8173 	bne.w	2c70a <_dtoa_r+0x412>
   2c424:	9d02      	ldr	r5, [sp, #8]
   2c426:	2d16      	cmp	r5, #22
   2c428:	f200 815d 	bhi.w	2c6e6 <_dtoa_r+0x3ee>
   2c42c:	4b61      	ldr	r3, [pc, #388]	; (2c5b4 <_dtoa_r+0x2bc>)
   2c42e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   2c432:	e9d3 0100 	ldrd	r0, r1, [r3]
   2c436:	4652      	mov	r2, sl
   2c438:	465b      	mov	r3, fp
   2c43a:	f7d4 fe17 	bl	106c <__aeabi_dcmpgt>
   2c43e:	2800      	cmp	r0, #0
   2c440:	f000 81c5 	beq.w	2c7ce <_dtoa_r+0x4d6>
   2c444:	1e6b      	subs	r3, r5, #1
   2c446:	9302      	str	r3, [sp, #8]
   2c448:	2300      	movs	r3, #0
   2c44a:	930e      	str	r3, [sp, #56]	; 0x38
   2c44c:	1bbf      	subs	r7, r7, r6
   2c44e:	1e7b      	subs	r3, r7, #1
   2c450:	9306      	str	r3, [sp, #24]
   2c452:	f100 8154 	bmi.w	2c6fe <_dtoa_r+0x406>
   2c456:	2300      	movs	r3, #0
   2c458:	9308      	str	r3, [sp, #32]
   2c45a:	9b02      	ldr	r3, [sp, #8]
   2c45c:	2b00      	cmp	r3, #0
   2c45e:	f2c0 8145 	blt.w	2c6ec <_dtoa_r+0x3f4>
   2c462:	9a06      	ldr	r2, [sp, #24]
   2c464:	930d      	str	r3, [sp, #52]	; 0x34
   2c466:	4611      	mov	r1, r2
   2c468:	4419      	add	r1, r3
   2c46a:	2300      	movs	r3, #0
   2c46c:	9106      	str	r1, [sp, #24]
   2c46e:	930c      	str	r3, [sp, #48]	; 0x30
   2c470:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2c472:	2b09      	cmp	r3, #9
   2c474:	d82a      	bhi.n	2c4cc <_dtoa_r+0x1d4>
   2c476:	2b05      	cmp	r3, #5
   2c478:	f340 865b 	ble.w	2d132 <_dtoa_r+0xe3a>
   2c47c:	3b04      	subs	r3, #4
   2c47e:	9324      	str	r3, [sp, #144]	; 0x90
   2c480:	2500      	movs	r5, #0
   2c482:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2c484:	3b02      	subs	r3, #2
   2c486:	2b03      	cmp	r3, #3
   2c488:	f200 8642 	bhi.w	2d110 <_dtoa_r+0xe18>
   2c48c:	e8df f013 	tbh	[pc, r3, lsl #1]
   2c490:	02c903d4 	.word	0x02c903d4
   2c494:	046103df 	.word	0x046103df
   2c498:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2c49a:	9e19      	ldr	r6, [sp, #100]	; 0x64
   2c49c:	443e      	add	r6, r7
   2c49e:	f206 4332 	addw	r3, r6, #1074	; 0x432
   2c4a2:	2b20      	cmp	r3, #32
   2c4a4:	f340 818e 	ble.w	2c7c4 <_dtoa_r+0x4cc>
   2c4a8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   2c4ac:	f206 4012 	addw	r0, r6, #1042	; 0x412
   2c4b0:	409d      	lsls	r5, r3
   2c4b2:	fa2a f000 	lsr.w	r0, sl, r0
   2c4b6:	4328      	orrs	r0, r5
   2c4b8:	f7d4 fad2 	bl	a60 <__aeabi_ui2d>
   2c4bc:	2301      	movs	r3, #1
   2c4be:	3e01      	subs	r6, #1
   2c4c0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   2c4c4:	9314      	str	r3, [sp, #80]	; 0x50
   2c4c6:	e781      	b.n	2c3cc <_dtoa_r+0xd4>
   2c4c8:	483b      	ldr	r0, [pc, #236]	; (2c5b8 <_dtoa_r+0x2c0>)
   2c4ca:	e743      	b.n	2c354 <_dtoa_r+0x5c>
   2c4cc:	2100      	movs	r1, #0
   2c4ce:	6461      	str	r1, [r4, #68]	; 0x44
   2c4d0:	4620      	mov	r0, r4
   2c4d2:	9125      	str	r1, [sp, #148]	; 0x94
   2c4d4:	f001 f904 	bl	2d6e0 <_Balloc>
   2c4d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c4dc:	930a      	str	r3, [sp, #40]	; 0x28
   2c4de:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2c4e0:	930f      	str	r3, [sp, #60]	; 0x3c
   2c4e2:	2301      	movs	r3, #1
   2c4e4:	9004      	str	r0, [sp, #16]
   2c4e6:	6420      	str	r0, [r4, #64]	; 0x40
   2c4e8:	9224      	str	r2, [sp, #144]	; 0x90
   2c4ea:	930b      	str	r3, [sp, #44]	; 0x2c
   2c4ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2c4ee:	2b00      	cmp	r3, #0
   2c4f0:	f2c0 80d9 	blt.w	2c6a6 <_dtoa_r+0x3ae>
   2c4f4:	9a02      	ldr	r2, [sp, #8]
   2c4f6:	2a0e      	cmp	r2, #14
   2c4f8:	f300 80d5 	bgt.w	2c6a6 <_dtoa_r+0x3ae>
   2c4fc:	4b2d      	ldr	r3, [pc, #180]	; (2c5b4 <_dtoa_r+0x2bc>)
   2c4fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2c502:	e9d3 2300 	ldrd	r2, r3, [r3]
   2c506:	e9cd 2308 	strd	r2, r3, [sp, #32]
   2c50a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2c50c:	2b00      	cmp	r3, #0
   2c50e:	f2c0 83ba 	blt.w	2cc86 <_dtoa_r+0x98e>
   2c512:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   2c516:	4650      	mov	r0, sl
   2c518:	462a      	mov	r2, r5
   2c51a:	4633      	mov	r3, r6
   2c51c:	4659      	mov	r1, fp
   2c51e:	f7d4 fc3f 	bl	da0 <__aeabi_ddiv>
   2c522:	f7d4 fdc3 	bl	10ac <__aeabi_d2iz>
   2c526:	4680      	mov	r8, r0
   2c528:	f7d4 faaa 	bl	a80 <__aeabi_i2d>
   2c52c:	462a      	mov	r2, r5
   2c52e:	4633      	mov	r3, r6
   2c530:	f7d4 fb0c 	bl	b4c <__aeabi_dmul>
   2c534:	460b      	mov	r3, r1
   2c536:	4602      	mov	r2, r0
   2c538:	4659      	mov	r1, fp
   2c53a:	4650      	mov	r0, sl
   2c53c:	f7d4 f952 	bl	7e4 <__aeabi_dsub>
   2c540:	9d04      	ldr	r5, [sp, #16]
   2c542:	f108 0330 	add.w	r3, r8, #48	; 0x30
   2c546:	702b      	strb	r3, [r5, #0]
   2c548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c54a:	2b01      	cmp	r3, #1
   2c54c:	4606      	mov	r6, r0
   2c54e:	460f      	mov	r7, r1
   2c550:	f105 0501 	add.w	r5, r5, #1
   2c554:	d068      	beq.n	2c628 <_dtoa_r+0x330>
   2c556:	2200      	movs	r2, #0
   2c558:	4b18      	ldr	r3, [pc, #96]	; (2c5bc <_dtoa_r+0x2c4>)
   2c55a:	f7d4 faf7 	bl	b4c <__aeabi_dmul>
   2c55e:	2200      	movs	r2, #0
   2c560:	2300      	movs	r3, #0
   2c562:	4606      	mov	r6, r0
   2c564:	460f      	mov	r7, r1
   2c566:	f7d4 fd59 	bl	101c <__aeabi_dcmpeq>
   2c56a:	2800      	cmp	r0, #0
   2c56c:	f040 8088 	bne.w	2c680 <_dtoa_r+0x388>
   2c570:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   2c574:	f04f 0a00 	mov.w	sl, #0
   2c578:	f8df b040 	ldr.w	fp, [pc, #64]	; 2c5bc <_dtoa_r+0x2c4>
   2c57c:	940c      	str	r4, [sp, #48]	; 0x30
   2c57e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2c582:	e028      	b.n	2c5d6 <_dtoa_r+0x2de>
   2c584:	f3af 8000 	nop.w
   2c588:	636f4361 	.word	0x636f4361
   2c58c:	3fd287a7 	.word	0x3fd287a7
   2c590:	8b60c8b3 	.word	0x8b60c8b3
   2c594:	3fc68a28 	.word	0x3fc68a28
   2c598:	509f79fb 	.word	0x509f79fb
   2c59c:	3fd34413 	.word	0x3fd34413
   2c5a0:	7ff00000 	.word	0x7ff00000
   2c5a4:	0003258d 	.word	0x0003258d
   2c5a8:	00032b78 	.word	0x00032b78
   2c5ac:	00032b84 	.word	0x00032b84
   2c5b0:	3ff80000 	.word	0x3ff80000
   2c5b4:	00032bb0 	.word	0x00032bb0
   2c5b8:	0003258c 	.word	0x0003258c
   2c5bc:	40240000 	.word	0x40240000
   2c5c0:	f7d4 fac4 	bl	b4c <__aeabi_dmul>
   2c5c4:	2200      	movs	r2, #0
   2c5c6:	2300      	movs	r3, #0
   2c5c8:	4606      	mov	r6, r0
   2c5ca:	460f      	mov	r7, r1
   2c5cc:	f7d4 fd26 	bl	101c <__aeabi_dcmpeq>
   2c5d0:	2800      	cmp	r0, #0
   2c5d2:	f040 83c1 	bne.w	2cd58 <_dtoa_r+0xa60>
   2c5d6:	4642      	mov	r2, r8
   2c5d8:	464b      	mov	r3, r9
   2c5da:	4630      	mov	r0, r6
   2c5dc:	4639      	mov	r1, r7
   2c5de:	f7d4 fbdf 	bl	da0 <__aeabi_ddiv>
   2c5e2:	f7d4 fd63 	bl	10ac <__aeabi_d2iz>
   2c5e6:	4604      	mov	r4, r0
   2c5e8:	f7d4 fa4a 	bl	a80 <__aeabi_i2d>
   2c5ec:	4642      	mov	r2, r8
   2c5ee:	464b      	mov	r3, r9
   2c5f0:	f7d4 faac 	bl	b4c <__aeabi_dmul>
   2c5f4:	4602      	mov	r2, r0
   2c5f6:	460b      	mov	r3, r1
   2c5f8:	4630      	mov	r0, r6
   2c5fa:	4639      	mov	r1, r7
   2c5fc:	f7d4 f8f2 	bl	7e4 <__aeabi_dsub>
   2c600:	f104 0e30 	add.w	lr, r4, #48	; 0x30
   2c604:	9e04      	ldr	r6, [sp, #16]
   2c606:	f805 eb01 	strb.w	lr, [r5], #1
   2c60a:	eba5 0e06 	sub.w	lr, r5, r6
   2c60e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2c610:	45b6      	cmp	lr, r6
   2c612:	e9cd 0106 	strd	r0, r1, [sp, #24]
   2c616:	4652      	mov	r2, sl
   2c618:	465b      	mov	r3, fp
   2c61a:	d1d1      	bne.n	2c5c0 <_dtoa_r+0x2c8>
   2c61c:	46a0      	mov	r8, r4
   2c61e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2c622:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c624:	4606      	mov	r6, r0
   2c626:	460f      	mov	r7, r1
   2c628:	4632      	mov	r2, r6
   2c62a:	463b      	mov	r3, r7
   2c62c:	4630      	mov	r0, r6
   2c62e:	4639      	mov	r1, r7
   2c630:	f7d4 f8da 	bl	7e8 <__adddf3>
   2c634:	4606      	mov	r6, r0
   2c636:	460f      	mov	r7, r1
   2c638:	4602      	mov	r2, r0
   2c63a:	460b      	mov	r3, r1
   2c63c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2c640:	f7d4 fcf6 	bl	1030 <__aeabi_dcmplt>
   2c644:	b948      	cbnz	r0, 2c65a <_dtoa_r+0x362>
   2c646:	4632      	mov	r2, r6
   2c648:	463b      	mov	r3, r7
   2c64a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2c64e:	f7d4 fce5 	bl	101c <__aeabi_dcmpeq>
   2c652:	b1a8      	cbz	r0, 2c680 <_dtoa_r+0x388>
   2c654:	f018 0f01 	tst.w	r8, #1
   2c658:	d012      	beq.n	2c680 <_dtoa_r+0x388>
   2c65a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2c65e:	9a04      	ldr	r2, [sp, #16]
   2c660:	1e6b      	subs	r3, r5, #1
   2c662:	e004      	b.n	2c66e <_dtoa_r+0x376>
   2c664:	429a      	cmp	r2, r3
   2c666:	f000 8401 	beq.w	2ce6c <_dtoa_r+0xb74>
   2c66a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   2c66e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   2c672:	f103 0501 	add.w	r5, r3, #1
   2c676:	d0f5      	beq.n	2c664 <_dtoa_r+0x36c>
   2c678:	f108 0801 	add.w	r8, r8, #1
   2c67c:	f883 8000 	strb.w	r8, [r3]
   2c680:	4649      	mov	r1, r9
   2c682:	4620      	mov	r0, r4
   2c684:	f001 f852 	bl	2d72c <_Bfree>
   2c688:	2200      	movs	r2, #0
   2c68a:	9b02      	ldr	r3, [sp, #8]
   2c68c:	702a      	strb	r2, [r5, #0]
   2c68e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2c690:	3301      	adds	r3, #1
   2c692:	6013      	str	r3, [r2, #0]
   2c694:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2c696:	2b00      	cmp	r3, #0
   2c698:	f000 839e 	beq.w	2cdd8 <_dtoa_r+0xae0>
   2c69c:	9804      	ldr	r0, [sp, #16]
   2c69e:	601d      	str	r5, [r3, #0]
   2c6a0:	b01b      	add	sp, #108	; 0x6c
   2c6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c6a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2c6a8:	2a00      	cmp	r2, #0
   2c6aa:	d03e      	beq.n	2c72a <_dtoa_r+0x432>
   2c6ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2c6ae:	2a01      	cmp	r2, #1
   2c6b0:	f340 8311 	ble.w	2ccd6 <_dtoa_r+0x9de>
   2c6b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c6b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2c6b8:	1e5f      	subs	r7, r3, #1
   2c6ba:	42ba      	cmp	r2, r7
   2c6bc:	f2c0 838f 	blt.w	2cdde <_dtoa_r+0xae6>
   2c6c0:	1bd7      	subs	r7, r2, r7
   2c6c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c6c4:	2b00      	cmp	r3, #0
   2c6c6:	f2c0 848b 	blt.w	2cfe0 <_dtoa_r+0xce8>
   2c6ca:	9d08      	ldr	r5, [sp, #32]
   2c6cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c6ce:	9a08      	ldr	r2, [sp, #32]
   2c6d0:	441a      	add	r2, r3
   2c6d2:	9208      	str	r2, [sp, #32]
   2c6d4:	9a06      	ldr	r2, [sp, #24]
   2c6d6:	2101      	movs	r1, #1
   2c6d8:	441a      	add	r2, r3
   2c6da:	4620      	mov	r0, r4
   2c6dc:	9206      	str	r2, [sp, #24]
   2c6de:	f001 f8bf 	bl	2d860 <__i2b>
   2c6e2:	4606      	mov	r6, r0
   2c6e4:	e024      	b.n	2c730 <_dtoa_r+0x438>
   2c6e6:	2301      	movs	r3, #1
   2c6e8:	930e      	str	r3, [sp, #56]	; 0x38
   2c6ea:	e6af      	b.n	2c44c <_dtoa_r+0x154>
   2c6ec:	9a08      	ldr	r2, [sp, #32]
   2c6ee:	9b02      	ldr	r3, [sp, #8]
   2c6f0:	1ad2      	subs	r2, r2, r3
   2c6f2:	425b      	negs	r3, r3
   2c6f4:	930c      	str	r3, [sp, #48]	; 0x30
   2c6f6:	2300      	movs	r3, #0
   2c6f8:	9208      	str	r2, [sp, #32]
   2c6fa:	930d      	str	r3, [sp, #52]	; 0x34
   2c6fc:	e6b8      	b.n	2c470 <_dtoa_r+0x178>
   2c6fe:	f1c7 0301 	rsb	r3, r7, #1
   2c702:	9308      	str	r3, [sp, #32]
   2c704:	2300      	movs	r3, #0
   2c706:	9306      	str	r3, [sp, #24]
   2c708:	e6a7      	b.n	2c45a <_dtoa_r+0x162>
   2c70a:	9d02      	ldr	r5, [sp, #8]
   2c70c:	4628      	mov	r0, r5
   2c70e:	f7d4 f9b7 	bl	a80 <__aeabi_i2d>
   2c712:	4602      	mov	r2, r0
   2c714:	460b      	mov	r3, r1
   2c716:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2c71a:	f7d4 fc7f 	bl	101c <__aeabi_dcmpeq>
   2c71e:	2800      	cmp	r0, #0
   2c720:	f47f ae80 	bne.w	2c424 <_dtoa_r+0x12c>
   2c724:	1e6b      	subs	r3, r5, #1
   2c726:	9302      	str	r3, [sp, #8]
   2c728:	e67c      	b.n	2c424 <_dtoa_r+0x12c>
   2c72a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2c72c:	9d08      	ldr	r5, [sp, #32]
   2c72e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2c730:	2d00      	cmp	r5, #0
   2c732:	dd0c      	ble.n	2c74e <_dtoa_r+0x456>
   2c734:	9906      	ldr	r1, [sp, #24]
   2c736:	2900      	cmp	r1, #0
   2c738:	460b      	mov	r3, r1
   2c73a:	dd08      	ble.n	2c74e <_dtoa_r+0x456>
   2c73c:	42a9      	cmp	r1, r5
   2c73e:	9a08      	ldr	r2, [sp, #32]
   2c740:	bfa8      	it	ge
   2c742:	462b      	movge	r3, r5
   2c744:	1ad2      	subs	r2, r2, r3
   2c746:	1aed      	subs	r5, r5, r3
   2c748:	1acb      	subs	r3, r1, r3
   2c74a:	9208      	str	r2, [sp, #32]
   2c74c:	9306      	str	r3, [sp, #24]
   2c74e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2c750:	b1d3      	cbz	r3, 2c788 <_dtoa_r+0x490>
   2c752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2c754:	2b00      	cmp	r3, #0
   2c756:	f000 82b7 	beq.w	2ccc8 <_dtoa_r+0x9d0>
   2c75a:	2f00      	cmp	r7, #0
   2c75c:	dd10      	ble.n	2c780 <_dtoa_r+0x488>
   2c75e:	4631      	mov	r1, r6
   2c760:	463a      	mov	r2, r7
   2c762:	4620      	mov	r0, r4
   2c764:	f001 f918 	bl	2d998 <__pow5mult>
   2c768:	464a      	mov	r2, r9
   2c76a:	4601      	mov	r1, r0
   2c76c:	4606      	mov	r6, r0
   2c76e:	4620      	mov	r0, r4
   2c770:	f001 f880 	bl	2d874 <__multiply>
   2c774:	4649      	mov	r1, r9
   2c776:	4680      	mov	r8, r0
   2c778:	4620      	mov	r0, r4
   2c77a:	f000 ffd7 	bl	2d72c <_Bfree>
   2c77e:	46c1      	mov	r9, r8
   2c780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2c782:	1bda      	subs	r2, r3, r7
   2c784:	f040 82a1 	bne.w	2ccca <_dtoa_r+0x9d2>
   2c788:	2101      	movs	r1, #1
   2c78a:	4620      	mov	r0, r4
   2c78c:	f001 f868 	bl	2d860 <__i2b>
   2c790:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2c792:	2b00      	cmp	r3, #0
   2c794:	4680      	mov	r8, r0
   2c796:	dd1c      	ble.n	2c7d2 <_dtoa_r+0x4da>
   2c798:	4601      	mov	r1, r0
   2c79a:	461a      	mov	r2, r3
   2c79c:	4620      	mov	r0, r4
   2c79e:	f001 f8fb 	bl	2d998 <__pow5mult>
   2c7a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2c7a4:	2b01      	cmp	r3, #1
   2c7a6:	4680      	mov	r8, r0
   2c7a8:	f340 8254 	ble.w	2cc54 <_dtoa_r+0x95c>
   2c7ac:	2300      	movs	r3, #0
   2c7ae:	930c      	str	r3, [sp, #48]	; 0x30
   2c7b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2c7b4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   2c7b8:	6918      	ldr	r0, [r3, #16]
   2c7ba:	f001 f801 	bl	2d7c0 <__hi0bits>
   2c7be:	f1c0 0020 	rsb	r0, r0, #32
   2c7c2:	e010      	b.n	2c7e6 <_dtoa_r+0x4ee>
   2c7c4:	f1c3 0520 	rsb	r5, r3, #32
   2c7c8:	fa0a f005 	lsl.w	r0, sl, r5
   2c7cc:	e674      	b.n	2c4b8 <_dtoa_r+0x1c0>
   2c7ce:	900e      	str	r0, [sp, #56]	; 0x38
   2c7d0:	e63c      	b.n	2c44c <_dtoa_r+0x154>
   2c7d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2c7d4:	2b01      	cmp	r3, #1
   2c7d6:	f340 8287 	ble.w	2cce8 <_dtoa_r+0x9f0>
   2c7da:	2300      	movs	r3, #0
   2c7dc:	930c      	str	r3, [sp, #48]	; 0x30
   2c7de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2c7e0:	2001      	movs	r0, #1
   2c7e2:	2b00      	cmp	r3, #0
   2c7e4:	d1e4      	bne.n	2c7b0 <_dtoa_r+0x4b8>
   2c7e6:	9a06      	ldr	r2, [sp, #24]
   2c7e8:	4410      	add	r0, r2
   2c7ea:	f010 001f 	ands.w	r0, r0, #31
   2c7ee:	f000 80a1 	beq.w	2c934 <_dtoa_r+0x63c>
   2c7f2:	f1c0 0320 	rsb	r3, r0, #32
   2c7f6:	2b04      	cmp	r3, #4
   2c7f8:	f340 849e 	ble.w	2d138 <_dtoa_r+0xe40>
   2c7fc:	9b08      	ldr	r3, [sp, #32]
   2c7fe:	f1c0 001c 	rsb	r0, r0, #28
   2c802:	4403      	add	r3, r0
   2c804:	9308      	str	r3, [sp, #32]
   2c806:	4613      	mov	r3, r2
   2c808:	4403      	add	r3, r0
   2c80a:	4405      	add	r5, r0
   2c80c:	9306      	str	r3, [sp, #24]
   2c80e:	9b08      	ldr	r3, [sp, #32]
   2c810:	2b00      	cmp	r3, #0
   2c812:	dd05      	ble.n	2c820 <_dtoa_r+0x528>
   2c814:	4649      	mov	r1, r9
   2c816:	461a      	mov	r2, r3
   2c818:	4620      	mov	r0, r4
   2c81a:	f001 f90d 	bl	2da38 <__lshift>
   2c81e:	4681      	mov	r9, r0
   2c820:	9b06      	ldr	r3, [sp, #24]
   2c822:	2b00      	cmp	r3, #0
   2c824:	dd05      	ble.n	2c832 <_dtoa_r+0x53a>
   2c826:	4641      	mov	r1, r8
   2c828:	461a      	mov	r2, r3
   2c82a:	4620      	mov	r0, r4
   2c82c:	f001 f904 	bl	2da38 <__lshift>
   2c830:	4680      	mov	r8, r0
   2c832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c834:	2b00      	cmp	r3, #0
   2c836:	f040 8086 	bne.w	2c946 <_dtoa_r+0x64e>
   2c83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c83c:	2b00      	cmp	r3, #0
   2c83e:	f340 8266 	ble.w	2cd0e <_dtoa_r+0xa16>
   2c842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2c844:	2b00      	cmp	r3, #0
   2c846:	f000 8098 	beq.w	2c97a <_dtoa_r+0x682>
   2c84a:	2d00      	cmp	r5, #0
   2c84c:	dd05      	ble.n	2c85a <_dtoa_r+0x562>
   2c84e:	4631      	mov	r1, r6
   2c850:	462a      	mov	r2, r5
   2c852:	4620      	mov	r0, r4
   2c854:	f001 f8f0 	bl	2da38 <__lshift>
   2c858:	4606      	mov	r6, r0
   2c85a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2c85c:	2b00      	cmp	r3, #0
   2c85e:	f040 8337 	bne.w	2ced0 <_dtoa_r+0xbd8>
   2c862:	9606      	str	r6, [sp, #24]
   2c864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c866:	9a04      	ldr	r2, [sp, #16]
   2c868:	f8dd b018 	ldr.w	fp, [sp, #24]
   2c86c:	3b01      	subs	r3, #1
   2c86e:	18d3      	adds	r3, r2, r3
   2c870:	930b      	str	r3, [sp, #44]	; 0x2c
   2c872:	f00a 0301 	and.w	r3, sl, #1
   2c876:	930c      	str	r3, [sp, #48]	; 0x30
   2c878:	4617      	mov	r7, r2
   2c87a:	46c2      	mov	sl, r8
   2c87c:	4651      	mov	r1, sl
   2c87e:	4648      	mov	r0, r9
   2c880:	f7ff fca4 	bl	2c1cc <quorem>
   2c884:	4631      	mov	r1, r6
   2c886:	4605      	mov	r5, r0
   2c888:	4648      	mov	r0, r9
   2c88a:	f001 f927 	bl	2dadc <__mcmp>
   2c88e:	465a      	mov	r2, fp
   2c890:	900a      	str	r0, [sp, #40]	; 0x28
   2c892:	4651      	mov	r1, sl
   2c894:	4620      	mov	r0, r4
   2c896:	f001 f93d 	bl	2db14 <__mdiff>
   2c89a:	68c2      	ldr	r2, [r0, #12]
   2c89c:	4680      	mov	r8, r0
   2c89e:	f105 0330 	add.w	r3, r5, #48	; 0x30
   2c8a2:	2a00      	cmp	r2, #0
   2c8a4:	f040 822b 	bne.w	2ccfe <_dtoa_r+0xa06>
   2c8a8:	4601      	mov	r1, r0
   2c8aa:	4648      	mov	r0, r9
   2c8ac:	9308      	str	r3, [sp, #32]
   2c8ae:	f001 f915 	bl	2dadc <__mcmp>
   2c8b2:	4641      	mov	r1, r8
   2c8b4:	9006      	str	r0, [sp, #24]
   2c8b6:	4620      	mov	r0, r4
   2c8b8:	f000 ff38 	bl	2d72c <_Bfree>
   2c8bc:	9a06      	ldr	r2, [sp, #24]
   2c8be:	9b08      	ldr	r3, [sp, #32]
   2c8c0:	b932      	cbnz	r2, 2c8d0 <_dtoa_r+0x5d8>
   2c8c2:	9924      	ldr	r1, [sp, #144]	; 0x90
   2c8c4:	b921      	cbnz	r1, 2c8d0 <_dtoa_r+0x5d8>
   2c8c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2c8c8:	2a00      	cmp	r2, #0
   2c8ca:	f000 83ef 	beq.w	2d0ac <_dtoa_r+0xdb4>
   2c8ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2c8d0:	990a      	ldr	r1, [sp, #40]	; 0x28
   2c8d2:	2900      	cmp	r1, #0
   2c8d4:	f2c0 829f 	blt.w	2ce16 <_dtoa_r+0xb1e>
   2c8d8:	d105      	bne.n	2c8e6 <_dtoa_r+0x5ee>
   2c8da:	9924      	ldr	r1, [sp, #144]	; 0x90
   2c8dc:	b919      	cbnz	r1, 2c8e6 <_dtoa_r+0x5ee>
   2c8de:	990c      	ldr	r1, [sp, #48]	; 0x30
   2c8e0:	2900      	cmp	r1, #0
   2c8e2:	f000 8298 	beq.w	2ce16 <_dtoa_r+0xb1e>
   2c8e6:	2a00      	cmp	r2, #0
   2c8e8:	f300 8306 	bgt.w	2cef8 <_dtoa_r+0xc00>
   2c8ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2c8ee:	703b      	strb	r3, [r7, #0]
   2c8f0:	f107 0801 	add.w	r8, r7, #1
   2c8f4:	4297      	cmp	r7, r2
   2c8f6:	4645      	mov	r5, r8
   2c8f8:	f000 830c 	beq.w	2cf14 <_dtoa_r+0xc1c>
   2c8fc:	4649      	mov	r1, r9
   2c8fe:	2300      	movs	r3, #0
   2c900:	220a      	movs	r2, #10
   2c902:	4620      	mov	r0, r4
   2c904:	f000 ff1c 	bl	2d740 <__multadd>
   2c908:	455e      	cmp	r6, fp
   2c90a:	4681      	mov	r9, r0
   2c90c:	4631      	mov	r1, r6
   2c90e:	f04f 0300 	mov.w	r3, #0
   2c912:	f04f 020a 	mov.w	r2, #10
   2c916:	4620      	mov	r0, r4
   2c918:	f000 81eb 	beq.w	2ccf2 <_dtoa_r+0x9fa>
   2c91c:	f000 ff10 	bl	2d740 <__multadd>
   2c920:	4659      	mov	r1, fp
   2c922:	4606      	mov	r6, r0
   2c924:	2300      	movs	r3, #0
   2c926:	220a      	movs	r2, #10
   2c928:	4620      	mov	r0, r4
   2c92a:	f000 ff09 	bl	2d740 <__multadd>
   2c92e:	4647      	mov	r7, r8
   2c930:	4683      	mov	fp, r0
   2c932:	e7a3      	b.n	2c87c <_dtoa_r+0x584>
   2c934:	201c      	movs	r0, #28
   2c936:	9b08      	ldr	r3, [sp, #32]
   2c938:	4403      	add	r3, r0
   2c93a:	9308      	str	r3, [sp, #32]
   2c93c:	9b06      	ldr	r3, [sp, #24]
   2c93e:	4403      	add	r3, r0
   2c940:	4405      	add	r5, r0
   2c942:	9306      	str	r3, [sp, #24]
   2c944:	e763      	b.n	2c80e <_dtoa_r+0x516>
   2c946:	4641      	mov	r1, r8
   2c948:	4648      	mov	r0, r9
   2c94a:	f001 f8c7 	bl	2dadc <__mcmp>
   2c94e:	2800      	cmp	r0, #0
   2c950:	f6bf af73 	bge.w	2c83a <_dtoa_r+0x542>
   2c954:	9f02      	ldr	r7, [sp, #8]
   2c956:	4649      	mov	r1, r9
   2c958:	2300      	movs	r3, #0
   2c95a:	220a      	movs	r2, #10
   2c95c:	4620      	mov	r0, r4
   2c95e:	3f01      	subs	r7, #1
   2c960:	9702      	str	r7, [sp, #8]
   2c962:	f000 feed 	bl	2d740 <__multadd>
   2c966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2c968:	4681      	mov	r9, r0
   2c96a:	2b00      	cmp	r3, #0
   2c96c:	f040 83b6 	bne.w	2d0dc <_dtoa_r+0xde4>
   2c970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2c972:	2b00      	cmp	r3, #0
   2c974:	f340 83bf 	ble.w	2d0f6 <_dtoa_r+0xdfe>
   2c978:	930a      	str	r3, [sp, #40]	; 0x28
   2c97a:	f8dd b010 	ldr.w	fp, [sp, #16]
   2c97e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2c980:	465d      	mov	r5, fp
   2c982:	e002      	b.n	2c98a <_dtoa_r+0x692>
   2c984:	f000 fedc 	bl	2d740 <__multadd>
   2c988:	4681      	mov	r9, r0
   2c98a:	4641      	mov	r1, r8
   2c98c:	4648      	mov	r0, r9
   2c98e:	f7ff fc1d 	bl	2c1cc <quorem>
   2c992:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   2c996:	f805 ab01 	strb.w	sl, [r5], #1
   2c99a:	eba5 030b 	sub.w	r3, r5, fp
   2c99e:	42bb      	cmp	r3, r7
   2c9a0:	f04f 020a 	mov.w	r2, #10
   2c9a4:	f04f 0300 	mov.w	r3, #0
   2c9a8:	4649      	mov	r1, r9
   2c9aa:	4620      	mov	r0, r4
   2c9ac:	dbea      	blt.n	2c984 <_dtoa_r+0x68c>
   2c9ae:	9b04      	ldr	r3, [sp, #16]
   2c9b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c9b2:	2a01      	cmp	r2, #1
   2c9b4:	bfac      	ite	ge
   2c9b6:	189b      	addge	r3, r3, r2
   2c9b8:	3301      	addlt	r3, #1
   2c9ba:	461d      	mov	r5, r3
   2c9bc:	f04f 0b00 	mov.w	fp, #0
   2c9c0:	4649      	mov	r1, r9
   2c9c2:	2201      	movs	r2, #1
   2c9c4:	4620      	mov	r0, r4
   2c9c6:	f001 f837 	bl	2da38 <__lshift>
   2c9ca:	4641      	mov	r1, r8
   2c9cc:	4681      	mov	r9, r0
   2c9ce:	f001 f885 	bl	2dadc <__mcmp>
   2c9d2:	2800      	cmp	r0, #0
   2c9d4:	f340 823d 	ble.w	2ce52 <_dtoa_r+0xb5a>
   2c9d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   2c9dc:	9904      	ldr	r1, [sp, #16]
   2c9de:	1e6b      	subs	r3, r5, #1
   2c9e0:	e004      	b.n	2c9ec <_dtoa_r+0x6f4>
   2c9e2:	428b      	cmp	r3, r1
   2c9e4:	f000 81ae 	beq.w	2cd44 <_dtoa_r+0xa4c>
   2c9e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2c9ec:	2a39      	cmp	r2, #57	; 0x39
   2c9ee:	f103 0501 	add.w	r5, r3, #1
   2c9f2:	d0f6      	beq.n	2c9e2 <_dtoa_r+0x6ea>
   2c9f4:	3201      	adds	r2, #1
   2c9f6:	701a      	strb	r2, [r3, #0]
   2c9f8:	4641      	mov	r1, r8
   2c9fa:	4620      	mov	r0, r4
   2c9fc:	f000 fe96 	bl	2d72c <_Bfree>
   2ca00:	2e00      	cmp	r6, #0
   2ca02:	f43f ae3d 	beq.w	2c680 <_dtoa_r+0x388>
   2ca06:	f1bb 0f00 	cmp.w	fp, #0
   2ca0a:	d005      	beq.n	2ca18 <_dtoa_r+0x720>
   2ca0c:	45b3      	cmp	fp, r6
   2ca0e:	d003      	beq.n	2ca18 <_dtoa_r+0x720>
   2ca10:	4659      	mov	r1, fp
   2ca12:	4620      	mov	r0, r4
   2ca14:	f000 fe8a 	bl	2d72c <_Bfree>
   2ca18:	4631      	mov	r1, r6
   2ca1a:	4620      	mov	r0, r4
   2ca1c:	f000 fe86 	bl	2d72c <_Bfree>
   2ca20:	e62e      	b.n	2c680 <_dtoa_r+0x388>
   2ca22:	2300      	movs	r3, #0
   2ca24:	930b      	str	r3, [sp, #44]	; 0x2c
   2ca26:	9b02      	ldr	r3, [sp, #8]
   2ca28:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2ca2a:	4413      	add	r3, r2
   2ca2c:	930f      	str	r3, [sp, #60]	; 0x3c
   2ca2e:	3301      	adds	r3, #1
   2ca30:	2b01      	cmp	r3, #1
   2ca32:	461f      	mov	r7, r3
   2ca34:	461e      	mov	r6, r3
   2ca36:	930a      	str	r3, [sp, #40]	; 0x28
   2ca38:	bfb8      	it	lt
   2ca3a:	2701      	movlt	r7, #1
   2ca3c:	2100      	movs	r1, #0
   2ca3e:	2f17      	cmp	r7, #23
   2ca40:	6461      	str	r1, [r4, #68]	; 0x44
   2ca42:	d90a      	bls.n	2ca5a <_dtoa_r+0x762>
   2ca44:	2201      	movs	r2, #1
   2ca46:	2304      	movs	r3, #4
   2ca48:	005b      	lsls	r3, r3, #1
   2ca4a:	f103 0014 	add.w	r0, r3, #20
   2ca4e:	4287      	cmp	r7, r0
   2ca50:	4611      	mov	r1, r2
   2ca52:	f102 0201 	add.w	r2, r2, #1
   2ca56:	d2f7      	bcs.n	2ca48 <_dtoa_r+0x750>
   2ca58:	6461      	str	r1, [r4, #68]	; 0x44
   2ca5a:	4620      	mov	r0, r4
   2ca5c:	f000 fe40 	bl	2d6e0 <_Balloc>
   2ca60:	2e0e      	cmp	r6, #14
   2ca62:	9004      	str	r0, [sp, #16]
   2ca64:	6420      	str	r0, [r4, #64]	; 0x40
   2ca66:	f63f ad41 	bhi.w	2c4ec <_dtoa_r+0x1f4>
   2ca6a:	2d00      	cmp	r5, #0
   2ca6c:	f43f ad3e 	beq.w	2c4ec <_dtoa_r+0x1f4>
   2ca70:	9902      	ldr	r1, [sp, #8]
   2ca72:	2900      	cmp	r1, #0
   2ca74:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   2ca78:	f340 8202 	ble.w	2ce80 <_dtoa_r+0xb88>
   2ca7c:	4bb8      	ldr	r3, [pc, #736]	; (2cd60 <_dtoa_r+0xa68>)
   2ca7e:	f001 020f 	and.w	r2, r1, #15
   2ca82:	110d      	asrs	r5, r1, #4
   2ca84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2ca88:	06e9      	lsls	r1, r5, #27
   2ca8a:	e9d3 6700 	ldrd	r6, r7, [r3]
   2ca8e:	f140 81ae 	bpl.w	2cdee <_dtoa_r+0xaf6>
   2ca92:	4bb4      	ldr	r3, [pc, #720]	; (2cd64 <_dtoa_r+0xa6c>)
   2ca94:	4650      	mov	r0, sl
   2ca96:	4659      	mov	r1, fp
   2ca98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   2ca9c:	f7d4 f980 	bl	da0 <__aeabi_ddiv>
   2caa0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   2caa4:	f005 050f 	and.w	r5, r5, #15
   2caa8:	f04f 0a03 	mov.w	sl, #3
   2caac:	b18d      	cbz	r5, 2cad2 <_dtoa_r+0x7da>
   2caae:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 2cd64 <_dtoa_r+0xa6c>
   2cab2:	07ea      	lsls	r2, r5, #31
   2cab4:	d509      	bpl.n	2caca <_dtoa_r+0x7d2>
   2cab6:	4630      	mov	r0, r6
   2cab8:	4639      	mov	r1, r7
   2caba:	e9d8 2300 	ldrd	r2, r3, [r8]
   2cabe:	f7d4 f845 	bl	b4c <__aeabi_dmul>
   2cac2:	f10a 0a01 	add.w	sl, sl, #1
   2cac6:	4606      	mov	r6, r0
   2cac8:	460f      	mov	r7, r1
   2caca:	106d      	asrs	r5, r5, #1
   2cacc:	f108 0808 	add.w	r8, r8, #8
   2cad0:	d1ef      	bne.n	2cab2 <_dtoa_r+0x7ba>
   2cad2:	463b      	mov	r3, r7
   2cad4:	4632      	mov	r2, r6
   2cad6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   2cada:	f7d4 f961 	bl	da0 <__aeabi_ddiv>
   2cade:	4607      	mov	r7, r0
   2cae0:	4688      	mov	r8, r1
   2cae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2cae4:	b143      	cbz	r3, 2caf8 <_dtoa_r+0x800>
   2cae6:	2200      	movs	r2, #0
   2cae8:	4b9f      	ldr	r3, [pc, #636]	; (2cd68 <_dtoa_r+0xa70>)
   2caea:	4638      	mov	r0, r7
   2caec:	4641      	mov	r1, r8
   2caee:	f7d4 fa9f 	bl	1030 <__aeabi_dcmplt>
   2caf2:	2800      	cmp	r0, #0
   2caf4:	f040 8286 	bne.w	2d004 <_dtoa_r+0xd0c>
   2caf8:	4650      	mov	r0, sl
   2cafa:	f7d3 ffc1 	bl	a80 <__aeabi_i2d>
   2cafe:	463a      	mov	r2, r7
   2cb00:	4643      	mov	r3, r8
   2cb02:	f7d4 f823 	bl	b4c <__aeabi_dmul>
   2cb06:	4b99      	ldr	r3, [pc, #612]	; (2cd6c <_dtoa_r+0xa74>)
   2cb08:	2200      	movs	r2, #0
   2cb0a:	f7d3 fe6d 	bl	7e8 <__adddf3>
   2cb0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cb10:	4605      	mov	r5, r0
   2cb12:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2cb16:	2b00      	cmp	r3, #0
   2cb18:	f000 813e 	beq.w	2cd98 <_dtoa_r+0xaa0>
   2cb1c:	9b02      	ldr	r3, [sp, #8]
   2cb1e:	9315      	str	r3, [sp, #84]	; 0x54
   2cb20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cb22:	9312      	str	r3, [sp, #72]	; 0x48
   2cb24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2cb26:	2b00      	cmp	r3, #0
   2cb28:	f000 81fa 	beq.w	2cf20 <_dtoa_r+0xc28>
   2cb2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2cb2e:	4b8c      	ldr	r3, [pc, #560]	; (2cd60 <_dtoa_r+0xa68>)
   2cb30:	498f      	ldr	r1, [pc, #572]	; (2cd70 <_dtoa_r+0xa78>)
   2cb32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2cb36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   2cb3a:	2000      	movs	r0, #0
   2cb3c:	f7d4 f930 	bl	da0 <__aeabi_ddiv>
   2cb40:	462a      	mov	r2, r5
   2cb42:	4633      	mov	r3, r6
   2cb44:	f7d3 fe4e 	bl	7e4 <__aeabi_dsub>
   2cb48:	4682      	mov	sl, r0
   2cb4a:	468b      	mov	fp, r1
   2cb4c:	4638      	mov	r0, r7
   2cb4e:	4641      	mov	r1, r8
   2cb50:	f7d4 faac 	bl	10ac <__aeabi_d2iz>
   2cb54:	4605      	mov	r5, r0
   2cb56:	f7d3 ff93 	bl	a80 <__aeabi_i2d>
   2cb5a:	4602      	mov	r2, r0
   2cb5c:	460b      	mov	r3, r1
   2cb5e:	4638      	mov	r0, r7
   2cb60:	4641      	mov	r1, r8
   2cb62:	f7d3 fe3f 	bl	7e4 <__aeabi_dsub>
   2cb66:	3530      	adds	r5, #48	; 0x30
   2cb68:	fa5f f885 	uxtb.w	r8, r5
   2cb6c:	9d04      	ldr	r5, [sp, #16]
   2cb6e:	4606      	mov	r6, r0
   2cb70:	460f      	mov	r7, r1
   2cb72:	f885 8000 	strb.w	r8, [r5]
   2cb76:	4602      	mov	r2, r0
   2cb78:	460b      	mov	r3, r1
   2cb7a:	4650      	mov	r0, sl
   2cb7c:	4659      	mov	r1, fp
   2cb7e:	3501      	adds	r5, #1
   2cb80:	f7d4 fa74 	bl	106c <__aeabi_dcmpgt>
   2cb84:	2800      	cmp	r0, #0
   2cb86:	d154      	bne.n	2cc32 <_dtoa_r+0x93a>
   2cb88:	4632      	mov	r2, r6
   2cb8a:	463b      	mov	r3, r7
   2cb8c:	2000      	movs	r0, #0
   2cb8e:	4976      	ldr	r1, [pc, #472]	; (2cd68 <_dtoa_r+0xa70>)
   2cb90:	f7d3 fe28 	bl	7e4 <__aeabi_dsub>
   2cb94:	4602      	mov	r2, r0
   2cb96:	460b      	mov	r3, r1
   2cb98:	4650      	mov	r0, sl
   2cb9a:	4659      	mov	r1, fp
   2cb9c:	f7d4 fa66 	bl	106c <__aeabi_dcmpgt>
   2cba0:	2800      	cmp	r0, #0
   2cba2:	f040 8270 	bne.w	2d086 <_dtoa_r+0xd8e>
   2cba6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2cba8:	2a01      	cmp	r2, #1
   2cbaa:	f000 8111 	beq.w	2cdd0 <_dtoa_r+0xad8>
   2cbae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2cbb0:	9a04      	ldr	r2, [sp, #16]
   2cbb2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2cbb6:	4413      	add	r3, r2
   2cbb8:	4699      	mov	r9, r3
   2cbba:	e00d      	b.n	2cbd8 <_dtoa_r+0x8e0>
   2cbbc:	2000      	movs	r0, #0
   2cbbe:	496a      	ldr	r1, [pc, #424]	; (2cd68 <_dtoa_r+0xa70>)
   2cbc0:	f7d3 fe10 	bl	7e4 <__aeabi_dsub>
   2cbc4:	4652      	mov	r2, sl
   2cbc6:	465b      	mov	r3, fp
   2cbc8:	f7d4 fa32 	bl	1030 <__aeabi_dcmplt>
   2cbcc:	2800      	cmp	r0, #0
   2cbce:	f040 8258 	bne.w	2d082 <_dtoa_r+0xd8a>
   2cbd2:	454d      	cmp	r5, r9
   2cbd4:	f000 80fa 	beq.w	2cdcc <_dtoa_r+0xad4>
   2cbd8:	4650      	mov	r0, sl
   2cbda:	4659      	mov	r1, fp
   2cbdc:	2200      	movs	r2, #0
   2cbde:	4b65      	ldr	r3, [pc, #404]	; (2cd74 <_dtoa_r+0xa7c>)
   2cbe0:	f7d3 ffb4 	bl	b4c <__aeabi_dmul>
   2cbe4:	2200      	movs	r2, #0
   2cbe6:	4b63      	ldr	r3, [pc, #396]	; (2cd74 <_dtoa_r+0xa7c>)
   2cbe8:	4682      	mov	sl, r0
   2cbea:	468b      	mov	fp, r1
   2cbec:	4630      	mov	r0, r6
   2cbee:	4639      	mov	r1, r7
   2cbf0:	f7d3 ffac 	bl	b4c <__aeabi_dmul>
   2cbf4:	460f      	mov	r7, r1
   2cbf6:	4606      	mov	r6, r0
   2cbf8:	f7d4 fa58 	bl	10ac <__aeabi_d2iz>
   2cbfc:	4680      	mov	r8, r0
   2cbfe:	f7d3 ff3f 	bl	a80 <__aeabi_i2d>
   2cc02:	4602      	mov	r2, r0
   2cc04:	460b      	mov	r3, r1
   2cc06:	4630      	mov	r0, r6
   2cc08:	4639      	mov	r1, r7
   2cc0a:	f7d3 fdeb 	bl	7e4 <__aeabi_dsub>
   2cc0e:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2cc12:	fa5f f888 	uxtb.w	r8, r8
   2cc16:	4652      	mov	r2, sl
   2cc18:	465b      	mov	r3, fp
   2cc1a:	f805 8b01 	strb.w	r8, [r5], #1
   2cc1e:	4606      	mov	r6, r0
   2cc20:	460f      	mov	r7, r1
   2cc22:	f7d4 fa05 	bl	1030 <__aeabi_dcmplt>
   2cc26:	4632      	mov	r2, r6
   2cc28:	463b      	mov	r3, r7
   2cc2a:	2800      	cmp	r0, #0
   2cc2c:	d0c6      	beq.n	2cbbc <_dtoa_r+0x8c4>
   2cc2e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2cc32:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2cc34:	9302      	str	r3, [sp, #8]
   2cc36:	e523      	b.n	2c680 <_dtoa_r+0x388>
   2cc38:	2300      	movs	r3, #0
   2cc3a:	930b      	str	r3, [sp, #44]	; 0x2c
   2cc3c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2cc3e:	2b00      	cmp	r3, #0
   2cc40:	f340 80dc 	ble.w	2cdfc <_dtoa_r+0xb04>
   2cc44:	461f      	mov	r7, r3
   2cc46:	461e      	mov	r6, r3
   2cc48:	930f      	str	r3, [sp, #60]	; 0x3c
   2cc4a:	930a      	str	r3, [sp, #40]	; 0x28
   2cc4c:	e6f6      	b.n	2ca3c <_dtoa_r+0x744>
   2cc4e:	2301      	movs	r3, #1
   2cc50:	930b      	str	r3, [sp, #44]	; 0x2c
   2cc52:	e7f3      	b.n	2cc3c <_dtoa_r+0x944>
   2cc54:	f1ba 0f00 	cmp.w	sl, #0
   2cc58:	f47f ada8 	bne.w	2c7ac <_dtoa_r+0x4b4>
   2cc5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   2cc60:	2b00      	cmp	r3, #0
   2cc62:	f47f adba 	bne.w	2c7da <_dtoa_r+0x4e2>
   2cc66:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   2cc6a:	0d3f      	lsrs	r7, r7, #20
   2cc6c:	053f      	lsls	r7, r7, #20
   2cc6e:	2f00      	cmp	r7, #0
   2cc70:	f000 820d 	beq.w	2d08e <_dtoa_r+0xd96>
   2cc74:	9b08      	ldr	r3, [sp, #32]
   2cc76:	3301      	adds	r3, #1
   2cc78:	9308      	str	r3, [sp, #32]
   2cc7a:	9b06      	ldr	r3, [sp, #24]
   2cc7c:	3301      	adds	r3, #1
   2cc7e:	9306      	str	r3, [sp, #24]
   2cc80:	2301      	movs	r3, #1
   2cc82:	930c      	str	r3, [sp, #48]	; 0x30
   2cc84:	e5ab      	b.n	2c7de <_dtoa_r+0x4e6>
   2cc86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cc88:	2b00      	cmp	r3, #0
   2cc8a:	f73f ac42 	bgt.w	2c512 <_dtoa_r+0x21a>
   2cc8e:	f040 8221 	bne.w	2d0d4 <_dtoa_r+0xddc>
   2cc92:	2200      	movs	r2, #0
   2cc94:	4b38      	ldr	r3, [pc, #224]	; (2cd78 <_dtoa_r+0xa80>)
   2cc96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2cc9a:	f7d3 ff57 	bl	b4c <__aeabi_dmul>
   2cc9e:	4652      	mov	r2, sl
   2cca0:	465b      	mov	r3, fp
   2cca2:	f7d4 f9d9 	bl	1058 <__aeabi_dcmpge>
   2cca6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   2ccaa:	4646      	mov	r6, r8
   2ccac:	2800      	cmp	r0, #0
   2ccae:	d041      	beq.n	2cd34 <_dtoa_r+0xa3c>
   2ccb0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2ccb2:	9d04      	ldr	r5, [sp, #16]
   2ccb4:	43db      	mvns	r3, r3
   2ccb6:	9302      	str	r3, [sp, #8]
   2ccb8:	4641      	mov	r1, r8
   2ccba:	4620      	mov	r0, r4
   2ccbc:	f000 fd36 	bl	2d72c <_Bfree>
   2ccc0:	2e00      	cmp	r6, #0
   2ccc2:	f43f acdd 	beq.w	2c680 <_dtoa_r+0x388>
   2ccc6:	e6a7      	b.n	2ca18 <_dtoa_r+0x720>
   2ccc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2ccca:	4649      	mov	r1, r9
   2cccc:	4620      	mov	r0, r4
   2ccce:	f000 fe63 	bl	2d998 <__pow5mult>
   2ccd2:	4681      	mov	r9, r0
   2ccd4:	e558      	b.n	2c788 <_dtoa_r+0x490>
   2ccd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2ccd8:	2a00      	cmp	r2, #0
   2ccda:	f000 8187 	beq.w	2cfec <_dtoa_r+0xcf4>
   2ccde:	f203 4333 	addw	r3, r3, #1075	; 0x433
   2cce2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2cce4:	9d08      	ldr	r5, [sp, #32]
   2cce6:	e4f2      	b.n	2c6ce <_dtoa_r+0x3d6>
   2cce8:	f1ba 0f00 	cmp.w	sl, #0
   2ccec:	f47f ad75 	bne.w	2c7da <_dtoa_r+0x4e2>
   2ccf0:	e7b4      	b.n	2cc5c <_dtoa_r+0x964>
   2ccf2:	f000 fd25 	bl	2d740 <__multadd>
   2ccf6:	4647      	mov	r7, r8
   2ccf8:	4606      	mov	r6, r0
   2ccfa:	4683      	mov	fp, r0
   2ccfc:	e5be      	b.n	2c87c <_dtoa_r+0x584>
   2ccfe:	4601      	mov	r1, r0
   2cd00:	4620      	mov	r0, r4
   2cd02:	9306      	str	r3, [sp, #24]
   2cd04:	f000 fd12 	bl	2d72c <_Bfree>
   2cd08:	2201      	movs	r2, #1
   2cd0a:	9b06      	ldr	r3, [sp, #24]
   2cd0c:	e5e0      	b.n	2c8d0 <_dtoa_r+0x5d8>
   2cd0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2cd10:	2b02      	cmp	r3, #2
   2cd12:	f77f ad96 	ble.w	2c842 <_dtoa_r+0x54a>
   2cd16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cd18:	2b00      	cmp	r3, #0
   2cd1a:	d1c9      	bne.n	2ccb0 <_dtoa_r+0x9b8>
   2cd1c:	4641      	mov	r1, r8
   2cd1e:	2205      	movs	r2, #5
   2cd20:	4620      	mov	r0, r4
   2cd22:	f000 fd0d 	bl	2d740 <__multadd>
   2cd26:	4601      	mov	r1, r0
   2cd28:	4680      	mov	r8, r0
   2cd2a:	4648      	mov	r0, r9
   2cd2c:	f000 fed6 	bl	2dadc <__mcmp>
   2cd30:	2800      	cmp	r0, #0
   2cd32:	ddbd      	ble.n	2ccb0 <_dtoa_r+0x9b8>
   2cd34:	9a02      	ldr	r2, [sp, #8]
   2cd36:	9904      	ldr	r1, [sp, #16]
   2cd38:	2331      	movs	r3, #49	; 0x31
   2cd3a:	3201      	adds	r2, #1
   2cd3c:	9202      	str	r2, [sp, #8]
   2cd3e:	700b      	strb	r3, [r1, #0]
   2cd40:	1c4d      	adds	r5, r1, #1
   2cd42:	e7b9      	b.n	2ccb8 <_dtoa_r+0x9c0>
   2cd44:	9a02      	ldr	r2, [sp, #8]
   2cd46:	3201      	adds	r2, #1
   2cd48:	9202      	str	r2, [sp, #8]
   2cd4a:	9a04      	ldr	r2, [sp, #16]
   2cd4c:	2331      	movs	r3, #49	; 0x31
   2cd4e:	7013      	strb	r3, [r2, #0]
   2cd50:	e652      	b.n	2c9f8 <_dtoa_r+0x700>
   2cd52:	2301      	movs	r3, #1
   2cd54:	930b      	str	r3, [sp, #44]	; 0x2c
   2cd56:	e666      	b.n	2ca26 <_dtoa_r+0x72e>
   2cd58:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2cd5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2cd5e:	e48f      	b.n	2c680 <_dtoa_r+0x388>
   2cd60:	00032bb0 	.word	0x00032bb0
   2cd64:	00032b88 	.word	0x00032b88
   2cd68:	3ff00000 	.word	0x3ff00000
   2cd6c:	401c0000 	.word	0x401c0000
   2cd70:	3fe00000 	.word	0x3fe00000
   2cd74:	40240000 	.word	0x40240000
   2cd78:	40140000 	.word	0x40140000
   2cd7c:	4650      	mov	r0, sl
   2cd7e:	f7d3 fe7f 	bl	a80 <__aeabi_i2d>
   2cd82:	463a      	mov	r2, r7
   2cd84:	4643      	mov	r3, r8
   2cd86:	f7d3 fee1 	bl	b4c <__aeabi_dmul>
   2cd8a:	2200      	movs	r2, #0
   2cd8c:	4bc1      	ldr	r3, [pc, #772]	; (2d094 <_dtoa_r+0xd9c>)
   2cd8e:	f7d3 fd2b 	bl	7e8 <__adddf3>
   2cd92:	4605      	mov	r5, r0
   2cd94:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2cd98:	4641      	mov	r1, r8
   2cd9a:	2200      	movs	r2, #0
   2cd9c:	4bbe      	ldr	r3, [pc, #760]	; (2d098 <_dtoa_r+0xda0>)
   2cd9e:	4638      	mov	r0, r7
   2cda0:	f7d3 fd20 	bl	7e4 <__aeabi_dsub>
   2cda4:	462a      	mov	r2, r5
   2cda6:	4633      	mov	r3, r6
   2cda8:	4682      	mov	sl, r0
   2cdaa:	468b      	mov	fp, r1
   2cdac:	f7d4 f95e 	bl	106c <__aeabi_dcmpgt>
   2cdb0:	4680      	mov	r8, r0
   2cdb2:	2800      	cmp	r0, #0
   2cdb4:	f040 8110 	bne.w	2cfd8 <_dtoa_r+0xce0>
   2cdb8:	462a      	mov	r2, r5
   2cdba:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   2cdbe:	4650      	mov	r0, sl
   2cdc0:	4659      	mov	r1, fp
   2cdc2:	f7d4 f935 	bl	1030 <__aeabi_dcmplt>
   2cdc6:	b118      	cbz	r0, 2cdd0 <_dtoa_r+0xad8>
   2cdc8:	4646      	mov	r6, r8
   2cdca:	e771      	b.n	2ccb0 <_dtoa_r+0x9b8>
   2cdcc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2cdd0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   2cdd4:	f7ff bb8a 	b.w	2c4ec <_dtoa_r+0x1f4>
   2cdd8:	9804      	ldr	r0, [sp, #16]
   2cdda:	f7ff babb 	b.w	2c354 <_dtoa_r+0x5c>
   2cdde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2cde0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2cde2:	970c      	str	r7, [sp, #48]	; 0x30
   2cde4:	1afb      	subs	r3, r7, r3
   2cde6:	441a      	add	r2, r3
   2cde8:	920d      	str	r2, [sp, #52]	; 0x34
   2cdea:	2700      	movs	r7, #0
   2cdec:	e469      	b.n	2c6c2 <_dtoa_r+0x3ca>
   2cdee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   2cdf2:	f04f 0a02 	mov.w	sl, #2
   2cdf6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   2cdfa:	e657      	b.n	2caac <_dtoa_r+0x7b4>
   2cdfc:	2100      	movs	r1, #0
   2cdfe:	2301      	movs	r3, #1
   2ce00:	6461      	str	r1, [r4, #68]	; 0x44
   2ce02:	4620      	mov	r0, r4
   2ce04:	9325      	str	r3, [sp, #148]	; 0x94
   2ce06:	f000 fc6b 	bl	2d6e0 <_Balloc>
   2ce0a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2ce0c:	9004      	str	r0, [sp, #16]
   2ce0e:	6420      	str	r0, [r4, #64]	; 0x40
   2ce10:	930a      	str	r3, [sp, #40]	; 0x28
   2ce12:	930f      	str	r3, [sp, #60]	; 0x3c
   2ce14:	e629      	b.n	2ca6a <_dtoa_r+0x772>
   2ce16:	2a00      	cmp	r2, #0
   2ce18:	46d0      	mov	r8, sl
   2ce1a:	f8cd b018 	str.w	fp, [sp, #24]
   2ce1e:	469a      	mov	sl, r3
   2ce20:	dd11      	ble.n	2ce46 <_dtoa_r+0xb4e>
   2ce22:	4649      	mov	r1, r9
   2ce24:	2201      	movs	r2, #1
   2ce26:	4620      	mov	r0, r4
   2ce28:	f000 fe06 	bl	2da38 <__lshift>
   2ce2c:	4641      	mov	r1, r8
   2ce2e:	4681      	mov	r9, r0
   2ce30:	f000 fe54 	bl	2dadc <__mcmp>
   2ce34:	2800      	cmp	r0, #0
   2ce36:	f340 8146 	ble.w	2d0c6 <_dtoa_r+0xdce>
   2ce3a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   2ce3e:	f000 8106 	beq.w	2d04e <_dtoa_r+0xd56>
   2ce42:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   2ce46:	46b3      	mov	fp, r6
   2ce48:	f887 a000 	strb.w	sl, [r7]
   2ce4c:	1c7d      	adds	r5, r7, #1
   2ce4e:	9e06      	ldr	r6, [sp, #24]
   2ce50:	e5d2      	b.n	2c9f8 <_dtoa_r+0x700>
   2ce52:	d104      	bne.n	2ce5e <_dtoa_r+0xb66>
   2ce54:	f01a 0f01 	tst.w	sl, #1
   2ce58:	d001      	beq.n	2ce5e <_dtoa_r+0xb66>
   2ce5a:	e5bd      	b.n	2c9d8 <_dtoa_r+0x6e0>
   2ce5c:	4615      	mov	r5, r2
   2ce5e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2ce62:	2b30      	cmp	r3, #48	; 0x30
   2ce64:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2ce68:	d0f8      	beq.n	2ce5c <_dtoa_r+0xb64>
   2ce6a:	e5c5      	b.n	2c9f8 <_dtoa_r+0x700>
   2ce6c:	9904      	ldr	r1, [sp, #16]
   2ce6e:	2230      	movs	r2, #48	; 0x30
   2ce70:	700a      	strb	r2, [r1, #0]
   2ce72:	9a02      	ldr	r2, [sp, #8]
   2ce74:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2ce78:	3201      	adds	r2, #1
   2ce7a:	9202      	str	r2, [sp, #8]
   2ce7c:	f7ff bbfc 	b.w	2c678 <_dtoa_r+0x380>
   2ce80:	f000 80bb 	beq.w	2cffa <_dtoa_r+0xd02>
   2ce84:	9b02      	ldr	r3, [sp, #8]
   2ce86:	425d      	negs	r5, r3
   2ce88:	4b84      	ldr	r3, [pc, #528]	; (2d09c <_dtoa_r+0xda4>)
   2ce8a:	f005 020f 	and.w	r2, r5, #15
   2ce8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2ce92:	e9d3 2300 	ldrd	r2, r3, [r3]
   2ce96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2ce9a:	f7d3 fe57 	bl	b4c <__aeabi_dmul>
   2ce9e:	112d      	asrs	r5, r5, #4
   2cea0:	4607      	mov	r7, r0
   2cea2:	4688      	mov	r8, r1
   2cea4:	f000 812c 	beq.w	2d100 <_dtoa_r+0xe08>
   2cea8:	4e7d      	ldr	r6, [pc, #500]	; (2d0a0 <_dtoa_r+0xda8>)
   2ceaa:	f04f 0a02 	mov.w	sl, #2
   2ceae:	07eb      	lsls	r3, r5, #31
   2ceb0:	d509      	bpl.n	2cec6 <_dtoa_r+0xbce>
   2ceb2:	4638      	mov	r0, r7
   2ceb4:	4641      	mov	r1, r8
   2ceb6:	e9d6 2300 	ldrd	r2, r3, [r6]
   2ceba:	f7d3 fe47 	bl	b4c <__aeabi_dmul>
   2cebe:	f10a 0a01 	add.w	sl, sl, #1
   2cec2:	4607      	mov	r7, r0
   2cec4:	4688      	mov	r8, r1
   2cec6:	106d      	asrs	r5, r5, #1
   2cec8:	f106 0608 	add.w	r6, r6, #8
   2cecc:	d1ef      	bne.n	2ceae <_dtoa_r+0xbb6>
   2cece:	e608      	b.n	2cae2 <_dtoa_r+0x7ea>
   2ced0:	6871      	ldr	r1, [r6, #4]
   2ced2:	4620      	mov	r0, r4
   2ced4:	f000 fc04 	bl	2d6e0 <_Balloc>
   2ced8:	6933      	ldr	r3, [r6, #16]
   2ceda:	3302      	adds	r3, #2
   2cedc:	009a      	lsls	r2, r3, #2
   2cede:	4605      	mov	r5, r0
   2cee0:	f106 010c 	add.w	r1, r6, #12
   2cee4:	300c      	adds	r0, #12
   2cee6:	f7d3 f9eb 	bl	2c0 <memcpy>
   2ceea:	4629      	mov	r1, r5
   2ceec:	2201      	movs	r2, #1
   2ceee:	4620      	mov	r0, r4
   2cef0:	f000 fda2 	bl	2da38 <__lshift>
   2cef4:	9006      	str	r0, [sp, #24]
   2cef6:	e4b5      	b.n	2c864 <_dtoa_r+0x56c>
   2cef8:	2b39      	cmp	r3, #57	; 0x39
   2cefa:	f8cd b018 	str.w	fp, [sp, #24]
   2cefe:	46d0      	mov	r8, sl
   2cf00:	f000 80a5 	beq.w	2d04e <_dtoa_r+0xd56>
   2cf04:	f103 0a01 	add.w	sl, r3, #1
   2cf08:	46b3      	mov	fp, r6
   2cf0a:	f887 a000 	strb.w	sl, [r7]
   2cf0e:	1c7d      	adds	r5, r7, #1
   2cf10:	9e06      	ldr	r6, [sp, #24]
   2cf12:	e571      	b.n	2c9f8 <_dtoa_r+0x700>
   2cf14:	465a      	mov	r2, fp
   2cf16:	46d0      	mov	r8, sl
   2cf18:	46b3      	mov	fp, r6
   2cf1a:	469a      	mov	sl, r3
   2cf1c:	4616      	mov	r6, r2
   2cf1e:	e54f      	b.n	2c9c0 <_dtoa_r+0x6c8>
   2cf20:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2cf22:	495e      	ldr	r1, [pc, #376]	; (2d09c <_dtoa_r+0xda4>)
   2cf24:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2cf28:	462a      	mov	r2, r5
   2cf2a:	4633      	mov	r3, r6
   2cf2c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   2cf30:	f7d3 fe0c 	bl	b4c <__aeabi_dmul>
   2cf34:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   2cf38:	4638      	mov	r0, r7
   2cf3a:	4641      	mov	r1, r8
   2cf3c:	f7d4 f8b6 	bl	10ac <__aeabi_d2iz>
   2cf40:	4605      	mov	r5, r0
   2cf42:	f7d3 fd9d 	bl	a80 <__aeabi_i2d>
   2cf46:	460b      	mov	r3, r1
   2cf48:	4602      	mov	r2, r0
   2cf4a:	4641      	mov	r1, r8
   2cf4c:	4638      	mov	r0, r7
   2cf4e:	f7d3 fc49 	bl	7e4 <__aeabi_dsub>
   2cf52:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2cf54:	460f      	mov	r7, r1
   2cf56:	9904      	ldr	r1, [sp, #16]
   2cf58:	3530      	adds	r5, #48	; 0x30
   2cf5a:	2b01      	cmp	r3, #1
   2cf5c:	700d      	strb	r5, [r1, #0]
   2cf5e:	4606      	mov	r6, r0
   2cf60:	f101 0501 	add.w	r5, r1, #1
   2cf64:	d026      	beq.n	2cfb4 <_dtoa_r+0xcbc>
   2cf66:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2cf68:	9a04      	ldr	r2, [sp, #16]
   2cf6a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 2d0a8 <_dtoa_r+0xdb0>
   2cf6e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2cf72:	4413      	add	r3, r2
   2cf74:	f04f 0a00 	mov.w	sl, #0
   2cf78:	4699      	mov	r9, r3
   2cf7a:	4652      	mov	r2, sl
   2cf7c:	465b      	mov	r3, fp
   2cf7e:	4630      	mov	r0, r6
   2cf80:	4639      	mov	r1, r7
   2cf82:	f7d3 fde3 	bl	b4c <__aeabi_dmul>
   2cf86:	460f      	mov	r7, r1
   2cf88:	4606      	mov	r6, r0
   2cf8a:	f7d4 f88f 	bl	10ac <__aeabi_d2iz>
   2cf8e:	4680      	mov	r8, r0
   2cf90:	f7d3 fd76 	bl	a80 <__aeabi_i2d>
   2cf94:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2cf98:	4602      	mov	r2, r0
   2cf9a:	460b      	mov	r3, r1
   2cf9c:	4630      	mov	r0, r6
   2cf9e:	4639      	mov	r1, r7
   2cfa0:	f7d3 fc20 	bl	7e4 <__aeabi_dsub>
   2cfa4:	f805 8b01 	strb.w	r8, [r5], #1
   2cfa8:	454d      	cmp	r5, r9
   2cfaa:	4606      	mov	r6, r0
   2cfac:	460f      	mov	r7, r1
   2cfae:	d1e4      	bne.n	2cf7a <_dtoa_r+0xc82>
   2cfb0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2cfb4:	4b3b      	ldr	r3, [pc, #236]	; (2d0a4 <_dtoa_r+0xdac>)
   2cfb6:	2200      	movs	r2, #0
   2cfb8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   2cfbc:	f7d3 fc14 	bl	7e8 <__adddf3>
   2cfc0:	4632      	mov	r2, r6
   2cfc2:	463b      	mov	r3, r7
   2cfc4:	f7d4 f834 	bl	1030 <__aeabi_dcmplt>
   2cfc8:	2800      	cmp	r0, #0
   2cfca:	d046      	beq.n	2d05a <_dtoa_r+0xd62>
   2cfcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2cfce:	9302      	str	r3, [sp, #8]
   2cfd0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2cfd4:	f7ff bb43 	b.w	2c65e <_dtoa_r+0x366>
   2cfd8:	f04f 0800 	mov.w	r8, #0
   2cfdc:	4646      	mov	r6, r8
   2cfde:	e6a9      	b.n	2cd34 <_dtoa_r+0xa3c>
   2cfe0:	9b08      	ldr	r3, [sp, #32]
   2cfe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2cfe4:	1a9d      	subs	r5, r3, r2
   2cfe6:	2300      	movs	r3, #0
   2cfe8:	f7ff bb71 	b.w	2c6ce <_dtoa_r+0x3d6>
   2cfec:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2cfee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2cff0:	9d08      	ldr	r5, [sp, #32]
   2cff2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   2cff6:	f7ff bb6a 	b.w	2c6ce <_dtoa_r+0x3d6>
   2cffa:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2cffe:	f04f 0a02 	mov.w	sl, #2
   2d002:	e56e      	b.n	2cae2 <_dtoa_r+0x7ea>
   2d004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d006:	2b00      	cmp	r3, #0
   2d008:	f43f aeb8 	beq.w	2cd7c <_dtoa_r+0xa84>
   2d00c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d00e:	2b00      	cmp	r3, #0
   2d010:	f77f aede 	ble.w	2cdd0 <_dtoa_r+0xad8>
   2d014:	2200      	movs	r2, #0
   2d016:	4b24      	ldr	r3, [pc, #144]	; (2d0a8 <_dtoa_r+0xdb0>)
   2d018:	4638      	mov	r0, r7
   2d01a:	4641      	mov	r1, r8
   2d01c:	f7d3 fd96 	bl	b4c <__aeabi_dmul>
   2d020:	4607      	mov	r7, r0
   2d022:	4688      	mov	r8, r1
   2d024:	f10a 0001 	add.w	r0, sl, #1
   2d028:	f7d3 fd2a 	bl	a80 <__aeabi_i2d>
   2d02c:	463a      	mov	r2, r7
   2d02e:	4643      	mov	r3, r8
   2d030:	f7d3 fd8c 	bl	b4c <__aeabi_dmul>
   2d034:	2200      	movs	r2, #0
   2d036:	4b17      	ldr	r3, [pc, #92]	; (2d094 <_dtoa_r+0xd9c>)
   2d038:	f7d3 fbd6 	bl	7e8 <__adddf3>
   2d03c:	9a02      	ldr	r2, [sp, #8]
   2d03e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d040:	9312      	str	r3, [sp, #72]	; 0x48
   2d042:	3a01      	subs	r2, #1
   2d044:	4605      	mov	r5, r0
   2d046:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d04a:	9215      	str	r2, [sp, #84]	; 0x54
   2d04c:	e56a      	b.n	2cb24 <_dtoa_r+0x82c>
   2d04e:	2239      	movs	r2, #57	; 0x39
   2d050:	46b3      	mov	fp, r6
   2d052:	703a      	strb	r2, [r7, #0]
   2d054:	9e06      	ldr	r6, [sp, #24]
   2d056:	1c7d      	adds	r5, r7, #1
   2d058:	e4c0      	b.n	2c9dc <_dtoa_r+0x6e4>
   2d05a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   2d05e:	2000      	movs	r0, #0
   2d060:	4910      	ldr	r1, [pc, #64]	; (2d0a4 <_dtoa_r+0xdac>)
   2d062:	f7d3 fbbf 	bl	7e4 <__aeabi_dsub>
   2d066:	4632      	mov	r2, r6
   2d068:	463b      	mov	r3, r7
   2d06a:	f7d3 ffff 	bl	106c <__aeabi_dcmpgt>
   2d06e:	b908      	cbnz	r0, 2d074 <_dtoa_r+0xd7c>
   2d070:	e6ae      	b.n	2cdd0 <_dtoa_r+0xad8>
   2d072:	4615      	mov	r5, r2
   2d074:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2d078:	2b30      	cmp	r3, #48	; 0x30
   2d07a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2d07e:	d0f8      	beq.n	2d072 <_dtoa_r+0xd7a>
   2d080:	e5d7      	b.n	2cc32 <_dtoa_r+0x93a>
   2d082:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d086:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d088:	9302      	str	r3, [sp, #8]
   2d08a:	f7ff bae8 	b.w	2c65e <_dtoa_r+0x366>
   2d08e:	970c      	str	r7, [sp, #48]	; 0x30
   2d090:	f7ff bba5 	b.w	2c7de <_dtoa_r+0x4e6>
   2d094:	401c0000 	.word	0x401c0000
   2d098:	40140000 	.word	0x40140000
   2d09c:	00032bb0 	.word	0x00032bb0
   2d0a0:	00032b88 	.word	0x00032b88
   2d0a4:	3fe00000 	.word	0x3fe00000
   2d0a8:	40240000 	.word	0x40240000
   2d0ac:	2b39      	cmp	r3, #57	; 0x39
   2d0ae:	f8cd b018 	str.w	fp, [sp, #24]
   2d0b2:	46d0      	mov	r8, sl
   2d0b4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   2d0b8:	469a      	mov	sl, r3
   2d0ba:	d0c8      	beq.n	2d04e <_dtoa_r+0xd56>
   2d0bc:	f1bb 0f00 	cmp.w	fp, #0
   2d0c0:	f73f aebf 	bgt.w	2ce42 <_dtoa_r+0xb4a>
   2d0c4:	e6bf      	b.n	2ce46 <_dtoa_r+0xb4e>
   2d0c6:	f47f aebe 	bne.w	2ce46 <_dtoa_r+0xb4e>
   2d0ca:	f01a 0f01 	tst.w	sl, #1
   2d0ce:	f43f aeba 	beq.w	2ce46 <_dtoa_r+0xb4e>
   2d0d2:	e6b2      	b.n	2ce3a <_dtoa_r+0xb42>
   2d0d4:	f04f 0800 	mov.w	r8, #0
   2d0d8:	4646      	mov	r6, r8
   2d0da:	e5e9      	b.n	2ccb0 <_dtoa_r+0x9b8>
   2d0dc:	4631      	mov	r1, r6
   2d0de:	2300      	movs	r3, #0
   2d0e0:	220a      	movs	r2, #10
   2d0e2:	4620      	mov	r0, r4
   2d0e4:	f000 fb2c 	bl	2d740 <__multadd>
   2d0e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d0ea:	2b00      	cmp	r3, #0
   2d0ec:	4606      	mov	r6, r0
   2d0ee:	dd0a      	ble.n	2d106 <_dtoa_r+0xe0e>
   2d0f0:	930a      	str	r3, [sp, #40]	; 0x28
   2d0f2:	f7ff bbaa 	b.w	2c84a <_dtoa_r+0x552>
   2d0f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d0f8:	2b02      	cmp	r3, #2
   2d0fa:	dc23      	bgt.n	2d144 <_dtoa_r+0xe4c>
   2d0fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d0fe:	e43b      	b.n	2c978 <_dtoa_r+0x680>
   2d100:	f04f 0a02 	mov.w	sl, #2
   2d104:	e4ed      	b.n	2cae2 <_dtoa_r+0x7ea>
   2d106:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d108:	2b02      	cmp	r3, #2
   2d10a:	dc1b      	bgt.n	2d144 <_dtoa_r+0xe4c>
   2d10c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d10e:	e7ef      	b.n	2d0f0 <_dtoa_r+0xdf8>
   2d110:	2500      	movs	r5, #0
   2d112:	6465      	str	r5, [r4, #68]	; 0x44
   2d114:	4629      	mov	r1, r5
   2d116:	4620      	mov	r0, r4
   2d118:	f000 fae2 	bl	2d6e0 <_Balloc>
   2d11c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d120:	930a      	str	r3, [sp, #40]	; 0x28
   2d122:	930f      	str	r3, [sp, #60]	; 0x3c
   2d124:	2301      	movs	r3, #1
   2d126:	9004      	str	r0, [sp, #16]
   2d128:	9525      	str	r5, [sp, #148]	; 0x94
   2d12a:	6420      	str	r0, [r4, #64]	; 0x40
   2d12c:	930b      	str	r3, [sp, #44]	; 0x2c
   2d12e:	f7ff b9dd 	b.w	2c4ec <_dtoa_r+0x1f4>
   2d132:	2501      	movs	r5, #1
   2d134:	f7ff b9a5 	b.w	2c482 <_dtoa_r+0x18a>
   2d138:	f43f ab69 	beq.w	2c80e <_dtoa_r+0x516>
   2d13c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   2d140:	f7ff bbf9 	b.w	2c936 <_dtoa_r+0x63e>
   2d144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d146:	930a      	str	r3, [sp, #40]	; 0x28
   2d148:	e5e5      	b.n	2cd16 <_dtoa_r+0xa1e>
   2d14a:	bf00      	nop

0002d14c <_localeconv_r>:
   2d14c:	4a04      	ldr	r2, [pc, #16]	; (2d160 <_localeconv_r+0x14>)
   2d14e:	4b05      	ldr	r3, [pc, #20]	; (2d164 <_localeconv_r+0x18>)
   2d150:	6812      	ldr	r2, [r2, #0]
   2d152:	6b50      	ldr	r0, [r2, #52]	; 0x34
   2d154:	2800      	cmp	r0, #0
   2d156:	bf08      	it	eq
   2d158:	4618      	moveq	r0, r3
   2d15a:	30f0      	adds	r0, #240	; 0xf0
   2d15c:	4770      	bx	lr
   2d15e:	bf00      	nop
   2d160:	2000c7e8 	.word	0x2000c7e8
   2d164:	2000c67c 	.word	0x2000c67c

0002d168 <_malloc_r>:
   2d168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d16c:	f101 060b 	add.w	r6, r1, #11
   2d170:	2e16      	cmp	r6, #22
   2d172:	b083      	sub	sp, #12
   2d174:	4605      	mov	r5, r0
   2d176:	f240 809e 	bls.w	2d2b6 <_malloc_r+0x14e>
   2d17a:	f036 0607 	bics.w	r6, r6, #7
   2d17e:	f100 80bd 	bmi.w	2d2fc <_malloc_r+0x194>
   2d182:	42b1      	cmp	r1, r6
   2d184:	f200 80ba 	bhi.w	2d2fc <_malloc_r+0x194>
   2d188:	f000 fa9e 	bl	2d6c8 <__malloc_lock>
   2d18c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   2d190:	f0c0 8293 	bcc.w	2d6ba <_malloc_r+0x552>
   2d194:	0a73      	lsrs	r3, r6, #9
   2d196:	f000 80b8 	beq.w	2d30a <_malloc_r+0x1a2>
   2d19a:	2b04      	cmp	r3, #4
   2d19c:	f200 8179 	bhi.w	2d492 <_malloc_r+0x32a>
   2d1a0:	09b3      	lsrs	r3, r6, #6
   2d1a2:	f103 0039 	add.w	r0, r3, #57	; 0x39
   2d1a6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   2d1aa:	00c3      	lsls	r3, r0, #3
   2d1ac:	4fbf      	ldr	r7, [pc, #764]	; (2d4ac <_malloc_r+0x344>)
   2d1ae:	443b      	add	r3, r7
   2d1b0:	f1a3 0108 	sub.w	r1, r3, #8
   2d1b4:	685c      	ldr	r4, [r3, #4]
   2d1b6:	42a1      	cmp	r1, r4
   2d1b8:	d106      	bne.n	2d1c8 <_malloc_r+0x60>
   2d1ba:	e00c      	b.n	2d1d6 <_malloc_r+0x6e>
   2d1bc:	2a00      	cmp	r2, #0
   2d1be:	f280 80aa 	bge.w	2d316 <_malloc_r+0x1ae>
   2d1c2:	68e4      	ldr	r4, [r4, #12]
   2d1c4:	42a1      	cmp	r1, r4
   2d1c6:	d006      	beq.n	2d1d6 <_malloc_r+0x6e>
   2d1c8:	6863      	ldr	r3, [r4, #4]
   2d1ca:	f023 0303 	bic.w	r3, r3, #3
   2d1ce:	1b9a      	subs	r2, r3, r6
   2d1d0:	2a0f      	cmp	r2, #15
   2d1d2:	ddf3      	ble.n	2d1bc <_malloc_r+0x54>
   2d1d4:	4670      	mov	r0, lr
   2d1d6:	693c      	ldr	r4, [r7, #16]
   2d1d8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 2d4c0 <_malloc_r+0x358>
   2d1dc:	4574      	cmp	r4, lr
   2d1de:	f000 81ab 	beq.w	2d538 <_malloc_r+0x3d0>
   2d1e2:	6863      	ldr	r3, [r4, #4]
   2d1e4:	f023 0303 	bic.w	r3, r3, #3
   2d1e8:	1b9a      	subs	r2, r3, r6
   2d1ea:	2a0f      	cmp	r2, #15
   2d1ec:	f300 8190 	bgt.w	2d510 <_malloc_r+0x3a8>
   2d1f0:	2a00      	cmp	r2, #0
   2d1f2:	f8c7 e014 	str.w	lr, [r7, #20]
   2d1f6:	f8c7 e010 	str.w	lr, [r7, #16]
   2d1fa:	f280 809d 	bge.w	2d338 <_malloc_r+0x1d0>
   2d1fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2d202:	f080 8161 	bcs.w	2d4c8 <_malloc_r+0x360>
   2d206:	08db      	lsrs	r3, r3, #3
   2d208:	f103 0c01 	add.w	ip, r3, #1
   2d20c:	1099      	asrs	r1, r3, #2
   2d20e:	687a      	ldr	r2, [r7, #4]
   2d210:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   2d214:	f8c4 8008 	str.w	r8, [r4, #8]
   2d218:	2301      	movs	r3, #1
   2d21a:	408b      	lsls	r3, r1
   2d21c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   2d220:	4313      	orrs	r3, r2
   2d222:	3908      	subs	r1, #8
   2d224:	60e1      	str	r1, [r4, #12]
   2d226:	607b      	str	r3, [r7, #4]
   2d228:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   2d22c:	f8c8 400c 	str.w	r4, [r8, #12]
   2d230:	1082      	asrs	r2, r0, #2
   2d232:	2401      	movs	r4, #1
   2d234:	4094      	lsls	r4, r2
   2d236:	429c      	cmp	r4, r3
   2d238:	f200 808b 	bhi.w	2d352 <_malloc_r+0x1ea>
   2d23c:	421c      	tst	r4, r3
   2d23e:	d106      	bne.n	2d24e <_malloc_r+0xe6>
   2d240:	f020 0003 	bic.w	r0, r0, #3
   2d244:	0064      	lsls	r4, r4, #1
   2d246:	421c      	tst	r4, r3
   2d248:	f100 0004 	add.w	r0, r0, #4
   2d24c:	d0fa      	beq.n	2d244 <_malloc_r+0xdc>
   2d24e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   2d252:	46cc      	mov	ip, r9
   2d254:	4680      	mov	r8, r0
   2d256:	f8dc 300c 	ldr.w	r3, [ip, #12]
   2d25a:	459c      	cmp	ip, r3
   2d25c:	d107      	bne.n	2d26e <_malloc_r+0x106>
   2d25e:	e16d      	b.n	2d53c <_malloc_r+0x3d4>
   2d260:	2a00      	cmp	r2, #0
   2d262:	f280 817b 	bge.w	2d55c <_malloc_r+0x3f4>
   2d266:	68db      	ldr	r3, [r3, #12]
   2d268:	459c      	cmp	ip, r3
   2d26a:	f000 8167 	beq.w	2d53c <_malloc_r+0x3d4>
   2d26e:	6859      	ldr	r1, [r3, #4]
   2d270:	f021 0103 	bic.w	r1, r1, #3
   2d274:	1b8a      	subs	r2, r1, r6
   2d276:	2a0f      	cmp	r2, #15
   2d278:	ddf2      	ble.n	2d260 <_malloc_r+0xf8>
   2d27a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   2d27e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2d282:	9300      	str	r3, [sp, #0]
   2d284:	199c      	adds	r4, r3, r6
   2d286:	4628      	mov	r0, r5
   2d288:	f046 0601 	orr.w	r6, r6, #1
   2d28c:	f042 0501 	orr.w	r5, r2, #1
   2d290:	605e      	str	r6, [r3, #4]
   2d292:	f8c8 c00c 	str.w	ip, [r8, #12]
   2d296:	f8cc 8008 	str.w	r8, [ip, #8]
   2d29a:	617c      	str	r4, [r7, #20]
   2d29c:	613c      	str	r4, [r7, #16]
   2d29e:	f8c4 e00c 	str.w	lr, [r4, #12]
   2d2a2:	f8c4 e008 	str.w	lr, [r4, #8]
   2d2a6:	6065      	str	r5, [r4, #4]
   2d2a8:	505a      	str	r2, [r3, r1]
   2d2aa:	f000 fa13 	bl	2d6d4 <__malloc_unlock>
   2d2ae:	9b00      	ldr	r3, [sp, #0]
   2d2b0:	f103 0408 	add.w	r4, r3, #8
   2d2b4:	e01e      	b.n	2d2f4 <_malloc_r+0x18c>
   2d2b6:	2910      	cmp	r1, #16
   2d2b8:	d820      	bhi.n	2d2fc <_malloc_r+0x194>
   2d2ba:	f000 fa05 	bl	2d6c8 <__malloc_lock>
   2d2be:	2610      	movs	r6, #16
   2d2c0:	2318      	movs	r3, #24
   2d2c2:	2002      	movs	r0, #2
   2d2c4:	4f79      	ldr	r7, [pc, #484]	; (2d4ac <_malloc_r+0x344>)
   2d2c6:	443b      	add	r3, r7
   2d2c8:	f1a3 0208 	sub.w	r2, r3, #8
   2d2cc:	685c      	ldr	r4, [r3, #4]
   2d2ce:	4294      	cmp	r4, r2
   2d2d0:	f000 813d 	beq.w	2d54e <_malloc_r+0x3e6>
   2d2d4:	6863      	ldr	r3, [r4, #4]
   2d2d6:	68e1      	ldr	r1, [r4, #12]
   2d2d8:	68a6      	ldr	r6, [r4, #8]
   2d2da:	f023 0303 	bic.w	r3, r3, #3
   2d2de:	4423      	add	r3, r4
   2d2e0:	4628      	mov	r0, r5
   2d2e2:	685a      	ldr	r2, [r3, #4]
   2d2e4:	60f1      	str	r1, [r6, #12]
   2d2e6:	f042 0201 	orr.w	r2, r2, #1
   2d2ea:	608e      	str	r6, [r1, #8]
   2d2ec:	605a      	str	r2, [r3, #4]
   2d2ee:	f000 f9f1 	bl	2d6d4 <__malloc_unlock>
   2d2f2:	3408      	adds	r4, #8
   2d2f4:	4620      	mov	r0, r4
   2d2f6:	b003      	add	sp, #12
   2d2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d2fc:	2400      	movs	r4, #0
   2d2fe:	230c      	movs	r3, #12
   2d300:	4620      	mov	r0, r4
   2d302:	602b      	str	r3, [r5, #0]
   2d304:	b003      	add	sp, #12
   2d306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d30a:	2040      	movs	r0, #64	; 0x40
   2d30c:	f44f 7300 	mov.w	r3, #512	; 0x200
   2d310:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   2d314:	e74a      	b.n	2d1ac <_malloc_r+0x44>
   2d316:	4423      	add	r3, r4
   2d318:	68e1      	ldr	r1, [r4, #12]
   2d31a:	685a      	ldr	r2, [r3, #4]
   2d31c:	68a6      	ldr	r6, [r4, #8]
   2d31e:	f042 0201 	orr.w	r2, r2, #1
   2d322:	60f1      	str	r1, [r6, #12]
   2d324:	4628      	mov	r0, r5
   2d326:	608e      	str	r6, [r1, #8]
   2d328:	605a      	str	r2, [r3, #4]
   2d32a:	f000 f9d3 	bl	2d6d4 <__malloc_unlock>
   2d32e:	3408      	adds	r4, #8
   2d330:	4620      	mov	r0, r4
   2d332:	b003      	add	sp, #12
   2d334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d338:	4423      	add	r3, r4
   2d33a:	4628      	mov	r0, r5
   2d33c:	685a      	ldr	r2, [r3, #4]
   2d33e:	f042 0201 	orr.w	r2, r2, #1
   2d342:	605a      	str	r2, [r3, #4]
   2d344:	f000 f9c6 	bl	2d6d4 <__malloc_unlock>
   2d348:	3408      	adds	r4, #8
   2d34a:	4620      	mov	r0, r4
   2d34c:	b003      	add	sp, #12
   2d34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d352:	68bc      	ldr	r4, [r7, #8]
   2d354:	6863      	ldr	r3, [r4, #4]
   2d356:	f023 0803 	bic.w	r8, r3, #3
   2d35a:	45b0      	cmp	r8, r6
   2d35c:	d304      	bcc.n	2d368 <_malloc_r+0x200>
   2d35e:	eba8 0306 	sub.w	r3, r8, r6
   2d362:	2b0f      	cmp	r3, #15
   2d364:	f300 8085 	bgt.w	2d472 <_malloc_r+0x30a>
   2d368:	f8df 9158 	ldr.w	r9, [pc, #344]	; 2d4c4 <_malloc_r+0x35c>
   2d36c:	4b50      	ldr	r3, [pc, #320]	; (2d4b0 <_malloc_r+0x348>)
   2d36e:	f8d9 2000 	ldr.w	r2, [r9]
   2d372:	681b      	ldr	r3, [r3, #0]
   2d374:	3201      	adds	r2, #1
   2d376:	4433      	add	r3, r6
   2d378:	eb04 0a08 	add.w	sl, r4, r8
   2d37c:	f000 8155 	beq.w	2d62a <_malloc_r+0x4c2>
   2d380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   2d384:	330f      	adds	r3, #15
   2d386:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   2d38a:	f02b 0b0f 	bic.w	fp, fp, #15
   2d38e:	4659      	mov	r1, fp
   2d390:	4628      	mov	r0, r5
   2d392:	f000 fc9f 	bl	2dcd4 <_sbrk_r>
   2d396:	1c41      	adds	r1, r0, #1
   2d398:	4602      	mov	r2, r0
   2d39a:	f000 80fc 	beq.w	2d596 <_malloc_r+0x42e>
   2d39e:	4582      	cmp	sl, r0
   2d3a0:	f200 80f7 	bhi.w	2d592 <_malloc_r+0x42a>
   2d3a4:	4b43      	ldr	r3, [pc, #268]	; (2d4b4 <_malloc_r+0x34c>)
   2d3a6:	6819      	ldr	r1, [r3, #0]
   2d3a8:	4459      	add	r1, fp
   2d3aa:	6019      	str	r1, [r3, #0]
   2d3ac:	f000 814d 	beq.w	2d64a <_malloc_r+0x4e2>
   2d3b0:	f8d9 0000 	ldr.w	r0, [r9]
   2d3b4:	3001      	adds	r0, #1
   2d3b6:	bf1b      	ittet	ne
   2d3b8:	eba2 0a0a 	subne.w	sl, r2, sl
   2d3bc:	4451      	addne	r1, sl
   2d3be:	f8c9 2000 	streq.w	r2, [r9]
   2d3c2:	6019      	strne	r1, [r3, #0]
   2d3c4:	f012 0107 	ands.w	r1, r2, #7
   2d3c8:	f000 8115 	beq.w	2d5f6 <_malloc_r+0x48e>
   2d3cc:	f1c1 0008 	rsb	r0, r1, #8
   2d3d0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   2d3d4:	4402      	add	r2, r0
   2d3d6:	3108      	adds	r1, #8
   2d3d8:	eb02 090b 	add.w	r9, r2, fp
   2d3dc:	f3c9 090b 	ubfx	r9, r9, #0, #12
   2d3e0:	eba1 0909 	sub.w	r9, r1, r9
   2d3e4:	4649      	mov	r1, r9
   2d3e6:	4628      	mov	r0, r5
   2d3e8:	9301      	str	r3, [sp, #4]
   2d3ea:	9200      	str	r2, [sp, #0]
   2d3ec:	f000 fc72 	bl	2dcd4 <_sbrk_r>
   2d3f0:	1c43      	adds	r3, r0, #1
   2d3f2:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2d3f6:	f000 8143 	beq.w	2d680 <_malloc_r+0x518>
   2d3fa:	1a80      	subs	r0, r0, r2
   2d3fc:	4448      	add	r0, r9
   2d3fe:	f040 0001 	orr.w	r0, r0, #1
   2d402:	6819      	ldr	r1, [r3, #0]
   2d404:	60ba      	str	r2, [r7, #8]
   2d406:	4449      	add	r1, r9
   2d408:	42bc      	cmp	r4, r7
   2d40a:	6050      	str	r0, [r2, #4]
   2d40c:	6019      	str	r1, [r3, #0]
   2d40e:	d017      	beq.n	2d440 <_malloc_r+0x2d8>
   2d410:	f1b8 0f0f 	cmp.w	r8, #15
   2d414:	f240 80fb 	bls.w	2d60e <_malloc_r+0x4a6>
   2d418:	6860      	ldr	r0, [r4, #4]
   2d41a:	f1a8 020c 	sub.w	r2, r8, #12
   2d41e:	f022 0207 	bic.w	r2, r2, #7
   2d422:	eb04 0e02 	add.w	lr, r4, r2
   2d426:	f000 0001 	and.w	r0, r0, #1
   2d42a:	f04f 0c05 	mov.w	ip, #5
   2d42e:	4310      	orrs	r0, r2
   2d430:	2a0f      	cmp	r2, #15
   2d432:	6060      	str	r0, [r4, #4]
   2d434:	f8ce c004 	str.w	ip, [lr, #4]
   2d438:	f8ce c008 	str.w	ip, [lr, #8]
   2d43c:	f200 8117 	bhi.w	2d66e <_malloc_r+0x506>
   2d440:	4b1d      	ldr	r3, [pc, #116]	; (2d4b8 <_malloc_r+0x350>)
   2d442:	68bc      	ldr	r4, [r7, #8]
   2d444:	681a      	ldr	r2, [r3, #0]
   2d446:	4291      	cmp	r1, r2
   2d448:	bf88      	it	hi
   2d44a:	6019      	strhi	r1, [r3, #0]
   2d44c:	4b1b      	ldr	r3, [pc, #108]	; (2d4bc <_malloc_r+0x354>)
   2d44e:	681a      	ldr	r2, [r3, #0]
   2d450:	4291      	cmp	r1, r2
   2d452:	6862      	ldr	r2, [r4, #4]
   2d454:	bf88      	it	hi
   2d456:	6019      	strhi	r1, [r3, #0]
   2d458:	f022 0203 	bic.w	r2, r2, #3
   2d45c:	4296      	cmp	r6, r2
   2d45e:	eba2 0306 	sub.w	r3, r2, r6
   2d462:	d801      	bhi.n	2d468 <_malloc_r+0x300>
   2d464:	2b0f      	cmp	r3, #15
   2d466:	dc04      	bgt.n	2d472 <_malloc_r+0x30a>
   2d468:	4628      	mov	r0, r5
   2d46a:	f000 f933 	bl	2d6d4 <__malloc_unlock>
   2d46e:	2400      	movs	r4, #0
   2d470:	e740      	b.n	2d2f4 <_malloc_r+0x18c>
   2d472:	19a2      	adds	r2, r4, r6
   2d474:	f043 0301 	orr.w	r3, r3, #1
   2d478:	f046 0601 	orr.w	r6, r6, #1
   2d47c:	6066      	str	r6, [r4, #4]
   2d47e:	4628      	mov	r0, r5
   2d480:	60ba      	str	r2, [r7, #8]
   2d482:	6053      	str	r3, [r2, #4]
   2d484:	f000 f926 	bl	2d6d4 <__malloc_unlock>
   2d488:	3408      	adds	r4, #8
   2d48a:	4620      	mov	r0, r4
   2d48c:	b003      	add	sp, #12
   2d48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d492:	2b14      	cmp	r3, #20
   2d494:	d971      	bls.n	2d57a <_malloc_r+0x412>
   2d496:	2b54      	cmp	r3, #84	; 0x54
   2d498:	f200 80a3 	bhi.w	2d5e2 <_malloc_r+0x47a>
   2d49c:	0b33      	lsrs	r3, r6, #12
   2d49e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   2d4a2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   2d4a6:	00c3      	lsls	r3, r0, #3
   2d4a8:	e680      	b.n	2d1ac <_malloc_r+0x44>
   2d4aa:	bf00      	nop
   2d4ac:	2000cc18 	.word	0x2000cc18
   2d4b0:	200029d0 	.word	0x200029d0
   2d4b4:	200029a0 	.word	0x200029a0
   2d4b8:	200029c8 	.word	0x200029c8
   2d4bc:	200029cc 	.word	0x200029cc
   2d4c0:	2000cc20 	.word	0x2000cc20
   2d4c4:	2000d020 	.word	0x2000d020
   2d4c8:	0a5a      	lsrs	r2, r3, #9
   2d4ca:	2a04      	cmp	r2, #4
   2d4cc:	d95b      	bls.n	2d586 <_malloc_r+0x41e>
   2d4ce:	2a14      	cmp	r2, #20
   2d4d0:	f200 80ae 	bhi.w	2d630 <_malloc_r+0x4c8>
   2d4d4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   2d4d8:	00c9      	lsls	r1, r1, #3
   2d4da:	325b      	adds	r2, #91	; 0x5b
   2d4dc:	eb07 0c01 	add.w	ip, r7, r1
   2d4e0:	5879      	ldr	r1, [r7, r1]
   2d4e2:	f1ac 0c08 	sub.w	ip, ip, #8
   2d4e6:	458c      	cmp	ip, r1
   2d4e8:	f000 8088 	beq.w	2d5fc <_malloc_r+0x494>
   2d4ec:	684a      	ldr	r2, [r1, #4]
   2d4ee:	f022 0203 	bic.w	r2, r2, #3
   2d4f2:	4293      	cmp	r3, r2
   2d4f4:	d273      	bcs.n	2d5de <_malloc_r+0x476>
   2d4f6:	6889      	ldr	r1, [r1, #8]
   2d4f8:	458c      	cmp	ip, r1
   2d4fa:	d1f7      	bne.n	2d4ec <_malloc_r+0x384>
   2d4fc:	f8dc 200c 	ldr.w	r2, [ip, #12]
   2d500:	687b      	ldr	r3, [r7, #4]
   2d502:	60e2      	str	r2, [r4, #12]
   2d504:	f8c4 c008 	str.w	ip, [r4, #8]
   2d508:	6094      	str	r4, [r2, #8]
   2d50a:	f8cc 400c 	str.w	r4, [ip, #12]
   2d50e:	e68f      	b.n	2d230 <_malloc_r+0xc8>
   2d510:	19a1      	adds	r1, r4, r6
   2d512:	f046 0c01 	orr.w	ip, r6, #1
   2d516:	f042 0601 	orr.w	r6, r2, #1
   2d51a:	f8c4 c004 	str.w	ip, [r4, #4]
   2d51e:	4628      	mov	r0, r5
   2d520:	6179      	str	r1, [r7, #20]
   2d522:	6139      	str	r1, [r7, #16]
   2d524:	f8c1 e00c 	str.w	lr, [r1, #12]
   2d528:	f8c1 e008 	str.w	lr, [r1, #8]
   2d52c:	604e      	str	r6, [r1, #4]
   2d52e:	50e2      	str	r2, [r4, r3]
   2d530:	f000 f8d0 	bl	2d6d4 <__malloc_unlock>
   2d534:	3408      	adds	r4, #8
   2d536:	e6dd      	b.n	2d2f4 <_malloc_r+0x18c>
   2d538:	687b      	ldr	r3, [r7, #4]
   2d53a:	e679      	b.n	2d230 <_malloc_r+0xc8>
   2d53c:	f108 0801 	add.w	r8, r8, #1
   2d540:	f018 0f03 	tst.w	r8, #3
   2d544:	f10c 0c08 	add.w	ip, ip, #8
   2d548:	f47f ae85 	bne.w	2d256 <_malloc_r+0xee>
   2d54c:	e02d      	b.n	2d5aa <_malloc_r+0x442>
   2d54e:	68dc      	ldr	r4, [r3, #12]
   2d550:	42a3      	cmp	r3, r4
   2d552:	bf08      	it	eq
   2d554:	3002      	addeq	r0, #2
   2d556:	f43f ae3e 	beq.w	2d1d6 <_malloc_r+0x6e>
   2d55a:	e6bb      	b.n	2d2d4 <_malloc_r+0x16c>
   2d55c:	4419      	add	r1, r3
   2d55e:	461c      	mov	r4, r3
   2d560:	684a      	ldr	r2, [r1, #4]
   2d562:	68db      	ldr	r3, [r3, #12]
   2d564:	f854 6f08 	ldr.w	r6, [r4, #8]!
   2d568:	f042 0201 	orr.w	r2, r2, #1
   2d56c:	604a      	str	r2, [r1, #4]
   2d56e:	4628      	mov	r0, r5
   2d570:	60f3      	str	r3, [r6, #12]
   2d572:	609e      	str	r6, [r3, #8]
   2d574:	f000 f8ae 	bl	2d6d4 <__malloc_unlock>
   2d578:	e6bc      	b.n	2d2f4 <_malloc_r+0x18c>
   2d57a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   2d57e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   2d582:	00c3      	lsls	r3, r0, #3
   2d584:	e612      	b.n	2d1ac <_malloc_r+0x44>
   2d586:	099a      	lsrs	r2, r3, #6
   2d588:	f102 0139 	add.w	r1, r2, #57	; 0x39
   2d58c:	00c9      	lsls	r1, r1, #3
   2d58e:	3238      	adds	r2, #56	; 0x38
   2d590:	e7a4      	b.n	2d4dc <_malloc_r+0x374>
   2d592:	42bc      	cmp	r4, r7
   2d594:	d054      	beq.n	2d640 <_malloc_r+0x4d8>
   2d596:	68bc      	ldr	r4, [r7, #8]
   2d598:	6862      	ldr	r2, [r4, #4]
   2d59a:	f022 0203 	bic.w	r2, r2, #3
   2d59e:	e75d      	b.n	2d45c <_malloc_r+0x2f4>
   2d5a0:	f859 3908 	ldr.w	r3, [r9], #-8
   2d5a4:	4599      	cmp	r9, r3
   2d5a6:	f040 8086 	bne.w	2d6b6 <_malloc_r+0x54e>
   2d5aa:	f010 0f03 	tst.w	r0, #3
   2d5ae:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   2d5b2:	d1f5      	bne.n	2d5a0 <_malloc_r+0x438>
   2d5b4:	687b      	ldr	r3, [r7, #4]
   2d5b6:	ea23 0304 	bic.w	r3, r3, r4
   2d5ba:	607b      	str	r3, [r7, #4]
   2d5bc:	0064      	lsls	r4, r4, #1
   2d5be:	429c      	cmp	r4, r3
   2d5c0:	f63f aec7 	bhi.w	2d352 <_malloc_r+0x1ea>
   2d5c4:	2c00      	cmp	r4, #0
   2d5c6:	f43f aec4 	beq.w	2d352 <_malloc_r+0x1ea>
   2d5ca:	421c      	tst	r4, r3
   2d5cc:	4640      	mov	r0, r8
   2d5ce:	f47f ae3e 	bne.w	2d24e <_malloc_r+0xe6>
   2d5d2:	0064      	lsls	r4, r4, #1
   2d5d4:	421c      	tst	r4, r3
   2d5d6:	f100 0004 	add.w	r0, r0, #4
   2d5da:	d0fa      	beq.n	2d5d2 <_malloc_r+0x46a>
   2d5dc:	e637      	b.n	2d24e <_malloc_r+0xe6>
   2d5de:	468c      	mov	ip, r1
   2d5e0:	e78c      	b.n	2d4fc <_malloc_r+0x394>
   2d5e2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   2d5e6:	d815      	bhi.n	2d614 <_malloc_r+0x4ac>
   2d5e8:	0bf3      	lsrs	r3, r6, #15
   2d5ea:	f103 0078 	add.w	r0, r3, #120	; 0x78
   2d5ee:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   2d5f2:	00c3      	lsls	r3, r0, #3
   2d5f4:	e5da      	b.n	2d1ac <_malloc_r+0x44>
   2d5f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   2d5fa:	e6ed      	b.n	2d3d8 <_malloc_r+0x270>
   2d5fc:	687b      	ldr	r3, [r7, #4]
   2d5fe:	1092      	asrs	r2, r2, #2
   2d600:	2101      	movs	r1, #1
   2d602:	fa01 f202 	lsl.w	r2, r1, r2
   2d606:	4313      	orrs	r3, r2
   2d608:	607b      	str	r3, [r7, #4]
   2d60a:	4662      	mov	r2, ip
   2d60c:	e779      	b.n	2d502 <_malloc_r+0x39a>
   2d60e:	2301      	movs	r3, #1
   2d610:	6053      	str	r3, [r2, #4]
   2d612:	e729      	b.n	2d468 <_malloc_r+0x300>
   2d614:	f240 5254 	movw	r2, #1364	; 0x554
   2d618:	4293      	cmp	r3, r2
   2d61a:	d822      	bhi.n	2d662 <_malloc_r+0x4fa>
   2d61c:	0cb3      	lsrs	r3, r6, #18
   2d61e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   2d622:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   2d626:	00c3      	lsls	r3, r0, #3
   2d628:	e5c0      	b.n	2d1ac <_malloc_r+0x44>
   2d62a:	f103 0b10 	add.w	fp, r3, #16
   2d62e:	e6ae      	b.n	2d38e <_malloc_r+0x226>
   2d630:	2a54      	cmp	r2, #84	; 0x54
   2d632:	d829      	bhi.n	2d688 <_malloc_r+0x520>
   2d634:	0b1a      	lsrs	r2, r3, #12
   2d636:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   2d63a:	00c9      	lsls	r1, r1, #3
   2d63c:	326e      	adds	r2, #110	; 0x6e
   2d63e:	e74d      	b.n	2d4dc <_malloc_r+0x374>
   2d640:	4b20      	ldr	r3, [pc, #128]	; (2d6c4 <_malloc_r+0x55c>)
   2d642:	6819      	ldr	r1, [r3, #0]
   2d644:	4459      	add	r1, fp
   2d646:	6019      	str	r1, [r3, #0]
   2d648:	e6b2      	b.n	2d3b0 <_malloc_r+0x248>
   2d64a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   2d64e:	2800      	cmp	r0, #0
   2d650:	f47f aeae 	bne.w	2d3b0 <_malloc_r+0x248>
   2d654:	eb08 030b 	add.w	r3, r8, fp
   2d658:	68ba      	ldr	r2, [r7, #8]
   2d65a:	f043 0301 	orr.w	r3, r3, #1
   2d65e:	6053      	str	r3, [r2, #4]
   2d660:	e6ee      	b.n	2d440 <_malloc_r+0x2d8>
   2d662:	207f      	movs	r0, #127	; 0x7f
   2d664:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   2d668:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   2d66c:	e59e      	b.n	2d1ac <_malloc_r+0x44>
   2d66e:	f104 0108 	add.w	r1, r4, #8
   2d672:	4628      	mov	r0, r5
   2d674:	9300      	str	r3, [sp, #0]
   2d676:	f000 fc3d 	bl	2def4 <_free_r>
   2d67a:	9b00      	ldr	r3, [sp, #0]
   2d67c:	6819      	ldr	r1, [r3, #0]
   2d67e:	e6df      	b.n	2d440 <_malloc_r+0x2d8>
   2d680:	2001      	movs	r0, #1
   2d682:	f04f 0900 	mov.w	r9, #0
   2d686:	e6bc      	b.n	2d402 <_malloc_r+0x29a>
   2d688:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2d68c:	d805      	bhi.n	2d69a <_malloc_r+0x532>
   2d68e:	0bda      	lsrs	r2, r3, #15
   2d690:	f102 0178 	add.w	r1, r2, #120	; 0x78
   2d694:	00c9      	lsls	r1, r1, #3
   2d696:	3277      	adds	r2, #119	; 0x77
   2d698:	e720      	b.n	2d4dc <_malloc_r+0x374>
   2d69a:	f240 5154 	movw	r1, #1364	; 0x554
   2d69e:	428a      	cmp	r2, r1
   2d6a0:	d805      	bhi.n	2d6ae <_malloc_r+0x546>
   2d6a2:	0c9a      	lsrs	r2, r3, #18
   2d6a4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   2d6a8:	00c9      	lsls	r1, r1, #3
   2d6aa:	327c      	adds	r2, #124	; 0x7c
   2d6ac:	e716      	b.n	2d4dc <_malloc_r+0x374>
   2d6ae:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   2d6b2:	227e      	movs	r2, #126	; 0x7e
   2d6b4:	e712      	b.n	2d4dc <_malloc_r+0x374>
   2d6b6:	687b      	ldr	r3, [r7, #4]
   2d6b8:	e780      	b.n	2d5bc <_malloc_r+0x454>
   2d6ba:	08f0      	lsrs	r0, r6, #3
   2d6bc:	f106 0308 	add.w	r3, r6, #8
   2d6c0:	e600      	b.n	2d2c4 <_malloc_r+0x15c>
   2d6c2:	bf00      	nop
   2d6c4:	200029a0 	.word	0x200029a0

0002d6c8 <__malloc_lock>:
   2d6c8:	4801      	ldr	r0, [pc, #4]	; (2d6d0 <__malloc_lock+0x8>)
   2d6ca:	f000 bcf9 	b.w	2e0c0 <__retarget_lock_acquire_recursive>
   2d6ce:	bf00      	nop
   2d6d0:	20002cf8 	.word	0x20002cf8

0002d6d4 <__malloc_unlock>:
   2d6d4:	4801      	ldr	r0, [pc, #4]	; (2d6dc <__malloc_unlock+0x8>)
   2d6d6:	f000 bcf5 	b.w	2e0c4 <__retarget_lock_release_recursive>
   2d6da:	bf00      	nop
   2d6dc:	20002cf8 	.word	0x20002cf8

0002d6e0 <_Balloc>:
   2d6e0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2d6e2:	b570      	push	{r4, r5, r6, lr}
   2d6e4:	4605      	mov	r5, r0
   2d6e6:	460c      	mov	r4, r1
   2d6e8:	b14b      	cbz	r3, 2d6fe <_Balloc+0x1e>
   2d6ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2d6ee:	b180      	cbz	r0, 2d712 <_Balloc+0x32>
   2d6f0:	6802      	ldr	r2, [r0, #0]
   2d6f2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2d6f6:	2300      	movs	r3, #0
   2d6f8:	6103      	str	r3, [r0, #16]
   2d6fa:	60c3      	str	r3, [r0, #12]
   2d6fc:	bd70      	pop	{r4, r5, r6, pc}
   2d6fe:	2221      	movs	r2, #33	; 0x21
   2d700:	2104      	movs	r1, #4
   2d702:	f000 fb77 	bl	2ddf4 <_calloc_r>
   2d706:	64e8      	str	r0, [r5, #76]	; 0x4c
   2d708:	4603      	mov	r3, r0
   2d70a:	2800      	cmp	r0, #0
   2d70c:	d1ed      	bne.n	2d6ea <_Balloc+0xa>
   2d70e:	2000      	movs	r0, #0
   2d710:	bd70      	pop	{r4, r5, r6, pc}
   2d712:	2101      	movs	r1, #1
   2d714:	fa01 f604 	lsl.w	r6, r1, r4
   2d718:	1d72      	adds	r2, r6, #5
   2d71a:	4628      	mov	r0, r5
   2d71c:	0092      	lsls	r2, r2, #2
   2d71e:	f000 fb69 	bl	2ddf4 <_calloc_r>
   2d722:	2800      	cmp	r0, #0
   2d724:	d0f3      	beq.n	2d70e <_Balloc+0x2e>
   2d726:	6044      	str	r4, [r0, #4]
   2d728:	6086      	str	r6, [r0, #8]
   2d72a:	e7e4      	b.n	2d6f6 <_Balloc+0x16>

0002d72c <_Bfree>:
   2d72c:	b131      	cbz	r1, 2d73c <_Bfree+0x10>
   2d72e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2d730:	684a      	ldr	r2, [r1, #4]
   2d732:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2d736:	6008      	str	r0, [r1, #0]
   2d738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   2d73c:	4770      	bx	lr
   2d73e:	bf00      	nop

0002d740 <__multadd>:
   2d740:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d742:	690c      	ldr	r4, [r1, #16]
   2d744:	b083      	sub	sp, #12
   2d746:	460d      	mov	r5, r1
   2d748:	4606      	mov	r6, r0
   2d74a:	f101 0e14 	add.w	lr, r1, #20
   2d74e:	2700      	movs	r7, #0
   2d750:	f8de 0000 	ldr.w	r0, [lr]
   2d754:	b281      	uxth	r1, r0
   2d756:	fb02 3301 	mla	r3, r2, r1, r3
   2d75a:	0c01      	lsrs	r1, r0, #16
   2d75c:	0c18      	lsrs	r0, r3, #16
   2d75e:	fb02 0101 	mla	r1, r2, r1, r0
   2d762:	b29b      	uxth	r3, r3
   2d764:	3701      	adds	r7, #1
   2d766:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   2d76a:	42bc      	cmp	r4, r7
   2d76c:	f84e 3b04 	str.w	r3, [lr], #4
   2d770:	ea4f 4311 	mov.w	r3, r1, lsr #16
   2d774:	dcec      	bgt.n	2d750 <__multadd+0x10>
   2d776:	b13b      	cbz	r3, 2d788 <__multadd+0x48>
   2d778:	68aa      	ldr	r2, [r5, #8]
   2d77a:	4294      	cmp	r4, r2
   2d77c:	da07      	bge.n	2d78e <__multadd+0x4e>
   2d77e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   2d782:	3401      	adds	r4, #1
   2d784:	6153      	str	r3, [r2, #20]
   2d786:	612c      	str	r4, [r5, #16]
   2d788:	4628      	mov	r0, r5
   2d78a:	b003      	add	sp, #12
   2d78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d78e:	6869      	ldr	r1, [r5, #4]
   2d790:	9301      	str	r3, [sp, #4]
   2d792:	3101      	adds	r1, #1
   2d794:	4630      	mov	r0, r6
   2d796:	f7ff ffa3 	bl	2d6e0 <_Balloc>
   2d79a:	692a      	ldr	r2, [r5, #16]
   2d79c:	3202      	adds	r2, #2
   2d79e:	f105 010c 	add.w	r1, r5, #12
   2d7a2:	4607      	mov	r7, r0
   2d7a4:	0092      	lsls	r2, r2, #2
   2d7a6:	300c      	adds	r0, #12
   2d7a8:	f7d2 fd8a 	bl	2c0 <memcpy>
   2d7ac:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   2d7ae:	6869      	ldr	r1, [r5, #4]
   2d7b0:	9b01      	ldr	r3, [sp, #4]
   2d7b2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2d7b6:	6028      	str	r0, [r5, #0]
   2d7b8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   2d7bc:	463d      	mov	r5, r7
   2d7be:	e7de      	b.n	2d77e <__multadd+0x3e>

0002d7c0 <__hi0bits>:
   2d7c0:	0c02      	lsrs	r2, r0, #16
   2d7c2:	0412      	lsls	r2, r2, #16
   2d7c4:	4603      	mov	r3, r0
   2d7c6:	b9b2      	cbnz	r2, 2d7f6 <__hi0bits+0x36>
   2d7c8:	0403      	lsls	r3, r0, #16
   2d7ca:	2010      	movs	r0, #16
   2d7cc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   2d7d0:	bf04      	itt	eq
   2d7d2:	021b      	lsleq	r3, r3, #8
   2d7d4:	3008      	addeq	r0, #8
   2d7d6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2d7da:	bf04      	itt	eq
   2d7dc:	011b      	lsleq	r3, r3, #4
   2d7de:	3004      	addeq	r0, #4
   2d7e0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   2d7e4:	bf04      	itt	eq
   2d7e6:	009b      	lsleq	r3, r3, #2
   2d7e8:	3002      	addeq	r0, #2
   2d7ea:	2b00      	cmp	r3, #0
   2d7ec:	db02      	blt.n	2d7f4 <__hi0bits+0x34>
   2d7ee:	005b      	lsls	r3, r3, #1
   2d7f0:	d403      	bmi.n	2d7fa <__hi0bits+0x3a>
   2d7f2:	2020      	movs	r0, #32
   2d7f4:	4770      	bx	lr
   2d7f6:	2000      	movs	r0, #0
   2d7f8:	e7e8      	b.n	2d7cc <__hi0bits+0xc>
   2d7fa:	3001      	adds	r0, #1
   2d7fc:	4770      	bx	lr
   2d7fe:	bf00      	nop

0002d800 <__lo0bits>:
   2d800:	6803      	ldr	r3, [r0, #0]
   2d802:	f013 0207 	ands.w	r2, r3, #7
   2d806:	4601      	mov	r1, r0
   2d808:	d007      	beq.n	2d81a <__lo0bits+0x1a>
   2d80a:	07da      	lsls	r2, r3, #31
   2d80c:	d421      	bmi.n	2d852 <__lo0bits+0x52>
   2d80e:	0798      	lsls	r0, r3, #30
   2d810:	d421      	bmi.n	2d856 <__lo0bits+0x56>
   2d812:	089b      	lsrs	r3, r3, #2
   2d814:	600b      	str	r3, [r1, #0]
   2d816:	2002      	movs	r0, #2
   2d818:	4770      	bx	lr
   2d81a:	b298      	uxth	r0, r3
   2d81c:	b198      	cbz	r0, 2d846 <__lo0bits+0x46>
   2d81e:	4610      	mov	r0, r2
   2d820:	f013 0fff 	tst.w	r3, #255	; 0xff
   2d824:	bf04      	itt	eq
   2d826:	0a1b      	lsreq	r3, r3, #8
   2d828:	3008      	addeq	r0, #8
   2d82a:	071a      	lsls	r2, r3, #28
   2d82c:	bf04      	itt	eq
   2d82e:	091b      	lsreq	r3, r3, #4
   2d830:	3004      	addeq	r0, #4
   2d832:	079a      	lsls	r2, r3, #30
   2d834:	bf04      	itt	eq
   2d836:	089b      	lsreq	r3, r3, #2
   2d838:	3002      	addeq	r0, #2
   2d83a:	07da      	lsls	r2, r3, #31
   2d83c:	d407      	bmi.n	2d84e <__lo0bits+0x4e>
   2d83e:	085b      	lsrs	r3, r3, #1
   2d840:	d104      	bne.n	2d84c <__lo0bits+0x4c>
   2d842:	2020      	movs	r0, #32
   2d844:	4770      	bx	lr
   2d846:	0c1b      	lsrs	r3, r3, #16
   2d848:	2010      	movs	r0, #16
   2d84a:	e7e9      	b.n	2d820 <__lo0bits+0x20>
   2d84c:	3001      	adds	r0, #1
   2d84e:	600b      	str	r3, [r1, #0]
   2d850:	4770      	bx	lr
   2d852:	2000      	movs	r0, #0
   2d854:	4770      	bx	lr
   2d856:	085b      	lsrs	r3, r3, #1
   2d858:	600b      	str	r3, [r1, #0]
   2d85a:	2001      	movs	r0, #1
   2d85c:	4770      	bx	lr
   2d85e:	bf00      	nop

0002d860 <__i2b>:
   2d860:	b510      	push	{r4, lr}
   2d862:	460c      	mov	r4, r1
   2d864:	2101      	movs	r1, #1
   2d866:	f7ff ff3b 	bl	2d6e0 <_Balloc>
   2d86a:	2201      	movs	r2, #1
   2d86c:	6144      	str	r4, [r0, #20]
   2d86e:	6102      	str	r2, [r0, #16]
   2d870:	bd10      	pop	{r4, pc}
   2d872:	bf00      	nop

0002d874 <__multiply>:
   2d874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d878:	690c      	ldr	r4, [r1, #16]
   2d87a:	6915      	ldr	r5, [r2, #16]
   2d87c:	42ac      	cmp	r4, r5
   2d87e:	b083      	sub	sp, #12
   2d880:	468b      	mov	fp, r1
   2d882:	4616      	mov	r6, r2
   2d884:	da04      	bge.n	2d890 <__multiply+0x1c>
   2d886:	4622      	mov	r2, r4
   2d888:	46b3      	mov	fp, r6
   2d88a:	462c      	mov	r4, r5
   2d88c:	460e      	mov	r6, r1
   2d88e:	4615      	mov	r5, r2
   2d890:	f8db 3008 	ldr.w	r3, [fp, #8]
   2d894:	f8db 1004 	ldr.w	r1, [fp, #4]
   2d898:	eb04 0805 	add.w	r8, r4, r5
   2d89c:	4598      	cmp	r8, r3
   2d89e:	bfc8      	it	gt
   2d8a0:	3101      	addgt	r1, #1
   2d8a2:	f7ff ff1d 	bl	2d6e0 <_Balloc>
   2d8a6:	f100 0914 	add.w	r9, r0, #20
   2d8aa:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   2d8ae:	45d1      	cmp	r9, sl
   2d8b0:	9000      	str	r0, [sp, #0]
   2d8b2:	d205      	bcs.n	2d8c0 <__multiply+0x4c>
   2d8b4:	464b      	mov	r3, r9
   2d8b6:	2100      	movs	r1, #0
   2d8b8:	f843 1b04 	str.w	r1, [r3], #4
   2d8bc:	459a      	cmp	sl, r3
   2d8be:	d8fb      	bhi.n	2d8b8 <__multiply+0x44>
   2d8c0:	f106 0c14 	add.w	ip, r6, #20
   2d8c4:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   2d8c8:	f10b 0b14 	add.w	fp, fp, #20
   2d8cc:	459c      	cmp	ip, r3
   2d8ce:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   2d8d2:	d24c      	bcs.n	2d96e <__multiply+0xfa>
   2d8d4:	f8cd a004 	str.w	sl, [sp, #4]
   2d8d8:	469a      	mov	sl, r3
   2d8da:	f8dc 5000 	ldr.w	r5, [ip]
   2d8de:	b2af      	uxth	r7, r5
   2d8e0:	b1ef      	cbz	r7, 2d91e <__multiply+0xaa>
   2d8e2:	2100      	movs	r1, #0
   2d8e4:	464d      	mov	r5, r9
   2d8e6:	465e      	mov	r6, fp
   2d8e8:	460c      	mov	r4, r1
   2d8ea:	f856 2b04 	ldr.w	r2, [r6], #4
   2d8ee:	6828      	ldr	r0, [r5, #0]
   2d8f0:	b293      	uxth	r3, r2
   2d8f2:	b281      	uxth	r1, r0
   2d8f4:	fb07 1303 	mla	r3, r7, r3, r1
   2d8f8:	0c12      	lsrs	r2, r2, #16
   2d8fa:	0c01      	lsrs	r1, r0, #16
   2d8fc:	4423      	add	r3, r4
   2d8fe:	fb07 1102 	mla	r1, r7, r2, r1
   2d902:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   2d906:	b29b      	uxth	r3, r3
   2d908:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2d90c:	45b6      	cmp	lr, r6
   2d90e:	f845 3b04 	str.w	r3, [r5], #4
   2d912:	ea4f 4411 	mov.w	r4, r1, lsr #16
   2d916:	d8e8      	bhi.n	2d8ea <__multiply+0x76>
   2d918:	602c      	str	r4, [r5, #0]
   2d91a:	f8dc 5000 	ldr.w	r5, [ip]
   2d91e:	0c2d      	lsrs	r5, r5, #16
   2d920:	d01d      	beq.n	2d95e <__multiply+0xea>
   2d922:	f8d9 3000 	ldr.w	r3, [r9]
   2d926:	4648      	mov	r0, r9
   2d928:	461c      	mov	r4, r3
   2d92a:	4659      	mov	r1, fp
   2d92c:	2200      	movs	r2, #0
   2d92e:	880e      	ldrh	r6, [r1, #0]
   2d930:	0c24      	lsrs	r4, r4, #16
   2d932:	fb05 4406 	mla	r4, r5, r6, r4
   2d936:	4422      	add	r2, r4
   2d938:	b29b      	uxth	r3, r3
   2d93a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2d93e:	f840 3b04 	str.w	r3, [r0], #4
   2d942:	f851 3b04 	ldr.w	r3, [r1], #4
   2d946:	6804      	ldr	r4, [r0, #0]
   2d948:	0c1b      	lsrs	r3, r3, #16
   2d94a:	b2a6      	uxth	r6, r4
   2d94c:	fb05 6303 	mla	r3, r5, r3, r6
   2d950:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   2d954:	458e      	cmp	lr, r1
   2d956:	ea4f 4213 	mov.w	r2, r3, lsr #16
   2d95a:	d8e8      	bhi.n	2d92e <__multiply+0xba>
   2d95c:	6003      	str	r3, [r0, #0]
   2d95e:	f10c 0c04 	add.w	ip, ip, #4
   2d962:	45e2      	cmp	sl, ip
   2d964:	f109 0904 	add.w	r9, r9, #4
   2d968:	d8b7      	bhi.n	2d8da <__multiply+0x66>
   2d96a:	f8dd a004 	ldr.w	sl, [sp, #4]
   2d96e:	f1b8 0f00 	cmp.w	r8, #0
   2d972:	dd0b      	ble.n	2d98c <__multiply+0x118>
   2d974:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   2d978:	f1aa 0a04 	sub.w	sl, sl, #4
   2d97c:	b11b      	cbz	r3, 2d986 <__multiply+0x112>
   2d97e:	e005      	b.n	2d98c <__multiply+0x118>
   2d980:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   2d984:	b913      	cbnz	r3, 2d98c <__multiply+0x118>
   2d986:	f1b8 0801 	subs.w	r8, r8, #1
   2d98a:	d1f9      	bne.n	2d980 <__multiply+0x10c>
   2d98c:	9800      	ldr	r0, [sp, #0]
   2d98e:	f8c0 8010 	str.w	r8, [r0, #16]
   2d992:	b003      	add	sp, #12
   2d994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d998 <__pow5mult>:
   2d998:	f012 0303 	ands.w	r3, r2, #3
   2d99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d9a0:	4614      	mov	r4, r2
   2d9a2:	4607      	mov	r7, r0
   2d9a4:	d12e      	bne.n	2da04 <__pow5mult+0x6c>
   2d9a6:	460d      	mov	r5, r1
   2d9a8:	10a4      	asrs	r4, r4, #2
   2d9aa:	d01c      	beq.n	2d9e6 <__pow5mult+0x4e>
   2d9ac:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   2d9ae:	b396      	cbz	r6, 2da16 <__pow5mult+0x7e>
   2d9b0:	07e3      	lsls	r3, r4, #31
   2d9b2:	f04f 0800 	mov.w	r8, #0
   2d9b6:	d406      	bmi.n	2d9c6 <__pow5mult+0x2e>
   2d9b8:	1064      	asrs	r4, r4, #1
   2d9ba:	d014      	beq.n	2d9e6 <__pow5mult+0x4e>
   2d9bc:	6830      	ldr	r0, [r6, #0]
   2d9be:	b1a8      	cbz	r0, 2d9ec <__pow5mult+0x54>
   2d9c0:	4606      	mov	r6, r0
   2d9c2:	07e3      	lsls	r3, r4, #31
   2d9c4:	d5f8      	bpl.n	2d9b8 <__pow5mult+0x20>
   2d9c6:	4632      	mov	r2, r6
   2d9c8:	4629      	mov	r1, r5
   2d9ca:	4638      	mov	r0, r7
   2d9cc:	f7ff ff52 	bl	2d874 <__multiply>
   2d9d0:	b1b5      	cbz	r5, 2da00 <__pow5mult+0x68>
   2d9d2:	686a      	ldr	r2, [r5, #4]
   2d9d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2d9d6:	1064      	asrs	r4, r4, #1
   2d9d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2d9dc:	6029      	str	r1, [r5, #0]
   2d9de:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   2d9e2:	4605      	mov	r5, r0
   2d9e4:	d1ea      	bne.n	2d9bc <__pow5mult+0x24>
   2d9e6:	4628      	mov	r0, r5
   2d9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d9ec:	4632      	mov	r2, r6
   2d9ee:	4631      	mov	r1, r6
   2d9f0:	4638      	mov	r0, r7
   2d9f2:	f7ff ff3f 	bl	2d874 <__multiply>
   2d9f6:	6030      	str	r0, [r6, #0]
   2d9f8:	f8c0 8000 	str.w	r8, [r0]
   2d9fc:	4606      	mov	r6, r0
   2d9fe:	e7e0      	b.n	2d9c2 <__pow5mult+0x2a>
   2da00:	4605      	mov	r5, r0
   2da02:	e7d9      	b.n	2d9b8 <__pow5mult+0x20>
   2da04:	1e5a      	subs	r2, r3, #1
   2da06:	4d0b      	ldr	r5, [pc, #44]	; (2da34 <__pow5mult+0x9c>)
   2da08:	2300      	movs	r3, #0
   2da0a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   2da0e:	f7ff fe97 	bl	2d740 <__multadd>
   2da12:	4605      	mov	r5, r0
   2da14:	e7c8      	b.n	2d9a8 <__pow5mult+0x10>
   2da16:	2101      	movs	r1, #1
   2da18:	4638      	mov	r0, r7
   2da1a:	f7ff fe61 	bl	2d6e0 <_Balloc>
   2da1e:	f240 2171 	movw	r1, #625	; 0x271
   2da22:	2201      	movs	r2, #1
   2da24:	2300      	movs	r3, #0
   2da26:	6141      	str	r1, [r0, #20]
   2da28:	6102      	str	r2, [r0, #16]
   2da2a:	4606      	mov	r6, r0
   2da2c:	64b8      	str	r0, [r7, #72]	; 0x48
   2da2e:	6003      	str	r3, [r0, #0]
   2da30:	e7be      	b.n	2d9b0 <__pow5mult+0x18>
   2da32:	bf00      	nop
   2da34:	00032c78 	.word	0x00032c78

0002da38 <__lshift>:
   2da38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2da3c:	4691      	mov	r9, r2
   2da3e:	690a      	ldr	r2, [r1, #16]
   2da40:	688b      	ldr	r3, [r1, #8]
   2da42:	ea4f 1469 	mov.w	r4, r9, asr #5
   2da46:	eb04 0802 	add.w	r8, r4, r2
   2da4a:	f108 0501 	add.w	r5, r8, #1
   2da4e:	429d      	cmp	r5, r3
   2da50:	460e      	mov	r6, r1
   2da52:	4607      	mov	r7, r0
   2da54:	6849      	ldr	r1, [r1, #4]
   2da56:	dd04      	ble.n	2da62 <__lshift+0x2a>
   2da58:	005b      	lsls	r3, r3, #1
   2da5a:	429d      	cmp	r5, r3
   2da5c:	f101 0101 	add.w	r1, r1, #1
   2da60:	dcfa      	bgt.n	2da58 <__lshift+0x20>
   2da62:	4638      	mov	r0, r7
   2da64:	f7ff fe3c 	bl	2d6e0 <_Balloc>
   2da68:	2c00      	cmp	r4, #0
   2da6a:	f100 0314 	add.w	r3, r0, #20
   2da6e:	dd06      	ble.n	2da7e <__lshift+0x46>
   2da70:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   2da74:	2100      	movs	r1, #0
   2da76:	f843 1b04 	str.w	r1, [r3], #4
   2da7a:	429a      	cmp	r2, r3
   2da7c:	d1fb      	bne.n	2da76 <__lshift+0x3e>
   2da7e:	6934      	ldr	r4, [r6, #16]
   2da80:	f106 0114 	add.w	r1, r6, #20
   2da84:	f019 091f 	ands.w	r9, r9, #31
   2da88:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   2da8c:	d01d      	beq.n	2daca <__lshift+0x92>
   2da8e:	f1c9 0c20 	rsb	ip, r9, #32
   2da92:	2200      	movs	r2, #0
   2da94:	680c      	ldr	r4, [r1, #0]
   2da96:	fa04 f409 	lsl.w	r4, r4, r9
   2da9a:	4314      	orrs	r4, r2
   2da9c:	f843 4b04 	str.w	r4, [r3], #4
   2daa0:	f851 2b04 	ldr.w	r2, [r1], #4
   2daa4:	458e      	cmp	lr, r1
   2daa6:	fa22 f20c 	lsr.w	r2, r2, ip
   2daaa:	d8f3      	bhi.n	2da94 <__lshift+0x5c>
   2daac:	601a      	str	r2, [r3, #0]
   2daae:	b10a      	cbz	r2, 2dab4 <__lshift+0x7c>
   2dab0:	f108 0502 	add.w	r5, r8, #2
   2dab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2dab6:	6872      	ldr	r2, [r6, #4]
   2dab8:	3d01      	subs	r5, #1
   2daba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2dabe:	6105      	str	r5, [r0, #16]
   2dac0:	6031      	str	r1, [r6, #0]
   2dac2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   2dac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2daca:	3b04      	subs	r3, #4
   2dacc:	f851 2b04 	ldr.w	r2, [r1], #4
   2dad0:	f843 2f04 	str.w	r2, [r3, #4]!
   2dad4:	458e      	cmp	lr, r1
   2dad6:	d8f9      	bhi.n	2dacc <__lshift+0x94>
   2dad8:	e7ec      	b.n	2dab4 <__lshift+0x7c>
   2dada:	bf00      	nop

0002dadc <__mcmp>:
   2dadc:	b430      	push	{r4, r5}
   2dade:	690b      	ldr	r3, [r1, #16]
   2dae0:	4605      	mov	r5, r0
   2dae2:	6900      	ldr	r0, [r0, #16]
   2dae4:	1ac0      	subs	r0, r0, r3
   2dae6:	d10f      	bne.n	2db08 <__mcmp+0x2c>
   2dae8:	009b      	lsls	r3, r3, #2
   2daea:	3514      	adds	r5, #20
   2daec:	3114      	adds	r1, #20
   2daee:	4419      	add	r1, r3
   2daf0:	442b      	add	r3, r5
   2daf2:	e001      	b.n	2daf8 <__mcmp+0x1c>
   2daf4:	429d      	cmp	r5, r3
   2daf6:	d207      	bcs.n	2db08 <__mcmp+0x2c>
   2daf8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   2dafc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2db00:	4294      	cmp	r4, r2
   2db02:	d0f7      	beq.n	2daf4 <__mcmp+0x18>
   2db04:	d302      	bcc.n	2db0c <__mcmp+0x30>
   2db06:	2001      	movs	r0, #1
   2db08:	bc30      	pop	{r4, r5}
   2db0a:	4770      	bx	lr
   2db0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2db10:	e7fa      	b.n	2db08 <__mcmp+0x2c>
   2db12:	bf00      	nop

0002db14 <__mdiff>:
   2db14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2db18:	690f      	ldr	r7, [r1, #16]
   2db1a:	460e      	mov	r6, r1
   2db1c:	6911      	ldr	r1, [r2, #16]
   2db1e:	1a7f      	subs	r7, r7, r1
   2db20:	2f00      	cmp	r7, #0
   2db22:	4690      	mov	r8, r2
   2db24:	d117      	bne.n	2db56 <__mdiff+0x42>
   2db26:	0089      	lsls	r1, r1, #2
   2db28:	f106 0514 	add.w	r5, r6, #20
   2db2c:	f102 0e14 	add.w	lr, r2, #20
   2db30:	186b      	adds	r3, r5, r1
   2db32:	4471      	add	r1, lr
   2db34:	e001      	b.n	2db3a <__mdiff+0x26>
   2db36:	429d      	cmp	r5, r3
   2db38:	d25c      	bcs.n	2dbf4 <__mdiff+0xe0>
   2db3a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2db3e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   2db42:	42a2      	cmp	r2, r4
   2db44:	d0f7      	beq.n	2db36 <__mdiff+0x22>
   2db46:	d25e      	bcs.n	2dc06 <__mdiff+0xf2>
   2db48:	4633      	mov	r3, r6
   2db4a:	462c      	mov	r4, r5
   2db4c:	4646      	mov	r6, r8
   2db4e:	4675      	mov	r5, lr
   2db50:	4698      	mov	r8, r3
   2db52:	2701      	movs	r7, #1
   2db54:	e005      	b.n	2db62 <__mdiff+0x4e>
   2db56:	db58      	blt.n	2dc0a <__mdiff+0xf6>
   2db58:	f106 0514 	add.w	r5, r6, #20
   2db5c:	f108 0414 	add.w	r4, r8, #20
   2db60:	2700      	movs	r7, #0
   2db62:	6871      	ldr	r1, [r6, #4]
   2db64:	f7ff fdbc 	bl	2d6e0 <_Balloc>
   2db68:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2db6c:	6936      	ldr	r6, [r6, #16]
   2db6e:	60c7      	str	r7, [r0, #12]
   2db70:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   2db74:	46a6      	mov	lr, r4
   2db76:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   2db7a:	f100 0414 	add.w	r4, r0, #20
   2db7e:	2300      	movs	r3, #0
   2db80:	f85e 1b04 	ldr.w	r1, [lr], #4
   2db84:	f855 8b04 	ldr.w	r8, [r5], #4
   2db88:	b28a      	uxth	r2, r1
   2db8a:	fa13 f388 	uxtah	r3, r3, r8
   2db8e:	0c09      	lsrs	r1, r1, #16
   2db90:	1a9a      	subs	r2, r3, r2
   2db92:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   2db96:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2db9a:	b292      	uxth	r2, r2
   2db9c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2dba0:	45f4      	cmp	ip, lr
   2dba2:	f844 2b04 	str.w	r2, [r4], #4
   2dba6:	ea4f 4323 	mov.w	r3, r3, asr #16
   2dbaa:	d8e9      	bhi.n	2db80 <__mdiff+0x6c>
   2dbac:	42af      	cmp	r7, r5
   2dbae:	d917      	bls.n	2dbe0 <__mdiff+0xcc>
   2dbb0:	46a4      	mov	ip, r4
   2dbb2:	46ae      	mov	lr, r5
   2dbb4:	f85e 2b04 	ldr.w	r2, [lr], #4
   2dbb8:	fa13 f382 	uxtah	r3, r3, r2
   2dbbc:	1419      	asrs	r1, r3, #16
   2dbbe:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   2dbc2:	b29b      	uxth	r3, r3
   2dbc4:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   2dbc8:	4577      	cmp	r7, lr
   2dbca:	f84c 2b04 	str.w	r2, [ip], #4
   2dbce:	ea4f 4321 	mov.w	r3, r1, asr #16
   2dbd2:	d8ef      	bhi.n	2dbb4 <__mdiff+0xa0>
   2dbd4:	43ed      	mvns	r5, r5
   2dbd6:	442f      	add	r7, r5
   2dbd8:	f027 0703 	bic.w	r7, r7, #3
   2dbdc:	3704      	adds	r7, #4
   2dbde:	443c      	add	r4, r7
   2dbe0:	3c04      	subs	r4, #4
   2dbe2:	b922      	cbnz	r2, 2dbee <__mdiff+0xda>
   2dbe4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   2dbe8:	3e01      	subs	r6, #1
   2dbea:	2b00      	cmp	r3, #0
   2dbec:	d0fa      	beq.n	2dbe4 <__mdiff+0xd0>
   2dbee:	6106      	str	r6, [r0, #16]
   2dbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2dbf4:	2100      	movs	r1, #0
   2dbf6:	f7ff fd73 	bl	2d6e0 <_Balloc>
   2dbfa:	2201      	movs	r2, #1
   2dbfc:	2300      	movs	r3, #0
   2dbfe:	6102      	str	r2, [r0, #16]
   2dc00:	6143      	str	r3, [r0, #20]
   2dc02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2dc06:	4674      	mov	r4, lr
   2dc08:	e7ab      	b.n	2db62 <__mdiff+0x4e>
   2dc0a:	4633      	mov	r3, r6
   2dc0c:	f106 0414 	add.w	r4, r6, #20
   2dc10:	f102 0514 	add.w	r5, r2, #20
   2dc14:	4616      	mov	r6, r2
   2dc16:	2701      	movs	r7, #1
   2dc18:	4698      	mov	r8, r3
   2dc1a:	e7a2      	b.n	2db62 <__mdiff+0x4e>

0002dc1c <__d2b>:
   2dc1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dc20:	b082      	sub	sp, #8
   2dc22:	2101      	movs	r1, #1
   2dc24:	461c      	mov	r4, r3
   2dc26:	f3c3 570a 	ubfx	r7, r3, #20, #11
   2dc2a:	4615      	mov	r5, r2
   2dc2c:	9e08      	ldr	r6, [sp, #32]
   2dc2e:	f7ff fd57 	bl	2d6e0 <_Balloc>
   2dc32:	f3c4 0413 	ubfx	r4, r4, #0, #20
   2dc36:	4680      	mov	r8, r0
   2dc38:	b10f      	cbz	r7, 2dc3e <__d2b+0x22>
   2dc3a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   2dc3e:	9401      	str	r4, [sp, #4]
   2dc40:	b31d      	cbz	r5, 2dc8a <__d2b+0x6e>
   2dc42:	a802      	add	r0, sp, #8
   2dc44:	f840 5d08 	str.w	r5, [r0, #-8]!
   2dc48:	f7ff fdda 	bl	2d800 <__lo0bits>
   2dc4c:	2800      	cmp	r0, #0
   2dc4e:	d134      	bne.n	2dcba <__d2b+0x9e>
   2dc50:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2dc54:	f8c8 2014 	str.w	r2, [r8, #20]
   2dc58:	2b00      	cmp	r3, #0
   2dc5a:	bf0c      	ite	eq
   2dc5c:	2101      	moveq	r1, #1
   2dc5e:	2102      	movne	r1, #2
   2dc60:	f8c8 3018 	str.w	r3, [r8, #24]
   2dc64:	f8c8 1010 	str.w	r1, [r8, #16]
   2dc68:	b9df      	cbnz	r7, 2dca2 <__d2b+0x86>
   2dc6a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
   2dc6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2dc72:	6030      	str	r0, [r6, #0]
   2dc74:	6918      	ldr	r0, [r3, #16]
   2dc76:	f7ff fda3 	bl	2d7c0 <__hi0bits>
   2dc7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2dc7c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   2dc80:	6018      	str	r0, [r3, #0]
   2dc82:	4640      	mov	r0, r8
   2dc84:	b002      	add	sp, #8
   2dc86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2dc8a:	a801      	add	r0, sp, #4
   2dc8c:	f7ff fdb8 	bl	2d800 <__lo0bits>
   2dc90:	9b01      	ldr	r3, [sp, #4]
   2dc92:	f8c8 3014 	str.w	r3, [r8, #20]
   2dc96:	2101      	movs	r1, #1
   2dc98:	3020      	adds	r0, #32
   2dc9a:	f8c8 1010 	str.w	r1, [r8, #16]
   2dc9e:	2f00      	cmp	r7, #0
   2dca0:	d0e3      	beq.n	2dc6a <__d2b+0x4e>
   2dca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2dca4:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   2dca8:	4407      	add	r7, r0
   2dcaa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2dcae:	6037      	str	r7, [r6, #0]
   2dcb0:	6018      	str	r0, [r3, #0]
   2dcb2:	4640      	mov	r0, r8
   2dcb4:	b002      	add	sp, #8
   2dcb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2dcba:	e89d 000a 	ldmia.w	sp, {r1, r3}
   2dcbe:	f1c0 0220 	rsb	r2, r0, #32
   2dcc2:	fa03 f202 	lsl.w	r2, r3, r2
   2dcc6:	430a      	orrs	r2, r1
   2dcc8:	40c3      	lsrs	r3, r0
   2dcca:	9301      	str	r3, [sp, #4]
   2dccc:	f8c8 2014 	str.w	r2, [r8, #20]
   2dcd0:	e7c2      	b.n	2dc58 <__d2b+0x3c>
   2dcd2:	bf00      	nop

0002dcd4 <_sbrk_r>:
   2dcd4:	b538      	push	{r3, r4, r5, lr}
   2dcd6:	4c07      	ldr	r4, [pc, #28]	; (2dcf4 <_sbrk_r+0x20>)
   2dcd8:	2300      	movs	r3, #0
   2dcda:	4605      	mov	r5, r0
   2dcdc:	4608      	mov	r0, r1
   2dcde:	6023      	str	r3, [r4, #0]
   2dce0:	f7d3 fe48 	bl	1974 <_sbrk>
   2dce4:	1c43      	adds	r3, r0, #1
   2dce6:	d000      	beq.n	2dcea <_sbrk_r+0x16>
   2dce8:	bd38      	pop	{r3, r4, r5, pc}
   2dcea:	6823      	ldr	r3, [r4, #0]
   2dcec:	2b00      	cmp	r3, #0
   2dcee:	d0fb      	beq.n	2dce8 <_sbrk_r+0x14>
   2dcf0:	602b      	str	r3, [r5, #0]
   2dcf2:	bd38      	pop	{r3, r4, r5, pc}
   2dcf4:	20002d0c 	.word	0x20002d0c

0002dcf8 <__ssprint_r>:
   2dcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dcfc:	6893      	ldr	r3, [r2, #8]
   2dcfe:	b083      	sub	sp, #12
   2dd00:	4690      	mov	r8, r2
   2dd02:	2b00      	cmp	r3, #0
   2dd04:	d070      	beq.n	2dde8 <__ssprint_r+0xf0>
   2dd06:	4682      	mov	sl, r0
   2dd08:	460c      	mov	r4, r1
   2dd0a:	6817      	ldr	r7, [r2, #0]
   2dd0c:	688d      	ldr	r5, [r1, #8]
   2dd0e:	6808      	ldr	r0, [r1, #0]
   2dd10:	e042      	b.n	2dd98 <__ssprint_r+0xa0>
   2dd12:	89a3      	ldrh	r3, [r4, #12]
   2dd14:	f413 6f90 	tst.w	r3, #1152	; 0x480
   2dd18:	d02e      	beq.n	2dd78 <__ssprint_r+0x80>
   2dd1a:	6965      	ldr	r5, [r4, #20]
   2dd1c:	6921      	ldr	r1, [r4, #16]
   2dd1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2dd22:	eba0 0b01 	sub.w	fp, r0, r1
   2dd26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2dd2a:	f10b 0001 	add.w	r0, fp, #1
   2dd2e:	106d      	asrs	r5, r5, #1
   2dd30:	4430      	add	r0, r6
   2dd32:	42a8      	cmp	r0, r5
   2dd34:	462a      	mov	r2, r5
   2dd36:	bf84      	itt	hi
   2dd38:	4605      	movhi	r5, r0
   2dd3a:	462a      	movhi	r2, r5
   2dd3c:	055b      	lsls	r3, r3, #21
   2dd3e:	d538      	bpl.n	2ddb2 <__ssprint_r+0xba>
   2dd40:	4611      	mov	r1, r2
   2dd42:	4650      	mov	r0, sl
   2dd44:	f7ff fa10 	bl	2d168 <_malloc_r>
   2dd48:	2800      	cmp	r0, #0
   2dd4a:	d03c      	beq.n	2ddc6 <__ssprint_r+0xce>
   2dd4c:	465a      	mov	r2, fp
   2dd4e:	6921      	ldr	r1, [r4, #16]
   2dd50:	9001      	str	r0, [sp, #4]
   2dd52:	f7d2 fab5 	bl	2c0 <memcpy>
   2dd56:	89a2      	ldrh	r2, [r4, #12]
   2dd58:	9b01      	ldr	r3, [sp, #4]
   2dd5a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2dd5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2dd62:	81a2      	strh	r2, [r4, #12]
   2dd64:	eba5 020b 	sub.w	r2, r5, fp
   2dd68:	eb03 000b 	add.w	r0, r3, fp
   2dd6c:	6165      	str	r5, [r4, #20]
   2dd6e:	6123      	str	r3, [r4, #16]
   2dd70:	6020      	str	r0, [r4, #0]
   2dd72:	60a2      	str	r2, [r4, #8]
   2dd74:	4635      	mov	r5, r6
   2dd76:	46b3      	mov	fp, r6
   2dd78:	465a      	mov	r2, fp
   2dd7a:	4649      	mov	r1, r9
   2dd7c:	f7fc f99c 	bl	2a0b8 <memmove>
   2dd80:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2dd84:	68a2      	ldr	r2, [r4, #8]
   2dd86:	6820      	ldr	r0, [r4, #0]
   2dd88:	1b55      	subs	r5, r2, r5
   2dd8a:	4458      	add	r0, fp
   2dd8c:	1b9e      	subs	r6, r3, r6
   2dd8e:	60a5      	str	r5, [r4, #8]
   2dd90:	6020      	str	r0, [r4, #0]
   2dd92:	f8c8 6008 	str.w	r6, [r8, #8]
   2dd96:	b33e      	cbz	r6, 2dde8 <__ssprint_r+0xf0>
   2dd98:	687e      	ldr	r6, [r7, #4]
   2dd9a:	463b      	mov	r3, r7
   2dd9c:	3708      	adds	r7, #8
   2dd9e:	2e00      	cmp	r6, #0
   2dda0:	d0fa      	beq.n	2dd98 <__ssprint_r+0xa0>
   2dda2:	42ae      	cmp	r6, r5
   2dda4:	f8d3 9000 	ldr.w	r9, [r3]
   2dda8:	46ab      	mov	fp, r5
   2ddaa:	d2b2      	bcs.n	2dd12 <__ssprint_r+0x1a>
   2ddac:	4635      	mov	r5, r6
   2ddae:	46b3      	mov	fp, r6
   2ddb0:	e7e2      	b.n	2dd78 <__ssprint_r+0x80>
   2ddb2:	4650      	mov	r0, sl
   2ddb4:	f000 f988 	bl	2e0c8 <_realloc_r>
   2ddb8:	4603      	mov	r3, r0
   2ddba:	2800      	cmp	r0, #0
   2ddbc:	d1d2      	bne.n	2dd64 <__ssprint_r+0x6c>
   2ddbe:	6921      	ldr	r1, [r4, #16]
   2ddc0:	4650      	mov	r0, sl
   2ddc2:	f000 f897 	bl	2def4 <_free_r>
   2ddc6:	230c      	movs	r3, #12
   2ddc8:	f8ca 3000 	str.w	r3, [sl]
   2ddcc:	89a3      	ldrh	r3, [r4, #12]
   2ddce:	2200      	movs	r2, #0
   2ddd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2ddd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ddd8:	81a3      	strh	r3, [r4, #12]
   2ddda:	f8c8 2008 	str.w	r2, [r8, #8]
   2ddde:	f8c8 2004 	str.w	r2, [r8, #4]
   2dde2:	b003      	add	sp, #12
   2dde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dde8:	2000      	movs	r0, #0
   2ddea:	f8c8 0004 	str.w	r0, [r8, #4]
   2ddee:	b003      	add	sp, #12
   2ddf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ddf4 <_calloc_r>:
   2ddf4:	b510      	push	{r4, lr}
   2ddf6:	fb02 f101 	mul.w	r1, r2, r1
   2ddfa:	f7ff f9b5 	bl	2d168 <_malloc_r>
   2ddfe:	4604      	mov	r4, r0
   2de00:	b1d8      	cbz	r0, 2de3a <_calloc_r+0x46>
   2de02:	f850 2c04 	ldr.w	r2, [r0, #-4]
   2de06:	f022 0203 	bic.w	r2, r2, #3
   2de0a:	3a04      	subs	r2, #4
   2de0c:	2a24      	cmp	r2, #36	; 0x24
   2de0e:	d818      	bhi.n	2de42 <_calloc_r+0x4e>
   2de10:	2a13      	cmp	r2, #19
   2de12:	d914      	bls.n	2de3e <_calloc_r+0x4a>
   2de14:	2300      	movs	r3, #0
   2de16:	2a1b      	cmp	r2, #27
   2de18:	6003      	str	r3, [r0, #0]
   2de1a:	6043      	str	r3, [r0, #4]
   2de1c:	d916      	bls.n	2de4c <_calloc_r+0x58>
   2de1e:	2a24      	cmp	r2, #36	; 0x24
   2de20:	6083      	str	r3, [r0, #8]
   2de22:	60c3      	str	r3, [r0, #12]
   2de24:	bf11      	iteee	ne
   2de26:	f100 0210 	addne.w	r2, r0, #16
   2de2a:	6103      	streq	r3, [r0, #16]
   2de2c:	6143      	streq	r3, [r0, #20]
   2de2e:	f100 0218 	addeq.w	r2, r0, #24
   2de32:	2300      	movs	r3, #0
   2de34:	6013      	str	r3, [r2, #0]
   2de36:	6053      	str	r3, [r2, #4]
   2de38:	6093      	str	r3, [r2, #8]
   2de3a:	4620      	mov	r0, r4
   2de3c:	bd10      	pop	{r4, pc}
   2de3e:	4602      	mov	r2, r0
   2de40:	e7f7      	b.n	2de32 <_calloc_r+0x3e>
   2de42:	2100      	movs	r1, #0
   2de44:	f7fc f99c 	bl	2a180 <memset>
   2de48:	4620      	mov	r0, r4
   2de4a:	bd10      	pop	{r4, pc}
   2de4c:	f100 0208 	add.w	r2, r0, #8
   2de50:	e7ef      	b.n	2de32 <_calloc_r+0x3e>
   2de52:	bf00      	nop

0002de54 <_malloc_trim_r>:
   2de54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2de56:	4f24      	ldr	r7, [pc, #144]	; (2dee8 <_malloc_trim_r+0x94>)
   2de58:	460c      	mov	r4, r1
   2de5a:	4606      	mov	r6, r0
   2de5c:	f7ff fc34 	bl	2d6c8 <__malloc_lock>
   2de60:	68bb      	ldr	r3, [r7, #8]
   2de62:	685d      	ldr	r5, [r3, #4]
   2de64:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   2de68:	310f      	adds	r1, #15
   2de6a:	f025 0503 	bic.w	r5, r5, #3
   2de6e:	4429      	add	r1, r5
   2de70:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   2de74:	f021 010f 	bic.w	r1, r1, #15
   2de78:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   2de7c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   2de80:	db07      	blt.n	2de92 <_malloc_trim_r+0x3e>
   2de82:	2100      	movs	r1, #0
   2de84:	4630      	mov	r0, r6
   2de86:	f7ff ff25 	bl	2dcd4 <_sbrk_r>
   2de8a:	68bb      	ldr	r3, [r7, #8]
   2de8c:	442b      	add	r3, r5
   2de8e:	4298      	cmp	r0, r3
   2de90:	d004      	beq.n	2de9c <_malloc_trim_r+0x48>
   2de92:	4630      	mov	r0, r6
   2de94:	f7ff fc1e 	bl	2d6d4 <__malloc_unlock>
   2de98:	2000      	movs	r0, #0
   2de9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2de9c:	4261      	negs	r1, r4
   2de9e:	4630      	mov	r0, r6
   2dea0:	f7ff ff18 	bl	2dcd4 <_sbrk_r>
   2dea4:	3001      	adds	r0, #1
   2dea6:	d00d      	beq.n	2dec4 <_malloc_trim_r+0x70>
   2dea8:	4b10      	ldr	r3, [pc, #64]	; (2deec <_malloc_trim_r+0x98>)
   2deaa:	68ba      	ldr	r2, [r7, #8]
   2deac:	6819      	ldr	r1, [r3, #0]
   2deae:	1b2d      	subs	r5, r5, r4
   2deb0:	f045 0501 	orr.w	r5, r5, #1
   2deb4:	4630      	mov	r0, r6
   2deb6:	1b09      	subs	r1, r1, r4
   2deb8:	6055      	str	r5, [r2, #4]
   2deba:	6019      	str	r1, [r3, #0]
   2debc:	f7ff fc0a 	bl	2d6d4 <__malloc_unlock>
   2dec0:	2001      	movs	r0, #1
   2dec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2dec4:	2100      	movs	r1, #0
   2dec6:	4630      	mov	r0, r6
   2dec8:	f7ff ff04 	bl	2dcd4 <_sbrk_r>
   2decc:	68ba      	ldr	r2, [r7, #8]
   2dece:	1a83      	subs	r3, r0, r2
   2ded0:	2b0f      	cmp	r3, #15
   2ded2:	ddde      	ble.n	2de92 <_malloc_trim_r+0x3e>
   2ded4:	4c06      	ldr	r4, [pc, #24]	; (2def0 <_malloc_trim_r+0x9c>)
   2ded6:	4905      	ldr	r1, [pc, #20]	; (2deec <_malloc_trim_r+0x98>)
   2ded8:	6824      	ldr	r4, [r4, #0]
   2deda:	f043 0301 	orr.w	r3, r3, #1
   2dede:	1b00      	subs	r0, r0, r4
   2dee0:	6053      	str	r3, [r2, #4]
   2dee2:	6008      	str	r0, [r1, #0]
   2dee4:	e7d5      	b.n	2de92 <_malloc_trim_r+0x3e>
   2dee6:	bf00      	nop
   2dee8:	2000cc18 	.word	0x2000cc18
   2deec:	200029a0 	.word	0x200029a0
   2def0:	2000d020 	.word	0x2000d020

0002def4 <_free_r>:
   2def4:	2900      	cmp	r1, #0
   2def6:	d044      	beq.n	2df82 <_free_r+0x8e>
   2def8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2defc:	460d      	mov	r5, r1
   2defe:	4680      	mov	r8, r0
   2df00:	f7ff fbe2 	bl	2d6c8 <__malloc_lock>
   2df04:	f855 7c04 	ldr.w	r7, [r5, #-4]
   2df08:	4969      	ldr	r1, [pc, #420]	; (2e0b0 <_free_r+0x1bc>)
   2df0a:	f027 0301 	bic.w	r3, r7, #1
   2df0e:	f1a5 0408 	sub.w	r4, r5, #8
   2df12:	18e2      	adds	r2, r4, r3
   2df14:	688e      	ldr	r6, [r1, #8]
   2df16:	6850      	ldr	r0, [r2, #4]
   2df18:	42b2      	cmp	r2, r6
   2df1a:	f020 0003 	bic.w	r0, r0, #3
   2df1e:	d05e      	beq.n	2dfde <_free_r+0xea>
   2df20:	07fe      	lsls	r6, r7, #31
   2df22:	6050      	str	r0, [r2, #4]
   2df24:	d40b      	bmi.n	2df3e <_free_r+0x4a>
   2df26:	f855 7c08 	ldr.w	r7, [r5, #-8]
   2df2a:	1be4      	subs	r4, r4, r7
   2df2c:	f101 0e08 	add.w	lr, r1, #8
   2df30:	68a5      	ldr	r5, [r4, #8]
   2df32:	4575      	cmp	r5, lr
   2df34:	443b      	add	r3, r7
   2df36:	d06d      	beq.n	2e014 <_free_r+0x120>
   2df38:	68e7      	ldr	r7, [r4, #12]
   2df3a:	60ef      	str	r7, [r5, #12]
   2df3c:	60bd      	str	r5, [r7, #8]
   2df3e:	1815      	adds	r5, r2, r0
   2df40:	686d      	ldr	r5, [r5, #4]
   2df42:	07ed      	lsls	r5, r5, #31
   2df44:	d53e      	bpl.n	2dfc4 <_free_r+0xd0>
   2df46:	f043 0201 	orr.w	r2, r3, #1
   2df4a:	6062      	str	r2, [r4, #4]
   2df4c:	50e3      	str	r3, [r4, r3]
   2df4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2df52:	d217      	bcs.n	2df84 <_free_r+0x90>
   2df54:	08db      	lsrs	r3, r3, #3
   2df56:	1c58      	adds	r0, r3, #1
   2df58:	109a      	asrs	r2, r3, #2
   2df5a:	684d      	ldr	r5, [r1, #4]
   2df5c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   2df60:	60a7      	str	r7, [r4, #8]
   2df62:	2301      	movs	r3, #1
   2df64:	4093      	lsls	r3, r2
   2df66:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   2df6a:	432b      	orrs	r3, r5
   2df6c:	3a08      	subs	r2, #8
   2df6e:	60e2      	str	r2, [r4, #12]
   2df70:	604b      	str	r3, [r1, #4]
   2df72:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   2df76:	60fc      	str	r4, [r7, #12]
   2df78:	4640      	mov	r0, r8
   2df7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2df7e:	f7ff bba9 	b.w	2d6d4 <__malloc_unlock>
   2df82:	4770      	bx	lr
   2df84:	0a5a      	lsrs	r2, r3, #9
   2df86:	2a04      	cmp	r2, #4
   2df88:	d852      	bhi.n	2e030 <_free_r+0x13c>
   2df8a:	099a      	lsrs	r2, r3, #6
   2df8c:	f102 0739 	add.w	r7, r2, #57	; 0x39
   2df90:	00ff      	lsls	r7, r7, #3
   2df92:	f102 0538 	add.w	r5, r2, #56	; 0x38
   2df96:	19c8      	adds	r0, r1, r7
   2df98:	59ca      	ldr	r2, [r1, r7]
   2df9a:	3808      	subs	r0, #8
   2df9c:	4290      	cmp	r0, r2
   2df9e:	d04f      	beq.n	2e040 <_free_r+0x14c>
   2dfa0:	6851      	ldr	r1, [r2, #4]
   2dfa2:	f021 0103 	bic.w	r1, r1, #3
   2dfa6:	428b      	cmp	r3, r1
   2dfa8:	d232      	bcs.n	2e010 <_free_r+0x11c>
   2dfaa:	6892      	ldr	r2, [r2, #8]
   2dfac:	4290      	cmp	r0, r2
   2dfae:	d1f7      	bne.n	2dfa0 <_free_r+0xac>
   2dfb0:	68c3      	ldr	r3, [r0, #12]
   2dfb2:	60a0      	str	r0, [r4, #8]
   2dfb4:	60e3      	str	r3, [r4, #12]
   2dfb6:	609c      	str	r4, [r3, #8]
   2dfb8:	60c4      	str	r4, [r0, #12]
   2dfba:	4640      	mov	r0, r8
   2dfbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2dfc0:	f7ff bb88 	b.w	2d6d4 <__malloc_unlock>
   2dfc4:	6895      	ldr	r5, [r2, #8]
   2dfc6:	4f3b      	ldr	r7, [pc, #236]	; (2e0b4 <_free_r+0x1c0>)
   2dfc8:	42bd      	cmp	r5, r7
   2dfca:	4403      	add	r3, r0
   2dfcc:	d040      	beq.n	2e050 <_free_r+0x15c>
   2dfce:	68d0      	ldr	r0, [r2, #12]
   2dfd0:	60e8      	str	r0, [r5, #12]
   2dfd2:	f043 0201 	orr.w	r2, r3, #1
   2dfd6:	6085      	str	r5, [r0, #8]
   2dfd8:	6062      	str	r2, [r4, #4]
   2dfda:	50e3      	str	r3, [r4, r3]
   2dfdc:	e7b7      	b.n	2df4e <_free_r+0x5a>
   2dfde:	07ff      	lsls	r7, r7, #31
   2dfe0:	4403      	add	r3, r0
   2dfe2:	d407      	bmi.n	2dff4 <_free_r+0x100>
   2dfe4:	f855 2c08 	ldr.w	r2, [r5, #-8]
   2dfe8:	1aa4      	subs	r4, r4, r2
   2dfea:	4413      	add	r3, r2
   2dfec:	68a0      	ldr	r0, [r4, #8]
   2dfee:	68e2      	ldr	r2, [r4, #12]
   2dff0:	60c2      	str	r2, [r0, #12]
   2dff2:	6090      	str	r0, [r2, #8]
   2dff4:	4a30      	ldr	r2, [pc, #192]	; (2e0b8 <_free_r+0x1c4>)
   2dff6:	6812      	ldr	r2, [r2, #0]
   2dff8:	f043 0001 	orr.w	r0, r3, #1
   2dffc:	4293      	cmp	r3, r2
   2dffe:	6060      	str	r0, [r4, #4]
   2e000:	608c      	str	r4, [r1, #8]
   2e002:	d3b9      	bcc.n	2df78 <_free_r+0x84>
   2e004:	4b2d      	ldr	r3, [pc, #180]	; (2e0bc <_free_r+0x1c8>)
   2e006:	4640      	mov	r0, r8
   2e008:	6819      	ldr	r1, [r3, #0]
   2e00a:	f7ff ff23 	bl	2de54 <_malloc_trim_r>
   2e00e:	e7b3      	b.n	2df78 <_free_r+0x84>
   2e010:	4610      	mov	r0, r2
   2e012:	e7cd      	b.n	2dfb0 <_free_r+0xbc>
   2e014:	1811      	adds	r1, r2, r0
   2e016:	6849      	ldr	r1, [r1, #4]
   2e018:	07c9      	lsls	r1, r1, #31
   2e01a:	d444      	bmi.n	2e0a6 <_free_r+0x1b2>
   2e01c:	6891      	ldr	r1, [r2, #8]
   2e01e:	68d2      	ldr	r2, [r2, #12]
   2e020:	60ca      	str	r2, [r1, #12]
   2e022:	4403      	add	r3, r0
   2e024:	f043 0001 	orr.w	r0, r3, #1
   2e028:	6091      	str	r1, [r2, #8]
   2e02a:	6060      	str	r0, [r4, #4]
   2e02c:	50e3      	str	r3, [r4, r3]
   2e02e:	e7a3      	b.n	2df78 <_free_r+0x84>
   2e030:	2a14      	cmp	r2, #20
   2e032:	d816      	bhi.n	2e062 <_free_r+0x16e>
   2e034:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   2e038:	00ff      	lsls	r7, r7, #3
   2e03a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   2e03e:	e7aa      	b.n	2df96 <_free_r+0xa2>
   2e040:	10aa      	asrs	r2, r5, #2
   2e042:	2301      	movs	r3, #1
   2e044:	684d      	ldr	r5, [r1, #4]
   2e046:	4093      	lsls	r3, r2
   2e048:	432b      	orrs	r3, r5
   2e04a:	604b      	str	r3, [r1, #4]
   2e04c:	4603      	mov	r3, r0
   2e04e:	e7b0      	b.n	2dfb2 <_free_r+0xbe>
   2e050:	f043 0201 	orr.w	r2, r3, #1
   2e054:	614c      	str	r4, [r1, #20]
   2e056:	610c      	str	r4, [r1, #16]
   2e058:	60e5      	str	r5, [r4, #12]
   2e05a:	60a5      	str	r5, [r4, #8]
   2e05c:	6062      	str	r2, [r4, #4]
   2e05e:	50e3      	str	r3, [r4, r3]
   2e060:	e78a      	b.n	2df78 <_free_r+0x84>
   2e062:	2a54      	cmp	r2, #84	; 0x54
   2e064:	d806      	bhi.n	2e074 <_free_r+0x180>
   2e066:	0b1a      	lsrs	r2, r3, #12
   2e068:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   2e06c:	00ff      	lsls	r7, r7, #3
   2e06e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   2e072:	e790      	b.n	2df96 <_free_r+0xa2>
   2e074:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2e078:	d806      	bhi.n	2e088 <_free_r+0x194>
   2e07a:	0bda      	lsrs	r2, r3, #15
   2e07c:	f102 0778 	add.w	r7, r2, #120	; 0x78
   2e080:	00ff      	lsls	r7, r7, #3
   2e082:	f102 0577 	add.w	r5, r2, #119	; 0x77
   2e086:	e786      	b.n	2df96 <_free_r+0xa2>
   2e088:	f240 5054 	movw	r0, #1364	; 0x554
   2e08c:	4282      	cmp	r2, r0
   2e08e:	d806      	bhi.n	2e09e <_free_r+0x1aa>
   2e090:	0c9a      	lsrs	r2, r3, #18
   2e092:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   2e096:	00ff      	lsls	r7, r7, #3
   2e098:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   2e09c:	e77b      	b.n	2df96 <_free_r+0xa2>
   2e09e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   2e0a2:	257e      	movs	r5, #126	; 0x7e
   2e0a4:	e777      	b.n	2df96 <_free_r+0xa2>
   2e0a6:	f043 0101 	orr.w	r1, r3, #1
   2e0aa:	6061      	str	r1, [r4, #4]
   2e0ac:	6013      	str	r3, [r2, #0]
   2e0ae:	e763      	b.n	2df78 <_free_r+0x84>
   2e0b0:	2000cc18 	.word	0x2000cc18
   2e0b4:	2000cc20 	.word	0x2000cc20
   2e0b8:	2000d024 	.word	0x2000d024
   2e0bc:	200029d0 	.word	0x200029d0

0002e0c0 <__retarget_lock_acquire_recursive>:
   2e0c0:	4770      	bx	lr
   2e0c2:	bf00      	nop

0002e0c4 <__retarget_lock_release_recursive>:
   2e0c4:	4770      	bx	lr
   2e0c6:	bf00      	nop

0002e0c8 <_realloc_r>:
   2e0c8:	2900      	cmp	r1, #0
   2e0ca:	f000 8095 	beq.w	2e1f8 <_realloc_r+0x130>
   2e0ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e0d2:	460d      	mov	r5, r1
   2e0d4:	4616      	mov	r6, r2
   2e0d6:	b083      	sub	sp, #12
   2e0d8:	4680      	mov	r8, r0
   2e0da:	f106 070b 	add.w	r7, r6, #11
   2e0de:	f7ff faf3 	bl	2d6c8 <__malloc_lock>
   2e0e2:	f855 ec04 	ldr.w	lr, [r5, #-4]
   2e0e6:	2f16      	cmp	r7, #22
   2e0e8:	f02e 0403 	bic.w	r4, lr, #3
   2e0ec:	f1a5 0908 	sub.w	r9, r5, #8
   2e0f0:	d83c      	bhi.n	2e16c <_realloc_r+0xa4>
   2e0f2:	2210      	movs	r2, #16
   2e0f4:	4617      	mov	r7, r2
   2e0f6:	42be      	cmp	r6, r7
   2e0f8:	d83d      	bhi.n	2e176 <_realloc_r+0xae>
   2e0fa:	4294      	cmp	r4, r2
   2e0fc:	da43      	bge.n	2e186 <_realloc_r+0xbe>
   2e0fe:	4bc4      	ldr	r3, [pc, #784]	; (2e410 <_realloc_r+0x348>)
   2e100:	6899      	ldr	r1, [r3, #8]
   2e102:	eb09 0004 	add.w	r0, r9, r4
   2e106:	4288      	cmp	r0, r1
   2e108:	f000 80b4 	beq.w	2e274 <_realloc_r+0x1ac>
   2e10c:	6843      	ldr	r3, [r0, #4]
   2e10e:	f023 0101 	bic.w	r1, r3, #1
   2e112:	4401      	add	r1, r0
   2e114:	6849      	ldr	r1, [r1, #4]
   2e116:	07c9      	lsls	r1, r1, #31
   2e118:	d54c      	bpl.n	2e1b4 <_realloc_r+0xec>
   2e11a:	f01e 0f01 	tst.w	lr, #1
   2e11e:	f000 809b 	beq.w	2e258 <_realloc_r+0x190>
   2e122:	4631      	mov	r1, r6
   2e124:	4640      	mov	r0, r8
   2e126:	f7ff f81f 	bl	2d168 <_malloc_r>
   2e12a:	4606      	mov	r6, r0
   2e12c:	2800      	cmp	r0, #0
   2e12e:	d03a      	beq.n	2e1a6 <_realloc_r+0xde>
   2e130:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2e134:	f023 0301 	bic.w	r3, r3, #1
   2e138:	444b      	add	r3, r9
   2e13a:	f1a0 0208 	sub.w	r2, r0, #8
   2e13e:	429a      	cmp	r2, r3
   2e140:	f000 8121 	beq.w	2e386 <_realloc_r+0x2be>
   2e144:	1f22      	subs	r2, r4, #4
   2e146:	2a24      	cmp	r2, #36	; 0x24
   2e148:	f200 8107 	bhi.w	2e35a <_realloc_r+0x292>
   2e14c:	2a13      	cmp	r2, #19
   2e14e:	f200 80db 	bhi.w	2e308 <_realloc_r+0x240>
   2e152:	4603      	mov	r3, r0
   2e154:	462a      	mov	r2, r5
   2e156:	6811      	ldr	r1, [r2, #0]
   2e158:	6019      	str	r1, [r3, #0]
   2e15a:	6851      	ldr	r1, [r2, #4]
   2e15c:	6059      	str	r1, [r3, #4]
   2e15e:	6892      	ldr	r2, [r2, #8]
   2e160:	609a      	str	r2, [r3, #8]
   2e162:	4629      	mov	r1, r5
   2e164:	4640      	mov	r0, r8
   2e166:	f7ff fec5 	bl	2def4 <_free_r>
   2e16a:	e01c      	b.n	2e1a6 <_realloc_r+0xde>
   2e16c:	f027 0707 	bic.w	r7, r7, #7
   2e170:	2f00      	cmp	r7, #0
   2e172:	463a      	mov	r2, r7
   2e174:	dabf      	bge.n	2e0f6 <_realloc_r+0x2e>
   2e176:	2600      	movs	r6, #0
   2e178:	230c      	movs	r3, #12
   2e17a:	4630      	mov	r0, r6
   2e17c:	f8c8 3000 	str.w	r3, [r8]
   2e180:	b003      	add	sp, #12
   2e182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e186:	462e      	mov	r6, r5
   2e188:	1be3      	subs	r3, r4, r7
   2e18a:	2b0f      	cmp	r3, #15
   2e18c:	d81e      	bhi.n	2e1cc <_realloc_r+0x104>
   2e18e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2e192:	f003 0301 	and.w	r3, r3, #1
   2e196:	4323      	orrs	r3, r4
   2e198:	444c      	add	r4, r9
   2e19a:	f8c9 3004 	str.w	r3, [r9, #4]
   2e19e:	6863      	ldr	r3, [r4, #4]
   2e1a0:	f043 0301 	orr.w	r3, r3, #1
   2e1a4:	6063      	str	r3, [r4, #4]
   2e1a6:	4640      	mov	r0, r8
   2e1a8:	f7ff fa94 	bl	2d6d4 <__malloc_unlock>
   2e1ac:	4630      	mov	r0, r6
   2e1ae:	b003      	add	sp, #12
   2e1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e1b4:	f023 0303 	bic.w	r3, r3, #3
   2e1b8:	18e1      	adds	r1, r4, r3
   2e1ba:	4291      	cmp	r1, r2
   2e1bc:	db1f      	blt.n	2e1fe <_realloc_r+0x136>
   2e1be:	68c3      	ldr	r3, [r0, #12]
   2e1c0:	6882      	ldr	r2, [r0, #8]
   2e1c2:	462e      	mov	r6, r5
   2e1c4:	60d3      	str	r3, [r2, #12]
   2e1c6:	460c      	mov	r4, r1
   2e1c8:	609a      	str	r2, [r3, #8]
   2e1ca:	e7dd      	b.n	2e188 <_realloc_r+0xc0>
   2e1cc:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2e1d0:	eb09 0107 	add.w	r1, r9, r7
   2e1d4:	f002 0201 	and.w	r2, r2, #1
   2e1d8:	444c      	add	r4, r9
   2e1da:	f043 0301 	orr.w	r3, r3, #1
   2e1de:	4317      	orrs	r7, r2
   2e1e0:	f8c9 7004 	str.w	r7, [r9, #4]
   2e1e4:	604b      	str	r3, [r1, #4]
   2e1e6:	6863      	ldr	r3, [r4, #4]
   2e1e8:	f043 0301 	orr.w	r3, r3, #1
   2e1ec:	3108      	adds	r1, #8
   2e1ee:	6063      	str	r3, [r4, #4]
   2e1f0:	4640      	mov	r0, r8
   2e1f2:	f7ff fe7f 	bl	2def4 <_free_r>
   2e1f6:	e7d6      	b.n	2e1a6 <_realloc_r+0xde>
   2e1f8:	4611      	mov	r1, r2
   2e1fa:	f7fe bfb5 	b.w	2d168 <_malloc_r>
   2e1fe:	f01e 0f01 	tst.w	lr, #1
   2e202:	d18e      	bne.n	2e122 <_realloc_r+0x5a>
   2e204:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2e208:	eba9 0a01 	sub.w	sl, r9, r1
   2e20c:	f8da 1004 	ldr.w	r1, [sl, #4]
   2e210:	f021 0103 	bic.w	r1, r1, #3
   2e214:	440b      	add	r3, r1
   2e216:	4423      	add	r3, r4
   2e218:	4293      	cmp	r3, r2
   2e21a:	db25      	blt.n	2e268 <_realloc_r+0x1a0>
   2e21c:	68c2      	ldr	r2, [r0, #12]
   2e21e:	6881      	ldr	r1, [r0, #8]
   2e220:	4656      	mov	r6, sl
   2e222:	60ca      	str	r2, [r1, #12]
   2e224:	6091      	str	r1, [r2, #8]
   2e226:	f8da 100c 	ldr.w	r1, [sl, #12]
   2e22a:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2e22e:	1f22      	subs	r2, r4, #4
   2e230:	2a24      	cmp	r2, #36	; 0x24
   2e232:	60c1      	str	r1, [r0, #12]
   2e234:	6088      	str	r0, [r1, #8]
   2e236:	f200 8094 	bhi.w	2e362 <_realloc_r+0x29a>
   2e23a:	2a13      	cmp	r2, #19
   2e23c:	d96f      	bls.n	2e31e <_realloc_r+0x256>
   2e23e:	6829      	ldr	r1, [r5, #0]
   2e240:	f8ca 1008 	str.w	r1, [sl, #8]
   2e244:	6869      	ldr	r1, [r5, #4]
   2e246:	f8ca 100c 	str.w	r1, [sl, #12]
   2e24a:	2a1b      	cmp	r2, #27
   2e24c:	f200 80a2 	bhi.w	2e394 <_realloc_r+0x2cc>
   2e250:	3508      	adds	r5, #8
   2e252:	f10a 0210 	add.w	r2, sl, #16
   2e256:	e063      	b.n	2e320 <_realloc_r+0x258>
   2e258:	f855 3c08 	ldr.w	r3, [r5, #-8]
   2e25c:	eba9 0a03 	sub.w	sl, r9, r3
   2e260:	f8da 1004 	ldr.w	r1, [sl, #4]
   2e264:	f021 0103 	bic.w	r1, r1, #3
   2e268:	1863      	adds	r3, r4, r1
   2e26a:	4293      	cmp	r3, r2
   2e26c:	f6ff af59 	blt.w	2e122 <_realloc_r+0x5a>
   2e270:	4656      	mov	r6, sl
   2e272:	e7d8      	b.n	2e226 <_realloc_r+0x15e>
   2e274:	6841      	ldr	r1, [r0, #4]
   2e276:	f021 0b03 	bic.w	fp, r1, #3
   2e27a:	44a3      	add	fp, r4
   2e27c:	f107 0010 	add.w	r0, r7, #16
   2e280:	4583      	cmp	fp, r0
   2e282:	da56      	bge.n	2e332 <_realloc_r+0x26a>
   2e284:	f01e 0f01 	tst.w	lr, #1
   2e288:	f47f af4b 	bne.w	2e122 <_realloc_r+0x5a>
   2e28c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2e290:	eba9 0a01 	sub.w	sl, r9, r1
   2e294:	f8da 1004 	ldr.w	r1, [sl, #4]
   2e298:	f021 0103 	bic.w	r1, r1, #3
   2e29c:	448b      	add	fp, r1
   2e29e:	4558      	cmp	r0, fp
   2e2a0:	dce2      	bgt.n	2e268 <_realloc_r+0x1a0>
   2e2a2:	4656      	mov	r6, sl
   2e2a4:	f8da 100c 	ldr.w	r1, [sl, #12]
   2e2a8:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2e2ac:	1f22      	subs	r2, r4, #4
   2e2ae:	2a24      	cmp	r2, #36	; 0x24
   2e2b0:	60c1      	str	r1, [r0, #12]
   2e2b2:	6088      	str	r0, [r1, #8]
   2e2b4:	f200 808f 	bhi.w	2e3d6 <_realloc_r+0x30e>
   2e2b8:	2a13      	cmp	r2, #19
   2e2ba:	f240 808a 	bls.w	2e3d2 <_realloc_r+0x30a>
   2e2be:	6829      	ldr	r1, [r5, #0]
   2e2c0:	f8ca 1008 	str.w	r1, [sl, #8]
   2e2c4:	6869      	ldr	r1, [r5, #4]
   2e2c6:	f8ca 100c 	str.w	r1, [sl, #12]
   2e2ca:	2a1b      	cmp	r2, #27
   2e2cc:	f200 808a 	bhi.w	2e3e4 <_realloc_r+0x31c>
   2e2d0:	3508      	adds	r5, #8
   2e2d2:	f10a 0210 	add.w	r2, sl, #16
   2e2d6:	6829      	ldr	r1, [r5, #0]
   2e2d8:	6011      	str	r1, [r2, #0]
   2e2da:	6869      	ldr	r1, [r5, #4]
   2e2dc:	6051      	str	r1, [r2, #4]
   2e2de:	68a9      	ldr	r1, [r5, #8]
   2e2e0:	6091      	str	r1, [r2, #8]
   2e2e2:	eb0a 0107 	add.w	r1, sl, r7
   2e2e6:	ebab 0207 	sub.w	r2, fp, r7
   2e2ea:	f042 0201 	orr.w	r2, r2, #1
   2e2ee:	6099      	str	r1, [r3, #8]
   2e2f0:	604a      	str	r2, [r1, #4]
   2e2f2:	f8da 3004 	ldr.w	r3, [sl, #4]
   2e2f6:	f003 0301 	and.w	r3, r3, #1
   2e2fa:	431f      	orrs	r7, r3
   2e2fc:	4640      	mov	r0, r8
   2e2fe:	f8ca 7004 	str.w	r7, [sl, #4]
   2e302:	f7ff f9e7 	bl	2d6d4 <__malloc_unlock>
   2e306:	e751      	b.n	2e1ac <_realloc_r+0xe4>
   2e308:	682b      	ldr	r3, [r5, #0]
   2e30a:	6003      	str	r3, [r0, #0]
   2e30c:	686b      	ldr	r3, [r5, #4]
   2e30e:	6043      	str	r3, [r0, #4]
   2e310:	2a1b      	cmp	r2, #27
   2e312:	d82d      	bhi.n	2e370 <_realloc_r+0x2a8>
   2e314:	f100 0308 	add.w	r3, r0, #8
   2e318:	f105 0208 	add.w	r2, r5, #8
   2e31c:	e71b      	b.n	2e156 <_realloc_r+0x8e>
   2e31e:	4632      	mov	r2, r6
   2e320:	6829      	ldr	r1, [r5, #0]
   2e322:	6011      	str	r1, [r2, #0]
   2e324:	6869      	ldr	r1, [r5, #4]
   2e326:	6051      	str	r1, [r2, #4]
   2e328:	68a9      	ldr	r1, [r5, #8]
   2e32a:	6091      	str	r1, [r2, #8]
   2e32c:	461c      	mov	r4, r3
   2e32e:	46d1      	mov	r9, sl
   2e330:	e72a      	b.n	2e188 <_realloc_r+0xc0>
   2e332:	eb09 0107 	add.w	r1, r9, r7
   2e336:	ebab 0b07 	sub.w	fp, fp, r7
   2e33a:	f04b 0201 	orr.w	r2, fp, #1
   2e33e:	6099      	str	r1, [r3, #8]
   2e340:	604a      	str	r2, [r1, #4]
   2e342:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2e346:	f003 0301 	and.w	r3, r3, #1
   2e34a:	431f      	orrs	r7, r3
   2e34c:	4640      	mov	r0, r8
   2e34e:	f845 7c04 	str.w	r7, [r5, #-4]
   2e352:	f7ff f9bf 	bl	2d6d4 <__malloc_unlock>
   2e356:	462e      	mov	r6, r5
   2e358:	e728      	b.n	2e1ac <_realloc_r+0xe4>
   2e35a:	4629      	mov	r1, r5
   2e35c:	f7fb feac 	bl	2a0b8 <memmove>
   2e360:	e6ff      	b.n	2e162 <_realloc_r+0x9a>
   2e362:	4629      	mov	r1, r5
   2e364:	4630      	mov	r0, r6
   2e366:	461c      	mov	r4, r3
   2e368:	46d1      	mov	r9, sl
   2e36a:	f7fb fea5 	bl	2a0b8 <memmove>
   2e36e:	e70b      	b.n	2e188 <_realloc_r+0xc0>
   2e370:	68ab      	ldr	r3, [r5, #8]
   2e372:	6083      	str	r3, [r0, #8]
   2e374:	68eb      	ldr	r3, [r5, #12]
   2e376:	60c3      	str	r3, [r0, #12]
   2e378:	2a24      	cmp	r2, #36	; 0x24
   2e37a:	d017      	beq.n	2e3ac <_realloc_r+0x2e4>
   2e37c:	f100 0310 	add.w	r3, r0, #16
   2e380:	f105 0210 	add.w	r2, r5, #16
   2e384:	e6e7      	b.n	2e156 <_realloc_r+0x8e>
   2e386:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2e38a:	f023 0303 	bic.w	r3, r3, #3
   2e38e:	441c      	add	r4, r3
   2e390:	462e      	mov	r6, r5
   2e392:	e6f9      	b.n	2e188 <_realloc_r+0xc0>
   2e394:	68a9      	ldr	r1, [r5, #8]
   2e396:	f8ca 1010 	str.w	r1, [sl, #16]
   2e39a:	68e9      	ldr	r1, [r5, #12]
   2e39c:	f8ca 1014 	str.w	r1, [sl, #20]
   2e3a0:	2a24      	cmp	r2, #36	; 0x24
   2e3a2:	d00c      	beq.n	2e3be <_realloc_r+0x2f6>
   2e3a4:	3510      	adds	r5, #16
   2e3a6:	f10a 0218 	add.w	r2, sl, #24
   2e3aa:	e7b9      	b.n	2e320 <_realloc_r+0x258>
   2e3ac:	692b      	ldr	r3, [r5, #16]
   2e3ae:	6103      	str	r3, [r0, #16]
   2e3b0:	696b      	ldr	r3, [r5, #20]
   2e3b2:	6143      	str	r3, [r0, #20]
   2e3b4:	f105 0218 	add.w	r2, r5, #24
   2e3b8:	f100 0318 	add.w	r3, r0, #24
   2e3bc:	e6cb      	b.n	2e156 <_realloc_r+0x8e>
   2e3be:	692a      	ldr	r2, [r5, #16]
   2e3c0:	f8ca 2018 	str.w	r2, [sl, #24]
   2e3c4:	696a      	ldr	r2, [r5, #20]
   2e3c6:	f8ca 201c 	str.w	r2, [sl, #28]
   2e3ca:	3518      	adds	r5, #24
   2e3cc:	f10a 0220 	add.w	r2, sl, #32
   2e3d0:	e7a6      	b.n	2e320 <_realloc_r+0x258>
   2e3d2:	4632      	mov	r2, r6
   2e3d4:	e77f      	b.n	2e2d6 <_realloc_r+0x20e>
   2e3d6:	4629      	mov	r1, r5
   2e3d8:	4630      	mov	r0, r6
   2e3da:	9301      	str	r3, [sp, #4]
   2e3dc:	f7fb fe6c 	bl	2a0b8 <memmove>
   2e3e0:	9b01      	ldr	r3, [sp, #4]
   2e3e2:	e77e      	b.n	2e2e2 <_realloc_r+0x21a>
   2e3e4:	68a9      	ldr	r1, [r5, #8]
   2e3e6:	f8ca 1010 	str.w	r1, [sl, #16]
   2e3ea:	68e9      	ldr	r1, [r5, #12]
   2e3ec:	f8ca 1014 	str.w	r1, [sl, #20]
   2e3f0:	2a24      	cmp	r2, #36	; 0x24
   2e3f2:	d003      	beq.n	2e3fc <_realloc_r+0x334>
   2e3f4:	3510      	adds	r5, #16
   2e3f6:	f10a 0218 	add.w	r2, sl, #24
   2e3fa:	e76c      	b.n	2e2d6 <_realloc_r+0x20e>
   2e3fc:	692a      	ldr	r2, [r5, #16]
   2e3fe:	f8ca 2018 	str.w	r2, [sl, #24]
   2e402:	696a      	ldr	r2, [r5, #20]
   2e404:	f8ca 201c 	str.w	r2, [sl, #28]
   2e408:	3518      	adds	r5, #24
   2e40a:	f10a 0220 	add.w	r2, sl, #32
   2e40e:	e762      	b.n	2e2d6 <_realloc_r+0x20e>
   2e410:	2000cc18 	.word	0x2000cc18
